
/private/var/folders/3h/f1rm8vzs1lv5ljhwy05p7nfhf1r72j/T/arduino/sketches/64EF741A8E74C5DF9B6FEB97D70BCF95/soundpauli_ni404.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr

60001412 <memory_clear>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001412:	f04f 0300 	mov.w	r3, #0
60001416:	f840 3b04 	str.w	r3, [r0], #4
6000141a:	4281      	cmp	r1, r0
6000141c:	d8fb      	bhi.n	60001416 <memory_clear+0x4>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
6000141e:	4770      	bx	lr

60001420 <ResetHandler2>:
{
60001420:	b580      	push	{r7, lr}
	__asm__ volatile("dsb":::"memory");
60001422:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001426:	bf00      	nop
	asm volatile("nop");
60001428:	bf00      	nop
	asm volatile("nop");
6000142a:	bf00      	nop
	asm volatile("nop");
6000142c:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142e:	f000 ff03 	bl	60002238 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001432:	4b68      	ldr	r3, [pc, #416]	; (600015d4 <ResetHandler2+0x1b4>)
60001434:	2208      	movs	r2, #8
60001436:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	asm volatile("nop");
60001440:	bf00      	nop
	asm volatile("nop");
60001442:	bf00      	nop
	asm volatile("nop");
60001444:	bf00      	nop
	asm volatile("nop");
60001446:	bf00      	nop
	asm volatile("nop");
60001448:	bf00      	nop
	asm volatile("nop");
6000144a:	bf00      	nop
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000145a:	4a5f      	ldr	r2, [pc, #380]	; (600015d8 <ResetHandler2+0x1b8>)
6000145c:	495f      	ldr	r1, [pc, #380]	; (600015dc <ResetHandler2+0x1bc>)
6000145e:	4860      	ldr	r0, [pc, #384]	; (600015e0 <ResetHandler2+0x1c0>)
60001460:	f7ff ffce 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001464:	4a5f      	ldr	r2, [pc, #380]	; (600015e4 <ResetHandler2+0x1c4>)
60001466:	4960      	ldr	r1, [pc, #384]	; (600015e8 <ResetHandler2+0x1c8>)
60001468:	4860      	ldr	r0, [pc, #384]	; (600015ec <ResetHandler2+0x1cc>)
6000146a:	f7ff ffc9 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000146e:	4960      	ldr	r1, [pc, #384]	; (600015f0 <ResetHandler2+0x1d0>)
60001470:	4860      	ldr	r0, [pc, #384]	; (600015f4 <ResetHandler2+0x1d4>)
60001472:	f7ff ffce 	bl	60001412 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001476:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000147a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
6000147e:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001482:	2300      	movs	r3, #0
60001484:	495c      	ldr	r1, [pc, #368]	; (600015f8 <ResetHandler2+0x1d8>)
60001486:	4a5d      	ldr	r2, [pc, #372]	; (600015fc <ResetHandler2+0x1dc>)
60001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
6000148c:	3301      	adds	r3, #1
6000148e:	2bb0      	cmp	r3, #176	; 0xb0
60001490:	d1fa      	bne.n	60001488 <ResetHandler2+0x68>
60001492:	4b5b      	ldr	r3, [pc, #364]	; (60001600 <ResetHandler2+0x1e0>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001494:	2180      	movs	r1, #128	; 0x80
60001496:	4a5b      	ldr	r2, [pc, #364]	; (60001604 <ResetHandler2+0x1e4>)
60001498:	f803 1b01 	strb.w	r1, [r3], #1
6000149c:	4293      	cmp	r3, r2
6000149e:	d1fb      	bne.n	60001498 <ResetHandler2+0x78>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014a0:	4e55      	ldr	r6, [pc, #340]	; (600015f8 <ResetHandler2+0x1d8>)
600014a2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
600014a6:	f8c4 6d08 	str.w	r6, [r4, #3336]	; 0xd08
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014aa:	4d4a      	ldr	r5, [pc, #296]	; (600015d4 <ResetHandler2+0x1b4>)
600014ac:	f04f 3880 	mov.w	r8, #2155905152	; 0x80808080
600014b0:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b4:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001638 <ResetHandler2+0x218>
600014b8:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014bc:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014c0:	f8df 9178 	ldr.w	r9, [pc, #376]	; 6000163c <ResetHandler2+0x21c>
600014c4:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014c8:	f8d4 3d24 	ldr.w	r3, [r4, #3364]	; 0xd24
600014cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
600014d0:	f8c4 3d24 	str.w	r3, [r4, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014d4:	4f4c      	ldr	r7, [pc, #304]	; (60001608 <ResetHandler2+0x1e8>)
600014d6:	69fb      	ldr	r3, [r7, #28]
600014d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014e0:	61fb      	str	r3, [r7, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
600014e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014ec:	627b      	str	r3, [r7, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014ee:	4b47      	ldr	r3, [pc, #284]	; (6000160c <ResetHandler2+0x1ec>)
600014f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600014f4:	669a      	str	r2, [r3, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014f6:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014f8:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014fa:	675a      	str	r2, [r3, #116]	; 0x74
	configure_cache();
600014fc:	f000 fea1 	bl	60002242 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001500:	4b43      	ldr	r3, [pc, #268]	; (60001610 <ResetHandler2+0x1f0>)
60001502:	63b3      	str	r3, [r6, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
60001504:	4b43      	ldr	r3, [pc, #268]	; (60001614 <ResetHandler2+0x1f4>)
60001506:	63f3      	str	r3, [r6, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001508:	2363      	movs	r3, #99	; 0x63
6000150a:	6163      	str	r3, [r4, #20]
	SYST_CVR = 0;
6000150c:	2600      	movs	r6, #0
6000150e:	61a6      	str	r6, [r4, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001510:	2303      	movs	r3, #3
60001512:	6123      	str	r3, [r4, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001514:	4b40      	ldr	r3, [pc, #256]	; (60001618 <ResetHandler2+0x1f8>)
60001516:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000151a:	f8d4 3dfc 	ldr.w	r3, [r4, #3580]	; 0xdfc
6000151e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
60001522:	f8c4 3dfc 	str.w	r3, [r4, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001526:	4b3d      	ldr	r3, [pc, #244]	; (6000161c <ResetHandler2+0x1fc>)
60001528:	681a      	ldr	r2, [r3, #0]
6000152a:	f042 0201 	orr.w	r2, r2, #1
6000152e:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001530:	685a      	ldr	r2, [r3, #4]
60001532:	4b3b      	ldr	r3, [pc, #236]	; (60001620 <ResetHandler2+0x200>)
60001534:	601a      	str	r2, [r3, #0]
	usb_pll_start();	
60001536:	f001 f857 	bl	600025e8 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000153a:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000153e:	f8c5 a100 	str.w	sl, [r5, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001542:	f8c5 80f4 	str.w	r8, [r5, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001546:	f8c5 90f0 	str.w	r9, [r5, #240]	; 0xf0
	set_arm_clock(F_CPU);
6000154a:	4836      	ldr	r0, [pc, #216]	; (60001624 <ResetHandler2+0x204>)
6000154c:	f001 fa2c 	bl	600029a8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
60001552:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
60001556:	66fb      	str	r3, [r7, #108]	; 0x6c
	PIT_MCR = 0;
60001558:	4b33      	ldr	r3, [pc, #204]	; (60001628 <ResetHandler2+0x208>)
6000155a:	601e      	str	r6, [r3, #0]
	PIT_TCTRL0 = 0;
6000155c:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
60001560:	f8c3 6118 	str.w	r6, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001564:	f8c3 6128 	str.w	r6, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001568:	f8c3 6138 	str.w	r6, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
60001570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
60001572:	f013 0f01 	tst.w	r3, #1
60001576:	d109      	bne.n	6000158c <ResetHandler2+0x16c>
		SNVS_LPSRTCLR = 1546300800u << 15;
60001578:	4b2c      	ldr	r3, [pc, #176]	; (6000162c <ResetHandler2+0x20c>)
6000157a:	4a2d      	ldr	r2, [pc, #180]	; (60001630 <ResetHandler2+0x210>)
6000157c:	655a      	str	r2, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000157e:	f642 6215 	movw	r2, #11797	; 0x2e15
60001582:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
60001586:	f042 0201 	orr.w	r2, r2, #1
6000158a:	639a      	str	r2, [r3, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
6000158c:	4a27      	ldr	r2, [pc, #156]	; (6000162c <ResetHandler2+0x20c>)
6000158e:	6893      	ldr	r3, [r2, #8]
60001590:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
60001594:	6093      	str	r3, [r2, #8]
	configure_external_ram();
60001596:	f000 fedd 	bl	60002354 <configure_external_ram>
	analog_init();
6000159a:	f001 f999 	bl	600028d0 <analog_init>
	pwm_init();
6000159e:	f001 f9cf 	bl	60002940 <__pwm_init_veneer>
	tempmon_init();
600015a2:	f001 f851 	bl	60002648 <tempmon_init>
	startup_middle_hook();
600015a6:	f000 fe48 	bl	6000223a <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015aa:	4a22      	ldr	r2, [pc, #136]	; (60001634 <ResetHandler2+0x214>)
600015ac:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ae:	2b13      	cmp	r3, #19
600015b0:	d9fc      	bls.n	600015ac <ResetHandler2+0x18c>
	usb_init();
600015b2:	f001 f8ed 	bl	60002790 <usb_init>
600015b6:	4a1f      	ldr	r2, [pc, #124]	; (60001634 <ResetHandler2+0x214>)
600015b8:	6813      	ldr	r3, [r2, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015ba:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015be:	d3fb      	bcc.n	600015b8 <ResetHandler2+0x198>
	startup_debug_reset();
600015c0:	f000 fe3d 	bl	6000223e <startup_debug_reset>
	startup_late_hook();
600015c4:	f000 fe3a 	bl	6000223c <startup_default_late_hook>
	__libc_init_array();
600015c8:	f001 f9de 	bl	60002988 <____libc_init_array_veneer>
	main();
600015cc:	f001 f9d4 	bl	60002978 <__main_veneer>
	while (1) asm("WFI");
600015d0:	bf30      	wfi
600015d2:	e7fd      	b.n	600015d0 <ResetHandler2+0x1b0>
600015d4:	400d8000 	.word	0x400d8000
600015d8:	00028ba4 	.word	0x00028ba4
600015dc:	60003064 	.word	0x60003064
600015e0:	00000000 	.word	0x00000000
600015e4:	200062c0 	.word	0x200062c0
600015e8:	6002bc0c 	.word	0x6002bc0c
600015ec:	20000000 	.word	0x20000000
600015f0:	20008c80 	.word	0x20008c80
600015f4:	200062c0 	.word	0x200062c0
600015f8:	20006000 	.word	0x20006000
600015fc:	00017975 	.word	0x00017975
60001600:	e000e400 	.word	0xe000e400
60001604:	e000e4a0 	.word	0xe000e4a0
60001608:	400fc000 	.word	0x400fc000
6000160c:	400ac000 	.word	0x400ac000
60001610:	00015ec5 	.word	0x00015ec5
60001614:	00015ecd 	.word	0x00015ecd
60001618:	20200000 	.word	0x20200000
6000161c:	e0001000 	.word	0xe0001000
60001620:	20008a68 	.word	0x20008a68
60001624:	30a32c00 	.word	0x30a32c00
60001628:	40084000 	.word	0x40084000
6000162c:	400d4000 	.word	0x400d4000
60001630:	56c00000 	.word	0x56c00000
60001634:	20008a6c 	.word	0x20008a6c
60001638:	2018101b 	.word	0x2018101b
6000163c:	13110d0c 	.word	0x13110d0c

60001640 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001640:	4b05      	ldr	r3, [pc, #20]	; (60001658 <ResetHandler+0x18>)
60001642:	4a06      	ldr	r2, [pc, #24]	; (6000165c <ResetHandler+0x1c>)
60001644:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001646:	4a06      	ldr	r2, [pc, #24]	; (60001660 <ResetHandler+0x20>)
60001648:	641a      	str	r2, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 022a 	mov.w	r2, #11141120	; 0xaa0000
6000164e:	639a      	str	r2, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001650:	4b04      	ldr	r3, [pc, #16]	; (60001664 <ResetHandler+0x24>)
60001652:	469d      	mov	sp, r3
	ResetHandler2();
60001654:	f7ff fee4 	bl	60001420 <ResetHandler2>
60001658:	400ac000 	.word	0x400ac000
6000165c:	aaaaafff 	.word	0xaaaaafff
60001660:	00200007 	.word	0x00200007
60001664:	20050000 	.word	0x20050000

60001668 <set_audioClock(int, long, unsigned long, bool)>:
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001668:	b923      	cbnz	r3, 60001674 <set_audioClock(int, long, unsigned long, bool)+0xc>
6000166a:	4b13      	ldr	r3, [pc, #76]	; (600016b8 <set_audioClock(int, long, unsigned long, bool)+0x50>)
6000166c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
6000166e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001672:	d120      	bne.n	600016b6 <set_audioClock(int, long, unsigned long, bool)+0x4e>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
60001674:	f000 003f 	and.w	r0, r0, #63	; 0x3f
60001678:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
6000167c:	4b0e      	ldr	r3, [pc, #56]	; (600016b8 <set_audioClock(int, long, unsigned long, bool)+0x50>)
6000167e:	6718      	str	r0, [r3, #112]	; 0x70

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001680:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
60001684:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001688:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
6000168c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
60001690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001692:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
60001696:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60001698:	461a      	mov	r2, r3
6000169a:	6f13      	ldr	r3, [r2, #112]	; 0x70
6000169c:	2b00      	cmp	r3, #0
6000169e:	dafc      	bge.n	6000169a <set_audioClock(int, long, unsigned long, bool)+0x32>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
600016a0:	4b05      	ldr	r3, [pc, #20]	; (600016b8 <set_audioClock(int, long, unsigned long, bool)+0x50>)
600016a2:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
600016a6:	4a05      	ldr	r2, [pc, #20]	; (600016bc <set_audioClock(int, long, unsigned long, bool)+0x54>)
600016a8:	400a      	ands	r2, r1
600016aa:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
600016ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
600016b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
600016b4:	671a      	str	r2, [r3, #112]	; 0x70
}
600016b6:	4770      	bx	lr
600016b8:	400d8000 	.word	0x400d8000
600016bc:	ff7f7fff 	.word	0xff7f7fff

600016c0 <TwoWire::configSDApin(unsigned char)>:
	}
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
600016c0:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016c2:	4a0f      	ldr	r2, [pc, #60]	; (60001700 <TwoWire::configSDApin(unsigned char)+0x40>)
600016c4:	6943      	ldr	r3, [r0, #20]
600016c6:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016ca:	7a1b      	ldrb	r3, [r3, #8]
600016cc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
600016d0:	689b      	ldr	r3, [r3, #8]
600016d2:	4c0c      	ldr	r4, [pc, #48]	; (60001704 <TwoWire::configSDApin(unsigned char)+0x44>)
600016d4:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016d6:	6943      	ldr	r3, [r0, #20]
600016d8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
600016dc:	f893 c008 	ldrb.w	ip, [r3, #8]
600016e0:	eb02 120c 	add.w	r2, r2, ip, lsl #4
600016e4:	6852      	ldr	r2, [r2, #4]
600016e6:	68db      	ldr	r3, [r3, #12]
600016e8:	6013      	str	r3, [r2, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016ea:	6943      	ldr	r3, [r0, #20]
600016ec:	eb03 1101 	add.w	r1, r3, r1, lsl #4
600016f0:	690b      	ldr	r3, [r1, #16]
600016f2:	b10b      	cbz	r3, 600016f8 <TwoWire::configSDApin(unsigned char)+0x38>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016f4:	694a      	ldr	r2, [r1, #20]
600016f6:	601a      	str	r2, [r3, #0]
	}
}
600016f8:	f85d 4b04 	ldr.w	r4, [sp], #4
600016fc:	4770      	bx	lr
600016fe:	bf00      	nop
60001700:	2000373c 	.word	0x2000373c
60001704:	0001f861 	.word	0x0001f861

60001708 <TwoWire::setSDA(unsigned char)>:
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
60001708:	b538      	push	{r3, r4, r5, lr}
6000170a:	4604      	mov	r4, r0
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
6000170c:	6943      	ldr	r3, [r0, #20]
6000170e:	7e02      	ldrb	r2, [r0, #24]
60001710:	eb03 1202 	add.w	r2, r3, r2, lsl #4
60001714:	7a10      	ldrb	r0, [r2, #8]
60001716:	4288      	cmp	r0, r1
60001718:	d009      	beq.n	6000172e <TwoWire::setSDA(unsigned char)+0x26>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
6000171a:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
6000171c:	2aff      	cmp	r2, #255	; 0xff
6000171e:	d006      	beq.n	6000172e <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
60001720:	4291      	cmp	r1, r2
60001722:	d007      	beq.n	60001734 <TwoWire::setSDA(unsigned char)+0x2c>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
60001724:	7e1a      	ldrb	r2, [r3, #24]
		if (sda_pin == 255) return;
60001726:	2aff      	cmp	r2, #255	; 0xff
60001728:	d001      	beq.n	6000172e <TwoWire::setSDA(unsigned char)+0x26>
		if (sda_pin == pin) break;
6000172a:	428a      	cmp	r2, r1
6000172c:	d000      	beq.n	60001730 <TwoWire::setSDA(unsigned char)+0x28>
}
6000172e:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.sda_pins)) return;
60001730:	2501      	movs	r5, #1
60001732:	e000      	b.n	60001736 <TwoWire::setSDA(unsigned char)+0x2e>
	uint32_t newindex=0;
60001734:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001736:	681a      	ldr	r2, [r3, #0]
60001738:	6812      	ldr	r2, [r2, #0]
6000173a:	685b      	ldr	r3, [r3, #4]
6000173c:	421a      	tst	r2, r3
6000173e:	d101      	bne.n	60001744 <TwoWire::setSDA(unsigned char)+0x3c>
	sda_pin_index_ = newindex;
60001740:	7625      	strb	r5, [r4, #24]
60001742:	e7f4      	b.n	6000172e <TwoWire::setSDA(unsigned char)+0x26>
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001744:	4b05      	ldr	r3, [pc, #20]	; (6000175c <TwoWire::setSDA(unsigned char)+0x54>)
60001746:	eb03 1300 	add.w	r3, r3, r0, lsl #4
6000174a:	685b      	ldr	r3, [r3, #4]
6000174c:	2205      	movs	r2, #5
6000174e:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
60001750:	4629      	mov	r1, r5
60001752:	4620      	mov	r0, r4
60001754:	f7ff ffb4 	bl	600016c0 <TwoWire::configSDApin(unsigned char)>
60001758:	e7f2      	b.n	60001740 <TwoWire::setSDA(unsigned char)+0x38>
6000175a:	bf00      	nop
6000175c:	2000373c 	.word	0x2000373c

60001760 <TwoWire::configSCLpin(unsigned char)>:
	}
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
60001760:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001762:	4a0f      	ldr	r2, [pc, #60]	; (600017a0 <TwoWire::configSCLpin(unsigned char)+0x40>)
60001764:	6943      	ldr	r3, [r0, #20]
60001766:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000176a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
6000176e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
60001772:	689b      	ldr	r3, [r3, #8]
60001774:	4c0b      	ldr	r4, [pc, #44]	; (600017a4 <TwoWire::configSCLpin(unsigned char)+0x44>)
60001776:	601c      	str	r4, [r3, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001778:	6943      	ldr	r3, [r0, #20]
6000177a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
6000177e:	f893 c028 	ldrb.w	ip, [r3, #40]	; 0x28
60001782:	eb02 120c 	add.w	r2, r2, ip, lsl #4
60001786:	6852      	ldr	r2, [r2, #4]
60001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
6000178a:	6013      	str	r3, [r2, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000178c:	6943      	ldr	r3, [r0, #20]
6000178e:	eb03 1101 	add.w	r1, r3, r1, lsl #4
60001792:	6b0b      	ldr	r3, [r1, #48]	; 0x30
60001794:	b10b      	cbz	r3, 6000179a <TwoWire::configSCLpin(unsigned char)+0x3a>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001796:	6b4a      	ldr	r2, [r1, #52]	; 0x34
60001798:	601a      	str	r2, [r3, #0]
	}
}
6000179a:	f85d 4b04 	ldr.w	r4, [sp], #4
6000179e:	4770      	bx	lr
600017a0:	2000373c 	.word	0x2000373c
600017a4:	0001f861 	.word	0x0001f861

600017a8 <TwoWire::setSCL(unsigned char)>:
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
600017a8:	b538      	push	{r3, r4, r5, lr}
600017aa:	4604      	mov	r4, r0
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
600017ac:	6943      	ldr	r3, [r0, #20]
600017ae:	7e42      	ldrb	r2, [r0, #25]
600017b0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600017b4:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
600017b8:	4288      	cmp	r0, r1
600017ba:	d00b      	beq.n	600017d4 <TwoWire::setSCL(unsigned char)+0x2c>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
600017bc:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
600017c0:	2aff      	cmp	r2, #255	; 0xff
600017c2:	d007      	beq.n	600017d4 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
600017c4:	4291      	cmp	r1, r2
600017c6:	d008      	beq.n	600017da <TwoWire::setSCL(unsigned char)+0x32>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
600017c8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		if (scl_pin == 255) return;
600017cc:	2aff      	cmp	r2, #255	; 0xff
600017ce:	d001      	beq.n	600017d4 <TwoWire::setSCL(unsigned char)+0x2c>
		if (scl_pin == pin) break;
600017d0:	428a      	cmp	r2, r1
600017d2:	d000      	beq.n	600017d6 <TwoWire::setSCL(unsigned char)+0x2e>
}
600017d4:	bd38      	pop	{r3, r4, r5, pc}
		if (++newindex >= sizeof(hardware.scl_pins)) return;
600017d6:	2501      	movs	r5, #1
600017d8:	e000      	b.n	600017dc <TwoWire::setSCL(unsigned char)+0x34>
	uint32_t newindex=0;
600017da:	2500      	movs	r5, #0
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
600017dc:	681a      	ldr	r2, [r3, #0]
600017de:	6812      	ldr	r2, [r2, #0]
600017e0:	685b      	ldr	r3, [r3, #4]
600017e2:	421a      	tst	r2, r3
600017e4:	d101      	bne.n	600017ea <TwoWire::setSCL(unsigned char)+0x42>
	scl_pin_index_ = newindex;
600017e6:	7665      	strb	r5, [r4, #25]
600017e8:	e7f4      	b.n	600017d4 <TwoWire::setSCL(unsigned char)+0x2c>
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017ea:	4b05      	ldr	r3, [pc, #20]	; (60001800 <TwoWire::setSCL(unsigned char)+0x58>)
600017ec:	eb03 1300 	add.w	r3, r3, r0, lsl #4
600017f0:	685b      	ldr	r3, [r3, #4]
600017f2:	2205      	movs	r2, #5
600017f4:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017f6:	4629      	mov	r1, r5
600017f8:	4620      	mov	r0, r4
600017fa:	f7ff ffb1 	bl	60001760 <TwoWire::configSCLpin(unsigned char)>
600017fe:	e7f2      	b.n	600017e6 <TwoWire::setSCL(unsigned char)+0x3e>
60001800:	2000373c 	.word	0x2000373c

60001804 <TwoWire::begin()>:
{
60001804:	b510      	push	{r4, lr}
60001806:	4604      	mov	r4, r0
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
60001808:	4a0d      	ldr	r2, [pc, #52]	; (60001840 <TwoWire::begin()+0x3c>)
6000180a:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000180c:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
60001810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
60001814:	6393      	str	r3, [r2, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
60001816:	6941      	ldr	r1, [r0, #20]
60001818:	680a      	ldr	r2, [r1, #0]
6000181a:	6813      	ldr	r3, [r2, #0]
6000181c:	6849      	ldr	r1, [r1, #4]
6000181e:	430b      	orrs	r3, r1
60001820:	6013      	str	r3, [r2, #0]
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
60001822:	6903      	ldr	r3, [r0, #16]
	port->MCR = LPI2C_MCR_RST;
60001824:	2202      	movs	r2, #2
60001826:	611a      	str	r2, [r3, #16]
	setClock(100000);
60001828:	4906      	ldr	r1, [pc, #24]	; (60001844 <TwoWire::begin()+0x40>)
6000182a:	f001 f8b5 	bl	60002998 <___ZN7TwoWire8setClockEm_veneer>
	configSDApin(sda_pin_index_); // Setup SDA register
6000182e:	7e21      	ldrb	r1, [r4, #24]
60001830:	4620      	mov	r0, r4
60001832:	f7ff ff45 	bl	600016c0 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
60001836:	7e61      	ldrb	r1, [r4, #25]
60001838:	4620      	mov	r0, r4
6000183a:	f7ff ff91 	bl	60001760 <TwoWire::configSCLpin(unsigned char)>
}
6000183e:	bd10      	pop	{r4, pc}
60001840:	400fc000 	.word	0x400fc000
60001844:	000186a0 	.word	0x000186a0

60001848 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:


// Set up the pool of audio data blocks
// placing them all onto the free list
FLASHMEM void AudioStream::initialize_memory(audio_block_t *data, unsigned int num)
{
60001848:	b530      	push	{r4, r5, lr}
6000184a:	b08d      	sub	sp, #52	; 0x34
6000184c:	4604      	mov	r4, r0
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
6000184e:	468c      	mov	ip, r1
60001850:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
60001854:	bf28      	it	cs
60001856:	f44f 7c60 	movcs.w	ip, #896	; 0x380
	__disable_irq();
6000185a:	b672      	cpsid	i
	memory_pool = data;
6000185c:	4b26      	ldr	r3, [pc, #152]	; (600018f8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
6000185e:	6018      	str	r0, [r3, #0]
	memory_pool_first_mask = 0;
60001860:	4b26      	ldr	r3, [pc, #152]	; (600018fc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
60001862:	2200      	movs	r2, #0
60001864:	801a      	strh	r2, [r3, #0]
	for (i=0; i < NUM_MASKS; i++) {
60001866:	4a26      	ldr	r2, [pc, #152]	; (60001900 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
60001868:	1f13      	subs	r3, r2, #4
6000186a:	326c      	adds	r2, #108	; 0x6c
		memory_pool_available_mask[i] = 0;
6000186c:	2000      	movs	r0, #0
6000186e:	f843 0f04 	str.w	r0, [r3, #4]!
	for (i=0; i < NUM_MASKS; i++) {
60001872:	4293      	cmp	r3, r2
60001874:	d1fb      	bne.n	6000186e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x26>
	}
	for (i=0; i < num; i++) {
60001876:	b1c1      	cbz	r1, 600018aa <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x62>
60001878:	2200      	movs	r2, #0
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000187a:	4821      	ldr	r0, [pc, #132]	; (60001900 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
6000187c:	f04f 0e01 	mov.w	lr, #1
60001880:	0951      	lsrs	r1, r2, #5
60001882:	f002 031f 	and.w	r3, r2, #31
60001886:	fa0e f303 	lsl.w	r3, lr, r3
6000188a:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
6000188e:	432b      	orrs	r3, r5
60001890:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
	for (i=0; i < num; i++) {
60001894:	3201      	adds	r2, #1
60001896:	4594      	cmp	ip, r2
60001898:	d8f2      	bhi.n	60001880 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x38>
6000189a:	4620      	mov	r0, r4
6000189c:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
6000189e:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
600018a0:	3301      	adds	r3, #1
600018a2:	f500 7082 	add.w	r0, r0, #260	; 0x104
600018a6:	459c      	cmp	ip, r3
600018a8:	d8f9      	bhi.n	6000189e <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x56>
	}
	if (update_scheduled == false) {
600018aa:	4b16      	ldr	r3, [pc, #88]	; (60001904 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
600018ac:	781b      	ldrb	r3, [r3, #0]
600018ae:	b113      	cbz	r3, 600018b6 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x6e>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
600018b0:	b662      	cpsie	i
}
600018b2:	b00d      	add	sp, #52	; 0x34
600018b4:	bd30      	pop	{r4, r5, pc}
		IntervalTimer *timer = new IntervalTimer();
600018b6:	2008      	movs	r0, #8
600018b8:	f001 f83a 	bl	60002930 <___Znwj_veneer>
600018bc:	4604      	mov	r4, r0
// instances may be in use by libraries.
class IntervalTimer {
private:
	static const int32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000); // need to change to int32_t to avoid warnings
public:
	constexpr IntervalTimer() {
600018be:	2300      	movs	r3, #0
600018c0:	6003      	str	r3, [r0, #0]
600018c2:	2380      	movs	r3, #128	; 0x80
600018c4:	7103      	strb	r3, [r0, #4]
        static_assert(Alignment % alignof(C) == 0,
            "inplace_function cannot be constructed from object with this (large) alignment"
        );

        static const vtable_t vt{inplace_function_detail::wrapper<C>{}};
        vtable_ptr_ = std::addressof(vt);
600018c6:	4b10      	ldr	r3, [pc, #64]	; (60001908 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
600018c8:	9300      	str	r3, [sp, #0]

        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
600018ca:	4a10      	ldr	r2, [pc, #64]	; (6000190c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
600018cc:	9202      	str	r2, [sp, #8]
    inplace_function(std::nullptr_t) noexcept :
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
    {}

    inplace_function(const inplace_function& other) :
        vtable_ptr_{other.vtable_ptr_}
600018ce:	9306      	str	r3, [sp, #24]
    {
        vtable_ptr_->copy_ptr(
600018d0:	a902      	add	r1, sp, #8
600018d2:	a808      	add	r0, sp, #32
600018d4:	f001 f838 	bl	60002948 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>
	// for precise timing.  Returns true is sucessful, or false if
	// all hardware timers are already in use.
	template <typename period_t>
	bool begin(callback_t funct, period_t period) {
		uint32_t cycles = cyclesFromPeriod(period);
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
600018d8:	4a0d      	ldr	r2, [pc, #52]	; (60001910 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc8>)
600018da:	a906      	add	r1, sp, #24
600018dc:	4620      	mov	r0, r4
600018de:	f001 f867 	bl	600029b0 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>
        return *this;
    }

    ~inplace_function()
    {
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
600018e2:	9b06      	ldr	r3, [sp, #24]
600018e4:	68db      	ldr	r3, [r3, #12]
600018e6:	a808      	add	r0, sp, #32
600018e8:	4798      	blx	r3
600018ea:	9b00      	ldr	r3, [sp, #0]
600018ec:	68db      	ldr	r3, [r3, #12]
600018ee:	a802      	add	r0, sp, #8
600018f0:	4798      	blx	r3
			update_setup();
600018f2:	f001 f855 	bl	600029a0 <___ZN11AudioStream12update_setupEv_veneer>
600018f6:	e7db      	b.n	600018b0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
600018f8:	20006d5c 	.word	0x20006d5c
600018fc:	20008c08 	.word	0x20008c08
60001900:	20006d64 	.word	0x20006d64
60001904:	20008c23 	.word	0x20008c23
60001908:	200029b8 	.word	0x200029b8
6000190c:	00015939 	.word	0x00015939
60001910:	0001101b 	.word	0x0001101b

60001914 <isvalid(arm_fault_info_struct const*)>:
static int isvalid(const struct arm_fault_info_struct *info)
{
	uint32_t i, crc;
	const uint32_t *data, *end;

	if (info->len != sizeof(*info) / 4) return 0;
60001914:	6803      	ldr	r3, [r0, #0]
60001916:	2b0b      	cmp	r3, #11
60001918:	d11c      	bne.n	60001954 <isvalid(arm_fault_info_struct const*)+0x40>
{
6000191a:	b510      	push	{r4, lr}
6000191c:	4686      	mov	lr, r0
	data = (uint32_t *)info;
	end = data + (sizeof(*info) / 4 - 1);
6000191e:	f100 0428 	add.w	r4, r0, #40	; 0x28
	data = (uint32_t *)info;
60001922:	4684      	mov	ip, r0
	crc = 0xFFFFFFFF;
60001924:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	while (data < end) {
		crc ^= *data++;
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001928:	480b      	ldr	r0, [pc, #44]	; (60001958 <isvalid(arm_fault_info_struct const*)+0x44>)
		crc ^= *data++;
6000192a:	f85c 3b04 	ldr.w	r3, [ip], #4
6000192e:	405a      	eors	r2, r3
60001930:	2120      	movs	r1, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
60001932:	f002 0301 	and.w	r3, r2, #1
60001936:	fb00 f303 	mul.w	r3, r0, r3
6000193a:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
6000193e:	3901      	subs	r1, #1
60001940:	d1f7      	bne.n	60001932 <isvalid(arm_fault_info_struct const*)+0x1e>
	while (data < end) {
60001942:	4564      	cmp	r4, ip
60001944:	d1f1      	bne.n	6000192a <isvalid(arm_fault_info_struct const*)+0x16>
	}
	if (crc != info->crc) return 0;
60001946:	f8de 0028 	ldr.w	r0, [lr, #40]	; 0x28
6000194a:	4290      	cmp	r0, r2
6000194c:	bf14      	ite	ne
6000194e:	2000      	movne	r0, #0
60001950:	2001      	moveq	r0, #1
	return 1;
}
60001952:	bd10      	pop	{r4, pc}
	if (info->len != sizeof(*info) / 4) return 0;
60001954:	2000      	movs	r0, #0
}
60001956:	4770      	bx	lr
60001958:	edb88320 	.word	0xedb88320

6000195c <CrashReportClass::clear()>:
{
6000195c:	b410      	push	{r4}

FLASHMEM
static void cleardata(struct arm_fault_info_struct *info)
{
	info->len = 0;
6000195e:	4b26      	ldr	r3, [pc, #152]	; (600019f8 <CrashReportClass::clear()+0x9c>)
60001960:	2200      	movs	r2, #0
60001962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	info->ipsr  = 0;
60001966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	info->cfsr  = 0;
6000196a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	info->hfsr  = 0;
6000196e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	info->mmfar = 0;
60001972:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	info->bfar  = 0;
60001976:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	info->ret = 0;
6000197a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	info->xpsr  = 0;
6000197e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	info->crc = 0;
60001982:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
60001986:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
6000198a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000198e:	491b      	ldr	r1, [pc, #108]	; (600019fc <CrashReportClass::clear()+0xa0>)
60001990:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
60001994:	3120      	adds	r1, #32
60001996:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
6000199a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000199e:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(info, sizeof(*info));
	SRC_SRSR = SRC_SRSR; // zeros all write-1-to-clear bits
600019a2:	4b17      	ldr	r3, [pc, #92]	; (60001a00 <CrashReportClass::clear()+0xa4>)
600019a4:	6899      	ldr	r1, [r3, #8]
600019a6:	6099      	str	r1, [r3, #8]
	SRC_GPR5 = 0;
600019a8:	631a      	str	r2, [r3, #48]	; 0x30
  *(volatile uint32_t *)(&bc->bitmask) = 0;
600019aa:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
600019ae:	f5a3 23f2 	sub.w	r3, r3, #495616	; 0x79000
600019b2:	f8c3 2fc0 	str.w	r2, [r3, #4032]	; 0xfc0
			arm_dcache_flush((void *)bc, sizeof(struct crashreport_breadcrumbs_struct));
		}
	}
	static uint32_t checksum(volatile const void *data, int len) {
		volatile const uint16_t *p = (volatile const uint16_t *)data;
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
600019b6:	2101      	movs	r1, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
600019b8:	f503 637c 	add.w	r3, r3, #4032	; 0xfc0
		while (len > 0) {
600019bc:	4c11      	ldr	r4, [pc, #68]	; (60001a04 <CrashReportClass::clear()+0xa8>)
			a += *p++;
600019be:	4618      	mov	r0, r3
600019c0:	3302      	adds	r3, #2
600019c2:	8800      	ldrh	r0, [r0, #0]
600019c4:	fa11 f180 	uxtah	r1, r1, r0
			b += a;
600019c8:	440a      	add	r2, r1
		while (len > 0) {
600019ca:	42a3      	cmp	r3, r4
600019cc:	d1f7      	bne.n	600019be <CrashReportClass::clear()+0x62>
			len -= 2;
		}
		a = a & 65535;
600019ce:	b289      	uxth	r1, r1
		b = b & 65535;
		return a | (b << 16);
600019d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  *(volatile uint32_t *)(&bc->checksum) = checksum(bc, 28);
600019d4:	4b0c      	ldr	r3, [pc, #48]	; (60001a08 <CrashReportClass::clear()+0xac>)
600019d6:	f8c3 1fdc 	str.w	r1, [r3, #4060]	; 0xfdc
	asm("dsb");
600019da:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
600019de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600019e2:	4a0a      	ldr	r2, [pc, #40]	; (60001a0c <CrashReportClass::clear()+0xb0>)
600019e4:	f8c3 2f68 	str.w	r2, [r3, #3944]	; 0xf68
	asm("dsb");
600019e8:	f3bf 8f4f 	dsb	sy
	asm("isb");
600019ec:	f3bf 8f6f 	isb	sy
}
600019f0:	f85d 4b04 	ldr.w	r4, [sp], #4
600019f4:	4770      	bx	lr
600019f6:	bf00      	nop
600019f8:	2027ff00 	.word	0x2027ff00
600019fc:	2027ff80 	.word	0x2027ff80
60001a00:	400f8000 	.word	0x400f8000
60001a04:	2027ffdc 	.word	0x2027ffdc
60001a08:	2027f000 	.word	0x2027f000
60001a0c:	2027ffc0 	.word	0x2027ffc0

60001a10 <CrashReportClass::printTo(Print&) const>:
{
60001a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
60001a14:	460c      	mov	r4, r1
  if (isvalid(info)) {
60001a16:	48ac      	ldr	r0, [pc, #688]	; (60001cc8 <CrashReportClass::printTo(Print&) const+0x2b8>)
60001a18:	f7ff ff7c 	bl	60001914 <isvalid(arm_fault_info_struct const*)>
60001a1c:	2800      	cmp	r0, #0
60001a1e:	f000 8289 	beq.w	60001f34 <CrashReportClass::printTo(Print&) const+0x524>
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
60001a22:	6823      	ldr	r3, [r4, #0]
60001a24:	685b      	ldr	r3, [r3, #4]
60001a26:	220c      	movs	r2, #12
60001a28:	49a8      	ldr	r1, [pc, #672]	; (60001ccc <CrashReportClass::printTo(Print&) const+0x2bc>)
60001a2a:	4620      	mov	r0, r4
60001a2c:	4798      	blx	r3
	// Print a string and newline
	size_t println(const String &s)			{ return print(s) + println(); }
	// Print a single character and newline
	size_t println(char c)				{ return print(c) + println(); }
	// Print a string and newline
	size_t println(const char s[])			{ return print(s) + println(); }
60001a2e:	4620      	mov	r0, r4
60001a30:	f000 ff82 	bl	60002938 <___ZN5Print7printlnEv_veneer>
    uint8_t ss = info->time % 60;
60001a34:	4fa6      	ldr	r7, [pc, #664]	; (60001cd0 <CrashReportClass::printTo(Print&) const+0x2c0>)
60001a36:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
    info->time /= 60;
60001a3a:	4ba6      	ldr	r3, [pc, #664]	; (60001cd4 <CrashReportClass::printTo(Print&) const+0x2c4>)
60001a3c:	fba3 2608 	umull	r2, r6, r3, r8
60001a40:	0976      	lsrs	r6, r6, #5
    info->time /= 60;
60001a42:	fba3 2306 	umull	r2, r3, r3, r6
60001a46:	095d      	lsrs	r5, r3, #5
60001a48:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
							  return write((const uint8_t *)str, strlen(str)); }
60001a4c:	6823      	ldr	r3, [r4, #0]
60001a4e:	685b      	ldr	r3, [r3, #4]
60001a50:	2226      	movs	r2, #38	; 0x26
60001a52:	49a1      	ldr	r1, [pc, #644]	; (60001cd8 <CrashReportClass::printTo(Print&) const+0x2c8>)
60001a54:	4620      	mov	r0, r4
60001a56:	4798      	blx	r3
    uint8_t hh = info->time % 24;
60001a58:	49a0      	ldr	r1, [pc, #640]	; (60001cdc <CrashReportClass::printTo(Print&) const+0x2cc>)
60001a5a:	fba1 3105 	umull	r3, r1, r1, r5
60001a5e:	0909      	lsrs	r1, r1, #4
60001a60:	eb01 0141 	add.w	r1, r1, r1, lsl #1
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a64:	2300      	movs	r3, #0
60001a66:	220a      	movs	r2, #10
60001a68:	eba5 01c1 	sub.w	r1, r5, r1, lsl #3
60001a6c:	4620      	mov	r0, r4
60001a6e:	f000 ff6f 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a72:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 60001d28 <CrashReportClass::printTo(Print&) const+0x318>
60001a76:	6823      	ldr	r3, [r4, #0]
60001a78:	685b      	ldr	r3, [r3, #4]
60001a7a:	2201      	movs	r2, #1
60001a7c:	4649      	mov	r1, r9
60001a7e:	4620      	mov	r0, r4
60001a80:	4798      	blx	r3
    uint8_t mm = info->time % 60;
60001a82:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001a86:	2300      	movs	r3, #0
60001a88:	220a      	movs	r2, #10
60001a8a:	eba6 0185 	sub.w	r1, r6, r5, lsl #2
60001a8e:	4620      	mov	r0, r4
60001a90:	f000 ff5e 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001a94:	6823      	ldr	r3, [r4, #0]
60001a96:	685b      	ldr	r3, [r3, #4]
60001a98:	2201      	movs	r2, #1
60001a9a:	4649      	mov	r1, r9
60001a9c:	4620      	mov	r0, r4
60001a9e:	4798      	blx	r3
    uint8_t ss = info->time % 60;
60001aa0:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
60001aa4:	2300      	movs	r3, #0
60001aa6:	220a      	movs	r2, #10
60001aa8:	eba8 0186 	sub.w	r1, r8, r6, lsl #2
60001aac:	4620      	mov	r0, r4
60001aae:	f000 ff4f 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
	// Print a string and newline
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
60001ab2:	4620      	mov	r0, r4
60001ab4:	f000 ff40 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001ab8:	6823      	ldr	r3, [r4, #0]
60001aba:	685b      	ldr	r3, [r3, #4]
60001abc:	2224      	movs	r2, #36	; 0x24
60001abe:	4988      	ldr	r1, [pc, #544]	; (60001ce0 <CrashReportClass::printTo(Print&) const+0x2d0>)
60001ac0:	4620      	mov	r0, r4
60001ac2:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ac4:	2300      	movs	r3, #0
60001ac6:	2210      	movs	r2, #16
60001ac8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
60001acc:	4620      	mov	r0, r4
60001ace:	f000 ff3f 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	// Print a number in any number base (eg, BIN, HEX, OCT) and a newline
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001ad2:	4620      	mov	r0, r4
60001ad4:	f000 ff30 	bl	60002938 <___ZN5Print7printlnEv_veneer>
    uint32_t _CFSR = info->cfsr;
60001ad8:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
    if (_CFSR > 0) {
60001adc:	2d00      	cmp	r5, #0
60001ade:	d17d      	bne.n	60001bdc <CrashReportClass::printTo(Print&) const+0x1cc>
    uint32_t _HFSR = info->hfsr;
60001ae0:	4b7b      	ldr	r3, [pc, #492]	; (60001cd0 <CrashReportClass::printTo(Print&) const+0x2c0>)
60001ae2:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
    if (_HFSR > 0) {
60001ae6:	2d00      	cmp	r5, #0
60001ae8:	f040 81f8 	bne.w	60001edc <CrashReportClass::printTo(Print&) const+0x4cc>
							  return write((const uint8_t *)str, strlen(str)); }
60001aec:	6823      	ldr	r3, [r4, #0]
60001aee:	685b      	ldr	r3, [r3, #4]
60001af0:	2222      	movs	r2, #34	; 0x22
60001af2:	497c      	ldr	r1, [pc, #496]	; (60001ce4 <CrashReportClass::printTo(Print&) const+0x2d4>)
60001af4:	4620      	mov	r0, r4
60001af6:	4798      	blx	r3
    p.print(info->temp);
60001af8:	4b75      	ldr	r3, [pc, #468]	; (60001cd0 <CrashReportClass::printTo(Print&) const+0x2c0>)
60001afa:	ed93 0a28 	vldr	s0, [r3, #160]	; 0xa0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
60001afe:	2102      	movs	r1, #2
60001b00:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
60001b04:	4620      	mov	r0, r4
60001b06:	f000 ff27 	bl	60002958 <___ZN5Print10printFloatEdh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b0a:	6823      	ldr	r3, [r4, #0]
60001b0c:	685b      	ldr	r3, [r3, #4]
60001b0e:	2205      	movs	r2, #5
60001b10:	4975      	ldr	r1, [pc, #468]	; (60001ce8 <CrashReportClass::printTo(Print&) const+0x2d8>)
60001b12:	4620      	mov	r0, r4
60001b14:	4798      	blx	r3
60001b16:	6823      	ldr	r3, [r4, #0]
60001b18:	685b      	ldr	r3, [r3, #4]
60001b1a:	221d      	movs	r2, #29
60001b1c:	4973      	ldr	r1, [pc, #460]	; (60001cec <CrashReportClass::printTo(Print&) const+0x2dc>)
60001b1e:	4620      	mov	r0, r4
60001b20:	4798      	blx	r3
    p.print( F_CPU_ACTUAL/1000000);
60001b22:	4b73      	ldr	r3, [pc, #460]	; (60001cf0 <CrashReportClass::printTo(Print&) const+0x2e0>)
60001b24:	6819      	ldr	r1, [r3, #0]
60001b26:	4b73      	ldr	r3, [pc, #460]	; (60001cf4 <CrashReportClass::printTo(Print&) const+0x2e4>)
60001b28:	fba3 3101 	umull	r3, r1, r3, r1
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60001b2c:	2300      	movs	r3, #0
60001b2e:	220a      	movs	r2, #10
60001b30:	0c89      	lsrs	r1, r1, #18
60001b32:	4620      	mov	r0, r4
60001b34:	f000 ff0c 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001b38:	6823      	ldr	r3, [r4, #0]
60001b3a:	685b      	ldr	r3, [r3, #4]
60001b3c:	2204      	movs	r2, #4
60001b3e:	496e      	ldr	r1, [pc, #440]	; (60001cf8 <CrashReportClass::printTo(Print&) const+0x2e8>)
60001b40:	4620      	mov	r0, r4
60001b42:	4798      	blx	r3
  uint32_t SRSR = SRC_SRSR;
60001b44:	4b6d      	ldr	r3, [pc, #436]	; (60001cfc <CrashReportClass::printTo(Print&) const+0x2ec>)
60001b46:	689d      	ldr	r5, [r3, #8]
  if (SRSR & SRC_SRSR_LOCKUP_SYSRESETREQ) {
60001b48:	f015 0f02 	tst.w	r5, #2
60001b4c:	d00d      	beq.n	60001b6a <CrashReportClass::printTo(Print&) const+0x15a>
    uint32_t gpr5 = SRC_GPR5;
60001b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    if (gpr5 == 0x0BAD00F1) {
60001b50:	4b6b      	ldr	r3, [pc, #428]	; (60001d00 <CrashReportClass::printTo(Print&) const+0x2f0>)
60001b52:	429a      	cmp	r2, r3
60001b54:	f000 8225 	beq.w	60001fa2 <CrashReportClass::printTo(Print&) const+0x592>
60001b58:	6823      	ldr	r3, [r4, #0]
60001b5a:	685b      	ldr	r3, [r3, #4]
60001b5c:	2240      	movs	r2, #64	; 0x40
60001b5e:	4969      	ldr	r1, [pc, #420]	; (60001d04 <CrashReportClass::printTo(Print&) const+0x2f4>)
60001b60:	4620      	mov	r0, r4
60001b62:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001b64:	4620      	mov	r0, r4
60001b66:	f000 fee7 	bl	60002938 <___ZN5Print7printlnEv_veneer>
  if (SRSR & SRC_SRSR_CSU_RESET_B) {
60001b6a:	f015 0f04 	tst.w	r5, #4
60001b6e:	f040 8222 	bne.w	60001fb6 <CrashReportClass::printTo(Print&) const+0x5a6>
  if (SRSR & SRC_SRSR_IPP_USER_RESET_B) {
60001b72:	f015 0f08 	tst.w	r5, #8
60001b76:	f040 8228 	bne.w	60001fca <CrashReportClass::printTo(Print&) const+0x5ba>
  if (SRSR & SRC_SRSR_WDOG_RST_B) {
60001b7a:	f015 0f10 	tst.w	r5, #16
60001b7e:	f040 826d 	bne.w	6000205c <CrashReportClass::printTo(Print&) const+0x64c>
  if (SRSR & SRC_SRSR_JTAG_RST_B) {
60001b82:	f015 0f20 	tst.w	r5, #32
60001b86:	f040 8273 	bne.w	60002070 <CrashReportClass::printTo(Print&) const+0x660>
  if (SRSR & SRC_SRSR_JTAG_SW_RST) {
60001b8a:	f015 0f40 	tst.w	r5, #64	; 0x40
60001b8e:	f040 8279 	bne.w	60002084 <CrashReportClass::printTo(Print&) const+0x674>
  if (SRSR & SRC_SRSR_WDOG3_RST_B) {
60001b92:	f015 0f80 	tst.w	r5, #128	; 0x80
60001b96:	f040 827f 	bne.w	60002098 <CrashReportClass::printTo(Print&) const+0x688>
  if (SRSR & SRC_SRSR_TEMPSENSE_RST_B) {
60001b9a:	f415 7580 	ands.w	r5, r5, #256	; 0x100
60001b9e:	f040 8285 	bne.w	600020ac <CrashReportClass::printTo(Print&) const+0x69c>
  if (bc->bitmask && bc->checksum == checksum(bc, 28)) {
60001ba2:	4b4b      	ldr	r3, [pc, #300]	; (60001cd0 <CrashReportClass::printTo(Print&) const+0x2c0>)
60001ba4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
60001ba8:	b19b      	cbz	r3, 60001bd2 <CrashReportClass::printTo(Print&) const+0x1c2>
60001baa:	4b49      	ldr	r3, [pc, #292]	; (60001cd0 <CrashReportClass::printTo(Print&) const+0x2c0>)
60001bac:	f8d3 60dc 	ldr.w	r6, [r3, #220]	; 0xdc
		uint32_t a=1, b=0; // Adler Fletcher kinda, len < 720 bytes
60001bb0:	2201      	movs	r2, #1
		volatile const uint16_t *p = (volatile const uint16_t *)data;
60001bb2:	33c0      	adds	r3, #192	; 0xc0
		while (len > 0) {
60001bb4:	4854      	ldr	r0, [pc, #336]	; (60001d08 <CrashReportClass::printTo(Print&) const+0x2f8>)
			a += *p++;
60001bb6:	4619      	mov	r1, r3
60001bb8:	3302      	adds	r3, #2
60001bba:	8809      	ldrh	r1, [r1, #0]
60001bbc:	fa12 f281 	uxtah	r2, r2, r1
			b += a;
60001bc0:	4415      	add	r5, r2
		while (len > 0) {
60001bc2:	4283      	cmp	r3, r0
60001bc4:	d1f7      	bne.n	60001bb6 <CrashReportClass::printTo(Print&) const+0x1a6>
		a = a & 65535;
60001bc6:	b293      	uxth	r3, r2
		return a | (b << 16);
60001bc8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
60001bcc:	429e      	cmp	r6, r3
60001bce:	f000 8299 	beq.w	60002104 <CrashReportClass::printTo(Print&) const+0x6f4>
  clear();
60001bd2:	f7ff fec3 	bl	6000195c <CrashReportClass::clear()>
}
60001bd6:	2001      	movs	r0, #1
60001bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
							  return write((const uint8_t *)str, strlen(str)); }
60001bdc:	6823      	ldr	r3, [r4, #0]
60001bde:	685b      	ldr	r3, [r3, #4]
60001be0:	2208      	movs	r2, #8
60001be2:	494a      	ldr	r1, [pc, #296]	; (60001d0c <CrashReportClass::printTo(Print&) const+0x2fc>)
60001be4:	4620      	mov	r0, r4
60001be6:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001be8:	2300      	movs	r3, #0
60001bea:	2210      	movs	r2, #16
60001bec:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
60001bf0:	4620      	mov	r0, r4
60001bf2:	f000 fead 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001bf6:	4620      	mov	r0, r4
60001bf8:	f000 fe9e 	bl	60002938 <___ZN5Print7printlnEv_veneer>
      if ((_CFSR & 1) == 1) {
60001bfc:	f015 0f01 	tst.w	r5, #1
60001c00:	d115      	bne.n	60001c2e <CrashReportClass::printTo(Print&) const+0x21e>
      } else  if (((_CFSR & (0x02)) >> 1) == 1) {
60001c02:	f015 0f02 	tst.w	r5, #2
60001c06:	d140      	bne.n	60001c8a <CrashReportClass::printTo(Print&) const+0x27a>
      } else if (((_CFSR & (0x08)) >> 3) == 1) {
60001c08:	f015 0f08 	tst.w	r5, #8
60001c0c:	d147      	bne.n	60001c9e <CrashReportClass::printTo(Print&) const+0x28e>
      } else if (((_CFSR & (0x10)) >> 4) == 1) {
60001c0e:	f015 0f10 	tst.w	r5, #16
60001c12:	d14e      	bne.n	60001cb2 <CrashReportClass::printTo(Print&) const+0x2a2>
      } else if (((_CFSR & (0x20)) >> 5) == 1) {
60001c14:	f015 0f20 	tst.w	r5, #32
60001c18:	d012      	beq.n	60001c40 <CrashReportClass::printTo(Print&) const+0x230>
							  return write((const uint8_t *)str, strlen(str)); }
60001c1a:	6823      	ldr	r3, [r4, #0]
60001c1c:	685b      	ldr	r3, [r3, #4]
60001c1e:	222a      	movs	r2, #42	; 0x2a
60001c20:	493b      	ldr	r1, [pc, #236]	; (60001d10 <CrashReportClass::printTo(Print&) const+0x300>)
60001c22:	4620      	mov	r0, r4
60001c24:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c26:	4620      	mov	r0, r4
60001c28:	f000 fe86 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001c2c:	e008      	b.n	60001c40 <CrashReportClass::printTo(Print&) const+0x230>
							  return write((const uint8_t *)str, strlen(str)); }
60001c2e:	6823      	ldr	r3, [r4, #0]
60001c30:	685b      	ldr	r3, [r3, #4]
60001c32:	2228      	movs	r2, #40	; 0x28
60001c34:	4937      	ldr	r1, [pc, #220]	; (60001d14 <CrashReportClass::printTo(Print&) const+0x304>)
60001c36:	4620      	mov	r0, r4
60001c38:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c3a:	4620      	mov	r0, r4
60001c3c:	f000 fe7c 	bl	60002938 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x80)) >> 7) == 1) {
60001c40:	f015 0f80 	tst.w	r5, #128	; 0x80
60001c44:	d172      	bne.n	60001d2c <CrashReportClass::printTo(Print&) const+0x31c>
      if (((_CFSR & 0x100) >> 8) == 1) {
60001c46:	f415 7f80 	tst.w	r5, #256	; 0x100
60001c4a:	f040 80b2 	bne.w	60001db2 <CrashReportClass::printTo(Print&) const+0x3a2>
      } else  if (((_CFSR & (0x200)) >> 9) == 1) {
60001c4e:	f415 7f00 	tst.w	r5, #512	; 0x200
60001c52:	f040 80d7 	bne.w	60001e04 <CrashReportClass::printTo(Print&) const+0x3f4>
      } else if (((_CFSR & (0x400)) >> 10) == 1) {
60001c56:	f415 6f80 	tst.w	r5, #1024	; 0x400
60001c5a:	f040 80dd 	bne.w	60001e18 <CrashReportClass::printTo(Print&) const+0x408>
      } else if (((_CFSR & (0x800)) >> 11) == 1) {
60001c5e:	f415 6f00 	tst.w	r5, #2048	; 0x800
60001c62:	f040 80e3 	bne.w	60001e2c <CrashReportClass::printTo(Print&) const+0x41c>
      } else if (((_CFSR & (0x1000)) >> 12) == 1) {
60001c66:	f415 5f80 	tst.w	r5, #4096	; 0x1000
60001c6a:	f040 80e9 	bne.w	60001e40 <CrashReportClass::printTo(Print&) const+0x430>
      } else if (((_CFSR & (0x2000)) >> 13) == 1) {
60001c6e:	f415 5f00 	tst.w	r5, #8192	; 0x2000
60001c72:	f000 80a7 	beq.w	60001dc4 <CrashReportClass::printTo(Print&) const+0x3b4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c76:	6823      	ldr	r3, [r4, #0]
60001c78:	685b      	ldr	r3, [r3, #4]
60001c7a:	2231      	movs	r2, #49	; 0x31
60001c7c:	4926      	ldr	r1, [pc, #152]	; (60001d18 <CrashReportClass::printTo(Print&) const+0x308>)
60001c7e:	4620      	mov	r0, r4
60001c80:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c82:	4620      	mov	r0, r4
60001c84:	f000 fe58 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001c88:	e09c      	b.n	60001dc4 <CrashReportClass::printTo(Print&) const+0x3b4>
							  return write((const uint8_t *)str, strlen(str)); }
60001c8a:	6823      	ldr	r3, [r4, #0]
60001c8c:	685b      	ldr	r3, [r3, #4]
60001c8e:	2221      	movs	r2, #33	; 0x21
60001c90:	4922      	ldr	r1, [pc, #136]	; (60001d1c <CrashReportClass::printTo(Print&) const+0x30c>)
60001c92:	4620      	mov	r0, r4
60001c94:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001c96:	4620      	mov	r0, r4
60001c98:	f000 fe4e 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001c9c:	e7d0      	b.n	60001c40 <CrashReportClass::printTo(Print&) const+0x230>
							  return write((const uint8_t *)str, strlen(str)); }
60001c9e:	6823      	ldr	r3, [r4, #0]
60001ca0:	685b      	ldr	r3, [r3, #4]
60001ca2:	2229      	movs	r2, #41	; 0x29
60001ca4:	491e      	ldr	r1, [pc, #120]	; (60001d20 <CrashReportClass::printTo(Print&) const+0x310>)
60001ca6:	4620      	mov	r0, r4
60001ca8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001caa:	4620      	mov	r0, r4
60001cac:	f000 fe44 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001cb0:	e7c6      	b.n	60001c40 <CrashReportClass::printTo(Print&) const+0x230>
							  return write((const uint8_t *)str, strlen(str)); }
60001cb2:	6823      	ldr	r3, [r4, #0]
60001cb4:	685b      	ldr	r3, [r3, #4]
60001cb6:	2225      	movs	r2, #37	; 0x25
60001cb8:	491a      	ldr	r1, [pc, #104]	; (60001d24 <CrashReportClass::printTo(Print&) const+0x314>)
60001cba:	4620      	mov	r0, r4
60001cbc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001cbe:	4620      	mov	r0, r4
60001cc0:	f000 fe3a 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001cc4:	e7bc      	b.n	60001c40 <CrashReportClass::printTo(Print&) const+0x230>
60001cc6:	bf00      	nop
60001cc8:	2027ff80 	.word	0x2027ff80
60001ccc:	20003e5c 	.word	0x20003e5c
60001cd0:	2027ff00 	.word	0x2027ff00
60001cd4:	88888889 	.word	0x88888889
60001cd8:	20003e6c 	.word	0x20003e6c
60001cdc:	aaaaaaab 	.word	0xaaaaaaab
60001ce0:	20003e94 	.word	0x20003e94
60001ce4:	2000431c 	.word	0x2000431c
60001ce8:	20004340 	.word	0x20004340
60001cec:	20004348 	.word	0x20004348
60001cf0:	20004e18 	.word	0x20004e18
60001cf4:	431bde83 	.word	0x431bde83
60001cf8:	20004368 	.word	0x20004368
60001cfc:	400f8000 	.word	0x400f8000
60001d00:	0bad00f1 	.word	0x0bad00f1
60001d04:	2000451c 	.word	0x2000451c
60001d08:	2027ffdc 	.word	0x2027ffdc
60001d0c:	20003ebc 	.word	0x20003ebc
60001d10:	20003f6c 	.word	0x20003f6c
60001d14:	20003ec8 	.word	0x20003ec8
60001d18:	20004190 	.word	0x20004190
60001d1c:	20003ef4 	.word	0x20003ef4
60001d20:	20003f18 	.word	0x20003f18
60001d24:	20003f44 	.word	0x20003f44
60001d28:	20003408 	.word	0x20003408
							  return write((const uint8_t *)str, strlen(str)); }
60001d2c:	6823      	ldr	r3, [r4, #0]
60001d2e:	685b      	ldr	r3, [r3, #4]
60001d30:	2221      	movs	r2, #33	; 0x21
60001d32:	49ab      	ldr	r1, [pc, #684]	; (60001fe0 <CrashReportClass::printTo(Print&) const+0x5d0>)
60001d34:	4620      	mov	r0, r4
60001d36:	4798      	blx	r3
        p.print(info->mmfar, HEX);
60001d38:	4eaa      	ldr	r6, [pc, #680]	; (60001fe4 <CrashReportClass::printTo(Print&) const+0x5d4>)
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d3a:	2300      	movs	r3, #0
60001d3c:	2210      	movs	r2, #16
60001d3e:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
60001d42:	4620      	mov	r0, r4
60001d44:	f000 fe04 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
        if (info->mmfar < 32) {
60001d48:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
60001d4c:	2a1f      	cmp	r2, #31
60001d4e:	d90c      	bls.n	60001d6a <CrashReportClass::printTo(Print&) const+0x35a>
        } else if ((info->mmfar >= (uint32_t)&_ebss) && (info->mmfar < (uint32_t)&_ebss + 32)) {
60001d50:	4ba5      	ldr	r3, [pc, #660]	; (60001fe8 <CrashReportClass::printTo(Print&) const+0x5d8>)
60001d52:	429a      	cmp	r2, r3
60001d54:	d329      	bcc.n	60001daa <CrashReportClass::printTo(Print&) const+0x39a>
60001d56:	3320      	adds	r3, #32
60001d58:	429a      	cmp	r2, r3
60001d5a:	d226      	bcs.n	60001daa <CrashReportClass::printTo(Print&) const+0x39a>
							  return write((const uint8_t *)str, strlen(str)); }
60001d5c:	6823      	ldr	r3, [r4, #0]
60001d5e:	685b      	ldr	r3, [r3, #4]
60001d60:	2241      	movs	r2, #65	; 0x41
60001d62:	49a2      	ldr	r1, [pc, #648]	; (60001fec <CrashReportClass::printTo(Print&) const+0x5dc>)
60001d64:	4620      	mov	r0, r4
60001d66:	4798      	blx	r3
60001d68:	e01f      	b.n	60001daa <CrashReportClass::printTo(Print&) const+0x39a>
60001d6a:	6823      	ldr	r3, [r4, #0]
60001d6c:	685b      	ldr	r3, [r3, #4]
60001d6e:	221e      	movs	r2, #30
60001d70:	499f      	ldr	r1, [pc, #636]	; (60001ff0 <CrashReportClass::printTo(Print&) const+0x5e0>)
60001d72:	4620      	mov	r0, r4
60001d74:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d76:	2300      	movs	r3, #0
60001d78:	2210      	movs	r2, #16
60001d7a:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
60001d7e:	4620      	mov	r0, r4
60001d80:	f000 fde6 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d84:	6823      	ldr	r3, [r4, #0]
60001d86:	685b      	ldr	r3, [r3, #4]
60001d88:	223e      	movs	r2, #62	; 0x3e
60001d8a:	499a      	ldr	r1, [pc, #616]	; (60001ff4 <CrashReportClass::printTo(Print&) const+0x5e4>)
60001d8c:	4620      	mov	r0, r4
60001d8e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001d90:	2300      	movs	r3, #0
60001d92:	2210      	movs	r2, #16
60001d94:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
60001d98:	4620      	mov	r0, r4
60001d9a:	f000 fdd9 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001d9e:	6823      	ldr	r3, [r4, #0]
60001da0:	685b      	ldr	r3, [r3, #4]
60001da2:	221d      	movs	r2, #29
60001da4:	4994      	ldr	r1, [pc, #592]	; (60001ff8 <CrashReportClass::printTo(Print&) const+0x5e8>)
60001da6:	4620      	mov	r0, r4
60001da8:	4798      	blx	r3
        p.println();
60001daa:	4620      	mov	r0, r4
60001dac:	f000 fdc4 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001db0:	e749      	b.n	60001c46 <CrashReportClass::printTo(Print&) const+0x236>
60001db2:	6823      	ldr	r3, [r4, #0]
60001db4:	685b      	ldr	r3, [r3, #4]
60001db6:	2220      	movs	r2, #32
60001db8:	4990      	ldr	r1, [pc, #576]	; (60001ffc <CrashReportClass::printTo(Print&) const+0x5ec>)
60001dba:	4620      	mov	r0, r4
60001dbc:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001dbe:	4620      	mov	r0, r4
60001dc0:	f000 fdba 	bl	60002938 <___ZN5Print7printlnEv_veneer>
      if (((_CFSR & (0x8000)) >> 15) == 1) {
60001dc4:	f415 4f00 	tst.w	r5, #32768	; 0x8000
60001dc8:	d144      	bne.n	60001e54 <CrashReportClass::printTo(Print&) const+0x444>
      if (((_CFSR & 0x10000) >> 16) == 1) {
60001dca:	f415 3f80 	tst.w	r5, #65536	; 0x10000
60001dce:	d153      	bne.n	60001e78 <CrashReportClass::printTo(Print&) const+0x468>
      } else  if (((_CFSR & (0x20000)) >> 17) == 1) {
60001dd0:	f415 3f00 	tst.w	r5, #131072	; 0x20000
60001dd4:	d15a      	bne.n	60001e8c <CrashReportClass::printTo(Print&) const+0x47c>
      } else if (((_CFSR & (0x40000)) >> 18) == 1) {
60001dd6:	f415 2f80 	tst.w	r5, #262144	; 0x40000
60001dda:	d161      	bne.n	60001ea0 <CrashReportClass::printTo(Print&) const+0x490>
      } else if (((_CFSR & (0x80000)) >> 19) == 1) {
60001ddc:	f415 2f00 	tst.w	r5, #524288	; 0x80000
60001de0:	d168      	bne.n	60001eb4 <CrashReportClass::printTo(Print&) const+0x4a4>
      } else if (((_CFSR & (0x1000000)) >> 24) == 1) {
60001de2:	f015 7f80 	tst.w	r5, #16777216	; 0x1000000
60001de6:	d16f      	bne.n	60001ec8 <CrashReportClass::printTo(Print&) const+0x4b8>
      } else if (((_CFSR & (0x2000000)) >> 25) == 1) {
60001de8:	f015 7f00 	tst.w	r5, #33554432	; 0x2000000
60001dec:	f43f ae78 	beq.w	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001df0:	6823      	ldr	r3, [r4, #0]
60001df2:	685b      	ldr	r3, [r3, #4]
60001df4:	221b      	movs	r2, #27
60001df6:	4982      	ldr	r1, [pc, #520]	; (60002000 <CrashReportClass::printTo(Print&) const+0x5f0>)
60001df8:	4620      	mov	r0, r4
60001dfa:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001dfc:	4620      	mov	r0, r4
60001dfe:	f000 fd9b 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e02:	e66d      	b.n	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001e04:	6823      	ldr	r3, [r4, #0]
60001e06:	685b      	ldr	r3, [r3, #4]
60001e08:	222c      	movs	r2, #44	; 0x2c
60001e0a:	497e      	ldr	r1, [pc, #504]	; (60002004 <CrashReportClass::printTo(Print&) const+0x5f4>)
60001e0c:	4620      	mov	r0, r4
60001e0e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e10:	4620      	mov	r0, r4
60001e12:	f000 fd91 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e16:	e7d5      	b.n	60001dc4 <CrashReportClass::printTo(Print&) const+0x3b4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e18:	6823      	ldr	r3, [r4, #0]
60001e1a:	685b      	ldr	r3, [r3, #4]
60001e1c:	2244      	movs	r2, #68	; 0x44
60001e1e:	497a      	ldr	r1, [pc, #488]	; (60002008 <CrashReportClass::printTo(Print&) const+0x5f8>)
60001e20:	4620      	mov	r0, r4
60001e22:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e24:	4620      	mov	r0, r4
60001e26:	f000 fd87 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e2a:	e7cb      	b.n	60001dc4 <CrashReportClass::printTo(Print&) const+0x3b4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e2c:	6823      	ldr	r3, [r4, #0]
60001e2e:	685b      	ldr	r3, [r3, #4]
60001e30:	223f      	movs	r2, #63	; 0x3f
60001e32:	4976      	ldr	r1, [pc, #472]	; (6000200c <CrashReportClass::printTo(Print&) const+0x5fc>)
60001e34:	4620      	mov	r0, r4
60001e36:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e38:	4620      	mov	r0, r4
60001e3a:	f000 fd7d 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e3e:	e7c1      	b.n	60001dc4 <CrashReportClass::printTo(Print&) const+0x3b4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e40:	6823      	ldr	r3, [r4, #0]
60001e42:	685b      	ldr	r3, [r3, #4]
60001e44:	2233      	movs	r2, #51	; 0x33
60001e46:	4972      	ldr	r1, [pc, #456]	; (60002010 <CrashReportClass::printTo(Print&) const+0x600>)
60001e48:	4620      	mov	r0, r4
60001e4a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e4c:	4620      	mov	r0, r4
60001e4e:	f000 fd73 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e52:	e7b7      	b.n	60001dc4 <CrashReportClass::printTo(Print&) const+0x3b4>
							  return write((const uint8_t *)str, strlen(str)); }
60001e54:	6823      	ldr	r3, [r4, #0]
60001e56:	685b      	ldr	r3, [r3, #4]
60001e58:	2221      	movs	r2, #33	; 0x21
60001e5a:	496e      	ldr	r1, [pc, #440]	; (60002014 <CrashReportClass::printTo(Print&) const+0x604>)
60001e5c:	4620      	mov	r0, r4
60001e5e:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001e60:	2300      	movs	r3, #0
60001e62:	2210      	movs	r2, #16
60001e64:	495f      	ldr	r1, [pc, #380]	; (60001fe4 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001e66:	f8d1 1094 	ldr.w	r1, [r1, #148]	; 0x94
60001e6a:	4620      	mov	r0, r4
60001e6c:	f000 fd70 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001e70:	4620      	mov	r0, r4
60001e72:	f000 fd61 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e76:	e7a8      	b.n	60001dca <CrashReportClass::printTo(Print&) const+0x3ba>
							  return write((const uint8_t *)str, strlen(str)); }
60001e78:	6823      	ldr	r3, [r4, #0]
60001e7a:	685b      	ldr	r3, [r3, #4]
60001e7c:	2223      	movs	r2, #35	; 0x23
60001e7e:	4966      	ldr	r1, [pc, #408]	; (60002018 <CrashReportClass::printTo(Print&) const+0x608>)
60001e80:	4620      	mov	r0, r4
60001e82:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e84:	4620      	mov	r0, r4
60001e86:	f000 fd57 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e8a:	e629      	b.n	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001e8c:	6823      	ldr	r3, [r4, #0]
60001e8e:	685b      	ldr	r3, [r3, #4]
60001e90:	2232      	movs	r2, #50	; 0x32
60001e92:	4962      	ldr	r1, [pc, #392]	; (6000201c <CrashReportClass::printTo(Print&) const+0x60c>)
60001e94:	4620      	mov	r0, r4
60001e96:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001e98:	4620      	mov	r0, r4
60001e9a:	f000 fd4d 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001e9e:	e61f      	b.n	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001ea0:	6823      	ldr	r3, [r4, #0]
60001ea2:	685b      	ldr	r3, [r3, #4]
60001ea4:	2228      	movs	r2, #40	; 0x28
60001ea6:	495e      	ldr	r1, [pc, #376]	; (60002020 <CrashReportClass::printTo(Print&) const+0x610>)
60001ea8:	4620      	mov	r0, r4
60001eaa:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001eac:	4620      	mov	r0, r4
60001eae:	f000 fd43 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001eb2:	e615      	b.n	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001eb4:	6823      	ldr	r3, [r4, #0]
60001eb6:	685b      	ldr	r3, [r3, #4]
60001eb8:	2216      	movs	r2, #22
60001eba:	495a      	ldr	r1, [pc, #360]	; (60002024 <CrashReportClass::printTo(Print&) const+0x614>)
60001ebc:	4620      	mov	r0, r4
60001ebe:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ec0:	4620      	mov	r0, r4
60001ec2:	f000 fd39 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001ec6:	e60b      	b.n	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001ec8:	6823      	ldr	r3, [r4, #0]
60001eca:	685b      	ldr	r3, [r3, #4]
60001ecc:	2228      	movs	r2, #40	; 0x28
60001ece:	4956      	ldr	r1, [pc, #344]	; (60002028 <CrashReportClass::printTo(Print&) const+0x618>)
60001ed0:	4620      	mov	r0, r4
60001ed2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001ed4:	4620      	mov	r0, r4
60001ed6:	f000 fd2f 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001eda:	e601      	b.n	60001ae0 <CrashReportClass::printTo(Print&) const+0xd0>
							  return write((const uint8_t *)str, strlen(str)); }
60001edc:	6823      	ldr	r3, [r4, #0]
60001ede:	685b      	ldr	r3, [r3, #4]
60001ee0:	2208      	movs	r2, #8
60001ee2:	4952      	ldr	r1, [pc, #328]	; (6000202c <CrashReportClass::printTo(Print&) const+0x61c>)
60001ee4:	4620      	mov	r0, r4
60001ee6:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60001ee8:	2300      	movs	r3, #0
60001eea:	2210      	movs	r2, #16
60001eec:	493d      	ldr	r1, [pc, #244]	; (60001fe4 <CrashReportClass::printTo(Print&) const+0x5d4>)
60001eee:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
60001ef2:	4620      	mov	r0, r4
60001ef4:	f000 fd2c 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
60001ef8:	4620      	mov	r0, r4
60001efa:	f000 fd1d 	bl	60002938 <___ZN5Print7printlnEv_veneer>
      if (((_HFSR & (0x02)) >> 1) == 1) {
60001efe:	f015 0f02 	tst.w	r5, #2
60001f02:	d10d      	bne.n	60001f20 <CrashReportClass::printTo(Print&) const+0x510>
      } else if (((_HFSR & (0x40000000)) >> 30) == 1) {
60001f04:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
60001f08:	f43f adf0 	beq.w	60001aec <CrashReportClass::printTo(Print&) const+0xdc>
							  return write((const uint8_t *)str, strlen(str)); }
60001f0c:	6823      	ldr	r3, [r4, #0]
60001f0e:	685b      	ldr	r3, [r3, #4]
60001f10:	221b      	movs	r2, #27
60001f12:	4947      	ldr	r1, [pc, #284]	; (60002030 <CrashReportClass::printTo(Print&) const+0x620>)
60001f14:	4620      	mov	r0, r4
60001f16:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f18:	4620      	mov	r0, r4
60001f1a:	f000 fd0d 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001f1e:	e5e5      	b.n	60001aec <CrashReportClass::printTo(Print&) const+0xdc>
							  return write((const uint8_t *)str, strlen(str)); }
60001f20:	6823      	ldr	r3, [r4, #0]
60001f22:	685b      	ldr	r3, [r3, #4]
60001f24:	2226      	movs	r2, #38	; 0x26
60001f26:	4943      	ldr	r1, [pc, #268]	; (60002034 <CrashReportClass::printTo(Print&) const+0x624>)
60001f28:	4620      	mov	r0, r4
60001f2a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f2c:	4620      	mov	r0, r4
60001f2e:	f000 fd03 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001f32:	e5db      	b.n	60001aec <CrashReportClass::printTo(Print&) const+0xdc>
							  return write((const uint8_t *)str, strlen(str)); }
60001f34:	6823      	ldr	r3, [r4, #0]
60001f36:	685b      	ldr	r3, [r3, #4]
60001f38:	2217      	movs	r2, #23
60001f3a:	493f      	ldr	r1, [pc, #252]	; (60002038 <CrashReportClass::printTo(Print&) const+0x628>)
60001f3c:	4620      	mov	r0, r4
60001f3e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f40:	4620      	mov	r0, r4
60001f42:	f000 fcf9 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f46:	6823      	ldr	r3, [r4, #0]
60001f48:	685b      	ldr	r3, [r3, #4]
60001f4a:	2248      	movs	r2, #72	; 0x48
60001f4c:	493b      	ldr	r1, [pc, #236]	; (6000203c <CrashReportClass::printTo(Print&) const+0x62c>)
60001f4e:	4620      	mov	r0, r4
60001f50:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f52:	4620      	mov	r0, r4
60001f54:	f000 fcf0 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f58:	6823      	ldr	r3, [r4, #0]
60001f5a:	685b      	ldr	r3, [r3, #4]
60001f5c:	2249      	movs	r2, #73	; 0x49
60001f5e:	4938      	ldr	r1, [pc, #224]	; (60002040 <CrashReportClass::printTo(Print&) const+0x630>)
60001f60:	4620      	mov	r0, r4
60001f62:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f64:	4620      	mov	r0, r4
60001f66:	f000 fce7 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f6a:	6823      	ldr	r3, [r4, #0]
60001f6c:	685b      	ldr	r3, [r3, #4]
60001f6e:	2224      	movs	r2, #36	; 0x24
60001f70:	4934      	ldr	r1, [pc, #208]	; (60002044 <CrashReportClass::printTo(Print&) const+0x634>)
60001f72:	4620      	mov	r0, r4
60001f74:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f76:	4620      	mov	r0, r4
60001f78:	f000 fcde 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f7c:	6823      	ldr	r3, [r4, #0]
60001f7e:	685b      	ldr	r3, [r3, #4]
60001f80:	2247      	movs	r2, #71	; 0x47
60001f82:	4931      	ldr	r1, [pc, #196]	; (60002048 <CrashReportClass::printTo(Print&) const+0x638>)
60001f84:	4620      	mov	r0, r4
60001f86:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f88:	4620      	mov	r0, r4
60001f8a:	f000 fcd5 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60001f8e:	6823      	ldr	r3, [r4, #0]
60001f90:	685b      	ldr	r3, [r3, #4]
60001f92:	223f      	movs	r2, #63	; 0x3f
60001f94:	492d      	ldr	r1, [pc, #180]	; (6000204c <CrashReportClass::printTo(Print&) const+0x63c>)
60001f96:	4620      	mov	r0, r4
60001f98:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001f9a:	4620      	mov	r0, r4
60001f9c:	f000 fccc 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001fa0:	e5d0      	b.n	60001b44 <CrashReportClass::printTo(Print&) const+0x134>
							  return write((const uint8_t *)str, strlen(str)); }
60001fa2:	6823      	ldr	r3, [r4, #0]
60001fa4:	685b      	ldr	r3, [r3, #4]
60001fa6:	2248      	movs	r2, #72	; 0x48
60001fa8:	4929      	ldr	r1, [pc, #164]	; (60002050 <CrashReportClass::printTo(Print&) const+0x640>)
60001faa:	4620      	mov	r0, r4
60001fac:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001fae:	4620      	mov	r0, r4
60001fb0:	f000 fcc2 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001fb4:	e5d9      	b.n	60001b6a <CrashReportClass::printTo(Print&) const+0x15a>
							  return write((const uint8_t *)str, strlen(str)); }
60001fb6:	6823      	ldr	r3, [r4, #0]
60001fb8:	685b      	ldr	r3, [r3, #4]
60001fba:	2227      	movs	r2, #39	; 0x27
60001fbc:	4925      	ldr	r1, [pc, #148]	; (60002054 <CrashReportClass::printTo(Print&) const+0x644>)
60001fbe:	4620      	mov	r0, r4
60001fc0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001fc2:	4620      	mov	r0, r4
60001fc4:	f000 fcb8 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001fc8:	e5d3      	b.n	60001b72 <CrashReportClass::printTo(Print&) const+0x162>
							  return write((const uint8_t *)str, strlen(str)); }
60001fca:	6823      	ldr	r3, [r4, #0]
60001fcc:	685b      	ldr	r3, [r3, #4]
60001fce:	222a      	movs	r2, #42	; 0x2a
60001fd0:	4921      	ldr	r1, [pc, #132]	; (60002058 <CrashReportClass::printTo(Print&) const+0x648>)
60001fd2:	4620      	mov	r0, r4
60001fd4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60001fd6:	4620      	mov	r0, r4
60001fd8:	f000 fcae 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60001fdc:	e5cd      	b.n	60001b7a <CrashReportClass::printTo(Print&) const+0x16a>
60001fde:	bf00      	nop
60001fe0:	20003f98 	.word	0x20003f98
60001fe4:	2027ff00 	.word	0x2027ff00
60001fe8:	20008c80 	.word	0x20008c80
60001fec:	2000403c 	.word	0x2000403c
60001ff0:	20003fbc 	.word	0x20003fbc
60001ff4:	20003fdc 	.word	0x20003fdc
60001ff8:	2000401c 	.word	0x2000401c
60001ffc:	20004080 	.word	0x20004080
60002000:	200042b0 	.word	0x200042b0
60002004:	200040a4 	.word	0x200040a4
60002008:	200040d4 	.word	0x200040d4
6000200c:	2000411c 	.word	0x2000411c
60002010:	2000415c 	.word	0x2000415c
60002014:	200041c4 	.word	0x200041c4
60002018:	200041e8 	.word	0x200041e8
6000201c:	2000420c 	.word	0x2000420c
60002020:	20004240 	.word	0x20004240
60002024:	2000426c 	.word	0x2000426c
60002028:	20004284 	.word	0x20004284
6000202c:	200042cc 	.word	0x200042cc
60002030:	20004300 	.word	0x20004300
60002034:	200042d8 	.word	0x200042d8
60002038:	20004370 	.word	0x20004370
6000203c:	20004388 	.word	0x20004388
60002040:	200043d4 	.word	0x200043d4
60002044:	20004420 	.word	0x20004420
60002048:	20004448 	.word	0x20004448
6000204c:	20004490 	.word	0x20004490
60002050:	200044d0 	.word	0x200044d0
60002054:	20004560 	.word	0x20004560
60002058:	20004588 	.word	0x20004588
							  return write((const uint8_t *)str, strlen(str)); }
6000205c:	6823      	ldr	r3, [r4, #0]
6000205e:	685b      	ldr	r3, [r3, #4]
60002060:	2226      	movs	r2, #38	; 0x26
60002062:	4948      	ldr	r1, [pc, #288]	; (60002184 <CrashReportClass::printTo(Print&) const+0x774>)
60002064:	4620      	mov	r0, r4
60002066:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60002068:	4620      	mov	r0, r4
6000206a:	f000 fc65 	bl	60002938 <___ZN5Print7printlnEv_veneer>
6000206e:	e588      	b.n	60001b82 <CrashReportClass::printTo(Print&) const+0x172>
							  return write((const uint8_t *)str, strlen(str)); }
60002070:	6823      	ldr	r3, [r4, #0]
60002072:	685b      	ldr	r3, [r3, #4]
60002074:	2229      	movs	r2, #41	; 0x29
60002076:	4944      	ldr	r1, [pc, #272]	; (60002188 <CrashReportClass::printTo(Print&) const+0x778>)
60002078:	4620      	mov	r0, r4
6000207a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000207c:	4620      	mov	r0, r4
6000207e:	f000 fc5b 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60002082:	e582      	b.n	60001b8a <CrashReportClass::printTo(Print&) const+0x17a>
							  return write((const uint8_t *)str, strlen(str)); }
60002084:	6823      	ldr	r3, [r4, #0]
60002086:	685b      	ldr	r3, [r3, #4]
60002088:	2221      	movs	r2, #33	; 0x21
6000208a:	4940      	ldr	r1, [pc, #256]	; (6000218c <CrashReportClass::printTo(Print&) const+0x77c>)
6000208c:	4620      	mov	r0, r4
6000208e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
60002090:	4620      	mov	r0, r4
60002092:	f000 fc51 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60002096:	e57c      	b.n	60001b92 <CrashReportClass::printTo(Print&) const+0x182>
							  return write((const uint8_t *)str, strlen(str)); }
60002098:	6823      	ldr	r3, [r4, #0]
6000209a:	685b      	ldr	r3, [r3, #4]
6000209c:	2221      	movs	r2, #33	; 0x21
6000209e:	493c      	ldr	r1, [pc, #240]	; (60002190 <CrashReportClass::printTo(Print&) const+0x780>)
600020a0:	4620      	mov	r0, r4
600020a2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600020a4:	4620      	mov	r0, r4
600020a6:	f000 fc47 	bl	60002938 <___ZN5Print7printlnEv_veneer>
600020aa:	e576      	b.n	60001b9a <CrashReportClass::printTo(Print&) const+0x18a>
							  return write((const uint8_t *)str, strlen(str)); }
600020ac:	6823      	ldr	r3, [r4, #0]
600020ae:	685b      	ldr	r3, [r3, #4]
600020b0:	2229      	movs	r2, #41	; 0x29
600020b2:	4938      	ldr	r1, [pc, #224]	; (60002194 <CrashReportClass::printTo(Print&) const+0x784>)
600020b4:	4620      	mov	r0, r4
600020b6:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600020b8:	4620      	mov	r0, r4
600020ba:	f000 fc3d 	bl	60002938 <___ZN5Print7printlnEv_veneer>
	  SRC_SRSR &= ~0x100u; /* Write 0 to clear. */
600020be:	4a36      	ldr	r2, [pc, #216]	; (60002198 <CrashReportClass::printTo(Print&) const+0x788>)
600020c0:	6893      	ldr	r3, [r2, #8]
600020c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
600020c6:	6093      	str	r3, [r2, #8]
							  return write((const uint8_t *)str, strlen(str)); }
600020c8:	6823      	ldr	r3, [r4, #0]
600020ca:	685b      	ldr	r3, [r3, #4]
600020cc:	2221      	movs	r2, #33	; 0x21
600020ce:	4933      	ldr	r1, [pc, #204]	; (6000219c <CrashReportClass::printTo(Print&) const+0x78c>)
600020d0:	4620      	mov	r0, r4
600020d2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600020d4:	4620      	mov	r0, r4
600020d6:	f000 fc2f 	bl	60002938 <___ZN5Print7printlnEv_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
600020da:	6823      	ldr	r3, [r4, #0]
600020dc:	685b      	ldr	r3, [r3, #4]
600020de:	2242      	movs	r2, #66	; 0x42
600020e0:	492f      	ldr	r1, [pc, #188]	; (600021a0 <CrashReportClass::printTo(Print&) const+0x790>)
600020e2:	4620      	mov	r0, r4
600020e4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
600020e6:	4620      	mov	r0, r4
600020e8:	f000 fc26 	bl	60002938 <___ZN5Print7printlnEv_veneer>
	  IOMUXC_GPR_GPR16 = 0x00000007;
600020ec:	4b2d      	ldr	r3, [pc, #180]	; (600021a4 <CrashReportClass::printTo(Print&) const+0x794>)
600020ee:	2207      	movs	r2, #7
600020f0:	641a      	str	r2, [r3, #64]	; 0x40
	  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
600020f2:	4a2d      	ldr	r2, [pc, #180]	; (600021a8 <CrashReportClass::printTo(Print&) const+0x798>)
600020f4:	6b93      	ldr	r3, [r2, #56]	; 0x38
600020f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600020fa:	6393      	str	r3, [r2, #56]	; 0x38
	  asm volatile ("dsb":::"memory");
600020fc:	f3bf 8f4f 	dsb	sy
	  while (1) asm ("wfi");
60002100:	bf30      	wfi
60002102:	e7fd      	b.n	60002100 <CrashReportClass::printTo(Print&) const+0x6f0>
60002104:	2500      	movs	r5, #0
      if (bc->bitmask & (1 << i)) {
60002106:	4e29      	ldr	r6, [pc, #164]	; (600021ac <CrashReportClass::printTo(Print&) const+0x79c>)
							  return write((const uint8_t *)str, strlen(str)); }
60002108:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 600021c0 <CrashReportClass::printTo(Print&) const+0x7b0>
6000210c:	4f28      	ldr	r7, [pc, #160]	; (600021b0 <CrashReportClass::printTo(Print&) const+0x7a0>)
6000210e:	e003      	b.n	60002118 <CrashReportClass::printTo(Print&) const+0x708>
    for (int i=0; i < 6; i++) {
60002110:	3501      	adds	r5, #1
60002112:	2d06      	cmp	r5, #6
60002114:	f43f ad5d 	beq.w	60001bd2 <CrashReportClass::printTo(Print&) const+0x1c2>
      if (bc->bitmask & (1 << i)) {
60002118:	2301      	movs	r3, #1
6000211a:	40ab      	lsls	r3, r5
6000211c:	f8d6 20c0 	ldr.w	r2, [r6, #192]	; 0xc0
60002120:	4213      	tst	r3, r2
60002122:	d0f5      	beq.n	60002110 <CrashReportClass::printTo(Print&) const+0x700>
60002124:	6823      	ldr	r3, [r4, #0]
60002126:	685b      	ldr	r3, [r3, #4]
60002128:	220e      	movs	r2, #14
6000212a:	4641      	mov	r1, r8
6000212c:	4620      	mov	r0, r4
6000212e:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
60002130:	1c69      	adds	r1, r5, #1
60002132:	4620      	mov	r0, r4
60002134:	f000 fc18 	bl	60002968 <___ZN5Print5printEl_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60002138:	6823      	ldr	r3, [r4, #0]
6000213a:	685b      	ldr	r3, [r3, #4]
6000213c:	2205      	movs	r2, #5
6000213e:	491d      	ldr	r1, [pc, #116]	; (600021b4 <CrashReportClass::printTo(Print&) const+0x7a4>)
60002140:	4620      	mov	r0, r4
60002142:	4798      	blx	r3
        p.print(bc->value[i]);
60002144:	eb07 0985 	add.w	r9, r7, r5, lsl #2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
60002148:	2300      	movs	r3, #0
6000214a:	220a      	movs	r2, #10
6000214c:	f8d9 1004 	ldr.w	r1, [r9, #4]
60002150:	4620      	mov	r0, r4
60002152:	f000 fbfd 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60002156:	6823      	ldr	r3, [r4, #0]
60002158:	685b      	ldr	r3, [r3, #4]
6000215a:	2204      	movs	r2, #4
6000215c:	4916      	ldr	r1, [pc, #88]	; (600021b8 <CrashReportClass::printTo(Print&) const+0x7a8>)
6000215e:	4620      	mov	r0, r4
60002160:	4798      	blx	r3
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
60002162:	2300      	movs	r3, #0
60002164:	2210      	movs	r2, #16
60002166:	f8d9 1004 	ldr.w	r1, [r9, #4]
6000216a:	4620      	mov	r0, r4
6000216c:	f000 fbf0 	bl	60002950 <___ZN5Print11printNumberEmhh_veneer>
							  return write((const uint8_t *)str, strlen(str)); }
60002170:	6823      	ldr	r3, [r4, #0]
60002172:	685b      	ldr	r3, [r3, #4]
60002174:	2201      	movs	r2, #1
60002176:	4911      	ldr	r1, [pc, #68]	; (600021bc <CrashReportClass::printTo(Print&) const+0x7ac>)
60002178:	4620      	mov	r0, r4
6000217a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
6000217c:	4620      	mov	r0, r4
6000217e:	f000 fbdb 	bl	60002938 <___ZN5Print7printlnEv_veneer>
60002182:	e7c5      	b.n	60002110 <CrashReportClass::printTo(Print&) const+0x700>
60002184:	200045b4 	.word	0x200045b4
60002188:	200045dc 	.word	0x200045dc
6000218c:	20004608 	.word	0x20004608
60002190:	2000462c 	.word	0x2000462c
60002194:	20004650 	.word	0x20004650
60002198:	400f8000 	.word	0x400f8000
6000219c:	2000467c 	.word	0x2000467c
600021a0:	200046a0 	.word	0x200046a0
600021a4:	400ac000 	.word	0x400ac000
600021a8:	400d4000 	.word	0x400d4000
600021ac:	2027ff00 	.word	0x2027ff00
600021b0:	2027ffc0 	.word	0x2027ffc0
600021b4:	200046f4 	.word	0x200046f4
600021b8:	200046fc 	.word	0x200046fc
600021bc:	20003720 	.word	0x20003720
600021c0:	200046e4 	.word	0x200046e4

600021c4 <CrashReportClass::operator bool()>:
{
600021c4:	b508      	push	{r3, lr}
	if (isvalid(info)) return true;
600021c6:	4803      	ldr	r0, [pc, #12]	; (600021d4 <CrashReportClass::operator bool()+0x10>)
600021c8:	f7ff fba4 	bl	60001914 <isvalid(arm_fault_info_struct const*)>
}
600021cc:	3800      	subs	r0, #0
600021ce:	bf18      	it	ne
600021d0:	2001      	movne	r0, #1
600021d2:	bd08      	pop	{r3, pc}
600021d4:	2027ff80 	.word	0x2027ff80

600021d8 <flexspi2_command>:
	FLEXSPI2_IPCR0 = addr;
600021d8:	4b09      	ldr	r3, [pc, #36]	; (60002200 <flexspi2_command+0x28>)
600021da:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
600021de:	0400      	lsls	r0, r0, #16
600021e0:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
600021e4:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
600021e8:	2201      	movs	r2, #1
600021ea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
600021ee:	461a      	mov	r2, r3
600021f0:	6953      	ldr	r3, [r2, #20]
600021f2:	f013 0f01 	tst.w	r3, #1
600021f6:	d0fb      	beq.n	600021f0 <flexspi2_command+0x18>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
600021f8:	4b01      	ldr	r3, [pc, #4]	; (60002200 <flexspi2_command+0x28>)
600021fa:	2201      	movs	r2, #1
600021fc:	615a      	str	r2, [r3, #20]
}
600021fe:	4770      	bx	lr
60002200:	402a4000 	.word	0x402a4000

60002204 <flexspi2_psram_id>:
	FLEXSPI2_IPCR0 = addr;
60002204:	4b0a      	ldr	r3, [pc, #40]	; (60002230 <flexspi2_psram_id+0x2c>)
60002206:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
6000220a:	4a0a      	ldr	r2, [pc, #40]	; (60002234 <flexspi2_psram_id+0x30>)
6000220c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60002210:	2201      	movs	r2, #1
60002212:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60002216:	461a      	mov	r2, r3
60002218:	6953      	ldr	r3, [r2, #20]
6000221a:	f013 0f01 	tst.w	r3, #1
6000221e:	d0fb      	beq.n	60002218 <flexspi2_psram_id+0x14>
	uint32_t id = FLEXSPI2_RFDR0;
60002220:	4b03      	ldr	r3, [pc, #12]	; (60002230 <flexspi2_psram_id+0x2c>)
60002222:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60002226:	2221      	movs	r2, #33	; 0x21
60002228:	615a      	str	r2, [r3, #20]
}
6000222a:	b280      	uxth	r0, r0
6000222c:	4770      	bx	lr
6000222e:	bf00      	nop
60002230:	402a4000 	.word	0x402a4000
60002234:	00030004 	.word	0x00030004

60002238 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60002238:	4770      	bx	lr

6000223a <startup_default_middle_hook>:
FLASHMEM void startup_default_middle_hook(void) {}
6000223a:	4770      	bx	lr

6000223c <startup_default_late_hook>:
FLASHMEM void startup_default_late_hook(void) {}
6000223c:	4770      	bx	lr

6000223e <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000223e:	bf00      	nop
60002240:	4770      	bx	lr

60002242 <configure_cache>:
	SCB_MPU_CTRL = 0; // turn off MPU
60002242:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002246:	2100      	movs	r1, #0
60002248:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000224c:	2210      	movs	r2, #16
6000224e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60002252:	4a2e      	ldr	r2, [pc, #184]	; (6000230c <configure_cache+0xca>)
60002254:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60002258:	2211      	movs	r2, #17
6000225a:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000225e:	4a2c      	ldr	r2, [pc, #176]	; (60002310 <configure_cache+0xce>)
60002260:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60002264:	2212      	movs	r2, #18
60002266:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000226a:	4a2a      	ldr	r2, [pc, #168]	; (60002314 <configure_cache+0xd2>)
6000226c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60002270:	4a29      	ldr	r2, [pc, #164]	; (60002318 <configure_cache+0xd6>)
60002272:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60002276:	4a29      	ldr	r2, [pc, #164]	; (6000231c <configure_cache+0xda>)
60002278:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000227c:	4a28      	ldr	r2, [pc, #160]	; (60002320 <configure_cache+0xde>)
6000227e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60002282:	4a28      	ldr	r2, [pc, #160]	; (60002324 <configure_cache+0xe2>)
60002284:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60002288:	4a27      	ldr	r2, [pc, #156]	; (60002328 <configure_cache+0xe6>)
6000228a:	f042 0215 	orr.w	r2, r2, #21
6000228e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60002292:	4a26      	ldr	r2, [pc, #152]	; (6000232c <configure_cache+0xea>)
60002294:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60002298:	f102 5281 	add.w	r2, r2, #270532608	; 0x10200000
6000229c:	320d      	adds	r2, #13
6000229e:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600022a2:	4a23      	ldr	r2, [pc, #140]	; (60002330 <configure_cache+0xee>)
600022a4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600022a8:	4a22      	ldr	r2, [pc, #136]	; (60002334 <configure_cache+0xf2>)
600022aa:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600022ae:	4a22      	ldr	r2, [pc, #136]	; (60002338 <configure_cache+0xf6>)
600022b0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600022b4:	4a21      	ldr	r2, [pc, #132]	; (6000233c <configure_cache+0xfa>)
600022b6:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600022ba:	4a21      	ldr	r2, [pc, #132]	; (60002340 <configure_cache+0xfe>)
600022bc:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600022c0:	4a20      	ldr	r2, [pc, #128]	; (60002344 <configure_cache+0x102>)
600022c2:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
600022c6:	4a20      	ldr	r2, [pc, #128]	; (60002348 <configure_cache+0x106>)
600022c8:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
600022cc:	4a1f      	ldr	r2, [pc, #124]	; (6000234c <configure_cache+0x10a>)
600022ce:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
600022d2:	4a1f      	ldr	r2, [pc, #124]	; (60002350 <configure_cache+0x10e>)
600022d4:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
600022d8:	bf00      	nop
	asm("nop");
600022da:	bf00      	nop
	asm("nop");
600022dc:	bf00      	nop
	asm("nop");
600022de:	bf00      	nop
	asm("nop");
600022e0:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600022e2:	2201      	movs	r2, #1
600022e4:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
600022e8:	f3bf 8f4f 	dsb	sy
	asm("isb");
600022ec:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
600022f0:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
600022f4:	f3bf 8f4f 	dsb	sy
	asm("isb");
600022f8:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600022fc:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
60002300:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
60002304:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
60002308:	4770      	bx	lr
6000230a:	bf00      	nop
6000230c:	1000003f 	.word	0x1000003f
60002310:	07080025 	.word	0x07080025
60002314:	00100009 	.word	0x00100009
60002318:	00200013 	.word	0x00200013
6000231c:	07020021 	.word	0x07020021
60002320:	20000014 	.word	0x20000014
60002324:	13080025 	.word	0x13080025
60002328:	20008c80 	.word	0x20008c80
6000232c:	10000009 	.word	0x10000009
60002330:	130b0027 	.word	0x130b0027
60002334:	40000017 	.word	0x40000017
60002338:	13100033 	.word	0x13100033
6000233c:	60000018 	.word	0x60000018
60002340:	070b002f 	.word	0x070b002f
60002344:	70000019 	.word	0x70000019
60002348:	130b002f 	.word	0x130b002f
6000234c:	8000001a 	.word	0x8000001a
60002350:	130b003b 	.word	0x130b003b

60002354 <configure_external_ram>:
{
60002354:	b510      	push	{r4, lr}
60002356:	b082      	sub	sp, #8
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002358:	4b8c      	ldr	r3, [pc, #560]	; (6000258c <configure_external_ram+0x238>)
6000235a:	4a8d      	ldr	r2, [pc, #564]	; (60002590 <configure_external_ram+0x23c>)
6000235c:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60002360:	498c      	ldr	r1, [pc, #560]	; (60002594 <configure_external_ram+0x240>)
60002362:	f8c3 1260 	str.w	r1, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60002366:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
6000236a:	f5a2 4230 	sub.w	r2, r2, #45056	; 0xb000
6000236e:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002372:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
60002376:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000237a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
6000237e:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60002382:	f8c3 2278 	str.w	r2, [r3, #632]	; 0x278
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60002386:	2218      	movs	r2, #24
60002388:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
6000238a:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
6000238c:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
6000238e:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60002390:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60002392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60002396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
6000239a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
6000239e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
600023a2:	2201      	movs	r2, #1
600023a4:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
600023a8:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
600023ac:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
600023b0:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
600023b4:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
600023b8:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600023bc:	4b76      	ldr	r3, [pc, #472]	; (60002598 <configure_external_ram+0x244>)
600023be:	699a      	ldr	r2, [r3, #24]
600023c0:	4976      	ldr	r1, [pc, #472]	; (6000259c <configure_external_ram+0x248>)
600023c2:	4011      	ands	r1, r2
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
600023c4:	4a76      	ldr	r2, [pc, #472]	; (600025a0 <configure_external_ram+0x24c>)
600023c6:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
600023c8:	619a      	str	r2, [r3, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
600023ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
600023ce:	f042 020c 	orr.w	r2, r2, #12
600023d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
600023d6:	f503 13d4 	add.w	r3, r3, #1736704	; 0x1a8000
600023da:	681a      	ldr	r2, [r3, #0]
600023dc:	f042 0202 	orr.w	r2, r2, #2
600023e0:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600023e2:	6819      	ldr	r1, [r3, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
600023e4:	f421 41f1 	bic.w	r1, r1, #30848	; 0x7880
600023e8:	f021 0173 	bic.w	r1, r1, #115	; 0x73
600023ec:	0409      	lsls	r1, r1, #16
600023ee:	0c09      	lsrs	r1, r1, #16
600023f0:	4a6c      	ldr	r2, [pc, #432]	; (600025a4 <configure_external_ram+0x250>)
600023f2:	430a      	orrs	r2, r1
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
600023f4:	601a      	str	r2, [r3, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
600023f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
600023fa:	605a      	str	r2, [r3, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
600023fc:	496a      	ldr	r1, [pc, #424]	; (600025a8 <configure_external_ram+0x254>)
600023fe:	6888      	ldr	r0, [r1, #8]
60002400:	f502 0277 	add.w	r2, r2, #16187392	; 0xf70000
60002404:	f502 5260 	add.w	r2, r2, #14336	; 0x3800
60002408:	4002      	ands	r2, r0
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
6000240a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
6000240e:	609a      	str	r2, [r3, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60002410:	68da      	ldr	r2, [r3, #12]
60002412:	f022 0278 	bic.w	r2, r2, #120	; 0x78
60002416:	60da      	str	r2, [r3, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002418:	6a1a      	ldr	r2, [r3, #32]
6000241a:	4c64      	ldr	r4, [pc, #400]	; (600025ac <configure_external_ram+0x258>)
6000241c:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
6000241e:	4864      	ldr	r0, [pc, #400]	; (600025b0 <configure_external_ram+0x25c>)
60002420:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002422:	621a      	str	r2, [r3, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60002424:	6a1a      	ldr	r2, [r3, #32]
60002426:	4022      	ands	r2, r4
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60002428:	4302      	orrs	r2, r0
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
6000242a:	625a      	str	r2, [r3, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
6000242c:	4a61      	ldr	r2, [pc, #388]	; (600025b4 <configure_external_ram+0x260>)
6000242e:	629a      	str	r2, [r3, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60002430:	62da      	str	r2, [r3, #44]	; 0x2c
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60002432:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
60002436:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
6000243a:	f042 0201 	orr.w	r2, r2, #1
6000243e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60002442:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
60002446:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
6000244a:	f042 0201 	orr.w	r2, r2, #1
6000244e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI2_INTEN = 0;
60002452:	2200      	movs	r2, #0
60002454:	611a      	str	r2, [r3, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60002456:	f44f 5000 	mov.w	r0, #8192	; 0x2000
6000245a:	6618      	str	r0, [r3, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000245c:	4956      	ldr	r1, [pc, #344]	; (600025b8 <configure_external_ram+0x264>)
6000245e:	6719      	str	r1, [r3, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60002460:	f240 6205 	movw	r2, #1541	; 0x605
60002464:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60002468:	6658      	str	r0, [r3, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
6000246a:	6759      	str	r1, [r3, #116]	; 0x74
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
6000246c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60002470:	681a      	ldr	r2, [r3, #0]
60002472:	f022 0202 	bic.w	r2, r2, #2
60002476:	601a      	str	r2, [r3, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60002478:	4a50      	ldr	r2, [pc, #320]	; (600025bc <configure_external_ram+0x268>)
6000247a:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
6000247c:	2202      	movs	r2, #2
6000247e:	61da      	str	r2, [r3, #28]
60002480:	f503 7300 	add.w	r3, r3, #512	; 0x200
	for (int i=0; i < 64; i++) luttable[i] = 0;
60002484:	2100      	movs	r1, #0
60002486:	4a4e      	ldr	r2, [pc, #312]	; (600025c0 <configure_external_ram+0x26c>)
60002488:	f843 1b04 	str.w	r1, [r3], #4
6000248c:	4293      	cmp	r3, r2
6000248e:	d1fb      	bne.n	60002488 <configure_external_ram+0x134>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60002490:	4a4c      	ldr	r2, [pc, #304]	; (600025c4 <configure_external_ram+0x270>)
60002492:	6813      	ldr	r3, [r2, #0]
60002494:	f043 0301 	orr.w	r3, r3, #1
60002498:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
6000249a:	6813      	ldr	r3, [r2, #0]
6000249c:	f013 0f01 	tst.w	r3, #1
600024a0:	d1fb      	bne.n	6000249a <configure_external_ram+0x146>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
600024a2:	4b48      	ldr	r3, [pc, #288]	; (600025c4 <configure_external_ram+0x270>)
600024a4:	4a45      	ldr	r2, [pc, #276]	; (600025bc <configure_external_ram+0x268>)
600024a6:	619a      	str	r2, [r3, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
600024a8:	2402      	movs	r4, #2
600024aa:	61dc      	str	r4, [r3, #28]
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
600024ac:	f240 62f5 	movw	r2, #1781	; 0x6f5
600024b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
600024b4:	f240 4266 	movw	r2, #1126	; 0x466
600024b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
600024bc:	f240 4299 	movw	r2, #1177	; 0x499
600024c0:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
600024c4:	4a40      	ldr	r2, [pc, #256]	; (600025c8 <configure_external_ram+0x274>)
600024c6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
600024ca:	f242 4201 	movw	r2, #9217	; 0x2401
600024ce:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
600024d2:	f240 4235 	movw	r2, #1077	; 0x435
600024d6:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
600024da:	4a3c      	ldr	r2, [pc, #240]	; (600025cc <configure_external_ram+0x278>)
600024dc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
600024e0:	4a3b      	ldr	r2, [pc, #236]	; (600025d0 <configure_external_ram+0x27c>)
600024e2:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
600024e6:	4a3b      	ldr	r2, [pc, #236]	; (600025d4 <configure_external_ram+0x280>)
600024e8:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
600024ec:	f242 2201 	movw	r2, #8705	; 0x2201
600024f0:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	flexspi2_command(0, 0); // exit quad mode
600024f4:	2100      	movs	r1, #0
600024f6:	4608      	mov	r0, r1
600024f8:	f7ff fe6e 	bl	600021d8 <flexspi2_command>
	flexspi2_command(1, 0); // reset enable
600024fc:	2100      	movs	r1, #0
600024fe:	2001      	movs	r0, #1
60002500:	f7ff fe6a 	bl	600021d8 <flexspi2_command>
	flexspi2_command(2, 0); // reset (is this really necessary?)
60002504:	2100      	movs	r1, #0
60002506:	4620      	mov	r0, r4
60002508:	f7ff fe66 	bl	600021d8 <flexspi2_command>
	if (flexspi2_psram_id(0) == 0x5D0D) {
6000250c:	2000      	movs	r0, #0
6000250e:	f7ff fe79 	bl	60002204 <flexspi2_psram_id>
60002512:	f645 530d 	movw	r3, #23821	; 0x5d0d
60002516:	4298      	cmp	r0, r3
60002518:	d007      	beq.n	6000252a <configure_external_ram+0x1d6>
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
6000251a:	4b2f      	ldr	r3, [pc, #188]	; (600025d8 <configure_external_ram+0x284>)
6000251c:	2200      	movs	r2, #0
6000251e:	601a      	str	r2, [r3, #0]
60002520:	605a      	str	r2, [r3, #4]
60002522:	609a      	str	r2, [r3, #8]
60002524:	60da      	str	r2, [r3, #12]
}
60002526:	b002      	add	sp, #8
60002528:	bd10      	pop	{r4, pc}
		flexspi2_command(4, 0);
6000252a:	2100      	movs	r1, #0
6000252c:	2004      	movs	r0, #4
6000252e:	f7ff fe53 	bl	600021d8 <flexspi2_command>
		flexspi2_command(0, 0x800000); // exit quad mode
60002532:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60002536:	2000      	movs	r0, #0
60002538:	f7ff fe4e 	bl	600021d8 <flexspi2_command>
		flexspi2_command(1, 0x800000); // reset enable
6000253c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60002540:	2001      	movs	r0, #1
60002542:	f7ff fe49 	bl	600021d8 <flexspi2_command>
		flexspi2_command(2, 0x800000); // reset (is this really necessary?)
60002546:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
6000254a:	4620      	mov	r0, r4
6000254c:	f7ff fe44 	bl	600021d8 <flexspi2_command>
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60002550:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
60002554:	f7ff fe56 	bl	60002204 <flexspi2_psram_id>
60002558:	f645 530d 	movw	r3, #23821	; 0x5d0d
6000255c:	4298      	cmp	r0, r3
6000255e:	d00e      	beq.n	6000257e <configure_external_ram+0x22a>
60002560:	2008      	movs	r0, #8
			external_psram_size = 16;
60002562:	4b1e      	ldr	r3, [pc, #120]	; (600025dc <configure_external_ram+0x288>)
60002564:	7018      	strb	r0, [r3, #0]
			external_psram_size * 0x100000 -
60002566:	491e      	ldr	r1, [pc, #120]	; (600025e0 <configure_external_ram+0x28c>)
60002568:	4a1e      	ldr	r2, [pc, #120]	; (600025e4 <configure_external_ram+0x290>)
6000256a:	1a52      	subs	r2, r2, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
6000256c:	2300      	movs	r3, #0
6000256e:	9300      	str	r3, [sp, #0]
60002570:	2301      	movs	r3, #1
60002572:	eb02 5200 	add.w	r2, r2, r0, lsl #20
60002576:	4818      	ldr	r0, [pc, #96]	; (600025d8 <configure_external_ram+0x284>)
60002578:	f000 fa02 	bl	60002980 <__sm_set_pool_veneer>
6000257c:	e7d3      	b.n	60002526 <configure_external_ram+0x1d2>
			flexspi2_command(4, 0x800000);
6000257e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
60002582:	2004      	movs	r0, #4
60002584:	f7ff fe28 	bl	600021d8 <flexspi2_command>
			external_psram_size = 16;
60002588:	2010      	movs	r0, #16
6000258a:	e7ea      	b.n	60002562 <configure_external_ram+0x20e>
6000258c:	401f8000 	.word	0x401f8000
60002590:	0001b0f9 	.word	0x0001b0f9
60002594:	000110f9 	.word	0x000110f9
60002598:	400fc000 	.word	0x400fc000
6000259c:	1ffffcff 	.word	0x1ffffcff
600025a0:	a0000300 	.word	0xa0000300
600025a4:	ffff0012 	.word	0xffff0012
600025a8:	402a8000 	.word	0x402a8000
600025ac:	7cf0ff00 	.word	0x7cf0ff00
600025b0:	80000040 	.word	0x80000040
600025b4:	830f00ff 	.word	0x830f00ff
600025b8:	00020063 	.word	0x00020063
600025bc:	5af05af0 	.word	0x5af05af0
600025c0:	402a4300 	.word	0x402a4300
600025c4:	402a4000 	.word	0x402a4000
600025c8:	3018049f 	.word	0x3018049f
600025cc:	0a1806eb 	.word	0x0a1806eb
600025d0:	26013206 	.word	0x26013206
600025d4:	0a180638 	.word	0x0a180638
600025d8:	20007740 	.word	0x20007740
600025dc:	20008c29 	.word	0x20008c29
600025e0:	70dc0580 	.word	0x70dc0580
600025e4:	70000000 	.word	0x70000000

600025e8 <usb_pll_start>:
{
600025e8:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600025ea:	4a16      	ldr	r2, [pc, #88]	; (60002644 <usb_pll_start+0x5c>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600025ec:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600025ee:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600025f2:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600025f6:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600025fa:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600025fe:	f243 0042 	movw	r0, #12354	; 0x3042
60002602:	e002      	b.n	6000260a <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60002604:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60002606:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60002608:	6190      	str	r0, [r2, #24]
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000260a:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
6000260c:	f013 0f02 	tst.w	r3, #2
60002610:	d1f8      	bne.n	60002604 <usb_pll_start+0x1c>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60002612:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60002616:	d00c      	beq.n	60002632 <usb_pll_start+0x4a>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60002618:	f413 5f80 	tst.w	r3, #4096	; 0x1000
6000261c:	d00b      	beq.n	60002636 <usb_pll_start+0x4e>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
6000261e:	2b00      	cmp	r3, #0
60002620:	daf3      	bge.n	6000260a <usb_pll_start+0x22>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60002622:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60002626:	d108      	bne.n	6000263a <usb_pll_start+0x52>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60002628:	f013 0f40 	tst.w	r3, #64	; 0x40
6000262c:	d007      	beq.n	6000263e <usb_pll_start+0x56>
}
6000262e:	bcf0      	pop	{r4, r5, r6, r7}
60002630:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60002632:	6155      	str	r5, [r2, #20]
			continue;
60002634:	e7e9      	b.n	6000260a <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60002636:	6156      	str	r6, [r2, #20]
			continue;
60002638:	e7e7      	b.n	6000260a <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000263a:	6191      	str	r1, [r2, #24]
			continue;
6000263c:	e7e5      	b.n	6000260a <usb_pll_start+0x22>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
6000263e:	6157      	str	r7, [r2, #20]
			continue;
60002640:	e7e3      	b.n	6000260a <usb_pll_start+0x22>
60002642:	bf00      	nop
60002644:	400d8000 	.word	0x400d8000

60002648 <tempmon_init>:
  //asm volatile ("dsb":::"memory");
  //while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
60002648:	b430      	push	{r4, r5}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000264a:	4b45      	ldr	r3, [pc, #276]	; (60002760 <tempmon_init+0x118>)
6000264c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
60002650:	f022 0201 	bic.w	r2, r2, #1
60002654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60002658:	2203      	movs	r2, #3
6000265a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
6000265e:	4a41      	ldr	r2, [pc, #260]	; (60002764 <tempmon_init+0x11c>)
60002660:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60002664:	b2d1      	uxtb	r1, r2
60002666:	4c40      	ldr	r4, [pc, #256]	; (60002768 <tempmon_init+0x120>)
60002668:	6021      	str	r1, [r4, #0]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000266a:	f3c2 200b 	ubfx	r0, r2, #8, #12
6000266e:	4d3f      	ldr	r5, [pc, #252]	; (6000276c <tempmon_init+0x124>)
60002670:	6028      	str	r0, [r5, #0]
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60002672:	ee07 1a90 	vmov	s15, r1
60002676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
6000267a:	eef3 4a09 	vmov.f32	s9, #57	; 0x41c80000  25.0
6000267e:	ee37 6a64 	vsub.f32	s12, s14, s9
60002682:	493b      	ldr	r1, [pc, #236]	; (60002770 <tempmon_init+0x128>)
60002684:	ed81 6a00 	vstr	s12, [r1]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002688:	ee07 0a90 	vmov	s15, r0
6000268c:	eef8 6a67 	vcvt.f32.u32	s13, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60002690:	0d12      	lsrs	r2, r2, #20
60002692:	ee07 2a90 	vmov	s15, r2
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60002696:	eef8 7a67 	vcvt.f32.u32	s15, s15
6000269a:	ee77 7ae6 	vsub.f32	s15, s15, s13
6000269e:	4835      	ldr	r0, [pc, #212]	; (60002774 <tempmon_init+0x12c>)
600026a0:	edc0 7a00 	vstr	s15, [r0]

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600026a4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600026a8:	eddf 5a33 	vldr	s11, [pc, #204]	; 60002778 <tempmon_init+0x130>
600026ac:	ee37 7a65 	vsub.f32	s14, s14, s11
600026b0:	ee27 7a27 	vmul.f32	s14, s14, s15
600026b4:	eec7 7a06 	vdiv.f32	s15, s14, s12
600026b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
600026bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600026c0:	ee17 ca90 	vmov	ip, s15
600026c4:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
600026c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  
  //Set Panic Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600026cc:	ed95 6a00 	vldr	s12, [r5]
600026d0:	eeb8 6a46 	vcvt.f32.u32	s12, s12
600026d4:	edd4 7a00 	vldr	s15, [r4]
600026d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
600026dc:	ed90 5a00 	vldr	s10, [r0]
600026e0:	edd1 5a00 	vldr	s11, [r1]
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600026e4:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600026e8:	eddf 6a24 	vldr	s13, [pc, #144]	; 6000277c <tempmon_init+0x134>
600026ec:	ee77 6ae6 	vsub.f32	s13, s15, s13
600026f0:	ee66 6a85 	vmul.f32	s13, s13, s10
600026f4:	ee86 7aa5 	vdiv.f32	s14, s13, s11
600026f8:	ee37 7a06 	vadd.f32	s14, s14, s12
600026fc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60002700:	4a1f      	ldr	r2, [pc, #124]	; (60002780 <tempmon_init+0x138>)
60002702:	ee17 0a10 	vmov	r0, s14
60002706:	ea02 4200 	and.w	r2, r2, r0, lsl #16
6000270a:	430a      	orrs	r2, r1
6000270c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  // Set Low Temp Alarm Temp
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60002710:	f8d3 1190 	ldr.w	r1, [r3, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60002714:	ee77 7ae4 	vsub.f32	s15, s15, s9
60002718:	ee27 7a85 	vmul.f32	s14, s15, s10
6000271c:	eec7 7a25 	vdiv.f32	s15, s14, s11
60002720:	ee77 7a86 	vadd.f32	s15, s15, s12
60002724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
60002728:	ee17 2a90 	vmov	r2, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000272c:	f3c2 020b 	ubfx	r2, r2, #0, #12
60002730:	430a      	orrs	r2, r1
60002732:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60002736:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
6000273a:	f042 0202 	orr.w	r2, r2, #2
6000273e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60002742:	4b10      	ldr	r3, [pc, #64]	; (60002784 <tempmon_init+0x13c>)
60002744:	2200      	movs	r2, #0
60002746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
6000274a:	4b0f      	ldr	r3, [pc, #60]	; (60002788 <tempmon_init+0x140>)
6000274c:	4a0f      	ldr	r2, [pc, #60]	; (6000278c <tempmon_init+0x144>)
6000274e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60002752:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60002756:	2201      	movs	r2, #1
60002758:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
6000275c:	bc30      	pop	{r4, r5}
6000275e:	4770      	bx	lr
60002760:	400d8100 	.word	0x400d8100
60002764:	401f4400 	.word	0x401f4400
60002768:	20008538 	.word	0x20008538
6000276c:	20008534 	.word	0x20008534
60002770:	2000853c 	.word	0x2000853c
60002774:	20008540 	.word	0x20008540
60002778:	42aa0000 	.word	0x42aa0000
6000277c:	42b40000 	.word	0x42b40000
60002780:	0fff0000 	.word	0x0fff0000
60002784:	e000e400 	.word	0xe000e400
60002788:	20006000 	.word	0x20006000
6000278c:	00017b5f 	.word	0x00017b5f

60002790 <usb_init>:

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
60002790:	b538      	push	{r3, r4, r5, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60002792:	4b32      	ldr	r3, [pc, #200]	; (6000285c <usb_init+0xcc>)
60002794:	f640 7261 	movw	r2, #3937	; 0xf61
60002798:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
6000279c:	f000 f8f8 	bl	60002990 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
600027a0:	4a2f      	ldr	r2, [pc, #188]	; (60002860 <usb_init+0xd0>)
600027a2:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600027a6:	f043 0303 	orr.w	r3, r3, #3
600027aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
600027ae:	4b2d      	ldr	r3, [pc, #180]	; (60002864 <usb_init+0xd4>)
600027b0:	f240 4204 	movw	r2, #1028	; 0x404
600027b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
600027b8:	4b2b      	ldr	r3, [pc, #172]	; (60002868 <usb_init+0xd8>)
600027ba:	681a      	ldr	r2, [r3, #0]
600027bc:	4b2b      	ldr	r3, [pc, #172]	; (6000286c <usb_init+0xdc>)
600027be:	421a      	tst	r2, r3
600027c0:	d105      	bne.n	600027ce <usb_init+0x3e>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
600027c2:	4b28      	ldr	r3, [pc, #160]	; (60002864 <usb_init+0xd4>)
600027c4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
600027c8:	f013 0f03 	tst.w	r3, #3
600027cc:	d01c      	beq.n	60002808 <usb_init+0x78>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
600027ce:	4b26      	ldr	r3, [pc, #152]	; (60002868 <usb_init+0xd8>)
600027d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
600027d4:	635a      	str	r2, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
600027d6:	4a23      	ldr	r2, [pc, #140]	; (60002864 <usb_init+0xd4>)
600027d8:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600027dc:	f043 0302 	orr.w	r3, r3, #2
600027e0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
600027e4:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
600027e8:	f013 0f02 	tst.w	r3, #2
600027ec:	d1fa      	bne.n	600027e4 <usb_init+0x54>
		NVIC_CLEAR_PENDING(IRQ_USB1);
600027ee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600027f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
600027f6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
600027fa:	4b1b      	ldr	r3, [pc, #108]	; (60002868 <usb_init+0xd8>)
600027fc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
60002800:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60002802:	2019      	movs	r0, #25
60002804:	f000 f8ac 	bl	60002960 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60002808:	4b17      	ldr	r3, [pc, #92]	; (60002868 <usb_init+0xd8>)
6000280a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
6000280e:	639a      	str	r2, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
60002810:	2100      	movs	r1, #0
60002812:	6019      	str	r1, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60002814:	4c13      	ldr	r4, [pc, #76]	; (60002864 <usb_init+0xd4>)
60002816:	230a      	movs	r3, #10
60002818:	f8c4 31a8 	str.w	r3, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000281c:	4d14      	ldr	r5, [pc, #80]	; (60002870 <usb_init+0xe0>)
6000281e:	f44f 7220 	mov.w	r2, #640	; 0x280
60002822:	4628      	mov	r0, r5
60002824:	f000 f8a4 	bl	60002970 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60002828:	f44f 0381 	mov.w	r3, #4227072	; 0x408000
6000282c:	602b      	str	r3, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
6000282e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
60002832:	642b      	str	r3, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60002834:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60002838:	f240 1343 	movw	r3, #323	; 0x143
6000283c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
60002840:	4b0c      	ldr	r3, [pc, #48]	; (60002874 <usb_init+0xe4>)
60002842:	4a0d      	ldr	r2, [pc, #52]	; (60002878 <usb_init+0xe8>)
60002844:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60002848:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
6000284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
60002850:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60002854:	2301      	movs	r3, #1
60002856:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
6000285a:	bd38      	pop	{r3, r4, r5, pc}
6000285c:	400d8000 	.word	0x400d8000
60002860:	400fc000 	.word	0x400fc000
60002864:	402e0000 	.word	0x402e0000
60002868:	400d9000 	.word	0x400d9000
6000286c:	001e1c00 	.word	0x001e1c00
60002870:	20000000 	.word	0x20000000
60002874:	20006000 	.word	0x20006000
60002878:	00017e59 	.word	0x00017e59

6000287c <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
6000287c:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
6000287e:	4b0f      	ldr	r3, [pc, #60]	; (600028bc <_reboot_Teensyduino_+0x40>)
60002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60002882:	f013 0f02 	tst.w	r3, #2
60002886:	d100      	bne.n	6000288a <_reboot_Teensyduino_+0xe>
		asm("bkpt #251"); // run bootloader
60002888:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
6000288a:	b672      	cpsid	i
		USB1_USBCMD = 0;
6000288c:	4b0c      	ldr	r3, [pc, #48]	; (600028c0 <_reboot_Teensyduino_+0x44>)
6000288e:	2200      	movs	r2, #0
60002890:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		IOMUXC_GPR_GPR16 = 0x00200003;
60002894:	f5a3 130d 	sub.w	r3, r3, #2310144	; 0x234000
60002898:	4a0a      	ldr	r2, [pc, #40]	; (600028c4 <_reboot_Teensyduino_+0x48>)
6000289a:	641a      	str	r2, [r3, #64]	; 0x40
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000289c:	f1a3 53ff 	sub.w	r3, r3, #534773760	; 0x1fe00000
600028a0:	f5a3 232b 	sub.w	r3, r3, #700416	; 0xab000
600028a4:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
600028a6:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
600028aa:	4807      	ldr	r0, [pc, #28]	; (600028c8 <_reboot_Teensyduino_+0x4c>)
600028ac:	4b07      	ldr	r3, [pc, #28]	; (600028cc <_reboot_Teensyduino_+0x50>)
600028ae:	6003      	str	r3, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
600028b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
600028b4:	69db      	ldr	r3, [r3, #28]
600028b6:	689b      	ldr	r3, [r3, #8]
600028b8:	4798      	blx	r3
600028ba:	e7e6      	b.n	6000288a <_reboot_Teensyduino_+0xe>
600028bc:	401f4400 	.word	0x401f4400
600028c0:	402e0000 	.word	0x402e0000
600028c4:	00200003 	.word	0x00200003
600028c8:	20208000 	.word	0x20208000
600028cc:	eb120000 	.word	0xeb120000

600028d0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600028d0:	4b11      	ldr	r3, [pc, #68]	; (60002918 <analog_init+0x48>)
600028d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
600028d4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600028d8:	66da      	str	r2, [r3, #108]	; 0x6c
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
600028da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
600028dc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
600028e0:	66da      	str	r2, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600028e2:	f5a3 3360 	sub.w	r3, r3, #229376	; 0x38000
600028e6:	f240 6237 	movw	r2, #1591	; 0x637
600028ea:	645a      	str	r2, [r3, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
600028ec:	22a0      	movs	r2, #160	; 0xa0
600028ee:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
600028f0:	461a      	mov	r2, r3
600028f2:	6c93      	ldr	r3, [r2, #72]	; 0x48
600028f4:	f013 0f80 	tst.w	r3, #128	; 0x80
600028f8:	d1fb      	bne.n	600028f2 <analog_init+0x22>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
600028fa:	4b08      	ldr	r3, [pc, #32]	; (6000291c <analog_init+0x4c>)
600028fc:	f240 6237 	movw	r2, #1591	; 0x637
60002900:	645a      	str	r2, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002902:	22a0      	movs	r2, #160	; 0xa0
60002904:	649a      	str	r2, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002906:	461a      	mov	r2, r3
60002908:	6c93      	ldr	r3, [r2, #72]	; 0x48
6000290a:	f013 0f80 	tst.w	r3, #128	; 0x80
6000290e:	d1fb      	bne.n	60002908 <analog_init+0x38>
		//yield();
	}
	calibrating = 0;
60002910:	4b03      	ldr	r3, [pc, #12]	; (60002920 <analog_init+0x50>)
60002912:	2200      	movs	r2, #0
60002914:	701a      	strb	r2, [r3, #0]
}
60002916:	4770      	bx	lr
60002918:	400fc000 	.word	0x400fc000
6000291c:	400c8000 	.word	0x400c8000
60002920:	20008c28 	.word	0x20008c28

60002924 <_init>:
60002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002926:	bf00      	nop
60002928:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000292a:	bc08      	pop	{r3}
6000292c:	469e      	mov	lr, r3
6000292e:	4770      	bx	lr

60002930 <___Znwj_veneer>:
60002930:	f85f f000 	ldr.w	pc, [pc]	; 60002934 <___Znwj_veneer+0x4>
60002934:	00017425 	.word	0x00017425

60002938 <___ZN5Print7printlnEv_veneer>:
60002938:	f85f f000 	ldr.w	pc, [pc]	; 6000293c <___ZN5Print7printlnEv_veneer+0x4>
6000293c:	000161c7 	.word	0x000161c7

60002940 <__pwm_init_veneer>:
60002940:	f85f f000 	ldr.w	pc, [pc]	; 60002944 <__pwm_init_veneer+0x4>
60002944:	000178e9 	.word	0x000178e9

60002948 <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer>:
60002948:	f85f f000 	ldr.w	pc, [pc]	; 6000294c <___ZZN6teensy23inplace_function_detail6vtableIvJEEC4IPFvvEEENS0_7wrapperIT_EEENUlPvS9_E0_4_FUNES9_S9__veneer+0x4>
6000294c:	00000309 	.word	0x00000309

60002950 <___ZN5Print11printNumberEmhh_veneer>:
60002950:	f85f f000 	ldr.w	pc, [pc]	; 60002954 <___ZN5Print11printNumberEmhh_veneer+0x4>
60002954:	00016219 	.word	0x00016219

60002958 <___ZN5Print10printFloatEdh_veneer>:
60002958:	f85f f000 	ldr.w	pc, [pc]	; 6000295c <___ZN5Print10printFloatEdh_veneer+0x4>
6000295c:	00016369 	.word	0x00016369

60002960 <__delay_veneer>:
60002960:	f85f f000 	ldr.w	pc, [pc]	; 60002964 <__delay_veneer+0x4>
60002964:	00016c75 	.word	0x00016c75

60002968 <___ZN5Print5printEl_veneer>:
60002968:	f85f f000 	ldr.w	pc, [pc]	; 6000296c <___ZN5Print5printEl_veneer+0x4>
6000296c:	000162a3 	.word	0x000162a3

60002970 <__memset_veneer>:
60002970:	f85f f000 	ldr.w	pc, [pc]	; 60002974 <__memset_veneer+0x4>
60002974:	00023059 	.word	0x00023059

60002978 <__main_veneer>:
60002978:	f85f f000 	ldr.w	pc, [pc]	; 6000297c <__main_veneer+0x4>
6000297c:	000172e1 	.word	0x000172e1

60002980 <__sm_set_pool_veneer>:
60002980:	f85f f000 	ldr.w	pc, [pc]	; 60002984 <__sm_set_pool_veneer+0x4>
60002984:	00019311 	.word	0x00019311

60002988 <____libc_init_array_veneer>:
60002988:	f85f f000 	ldr.w	pc, [pc]	; 6000298c <____libc_init_array_veneer+0x4>
6000298c:	00023679 	.word	0x00023679

60002990 <__usb_init_serialnumber_veneer>:
60002990:	f85f f000 	ldr.w	pc, [pc]	; 60002994 <__usb_init_serialnumber_veneer+0x4>
60002994:	000183f9 	.word	0x000183f9

60002998 <___ZN7TwoWire8setClockEm_veneer>:
60002998:	f85f f000 	ldr.w	pc, [pc]	; 6000299c <___ZN7TwoWire8setClockEm_veneer+0x4>
6000299c:	000158b9 	.word	0x000158b9

600029a0 <___ZN11AudioStream12update_setupEv_veneer>:
600029a0:	f85f f000 	ldr.w	pc, [pc]	; 600029a4 <___ZN11AudioStream12update_setupEv_veneer+0x4>
600029a4:	00015d5d 	.word	0x00015d5d

600029a8 <__set_arm_clock_veneer>:
600029a8:	f85f f000 	ldr.w	pc, [pc]	; 600029ac <__set_arm_clock_veneer+0x4>
600029ac:	00016985 	.word	0x00016985

600029b0 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer>:
600029b0:	f85f f000 	ldr.w	pc, [pc]	; 600029b4 <___ZN13IntervalTimer11beginCyclesEN6teensy16inplace_functionIFvvELj16ELj8EEEm_veneer+0x4>
600029b4:	00015fa5 	.word	0x00015fa5

600029b8 <__frame_dummy_init_array_entry>:
600029b8:	0000010d 0000a871 0000c0bd 0000c351     ....q.......Q...
600029c8:	0000c7b9 0000d049 0000d065 0000d081     ....I...e.......
600029d8:	0000d09d 0000d0b9 0000d0d5 0000d0f1     ................
600029e8:	0000d10d 0000d129 0000d145 0000d161     ....)...E...a...
600029f8:	0000d701 0000d71d 0000d739 0000d755     ........9...U...
60002a08:	0000d771 0000d78d 0000d7a9 0000d7c5     q...............
60002a18:	0000d7f9 0000d829 0000d845 0000d861     ....)...E...a...
60002a28:	0000d87d 0000d899 0000e685 00016125     }...........%a..
60002a38:	00019995                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
	return printNumber(n, 10, sign);
}

size_t Print::print(int64_t n)
{
	if (n < 0) return printNumber64(-n, 10, 1);
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
      26:	699d      	ldr	r5, [r3, #24]
      28:	695b      	ldr	r3, [r3, #20]
      2a:	401d      	ands	r5, r3
      2c:	d00f      	beq.n	4e <_teensy_model_identifier+0x29>
      2e:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
    if (cp <= 0XFFFF) {
      *hs = cp;
      *ls = 0;
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
      32:	619d      	str	r5, [r3, #24]
      34:	4f25      	ldr	r7, [pc, #148]	; (cc <_teensy_model_identifier+0xa7>)
	}
    return x;
}

CLEDController & CFastLED::operator[](int x) {
	CLEDController *pCur = CLEDController::head();
      36:	2601      	movs	r6, #1
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      38:	fa95 f4a5 	rbit	r4, r5
      3c:	fab4 f484 	clz	r4, r4
      40:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      44:	4798      	blx	r3
      46:	fa06 f404 	lsl.w	r4, r6, r4
    }
  }
  return readStop();
 fail:
  return false;
}
      4a:	43a5      	bics	r5, r4
      4c:	d1f4      	bne.n	38 <_teensy_model_identifier+0x13>
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      4e:	4b20      	ldr	r3, [pc, #128]	; (d0 <_teensy_model_identifier+0xab>)
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      50:	699d      	ldr	r5, [r3, #24]
	#if defined(BUILTIN_SDCARD)	
	if (pin == BUILTIN_SDCARD) {
		csPin_ = BUILTIN_SDCARD;  // force it in case user did begin using sdCard
		#if defined(_SD_DAT3)
		cdPin_ = _SD_DAT3;
		if (!cardPreviouslyPresent) pinMode(_SD_DAT3, INPUT_PULLDOWN);
      52:	695b      	ldr	r3, [r3, #20]
      54:	401d      	ands	r5, r3
      56:	d00e      	beq.n	76 <_teensy_model_identifier+0x51>
            for (iterator p = end(); p != pos; --p) {
                new (p) T(*(p - 1)); // Use copy constructor instead of std::move
                (p - 1)->~T();
            }
            new (pos) T(value);
            ++current_size;
      58:	4b1d      	ldr	r3, [pc, #116]	; (d0 <_teensy_model_identifier+0xab>)
      5a:	619d      	str	r5, [r3, #24]
      5c:	4f1d      	ldr	r7, [pc, #116]	; (d4 <_teensy_model_identifier+0xaf>)
            return true;
      5e:	2601      	movs	r6, #1
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      60:	fa95 f4a5 	rbit	r4, r5
      str = fsFmtField(str, tz/4, ':');
      *--str = sign;
    }
    *--str = 'C';
    *--str = 'T';
    *--str = 'U';
      64:	fab4 f484 	clz	r4, r4
  }
  return str;
}
      68:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      sign = '+';
      6c:	4798      	blx	r3
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6e:	fa06 f404 	lsl.w	r4, r6, r4
      72:	43a5      	bics	r5, r4
      74:	d1f4      	bne.n	60 <_teensy_model_identifier+0x3b>
  if (r < 0) {
      76:	4b18      	ldr	r3, [pc, #96]	; (d8 <_teensy_model_identifier+0xb3>)
  return n;

 fail:
  *name = 0;
  return 0;
}
      78:	699d      	ldr	r5, [r3, #24]
  if (from.m_fFile) {
    m_fFile = new (m_fileMem) FatFile;
    *m_fFile = *from.m_fFile;
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
      7a:	695b      	ldr	r3, [r3, #20]
      7c:	401d      	ands	r5, r3
      7e:	d00e      	beq.n	9e <_teensy_model_identifier+0x79>
      80:	4b15      	ldr	r3, [pc, #84]	; (d8 <_teensy_model_identifier+0xb3>)
      82:	619d      	str	r5, [r3, #24]
  }
  return true;

 fail:
  return false;
}
      84:	4f15      	ldr	r7, [pc, #84]	; (dc <_teensy_model_identifier+0xb7>)
      86:	2601      	movs	r6, #1
  return false;
      88:	fa95 f4a5 	rbit	r4, r5
      8c:	fab4 f484 	clz	r4, r4
			_next->_ms += _ms;   // add in the rest of our timing to next entry...
		}
		if (_prev) {
			_prev->_next = _next;
		} else {
			listActive = _next;
      90:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    if (untruncated < -32768)
      return -32768;
    if (untruncated > 32767)
      return 32767;
    return untruncated;
}
      94:	4798      	blx	r3
      96:	fa06 f404 	lsl.w	r4, r6, r4
      9a:	43a5      	bics	r5, r4
      9c:	d1f4      	bne.n	88 <_teensy_model_identifier+0x63>
      9e:	4b10      	ldr	r3, [pc, #64]	; (e0 <_teensy_model_identifier+0xbb>)
      a0:	699d      	ldr	r5, [r3, #24]
      a2:	695b      	ldr	r3, [r3, #20]
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
      a4:	401d      	ands	r5, r3
      a6:	d00e      	beq.n	c6 <_teensy_model_identifier+0xa1>
      a8:	4b0d      	ldr	r3, [pc, #52]	; (e0 <_teensy_model_identifier+0xbb>)
      aa:	619d      	str	r5, [r3, #24]
	if (ch == 255) return 0;
      ac:	4f0d      	ldr	r7, [pc, #52]	; (e4 <_teensy_model_identifier+0xbf>)
      ae:	2601      	movs	r6, #1
      b0:	fa95 f4a5 	rbit	r4, r5
      b4:	fab4 f484 	clz	r4, r4
      b8:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
}
      bc:	4798      	blx	r3
      be:	fa06 f404 	lsl.w	r4, r6, r4
inline void irq_anyport(volatile uint32_t *gpio, voidFuncPtr *table)
{
	uint32_t status = gpio[ISR_INDEX] & gpio[IMR_INDEX];
	if (status) {
		gpio[ISR_INDEX] = status;
		while (status) {
      c2:	43a5      	bics	r5, r4
      c4:	d1f4      	bne.n	b0 <_teensy_model_identifier+0x8b>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
	asm volatile ("dsb":::"memory");
      c6:	f3bf 8f4f 	dsb	sy
}
      ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      cc:	20005880 	.word	0x20005880
      d0:	42004000 	.word	0x42004000
      d4:	20005900 	.word	0x20005900
      d8:	42008000 	.word	0x42008000
      dc:	20005980 	.word	0x20005980
      e0:	4200c000 	.word	0x4200c000
      e4:	20005a00 	.word	0x20005a00

000000e8 <register_tm_clones>:

	c = c1.channel;
	c1.channel = c2.channel;
	c2.channel = c;
	t = c1.TCD;
	c1.TCD = c2.TCD;
      e8:	4805      	ldr	r0, [pc, #20]	; (100 <register_tm_clones+0x18>)
	c2.TCD = t;
      ea:	4b06      	ldr	r3, [pc, #24]	; (104 <register_tm_clones+0x1c>)
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
      ec:	1a1b      	subs	r3, r3, r0
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
      ee:	0fd9      	lsrs	r1, r3, #31
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      f0:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      f4:	1049      	asrs	r1, r1, #1
      f6:	d002      	beq.n	fe <register_tm_clones+0x16>
      f8:	4b03      	ldr	r3, [pc, #12]	; (108 <register_tm_clones+0x20>)
      fa:	b103      	cbz	r3, fe <register_tm_clones+0x16>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
      fc:	4718      	bx	r3
      fe:	4770      	bx	lr
     100:	200062c0 	.word	0x200062c0
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;
		if (size > capacity && !changeBuffer(size)) return *this;
     104:	200062c0 	.word	0x200062c0
     108:	00000000 	.word	0x00000000

0000010c <frame_dummy>:
     10c:	b508      	push	{r3, lr}
     10e:	4b05      	ldr	r3, [pc, #20]	; (124 <frame_dummy+0x18>)
     110:	b11b      	cbz	r3, 11a <frame_dummy+0xe>
		sum += table[data2 & 255];
		table += 256;

	} while (--count > 0);
	return signed_saturate_rshift(sum, 16, RSHIFT);
}
     112:	4905      	ldr	r1, [pc, #20]	; (128 <frame_dummy+0x1c>)
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
     114:	4805      	ldr	r0, [pc, #20]	; (12c <frame_dummy+0x20>)
     116:	f3af 8000 	nop.w
     11a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     11e:	f7ff bfe3 	b.w	e8 <register_tm_clones>
     122:	bf00      	nop
    }
  }
  return n;

 fail:
  return 0;
     124:	00000000 	.word	0x00000000
     128:	200080b8 	.word	0x200080b8
     12c:	60032c00 	.word	0x60032c00

00000130 <Print::availableForWrite()>:
	virtual int availableForWrite(void)		{ return 0; }
     130:	2000      	movs	r0, #0
     132:	4770      	bx	lr

00000134 <Print::flush()>:
	virtual void flush()				{ }
     134:	4770      	bx	lr

00000136 <CLEDController::showLeds(unsigned char)>:
        clearLedDataInternal(nLeds);
        showLeds(0);
    }

    // Compatibility with the 3.8.x codebase.
    VIRTUAL_IF_NOT_AVR void showLeds(uint8_t brightness) {
     136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     138:	4604      	mov	r4, r0
     13a:	460e      	mov	r6, r1
        void* data = beginShowLeds(m_nLeds);
     13c:	6802      	ldr	r2, [r0, #0]
     13e:	6a52      	ldr	r2, [r2, #36]	; 0x24
     140:	6941      	ldr	r1, [r0, #20]
     142:	4790      	blx	r2
     144:	4605      	mov	r5, r0

    /// Write the data to the LEDs managed by this controller
    /// @param brightness the brightness of the LEDs
    /// @see show(const struct CRGB*, int, uint8_t)
    void showLedsInternal(uint8_t brightness) {
        if (m_enabled) {
     146:	7ce2      	ldrb	r2, [r4, #19]
     148:	b132      	cbz	r2, 158 <CLEDController::showLeds(unsigned char)+0x22>
            show(m_Data, m_nLeds, brightness);
     14a:	6823      	ldr	r3, [r4, #0]
     14c:	685f      	ldr	r7, [r3, #4]
     14e:	4633      	mov	r3, r6
     150:	6962      	ldr	r2, [r4, #20]
     152:	6861      	ldr	r1, [r4, #4]
     154:	4620      	mov	r0, r4
     156:	47b8      	blx	r7
        endShowLeds(data);
     158:	6823      	ldr	r3, [r4, #0]
     15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     15c:	4629      	mov	r1, r5
     15e:	4620      	mov	r0, r4
     160:	4798      	blx	r3
    }
     162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000164 <CLEDController::size()>:
    /// Zero out the LED data managed by this controller
    void clearLedDataInternal(int nLeds = -1);

    /// How many LEDs does this controller manage?
    /// @returns CLEDController::m_nLeds
    virtual int size() { return m_nLeds; }
     164:	6940      	ldr	r0, [r0, #20]
     166:	4770      	bx	lr

00000168 <CLEDController::beginShowLeds(int)>:
        // for each controller:
        //   endShowLeds();
        uintptr_t d = getDither();
        void* out = reinterpret_cast<void*>(d);
        return out;
    }
     168:	7c80      	ldrb	r0, [r0, #18]
     16a:	4770      	bx	lr

0000016c <CLEDController::endShowLeds(void*)>:
    virtual void endShowLeds(void* data) {
        // By default recieves the integer that beginShowLeds() emitted.
        //For async controllers this should be used to signal the controller
        // to begin transmitting the current frame to the leds.
        uintptr_t d = reinterpret_cast<uintptr_t>(data);
        setDither(static_cast<uint8_t>(d));
     16c:	7481      	strb	r1, [r0, #18]
    }
     16e:	4770      	bx	lr

00000170 <CLEDController::getMaxRefreshRate() const>:
        return CRGB::computeAdjustment(scale, m_ColorCorrection, m_ColorTemperature);
    }

    /// Gets the maximum possible refresh rate of the strip
    /// @returns the maximum refresh rate, in frames per second (FPS)
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr

00000174 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->read(buf, nbyte) : 0;
	}
	// Write bytes to a file
	virtual size_t write(const uint8_t *buf, size_t size) {
		// override print version
		return (f) ? f->write((void*)buf, size) : 0;
     174:	6900      	ldr	r0, [r0, #16]
     176:	b120      	cbz	r0, 182 <File::write(unsigned char const*, unsigned int)+0xe>
	virtual size_t write(const uint8_t *buf, size_t size) {
     178:	b508      	push	{r3, lr}
		return (f) ? f->write((void*)buf, size) : 0;
     17a:	6803      	ldr	r3, [r0, #0]
     17c:	68db      	ldr	r3, [r3, #12]
     17e:	4798      	blx	r3
	}
     180:	bd08      	pop	{r3, pc}
		return (f) ? f->write((void*)buf, size) : 0;
     182:	2000      	movs	r0, #0
	}
     184:	4770      	bx	lr

00000186 <File::available()>:
	size_t write(const void *buf, size_t size) {
		return (f) ? f->write(buf, size) : 0;
	}
	// Returns the number of bytes which may be read from a file
	int available() {
		return (f) ? f->available() : 0;
     186:	6900      	ldr	r0, [r0, #16]
     188:	b120      	cbz	r0, 194 <File::available()+0xe>
	int available() {
     18a:	b508      	push	{r3, lr}
		return (f) ? f->available() : 0;
     18c:	6803      	ldr	r3, [r0, #0]
     18e:	691b      	ldr	r3, [r3, #16]
     190:	4798      	blx	r3
	}
     192:	bd08      	pop	{r3, pc}
		return (f) ? f->available() : 0;
     194:	2000      	movs	r0, #0
	}
     196:	4770      	bx	lr

00000198 <File::peek()>:
	int peek() {
		return (f) ? f->peek() : -1;
     198:	6900      	ldr	r0, [r0, #16]
     19a:	b120      	cbz	r0, 1a6 <File::peek()+0xe>
	int peek() {
     19c:	b508      	push	{r3, lr}
		return (f) ? f->peek() : -1;
     19e:	6803      	ldr	r3, [r0, #0]
     1a0:	695b      	ldr	r3, [r3, #20]
     1a2:	4798      	blx	r3
	}
     1a4:	bd08      	pop	{r3, pc}
		return (f) ? f->peek() : -1;
     1a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
     1aa:	4770      	bx	lr

000001ac <File::flush()>:
	void flush() {
		if (f) f->flush();
     1ac:	6900      	ldr	r0, [r0, #16]
     1ae:	b120      	cbz	r0, 1ba <File::flush()+0xe>
	void flush() {
     1b0:	b508      	push	{r3, lr}
		if (f) f->flush();
     1b2:	6803      	ldr	r3, [r0, #0]
     1b4:	699b      	ldr	r3, [r3, #24]
     1b6:	4798      	blx	r3
	}
     1b8:	bd08      	pop	{r3, pc}
     1ba:	4770      	bx	lr

000001bc <File::read()>:
	}
	bool seek(uint64_t pos) {
		return seek(pos, SeekSet);
	}
	int read() {
		if (!f) return -1;
     1bc:	6900      	ldr	r0, [r0, #16]
     1be:	b168      	cbz	r0, 1dc <File::read()+0x20>
	int read() {
     1c0:	b500      	push	{lr}
     1c2:	b083      	sub	sp, #12
		unsigned char b;
		if (f->read(&b, 1) < 1) return -1;
     1c4:	6803      	ldr	r3, [r0, #0]
     1c6:	689b      	ldr	r3, [r3, #8]
     1c8:	2201      	movs	r2, #1
     1ca:	f10d 0107 	add.w	r1, sp, #7
     1ce:	4798      	blx	r3
     1d0:	b138      	cbz	r0, 1e2 <File::read()+0x26>
		return b;
     1d2:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
     1d6:	b003      	add	sp, #12
     1d8:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
     1dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
     1e0:	4770      	bx	lr
		if (f->read(&b, 1) < 1) return -1;
     1e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     1e6:	e7f6      	b.n	1d6 <File::read()+0x1a>

000001e8 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     1e8:	b500      	push	{lr}
     1ea:	b083      	sub	sp, #12
     1ec:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     1f0:	6900      	ldr	r0, [r0, #16]
     1f2:	b140      	cbz	r0, 206 <File::write(unsigned char)+0x1e>
     1f4:	6803      	ldr	r3, [r0, #0]
     1f6:	68db      	ldr	r3, [r3, #12]
     1f8:	2201      	movs	r2, #1
     1fa:	f10d 0107 	add.w	r1, sp, #7
     1fe:	4798      	blx	r3
	}
     200:	b003      	add	sp, #12
     202:	f85d fb04 	ldr.w	pc, [sp], #4
		return (f) ? f->write(&b, 1) : 0;
     206:	2000      	movs	r0, #0
     208:	e7fa      	b.n	200 <File::write(unsigned char)+0x18>

0000020a <SDFile::position()>:
    return m_fFile ? m_fFile->contiguousRange(bgnSector, endSector) :
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
     20a:	6d03      	ldr	r3, [r0, #80]	; 0x50
     20c:	b113      	cbz	r3, 214 <SDFile::position()+0xa>
     20e:	6958      	ldr	r0, [r3, #20]
     210:	2100      	movs	r1, #0
     212:	4770      	bx	lr
           m_xFile ? m_xFile->curPosition() : 0;
     214:	6d43      	ldr	r3, [r0, #84]	; 0x54
     216:	b113      	cbz	r3, 21e <SDFile::position()+0x14>
   *
   * \return true for success or false for failure.
   */
  bool contiguousRange(uint32_t* bgnSector, uint32_t* endSector);
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {return m_curPosition;}
     218:	6818      	ldr	r0, [r3, #0]
     21a:	6859      	ldr	r1, [r3, #4]
     21c:	4770      	bx	lr
     21e:	2000      	movs	r0, #0
     220:	4601      	mov	r1, r0
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
		return false;
	}
	virtual uint64_t position() {
		return sdfatfile.curPosition();
	}
     222:	4770      	bx	lr

00000224 <SDFile::size()>:
    return m_fFile ? m_fFile->fgets(str, num, delim) :
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
     224:	6d03      	ldr	r3, [r0, #80]	; 0x50
     226:	b113      	cbz	r3, 22e <SDFile::size()+0xa>
     228:	69d8      	ldr	r0, [r3, #28]
     22a:	2100      	movs	r1, #0
     22c:	4770      	bx	lr
           m_xFile ? m_xFile->fileSize() : 0;
     22e:	6d43      	ldr	r3, [r0, #84]	; 0x54
     230:	b113      	cbz	r3, 238 <SDFile::size()+0x14>
   * If no data is read, fgets() returns zero for EOF or -1 if an error
   * occurred.
   */
  int fgets(char* str, int num, char* delim = nullptr);
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {return m_validLength;}
     232:	6918      	ldr	r0, [r3, #16]
     234:	6959      	ldr	r1, [r3, #20]
     236:	4770      	bx	lr
     238:	2000      	movs	r0, #0
     23a:	4601      	mov	r1, r0
	virtual uint64_t size() {
		return sdfatfile.size();
	}
     23c:	4770      	bx	lr

0000023e <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     23e:	6d03      	ldr	r3, [r0, #80]	; 0x50
     240:	b10b      	cbz	r3, 246 <SDFile::isOpen()+0x8>
     242:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     244:	4770      	bx	lr
     246:	6d40      	ldr	r0, [r0, #84]	; 0x54
     248:	3800      	subs	r0, #0
     24a:	bf18      	it	ne
     24c:	2001      	movne	r0, #1
     24e:	4770      	bx	lr

00000250 <newdigate::ResamplingArrayReader::~ResamplingArrayReader()>:
      if (isEncoder4Defined)
        encoders[3].write(SMP.seekEnd * 4);
    }

    previewSample.close();
    displaySample(SMP.smplen);
     250:	4770      	bx	lr

00000252 <newdigate::ResamplingArrayReader::getSourceBufferValue(long)>:
     252:	6d43      	ldr	r3, [r0, #84]	; 0x54
    virtual ~ResamplingArrayReader() {
    }

    int16_t getSourceBufferValue(long index) override {
        return _sourceBuffer[index];
    }
     254:	f933 0011 	ldrsh.w	r0, [r3, r1, lsl #1]
     258:	4770      	bx	lr

0000025a <newdigate::ResamplingArrayReader::createSourceBuffer()>:
        return _playing;
    }

    int16_t* createSourceBuffer() override {
        return _sourceBuffer;
    }
     25a:	6d40      	ldr	r0, [r0, #84]	; 0x54
     25c:	4770      	bx	lr
	...

00000260 <newdigate::ResamplingArrayReader::open(char*)>:
	constexpr Print() : write_error(0) {}
     260:	2200      	movs	r2, #0
     262:	6042      	str	r2, [r0, #4]
enum LookaheadMode {SKIP_ALL, SKIP_NONE, SKIP_WHITESPACE};

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     268:	6081      	str	r1, [r0, #8]
     26a:	7302      	strb	r2, [r0, #12]
	constexpr File() : f(nullptr) { }
     26c:	4901      	ldr	r1, [pc, #4]	; (274 <newdigate::ResamplingArrayReader::open(char*)+0x14>)
     26e:	6001      	str	r1, [r0, #0]
     270:	6102      	str	r2, [r0, #16]
        }
    }

    File open(char *filename) override {
        return File();
    }
     272:	4770      	bx	lr
     274:	20002750 	.word	0x20002750

00000278 <AudioPlayArrayResmp::~AudioPlayArrayResmp()>:
    {
        reader = new newdigate::ResamplingArrayReader();
        begin();
    }

    virtual ~AudioPlayArrayResmp() {
     278:	b510      	push	{r4, lr}
     27a:	4604      	mov	r4, r0
     27c:	4b04      	ldr	r3, [pc, #16]	; (290 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x18>)
     27e:	6003      	str	r3, [r0, #0]
        delete reader;
     280:	6980      	ldr	r0, [r0, #24]
     282:	b110      	cbz	r0, 28a <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x12>
     284:	6803      	ldr	r3, [r0, #0]
     286:	685b      	ldr	r3, [r3, #4]
     288:	4798      	blx	r3
    }
     28a:	4620      	mov	r0, r4
     28c:	bd10      	pop	{r4, pc}
     28e:	bf00      	nop
     290:	2000269c 	.word	0x2000269c

00000294 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     294:	6c83      	ldr	r3, [r0, #72]	; 0x48
     296:	b153      	cbz	r3, 2ae <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     298:	781a      	ldrb	r2, [r3, #0]
     29a:	f012 0f08 	tst.w	r2, #8
     29e:	d020      	beq.n	2e2 <StreamFile<FsBaseFile, unsigned long long>::available()+0x4e>
     2a0:	69d8      	ldr	r0, [r3, #28]
     2a2:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     2a4:	1ac0      	subs	r0, r0, r3
     2a6:	bf48      	it	mi
     2a8:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     2ac:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     2ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
     2b0:	b1cb      	cbz	r3, 2e6 <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     2b2:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     2b6:	f012 0f08 	tst.w	r2, #8
     2ba:	d016      	beq.n	2ea <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     2bc:	b410      	push	{r4}
     2be:	691a      	ldr	r2, [r3, #16]
     2c0:	6959      	ldr	r1, [r3, #20]
     2c2:	6818      	ldr	r0, [r3, #0]
     2c4:	685c      	ldr	r4, [r3, #4]
     2c6:	1a13      	subs	r3, r2, r0
     2c8:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     2cc:	4618      	mov	r0, r3
     2ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     2d2:	f172 0200 	sbcs.w	r2, r2, #0
     2d6:	d301      	bcc.n	2dc <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
     2d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    return BaseFile::available();
  }
     2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
     2e0:	4770      	bx	lr
     2e2:	2000      	movs	r0, #0
     2e4:	4770      	bx	lr
     2e6:	2000      	movs	r0, #0
    return BaseFile::available();
     2e8:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     2ea:	2300      	movs	r3, #0
     2ec:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     2ee:	4618      	mov	r0, r3
     2f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     2f4:	f172 0200 	sbcs.w	r2, r2, #0
     2f8:	bf28      	it	cs
     2fa:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
  }
     2fe:	4770      	bx	lr

00000300 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
     300:	b508      	push	{r3, lr}
            { return (*static_cast<C*>(storage_ptr))(
     302:	6803      	ldr	r3, [r0, #0]
     304:	4798      	blx	r3
        invoke_ptr{ [](storage_ptr_t storage_ptr, Args&&... args) -> R
     306:	bd08      	pop	{r3, pc}

00000308 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
            { ::new (dst_ptr) C{ (*static_cast<C*>(src_ptr)) }; }
     308:	680b      	ldr	r3, [r1, #0]
     30a:	6003      	str	r3, [r0, #0]
        copy_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
     30c:	4770      	bx	lr

0000030e <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
                ::new (dst_ptr) C{ std::move(*static_cast<C*>(src_ptr)) };
     30e:	680b      	ldr	r3, [r1, #0]
     310:	6003      	str	r3, [r0, #0]
        relocate_ptr{ [](storage_ptr_t dst_ptr, storage_ptr_t src_ptr) -> void
     312:	4770      	bx	lr

00000314 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t src_ptr) -> void
     314:	4770      	bx	lr

00000316 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
     316:	2a01      	cmp	r2, #1
     318:	d102      	bne.n	320 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
     31a:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
     31c:	2000      	movs	r0, #0
     31e:	4770      	bx	lr
	  switch (__op)
     320:	2a02      	cmp	r2, #2
     322:	d8fb      	bhi.n	31c <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>
     324:	e8df f002 	tbb	[pc, r2]
     328:	0502      	.short	0x0502
     32a:	07          	.byte	0x07
     32b:	00          	.byte	0x00
	      __dest._M_access<const type_info*>() = nullptr;
     32c:	2300      	movs	r3, #0
     32e:	6003      	str	r3, [r0, #0]
	      break;
     330:	e7f4      	b.n	31c <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
     332:	6001      	str	r1, [r0, #0]
	      break;
     334:	e7f2      	b.n	31c <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
     336:	680b      	ldr	r3, [r1, #0]
     338:	6003      	str	r3, [r0, #0]
	  }
     33a:	e7ef      	b.n	31c <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>

0000033c <CWS2812SerialController<17, (EOrder)129>::init()>:
    }

public:
    CWS2812SerialController() { pserial = NULL; }

    virtual void init() { /* do nothing yet */ }
     33c:	4770      	bx	lr

0000033e <CPixelLEDController<(EOrder)129, 8, 255ul>::lanes()>:
    /// @param pixels the PixelController object for the LED data
    virtual void showPixels(PixelController<RGB_ORDER,LANES,MASK> & pixels) = 0;

    /// Get the number of lanes of the Controller
    /// @returns LANES from template
    int lanes() override { return LANES; }
     33e:	2008      	movs	r0, #8
     340:	4770      	bx	lr

00000342 <Mode::~Mode()>:
struct Mode {
     342:	b510      	push	{r4, lr}
     344:	4604      	mov	r4, r0
     346:	f016 f9bd 	bl	166c4 <String::~String()>
     34a:	4620      	mov	r0, r4
     34c:	bd10      	pop	{r4, pc}
	...

00000350 <__tcf_0>:

const String usedFiles[13] = { "samples/_1.wav",
     350:	b538      	push	{r3, r4, r5, lr}
     352:	4c05      	ldr	r4, [pc, #20]	; (368 <__tcf_0+0x18>)
     354:	f1a4 059c 	sub.w	r5, r4, #156	; 0x9c
     358:	3c0c      	subs	r4, #12
     35a:	4620      	mov	r0, r4
     35c:	f016 f9b2 	bl	166c4 <String::~String()>
     360:	42ac      	cmp	r4, r5
     362:	d1f9      	bne.n	358 <__tcf_0+0x8>
     364:	bd38      	pop	{r3, r4, r5, pc}
     366:	bf00      	nop
     368:	20006d3c 	.word	0x20006d3c

0000036c <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)>:

    virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     36e:	4605      	mov	r5, r0
     370:	460c      	mov	r4, r1
        if (pserial == NULL) {
     372:	69c3      	ldr	r3, [r0, #28]
     374:	b12b      	cbz	r3, 382 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x16>
        _init(pixels.size());

        uint8_t *p = drawbuffer;
     376:	6a2a      	ldr	r2, [r5, #32]

        while(pixels.has(1)) {
     378:	68a3      	ldr	r3, [r4, #8]
     37a:	2b00      	cmp	r3, #0
     37c:	dd6b      	ble.n	456 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xea>
     37e:	3203      	adds	r2, #3
     380:	e03d      	b.n	3fe <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x92>
        }
    }

    /// Get the length of the LED strip
    /// @returns PixelController::mLen
    FASTLED_FORCE_INLINE int size() { return mLen; }
     382:	684e      	ldr	r6, [r1, #4]
            drawbuffer = (uint8_t*)malloc(nLeds * 3);
     384:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     388:	4638      	mov	r0, r7
     38a:	f021 fca5 	bl	21cd8 <malloc>
     38e:	6228      	str	r0, [r5, #32]
            framebuffer = (uint8_t*)malloc(nLeds * 12);
     390:	00b8      	lsls	r0, r7, #2
     392:	f021 fca1 	bl	21cd8 <malloc>
     396:	6268      	str	r0, [r5, #36]	; 0x24
            pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     398:	201c      	movs	r0, #28
     39a:	f017 f843 	bl	17424 <operator new(unsigned int)>
     39e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
     3a0:	6a29      	ldr	r1, [r5, #32]
     3a2:	8006      	strh	r6, [r0, #0]


class WS2812Serial {
public:
	constexpr WS2812Serial(uint16_t num, void *fb, void *db, uint8_t pin, uint8_t cfg) :
		numled(num), pin(pin), config(cfg),
     3a4:	2211      	movs	r2, #17
     3a6:	7082      	strb	r2, [r0, #2]
     3a8:	2200      	movs	r2, #0
     3aa:	70c2      	strb	r2, [r0, #3]
		frameBuffer((uint8_t *)fb), drawBuffer((uint8_t *)db) {
     3ac:	6047      	str	r7, [r0, #4]
     3ae:	6081      	str	r1, [r0, #8]
     3b0:	60c2      	str	r2, [r0, #12]
     3b2:	6102      	str	r2, [r0, #16]
     3b4:	21ff      	movs	r1, #255	; 0xff
     3b6:	7501      	strb	r1, [r0, #20]
     3b8:	6182      	str	r2, [r0, #24]
     3ba:	61e8      	str	r0, [r5, #28]
            pserial->begin();
     3bc:	f00b f992 	bl	b6e4 <WS2812Serial::begin()>
     3c0:	e7d9      	b.n	376 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xa>
/// @returns scaled value
/// @note Takes 4 clocks on AVR with MUL, 2 clocks on ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8(uint8_t i, fract8 scale) {
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1 + (uint16_t)(scale))) >> 8;
     3c2:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
     3c6:	fb00 3303 	mla	r3, r0, r3, r3
     3ca:	121b      	asrs	r3, r3, #8
     3cc:	f801 3c01 	strb.w	r3, [r1, #-1]
    /// Step the dithering forward
    /// @note If updating here, be sure to update the asm version in clockless_trinket.h!
    FASTLED_FORCE_INLINE void stepDithering() {
            // IF UPDATING HERE, BE SURE TO UPDATE THE ASM VERSION IN
            // clockless_trinket.h!
            d[0] = e[0] - d[0];
     3d0:	7be3      	ldrb	r3, [r4, #15]
     3d2:	7b21      	ldrb	r1, [r4, #12]
     3d4:	1a5b      	subs	r3, r3, r1
     3d6:	7323      	strb	r3, [r4, #12]
            d[1] = e[1] - d[1];
     3d8:	7c23      	ldrb	r3, [r4, #16]
     3da:	7b61      	ldrb	r1, [r4, #13]
     3dc:	1a5b      	subs	r3, r3, r1
     3de:	7363      	strb	r3, [r4, #13]
            d[2] = e[2] - d[2];
     3e0:	7c63      	ldrb	r3, [r4, #17]
     3e2:	7ba1      	ldrb	r1, [r4, #14]
     3e4:	1a5b      	subs	r3, r3, r1
     3e6:	73a3      	strb	r3, [r4, #14]
    FASTLED_FORCE_INLINE void advanceData() { mData += mAdvance; --mLenRemaining;}
     3e8:	f994 1012 	ldrsb.w	r1, [r4, #18]
     3ec:	6823      	ldr	r3, [r4, #0]
     3ee:	440b      	add	r3, r1
     3f0:	6023      	str	r3, [r4, #0]
     3f2:	68a3      	ldr	r3, [r4, #8]
     3f4:	3b01      	subs	r3, #1
     3f6:	60a3      	str	r3, [r4, #8]
        while(pixels.has(1)) {
     3f8:	3203      	adds	r2, #3
     3fa:	2b00      	cmp	r3, #0
     3fc:	dd2b      	ble.n	456 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xea>
    /// @{
    
    /// Read a byte of LED data
    /// @tparam SLOT The data slot in the output stream. This is used to select which byte of the output stream is being processed.
    /// @param pc reference to the pixel controller
    template<int SLOT>  FASTLED_FORCE_INLINE static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     3fe:	6823      	ldr	r3, [r4, #0]
     400:	789b      	ldrb	r3, [r3, #2]
    /// Calculate a dither value using the per-channel dither data
    /// @tparam SLOT The data slot in the output stream. This is used to select which byte of the output stream is being processed.
    /// @param pc reference to the pixel controller
    /// @param b the color byte to dither
    /// @see PixelController::d
    template<int SLOT>  FASTLED_FORCE_INLINE static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     402:	b12b      	cbz	r3, 410 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xa4>
/// @param i first byte to add
/// @param j second byte to add
/// @returns the sum of i + j, capped at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8(uint8_t i, uint8_t j) {
#if QADD8_C == 1
    unsigned int t = i + j;
     404:	7ba1      	ldrb	r1, [r4, #14]
     406:	440b      	add	r3, r1
    if (t > 255)
        t = 255;
    return t;
     408:	2bff      	cmp	r3, #255	; 0xff
     40a:	bf28      	it	cs
     40c:	23ff      	movcs	r3, #255	; 0xff
     40e:	b2db      	uxtb	r3, r3
     410:	4611      	mov	r1, r2
     412:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
     416:	fb00 3303 	mla	r3, r0, r3, r3
     41a:	121b      	asrs	r3, r3, #8
     41c:	f802 3c03 	strb.w	r3, [r2, #-3]
    template<int SLOT>  FASTLED_FORCE_INLINE static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     420:	6823      	ldr	r3, [r4, #0]
     422:	781b      	ldrb	r3, [r3, #0]
    template<int SLOT>  FASTLED_FORCE_INLINE static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     424:	b12b      	cbz	r3, 432 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xc6>
    unsigned int t = i + j;
     426:	7b20      	ldrb	r0, [r4, #12]
     428:	4403      	add	r3, r0
    return t;
     42a:	2bff      	cmp	r3, #255	; 0xff
     42c:	bf28      	it	cs
     42e:	23ff      	movcs	r3, #255	; 0xff
     430:	b2db      	uxtb	r3, r3
     432:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
     436:	fb00 3303 	mla	r3, r0, r3, r3
     43a:	121b      	asrs	r3, r3, #8
     43c:	f801 3c02 	strb.w	r3, [r1, #-2]
    template<int SLOT>  FASTLED_FORCE_INLINE static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     440:	6823      	ldr	r3, [r4, #0]
     442:	785b      	ldrb	r3, [r3, #1]
    template<int SLOT>  FASTLED_FORCE_INLINE static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     444:	2b00      	cmp	r3, #0
     446:	d0bc      	beq.n	3c2 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x56>
    unsigned int t = i + j;
     448:	7b60      	ldrb	r0, [r4, #13]
     44a:	4403      	add	r3, r0
    return t;
     44c:	2bff      	cmp	r3, #255	; 0xff
     44e:	bf28      	it	cs
     450:	23ff      	movcs	r3, #255	; 0xff
     452:	b2db      	uxtb	r3, r3
     454:	e7b5      	b.n	3c2 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x56>
            *p++ = pixels.loadAndScale1();
            *p++ = pixels.loadAndScale2();
            pixels.stepDithering();
            pixels.advanceData();
        }
        pserial->show();
     456:	69e8      	ldr	r0, [r5, #28]
     458:	f00b fa48 	bl	b8ec <WS2812Serial::show()>
    }
     45c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000045e <CLEDController::clearLeds(int)>:
    VIRTUAL_IF_NOT_AVR void clearLeds(int nLeds = -1) {
     45e:	b510      	push	{r4, lr}
     460:	4604      	mov	r4, r0
        clearLedDataInternal(nLeds);
     462:	f00b fe61 	bl	c128 <CLEDController::clearLedDataInternal(int)>
        showLeds(0);
     466:	6823      	ldr	r3, [r4, #0]
     468:	699b      	ldr	r3, [r3, #24]
     46a:	2100      	movs	r1, #0
     46c:	4620      	mov	r0, r4
     46e:	4798      	blx	r3
    }
     470:	bd10      	pop	{r4, pc}
	...

00000474 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)>:
    virtual void show(const struct CRGB *data, int nLeds, uint8_t brightness) override {
     474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     478:	b094      	sub	sp, #80	; 0x50
     47a:	4604      	mov	r4, r0
     47c:	460e      	mov	r6, r1
     47e:	4615      	mov	r5, r2
        ColorAdjustment color_adjustment = getAdjustmentData(brightness);
     480:	af12      	add	r7, sp, #72	; 0x48
     482:	461a      	mov	r2, r3
     484:	4601      	mov	r1, r0
     486:	4638      	mov	r0, r7
     488:	f00b fe5f 	bl	c14a <CLEDController::getAdjustmentData(unsigned char)>
        PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds < 0 ? -nLeds : nLeds, color_adjustment, getDither());
     48c:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
     490:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
    inline uint8_t getDither() { return m_DitherMode; }
     494:	f894 c012 	ldrb.w	ip, [r4, #18]
     498:	e897 0003 	ldmia.w	r7, {r0, r1}
     49c:	9001      	str	r0, [sp, #4]
     49e:	f8ad 1008 	strh.w	r1, [sp, #8]
     4a2:	0c09      	lsrs	r1, r1, #16
     4a4:	f88d 100a 	strb.w	r1, [sp, #10]
                : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mColorAdjustment(color_adjustment) {
     4a8:	9603      	str	r6, [sp, #12]
     4aa:	9304      	str	r3, [sp, #16]
     4ac:	9305      	str	r3, [sp, #20]
     4ae:	aa01      	add	r2, sp, #4
     4b0:	e892 0003 	ldmia.w	r2, {r0, r1}
     4b4:	9010      	str	r0, [sp, #64]	; 0x40
     4b6:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
     4ba:	0c09      	lsrs	r1, r1, #16
     4bc:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
        switch(dither) {
     4c0:	f1bc 0f01 	cmp.w	ip, #1
     4c4:	d02a      	beq.n	51c <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0xa8>
            default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     4c6:	2200      	movs	r2, #0
     4c8:	f88d 201d 	strb.w	r2, [sp, #29]
     4cc:	f88d 201c 	strb.w	r2, [sp, #28]
     4d0:	f88d 201b 	strb.w	r2, [sp, #27]
     4d4:	f88d 201a 	strb.w	r2, [sp, #26]
     4d8:	f88d 2019 	strb.w	r2, [sp, #25]
     4dc:	f88d 2018 	strb.w	r2, [sp, #24]
        mAdvance = 3;
     4e0:	2203      	movs	r2, #3
     4e2:	f88d 201e 	strb.w	r2, [sp, #30]
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     4e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
            mOffsets[i] = nOffset;
     4ea:	2200      	movs	r2, #0
     4ec:	9208      	str	r2, [sp, #32]
     4ee:	9309      	str	r3, [sp, #36]	; 0x24
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     4f0:	0059      	lsls	r1, r3, #1
            mOffsets[i] = nOffset;
     4f2:	910a      	str	r1, [sp, #40]	; 0x28
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     4f4:	4419      	add	r1, r3
            mOffsets[i] = nOffset;
     4f6:	910b      	str	r1, [sp, #44]	; 0x2c
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     4f8:	4419      	add	r1, r3
            mOffsets[i] = nOffset;
     4fa:	910c      	str	r1, [sp, #48]	; 0x30
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     4fc:	4419      	add	r1, r3
            mOffsets[i] = nOffset;
     4fe:	910d      	str	r1, [sp, #52]	; 0x34
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     500:	4419      	add	r1, r3
            mOffsets[i] = nOffset;
     502:	910e      	str	r1, [sp, #56]	; 0x38
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     504:	440b      	add	r3, r1
            mOffsets[i] = nOffset;
     506:	930f      	str	r3, [sp, #60]	; 0x3c
        if(nLeds < 0) {
     508:	4295      	cmp	r5, r2
     50a:	db43      	blt.n	594 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0x120>
        showPixels(pixels);
     50c:	6823      	ldr	r3, [r4, #0]
     50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     510:	a903      	add	r1, sp, #12
     512:	4620      	mov	r0, r4
     514:	4798      	blx	r3
    }
     516:	b014      	add	sp, #80	; 0x50
     518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ++R;
     51c:	4922      	ldr	r1, [pc, #136]	; (5a8 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0x134>)
     51e:	780a      	ldrb	r2, [r1, #0]
     520:	3201      	adds	r2, #1
        R &= (0x01 << ditherBits) - 1;
     522:	f002 0207 	and.w	r2, r2, #7
     526:	700a      	strb	r2, [r1, #0]
            if(R & 0x01) { Q |= 0x80; }
     528:	f002 0001 	and.w	r0, r2, #1
     52c:	01c0      	lsls	r0, r0, #7
            if(R & 0x02) { Q |= 0x40; }
     52e:	f012 0f02 	tst.w	r2, #2
     532:	bf18      	it	ne
     534:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
            if(R & 0x04) { Q |= 0x20; }
     538:	f012 0f04 	tst.w	r2, #4
     53c:	bf18      	it	ne
     53e:	f040 0020 	orrne.w	r0, r0, #32
            Q += 0x01 << (7 - ditherBits);
     542:	3010      	adds	r0, #16
     544:	b2c0      	uxtb	r0, r0
        for(int i = 0; i < 3; ++i) {
     546:	aa06      	add	r2, sp, #24
     548:	f10d 0e1b 	add.w	lr, sp, #27
                e[i] = s ? (256/s) + 1 : 0;
     54c:	f04f 0c00 	mov.w	ip, #0
     550:	f44f 7880 	mov.w	r8, #256	; 0x100
     554:	e006      	b.n	564 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0xf0>
                d[i] = scale8(Q, e[i]);
     556:	f882 c000 	strb.w	ip, [r2]
     55a:	e018      	b.n	58e <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0x11a>
                if(e[i]) --e[i];
     55c:	70f9      	strb	r1, [r7, #3]
        for(int i = 0; i < 3; ++i) {
     55e:	3201      	adds	r2, #1
     560:	4572      	cmp	r2, lr
     562:	d0bd      	beq.n	4e0 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0x6c>
     564:	4617      	mov	r7, r2
                uint8_t s = mColorAdjustment.premixed.raw[i];
     566:	f892 1028 	ldrb.w	r1, [r2, #40]	; 0x28
                e[i] = s ? (256/s) + 1 : 0;
     56a:	b1b9      	cbz	r1, 59c <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0x128>
     56c:	fb98 f1f1 	sdiv	r1, r8, r1
     570:	b2c9      	uxtb	r1, r1
     572:	1c4e      	adds	r6, r1, #1
     574:	b2f6      	uxtb	r6, r6
     576:	70d6      	strb	r6, [r2, #3]
     578:	fb06 0a00 	mla	sl, r6, r0, r0
     57c:	f3ca 2907 	ubfx	r9, sl, #8, #8
                if(d[i]) (--d[i]);
     580:	f41a 4f7f 	tst.w	sl, #65280	; 0xff00
     584:	d0e7      	beq.n	556 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0xe2>
     586:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
     58a:	f882 9000 	strb.w	r9, [r2]
                if(e[i]) --e[i];
     58e:	2e00      	cmp	r6, #0
     590:	d1e4      	bne.n	55c <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0xe8>
     592:	e7e4      	b.n	55e <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0xea>
            pixels.mAdvance = -pixels.mAdvance;
     594:	23fd      	movs	r3, #253	; 0xfd
     596:	f88d 301e 	strb.w	r3, [sp, #30]
     59a:	e7b7      	b.n	50c <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0x98>
                e[i] = s ? (256/s) + 1 : 0;
     59c:	f882 c003 	strb.w	ip, [r2, #3]
                d[i] = scale8(Q, e[i]);
     5a0:	f882 c000 	strb.w	ip, [r2]
     5a4:	e7db      	b.n	55e <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, unsigned char)+0xea>
     5a6:	bf00      	nop
     5a8:	20008c25 	.word	0x20008c25

000005ac <CWS2812SerialController<17, (EOrder)129>::~CWS2812SerialController()>:
class CWS2812SerialController : public CPixelLEDController<RGB_ORDER, 8, 0xFF> {
     5ac:	b510      	push	{r4, lr}
     5ae:	4604      	mov	r4, r0
template<EOrder RGB_ORDER, int LANES=1, uint32_t MASK=0xFFFFFFFF> class CPixelLEDController : public CLEDController {
     5b0:	4b02      	ldr	r3, [pc, #8]	; (5bc <CWS2812SerialController<17, (EOrder)129>::~CWS2812SerialController()+0x10>)
     5b2:	6003      	str	r3, [r0, #0]
     5b4:	f00b fd8c 	bl	c0d0 <CLEDController::~CLEDController()>
     5b8:	4620      	mov	r0, r4
     5ba:	bd10      	pop	{r4, pc}
     5bc:	200026b0 	.word	0x200026b0

000005c0 <newdigate::ResamplingArrayReader::~ResamplingArrayReader()>:
    virtual ~ResamplingArrayReader() {
     5c0:	b510      	push	{r4, lr}
     5c2:	4604      	mov	r4, r0
    }
     5c4:	2168      	movs	r1, #104	; 0x68
     5c6:	f016 ff3d 	bl	17444 <operator delete(void*, unsigned int)>
     5ca:	4620      	mov	r0, r4
     5cc:	bd10      	pop	{r4, pc}
	...

000005d0 <CWS2812SerialController<17, (EOrder)129>::~CWS2812SerialController()>:
     5d0:	b510      	push	{r4, lr}
     5d2:	4604      	mov	r4, r0
     5d4:	4b04      	ldr	r3, [pc, #16]	; (5e8 <CWS2812SerialController<17, (EOrder)129>::~CWS2812SerialController()+0x18>)
     5d6:	6003      	str	r3, [r0, #0]
     5d8:	f00b fd7a 	bl	c0d0 <CLEDController::~CLEDController()>
     5dc:	2128      	movs	r1, #40	; 0x28
     5de:	4620      	mov	r0, r4
     5e0:	f016 ff30 	bl	17444 <operator delete(void*, unsigned int)>
     5e4:	4620      	mov	r0, r4
     5e6:	bd10      	pop	{r4, pc}
     5e8:	200026b0 	.word	0x200026b0

000005ec <IntervalTimer::~IntervalTimer()>:
	~IntervalTimer() {
     5ec:	b510      	push	{r4, lr}
     5ee:	4604      	mov	r4, r0
		end();
     5f0:	f015 fd5e 	bl	160b0 <IntervalTimer::end()>
	}
     5f4:	4620      	mov	r0, r4
     5f6:	bd10      	pop	{r4, pc}

000005f8 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     5f8:	798a      	ldrb	r2, [r1, #6]
     5fa:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     5fe:	f013 0f80 	tst.w	r3, #128	; 0x80
     602:	d120      	bne.n	646 <SDFile::setCreateTime(DateTimeFields const&)+0x4e>
	virtual bool setCreateTime(const DateTimeFields &tm) {
     604:	b5f0      	push	{r4, r5, r6, r7, lr}
     606:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     608:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     60c:	794b      	ldrb	r3, [r1, #5]
     60e:	3301      	adds	r3, #1
     610:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     612:	790d      	ldrb	r5, [r1, #4]
     614:	788e      	ldrb	r6, [r1, #2]
     616:	784f      	ldrb	r7, [r1, #1]
     618:	7809      	ldrb	r1, [r1, #0]
   *
   * \return true for success or false for failure.
   */
  bool timestamp(uint8_t flags, uint16_t year, uint8_t month, uint8_t day,
                 uint8_t hour, uint8_t minute, uint8_t second) {
    return m_fFile ?
     61a:	6d04      	ldr	r4, [r0, #80]	; 0x50
     61c:	b14c      	cbz	r4, 632 <SDFile::setCreateTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     61e:	9103      	str	r1, [sp, #12]
     620:	9702      	str	r7, [sp, #8]
     622:	9601      	str	r6, [sp, #4]
     624:	9500      	str	r5, [sp, #0]
     626:	2102      	movs	r1, #2
     628:	4620      	mov	r0, r4
     62a:	f010 fed3 	bl	113d4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     62e:	b005      	add	sp, #20
     630:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     632:	6d40      	ldr	r0, [r0, #84]	; 0x54
     634:	b148      	cbz	r0, 64a <SDFile::setCreateTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     636:	9103      	str	r1, [sp, #12]
     638:	9702      	str	r7, [sp, #8]
     63a:	9601      	str	r6, [sp, #4]
     63c:	9500      	str	r5, [sp, #0]
     63e:	2102      	movs	r1, #2
     640:	f00e ffed 	bl	f61e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     644:	e7f3      	b.n	62e <SDFile::setCreateTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     646:	2000      	movs	r0, #0
	}
     648:	4770      	bx	lr
           m_xFile ?
     64a:	2000      	movs	r0, #0
     64c:	e7ef      	b.n	62e <SDFile::setCreateTime(DateTimeFields const&)+0x36>

0000064e <SDFile::getModifyTime(DateTimeFields&)>:
	virtual bool getModifyTime(DateTimeFields &tm) {
     64e:	b510      	push	{r4, lr}
     650:	b082      	sub	sp, #8
     652:	4603      	mov	r3, r0
     654:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     656:	6d00      	ldr	r0, [r0, #80]	; 0x50
     658:	b310      	cbz	r0, 6a0 <SDFile::getModifyTime(DateTimeFields&)+0x52>
     65a:	aa01      	add	r2, sp, #4
     65c:	f10d 0106 	add.w	r1, sp, #6
     660:	f010 fc92 	bl	10f88 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     664:	b1d0      	cbz	r0, 69c <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     666:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     66a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     66e:	ea53 0102 	orrs.w	r1, r3, r2
     672:	d01f      	beq.n	6b4 <SDFile::getModifyTime(DateTimeFields&)+0x66>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     674:	f002 011f 	and.w	r1, r2, #31
     678:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     67a:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     67c:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     680:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     682:	0ad2      	lsrs	r2, r2, #11
     684:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     686:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     68a:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     68c:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     690:	3a01      	subs	r2, #1
     692:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     694:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     696:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     69a:	71a3      	strb	r3, [r4, #6]
	}
     69c:	b002      	add	sp, #8
     69e:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     6a0:	6d58      	ldr	r0, [r3, #84]	; 0x54
     6a2:	b128      	cbz	r0, 6b0 <SDFile::getModifyTime(DateTimeFields&)+0x62>
     6a4:	aa01      	add	r2, sp, #4
     6a6:	f10d 0106 	add.w	r1, sp, #6
     6aa:	f00e f861 	bl	e770 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     6ae:	e7d9      	b.n	664 <SDFile::getModifyTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     6b0:	2000      	movs	r0, #0
     6b2:	e7f3      	b.n	69c <SDFile::getModifyTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     6b4:	2000      	movs	r0, #0
     6b6:	e7f1      	b.n	69c <SDFile::getModifyTime(DateTimeFields&)+0x4e>

000006b8 <SDFile::getCreateTime(DateTimeFields&)>:
	virtual bool getCreateTime(DateTimeFields &tm) {
     6b8:	b510      	push	{r4, lr}
     6ba:	b082      	sub	sp, #8
     6bc:	4603      	mov	r3, r0
     6be:	460c      	mov	r4, r1
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     6c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
     6c2:	b310      	cbz	r0, 70a <SDFile::getCreateTime(DateTimeFields&)+0x52>
     6c4:	aa01      	add	r2, sp, #4
     6c6:	f10d 0106 	add.w	r1, sp, #6
     6ca:	f010 fc4d 	bl	10f68 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     6ce:	b1d0      	cbz	r0, 706 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     6d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     6d4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     6d8:	ea53 0102 	orrs.w	r1, r3, r2
     6dc:	d01f      	beq.n	71e <SDFile::getCreateTime(DateTimeFields&)+0x66>
  return 2*(fatTime & 0X1F);
     6de:	f002 011f 	and.w	r1, r2, #31
     6e2:	0049      	lsls	r1, r1, #1
		tm.sec = FS_SECOND(fat_time);
     6e4:	7021      	strb	r1, [r4, #0]
  return (fatTime >> 5) & 0X3F;
     6e6:	f3c2 1145 	ubfx	r1, r2, #5, #6
		tm.min = FS_MINUTE(fat_time);
     6ea:	7061      	strb	r1, [r4, #1]
  return fatTime >> 11;
     6ec:	0ad2      	lsrs	r2, r2, #11
     6ee:	70a2      	strb	r2, [r4, #2]
  return fatDate & 0X1F;
     6f0:	f003 021f 	and.w	r2, r3, #31
		tm.mday = FS_DAY(fat_date);
     6f4:	7122      	strb	r2, [r4, #4]
  return (fatDate >> 5) & 0XF;
     6f6:	f3c3 1243 	ubfx	r2, r3, #5, #4
		tm.mon = FS_MONTH(fat_date) - 1;
     6fa:	3a01      	subs	r2, #1
     6fc:	7162      	strb	r2, [r4, #5]
  return 1980 + (fatDate >> 9);
     6fe:	0a5b      	lsrs	r3, r3, #9
		tm.year = FS_YEAR(fat_date) - 1900;
     700:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
     704:	71a3      	strb	r3, [r4, #6]
	}
     706:	b002      	add	sp, #8
     708:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     70a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     70c:	b128      	cbz	r0, 71a <SDFile::getCreateTime(DateTimeFields&)+0x62>
     70e:	aa01      	add	r2, sp, #4
     710:	f10d 0106 	add.w	r1, sp, #6
     714:	f00e f81a 	bl	e74c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     718:	e7d9      	b.n	6ce <SDFile::getCreateTime(DateTimeFields&)+0x16>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     71a:	2000      	movs	r0, #0
     71c:	e7f3      	b.n	706 <SDFile::getCreateTime(DateTimeFields&)+0x4e>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     71e:	2000      	movs	r0, #0
     720:	e7f1      	b.n	706 <SDFile::getCreateTime(DateTimeFields&)+0x4e>

00000722 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     722:	b510      	push	{r4, lr}
     724:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     726:	6d00      	ldr	r0, [r0, #80]	; 0x50
     728:	b120      	cbz	r0, 734 <SDFile::rewindDirectory()+0x12>
  int read() {
    return BaseFile::read();
  }
  /** Rewind a file if it is a directory */
  void rewindDirectory() {
    if (BaseFile::isDir()) {
     72a:	7803      	ldrb	r3, [r0, #0]
     72c:	f013 0f70 	tst.w	r3, #112	; 0x70
     730:	d10e      	bne.n	750 <SDFile::rewindDirectory()+0x2e>
	}
     732:	bd10      	pop	{r4, pc}
           m_xFile ? m_xFile->isDir() : false;
     734:	6d63      	ldr	r3, [r4, #84]	; 0x54
     736:	2b00      	cmp	r3, #0
     738:	d0fb      	beq.n	732 <SDFile::rewindDirectory()+0x10>
     73a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     73e:	f013 0f50 	tst.w	r3, #80	; 0x50
     742:	d0f6      	beq.n	732 <SDFile::rewindDirectory()+0x10>
    if (m_xFile) m_xFile->rewind();
     744:	6d60      	ldr	r0, [r4, #84]	; 0x54
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     746:	2200      	movs	r2, #0
     748:	2300      	movs	r3, #0
     74a:	f00e f96c 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
     74e:	e7f0      	b.n	732 <SDFile::rewindDirectory()+0x10>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     750:	2100      	movs	r1, #0
     752:	f010 f9d1 	bl	10af8 <FatFile::seekSet(unsigned long)>
     756:	6d60      	ldr	r0, [r4, #84]	; 0x54
     758:	2800      	cmp	r0, #0
     75a:	d0ea      	beq.n	732 <SDFile::rewindDirectory()+0x10>
     75c:	e7f3      	b.n	746 <SDFile::rewindDirectory()+0x24>

0000075e <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  int peek() {
     75e:	b508      	push	{r3, lr}
     760:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     762:	6c80      	ldr	r0, [r0, #72]	; 0x48
     764:	b110      	cbz	r0, 76c <StreamFile<FsBaseFile, unsigned long long>::peek()+0xe>
     766:	f010 f991 	bl	10a8c <FatFile::peek()>
  }
     76a:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     76c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     76e:	b110      	cbz	r0, 776 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x18>
     770:	f00e f943 	bl	e9fa <ExFatFile::peek()>
     774:	e7f9      	b.n	76a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>
     776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::peek();
     77a:	e7f6      	b.n	76a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xc>

0000077c <StreamFile<FsBaseFile, unsigned long long>::read()>:
  int read() {
     77c:	b500      	push	{lr}
     77e:	b083      	sub	sp, #12
     780:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     782:	6c80      	ldr	r0, [r0, #72]	; 0x48
     784:	b158      	cbz	r0, 79e <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     786:	2201      	movs	r2, #1
     788:	f10d 0107 	add.w	r1, sp, #7
     78c:	f010 f8a9 	bl	108e2 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     790:	2801      	cmp	r0, #1
     792:	d10f      	bne.n	7b4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x38>
     794:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     798:	b003      	add	sp, #12
     79a:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->read(buf, count) : -1;
     79e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     7a0:	b128      	cbz	r0, 7ae <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     7a2:	2201      	movs	r2, #1
     7a4:	f10d 0107 	add.w	r1, sp, #7
     7a8:	f00e f85c 	bl	e864 <ExFatFile::read(void*, unsigned int)>
     7ac:	e7f0      	b.n	790 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     7ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7b2:	e7f1      	b.n	798 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>
     7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return BaseFile::read();
     7b8:	e7ee      	b.n	798 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

000007ba <StreamFile<FsBaseFile, unsigned long long>::flush()>:
  void flush() {
     7ba:	b508      	push	{r3, lr}
     7bc:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     7be:	6c80      	ldr	r0, [r0, #72]	; 0x48
     7c0:	b110      	cbz	r0, 7c8 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xe>
     7c2:	f010 fae7 	bl	10d94 <FatFile::sync()>
  }
     7c6:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     7c8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     7ca:	2800      	cmp	r0, #0
     7cc:	d0fb      	beq.n	7c6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>
     7ce:	f00e fd9f 	bl	f310 <ExFatFile::sync()>
     7d2:	e7f8      	b.n	7c6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xc>

000007d4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     7d4:	b500      	push	{lr}
     7d6:	b083      	sub	sp, #12
     7d8:	4603      	mov	r3, r0
     7da:	f88d 1007 	strb.w	r1, [sp, #7]
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     7de:	6c80      	ldr	r0, [r0, #72]	; 0x48
     7e0:	b138      	cbz	r0, 7f2 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     7e2:	2201      	movs	r2, #1
     7e4:	f10d 0107 	add.w	r1, sp, #7
     7e8:	f010 feac 	bl	11544 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     7ec:	b003      	add	sp, #12
     7ee:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xFile ? m_xFile->write(buf, count) : 0;
     7f2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     7f4:	b128      	cbz	r0, 802 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x2e>
     7f6:	2201      	movs	r2, #1
     7f8:	f10d 0107 	add.w	r1, sp, #7
     7fc:	f00f f83c 	bl	f878 <ExFatFile::write(void const*, unsigned int)>
     800:	e7f4      	b.n	7ec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     802:	2000      	movs	r0, #0
    return BaseFile::write(b);
     804:	e7f2      	b.n	7ec <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
	...

00000808 <SDFile::name()>:
	virtual const char * name() {
     808:	b510      	push	{r4, lr}
     80a:	4604      	mov	r4, r0
		if (!filename) {
     80c:	6d83      	ldr	r3, [r0, #88]	; 0x58
     80e:	b10b      	cbz	r3, 814 <SDFile::name()+0xc>
	}
     810:	6da0      	ldr	r0, [r4, #88]	; 0x58
     812:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     814:	f44f 7080 	mov.w	r0, #256	; 0x100
     818:	f021 fa5e 	bl	21cd8 <malloc>
     81c:	4601      	mov	r1, r0
     81e:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     820:	b180      	cbz	r0, 844 <SDFile::name()+0x3c>
    *name = 0;
     822:	2300      	movs	r3, #0
     824:	7003      	strb	r3, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     826:	6d20      	ldr	r0, [r4, #80]	; 0x50
     828:	b120      	cbz	r0, 834 <SDFile::name()+0x2c>
     82a:	f44f 7280 	mov.w	r2, #256	; 0x100
     82e:	f011 ff9f 	bl	12770 <FatFile::getName(char*, unsigned int)>
     832:	e7ed      	b.n	810 <SDFile::name()+0x8>
           m_xFile ? m_xFile->getName(name, len) : 0;
     834:	6d60      	ldr	r0, [r4, #84]	; 0x54
     836:	2800      	cmp	r0, #0
     838:	d0ea      	beq.n	810 <SDFile::name()+0x8>
    return getName8(name, size);
     83a:	f44f 7280 	mov.w	r2, #256	; 0x100
     83e:	f00f fcbb 	bl	101b8 <ExFatFile::getName8(char*, unsigned int)>
     842:	e7e5      	b.n	810 <SDFile::name()+0x8>
				filename = &zeroterm;
     844:	4b01      	ldr	r3, [pc, #4]	; (84c <SDFile::name()+0x44>)
     846:	65a3      	str	r3, [r4, #88]	; 0x58
     848:	e7e2      	b.n	810 <SDFile::name()+0x8>
     84a:	bf00      	nop
     84c:	20008c26 	.word	0x20008c26

00000850 <SDFile::close()>:
	virtual void close() {
     850:	b510      	push	{r4, lr}
     852:	4604      	mov	r4, r0
		if (filename) {
     854:	6d80      	ldr	r0, [r0, #88]	; 0x58
     856:	b118      	cbz	r0, 860 <SDFile::close()+0x10>
			free(filename);
     858:	f021 fa46 	bl	21ce8 <free>
			filename = nullptr;
     85c:	2300      	movs	r3, #0
     85e:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     860:	6d23      	ldr	r3, [r4, #80]	; 0x50
     862:	b123      	cbz	r3, 86e <SDFile::close()+0x1e>
			sdfatfile.close();
     864:	f104 0018 	add.w	r0, r4, #24
     868:	f012 fa9c 	bl	12da4 <FsBaseFile::close()>
	}
     86c:	bd10      	pop	{r4, pc}
     86e:	6d63      	ldr	r3, [r4, #84]	; 0x54
     870:	2b00      	cmp	r3, #0
     872:	d1f7      	bne.n	864 <SDFile::close()+0x14>
     874:	e7fa      	b.n	86c <SDFile::close()+0x1c>

00000876 <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     876:	b510      	push	{r4, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     878:	6d04      	ldr	r4, [r0, #80]	; 0x50
     87a:	b194      	cbz	r4, 8a2 <SDFile::truncate(unsigned long long)+0x2c>
     87c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     880:	4291      	cmp	r1, r2
     882:	f04f 0100 	mov.w	r1, #0
     886:	4199      	sbcs	r1, r3
     888:	d201      	bcs.n	88e <SDFile::truncate(unsigned long long)+0x18>
     88a:	2000      	movs	r0, #0
	}
     88c:	bd10      	pop	{r4, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     88e:	4611      	mov	r1, r2
     890:	4620      	mov	r0, r4
     892:	f010 f931 	bl	10af8 <FatFile::seekSet(unsigned long)>
     896:	2800      	cmp	r0, #0
     898:	d0f8      	beq.n	88c <SDFile::truncate(unsigned long long)+0x16>
     89a:	4620      	mov	r0, r4
     89c:	f010 fe18 	bl	114d0 <FatFile::truncate()>
     8a0:	e7f4      	b.n	88c <SDFile::truncate(unsigned long long)+0x16>
           m_xFile ? m_xFile->truncate(length) : false;
     8a2:	6d44      	ldr	r4, [r0, #84]	; 0x54
     8a4:	b144      	cbz	r4, 8b8 <SDFile::truncate(unsigned long long)+0x42>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     8a6:	4620      	mov	r0, r4
     8a8:	f00e f8bd 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
     8ac:	2800      	cmp	r0, #0
     8ae:	d0ed      	beq.n	88c <SDFile::truncate(unsigned long long)+0x16>
     8b0:	4620      	mov	r0, r4
     8b2:	f00e ff6e 	bl	f792 <ExFatFile::truncate()>
     8b6:	e7e9      	b.n	88c <SDFile::truncate(unsigned long long)+0x16>
     8b8:	2000      	movs	r0, #0
     8ba:	e7e7      	b.n	88c <SDFile::truncate(unsigned long long)+0x16>

000008bc <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     8bc:	b570      	push	{r4, r5, r6, lr}
     8be:	b094      	sub	sp, #80	; 0x50
     8c0:	4605      	mov	r5, r0
     8c2:	2200      	movs	r2, #0
     8c4:	9201      	str	r2, [sp, #4]
     8c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     8ca:	9302      	str	r3, [sp, #8]
     8cc:	f88d 200c 	strb.w	r2, [sp, #12]
  FsBaseFile() {}
     8d0:	9212      	str	r2, [sp, #72]	; 0x48
     8d2:	9213      	str	r2, [sp, #76]	; 0x4c
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     8d4:	4b1f      	ldr	r3, [pc, #124]	; (954 <SDFile::openNextFile(unsigned char)+0x98>)
     8d6:	9300      	str	r3, [sp, #0]
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     8d8:	3118      	adds	r1, #24
     8da:	a804      	add	r0, sp, #16
     8dc:	f012 fab0 	bl	12e40 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     8e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
     8e2:	2b00      	cmp	r3, #0
     8e4:	d02a      	beq.n	93c <SDFile::openNextFile(unsigned char)+0x80>
		if (file) return File(new SDFile(file));
     8e6:	205c      	movs	r0, #92	; 0x5c
     8e8:	f016 fd9c 	bl	17424 <operator new(unsigned int)>
     8ec:	4604      	mov	r4, r0
class FileImpl {
     8ee:	2600      	movs	r6, #0
     8f0:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     8f2:	4b19      	ldr	r3, [pc, #100]	; (958 <SDFile::openNextFile(unsigned char)+0x9c>)
     8f4:	6003      	str	r3, [r0, #0]
class Print
     8f6:	9b01      	ldr	r3, [sp, #4]
     8f8:	60c3      	str	r3, [r0, #12]
class Stream : public Print
     8fa:	4b18      	ldr	r3, [pc, #96]	; (95c <SDFile::openNextFile(unsigned char)+0xa0>)
     8fc:	6083      	str	r3, [r0, #8]
     8fe:	9b02      	ldr	r3, [sp, #8]
     900:	6103      	str	r3, [r0, #16]
     902:	f89d 300c 	ldrb.w	r3, [sp, #12]
     906:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
     908:	a904      	add	r1, sp, #16
     90a:	3018      	adds	r0, #24
     90c:	f012 fa09 	bl	12d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     910:	4b10      	ldr	r3, [pc, #64]	; (954 <SDFile::openNextFile(unsigned char)+0x98>)
     912:	60a3      	str	r3, [r4, #8]
     914:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
     916:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
     918:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     91c:	60ab      	str	r3, [r5, #8]
     91e:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
     920:	4b0f      	ldr	r3, [pc, #60]	; (960 <SDFile::openNextFile(unsigned char)+0xa4>)
     922:	602b      	str	r3, [r5, #0]
		f = file;
     924:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     926:	6863      	ldr	r3, [r4, #4]
     928:	3301      	adds	r3, #1
     92a:	6063      	str	r3, [r4, #4]
     92c:	4b0d      	ldr	r3, [pc, #52]	; (964 <SDFile::openNextFile(unsigned char)+0xa8>)
     92e:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
     930:	a804      	add	r0, sp, #16
     932:	f012 fa37 	bl	12da4 <FsBaseFile::close()>
	}
     936:	4628      	mov	r0, r5
     938:	b014      	add	sp, #80	; 0x50
     93a:	bd70      	pop	{r4, r5, r6, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     93c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     93e:	2b00      	cmp	r3, #0
     940:	d1d1      	bne.n	8e6 <SDFile::openNextFile(unsigned char)+0x2a>
     942:	606b      	str	r3, [r5, #4]
     944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     948:	60aa      	str	r2, [r5, #8]
     94a:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
     94c:	4a04      	ldr	r2, [pc, #16]	; (960 <SDFile::openNextFile(unsigned char)+0xa4>)
     94e:	602a      	str	r2, [r5, #0]
     950:	612b      	str	r3, [r5, #16]
     952:	e7eb      	b.n	92c <SDFile::openNextFile(unsigned char)+0x70>
     954:	2000277c 	.word	0x2000277c
     958:	200027a0 	.word	0x200027a0
     95c:	200027fc 	.word	0x200027fc
     960:	20002750 	.word	0x20002750
     964:	20002560 	.word	0x20002560

00000968 <SDFile::peek()>:
	virtual int peek() {
     968:	b508      	push	{r3, lr}
     96a:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->peek() :
     96c:	6d00      	ldr	r0, [r0, #80]	; 0x50
     96e:	b110      	cbz	r0, 976 <SDFile::peek()+0xe>
     970:	f010 f88c 	bl	10a8c <FatFile::peek()>
	}
     974:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->peek() : -1;
     976:	6d58      	ldr	r0, [r3, #84]	; 0x54
     978:	b110      	cbz	r0, 980 <SDFile::peek()+0x18>
     97a:	f00e f83e 	bl	e9fa <ExFatFile::peek()>
     97e:	e7f9      	b.n	974 <SDFile::peek()+0xc>
     980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return sdfatfile.peek();
     984:	e7f6      	b.n	974 <SDFile::peek()+0xc>
	...

00000988 <__tcf_1>:
EXTMEM arraysampler _samplers[13];
     988:	b570      	push	{r4, r5, r6, lr}
     98a:	4c10      	ldr	r4, [pc, #64]	; (9cc <__tcf_1+0x44>)
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     98c:	2603      	movs	r6, #3
     98e:	f5a4 5582 	sub.w	r5, r4, #4160	; 0x1040
     992:	e001      	b.n	998 <__tcf_1+0x10>
     994:	42ac      	cmp	r4, r5
     996:	d018      	beq.n	9ca <__tcf_1+0x42>
     998:	f5a4 74a0 	sub.w	r4, r4, #320	; 0x140
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
     99c:	f8d4 0134 	ldr.w	r0, [r4, #308]	; 0x134

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
     9a0:	b120      	cbz	r0, 9ac <__tcf_1+0x24>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
     9a2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
     9a6:	1a09      	subs	r1, r1, r0
     9a8:	f016 fd4c 	bl	17444 <operator delete(void*, unsigned int)>
      if (_M_manager)
     9ac:	69a3      	ldr	r3, [r4, #24]
     9ae:	b123      	cbz	r3, 9ba <__tcf_1+0x32>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     9b0:	f104 0010 	add.w	r0, r4, #16
     9b4:	4632      	mov	r2, r6
     9b6:	4601      	mov	r1, r0
     9b8:	4798      	blx	r3
	_M_deallocate(_M_impl._M_start,
     9ba:	6860      	ldr	r0, [r4, #4]
	if (__p)
     9bc:	2800      	cmp	r0, #0
     9be:	d0e9      	beq.n	994 <__tcf_1+0xc>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
     9c0:	68e1      	ldr	r1, [r4, #12]
     9c2:	1a09      	subs	r1, r1, r0
     9c4:	f016 fd3e 	bl	17444 <operator delete(void*, unsigned int)>
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
      { __a.deallocate(__p, __n); }
     9c8:	e7e4      	b.n	994 <__tcf_1+0xc>
     9ca:	bd70      	pop	{r4, r5, r6, pc}
     9cc:	70001220 	.word	0x70001220

000009d0 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     9d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     9d2:	b133      	cbz	r3, 9e2 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     9d4:	781b      	ldrb	r3, [r3, #0]
     9d6:	f013 0f70 	tst.w	r3, #112	; 0x70
     9da:	bf14      	ite	ne
     9dc:	2001      	movne	r0, #1
     9de:	2000      	moveq	r0, #0
     9e0:	4770      	bx	lr
           m_xFile ? m_xFile->isDir() : false;
     9e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
     9e4:	b13b      	cbz	r3, 9f6 <SDFile::isDirectory()+0x26>
     9e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
     9ea:	f013 0f50 	tst.w	r3, #80	; 0x50
     9ee:	bf14      	ite	ne
     9f0:	2001      	movne	r0, #1
     9f2:	2000      	moveq	r0, #0
     9f4:	4770      	bx	lr
     9f6:	2000      	movs	r0, #0
	}
     9f8:	4770      	bx	lr

000009fa <SDFile::read(void*, unsigned int)>:
	virtual size_t read(void *buf, size_t nbyte) {
     9fa:	b508      	push	{r3, lr}
     9fc:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->read(buf, count) :
     9fe:	6d00      	ldr	r0, [r0, #80]	; 0x50
     a00:	b110      	cbz	r0, a08 <SDFile::read(void*, unsigned int)+0xe>
     a02:	f00f ff6e 	bl	108e2 <FatFile::read(void*, unsigned int)>
	}
     a06:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->read(buf, count) : -1;
     a08:	6d58      	ldr	r0, [r3, #84]	; 0x54
     a0a:	b110      	cbz	r0, a12 <SDFile::read(void*, unsigned int)+0x18>
     a0c:	f00d ff2a 	bl	e864 <ExFatFile::read(void*, unsigned int)>
     a10:	e7f9      	b.n	a06 <SDFile::read(void*, unsigned int)+0xc>
     a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a16:	e7f6      	b.n	a06 <SDFile::read(void*, unsigned int)+0xc>

00000a18 <AudioPlayArrayResmp::~AudioPlayArrayResmp()>:
    virtual ~AudioPlayArrayResmp() {
     a18:	b510      	push	{r4, lr}
     a1a:	4604      	mov	r4, r0
     a1c:	4b06      	ldr	r3, [pc, #24]	; (a38 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x20>)
     a1e:	6003      	str	r3, [r0, #0]
        delete reader;
     a20:	6980      	ldr	r0, [r0, #24]
     a22:	b110      	cbz	r0, a2a <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x12>
     a24:	6803      	ldr	r3, [r0, #0]
     a26:	685b      	ldr	r3, [r3, #4]
     a28:	4798      	blx	r3
    }
     a2a:	211c      	movs	r1, #28
     a2c:	4620      	mov	r0, r4
     a2e:	f016 fd09 	bl	17444 <operator delete(void*, unsigned int)>
     a32:	4620      	mov	r0, r4
     a34:	bd10      	pop	{r4, pc}
     a36:	bf00      	nop
     a38:	2000269c 	.word	0x2000269c

00000a3c <SDFile::flush()>:
	virtual void flush() {
     a3c:	b508      	push	{r3, lr}
     a3e:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->sync() :
     a40:	6d00      	ldr	r0, [r0, #80]	; 0x50
     a42:	b110      	cbz	r0, a4a <SDFile::flush()+0xe>
     a44:	f010 f9a6 	bl	10d94 <FatFile::sync()>
	}
     a48:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->sync() : false;
     a4a:	6d58      	ldr	r0, [r3, #84]	; 0x54
     a4c:	2800      	cmp	r0, #0
     a4e:	d0fb      	beq.n	a48 <SDFile::flush()+0xc>
     a50:	f00e fc5e 	bl	f310 <ExFatFile::sync()>
     a54:	e7f8      	b.n	a48 <SDFile::flush()+0xc>
	...

00000a58 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     a58:	b510      	push	{r4, lr}
     a5a:	4604      	mov	r4, r0
     a5c:	4b0c      	ldr	r3, [pc, #48]	; (a90 <SDFile::~SDFile()+0x38>)
     a5e:	6003      	str	r3, [r0, #0]
		if (filename) {
     a60:	6d80      	ldr	r0, [r0, #88]	; 0x58
     a62:	b118      	cbz	r0, a6c <SDFile::~SDFile()+0x14>
			free(filename);
     a64:	f021 f940 	bl	21ce8 <free>
			filename = nullptr;
     a68:	2300      	movs	r3, #0
     a6a:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     a6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
     a6e:	b15b      	cbz	r3, a88 <SDFile::~SDFile()+0x30>
			sdfatfile.close();
     a70:	f104 0018 	add.w	r0, r4, #24
     a74:	f012 f996 	bl	12da4 <FsBaseFile::close()>
     a78:	4b06      	ldr	r3, [pc, #24]	; (a94 <SDFile::~SDFile()+0x3c>)
     a7a:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     a7c:	f104 0018 	add.w	r0, r4, #24
     a80:	f012 f990 	bl	12da4 <FsBaseFile::close()>
	}
     a84:	4620      	mov	r0, r4
     a86:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     a88:	6d63      	ldr	r3, [r4, #84]	; 0x54
     a8a:	2b00      	cmp	r3, #0
     a8c:	d1f0      	bne.n	a70 <SDFile::~SDFile()+0x18>
     a8e:	e7f3      	b.n	a78 <SDFile::~SDFile()+0x20>
     a90:	200027a0 	.word	0x200027a0
     a94:	20002560 	.word	0x20002560

00000a98 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     a98:	b510      	push	{r4, lr}
     a9a:	4604      	mov	r4, r0
     a9c:	4b0e      	ldr	r3, [pc, #56]	; (ad8 <SDFile::~SDFile()+0x40>)
     a9e:	6003      	str	r3, [r0, #0]
		if (filename) {
     aa0:	6d80      	ldr	r0, [r0, #88]	; 0x58
     aa2:	b118      	cbz	r0, aac <SDFile::~SDFile()+0x14>
			free(filename);
     aa4:	f021 f920 	bl	21ce8 <free>
			filename = nullptr;
     aa8:	2300      	movs	r3, #0
     aaa:	65a3      	str	r3, [r4, #88]	; 0x58
     aac:	6d23      	ldr	r3, [r4, #80]	; 0x50
     aae:	b17b      	cbz	r3, ad0 <SDFile::~SDFile()+0x38>
			sdfatfile.close();
     ab0:	f104 0018 	add.w	r0, r4, #24
     ab4:	f012 f976 	bl	12da4 <FsBaseFile::close()>
     ab8:	4b08      	ldr	r3, [pc, #32]	; (adc <SDFile::~SDFile()+0x44>)
     aba:	60a3      	str	r3, [r4, #8]
  ~FsBaseFile() {close();}
     abc:	f104 0018 	add.w	r0, r4, #24
     ac0:	f012 f970 	bl	12da4 <FsBaseFile::close()>
	}
     ac4:	215c      	movs	r1, #92	; 0x5c
     ac6:	4620      	mov	r0, r4
     ac8:	f016 fcbc 	bl	17444 <operator delete(void*, unsigned int)>
     acc:	4620      	mov	r0, r4
     ace:	bd10      	pop	{r4, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     ad0:	6d63      	ldr	r3, [r4, #84]	; 0x54
     ad2:	2b00      	cmp	r3, #0
     ad4:	d1ec      	bne.n	ab0 <SDFile::~SDFile()+0x18>
     ad6:	e7ef      	b.n	ab8 <SDFile::~SDFile()+0x20>
     ad8:	200027a0 	.word	0x200027a0
     adc:	20002560 	.word	0x20002560

00000ae0 <SDFile::write(void const*, unsigned int)>:
	virtual size_t write(const void *buf, size_t size) {
     ae0:	b508      	push	{r3, lr}
     ae2:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     ae4:	6d00      	ldr	r0, [r0, #80]	; 0x50
     ae6:	b110      	cbz	r0, aee <SDFile::write(void const*, unsigned int)+0xe>
     ae8:	f010 fd2c 	bl	11544 <FatFile::write(void const*, unsigned int)>
	}
     aec:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     aee:	6d58      	ldr	r0, [r3, #84]	; 0x54
     af0:	b110      	cbz	r0, af8 <SDFile::write(void const*, unsigned int)+0x18>
     af2:	f00e fec1 	bl	f878 <ExFatFile::write(void const*, unsigned int)>
     af6:	e7f9      	b.n	aec <SDFile::write(void const*, unsigned int)+0xc>
     af8:	2000      	movs	r0, #0
		return sdfatfile.write(buf, size);
     afa:	e7f7      	b.n	aec <SDFile::write(void const*, unsigned int)+0xc>

00000afc <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     afc:	b508      	push	{r3, lr}
     afe:	4603      	mov	r3, r0
    return m_fFile ? m_fFile->write(buf, count) :
     b00:	6c80      	ldr	r0, [r0, #72]	; 0x48
     b02:	b110      	cbz	r0, b0a <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xe>
     b04:	f010 fd1e 	bl	11544 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     b08:	bd08      	pop	{r3, pc}
           m_xFile ? m_xFile->write(buf, count) : 0;
     b0a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
     b0c:	b110      	cbz	r0, b14 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x18>
     b0e:	f00e feb3 	bl	f878 <ExFatFile::write(void const*, unsigned int)>
     b12:	e7f9      	b.n	b08 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>
     b14:	2000      	movs	r0, #0
    return BaseFile::write(buffer, size);
     b16:	e7f7      	b.n	b08 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xc>

00000b18 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     b18:	798a      	ldrb	r2, [r1, #6]
     b1a:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     b1e:	f013 0f80 	tst.w	r3, #128	; 0x80
     b22:	d120      	bne.n	b66 <SDFile::setModifyTime(DateTimeFields const&)+0x4e>
	virtual bool setModifyTime(const DateTimeFields &tm) {
     b24:	b5f0      	push	{r4, r5, r6, r7, lr}
     b26:	b085      	sub	sp, #20
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     b28:	f202 726c 	addw	r2, r2, #1900	; 0x76c
     b2c:	794b      	ldrb	r3, [r1, #5]
     b2e:	3301      	adds	r3, #1
     b30:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     b32:	790d      	ldrb	r5, [r1, #4]
     b34:	788e      	ldrb	r6, [r1, #2]
     b36:	784f      	ldrb	r7, [r1, #1]
     b38:	7809      	ldrb	r1, [r1, #0]
    return m_fFile ?
     b3a:	6d04      	ldr	r4, [r0, #80]	; 0x50
     b3c:	b14c      	cbz	r4, b52 <SDFile::setModifyTime(DateTimeFields const&)+0x3a>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     b3e:	9103      	str	r1, [sp, #12]
     b40:	9702      	str	r7, [sp, #8]
     b42:	9601      	str	r6, [sp, #4]
     b44:	9500      	str	r5, [sp, #0]
     b46:	2104      	movs	r1, #4
     b48:	4620      	mov	r0, r4
     b4a:	f010 fc43 	bl	113d4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     b4e:	b005      	add	sp, #20
     b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
           m_xFile ?
     b52:	6d40      	ldr	r0, [r0, #84]	; 0x54
     b54:	b148      	cbz	r0, b6a <SDFile::setModifyTime(DateTimeFields const&)+0x52>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     b56:	9103      	str	r1, [sp, #12]
     b58:	9702      	str	r7, [sp, #8]
     b5a:	9601      	str	r6, [sp, #4]
     b5c:	9500      	str	r5, [sp, #0]
     b5e:	2104      	movs	r1, #4
     b60:	f00e fd5d 	bl	f61e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     b64:	e7f3      	b.n	b4e <SDFile::setModifyTime(DateTimeFields const&)+0x36>
		if (tm.year < 80 || tm.year > 207) return false;
     b66:	2000      	movs	r0, #0
	}
     b68:	4770      	bx	lr
           m_xFile ?
     b6a:	2000      	movs	r0, #0
     b6c:	e7ef      	b.n	b4e <SDFile::setModifyTime(DateTimeFields const&)+0x36>

00000b6e <newdigate::ResamplingArrayReader::close()>:
    void close(void) override {
     b6e:	b538      	push	{r3, r4, r5, lr}
        if (_playing) {
     b70:	7903      	ldrb	r3, [r0, #4]
     b72:	b303      	cbz	r3, bb6 <newdigate::ResamplingArrayReader::close()+0x48>
     b74:	4605      	mov	r5, r0
        return true;
    }

    void stop(void)
    {
        if (_playing) {   
     b76:	7903      	ldrb	r3, [r0, #4]
     b78:	b10b      	cbz	r3, b7e <newdigate::ResamplingArrayReader::close()+0x10>
            _playing = false;
     b7a:	2300      	movs	r3, #0
     b7c:	7103      	strb	r3, [r0, #4]


    void deleteInterpolationPoints(void)
    {
        //check for NULLPTR
        if (!_interpolationPoints) return;
     b7e:	6e28      	ldr	r0, [r5, #96]	; 0x60
     b80:	b1c8      	cbz	r0, bb6 <newdigate::ResamplingArrayReader::close()+0x48>

        for (int i=0; i<_numInterpolationPointsChannels; i++) {
     b82:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
     b86:	b183      	cbz	r3, baa <newdigate::ResamplingArrayReader::close()+0x3c>
     b88:	2400      	movs	r4, #0
     b8a:	e004      	b.n	b96 <newdigate::ResamplingArrayReader::close()+0x28>
     b8c:	3401      	adds	r4, #1
     b8e:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
     b92:	429c      	cmp	r4, r3
     b94:	da07      	bge.n	ba6 <newdigate::ResamplingArrayReader::close()+0x38>
            delete [] _interpolationPoints[i];
     b96:	6e2b      	ldr	r3, [r5, #96]	; 0x60
     b98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
     b9c:	2800      	cmp	r0, #0
     b9e:	d0f5      	beq.n	b8c <newdigate::ResamplingArrayReader::close()+0x1e>
     ba0:	f016 fc4c 	bl	1743c <operator delete[](void*)>
     ba4:	e7f2      	b.n	b8c <newdigate::ResamplingArrayReader::close()+0x1e>
        }
        delete [] _interpolationPoints;
     ba6:	6e28      	ldr	r0, [r5, #96]	; 0x60
     ba8:	b108      	cbz	r0, bae <newdigate::ResamplingArrayReader::close()+0x40>
     baa:	f016 fc47 	bl	1743c <operator delete[](void*)>
        _interpolationPoints = nullptr;
     bae:	2300      	movs	r3, #0
     bb0:	662b      	str	r3, [r5, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
     bb2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    }
     bb6:	bd38      	pop	{r3, r4, r5, pc}

00000bb8 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     bb8:	6d03      	ldr	r3, [r0, #80]	; 0x50
     bba:	b153      	cbz	r3, bd2 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     bbc:	781a      	ldrb	r2, [r3, #0]
     bbe:	f012 0f08 	tst.w	r2, #8
     bc2:	d020      	beq.n	c06 <SDFile::available()+0x4e>
     bc4:	69d8      	ldr	r0, [r3, #28]
     bc6:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     bc8:	1ac0      	subs	r0, r0, r3
     bca:	bf48      	it	mi
     bcc:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     bd0:	4770      	bx	lr
           m_xFile ? m_xFile->available() : 0;
     bd2:	6d43      	ldr	r3, [r0, #84]	; 0x54
     bd4:	b1cb      	cbz	r3, c0a <SDFile::available()+0x52>
    return isFile() ? fileSize() - curPosition() : 0;
     bd6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
     bda:	f012 0f08 	tst.w	r2, #8
     bde:	d016      	beq.n	c0e <SDFile::available()+0x56>
	virtual int available() {
     be0:	b410      	push	{r4}
     be2:	691a      	ldr	r2, [r3, #16]
     be4:	6959      	ldr	r1, [r3, #20]
     be6:	6818      	ldr	r0, [r3, #0]
     be8:	685c      	ldr	r4, [r3, #4]
     bea:	1a13      	subs	r3, r2, r0
     bec:	eb61 0204 	sbc.w	r2, r1, r4
    return n > INT_MAX ? INT_MAX : n;
     bf0:	4618      	mov	r0, r3
     bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     bf6:	f172 0200 	sbcs.w	r2, r2, #0
     bfa:	d301      	bcc.n	c00 <SDFile::available()+0x48>
     bfc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	}
     c00:	f85d 4b04 	ldr.w	r4, [sp], #4
     c04:	4770      	bx	lr
     c06:	2000      	movs	r0, #0
     c08:	4770      	bx	lr
     c0a:	2000      	movs	r0, #0
		return sdfatfile.available();
     c0c:	4770      	bx	lr
    return isFile() ? fileSize() - curPosition() : 0;
     c0e:	2300      	movs	r3, #0
     c10:	461a      	mov	r2, r3
    return n > INT_MAX ? INT_MAX : n;
     c12:	4618      	mov	r0, r3
     c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c18:	f172 0200 	sbcs.w	r2, r2, #0
     c1c:	bf28      	it	cs
     c1e:	f06f 4000 	mvncs.w	r0, #2147483648	; 0x80000000
	}
     c22:	4770      	bx	lr

00000c24 <myClock()>:
  Serial.print("Song Position Pointer Received: ");
  Serial.println(beats);
}


void myClock() {
     c24:	b538      	push	{r3, r4, r5, lr}
  if (waitForFourBars) pulseCount++;
     c26:	4b29      	ldr	r3, [pc, #164]	; (ccc <myClock()+0xa8>)
     c28:	781b      	ldrb	r3, [r3, #0]
     c2a:	b11b      	cbz	r3, c34 <myClock()+0x10>
     c2c:	4a28      	ldr	r2, [pc, #160]	; (cd0 <myClock()+0xac>)
     c2e:	6813      	ldr	r3, [r2, #0]
     c30:	3301      	adds	r3, #1
     c32:	6013      	str	r3, [r2, #0]
     c34:	4b27      	ldr	r3, [pc, #156]	; (cd4 <myClock()+0xb0>)
     c36:	681c      	ldr	r4, [r3, #0]
  unsigned int now = millis();
  if (lastClockTime > 0) {
     c38:	4b27      	ldr	r3, [pc, #156]	; (cd8 <myClock()+0xb4>)
     c3a:	681b      	ldr	r3, [r3, #0]
     c3c:	b16b      	cbz	r3, c5a <myClock()+0x36>
    totalInterval += now - lastClockTime;
     c3e:	4b26      	ldr	r3, [pc, #152]	; (cd8 <myClock()+0xb4>)
     c40:	6819      	ldr	r1, [r3, #0]
     c42:	4a26      	ldr	r2, [pc, #152]	; (cdc <myClock()+0xb8>)
     c44:	6813      	ldr	r3, [r2, #0]
     c46:	4423      	add	r3, r4
     c48:	1a5b      	subs	r3, r3, r1
     c4a:	6013      	str	r3, [r2, #0]
    clockCount++;
     c4c:	4b24      	ldr	r3, [pc, #144]	; (ce0 <myClock()+0xbc>)
     c4e:	681a      	ldr	r2, [r3, #0]
     c50:	3201      	adds	r2, #1
     c52:	601a      	str	r2, [r3, #0]

    if (clockCount >= numPulsesForAverage) {
     c54:	681b      	ldr	r3, [r3, #0]
     c56:	2b17      	cmp	r3, #23
     c58:	d802      	bhi.n	c60 <myClock()+0x3c>
      playTimer.update(((60 * 1000 / SMP.bpm) / 4) * 1000);
      clockCount = 0;
      totalInterval = 0;
    }
  }
  lastClockTime = now;
     c5a:	4b1f      	ldr	r3, [pc, #124]	; (cd8 <myClock()+0xb4>)
     c5c:	601c      	str	r4, [r3, #0]
}
     c5e:	bd38      	pop	{r3, r4, r5, pc}
      float averageInterval = totalInterval / (float)numPulsesForAverage;
     c60:	4b1e      	ldr	r3, [pc, #120]	; (cdc <myClock()+0xb8>)
     c62:	edd3 7a00 	vldr	s15, [r3]
     c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
     c6a:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
     c6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
      float bpm = 60000.0 / (averageInterval * 24);
     c72:	ee27 7a26 	vmul.f32	s14, s14, s13
     c76:	eddf 6a1b 	vldr	s13, [pc, #108]	; ce4 <myClock()+0xc0>
     c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
     c7e:	fef8 7a67 	vrinta.f32	s15, s15
      SMP.bpm = round(bpm);
     c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
     c86:	ee17 1a90 	vmov	r1, s15
     c8a:	4b17      	ldr	r3, [pc, #92]	; (ce8 <myClock()+0xc4>)
     c8c:	edc3 7a03 	vstr	s15, [r3, #12]
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     c90:	4d16      	ldr	r5, [pc, #88]	; (cec <myClock()+0xc8>)
     c92:	2300      	movs	r3, #0
     c94:	220a      	movs	r2, #10
     c96:	4628      	mov	r0, r5
     c98:	f015 fabe 	bl	16218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
     c9c:	4628      	mov	r0, r5
     c9e:	f015 fa92 	bl	161c6 <Print::println()>
	// with this new setting.
	template <typename period_t>
	void update(period_t period){
		uint32_t cycles = cyclesFromPeriod(period);
		if (cycles < 17) return;
		if (channel) channel->LDVAL = cycles;
     ca2:	4b13      	ldr	r3, [pc, #76]	; (cf0 <myClock()+0xcc>)
     ca4:	681a      	ldr	r2, [r3, #0]
     ca6:	b15a      	cbz	r2, cc0 <myClock()+0x9c>
      playTimer.update(((60 * 1000 / SMP.bpm) / 4) * 1000);
     ca8:	4b0f      	ldr	r3, [pc, #60]	; (ce8 <myClock()+0xc4>)
     caa:	68d9      	ldr	r1, [r3, #12]
     cac:	f643 2398 	movw	r3, #15000	; 0x3a98
     cb0:	fbb3 f3f1 	udiv	r3, r3, r1
		static_assert(std::is_arithmetic_v<period_t>, "Period must be arithmetic");

		if (period < 0 || period > MAX_PERIOD)
			return 0;
		if constexpr (std::is_integral_v<period_t>)       // handles all integral types
			return (24000000 / 1000000) * period - 1;
     cb4:	f645 51c0 	movw	r1, #24000	; 0x5dc0
     cb8:	fb01 f303 	mul.w	r3, r1, r3
     cbc:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
     cbe:	6013      	str	r3, [r2, #0]
      clockCount = 0;
     cc0:	2300      	movs	r3, #0
     cc2:	4a07      	ldr	r2, [pc, #28]	; (ce0 <myClock()+0xbc>)
     cc4:	6013      	str	r3, [r2, #0]
      totalInterval = 0;
     cc6:	4a05      	ldr	r2, [pc, #20]	; (cdc <myClock()+0xb8>)
     cc8:	6013      	str	r3, [r2, #0]
     cca:	e7c6      	b.n	c5a <myClock()+0x36>
     ccc:	20008c48 	.word	0x20008c48
     cd0:	200084d4 	.word	0x200084d4
     cd4:	20008a6c 	.word	0x20008a6c
     cd8:	20007b04 	.word	0x20007b04
     cdc:	20008a74 	.word	0x20008a74
     ce0:	20007370 	.word	0x20007370
     ce4:	476a6000 	.word	0x476a6000
     ce8:	70000000 	.word	0x70000000
     cec:	20004e74 	.word	0x20004e74
     cf0:	20005b04 	.word	0x20005b04

00000cf4 <handleNoteOff(unsigned char, unsigned char, unsigned char)>:
void handleNoteOff(uint8_t channel, uint8_t pitch, uint8_t velocity) {
     cf4:	b508      	push	{r3, lr}
							  return write((const uint8_t *)str, strlen(str)); }
     cf6:	4803      	ldr	r0, [pc, #12]	; (d04 <handleNoteOff(unsigned char, unsigned char, unsigned char)+0x10>)
     cf8:	6803      	ldr	r3, [r0, #0]
     cfa:	685b      	ldr	r3, [r3, #4]
     cfc:	220d      	movs	r2, #13
     cfe:	4902      	ldr	r1, [pc, #8]	; (d08 <handleNoteOff(unsigned char, unsigned char, unsigned char)+0x14>)
     d00:	4798      	blx	r3
}
     d02:	bd08      	pop	{r3, pc}
     d04:	20004e74 	.word	0x20004e74
     d08:	20000bc0 	.word	0x20000bc0

00000d0c <handleTimeCodeQuarterFrame(unsigned char)>:
void handleTimeCodeQuarterFrame(uint8_t data) {
     d0c:	b510      	push	{r4, lr}
     d0e:	4c05      	ldr	r4, [pc, #20]	; (d24 <handleTimeCodeQuarterFrame(unsigned char)+0x18>)
     d10:	6823      	ldr	r3, [r4, #0]
     d12:	685b      	ldr	r3, [r3, #4]
     d14:	2222      	movs	r2, #34	; 0x22
     d16:	4904      	ldr	r1, [pc, #16]	; (d28 <handleTimeCodeQuarterFrame(unsigned char)+0x1c>)
     d18:	4620      	mov	r0, r4
     d1a:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     d1c:	4620      	mov	r0, r4
     d1e:	f015 fa52 	bl	161c6 <Print::println()>
}
     d22:	bd10      	pop	{r4, pc}
     d24:	20004e74 	.word	0x20004e74
     d28:	20000c5c 	.word	0x20000c5c

00000d2c <handleStart()>:
void handleStart() {
     d2c:	b510      	push	{r4, lr}
  waitForFourBars = true;
     d2e:	4b08      	ldr	r3, [pc, #32]	; (d50 <handleStart()+0x24>)
     d30:	2201      	movs	r2, #1
     d32:	701a      	strb	r2, [r3, #0]
  pulseCount = 0;  // Reset pulse count on start
     d34:	4b07      	ldr	r3, [pc, #28]	; (d54 <handleStart()+0x28>)
     d36:	2200      	movs	r2, #0
     d38:	601a      	str	r2, [r3, #0]
							  return write((const uint8_t *)str, strlen(str)); }
     d3a:	4c07      	ldr	r4, [pc, #28]	; (d58 <handleStart()+0x2c>)
     d3c:	6823      	ldr	r3, [r4, #0]
     d3e:	685b      	ldr	r3, [r3, #4]
     d40:	2213      	movs	r2, #19
     d42:	4906      	ldr	r1, [pc, #24]	; (d5c <handleStart()+0x30>)
     d44:	4620      	mov	r0, r4
     d46:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     d48:	4620      	mov	r0, r4
     d4a:	f015 fa3c 	bl	161c6 <Print::println()>
}
     d4e:	bd10      	pop	{r4, pc}
     d50:	20008c48 	.word	0x20008c48
     d54:	200084d4 	.word	0x200084d4
     d58:	20004e74 	.word	0x20004e74
     d5c:	20000aa4 	.word	0x20000aa4

00000d60 <buttonCallbackFunction(void*)>:
void buttonCallbackFunction(void *s) {
     d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     d64:	b0ba      	sub	sp, #232	; 0xe8
     d66:	4605      	mov	r5, r0
  ButtonMapping mappings[] = {
     d68:	22e4      	movs	r2, #228	; 0xe4
     d6a:	492b      	ldr	r1, [pc, #172]	; (e18 <buttonCallbackFunction(void*)+0xb8>)
     d6c:	a801      	add	r0, sp, #4
     d6e:	f016 fabf 	bl	172f0 <memcpy>
  for (const auto &mapping : mappings) {
     d72:	ac01      	add	r4, sp, #4
     d74:	af3a      	add	r7, sp, #232	; 0xe8
    if (strcmp(static_cast<const char *>(s), mapping.input) == 0) {
     d76:	6821      	ldr	r1, [r4, #0]
     d78:	4628      	mov	r0, r5
     d7a:	f022 fab5 	bl	232e8 <strcmp>
     d7e:	b118      	cbz	r0, d88 <buttonCallbackFunction(void*)+0x28>
  for (const auto &mapping : mappings) {
     d80:	340c      	adds	r4, #12
     d82:	42a7      	cmp	r7, r4
     d84:	d1f7      	bne.n	d76 <buttonCallbackFunction(void*)+0x16>
     d86:	e006      	b.n	d96 <buttonCallbackFunction(void*)+0x36>
      buttons[mapping.buttonIndex] = mapping.value;
     d88:	6862      	ldr	r2, [r4, #4]
     d8a:	4b24      	ldr	r3, [pc, #144]	; (e1c <buttonCallbackFunction(void*)+0xbc>)
     d8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     d90:	68a2      	ldr	r2, [r4, #8]
     d92:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  for (int i = 1; i < 5; i++) {
     d96:	4e22      	ldr	r6, [pc, #136]	; (e20 <buttonCallbackFunction(void*)+0xc0>)
void buttonCallbackFunction(void *s) {
     d98:	2501      	movs	r5, #1
	size_t print(int n)				{ return print((long)n); }
     d9a:	4c22      	ldr	r4, [pc, #136]	; (e24 <buttonCallbackFunction(void*)+0xc4>)
							  return write((const uint8_t *)str, strlen(str)); }
     d9c:	f8df 8098 	ldr.w	r8, [pc, #152]	; e38 <buttonCallbackFunction(void*)+0xd8>
     da0:	4f21      	ldr	r7, [pc, #132]	; (e28 <buttonCallbackFunction(void*)+0xc8>)
	size_t print(int n)				{ return print((long)n); }
     da2:	4629      	mov	r1, r5
     da4:	4620      	mov	r0, r4
     da6:	f015 fa7c 	bl	162a2 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
     daa:	6823      	ldr	r3, [r4, #0]
     dac:	685b      	ldr	r3, [r3, #4]
     dae:	2202      	movs	r2, #2
     db0:	4641      	mov	r1, r8
     db2:	4620      	mov	r0, r4
     db4:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     db6:	f856 1f04 	ldr.w	r1, [r6, #4]!
     dba:	4620      	mov	r0, r4
     dbc:	f015 fa71 	bl	162a2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     dc0:	4620      	mov	r0, r4
     dc2:	f015 fa00 	bl	161c6 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
     dc6:	6823      	ldr	r3, [r4, #0]
     dc8:	685b      	ldr	r3, [r3, #4]
     dca:	220e      	movs	r2, #14
     dcc:	4639      	mov	r1, r7
     dce:	4620      	mov	r0, r4
     dd0:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
     dd2:	4620      	mov	r0, r4
     dd4:	f015 f9f7 	bl	161c6 <Print::println()>
  for (int i = 1; i < 5; i++) {
     dd8:	3501      	adds	r5, #1
     dda:	2d05      	cmp	r5, #5
     ddc:	d1e1      	bne.n	da2 <buttonCallbackFunction(void*)+0x42>
  if (memcmp(buttons, oldButtons, sizeof(buttons)) != 0) {
     dde:	480f      	ldr	r0, [pc, #60]	; (e1c <buttonCallbackFunction(void*)+0xbc>)
     de0:	2214      	movs	r2, #20
     de2:	f500 71ac 	add.w	r1, r0, #344	; 0x158
     de6:	f500 70a2 	add.w	r0, r0, #324	; 0x144
     dea:	f022 f889 	bl	22f00 <memcmp>
     dee:	b178      	cbz	r0, e10 <buttonCallbackFunction(void*)+0xb0>
    memcpy(oldButtons, buttons, sizeof(buttons));  // Update oldButtons
     df0:	4c0a      	ldr	r4, [pc, #40]	; (e1c <buttonCallbackFunction(void*)+0xbc>)
     df2:	f504 75ac 	add.w	r5, r4, #344	; 0x158
     df6:	f504 74a2 	add.w	r4, r4, #324	; 0x144
     dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
     dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
     dfe:	6823      	ldr	r3, [r4, #0]
     e00:	602b      	str	r3, [r5, #0]
     e02:	4b0a      	ldr	r3, [pc, #40]	; (e2c <buttonCallbackFunction(void*)+0xcc>)
     e04:	681a      	ldr	r2, [r3, #0]
    lastButtonPressTime = millis();
     e06:	4b0a      	ldr	r3, [pc, #40]	; (e30 <buttonCallbackFunction(void*)+0xd0>)
     e08:	601a      	str	r2, [r3, #0]
    resetTimerActive = true;
     e0a:	4b0a      	ldr	r3, [pc, #40]	; (e34 <buttonCallbackFunction(void*)+0xd4>)
     e0c:	2201      	movs	r2, #1
     e0e:	701a      	strb	r2, [r3, #0]
}
     e10:	b03a      	add	sp, #232	; 0xe8
     e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     e16:	bf00      	nop
     e18:	200005e0 	.word	0x200005e0
     e1c:	70000000 	.word	0x70000000
     e20:	70000144 	.word	0x70000144
     e24:	20004e74 	.word	0x20004e74
     e28:	20000c4c 	.word	0x20000c4c
     e2c:	20008a6c 	.word	0x20008a6c
     e30:	20007b00 	.word	0x20007b00
     e34:	20008c2e 	.word	0x20008c2e
     e38:	20000c48 	.word	0x20000c48

00000e3c <handleSongPosition(unsigned short)>:
void handleSongPosition(uint16_t beats) {
     e3c:	b538      	push	{r3, r4, r5, lr}
     e3e:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
     e40:	4c07      	ldr	r4, [pc, #28]	; (e60 <handleSongPosition(unsigned short)+0x24>)
     e42:	6823      	ldr	r3, [r4, #0]
     e44:	685b      	ldr	r3, [r3, #4]
     e46:	2220      	movs	r2, #32
     e48:	4906      	ldr	r1, [pc, #24]	; (e64 <handleSongPosition(unsigned short)+0x28>)
     e4a:	4620      	mov	r0, r4
     e4c:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
     e4e:	4629      	mov	r1, r5
     e50:	4620      	mov	r0, r4
     e52:	f015 fa26 	bl	162a2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     e56:	4620      	mov	r0, r4
     e58:	f015 f9b5 	bl	161c6 <Print::println()>
}
     e5c:	bd38      	pop	{r3, r4, r5, pc}
     e5e:	bf00      	nop
     e60:	20004e74 	.word	0x20004e74
     e64:	20000c24 	.word	0x20000c24

00000e68 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)>:
    virtual void showColor(const CRGB& data, int nLeds, uint8_t brightness) override {
     e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e6c:	b094      	sub	sp, #80	; 0x50
     e6e:	4604      	mov	r4, r0
     e70:	460e      	mov	r6, r1
     e72:	4615      	mov	r5, r2
        ColorAdjustment color_adjustment = getAdjustmentData(brightness);
     e74:	af12      	add	r7, sp, #72	; 0x48
     e76:	461a      	mov	r2, r3
     e78:	4601      	mov	r1, r0
     e7a:	4638      	mov	r0, r7
     e7c:	f00b f965 	bl	c14a <CLEDController::getAdjustmentData(unsigned char)>
     e80:	7ca2      	ldrb	r2, [r4, #18]
     e82:	e897 0003 	ldmia.w	r7, {r0, r1}
     e86:	9001      	str	r0, [sp, #4]
     e88:	f8ad 1008 	strh.w	r1, [sp, #8]
     e8c:	0c09      	lsrs	r1, r1, #16
     e8e:	f88d 100a 	strb.w	r1, [sp, #10]
                : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mColorAdjustment(color_adjustment) {
     e92:	9603      	str	r6, [sp, #12]
     e94:	9504      	str	r5, [sp, #16]
     e96:	9505      	str	r5, [sp, #20]
     e98:	ab01      	add	r3, sp, #4
     e9a:	e893 0003 	ldmia.w	r3, {r0, r1}
     e9e:	9010      	str	r0, [sp, #64]	; 0x40
     ea0:	f8ad 1044 	strh.w	r1, [sp, #68]	; 0x44
     ea4:	0c09      	lsrs	r1, r1, #16
     ea6:	f88d 1046 	strb.w	r1, [sp, #70]	; 0x46
        switch(dither) {
     eaa:	2a01      	cmp	r2, #1
     eac:	d01f      	beq.n	eee <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0x86>
            default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     eae:	2300      	movs	r3, #0
     eb0:	f88d 301d 	strb.w	r3, [sp, #29]
     eb4:	f88d 301c 	strb.w	r3, [sp, #28]
     eb8:	f88d 301b 	strb.w	r3, [sp, #27]
     ebc:	f88d 301a 	strb.w	r3, [sp, #26]
     ec0:	f88d 3019 	strb.w	r3, [sp, #25]
     ec4:	f88d 3018 	strb.w	r3, [sp, #24]
        mAdvance = 0;
     ec8:	2300      	movs	r3, #0
     eca:	f88d 301e 	strb.w	r3, [sp, #30]
            mOffsets[i] = nOffset;
     ece:	9308      	str	r3, [sp, #32]
     ed0:	9309      	str	r3, [sp, #36]	; 0x24
     ed2:	930a      	str	r3, [sp, #40]	; 0x28
     ed4:	930b      	str	r3, [sp, #44]	; 0x2c
     ed6:	930c      	str	r3, [sp, #48]	; 0x30
     ed8:	930d      	str	r3, [sp, #52]	; 0x34
     eda:	930e      	str	r3, [sp, #56]	; 0x38
     edc:	930f      	str	r3, [sp, #60]	; 0x3c
        showPixels(pixels);
     ede:	6823      	ldr	r3, [r4, #0]
     ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     ee2:	a903      	add	r1, sp, #12
     ee4:	4620      	mov	r0, r4
     ee6:	4798      	blx	r3
    }
     ee8:	b014      	add	sp, #80	; 0x50
     eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++R;
     eee:	4a1d      	ldr	r2, [pc, #116]	; (f64 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xfc>)
     ef0:	7813      	ldrb	r3, [r2, #0]
     ef2:	3301      	adds	r3, #1
        R &= (0x01 << ditherBits) - 1;
     ef4:	f003 0307 	and.w	r3, r3, #7
     ef8:	7013      	strb	r3, [r2, #0]
            if(R & 0x01) { Q |= 0x80; }
     efa:	f003 0101 	and.w	r1, r3, #1
     efe:	01c9      	lsls	r1, r1, #7
            if(R & 0x02) { Q |= 0x40; }
     f00:	f013 0f02 	tst.w	r3, #2
     f04:	bf18      	it	ne
     f06:	f041 0140 	orrne.w	r1, r1, #64	; 0x40
            if(R & 0x04) { Q |= 0x20; }
     f0a:	f013 0f04 	tst.w	r3, #4
     f0e:	bf18      	it	ne
     f10:	f041 0120 	orrne.w	r1, r1, #32
            Q += 0x01 << (7 - ditherBits);
     f14:	3110      	adds	r1, #16
     f16:	b2c9      	uxtb	r1, r1
        for(int i = 0; i < 3; ++i) {
     f18:	ab06      	add	r3, sp, #24
     f1a:	f10d 0c1b 	add.w	ip, sp, #27
                e[i] = s ? (256/s) + 1 : 0;
     f1e:	2700      	movs	r7, #0
     f20:	f44f 7e80 	mov.w	lr, #256	; 0x100
     f24:	e005      	b.n	f32 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xca>
                d[i] = scale8(Q, e[i]);
     f26:	701f      	strb	r7, [r3, #0]
     f28:	e016      	b.n	f58 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xf0>
                if(e[i]) --e[i];
     f2a:	70ea      	strb	r2, [r5, #3]
        for(int i = 0; i < 3; ++i) {
     f2c:	3301      	adds	r3, #1
     f2e:	4563      	cmp	r3, ip
     f30:	d0ca      	beq.n	ec8 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0x60>
     f32:	461d      	mov	r5, r3
                uint8_t s = mColorAdjustment.premixed.raw[i];
     f34:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
                e[i] = s ? (256/s) + 1 : 0;
     f38:	b18a      	cbz	r2, f5e <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xf6>
     f3a:	fb9e f2f2 	sdiv	r2, lr, r2
     f3e:	b2d2      	uxtb	r2, r2
     f40:	1c50      	adds	r0, r2, #1
     f42:	b2c0      	uxtb	r0, r0
     f44:	70d8      	strb	r0, [r3, #3]
     f46:	fb00 1801 	mla	r8, r0, r1, r1
     f4a:	f3c8 2607 	ubfx	r6, r8, #8, #8
                if(d[i]) (--d[i]);
     f4e:	f418 4f7f 	tst.w	r8, #65280	; 0xff00
     f52:	d0e8      	beq.n	f26 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xbe>
     f54:	3e01      	subs	r6, #1
     f56:	701e      	strb	r6, [r3, #0]
                if(e[i]) --e[i];
     f58:	2800      	cmp	r0, #0
     f5a:	d1e6      	bne.n	f2a <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xc2>
     f5c:	e7e6      	b.n	f2c <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xc4>
                e[i] = s ? (256/s) + 1 : 0;
     f5e:	70df      	strb	r7, [r3, #3]
                d[i] = scale8(Q, e[i]);
     f60:	701f      	strb	r7, [r3, #0]
     f62:	e7e3      	b.n	f2c <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, unsigned char)+0xc4>
     f64:	20008c25 	.word	0x20008c25

00000f68 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     f68:	b510      	push	{r4, lr}
     f6a:	9c02      	ldr	r4, [sp, #8]
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     f6c:	b12c      	cbz	r4, f7a <SDFile::seek(unsigned long long, int)+0x12>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     f6e:	2c01      	cmp	r4, #1
     f70:	d019      	beq.n	fa6 <SDFile::seek(unsigned long long, int)+0x3e>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     f72:	2c02      	cmp	r4, #2
     f74:	d034      	beq.n	fe0 <SDFile::seek(unsigned long long, int)+0x78>
		return false;
     f76:	2000      	movs	r0, #0
	}
     f78:	bd10      	pop	{r4, pc}
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     f7a:	6d04      	ldr	r4, [r0, #80]	; 0x50
     f7c:	b16c      	cbz	r4, f9a <SDFile::seek(unsigned long long, int)+0x32>
     f7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     f82:	4291      	cmp	r1, r2
     f84:	f04f 0100 	mov.w	r1, #0
     f88:	4199      	sbcs	r1, r3
     f8a:	d201      	bcs.n	f90 <SDFile::seek(unsigned long long, int)+0x28>
     f8c:	2000      	movs	r0, #0
     f8e:	e7f3      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
     f90:	4611      	mov	r1, r2
     f92:	4620      	mov	r0, r4
     f94:	f00f fdb0 	bl	10af8 <FatFile::seekSet(unsigned long)>
     f98:	e7ee      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
     f9a:	6d40      	ldr	r0, [r0, #84]	; 0x54
     f9c:	2800      	cmp	r0, #0
     f9e:	d03c      	beq.n	101a <SDFile::seek(unsigned long long, int)+0xb2>
     fa0:	f00d fd41 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
     fa4:	e7e8      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->curPosition() :
     fa6:	6d04      	ldr	r4, [r0, #80]	; 0x50
     fa8:	b164      	cbz	r4, fc4 <SDFile::seek(unsigned long long, int)+0x5c>
     faa:	6961      	ldr	r1, [r4, #20]
    return seekSet(curPosition() + offset);
     fac:	1889      	adds	r1, r1, r2
     fae:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     fb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     fb6:	428a      	cmp	r2, r1
     fb8:	f04f 0200 	mov.w	r2, #0
     fbc:	419a      	sbcs	r2, r3
     fbe:	d20b      	bcs.n	fd8 <SDFile::seek(unsigned long long, int)+0x70>
     fc0:	2000      	movs	r0, #0
     fc2:	e7d9      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->curPosition() : 0;
     fc4:	6d40      	ldr	r0, [r0, #84]	; 0x54
     fc6:	b350      	cbz	r0, 101e <SDFile::seek(unsigned long long, int)+0xb6>
    return seekSet(curPosition() + offset);
     fc8:	6801      	ldr	r1, [r0, #0]
     fca:	6844      	ldr	r4, [r0, #4]
     fcc:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
     fce:	eb43 0304 	adc.w	r3, r3, r4
     fd2:	f00d fd28 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
     fd6:	e7cf      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     fd8:	4620      	mov	r0, r4
     fda:	f00f fd8d 	bl	10af8 <FatFile::seekSet(unsigned long)>
     fde:	e7cb      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? m_fFile->fileSize() :
     fe0:	6d04      	ldr	r4, [r0, #80]	; 0x50
     fe2:	b164      	cbz	r4, ffe <SDFile::seek(unsigned long long, int)+0x96>
     fe4:	69e1      	ldr	r1, [r4, #28]
    return seekSet(fileSize() + offset);
     fe6:	1889      	adds	r1, r1, r2
     fe8:	f143 0300 	adc.w	r3, r3, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     fec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ff0:	428a      	cmp	r2, r1
     ff2:	f04f 0200 	mov.w	r2, #0
     ff6:	419a      	sbcs	r2, r3
     ff8:	d20b      	bcs.n	1012 <SDFile::seek(unsigned long long, int)+0xaa>
     ffa:	2000      	movs	r0, #0
     ffc:	e7bc      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->fileSize() : 0;
     ffe:	6d40      	ldr	r0, [r0, #84]	; 0x54
    1000:	b178      	cbz	r0, 1022 <SDFile::seek(unsigned long long, int)+0xba>
    return seekSet(fileSize() + offset);
    1002:	6901      	ldr	r1, [r0, #16]
    1004:	6944      	ldr	r4, [r0, #20]
    1006:	1852      	adds	r2, r2, r1
           m_xFile ? m_xFile->seekSet(pos) : false;
    1008:	eb43 0304 	adc.w	r3, r3, r4
    100c:	f00d fd0b 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
    1010:	e7b2      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
    1012:	4620      	mov	r0, r4
    1014:	f00f fd70 	bl	10af8 <FatFile::seekSet(unsigned long)>
    1018:	e7ae      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
           m_xFile ? m_xFile->seekSet(pos) : false;
    101a:	2000      	movs	r0, #0
    101c:	e7ac      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
    101e:	2000      	movs	r0, #0
    1020:	e7aa      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
    1022:	2000      	movs	r0, #0
    1024:	e7a8      	b.n	f78 <SDFile::seek(unsigned long long, int)+0x10>
	...

00001028 <File::~File()>:
	virtual ~File() {
    1028:	b510      	push	{r4, lr}
    102a:	4604      	mov	r4, r0
    102c:	4b09      	ldr	r3, [pc, #36]	; (1054 <File::~File()+0x2c>)
    102e:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    1030:	6903      	ldr	r3, [r0, #16]
    1032:	b163      	cbz	r3, 104e <File::~File()+0x26>
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
    1034:	685a      	ldr	r2, [r3, #4]
    1036:	3a01      	subs	r2, #1
    1038:	605a      	str	r2, [r3, #4]
    103a:	b942      	cbnz	r2, 104e <File::~File()+0x26>
			f->close();
    103c:	6900      	ldr	r0, [r0, #16]
    103e:	6803      	ldr	r3, [r0, #0]
    1040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1042:	4798      	blx	r3
			delete f;
    1044:	6920      	ldr	r0, [r4, #16]
    1046:	b110      	cbz	r0, 104e <File::~File()+0x26>
    1048:	6803      	ldr	r3, [r0, #0]
    104a:	685b      	ldr	r3, [r3, #4]
    104c:	4798      	blx	r3
	}
    104e:	4620      	mov	r0, r4
    1050:	bd10      	pop	{r4, pc}
    1052:	bf00      	nop
    1054:	20002750 	.word	0x20002750

00001058 <File::~File()>:
	virtual ~File() {
    1058:	b510      	push	{r4, lr}
    105a:	4604      	mov	r4, r0
    105c:	4b0b      	ldr	r3, [pc, #44]	; (108c <File::~File()+0x34>)
    105e:	6003      	str	r3, [r0, #0]
		if (f) dec_refcount();
    1060:	6903      	ldr	r3, [r0, #16]
    1062:	b163      	cbz	r3, 107e <File::~File()+0x26>
		if (--(f->refcount) == 0) {
    1064:	685a      	ldr	r2, [r3, #4]
    1066:	3a01      	subs	r2, #1
    1068:	605a      	str	r2, [r3, #4]
    106a:	b942      	cbnz	r2, 107e <File::~File()+0x26>
			f->close();
    106c:	6900      	ldr	r0, [r0, #16]
    106e:	6803      	ldr	r3, [r0, #0]
    1070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1072:	4798      	blx	r3
			delete f;
    1074:	6920      	ldr	r0, [r4, #16]
    1076:	b110      	cbz	r0, 107e <File::~File()+0x26>
    1078:	6803      	ldr	r3, [r0, #0]
    107a:	685b      	ldr	r3, [r3, #4]
    107c:	4798      	blx	r3
	}
    107e:	2114      	movs	r1, #20
    1080:	4620      	mov	r0, r4
    1082:	f016 f9df 	bl	17444 <operator delete(void*, unsigned int)>
    1086:	4620      	mov	r0, r4
    1088:	bd10      	pop	{r4, pc}
    108a:	bf00      	nop
    108c:	20002750 	.word	0x20002750

00001090 <Encoder::isr0()>:
#endif // ENCODER_USE_INTERRUPTS


#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
    1090:	b410      	push	{r4}
    1092:	4b19      	ldr	r3, [pc, #100]	; (10f8 <Encoder::isr0()+0x68>)
    1094:	681a      	ldr	r2, [r3, #0]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1096:	6813      	ldr	r3, [r2, #0]
    1098:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    109a:	6853      	ldr	r3, [r2, #4]
    109c:	6819      	ldr	r1, [r3, #0]
    109e:	68d3      	ldr	r3, [r2, #12]
    10a0:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    10a2:	7c13      	ldrb	r3, [r2, #16]
    10a4:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    10a8:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    10aa:	4204      	tst	r4, r0
    10ac:	bf18      	it	ne
    10ae:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    10b2:	b109      	cbz	r1, 10b8 <Encoder::isr0()+0x28>
    10b4:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    10b8:	0899      	lsrs	r1, r3, #2
    10ba:	7411      	strb	r1, [r2, #16]
		switch (state) {
    10bc:	3b01      	subs	r3, #1
    10be:	2b0d      	cmp	r3, #13
    10c0:	d80b      	bhi.n	10da <Encoder::isr0()+0x4a>
    10c2:	e8df f003 	tbb	[pc, r3]
    10c6:	0d07      	.short	0x0d07
    10c8:	150a0d11 	.word	0x150a0d11
    10cc:	0a150707 	.word	0x0a150707
    10d0:	070d110d 	.word	0x070d110d
				arg->position++;
    10d4:	6953      	ldr	r3, [r2, #20]
    10d6:	3301      	adds	r3, #1
    10d8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
    10da:	f85d 4b04 	ldr.w	r4, [sp], #4
    10de:	4770      	bx	lr
				arg->position--;
    10e0:	6953      	ldr	r3, [r2, #20]
    10e2:	3b01      	subs	r3, #1
    10e4:	6153      	str	r3, [r2, #20]
				return;
    10e6:	e7f8      	b.n	10da <Encoder::isr0()+0x4a>
				arg->position += 2;
    10e8:	6953      	ldr	r3, [r2, #20]
    10ea:	3302      	adds	r3, #2
    10ec:	6153      	str	r3, [r2, #20]
				return;
    10ee:	e7f4      	b.n	10da <Encoder::isr0()+0x4a>
				arg->position -= 2;
    10f0:	6953      	ldr	r3, [r2, #20]
    10f2:	3b02      	subs	r3, #2
    10f4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
    10f6:	e7f0      	b.n	10da <Encoder::isr0()+0x4a>
    10f8:	20006eec 	.word	0x20006eec

000010fc <Encoder::isr2()>:
	#endif
	#ifdef CORE_INT1_PIN
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
	#endif
	#ifdef CORE_INT2_PIN
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    10fc:	b410      	push	{r4}
    10fe:	4b19      	ldr	r3, [pc, #100]	; (1164 <Encoder::isr2()+0x68>)
    1100:	689a      	ldr	r2, [r3, #8]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1102:	6813      	ldr	r3, [r2, #0]
    1104:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1106:	6853      	ldr	r3, [r2, #4]
    1108:	6819      	ldr	r1, [r3, #0]
    110a:	68d3      	ldr	r3, [r2, #12]
    110c:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    110e:	7c13      	ldrb	r3, [r2, #16]
    1110:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1114:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1116:	4204      	tst	r4, r0
    1118:	bf18      	it	ne
    111a:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    111e:	b109      	cbz	r1, 1124 <Encoder::isr2()+0x28>
    1120:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1124:	0899      	lsrs	r1, r3, #2
    1126:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1128:	3b01      	subs	r3, #1
    112a:	2b0d      	cmp	r3, #13
    112c:	d80b      	bhi.n	1146 <Encoder::isr2()+0x4a>
    112e:	e8df f003 	tbb	[pc, r3]
    1132:	0d07      	.short	0x0d07
    1134:	150a0d11 	.word	0x150a0d11
    1138:	0a150707 	.word	0x0a150707
    113c:	070d110d 	.word	0x070d110d
				arg->position++;
    1140:	6953      	ldr	r3, [r2, #20]
    1142:	3301      	adds	r3, #1
    1144:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    1146:	f85d 4b04 	ldr.w	r4, [sp], #4
    114a:	4770      	bx	lr
				arg->position--;
    114c:	6953      	ldr	r3, [r2, #20]
    114e:	3b01      	subs	r3, #1
    1150:	6153      	str	r3, [r2, #20]
				return;
    1152:	e7f8      	b.n	1146 <Encoder::isr2()+0x4a>
				arg->position += 2;
    1154:	6953      	ldr	r3, [r2, #20]
    1156:	3302      	adds	r3, #2
    1158:	6153      	str	r3, [r2, #20]
				return;
    115a:	e7f4      	b.n	1146 <Encoder::isr2()+0x4a>
				arg->position -= 2;
    115c:	6953      	ldr	r3, [r2, #20]
    115e:	3b02      	subs	r3, #2
    1160:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    1162:	e7f0      	b.n	1146 <Encoder::isr2()+0x4a>
    1164:	20006eec 	.word	0x20006eec

00001168 <Encoder::isr3()>:
	#endif
	#ifdef CORE_INT3_PIN
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1168:	b410      	push	{r4}
    116a:	4b19      	ldr	r3, [pc, #100]	; (11d0 <Encoder::isr3()+0x68>)
    116c:	68da      	ldr	r2, [r3, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    116e:	6813      	ldr	r3, [r2, #0]
    1170:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1172:	6853      	ldr	r3, [r2, #4]
    1174:	6819      	ldr	r1, [r3, #0]
    1176:	68d3      	ldr	r3, [r2, #12]
    1178:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    117a:	7c13      	ldrb	r3, [r2, #16]
    117c:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1180:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1182:	4204      	tst	r4, r0
    1184:	bf18      	it	ne
    1186:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    118a:	b109      	cbz	r1, 1190 <Encoder::isr3()+0x28>
    118c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1190:	0899      	lsrs	r1, r3, #2
    1192:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1194:	3b01      	subs	r3, #1
    1196:	2b0d      	cmp	r3, #13
    1198:	d80b      	bhi.n	11b2 <Encoder::isr3()+0x4a>
    119a:	e8df f003 	tbb	[pc, r3]
    119e:	0d07      	.short	0x0d07
    11a0:	150a0d11 	.word	0x150a0d11
    11a4:	0a150707 	.word	0x0a150707
    11a8:	070d110d 	.word	0x070d110d
				arg->position++;
    11ac:	6953      	ldr	r3, [r2, #20]
    11ae:	3301      	adds	r3, #1
    11b0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    11b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    11b6:	4770      	bx	lr
				arg->position--;
    11b8:	6953      	ldr	r3, [r2, #20]
    11ba:	3b01      	subs	r3, #1
    11bc:	6153      	str	r3, [r2, #20]
				return;
    11be:	e7f8      	b.n	11b2 <Encoder::isr3()+0x4a>
				arg->position += 2;
    11c0:	6953      	ldr	r3, [r2, #20]
    11c2:	3302      	adds	r3, #2
    11c4:	6153      	str	r3, [r2, #20]
				return;
    11c6:	e7f4      	b.n	11b2 <Encoder::isr3()+0x4a>
				arg->position -= 2;
    11c8:	6953      	ldr	r3, [r2, #20]
    11ca:	3b02      	subs	r3, #2
    11cc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    11ce:	e7f0      	b.n	11b2 <Encoder::isr3()+0x4a>
    11d0:	20006eec 	.word	0x20006eec

000011d4 <Encoder::isr1()>:
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    11d4:	b410      	push	{r4}
    11d6:	4b19      	ldr	r3, [pc, #100]	; (123c <Encoder::isr1()+0x68>)
    11d8:	685a      	ldr	r2, [r3, #4]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    11da:	6813      	ldr	r3, [r2, #0]
    11dc:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    11de:	6853      	ldr	r3, [r2, #4]
    11e0:	6819      	ldr	r1, [r3, #0]
    11e2:	68d3      	ldr	r3, [r2, #12]
    11e4:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    11e6:	7c13      	ldrb	r3, [r2, #16]
    11e8:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    11ec:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    11ee:	4204      	tst	r4, r0
    11f0:	bf18      	it	ne
    11f2:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    11f6:	b109      	cbz	r1, 11fc <Encoder::isr1()+0x28>
    11f8:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    11fc:	0899      	lsrs	r1, r3, #2
    11fe:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1200:	3b01      	subs	r3, #1
    1202:	2b0d      	cmp	r3, #13
    1204:	d80b      	bhi.n	121e <Encoder::isr1()+0x4a>
    1206:	e8df f003 	tbb	[pc, r3]
    120a:	0d07      	.short	0x0d07
    120c:	150a0d11 	.word	0x150a0d11
    1210:	0a150707 	.word	0x0a150707
    1214:	070d110d 	.word	0x070d110d
				arg->position++;
    1218:	6953      	ldr	r3, [r2, #20]
    121a:	3301      	adds	r3, #1
    121c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    121e:	f85d 4b04 	ldr.w	r4, [sp], #4
    1222:	4770      	bx	lr
				arg->position--;
    1224:	6953      	ldr	r3, [r2, #20]
    1226:	3b01      	subs	r3, #1
    1228:	6153      	str	r3, [r2, #20]
				return;
    122a:	e7f8      	b.n	121e <Encoder::isr1()+0x4a>
				arg->position += 2;
    122c:	6953      	ldr	r3, [r2, #20]
    122e:	3302      	adds	r3, #2
    1230:	6153      	str	r3, [r2, #20]
				return;
    1232:	e7f4      	b.n	121e <Encoder::isr1()+0x4a>
				arg->position -= 2;
    1234:	6953      	ldr	r3, [r2, #20]
    1236:	3b02      	subs	r3, #2
    1238:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    123a:	e7f0      	b.n	121e <Encoder::isr1()+0x4a>
    123c:	20006eec 	.word	0x20006eec

00001240 <Encoder::isr54()>:
	#endif
	#ifdef CORE_INT53_PIN
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
	#endif
	#ifdef CORE_INT54_PIN
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    1240:	b410      	push	{r4}
    1242:	4b1a      	ldr	r3, [pc, #104]	; (12ac <Encoder::isr54()+0x6c>)
    1244:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1248:	6813      	ldr	r3, [r2, #0]
    124a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    124c:	6853      	ldr	r3, [r2, #4]
    124e:	6819      	ldr	r1, [r3, #0]
    1250:	68d3      	ldr	r3, [r2, #12]
    1252:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1254:	7c13      	ldrb	r3, [r2, #16]
    1256:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    125a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    125c:	4204      	tst	r4, r0
    125e:	bf18      	it	ne
    1260:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1264:	b109      	cbz	r1, 126a <Encoder::isr54()+0x2a>
    1266:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    126a:	0899      	lsrs	r1, r3, #2
    126c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    126e:	3b01      	subs	r3, #1
    1270:	2b0d      	cmp	r3, #13
    1272:	d80b      	bhi.n	128c <Encoder::isr54()+0x4c>
    1274:	e8df f003 	tbb	[pc, r3]
    1278:	0d110d07 	.word	0x0d110d07
    127c:	0707150a 	.word	0x0707150a
    1280:	110d0a15 	.word	0x110d0a15
    1284:	070d      	.short	0x070d
				arg->position++;
    1286:	6953      	ldr	r3, [r2, #20]
    1288:	3301      	adds	r3, #1
    128a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    128c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1290:	4770      	bx	lr
				arg->position--;
    1292:	6953      	ldr	r3, [r2, #20]
    1294:	3b01      	subs	r3, #1
    1296:	6153      	str	r3, [r2, #20]
				return;
    1298:	e7f8      	b.n	128c <Encoder::isr54()+0x4c>
				arg->position += 2;
    129a:	6953      	ldr	r3, [r2, #20]
    129c:	3302      	adds	r3, #2
    129e:	6153      	str	r3, [r2, #20]
				return;
    12a0:	e7f4      	b.n	128c <Encoder::isr54()+0x4c>
				arg->position -= 2;
    12a2:	6953      	ldr	r3, [r2, #20]
    12a4:	3b02      	subs	r3, #2
    12a6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    12a8:	e7f0      	b.n	128c <Encoder::isr54()+0x4c>
    12aa:	bf00      	nop
    12ac:	20006eec 	.word	0x20006eec

000012b0 <Encoder::isr44()>:
	static ENCODER_ISR_ATTR void isr44(void) { update(interruptArgs[44]); }
    12b0:	b410      	push	{r4}
    12b2:	4b1a      	ldr	r3, [pc, #104]	; (131c <Encoder::isr44()+0x6c>)
    12b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    12b8:	6813      	ldr	r3, [r2, #0]
    12ba:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    12bc:	6853      	ldr	r3, [r2, #4]
    12be:	6819      	ldr	r1, [r3, #0]
    12c0:	68d3      	ldr	r3, [r2, #12]
    12c2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    12c4:	7c13      	ldrb	r3, [r2, #16]
    12c6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    12ca:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    12cc:	4204      	tst	r4, r0
    12ce:	bf18      	it	ne
    12d0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    12d4:	b109      	cbz	r1, 12da <Encoder::isr44()+0x2a>
    12d6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    12da:	0899      	lsrs	r1, r3, #2
    12dc:	7411      	strb	r1, [r2, #16]
		switch (state) {
    12de:	3b01      	subs	r3, #1
    12e0:	2b0d      	cmp	r3, #13
    12e2:	d80b      	bhi.n	12fc <Encoder::isr44()+0x4c>
    12e4:	e8df f003 	tbb	[pc, r3]
    12e8:	0d110d07 	.word	0x0d110d07
    12ec:	0707150a 	.word	0x0707150a
    12f0:	110d0a15 	.word	0x110d0a15
    12f4:	070d      	.short	0x070d
				arg->position++;
    12f6:	6953      	ldr	r3, [r2, #20]
    12f8:	3301      	adds	r3, #1
    12fa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr44(void) { update(interruptArgs[44]); }
    12fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1300:	4770      	bx	lr
				arg->position--;
    1302:	6953      	ldr	r3, [r2, #20]
    1304:	3b01      	subs	r3, #1
    1306:	6153      	str	r3, [r2, #20]
				return;
    1308:	e7f8      	b.n	12fc <Encoder::isr44()+0x4c>
				arg->position += 2;
    130a:	6953      	ldr	r3, [r2, #20]
    130c:	3302      	adds	r3, #2
    130e:	6153      	str	r3, [r2, #20]
				return;
    1310:	e7f4      	b.n	12fc <Encoder::isr44()+0x4c>
				arg->position -= 2;
    1312:	6953      	ldr	r3, [r2, #20]
    1314:	3b02      	subs	r3, #2
    1316:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr44(void) { update(interruptArgs[44]); }
    1318:	e7f0      	b.n	12fc <Encoder::isr44()+0x4c>
    131a:	bf00      	nop
    131c:	20006eec 	.word	0x20006eec

00001320 <Encoder::isr45()>:
	static ENCODER_ISR_ATTR void isr45(void) { update(interruptArgs[45]); }
    1320:	b410      	push	{r4}
    1322:	4b1a      	ldr	r3, [pc, #104]	; (138c <Encoder::isr45()+0x6c>)
    1324:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1328:	6813      	ldr	r3, [r2, #0]
    132a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    132c:	6853      	ldr	r3, [r2, #4]
    132e:	6819      	ldr	r1, [r3, #0]
    1330:	68d3      	ldr	r3, [r2, #12]
    1332:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1334:	7c13      	ldrb	r3, [r2, #16]
    1336:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    133a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    133c:	4204      	tst	r4, r0
    133e:	bf18      	it	ne
    1340:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1344:	b109      	cbz	r1, 134a <Encoder::isr45()+0x2a>
    1346:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    134a:	0899      	lsrs	r1, r3, #2
    134c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    134e:	3b01      	subs	r3, #1
    1350:	2b0d      	cmp	r3, #13
    1352:	d80b      	bhi.n	136c <Encoder::isr45()+0x4c>
    1354:	e8df f003 	tbb	[pc, r3]
    1358:	0d110d07 	.word	0x0d110d07
    135c:	0707150a 	.word	0x0707150a
    1360:	110d0a15 	.word	0x110d0a15
    1364:	070d      	.short	0x070d
				arg->position++;
    1366:	6953      	ldr	r3, [r2, #20]
    1368:	3301      	adds	r3, #1
    136a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr45(void) { update(interruptArgs[45]); }
    136c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1370:	4770      	bx	lr
				arg->position--;
    1372:	6953      	ldr	r3, [r2, #20]
    1374:	3b01      	subs	r3, #1
    1376:	6153      	str	r3, [r2, #20]
				return;
    1378:	e7f8      	b.n	136c <Encoder::isr45()+0x4c>
				arg->position += 2;
    137a:	6953      	ldr	r3, [r2, #20]
    137c:	3302      	adds	r3, #2
    137e:	6153      	str	r3, [r2, #20]
				return;
    1380:	e7f4      	b.n	136c <Encoder::isr45()+0x4c>
				arg->position -= 2;
    1382:	6953      	ldr	r3, [r2, #20]
    1384:	3b02      	subs	r3, #2
    1386:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr45(void) { update(interruptArgs[45]); }
    1388:	e7f0      	b.n	136c <Encoder::isr45()+0x4c>
    138a:	bf00      	nop
    138c:	20006eec 	.word	0x20006eec

00001390 <Encoder::isr46()>:
	static ENCODER_ISR_ATTR void isr46(void) { update(interruptArgs[46]); }
    1390:	b410      	push	{r4}
    1392:	4b1a      	ldr	r3, [pc, #104]	; (13fc <Encoder::isr46()+0x6c>)
    1394:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1398:	6813      	ldr	r3, [r2, #0]
    139a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    139c:	6853      	ldr	r3, [r2, #4]
    139e:	6819      	ldr	r1, [r3, #0]
    13a0:	68d3      	ldr	r3, [r2, #12]
    13a2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    13a4:	7c13      	ldrb	r3, [r2, #16]
    13a6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    13aa:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    13ac:	4204      	tst	r4, r0
    13ae:	bf18      	it	ne
    13b0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    13b4:	b109      	cbz	r1, 13ba <Encoder::isr46()+0x2a>
    13b6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    13ba:	0899      	lsrs	r1, r3, #2
    13bc:	7411      	strb	r1, [r2, #16]
		switch (state) {
    13be:	3b01      	subs	r3, #1
    13c0:	2b0d      	cmp	r3, #13
    13c2:	d80b      	bhi.n	13dc <Encoder::isr46()+0x4c>
    13c4:	e8df f003 	tbb	[pc, r3]
    13c8:	0d110d07 	.word	0x0d110d07
    13cc:	0707150a 	.word	0x0707150a
    13d0:	110d0a15 	.word	0x110d0a15
    13d4:	070d      	.short	0x070d
				arg->position++;
    13d6:	6953      	ldr	r3, [r2, #20]
    13d8:	3301      	adds	r3, #1
    13da:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr46(void) { update(interruptArgs[46]); }
    13dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    13e0:	4770      	bx	lr
				arg->position--;
    13e2:	6953      	ldr	r3, [r2, #20]
    13e4:	3b01      	subs	r3, #1
    13e6:	6153      	str	r3, [r2, #20]
				return;
    13e8:	e7f8      	b.n	13dc <Encoder::isr46()+0x4c>
				arg->position += 2;
    13ea:	6953      	ldr	r3, [r2, #20]
    13ec:	3302      	adds	r3, #2
    13ee:	6153      	str	r3, [r2, #20]
				return;
    13f0:	e7f4      	b.n	13dc <Encoder::isr46()+0x4c>
				arg->position -= 2;
    13f2:	6953      	ldr	r3, [r2, #20]
    13f4:	3b02      	subs	r3, #2
    13f6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr46(void) { update(interruptArgs[46]); }
    13f8:	e7f0      	b.n	13dc <Encoder::isr46()+0x4c>
    13fa:	bf00      	nop
    13fc:	20006eec 	.word	0x20006eec

00001400 <Encoder::isr47()>:
	static ENCODER_ISR_ATTR void isr47(void) { update(interruptArgs[47]); }
    1400:	b410      	push	{r4}
    1402:	4b1a      	ldr	r3, [pc, #104]	; (146c <Encoder::isr47()+0x6c>)
    1404:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1408:	6813      	ldr	r3, [r2, #0]
    140a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    140c:	6853      	ldr	r3, [r2, #4]
    140e:	6819      	ldr	r1, [r3, #0]
    1410:	68d3      	ldr	r3, [r2, #12]
    1412:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1414:	7c13      	ldrb	r3, [r2, #16]
    1416:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    141a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    141c:	4204      	tst	r4, r0
    141e:	bf18      	it	ne
    1420:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1424:	b109      	cbz	r1, 142a <Encoder::isr47()+0x2a>
    1426:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    142a:	0899      	lsrs	r1, r3, #2
    142c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    142e:	3b01      	subs	r3, #1
    1430:	2b0d      	cmp	r3, #13
    1432:	d80b      	bhi.n	144c <Encoder::isr47()+0x4c>
    1434:	e8df f003 	tbb	[pc, r3]
    1438:	0d110d07 	.word	0x0d110d07
    143c:	0707150a 	.word	0x0707150a
    1440:	110d0a15 	.word	0x110d0a15
    1444:	070d      	.short	0x070d
				arg->position++;
    1446:	6953      	ldr	r3, [r2, #20]
    1448:	3301      	adds	r3, #1
    144a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr47(void) { update(interruptArgs[47]); }
    144c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1450:	4770      	bx	lr
				arg->position--;
    1452:	6953      	ldr	r3, [r2, #20]
    1454:	3b01      	subs	r3, #1
    1456:	6153      	str	r3, [r2, #20]
				return;
    1458:	e7f8      	b.n	144c <Encoder::isr47()+0x4c>
				arg->position += 2;
    145a:	6953      	ldr	r3, [r2, #20]
    145c:	3302      	adds	r3, #2
    145e:	6153      	str	r3, [r2, #20]
				return;
    1460:	e7f4      	b.n	144c <Encoder::isr47()+0x4c>
				arg->position -= 2;
    1462:	6953      	ldr	r3, [r2, #20]
    1464:	3b02      	subs	r3, #2
    1466:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr47(void) { update(interruptArgs[47]); }
    1468:	e7f0      	b.n	144c <Encoder::isr47()+0x4c>
    146a:	bf00      	nop
    146c:	20006eec 	.word	0x20006eec

00001470 <Encoder::isr48()>:
	static ENCODER_ISR_ATTR void isr48(void) { update(interruptArgs[48]); }
    1470:	b410      	push	{r4}
    1472:	4b1a      	ldr	r3, [pc, #104]	; (14dc <Encoder::isr48()+0x6c>)
    1474:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1478:	6813      	ldr	r3, [r2, #0]
    147a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    147c:	6853      	ldr	r3, [r2, #4]
    147e:	6819      	ldr	r1, [r3, #0]
    1480:	68d3      	ldr	r3, [r2, #12]
    1482:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1484:	7c13      	ldrb	r3, [r2, #16]
    1486:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    148a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    148c:	4204      	tst	r4, r0
    148e:	bf18      	it	ne
    1490:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1494:	b109      	cbz	r1, 149a <Encoder::isr48()+0x2a>
    1496:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    149a:	0899      	lsrs	r1, r3, #2
    149c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    149e:	3b01      	subs	r3, #1
    14a0:	2b0d      	cmp	r3, #13
    14a2:	d80b      	bhi.n	14bc <Encoder::isr48()+0x4c>
    14a4:	e8df f003 	tbb	[pc, r3]
    14a8:	0d110d07 	.word	0x0d110d07
    14ac:	0707150a 	.word	0x0707150a
    14b0:	110d0a15 	.word	0x110d0a15
    14b4:	070d      	.short	0x070d
				arg->position++;
    14b6:	6953      	ldr	r3, [r2, #20]
    14b8:	3301      	adds	r3, #1
    14ba:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr48(void) { update(interruptArgs[48]); }
    14bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    14c0:	4770      	bx	lr
				arg->position--;
    14c2:	6953      	ldr	r3, [r2, #20]
    14c4:	3b01      	subs	r3, #1
    14c6:	6153      	str	r3, [r2, #20]
				return;
    14c8:	e7f8      	b.n	14bc <Encoder::isr48()+0x4c>
				arg->position += 2;
    14ca:	6953      	ldr	r3, [r2, #20]
    14cc:	3302      	adds	r3, #2
    14ce:	6153      	str	r3, [r2, #20]
				return;
    14d0:	e7f4      	b.n	14bc <Encoder::isr48()+0x4c>
				arg->position -= 2;
    14d2:	6953      	ldr	r3, [r2, #20]
    14d4:	3b02      	subs	r3, #2
    14d6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr48(void) { update(interruptArgs[48]); }
    14d8:	e7f0      	b.n	14bc <Encoder::isr48()+0x4c>
    14da:	bf00      	nop
    14dc:	20006eec 	.word	0x20006eec

000014e0 <Encoder::isr49()>:
	static ENCODER_ISR_ATTR void isr49(void) { update(interruptArgs[49]); }
    14e0:	b410      	push	{r4}
    14e2:	4b1a      	ldr	r3, [pc, #104]	; (154c <Encoder::isr49()+0x6c>)
    14e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    14e8:	6813      	ldr	r3, [r2, #0]
    14ea:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    14ec:	6853      	ldr	r3, [r2, #4]
    14ee:	6819      	ldr	r1, [r3, #0]
    14f0:	68d3      	ldr	r3, [r2, #12]
    14f2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    14f4:	7c13      	ldrb	r3, [r2, #16]
    14f6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    14fa:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    14fc:	4204      	tst	r4, r0
    14fe:	bf18      	it	ne
    1500:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1504:	b109      	cbz	r1, 150a <Encoder::isr49()+0x2a>
    1506:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    150a:	0899      	lsrs	r1, r3, #2
    150c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    150e:	3b01      	subs	r3, #1
    1510:	2b0d      	cmp	r3, #13
    1512:	d80b      	bhi.n	152c <Encoder::isr49()+0x4c>
    1514:	e8df f003 	tbb	[pc, r3]
    1518:	0d110d07 	.word	0x0d110d07
    151c:	0707150a 	.word	0x0707150a
    1520:	110d0a15 	.word	0x110d0a15
    1524:	070d      	.short	0x070d
				arg->position++;
    1526:	6953      	ldr	r3, [r2, #20]
    1528:	3301      	adds	r3, #1
    152a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr49(void) { update(interruptArgs[49]); }
    152c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1530:	4770      	bx	lr
				arg->position--;
    1532:	6953      	ldr	r3, [r2, #20]
    1534:	3b01      	subs	r3, #1
    1536:	6153      	str	r3, [r2, #20]
				return;
    1538:	e7f8      	b.n	152c <Encoder::isr49()+0x4c>
				arg->position += 2;
    153a:	6953      	ldr	r3, [r2, #20]
    153c:	3302      	adds	r3, #2
    153e:	6153      	str	r3, [r2, #20]
				return;
    1540:	e7f4      	b.n	152c <Encoder::isr49()+0x4c>
				arg->position -= 2;
    1542:	6953      	ldr	r3, [r2, #20]
    1544:	3b02      	subs	r3, #2
    1546:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr49(void) { update(interruptArgs[49]); }
    1548:	e7f0      	b.n	152c <Encoder::isr49()+0x4c>
    154a:	bf00      	nop
    154c:	20006eec 	.word	0x20006eec

00001550 <Encoder::isr50()>:
	static ENCODER_ISR_ATTR void isr50(void) { update(interruptArgs[50]); }
    1550:	b410      	push	{r4}
    1552:	4b1a      	ldr	r3, [pc, #104]	; (15bc <Encoder::isr50()+0x6c>)
    1554:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1558:	6813      	ldr	r3, [r2, #0]
    155a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    155c:	6853      	ldr	r3, [r2, #4]
    155e:	6819      	ldr	r1, [r3, #0]
    1560:	68d3      	ldr	r3, [r2, #12]
    1562:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1564:	7c13      	ldrb	r3, [r2, #16]
    1566:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    156a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    156c:	4204      	tst	r4, r0
    156e:	bf18      	it	ne
    1570:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1574:	b109      	cbz	r1, 157a <Encoder::isr50()+0x2a>
    1576:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    157a:	0899      	lsrs	r1, r3, #2
    157c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    157e:	3b01      	subs	r3, #1
    1580:	2b0d      	cmp	r3, #13
    1582:	d80b      	bhi.n	159c <Encoder::isr50()+0x4c>
    1584:	e8df f003 	tbb	[pc, r3]
    1588:	0d110d07 	.word	0x0d110d07
    158c:	0707150a 	.word	0x0707150a
    1590:	110d0a15 	.word	0x110d0a15
    1594:	070d      	.short	0x070d
				arg->position++;
    1596:	6953      	ldr	r3, [r2, #20]
    1598:	3301      	adds	r3, #1
    159a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr50(void) { update(interruptArgs[50]); }
    159c:	f85d 4b04 	ldr.w	r4, [sp], #4
    15a0:	4770      	bx	lr
				arg->position--;
    15a2:	6953      	ldr	r3, [r2, #20]
    15a4:	3b01      	subs	r3, #1
    15a6:	6153      	str	r3, [r2, #20]
				return;
    15a8:	e7f8      	b.n	159c <Encoder::isr50()+0x4c>
				arg->position += 2;
    15aa:	6953      	ldr	r3, [r2, #20]
    15ac:	3302      	adds	r3, #2
    15ae:	6153      	str	r3, [r2, #20]
				return;
    15b0:	e7f4      	b.n	159c <Encoder::isr50()+0x4c>
				arg->position -= 2;
    15b2:	6953      	ldr	r3, [r2, #20]
    15b4:	3b02      	subs	r3, #2
    15b6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr50(void) { update(interruptArgs[50]); }
    15b8:	e7f0      	b.n	159c <Encoder::isr50()+0x4c>
    15ba:	bf00      	nop
    15bc:	20006eec 	.word	0x20006eec

000015c0 <Encoder::isr51()>:
	static ENCODER_ISR_ATTR void isr51(void) { update(interruptArgs[51]); }
    15c0:	b410      	push	{r4}
    15c2:	4b1a      	ldr	r3, [pc, #104]	; (162c <Encoder::isr51()+0x6c>)
    15c4:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    15c8:	6813      	ldr	r3, [r2, #0]
    15ca:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    15cc:	6853      	ldr	r3, [r2, #4]
    15ce:	6819      	ldr	r1, [r3, #0]
    15d0:	68d3      	ldr	r3, [r2, #12]
    15d2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    15d4:	7c13      	ldrb	r3, [r2, #16]
    15d6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    15da:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    15dc:	4204      	tst	r4, r0
    15de:	bf18      	it	ne
    15e0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    15e4:	b109      	cbz	r1, 15ea <Encoder::isr51()+0x2a>
    15e6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    15ea:	0899      	lsrs	r1, r3, #2
    15ec:	7411      	strb	r1, [r2, #16]
		switch (state) {
    15ee:	3b01      	subs	r3, #1
    15f0:	2b0d      	cmp	r3, #13
    15f2:	d80b      	bhi.n	160c <Encoder::isr51()+0x4c>
    15f4:	e8df f003 	tbb	[pc, r3]
    15f8:	0d110d07 	.word	0x0d110d07
    15fc:	0707150a 	.word	0x0707150a
    1600:	110d0a15 	.word	0x110d0a15
    1604:	070d      	.short	0x070d
				arg->position++;
    1606:	6953      	ldr	r3, [r2, #20]
    1608:	3301      	adds	r3, #1
    160a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr51(void) { update(interruptArgs[51]); }
    160c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1610:	4770      	bx	lr
				arg->position--;
    1612:	6953      	ldr	r3, [r2, #20]
    1614:	3b01      	subs	r3, #1
    1616:	6153      	str	r3, [r2, #20]
				return;
    1618:	e7f8      	b.n	160c <Encoder::isr51()+0x4c>
				arg->position += 2;
    161a:	6953      	ldr	r3, [r2, #20]
    161c:	3302      	adds	r3, #2
    161e:	6153      	str	r3, [r2, #20]
				return;
    1620:	e7f4      	b.n	160c <Encoder::isr51()+0x4c>
				arg->position -= 2;
    1622:	6953      	ldr	r3, [r2, #20]
    1624:	3b02      	subs	r3, #2
    1626:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr51(void) { update(interruptArgs[51]); }
    1628:	e7f0      	b.n	160c <Encoder::isr51()+0x4c>
    162a:	bf00      	nop
    162c:	20006eec 	.word	0x20006eec

00001630 <Encoder::isr28()>:
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1630:	b410      	push	{r4}
    1632:	4b19      	ldr	r3, [pc, #100]	; (1698 <Encoder::isr28()+0x68>)
    1634:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1636:	6813      	ldr	r3, [r2, #0]
    1638:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    163a:	6853      	ldr	r3, [r2, #4]
    163c:	6819      	ldr	r1, [r3, #0]
    163e:	68d3      	ldr	r3, [r2, #12]
    1640:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1642:	7c13      	ldrb	r3, [r2, #16]
    1644:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1648:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    164a:	4204      	tst	r4, r0
    164c:	bf18      	it	ne
    164e:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1652:	b109      	cbz	r1, 1658 <Encoder::isr28()+0x28>
    1654:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1658:	0899      	lsrs	r1, r3, #2
    165a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    165c:	3b01      	subs	r3, #1
    165e:	2b0d      	cmp	r3, #13
    1660:	d80b      	bhi.n	167a <Encoder::isr28()+0x4a>
    1662:	e8df f003 	tbb	[pc, r3]
    1666:	0d07      	.short	0x0d07
    1668:	150a0d11 	.word	0x150a0d11
    166c:	0a150707 	.word	0x0a150707
    1670:	070d110d 	.word	0x070d110d
				arg->position++;
    1674:	6953      	ldr	r3, [r2, #20]
    1676:	3301      	adds	r3, #1
    1678:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    167a:	f85d 4b04 	ldr.w	r4, [sp], #4
    167e:	4770      	bx	lr
				arg->position--;
    1680:	6953      	ldr	r3, [r2, #20]
    1682:	3b01      	subs	r3, #1
    1684:	6153      	str	r3, [r2, #20]
				return;
    1686:	e7f8      	b.n	167a <Encoder::isr28()+0x4a>
				arg->position += 2;
    1688:	6953      	ldr	r3, [r2, #20]
    168a:	3302      	adds	r3, #2
    168c:	6153      	str	r3, [r2, #20]
				return;
    168e:	e7f4      	b.n	167a <Encoder::isr28()+0x4a>
				arg->position -= 2;
    1690:	6953      	ldr	r3, [r2, #20]
    1692:	3b02      	subs	r3, #2
    1694:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    1696:	e7f0      	b.n	167a <Encoder::isr28()+0x4a>
    1698:	20006eec 	.word	0x20006eec

0000169c <Encoder::isr29()>:
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    169c:	b410      	push	{r4}
    169e:	4b19      	ldr	r3, [pc, #100]	; (1704 <Encoder::isr29()+0x68>)
    16a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16a2:	6813      	ldr	r3, [r2, #0]
    16a4:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16a6:	6853      	ldr	r3, [r2, #4]
    16a8:	6819      	ldr	r1, [r3, #0]
    16aa:	68d3      	ldr	r3, [r2, #12]
    16ac:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    16ae:	7c13      	ldrb	r3, [r2, #16]
    16b0:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16b4:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    16b6:	4204      	tst	r4, r0
    16b8:	bf18      	it	ne
    16ba:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    16be:	b109      	cbz	r1, 16c4 <Encoder::isr29()+0x28>
    16c0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    16c4:	0899      	lsrs	r1, r3, #2
    16c6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    16c8:	3b01      	subs	r3, #1
    16ca:	2b0d      	cmp	r3, #13
    16cc:	d80b      	bhi.n	16e6 <Encoder::isr29()+0x4a>
    16ce:	e8df f003 	tbb	[pc, r3]
    16d2:	0d07      	.short	0x0d07
    16d4:	150a0d11 	.word	0x150a0d11
    16d8:	0a150707 	.word	0x0a150707
    16dc:	070d110d 	.word	0x070d110d
				arg->position++;
    16e0:	6953      	ldr	r3, [r2, #20]
    16e2:	3301      	adds	r3, #1
    16e4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    16e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    16ea:	4770      	bx	lr
				arg->position--;
    16ec:	6953      	ldr	r3, [r2, #20]
    16ee:	3b01      	subs	r3, #1
    16f0:	6153      	str	r3, [r2, #20]
				return;
    16f2:	e7f8      	b.n	16e6 <Encoder::isr29()+0x4a>
				arg->position += 2;
    16f4:	6953      	ldr	r3, [r2, #20]
    16f6:	3302      	adds	r3, #2
    16f8:	6153      	str	r3, [r2, #20]
				return;
    16fa:	e7f4      	b.n	16e6 <Encoder::isr29()+0x4a>
				arg->position -= 2;
    16fc:	6953      	ldr	r3, [r2, #20]
    16fe:	3b02      	subs	r3, #2
    1700:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    1702:	e7f0      	b.n	16e6 <Encoder::isr29()+0x4a>
    1704:	20006eec 	.word	0x20006eec

00001708 <Encoder::isr30()>:
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1708:	b410      	push	{r4}
    170a:	4b19      	ldr	r3, [pc, #100]	; (1770 <Encoder::isr30()+0x68>)
    170c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    170e:	6813      	ldr	r3, [r2, #0]
    1710:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1712:	6853      	ldr	r3, [r2, #4]
    1714:	6819      	ldr	r1, [r3, #0]
    1716:	68d3      	ldr	r3, [r2, #12]
    1718:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    171a:	7c13      	ldrb	r3, [r2, #16]
    171c:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1720:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1722:	4204      	tst	r4, r0
    1724:	bf18      	it	ne
    1726:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    172a:	b109      	cbz	r1, 1730 <Encoder::isr30()+0x28>
    172c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1730:	0899      	lsrs	r1, r3, #2
    1732:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1734:	3b01      	subs	r3, #1
    1736:	2b0d      	cmp	r3, #13
    1738:	d80b      	bhi.n	1752 <Encoder::isr30()+0x4a>
    173a:	e8df f003 	tbb	[pc, r3]
    173e:	0d07      	.short	0x0d07
    1740:	150a0d11 	.word	0x150a0d11
    1744:	0a150707 	.word	0x0a150707
    1748:	070d110d 	.word	0x070d110d
				arg->position++;
    174c:	6953      	ldr	r3, [r2, #20]
    174e:	3301      	adds	r3, #1
    1750:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    1752:	f85d 4b04 	ldr.w	r4, [sp], #4
    1756:	4770      	bx	lr
				arg->position--;
    1758:	6953      	ldr	r3, [r2, #20]
    175a:	3b01      	subs	r3, #1
    175c:	6153      	str	r3, [r2, #20]
				return;
    175e:	e7f8      	b.n	1752 <Encoder::isr30()+0x4a>
				arg->position += 2;
    1760:	6953      	ldr	r3, [r2, #20]
    1762:	3302      	adds	r3, #2
    1764:	6153      	str	r3, [r2, #20]
				return;
    1766:	e7f4      	b.n	1752 <Encoder::isr30()+0x4a>
				arg->position -= 2;
    1768:	6953      	ldr	r3, [r2, #20]
    176a:	3b02      	subs	r3, #2
    176c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    176e:	e7f0      	b.n	1752 <Encoder::isr30()+0x4a>
    1770:	20006eec 	.word	0x20006eec

00001774 <Encoder::isr31()>:
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    1774:	b410      	push	{r4}
    1776:	4b19      	ldr	r3, [pc, #100]	; (17dc <Encoder::isr31()+0x68>)
    1778:	6fda      	ldr	r2, [r3, #124]	; 0x7c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    177a:	6813      	ldr	r3, [r2, #0]
    177c:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    177e:	6853      	ldr	r3, [r2, #4]
    1780:	6819      	ldr	r1, [r3, #0]
    1782:	68d3      	ldr	r3, [r2, #12]
    1784:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1786:	7c13      	ldrb	r3, [r2, #16]
    1788:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    178c:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    178e:	4204      	tst	r4, r0
    1790:	bf18      	it	ne
    1792:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1796:	b109      	cbz	r1, 179c <Encoder::isr31()+0x28>
    1798:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    179c:	0899      	lsrs	r1, r3, #2
    179e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    17a0:	3b01      	subs	r3, #1
    17a2:	2b0d      	cmp	r3, #13
    17a4:	d80b      	bhi.n	17be <Encoder::isr31()+0x4a>
    17a6:	e8df f003 	tbb	[pc, r3]
    17aa:	0d07      	.short	0x0d07
    17ac:	150a0d11 	.word	0x150a0d11
    17b0:	0a150707 	.word	0x0a150707
    17b4:	070d110d 	.word	0x070d110d
				arg->position++;
    17b8:	6953      	ldr	r3, [r2, #20]
    17ba:	3301      	adds	r3, #1
    17bc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    17be:	f85d 4b04 	ldr.w	r4, [sp], #4
    17c2:	4770      	bx	lr
				arg->position--;
    17c4:	6953      	ldr	r3, [r2, #20]
    17c6:	3b01      	subs	r3, #1
    17c8:	6153      	str	r3, [r2, #20]
				return;
    17ca:	e7f8      	b.n	17be <Encoder::isr31()+0x4a>
				arg->position += 2;
    17cc:	6953      	ldr	r3, [r2, #20]
    17ce:	3302      	adds	r3, #2
    17d0:	6153      	str	r3, [r2, #20]
				return;
    17d2:	e7f4      	b.n	17be <Encoder::isr31()+0x4a>
				arg->position -= 2;
    17d4:	6953      	ldr	r3, [r2, #20]
    17d6:	3b02      	subs	r3, #2
    17d8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    17da:	e7f0      	b.n	17be <Encoder::isr31()+0x4a>
    17dc:	20006eec 	.word	0x20006eec

000017e0 <Encoder::isr32()>:
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    17e0:	b410      	push	{r4}
    17e2:	4b1a      	ldr	r3, [pc, #104]	; (184c <Encoder::isr32()+0x6c>)
    17e4:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    17e8:	6813      	ldr	r3, [r2, #0]
    17ea:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    17ec:	6853      	ldr	r3, [r2, #4]
    17ee:	6819      	ldr	r1, [r3, #0]
    17f0:	68d3      	ldr	r3, [r2, #12]
    17f2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    17f4:	7c13      	ldrb	r3, [r2, #16]
    17f6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    17fa:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    17fc:	4204      	tst	r4, r0
    17fe:	bf18      	it	ne
    1800:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1804:	b109      	cbz	r1, 180a <Encoder::isr32()+0x2a>
    1806:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    180a:	0899      	lsrs	r1, r3, #2
    180c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    180e:	3b01      	subs	r3, #1
    1810:	2b0d      	cmp	r3, #13
    1812:	d80b      	bhi.n	182c <Encoder::isr32()+0x4c>
    1814:	e8df f003 	tbb	[pc, r3]
    1818:	0d110d07 	.word	0x0d110d07
    181c:	0707150a 	.word	0x0707150a
    1820:	110d0a15 	.word	0x110d0a15
    1824:	070d      	.short	0x070d
				arg->position++;
    1826:	6953      	ldr	r3, [r2, #20]
    1828:	3301      	adds	r3, #1
    182a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    182c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1830:	4770      	bx	lr
				arg->position--;
    1832:	6953      	ldr	r3, [r2, #20]
    1834:	3b01      	subs	r3, #1
    1836:	6153      	str	r3, [r2, #20]
				return;
    1838:	e7f8      	b.n	182c <Encoder::isr32()+0x4c>
				arg->position += 2;
    183a:	6953      	ldr	r3, [r2, #20]
    183c:	3302      	adds	r3, #2
    183e:	6153      	str	r3, [r2, #20]
				return;
    1840:	e7f4      	b.n	182c <Encoder::isr32()+0x4c>
				arg->position -= 2;
    1842:	6953      	ldr	r3, [r2, #20]
    1844:	3b02      	subs	r3, #2
    1846:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    1848:	e7f0      	b.n	182c <Encoder::isr32()+0x4c>
    184a:	bf00      	nop
    184c:	20006eec 	.word	0x20006eec

00001850 <Encoder::isr33()>:
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    1850:	b410      	push	{r4}
    1852:	4b1a      	ldr	r3, [pc, #104]	; (18bc <Encoder::isr33()+0x6c>)
    1854:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1858:	6813      	ldr	r3, [r2, #0]
    185a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    185c:	6853      	ldr	r3, [r2, #4]
    185e:	6819      	ldr	r1, [r3, #0]
    1860:	68d3      	ldr	r3, [r2, #12]
    1862:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1864:	7c13      	ldrb	r3, [r2, #16]
    1866:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    186a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    186c:	4204      	tst	r4, r0
    186e:	bf18      	it	ne
    1870:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1874:	b109      	cbz	r1, 187a <Encoder::isr33()+0x2a>
    1876:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    187a:	0899      	lsrs	r1, r3, #2
    187c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    187e:	3b01      	subs	r3, #1
    1880:	2b0d      	cmp	r3, #13
    1882:	d80b      	bhi.n	189c <Encoder::isr33()+0x4c>
    1884:	e8df f003 	tbb	[pc, r3]
    1888:	0d110d07 	.word	0x0d110d07
    188c:	0707150a 	.word	0x0707150a
    1890:	110d0a15 	.word	0x110d0a15
    1894:	070d      	.short	0x070d
				arg->position++;
    1896:	6953      	ldr	r3, [r2, #20]
    1898:	3301      	adds	r3, #1
    189a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    189c:	f85d 4b04 	ldr.w	r4, [sp], #4
    18a0:	4770      	bx	lr
				arg->position--;
    18a2:	6953      	ldr	r3, [r2, #20]
    18a4:	3b01      	subs	r3, #1
    18a6:	6153      	str	r3, [r2, #20]
				return;
    18a8:	e7f8      	b.n	189c <Encoder::isr33()+0x4c>
				arg->position += 2;
    18aa:	6953      	ldr	r3, [r2, #20]
    18ac:	3302      	adds	r3, #2
    18ae:	6153      	str	r3, [r2, #20]
				return;
    18b0:	e7f4      	b.n	189c <Encoder::isr33()+0x4c>
				arg->position -= 2;
    18b2:	6953      	ldr	r3, [r2, #20]
    18b4:	3b02      	subs	r3, #2
    18b6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    18b8:	e7f0      	b.n	189c <Encoder::isr33()+0x4c>
    18ba:	bf00      	nop
    18bc:	20006eec 	.word	0x20006eec

000018c0 <Encoder::isr34()>:
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    18c0:	b410      	push	{r4}
    18c2:	4b1a      	ldr	r3, [pc, #104]	; (192c <Encoder::isr34()+0x6c>)
    18c4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    18c8:	6813      	ldr	r3, [r2, #0]
    18ca:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    18cc:	6853      	ldr	r3, [r2, #4]
    18ce:	6819      	ldr	r1, [r3, #0]
    18d0:	68d3      	ldr	r3, [r2, #12]
    18d2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    18d4:	7c13      	ldrb	r3, [r2, #16]
    18d6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    18da:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    18dc:	4204      	tst	r4, r0
    18de:	bf18      	it	ne
    18e0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    18e4:	b109      	cbz	r1, 18ea <Encoder::isr34()+0x2a>
    18e6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    18ea:	0899      	lsrs	r1, r3, #2
    18ec:	7411      	strb	r1, [r2, #16]
		switch (state) {
    18ee:	3b01      	subs	r3, #1
    18f0:	2b0d      	cmp	r3, #13
    18f2:	d80b      	bhi.n	190c <Encoder::isr34()+0x4c>
    18f4:	e8df f003 	tbb	[pc, r3]
    18f8:	0d110d07 	.word	0x0d110d07
    18fc:	0707150a 	.word	0x0707150a
    1900:	110d0a15 	.word	0x110d0a15
    1904:	070d      	.short	0x070d
				arg->position++;
    1906:	6953      	ldr	r3, [r2, #20]
    1908:	3301      	adds	r3, #1
    190a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    190c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1910:	4770      	bx	lr
				arg->position--;
    1912:	6953      	ldr	r3, [r2, #20]
    1914:	3b01      	subs	r3, #1
    1916:	6153      	str	r3, [r2, #20]
				return;
    1918:	e7f8      	b.n	190c <Encoder::isr34()+0x4c>
				arg->position += 2;
    191a:	6953      	ldr	r3, [r2, #20]
    191c:	3302      	adds	r3, #2
    191e:	6153      	str	r3, [r2, #20]
				return;
    1920:	e7f4      	b.n	190c <Encoder::isr34()+0x4c>
				arg->position -= 2;
    1922:	6953      	ldr	r3, [r2, #20]
    1924:	3b02      	subs	r3, #2
    1926:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    1928:	e7f0      	b.n	190c <Encoder::isr34()+0x4c>
    192a:	bf00      	nop
    192c:	20006eec 	.word	0x20006eec

00001930 <Encoder::isr35()>:
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    1930:	b410      	push	{r4}
    1932:	4b1a      	ldr	r3, [pc, #104]	; (199c <Encoder::isr35()+0x6c>)
    1934:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1938:	6813      	ldr	r3, [r2, #0]
    193a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    193c:	6853      	ldr	r3, [r2, #4]
    193e:	6819      	ldr	r1, [r3, #0]
    1940:	68d3      	ldr	r3, [r2, #12]
    1942:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1944:	7c13      	ldrb	r3, [r2, #16]
    1946:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    194a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    194c:	4204      	tst	r4, r0
    194e:	bf18      	it	ne
    1950:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1954:	b109      	cbz	r1, 195a <Encoder::isr35()+0x2a>
    1956:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    195a:	0899      	lsrs	r1, r3, #2
    195c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    195e:	3b01      	subs	r3, #1
    1960:	2b0d      	cmp	r3, #13
    1962:	d80b      	bhi.n	197c <Encoder::isr35()+0x4c>
    1964:	e8df f003 	tbb	[pc, r3]
    1968:	0d110d07 	.word	0x0d110d07
    196c:	0707150a 	.word	0x0707150a
    1970:	110d0a15 	.word	0x110d0a15
    1974:	070d      	.short	0x070d
				arg->position++;
    1976:	6953      	ldr	r3, [r2, #20]
    1978:	3301      	adds	r3, #1
    197a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    197c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1980:	4770      	bx	lr
				arg->position--;
    1982:	6953      	ldr	r3, [r2, #20]
    1984:	3b01      	subs	r3, #1
    1986:	6153      	str	r3, [r2, #20]
				return;
    1988:	e7f8      	b.n	197c <Encoder::isr35()+0x4c>
				arg->position += 2;
    198a:	6953      	ldr	r3, [r2, #20]
    198c:	3302      	adds	r3, #2
    198e:	6153      	str	r3, [r2, #20]
				return;
    1990:	e7f4      	b.n	197c <Encoder::isr35()+0x4c>
				arg->position -= 2;
    1992:	6953      	ldr	r3, [r2, #20]
    1994:	3b02      	subs	r3, #2
    1996:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    1998:	e7f0      	b.n	197c <Encoder::isr35()+0x4c>
    199a:	bf00      	nop
    199c:	20006eec 	.word	0x20006eec

000019a0 <Encoder::isr36()>:
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    19a0:	b410      	push	{r4}
    19a2:	4b1a      	ldr	r3, [pc, #104]	; (1a0c <Encoder::isr36()+0x6c>)
    19a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    19a8:	6813      	ldr	r3, [r2, #0]
    19aa:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19ac:	6853      	ldr	r3, [r2, #4]
    19ae:	6819      	ldr	r1, [r3, #0]
    19b0:	68d3      	ldr	r3, [r2, #12]
    19b2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    19b4:	7c13      	ldrb	r3, [r2, #16]
    19b6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    19ba:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    19bc:	4204      	tst	r4, r0
    19be:	bf18      	it	ne
    19c0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    19c4:	b109      	cbz	r1, 19ca <Encoder::isr36()+0x2a>
    19c6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    19ca:	0899      	lsrs	r1, r3, #2
    19cc:	7411      	strb	r1, [r2, #16]
		switch (state) {
    19ce:	3b01      	subs	r3, #1
    19d0:	2b0d      	cmp	r3, #13
    19d2:	d80b      	bhi.n	19ec <Encoder::isr36()+0x4c>
    19d4:	e8df f003 	tbb	[pc, r3]
    19d8:	0d110d07 	.word	0x0d110d07
    19dc:	0707150a 	.word	0x0707150a
    19e0:	110d0a15 	.word	0x110d0a15
    19e4:	070d      	.short	0x070d
				arg->position++;
    19e6:	6953      	ldr	r3, [r2, #20]
    19e8:	3301      	adds	r3, #1
    19ea:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    19ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    19f0:	4770      	bx	lr
				arg->position--;
    19f2:	6953      	ldr	r3, [r2, #20]
    19f4:	3b01      	subs	r3, #1
    19f6:	6153      	str	r3, [r2, #20]
				return;
    19f8:	e7f8      	b.n	19ec <Encoder::isr36()+0x4c>
				arg->position += 2;
    19fa:	6953      	ldr	r3, [r2, #20]
    19fc:	3302      	adds	r3, #2
    19fe:	6153      	str	r3, [r2, #20]
				return;
    1a00:	e7f4      	b.n	19ec <Encoder::isr36()+0x4c>
				arg->position -= 2;
    1a02:	6953      	ldr	r3, [r2, #20]
    1a04:	3b02      	subs	r3, #2
    1a06:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    1a08:	e7f0      	b.n	19ec <Encoder::isr36()+0x4c>
    1a0a:	bf00      	nop
    1a0c:	20006eec 	.word	0x20006eec

00001a10 <Encoder::isr37()>:
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1a10:	b410      	push	{r4}
    1a12:	4b1a      	ldr	r3, [pc, #104]	; (1a7c <Encoder::isr37()+0x6c>)
    1a14:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a18:	6813      	ldr	r3, [r2, #0]
    1a1a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a1c:	6853      	ldr	r3, [r2, #4]
    1a1e:	6819      	ldr	r1, [r3, #0]
    1a20:	68d3      	ldr	r3, [r2, #12]
    1a22:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1a24:	7c13      	ldrb	r3, [r2, #16]
    1a26:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a2a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1a2c:	4204      	tst	r4, r0
    1a2e:	bf18      	it	ne
    1a30:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1a34:	b109      	cbz	r1, 1a3a <Encoder::isr37()+0x2a>
    1a36:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1a3a:	0899      	lsrs	r1, r3, #2
    1a3c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1a3e:	3b01      	subs	r3, #1
    1a40:	2b0d      	cmp	r3, #13
    1a42:	d80b      	bhi.n	1a5c <Encoder::isr37()+0x4c>
    1a44:	e8df f003 	tbb	[pc, r3]
    1a48:	0d110d07 	.word	0x0d110d07
    1a4c:	0707150a 	.word	0x0707150a
    1a50:	110d0a15 	.word	0x110d0a15
    1a54:	070d      	.short	0x070d
				arg->position++;
    1a56:	6953      	ldr	r3, [r2, #20]
    1a58:	3301      	adds	r3, #1
    1a5a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1a5c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a60:	4770      	bx	lr
				arg->position--;
    1a62:	6953      	ldr	r3, [r2, #20]
    1a64:	3b01      	subs	r3, #1
    1a66:	6153      	str	r3, [r2, #20]
				return;
    1a68:	e7f8      	b.n	1a5c <Encoder::isr37()+0x4c>
				arg->position += 2;
    1a6a:	6953      	ldr	r3, [r2, #20]
    1a6c:	3302      	adds	r3, #2
    1a6e:	6153      	str	r3, [r2, #20]
				return;
    1a70:	e7f4      	b.n	1a5c <Encoder::isr37()+0x4c>
				arg->position -= 2;
    1a72:	6953      	ldr	r3, [r2, #20]
    1a74:	3b02      	subs	r3, #2
    1a76:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    1a78:	e7f0      	b.n	1a5c <Encoder::isr37()+0x4c>
    1a7a:	bf00      	nop
    1a7c:	20006eec 	.word	0x20006eec

00001a80 <Encoder::isr38()>:
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    1a80:	b410      	push	{r4}
    1a82:	4b1a      	ldr	r3, [pc, #104]	; (1aec <Encoder::isr38()+0x6c>)
    1a84:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a88:	6813      	ldr	r3, [r2, #0]
    1a8a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a8c:	6853      	ldr	r3, [r2, #4]
    1a8e:	6819      	ldr	r1, [r3, #0]
    1a90:	68d3      	ldr	r3, [r2, #12]
    1a92:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1a94:	7c13      	ldrb	r3, [r2, #16]
    1a96:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a9a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1a9c:	4204      	tst	r4, r0
    1a9e:	bf18      	it	ne
    1aa0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1aa4:	b109      	cbz	r1, 1aaa <Encoder::isr38()+0x2a>
    1aa6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1aaa:	0899      	lsrs	r1, r3, #2
    1aac:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1aae:	3b01      	subs	r3, #1
    1ab0:	2b0d      	cmp	r3, #13
    1ab2:	d80b      	bhi.n	1acc <Encoder::isr38()+0x4c>
    1ab4:	e8df f003 	tbb	[pc, r3]
    1ab8:	0d110d07 	.word	0x0d110d07
    1abc:	0707150a 	.word	0x0707150a
    1ac0:	110d0a15 	.word	0x110d0a15
    1ac4:	070d      	.short	0x070d
				arg->position++;
    1ac6:	6953      	ldr	r3, [r2, #20]
    1ac8:	3301      	adds	r3, #1
    1aca:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    1acc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ad0:	4770      	bx	lr
				arg->position--;
    1ad2:	6953      	ldr	r3, [r2, #20]
    1ad4:	3b01      	subs	r3, #1
    1ad6:	6153      	str	r3, [r2, #20]
				return;
    1ad8:	e7f8      	b.n	1acc <Encoder::isr38()+0x4c>
				arg->position += 2;
    1ada:	6953      	ldr	r3, [r2, #20]
    1adc:	3302      	adds	r3, #2
    1ade:	6153      	str	r3, [r2, #20]
				return;
    1ae0:	e7f4      	b.n	1acc <Encoder::isr38()+0x4c>
				arg->position -= 2;
    1ae2:	6953      	ldr	r3, [r2, #20]
    1ae4:	3b02      	subs	r3, #2
    1ae6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    1ae8:	e7f0      	b.n	1acc <Encoder::isr38()+0x4c>
    1aea:	bf00      	nop
    1aec:	20006eec 	.word	0x20006eec

00001af0 <Encoder::isr39()>:
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1af0:	b410      	push	{r4}
    1af2:	4b1a      	ldr	r3, [pc, #104]	; (1b5c <Encoder::isr39()+0x6c>)
    1af4:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1af8:	6813      	ldr	r3, [r2, #0]
    1afa:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1afc:	6853      	ldr	r3, [r2, #4]
    1afe:	6819      	ldr	r1, [r3, #0]
    1b00:	68d3      	ldr	r3, [r2, #12]
    1b02:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1b04:	7c13      	ldrb	r3, [r2, #16]
    1b06:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b0a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1b0c:	4204      	tst	r4, r0
    1b0e:	bf18      	it	ne
    1b10:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1b14:	b109      	cbz	r1, 1b1a <Encoder::isr39()+0x2a>
    1b16:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1b1a:	0899      	lsrs	r1, r3, #2
    1b1c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1b1e:	3b01      	subs	r3, #1
    1b20:	2b0d      	cmp	r3, #13
    1b22:	d80b      	bhi.n	1b3c <Encoder::isr39()+0x4c>
    1b24:	e8df f003 	tbb	[pc, r3]
    1b28:	0d110d07 	.word	0x0d110d07
    1b2c:	0707150a 	.word	0x0707150a
    1b30:	110d0a15 	.word	0x110d0a15
    1b34:	070d      	.short	0x070d
				arg->position++;
    1b36:	6953      	ldr	r3, [r2, #20]
    1b38:	3301      	adds	r3, #1
    1b3a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1b3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b40:	4770      	bx	lr
				arg->position--;
    1b42:	6953      	ldr	r3, [r2, #20]
    1b44:	3b01      	subs	r3, #1
    1b46:	6153      	str	r3, [r2, #20]
				return;
    1b48:	e7f8      	b.n	1b3c <Encoder::isr39()+0x4c>
				arg->position += 2;
    1b4a:	6953      	ldr	r3, [r2, #20]
    1b4c:	3302      	adds	r3, #2
    1b4e:	6153      	str	r3, [r2, #20]
				return;
    1b50:	e7f4      	b.n	1b3c <Encoder::isr39()+0x4c>
				arg->position -= 2;
    1b52:	6953      	ldr	r3, [r2, #20]
    1b54:	3b02      	subs	r3, #2
    1b56:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    1b58:	e7f0      	b.n	1b3c <Encoder::isr39()+0x4c>
    1b5a:	bf00      	nop
    1b5c:	20006eec 	.word	0x20006eec

00001b60 <Encoder::isr40()>:
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    1b60:	b410      	push	{r4}
    1b62:	4b1a      	ldr	r3, [pc, #104]	; (1bcc <Encoder::isr40()+0x6c>)
    1b64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b68:	6813      	ldr	r3, [r2, #0]
    1b6a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b6c:	6853      	ldr	r3, [r2, #4]
    1b6e:	6819      	ldr	r1, [r3, #0]
    1b70:	68d3      	ldr	r3, [r2, #12]
    1b72:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1b74:	7c13      	ldrb	r3, [r2, #16]
    1b76:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b7a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1b7c:	4204      	tst	r4, r0
    1b7e:	bf18      	it	ne
    1b80:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1b84:	b109      	cbz	r1, 1b8a <Encoder::isr40()+0x2a>
    1b86:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1b8a:	0899      	lsrs	r1, r3, #2
    1b8c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1b8e:	3b01      	subs	r3, #1
    1b90:	2b0d      	cmp	r3, #13
    1b92:	d80b      	bhi.n	1bac <Encoder::isr40()+0x4c>
    1b94:	e8df f003 	tbb	[pc, r3]
    1b98:	0d110d07 	.word	0x0d110d07
    1b9c:	0707150a 	.word	0x0707150a
    1ba0:	110d0a15 	.word	0x110d0a15
    1ba4:	070d      	.short	0x070d
				arg->position++;
    1ba6:	6953      	ldr	r3, [r2, #20]
    1ba8:	3301      	adds	r3, #1
    1baa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    1bac:	f85d 4b04 	ldr.w	r4, [sp], #4
    1bb0:	4770      	bx	lr
				arg->position--;
    1bb2:	6953      	ldr	r3, [r2, #20]
    1bb4:	3b01      	subs	r3, #1
    1bb6:	6153      	str	r3, [r2, #20]
				return;
    1bb8:	e7f8      	b.n	1bac <Encoder::isr40()+0x4c>
				arg->position += 2;
    1bba:	6953      	ldr	r3, [r2, #20]
    1bbc:	3302      	adds	r3, #2
    1bbe:	6153      	str	r3, [r2, #20]
				return;
    1bc0:	e7f4      	b.n	1bac <Encoder::isr40()+0x4c>
				arg->position -= 2;
    1bc2:	6953      	ldr	r3, [r2, #20]
    1bc4:	3b02      	subs	r3, #2
    1bc6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    1bc8:	e7f0      	b.n	1bac <Encoder::isr40()+0x4c>
    1bca:	bf00      	nop
    1bcc:	20006eec 	.word	0x20006eec

00001bd0 <Encoder::isr41()>:
	static ENCODER_ISR_ATTR void isr41(void) { update(interruptArgs[41]); }
    1bd0:	b410      	push	{r4}
    1bd2:	4b1a      	ldr	r3, [pc, #104]	; (1c3c <Encoder::isr41()+0x6c>)
    1bd4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1bd8:	6813      	ldr	r3, [r2, #0]
    1bda:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1bdc:	6853      	ldr	r3, [r2, #4]
    1bde:	6819      	ldr	r1, [r3, #0]
    1be0:	68d3      	ldr	r3, [r2, #12]
    1be2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1be4:	7c13      	ldrb	r3, [r2, #16]
    1be6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1bea:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1bec:	4204      	tst	r4, r0
    1bee:	bf18      	it	ne
    1bf0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1bf4:	b109      	cbz	r1, 1bfa <Encoder::isr41()+0x2a>
    1bf6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1bfa:	0899      	lsrs	r1, r3, #2
    1bfc:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1bfe:	3b01      	subs	r3, #1
    1c00:	2b0d      	cmp	r3, #13
    1c02:	d80b      	bhi.n	1c1c <Encoder::isr41()+0x4c>
    1c04:	e8df f003 	tbb	[pc, r3]
    1c08:	0d110d07 	.word	0x0d110d07
    1c0c:	0707150a 	.word	0x0707150a
    1c10:	110d0a15 	.word	0x110d0a15
    1c14:	070d      	.short	0x070d
				arg->position++;
    1c16:	6953      	ldr	r3, [r2, #20]
    1c18:	3301      	adds	r3, #1
    1c1a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr41(void) { update(interruptArgs[41]); }
    1c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c20:	4770      	bx	lr
				arg->position--;
    1c22:	6953      	ldr	r3, [r2, #20]
    1c24:	3b01      	subs	r3, #1
    1c26:	6153      	str	r3, [r2, #20]
				return;
    1c28:	e7f8      	b.n	1c1c <Encoder::isr41()+0x4c>
				arg->position += 2;
    1c2a:	6953      	ldr	r3, [r2, #20]
    1c2c:	3302      	adds	r3, #2
    1c2e:	6153      	str	r3, [r2, #20]
				return;
    1c30:	e7f4      	b.n	1c1c <Encoder::isr41()+0x4c>
				arg->position -= 2;
    1c32:	6953      	ldr	r3, [r2, #20]
    1c34:	3b02      	subs	r3, #2
    1c36:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr41(void) { update(interruptArgs[41]); }
    1c38:	e7f0      	b.n	1c1c <Encoder::isr41()+0x4c>
    1c3a:	bf00      	nop
    1c3c:	20006eec 	.word	0x20006eec

00001c40 <Encoder::isr42()>:
	static ENCODER_ISR_ATTR void isr42(void) { update(interruptArgs[42]); }
    1c40:	b410      	push	{r4}
    1c42:	4b1a      	ldr	r3, [pc, #104]	; (1cac <Encoder::isr42()+0x6c>)
    1c44:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1c48:	6813      	ldr	r3, [r2, #0]
    1c4a:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1c4c:	6853      	ldr	r3, [r2, #4]
    1c4e:	6819      	ldr	r1, [r3, #0]
    1c50:	68d3      	ldr	r3, [r2, #12]
    1c52:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1c54:	7c13      	ldrb	r3, [r2, #16]
    1c56:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1c5a:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1c5c:	4204      	tst	r4, r0
    1c5e:	bf18      	it	ne
    1c60:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1c64:	b109      	cbz	r1, 1c6a <Encoder::isr42()+0x2a>
    1c66:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1c6a:	0899      	lsrs	r1, r3, #2
    1c6c:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1c6e:	3b01      	subs	r3, #1
    1c70:	2b0d      	cmp	r3, #13
    1c72:	d80b      	bhi.n	1c8c <Encoder::isr42()+0x4c>
    1c74:	e8df f003 	tbb	[pc, r3]
    1c78:	0d110d07 	.word	0x0d110d07
    1c7c:	0707150a 	.word	0x0707150a
    1c80:	110d0a15 	.word	0x110d0a15
    1c84:	070d      	.short	0x070d
				arg->position++;
    1c86:	6953      	ldr	r3, [r2, #20]
    1c88:	3301      	adds	r3, #1
    1c8a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr42(void) { update(interruptArgs[42]); }
    1c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c90:	4770      	bx	lr
				arg->position--;
    1c92:	6953      	ldr	r3, [r2, #20]
    1c94:	3b01      	subs	r3, #1
    1c96:	6153      	str	r3, [r2, #20]
				return;
    1c98:	e7f8      	b.n	1c8c <Encoder::isr42()+0x4c>
				arg->position += 2;
    1c9a:	6953      	ldr	r3, [r2, #20]
    1c9c:	3302      	adds	r3, #2
    1c9e:	6153      	str	r3, [r2, #20]
				return;
    1ca0:	e7f4      	b.n	1c8c <Encoder::isr42()+0x4c>
				arg->position -= 2;
    1ca2:	6953      	ldr	r3, [r2, #20]
    1ca4:	3b02      	subs	r3, #2
    1ca6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr42(void) { update(interruptArgs[42]); }
    1ca8:	e7f0      	b.n	1c8c <Encoder::isr42()+0x4c>
    1caa:	bf00      	nop
    1cac:	20006eec 	.word	0x20006eec

00001cb0 <Encoder::isr43()>:
	static ENCODER_ISR_ATTR void isr43(void) { update(interruptArgs[43]); }
    1cb0:	b410      	push	{r4}
    1cb2:	4b1a      	ldr	r3, [pc, #104]	; (1d1c <Encoder::isr43()+0x6c>)
    1cb4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1cb8:	6813      	ldr	r3, [r2, #0]
    1cba:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1cbc:	6853      	ldr	r3, [r2, #4]
    1cbe:	6819      	ldr	r1, [r3, #0]
    1cc0:	68d3      	ldr	r3, [r2, #12]
    1cc2:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1cc4:	7c13      	ldrb	r3, [r2, #16]
    1cc6:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1cca:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1ccc:	4204      	tst	r4, r0
    1cce:	bf18      	it	ne
    1cd0:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1cd4:	b109      	cbz	r1, 1cda <Encoder::isr43()+0x2a>
    1cd6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1cda:	0899      	lsrs	r1, r3, #2
    1cdc:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1cde:	3b01      	subs	r3, #1
    1ce0:	2b0d      	cmp	r3, #13
    1ce2:	d80b      	bhi.n	1cfc <Encoder::isr43()+0x4c>
    1ce4:	e8df f003 	tbb	[pc, r3]
    1ce8:	0d110d07 	.word	0x0d110d07
    1cec:	0707150a 	.word	0x0707150a
    1cf0:	110d0a15 	.word	0x110d0a15
    1cf4:	070d      	.short	0x070d
				arg->position++;
    1cf6:	6953      	ldr	r3, [r2, #20]
    1cf8:	3301      	adds	r3, #1
    1cfa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr43(void) { update(interruptArgs[43]); }
    1cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d00:	4770      	bx	lr
				arg->position--;
    1d02:	6953      	ldr	r3, [r2, #20]
    1d04:	3b01      	subs	r3, #1
    1d06:	6153      	str	r3, [r2, #20]
				return;
    1d08:	e7f8      	b.n	1cfc <Encoder::isr43()+0x4c>
				arg->position += 2;
    1d0a:	6953      	ldr	r3, [r2, #20]
    1d0c:	3302      	adds	r3, #2
    1d0e:	6153      	str	r3, [r2, #20]
				return;
    1d10:	e7f4      	b.n	1cfc <Encoder::isr43()+0x4c>
				arg->position -= 2;
    1d12:	6953      	ldr	r3, [r2, #20]
    1d14:	3b02      	subs	r3, #2
    1d16:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr43(void) { update(interruptArgs[43]); }
    1d18:	e7f0      	b.n	1cfc <Encoder::isr43()+0x4c>
    1d1a:	bf00      	nop
    1d1c:	20006eec 	.word	0x20006eec

00001d20 <Encoder::isr12()>:
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d20:	b410      	push	{r4}
    1d22:	4b19      	ldr	r3, [pc, #100]	; (1d88 <Encoder::isr12()+0x68>)
    1d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1d26:	6813      	ldr	r3, [r2, #0]
    1d28:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d2a:	6853      	ldr	r3, [r2, #4]
    1d2c:	6819      	ldr	r1, [r3, #0]
    1d2e:	68d3      	ldr	r3, [r2, #12]
    1d30:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1d32:	7c13      	ldrb	r3, [r2, #16]
    1d34:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1d38:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1d3a:	4204      	tst	r4, r0
    1d3c:	bf18      	it	ne
    1d3e:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1d42:	b109      	cbz	r1, 1d48 <Encoder::isr12()+0x28>
    1d44:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1d48:	0899      	lsrs	r1, r3, #2
    1d4a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1d4c:	3b01      	subs	r3, #1
    1d4e:	2b0d      	cmp	r3, #13
    1d50:	d80b      	bhi.n	1d6a <Encoder::isr12()+0x4a>
    1d52:	e8df f003 	tbb	[pc, r3]
    1d56:	0d07      	.short	0x0d07
    1d58:	150a0d11 	.word	0x150a0d11
    1d5c:	0a150707 	.word	0x0a150707
    1d60:	070d110d 	.word	0x070d110d
				arg->position++;
    1d64:	6953      	ldr	r3, [r2, #20]
    1d66:	3301      	adds	r3, #1
    1d68:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d6e:	4770      	bx	lr
				arg->position--;
    1d70:	6953      	ldr	r3, [r2, #20]
    1d72:	3b01      	subs	r3, #1
    1d74:	6153      	str	r3, [r2, #20]
				return;
    1d76:	e7f8      	b.n	1d6a <Encoder::isr12()+0x4a>
				arg->position += 2;
    1d78:	6953      	ldr	r3, [r2, #20]
    1d7a:	3302      	adds	r3, #2
    1d7c:	6153      	str	r3, [r2, #20]
				return;
    1d7e:	e7f4      	b.n	1d6a <Encoder::isr12()+0x4a>
				arg->position -= 2;
    1d80:	6953      	ldr	r3, [r2, #20]
    1d82:	3b02      	subs	r3, #2
    1d84:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d86:	e7f0      	b.n	1d6a <Encoder::isr12()+0x4a>
    1d88:	20006eec 	.word	0x20006eec

00001d8c <Encoder::isr13()>:
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1d8c:	b410      	push	{r4}
    1d8e:	4b19      	ldr	r3, [pc, #100]	; (1df4 <Encoder::isr13()+0x68>)
    1d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1d92:	6813      	ldr	r3, [r2, #0]
    1d94:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d96:	6853      	ldr	r3, [r2, #4]
    1d98:	6819      	ldr	r1, [r3, #0]
    1d9a:	68d3      	ldr	r3, [r2, #12]
    1d9c:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1d9e:	7c13      	ldrb	r3, [r2, #16]
    1da0:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1da4:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1da6:	4204      	tst	r4, r0
    1da8:	bf18      	it	ne
    1daa:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1dae:	b109      	cbz	r1, 1db4 <Encoder::isr13()+0x28>
    1db0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1db4:	0899      	lsrs	r1, r3, #2
    1db6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1db8:	3b01      	subs	r3, #1
    1dba:	2b0d      	cmp	r3, #13
    1dbc:	d80b      	bhi.n	1dd6 <Encoder::isr13()+0x4a>
    1dbe:	e8df f003 	tbb	[pc, r3]
    1dc2:	0d07      	.short	0x0d07
    1dc4:	150a0d11 	.word	0x150a0d11
    1dc8:	0a150707 	.word	0x0a150707
    1dcc:	070d110d 	.word	0x070d110d
				arg->position++;
    1dd0:	6953      	ldr	r3, [r2, #20]
    1dd2:	3301      	adds	r3, #1
    1dd4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1dd6:	f85d 4b04 	ldr.w	r4, [sp], #4
    1dda:	4770      	bx	lr
				arg->position--;
    1ddc:	6953      	ldr	r3, [r2, #20]
    1dde:	3b01      	subs	r3, #1
    1de0:	6153      	str	r3, [r2, #20]
				return;
    1de2:	e7f8      	b.n	1dd6 <Encoder::isr13()+0x4a>
				arg->position += 2;
    1de4:	6953      	ldr	r3, [r2, #20]
    1de6:	3302      	adds	r3, #2
    1de8:	6153      	str	r3, [r2, #20]
				return;
    1dea:	e7f4      	b.n	1dd6 <Encoder::isr13()+0x4a>
				arg->position -= 2;
    1dec:	6953      	ldr	r3, [r2, #20]
    1dee:	3b02      	subs	r3, #2
    1df0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1df2:	e7f0      	b.n	1dd6 <Encoder::isr13()+0x4a>
    1df4:	20006eec 	.word	0x20006eec

00001df8 <Encoder::isr14()>:
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1df8:	b410      	push	{r4}
    1dfa:	4b19      	ldr	r3, [pc, #100]	; (1e60 <Encoder::isr14()+0x68>)
    1dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1dfe:	6813      	ldr	r3, [r2, #0]
    1e00:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e02:	6853      	ldr	r3, [r2, #4]
    1e04:	6819      	ldr	r1, [r3, #0]
    1e06:	68d3      	ldr	r3, [r2, #12]
    1e08:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1e0a:	7c13      	ldrb	r3, [r2, #16]
    1e0c:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1e10:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1e12:	4204      	tst	r4, r0
    1e14:	bf18      	it	ne
    1e16:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1e1a:	b109      	cbz	r1, 1e20 <Encoder::isr14()+0x28>
    1e1c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1e20:	0899      	lsrs	r1, r3, #2
    1e22:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1e24:	3b01      	subs	r3, #1
    1e26:	2b0d      	cmp	r3, #13
    1e28:	d80b      	bhi.n	1e42 <Encoder::isr14()+0x4a>
    1e2a:	e8df f003 	tbb	[pc, r3]
    1e2e:	0d07      	.short	0x0d07
    1e30:	150a0d11 	.word	0x150a0d11
    1e34:	0a150707 	.word	0x0a150707
    1e38:	070d110d 	.word	0x070d110d
				arg->position++;
    1e3c:	6953      	ldr	r3, [r2, #20]
    1e3e:	3301      	adds	r3, #1
    1e40:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e42:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e46:	4770      	bx	lr
				arg->position--;
    1e48:	6953      	ldr	r3, [r2, #20]
    1e4a:	3b01      	subs	r3, #1
    1e4c:	6153      	str	r3, [r2, #20]
				return;
    1e4e:	e7f8      	b.n	1e42 <Encoder::isr14()+0x4a>
				arg->position += 2;
    1e50:	6953      	ldr	r3, [r2, #20]
    1e52:	3302      	adds	r3, #2
    1e54:	6153      	str	r3, [r2, #20]
				return;
    1e56:	e7f4      	b.n	1e42 <Encoder::isr14()+0x4a>
				arg->position -= 2;
    1e58:	6953      	ldr	r3, [r2, #20]
    1e5a:	3b02      	subs	r3, #2
    1e5c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e5e:	e7f0      	b.n	1e42 <Encoder::isr14()+0x4a>
    1e60:	20006eec 	.word	0x20006eec

00001e64 <Encoder::isr15()>:
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1e64:	b410      	push	{r4}
    1e66:	4b19      	ldr	r3, [pc, #100]	; (1ecc <Encoder::isr15()+0x68>)
    1e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1e6a:	6813      	ldr	r3, [r2, #0]
    1e6c:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e6e:	6853      	ldr	r3, [r2, #4]
    1e70:	6819      	ldr	r1, [r3, #0]
    1e72:	68d3      	ldr	r3, [r2, #12]
    1e74:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1e76:	7c13      	ldrb	r3, [r2, #16]
    1e78:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1e7c:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1e7e:	4204      	tst	r4, r0
    1e80:	bf18      	it	ne
    1e82:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1e86:	b109      	cbz	r1, 1e8c <Encoder::isr15()+0x28>
    1e88:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1e8c:	0899      	lsrs	r1, r3, #2
    1e8e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1e90:	3b01      	subs	r3, #1
    1e92:	2b0d      	cmp	r3, #13
    1e94:	d80b      	bhi.n	1eae <Encoder::isr15()+0x4a>
    1e96:	e8df f003 	tbb	[pc, r3]
    1e9a:	0d07      	.short	0x0d07
    1e9c:	150a0d11 	.word	0x150a0d11
    1ea0:	0a150707 	.word	0x0a150707
    1ea4:	070d110d 	.word	0x070d110d
				arg->position++;
    1ea8:	6953      	ldr	r3, [r2, #20]
    1eaa:	3301      	adds	r3, #1
    1eac:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1eae:	f85d 4b04 	ldr.w	r4, [sp], #4
    1eb2:	4770      	bx	lr
				arg->position--;
    1eb4:	6953      	ldr	r3, [r2, #20]
    1eb6:	3b01      	subs	r3, #1
    1eb8:	6153      	str	r3, [r2, #20]
				return;
    1eba:	e7f8      	b.n	1eae <Encoder::isr15()+0x4a>
				arg->position += 2;
    1ebc:	6953      	ldr	r3, [r2, #20]
    1ebe:	3302      	adds	r3, #2
    1ec0:	6153      	str	r3, [r2, #20]
				return;
    1ec2:	e7f4      	b.n	1eae <Encoder::isr15()+0x4a>
				arg->position -= 2;
    1ec4:	6953      	ldr	r3, [r2, #20]
    1ec6:	3b02      	subs	r3, #2
    1ec8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1eca:	e7f0      	b.n	1eae <Encoder::isr15()+0x4a>
    1ecc:	20006eec 	.word	0x20006eec

00001ed0 <Encoder::isr16()>:
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1ed0:	b410      	push	{r4}
    1ed2:	4b19      	ldr	r3, [pc, #100]	; (1f38 <Encoder::isr16()+0x68>)
    1ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ed6:	6813      	ldr	r3, [r2, #0]
    1ed8:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1eda:	6853      	ldr	r3, [r2, #4]
    1edc:	6819      	ldr	r1, [r3, #0]
    1ede:	68d3      	ldr	r3, [r2, #12]
    1ee0:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1ee2:	7c13      	ldrb	r3, [r2, #16]
    1ee4:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ee8:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1eea:	4204      	tst	r4, r0
    1eec:	bf18      	it	ne
    1eee:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1ef2:	b109      	cbz	r1, 1ef8 <Encoder::isr16()+0x28>
    1ef4:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1ef8:	0899      	lsrs	r1, r3, #2
    1efa:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1efc:	3b01      	subs	r3, #1
    1efe:	2b0d      	cmp	r3, #13
    1f00:	d80b      	bhi.n	1f1a <Encoder::isr16()+0x4a>
    1f02:	e8df f003 	tbb	[pc, r3]
    1f06:	0d07      	.short	0x0d07
    1f08:	150a0d11 	.word	0x150a0d11
    1f0c:	0a150707 	.word	0x0a150707
    1f10:	070d110d 	.word	0x070d110d
				arg->position++;
    1f14:	6953      	ldr	r3, [r2, #20]
    1f16:	3301      	adds	r3, #1
    1f18:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f1a:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f1e:	4770      	bx	lr
				arg->position--;
    1f20:	6953      	ldr	r3, [r2, #20]
    1f22:	3b01      	subs	r3, #1
    1f24:	6153      	str	r3, [r2, #20]
				return;
    1f26:	e7f8      	b.n	1f1a <Encoder::isr16()+0x4a>
				arg->position += 2;
    1f28:	6953      	ldr	r3, [r2, #20]
    1f2a:	3302      	adds	r3, #2
    1f2c:	6153      	str	r3, [r2, #20]
				return;
    1f2e:	e7f4      	b.n	1f1a <Encoder::isr16()+0x4a>
				arg->position -= 2;
    1f30:	6953      	ldr	r3, [r2, #20]
    1f32:	3b02      	subs	r3, #2
    1f34:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f36:	e7f0      	b.n	1f1a <Encoder::isr16()+0x4a>
    1f38:	20006eec 	.word	0x20006eec

00001f3c <Encoder::isr17()>:
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    1f3c:	b410      	push	{r4}
    1f3e:	4b19      	ldr	r3, [pc, #100]	; (1fa4 <Encoder::isr17()+0x68>)
    1f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1f42:	6813      	ldr	r3, [r2, #0]
    1f44:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1f46:	6853      	ldr	r3, [r2, #4]
    1f48:	6819      	ldr	r1, [r3, #0]
    1f4a:	68d3      	ldr	r3, [r2, #12]
    1f4c:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1f4e:	7c13      	ldrb	r3, [r2, #16]
    1f50:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1f54:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1f56:	4204      	tst	r4, r0
    1f58:	bf18      	it	ne
    1f5a:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1f5e:	b109      	cbz	r1, 1f64 <Encoder::isr17()+0x28>
    1f60:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1f64:	0899      	lsrs	r1, r3, #2
    1f66:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1f68:	3b01      	subs	r3, #1
    1f6a:	2b0d      	cmp	r3, #13
    1f6c:	d80b      	bhi.n	1f86 <Encoder::isr17()+0x4a>
    1f6e:	e8df f003 	tbb	[pc, r3]
    1f72:	0d07      	.short	0x0d07
    1f74:	150a0d11 	.word	0x150a0d11
    1f78:	0a150707 	.word	0x0a150707
    1f7c:	070d110d 	.word	0x070d110d
				arg->position++;
    1f80:	6953      	ldr	r3, [r2, #20]
    1f82:	3301      	adds	r3, #1
    1f84:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    1f86:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f8a:	4770      	bx	lr
				arg->position--;
    1f8c:	6953      	ldr	r3, [r2, #20]
    1f8e:	3b01      	subs	r3, #1
    1f90:	6153      	str	r3, [r2, #20]
				return;
    1f92:	e7f8      	b.n	1f86 <Encoder::isr17()+0x4a>
				arg->position += 2;
    1f94:	6953      	ldr	r3, [r2, #20]
    1f96:	3302      	adds	r3, #2
    1f98:	6153      	str	r3, [r2, #20]
				return;
    1f9a:	e7f4      	b.n	1f86 <Encoder::isr17()+0x4a>
				arg->position -= 2;
    1f9c:	6953      	ldr	r3, [r2, #20]
    1f9e:	3b02      	subs	r3, #2
    1fa0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    1fa2:	e7f0      	b.n	1f86 <Encoder::isr17()+0x4a>
    1fa4:	20006eec 	.word	0x20006eec

00001fa8 <Encoder::isr18()>:
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    1fa8:	b410      	push	{r4}
    1faa:	4b19      	ldr	r3, [pc, #100]	; (2010 <Encoder::isr18()+0x68>)
    1fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1fae:	6813      	ldr	r3, [r2, #0]
    1fb0:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1fb2:	6853      	ldr	r3, [r2, #4]
    1fb4:	6819      	ldr	r1, [r3, #0]
    1fb6:	68d3      	ldr	r3, [r2, #12]
    1fb8:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    1fba:	7c13      	ldrb	r3, [r2, #16]
    1fbc:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1fc0:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    1fc2:	4204      	tst	r4, r0
    1fc4:	bf18      	it	ne
    1fc6:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    1fca:	b109      	cbz	r1, 1fd0 <Encoder::isr18()+0x28>
    1fcc:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1fd0:	0899      	lsrs	r1, r3, #2
    1fd2:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1fd4:	3b01      	subs	r3, #1
    1fd6:	2b0d      	cmp	r3, #13
    1fd8:	d80b      	bhi.n	1ff2 <Encoder::isr18()+0x4a>
    1fda:	e8df f003 	tbb	[pc, r3]
    1fde:	0d07      	.short	0x0d07
    1fe0:	150a0d11 	.word	0x150a0d11
    1fe4:	0a150707 	.word	0x0a150707
    1fe8:	070d110d 	.word	0x070d110d
				arg->position++;
    1fec:	6953      	ldr	r3, [r2, #20]
    1fee:	3301      	adds	r3, #1
    1ff0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    1ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ff6:	4770      	bx	lr
				arg->position--;
    1ff8:	6953      	ldr	r3, [r2, #20]
    1ffa:	3b01      	subs	r3, #1
    1ffc:	6153      	str	r3, [r2, #20]
				return;
    1ffe:	e7f8      	b.n	1ff2 <Encoder::isr18()+0x4a>
				arg->position += 2;
    2000:	6953      	ldr	r3, [r2, #20]
    2002:	3302      	adds	r3, #2
    2004:	6153      	str	r3, [r2, #20]
				return;
    2006:	e7f4      	b.n	1ff2 <Encoder::isr18()+0x4a>
				arg->position -= 2;
    2008:	6953      	ldr	r3, [r2, #20]
    200a:	3b02      	subs	r3, #2
    200c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    200e:	e7f0      	b.n	1ff2 <Encoder::isr18()+0x4a>
    2010:	20006eec 	.word	0x20006eec

00002014 <Encoder::isr19()>:
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    2014:	b410      	push	{r4}
    2016:	4b19      	ldr	r3, [pc, #100]	; (207c <Encoder::isr19()+0x68>)
    2018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    201a:	6813      	ldr	r3, [r2, #0]
    201c:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    201e:	6853      	ldr	r3, [r2, #4]
    2020:	6819      	ldr	r1, [r3, #0]
    2022:	68d3      	ldr	r3, [r2, #12]
    2024:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    2026:	7c13      	ldrb	r3, [r2, #16]
    2028:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    202c:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    202e:	4204      	tst	r4, r0
    2030:	bf18      	it	ne
    2032:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    2036:	b109      	cbz	r1, 203c <Encoder::isr19()+0x28>
    2038:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    203c:	0899      	lsrs	r1, r3, #2
    203e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2040:	3b01      	subs	r3, #1
    2042:	2b0d      	cmp	r3, #13
    2044:	d80b      	bhi.n	205e <Encoder::isr19()+0x4a>
    2046:	e8df f003 	tbb	[pc, r3]
    204a:	0d07      	.short	0x0d07
    204c:	150a0d11 	.word	0x150a0d11
    2050:	0a150707 	.word	0x0a150707
    2054:	070d110d 	.word	0x070d110d
				arg->position++;
    2058:	6953      	ldr	r3, [r2, #20]
    205a:	3301      	adds	r3, #1
    205c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    205e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2062:	4770      	bx	lr
				arg->position--;
    2064:	6953      	ldr	r3, [r2, #20]
    2066:	3b01      	subs	r3, #1
    2068:	6153      	str	r3, [r2, #20]
				return;
    206a:	e7f8      	b.n	205e <Encoder::isr19()+0x4a>
				arg->position += 2;
    206c:	6953      	ldr	r3, [r2, #20]
    206e:	3302      	adds	r3, #2
    2070:	6153      	str	r3, [r2, #20]
				return;
    2072:	e7f4      	b.n	205e <Encoder::isr19()+0x4a>
				arg->position -= 2;
    2074:	6953      	ldr	r3, [r2, #20]
    2076:	3b02      	subs	r3, #2
    2078:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    207a:	e7f0      	b.n	205e <Encoder::isr19()+0x4a>
    207c:	20006eec 	.word	0x20006eec

00002080 <Encoder::isr20()>:
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    2080:	b410      	push	{r4}
    2082:	4b19      	ldr	r3, [pc, #100]	; (20e8 <Encoder::isr20()+0x68>)
    2084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2086:	6813      	ldr	r3, [r2, #0]
    2088:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    208a:	6853      	ldr	r3, [r2, #4]
    208c:	6819      	ldr	r1, [r3, #0]
    208e:	68d3      	ldr	r3, [r2, #12]
    2090:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    2092:	7c13      	ldrb	r3, [r2, #16]
    2094:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2098:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    209a:	4204      	tst	r4, r0
    209c:	bf18      	it	ne
    209e:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    20a2:	b109      	cbz	r1, 20a8 <Encoder::isr20()+0x28>
    20a4:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    20a8:	0899      	lsrs	r1, r3, #2
    20aa:	7411      	strb	r1, [r2, #16]
		switch (state) {
    20ac:	3b01      	subs	r3, #1
    20ae:	2b0d      	cmp	r3, #13
    20b0:	d80b      	bhi.n	20ca <Encoder::isr20()+0x4a>
    20b2:	e8df f003 	tbb	[pc, r3]
    20b6:	0d07      	.short	0x0d07
    20b8:	150a0d11 	.word	0x150a0d11
    20bc:	0a150707 	.word	0x0a150707
    20c0:	070d110d 	.word	0x070d110d
				arg->position++;
    20c4:	6953      	ldr	r3, [r2, #20]
    20c6:	3301      	adds	r3, #1
    20c8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    20ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    20ce:	4770      	bx	lr
				arg->position--;
    20d0:	6953      	ldr	r3, [r2, #20]
    20d2:	3b01      	subs	r3, #1
    20d4:	6153      	str	r3, [r2, #20]
				return;
    20d6:	e7f8      	b.n	20ca <Encoder::isr20()+0x4a>
				arg->position += 2;
    20d8:	6953      	ldr	r3, [r2, #20]
    20da:	3302      	adds	r3, #2
    20dc:	6153      	str	r3, [r2, #20]
				return;
    20de:	e7f4      	b.n	20ca <Encoder::isr20()+0x4a>
				arg->position -= 2;
    20e0:	6953      	ldr	r3, [r2, #20]
    20e2:	3b02      	subs	r3, #2
    20e4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    20e6:	e7f0      	b.n	20ca <Encoder::isr20()+0x4a>
    20e8:	20006eec 	.word	0x20006eec

000020ec <Encoder::isr21()>:
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    20ec:	b410      	push	{r4}
    20ee:	4b19      	ldr	r3, [pc, #100]	; (2154 <Encoder::isr21()+0x68>)
    20f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    20f2:	6813      	ldr	r3, [r2, #0]
    20f4:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    20f6:	6853      	ldr	r3, [r2, #4]
    20f8:	6819      	ldr	r1, [r3, #0]
    20fa:	68d3      	ldr	r3, [r2, #12]
    20fc:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    20fe:	7c13      	ldrb	r3, [r2, #16]
    2100:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2104:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    2106:	4204      	tst	r4, r0
    2108:	bf18      	it	ne
    210a:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    210e:	b109      	cbz	r1, 2114 <Encoder::isr21()+0x28>
    2110:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2114:	0899      	lsrs	r1, r3, #2
    2116:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2118:	3b01      	subs	r3, #1
    211a:	2b0d      	cmp	r3, #13
    211c:	d80b      	bhi.n	2136 <Encoder::isr21()+0x4a>
    211e:	e8df f003 	tbb	[pc, r3]
    2122:	0d07      	.short	0x0d07
    2124:	150a0d11 	.word	0x150a0d11
    2128:	0a150707 	.word	0x0a150707
    212c:	070d110d 	.word	0x070d110d
				arg->position++;
    2130:	6953      	ldr	r3, [r2, #20]
    2132:	3301      	adds	r3, #1
    2134:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2136:	f85d 4b04 	ldr.w	r4, [sp], #4
    213a:	4770      	bx	lr
				arg->position--;
    213c:	6953      	ldr	r3, [r2, #20]
    213e:	3b01      	subs	r3, #1
    2140:	6153      	str	r3, [r2, #20]
				return;
    2142:	e7f8      	b.n	2136 <Encoder::isr21()+0x4a>
				arg->position += 2;
    2144:	6953      	ldr	r3, [r2, #20]
    2146:	3302      	adds	r3, #2
    2148:	6153      	str	r3, [r2, #20]
				return;
    214a:	e7f4      	b.n	2136 <Encoder::isr21()+0x4a>
				arg->position -= 2;
    214c:	6953      	ldr	r3, [r2, #20]
    214e:	3b02      	subs	r3, #2
    2150:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2152:	e7f0      	b.n	2136 <Encoder::isr21()+0x4a>
    2154:	20006eec 	.word	0x20006eec

00002158 <Encoder::isr22()>:
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    2158:	b410      	push	{r4}
    215a:	4b19      	ldr	r3, [pc, #100]	; (21c0 <Encoder::isr22()+0x68>)
    215c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    215e:	6813      	ldr	r3, [r2, #0]
    2160:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2162:	6853      	ldr	r3, [r2, #4]
    2164:	6819      	ldr	r1, [r3, #0]
    2166:	68d3      	ldr	r3, [r2, #12]
    2168:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    216a:	7c13      	ldrb	r3, [r2, #16]
    216c:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2170:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    2172:	4204      	tst	r4, r0
    2174:	bf18      	it	ne
    2176:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    217a:	b109      	cbz	r1, 2180 <Encoder::isr22()+0x28>
    217c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2180:	0899      	lsrs	r1, r3, #2
    2182:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2184:	3b01      	subs	r3, #1
    2186:	2b0d      	cmp	r3, #13
    2188:	d80b      	bhi.n	21a2 <Encoder::isr22()+0x4a>
    218a:	e8df f003 	tbb	[pc, r3]
    218e:	0d07      	.short	0x0d07
    2190:	150a0d11 	.word	0x150a0d11
    2194:	0a150707 	.word	0x0a150707
    2198:	070d110d 	.word	0x070d110d
				arg->position++;
    219c:	6953      	ldr	r3, [r2, #20]
    219e:	3301      	adds	r3, #1
    21a0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    21a2:	f85d 4b04 	ldr.w	r4, [sp], #4
    21a6:	4770      	bx	lr
				arg->position--;
    21a8:	6953      	ldr	r3, [r2, #20]
    21aa:	3b01      	subs	r3, #1
    21ac:	6153      	str	r3, [r2, #20]
				return;
    21ae:	e7f8      	b.n	21a2 <Encoder::isr22()+0x4a>
				arg->position += 2;
    21b0:	6953      	ldr	r3, [r2, #20]
    21b2:	3302      	adds	r3, #2
    21b4:	6153      	str	r3, [r2, #20]
				return;
    21b6:	e7f4      	b.n	21a2 <Encoder::isr22()+0x4a>
				arg->position -= 2;
    21b8:	6953      	ldr	r3, [r2, #20]
    21ba:	3b02      	subs	r3, #2
    21bc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    21be:	e7f0      	b.n	21a2 <Encoder::isr22()+0x4a>
    21c0:	20006eec 	.word	0x20006eec

000021c4 <Encoder::isr23()>:
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    21c4:	b410      	push	{r4}
    21c6:	4b19      	ldr	r3, [pc, #100]	; (222c <Encoder::isr23()+0x68>)
    21c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    21ca:	6813      	ldr	r3, [r2, #0]
    21cc:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    21ce:	6853      	ldr	r3, [r2, #4]
    21d0:	6819      	ldr	r1, [r3, #0]
    21d2:	68d3      	ldr	r3, [r2, #12]
    21d4:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    21d6:	7c13      	ldrb	r3, [r2, #16]
    21d8:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    21dc:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    21de:	4204      	tst	r4, r0
    21e0:	bf18      	it	ne
    21e2:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    21e6:	b109      	cbz	r1, 21ec <Encoder::isr23()+0x28>
    21e8:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    21ec:	0899      	lsrs	r1, r3, #2
    21ee:	7411      	strb	r1, [r2, #16]
		switch (state) {
    21f0:	3b01      	subs	r3, #1
    21f2:	2b0d      	cmp	r3, #13
    21f4:	d80b      	bhi.n	220e <Encoder::isr23()+0x4a>
    21f6:	e8df f003 	tbb	[pc, r3]
    21fa:	0d07      	.short	0x0d07
    21fc:	150a0d11 	.word	0x150a0d11
    2200:	0a150707 	.word	0x0a150707
    2204:	070d110d 	.word	0x070d110d
				arg->position++;
    2208:	6953      	ldr	r3, [r2, #20]
    220a:	3301      	adds	r3, #1
    220c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    220e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2212:	4770      	bx	lr
				arg->position--;
    2214:	6953      	ldr	r3, [r2, #20]
    2216:	3b01      	subs	r3, #1
    2218:	6153      	str	r3, [r2, #20]
				return;
    221a:	e7f8      	b.n	220e <Encoder::isr23()+0x4a>
				arg->position += 2;
    221c:	6953      	ldr	r3, [r2, #20]
    221e:	3302      	adds	r3, #2
    2220:	6153      	str	r3, [r2, #20]
				return;
    2222:	e7f4      	b.n	220e <Encoder::isr23()+0x4a>
				arg->position -= 2;
    2224:	6953      	ldr	r3, [r2, #20]
    2226:	3b02      	subs	r3, #2
    2228:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    222a:	e7f0      	b.n	220e <Encoder::isr23()+0x4a>
    222c:	20006eec 	.word	0x20006eec

00002230 <Encoder::isr24()>:
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    2230:	b410      	push	{r4}
    2232:	4b19      	ldr	r3, [pc, #100]	; (2298 <Encoder::isr24()+0x68>)
    2234:	6e1a      	ldr	r2, [r3, #96]	; 0x60
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2236:	6813      	ldr	r3, [r2, #0]
    2238:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    223a:	6853      	ldr	r3, [r2, #4]
    223c:	6819      	ldr	r1, [r3, #0]
    223e:	68d3      	ldr	r3, [r2, #12]
    2240:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    2242:	7c13      	ldrb	r3, [r2, #16]
    2244:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2248:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    224a:	4204      	tst	r4, r0
    224c:	bf18      	it	ne
    224e:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    2252:	b109      	cbz	r1, 2258 <Encoder::isr24()+0x28>
    2254:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2258:	0899      	lsrs	r1, r3, #2
    225a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    225c:	3b01      	subs	r3, #1
    225e:	2b0d      	cmp	r3, #13
    2260:	d80b      	bhi.n	227a <Encoder::isr24()+0x4a>
    2262:	e8df f003 	tbb	[pc, r3]
    2266:	0d07      	.short	0x0d07
    2268:	150a0d11 	.word	0x150a0d11
    226c:	0a150707 	.word	0x0a150707
    2270:	070d110d 	.word	0x070d110d
				arg->position++;
    2274:	6953      	ldr	r3, [r2, #20]
    2276:	3301      	adds	r3, #1
    2278:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    227a:	f85d 4b04 	ldr.w	r4, [sp], #4
    227e:	4770      	bx	lr
				arg->position--;
    2280:	6953      	ldr	r3, [r2, #20]
    2282:	3b01      	subs	r3, #1
    2284:	6153      	str	r3, [r2, #20]
				return;
    2286:	e7f8      	b.n	227a <Encoder::isr24()+0x4a>
				arg->position += 2;
    2288:	6953      	ldr	r3, [r2, #20]
    228a:	3302      	adds	r3, #2
    228c:	6153      	str	r3, [r2, #20]
				return;
    228e:	e7f4      	b.n	227a <Encoder::isr24()+0x4a>
				arg->position -= 2;
    2290:	6953      	ldr	r3, [r2, #20]
    2292:	3b02      	subs	r3, #2
    2294:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    2296:	e7f0      	b.n	227a <Encoder::isr24()+0x4a>
    2298:	20006eec 	.word	0x20006eec

0000229c <Encoder::isr25()>:
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    229c:	b410      	push	{r4}
    229e:	4b19      	ldr	r3, [pc, #100]	; (2304 <Encoder::isr25()+0x68>)
    22a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    22a2:	6813      	ldr	r3, [r2, #0]
    22a4:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    22a6:	6853      	ldr	r3, [r2, #4]
    22a8:	6819      	ldr	r1, [r3, #0]
    22aa:	68d3      	ldr	r3, [r2, #12]
    22ac:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    22ae:	7c13      	ldrb	r3, [r2, #16]
    22b0:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    22b4:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    22b6:	4204      	tst	r4, r0
    22b8:	bf18      	it	ne
    22ba:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    22be:	b109      	cbz	r1, 22c4 <Encoder::isr25()+0x28>
    22c0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    22c4:	0899      	lsrs	r1, r3, #2
    22c6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    22c8:	3b01      	subs	r3, #1
    22ca:	2b0d      	cmp	r3, #13
    22cc:	d80b      	bhi.n	22e6 <Encoder::isr25()+0x4a>
    22ce:	e8df f003 	tbb	[pc, r3]
    22d2:	0d07      	.short	0x0d07
    22d4:	150a0d11 	.word	0x150a0d11
    22d8:	0a150707 	.word	0x0a150707
    22dc:	070d110d 	.word	0x070d110d
				arg->position++;
    22e0:	6953      	ldr	r3, [r2, #20]
    22e2:	3301      	adds	r3, #1
    22e4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    22e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    22ea:	4770      	bx	lr
				arg->position--;
    22ec:	6953      	ldr	r3, [r2, #20]
    22ee:	3b01      	subs	r3, #1
    22f0:	6153      	str	r3, [r2, #20]
				return;
    22f2:	e7f8      	b.n	22e6 <Encoder::isr25()+0x4a>
				arg->position += 2;
    22f4:	6953      	ldr	r3, [r2, #20]
    22f6:	3302      	adds	r3, #2
    22f8:	6153      	str	r3, [r2, #20]
				return;
    22fa:	e7f4      	b.n	22e6 <Encoder::isr25()+0x4a>
				arg->position -= 2;
    22fc:	6953      	ldr	r3, [r2, #20]
    22fe:	3b02      	subs	r3, #2
    2300:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2302:	e7f0      	b.n	22e6 <Encoder::isr25()+0x4a>
    2304:	20006eec 	.word	0x20006eec

00002308 <Encoder::isr26()>:
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    2308:	b410      	push	{r4}
    230a:	4b19      	ldr	r3, [pc, #100]	; (2370 <Encoder::isr26()+0x68>)
    230c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    230e:	6813      	ldr	r3, [r2, #0]
    2310:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2312:	6853      	ldr	r3, [r2, #4]
    2314:	6819      	ldr	r1, [r3, #0]
    2316:	68d3      	ldr	r3, [r2, #12]
    2318:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    231a:	7c13      	ldrb	r3, [r2, #16]
    231c:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2320:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    2322:	4204      	tst	r4, r0
    2324:	bf18      	it	ne
    2326:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    232a:	b109      	cbz	r1, 2330 <Encoder::isr26()+0x28>
    232c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2330:	0899      	lsrs	r1, r3, #2
    2332:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2334:	3b01      	subs	r3, #1
    2336:	2b0d      	cmp	r3, #13
    2338:	d80b      	bhi.n	2352 <Encoder::isr26()+0x4a>
    233a:	e8df f003 	tbb	[pc, r3]
    233e:	0d07      	.short	0x0d07
    2340:	150a0d11 	.word	0x150a0d11
    2344:	0a150707 	.word	0x0a150707
    2348:	070d110d 	.word	0x070d110d
				arg->position++;
    234c:	6953      	ldr	r3, [r2, #20]
    234e:	3301      	adds	r3, #1
    2350:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    2352:	f85d 4b04 	ldr.w	r4, [sp], #4
    2356:	4770      	bx	lr
				arg->position--;
    2358:	6953      	ldr	r3, [r2, #20]
    235a:	3b01      	subs	r3, #1
    235c:	6153      	str	r3, [r2, #20]
				return;
    235e:	e7f8      	b.n	2352 <Encoder::isr26()+0x4a>
				arg->position += 2;
    2360:	6953      	ldr	r3, [r2, #20]
    2362:	3302      	adds	r3, #2
    2364:	6153      	str	r3, [r2, #20]
				return;
    2366:	e7f4      	b.n	2352 <Encoder::isr26()+0x4a>
				arg->position -= 2;
    2368:	6953      	ldr	r3, [r2, #20]
    236a:	3b02      	subs	r3, #2
    236c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    236e:	e7f0      	b.n	2352 <Encoder::isr26()+0x4a>
    2370:	20006eec 	.word	0x20006eec

00002374 <Encoder::isr27()>:
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    2374:	b410      	push	{r4}
    2376:	4b19      	ldr	r3, [pc, #100]	; (23dc <Encoder::isr27()+0x68>)
    2378:	6eda      	ldr	r2, [r3, #108]	; 0x6c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    237a:	6813      	ldr	r3, [r2, #0]
    237c:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    237e:	6853      	ldr	r3, [r2, #4]
    2380:	6819      	ldr	r1, [r3, #0]
    2382:	68d3      	ldr	r3, [r2, #12]
    2384:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    2386:	7c13      	ldrb	r3, [r2, #16]
    2388:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    238c:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    238e:	4204      	tst	r4, r0
    2390:	bf18      	it	ne
    2392:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    2396:	b109      	cbz	r1, 239c <Encoder::isr27()+0x28>
    2398:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    239c:	0899      	lsrs	r1, r3, #2
    239e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    23a0:	3b01      	subs	r3, #1
    23a2:	2b0d      	cmp	r3, #13
    23a4:	d80b      	bhi.n	23be <Encoder::isr27()+0x4a>
    23a6:	e8df f003 	tbb	[pc, r3]
    23aa:	0d07      	.short	0x0d07
    23ac:	150a0d11 	.word	0x150a0d11
    23b0:	0a150707 	.word	0x0a150707
    23b4:	070d110d 	.word	0x070d110d
				arg->position++;
    23b8:	6953      	ldr	r3, [r2, #20]
    23ba:	3301      	adds	r3, #1
    23bc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    23be:	f85d 4b04 	ldr.w	r4, [sp], #4
    23c2:	4770      	bx	lr
				arg->position--;
    23c4:	6953      	ldr	r3, [r2, #20]
    23c6:	3b01      	subs	r3, #1
    23c8:	6153      	str	r3, [r2, #20]
				return;
    23ca:	e7f8      	b.n	23be <Encoder::isr27()+0x4a>
				arg->position += 2;
    23cc:	6953      	ldr	r3, [r2, #20]
    23ce:	3302      	adds	r3, #2
    23d0:	6153      	str	r3, [r2, #20]
				return;
    23d2:	e7f4      	b.n	23be <Encoder::isr27()+0x4a>
				arg->position -= 2;
    23d4:	6953      	ldr	r3, [r2, #20]
    23d6:	3b02      	subs	r3, #2
    23d8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    23da:	e7f0      	b.n	23be <Encoder::isr27()+0x4a>
    23dc:	20006eec 	.word	0x20006eec

000023e0 <Encoder::isr4()>:
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    23e0:	b410      	push	{r4}
    23e2:	4b19      	ldr	r3, [pc, #100]	; (2448 <Encoder::isr4()+0x68>)
    23e4:	691a      	ldr	r2, [r3, #16]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    23e6:	6813      	ldr	r3, [r2, #0]
    23e8:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    23ea:	6853      	ldr	r3, [r2, #4]
    23ec:	6819      	ldr	r1, [r3, #0]
    23ee:	68d3      	ldr	r3, [r2, #12]
    23f0:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    23f2:	7c13      	ldrb	r3, [r2, #16]
    23f4:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    23f8:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    23fa:	4204      	tst	r4, r0
    23fc:	bf18      	it	ne
    23fe:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    2402:	b109      	cbz	r1, 2408 <Encoder::isr4()+0x28>
    2404:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2408:	0899      	lsrs	r1, r3, #2
    240a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    240c:	3b01      	subs	r3, #1
    240e:	2b0d      	cmp	r3, #13
    2410:	d80b      	bhi.n	242a <Encoder::isr4()+0x4a>
    2412:	e8df f003 	tbb	[pc, r3]
    2416:	0d07      	.short	0x0d07
    2418:	150a0d11 	.word	0x150a0d11
    241c:	0a150707 	.word	0x0a150707
    2420:	070d110d 	.word	0x070d110d
				arg->position++;
    2424:	6953      	ldr	r3, [r2, #20]
    2426:	3301      	adds	r3, #1
    2428:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    242a:	f85d 4b04 	ldr.w	r4, [sp], #4
    242e:	4770      	bx	lr
				arg->position--;
    2430:	6953      	ldr	r3, [r2, #20]
    2432:	3b01      	subs	r3, #1
    2434:	6153      	str	r3, [r2, #20]
				return;
    2436:	e7f8      	b.n	242a <Encoder::isr4()+0x4a>
				arg->position += 2;
    2438:	6953      	ldr	r3, [r2, #20]
    243a:	3302      	adds	r3, #2
    243c:	6153      	str	r3, [r2, #20]
				return;
    243e:	e7f4      	b.n	242a <Encoder::isr4()+0x4a>
				arg->position -= 2;
    2440:	6953      	ldr	r3, [r2, #20]
    2442:	3b02      	subs	r3, #2
    2444:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    2446:	e7f0      	b.n	242a <Encoder::isr4()+0x4a>
    2448:	20006eec 	.word	0x20006eec

0000244c <Encoder::isr5()>:
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    244c:	b410      	push	{r4}
    244e:	4b19      	ldr	r3, [pc, #100]	; (24b4 <Encoder::isr5()+0x68>)
    2450:	695a      	ldr	r2, [r3, #20]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2452:	6813      	ldr	r3, [r2, #0]
    2454:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2456:	6853      	ldr	r3, [r2, #4]
    2458:	6819      	ldr	r1, [r3, #0]
    245a:	68d3      	ldr	r3, [r2, #12]
    245c:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    245e:	7c13      	ldrb	r3, [r2, #16]
    2460:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2464:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    2466:	4204      	tst	r4, r0
    2468:	bf18      	it	ne
    246a:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    246e:	b109      	cbz	r1, 2474 <Encoder::isr5()+0x28>
    2470:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2474:	0899      	lsrs	r1, r3, #2
    2476:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2478:	3b01      	subs	r3, #1
    247a:	2b0d      	cmp	r3, #13
    247c:	d80b      	bhi.n	2496 <Encoder::isr5()+0x4a>
    247e:	e8df f003 	tbb	[pc, r3]
    2482:	0d07      	.short	0x0d07
    2484:	150a0d11 	.word	0x150a0d11
    2488:	0a150707 	.word	0x0a150707
    248c:	070d110d 	.word	0x070d110d
				arg->position++;
    2490:	6953      	ldr	r3, [r2, #20]
    2492:	3301      	adds	r3, #1
    2494:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    2496:	f85d 4b04 	ldr.w	r4, [sp], #4
    249a:	4770      	bx	lr
				arg->position--;
    249c:	6953      	ldr	r3, [r2, #20]
    249e:	3b01      	subs	r3, #1
    24a0:	6153      	str	r3, [r2, #20]
				return;
    24a2:	e7f8      	b.n	2496 <Encoder::isr5()+0x4a>
				arg->position += 2;
    24a4:	6953      	ldr	r3, [r2, #20]
    24a6:	3302      	adds	r3, #2
    24a8:	6153      	str	r3, [r2, #20]
				return;
    24aa:	e7f4      	b.n	2496 <Encoder::isr5()+0x4a>
				arg->position -= 2;
    24ac:	6953      	ldr	r3, [r2, #20]
    24ae:	3b02      	subs	r3, #2
    24b0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    24b2:	e7f0      	b.n	2496 <Encoder::isr5()+0x4a>
    24b4:	20006eec 	.word	0x20006eec

000024b8 <Encoder::isr6()>:
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    24b8:	b410      	push	{r4}
    24ba:	4b19      	ldr	r3, [pc, #100]	; (2520 <Encoder::isr6()+0x68>)
    24bc:	699a      	ldr	r2, [r3, #24]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    24be:	6813      	ldr	r3, [r2, #0]
    24c0:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    24c2:	6853      	ldr	r3, [r2, #4]
    24c4:	6819      	ldr	r1, [r3, #0]
    24c6:	68d3      	ldr	r3, [r2, #12]
    24c8:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    24ca:	7c13      	ldrb	r3, [r2, #16]
    24cc:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    24d0:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    24d2:	4204      	tst	r4, r0
    24d4:	bf18      	it	ne
    24d6:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    24da:	b109      	cbz	r1, 24e0 <Encoder::isr6()+0x28>
    24dc:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    24e0:	0899      	lsrs	r1, r3, #2
    24e2:	7411      	strb	r1, [r2, #16]
		switch (state) {
    24e4:	3b01      	subs	r3, #1
    24e6:	2b0d      	cmp	r3, #13
    24e8:	d80b      	bhi.n	2502 <Encoder::isr6()+0x4a>
    24ea:	e8df f003 	tbb	[pc, r3]
    24ee:	0d07      	.short	0x0d07
    24f0:	150a0d11 	.word	0x150a0d11
    24f4:	0a150707 	.word	0x0a150707
    24f8:	070d110d 	.word	0x070d110d
				arg->position++;
    24fc:	6953      	ldr	r3, [r2, #20]
    24fe:	3301      	adds	r3, #1
    2500:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    2502:	f85d 4b04 	ldr.w	r4, [sp], #4
    2506:	4770      	bx	lr
				arg->position--;
    2508:	6953      	ldr	r3, [r2, #20]
    250a:	3b01      	subs	r3, #1
    250c:	6153      	str	r3, [r2, #20]
				return;
    250e:	e7f8      	b.n	2502 <Encoder::isr6()+0x4a>
				arg->position += 2;
    2510:	6953      	ldr	r3, [r2, #20]
    2512:	3302      	adds	r3, #2
    2514:	6153      	str	r3, [r2, #20]
				return;
    2516:	e7f4      	b.n	2502 <Encoder::isr6()+0x4a>
				arg->position -= 2;
    2518:	6953      	ldr	r3, [r2, #20]
    251a:	3b02      	subs	r3, #2
    251c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    251e:	e7f0      	b.n	2502 <Encoder::isr6()+0x4a>
    2520:	20006eec 	.word	0x20006eec

00002524 <Encoder::isr7()>:
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    2524:	b410      	push	{r4}
    2526:	4b19      	ldr	r3, [pc, #100]	; (258c <Encoder::isr7()+0x68>)
    2528:	69da      	ldr	r2, [r3, #28]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    252a:	6813      	ldr	r3, [r2, #0]
    252c:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    252e:	6853      	ldr	r3, [r2, #4]
    2530:	6819      	ldr	r1, [r3, #0]
    2532:	68d3      	ldr	r3, [r2, #12]
    2534:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    2536:	7c13      	ldrb	r3, [r2, #16]
    2538:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    253c:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    253e:	4204      	tst	r4, r0
    2540:	bf18      	it	ne
    2542:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    2546:	b109      	cbz	r1, 254c <Encoder::isr7()+0x28>
    2548:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    254c:	0899      	lsrs	r1, r3, #2
    254e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2550:	3b01      	subs	r3, #1
    2552:	2b0d      	cmp	r3, #13
    2554:	d80b      	bhi.n	256e <Encoder::isr7()+0x4a>
    2556:	e8df f003 	tbb	[pc, r3]
    255a:	0d07      	.short	0x0d07
    255c:	150a0d11 	.word	0x150a0d11
    2560:	0a150707 	.word	0x0a150707
    2564:	070d110d 	.word	0x070d110d
				arg->position++;
    2568:	6953      	ldr	r3, [r2, #20]
    256a:	3301      	adds	r3, #1
    256c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    256e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2572:	4770      	bx	lr
				arg->position--;
    2574:	6953      	ldr	r3, [r2, #20]
    2576:	3b01      	subs	r3, #1
    2578:	6153      	str	r3, [r2, #20]
				return;
    257a:	e7f8      	b.n	256e <Encoder::isr7()+0x4a>
				arg->position += 2;
    257c:	6953      	ldr	r3, [r2, #20]
    257e:	3302      	adds	r3, #2
    2580:	6153      	str	r3, [r2, #20]
				return;
    2582:	e7f4      	b.n	256e <Encoder::isr7()+0x4a>
				arg->position -= 2;
    2584:	6953      	ldr	r3, [r2, #20]
    2586:	3b02      	subs	r3, #2
    2588:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    258a:	e7f0      	b.n	256e <Encoder::isr7()+0x4a>
    258c:	20006eec 	.word	0x20006eec

00002590 <Encoder::isr8()>:
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    2590:	b410      	push	{r4}
    2592:	4b19      	ldr	r3, [pc, #100]	; (25f8 <Encoder::isr8()+0x68>)
    2594:	6a1a      	ldr	r2, [r3, #32]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2596:	6813      	ldr	r3, [r2, #0]
    2598:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    259a:	6853      	ldr	r3, [r2, #4]
    259c:	6819      	ldr	r1, [r3, #0]
    259e:	68d3      	ldr	r3, [r2, #12]
    25a0:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    25a2:	7c13      	ldrb	r3, [r2, #16]
    25a4:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    25a8:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    25aa:	4204      	tst	r4, r0
    25ac:	bf18      	it	ne
    25ae:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    25b2:	b109      	cbz	r1, 25b8 <Encoder::isr8()+0x28>
    25b4:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    25b8:	0899      	lsrs	r1, r3, #2
    25ba:	7411      	strb	r1, [r2, #16]
		switch (state) {
    25bc:	3b01      	subs	r3, #1
    25be:	2b0d      	cmp	r3, #13
    25c0:	d80b      	bhi.n	25da <Encoder::isr8()+0x4a>
    25c2:	e8df f003 	tbb	[pc, r3]
    25c6:	0d07      	.short	0x0d07
    25c8:	150a0d11 	.word	0x150a0d11
    25cc:	0a150707 	.word	0x0a150707
    25d0:	070d110d 	.word	0x070d110d
				arg->position++;
    25d4:	6953      	ldr	r3, [r2, #20]
    25d6:	3301      	adds	r3, #1
    25d8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    25da:	f85d 4b04 	ldr.w	r4, [sp], #4
    25de:	4770      	bx	lr
				arg->position--;
    25e0:	6953      	ldr	r3, [r2, #20]
    25e2:	3b01      	subs	r3, #1
    25e4:	6153      	str	r3, [r2, #20]
				return;
    25e6:	e7f8      	b.n	25da <Encoder::isr8()+0x4a>
				arg->position += 2;
    25e8:	6953      	ldr	r3, [r2, #20]
    25ea:	3302      	adds	r3, #2
    25ec:	6153      	str	r3, [r2, #20]
				return;
    25ee:	e7f4      	b.n	25da <Encoder::isr8()+0x4a>
				arg->position -= 2;
    25f0:	6953      	ldr	r3, [r2, #20]
    25f2:	3b02      	subs	r3, #2
    25f4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    25f6:	e7f0      	b.n	25da <Encoder::isr8()+0x4a>
    25f8:	20006eec 	.word	0x20006eec

000025fc <Encoder::isr9()>:
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    25fc:	b410      	push	{r4}
    25fe:	4b19      	ldr	r3, [pc, #100]	; (2664 <Encoder::isr9()+0x68>)
    2600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2602:	6813      	ldr	r3, [r2, #0]
    2604:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2606:	6853      	ldr	r3, [r2, #4]
    2608:	6819      	ldr	r1, [r3, #0]
    260a:	68d3      	ldr	r3, [r2, #12]
    260c:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    260e:	7c13      	ldrb	r3, [r2, #16]
    2610:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2614:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    2616:	4204      	tst	r4, r0
    2618:	bf18      	it	ne
    261a:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    261e:	b109      	cbz	r1, 2624 <Encoder::isr9()+0x28>
    2620:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2624:	0899      	lsrs	r1, r3, #2
    2626:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2628:	3b01      	subs	r3, #1
    262a:	2b0d      	cmp	r3, #13
    262c:	d80b      	bhi.n	2646 <Encoder::isr9()+0x4a>
    262e:	e8df f003 	tbb	[pc, r3]
    2632:	0d07      	.short	0x0d07
    2634:	150a0d11 	.word	0x150a0d11
    2638:	0a150707 	.word	0x0a150707
    263c:	070d110d 	.word	0x070d110d
				arg->position++;
    2640:	6953      	ldr	r3, [r2, #20]
    2642:	3301      	adds	r3, #1
    2644:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    2646:	f85d 4b04 	ldr.w	r4, [sp], #4
    264a:	4770      	bx	lr
				arg->position--;
    264c:	6953      	ldr	r3, [r2, #20]
    264e:	3b01      	subs	r3, #1
    2650:	6153      	str	r3, [r2, #20]
				return;
    2652:	e7f8      	b.n	2646 <Encoder::isr9()+0x4a>
				arg->position += 2;
    2654:	6953      	ldr	r3, [r2, #20]
    2656:	3302      	adds	r3, #2
    2658:	6153      	str	r3, [r2, #20]
				return;
    265a:	e7f4      	b.n	2646 <Encoder::isr9()+0x4a>
				arg->position -= 2;
    265c:	6953      	ldr	r3, [r2, #20]
    265e:	3b02      	subs	r3, #2
    2660:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    2662:	e7f0      	b.n	2646 <Encoder::isr9()+0x4a>
    2664:	20006eec 	.word	0x20006eec

00002668 <Encoder::isr10()>:
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    2668:	b410      	push	{r4}
    266a:	4b19      	ldr	r3, [pc, #100]	; (26d0 <Encoder::isr10()+0x68>)
    266c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    266e:	6813      	ldr	r3, [r2, #0]
    2670:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2672:	6853      	ldr	r3, [r2, #4]
    2674:	6819      	ldr	r1, [r3, #0]
    2676:	68d3      	ldr	r3, [r2, #12]
    2678:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    267a:	7c13      	ldrb	r3, [r2, #16]
    267c:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2680:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    2682:	4204      	tst	r4, r0
    2684:	bf18      	it	ne
    2686:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    268a:	b109      	cbz	r1, 2690 <Encoder::isr10()+0x28>
    268c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2690:	0899      	lsrs	r1, r3, #2
    2692:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2694:	3b01      	subs	r3, #1
    2696:	2b0d      	cmp	r3, #13
    2698:	d80b      	bhi.n	26b2 <Encoder::isr10()+0x4a>
    269a:	e8df f003 	tbb	[pc, r3]
    269e:	0d07      	.short	0x0d07
    26a0:	150a0d11 	.word	0x150a0d11
    26a4:	0a150707 	.word	0x0a150707
    26a8:	070d110d 	.word	0x070d110d
				arg->position++;
    26ac:	6953      	ldr	r3, [r2, #20]
    26ae:	3301      	adds	r3, #1
    26b0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    26b2:	f85d 4b04 	ldr.w	r4, [sp], #4
    26b6:	4770      	bx	lr
				arg->position--;
    26b8:	6953      	ldr	r3, [r2, #20]
    26ba:	3b01      	subs	r3, #1
    26bc:	6153      	str	r3, [r2, #20]
				return;
    26be:	e7f8      	b.n	26b2 <Encoder::isr10()+0x4a>
				arg->position += 2;
    26c0:	6953      	ldr	r3, [r2, #20]
    26c2:	3302      	adds	r3, #2
    26c4:	6153      	str	r3, [r2, #20]
				return;
    26c6:	e7f4      	b.n	26b2 <Encoder::isr10()+0x4a>
				arg->position -= 2;
    26c8:	6953      	ldr	r3, [r2, #20]
    26ca:	3b02      	subs	r3, #2
    26cc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    26ce:	e7f0      	b.n	26b2 <Encoder::isr10()+0x4a>
    26d0:	20006eec 	.word	0x20006eec

000026d4 <Encoder::isr11()>:
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    26d4:	b410      	push	{r4}
    26d6:	4b19      	ldr	r3, [pc, #100]	; (273c <Encoder::isr11()+0x68>)
    26d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    26da:	6813      	ldr	r3, [r2, #0]
    26dc:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    26de:	6853      	ldr	r3, [r2, #4]
    26e0:	6819      	ldr	r1, [r3, #0]
    26e2:	68d3      	ldr	r3, [r2, #12]
    26e4:	4019      	ands	r1, r3
		uint8_t state = arg->state & 3;
    26e6:	7c13      	ldrb	r3, [r2, #16]
    26e8:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    26ec:	6890      	ldr	r0, [r2, #8]
		if (p1val) state |= 4;
    26ee:	4204      	tst	r4, r0
    26f0:	bf18      	it	ne
    26f2:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    26f6:	b109      	cbz	r1, 26fc <Encoder::isr11()+0x28>
    26f8:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    26fc:	0899      	lsrs	r1, r3, #2
    26fe:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2700:	3b01      	subs	r3, #1
    2702:	2b0d      	cmp	r3, #13
    2704:	d80b      	bhi.n	271e <Encoder::isr11()+0x4a>
    2706:	e8df f003 	tbb	[pc, r3]
    270a:	0d07      	.short	0x0d07
    270c:	150a0d11 	.word	0x150a0d11
    2710:	0a150707 	.word	0x0a150707
    2714:	070d110d 	.word	0x070d110d
				arg->position++;
    2718:	6953      	ldr	r3, [r2, #20]
    271a:	3301      	adds	r3, #1
    271c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    271e:	f85d 4b04 	ldr.w	r4, [sp], #4
    2722:	4770      	bx	lr
				arg->position--;
    2724:	6953      	ldr	r3, [r2, #20]
    2726:	3b01      	subs	r3, #1
    2728:	6153      	str	r3, [r2, #20]
				return;
    272a:	e7f8      	b.n	271e <Encoder::isr11()+0x4a>
				arg->position += 2;
    272c:	6953      	ldr	r3, [r2, #20]
    272e:	3302      	adds	r3, #2
    2730:	6153      	str	r3, [r2, #20]
				return;
    2732:	e7f4      	b.n	271e <Encoder::isr11()+0x4a>
				arg->position -= 2;
    2734:	6953      	ldr	r3, [r2, #20]
    2736:	3b02      	subs	r3, #2
    2738:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    273a:	e7f0      	b.n	271e <Encoder::isr11()+0x4a>
    273c:	20006eec 	.word	0x20006eec

00002740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>:

class AudioConnection
{
public:
	AudioConnection();
	AudioConnection(AudioStream &source, AudioStream &destination)
    2740:	b570      	push	{r4, r5, r6, lr}
    2742:	b082      	sub	sp, #8
    2744:	4604      	mov	r4, r0
    2746:	460d      	mov	r5, r1
    2748:	4616      	mov	r6, r2
		: AudioConnection() { connect(source,destination); }
    274a:	f013 fa05 	bl	15b58 <AudioConnection::AudioConnection()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
	friend class AudioStream;
	~AudioConnection(); 
	int disconnect(void);
	int connect(void);
	int connect(AudioStream &source, AudioStream &destination) {return connect(source,0,destination,0);};
    274e:	2200      	movs	r2, #0
    2750:	9200      	str	r2, [sp, #0]
    2752:	4633      	mov	r3, r6
    2754:	4629      	mov	r1, r5
    2756:	4620      	mov	r0, r4
    2758:	f013 fa86 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
		: AudioConnection() { connect(source,destination); }
    275c:	4620      	mov	r0, r4
    275e:	b002      	add	sp, #8
    2760:	bd70      	pop	{r4, r5, r6, pc}
	...

00002764 <AudioEffectEnvelope::AudioEffectEnvelope()>:

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
		num_inputs(ninput), inputQueue(iqueue) {
    2764:	4b1a      	ldr	r3, [pc, #104]	; (27d0 <AudioEffectEnvelope::AudioEffectEnvelope()+0x6c>)
    2766:	6003      	str	r3, [r0, #0]
    2768:	2301      	movs	r3, #1
    276a:	7243      	strb	r3, [r0, #9]
#define SAMPLES_PER_MSEC (AUDIO_SAMPLE_RATE_EXACT/1000.0f)

class AudioEffectEnvelope : public AudioStream
{
public:
	AudioEffectEnvelope() : AudioStream(1, inputQueueArray) {
    276c:	f100 0318 	add.w	r3, r0, #24
    2770:	6103      	str	r3, [r0, #16]
			active = false;
    2772:	2300      	movs	r3, #0
    2774:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    2776:	60c3      	str	r3, [r0, #12]
			for (int i=0; i < num_inputs; i++) {
				inputQueue[i] = NULL;
    2778:	4619      	mov	r1, r3
    277a:	6902      	ldr	r2, [r0, #16]
    277c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    2780:	3301      	adds	r3, #1
    2782:	7a42      	ldrb	r2, [r0, #9]
    2784:	4293      	cmp	r3, r2
    2786:	dbf8      	blt.n	277a <AudioEffectEnvelope::AudioEffectEnvelope()+0x16>
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2788:	4b12      	ldr	r3, [pc, #72]	; (27d4 <AudioEffectEnvelope::AudioEffectEnvelope()+0x70>)
    278a:	681b      	ldr	r3, [r3, #0]
    278c:	b1e3      	cbz	r3, 27c8 <AudioEffectEnvelope::AudioEffectEnvelope()+0x64>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    278e:	461a      	mov	r2, r3
    2790:	695b      	ldr	r3, [r3, #20]
    2792:	2b00      	cmp	r3, #0
    2794:	d1fb      	bne.n	278e <AudioEffectEnvelope::AudioEffectEnvelope()+0x2a>
				p->next_update = this;
    2796:	6150      	str	r0, [r2, #20]
			}
			next_update = NULL;
    2798:	2300      	movs	r3, #0
    279a:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    279c:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    279e:	80c3      	strh	r3, [r0, #6]
			numConnections = 0;
    27a0:	7283      	strb	r3, [r0, #10]
    27a2:	4a0d      	ldr	r2, [pc, #52]	; (27d8 <AudioEffectEnvelope::AudioEffectEnvelope()+0x74>)
    27a4:	6002      	str	r2, [r0, #0]
		state = 0;
    27a6:	7703      	strb	r3, [r0, #28]
		releaseNoteOn(5.0f);
	}
	void noteOn();
	void noteOff();
	void delay(float milliseconds) {
		delay_count = milliseconds2count(milliseconds);
    27a8:	8503      	strh	r3, [r0, #40]	; 0x28
	}
	void attack(float milliseconds) {
		attack_count = milliseconds2count(milliseconds);
    27aa:	233a      	movs	r3, #58	; 0x3a
    27ac:	8543      	strh	r3, [r0, #42]	; 0x2a
		if (attack_count == 0) attack_count = 1;
	}
	void hold(float milliseconds) {
		hold_count = milliseconds2count(milliseconds);
    27ae:	230e      	movs	r3, #14
    27b0:	8583      	strh	r3, [r0, #44]	; 0x2c
	}
	void decay(float milliseconds) {
		decay_count = milliseconds2count(milliseconds);
    27b2:	23c1      	movs	r3, #193	; 0xc1
    27b4:	85c3      	strh	r3, [r0, #46]	; 0x2e
		if (decay_count == 0) decay_count = 1;
	}
	void sustain(float level) {
		if (level < 0.0f) level = 0;
		else if (level > 1.0f) level = 1.0f;
		sustain_mult = level * 1073741824.0f;
    27b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    27ba:	6303      	str	r3, [r0, #48]	; 0x30
	}
	void release(float milliseconds) {
		release_count = milliseconds2count(milliseconds);
    27bc:	f240 6376 	movw	r3, #1654	; 0x676
    27c0:	8683      	strh	r3, [r0, #52]	; 0x34
		if (release_count == 0) release_count = 1;
	}
	void releaseNoteOn(float milliseconds) {
		release_forced_count = milliseconds2count(milliseconds);
    27c2:	231c      	movs	r3, #28
    27c4:	86c3      	strh	r3, [r0, #54]	; 0x36
	}
    27c6:	4770      	bx	lr
				first_update = this;
    27c8:	4b02      	ldr	r3, [pc, #8]	; (27d4 <AudioEffectEnvelope::AudioEffectEnvelope()+0x70>)
    27ca:	6018      	str	r0, [r3, #0]
    27cc:	e7e4      	b.n	2798 <AudioEffectEnvelope::AudioEffectEnvelope()+0x34>
    27ce:	bf00      	nop
    27d0:	20002590 	.word	0x20002590
    27d4:	20006d60 	.word	0x20006d60
    27d8:	20002690 	.word	0x20002690

000027dc <AudioFilterStateVariable::AudioFilterStateVariable()>:
		num_inputs(ninput), inputQueue(iqueue) {
    27dc:	4b19      	ldr	r3, [pc, #100]	; (2844 <AudioFilterStateVariable::AudioFilterStateVariable()+0x68>)
    27de:	6003      	str	r3, [r0, #0]
    27e0:	2302      	movs	r3, #2
    27e2:	7243      	strb	r3, [r0, #9]
#include <AudioStream.h> // github.com/PaulStoffregen/cores/blob/master/teensy4/AudioStream.h

class AudioFilterStateVariable: public AudioStream
{
public:
	AudioFilterStateVariable() : AudioStream(2, inputQueueArray) {
    27e4:	f100 0334 	add.w	r3, r0, #52	; 0x34
    27e8:	6103      	str	r3, [r0, #16]
			active = false;
    27ea:	2300      	movs	r3, #0
    27ec:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    27ee:	60c3      	str	r3, [r0, #12]
				inputQueue[i] = NULL;
    27f0:	4619      	mov	r1, r3
    27f2:	6902      	ldr	r2, [r0, #16]
    27f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    27f8:	3301      	adds	r3, #1
    27fa:	7a42      	ldrb	r2, [r0, #9]
    27fc:	4293      	cmp	r3, r2
    27fe:	dbf8      	blt.n	27f2 <AudioFilterStateVariable::AudioFilterStateVariable()+0x16>
			if (first_update == NULL) {
    2800:	4b11      	ldr	r3, [pc, #68]	; (2848 <AudioFilterStateVariable::AudioFilterStateVariable()+0x6c>)
    2802:	681b      	ldr	r3, [r3, #0]
    2804:	b1d3      	cbz	r3, 283c <AudioFilterStateVariable::AudioFilterStateVariable()+0x60>
				for (p=first_update; p->next_update; p = p->next_update) ;
    2806:	461a      	mov	r2, r3
    2808:	695b      	ldr	r3, [r3, #20]
    280a:	2b00      	cmp	r3, #0
    280c:	d1fb      	bne.n	2806 <AudioFilterStateVariable::AudioFilterStateVariable()+0x2a>
				p->next_update = this;
    280e:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    2810:	2300      	movs	r3, #0
    2812:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    2814:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    2816:	80c3      	strh	r3, [r0, #6]
			numConnections = 0;
    2818:	7283      	strb	r3, [r0, #10]
    281a:	4a0c      	ldr	r2, [pc, #48]	; (284c <AudioFilterStateVariable::AudioFilterStateVariable()+0x70>)
    281c:	6002      	str	r2, [r0, #0]
		state_bandpass = 0;
	}
	void frequency(float freq) {
		if (freq < 20.0f) freq = 20.0f;
		else if (freq > AUDIO_SAMPLE_RATE_EXACT/2.5f) freq = AUDIO_SAMPLE_RATE_EXACT/2.5f;
		setting_fcenter = (freq * (3.141592654f/(AUDIO_SAMPLE_RATE_EXACT*2.0f)))
    281e:	4a0c      	ldr	r2, [pc, #48]	; (2850 <AudioFilterStateVariable::AudioFilterStateVariable()+0x74>)
    2820:	6182      	str	r2, [r0, #24]
			* 2147483647.0f;
		// TODO: should we use an approximation when freq is not a const,
		// so the sinf() function isn't linked?
		setting_fmult = sinf(freq * (3.141592654f/(AUDIO_SAMPLE_RATE_EXACT*2.0f)))
    2822:	f5a2 527c 	sub.w	r2, r2, #16128	; 0x3f00
    2826:	3a31      	subs	r2, #49	; 0x31
    2828:	61c2      	str	r2, [r0, #28]
		// filter's corner frequency is Fcenter * 2^(control * N)
		// where "control" ranges from -1.0 to +1.0
		// and "N" allows the frequency to change from 0 to 7 octaves
		if (n < 0.0f) n = 0.0f;
		else if (n > 6.9999f) n = 6.9999f;
		setting_octavemult = n * 4096.0f;
    282a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    282e:	6202      	str	r2, [r0, #32]
		setting_damp = (1.0f / q) * 1073741824.0f;
    2830:	4a08      	ldr	r2, [pc, #32]	; (2854 <AudioFilterStateVariable::AudioFilterStateVariable()+0x78>)
    2832:	6242      	str	r2, [r0, #36]	; 0x24
		state_inputprev = 0;
    2834:	6283      	str	r3, [r0, #40]	; 0x28
		state_lowpass = 0;
    2836:	62c3      	str	r3, [r0, #44]	; 0x2c
		state_bandpass = 0;
    2838:	6303      	str	r3, [r0, #48]	; 0x30
	}
    283a:	4770      	bx	lr
				first_update = this;
    283c:	4b02      	ldr	r3, [pc, #8]	; (2848 <AudioFilterStateVariable::AudioFilterStateVariable()+0x6c>)
    283e:	6018      	str	r0, [r3, #0]
    2840:	e7e6      	b.n	2810 <AudioFilterStateVariable::AudioFilterStateVariable()+0x34>
    2842:	bf00      	nop
    2844:	20002590 	.word	0x20002590
    2848:	20006d60 	.word	0x20006d60
    284c:	20002744 	.word	0x20002744
    2850:	048f2989 	.word	0x048f2989
    2854:	5a85f980 	.word	0x5a85f980

00002858 <AudioMixer4::AudioMixer4()>:
		num_inputs(ninput), inputQueue(iqueue) {
    2858:	4b15      	ldr	r3, [pc, #84]	; (28b0 <AudioMixer4::AudioMixer4()+0x58>)
    285a:	6003      	str	r3, [r0, #0]
    285c:	2304      	movs	r3, #4
    285e:	7243      	strb	r3, [r0, #9]

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    2860:	f100 0328 	add.w	r3, r0, #40	; 0x28
    2864:	6103      	str	r3, [r0, #16]
			active = false;
    2866:	2300      	movs	r3, #0
    2868:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    286a:	60c3      	str	r3, [r0, #12]
				inputQueue[i] = NULL;
    286c:	4619      	mov	r1, r3
    286e:	6902      	ldr	r2, [r0, #16]
    2870:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    2874:	3301      	adds	r3, #1
    2876:	7a42      	ldrb	r2, [r0, #9]
    2878:	4293      	cmp	r3, r2
    287a:	dbf8      	blt.n	286e <AudioMixer4::AudioMixer4()+0x16>
			if (first_update == NULL) {
    287c:	4b0d      	ldr	r3, [pc, #52]	; (28b4 <AudioMixer4::AudioMixer4()+0x5c>)
    287e:	681b      	ldr	r3, [r3, #0]
    2880:	b193      	cbz	r3, 28a8 <AudioMixer4::AudioMixer4()+0x50>
				for (p=first_update; p->next_update; p = p->next_update) ;
    2882:	461a      	mov	r2, r3
    2884:	695b      	ldr	r3, [r3, #20]
    2886:	2b00      	cmp	r3, #0
    2888:	d1fb      	bne.n	2882 <AudioMixer4::AudioMixer4()+0x2a>
				p->next_update = this;
    288a:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    288c:	2300      	movs	r3, #0
    288e:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    2890:	8083      	strh	r3, [r0, #4]
			cpu_cycles_max = 0;
    2892:	80c3      	strh	r3, [r0, #6]
			numConnections = 0;
    2894:	7283      	strb	r3, [r0, #10]
    2896:	4b08      	ldr	r3, [pc, #32]	; (28b8 <AudioMixer4::AudioMixer4()+0x60>)
    2898:	6003      	str	r3, [r0, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    289a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    289e:	6183      	str	r3, [r0, #24]
    28a0:	61c3      	str	r3, [r0, #28]
    28a2:	6203      	str	r3, [r0, #32]
    28a4:	6243      	str	r3, [r0, #36]	; 0x24
	}
    28a6:	4770      	bx	lr
				first_update = this;
    28a8:	4b02      	ldr	r3, [pc, #8]	; (28b4 <AudioMixer4::AudioMixer4()+0x5c>)
    28aa:	6018      	str	r0, [r3, #0]
    28ac:	e7ee      	b.n	288c <AudioMixer4::AudioMixer4()+0x34>
    28ae:	bf00      	nop
    28b0:	20002590 	.word	0x20002590
    28b4:	20006d60 	.word	0x20006d60
    28b8:	20002584 	.word	0x20002584

000028bc <FsVolume::exists(char const*)>:
   *
   * \param[in] path Path of the file to be tested for.
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    28bc:	b500      	push	{lr}
    28be:	b08f      	sub	sp, #60	; 0x3c
    28c0:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    28c2:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
    28c6:	b161      	cbz	r1, 28e2 <FsVolume::exists(char const*)+0x26>
  FatFile() {}
    28c8:	2300      	movs	r3, #0
    28ca:	f88d 3000 	strb.w	r3, [sp]
    28ce:	f88d 3001 	strb.w	r3, [sp, #1]
    28d2:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    28d6:	4668      	mov	r0, sp
    28d8:	f00e fb1b 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
           m_xVol ? m_xVol->exists(path) : false;
  }
    28dc:	b00f      	add	sp, #60	; 0x3c
    28de:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    28e2:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    28e6:	b151      	cbz	r1, 28fe <FsVolume::exists(char const*)+0x42>
  ExFatFile() {}
    28e8:	2300      	movs	r3, #0
    28ea:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    28ee:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    28f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    28f6:	4668      	mov	r0, sp
    28f8:	f00c fb67 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    28fc:	e7ee      	b.n	28dc <FsVolume::exists(char const*)+0x20>
    28fe:	2000      	movs	r0, #0
    2900:	e7ec      	b.n	28dc <FsVolume::exists(char const*)+0x20>

00002902 <File::seek(unsigned long long, int)>:
		return (f) ? f->seek(pos, mode) : false;
    2902:	6900      	ldr	r0, [r0, #16]
    2904:	b140      	cbz	r0, 2918 <File::seek(unsigned long long, int)+0x16>
	bool seek(uint64_t pos, int mode) {
    2906:	b510      	push	{r4, lr}
    2908:	b082      	sub	sp, #8
		return (f) ? f->seek(pos, mode) : false;
    290a:	6801      	ldr	r1, [r0, #0]
    290c:	9c04      	ldr	r4, [sp, #16]
    290e:	9400      	str	r4, [sp, #0]
    2910:	6a09      	ldr	r1, [r1, #32]
    2912:	4788      	blx	r1
	}
    2914:	b002      	add	sp, #8
    2916:	bd10      	pop	{r4, pc}
		return (f) ? f->seek(pos, mode) : false;
    2918:	2000      	movs	r0, #0
	}
    291a:	4770      	bx	lr

0000291c <File::dec_refcount()>:
	void dec_refcount() {
    291c:	b510      	push	{r4, lr}
    291e:	4604      	mov	r4, r0
		if (--(f->refcount) == 0) {
    2920:	6902      	ldr	r2, [r0, #16]
    2922:	6853      	ldr	r3, [r2, #4]
    2924:	3b01      	subs	r3, #1
    2926:	6053      	str	r3, [r2, #4]
    2928:	b943      	cbnz	r3, 293c <File::dec_refcount()+0x20>
			f->close();
    292a:	6900      	ldr	r0, [r0, #16]
    292c:	6803      	ldr	r3, [r0, #0]
    292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2930:	4798      	blx	r3
			delete f;
    2932:	6920      	ldr	r0, [r4, #16]
    2934:	b110      	cbz	r0, 293c <File::dec_refcount()+0x20>
    2936:	6803      	ldr	r3, [r0, #0]
    2938:	685b      	ldr	r3, [r3, #4]
    293a:	4798      	blx	r3
		}
		f = nullptr;
    293c:	2300      	movs	r3, #0
    293e:	6123      	str	r3, [r4, #16]
	}
    2940:	bd10      	pop	{r4, pc}
	...

00002944 <SDClass::open(char const*, unsigned char)>:
class SDClass : public FS
{
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2944:	b570      	push	{r4, r5, r6, lr}
    2946:	b094      	sub	sp, #80	; 0x50
    2948:	4605      	mov	r5, r0
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    294a:	2b01      	cmp	r3, #1
    294c:	d036      	beq.n	29bc <SDClass::open(char const*, unsigned char)+0x78>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    294e:	2b02      	cmp	r3, #2
    2950:	f240 2302 	movw	r3, #514	; 0x202
    2954:	bf18      	it	ne
    2956:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2958:	3104      	adds	r1, #4
    295a:	4668      	mov	r0, sp
    295c:	f010 fb18 	bl	12f90 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2960:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2962:	2b00      	cmp	r3, #0
    2964:	d02d      	beq.n	29c2 <SDClass::open(char const*, unsigned char)+0x7e>
		if (file) return File(new SDFile(file));
    2966:	205c      	movs	r0, #92	; 0x5c
    2968:	f014 fd5c 	bl	17424 <operator new(unsigned int)>
    296c:	4604      	mov	r4, r0
class FileImpl {
    296e:	2600      	movs	r6, #0
    2970:	6046      	str	r6, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2972:	4b1a      	ldr	r3, [pc, #104]	; (29dc <SDClass::open(char const*, unsigned char)+0x98>)
    2974:	6003      	str	r3, [r0, #0]
class Print
    2976:	9b01      	ldr	r3, [sp, #4]
    2978:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    297a:	4b19      	ldr	r3, [pc, #100]	; (29e0 <SDClass::open(char const*, unsigned char)+0x9c>)
    297c:	6083      	str	r3, [r0, #8]
    297e:	9b02      	ldr	r3, [sp, #8]
    2980:	6103      	str	r3, [r0, #16]
    2982:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2986:	7503      	strb	r3, [r0, #20]
class StreamFile : public stream_t, public BaseFile {
    2988:	a904      	add	r1, sp, #16
    298a:	3018      	adds	r0, #24
    298c:	f010 f9c9 	bl	12d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2990:	4b14      	ldr	r3, [pc, #80]	; (29e4 <SDClass::open(char const*, unsigned char)+0xa0>)
    2992:	60a3      	str	r3, [r4, #8]
    2994:	65a6      	str	r6, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    2996:	606e      	str	r6, [r5, #4]
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2998:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    299c:	60ab      	str	r3, [r5, #8]
    299e:	732e      	strb	r6, [r5, #12]
	File(FileImpl *file) {
    29a0:	4b11      	ldr	r3, [pc, #68]	; (29e8 <SDClass::open(char const*, unsigned char)+0xa4>)
    29a2:	602b      	str	r3, [r5, #0]
		f = file;
    29a4:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    29a6:	6863      	ldr	r3, [r4, #4]
    29a8:	3301      	adds	r3, #1
    29aa:	6063      	str	r3, [r4, #4]
    29ac:	4b0f      	ldr	r3, [pc, #60]	; (29ec <SDClass::open(char const*, unsigned char)+0xa8>)
    29ae:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    29b0:	a804      	add	r0, sp, #16
    29b2:	f010 f9f7 	bl	12da4 <FsBaseFile::close()>
		return File();
	}
    29b6:	4628      	mov	r0, r5
    29b8:	b014      	add	sp, #80	; 0x50
    29ba:	bd70      	pop	{r4, r5, r6, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    29bc:	f244 2302 	movw	r3, #16898	; 0x4202
    29c0:	e7ca      	b.n	2958 <SDClass::open(char const*, unsigned char)+0x14>
  bool isOpen() const {return m_fFile || m_xFile;}
    29c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    29c4:	2b00      	cmp	r3, #0
    29c6:	d1ce      	bne.n	2966 <SDClass::open(char const*, unsigned char)+0x22>
    29c8:	606b      	str	r3, [r5, #4]
    29ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29ce:	60aa      	str	r2, [r5, #8]
    29d0:	732b      	strb	r3, [r5, #12]
	constexpr File() : f(nullptr) { }
    29d2:	4a05      	ldr	r2, [pc, #20]	; (29e8 <SDClass::open(char const*, unsigned char)+0xa4>)
    29d4:	602a      	str	r2, [r5, #0]
    29d6:	612b      	str	r3, [r5, #16]
    29d8:	e7e8      	b.n	29ac <SDClass::open(char const*, unsigned char)+0x68>
    29da:	bf00      	nop
    29dc:	200027a0 	.word	0x200027a0
    29e0:	200027fc 	.word	0x200027fc
    29e4:	2000277c 	.word	0x2000277c
    29e8:	20002750 	.word	0x20002750
    29ec:	20002560 	.word	0x20002560

000029f0 <AudioSynthWaveform::AudioSynthWaveform()>:


class AudioSynthWaveform : public AudioStream
{
public:
	AudioSynthWaveform(void) : AudioStream(0,NULL),
    29f0:	b510      	push	{r4, lr}
    29f2:	4604      	mov	r4, r0
		num_inputs(ninput), inputQueue(iqueue) {
    29f4:	4b14      	ldr	r3, [pc, #80]	; (2a48 <AudioSynthWaveform::AudioSynthWaveform()+0x58>)
    29f6:	6003      	str	r3, [r0, #0]
    29f8:	2300      	movs	r3, #0
    29fa:	7243      	strb	r3, [r0, #9]
    29fc:	6103      	str	r3, [r0, #16]
			active = false;
    29fe:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    2a00:	60c3      	str	r3, [r0, #12]
			if (first_update == NULL) {
    2a02:	4b12      	ldr	r3, [pc, #72]	; (2a4c <AudioSynthWaveform::AudioSynthWaveform()+0x5c>)
    2a04:	681b      	ldr	r3, [r3, #0]
    2a06:	b1e3      	cbz	r3, 2a42 <AudioSynthWaveform::AudioSynthWaveform()+0x52>
				for (p=first_update; p->next_update; p = p->next_update) ;
    2a08:	461a      	mov	r2, r3
    2a0a:	695b      	ldr	r3, [r3, #20]
    2a0c:	2b00      	cmp	r3, #0
    2a0e:	d1fb      	bne.n	2a08 <AudioSynthWaveform::AudioSynthWaveform()+0x18>
				p->next_update = this;
    2a10:	6154      	str	r4, [r2, #20]
			next_update = NULL;
    2a12:	2300      	movs	r3, #0
    2a14:	6163      	str	r3, [r4, #20]
			cpu_cycles = 0;
    2a16:	80a3      	strh	r3, [r4, #4]
			cpu_cycles_max = 0;
    2a18:	80e3      	strh	r3, [r4, #6]
			numConnections = 0;
    2a1a:	72a3      	strb	r3, [r4, #10]
		phase_accumulator(0), phase_increment(0), phase_offset(0),
		magnitude(0), pulse_width(0x40000000),
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
		tone_offset(0) {
    2a1c:	4a0c      	ldr	r2, [pc, #48]	; (2a50 <AudioSynthWaveform::AudioSynthWaveform()+0x60>)
    2a1e:	6022      	str	r2, [r4, #0]
		phase_accumulator(0), phase_increment(0), phase_offset(0),
    2a20:	61a3      	str	r3, [r4, #24]
    2a22:	61e3      	str	r3, [r4, #28]
    2a24:	6223      	str	r3, [r4, #32]
		magnitude(0), pulse_width(0x40000000),
    2a26:	6263      	str	r3, [r4, #36]	; 0x24
    2a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2a2c:	62a2      	str	r2, [r4, #40]	; 0x28
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
    2a2e:	62e3      	str	r3, [r4, #44]	; 0x2c
    2a30:	8623      	strh	r3, [r4, #48]	; 0x30
    2a32:	8663      	strh	r3, [r4, #50]	; 0x32
		tone_offset(0) {
    2a34:	86a3      	strh	r3, [r4, #52]	; 0x34
    2a36:	f104 0038 	add.w	r0, r4, #56	; 0x38
    2a3a:	f00b fb09 	bl	e050 <BandLimitedWaveform::BandLimitedWaveform()>
	}
    2a3e:	4620      	mov	r0, r4
    2a40:	bd10      	pop	{r4, pc}
				first_update = this;
    2a42:	4b02      	ldr	r3, [pc, #8]	; (2a4c <AudioSynthWaveform::AudioSynthWaveform()+0x5c>)
    2a44:	6018      	str	r0, [r3, #0]
    2a46:	e7e4      	b.n	2a12 <AudioSynthWaveform::AudioSynthWaveform()+0x22>
    2a48:	20002590 	.word	0x20002590
    2a4c:	20006d60 	.word	0x20006d60
    2a50:	20002684 	.word	0x20002684

00002a54 <Encoder::update(Encoder_internal_state_t*)>:
	static void update(Encoder_internal_state_t *arg) {
    2a54:	b410      	push	{r4}
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2a56:	6803      	ldr	r3, [r0, #0]
    2a58:	681c      	ldr	r4, [r3, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2a5a:	6843      	ldr	r3, [r0, #4]
    2a5c:	681a      	ldr	r2, [r3, #0]
    2a5e:	68c3      	ldr	r3, [r0, #12]
    2a60:	401a      	ands	r2, r3
		uint8_t state = arg->state & 3;
    2a62:	7c03      	ldrb	r3, [r0, #16]
    2a64:	f003 0303 	and.w	r3, r3, #3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2a68:	6881      	ldr	r1, [r0, #8]
		if (p1val) state |= 4;
    2a6a:	420c      	tst	r4, r1
    2a6c:	bf18      	it	ne
    2a6e:	f043 0304 	orrne.w	r3, r3, #4
		if (p2val) state |= 8;
    2a72:	b10a      	cbz	r2, 2a78 <Encoder::update(Encoder_internal_state_t*)+0x24>
    2a74:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2a78:	089a      	lsrs	r2, r3, #2
    2a7a:	7402      	strb	r2, [r0, #16]
		switch (state) {
    2a7c:	3b01      	subs	r3, #1
    2a7e:	2b0d      	cmp	r3, #13
    2a80:	d80b      	bhi.n	2a9a <Encoder::update(Encoder_internal_state_t*)+0x46>
    2a82:	e8df f003 	tbb	[pc, r3]
    2a86:	0d07      	.short	0x0d07
    2a88:	150a0d11 	.word	0x150a0d11
    2a8c:	0a150707 	.word	0x0a150707
    2a90:	070d110d 	.word	0x070d110d
				arg->position++;
    2a94:	6943      	ldr	r3, [r0, #20]
    2a96:	3301      	adds	r3, #1
    2a98:	6143      	str	r3, [r0, #20]
	}
    2a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a9e:	4770      	bx	lr
				arg->position--;
    2aa0:	6943      	ldr	r3, [r0, #20]
    2aa2:	3b01      	subs	r3, #1
    2aa4:	6143      	str	r3, [r0, #20]
				return;
    2aa6:	e7f8      	b.n	2a9a <Encoder::update(Encoder_internal_state_t*)+0x46>
				arg->position += 2;
    2aa8:	6943      	ldr	r3, [r0, #20]
    2aaa:	3302      	adds	r3, #2
    2aac:	6143      	str	r3, [r0, #20]
				return;
    2aae:	e7f4      	b.n	2a9a <Encoder::update(Encoder_internal_state_t*)+0x46>
				arg->position -= 2;
    2ab0:	6943      	ldr	r3, [r0, #20]
    2ab2:	3b02      	subs	r3, #2
    2ab4:	6143      	str	r3, [r0, #20]
				return;
    2ab6:	e7f0      	b.n	2a9a <Encoder::update(Encoder_internal_state_t*)+0x46>

00002ab8 <Encoder::isr53()>:
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    2ab8:	b508      	push	{r3, lr}
    2aba:	4b03      	ldr	r3, [pc, #12]	; (2ac8 <Encoder::isr53()+0x10>)
    2abc:	f8d3 00d4 	ldr.w	r0, [r3, #212]	; 0xd4
    2ac0:	f7ff ffc8 	bl	2a54 <Encoder::update(Encoder_internal_state_t*)>
    2ac4:	bd08      	pop	{r3, pc}
    2ac6:	bf00      	nop
    2ac8:	20006eec 	.word	0x20006eec

00002acc <Encoder::isr52()>:
	static ENCODER_ISR_ATTR void isr52(void) { update(interruptArgs[52]); }
    2acc:	b508      	push	{r3, lr}
    2ace:	4b03      	ldr	r3, [pc, #12]	; (2adc <Encoder::isr52()+0x10>)
    2ad0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
    2ad4:	f7ff ffbe 	bl	2a54 <Encoder::update(Encoder_internal_state_t*)>
    2ad8:	bd08      	pop	{r3, pc}
    2ada:	bf00      	nop
    2adc:	20006eec 	.word	0x20006eec

00002ae0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>:
	static uint8_t attach_interrupt(uint8_t pin, Encoder_internal_state_t *state) {
    2ae0:	b510      	push	{r4, lr}
		switch (pin) {
    2ae2:	2836      	cmp	r0, #54	; 0x36
    2ae4:	f200 8290 	bhi.w	3008 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x528>
    2ae8:	e8df f010 	tbh	[pc, r0, lsl #1]
    2aec:	00400037 	.word	0x00400037
    2af0:	0053004a 	.word	0x0053004a
    2af4:	0065005c 	.word	0x0065005c
    2af8:	0077006e 	.word	0x0077006e
    2afc:	00890080 	.word	0x00890080
    2b00:	009b0092 	.word	0x009b0092
    2b04:	00ad00a4 	.word	0x00ad00a4
    2b08:	00bf00b6 	.word	0x00bf00b6
    2b0c:	00d100c8 	.word	0x00d100c8
    2b10:	00e300da 	.word	0x00e300da
    2b14:	00f500ec 	.word	0x00f500ec
    2b18:	010700fe 	.word	0x010700fe
    2b1c:	01190110 	.word	0x01190110
    2b20:	012b0122 	.word	0x012b0122
    2b24:	013d0134 	.word	0x013d0134
    2b28:	014f0146 	.word	0x014f0146
    2b2c:	01620158 	.word	0x01620158
    2b30:	0176016c 	.word	0x0176016c
    2b34:	018a0180 	.word	0x018a0180
    2b38:	01ee0194 	.word	0x01ee0194
    2b3c:	020201f8 	.word	0x020201f8
    2b40:	0216020c 	.word	0x0216020c
    2b44:	022a0220 	.word	0x022a0220
    2b48:	023e0234 	.word	0x023e0234
    2b4c:	02520248 	.word	0x02520248
    2b50:	0266025c 	.word	0x0266025c
    2b54:	027a0270 	.word	0x027a0270
    2b58:	0284      	.short	0x0284
				interruptArgs[0] = state;
    2b5a:	4bb3      	ldr	r3, [pc, #716]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2b5c:	6019      	str	r1, [r3, #0]
				attachInterrupt(0, isr0, CHANGE);
    2b5e:	2204      	movs	r2, #4
    2b60:	49b2      	ldr	r1, [pc, #712]	; (2e2c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x34c>)
    2b62:	2000      	movs	r0, #0
    2b64:	f014 fb2a 	bl	171bc <attachInterrupt>
		return 1;
    2b68:	2001      	movs	r0, #1
	}
    2b6a:	bd10      	pop	{r4, pc}
    2b6c:	4604      	mov	r4, r0
				interruptArgs[1] = state;
    2b6e:	4bae      	ldr	r3, [pc, #696]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2b70:	6059      	str	r1, [r3, #4]
				attachInterrupt(1, isr1, CHANGE);
    2b72:	2204      	movs	r2, #4
    2b74:	49ae      	ldr	r1, [pc, #696]	; (2e30 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x350>)
    2b76:	2001      	movs	r0, #1
    2b78:	f014 fb20 	bl	171bc <attachInterrupt>
		return 1;
    2b7c:	4620      	mov	r0, r4
				break;
    2b7e:	e7f4      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[2] = state;
    2b80:	4ba9      	ldr	r3, [pc, #676]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2b82:	6099      	str	r1, [r3, #8]
				attachInterrupt(2, isr2, CHANGE);
    2b84:	2204      	movs	r2, #4
    2b86:	49ab      	ldr	r1, [pc, #684]	; (2e34 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x354>)
    2b88:	2002      	movs	r0, #2
    2b8a:	f014 fb17 	bl	171bc <attachInterrupt>
		return 1;
    2b8e:	2001      	movs	r0, #1
				break;
    2b90:	e7eb      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[3] = state;
    2b92:	4ba5      	ldr	r3, [pc, #660]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2b94:	60d9      	str	r1, [r3, #12]
				attachInterrupt(3, isr3, CHANGE);
    2b96:	2204      	movs	r2, #4
    2b98:	49a7      	ldr	r1, [pc, #668]	; (2e38 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x358>)
    2b9a:	2003      	movs	r0, #3
    2b9c:	f014 fb0e 	bl	171bc <attachInterrupt>
		return 1;
    2ba0:	2001      	movs	r0, #1
				break;
    2ba2:	e7e2      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[4] = state;
    2ba4:	4ba0      	ldr	r3, [pc, #640]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2ba6:	6119      	str	r1, [r3, #16]
				attachInterrupt(4, isr4, CHANGE);
    2ba8:	2204      	movs	r2, #4
    2baa:	49a4      	ldr	r1, [pc, #656]	; (2e3c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x35c>)
    2bac:	4610      	mov	r0, r2
    2bae:	f014 fb05 	bl	171bc <attachInterrupt>
		return 1;
    2bb2:	2001      	movs	r0, #1
				break;
    2bb4:	e7d9      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[5] = state;
    2bb6:	4b9c      	ldr	r3, [pc, #624]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2bb8:	6159      	str	r1, [r3, #20]
				attachInterrupt(5, isr5, CHANGE);
    2bba:	2204      	movs	r2, #4
    2bbc:	49a0      	ldr	r1, [pc, #640]	; (2e40 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x360>)
    2bbe:	2005      	movs	r0, #5
    2bc0:	f014 fafc 	bl	171bc <attachInterrupt>
		return 1;
    2bc4:	2001      	movs	r0, #1
				break;
    2bc6:	e7d0      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[6] = state;
    2bc8:	4b97      	ldr	r3, [pc, #604]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2bca:	6199      	str	r1, [r3, #24]
				attachInterrupt(6, isr6, CHANGE);
    2bcc:	2204      	movs	r2, #4
    2bce:	499d      	ldr	r1, [pc, #628]	; (2e44 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x364>)
    2bd0:	2006      	movs	r0, #6
    2bd2:	f014 faf3 	bl	171bc <attachInterrupt>
		return 1;
    2bd6:	2001      	movs	r0, #1
				break;
    2bd8:	e7c7      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[7] = state;
    2bda:	4b93      	ldr	r3, [pc, #588]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2bdc:	61d9      	str	r1, [r3, #28]
				attachInterrupt(7, isr7, CHANGE);
    2bde:	2204      	movs	r2, #4
    2be0:	4999      	ldr	r1, [pc, #612]	; (2e48 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x368>)
    2be2:	2007      	movs	r0, #7
    2be4:	f014 faea 	bl	171bc <attachInterrupt>
		return 1;
    2be8:	2001      	movs	r0, #1
				break;
    2bea:	e7be      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[8] = state;
    2bec:	4b8e      	ldr	r3, [pc, #568]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2bee:	6219      	str	r1, [r3, #32]
				attachInterrupt(8, isr8, CHANGE);
    2bf0:	2204      	movs	r2, #4
    2bf2:	4996      	ldr	r1, [pc, #600]	; (2e4c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x36c>)
    2bf4:	2008      	movs	r0, #8
    2bf6:	f014 fae1 	bl	171bc <attachInterrupt>
		return 1;
    2bfa:	2001      	movs	r0, #1
				break;
    2bfc:	e7b5      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[9] = state;
    2bfe:	4b8a      	ldr	r3, [pc, #552]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c00:	6259      	str	r1, [r3, #36]	; 0x24
				attachInterrupt(9, isr9, CHANGE);
    2c02:	2204      	movs	r2, #4
    2c04:	4992      	ldr	r1, [pc, #584]	; (2e50 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x370>)
    2c06:	2009      	movs	r0, #9
    2c08:	f014 fad8 	bl	171bc <attachInterrupt>
		return 1;
    2c0c:	2001      	movs	r0, #1
				break;
    2c0e:	e7ac      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[10] = state;
    2c10:	4b85      	ldr	r3, [pc, #532]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c12:	6299      	str	r1, [r3, #40]	; 0x28
				attachInterrupt(10, isr10, CHANGE);
    2c14:	2204      	movs	r2, #4
    2c16:	498f      	ldr	r1, [pc, #572]	; (2e54 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x374>)
    2c18:	200a      	movs	r0, #10
    2c1a:	f014 facf 	bl	171bc <attachInterrupt>
		return 1;
    2c1e:	2001      	movs	r0, #1
				break;
    2c20:	e7a3      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[11] = state;
    2c22:	4b81      	ldr	r3, [pc, #516]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c24:	62d9      	str	r1, [r3, #44]	; 0x2c
				attachInterrupt(11, isr11, CHANGE);
    2c26:	2204      	movs	r2, #4
    2c28:	498b      	ldr	r1, [pc, #556]	; (2e58 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x378>)
    2c2a:	200b      	movs	r0, #11
    2c2c:	f014 fac6 	bl	171bc <attachInterrupt>
		return 1;
    2c30:	2001      	movs	r0, #1
				break;
    2c32:	e79a      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[12] = state;
    2c34:	4b7c      	ldr	r3, [pc, #496]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c36:	6319      	str	r1, [r3, #48]	; 0x30
				attachInterrupt(12, isr12, CHANGE);
    2c38:	2204      	movs	r2, #4
    2c3a:	4988      	ldr	r1, [pc, #544]	; (2e5c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x37c>)
    2c3c:	200c      	movs	r0, #12
    2c3e:	f014 fabd 	bl	171bc <attachInterrupt>
		return 1;
    2c42:	2001      	movs	r0, #1
				break;
    2c44:	e791      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[13] = state;
    2c46:	4b78      	ldr	r3, [pc, #480]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c48:	6359      	str	r1, [r3, #52]	; 0x34
				attachInterrupt(13, isr13, CHANGE);
    2c4a:	2204      	movs	r2, #4
    2c4c:	4984      	ldr	r1, [pc, #528]	; (2e60 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x380>)
    2c4e:	200d      	movs	r0, #13
    2c50:	f014 fab4 	bl	171bc <attachInterrupt>
		return 1;
    2c54:	2001      	movs	r0, #1
				break;
    2c56:	e788      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[14] = state;
    2c58:	4b73      	ldr	r3, [pc, #460]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c5a:	6399      	str	r1, [r3, #56]	; 0x38
				attachInterrupt(14, isr14, CHANGE);
    2c5c:	2204      	movs	r2, #4
    2c5e:	4981      	ldr	r1, [pc, #516]	; (2e64 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x384>)
    2c60:	200e      	movs	r0, #14
    2c62:	f014 faab 	bl	171bc <attachInterrupt>
		return 1;
    2c66:	2001      	movs	r0, #1
				break;
    2c68:	e77f      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[15] = state;
    2c6a:	4b6f      	ldr	r3, [pc, #444]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c6c:	63d9      	str	r1, [r3, #60]	; 0x3c
				attachInterrupt(15, isr15, CHANGE);
    2c6e:	2204      	movs	r2, #4
    2c70:	497d      	ldr	r1, [pc, #500]	; (2e68 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x388>)
    2c72:	200f      	movs	r0, #15
    2c74:	f014 faa2 	bl	171bc <attachInterrupt>
		return 1;
    2c78:	2001      	movs	r0, #1
				break;
    2c7a:	e776      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[16] = state;
    2c7c:	4b6a      	ldr	r3, [pc, #424]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c7e:	6419      	str	r1, [r3, #64]	; 0x40
				attachInterrupt(16, isr16, CHANGE);
    2c80:	2204      	movs	r2, #4
    2c82:	497a      	ldr	r1, [pc, #488]	; (2e6c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x38c>)
    2c84:	2010      	movs	r0, #16
    2c86:	f014 fa99 	bl	171bc <attachInterrupt>
		return 1;
    2c8a:	2001      	movs	r0, #1
				break;
    2c8c:	e76d      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[17] = state;
    2c8e:	4b66      	ldr	r3, [pc, #408]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2c90:	6459      	str	r1, [r3, #68]	; 0x44
				attachInterrupt(17, isr17, CHANGE);
    2c92:	2204      	movs	r2, #4
    2c94:	4976      	ldr	r1, [pc, #472]	; (2e70 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x390>)
    2c96:	2011      	movs	r0, #17
    2c98:	f014 fa90 	bl	171bc <attachInterrupt>
		return 1;
    2c9c:	2001      	movs	r0, #1
				break;
    2c9e:	e764      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[18] = state;
    2ca0:	4b61      	ldr	r3, [pc, #388]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2ca2:	6499      	str	r1, [r3, #72]	; 0x48
				attachInterrupt(18, isr18, CHANGE);
    2ca4:	2204      	movs	r2, #4
    2ca6:	4973      	ldr	r1, [pc, #460]	; (2e74 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x394>)
    2ca8:	2012      	movs	r0, #18
    2caa:	f014 fa87 	bl	171bc <attachInterrupt>
		return 1;
    2cae:	2001      	movs	r0, #1
				break;
    2cb0:	e75b      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[19] = state;
    2cb2:	4b5d      	ldr	r3, [pc, #372]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2cb4:	64d9      	str	r1, [r3, #76]	; 0x4c
				attachInterrupt(19, isr19, CHANGE);
    2cb6:	2204      	movs	r2, #4
    2cb8:	496f      	ldr	r1, [pc, #444]	; (2e78 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x398>)
    2cba:	2013      	movs	r0, #19
    2cbc:	f014 fa7e 	bl	171bc <attachInterrupt>
		return 1;
    2cc0:	2001      	movs	r0, #1
				break;
    2cc2:	e752      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[20] = state;
    2cc4:	4b58      	ldr	r3, [pc, #352]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2cc6:	6519      	str	r1, [r3, #80]	; 0x50
				attachInterrupt(20, isr20, CHANGE);
    2cc8:	2204      	movs	r2, #4
    2cca:	496c      	ldr	r1, [pc, #432]	; (2e7c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x39c>)
    2ccc:	2014      	movs	r0, #20
    2cce:	f014 fa75 	bl	171bc <attachInterrupt>
		return 1;
    2cd2:	2001      	movs	r0, #1
				break;
    2cd4:	e749      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[21] = state;
    2cd6:	4b54      	ldr	r3, [pc, #336]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2cd8:	6559      	str	r1, [r3, #84]	; 0x54
				attachInterrupt(21, isr21, CHANGE);
    2cda:	2204      	movs	r2, #4
    2cdc:	4968      	ldr	r1, [pc, #416]	; (2e80 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
    2cde:	2015      	movs	r0, #21
    2ce0:	f014 fa6c 	bl	171bc <attachInterrupt>
		return 1;
    2ce4:	2001      	movs	r0, #1
				break;
    2ce6:	e740      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[22] = state;
    2ce8:	4b4f      	ldr	r3, [pc, #316]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2cea:	6599      	str	r1, [r3, #88]	; 0x58
				attachInterrupt(22, isr22, CHANGE);
    2cec:	2204      	movs	r2, #4
    2cee:	4965      	ldr	r1, [pc, #404]	; (2e84 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a4>)
    2cf0:	2016      	movs	r0, #22
    2cf2:	f014 fa63 	bl	171bc <attachInterrupt>
		return 1;
    2cf6:	2001      	movs	r0, #1
				break;
    2cf8:	e737      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[23] = state;
    2cfa:	4b4b      	ldr	r3, [pc, #300]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2cfc:	65d9      	str	r1, [r3, #92]	; 0x5c
				attachInterrupt(23, isr23, CHANGE);
    2cfe:	2204      	movs	r2, #4
    2d00:	4961      	ldr	r1, [pc, #388]	; (2e88 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a8>)
    2d02:	2017      	movs	r0, #23
    2d04:	f014 fa5a 	bl	171bc <attachInterrupt>
		return 1;
    2d08:	2001      	movs	r0, #1
				break;
    2d0a:	e72e      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[24] = state;
    2d0c:	4b46      	ldr	r3, [pc, #280]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d0e:	6619      	str	r1, [r3, #96]	; 0x60
				attachInterrupt(24, isr24, CHANGE);
    2d10:	2204      	movs	r2, #4
    2d12:	495e      	ldr	r1, [pc, #376]	; (2e8c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3ac>)
    2d14:	2018      	movs	r0, #24
    2d16:	f014 fa51 	bl	171bc <attachInterrupt>
		return 1;
    2d1a:	2001      	movs	r0, #1
				break;
    2d1c:	e725      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[25] = state;
    2d1e:	4b42      	ldr	r3, [pc, #264]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d20:	6659      	str	r1, [r3, #100]	; 0x64
				attachInterrupt(25, isr25, CHANGE);
    2d22:	2204      	movs	r2, #4
    2d24:	495a      	ldr	r1, [pc, #360]	; (2e90 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b0>)
    2d26:	2019      	movs	r0, #25
    2d28:	f014 fa48 	bl	171bc <attachInterrupt>
		return 1;
    2d2c:	2001      	movs	r0, #1
				break;
    2d2e:	e71c      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[26] = state;
    2d30:	4b3d      	ldr	r3, [pc, #244]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d32:	6699      	str	r1, [r3, #104]	; 0x68
				attachInterrupt(26, isr26, CHANGE);
    2d34:	2204      	movs	r2, #4
    2d36:	4957      	ldr	r1, [pc, #348]	; (2e94 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b4>)
    2d38:	201a      	movs	r0, #26
    2d3a:	f014 fa3f 	bl	171bc <attachInterrupt>
		return 1;
    2d3e:	2001      	movs	r0, #1
				break;
    2d40:	e713      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[27] = state;
    2d42:	4b39      	ldr	r3, [pc, #228]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d44:	66d9      	str	r1, [r3, #108]	; 0x6c
				attachInterrupt(27, isr27, CHANGE);
    2d46:	2204      	movs	r2, #4
    2d48:	4953      	ldr	r1, [pc, #332]	; (2e98 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b8>)
    2d4a:	201b      	movs	r0, #27
    2d4c:	f014 fa36 	bl	171bc <attachInterrupt>
		return 1;
    2d50:	2001      	movs	r0, #1
				break;
    2d52:	e70a      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[28] = state;
    2d54:	4b34      	ldr	r3, [pc, #208]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d56:	6719      	str	r1, [r3, #112]	; 0x70
				attachInterrupt(28, isr28, CHANGE);
    2d58:	2204      	movs	r2, #4
    2d5a:	4950      	ldr	r1, [pc, #320]	; (2e9c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3bc>)
    2d5c:	201c      	movs	r0, #28
    2d5e:	f014 fa2d 	bl	171bc <attachInterrupt>
		return 1;
    2d62:	2001      	movs	r0, #1
				break;
    2d64:	e701      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[29] = state;
    2d66:	4b30      	ldr	r3, [pc, #192]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d68:	6759      	str	r1, [r3, #116]	; 0x74
				attachInterrupt(29, isr29, CHANGE);
    2d6a:	2204      	movs	r2, #4
    2d6c:	494c      	ldr	r1, [pc, #304]	; (2ea0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c0>)
    2d6e:	201d      	movs	r0, #29
    2d70:	f014 fa24 	bl	171bc <attachInterrupt>
		return 1;
    2d74:	2001      	movs	r0, #1
				break;
    2d76:	e6f8      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[30] = state;
    2d78:	4b2b      	ldr	r3, [pc, #172]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d7a:	6799      	str	r1, [r3, #120]	; 0x78
				attachInterrupt(30, isr30, CHANGE);
    2d7c:	2204      	movs	r2, #4
    2d7e:	4949      	ldr	r1, [pc, #292]	; (2ea4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c4>)
    2d80:	201e      	movs	r0, #30
    2d82:	f014 fa1b 	bl	171bc <attachInterrupt>
		return 1;
    2d86:	2001      	movs	r0, #1
				break;
    2d88:	e6ef      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[31] = state;
    2d8a:	4b27      	ldr	r3, [pc, #156]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d8c:	67d9      	str	r1, [r3, #124]	; 0x7c
				attachInterrupt(31, isr31, CHANGE);
    2d8e:	2204      	movs	r2, #4
    2d90:	4945      	ldr	r1, [pc, #276]	; (2ea8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c8>)
    2d92:	201f      	movs	r0, #31
    2d94:	f014 fa12 	bl	171bc <attachInterrupt>
		return 1;
    2d98:	2001      	movs	r0, #1
				break;
    2d9a:	e6e6      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[32] = state;
    2d9c:	4b22      	ldr	r3, [pc, #136]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2d9e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
				attachInterrupt(32, isr32, CHANGE);
    2da2:	2204      	movs	r2, #4
    2da4:	4941      	ldr	r1, [pc, #260]	; (2eac <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3cc>)
    2da6:	2020      	movs	r0, #32
    2da8:	f014 fa08 	bl	171bc <attachInterrupt>
		return 1;
    2dac:	2001      	movs	r0, #1
				break;
    2dae:	e6dc      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[33] = state;
    2db0:	4b1d      	ldr	r3, [pc, #116]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2db2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
				attachInterrupt(33, isr33, CHANGE);
    2db6:	2204      	movs	r2, #4
    2db8:	493d      	ldr	r1, [pc, #244]	; (2eb0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d0>)
    2dba:	2021      	movs	r0, #33	; 0x21
    2dbc:	f014 f9fe 	bl	171bc <attachInterrupt>
		return 1;
    2dc0:	2001      	movs	r0, #1
				break;
    2dc2:	e6d2      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[34] = state;
    2dc4:	4b18      	ldr	r3, [pc, #96]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2dc6:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
				attachInterrupt(34, isr34, CHANGE);
    2dca:	2204      	movs	r2, #4
    2dcc:	4939      	ldr	r1, [pc, #228]	; (2eb4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d4>)
    2dce:	2022      	movs	r0, #34	; 0x22
    2dd0:	f014 f9f4 	bl	171bc <attachInterrupt>
		return 1;
    2dd4:	2001      	movs	r0, #1
				break;
    2dd6:	e6c8      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[35] = state;
    2dd8:	4b13      	ldr	r3, [pc, #76]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2dda:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
				attachInterrupt(35, isr35, CHANGE);
    2dde:	2204      	movs	r2, #4
    2de0:	4935      	ldr	r1, [pc, #212]	; (2eb8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d8>)
    2de2:	2023      	movs	r0, #35	; 0x23
    2de4:	f014 f9ea 	bl	171bc <attachInterrupt>
		return 1;
    2de8:	2001      	movs	r0, #1
				break;
    2dea:	e6be      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[36] = state;
    2dec:	4b0e      	ldr	r3, [pc, #56]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2dee:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
				attachInterrupt(36, isr36, CHANGE);
    2df2:	2204      	movs	r2, #4
    2df4:	4931      	ldr	r1, [pc, #196]	; (2ebc <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3dc>)
    2df6:	2024      	movs	r0, #36	; 0x24
    2df8:	f014 f9e0 	bl	171bc <attachInterrupt>
		return 1;
    2dfc:	2001      	movs	r0, #1
				break;
    2dfe:	e6b4      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[37] = state;
    2e00:	4b09      	ldr	r3, [pc, #36]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2e02:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
				attachInterrupt(37, isr37, CHANGE);
    2e06:	2204      	movs	r2, #4
    2e08:	492d      	ldr	r1, [pc, #180]	; (2ec0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e0>)
    2e0a:	2025      	movs	r0, #37	; 0x25
    2e0c:	f014 f9d6 	bl	171bc <attachInterrupt>
		return 1;
    2e10:	2001      	movs	r0, #1
				break;
    2e12:	e6aa      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[38] = state;
    2e14:	4b04      	ldr	r3, [pc, #16]	; (2e28 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x348>)
    2e16:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
				attachInterrupt(38, isr38, CHANGE);
    2e1a:	2204      	movs	r2, #4
    2e1c:	4929      	ldr	r1, [pc, #164]	; (2ec4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e4>)
    2e1e:	2026      	movs	r0, #38	; 0x26
    2e20:	f014 f9cc 	bl	171bc <attachInterrupt>
		return 1;
    2e24:	2001      	movs	r0, #1
				break;
    2e26:	e6a0      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
    2e28:	20006eec 	.word	0x20006eec
    2e2c:	00001091 	.word	0x00001091
    2e30:	000011d5 	.word	0x000011d5
    2e34:	000010fd 	.word	0x000010fd
    2e38:	00001169 	.word	0x00001169
    2e3c:	000023e1 	.word	0x000023e1
    2e40:	0000244d 	.word	0x0000244d
    2e44:	000024b9 	.word	0x000024b9
    2e48:	00002525 	.word	0x00002525
    2e4c:	00002591 	.word	0x00002591
    2e50:	000025fd 	.word	0x000025fd
    2e54:	00002669 	.word	0x00002669
    2e58:	000026d5 	.word	0x000026d5
    2e5c:	00001d21 	.word	0x00001d21
    2e60:	00001d8d 	.word	0x00001d8d
    2e64:	00001df9 	.word	0x00001df9
    2e68:	00001e65 	.word	0x00001e65
    2e6c:	00001ed1 	.word	0x00001ed1
    2e70:	00001f3d 	.word	0x00001f3d
    2e74:	00001fa9 	.word	0x00001fa9
    2e78:	00002015 	.word	0x00002015
    2e7c:	00002081 	.word	0x00002081
    2e80:	000020ed 	.word	0x000020ed
    2e84:	00002159 	.word	0x00002159
    2e88:	000021c5 	.word	0x000021c5
    2e8c:	00002231 	.word	0x00002231
    2e90:	0000229d 	.word	0x0000229d
    2e94:	00002309 	.word	0x00002309
    2e98:	00002375 	.word	0x00002375
    2e9c:	00001631 	.word	0x00001631
    2ea0:	0000169d 	.word	0x0000169d
    2ea4:	00001709 	.word	0x00001709
    2ea8:	00001775 	.word	0x00001775
    2eac:	000017e1 	.word	0x000017e1
    2eb0:	00001851 	.word	0x00001851
    2eb4:	000018c1 	.word	0x000018c1
    2eb8:	00001931 	.word	0x00001931
    2ebc:	000019a1 	.word	0x000019a1
    2ec0:	00001a11 	.word	0x00001a11
    2ec4:	00001a81 	.word	0x00001a81
				interruptArgs[39] = state;
    2ec8:	4b50      	ldr	r3, [pc, #320]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2eca:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
				attachInterrupt(39, isr39, CHANGE);
    2ece:	2204      	movs	r2, #4
    2ed0:	494f      	ldr	r1, [pc, #316]	; (3010 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x530>)
    2ed2:	2027      	movs	r0, #39	; 0x27
    2ed4:	f014 f972 	bl	171bc <attachInterrupt>
		return 1;
    2ed8:	2001      	movs	r0, #1
				break;
    2eda:	e646      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[40] = state;
    2edc:	4b4b      	ldr	r3, [pc, #300]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2ede:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
				attachInterrupt(40, isr40, CHANGE);
    2ee2:	2204      	movs	r2, #4
    2ee4:	494b      	ldr	r1, [pc, #300]	; (3014 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x534>)
    2ee6:	2028      	movs	r0, #40	; 0x28
    2ee8:	f014 f968 	bl	171bc <attachInterrupt>
		return 1;
    2eec:	2001      	movs	r0, #1
				break;
    2eee:	e63c      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[41] = state;
    2ef0:	4b46      	ldr	r3, [pc, #280]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2ef2:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
				attachInterrupt(41, isr41, CHANGE);
    2ef6:	2204      	movs	r2, #4
    2ef8:	4947      	ldr	r1, [pc, #284]	; (3018 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x538>)
    2efa:	2029      	movs	r0, #41	; 0x29
    2efc:	f014 f95e 	bl	171bc <attachInterrupt>
		return 1;
    2f00:	2001      	movs	r0, #1
				break;
    2f02:	e632      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[42] = state;
    2f04:	4b41      	ldr	r3, [pc, #260]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f06:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
				attachInterrupt(42, isr42, CHANGE);
    2f0a:	2204      	movs	r2, #4
    2f0c:	4943      	ldr	r1, [pc, #268]	; (301c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
    2f0e:	202a      	movs	r0, #42	; 0x2a
    2f10:	f014 f954 	bl	171bc <attachInterrupt>
		return 1;
    2f14:	2001      	movs	r0, #1
				break;
    2f16:	e628      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[43] = state;
    2f18:	4b3c      	ldr	r3, [pc, #240]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f1a:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
				attachInterrupt(43, isr43, CHANGE);
    2f1e:	2204      	movs	r2, #4
    2f20:	493f      	ldr	r1, [pc, #252]	; (3020 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x540>)
    2f22:	202b      	movs	r0, #43	; 0x2b
    2f24:	f014 f94a 	bl	171bc <attachInterrupt>
		return 1;
    2f28:	2001      	movs	r0, #1
				break;
    2f2a:	e61e      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[44] = state;
    2f2c:	4b37      	ldr	r3, [pc, #220]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f2e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
				attachInterrupt(44, isr44, CHANGE);
    2f32:	2204      	movs	r2, #4
    2f34:	493b      	ldr	r1, [pc, #236]	; (3024 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x544>)
    2f36:	202c      	movs	r0, #44	; 0x2c
    2f38:	f014 f940 	bl	171bc <attachInterrupt>
		return 1;
    2f3c:	2001      	movs	r0, #1
				break;
    2f3e:	e614      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[45] = state;
    2f40:	4b32      	ldr	r3, [pc, #200]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f42:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
				attachInterrupt(45, isr45, CHANGE);
    2f46:	2204      	movs	r2, #4
    2f48:	4937      	ldr	r1, [pc, #220]	; (3028 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x548>)
    2f4a:	202d      	movs	r0, #45	; 0x2d
    2f4c:	f014 f936 	bl	171bc <attachInterrupt>
		return 1;
    2f50:	2001      	movs	r0, #1
				break;
    2f52:	e60a      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[46] = state;
    2f54:	4b2d      	ldr	r3, [pc, #180]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f56:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
				attachInterrupt(46, isr46, CHANGE);
    2f5a:	2204      	movs	r2, #4
    2f5c:	4933      	ldr	r1, [pc, #204]	; (302c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x54c>)
    2f5e:	202e      	movs	r0, #46	; 0x2e
    2f60:	f014 f92c 	bl	171bc <attachInterrupt>
		return 1;
    2f64:	2001      	movs	r0, #1
				break;
    2f66:	e600      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[47] = state;
    2f68:	4b28      	ldr	r3, [pc, #160]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f6a:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
				attachInterrupt(47, isr47, CHANGE);
    2f6e:	2204      	movs	r2, #4
    2f70:	492f      	ldr	r1, [pc, #188]	; (3030 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x550>)
    2f72:	202f      	movs	r0, #47	; 0x2f
    2f74:	f014 f922 	bl	171bc <attachInterrupt>
		return 1;
    2f78:	2001      	movs	r0, #1
				break;
    2f7a:	e5f6      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[48] = state;
    2f7c:	4b23      	ldr	r3, [pc, #140]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f7e:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
				attachInterrupt(48, isr48, CHANGE);
    2f82:	2204      	movs	r2, #4
    2f84:	492b      	ldr	r1, [pc, #172]	; (3034 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x554>)
    2f86:	2030      	movs	r0, #48	; 0x30
    2f88:	f014 f918 	bl	171bc <attachInterrupt>
		return 1;
    2f8c:	2001      	movs	r0, #1
				break;
    2f8e:	e5ec      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[49] = state;
    2f90:	4b1e      	ldr	r3, [pc, #120]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2f92:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
				attachInterrupt(49, isr49, CHANGE);
    2f96:	2204      	movs	r2, #4
    2f98:	4927      	ldr	r1, [pc, #156]	; (3038 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x558>)
    2f9a:	2031      	movs	r0, #49	; 0x31
    2f9c:	f014 f90e 	bl	171bc <attachInterrupt>
		return 1;
    2fa0:	2001      	movs	r0, #1
				break;
    2fa2:	e5e2      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[50] = state;
    2fa4:	4b19      	ldr	r3, [pc, #100]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2fa6:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
				attachInterrupt(50, isr50, CHANGE);
    2faa:	2204      	movs	r2, #4
    2fac:	4923      	ldr	r1, [pc, #140]	; (303c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x55c>)
    2fae:	2032      	movs	r0, #50	; 0x32
    2fb0:	f014 f904 	bl	171bc <attachInterrupt>
		return 1;
    2fb4:	2001      	movs	r0, #1
				break;
    2fb6:	e5d8      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[51] = state;
    2fb8:	4b14      	ldr	r3, [pc, #80]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2fba:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
				attachInterrupt(51, isr51, CHANGE);
    2fbe:	2204      	movs	r2, #4
    2fc0:	491f      	ldr	r1, [pc, #124]	; (3040 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x560>)
    2fc2:	2033      	movs	r0, #51	; 0x33
    2fc4:	f014 f8fa 	bl	171bc <attachInterrupt>
		return 1;
    2fc8:	2001      	movs	r0, #1
				break;
    2fca:	e5ce      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[52] = state;
    2fcc:	4b0f      	ldr	r3, [pc, #60]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2fce:	f8c3 10d0 	str.w	r1, [r3, #208]	; 0xd0
				attachInterrupt(52, isr52, CHANGE);
    2fd2:	2204      	movs	r2, #4
    2fd4:	491b      	ldr	r1, [pc, #108]	; (3044 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x564>)
    2fd6:	2034      	movs	r0, #52	; 0x34
    2fd8:	f014 f8f0 	bl	171bc <attachInterrupt>
		return 1;
    2fdc:	2001      	movs	r0, #1
				break;
    2fde:	e5c4      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[53] = state;
    2fe0:	4b0a      	ldr	r3, [pc, #40]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2fe2:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
				attachInterrupt(53, isr53, CHANGE);
    2fe6:	2204      	movs	r2, #4
    2fe8:	4917      	ldr	r1, [pc, #92]	; (3048 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x568>)
    2fea:	2035      	movs	r0, #53	; 0x35
    2fec:	f014 f8e6 	bl	171bc <attachInterrupt>
		return 1;
    2ff0:	2001      	movs	r0, #1
				break;
    2ff2:	e5ba      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
				interruptArgs[54] = state;
    2ff4:	4b05      	ldr	r3, [pc, #20]	; (300c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x52c>)
    2ff6:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
				attachInterrupt(54, isr54, CHANGE);
    2ffa:	2204      	movs	r2, #4
    2ffc:	4913      	ldr	r1, [pc, #76]	; (304c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x56c>)
    2ffe:	2036      	movs	r0, #54	; 0x36
    3000:	f014 f8dc 	bl	171bc <attachInterrupt>
		return 1;
    3004:	2001      	movs	r0, #1
				break;
    3006:	e5b0      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
		switch (pin) {
    3008:	2000      	movs	r0, #0
    300a:	e5ae      	b.n	2b6a <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x8a>
    300c:	20006eec 	.word	0x20006eec
    3010:	00001af1 	.word	0x00001af1
    3014:	00001b61 	.word	0x00001b61
    3018:	00001bd1 	.word	0x00001bd1
    301c:	00001c41 	.word	0x00001c41
    3020:	00001cb1 	.word	0x00001cb1
    3024:	000012b1 	.word	0x000012b1
    3028:	00001321 	.word	0x00001321
    302c:	00001391 	.word	0x00001391
    3030:	00001401 	.word	0x00001401
    3034:	00001471 	.word	0x00001471
    3038:	000014e1 	.word	0x000014e1
    303c:	00001551 	.word	0x00001551
    3040:	000015c1 	.word	0x000015c1
    3044:	00002acd 	.word	0x00002acd
    3048:	00002ab9 	.word	0x00002ab9
    304c:	00001241 	.word	0x00001241

00003050 <Encoder::Encoder(unsigned char, unsigned char)>:
	Encoder(uint8_t pin1, uint8_t pin2) {
    3050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3054:	4604      	mov	r4, r0
    3056:	460e      	mov	r6, r1
    3058:	4615      	mov	r5, r2
		pinMode(pin1, INPUT_PULLUP);
    305a:	2102      	movs	r1, #2
    305c:	4630      	mov	r0, r6
    305e:	f013 fe57 	bl	16d10 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
    3062:	2102      	movs	r1, #2
    3064:	4628      	mov	r0, r5
    3066:	f013 fe53 	bl	16d10 <pinMode>
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    306a:	4b21      	ldr	r3, [pc, #132]	; (30f0 <Encoder::Encoder(unsigned char, unsigned char)+0xa0>)
    306c:	0131      	lsls	r1, r6, #4
    306e:	eb03 1206 	add.w	r2, r3, r6, lsl #4
    3072:	f853 e001 	ldr.w	lr, [r3, r1]
    3076:	f8c4 e000 	str.w	lr, [r4]
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
    307a:	68d7      	ldr	r7, [r2, #12]
    307c:	60a7      	str	r7, [r4, #8]
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    307e:	0129      	lsls	r1, r5, #4
    3080:	eb03 1205 	add.w	r2, r3, r5, lsl #4
    3084:	5858      	ldr	r0, [r3, r1]
    3086:	6060      	str	r0, [r4, #4]
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
    3088:	68d1      	ldr	r1, [r2, #12]
    308a:	60e1      	str	r1, [r4, #12]
		encoder.position = 0;
    308c:	2300      	movs	r3, #0
    308e:	6163      	str	r3, [r4, #20]
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    3090:	4b18      	ldr	r3, [pc, #96]	; (30f4 <Encoder::Encoder(unsigned char, unsigned char)+0xa4>)
    3092:	685a      	ldr	r2, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3094:	4b18      	ldr	r3, [pc, #96]	; (30f8 <Encoder::Encoder(unsigned char, unsigned char)+0xa8>)
    3096:	681b      	ldr	r3, [r3, #0]
    3098:	f8df c060 	ldr.w	ip, [pc, #96]	; 30fc <Encoder::Encoder(unsigned char, unsigned char)+0xac>
    309c:	fbac 3c03 	umull	r3, ip, ip, r3
    30a0:	ea4f 4c9c 	mov.w	ip, ip, lsr #18
    30a4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    30a8:	fb03 fc0c 	mul.w	ip, r3, ip
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    30ac:	f8df 8044 	ldr.w	r8, [pc, #68]	; 30f4 <Encoder::Encoder(unsigned char, unsigned char)+0xa4>
    30b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
    30b4:	1a9b      	subs	r3, r3, r2
    30b6:	459c      	cmp	ip, r3
    30b8:	d8fa      	bhi.n	30b0 <Encoder::Encoder(unsigned char, unsigned char)+0x60>
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
    30ba:	f8de 3000 	ldr.w	r3, [lr]
    30be:	421f      	tst	r7, r3
		uint8_t s = 0;
    30c0:	bf14      	ite	ne
    30c2:	2301      	movne	r3, #1
    30c4:	2300      	moveq	r3, #0
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    30c6:	6802      	ldr	r2, [r0, #0]
    30c8:	4211      	tst	r1, r2
    30ca:	bf18      	it	ne
    30cc:	f043 0302 	orrne.w	r3, r3, #2
		encoder.state = s;
    30d0:	7423      	strb	r3, [r4, #16]
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    30d2:	4621      	mov	r1, r4
    30d4:	4630      	mov	r0, r6
    30d6:	f7ff fd03 	bl	2ae0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    30da:	7620      	strb	r0, [r4, #24]
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    30dc:	4621      	mov	r1, r4
    30de:	4628      	mov	r0, r5
    30e0:	f7ff fcfe 	bl	2ae0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    30e4:	7e23      	ldrb	r3, [r4, #24]
    30e6:	4418      	add	r0, r3
    30e8:	7620      	strb	r0, [r4, #24]
	}
    30ea:	4620      	mov	r0, r4
    30ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    30f0:	2000373c 	.word	0x2000373c
    30f4:	e0001000 	.word	0xe0001000
    30f8:	20004e18 	.word	0x20004e18
    30fc:	431bde83 	.word	0x431bde83

00003100 <polyphonicsampler::noteOn(unsigned char, unsigned char)>:
            }
        }
        _numVoices = numVoices;
    }

    void noteOn(uint8_t noteNumber, uint8_t velocity) {
    3100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3104:	b084      	sub	sp, #16
    3106:	4604      	mov	r4, r0
        int indexOfVoice = 255;
        bool isretrigger = false;
        if (activeNotes[noteNumber] == 255) {
    3108:	1843      	adds	r3, r0, r1
    310a:	7c18      	ldrb	r0, [r3, #16]
    310c:	28ff      	cmp	r0, #255	; 0xff
    310e:	d024      	beq.n	315a <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x5a>
                indexOfVoice = 255;
                Serial.printf("Note dropped: %i \n", noteNumber);
            }
        } else {
            // note is already active, just re-trigger it...
            indexOfVoice = activeNotes[noteNumber];
    3110:	4606      	mov	r6, r0
            isretrigger = true;
    3112:	2301      	movs	r3, #1
        }
        if (indexOfVoice != 255) {            
            _noteEventFunction(indexOfVoice, noteNumber, velocity, true, isretrigger);
    3114:	f88d 600b 	strb.w	r6, [sp, #11]
    3118:	f88d 100c 	strb.w	r1, [sp, #12]
    311c:	f88d 200d 	strb.w	r2, [sp, #13]
    3120:	2201      	movs	r2, #1
    3122:	f88d 200e 	strb.w	r2, [sp, #14]
    3126:	f88d 300f 	strb.w	r3, [sp, #15]
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
    312a:	68a3      	ldr	r3, [r4, #8]
    312c:	2b00      	cmp	r3, #0
    312e:	d044      	beq.n	31ba <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xba>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    3130:	f10d 030f 	add.w	r3, sp, #15
    3134:	9301      	str	r3, [sp, #4]
    3136:	f10d 030e 	add.w	r3, sp, #14
    313a:	9300      	str	r3, [sp, #0]
    313c:	68e5      	ldr	r5, [r4, #12]
    313e:	f10d 030d 	add.w	r3, sp, #13
    3142:	aa03      	add	r2, sp, #12
    3144:	f10d 010b 	add.w	r1, sp, #11
    3148:	4620      	mov	r0, r4
    314a:	47a8      	blx	r5
	return systick_millis_count;
    314c:	4b23      	ldr	r3, [pc, #140]	; (31dc <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xdc>)
    314e:	681b      	ldr	r3, [r3, #0]
            voice_noteOn[indexOfVoice] = millis();
    3150:	eb04 0686 	add.w	r6, r4, r6, lsl #2
    3154:	f8c6 30e4 	str.w	r3, [r6, #228]	; 0xe4
            //Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
        }
    }
    3158:	e03d      	b.n	31d6 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xd6>
    unsigned long voice_noteOn[MAX_VOICES] {0};

    uint8_t getFirstFreeVoice() {
        unsigned long leastRecentNoteOffEvent = UINT32_MAX;
        uint8_t indexOfVoiceWithLeastRecentNoteOff = 255;
        for (int i=0; i < _numVoices; i++) {
    315a:	f894 50a0 	ldrb.w	r5, [r4, #160]	; 0xa0
    315e:	b325      	cbz	r5, 31aa <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xaa>
    3160:	f104 0c8f 	add.w	ip, r4, #143	; 0x8f
        unsigned long leastRecentNoteOffEvent = UINT32_MAX;
    3164:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        for (int i=0; i < _numVoices; i++) {
    3168:	2300      	movs	r3, #0
            if (activeVoices[i] == 255) {
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    316a:	f104 08a4 	add.w	r8, r4, #164	; 0xa4
    316e:	e002      	b.n	3176 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x76>
        for (int i=0; i < _numVoices; i++) {
    3170:	3301      	adds	r3, #1
    3172:	42ab      	cmp	r3, r5
    3174:	d023      	beq.n	31be <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xbe>
            if (activeVoices[i] == 255) {
    3176:	f81c ef01 	ldrb.w	lr, [ip, #1]!
    317a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    317e:	d1f7      	bne.n	3170 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x70>
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    3180:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
    3184:	42b7      	cmp	r7, r6
    3186:	d2f3      	bcs.n	3170 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x70>
                    leastRecentNoteOffEvent = voice_noteOff[i];
                    indexOfVoiceWithLeastRecentNoteOff = i;
    3188:	b2d8      	uxtb	r0, r3
                    leastRecentNoteOffEvent = voice_noteOff[i];
    318a:	463e      	mov	r6, r7
    318c:	e7f0      	b.n	3170 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x70>
    318e:	f104 0ce0 	add.w	ip, r4, #224	; 0xe0
                }
            }
        }
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    3192:	2300      	movs	r3, #0
    3194:	e002      	b.n	319c <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x9c>
            // all voices are in use... return the voice with least recent note off
            unsigned long leastRecentNoteOnEvent = UINT32_MAX;
            for (int i=0; i < _numVoices; i++) {
    3196:	3301      	adds	r3, #1
    3198:	42ab      	cmp	r3, r5
    319a:	da12      	bge.n	31c2 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xc2>
                if (voice_noteOn[i] < leastRecentNoteOffEvent) {
    319c:	f85c 7f04 	ldr.w	r7, [ip, #4]!
    31a0:	42b7      	cmp	r7, r6
    31a2:	d2f8      	bcs.n	3196 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x96>
                    leastRecentNoteOffEvent = voice_noteOn[i];
                    indexOfVoiceWithLeastRecentNoteOff = i;
    31a4:	b2d8      	uxtb	r0, r3
                    leastRecentNoteOffEvent = voice_noteOn[i];
    31a6:	463e      	mov	r6, r7
    31a8:	e7f5      	b.n	3196 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x96>
                Serial.printf("Note dropped: %i \n", noteNumber);
    31aa:	460a      	mov	r2, r1
    31ac:	490c      	ldr	r1, [pc, #48]	; (31e0 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xe0>)
    31ae:	480d      	ldr	r0, [pc, #52]	; (31e4 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xe4>)
    31b0:	f013 f824 	bl	161fc <Print::printf(char const*, ...)>
        if (indexOfVoice != 255) {            
    31b4:	e00f      	b.n	31d6 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xd6>
        bool isretrigger = false;
    31b6:	2300      	movs	r3, #0
    31b8:	e7ac      	b.n	3114 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x14>
	  __throw_bad_function_call();
    31ba:	f016 fb27 	bl	1980c <std::__throw_bad_function_call()>
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    31be:	28ff      	cmp	r0, #255	; 0xff
    31c0:	d0e5      	beq.n	318e <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x8e>
            indexOfVoice = getFirstFreeVoice();
    31c2:	4606      	mov	r6, r0
            if (indexOfVoice < _numVoices) {
    31c4:	42a8      	cmp	r0, r5
    31c6:	d2f0      	bcs.n	31aa <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xaa>
                activeVoices[indexOfVoice] = noteNumber;
    31c8:	1823      	adds	r3, r4, r0
    31ca:	f883 1090 	strb.w	r1, [r3, #144]	; 0x90
                activeNotes[noteNumber] = indexOfVoice;                
    31ce:	1863      	adds	r3, r4, r1
    31d0:	7418      	strb	r0, [r3, #16]
        if (indexOfVoice != 255) {            
    31d2:	28ff      	cmp	r0, #255	; 0xff
    31d4:	d1ef      	bne.n	31b6 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xb6>
    }
    31d6:	b004      	add	sp, #16
    31d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31dc:	20008a6c 	.word	0x20008a6c
    31e0:	20002208 	.word	0x20002208
    31e4:	20004e74 	.word	0x20004e74

000031e8 <playNote()>:
void playNote() {
    31e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31ec:	ed2d 8b08 	vpush	{d8-d11}
    31f0:	b093      	sub	sp, #76	; 0x4c
  if (isPlaying) {
    31f2:	4bb1      	ldr	r3, [pc, #708]	; (34b8 <playNote()+0x2d0>)
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	2b00      	cmp	r3, #0
    31f8:	f000 81a8 	beq.w	354c <playNote()+0x364>
    31fc:	4eaf      	ldr	r6, [pc, #700]	; (34bc <playNote()+0x2d4>)
    for (unsigned int b = 1; b < maxY + 1; b++) {
    31fe:	2401      	movs	r4, #1
      if (note[beat][b][0] > 0 && !SMP.mute[note[beat][b][0]]) {
    3200:	4faf      	ldr	r7, [pc, #700]	; (34c0 <playNote()+0x2d8>)
          float WaveFormVelocity = mapf(note[beat][b][1], 1, 127, 0.0, 1.0);
    3202:	ed9f 9ba7 	vldr	d9, [pc, #668]	; 34a0 <playNote()+0x2b8>
    3206:	ed9f 8ba8 	vldr	d8, [pc, #672]	; 34a8 <playNote()+0x2c0>

	void frequency(float freq) {
		if (freq < 0.0f) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    320a:	ed9f baae 	vldr	s22, [pc, #696]	; 34c4 <playNote()+0x2dc>
			freq = AUDIO_SAMPLE_RATE_EXACT / 2.0f;
		}
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    320e:	ed9f aba8 	vldr	d10, [pc, #672]	; 34b0 <playNote()+0x2c8>
    3212:	9602      	str	r6, [sp, #8]
    3214:	e0fa      	b.n	340c <playNote()+0x224>
          _samplers[note[beat][b][0]].noteEvent(12 * SampleRate[note[beat][b][0]] + b - (note[beat][b][0] + 1), note[beat][b][1], true, false);
    3216:	4bac      	ldr	r3, [pc, #688]	; (34c8 <playNote()+0x2e0>)
    3218:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    321c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    3220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3224:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    3228:	eba9 0905 	sub.w	r9, r9, r5
    322c:	eb09 0983 	add.w	r9, r9, r3, lsl #2
    3230:	fa5f f989 	uxtb.w	r9, r9
    3234:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    3238:	4422      	add	r2, r4
    323a:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
    323e:	791a      	ldrb	r2, [r3, #4]
public:
    basesampler() : _polysampler() {
    }

    void noteEvent(uint8_t noteNumber, uint8_t velocity, bool isNoteOn, bool retrigger) {
        if (isNoteOn && velocity > 0)
    3240:	b142      	cbz	r2, 3254 <playNote()+0x6c>
            _polysampler.noteOn(noteNumber, velocity);
    3242:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    3246:	4649      	mov	r1, r9
    3248:	48a0      	ldr	r0, [pc, #640]	; (34cc <playNote()+0x2e4>)
    324a:	eb00 1085 	add.w	r0, r0, r5, lsl #6
    324e:	f7ff ff57 	bl	3100 <polyphonicsampler::noteOn(unsigned char, unsigned char)>
    3252:	e0ef      	b.n	3434 <playNote()+0x24c>
        uint8_t index = activeNotes[noteNumber];
    3254:	eb05 0285 	add.w	r2, r5, r5, lsl #2
    3258:	4b9d      	ldr	r3, [pc, #628]	; (34d0 <playNote()+0x2e8>)
    325a:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    325e:	444b      	add	r3, r9
    3260:	f893 a020 	ldrb.w	sl, [r3, #32]
        if (index == 255) {
    3264:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3268:	f000 80ca 	beq.w	3400 <playNote()+0x218>
        else 
            _polysampler.noteOff(noteNumber);
    326c:	4897      	ldr	r0, [pc, #604]	; (34cc <playNote()+0x2e4>)
    326e:	eb00 1082 	add.w	r0, r0, r2, lsl #6
        _noteEventFunction(index, noteNumber, 0, false, false);
    3272:	f88d a013 	strb.w	sl, [sp, #19]
    3276:	f88d 9014 	strb.w	r9, [sp, #20]
    327a:	2300      	movs	r3, #0
    327c:	f88d 3015 	strb.w	r3, [sp, #21]
    3280:	f88d 3016 	strb.w	r3, [sp, #22]
    3284:	f88d 3017 	strb.w	r3, [sp, #23]
	if (_M_empty())
    3288:	6883      	ldr	r3, [r0, #8]
    328a:	b33b      	cbz	r3, 32dc <playNote()+0xf4>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    328c:	00ab      	lsls	r3, r5, #2
    328e:	9303      	str	r3, [sp, #12]
    3290:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    3294:	4a8e      	ldr	r2, [pc, #568]	; (34d0 <playNote()+0x2e8>)
    3296:	eb02 1b83 	add.w	fp, r2, r3, lsl #6
    329a:	f10d 0317 	add.w	r3, sp, #23
    329e:	9301      	str	r3, [sp, #4]
    32a0:	f10d 0316 	add.w	r3, sp, #22
    32a4:	9300      	str	r3, [sp, #0]
    32a6:	f10d 0315 	add.w	r3, sp, #21
    32aa:	aa05      	add	r2, sp, #20
    32ac:	f10d 0113 	add.w	r1, sp, #19
    32b0:	f8db 601c 	ldr.w	r6, [fp, #28]
    32b4:	47b0      	blx	r6
        activeNotes[noteNumber] = 255;
    32b6:	44d9      	add	r9, fp
    32b8:	23ff      	movs	r3, #255	; 0xff
    32ba:	f889 3020 	strb.w	r3, [r9, #32]
        activeVoices[index] = 255; // free the voice
    32be:	44d3      	add	fp, sl
    32c0:	f88b 30a0 	strb.w	r3, [fp, #160]	; 0xa0
    32c4:	4b83      	ldr	r3, [pc, #524]	; (34d4 <playNote()+0x2ec>)
    32c6:	681a      	ldr	r2, [r3, #0]
        voice_noteOff[index] = millis();
    32c8:	9903      	ldr	r1, [sp, #12]
    32ca:	194b      	adds	r3, r1, r5
    32cc:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    32d0:	4b7f      	ldr	r3, [pc, #508]	; (34d0 <playNote()+0x2e8>)
    32d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    32d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    32da:	e0ab      	b.n	3434 <playNote()+0x24c>
	  __throw_bad_function_call();
    32dc:	f016 fa96 	bl	1980c <std::__throw_bad_function_call()>
          float frequency = pianoFrequencies[b] / 2;  // y-Wert ist 1-basiert, Array ist 0-basiert
    32e0:	9a02      	ldr	r2, [sp, #8]
    32e2:	ed92 7a01 	vldr	s14, [r2, #4]
    32e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    32ea:	ee27 7a27 	vmul.f32	s14, s14, s15
		if (freq < 0.0f) {
    32ee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    32f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    32f6:	d411      	bmi.n	331c <playNote()+0x134>
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    32f8:	eeb4 7acb 	vcmpe.f32	s14, s22
    32fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3300:	dc42      	bgt.n	3388 <playNote()+0x1a0>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    3302:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3306:	ee27 7b0a 	vmul.f64	d7, d7, d10
    330a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    330e:	ee17 2a90 	vmov	r2, s15
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    3312:	4971      	ldr	r1, [pc, #452]	; (34d8 <playNote()+0x2f0>)
    3314:	428a      	cmp	r2, r1
    3316:	bf28      	it	cs
    3318:	460a      	movcs	r2, r1
    331a:	e000      	b.n	331e <playNote()+0x136>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    331c:	4642      	mov	r2, r8
    331e:	496f      	ldr	r1, [pc, #444]	; (34dc <playNote()+0x2f4>)
    3320:	61ca      	str	r2, [r1, #28]
          float WaveFormVelocity = mapf(note[beat][b][1], 1, 127, 0.0, 1.0);
    3322:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    3326:	4423      	add	r3, r4
    3328:	4a6d      	ldr	r2, [pc, #436]	; (34e0 <playNote()+0x2f8>)
    332a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    332e:	ed93 0a01 	vldr	s0, [r3, #4]
    3332:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    3336:	eeb0 3b49 	vmov.f64	d3, d9
    333a:	eeb0 2b48 	vmov.f64	d2, d8
    333e:	eeb0 1b44 	vmov.f64	d1, d4
    3342:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    3346:	f008 f9bf 	bl	b6c8 <mapf(double, double, double, double, double)>
    334a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
			if (angle >= 360.0f) return;
		}
		phase_offset = angle * (float)(4294967296.0 / 360.0);
	}
	void amplitude(float n) {	// 0 to 1.0
		if (n < 0) {
    334e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    3352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3356:	d419      	bmi.n	338c <playNote()+0x1a4>
			n = 0;
		} else if (n > 1.0f) {
			n = 1.0;
    3358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    335c:	eeb4 0a67 	vcmp.f32	s0, s15
    3360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3364:	fe37 0a80 	vselgt.f32	s0, s15, s0
		}
		magnitude = n * 65536.0f;
    3368:	eebe 0ac8 	vcvt.s32.f32	s0, s0, #16
    336c:	4b5b      	ldr	r3, [pc, #364]	; (34dc <playNote()+0x2f4>)
    336e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
          envelope14.noteOn();
    3372:	485c      	ldr	r0, [pc, #368]	; (34e4 <playNote()+0x2fc>)
    3374:	f009 fcf6 	bl	cd64 <AudioEffectEnvelope::noteOn()>
    3378:	4b56      	ldr	r3, [pc, #344]	; (34d4 <playNote()+0x2ec>)
    337a:	681a      	ldr	r2, [r3, #0]
          startTime = millis();    // Record the start time
    337c:	4b5a      	ldr	r3, [pc, #360]	; (34e8 <playNote()+0x300>)
    337e:	601a      	str	r2, [r3, #0]
          noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    3380:	4b5a      	ldr	r3, [pc, #360]	; (34ec <playNote()+0x304>)
    3382:	2201      	movs	r2, #1
    3384:	701a      	strb	r2, [r3, #0]
    3386:	e05f      	b.n	3448 <playNote()+0x260>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    3388:	4a53      	ldr	r2, [pc, #332]	; (34d8 <playNote()+0x2f0>)
    338a:	e7c8      	b.n	331e <playNote()+0x136>
			n = 0;
    338c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 34f0 <playNote()+0x308>
    3390:	e7ea      	b.n	3368 <playNote()+0x180>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    3392:	f8df 8144 	ldr.w	r8, [pc, #324]	; 34d8 <playNote()+0x2f0>
    3396:	4a57      	ldr	r2, [pc, #348]	; (34f4 <playNote()+0x30c>)
    3398:	f8c2 801c 	str.w	r8, [r2, #28]
          float WaveFormVelocity = mapf(note[beat][b][1], 1, 127, 0.0, 1.0);
    339c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    33a0:	4423      	add	r3, r4
    33a2:	4a4f      	ldr	r2, [pc, #316]	; (34e0 <playNote()+0x2f8>)
    33a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    33a8:	ed93 0a01 	vldr	s0, [r3, #4]
    33ac:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    33b0:	eeb0 3b49 	vmov.f64	d3, d9
    33b4:	eeb0 2b48 	vmov.f64	d2, d8
    33b8:	eeb0 1b44 	vmov.f64	d1, d4
    33bc:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    33c0:	f008 f982 	bl	b6c8 <mapf(double, double, double, double, double)>
    33c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		if (n < 0) {
    33c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    33cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33d0:	d461      	bmi.n	3496 <playNote()+0x2ae>
			n = 1.0;
    33d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    33d6:	eeb4 0a67 	vcmp.f32	s0, s15
    33da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33de:	fe37 0a80 	vselgt.f32	s0, s15, s0
		magnitude = n * 65536.0f;
    33e2:	eebe 0ac8 	vcvt.s32.f32	s0, s0, #16
    33e6:	4b43      	ldr	r3, [pc, #268]	; (34f4 <playNote()+0x30c>)
    33e8:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
          envelope13.noteOn();
    33ec:	4842      	ldr	r0, [pc, #264]	; (34f8 <playNote()+0x310>)
    33ee:	f009 fcb9 	bl	cd64 <AudioEffectEnvelope::noteOn()>
    33f2:	4b38      	ldr	r3, [pc, #224]	; (34d4 <playNote()+0x2ec>)
    33f4:	681a      	ldr	r2, [r3, #0]
          startTime = millis();    // Record the start time
    33f6:	4b3c      	ldr	r3, [pc, #240]	; (34e8 <playNote()+0x300>)
    33f8:	601a      	str	r2, [r3, #0]
          noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    33fa:	4b3c      	ldr	r3, [pc, #240]	; (34ec <playNote()+0x304>)
    33fc:	2201      	movs	r2, #1
    33fe:	701a      	strb	r2, [r3, #0]
    for (unsigned int b = 1; b < maxY + 1; b++) {
    3400:	3401      	adds	r4, #1
    3402:	9b02      	ldr	r3, [sp, #8]
    3404:	3304      	adds	r3, #4
    3406:	9302      	str	r3, [sp, #8]
    3408:	2c11      	cmp	r4, #17
    340a:	d077      	beq.n	34fc <playNote()+0x314>
      if (note[beat][b][0] > 0 && !SMP.mute[note[beat][b][0]]) {
    340c:	683a      	ldr	r2, [r7, #0]
    340e:	eb02 1302 	add.w	r3, r2, r2, lsl #4
    3412:	4423      	add	r3, r4
    3414:	4932      	ldr	r1, [pc, #200]	; (34e0 <playNote()+0x2f8>)
    3416:	f851 5033 	ldr.w	r5, [r1, r3, lsl #3]
    341a:	2d00      	cmp	r5, #0
    341c:	d0f0      	beq.n	3400 <playNote()+0x218>
    341e:	4b2a      	ldr	r3, [pc, #168]	; (34c8 <playNote()+0x2e0>)
    3420:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    3424:	f8d3 8104 	ldr.w	r8, [r3, #260]	; 0x104
    3428:	f1b8 0f00 	cmp.w	r8, #0
    342c:	d1e8      	bne.n	3400 <playNote()+0x218>
        if (note[beat][b][0] < 9) {
    342e:	2d08      	cmp	r5, #8
    3430:	f67f aef1 	bls.w	3216 <playNote()+0x2e>
        if (note[beat][b][0] == 14) {
    3434:	683b      	ldr	r3, [r7, #0]
    3436:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    343a:	4422      	add	r2, r4
    343c:	4928      	ldr	r1, [pc, #160]	; (34e0 <playNote()+0x2f8>)
    343e:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
    3442:	2a0e      	cmp	r2, #14
    3444:	f43f af4c 	beq.w	32e0 <playNote()+0xf8>
        if (note[beat][b][0] == 13) {
    3448:	683b      	ldr	r3, [r7, #0]
    344a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    344e:	4422      	add	r2, r4
    3450:	4923      	ldr	r1, [pc, #140]	; (34e0 <playNote()+0x2f8>)
    3452:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
    3456:	2a0d      	cmp	r2, #13
    3458:	d1d2      	bne.n	3400 <playNote()+0x218>
          float frequency = pianoFrequencies[b - 1] / 2;  // y-Wert ist 1-basiert, Array ist 0-basiert
    345a:	9a02      	ldr	r2, [sp, #8]
    345c:	ed92 7a00 	vldr	s14, [r2]
    3460:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3464:	ee27 7a27 	vmul.f32	s14, s14, s15
		if (freq < 0.0f) {
    3468:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    346c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3470:	d491      	bmi.n	3396 <playNote()+0x1ae>
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    3472:	eeb4 7acb 	vcmpe.f32	s14, s22
    3476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    347a:	dc8a      	bgt.n	3392 <playNote()+0x1aa>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    347c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    3480:	ee27 7b0a 	vmul.f64	d7, d7, d10
    3484:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    3488:	ee17 8a90 	vmov	r8, s15
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    348c:	4a12      	ldr	r2, [pc, #72]	; (34d8 <playNote()+0x2f0>)
    348e:	4590      	cmp	r8, r2
    3490:	bf28      	it	cs
    3492:	4690      	movcs	r8, r2
    3494:	e77f      	b.n	3396 <playNote()+0x1ae>
			n = 0;
    3496:	ed9f 0a16 	vldr	s0, [pc, #88]	; 34f0 <playNote()+0x308>
    349a:	e7a2      	b.n	33e2 <playNote()+0x1fa>
    349c:	f3af 8000 	nop.w
	...
    34ac:	405fc000 	.word	0x405fc000
    34b0:	c751f177 	.word	0xc751f177
    34b4:	40f7c6f8 	.word	0x40f7c6f8
    34b8:	20008c2b 	.word	0x20008c2b
    34bc:	20001294 	.word	0x20001294
    34c0:	200057e8 	.word	0x200057e8
    34c4:	46ac4400 	.word	0x46ac4400
    34c8:	70000000 	.word	0x70000000
    34cc:	700001f0 	.word	0x700001f0
    34d0:	700001e0 	.word	0x700001e0
    34d4:	20008a6c 	.word	0x20008a6c
    34d8:	7ffe0000 	.word	0x7ffe0000
    34dc:	200087f4 	.word	0x200087f4
    34e0:	70db37d8 	.word	0x70db37d8
    34e4:	20007544 	.word	0x20007544
    34e8:	20008a64 	.word	0x20008a64
    34ec:	20008c2c 	.word	0x20008c2c
    34f0:	00000000 	.word	0x00000000
    34f4:	20008664 	.word	0x20008664
    34f8:	2000750c 	.word	0x2000750c
    beat++;
    34fc:	4932      	ldr	r1, [pc, #200]	; (35c8 <playNote()+0x3e0>)
    34fe:	680b      	ldr	r3, [r1, #0]
    3500:	1c5a      	adds	r2, r3, #1
    3502:	600a      	str	r2, [r1, #0]
    pagebeat = (beat - 1) % maxX + 1;
    3504:	f003 030f 	and.w	r3, r3, #15
    3508:	3301      	adds	r3, #1
    350a:	4930      	ldr	r1, [pc, #192]	; (35cc <playNote()+0x3e4>)
    350c:	600b      	str	r3, [r1, #0]
    if (waitForFourBars && pulseCount >= totalPulsesToWait) {
    350e:	4b30      	ldr	r3, [pc, #192]	; (35d0 <playNote()+0x3e8>)
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	2b00      	cmp	r3, #0
    3514:	d044      	beq.n	35a0 <playNote()+0x3b8>
    3516:	4b2f      	ldr	r3, [pc, #188]	; (35d4 <playNote()+0x3ec>)
    3518:	681b      	ldr	r3, [r3, #0]
    351a:	2bbf      	cmp	r3, #191	; 0xbf
    351c:	d940      	bls.n	35a0 <playNote()+0x3b8>
      beat = 1;
    351e:	2201      	movs	r2, #1
    3520:	4b29      	ldr	r3, [pc, #164]	; (35c8 <playNote()+0x3e0>)
    3522:	601a      	str	r2, [r3, #0]
      pagebeat = 1;
    3524:	600a      	str	r2, [r1, #0]
      SMP.page = 1;
    3526:	4b2c      	ldr	r3, [pc, #176]	; (35d8 <playNote()+0x3f0>)
    3528:	615a      	str	r2, [r3, #20]
      isPlaying = true;
    352a:	4b2c      	ldr	r3, [pc, #176]	; (35dc <playNote()+0x3f4>)
    352c:	701a      	strb	r2, [r3, #0]
      waitForFourBars = false;  // Reset for the next start message
    352e:	4b28      	ldr	r3, [pc, #160]	; (35d0 <playNote()+0x3e8>)
    3530:	2100      	movs	r1, #0
    3532:	7019      	strb	r1, [r3, #0]
    if (beat > maxX * lastPage) {
    3534:	4b2a      	ldr	r3, [pc, #168]	; (35e0 <playNote()+0x3f8>)
    3536:	681b      	ldr	r3, [r3, #0]
    3538:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
    353c:	d906      	bls.n	354c <playNote()+0x364>
      beat = 1;
    353e:	2301      	movs	r3, #1
    3540:	4a21      	ldr	r2, [pc, #132]	; (35c8 <playNote()+0x3e0>)
    3542:	6013      	str	r3, [r2, #0]
      SMP.page = 1;
    3544:	4a24      	ldr	r2, [pc, #144]	; (35d8 <playNote()+0x3f0>)
    3546:	6153      	str	r3, [r2, #20]
      pagebeat = 1;
    3548:	4a20      	ldr	r2, [pc, #128]	; (35cc <playNote()+0x3e4>)
    354a:	6013      	str	r3, [r2, #0]
  playTimer.end();  // Stop the timer
    354c:	4825      	ldr	r0, [pc, #148]	; (35e4 <playNote()+0x3fc>)
    354e:	f012 fdaf 	bl	160b0 <IntervalTimer::end()>
        vtable_ptr_ = std::addressof(vt);
    3552:	4b25      	ldr	r3, [pc, #148]	; (35e8 <playNote()+0x400>)
    3554:	9306      	str	r3, [sp, #24]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    3556:	4b25      	ldr	r3, [pc, #148]	; (35ec <playNote()+0x404>)
    3558:	9308      	str	r3, [sp, #32]
  playTimer.begin(playNote, playNoteInterval);
    355a:	4b25      	ldr	r3, [pc, #148]	; (35f0 <playNote()+0x408>)
    355c:	681b      	ldr	r3, [r3, #0]
		if (period < 0 || period > MAX_PERIOD)
    355e:	4a25      	ldr	r2, [pc, #148]	; (35f4 <playNote()+0x40c>)
    3560:	4293      	cmp	r3, r2
    3562:	d814      	bhi.n	358e <playNote()+0x3a6>
			return (24000000 / 1000000) * period - 1;
    3564:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3568:	00dc      	lsls	r4, r3, #3
    356a:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    356c:	2c10      	cmp	r4, #16
    356e:	d90e      	bls.n	358e <playNote()+0x3a6>
        vtable_ptr_{other.vtable_ptr_}
    3570:	4b1d      	ldr	r3, [pc, #116]	; (35e8 <playNote()+0x400>)
    3572:	930c      	str	r3, [sp, #48]	; 0x30
        vtable_ptr_->copy_ptr(
    3574:	a908      	add	r1, sp, #32
    3576:	a80e      	add	r0, sp, #56	; 0x38
    3578:	f7fc fec6 	bl	308 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    357c:	4622      	mov	r2, r4
    357e:	a90c      	add	r1, sp, #48	; 0x30
    3580:	4818      	ldr	r0, [pc, #96]	; (35e4 <playNote()+0x3fc>)
    3582:	f012 fd0f 	bl	15fa4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    3586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    3588:	68db      	ldr	r3, [r3, #12]
    358a:	a80e      	add	r0, sp, #56	; 0x38
    358c:	4798      	blx	r3
    358e:	9b06      	ldr	r3, [sp, #24]
    3590:	68db      	ldr	r3, [r3, #12]
    3592:	a808      	add	r0, sp, #32
    3594:	4798      	blx	r3
}
    3596:	b013      	add	sp, #76	; 0x4c
    3598:	ecbd 8b08 	vpop	{d8-d11}
    359c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (beat > SMP.page * maxX) {
    35a0:	4b0d      	ldr	r3, [pc, #52]	; (35d8 <playNote()+0x3f0>)
    35a2:	695b      	ldr	r3, [r3, #20]
    35a4:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
    35a8:	d9c4      	bls.n	3534 <playNote()+0x34c>
      SMP.page = SMP.page + 1;
    35aa:	3301      	adds	r3, #1
        SMP.page = 1;
    35ac:	2b09      	cmp	r3, #9
    35ae:	bf28      	it	cs
    35b0:	2301      	movcs	r3, #1
    35b2:	4909      	ldr	r1, [pc, #36]	; (35d8 <playNote()+0x3f0>)
    35b4:	614b      	str	r3, [r1, #20]
      if (SMP.page > lastPage)
    35b6:	490a      	ldr	r1, [pc, #40]	; (35e0 <playNote()+0x3f8>)
    35b8:	6809      	ldr	r1, [r1, #0]
    35ba:	4299      	cmp	r1, r3
    35bc:	d2ba      	bcs.n	3534 <playNote()+0x34c>
        SMP.page = 1;
    35be:	4b06      	ldr	r3, [pc, #24]	; (35d8 <playNote()+0x3f0>)
    35c0:	2101      	movs	r1, #1
    35c2:	6159      	str	r1, [r3, #20]
    35c4:	e7b6      	b.n	3534 <playNote()+0x34c>
    35c6:	bf00      	nop
    35c8:	200057e8 	.word	0x200057e8
    35cc:	200080e8 	.word	0x200080e8
    35d0:	20008c48 	.word	0x20008c48
    35d4:	200084d4 	.word	0x200084d4
    35d8:	70000000 	.word	0x70000000
    35dc:	20008c2b 	.word	0x20008c2b
    35e0:	20005a80 	.word	0x20005a80
    35e4:	20005b04 	.word	0x20005b04
    35e8:	200029b8 	.word	0x200029b8
    35ec:	000031e9 	.word	0x000031e9
    35f0:	20005b00 	.word	0x20005b00
    35f4:	0aaaaaaa 	.word	0x0aaaaaaa

000035f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>:
    AudioPlayArrayResmp(void) :
    35f8:	b538      	push	{r3, r4, r5, lr}
    35fa:	4605      	mov	r5, r0
		num_inputs(ninput), inputQueue(iqueue) {
    35fc:	4b25      	ldr	r3, [pc, #148]	; (3694 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x9c>)
    35fe:	6003      	str	r3, [r0, #0]
    3600:	2300      	movs	r3, #0
    3602:	7243      	strb	r3, [r0, #9]
    3604:	6103      	str	r3, [r0, #16]
			active = false;
    3606:	7203      	strb	r3, [r0, #8]
			destination_list = NULL;
    3608:	60c3      	str	r3, [r0, #12]
			if (first_update == NULL) {
    360a:	4b23      	ldr	r3, [pc, #140]	; (3698 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0xa0>)
    360c:	681b      	ldr	r3, [r3, #0]
    360e:	2b00      	cmp	r3, #0
    3610:	d03d      	beq.n	368e <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x96>
				for (p=first_update; p->next_update; p = p->next_update) ;
    3612:	461a      	mov	r2, r3
    3614:	695b      	ldr	r3, [r3, #20]
    3616:	2b00      	cmp	r3, #0
    3618:	d1fb      	bne.n	3612 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x1a>
				p->next_update = this;
    361a:	6155      	str	r5, [r2, #20]
			next_update = NULL;
    361c:	2400      	movs	r4, #0
    361e:	616c      	str	r4, [r5, #20]
			cpu_cycles = 0;
    3620:	80ac      	strh	r4, [r5, #4]
			cpu_cycles_max = 0;
    3622:	80ec      	strh	r4, [r5, #6]
			numConnections = 0;
    3624:	72ac      	strb	r4, [r5, #10]

template <class TResamplingReader>
class AudioPlayResmp : public AudioStream
{
    public:
        AudioPlayResmp(): AudioStream(0, NULL), reader(nullptr)
    3626:	61ac      	str	r4, [r5, #24]
            AudioPlayResmp<newdigate::ResamplingArrayReader>()
    3628:	4b1c      	ldr	r3, [pc, #112]	; (369c <AudioPlayArrayResmp::AudioPlayArrayResmp()+0xa4>)
    362a:	602b      	str	r3, [r5, #0]
        reader = new newdigate::ResamplingArrayReader();
    362c:	2068      	movs	r0, #104	; 0x68
    362e:	f013 fef9 	bl	17424 <operator new(unsigned int)>
    ResamplingReader() {
    3632:	7104      	strb	r4, [r0, #4]
    3634:	60c4      	str	r4, [r0, #12]
    3636:	2200      	movs	r2, #0
    3638:	4b19      	ldr	r3, [pc, #100]	; (36a0 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0xa8>)
    363a:	e9c0 2304 	strd	r2, r3, [r0, #16]
    363e:	2200      	movs	r2, #0
    3640:	2300      	movs	r3, #0
    3642:	e9c0 2306 	strd	r2, r3, [r0, #24]
    3646:	f880 4020 	strb.w	r4, [r0, #32]
    364a:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    364e:	6244      	str	r4, [r0, #36]	; 0x24
    3650:	6284      	str	r4, [r0, #40]	; 0x28
    3652:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
    3656:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
    365a:	f44f 7380 	mov.w	r3, #256	; 0x100
    365e:	63c3      	str	r3, [r0, #60]	; 0x3c
    3660:	6404      	str	r4, [r0, #64]	; 0x40
    3662:	6444      	str	r4, [r0, #68]	; 0x44
    3664:	6484      	str	r4, [r0, #72]	; 0x48
    3666:	f64f 73ff 	movw	r3, #65535	; 0xffff
    366a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
    366e:	f8a0 404e 	strh.w	r4, [r0, #78]	; 0x4e
    3672:	6504      	str	r4, [r0, #80]	; 0x50
    3674:	6544      	str	r4, [r0, #84]	; 0x54
    3676:	2301      	movs	r3, #1
    3678:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    367c:	65c4      	str	r4, [r0, #92]	; 0x5c
    367e:	6604      	str	r4, [r0, #96]	; 0x60
        ResamplingReader() {
    3680:	4b08      	ldr	r3, [pc, #32]	; (36a4 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0xac>)
    3682:	6003      	str	r3, [r0, #0]
    3684:	61a8      	str	r0, [r5, #24]
        _playing = false;
    3686:	7104      	strb	r4, [r0, #4]
        _file_size = 0;
    3688:	6084      	str	r4, [r0, #8]
    }
    368a:	4628      	mov	r0, r5
    368c:	bd38      	pop	{r3, r4, r5, pc}
				first_update = this;
    368e:	4b02      	ldr	r3, [pc, #8]	; (3698 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0xa0>)
    3690:	6018      	str	r0, [r3, #0]
    3692:	e7c3      	b.n	361c <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x24>
    3694:	20002590 	.word	0x20002590
    3698:	20006d60 	.word	0x20006d60
    369c:	2000269c 	.word	0x2000269c
    36a0:	3ff00000 	.word	0x3ff00000
    36a4:	2000293c 	.word	0x2000293c

000036a8 <allOff()>:
void allOff() {
    36a8:	b538      	push	{r3, r4, r5, lr}
  for (AudioEffectEnvelope *envelope : envelopes) {
    36aa:	4c05      	ldr	r4, [pc, #20]	; (36c0 <allOff()+0x18>)
    36ac:	f104 053c 	add.w	r5, r4, #60	; 0x3c
    envelope->noteOff();
    36b0:	f854 0b04 	ldr.w	r0, [r4], #4
    36b4:	f009 fb7c 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
  for (AudioEffectEnvelope *envelope : envelopes) {
    36b8:	42ac      	cmp	r4, r5
    36ba:	d1f9      	bne.n	36b0 <allOff()+0x8>
}
    36bc:	bd38      	pop	{r3, r4, r5, pc}
    36be:	bf00      	nop
    36c0:	20005844 	.word	0x20005844

000036c4 <FastLEDclear()>:
void FastLEDclear() {
    36c4:	b508      	push	{r3, lr}
  FastLED.clear();
    36c6:	2100      	movs	r1, #0
    36c8:	4801      	ldr	r0, [pc, #4]	; (36d0 <FastLEDclear()+0xc>)
    36ca:	f008 fca5 	bl	c018 <CFastLED::clear(bool)>
}
    36ce:	bd08      	pop	{r3, pc}
    36d0:	20006668 	.word	0x20006668

000036d4 <FastLEDshow()>:
void FastLEDshow() {
    36d4:	b508      	push	{r3, lr}
    36d6:	4b09      	ldr	r3, [pc, #36]	; (36fc <FastLEDshow()+0x28>)
    36d8:	681b      	ldr	r3, [r3, #0]
  if (millis() - lastUpdate > RefreshTime) {
    36da:	4a09      	ldr	r2, [pc, #36]	; (3700 <FastLEDshow()+0x2c>)
    36dc:	6812      	ldr	r2, [r2, #0]
    36de:	1a9b      	subs	r3, r3, r2
    36e0:	4a08      	ldr	r2, [pc, #32]	; (3704 <FastLEDshow()+0x30>)
    36e2:	6812      	ldr	r2, [r2, #0]
    36e4:	4293      	cmp	r3, r2
    36e6:	d800      	bhi.n	36ea <FastLEDshow()+0x16>
}
    36e8:	bd08      	pop	{r3, pc}
    36ea:	4b04      	ldr	r3, [pc, #16]	; (36fc <FastLEDshow()+0x28>)
    36ec:	681a      	ldr	r2, [r3, #0]
    lastUpdate = millis();
    36ee:	4b04      	ldr	r3, [pc, #16]	; (3700 <FastLEDshow()+0x2c>)
    36f0:	601a      	str	r2, [r3, #0]
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale the brightness value to use in place of the stored value
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    36f2:	4805      	ldr	r0, [pc, #20]	; (3708 <FastLEDshow()+0x34>)
    36f4:	7801      	ldrb	r1, [r0, #0]
    36f6:	f008 fbad 	bl	be54 <CFastLED::show(unsigned char)>
}
    36fa:	e7f5      	b.n	36e8 <FastLEDshow()+0x14>
    36fc:	20008a6c 	.word	0x20008a6c
    3700:	20007b2c 	.word	0x20007b2c
    3704:	20004e20 	.word	0x20004e20
    3708:	20006668 	.word	0x20006668

0000370c <copyPosValues(Mode*, Mode*)>:
    destination->pos[i] = source->pos[i];
    370c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    370e:	62cb      	str	r3, [r1, #44]	; 0x2c
    3710:	6b03      	ldr	r3, [r0, #48]	; 0x30
    3712:	630b      	str	r3, [r1, #48]	; 0x30
    3714:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3716:	634b      	str	r3, [r1, #52]	; 0x34
}
    3718:	4770      	bx	lr
	...

0000371c <shiftNotes()>:
void shiftNotes() {
    371c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned int patternLength = lastPage * maxX;
    3720:	4b84      	ldr	r3, [pc, #528]	; (3934 <shiftNotes()+0x218>)
    3722:	f8d3 b000 	ldr.w	fp, [r3]
    3726:	ea4f 140b 	mov.w	r4, fp, lsl #4
  if (currentMode->pos[2] != SMP.shiftX) {
    372a:	4b83      	ldr	r3, [pc, #524]	; (3938 <shiftNotes()+0x21c>)
    372c:	6819      	ldr	r1, [r3, #0]
    372e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    3730:	4b82      	ldr	r3, [pc, #520]	; (393c <shiftNotes()+0x220>)
    3732:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    3736:	429a      	cmp	r2, r3
    3738:	d053      	beq.n	37e2 <shiftNotes()+0xc6>
      shiftDirectionX = -1;
    373a:	429a      	cmp	r2, r3
    373c:	bf8c      	ite	hi
    373e:	f04f 0e01 	movhi.w	lr, #1
    3742:	f04f 3eff 	movls.w	lr, #4294967295	; 0xffffffff
    SMP.shiftX = 8;
    3746:	2308      	movs	r3, #8
    3748:	4a7c      	ldr	r2, [pc, #496]	; (393c <shiftNotes()+0x220>)
    374a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
		noInterrupts();
    374e:	b672      	cpsid	i
		encoder.position = p;
    3750:	4a7b      	ldr	r2, [pc, #492]	; (3940 <shiftNotes()+0x224>)
    3752:	2120      	movs	r1, #32
    3754:	64d1      	str	r1, [r2, #76]	; 0x4c
		interrupts();
    3756:	b662      	cpsie	i
    currentMode->pos[2] = 8;
    3758:	4a77      	ldr	r2, [pc, #476]	; (3938 <shiftNotes()+0x21c>)
    375a:	6817      	ldr	r7, [r2, #0]
    375c:	637b      	str	r3, [r7, #52]	; 0x34
    for (unsigned int nx = 1; nx <= patternLength; nx++) {  // Start from 1
    375e:	2c00      	cmp	r4, #0
    3760:	f000 80a0 	beq.w	38a4 <shiftNotes()+0x188>
    3764:	4a77      	ldr	r2, [pc, #476]	; (3944 <shiftNotes()+0x228>)
    3766:	eb0b 160b 	add.w	r6, fp, fp, lsl #4
    376a:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
        tmp[nx][ny][0] = 0;
    376e:	2000      	movs	r0, #0
        tmp[nx][ny][1] = defaultVelocity;
    3770:	213f      	movs	r1, #63	; 0x3f
      for (unsigned int ny = 1; ny <= maxY; ny++) {         // Start from 1
    3772:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
        tmp[nx][ny][0] = 0;
    3776:	6098      	str	r0, [r3, #8]
        tmp[nx][ny][1] = defaultVelocity;
    3778:	60d9      	str	r1, [r3, #12]
      for (unsigned int ny = 1; ny <= maxY; ny++) {         // Start from 1
    377a:	3308      	adds	r3, #8
    377c:	4293      	cmp	r3, r2
    377e:	d1fa      	bne.n	3776 <shiftNotes()+0x5a>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {  // Start from 1
    3780:	3288      	adds	r2, #136	; 0x88
    3782:	42b2      	cmp	r2, r6
    3784:	d1f5      	bne.n	3772 <shiftNotes()+0x56>
        if (note[nx][ny][0] == SMP.currentChannel) {
    3786:	4b6d      	ldr	r3, [pc, #436]	; (393c <shiftNotes()+0x220>)
    3788:	6858      	ldr	r0, [r3, #4]
    378a:	4e6f      	ldr	r6, [pc, #444]	; (3948 <shiftNotes()+0x22c>)
    378c:	f10e 0c01 	add.w	ip, lr, #1
    3790:	f104 0801 	add.w	r8, r4, #1
    3794:	44f0      	add	r8, lr
          tmp[newposX][ny][0] = SMP.currentChannel;
    3796:	f8df e1bc 	ldr.w	lr, [pc, #444]	; 3954 <shiftNotes()+0x238>
    379a:	e01f      	b.n	37dc <shiftNotes()+0xc0>
            newposX = patternLength;
    379c:	4622      	mov	r2, r4
          tmp[newposX][ny][0] = SMP.currentChannel;
    379e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    37a2:	440a      	add	r2, r1
    37a4:	f84e 0032 	str.w	r0, [lr, r2, lsl #3]
          tmp[newposX][ny][1] = note[nx][ny][1];
    37a8:	eb0e 02c2 	add.w	r2, lr, r2, lsl #3
    37ac:	f8d9 500c 	ldr.w	r5, [r9, #12]
    37b0:	6055      	str	r5, [r2, #4]
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    37b2:	3101      	adds	r1, #1
    37b4:	3308      	adds	r3, #8
    37b6:	2911      	cmp	r1, #17
    37b8:	d00b      	beq.n	37d2 <shiftNotes()+0xb6>
        if (note[nx][ny][0] == SMP.currentChannel) {
    37ba:	4699      	mov	r9, r3
    37bc:	689a      	ldr	r2, [r3, #8]
    37be:	4282      	cmp	r2, r0
    37c0:	d1f7      	bne.n	37b2 <shiftNotes()+0x96>
          int newposX = nx + shiftDirectionX;
    37c2:	4662      	mov	r2, ip
          if (newposX < 1) {
    37c4:	f1bc 0f00 	cmp.w	ip, #0
    37c8:	dde8      	ble.n	379c <shiftNotes()+0x80>
            newposX = 1;
    37ca:	4564      	cmp	r4, ip
    37cc:	bf38      	it	cc
    37ce:	2201      	movcc	r2, #1
    37d0:	e7e5      	b.n	379e <shiftNotes()+0x82>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {
    37d2:	3688      	adds	r6, #136	; 0x88
    37d4:	f10c 0c01 	add.w	ip, ip, #1
    37d8:	45c4      	cmp	ip, r8
    37da:	d071      	beq.n	38c0 <shiftNotes()+0x1a4>
      shiftDirectionX = -1;
    37dc:	4633      	mov	r3, r6
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    37de:	2101      	movs	r1, #1
    37e0:	e7eb      	b.n	37ba <shiftNotes()+0x9e>
  if (currentMode->pos[0] != SMP.shiftY) {
    37e2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    37e4:	4a55      	ldr	r2, [pc, #340]	; (393c <shiftNotes()+0x220>)
    37e6:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
    37ea:	4293      	cmp	r3, r2
    37ec:	d171      	bne.n	38d2 <shiftNotes()+0x1b6>
  if (shifted) {
    37ee:	4b57      	ldr	r3, [pc, #348]	; (394c <shiftNotes()+0x230>)
    37f0:	781b      	ldrb	r3, [r3, #0]
    37f2:	2b00      	cmp	r3, #0
    37f4:	d062      	beq.n	38bc <shiftNotes()+0x1a0>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {
    37f6:	2c00      	cmp	r4, #0
    37f8:	d05d      	beq.n	38b6 <shiftNotes()+0x19a>
        if (original[nx][ny][0] != SMP.currentChannel) {
    37fa:	4b50      	ldr	r3, [pc, #320]	; (393c <shiftNotes()+0x220>)
    37fc:	685c      	ldr	r4, [r3, #4]
    37fe:	4e54      	ldr	r6, [pc, #336]	; (3950 <shiftNotes()+0x234>)
    3800:	f8df e144 	ldr.w	lr, [pc, #324]	; 3948 <shiftNotes()+0x22c>
    3804:	f8df c150 	ldr.w	ip, [pc, #336]	; 3958 <shiftNotes()+0x23c>
    3808:	eb0b 150b 	add.w	r5, fp, fp, lsl #4
    380c:	eb06 18c5 	add.w	r8, r6, r5, lsl #7
          note[nx][ny][0] = 0;
    3810:	2700      	movs	r7, #0
    3812:	253f      	movs	r5, #63	; 0x3f
    3814:	e041      	b.n	389a <shiftNotes()+0x17e>
            newposY = maxY;
    3816:	2110      	movs	r1, #16
          tmp[nx][newposY][0] = SMP.currentChannel;
    3818:	4461      	add	r1, ip
    381a:	f847 0031 	str.w	r0, [r7, r1, lsl #3]
          tmp[nx][newposY][1] = note[nx][ny][1];
    381e:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
    3822:	f8da 500c 	ldr.w	r5, [sl, #12]
    3826:	604d      	str	r5, [r1, #4]
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    3828:	3308      	adds	r3, #8
    382a:	3201      	adds	r2, #1
    382c:	42b2      	cmp	r2, r6
    382e:	d00b      	beq.n	3848 <shiftNotes()+0x12c>
        if (note[nx][ny][0] == SMP.currentChannel) {
    3830:	469a      	mov	sl, r3
    3832:	6899      	ldr	r1, [r3, #8]
    3834:	4281      	cmp	r1, r0
    3836:	d1f7      	bne.n	3828 <shiftNotes()+0x10c>
          int newposY = ny + shiftDirectionY;
    3838:	4611      	mov	r1, r2
          if (newposY < 1) {
    383a:	2a00      	cmp	r2, #0
    383c:	ddeb      	ble.n	3816 <shiftNotes()+0xfa>
            newposY = 1;
    383e:	2a11      	cmp	r2, #17
    3840:	bf34      	ite	cc
    3842:	4611      	movcc	r1, r2
    3844:	2101      	movcs	r1, #1
    3846:	e7e7      	b.n	3818 <shiftNotes()+0xfc>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {
    3848:	f10e 0301 	add.w	r3, lr, #1
    384c:	f109 0988 	add.w	r9, r9, #136	; 0x88
    3850:	4574      	cmp	r4, lr
    3852:	d0d0      	beq.n	37f6 <shiftNotes()+0xda>
    3854:	469e      	mov	lr, r3
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    3856:	f108 0201 	add.w	r2, r8, #1
      shiftDirectionY = +1;
    385a:	464b      	mov	r3, r9
          tmp[nx][newposY][0] = SMP.currentChannel;
    385c:	eb0e 1c0e 	add.w	ip, lr, lr, lsl #4
    3860:	e7e6      	b.n	3830 <shiftNotes()+0x114>
          note[nx][ny][0] = 0;
    3862:	609f      	str	r7, [r3, #8]
    3864:	4628      	mov	r0, r5
          note[nx][ny][1] = original[nx][ny][1];
    3866:	60d8      	str	r0, [r3, #12]
        if (tmp[nx][ny][0] == SMP.currentChannel) {
    3868:	6888      	ldr	r0, [r1, #8]
    386a:	4284      	cmp	r4, r0
    386c:	d00a      	beq.n	3884 <shiftNotes()+0x168>
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    386e:	3208      	adds	r2, #8
    3870:	3308      	adds	r3, #8
    3872:	3108      	adds	r1, #8
    3874:	42b2      	cmp	r2, r6
    3876:	d009      	beq.n	388c <shiftNotes()+0x170>
        if (original[nx][ny][0] != SMP.currentChannel) {
    3878:	6890      	ldr	r0, [r2, #8]
    387a:	42a0      	cmp	r0, r4
    387c:	d0f1      	beq.n	3862 <shiftNotes()+0x146>
          note[nx][ny][0] = original[nx][ny][0];
    387e:	6098      	str	r0, [r3, #8]
          note[nx][ny][1] = original[nx][ny][1];
    3880:	68d0      	ldr	r0, [r2, #12]
    3882:	e7f0      	b.n	3866 <shiftNotes()+0x14a>
          note[nx][ny][0] = tmp[nx][ny][0];
    3884:	6098      	str	r0, [r3, #8]
          note[nx][ny][1] = tmp[nx][ny][1];
    3886:	68c8      	ldr	r0, [r1, #12]
    3888:	60d8      	str	r0, [r3, #12]
    388a:	e7f0      	b.n	386e <shiftNotes()+0x152>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {
    388c:	3688      	adds	r6, #136	; 0x88
    388e:	f10e 0e88 	add.w	lr, lr, #136	; 0x88
    3892:	f10c 0c88 	add.w	ip, ip, #136	; 0x88
    3896:	4546      	cmp	r6, r8
    3898:	d00d      	beq.n	38b6 <shiftNotes()+0x19a>
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    389a:	f1a6 0280 	sub.w	r2, r6, #128	; 0x80
    for (unsigned int nx = 1; nx <= patternLength; nx++) {
    389e:	4661      	mov	r1, ip
    38a0:	4673      	mov	r3, lr
    38a2:	e7e9      	b.n	3878 <shiftNotes()+0x15c>
    shifted = true;
    38a4:	4b29      	ldr	r3, [pc, #164]	; (394c <shiftNotes()+0x230>)
    38a6:	2201      	movs	r2, #1
    38a8:	701a      	strb	r2, [r3, #0]
  if (currentMode->pos[0] != SMP.shiftY) {
    38aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38ac:	4a23      	ldr	r2, [pc, #140]	; (393c <shiftNotes()+0x220>)
    38ae:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
    38b2:	4293      	cmp	r3, r2
    38b4:	d10d      	bne.n	38d2 <shiftNotes()+0x1b6>
    shifted = false;
    38b6:	4b25      	ldr	r3, [pc, #148]	; (394c <shiftNotes()+0x230>)
    38b8:	2200      	movs	r2, #0
    38ba:	701a      	strb	r2, [r3, #0]
}
    38bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    shifted = true;
    38c0:	4b22      	ldr	r3, [pc, #136]	; (394c <shiftNotes()+0x230>)
    38c2:	2201      	movs	r2, #1
    38c4:	701a      	strb	r2, [r3, #0]
  if (currentMode->pos[0] != SMP.shiftY) {
    38c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    38c8:	4a1c      	ldr	r2, [pc, #112]	; (393c <shiftNotes()+0x220>)
    38ca:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
    38ce:	4293      	cmp	r3, r2
    38d0:	d093      	beq.n	37fa <shiftNotes()+0xde>
      shiftDirectionY = +1;
    38d2:	4293      	cmp	r3, r2
    38d4:	bf8c      	ite	hi
    38d6:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
    38da:	f04f 0801 	movls.w	r8, #1
		noInterrupts();
    38de:	b672      	cpsid	i
		encoder.position = p;
    38e0:	4b17      	ldr	r3, [pc, #92]	; (3940 <shiftNotes()+0x224>)
    38e2:	2220      	movs	r2, #32
    38e4:	615a      	str	r2, [r3, #20]
		interrupts();
    38e6:	b662      	cpsie	i
    currentMode->pos[0] = 8;
    38e8:	4b13      	ldr	r3, [pc, #76]	; (3938 <shiftNotes()+0x21c>)
    38ea:	681a      	ldr	r2, [r3, #0]
    38ec:	2308      	movs	r3, #8
    38ee:	62d3      	str	r3, [r2, #44]	; 0x2c
    SMP.shiftY = 8;
    38f0:	4a12      	ldr	r2, [pc, #72]	; (393c <shiftNotes()+0x220>)
    38f2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
    for (unsigned int nx = 1; nx <= patternLength; nx++) {  // Start from 1
    38f6:	2c00      	cmp	r4, #0
    38f8:	f43f af7d 	beq.w	37f6 <shiftNotes()+0xda>
    38fc:	4a11      	ldr	r2, [pc, #68]	; (3944 <shiftNotes()+0x228>)
    38fe:	eb0b 160b 	add.w	r6, fp, fp, lsl #4
    3902:	eb02 16c6 	add.w	r6, r2, r6, lsl #7
        tmp[nx][ny][0] = 0;
    3906:	2000      	movs	r0, #0
        tmp[nx][ny][1] = defaultVelocity;
    3908:	213f      	movs	r1, #63	; 0x3f
      for (unsigned int ny = 1; ny <= maxY; ny++) {         // Start from 1
    390a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
        tmp[nx][ny][0] = 0;
    390e:	6098      	str	r0, [r3, #8]
        tmp[nx][ny][1] = defaultVelocity;
    3910:	60d9      	str	r1, [r3, #12]
      for (unsigned int ny = 1; ny <= maxY; ny++) {         // Start from 1
    3912:	3308      	adds	r3, #8
    3914:	4293      	cmp	r3, r2
    3916:	d1fa      	bne.n	390e <shiftNotes()+0x1f2>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {  // Start from 1
    3918:	3288      	adds	r2, #136	; 0x88
    391a:	42b2      	cmp	r2, r6
    391c:	d1f5      	bne.n	390a <shiftNotes()+0x1ee>
        if (note[nx][ny][0] == SMP.currentChannel) {
    391e:	4b07      	ldr	r3, [pc, #28]	; (393c <shiftNotes()+0x220>)
    3920:	6858      	ldr	r0, [r3, #4]
    3922:	f8df 9024 	ldr.w	r9, [pc, #36]	; 3948 <shiftNotes()+0x22c>
    3926:	f04f 0e01 	mov.w	lr, #1
    392a:	f108 0611 	add.w	r6, r8, #17
          tmp[nx][newposY][0] = SMP.currentChannel;
    392e:	4f09      	ldr	r7, [pc, #36]	; (3954 <shiftNotes()+0x238>)
    3930:	e791      	b.n	3856 <shiftNotes()+0x13a>
    3932:	bf00      	nop
    3934:	20005a80 	.word	0x20005a80
    3938:	200057ec 	.word	0x200057ec
    393c:	70000000 	.word	0x70000000
    3940:	20007374 	.word	0x20007374
    3944:	70dbc1f0 	.word	0x70dbc1f0
    3948:	70db3860 	.word	0x70db3860
    394c:	20008c35 	.word	0x20008c35
    3950:	70db7d68 	.word	0x70db7d68
    3954:	70dbc0e8 	.word	0x70dbc0e8
    3958:	70dbc170 	.word	0x70dbc170

0000395c <tmpMuteAll(bool)>:
void tmpMuteAll(bool pressed) {
    395c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3960:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    3962:	4c24      	ldr	r4, [pc, #144]	; (39f4 <tmpMuteAll(bool)+0x98>)
    3964:	6823      	ldr	r3, [r4, #0]
    3966:	685b      	ldr	r3, [r3, #4]
    3968:	220a      	movs	r2, #10
    396a:	4923      	ldr	r1, [pc, #140]	; (39f8 <tmpMuteAll(bool)+0x9c>)
    396c:	4620      	mov	r0, r4
    396e:	4798      	blx	r3
	size_t print(int n)				{ return print((long)n); }
    3970:	4629      	mov	r1, r5
    3972:	4620      	mov	r0, r4
    3974:	f012 fc95 	bl	162a2 <Print::print(long)>
							  return write((const uint8_t *)str, strlen(str)); }
    3978:	6823      	ldr	r3, [r4, #0]
    397a:	685b      	ldr	r3, [r3, #4]
    397c:	220a      	movs	r2, #10
    397e:	491f      	ldr	r1, [pc, #124]	; (39fc <tmpMuteAll(bool)+0xa0>)
    3980:	4620      	mov	r0, r4
    3982:	4798      	blx	r3
  if (pressed > 0) {
    3984:	b1dd      	cbz	r5, 39be <tmpMuteAll(bool)+0x62>
    for (unsigned int i = 1; i < maxFiles + 1; i++) {
    3986:	2401      	movs	r4, #1
      if (i != SMP.y - 1) {
    3988:	4d1d      	ldr	r5, [pc, #116]	; (3a00 <tmpMuteAll(bool)+0xa4>)
    398a:	4f1e      	ldr	r7, [pc, #120]	; (3a04 <tmpMuteAll(bool)+0xa8>)
    398c:	4e19      	ldr	r6, [pc, #100]	; (39f4 <tmpMuteAll(bool)+0x98>)
    398e:	e002      	b.n	3996 <tmpMuteAll(bool)+0x3a>
    for (unsigned int i = 1; i < maxFiles + 1; i++) {
    3990:	3401      	adds	r4, #1
    3992:	2c0a      	cmp	r4, #10
    3994:	d02b      	beq.n	39ee <tmpMuteAll(bool)+0x92>
      if (i != SMP.y - 1) {
    3996:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    399a:	3b01      	subs	r3, #1
    399c:	42a3      	cmp	r3, r4
    399e:	d0f7      	beq.n	3990 <tmpMuteAll(bool)+0x34>
        SMP.mute[i] = true;
    39a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    39a4:	2201      	movs	r2, #1
    39a6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    39aa:	6833      	ldr	r3, [r6, #0]
    39ac:	685b      	ldr	r3, [r3, #4]
    39ae:	222d      	movs	r2, #45	; 0x2d
    39b0:	4639      	mov	r1, r7
    39b2:	4630      	mov	r0, r6
    39b4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    39b6:	4630      	mov	r0, r6
    39b8:	f012 fc05 	bl	161c6 <Print::println()>
    39bc:	e7e8      	b.n	3990 <tmpMuteAll(bool)+0x34>
    tmpMute = false;
    39be:	4b12      	ldr	r3, [pc, #72]	; (3a08 <tmpMuteAll(bool)+0xac>)
    39c0:	2200      	movs	r2, #0
    39c2:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 1; i < maxFiles + 1; i++) {
    39c4:	4e0e      	ldr	r6, [pc, #56]	; (3a00 <tmpMuteAll(bool)+0xa4>)
    39c6:	f506 7582 	add.w	r5, r6, #260	; 0x104
    39ca:	f506 7694 	add.w	r6, r6, #296	; 0x128
      SMP.mute[i] = false;
    39ce:	4690      	mov	r8, r2
							  return write((const uint8_t *)str, strlen(str)); }
    39d0:	4f0e      	ldr	r7, [pc, #56]	; (3a0c <tmpMuteAll(bool)+0xb0>)
    39d2:	4c08      	ldr	r4, [pc, #32]	; (39f4 <tmpMuteAll(bool)+0x98>)
    39d4:	f845 8f04 	str.w	r8, [r5, #4]!
    39d8:	6823      	ldr	r3, [r4, #0]
    39da:	685b      	ldr	r3, [r3, #4]
    39dc:	222f      	movs	r2, #47	; 0x2f
    39de:	4639      	mov	r1, r7
    39e0:	4620      	mov	r0, r4
    39e2:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    39e4:	4620      	mov	r0, r4
    39e6:	f012 fbee 	bl	161c6 <Print::println()>
    for (unsigned int i = 1; i < maxFiles + 1; i++) {
    39ea:	42b5      	cmp	r5, r6
    39ec:	d1f2      	bne.n	39d4 <tmpMuteAll(bool)+0x78>
}
    39ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    39f2:	bf00      	nop
    39f4:	20004e74 	.word	0x20004e74
    39f8:	200009ec 	.word	0x200009ec
    39fc:	200009f8 	.word	0x200009f8
    3a00:	70000000 	.word	0x70000000
    3a04:	20000a04 	.word	0x20000a04
    3a08:	20008c37 	.word	0x20008c37
    3a0c:	20000a34 	.word	0x20000a34

00003a10 <toggleMute()>:
void toggleMute() {
    3a10:	b510      	push	{r4, lr}
  if (SMP.mute[SMP.y - 1]) {
    3a12:	4b16      	ldr	r3, [pc, #88]	; (3a6c <toggleMute()+0x5c>)
    3a14:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    3a18:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a1c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3a20:	b193      	cbz	r3, 3a48 <toggleMute()+0x38>
							  return write((const uint8_t *)str, strlen(str)); }
    3a22:	4c13      	ldr	r4, [pc, #76]	; (3a70 <toggleMute()+0x60>)
    3a24:	6823      	ldr	r3, [r4, #0]
    3a26:	685b      	ldr	r3, [r3, #4]
    3a28:	221d      	movs	r2, #29
    3a2a:	4912      	ldr	r1, [pc, #72]	; (3a74 <toggleMute()+0x64>)
    3a2c:	4620      	mov	r0, r4
    3a2e:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    3a30:	4620      	mov	r0, r4
    3a32:	f012 fbc8 	bl	161c6 <Print::println()>
    SMP.mute[SMP.y - 1] = false;
    3a36:	4b0d      	ldr	r3, [pc, #52]	; (3a6c <toggleMute()+0x5c>)
    3a38:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    3a3c:	323f      	adds	r2, #63	; 0x3f
    3a3e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3a42:	2200      	movs	r2, #0
    3a44:	605a      	str	r2, [r3, #4]
}
    3a46:	bd10      	pop	{r4, pc}
    3a48:	1e51      	subs	r1, r2, #1
    SMP.mute[SMP.y - 1] = true;
    3a4a:	4b08      	ldr	r3, [pc, #32]	; (3a6c <toggleMute()+0x5c>)
    3a4c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3a50:	2201      	movs	r2, #1
    3a52:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
							  return write((const uint8_t *)str, strlen(str)); }
    3a56:	4c06      	ldr	r4, [pc, #24]	; (3a70 <toggleMute()+0x60>)
    3a58:	6823      	ldr	r3, [r4, #0]
    3a5a:	685b      	ldr	r3, [r3, #4]
    3a5c:	221c      	movs	r2, #28
    3a5e:	4906      	ldr	r1, [pc, #24]	; (3a78 <toggleMute()+0x68>)
    3a60:	4620      	mov	r0, r4
    3a62:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    3a64:	4620      	mov	r0, r4
    3a66:	f012 fbae 	bl	161c6 <Print::println()>
}
    3a6a:	e7ec      	b.n	3a46 <toggleMute()+0x36>
    3a6c:	70000000 	.word	0x70000000
    3a70:	20004e74 	.word	0x20004e74
    3a74:	20000a64 	.word	0x20000a64
    3a78:	20000a84 	.word	0x20000a84

00003a7c <light(unsigned int, unsigned int, CRGB)>:
void light(unsigned int x, unsigned int y, CRGB color) {
    3a7c:	b082      	sub	sp, #8
    3a7e:	9201      	str	r2, [sp, #4]
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    3a80:	1e4b      	subs	r3, r1, #1
    3a82:	2b0f      	cmp	r3, #15
    3a84:	d814      	bhi.n	3ab0 <light(unsigned int, unsigned int, CRGB)+0x34>
    3a86:	1e42      	subs	r2, r0, #1
    3a88:	2a0f      	cmp	r2, #15
    3a8a:	d811      	bhi.n	3ab0 <light(unsigned int, unsigned int, CRGB)+0x34>
    if (y % 2 == 0) {
    3a8c:	f011 0f01 	tst.w	r1, #1
    3a90:	d110      	bne.n	3ab4 <light(unsigned int, unsigned int, CRGB)+0x38>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    3a92:	4a0f      	ldr	r2, [pc, #60]	; (3ad0 <light(unsigned int, unsigned int, CRGB)+0x54>)
    3a94:	f1c0 0010 	rsb	r0, r0, #16
    3a98:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    3a9c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3aa0:	1813      	adds	r3, r2, r0
    3aa2:	f8bd c004 	ldrh.w	ip, [sp, #4]
    3aa6:	f89d 1006 	ldrb.w	r1, [sp, #6]
    3aaa:	f822 c000 	strh.w	ip, [r2, r0]
    3aae:	7099      	strb	r1, [r3, #2]
}
    3ab0:	b002      	add	sp, #8
    3ab2:	4770      	bx	lr
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3ab4:	4906      	ldr	r1, [pc, #24]	; (3ad0 <light(unsigned int, unsigned int, CRGB)+0x54>)
    3ab6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3aba:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3abe:	188b      	adds	r3, r1, r2
    3ac0:	f8bd c004 	ldrh.w	ip, [sp, #4]
    3ac4:	f89d 0006 	ldrb.w	r0, [sp, #6]
    3ac8:	f821 c002 	strh.w	ip, [r1, r2]
    3acc:	7098      	strb	r0, [r3, #2]
    3ace:	e7ef      	b.n	3ab0 <light(unsigned int, unsigned int, CRGB)+0x34>
    3ad0:	20007b30 	.word	0x20007b30

00003ad4 <handleNoteOn(unsigned char, unsigned char, unsigned char)>:
void handleNoteOn(uint8_t channel, uint8_t pitch, uint8_t velocity) {
    3ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ad8:	b089      	sub	sp, #36	; 0x24
    3ada:	4615      	mov	r5, r2
  if (SMP.y - 1 < 1 || SMP.y - 1 > maxFiles) return;
    3adc:	4b5d      	ldr	r3, [pc, #372]	; (3c54 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x180>)
    3ade:	f8d3 70b0 	ldr.w	r7, [r3, #176]	; 0xb0
    3ae2:	1eba      	subs	r2, r7, #2
    3ae4:	2a08      	cmp	r2, #8
    3ae6:	d902      	bls.n	3aee <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x1a>
}
    3ae8:	b009      	add	sp, #36	; 0x24
    3aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3aee:	460c      	mov	r4, r1
  unsigned int livenote = SMP.y + pitch - 60;  // set Base to C3
    3af0:	440f      	add	r7, r1
    3af2:	f1a7 063c 	sub.w	r6, r7, #60	; 0x3c
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
    3af6:	f8df 8178 	ldr.w	r8, [pc, #376]	; 3c70 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x19c>
    3afa:	2300      	movs	r3, #0
    3afc:	220a      	movs	r2, #10
    3afe:	4631      	mov	r1, r6
    3b00:	4640      	mov	r0, r8
    3b02:	f012 fb89 	bl	16218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
    3b06:	4640      	mov	r0, r8
    3b08:	f012 fb5d 	bl	161c6 <Print::println()>
  if (livenote > 16) livenote -= 12;
    3b0c:	2e10      	cmp	r6, #16
    3b0e:	bf88      	it	hi
    3b10:	f1a7 0648 	subhi.w	r6, r7, #72	; 0x48
  if (livenote < 1) livenote += 12;
    3b14:	b11e      	cbz	r6, 3b1e <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x4a>
  if (livenote >= 1 && livenote <= 16) {
    3b16:	1e73      	subs	r3, r6, #1
    3b18:	2b0f      	cmp	r3, #15
    3b1a:	d8e5      	bhi.n	3ae8 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x14>
    3b1c:	e000      	b.n	3b20 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x4c>
  if (livenote < 1) livenote += 12;
    3b1e:	260c      	movs	r6, #12
    light(SMP.x, livenote, CRGB(0, 0, 255));
    3b20:	f8df 8130 	ldr.w	r8, [pc, #304]	; 3c54 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x180>
    /// Allow construction from red, green, and blue
    /// @param ir input red value
    /// @param ig input green value
    /// @param ib input blue value
    constexpr CRGB(uint8_t ir, uint8_t ig, uint8_t ib) noexcept
        : r(ir), g(ig), b(ib)
    3b24:	2700      	movs	r7, #0
    3b26:	f88d 701c 	strb.w	r7, [sp, #28]
    3b2a:	f88d 701d 	strb.w	r7, [sp, #29]
    3b2e:	23ff      	movs	r3, #255	; 0xff
    3b30:	f88d 301e 	strb.w	r3, [sp, #30]
    3b34:	9a07      	ldr	r2, [sp, #28]
    3b36:	4631      	mov	r1, r6
    3b38:	f8d8 00ac 	ldr.w	r0, [r8, #172]	; 0xac
    3b3c:	f7ff ff9e 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    FastLEDshow();
    3b40:	f7ff fdc8 	bl	36d4 <FastLEDshow()>
    Serial.println(SMP.y - 1);
    3b44:	f8d8 10b0 	ldr.w	r1, [r8, #176]	; 0xb0
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
    3b48:	f8df 9124 	ldr.w	r9, [pc, #292]	; 3c70 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x19c>
    3b4c:	463b      	mov	r3, r7
    3b4e:	220a      	movs	r2, #10
    3b50:	3901      	subs	r1, #1
    3b52:	4648      	mov	r0, r9
    3b54:	f012 fb60 	bl	16218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
    3b58:	4648      	mov	r0, r9
    3b5a:	f012 fb34 	bl	161c6 <Print::println()>
    _samplers[SMP.y - 1].noteEvent(((SampleRate[SMP.y - 1] * 12) + pitch - 60), velocity * 8, true, false);
    3b5e:	f8d8 70b0 	ldr.w	r7, [r8, #176]	; 0xb0
    3b62:	3f01      	subs	r7, #1
    3b64:	eb08 0887 	add.w	r8, r8, r7, lsl #2
    3b68:	f8d8 316c 	ldr.w	r3, [r8, #364]	; 0x16c
    3b6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3b70:	3c3c      	subs	r4, #60	; 0x3c
    3b72:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    3b76:	b2e1      	uxtb	r1, r4
    3b78:	9103      	str	r1, [sp, #12]
    3b7a:	00ea      	lsls	r2, r5, #3
        if (isNoteOn && velocity > 0)
    3b7c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    3b80:	d020      	beq.n	3bc4 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0xf0>
            _polysampler.noteOn(noteNumber, velocity);
    3b82:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    3b86:	4834      	ldr	r0, [pc, #208]	; (3c58 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x184>)
    3b88:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3b8c:	f7ff fab8 	bl	3100 <polyphonicsampler::noteOn(unsigned char, unsigned char)>
    if (isPlaying) {
    3b90:	4b32      	ldr	r3, [pc, #200]	; (3c5c <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x188>)
    3b92:	781b      	ldrb	r3, [r3, #0]
    3b94:	2b00      	cmp	r3, #0
    3b96:	d0a7      	beq.n	3ae8 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x14>
      if (!SMP.mute[SMP.y - 1]) {
    3b98:	4b2e      	ldr	r3, [pc, #184]	; (3c54 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x180>)
    3b9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
    3b9e:	1e51      	subs	r1, r2, #1
    3ba0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3ba4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    3ba8:	2b00      	cmp	r3, #0
    3baa:	d19d      	bne.n	3ae8 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x14>
        note[beat][livenote][0] = SMP.y - 1;
    3bac:	4b2c      	ldr	r3, [pc, #176]	; (3c60 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x18c>)
    3bae:	681b      	ldr	r3, [r3, #0]
    3bb0:	4a2c      	ldr	r2, [pc, #176]	; (3c64 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x190>)
    3bb2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    3bb6:	4433      	add	r3, r6
    3bb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        note[beat][livenote][1] = velocity;
    3bbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    3bc0:	6055      	str	r5, [r2, #4]
    3bc2:	e791      	b.n	3ae8 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x14>
        uint8_t index = activeNotes[noteNumber];
    3bc4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
    3bc8:	4b27      	ldr	r3, [pc, #156]	; (3c68 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x194>)
    3bca:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    3bce:	9a03      	ldr	r2, [sp, #12]
    3bd0:	4413      	add	r3, r2
    3bd2:	f893 8020 	ldrb.w	r8, [r3, #32]
        if (index == 255) {
    3bd6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    3bda:	d0d9      	beq.n	3b90 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0xbc>
            _polysampler.noteOff(noteNumber);
    3bdc:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    3be0:	481d      	ldr	r0, [pc, #116]	; (3c58 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x184>)
    3be2:	eb00 1083 	add.w	r0, r0, r3, lsl #6
        _noteEventFunction(index, noteNumber, 0, false, false);
    3be6:	f88d 8017 	strb.w	r8, [sp, #23]
    3bea:	f88d 2018 	strb.w	r2, [sp, #24]
    3bee:	2300      	movs	r3, #0
    3bf0:	f88d 3019 	strb.w	r3, [sp, #25]
    3bf4:	f88d 301a 	strb.w	r3, [sp, #26]
    3bf8:	f88d 301b 	strb.w	r3, [sp, #27]
	if (_M_empty())
    3bfc:	6883      	ldr	r3, [r0, #8]
    3bfe:	b33b      	cbz	r3, 3c50 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x17c>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    3c00:	f8df a064 	ldr.w	sl, [pc, #100]	; 3c68 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x194>
    3c04:	ea4f 0b87 	mov.w	fp, r7, lsl #2
    3c08:	eb07 0987 	add.w	r9, r7, r7, lsl #2
    3c0c:	eb0a 1989 	add.w	r9, sl, r9, lsl #6
    3c10:	f10d 031b 	add.w	r3, sp, #27
    3c14:	9301      	str	r3, [sp, #4]
    3c16:	f10d 031a 	add.w	r3, sp, #26
    3c1a:	9300      	str	r3, [sp, #0]
    3c1c:	f10d 0319 	add.w	r3, sp, #25
    3c20:	aa06      	add	r2, sp, #24
    3c22:	f10d 0117 	add.w	r1, sp, #23
    3c26:	f8d9 401c 	ldr.w	r4, [r9, #28]
    3c2a:	47a0      	blx	r4
        activeNotes[noteNumber] = 255;
    3c2c:	9c03      	ldr	r4, [sp, #12]
    3c2e:	444c      	add	r4, r9
    3c30:	23ff      	movs	r3, #255	; 0xff
    3c32:	f884 3020 	strb.w	r3, [r4, #32]
        activeVoices[index] = 255; // free the voice
    3c36:	44c1      	add	r9, r8
    3c38:	f889 30a0 	strb.w	r3, [r9, #160]	; 0xa0
    3c3c:	4b0b      	ldr	r3, [pc, #44]	; (3c6c <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x198>)
    3c3e:	681b      	ldr	r3, [r3, #0]
        voice_noteOff[index] = millis();
    3c40:	44bb      	add	fp, r7
    3c42:	eb08 180b 	add.w	r8, r8, fp, lsl #4
    3c46:	eb0a 0a88 	add.w	sl, sl, r8, lsl #2
    3c4a:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
    3c4e:	e79f      	b.n	3b90 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0xbc>
	  __throw_bad_function_call();
    3c50:	f015 fddc 	bl	1980c <std::__throw_bad_function_call()>
    3c54:	70000000 	.word	0x70000000
    3c58:	700001f0 	.word	0x700001f0
    3c5c:	20008c2b 	.word	0x20008c2b
    3c60:	200057e8 	.word	0x200057e8
    3c64:	70db37d8 	.word	0x70db37d8
    3c68:	700001e0 	.word	0x700001e0
    3c6c:	20008a6c 	.word	0x20008a6c
    3c70:	20004e74 	.word	0x20004e74

00003c74 <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)>:
int reverseMapEncoderValue(unsigned int encoderValue, unsigned int minValue, unsigned int maxValue) {
    3c74:	b410      	push	{r4}
  if (currentMode != &set_Wav && currentMode != &noteShift) {
    3c76:	4b06      	ldr	r3, [pc, #24]	; (3c90 <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)+0x1c>)
    3c78:	681b      	ldr	r3, [r3, #0]
    3c7a:	4c06      	ldr	r4, [pc, #24]	; (3c94 <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)+0x20>)
    3c7c:	42a3      	cmp	r3, r4
    3c7e:	d004      	beq.n	3c8a <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)+0x16>
    3c80:	4c05      	ldr	r4, [pc, #20]	; (3c98 <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)+0x24>)
    3c82:	42a3      	cmp	r3, r4
    3c84:	d001      	beq.n	3c8a <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)+0x16>
    return maxValue - (encoderValue - minValue);
    3c86:	1a09      	subs	r1, r1, r0
    3c88:	1888      	adds	r0, r1, r2
}
    3c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
    3c8e:	4770      	bx	lr
    3c90:	200057ec 	.word	0x200057ec
    3c94:	20005ac4 	.word	0x20005ac4
    3c98:	20005b4c 	.word	0x20005b4c

00003c9c <switchMode(Mode*)>:
void switchMode(Mode *newMode) {
    3c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ca0:	ed2d 8b02 	vpush	{d8}
    3ca4:	b096      	sub	sp, #88	; 0x58
    3ca6:	4604      	mov	r4, r0
  unpaintMode = false;
    3ca8:	2300      	movs	r3, #0
    3caa:	4a5c      	ldr	r2, [pc, #368]	; (3e1c <switchMode(Mode*)+0x180>)
    3cac:	7013      	strb	r3, [r2, #0]
  SMP.singleMode = false;
    3cae:	4a5c      	ldr	r2, [pc, #368]	; (3e20 <switchMode(Mode*)+0x184>)
    3cb0:	6013      	str	r3, [r2, #0]
  paintMode = false;
    3cb2:	4a5c      	ldr	r2, [pc, #368]	; (3e24 <switchMode(Mode*)+0x188>)
    3cb4:	7013      	strb	r3, [r2, #0]
  buttonString = "0000";
    3cb6:	495c      	ldr	r1, [pc, #368]	; (3e28 <switchMode(Mode*)+0x18c>)
    3cb8:	485c      	ldr	r0, [pc, #368]	; (3e2c <switchMode(Mode*)+0x190>)
    3cba:	f012 fd72 	bl	167a2 <String::operator=(char const*)>
  if (newMode != currentMode) {
    3cbe:	4b5c      	ldr	r3, [pc, #368]	; (3e30 <switchMode(Mode*)+0x194>)
    3cc0:	681b      	ldr	r3, [r3, #0]
    3cc2:	42a3      	cmp	r3, r4
    3cc4:	f000 80a5 	beq.w	3e12 <switchMode(Mode*)+0x176>
    currentMode = newMode;
    3cc8:	4d59      	ldr	r5, [pc, #356]	; (3e30 <switchMode(Mode*)+0x194>)
    3cca:	602c      	str	r4, [r5, #0]

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    3ccc:	4959      	ldr	r1, [pc, #356]	; (3e34 <switchMode(Mode*)+0x198>)
    3cce:	a804      	add	r0, sp, #16
    3cd0:	f012 fd41 	bl	16756 <String::String(char const*)>
    String savedpos = "" + String(currentMode->pos[0]) + " " + String(currentMode->pos[1]) + " " + String(currentMode->pos[2]);
    3cd4:	682b      	ldr	r3, [r5, #0]
    3cd6:	220a      	movs	r2, #10
    3cd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    3cda:	a807      	add	r0, sp, #28
    3cdc:	f012 fd84 	bl	167e8 <String::String(unsigned int, unsigned char)>
    3ce0:	a907      	add	r1, sp, #28
    3ce2:	a804      	add	r0, sp, #16
    3ce4:	f012 fddd 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    3ce8:	4e53      	ldr	r6, [pc, #332]	; (3e38 <switchMode(Mode*)+0x19c>)
    3cea:	4631      	mov	r1, r6
    3cec:	f012 fde1 	bl	168b2 <operator+(StringSumHelper const&, char const*)>
    3cf0:	4604      	mov	r4, r0
    3cf2:	682b      	ldr	r3, [r5, #0]
    3cf4:	220a      	movs	r2, #10
    3cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
    3cf8:	a80a      	add	r0, sp, #40	; 0x28
    3cfa:	f012 fd75 	bl	167e8 <String::String(unsigned int, unsigned char)>
    3cfe:	a90a      	add	r1, sp, #40	; 0x28
    3d00:	4620      	mov	r0, r4
    3d02:	f012 fdce 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    3d06:	4631      	mov	r1, r6
    3d08:	f012 fdd3 	bl	168b2 <operator+(StringSumHelper const&, char const*)>
    3d0c:	4604      	mov	r4, r0
    3d0e:	682b      	ldr	r3, [r5, #0]
    3d10:	220a      	movs	r2, #10
    3d12:	6b59      	ldr	r1, [r3, #52]	; 0x34
    3d14:	a80d      	add	r0, sp, #52	; 0x34
    3d16:	f012 fd67 	bl	167e8 <String::String(unsigned int, unsigned char)>
    3d1a:	a90d      	add	r1, sp, #52	; 0x34
    3d1c:	4620      	mov	r0, r4
    3d1e:	f012 fdc0 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    3d22:	4601      	mov	r1, r0
    3d24:	a801      	add	r0, sp, #4
    3d26:	f012 fd32 	bl	1678e <String::String(String const&)>
    3d2a:	a80d      	add	r0, sp, #52	; 0x34
    3d2c:	f012 fcca 	bl	166c4 <String::~String()>
    3d30:	a80a      	add	r0, sp, #40	; 0x28
    3d32:	f012 fcc7 	bl	166c4 <String::~String()>
    3d36:	a807      	add	r0, sp, #28
    3d38:	f012 fcc4 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    3d3c:	a804      	add	r0, sp, #16
    3d3e:	f012 fcc1 	bl	166c4 <String::~String()>
	StringSumHelper(const String &s) : String(s) {}
    3d42:	6829      	ldr	r1, [r5, #0]
    3d44:	a813      	add	r0, sp, #76	; 0x4c
    3d46:	f012 fd22 	bl	1678e <String::String(String const&)>
    serialprintln(currentMode->name + " > " + savedpos);
    3d4a:	493c      	ldr	r1, [pc, #240]	; (3e3c <switchMode(Mode*)+0x1a0>)
    3d4c:	a813      	add	r0, sp, #76	; 0x4c
    3d4e:	f012 fdb0 	bl	168b2 <operator+(StringSumHelper const&, char const*)>
    3d52:	a901      	add	r1, sp, #4
    3d54:	f012 fda5 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    3d58:	4601      	mov	r1, r0
class StringSumHelper : public String
    3d5a:	a810      	add	r0, sp, #64	; 0x40
    3d5c:	f012 fd17 	bl	1678e <String::String(String const&)>
    3d60:	a810      	add	r0, sp, #64	; 0x40
    3d62:	f012 fcaf 	bl	166c4 <String::~String()>
    3d66:	a813      	add	r0, sp, #76	; 0x4c
    3d68:	f012 fcac 	bl	166c4 <String::~String()>
    for (unsigned int i = 0; i < 4; i++) {  // Assuming 3 encoders
    3d6c:	4d34      	ldr	r5, [pc, #208]	; (3e40 <switchMode(Mode*)+0x1a4>)
    3d6e:	2400      	movs	r4, #0
      float newval = round(mapf(currentMode->pos[i], 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    3d70:	4e2f      	ldr	r6, [pc, #188]	; (3e30 <switchMode(Mode*)+0x194>)
    3d72:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
        newval = round(mapf(reverseMapEncoderValue(currentMode->pos[i], 1, maxY), 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    3d76:	2710      	movs	r7, #16
    3d78:	e009      	b.n	3d8e <switchMode(Mode*)+0xf2>
		noInterrupts();
    3d7a:	b672      	cpsid	i
      encoders[i].write(newval);
    3d7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    3d80:	ed85 0a05 	vstr	s0, [r5, #20]
		interrupts();
    3d84:	b662      	cpsie	i
    for (unsigned int i = 0; i < 4; i++) {  // Assuming 3 encoders
    3d86:	3401      	adds	r4, #1
    3d88:	351c      	adds	r5, #28
    3d8a:	2c04      	cmp	r4, #4
    3d8c:	d03e      	beq.n	3e0c <switchMode(Mode*)+0x170>
      float newval = round(mapf(currentMode->pos[i], 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    3d8e:	6833      	ldr	r3, [r6, #0]
    3d90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3d94:	69da      	ldr	r2, [r3, #28]
    3d96:	0091      	lsls	r1, r2, #2
    3d98:	ee04 1a10 	vmov	s8, r1
    3d9c:	ed93 0a0b 	vldr	s0, [r3, #44]	; 0x2c
    3da0:	eeb8 4b44 	vcvt.f64.u32	d4, s8
    3da4:	eeb0 3b48 	vmov.f64	d3, d8
    3da8:	ee07 2a90 	vmov	s15, r2
    3dac:	eeb8 2b67 	vcvt.f64.u32	d2, s15
    3db0:	eeb0 1b48 	vmov.f64	d1, d8
    3db4:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    3db8:	f007 fc86 	bl	b6c8 <mapf(double, double, double, double, double)>
    3dbc:	feb8 0b40 	vrinta.f64	d0, d0
    3dc0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
      if (i == 0) {  // reverse KnobDirection for Left Knob (up+down)
    3dc4:	2c00      	cmp	r4, #0
    3dc6:	d1d8      	bne.n	3d7a <switchMode(Mode*)+0xde>
        newval = round(mapf(reverseMapEncoderValue(currentMode->pos[i], 1, maxY), 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    3dc8:	f8d6 8000 	ldr.w	r8, [r6]
    3dcc:	463a      	mov	r2, r7
    3dce:	2101      	movs	r1, #1
    3dd0:	f8d8 002c 	ldr.w	r0, [r8, #44]	; 0x2c
    3dd4:	f7ff ff4e 	bl	3c74 <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)>
    3dd8:	ee00 0a10 	vmov	s0, r0
    3ddc:	f8d8 301c 	ldr.w	r3, [r8, #28]
    3de0:	009a      	lsls	r2, r3, #2
    3de2:	ee04 2a10 	vmov	s8, r2
    3de6:	eeb8 4b44 	vcvt.f64.u32	d4, s8
    3dea:	eeb0 3b48 	vmov.f64	d3, d8
    3dee:	ee07 3a90 	vmov	s15, r3
    3df2:	eeb8 2b67 	vcvt.f64.u32	d2, s15
    3df6:	eeb0 1b48 	vmov.f64	d1, d8
    3dfa:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    3dfe:	f007 fc63 	bl	b6c8 <mapf(double, double, double, double, double)>
    3e02:	feb8 0b40 	vrinta.f64	d0, d0
    3e06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    3e0a:	e7b6      	b.n	3d7a <switchMode(Mode*)+0xde>
  }
    3e0c:	a801      	add	r0, sp, #4
    3e0e:	f012 fc59 	bl	166c4 <String::~String()>
}
    3e12:	b016      	add	sp, #88	; 0x58
    3e14:	ecbd 8b02 	vpop	{d8}
    3e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e1c:	20008c3e 	.word	0x20008c3e
    3e20:	70000000 	.word	0x70000000
    3e24:	20008c2d 	.word	0x20008c2d
    3e28:	200009e0 	.word	0x200009e0
    3e2c:	20007364 	.word	0x20007364
    3e30:	200057ec 	.word	0x200057ec
    3e34:	20002158 	.word	0x20002158
    3e38:	200033dc 	.word	0x200033dc
    3e3c:	200009e8 	.word	0x200009e8
    3e40:	20007374 	.word	0x20007374

00003e44 <mapAndClampEncoderValue(Encoder&, int, int, int)>:
float mapAndClampEncoderValue(Encoder &encoder, int min, int max, int id) {
    3e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3e46:	ed2d 8b02 	vpush	{d8}
    3e4a:	4605      	mov	r5, r0
    3e4c:	ee08 1a10 	vmov	s16, r1
    3e50:	4614      	mov	r4, r2
    3e52:	461e      	mov	r6, r3
		if (interrupts_in_use < 2) {
    3e54:	7e03      	ldrb	r3, [r0, #24]
    3e56:	2b01      	cmp	r3, #1
    3e58:	d95e      	bls.n	3f18 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xd4>
			noInterrupts();
    3e5a:	b672      	cpsid	i
		int32_t ret = encoder.position;
    3e5c:	ed95 0a05 	vldr	s0, [r5, #20]
		interrupts();
    3e60:	b662      	cpsie	i
  float mappedValue = round(mapf(value, min, max * 4, min, max));
    3e62:	eeb8 1bc8 	vcvt.f64.s32	d1, s16
    3e66:	00a7      	lsls	r7, r4, #2
  float value = encoder.read();
    3e68:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  float mappedValue = round(mapf(value, min, max * 4, min, max));
    3e6c:	ee07 4a90 	vmov	s15, r4
    3e70:	eeb8 4be7 	vcvt.f64.s32	d4, s15
    3e74:	eeb0 3b41 	vmov.f64	d3, d1
    3e78:	ee07 7a90 	vmov	s15, r7
    3e7c:	eeb8 2be7 	vcvt.f64.s32	d2, s15
    3e80:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    3e84:	f007 fc20 	bl	b6c8 <mapf(double, double, double, double, double)>
    3e88:	feb8 0b40 	vrinta.f64	d0, d0
    3e8c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
  if (mappedValue < min) {
    3e90:	eef8 8ac8 	vcvt.f32.s32	s17, s16
    3e94:	eef4 8ac0 	vcmpe.f32	s17, s0
    3e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e9c:	dd40      	ble.n	3f20 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xdc>
		noInterrupts();
    3e9e:	b672      	cpsid	i
		encoder.position = p;
    3ea0:	ed85 8a05 	vstr	s16, [r5, #20]
		interrupts();
    3ea4:	b662      	cpsie	i
    if (id == 2 && (currentMode == &draw || currentMode == &singleMode)) {
    3ea6:	2e02      	cmp	r6, #2
    3ea8:	f040 8083 	bne.w	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
    3eac:	4b45      	ldr	r3, [pc, #276]	; (3fc4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x180>)
    3eae:	681b      	ldr	r3, [r3, #0]
    3eb0:	4a45      	ldr	r2, [pc, #276]	; (3fc8 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x184>)
    3eb2:	4293      	cmp	r3, r2
    3eb4:	d002      	beq.n	3ebc <mapAndClampEncoderValue(Encoder&, int, int, int)+0x78>
    3eb6:	4a45      	ldr	r2, [pc, #276]	; (3fcc <mapAndClampEncoderValue(Encoder&, int, int, int)+0x188>)
    3eb8:	4293      	cmp	r3, r2
    3eba:	d17a      	bne.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
      if (SMP.edit > 1) {
    3ebc:	4b44      	ldr	r3, [pc, #272]	; (3fd0 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18c>)
    3ebe:	699b      	ldr	r3, [r3, #24]
    3ec0:	2b01      	cmp	r3, #1
    3ec2:	d976      	bls.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
        SMP.edit = SMP.edit - 1;
    3ec4:	4a42      	ldr	r2, [pc, #264]	; (3fd0 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18c>)
    3ec6:	3b01      	subs	r3, #1
    3ec8:	6193      	str	r3, [r2, #24]
		noInterrupts();
    3eca:	b672      	cpsid	i
		encoder.position = p;
    3ecc:	616f      	str	r7, [r5, #20]
		interrupts();
    3ece:	b662      	cpsie	i
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    3ed0:	4b3c      	ldr	r3, [pc, #240]	; (3fc4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x180>)
    3ed2:	681b      	ldr	r3, [r3, #0]
    3ed4:	6a1b      	ldr	r3, [r3, #32]
    3ed6:	0099      	lsls	r1, r3, #2
    3ed8:	ee04 1a10 	vmov	s8, r1
    3edc:	ed92 0a06 	vldr	s0, [r2, #24]
    3ee0:	eeb8 4b44 	vcvt.f64.u32	d4, s8
    3ee4:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    3ee8:	ee07 3a90 	vmov	s15, r3
    3eec:	eeb8 2b67 	vcvt.f64.u32	d2, s15
    3ef0:	eeb0 1b43 	vmov.f64	d1, d3
    3ef4:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    3ef8:	f007 fbe6 	bl	b6c8 <mapf(double, double, double, double, double)>
    3efc:	feb8 0b40 	vrinta.f64	d0, d0
		noInterrupts();
    3f00:	b672      	cpsid	i
    3f02:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    3f06:	4b33      	ldr	r3, [pc, #204]	; (3fd4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x190>)
    3f08:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
		interrupts();
    3f0c:	b662      	cpsie	i
        return max;
    3f0e:	ee07 4a90 	vmov	s15, r4
    3f12:	eef8 8ae7 	vcvt.f32.s32	s17, s15
    3f16:	e04c      	b.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
			noInterrupts();
    3f18:	b672      	cpsid	i
			update(&encoder);
    3f1a:	f7fe fd9b 	bl	2a54 <Encoder::update(Encoder_internal_state_t*)>
    3f1e:	e79d      	b.n	3e5c <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18>
  } else if (mappedValue > max) {
    3f20:	ee07 4a90 	vmov	s15, r4
    3f24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3f28:	eef4 7ac0 	vcmpe.f32	s15, s0
    3f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f30:	d53d      	bpl.n	3fae <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16a>
		noInterrupts();
    3f32:	b672      	cpsid	i
		encoder.position = p;
    3f34:	616f      	str	r7, [r5, #20]
		interrupts();
    3f36:	b662      	cpsie	i
    if (id == 2 && (currentMode == &draw || currentMode == &singleMode)) {
    3f38:	2e02      	cmp	r6, #2
    3f3a:	d13f      	bne.n	3fbc <mapAndClampEncoderValue(Encoder&, int, int, int)+0x178>
    3f3c:	4b21      	ldr	r3, [pc, #132]	; (3fc4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x180>)
    3f3e:	681b      	ldr	r3, [r3, #0]
    3f40:	4a22      	ldr	r2, [pc, #136]	; (3fcc <mapAndClampEncoderValue(Encoder&, int, int, int)+0x188>)
    3f42:	4293      	cmp	r3, r2
    3f44:	d005      	beq.n	3f52 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x10e>
    3f46:	4a20      	ldr	r2, [pc, #128]	; (3fc8 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x184>)
    3f48:	4293      	cmp	r3, r2
    3f4a:	d002      	beq.n	3f52 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x10e>
    return max;
    3f4c:	eef0 8a67 	vmov.f32	s17, s15
    3f50:	e02f      	b.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
      if (SMP.edit < maxPages) {
    3f52:	4b1f      	ldr	r3, [pc, #124]	; (3fd0 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18c>)
    3f54:	699b      	ldr	r3, [r3, #24]
    3f56:	2b07      	cmp	r3, #7
    3f58:	d902      	bls.n	3f60 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x11c>
    return max;
    3f5a:	eef0 8a67 	vmov.f32	s17, s15
    3f5e:	e028      	b.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
        SMP.edit = SMP.edit + 1;
    3f60:	4a1b      	ldr	r2, [pc, #108]	; (3fd0 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18c>)
    3f62:	3301      	adds	r3, #1
    3f64:	6193      	str	r3, [r2, #24]
		noInterrupts();
    3f66:	b672      	cpsid	i
		encoder.position = p;
    3f68:	ed85 8a05 	vstr	s16, [r5, #20]
		interrupts();
    3f6c:	b662      	cpsie	i
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    3f6e:	4b15      	ldr	r3, [pc, #84]	; (3fc4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x180>)
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	6a1b      	ldr	r3, [r3, #32]
    3f74:	0099      	lsls	r1, r3, #2
    3f76:	ee04 1a10 	vmov	s8, r1
    3f7a:	ed92 0a06 	vldr	s0, [r2, #24]
    3f7e:	eeb8 4b44 	vcvt.f64.u32	d4, s8
    3f82:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    3f86:	ee07 3a90 	vmov	s15, r3
    3f8a:	eeb8 2b67 	vcvt.f64.u32	d2, s15
    3f8e:	eeb0 1b43 	vmov.f64	d1, d3
    3f92:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    3f96:	f007 fb97 	bl	b6c8 <mapf(double, double, double, double, double)>
    3f9a:	feb8 0b40 	vrinta.f64	d0, d0
		noInterrupts();
    3f9e:	b672      	cpsid	i
    3fa0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    3fa4:	4b0b      	ldr	r3, [pc, #44]	; (3fd4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x190>)
    3fa6:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
		interrupts();
    3faa:	b662      	cpsie	i
        return min;
    3fac:	e001      	b.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
    return mappedValue;
    3fae:	eef0 8a40 	vmov.f32	s17, s0
}
    3fb2:	eeb0 0a68 	vmov.f32	s0, s17
    3fb6:	ecbd 8b02 	vpop	{d8}
    3fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return max;
    3fbc:	eef0 8a67 	vmov.f32	s17, s15
    3fc0:	e7f7      	b.n	3fb2 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x16e>
    3fc2:	bf00      	nop
    3fc4:	200057ec 	.word	0x200057ec
    3fc8:	20005808 	.word	0x20005808
    3fcc:	20005b88 	.word	0x20005b88
    3fd0:	70000000 	.word	0x70000000
    3fd4:	20007374 	.word	0x20007374

00003fd8 <displaySample(unsigned int)>:
void displaySample(unsigned int len) {
    3fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3fdc:	ed2d 8b02 	vpush	{d8}
    3fe0:	b084      	sub	sp, #16
    3fe2:	ee08 0a10 	vmov	s16, r0
  unsigned int length = mapf(len, 0, 1329920, 1, maxX);
    3fe6:	eeb8 8b48 	vcvt.f64.u32	d8, s16
    3fea:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
    3fee:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    3ff2:	ed9f 2b3b 	vldr	d2, [pc, #236]	; 40e0 <displaySample(unsigned int)+0x108>
    3ff6:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 40e8 <displaySample(unsigned int)+0x110>
    3ffa:	eeb0 0b48 	vmov.f64	d0, d8
    3ffe:	f007 fb63 	bl	b6c8 <mapf(double, double, double, double, double)>
    4002:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    4006:	ee17 8a90 	vmov	r8, s15
  unsigned int skip = mapf(SMP.seek * 200, 44, len, 1, maxX);
    400a:	4b3b      	ldr	r3, [pc, #236]	; (40f8 <displaySample(unsigned int)+0x120>)
    400c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
    4010:	22c8      	movs	r2, #200	; 0xc8
    4012:	fb02 f303 	mul.w	r3, r2, r3
    4016:	ee00 3a10 	vmov	s0, r3
    401a:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
    401e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    4022:	eeb0 2b48 	vmov.f64	d2, d8
    4026:	ed9f 1b32 	vldr	d1, [pc, #200]	; 40f0 <displaySample(unsigned int)+0x118>
    402a:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    402e:	f007 fb4b 	bl	b6c8 <mapf(double, double, double, double, double)>
    4032:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    4036:	ee17 7a90 	vmov	r7, s15
  for (unsigned int s = 1; s <= maxX; s++) {
    403a:	2401      	movs	r4, #1
    403c:	4625      	mov	r5, r4
    light(s, 5, CRGB(1, 1, 1));
    403e:	2605      	movs	r6, #5
    4040:	f88d 5000 	strb.w	r5, [sp]
    4044:	f88d 5001 	strb.w	r5, [sp, #1]
    4048:	f88d 5002 	strb.w	r5, [sp, #2]
    404c:	9a00      	ldr	r2, [sp, #0]
    404e:	4631      	mov	r1, r6
    4050:	4620      	mov	r0, r4
    4052:	f7ff fd13 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int s = 1; s <= maxX; s++) {
    4056:	3401      	adds	r4, #1
    4058:	2c11      	cmp	r4, #17
    405a:	d1f1      	bne.n	4040 <displaySample(unsigned int)+0x68>
  for (unsigned int s = 1; s <= length; s++) {
    405c:	f1b8 0f00 	cmp.w	r8, #0
    4060:	d010      	beq.n	4084 <displaySample(unsigned int)+0xac>
    4062:	2401      	movs	r4, #1
    4064:	2514      	movs	r5, #20
    light(s, 5, CRGB(20, 20, 20));
    4066:	2605      	movs	r6, #5
    4068:	f88d 5004 	strb.w	r5, [sp, #4]
    406c:	f88d 5005 	strb.w	r5, [sp, #5]
    4070:	f88d 5006 	strb.w	r5, [sp, #6]
    4074:	9a01      	ldr	r2, [sp, #4]
    4076:	4631      	mov	r1, r6
    4078:	4620      	mov	r0, r4
    407a:	f7ff fcff 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int s = 1; s <= length; s++) {
    407e:	3401      	adds	r4, #1
    4080:	45a0      	cmp	r8, r4
    4082:	d2f1      	bcs.n	4068 <displaySample(unsigned int)+0x90>
  for (unsigned int s = 1; s <= maxX; s++) {
    4084:	2401      	movs	r4, #1
    4086:	2604      	movs	r6, #4
    4088:	2500      	movs	r5, #0
    408a:	f88d 6008 	strb.w	r6, [sp, #8]
    408e:	f88d 5009 	strb.w	r5, [sp, #9]
    4092:	f88d 500a 	strb.w	r5, [sp, #10]
    light(s, 4, CRGB(4, 0, 0));
    4096:	9a02      	ldr	r2, [sp, #8]
    4098:	4631      	mov	r1, r6
    409a:	4620      	mov	r0, r4
    409c:	f7ff fcee 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int s = 1; s <= maxX; s++) {
    40a0:	3401      	adds	r4, #1
    40a2:	2c11      	cmp	r4, #17
    40a4:	d1f1      	bne.n	408a <displaySample(unsigned int)+0xb2>
  for (unsigned int s = 1; s <= skip; s++) {
    40a6:	b187      	cbz	r7, 40ca <displaySample(unsigned int)+0xf2>
    40a8:	2401      	movs	r4, #1
    40aa:	2600      	movs	r6, #0
    40ac:	2504      	movs	r5, #4
    40ae:	f88d 600c 	strb.w	r6, [sp, #12]
    40b2:	f88d 500d 	strb.w	r5, [sp, #13]
    40b6:	f88d 600e 	strb.w	r6, [sp, #14]
    light(s, 4, CRGB(0, 4, 0));
    40ba:	9a03      	ldr	r2, [sp, #12]
    40bc:	4629      	mov	r1, r5
    40be:	4620      	mov	r0, r4
    40c0:	f7ff fcdc 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int s = 1; s <= skip; s++) {
    40c4:	3401      	adds	r4, #1
    40c6:	42a7      	cmp	r7, r4
    40c8:	d2f1      	bcs.n	40ae <displaySample(unsigned int)+0xd6>
    40ca:	480c      	ldr	r0, [pc, #48]	; (40fc <displaySample(unsigned int)+0x124>)
    40cc:	7801      	ldrb	r1, [r0, #0]
    40ce:	f007 fec1 	bl	be54 <CFastLED::show(unsigned char)>
}
    40d2:	b004      	add	sp, #16
    40d4:	ecbd 8b02 	vpop	{d8}
    40d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40dc:	f3af 8000 	nop.w
    40e0:	00000000 	.word	0x00000000
    40e4:	41344b00 	.word	0x41344b00
	...
    40f4:	40460000 	.word	0x40460000
    40f8:	70000000 	.word	0x70000000
    40fc:	20006668 	.word	0x20006668

00004100 <checkPositions()>:
void checkPositions() {
    4100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  for (unsigned int i = 0; i < 4; i++) {
    4104:	4c2c      	ldr	r4, [pc, #176]	; (41b8 <checkPositions()+0xb8>)
    4106:	4f2d      	ldr	r7, [pc, #180]	; (41bc <checkPositions()+0xbc>)
    4108:	f507 75d6 	add.w	r5, r7, #428	; 0x1ac
    410c:	f507 77de 	add.w	r7, r7, #444	; 0x1bc
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, maxY);
    4110:	4e2b      	ldr	r6, [pc, #172]	; (41c0 <checkPositions()+0xc0>)
    4112:	46a0      	mov	r8, r4
      currentMode->pos[1] = mapAndClampEncoderValue(encoders[1], 1, currentMode->maxValues[1], 1);
    4114:	f104 091c 	add.w	r9, r4, #28
    4118:	e007      	b.n	412a <checkPositions()+0x2a>
			noInterrupts();
    411a:	b672      	cpsid	i
			update(&encoder);
    411c:	4620      	mov	r0, r4
    411e:	f7fe fc99 	bl	2a54 <Encoder::update(Encoder_internal_state_t*)>
    4122:	e007      	b.n	4134 <checkPositions()+0x34>
  for (unsigned int i = 0; i < 4; i++) {
    4124:	341c      	adds	r4, #28
    4126:	42bd      	cmp	r5, r7
    4128:	d044      	beq.n	41b4 <checkPositions()+0xb4>
		if (interrupts_in_use < 2) {
    412a:	46a2      	mov	sl, r4
    412c:	7e23      	ldrb	r3, [r4, #24]
    412e:	2b01      	cmp	r3, #1
    4130:	d9f3      	bls.n	411a <checkPositions()+0x1a>
			noInterrupts();
    4132:	b672      	cpsid	i
		int32_t ret = encoder.position;
    4134:	f8da 3014 	ldr.w	r3, [sl, #20]
		interrupts();
    4138:	b662      	cpsie	i
    if (currentEncoderValue != previousEncoderValues[i]) {
    413a:	f855 2b04 	ldr.w	r2, [r5], #4
    413e:	429a      	cmp	r2, r3
    4140:	d0f0      	beq.n	4124 <checkPositions()+0x24>
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, maxY);
    4142:	6832      	ldr	r2, [r6, #0]
    4144:	2300      	movs	r3, #0
    4146:	69d2      	ldr	r2, [r2, #28]
    4148:	2101      	movs	r1, #1
    414a:	4640      	mov	r0, r8
    414c:	f7ff fe7a 	bl	3e44 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    4150:	2210      	movs	r2, #16
    4152:	2101      	movs	r1, #1
    4154:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    4158:	ee17 0a90 	vmov	r0, s15
    415c:	f7ff fd8a 	bl	3c74 <reverseMapEncoderValue(unsigned int, unsigned int, unsigned int)>
    4160:	6832      	ldr	r2, [r6, #0]
    4162:	62d0      	str	r0, [r2, #44]	; 0x2c
      currentMode->pos[1] = mapAndClampEncoderValue(encoders[1], 1, currentMode->maxValues[1], 1);
    4164:	2301      	movs	r3, #1
    4166:	6a12      	ldr	r2, [r2, #32]
    4168:	4619      	mov	r1, r3
    416a:	4648      	mov	r0, r9
    416c:	f7ff fe6a 	bl	3e44 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    4170:	6832      	ldr	r2, [r6, #0]
    4172:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    4176:	ed82 0a0c 	vstr	s0, [r2, #48]	; 0x30
      currentMode->pos[2] = mapAndClampEncoderValue(encoders[2], 1, currentMode->maxValues[2], 2);  // mitte
    417a:	2302      	movs	r3, #2
    417c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    417e:	2101      	movs	r1, #1
    4180:	f108 0038 	add.w	r0, r8, #56	; 0x38
    4184:	f7ff fe5e 	bl	3e44 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    4188:	6831      	ldr	r1, [r6, #0]
    418a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    418e:	ed81 0a0d 	vstr	s0, [r1, #52]	; 0x34
      if (isEncoder4Defined)
    4192:	4b0c      	ldr	r3, [pc, #48]	; (41c4 <checkPositions()+0xc4>)
    4194:	781b      	ldrb	r3, [r3, #0]
    4196:	2b00      	cmp	r3, #0
    4198:	d0c4      	beq.n	4124 <checkPositions()+0x24>
        currentMode->pos[3] = mapAndClampEncoderValue(encoders[3], currentMode->minValues[3], currentMode->maxValues[3], 3);  // mitte2
    419a:	2303      	movs	r3, #3
    419c:	6a8a      	ldr	r2, [r1, #40]	; 0x28
    419e:	6989      	ldr	r1, [r1, #24]
    41a0:	f108 0054 	add.w	r0, r8, #84	; 0x54
    41a4:	f7ff fe4e 	bl	3e44 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    41a8:	6833      	ldr	r3, [r6, #0]
    41aa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    41ae:	ed83 0a0e 	vstr	s0, [r3, #56]	; 0x38
    41b2:	e7b7      	b.n	4124 <checkPositions()+0x24>
}
    41b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41b8:	20007374 	.word	0x20007374
    41bc:	70000000 	.word	0x70000000
    41c0:	200057ec 	.word	0x200057ec
    41c4:	20005c89 	.word	0x20005c89

000041c8 <canvas(bool)>:
void canvas(bool singleview) {
    41c8:	b570      	push	{r4, r5, r6, lr}
    41ca:	b098      	sub	sp, #96	; 0x60
	StringSumHelper(const char *p) : String(p) {}
    41cc:	495c      	ldr	r1, [pc, #368]	; (4340 <canvas(bool)+0x178>)
    41ce:	a803      	add	r0, sp, #12
    41d0:	f012 fac1 	bl	16756 <String::String(char const*)>
  String posString = "Y:" + String(currentMode->pos[0]) + " X:" + String(currentMode->pos[2]) + " Page:" + String(currentMode->pos[1]);
    41d4:	4d5b      	ldr	r5, [pc, #364]	; (4344 <canvas(bool)+0x17c>)
    41d6:	682b      	ldr	r3, [r5, #0]
    41d8:	220a      	movs	r2, #10
    41da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    41dc:	a806      	add	r0, sp, #24
    41de:	f012 fb03 	bl	167e8 <String::String(unsigned int, unsigned char)>
    41e2:	a906      	add	r1, sp, #24
    41e4:	a803      	add	r0, sp, #12
    41e6:	f012 fb5c 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    41ea:	4957      	ldr	r1, [pc, #348]	; (4348 <canvas(bool)+0x180>)
    41ec:	f012 fb61 	bl	168b2 <operator+(StringSumHelper const&, char const*)>
    41f0:	4604      	mov	r4, r0
    41f2:	682b      	ldr	r3, [r5, #0]
    41f4:	220a      	movs	r2, #10
    41f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    41f8:	a809      	add	r0, sp, #36	; 0x24
    41fa:	f012 faf5 	bl	167e8 <String::String(unsigned int, unsigned char)>
    41fe:	a909      	add	r1, sp, #36	; 0x24
    4200:	4620      	mov	r0, r4
    4202:	f012 fb4e 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    4206:	4951      	ldr	r1, [pc, #324]	; (434c <canvas(bool)+0x184>)
    4208:	f012 fb53 	bl	168b2 <operator+(StringSumHelper const&, char const*)>
    420c:	4604      	mov	r4, r0
    420e:	682b      	ldr	r3, [r5, #0]
    4210:	220a      	movs	r2, #10
    4212:	6b19      	ldr	r1, [r3, #48]	; 0x30
    4214:	a80c      	add	r0, sp, #48	; 0x30
    4216:	f012 fae7 	bl	167e8 <String::String(unsigned int, unsigned char)>
    421a:	a90c      	add	r1, sp, #48	; 0x30
    421c:	4620      	mov	r0, r4
    421e:	f012 fb40 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    4222:	4601      	mov	r1, r0
    4224:	4668      	mov	r0, sp
    4226:	f012 fab2 	bl	1678e <String::String(String const&)>
    422a:	a80c      	add	r0, sp, #48	; 0x30
    422c:	f012 fa4a 	bl	166c4 <String::~String()>
    4230:	a809      	add	r0, sp, #36	; 0x24
    4232:	f012 fa47 	bl	166c4 <String::~String()>
    4236:	a806      	add	r0, sp, #24
    4238:	f012 fa44 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    423c:	a803      	add	r0, sp, #12
    423e:	f012 fa41 	bl	166c4 <String::~String()>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    4242:	4943      	ldr	r1, [pc, #268]	; (4350 <canvas(bool)+0x188>)
    4244:	4668      	mov	r0, sp
    4246:	f012 fb5d 	bl	16904 <String::equals(String const&) const>
  if (posString != oldPos) {
    424a:	b120      	cbz	r0, 4256 <canvas(bool)+0x8e>
}
    424c:	4668      	mov	r0, sp
    424e:	f012 fa39 	bl	166c4 <String::~String()>
    4252:	b018      	add	sp, #96	; 0x60
    4254:	bd70      	pop	{r4, r5, r6, pc}
    oldPos = posString;
    4256:	4669      	mov	r1, sp
    4258:	483d      	ldr	r0, [pc, #244]	; (4350 <canvas(bool)+0x188>)
    425a:	f012 fa8e 	bl	1677a <String::operator=(String const&)>
    SMP.x = currentMode->pos[2];
    425e:	682a      	ldr	r2, [r5, #0]
    4260:	6b53      	ldr	r3, [r2, #52]	; 0x34
    4262:	493c      	ldr	r1, [pc, #240]	; (4354 <canvas(bool)+0x18c>)
    4264:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
    SMP.y = currentMode->pos[0];
    4268:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    426a:	f8c1 00b0 	str.w	r0, [r1, #176]	; 0xb0
    if (paintMode) {
    426e:	493a      	ldr	r1, [pc, #232]	; (4358 <canvas(bool)+0x190>)
    4270:	7809      	ldrb	r1, [r1, #0]
    4272:	b171      	cbz	r1, 4292 <canvas(bool)+0xca>
      note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.y - 1;
    4274:	4937      	ldr	r1, [pc, #220]	; (4354 <canvas(bool)+0x18c>)
    4276:	6989      	ldr	r1, [r1, #24]
    4278:	3901      	subs	r1, #1
    427a:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    427e:	eb01 1401 	add.w	r4, r1, r1, lsl #4
    4282:	4404      	add	r4, r0
    4284:	1e45      	subs	r5, r0, #1
    4286:	4e35      	ldr	r6, [pc, #212]	; (435c <canvas(bool)+0x194>)
    4288:	f846 5034 	str.w	r5, [r6, r4, lsl #3]
    if (paintMode && currentMode == &singleMode) {
    428c:	4c34      	ldr	r4, [pc, #208]	; (4360 <canvas(bool)+0x198>)
    428e:	42a2      	cmp	r2, r4
    4290:	d01b      	beq.n	42ca <canvas(bool)+0x102>
    if (unpaintMode) {
    4292:	4934      	ldr	r1, [pc, #208]	; (4364 <canvas(bool)+0x19c>)
    4294:	7809      	ldrb	r1, [r1, #0]
    4296:	b361      	cbz	r1, 42f2 <canvas(bool)+0x12a>
      if (SMP.singleMode) {
    4298:	492e      	ldr	r1, [pc, #184]	; (4354 <canvas(bool)+0x18c>)
    429a:	6809      	ldr	r1, [r1, #0]
    429c:	b1e9      	cbz	r1, 42da <canvas(bool)+0x112>
        if (note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] == SMP.currentChannel)
    429e:	4c2d      	ldr	r4, [pc, #180]	; (4354 <canvas(bool)+0x18c>)
    42a0:	69a1      	ldr	r1, [r4, #24]
    42a2:	3901      	subs	r1, #1
    42a4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    42a8:	eb03 1103 	add.w	r1, r3, r3, lsl #4
    42ac:	4401      	add	r1, r0
    42ae:	4d2b      	ldr	r5, [pc, #172]	; (435c <canvas(bool)+0x194>)
    42b0:	f855 5031 	ldr.w	r5, [r5, r1, lsl #3]
    42b4:	6861      	ldr	r1, [r4, #4]
    42b6:	428d      	cmp	r5, r1
    42b8:	d11b      	bne.n	42f2 <canvas(bool)+0x12a>
          note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = 0;
    42ba:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    42be:	4403      	add	r3, r0
    42c0:	4926      	ldr	r1, [pc, #152]	; (435c <canvas(bool)+0x194>)
    42c2:	2000      	movs	r0, #0
    42c4:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
    42c8:	e013      	b.n	42f2 <canvas(bool)+0x12a>
      note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.currentChannel;
    42ca:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    42ce:	4401      	add	r1, r0
    42d0:	4c20      	ldr	r4, [pc, #128]	; (4354 <canvas(bool)+0x18c>)
    42d2:	6865      	ldr	r5, [r4, #4]
    42d4:	f846 5031 	str.w	r5, [r6, r1, lsl #3]
    42d8:	e7db      	b.n	4292 <canvas(bool)+0xca>
        note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = 0;
    42da:	491e      	ldr	r1, [pc, #120]	; (4354 <canvas(bool)+0x18c>)
    42dc:	6989      	ldr	r1, [r1, #24]
    42de:	3901      	subs	r1, #1
    42e0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
    42e4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    42e8:	4403      	add	r3, r0
    42ea:	491c      	ldr	r1, [pc, #112]	; (435c <canvas(bool)+0x194>)
    42ec:	2000      	movs	r0, #0
    42ee:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
    unsigned int editpage = currentMode->pos[1];
    42f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
    if (editpage != SMP.edit && editpage <= lastPage) {
    42f4:	4a17      	ldr	r2, [pc, #92]	; (4354 <canvas(bool)+0x18c>)
    42f6:	6992      	ldr	r2, [r2, #24]
    42f8:	429a      	cmp	r2, r3
    42fa:	d0a7      	beq.n	424c <canvas(bool)+0x84>
    42fc:	4a1a      	ldr	r2, [pc, #104]	; (4368 <canvas(bool)+0x1a0>)
    42fe:	6812      	ldr	r2, [r2, #0]
    4300:	429a      	cmp	r2, r3
    4302:	d3a3      	bcc.n	424c <canvas(bool)+0x84>
      SMP.edit = editpage;
    4304:	4c13      	ldr	r4, [pc, #76]	; (4354 <canvas(bool)+0x18c>)
    4306:	61a3      	str	r3, [r4, #24]
	StringSumHelper(const char *p) : String(p) {}
    4308:	4918      	ldr	r1, [pc, #96]	; (436c <canvas(bool)+0x1a4>)
    430a:	a812      	add	r0, sp, #72	; 0x48
    430c:	f012 fa23 	bl	16756 <String::String(char const*)>
      serialprintln("p:" + String(SMP.edit));
    4310:	220a      	movs	r2, #10
    4312:	69a1      	ldr	r1, [r4, #24]
    4314:	a815      	add	r0, sp, #84	; 0x54
    4316:	f012 fa67 	bl	167e8 <String::String(unsigned int, unsigned char)>
    431a:	a915      	add	r1, sp, #84	; 0x54
    431c:	a812      	add	r0, sp, #72	; 0x48
    431e:	f012 fac0 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    4322:	4601      	mov	r1, r0
class StringSumHelper : public String
    4324:	a80f      	add	r0, sp, #60	; 0x3c
    4326:	f012 fa32 	bl	1678e <String::String(String const&)>
    432a:	a80f      	add	r0, sp, #60	; 0x3c
    432c:	f012 f9ca 	bl	166c4 <String::~String()>
    4330:	a815      	add	r0, sp, #84	; 0x54
    4332:	f012 f9c7 	bl	166c4 <String::~String()>
    4336:	a812      	add	r0, sp, #72	; 0x48
    4338:	f012 f9c4 	bl	166c4 <String::~String()>
    433c:	e786      	b.n	424c <canvas(bool)+0x84>
    433e:	bf00      	nop
    4340:	20000c80 	.word	0x20000c80
    4344:	200057ec 	.word	0x200057ec
    4348:	20000c84 	.word	0x20000c84
    434c:	20000c88 	.word	0x20000c88
    4350:	200080dc 	.word	0x200080dc
    4354:	70000000 	.word	0x70000000
    4358:	20008c2d 	.word	0x20008c2d
    435c:	70db37d8 	.word	0x70db37d8
    4360:	20005b88 	.word	0x20005b88
    4364:	20008c3e 	.word	0x20008c3e
    4368:	20005a80 	.word	0x20005a80
    436c:	20000c90 	.word	0x20000c90

00004370 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
void clearNoteChannel(unsigned int c, unsigned int yStart, unsigned int yEnd, unsigned int channel, bool singleMode) {
    4370:	b4f0      	push	{r4, r5, r6, r7}
    4372:	f89d 4010 	ldrb.w	r4, [sp, #16]
  for (unsigned int y = yStart; y < yEnd; y++) {
    4376:	4291      	cmp	r1, r2
    4378:	d21c      	bcs.n	43b4 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x44>
    437a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    437e:	eb00 0c01 	add.w	ip, r0, r1
    4382:	480d      	ldr	r0, [pc, #52]	; (43b8 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x48>)
    4384:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
      note[c][y][0] = 0;
    4388:	2600      	movs	r6, #0
      note[c][y][1] = defaultVelocity;
    438a:	253f      	movs	r5, #63	; 0x3f
    438c:	e006      	b.n	439c <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x2c>
      note[c][y][0] = 0;
    438e:	f840 6c04 	str.w	r6, [r0, #-4]
      note[c][y][1] = defaultVelocity;
    4392:	6005      	str	r5, [r0, #0]
  for (unsigned int y = yStart; y < yEnd; y++) {
    4394:	3101      	adds	r1, #1
    4396:	3008      	adds	r0, #8
    4398:	428a      	cmp	r2, r1
    439a:	d00b      	beq.n	43b4 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x44>
    if (singleMode) {
    439c:	2c00      	cmp	r4, #0
    439e:	d0f6      	beq.n	438e <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x1e>
      if (note[c][y][0] == channel)
    43a0:	f850 7c04 	ldr.w	r7, [r0, #-4]
    43a4:	429f      	cmp	r7, r3
    43a6:	d1f5      	bne.n	4394 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x24>
        note[c][y][0] = 0;
    43a8:	f840 6c04 	str.w	r6, [r0, #-4]
      if (note[c][y][0] == channel)
    43ac:	2b00      	cmp	r3, #0
    43ae:	d1f1      	bne.n	4394 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x24>
        note[c][y][1] = defaultVelocity;
    43b0:	6005      	str	r5, [r0, #0]
    43b2:	e7ef      	b.n	4394 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x24>
}
    43b4:	bcf0      	pop	{r4, r5, r6, r7}
    43b6:	4770      	bx	lr
    43b8:	70db37dc 	.word	0x70db37dc

000043bc <updateVolume()>:
void updateVolume() {
    43bc:	b500      	push	{lr}
    43be:	ed2d 8b02 	vpush	{d8}
    43c2:	b08b      	sub	sp, #44	; 0x2c
  if (!isEncoder4Defined) {
    43c4:	4b26      	ldr	r3, [pc, #152]	; (4460 <updateVolume()+0xa4>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d135      	bne.n	4438 <updateVolume()+0x7c>
    SMP.vol = currentMode->pos[0];
    43cc:	4b25      	ldr	r3, [pc, #148]	; (4464 <updateVolume()+0xa8>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    43d2:	4a25      	ldr	r2, [pc, #148]	; (4468 <updateVolume()+0xac>)
    43d4:	6093      	str	r3, [r2, #8]
  float vol = float(SMP.vol / 10.0);
    43d6:	ee07 3a90 	vmov	s15, r3
    43da:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    43de:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
    43e2:	ee87 8b06 	vdiv.f64	d8, d7, d6
    43e6:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
	StringSumHelper(const char *p) : String(p) {}
    43ea:	4920      	ldr	r1, [pc, #128]	; (446c <updateVolume()+0xb0>)
    43ec:	a804      	add	r0, sp, #16
    43ee:	f012 f9b2 	bl	16756 <String::String(char const*)>
  serialprintln("Vol: " + String(vol));
    43f2:	2102      	movs	r1, #2
    43f4:	eeb0 0a48 	vmov.f32	s0, s16
    43f8:	a807      	add	r0, sp, #28
    43fa:	f012 fa07 	bl	1680c <String::String(float, unsigned char)>
    43fe:	a907      	add	r1, sp, #28
    4400:	a804      	add	r0, sp, #16
    4402:	f012 fa4e 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    4406:	4601      	mov	r1, r0
class StringSumHelper : public String
    4408:	a801      	add	r0, sp, #4
    440a:	f012 f9c0 	bl	1678e <String::String(String const&)>
    440e:	a801      	add	r0, sp, #4
    4410:	f012 f958 	bl	166c4 <String::~String()>
    4414:	a807      	add	r0, sp, #28
    4416:	f012 f955 	bl	166c4 <String::~String()>
    441a:	a804      	add	r0, sp, #16
    441c:	f012 f952 	bl	166c4 <String::~String()>
  if (vol <= 1.0)
    4420:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    4424:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    442c:	d908      	bls.n	4440 <updateVolume()+0x84>
}
    442e:	b00b      	add	sp, #44	; 0x2c
    4430:	ecbd 8b02 	vpop	{d8}
    4434:	f85d fb04 	ldr.w	pc, [sp], #4
    SMP.vol = currentMode->pos[3];
    4438:	4b0a      	ldr	r3, [pc, #40]	; (4464 <updateVolume()+0xa8>)
    443a:	681b      	ldr	r3, [r3, #0]
    443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    443e:	e7c8      	b.n	43d2 <updateVolume()+0x16>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    4440:	eddf 7a0b 	vldr	s15, [pc, #44]	; 4470 <updateVolume()+0xb4>
    4444:	ee28 0a27 	vmul.f32	s0, s16, s15
    4448:	eddf 7a0a 	vldr	s15, [pc, #40]	; 4474 <updateVolume()+0xb8>
    444c:	ee30 0a27 	vadd.f32	s0, s0, s15
    4450:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    4454:	ee17 1a90 	vmov	r1, s15
    4458:	4807      	ldr	r0, [pc, #28]	; (4478 <updateVolume()+0xbc>)
    445a:	f008 fb58 	bl	cb0e <AudioControlSGTL5000::volumeInteger(unsigned int)>
}
    445e:	e7e6      	b.n	442e <updateVolume()+0x72>
    4460:	20005c89 	.word	0x20005c89
    4464:	200057ec 	.word	0x200057ec
    4468:	70000000 	.word	0x70000000
    446c:	20000bb8 	.word	0x20000bb8
    4470:	43010000 	.word	0x43010000
    4474:	3eff7cee 	.word	0x3eff7cee
    4478:	200085cc 	.word	0x200085cc

0000447c <getCol(unsigned int)>:
CRGB getCol(unsigned int g) {
    447c:	b082      	sub	sp, #8

/// @copydoc CRGB::operator*=
FASTLED_FORCE_INLINE CRGB operator*( const CRGB& p1, uint8_t d)
{
    return CRGB( qmul8( p1.r, d),
                 qmul8( p1.g, d),
    447e:	4914      	ldr	r1, [pc, #80]	; (44d0 <getCol(unsigned int)+0x54>)
    4480:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4484:	eb01 0c00 	add.w	ip, r1, r0
/// @param i first byte to multiply
/// @param j second byte to multiply
/// @returns the product of i * j, capping at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qmul8(uint8_t i, uint8_t j) {
#if QMUL8_C == 1
    unsigned p = (unsigned)i * (unsigned)j;
    4488:	f89c 3001 	ldrb.w	r3, [ip, #1]
    448c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    4490:	0052      	lsls	r2, r2, #1
    4492:	f89c 3002 	ldrb.w	r3, [ip, #2]
    4496:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    449a:	005b      	lsls	r3, r3, #1
    449c:	5c09      	ldrb	r1, [r1, r0]
    449e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    44a2:	0049      	lsls	r1, r1, #1
    if (p > 255)
        p = 255;
    return p;
    44a4:	29ff      	cmp	r1, #255	; 0xff
    44a6:	bf28      	it	cs
    44a8:	21ff      	movcs	r1, #255	; 0xff
    44aa:	2aff      	cmp	r2, #255	; 0xff
    44ac:	bf28      	it	cs
    44ae:	22ff      	movcs	r2, #255	; 0xff
    44b0:	2bff      	cmp	r3, #255	; 0xff
    44b2:	bf28      	it	cs
    44b4:	23ff      	movcs	r3, #255	; 0xff
  return col[g] * 10;
    44b6:	2000      	movs	r0, #0
    44b8:	b2c9      	uxtb	r1, r1
    44ba:	f361 0007 	bfi	r0, r1, #0, #8
    44be:	b2d2      	uxtb	r2, r2
    44c0:	f362 200f 	bfi	r0, r2, #8, #8
    44c4:	b2db      	uxtb	r3, r3
    44c6:	f363 4017 	bfi	r0, r3, #16, #8
}
    44ca:	b002      	add	sp, #8
    44cc:	4770      	bx	lr
    44ce:	bf00      	nop
    44d0:	200012d4 	.word	0x200012d4
    44d4:	00000000 	.word	0x00000000

000044d8 <drawVolume(unsigned int)>:
void drawVolume(unsigned int vol) {
    44d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44dc:	b085      	sub	sp, #20
    44de:	9001      	str	r0, [sp, #4]
  unsigned int maxXVolume = int(vol * 1.3) + 2;
    44e0:	ee07 0a90 	vmov	s15, r0
    44e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    44e8:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 4558 <drawVolume(unsigned int)+0x80>
    44ec:	ee27 7b06 	vmul.f64	d7, d7, d6
    44f0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    44f4:	ee17 8a90 	vmov	r8, s15
    44f8:	f108 0802 	add.w	r8, r8, #2
      light(x + 1, y, CRGB(vol * vol, 20 - vol, 0));
    44fc:	f89d 5004 	ldrb.w	r5, [sp, #4]
    4500:	fb15 f905 	smulbb	r9, r5, r5
    4504:	fa5f f989 	uxtb.w	r9, r9
    for (unsigned int x = 0; x <= maxXVolume; x++) {
    4508:	2400      	movs	r4, #0
      light(x + 1, y, CRGB(vol * vol, 20 - vol, 0));
    450a:	f1c5 0514 	rsb	r5, r5, #20
    450e:	b2ed      	uxtb	r5, r5
    4510:	4627      	mov	r7, r4
    4512:	2605      	movs	r6, #5
    4514:	3401      	adds	r4, #1
    4516:	f88d 900c 	strb.w	r9, [sp, #12]
    451a:	f88d 500d 	strb.w	r5, [sp, #13]
    451e:	f88d 700e 	strb.w	r7, [sp, #14]
    4522:	9a03      	ldr	r2, [sp, #12]
    4524:	4631      	mov	r1, r6
    4526:	4620      	mov	r0, r4
    4528:	f7ff faa8 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int x = 0; x <= maxXVolume; x++) {
    452c:	45a0      	cmp	r8, r4
    452e:	d2f1      	bcs.n	4514 <drawVolume(unsigned int)+0x3c>
    4530:	2400      	movs	r4, #0
    4532:	4627      	mov	r7, r4
      light(x + 1, y, CRGB(vol * vol, 20 - vol, 0));
    4534:	2606      	movs	r6, #6
    4536:	3401      	adds	r4, #1
    4538:	f88d 900c 	strb.w	r9, [sp, #12]
    453c:	f88d 500d 	strb.w	r5, [sp, #13]
    4540:	f88d 700e 	strb.w	r7, [sp, #14]
    4544:	9a03      	ldr	r2, [sp, #12]
    4546:	4631      	mov	r1, r6
    4548:	4620      	mov	r0, r4
    454a:	f7ff fa97 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int x = 0; x <= maxXVolume; x++) {
    454e:	4544      	cmp	r4, r8
    4550:	d9f1      	bls.n	4536 <drawVolume(unsigned int)+0x5e>
}
    4552:	b005      	add	sp, #20
    4554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4558:	cccccccd 	.word	0xcccccccd
    455c:	3ff4cccc 	.word	0x3ff4cccc

00004560 <getFolderNumber(int)>:
  int folder = floor(value / 100);
    4560:	4b05      	ldr	r3, [pc, #20]	; (4578 <getFolderNumber(int)+0x18>)
    4562:	fb83 2300 	smull	r2, r3, r3, r0
    4566:	17c0      	asrs	r0, r0, #31
    4568:	ebc0 1063 	rsb	r0, r0, r3, asr #5
  if (folder > maxFolders) folder = maxFolders;
    456c:	2809      	cmp	r0, #9
  if (folder <= 0) folder = 0;
    456e:	bf94      	ite	ls
    4570:	ea20 70e0 	bicls.w	r0, r0, r0, asr #31
  if (folder > maxFolders) folder = maxFolders;
    4574:	2009      	movhi	r0, #9
}
    4576:	4770      	bx	lr
    4578:	51eb851f 	.word	0x51eb851f

0000457c <getFileNumber(int)>:
int getFileNumber(int value) {
    457c:	b510      	push	{r4, lr}
    457e:	4604      	mov	r4, r0
  int folder = getFolderNumber(value);
    4580:	f7ff ffee 	bl	4560 <getFolderNumber(int)>
  int wavfile = value % 100;
    4584:	4a07      	ldr	r2, [pc, #28]	; (45a4 <getFileNumber(int)+0x28>)
    4586:	fb82 3204 	smull	r3, r2, r2, r4
    458a:	17e3      	asrs	r3, r4, #31
    458c:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    4590:	2264      	movs	r2, #100	; 0x64
    4592:	fb02 4313 	mls	r3, r2, r3, r4
  return wavfile + folder * 100;
    4596:	fb02 f000 	mul.w	r0, r2, r0
}
    459a:	2b00      	cmp	r3, #0
    459c:	bfa8      	it	ge
    459e:	18c0      	addge	r0, r0, r3
    45a0:	bd10      	pop	{r4, pc}
    45a2:	bf00      	nop
    45a4:	51eb851f 	.word	0x51eb851f

000045a8 <showNumber(unsigned int, CRGB, int)>:
void showNumber(unsigned int count, CRGB color, int topY) {
    45a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45ac:	b087      	sub	sp, #28
    45ae:	9103      	str	r1, [sp, #12]
    45b0:	4690      	mov	r8, r2
    45b2:	fa5f fa81 	uxtb.w	sl, r1
    45b6:	f3c1 2907 	ubfx	r9, r1, #8, #8
    45ba:	f3c1 4707 	ubfx	r7, r1, #16, #8
    }

    /// This allows testing a CRGB for zero-ness
    constexpr explicit operator bool() const
    {
        return r || g || b;
    45be:	ea49 030a 	orr.w	r3, r9, sl
    45c2:	433b      	orrs	r3, r7
    45c4:	d102      	bne.n	45cc <showNumber(unsigned int, CRGB, int)+0x24>
    color = CRGB(20, 20, 20);
    45c6:	2714      	movs	r7, #20
    45c8:	46b9      	mov	r9, r7
    45ca:	46ba      	mov	sl, r7
  sprintf(buf, "%03i", count);
    45cc:	4602      	mov	r2, r0
    45ce:	4931      	ldr	r1, [pc, #196]	; (4694 <showNumber(unsigned int, CRGB, int)+0xec>)
    45d0:	a805      	add	r0, sp, #20
    45d2:	f01e f895 	bl	22700 <sprintf>
  unsigned int stelle2 = buf[0] - '0';
    45d6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    45da:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    45de:	9101      	str	r1, [sp, #4]
  unsigned int stelle1 = buf[1] - '0';
    45e0:	f89d 3015 	ldrb.w	r3, [sp, #21]
    45e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    45e8:	9202      	str	r2, [sp, #8]
  unsigned int ypos = maxY - topY;
    45ea:	f1c8 0810 	rsb	r8, r8, #16
  for (unsigned int gx = 0; gx < 24; gx++) {
    45ee:	4b2a      	ldr	r3, [pc, #168]	; (4698 <showNumber(unsigned int, CRGB, int)+0xf0>)
  unsigned int stelle0 = buf[2] - '0';
    45f0:	f89d 4016 	ldrb.w	r4, [sp, #22]
    45f4:	3c30      	subs	r4, #48	; 0x30
    45f6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    45fa:	eb03 1484 	add.w	r4, r3, r4, lsl #6
    45fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4602:	eb03 1582 	add.w	r5, r3, r2, lsl #6
    4606:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    460a:	eb03 1686 	add.w	r6, r3, r6, lsl #6
    460e:	f103 0bc0 	add.w	fp, r3, #192	; 0xc0
    4612:	eb0b 1b82 	add.w	fp, fp, r2, lsl #6
    4616:	4653      	mov	r3, sl
    4618:	46ca      	mov	sl, r9
    461a:	4699      	mov	r9, r3
    461c:	e014      	b.n	4648 <showNumber(unsigned int, CRGB, int)+0xa0>
    if ((stelle1 > 0 || stelle2 > 0))
    461e:	9b02      	ldr	r3, [sp, #8]
    4620:	bb1b      	cbnz	r3, 466a <showNumber(unsigned int, CRGB, int)+0xc2>
    light(11 + number[stelle0][gx][0], ypos - number[stelle0][gx][1], color);
    4622:	6820      	ldr	r0, [r4, #0]
    4624:	6861      	ldr	r1, [r4, #4]
    4626:	f88d 900c 	strb.w	r9, [sp, #12]
    462a:	f88d a00d 	strb.w	sl, [sp, #13]
    462e:	f88d 700e 	strb.w	r7, [sp, #14]
    4632:	9a03      	ldr	r2, [sp, #12]
    4634:	eba8 0101 	sub.w	r1, r8, r1
    4638:	300b      	adds	r0, #11
    463a:	f7ff fa1f 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int gx = 0; gx < 24; gx++) {
    463e:	3408      	adds	r4, #8
    4640:	3508      	adds	r5, #8
    4642:	3608      	adds	r6, #8
    4644:	45ab      	cmp	fp, r5
    4646:	d01f      	beq.n	4688 <showNumber(unsigned int, CRGB, int)+0xe0>
    if (stelle2 > 0)
    4648:	9b01      	ldr	r3, [sp, #4]
    464a:	2b00      	cmp	r3, #0
    464c:	d0e7      	beq.n	461e <showNumber(unsigned int, CRGB, int)+0x76>
      light(1 + number[stelle2][gx][0], ypos - number[stelle2][gx][1], color);
    464e:	6830      	ldr	r0, [r6, #0]
    4650:	6871      	ldr	r1, [r6, #4]
    4652:	f88d 900c 	strb.w	r9, [sp, #12]
    4656:	f88d a00d 	strb.w	sl, [sp, #13]
    465a:	f88d 700e 	strb.w	r7, [sp, #14]
    465e:	9a03      	ldr	r2, [sp, #12]
    4660:	eba8 0101 	sub.w	r1, r8, r1
    4664:	3001      	adds	r0, #1
    4666:	f7ff fa09 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
      light(6 + number[stelle1][gx][0], ypos - number[stelle1][gx][1], color);
    466a:	6828      	ldr	r0, [r5, #0]
    466c:	6869      	ldr	r1, [r5, #4]
    466e:	f88d 900c 	strb.w	r9, [sp, #12]
    4672:	f88d a00d 	strb.w	sl, [sp, #13]
    4676:	f88d 700e 	strb.w	r7, [sp, #14]
    467a:	9a03      	ldr	r2, [sp, #12]
    467c:	eba8 0101 	sub.w	r1, r8, r1
    4680:	3006      	adds	r0, #6
    4682:	f7ff f9fb 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    4686:	e7cc      	b.n	4622 <showNumber(unsigned int, CRGB, int)+0x7a>
  FastLEDshow();
    4688:	f7ff f824 	bl	36d4 <FastLEDshow()>
}
    468c:	b007      	add	sp, #28
    468e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4692:	bf00      	nop
    4694:	200009d8 	.word	0x200009d8
    4698:	200017b4 	.word	0x200017b4
    469c:	00000000 	.word	0x00000000

000046a0 <drawLoadingBar(int, int, int, CRGB, CRGB)>:
void drawLoadingBar(int minval, int maxval, int currentval, CRGB color, CRGB fontColor) {
    46a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    46a4:	b087      	sub	sp, #28
    46a6:	ee01 0a10 	vmov	s2, r0
    46aa:	ee02 1a10 	vmov	s4, r1
    46ae:	4690      	mov	r8, r2
    46b0:	9301      	str	r3, [sp, #4]
  int barwidth = mapf(currentval, minval, maxval, 0, maxX);
    46b2:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
    46b6:	ed9f 3b36 	vldr	d3, [pc, #216]	; 4790 <drawLoadingBar(int, int, int, CRGB, CRGB)+0xf0>
    46ba:	eeb8 2bc2 	vcvt.f64.s32	d2, s4
    46be:	eeb8 1bc1 	vcvt.f64.s32	d1, s2
    46c2:	ee07 2a90 	vmov	s15, r2
    46c6:	eeb8 0be7 	vcvt.f64.s32	d0, s15
    46ca:	f006 fffd 	bl	b6c8 <mapf(double, double, double, double, double)>
    46ce:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    46d2:	ee17 7a90 	vmov	r7, s15
  for (int x = 1; x <= maxX; x++) {
    46d6:	2401      	movs	r4, #1
        : r(ir), g(ig), b(ib)
    46d8:	2505      	movs	r5, #5
    light(x, ypos - 1, CRGB(5, 5, 5));
    46da:	2602      	movs	r6, #2
    46dc:	f88d 5008 	strb.w	r5, [sp, #8]
    46e0:	f88d 5009 	strb.w	r5, [sp, #9]
    46e4:	f88d 500a 	strb.w	r5, [sp, #10]
    46e8:	9a02      	ldr	r2, [sp, #8]
    46ea:	4631      	mov	r1, r6
    46ec:	4620      	mov	r0, r4
    46ee:	f7ff f9c5 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (int x = 1; x <= maxX; x++) {
    46f2:	3401      	adds	r4, #1
    46f4:	2c11      	cmp	r4, #17
    46f6:	d1f1      	bne.n	46dc <drawLoadingBar(int, int, int, CRGB, CRGB)+0x3c>
    46f8:	2405      	movs	r4, #5
    46fa:	f88d 400c 	strb.w	r4, [sp, #12]
    46fe:	f88d 400d 	strb.w	r4, [sp, #13]
    4702:	f88d 400e 	strb.w	r4, [sp, #14]
  light(1, ypos, CRGB(5, 5, 5));
    4706:	9a03      	ldr	r2, [sp, #12]
    4708:	2103      	movs	r1, #3
    470a:	2001      	movs	r0, #1
    470c:	f7ff f9b6 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    4710:	f88d 4010 	strb.w	r4, [sp, #16]
    4714:	f88d 4011 	strb.w	r4, [sp, #17]
    4718:	f88d 4012 	strb.w	r4, [sp, #18]
  light(maxX, ypos, CRGB(5, 5, 5));
    471c:	9a04      	ldr	r2, [sp, #16]
    471e:	2103      	movs	r1, #3
    4720:	2010      	movs	r0, #16
    4722:	f7ff f9ab 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (int x = 2; x < maxX; x++) {
    4726:	2402      	movs	r4, #2
        light(x, ypos + y, color);
    4728:	f04f 0903 	mov.w	r9, #3
    472c:	2604      	movs	r6, #4
    472e:	2500      	movs	r5, #0
    4730:	e00c      	b.n	474c <drawLoadingBar(int, int, int, CRGB, CRGB)+0xac>
    4732:	9a01      	ldr	r2, [sp, #4]
    4734:	4649      	mov	r1, r9
    4736:	4620      	mov	r0, r4
    4738:	f7ff f9a0 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    473c:	9a01      	ldr	r2, [sp, #4]
    473e:	4631      	mov	r1, r6
    4740:	4620      	mov	r0, r4
    4742:	f7ff f99b 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (int x = 2; x < maxX; x++) {
    4746:	3401      	adds	r4, #1
    4748:	2c10      	cmp	r4, #16
    474a:	d018      	beq.n	477e <drawLoadingBar(int, int, int, CRGB, CRGB)+0xde>
      if (x < barwidth) {
    474c:	42a7      	cmp	r7, r4
    474e:	dcf0      	bgt.n	4732 <drawLoadingBar(int, int, int, CRGB, CRGB)+0x92>
    4750:	f88d 5014 	strb.w	r5, [sp, #20]
    4754:	f88d 5015 	strb.w	r5, [sp, #21]
    4758:	f88d 5016 	strb.w	r5, [sp, #22]
        light(x, ypos + y, CRGB(0, 0, 0));
    475c:	9a05      	ldr	r2, [sp, #20]
    475e:	4649      	mov	r1, r9
    4760:	4620      	mov	r0, r4
    4762:	f7ff f98b 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    4766:	f88d 5014 	strb.w	r5, [sp, #20]
    476a:	f88d 5015 	strb.w	r5, [sp, #21]
    476e:	f88d 5016 	strb.w	r5, [sp, #22]
    4772:	9a05      	ldr	r2, [sp, #20]
    4774:	4631      	mov	r1, r6
    4776:	4620      	mov	r0, r4
    4778:	f7ff f980 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    477c:	e7e3      	b.n	4746 <drawLoadingBar(int, int, int, CRGB, CRGB)+0xa6>
  showNumber(currentval, fontColor, 0);
    477e:	2200      	movs	r2, #0
    4780:	990e      	ldr	r1, [sp, #56]	; 0x38
    4782:	4640      	mov	r0, r8
    4784:	f7ff ff10 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
}
    4788:	b007      	add	sp, #28
    478a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    478e:	bf00      	nop
	...

00004798 <setLastFile()>:
void setLastFile() {
    4798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    479c:	b0a1      	sub	sp, #132	; 0x84
  for (int f = 0; f <= maxFolders; f++) {
    479e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4870 <setLastFile()+0xd8>
void setLastFile() {
    47a2:	2763      	movs	r7, #99	; 0x63
  for (int f = 0; f <= maxFolders; f++) {
    47a4:	2600      	movs	r6, #0
      sprintf(OUTPUTf, "samples/%d/_%d.wav", f, i + (f * 100));
    47a6:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4874 <setLastFile()+0xdc>
    return m_fVol ? m_fVol->exists(path) :
    47aa:	4d2f      	ldr	r5, [pc, #188]	; (4868 <setLastFile()+0xd0>)
    47ac:	e04f      	b.n	484e <setLastFile()+0xb6>
           m_xVol ? m_xVol->exists(path) : false;
    47ae:	f8d5 1488 	ldr.w	r1, [r5, #1160]	; 0x488
    47b2:	b159      	cbz	r1, 47cc <setLastFile()+0x34>
    47b4:	2300      	movs	r3, #0
    47b6:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    47ba:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    47be:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
    47c2:	aa03      	add	r2, sp, #12
    47c4:	a810      	add	r0, sp, #64	; 0x40
    47c6:	f00a fc00 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    47ca:	e017      	b.n	47fc <setLastFile()+0x64>
    for (unsigned int i = 1; i < 99; i++) {
    47cc:	3401      	adds	r4, #1
    47ce:	42bc      	cmp	r4, r7
    47d0:	d019      	beq.n	4806 <setLastFile()+0x6e>
      sprintf(OUTPUTf, "samples/%d/_%d.wav", f, i + (f * 100));
    47d2:	4623      	mov	r3, r4
    47d4:	4632      	mov	r2, r6
    47d6:	4641      	mov	r1, r8
    47d8:	a803      	add	r0, sp, #12
    47da:	f01d ff91 	bl	22700 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    47de:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
    47e2:	2900      	cmp	r1, #0
    47e4:	d0e3      	beq.n	47ae <setLastFile()+0x16>
    47e6:	2300      	movs	r3, #0
    47e8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    47ec:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    47f0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
    47f4:	aa03      	add	r2, sp, #12
    47f6:	a810      	add	r0, sp, #64	; 0x40
    47f8:	f00c fb8b 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
      if (SD.exists(OUTPUTf)) {
    47fc:	2800      	cmp	r0, #0
    47fe:	d0e5      	beq.n	47cc <setLastFile()+0x34>
        lastFile[f] = i + (f * 100);
    4800:	f8c9 4000 	str.w	r4, [r9]
    4804:	e7e2      	b.n	47cc <setLastFile()+0x34>
    4806:	230f      	movs	r3, #15
    4808:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    480c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    4810:	2337      	movs	r3, #55	; 0x37
    4812:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    drawLoadingBar(1, 999, lastFile[f], col_Folder[f], CRGB(15, 15, 55));
    4816:	4815      	ldr	r0, [pc, #84]	; (486c <setLastFile()+0xd4>)
    4818:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    481c:	1842      	adds	r2, r0, r1
    481e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    4820:	f8ad 3000 	strh.w	r3, [sp]
    4824:	0c1b      	lsrs	r3, r3, #16
    4826:	f88d 3002 	strb.w	r3, [sp, #2]
    482a:	5c43      	ldrb	r3, [r0, r1]
    482c:	7851      	ldrb	r1, [r2, #1]
    482e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    4832:	7892      	ldrb	r2, [r2, #2]
    4834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    4838:	f859 2b04 	ldr.w	r2, [r9], #4
    483c:	f240 31e7 	movw	r1, #999	; 0x3e7
    4840:	2001      	movs	r0, #1
    4842:	f7ff ff2d 	bl	46a0 <drawLoadingBar(int, int, int, CRGB, CRGB)>
  for (int f = 0; f <= maxFolders; f++) {
    4846:	3601      	adds	r6, #1
    4848:	3764      	adds	r7, #100	; 0x64
    484a:	2e0a      	cmp	r6, #10
    484c:	d004      	beq.n	4858 <setLastFile()+0xc0>
    FastLEDclear();
    484e:	f7fe ff39 	bl	36c4 <FastLEDclear()>
    for (unsigned int i = 1; i < 99; i++) {
    4852:	f1a7 0462 	sub.w	r4, r7, #98	; 0x62
    4856:	e7bc      	b.n	47d2 <setLastFile()+0x3a>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    4858:	2224      	movs	r2, #36	; 0x24
    485a:	2164      	movs	r1, #100	; 0x64
    485c:	4804      	ldr	r0, [pc, #16]	; (4870 <setLastFile()+0xd8>)
    485e:	f012 fc9b 	bl	17198 <eeprom_write_block>
}
    4862:	b021      	add	sp, #132	; 0x84
    4864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4868:	20006678 	.word	0x20006678
    486c:	20000e68 	.word	0x20000e68
    4870:	20007b08 	.word	0x20007b08
    4874:	20000bd0 	.word	0x20000bd0

00004878 <drawNoSD()>:
void drawNoSD() {
    4878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    487c:	b083      	sub	sp, #12
  bool noSDfound = false;
    487e:	2400      	movs	r4, #0
  while (!SD.begin(SD_SLOT)) {
    4880:	f8df 9070 	ldr.w	r9, [pc, #112]	; 48f4 <drawNoSD()+0x7c>
    4884:	f04f 08fe 	mov.w	r8, #254	; 0xfe
    4888:	2732      	movs	r7, #50	; 0x32
    488a:	e006      	b.n	489a <drawNoSD()+0x22>
    FastLEDshow();
    488c:	f7fe ff22 	bl	36d4 <FastLEDshow()>
    delay(1000);
    4890:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4894:	f012 f9ee 	bl	16c74 <delay>
    noSDfound = true;
    4898:	2401      	movs	r4, #1
  while (!SD.begin(SD_SLOT)) {
    489a:	4641      	mov	r1, r8
    489c:	4648      	mov	r0, r9
    489e:	f009 fdab 	bl	e3f8 <SDClass::begin(unsigned char)>
    48a2:	b9b0      	cbnz	r0, 48d2 <drawNoSD()+0x5a>
    FastLEDclear();
    48a4:	f7fe ff0e 	bl	36c4 <FastLEDclear()>
    for (unsigned int gx = 0; gx < 48; gx++) {
    48a8:	4c11      	ldr	r4, [pc, #68]	; (48f0 <drawNoSD()+0x78>)
    48aa:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    48ae:	2500      	movs	r5, #0
      light(noSD[gx][0], maxY - noSD[gx][1], CRGB(50, 0, 0));
    48b0:	6861      	ldr	r1, [r4, #4]
    48b2:	f88d 7004 	strb.w	r7, [sp, #4]
    48b6:	f88d 5005 	strb.w	r5, [sp, #5]
    48ba:	f88d 5006 	strb.w	r5, [sp, #6]
    48be:	9a01      	ldr	r2, [sp, #4]
    48c0:	f1c1 0110 	rsb	r1, r1, #16
    48c4:	6820      	ldr	r0, [r4, #0]
    48c6:	f7ff f8d9 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int gx = 0; gx < 48; gx++) {
    48ca:	3408      	adds	r4, #8
    48cc:	42b4      	cmp	r4, r6
    48ce:	d1ef      	bne.n	48b0 <drawNoSD()+0x38>
    48d0:	e7dc      	b.n	488c <drawNoSD()+0x14>
  if (noSDfound && SD.begin(SD_SLOT)) {
    48d2:	b914      	cbnz	r4, 48da <drawNoSD()+0x62>
}
    48d4:	b003      	add	sp, #12
    48d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (noSDfound && SD.begin(SD_SLOT)) {
    48da:	21fe      	movs	r1, #254	; 0xfe
    48dc:	4805      	ldr	r0, [pc, #20]	; (48f4 <drawNoSD()+0x7c>)
    48de:	f009 fd8b 	bl	e3f8 <SDClass::begin(unsigned char)>
    48e2:	2800      	cmp	r0, #0
    48e4:	d0f6      	beq.n	48d4 <drawNoSD()+0x5c>
    FastLEDclear();
    48e6:	f7fe feed 	bl	36c4 <FastLEDclear()>
    setLastFile();
    48ea:	f7ff ff55 	bl	4798 <setLastFile()>
}
    48ee:	e7f1      	b.n	48d4 <drawNoSD()+0x5c>
    48f0:	20001634 	.word	0x20001634
    48f4:	20006678 	.word	0x20006678

000048f8 <getLastFiles()>:
void getLastFiles() {
    48f8:	b570      	push	{r4, r5, r6, lr}
        uint8_t *ptr = (uint8_t*) &t;
    48fa:	4c09      	ldr	r4, [pc, #36]	; (4920 <getLastFiles()+0x28>)
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    48fc:	4625      	mov	r5, r4
    48fe:	f1c4 0664 	rsb	r6, r4, #100	; 0x64
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    4902:	3524      	adds	r5, #36	; 0x24
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    4904:	19a0      	adds	r0, r4, r6
    4906:	f012 fa99 	bl	16e3c <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    490a:	f804 0b01 	strb.w	r0, [r4], #1
    490e:	42ac      	cmp	r4, r5
    4910:	d1f8      	bne.n	4904 <getLastFiles()+0xc>
  if (lastFile[0] == 0) {
    4912:	4b03      	ldr	r3, [pc, #12]	; (4920 <getLastFiles()+0x28>)
    4914:	681b      	ldr	r3, [r3, #0]
    4916:	b103      	cbz	r3, 491a <getLastFiles()+0x22>
}
    4918:	bd70      	pop	{r4, r5, r6, pc}
    setLastFile();
    491a:	f7ff ff3d 	bl	4798 <setLastFile()>
}
    491e:	e7fb      	b.n	4918 <getLastFiles()+0x20>
    4920:	20007b08 	.word	0x20007b08

00004924 <showIntro()>:
void showIntro() {
    4924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4928:	b088      	sub	sp, #32
  FastLED.clear();
    492a:	4c65      	ldr	r4, [pc, #404]	; (4ac0 <showIntro()+0x19c>)
    492c:	2100      	movs	r1, #0
    492e:	4620      	mov	r0, r4
    4930:	f007 fb72 	bl	c018 <CFastLED::clear(bool)>
    4934:	7821      	ldrb	r1, [r4, #0]
    4936:	4620      	mov	r0, r4
    4938:	f007 fa8c 	bl	be54 <CFastLED::show(unsigned char)>
  for (int gx = 0; gx < 102; gx++) {
    493c:	4c61      	ldr	r4, [pc, #388]	; (4ac4 <showIntro()+0x1a0>)
    493e:	f504 784c 	add.w	r8, r4, #816	; 0x330
    4942:	2596      	movs	r5, #150	; 0x96
    4944:	4e5e      	ldr	r6, [pc, #376]	; (4ac0 <showIntro()+0x19c>)
    delay(20);
    4946:	2714      	movs	r7, #20
    light(logo[gx][0], maxY - logo[gx][1], CRGB(150, 150, 150));
    4948:	6861      	ldr	r1, [r4, #4]
    494a:	f88d 5004 	strb.w	r5, [sp, #4]
    494e:	f88d 5005 	strb.w	r5, [sp, #5]
    4952:	f88d 5006 	strb.w	r5, [sp, #6]
    4956:	9a01      	ldr	r2, [sp, #4]
    4958:	f1c1 0110 	rsb	r1, r1, #16
    495c:	6820      	ldr	r0, [r4, #0]
    495e:	f7ff f88d 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    4962:	7831      	ldrb	r1, [r6, #0]
    4964:	4630      	mov	r0, r6
    4966:	f007 fa75 	bl	be54 <CFastLED::show(unsigned char)>
    delay(20);
    496a:	4638      	mov	r0, r7
    496c:	f012 f982 	bl	16c74 <delay>
  for (int gx = 0; gx < 102; gx++) {
    4970:	3408      	adds	r4, #8
    4972:	4544      	cmp	r4, r8
    4974:	d1e8      	bne.n	4948 <showIntro()+0x24>
  delay(200);
    4976:	20c8      	movs	r0, #200	; 0xc8
    4978:	f012 f97c 	bl	16c74 <delay>
    497c:	f44f 7480 	mov.w	r4, #256	; 0x100
    4980:	4d4f      	ldr	r5, [pc, #316]	; (4ac0 <showIntro()+0x19c>)
    delay(50);
    4982:	2632      	movs	r6, #50	; 0x32
/// @param scale scale factor, in n/256 units
LIB8STATIC void nscale8x3(uint8_t &r, uint8_t &g, uint8_t &b, fract8 scale) {
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    4984:	4621      	mov	r1, r4
    4986:	4b50      	ldr	r3, [pc, #320]	; (4ac8 <showIntro()+0x1a4>)
    4988:	f503 7040 	add.w	r0, r3, #768	; 0x300
    498c:	781a      	ldrb	r2, [r3, #0]
    498e:	fb01 f202 	mul.w	r2, r1, r2
    4992:	1212      	asrs	r2, r2, #8
    4994:	701a      	strb	r2, [r3, #0]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    4996:	785a      	ldrb	r2, [r3, #1]
    4998:	fb01 f202 	mul.w	r2, r1, r2
    499c:	1212      	asrs	r2, r2, #8
    499e:	705a      	strb	r2, [r3, #1]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    49a0:	789a      	ldrb	r2, [r3, #2]
    49a2:	fb01 f202 	mul.w	r2, r1, r2
    49a6:	1212      	asrs	r2, r2, #8
    49a8:	709a      	strb	r2, [r3, #2]
    for (int u = 0; u < NUM_LEDS; u++) {
    49aa:	3303      	adds	r3, #3
    49ac:	4283      	cmp	r3, r0
    49ae:	d1ed      	bne.n	498c <showIntro()+0x68>
    49b0:	7829      	ldrb	r1, [r5, #0]
    49b2:	4628      	mov	r0, r5
    49b4:	f007 fa4e 	bl	be54 <CFastLED::show(unsigned char)>
    delay(50);
    49b8:	4630      	mov	r0, r6
    49ba:	f012 f95b 	bl	16c74 <delay>
  for (int fade = 0; fade < 10 + 1; fade++) {
    49be:	3c0a      	subs	r4, #10
    49c0:	2c92      	cmp	r4, #146	; 0x92
    49c2:	d1df      	bne.n	4984 <showIntro()+0x60>
  for (int y = -15; y < 3; y++) {
    49c4:	f06f 040e 	mvn.w	r4, #14
    FastLED.clear();
    49c8:	4f3d      	ldr	r7, [pc, #244]	; (4ac0 <showIntro()+0x19c>)
    49ca:	2500      	movs	r5, #0
    showNumber(101, CRGB(0, 0, 15), y - 2);
    49cc:	2665      	movs	r6, #101	; 0x65
    FastLED.clear();
    49ce:	4629      	mov	r1, r5
    49d0:	4638      	mov	r0, r7
    49d2:	f007 fb21 	bl	c018 <CFastLED::clear(bool)>
    49d6:	f88d 5008 	strb.w	r5, [sp, #8]
    49da:	f88d 5009 	strb.w	r5, [sp, #9]
    49de:	f04f 080f 	mov.w	r8, #15
    49e2:	f88d 800a 	strb.w	r8, [sp, #10]
    showNumber(101, CRGB(0, 0, 15), y - 2);
    49e6:	1ea2      	subs	r2, r4, #2
    49e8:	9902      	ldr	r1, [sp, #8]
    49ea:	4630      	mov	r0, r6
    49ec:	f7ff fddc 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    49f0:	230a      	movs	r3, #10
    49f2:	f88d 300c 	strb.w	r3, [sp, #12]
    49f6:	2305      	movs	r3, #5
    49f8:	f88d 300d 	strb.w	r3, [sp, #13]
    49fc:	f88d 500e 	strb.w	r5, [sp, #14]
    showNumber(101, CRGB(10, 5, 0), y - 1);
    4a00:	1e62      	subs	r2, r4, #1
    4a02:	9903      	ldr	r1, [sp, #12]
    4a04:	4630      	mov	r0, r6
    4a06:	f7ff fdcf 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    4a0a:	f88d 8010 	strb.w	r8, [sp, #16]
    4a0e:	f88d 5011 	strb.w	r5, [sp, #17]
    4a12:	f88d 5012 	strb.w	r5, [sp, #18]
    showNumber(101, CRGB(15, 0, 0), y);
    4a16:	4622      	mov	r2, r4
    4a18:	9904      	ldr	r1, [sp, #16]
    4a1a:	4630      	mov	r0, r6
    4a1c:	f7ff fdc4 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    4a20:	7839      	ldrb	r1, [r7, #0]
    4a22:	4638      	mov	r0, r7
    4a24:	f007 fa16 	bl	be54 <CFastLED::show(unsigned char)>
    delay(50);
    4a28:	2032      	movs	r0, #50	; 0x32
    4a2a:	f012 f923 	bl	16c74 <delay>
  for (int y = -15; y < 3; y++) {
    4a2e:	3401      	adds	r4, #1
    4a30:	2c03      	cmp	r4, #3
    4a32:	d1cc      	bne.n	49ce <showIntro()+0xaa>
  delay(200);
    4a34:	20c8      	movs	r0, #200	; 0xc8
    4a36:	f012 f91d 	bl	16c74 <delay>
    FastLED.clear();
    4a3a:	4f21      	ldr	r7, [pc, #132]	; (4ac0 <showIntro()+0x19c>)
    4a3c:	2500      	movs	r5, #0
    showNumber(101, CRGB(0, 0, 15), y - 2);
    4a3e:	2665      	movs	r6, #101	; 0x65
    FastLED.clear();
    4a40:	4629      	mov	r1, r5
    4a42:	4638      	mov	r0, r7
    4a44:	f007 fae8 	bl	c018 <CFastLED::clear(bool)>
    4a48:	f88d 5014 	strb.w	r5, [sp, #20]
    4a4c:	f88d 5015 	strb.w	r5, [sp, #21]
    4a50:	f04f 080f 	mov.w	r8, #15
    4a54:	f88d 8016 	strb.w	r8, [sp, #22]
    showNumber(101, CRGB(0, 0, 15), y - 2);
    4a58:	1ea2      	subs	r2, r4, #2
    4a5a:	9905      	ldr	r1, [sp, #20]
    4a5c:	4630      	mov	r0, r6
    4a5e:	f7ff fda3 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    4a62:	230a      	movs	r3, #10
    4a64:	f88d 3018 	strb.w	r3, [sp, #24]
    4a68:	2305      	movs	r3, #5
    4a6a:	f88d 3019 	strb.w	r3, [sp, #25]
    4a6e:	f88d 501a 	strb.w	r5, [sp, #26]
    showNumber(101, CRGB(10, 5, 0), y - 1);
    4a72:	1e62      	subs	r2, r4, #1
    4a74:	9906      	ldr	r1, [sp, #24]
    4a76:	4630      	mov	r0, r6
    4a78:	f7ff fd96 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    4a7c:	f88d 801c 	strb.w	r8, [sp, #28]
    4a80:	f88d 501d 	strb.w	r5, [sp, #29]
    4a84:	f88d 501e 	strb.w	r5, [sp, #30]
    showNumber(101, CRGB(15, 0, 0), y);
    4a88:	4622      	mov	r2, r4
    4a8a:	9907      	ldr	r1, [sp, #28]
    4a8c:	4630      	mov	r0, r6
    4a8e:	f7ff fd8b 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    4a92:	7839      	ldrb	r1, [r7, #0]
    4a94:	4638      	mov	r0, r7
    4a96:	f007 f9dd 	bl	be54 <CFastLED::show(unsigned char)>
    delay(50);
    4a9a:	2032      	movs	r0, #50	; 0x32
    4a9c:	f012 f8ea 	bl	16c74 <delay>
  for (int y = 3; y < 16; y++) {
    4aa0:	3401      	adds	r4, #1
    4aa2:	2c10      	cmp	r4, #16
    4aa4:	d1cc      	bne.n	4a40 <showIntro()+0x11c>
  FastLED.clear();
    4aa6:	4c06      	ldr	r4, [pc, #24]	; (4ac0 <showIntro()+0x19c>)
    4aa8:	2100      	movs	r1, #0
    4aaa:	4620      	mov	r0, r4
    4aac:	f007 fab4 	bl	c018 <CFastLED::clear(bool)>
    4ab0:	7821      	ldrb	r1, [r4, #0]
    4ab2:	4620      	mov	r0, r4
    4ab4:	f007 f9ce 	bl	be54 <CFastLED::show(unsigned char)>
}
    4ab8:	b008      	add	sp, #32
    4aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4abe:	bf00      	nop
    4ac0:	20006668 	.word	0x20006668
    4ac4:	20001304 	.word	0x20001304
    4ac8:	20007b30 	.word	0x20007b30

00004acc <drawVelocity(CRGB)>:
void drawVelocity(CRGB color) {
    4acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4ad0:	b084      	sub	sp, #16
    4ad2:	9001      	str	r0, [sp, #4]
  FastLEDclear();
    4ad4:	f7fe fdf6 	bl	36c4 <FastLEDclear()>
  unsigned int vy = currentMode->pos[2];
    4ad8:	4b22      	ldr	r3, [pc, #136]	; (4b64 <drawVelocity(CRGB)+0x98>)
    4ada:	681b      	ldr	r3, [r3, #0]
    4adc:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (!SMP.singleMode) {
    4ade:	4b22      	ldr	r3, [pc, #136]	; (4b68 <drawVelocity(CRGB)+0x9c>)
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	bbcb      	cbnz	r3, 4b58 <drawVelocity(CRGB)+0x8c>
    for (unsigned int y = 1; y < vy + 1; y++) {
    4ae4:	1c73      	adds	r3, r6, #1
    4ae6:	2b01      	cmp	r3, #1
    4ae8:	d917      	bls.n	4b1a <drawVelocity(CRGB)+0x4e>
    4aea:	2401      	movs	r4, #1
      light(SMP.x, y, CRGB(y * y, 20 - y, 0));
    4aec:	4f1e      	ldr	r7, [pc, #120]	; (4b68 <drawVelocity(CRGB)+0x9c>)
    4aee:	2500      	movs	r5, #0
    4af0:	b2e3      	uxtb	r3, r4
    4af2:	fb13 f203 	smulbb	r2, r3, r3
    4af6:	f88d 2008 	strb.w	r2, [sp, #8]
    4afa:	f1c3 0314 	rsb	r3, r3, #20
    4afe:	f88d 3009 	strb.w	r3, [sp, #9]
    4b02:	f88d 500a 	strb.w	r5, [sp, #10]
    4b06:	9a02      	ldr	r2, [sp, #8]
    4b08:	4621      	mov	r1, r4
    4b0a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
    4b0e:	f7fe ffb5 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int y = 1; y < vy + 1; y++) {
    4b12:	42a6      	cmp	r6, r4
    4b14:	f104 0401 	add.w	r4, r4, #1
    4b18:	d1ea      	bne.n	4af0 <drawVelocity(CRGB)+0x24>
}
    4b1a:	b004      	add	sp, #16
    4b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      for (unsigned int y = 1; y < vy + 1; y++) {
    4b20:	2401      	movs	r4, #1
        light(x, y, CRGB(y * y, 20 - y, 0));
    4b22:	b2e3      	uxtb	r3, r4
    4b24:	fb13 f203 	smulbb	r2, r3, r3
    4b28:	f88d 200c 	strb.w	r2, [sp, #12]
    4b2c:	f1c3 0314 	rsb	r3, r3, #20
    4b30:	f88d 300d 	strb.w	r3, [sp, #13]
    4b34:	f88d 700e 	strb.w	r7, [sp, #14]
    4b38:	9a03      	ldr	r2, [sp, #12]
    4b3a:	4621      	mov	r1, r4
    4b3c:	4628      	mov	r0, r5
    4b3e:	f7fe ff9d 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
      for (unsigned int y = 1; y < vy + 1; y++) {
    4b42:	42a6      	cmp	r6, r4
    4b44:	f104 0401 	add.w	r4, r4, #1
    4b48:	d1eb      	bne.n	4b22 <drawVelocity(CRGB)+0x56>
    for (unsigned int x = 1; x < maxX + 1; x++) {
    4b4a:	3501      	adds	r5, #1
    4b4c:	2d11      	cmp	r5, #17
    4b4e:	d0e4      	beq.n	4b1a <drawVelocity(CRGB)+0x4e>
      for (unsigned int y = 1; y < vy + 1; y++) {
    4b50:	f1b8 0f01 	cmp.w	r8, #1
    4b54:	d8e4      	bhi.n	4b20 <drawVelocity(CRGB)+0x54>
    4b56:	e7f8      	b.n	4b4a <drawVelocity(CRGB)+0x7e>
    for (unsigned int x = 1; x < maxX + 1; x++) {
    4b58:	2501      	movs	r5, #1
      for (unsigned int y = 1; y < vy + 1; y++) {
    4b5a:	eb06 0805 	add.w	r8, r6, r5
    4b5e:	2700      	movs	r7, #0
    4b60:	e7f6      	b.n	4b50 <drawVelocity(CRGB)+0x84>
    4b62:	bf00      	nop
    4b64:	200057ec 	.word	0x200057ec
    4b68:	70000000 	.word	0x70000000
    4b6c:	00000000 	.word	0x00000000

00004b70 <setVelocity()>:
void setVelocity() {
    4b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b74:	ed2d 8b04 	vpush	{d8-d9}
    4b78:	b08a      	sub	sp, #40	; 0x28
  if (currentMode->pos[2] != SMP.velocity) {
    4b7a:	4b45      	ldr	r3, [pc, #276]	; (4c90 <setVelocity()+0x120>)
    4b7c:	681b      	ldr	r3, [r3, #0]
    4b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    4b80:	4a44      	ldr	r2, [pc, #272]	; (4c94 <setVelocity()+0x124>)
    4b82:	6912      	ldr	r2, [r2, #16]
    4b84:	4293      	cmp	r3, r2
    4b86:	d021      	beq.n	4bcc <setVelocity()+0x5c>
    if (!SMP.singleMode) {
    4b88:	4a42      	ldr	r2, [pc, #264]	; (4c94 <setVelocity()+0x124>)
    4b8a:	6812      	ldr	r2, [r2, #0]
    4b8c:	bb72      	cbnz	r2, 4bec <setVelocity()+0x7c>
      note[SMP.x][SMP.y][1] = round(mapf(currentMode->pos[2], 1, maxY, 1, 127));
    4b8e:	ed9f 4b3e 	vldr	d4, [pc, #248]	; 4c88 <setVelocity()+0x118>
    4b92:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    4b96:	eeb3 2b00 	vmov.f64	d2, #48	; 0x41800000  16.0
    4b9a:	eeb0 1b43 	vmov.f64	d1, d3
    4b9e:	ee07 3a90 	vmov	s15, r3
    4ba2:	eeb8 0b67 	vcvt.f64.u32	d0, s15
    4ba6:	f006 fd8f 	bl	b6c8 <mapf(double, double, double, double, double)>
    4baa:	feb8 7b40 	vrinta.f64	d7, d0
    4bae:	4a39      	ldr	r2, [pc, #228]	; (4c94 <setVelocity()+0x124>)
    4bb0:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
    4bb4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    4bb8:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
    4bbc:	4413      	add	r3, r2
    4bbe:	4a36      	ldr	r2, [pc, #216]	; (4c98 <setVelocity()+0x128>)
    4bc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4bc4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
    4bc8:	ed83 7a01 	vstr	s14, [r3, #4]
    4bcc:	2300      	movs	r3, #0
    4bce:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    4bd2:	2228      	movs	r2, #40	; 0x28
    4bd4:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    4bd8:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  drawVelocity(CRGB(0, 40, 0));
    4bdc:	9809      	ldr	r0, [sp, #36]	; 0x24
    4bde:	f7ff ff75 	bl	4acc <drawVelocity(CRGB)>
}
    4be2:	b00a      	add	sp, #40	; 0x28
    4be4:	ecbd 8b04 	vpop	{d8-d9}
    4be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	StringSumHelper(const char *p) : String(p) {}
    4bec:	492b      	ldr	r1, [pc, #172]	; (4c9c <setVelocity()+0x12c>)
    4bee:	a803      	add	r0, sp, #12
    4bf0:	f011 fdb1 	bl	16756 <String::String(char const*)>
      serialprintln("Overal Velocity: " + String(currentMode->pos[2]));
    4bf4:	4b26      	ldr	r3, [pc, #152]	; (4c90 <setVelocity()+0x120>)
    4bf6:	681b      	ldr	r3, [r3, #0]
    4bf8:	220a      	movs	r2, #10
    4bfa:	6b59      	ldr	r1, [r3, #52]	; 0x34
    4bfc:	a806      	add	r0, sp, #24
    4bfe:	f011 fdf3 	bl	167e8 <String::String(unsigned int, unsigned char)>
    4c02:	a906      	add	r1, sp, #24
    4c04:	a803      	add	r0, sp, #12
    4c06:	f011 fe4c 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    4c0a:	4601      	mov	r1, r0
class StringSumHelper : public String
    4c0c:	4668      	mov	r0, sp
    4c0e:	f011 fdbe 	bl	1678e <String::String(String const&)>
    4c12:	4668      	mov	r0, sp
    4c14:	f011 fd56 	bl	166c4 <String::~String()>
    4c18:	a806      	add	r0, sp, #24
    4c1a:	f011 fd53 	bl	166c4 <String::~String()>
    4c1e:	a803      	add	r0, sp, #12
    4c20:	f011 fd50 	bl	166c4 <String::~String()>
      for (unsigned int nx = 1; nx < maxlen; nx++) {
    4c24:	4b1c      	ldr	r3, [pc, #112]	; (4c98 <setVelocity()+0x128>)
    4c26:	f503 7584 	add.w	r5, r3, #264	; 0x108
    4c2a:	f244 5808 	movw	r8, #17672	; 0x4508
    4c2e:	4498      	add	r8, r3
          if (note[nx][ny][0] == SMP.currentChannel)
    4c30:	4e18      	ldr	r6, [pc, #96]	; (4c94 <setVelocity()+0x124>)
            note[nx][ny][1] = round(mapf(currentMode->pos[2], 1, maxY, 1, 127));
    4c32:	ed9f 9b15 	vldr	d9, [pc, #84]	; 4c88 <setVelocity()+0x118>
    4c36:	4f16      	ldr	r7, [pc, #88]	; (4c90 <setVelocity()+0x120>)
    4c38:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
    4c3c:	e01f      	b.n	4c7e <setVelocity()+0x10e>
        for (unsigned int ny = 1; ny < maxY + 1; ny++) {
    4c3e:	3408      	adds	r4, #8
    4c40:	42ac      	cmp	r4, r5
    4c42:	d019      	beq.n	4c78 <setVelocity()+0x108>
          if (note[nx][ny][0] == SMP.currentChannel)
    4c44:	68a2      	ldr	r2, [r4, #8]
    4c46:	6873      	ldr	r3, [r6, #4]
    4c48:	429a      	cmp	r2, r3
    4c4a:	d1f8      	bne.n	4c3e <setVelocity()+0xce>
            note[nx][ny][1] = round(mapf(currentMode->pos[2], 1, maxY, 1, 127));
    4c4c:	683b      	ldr	r3, [r7, #0]
    4c4e:	ed93 0a0d 	vldr	s0, [r3, #52]	; 0x34
    4c52:	eeb0 4b49 	vmov.f64	d4, d9
    4c56:	eeb0 3b48 	vmov.f64	d3, d8
    4c5a:	eeb3 2b00 	vmov.f64	d2, #48	; 0x41800000  16.0
    4c5e:	eeb0 1b48 	vmov.f64	d1, d8
    4c62:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    4c66:	f006 fd2f 	bl	b6c8 <mapf(double, double, double, double, double)>
    4c6a:	feb8 0b40 	vrinta.f64	d0, d0
    4c6e:	eebc 0bc0 	vcvt.u32.f64	s0, d0
    4c72:	ed84 0a03 	vstr	s0, [r4, #12]
    4c76:	e7e2      	b.n	4c3e <setVelocity()+0xce>
      for (unsigned int nx = 1; nx < maxlen; nx++) {
    4c78:	3588      	adds	r5, #136	; 0x88
    4c7a:	4545      	cmp	r5, r8
    4c7c:	d0a6      	beq.n	4bcc <setVelocity()+0x5c>
        for (unsigned int ny = 1; ny < maxY + 1; ny++) {
    4c7e:	f1a5 0480 	sub.w	r4, r5, #128	; 0x80
    4c82:	e7df      	b.n	4c44 <setVelocity()+0xd4>
    4c84:	f3af 8000 	nop.w
    4c88:	00000000 	.word	0x00000000
    4c8c:	405fc000 	.word	0x405fc000
    4c90:	200057ec 	.word	0x200057ec
    4c94:	70000000 	.word	0x70000000
    4c98:	70db37d8 	.word	0x70db37d8
    4c9c:	20000ba4 	.word	0x20000ba4

00004ca0 <drawStatus()>:
void drawStatus() {
    4ca0:	b570      	push	{r4, r5, r6, lr}
    4ca2:	b084      	sub	sp, #16
  CRGB ledColor = CRGB(0, 0, 0);
    4ca4:	2300      	movs	r3, #0
    4ca6:	f88d 3004 	strb.w	r3, [sp, #4]
    4caa:	f88d 3005 	strb.w	r3, [sp, #5]
    4cae:	f88d 3006 	strb.w	r3, [sp, #6]
  if (SMP.activeCopy)
    4cb2:	4b3f      	ldr	r3, [pc, #252]	; (4db0 <drawStatus()+0x110>)
    4cb4:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    4cb8:	b123      	cbz	r3, 4cc4 <drawStatus()+0x24>
    ledColor = CRGB(20, 20, 0);
    4cba:	2314      	movs	r3, #20
    4cbc:	f88d 3004 	strb.w	r3, [sp, #4]
    4cc0:	f88d 3005 	strb.w	r3, [sp, #5]
void drawStatus() {
    4cc4:	2409      	movs	r4, #9
    light(s, maxY, ledColor);
    4cc6:	2510      	movs	r5, #16
    4cc8:	9a01      	ldr	r2, [sp, #4]
    4cca:	4629      	mov	r1, r5
    4ccc:	4620      	mov	r0, r4
    4cce:	f7fe fed5 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int s = 9; s <= maxX; s++) {
    4cd2:	3401      	adds	r4, #1
    4cd4:	2c11      	cmp	r4, #17
    4cd6:	d1f7      	bne.n	4cc8 <drawStatus()+0x28>
  if (currentMode == &noteShift) {
    4cd8:	4b36      	ldr	r3, [pc, #216]	; (4db4 <drawStatus()+0x114>)
    4cda:	681a      	ldr	r2, [r3, #0]
    4cdc:	4b36      	ldr	r3, [pc, #216]	; (4db8 <drawStatus()+0x118>)
    4cde:	429a      	cmp	r2, r3
    4ce0:	d001      	beq.n	4ce6 <drawStatus()+0x46>
}
    4ce2:	b004      	add	sp, #16
    4ce4:	bd70      	pop	{r4, r5, r6, pc}
    for (unsigned int x = 9; x <= maxX; x++) {
    4ce6:	2409      	movs	r4, #9
    4ce8:	2500      	movs	r5, #0
      light(x, maxY, CRGB(0, 0, 0));
    4cea:	2610      	movs	r6, #16
    4cec:	f88d 5008 	strb.w	r5, [sp, #8]
    4cf0:	f88d 5009 	strb.w	r5, [sp, #9]
    4cf4:	f88d 500a 	strb.w	r5, [sp, #10]
    4cf8:	9a02      	ldr	r2, [sp, #8]
    4cfa:	4631      	mov	r1, r6
    4cfc:	4620      	mov	r0, r4
    4cfe:	f7fe febd 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int x = 9; x <= maxX; x++) {
    4d02:	3401      	adds	r4, #1
    4d04:	2c11      	cmp	r4, #17
    4d06:	d1f1      	bne.n	4cec <drawStatus()+0x4c>
    light(round(marqueePos), maxY, CRGB(20, 20, 20));
    4d08:	4b2c      	ldr	r3, [pc, #176]	; (4dbc <drawStatus()+0x11c>)
    4d0a:	edd3 7a00 	vldr	s15, [r3]
    4d0e:	fef8 7a67 	vrinta.f32	s15, s15
    4d12:	2314      	movs	r3, #20
    4d14:	f88d 300c 	strb.w	r3, [sp, #12]
    4d18:	f88d 300d 	strb.w	r3, [sp, #13]
    4d1c:	f88d 300e 	strb.w	r3, [sp, #14]
    4d20:	9a03      	ldr	r2, [sp, #12]
    4d22:	2110      	movs	r1, #16
    4d24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4d28:	ee17 0a90 	vmov	r0, s15
    4d2c:	f7fe fea6 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    if (movingForward) {
    4d30:	4b23      	ldr	r3, [pc, #140]	; (4dc0 <drawStatus()+0x120>)
    4d32:	781b      	ldrb	r3, [r3, #0]
    4d34:	b1e3      	cbz	r3, 4d70 <drawStatus()+0xd0>
      marqueePos = marqueePos + 0.1;
    4d36:	4b21      	ldr	r3, [pc, #132]	; (4dbc <drawStatus()+0x11c>)
    4d38:	ed93 7a00 	vldr	s14, [r3]
    4d3c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4d40:	ed9f 6b19 	vldr	d6, [pc, #100]	; 4da8 <drawStatus()+0x108>
    4d44:	ee37 7b06 	vadd.f64	d7, d7, d6
    4d48:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      if (marqueePos > maxX) {
    4d4c:	eef3 7a00 	vmov.f32	s15, #48	; 0x41800000  16.0
    4d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d58:	dc02      	bgt.n	4d60 <drawStatus()+0xc0>
      marqueePos = marqueePos + 0.1;
    4d5a:	ed83 7a00 	vstr	s14, [r3]
    4d5e:	e7c0      	b.n	4ce2 <drawStatus()+0x42>
        marqueePos = maxX;
    4d60:	4b16      	ldr	r3, [pc, #88]	; (4dbc <drawStatus()+0x11c>)
    4d62:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
    4d66:	601a      	str	r2, [r3, #0]
        movingForward = false;
    4d68:	4b15      	ldr	r3, [pc, #84]	; (4dc0 <drawStatus()+0x120>)
    4d6a:	2200      	movs	r2, #0
    4d6c:	701a      	strb	r2, [r3, #0]
    4d6e:	e7b8      	b.n	4ce2 <drawStatus()+0x42>
      marqueePos = marqueePos - 0.1;
    4d70:	4b12      	ldr	r3, [pc, #72]	; (4dbc <drawStatus()+0x11c>)
    4d72:	ed93 7a00 	vldr	s14, [r3]
    4d76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    4d7a:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 4da8 <drawStatus()+0x108>
    4d7e:	ee37 7b46 	vsub.f64	d7, d7, d6
    4d82:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
      if (marqueePos < 9) {
    4d86:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
    4d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4d92:	d402      	bmi.n	4d9a <drawStatus()+0xfa>
      marqueePos = marqueePos - 0.1;
    4d94:	ed83 7a00 	vstr	s14, [r3]
    4d98:	e7a3      	b.n	4ce2 <drawStatus()+0x42>
        marqueePos = 9;
    4d9a:	4b08      	ldr	r3, [pc, #32]	; (4dbc <drawStatus()+0x11c>)
    4d9c:	4a09      	ldr	r2, [pc, #36]	; (4dc4 <drawStatus()+0x124>)
    4d9e:	601a      	str	r2, [r3, #0]
        movingForward = true;
    4da0:	4b07      	ldr	r3, [pc, #28]	; (4dc0 <drawStatus()+0x120>)
    4da2:	2201      	movs	r2, #1
    4da4:	701a      	strb	r2, [r3, #0]
}
    4da6:	e79c      	b.n	4ce2 <drawStatus()+0x42>
    4da8:	9999999a 	.word	0x9999999a
    4dac:	3fb99999 	.word	0x3fb99999
    4db0:	70000000 	.word	0x70000000
    4db4:	200057ec 	.word	0x200057ec
    4db8:	20005ac4 	.word	0x20005ac4
    4dbc:	20005a84 	.word	0x20005a84
    4dc0:	20005c8a 	.word	0x20005c8a
    4dc4:	41100000 	.word	0x41100000

00004dc8 <updateLastPage()>:
void updateLastPage() {
    4dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
  lastPage = 1;  // Reset lastPage before starting
    4dca:	2301      	movs	r3, #1
    4dcc:	4a15      	ldr	r2, [pc, #84]	; (4e24 <updateLastPage()+0x5c>)
    4dce:	6013      	str	r3, [r2, #0]
  for (unsigned int p = 1; p <= maxPages; p++) {
    4dd0:	4e15      	ldr	r6, [pc, #84]	; (4e28 <updateLastPage()+0x60>)
    4dd2:	4816      	ldr	r0, [pc, #88]	; (4e2c <updateLastPage()+0x64>)
  lastPage = 1;  // Reset lastPage before starting
    4dd4:	2500      	movs	r5, #0
  for (unsigned int p = 1; p <= maxPages; p++) {
    4dd6:	469e      	mov	lr, r3
    4dd8:	469c      	mov	ip, r3
    4dda:	462a      	mov	r2, r5
    4ddc:	e016      	b.n	4e0c <updateLastPage()+0x44>
    for (unsigned int ix = 1; ix <= maxX; ix++) {
    4dde:	3188      	adds	r1, #136	; 0x88
    4de0:	4281      	cmp	r1, r0
    4de2:	d016      	beq.n	4e12 <updateLastPage()+0x4a>
      for (unsigned int iy = 1; iy <= maxY; iy++) {
    4de4:	2301      	movs	r3, #1
        if (note[((p - 1) * maxX) + ix][iy][0] > 0) {
    4de6:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
    4dea:	b91f      	cbnz	r7, 4df4 <updateLastPage()+0x2c>
      for (unsigned int iy = 1; iy <= maxY; iy++) {
    4dec:	3301      	adds	r3, #1
    4dee:	2b11      	cmp	r3, #17
    4df0:	d1f9      	bne.n	4de6 <updateLastPage()+0x1e>
    4df2:	e7f4      	b.n	4dde <updateLastPage()+0x16>
        lastPage = p;  // Update lastPage to the current page with notes
    4df4:	4674      	mov	r4, lr
    4df6:	4665      	mov	r5, ip
    4df8:	4663      	mov	r3, ip
    hasNotes[p] = pageHasNotes;
    4dfa:	f806 3f01 	strb.w	r3, [r6, #1]!
  for (unsigned int p = 1; p <= maxPages; p++) {
    4dfe:	f10e 0e01 	add.w	lr, lr, #1
    4e02:	f500 6008 	add.w	r0, r0, #2176	; 0x880
    4e06:	f1be 0f09 	cmp.w	lr, #9
    4e0a:	d004      	beq.n	4e16 <updateLastPage()+0x4e>
    for (unsigned int ix = 1; ix <= maxX; ix++) {
    4e0c:	f5a0 6108 	sub.w	r1, r0, #2176	; 0x880
    4e10:	e7e8      	b.n	4de4 <updateLastPage()+0x1c>
    4e12:	4613      	mov	r3, r2
    4e14:	e7f1      	b.n	4dfa <updateLastPage()+0x32>
    4e16:	b125      	cbz	r5, 4e22 <updateLastPage()+0x5a>
    4e18:	4b02      	ldr	r3, [pc, #8]	; (4e24 <updateLastPage()+0x5c>)
    4e1a:	601c      	str	r4, [r3, #0]
  if (lastPage == 0)
    4e1c:	b90c      	cbnz	r4, 4e22 <updateLastPage()+0x5a>
    lastPage = 1;
    4e1e:	2201      	movs	r2, #1
    4e20:	601a      	str	r2, [r3, #0]
}
    4e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4e24:	20005a80 	.word	0x20005a80
    4e28:	20007ad4 	.word	0x20007ad4
    4e2c:	70db40e0 	.word	0x70db40e0

00004e30 <unpaint()>:
void unpaint() {
    4e30:	b530      	push	{r4, r5, lr}
    4e32:	b08b      	sub	sp, #44	; 0x2c
  paintMode = false;
    4e34:	4b23      	ldr	r3, [pc, #140]	; (4ec4 <unpaint()+0x94>)
    4e36:	2200      	movs	r2, #0
    4e38:	701a      	strb	r2, [r3, #0]
  unsigned int y = SMP.y;
    4e3a:	4b23      	ldr	r3, [pc, #140]	; (4ec8 <unpaint()+0x98>)
    4e3c:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
  unsigned int x = (SMP.edit - 1) * maxX + SMP.x;
    4e40:	699a      	ldr	r2, [r3, #24]
    4e42:	3a01      	subs	r2, #1
    4e44:	f8d3 40ac 	ldr.w	r4, [r3, #172]	; 0xac
    4e48:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  if (!SMP.singleMode) {
    4e4c:	681b      	ldr	r3, [r3, #0]
    4e4e:	b17b      	cbz	r3, 4e70 <unpaint()+0x40>
    if (note[x][y][0] == SMP.currentChannel)
    4e50:	eb04 1304 	add.w	r3, r4, r4, lsl #4
    4e54:	442b      	add	r3, r5
    4e56:	4a1d      	ldr	r2, [pc, #116]	; (4ecc <unpaint()+0x9c>)
    4e58:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4e5c:	4b1a      	ldr	r3, [pc, #104]	; (4ec8 <unpaint()+0x98>)
    4e5e:	685b      	ldr	r3, [r3, #4]
    4e60:	429a      	cmp	r2, r3
    4e62:	d027      	beq.n	4eb4 <unpaint()+0x84>
  updateLastPage();
    4e64:	f7ff ffb0 	bl	4dc8 <updateLastPage()>
  FastLEDshow();
    4e68:	f7fe fc34 	bl	36d4 <FastLEDshow()>
}
    4e6c:	b00b      	add	sp, #44	; 0x2c
    4e6e:	bd30      	pop	{r4, r5, pc}
	StringSumHelper(const char *p) : String(p) {}
    4e70:	4917      	ldr	r1, [pc, #92]	; (4ed0 <unpaint()+0xa0>)
    4e72:	a804      	add	r0, sp, #16
    4e74:	f011 fc6f 	bl	16756 <String::String(char const*)>
    serialprintln("deleting" + String(x));
    4e78:	220a      	movs	r2, #10
    4e7a:	4621      	mov	r1, r4
    4e7c:	a807      	add	r0, sp, #28
    4e7e:	f011 fcb3 	bl	167e8 <String::String(unsigned int, unsigned char)>
    4e82:	a907      	add	r1, sp, #28
    4e84:	a804      	add	r0, sp, #16
    4e86:	f011 fd0c 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    4e8a:	4601      	mov	r1, r0
class StringSumHelper : public String
    4e8c:	a801      	add	r0, sp, #4
    4e8e:	f011 fc7e 	bl	1678e <String::String(String const&)>
    4e92:	a801      	add	r0, sp, #4
    4e94:	f011 fc16 	bl	166c4 <String::~String()>
    4e98:	a807      	add	r0, sp, #28
    4e9a:	f011 fc13 	bl	166c4 <String::~String()>
    4e9e:	a804      	add	r0, sp, #16
    4ea0:	f011 fc10 	bl	166c4 <String::~String()>
    note[x][y][0] = 0;
    4ea4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    4ea8:	442c      	add	r4, r5
    4eaa:	4b08      	ldr	r3, [pc, #32]	; (4ecc <unpaint()+0x9c>)
    4eac:	2200      	movs	r2, #0
    4eae:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    4eb2:	e7d7      	b.n	4e64 <unpaint()+0x34>
      note[x][y][0] = 0;
    4eb4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    4eb8:	442c      	add	r4, r5
    4eba:	4b04      	ldr	r3, [pc, #16]	; (4ecc <unpaint()+0x9c>)
    4ebc:	2200      	movs	r2, #0
    4ebe:	f843 2034 	str.w	r2, [r3, r4, lsl #3]
    4ec2:	e7cf      	b.n	4e64 <unpaint()+0x34>
    4ec4:	20008c2d 	.word	0x20008c2d
    4ec8:	70000000 	.word	0x70000000
    4ecc:	70db37d8 	.word	0x70db37d8
    4ed0:	20000ca4 	.word	0x20000ca4

00004ed4 <toggleCopyPaste()>:
void toggleCopyPaste() {
    4ed4:	b510      	push	{r4, lr}
  if (!SMP.activeCopy) {
    4ed6:	4b29      	ldr	r3, [pc, #164]	; (4f7c <toggleCopyPaste()+0xa8>)
    4ed8:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
    4edc:	bb03      	cbnz	r3, 4f20 <toggleCopyPaste()+0x4c>
    for (unsigned int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {  // maxy?
    4ede:	4b27      	ldr	r3, [pc, #156]	; (4f7c <toggleCopyPaste()+0xa8>)
    4ee0:	699b      	ldr	r3, [r3, #24]
    4ee2:	3b01      	subs	r3, #1
    4ee4:	011b      	lsls	r3, r3, #4
    4ee6:	1c5a      	adds	r2, r3, #1
    4ee8:	3311      	adds	r3, #17
    4eea:	429a      	cmp	r2, r3
    4eec:	d23c      	bcs.n	4f68 <toggleCopyPaste()+0x94>
    4eee:	4924      	ldr	r1, [pc, #144]	; (4f80 <toggleCopyPaste()+0xac>)
    4ef0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    4ef4:	4823      	ldr	r0, [pc, #140]	; (4f84 <toggleCopyPaste()+0xb0>)
    4ef6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    4efa:	f501 6e08 	add.w	lr, r1, #2176	; 0x880
    4efe:	e003      	b.n	4f08 <toggleCopyPaste()+0x34>
    4f00:	3188      	adds	r1, #136	; 0x88
    4f02:	3088      	adds	r0, #136	; 0x88
    4f04:	4571      	cmp	r1, lr
    4f06:	d02f      	beq.n	4f68 <toggleCopyPaste()+0x94>
      for (unsigned int y = 1; y < maxY + 1; y++) {
    4f08:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
void toggleCopyPaste() {
    4f0c:	460a      	mov	r2, r1
          tmp[src][y][b] = note[c][y][b];
    4f0e:	689c      	ldr	r4, [r3, #8]
    4f10:	6094      	str	r4, [r2, #8]
    4f12:	68dc      	ldr	r4, [r3, #12]
    4f14:	60d4      	str	r4, [r2, #12]
      for (unsigned int y = 1; y < maxY + 1; y++) {
    4f16:	3308      	adds	r3, #8
    4f18:	3208      	adds	r2, #8
    4f1a:	4298      	cmp	r0, r3
    4f1c:	d1f7      	bne.n	4f0e <toggleCopyPaste()+0x3a>
    4f1e:	e7ef      	b.n	4f00 <toggleCopyPaste()+0x2c>
    for (unsigned int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4f20:	4b16      	ldr	r3, [pc, #88]	; (4f7c <toggleCopyPaste()+0xa8>)
    4f22:	699b      	ldr	r3, [r3, #24]
    4f24:	3b01      	subs	r3, #1
    4f26:	011b      	lsls	r3, r3, #4
    4f28:	1c5a      	adds	r2, r3, #1
    4f2a:	3311      	adds	r3, #17
    4f2c:	429a      	cmp	r2, r3
    4f2e:	d21b      	bcs.n	4f68 <toggleCopyPaste()+0x94>
    4f30:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    4f34:	4b14      	ldr	r3, [pc, #80]	; (4f88 <toggleCopyPaste()+0xb4>)
    4f36:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    4f3a:	4b14      	ldr	r3, [pc, #80]	; (4f8c <toggleCopyPaste()+0xb8>)
    4f3c:	f503 7084 	add.w	r0, r3, #264	; 0x108
    4f40:	f603 1e88 	addw	lr, r3, #2440	; 0x988
    4f44:	e004      	b.n	4f50 <toggleCopyPaste()+0x7c>
    4f46:	f10c 0c88 	add.w	ip, ip, #136	; 0x88
    4f4a:	3088      	adds	r0, #136	; 0x88
    4f4c:	4570      	cmp	r0, lr
    4f4e:	d00b      	beq.n	4f68 <toggleCopyPaste()+0x94>
      for (unsigned int y = 1; y < maxY + 1; y++) {
    4f50:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
void toggleCopyPaste() {
    4f54:	4662      	mov	r2, ip
          note[c][y][b] = tmp[src][y][b];
    4f56:	6899      	ldr	r1, [r3, #8]
    4f58:	6091      	str	r1, [r2, #8]
    4f5a:	68d9      	ldr	r1, [r3, #12]
    4f5c:	60d1      	str	r1, [r2, #12]
      for (unsigned int y = 1; y < maxY + 1; y++) {
    4f5e:	3308      	adds	r3, #8
    4f60:	3208      	adds	r2, #8
    4f62:	4283      	cmp	r3, r0
    4f64:	d1f7      	bne.n	4f56 <toggleCopyPaste()+0x82>
    4f66:	e7ee      	b.n	4f46 <toggleCopyPaste()+0x72>
  updateLastPage();
    4f68:	f7ff ff2e 	bl	4dc8 <updateLastPage()>
  SMP.activeCopy = !SMP.activeCopy;  // Toggle the boolean value
    4f6c:	4a03      	ldr	r2, [pc, #12]	; (4f7c <toggleCopyPaste()+0xa8>)
    4f6e:	f892 30a8 	ldrb.w	r3, [r2, #168]	; 0xa8
    4f72:	f083 0301 	eor.w	r3, r3, #1
    4f76:	f882 30a8 	strb.w	r3, [r2, #168]	; 0xa8
}
    4f7a:	bd10      	pop	{r4, pc}
    4f7c:	70000000 	.word	0x70000000
    4f80:	70dbc170 	.word	0x70dbc170
    4f84:	70db3858 	.word	0x70db3858
    4f88:	70db37d8 	.word	0x70db37d8
    4f8c:	70dbc0e8 	.word	0x70dbc0e8

00004f90 <clearPage()>:
void clearPage() {
    4f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f94:	b083      	sub	sp, #12
  unsigned int start = (SMP.edit - 1) * maxX + 1;
    4f96:	4b10      	ldr	r3, [pc, #64]	; (4fd8 <clearPage()+0x48>)
    4f98:	699d      	ldr	r5, [r3, #24]
    4f9a:	3d01      	subs	r5, #1
    4f9c:	012d      	lsls	r5, r5, #4
    4f9e:	1c6c      	adds	r4, r5, #1
  unsigned int end = start + maxX;
    4fa0:	3511      	adds	r5, #17
  unsigned int channel = SMP.currentChannel;
    4fa2:	685f      	ldr	r7, [r3, #4]
  bool singleMode = SMP.singleMode;
    4fa4:	681e      	ldr	r6, [r3, #0]
    4fa6:	3e00      	subs	r6, #0
    4fa8:	bf18      	it	ne
    4faa:	2601      	movne	r6, #1
  for (unsigned int c = start; c < end; c++) {
    4fac:	42ac      	cmp	r4, r5
    4fae:	d20d      	bcs.n	4fcc <clearPage()+0x3c>
    clearNoteChannel(c, 1, maxY + 1, channel, singleMode);
    4fb0:	f04f 0911 	mov.w	r9, #17
    4fb4:	f04f 0801 	mov.w	r8, #1
    4fb8:	9600      	str	r6, [sp, #0]
    4fba:	463b      	mov	r3, r7
    4fbc:	464a      	mov	r2, r9
    4fbe:	4641      	mov	r1, r8
    4fc0:	4620      	mov	r0, r4
    4fc2:	f7ff f9d5 	bl	4370 <clearNoteChannel(unsigned int, unsigned int, unsigned int, unsigned int, bool)>
  for (unsigned int c = start; c < end; c++) {
    4fc6:	3401      	adds	r4, #1
    4fc8:	42a5      	cmp	r5, r4
    4fca:	d1f5      	bne.n	4fb8 <clearPage()+0x28>
  updateLastPage();
    4fcc:	f7ff fefc 	bl	4dc8 <updateLastPage()>
}
    4fd0:	b003      	add	sp, #12
    4fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4fd6:	bf00      	nop
    4fd8:	70000000 	.word	0x70000000
    4fdc:	00000000 	.word	0x00000000

00004fe0 <paint()>:
void paint() {
    4fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4fe4:	b082      	sub	sp, #8
  unsigned int x = (SMP.edit - 1) * maxX + SMP.x;
    4fe6:	4bba      	ldr	r3, [pc, #744]	; (52d0 <paint()+0x2f0>)
    4fe8:	699a      	ldr	r2, [r3, #24]
    4fea:	3a01      	subs	r2, #1
    4fec:	f8d3 60ac 	ldr.w	r6, [r3, #172]	; 0xac
    4ff0:	eb06 1602 	add.w	r6, r6, r2, lsl #4
  unsigned int y = SMP.y;
    4ff4:	f8d3 90b0 	ldr.w	r9, [r3, #176]	; 0xb0
  if (!SMP.singleMode) {
    4ff8:	681b      	ldr	r3, [r3, #0]
    4ffa:	2b00      	cmp	r3, #0
    4ffc:	d161      	bne.n	50c2 <paint()+0xe2>
    if ((y > 1 && y <= maxFiles + 1) || y >= maxY - 2) {
    4ffe:	f1a9 0302 	sub.w	r3, r9, #2
    5002:	2b08      	cmp	r3, #8
    5004:	d902      	bls.n	500c <paint()+0x2c>
    5006:	f1b9 0f0d 	cmp.w	r9, #13
    500a:	d962      	bls.n	50d2 <paint()+0xf2>
      if (note[x][y][0] == 0) {
    500c:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    5010:	444b      	add	r3, r9
    5012:	4ab0      	ldr	r2, [pc, #704]	; (52d4 <paint()+0x2f4>)
    5014:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    5018:	b943      	cbnz	r3, 502c <paint()+0x4c>
        note[x][y][0] = (y - 1);
    501a:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    501e:	444b      	add	r3, r9
    5020:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    5024:	49ab      	ldr	r1, [pc, #684]	; (52d4 <paint()+0x2f4>)
    5026:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    502a:	e052      	b.n	50d2 <paint()+0xf2>
        if ((note[x][y][0] + 1) > 8) note[x][y][0] = 0;  // do not cycle over the synth voices
    502c:	3301      	adds	r3, #1
    502e:	2b08      	cmp	r3, #8
    5030:	d906      	bls.n	5040 <paint()+0x60>
    5032:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    5036:	444b      	add	r3, r9
    5038:	4aa6      	ldr	r2, [pc, #664]	; (52d4 <paint()+0x2f4>)
    503a:	2100      	movs	r1, #0
    503c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
        note[x][y][0] = note[x][y][0] + sample;
    5040:	49a4      	ldr	r1, [pc, #656]	; (52d4 <paint()+0x2f4>)
    5042:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    5046:	444b      	add	r3, r9
    5048:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
    504c:	3201      	adds	r2, #1
    504e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        for (unsigned int vx = 1; vx < maxX + 1; vx++) {
    5052:	2401      	movs	r4, #1
          light(vx, note[x][y][0] + 1, col[note[x][y][0]] * 12);
    5054:	4688      	mov	r8, r1
    5056:	461f      	mov	r7, r3
    5058:	4d9f      	ldr	r5, [pc, #636]	; (52d8 <paint()+0x2f8>)
    505a:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
    505e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    5062:	182b      	adds	r3, r5, r0
    unsigned p = (unsigned)i * (unsigned)j;
    5064:	785a      	ldrb	r2, [r3, #1]
    5066:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    506a:	0092      	lsls	r2, r2, #2
    return p;
    506c:	2aff      	cmp	r2, #255	; 0xff
    506e:	bf28      	it	cs
    5070:	22ff      	movcs	r2, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    5072:	789b      	ldrb	r3, [r3, #2]
    5074:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5078:	009b      	lsls	r3, r3, #2
    return p;
    507a:	2bff      	cmp	r3, #255	; 0xff
    507c:	bf28      	it	cs
    507e:	23ff      	movcs	r3, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    5080:	5c28      	ldrb	r0, [r5, r0]
    5082:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5086:	0080      	lsls	r0, r0, #2
    return p;
    5088:	28ff      	cmp	r0, #255	; 0xff
    508a:	bf28      	it	cs
    508c:	20ff      	movcs	r0, #255	; 0xff
    508e:	f88d 0000 	strb.w	r0, [sp]
    5092:	f88d 2001 	strb.w	r2, [sp, #1]
    5096:	f88d 3002 	strb.w	r3, [sp, #2]
    509a:	9a00      	ldr	r2, [sp, #0]
    509c:	3101      	adds	r1, #1
    509e:	4620      	mov	r0, r4
    50a0:	f7fe fcec 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    50a4:	f8df a260 	ldr.w	sl, [pc, #608]	; 5308 <paint()+0x328>
    50a8:	f89a 1000 	ldrb.w	r1, [sl]
    50ac:	4650      	mov	r0, sl
    50ae:	f006 fed1 	bl	be54 <CFastLED::show(unsigned char)>
          FastLED.delay(1);
    50b2:	2101      	movs	r1, #1
    50b4:	4650      	mov	r0, sl
    50b6:	f006 ff37 	bl	bf28 <CFastLED::delay(unsigned long)>
        for (unsigned int vx = 1; vx < maxX + 1; vx++) {
    50ba:	3401      	adds	r4, #1
    50bc:	2c11      	cmp	r4, #17
    50be:	d1cc      	bne.n	505a <paint()+0x7a>
    50c0:	e007      	b.n	50d2 <paint()+0xf2>
    note[x][y][0] = SMP.currentChannel;
    50c2:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    50c6:	444b      	add	r3, r9
    50c8:	4a81      	ldr	r2, [pc, #516]	; (52d0 <paint()+0x2f0>)
    50ca:	6851      	ldr	r1, [r2, #4]
    50cc:	4a81      	ldr	r2, [pc, #516]	; (52d4 <paint()+0x2f4>)
    50ce:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
  if (note[x][y][0] > maxY - 2) {
    50d2:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    50d6:	444b      	add	r3, r9
    50d8:	4a7e      	ldr	r2, [pc, #504]	; (52d4 <paint()+0x2f4>)
    50da:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    50de:	2b0e      	cmp	r3, #14
    50e0:	d932      	bls.n	5148 <paint()+0x168>
    note[x][y][0] = 1;
    50e2:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    50e6:	444b      	add	r3, r9
    50e8:	2401      	movs	r4, #1
    50ea:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
      light(vx, note[x][y][0] + 1, col[note[x][y][0]] * 12);
    50ee:	4690      	mov	r8, r2
    50f0:	461f      	mov	r7, r3
    50f2:	4d79      	ldr	r5, [pc, #484]	; (52d8 <paint()+0x2f8>)
    50f4:	f858 1037 	ldr.w	r1, [r8, r7, lsl #3]
    50f8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    50fc:	182b      	adds	r3, r5, r0
    unsigned p = (unsigned)i * (unsigned)j;
    50fe:	785a      	ldrb	r2, [r3, #1]
    5100:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    5104:	0092      	lsls	r2, r2, #2
    return p;
    5106:	2aff      	cmp	r2, #255	; 0xff
    5108:	bf28      	it	cs
    510a:	22ff      	movcs	r2, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    510c:	789b      	ldrb	r3, [r3, #2]
    510e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5112:	009b      	lsls	r3, r3, #2
    return p;
    5114:	2bff      	cmp	r3, #255	; 0xff
    5116:	bf28      	it	cs
    5118:	23ff      	movcs	r3, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    511a:	5c28      	ldrb	r0, [r5, r0]
    511c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5120:	0080      	lsls	r0, r0, #2
    return p;
    5122:	28ff      	cmp	r0, #255	; 0xff
    5124:	bf28      	it	cs
    5126:	20ff      	movcs	r0, #255	; 0xff
    5128:	f88d 0004 	strb.w	r0, [sp, #4]
    512c:	f88d 2005 	strb.w	r2, [sp, #5]
    5130:	f88d 3006 	strb.w	r3, [sp, #6]
    5134:	9a01      	ldr	r2, [sp, #4]
    5136:	3101      	adds	r1, #1
    5138:	4620      	mov	r0, r4
    513a:	f7fe fc9f 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int vx = 1; vx < maxX + 1; vx++) {
    513e:	3401      	adds	r4, #1
    5140:	2c11      	cmp	r4, #17
    5142:	d1d7      	bne.n	50f4 <paint()+0x114>
    FastLEDshow();
    5144:	f7fe fac6 	bl	36d4 <FastLEDshow()>
  if (!isPlaying) {
    5148:	4b64      	ldr	r3, [pc, #400]	; (52dc <paint()+0x2fc>)
    514a:	781b      	ldrb	r3, [r3, #0]
    514c:	b9bb      	cbnz	r3, 517e <paint()+0x19e>
    if (note[x][y][0] < 9) {
    514e:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    5152:	444b      	add	r3, r9
    5154:	4a5f      	ldr	r2, [pc, #380]	; (52d4 <paint()+0x2f4>)
    5156:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
    515a:	2808      	cmp	r0, #8
    515c:	d916      	bls.n	518c <paint()+0x1ac>
    if (note[x][y][0] == 14) {
    515e:	eb06 1306 	add.w	r3, r6, r6, lsl #4
    5162:	444b      	add	r3, r9
    5164:	4a5b      	ldr	r2, [pc, #364]	; (52d4 <paint()+0x2f4>)
    5166:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    516a:	2b0e      	cmp	r3, #14
    516c:	d024      	beq.n	51b8 <paint()+0x1d8>
    if (note[x][y][0] == 13) {
    516e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
    5172:	444e      	add	r6, r9
    5174:	4b57      	ldr	r3, [pc, #348]	; (52d4 <paint()+0x2f4>)
    5176:	f853 3036 	ldr.w	r3, [r3, r6, lsl #3]
    517a:	2b0d      	cmp	r3, #13
    517c:	d073      	beq.n	5266 <paint()+0x286>
  updateLastPage();
    517e:	f7ff fe23 	bl	4dc8 <updateLastPage()>
  FastLEDshow();
    5182:	f7fe faa7 	bl	36d4 <FastLEDshow()>
}
    5186:	b002      	add	sp, #8
    5188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      _samplers[note[x][y][0]].noteEvent(12 * SampleRate[note[x][y][0]] + y - (note[x][y][0] + 1), defaultVelocity, true, false);
    518c:	4b50      	ldr	r3, [pc, #320]	; (52d0 <paint()+0x2f0>)
    518e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    5192:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
    5196:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    519a:	f109 31ff 	add.w	r1, r9, #4294967295	; 0xffffffff
    519e:	1a09      	subs	r1, r1, r0
    51a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
            _polysampler.noteOn(noteNumber, velocity);
    51a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    51a8:	223f      	movs	r2, #63	; 0x3f
    51aa:	b2c9      	uxtb	r1, r1
    51ac:	4b4c      	ldr	r3, [pc, #304]	; (52e0 <paint()+0x300>)
    51ae:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    51b2:	f7fd ffa5 	bl	3100 <polyphonicsampler::noteOn(unsigned char, unsigned char)>
      serialprintln("???????");
    51b6:	e7d2      	b.n	515e <paint()+0x17e>
      float frequency = pianoFrequencies[y] / 2;  // y-Wert ist 1-basiert, Array ist 0-basiert
    51b8:	4b4a      	ldr	r3, [pc, #296]	; (52e4 <paint()+0x304>)
    51ba:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    51be:	ed93 7a00 	vldr	s14, [r3]
    51c2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    51c6:	ee27 7a27 	vmul.f32	s14, s14, s15
		if (freq < 0.0f) {
    51ca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    51ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51d2:	d415      	bmi.n	5200 <paint()+0x220>
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    51d4:	eddf 7a44 	vldr	s15, [pc, #272]	; 52e8 <paint()+0x308>
    51d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    51dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    51e0:	dc3c      	bgt.n	525c <paint()+0x27c>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    51e2:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    51e6:	ed9f 6b32 	vldr	d6, [pc, #200]	; 52b0 <paint()+0x2d0>
    51ea:	ee27 7b06 	vmul.f64	d7, d7, d6
    51ee:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    51f2:	ee17 3a90 	vmov	r3, s15
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    51f6:	4a3d      	ldr	r2, [pc, #244]	; (52ec <paint()+0x30c>)
    51f8:	4293      	cmp	r3, r2
    51fa:	bf28      	it	cs
    51fc:	4613      	movcs	r3, r2
    51fe:	e000      	b.n	5202 <paint()+0x222>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    5200:	2300      	movs	r3, #0
    5202:	4a3b      	ldr	r2, [pc, #236]	; (52f0 <paint()+0x310>)
    5204:	61d3      	str	r3, [r2, #28]
      float WaveFormVelocity = mapf(defaultVelocity, 1, 127, 0.0, 1.0);
    5206:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    520a:	ed9f 3b2b 	vldr	d3, [pc, #172]	; 52b8 <paint()+0x2d8>
    520e:	ed9f 2b2c 	vldr	d2, [pc, #176]	; 52c0 <paint()+0x2e0>
    5212:	eeb0 1b44 	vmov.f64	d1, d4
    5216:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 52c8 <paint()+0x2e8>
    521a:	f006 fa55 	bl	b6c8 <mapf(double, double, double, double, double)>
    521e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		if (n < 0) {
    5222:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    5226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    522a:	d419      	bmi.n	5260 <paint()+0x280>
			n = 1.0;
    522c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5230:	eeb4 0a67 	vcmp.f32	s0, s15
    5234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5238:	fe37 0a80 	vselgt.f32	s0, s15, s0
		magnitude = n * 65536.0f;
    523c:	eebe 0ac8 	vcvt.s32.f32	s0, s0, #16
    5240:	4b2b      	ldr	r3, [pc, #172]	; (52f0 <paint()+0x310>)
    5242:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
      envelope14.noteOn();
    5246:	482b      	ldr	r0, [pc, #172]	; (52f4 <paint()+0x314>)
    5248:	f007 fd8c 	bl	cd64 <AudioEffectEnvelope::noteOn()>
    524c:	4b2a      	ldr	r3, [pc, #168]	; (52f8 <paint()+0x318>)
    524e:	681a      	ldr	r2, [r3, #0]
      startTime = millis();    // Record the start time
    5250:	4b2a      	ldr	r3, [pc, #168]	; (52fc <paint()+0x31c>)
    5252:	601a      	str	r2, [r3, #0]
      noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    5254:	4b2a      	ldr	r3, [pc, #168]	; (5300 <paint()+0x320>)
    5256:	2201      	movs	r2, #1
    5258:	701a      	strb	r2, [r3, #0]
    525a:	e788      	b.n	516e <paint()+0x18e>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    525c:	4b23      	ldr	r3, [pc, #140]	; (52ec <paint()+0x30c>)
    525e:	e7d0      	b.n	5202 <paint()+0x222>
			n = 0;
    5260:	ed9f 0a28 	vldr	s0, [pc, #160]	; 5304 <paint()+0x324>
    5264:	e7ea      	b.n	523c <paint()+0x25c>
      float frequency = pianoFrequencies[y - 1] / 2;  // y-Wert ist 1-basiert, Array ist 0-basiert
    5266:	4b1f      	ldr	r3, [pc, #124]	; (52e4 <paint()+0x304>)
    5268:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    526c:	ed13 7a01 	vldr	s14, [r3, #-4]
    5270:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    5274:	ee27 7a27 	vmul.f32	s14, s14, s15
		if (freq < 0.0f) {
    5278:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    527c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5280:	d444      	bmi.n	530c <paint()+0x32c>
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    5282:	eddf 7a19 	vldr	s15, [pc, #100]	; 52e8 <paint()+0x308>
    5286:	eeb4 7ae7 	vcmpe.f32	s14, s15
    528a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    528e:	dc6b      	bgt.n	5368 <paint()+0x388>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    5290:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    5294:	ed9f 6b06 	vldr	d6, [pc, #24]	; 52b0 <paint()+0x2d0>
    5298:	ee27 7b06 	vmul.f64	d7, d7, d6
    529c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    52a0:	ee17 3a90 	vmov	r3, s15
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    52a4:	4a11      	ldr	r2, [pc, #68]	; (52ec <paint()+0x30c>)
    52a6:	4293      	cmp	r3, r2
    52a8:	bf28      	it	cs
    52aa:	4613      	movcs	r3, r2
    52ac:	e02f      	b.n	530e <paint()+0x32e>
    52ae:	bf00      	nop
    52b0:	c751f177 	.word	0xc751f177
    52b4:	40f7c6f8 	.word	0x40f7c6f8
	...
    52c4:	405fc000 	.word	0x405fc000
    52c8:	00000000 	.word	0x00000000
    52cc:	404f8000 	.word	0x404f8000
    52d0:	70000000 	.word	0x70000000
    52d4:	70db37d8 	.word	0x70db37d8
    52d8:	200012d4 	.word	0x200012d4
    52dc:	20008c2b 	.word	0x20008c2b
    52e0:	700001f0 	.word	0x700001f0
    52e4:	20001294 	.word	0x20001294
    52e8:	46ac4400 	.word	0x46ac4400
    52ec:	7ffe0000 	.word	0x7ffe0000
    52f0:	200087f4 	.word	0x200087f4
    52f4:	20007544 	.word	0x20007544
    52f8:	20008a6c 	.word	0x20008a6c
    52fc:	20008a64 	.word	0x20008a64
    5300:	20008c2c 	.word	0x20008c2c
    5304:	00000000 	.word	0x00000000
    5308:	20006668 	.word	0x20006668
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    530c:	2300      	movs	r3, #0
    530e:	4a20      	ldr	r2, [pc, #128]	; (5390 <paint()+0x3b0>)
    5310:	61d3      	str	r3, [r2, #28]
      float WaveFormVelocity = mapf(defaultVelocity, 1, 127, 0.0, 1.0);
    5312:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    5316:	ed9f 3b18 	vldr	d3, [pc, #96]	; 5378 <paint()+0x398>
    531a:	ed9f 2b19 	vldr	d2, [pc, #100]	; 5380 <paint()+0x3a0>
    531e:	eeb0 1b44 	vmov.f64	d1, d4
    5322:	ed9f 0b19 	vldr	d0, [pc, #100]	; 5388 <paint()+0x3a8>
    5326:	f006 f9cf 	bl	b6c8 <mapf(double, double, double, double, double)>
    532a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
		if (n < 0) {
    532e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    5332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5336:	d419      	bmi.n	536c <paint()+0x38c>
			n = 1.0;
    5338:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    533c:	eeb4 0a67 	vcmp.f32	s0, s15
    5340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5344:	fe37 0a80 	vselgt.f32	s0, s15, s0
		magnitude = n * 65536.0f;
    5348:	eebe 0ac8 	vcvt.s32.f32	s0, s0, #16
    534c:	4b10      	ldr	r3, [pc, #64]	; (5390 <paint()+0x3b0>)
    534e:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
      envelope13.noteOn();
    5352:	4810      	ldr	r0, [pc, #64]	; (5394 <paint()+0x3b4>)
    5354:	f007 fd06 	bl	cd64 <AudioEffectEnvelope::noteOn()>
    5358:	4b0f      	ldr	r3, [pc, #60]	; (5398 <paint()+0x3b8>)
    535a:	681a      	ldr	r2, [r3, #0]
      startTime = millis();    // Record the start time
    535c:	4b0f      	ldr	r3, [pc, #60]	; (539c <paint()+0x3bc>)
    535e:	601a      	str	r2, [r3, #0]
      noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    5360:	4b0f      	ldr	r3, [pc, #60]	; (53a0 <paint()+0x3c0>)
    5362:	2201      	movs	r2, #1
    5364:	701a      	strb	r2, [r3, #0]
    5366:	e70a      	b.n	517e <paint()+0x19e>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    5368:	4b0e      	ldr	r3, [pc, #56]	; (53a4 <paint()+0x3c4>)
    536a:	e7d0      	b.n	530e <paint()+0x32e>
			n = 0;
    536c:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 53a8 <paint()+0x3c8>
    5370:	e7ea      	b.n	5348 <paint()+0x368>
    5372:	bf00      	nop
    5374:	f3af 8000 	nop.w
	...
    5384:	405fc000 	.word	0x405fc000
    5388:	00000000 	.word	0x00000000
    538c:	404f8000 	.word	0x404f8000
    5390:	20008664 	.word	0x20008664
    5394:	2000750c 	.word	0x2000750c
    5398:	20008a6c 	.word	0x20008a6c
    539c:	20008a64 	.word	0x20008a64
    53a0:	20008c2c 	.word	0x20008c2c
    53a4:	7ffe0000 	.word	0x7ffe0000
    53a8:	00000000 	.word	0x00000000

000053ac <drawPages()>:
void drawPages() {
    53ac:	b570      	push	{r4, r5, r6, lr}
    53ae:	b082      	sub	sp, #8
  for (unsigned int p = 1; p <= maxPages; p++) {  // Assuming maxPages is 8
    53b0:	2401      	movs	r4, #1
    if (SMP.page == p && SMP.edit == p) {
    53b2:	4d23      	ldr	r5, [pc, #140]	; (5440 <drawPages()+0x94>)
    53b4:	2614      	movs	r6, #20
    53b6:	e029      	b.n	540c <drawPages()+0x60>
    53b8:	69ab      	ldr	r3, [r5, #24]
    53ba:	42a3      	cmp	r3, r4
    53bc:	d006      	beq.n	53cc <drawPages()+0x20>
      ledColor = isPlaying ? CRGB(0, 15, 0) : CRGB(0, 0, 35);
    53be:	4b21      	ldr	r3, [pc, #132]	; (5444 <drawPages()+0x98>)
    53c0:	781b      	ldrb	r3, [r3, #0]
    53c2:	b173      	cbz	r3, 53e2 <drawPages()+0x36>
    53c4:	2300      	movs	r3, #0
    53c6:	220f      	movs	r2, #15
    53c8:	4619      	mov	r1, r3
    53ca:	e011      	b.n	53f0 <drawPages()+0x44>
      ledColor = isPlaying ? CRGB(20, 255, 20) : CRGB(50, 50, 50);
    53cc:	4b1d      	ldr	r3, [pc, #116]	; (5444 <drawPages()+0x98>)
    53ce:	781b      	ldrb	r3, [r3, #0]
    53d0:	b11b      	cbz	r3, 53da <drawPages()+0x2e>
    53d2:	4633      	mov	r3, r6
    53d4:	22ff      	movs	r2, #255	; 0xff
    53d6:	4631      	mov	r1, r6
    53d8:	e00a      	b.n	53f0 <drawPages()+0x44>
    53da:	2332      	movs	r3, #50	; 0x32
    53dc:	461a      	mov	r2, r3
    53de:	4619      	mov	r1, r3
    53e0:	e006      	b.n	53f0 <drawPages()+0x44>
    53e2:	2300      	movs	r3, #0
    53e4:	461a      	mov	r2, r3
    53e6:	2123      	movs	r1, #35	; 0x23
    53e8:	e002      	b.n	53f0 <drawPages()+0x44>
    53ea:	4633      	mov	r3, r6
    53ec:	4632      	mov	r2, r6
    53ee:	4631      	mov	r1, r6
    53f0:	f88d 3004 	strb.w	r3, [sp, #4]
    53f4:	f88d 2005 	strb.w	r2, [sp, #5]
    53f8:	f88d 1006 	strb.w	r1, [sp, #6]
    light(p, maxY, ledColor);
    53fc:	9a01      	ldr	r2, [sp, #4]
    53fe:	2110      	movs	r1, #16
    5400:	4620      	mov	r0, r4
    5402:	f7fe fb3b 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
  for (unsigned int p = 1; p <= maxPages; p++) {  // Assuming maxPages is 8
    5406:	3401      	adds	r4, #1
    5408:	2c09      	cmp	r4, #9
    540a:	d010      	beq.n	542e <drawPages()+0x82>
    if (SMP.page == p && SMP.edit == p) {
    540c:	696b      	ldr	r3, [r5, #20]
    540e:	42a3      	cmp	r3, r4
    5410:	d0d2      	beq.n	53b8 <drawPages()+0xc>
      if (SMP.edit == p) {
    5412:	69ab      	ldr	r3, [r5, #24]
    5414:	42a3      	cmp	r3, r4
    5416:	d0e8      	beq.n	53ea <drawPages()+0x3e>
        ledColor = hasNotes[p] ? CRGB(0, 0, 35) : CRGB(1, 0, 0);
    5418:	4b0b      	ldr	r3, [pc, #44]	; (5448 <drawPages()+0x9c>)
    541a:	5ce3      	ldrb	r3, [r4, r3]
    541c:	b11b      	cbz	r3, 5426 <drawPages()+0x7a>
    541e:	2300      	movs	r3, #0
    5420:	461a      	mov	r2, r3
    5422:	2123      	movs	r1, #35	; 0x23
    5424:	e7e4      	b.n	53f0 <drawPages()+0x44>
    5426:	2301      	movs	r3, #1
    5428:	2200      	movs	r2, #0
    542a:	4611      	mov	r1, r2
    542c:	e7e0      	b.n	53f0 <drawPages()+0x44>
  currentMode->maxValues[1] = lastPage + 1;
    542e:	4b07      	ldr	r3, [pc, #28]	; (544c <drawPages()+0xa0>)
    5430:	681a      	ldr	r2, [r3, #0]
    5432:	4b07      	ldr	r3, [pc, #28]	; (5450 <drawPages()+0xa4>)
    5434:	681b      	ldr	r3, [r3, #0]
    5436:	3301      	adds	r3, #1
    5438:	6213      	str	r3, [r2, #32]
}
    543a:	b002      	add	sp, #8
    543c:	bd70      	pop	{r4, r5, r6, pc}
    543e:	bf00      	nop
    5440:	70000000 	.word	0x70000000
    5444:	20008c2b 	.word	0x20008c2b
    5448:	20007ad4 	.word	0x20007ad4
    544c:	200057ec 	.word	0x200057ec
    5450:	20005a80 	.word	0x20005a80
    5454:	00000000 	.word	0x00000000

00005458 <drawBase()>:
void drawBase() {
    5458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    545c:	ed2d 8b06 	vpush	{d8-d10}
    5460:	b089      	sub	sp, #36	; 0x24
  if (!SMP.singleMode) {
    5462:	4b5d      	ldr	r3, [pc, #372]	; (55d8 <drawBase()+0x180>)
    5464:	681b      	ldr	r3, [r3, #0]
    5466:	2b00      	cmp	r3, #0
    5468:	d16e      	bne.n	5548 <drawBase()+0xf0>
    546a:	4b5b      	ldr	r3, [pc, #364]	; (55d8 <drawBase()+0x180>)
    546c:	f103 0ac4 	add.w	sl, r3, #196	; 0xc4
    5470:	4e5a      	ldr	r6, [pc, #360]	; (55dc <drawBase()+0x184>)
    5472:	f503 7b80 	add.w	fp, r3, #256	; 0x100
    for (unsigned int y = 1; y < maxY; y++) {
    5476:	f04f 0801 	mov.w	r8, #1
      unsigned int filtering = mapf(SMP.filter_knob[y - 1], 0, maxfilterResolution, 50, 5);
    547a:	ed9f ab51 	vldr	d10, [pc, #324]	; 55c0 <drawBase()+0x168>
    547e:	ed9f 9b52 	vldr	d9, [pc, #328]	; 55c8 <drawBase()+0x170>
    5482:	ed9f 8b53 	vldr	d8, [pc, #332]	; 55d0 <drawBase()+0x178>
    5486:	e02b      	b.n	54e0 <drawBase()+0x88>


/// @copydoc CRGB::operator/=
FASTLED_FORCE_INLINE CRGB operator/( const CRGB& p1, uint8_t d)
{
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    5488:	7872      	ldrb	r2, [r6, #1]
    548a:	fbb2 f2f5 	udiv	r2, r2, r5
    548e:	78b3      	ldrb	r3, [r6, #2]
    5490:	fbb3 f3f5 	udiv	r3, r3, r5
    5494:	7831      	ldrb	r1, [r6, #0]
    5496:	fbb1 f1f5 	udiv	r1, r1, r5
    549a:	f88d 1014 	strb.w	r1, [sp, #20]
    549e:	f88d 2015 	strb.w	r2, [sp, #21]
    54a2:	f88d 3016 	strb.w	r3, [sp, #22]
          light(x, y, col[colors] / filtering);
    54a6:	9a05      	ldr	r2, [sp, #20]
    54a8:	4641      	mov	r1, r8
    54aa:	4620      	mov	r0, r4
    54ac:	f7fe fae6 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
      for (unsigned int x = 1; x < maxX + 1; x++) {
    54b0:	3401      	adds	r4, #1
    54b2:	2c11      	cmp	r4, #17
    54b4:	d00f      	beq.n	54d6 <drawBase()+0x7e>
        if (SMP.mute[y - 1]) {
    54b6:	f8d9 303c 	ldr.w	r3, [r9, #60]	; 0x3c
    54ba:	2b00      	cmp	r3, #0
    54bc:	d0e4      	beq.n	5488 <drawBase()+0x30>
        : r(ir), g(ig), b(ib)
    54be:	f88d 7010 	strb.w	r7, [sp, #16]
    54c2:	f88d 7011 	strb.w	r7, [sp, #17]
    54c6:	f88d 7012 	strb.w	r7, [sp, #18]
          light(x, y, CRGB(0, 0, 0));
    54ca:	9a04      	ldr	r2, [sp, #16]
    54cc:	4641      	mov	r1, r8
    54ce:	4620      	mov	r0, r4
    54d0:	f7fe fad4 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    54d4:	e7ec      	b.n	54b0 <drawBase()+0x58>
    for (unsigned int y = 1; y < maxY; y++) {
    54d6:	f108 0801 	add.w	r8, r8, #1
    54da:	3603      	adds	r6, #3
    54dc:	45d3      	cmp	fp, sl
    54de:	d019      	beq.n	5514 <drawBase()+0xbc>
      unsigned int filtering = mapf(SMP.filter_knob[y - 1], 0, maxfilterResolution, 50, 5);
    54e0:	f10a 0a04 	add.w	sl, sl, #4
    54e4:	46d1      	mov	r9, sl
    54e6:	eeb1 4b04 	vmov.f64	d4, #20	; 0x40a00000  5.0
    54ea:	eeb0 3b4a 	vmov.f64	d3, d10
    54ee:	eeb0 2b49 	vmov.f64	d2, d9
    54f2:	eeb0 1b48 	vmov.f64	d1, d8
    54f6:	edda 7a00 	vldr	s15, [sl]
    54fa:	eeb8 0b67 	vcvt.f64.u32	d0, s15
    54fe:	f006 f8e3 	bl	b6c8 <mapf(double, double, double, double, double)>
    5502:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    5506:	edcd 7a01 	vstr	s15, [sp, #4]
      for (unsigned int x = 1; x < maxX + 1; x++) {
    550a:	2401      	movs	r4, #1
          light(x, y, col[colors] / filtering);
    550c:	f89d 5004 	ldrb.w	r5, [sp, #4]
    5510:	2700      	movs	r7, #0
    5512:	e7d0      	b.n	54b6 <drawBase()+0x5e>
    for (unsigned int x = 1; x <= 13; x += 4) {
    5514:	2401      	movs	r4, #1
    5516:	4625      	mov	r5, r4
    5518:	2600      	movs	r6, #0
    551a:	f88d 5018 	strb.w	r5, [sp, #24]
    551e:	f88d 5019 	strb.w	r5, [sp, #25]
    5522:	f88d 601a 	strb.w	r6, [sp, #26]
      light(x, 1, CRGB(1, 1, 0));  // gelb
    5526:	9a06      	ldr	r2, [sp, #24]
    5528:	4629      	mov	r1, r5
    552a:	4620      	mov	r0, r4
    552c:	f7fe faa6 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int x = 1; x <= 13; x += 4) {
    5530:	3404      	adds	r4, #4
    5532:	2c11      	cmp	r4, #17
    5534:	d1f1      	bne.n	551a <drawBase()+0xc2>
  drawPages();
    5536:	f7ff ff39 	bl	53ac <drawPages()>
  drawStatus();
    553a:	f7ff fbb1 	bl	4ca0 <drawStatus()>
}
    553e:	b009      	add	sp, #36	; 0x24
    5540:	ecbd 8b06 	vpop	{d8-d10}
    5544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    unsigned int currentChannel = SMP.currentChannel;
    5548:	4a23      	ldr	r2, [pc, #140]	; (55d8 <drawBase()+0x180>)
    554a:	6853      	ldr	r3, [r2, #4]
    bool isMuted = SMP.mute[currentChannel];
    554c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    CRGB color = col[currentChannel] / (isMuted ? 28 : 14);
    5550:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    5554:	2a00      	cmp	r2, #0
    5556:	bf14      	ite	ne
    5558:	201c      	movne	r0, #28
    555a:	200e      	moveq	r0, #14
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    555c:	4c1f      	ldr	r4, [pc, #124]	; (55dc <drawBase()+0x184>)
    555e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5562:	18e2      	adds	r2, r4, r3
    5564:	7851      	ldrb	r1, [r2, #1]
    5566:	fbb1 f1f0 	udiv	r1, r1, r0
    556a:	7892      	ldrb	r2, [r2, #2]
    556c:	fbb2 f2f0 	udiv	r2, r2, r0
    5570:	5ce3      	ldrb	r3, [r4, r3]
    5572:	fbb3 f3f0 	udiv	r3, r3, r0
    5576:	f88d 300c 	strb.w	r3, [sp, #12]
    557a:	f88d 100d 	strb.w	r1, [sp, #13]
    557e:	f88d 200e 	strb.w	r2, [sp, #14]
    for (unsigned int y = 1; y < maxY; y++) {
    5582:	2501      	movs	r5, #1
      for (unsigned int x = 1; x < maxX + 1; x++) {
    5584:	2401      	movs	r4, #1
        light(x, y, color);
    5586:	9a03      	ldr	r2, [sp, #12]
    5588:	4629      	mov	r1, r5
    558a:	4620      	mov	r0, r4
    558c:	f7fe fa76 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
      for (unsigned int x = 1; x < maxX + 1; x++) {
    5590:	3401      	adds	r4, #1
    5592:	2c11      	cmp	r4, #17
    5594:	d1f7      	bne.n	5586 <drawBase()+0x12e>
    for (unsigned int y = 1; y < maxY; y++) {
    5596:	3501      	adds	r5, #1
    5598:	2d10      	cmp	r5, #16
    559a:	d1f3      	bne.n	5584 <drawBase()+0x12c>
    for (unsigned int x = 1; x <= 13; x += 4) {
    559c:	2401      	movs	r4, #1
        : r(ir), g(ig), b(ib)
    559e:	2600      	movs	r6, #0
    55a0:	4625      	mov	r5, r4
    55a2:	f88d 601c 	strb.w	r6, [sp, #28]
    55a6:	f88d 501d 	strb.w	r5, [sp, #29]
    55aa:	f88d 501e 	strb.w	r5, [sp, #30]
      light(x, 1, CRGB(0, 1, 1));  // türkis
    55ae:	9a07      	ldr	r2, [sp, #28]
    55b0:	4629      	mov	r1, r5
    55b2:	4620      	mov	r0, r4
    55b4:	f7fe fa62 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int x = 1; x <= 13; x += 4) {
    55b8:	3404      	adds	r4, #4
    55ba:	2c11      	cmp	r4, #17
    55bc:	d1f1      	bne.n	55a2 <drawBase()+0x14a>
    55be:	e7ba      	b.n	5536 <drawBase()+0xde>
    55c0:	00000000 	.word	0x00000000
    55c4:	40490000 	.word	0x40490000
    55c8:	00000000 	.word	0x00000000
    55cc:	40400000 	.word	0x40400000
	...
    55d8:	70000000 	.word	0x70000000
    55dc:	200012d4 	.word	0x200012d4

000055e0 <drawSamples()>:
void drawSamples() {
    55e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55e4:	b086      	sub	sp, #24
  for (unsigned int ix = 1; ix < maxX + 1; ix++) {
    55e6:	2701      	movs	r7, #1
      if (note[((SMP.edit - 1) * maxX) + ix][iy][0] > 0) {
    55e8:	4e3c      	ldr	r6, [pc, #240]	; (56dc <drawSamples()+0xfc>)
    55ea:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 56e4 <drawSamples()+0x104>
    55ee:	e06f      	b.n	56d0 <drawSamples()+0xf0>
          light(ix, iy, getCol(note[((SMP.edit - 1) * maxX) + ix][iy][0]));
    55f0:	f7fe ff44 	bl	447c <getCol(unsigned int)>
    55f4:	f88d 0004 	strb.w	r0, [sp, #4]
    55f8:	f3c0 2307 	ubfx	r3, r0, #8, #8
    55fc:	f88d 3005 	strb.w	r3, [sp, #5]
    5600:	f3c0 4007 	ubfx	r0, r0, #16, #8
    5604:	f88d 0006 	strb.w	r0, [sp, #6]
    5608:	9a01      	ldr	r2, [sp, #4]
    560a:	4629      	mov	r1, r5
    560c:	4638      	mov	r0, r7
    560e:	f7fe fa35 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
          for (unsigned int iy2 = 1; iy2 < maxY + 1; iy2++) {
    5612:	2401      	movs	r4, #1
    5614:	e002      	b.n	561c <drawSamples()+0x3c>
    5616:	3401      	adds	r4, #1
    5618:	2c11      	cmp	r4, #17
    561a:	d024      	beq.n	5666 <drawSamples()+0x86>
            if (iy2 != iy && note[((SMP.edit - 1) * maxX) + ix][iy2][0] == note[((SMP.edit - 1) * maxX) + ix][iy][0]) {
    561c:	42a5      	cmp	r5, r4
    561e:	d0fa      	beq.n	5616 <drawSamples()+0x36>
    5620:	f8d8 3018 	ldr.w	r3, [r8, #24]
    5624:	3b01      	subs	r3, #1
    5626:	eb07 1303 	add.w	r3, r7, r3, lsl #4
    562a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    562e:	195a      	adds	r2, r3, r5
    5630:	f856 0032 	ldr.w	r0, [r6, r2, lsl #3]
    5634:	4423      	add	r3, r4
    5636:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    563a:	4283      	cmp	r3, r0
    563c:	d1eb      	bne.n	5616 <drawSamples()+0x36>
              light(ix, iy2, getCol(note[((SMP.edit - 1) * maxX) + ix][iy][0]) / 8);
    563e:	f7fe ff1d 	bl	447c <getCol(unsigned int)>
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    5642:	f3c0 22c4 	ubfx	r2, r0, #11, #5
    5646:	f3c0 43c4 	ubfx	r3, r0, #19, #5
    564a:	f3c0 00c4 	ubfx	r0, r0, #3, #5
    564e:	f88d 000c 	strb.w	r0, [sp, #12]
    5652:	f88d 200d 	strb.w	r2, [sp, #13]
    5656:	f88d 300e 	strb.w	r3, [sp, #14]
    565a:	9a03      	ldr	r2, [sp, #12]
    565c:	4621      	mov	r1, r4
    565e:	4638      	mov	r0, r7
    5660:	f7fe fa0c 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    5664:	e7d7      	b.n	5616 <drawSamples()+0x36>
    for (unsigned int iy = 1; iy < maxY + 1; iy++) {
    5666:	3501      	adds	r5, #1
    5668:	2d11      	cmp	r5, #17
    566a:	d02e      	beq.n	56ca <drawSamples()+0xea>
      if (note[((SMP.edit - 1) * maxX) + ix][iy][0] > 0) {
    566c:	f8d8 3018 	ldr.w	r3, [r8, #24]
    5670:	3b01      	subs	r3, #1
    5672:	eb07 1303 	add.w	r3, r7, r3, lsl #4
    5676:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    567a:	442b      	add	r3, r5
    567c:	f856 0033 	ldr.w	r0, [r6, r3, lsl #3]
    5680:	2800      	cmp	r0, #0
    5682:	d0f0      	beq.n	5666 <drawSamples()+0x86>
        if (!SMP.mute[note[((SMP.edit - 1) * maxX) + ix][iy][0]]) {
    5684:	eb08 0380 	add.w	r3, r8, r0, lsl #2
    5688:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    568c:	2b00      	cmp	r3, #0
    568e:	d0af      	beq.n	55f0 <drawSamples()+0x10>
          light(ix, iy, getCol(note[((SMP.edit - 1) * maxX) + ix][iy][0]) / 24);
    5690:	f7fe fef4 	bl	447c <getCol(unsigned int)>
    5694:	f3c0 2207 	ubfx	r2, r0, #8, #8
    5698:	4911      	ldr	r1, [pc, #68]	; (56e0 <drawSamples()+0x100>)
    569a:	fba1 3202 	umull	r3, r2, r1, r2
    569e:	0912      	lsrs	r2, r2, #4
    56a0:	f3c0 4307 	ubfx	r3, r0, #16, #8
    56a4:	fba1 4303 	umull	r4, r3, r1, r3
    56a8:	091b      	lsrs	r3, r3, #4
    56aa:	b2c0      	uxtb	r0, r0
    56ac:	fba1 1000 	umull	r1, r0, r1, r0
    56b0:	0900      	lsrs	r0, r0, #4
    56b2:	f88d 0014 	strb.w	r0, [sp, #20]
    56b6:	f88d 2015 	strb.w	r2, [sp, #21]
    56ba:	f88d 3016 	strb.w	r3, [sp, #22]
    56be:	9a05      	ldr	r2, [sp, #20]
    56c0:	4629      	mov	r1, r5
    56c2:	4638      	mov	r0, r7
    56c4:	f7fe f9da 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    56c8:	e7cd      	b.n	5666 <drawSamples()+0x86>
  for (unsigned int ix = 1; ix < maxX + 1; ix++) {
    56ca:	3701      	adds	r7, #1
    56cc:	2f11      	cmp	r7, #17
    56ce:	d001      	beq.n	56d4 <drawSamples()+0xf4>
    for (unsigned int iy = 1; iy < maxY + 1; iy++) {
    56d0:	2501      	movs	r5, #1
    56d2:	e7cb      	b.n	566c <drawSamples()+0x8c>
}
    56d4:	b006      	add	sp, #24
    56d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56da:	bf00      	nop
    56dc:	70db37d8 	.word	0x70db37d8
    56e0:	aaaaaaab 	.word	0xaaaaaaab
    56e4:	70000000 	.word	0x70000000

000056e8 <drawTimer(unsigned int)>:
  if (SMP.page == SMP.edit) {
    56e8:	4b25      	ldr	r3, [pc, #148]	; (5780 <drawTimer(unsigned int)+0x98>)
    56ea:	695a      	ldr	r2, [r3, #20]
    56ec:	699b      	ldr	r3, [r3, #24]
    56ee:	429a      	cmp	r2, r3
    56f0:	d000      	beq.n	56f4 <drawTimer(unsigned int)+0xc>
    56f2:	4770      	bx	lr
void drawTimer(unsigned int timer) {
    56f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    56f8:	b084      	sub	sp, #16
    56fa:	4605      	mov	r5, r0
    for (unsigned int y = 1; y < maxY; y++) {
    56fc:	2401      	movs	r4, #1
        : r(ir), g(ig), b(ib)
    56fe:	f04f 080a 	mov.w	r8, #10
      if (note[((SMP.page - 1) * maxX) + timer][y][0] > 0) {
    5702:	4f20      	ldr	r7, [pc, #128]	; (5784 <drawTimer(unsigned int)+0x9c>)
    5704:	4e1e      	ldr	r6, [pc, #120]	; (5780 <drawTimer(unsigned int)+0x98>)
    5706:	e00e      	b.n	5726 <drawTimer(unsigned int)+0x3e>
    5708:	2300      	movs	r3, #0
    570a:	f88d 300c 	strb.w	r3, [sp, #12]
    570e:	f88d 300d 	strb.w	r3, [sp, #13]
    5712:	f88d 300e 	strb.w	r3, [sp, #14]
          light(timer, y, CRGB(00, 00, 00));
    5716:	9a03      	ldr	r2, [sp, #12]
    5718:	4621      	mov	r1, r4
    571a:	4628      	mov	r0, r5
    571c:	f7fe f9ae 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int y = 1; y < maxY; y++) {
    5720:	3401      	adds	r4, #1
    5722:	2c10      	cmp	r4, #16
    5724:	d029      	beq.n	577a <drawTimer(unsigned int)+0x92>
    5726:	f88d 8004 	strb.w	r8, [sp, #4]
    572a:	2300      	movs	r3, #0
    572c:	f88d 3005 	strb.w	r3, [sp, #5]
    5730:	f88d 3006 	strb.w	r3, [sp, #6]
      light(timer, y, CRGB(10, 0, 0));
    5734:	9a01      	ldr	r2, [sp, #4]
    5736:	4621      	mov	r1, r4
    5738:	4628      	mov	r0, r5
    573a:	f7fe f99f 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
      if (note[((SMP.page - 1) * maxX) + timer][y][0] > 0) {
    573e:	6973      	ldr	r3, [r6, #20]
    5740:	3b01      	subs	r3, #1
    5742:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    5746:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    574a:	4423      	add	r3, r4
    574c:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    5750:	2b00      	cmp	r3, #0
    5752:	d0e5      	beq.n	5720 <drawTimer(unsigned int)+0x38>
        if (SMP.mute[note[((SMP.page - 1) * maxX) + timer][y][0]] == 0) {
    5754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    5758:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    575c:	2b00      	cmp	r3, #0
    575e:	d1d3      	bne.n	5708 <drawTimer(unsigned int)+0x20>
    5760:	23c8      	movs	r3, #200	; 0xc8
    5762:	f88d 3008 	strb.w	r3, [sp, #8]
    5766:	f88d 3009 	strb.w	r3, [sp, #9]
    576a:	f88d 300a 	strb.w	r3, [sp, #10]
          light(timer, y, CRGB(200, 200, 200));
    576e:	9a02      	ldr	r2, [sp, #8]
    5770:	4621      	mov	r1, r4
    5772:	4628      	mov	r0, r5
    5774:	f7fe f982 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    5778:	e7d2      	b.n	5720 <drawTimer(unsigned int)+0x38>
}
    577a:	b004      	add	sp, #16
    577c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5780:	70000000 	.word	0x70000000
    5784:	70db37d8 	.word	0x70db37d8

00005788 <drawCursor()>:
void drawCursor() {
    5788:	b500      	push	{lr}
    578a:	b083      	sub	sp, #12
  if (dir == 1)
    578c:	4b24      	ldr	r3, [pc, #144]	; (5820 <drawCursor()+0x98>)
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	2b01      	cmp	r3, #1
    5792:	d00c      	beq.n	57ae <drawCursor()+0x26>
  if (dir == -1)
    5794:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    5798:	d112      	bne.n	57c0 <drawCursor()+0x38>
    pulse = pulse - 1;
    579a:	4b22      	ldr	r3, [pc, #136]	; (5824 <drawCursor()+0x9c>)
    579c:	edd3 7a00 	vldr	s15, [r3]
    57a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    57a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    57a8:	edc3 7a00 	vstr	s15, [r3]
    57ac:	e008      	b.n	57c0 <drawCursor()+0x38>
    pulse = pulse + 1;
    57ae:	4b1d      	ldr	r3, [pc, #116]	; (5824 <drawCursor()+0x9c>)
    57b0:	edd3 7a00 	vldr	s15, [r3]
    57b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    57b8:	ee77 7a87 	vadd.f32	s15, s15, s14
    57bc:	edc3 7a00 	vstr	s15, [r3]
  if (pulse > 220) {
    57c0:	4b18      	ldr	r3, [pc, #96]	; (5824 <drawCursor()+0x9c>)
    57c2:	edd3 7a00 	vldr	s15, [r3]
    57c6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 5828 <drawCursor()+0xa0>
    57ca:	eef4 7ac7 	vcmpe.f32	s15, s14
    57ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57d2:	dd03      	ble.n	57dc <drawCursor()+0x54>
    dir = -1;
    57d4:	4b12      	ldr	r3, [pc, #72]	; (5820 <drawCursor()+0x98>)
    57d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    57da:	601a      	str	r2, [r3, #0]
  if (pulse < 1) {
    57dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    57e0:	eef4 7ac7 	vcmpe.f32	s15, s14
    57e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    57e8:	d416      	bmi.n	5818 <drawCursor()+0x90>
  light(SMP.x, SMP.y, CRGB(255 - (int)pulse, 255 - (int)pulse, 255 - (int)pulse));
    57ea:	4810      	ldr	r0, [pc, #64]	; (582c <drawCursor()+0xa4>)
    57ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    57f0:	ee17 3a90 	vmov	r3, s15
    57f4:	43db      	mvns	r3, r3
    57f6:	b2db      	uxtb	r3, r3
    57f8:	f88d 3004 	strb.w	r3, [sp, #4]
    57fc:	f88d 3005 	strb.w	r3, [sp, #5]
    5800:	f88d 3006 	strb.w	r3, [sp, #6]
    5804:	9a01      	ldr	r2, [sp, #4]
    5806:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
    580a:	f8d0 00ac 	ldr.w	r0, [r0, #172]	; 0xac
    580e:	f7fe f935 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
}
    5812:	b003      	add	sp, #12
    5814:	f85d fb04 	ldr.w	pc, [sp], #4
    dir = 1;
    5818:	4b01      	ldr	r3, [pc, #4]	; (5820 <drawCursor()+0x98>)
    581a:	2201      	movs	r2, #1
    581c:	601a      	str	r2, [r3, #0]
    581e:	e7e4      	b.n	57ea <drawCursor()+0x62>
    5820:	20005804 	.word	0x20005804
    5824:	20005b0c 	.word	0x20005b0c
    5828:	435c0000 	.word	0x435c0000
    582c:	70000000 	.word	0x70000000

00005830 <showIcons(String, CRGB)>:
void showIcons(String ico, CRGB colors) {
    5830:	b530      	push	{r4, r5, lr}
    5832:	b083      	sub	sp, #12
    5834:	4604      	mov	r4, r0
    5836:	9101      	str	r1, [sp, #4]
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5838:	4935      	ldr	r1, [pc, #212]	; (5910 <showIcons(String, CRGB)+0xe0>)
    583a:	f011 f870 	bl	1691e <String::equals(char const*) const>
  if (ico == "icon_samplepack") {
    583e:	b180      	cbz	r0, 5862 <showIcons(String, CRGB)+0x32>
    size = sizeof(icon_samplepack) / sizeof(icon_samplepack[0]);
    5840:	2312      	movs	r3, #18
    iconArray = icon_samplepack;
    5842:	4d34      	ldr	r5, [pc, #208]	; (5914 <showIcons(String, CRGB)+0xe4>)
    for (unsigned int gx = 0; gx < size; gx++) {
    5844:	462c      	mov	r4, r5
    5846:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
      light(iconArray[gx][0], maxY - iconArray[gx][1], colors);
    584a:	6861      	ldr	r1, [r4, #4]
    584c:	9a01      	ldr	r2, [sp, #4]
    584e:	f1c1 0110 	rsb	r1, r1, #16
    5852:	f854 0b08 	ldr.w	r0, [r4], #8
    5856:	f7fe f911 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int gx = 0; gx < size; gx++) {
    585a:	42ac      	cmp	r4, r5
    585c:	d1f5      	bne.n	584a <showIcons(String, CRGB)+0x1a>
}
    585e:	b003      	add	sp, #12
    5860:	bd30      	pop	{r4, r5, pc}
    5862:	492d      	ldr	r1, [pc, #180]	; (5918 <showIcons(String, CRGB)+0xe8>)
    5864:	4620      	mov	r0, r4
    5866:	f011 f85a 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "icon_sample") {
    586a:	b110      	cbz	r0, 5872 <showIcons(String, CRGB)+0x42>
    size = sizeof(icon_sample) / sizeof(icon_sample[0]);
    586c:	2313      	movs	r3, #19
    iconArray = icon_sample;
    586e:	4d2b      	ldr	r5, [pc, #172]	; (591c <showIcons(String, CRGB)+0xec>)
    5870:	e7e8      	b.n	5844 <showIcons(String, CRGB)+0x14>
    5872:	492b      	ldr	r1, [pc, #172]	; (5920 <showIcons(String, CRGB)+0xf0>)
    5874:	4620      	mov	r0, r4
    5876:	f011 f852 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "icon_loadsave") {
    587a:	b110      	cbz	r0, 5882 <showIcons(String, CRGB)+0x52>
    size = sizeof(icon_loadsave) / sizeof(icon_loadsave[0]);
    587c:	2314      	movs	r3, #20
    iconArray = icon_loadsave;
    587e:	4d29      	ldr	r5, [pc, #164]	; (5924 <showIcons(String, CRGB)+0xf4>)
    5880:	e7e0      	b.n	5844 <showIcons(String, CRGB)+0x14>
    5882:	4929      	ldr	r1, [pc, #164]	; (5928 <showIcons(String, CRGB)+0xf8>)
    5884:	4620      	mov	r0, r4
    5886:	f011 f84a 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_load") {
    588a:	b110      	cbz	r0, 5892 <showIcons(String, CRGB)+0x62>
    size = sizeof(helper_load) / sizeof(helper_load[0]);
    588c:	2303      	movs	r3, #3
    iconArray = helper_load;
    588e:	4d27      	ldr	r5, [pc, #156]	; (592c <showIcons(String, CRGB)+0xfc>)
    5890:	e7d8      	b.n	5844 <showIcons(String, CRGB)+0x14>
    5892:	4927      	ldr	r1, [pc, #156]	; (5930 <showIcons(String, CRGB)+0x100>)
    5894:	4620      	mov	r0, r4
    5896:	f011 f842 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_seek") {
    589a:	b110      	cbz	r0, 58a2 <showIcons(String, CRGB)+0x72>
    size = sizeof(helper_seek) / sizeof(helper_seek[0]);
    589c:	2302      	movs	r3, #2
    iconArray = helper_seek;
    589e:	4d25      	ldr	r5, [pc, #148]	; (5934 <showIcons(String, CRGB)+0x104>)
    58a0:	e7d0      	b.n	5844 <showIcons(String, CRGB)+0x14>
    58a2:	4925      	ldr	r1, [pc, #148]	; (5938 <showIcons(String, CRGB)+0x108>)
    58a4:	4620      	mov	r0, r4
    58a6:	f011 f83a 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_folder") {
    58aa:	b110      	cbz	r0, 58b2 <showIcons(String, CRGB)+0x82>
    size = sizeof(helper_folder) / sizeof(helper_folder[0]);
    58ac:	2305      	movs	r3, #5
    iconArray = helper_folder;
    58ae:	4d23      	ldr	r5, [pc, #140]	; (593c <showIcons(String, CRGB)+0x10c>)
    58b0:	e7c8      	b.n	5844 <showIcons(String, CRGB)+0x14>
    58b2:	4923      	ldr	r1, [pc, #140]	; (5940 <showIcons(String, CRGB)+0x110>)
    58b4:	4620      	mov	r0, r4
    58b6:	f011 f832 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_save") {
    58ba:	b110      	cbz	r0, 58c2 <showIcons(String, CRGB)+0x92>
    size = sizeof(helper_save) / sizeof(helper_save[0]);
    58bc:	2303      	movs	r3, #3
    iconArray = helper_save;
    58be:	4d21      	ldr	r5, [pc, #132]	; (5944 <showIcons(String, CRGB)+0x114>)
    58c0:	e7c0      	b.n	5844 <showIcons(String, CRGB)+0x14>
    58c2:	4921      	ldr	r1, [pc, #132]	; (5948 <showIcons(String, CRGB)+0x118>)
    58c4:	4620      	mov	r0, r4
    58c6:	f011 f82a 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_select") {
    58ca:	b110      	cbz	r0, 58d2 <showIcons(String, CRGB)+0xa2>
    size = sizeof(helper_select) / sizeof(helper_select[0]);
    58cc:	2303      	movs	r3, #3
    iconArray = helper_select;
    58ce:	4d1f      	ldr	r5, [pc, #124]	; (594c <showIcons(String, CRGB)+0x11c>)
    58d0:	e7b8      	b.n	5844 <showIcons(String, CRGB)+0x14>
    58d2:	491f      	ldr	r1, [pc, #124]	; (5950 <showIcons(String, CRGB)+0x120>)
    58d4:	4620      	mov	r0, r4
    58d6:	f011 f822 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_vol") {
    58da:	b140      	cbz	r0, 58ee <showIcons(String, CRGB)+0xbe>
    if (!isEncoder4Defined)
    58dc:	4b1d      	ldr	r3, [pc, #116]	; (5954 <showIcons(String, CRGB)+0x124>)
    58de:	7819      	ldrb	r1, [r3, #0]
    size = sizeof(helper_vol) / sizeof(helper_vol[0]);
    58e0:	2305      	movs	r3, #5
    58e2:	4d1d      	ldr	r5, [pc, #116]	; (5958 <showIcons(String, CRGB)+0x128>)
    58e4:	4a1d      	ldr	r2, [pc, #116]	; (595c <showIcons(String, CRGB)+0x12c>)
    58e6:	2900      	cmp	r1, #0
    58e8:	bf08      	it	eq
    58ea:	4615      	moveq	r5, r2
    58ec:	e7aa      	b.n	5844 <showIcons(String, CRGB)+0x14>
    58ee:	491c      	ldr	r1, [pc, #112]	; (5960 <showIcons(String, CRGB)+0x130>)
    58f0:	4620      	mov	r0, r4
    58f2:	f011 f814 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "helper_bpm") {
    58f6:	b110      	cbz	r0, 58fe <showIcons(String, CRGB)+0xce>
    size = sizeof(helper_bpm) / sizeof(helper_bpm[0]);
    58f8:	2307      	movs	r3, #7
    iconArray = helper_bpm;
    58fa:	4d1a      	ldr	r5, [pc, #104]	; (5964 <showIcons(String, CRGB)+0x134>)
    58fc:	e7a2      	b.n	5844 <showIcons(String, CRGB)+0x14>
    58fe:	491a      	ldr	r1, [pc, #104]	; (5968 <showIcons(String, CRGB)+0x138>)
    5900:	4620      	mov	r0, r4
    5902:	f011 f80c 	bl	1691e <String::equals(char const*) const>
  } else if (ico == "icon_bpm") {
    5906:	2800      	cmp	r0, #0
    5908:	d0a9      	beq.n	585e <showIcons(String, CRGB)+0x2e>
    size = sizeof(icon_bpm) / sizeof(icon_bpm[0]);
    590a:	2326      	movs	r3, #38	; 0x26
    iconArray = icon_bpm;
    590c:	4d17      	ldr	r5, [pc, #92]	; (596c <showIcons(String, CRGB)+0x13c>)
    590e:	e799      	b.n	5844 <showIcons(String, CRGB)+0x14>
    5910:	20000dcc 	.word	0x20000dcc
    5914:	20001204 	.word	0x20001204
    5918:	20000ddc 	.word	0x20000ddc
    591c:	20000f60 	.word	0x20000f60
    5920:	20000de8 	.word	0x20000de8
    5924:	20001164 	.word	0x20001164
    5928:	20000df8 	.word	0x20000df8
    592c:	20000ef8 	.word	0x20000ef8
    5930:	20000e04 	.word	0x20000e04
    5934:	20000f28 	.word	0x20000f28
    5938:	20000e10 	.word	0x20000e10
    593c:	20001124 	.word	0x20001124
    5940:	20000e20 	.word	0x20000e20
    5944:	20000f10 	.word	0x20000f10
    5948:	20000e2c 	.word	0x20000e2c
    594c:	2000114c 	.word	0x2000114c
    5950:	20000e3c 	.word	0x20000e3c
    5954:	20005c89 	.word	0x20005c89
    5958:	20000ed0 	.word	0x20000ed0
    595c:	20000f38 	.word	0x20000f38
    5960:	20000e48 	.word	0x20000e48
    5964:	20000e98 	.word	0x20000e98
    5968:	20000e54 	.word	0x20000e54
    596c:	20001f34 	.word	0x20001f34

00005970 <drawBPMScreen()>:
void drawBPMScreen() {
    5970:	b530      	push	{r4, r5, lr}
    5972:	b08b      	sub	sp, #44	; 0x2c
  FastLEDclear();
    5974:	f7fd fea6 	bl	36c4 <FastLEDclear()>
  drawVolume(SMP.vol);
    5978:	4d1d      	ldr	r5, [pc, #116]	; (59f0 <drawBPMScreen()+0x80>)
    597a:	68a8      	ldr	r0, [r5, #8]
    597c:	f7fe fdac 	bl	44d8 <drawVolume(unsigned int)>
  CRGB volColor = CRGB(SMP.vol * SMP.vol, 20 - SMP.vol, 0);
    5980:	7a2b      	ldrb	r3, [r5, #8]
    5982:	fb13 f203 	smulbb	r2, r3, r3
    5986:	f88d 2004 	strb.w	r2, [sp, #4]
    598a:	f1c3 0314 	rsb	r3, r3, #20
    598e:	f88d 3005 	strb.w	r3, [sp, #5]
    5992:	2400      	movs	r4, #0
    5994:	f88d 4006 	strb.w	r4, [sp, #6]
  showIcons("helper_vol", volColor);
    5998:	4916      	ldr	r1, [pc, #88]	; (59f4 <drawBPMScreen()+0x84>)
    599a:	a802      	add	r0, sp, #8
    599c:	f010 fedb 	bl	16756 <String::String(char const*)>
    59a0:	9901      	ldr	r1, [sp, #4]
    59a2:	a802      	add	r0, sp, #8
    59a4:	f7ff ff44 	bl	5830 <showIcons(String, CRGB)>
    59a8:	a802      	add	r0, sp, #8
    59aa:	f010 fe8b 	bl	166c4 <String::~String()>
  showIcons("helper_bpm", CRGB(10, 10, 10));
    59ae:	4912      	ldr	r1, [pc, #72]	; (59f8 <drawBPMScreen()+0x88>)
    59b0:	a805      	add	r0, sp, #20
    59b2:	f010 fed0 	bl	16756 <String::String(char const*)>
    59b6:	230a      	movs	r3, #10
    59b8:	f88d 3020 	strb.w	r3, [sp, #32]
    59bc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    59c0:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    59c4:	9908      	ldr	r1, [sp, #32]
    59c6:	a805      	add	r0, sp, #20
    59c8:	f7ff ff32 	bl	5830 <showIcons(String, CRGB)>
    59cc:	a805      	add	r0, sp, #20
    59ce:	f010 fe79 	bl	166c4 <String::~String()>
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    59d2:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
    59d6:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
    59da:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  showNumber(SMP.bpm, false, -1);
    59de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    59e2:	9909      	ldr	r1, [sp, #36]	; 0x24
    59e4:	68e8      	ldr	r0, [r5, #12]
    59e6:	f7fe fddf 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
}
    59ea:	b00b      	add	sp, #44	; 0x2c
    59ec:	bd30      	pop	{r4, r5, pc}
    59ee:	bf00      	nop
    59f0:	70000000 	.word	0x70000000
    59f4:	20000e3c 	.word	0x20000e3c
    59f8:	20000e48 	.word	0x20000e48

000059fc <updateBPM()>:
void updateBPM() {
    59fc:	b510      	push	{r4, lr}
    59fe:	b08a      	sub	sp, #40	; 0x28
	StringSumHelper(const char *p) : String(p) {}
    5a00:	491b      	ldr	r1, [pc, #108]	; (5a70 <updateBPM()+0x74>)
    5a02:	a804      	add	r0, sp, #16
    5a04:	f010 fea7 	bl	16756 <String::String(char const*)>
  serialprintln("BPM: " + String(currentMode->pos[2]));
    5a08:	4c1a      	ldr	r4, [pc, #104]	; (5a74 <updateBPM()+0x78>)
    5a0a:	6823      	ldr	r3, [r4, #0]
    5a0c:	220a      	movs	r2, #10
    5a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    5a10:	a807      	add	r0, sp, #28
    5a12:	f010 fee9 	bl	167e8 <String::String(unsigned int, unsigned char)>
    5a16:	a907      	add	r1, sp, #28
    5a18:	a804      	add	r0, sp, #16
    5a1a:	f010 ff42 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    5a1e:	4601      	mov	r1, r0
class StringSumHelper : public String
    5a20:	a801      	add	r0, sp, #4
    5a22:	f010 feb4 	bl	1678e <String::String(String const&)>
    5a26:	a801      	add	r0, sp, #4
    5a28:	f010 fe4c 	bl	166c4 <String::~String()>
    5a2c:	a807      	add	r0, sp, #28
    5a2e:	f010 fe49 	bl	166c4 <String::~String()>
    5a32:	a804      	add	r0, sp, #16
    5a34:	f010 fe46 	bl	166c4 <String::~String()>
  SMP.bpm = currentMode->pos[2];
    5a38:	6823      	ldr	r3, [r4, #0]
    5a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    5a3c:	4b0e      	ldr	r3, [pc, #56]	; (5a78 <updateBPM()+0x7c>)
    5a3e:	60da      	str	r2, [r3, #12]
  playNoteInterval = ((60 * 1000 / SMP.bpm) / 4) * 1000;
    5a40:	f643 2398 	movw	r3, #15000	; 0x3a98
    5a44:	fbb3 f3f2 	udiv	r3, r3, r2
    5a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a4c:	fb03 f202 	mul.w	r2, r3, r2
    5a50:	490a      	ldr	r1, [pc, #40]	; (5a7c <updateBPM()+0x80>)
    5a52:	600a      	str	r2, [r1, #0]
		if (channel) channel->LDVAL = cycles;
    5a54:	4a0a      	ldr	r2, [pc, #40]	; (5a80 <updateBPM()+0x84>)
    5a56:	6812      	ldr	r2, [r2, #0]
    5a58:	b12a      	cbz	r2, 5a66 <updateBPM()+0x6a>
			return (24000000 / 1000000) * period - 1;
    5a5a:	f645 51c0 	movw	r1, #24000	; 0x5dc0
    5a5e:	fb01 f303 	mul.w	r3, r1, r3
    5a62:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
    5a64:	6013      	str	r3, [r2, #0]
  drawBPMScreen();
    5a66:	f7ff ff83 	bl	5970 <drawBPMScreen()>
}
    5a6a:	b00a      	add	sp, #40	; 0x28
    5a6c:	bd10      	pop	{r4, pc}
    5a6e:	bf00      	nop
    5a70:	20000e60 	.word	0x20000e60
    5a74:	200057ec 	.word	0x200057ec
    5a78:	70000000 	.word	0x70000000
    5a7c:	20005b00 	.word	0x20005b00
    5a80:	20005b04 	.word	0x20005b04

00005a84 <setVolume()>:
void setVolume() {
    5a84:	b508      	push	{r3, lr}
  drawBPMScreen();
    5a86:	f7ff ff73 	bl	5970 <drawBPMScreen()>
  if (!isEncoder4Defined) {
    5a8a:	4b11      	ldr	r3, [pc, #68]	; (5ad0 <setVolume()+0x4c>)
    5a8c:	781b      	ldrb	r3, [r3, #0]
    5a8e:	b98b      	cbnz	r3, 5ab4 <setVolume()+0x30>
    if (currentMode->pos[0] != SMP.vol) {
    5a90:	4b10      	ldr	r3, [pc, #64]	; (5ad4 <setVolume()+0x50>)
    5a92:	681b      	ldr	r3, [r3, #0]
    5a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5a96:	4b10      	ldr	r3, [pc, #64]	; (5ad8 <setVolume()+0x54>)
    5a98:	689b      	ldr	r3, [r3, #8]
    5a9a:	429a      	cmp	r2, r3
    5a9c:	d107      	bne.n	5aae <setVolume()+0x2a>
  if (currentMode->pos[2] != SMP.bpm) {
    5a9e:	4b0d      	ldr	r3, [pc, #52]	; (5ad4 <setVolume()+0x50>)
    5aa0:	681b      	ldr	r3, [r3, #0]
    5aa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    5aa4:	4b0c      	ldr	r3, [pc, #48]	; (5ad8 <setVolume()+0x54>)
    5aa6:	68db      	ldr	r3, [r3, #12]
    5aa8:	429a      	cmp	r2, r3
    5aaa:	d10d      	bne.n	5ac8 <setVolume()+0x44>
}
    5aac:	bd08      	pop	{r3, pc}
      updateVolume();
    5aae:	f7fe fc85 	bl	43bc <updateVolume()>
    5ab2:	e7f4      	b.n	5a9e <setVolume()+0x1a>
    if (currentMode->pos[3] != SMP.vol) {
    5ab4:	4b07      	ldr	r3, [pc, #28]	; (5ad4 <setVolume()+0x50>)
    5ab6:	681b      	ldr	r3, [r3, #0]
    5ab8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5aba:	4b07      	ldr	r3, [pc, #28]	; (5ad8 <setVolume()+0x54>)
    5abc:	689b      	ldr	r3, [r3, #8]
    5abe:	429a      	cmp	r2, r3
    5ac0:	d0ed      	beq.n	5a9e <setVolume()+0x1a>
      updateVolume();
    5ac2:	f7fe fc7b 	bl	43bc <updateVolume()>
    5ac6:	e7ea      	b.n	5a9e <setVolume()+0x1a>
    updateBPM();
    5ac8:	f7ff ff98 	bl	59fc <updateBPM()>
}
    5acc:	e7ee      	b.n	5aac <setVolume()+0x28>
    5ace:	bf00      	nop
    5ad0:	20005c89 	.word	0x20005c89
    5ad4:	200057ec 	.word	0x200057ec
    5ad8:	70000000 	.word	0x70000000

00005adc <saveSamplePack(unsigned int)>:
void saveSamplePack(unsigned int pack) {
    5adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ae0:	f5ad 7d2d 	sub.w	sp, sp, #692	; 0x2b4
    5ae4:	4604      	mov	r4, r0
    5ae6:	9001      	str	r0, [sp, #4]
	StringSumHelper(const char *p) : String(p) {}
    5ae8:	495d      	ldr	r1, [pc, #372]	; (5c60 <saveSamplePack(unsigned int)+0x184>)
    5aea:	a8a0      	add	r0, sp, #640	; 0x280
    5aec:	f010 fe33 	bl	16756 <String::String(char const*)>
  serialprintln("Saving SamplePack in #" + String(pack));
    5af0:	220a      	movs	r2, #10
    5af2:	4621      	mov	r1, r4
    5af4:	a8a3      	add	r0, sp, #652	; 0x28c
    5af6:	f010 fe77 	bl	167e8 <String::String(unsigned int, unsigned char)>
    5afa:	a9a3      	add	r1, sp, #652	; 0x28c
    5afc:	a8a0      	add	r0, sp, #640	; 0x280
    5afe:	f010 fed0 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    5b02:	4601      	mov	r1, r0
class StringSumHelper : public String
    5b04:	a89d      	add	r0, sp, #628	; 0x274
    5b06:	f010 fe42 	bl	1678e <String::String(String const&)>
    5b0a:	a89d      	add	r0, sp, #628	; 0x274
    5b0c:	f010 fdda 	bl	166c4 <String::~String()>
    5b10:	a8a3      	add	r0, sp, #652	; 0x28c
    5b12:	f010 fdd7 	bl	166c4 <String::~String()>
    5b16:	a8a0      	add	r0, sp, #640	; 0x280
    5b18:	f010 fdd4 	bl	166c4 <String::~String()>
  FastLEDclear();
    5b1c:	f7fd fdd2 	bl	36c4 <FastLEDclear()>
  sprintf(OUTPUTdir, "%d/", pack);
    5b20:	4622      	mov	r2, r4
    5b22:	4950      	ldr	r1, [pc, #320]	; (5c64 <saveSamplePack(unsigned int)+0x188>)
    5b24:	a890      	add	r0, sp, #576	; 0x240
    5b26:	f01c fdeb 	bl	22700 <sprintf>
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    5b2a:	4b4f      	ldr	r3, [pc, #316]	; (5c68 <saveSamplePack(unsigned int)+0x18c>)
    5b2c:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    5b30:	b1c9      	cbz	r1, 5b66 <saveSamplePack(unsigned int)+0x8a>
    5b32:	2300      	movs	r3, #0
    5b34:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    5b38:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
    5b3c:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    5b40:	2301      	movs	r3, #1
    5b42:	aa90      	add	r2, sp, #576	; 0x240
    5b44:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5b48:	a810      	add	r0, sp, #64	; 0x40
    5b4a:	f00b fad9 	bl	11100 <FatFile::mkdir(FatFile*, char const*, bool)>
  delay(500);
    5b4e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    5b52:	f011 f88f 	bl	16c74 <delay>
    5b56:	f04f 0900 	mov.w	r9, #0
    5b5a:	2501      	movs	r5, #1
        : r(ir), g(ig), b(ib)
    5b5c:	464c      	mov	r4, r9
    showIcons("icon_samplepack", CRGB(20, 20, 20));
    5b5e:	f8df b114 	ldr.w	fp, [pc, #276]	; 5c74 <saveSamplePack(unsigned int)+0x198>
    5b62:	2614      	movs	r6, #20
    5b64:	e0c7      	b.n	5cf6 <saveSamplePack(unsigned int)+0x21a>
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5b66:	4b40      	ldr	r3, [pc, #256]	; (5c68 <saveSamplePack(unsigned int)+0x18c>)
    5b68:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    5b6c:	2900      	cmp	r1, #0
    5b6e:	d0ee      	beq.n	5b4e <saveSamplePack(unsigned int)+0x72>
    5b70:	2300      	movs	r3, #0
    5b72:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
    5b76:	f88d 3072 	strb.w	r3, [sp, #114]	; 0x72
    5b7a:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    ExFatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    5b7e:	2301      	movs	r3, #1
    5b80:	aa90      	add	r2, sp, #576	; 0x240
    5b82:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5b86:	a810      	add	r0, sp, #64	; 0x40
    5b88:	f009 fc75 	bl	f476 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    5b8c:	e7df      	b.n	5b4e <saveSamplePack(unsigned int)+0x72>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    5b8e:	4a37      	ldr	r2, [pc, #220]	; (5c6c <saveSamplePack(unsigned int)+0x190>)
    5b90:	e0dd      	b.n	5d4e <saveSamplePack(unsigned int)+0x272>
           m_xVol ? m_xVol->exists(path) : false;
    5b92:	4b35      	ldr	r3, [pc, #212]	; (5c68 <saveSamplePack(unsigned int)+0x18c>)
    5b94:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    5b98:	2900      	cmp	r1, #0
    5b9a:	f000 8096 	beq.w	5cca <saveSamplePack(unsigned int)+0x1ee>
    5b9e:	f88d 4071 	strb.w	r4, [sp, #113]	; 0x71
    5ba2:	f88d 4072 	strb.w	r4, [sp, #114]	; 0x72
    5ba6:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    return tmp.open(this, path, O_RDONLY);
    5baa:	4623      	mov	r3, r4
    5bac:	a810      	add	r0, sp, #64	; 0x40
    5bae:	f009 fa0c 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    5bb2:	e0dc      	b.n	5d6e <saveSamplePack(unsigned int)+0x292>
    5bb4:	4a2d      	ldr	r2, [pc, #180]	; (5c6c <saveSamplePack(unsigned int)+0x190>)
    5bb6:	e0e2      	b.n	5d7e <saveSamplePack(unsigned int)+0x2a2>
    5bb8:	9f23      	ldr	r7, [sp, #140]	; 0x8c
    5bba:	2f00      	cmp	r7, #0
    5bbc:	f040 80e8 	bne.w	5d90 <saveSamplePack(unsigned int)+0x2b4>
    5bc0:	e100      	b.n	5dc4 <saveSamplePack(unsigned int)+0x2e8>
    5bc2:	4b29      	ldr	r3, [pc, #164]	; (5c68 <saveSamplePack(unsigned int)+0x18c>)
    5bc4:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    5bc8:	2900      	cmp	r1, #0
    5bca:	f000 811a 	beq.w	5e02 <saveSamplePack(unsigned int)+0x326>
    5bce:	f88d 4071 	strb.w	r4, [sp, #113]	; 0x71
    5bd2:	f88d 4072 	strb.w	r4, [sp, #114]	; 0x72
    5bd6:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
    5bda:	4623      	mov	r3, r4
    5bdc:	aa03      	add	r2, sp, #12
    5bde:	a810      	add	r0, sp, #64	; 0x40
    5be0:	f009 f9f3 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    5be4:	e10a      	b.n	5dfc <saveSamplePack(unsigned int)+0x320>
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    5be6:	4b20      	ldr	r3, [pc, #128]	; (5c68 <saveSamplePack(unsigned int)+0x18c>)
    5be8:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    5bec:	b199      	cbz	r1, 5c16 <saveSamplePack(unsigned int)+0x13a>
    5bee:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    5bf2:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
    5bf6:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5bfa:	2301      	movs	r3, #1
    5bfc:	aa03      	add	r2, sp, #12
    5bfe:	a810      	add	r0, sp, #64	; 0x40
    5c00:	f00b f987 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
    5c04:	b918      	cbnz	r0, 5c0e <saveSamplePack(unsigned int)+0x132>
        delay(100);
    5c06:	2064      	movs	r0, #100	; 0x64
    5c08:	f011 f834 	bl	16c74 <delay>
    5c0c:	e0f9      	b.n	5e02 <saveSamplePack(unsigned int)+0x326>
    5c0e:	a810      	add	r0, sp, #64	; 0x40
    5c10:	f00c f964 	bl	11edc <FatFile::remove()>
    5c14:	e7f7      	b.n	5c06 <saveSamplePack(unsigned int)+0x12a>
           m_xVol ? m_xVol->remove(path) : false;
    5c16:	4b14      	ldr	r3, [pc, #80]	; (5c68 <saveSamplePack(unsigned int)+0x18c>)
    5c18:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    5c1c:	2900      	cmp	r1, #0
    5c1e:	d0f2      	beq.n	5c06 <saveSamplePack(unsigned int)+0x12a>
    5c20:	f88d 4071 	strb.w	r4, [sp, #113]	; 0x71
    5c24:	f88d 4072 	strb.w	r4, [sp, #114]	; 0x72
    5c28:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    5c2c:	2301      	movs	r3, #1
    5c2e:	aa03      	add	r2, sp, #12
    5c30:	a810      	add	r0, sp, #64	; 0x40
    5c32:	f009 f9ca 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    5c36:	2800      	cmp	r0, #0
    5c38:	d0e5      	beq.n	5c06 <saveSamplePack(unsigned int)+0x12a>
    5c3a:	a810      	add	r0, sp, #64	; 0x40
    5c3c:	f009 fa54 	bl	f0e8 <ExFatFile::remove()>
    5c40:	e7e1      	b.n	5c06 <saveSamplePack(unsigned int)+0x12a>
    5c42:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    5c46:	f1b8 0f00 	cmp.w	r8, #0
    5c4a:	f040 80e5 	bne.w	5e18 <saveSamplePack(unsigned int)+0x33c>
    5c4e:	e101      	b.n	5e54 <saveSamplePack(unsigned int)+0x378>
  switchMode(&draw);
    5c50:	4807      	ldr	r0, [pc, #28]	; (5c70 <saveSamplePack(unsigned int)+0x194>)
    5c52:	f7fe f823 	bl	3c9c <switchMode(Mode*)>
}
    5c56:	f50d 7d2d 	add.w	sp, sp, #692	; 0x2b4
    5c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c5e:	bf00      	nop
    5c60:	20000bfc 	.word	0x20000bfc
    5c64:	20000c14 	.word	0x20000c14
    5c68:	20006678 	.word	0x20006678
    5c6c:	20004ce8 	.word	0x20004ce8
    5c70:	20005808 	.word	0x20005808
    5c74:	20000dcc 	.word	0x20000dcc
		if (f) {
    5c78:	f1b8 0f00 	cmp.w	r8, #0
    5c7c:	d025      	beq.n	5cca <saveSamplePack(unsigned int)+0x1ee>
			f->close();
    5c7e:	f8d8 3000 	ldr.w	r3, [r8]
    5c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c84:	4640      	mov	r0, r8
    5c86:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    5c88:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5c8c:	3b01      	subs	r3, #1
    5c8e:	f8c8 3004 	str.w	r3, [r8, #4]
    5c92:	b94b      	cbnz	r3, 5ca8 <saveSamplePack(unsigned int)+0x1cc>
			f->close();
    5c94:	f8d8 3000 	ldr.w	r3, [r8]
    5c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5c9a:	4640      	mov	r0, r8
    5c9c:	4798      	blx	r3
			delete f;
    5c9e:	f8d8 3000 	ldr.w	r3, [r8]
    5ca2:	685b      	ldr	r3, [r3, #4]
    5ca4:	4640      	mov	r0, r8
    5ca6:	4798      	blx	r3
		if (f) {
    5ca8:	b17f      	cbz	r7, 5cca <saveSamplePack(unsigned int)+0x1ee>
			f->close();
    5caa:	683b      	ldr	r3, [r7, #0]
    5cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5cae:	4638      	mov	r0, r7
    5cb0:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    5cb2:	687b      	ldr	r3, [r7, #4]
    5cb4:	3b01      	subs	r3, #1
    5cb6:	607b      	str	r3, [r7, #4]
    5cb8:	b93b      	cbnz	r3, 5cca <saveSamplePack(unsigned int)+0x1ee>
			f->close();
    5cba:	683b      	ldr	r3, [r7, #0]
    5cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5cbe:	4638      	mov	r0, r7
    5cc0:	4798      	blx	r3
			delete f;
    5cc2:	683b      	ldr	r3, [r7, #0]
    5cc4:	685b      	ldr	r3, [r3, #4]
    5cc6:	4638      	mov	r0, r7
    5cc8:	4798      	blx	r3
    5cca:	2701      	movs	r7, #1
    5ccc:	f88d 42ac 	strb.w	r4, [sp, #684]	; 0x2ac
    5cd0:	f88d 62ad 	strb.w	r6, [sp, #685]	; 0x2ad
    5cd4:	f88d 42ae 	strb.w	r4, [sp, #686]	; 0x2ae
      light(i + 1, f, CRGB(0, 20, 0));
    5cd8:	9aab      	ldr	r2, [sp, #684]	; 0x2ac
    5cda:	4639      	mov	r1, r7
    5cdc:	4628      	mov	r0, r5
    5cde:	f7fd fecd 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int f = 1; f < (maxY + 1) + 1; f++) {
    5ce2:	3701      	adds	r7, #1
    5ce4:	2f12      	cmp	r7, #18
    5ce6:	d1f1      	bne.n	5ccc <saveSamplePack(unsigned int)+0x1f0>
    FastLEDshow();
    5ce8:	f7fd fcf4 	bl	36d4 <FastLEDshow()>
  for (unsigned int i = 0; i < sizeof(usedFiles) / sizeof(usedFiles[0]); i++) {
    5cec:	3501      	adds	r5, #1
    5cee:	f109 0903 	add.w	r9, r9, #3
    5cf2:	2d0e      	cmp	r5, #14
    5cf4:	d0ac      	beq.n	5c50 <saveSamplePack(unsigned int)+0x174>
    for (unsigned int f = 1; f < (maxY / 2) + 1; f++) {
    5cf6:	2701      	movs	r7, #1
    5cf8:	f04f 0804 	mov.w	r8, #4
    5cfc:	f88d 8298 	strb.w	r8, [sp, #664]	; 0x298
    5d00:	f88d 4299 	strb.w	r4, [sp, #665]	; 0x299
    5d04:	f88d 429a 	strb.w	r4, [sp, #666]	; 0x29a
      light(i + 1, f, CRGB(4, 0, 0));
    5d08:	9aa6      	ldr	r2, [sp, #664]	; 0x298
    5d0a:	4639      	mov	r1, r7
    5d0c:	4628      	mov	r0, r5
    5d0e:	f7fd feb5 	bl	3a7c <light(unsigned int, unsigned int, CRGB)>
    for (unsigned int f = 1; f < (maxY / 2) + 1; f++) {
    5d12:	3701      	adds	r7, #1
    5d14:	2f09      	cmp	r7, #9
    5d16:	d1f1      	bne.n	5cfc <saveSamplePack(unsigned int)+0x220>
    showIcons("icon_samplepack", CRGB(20, 20, 20));
    5d18:	4659      	mov	r1, fp
    5d1a:	a8a7      	add	r0, sp, #668	; 0x29c
    5d1c:	f010 fd1b 	bl	16756 <String::String(char const*)>
    5d20:	f88d 62a8 	strb.w	r6, [sp, #680]	; 0x2a8
    5d24:	f88d 62a9 	strb.w	r6, [sp, #681]	; 0x2a9
    5d28:	f88d 62aa 	strb.w	r6, [sp, #682]	; 0x2aa
    5d2c:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    5d2e:	a8a7      	add	r0, sp, #668	; 0x29c
    5d30:	f7ff fd7e 	bl	5830 <showIcons(String, CRGB)>
    5d34:	a8a7      	add	r0, sp, #668	; 0x29c
    5d36:	f010 fcc5 	bl	166c4 <String::~String()>
    5d3a:	4857      	ldr	r0, [pc, #348]	; (5e98 <saveSamplePack(unsigned int)+0x3bc>)
    5d3c:	7801      	ldrb	r1, [r0, #0]
    5d3e:	f006 f889 	bl	be54 <CFastLED::show(unsigned char)>
    5d42:	4b56      	ldr	r3, [pc, #344]	; (5e9c <saveSamplePack(unsigned int)+0x3c0>)
    5d44:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    5d48:	2a00      	cmp	r2, #0
    5d4a:	f43f af20 	beq.w	5b8e <saveSamplePack(unsigned int)+0xb2>
    return m_fVol ? m_fVol->exists(path) :
    5d4e:	4b54      	ldr	r3, [pc, #336]	; (5ea0 <saveSamplePack(unsigned int)+0x3c4>)
    5d50:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    5d54:	2900      	cmp	r1, #0
    5d56:	f43f af1c 	beq.w	5b92 <saveSamplePack(unsigned int)+0xb6>
    5d5a:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    5d5e:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
    5d62:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
    return tmp.open(this, path, O_RDONLY);
    5d66:	4623      	mov	r3, r4
    5d68:	a810      	add	r0, sp, #64	; 0x40
    5d6a:	f00b f8d2 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
    if (SD.exists(usedFiles[i].c_str())) {
    5d6e:	2800      	cmp	r0, #0
    5d70:	d0ab      	beq.n	5cca <saveSamplePack(unsigned int)+0x1ee>
    5d72:	4b4a      	ldr	r3, [pc, #296]	; (5e9c <saveSamplePack(unsigned int)+0x3c0>)
    5d74:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    5d78:	2a00      	cmp	r2, #0
    5d7a:	f43f af1b 	beq.w	5bb4 <saveSamplePack(unsigned int)+0xd8>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    5d7e:	4623      	mov	r3, r4
    5d80:	4948      	ldr	r1, [pc, #288]	; (5ea4 <saveSamplePack(unsigned int)+0x3c8>)
    5d82:	a810      	add	r0, sp, #64	; 0x40
    5d84:	f00d f904 	bl	12f90 <FsVolume::open(char const*, int)>
    5d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5d8a:	2b00      	cmp	r3, #0
    5d8c:	f43f af14 	beq.w	5bb8 <saveSamplePack(unsigned int)+0xdc>
		if (file) return File(new SDFile(file));
    5d90:	205c      	movs	r0, #92	; 0x5c
    5d92:	f011 fb47 	bl	17424 <operator new(unsigned int)>
    5d96:	4607      	mov	r7, r0
class FileImpl {
    5d98:	6044      	str	r4, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    5d9a:	4b43      	ldr	r3, [pc, #268]	; (5ea8 <saveSamplePack(unsigned int)+0x3cc>)
    5d9c:	6003      	str	r3, [r0, #0]
class Print
    5d9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5da0:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    5da2:	4b42      	ldr	r3, [pc, #264]	; (5eac <saveSamplePack(unsigned int)+0x3d0>)
    5da4:	6083      	str	r3, [r0, #8]
    5da6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5da8:	6103      	str	r3, [r0, #16]
    5daa:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    5dae:	7503      	strb	r3, [r0, #20]
    5db0:	a914      	add	r1, sp, #80	; 0x50
    5db2:	3018      	adds	r0, #24
    5db4:	f00c ffb5 	bl	12d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5db8:	4b3d      	ldr	r3, [pc, #244]	; (5eb0 <saveSamplePack(unsigned int)+0x3d4>)
    5dba:	60bb      	str	r3, [r7, #8]
    5dbc:	65bc      	str	r4, [r7, #88]	; 0x58
		if (f) f->refcount++;
    5dbe:	687b      	ldr	r3, [r7, #4]
    5dc0:	3301      	adds	r3, #1
    5dc2:	607b      	str	r3, [r7, #4]
    5dc4:	4b3b      	ldr	r3, [pc, #236]	; (5eb4 <saveSamplePack(unsigned int)+0x3d8>)
    5dc6:	9310      	str	r3, [sp, #64]	; 0x40
  ~FsBaseFile() {close();}
    5dc8:	a814      	add	r0, sp, #80	; 0x50
    5dca:	f00c ffeb 	bl	12da4 <FsBaseFile::close()>
      sprintf(OUTPUTf, "%d/%d.wav", pack, i + 1);
    5dce:	462b      	mov	r3, r5
    5dd0:	9a01      	ldr	r2, [sp, #4]
    5dd2:	4939      	ldr	r1, [pc, #228]	; (5eb8 <saveSamplePack(unsigned int)+0x3dc>)
    5dd4:	a803      	add	r0, sp, #12
    5dd6:	f01c fc93 	bl	22700 <sprintf>
    5dda:	4b31      	ldr	r3, [pc, #196]	; (5ea0 <saveSamplePack(unsigned int)+0x3c4>)
    5ddc:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    5de0:	2900      	cmp	r1, #0
    5de2:	f43f aeee 	beq.w	5bc2 <saveSamplePack(unsigned int)+0xe6>
    5de6:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
    5dea:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
    5dee:	f88d 4042 	strb.w	r4, [sp, #66]	; 0x42
    5df2:	4623      	mov	r3, r4
    5df4:	aa03      	add	r2, sp, #12
    5df6:	a810      	add	r0, sp, #64	; 0x40
    5df8:	f00b f88b 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
      if (SD.exists(OUTPUTf)) {
    5dfc:	2800      	cmp	r0, #0
    5dfe:	f47f aef2 	bne.w	5be6 <saveSamplePack(unsigned int)+0x10a>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    5e02:	f244 2302 	movw	r3, #16898	; 0x4202
    5e06:	aa03      	add	r2, sp, #12
    5e08:	4926      	ldr	r1, [pc, #152]	; (5ea4 <saveSamplePack(unsigned int)+0x3c8>)
    5e0a:	a810      	add	r0, sp, #64	; 0x40
    5e0c:	f00d f8c0 	bl	12f90 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    5e10:	9b22      	ldr	r3, [sp, #136]	; 0x88
    5e12:	2b00      	cmp	r3, #0
    5e14:	f43f af15 	beq.w	5c42 <saveSamplePack(unsigned int)+0x166>
		if (file) return File(new SDFile(file));
    5e18:	205c      	movs	r0, #92	; 0x5c
    5e1a:	f011 fb03 	bl	17424 <operator new(unsigned int)>
    5e1e:	4680      	mov	r8, r0
class FileImpl {
    5e20:	6044      	str	r4, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    5e22:	4b21      	ldr	r3, [pc, #132]	; (5ea8 <saveSamplePack(unsigned int)+0x3cc>)
    5e24:	6003      	str	r3, [r0, #0]
    5e26:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5e28:	60c3      	str	r3, [r0, #12]
    5e2a:	4b20      	ldr	r3, [pc, #128]	; (5eac <saveSamplePack(unsigned int)+0x3d0>)
    5e2c:	6083      	str	r3, [r0, #8]
    5e2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    5e30:	6103      	str	r3, [r0, #16]
    5e32:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    5e36:	7503      	strb	r3, [r0, #20]
    5e38:	a914      	add	r1, sp, #80	; 0x50
    5e3a:	3018      	adds	r0, #24
    5e3c:	f00c ff71 	bl	12d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    5e40:	4b1b      	ldr	r3, [pc, #108]	; (5eb0 <saveSamplePack(unsigned int)+0x3d4>)
    5e42:	f8c8 3008 	str.w	r3, [r8, #8]
    5e46:	f8c8 4058 	str.w	r4, [r8, #88]	; 0x58
		if (f) f->refcount++;
    5e4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    5e4e:	3301      	adds	r3, #1
    5e50:	f8c8 3004 	str.w	r3, [r8, #4]
    5e54:	4b17      	ldr	r3, [pc, #92]	; (5eb4 <saveSamplePack(unsigned int)+0x3d8>)
    5e56:	9310      	str	r3, [sp, #64]	; 0x40
  ~FsBaseFile() {close();}
    5e58:	a814      	add	r0, sp, #80	; 0x50
    5e5a:	f00c ffa3 	bl	12da4 <FsBaseFile::close()>
		return (f) ? f->read(buf, nbyte) : 0;
    5e5e:	f44f 7a00 	mov.w	sl, #512	; 0x200
    5e62:	2f00      	cmp	r7, #0
    5e64:	f43f af08 	beq.w	5c78 <saveSamplePack(unsigned int)+0x19c>
    5e68:	683b      	ldr	r3, [r7, #0]
    5e6a:	689b      	ldr	r3, [r3, #8]
    5e6c:	4652      	mov	r2, sl
    5e6e:	a910      	add	r1, sp, #64	; 0x40
    5e70:	4638      	mov	r0, r7
    5e72:	4798      	blx	r3
      while ((n = saveFilePack.read(buf, sizeof(buf))) > 0) {
    5e74:	4602      	mov	r2, r0
    5e76:	b148      	cbz	r0, 5e8c <saveSamplePack(unsigned int)+0x3b0>
		return (f) ? f->write((void*)buf, size) : 0;
    5e78:	f1b8 0f00 	cmp.w	r8, #0
    5e7c:	d0f1      	beq.n	5e62 <saveSamplePack(unsigned int)+0x386>
    5e7e:	f8d8 3000 	ldr.w	r3, [r8]
    5e82:	68db      	ldr	r3, [r3, #12]
    5e84:	a910      	add	r1, sp, #64	; 0x40
    5e86:	4640      	mov	r0, r8
    5e88:	4798      	blx	r3
    5e8a:	e7ea      	b.n	5e62 <saveSamplePack(unsigned int)+0x386>
		if (f) {
    5e8c:	f1b8 0f00 	cmp.w	r8, #0
    5e90:	f47f aef5 	bne.w	5c7e <saveSamplePack(unsigned int)+0x1a2>
    5e94:	e709      	b.n	5caa <saveSamplePack(unsigned int)+0x1ce>
    5e96:	bf00      	nop
    5e98:	20006668 	.word	0x20006668
    5e9c:	20006ca0 	.word	0x20006ca0
    5ea0:	20006678 	.word	0x20006678
    5ea4:	2000667c 	.word	0x2000667c
    5ea8:	200027a0 	.word	0x200027a0
    5eac:	200027fc 	.word	0x200027fc
    5eb0:	2000277c 	.word	0x2000277c
    5eb4:	20002560 	.word	0x20002560
    5eb8:	20000c18 	.word	0x20000c18

00005ebc <showMenu()>:
void showMenu() {
    5ebc:	b530      	push	{r4, r5, lr}
    5ebe:	b0bf      	sub	sp, #252	; 0xfc
  drawNoSD();
    5ec0:	f7fe fcda 	bl	4878 <drawNoSD()>
  FastLEDclear();
    5ec4:	f7fd fbfe 	bl	36c4 <FastLEDclear()>
  showIcons("icon_loadsave", CRGB(10, 5, 0));
    5ec8:	496f      	ldr	r1, [pc, #444]	; (6088 <showMenu()+0x1cc>)
    5eca:	a81b      	add	r0, sp, #108	; 0x6c
    5ecc:	f010 fc43 	bl	16756 <String::String(char const*)>
    5ed0:	230a      	movs	r3, #10
    5ed2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    5ed6:	2505      	movs	r5, #5
    5ed8:	f88d 5079 	strb.w	r5, [sp, #121]	; 0x79
    5edc:	2400      	movs	r4, #0
    5ede:	f88d 407a 	strb.w	r4, [sp, #122]	; 0x7a
    5ee2:	991e      	ldr	r1, [sp, #120]	; 0x78
    5ee4:	a81b      	add	r0, sp, #108	; 0x6c
    5ee6:	f7ff fca3 	bl	5830 <showIcons(String, CRGB)>
    5eea:	a81b      	add	r0, sp, #108	; 0x6c
    5eec:	f010 fbea 	bl	166c4 <String::~String()>
  showIcons("helper_select", CRGB(0, 0, 5));
    5ef0:	4966      	ldr	r1, [pc, #408]	; (608c <showMenu()+0x1d0>)
    5ef2:	a81f      	add	r0, sp, #124	; 0x7c
    5ef4:	f010 fc2f 	bl	16756 <String::String(char const*)>
    5ef8:	f88d 4088 	strb.w	r4, [sp, #136]	; 0x88
    5efc:	f88d 4089 	strb.w	r4, [sp, #137]	; 0x89
    5f00:	f88d 508a 	strb.w	r5, [sp, #138]	; 0x8a
    5f04:	9922      	ldr	r1, [sp, #136]	; 0x88
    5f06:	a81f      	add	r0, sp, #124	; 0x7c
    5f08:	f7ff fc92 	bl	5830 <showIcons(String, CRGB)>
    5f0c:	a81f      	add	r0, sp, #124	; 0x7c
    5f0e:	f010 fbd9 	bl	166c4 <String::~String()>
  sprintf(OUTPUTf, "%d.txt", SMP.file);
    5f12:	4b5f      	ldr	r3, [pc, #380]	; (6090 <showMenu()+0x1d4>)
    5f14:	69da      	ldr	r2, [r3, #28]
    5f16:	495f      	ldr	r1, [pc, #380]	; (6094 <showMenu()+0x1d8>)
    5f18:	a80e      	add	r0, sp, #56	; 0x38
    5f1a:	f01c fbf1 	bl	22700 <sprintf>
    5f1e:	4b5e      	ldr	r3, [pc, #376]	; (6098 <showMenu()+0x1dc>)
    5f20:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    5f24:	2900      	cmp	r1, #0
    5f26:	d04a      	beq.n	5fbe <showMenu()+0x102>
    5f28:	4623      	mov	r3, r4
    5f2a:	f88d 4000 	strb.w	r4, [sp]
    5f2e:	f88d 4001 	strb.w	r4, [sp, #1]
    5f32:	f88d 4002 	strb.w	r4, [sp, #2]
    5f36:	aa0e      	add	r2, sp, #56	; 0x38
    5f38:	4668      	mov	r0, sp
    5f3a:	f00a ffea 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    5f3e:	2800      	cmp	r0, #0
    5f40:	d04d      	beq.n	5fde <showMenu()+0x122>
    showIcons("helper_save", CRGB(1, 0, 0));
    5f42:	4956      	ldr	r1, [pc, #344]	; (609c <showMenu()+0x1e0>)
    5f44:	a823      	add	r0, sp, #140	; 0x8c
    5f46:	f010 fc06 	bl	16756 <String::String(char const*)>
    5f4a:	2301      	movs	r3, #1
    5f4c:	f88d 3098 	strb.w	r3, [sp, #152]	; 0x98
    5f50:	2400      	movs	r4, #0
    5f52:	f88d 4099 	strb.w	r4, [sp, #153]	; 0x99
    5f56:	f88d 409a 	strb.w	r4, [sp, #154]	; 0x9a
    5f5a:	9926      	ldr	r1, [sp, #152]	; 0x98
    5f5c:	a823      	add	r0, sp, #140	; 0x8c
    5f5e:	f7ff fc67 	bl	5830 <showIcons(String, CRGB)>
    5f62:	a823      	add	r0, sp, #140	; 0x8c
    5f64:	f010 fbae 	bl	166c4 <String::~String()>
    showIcons("helper_load", CRGB(0, 20, 0));
    5f68:	494d      	ldr	r1, [pc, #308]	; (60a0 <showMenu()+0x1e4>)
    5f6a:	a827      	add	r0, sp, #156	; 0x9c
    5f6c:	f010 fbf3 	bl	16756 <String::String(char const*)>
    5f70:	f88d 40a8 	strb.w	r4, [sp, #168]	; 0xa8
    5f74:	2514      	movs	r5, #20
    5f76:	f88d 50a9 	strb.w	r5, [sp, #169]	; 0xa9
    5f7a:	f88d 40aa 	strb.w	r4, [sp, #170]	; 0xaa
    5f7e:	992a      	ldr	r1, [sp, #168]	; 0xa8
    5f80:	a827      	add	r0, sp, #156	; 0x9c
    5f82:	f7ff fc55 	bl	5830 <showIcons(String, CRGB)>
    5f86:	a827      	add	r0, sp, #156	; 0x9c
    5f88:	f010 fb9c 	bl	166c4 <String::~String()>
    5f8c:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
    5f90:	f88d 40ad 	strb.w	r4, [sp, #173]	; 0xad
    5f94:	f88d 50ae 	strb.w	r5, [sp, #174]	; 0xae
    showNumber(SMP.file, CRGB(0, 0, 20), 0);
    5f98:	4622      	mov	r2, r4
    5f9a:	992b      	ldr	r1, [sp, #172]	; 0xac
    5f9c:	4b3c      	ldr	r3, [pc, #240]	; (6090 <showMenu()+0x1d4>)
    5f9e:	69d8      	ldr	r0, [r3, #28]
    5fa0:	f7fe fb02 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    5fa4:	483f      	ldr	r0, [pc, #252]	; (60a4 <showMenu()+0x1e8>)
    5fa6:	7801      	ldrb	r1, [r0, #0]
    5fa8:	f005 ff54 	bl	be54 <CFastLED::show(unsigned char)>
  if (currentMode->pos[knopf] != SMP.file) {
    5fac:	4b3e      	ldr	r3, [pc, #248]	; (60a8 <showMenu()+0x1ec>)
    5fae:	681b      	ldr	r3, [r3, #0]
    5fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    5fb2:	4b37      	ldr	r3, [pc, #220]	; (6090 <showMenu()+0x1d4>)
    5fb4:	69db      	ldr	r3, [r3, #28]
    5fb6:	429a      	cmp	r2, r3
    5fb8:	d144      	bne.n	6044 <showMenu()+0x188>
}
    5fba:	b03f      	add	sp, #252	; 0xfc
    5fbc:	bd30      	pop	{r4, r5, pc}
           m_xVol ? m_xVol->exists(path) : false;
    5fbe:	4b36      	ldr	r3, [pc, #216]	; (6098 <showMenu()+0x1dc>)
    5fc0:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    5fc4:	b159      	cbz	r1, 5fde <showMenu()+0x122>
    5fc6:	2300      	movs	r3, #0
    5fc8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    5fcc:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    5fd0:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_RDONLY);
    5fd4:	aa0e      	add	r2, sp, #56	; 0x38
    5fd6:	4668      	mov	r0, sp
    5fd8:	f008 fff7 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    5fdc:	e7af      	b.n	5f3e <showMenu()+0x82>
    showIcons("helper_save", CRGB(20, 0, 0));
    5fde:	492f      	ldr	r1, [pc, #188]	; (609c <showMenu()+0x1e0>)
    5fe0:	a82c      	add	r0, sp, #176	; 0xb0
    5fe2:	f010 fbb8 	bl	16756 <String::String(char const*)>
    5fe6:	2514      	movs	r5, #20
    5fe8:	f88d 50bc 	strb.w	r5, [sp, #188]	; 0xbc
    5fec:	2400      	movs	r4, #0
    5fee:	f88d 40bd 	strb.w	r4, [sp, #189]	; 0xbd
    5ff2:	f88d 40be 	strb.w	r4, [sp, #190]	; 0xbe
    5ff6:	992f      	ldr	r1, [sp, #188]	; 0xbc
    5ff8:	a82c      	add	r0, sp, #176	; 0xb0
    5ffa:	f7ff fc19 	bl	5830 <showIcons(String, CRGB)>
    5ffe:	a82c      	add	r0, sp, #176	; 0xb0
    6000:	f010 fb60 	bl	166c4 <String::~String()>
    showIcons("helper_load", CRGB(0, 1, 0));
    6004:	4926      	ldr	r1, [pc, #152]	; (60a0 <showMenu()+0x1e4>)
    6006:	a830      	add	r0, sp, #192	; 0xc0
    6008:	f010 fba5 	bl	16756 <String::String(char const*)>
    600c:	f88d 40cc 	strb.w	r4, [sp, #204]	; 0xcc
    6010:	2301      	movs	r3, #1
    6012:	f88d 30cd 	strb.w	r3, [sp, #205]	; 0xcd
    6016:	f88d 40ce 	strb.w	r4, [sp, #206]	; 0xce
    601a:	9933      	ldr	r1, [sp, #204]	; 0xcc
    601c:	a830      	add	r0, sp, #192	; 0xc0
    601e:	f7ff fc07 	bl	5830 <showIcons(String, CRGB)>
    6022:	a830      	add	r0, sp, #192	; 0xc0
    6024:	f010 fb4e 	bl	166c4 <String::~String()>
    6028:	f88d 50d0 	strb.w	r5, [sp, #208]	; 0xd0
    602c:	f88d 50d1 	strb.w	r5, [sp, #209]	; 0xd1
    6030:	2328      	movs	r3, #40	; 0x28
    6032:	f88d 30d2 	strb.w	r3, [sp, #210]	; 0xd2
    showNumber(SMP.file, CRGB(20, 20, 40), 0);
    6036:	4622      	mov	r2, r4
    6038:	9934      	ldr	r1, [sp, #208]	; 0xd0
    603a:	4b15      	ldr	r3, [pc, #84]	; (6090 <showMenu()+0x1d4>)
    603c:	69d8      	ldr	r0, [r3, #28]
    603e:	f7fe fab3 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    6042:	e7af      	b.n	5fa4 <showMenu()+0xe8>
	StringSumHelper(const char *p) : String(p) {}
    6044:	4919      	ldr	r1, [pc, #100]	; (60ac <showMenu()+0x1f0>)
    6046:	a838      	add	r0, sp, #224	; 0xe0
    6048:	f010 fb85 	bl	16756 <String::String(char const*)>
    serialprint("File: " + String(currentMode->pos[knopf]));
    604c:	4c16      	ldr	r4, [pc, #88]	; (60a8 <showMenu()+0x1ec>)
    604e:	6823      	ldr	r3, [r4, #0]
    6050:	220a      	movs	r2, #10
    6052:	6b59      	ldr	r1, [r3, #52]	; 0x34
    6054:	a83b      	add	r0, sp, #236	; 0xec
    6056:	f010 fbc7 	bl	167e8 <String::String(unsigned int, unsigned char)>
    605a:	a93b      	add	r1, sp, #236	; 0xec
    605c:	a838      	add	r0, sp, #224	; 0xe0
    605e:	f010 fc20 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6062:	4601      	mov	r1, r0
class StringSumHelper : public String
    6064:	a835      	add	r0, sp, #212	; 0xd4
    6066:	f010 fb92 	bl	1678e <String::String(String const&)>
    606a:	a835      	add	r0, sp, #212	; 0xd4
    606c:	f010 fb2a 	bl	166c4 <String::~String()>
    6070:	a83b      	add	r0, sp, #236	; 0xec
    6072:	f010 fb27 	bl	166c4 <String::~String()>
    6076:	a838      	add	r0, sp, #224	; 0xe0
    6078:	f010 fb24 	bl	166c4 <String::~String()>
    SMP.file = currentMode->pos[knopf];
    607c:	6823      	ldr	r3, [r4, #0]
    607e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    6080:	4b03      	ldr	r3, [pc, #12]	; (6090 <showMenu()+0x1d4>)
    6082:	61da      	str	r2, [r3, #28]
}
    6084:	e799      	b.n	5fba <showMenu()+0xfe>
    6086:	bf00      	nop
    6088:	20000de8 	.word	0x20000de8
    608c:	20000e2c 	.word	0x20000e2c
    6090:	70000000 	.word	0x70000000
    6094:	20000cb0 	.word	0x20000cb0
    6098:	20006678 	.word	0x20006678
    609c:	20000e20 	.word	0x20000e20
    60a0:	20000df8 	.word	0x20000df8
    60a4:	20006668 	.word	0x20006668
    60a8:	200057ec 	.word	0x200057ec
    60ac:	20000cb8 	.word	0x20000cb8

000060b0 <showSamplePack()>:
void showSamplePack() {
    60b0:	b530      	push	{r4, r5, lr}
    60b2:	b0c1      	sub	sp, #260	; 0x104
  drawNoSD();
    60b4:	f7fe fbe0 	bl	4878 <drawNoSD()>
  FastLEDclear();
    60b8:	f7fd fb04 	bl	36c4 <FastLEDclear()>
  showIcons("icon_samplepack", CRGB(10, 10, 0));
    60bc:	4975      	ldr	r1, [pc, #468]	; (6294 <showSamplePack()+0x1e4>)
    60be:	a81c      	add	r0, sp, #112	; 0x70
    60c0:	f010 fb49 	bl	16756 <String::String(char const*)>
    60c4:	230a      	movs	r3, #10
    60c6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    60ca:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
    60ce:	2400      	movs	r4, #0
    60d0:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
    60d4:	991f      	ldr	r1, [sp, #124]	; 0x7c
    60d6:	a81c      	add	r0, sp, #112	; 0x70
    60d8:	f7ff fbaa 	bl	5830 <showIcons(String, CRGB)>
    60dc:	a81c      	add	r0, sp, #112	; 0x70
    60de:	f010 faf1 	bl	166c4 <String::~String()>
  showIcons("helper_select", CRGB(0, 0, 5));
    60e2:	496d      	ldr	r1, [pc, #436]	; (6298 <showSamplePack()+0x1e8>)
    60e4:	a820      	add	r0, sp, #128	; 0x80
    60e6:	f010 fb36 	bl	16756 <String::String(char const*)>
    60ea:	f88d 408c 	strb.w	r4, [sp, #140]	; 0x8c
    60ee:	f88d 408d 	strb.w	r4, [sp, #141]	; 0x8d
    60f2:	2305      	movs	r3, #5
    60f4:	f88d 308e 	strb.w	r3, [sp, #142]	; 0x8e
    60f8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    60fa:	a820      	add	r0, sp, #128	; 0x80
    60fc:	f7ff fb98 	bl	5830 <showIcons(String, CRGB)>
    6100:	a820      	add	r0, sp, #128	; 0x80
    6102:	f010 fadf 	bl	166c4 <String::~String()>
  showNumber(SMP.pack, CRGB(20, 0, 0), 0);
    6106:	4d65      	ldr	r5, [pc, #404]	; (629c <showSamplePack()+0x1ec>)
    6108:	2314      	movs	r3, #20
    610a:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
    610e:	f88d 4091 	strb.w	r4, [sp, #145]	; 0x91
    6112:	f88d 4092 	strb.w	r4, [sp, #146]	; 0x92
    6116:	4622      	mov	r2, r4
    6118:	9924      	ldr	r1, [sp, #144]	; 0x90
    611a:	6a28      	ldr	r0, [r5, #32]
    611c:	f7fe fa44 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
  sprintf(OUTPUTf, "%d/%d.wav", SMP.pack, 1);
    6120:	2301      	movs	r3, #1
    6122:	6a2a      	ldr	r2, [r5, #32]
    6124:	495e      	ldr	r1, [pc, #376]	; (62a0 <showSamplePack()+0x1f0>)
    6126:	a80f      	add	r0, sp, #60	; 0x3c
    6128:	f01c faea 	bl	22700 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    612c:	4b5d      	ldr	r3, [pc, #372]	; (62a4 <showSamplePack()+0x1f4>)
    612e:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    6132:	2900      	cmp	r1, #0
    6134:	d04a      	beq.n	61cc <showSamplePack()+0x11c>
    6136:	4623      	mov	r3, r4
    6138:	f88d 4000 	strb.w	r4, [sp]
    613c:	f88d 4001 	strb.w	r4, [sp, #1]
    6140:	f88d 4002 	strb.w	r4, [sp, #2]
    6144:	aa0f      	add	r2, sp, #60	; 0x3c
    6146:	4668      	mov	r0, sp
    6148:	f00a fee3 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    614c:	2800      	cmp	r0, #0
    614e:	d04d      	beq.n	61ec <showSamplePack()+0x13c>
    showIcons("helper_load", CRGB(0, 20, 0));
    6150:	4955      	ldr	r1, [pc, #340]	; (62a8 <showSamplePack()+0x1f8>)
    6152:	a825      	add	r0, sp, #148	; 0x94
    6154:	f010 faff 	bl	16756 <String::String(char const*)>
    6158:	2400      	movs	r4, #0
    615a:	f88d 40a0 	strb.w	r4, [sp, #160]	; 0xa0
    615e:	2514      	movs	r5, #20
    6160:	f88d 50a1 	strb.w	r5, [sp, #161]	; 0xa1
    6164:	f88d 40a2 	strb.w	r4, [sp, #162]	; 0xa2
    6168:	9928      	ldr	r1, [sp, #160]	; 0xa0
    616a:	a825      	add	r0, sp, #148	; 0x94
    616c:	f7ff fb60 	bl	5830 <showIcons(String, CRGB)>
    6170:	a825      	add	r0, sp, #148	; 0x94
    6172:	f010 faa7 	bl	166c4 <String::~String()>
    showIcons("helper_save", CRGB(3, 0, 0));
    6176:	494d      	ldr	r1, [pc, #308]	; (62ac <showSamplePack()+0x1fc>)
    6178:	a829      	add	r0, sp, #164	; 0xa4
    617a:	f010 faec 	bl	16756 <String::String(char const*)>
    617e:	2303      	movs	r3, #3
    6180:	f88d 30b0 	strb.w	r3, [sp, #176]	; 0xb0
    6184:	f88d 40b1 	strb.w	r4, [sp, #177]	; 0xb1
    6188:	f88d 40b2 	strb.w	r4, [sp, #178]	; 0xb2
    618c:	992c      	ldr	r1, [sp, #176]	; 0xb0
    618e:	a829      	add	r0, sp, #164	; 0xa4
    6190:	f7ff fb4e 	bl	5830 <showIcons(String, CRGB)>
    6194:	a829      	add	r0, sp, #164	; 0xa4
    6196:	f010 fa95 	bl	166c4 <String::~String()>
    619a:	f88d 40b4 	strb.w	r4, [sp, #180]	; 0xb4
    619e:	f88d 50b5 	strb.w	r5, [sp, #181]	; 0xb5
    61a2:	f88d 40b6 	strb.w	r4, [sp, #182]	; 0xb6
    showNumber(SMP.pack, CRGB(0, 20, 0), 0);
    61a6:	4622      	mov	r2, r4
    61a8:	992d      	ldr	r1, [sp, #180]	; 0xb4
    61aa:	4b3c      	ldr	r3, [pc, #240]	; (629c <showSamplePack()+0x1ec>)
    61ac:	6a18      	ldr	r0, [r3, #32]
    61ae:	f7fe f9fb 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    61b2:	483f      	ldr	r0, [pc, #252]	; (62b0 <showSamplePack()+0x200>)
    61b4:	7801      	ldrb	r1, [r0, #0]
    61b6:	f005 fe4d 	bl	be54 <CFastLED::show(unsigned char)>
  if (currentMode->pos[2] != SMP.pack) {
    61ba:	4b3e      	ldr	r3, [pc, #248]	; (62b4 <showSamplePack()+0x204>)
    61bc:	681b      	ldr	r3, [r3, #0]
    61be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    61c0:	4b36      	ldr	r3, [pc, #216]	; (629c <showSamplePack()+0x1ec>)
    61c2:	6a1b      	ldr	r3, [r3, #32]
    61c4:	429a      	cmp	r2, r3
    61c6:	d143      	bne.n	6250 <showSamplePack()+0x1a0>
}
    61c8:	b041      	add	sp, #260	; 0x104
    61ca:	bd30      	pop	{r4, r5, pc}
           m_xVol ? m_xVol->exists(path) : false;
    61cc:	4b35      	ldr	r3, [pc, #212]	; (62a4 <showSamplePack()+0x1f4>)
    61ce:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    61d2:	b159      	cbz	r1, 61ec <showSamplePack()+0x13c>
    61d4:	2300      	movs	r3, #0
    61d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    61da:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    61de:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    61e2:	aa0f      	add	r2, sp, #60	; 0x3c
    61e4:	4668      	mov	r0, sp
    61e6:	f008 fef0 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    61ea:	e7af      	b.n	614c <showSamplePack()+0x9c>
    showIcons("helper_load", CRGB(0, 3, 0));
    61ec:	492e      	ldr	r1, [pc, #184]	; (62a8 <showSamplePack()+0x1f8>)
    61ee:	a82e      	add	r0, sp, #184	; 0xb8
    61f0:	f010 fab1 	bl	16756 <String::String(char const*)>
    61f4:	2400      	movs	r4, #0
    61f6:	f88d 40c4 	strb.w	r4, [sp, #196]	; 0xc4
    61fa:	2303      	movs	r3, #3
    61fc:	f88d 30c5 	strb.w	r3, [sp, #197]	; 0xc5
    6200:	f88d 40c6 	strb.w	r4, [sp, #198]	; 0xc6
    6204:	9931      	ldr	r1, [sp, #196]	; 0xc4
    6206:	a82e      	add	r0, sp, #184	; 0xb8
    6208:	f7ff fb12 	bl	5830 <showIcons(String, CRGB)>
    620c:	a82e      	add	r0, sp, #184	; 0xb8
    620e:	f010 fa59 	bl	166c4 <String::~String()>
    showIcons("helper_save", CRGB(20, 0, 0));
    6212:	4926      	ldr	r1, [pc, #152]	; (62ac <showSamplePack()+0x1fc>)
    6214:	a832      	add	r0, sp, #200	; 0xc8
    6216:	f010 fa9e 	bl	16756 <String::String(char const*)>
    621a:	2514      	movs	r5, #20
    621c:	f88d 50d4 	strb.w	r5, [sp, #212]	; 0xd4
    6220:	f88d 40d5 	strb.w	r4, [sp, #213]	; 0xd5
    6224:	f88d 40d6 	strb.w	r4, [sp, #214]	; 0xd6
    6228:	9935      	ldr	r1, [sp, #212]	; 0xd4
    622a:	a832      	add	r0, sp, #200	; 0xc8
    622c:	f7ff fb00 	bl	5830 <showIcons(String, CRGB)>
    6230:	a832      	add	r0, sp, #200	; 0xc8
    6232:	f010 fa47 	bl	166c4 <String::~String()>
    6236:	f88d 50d8 	strb.w	r5, [sp, #216]	; 0xd8
    623a:	f88d 40d9 	strb.w	r4, [sp, #217]	; 0xd9
    623e:	f88d 40da 	strb.w	r4, [sp, #218]	; 0xda
    showNumber(SMP.pack, CRGB(20, 0, 0), 0);
    6242:	4622      	mov	r2, r4
    6244:	9936      	ldr	r1, [sp, #216]	; 0xd8
    6246:	4b15      	ldr	r3, [pc, #84]	; (629c <showSamplePack()+0x1ec>)
    6248:	6a18      	ldr	r0, [r3, #32]
    624a:	f7fe f9ad 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    624e:	e7b0      	b.n	61b2 <showSamplePack()+0x102>
	StringSumHelper(const char *p) : String(p) {}
    6250:	4919      	ldr	r1, [pc, #100]	; (62b8 <showSamplePack()+0x208>)
    6252:	a83a      	add	r0, sp, #232	; 0xe8
    6254:	f010 fa7f 	bl	16756 <String::String(char const*)>
    serialprintln("File: " + String(currentMode->pos[2]));
    6258:	4c16      	ldr	r4, [pc, #88]	; (62b4 <showSamplePack()+0x204>)
    625a:	6823      	ldr	r3, [r4, #0]
    625c:	220a      	movs	r2, #10
    625e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    6260:	a83d      	add	r0, sp, #244	; 0xf4
    6262:	f010 fac1 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6266:	a93d      	add	r1, sp, #244	; 0xf4
    6268:	a83a      	add	r0, sp, #232	; 0xe8
    626a:	f010 fb1a 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    626e:	4601      	mov	r1, r0
class StringSumHelper : public String
    6270:	a837      	add	r0, sp, #220	; 0xdc
    6272:	f010 fa8c 	bl	1678e <String::String(String const&)>
    6276:	a837      	add	r0, sp, #220	; 0xdc
    6278:	f010 fa24 	bl	166c4 <String::~String()>
    627c:	a83d      	add	r0, sp, #244	; 0xf4
    627e:	f010 fa21 	bl	166c4 <String::~String()>
    6282:	a83a      	add	r0, sp, #232	; 0xe8
    6284:	f010 fa1e 	bl	166c4 <String::~String()>
    SMP.pack = currentMode->pos[2];
    6288:	6823      	ldr	r3, [r4, #0]
    628a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    628c:	4b03      	ldr	r3, [pc, #12]	; (629c <showSamplePack()+0x1ec>)
    628e:	621a      	str	r2, [r3, #32]
}
    6290:	e79a      	b.n	61c8 <showSamplePack()+0x118>
    6292:	bf00      	nop
    6294:	20000dcc 	.word	0x20000dcc
    6298:	20000e2c 	.word	0x20000e2c
    629c:	70000000 	.word	0x70000000
    62a0:	20000c18 	.word	0x20000c18
    62a4:	20006678 	.word	0x20006678
    62a8:	20000df8 	.word	0x20000df8
    62ac:	20000e20 	.word	0x20000e20
    62b0:	20006668 	.word	0x20006668
    62b4:	200057ec 	.word	0x200057ec
    62b8:	20000cb8 	.word	0x20000cb8

000062bc <savePattern(bool)>:
void savePattern(bool autosave) {
    62bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62c0:	b0b0      	sub	sp, #192	; 0xc0
    62c2:	4682      	mov	sl, r0
	StringSumHelper(const char *p) : String(p) {}
    62c4:	49ab      	ldr	r1, [pc, #684]	; (6574 <savePattern(bool)+0x2b8>)
    62c6:	a82a      	add	r0, sp, #168	; 0xa8
    62c8:	f010 fa45 	bl	16756 <String::String(char const*)>
  serialprintln("Saving in slot #" + String(SMP.file));
    62cc:	220a      	movs	r2, #10
    62ce:	4baa      	ldr	r3, [pc, #680]	; (6578 <savePattern(bool)+0x2bc>)
    62d0:	69d9      	ldr	r1, [r3, #28]
    62d2:	a82d      	add	r0, sp, #180	; 0xb4
    62d4:	f010 fa88 	bl	167e8 <String::String(unsigned int, unsigned char)>
    62d8:	a92d      	add	r1, sp, #180	; 0xb4
    62da:	a82a      	add	r0, sp, #168	; 0xa8
    62dc:	f010 fae1 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    62e0:	4601      	mov	r1, r0
class StringSumHelper : public String
    62e2:	a827      	add	r0, sp, #156	; 0x9c
    62e4:	f010 fa53 	bl	1678e <String::String(String const&)>
    62e8:	a827      	add	r0, sp, #156	; 0x9c
    62ea:	f010 f9eb 	bl	166c4 <String::~String()>
    62ee:	a82d      	add	r0, sp, #180	; 0xb4
    62f0:	f010 f9e8 	bl	166c4 <String::~String()>
    62f4:	a82a      	add	r0, sp, #168	; 0xa8
    62f6:	f010 f9e5 	bl	166c4 <String::~String()>
  drawNoSD();
    62fa:	f7fe fabd 	bl	4878 <drawNoSD()>
  FastLEDclear();
    62fe:	f7fd f9e1 	bl	36c4 <FastLEDclear()>
  if (autosave) {
    6302:	f1ba 0f00 	cmp.w	sl, #0
    6306:	d05e      	beq.n	63c6 <savePattern(bool)+0x10a>
    sprintf(OUTPUTf, "autosaved.txt");
    6308:	4b9c      	ldr	r3, [pc, #624]	; (657c <savePattern(bool)+0x2c0>)
    630a:	ac1a      	add	r4, sp, #104	; 0x68
    630c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    630e:	c407      	stmia	r4!, {r0, r1, r2}
    6310:	8023      	strh	r3, [r4, #0]
    return m_fVol ? m_fVol->exists(path) :
    6312:	4b9b      	ldr	r3, [pc, #620]	; (6580 <savePattern(bool)+0x2c4>)
    6314:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    6318:	2900      	cmp	r1, #0
    631a:	d05b      	beq.n	63d4 <savePattern(bool)+0x118>
    631c:	2300      	movs	r3, #0
    631e:	f88d 3000 	strb.w	r3, [sp]
    6322:	f88d 3001 	strb.w	r3, [sp, #1]
    6326:	f88d 3002 	strb.w	r3, [sp, #2]
    632a:	aa1a      	add	r2, sp, #104	; 0x68
    632c:	4668      	mov	r0, sp
    632e:	f00a fdf0 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    6332:	2800      	cmp	r0, #0
    6334:	d15f      	bne.n	63f6 <savePattern(bool)+0x13a>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    6336:	f244 2302 	movw	r3, #16898	; 0x4202
    633a:	aa1a      	add	r2, sp, #104	; 0x68
    633c:	4991      	ldr	r1, [pc, #580]	; (6584 <savePattern(bool)+0x2c8>)
    633e:	4668      	mov	r0, sp
    6340:	f00c fe26 	bl	12f90 <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    6344:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6346:	2b00      	cmp	r3, #0
    6348:	f000 8083 	beq.w	6452 <savePattern(bool)+0x196>
		if (file) return File(new SDFile(file));
    634c:	205c      	movs	r0, #92	; 0x5c
    634e:	f011 f869 	bl	17424 <operator new(unsigned int)>
    6352:	4604      	mov	r4, r0
class FileImpl {
    6354:	2500      	movs	r5, #0
    6356:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    6358:	4b8b      	ldr	r3, [pc, #556]	; (6588 <savePattern(bool)+0x2cc>)
    635a:	6003      	str	r3, [r0, #0]
    635c:	9b01      	ldr	r3, [sp, #4]
    635e:	60c3      	str	r3, [r0, #12]
    6360:	4b8a      	ldr	r3, [pc, #552]	; (658c <savePattern(bool)+0x2d0>)
    6362:	6083      	str	r3, [r0, #8]
    6364:	9b02      	ldr	r3, [sp, #8]
    6366:	6103      	str	r3, [r0, #16]
    6368:	f89d 300c 	ldrb.w	r3, [sp, #12]
    636c:	7503      	strb	r3, [r0, #20]
    636e:	a904      	add	r1, sp, #16
    6370:	3018      	adds	r0, #24
    6372:	f00c fcd6 	bl	12d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6376:	4b86      	ldr	r3, [pc, #536]	; (6590 <savePattern(bool)+0x2d4>)
    6378:	60a3      	str	r3, [r4, #8]
    637a:	65a5      	str	r5, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    637c:	9516      	str	r5, [sp, #88]	; 0x58
	constexpr Stream() : _timeout(1000), read_error(0) {}
    637e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6382:	9317      	str	r3, [sp, #92]	; 0x5c
    6384:	f88d 5060 	strb.w	r5, [sp, #96]	; 0x60
	File(FileImpl *file) {
    6388:	4b82      	ldr	r3, [pc, #520]	; (6594 <savePattern(bool)+0x2d8>)
    638a:	9315      	str	r3, [sp, #84]	; 0x54
		f = file;
    638c:	9419      	str	r4, [sp, #100]	; 0x64
		if (f) f->refcount++;
    638e:	6863      	ldr	r3, [r4, #4]
    6390:	3301      	adds	r3, #1
    6392:	6063      	str	r3, [r4, #4]
    6394:	4b80      	ldr	r3, [pc, #512]	; (6598 <savePattern(bool)+0x2dc>)
    6396:	9300      	str	r3, [sp, #0]
  ~FsBaseFile() {close();}
    6398:	a804      	add	r0, sp, #16
    639a:	f00c fd03 	bl	12da4 <FsBaseFile::close()>
		return (f) ? f->isOpen() : false;
    639e:	9d19      	ldr	r5, [sp, #100]	; 0x64
    63a0:	2d00      	cmp	r5, #0
    63a2:	f000 80b1 	beq.w	6508 <savePattern(bool)+0x24c>
    63a6:	682b      	ldr	r3, [r5, #0]
    63a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    63aa:	4628      	mov	r0, r5
    63ac:	4798      	blx	r3
  if (saveFile) {
    63ae:	2800      	cmp	r0, #0
    63b0:	f000 80a8 	beq.w	6504 <savePattern(bool)+0x248>
    63b4:	4b79      	ldr	r3, [pc, #484]	; (659c <savePattern(bool)+0x2e0>)
    63b6:	f503 7884 	add.w	r8, r3, #264	; 0x108
    63ba:	f244 5908 	movw	r9, #17672	; 0x4508
    63be:	4499      	add	r9, r3
  unsigned int maxdata = 0;
    63c0:	2600      	movs	r6, #0
		return (f) ? f->write(&b, 1) : 0;
    63c2:	2701      	movs	r7, #1
    63c4:	e057      	b.n	6476 <savePattern(bool)+0x1ba>
    sprintf(OUTPUTf, "%d.txt", SMP.file);
    63c6:	4b6c      	ldr	r3, [pc, #432]	; (6578 <savePattern(bool)+0x2bc>)
    63c8:	69da      	ldr	r2, [r3, #28]
    63ca:	4975      	ldr	r1, [pc, #468]	; (65a0 <savePattern(bool)+0x2e4>)
    63cc:	a81a      	add	r0, sp, #104	; 0x68
    63ce:	f01c f997 	bl	22700 <sprintf>
    63d2:	e79e      	b.n	6312 <savePattern(bool)+0x56>
           m_xVol ? m_xVol->exists(path) : false;
    63d4:	4b6a      	ldr	r3, [pc, #424]	; (6580 <savePattern(bool)+0x2c4>)
    63d6:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    63da:	2900      	cmp	r1, #0
    63dc:	d0ab      	beq.n	6336 <savePattern(bool)+0x7a>
    63de:	2300      	movs	r3, #0
    63e0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    63e4:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    63e8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    63ec:	aa1a      	add	r2, sp, #104	; 0x68
    63ee:	4668      	mov	r0, sp
    63f0:	f008 fdeb 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    63f4:	e79d      	b.n	6332 <savePattern(bool)+0x76>
    return m_fVol ? m_fVol->remove(path) :
    63f6:	4b62      	ldr	r3, [pc, #392]	; (6580 <savePattern(bool)+0x2c4>)
    63f8:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    63fc:	b189      	cbz	r1, 6422 <savePattern(bool)+0x166>
    63fe:	2300      	movs	r3, #0
    6400:	f88d 3000 	strb.w	r3, [sp]
    6404:	f88d 3001 	strb.w	r3, [sp, #1]
    6408:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    640c:	2301      	movs	r3, #1
    640e:	aa1a      	add	r2, sp, #104	; 0x68
    6410:	4668      	mov	r0, sp
    6412:	f00a fd7e 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
    6416:	2800      	cmp	r0, #0
    6418:	d08d      	beq.n	6336 <savePattern(bool)+0x7a>
    641a:	4668      	mov	r0, sp
    641c:	f00b fd5e 	bl	11edc <FatFile::remove()>
    6420:	e789      	b.n	6336 <savePattern(bool)+0x7a>
           m_xVol ? m_xVol->remove(path) : false;
    6422:	4b57      	ldr	r3, [pc, #348]	; (6580 <savePattern(bool)+0x2c4>)
    6424:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    6428:	2900      	cmp	r1, #0
    642a:	d084      	beq.n	6336 <savePattern(bool)+0x7a>
    642c:	2300      	movs	r3, #0
    642e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    6432:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6436:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    643a:	2301      	movs	r3, #1
    643c:	aa1a      	add	r2, sp, #104	; 0x68
    643e:	4668      	mov	r0, sp
    6440:	f008 fdc3 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    6444:	2800      	cmp	r0, #0
    6446:	f43f af76 	beq.w	6336 <savePattern(bool)+0x7a>
    644a:	4668      	mov	r0, sp
    644c:	f008 fe4c 	bl	f0e8 <ExFatFile::remove()>
    6450:	e771      	b.n	6336 <savePattern(bool)+0x7a>
  bool isOpen() const {return m_fFile || m_xFile;}
    6452:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    6454:	2b00      	cmp	r3, #0
    6456:	f47f af79 	bne.w	634c <savePattern(bool)+0x90>
    645a:	9316      	str	r3, [sp, #88]	; 0x58
    645c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6460:	9217      	str	r2, [sp, #92]	; 0x5c
    6462:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
	constexpr File() : f(nullptr) { }
    6466:	4a4b      	ldr	r2, [pc, #300]	; (6594 <savePattern(bool)+0x2d8>)
    6468:	9215      	str	r2, [sp, #84]	; 0x54
    646a:	9319      	str	r3, [sp, #100]	; 0x64
    646c:	e792      	b.n	6394 <savePattern(bool)+0xd8>
    for (unsigned int sdx = 1; sdx < maxlen; sdx++) {
    646e:	f108 0888 	add.w	r8, r8, #136	; 0x88
    6472:	45c1      	cmp	r9, r8
    6474:	d018      	beq.n	64a8 <savePattern(bool)+0x1ec>
      for (unsigned int sdy = 1; sdy < maxY + 1; sdy++) {
    6476:	f1a8 0480 	sub.w	r4, r8, #128	; 0x80
        maxdata = maxdata + note[sdx][sdy][0];
    647a:	68a3      	ldr	r3, [r4, #8]
    647c:	441e      	add	r6, r3
	size_t write(unsigned int n) { return write((uint8_t)n); }
    647e:	f88d 3000 	strb.w	r3, [sp]
		return (f) ? f->write(&b, 1) : 0;
    6482:	682b      	ldr	r3, [r5, #0]
    6484:	68db      	ldr	r3, [r3, #12]
    6486:	463a      	mov	r2, r7
    6488:	4669      	mov	r1, sp
    648a:	4628      	mov	r0, r5
    648c:	4798      	blx	r3
	size_t write(unsigned int n) { return write((uint8_t)n); }
    648e:	68e3      	ldr	r3, [r4, #12]
    6490:	f88d 3000 	strb.w	r3, [sp]
		return (f) ? f->write(&b, 1) : 0;
    6494:	682b      	ldr	r3, [r5, #0]
    6496:	68db      	ldr	r3, [r3, #12]
    6498:	463a      	mov	r2, r7
    649a:	4669      	mov	r1, sp
    649c:	4628      	mov	r0, r5
    649e:	4798      	blx	r3
      for (unsigned int sdy = 1; sdy < maxY + 1; sdy++) {
    64a0:	3408      	adds	r4, #8
    64a2:	45a0      	cmp	r8, r4
    64a4:	d1e9      	bne.n	647a <savePattern(bool)+0x1be>
    64a6:	e7e2      	b.n	646e <savePattern(bool)+0x1b2>
	size_t write(int n) { return write((uint8_t)n); }
    64a8:	23ff      	movs	r3, #255	; 0xff
    64aa:	f88d 3000 	strb.w	r3, [sp]
		return (f) ? f->write(&b, 1) : 0;
    64ae:	682b      	ldr	r3, [r5, #0]
    64b0:	68db      	ldr	r3, [r3, #12]
    64b2:	2201      	movs	r2, #1
    64b4:	4669      	mov	r1, sp
    64b6:	4628      	mov	r0, r5
    64b8:	4798      	blx	r3
	size_t write(int n) { return write((uint8_t)n); }
    64ba:	23fe      	movs	r3, #254	; 0xfe
    64bc:	f88d 3000 	strb.w	r3, [sp]
		return (f) ? f->write(&b, 1) : 0;
    64c0:	682b      	ldr	r3, [r5, #0]
    64c2:	68db      	ldr	r3, [r3, #12]
    64c4:	2201      	movs	r2, #1
    64c6:	4669      	mov	r1, sp
    64c8:	4628      	mov	r0, r5
    64ca:	4798      	blx	r3
		return (f) ? f->write((void*)buf, size) : 0;
    64cc:	682b      	ldr	r3, [r5, #0]
    64ce:	68db      	ldr	r3, [r3, #12]
    64d0:	f44f 72a2 	mov.w	r2, #324	; 0x144
    64d4:	4928      	ldr	r1, [pc, #160]	; (6578 <savePattern(bool)+0x2bc>)
    64d6:	4628      	mov	r0, r5
    64d8:	4798      	blx	r3
			f->close();
    64da:	682b      	ldr	r3, [r5, #0]
    64dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    64de:	4628      	mov	r0, r5
    64e0:	4798      	blx	r3
			dec_refcount();
    64e2:	a815      	add	r0, sp, #84	; 0x54
    64e4:	f7fc fa1a 	bl	291c <File::dec_refcount()>
  if (maxdata == 0) {
    64e8:	b176      	cbz	r6, 6508 <savePattern(bool)+0x24c>
  if (!autosave) {
    64ea:	f1ba 0f00 	cmp.w	sl, #0
    64ee:	d038      	beq.n	6562 <savePattern(bool)+0x2a6>
	virtual ~File() {
    64f0:	4b28      	ldr	r3, [pc, #160]	; (6594 <savePattern(bool)+0x2d8>)
    64f2:	9315      	str	r3, [sp, #84]	; 0x54
		if (f) dec_refcount();
    64f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
    64f6:	b113      	cbz	r3, 64fe <savePattern(bool)+0x242>
    64f8:	a815      	add	r0, sp, #84	; 0x54
    64fa:	f7fc fa0f 	bl	291c <File::dec_refcount()>
}
    64fe:	b030      	add	sp, #192	; 0xc0
    6500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6504:	2600      	movs	r6, #0
    6506:	e7e8      	b.n	64da <savePattern(bool)+0x21e>
    return m_fVol ? m_fVol->remove(path) :
    6508:	4b1d      	ldr	r3, [pc, #116]	; (6580 <savePattern(bool)+0x2c4>)
    650a:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    650e:	b189      	cbz	r1, 6534 <savePattern(bool)+0x278>
    6510:	2300      	movs	r3, #0
    6512:	f88d 3000 	strb.w	r3, [sp]
    6516:	f88d 3001 	strb.w	r3, [sp, #1]
    651a:	f88d 3002 	strb.w	r3, [sp, #2]
    651e:	2301      	movs	r3, #1
    6520:	aa1a      	add	r2, sp, #104	; 0x68
    6522:	4668      	mov	r0, sp
    6524:	f00a fcf5 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
    6528:	2800      	cmp	r0, #0
    652a:	d0de      	beq.n	64ea <savePattern(bool)+0x22e>
    652c:	4668      	mov	r0, sp
    652e:	f00b fcd5 	bl	11edc <FatFile::remove()>
    6532:	e7da      	b.n	64ea <savePattern(bool)+0x22e>
           m_xVol ? m_xVol->remove(path) : false;
    6534:	4b12      	ldr	r3, [pc, #72]	; (6580 <savePattern(bool)+0x2c4>)
    6536:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    653a:	2900      	cmp	r1, #0
    653c:	d0d5      	beq.n	64ea <savePattern(bool)+0x22e>
    653e:	2300      	movs	r3, #0
    6540:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    6544:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    6548:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    654c:	2301      	movs	r3, #1
    654e:	aa1a      	add	r2, sp, #104	; 0x68
    6550:	4668      	mov	r0, sp
    6552:	f008 fd3a 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    6556:	2800      	cmp	r0, #0
    6558:	d0c7      	beq.n	64ea <savePattern(bool)+0x22e>
    655a:	4668      	mov	r0, sp
    655c:	f008 fdc4 	bl	f0e8 <ExFatFile::remove()>
    6560:	e7c3      	b.n	64ea <savePattern(bool)+0x22e>
    delay(500);
    6562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    6566:	f010 fb85 	bl	16c74 <delay>
    switchMode(&draw);
    656a:	480e      	ldr	r0, [pc, #56]	; (65a4 <savePattern(bool)+0x2e8>)
    656c:	f7fd fb96 	bl	3c9c <switchMode(Mode*)>
    6570:	e7be      	b.n	64f0 <savePattern(bool)+0x234>
    6572:	bf00      	nop
    6574:	20000b80 	.word	0x20000b80
    6578:	70000000 	.word	0x70000000
    657c:	20000b94 	.word	0x20000b94
    6580:	20006678 	.word	0x20006678
    6584:	2000667c 	.word	0x2000667c
    6588:	200027a0 	.word	0x200027a0
    658c:	200027fc 	.word	0x200027fc
    6590:	2000277c 	.word	0x2000277c
    6594:	20002750 	.word	0x20002750
    6598:	20002560 	.word	0x20002560
    659c:	70db37d8 	.word	0x70db37d8
    65a0:	20000cb0 	.word	0x20000cb0
    65a4:	20005808 	.word	0x20005808

000065a8 <autoSave()>:
void autoSave() {
    65a8:	b508      	push	{r3, lr}
  savePattern(true);
    65aa:	2001      	movs	r0, #1
    65ac:	f7ff fe86 	bl	62bc <savePattern(bool)>
}
    65b0:	bd08      	pop	{r3, pc}
	...

000065b4 <togglePlay(bool&)>:
void togglePlay(bool &value) {
    65b4:	b510      	push	{r4, lr}
    65b6:	4604      	mov	r4, r0
  updateLastPage();
    65b8:	f7fe fc06 	bl	4dc8 <updateLastPage()>
  SMP.activeCopy = false;
    65bc:	4b0c      	ldr	r3, [pc, #48]	; (65f0 <togglePlay(bool&)+0x3c>)
    65be:	2200      	movs	r2, #0
    65c0:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
  value = !value;  // Toggle the boolean value
    65c4:	7823      	ldrb	r3, [r4, #0]
    65c6:	f083 0301 	eor.w	r3, r3, #1
    65ca:	7023      	strb	r3, [r4, #0]
  if (value == false) {
    65cc:	b13b      	cbz	r3, 65de <togglePlay(bool&)+0x2a>
  beat = 1;
    65ce:	2301      	movs	r3, #1
    65d0:	4a08      	ldr	r2, [pc, #32]	; (65f4 <togglePlay(bool&)+0x40>)
    65d2:	6013      	str	r3, [r2, #0]
  pagebeat = 1;
    65d4:	4a08      	ldr	r2, [pc, #32]	; (65f8 <togglePlay(bool&)+0x44>)
    65d6:	6013      	str	r3, [r2, #0]
  SMP.page = 1;
    65d8:	4a05      	ldr	r2, [pc, #20]	; (65f0 <togglePlay(bool&)+0x3c>)
    65da:	6153      	str	r3, [r2, #20]
}
    65dc:	bd10      	pop	{r4, pc}
    autoSave();
    65de:	f7ff ffe3 	bl	65a8 <autoSave()>
    envelope0.noteOff();
    65e2:	4806      	ldr	r0, [pc, #24]	; (65fc <togglePlay(bool&)+0x48>)
    65e4:	f006 fbe4 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
    allOff();
    65e8:	f7fd f85e 	bl	36a8 <allOff()>
    65ec:	e7ef      	b.n	65ce <togglePlay(bool&)+0x1a>
    65ee:	bf00      	nop
    65f0:	70000000 	.word	0x70000000
    65f4:	200057e8 	.word	0x200057e8
    65f8:	200080e8 	.word	0x200080e8
    65fc:	200073f4 	.word	0x200073f4

00006600 <handleStop()>:
void handleStop() {
    6600:	b538      	push	{r3, r4, r5, lr}
  isPlaying = false;
    6602:	2400      	movs	r4, #0
    6604:	4b0d      	ldr	r3, [pc, #52]	; (663c <handleStop()+0x3c>)
    6606:	701c      	strb	r4, [r3, #0]
  pulseCount = 0;
    6608:	4b0d      	ldr	r3, [pc, #52]	; (6640 <handleStop()+0x40>)
    660a:	601c      	str	r4, [r3, #0]
  AudioMemoryUsageMaxReset();
    660c:	4b0d      	ldr	r3, [pc, #52]	; (6644 <handleStop()+0x44>)
    660e:	881a      	ldrh	r2, [r3, #0]
    6610:	4b0d      	ldr	r3, [pc, #52]	; (6648 <handleStop()+0x48>)
    6612:	801a      	strh	r2, [r3, #0]
  SMP.activeCopy = false;
    6614:	4d0d      	ldr	r5, [pc, #52]	; (664c <handleStop()+0x4c>)
    6616:	f885 40a8 	strb.w	r4, [r5, #168]	; 0xa8
  envelope0.noteOff();
    661a:	480d      	ldr	r0, [pc, #52]	; (6650 <handleStop()+0x50>)
    661c:	f006 fbc8 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
  allOff();
    6620:	f7fd f842 	bl	36a8 <allOff()>
  autoSave();
    6624:	f7ff ffc0 	bl	65a8 <autoSave()>
  beat = 1;
    6628:	2301      	movs	r3, #1
    662a:	4a0a      	ldr	r2, [pc, #40]	; (6654 <handleStop()+0x54>)
    662c:	6013      	str	r3, [r2, #0]
  pagebeat = 1;
    662e:	4a0a      	ldr	r2, [pc, #40]	; (6658 <handleStop()+0x58>)
    6630:	6013      	str	r3, [r2, #0]
  SMP.page = 1;
    6632:	616b      	str	r3, [r5, #20]
  waitForFourBars = false;
    6634:	4b09      	ldr	r3, [pc, #36]	; (665c <handleStop()+0x5c>)
    6636:	701c      	strb	r4, [r3, #0]
}
    6638:	bd38      	pop	{r3, r4, r5, pc}
    663a:	bf00      	nop
    663c:	20008c2b 	.word	0x20008c2b
    6640:	200084d4 	.word	0x200084d4
    6644:	20008c00 	.word	0x20008c00
    6648:	20008c02 	.word	0x20008c02
    664c:	70000000 	.word	0x70000000
    6650:	200073f4 	.word	0x200073f4
    6654:	200057e8 	.word	0x200057e8
    6658:	200080e8 	.word	0x200080e8
    665c:	20008c48 	.word	0x20008c48

00006660 <loadPattern(bool)>:
void loadPattern(bool autoload) {
    6660:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6664:	f5ad 7d49 	sub.w	sp, sp, #804	; 0x324
    6668:	4605      	mov	r5, r0
	StringSumHelper(const char *p) : String(p) {}
    666a:	4934      	ldr	r1, [pc, #208]	; (673c <loadPattern(bool)+0xdc>)
    666c:	a820      	add	r0, sp, #128	; 0x80
    666e:	f010 f872 	bl	16756 <String::String(char const*)>
  serialprintln("Loading slot #" + String(SMP.file));
    6672:	220a      	movs	r2, #10
    6674:	4b32      	ldr	r3, [pc, #200]	; (6740 <loadPattern(bool)+0xe0>)
    6676:	69d9      	ldr	r1, [r3, #28]
    6678:	a823      	add	r0, sp, #140	; 0x8c
    667a:	f010 f8b5 	bl	167e8 <String::String(unsigned int, unsigned char)>
    667e:	a923      	add	r1, sp, #140	; 0x8c
    6680:	a820      	add	r0, sp, #128	; 0x80
    6682:	f010 f90e 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6686:	4601      	mov	r1, r0
class StringSumHelper : public String
    6688:	a81d      	add	r0, sp, #116	; 0x74
    668a:	f010 f880 	bl	1678e <String::String(String const&)>
    668e:	a81d      	add	r0, sp, #116	; 0x74
    6690:	f010 f818 	bl	166c4 <String::~String()>
    6694:	a823      	add	r0, sp, #140	; 0x8c
    6696:	f010 f815 	bl	166c4 <String::~String()>
    669a:	a820      	add	r0, sp, #128	; 0x80
    669c:	f010 f812 	bl	166c4 <String::~String()>
  drawNoSD();
    66a0:	f7fe f8ea 	bl	4878 <drawNoSD()>
  FastLEDclear();
    66a4:	f7fd f80e 	bl	36c4 <FastLEDclear()>
  if (autoload) {
    66a8:	b1ed      	cbz	r5, 66e6 <loadPattern(bool)+0x86>
    sprintf(OUTPUTf, "autosaved.txt");
    66aa:	4b26      	ldr	r3, [pc, #152]	; (6744 <loadPattern(bool)+0xe4>)
    66ac:	ac10      	add	r4, sp, #64	; 0x40
    66ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    66b0:	c407      	stmia	r4!, {r0, r1, r2}
    66b2:	8023      	strh	r3, [r4, #0]
    return m_fVol ? m_fVol->exists(path) :
    66b4:	4b24      	ldr	r3, [pc, #144]	; (6748 <loadPattern(bool)+0xe8>)
    66b6:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    66ba:	b1d9      	cbz	r1, 66f4 <loadPattern(bool)+0x94>
    66bc:	2300      	movs	r3, #0
    66be:	f88d 3008 	strb.w	r3, [sp, #8]
    66c2:	f88d 3009 	strb.w	r3, [sp, #9]
    66c6:	f88d 300a 	strb.w	r3, [sp, #10]
    return tmp.open(this, path, O_RDONLY);
    66ca:	aa10      	add	r2, sp, #64	; 0x40
    66cc:	a802      	add	r0, sp, #8
    66ce:	f00a fc20 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    66d2:	bb00      	cbnz	r0, 6716 <loadPattern(bool)+0xb6>
    for (unsigned int nx = 1; nx < maxlen; nx++) {
    66d4:	4b1d      	ldr	r3, [pc, #116]	; (674c <loadPattern(bool)+0xec>)
    66d6:	f503 7284 	add.w	r2, r3, #264	; 0x108
    66da:	f244 5c08 	movw	ip, #17672	; 0x4508
    66de:	449c      	add	ip, r3
        note[nx][ny][0] = 0;
    66e0:	2000      	movs	r0, #0
        note[nx][ny][1] = defaultVelocity;
    66e2:	213f      	movs	r1, #63	; 0x3f
    66e4:	e314      	b.n	6d10 <loadPattern(bool)+0x6b0>
    sprintf(OUTPUTf, "%d.txt", SMP.file);
    66e6:	4b16      	ldr	r3, [pc, #88]	; (6740 <loadPattern(bool)+0xe0>)
    66e8:	69da      	ldr	r2, [r3, #28]
    66ea:	4919      	ldr	r1, [pc, #100]	; (6750 <loadPattern(bool)+0xf0>)
    66ec:	a810      	add	r0, sp, #64	; 0x40
    66ee:	f01c f807 	bl	22700 <sprintf>
    66f2:	e7df      	b.n	66b4 <loadPattern(bool)+0x54>
           m_xVol ? m_xVol->exists(path) : false;
    66f4:	4b14      	ldr	r3, [pc, #80]	; (6748 <loadPattern(bool)+0xe8>)
    66f6:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    66fa:	2900      	cmp	r1, #0
    66fc:	d0ea      	beq.n	66d4 <loadPattern(bool)+0x74>
    66fe:	2300      	movs	r3, #0
    6700:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    6704:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    6708:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    return tmp.open(this, path, O_RDONLY);
    670c:	aa10      	add	r2, sp, #64	; 0x40
    670e:	a802      	add	r0, sp, #8
    6710:	f008 fc5b 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    6714:	e7dd      	b.n	66d2 <loadPattern(bool)+0x72>
    File loadFile = SD.open(OUTPUTf);
    6716:	2300      	movs	r3, #0
    6718:	aa10      	add	r2, sp, #64	; 0x40
    671a:	490b      	ldr	r1, [pc, #44]	; (6748 <loadPattern(bool)+0xe8>)
    671c:	a802      	add	r0, sp, #8
    671e:	f7fc f911 	bl	2944 <SDClass::open(char const*, unsigned char)>
		return (f) ? f->isOpen() : false;
    6722:	9806      	ldr	r0, [sp, #24]
    6724:	2800      	cmp	r0, #0
    6726:	d03f      	beq.n	67a8 <loadPattern(bool)+0x148>
    6728:	6803      	ldr	r3, [r0, #0]
    672a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    672c:	4798      	blx	r3
    if (loadFile) {
    672e:	b330      	cbz	r0, 677e <loadPattern(bool)+0x11e>
      unsigned int sdrx = 1;
    6730:	2401      	movs	r4, #1
      unsigned int sdry = 1;
    6732:	4626      	mov	r6, r4
    6734:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        note[sdrx][sdry][0] = b;
    6738:	4f04      	ldr	r7, [pc, #16]	; (674c <loadPattern(bool)+0xec>)
    673a:	e290      	b.n	6c5e <loadPattern(bool)+0x5fe>
    673c:	20000ab8 	.word	0x20000ab8
    6740:	70000000 	.word	0x70000000
    6744:	20000b94 	.word	0x20000b94
    6748:	20006678 	.word	0x20006678
    674c:	70db37d8 	.word	0x70db37d8
    6750:	20000cb0 	.word	0x20000cb0
		return (f) ? f->peek() : -1;
    6754:	9806      	ldr	r0, [sp, #24]
    6756:	2800      	cmp	r0, #0
    6758:	f000 8278 	beq.w	6c4c <loadPattern(bool)+0x5ec>
    675c:	6803      	ldr	r3, [r0, #0]
    675e:	695b      	ldr	r3, [r3, #20]
    6760:	4798      	blx	r3
        if (b == 0xFF && loadFile.peek() == 0xFE) {
    6762:	28fe      	cmp	r0, #254	; 0xfe
    6764:	f040 8296 	bne.w	6c94 <loadPattern(bool)+0x634>
          loadFile.read();  // Consume the second marker byte
    6768:	a802      	add	r0, sp, #8
    676a:	f7f9 fd27 	bl	1bc <File::read()>
		return (f) ? f->available() : 0;
    676e:	9806      	ldr	r0, [sp, #24]
    6770:	b1d0      	cbz	r0, 67a8 <loadPattern(bool)+0x148>
    6772:	6803      	ldr	r3, [r0, #0]
    6774:	691b      	ldr	r3, [r3, #16]
    6776:	4798      	blx	r3
      if (loadFile.available()) {
    6778:	2800      	cmp	r0, #0
    677a:	f040 82a6 	bne.w	6cca <loadPattern(bool)+0x66a>
		if (f) {
    677e:	9806      	ldr	r0, [sp, #24]
    6780:	b190      	cbz	r0, 67a8 <loadPattern(bool)+0x148>
			f->close();
    6782:	6803      	ldr	r3, [r0, #0]
    6784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6786:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    6788:	9a06      	ldr	r2, [sp, #24]
    678a:	6853      	ldr	r3, [r2, #4]
    678c:	3b01      	subs	r3, #1
    678e:	6053      	str	r3, [r2, #4]
    6790:	b943      	cbnz	r3, 67a4 <loadPattern(bool)+0x144>
			f->close();
    6792:	9806      	ldr	r0, [sp, #24]
    6794:	6803      	ldr	r3, [r0, #0]
    6796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6798:	4798      	blx	r3
			delete f;
    679a:	9806      	ldr	r0, [sp, #24]
    679c:	b110      	cbz	r0, 67a4 <loadPattern(bool)+0x144>
    679e:	6803      	ldr	r3, [r0, #0]
    67a0:	685b      	ldr	r3, [r3, #4]
    67a2:	4798      	blx	r3
		f = nullptr;
    67a4:	2300      	movs	r3, #0
    67a6:	9306      	str	r3, [sp, #24]
    bpm_vol->pos[2] = SMP.bpm;
    67a8:	4bb7      	ldr	r3, [pc, #732]	; (6a88 <loadPattern(bool)+0x428>)
    67aa:	68da      	ldr	r2, [r3, #12]
    67ac:	4bb7      	ldr	r3, [pc, #732]	; (6a8c <loadPattern(bool)+0x42c>)
    67ae:	635a      	str	r2, [r3, #52]	; 0x34
    playNoteInterval = ((60 * 1000 / SMP.bpm) / 4) * 1000;
    67b0:	f643 2398 	movw	r3, #15000	; 0x3a98
    67b4:	fbb3 f3f2 	udiv	r3, r3, r2
    67b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67bc:	fb03 f202 	mul.w	r2, r3, r2
    67c0:	49b3      	ldr	r1, [pc, #716]	; (6a90 <loadPattern(bool)+0x430>)
    67c2:	600a      	str	r2, [r1, #0]
    67c4:	4ab3      	ldr	r2, [pc, #716]	; (6a94 <loadPattern(bool)+0x434>)
    67c6:	6812      	ldr	r2, [r2, #0]
    67c8:	b12a      	cbz	r2, 67d6 <loadPattern(bool)+0x176>
			return (24000000 / 1000000) * period - 1;
    67ca:	f645 51c0 	movw	r1, #24000	; 0x5dc0
    67ce:	fb01 f303 	mul.w	r3, r1, r3
    67d2:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
    67d4:	6013      	str	r3, [r2, #0]
    if (!isEncoder4Defined) {
    67d6:	4bb0      	ldr	r3, [pc, #704]	; (6a98 <loadPattern(bool)+0x438>)
    67d8:	781b      	ldrb	r3, [r3, #0]
    67da:	2b00      	cmp	r3, #0
    67dc:	f040 8280 	bne.w	6ce0 <loadPattern(bool)+0x680>
      bpm_vol->pos[0] = SMP.vol;
    67e0:	4ba9      	ldr	r3, [pc, #676]	; (6a88 <loadPattern(bool)+0x428>)
    67e2:	689a      	ldr	r2, [r3, #8]
    67e4:	4ba9      	ldr	r3, [pc, #676]	; (6a8c <loadPattern(bool)+0x42c>)
    67e6:	62da      	str	r2, [r3, #44]	; 0x2c
    float vol = float(SMP.vol / 10.0);
    67e8:	4ba7      	ldr	r3, [pc, #668]	; (6a88 <loadPattern(bool)+0x428>)
    67ea:	ed93 6a02 	vldr	s12, [r3, #8]
    67ee:	eeb8 6b46 	vcvt.f64.u32	d6, s12
    67f2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    67f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
    67fa:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    if (vol <= 1.0)
    67fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6802:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    680a:	f240 826e 	bls.w	6cea <loadPattern(bool)+0x68a>
    SMP.singleMode = false;
    680e:	4c9e      	ldr	r4, [pc, #632]	; (6a88 <loadPattern(bool)+0x428>)
    6810:	2600      	movs	r6, #0
    6812:	6026      	str	r6, [r4, #0]
	StringSumHelper(const char *p) : String(p) {}
    6814:	49a1      	ldr	r1, [pc, #644]	; (6a9c <loadPattern(bool)+0x43c>)
    6816:	a829      	add	r0, sp, #164	; 0xa4
    6818:	f00f ff9d 	bl	16756 <String::String(char const*)>
    serialprintln("singleMode: " + String(SMP.singleMode));
    681c:	220a      	movs	r2, #10
    681e:	6821      	ldr	r1, [r4, #0]
    6820:	a82c      	add	r0, sp, #176	; 0xb0
    6822:	f00f ffe1 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6826:	a92c      	add	r1, sp, #176	; 0xb0
    6828:	a829      	add	r0, sp, #164	; 0xa4
    682a:	f010 f83a 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    682e:	4601      	mov	r1, r0
class StringSumHelper : public String
    6830:	a826      	add	r0, sp, #152	; 0x98
    6832:	f00f ffac 	bl	1678e <String::String(String const&)>
    6836:	a826      	add	r0, sp, #152	; 0x98
    6838:	f00f ff44 	bl	166c4 <String::~String()>
    683c:	a82c      	add	r0, sp, #176	; 0xb0
    683e:	f00f ff41 	bl	166c4 <String::~String()>
    6842:	a829      	add	r0, sp, #164	; 0xa4
    6844:	f00f ff3e 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6848:	4995      	ldr	r1, [pc, #596]	; (6aa0 <loadPattern(bool)+0x440>)
    684a:	a832      	add	r0, sp, #200	; 0xc8
    684c:	f00f ff83 	bl	16756 <String::String(char const*)>
    serialprintln("currentChannel: " + String(SMP.currentChannel));
    6850:	220a      	movs	r2, #10
    6852:	6861      	ldr	r1, [r4, #4]
    6854:	a835      	add	r0, sp, #212	; 0xd4
    6856:	f00f ffc7 	bl	167e8 <String::String(unsigned int, unsigned char)>
    685a:	a935      	add	r1, sp, #212	; 0xd4
    685c:	a832      	add	r0, sp, #200	; 0xc8
    685e:	f010 f820 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6862:	4601      	mov	r1, r0
class StringSumHelper : public String
    6864:	a82f      	add	r0, sp, #188	; 0xbc
    6866:	f00f ff92 	bl	1678e <String::String(String const&)>
    686a:	a82f      	add	r0, sp, #188	; 0xbc
    686c:	f00f ff2a 	bl	166c4 <String::~String()>
    6870:	a835      	add	r0, sp, #212	; 0xd4
    6872:	f00f ff27 	bl	166c4 <String::~String()>
    6876:	a832      	add	r0, sp, #200	; 0xc8
    6878:	f00f ff24 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    687c:	4989      	ldr	r1, [pc, #548]	; (6aa4 <loadPattern(bool)+0x444>)
    687e:	a83b      	add	r0, sp, #236	; 0xec
    6880:	f00f ff69 	bl	16756 <String::String(char const*)>
    serialprintln("vol: " + String(SMP.vol));
    6884:	220a      	movs	r2, #10
    6886:	68a1      	ldr	r1, [r4, #8]
    6888:	a83e      	add	r0, sp, #248	; 0xf8
    688a:	f00f ffad 	bl	167e8 <String::String(unsigned int, unsigned char)>
    688e:	a93e      	add	r1, sp, #248	; 0xf8
    6890:	a83b      	add	r0, sp, #236	; 0xec
    6892:	f010 f806 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6896:	4601      	mov	r1, r0
class StringSumHelper : public String
    6898:	a838      	add	r0, sp, #224	; 0xe0
    689a:	f00f ff78 	bl	1678e <String::String(String const&)>
    689e:	a838      	add	r0, sp, #224	; 0xe0
    68a0:	f00f ff10 	bl	166c4 <String::~String()>
    68a4:	a83e      	add	r0, sp, #248	; 0xf8
    68a6:	f00f ff0d 	bl	166c4 <String::~String()>
    68aa:	a83b      	add	r0, sp, #236	; 0xec
    68ac:	f00f ff0a 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    68b0:	497d      	ldr	r1, [pc, #500]	; (6aa8 <loadPattern(bool)+0x448>)
    68b2:	a844      	add	r0, sp, #272	; 0x110
    68b4:	f00f ff4f 	bl	16756 <String::String(char const*)>
    serialprintln("bpm: " + String(SMP.bpm));
    68b8:	220a      	movs	r2, #10
    68ba:	68e1      	ldr	r1, [r4, #12]
    68bc:	a847      	add	r0, sp, #284	; 0x11c
    68be:	f00f ff93 	bl	167e8 <String::String(unsigned int, unsigned char)>
    68c2:	a947      	add	r1, sp, #284	; 0x11c
    68c4:	a844      	add	r0, sp, #272	; 0x110
    68c6:	f00f ffec 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    68ca:	4601      	mov	r1, r0
class StringSumHelper : public String
    68cc:	a841      	add	r0, sp, #260	; 0x104
    68ce:	f00f ff5e 	bl	1678e <String::String(String const&)>
    68d2:	a841      	add	r0, sp, #260	; 0x104
    68d4:	f00f fef6 	bl	166c4 <String::~String()>
    68d8:	a847      	add	r0, sp, #284	; 0x11c
    68da:	f00f fef3 	bl	166c4 <String::~String()>
    68de:	a844      	add	r0, sp, #272	; 0x110
    68e0:	f00f fef0 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    68e4:	4971      	ldr	r1, [pc, #452]	; (6aac <loadPattern(bool)+0x44c>)
    68e6:	a84d      	add	r0, sp, #308	; 0x134
    68e8:	f00f ff35 	bl	16756 <String::String(char const*)>
    serialprintln("velocity: " + String(SMP.velocity));
    68ec:	220a      	movs	r2, #10
    68ee:	6921      	ldr	r1, [r4, #16]
    68f0:	a850      	add	r0, sp, #320	; 0x140
    68f2:	f00f ff79 	bl	167e8 <String::String(unsigned int, unsigned char)>
    68f6:	a950      	add	r1, sp, #320	; 0x140
    68f8:	a84d      	add	r0, sp, #308	; 0x134
    68fa:	f00f ffd2 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    68fe:	4601      	mov	r1, r0
class StringSumHelper : public String
    6900:	a84a      	add	r0, sp, #296	; 0x128
    6902:	f00f ff44 	bl	1678e <String::String(String const&)>
    6906:	a84a      	add	r0, sp, #296	; 0x128
    6908:	f00f fedc 	bl	166c4 <String::~String()>
    690c:	a850      	add	r0, sp, #320	; 0x140
    690e:	f00f fed9 	bl	166c4 <String::~String()>
    6912:	a84d      	add	r0, sp, #308	; 0x134
    6914:	f00f fed6 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6918:	4965      	ldr	r1, [pc, #404]	; (6ab0 <loadPattern(bool)+0x450>)
    691a:	a856      	add	r0, sp, #344	; 0x158
    691c:	f00f ff1b 	bl	16756 <String::String(char const*)>
    serialprintln("page: " + String(SMP.page));
    6920:	220a      	movs	r2, #10
    6922:	6961      	ldr	r1, [r4, #20]
    6924:	a859      	add	r0, sp, #356	; 0x164
    6926:	f00f ff5f 	bl	167e8 <String::String(unsigned int, unsigned char)>
    692a:	a959      	add	r1, sp, #356	; 0x164
    692c:	a856      	add	r0, sp, #344	; 0x158
    692e:	f00f ffb8 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6932:	4601      	mov	r1, r0
class StringSumHelper : public String
    6934:	a853      	add	r0, sp, #332	; 0x14c
    6936:	f00f ff2a 	bl	1678e <String::String(String const&)>
    693a:	a853      	add	r0, sp, #332	; 0x14c
    693c:	f00f fec2 	bl	166c4 <String::~String()>
    6940:	a859      	add	r0, sp, #356	; 0x164
    6942:	f00f febf 	bl	166c4 <String::~String()>
    6946:	a856      	add	r0, sp, #344	; 0x158
    6948:	f00f febc 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    694c:	4959      	ldr	r1, [pc, #356]	; (6ab4 <loadPattern(bool)+0x454>)
    694e:	a85f      	add	r0, sp, #380	; 0x17c
    6950:	f00f ff01 	bl	16756 <String::String(char const*)>
    serialprintln("edit: " + String(SMP.edit));
    6954:	220a      	movs	r2, #10
    6956:	69a1      	ldr	r1, [r4, #24]
    6958:	a862      	add	r0, sp, #392	; 0x188
    695a:	f00f ff45 	bl	167e8 <String::String(unsigned int, unsigned char)>
    695e:	a962      	add	r1, sp, #392	; 0x188
    6960:	a85f      	add	r0, sp, #380	; 0x17c
    6962:	f00f ff9e 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6966:	4601      	mov	r1, r0
class StringSumHelper : public String
    6968:	a85c      	add	r0, sp, #368	; 0x170
    696a:	f00f ff10 	bl	1678e <String::String(String const&)>
    696e:	a85c      	add	r0, sp, #368	; 0x170
    6970:	f00f fea8 	bl	166c4 <String::~String()>
    6974:	a862      	add	r0, sp, #392	; 0x188
    6976:	f00f fea5 	bl	166c4 <String::~String()>
    697a:	a85f      	add	r0, sp, #380	; 0x17c
    697c:	f00f fea2 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6980:	494d      	ldr	r1, [pc, #308]	; (6ab8 <loadPattern(bool)+0x458>)
    6982:	a868      	add	r0, sp, #416	; 0x1a0
    6984:	f00f fee7 	bl	16756 <String::String(char const*)>
    serialprintln("file: " + String(SMP.file));
    6988:	220a      	movs	r2, #10
    698a:	69e1      	ldr	r1, [r4, #28]
    698c:	a86b      	add	r0, sp, #428	; 0x1ac
    698e:	f00f ff2b 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6992:	a96b      	add	r1, sp, #428	; 0x1ac
    6994:	a868      	add	r0, sp, #416	; 0x1a0
    6996:	f00f ff84 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    699a:	4601      	mov	r1, r0
class StringSumHelper : public String
    699c:	a865      	add	r0, sp, #404	; 0x194
    699e:	f00f fef6 	bl	1678e <String::String(String const&)>
    69a2:	a865      	add	r0, sp, #404	; 0x194
    69a4:	f00f fe8e 	bl	166c4 <String::~String()>
    69a8:	a86b      	add	r0, sp, #428	; 0x1ac
    69aa:	f00f fe8b 	bl	166c4 <String::~String()>
    69ae:	a868      	add	r0, sp, #416	; 0x1a0
    69b0:	f00f fe88 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    69b4:	4941      	ldr	r1, [pc, #260]	; (6abc <loadPattern(bool)+0x45c>)
    69b6:	a871      	add	r0, sp, #452	; 0x1c4
    69b8:	f00f fecd 	bl	16756 <String::String(char const*)>
    serialprintln("pack: " + String(SMP.pack));
    69bc:	220a      	movs	r2, #10
    69be:	6a21      	ldr	r1, [r4, #32]
    69c0:	a874      	add	r0, sp, #464	; 0x1d0
    69c2:	f00f ff11 	bl	167e8 <String::String(unsigned int, unsigned char)>
    69c6:	a974      	add	r1, sp, #464	; 0x1d0
    69c8:	a871      	add	r0, sp, #452	; 0x1c4
    69ca:	f00f ff6a 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    69ce:	4601      	mov	r1, r0
class StringSumHelper : public String
    69d0:	a86e      	add	r0, sp, #440	; 0x1b8
    69d2:	f00f fedc 	bl	1678e <String::String(String const&)>
    69d6:	a86e      	add	r0, sp, #440	; 0x1b8
    69d8:	f00f fe74 	bl	166c4 <String::~String()>
    69dc:	a874      	add	r0, sp, #464	; 0x1d0
    69de:	f00f fe71 	bl	166c4 <String::~String()>
    69e2:	a871      	add	r0, sp, #452	; 0x1c4
    69e4:	f00f fe6e 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    69e8:	4935      	ldr	r1, [pc, #212]	; (6ac0 <loadPattern(bool)+0x460>)
    69ea:	a87a      	add	r0, sp, #488	; 0x1e8
    69ec:	f00f feb3 	bl	16756 <String::String(char const*)>
    serialprintln("wav: " + String(SMP.wav[SMP.currentChannel][1]));
    69f0:	6863      	ldr	r3, [r4, #4]
    69f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    69f6:	220a      	movs	r2, #10
    69f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
    69fa:	a87d      	add	r0, sp, #500	; 0x1f4
    69fc:	f00f fef4 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6a00:	a97d      	add	r1, sp, #500	; 0x1f4
    6a02:	a87a      	add	r0, sp, #488	; 0x1e8
    6a04:	f00f ff4d 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6a08:	4601      	mov	r1, r0
class StringSumHelper : public String
    6a0a:	a877      	add	r0, sp, #476	; 0x1dc
    6a0c:	f00f febf 	bl	1678e <String::String(String const&)>
    6a10:	a877      	add	r0, sp, #476	; 0x1dc
    6a12:	f00f fe57 	bl	166c4 <String::~String()>
    6a16:	a87d      	add	r0, sp, #500	; 0x1f4
    6a18:	f00f fe54 	bl	166c4 <String::~String()>
    6a1c:	a87a      	add	r0, sp, #488	; 0x1e8
    6a1e:	f00f fe51 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6a22:	4928      	ldr	r1, [pc, #160]	; (6ac4 <loadPattern(bool)+0x464>)
    6a24:	a883      	add	r0, sp, #524	; 0x20c
    6a26:	f00f fe96 	bl	16756 <String::String(char const*)>
    serialprintln("folder: " + String(SMP.folder));
    6a2a:	220a      	movs	r2, #10
    6a2c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
    6a30:	a886      	add	r0, sp, #536	; 0x218
    6a32:	f00f fed9 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6a36:	a986      	add	r1, sp, #536	; 0x218
    6a38:	a883      	add	r0, sp, #524	; 0x20c
    6a3a:	f00f ff32 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6a3e:	4601      	mov	r1, r0
class StringSumHelper : public String
    6a40:	a880      	add	r0, sp, #512	; 0x200
    6a42:	f00f fea4 	bl	1678e <String::String(String const&)>
    6a46:	a880      	add	r0, sp, #512	; 0x200
    6a48:	f00f fe3c 	bl	166c4 <String::~String()>
    6a4c:	a886      	add	r0, sp, #536	; 0x218
    6a4e:	f00f fe39 	bl	166c4 <String::~String()>
    6a52:	a883      	add	r0, sp, #524	; 0x20c
    6a54:	f00f fe36 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6a58:	491b      	ldr	r1, [pc, #108]	; (6ac8 <loadPattern(bool)+0x468>)
    6a5a:	a88c      	add	r0, sp, #560	; 0x230
    6a5c:	f00f fe7b 	bl	16756 <String::String(char const*)>
    serialprintln("activeCopy: " + String(SMP.activeCopy));
    6a60:	220a      	movs	r2, #10
    6a62:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
    6a66:	a88f      	add	r0, sp, #572	; 0x23c
    6a68:	f00f feac 	bl	167c4 <String::String(int, unsigned char)>
    6a6c:	a98f      	add	r1, sp, #572	; 0x23c
    6a6e:	a88c      	add	r0, sp, #560	; 0x230
    6a70:	f00f ff17 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6a74:	4601      	mov	r1, r0
class StringSumHelper : public String
    6a76:	a889      	add	r0, sp, #548	; 0x224
    6a78:	f00f fe89 	bl	1678e <String::String(String const&)>
    6a7c:	a889      	add	r0, sp, #548	; 0x224
    6a7e:	f00f fe21 	bl	166c4 <String::~String()>
    6a82:	a88f      	add	r0, sp, #572	; 0x23c
    6a84:	e022      	b.n	6acc <loadPattern(bool)+0x46c>
    6a86:	bf00      	nop
    6a88:	70000000 	.word	0x70000000
    6a8c:	20005c4c 	.word	0x20005c4c
    6a90:	20005b00 	.word	0x20005b00
    6a94:	20005b04 	.word	0x20005b04
    6a98:	20005c89 	.word	0x20005c89
    6a9c:	20000ac8 	.word	0x20000ac8
    6aa0:	20000ad8 	.word	0x20000ad8
    6aa4:	20000aec 	.word	0x20000aec
    6aa8:	20000af4 	.word	0x20000af4
    6aac:	20000afc 	.word	0x20000afc
    6ab0:	20000b08 	.word	0x20000b08
    6ab4:	20000b10 	.word	0x20000b10
    6ab8:	20000b18 	.word	0x20000b18
    6abc:	20000b20 	.word	0x20000b20
    6ac0:	20000b28 	.word	0x20000b28
    6ac4:	20000b30 	.word	0x20000b30
    6ac8:	20000b3c 	.word	0x20000b3c
    6acc:	f00f fdfa 	bl	166c4 <String::~String()>
    6ad0:	a88c      	add	r0, sp, #560	; 0x230
    6ad2:	f00f fdf7 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6ad6:	4997      	ldr	r1, [pc, #604]	; (6d34 <loadPattern(bool)+0x6d4>)
    6ad8:	a895      	add	r0, sp, #596	; 0x254
    6ada:	f00f fe3c 	bl	16756 <String::String(char const*)>
    serialprintln("x: " + String(SMP.x));
    6ade:	220a      	movs	r2, #10
    6ae0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    6ae4:	a898      	add	r0, sp, #608	; 0x260
    6ae6:	f00f fe7f 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6aea:	a998      	add	r1, sp, #608	; 0x260
    6aec:	a895      	add	r0, sp, #596	; 0x254
    6aee:	f00f fed8 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6af2:	4601      	mov	r1, r0
class StringSumHelper : public String
    6af4:	a892      	add	r0, sp, #584	; 0x248
    6af6:	f00f fe4a 	bl	1678e <String::String(String const&)>
    6afa:	a892      	add	r0, sp, #584	; 0x248
    6afc:	f00f fde2 	bl	166c4 <String::~String()>
    6b00:	a898      	add	r0, sp, #608	; 0x260
    6b02:	f00f fddf 	bl	166c4 <String::~String()>
    6b06:	a895      	add	r0, sp, #596	; 0x254
    6b08:	f00f fddc 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6b0c:	498a      	ldr	r1, [pc, #552]	; (6d38 <loadPattern(bool)+0x6d8>)
    6b0e:	a89e      	add	r0, sp, #632	; 0x278
    6b10:	f00f fe21 	bl	16756 <String::String(char const*)>
    serialprintln("y: " + String(SMP.y));
    6b14:	220a      	movs	r2, #10
    6b16:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    6b1a:	a8a1      	add	r0, sp, #644	; 0x284
    6b1c:	f00f fe64 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6b20:	a9a1      	add	r1, sp, #644	; 0x284
    6b22:	a89e      	add	r0, sp, #632	; 0x278
    6b24:	f00f febd 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6b28:	4601      	mov	r1, r0
class StringSumHelper : public String
    6b2a:	a89b      	add	r0, sp, #620	; 0x26c
    6b2c:	f00f fe2f 	bl	1678e <String::String(String const&)>
    6b30:	a89b      	add	r0, sp, #620	; 0x26c
    6b32:	f00f fdc7 	bl	166c4 <String::~String()>
    6b36:	a8a1      	add	r0, sp, #644	; 0x284
    6b38:	f00f fdc4 	bl	166c4 <String::~String()>
    6b3c:	a89e      	add	r0, sp, #632	; 0x278
    6b3e:	f00f fdc1 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6b42:	497e      	ldr	r1, [pc, #504]	; (6d3c <loadPattern(bool)+0x6dc>)
    6b44:	a8a7      	add	r0, sp, #668	; 0x29c
    6b46:	f00f fe06 	bl	16756 <String::String(char const*)>
    serialprintln("seek: " + String(SMP.seek));
    6b4a:	220a      	movs	r2, #10
    6b4c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    6b50:	a8aa      	add	r0, sp, #680	; 0x2a8
    6b52:	f00f fe49 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6b56:	a9aa      	add	r1, sp, #680	; 0x2a8
    6b58:	a8a7      	add	r0, sp, #668	; 0x29c
    6b5a:	f00f fea2 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6b5e:	4601      	mov	r1, r0
class StringSumHelper : public String
    6b60:	a8a4      	add	r0, sp, #656	; 0x290
    6b62:	f00f fe14 	bl	1678e <String::String(String const&)>
    6b66:	a8a4      	add	r0, sp, #656	; 0x290
    6b68:	f00f fdac 	bl	166c4 <String::~String()>
    6b6c:	a8aa      	add	r0, sp, #680	; 0x2a8
    6b6e:	f00f fda9 	bl	166c4 <String::~String()>
    6b72:	a8a7      	add	r0, sp, #668	; 0x29c
    6b74:	f00f fda6 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6b78:	4971      	ldr	r1, [pc, #452]	; (6d40 <loadPattern(bool)+0x6e0>)
    6b7a:	a8b0      	add	r0, sp, #704	; 0x2c0
    6b7c:	f00f fdeb 	bl	16756 <String::String(char const*)>
    serialprintln("seekEnd: " + String(SMP.seekEnd));
    6b80:	220a      	movs	r2, #10
    6b82:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
    6b86:	a8b3      	add	r0, sp, #716	; 0x2cc
    6b88:	f00f fe2e 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6b8c:	a9b3      	add	r1, sp, #716	; 0x2cc
    6b8e:	a8b0      	add	r0, sp, #704	; 0x2c0
    6b90:	f00f fe87 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6b94:	4601      	mov	r1, r0
class StringSumHelper : public String
    6b96:	a8ad      	add	r0, sp, #692	; 0x2b4
    6b98:	f00f fdf9 	bl	1678e <String::String(String const&)>
    6b9c:	a8ad      	add	r0, sp, #692	; 0x2b4
    6b9e:	f00f fd91 	bl	166c4 <String::~String()>
    6ba2:	a8b3      	add	r0, sp, #716	; 0x2cc
    6ba4:	f00f fd8e 	bl	166c4 <String::~String()>
    6ba8:	a8b0      	add	r0, sp, #704	; 0x2c0
    6baa:	f00f fd8b 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6bae:	4965      	ldr	r1, [pc, #404]	; (6d44 <loadPattern(bool)+0x6e4>)
    6bb0:	a8b9      	add	r0, sp, #740	; 0x2e4
    6bb2:	f00f fdd0 	bl	16756 <String::String(char const*)>
    serialprintln("smplen: " + String(SMP.smplen));
    6bb6:	220a      	movs	r2, #10
    6bb8:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    6bbc:	a8bc      	add	r0, sp, #752	; 0x2f0
    6bbe:	f00f fe13 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6bc2:	a9bc      	add	r1, sp, #752	; 0x2f0
    6bc4:	a8b9      	add	r0, sp, #740	; 0x2e4
    6bc6:	f00f fe6c 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6bca:	4601      	mov	r1, r0
class StringSumHelper : public String
    6bcc:	a8b6      	add	r0, sp, #728	; 0x2d8
    6bce:	f00f fdde 	bl	1678e <String::String(String const&)>
    6bd2:	a8b6      	add	r0, sp, #728	; 0x2d8
    6bd4:	f00f fd76 	bl	166c4 <String::~String()>
    6bd8:	a8bc      	add	r0, sp, #752	; 0x2f0
    6bda:	f00f fd73 	bl	166c4 <String::~String()>
    6bde:	a8b9      	add	r0, sp, #740	; 0x2e4
    6be0:	f00f fd70 	bl	166c4 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    6be4:	4958      	ldr	r1, [pc, #352]	; (6d48 <loadPattern(bool)+0x6e8>)
    6be6:	a8c2      	add	r0, sp, #776	; 0x308
    6be8:	f00f fdb5 	bl	16756 <String::String(char const*)>
    serialprintln("shiftX: " + String(SMP.shiftX));
    6bec:	220a      	movs	r2, #10
    6bee:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
    6bf2:	a8c5      	add	r0, sp, #788	; 0x314
    6bf4:	f00f fdf8 	bl	167e8 <String::String(unsigned int, unsigned char)>
    6bf8:	a9c5      	add	r1, sp, #788	; 0x314
    6bfa:	a8c2      	add	r0, sp, #776	; 0x308
    6bfc:	f00f fe51 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    6c00:	4601      	mov	r1, r0
class StringSumHelper : public String
    6c02:	a8bf      	add	r0, sp, #764	; 0x2fc
    6c04:	f00f fdc3 	bl	1678e <String::String(String const&)>
    6c08:	a8bf      	add	r0, sp, #764	; 0x2fc
    6c0a:	f00f fd5b 	bl	166c4 <String::~String()>
    6c0e:	a8c5      	add	r0, sp, #788	; 0x314
    6c10:	f00f fd58 	bl	166c4 <String::~String()>
    6c14:	a8c2      	add	r0, sp, #776	; 0x308
    6c16:	f00f fd55 	bl	166c4 <String::~String()>
    SMP.seek = 0;
    6c1a:	f8c4 60b4 	str.w	r6, [r4, #180]	; 0xb4
    SMP.seekEnd = 0;
    6c1e:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
    SMP.smplen = 0;
    6c22:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
    SMP.shiftX = 0;
    6c26:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
    SMP.shiftY = 0;
    6c2a:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	virtual ~File() {
    6c2e:	4b47      	ldr	r3, [pc, #284]	; (6d4c <loadPattern(bool)+0x6ec>)
    6c30:	9302      	str	r3, [sp, #8]
		if (f) dec_refcount();
    6c32:	9b06      	ldr	r3, [sp, #24]
    6c34:	b113      	cbz	r3, 6c3c <loadPattern(bool)+0x5dc>
    6c36:	a802      	add	r0, sp, #8
    6c38:	f7fb fe70 	bl	291c <File::dec_refcount()>
  updateLastPage();
    6c3c:	f7fe f8c4 	bl	4dc8 <updateLastPage()>
  if (!autoload) {
    6c40:	2d00      	cmp	r5, #0
    6c42:	d06d      	beq.n	6d20 <loadPattern(bool)+0x6c0>
}
    6c44:	f50d 7d49 	add.w	sp, sp, #804	; 0x324
    6c48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!f) return -1;
    6c4c:	464a      	mov	r2, r9
    6c4e:	e02e      	b.n	6cae <loadPattern(bool)+0x64e>
    6c50:	464a      	mov	r2, r9
    6c52:	e02c      	b.n	6cae <loadPattern(bool)+0x64e>
		if (f->read(&b, 1) < 1) return -1;
    6c54:	464a      	mov	r2, r9
    6c56:	e02a      	b.n	6cae <loadPattern(bool)+0x64e>
          sdrx = 1;
    6c58:	2c82      	cmp	r4, #130	; 0x82
    6c5a:	bf28      	it	cs
    6c5c:	2401      	movcs	r4, #1
		return (f) ? f->available() : 0;
    6c5e:	9806      	ldr	r0, [sp, #24]
    6c60:	2800      	cmp	r0, #0
    6c62:	f43f ada1 	beq.w	67a8 <loadPattern(bool)+0x148>
    6c66:	6803      	ldr	r3, [r0, #0]
    6c68:	691b      	ldr	r3, [r3, #16]
    6c6a:	4798      	blx	r3
      while (loadFile.available()) {
    6c6c:	2800      	cmp	r0, #0
    6c6e:	f43f ad7e 	beq.w	676e <loadPattern(bool)+0x10e>
		if (!f) return -1;
    6c72:	9806      	ldr	r0, [sp, #24]
    6c74:	2800      	cmp	r0, #0
    6c76:	d05b      	beq.n	6d30 <loadPattern(bool)+0x6d0>
		if (f->read(&b, 1) < 1) return -1;
    6c78:	6803      	ldr	r3, [r0, #0]
    6c7a:	689b      	ldr	r3, [r3, #8]
    6c7c:	2201      	movs	r2, #1
    6c7e:	f10d 0107 	add.w	r1, sp, #7
    6c82:	4798      	blx	r3
    6c84:	2800      	cmp	r0, #0
    6c86:	d053      	beq.n	6d30 <loadPattern(bool)+0x6d0>
		return b;
    6c88:	f89d 8007 	ldrb.w	r8, [sp, #7]
        if (b == 0xFF && loadFile.peek() == 0xFE) {
    6c8c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6c90:	f43f ad60 	beq.w	6754 <loadPattern(bool)+0xf4>
		if (!f) return -1;
    6c94:	9806      	ldr	r0, [sp, #24]
    6c96:	2800      	cmp	r0, #0
    6c98:	d0da      	beq.n	6c50 <loadPattern(bool)+0x5f0>
		if (f->read(&b, 1) < 1) return -1;
    6c9a:	6803      	ldr	r3, [r0, #0]
    6c9c:	689b      	ldr	r3, [r3, #8]
    6c9e:	2201      	movs	r2, #1
    6ca0:	f10d 0107 	add.w	r1, sp, #7
    6ca4:	4798      	blx	r3
    6ca6:	2800      	cmp	r0, #0
    6ca8:	d0d4      	beq.n	6c54 <loadPattern(bool)+0x5f4>
		return b;
    6caa:	f89d 2007 	ldrb.w	r2, [sp, #7]
        note[sdrx][sdry][0] = b;
    6cae:	eb04 1304 	add.w	r3, r4, r4, lsl #4
    6cb2:	4433      	add	r3, r6
    6cb4:	f847 8033 	str.w	r8, [r7, r3, lsl #3]
        note[sdrx][sdry][1] = v;
    6cb8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    6cbc:	605a      	str	r2, [r3, #4]
        sdry++;
    6cbe:	3601      	adds	r6, #1
        if (sdry > maxY) {
    6cc0:	2e10      	cmp	r6, #16
    6cc2:	d9c9      	bls.n	6c58 <loadPattern(bool)+0x5f8>
          sdrx++;
    6cc4:	3401      	adds	r4, #1
          sdry = 1;
    6cc6:	2601      	movs	r6, #1
    6cc8:	e7c6      	b.n	6c58 <loadPattern(bool)+0x5f8>
		return (f) ? f->read(buf, nbyte) : 0;
    6cca:	9806      	ldr	r0, [sp, #24]
    6ccc:	2800      	cmp	r0, #0
    6cce:	f43f ad6b 	beq.w	67a8 <loadPattern(bool)+0x148>
    6cd2:	6803      	ldr	r3, [r0, #0]
    6cd4:	689b      	ldr	r3, [r3, #8]
    6cd6:	f44f 72a2 	mov.w	r2, #324	; 0x144
    6cda:	491d      	ldr	r1, [pc, #116]	; (6d50 <loadPattern(bool)+0x6f0>)
    6cdc:	4798      	blx	r3
    6cde:	e54e      	b.n	677e <loadPattern(bool)+0x11e>
      bpm_vol->pos[3] = SMP.vol;
    6ce0:	4b1b      	ldr	r3, [pc, #108]	; (6d50 <loadPattern(bool)+0x6f0>)
    6ce2:	689a      	ldr	r2, [r3, #8]
    6ce4:	4b1b      	ldr	r3, [pc, #108]	; (6d54 <loadPattern(bool)+0x6f4>)
    6ce6:	639a      	str	r2, [r3, #56]	; 0x38
    6ce8:	e57e      	b.n	67e8 <loadPattern(bool)+0x188>
    6cea:	eddf 7a1b 	vldr	s15, [pc, #108]	; 6d58 <loadPattern(bool)+0x6f8>
    6cee:	ee27 7a27 	vmul.f32	s14, s14, s15
    6cf2:	eddf 7a1a 	vldr	s15, [pc, #104]	; 6d5c <loadPattern(bool)+0x6fc>
    6cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
    6cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    6cfe:	ee17 1a90 	vmov	r1, s15
    6d02:	4817      	ldr	r0, [pc, #92]	; (6d60 <loadPattern(bool)+0x700>)
    6d04:	f005 ff03 	bl	cb0e <AudioControlSGTL5000::volumeInteger(unsigned int)>
    6d08:	e581      	b.n	680e <loadPattern(bool)+0x1ae>
    for (unsigned int nx = 1; nx < maxlen; nx++) {
    6d0a:	3288      	adds	r2, #136	; 0x88
    6d0c:	4594      	cmp	ip, r2
    6d0e:	d095      	beq.n	6c3c <loadPattern(bool)+0x5dc>
      for (unsigned int ny = 1; ny < maxY + 1; ny++) {
    6d10:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
        note[nx][ny][0] = 0;
    6d14:	6098      	str	r0, [r3, #8]
        note[nx][ny][1] = defaultVelocity;
    6d16:	60d9      	str	r1, [r3, #12]
      for (unsigned int ny = 1; ny < maxY + 1; ny++) {
    6d18:	3308      	adds	r3, #8
    6d1a:	4293      	cmp	r3, r2
    6d1c:	d1fa      	bne.n	6d14 <loadPattern(bool)+0x6b4>
    6d1e:	e7f4      	b.n	6d0a <loadPattern(bool)+0x6aa>
    delay(500);
    6d20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    6d24:	f00f ffa6 	bl	16c74 <delay>
    switchMode(&draw);
    6d28:	480e      	ldr	r0, [pc, #56]	; (6d64 <loadPattern(bool)+0x704>)
    6d2a:	f7fc ffb7 	bl	3c9c <switchMode(Mode*)>
}
    6d2e:	e789      	b.n	6c44 <loadPattern(bool)+0x5e4>
        if (b == 0xFF && loadFile.peek() == 0xFE) {
    6d30:	46c8      	mov	r8, r9
    6d32:	e7af      	b.n	6c94 <loadPattern(bool)+0x634>
    6d34:	20000b4c 	.word	0x20000b4c
    6d38:	20000b50 	.word	0x20000b50
    6d3c:	20000b54 	.word	0x20000b54
    6d40:	20000b5c 	.word	0x20000b5c
    6d44:	20000b68 	.word	0x20000b68
    6d48:	20000b74 	.word	0x20000b74
    6d4c:	20002750 	.word	0x20002750
    6d50:	70000000 	.word	0x70000000
    6d54:	20005c4c 	.word	0x20005c4c
    6d58:	43010000 	.word	0x43010000
    6d5c:	3eff7cee 	.word	0x3eff7cee
    6d60:	200085cc 	.word	0x200085cc
    6d64:	20005808 	.word	0x20005808

00006d68 <autoLoad()>:
void autoLoad() {
    6d68:	b508      	push	{r3, lr}
  loadPattern(true);
    6d6a:	2001      	movs	r0, #1
    6d6c:	f7ff fc78 	bl	6660 <loadPattern(bool)>
}
    6d70:	bd08      	pop	{r3, pc}
	...

00006d74 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()>:
template<class TAudioPlay, class TSamplePlay>
class audiosampler : public basesampler<TAudioPlay, audiosample> {
public:
    using __base = basesampler<TAudioPlay, audiosample>;

    audiosampler() : __base() {
    6d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d76:	b08b      	sub	sp, #44	; 0x2c
    6d78:	4604      	mov	r4, r0
    basesampler() : _polysampler() {
    6d7a:	2500      	movs	r5, #0
    6d7c:	7005      	strb	r5, [r0, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
    6d7e:	6045      	str	r5, [r0, #4]
    6d80:	6085      	str	r5, [r0, #8]
    6d82:	60c5      	str	r5, [r0, #12]
      : _Function_base() { }
    6d84:	6105      	str	r5, [r0, #16]
    6d86:	6145      	str	r5, [r0, #20]
    6d88:	6185      	str	r5, [r0, #24]
    6d8a:	61c5      	str	r5, [r0, #28]
    polyphonicsampler() : _numVoices(0) {
    6d8c:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    6d90:	2640      	movs	r6, #64	; 0x40
    6d92:	4632      	mov	r2, r6
    6d94:	4629      	mov	r1, r5
    6d96:	30b4      	adds	r0, #180	; 0xb4
    6d98:	f01c f95e 	bl	23058 <memset>
    6d9c:	4632      	mov	r2, r6
    6d9e:	4629      	mov	r1, r5
    6da0:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    6da4:	f01c f958 	bl	23058 <memset>
        for (int i=0; i < 128; i++)
    6da8:	f104 031f 	add.w	r3, r4, #31
    6dac:	f104 019f 	add.w	r1, r4, #159	; 0x9f
          activeNotes[i] = 255;
    6db0:	22ff      	movs	r2, #255	; 0xff
    6db2:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (int i=0; i < 128; i++)
    6db6:	4299      	cmp	r1, r3
    6db8:	d1fb      	bne.n	6db2 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()+0x3e>
    6dba:	2300      	movs	r3, #0
    6dbc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
    6dc0:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
    6dc4:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
	: _Function_base()
    6dc8:	9303      	str	r3, [sp, #12]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
    6dca:	9402      	str	r4, [sp, #8]
	      _M_invoker = &_My_handler::_M_invoke;
    6dcc:	4e10      	ldr	r6, [pc, #64]	; (6e10 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()+0x9c>)
    6dce:	9605      	str	r6, [sp, #20]
	      _M_manager = &_My_handler::_M_manager;
    6dd0:	4f10      	ldr	r7, [pc, #64]	; (6e14 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()+0xa0>)
    6dd2:	9704      	str	r7, [sp, #16]
      : _Function_base()
    6dd4:	ad06      	add	r5, sp, #24
    6dd6:	9306      	str	r3, [sp, #24]
    6dd8:	9307      	str	r3, [sp, #28]
    6dda:	9308      	str	r3, [sp, #32]
    6ddc:	9309      	str	r3, [sp, #36]	; 0x24
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
    6dde:	2202      	movs	r2, #2
    6de0:	a902      	add	r1, sp, #8
    6de2:	4628      	mov	r0, r5
    6de4:	f7f9 fa97 	bl	316 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    6de8:	466b      	mov	r3, sp
    6dea:	e895 0003 	ldmia.w	r5, {r0, r1}
    6dee:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
    6df2:	f104 0210 	add.w	r2, r4, #16
    6df6:	e882 0003 	stmia.w	r2, {r0, r1}
    6dfa:	61a7      	str	r7, [r4, #24]
    6dfc:	61e6      	str	r6, [r4, #28]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    6dfe:	2203      	movs	r2, #3
    6e00:	a902      	add	r1, sp, #8
    6e02:	4608      	mov	r0, r1
    6e04:	f7f9 fa87 	bl	316 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
        __base::_polysampler.setNoteEventCallback( [&] (uint8_t voice, uint8_t noteNumber, uint8_t velocity, bool isNoteOn, bool retrigger) {
            noteEventCallback(voice, noteNumber, velocity, isNoteOn, retrigger);
        });
    }
    6e08:	4620      	mov	r0, r4
    6e0a:	b00b      	add	sp, #44	; 0x2c
    6e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6e0e:	bf00      	nop
    6e10:	00007199 	.word	0x00007199
    6e14:	00000317 	.word	0x00000317

00006e18 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()>:
    void initializeInterpolationPoints(void) {
    6e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (_numChannels < 0) return;
    6e1a:	f9b0 304c 	ldrsh.w	r3, [r0, #76]	; 0x4c
    6e1e:	2b00      	cmp	r3, #0
    6e20:	db44      	blt.n	6eac <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x94>
    6e22:	4605      	mov	r5, r0
        if (!_interpolationPoints) return;
    6e24:	6e00      	ldr	r0, [r0, #96]	; 0x60
    6e26:	b1c8      	cbz	r0, 6e5c <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x44>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    6e28:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    6e2c:	b183      	cbz	r3, 6e50 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x38>
    6e2e:	2400      	movs	r4, #0
    6e30:	e004      	b.n	6e3c <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x24>
    6e32:	3401      	adds	r4, #1
    6e34:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    6e38:	429c      	cmp	r4, r3
    6e3a:	da07      	bge.n	6e4c <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x34>
            delete [] _interpolationPoints[i];
    6e3c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6e3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    6e42:	2800      	cmp	r0, #0
    6e44:	d0f5      	beq.n	6e32 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x1a>
    6e46:	f010 faf9 	bl	1743c <operator delete[](void*)>
    6e4a:	e7f2      	b.n	6e32 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x1a>
        delete [] _interpolationPoints;
    6e4c:	6e28      	ldr	r0, [r5, #96]	; 0x60
    6e4e:	b108      	cbz	r0, 6e54 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x3c>
    6e50:	f010 faf4 	bl	1743c <operator delete[](void*)>
        _interpolationPoints = nullptr;
    6e54:	2300      	movs	r3, #0
    6e56:	662b      	str	r3, [r5, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
    6e58:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
        _interpolationPoints = new InterpolationData*[_numChannels];
    6e5c:	f9b5 004c 	ldrsh.w	r0, [r5, #76]	; 0x4c
    6e60:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    6e64:	4298      	cmp	r0, r3
    6e66:	bf34      	ite	cc
    6e68:	0080      	lslcc	r0, r0, #2
    6e6a:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
    6e6e:	f010 fadd 	bl	1742c <operator new[](unsigned int)>
    6e72:	6628      	str	r0, [r5, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {      
    6e74:	f9b5 304c 	ldrsh.w	r3, [r5, #76]	; 0x4c
    6e78:	2b00      	cmp	r3, #0
    6e7a:	dd15      	ble.n	6ea8 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x90>
    6e7c:	2400      	movs	r4, #0
            InterpolationData *interpolation = new InterpolationData[4];
    6e7e:	2710      	movs	r7, #16
            interpolation[0].y = 0.0;
    6e80:	4626      	mov	r6, r4
            InterpolationData *interpolation = new InterpolationData[4];
    6e82:	4638      	mov	r0, r7
    6e84:	f010 fad2 	bl	1742c <operator new[](unsigned int)>
            if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    6e88:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6e8a:	b17b      	cbz	r3, 6eac <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x94>
    6e8c:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    6e90:	b162      	cbz	r2, 6eac <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x94>
            interpolation[0].y = 0.0;
    6e92:	8046      	strh	r6, [r0, #2]
            interpolation[1].y = 0.0;    
    6e94:	80c6      	strh	r6, [r0, #6]
            interpolation[2].y = 0.0;    
    6e96:	8146      	strh	r6, [r0, #10]
            interpolation[3].y = 0.0;
    6e98:	81c6      	strh	r6, [r0, #14]
            _interpolationPoints[channel] = interpolation ;
    6e9a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
        for (int channel=0; channel < _numChannels; channel++) {      
    6e9e:	3401      	adds	r4, #1
    6ea0:	f9b5 304c 	ldrsh.w	r3, [r5, #76]	; 0x4c
    6ea4:	42a3      	cmp	r3, r4
    6ea6:	dcec      	bgt.n	6e82 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()+0x6a>
        _numInterpolationPointsChannels = _numChannels;
    6ea8:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    }
    6eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006eae <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)>:
    static void play(uint8_t noteNumber, audiovoice<AudioPlayArrayResmp> *voice, audiosample *sample) {
    6eae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6eb0:	460d      	mov	r5, r1
    6eb2:	4614      	mov	r4, r2
        float result = powf(2.0, (note-rootNoteNumber) / 12.0);
    6eb4:	7813      	ldrb	r3, [r2, #0]
    6eb6:	1ac0      	subs	r0, r0, r3
    6eb8:	ee07 0a90 	vmov	s15, r0
    6ebc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    6ec0:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
    6ec4:	ee87 6b05 	vdiv.f64	d6, d7, d5
    6ec8:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    6ecc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    6ed0:	f012 fa5a 	bl	19388 <powf>
        bool playWav(const unsigned int *data, uint32_t fileSize) {
            return playWav((int16_t *) data, fileSize);
        }

        void setPlaybackRate(float f) {
            reader->setPlaybackRate(f);
    6ed4:	682b      	ldr	r3, [r5, #0]
    6ed6:	699b      	ldr	r3, [r3, #24]
    6ed8:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    6edc:	ed83 7b04 	vstr	d7, [r3, #16]
        if (!_useDualPlaybackHead) {
    6ee0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
    6ee4:	b982      	cbnz	r2, 6f08 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
                if (f >= 0.0 && _bufferPosition1 < _header_offset) {
    6ee6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    6eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6eee:	db1c      	blt.n	6f2a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x7c>
    6ef0:	68da      	ldr	r2, [r3, #12]
    6ef2:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6ef4:	4291      	cmp	r1, r2
    6ef6:	da18      	bge.n	6f2a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x7c>
                    if (_play_start == play_start::play_start_sample) 
    6ef8:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
    6efc:	b909      	cbnz	r1, 6f02 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x54>
                        _bufferPosition1 = _header_offset;
    6efe:	625a      	str	r2, [r3, #36]	; 0x24
    6f00:	e013      	b.n	6f2a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x7c>
                        _bufferPosition1 = _loop_start;
    6f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6f04:	625a      	str	r2, [r3, #36]	; 0x24
    6f06:	e010      	b.n	6f2a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x7c>
            if (_crossfade == 0.0) {
    6f08:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
    6f0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
    6f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f14:	d109      	bne.n	6f2a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x7c>
                    if (f >= 0.0 && _bufferPosition1 < _header_offset) {
    6f16:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    6f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f1e:	db04      	blt.n	6f2a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x7c>
    6f20:	68da      	ldr	r2, [r3, #12]
    6f22:	6a59      	ldr	r1, [r3, #36]	; 0x24
    6f24:	4291      	cmp	r1, r2
                        _bufferPosition1 = _header_offset;
    6f26:	bfb8      	it	lt
    6f28:	625a      	strlt	r2, [r3, #36]	; 0x24
        voice->_audioplayarray->playRaw(sample->_data, sample->_sampleLength, sample->_numChannels);
    6f2a:	6829      	ldr	r1, [r5, #0]
    6f2c:	6865      	ldr	r5, [r4, #4]
    6f2e:	68a2      	ldr	r2, [r4, #8]
    6f30:	89a3      	ldrh	r3, [r4, #12]
        bool isPlaying(void) {
            return reader->isPlaying();
        };

        void stop() {
            reader->stop();
    6f32:	6988      	ldr	r0, [r1, #24]
        if (_playing) {   
    6f34:	7904      	ldrb	r4, [r0, #4]
    6f36:	b10c      	cbz	r4, 6f3c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x8e>
            _playing = false;
    6f38:	2400      	movs	r4, #0
    6f3a:	7104      	strb	r4, [r0, #4]
            return reader->playRaw(data, numSamples, numChannels);
    6f3c:	698c      	ldr	r4, [r1, #24]
        _sourceBuffer = array;
    6f3e:	6565      	str	r5, [r4, #84]	; 0x54
        if (_playing) {   
    6f40:	7921      	ldrb	r1, [r4, #4]
    6f42:	b109      	cbz	r1, 6f48 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x9a>
            _playing = false;
    6f44:	2100      	movs	r1, #0
    6f46:	7121      	strb	r1, [r4, #4]
        _header_offset = 0;
    6f48:	2100      	movs	r1, #0
    6f4a:	60e1      	str	r1, [r4, #12]
        _file_size = length * 2;
    6f4c:	0050      	lsls	r0, r2, #1
    6f4e:	60a0      	str	r0, [r4, #8]
        _loop_start = 0;
    6f50:	6461      	str	r1, [r4, #68]	; 0x44
        _loop_finish = length;
    6f52:	64a2      	str	r2, [r4, #72]	; 0x48
        if (numChannels != _numChannels) {
    6f54:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    6f58:	4293      	cmp	r3, r2
    6f5a:	d119      	bne.n	6f90 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xe2>
        if (_interpolationType != ResampleInterpolationType::resampleinterpolation_none) {
    6f5c:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    6f60:	2b01      	cmp	r3, #1
    6f62:	d161      	bne.n	7028 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x17a>
        _numInterpolationPoints = 0;
    6f64:	2300      	movs	r3, #0
    6f66:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (_playbackRate > 0.0) {
    6f68:	ed94 7b04 	vldr	d7, [r4, #16]
    6f6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    6f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6f74:	dd5e      	ble.n	7034 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x186>
            if (_play_start == play_start::play_start_sample)
    6f76:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    6f7a:	2b00      	cmp	r3, #0
    6f7c:	d158      	bne.n	7030 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x182>
                _bufferPosition1 = _header_offset;
    6f7e:	68e3      	ldr	r3, [r4, #12]
    6f80:	6263      	str	r3, [r4, #36]	; 0x24
        _crossfade = 0.0;
    6f82:	2200      	movs	r2, #0
    6f84:	2300      	movs	r3, #0
    6f86:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
        _playing = true;
    6f8a:	2301      	movs	r3, #1
    6f8c:	7123      	strb	r3, [r4, #4]
    }
    6f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _numChannels = numChannels;
    6f90:	b21b      	sxth	r3, r3
    6f92:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
        if (_numChannels < 0) return;
    6f96:	428b      	cmp	r3, r1
    6f98:	dbe0      	blt.n	6f5c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xae>
        if (!_interpolationPoints) return;
    6f9a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6f9c:	b1c8      	cbz	r0, 6fd2 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x124>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    6f9e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    6fa2:	b183      	cbz	r3, 6fc6 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x118>
    6fa4:	460d      	mov	r5, r1
    6fa6:	e006      	b.n	6fb6 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x108>
            delete [] _interpolationPoints[i];
    6fa8:	f010 fa48 	bl	1743c <operator delete[](void*)>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    6fac:	3501      	adds	r5, #1
    6fae:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    6fb2:	429d      	cmp	r5, r3
    6fb4:	da05      	bge.n	6fc2 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x114>
            delete [] _interpolationPoints[i];
    6fb6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    6fb8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
    6fbc:	2800      	cmp	r0, #0
    6fbe:	d1f3      	bne.n	6fa8 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xfa>
    6fc0:	e7f4      	b.n	6fac <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xfe>
        delete [] _interpolationPoints;
    6fc2:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6fc4:	b108      	cbz	r0, 6fca <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x11c>
    6fc6:	f010 fa39 	bl	1743c <operator delete[](void*)>
        _interpolationPoints = nullptr;
    6fca:	2300      	movs	r3, #0
    6fcc:	6623      	str	r3, [r4, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
    6fce:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        _interpolationPoints = new InterpolationData*[_numChannels];
    6fd2:	f9b4 004c 	ldrsh.w	r0, [r4, #76]	; 0x4c
    6fd6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
    6fda:	4298      	cmp	r0, r3
    6fdc:	bf34      	ite	cc
    6fde:	0080      	lslcc	r0, r0, #2
    6fe0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
    6fe4:	f010 fa22 	bl	1742c <operator new[](unsigned int)>
    6fe8:	6620      	str	r0, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {      
    6fea:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    6fee:	2b00      	cmp	r3, #0
    6ff0:	dd17      	ble.n	7022 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x174>
    6ff2:	2500      	movs	r5, #0
            InterpolationData *interpolation = new InterpolationData[4];
    6ff4:	2710      	movs	r7, #16
            interpolation[0].y = 0.0;
    6ff6:	462e      	mov	r6, r5
            InterpolationData *interpolation = new InterpolationData[4];
    6ff8:	4638      	mov	r0, r7
    6ffa:	f010 fa17 	bl	1742c <operator new[](unsigned int)>
            if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    6ffe:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7000:	2b00      	cmp	r3, #0
    7002:	d0ab      	beq.n	6f5c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xae>
    7004:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
    7008:	2a00      	cmp	r2, #0
    700a:	d0a7      	beq.n	6f5c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xae>
            interpolation[0].y = 0.0;
    700c:	8046      	strh	r6, [r0, #2]
            interpolation[1].y = 0.0;    
    700e:	80c6      	strh	r6, [r0, #6]
            interpolation[2].y = 0.0;    
    7010:	8146      	strh	r6, [r0, #10]
            interpolation[3].y = 0.0;
    7012:	81c6      	strh	r6, [r0, #14]
            _interpolationPoints[channel] = interpolation ;
    7014:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
        for (int channel=0; channel < _numChannels; channel++) {      
    7018:	3501      	adds	r5, #1
    701a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    701e:	429d      	cmp	r5, r3
    7020:	dbea      	blt.n	6ff8 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x14a>
        _numInterpolationPointsChannels = _numChannels;
    7022:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    7026:	e799      	b.n	6f5c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xae>
            initializeInterpolationPoints();
    7028:	4620      	mov	r0, r4
    702a:	f7ff fef5 	bl	6e18 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()>
    702e:	e799      	b.n	6f64 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xb6>
                _bufferPosition1 = _loop_start;
    7030:	6c63      	ldr	r3, [r4, #68]	; 0x44
    7032:	e7a5      	b.n	6f80 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xd2>
            if (_play_start == play_start::play_start_sample)
    7034:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    7038:	b943      	cbnz	r3, 704c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x19e>
                _bufferPosition1 = _file_size/2 - _numChannels;
    703a:	68a2      	ldr	r2, [r4, #8]
    703c:	2a00      	cmp	r2, #0
    703e:	bfb8      	it	lt
    7040:	3201      	addlt	r2, #1
    7042:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    7046:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    704a:	e799      	b.n	6f80 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xd2>
                _bufferPosition1 = _loop_finish - _numChannels;
    704c:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    7050:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    7052:	1a9b      	subs	r3, r3, r2
    7054:	e794      	b.n	6f80 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xd2>
	...

00007058 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)>:
        audiosample *newSample = new audiosample(noteNumber, filename);
        __base::addSample(newSample);
    }

 protected:
    void noteEventCallback(uint8_t voice, uint8_t noteNumber, uint8_t velocity, bool isNoteOn, bool retrigger)    
    7058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    705a:	4614      	mov	r4, r2
    705c:	f89d 6018 	ldrb.w	r6, [sp, #24]
    {
        uint8_t numVoices = __base::_numVoices;
        if (voice < numVoices) {
    7060:	7802      	ldrb	r2, [r0, #0]
    7062:	428a      	cmp	r2, r1
    7064:	d97e      	bls.n	7164 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x10c>
            audiovoice<TAudioPlay> *audio_voice = __base::_voices[voice];
    7066:	6842      	ldr	r2, [r0, #4]
    7068:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
            if (isNoteOn) {
    706c:	2e00      	cmp	r6, #0
    706e:	d07a      	beq.n	7166 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x10e>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
    7070:	f8d0 1134 	ldr.w	r1, [r0, #308]	; 0x134
    7074:	f8d0 7138 	ldr.w	r7, [r0, #312]	; 0x138
    }

    audiosample* findNearestSampleForKey(uint8_t noteNumber) {
        uint8_t smallestDiff = 255;
        audiosample *candidate = nullptr;
        for (auto &&x : __base::_audiosamples) {
    7078:	42b9      	cmp	r1, r7
    707a:	d073      	beq.n	7164 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x10c>
    707c:	468c      	mov	ip, r1
        audiosample *candidate = nullptr;
    707e:	2600      	movs	r6, #0
        uint8_t smallestDiff = 255;
    7080:	20ff      	movs	r0, #255	; 0xff
    7082:	e001      	b.n	7088 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x30>
        for (auto &&x : __base::_audiosamples) {
    7084:	45bc      	cmp	ip, r7
    7086:	d00c      	beq.n	70a2 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x4a>
            uint8_t diff = abs(x->_noteNumber - noteNumber);
    7088:	f85c 2b04 	ldr.w	r2, [ip], #4
    708c:	7811      	ldrb	r1, [r2, #0]
    708e:	1b09      	subs	r1, r1, r4
    7090:	2900      	cmp	r1, #0
    7092:	bfb8      	it	lt
    7094:	4249      	neglt	r1, r1
    7096:	b2c9      	uxtb	r1, r1
            if (diff < smallestDiff) {
    7098:	4281      	cmp	r1, r0
    709a:	d2f3      	bcs.n	7084 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x2c>
                smallestDiff = diff;
                candidate = x;
    709c:	4616      	mov	r6, r2
                smallestDiff = diff;
    709e:	4608      	mov	r0, r1
    70a0:	e7f0      	b.n	7084 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x2c>
                if (nearestSample != nullptr) {
    70a2:	2e00      	cmp	r6, #0
    70a4:	d05e      	beq.n	7164 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x10c>
                    if (audio_voice->_audiomixer != nullptr) {                        
    70a6:	68e9      	ldr	r1, [r5, #12]
    70a8:	b331      	cbz	r1, 70f8 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xa0>
                        audio_voice->_audiomixer->gain( audio_voice->_mixerChannel, velocity / 255.0);
    70aa:	7d2a      	ldrb	r2, [r5, #20]
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
    70ac:	2a03      	cmp	r2, #3
    70ae:	d84c      	bhi.n	714a <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xf2>
    70b0:	ee07 3a90 	vmov	s15, r3
    70b4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    70b8:	ed9f 6b33 	vldr	d6, [pc, #204]	; 7188 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x130>
    70bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
    70c0:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
		if (gain > 32767.0f) gain = 32767.0f;
    70c4:	eddf 7a32 	vldr	s15, [pc, #200]	; 7190 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x138>
    70c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    70cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70d0:	dc09      	bgt.n	70e6 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x8e>
		else if (gain < -32767.0f) gain = -32767.0f;
    70d2:	eddf 7a30 	vldr	s15, [pc, #192]	; 7194 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x13c>
    70d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
    70da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    70de:	d504      	bpl.n	70ea <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x92>
    70e0:	eeb0 7a67 	vmov.f32	s14, s15
    70e4:	e001      	b.n	70ea <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x92>
		if (gain > 32767.0f) gain = 32767.0f;
    70e6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 7190 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x138>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    70ea:	3206      	adds	r2, #6
    70ec:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    70f0:	ee17 0a10 	vmov	r0, s14
    70f4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
                    if (audio_voice->_audiomixer2 != nullptr) {                        
    70f8:	6929      	ldr	r1, [r5, #16]
    70fa:	b331      	cbz	r1, 714a <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xf2>
                        audio_voice->_audiomixer2->gain(audio_voice->_mixerChannel, velocity / 255.0);
    70fc:	7d2a      	ldrb	r2, [r5, #20]
    70fe:	ee07 3a90 	vmov	s15, r3
    7102:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    7106:	ed9f 5b20 	vldr	d5, [pc, #128]	; 7188 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x130>
    710a:	ee87 6b05 	vdiv.f64	d6, d7, d5
    710e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
		if (channel >= 4) return;
    7112:	2a03      	cmp	r2, #3
    7114:	d819      	bhi.n	714a <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xf2>
		if (gain > 32767.0f) gain = 32767.0f;
    7116:	eddf 7a1e 	vldr	s15, [pc, #120]	; 7190 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x138>
    711a:	eeb4 6ae7 	vcmpe.f32	s12, s15
    711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7122:	dc09      	bgt.n	7138 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xe0>
		else if (gain < -32767.0f) gain = -32767.0f;
    7124:	eddf 7a1b 	vldr	s15, [pc, #108]	; 7194 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x13c>
    7128:	eeb4 6ae7 	vcmpe.f32	s12, s15
    712c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7130:	d504      	bpl.n	713c <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xe4>
    7132:	eeb0 6a67 	vmov.f32	s12, s15
    7136:	e001      	b.n	713c <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xe4>
		if (gain > 32767.0f) gain = 32767.0f;
    7138:	ed9f 6a15 	vldr	s12, [pc, #84]	; 7190 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x138>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    713c:	3206      	adds	r2, #6
    713e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
    7142:	ee16 3a10 	vmov	r3, s12
    7146:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                    if (audio_voice->_audioenvelop != nullptr) {
    714a:	6868      	ldr	r0, [r5, #4]
    714c:	b108      	cbz	r0, 7152 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0xfa>
                       audio_voice->_audioenvelop->noteOn();
    714e:	f005 fe09 	bl	cd64 <AudioEffectEnvelope::noteOn()>
                    if (audio_voice->_audioenvelop2 != nullptr) {
    7152:	68a8      	ldr	r0, [r5, #8]
    7154:	b108      	cbz	r0, 715a <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x102>
                        audio_voice->_audioenvelop2->noteOn();
    7156:	f005 fe05 	bl	cd64 <AudioEffectEnvelope::noteOn()>
                    TSamplePlay::play(noteNumber, audio_voice, nearestSample);
    715a:	4632      	mov	r2, r6
    715c:	4629      	mov	r1, r5
    715e:	4620      	mov	r0, r4
    7160:	f7ff fea5 	bl	6eae <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)>
    }
    7164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (audio_voice->_audioenvelop != nullptr) {
    7166:	686b      	ldr	r3, [r5, #4]
    7168:	b123      	cbz	r3, 7174 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x11c>
		release_count = milliseconds2count(milliseconds);
    716a:	220b      	movs	r2, #11
    716c:	869a      	strh	r2, [r3, #52]	; 0x34
                    audio_voice->_audioenvelop->noteOff();
    716e:	6868      	ldr	r0, [r5, #4]
    7170:	f005 fe1e 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
                if (audio_voice->_audioenvelop2 != nullptr) {
    7174:	68ab      	ldr	r3, [r5, #8]
    7176:	2b00      	cmp	r3, #0
    7178:	d0f4      	beq.n	7164 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x10c>
                    audio_voice->_audioenvelop->release(2); 
    717a:	686b      	ldr	r3, [r5, #4]
    717c:	220b      	movs	r2, #11
    717e:	869a      	strh	r2, [r3, #52]	; 0x34
                    audio_voice->_audioenvelop2->noteOff();
    7180:	68a8      	ldr	r0, [r5, #8]
    7182:	f005 fe15 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
    }
    7186:	e7ed      	b.n	7164 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)+0x10c>
    7188:	00000000 	.word	0x00000000
    718c:	406fe000 	.word	0x406fe000
    7190:	46fffe00 	.word	0x46fffe00
    7194:	c6fffe00 	.word	0xc6fffe00

00007198 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    7198:	b510      	push	{r4, lr}
    719a:	b082      	sub	sp, #8
            noteEventCallback(voice, noteNumber, velocity, isNoteOn, retrigger);
    719c:	781b      	ldrb	r3, [r3, #0]
    719e:	7812      	ldrb	r2, [r2, #0]
    71a0:	7809      	ldrb	r1, [r1, #0]
    71a2:	6800      	ldr	r0, [r0, #0]
    71a4:	9c05      	ldr	r4, [sp, #20]
    71a6:	7824      	ldrb	r4, [r4, #0]
    71a8:	9401      	str	r4, [sp, #4]
    71aa:	9c04      	ldr	r4, [sp, #16]
    71ac:	7824      	ldrb	r4, [r4, #0]
    71ae:	9400      	str	r4, [sp, #0]
    71b0:	f7ff ff52 	bl	7058 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::noteEventCallback(unsigned char, unsigned char, unsigned char, bool, bool)>
      }
    71b4:	b002      	add	sp, #8
    71b6:	bd10      	pop	{r4, pc}

000071b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    71b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    71bc:	468a      	mov	sl, r1
    71be:	4693      	mov	fp, r2

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    71c0:	6847      	ldr	r7, [r0, #4]
    71c2:	f8d0 8000 	ldr.w	r8, [r0]
    71c6:	eba7 0208 	sub.w	r2, r7, r8

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    71ca:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    71ce:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    71d2:	d011      	beq.n	71f8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x40>
    71d4:	4605      	mov	r5, r0
    71d6:	1093      	asrs	r3, r2, #2
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
    71d8:	2b01      	cmp	r3, #1
    71da:	bf2c      	ite	cs
    71dc:	18da      	addcs	r2, r3, r3
    71de:	1c5a      	addcc	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    71e0:	4293      	cmp	r3, r2
    71e2:	d81c      	bhi.n	721e <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x66>
    71e4:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
    71e8:	4591      	cmp	r9, r2
    71ea:	bf28      	it	cs
    71ec:	4691      	movcs	r9, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    71ee:	ebaa 0408 	sub.w	r4, sl, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    71f2:	b9c2      	cbnz	r2, 7226 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x6e>
    71f4:	2600      	movs	r6, #0
    71f6:	e01b      	b.n	7230 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x78>
	  __throw_length_error(__N(__s));
    71f8:	481e      	ldr	r0, [pc, #120]	; (7274 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xbc>)
    71fa:	f012 fad3 	bl	197a4 <std::__throw_length_error(char const*)>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    71fe:	4622      	mov	r2, r4
    7200:	4641      	mov	r1, r8
    7202:	4630      	mov	r0, r6
    7204:	f01b feac 	bl	22f60 <memmove>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    7208:	3404      	adds	r4, #4
    720a:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
    720c:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
    7210:	2f00      	cmp	r7, #0
    7212:	dc18      	bgt.n	7246 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x8e>
      return __result + __count;
    7214:	443c      	add	r4, r7
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
    7216:	68a9      	ldr	r1, [r5, #8]
    7218:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    721c:	e01f      	b.n	725e <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xa6>
    721e:	ebaa 0408 	sub.w	r4, sl, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    7222:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    7226:	ea4f 0089 	mov.w	r0, r9, lsl #2
    722a:	f010 f8fb 	bl	17424 <operator new(unsigned int)>
    722e:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    7230:	f8db 3000 	ldr.w	r3, [fp]
    7234:	5133      	str	r3, [r6, r4]
      if (__count > 0)
    7236:	2c00      	cmp	r4, #0
    7238:	dce1      	bgt.n	71fe <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x46>
	      ++__new_finish;
    723a:	3404      	adds	r4, #4
    723c:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
    723e:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
    7242:	2f00      	cmp	r7, #0
    7244:	dd04      	ble.n	7250 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x98>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    7246:	463a      	mov	r2, r7
    7248:	4651      	mov	r1, sl
    724a:	4620      	mov	r0, r4
    724c:	f010 f850 	bl	172f0 <memcpy>
      return __result + __count;
    7250:	443c      	add	r4, r7
	if (__p)
    7252:	f1b8 0f00 	cmp.w	r8, #0
    7256:	d005      	beq.n	7264 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
    7258:	68a9      	ldr	r1, [r5, #8]
    725a:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    725e:	4640      	mov	r0, r8
    7260:	f010 f8f0 	bl	17444 <operator delete(void*, unsigned int)>
      this->_M_impl._M_start = __new_start;
    7264:	602e      	str	r6, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
    7266:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    7268:	eb06 0689 	add.w	r6, r6, r9, lsl #2
    726c:	60ae      	str	r6, [r5, #8]
    }
    726e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7272:	bf00      	nop
    7274:	200023b8 	.word	0x200023b8

00007278 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)>:
      vector<_Tp, _Alloc>::
    7278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    727c:	468a      	mov	sl, r1
    727e:	4693      	mov	fp, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    7280:	6847      	ldr	r7, [r0, #4]
    7282:	f8d0 8000 	ldr.w	r8, [r0]
    7286:	eba7 0208 	sub.w	r2, r7, r8
	if (max_size() - size() < __n)
    728a:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
    728e:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    7292:	d011      	beq.n	72b8 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x40>
    7294:	4605      	mov	r5, r0
    7296:	1093      	asrs	r3, r2, #2
	const size_type __len = size() + (std::max)(size(), __n);
    7298:	2b01      	cmp	r3, #1
    729a:	bf2c      	ite	cs
    729c:	18da      	addcs	r2, r3, r3
    729e:	1c5a      	addcc	r2, r3, #1
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    72a0:	4293      	cmp	r3, r2
    72a2:	d81c      	bhi.n	72de <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x66>
    72a4:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
    72a8:	4591      	cmp	r9, r2
    72aa:	bf28      	it	cs
    72ac:	4691      	movcs	r9, r2
    72ae:	ebaa 0408 	sub.w	r4, sl, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    72b2:	b9c2      	cbnz	r2, 72e6 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x6e>
    72b4:	2600      	movs	r6, #0
    72b6:	e01b      	b.n	72f0 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x78>
	  __throw_length_error(__N(__s));
    72b8:	481e      	ldr	r0, [pc, #120]	; (7334 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xbc>)
    72ba:	f012 fa73 	bl	197a4 <std::__throw_length_error(char const*)>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    72be:	4622      	mov	r2, r4
    72c0:	4641      	mov	r1, r8
    72c2:	4630      	mov	r0, r6
    72c4:	f01b fe4c 	bl	22f60 <memmove>
	      ++__new_finish;
    72c8:	3404      	adds	r4, #4
    72ca:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
    72cc:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
    72d0:	2f00      	cmp	r7, #0
    72d2:	dc18      	bgt.n	7306 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x8e>
      return __result + __count;
    72d4:	443c      	add	r4, r7
		    this->_M_impl._M_end_of_storage - __old_start);
    72d6:	68a9      	ldr	r1, [r5, #8]
    72d8:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    72dc:	e01f      	b.n	731e <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xa6>
    72de:	ebaa 0408 	sub.w	r4, sl, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
    72e2:	f06f 4960 	mvn.w	r9, #3758096384	; 0xe0000000
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    72e6:	ea4f 0089 	mov.w	r0, r9, lsl #2
    72ea:	f010 f89b 	bl	17424 <operator new(unsigned int)>
    72ee:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    72f0:	f8db 3000 	ldr.w	r3, [fp]
    72f4:	5133      	str	r3, [r6, r4]
      if (__count > 0)
    72f6:	2c00      	cmp	r4, #0
    72f8:	dce1      	bgt.n	72be <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x46>
	      ++__new_finish;
    72fa:	3404      	adds	r4, #4
    72fc:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
    72fe:	eba7 070a 	sub.w	r7, r7, sl
      if (__count > 0)
    7302:	2f00      	cmp	r7, #0
    7304:	dd04      	ble.n	7310 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x98>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    7306:	463a      	mov	r2, r7
    7308:	4651      	mov	r1, sl
    730a:	4620      	mov	r0, r4
    730c:	f00f fff0 	bl	172f0 <memcpy>
      return __result + __count;
    7310:	443c      	add	r4, r7
	if (__p)
    7312:	f1b8 0f00 	cmp.w	r8, #0
    7316:	d005      	beq.n	7324 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
    7318:	68a9      	ldr	r1, [r5, #8]
    731a:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    731e:	4640      	mov	r0, r8
    7320:	f010 f890 	bl	17444 <operator delete(void*, unsigned int)>
      this->_M_impl._M_start = __new_start;
    7324:	602e      	str	r6, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
    7326:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
    7328:	eb06 0689 	add.w	r6, r6, r9, lsl #2
    732c:	60ae      	str	r6, [r5, #8]
    }
    732e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7332:	bf00      	nop
    7334:	200023b8 	.word	0x200023b8

00007338 <loadSample(unsigned int, unsigned int)>:
void loadSample(unsigned int packID, unsigned int sampleID) {
    7338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    733c:	b0a2      	sub	sp, #136	; 0x88
    733e:	4605      	mov	r5, r0
    7340:	460c      	mov	r4, r1
  drawNoSD();
    7342:	f7fd fa99 	bl	4878 <drawNoSD()>
  sprintf(OUTPUTf, "%d/%d.wav", packID, sampleID);
    7346:	4623      	mov	r3, r4
    7348:	462a      	mov	r2, r5
    734a:	499b      	ldr	r1, [pc, #620]	; (75b8 <loadSample(unsigned int, unsigned int)+0x280>)
    734c:	a815      	add	r0, sp, #84	; 0x54
    734e:	f01b f9d7 	bl	22700 <sprintf>
  if (packID == 0) {
    7352:	2d00      	cmp	r5, #0
    7354:	d035      	beq.n	73c2 <loadSample(unsigned int, unsigned int)+0x8a>
    return m_fVol ? m_fVol->exists(path) :
    7356:	4b99      	ldr	r3, [pc, #612]	; (75bc <loadSample(unsigned int, unsigned int)+0x284>)
    7358:	f8d3 1484 	ldr.w	r1, [r3, #1156]	; 0x484
    735c:	2900      	cmp	r1, #0
    735e:	d03c      	beq.n	73da <loadSample(unsigned int, unsigned int)+0xa2>
    7360:	2300      	movs	r3, #0
    7362:	f88d 3008 	strb.w	r3, [sp, #8]
    7366:	f88d 3009 	strb.w	r3, [sp, #9]
    736a:	f88d 300a 	strb.w	r3, [sp, #10]
    736e:	aa15      	add	r2, sp, #84	; 0x54
    7370:	a802      	add	r0, sp, #8
    7372:	f009 fdce 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
  if (!SD.exists(OUTPUTf)) {
    7376:	2800      	cmp	r0, #0
    7378:	d03f      	beq.n	73fa <loadSample(unsigned int, unsigned int)+0xc2>
    SMP.mute[sampleID] = false;
    737a:	f104 0240 	add.w	r2, r4, #64	; 0x40
    737e:	4b90      	ldr	r3, [pc, #576]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    7380:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    7384:	2500      	movs	r5, #0
    7386:	605d      	str	r5, [r3, #4]
  usedFiles[sampleID - 1] = OUTPUTf;
    7388:	1e60      	subs	r0, r4, #1
    738a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    738e:	a915      	add	r1, sp, #84	; 0x54
    7390:	4b8c      	ldr	r3, [pc, #560]	; (75c4 <loadSample(unsigned int, unsigned int)+0x28c>)
    7392:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7396:	f00f fa04 	bl	167a2 <String::operator=(char const*)>
  File loadSample = SD.open(OUTPUTf);
    739a:	462b      	mov	r3, r5
    739c:	aa15      	add	r2, sp, #84	; 0x54
    739e:	4987      	ldr	r1, [pc, #540]	; (75bc <loadSample(unsigned int, unsigned int)+0x284>)
    73a0:	a810      	add	r0, sp, #64	; 0x40
    73a2:	f7fb facf 	bl	2944 <SDClass::open(char const*, unsigned char)>
		return (f) ? f->isOpen() : false;
    73a6:	9814      	ldr	r0, [sp, #80]	; 0x50
    73a8:	b118      	cbz	r0, 73b2 <loadSample(unsigned int, unsigned int)+0x7a>
    73aa:	6803      	ldr	r3, [r0, #0]
    73ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    73ae:	4798      	blx	r3
  if (loadSample) {
    73b0:	bb60      	cbnz	r0, 740c <loadSample(unsigned int, unsigned int)+0xd4>
	virtual ~File() {
    73b2:	4b85      	ldr	r3, [pc, #532]	; (75c8 <loadSample(unsigned int, unsigned int)+0x290>)
    73b4:	9310      	str	r3, [sp, #64]	; 0x40
		if (f) dec_refcount();
    73b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    73b8:	b32b      	cbz	r3, 7406 <loadSample(unsigned int, unsigned int)+0xce>
    73ba:	a810      	add	r0, sp, #64	; 0x40
    73bc:	f7fb faae 	bl	291c <File::dec_refcount()>
    73c0:	e021      	b.n	7406 <loadSample(unsigned int, unsigned int)+0xce>
    sprintf(OUTPUTf, "samples/%d/_%d.wav", getFolderNumber(sampleID), sampleID);
    73c2:	4620      	mov	r0, r4
    73c4:	f7fd f8cc 	bl	4560 <getFolderNumber(int)>
    73c8:	4602      	mov	r2, r0
    73ca:	4623      	mov	r3, r4
    73cc:	497f      	ldr	r1, [pc, #508]	; (75cc <loadSample(unsigned int, unsigned int)+0x294>)
    73ce:	a815      	add	r0, sp, #84	; 0x54
    73d0:	f01b f996 	bl	22700 <sprintf>
    sampleID = SMP.currentChannel;
    73d4:	4b7a      	ldr	r3, [pc, #488]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    73d6:	685c      	ldr	r4, [r3, #4]
    73d8:	e7bd      	b.n	7356 <loadSample(unsigned int, unsigned int)+0x1e>
           m_xVol ? m_xVol->exists(path) : false;
    73da:	4b78      	ldr	r3, [pc, #480]	; (75bc <loadSample(unsigned int, unsigned int)+0x284>)
    73dc:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
    73e0:	b159      	cbz	r1, 73fa <loadSample(unsigned int, unsigned int)+0xc2>
    73e2:	2300      	movs	r3, #0
    73e4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    73e8:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    73ec:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    73f0:	aa15      	add	r2, sp, #84	; 0x54
    73f2:	a802      	add	r0, sp, #8
    73f4:	f007 fde9 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    73f8:	e7bd      	b.n	7376 <loadSample(unsigned int, unsigned int)+0x3e>
    SMP.mute[sampleID] = true;
    73fa:	4b71      	ldr	r3, [pc, #452]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    73fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7400:	2201      	movs	r2, #1
    7402:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
    7406:	b022      	add	sp, #136	; 0x88
    7408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (f) ? f->size() : 0;
    740c:	9814      	ldr	r0, [sp, #80]	; 0x50
    740e:	2800      	cmp	r0, #0
    7410:	d066      	beq.n	74e0 <loadSample(unsigned int, unsigned int)+0x1a8>
    7412:	6803      	ldr	r3, [r0, #0]
    7414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7416:	4798      	blx	r3
    7418:	4605      	mov	r5, r0
    int fileSize = loadSample.size();
    741a:	4606      	mov	r6, r0
		return (f) ? f->seek(pos, mode) : false;
    741c:	9814      	ldr	r0, [sp, #80]	; 0x50
    741e:	b130      	cbz	r0, 742e <loadSample(unsigned int, unsigned int)+0xf6>
    7420:	6803      	ldr	r3, [r0, #0]
    7422:	2200      	movs	r2, #0
    7424:	9200      	str	r2, [sp, #0]
    7426:	6a19      	ldr	r1, [r3, #32]
    7428:	2218      	movs	r2, #24
    742a:	2300      	movs	r3, #0
    742c:	4788      	blx	r1
      int g = loadSample.read();
    742e:	a810      	add	r0, sp, #64	; 0x40
    7430:	f7f8 fec4 	bl	1bc <File::read()>
      if (g == 0)
    7434:	4603      	mov	r3, r0
    7436:	b180      	cbz	r0, 745a <loadSample(unsigned int, unsigned int)+0x122>
      if (g == 17)
    7438:	2b11      	cmp	r3, #17
    743a:	d11d      	bne.n	7478 <loadSample(unsigned int, unsigned int)+0x140>
        SampleRate[sampleID] = 1;
    743c:	4a60      	ldr	r2, [pc, #384]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    743e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    7442:	2101      	movs	r1, #1
    7444:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
      if (g == 72)
    7448:	2b48      	cmp	r3, #72	; 0x48
    744a:	d11d      	bne.n	7488 <loadSample(unsigned int, unsigned int)+0x150>
        SampleRate[sampleID] = 4;
    744c:	4b5c      	ldr	r3, [pc, #368]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    744e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7452:	2204      	movs	r2, #4
    7454:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    7458:	e016      	b.n	7488 <loadSample(unsigned int, unsigned int)+0x150>
        SampleRate[sampleID] = 4;
    745a:	4a59      	ldr	r2, [pc, #356]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    745c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    7460:	2104      	movs	r1, #4
    7462:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
      if (g == 68)
    7466:	2b44      	cmp	r3, #68	; 0x44
    7468:	d1ee      	bne.n	7448 <loadSample(unsigned int, unsigned int)+0x110>
        SampleRate[sampleID] = 3;
    746a:	4b55      	ldr	r3, [pc, #340]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    746c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7470:	2203      	movs	r2, #3
    7472:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
      if (g == 72)
    7476:	e007      	b.n	7488 <loadSample(unsigned int, unsigned int)+0x150>
      if (g == 34)
    7478:	2b22      	cmp	r3, #34	; 0x22
    747a:	d1f4      	bne.n	7466 <loadSample(unsigned int, unsigned int)+0x12e>
        SampleRate[sampleID] = 2;
    747c:	4b50      	ldr	r3, [pc, #320]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    747e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    7482:	2202      	movs	r2, #2
    7484:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    SMP.seek = 0;
    7488:	4b4d      	ldr	r3, [pc, #308]	; (75c0 <loadSample(unsigned int, unsigned int)+0x288>)
    748a:	2200      	movs	r2, #0
    748c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    unsigned int startOffsetBytes = startOffset * PrevSampleRate * 2;  // Convert to bytes (assuming 16-bit samples)
    7490:	4a4f      	ldr	r2, [pc, #316]	; (75d0 <loadSample(unsigned int, unsigned int)+0x298>)
    7492:	6817      	ldr	r7, [r2, #0]
    unsigned int endOffset = 200 * SMP.seekEnd;  // End offset in milliseconds
    7494:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
    if (SMP.seekEnd == 0) {
    7498:	b113      	cbz	r3, 74a0 <loadSample(unsigned int, unsigned int)+0x168>
    unsigned int endOffset = 200 * SMP.seekEnd;  // End offset in milliseconds
    749a:	25c8      	movs	r5, #200	; 0xc8
    749c:	fb03 f505 	mul.w	r5, r3, r5
    unsigned int endOffsetBytes = endOffset * PrevSampleRate * 2;  // Convert to bytes (assuming 16-bit samples)
    74a0:	fb05 f707 	mul.w	r7, r5, r7
    74a4:	007f      	lsls	r7, r7, #1
    endOffsetBytes = min(endOffsetBytes, fileSize - 44);
    74a6:	f1a6 032c 	sub.w	r3, r6, #44	; 0x2c
    74aa:	429f      	cmp	r7, r3
    74ac:	bf28      	it	cs
    74ae:	461f      	movcs	r7, r3
    74b0:	9814      	ldr	r0, [sp, #80]	; 0x50
    74b2:	b130      	cbz	r0, 74c2 <loadSample(unsigned int, unsigned int)+0x18a>
    74b4:	6803      	ldr	r3, [r0, #0]
    74b6:	2200      	movs	r2, #0
    74b8:	9200      	str	r2, [sp, #0]
    74ba:	6a19      	ldr	r1, [r3, #32]
    74bc:	222c      	movs	r2, #44	; 0x2c
    74be:	2300      	movs	r3, #0
    74c0:	4788      	blx	r1
    memset(sampled[sampleID], 0, sizeof(sample_len[sampleID]));
    74c2:	4e44      	ldr	r6, [pc, #272]	; (75d4 <loadSample(unsigned int, unsigned int)+0x29c>)
    74c4:	fb04 f606 	mul.w	r6, r4, r6
    74c8:	4b43      	ldr	r3, [pc, #268]	; (75d8 <loadSample(unsigned int, unsigned int)+0x2a0>)
    74ca:	eb06 0903 	add.w	r9, r6, r3
    74ce:	2500      	movs	r5, #0
    74d0:	519d      	str	r5, [r3, r6]
    while (loadSample.available() && (i < (endOffsetBytes - startOffsetBytes))) {
    74d2:	3e01      	subs	r6, #1
    74d4:	441e      	add	r6, r3
		if (!f) return -1;
    74d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
		if (f->read(&b, 1) < 1) return -1;
    74da:	f04f 0801 	mov.w	r8, #1
    74de:	e015      	b.n	750c <loadSample(unsigned int, unsigned int)+0x1d4>
		return (f) ? f->size() : 0;
    74e0:	2500      	movs	r5, #0
    int fileSize = loadSample.size();
    74e2:	462e      	mov	r6, r5
    74e4:	e7a3      	b.n	742e <loadSample(unsigned int, unsigned int)+0xf6>
		return (f) ? f->available() : 0;
    74e6:	6803      	ldr	r3, [r0, #0]
    74e8:	691b      	ldr	r3, [r3, #16]
    74ea:	4798      	blx	r3
    while (loadSample.available() && (i < (endOffsetBytes - startOffsetBytes))) {
    74ec:	b328      	cbz	r0, 753a <loadSample(unsigned int, unsigned int)+0x202>
    74ee:	42bd      	cmp	r5, r7
    74f0:	d223      	bcs.n	753a <loadSample(unsigned int, unsigned int)+0x202>
		if (!f) return -1;
    74f2:	9814      	ldr	r0, [sp, #80]	; 0x50
    74f4:	b1e8      	cbz	r0, 7532 <loadSample(unsigned int, unsigned int)+0x1fa>
		if (f->read(&b, 1) < 1) return -1;
    74f6:	6803      	ldr	r3, [r0, #0]
    74f8:	689b      	ldr	r3, [r3, #8]
    74fa:	4642      	mov	r2, r8
    74fc:	a902      	add	r1, sp, #8
    74fe:	4798      	blx	r3
    7500:	b1c8      	cbz	r0, 7536 <loadSample(unsigned int, unsigned int)+0x1fe>
		return b;
    7502:	f89d 3008 	ldrb.w	r3, [sp, #8]
      sampled[sampleID][i] = b;
    7506:	f806 3f01 	strb.w	r3, [r6, #1]!
      i++;
    750a:	3501      	adds	r5, #1
		return (f) ? f->available() : 0;
    750c:	9814      	ldr	r0, [sp, #80]	; 0x50
    750e:	2800      	cmp	r0, #0
    7510:	d1e9      	bne.n	74e6 <loadSample(unsigned int, unsigned int)+0x1ae>
    i = i / 2;
    7512:	086d      	lsrs	r5, r5, #1
    _samplers[sampleID].removeAllSamples();
    7514:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    7518:	01a7      	lsls	r7, r4, #6
    751a:	4e30      	ldr	r6, [pc, #192]	; (75dc <loadSample(unsigned int, unsigned int)+0x2a4>)
    751c:	eb06 1684 	add.w	r6, r6, r4, lsl #6
      : _M_current(__i) { }
    7520:	f8d6 4134 	ldr.w	r4, [r6, #308]	; 0x134
    7524:	f8d6 8138 	ldr.w	r8, [r6, #312]	; 0x138
        for (auto && sample : _audiosamples) {
    7528:	4544      	cmp	r4, r8
    752a:	d01a      	beq.n	7562 <loadSample(unsigned int, unsigned int)+0x22a>
            delete sample;
    752c:	f04f 0a14 	mov.w	sl, #20
    7530:	e00f      	b.n	7552 <loadSample(unsigned int, unsigned int)+0x21a>
		if (!f) return -1;
    7532:	4653      	mov	r3, sl
    7534:	e7e7      	b.n	7506 <loadSample(unsigned int, unsigned int)+0x1ce>
		if (f->read(&b, 1) < 1) return -1;
    7536:	4653      	mov	r3, sl
    7538:	e7e5      	b.n	7506 <loadSample(unsigned int, unsigned int)+0x1ce>
		if (f) {
    753a:	9814      	ldr	r0, [sp, #80]	; 0x50
    753c:	2800      	cmp	r0, #0
    753e:	d0e8      	beq.n	7512 <loadSample(unsigned int, unsigned int)+0x1da>
			f->close();
    7540:	6803      	ldr	r3, [r0, #0]
    7542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7544:	4798      	blx	r3
			dec_refcount();
    7546:	a810      	add	r0, sp, #64	; 0x40
    7548:	f7fb f9e8 	bl	291c <File::dec_refcount()>
    754c:	e7e1      	b.n	7512 <loadSample(unsigned int, unsigned int)+0x1da>
        for (auto && sample : _audiosamples) {
    754e:	45a0      	cmp	r8, r4
    7550:	d007      	beq.n	7562 <loadSample(unsigned int, unsigned int)+0x22a>
            delete sample;
    7552:	f854 0b04 	ldr.w	r0, [r4], #4
    7556:	2800      	cmp	r0, #0
    7558:	d0f9      	beq.n	754e <loadSample(unsigned int, unsigned int)+0x216>
    755a:	4651      	mov	r1, sl
    755c:	f00f ff72 	bl	17444 <operator delete(void*, unsigned int)>
    7560:	e7f5      	b.n	754e <loadSample(unsigned int, unsigned int)+0x216>
      { _M_erase_at_end(this->_M_impl._M_start); }
    7562:	f8d6 3134 	ldr.w	r3, [r6, #308]	; 0x134
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    7566:	f8d6 2138 	ldr.w	r2, [r6, #312]	; 0x138
    756a:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    756c:	bf18      	it	ne
    756e:	f8c6 3138 	strne.w	r3, [r6, #312]	; 0x138
        audiosample *newSample = new audiosample(noteNumber, data, sampleLength, numChannels);
    7572:	2014      	movs	r0, #20
    7574:	f00f ff56 	bl	17424 <operator new(unsigned int)>
        _noteNumber(noteNumber), 
    7578:	2324      	movs	r3, #36	; 0x24
    757a:	7003      	strb	r3, [r0, #0]
    _samplers[sampleID].addSample(36, (int16_t *)sampled[sampleID] + 2, (int)i - 120, 1);
    757c:	f109 0304 	add.w	r3, r9, #4
        _data(data), 
    7580:	6043      	str	r3, [r0, #4]
    7582:	3d78      	subs	r5, #120	; 0x78
        _sampleLength(sampleLength), 
    7584:	6085      	str	r5, [r0, #8]
        _numChannels(numChannels) {
    7586:	2301      	movs	r3, #1
    7588:	8183      	strh	r3, [r0, #12]
    758a:	2300      	movs	r3, #0
    758c:	7383      	strb	r3, [r0, #14]
    758e:	73c3      	strb	r3, [r0, #15]
    7590:	9002      	str	r0, [sp, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7592:	f8d6 1138 	ldr.w	r1, [r6, #312]	; 0x138
    7596:	f8d6 313c 	ldr.w	r3, [r6, #316]	; 0x13c
    759a:	4299      	cmp	r1, r3
    759c:	d006      	beq.n	75ac <loadSample(unsigned int, unsigned int)+0x274>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    759e:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    75a0:	f8d6 3138 	ldr.w	r3, [r6, #312]	; 0x138
    75a4:	3304      	adds	r3, #4
    75a6:	f8c6 3138 	str.w	r3, [r6, #312]	; 0x138
    75aa:	e702      	b.n	73b2 <loadSample(unsigned int, unsigned int)+0x7a>
	  _M_realloc_insert(end(), __x);
    75ac:	aa02      	add	r2, sp, #8
    75ae:	480c      	ldr	r0, [pc, #48]	; (75e0 <loadSample(unsigned int, unsigned int)+0x2a8>)
    75b0:	4438      	add	r0, r7
    75b2:	f7ff fe61 	bl	7278 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)>
    }
    75b6:	e6fc      	b.n	73b2 <loadSample(unsigned int, unsigned int)+0x7a>
    75b8:	20000c18 	.word	0x20000c18
    75bc:	20006678 	.word	0x20006678
    75c0:	70000000 	.word	0x70000000
    75c4:	20006ca0 	.word	0x20006ca0
    75c8:	20002750 	.word	0x20002750
    75cc:	20000bd0 	.word	0x20000bd0
    75d0:	20004e1c 	.word	0x20004e1c
    75d4:	00185986 	.word	0x00185986
    75d8:	70001220 	.word	0x70001220
    75dc:	700001e0 	.word	0x700001e0
    75e0:	70000314 	.word	0x70000314

000075e4 <loadSamplePack(unsigned int)>:
void loadSamplePack(unsigned int pack) {
    75e4:	b570      	push	{r4, r5, r6, lr}
    75e6:	b0a0      	sub	sp, #128	; 0x80
    75e8:	9003      	str	r0, [sp, #12]
	StringSumHelper(const char *p) : String(p) {}
    75ea:	4937      	ldr	r1, [pc, #220]	; (76c8 <loadSamplePack(unsigned int)+0xe4>)
    75ec:	a815      	add	r0, sp, #84	; 0x54
    75ee:	f00f f8b2 	bl	16756 <String::String(char const*)>
  serialprintln("Loading SamplePack #" + String(pack));
    75f2:	220a      	movs	r2, #10
    75f4:	9903      	ldr	r1, [sp, #12]
    75f6:	a818      	add	r0, sp, #96	; 0x60
    75f8:	f00f f8f6 	bl	167e8 <String::String(unsigned int, unsigned char)>
    75fc:	a918      	add	r1, sp, #96	; 0x60
    75fe:	a815      	add	r0, sp, #84	; 0x54
    7600:	f00f f94f 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    7604:	4601      	mov	r1, r0
class StringSumHelper : public String
    7606:	a812      	add	r0, sp, #72	; 0x48
    7608:	f00f f8c1 	bl	1678e <String::String(String const&)>
    760c:	a812      	add	r0, sp, #72	; 0x48
    760e:	f00f f859 	bl	166c4 <String::~String()>
    7612:	a818      	add	r0, sp, #96	; 0x60
    7614:	f00f f856 	bl	166c4 <String::~String()>
    7618:	a815      	add	r0, sp, #84	; 0x54
    761a:	f00f f853 	bl	166c4 <String::~String()>
  drawNoSD();
    761e:	f7fd f92b 	bl	4878 <drawNoSD()>
  FastLEDclear();
    7622:	f7fc f84f 	bl	36c4 <FastLEDclear()>
  SMP.smplen = 0;
    7626:	4b29      	ldr	r3, [pc, #164]	; (76cc <loadSamplePack(unsigned int)+0xe8>)
    7628:	2100      	movs	r1, #0
    762a:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
  SMP.seekEnd = 0;
    762e:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    7632:	2204      	movs	r2, #4
    7634:	a803      	add	r0, sp, #12
    7636:	f00f fdaf 	bl	17198 <eeprom_write_block>
  for (unsigned int z = 1; z < maxFiles; z++) {
    763a:	2401      	movs	r4, #1
    showIcons("icon_sample", CRGB(20, 20, 20));
    763c:	4e24      	ldr	r6, [pc, #144]	; (76d0 <loadSamplePack(unsigned int)+0xec>)
    drawLoadingBar(1, maxFiles, z, col[z], CRGB(15, 55, 15));
    763e:	4d25      	ldr	r5, [pc, #148]	; (76d4 <loadSamplePack(unsigned int)+0xf0>)
    FastLEDclear();
    7640:	f7fc f840 	bl	36c4 <FastLEDclear()>
    showIcons("icon_sample", CRGB(20, 20, 20));
    7644:	4631      	mov	r1, r6
    7646:	a81b      	add	r0, sp, #108	; 0x6c
    7648:	f00f f885 	bl	16756 <String::String(char const*)>
    764c:	2314      	movs	r3, #20
    764e:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
    7652:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    7656:	f88d 307a 	strb.w	r3, [sp, #122]	; 0x7a
    765a:	991e      	ldr	r1, [sp, #120]	; 0x78
    765c:	a81b      	add	r0, sp, #108	; 0x6c
    765e:	f7fe f8e7 	bl	5830 <showIcons(String, CRGB)>
    7662:	a81b      	add	r0, sp, #108	; 0x6c
    7664:	f00f f82e 	bl	166c4 <String::~String()>
    7668:	230f      	movs	r3, #15
    766a:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
    766e:	2237      	movs	r2, #55	; 0x37
    7670:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    7674:	f88d 307e 	strb.w	r3, [sp, #126]	; 0x7e
    drawLoadingBar(1, maxFiles, z, col[z], CRGB(15, 55, 15));
    7678:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    767c:	186a      	adds	r2, r5, r1
    767e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    7680:	f8ad 3000 	strh.w	r3, [sp]
    7684:	0c1b      	lsrs	r3, r3, #16
    7686:	f88d 3002 	strb.w	r3, [sp, #2]
    768a:	5c6b      	ldrb	r3, [r5, r1]
    768c:	7851      	ldrb	r1, [r2, #1]
    768e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    7692:	7892      	ldrb	r2, [r2, #2]
    7694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    7698:	4622      	mov	r2, r4
    769a:	2109      	movs	r1, #9
    769c:	2001      	movs	r0, #1
    769e:	f7fc ffff 	bl	46a0 <drawLoadingBar(int, int, int, CRGB, CRGB)>
    loadSample(pack, z);
    76a2:	4621      	mov	r1, r4
    76a4:	9803      	ldr	r0, [sp, #12]
    76a6:	f7ff fe47 	bl	7338 <loadSample(unsigned int, unsigned int)>
  for (unsigned int z = 1; z < maxFiles; z++) {
    76aa:	3401      	adds	r4, #1
    76ac:	2c09      	cmp	r4, #9
    76ae:	d1c7      	bne.n	7640 <loadSamplePack(unsigned int)+0x5c>
  sprintf(OUTPUTf, "%d/%d.wav", pack, 1);
    76b0:	2301      	movs	r3, #1
    76b2:	9a03      	ldr	r2, [sp, #12]
    76b4:	4908      	ldr	r1, [pc, #32]	; (76d8 <loadSamplePack(unsigned int)+0xf4>)
    76b6:	a805      	add	r0, sp, #20
    76b8:	f01b f822 	bl	22700 <sprintf>
  switchMode(&draw);
    76bc:	4807      	ldr	r0, [pc, #28]	; (76dc <loadSamplePack(unsigned int)+0xf8>)
    76be:	f7fc faed 	bl	3c9c <switchMode(Mode*)>
}
    76c2:	b020      	add	sp, #128	; 0x80
    76c4:	bd70      	pop	{r4, r5, r6, pc}
    76c6:	bf00      	nop
    76c8:	20000be4 	.word	0x20000be4
    76cc:	70000000 	.word	0x70000000
    76d0:	20000ddc 	.word	0x20000ddc
    76d4:	200012d4 	.word	0x200012d4
    76d8:	20000c18 	.word	0x20000c18
    76dc:	20005808 	.word	0x20005808

000076e0 <setup>:
void setup() {
    76e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76e2:	b08f      	sub	sp, #60	; 0x3c
  delay(200);
    76e4:	20c8      	movs	r0, #200	; 0xc8
    76e6:	f00f fac5 	bl	16c74 <delay>
	// is always initialized early during startup.  The baud rate setting
	// is not used.  Communication occurs at USB native speed.  For
	// compatibility with Arduino code, Serial.begin waits up to 2 seconds
	// for your PC to open the virtual serial port.
        void begin(long baud_unused __attribute__((unused))) {
		uint32_t millis_begin = systick_millis_count;
    76ea:	4b50      	ldr	r3, [pc, #320]	; (782c <setup+0x14c>)
    76ec:	681e      	ldr	r6, [r3, #0]
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    76ee:	4c50      	ldr	r4, [pc, #320]	; (7830 <setup+0x150>)
    76f0:	4f50      	ldr	r7, [pc, #320]	; (7834 <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    76f2:	461d      	mov	r5, r3
		while (!(*this)) {
    76f4:	e004      	b.n	7700 <setup+0x20>
				if (elapsed > 2000) break;
    76f6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    76fa:	d813      	bhi.n	7724 <setup+0x44>
			yield();
    76fc:	f004 fb6a 	bl	bdd4 <yield>
		yield();
    7700:	f004 fb68 	bl	bdd4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7704:	7823      	ldrb	r3, [r4, #0]
    7706:	2b00      	cmp	r3, #0
    7708:	f000 870e 	beq.w	8528 <setup+0xe48>
    770c:	783b      	ldrb	r3, [r7, #0]
    770e:	f013 0f01 	tst.w	r3, #1
    7712:	f000 8709 	beq.w	8528 <setup+0xe48>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7716:	682b      	ldr	r3, [r5, #0]
    7718:	4a47      	ldr	r2, [pc, #284]	; (7838 <setup+0x158>)
    771a:	6812      	ldr	r2, [r2, #0]
    771c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    771e:	2b0e      	cmp	r3, #14
    7720:	f240 8702 	bls.w	8528 <setup+0xe48>
  if (CrashReport) {
    7724:	4845      	ldr	r0, [pc, #276]	; (783c <setup+0x15c>)
    7726:	f021 f8ab 	bl	28880 <___ZN16CrashReportClasscvbEv_veneer>
    772a:	2800      	cmp	r0, #0
    772c:	d14e      	bne.n	77cc <setup+0xec>
		// type: 0xF6  TuneRequest
		usb_midi_handleTuneRequest = fptr;
	}
	void setHandleClock(void (*fptr)(void)) {
		// type: 0xF8  Clock
		usb_midi_handleClock = fptr;
    772e:	4b44      	ldr	r3, [pc, #272]	; (7840 <setup+0x160>)
    7730:	4a44      	ldr	r2, [pc, #272]	; (7844 <setup+0x164>)
    7732:	601a      	str	r2, [r3, #0]
	}
	void setHandleStart(void (*fptr)(void)) {
		// type: 0xFA  Start
		usb_midi_handleStart = fptr;
    7734:	4b44      	ldr	r3, [pc, #272]	; (7848 <setup+0x168>)
    7736:	4a45      	ldr	r2, [pc, #276]	; (784c <setup+0x16c>)
    7738:	601a      	str	r2, [r3, #0]
		// type: 0xFB  Continue
		usb_midi_handleContinue = fptr;
	}
	void setHandleStop(void (*fptr)(void)) {
		// type: 0xFC  Stop
		usb_midi_handleStop = fptr;
    773a:	4b45      	ldr	r3, [pc, #276]	; (7850 <setup+0x170>)
    773c:	4a45      	ldr	r2, [pc, #276]	; (7854 <setup+0x174>)
    773e:	601a      	str	r2, [r3, #0]
		usb_midi_handleSongPosition = fptr;
    7740:	4b45      	ldr	r3, [pc, #276]	; (7858 <setup+0x178>)
    7742:	4a46      	ldr	r2, [pc, #280]	; (785c <setup+0x17c>)
    7744:	601a      	str	r2, [r3, #0]
                usb_midi_handleTimeCodeQuarterFrame = fptr;
    7746:	4b46      	ldr	r3, [pc, #280]	; (7860 <setup+0x180>)
    7748:	4a46      	ldr	r2, [pc, #280]	; (7864 <setup+0x184>)
    774a:	601a      	str	r2, [r3, #0]
                usb_midi_handleNoteOn = fptr;
    774c:	4b46      	ldr	r3, [pc, #280]	; (7868 <setup+0x188>)
    774e:	4a47      	ldr	r2, [pc, #284]	; (786c <setup+0x18c>)
    7750:	601a      	str	r2, [r3, #0]
                usb_midi_handleNoteOff = fptr;
    7752:	4b47      	ldr	r3, [pc, #284]	; (7870 <setup+0x190>)
    7754:	4a47      	ldr	r2, [pc, #284]	; (7874 <setup+0x194>)
    7756:	601a      	str	r2, [r3, #0]
    7758:	2400      	movs	r4, #0
        uint8_t *ptr = (uint8_t*) &t;
    775a:	4d47      	ldr	r5, [pc, #284]	; (7878 <setup+0x198>)
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    775c:	4620      	mov	r0, r4
    775e:	f00f fb6d 	bl	16e3c <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7762:	f805 0b01 	strb.w	r0, [r5], #1
    7766:	3401      	adds	r4, #1
    7768:	2c04      	cmp	r4, #4
    776a:	d1f7      	bne.n	775c <setup+0x7c>
  serialprintln(samplePackID);
    776c:	4b42      	ldr	r3, [pc, #264]	; (7878 <setup+0x198>)
  if (samplePackID == NAN || samplePackID == 0) {
    776e:	681b      	ldr	r3, [r3, #0]
    7770:	b913      	cbnz	r3, 7778 <setup+0x98>
    samplePackID = 1;
    7772:	4b41      	ldr	r3, [pc, #260]	; (7878 <setup+0x198>)
    7774:	2201      	movs	r2, #1
    7776:	601a      	str	r2, [r3, #0]
  pinMode(0, INPUT_PULLDOWN);
    7778:	2103      	movs	r1, #3
    777a:	2000      	movs	r0, #0
    777c:	f00f fac8 	bl	16d10 <pinMode>
  pinMode(3, INPUT_PULLDOWN);
    7780:	2103      	movs	r1, #3
    7782:	4608      	mov	r0, r1
    7784:	f00f fac4 	bl	16d10 <pinMode>
  pinMode(16, INPUT_PULLDOWN);
    7788:	2103      	movs	r1, #3
    778a:	2010      	movs	r0, #16
    778c:	f00f fac0 	bl	16d10 <pinMode>
		static CWS2812SerialController<DATA_PIN,RGB_ORDER> controller;
    7790:	4b3a      	ldr	r3, [pc, #232]	; (787c <setup+0x19c>)
    7792:	681b      	ldr	r3, [r3, #0]
    7794:	f013 0f01 	tst.w	r3, #1
    7798:	d02c      	beq.n	77f4 <setup+0x114>
		return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset);
    779a:	2300      	movs	r3, #0
    779c:	f44f 7280 	mov.w	r2, #256	; 0x100
    77a0:	4937      	ldr	r1, [pc, #220]	; (7880 <setup+0x1a0>)
    77a2:	4838      	ldr	r0, [pc, #224]	; (7884 <setup+0x1a4>)
    77a4:	f004 fc62 	bl	c06c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
  showIntro();
    77a8:	f7fd f8bc 	bl	4924 <showIntro()>
  drawNoSD();
    77ac:	f7fd f864 	bl	4878 <drawNoSD()>
  getLastFiles();
    77b0:	f7fd f8a2 	bl	48f8 <getLastFiles()>
  loadSamplePack(samplePackID);
    77b4:	4b30      	ldr	r3, [pc, #192]	; (7878 <setup+0x198>)
    77b6:	6818      	ldr	r0, [r3, #0]
    77b8:	f7ff ff14 	bl	75e4 <loadSamplePack(unsigned int)>
  for (unsigned int vx = 1; vx < SONG_LEN + 1; vx++) {
    77bc:	4b32      	ldr	r3, [pc, #200]	; (7888 <setup+0x1a8>)
    77be:	f503 7284 	add.w	r2, r3, #264	; 0x108
    77c2:	f244 5008 	movw	r0, #17672	; 0x4508
    77c6:	4418      	add	r0, r3
      note[vx][vy][1] = defaultVelocity;
    77c8:	213f      	movs	r1, #63	; 0x3f
    77ca:	e027      	b.n	781c <setup+0x13c>
							  return write((const uint8_t *)str, strlen(str)); }
    77cc:	4c2f      	ldr	r4, [pc, #188]	; (788c <setup+0x1ac>)
    77ce:	6823      	ldr	r3, [r4, #0]
    77d0:	685b      	ldr	r3, [r3, #4]
    77d2:	2259      	movs	r2, #89	; 0x59
    77d4:	492e      	ldr	r1, [pc, #184]	; (7890 <setup+0x1b0>)
    77d6:	4620      	mov	r0, r4
    77d8:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    77da:	4620      	mov	r0, r4
    77dc:	f00e fcf3 	bl	161c6 <Print::println()>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
    77e0:	4816      	ldr	r0, [pc, #88]	; (783c <setup+0x15c>)
    77e2:	6803      	ldr	r3, [r0, #0]
    77e4:	681b      	ldr	r3, [r3, #0]
    77e6:	4621      	mov	r1, r4
    77e8:	4798      	blx	r3
    delay(1000);
    77ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    77ee:	f00f fa41 	bl	16c74 <delay>
    77f2:	e79c      	b.n	772e <setup+0x4e>
    CPixelLEDController() : CLEDController() {}
    77f4:	4c23      	ldr	r4, [pc, #140]	; (7884 <setup+0x1a4>)
    77f6:	4620      	mov	r0, r4
    77f8:	f004 fc6c 	bl	c0d4 <CLEDController::CLEDController()>
    CWS2812SerialController() { pserial = NULL; }
    77fc:	4b25      	ldr	r3, [pc, #148]	; (7894 <setup+0x1b4>)
    77fe:	6023      	str	r3, [r4, #0]
    7800:	2300      	movs	r3, #0
    7802:	61e3      	str	r3, [r4, #28]
		static CWS2812SerialController<DATA_PIN,RGB_ORDER> controller;
    7804:	4b1d      	ldr	r3, [pc, #116]	; (787c <setup+0x19c>)
    7806:	2201      	movs	r2, #1
    7808:	601a      	str	r2, [r3, #0]
    780a:	4a23      	ldr	r2, [pc, #140]	; (7898 <setup+0x1b8>)
    780c:	4923      	ldr	r1, [pc, #140]	; (789c <setup+0x1bc>)
    780e:	4620      	mov	r0, r4
    7810:	f011 ff9a 	bl	19748 <__aeabi_atexit>
    7814:	e7c1      	b.n	779a <setup+0xba>
  for (unsigned int vx = 1; vx < SONG_LEN + 1; vx++) {
    7816:	3288      	adds	r2, #136	; 0x88
    7818:	4282      	cmp	r2, r0
    781a:	d041      	beq.n	78a0 <setup+0x1c0>
    for (unsigned int vy = 1; vy < maxY + 1; vy++) {
    781c:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
      note[vx][vy][1] = defaultVelocity;
    7820:	60d9      	str	r1, [r3, #12]
    for (unsigned int vy = 1; vy < maxY + 1; vy++) {
    7822:	3308      	adds	r3, #8
    7824:	4293      	cmp	r3, r2
    7826:	d1fb      	bne.n	7820 <setup+0x140>
    7828:	e7f5      	b.n	7816 <setup+0x136>
    782a:	bf00      	nop
    782c:	20008a6c 	.word	0x20008a6c
    7830:	20008c40 	.word	0x20008c40
    7834:	20008c3f 	.word	0x20008c3f
    7838:	20008a80 	.word	0x20008a80
    783c:	20004e10 	.word	0x20004e10
    7840:	20008a8c 	.word	0x20008a8c
    7844:	00000c25 	.word	0x00000c25
    7848:	20008ab4 	.word	0x20008ab4
    784c:	00000d2d 	.word	0x00000d2d
    7850:	20008ab8 	.word	0x20008ab8
    7854:	00006601 	.word	0x00006601
    7858:	20008aac 	.word	0x20008aac
    785c:	00000e3d 	.word	0x00000e3d
    7860:	20008ac8 	.word	0x20008ac8
    7864:	00000d0d 	.word	0x00000d0d
    7868:	20008a9c 	.word	0x20008a9c
    786c:	00003ad5 	.word	0x00003ad5
    7870:	20008a98 	.word	0x20008a98
    7874:	00000cf5 	.word	0x00000cf5
    7878:	20008544 	.word	0x20008544
    787c:	20006b50 	.word	0x20006b50
    7880:	20007b30 	.word	0x20007b30
    7884:	20007024 	.word	0x20007024
    7888:	70db37d8 	.word	0x70db37d8
    788c:	20004e74 	.word	0x20004e74
    7890:	20003b10 	.word	0x20003b10
    7894:	20002708 	.word	0x20002708
    7898:	20005258 	.word	0x20005258
    789c:	000005ad 	.word	0x000005ad
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    78a0:	2018      	movs	r0, #24
    78a2:	f00f fdbf 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    78a6:	4abc      	ldr	r2, [pc, #752]	; (7b98 <setup+0x4b8>)
    78a8:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    78aa:	4abc      	ldr	r2, [pc, #752]	; (7b9c <setup+0x4bc>)
    78ac:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    78ae:	2200      	movs	r2, #0
    78b0:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    78b2:	49bb      	ldr	r1, [pc, #748]	; (7ba0 <setup+0x4c0>)
    78b4:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    78b6:	6102      	str	r2, [r0, #16]
    78b8:	2103      	movs	r1, #3
    78ba:	7501      	strb	r1, [r0, #20]
    78bc:	7582      	strb	r2, [r0, #22]
    78be:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    78c0:	4ab8      	ldr	r2, [pc, #736]	; (7ba4 <setup+0x4c4>)
    78c2:	6891      	ldr	r1, [r2, #8]
    78c4:	68d2      	ldr	r2, [r2, #12]
    78c6:	4291      	cmp	r1, r2
    78c8:	f000 83c5 	beq.w	8056 <setup+0x976>
    78cc:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    78ce:	4ab5      	ldr	r2, [pc, #724]	; (7ba4 <setup+0x4c4>)
    78d0:	6893      	ldr	r3, [r2, #8]
    78d2:	3304      	adds	r3, #4
    78d4:	6093      	str	r3, [r2, #8]
        _numVoices++;
    78d6:	4bb3      	ldr	r3, [pc, #716]	; (7ba4 <setup+0x4c4>)
    78d8:	781a      	ldrb	r2, [r3, #0]
    78da:	3201      	adds	r2, #1
    78dc:	b2d2      	uxtb	r2, r2
    78de:	701a      	strb	r2, [r3, #0]
        if (numVoices > _numVoices)
    78e0:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
    78e4:	429a      	cmp	r2, r3
    78e6:	f240 83bb 	bls.w	8060 <setup+0x980>
            for (int i=_numVoices; i < numVoices; i++) {
    78ea:	d912      	bls.n	7912 <setup+0x232>
    78ec:	f103 049f 	add.w	r4, r3, #159	; 0x9f
    78f0:	49ac      	ldr	r1, [pc, #688]	; (7ba4 <setup+0x4c4>)
    78f2:	440c      	add	r4, r1
    78f4:	48ac      	ldr	r0, [pc, #688]	; (7ba8 <setup+0x4c8>)
    78f6:	4418      	add	r0, r3
    78f8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    78fc:	f101 039f 	add.w	r3, r1, #159	; 0x9f
    7900:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7902:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7904:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7906:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    790a:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    790e:	429c      	cmp	r4, r3
    7910:	d1f9      	bne.n	7906 <setup+0x226>
        _numVoices = numVoices;
    7912:	4ca4      	ldr	r4, [pc, #656]	; (7ba4 <setup+0x4c4>)
    7914:	f884 20b0 	strb.w	r2, [r4, #176]	; 0xb0
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7918:	2018      	movs	r0, #24
    791a:	f00f fd83 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    791e:	4aa3      	ldr	r2, [pc, #652]	; (7bac <setup+0x4cc>)
    7920:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7922:	4aa3      	ldr	r2, [pc, #652]	; (7bb0 <setup+0x4d0>)
    7924:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7926:	2200      	movs	r2, #0
    7928:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    792a:	49a2      	ldr	r1, [pc, #648]	; (7bb4 <setup+0x4d4>)
    792c:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    792e:	6102      	str	r2, [r0, #16]
    7930:	7502      	strb	r2, [r0, #20]
    7932:	7582      	strb	r2, [r0, #22]
    7934:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7936:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    793a:	f8d4 214c 	ldr.w	r2, [r4, #332]	; 0x14c
    793e:	4291      	cmp	r1, r2
    7940:	f000 83a5 	beq.w	808e <setup+0x9ae>
    7944:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7946:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    794a:	3304      	adds	r3, #4
    794c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
        _numVoices++;
    7950:	4b94      	ldr	r3, [pc, #592]	; (7ba4 <setup+0x4c4>)
    7952:	f893 2140 	ldrb.w	r2, [r3, #320]	; 0x140
    7956:	3201      	adds	r2, #1
    7958:	b2d2      	uxtb	r2, r2
    795a:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
        if (numVoices > _numVoices)
    795e:	f893 31f0 	ldrb.w	r3, [r3, #496]	; 0x1f0
    7962:	429a      	cmp	r2, r3
    7964:	f240 8398 	bls.w	8098 <setup+0x9b8>
            for (int i=_numVoices; i < numVoices; i++) {
    7968:	d912      	bls.n	7990 <setup+0x2b0>
    796a:	f203 14df 	addw	r4, r3, #479	; 0x1df
    796e:	498d      	ldr	r1, [pc, #564]	; (7ba4 <setup+0x4c4>)
    7970:	440c      	add	r4, r1
    7972:	4891      	ldr	r0, [pc, #580]	; (7bb8 <setup+0x4d8>)
    7974:	4418      	add	r0, r3
    7976:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    797a:	f201 13df 	addw	r3, r1, #479	; 0x1df
    797e:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7980:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7982:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7984:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7988:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    798c:	429c      	cmp	r4, r3
    798e:	d1f9      	bne.n	7984 <setup+0x2a4>
        _numVoices = numVoices;
    7990:	4c84      	ldr	r4, [pc, #528]	; (7ba4 <setup+0x4c4>)
    7992:	f884 21f0 	strb.w	r2, [r4, #496]	; 0x1f0
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7996:	2018      	movs	r0, #24
    7998:	f00f fd44 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    799c:	4a87      	ldr	r2, [pc, #540]	; (7bbc <setup+0x4dc>)
    799e:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    79a0:	4a87      	ldr	r2, [pc, #540]	; (7bc0 <setup+0x4e0>)
    79a2:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    79a4:	2200      	movs	r2, #0
    79a6:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    79a8:	4982      	ldr	r1, [pc, #520]	; (7bb4 <setup+0x4d4>)
    79aa:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    79ac:	6102      	str	r2, [r0, #16]
    79ae:	2101      	movs	r1, #1
    79b0:	7501      	strb	r1, [r0, #20]
    79b2:	7582      	strb	r2, [r0, #22]
    79b4:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    79b6:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
    79ba:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
    79be:	4291      	cmp	r1, r2
    79c0:	f000 8382 	beq.w	80c8 <setup+0x9e8>
    79c4:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    79c6:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
    79ca:	3304      	adds	r3, #4
    79cc:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
        _numVoices++;
    79d0:	4b74      	ldr	r3, [pc, #464]	; (7ba4 <setup+0x4c4>)
    79d2:	f893 2280 	ldrb.w	r2, [r3, #640]	; 0x280
    79d6:	3201      	adds	r2, #1
    79d8:	b2d2      	uxtb	r2, r2
    79da:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
        if (numVoices > _numVoices)
    79de:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
    79e2:	429a      	cmp	r2, r3
    79e4:	f240 8375 	bls.w	80d2 <setup+0x9f2>
            for (int i=_numVoices; i < numVoices; i++) {
    79e8:	d912      	bls.n	7a10 <setup+0x330>
    79ea:	f203 341f 	addw	r4, r3, #799	; 0x31f
    79ee:	496d      	ldr	r1, [pc, #436]	; (7ba4 <setup+0x4c4>)
    79f0:	440c      	add	r4, r1
    79f2:	4874      	ldr	r0, [pc, #464]	; (7bc4 <setup+0x4e4>)
    79f4:	4418      	add	r0, r3
    79f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    79fa:	f201 331f 	addw	r3, r1, #799	; 0x31f
    79fe:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7a00:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7a02:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7a04:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7a08:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7a0c:	429c      	cmp	r4, r3
    7a0e:	d1f9      	bne.n	7a04 <setup+0x324>
        _numVoices = numVoices;
    7a10:	4c64      	ldr	r4, [pc, #400]	; (7ba4 <setup+0x4c4>)
    7a12:	f884 2330 	strb.w	r2, [r4, #816]	; 0x330
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7a16:	2018      	movs	r0, #24
    7a18:	f00f fd04 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7a1c:	4a6a      	ldr	r2, [pc, #424]	; (7bc8 <setup+0x4e8>)
    7a1e:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7a20:	4a6a      	ldr	r2, [pc, #424]	; (7bcc <setup+0x4ec>)
    7a22:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7a24:	2200      	movs	r2, #0
    7a26:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7a28:	4962      	ldr	r1, [pc, #392]	; (7bb4 <setup+0x4d4>)
    7a2a:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7a2c:	6102      	str	r2, [r0, #16]
    7a2e:	2102      	movs	r1, #2
    7a30:	7501      	strb	r1, [r0, #20]
    7a32:	7582      	strb	r2, [r0, #22]
    7a34:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7a36:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
    7a3a:	f8d4 23cc 	ldr.w	r2, [r4, #972]	; 0x3cc
    7a3e:	4291      	cmp	r1, r2
    7a40:	f000 835f 	beq.w	8102 <setup+0xa22>
    7a44:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7a46:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
    7a4a:	3304      	adds	r3, #4
    7a4c:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
        _numVoices++;
    7a50:	4b54      	ldr	r3, [pc, #336]	; (7ba4 <setup+0x4c4>)
    7a52:	f893 23c0 	ldrb.w	r2, [r3, #960]	; 0x3c0
    7a56:	3201      	adds	r2, #1
    7a58:	b2d2      	uxtb	r2, r2
    7a5a:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0
        if (numVoices > _numVoices)
    7a5e:	f893 3470 	ldrb.w	r3, [r3, #1136]	; 0x470
    7a62:	429a      	cmp	r2, r3
    7a64:	f240 8352 	bls.w	810c <setup+0xa2c>
            for (int i=_numVoices; i < numVoices; i++) {
    7a68:	d912      	bls.n	7a90 <setup+0x3b0>
    7a6a:	f203 445f 	addw	r4, r3, #1119	; 0x45f
    7a6e:	494d      	ldr	r1, [pc, #308]	; (7ba4 <setup+0x4c4>)
    7a70:	440c      	add	r4, r1
    7a72:	4857      	ldr	r0, [pc, #348]	; (7bd0 <setup+0x4f0>)
    7a74:	4418      	add	r0, r3
    7a76:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7a7a:	f201 435f 	addw	r3, r1, #1119	; 0x45f
    7a7e:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7a80:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7a82:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7a84:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7a88:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7a8c:	429c      	cmp	r4, r3
    7a8e:	d1f9      	bne.n	7a84 <setup+0x3a4>
        _numVoices = numVoices;
    7a90:	4c44      	ldr	r4, [pc, #272]	; (7ba4 <setup+0x4c4>)
    7a92:	f884 2470 	strb.w	r2, [r4, #1136]	; 0x470
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7a96:	2018      	movs	r0, #24
    7a98:	f00f fcc4 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7a9c:	4a4d      	ldr	r2, [pc, #308]	; (7bd4 <setup+0x4f4>)
    7a9e:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7aa0:	4a4d      	ldr	r2, [pc, #308]	; (7bd8 <setup+0x4f8>)
    7aa2:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7aa4:	2200      	movs	r2, #0
    7aa6:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7aa8:	4942      	ldr	r1, [pc, #264]	; (7bb4 <setup+0x4d4>)
    7aaa:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7aac:	6102      	str	r2, [r0, #16]
    7aae:	2103      	movs	r1, #3
    7ab0:	7501      	strb	r1, [r0, #20]
    7ab2:	7582      	strb	r2, [r0, #22]
    7ab4:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7ab6:	f8d4 1508 	ldr.w	r1, [r4, #1288]	; 0x508
    7aba:	f8d4 250c 	ldr.w	r2, [r4, #1292]	; 0x50c
    7abe:	4291      	cmp	r1, r2
    7ac0:	f000 833d 	beq.w	813e <setup+0xa5e>
    7ac4:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7ac6:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    7aca:	3304      	adds	r3, #4
    7acc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        _numVoices++;
    7ad0:	4b34      	ldr	r3, [pc, #208]	; (7ba4 <setup+0x4c4>)
    7ad2:	f893 2500 	ldrb.w	r2, [r3, #1280]	; 0x500
    7ad6:	3201      	adds	r2, #1
    7ad8:	b2d2      	uxtb	r2, r2
    7ada:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        if (numVoices > _numVoices)
    7ade:	f893 35b0 	ldrb.w	r3, [r3, #1456]	; 0x5b0
    7ae2:	429a      	cmp	r2, r3
    7ae4:	f240 8330 	bls.w	8148 <setup+0xa68>
            for (int i=_numVoices; i < numVoices; i++) {
    7ae8:	d912      	bls.n	7b10 <setup+0x430>
    7aea:	f203 549f 	addw	r4, r3, #1439	; 0x59f
    7aee:	492d      	ldr	r1, [pc, #180]	; (7ba4 <setup+0x4c4>)
    7af0:	440c      	add	r4, r1
    7af2:	483a      	ldr	r0, [pc, #232]	; (7bdc <setup+0x4fc>)
    7af4:	4418      	add	r0, r3
    7af6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7afa:	f201 539f 	addw	r3, r1, #1439	; 0x59f
    7afe:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7b00:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7b02:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7b04:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7b08:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7b0c:	429c      	cmp	r4, r3
    7b0e:	d1f9      	bne.n	7b04 <setup+0x424>
        _numVoices = numVoices;
    7b10:	4c24      	ldr	r4, [pc, #144]	; (7ba4 <setup+0x4c4>)
    7b12:	f884 25b0 	strb.w	r2, [r4, #1456]	; 0x5b0
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7b16:	2018      	movs	r0, #24
    7b18:	f00f fc84 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7b1c:	4a30      	ldr	r2, [pc, #192]	; (7be0 <setup+0x500>)
    7b1e:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7b20:	4a30      	ldr	r2, [pc, #192]	; (7be4 <setup+0x504>)
    7b22:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7b24:	2200      	movs	r2, #0
    7b26:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7b28:	492f      	ldr	r1, [pc, #188]	; (7be8 <setup+0x508>)
    7b2a:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7b2c:	6102      	str	r2, [r0, #16]
    7b2e:	7502      	strb	r2, [r0, #20]
    7b30:	7582      	strb	r2, [r0, #22]
    7b32:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7b34:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
    7b38:	f8d4 264c 	ldr.w	r2, [r4, #1612]	; 0x64c
    7b3c:	4291      	cmp	r1, r2
    7b3e:	f000 831c 	beq.w	817a <setup+0xa9a>
    7b42:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7b44:	f8d4 3648 	ldr.w	r3, [r4, #1608]	; 0x648
    7b48:	3304      	adds	r3, #4
    7b4a:	f8c4 3648 	str.w	r3, [r4, #1608]	; 0x648
        _numVoices++;
    7b4e:	4b15      	ldr	r3, [pc, #84]	; (7ba4 <setup+0x4c4>)
    7b50:	f893 2640 	ldrb.w	r2, [r3, #1600]	; 0x640
    7b54:	3201      	adds	r2, #1
    7b56:	b2d2      	uxtb	r2, r2
    7b58:	f883 2640 	strb.w	r2, [r3, #1600]	; 0x640
        if (numVoices > _numVoices)
    7b5c:	f893 36f0 	ldrb.w	r3, [r3, #1776]	; 0x6f0
    7b60:	429a      	cmp	r2, r3
    7b62:	f240 830f 	bls.w	8184 <setup+0xaa4>
            for (int i=_numVoices; i < numVoices; i++) {
    7b66:	d912      	bls.n	7b8e <setup+0x4ae>
    7b68:	f203 64df 	addw	r4, r3, #1759	; 0x6df
    7b6c:	490d      	ldr	r1, [pc, #52]	; (7ba4 <setup+0x4c4>)
    7b6e:	440c      	add	r4, r1
    7b70:	481e      	ldr	r0, [pc, #120]	; (7bec <setup+0x50c>)
    7b72:	4418      	add	r0, r3
    7b74:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7b78:	f201 63df 	addw	r3, r1, #1759	; 0x6df
    7b7c:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7b7e:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7b80:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7b82:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7b86:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7b8a:	429c      	cmp	r4, r3
    7b8c:	d1f9      	bne.n	7b82 <setup+0x4a2>
        _numVoices = numVoices;
    7b8e:	4c05      	ldr	r4, [pc, #20]	; (7ba4 <setup+0x4c4>)
    7b90:	f884 26f0 	strb.w	r2, [r4, #1776]	; 0x6f0
    7b94:	e02c      	b.n	7bf0 <setup+0x510>
    7b96:	bf00      	nop
    7b98:	200085d8 	.word	0x200085d8
    7b9c:	200073f4 	.word	0x200073f4
    7ba0:	20007ed8 	.word	0x20007ed8
    7ba4:	700001e0 	.word	0x700001e0
    7ba8:	4000002c 	.word	0x4000002c
    7bac:	200085f4 	.word	0x200085f4
    7bb0:	2000742c 	.word	0x2000742c
    7bb4:	20007e30 	.word	0x20007e30
    7bb8:	4000007c 	.word	0x4000007c
    7bbc:	20008984 	.word	0x20008984
    7bc0:	2000757c 	.word	0x2000757c
    7bc4:	400000cc 	.word	0x400000cc
    7bc8:	200089a0 	.word	0x200089a0
    7bcc:	200075b4 	.word	0x200075b4
    7bd0:	4000011c 	.word	0x4000011c
    7bd4:	200089bc 	.word	0x200089bc
    7bd8:	200075ec 	.word	0x200075ec
    7bdc:	4000016c 	.word	0x4000016c
    7be0:	200089d8 	.word	0x200089d8
    7be4:	20007624 	.word	0x20007624
    7be8:	20007e68 	.word	0x20007e68
    7bec:	400001bc 	.word	0x400001bc
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7bf0:	2018      	movs	r0, #24
    7bf2:	f00f fc17 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7bf6:	4abf      	ldr	r2, [pc, #764]	; (7ef4 <setup+0x814>)
    7bf8:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7bfa:	4abf      	ldr	r2, [pc, #764]	; (7ef8 <setup+0x818>)
    7bfc:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7bfe:	2200      	movs	r2, #0
    7c00:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7c02:	49be      	ldr	r1, [pc, #760]	; (7efc <setup+0x81c>)
    7c04:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7c06:	6102      	str	r2, [r0, #16]
    7c08:	2101      	movs	r1, #1
    7c0a:	7501      	strb	r1, [r0, #20]
    7c0c:	7582      	strb	r2, [r0, #22]
    7c0e:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7c10:	f8d4 1788 	ldr.w	r1, [r4, #1928]	; 0x788
    7c14:	f8d4 278c 	ldr.w	r2, [r4, #1932]	; 0x78c
    7c18:	4291      	cmp	r1, r2
    7c1a:	f000 82cc 	beq.w	81b6 <setup+0xad6>
    7c1e:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7c20:	f8d4 3788 	ldr.w	r3, [r4, #1928]	; 0x788
    7c24:	3304      	adds	r3, #4
    7c26:	f8c4 3788 	str.w	r3, [r4, #1928]	; 0x788
        _numVoices++;
    7c2a:	4bb5      	ldr	r3, [pc, #724]	; (7f00 <setup+0x820>)
    7c2c:	f893 2780 	ldrb.w	r2, [r3, #1920]	; 0x780
    7c30:	3201      	adds	r2, #1
    7c32:	b2d2      	uxtb	r2, r2
    7c34:	f883 2780 	strb.w	r2, [r3, #1920]	; 0x780
        if (numVoices > _numVoices)
    7c38:	f893 3830 	ldrb.w	r3, [r3, #2096]	; 0x830
    7c3c:	429a      	cmp	r2, r3
    7c3e:	f240 82bf 	bls.w	81c0 <setup+0xae0>
            for (int i=_numVoices; i < numVoices; i++) {
    7c42:	d912      	bls.n	7c6a <setup+0x58a>
    7c44:	f603 041f 	addw	r4, r3, #2079	; 0x81f
    7c48:	49ad      	ldr	r1, [pc, #692]	; (7f00 <setup+0x820>)
    7c4a:	440c      	add	r4, r1
    7c4c:	48ad      	ldr	r0, [pc, #692]	; (7f04 <setup+0x824>)
    7c4e:	4418      	add	r0, r3
    7c50:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7c54:	f601 031f 	addw	r3, r1, #2079	; 0x81f
    7c58:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7c5a:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7c5c:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7c5e:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7c62:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7c66:	429c      	cmp	r4, r3
    7c68:	d1f9      	bne.n	7c5e <setup+0x57e>
        _numVoices = numVoices;
    7c6a:	4ca5      	ldr	r4, [pc, #660]	; (7f00 <setup+0x820>)
    7c6c:	f884 2830 	strb.w	r2, [r4, #2096]	; 0x830
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7c70:	2018      	movs	r0, #24
    7c72:	f00f fbd7 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7c76:	4aa4      	ldr	r2, [pc, #656]	; (7f08 <setup+0x828>)
    7c78:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7c7a:	4aa4      	ldr	r2, [pc, #656]	; (7f0c <setup+0x82c>)
    7c7c:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7c7e:	2200      	movs	r2, #0
    7c80:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7c82:	499e      	ldr	r1, [pc, #632]	; (7efc <setup+0x81c>)
    7c84:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7c86:	6102      	str	r2, [r0, #16]
    7c88:	2102      	movs	r1, #2
    7c8a:	7501      	strb	r1, [r0, #20]
    7c8c:	7582      	strb	r2, [r0, #22]
    7c8e:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7c90:	f8d4 18c8 	ldr.w	r1, [r4, #2248]	; 0x8c8
    7c94:	f8d4 28cc 	ldr.w	r2, [r4, #2252]	; 0x8cc
    7c98:	4291      	cmp	r1, r2
    7c9a:	f000 82aa 	beq.w	81f2 <setup+0xb12>
    7c9e:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7ca0:	f8d4 38c8 	ldr.w	r3, [r4, #2248]	; 0x8c8
    7ca4:	3304      	adds	r3, #4
    7ca6:	f8c4 38c8 	str.w	r3, [r4, #2248]	; 0x8c8
        _numVoices++;
    7caa:	4b95      	ldr	r3, [pc, #596]	; (7f00 <setup+0x820>)
    7cac:	f893 28c0 	ldrb.w	r2, [r3, #2240]	; 0x8c0
    7cb0:	3201      	adds	r2, #1
    7cb2:	b2d2      	uxtb	r2, r2
    7cb4:	f883 28c0 	strb.w	r2, [r3, #2240]	; 0x8c0
        if (numVoices > _numVoices)
    7cb8:	f893 3970 	ldrb.w	r3, [r3, #2416]	; 0x970
    7cbc:	429a      	cmp	r2, r3
    7cbe:	f240 82cd 	bls.w	825c <setup+0xb7c>
            for (int i=_numVoices; i < numVoices; i++) {
    7cc2:	d912      	bls.n	7cea <setup+0x60a>
    7cc4:	f603 145f 	addw	r4, r3, #2399	; 0x95f
    7cc8:	498d      	ldr	r1, [pc, #564]	; (7f00 <setup+0x820>)
    7cca:	440c      	add	r4, r1
    7ccc:	4890      	ldr	r0, [pc, #576]	; (7f10 <setup+0x830>)
    7cce:	4418      	add	r0, r3
    7cd0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7cd4:	f601 135f 	addw	r3, r1, #2399	; 0x95f
    7cd8:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7cda:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7cdc:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7cde:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7ce2:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7ce6:	429c      	cmp	r4, r3
    7ce8:	d1f9      	bne.n	7cde <setup+0x5fe>
        _numVoices = numVoices;
    7cea:	4c85      	ldr	r4, [pc, #532]	; (7f00 <setup+0x820>)
    7cec:	f884 2970 	strb.w	r2, [r4, #2416]	; 0x970
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7cf0:	2018      	movs	r0, #24
    7cf2:	f00f fb97 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7cf6:	4a87      	ldr	r2, [pc, #540]	; (7f14 <setup+0x834>)
    7cf8:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7cfa:	4a87      	ldr	r2, [pc, #540]	; (7f18 <setup+0x838>)
    7cfc:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7cfe:	2200      	movs	r2, #0
    7d00:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7d02:	497e      	ldr	r1, [pc, #504]	; (7efc <setup+0x81c>)
    7d04:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7d06:	6102      	str	r2, [r0, #16]
    7d08:	2103      	movs	r1, #3
    7d0a:	7501      	strb	r1, [r0, #20]
    7d0c:	7582      	strb	r2, [r0, #22]
    7d0e:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7d10:	f8d4 1a08 	ldr.w	r1, [r4, #2568]	; 0xa08
    7d14:	f8d4 2a0c 	ldr.w	r2, [r4, #2572]	; 0xa0c
    7d18:	4291      	cmp	r1, r2
    7d1a:	f000 82b8 	beq.w	828e <setup+0xbae>
    7d1e:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7d20:	f8d4 3a08 	ldr.w	r3, [r4, #2568]	; 0xa08
    7d24:	3304      	adds	r3, #4
    7d26:	f8c4 3a08 	str.w	r3, [r4, #2568]	; 0xa08
        _numVoices++;
    7d2a:	4b75      	ldr	r3, [pc, #468]	; (7f00 <setup+0x820>)
    7d2c:	f893 2a00 	ldrb.w	r2, [r3, #2560]	; 0xa00
    7d30:	3201      	adds	r2, #1
    7d32:	b2d2      	uxtb	r2, r2
    7d34:	f883 2a00 	strb.w	r2, [r3, #2560]	; 0xa00
        if (numVoices > _numVoices)
    7d38:	f893 3ab0 	ldrb.w	r3, [r3, #2736]	; 0xab0
    7d3c:	429a      	cmp	r2, r3
    7d3e:	f240 82ab 	bls.w	8298 <setup+0xbb8>
            for (int i=_numVoices; i < numVoices; i++) {
    7d42:	d912      	bls.n	7d6a <setup+0x68a>
    7d44:	f603 249f 	addw	r4, r3, #2719	; 0xa9f
    7d48:	496d      	ldr	r1, [pc, #436]	; (7f00 <setup+0x820>)
    7d4a:	440c      	add	r4, r1
    7d4c:	4873      	ldr	r0, [pc, #460]	; (7f1c <setup+0x83c>)
    7d4e:	4418      	add	r0, r3
    7d50:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7d54:	f601 239f 	addw	r3, r1, #2719	; 0xa9f
    7d58:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7d5a:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7d5c:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7d5e:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7d62:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7d66:	429c      	cmp	r4, r3
    7d68:	d1f9      	bne.n	7d5e <setup+0x67e>
        _numVoices = numVoices;
    7d6a:	4c65      	ldr	r4, [pc, #404]	; (7f00 <setup+0x820>)
    7d6c:	f884 2ab0 	strb.w	r2, [r4, #2736]	; 0xab0
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7d70:	2018      	movs	r0, #24
    7d72:	f00f fb57 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7d76:	4a6a      	ldr	r2, [pc, #424]	; (7f20 <setup+0x840>)
    7d78:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7d7a:	4a6a      	ldr	r2, [pc, #424]	; (7f24 <setup+0x844>)
    7d7c:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7d7e:	2200      	movs	r2, #0
    7d80:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7d82:	4969      	ldr	r1, [pc, #420]	; (7f28 <setup+0x848>)
    7d84:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7d86:	6102      	str	r2, [r0, #16]
    7d88:	7502      	strb	r2, [r0, #20]
    7d8a:	7582      	strb	r2, [r0, #22]
    7d8c:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7d8e:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
    7d92:	f8d4 2b4c 	ldr.w	r2, [r4, #2892]	; 0xb4c
    7d96:	4291      	cmp	r1, r2
    7d98:	f000 8297 	beq.w	82ca <setup+0xbea>
    7d9c:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7d9e:	f8d4 3b48 	ldr.w	r3, [r4, #2888]	; 0xb48
    7da2:	3304      	adds	r3, #4
    7da4:	f8c4 3b48 	str.w	r3, [r4, #2888]	; 0xb48
        _numVoices++;
    7da8:	4b55      	ldr	r3, [pc, #340]	; (7f00 <setup+0x820>)
    7daa:	f893 2b40 	ldrb.w	r2, [r3, #2880]	; 0xb40
    7dae:	3201      	adds	r2, #1
    7db0:	b2d2      	uxtb	r2, r2
    7db2:	f883 2b40 	strb.w	r2, [r3, #2880]	; 0xb40
        if (numVoices > _numVoices)
    7db6:	f893 3bf0 	ldrb.w	r3, [r3, #3056]	; 0xbf0
    7dba:	429a      	cmp	r2, r3
    7dbc:	f240 828a 	bls.w	82d4 <setup+0xbf4>
            for (int i=_numVoices; i < numVoices; i++) {
    7dc0:	d912      	bls.n	7de8 <setup+0x708>
    7dc2:	f603 34df 	addw	r4, r3, #3039	; 0xbdf
    7dc6:	494e      	ldr	r1, [pc, #312]	; (7f00 <setup+0x820>)
    7dc8:	440c      	add	r4, r1
    7dca:	4858      	ldr	r0, [pc, #352]	; (7f2c <setup+0x84c>)
    7dcc:	4418      	add	r0, r3
    7dce:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7dd2:	f601 33df 	addw	r3, r1, #3039	; 0xbdf
    7dd6:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7dd8:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7dda:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7ddc:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7de0:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7de4:	42a3      	cmp	r3, r4
    7de6:	d1f9      	bne.n	7ddc <setup+0x6fc>
        _numVoices = numVoices;
    7de8:	4c45      	ldr	r4, [pc, #276]	; (7f00 <setup+0x820>)
    7dea:	f884 2bf0 	strb.w	r2, [r4, #3056]	; 0xbf0
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7dee:	2018      	movs	r0, #24
    7df0:	f00f fb18 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7df4:	4a4e      	ldr	r2, [pc, #312]	; (7f30 <setup+0x850>)
    7df6:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7df8:	4a4e      	ldr	r2, [pc, #312]	; (7f34 <setup+0x854>)
    7dfa:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7dfc:	2200      	movs	r2, #0
    7dfe:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7e00:	4949      	ldr	r1, [pc, #292]	; (7f28 <setup+0x848>)
    7e02:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7e04:	6102      	str	r2, [r0, #16]
    7e06:	2101      	movs	r1, #1
    7e08:	7501      	strb	r1, [r0, #20]
    7e0a:	7582      	strb	r2, [r0, #22]
    7e0c:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7e0e:	f8d4 1c88 	ldr.w	r1, [r4, #3208]	; 0xc88
    7e12:	f8d4 2c8c 	ldr.w	r2, [r4, #3212]	; 0xc8c
    7e16:	4291      	cmp	r1, r2
    7e18:	f000 8275 	beq.w	8306 <setup+0xc26>
    7e1c:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7e1e:	f8d4 3c88 	ldr.w	r3, [r4, #3208]	; 0xc88
    7e22:	3304      	adds	r3, #4
    7e24:	f8c4 3c88 	str.w	r3, [r4, #3208]	; 0xc88
        _numVoices++;
    7e28:	4b35      	ldr	r3, [pc, #212]	; (7f00 <setup+0x820>)
    7e2a:	f893 2c80 	ldrb.w	r2, [r3, #3200]	; 0xc80
    7e2e:	3201      	adds	r2, #1
    7e30:	b2d2      	uxtb	r2, r2
    7e32:	f883 2c80 	strb.w	r2, [r3, #3200]	; 0xc80
        if (numVoices > _numVoices)
    7e36:	f893 3d30 	ldrb.w	r3, [r3, #3376]	; 0xd30
    7e3a:	429a      	cmp	r2, r3
    7e3c:	f240 8268 	bls.w	8310 <setup+0xc30>
            for (int i=_numVoices; i < numVoices; i++) {
    7e40:	d912      	bls.n	7e68 <setup+0x788>
    7e42:	f603 541f 	addw	r4, r3, #3359	; 0xd1f
    7e46:	492e      	ldr	r1, [pc, #184]	; (7f00 <setup+0x820>)
    7e48:	440c      	add	r4, r1
    7e4a:	483b      	ldr	r0, [pc, #236]	; (7f38 <setup+0x858>)
    7e4c:	4418      	add	r0, r3
    7e4e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7e52:	f601 531f 	addw	r3, r1, #3359	; 0xd1f
    7e56:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7e58:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7e5a:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7e5c:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7e60:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7e64:	429c      	cmp	r4, r3
    7e66:	d1f9      	bne.n	7e5c <setup+0x77c>
        _numVoices = numVoices;
    7e68:	4c25      	ldr	r4, [pc, #148]	; (7f00 <setup+0x820>)
    7e6a:	f884 2d30 	strb.w	r2, [r4, #3376]	; 0xd30
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7e6e:	2018      	movs	r0, #24
    7e70:	f00f fad8 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7e74:	4a31      	ldr	r2, [pc, #196]	; (7f3c <setup+0x85c>)
    7e76:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7e78:	4a31      	ldr	r2, [pc, #196]	; (7f40 <setup+0x860>)
    7e7a:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7e7c:	2200      	movs	r2, #0
    7e7e:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7e80:	4929      	ldr	r1, [pc, #164]	; (7f28 <setup+0x848>)
    7e82:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7e84:	6102      	str	r2, [r0, #16]
    7e86:	2102      	movs	r1, #2
    7e88:	7501      	strb	r1, [r0, #20]
    7e8a:	7582      	strb	r2, [r0, #22]
    7e8c:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7e8e:	f8d4 1dc8 	ldr.w	r1, [r4, #3528]	; 0xdc8
    7e92:	f8d4 2dcc 	ldr.w	r2, [r4, #3532]	; 0xdcc
    7e96:	4291      	cmp	r1, r2
    7e98:	f000 8253 	beq.w	8342 <setup+0xc62>
    7e9c:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7e9e:	f8d4 3dc8 	ldr.w	r3, [r4, #3528]	; 0xdc8
    7ea2:	3304      	adds	r3, #4
    7ea4:	f8c4 3dc8 	str.w	r3, [r4, #3528]	; 0xdc8
        _numVoices++;
    7ea8:	4b15      	ldr	r3, [pc, #84]	; (7f00 <setup+0x820>)
    7eaa:	f893 2dc0 	ldrb.w	r2, [r3, #3520]	; 0xdc0
    7eae:	3201      	adds	r2, #1
    7eb0:	b2d2      	uxtb	r2, r2
    7eb2:	f883 2dc0 	strb.w	r2, [r3, #3520]	; 0xdc0
        if (numVoices > _numVoices)
    7eb6:	f893 3e70 	ldrb.w	r3, [r3, #3696]	; 0xe70
    7eba:	429a      	cmp	r2, r3
    7ebc:	f240 8246 	bls.w	834c <setup+0xc6c>
            for (int i=_numVoices; i < numVoices; i++) {
    7ec0:	d912      	bls.n	7ee8 <setup+0x808>
    7ec2:	f603 645f 	addw	r4, r3, #3679	; 0xe5f
    7ec6:	490e      	ldr	r1, [pc, #56]	; (7f00 <setup+0x820>)
    7ec8:	440c      	add	r4, r1
    7eca:	481e      	ldr	r0, [pc, #120]	; (7f44 <setup+0x864>)
    7ecc:	4418      	add	r0, r3
    7ece:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7ed2:	f601 635f 	addw	r3, r1, #3679	; 0xe5f
    7ed6:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7ed8:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7eda:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7edc:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7ee0:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7ee4:	42a3      	cmp	r3, r4
    7ee6:	d1f9      	bne.n	7edc <setup+0x7fc>
        _numVoices = numVoices;
    7ee8:	4c05      	ldr	r4, [pc, #20]	; (7f00 <setup+0x820>)
    7eea:	f884 2e70 	strb.w	r2, [r4, #3696]	; 0xe70
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7eee:	2018      	movs	r0, #24
    7ef0:	e02a      	b.n	7f48 <setup+0x868>
    7ef2:	bf00      	nop
    7ef4:	200089f4 	.word	0x200089f4
    7ef8:	2000765c 	.word	0x2000765c
    7efc:	20007e68 	.word	0x20007e68
    7f00:	700001e0 	.word	0x700001e0
    7f04:	4000020c 	.word	0x4000020c
    7f08:	20008a10 	.word	0x20008a10
    7f0c:	20007694 	.word	0x20007694
    7f10:	4000025c 	.word	0x4000025c
    7f14:	20008a2c 	.word	0x20008a2c
    7f18:	200076cc 	.word	0x200076cc
    7f1c:	400002ac 	.word	0x400002ac
    7f20:	20008a48 	.word	0x20008a48
    7f24:	20007704 	.word	0x20007704
    7f28:	20007ea0 	.word	0x20007ea0
    7f2c:	400002fc 	.word	0x400002fc
    7f30:	20008610 	.word	0x20008610
    7f34:	20007464 	.word	0x20007464
    7f38:	4000034c 	.word	0x4000034c
    7f3c:	2000862c 	.word	0x2000862c
    7f40:	2000749c 	.word	0x2000749c
    7f44:	4000039c 	.word	0x4000039c
    7f48:	f00f fa6c 	bl	17424 <operator new(unsigned int)>
        _audioplayarray(audioplayarray), 
    7f4c:	4aab      	ldr	r2, [pc, #684]	; (81fc <setup+0xb1c>)
    7f4e:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7f50:	4aab      	ldr	r2, [pc, #684]	; (8200 <setup+0xb20>)
    7f52:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7f54:	2200      	movs	r2, #0
    7f56:	6082      	str	r2, [r0, #8]
        _audiomixer(audiomixer),
    7f58:	49aa      	ldr	r1, [pc, #680]	; (8204 <setup+0xb24>)
    7f5a:	60c1      	str	r1, [r0, #12]
        _mixerChannel(mixerChannel)
    7f5c:	6102      	str	r2, [r0, #16]
    7f5e:	2103      	movs	r1, #3
    7f60:	7501      	strb	r1, [r0, #20]
    7f62:	7582      	strb	r2, [r0, #22]
    7f64:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7f66:	f8d4 1f08 	ldr.w	r1, [r4, #3848]	; 0xf08
    7f6a:	f8d4 2f0c 	ldr.w	r2, [r4, #3852]	; 0xf0c
    7f6e:	4291      	cmp	r1, r2
    7f70:	f000 8205 	beq.w	837e <setup+0xc9e>
    7f74:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    7f76:	f8d4 3f08 	ldr.w	r3, [r4, #3848]	; 0xf08
    7f7a:	3304      	adds	r3, #4
    7f7c:	f8c4 3f08 	str.w	r3, [r4, #3848]	; 0xf08
        _numVoices++;
    7f80:	4ba1      	ldr	r3, [pc, #644]	; (8208 <setup+0xb28>)
    7f82:	f893 2f00 	ldrb.w	r2, [r3, #3840]	; 0xf00
    7f86:	3201      	adds	r2, #1
    7f88:	b2d2      	uxtb	r2, r2
    7f8a:	f883 2f00 	strb.w	r2, [r3, #3840]	; 0xf00
        if (numVoices > _numVoices)
    7f8e:	f893 3fb0 	ldrb.w	r3, [r3, #4016]	; 0xfb0
    7f92:	429a      	cmp	r2, r3
    7f94:	f240 81f8 	bls.w	8388 <setup+0xca8>
            for (int i=_numVoices; i < numVoices; i++) {
    7f98:	d912      	bls.n	7fc0 <setup+0x8e0>
    7f9a:	f603 749f 	addw	r4, r3, #3999	; 0xf9f
    7f9e:	499a      	ldr	r1, [pc, #616]	; (8208 <setup+0xb28>)
    7fa0:	440c      	add	r4, r1
    7fa2:	489a      	ldr	r0, [pc, #616]	; (820c <setup+0xb2c>)
    7fa4:	4418      	add	r0, r3
    7fa6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    7faa:	f601 739f 	addw	r3, r1, #3999	; 0xf9f
    7fae:	4413      	add	r3, r2
              activeVoices[i] = 255;
    7fb0:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    7fb2:	2100      	movs	r1, #0
              activeVoices[i] = 255;
    7fb4:	f804 5f01 	strb.w	r5, [r4, #1]!
              voice_noteOff[i] = 0;
    7fb8:	f840 1f04 	str.w	r1, [r0, #4]!
            for (int i=_numVoices; i < numVoices; i++) {
    7fbc:	42a3      	cmp	r3, r4
    7fbe:	d1f9      	bne.n	7fb4 <setup+0x8d4>
        _numVoices = numVoices;
    7fc0:	4b91      	ldr	r3, [pc, #580]	; (8208 <setup+0xb28>)
    7fc2:	f883 2fb0 	strb.w	r2, [r3, #4016]	; 0xfb0
    7fc6:	4a92      	ldr	r2, [pc, #584]	; (8210 <setup+0xb30>)
    7fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    7fcc:	6193      	str	r3, [r2, #24]
    7fce:	61d3      	str	r3, [r2, #28]
    7fd0:	6213      	str	r3, [r2, #32]
    7fd2:	6253      	str	r3, [r2, #36]	; 0x24
    7fd4:	4a8f      	ldr	r2, [pc, #572]	; (8214 <setup+0xb34>)
    7fd6:	6193      	str	r3, [r2, #24]
    7fd8:	61d3      	str	r3, [r2, #28]
    7fda:	6213      	str	r3, [r2, #32]
    7fdc:	6253      	str	r3, [r2, #36]	; 0x24
    7fde:	4a89      	ldr	r2, [pc, #548]	; (8204 <setup+0xb24>)
    7fe0:	6193      	str	r3, [r2, #24]
    7fe2:	61d3      	str	r3, [r2, #28]
    7fe4:	6213      	str	r3, [r2, #32]
    7fe6:	6253      	str	r3, [r2, #36]	; 0x24
    7fe8:	4a8b      	ldr	r2, [pc, #556]	; (8218 <setup+0xb38>)
    7fea:	6193      	str	r3, [r2, #24]
    7fec:	61d3      	str	r3, [r2, #28]
    7fee:	6213      	str	r3, [r2, #32]
    7ff0:	6253      	str	r3, [r2, #36]	; 0x24
    7ff2:	4a8a      	ldr	r2, [pc, #552]	; (821c <setup+0xb3c>)
    7ff4:	6193      	str	r3, [r2, #24]
    7ff6:	61d3      	str	r3, [r2, #28]
    7ff8:	6213      	str	r3, [r2, #32]
    7ffa:	6253      	str	r3, [r2, #36]	; 0x24
			n = 1.0f;
		}
		pulse_width = n * 4294967296.0f;
	}
	void begin(short t_type) {
		phase_offset = 0;
    7ffc:	4a88      	ldr	r2, [pc, #544]	; (8220 <setup+0xb40>)
    7ffe:	2700      	movs	r7, #0
    8000:	6217      	str	r7, [r2, #32]
		tone_type = t_type;
    8002:	2101      	movs	r1, #1
    8004:	8651      	strh	r1, [r2, #50]	; 0x32
		magnitude = n * 65536.0f;
    8006:	f644 40cc 	movw	r0, #19660	; 0x4ccc
    800a:	6250      	str	r0, [r2, #36]	; 0x24
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    800c:	4e85      	ldr	r6, [pc, #532]	; (8224 <setup+0xb44>)
    800e:	61d6      	str	r6, [r2, #28]
		if (attack_count == 0) attack_count = 1;
    8010:	4a85      	ldr	r2, [pc, #532]	; (8228 <setup+0xb48>)
    8012:	8551      	strh	r1, [r2, #42]	; 0x2a
		decay_count = milliseconds2count(milliseconds);
    8014:	f240 454f 	movw	r5, #1103	; 0x44f
    8018:	85d5      	strh	r5, [r2, #46]	; 0x2e
		sustain_mult = level * 1073741824.0f;
    801a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    801e:	6314      	str	r4, [r2, #48]	; 0x30
		release_count = milliseconds2count(milliseconds);
    8020:	f640 20c5 	movw	r0, #2757	; 0xac5
    8024:	8690      	strh	r0, [r2, #52]	; 0x34
		phase_offset = 0;
    8026:	4a81      	ldr	r2, [pc, #516]	; (822c <setup+0xb4c>)
    8028:	6217      	str	r7, [r2, #32]
		tone_type = t_type;
    802a:	2702      	movs	r7, #2
    802c:	8657      	strh	r7, [r2, #50]	; 0x32
		magnitude = n * 65536.0f;
    802e:	6253      	str	r3, [r2, #36]	; 0x24
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    8030:	61d6      	str	r6, [r2, #28]
		if (attack_count == 0) attack_count = 1;
    8032:	4b7f      	ldr	r3, [pc, #508]	; (8230 <setup+0xb50>)
    8034:	8559      	strh	r1, [r3, #42]	; 0x2a
		decay_count = milliseconds2count(milliseconds);
    8036:	85dd      	strh	r5, [r3, #46]	; 0x2e
		sustain_mult = level * 1073741824.0f;
    8038:	631c      	str	r4, [r3, #48]	; 0x30
		release_count = milliseconds2count(milliseconds);
    803a:	8698      	strh	r0, [r3, #52]	; 0x34
  for (unsigned int i = 1; i < maxFilters; i++) {
    803c:	4b7d      	ldr	r3, [pc, #500]	; (8234 <setup+0xb54>)
    803e:	f103 0038 	add.w	r0, r3, #56	; 0x38
    envelopes[i]->attack(0);
    8042:	f853 2f04 	ldr.w	r2, [r3, #4]!
		if (attack_count == 0) attack_count = 1;
    8046:	8551      	strh	r1, [r2, #42]	; 0x2a
  for (unsigned int i = 1; i < maxFilters; i++) {
    8048:	4298      	cmp	r0, r3
    804a:	d1fa      	bne.n	8042 <setup+0x962>
    804c:	4d7a      	ldr	r5, [pc, #488]	; (8238 <setup+0xb58>)
    804e:	1f2c      	subs	r4, r5, #4
    8050:	3520      	adds	r5, #32
            _interpolationType = interpolationType;
    8052:	2603      	movs	r6, #3
    8054:	e1b3      	b.n	83be <setup+0xcde>
	  _M_realloc_insert(end(), __x);
    8056:	aa01      	add	r2, sp, #4
    8058:	4878      	ldr	r0, [pc, #480]	; (823c <setup+0xb5c>)
    805a:	f7ff f8ad 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    805e:	e43a      	b.n	78d6 <setup+0x1f6>
        else if (numVoices < _numVoices) {
    8060:	429a      	cmp	r2, r3
    8062:	f4bf ac56 	bcs.w	7912 <setup+0x232>
            for (int i=_numVoices; i > numVoices; i--) {
    8066:	f4bf ac54 	bcs.w	7912 <setup+0x232>
    806a:	f103 00a1 	add.w	r0, r3, #161	; 0xa1
    806e:	4966      	ldr	r1, [pc, #408]	; (8208 <setup+0xb28>)
    8070:	4408      	add	r0, r1
    8072:	332e      	adds	r3, #46	; 0x2e
    8074:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8078:	31a1      	adds	r1, #161	; 0xa1
    807a:	4411      	add	r1, r2
              activeVoices[i] = 255;
    807c:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    807e:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    8080:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    8084:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    8088:	4288      	cmp	r0, r1
    808a:	d1f9      	bne.n	8080 <setup+0x9a0>
    808c:	e441      	b.n	7912 <setup+0x232>
    808e:	aa01      	add	r2, sp, #4
    8090:	486b      	ldr	r0, [pc, #428]	; (8240 <setup+0xb60>)
    8092:	f7ff f891 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8096:	e45b      	b.n	7950 <setup+0x270>
        else if (numVoices < _numVoices) {
    8098:	429a      	cmp	r2, r3
    809a:	f4bf ac79 	bcs.w	7990 <setup+0x2b0>
            for (int i=_numVoices; i > numVoices; i--) {
    809e:	f4bf ac77 	bcs.w	7990 <setup+0x2b0>
    80a2:	f203 10e1 	addw	r0, r3, #481	; 0x1e1
    80a6:	4958      	ldr	r1, [pc, #352]	; (8208 <setup+0xb28>)
    80a8:	4408      	add	r0, r1
    80aa:	337e      	adds	r3, #126	; 0x7e
    80ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    80b0:	f201 11e1 	addw	r1, r1, #481	; 0x1e1
    80b4:	4411      	add	r1, r2
              activeVoices[i] = 255;
    80b6:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    80b8:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    80ba:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    80be:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    80c2:	4288      	cmp	r0, r1
    80c4:	d1f9      	bne.n	80ba <setup+0x9da>
    80c6:	e463      	b.n	7990 <setup+0x2b0>
    80c8:	aa01      	add	r2, sp, #4
    80ca:	485e      	ldr	r0, [pc, #376]	; (8244 <setup+0xb64>)
    80cc:	f7ff f874 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    80d0:	e47e      	b.n	79d0 <setup+0x2f0>
        else if (numVoices < _numVoices) {
    80d2:	429a      	cmp	r2, r3
    80d4:	f4bf ac9c 	bcs.w	7a10 <setup+0x330>
            for (int i=_numVoices; i > numVoices; i--) {
    80d8:	f4bf ac9a 	bcs.w	7a10 <setup+0x330>
    80dc:	f203 3021 	addw	r0, r3, #801	; 0x321
    80e0:	4949      	ldr	r1, [pc, #292]	; (8208 <setup+0xb28>)
    80e2:	4408      	add	r0, r1
    80e4:	33ce      	adds	r3, #206	; 0xce
    80e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    80ea:	f201 3121 	addw	r1, r1, #801	; 0x321
    80ee:	4411      	add	r1, r2
              activeVoices[i] = 255;
    80f0:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    80f2:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    80f4:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    80f8:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    80fc:	4288      	cmp	r0, r1
    80fe:	d1f9      	bne.n	80f4 <setup+0xa14>
    8100:	e486      	b.n	7a10 <setup+0x330>
    8102:	aa01      	add	r2, sp, #4
    8104:	4850      	ldr	r0, [pc, #320]	; (8248 <setup+0xb68>)
    8106:	f7ff f857 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    810a:	e4a1      	b.n	7a50 <setup+0x370>
        else if (numVoices < _numVoices) {
    810c:	429a      	cmp	r2, r3
    810e:	f4bf acbf 	bcs.w	7a90 <setup+0x3b0>
            for (int i=_numVoices; i > numVoices; i--) {
    8112:	f4bf acbd 	bcs.w	7a90 <setup+0x3b0>
    8116:	f203 4061 	addw	r0, r3, #1121	; 0x461
    811a:	493b      	ldr	r1, [pc, #236]	; (8208 <setup+0xb28>)
    811c:	4408      	add	r0, r1
    811e:	f503 738f 	add.w	r3, r3, #286	; 0x11e
    8122:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8126:	f201 4161 	addw	r1, r1, #1121	; 0x461
    812a:	4411      	add	r1, r2
              activeVoices[i] = 255;
    812c:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    812e:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    8130:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    8134:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    8138:	4288      	cmp	r0, r1
    813a:	d1f9      	bne.n	8130 <setup+0xa50>
    813c:	e4a8      	b.n	7a90 <setup+0x3b0>
    813e:	aa01      	add	r2, sp, #4
    8140:	4842      	ldr	r0, [pc, #264]	; (824c <setup+0xb6c>)
    8142:	f7ff f839 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8146:	e4c3      	b.n	7ad0 <setup+0x3f0>
        else if (numVoices < _numVoices) {
    8148:	429a      	cmp	r2, r3
    814a:	f4bf ace1 	bcs.w	7b10 <setup+0x430>
            for (int i=_numVoices; i > numVoices; i--) {
    814e:	f4bf acdf 	bcs.w	7b10 <setup+0x430>
    8152:	f203 50a1 	addw	r0, r3, #1441	; 0x5a1
    8156:	492c      	ldr	r1, [pc, #176]	; (8208 <setup+0xb28>)
    8158:	4408      	add	r0, r1
    815a:	f503 73b7 	add.w	r3, r3, #366	; 0x16e
    815e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8162:	f201 51a1 	addw	r1, r1, #1441	; 0x5a1
    8166:	4411      	add	r1, r2
              activeVoices[i] = 255;
    8168:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    816a:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    816c:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    8170:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    8174:	4288      	cmp	r0, r1
    8176:	d1f9      	bne.n	816c <setup+0xa8c>
    8178:	e4ca      	b.n	7b10 <setup+0x430>
    817a:	aa01      	add	r2, sp, #4
    817c:	4834      	ldr	r0, [pc, #208]	; (8250 <setup+0xb70>)
    817e:	f7ff f81b 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8182:	e4e4      	b.n	7b4e <setup+0x46e>
        else if (numVoices < _numVoices) {
    8184:	429a      	cmp	r2, r3
    8186:	f4bf ad02 	bcs.w	7b8e <setup+0x4ae>
            for (int i=_numVoices; i > numVoices; i--) {
    818a:	f4bf ad00 	bcs.w	7b8e <setup+0x4ae>
    818e:	f203 60e1 	addw	r0, r3, #1761	; 0x6e1
    8192:	491d      	ldr	r1, [pc, #116]	; (8208 <setup+0xb28>)
    8194:	4408      	add	r0, r1
    8196:	f503 73df 	add.w	r3, r3, #446	; 0x1be
    819a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    819e:	f201 61e1 	addw	r1, r1, #1761	; 0x6e1
    81a2:	4411      	add	r1, r2
              activeVoices[i] = 255;
    81a4:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    81a6:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    81a8:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    81ac:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    81b0:	4288      	cmp	r0, r1
    81b2:	d1f9      	bne.n	81a8 <setup+0xac8>
    81b4:	e4eb      	b.n	7b8e <setup+0x4ae>
    81b6:	aa01      	add	r2, sp, #4
    81b8:	4826      	ldr	r0, [pc, #152]	; (8254 <setup+0xb74>)
    81ba:	f7fe fffd 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    81be:	e534      	b.n	7c2a <setup+0x54a>
        else if (numVoices < _numVoices) {
    81c0:	429a      	cmp	r2, r3
    81c2:	f4bf ad52 	bcs.w	7c6a <setup+0x58a>
            for (int i=_numVoices; i > numVoices; i--) {
    81c6:	f4bf ad50 	bcs.w	7c6a <setup+0x58a>
    81ca:	f603 0021 	addw	r0, r3, #2081	; 0x821
    81ce:	490e      	ldr	r1, [pc, #56]	; (8208 <setup+0xb28>)
    81d0:	4408      	add	r0, r1
    81d2:	f203 230e 	addw	r3, r3, #526	; 0x20e
    81d6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    81da:	f601 0121 	addw	r1, r1, #2081	; 0x821
    81de:	4411      	add	r1, r2
              activeVoices[i] = 255;
    81e0:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    81e2:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    81e4:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    81e8:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    81ec:	4288      	cmp	r0, r1
    81ee:	d1f9      	bne.n	81e4 <setup+0xb04>
    81f0:	e53b      	b.n	7c6a <setup+0x58a>
    81f2:	aa01      	add	r2, sp, #4
    81f4:	4818      	ldr	r0, [pc, #96]	; (8258 <setup+0xb78>)
    81f6:	f7fe ffdf 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    81fa:	e556      	b.n	7caa <setup+0x5ca>
    81fc:	20008648 	.word	0x20008648
    8200:	200074d4 	.word	0x200074d4
    8204:	20007ea0 	.word	0x20007ea0
    8208:	700001e0 	.word	0x700001e0
    820c:	400003ec 	.word	0x400003ec
    8210:	20007e30 	.word	0x20007e30
    8214:	20007e68 	.word	0x20007e68
    8218:	20007ed8 	.word	0x20007ed8
    821c:	20007f10 	.word	0x20007f10
    8220:	20008664 	.word	0x20008664
    8224:	0184c998 	.word	0x0184c998
    8228:	2000750c 	.word	0x2000750c
    822c:	200087f4 	.word	0x200087f4
    8230:	20007544 	.word	0x20007544
    8234:	20005844 	.word	0x20005844
    8238:	20005c18 	.word	0x20005c18
    823c:	700001e4 	.word	0x700001e4
    8240:	70000324 	.word	0x70000324
    8244:	70000464 	.word	0x70000464
    8248:	700005a4 	.word	0x700005a4
    824c:	700006e4 	.word	0x700006e4
    8250:	70000824 	.word	0x70000824
    8254:	70000964 	.word	0x70000964
    8258:	70000aa4 	.word	0x70000aa4
        else if (numVoices < _numVoices) {
    825c:	429a      	cmp	r2, r3
    825e:	f4bf ad44 	bcs.w	7cea <setup+0x60a>
            for (int i=_numVoices; i > numVoices; i--) {
    8262:	f4bf ad42 	bcs.w	7cea <setup+0x60a>
    8266:	f603 1061 	addw	r0, r3, #2401	; 0x961
    826a:	49b6      	ldr	r1, [pc, #728]	; (8544 <setup+0xe64>)
    826c:	4408      	add	r0, r1
    826e:	f203 235e 	addw	r3, r3, #606	; 0x25e
    8272:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8276:	f601 1161 	addw	r1, r1, #2401	; 0x961
    827a:	4411      	add	r1, r2
              activeVoices[i] = 255;
    827c:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    827e:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    8280:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    8284:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    8288:	4288      	cmp	r0, r1
    828a:	d1f9      	bne.n	8280 <setup+0xba0>
    828c:	e52d      	b.n	7cea <setup+0x60a>
    828e:	aa01      	add	r2, sp, #4
    8290:	48ad      	ldr	r0, [pc, #692]	; (8548 <setup+0xe68>)
    8292:	f7fe ff91 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8296:	e548      	b.n	7d2a <setup+0x64a>
        else if (numVoices < _numVoices) {
    8298:	429a      	cmp	r2, r3
    829a:	f4bf ad66 	bcs.w	7d6a <setup+0x68a>
            for (int i=_numVoices; i > numVoices; i--) {
    829e:	f4bf ad64 	bcs.w	7d6a <setup+0x68a>
    82a2:	f603 20a1 	addw	r0, r3, #2721	; 0xaa1
    82a6:	49a7      	ldr	r1, [pc, #668]	; (8544 <setup+0xe64>)
    82a8:	4408      	add	r0, r1
    82aa:	f203 23ae 	addw	r3, r3, #686	; 0x2ae
    82ae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    82b2:	f601 21a1 	addw	r1, r1, #2721	; 0xaa1
    82b6:	4411      	add	r1, r2
              activeVoices[i] = 255;
    82b8:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    82ba:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    82bc:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    82c0:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    82c4:	4288      	cmp	r0, r1
    82c6:	d1f9      	bne.n	82bc <setup+0xbdc>
    82c8:	e54f      	b.n	7d6a <setup+0x68a>
    82ca:	aa01      	add	r2, sp, #4
    82cc:	489f      	ldr	r0, [pc, #636]	; (854c <setup+0xe6c>)
    82ce:	f7fe ff73 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    82d2:	e569      	b.n	7da8 <setup+0x6c8>
        else if (numVoices < _numVoices) {
    82d4:	429a      	cmp	r2, r3
    82d6:	f4bf ad87 	bcs.w	7de8 <setup+0x708>
            for (int i=_numVoices; i > numVoices; i--) {
    82da:	f4bf ad85 	bcs.w	7de8 <setup+0x708>
    82de:	f603 30e1 	addw	r0, r3, #3041	; 0xbe1
    82e2:	4998      	ldr	r1, [pc, #608]	; (8544 <setup+0xe64>)
    82e4:	4408      	add	r0, r1
    82e6:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
    82ea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    82ee:	f601 31e1 	addw	r1, r1, #3041	; 0xbe1
    82f2:	4411      	add	r1, r2
              activeVoices[i] = 255;
    82f4:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    82f6:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    82f8:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    82fc:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    8300:	4288      	cmp	r0, r1
    8302:	d1f9      	bne.n	82f8 <setup+0xc18>
    8304:	e570      	b.n	7de8 <setup+0x708>
    8306:	aa01      	add	r2, sp, #4
    8308:	4891      	ldr	r0, [pc, #580]	; (8550 <setup+0xe70>)
    830a:	f7fe ff55 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    830e:	e58b      	b.n	7e28 <setup+0x748>
        else if (numVoices < _numVoices) {
    8310:	429a      	cmp	r2, r3
    8312:	f4bf ada9 	bcs.w	7e68 <setup+0x788>
            for (int i=_numVoices; i > numVoices; i--) {
    8316:	f4bf ada7 	bcs.w	7e68 <setup+0x788>
    831a:	f603 5021 	addw	r0, r3, #3361	; 0xd21
    831e:	4989      	ldr	r1, [pc, #548]	; (8544 <setup+0xe64>)
    8320:	4408      	add	r0, r1
    8322:	f203 334e 	addw	r3, r3, #846	; 0x34e
    8326:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    832a:	f601 5121 	addw	r1, r1, #3361	; 0xd21
    832e:	4411      	add	r1, r2
              activeVoices[i] = 255;
    8330:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    8332:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    8334:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    8338:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    833c:	4288      	cmp	r0, r1
    833e:	d1f9      	bne.n	8334 <setup+0xc54>
    8340:	e592      	b.n	7e68 <setup+0x788>
    8342:	aa01      	add	r2, sp, #4
    8344:	4883      	ldr	r0, [pc, #524]	; (8554 <setup+0xe74>)
    8346:	f7fe ff37 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    834a:	e5ad      	b.n	7ea8 <setup+0x7c8>
        else if (numVoices < _numVoices) {
    834c:	429a      	cmp	r2, r3
    834e:	f4bf adcb 	bcs.w	7ee8 <setup+0x808>
            for (int i=_numVoices; i > numVoices; i--) {
    8352:	f4bf adc9 	bcs.w	7ee8 <setup+0x808>
    8356:	f603 6061 	addw	r0, r3, #3681	; 0xe61
    835a:	497a      	ldr	r1, [pc, #488]	; (8544 <setup+0xe64>)
    835c:	4408      	add	r0, r1
    835e:	f203 339e 	addw	r3, r3, #926	; 0x39e
    8362:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    8366:	f601 6161 	addw	r1, r1, #3681	; 0xe61
    836a:	4411      	add	r1, r2
              activeVoices[i] = 255;
    836c:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    836e:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    8370:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    8374:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    8378:	4288      	cmp	r0, r1
    837a:	d1f9      	bne.n	8370 <setup+0xc90>
    837c:	e5b4      	b.n	7ee8 <setup+0x808>
    837e:	aa01      	add	r2, sp, #4
    8380:	4875      	ldr	r0, [pc, #468]	; (8558 <setup+0xe78>)
    8382:	f7fe ff19 	bl	71b8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8386:	e5fb      	b.n	7f80 <setup+0x8a0>
        else if (numVoices < _numVoices) {
    8388:	429a      	cmp	r2, r3
    838a:	f4bf ae19 	bcs.w	7fc0 <setup+0x8e0>
            for (int i=_numVoices; i > numVoices; i--) {
    838e:	f4bf ae17 	bcs.w	7fc0 <setup+0x8e0>
    8392:	f603 70a1 	addw	r0, r3, #4001	; 0xfa1
    8396:	496b      	ldr	r1, [pc, #428]	; (8544 <setup+0xe64>)
    8398:	4408      	add	r0, r1
    839a:	f203 33ee 	addw	r3, r3, #1006	; 0x3ee
    839e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    83a2:	f601 71a1 	addw	r1, r1, #4001	; 0xfa1
    83a6:	4411      	add	r1, r2
              activeVoices[i] = 255;
    83a8:	25ff      	movs	r5, #255	; 0xff
              voice_noteOff[i] = 0;
    83aa:	2400      	movs	r4, #0
              activeVoices[i] = 255;
    83ac:	f800 5d01 	strb.w	r5, [r0, #-1]!
              voice_noteOff[i] = 0;
    83b0:	f843 4d04 	str.w	r4, [r3, #-4]!
            for (int i=_numVoices; i > numVoices; i--) {
    83b4:	4288      	cmp	r0, r1
    83b6:	d1f9      	bne.n	83ac <setup+0xccc>
    83b8:	e602      	b.n	7fc0 <setup+0x8e0>
  for (unsigned int i = 0; i < maxFiles; i++) {
    83ba:	42a5      	cmp	r5, r4
    83bc:	d00b      	beq.n	83d6 <setup+0xcf6>
                reader->setInterpolationType(ResampleInterpolationType::resampleinterpolation_quadratic);
    83be:	f854 3f04 	ldr.w	r3, [r4, #4]!
    83c2:	6998      	ldr	r0, [r3, #24]
        if (interpolationType != _interpolationType) {
    83c4:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    83c8:	2b03      	cmp	r3, #3
    83ca:	d0f6      	beq.n	83ba <setup+0xcda>
            _interpolationType = interpolationType;
    83cc:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
            initializeInterpolationPoints();
    83d0:	f7fe fd22 	bl	6e18 <newdigate::ResamplingReader<short, File>::initializeInterpolationPoints()>
    83d4:	e7f1      	b.n	83ba <setup+0xcda>
  AudioInterrupts();
    83d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    83da:	2240      	movs	r2, #64	; 0x40
    83dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  SMP.bpm = 100;
    83e0:	4b5e      	ldr	r3, [pc, #376]	; (855c <setup+0xe7c>)
    83e2:	2264      	movs	r2, #100	; 0x64
    83e4:	60da      	str	r2, [r3, #12]
        vtable_ptr_ = std::addressof(vt);
    83e6:	4b5e      	ldr	r3, [pc, #376]	; (8560 <setup+0xe80>)
    83e8:	9302      	str	r3, [sp, #8]
        ::new (std::addressof(storage_)) C{std::forward<T>(closure)};
    83ea:	4b5e      	ldr	r3, [pc, #376]	; (8564 <setup+0xe84>)
    83ec:	9304      	str	r3, [sp, #16]
  playTimer.begin(playNote, playNoteInterval);
    83ee:	4b5e      	ldr	r3, [pc, #376]	; (8568 <setup+0xe88>)
    83f0:	681b      	ldr	r3, [r3, #0]
		if (period < 0 || period > MAX_PERIOD)
    83f2:	4a5e      	ldr	r2, [pc, #376]	; (856c <setup+0xe8c>)
    83f4:	4293      	cmp	r3, r2
    83f6:	d814      	bhi.n	8422 <setup+0xd42>
			return (24000000 / 1000000) * period - 1;
    83f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    83fc:	00dc      	lsls	r4, r3, #3
    83fe:	3c01      	subs	r4, #1
		return cycles >= 17 ? beginCycles(funct, cycles) : false;
    8400:	2c10      	cmp	r4, #16
    8402:	d90e      	bls.n	8422 <setup+0xd42>
        vtable_ptr_{other.vtable_ptr_}
    8404:	4b56      	ldr	r3, [pc, #344]	; (8560 <setup+0xe80>)
    8406:	9308      	str	r3, [sp, #32]
        vtable_ptr_->copy_ptr(
    8408:	a904      	add	r1, sp, #16
    840a:	a80a      	add	r0, sp, #40	; 0x28
    840c:	f7f7 ff7c 	bl	308 <teensy::inplace_function_detail::vtable<void>::vtable<void (*)()>(teensy::inplace_function_detail::wrapper<void (*)()>)::{lambda(void*, void*)#2}::_FUN(void*, void*)>
    8410:	4622      	mov	r2, r4
    8412:	a908      	add	r1, sp, #32
    8414:	4856      	ldr	r0, [pc, #344]	; (8570 <setup+0xe90>)
    8416:	f00d fdc5 	bl	15fa4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
    841a:	9b08      	ldr	r3, [sp, #32]
    841c:	68db      	ldr	r3, [r3, #12]
    841e:	a80a      	add	r0, sp, #40	; 0x28
    8420:	4798      	blx	r3
    8422:	9b02      	ldr	r3, [sp, #8]
    8424:	68db      	ldr	r3, [r3, #12]
    8426:	a804      	add	r0, sp, #16
    8428:	4798      	blx	r3
  sgtl5000_1.enable();
    842a:	4c52      	ldr	r4, [pc, #328]	; (8574 <setup+0xe94>)
    842c:	4620      	mov	r0, r4
    842e:	f004 fb27 	bl	ca80 <AudioControlSGTL5000::enable()>
    8432:	2174      	movs	r1, #116	; 0x74
    8434:	4620      	mov	r0, r4
    8436:	f004 fb6a 	bl	cb0e <AudioControlSGTL5000::volumeInteger(unsigned int)>
	bool inputLevel(float n) {return false;}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
    843a:	88e2      	ldrh	r2, [r4, #6]
    843c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8440:	2124      	movs	r1, #36	; 0x24
    8442:	4620      	mov	r0, r4
    8444:	f004 fa16 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
  sgtl5000_1.lineOutLevel(1);
    8448:	2101      	movs	r1, #1
    844a:	4620      	mov	r0, r4
    844c:	f004 fb9e 	bl	cb8c <AudioControlSGTL5000::lineOutLevel(unsigned char)>
  AudioMemory(64);
    8450:	2140      	movs	r1, #64	; 0x40
    8452:	4849      	ldr	r0, [pc, #292]	; (8578 <setup+0xe98>)
    8454:	f020 fa28 	bl	288a8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  autoLoad();
    8458:	f7fe fc86 	bl	6d68 <autoLoad()>
  multiresponseButton1.setSingleClickCallback(&buttonCallbackFunction, (void *)"1");
    845c:	4c47      	ldr	r4, [pc, #284]	; (857c <setup+0xe9c>)
    845e:	4d48      	ldr	r5, [pc, #288]	; (8580 <setup+0xea0>)
    8460:	4a48      	ldr	r2, [pc, #288]	; (8584 <setup+0xea4>)
    8462:	4621      	mov	r1, r4
    8464:	4628      	mov	r0, r5
    8466:	f00c fefd 	bl	15264 <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton1.setLongPressCallback(&buttonCallbackFunction, (void *)"2");
    846a:	4a47      	ldr	r2, [pc, #284]	; (8588 <setup+0xea8>)
    846c:	4621      	mov	r1, r4
    846e:	4628      	mov	r0, r5
    8470:	f00c fef2 	bl	15258 <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton1.setDoubleClickCallback(&buttonCallbackFunction, (void *)"3");
    8474:	4a45      	ldr	r2, [pc, #276]	; (858c <setup+0xeac>)
    8476:	4621      	mov	r1, r4
    8478:	4628      	mov	r0, r5
    847a:	f00c fef0 	bl	1525e <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton1.setReleasedCallback(&buttonCallbackFunction, (void *)"a");
    847e:	4a44      	ldr	r2, [pc, #272]	; (8590 <setup+0xeb0>)
    8480:	4621      	mov	r1, r4
    8482:	4628      	mov	r0, r5
    8484:	f00c fee5 	bl	15252 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton1.setPushedCallback(&buttonCallbackFunction, (void *)"y");
    8488:	4a42      	ldr	r2, [pc, #264]	; (8594 <setup+0xeb4>)
    848a:	4621      	mov	r1, r4
    848c:	4628      	mov	r0, r5
    848e:	f00c fedd 	bl	1524c <Switch::setPushedCallback(void (*)(void*), void*)>
  multiresponseButton2.setSingleClickCallback(&buttonCallbackFunction, (void *)"4");
    8492:	4d41      	ldr	r5, [pc, #260]	; (8598 <setup+0xeb8>)
    8494:	4a41      	ldr	r2, [pc, #260]	; (859c <setup+0xebc>)
    8496:	4621      	mov	r1, r4
    8498:	4628      	mov	r0, r5
    849a:	f00c fee3 	bl	15264 <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton2.setLongPressCallback(&buttonCallbackFunction, (void *)"5");
    849e:	4a40      	ldr	r2, [pc, #256]	; (85a0 <setup+0xec0>)
    84a0:	4621      	mov	r1, r4
    84a2:	4628      	mov	r0, r5
    84a4:	f00c fed8 	bl	15258 <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton2.setDoubleClickCallback(&buttonCallbackFunction, (void *)"6");
    84a8:	4a3e      	ldr	r2, [pc, #248]	; (85a4 <setup+0xec4>)
    84aa:	4621      	mov	r1, r4
    84ac:	4628      	mov	r0, r5
    84ae:	f00c fed6 	bl	1525e <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton2.setReleasedCallback(&buttonCallbackFunction, (void *)"b");
    84b2:	4a3d      	ldr	r2, [pc, #244]	; (85a8 <setup+0xec8>)
    84b4:	4621      	mov	r1, r4
    84b6:	4628      	mov	r0, r5
    84b8:	f00c fecb 	bl	15252 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton3.setSingleClickCallback(&buttonCallbackFunction, (void *)"7");
    84bc:	4d3b      	ldr	r5, [pc, #236]	; (85ac <setup+0xecc>)
    84be:	4a3c      	ldr	r2, [pc, #240]	; (85b0 <setup+0xed0>)
    84c0:	4621      	mov	r1, r4
    84c2:	4628      	mov	r0, r5
    84c4:	f00c fece 	bl	15264 <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton3.setLongPressCallback(&buttonCallbackFunction, (void *)"8");
    84c8:	4a3a      	ldr	r2, [pc, #232]	; (85b4 <setup+0xed4>)
    84ca:	4621      	mov	r1, r4
    84cc:	4628      	mov	r0, r5
    84ce:	f00c fec3 	bl	15258 <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton3.setDoubleClickCallback(&buttonCallbackFunction, (void *)"9");
    84d2:	4a39      	ldr	r2, [pc, #228]	; (85b8 <setup+0xed8>)
    84d4:	4621      	mov	r1, r4
    84d6:	4628      	mov	r0, r5
    84d8:	f00c fec1 	bl	1525e <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton3.setReleasedCallback(&buttonCallbackFunction, (void *)"c");
    84dc:	4a37      	ldr	r2, [pc, #220]	; (85bc <setup+0xedc>)
    84de:	4621      	mov	r1, r4
    84e0:	4628      	mov	r0, r5
    84e2:	f00c feb6 	bl	15252 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton3.setPushedCallback(&buttonCallbackFunction, (void *)"x");
    84e6:	4a36      	ldr	r2, [pc, #216]	; (85c0 <setup+0xee0>)
    84e8:	4621      	mov	r1, r4
    84ea:	4628      	mov	r0, r5
    84ec:	f00c feae 	bl	1524c <Switch::setPushedCallback(void (*)(void*), void*)>
  multiresponseButton4.setSingleClickCallback(&buttonCallbackFunction, (void *)"h");
    84f0:	4d34      	ldr	r5, [pc, #208]	; (85c4 <setup+0xee4>)
    84f2:	4a35      	ldr	r2, [pc, #212]	; (85c8 <setup+0xee8>)
    84f4:	4621      	mov	r1, r4
    84f6:	4628      	mov	r0, r5
    84f8:	f00c feb4 	bl	15264 <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton4.setLongPressCallback(&buttonCallbackFunction, (void *)"s");
    84fc:	4a33      	ldr	r2, [pc, #204]	; (85cc <setup+0xeec>)
    84fe:	4621      	mov	r1, r4
    8500:	4628      	mov	r0, r5
    8502:	f00c fea9 	bl	15258 <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton4.setDoubleClickCallback(&buttonCallbackFunction, (void *)"d");
    8506:	4a32      	ldr	r2, [pc, #200]	; (85d0 <setup+0xef0>)
    8508:	4621      	mov	r1, r4
    850a:	4628      	mov	r0, r5
    850c:	f00c fea7 	bl	1525e <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton4.setReleasedCallback(&buttonCallbackFunction, (void *)"f");
    8510:	4a30      	ldr	r2, [pc, #192]	; (85d4 <setup+0xef4>)
    8512:	4621      	mov	r1, r4
    8514:	4628      	mov	r0, r5
    8516:	f00c fe9c 	bl	15252 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton4.setPushedCallback(&buttonCallbackFunction, (void *)"g");
    851a:	4a2f      	ldr	r2, [pc, #188]	; (85d8 <setup+0xef8>)
    851c:	4621      	mov	r1, r4
    851e:	4628      	mov	r0, r5
    8520:	f00c fe94 	bl	1524c <Switch::setPushedCallback(void (*)(void*), void*)>
}
    8524:	b00f      	add	sp, #60	; 0x3c
    8526:	bdf0      	pop	{r4, r5, r6, r7, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    8528:	682b      	ldr	r3, [r5, #0]
    852a:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    852c:	7822      	ldrb	r2, [r4, #0]
    852e:	2a00      	cmp	r2, #0
    8530:	f47f a8e1 	bne.w	76f6 <setup+0x16>
				if (elapsed > 750) break;
    8534:	f240 22ee 	movw	r2, #750	; 0x2ee
    8538:	4293      	cmp	r3, r2
    853a:	f67f a8df 	bls.w	76fc <setup+0x1c>
    853e:	f7ff b8f1 	b.w	7724 <setup+0x44>
    8542:	bf00      	nop
    8544:	700001e0 	.word	0x700001e0
    8548:	70000be4 	.word	0x70000be4
    854c:	70000d24 	.word	0x70000d24
    8550:	70000e64 	.word	0x70000e64
    8554:	70000fa4 	.word	0x70000fa4
    8558:	700010e4 	.word	0x700010e4
    855c:	70000000 	.word	0x70000000
    8560:	200029b8 	.word	0x200029b8
    8564:	000031e9 	.word	0x000031e9
    8568:	20005b00 	.word	0x20005b00
    856c:	0aaaaaaa 	.word	0x0aaaaaaa
    8570:	20005b04 	.word	0x20005b04
    8574:	200085cc 	.word	0x200085cc
    8578:	20200000 	.word	0x20200000
    857c:	00000d61 	.word	0x00000d61
    8580:	20007f48 	.word	0x20007f48
    8584:	20003b6c 	.word	0x20003b6c
    8588:	20004bd4 	.word	0x20004bd4
    858c:	2000464c 	.word	0x2000464c
    8590:	20003b70 	.word	0x20003b70
    8594:	20003b74 	.word	0x20003b74
    8598:	20007fa4 	.word	0x20007fa4
    859c:	20004be0 	.word	0x20004be0
    85a0:	20003b78 	.word	0x20003b78
    85a4:	20003b7c 	.word	0x20003b7c
    85a8:	20003b80 	.word	0x20003b80
    85ac:	20008000 	.word	0x20008000
    85b0:	20003b68 	.word	0x20003b68
    85b4:	20004b80 	.word	0x20004b80
    85b8:	20003b84 	.word	0x20003b84
    85bc:	20002a8c 	.word	0x20002a8c
    85c0:	200041e4 	.word	0x200041e4
    85c4:	2000805c 	.word	0x2000805c
    85c8:	20003b88 	.word	0x20003b88
    85cc:	20003b8c 	.word	0x20003b8c
    85d0:	200023b4 	.word	0x200023b4
    85d4:	20003b90 	.word	0x20003b90
    85d8:	20003f68 	.word	0x20003f68

000085dc <loadWav()>:
void loadWav() {
    85dc:	b530      	push	{r4, r5, lr}
    85de:	b087      	sub	sp, #28
	StringSumHelper(const char *p) : String(p) {}
    85e0:	4916      	ldr	r1, [pc, #88]	; (863c <loadWav()+0x60>)
    85e2:	4668      	mov	r0, sp
    85e4:	f00e f8b7 	bl	16756 <String::String(char const*)>
  Serial.println("Loading Wave :" + String(SMP.wav[SMP.currentChannel][1]));
    85e8:	4c15      	ldr	r4, [pc, #84]	; (8640 <loadWav()+0x64>)
    85ea:	6863      	ldr	r3, [r4, #4]
    85ec:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    85f0:	220a      	movs	r2, #10
    85f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    85f4:	a803      	add	r0, sp, #12
    85f6:	f00e f8f7 	bl	167e8 <String::String(unsigned int, unsigned char)>
    85fa:	a903      	add	r1, sp, #12
    85fc:	4668      	mov	r0, sp
    85fe:	f00e f950 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    8602:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8604:	4d0f      	ldr	r5, [pc, #60]	; (8644 <loadWav()+0x68>)
    8606:	4628      	mov	r0, r5
    8608:	f00d fdb8 	bl	1617c <Print::print(String const&)>
    860c:	4628      	mov	r0, r5
    860e:	f00d fdda 	bl	161c6 <Print::println()>
    8612:	a803      	add	r0, sp, #12
    8614:	f00e f856 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    8618:	4668      	mov	r0, sp
    861a:	f00e f853 	bl	166c4 <String::~String()>
  loadSample(0, SMP.wav[SMP.currentChannel][1]);
    861e:	6863      	ldr	r3, [r4, #4]
    8620:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    8624:	6a99      	ldr	r1, [r3, #40]	; 0x28
    8626:	2000      	movs	r0, #0
    8628:	f7fe fe86 	bl	7338 <loadSample(unsigned int, unsigned int)>
  switchMode(&singleMode);
    862c:	4806      	ldr	r0, [pc, #24]	; (8648 <loadWav()+0x6c>)
    862e:	f7fb fb35 	bl	3c9c <switchMode(Mode*)>
  SMP.singleMode = true;
    8632:	2301      	movs	r3, #1
    8634:	6023      	str	r3, [r4, #0]
}
    8636:	b007      	add	sp, #28
    8638:	bd30      	pop	{r4, r5, pc}
    863a:	bf00      	nop
    863c:	20000c94 	.word	0x20000c94
    8640:	70000000 	.word	0x70000000
    8644:	20004e74 	.word	0x20004e74
    8648:	20005b88 	.word	0x20005b88
    864c:	00000000 	.word	0x00000000

00008650 <checkMode()>:
void checkMode() {
    8650:	b570      	push	{r4, r5, r6, lr}
    8652:	b092      	sub	sp, #72	; 0x48
  buttonString = String(buttons[1]) + String(buttons[2]) + String(buttons[4]) + String(buttons[3]);
    8654:	4ca0      	ldr	r4, [pc, #640]	; (88d8 <checkMode()+0x288>)
    8656:	220a      	movs	r2, #10
    8658:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
    865c:	a803      	add	r0, sp, #12
    865e:	f00e f8b1 	bl	167c4 <String::String(int, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    8662:	a903      	add	r1, sp, #12
    8664:	4668      	mov	r0, sp
    8666:	f00e f892 	bl	1678e <String::String(String const&)>
    866a:	220a      	movs	r2, #10
    866c:	f8d4 114c 	ldr.w	r1, [r4, #332]	; 0x14c
    8670:	a806      	add	r0, sp, #24
    8672:	f00e f8a7 	bl	167c4 <String::String(int, unsigned char)>
    8676:	a906      	add	r1, sp, #24
    8678:	4668      	mov	r0, sp
    867a:	f00e f912 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    867e:	4605      	mov	r5, r0
    8680:	220a      	movs	r2, #10
    8682:	f8d4 1154 	ldr.w	r1, [r4, #340]	; 0x154
    8686:	a809      	add	r0, sp, #36	; 0x24
    8688:	f00e f89c 	bl	167c4 <String::String(int, unsigned char)>
    868c:	a909      	add	r1, sp, #36	; 0x24
    868e:	4628      	mov	r0, r5
    8690:	f00e f907 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    8694:	4605      	mov	r5, r0
    8696:	220a      	movs	r2, #10
    8698:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
    869c:	a80c      	add	r0, sp, #48	; 0x30
    869e:	f00e f891 	bl	167c4 <String::String(int, unsigned char)>
    86a2:	a90c      	add	r1, sp, #48	; 0x30
    86a4:	4628      	mov	r0, r5
    86a6:	f00e f8fc 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    86aa:	4601      	mov	r1, r0
    86ac:	4d8b      	ldr	r5, [pc, #556]	; (88dc <checkMode()+0x28c>)
    86ae:	4628      	mov	r0, r5
    86b0:	f00e f863 	bl	1677a <String::operator=(String const&)>
    86b4:	a80c      	add	r0, sp, #48	; 0x30
    86b6:	f00e f805 	bl	166c4 <String::~String()>
    86ba:	a809      	add	r0, sp, #36	; 0x24
    86bc:	f00e f802 	bl	166c4 <String::~String()>
    86c0:	a806      	add	r0, sp, #24
    86c2:	f00d ffff 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    86c6:	4668      	mov	r0, sp
    86c8:	f00d fffc 	bl	166c4 <String::~String()>
    86cc:	a803      	add	r0, sp, #12
    86ce:	f00d fff9 	bl	166c4 <String::~String()>
    86d2:	4c83      	ldr	r4, [pc, #524]	; (88e0 <checkMode()+0x290>)
    86d4:	4629      	mov	r1, r5
    86d6:	4620      	mov	r0, r4
    86d8:	f00d fd50 	bl	1617c <Print::print(String const&)>
    86dc:	4620      	mov	r0, r4
    86de:	f00d fd72 	bl	161c6 <Print::println()>
  if ((currentMode == &draw || currentMode == &singleMode || currentMode == &noteShift) && buttonString == "0010") {
    86e2:	4b80      	ldr	r3, [pc, #512]	; (88e4 <checkMode()+0x294>)
    86e4:	681b      	ldr	r3, [r3, #0]
    86e6:	4980      	ldr	r1, [pc, #512]	; (88e8 <checkMode()+0x298>)
    86e8:	4a80      	ldr	r2, [pc, #512]	; (88ec <checkMode()+0x29c>)
    86ea:	4293      	cmp	r3, r2
    86ec:	bf18      	it	ne
    86ee:	428b      	cmpne	r3, r1
    86f0:	d069      	beq.n	87c6 <checkMode()+0x176>
    86f2:	4a7f      	ldr	r2, [pc, #508]	; (88f0 <checkMode()+0x2a0>)
    86f4:	4293      	cmp	r3, r2
    86f6:	d066      	beq.n	87c6 <checkMode()+0x176>
  if (currentMode == &noteShift && buttonString == "0001") {
    86f8:	4b7a      	ldr	r3, [pc, #488]	; (88e4 <checkMode()+0x294>)
    86fa:	681a      	ldr	r2, [r3, #0]
    86fc:	4b7c      	ldr	r3, [pc, #496]	; (88f0 <checkMode()+0x2a0>)
    86fe:	429a      	cmp	r2, r3
    8700:	f000 811a 	beq.w	8938 <checkMode()+0x2e8>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0020") {
    8704:	4b77      	ldr	r3, [pc, #476]	; (88e4 <checkMode()+0x294>)
    8706:	681b      	ldr	r3, [r3, #0]
    8708:	4a77      	ldr	r2, [pc, #476]	; (88e8 <checkMode()+0x298>)
    870a:	4293      	cmp	r3, r2
    870c:	f000 8134 	beq.w	8978 <checkMode()+0x328>
    8710:	4a76      	ldr	r2, [pc, #472]	; (88ec <checkMode()+0x29c>)
    8712:	4293      	cmp	r3, r2
    8714:	f000 8130 	beq.w	8978 <checkMode()+0x328>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    8718:	4970      	ldr	r1, [pc, #448]	; (88dc <checkMode()+0x28c>)
    871a:	4876      	ldr	r0, [pc, #472]	; (88f4 <checkMode()+0x2a4>)
    871c:	f00e f8f2 	bl	16904 <String::equals(String const&) const>
  if (oldButtonString != buttonString) {
    8720:	2800      	cmp	r0, #0
    8722:	f000 81b5 	beq.w	8a90 <checkMode()+0x440>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "2002") {
    8726:	4b6f      	ldr	r3, [pc, #444]	; (88e4 <checkMode()+0x294>)
    8728:	681b      	ldr	r3, [r3, #0]
    872a:	4a6f      	ldr	r2, [pc, #444]	; (88e8 <checkMode()+0x298>)
    872c:	4293      	cmp	r3, r2
    872e:	f000 81bc 	beq.w	8aaa <checkMode()+0x45a>
    8732:	4a6e      	ldr	r2, [pc, #440]	; (88ec <checkMode()+0x29c>)
    8734:	4293      	cmp	r3, r2
    8736:	f000 81b8 	beq.w	8aaa <checkMode()+0x45a>
  if (currentMode == &velocity && SMP.singleMode && buttonString == "0900") {
    873a:	4b6a      	ldr	r3, [pc, #424]	; (88e4 <checkMode()+0x294>)
    873c:	681a      	ldr	r2, [r3, #0]
    873e:	4b6e      	ldr	r3, [pc, #440]	; (88f8 <checkMode()+0x2a8>)
    8740:	429a      	cmp	r2, r3
    8742:	f000 81bc 	beq.w	8abe <checkMode()+0x46e>
  if (currentMode == &volume_bpm && buttonString == "0090") {
    8746:	4b67      	ldr	r3, [pc, #412]	; (88e4 <checkMode()+0x294>)
    8748:	681a      	ldr	r2, [r3, #0]
    874a:	4b6c      	ldr	r3, [pc, #432]	; (88fc <checkMode()+0x2ac>)
    874c:	429a      	cmp	r2, r3
    874e:	f000 81dc 	beq.w	8b0a <checkMode()+0x4ba>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0909") {
    8752:	4b64      	ldr	r3, [pc, #400]	; (88e4 <checkMode()+0x294>)
    8754:	681b      	ldr	r3, [r3, #0]
    8756:	4a64      	ldr	r2, [pc, #400]	; (88e8 <checkMode()+0x298>)
    8758:	4293      	cmp	r3, r2
    875a:	f000 81e1 	beq.w	8b20 <checkMode()+0x4d0>
    875e:	4a63      	ldr	r2, [pc, #396]	; (88ec <checkMode()+0x29c>)
    8760:	4293      	cmp	r3, r2
    8762:	f000 81dd 	beq.w	8b20 <checkMode()+0x4d0>
  } else if ((currentMode == &menu) && buttonString == "0001") {
    8766:	4b5f      	ldr	r3, [pc, #380]	; (88e4 <checkMode()+0x294>)
    8768:	681a      	ldr	r2, [r3, #0]
    876a:	4b65      	ldr	r3, [pc, #404]	; (8900 <checkMode()+0x2b0>)
    876c:	429a      	cmp	r2, r3
    876e:	f000 8257 	beq.w	8c20 <checkMode()+0x5d0>
  if ((currentMode == &singleMode) && buttonString == "2200") {
    8772:	4b5c      	ldr	r3, [pc, #368]	; (88e4 <checkMode()+0x294>)
    8774:	681a      	ldr	r2, [r3, #0]
    8776:	4b5c      	ldr	r3, [pc, #368]	; (88e8 <checkMode()+0x298>)
    8778:	429a      	cmp	r2, r3
    877a:	f000 827f 	beq.w	8c7c <checkMode()+0x62c>
  } else if ((currentMode == &set_Wav) && buttonString == "1000") {
    877e:	4b59      	ldr	r3, [pc, #356]	; (88e4 <checkMode()+0x294>)
    8780:	681a      	ldr	r2, [r3, #0]
    8782:	4b60      	ldr	r3, [pc, #384]	; (8904 <checkMode()+0x2b4>)
    8784:	429a      	cmp	r2, r3
    8786:	f000 8295 	beq.w	8cb4 <checkMode()+0x664>
  if ((currentMode == &draw) && buttonString == "2200") {
    878a:	4b56      	ldr	r3, [pc, #344]	; (88e4 <checkMode()+0x294>)
    878c:	681a      	ldr	r2, [r3, #0]
    878e:	4b57      	ldr	r3, [pc, #348]	; (88ec <checkMode()+0x29c>)
    8790:	429a      	cmp	r2, r3
    8792:	f000 82b8 	beq.w	8d06 <checkMode()+0x6b6>
  } else if ((currentMode == &set_SamplePack) && buttonString == "0100") {
    8796:	4b53      	ldr	r3, [pc, #332]	; (88e4 <checkMode()+0x294>)
    8798:	681a      	ldr	r2, [r3, #0]
    879a:	4b5b      	ldr	r3, [pc, #364]	; (8908 <checkMode()+0x2b8>)
    879c:	429a      	cmp	r2, r3
    879e:	f000 82bd 	beq.w	8d1c <checkMode()+0x6cc>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0100") {
    87a2:	4b50      	ldr	r3, [pc, #320]	; (88e4 <checkMode()+0x294>)
    87a4:	681b      	ldr	r3, [r3, #0]
    87a6:	4a50      	ldr	r2, [pc, #320]	; (88e8 <checkMode()+0x298>)
    87a8:	4293      	cmp	r3, r2
    87aa:	f000 82e2 	beq.w	8d72 <checkMode()+0x722>
    87ae:	4a4f      	ldr	r2, [pc, #316]	; (88ec <checkMode()+0x29c>)
    87b0:	4293      	cmp	r3, r2
    87b2:	f000 82de 	beq.w	8d72 <checkMode()+0x722>
  } else if (currentMode == &draw && buttonString == "3000" && ((SMP.y - 1 >= 1 && SMP.y - 1 <= maxFiles) || SMP.y - 1 > 12)) {
    87b6:	4b4b      	ldr	r3, [pc, #300]	; (88e4 <checkMode()+0x294>)
    87b8:	681a      	ldr	r2, [r3, #0]
    87ba:	4b4c      	ldr	r3, [pc, #304]	; (88ec <checkMode()+0x29c>)
    87bc:	429a      	cmp	r2, r3
    87be:	f000 8392 	beq.w	8ee6 <checkMode()+0x896>
}
    87c2:	b012      	add	sp, #72	; 0x48
    87c4:	bd70      	pop	{r4, r5, r6, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    87c6:	4951      	ldr	r1, [pc, #324]	; (890c <checkMode()+0x2bc>)
    87c8:	4844      	ldr	r0, [pc, #272]	; (88dc <checkMode()+0x28c>)
    87ca:	f00e f8a8 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode || currentMode == &noteShift) && buttonString == "0010") {
    87ce:	2800      	cmp	r0, #0
    87d0:	d159      	bne.n	8886 <checkMode()+0x236>
  if ((currentMode == &draw || currentMode == &singleMode || currentMode == &noteShift) && buttonString == "0200") {
    87d2:	4b44      	ldr	r3, [pc, #272]	; (88e4 <checkMode()+0x294>)
    87d4:	681b      	ldr	r3, [r3, #0]
    87d6:	4944      	ldr	r1, [pc, #272]	; (88e8 <checkMode()+0x298>)
    87d8:	4a44      	ldr	r2, [pc, #272]	; (88ec <checkMode()+0x29c>)
    87da:	4293      	cmp	r3, r2
    87dc:	bf18      	it	ne
    87de:	428b      	cmpne	r3, r1
    87e0:	d002      	beq.n	87e8 <checkMode()+0x198>
    87e2:	4a43      	ldr	r2, [pc, #268]	; (88f0 <checkMode()+0x2a0>)
    87e4:	4293      	cmp	r3, r2
    87e6:	d187      	bne.n	86f8 <checkMode()+0xa8>
    87e8:	4949      	ldr	r1, [pc, #292]	; (8910 <checkMode()+0x2c0>)
    87ea:	483c      	ldr	r0, [pc, #240]	; (88dc <checkMode()+0x28c>)
    87ec:	f00e f897 	bl	1691e <String::equals(char const*) const>
    87f0:	2800      	cmp	r0, #0
    87f2:	d14c      	bne.n	888e <checkMode()+0x23e>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0900") {
    87f4:	4b3b      	ldr	r3, [pc, #236]	; (88e4 <checkMode()+0x294>)
    87f6:	681b      	ldr	r3, [r3, #0]
    87f8:	4a3b      	ldr	r2, [pc, #236]	; (88e8 <checkMode()+0x298>)
    87fa:	4293      	cmp	r3, r2
    87fc:	d003      	beq.n	8806 <checkMode()+0x1b6>
    87fe:	4a3b      	ldr	r2, [pc, #236]	; (88ec <checkMode()+0x29c>)
    8800:	4293      	cmp	r3, r2
    8802:	f47f af79 	bne.w	86f8 <checkMode()+0xa8>
    8806:	4943      	ldr	r1, [pc, #268]	; (8914 <checkMode()+0x2c4>)
    8808:	4834      	ldr	r0, [pc, #208]	; (88dc <checkMode()+0x28c>)
    880a:	f00e f888 	bl	1691e <String::equals(char const*) const>
    880e:	b118      	cbz	r0, 8818 <checkMode()+0x1c8>
    if (tmpMute) tmpMuteAll(false);
    8810:	4b41      	ldr	r3, [pc, #260]	; (8918 <checkMode()+0x2c8>)
    8812:	781b      	ldrb	r3, [r3, #0]
    8814:	2b00      	cmp	r3, #0
    8816:	d140      	bne.n	889a <checkMode()+0x24a>
  if (currentMode == &singleMode && buttonString == "0220") {
    8818:	4b32      	ldr	r3, [pc, #200]	; (88e4 <checkMode()+0x294>)
    881a:	681a      	ldr	r2, [r3, #0]
    881c:	4b32      	ldr	r3, [pc, #200]	; (88e8 <checkMode()+0x298>)
    881e:	429a      	cmp	r2, r3
    8820:	f47f af6a 	bne.w	86f8 <checkMode()+0xa8>
    8824:	493d      	ldr	r1, [pc, #244]	; (891c <checkMode()+0x2cc>)
    8826:	482d      	ldr	r0, [pc, #180]	; (88dc <checkMode()+0x28c>)
    8828:	f00e f879 	bl	1691e <String::equals(char const*) const>
    882c:	2800      	cmp	r0, #0
    882e:	f43f af63 	beq.w	86f8 <checkMode()+0xa8>
    SMP.shiftX = 8;
    8832:	4929      	ldr	r1, [pc, #164]	; (88d8 <checkMode()+0x288>)
    8834:	2008      	movs	r0, #8
    8836:	f8c1 00c0 	str.w	r0, [r1, #192]	; 0xc0
		noInterrupts();
    883a:	b672      	cpsid	i
		encoder.position = p;
    883c:	4b38      	ldr	r3, [pc, #224]	; (8920 <checkMode()+0x2d0>)
    883e:	2220      	movs	r2, #32
    8840:	64da      	str	r2, [r3, #76]	; 0x4c
		interrupts();
    8842:	b662      	cpsie	i
    SMP.shiftY = 8;
    8844:	f8c1 00c4 	str.w	r0, [r1, #196]	; 0xc4
		noInterrupts();
    8848:	b672      	cpsid	i
		encoder.position = p;
    884a:	64da      	str	r2, [r3, #76]	; 0x4c
		interrupts();
    884c:	b662      	cpsie	i
    unsigned int patternLength = lastPage * maxX;
    884e:	4b35      	ldr	r3, [pc, #212]	; (8924 <checkMode()+0x2d4>)
    8850:	681c      	ldr	r4, [r3, #0]
    for (unsigned int nx = 1; nx <= patternLength; nx++) {  // Start from 1
    8852:	0123      	lsls	r3, r4, #4
    8854:	d038      	beq.n	88c8 <checkMode()+0x278>
    8856:	4a34      	ldr	r2, [pc, #208]	; (8928 <checkMode()+0x2d8>)
    8858:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    885c:	01e5      	lsls	r5, r4, #7
    885e:	eb02 14c4 	add.w	r4, r2, r4, lsl #7
        original[nx][ny][0] = 0;
    8862:	2000      	movs	r0, #0
        original[nx][ny][1] = defaultVelocity;
    8864:	213f      	movs	r1, #63	; 0x3f
      for (unsigned int ny = 1; ny <= maxY; ny++) {         // Start from 1
    8866:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
        original[nx][ny][0] = 0;
    886a:	6098      	str	r0, [r3, #8]
        original[nx][ny][1] = defaultVelocity;
    886c:	60d9      	str	r1, [r3, #12]
      for (unsigned int ny = 1; ny <= maxY; ny++) {         // Start from 1
    886e:	3308      	adds	r3, #8
    8870:	429a      	cmp	r2, r3
    8872:	d1fa      	bne.n	886a <checkMode()+0x21a>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {  // Start from 1
    8874:	3288      	adds	r2, #136	; 0x88
    8876:	4294      	cmp	r4, r2
    8878:	d1f5      	bne.n	8866 <checkMode()+0x216>
        if (note[nx][ny][0] != SMP.currentChannel) {
    887a:	4b17      	ldr	r3, [pc, #92]	; (88d8 <checkMode()+0x288>)
    887c:	685e      	ldr	r6, [r3, #4]
    887e:	482b      	ldr	r0, [pc, #172]	; (892c <checkMode()+0x2dc>)
    8880:	4c2b      	ldr	r4, [pc, #172]	; (8930 <checkMode()+0x2e0>)
    8882:	4405      	add	r5, r0
    8884:	e01c      	b.n	88c0 <checkMode()+0x270>
    togglePlay(isPlaying);
    8886:	482b      	ldr	r0, [pc, #172]	; (8934 <checkMode()+0x2e4>)
    8888:	f7fd fe94 	bl	65b4 <togglePlay(bool&)>
    888c:	e7a1      	b.n	87d2 <checkMode()+0x182>
    tmpMute = true;
    888e:	2001      	movs	r0, #1
    8890:	4b21      	ldr	r3, [pc, #132]	; (8918 <checkMode()+0x2c8>)
    8892:	7018      	strb	r0, [r3, #0]
    tmpMuteAll(true);
    8894:	f7fb f862 	bl	395c <tmpMuteAll(bool)>
    8898:	e7ac      	b.n	87f4 <checkMode()+0x1a4>
    if (tmpMute) tmpMuteAll(false);
    889a:	2000      	movs	r0, #0
    889c:	f7fb f85e 	bl	395c <tmpMuteAll(bool)>
    88a0:	e7ba      	b.n	8818 <checkMode()+0x1c8>
          original[nx][ny][0] = note[nx][ny][0];
    88a2:	6091      	str	r1, [r2, #8]
          original[nx][ny][1] = note[nx][ny][1];
    88a4:	68d9      	ldr	r1, [r3, #12]
    88a6:	60d1      	str	r1, [r2, #12]
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    88a8:	3308      	adds	r3, #8
    88aa:	3208      	adds	r2, #8
    88ac:	4298      	cmp	r0, r3
    88ae:	d003      	beq.n	88b8 <checkMode()+0x268>
        if (note[nx][ny][0] != SMP.currentChannel) {
    88b0:	6899      	ldr	r1, [r3, #8]
    88b2:	42b1      	cmp	r1, r6
    88b4:	d1f5      	bne.n	88a2 <checkMode()+0x252>
    88b6:	e7f7      	b.n	88a8 <checkMode()+0x258>
    for (unsigned int nx = 1; nx <= patternLength; nx++) {
    88b8:	3088      	adds	r0, #136	; 0x88
    88ba:	3488      	adds	r4, #136	; 0x88
    88bc:	4285      	cmp	r5, r0
    88be:	d003      	beq.n	88c8 <checkMode()+0x278>
      for (unsigned int ny = 1; ny <= maxY; ny++) {
    88c0:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
void checkMode() {
    88c4:	4622      	mov	r2, r4
    88c6:	e7f3      	b.n	88b0 <checkMode()+0x260>
    switchMode(&noteShift);
    88c8:	4809      	ldr	r0, [pc, #36]	; (88f0 <checkMode()+0x2a0>)
    88ca:	f7fb f9e7 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    88ce:	4b02      	ldr	r3, [pc, #8]	; (88d8 <checkMode()+0x288>)
    88d0:	2201      	movs	r2, #1
    88d2:	601a      	str	r2, [r3, #0]
    88d4:	e710      	b.n	86f8 <checkMode()+0xa8>
    88d6:	bf00      	nop
    88d8:	70000000 	.word	0x70000000
    88dc:	20007364 	.word	0x20007364
    88e0:	20004e74 	.word	0x20004e74
    88e4:	200057ec 	.word	0x200057ec
    88e8:	20005b88 	.word	0x20005b88
    88ec:	20005808 	.word	0x20005808
    88f0:	20005ac4 	.word	0x20005ac4
    88f4:	200080d0 	.word	0x200080d0
    88f8:	20005bdc 	.word	0x20005bdc
    88fc:	20005c4c 	.word	0x20005c4c
    8900:	20005a88 	.word	0x20005a88
    8904:	20005b4c 	.word	0x20005b4c
    8908:	20005b10 	.word	0x20005b10
    890c:	20000d1c 	.word	0x20000d1c
    8910:	20000d24 	.word	0x20000d24
    8914:	20000d2c 	.word	0x20000d2c
    8918:	20008c37 	.word	0x20008c37
    891c:	20000d34 	.word	0x20000d34
    8920:	20007374 	.word	0x20007374
    8924:	20005a80 	.word	0x20005a80
    8928:	70db7d68 	.word	0x70db7d68
    892c:	70db38e0 	.word	0x70db38e0
    8930:	70db7ce8 	.word	0x70db7ce8
    8934:	20008c2b 	.word	0x20008c2b
    8938:	499f      	ldr	r1, [pc, #636]	; (8bb8 <checkMode()+0x568>)
    893a:	48a0      	ldr	r0, [pc, #640]	; (8bbc <checkMode()+0x56c>)
    893c:	f00d ffef 	bl	1691e <String::equals(char const*) const>
  if (currentMode == &noteShift && buttonString == "0001") {
    8940:	b998      	cbnz	r0, 896a <checkMode()+0x31a>
  if (currentMode == &noteShift && buttonString == "1000") {
    8942:	4b9f      	ldr	r3, [pc, #636]	; (8bc0 <checkMode()+0x570>)
    8944:	681a      	ldr	r2, [r3, #0]
    8946:	4b9f      	ldr	r3, [pc, #636]	; (8bc4 <checkMode()+0x574>)
    8948:	429a      	cmp	r2, r3
    894a:	f47f aedb 	bne.w	8704 <checkMode()+0xb4>
    894e:	499e      	ldr	r1, [pc, #632]	; (8bc8 <checkMode()+0x578>)
    8950:	489a      	ldr	r0, [pc, #616]	; (8bbc <checkMode()+0x56c>)
    8952:	f00d ffe4 	bl	1691e <String::equals(char const*) const>
    8956:	2800      	cmp	r0, #0
    8958:	f43f aed4 	beq.w	8704 <checkMode()+0xb4>
    switchMode(&singleMode);
    895c:	489b      	ldr	r0, [pc, #620]	; (8bcc <checkMode()+0x57c>)
    895e:	f7fb f99d 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    8962:	4b9b      	ldr	r3, [pc, #620]	; (8bd0 <checkMode()+0x580>)
    8964:	2201      	movs	r2, #1
    8966:	601a      	str	r2, [r3, #0]
    8968:	e6cc      	b.n	8704 <checkMode()+0xb4>
    switchMode(&singleMode);
    896a:	4898      	ldr	r0, [pc, #608]	; (8bcc <checkMode()+0x57c>)
    896c:	f7fb f996 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    8970:	4b97      	ldr	r3, [pc, #604]	; (8bd0 <checkMode()+0x580>)
    8972:	2201      	movs	r2, #1
    8974:	601a      	str	r2, [r3, #0]
    8976:	e7e4      	b.n	8942 <checkMode()+0x2f2>
    8978:	4996      	ldr	r1, [pc, #600]	; (8bd4 <checkMode()+0x584>)
    897a:	4890      	ldr	r0, [pc, #576]	; (8bbc <checkMode()+0x56c>)
    897c:	f00d ffcf 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0020") {
    8980:	2800      	cmp	r0, #0
    8982:	d13b      	bne.n	89fc <checkMode()+0x3ac>
  if (currentMode == &draw && buttonString == "1100") {
    8984:	4b8e      	ldr	r3, [pc, #568]	; (8bc0 <checkMode()+0x570>)
    8986:	681a      	ldr	r2, [r3, #0]
    8988:	4b93      	ldr	r3, [pc, #588]	; (8bd8 <checkMode()+0x588>)
    898a:	429a      	cmp	r2, r3
    898c:	d03a      	beq.n	8a04 <checkMode()+0x3b4>
  if ((currentMode == &singleMode) && buttonString == "0300") {
    898e:	4b8c      	ldr	r3, [pc, #560]	; (8bc0 <checkMode()+0x570>)
    8990:	681a      	ldr	r2, [r3, #0]
    8992:	4b8e      	ldr	r3, [pc, #568]	; (8bcc <checkMode()+0x57c>)
    8994:	429a      	cmp	r2, r3
    8996:	f47f aebf 	bne.w	8718 <checkMode()+0xc8>
    899a:	4990      	ldr	r1, [pc, #576]	; (8bdc <checkMode()+0x58c>)
    899c:	4887      	ldr	r0, [pc, #540]	; (8bbc <checkMode()+0x56c>)
    899e:	f00d ffbe 	bl	1691e <String::equals(char const*) const>
    89a2:	2800      	cmp	r0, #0
    89a4:	d039      	beq.n	8a1a <checkMode()+0x3ca>
    int velo = round(mapf(note[SMP.x][SMP.y][1], 1, 127, 1, maxY * 4));
    89a6:	4d8a      	ldr	r5, [pc, #552]	; (8bd0 <checkMode()+0x580>)
    89a8:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
    89ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    89b0:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
    89b4:	4413      	add	r3, r2
    89b6:	4a8a      	ldr	r2, [pc, #552]	; (8be0 <checkMode()+0x590>)
    89b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    89bc:	ed93 0a01 	vldr	s0, [r3, #4]
    89c0:	ed9f 4b79 	vldr	d4, [pc, #484]	; 8ba8 <checkMode()+0x558>
    89c4:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    89c8:	ed9f 2b79 	vldr	d2, [pc, #484]	; 8bb0 <checkMode()+0x560>
    89cc:	eeb0 1b43 	vmov.f64	d1, d3
    89d0:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    89d4:	f002 fe78 	bl	b6c8 <mapf(double, double, double, double, double)>
    89d8:	feb8 0b40 	vrinta.f64	d0, d0
    89dc:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    89e0:	ee17 4a90 	vmov	r4, s15
    SMP.velocity = velo;
    89e4:	edc5 7a04 	vstr	s15, [r5, #16]
    switchMode(&velocity);
    89e8:	487e      	ldr	r0, [pc, #504]	; (8be4 <checkMode()+0x594>)
    89ea:	f7fb f957 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    89ee:	2301      	movs	r3, #1
    89f0:	602b      	str	r3, [r5, #0]
		noInterrupts();
    89f2:	b672      	cpsid	i
		encoder.position = p;
    89f4:	4b7c      	ldr	r3, [pc, #496]	; (8be8 <checkMode()+0x598>)
    89f6:	64dc      	str	r4, [r3, #76]	; 0x4c
		interrupts();
    89f8:	b662      	cpsie	i
	}
    89fa:	e00e      	b.n	8a1a <checkMode()+0x3ca>
    switchMode(&volume_bpm);
    89fc:	487b      	ldr	r0, [pc, #492]	; (8bec <checkMode()+0x59c>)
    89fe:	f7fb f94d 	bl	3c9c <switchMode(Mode*)>
    8a02:	e7bf      	b.n	8984 <checkMode()+0x334>
    8a04:	497a      	ldr	r1, [pc, #488]	; (8bf0 <checkMode()+0x5a0>)
    8a06:	486d      	ldr	r0, [pc, #436]	; (8bbc <checkMode()+0x56c>)
    8a08:	f00d ff89 	bl	1691e <String::equals(char const*) const>
  if (currentMode == &draw && buttonString == "1100") {
    8a0c:	2800      	cmp	r0, #0
    8a0e:	d13c      	bne.n	8a8a <checkMode()+0x43a>
  if ((currentMode == &singleMode) && buttonString == "0300") {
    8a10:	4b6b      	ldr	r3, [pc, #428]	; (8bc0 <checkMode()+0x570>)
    8a12:	681a      	ldr	r2, [r3, #0]
    8a14:	4b6d      	ldr	r3, [pc, #436]	; (8bcc <checkMode()+0x57c>)
    8a16:	429a      	cmp	r2, r3
    8a18:	d0bf      	beq.n	899a <checkMode()+0x34a>
  if ((currentMode == &draw) && buttonString == "0300") {
    8a1a:	4b69      	ldr	r3, [pc, #420]	; (8bc0 <checkMode()+0x570>)
    8a1c:	681a      	ldr	r2, [r3, #0]
    8a1e:	4b6e      	ldr	r3, [pc, #440]	; (8bd8 <checkMode()+0x588>)
    8a20:	429a      	cmp	r2, r3
    8a22:	f47f ae79 	bne.w	8718 <checkMode()+0xc8>
    8a26:	496d      	ldr	r1, [pc, #436]	; (8bdc <checkMode()+0x58c>)
    8a28:	4864      	ldr	r0, [pc, #400]	; (8bbc <checkMode()+0x56c>)
    8a2a:	f00d ff78 	bl	1691e <String::equals(char const*) const>
    8a2e:	2800      	cmp	r0, #0
    8a30:	f43f ae72 	beq.w	8718 <checkMode()+0xc8>
    int velo = round(mapf(note[SMP.x][SMP.y][1], 1, 127, 1, maxY * 4));
    8a34:	4d66      	ldr	r5, [pc, #408]	; (8bd0 <checkMode()+0x580>)
    8a36:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
    8a3a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8a3e:	f8d5 20b0 	ldr.w	r2, [r5, #176]	; 0xb0
    8a42:	4413      	add	r3, r2
    8a44:	4a66      	ldr	r2, [pc, #408]	; (8be0 <checkMode()+0x590>)
    8a46:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8a4a:	ed93 0a01 	vldr	s0, [r3, #4]
    8a4e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8ba8 <checkMode()+0x558>
    8a52:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    8a56:	ed9f 2b56 	vldr	d2, [pc, #344]	; 8bb0 <checkMode()+0x560>
    8a5a:	eeb0 1b43 	vmov.f64	d1, d3
    8a5e:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    8a62:	f002 fe31 	bl	b6c8 <mapf(double, double, double, double, double)>
    8a66:	feb8 0b40 	vrinta.f64	d0, d0
    8a6a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    8a6e:	ee17 4a90 	vmov	r4, s15
    SMP.velocity = velo;
    8a72:	edc5 7a04 	vstr	s15, [r5, #16]
    SMP.singleMode = false;
    8a76:	2300      	movs	r3, #0
    8a78:	602b      	str	r3, [r5, #0]
    switchMode(&velocity);
    8a7a:	485a      	ldr	r0, [pc, #360]	; (8be4 <checkMode()+0x594>)
    8a7c:	f7fb f90e 	bl	3c9c <switchMode(Mode*)>
		noInterrupts();
    8a80:	b672      	cpsid	i
		encoder.position = p;
    8a82:	4b59      	ldr	r3, [pc, #356]	; (8be8 <checkMode()+0x598>)
    8a84:	64dc      	str	r4, [r3, #76]	; 0x4c
		interrupts();
    8a86:	b662      	cpsie	i
	}
    8a88:	e646      	b.n	8718 <checkMode()+0xc8>
    toggleCopyPaste();
    8a8a:	f7fc fa23 	bl	4ed4 <toggleCopyPaste()>
    8a8e:	e7bf      	b.n	8a10 <checkMode()+0x3c0>
    serialprintln(buttonString);
    8a90:	4c4a      	ldr	r4, [pc, #296]	; (8bbc <checkMode()+0x56c>)
    8a92:	4621      	mov	r1, r4
    8a94:	a80f      	add	r0, sp, #60	; 0x3c
    8a96:	f00d fe7a 	bl	1678e <String::String(String const&)>
    8a9a:	a80f      	add	r0, sp, #60	; 0x3c
    8a9c:	f00d fe12 	bl	166c4 <String::~String()>
    oldButtonString = buttonString;
    8aa0:	4621      	mov	r1, r4
    8aa2:	4854      	ldr	r0, [pc, #336]	; (8bf4 <checkMode()+0x5a4>)
    8aa4:	f00d fe69 	bl	1677a <String::operator=(String const&)>
    8aa8:	e63d      	b.n	8726 <checkMode()+0xd6>
    8aaa:	4953      	ldr	r1, [pc, #332]	; (8bf8 <checkMode()+0x5a8>)
    8aac:	4843      	ldr	r0, [pc, #268]	; (8bbc <checkMode()+0x56c>)
    8aae:	f00d ff36 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "2002") {
    8ab2:	2800      	cmp	r0, #0
    8ab4:	f43f ae41 	beq.w	873a <checkMode()+0xea>
    clearPage();
    8ab8:	f7fc fa6a 	bl	4f90 <clearPage()>
    8abc:	e63d      	b.n	873a <checkMode()+0xea>
  if (currentMode == &velocity && SMP.singleMode && buttonString == "0900") {
    8abe:	4b44      	ldr	r3, [pc, #272]	; (8bd0 <checkMode()+0x580>)
    8ac0:	681b      	ldr	r3, [r3, #0]
    8ac2:	b953      	cbnz	r3, 8ada <checkMode()+0x48a>
    8ac4:	494d      	ldr	r1, [pc, #308]	; (8bfc <checkMode()+0x5ac>)
    8ac6:	483d      	ldr	r0, [pc, #244]	; (8bbc <checkMode()+0x56c>)
    8ac8:	f00d ff29 	bl	1691e <String::equals(char const*) const>
  if (currentMode == &velocity && !SMP.singleMode && buttonString == "0900") {
    8acc:	2800      	cmp	r0, #0
    8ace:	f43f ae3a 	beq.w	8746 <checkMode()+0xf6>
    switchMode(&draw);
    8ad2:	4841      	ldr	r0, [pc, #260]	; (8bd8 <checkMode()+0x588>)
    8ad4:	f7fb f8e2 	bl	3c9c <switchMode(Mode*)>
    8ad8:	e635      	b.n	8746 <checkMode()+0xf6>
    8ada:	4948      	ldr	r1, [pc, #288]	; (8bfc <checkMode()+0x5ac>)
    8adc:	4837      	ldr	r0, [pc, #220]	; (8bbc <checkMode()+0x56c>)
    8ade:	f00d ff1e 	bl	1691e <String::equals(char const*) const>
  if (currentMode == &velocity && SMP.singleMode && buttonString == "0900") {
    8ae2:	b958      	cbnz	r0, 8afc <checkMode()+0x4ac>
  if (currentMode == &velocity && !SMP.singleMode && buttonString == "0900") {
    8ae4:	4b36      	ldr	r3, [pc, #216]	; (8bc0 <checkMode()+0x570>)
    8ae6:	681a      	ldr	r2, [r3, #0]
    8ae8:	4b3e      	ldr	r3, [pc, #248]	; (8be4 <checkMode()+0x594>)
    8aea:	429a      	cmp	r2, r3
    8aec:	f47f ae2b 	bne.w	8746 <checkMode()+0xf6>
    8af0:	4b37      	ldr	r3, [pc, #220]	; (8bd0 <checkMode()+0x580>)
    8af2:	681b      	ldr	r3, [r3, #0]
    8af4:	2b00      	cmp	r3, #0
    8af6:	f47f ae36 	bne.w	8766 <checkMode()+0x116>
    8afa:	e7e3      	b.n	8ac4 <checkMode()+0x474>
    switchMode(&singleMode);
    8afc:	4833      	ldr	r0, [pc, #204]	; (8bcc <checkMode()+0x57c>)
    8afe:	f7fb f8cd 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    8b02:	4b33      	ldr	r3, [pc, #204]	; (8bd0 <checkMode()+0x580>)
    8b04:	2201      	movs	r2, #1
    8b06:	601a      	str	r2, [r3, #0]
    8b08:	e7ec      	b.n	8ae4 <checkMode()+0x494>
    8b0a:	493d      	ldr	r1, [pc, #244]	; (8c00 <checkMode()+0x5b0>)
    8b0c:	482b      	ldr	r0, [pc, #172]	; (8bbc <checkMode()+0x56c>)
    8b0e:	f00d ff06 	bl	1691e <String::equals(char const*) const>
  if (currentMode == &volume_bpm && buttonString == "0090") {
    8b12:	2800      	cmp	r0, #0
    8b14:	f43f ae1d 	beq.w	8752 <checkMode()+0x102>
    switchMode(&draw);
    8b18:	482f      	ldr	r0, [pc, #188]	; (8bd8 <checkMode()+0x588>)
    8b1a:	f7fb f8bf 	bl	3c9c <switchMode(Mode*)>
    8b1e:	e618      	b.n	8752 <checkMode()+0x102>
    8b20:	4938      	ldr	r1, [pc, #224]	; (8c04 <checkMode()+0x5b4>)
    8b22:	4826      	ldr	r0, [pc, #152]	; (8bbc <checkMode()+0x56c>)
    8b24:	f00d fefb 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0909") {
    8b28:	b120      	cbz	r0, 8b34 <checkMode()+0x4e4>
    paintMode = false;
    8b2a:	2300      	movs	r3, #0
    8b2c:	4a36      	ldr	r2, [pc, #216]	; (8c08 <checkMode()+0x5b8>)
    8b2e:	7013      	strb	r3, [r2, #0]
    unpaintMode = false;
    8b30:	4a36      	ldr	r2, [pc, #216]	; (8c0c <checkMode()+0x5bc>)
    8b32:	7013      	strb	r3, [r2, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0009") {
    8b34:	4b22      	ldr	r3, [pc, #136]	; (8bc0 <checkMode()+0x570>)
    8b36:	681b      	ldr	r3, [r3, #0]
    8b38:	4a24      	ldr	r2, [pc, #144]	; (8bcc <checkMode()+0x57c>)
    8b3a:	4293      	cmp	r3, r2
    8b3c:	d003      	beq.n	8b46 <checkMode()+0x4f6>
    8b3e:	4a26      	ldr	r2, [pc, #152]	; (8bd8 <checkMode()+0x588>)
    8b40:	4293      	cmp	r3, r2
    8b42:	f47f ae10 	bne.w	8766 <checkMode()+0x116>
    8b46:	4932      	ldr	r1, [pc, #200]	; (8c10 <checkMode()+0x5c0>)
    8b48:	481c      	ldr	r0, [pc, #112]	; (8bbc <checkMode()+0x56c>)
    8b4a:	f00d fee8 	bl	1691e <String::equals(char const*) const>
    8b4e:	b120      	cbz	r0, 8b5a <checkMode()+0x50a>
    paintMode = false;
    8b50:	2300      	movs	r3, #0
    8b52:	4a2d      	ldr	r2, [pc, #180]	; (8c08 <checkMode()+0x5b8>)
    8b54:	7013      	strb	r3, [r2, #0]
    unpaintMode = false;
    8b56:	4a2d      	ldr	r2, [pc, #180]	; (8c0c <checkMode()+0x5bc>)
    8b58:	7013      	strb	r3, [r2, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "9000") {
    8b5a:	4b19      	ldr	r3, [pc, #100]	; (8bc0 <checkMode()+0x570>)
    8b5c:	681b      	ldr	r3, [r3, #0]
    8b5e:	4a1b      	ldr	r2, [pc, #108]	; (8bcc <checkMode()+0x57c>)
    8b60:	4293      	cmp	r3, r2
    8b62:	d003      	beq.n	8b6c <checkMode()+0x51c>
    8b64:	4a1c      	ldr	r2, [pc, #112]	; (8bd8 <checkMode()+0x588>)
    8b66:	4293      	cmp	r3, r2
    8b68:	f47f adfd 	bne.w	8766 <checkMode()+0x116>
    8b6c:	4929      	ldr	r1, [pc, #164]	; (8c14 <checkMode()+0x5c4>)
    8b6e:	4813      	ldr	r0, [pc, #76]	; (8bbc <checkMode()+0x56c>)
    8b70:	f00d fed5 	bl	1691e <String::equals(char const*) const>
    8b74:	b120      	cbz	r0, 8b80 <checkMode()+0x530>
    unpaintMode = false;
    8b76:	2300      	movs	r3, #0
    8b78:	4a24      	ldr	r2, [pc, #144]	; (8c0c <checkMode()+0x5bc>)
    8b7a:	7013      	strb	r3, [r2, #0]
    paintMode = false;
    8b7c:	4a22      	ldr	r2, [pc, #136]	; (8c08 <checkMode()+0x5b8>)
    8b7e:	7013      	strb	r3, [r2, #0]
  if ((currentMode == &draw) && buttonString == "0022") {
    8b80:	4b0f      	ldr	r3, [pc, #60]	; (8bc0 <checkMode()+0x570>)
    8b82:	681a      	ldr	r2, [r3, #0]
    8b84:	4b14      	ldr	r3, [pc, #80]	; (8bd8 <checkMode()+0x588>)
    8b86:	429a      	cmp	r2, r3
    8b88:	f47f aded 	bne.w	8766 <checkMode()+0x116>
    8b8c:	4922      	ldr	r1, [pc, #136]	; (8c18 <checkMode()+0x5c8>)
    8b8e:	480b      	ldr	r0, [pc, #44]	; (8bbc <checkMode()+0x56c>)
    8b90:	f00d fec5 	bl	1691e <String::equals(char const*) const>
    8b94:	2800      	cmp	r0, #0
    8b96:	f43f ade6 	beq.w	8766 <checkMode()+0x116>
    switchMode(&menu);
    8b9a:	4820      	ldr	r0, [pc, #128]	; (8c1c <checkMode()+0x5cc>)
    8b9c:	f7fb f87e 	bl	3c9c <switchMode(Mode*)>
    8ba0:	e5e7      	b.n	8772 <checkMode()+0x122>
    8ba2:	bf00      	nop
    8ba4:	f3af 8000 	nop.w
    8ba8:	00000000 	.word	0x00000000
    8bac:	40500000 	.word	0x40500000
    8bb0:	00000000 	.word	0x00000000
    8bb4:	405fc000 	.word	0x405fc000
    8bb8:	20000d3c 	.word	0x20000d3c
    8bbc:	20007364 	.word	0x20007364
    8bc0:	200057ec 	.word	0x200057ec
    8bc4:	20005ac4 	.word	0x20005ac4
    8bc8:	20000d44 	.word	0x20000d44
    8bcc:	20005b88 	.word	0x20005b88
    8bd0:	70000000 	.word	0x70000000
    8bd4:	20000d4c 	.word	0x20000d4c
    8bd8:	20005808 	.word	0x20005808
    8bdc:	20000d5c 	.word	0x20000d5c
    8be0:	70db37d8 	.word	0x70db37d8
    8be4:	20005bdc 	.word	0x20005bdc
    8be8:	20007374 	.word	0x20007374
    8bec:	20005c4c 	.word	0x20005c4c
    8bf0:	20000d54 	.word	0x20000d54
    8bf4:	200080d0 	.word	0x200080d0
    8bf8:	20000d64 	.word	0x20000d64
    8bfc:	20000d2c 	.word	0x20000d2c
    8c00:	20000d6c 	.word	0x20000d6c
    8c04:	20000d74 	.word	0x20000d74
    8c08:	20008c2d 	.word	0x20008c2d
    8c0c:	20008c3e 	.word	0x20008c3e
    8c10:	20000d7c 	.word	0x20000d7c
    8c14:	20000d84 	.word	0x20000d84
    8c18:	20000d8c 	.word	0x20000d8c
    8c1c:	20005a88 	.word	0x20005a88
    8c20:	499b      	ldr	r1, [pc, #620]	; (8e90 <checkMode()+0x840>)
    8c22:	489c      	ldr	r0, [pc, #624]	; (8e94 <checkMode()+0x844>)
    8c24:	f00d fe7b 	bl	1691e <String::equals(char const*) const>
  } else if ((currentMode == &menu) && buttonString == "0001") {
    8c28:	b9d8      	cbnz	r0, 8c62 <checkMode()+0x612>
  } else if ((currentMode == &menu) && buttonString == "0100") {
    8c2a:	4b9b      	ldr	r3, [pc, #620]	; (8e98 <checkMode()+0x848>)
    8c2c:	681a      	ldr	r2, [r3, #0]
    8c2e:	4b9b      	ldr	r3, [pc, #620]	; (8e9c <checkMode()+0x84c>)
    8c30:	429a      	cmp	r2, r3
    8c32:	f47f ad9e 	bne.w	8772 <checkMode()+0x122>
    8c36:	499a      	ldr	r1, [pc, #616]	; (8ea0 <checkMode()+0x850>)
    8c38:	4896      	ldr	r0, [pc, #600]	; (8e94 <checkMode()+0x844>)
    8c3a:	f00d fe70 	bl	1691e <String::equals(char const*) const>
    8c3e:	b9c8      	cbnz	r0, 8c74 <checkMode()+0x624>
  } else if ((currentMode == &menu) && buttonString == "1000") {
    8c40:	4b95      	ldr	r3, [pc, #596]	; (8e98 <checkMode()+0x848>)
    8c42:	681a      	ldr	r2, [r3, #0]
    8c44:	4b95      	ldr	r3, [pc, #596]	; (8e9c <checkMode()+0x84c>)
    8c46:	429a      	cmp	r2, r3
    8c48:	f47f ad93 	bne.w	8772 <checkMode()+0x122>
    8c4c:	4995      	ldr	r1, [pc, #596]	; (8ea4 <checkMode()+0x854>)
    8c4e:	4891      	ldr	r0, [pc, #580]	; (8e94 <checkMode()+0x844>)
    8c50:	f00d fe65 	bl	1691e <String::equals(char const*) const>
    8c54:	2800      	cmp	r0, #0
    8c56:	f43f ad8c 	beq.w	8772 <checkMode()+0x122>
    loadPattern(false);
    8c5a:	2000      	movs	r0, #0
    8c5c:	f7fd fd00 	bl	6660 <loadPattern(bool)>
    8c60:	e587      	b.n	8772 <checkMode()+0x122>
    paintMode = false;
    8c62:	2300      	movs	r3, #0
    8c64:	4a90      	ldr	r2, [pc, #576]	; (8ea8 <checkMode()+0x858>)
    8c66:	7013      	strb	r3, [r2, #0]
    unpaintMode = false;
    8c68:	4a90      	ldr	r2, [pc, #576]	; (8eac <checkMode()+0x85c>)
    8c6a:	7013      	strb	r3, [r2, #0]
    switchMode(&draw);
    8c6c:	4890      	ldr	r0, [pc, #576]	; (8eb0 <checkMode()+0x860>)
    8c6e:	f7fb f815 	bl	3c9c <switchMode(Mode*)>
    8c72:	e57e      	b.n	8772 <checkMode()+0x122>
    savePattern(false);
    8c74:	2000      	movs	r0, #0
    8c76:	f7fd fb21 	bl	62bc <savePattern(bool)>
    8c7a:	e57a      	b.n	8772 <checkMode()+0x122>
    8c7c:	498d      	ldr	r1, [pc, #564]	; (8eb4 <checkMode()+0x864>)
    8c7e:	4885      	ldr	r0, [pc, #532]	; (8e94 <checkMode()+0x844>)
    8c80:	f00d fe4d 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &singleMode) && buttonString == "2200") {
    8c84:	2800      	cmp	r0, #0
    8c86:	f43f ad7a 	beq.w	877e <checkMode()+0x12e>
    switchMode(&set_Wav);
    8c8a:	488b      	ldr	r0, [pc, #556]	; (8eb8 <checkMode()+0x868>)
    8c8c:	f7fb f806 	bl	3c9c <switchMode(Mode*)>
    currentMode->pos[2] = SMP.wav[SMP.currentChannel][0];
    8c90:	4a8a      	ldr	r2, [pc, #552]	; (8ebc <checkMode()+0x86c>)
    8c92:	6851      	ldr	r1, [r2, #4]
    8c94:	eb02 03c1 	add.w	r3, r2, r1, lsl #3
    8c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8c9a:	487f      	ldr	r0, [pc, #508]	; (8e98 <checkMode()+0x848>)
    8c9c:	6800      	ldr	r0, [r0, #0]
    8c9e:	6343      	str	r3, [r0, #52]	; 0x34
    SMP.wav[SMP.currentChannel][1] = SMP.wav[SMP.currentChannel][0];
    8ca0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    8ca4:	6293      	str	r3, [r2, #40]	; 0x28
		noInterrupts();
    8ca6:	b672      	cpsid	i
    encoders[2].write((SMP.wav[SMP.currentChannel][0] * 4) - 1);
    8ca8:	009b      	lsls	r3, r3, #2
    8caa:	3b01      	subs	r3, #1
		encoder.position = p;
    8cac:	4a84      	ldr	r2, [pc, #528]	; (8ec0 <checkMode()+0x870>)
    8cae:	64d3      	str	r3, [r2, #76]	; 0x4c
		interrupts();
    8cb0:	b662      	cpsie	i
	}
    8cb2:	e56a      	b.n	878a <checkMode()+0x13a>
    8cb4:	497b      	ldr	r1, [pc, #492]	; (8ea4 <checkMode()+0x854>)
    8cb6:	4877      	ldr	r0, [pc, #476]	; (8e94 <checkMode()+0x844>)
    8cb8:	f00d fe31 	bl	1691e <String::equals(char const*) const>
  } else if ((currentMode == &set_Wav) && buttonString == "1000") {
    8cbc:	b998      	cbnz	r0, 8ce6 <checkMode()+0x696>
  } else if ((currentMode == &set_Wav) && buttonString == "0001") {
    8cbe:	4b76      	ldr	r3, [pc, #472]	; (8e98 <checkMode()+0x848>)
    8cc0:	681a      	ldr	r2, [r3, #0]
    8cc2:	4b7d      	ldr	r3, [pc, #500]	; (8eb8 <checkMode()+0x868>)
    8cc4:	429a      	cmp	r2, r3
    8cc6:	f47f ad60 	bne.w	878a <checkMode()+0x13a>
    8cca:	4971      	ldr	r1, [pc, #452]	; (8e90 <checkMode()+0x840>)
    8ccc:	4871      	ldr	r0, [pc, #452]	; (8e94 <checkMode()+0x844>)
    8cce:	f00d fe26 	bl	1691e <String::equals(char const*) const>
    8cd2:	2800      	cmp	r0, #0
    8cd4:	f43f ad59 	beq.w	878a <checkMode()+0x13a>
    switchMode(&singleMode);
    8cd8:	487a      	ldr	r0, [pc, #488]	; (8ec4 <checkMode()+0x874>)
    8cda:	f7fa ffdf 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    8cde:	4b77      	ldr	r3, [pc, #476]	; (8ebc <checkMode()+0x86c>)
    8ce0:	2201      	movs	r2, #1
    8ce2:	601a      	str	r2, [r3, #0]
    8ce4:	e551      	b.n	878a <checkMode()+0x13a>
    SMP.wav[SMP.currentChannel][0] = SMP.wav[SMP.currentChannel][1];
    8ce6:	4b75      	ldr	r3, [pc, #468]	; (8ebc <checkMode()+0x86c>)
    8ce8:	6859      	ldr	r1, [r3, #4]
    8cea:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
    8cee:	6a92      	ldr	r2, [r2, #40]	; 0x28
    8cf0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    8cf4:	625a      	str	r2, [r3, #36]	; 0x24
    currentMode->pos[2] = SMP.wav[SMP.currentChannel][0];
    8cf6:	4b68      	ldr	r3, [pc, #416]	; (8e98 <checkMode()+0x848>)
    8cf8:	681b      	ldr	r3, [r3, #0]
    8cfa:	635a      	str	r2, [r3, #52]	; 0x34
    loadWav();
    8cfc:	f7ff fc6e 	bl	85dc <loadWav()>
    autoSave();
    8d00:	f7fd fc52 	bl	65a8 <autoSave()>
    8d04:	e541      	b.n	878a <checkMode()+0x13a>
    8d06:	496b      	ldr	r1, [pc, #428]	; (8eb4 <checkMode()+0x864>)
    8d08:	4862      	ldr	r0, [pc, #392]	; (8e94 <checkMode()+0x844>)
    8d0a:	f00d fe08 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw) && buttonString == "2200") {
    8d0e:	2800      	cmp	r0, #0
    8d10:	f43f ad41 	beq.w	8796 <checkMode()+0x146>
    switchMode(&set_SamplePack);
    8d14:	486c      	ldr	r0, [pc, #432]	; (8ec8 <checkMode()+0x878>)
    8d16:	f7fa ffc1 	bl	3c9c <switchMode(Mode*)>
    8d1a:	e542      	b.n	87a2 <checkMode()+0x152>
    8d1c:	4960      	ldr	r1, [pc, #384]	; (8ea0 <checkMode()+0x850>)
    8d1e:	485d      	ldr	r0, [pc, #372]	; (8e94 <checkMode()+0x844>)
    8d20:	f00d fdfd 	bl	1691e <String::equals(char const*) const>
  } else if ((currentMode == &set_SamplePack) && buttonString == "0100") {
    8d24:	b9d8      	cbnz	r0, 8d5e <checkMode()+0x70e>
  } else if ((currentMode == &set_SamplePack) && buttonString == "1000") {
    8d26:	4b5c      	ldr	r3, [pc, #368]	; (8e98 <checkMode()+0x848>)
    8d28:	681a      	ldr	r2, [r3, #0]
    8d2a:	4b67      	ldr	r3, [pc, #412]	; (8ec8 <checkMode()+0x878>)
    8d2c:	429a      	cmp	r2, r3
    8d2e:	f47f ad38 	bne.w	87a2 <checkMode()+0x152>
    8d32:	495c      	ldr	r1, [pc, #368]	; (8ea4 <checkMode()+0x854>)
    8d34:	4857      	ldr	r0, [pc, #348]	; (8e94 <checkMode()+0x844>)
    8d36:	f00d fdf2 	bl	1691e <String::equals(char const*) const>
    8d3a:	b9a8      	cbnz	r0, 8d68 <checkMode()+0x718>
  } else if ((currentMode == &set_SamplePack) && buttonString == "0001") {
    8d3c:	4b56      	ldr	r3, [pc, #344]	; (8e98 <checkMode()+0x848>)
    8d3e:	681a      	ldr	r2, [r3, #0]
    8d40:	4b61      	ldr	r3, [pc, #388]	; (8ec8 <checkMode()+0x878>)
    8d42:	429a      	cmp	r2, r3
    8d44:	f47f ad2d 	bne.w	87a2 <checkMode()+0x152>
    8d48:	4951      	ldr	r1, [pc, #324]	; (8e90 <checkMode()+0x840>)
    8d4a:	4852      	ldr	r0, [pc, #328]	; (8e94 <checkMode()+0x844>)
    8d4c:	f00d fde7 	bl	1691e <String::equals(char const*) const>
    8d50:	2800      	cmp	r0, #0
    8d52:	f43f ad26 	beq.w	87a2 <checkMode()+0x152>
    switchMode(&draw);
    8d56:	4856      	ldr	r0, [pc, #344]	; (8eb0 <checkMode()+0x860>)
    8d58:	f7fa ffa0 	bl	3c9c <switchMode(Mode*)>
    8d5c:	e521      	b.n	87a2 <checkMode()+0x152>
    saveSamplePack(SMP.pack);
    8d5e:	4b57      	ldr	r3, [pc, #348]	; (8ebc <checkMode()+0x86c>)
    8d60:	6a18      	ldr	r0, [r3, #32]
    8d62:	f7fc febb 	bl	5adc <saveSamplePack(unsigned int)>
    8d66:	e51c      	b.n	87a2 <checkMode()+0x152>
    loadSamplePack(SMP.pack);
    8d68:	4b54      	ldr	r3, [pc, #336]	; (8ebc <checkMode()+0x86c>)
    8d6a:	6a18      	ldr	r0, [r3, #32]
    8d6c:	f7fe fc3a 	bl	75e4 <loadSamplePack(unsigned int)>
    8d70:	e517      	b.n	87a2 <checkMode()+0x152>
    8d72:	494b      	ldr	r1, [pc, #300]	; (8ea0 <checkMode()+0x850>)
    8d74:	4847      	ldr	r0, [pc, #284]	; (8e94 <checkMode()+0x844>)
    8d76:	f00d fdd2 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0100") {
    8d7a:	2800      	cmp	r0, #0
    8d7c:	d173      	bne.n	8e66 <checkMode()+0x816>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0002") {
    8d7e:	4b46      	ldr	r3, [pc, #280]	; (8e98 <checkMode()+0x848>)
    8d80:	681b      	ldr	r3, [r3, #0]
    8d82:	4a50      	ldr	r2, [pc, #320]	; (8ec4 <checkMode()+0x874>)
    8d84:	4293      	cmp	r3, r2
    8d86:	d003      	beq.n	8d90 <checkMode()+0x740>
    8d88:	4a49      	ldr	r2, [pc, #292]	; (8eb0 <checkMode()+0x860>)
    8d8a:	4293      	cmp	r3, r2
    8d8c:	f47f ad13 	bne.w	87b6 <checkMode()+0x166>
    8d90:	494e      	ldr	r1, [pc, #312]	; (8ecc <checkMode()+0x87c>)
    8d92:	4840      	ldr	r0, [pc, #256]	; (8e94 <checkMode()+0x844>)
    8d94:	f00d fdc3 	bl	1691e <String::equals(char const*) const>
    8d98:	b110      	cbz	r0, 8da0 <checkMode()+0x750>
    paintMode = true;
    8d9a:	4b43      	ldr	r3, [pc, #268]	; (8ea8 <checkMode()+0x858>)
    8d9c:	2201      	movs	r2, #1
    8d9e:	701a      	strb	r2, [r3, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "2000") {
    8da0:	4b3d      	ldr	r3, [pc, #244]	; (8e98 <checkMode()+0x848>)
    8da2:	681b      	ldr	r3, [r3, #0]
    8da4:	4a47      	ldr	r2, [pc, #284]	; (8ec4 <checkMode()+0x874>)
    8da6:	4293      	cmp	r3, r2
    8da8:	d003      	beq.n	8db2 <checkMode()+0x762>
    8daa:	4a41      	ldr	r2, [pc, #260]	; (8eb0 <checkMode()+0x860>)
    8dac:	4293      	cmp	r3, r2
    8dae:	f47f ad02 	bne.w	87b6 <checkMode()+0x166>
    8db2:	4947      	ldr	r1, [pc, #284]	; (8ed0 <checkMode()+0x880>)
    8db4:	4837      	ldr	r0, [pc, #220]	; (8e94 <checkMode()+0x844>)
    8db6:	f00d fdb2 	bl	1691e <String::equals(char const*) const>
    8dba:	2800      	cmp	r0, #0
    8dbc:	d156      	bne.n	8e6c <checkMode()+0x81c>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0001") {
    8dbe:	4b36      	ldr	r3, [pc, #216]	; (8e98 <checkMode()+0x848>)
    8dc0:	681b      	ldr	r3, [r3, #0]
    8dc2:	4a40      	ldr	r2, [pc, #256]	; (8ec4 <checkMode()+0x874>)
    8dc4:	4293      	cmp	r3, r2
    8dc6:	d003      	beq.n	8dd0 <checkMode()+0x780>
    8dc8:	4a39      	ldr	r2, [pc, #228]	; (8eb0 <checkMode()+0x860>)
    8dca:	4293      	cmp	r3, r2
    8dcc:	f47f acf3 	bne.w	87b6 <checkMode()+0x166>
    8dd0:	492f      	ldr	r1, [pc, #188]	; (8e90 <checkMode()+0x840>)
    8dd2:	4830      	ldr	r0, [pc, #192]	; (8e94 <checkMode()+0x844>)
    8dd4:	f00d fda3 	bl	1691e <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "0005") {
    8dd8:	4b2f      	ldr	r3, [pc, #188]	; (8e98 <checkMode()+0x848>)
    8dda:	681b      	ldr	r3, [r3, #0]
    8ddc:	4a39      	ldr	r2, [pc, #228]	; (8ec4 <checkMode()+0x874>)
    8dde:	4293      	cmp	r3, r2
    8de0:	d003      	beq.n	8dea <checkMode()+0x79a>
    8de2:	4a33      	ldr	r2, [pc, #204]	; (8eb0 <checkMode()+0x860>)
    8de4:	4293      	cmp	r3, r2
    8de6:	f47f ace6 	bne.w	87b6 <checkMode()+0x166>
    8dea:	493a      	ldr	r1, [pc, #232]	; (8ed4 <checkMode()+0x884>)
    8dec:	4829      	ldr	r0, [pc, #164]	; (8e94 <checkMode()+0x844>)
    8dee:	f00d fd96 	bl	1691e <String::equals(char const*) const>
    8df2:	2800      	cmp	r0, #0
    8df4:	d144      	bne.n	8e80 <checkMode()+0x830>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "5000") {
    8df6:	4b28      	ldr	r3, [pc, #160]	; (8e98 <checkMode()+0x848>)
    8df8:	681b      	ldr	r3, [r3, #0]
    8dfa:	4a32      	ldr	r2, [pc, #200]	; (8ec4 <checkMode()+0x874>)
    8dfc:	4293      	cmp	r3, r2
    8dfe:	d003      	beq.n	8e08 <checkMode()+0x7b8>
    8e00:	4a2b      	ldr	r2, [pc, #172]	; (8eb0 <checkMode()+0x860>)
    8e02:	4293      	cmp	r3, r2
    8e04:	f47f acd7 	bne.w	87b6 <checkMode()+0x166>
    8e08:	4933      	ldr	r1, [pc, #204]	; (8ed8 <checkMode()+0x888>)
    8e0a:	4822      	ldr	r0, [pc, #136]	; (8e94 <checkMode()+0x844>)
    8e0c:	f00d fd87 	bl	1691e <String::equals(char const*) const>
    8e10:	b120      	cbz	r0, 8e1c <checkMode()+0x7cc>
    paintMode = false;
    8e12:	2300      	movs	r3, #0
    8e14:	4a24      	ldr	r2, [pc, #144]	; (8ea8 <checkMode()+0x858>)
    8e16:	7013      	strb	r3, [r2, #0]
    unpaintMode = false;
    8e18:	4a24      	ldr	r2, [pc, #144]	; (8eac <checkMode()+0x85c>)
    8e1a:	7013      	strb	r3, [r2, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "1000") {
    8e1c:	4b1e      	ldr	r3, [pc, #120]	; (8e98 <checkMode()+0x848>)
    8e1e:	681b      	ldr	r3, [r3, #0]
    8e20:	4a28      	ldr	r2, [pc, #160]	; (8ec4 <checkMode()+0x874>)
    8e22:	4293      	cmp	r3, r2
    8e24:	d003      	beq.n	8e2e <checkMode()+0x7de>
    8e26:	4a22      	ldr	r2, [pc, #136]	; (8eb0 <checkMode()+0x860>)
    8e28:	4293      	cmp	r3, r2
    8e2a:	f47f acca 	bne.w	87c2 <checkMode()+0x172>
    8e2e:	491d      	ldr	r1, [pc, #116]	; (8ea4 <checkMode()+0x854>)
    8e30:	4818      	ldr	r0, [pc, #96]	; (8e94 <checkMode()+0x844>)
    8e32:	f00d fd74 	bl	1691e <String::equals(char const*) const>
    8e36:	2800      	cmp	r0, #0
    8e38:	d152      	bne.n	8ee0 <checkMode()+0x890>
  if (currentMode == &singleMode && buttonString == "3000") {
    8e3a:	4b17      	ldr	r3, [pc, #92]	; (8e98 <checkMode()+0x848>)
    8e3c:	681a      	ldr	r2, [r3, #0]
    8e3e:	4b21      	ldr	r3, [pc, #132]	; (8ec4 <checkMode()+0x874>)
    8e40:	429a      	cmp	r2, r3
    8e42:	f47f acb8 	bne.w	87b6 <checkMode()+0x166>
    8e46:	4925      	ldr	r1, [pc, #148]	; (8edc <checkMode()+0x88c>)
    8e48:	4812      	ldr	r0, [pc, #72]	; (8e94 <checkMode()+0x844>)
    8e4a:	f00d fd68 	bl	1691e <String::equals(char const*) const>
    8e4e:	2800      	cmp	r0, #0
    8e50:	f43f acb1 	beq.w	87b6 <checkMode()+0x166>
    copyPosValues(&singleMode, &draw);
    8e54:	4c16      	ldr	r4, [pc, #88]	; (8eb0 <checkMode()+0x860>)
    8e56:	4621      	mov	r1, r4
    8e58:	481a      	ldr	r0, [pc, #104]	; (8ec4 <checkMode()+0x874>)
    8e5a:	f7fa fc57 	bl	370c <copyPosValues(Mode*, Mode*)>
    switchMode(&draw);
    8e5e:	4620      	mov	r0, r4
    8e60:	f7fa ff1c 	bl	3c9c <switchMode(Mode*)>
    8e64:	e4ad      	b.n	87c2 <checkMode()+0x172>
    toggleMute();
    8e66:	f7fa fdd3 	bl	3a10 <toggleMute()>
    8e6a:	e788      	b.n	8d7e <checkMode()+0x72e>
    unpaint();
    8e6c:	f7fb ffe0 	bl	4e30 <unpaint()>
    unpaintMode = true;
    8e70:	4b0e      	ldr	r3, [pc, #56]	; (8eac <checkMode()+0x85c>)
    8e72:	2201      	movs	r2, #1
    8e74:	701a      	strb	r2, [r3, #0]
  SMP.activeCopy = false;
    8e76:	4b11      	ldr	r3, [pc, #68]	; (8ebc <checkMode()+0x86c>)
    8e78:	2200      	movs	r2, #0
    8e7a:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
}
    8e7e:	e79e      	b.n	8dbe <checkMode()+0x76e>
    paintMode = false;
    8e80:	2300      	movs	r3, #0
    8e82:	4a09      	ldr	r2, [pc, #36]	; (8ea8 <checkMode()+0x858>)
    8e84:	7013      	strb	r3, [r2, #0]
    unpaintMode = false;
    8e86:	4a09      	ldr	r2, [pc, #36]	; (8eac <checkMode()+0x85c>)
    8e88:	7013      	strb	r3, [r2, #0]
    paint();
    8e8a:	f7fc f8a9 	bl	4fe0 <paint()>
    8e8e:	e7b2      	b.n	8df6 <checkMode()+0x7a6>
    8e90:	20000d3c 	.word	0x20000d3c
    8e94:	20007364 	.word	0x20007364
    8e98:	200057ec 	.word	0x200057ec
    8e9c:	20005a88 	.word	0x20005a88
    8ea0:	20000d94 	.word	0x20000d94
    8ea4:	20000d44 	.word	0x20000d44
    8ea8:	20008c2d 	.word	0x20008c2d
    8eac:	20008c3e 	.word	0x20008c3e
    8eb0:	20005808 	.word	0x20005808
    8eb4:	20000d9c 	.word	0x20000d9c
    8eb8:	20005b4c 	.word	0x20005b4c
    8ebc:	70000000 	.word	0x70000000
    8ec0:	20007374 	.word	0x20007374
    8ec4:	20005b88 	.word	0x20005b88
    8ec8:	20005b10 	.word	0x20005b10
    8ecc:	20000da4 	.word	0x20000da4
    8ed0:	20000dac 	.word	0x20000dac
    8ed4:	20000db4 	.word	0x20000db4
    8ed8:	20000dbc 	.word	0x20000dbc
    8edc:	20000dc4 	.word	0x20000dc4
    unpaint();
    8ee0:	f7fb ffa6 	bl	4e30 <unpaint()>
    8ee4:	e7a9      	b.n	8e3a <checkMode()+0x7ea>
    8ee6:	490f      	ldr	r1, [pc, #60]	; (8f24 <checkMode()+0x8d4>)
    8ee8:	480f      	ldr	r0, [pc, #60]	; (8f28 <checkMode()+0x8d8>)
    8eea:	f00d fd18 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode == &draw && buttonString == "3000" && ((SMP.y - 1 >= 1 && SMP.y - 1 <= maxFiles) || SMP.y - 1 > 12)) {
    8eee:	2800      	cmp	r0, #0
    8ef0:	f43f ac67 	beq.w	87c2 <checkMode()+0x172>
    8ef4:	4b0d      	ldr	r3, [pc, #52]	; (8f2c <checkMode()+0x8dc>)
    8ef6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    8efa:	1e9a      	subs	r2, r3, #2
    8efc:	2a08      	cmp	r2, #8
    8efe:	d903      	bls.n	8f08 <checkMode()+0x8b8>
    8f00:	1e5a      	subs	r2, r3, #1
    8f02:	2a0c      	cmp	r2, #12
    8f04:	f67f ac5d 	bls.w	87c2 <checkMode()+0x172>
    SMP.currentChannel = SMP.y - 1;
    8f08:	4c08      	ldr	r4, [pc, #32]	; (8f2c <checkMode()+0x8dc>)
    8f0a:	3b01      	subs	r3, #1
    8f0c:	6063      	str	r3, [r4, #4]
    copyPosValues(&draw, &singleMode);
    8f0e:	4d08      	ldr	r5, [pc, #32]	; (8f30 <checkMode()+0x8e0>)
    8f10:	4629      	mov	r1, r5
    8f12:	4808      	ldr	r0, [pc, #32]	; (8f34 <checkMode()+0x8e4>)
    8f14:	f7fa fbfa 	bl	370c <copyPosValues(Mode*, Mode*)>
    switchMode(&singleMode);
    8f18:	4628      	mov	r0, r5
    8f1a:	f7fa febf 	bl	3c9c <switchMode(Mode*)>
    SMP.singleMode = true;
    8f1e:	2301      	movs	r3, #1
    8f20:	6023      	str	r3, [r4, #0]
}
    8f22:	e44e      	b.n	87c2 <checkMode()+0x172>
    8f24:	20000dc4 	.word	0x20000dc4
    8f28:	20007364 	.word	0x20007364
    8f2c:	70000000 	.word	0x70000000
    8f30:	20005b88 	.word	0x20005b88
    8f34:	20005808 	.word	0x20005808

00008f38 <previewSample(unsigned int, unsigned int, bool, bool)>:
void previewSample(unsigned int folder, unsigned int sampleID, bool setMaxSampleLength, bool firstPreview) {
    8f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f3c:	b0a8      	sub	sp, #160	; 0xa0
    8f3e:	4680      	mov	r8, r0
    8f40:	4689      	mov	r9, r1
    8f42:	4616      	mov	r6, r2
    8f44:	461f      	mov	r7, r3
    8f46:	4ba0      	ldr	r3, [pc, #640]	; (91c8 <previewSample(unsigned int, unsigned int, bool, bool)+0x290>)
    8f48:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
    8f4c:	f8d3 5138 	ldr.w	r5, [r3, #312]	; 0x138
        for (auto && sample : _audiosamples) {
    8f50:	42ac      	cmp	r4, r5
    8f52:	d016      	beq.n	8f82 <previewSample(unsigned int, unsigned int, bool, bool)+0x4a>
            delete sample;
    8f54:	f04f 0a14 	mov.w	sl, #20
    8f58:	e001      	b.n	8f5e <previewSample(unsigned int, unsigned int, bool, bool)+0x26>
        for (auto && sample : _audiosamples) {
    8f5a:	42a5      	cmp	r5, r4
    8f5c:	d007      	beq.n	8f6e <previewSample(unsigned int, unsigned int, bool, bool)+0x36>
            delete sample;
    8f5e:	f854 0b04 	ldr.w	r0, [r4], #4
    8f62:	2800      	cmp	r0, #0
    8f64:	d0f9      	beq.n	8f5a <previewSample(unsigned int, unsigned int, bool, bool)+0x22>
    8f66:	4651      	mov	r1, sl
    8f68:	f00e fa6c 	bl	17444 <operator delete(void*, unsigned int)>
    8f6c:	e7f5      	b.n	8f5a <previewSample(unsigned int, unsigned int, bool, bool)+0x22>
      { _M_erase_at_end(this->_M_impl._M_start); }
    8f6e:	4b96      	ldr	r3, [pc, #600]	; (91c8 <previewSample(unsigned int, unsigned int, bool, bool)+0x290>)
    8f70:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	if (size_type __n = this->_M_impl._M_finish - __pos)
    8f74:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    8f78:	429a      	cmp	r2, r3
    8f7a:	d002      	beq.n	8f82 <previewSample(unsigned int, unsigned int, bool, bool)+0x4a>
	    this->_M_impl._M_finish = __pos;
    8f7c:	4b92      	ldr	r3, [pc, #584]	; (91c8 <previewSample(unsigned int, unsigned int, bool, bool)+0x290>)
    8f7e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  envelope0.noteOff();
    8f82:	4892      	ldr	r0, [pc, #584]	; (91cc <previewSample(unsigned int, unsigned int, bool, bool)+0x294>)
    8f84:	f003 ff14 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
  sprintf(OUTPUTf, "samples/%d/_%d.wav", folder, sampleID);
    8f88:	464b      	mov	r3, r9
    8f8a:	4642      	mov	r2, r8
    8f8c:	4990      	ldr	r1, [pc, #576]	; (91d0 <previewSample(unsigned int, unsigned int, bool, bool)+0x298>)
    8f8e:	a81b      	add	r0, sp, #108	; 0x6c
    8f90:	f019 fbb6 	bl	22700 <sprintf>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    8f94:	2300      	movs	r3, #0
    8f96:	aa1b      	add	r2, sp, #108	; 0x6c
    8f98:	498e      	ldr	r1, [pc, #568]	; (91d4 <previewSample(unsigned int, unsigned int, bool, bool)+0x29c>)
    8f9a:	a802      	add	r0, sp, #8
    8f9c:	f009 fff8 	bl	12f90 <FsVolume::open(char const*, int)>
    8fa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	d050      	beq.n	9048 <previewSample(unsigned int, unsigned int, bool, bool)+0x110>
		if (file) return File(new SDFile(file));
    8fa6:	205c      	movs	r0, #92	; 0x5c
    8fa8:	f00e fa3c 	bl	17424 <operator new(unsigned int)>
    8fac:	4604      	mov	r4, r0
class FileImpl {
    8fae:	2500      	movs	r5, #0
    8fb0:	6045      	str	r5, [r0, #4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    8fb2:	4b89      	ldr	r3, [pc, #548]	; (91d8 <previewSample(unsigned int, unsigned int, bool, bool)+0x2a0>)
    8fb4:	6003      	str	r3, [r0, #0]
class Print
    8fb6:	9b03      	ldr	r3, [sp, #12]
    8fb8:	60c3      	str	r3, [r0, #12]
class Stream : public Print
    8fba:	4b88      	ldr	r3, [pc, #544]	; (91dc <previewSample(unsigned int, unsigned int, bool, bool)+0x2a4>)
    8fbc:	6083      	str	r3, [r0, #8]
    8fbe:	9b04      	ldr	r3, [sp, #16]
    8fc0:	6103      	str	r3, [r0, #16]
    8fc2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8fc6:	7503      	strb	r3, [r0, #20]
    8fc8:	a906      	add	r1, sp, #24
    8fca:	3018      	adds	r0, #24
    8fcc:	f009 fea9 	bl	12d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    8fd0:	4b83      	ldr	r3, [pc, #524]	; (91e0 <previewSample(unsigned int, unsigned int, bool, bool)+0x2a8>)
    8fd2:	60a3      	str	r3, [r4, #8]
    8fd4:	65a5      	str	r5, [r4, #88]	; 0x58
	constexpr Print() : write_error(0) {}
    8fd6:	9517      	str	r5, [sp, #92]	; 0x5c
	constexpr Stream() : _timeout(1000), read_error(0) {}
    8fd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    8fdc:	9318      	str	r3, [sp, #96]	; 0x60
    8fde:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
	File(FileImpl *file) {
    8fe2:	4b80      	ldr	r3, [pc, #512]	; (91e4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2ac>)
    8fe4:	9316      	str	r3, [sp, #88]	; 0x58
		f = file;
    8fe6:	941a      	str	r4, [sp, #104]	; 0x68
		if (f) f->refcount++;
    8fe8:	6863      	ldr	r3, [r4, #4]
    8fea:	3301      	adds	r3, #1
    8fec:	6063      	str	r3, [r4, #4]
    8fee:	4b7e      	ldr	r3, [pc, #504]	; (91e8 <previewSample(unsigned int, unsigned int, bool, bool)+0x2b0>)
    8ff0:	9302      	str	r3, [sp, #8]
  ~FsBaseFile() {close();}
    8ff2:	a806      	add	r0, sp, #24
    8ff4:	f009 fed6 	bl	12da4 <FsBaseFile::close()>
  SMP.smplen = 0;
    8ff8:	4b7c      	ldr	r3, [pc, #496]	; (91ec <previewSample(unsigned int, unsigned int, bool, bool)+0x2b4>)
    8ffa:	2200      	movs	r2, #0
    8ffc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		return (f) ? f->size() : 0;
    9000:	9c1a      	ldr	r4, [sp, #104]	; 0x68
    9002:	2c00      	cmp	r4, #0
    9004:	f000 810a 	beq.w	921c <previewSample(unsigned int, unsigned int, bool, bool)+0x2e4>
    9008:	6823      	ldr	r3, [r4, #0]
    900a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    900c:	4620      	mov	r0, r4
    900e:	4798      	blx	r3
    9010:	4602      	mov	r2, r0
    9012:	460b      	mov	r3, r1
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    9014:	4d76      	ldr	r5, [pc, #472]	; (91f0 <previewSample(unsigned int, unsigned int, bool, bool)+0x2b8>)
    9016:	2100      	movs	r1, #0
    9018:	9101      	str	r1, [sp, #4]
    901a:	210a      	movs	r1, #10
    901c:	9100      	str	r1, [sp, #0]
    901e:	4628      	mov	r0, r5
    9020:	f00d f94a 	bl	162b8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    9024:	4628      	mov	r0, r5
    9026:	f00d f8ce 	bl	161c6 <Print::println()>
		return (f) ? f->isOpen() : false;
    902a:	6823      	ldr	r3, [r4, #0]
    902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    902e:	4620      	mov	r0, r4
    9030:	4798      	blx	r3
  if (previewSample) {
    9032:	b9b0      	cbnz	r0, 9062 <previewSample(unsigned int, unsigned int, bool, bool)+0x12a>
	virtual ~File() {
    9034:	4b6b      	ldr	r3, [pc, #428]	; (91e4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2ac>)
    9036:	9316      	str	r3, [sp, #88]	; 0x58
		if (f) dec_refcount();
    9038:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    903a:	b113      	cbz	r3, 9042 <previewSample(unsigned int, unsigned int, bool, bool)+0x10a>
    903c:	a816      	add	r0, sp, #88	; 0x58
    903e:	f7f9 fc6d 	bl	291c <File::dec_refcount()>
}
    9042:	b028      	add	sp, #160	; 0xa0
    9044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
    9048:	9b15      	ldr	r3, [sp, #84]	; 0x54
    904a:	2b00      	cmp	r3, #0
    904c:	d1ab      	bne.n	8fa6 <previewSample(unsigned int, unsigned int, bool, bool)+0x6e>
	constexpr Print() : write_error(0) {}
    904e:	9317      	str	r3, [sp, #92]	; 0x5c
    9050:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9054:	9218      	str	r2, [sp, #96]	; 0x60
    9056:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
	constexpr File() : f(nullptr) { }
    905a:	4a62      	ldr	r2, [pc, #392]	; (91e4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2ac>)
    905c:	9216      	str	r2, [sp, #88]	; 0x58
    905e:	931a      	str	r3, [sp, #104]	; 0x68
    9060:	e7c5      	b.n	8fee <previewSample(unsigned int, unsigned int, bool, bool)+0xb6>
		return (f) ? f->size() : 0;
    9062:	6823      	ldr	r3, [r4, #0]
    9064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9066:	4620      	mov	r0, r4
    9068:	4798      	blx	r3
    if (firstPreview) {
    906a:	2f00      	cmp	r7, #0
    906c:	d149      	bne.n	9102 <previewSample(unsigned int, unsigned int, bool, bool)+0x1ca>
    int fileSize = previewSample.size();
    906e:	4605      	mov	r5, r0
		return (f) ? f->seek(pos, mode) : false;
    9070:	6823      	ldr	r3, [r4, #0]
    9072:	2200      	movs	r2, #0
    9074:	9200      	str	r2, [sp, #0]
    9076:	6a19      	ldr	r1, [r3, #32]
    9078:	2218      	movs	r2, #24
    907a:	2300      	movs	r3, #0
    907c:	4620      	mov	r0, r4
    907e:	4788      	blx	r1
		if (f->read(&b, 1) < 1) return -1;
    9080:	6823      	ldr	r3, [r4, #0]
    9082:	689b      	ldr	r3, [r3, #8]
    9084:	2201      	movs	r2, #1
    9086:	a902      	add	r1, sp, #8
    9088:	4620      	mov	r0, r4
    908a:	4798      	blx	r3
    908c:	2800      	cmp	r0, #0
    908e:	f000 8093 	beq.w	91b8 <previewSample(unsigned int, unsigned int, bool, bool)+0x280>
		return b;
    9092:	f89d 3008 	ldrb.w	r3, [sp, #8]
      if (g == 72)
    9096:	2b48      	cmp	r3, #72	; 0x48
    9098:	d040      	beq.n	911c <previewSample(unsigned int, unsigned int, bool, bool)+0x1e4>
      if (g == 68)
    909a:	2b44      	cmp	r3, #68	; 0x44
    909c:	f040 808e 	bne.w	91bc <previewSample(unsigned int, unsigned int, bool, bool)+0x284>
        PrevSampleRate = 3;
    90a0:	4a54      	ldr	r2, [pc, #336]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    90a2:	2103      	movs	r1, #3
    90a4:	6011      	str	r1, [r2, #0]
      if (g == 0)
    90a6:	b913      	cbnz	r3, 90ae <previewSample(unsigned int, unsigned int, bool, bool)+0x176>
        PrevSampleRate = 4;
    90a8:	4b52      	ldr	r3, [pc, #328]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    90aa:	2204      	movs	r2, #4
    90ac:	601a      	str	r2, [r3, #0]
    int startOffset = 200 * SMP.seek;   // Start offset in milliseconds
    90ae:	4a4f      	ldr	r2, [pc, #316]	; (91ec <previewSample(unsigned int, unsigned int, bool, bool)+0x2b4>)
    90b0:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
    90b4:	21c8      	movs	r1, #200	; 0xc8
    90b6:	fb01 f903 	mul.w	r9, r1, r3
    int endOffset = 200 * SMP.seekEnd;  // End offset in milliseconds
    90ba:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    if (setMaxSampleLength == true) {
    90be:	2e00      	cmp	r6, #0
    90c0:	d135      	bne.n	912e <previewSample(unsigned int, unsigned int, bool, bool)+0x1f6>
    int endOffset = 200 * SMP.seekEnd;  // End offset in milliseconds
    90c2:	fb01 f202 	mul.w	r2, r1, r2
    int startOffsetBytes = startOffset * PrevSampleRate * 2;  // Convert to bytes (assuming 16-bit samples)
    90c6:	4b4b      	ldr	r3, [pc, #300]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    90c8:	681b      	ldr	r3, [r3, #0]
    90ca:	fb09 f903 	mul.w	r9, r9, r3
    90ce:	ea4f 0949 	mov.w	r9, r9, lsl #1
    int endOffsetBytes = endOffset * PrevSampleRate * 2;      // Convert to bytes (assuming 16-bit samples)
    90d2:	fb02 f803 	mul.w	r8, r2, r3
    90d6:	ea4f 0848 	mov.w	r8, r8, lsl #1
    endOffsetBytes = min(endOffsetBytes, fileSize - 44);
    90da:	3d2c      	subs	r5, #44	; 0x2c
    90dc:	45a8      	cmp	r8, r5
    90de:	bfa8      	it	ge
    90e0:	46a8      	movge	r8, r5
    previewSample.seek(44 + startOffsetBytes);
    90e2:	f109 022c 	add.w	r2, r9, #44	; 0x2c
		return (f) ? f->seek(pos, mode) : false;
    90e6:	6823      	ldr	r3, [r4, #0]
    90e8:	2500      	movs	r5, #0
    90ea:	9500      	str	r5, [sp, #0]
    90ec:	6a19      	ldr	r1, [r3, #32]
    90ee:	17d3      	asrs	r3, r2, #31
    90f0:	4620      	mov	r0, r4
    90f2:	4788      	blx	r1
    memset(sampled[0], 0, sizeof(sample_len[0]));
    90f4:	4f40      	ldr	r7, [pc, #256]	; (91f8 <previewSample(unsigned int, unsigned int, bool, bool)+0x2c0>)
    90f6:	603d      	str	r5, [r7, #0]
    while (previewSample.available() && (plen < (endOffsetBytes - startOffsetBytes))) {
    90f8:	eba8 0809 	sub.w	r8, r8, r9
		if (f->read(&b, 1) < 1) return -1;
    90fc:	f04f 0901 	mov.w	r9, #1
    9100:	e01c      	b.n	913c <previewSample(unsigned int, unsigned int, bool, bool)+0x204>
		return (f) ? f->size() : 0;
    9102:	6823      	ldr	r3, [r4, #0]
    9104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9106:	4620      	mov	r0, r4
    9108:	4798      	blx	r3
      fileSize = min(previewSample.size(), 300000);  // max preview len =  X Sec.
    910a:	4605      	mov	r5, r0
    910c:	4b3b      	ldr	r3, [pc, #236]	; (91fc <previewSample(unsigned int, unsigned int, bool, bool)+0x2c4>)
    910e:	4283      	cmp	r3, r0
    9110:	f04f 0300 	mov.w	r3, #0
    9114:	418b      	sbcs	r3, r1
    9116:	bf38      	it	cc
    9118:	4d38      	ldrcc	r5, [pc, #224]	; (91fc <previewSample(unsigned int, unsigned int, bool, bool)+0x2c4>)
    911a:	e7a9      	b.n	9070 <previewSample(unsigned int, unsigned int, bool, bool)+0x138>
        PrevSampleRate = 4;
    911c:	4a35      	ldr	r2, [pc, #212]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    911e:	2104      	movs	r1, #4
    9120:	6011      	str	r1, [r2, #0]
      if (g == 17)
    9122:	2b11      	cmp	r3, #17
    9124:	d1bf      	bne.n	90a6 <previewSample(unsigned int, unsigned int, bool, bool)+0x16e>
        PrevSampleRate = 1;
    9126:	4b33      	ldr	r3, [pc, #204]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    9128:	2201      	movs	r2, #1
    912a:	601a      	str	r2, [r3, #0]
      if (g == 0)
    912c:	e7bf      	b.n	90ae <previewSample(unsigned int, unsigned int, bool, bool)+0x176>
      endOffset = fileSize;
    912e:	462a      	mov	r2, r5
    9130:	e7c9      	b.n	90c6 <previewSample(unsigned int, unsigned int, bool, bool)+0x18e>
		return b;
    9132:	f89d 3008 	ldrb.w	r3, [sp, #8]
      sampled[0][plen] = b;
    9136:	f807 3b01 	strb.w	r3, [r7], #1
      plen++;
    913a:	3501      	adds	r5, #1
		return (f) ? f->available() : 0;
    913c:	6823      	ldr	r3, [r4, #0]
    913e:	691b      	ldr	r3, [r3, #16]
    9140:	4620      	mov	r0, r4
    9142:	4798      	blx	r3
    while (previewSample.available() && (plen < (endOffsetBytes - startOffsetBytes))) {
    9144:	b160      	cbz	r0, 9160 <previewSample(unsigned int, unsigned int, bool, bool)+0x228>
    9146:	45a8      	cmp	r8, r5
    9148:	dd0a      	ble.n	9160 <previewSample(unsigned int, unsigned int, bool, bool)+0x228>
		if (f->read(&b, 1) < 1) return -1;
    914a:	6823      	ldr	r3, [r4, #0]
    914c:	689b      	ldr	r3, [r3, #8]
    914e:	464a      	mov	r2, r9
    9150:	a902      	add	r1, sp, #8
    9152:	4620      	mov	r0, r4
    9154:	4798      	blx	r3
    9156:	2800      	cmp	r0, #0
    9158:	d1eb      	bne.n	9132 <previewSample(unsigned int, unsigned int, bool, bool)+0x1fa>
    915a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    915e:	e7ea      	b.n	9136 <previewSample(unsigned int, unsigned int, bool, bool)+0x1fe>
    sampleIsLoaded = true;
    9160:	4b27      	ldr	r3, [pc, #156]	; (9200 <previewSample(unsigned int, unsigned int, bool, bool)+0x2c8>)
    9162:	2201      	movs	r2, #1
    9164:	701a      	strb	r2, [r3, #0]
    SMP.smplen = plen;
    9166:	4b21      	ldr	r3, [pc, #132]	; (91ec <previewSample(unsigned int, unsigned int, bool, bool)+0x2b4>)
    9168:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
    if (setMaxSampleLength == true) {
    916c:	2e00      	cmp	r6, #0
    916e:	d063      	beq.n	9238 <previewSample(unsigned int, unsigned int, bool, bool)+0x300>
      serialprintln(currentMode->maxValues[3]);
    9170:	4b24      	ldr	r3, [pc, #144]	; (9204 <previewSample(unsigned int, unsigned int, bool, bool)+0x2cc>)
    9172:	6819      	ldr	r1, [r3, #0]
      serialprint(SMP.smplen / (PrevSampleRate * 2) / 200);
    9174:	4b1f      	ldr	r3, [pc, #124]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    9176:	681b      	ldr	r3, [r3, #0]
    9178:	4093      	lsls	r3, r2
    917a:	fbb5 f3f3 	udiv	r3, r5, r3
    917e:	4a22      	ldr	r2, [pc, #136]	; (9208 <previewSample(unsigned int, unsigned int, bool, bool)+0x2d0>)
    9180:	fba2 2303 	umull	r2, r3, r2, r3
    9184:	099b      	lsrs	r3, r3, #6
      sampleLengthSet = true;
    9186:	4a21      	ldr	r2, [pc, #132]	; (920c <previewSample(unsigned int, unsigned int, bool, bool)+0x2d4>)
    9188:	2001      	movs	r0, #1
    918a:	7010      	strb	r0, [r2, #0]
      SMP.seekEnd = (SMP.smplen / (PrevSampleRate * 2) / 200);
    918c:	4a17      	ldr	r2, [pc, #92]	; (91ec <previewSample(unsigned int, unsigned int, bool, bool)+0x2b4>)
    918e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
      currentMode->pos[3] = SMP.seekEnd;
    9192:	638b      	str	r3, [r1, #56]	; 0x38
      if (isEncoder4Defined)
    9194:	4a1e      	ldr	r2, [pc, #120]	; (9210 <previewSample(unsigned int, unsigned int, bool, bool)+0x2d8>)
    9196:	7812      	ldrb	r2, [r2, #0]
    9198:	2a00      	cmp	r2, #0
    919a:	d04d      	beq.n	9238 <previewSample(unsigned int, unsigned int, bool, bool)+0x300>
		noInterrupts();
    919c:	b672      	cpsid	i
        encoders[3].write(SMP.seekEnd * 4);
    919e:	009b      	lsls	r3, r3, #2
		encoder.position = p;
    91a0:	4a1c      	ldr	r2, [pc, #112]	; (9214 <previewSample(unsigned int, unsigned int, bool, bool)+0x2dc>)
    91a2:	6693      	str	r3, [r2, #104]	; 0x68
		interrupts();
    91a4:	b662      	cpsie	i
		if (f) {
    91a6:	981a      	ldr	r0, [sp, #104]	; 0x68
    91a8:	2800      	cmp	r0, #0
    91aa:	d04c      	beq.n	9246 <previewSample(unsigned int, unsigned int, bool, bool)+0x30e>
    91ac:	e045      	b.n	923a <previewSample(unsigned int, unsigned int, bool, bool)+0x302>
	  _M_realloc_insert(end(), __x);
    91ae:	aa02      	add	r2, sp, #8
    91b0:	4819      	ldr	r0, [pc, #100]	; (9218 <previewSample(unsigned int, unsigned int, bool, bool)+0x2e0>)
    91b2:	f7fe f861 	bl	7278 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)>
    91b6:	e06d      	b.n	9294 <previewSample(unsigned int, unsigned int, bool, bool)+0x35c>
      if (g == 68)
    91b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      if (g == 34)
    91bc:	2b22      	cmp	r3, #34	; 0x22
    91be:	d1b0      	bne.n	9122 <previewSample(unsigned int, unsigned int, bool, bool)+0x1ea>
        PrevSampleRate = 2;
    91c0:	4b0c      	ldr	r3, [pc, #48]	; (91f4 <previewSample(unsigned int, unsigned int, bool, bool)+0x2bc>)
    91c2:	2202      	movs	r2, #2
    91c4:	601a      	str	r2, [r3, #0]
      if (g == 0)
    91c6:	e772      	b.n	90ae <previewSample(unsigned int, unsigned int, bool, bool)+0x176>
    91c8:	700001e0 	.word	0x700001e0
    91cc:	200073f4 	.word	0x200073f4
    91d0:	20000bd0 	.word	0x20000bd0
    91d4:	2000667c 	.word	0x2000667c
    91d8:	200027a0 	.word	0x200027a0
    91dc:	200027fc 	.word	0x200027fc
    91e0:	2000277c 	.word	0x2000277c
    91e4:	20002750 	.word	0x20002750
    91e8:	20002560 	.word	0x20002560
    91ec:	70000000 	.word	0x70000000
    91f0:	20004e74 	.word	0x20004e74
    91f4:	20004e1c 	.word	0x20004e1c
    91f8:	70001220 	.word	0x70001220
    91fc:	000493e0 	.word	0x000493e0
    9200:	20008c33 	.word	0x20008c33
    9204:	200057ec 	.word	0x200057ec
    9208:	51eb851f 	.word	0x51eb851f
    920c:	20008c34 	.word	0x20008c34
    9210:	20005c89 	.word	0x20005c89
    9214:	20007374 	.word	0x20007374
    9218:	70000314 	.word	0x70000314
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }
    921c:	4c23      	ldr	r4, [pc, #140]	; (92ac <previewSample(unsigned int, unsigned int, bool, bool)+0x374>)
    921e:	2300      	movs	r3, #0
    9220:	9301      	str	r3, [sp, #4]
    9222:	230a      	movs	r3, #10
    9224:	9300      	str	r3, [sp, #0]
    9226:	2200      	movs	r2, #0
    9228:	2300      	movs	r3, #0
    922a:	4620      	mov	r0, r4
    922c:	f00d f844 	bl	162b8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>
	size_t println(uint64_t n)			{ return print(n) + println(); }
    9230:	4620      	mov	r0, r4
    9232:	f00c ffc8 	bl	161c6 <Print::println()>
		return (f) ? f->isOpen() : false;
    9236:	e6fd      	b.n	9034 <previewSample(unsigned int, unsigned int, bool, bool)+0xfc>
		if (f) {
    9238:	981a      	ldr	r0, [sp, #104]	; 0x68
			f->close();
    923a:	6803      	ldr	r3, [r0, #0]
    923c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    923e:	4798      	blx	r3
			dec_refcount();
    9240:	a816      	add	r0, sp, #88	; 0x58
    9242:	f7f9 fb6b 	bl	291c <File::dec_refcount()>
    displaySample(SMP.smplen);
    9246:	4b1a      	ldr	r3, [pc, #104]	; (92b0 <previewSample(unsigned int, unsigned int, bool, bool)+0x378>)
    9248:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
    924c:	f7fa fec4 	bl	3fd8 <displaySample(unsigned int)>
        audiosample *newSample = new audiosample(noteNumber, data, sampleLength, numChannels);
    9250:	2014      	movs	r0, #20
    9252:	f00e f8e7 	bl	17424 <operator new(unsigned int)>
        _noteNumber(noteNumber), 
    9256:	2324      	movs	r3, #36	; 0x24
    9258:	7003      	strb	r3, [r0, #0]
        _data(data), 
    925a:	4b16      	ldr	r3, [pc, #88]	; (92b4 <previewSample(unsigned int, unsigned int, bool, bool)+0x37c>)
    925c:	6043      	str	r3, [r0, #4]
    _samplers[0].addSample(36, (int16_t *)sampled[0] + 2, (int)(plen / 2) - 120, 1);
    925e:	462b      	mov	r3, r5
    9260:	2d00      	cmp	r5, #0
    9262:	bfb8      	it	lt
    9264:	1c6b      	addlt	r3, r5, #1
    9266:	105b      	asrs	r3, r3, #1
    9268:	3b78      	subs	r3, #120	; 0x78
        _sampleLength(sampleLength), 
    926a:	6083      	str	r3, [r0, #8]
        _numChannels(numChannels) {
    926c:	2301      	movs	r3, #1
    926e:	8183      	strh	r3, [r0, #12]
    9270:	2300      	movs	r3, #0
    9272:	7383      	strb	r3, [r0, #14]
    9274:	73c3      	strb	r3, [r0, #15]
    9276:	9002      	str	r0, [sp, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    9278:	4b0f      	ldr	r3, [pc, #60]	; (92b8 <previewSample(unsigned int, unsigned int, bool, bool)+0x380>)
    927a:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
    927e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
    9282:	4299      	cmp	r1, r3
    9284:	d093      	beq.n	91ae <previewSample(unsigned int, unsigned int, bool, bool)+0x276>
    9286:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
    9288:	4a0b      	ldr	r2, [pc, #44]	; (92b8 <previewSample(unsigned int, unsigned int, bool, bool)+0x380>)
    928a:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
    928e:	3304      	adds	r3, #4
    9290:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
    _samplers[0].noteEvent(12 * PrevSampleRate, defaultVelocity, true, false);
    9294:	4b09      	ldr	r3, [pc, #36]	; (92bc <previewSample(unsigned int, unsigned int, bool, bool)+0x384>)
    9296:	6819      	ldr	r1, [r3, #0]
    9298:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    929c:	0089      	lsls	r1, r1, #2
            _polysampler.noteOn(noteNumber, velocity);
    929e:	223f      	movs	r2, #63	; 0x3f
    92a0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
    92a4:	4806      	ldr	r0, [pc, #24]	; (92c0 <previewSample(unsigned int, unsigned int, bool, bool)+0x388>)
    92a6:	f7f9 ff2b 	bl	3100 <polyphonicsampler::noteOn(unsigned char, unsigned char)>
    92aa:	e6c3      	b.n	9034 <previewSample(unsigned int, unsigned int, bool, bool)+0xfc>
    92ac:	20004e74 	.word	0x20004e74
    92b0:	70000000 	.word	0x70000000
    92b4:	70001224 	.word	0x70001224
    92b8:	700001e0 	.word	0x700001e0
    92bc:	20004e1c 	.word	0x20004e1c
    92c0:	700001f0 	.word	0x700001f0

000092c4 <showWave()>:
void showWave() {
    92c4:	b570      	push	{r4, r5, r6, lr}
    92c6:	b0fa      	sub	sp, #488	; 0x1e8
  File sampleFile;
    92c8:	4b8d      	ldr	r3, [pc, #564]	; (9500 <showWave()+0x23c>)
    92ca:	9310      	str	r3, [sp, #64]	; 0x40
    92cc:	2300      	movs	r3, #0
    92ce:	9311      	str	r3, [sp, #68]	; 0x44
    92d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    92d4:	9212      	str	r2, [sp, #72]	; 0x48
    92d6:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
    92da:	9314      	str	r3, [sp, #80]	; 0x50
  drawNoSD();
    92dc:	f7fb facc 	bl	4878 <drawNoSD()>
  FastLEDclear();
    92e0:	f7fa f9f0 	bl	36c4 <FastLEDclear()>
  if (SMP.wav[SMP.currentChannel][1] < 100)
    92e4:	4b87      	ldr	r3, [pc, #540]	; (9504 <showWave()+0x240>)
    92e6:	685a      	ldr	r2, [r3, #4]
    92e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    92ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    92ee:	2b63      	cmp	r3, #99	; 0x63
    92f0:	f240 8090 	bls.w	9414 <showWave()+0x150>
  showIcons("helper_select", col[SMP.y - 1]);
    92f4:	4984      	ldr	r1, [pc, #528]	; (9508 <showWave()+0x244>)
    92f6:	a818      	add	r0, sp, #96	; 0x60
    92f8:	f00d fa2d 	bl	16756 <String::String(char const*)>
    92fc:	4983      	ldr	r1, [pc, #524]	; (950c <showWave()+0x248>)
    92fe:	4d81      	ldr	r5, [pc, #516]	; (9504 <showWave()+0x240>)
    9300:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    9304:	3b01      	subs	r3, #1
    9306:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    930a:	18ca      	adds	r2, r1, r3
    930c:	5ccb      	ldrb	r3, [r1, r3]
    930e:	7851      	ldrb	r1, [r2, #1]
    9310:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9314:	7891      	ldrb	r1, [r2, #2]
    9316:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    931a:	a818      	add	r0, sp, #96	; 0x60
    931c:	f7fc fa88 	bl	5830 <showIcons(String, CRGB)>
    9320:	a818      	add	r0, sp, #96	; 0x60
    9322:	f00d f9cf 	bl	166c4 <String::~String()>
  showIcons("helper_load", CRGB(0, 20, 0));
    9326:	497a      	ldr	r1, [pc, #488]	; (9510 <showWave()+0x24c>)
    9328:	a81b      	add	r0, sp, #108	; 0x6c
    932a:	f00d fa14 	bl	16756 <String::String(char const*)>
    932e:	2400      	movs	r4, #0
    9330:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
    9334:	2314      	movs	r3, #20
    9336:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
    933a:	f88d 407a 	strb.w	r4, [sp, #122]	; 0x7a
    933e:	991e      	ldr	r1, [sp, #120]	; 0x78
    9340:	a81b      	add	r0, sp, #108	; 0x6c
    9342:	f7fc fa75 	bl	5830 <showIcons(String, CRGB)>
    9346:	a81b      	add	r0, sp, #108	; 0x6c
    9348:	f00d f9bc 	bl	166c4 <String::~String()>
  showIcons("helper_seek", CRGB(10, 0, 0));
    934c:	4971      	ldr	r1, [pc, #452]	; (9514 <showWave()+0x250>)
    934e:	a81f      	add	r0, sp, #124	; 0x7c
    9350:	f00d fa01 	bl	16756 <String::String(char const*)>
    9354:	260a      	movs	r6, #10
    9356:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
    935a:	f88d 4089 	strb.w	r4, [sp, #137]	; 0x89
    935e:	f88d 408a 	strb.w	r4, [sp, #138]	; 0x8a
    9362:	9922      	ldr	r1, [sp, #136]	; 0x88
    9364:	a81f      	add	r0, sp, #124	; 0x7c
    9366:	f7fc fa63 	bl	5830 <showIcons(String, CRGB)>
    936a:	a81f      	add	r0, sp, #124	; 0x7c
    936c:	f00d f9aa 	bl	166c4 <String::~String()>
  showIcons("helper_folder", CRGB(10, 10, 0));
    9370:	4969      	ldr	r1, [pc, #420]	; (9518 <showWave()+0x254>)
    9372:	a823      	add	r0, sp, #140	; 0x8c
    9374:	f00d f9ef 	bl	16756 <String::String(char const*)>
    9378:	f88d 6098 	strb.w	r6, [sp, #152]	; 0x98
    937c:	f88d 6099 	strb.w	r6, [sp, #153]	; 0x99
    9380:	f88d 409a 	strb.w	r4, [sp, #154]	; 0x9a
    9384:	9926      	ldr	r1, [sp, #152]	; 0x98
    9386:	a823      	add	r0, sp, #140	; 0x8c
    9388:	f7fc fa52 	bl	5830 <showIcons(String, CRGB)>
    938c:	a823      	add	r0, sp, #140	; 0x8c
    938e:	f00d f999 	bl	166c4 <String::~String()>
  showNumber(SMP.wav[SMP.currentChannel][1], col_Folder[getFolderNumber(SMP.wav[SMP.currentChannel][1])], 0);
    9392:	686b      	ldr	r3, [r5, #4]
    9394:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    9398:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    939a:	4630      	mov	r0, r6
    939c:	f7fb f8e0 	bl	4560 <getFolderNumber(int)>
    93a0:	4b5e      	ldr	r3, [pc, #376]	; (951c <showWave()+0x258>)
    93a2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    93a6:	181a      	adds	r2, r3, r0
    93a8:	5c1b      	ldrb	r3, [r3, r0]
    93aa:	7851      	ldrb	r1, [r2, #1]
    93ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    93b0:	7891      	ldrb	r1, [r2, #2]
    93b2:	4622      	mov	r2, r4
    93b4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    93b8:	4630      	mov	r0, r6
    93ba:	f7fb f8f5 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
  displaySample(SMP.smplen);
    93be:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    93c2:	f7fa fe09 	bl	3fd8 <displaySample(unsigned int)>
  if (currentMode->pos[1] != SMP.folder) {
    93c6:	4b56      	ldr	r3, [pc, #344]	; (9520 <showWave()+0x25c>)
    93c8:	681b      	ldr	r3, [r3, #0]
    93ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    93cc:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
    93d0:	4293      	cmp	r3, r2
    93d2:	d139      	bne.n	9448 <showWave()+0x184>
  if (isEncoder4Defined) {
    93d4:	4b53      	ldr	r3, [pc, #332]	; (9524 <showWave()+0x260>)
    93d6:	781b      	ldrb	r3, [r3, #0]
    93d8:	2b00      	cmp	r3, #0
    93da:	f000 81bc 	beq.w	9756 <showWave()+0x492>
    if ((currentMode->pos[3]) != SMP.seekEnd && sampleIsLoaded) {
    93de:	4b50      	ldr	r3, [pc, #320]	; (9520 <showWave()+0x25c>)
    93e0:	681b      	ldr	r3, [r3, #0]
    93e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    93e4:	4a47      	ldr	r2, [pc, #284]	; (9504 <showWave()+0x240>)
    93e6:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
    93ea:	4293      	cmp	r3, r2
    93ec:	f000 81b3 	beq.w	9756 <showWave()+0x492>
    93f0:	4a4d      	ldr	r2, [pc, #308]	; (9528 <showWave()+0x264>)
    93f2:	7812      	ldrb	r2, [r2, #0]
    93f4:	2a00      	cmp	r2, #0
    93f6:	f000 81ba 	beq.w	976e <showWave()+0x4aa>
      SMP.seekEnd = currentMode->pos[3];
    93fa:	4a42      	ldr	r2, [pc, #264]	; (9504 <showWave()+0x240>)
    93fc:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    9400:	4b4a      	ldr	r3, [pc, #296]	; (952c <showWave()+0x268>)
    9402:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
    9406:	f8d3 5138 	ldr.w	r5, [r3, #312]	; 0x138
        for (auto && sample : _audiosamples) {
    940a:	42ac      	cmp	r4, r5
    940c:	f000 80a4 	beq.w	9558 <showWave()+0x294>
            delete sample;
    9410:	2614      	movs	r6, #20
    9412:	e070      	b.n	94f6 <showWave()+0x232>
    showIcons("icon_sample", col[SMP.y - 1]);
    9414:	4946      	ldr	r1, [pc, #280]	; (9530 <showWave()+0x26c>)
    9416:	a815      	add	r0, sp, #84	; 0x54
    9418:	f00d f99d 	bl	16756 <String::String(char const*)>
    941c:	493b      	ldr	r1, [pc, #236]	; (950c <showWave()+0x248>)
    941e:	4b39      	ldr	r3, [pc, #228]	; (9504 <showWave()+0x240>)
    9420:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    9424:	3b01      	subs	r3, #1
    9426:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    942a:	18ca      	adds	r2, r1, r3
    942c:	5ccb      	ldrb	r3, [r1, r3]
    942e:	7851      	ldrb	r1, [r2, #1]
    9430:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9434:	7891      	ldrb	r1, [r2, #2]
    9436:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    943a:	a815      	add	r0, sp, #84	; 0x54
    943c:	f7fc f9f8 	bl	5830 <showIcons(String, CRGB)>
    9440:	a815      	add	r0, sp, #84	; 0x54
    9442:	f00d f93f 	bl	166c4 <String::~String()>
    9446:	e755      	b.n	92f4 <showWave()+0x30>
    SMP.folder = currentMode->pos[1];
    9448:	462c      	mov	r4, r5
    944a:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
	StringSumHelper(const char *p) : String(p) {}
    944e:	4939      	ldr	r1, [pc, #228]	; (9534 <showWave()+0x270>)
    9450:	a827      	add	r0, sp, #156	; 0x9c
    9452:	f00d f980 	bl	16756 <String::String(char const*)>
    Serial.println("Folder: " + String(SMP.folder - 1));
    9456:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
    945a:	220a      	movs	r2, #10
    945c:	3901      	subs	r1, #1
    945e:	a82a      	add	r0, sp, #168	; 0xa8
    9460:	f00d f9c2 	bl	167e8 <String::String(unsigned int, unsigned char)>
    9464:	a92a      	add	r1, sp, #168	; 0xa8
    9466:	a827      	add	r0, sp, #156	; 0x9c
    9468:	f00d fa1b 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    946c:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    946e:	4d32      	ldr	r5, [pc, #200]	; (9538 <showWave()+0x274>)
    9470:	4628      	mov	r0, r5
    9472:	f00c fe83 	bl	1617c <Print::print(String const&)>
    9476:	4628      	mov	r0, r5
    9478:	f00c fea5 	bl	161c6 <Print::println()>
    947c:	a82a      	add	r0, sp, #168	; 0xa8
    947e:	f00d f921 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    9482:	a827      	add	r0, sp, #156	; 0x9c
    9484:	f00d f91e 	bl	166c4 <String::~String()>
    SMP.wav[SMP.currentChannel][1] = ((SMP.folder - 1) * 100);
    9488:	6863      	ldr	r3, [r4, #4]
    948a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    948e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    9492:	2164      	movs	r1, #100	; 0x64
    9494:	fb01 f303 	mul.w	r3, r1, r3
    9498:	3b64      	subs	r3, #100	; 0x64
    949a:	6293      	str	r3, [r2, #40]	; 0x28
	StringSumHelper(const char *p) : String(p) {}
    949c:	4927      	ldr	r1, [pc, #156]	; (953c <showWave()+0x278>)
    949e:	a82d      	add	r0, sp, #180	; 0xb4
    94a0:	f00d f959 	bl	16756 <String::String(char const*)>
    Serial.println("wav: " + String(SMP.wav[SMP.currentChannel][1]));
    94a4:	6863      	ldr	r3, [r4, #4]
    94a6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    94aa:	220a      	movs	r2, #10
    94ac:	6a99      	ldr	r1, [r3, #40]	; 0x28
    94ae:	a830      	add	r0, sp, #192	; 0xc0
    94b0:	f00d f99a 	bl	167e8 <String::String(unsigned int, unsigned char)>
    94b4:	a930      	add	r1, sp, #192	; 0xc0
    94b6:	a82d      	add	r0, sp, #180	; 0xb4
    94b8:	f00d f9f3 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    94bc:	4601      	mov	r1, r0
    94be:	4628      	mov	r0, r5
    94c0:	f00c fe5c 	bl	1617c <Print::print(String const&)>
    94c4:	4628      	mov	r0, r5
    94c6:	f00c fe7e 	bl	161c6 <Print::println()>
    94ca:	a830      	add	r0, sp, #192	; 0xc0
    94cc:	f00d f8fa 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    94d0:	a82d      	add	r0, sp, #180	; 0xb4
    94d2:	f00d f8f7 	bl	166c4 <String::~String()>
    encoders[1].write((SMP.wav[SMP.currentChannel][1] * 4) - 1);
    94d6:	6863      	ldr	r3, [r4, #4]
    94d8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    94dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    94de:	009b      	lsls	r3, r3, #2
    94e0:	3b01      	subs	r3, #1
		noInterrupts();
    94e2:	b672      	cpsid	i
		encoder.position = p;
    94e4:	4a16      	ldr	r2, [pc, #88]	; (9540 <showWave()+0x27c>)
    94e6:	6313      	str	r3, [r2, #48]	; 0x30
		interrupts();
    94e8:	b662      	cpsie	i
	}
    94ea:	e773      	b.n	93d4 <showWave()+0x110>
    94ec:	4631      	mov	r1, r6
    94ee:	f00d ffa9 	bl	17444 <operator delete(void*, unsigned int)>
        for (auto && sample : _audiosamples) {
    94f2:	42a5      	cmp	r5, r4
    94f4:	d026      	beq.n	9544 <showWave()+0x280>
            delete sample;
    94f6:	f854 0b04 	ldr.w	r0, [r4], #4
    94fa:	2800      	cmp	r0, #0
    94fc:	d1f6      	bne.n	94ec <showWave()+0x228>
    94fe:	e7f8      	b.n	94f2 <showWave()+0x22e>
    9500:	20002750 	.word	0x20002750
    9504:	70000000 	.word	0x70000000
    9508:	20000e2c 	.word	0x20000e2c
    950c:	200012d4 	.word	0x200012d4
    9510:	20000df8 	.word	0x20000df8
    9514:	20000e04 	.word	0x20000e04
    9518:	20000e10 	.word	0x20000e10
    951c:	20000e68 	.word	0x20000e68
    9520:	200057ec 	.word	0x200057ec
    9524:	20005c89 	.word	0x20005c89
    9528:	20008c33 	.word	0x20008c33
    952c:	700001e0 	.word	0x700001e0
    9530:	20000ddc 	.word	0x20000ddc
    9534:	20000cc0 	.word	0x20000cc0
    9538:	20004e74 	.word	0x20004e74
    953c:	20000b28 	.word	0x20000b28
    9540:	20007374 	.word	0x20007374
      { _M_erase_at_end(this->_M_impl._M_start); }
    9544:	4b9f      	ldr	r3, [pc, #636]	; (97c4 <showWave()+0x500>)
    9546:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	if (size_type __n = this->_M_impl._M_finish - __pos)
    954a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    954e:	429a      	cmp	r2, r3
    9550:	d002      	beq.n	9558 <showWave()+0x294>
	    this->_M_impl._M_finish = __pos;
    9552:	4b9c      	ldr	r3, [pc, #624]	; (97c4 <showWave()+0x500>)
    9554:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
      envelope0.noteOff();
    9558:	489b      	ldr	r0, [pc, #620]	; (97c8 <showWave()+0x504>)
    955a:	f003 fc29 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
		return (f) ? f->isOpen() : false;
    955e:	9814      	ldr	r0, [sp, #80]	; 0x50
    9560:	b128      	cbz	r0, 956e <showWave()+0x2aa>
    9562:	6803      	ldr	r3, [r0, #0]
    9564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9566:	4798      	blx	r3
      if (sampleFile) {
    9568:	2800      	cmp	r0, #0
    956a:	f040 8096 	bne.w	969a <showWave()+0x3d6>
      sprintf(OUTPUTf, "samples/%d/_%d.wav", getFolderNumber(SMP.wav[SMP.currentChannel][1]), getFileNumber(SMP.wav[SMP.currentChannel][1]));
    956e:	4b97      	ldr	r3, [pc, #604]	; (97cc <showWave()+0x508>)
    9570:	685a      	ldr	r2, [r3, #4]
    9572:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9576:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    9578:	4628      	mov	r0, r5
    957a:	f7fa fff1 	bl	4560 <getFolderNumber(int)>
    957e:	4604      	mov	r4, r0
    9580:	4628      	mov	r0, r5
    9582:	f7fa fffb 	bl	457c <getFileNumber(int)>
    9586:	4603      	mov	r3, r0
    9588:	4622      	mov	r2, r4
    958a:	4991      	ldr	r1, [pc, #580]	; (97d0 <showWave()+0x50c>)
    958c:	a803      	add	r0, sp, #12
    958e:	f019 f8b7 	bl	22700 <sprintf>
	bool exists(const char *filepath) {
		return sdfs.exists(filepath);
    9592:	a903      	add	r1, sp, #12
    9594:	488f      	ldr	r0, [pc, #572]	; (97d4 <showWave()+0x510>)
    9596:	f7f9 f991 	bl	28bc <FsVolume::exists(char const*)>
      if (SD.exists(OUTPUTf)) {
    959a:	2800      	cmp	r0, #0
    959c:	f000 8085 	beq.w	96aa <showWave()+0x3e6>
        showIcons("helper_select", col[SMP.y - 1]);
    95a0:	498d      	ldr	r1, [pc, #564]	; (97d8 <showWave()+0x514>)
    95a2:	a833      	add	r0, sp, #204	; 0xcc
    95a4:	f00d f8d7 	bl	16756 <String::String(char const*)>
    95a8:	498c      	ldr	r1, [pc, #560]	; (97dc <showWave()+0x518>)
    95aa:	4d88      	ldr	r5, [pc, #544]	; (97cc <showWave()+0x508>)
    95ac:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    95b0:	3b01      	subs	r3, #1
    95b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    95b6:	18ca      	adds	r2, r1, r3
    95b8:	5ccb      	ldrb	r3, [r1, r3]
    95ba:	7851      	ldrb	r1, [r2, #1]
    95bc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    95c0:	7891      	ldrb	r1, [r2, #2]
    95c2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    95c6:	a833      	add	r0, sp, #204	; 0xcc
    95c8:	f7fc f932 	bl	5830 <showIcons(String, CRGB)>
    95cc:	a833      	add	r0, sp, #204	; 0xcc
    95ce:	f00d f879 	bl	166c4 <String::~String()>
        showIcons("helper_load", CRGB(0, 20, 0));
    95d2:	4983      	ldr	r1, [pc, #524]	; (97e0 <showWave()+0x51c>)
    95d4:	a836      	add	r0, sp, #216	; 0xd8
    95d6:	f00d f8be 	bl	16756 <String::String(char const*)>
    95da:	2400      	movs	r4, #0
    95dc:	f88d 40e4 	strb.w	r4, [sp, #228]	; 0xe4
    95e0:	2314      	movs	r3, #20
    95e2:	f88d 30e5 	strb.w	r3, [sp, #229]	; 0xe5
    95e6:	f88d 40e6 	strb.w	r4, [sp, #230]	; 0xe6
    95ea:	9939      	ldr	r1, [sp, #228]	; 0xe4
    95ec:	a836      	add	r0, sp, #216	; 0xd8
    95ee:	f7fc f91f 	bl	5830 <showIcons(String, CRGB)>
    95f2:	a836      	add	r0, sp, #216	; 0xd8
    95f4:	f00d f866 	bl	166c4 <String::~String()>
        showIcons("helper_seek", CRGB(10, 0, 0));
    95f8:	497a      	ldr	r1, [pc, #488]	; (97e4 <showWave()+0x520>)
    95fa:	a83a      	add	r0, sp, #232	; 0xe8
    95fc:	f00d f8ab 	bl	16756 <String::String(char const*)>
    9600:	260a      	movs	r6, #10
    9602:	f88d 60f4 	strb.w	r6, [sp, #244]	; 0xf4
    9606:	f88d 40f5 	strb.w	r4, [sp, #245]	; 0xf5
    960a:	f88d 40f6 	strb.w	r4, [sp, #246]	; 0xf6
    960e:	993d      	ldr	r1, [sp, #244]	; 0xf4
    9610:	a83a      	add	r0, sp, #232	; 0xe8
    9612:	f7fc f90d 	bl	5830 <showIcons(String, CRGB)>
    9616:	a83a      	add	r0, sp, #232	; 0xe8
    9618:	f00d f854 	bl	166c4 <String::~String()>
        showIcons("helper_folder", CRGB(10, 30, 0));
    961c:	4972      	ldr	r1, [pc, #456]	; (97e8 <showWave()+0x524>)
    961e:	a83e      	add	r0, sp, #248	; 0xf8
    9620:	f00d f899 	bl	16756 <String::String(char const*)>
    9624:	f88d 6104 	strb.w	r6, [sp, #260]	; 0x104
    9628:	231e      	movs	r3, #30
    962a:	f88d 3105 	strb.w	r3, [sp, #261]	; 0x105
    962e:	f88d 4106 	strb.w	r4, [sp, #262]	; 0x106
    9632:	9941      	ldr	r1, [sp, #260]	; 0x104
    9634:	a83e      	add	r0, sp, #248	; 0xf8
    9636:	f7fc f8fb 	bl	5830 <showIcons(String, CRGB)>
    963a:	a83e      	add	r0, sp, #248	; 0xf8
    963c:	f00d f842 	bl	166c4 <String::~String()>
        showNumber(SMP.wav[SMP.currentChannel][1], col_Folder[getFolderNumber(SMP.wav[SMP.currentChannel][1])], 0);
    9640:	686b      	ldr	r3, [r5, #4]
    9642:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    9646:	6aad      	ldr	r5, [r5, #40]	; 0x28
    9648:	4628      	mov	r0, r5
    964a:	f7fa ff89 	bl	4560 <getFolderNumber(int)>
    964e:	4b67      	ldr	r3, [pc, #412]	; (97ec <showWave()+0x528>)
    9650:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9654:	181a      	adds	r2, r3, r0
    9656:	5c1b      	ldrb	r3, [r3, r0]
    9658:	7851      	ldrb	r1, [r2, #1]
    965a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    965e:	7891      	ldrb	r1, [r2, #2]
    9660:	4622      	mov	r2, r4
    9662:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    9666:	4628      	mov	r0, r5
    9668:	f7fa ff9e 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
        if (!sampleLengthSet) previewSample(getFolderNumber(SMP.wav[SMP.currentChannel][1]), getFileNumber(SMP.wav[SMP.currentChannel][1]), false, false);
    966c:	4b60      	ldr	r3, [pc, #384]	; (97f0 <showWave()+0x52c>)
    966e:	781b      	ldrb	r3, [r3, #0]
    9670:	2b00      	cmp	r3, #0
    9672:	d16d      	bne.n	9750 <showWave()+0x48c>
    9674:	4b55      	ldr	r3, [pc, #340]	; (97cc <showWave()+0x508>)
    9676:	685a      	ldr	r2, [r3, #4]
    9678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    967c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    967e:	4628      	mov	r0, r5
    9680:	f7fa ff6e 	bl	4560 <getFolderNumber(int)>
    9684:	4604      	mov	r4, r0
    9686:	4628      	mov	r0, r5
    9688:	f7fa ff78 	bl	457c <getFileNumber(int)>
    968c:	4601      	mov	r1, r0
    968e:	2300      	movs	r3, #0
    9690:	461a      	mov	r2, r3
    9692:	4620      	mov	r0, r4
    9694:	f7ff fc50 	bl	8f38 <previewSample(unsigned int, unsigned int, bool, bool)>
    9698:	e05a      	b.n	9750 <showWave()+0x48c>
		return seek(pos, SeekSet);
    969a:	2300      	movs	r3, #0
    969c:	9300      	str	r3, [sp, #0]
    969e:	2200      	movs	r2, #0
    96a0:	2300      	movs	r3, #0
    96a2:	a810      	add	r0, sp, #64	; 0x40
    96a4:	f7f9 f92d 	bl	2902 <File::seek(unsigned long long, int)>
    96a8:	e761      	b.n	956e <showWave()+0x2aa>
        showIcons("helper_select", col[SMP.y - 1]);
    96aa:	494b      	ldr	r1, [pc, #300]	; (97d8 <showWave()+0x514>)
    96ac:	a842      	add	r0, sp, #264	; 0x108
    96ae:	f00d f852 	bl	16756 <String::String(char const*)>
    96b2:	494a      	ldr	r1, [pc, #296]	; (97dc <showWave()+0x518>)
    96b4:	4d45      	ldr	r5, [pc, #276]	; (97cc <showWave()+0x508>)
    96b6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    96ba:	3b01      	subs	r3, #1
    96bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    96c0:	18ca      	adds	r2, r1, r3
    96c2:	5ccb      	ldrb	r3, [r1, r3]
    96c4:	7851      	ldrb	r1, [r2, #1]
    96c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    96ca:	7891      	ldrb	r1, [r2, #2]
    96cc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    96d0:	a842      	add	r0, sp, #264	; 0x108
    96d2:	f7fc f8ad 	bl	5830 <showIcons(String, CRGB)>
    96d6:	a842      	add	r0, sp, #264	; 0x108
    96d8:	f00c fff4 	bl	166c4 <String::~String()>
        showIcons("helper_load", CRGB(0, 0, 0));
    96dc:	4940      	ldr	r1, [pc, #256]	; (97e0 <showWave()+0x51c>)
    96de:	a845      	add	r0, sp, #276	; 0x114
    96e0:	f00d f839 	bl	16756 <String::String(char const*)>
    96e4:	2400      	movs	r4, #0
    96e6:	f88d 4120 	strb.w	r4, [sp, #288]	; 0x120
    96ea:	f88d 4121 	strb.w	r4, [sp, #289]	; 0x121
    96ee:	f88d 4122 	strb.w	r4, [sp, #290]	; 0x122
    96f2:	9948      	ldr	r1, [sp, #288]	; 0x120
    96f4:	a845      	add	r0, sp, #276	; 0x114
    96f6:	f7fc f89b 	bl	5830 <showIcons(String, CRGB)>
    96fa:	a845      	add	r0, sp, #276	; 0x114
    96fc:	f00c ffe2 	bl	166c4 <String::~String()>
        showIcons("helper_folder", CRGB(10, 10, 0));
    9700:	4939      	ldr	r1, [pc, #228]	; (97e8 <showWave()+0x524>)
    9702:	a849      	add	r0, sp, #292	; 0x124
    9704:	f00d f827 	bl	16756 <String::String(char const*)>
    9708:	230a      	movs	r3, #10
    970a:	f88d 3130 	strb.w	r3, [sp, #304]	; 0x130
    970e:	f88d 3131 	strb.w	r3, [sp, #305]	; 0x131
    9712:	f88d 4132 	strb.w	r4, [sp, #306]	; 0x132
    9716:	994c      	ldr	r1, [sp, #304]	; 0x130
    9718:	a849      	add	r0, sp, #292	; 0x124
    971a:	f7fc f889 	bl	5830 <showIcons(String, CRGB)>
    971e:	a849      	add	r0, sp, #292	; 0x124
    9720:	f00c ffd0 	bl	166c4 <String::~String()>
        showNumber(SMP.wav[SMP.currentChannel][1], col_Folder[getFolderNumber(SMP.wav[SMP.currentChannel][1])], 0);
    9724:	686b      	ldr	r3, [r5, #4]
    9726:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    972a:	6aad      	ldr	r5, [r5, #40]	; 0x28
    972c:	4628      	mov	r0, r5
    972e:	f7fa ff17 	bl	4560 <getFolderNumber(int)>
    9732:	4b2e      	ldr	r3, [pc, #184]	; (97ec <showWave()+0x528>)
    9734:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9738:	181a      	adds	r2, r3, r0
    973a:	5c1b      	ldrb	r3, [r3, r0]
    973c:	7851      	ldrb	r1, [r2, #1]
    973e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9742:	7891      	ldrb	r1, [r2, #2]
    9744:	4622      	mov	r2, r4
    9746:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    974a:	4628      	mov	r0, r5
    974c:	f7fa ff2c 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
      sampleLengthSet = false;
    9750:	4b27      	ldr	r3, [pc, #156]	; (97f0 <showWave()+0x52c>)
    9752:	2200      	movs	r2, #0
    9754:	701a      	strb	r2, [r3, #0]
  if ((currentMode->pos[0]) - 1 != SMP.seek && sampleIsLoaded) {
    9756:	4b27      	ldr	r3, [pc, #156]	; (97f4 <showWave()+0x530>)
    9758:	681b      	ldr	r3, [r3, #0]
    975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    975c:	3b01      	subs	r3, #1
    975e:	4a1b      	ldr	r2, [pc, #108]	; (97cc <showWave()+0x508>)
    9760:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
    9764:	4293      	cmp	r3, r2
    9766:	d002      	beq.n	976e <showWave()+0x4aa>
    9768:	4a23      	ldr	r2, [pc, #140]	; (97f8 <showWave()+0x534>)
    976a:	7812      	ldrb	r2, [r2, #0]
    976c:	b99a      	cbnz	r2, 9796 <showWave()+0x4d2>
  if (currentMode->pos[2] != SMP.wav[SMP.currentChannel][1]) {
    976e:	4b21      	ldr	r3, [pc, #132]	; (97f4 <showWave()+0x530>)
    9770:	681b      	ldr	r3, [r3, #0]
    9772:	6b59      	ldr	r1, [r3, #52]	; 0x34
    9774:	4b15      	ldr	r3, [pc, #84]	; (97cc <showWave()+0x508>)
    9776:	685a      	ldr	r2, [r3, #4]
    9778:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    977c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    977e:	4299      	cmp	r1, r3
    9780:	f040 812d 	bne.w	99de <showWave()+0x71a>
	virtual ~File() {
    9784:	4b1d      	ldr	r3, [pc, #116]	; (97fc <showWave()+0x538>)
    9786:	9310      	str	r3, [sp, #64]	; 0x40
		if (f) dec_refcount();
    9788:	9b14      	ldr	r3, [sp, #80]	; 0x50
    978a:	b113      	cbz	r3, 9792 <showWave()+0x4ce>
    978c:	a810      	add	r0, sp, #64	; 0x40
    978e:	f7f9 f8c5 	bl	291c <File::dec_refcount()>
}
    9792:	b07a      	add	sp, #488	; 0x1e8
    9794:	bd70      	pop	{r4, r5, r6, pc}
    SMP.seek = currentMode->pos[0] - 1;
    9796:	4a0d      	ldr	r2, [pc, #52]	; (97cc <showWave()+0x508>)
    9798:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    979c:	4b09      	ldr	r3, [pc, #36]	; (97c4 <showWave()+0x500>)
    979e:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
    97a2:	f8d3 5138 	ldr.w	r5, [r3, #312]	; 0x138
        for (auto && sample : _audiosamples) {
    97a6:	42ac      	cmp	r4, r5
    97a8:	d034      	beq.n	9814 <showWave()+0x550>
            delete sample;
    97aa:	2614      	movs	r6, #20
    97ac:	e004      	b.n	97b8 <showWave()+0x4f4>
    97ae:	4631      	mov	r1, r6
    97b0:	f00d fe48 	bl	17444 <operator delete(void*, unsigned int)>
        for (auto && sample : _audiosamples) {
    97b4:	42a5      	cmp	r5, r4
    97b6:	d023      	beq.n	9800 <showWave()+0x53c>
            delete sample;
    97b8:	f854 0b04 	ldr.w	r0, [r4], #4
    97bc:	2800      	cmp	r0, #0
    97be:	d1f6      	bne.n	97ae <showWave()+0x4ea>
    97c0:	e7f8      	b.n	97b4 <showWave()+0x4f0>
    97c2:	bf00      	nop
    97c4:	700001e0 	.word	0x700001e0
    97c8:	200073f4 	.word	0x200073f4
    97cc:	70000000 	.word	0x70000000
    97d0:	20000bd0 	.word	0x20000bd0
    97d4:	2000667c 	.word	0x2000667c
    97d8:	20000e2c 	.word	0x20000e2c
    97dc:	200012d4 	.word	0x200012d4
    97e0:	20000df8 	.word	0x20000df8
    97e4:	20000e04 	.word	0x20000e04
    97e8:	20000e10 	.word	0x20000e10
    97ec:	20000e68 	.word	0x20000e68
    97f0:	20008c34 	.word	0x20008c34
    97f4:	200057ec 	.word	0x200057ec
    97f8:	20008c33 	.word	0x20008c33
    97fc:	20002750 	.word	0x20002750
      { _M_erase_at_end(this->_M_impl._M_start); }
    9800:	4ba5      	ldr	r3, [pc, #660]	; (9a98 <showWave()+0x7d4>)
    9802:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	if (size_type __n = this->_M_impl._M_finish - __pos)
    9806:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    980a:	429a      	cmp	r2, r3
    980c:	d002      	beq.n	9814 <showWave()+0x550>
	    this->_M_impl._M_finish = __pos;
    980e:	4ba2      	ldr	r3, [pc, #648]	; (9a98 <showWave()+0x7d4>)
    9810:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    envelope0.noteOff();
    9814:	48a1      	ldr	r0, [pc, #644]	; (9a9c <showWave()+0x7d8>)
    9816:	f003 facb 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
		return (f) ? f->isOpen() : false;
    981a:	9814      	ldr	r0, [sp, #80]	; 0x50
    981c:	b120      	cbz	r0, 9828 <showWave()+0x564>
    981e:	6803      	ldr	r3, [r0, #0]
    9820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9822:	4798      	blx	r3
    if (sampleFile) {
    9824:	2800      	cmp	r0, #0
    9826:	d17e      	bne.n	9926 <showWave()+0x662>
    sprintf(OUTPUTf, "samples/%d/_%d.wav", getFolderNumber(SMP.wav[SMP.currentChannel][1]), getFileNumber(SMP.wav[SMP.currentChannel][1]));
    9828:	4b9d      	ldr	r3, [pc, #628]	; (9aa0 <showWave()+0x7dc>)
    982a:	685a      	ldr	r2, [r3, #4]
    982c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9830:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    9832:	4628      	mov	r0, r5
    9834:	f7fa fe94 	bl	4560 <getFolderNumber(int)>
    9838:	4604      	mov	r4, r0
    983a:	4628      	mov	r0, r5
    983c:	f7fa fe9e 	bl	457c <getFileNumber(int)>
    9840:	4603      	mov	r3, r0
    9842:	4622      	mov	r2, r4
    9844:	4997      	ldr	r1, [pc, #604]	; (9aa4 <showWave()+0x7e0>)
    9846:	a803      	add	r0, sp, #12
    9848:	f018 ff5a 	bl	22700 <sprintf>
    984c:	a903      	add	r1, sp, #12
    984e:	4896      	ldr	r0, [pc, #600]	; (9aa8 <showWave()+0x7e4>)
    9850:	f7f9 f834 	bl	28bc <FsVolume::exists(char const*)>
    if (SD.exists(OUTPUTf)) {
    9854:	2800      	cmp	r0, #0
    9856:	d06e      	beq.n	9936 <showWave()+0x672>
      showIcons("helper_select", col[SMP.y - 1]);
    9858:	4994      	ldr	r1, [pc, #592]	; (9aac <showWave()+0x7e8>)
    985a:	a84d      	add	r0, sp, #308	; 0x134
    985c:	f00c ff7b 	bl	16756 <String::String(char const*)>
    9860:	4993      	ldr	r1, [pc, #588]	; (9ab0 <showWave()+0x7ec>)
    9862:	4c8f      	ldr	r4, [pc, #572]	; (9aa0 <showWave()+0x7dc>)
    9864:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    9868:	3b01      	subs	r3, #1
    986a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    986e:	18ca      	adds	r2, r1, r3
    9870:	5ccb      	ldrb	r3, [r1, r3]
    9872:	7851      	ldrb	r1, [r2, #1]
    9874:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9878:	7891      	ldrb	r1, [r2, #2]
    987a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    987e:	a84d      	add	r0, sp, #308	; 0x134
    9880:	f7fb ffd6 	bl	5830 <showIcons(String, CRGB)>
    9884:	a84d      	add	r0, sp, #308	; 0x134
    9886:	f00c ff1d 	bl	166c4 <String::~String()>
      showIcons("helper_load", CRGB(0, 20, 0));
    988a:	498a      	ldr	r1, [pc, #552]	; (9ab4 <showWave()+0x7f0>)
    988c:	a850      	add	r0, sp, #320	; 0x140
    988e:	f00c ff62 	bl	16756 <String::String(char const*)>
    9892:	2500      	movs	r5, #0
    9894:	f88d 514c 	strb.w	r5, [sp, #332]	; 0x14c
    9898:	2314      	movs	r3, #20
    989a:	f88d 314d 	strb.w	r3, [sp, #333]	; 0x14d
    989e:	f88d 514e 	strb.w	r5, [sp, #334]	; 0x14e
    98a2:	9953      	ldr	r1, [sp, #332]	; 0x14c
    98a4:	a850      	add	r0, sp, #320	; 0x140
    98a6:	f7fb ffc3 	bl	5830 <showIcons(String, CRGB)>
    98aa:	a850      	add	r0, sp, #320	; 0x140
    98ac:	f00c ff0a 	bl	166c4 <String::~String()>
      showIcons("helper_folder", CRGB(10, 30, 0));
    98b0:	4981      	ldr	r1, [pc, #516]	; (9ab8 <showWave()+0x7f4>)
    98b2:	a854      	add	r0, sp, #336	; 0x150
    98b4:	f00c ff4f 	bl	16756 <String::String(char const*)>
    98b8:	230a      	movs	r3, #10
    98ba:	f88d 315c 	strb.w	r3, [sp, #348]	; 0x15c
    98be:	231e      	movs	r3, #30
    98c0:	f88d 315d 	strb.w	r3, [sp, #349]	; 0x15d
    98c4:	f88d 515e 	strb.w	r5, [sp, #350]	; 0x15e
    98c8:	9957      	ldr	r1, [sp, #348]	; 0x15c
    98ca:	a854      	add	r0, sp, #336	; 0x150
    98cc:	f7fb ffb0 	bl	5830 <showIcons(String, CRGB)>
    98d0:	a854      	add	r0, sp, #336	; 0x150
    98d2:	f00c fef7 	bl	166c4 <String::~String()>
      showNumber(SMP.wav[SMP.currentChannel][1], col_Folder[getFolderNumber(SMP.wav[SMP.currentChannel][1])], 0);
    98d6:	6863      	ldr	r3, [r4, #4]
    98d8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    98dc:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    98de:	4630      	mov	r0, r6
    98e0:	f7fa fe3e 	bl	4560 <getFolderNumber(int)>
    98e4:	4b75      	ldr	r3, [pc, #468]	; (9abc <showWave()+0x7f8>)
    98e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    98ea:	181a      	adds	r2, r3, r0
    98ec:	5c1b      	ldrb	r3, [r3, r0]
    98ee:	7851      	ldrb	r1, [r2, #1]
    98f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    98f4:	7891      	ldrb	r1, [r2, #2]
    98f6:	462a      	mov	r2, r5
    98f8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    98fc:	4630      	mov	r0, r6
    98fe:	f7fa fe53 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
      previewSample(getFolderNumber(SMP.wav[SMP.currentChannel][1]), getFileNumber(SMP.wav[SMP.currentChannel][1]), false, false);
    9902:	6863      	ldr	r3, [r4, #4]
    9904:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    9908:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    990a:	4630      	mov	r0, r6
    990c:	f7fa fe28 	bl	4560 <getFolderNumber(int)>
    9910:	4604      	mov	r4, r0
    9912:	4630      	mov	r0, r6
    9914:	f7fa fe32 	bl	457c <getFileNumber(int)>
    9918:	4601      	mov	r1, r0
    991a:	462b      	mov	r3, r5
    991c:	462a      	mov	r2, r5
    991e:	4620      	mov	r0, r4
    9920:	f7ff fb0a 	bl	8f38 <previewSample(unsigned int, unsigned int, bool, bool)>
    9924:	e723      	b.n	976e <showWave()+0x4aa>
		return seek(pos, SeekSet);
    9926:	2300      	movs	r3, #0
    9928:	9300      	str	r3, [sp, #0]
    992a:	2200      	movs	r2, #0
    992c:	2300      	movs	r3, #0
    992e:	a810      	add	r0, sp, #64	; 0x40
    9930:	f7f8 ffe7 	bl	2902 <File::seek(unsigned long long, int)>
    9934:	e778      	b.n	9828 <showWave()+0x564>
      showIcons("helper_select", col[SMP.y - 1]);
    9936:	495d      	ldr	r1, [pc, #372]	; (9aac <showWave()+0x7e8>)
    9938:	a858      	add	r0, sp, #352	; 0x160
    993a:	f00c ff0c 	bl	16756 <String::String(char const*)>
    993e:	495c      	ldr	r1, [pc, #368]	; (9ab0 <showWave()+0x7ec>)
    9940:	4d57      	ldr	r5, [pc, #348]	; (9aa0 <showWave()+0x7dc>)
    9942:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    9946:	3b01      	subs	r3, #1
    9948:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    994c:	18ca      	adds	r2, r1, r3
    994e:	5ccb      	ldrb	r3, [r1, r3]
    9950:	7851      	ldrb	r1, [r2, #1]
    9952:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9956:	7891      	ldrb	r1, [r2, #2]
    9958:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    995c:	a858      	add	r0, sp, #352	; 0x160
    995e:	f7fb ff67 	bl	5830 <showIcons(String, CRGB)>
    9962:	a858      	add	r0, sp, #352	; 0x160
    9964:	f00c feae 	bl	166c4 <String::~String()>
      showIcons("helper_load", CRGB(0, 0, 0));
    9968:	4952      	ldr	r1, [pc, #328]	; (9ab4 <showWave()+0x7f0>)
    996a:	a85b      	add	r0, sp, #364	; 0x16c
    996c:	f00c fef3 	bl	16756 <String::String(char const*)>
    9970:	2400      	movs	r4, #0
    9972:	f88d 4178 	strb.w	r4, [sp, #376]	; 0x178
    9976:	f88d 4179 	strb.w	r4, [sp, #377]	; 0x179
    997a:	f88d 417a 	strb.w	r4, [sp, #378]	; 0x17a
    997e:	995e      	ldr	r1, [sp, #376]	; 0x178
    9980:	a85b      	add	r0, sp, #364	; 0x16c
    9982:	f7fb ff55 	bl	5830 <showIcons(String, CRGB)>
    9986:	a85b      	add	r0, sp, #364	; 0x16c
    9988:	f00c fe9c 	bl	166c4 <String::~String()>
      showIcons("helper_folder", CRGB(10, 10, 0));
    998c:	494a      	ldr	r1, [pc, #296]	; (9ab8 <showWave()+0x7f4>)
    998e:	a85f      	add	r0, sp, #380	; 0x17c
    9990:	f00c fee1 	bl	16756 <String::String(char const*)>
    9994:	230a      	movs	r3, #10
    9996:	f88d 3188 	strb.w	r3, [sp, #392]	; 0x188
    999a:	f88d 3189 	strb.w	r3, [sp, #393]	; 0x189
    999e:	f88d 418a 	strb.w	r4, [sp, #394]	; 0x18a
    99a2:	9962      	ldr	r1, [sp, #392]	; 0x188
    99a4:	a85f      	add	r0, sp, #380	; 0x17c
    99a6:	f7fb ff43 	bl	5830 <showIcons(String, CRGB)>
    99aa:	a85f      	add	r0, sp, #380	; 0x17c
    99ac:	f00c fe8a 	bl	166c4 <String::~String()>
      showNumber(SMP.wav[SMP.currentChannel][1], col_Folder[getFolderNumber(SMP.wav[SMP.currentChannel][1])], 0);
    99b0:	686b      	ldr	r3, [r5, #4]
    99b2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
    99b6:	6aad      	ldr	r5, [r5, #40]	; 0x28
    99b8:	4628      	mov	r0, r5
    99ba:	f7fa fdd1 	bl	4560 <getFolderNumber(int)>
    99be:	4b3f      	ldr	r3, [pc, #252]	; (9abc <showWave()+0x7f8>)
    99c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    99c4:	181a      	adds	r2, r3, r0
    99c6:	5c1b      	ldrb	r3, [r3, r0]
    99c8:	7851      	ldrb	r1, [r2, #1]
    99ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    99ce:	7891      	ldrb	r1, [r2, #2]
    99d0:	4622      	mov	r2, r4
    99d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    99d6:	4628      	mov	r0, r5
    99d8:	f7fa fde6 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    99dc:	e6c7      	b.n	976e <showWave()+0x4aa>
    sampleIsLoaded = false;
    99de:	2500      	movs	r5, #0
    99e0:	4b37      	ldr	r3, [pc, #220]	; (9ac0 <showWave()+0x7fc>)
    99e2:	701d      	strb	r5, [r3, #0]
    SMP.wav[SMP.currentChannel][1] = currentMode->pos[2];
    99e4:	4c2e      	ldr	r4, [pc, #184]	; (9aa0 <showWave()+0x7dc>)
    99e6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    99ea:	6291      	str	r1, [r2, #40]	; 0x28
	StringSumHelper(const char *p) : String(p) {}
    99ec:	4935      	ldr	r1, [pc, #212]	; (9ac4 <showWave()+0x800>)
    99ee:	a863      	add	r0, sp, #396	; 0x18c
    99f0:	f00c feb1 	bl	16756 <String::String(char const*)>
    Serial.println("File: " + String(getFolderNumber(SMP.wav[SMP.currentChannel][1])) + " / " + String(getFileNumber(SMP.wav[SMP.currentChannel][1])));
    99f4:	6863      	ldr	r3, [r4, #4]
    99f6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    99fa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    99fc:	f7fa fdb0 	bl	4560 <getFolderNumber(int)>
    9a00:	4601      	mov	r1, r0
    9a02:	220a      	movs	r2, #10
    9a04:	a866      	add	r0, sp, #408	; 0x198
    9a06:	f00c fedd 	bl	167c4 <String::String(int, unsigned char)>
    9a0a:	a966      	add	r1, sp, #408	; 0x198
    9a0c:	a863      	add	r0, sp, #396	; 0x18c
    9a0e:	f00c ff48 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    9a12:	492d      	ldr	r1, [pc, #180]	; (9ac8 <showWave()+0x804>)
    9a14:	f00c ff4d 	bl	168b2 <operator+(StringSumHelper const&, char const*)>
    9a18:	4606      	mov	r6, r0
    9a1a:	6863      	ldr	r3, [r4, #4]
    9a1c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    9a20:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9a22:	f7fa fdab 	bl	457c <getFileNumber(int)>
    9a26:	4601      	mov	r1, r0
    9a28:	220a      	movs	r2, #10
    9a2a:	a869      	add	r0, sp, #420	; 0x1a4
    9a2c:	f00c feca 	bl	167c4 <String::String(int, unsigned char)>
    9a30:	a969      	add	r1, sp, #420	; 0x1a4
    9a32:	4630      	mov	r0, r6
    9a34:	f00c ff35 	bl	168a2 <operator+(StringSumHelper const&, String const&)>
    9a38:	4601      	mov	r1, r0
    9a3a:	4e24      	ldr	r6, [pc, #144]	; (9acc <showWave()+0x808>)
    9a3c:	4630      	mov	r0, r6
    9a3e:	f00c fb9d 	bl	1617c <Print::print(String const&)>
    9a42:	4630      	mov	r0, r6
    9a44:	f00c fbbf 	bl	161c6 <Print::println()>
    9a48:	a869      	add	r0, sp, #420	; 0x1a4
    9a4a:	f00c fe3b 	bl	166c4 <String::~String()>
    9a4e:	a866      	add	r0, sp, #408	; 0x198
    9a50:	f00c fe38 	bl	166c4 <String::~String()>
class StringSumHelper : public String
    9a54:	a863      	add	r0, sp, #396	; 0x18c
    9a56:	f00c fe35 	bl	166c4 <String::~String()>
    SMP.smplen = 0;
    9a5a:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
    currentMode->pos[0] = 1;
    9a5e:	4b1c      	ldr	r3, [pc, #112]	; (9ad0 <showWave()+0x80c>)
    9a60:	681a      	ldr	r2, [r3, #0]
    9a62:	2301      	movs	r3, #1
    9a64:	62d3      	str	r3, [r2, #44]	; 0x2c
		noInterrupts();
    9a66:	b672      	cpsid	i
		encoder.position = p;
    9a68:	4a1a      	ldr	r2, [pc, #104]	; (9ad4 <showWave()+0x810>)
    9a6a:	6153      	str	r3, [r2, #20]
		interrupts();
    9a6c:	b662      	cpsie	i
    SMP.seek = 0;
    9a6e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
    9a72:	4b09      	ldr	r3, [pc, #36]	; (9a98 <showWave()+0x7d4>)
    9a74:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
    9a78:	f8d3 5138 	ldr.w	r5, [r3, #312]	; 0x138
        for (auto && sample : _audiosamples) {
    9a7c:	42ac      	cmp	r4, r5
    9a7e:	d035      	beq.n	9aec <showWave()+0x828>
            delete sample;
    9a80:	2614      	movs	r6, #20
    9a82:	e001      	b.n	9a88 <showWave()+0x7c4>
        for (auto && sample : _audiosamples) {
    9a84:	42a5      	cmp	r5, r4
    9a86:	d027      	beq.n	9ad8 <showWave()+0x814>
            delete sample;
    9a88:	f854 0b04 	ldr.w	r0, [r4], #4
    9a8c:	2800      	cmp	r0, #0
    9a8e:	d0f9      	beq.n	9a84 <showWave()+0x7c0>
    9a90:	4631      	mov	r1, r6
    9a92:	f00d fcd7 	bl	17444 <operator delete(void*, unsigned int)>
    9a96:	e7f5      	b.n	9a84 <showWave()+0x7c0>
    9a98:	700001e0 	.word	0x700001e0
    9a9c:	200073f4 	.word	0x200073f4
    9aa0:	70000000 	.word	0x70000000
    9aa4:	20000bd0 	.word	0x20000bd0
    9aa8:	2000667c 	.word	0x2000667c
    9aac:	20000e2c 	.word	0x20000e2c
    9ab0:	200012d4 	.word	0x200012d4
    9ab4:	20000df8 	.word	0x20000df8
    9ab8:	20000e10 	.word	0x20000e10
    9abc:	20000e68 	.word	0x20000e68
    9ac0:	20008c33 	.word	0x20008c33
    9ac4:	20000cb8 	.word	0x20000cb8
    9ac8:	20000ccc 	.word	0x20000ccc
    9acc:	20004e74 	.word	0x20004e74
    9ad0:	200057ec 	.word	0x200057ec
    9ad4:	20007374 	.word	0x20007374
      { _M_erase_at_end(this->_M_impl._M_start); }
    9ad8:	4ba5      	ldr	r3, [pc, #660]	; (9d70 <showWave()+0xaac>)
    9ada:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
	if (size_type __n = this->_M_impl._M_finish - __pos)
    9ade:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
    9ae2:	429a      	cmp	r2, r3
    9ae4:	d002      	beq.n	9aec <showWave()+0x828>
	    this->_M_impl._M_finish = __pos;
    9ae6:	4ba2      	ldr	r3, [pc, #648]	; (9d70 <showWave()+0xaac>)
    9ae8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    envelope0.noteOff();
    9aec:	48a1      	ldr	r0, [pc, #644]	; (9d74 <showWave()+0xab0>)
    9aee:	f003 f95f 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
		return (f) ? f->isOpen() : false;
    9af2:	9814      	ldr	r0, [sp, #80]	; 0x50
    9af4:	b128      	cbz	r0, 9b02 <showWave()+0x83e>
    9af6:	6803      	ldr	r3, [r0, #0]
    9af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9afa:	4798      	blx	r3
    if (sampleFile) {
    9afc:	2800      	cmp	r0, #0
    9afe:	f040 80b0 	bne.w	9c62 <showWave()+0x99e>
    if (SMP.wav[SMP.currentChannel][1] < 100) showIcons("icon_sample", col[SMP.y - 1]);
    9b02:	4b9d      	ldr	r3, [pc, #628]	; (9d78 <showWave()+0xab4>)
    9b04:	685a      	ldr	r2, [r3, #4]
    9b06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    9b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9b0c:	2b63      	cmp	r3, #99	; 0x63
    9b0e:	f240 80b0 	bls.w	9c72 <showWave()+0x9ae>
    sprintf(OUTPUTf, "samples/%d/_%d.wav", getFolderNumber(SMP.wav[SMP.currentChannel][1]), getFileNumber(SMP.wav[SMP.currentChannel][1]));
    9b12:	4c99      	ldr	r4, [pc, #612]	; (9d78 <showWave()+0xab4>)
    9b14:	6863      	ldr	r3, [r4, #4]
    9b16:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    9b1a:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    9b1c:	4630      	mov	r0, r6
    9b1e:	f7fa fd1f 	bl	4560 <getFolderNumber(int)>
    9b22:	4605      	mov	r5, r0
    9b24:	4630      	mov	r0, r6
    9b26:	f7fa fd29 	bl	457c <getFileNumber(int)>
    9b2a:	4603      	mov	r3, r0
    9b2c:	462a      	mov	r2, r5
    9b2e:	4993      	ldr	r1, [pc, #588]	; (9d7c <showWave()+0xab8>)
    9b30:	a803      	add	r0, sp, #12
    9b32:	f018 fde5 	bl	22700 <sprintf>
    if (SMP.wav[SMP.currentChannel][1] < getFolderNumber(SMP.wav[SMP.currentChannel][1] + 1) * 100) {
    9b36:	6863      	ldr	r3, [r4, #4]
    9b38:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    9b3c:	6aa4      	ldr	r4, [r4, #40]	; 0x28
    9b3e:	1c60      	adds	r0, r4, #1
    9b40:	f7fa fd0e 	bl	4560 <getFolderNumber(int)>
    9b44:	2364      	movs	r3, #100	; 0x64
    9b46:	fb03 f000 	mul.w	r0, r3, r0
    9b4a:	4284      	cmp	r4, r0
    9b4c:	f0c0 80ab 	bcc.w	9ca6 <showWave()+0x9e2>
    if (lastPreviewedSample[getFolderNumber(SMP.wav[SMP.currentChannel][1])] < SMP.wav[SMP.currentChannel][1]) {
    9b50:	4c89      	ldr	r4, [pc, #548]	; (9d78 <showWave()+0xab4>)
    9b52:	6863      	ldr	r3, [r4, #4]
    9b54:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    9b58:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    9b5a:	4628      	mov	r0, r5
    9b5c:	f7fa fd00 	bl	4560 <getFolderNumber(int)>
    9b60:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    9b64:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    9b68:	429d      	cmp	r5, r3
    9b6a:	d905      	bls.n	9b78 <showWave()+0x8b4>
      if (SMP.wav[SMP.currentChannel][1] > lastFile[getFolderNumber(SMP.wav[SMP.currentChannel][1])]) {
    9b6c:	4b84      	ldr	r3, [pc, #528]	; (9d80 <showWave()+0xabc>)
    9b6e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    9b72:	429d      	cmp	r5, r3
    9b74:	f200 80ca 	bhi.w	9d0c <showWave()+0xa48>
    lastPreviewedSample[getFolderNumber(SMP.wav[SMP.currentChannel][1])] = SMP.wav[SMP.currentChannel][1];
    9b78:	4c7f      	ldr	r4, [pc, #508]	; (9d78 <showWave()+0xab4>)
    9b7a:	6863      	ldr	r3, [r4, #4]
    9b7c:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    9b80:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    9b82:	4628      	mov	r0, r5
    9b84:	f7fa fcec 	bl	4560 <getFolderNumber(int)>
    9b88:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    9b8c:	f8c0 51bc 	str.w	r5, [r0, #444]	; 0x1bc
    showIcons("helper_select", col[SMP.y - 1]);
    9b90:	497c      	ldr	r1, [pc, #496]	; (9d84 <showWave()+0xac0>)
    9b92:	a86f      	add	r0, sp, #444	; 0x1bc
    9b94:	f00c fddf 	bl	16756 <String::String(char const*)>
    9b98:	497b      	ldr	r1, [pc, #492]	; (9d88 <showWave()+0xac4>)
    9b9a:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
    9b9e:	3b01      	subs	r3, #1
    9ba0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9ba4:	18ca      	adds	r2, r1, r3
    9ba6:	5ccb      	ldrb	r3, [r1, r3]
    9ba8:	7851      	ldrb	r1, [r2, #1]
    9baa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9bae:	7891      	ldrb	r1, [r2, #2]
    9bb0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    9bb4:	a86f      	add	r0, sp, #444	; 0x1bc
    9bb6:	f7fb fe3b 	bl	5830 <showIcons(String, CRGB)>
    9bba:	a86f      	add	r0, sp, #444	; 0x1bc
    9bbc:	f00c fd82 	bl	166c4 <String::~String()>
    showIcons("helper_load", CRGB(0, 20, 0));
    9bc0:	4972      	ldr	r1, [pc, #456]	; (9d8c <showWave()+0xac8>)
    9bc2:	a872      	add	r0, sp, #456	; 0x1c8
    9bc4:	f00c fdc7 	bl	16756 <String::String(char const*)>
    9bc8:	2500      	movs	r5, #0
    9bca:	f88d 51d4 	strb.w	r5, [sp, #468]	; 0x1d4
    9bce:	2314      	movs	r3, #20
    9bd0:	f88d 31d5 	strb.w	r3, [sp, #469]	; 0x1d5
    9bd4:	f88d 51d6 	strb.w	r5, [sp, #470]	; 0x1d6
    9bd8:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    9bda:	a872      	add	r0, sp, #456	; 0x1c8
    9bdc:	f7fb fe28 	bl	5830 <showIcons(String, CRGB)>
    9be0:	a872      	add	r0, sp, #456	; 0x1c8
    9be2:	f00c fd6f 	bl	166c4 <String::~String()>
    showIcons("helper_folder", CRGB(10, 30, 0));
    9be6:	496a      	ldr	r1, [pc, #424]	; (9d90 <showWave()+0xacc>)
    9be8:	a876      	add	r0, sp, #472	; 0x1d8
    9bea:	f00c fdb4 	bl	16756 <String::String(char const*)>
    9bee:	230a      	movs	r3, #10
    9bf0:	f88d 31e4 	strb.w	r3, [sp, #484]	; 0x1e4
    9bf4:	231e      	movs	r3, #30
    9bf6:	f88d 31e5 	strb.w	r3, [sp, #485]	; 0x1e5
    9bfa:	f88d 51e6 	strb.w	r5, [sp, #486]	; 0x1e6
    9bfe:	9979      	ldr	r1, [sp, #484]	; 0x1e4
    9c00:	a876      	add	r0, sp, #472	; 0x1d8
    9c02:	f7fb fe15 	bl	5830 <showIcons(String, CRGB)>
    9c06:	a876      	add	r0, sp, #472	; 0x1d8
    9c08:	f00c fd5c 	bl	166c4 <String::~String()>
    showNumber(SMP.wav[SMP.currentChannel][1], col_Folder[getFolderNumber(SMP.wav[SMP.currentChannel][1])], 0);
    9c0c:	6863      	ldr	r3, [r4, #4]
    9c0e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    9c12:	6a9e      	ldr	r6, [r3, #40]	; 0x28
    9c14:	4630      	mov	r0, r6
    9c16:	f7fa fca3 	bl	4560 <getFolderNumber(int)>
    9c1a:	4b5e      	ldr	r3, [pc, #376]	; (9d94 <showWave()+0xad0>)
    9c1c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9c20:	181a      	adds	r2, r3, r0
    9c22:	5c1b      	ldrb	r3, [r3, r0]
    9c24:	7851      	ldrb	r1, [r2, #1]
    9c26:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9c2a:	7891      	ldrb	r1, [r2, #2]
    9c2c:	462a      	mov	r2, r5
    9c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    9c32:	4630      	mov	r0, r6
    9c34:	f7fa fcb8 	bl	45a8 <showNumber(unsigned int, CRGB, int)>
    previewSample(getFolderNumber(SMP.wav[SMP.currentChannel][1]), getFileNumber(SMP.wav[SMP.currentChannel][1]), true, true);
    9c38:	6863      	ldr	r3, [r4, #4]
    9c3a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
    9c3e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    9c40:	4628      	mov	r0, r5
    9c42:	f7fa fc8d 	bl	4560 <getFolderNumber(int)>
    9c46:	4604      	mov	r4, r0
    9c48:	4628      	mov	r0, r5
    9c4a:	f7fa fc97 	bl	457c <getFileNumber(int)>
    9c4e:	4601      	mov	r1, r0
    9c50:	2301      	movs	r3, #1
    9c52:	461a      	mov	r2, r3
    9c54:	4620      	mov	r0, r4
    9c56:	f7ff f96f 	bl	8f38 <previewSample(unsigned int, unsigned int, bool, bool)>
    sampleIsLoaded = true;
    9c5a:	4b4f      	ldr	r3, [pc, #316]	; (9d98 <showWave()+0xad4>)
    9c5c:	2201      	movs	r2, #1
    9c5e:	701a      	strb	r2, [r3, #0]
    9c60:	e590      	b.n	9784 <showWave()+0x4c0>
		return seek(pos, SeekSet);
    9c62:	2300      	movs	r3, #0
    9c64:	9300      	str	r3, [sp, #0]
    9c66:	2200      	movs	r2, #0
    9c68:	2300      	movs	r3, #0
    9c6a:	a810      	add	r0, sp, #64	; 0x40
    9c6c:	f7f8 fe49 	bl	2902 <File::seek(unsigned long long, int)>
    9c70:	e747      	b.n	9b02 <showWave()+0x83e>
    if (SMP.wav[SMP.currentChannel][1] < 100) showIcons("icon_sample", col[SMP.y - 1]);
    9c72:	494a      	ldr	r1, [pc, #296]	; (9d9c <showWave()+0xad8>)
    9c74:	a86c      	add	r0, sp, #432	; 0x1b0
    9c76:	f00c fd6e 	bl	16756 <String::String(char const*)>
    9c7a:	4943      	ldr	r1, [pc, #268]	; (9d88 <showWave()+0xac4>)
    9c7c:	4b3e      	ldr	r3, [pc, #248]	; (9d78 <showWave()+0xab4>)
    9c7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    9c82:	3b01      	subs	r3, #1
    9c84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9c88:	18ca      	adds	r2, r1, r3
    9c8a:	5ccb      	ldrb	r3, [r1, r3]
    9c8c:	7851      	ldrb	r1, [r2, #1]
    9c8e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    9c92:	7891      	ldrb	r1, [r2, #2]
    9c94:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    9c98:	a86c      	add	r0, sp, #432	; 0x1b0
    9c9a:	f7fb fdc9 	bl	5830 <showIcons(String, CRGB)>
    9c9e:	a86c      	add	r0, sp, #432	; 0x1b0
    9ca0:	f00c fd10 	bl	166c4 <String::~String()>
    9ca4:	e735      	b.n	9b12 <showWave()+0x84e>
							  return write((const uint8_t *)str, strlen(str)); }
    9ca6:	4c3e      	ldr	r4, [pc, #248]	; (9da0 <showWave()+0xadc>)
    9ca8:	6823      	ldr	r3, [r4, #0]
    9caa:	685b      	ldr	r3, [r3, #4]
    9cac:	2220      	movs	r2, #32
    9cae:	493d      	ldr	r1, [pc, #244]	; (9da4 <showWave()+0xae0>)
    9cb0:	4620      	mov	r0, r4
    9cb2:	4798      	blx	r3
      Serial.println(getFolderNumber(SMP.wav[SMP.currentChannel][1] + 1));
    9cb4:	4d30      	ldr	r5, [pc, #192]	; (9d78 <showWave()+0xab4>)
    9cb6:	686b      	ldr	r3, [r5, #4]
    9cb8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    9cbc:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9cbe:	3001      	adds	r0, #1
    9cc0:	f7fa fc4e 	bl	4560 <getFolderNumber(int)>
    9cc4:	4601      	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
    9cc6:	4620      	mov	r0, r4
    9cc8:	f00c faeb 	bl	162a2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    9ccc:	4620      	mov	r0, r4
    9cce:	f00c fa7a 	bl	161c6 <Print::println()>
      SMP.wav[SMP.currentChannel][1] = lastFile[getFolderNumber(SMP.wav[SMP.currentChannel][1])];
    9cd2:	686e      	ldr	r6, [r5, #4]
    9cd4:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    9cd8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    9cda:	f7fa fc41 	bl	4560 <getFolderNumber(int)>
    9cde:	4b28      	ldr	r3, [pc, #160]	; (9d80 <showWave()+0xabc>)
    9ce0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9ce4:	62b4      	str	r4, [r6, #40]	; 0x28
      SMP.folder = getFolderNumber(SMP.wav[SMP.currentChannel][1]);
    9ce6:	4620      	mov	r0, r4
    9ce8:	f7fa fc3a 	bl	4560 <getFolderNumber(int)>
    9cec:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
		noInterrupts();
    9cf0:	b672      	cpsid	i
		encoder.position = p;
    9cf2:	4a2d      	ldr	r2, [pc, #180]	; (9da8 <showWave()+0xae4>)
      encoders[2].write((SMP.wav[SMP.currentChannel][1] * 4) - 1);
    9cf4:	00a4      	lsls	r4, r4, #2
    9cf6:	3c01      	subs	r4, #1
    9cf8:	64d4      	str	r4, [r2, #76]	; 0x4c
		interrupts();
    9cfa:	b662      	cpsie	i
      encoders[1].write((SMP.folder * 4) - 1);
    9cfc:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
    9d00:	009b      	lsls	r3, r3, #2
    9d02:	3b01      	subs	r3, #1
		noInterrupts();
    9d04:	b672      	cpsid	i
		encoder.position = p;
    9d06:	6313      	str	r3, [r2, #48]	; 0x30
		interrupts();
    9d08:	b662      	cpsie	i
	}
    9d0a:	e721      	b.n	9b50 <showWave()+0x88c>
							  return write((const uint8_t *)str, strlen(str)); }
    9d0c:	4c24      	ldr	r4, [pc, #144]	; (9da0 <showWave()+0xadc>)
    9d0e:	6823      	ldr	r3, [r4, #0]
    9d10:	685b      	ldr	r3, [r3, #4]
    9d12:	2225      	movs	r2, #37	; 0x25
    9d14:	4925      	ldr	r1, [pc, #148]	; (9dac <showWave()+0xae8>)
    9d16:	4620      	mov	r0, r4
    9d18:	4798      	blx	r3
        Serial.println(getFolderNumber(SMP.wav[SMP.currentChannel][1]));
    9d1a:	4d17      	ldr	r5, [pc, #92]	; (9d78 <showWave()+0xab4>)
    9d1c:	686b      	ldr	r3, [r5, #4]
    9d1e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
    9d22:	6a98      	ldr	r0, [r3, #40]	; 0x28
    9d24:	f7fa fc1c 	bl	4560 <getFolderNumber(int)>
    9d28:	4601      	mov	r1, r0
	size_t print(int n)				{ return print((long)n); }
    9d2a:	4620      	mov	r0, r4
    9d2c:	f00c fab9 	bl	162a2 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    9d30:	4620      	mov	r0, r4
    9d32:	f00c fa48 	bl	161c6 <Print::println()>
        SMP.wav[SMP.currentChannel][1] = ((getFolderNumber(SMP.wav[SMP.currentChannel][1]) + 1) * 100);
    9d36:	686e      	ldr	r6, [r5, #4]
    9d38:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    9d3c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    9d3e:	f7fa fc0f 	bl	4560 <getFolderNumber(int)>
    9d42:	2464      	movs	r4, #100	; 0x64
    9d44:	fb00 4404 	mla	r4, r0, r4, r4
    9d48:	62b4      	str	r4, [r6, #40]	; 0x28
        SMP.folder = getFolderNumber(SMP.wav[SMP.currentChannel][1] + 1);
    9d4a:	1c60      	adds	r0, r4, #1
    9d4c:	f7fa fc08 	bl	4560 <getFolderNumber(int)>
    9d50:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
		noInterrupts();
    9d54:	b672      	cpsid	i
		encoder.position = p;
    9d56:	4a14      	ldr	r2, [pc, #80]	; (9da8 <showWave()+0xae4>)
        encoders[2].write((SMP.wav[SMP.currentChannel][1] * 4) - 1);
    9d58:	00a4      	lsls	r4, r4, #2
    9d5a:	3c01      	subs	r4, #1
    9d5c:	64d4      	str	r4, [r2, #76]	; 0x4c
		interrupts();
    9d5e:	b662      	cpsie	i
        encoders[1].write((SMP.folder * 4) - 1);
    9d60:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
    9d64:	009b      	lsls	r3, r3, #2
    9d66:	3b01      	subs	r3, #1
		noInterrupts();
    9d68:	b672      	cpsid	i
		encoder.position = p;
    9d6a:	6313      	str	r3, [r2, #48]	; 0x30
		interrupts();
    9d6c:	b662      	cpsie	i
	}
    9d6e:	e703      	b.n	9b78 <showWave()+0x8b4>
    9d70:	700001e0 	.word	0x700001e0
    9d74:	200073f4 	.word	0x200073f4
    9d78:	70000000 	.word	0x70000000
    9d7c:	20000bd0 	.word	0x20000bd0
    9d80:	20007b08 	.word	0x20007b08
    9d84:	20000e2c 	.word	0x20000e2c
    9d88:	200012d4 	.word	0x200012d4
    9d8c:	20000df8 	.word	0x20000df8
    9d90:	20000e10 	.word	0x20000e10
    9d94:	20000e68 	.word	0x20000e68
    9d98:	20008c33 	.word	0x20008c33
    9d9c:	20000ddc 	.word	0x20000ddc
    9da0:	20004e74 	.word	0x20004e74
    9da4:	20000cd0 	.word	0x20000cd0
    9da8:	20007374 	.word	0x20007374
    9dac:	20000cf4 	.word	0x20000cf4

00009db0 <loop>:
void loop() {
    9db0:	b508      	push	{r3, lr}
		return usb_midi_read(channel);
    9db2:	2000      	movs	r0, #0
    9db4:	f00e fcf2 	bl	1879c <usb_midi_read>
  multiresponseButton1.poll();
    9db8:	4862      	ldr	r0, [pc, #392]	; (9f44 <loop+0x194>)
    9dba:	f00b f9ff 	bl	151bc <Switch::poll()>
  multiresponseButton2.poll();
    9dbe:	4862      	ldr	r0, [pc, #392]	; (9f48 <loop+0x198>)
    9dc0:	f00b f9fc 	bl	151bc <Switch::poll()>
  multiresponseButton3.poll();
    9dc4:	4861      	ldr	r0, [pc, #388]	; (9f4c <loop+0x19c>)
    9dc6:	f00b f9f9 	bl	151bc <Switch::poll()>
  multiresponseButton4.poll();
    9dca:	4861      	ldr	r0, [pc, #388]	; (9f50 <loop+0x1a0>)
    9dcc:	f00b f9f6 	bl	151bc <Switch::poll()>
  checkPositions();
    9dd0:	f7fa f996 	bl	4100 <checkPositions()>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    9dd4:	495f      	ldr	r1, [pc, #380]	; (9f54 <loop+0x1a4>)
    9dd6:	4b60      	ldr	r3, [pc, #384]	; (9f58 <loop+0x1a8>)
    9dd8:	6818      	ldr	r0, [r3, #0]
    9dda:	f00c fda0 	bl	1691e <String::equals(char const*) const>
  if (currentMode->name == "DRAW") {
    9dde:	b338      	cbz	r0, 9e30 <loop+0x80>
    canvas(false);
    9de0:	2000      	movs	r0, #0
    9de2:	f7fa f9f1 	bl	41c8 <canvas(bool)>
  if (resetTimerActive && millis() - lastButtonPressTime > 80) {
    9de6:	4b5d      	ldr	r3, [pc, #372]	; (9f5c <loop+0x1ac>)
    9de8:	781b      	ldrb	r3, [r3, #0]
    9dea:	b133      	cbz	r3, 9dfa <loop+0x4a>
    9dec:	4b5c      	ldr	r3, [pc, #368]	; (9f60 <loop+0x1b0>)
    9dee:	681b      	ldr	r3, [r3, #0]
    9df0:	4a5c      	ldr	r2, [pc, #368]	; (9f64 <loop+0x1b4>)
    9df2:	6812      	ldr	r2, [r2, #0]
    9df4:	1a9b      	subs	r3, r3, r2
    9df6:	2b50      	cmp	r3, #80	; 0x50
    9df8:	d867      	bhi.n	9eca <loop+0x11a>
  if (currentMode == &draw || currentMode == &singleMode) {
    9dfa:	4b57      	ldr	r3, [pc, #348]	; (9f58 <loop+0x1a8>)
    9dfc:	681b      	ldr	r3, [r3, #0]
    9dfe:	4a5a      	ldr	r2, [pc, #360]	; (9f68 <loop+0x1b8>)
    9e00:	4293      	cmp	r3, r2
    9e02:	d07d      	beq.n	9f00 <loop+0x150>
    9e04:	4a59      	ldr	r2, [pc, #356]	; (9f6c <loop+0x1bc>)
    9e06:	4293      	cmp	r3, r2
    9e08:	d07a      	beq.n	9f00 <loop+0x150>
  if (noteOnTriggered && millis() - startTime >= 200) {
    9e0a:	4b59      	ldr	r3, [pc, #356]	; (9f70 <loop+0x1c0>)
    9e0c:	781b      	ldrb	r3, [r3, #0]
    9e0e:	b13b      	cbz	r3, 9e20 <loop+0x70>
    9e10:	4b53      	ldr	r3, [pc, #332]	; (9f60 <loop+0x1b0>)
    9e12:	681b      	ldr	r3, [r3, #0]
    9e14:	4a57      	ldr	r2, [pc, #348]	; (9f74 <loop+0x1c4>)
    9e16:	6812      	ldr	r2, [r2, #0]
    9e18:	1a9b      	subs	r3, r3, r2
    9e1a:	2bc7      	cmp	r3, #199	; 0xc7
    9e1c:	f200 8087 	bhi.w	9f2e <loop+0x17e>
  FastLEDshow();  // draw!
    9e20:	f7f9 fc58 	bl	36d4 <FastLEDshow()>
  yield();
    9e24:	f001 ffd6 	bl	bdd4 <yield>
  delay(5);  // otherwise, the audio lib crashes after 1-60sec //(1 is good if 720MHZ overclock!!!!)
    9e28:	2005      	movs	r0, #5
    9e2a:	f00c ff23 	bl	16c74 <delay>
}
    9e2e:	bd08      	pop	{r3, pc}
    9e30:	4951      	ldr	r1, [pc, #324]	; (9f78 <loop+0x1c8>)
    9e32:	4b49      	ldr	r3, [pc, #292]	; (9f58 <loop+0x1a8>)
    9e34:	6818      	ldr	r0, [r3, #0]
    9e36:	f00c fd72 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "VOLUME_BPM") {
    9e3a:	b110      	cbz	r0, 9e42 <loop+0x92>
    setVolume();
    9e3c:	f7fb fe22 	bl	5a84 <setVolume()>
    9e40:	e7d1      	b.n	9de6 <loop+0x36>
    9e42:	494e      	ldr	r1, [pc, #312]	; (9f7c <loop+0x1cc>)
    9e44:	4b44      	ldr	r3, [pc, #272]	; (9f58 <loop+0x1a8>)
    9e46:	6818      	ldr	r0, [r3, #0]
    9e48:	f00c fd69 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "VELOCITY") {
    9e4c:	b110      	cbz	r0, 9e54 <loop+0xa4>
    setVelocity();
    9e4e:	f7fa fe8f 	bl	4b70 <setVelocity()>
    9e52:	e7c8      	b.n	9de6 <loop+0x36>
    9e54:	494a      	ldr	r1, [pc, #296]	; (9f80 <loop+0x1d0>)
    9e56:	4b40      	ldr	r3, [pc, #256]	; (9f58 <loop+0x1a8>)
    9e58:	6818      	ldr	r0, [r3, #0]
    9e5a:	f00c fd60 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "SINGLE") {
    9e5e:	b118      	cbz	r0, 9e68 <loop+0xb8>
    canvas(true);
    9e60:	2001      	movs	r0, #1
    9e62:	f7fa f9b1 	bl	41c8 <canvas(bool)>
    9e66:	e7be      	b.n	9de6 <loop+0x36>
    9e68:	4946      	ldr	r1, [pc, #280]	; (9f84 <loop+0x1d4>)
    9e6a:	4b3b      	ldr	r3, [pc, #236]	; (9f58 <loop+0x1a8>)
    9e6c:	6818      	ldr	r0, [r3, #0]
    9e6e:	f00c fd56 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "MENU") {
    9e72:	b110      	cbz	r0, 9e7a <loop+0xca>
    showMenu();
    9e74:	f7fc f822 	bl	5ebc <showMenu()>
    9e78:	e7b5      	b.n	9de6 <loop+0x36>
    9e7a:	4943      	ldr	r1, [pc, #268]	; (9f88 <loop+0x1d8>)
    9e7c:	4b36      	ldr	r3, [pc, #216]	; (9f58 <loop+0x1a8>)
    9e7e:	6818      	ldr	r0, [r3, #0]
    9e80:	f00c fd4d 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "SET_SAMPLEPACK") {
    9e84:	b110      	cbz	r0, 9e8c <loop+0xdc>
    showSamplePack();
    9e86:	f7fc f913 	bl	60b0 <showSamplePack()>
    9e8a:	e7ac      	b.n	9de6 <loop+0x36>
    9e8c:	493f      	ldr	r1, [pc, #252]	; (9f8c <loop+0x1dc>)
    9e8e:	4b32      	ldr	r3, [pc, #200]	; (9f58 <loop+0x1a8>)
    9e90:	6818      	ldr	r0, [r3, #0]
    9e92:	f00c fd44 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "SET_WAV") {
    9e96:	b110      	cbz	r0, 9e9e <loop+0xee>
    showWave();
    9e98:	f7ff fa14 	bl	92c4 <showWave()>
    9e9c:	e7a3      	b.n	9de6 <loop+0x36>
    9e9e:	493c      	ldr	r1, [pc, #240]	; (9f90 <loop+0x1e0>)
    9ea0:	4b2d      	ldr	r3, [pc, #180]	; (9f58 <loop+0x1a8>)
    9ea2:	6818      	ldr	r0, [r3, #0]
    9ea4:	f00c fd3b 	bl	1691e <String::equals(char const*) const>
  } else if (currentMode->name == "NOTE_SHIFT") {
    9ea8:	2800      	cmp	r0, #0
    9eaa:	d09c      	beq.n	9de6 <loop+0x36>
    shiftNotes();
    9eac:	f7f9 fc36 	bl	371c <shiftNotes()>
    drawBase();
    9eb0:	f7fb fad2 	bl	5458 <drawBase()>
    drawSamples();
    9eb4:	f7fb fb94 	bl	55e0 <drawSamples()>
    if (isPlaying) {
    9eb8:	4b36      	ldr	r3, [pc, #216]	; (9f94 <loop+0x1e4>)
    9eba:	781b      	ldrb	r3, [r3, #0]
    9ebc:	2b00      	cmp	r3, #0
    9ebe:	d092      	beq.n	9de6 <loop+0x36>
      drawTimer(pagebeat);
    9ec0:	4b35      	ldr	r3, [pc, #212]	; (9f98 <loop+0x1e8>)
    9ec2:	6818      	ldr	r0, [r3, #0]
    9ec4:	f7fb fc10 	bl	56e8 <drawTimer(unsigned int)>
    9ec8:	e78d      	b.n	9de6 <loop+0x36>
    checkMode();
    9eca:	f7fe fbc1 	bl	8650 <checkMode()>
    memset(buttons, 0, sizeof(buttons));
    9ece:	4933      	ldr	r1, [pc, #204]	; (9f9c <loop+0x1ec>)
    9ed0:	2300      	movs	r3, #0
    9ed2:	f8c1 3144 	str.w	r3, [r1, #324]	; 0x144
    9ed6:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148
    9eda:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
    9ede:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
    9ee2:	f8c1 3154 	str.w	r3, [r1, #340]	; 0x154
    memset(oldButtons, 0, sizeof(oldButtons));
    9ee6:	f8c1 3158 	str.w	r3, [r1, #344]	; 0x158
    9eea:	f8c1 315c 	str.w	r3, [r1, #348]	; 0x15c
    9eee:	f8c1 3160 	str.w	r3, [r1, #352]	; 0x160
    9ef2:	f8c1 3164 	str.w	r3, [r1, #356]	; 0x164
    9ef6:	f8c1 3168 	str.w	r3, [r1, #360]	; 0x168
    resetTimerActive = false;  // Stop the timer
    9efa:	4a18      	ldr	r2, [pc, #96]	; (9f5c <loop+0x1ac>)
    9efc:	7013      	strb	r3, [r2, #0]
    9efe:	e77c      	b.n	9dfa <loop+0x4a>
    drawBase();
    9f00:	f7fb faaa 	bl	5458 <drawBase()>
    drawSamples();
    9f04:	f7fb fb6c 	bl	55e0 <drawSamples()>
    if (currentMode != &velocity)
    9f08:	4b13      	ldr	r3, [pc, #76]	; (9f58 <loop+0x1a8>)
    9f0a:	681a      	ldr	r2, [r3, #0]
    9f0c:	4b24      	ldr	r3, [pc, #144]	; (9fa0 <loop+0x1f0>)
    9f0e:	429a      	cmp	r2, r3
    9f10:	d001      	beq.n	9f16 <loop+0x166>
      drawCursor();
    9f12:	f7fb fc39 	bl	5788 <drawCursor()>
    if (isPlaying) {
    9f16:	4b1f      	ldr	r3, [pc, #124]	; (9f94 <loop+0x1e4>)
    9f18:	781b      	ldrb	r3, [r3, #0]
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	f43f af75 	beq.w	9e0a <loop+0x5a>
      drawTimer(pagebeat);
    9f20:	4b1d      	ldr	r3, [pc, #116]	; (9f98 <loop+0x1e8>)
    9f22:	6818      	ldr	r0, [r3, #0]
    9f24:	f7fb fbe0 	bl	56e8 <drawTimer(unsigned int)>
      FastLEDshow();
    9f28:	f7f9 fbd4 	bl	36d4 <FastLEDshow()>
    9f2c:	e76d      	b.n	9e0a <loop+0x5a>
    envelope14.noteOff();
    9f2e:	481d      	ldr	r0, [pc, #116]	; (9fa4 <loop+0x1f4>)
    9f30:	f002 ff3e 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
    envelope13.noteOff();
    9f34:	481c      	ldr	r0, [pc, #112]	; (9fa8 <loop+0x1f8>)
    9f36:	f002 ff3b 	bl	cdb0 <AudioEffectEnvelope::noteOff()>
    noteOnTriggered = false;
    9f3a:	4b0d      	ldr	r3, [pc, #52]	; (9f70 <loop+0x1c0>)
    9f3c:	2200      	movs	r2, #0
    9f3e:	701a      	strb	r2, [r3, #0]
    9f40:	e76e      	b.n	9e20 <loop+0x70>
    9f42:	bf00      	nop
    9f44:	20007f48 	.word	0x20007f48
    9f48:	20007fa4 	.word	0x20007fa4
    9f4c:	20008000 	.word	0x20008000
    9f50:	2000805c 	.word	0x2000805c
    9f54:	20003ab0 	.word	0x20003ab0
    9f58:	200057ec 	.word	0x200057ec
    9f5c:	20008c2e 	.word	0x20008c2e
    9f60:	20008a6c 	.word	0x20008a6c
    9f64:	20007b00 	.word	0x20007b00
    9f68:	20005b88 	.word	0x20005b88
    9f6c:	20005808 	.word	0x20005808
    9f70:	20008c2c 	.word	0x20008c2c
    9f74:	20008a64 	.word	0x20008a64
    9f78:	20003ab8 	.word	0x20003ab8
    9f7c:	20003ac4 	.word	0x20003ac4
    9f80:	20003ad0 	.word	0x20003ad0
    9f84:	20003ad8 	.word	0x20003ad8
    9f88:	20003ae0 	.word	0x20003ae0
    9f8c:	20003af0 	.word	0x20003af0
    9f90:	20003af8 	.word	0x20003af8
    9f94:	20008c2b 	.word	0x20008c2b
    9f98:	200080e8 	.word	0x200080e8
    9f9c:	70000000 	.word	0x70000000
    9fa0:	20005bdc 	.word	0x20005bdc
    9fa4:	20007544 	.word	0x20007544
    9fa8:	2000750c 	.word	0x2000750c

00009fac <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)>:
    bool readNextValue(int16_t *value, uint16_t channel) {
    9fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9fb0:	ed2d 8b02 	vpush	{d8}
    9fb4:	4604      	mov	r4, r0
    9fb6:	460f      	mov	r7, r1
    9fb8:	4616      	mov	r6, r2
        if (!_useDualPlaybackHead) {
    9fba:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
    9fbe:	2800      	cmp	r0, #0
    9fc0:	d137      	bne.n	a032 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x86>
            if (_playbackRate >= 0 ) {
    9fc2:	ed94 7b04 	vldr	d7, [r4, #16]
    9fc6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9fce:	db1e      	blt.n	a00e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x62>
                if (_bufferPosition1 >=  _loop_finish )
    9fd0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9fd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9fd4:	429a      	cmp	r2, r3
    9fd6:	da16      	bge.n	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
            result =  getSourceBufferValue(_bufferPosition1 + channel);
    9fd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9fda:	6823      	ldr	r3, [r4, #0]
    9fdc:	691b      	ldr	r3, [r3, #16]
    9fde:	4431      	add	r1, r6
    9fe0:	4620      	mov	r0, r4
    9fe2:	4798      	blx	r3
    9fe4:	4605      	mov	r5, r0
        if (_interpolationType == ResampleInterpolationType::resampleinterpolation_linear) {
    9fe6:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    9fea:	2b02      	cmp	r3, #2
    9fec:	f000 8176 	beq.w	a2dc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x330>
        else if (_interpolationType == ResampleInterpolationType::resampleinterpolation_quadratic) {
    9ff0:	2b03      	cmp	r3, #3
    9ff2:	f000 8216 	beq.w	a422 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x476>
        if (channel == _numChannels - 1) {
    9ff6:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    9ffa:	1e5a      	subs	r2, r3, #1
    9ffc:	4296      	cmp	r6, r2
    9ffe:	f000 82e8 	beq.w	a5d2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x626>
        *value = result;
    a002:	803d      	strh	r5, [r7, #0]
        return true;
    a004:	2001      	movs	r0, #1
    }
    a006:	ecbd 8b02 	vpop	{d8}
    a00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            } else if (_playbackRate < 0) {
    a00e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a016:	d5df      	bpl.n	9fd8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c>
                if (_play_start == play_start::play_start_sample) {
    a018:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    a01c:	b923      	cbnz	r3, a028 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x7c>
                    if (_bufferPosition1 < _header_offset)
    a01e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a020:	68e3      	ldr	r3, [r4, #12]
    a022:	429a      	cmp	r2, r3
    a024:	dad8      	bge.n	9fd8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c>
    a026:	e7ee      	b.n	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                    if (_bufferPosition1 < _loop_start)
    a028:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a02a:	6c63      	ldr	r3, [r4, #68]	; 0x44
    a02c:	429a      	cmp	r2, r3
    a02e:	dad3      	bge.n	9fd8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c>
    a030:	e7e9      	b.n	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
            if (_playbackRate >= 0.0) {
    a032:	ed94 7b04 	vldr	d7, [r4, #16]
    a036:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a03e:	f2c0 80c5 	blt.w	a1cc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x220>
                if (_crossfade == 0.0 && _bufferPosition1 > (_loop_finish - _numChannels) - _crossfadeDurationInSamples) {
    a042:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    a046:	eeb5 7b40 	vcmp.f64	d7, #0.0
    a04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a04e:	d150      	bne.n	a0f2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x146>
    a050:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a052:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    a056:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a058:	1a9b      	subs	r3, r3, r2
    a05a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a05c:	1a98      	subs	r0, r3, r2
    a05e:	4281      	cmp	r1, r0
    a060:	d947      	bls.n	a0f2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x146>
                    _bufferPosition2 = _loop_start;
    a062:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a064:	62a0      	str	r0, [r4, #40]	; 0x28
                    _crossfade = 1.0 - (( (_loop_finish-_numChannels) - _bufferPosition1 ) / static_cast<double>(_crossfadeDurationInSamples));
    a066:	1a5b      	subs	r3, r3, r1
    a068:	ee07 3a90 	vmov	s15, r3
    a06c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a070:	ee06 2a90 	vmov	s13, r2
    a074:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a078:	ee87 5b06 	vdiv.f64	d5, d7, d6
    a07c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a080:	ee37 7b45 	vsub.f64	d7, d7, d5
    a084:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    _crossfadeState = 1;
    a088:	2301      	movs	r3, #1
    a08a:	6423      	str	r3, [r4, #64]	; 0x40
        if (!_useDualPlaybackHead || _crossfade == 0.0) {
    a08c:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    a090:	eeb5 7b40 	vcmp.f64	d7, #0.0
    a094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a098:	d09e      	beq.n	9fd8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c>
        } else if (_crossfade == 1.0){
    a09a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    a09e:	eeb4 7b46 	vcmp.f64	d7, d6
    a0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a0a6:	f000 8089 	beq.w	a1bc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x210>
            int result1 =  getSourceBufferValue(_bufferPosition1 + channel);
    a0aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a0ac:	6823      	ldr	r3, [r4, #0]
    a0ae:	691b      	ldr	r3, [r3, #16]
    a0b0:	4431      	add	r1, r6
    a0b2:	4620      	mov	r0, r4
    a0b4:	4798      	blx	r3
    a0b6:	ee08 0a10 	vmov	s16, r0
            int result2 =  getSourceBufferValue(_bufferPosition2 + channel);
    a0ba:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    a0bc:	6823      	ldr	r3, [r4, #0]
    a0be:	691b      	ldr	r3, [r3, #16]
    a0c0:	4431      	add	r1, r6
    a0c2:	4620      	mov	r0, r4
    a0c4:	4798      	blx	r3
    a0c6:	ee07 0a10 	vmov	s14, r0
            result = ((1.0 - _crossfade ) * result1) + ((_crossfade) * result2);
    a0ca:	ed94 4b0c 	vldr	d4, [r4, #48]	; 0x30
    a0ce:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    a0d2:	ee35 5b44 	vsub.f64	d5, d5, d4
    a0d6:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
    a0da:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    a0de:	ee27 7b04 	vmul.f64	d7, d7, d4
    a0e2:	ee05 7b08 	vmla.f64	d7, d5, d8
    a0e6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a0ea:	ee17 3a10 	vmov	r3, s14
    a0ee:	b21d      	sxth	r5, r3
    a0f0:	e779      	b.n	9fe6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a>
                } else if (_crossfade == 1.0 && _bufferPosition2 > (_loop_finish - _numChannels)- _crossfadeDurationInSamples) {
    a0f2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    a0f6:	eeb4 7b46 	vcmp.f64	d7, d6
    a0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a0fe:	d11a      	bne.n	a136 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x18a>
    a100:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    a102:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    a106:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a108:	1a9b      	subs	r3, r3, r2
    a10a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a10c:	1a98      	subs	r0, r3, r2
    a10e:	4281      	cmp	r1, r0
    a110:	d911      	bls.n	a136 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x18a>
                    _bufferPosition1 = _loop_start;
    a112:	6c60      	ldr	r0, [r4, #68]	; 0x44
    a114:	6260      	str	r0, [r4, #36]	; 0x24
                    _crossfade = ((_loop_finish - _numChannels) - _bufferPosition2) / static_cast<double>(_crossfadeDurationInSamples);
    a116:	1a5b      	subs	r3, r3, r1
    a118:	ee07 3a90 	vmov	s15, r3
    a11c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a120:	ee06 2a90 	vmov	s13, r2
    a124:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a128:	ee87 5b06 	vdiv.f64	d5, d7, d6
    a12c:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
                    _crossfadeState = 2;
    a130:	2302      	movs	r3, #2
    a132:	6423      	str	r3, [r4, #64]	; 0x40
    a134:	e7aa      	b.n	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                } else if (_crossfadeState == 1) {
    a136:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a138:	2b01      	cmp	r3, #1
    a13a:	d01f      	beq.n	a17c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x1d0>
                } else if (_crossfadeState == 2) {
    a13c:	2b02      	cmp	r3, #2
    a13e:	d1a5      	bne.n	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                    _crossfade = ( (_loop_finish - _numChannels) - _bufferPosition2 ) / static_cast<double>(_crossfadeDurationInSamples);
    a140:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    a144:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a146:	1a9b      	subs	r3, r3, r2
    a148:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a14a:	1a9b      	subs	r3, r3, r2
    a14c:	ee07 3a90 	vmov	s15, r3
    a150:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a154:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    a158:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a15c:	ee87 5b06 	vdiv.f64	d5, d7, d6
    a160:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
                    if (_crossfade <= 0.0) {
    a164:	eeb5 5bc0 	vcmpe.f64	d5, #0.0
    a168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a16c:	d88e      	bhi.n	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                        _crossfadeState = 0;
    a16e:	2300      	movs	r3, #0
    a170:	6423      	str	r3, [r4, #64]	; 0x40
                        _crossfade = 0.0;
    a172:	2200      	movs	r2, #0
    a174:	2300      	movs	r3, #0
    a176:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    a17a:	e72d      	b.n	9fd8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c>
                    _crossfade = 1.0 - (((_loop_finish - _numChannels) - _bufferPosition1) / static_cast<double>(_crossfadeDurationInSamples));
    a17c:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    a180:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    a182:	1a9b      	subs	r3, r3, r2
    a184:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a186:	1a9b      	subs	r3, r3, r2
    a188:	ee07 3a90 	vmov	s15, r3
    a18c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a190:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    a194:	eeb8 5b66 	vcvt.f64.u32	d5, s13
    a198:	ee87 6b05 	vdiv.f64	d6, d7, d5
    a19c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    a1a0:	ee35 6b46 	vsub.f64	d6, d5, d6
    a1a4:	ed84 6b0c 	vstr	d6, [r4, #48]	; 0x30
                    if (_crossfade >= 1.0) {
    a1a8:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a1ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1b0:	f6ff af6c 	blt.w	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                        _crossfadeState = 0;
    a1b4:	2300      	movs	r3, #0
    a1b6:	6423      	str	r3, [r4, #64]	; 0x40
                        _crossfade = 1.0;
    a1b8:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
            result =  getSourceBufferValue(_bufferPosition2 + channel);
    a1bc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    a1be:	6823      	ldr	r3, [r4, #0]
    a1c0:	691b      	ldr	r3, [r3, #16]
    a1c2:	4431      	add	r1, r6
    a1c4:	4620      	mov	r0, r4
    a1c6:	4798      	blx	r3
    a1c8:	4605      	mov	r5, r0
    a1ca:	e70c      	b.n	9fe6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a>
                if (_crossfade == 0.0 && _bufferPosition1 < _crossfadeDurationInSamples + _header_offset) {
    a1cc:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    a1d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
    a1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a1d8:	d11e      	bne.n	a218 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x26c>
    a1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a1dc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a1de:	68e1      	ldr	r1, [r4, #12]
    a1e0:	1888      	adds	r0, r1, r2
    a1e2:	4283      	cmp	r3, r0
    a1e4:	d218      	bcs.n	a218 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x26c>
                    _bufferPosition2 = _loop_finish - _numChannels;
    a1e6:	f9b4 504c 	ldrsh.w	r5, [r4, #76]	; 0x4c
    a1ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a1ec:	1b40      	subs	r0, r0, r5
    a1ee:	62a0      	str	r0, [r4, #40]	; 0x28
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    a1f0:	1a5b      	subs	r3, r3, r1
    a1f2:	ee07 3a90 	vmov	s15, r3
    a1f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a1fa:	ee06 2a90 	vmov	s13, r2
    a1fe:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a202:	ee87 5b06 	vdiv.f64	d5, d7, d6
    a206:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a20a:	ee37 7b45 	vsub.f64	d7, d7, d5
    a20e:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    _crossfadeState = 1;
    a212:	2301      	movs	r3, #1
    a214:	6423      	str	r3, [r4, #64]	; 0x40
    a216:	e739      	b.n	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                } else if (_crossfade == 1.0 && _bufferPosition2 < _crossfadeDurationInSamples + _header_offset) {
    a218:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    a21c:	eeb4 7b46 	vcmp.f64	d7, d6
    a220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a224:	d11a      	bne.n	a25c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2b0>
    a226:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a228:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    a22a:	68e1      	ldr	r1, [r4, #12]
    a22c:	1888      	adds	r0, r1, r2
    a22e:	4283      	cmp	r3, r0
    a230:	d214      	bcs.n	a25c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2b0>
                    _bufferPosition1 = _loop_finish - _numChannels;
    a232:	f9b4 504c 	ldrsh.w	r5, [r4, #76]	; 0x4c
    a236:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    a238:	1b40      	subs	r0, r0, r5
    a23a:	6260      	str	r0, [r4, #36]	; 0x24
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    a23c:	1a5b      	subs	r3, r3, r1
    a23e:	ee07 3a90 	vmov	s15, r3
    a242:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a246:	ee06 2a90 	vmov	s13, r2
    a24a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a24e:	ee87 5b06 	vdiv.f64	d5, d7, d6
    a252:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
                    _crossfadeState = 2;
    a256:	2302      	movs	r3, #2
    a258:	6423      	str	r3, [r4, #64]	; 0x40
    a25a:	e717      	b.n	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                } else if (_crossfadeState == 1) {
    a25c:	6c23      	ldr	r3, [r4, #64]	; 0x40
    a25e:	2b01      	cmp	r3, #1
    a260:	d01e      	beq.n	a2a0 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2f4>
                } else if (_crossfadeState == 2) {
    a262:	2b02      	cmp	r3, #2
    a264:	f47f af12 	bne.w	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    a268:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    a26a:	68e2      	ldr	r2, [r4, #12]
    a26c:	1a9b      	subs	r3, r3, r2
    a26e:	ee07 3a90 	vmov	s15, r3
    a272:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a276:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    a27a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
    a27e:	ee87 5b06 	vdiv.f64	d5, d7, d6
    a282:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
                    if (_crossfade <= 0.0) {
    a286:	eeb5 5bc0 	vcmpe.f64	d5, #0.0
    a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a28e:	f63f aefd 	bhi.w	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                        _crossfadeState = 0;
    a292:	2300      	movs	r3, #0
    a294:	6423      	str	r3, [r4, #64]	; 0x40
                        _crossfade = 0.0;
    a296:	2200      	movs	r2, #0
    a298:	2300      	movs	r3, #0
    a29a:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    a29e:	e69b      	b.n	9fd8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c>
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    a2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a2a2:	68e2      	ldr	r2, [r4, #12]
    a2a4:	1a9b      	subs	r3, r3, r2
    a2a6:	ee07 3a90 	vmov	s15, r3
    a2aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    a2ae:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    a2b2:	eeb8 5b66 	vcvt.f64.u32	d5, s13
    a2b6:	ee87 6b05 	vdiv.f64	d6, d7, d5
    a2ba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    a2be:	ee35 6b46 	vsub.f64	d6, d5, d6
    a2c2:	ed84 6b0c 	vstr	d6, [r4, #48]	; 0x30
                    if (_crossfade >= 1.0) {
    a2c6:	eeb4 6bc5 	vcmpe.f64	d6, d5
    a2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a2ce:	f6ff aedd 	blt.w	a08c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xe0>
                        _crossfadeState = 0;
    a2d2:	2300      	movs	r3, #0
    a2d4:	6423      	str	r3, [r4, #64]	; 0x40
                        _crossfade = 1.0;
    a2d6:	ed84 5b0c 	vstr	d5, [r4, #48]	; 0x30
    a2da:	e76f      	b.n	a1bc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x210>
            double abs_remainder = abs(_remainder);
    a2dc:	ed94 8b06 	vldr	d8, [r4, #24]
                if (_playbackRate > 0) {
    a2e0:	ed94 7b04 	vldr	d7, [r4, #16]
    a2e4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a2ec:	dd5d      	ble.n	a3aa <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3fe>
                    if (_remainder - _playbackRate < 0.0){
    a2ee:	ee38 6b47 	vsub.f64	d6, d8, d7
    a2f2:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    a2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a2fa:	d422      	bmi.n	a342 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x396>
                if (_numInterpolationPoints > 1) {
    a2fc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a2fe:	2b01      	cmp	r3, #1
    a300:	f67f ae79 	bls.w	9ff6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4a>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
    a304:	eeb0 8bc8 	vabs.f64	d8, d8
                    result = abs_remainder * _interpolationPoints[channel][1].y + (1.0 - abs_remainder) * _interpolationPoints[channel][0].y;
    a308:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a30a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    a30e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
    a312:	ee05 2a10 	vmov	s10, r2
    a316:	eeb8 5bc5 	vcvt.f64.s32	d5, s10
    a31a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    a31e:	ee36 6b48 	vsub.f64	d6, d6, d8
    a322:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    a326:	ee07 3a10 	vmov	s14, r3
    a32a:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    a32e:	ee27 7b08 	vmul.f64	d7, d7, d8
    a332:	ee05 7b06 	vmla.f64	d7, d5, d6
    a336:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    a33a:	ee17 3a10 	vmov	r3, s14
    a33e:	b21d      	sxth	r5, r3
    a340:	e659      	b.n	9ff6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4a>
                        if (!_useDualPlaybackHead) {
    a342:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a346:	b913      	cbnz	r3, a34e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a2>
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    a348:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a34a:	2b01      	cmp	r3, #1
    a34c:	d914      	bls.n	a378 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3cc>
                        if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    a34e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a350:	2b00      	cmp	r3, #0
    a352:	f43f ae58 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
    a356:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    a35a:	2b00      	cmp	r3, #0
    a35c:	f43f ae53 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    a360:	88da      	ldrh	r2, [r3, #6]
    a362:	805a      	strh	r2, [r3, #2]
                        _interpolationPoints[channel][1].y = result;
    a364:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a366:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    a36a:	80dd      	strh	r5, [r3, #6]
                        if (_numInterpolationPoints < 2)
    a36c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a36e:	2b01      	cmp	r3, #1
    a370:	d8c8      	bhi.n	a304 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x358>
                            _numInterpolationPoints++;
    a372:	3301      	adds	r3, #1
    a374:	65e3      	str	r3, [r4, #92]	; 0x5c
    a376:	e7c1      	b.n	a2fc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x350>
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    a378:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    a37c:	eeb4 7bc6 	vcmpe.f64	d7, d6
    a380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a384:	dde3      	ble.n	a34e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a2>
    a386:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    a38a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a38c:	1ac9      	subs	r1, r1, r3
    a38e:	68e3      	ldr	r3, [r4, #12]
    a390:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
    a394:	dddb      	ble.n	a34e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a2>
                                _interpolationPoints[channel][1].y = getSourceBufferValue(_bufferPosition1 - _numChannels);
    a396:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a398:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    a39c:	6823      	ldr	r3, [r4, #0]
    a39e:	691b      	ldr	r3, [r3, #16]
    a3a0:	4620      	mov	r0, r4
    a3a2:	4798      	blx	r3
    a3a4:	f8a8 0006 	strh.w	r0, [r8, #6]
    a3a8:	e7d1      	b.n	a34e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a2>
                else if (_playbackRate < 0) {
    a3aa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3b2:	d5a3      	bpl.n	a2fc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x350>
                    if (_remainder - _playbackRate > 0.0){
    a3b4:	ee38 6b47 	vsub.f64	d6, d8, d7
    a3b8:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    a3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3c0:	dd9c      	ble.n	a2fc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x350>
                        if (!_useDualPlaybackHead) {
    a3c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a3c6:	b913      	cbnz	r3, a3ce <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x422>
                            if (_numInterpolationPoints < 2  && _playbackRate < -1.0) {
    a3c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a3ca:	2b01      	cmp	r3, #1
    a3cc:	d914      	bls.n	a3f8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x44c>
                        if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    a3ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	f43f ae18 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
    a3d6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    a3da:	2b00      	cmp	r3, #0
    a3dc:	f43f ae13 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    a3e0:	88da      	ldrh	r2, [r3, #6]
    a3e2:	805a      	strh	r2, [r3, #2]
                        _interpolationPoints[channel][1].y = result;
    a3e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a3e6:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
    a3ea:	80dd      	strh	r5, [r3, #6]
                        if (_numInterpolationPoints < 2)
    a3ec:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a3ee:	2b01      	cmp	r3, #1
    a3f0:	d888      	bhi.n	a304 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x358>
                            _numInterpolationPoints++;
    a3f2:	3301      	adds	r3, #1
    a3f4:	65e3      	str	r3, [r4, #92]	; 0x5c
    a3f6:	e781      	b.n	a2fc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x350>
                            if (_numInterpolationPoints < 2  && _playbackRate < -1.0) {
    a3f8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
    a3fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    a400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a404:	d5e3      	bpl.n	a3ce <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x422>
                                _interpolationPoints[channel][1].y = getSourceBufferValue(_bufferPosition1 + _numChannels);
    a406:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a408:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
    a40c:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
    a410:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a412:	6823      	ldr	r3, [r4, #0]
    a414:	691b      	ldr	r3, [r3, #16]
    a416:	4411      	add	r1, r2
    a418:	4620      	mov	r0, r4
    a41a:	4798      	blx	r3
    a41c:	f8a8 0006 	strh.w	r0, [r8, #6]
    a420:	e7d5      	b.n	a3ce <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x422>
            double abs_remainder = abs(_remainder);
    a422:	ed94 8b06 	vldr	d8, [r4, #24]
                if (_playbackRate > 0) {                
    a426:	ed94 7b04 	vldr	d7, [r4, #16]
    a42a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a42e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a432:	dd5c      	ble.n	a4ee <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x542>
                    if (_remainder - _playbackRate < 0.0){
    a434:	ee38 7b47 	vsub.f64	d7, d8, d7
    a438:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a440:	d405      	bmi.n	a44e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4a2>
                if (_numInterpolationPoints >= 4) {
    a442:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a444:	2b03      	cmp	r3, #3
    a446:	f200 80ad 	bhi.w	a5a4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5f8>
                    result = 0;
    a44a:	2500      	movs	r5, #0
    a44c:	e5d3      	b.n	9ff6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4a>
                        int numberOfSamplesToUpdate = - floor(_remainder - _playbackRate);
    a44e:	febb 7b47 	vrintm.f64	d7, d7
    a452:	eeb1 7b47 	vneg.f64	d7, d7
    a456:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    a45a:	ee17 3a90 	vmov	r3, s15
    a45e:	ee17 9a90 	vmov	r9, s15
    a462:	2b04      	cmp	r3, #4
    a464:	bfa8      	it	ge
    a466:	f04f 0904 	movge.w	r9, #4
                          for (int i = numberOfSamplesToUpdate; i > 0; i--) {
    a46a:	2b00      	cmp	r3, #0
    a46c:	dde9      	ble.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                            if (!_interpolationPoints[channel]) {
    a46e:	ea4f 0886 	mov.w	r8, r6, lsl #2
    a472:	e00f      	b.n	a494 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4e8>
                                    if (_interpolationPoints != nullptr && _interpolationPoints[channel] != nullptr) {
    a474:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a476:	b11b      	cbz	r3, a480 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4d4>
    a478:	f853 3008 	ldr.w	r3, [r3, r8]
    a47c:	b103      	cbz	r3, a480 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4d4>
                                _interpolationPoints[channel][3].y = result;
    a47e:	81dd      	strh	r5, [r3, #14]
                            if (_numInterpolationPoints < requiredSize) {
    a480:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a482:	2b03      	cmp	r3, #3
    a484:	d801      	bhi.n	a48a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4de>
                                _numInterpolationPoints++;
    a486:	3301      	adds	r3, #1
    a488:	65e3      	str	r3, [r4, #92]	; 0x5c
                          for (int i = numberOfSamplesToUpdate; i > 0; i--) {
    a48a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a48e:	f1b9 0f00 	cmp.w	r9, #0
    a492:	ddd6      	ble.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                            if (channel < 0 || channel >= _numChannels) {
    a494:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    a498:	429e      	cmp	r6, r3
    a49a:	dad2      	bge.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                            if (!_interpolationPoints[channel]) {
    a49c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    a49e:	f852 3008 	ldr.w	r3, [r2, r8]
    a4a2:	2b00      	cmp	r3, #0
    a4a4:	d0cd      	beq.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                            if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    a4a6:	2a00      	cmp	r2, #0
    a4a8:	f43f adad 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                            _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    a4ac:	88da      	ldrh	r2, [r3, #6]
    a4ae:	805a      	strh	r2, [r3, #2]
                            _interpolationPoints[channel][1].y = _interpolationPoints[channel][2].y;
    a4b0:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a4b2:	f853 3008 	ldr.w	r3, [r3, r8]
    a4b6:	895a      	ldrh	r2, [r3, #10]
    a4b8:	80da      	strh	r2, [r3, #6]
                            _interpolationPoints[channel][2].y = _interpolationPoints[channel][3].y;
    a4ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a4bc:	f853 3008 	ldr.w	r3, [r3, r8]
    a4c0:	89da      	ldrh	r2, [r3, #14]
    a4c2:	815a      	strh	r2, [r3, #10]
                            if (!_useDualPlaybackHead) {
    a4c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a4c8:	2b00      	cmp	r3, #0
    a4ca:	d1d3      	bne.n	a474 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4c8>
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1 - (i * _numChannels) + 1 + channel);
    a4cc:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a4ce:	f853 a008 	ldr.w	sl, [r3, r8]
    a4d2:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    a4d6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a4d8:	fb09 1113 	mls	r1, r9, r3, r1
    a4dc:	3101      	adds	r1, #1
    a4de:	6823      	ldr	r3, [r4, #0]
    a4e0:	691b      	ldr	r3, [r3, #16]
    a4e2:	4431      	add	r1, r6
    a4e4:	4620      	mov	r0, r4
    a4e6:	4798      	blx	r3
    a4e8:	f8aa 000e 	strh.w	r0, [sl, #14]
    a4ec:	e7c8      	b.n	a480 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4d4>
                else if (_playbackRate < 0) {                
    a4ee:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a4f6:	d5a4      	bpl.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                    if (_remainder - _playbackRate > 0.0){
    a4f8:	ee38 7b47 	vsub.f64	d7, d8, d7
    a4fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a504:	dd9d      	ble.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                        int numberOfSamplesToUpdate =  ceil(_remainder - _playbackRate);
    a506:	feba 7b47 	vrintp.f64	d7, d7
    a50a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    a50e:	ee17 3a90 	vmov	r3, s15
    a512:	ee17 9a90 	vmov	r9, s15
    a516:	2b04      	cmp	r3, #4
    a518:	bfa8      	it	ge
    a51a:	f04f 0904 	movge.w	r9, #4
                        for (int i=numberOfSamplesToUpdate; i > 0; i--) {
    a51e:	2b00      	cmp	r3, #0
    a520:	dd8f      	ble.n	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                            if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    a522:	ea4f 0886 	mov.w	r8, r6, lsl #2
    a526:	e00e      	b.n	a546 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x59a>
                                    if (_interpolationPoints != nullptr && _interpolationPoints[channel] != nullptr) {
    a528:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a52a:	2b00      	cmp	r3, #0
    a52c:	d034      	beq.n	a598 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5ec>
    a52e:	f853 3008 	ldr.w	r3, [r3, r8]
    a532:	2b00      	cmp	r3, #0
    a534:	d030      	beq.n	a598 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5ec>
                                _interpolationPoints[channel][3].y = result;
    a536:	81dd      	strh	r5, [r3, #14]
    a538:	e02e      	b.n	a598 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5ec>
                        for (int i=numberOfSamplesToUpdate; i > 0; i--) {
    a53a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    a53e:	f1b9 0f00 	cmp.w	r9, #0
    a542:	f77f af7e 	ble.w	a442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x496>
                            if (!_interpolationPoints || !_interpolationPoints[channel]) return;
    a546:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a548:	2b00      	cmp	r3, #0
    a54a:	f43f ad5c 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
    a54e:	f853 3008 	ldr.w	r3, [r3, r8]
    a552:	2b00      	cmp	r3, #0
    a554:	f43f ad57 	beq.w	a006 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                            _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    a558:	88da      	ldrh	r2, [r3, #6]
    a55a:	805a      	strh	r2, [r3, #2]
                            _interpolationPoints[channel][1].y = _interpolationPoints[channel][2].y;
    a55c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a55e:	f853 3008 	ldr.w	r3, [r3, r8]
    a562:	895a      	ldrh	r2, [r3, #10]
    a564:	80da      	strh	r2, [r3, #6]
                            _interpolationPoints[channel][2].y = _interpolationPoints[channel][3].y;
    a566:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a568:	f853 3008 	ldr.w	r3, [r3, r8]
    a56c:	89da      	ldrh	r2, [r3, #14]
    a56e:	815a      	strh	r2, [r3, #10]
                            if (!_useDualPlaybackHead) {
    a570:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    a574:	2b00      	cmp	r3, #0
    a576:	d1d7      	bne.n	a528 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x57c>
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1+(i*_numChannels)-1+channel);
    a578:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a57a:	f853 a008 	ldr.w	sl, [r3, r8]
    a57e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    a582:	6a61      	ldr	r1, [r4, #36]	; 0x24
    a584:	fb09 1103 	mla	r1, r9, r3, r1
    a588:	3901      	subs	r1, #1
    a58a:	6823      	ldr	r3, [r4, #0]
    a58c:	691b      	ldr	r3, [r3, #16]
    a58e:	4431      	add	r1, r6
    a590:	4620      	mov	r0, r4
    a592:	4798      	blx	r3
    a594:	f8aa 000e 	strh.w	r0, [sl, #14]
                            if (_numInterpolationPoints < 4) _numInterpolationPoints++;
    a598:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    a59a:	2b03      	cmp	r3, #3
    a59c:	d8cd      	bhi.n	a53a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x58e>
    a59e:	3301      	adds	r3, #1
    a5a0:	65e3      	str	r3, [r4, #92]	; 0x5c
    a5a2:	e7ca      	b.n	a53a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x58e>
                            _interpolationPoints[channel][0].y, 
    a5a4:	6e23      	ldr	r3, [r4, #96]	; 0x60
    a5a6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    a5aa:	eeb0 0bc8 	vabs.f64	d0, d8
                            1.0 + abs_remainder); 
    a5ae:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    a5b2:	ee30 0b07 	vadd.f64	d0, d0, d7
                        = fastinterpolate(
    a5b6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    a5ba:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    a5be:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    a5c2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    a5c6:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
    a5ca:	f00a fe4f 	bl	1526c <fastinterpolate(short, short, short, short, float)>
    a5ce:	4605      	mov	r5, r0
    a5d0:	e511      	b.n	9ff6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4a>
            _remainder += _playbackRate;
    a5d2:	ed94 7b06 	vldr	d7, [r4, #24]
    a5d6:	ed94 6b04 	vldr	d6, [r4, #16]
    a5da:	ee37 7b06 	vadd.f64	d7, d7, d6
            auto delta = static_cast<signed int>(_remainder);
    a5de:	eefd 6bc7 	vcvt.s32.f64	s13, d7
            _remainder -= static_cast<double>(delta);
    a5e2:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    a5e6:	ee37 7b45 	vsub.f64	d7, d7, d5
    a5ea:	ed84 7b06 	vstr	d7, [r4, #24]
            if (!_useDualPlaybackHead) {
    a5ee:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    a5f2:	b932      	cbnz	r2, a602 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x656>
                _bufferPosition1 += (delta * _numChannels);
    a5f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a5f6:	ee16 1a90 	vmov	r1, s13
    a5fa:	fb01 2203 	mla	r2, r1, r3, r2
    a5fe:	6262      	str	r2, [r4, #36]	; 0x24
    a600:	e4ff      	b.n	a002 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x56>
                if (_crossfade < 1.0)
    a602:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    a606:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    a60a:	eeb4 7bc5 	vcmpe.f64	d7, d5
    a60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a612:	d40c      	bmi.n	a62e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x682>
                if (_crossfade > 0.0)
    a614:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a61c:	f77f acf1 	ble.w	a002 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x56>
                    _bufferPosition2 += (delta * _numChannels);
    a620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    a622:	ee16 1a90 	vmov	r1, s13
    a626:	fb01 2203 	mla	r2, r1, r3, r2
    a62a:	62a2      	str	r2, [r4, #40]	; 0x28
    a62c:	e4e9      	b.n	a002 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x56>
                    _bufferPosition1 += (delta * _numChannels);
    a62e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    a630:	ee16 1a90 	vmov	r1, s13
    a634:	fb01 2203 	mla	r2, r1, r3, r2
    a638:	6262      	str	r2, [r4, #36]	; 0x24
    a63a:	e7eb      	b.n	a614 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x668>
    a63c:	0000      	movs	r0, r0
	...

0000a640 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()>:
        }

        void update()
    a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a644:	ed2d 8b02 	vpush	{d8}
    a648:	b087      	sub	sp, #28
    a64a:	af00      	add	r7, sp, #0
                reader->close();
            }
            for (int channel=0; channel < _numChannels; channel++) {
                release(blocks[channel]);
            }
        }
    a64c:	46eb      	mov	fp, sp
            int _numChannels = reader->getNumChannels();
    a64e:	6982      	ldr	r2, [r0, #24]
        return _numChannels;
    a650:	f9b2 404c 	ldrsh.w	r4, [r2, #76]	; 0x4c
            if (_numChannels == -1)
    a654:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    a658:	f000 80f3 	beq.w	a842 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x202>
    a65c:	4682      	mov	sl, r0
            audio_block_t *blocks[_numChannels];
    a65e:	00a3      	lsls	r3, r4, #2
    a660:	3307      	adds	r3, #7
    a662:	f023 0307 	bic.w	r3, r3, #7
    a666:	ebad 0d03 	sub.w	sp, sp, r3
    a66a:	4669      	mov	r1, sp
    a66c:	6179      	str	r1, [r7, #20]
            int16_t *data[_numChannels];
    a66e:	ebad 0d03 	sub.w	sp, sp, r3
    a672:	46e8      	mov	r8, sp
    bool isPlaying(void) { return _playing; }
    a674:	7913      	ldrb	r3, [r2, #4]
            if (!reader->isPlaying()) return;
    a676:	2b00      	cmp	r3, #0
    a678:	f000 80e3 	beq.w	a842 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x202>
            for (int i=0; i < _numChannels; i++) {
    a67c:	2c00      	cmp	r4, #0
    a67e:	f340 80e7 	ble.w	a850 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x210>
    a682:	1f0e      	subs	r6, r1, #4
    a684:	f1a8 0904 	sub.w	r9, r8, #4
    a688:	2500      	movs	r5, #0
                blocks[i] = allocate();
    a68a:	f00b f991 	bl	159b0 <AudioStream::allocate()>
    a68e:	f846 0f04 	str.w	r0, [r6, #4]!
                if (blocks[i] == nullptr) return;
    a692:	2800      	cmp	r0, #0
    a694:	f000 80d5 	beq.w	a842 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x202>
                data[i] = blocks[i]->data;
    a698:	3004      	adds	r0, #4
    a69a:	f849 0f04 	str.w	r0, [r9, #4]!
            for (int i=0; i < _numChannels; i++) {
    a69e:	3501      	adds	r5, #1
    a6a0:	42ac      	cmp	r4, r5
    a6a2:	d1f2      	bne.n	a68a <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x4a>
            if (reader->available()) {
    a6a4:	f8da 5018 	ldr.w	r5, [sl, #24]
        return _playing;
    a6a8:	792b      	ldrb	r3, [r5, #4]
    a6aa:	b98b      	cbnz	r3, a6d0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x90>
                reader->close();
    a6ac:	682b      	ldr	r3, [r5, #0]
    a6ae:	695b      	ldr	r3, [r3, #20]
    a6b0:	4628      	mov	r0, r5
    a6b2:	4798      	blx	r3
            for (int channel=0; channel < _numChannels; channel++) {
    a6b4:	2c00      	cmp	r4, #0
    a6b6:	dd09      	ble.n	a6cc <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x8c>
    a6b8:	697b      	ldr	r3, [r7, #20]
    a6ba:	1f1e      	subs	r6, r3, #4
                for (int channel=0; channel < _numChannels; channel++) {
    a6bc:	2500      	movs	r5, #0
                release(blocks[channel]);
    a6be:	f856 0f04 	ldr.w	r0, [r6, #4]!
    a6c2:	f00b f9d1 	bl	15a68 <AudioStream::release(audio_block_struct*)>
            for (int channel=0; channel < _numChannels; channel++) {
    a6c6:	3501      	adds	r5, #1
    a6c8:	42ac      	cmp	r4, r5
    a6ca:	dcf8      	bgt.n	a6be <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x7e>
    a6cc:	46dd      	mov	sp, fp
    a6ce:	e0b9      	b.n	a844 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x204>
    }
    a6d0:	f8c7 d008 	str.w	sp, [r7, #8]
        if (!_playing) return 0;
    a6d4:	792b      	ldrb	r3, [r5, #4]
    a6d6:	2b00      	cmp	r3, #0
    a6d8:	f000 80b0 	beq.w	a83c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1fc>
        int16_t *index[_numChannels];
    a6dc:	f9b5 204c 	ldrsh.w	r2, [r5, #76]	; 0x4c
    a6e0:	0090      	lsls	r0, r2, #2
    a6e2:	1dc3      	adds	r3, r0, #7
    a6e4:	f023 0307 	bic.w	r3, r3, #7
    a6e8:	ebad 0d03 	sub.w	sp, sp, r3
    a6ec:	4669      	mov	r1, sp
    a6ee:	6039      	str	r1, [r7, #0]
        for (int channel=0; channel < _numChannels; channel++) {
    a6f0:	2a00      	cmp	r2, #0
    a6f2:	dd08      	ble.n	a706 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xc6>
    a6f4:	4643      	mov	r3, r8
    a6f6:	1f0a      	subs	r2, r1, #4
    a6f8:	4440      	add	r0, r8
            index[channel] = (int16_t*)buf[channel];
    a6fa:	f853 1b04 	ldr.w	r1, [r3], #4
    a6fe:	f842 1f04 	str.w	r1, [r2, #4]!
        for (int channel=0; channel < _numChannels; channel++) {
    a702:	4283      	cmp	r3, r0
    a704:	d1f9      	bne.n	a6fa <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xba>
                n = reader->read((void**)data, AUDIO_BLOCK_SAMPLES);
    a706:	613d      	str	r5, [r7, #16]
        unsigned int count = 0;
    a708:	2300      	movs	r3, #0
    a70a:	60fb      	str	r3, [r7, #12]
                            _crossfade = 0.0;
    a70c:	ed9f 8b56 	vldr	d8, [pc, #344]	; a868 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x228>
    a710:	f8c7 b004 	str.w	fp, [r7, #4]
    a714:	46a3      	mov	fp, r4
            for (int channel=0; channel < _numChannels; channel++) {
    a716:	f9b5 304c 	ldrsh.w	r3, [r5, #76]	; 0x4c
    a71a:	2b00      	cmp	r3, #0
    a71c:	f340 8086 	ble.w	a82c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1ec>
    a720:	683b      	ldr	r3, [r7, #0]
    a722:	f1a3 0804 	sub.w	r8, r3, #4
    a726:	2600      	movs	r6, #0
    a728:	e007      	b.n	a73a <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xfa>
                    index[channel]++;
    a72a:	3402      	adds	r4, #2
    a72c:	f8c9 4000 	str.w	r4, [r9]
            for (int channel=0; channel < _numChannels; channel++) {
    a730:	3601      	adds	r6, #1
    a732:	f9b5 304c 	ldrsh.w	r3, [r5, #76]	; 0x4c
    a736:	429e      	cmp	r6, r3
    a738:	da78      	bge.n	a82c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1ec>
                if (readNextValue(index[channel], channel)) {
    a73a:	f108 0804 	add.w	r8, r8, #4
    a73e:	46c1      	mov	r9, r8
    a740:	f8d8 4000 	ldr.w	r4, [r8]
    a744:	b2b2      	uxth	r2, r6
    a746:	4621      	mov	r1, r4
    a748:	6938      	ldr	r0, [r7, #16]
    a74a:	f7ff fc2f 	bl	9fac <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)>
    a74e:	b140      	cbz	r0, a762 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x122>
                    if (channel == _numChannels - 1)
    a750:	f9b5 304c 	ldrsh.w	r3, [r5, #76]	; 0x4c
    a754:	3b01      	subs	r3, #1
    a756:	42b3      	cmp	r3, r6
    a758:	d1e7      	bne.n	a72a <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xea>
                        count++;
    a75a:	68fb      	ldr	r3, [r7, #12]
    a75c:	3301      	adds	r3, #1
    a75e:	60fb      	str	r3, [r7, #12]
    a760:	e7e3      	b.n	a72a <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xea>
                    switch (_loopType) {
    a762:	f895 3020 	ldrb.w	r3, [r5, #32]
    a766:	2b01      	cmp	r3, #1
    a768:	d036      	beq.n	a7d8 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x198>
    a76a:	2b02      	cmp	r3, #2
    a76c:	d046      	beq.n	a7fc <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1bc>
    a76e:	465c      	mov	r4, fp
    a770:	f8d7 b004 	ldr.w	fp, [r7, #4]
                            close();
    a774:	682b      	ldr	r3, [r5, #0]
    a776:	695b      	ldr	r3, [r3, #20]
    a778:	6938      	ldr	r0, [r7, #16]
    a77a:	4798      	blx	r3
    a77c:	f8d7 d008 	ldr.w	sp, [r7, #8]
                for (int channel=0; channel < _numChannels; channel++) {
    a780:	2c00      	cmp	r4, #0
    a782:	dda3      	ble.n	a6cc <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x8c>
    a784:	68fa      	ldr	r2, [r7, #12]
    a786:	1c93      	adds	r3, r2, #2
    a788:	005b      	lsls	r3, r3, #1
                    memset( &blocks[channel]->data[n], 0, (AUDIO_BLOCK_SAMPLES - n) * 2);
    a78a:	f1c2 0980 	rsb	r9, r2, #128	; 0x80
    a78e:	ea4f 0949 	mov.w	r9, r9, lsl #1
    a792:	697a      	ldr	r2, [r7, #20]
    a794:	f1a2 0804 	sub.w	r8, r2, #4
                for (int channel=0; channel < _numChannels; channel++) {
    a798:	2500      	movs	r5, #0
                    memset( &blocks[channel]->data[n], 0, (AUDIO_BLOCK_SAMPLES - n) * 2);
    a79a:	f8c7 b010 	str.w	fp, [r7, #16]
    a79e:	469b      	mov	fp, r3
    a7a0:	f858 6f04 	ldr.w	r6, [r8, #4]!
    a7a4:	464a      	mov	r2, r9
    a7a6:	2100      	movs	r1, #0
    a7a8:	eb06 000b 	add.w	r0, r6, fp
    a7ac:	f018 fc54 	bl	23058 <memset>
                    transmit(blocks[channel], channel);
    a7b0:	b2ea      	uxtb	r2, r5
    a7b2:	4631      	mov	r1, r6
    a7b4:	4650      	mov	r0, sl
    a7b6:	f00b f97f 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
                for (int channel=0; channel < _numChannels; channel++) {
    a7ba:	3501      	adds	r5, #1
    a7bc:	42ac      	cmp	r4, r5
    a7be:	d1ef      	bne.n	a7a0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x160>
    a7c0:	f8d7 b010 	ldr.w	fp, [r7, #16]
                if(_numChannels == 1) {
    a7c4:	2d01      	cmp	r5, #1
    a7c6:	f47f af77 	bne.w	a6b8 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x78>
                    transmit(blocks[0], 1);
    a7ca:	2201      	movs	r2, #1
    a7cc:	697b      	ldr	r3, [r7, #20]
    a7ce:	6819      	ldr	r1, [r3, #0]
    a7d0:	4650      	mov	r0, sl
    a7d2:	f00b f971 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
            for (int channel=0; channel < _numChannels; channel++) {
    a7d6:	e76f      	b.n	a6b8 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x78>
                            _crossfade = 0.0;
    a7d8:	ed85 8b0c 	vstr	d8, [r5, #48]	; 0x30
                            if (_playbackRate >= 0.0) 
    a7dc:	ed95 7b04 	vldr	d7, [r5, #16]
    a7e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a7e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a7e8:	db02      	blt.n	a7f0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1b0>
                                _bufferPosition1 = _loop_start;
    a7ea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    a7ec:	626b      	str	r3, [r5, #36]	; 0x24
    a7ee:	e79f      	b.n	a730 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xf0>
                                _bufferPosition1 = _loop_finish - _numChannels;
    a7f0:	f9b5 204c 	ldrsh.w	r2, [r5, #76]	; 0x4c
    a7f4:	6cab      	ldr	r3, [r5, #72]	; 0x48
    a7f6:	1a9b      	subs	r3, r3, r2
    a7f8:	626b      	str	r3, [r5, #36]	; 0x24
    a7fa:	e799      	b.n	a730 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xf0>
                            if (_playbackRate >= 0.0) {
    a7fc:	ed95 7b04 	vldr	d7, [r5, #16]
    a800:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    a804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a808:	db09      	blt.n	a81e <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1de>
                                _bufferPosition1 = _loop_finish - _numChannels;
    a80a:	f9b5 204c 	ldrsh.w	r2, [r5, #76]	; 0x4c
    a80e:	6cab      	ldr	r3, [r5, #72]	; 0x48
    a810:	1a9b      	subs	r3, r3, r2
    a812:	626b      	str	r3, [r5, #36]	; 0x24
                            _playbackRate = -_playbackRate;
    a814:	eeb1 7b47 	vneg.f64	d7, d7
    a818:	ed85 7b04 	vstr	d7, [r5, #16]
                            break;
    a81c:	e788      	b.n	a730 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xf0>
                                if (_play_start == play_start::play_start_sample)
    a81e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    a822:	b90b      	cbnz	r3, a828 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1e8>
                                    _bufferPosition1 = _header_offset;
    a824:	68eb      	ldr	r3, [r5, #12]
    a826:	e7f4      	b.n	a812 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1d2>
                                    _bufferPosition1 = _loop_start;
    a828:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    a82a:	e7f2      	b.n	a812 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1d2>
        while (count < nsamples) {
    a82c:	68fb      	ldr	r3, [r7, #12]
    a82e:	2b7f      	cmp	r3, #127	; 0x7f
    a830:	f67f af71 	bls.w	a716 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xd6>
    a834:	465c      	mov	r4, fp
    a836:	f8d7 b004 	ldr.w	fp, [r7, #4]
    a83a:	e79f      	b.n	a77c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x13c>
        if (!_playing) return 0;
    a83c:	2300      	movs	r3, #0
    a83e:	60fb      	str	r3, [r7, #12]
    a840:	e79c      	b.n	a77c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x13c>
                return;
    a842:	46dd      	mov	sp, fp
        }
    a844:	371c      	adds	r7, #28
    a846:	46bd      	mov	sp, r7
    a848:	ecbd 8b02 	vpop	{d8}
    a84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (reader->available()) {
    a850:	6985      	ldr	r5, [r0, #24]
    a852:	792b      	ldrb	r3, [r5, #4]
    a854:	2b00      	cmp	r3, #0
    a856:	f47f af3b 	bne.w	a6d0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x90>
                reader->close();
    a85a:	682b      	ldr	r3, [r5, #0]
    a85c:	695b      	ldr	r3, [r3, #20]
    a85e:	4628      	mov	r0, r5
    a860:	4798      	blx	r3
            for (int channel=0; channel < _numChannels; channel++) {
    a862:	e733      	b.n	a6cc <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x8c>
    a864:	f3af 8000 	nop.w
	...

0000a870 <_GLOBAL__sub_I_sound0>:
}
    a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a874:	b085      	sub	sp, #20
    EEPROMClass()                        { eeprom_initialize(); }
    a876:	f00c fabb 	bl	16df0 <eeprom_initialize>
                               "samples/_8.wav",
                               "samples/_9.wav",
                               "samples/_10.wav",
                               "samples/_11.wav",
                               "samples/_12.wav",
                               "samples/_13.wav" };
    a87a:	4ccd      	ldr	r4, [pc, #820]	; (abb0 <_GLOBAL__sub_I_sound0+0x340>)
    a87c:	49cd      	ldr	r1, [pc, #820]	; (abb4 <_GLOBAL__sub_I_sound0+0x344>)
    a87e:	4620      	mov	r0, r4
    a880:	f00b ff69 	bl	16756 <String::String(char const*)>
    a884:	49cc      	ldr	r1, [pc, #816]	; (abb8 <_GLOBAL__sub_I_sound0+0x348>)
    a886:	f104 000c 	add.w	r0, r4, #12
    a88a:	f00b ff64 	bl	16756 <String::String(char const*)>
    a88e:	49cb      	ldr	r1, [pc, #812]	; (abbc <_GLOBAL__sub_I_sound0+0x34c>)
    a890:	f104 0018 	add.w	r0, r4, #24
    a894:	f00b ff5f 	bl	16756 <String::String(char const*)>
    a898:	49c9      	ldr	r1, [pc, #804]	; (abc0 <_GLOBAL__sub_I_sound0+0x350>)
    a89a:	f104 0024 	add.w	r0, r4, #36	; 0x24
    a89e:	f00b ff5a 	bl	16756 <String::String(char const*)>
    a8a2:	49c8      	ldr	r1, [pc, #800]	; (abc4 <_GLOBAL__sub_I_sound0+0x354>)
    a8a4:	f104 0030 	add.w	r0, r4, #48	; 0x30
    a8a8:	f00b ff55 	bl	16756 <String::String(char const*)>
    a8ac:	49c6      	ldr	r1, [pc, #792]	; (abc8 <_GLOBAL__sub_I_sound0+0x358>)
    a8ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    a8b2:	f00b ff50 	bl	16756 <String::String(char const*)>
    a8b6:	49c5      	ldr	r1, [pc, #788]	; (abcc <_GLOBAL__sub_I_sound0+0x35c>)
    a8b8:	f104 0048 	add.w	r0, r4, #72	; 0x48
    a8bc:	f00b ff4b 	bl	16756 <String::String(char const*)>
    a8c0:	49c3      	ldr	r1, [pc, #780]	; (abd0 <_GLOBAL__sub_I_sound0+0x360>)
    a8c2:	f104 0054 	add.w	r0, r4, #84	; 0x54
    a8c6:	f00b ff46 	bl	16756 <String::String(char const*)>
    a8ca:	49c2      	ldr	r1, [pc, #776]	; (abd4 <_GLOBAL__sub_I_sound0+0x364>)
    a8cc:	f104 0060 	add.w	r0, r4, #96	; 0x60
    a8d0:	f00b ff41 	bl	16756 <String::String(char const*)>
    a8d4:	49c0      	ldr	r1, [pc, #768]	; (abd8 <_GLOBAL__sub_I_sound0+0x368>)
    a8d6:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    a8da:	f00b ff3c 	bl	16756 <String::String(char const*)>
    a8de:	49bf      	ldr	r1, [pc, #764]	; (abdc <_GLOBAL__sub_I_sound0+0x36c>)
    a8e0:	f104 0078 	add.w	r0, r4, #120	; 0x78
    a8e4:	f00b ff37 	bl	16756 <String::String(char const*)>
    a8e8:	49bd      	ldr	r1, [pc, #756]	; (abe0 <_GLOBAL__sub_I_sound0+0x370>)
    a8ea:	f104 0084 	add.w	r0, r4, #132	; 0x84
    a8ee:	f00b ff32 	bl	16756 <String::String(char const*)>
    a8f2:	49bc      	ldr	r1, [pc, #752]	; (abe4 <_GLOBAL__sub_I_sound0+0x374>)
    a8f4:	f104 0090 	add.w	r0, r4, #144	; 0x90
    a8f8:	f00b ff2d 	bl	16756 <String::String(char const*)>
const String usedFiles[13] = { "samples/_1.wav",
    a8fc:	4cba      	ldr	r4, [pc, #744]	; (abe8 <_GLOBAL__sub_I_sound0+0x378>)
    a8fe:	4622      	mov	r2, r4
    a900:	49ba      	ldr	r1, [pc, #744]	; (abec <_GLOBAL__sub_I_sound0+0x37c>)
    a902:	2000      	movs	r0, #0
    a904:	f00e ff20 	bl	19748 <__aeabi_atexit>
// GUItool: begin automatically generated code
AudioPlayArrayResmp sound0;  //xy=375,182
    a908:	4eb9      	ldr	r6, [pc, #740]	; (abf0 <_GLOBAL__sub_I_sound0+0x380>)
    a90a:	4630      	mov	r0, r6
    a90c:	f7f8 fe74 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a910:	4db8      	ldr	r5, [pc, #736]	; (abf4 <_GLOBAL__sub_I_sound0+0x384>)
    a912:	4622      	mov	r2, r4
    a914:	4629      	mov	r1, r5
    a916:	4630      	mov	r0, r6
    a918:	f00e ff16 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound1;  //xy=375,182
    a91c:	4eb6      	ldr	r6, [pc, #728]	; (abf8 <_GLOBAL__sub_I_sound0+0x388>)
    a91e:	4630      	mov	r0, r6
    a920:	f7f8 fe6a 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a924:	4622      	mov	r2, r4
    a926:	4629      	mov	r1, r5
    a928:	4630      	mov	r0, r6
    a92a:	f00e ff0d 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound2;  //xy=375,182
    a92e:	4eb3      	ldr	r6, [pc, #716]	; (abfc <_GLOBAL__sub_I_sound0+0x38c>)
    a930:	4630      	mov	r0, r6
    a932:	f7f8 fe61 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a936:	4622      	mov	r2, r4
    a938:	4629      	mov	r1, r5
    a93a:	4630      	mov	r0, r6
    a93c:	f00e ff04 	bl	19748 <__aeabi_atexit>

AudioPlayArrayResmp sound3;  //xy=375,182
    a940:	4eaf      	ldr	r6, [pc, #700]	; (ac00 <_GLOBAL__sub_I_sound0+0x390>)
    a942:	4630      	mov	r0, r6
    a944:	f7f8 fe58 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a948:	4622      	mov	r2, r4
    a94a:	4629      	mov	r1, r5
    a94c:	4630      	mov	r0, r6
    a94e:	f00e fefb 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound4;  //xy=375,182
    a952:	4eac      	ldr	r6, [pc, #688]	; (ac04 <_GLOBAL__sub_I_sound0+0x394>)
    a954:	4630      	mov	r0, r6
    a956:	f7f8 fe4f 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a95a:	4622      	mov	r2, r4
    a95c:	4629      	mov	r1, r5
    a95e:	4630      	mov	r0, r6
    a960:	f00e fef2 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound5;  //xy=375,182
    a964:	4ea8      	ldr	r6, [pc, #672]	; (ac08 <_GLOBAL__sub_I_sound0+0x398>)
    a966:	4630      	mov	r0, r6
    a968:	f7f8 fe46 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a96c:	4622      	mov	r2, r4
    a96e:	4629      	mov	r1, r5
    a970:	4630      	mov	r0, r6
    a972:	f00e fee9 	bl	19748 <__aeabi_atexit>

AudioPlayArrayResmp sound6;  //xy=375,182
    a976:	4ea5      	ldr	r6, [pc, #660]	; (ac0c <_GLOBAL__sub_I_sound0+0x39c>)
    a978:	4630      	mov	r0, r6
    a97a:	f7f8 fe3d 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a97e:	4622      	mov	r2, r4
    a980:	4629      	mov	r1, r5
    a982:	4630      	mov	r0, r6
    a984:	f00e fee0 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound7;  //xy=375,182
    a988:	4ea1      	ldr	r6, [pc, #644]	; (ac10 <_GLOBAL__sub_I_sound0+0x3a0>)
    a98a:	4630      	mov	r0, r6
    a98c:	f7f8 fe34 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a990:	4622      	mov	r2, r4
    a992:	4629      	mov	r1, r5
    a994:	4630      	mov	r0, r6
    a996:	f00e fed7 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound8;  //xy=375,182
    a99a:	4e9e      	ldr	r6, [pc, #632]	; (ac14 <_GLOBAL__sub_I_sound0+0x3a4>)
    a99c:	4630      	mov	r0, r6
    a99e:	f7f8 fe2b 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a9a2:	4622      	mov	r2, r4
    a9a4:	4629      	mov	r1, r5
    a9a6:	4630      	mov	r0, r6
    a9a8:	f00e fece 	bl	19748 <__aeabi_atexit>

AudioPlayArrayResmp sound9;   //xy=375,182
    a9ac:	4e9a      	ldr	r6, [pc, #616]	; (ac18 <_GLOBAL__sub_I_sound0+0x3a8>)
    a9ae:	4630      	mov	r0, r6
    a9b0:	f7f8 fe22 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a9b4:	4622      	mov	r2, r4
    a9b6:	4629      	mov	r1, r5
    a9b8:	4630      	mov	r0, r6
    a9ba:	f00e fec5 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound10;  //xy=375,182
    a9be:	4e97      	ldr	r6, [pc, #604]	; (ac1c <_GLOBAL__sub_I_sound0+0x3ac>)
    a9c0:	4630      	mov	r0, r6
    a9c2:	f7f8 fe19 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a9c6:	4622      	mov	r2, r4
    a9c8:	4629      	mov	r1, r5
    a9ca:	4630      	mov	r0, r6
    a9cc:	f00e febc 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound11;  //xy=375,182
    a9d0:	4e93      	ldr	r6, [pc, #588]	; (ac20 <_GLOBAL__sub_I_sound0+0x3b0>)
    a9d2:	4630      	mov	r0, r6
    a9d4:	f7f8 fe10 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a9d8:	4622      	mov	r2, r4
    a9da:	4629      	mov	r1, r5
    a9dc:	4630      	mov	r0, r6
    a9de:	f00e feb3 	bl	19748 <__aeabi_atexit>
AudioPlayArrayResmp sound12;  //xy=375,182
    a9e2:	4e90      	ldr	r6, [pc, #576]	; (ac24 <_GLOBAL__sub_I_sound0+0x3b4>)
    a9e4:	4630      	mov	r0, r6
    a9e6:	f7f8 fe07 	bl	35f8 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    a9ea:	4622      	mov	r2, r4
    a9ec:	4629      	mov	r1, r5
    a9ee:	4630      	mov	r0, r6
    a9f0:	f00e feaa 	bl	19748 <__aeabi_atexit>

//AudioPlayArrayResmp sound13;  //xy=375,182
AudioSynthWaveform sound13;   // synth
    a9f4:	488c      	ldr	r0, [pc, #560]	; (ac28 <_GLOBAL__sub_I_sound0+0x3b8>)
    a9f6:	f7f7 fffb 	bl	29f0 <AudioSynthWaveform::AudioSynthWaveform()>
AudioSynthWaveform sound14;   // synth
    a9fa:	488c      	ldr	r0, [pc, #560]	; (ac2c <_GLOBAL__sub_I_sound0+0x3bc>)
    a9fc:	f7f7 fff8 	bl	29f0 <AudioSynthWaveform::AudioSynthWaveform()>
//AudioPlayArrayResmp sound15;  //xy=375,182


AudioFilterStateVariable filter0;
    aa00:	488b      	ldr	r0, [pc, #556]	; (ac30 <_GLOBAL__sub_I_sound0+0x3c0>)
    aa02:	f7f7 feeb 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter1;
    aa06:	488b      	ldr	r0, [pc, #556]	; (ac34 <_GLOBAL__sub_I_sound0+0x3c4>)
    aa08:	f7f7 fee8 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter2;
    aa0c:	488a      	ldr	r0, [pc, #552]	; (ac38 <_GLOBAL__sub_I_sound0+0x3c8>)
    aa0e:	f7f7 fee5 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter3;
    aa12:	488a      	ldr	r0, [pc, #552]	; (ac3c <_GLOBAL__sub_I_sound0+0x3cc>)
    aa14:	f7f7 fee2 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter4; 
    aa18:	4889      	ldr	r0, [pc, #548]	; (ac40 <_GLOBAL__sub_I_sound0+0x3d0>)
    aa1a:	f7f7 fedf 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter5;
    aa1e:	4889      	ldr	r0, [pc, #548]	; (ac44 <_GLOBAL__sub_I_sound0+0x3d4>)
    aa20:	f7f7 fedc 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter6;
    aa24:	4888      	ldr	r0, [pc, #544]	; (ac48 <_GLOBAL__sub_I_sound0+0x3d8>)
    aa26:	f7f7 fed9 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter7;
    aa2a:	4888      	ldr	r0, [pc, #544]	; (ac4c <_GLOBAL__sub_I_sound0+0x3dc>)
    aa2c:	f7f7 fed6 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter8;
    aa30:	4887      	ldr	r0, [pc, #540]	; (ac50 <_GLOBAL__sub_I_sound0+0x3e0>)
    aa32:	f7f7 fed3 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter9;
    aa36:	4887      	ldr	r0, [pc, #540]	; (ac54 <_GLOBAL__sub_I_sound0+0x3e4>)
    aa38:	f7f7 fed0 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter10;
    aa3c:	4886      	ldr	r0, [pc, #536]	; (ac58 <_GLOBAL__sub_I_sound0+0x3e8>)
    aa3e:	f7f7 fecd 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter11;
    aa42:	4886      	ldr	r0, [pc, #536]	; (ac5c <_GLOBAL__sub_I_sound0+0x3ec>)
    aa44:	f7f7 feca 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter12;
    aa48:	4885      	ldr	r0, [pc, #532]	; (ac60 <_GLOBAL__sub_I_sound0+0x3f0>)
    aa4a:	f7f7 fec7 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter13;
    aa4e:	4885      	ldr	r0, [pc, #532]	; (ac64 <_GLOBAL__sub_I_sound0+0x3f4>)
    aa50:	f7f7 fec4 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
AudioFilterStateVariable filter14;
    aa54:	4884      	ldr	r0, [pc, #528]	; (ac68 <_GLOBAL__sub_I_sound0+0x3f8>)
    aa56:	f7f7 fec1 	bl	27dc <AudioFilterStateVariable::AudioFilterStateVariable()>
//AudioFilterStateVariable filter15;

AudioEffectEnvelope envelope0;  //xy=520,177
    aa5a:	4884      	ldr	r0, [pc, #528]	; (ac6c <_GLOBAL__sub_I_sound0+0x3fc>)
    aa5c:	f7f7 fe82 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>

AudioEffectEnvelope envelope1;  //xy=520,177
    aa60:	4883      	ldr	r0, [pc, #524]	; (ac70 <_GLOBAL__sub_I_sound0+0x400>)
    aa62:	f7f7 fe7f 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope2;  //xy=520,177
    aa66:	4883      	ldr	r0, [pc, #524]	; (ac74 <_GLOBAL__sub_I_sound0+0x404>)
    aa68:	f7f7 fe7c 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope3;  //xy=520,177
    aa6c:	4882      	ldr	r0, [pc, #520]	; (ac78 <_GLOBAL__sub_I_sound0+0x408>)
    aa6e:	f7f7 fe79 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope4;  //xy=520,177
    aa72:	4882      	ldr	r0, [pc, #520]	; (ac7c <_GLOBAL__sub_I_sound0+0x40c>)
    aa74:	f7f7 fe76 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>

AudioEffectEnvelope envelope5;  //xy=520,177
    aa78:	4881      	ldr	r0, [pc, #516]	; (ac80 <_GLOBAL__sub_I_sound0+0x410>)
    aa7a:	f7f7 fe73 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope6;  //xy=520,177
    aa7e:	4881      	ldr	r0, [pc, #516]	; (ac84 <_GLOBAL__sub_I_sound0+0x414>)
    aa80:	f7f7 fe70 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope7;  //xy=520,177
    aa84:	4880      	ldr	r0, [pc, #512]	; (ac88 <_GLOBAL__sub_I_sound0+0x418>)
    aa86:	f7f7 fe6d 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope8;  //xy=520,177
    aa8a:	4880      	ldr	r0, [pc, #512]	; (ac8c <_GLOBAL__sub_I_sound0+0x41c>)
    aa8c:	f7f7 fe6a 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>

AudioEffectEnvelope envelope9;   //xy=520,177
    aa90:	487f      	ldr	r0, [pc, #508]	; (ac90 <_GLOBAL__sub_I_sound0+0x420>)
    aa92:	f7f7 fe67 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope10;  //xy=520,177
    aa96:	487f      	ldr	r0, [pc, #508]	; (ac94 <_GLOBAL__sub_I_sound0+0x424>)
    aa98:	f7f7 fe64 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope11;  //xy=520,177
    aa9c:	487e      	ldr	r0, [pc, #504]	; (ac98 <_GLOBAL__sub_I_sound0+0x428>)
    aa9e:	f7f7 fe61 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope12;  //xy=520,177
    aaa2:	487e      	ldr	r0, [pc, #504]	; (ac9c <_GLOBAL__sub_I_sound0+0x42c>)
    aaa4:	f7f7 fe5e 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>

AudioEffectEnvelope envelope13;  //xy=520,177
    aaa8:	487d      	ldr	r0, [pc, #500]	; (aca0 <_GLOBAL__sub_I_sound0+0x430>)
    aaaa:	f7f7 fe5b 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope envelope14;  //xy=520,177
    aaae:	487d      	ldr	r0, [pc, #500]	; (aca4 <_GLOBAL__sub_I_sound0+0x434>)
    aab0:	f7f7 fe58 	bl	2764 <AudioEffectEnvelope::AudioEffectEnvelope()>
//AudioEffectEnvelope envelope15;  //xy=520,177


AudioMixer4 mixer1;  //xy=736,230
    aab4:	487c      	ldr	r0, [pc, #496]	; (aca8 <_GLOBAL__sub_I_sound0+0x438>)
    aab6:	f7f7 fecf 	bl	2858 <AudioMixer4::AudioMixer4()>
AudioMixer4 mixer2;  //xy=736,230
    aaba:	487c      	ldr	r0, [pc, #496]	; (acac <_GLOBAL__sub_I_sound0+0x43c>)
    aabc:	f7f7 fecc 	bl	2858 <AudioMixer4::AudioMixer4()>
AudioMixer4 mixer3;  //xy=736,230
    aac0:	487b      	ldr	r0, [pc, #492]	; (acb0 <_GLOBAL__sub_I_sound0+0x440>)
    aac2:	f7f7 fec9 	bl	2858 <AudioMixer4::AudioMixer4()>
AudioMixer4 mixer4;  //xy=736,230
    aac6:	487b      	ldr	r0, [pc, #492]	; (acb4 <_GLOBAL__sub_I_sound0+0x444>)
    aac8:	f7f7 fec6 	bl	2858 <AudioMixer4::AudioMixer4()>

AudioMixer4 mixer_end;  //xy=736,230
    aacc:	487a      	ldr	r0, [pc, #488]	; (acb8 <_GLOBAL__sub_I_sound0+0x448>)
    aace:	f7f7 fec3 	bl	2858 <AudioMixer4::AudioMixer4()>
		num_inputs(ninput), inputQueue(iqueue) {
    aad2:	4a7a      	ldr	r2, [pc, #488]	; (acbc <_GLOBAL__sub_I_sound0+0x44c>)
    aad4:	4b7a      	ldr	r3, [pc, #488]	; (acc0 <_GLOBAL__sub_I_sound0+0x450>)
    aad6:	6013      	str	r3, [r2, #0]
    aad8:	2302      	movs	r3, #2
    aada:	7253      	strb	r3, [r2, #9]
    aadc:	f102 0318 	add.w	r3, r2, #24
    aae0:	6113      	str	r3, [r2, #16]
			active = false;
    aae2:	2300      	movs	r3, #0
    aae4:	7213      	strb	r3, [r2, #8]
			destination_list = NULL;
    aae6:	60d3      	str	r3, [r2, #12]
				inputQueue[i] = NULL;
    aae8:	4618      	mov	r0, r3
    aaea:	6911      	ldr	r1, [r2, #16]
    aaec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			for (int i=0; i < num_inputs; i++) {
    aaf0:	3301      	adds	r3, #1
    aaf2:	7a51      	ldrb	r1, [r2, #9]
    aaf4:	428b      	cmp	r3, r1
    aaf6:	dbf8      	blt.n	aaea <_GLOBAL__sub_I_sound0+0x27a>
			if (first_update == NULL) {
    aaf8:	4b72      	ldr	r3, [pc, #456]	; (acc4 <_GLOBAL__sub_I_sound0+0x454>)
    aafa:	681b      	ldr	r3, [r3, #0]
    aafc:	2b00      	cmp	r3, #0
    aafe:	f000 85cc 	beq.w	b69a <_GLOBAL__sub_I_sound0+0xe2a>
				for (p=first_update; p->next_update; p = p->next_update) ;
    ab02:	461a      	mov	r2, r3
    ab04:	695b      	ldr	r3, [r3, #20]
    ab06:	2b00      	cmp	r3, #0
    ab08:	d1fb      	bne.n	ab02 <_GLOBAL__sub_I_sound0+0x292>
				p->next_update = this;
    ab0a:	4b6c      	ldr	r3, [pc, #432]	; (acbc <_GLOBAL__sub_I_sound0+0x44c>)
    ab0c:	6153      	str	r3, [r2, #20]
			next_update = NULL;
    ab0e:	4f6b      	ldr	r7, [pc, #428]	; (acbc <_GLOBAL__sub_I_sound0+0x44c>)
    ab10:	2400      	movs	r4, #0
    ab12:	617c      	str	r4, [r7, #20]
			cpu_cycles = 0;
    ab14:	80bc      	strh	r4, [r7, #4]
			cpu_cycles_max = 0;
    ab16:	80fc      	strh	r4, [r7, #6]
			numConnections = 0;
    ab18:	72bc      	strb	r4, [r7, #10]
#if !defined(KINETISL)

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
    ab1a:	4b6b      	ldr	r3, [pc, #428]	; (acc8 <_GLOBAL__sub_I_sound0+0x458>)
    ab1c:	603b      	str	r3, [r7, #0]
    ab1e:	4638      	mov	r0, r7
    ab20:	f002 fd80 	bl	d624 <AudioOutputI2S::begin()>
AudioOutputI2S i2s1;    //xy=1082,325

AudioConnection patchCord1_1(sound1, envelope1);
    ab24:	f8df a148 	ldr.w	sl, [pc, #328]	; ac70 <_GLOBAL__sub_I_sound0+0x400>
    ab28:	f8df 81a4 	ldr.w	r8, [pc, #420]	; acd0 <_GLOBAL__sub_I_sound0+0x460>
    ab2c:	4652      	mov	r2, sl
    ab2e:	4932      	ldr	r1, [pc, #200]	; (abf8 <_GLOBAL__sub_I_sound0+0x388>)
    ab30:	4640      	mov	r0, r8
    ab32:	f7f7 fe05 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    ab36:	4d2c      	ldr	r5, [pc, #176]	; (abe8 <_GLOBAL__sub_I_sound0+0x378>)
    ab38:	4e64      	ldr	r6, [pc, #400]	; (accc <_GLOBAL__sub_I_sound0+0x45c>)
    ab3a:	462a      	mov	r2, r5
    ab3c:	4631      	mov	r1, r6
    ab3e:	4640      	mov	r0, r8
    ab40:	f00e fe02 	bl	19748 <__aeabi_atexit>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    ab44:	f8df 818c 	ldr.w	r8, [pc, #396]	; acd4 <_GLOBAL__sub_I_sound0+0x464>
    ab48:	4640      	mov	r0, r8
    ab4a:	f00b f805 	bl	15b58 <AudioConnection::AudioConnection()>
    ab4e:	f8df 90e4 	ldr.w	r9, [pc, #228]	; ac34 <_GLOBAL__sub_I_sound0+0x3c4>
    ab52:	9400      	str	r4, [sp, #0]
    ab54:	464b      	mov	r3, r9
    ab56:	4622      	mov	r2, r4
    ab58:	4651      	mov	r1, sl
    ab5a:	4640      	mov	r0, r8
    ab5c:	f00b f884 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord1_2(envelope1, 0, filter1, 0);
    ab60:	462a      	mov	r2, r5
    ab62:	4631      	mov	r1, r6
    ab64:	4640      	mov	r0, r8
    ab66:	f00e fdef 	bl	19748 <__aeabi_atexit>
    ab6a:	f8df 816c 	ldr.w	r8, [pc, #364]	; acd8 <_GLOBAL__sub_I_sound0+0x468>
    ab6e:	4640      	mov	r0, r8
    ab70:	f00a fff2 	bl	15b58 <AudioConnection::AudioConnection()>
    ab74:	9400      	str	r4, [sp, #0]
    ab76:	4b4c      	ldr	r3, [pc, #304]	; (aca8 <_GLOBAL__sub_I_sound0+0x438>)
    ab78:	4622      	mov	r2, r4
    ab7a:	4649      	mov	r1, r9
    ab7c:	4640      	mov	r0, r8
    ab7e:	f00b f873 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord1_3(filter1, 0, mixer1, 0);
    ab82:	462a      	mov	r2, r5
    ab84:	4631      	mov	r1, r6
    ab86:	4640      	mov	r0, r8
    ab88:	f00e fdde 	bl	19748 <__aeabi_atexit>


AudioConnection patchCord2_1(sound2, envelope2);
    ab8c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; ac74 <_GLOBAL__sub_I_sound0+0x404>
    ab90:	f8df 8148 	ldr.w	r8, [pc, #328]	; acdc <_GLOBAL__sub_I_sound0+0x46c>
    ab94:	4652      	mov	r2, sl
    ab96:	4919      	ldr	r1, [pc, #100]	; (abfc <_GLOBAL__sub_I_sound0+0x38c>)
    ab98:	4640      	mov	r0, r8
    ab9a:	f7f7 fdd1 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    ab9e:	462a      	mov	r2, r5
    aba0:	4631      	mov	r1, r6
    aba2:	4640      	mov	r0, r8
    aba4:	f00e fdd0 	bl	19748 <__aeabi_atexit>
    aba8:	f8df 8134 	ldr.w	r8, [pc, #308]	; ace0 <_GLOBAL__sub_I_sound0+0x470>
    abac:	4640      	mov	r0, r8
    abae:	e099      	b.n	ace4 <_GLOBAL__sub_I_sound0+0x474>
    abb0:	20006ca0 	.word	0x20006ca0
    abb4:	20000908 	.word	0x20000908
    abb8:	20000918 	.word	0x20000918
    abbc:	20000928 	.word	0x20000928
    abc0:	20000938 	.word	0x20000938
    abc4:	20000948 	.word	0x20000948
    abc8:	20000958 	.word	0x20000958
    abcc:	20000968 	.word	0x20000968
    abd0:	20000978 	.word	0x20000978
    abd4:	20000988 	.word	0x20000988
    abd8:	20000998 	.word	0x20000998
    abdc:	200009a8 	.word	0x200009a8
    abe0:	200009b8 	.word	0x200009b8
    abe4:	200009c8 	.word	0x200009c8
    abe8:	20005258 	.word	0x20005258
    abec:	00000351 	.word	0x00000351
    abf0:	200085d8 	.word	0x200085d8
    abf4:	00000279 	.word	0x00000279
    abf8:	200085f4 	.word	0x200085f4
    abfc:	20008984 	.word	0x20008984
    ac00:	200089a0 	.word	0x200089a0
    ac04:	200089bc 	.word	0x200089bc
    ac08:	200089d8 	.word	0x200089d8
    ac0c:	200089f4 	.word	0x200089f4
    ac10:	20008a10 	.word	0x20008a10
    ac14:	20008a2c 	.word	0x20008a2c
    ac18:	20008a48 	.word	0x20008a48
    ac1c:	20008610 	.word	0x20008610
    ac20:	2000862c 	.word	0x2000862c
    ac24:	20008648 	.word	0x20008648
    ac28:	20008664 	.word	0x20008664
    ac2c:	200087f4 	.word	0x200087f4
    ac30:	20007750 	.word	0x20007750
    ac34:	2000778c 	.word	0x2000778c
    ac38:	200078f4 	.word	0x200078f4
    ac3c:	20007930 	.word	0x20007930
    ac40:	2000796c 	.word	0x2000796c
    ac44:	200079a8 	.word	0x200079a8
    ac48:	200079e4 	.word	0x200079e4
    ac4c:	20007a20 	.word	0x20007a20
    ac50:	20007a5c 	.word	0x20007a5c
    ac54:	20007a98 	.word	0x20007a98
    ac58:	200077c8 	.word	0x200077c8
    ac5c:	20007804 	.word	0x20007804
    ac60:	20007840 	.word	0x20007840
    ac64:	2000787c 	.word	0x2000787c
    ac68:	200078b8 	.word	0x200078b8
    ac6c:	200073f4 	.word	0x200073f4
    ac70:	2000742c 	.word	0x2000742c
    ac74:	2000757c 	.word	0x2000757c
    ac78:	200075b4 	.word	0x200075b4
    ac7c:	200075ec 	.word	0x200075ec
    ac80:	20007624 	.word	0x20007624
    ac84:	2000765c 	.word	0x2000765c
    ac88:	20007694 	.word	0x20007694
    ac8c:	200076cc 	.word	0x200076cc
    ac90:	20007704 	.word	0x20007704
    ac94:	20007464 	.word	0x20007464
    ac98:	2000749c 	.word	0x2000749c
    ac9c:	200074d4 	.word	0x200074d4
    aca0:	2000750c 	.word	0x2000750c
    aca4:	20007544 	.word	0x20007544
    aca8:	20007e30 	.word	0x20007e30
    acac:	20007e68 	.word	0x20007e68
    acb0:	20007ea0 	.word	0x20007ea0
    acb4:	20007ed8 	.word	0x20007ed8
    acb8:	20007f10 	.word	0x20007f10
    acbc:	20007ae0 	.word	0x20007ae0
    acc0:	20002590 	.word	0x20002590
    acc4:	20006d60 	.word	0x20006d60
    acc8:	2000259c 	.word	0x2000259c
    accc:	00015d29 	.word	0x00015d29
    acd0:	20008240 	.word	0x20008240
    acd4:	20008254 	.word	0x20008254
    acd8:	20008268 	.word	0x20008268
    acdc:	2000827c 	.word	0x2000827c
    ace0:	20008290 	.word	0x20008290
    ace4:	f00a ff38 	bl	15b58 <AudioConnection::AudioConnection()>
    ace8:	f8df 9408 	ldr.w	r9, [pc, #1032]	; b0f4 <_GLOBAL__sub_I_sound0+0x884>
    acec:	9400      	str	r4, [sp, #0]
    acee:	464b      	mov	r3, r9
    acf0:	4622      	mov	r2, r4
    acf2:	4651      	mov	r1, sl
    acf4:	4640      	mov	r0, r8
    acf6:	f00a ffb7 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord2_2(envelope2, 0, filter2, 0);
    acfa:	462a      	mov	r2, r5
    acfc:	4631      	mov	r1, r6
    acfe:	4640      	mov	r0, r8
    ad00:	f00e fd22 	bl	19748 <__aeabi_atexit>
    ad04:	f8df 83f0 	ldr.w	r8, [pc, #1008]	; b0f8 <_GLOBAL__sub_I_sound0+0x888>
    ad08:	4640      	mov	r0, r8
    ad0a:	f00a ff25 	bl	15b58 <AudioConnection::AudioConnection()>
    ad0e:	f04f 0b01 	mov.w	fp, #1
    ad12:	f8cd b000 	str.w	fp, [sp]
    ad16:	4beb      	ldr	r3, [pc, #940]	; (b0c4 <_GLOBAL__sub_I_sound0+0x854>)
    ad18:	4622      	mov	r2, r4
    ad1a:	4649      	mov	r1, r9
    ad1c:	4640      	mov	r0, r8
    ad1e:	f00a ffa3 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord2_3(filter2, 0, mixer1, 1);
    ad22:	462a      	mov	r2, r5
    ad24:	4631      	mov	r1, r6
    ad26:	4640      	mov	r0, r8
    ad28:	f00e fd0e 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord3_1(sound3, envelope3);
    ad2c:	f8df a3cc 	ldr.w	sl, [pc, #972]	; b0fc <_GLOBAL__sub_I_sound0+0x88c>
    ad30:	f8df 83cc 	ldr.w	r8, [pc, #972]	; b100 <_GLOBAL__sub_I_sound0+0x890>
    ad34:	4652      	mov	r2, sl
    ad36:	49e4      	ldr	r1, [pc, #912]	; (b0c8 <_GLOBAL__sub_I_sound0+0x858>)
    ad38:	4640      	mov	r0, r8
    ad3a:	f7f7 fd01 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    ad3e:	462a      	mov	r2, r5
    ad40:	4631      	mov	r1, r6
    ad42:	4640      	mov	r0, r8
    ad44:	f00e fd00 	bl	19748 <__aeabi_atexit>
    ad48:	f8df 83b8 	ldr.w	r8, [pc, #952]	; b104 <_GLOBAL__sub_I_sound0+0x894>
    ad4c:	4640      	mov	r0, r8
    ad4e:	f00a ff03 	bl	15b58 <AudioConnection::AudioConnection()>
    ad52:	f8df 93b4 	ldr.w	r9, [pc, #948]	; b108 <_GLOBAL__sub_I_sound0+0x898>
    ad56:	9400      	str	r4, [sp, #0]
    ad58:	464b      	mov	r3, r9
    ad5a:	4622      	mov	r2, r4
    ad5c:	4651      	mov	r1, sl
    ad5e:	4640      	mov	r0, r8
    ad60:	f00a ff82 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord3_2(envelope3, 0, filter3, 0);
    ad64:	462a      	mov	r2, r5
    ad66:	4631      	mov	r1, r6
    ad68:	4640      	mov	r0, r8
    ad6a:	f00e fced 	bl	19748 <__aeabi_atexit>
    ad6e:	f8df 839c 	ldr.w	r8, [pc, #924]	; b10c <_GLOBAL__sub_I_sound0+0x89c>
    ad72:	4640      	mov	r0, r8
    ad74:	f00a fef0 	bl	15b58 <AudioConnection::AudioConnection()>
    ad78:	2302      	movs	r3, #2
    ad7a:	9300      	str	r3, [sp, #0]
    ad7c:	4bd1      	ldr	r3, [pc, #836]	; (b0c4 <_GLOBAL__sub_I_sound0+0x854>)
    ad7e:	4622      	mov	r2, r4
    ad80:	4649      	mov	r1, r9
    ad82:	4640      	mov	r0, r8
    ad84:	f00a ff70 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord3_3(filter3, 0, mixer1, 2);
    ad88:	462a      	mov	r2, r5
    ad8a:	4631      	mov	r1, r6
    ad8c:	4640      	mov	r0, r8
    ad8e:	f00e fcdb 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord4_1(sound4, envelope4);
    ad92:	f8df a37c 	ldr.w	sl, [pc, #892]	; b110 <_GLOBAL__sub_I_sound0+0x8a0>
    ad96:	f8df 837c 	ldr.w	r8, [pc, #892]	; b114 <_GLOBAL__sub_I_sound0+0x8a4>
    ad9a:	4652      	mov	r2, sl
    ad9c:	49cb      	ldr	r1, [pc, #812]	; (b0cc <_GLOBAL__sub_I_sound0+0x85c>)
    ad9e:	4640      	mov	r0, r8
    ada0:	f7f7 fcce 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    ada4:	462a      	mov	r2, r5
    ada6:	4631      	mov	r1, r6
    ada8:	4640      	mov	r0, r8
    adaa:	f00e fccd 	bl	19748 <__aeabi_atexit>
    adae:	f8df 8368 	ldr.w	r8, [pc, #872]	; b118 <_GLOBAL__sub_I_sound0+0x8a8>
    adb2:	4640      	mov	r0, r8
    adb4:	f00a fed0 	bl	15b58 <AudioConnection::AudioConnection()>
    adb8:	f8df 9360 	ldr.w	r9, [pc, #864]	; b11c <_GLOBAL__sub_I_sound0+0x8ac>
    adbc:	9400      	str	r4, [sp, #0]
    adbe:	464b      	mov	r3, r9
    adc0:	4622      	mov	r2, r4
    adc2:	4651      	mov	r1, sl
    adc4:	4640      	mov	r0, r8
    adc6:	f00a ff4f 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord4_2(envelope4, 0, filter4, 0);
    adca:	462a      	mov	r2, r5
    adcc:	4631      	mov	r1, r6
    adce:	4640      	mov	r0, r8
    add0:	f00e fcba 	bl	19748 <__aeabi_atexit>
    add4:	f8df 8348 	ldr.w	r8, [pc, #840]	; b120 <_GLOBAL__sub_I_sound0+0x8b0>
    add8:	4640      	mov	r0, r8
    adda:	f00a febd 	bl	15b58 <AudioConnection::AudioConnection()>
    adde:	2303      	movs	r3, #3
    ade0:	9300      	str	r3, [sp, #0]
    ade2:	4bb8      	ldr	r3, [pc, #736]	; (b0c4 <_GLOBAL__sub_I_sound0+0x854>)
    ade4:	4622      	mov	r2, r4
    ade6:	4649      	mov	r1, r9
    ade8:	4640      	mov	r0, r8
    adea:	f00a ff3d 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord4_3(filter4, 0, mixer1, 3);
    adee:	462a      	mov	r2, r5
    adf0:	4631      	mov	r1, r6
    adf2:	4640      	mov	r0, r8
    adf4:	f00e fca8 	bl	19748 <__aeabi_atexit>


AudioConnection patchCord5_1(sound5, envelope5);
    adf8:	f8df a328 	ldr.w	sl, [pc, #808]	; b124 <_GLOBAL__sub_I_sound0+0x8b4>
    adfc:	f8df 8328 	ldr.w	r8, [pc, #808]	; b128 <_GLOBAL__sub_I_sound0+0x8b8>
    ae00:	4652      	mov	r2, sl
    ae02:	49b3      	ldr	r1, [pc, #716]	; (b0d0 <_GLOBAL__sub_I_sound0+0x860>)
    ae04:	4640      	mov	r0, r8
    ae06:	f7f7 fc9b 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    ae0a:	462a      	mov	r2, r5
    ae0c:	4631      	mov	r1, r6
    ae0e:	4640      	mov	r0, r8
    ae10:	f00e fc9a 	bl	19748 <__aeabi_atexit>
    ae14:	f8df 8314 	ldr.w	r8, [pc, #788]	; b12c <_GLOBAL__sub_I_sound0+0x8bc>
    ae18:	4640      	mov	r0, r8
    ae1a:	f00a fe9d 	bl	15b58 <AudioConnection::AudioConnection()>
    ae1e:	f8df 9310 	ldr.w	r9, [pc, #784]	; b130 <_GLOBAL__sub_I_sound0+0x8c0>
    ae22:	9400      	str	r4, [sp, #0]
    ae24:	464b      	mov	r3, r9
    ae26:	4622      	mov	r2, r4
    ae28:	4651      	mov	r1, sl
    ae2a:	4640      	mov	r0, r8
    ae2c:	f00a ff1c 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord5_2(envelope5, 0, filter5, 0);
    ae30:	462a      	mov	r2, r5
    ae32:	4631      	mov	r1, r6
    ae34:	4640      	mov	r0, r8
    ae36:	f00e fc87 	bl	19748 <__aeabi_atexit>
    ae3a:	f8df 82f8 	ldr.w	r8, [pc, #760]	; b134 <_GLOBAL__sub_I_sound0+0x8c4>
    ae3e:	4640      	mov	r0, r8
    ae40:	f00a fe8a 	bl	15b58 <AudioConnection::AudioConnection()>
    ae44:	9400      	str	r4, [sp, #0]
    ae46:	4ba3      	ldr	r3, [pc, #652]	; (b0d4 <_GLOBAL__sub_I_sound0+0x864>)
    ae48:	4622      	mov	r2, r4
    ae4a:	4649      	mov	r1, r9
    ae4c:	4640      	mov	r0, r8
    ae4e:	f00a ff0b 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord5_3(filter5, 0, mixer2, 0);
    ae52:	462a      	mov	r2, r5
    ae54:	4631      	mov	r1, r6
    ae56:	4640      	mov	r0, r8
    ae58:	f00e fc76 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord6_1(sound6, envelope6);
    ae5c:	f8df a2d8 	ldr.w	sl, [pc, #728]	; b138 <_GLOBAL__sub_I_sound0+0x8c8>
    ae60:	f8df 82d8 	ldr.w	r8, [pc, #728]	; b13c <_GLOBAL__sub_I_sound0+0x8cc>
    ae64:	4652      	mov	r2, sl
    ae66:	499c      	ldr	r1, [pc, #624]	; (b0d8 <_GLOBAL__sub_I_sound0+0x868>)
    ae68:	4640      	mov	r0, r8
    ae6a:	f7f7 fc69 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    ae6e:	462a      	mov	r2, r5
    ae70:	4631      	mov	r1, r6
    ae72:	4640      	mov	r0, r8
    ae74:	f00e fc68 	bl	19748 <__aeabi_atexit>
    ae78:	f8df 82c4 	ldr.w	r8, [pc, #708]	; b140 <_GLOBAL__sub_I_sound0+0x8d0>
    ae7c:	4640      	mov	r0, r8
    ae7e:	f00a fe6b 	bl	15b58 <AudioConnection::AudioConnection()>
    ae82:	f8df 92c0 	ldr.w	r9, [pc, #704]	; b144 <_GLOBAL__sub_I_sound0+0x8d4>
    ae86:	9400      	str	r4, [sp, #0]
    ae88:	464b      	mov	r3, r9
    ae8a:	4622      	mov	r2, r4
    ae8c:	4651      	mov	r1, sl
    ae8e:	4640      	mov	r0, r8
    ae90:	f00a feea 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord6_2(envelope6, 0, filter6, 0);
    ae94:	462a      	mov	r2, r5
    ae96:	4631      	mov	r1, r6
    ae98:	4640      	mov	r0, r8
    ae9a:	f00e fc55 	bl	19748 <__aeabi_atexit>
    ae9e:	f8df 82a8 	ldr.w	r8, [pc, #680]	; b148 <_GLOBAL__sub_I_sound0+0x8d8>
    aea2:	4640      	mov	r0, r8
    aea4:	f00a fe58 	bl	15b58 <AudioConnection::AudioConnection()>
    aea8:	f8cd b000 	str.w	fp, [sp]
    aeac:	4b89      	ldr	r3, [pc, #548]	; (b0d4 <_GLOBAL__sub_I_sound0+0x864>)
    aeae:	4622      	mov	r2, r4
    aeb0:	4649      	mov	r1, r9
    aeb2:	4640      	mov	r0, r8
    aeb4:	f00a fed8 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord6_3(filter6, 0, mixer2, 1);
    aeb8:	462a      	mov	r2, r5
    aeba:	4631      	mov	r1, r6
    aebc:	4640      	mov	r0, r8
    aebe:	f00e fc43 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord7_1(sound7, envelope7);
    aec2:	f8df a288 	ldr.w	sl, [pc, #648]	; b14c <_GLOBAL__sub_I_sound0+0x8dc>
    aec6:	f8df 8288 	ldr.w	r8, [pc, #648]	; b150 <_GLOBAL__sub_I_sound0+0x8e0>
    aeca:	4652      	mov	r2, sl
    aecc:	4983      	ldr	r1, [pc, #524]	; (b0dc <_GLOBAL__sub_I_sound0+0x86c>)
    aece:	4640      	mov	r0, r8
    aed0:	f7f7 fc36 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    aed4:	462a      	mov	r2, r5
    aed6:	4631      	mov	r1, r6
    aed8:	4640      	mov	r0, r8
    aeda:	f00e fc35 	bl	19748 <__aeabi_atexit>
    aede:	f8df 8274 	ldr.w	r8, [pc, #628]	; b154 <_GLOBAL__sub_I_sound0+0x8e4>
    aee2:	4640      	mov	r0, r8
    aee4:	f00a fe38 	bl	15b58 <AudioConnection::AudioConnection()>
    aee8:	f8df 926c 	ldr.w	r9, [pc, #620]	; b158 <_GLOBAL__sub_I_sound0+0x8e8>
    aeec:	9400      	str	r4, [sp, #0]
    aeee:	464b      	mov	r3, r9
    aef0:	4622      	mov	r2, r4
    aef2:	4651      	mov	r1, sl
    aef4:	4640      	mov	r0, r8
    aef6:	f00a feb7 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord7_2(envelope7, 0, filter7, 0);
    aefa:	462a      	mov	r2, r5
    aefc:	4631      	mov	r1, r6
    aefe:	4640      	mov	r0, r8
    af00:	f00e fc22 	bl	19748 <__aeabi_atexit>
    af04:	f8df 8254 	ldr.w	r8, [pc, #596]	; b15c <_GLOBAL__sub_I_sound0+0x8ec>
    af08:	4640      	mov	r0, r8
    af0a:	f00a fe25 	bl	15b58 <AudioConnection::AudioConnection()>
    af0e:	2302      	movs	r3, #2
    af10:	9300      	str	r3, [sp, #0]
    af12:	4b70      	ldr	r3, [pc, #448]	; (b0d4 <_GLOBAL__sub_I_sound0+0x864>)
    af14:	4622      	mov	r2, r4
    af16:	4649      	mov	r1, r9
    af18:	4640      	mov	r0, r8
    af1a:	f00a fea5 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord7_3(filter7, 0, mixer2, 2);
    af1e:	462a      	mov	r2, r5
    af20:	4631      	mov	r1, r6
    af22:	4640      	mov	r0, r8
    af24:	f00e fc10 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord8_1(sound8, envelope8);
    af28:	f8df a234 	ldr.w	sl, [pc, #564]	; b160 <_GLOBAL__sub_I_sound0+0x8f0>
    af2c:	f8df 8234 	ldr.w	r8, [pc, #564]	; b164 <_GLOBAL__sub_I_sound0+0x8f4>
    af30:	4652      	mov	r2, sl
    af32:	496b      	ldr	r1, [pc, #428]	; (b0e0 <_GLOBAL__sub_I_sound0+0x870>)
    af34:	4640      	mov	r0, r8
    af36:	f7f7 fc03 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    af3a:	462a      	mov	r2, r5
    af3c:	4631      	mov	r1, r6
    af3e:	4640      	mov	r0, r8
    af40:	f00e fc02 	bl	19748 <__aeabi_atexit>
    af44:	f8df 8220 	ldr.w	r8, [pc, #544]	; b168 <_GLOBAL__sub_I_sound0+0x8f8>
    af48:	4640      	mov	r0, r8
    af4a:	f00a fe05 	bl	15b58 <AudioConnection::AudioConnection()>
    af4e:	f8df 921c 	ldr.w	r9, [pc, #540]	; b16c <_GLOBAL__sub_I_sound0+0x8fc>
    af52:	9400      	str	r4, [sp, #0]
    af54:	464b      	mov	r3, r9
    af56:	4622      	mov	r2, r4
    af58:	4651      	mov	r1, sl
    af5a:	4640      	mov	r0, r8
    af5c:	f00a fe84 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord8_2(envelope8, 0, filter8, 0);
    af60:	462a      	mov	r2, r5
    af62:	4631      	mov	r1, r6
    af64:	4640      	mov	r0, r8
    af66:	f00e fbef 	bl	19748 <__aeabi_atexit>
    af6a:	f8df 8204 	ldr.w	r8, [pc, #516]	; b170 <_GLOBAL__sub_I_sound0+0x900>
    af6e:	4640      	mov	r0, r8
    af70:	f00a fdf2 	bl	15b58 <AudioConnection::AudioConnection()>
    af74:	2303      	movs	r3, #3
    af76:	9300      	str	r3, [sp, #0]
    af78:	4b56      	ldr	r3, [pc, #344]	; (b0d4 <_GLOBAL__sub_I_sound0+0x864>)
    af7a:	4622      	mov	r2, r4
    af7c:	4649      	mov	r1, r9
    af7e:	4640      	mov	r0, r8
    af80:	f00a fe72 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord8_3(filter8, 0, mixer2, 3);
    af84:	462a      	mov	r2, r5
    af86:	4631      	mov	r1, r6
    af88:	4640      	mov	r0, r8
    af8a:	f00e fbdd 	bl	19748 <__aeabi_atexit>


AudioConnection patchCord9_1(sound9, envelope9);
    af8e:	f8df a1e4 	ldr.w	sl, [pc, #484]	; b174 <_GLOBAL__sub_I_sound0+0x904>
    af92:	f8df 81e4 	ldr.w	r8, [pc, #484]	; b178 <_GLOBAL__sub_I_sound0+0x908>
    af96:	4652      	mov	r2, sl
    af98:	4952      	ldr	r1, [pc, #328]	; (b0e4 <_GLOBAL__sub_I_sound0+0x874>)
    af9a:	4640      	mov	r0, r8
    af9c:	f7f7 fbd0 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    afa0:	462a      	mov	r2, r5
    afa2:	4631      	mov	r1, r6
    afa4:	4640      	mov	r0, r8
    afa6:	f00e fbcf 	bl	19748 <__aeabi_atexit>
    afaa:	f8df 81d0 	ldr.w	r8, [pc, #464]	; b17c <_GLOBAL__sub_I_sound0+0x90c>
    afae:	4640      	mov	r0, r8
    afb0:	f00a fdd2 	bl	15b58 <AudioConnection::AudioConnection()>
    afb4:	f8df 91c8 	ldr.w	r9, [pc, #456]	; b180 <_GLOBAL__sub_I_sound0+0x910>
    afb8:	9400      	str	r4, [sp, #0]
    afba:	464b      	mov	r3, r9
    afbc:	4622      	mov	r2, r4
    afbe:	4651      	mov	r1, sl
    afc0:	4640      	mov	r0, r8
    afc2:	f00a fe51 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord9_2(envelope9, 0, filter9, 0);
    afc6:	462a      	mov	r2, r5
    afc8:	4631      	mov	r1, r6
    afca:	4640      	mov	r0, r8
    afcc:	f00e fbbc 	bl	19748 <__aeabi_atexit>
    afd0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; b184 <_GLOBAL__sub_I_sound0+0x914>
    afd4:	4640      	mov	r0, r8
    afd6:	f00a fdbf 	bl	15b58 <AudioConnection::AudioConnection()>
    afda:	9400      	str	r4, [sp, #0]
    afdc:	4b42      	ldr	r3, [pc, #264]	; (b0e8 <_GLOBAL__sub_I_sound0+0x878>)
    afde:	4622      	mov	r2, r4
    afe0:	4649      	mov	r1, r9
    afe2:	4640      	mov	r0, r8
    afe4:	f00a fe40 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord9_3(filter9, 0, mixer3, 0);
    afe8:	462a      	mov	r2, r5
    afea:	4631      	mov	r1, r6
    afec:	4640      	mov	r0, r8
    afee:	f00e fbab 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord10_1(sound10, envelope10);
    aff2:	f8df a194 	ldr.w	sl, [pc, #404]	; b188 <_GLOBAL__sub_I_sound0+0x918>
    aff6:	f8df 8194 	ldr.w	r8, [pc, #404]	; b18c <_GLOBAL__sub_I_sound0+0x91c>
    affa:	4652      	mov	r2, sl
    affc:	493b      	ldr	r1, [pc, #236]	; (b0ec <_GLOBAL__sub_I_sound0+0x87c>)
    affe:	4640      	mov	r0, r8
    b000:	f7f7 fb9e 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    b004:	462a      	mov	r2, r5
    b006:	4631      	mov	r1, r6
    b008:	4640      	mov	r0, r8
    b00a:	f00e fb9d 	bl	19748 <__aeabi_atexit>
    b00e:	f8df 8180 	ldr.w	r8, [pc, #384]	; b190 <_GLOBAL__sub_I_sound0+0x920>
    b012:	4640      	mov	r0, r8
    b014:	f00a fda0 	bl	15b58 <AudioConnection::AudioConnection()>
    b018:	f8df 9178 	ldr.w	r9, [pc, #376]	; b194 <_GLOBAL__sub_I_sound0+0x924>
    b01c:	9400      	str	r4, [sp, #0]
    b01e:	464b      	mov	r3, r9
    b020:	4622      	mov	r2, r4
    b022:	4651      	mov	r1, sl
    b024:	4640      	mov	r0, r8
    b026:	f00a fe1f 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord10_2(envelope10, 0, filter10, 0);
    b02a:	462a      	mov	r2, r5
    b02c:	4631      	mov	r1, r6
    b02e:	4640      	mov	r0, r8
    b030:	f00e fb8a 	bl	19748 <__aeabi_atexit>
    b034:	f8df 8160 	ldr.w	r8, [pc, #352]	; b198 <_GLOBAL__sub_I_sound0+0x928>
    b038:	4640      	mov	r0, r8
    b03a:	f00a fd8d 	bl	15b58 <AudioConnection::AudioConnection()>
    b03e:	f8cd b000 	str.w	fp, [sp]
    b042:	4b29      	ldr	r3, [pc, #164]	; (b0e8 <_GLOBAL__sub_I_sound0+0x878>)
    b044:	4622      	mov	r2, r4
    b046:	4649      	mov	r1, r9
    b048:	4640      	mov	r0, r8
    b04a:	f00a fe0d 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord10_3(filter10, 0, mixer3, 1);
    b04e:	462a      	mov	r2, r5
    b050:	4631      	mov	r1, r6
    b052:	4640      	mov	r0, r8
    b054:	f00e fb78 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord11_1(sound11, envelope11);
    b058:	f8df a140 	ldr.w	sl, [pc, #320]	; b19c <_GLOBAL__sub_I_sound0+0x92c>
    b05c:	f8df 8140 	ldr.w	r8, [pc, #320]	; b1a0 <_GLOBAL__sub_I_sound0+0x930>
    b060:	4652      	mov	r2, sl
    b062:	4923      	ldr	r1, [pc, #140]	; (b0f0 <_GLOBAL__sub_I_sound0+0x880>)
    b064:	4640      	mov	r0, r8
    b066:	f7f7 fb6b 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    b06a:	462a      	mov	r2, r5
    b06c:	4631      	mov	r1, r6
    b06e:	4640      	mov	r0, r8
    b070:	f00e fb6a 	bl	19748 <__aeabi_atexit>
    b074:	f8df 812c 	ldr.w	r8, [pc, #300]	; b1a4 <_GLOBAL__sub_I_sound0+0x934>
    b078:	4640      	mov	r0, r8
    b07a:	f00a fd6d 	bl	15b58 <AudioConnection::AudioConnection()>
    b07e:	f8df 9128 	ldr.w	r9, [pc, #296]	; b1a8 <_GLOBAL__sub_I_sound0+0x938>
    b082:	9400      	str	r4, [sp, #0]
    b084:	464b      	mov	r3, r9
    b086:	4622      	mov	r2, r4
    b088:	4651      	mov	r1, sl
    b08a:	4640      	mov	r0, r8
    b08c:	f00a fdec 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord11_2(envelope11, 0, filter11, 0);
    b090:	462a      	mov	r2, r5
    b092:	4631      	mov	r1, r6
    b094:	4640      	mov	r0, r8
    b096:	f00e fb57 	bl	19748 <__aeabi_atexit>
    b09a:	f8df 8110 	ldr.w	r8, [pc, #272]	; b1ac <_GLOBAL__sub_I_sound0+0x93c>
    b09e:	4640      	mov	r0, r8
    b0a0:	f00a fd5a 	bl	15b58 <AudioConnection::AudioConnection()>
    b0a4:	2302      	movs	r3, #2
    b0a6:	9300      	str	r3, [sp, #0]
    b0a8:	4b0f      	ldr	r3, [pc, #60]	; (b0e8 <_GLOBAL__sub_I_sound0+0x878>)
    b0aa:	4622      	mov	r2, r4
    b0ac:	4649      	mov	r1, r9
    b0ae:	4640      	mov	r0, r8
    b0b0:	f00a fdda 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord11_3(filter11, 0, mixer3, 2);
    b0b4:	462a      	mov	r2, r5
    b0b6:	4631      	mov	r1, r6
    b0b8:	4640      	mov	r0, r8
    b0ba:	f00e fb45 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord12_1(sound12, envelope12);
    b0be:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b1b0 <_GLOBAL__sub_I_sound0+0x940>
    b0c2:	e077      	b.n	b1b4 <_GLOBAL__sub_I_sound0+0x944>
    b0c4:	20007e30 	.word	0x20007e30
    b0c8:	200089a0 	.word	0x200089a0
    b0cc:	200089bc 	.word	0x200089bc
    b0d0:	200089d8 	.word	0x200089d8
    b0d4:	20007e68 	.word	0x20007e68
    b0d8:	200089f4 	.word	0x200089f4
    b0dc:	20008a10 	.word	0x20008a10
    b0e0:	20008a2c 	.word	0x20008a2c
    b0e4:	20008a48 	.word	0x20008a48
    b0e8:	20007ea0 	.word	0x20007ea0
    b0ec:	20008610 	.word	0x20008610
    b0f0:	2000862c 	.word	0x2000862c
    b0f4:	200078f4 	.word	0x200078f4
    b0f8:	200082a4 	.word	0x200082a4
    b0fc:	200075b4 	.word	0x200075b4
    b100:	200082b8 	.word	0x200082b8
    b104:	200082cc 	.word	0x200082cc
    b108:	20007930 	.word	0x20007930
    b10c:	200082e0 	.word	0x200082e0
    b110:	200075ec 	.word	0x200075ec
    b114:	200082f4 	.word	0x200082f4
    b118:	20008308 	.word	0x20008308
    b11c:	2000796c 	.word	0x2000796c
    b120:	2000831c 	.word	0x2000831c
    b124:	20007624 	.word	0x20007624
    b128:	20008330 	.word	0x20008330
    b12c:	20008344 	.word	0x20008344
    b130:	200079a8 	.word	0x200079a8
    b134:	20008358 	.word	0x20008358
    b138:	2000765c 	.word	0x2000765c
    b13c:	2000836c 	.word	0x2000836c
    b140:	20008380 	.word	0x20008380
    b144:	200079e4 	.word	0x200079e4
    b148:	20008394 	.word	0x20008394
    b14c:	20007694 	.word	0x20007694
    b150:	200083a8 	.word	0x200083a8
    b154:	200083bc 	.word	0x200083bc
    b158:	20007a20 	.word	0x20007a20
    b15c:	200083d0 	.word	0x200083d0
    b160:	200076cc 	.word	0x200076cc
    b164:	200083e4 	.word	0x200083e4
    b168:	200083f8 	.word	0x200083f8
    b16c:	20007a5c 	.word	0x20007a5c
    b170:	2000840c 	.word	0x2000840c
    b174:	20007704 	.word	0x20007704
    b178:	20008420 	.word	0x20008420
    b17c:	20008434 	.word	0x20008434
    b180:	20007a98 	.word	0x20007a98
    b184:	20008448 	.word	0x20008448
    b188:	20007464 	.word	0x20007464
    b18c:	20008114 	.word	0x20008114
    b190:	20008128 	.word	0x20008128
    b194:	200077c8 	.word	0x200077c8
    b198:	2000813c 	.word	0x2000813c
    b19c:	2000749c 	.word	0x2000749c
    b1a0:	20008150 	.word	0x20008150
    b1a4:	20008164 	.word	0x20008164
    b1a8:	20007804 	.word	0x20007804
    b1ac:	20008178 	.word	0x20008178
    b1b0:	200074d4 	.word	0x200074d4
    b1b4:	f8df 841c 	ldr.w	r8, [pc, #1052]	; b5d4 <_GLOBAL__sub_I_sound0+0xd64>
    b1b8:	4652      	mov	r2, sl
    b1ba:	49e2      	ldr	r1, [pc, #904]	; (b544 <_GLOBAL__sub_I_sound0+0xcd4>)
    b1bc:	4640      	mov	r0, r8
    b1be:	f7f7 fabf 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    b1c2:	462a      	mov	r2, r5
    b1c4:	4631      	mov	r1, r6
    b1c6:	4640      	mov	r0, r8
    b1c8:	f00e fabe 	bl	19748 <__aeabi_atexit>
    b1cc:	f8df 8408 	ldr.w	r8, [pc, #1032]	; b5d8 <_GLOBAL__sub_I_sound0+0xd68>
    b1d0:	4640      	mov	r0, r8
    b1d2:	f00a fcc1 	bl	15b58 <AudioConnection::AudioConnection()>
    b1d6:	f8df 9404 	ldr.w	r9, [pc, #1028]	; b5dc <_GLOBAL__sub_I_sound0+0xd6c>
    b1da:	9400      	str	r4, [sp, #0]
    b1dc:	464b      	mov	r3, r9
    b1de:	4622      	mov	r2, r4
    b1e0:	4651      	mov	r1, sl
    b1e2:	4640      	mov	r0, r8
    b1e4:	f00a fd40 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord12_2(envelope12, 0, filter12, 0);
    b1e8:	462a      	mov	r2, r5
    b1ea:	4631      	mov	r1, r6
    b1ec:	4640      	mov	r0, r8
    b1ee:	f00e faab 	bl	19748 <__aeabi_atexit>
    b1f2:	f8df 83ec 	ldr.w	r8, [pc, #1004]	; b5e0 <_GLOBAL__sub_I_sound0+0xd70>
    b1f6:	4640      	mov	r0, r8
    b1f8:	f00a fcae 	bl	15b58 <AudioConnection::AudioConnection()>
    b1fc:	2303      	movs	r3, #3
    b1fe:	9300      	str	r3, [sp, #0]
    b200:	4bd1      	ldr	r3, [pc, #836]	; (b548 <_GLOBAL__sub_I_sound0+0xcd8>)
    b202:	4622      	mov	r2, r4
    b204:	4649      	mov	r1, r9
    b206:	4640      	mov	r0, r8
    b208:	f00a fd2e 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord12_3(filter12, 0, mixer3, 3);
    b20c:	462a      	mov	r2, r5
    b20e:	4631      	mov	r1, r6
    b210:	4640      	mov	r0, r8
    b212:	f00e fa99 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord13_1(sound13, envelope13);
    b216:	f8df 93cc 	ldr.w	r9, [pc, #972]	; b5e4 <_GLOBAL__sub_I_sound0+0xd74>
    b21a:	f8df 83cc 	ldr.w	r8, [pc, #972]	; b5e8 <_GLOBAL__sub_I_sound0+0xd78>
    b21e:	464a      	mov	r2, r9
    b220:	49ca      	ldr	r1, [pc, #808]	; (b54c <_GLOBAL__sub_I_sound0+0xcdc>)
    b222:	4640      	mov	r0, r8
    b224:	f7f7 fa8c 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    b228:	462a      	mov	r2, r5
    b22a:	4631      	mov	r1, r6
    b22c:	4640      	mov	r0, r8
    b22e:	f00e fa8b 	bl	19748 <__aeabi_atexit>
    b232:	f8df 83b8 	ldr.w	r8, [pc, #952]	; b5ec <_GLOBAL__sub_I_sound0+0xd7c>
    b236:	4640      	mov	r0, r8
    b238:	f00a fc8e 	bl	15b58 <AudioConnection::AudioConnection()>
    b23c:	f8df a3b0 	ldr.w	sl, [pc, #944]	; b5f0 <_GLOBAL__sub_I_sound0+0xd80>
    b240:	9400      	str	r4, [sp, #0]
    b242:	4653      	mov	r3, sl
    b244:	4622      	mov	r2, r4
    b246:	4649      	mov	r1, r9
    b248:	4640      	mov	r0, r8
    b24a:	f00a fd0d 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord13_2(envelope13, 0, filter13, 0);
    b24e:	462a      	mov	r2, r5
    b250:	4631      	mov	r1, r6
    b252:	4640      	mov	r0, r8
    b254:	f00e fa78 	bl	19748 <__aeabi_atexit>
    b258:	f8df 9398 	ldr.w	r9, [pc, #920]	; b5f4 <_GLOBAL__sub_I_sound0+0xd84>
    b25c:	4648      	mov	r0, r9
    b25e:	f00a fc7b 	bl	15b58 <AudioConnection::AudioConnection()>
    b262:	f8df 8394 	ldr.w	r8, [pc, #916]	; b5f8 <_GLOBAL__sub_I_sound0+0xd88>
    b266:	9400      	str	r4, [sp, #0]
    b268:	4643      	mov	r3, r8
    b26a:	4622      	mov	r2, r4
    b26c:	4651      	mov	r1, sl
    b26e:	4648      	mov	r0, r9
    b270:	f00a fcfa 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord13_3(filter13, 0, mixer4, 0);
    b274:	462a      	mov	r2, r5
    b276:	4631      	mov	r1, r6
    b278:	4648      	mov	r0, r9
    b27a:	f00e fa65 	bl	19748 <__aeabi_atexit>

AudioConnection patchCord14_1(sound14, envelope14);
    b27e:	f8df 937c 	ldr.w	r9, [pc, #892]	; b5fc <_GLOBAL__sub_I_sound0+0xd8c>
    b282:	4ab3      	ldr	r2, [pc, #716]	; (b550 <_GLOBAL__sub_I_sound0+0xce0>)
    b284:	49b3      	ldr	r1, [pc, #716]	; (b554 <_GLOBAL__sub_I_sound0+0xce4>)
    b286:	4648      	mov	r0, r9
    b288:	f7f7 fa5a 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    b28c:	462a      	mov	r2, r5
    b28e:	4631      	mov	r1, r6
    b290:	4648      	mov	r0, r9
    b292:	f00e fa59 	bl	19748 <__aeabi_atexit>
    b296:	f8df 9368 	ldr.w	r9, [pc, #872]	; b600 <_GLOBAL__sub_I_sound0+0xd90>
    b29a:	4648      	mov	r0, r9
    b29c:	f00a fc5c 	bl	15b58 <AudioConnection::AudioConnection()>
    b2a0:	f8df a360 	ldr.w	sl, [pc, #864]	; b604 <_GLOBAL__sub_I_sound0+0xd94>
    b2a4:	9400      	str	r4, [sp, #0]
    b2a6:	4653      	mov	r3, sl
    b2a8:	4622      	mov	r2, r4
    b2aa:	49a9      	ldr	r1, [pc, #676]	; (b550 <_GLOBAL__sub_I_sound0+0xce0>)
    b2ac:	4648      	mov	r0, r9
    b2ae:	f00a fcdb 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord14_2(envelope14, 0, filter14, 0);
    b2b2:	462a      	mov	r2, r5
    b2b4:	4631      	mov	r1, r6
    b2b6:	4648      	mov	r0, r9
    b2b8:	f00e fa46 	bl	19748 <__aeabi_atexit>
    b2bc:	f8df 9348 	ldr.w	r9, [pc, #840]	; b608 <_GLOBAL__sub_I_sound0+0xd98>
    b2c0:	4648      	mov	r0, r9
    b2c2:	f00a fc49 	bl	15b58 <AudioConnection::AudioConnection()>
    b2c6:	f8cd b000 	str.w	fp, [sp]
    b2ca:	4643      	mov	r3, r8
    b2cc:	4622      	mov	r2, r4
    b2ce:	4651      	mov	r1, sl
    b2d0:	4648      	mov	r0, r9
    b2d2:	f00a fcc9 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord14_3(filter14, 0, mixer4, 1);
    b2d6:	462a      	mov	r2, r5
    b2d8:	4631      	mov	r1, r6
    b2da:	4648      	mov	r0, r9
    b2dc:	f00e fa34 	bl	19748 <__aeabi_atexit>
/*
AudioConnection patchCord15_1(sound15, envelope15);
AudioConnection patchCord15_2(envelope15, 0, filter15, 0);
AudioConnection patchCord15_3(filter15, 0, mixer4, 2);*/

AudioConnection patchCord0_1(sound0, envelope0);
    b2e0:	f8df a328 	ldr.w	sl, [pc, #808]	; b60c <_GLOBAL__sub_I_sound0+0xd9c>
    b2e4:	f8df 9328 	ldr.w	r9, [pc, #808]	; b610 <_GLOBAL__sub_I_sound0+0xda0>
    b2e8:	4652      	mov	r2, sl
    b2ea:	499b      	ldr	r1, [pc, #620]	; (b558 <_GLOBAL__sub_I_sound0+0xce8>)
    b2ec:	4648      	mov	r0, r9
    b2ee:	f7f7 fa27 	bl	2740 <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    b2f2:	462a      	mov	r2, r5
    b2f4:	4631      	mov	r1, r6
    b2f6:	4648      	mov	r0, r9
    b2f8:	f00e fa26 	bl	19748 <__aeabi_atexit>
    b2fc:	f8df 9314 	ldr.w	r9, [pc, #788]	; b614 <_GLOBAL__sub_I_sound0+0xda4>
    b300:	4648      	mov	r0, r9
    b302:	f00a fc29 	bl	15b58 <AudioConnection::AudioConnection()>
    b306:	2303      	movs	r3, #3
    b308:	9300      	str	r3, [sp, #0]
    b30a:	4643      	mov	r3, r8
    b30c:	4622      	mov	r2, r4
    b30e:	4651      	mov	r1, sl
    b310:	4648      	mov	r0, r9
    b312:	f00a fca9 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord0_2(envelope0, 0, mixer4, 3);
    b316:	462a      	mov	r2, r5
    b318:	4631      	mov	r1, r6
    b31a:	4648      	mov	r0, r9
    b31c:	f00e fa14 	bl	19748 <__aeabi_atexit>
    b320:	f8df a2f4 	ldr.w	sl, [pc, #756]	; b618 <_GLOBAL__sub_I_sound0+0xda8>
    b324:	4650      	mov	r0, sl
    b326:	f00a fc17 	bl	15b58 <AudioConnection::AudioConnection()>
    b32a:	f8df 92f0 	ldr.w	r9, [pc, #752]	; b61c <_GLOBAL__sub_I_sound0+0xdac>
    b32e:	9400      	str	r4, [sp, #0]
    b330:	464b      	mov	r3, r9
    b332:	4622      	mov	r2, r4
    b334:	4989      	ldr	r1, [pc, #548]	; (b55c <_GLOBAL__sub_I_sound0+0xcec>)
    b336:	4650      	mov	r0, sl
    b338:	f00a fc96 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>

AudioConnection patchCordEnd_1(mixer1, 0, mixer_end, 0);
    b33c:	462a      	mov	r2, r5
    b33e:	4631      	mov	r1, r6
    b340:	4650      	mov	r0, sl
    b342:	f00e fa01 	bl	19748 <__aeabi_atexit>
    b346:	f8df a2d8 	ldr.w	sl, [pc, #728]	; b620 <_GLOBAL__sub_I_sound0+0xdb0>
    b34a:	4650      	mov	r0, sl
    b34c:	f00a fc04 	bl	15b58 <AudioConnection::AudioConnection()>
    b350:	f8cd b000 	str.w	fp, [sp]
    b354:	464b      	mov	r3, r9
    b356:	4622      	mov	r2, r4
    b358:	4981      	ldr	r1, [pc, #516]	; (b560 <_GLOBAL__sub_I_sound0+0xcf0>)
    b35a:	4650      	mov	r0, sl
    b35c:	f00a fc84 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCordEnd_2(mixer2, 0, mixer_end, 1);
    b360:	462a      	mov	r2, r5
    b362:	4631      	mov	r1, r6
    b364:	4650      	mov	r0, sl
    b366:	f00e f9ef 	bl	19748 <__aeabi_atexit>
    b36a:	f8df a2b8 	ldr.w	sl, [pc, #696]	; b624 <_GLOBAL__sub_I_sound0+0xdb4>
    b36e:	4650      	mov	r0, sl
    b370:	f00a fbf2 	bl	15b58 <AudioConnection::AudioConnection()>
    b374:	2302      	movs	r3, #2
    b376:	9300      	str	r3, [sp, #0]
    b378:	464b      	mov	r3, r9
    b37a:	4622      	mov	r2, r4
    b37c:	4972      	ldr	r1, [pc, #456]	; (b548 <_GLOBAL__sub_I_sound0+0xcd8>)
    b37e:	4650      	mov	r0, sl
    b380:	f00a fc72 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCordEnd_3(mixer3, 0, mixer_end, 2);
    b384:	462a      	mov	r2, r5
    b386:	4631      	mov	r1, r6
    b388:	4650      	mov	r0, sl
    b38a:	f00e f9dd 	bl	19748 <__aeabi_atexit>
    b38e:	f8df a298 	ldr.w	sl, [pc, #664]	; b628 <_GLOBAL__sub_I_sound0+0xdb8>
    b392:	4650      	mov	r0, sl
    b394:	f00a fbe0 	bl	15b58 <AudioConnection::AudioConnection()>
    b398:	2303      	movs	r3, #3
    b39a:	9300      	str	r3, [sp, #0]
    b39c:	464b      	mov	r3, r9
    b39e:	4622      	mov	r2, r4
    b3a0:	4641      	mov	r1, r8
    b3a2:	4650      	mov	r0, sl
    b3a4:	f00a fc60 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCordEnd_4(mixer4, 0, mixer_end, 3);
    b3a8:	462a      	mov	r2, r5
    b3aa:	4631      	mov	r1, r6
    b3ac:	4650      	mov	r0, sl
    b3ae:	f00e f9cb 	bl	19748 <__aeabi_atexit>
    b3b2:	f8df 8278 	ldr.w	r8, [pc, #632]	; b62c <_GLOBAL__sub_I_sound0+0xdbc>
    b3b6:	4640      	mov	r0, r8
    b3b8:	f00a fbce 	bl	15b58 <AudioConnection::AudioConnection()>
    b3bc:	9400      	str	r4, [sp, #0]
    b3be:	463b      	mov	r3, r7
    b3c0:	4622      	mov	r2, r4
    b3c2:	4649      	mov	r1, r9
    b3c4:	4640      	mov	r0, r8
    b3c6:	f00a fc4f 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>


AudioConnection patchCord_end1(mixer_end, 0, i2s1, 0);
    b3ca:	462a      	mov	r2, r5
    b3cc:	4631      	mov	r1, r6
    b3ce:	4640      	mov	r0, r8
    b3d0:	f00e f9ba 	bl	19748 <__aeabi_atexit>
    b3d4:	f8df 8258 	ldr.w	r8, [pc, #600]	; b630 <_GLOBAL__sub_I_sound0+0xdc0>
    b3d8:	4640      	mov	r0, r8
    b3da:	f00a fbbd 	bl	15b58 <AudioConnection::AudioConnection()>
    b3de:	f8cd b000 	str.w	fp, [sp]
    b3e2:	463b      	mov	r3, r7
    b3e4:	4622      	mov	r2, r4
    b3e6:	4649      	mov	r1, r9
    b3e8:	4640      	mov	r0, r8
    b3ea:	f00a fc3d 	bl	15c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection patchCord_end2(mixer_end, 0, i2s1, 1);
    b3ee:	462a      	mov	r2, r5
    b3f0:	4631      	mov	r1, r6
    b3f2:	4640      	mov	r0, r8
    b3f4:	f00e f9a8 	bl	19748 <__aeabi_atexit>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    b3f8:	4b5a      	ldr	r3, [pc, #360]	; (b564 <_GLOBAL__sub_I_sound0+0xcf4>)
    b3fa:	4a5b      	ldr	r2, [pc, #364]	; (b568 <_GLOBAL__sub_I_sound0+0xcf8>)
    b3fc:	601a      	str	r2, [r3, #0]
    b3fe:	220a      	movs	r2, #10
    b400:	721a      	strb	r2, [r3, #8]
String oldButtonString = "";
    b402:	4e5a      	ldr	r6, [pc, #360]	; (b56c <_GLOBAL__sub_I_sound0+0xcfc>)
    b404:	4f5a      	ldr	r7, [pc, #360]	; (b570 <_GLOBAL__sub_I_sound0+0xd00>)
    b406:	4631      	mov	r1, r6
    b408:	4638      	mov	r0, r7
    b40a:	f00b f9a4 	bl	16756 <String::String(char const*)>
    b40e:	4c59      	ldr	r4, [pc, #356]	; (b574 <_GLOBAL__sub_I_sound0+0xd04>)
    b410:	462a      	mov	r2, r5
    b412:	4621      	mov	r1, r4
    b414:	4638      	mov	r0, r7
    b416:	f00e f997 	bl	19748 <__aeabi_atexit>
String buttonString = "";
    b41a:	4f57      	ldr	r7, [pc, #348]	; (b578 <_GLOBAL__sub_I_sound0+0xd08>)
    b41c:	4631      	mov	r1, r6
    b41e:	4638      	mov	r0, r7
    b420:	f00b f999 	bl	16756 <String::String(char const*)>
    b424:	462a      	mov	r2, r5
    b426:	4621      	mov	r1, r4
    b428:	4638      	mov	r0, r7
    b42a:	f00e f98d 	bl	19748 <__aeabi_atexit>
String oldPos = "";
    b42e:	4f53      	ldr	r7, [pc, #332]	; (b57c <_GLOBAL__sub_I_sound0+0xd0c>)
    b430:	4631      	mov	r1, r6
    b432:	4638      	mov	r0, r7
    b434:	f00b f98f 	bl	16756 <String::String(char const*)>
    b438:	462a      	mov	r2, r5
    b43a:	4621      	mov	r1, r4
    b43c:	4638      	mov	r0, r7
    b43e:	f00e f983 	bl	19748 <__aeabi_atexit>
IntervalTimer playTimer;
    b442:	462a      	mov	r2, r5
    b444:	494e      	ldr	r1, [pc, #312]	; (b580 <_GLOBAL__sub_I_sound0+0xd10>)
    b446:	484f      	ldr	r0, [pc, #316]	; (b584 <_GLOBAL__sub_I_sound0+0xd14>)
    b448:	f00e f97e 	bl	19748 <__aeabi_atexit>
    b44c:	f44f 7380 	mov.w	r3, #256	; 0x100
CRGB leds[NUM_LEDS];
    b450:	3b01      	subs	r3, #1
    b452:	d1fd      	bne.n	b450 <_GLOBAL__sub_I_sound0+0xbe0>
Mode draw = { "DRAW", { 1, 1, 1, 0 }, { maxY, maxPages, maxY, maxfilterResolution }, { 1, 1, 1, maxfilterResolution } };
    b454:	4e4c      	ldr	r6, [pc, #304]	; (b588 <_GLOBAL__sub_I_sound0+0xd18>)
    b456:	494d      	ldr	r1, [pc, #308]	; (b58c <_GLOBAL__sub_I_sound0+0xd1c>)
    b458:	4630      	mov	r0, r6
    b45a:	f00b f97c 	bl	16756 <String::String(char const*)>
    b45e:	4d4c      	ldr	r5, [pc, #304]	; (b590 <_GLOBAL__sub_I_sound0+0xd20>)
    b460:	4c4c      	ldr	r4, [pc, #304]	; (b594 <_GLOBAL__sub_I_sound0+0xd24>)
    b462:	462a      	mov	r2, r5
    b464:	4621      	mov	r1, r4
    b466:	4630      	mov	r0, r6
    b468:	f00e f96e 	bl	19748 <__aeabi_atexit>
Mode singleMode = { "SINGLE", { 1, 1, 1, 0 }, { maxY, maxX, maxY, maxfilterResolution }, { 1, 1, 1, maxfilterResolution } };
    b46c:	4e4a      	ldr	r6, [pc, #296]	; (b598 <_GLOBAL__sub_I_sound0+0xd28>)
    b46e:	494b      	ldr	r1, [pc, #300]	; (b59c <_GLOBAL__sub_I_sound0+0xd2c>)
    b470:	4630      	mov	r0, r6
    b472:	f00b f970 	bl	16756 <String::String(char const*)>
    b476:	462a      	mov	r2, r5
    b478:	4621      	mov	r1, r4
    b47a:	4630      	mov	r0, r6
    b47c:	f00e f964 	bl	19748 <__aeabi_atexit>
Mode volume_bpm = { "VOLUME_BPM", { 1, 0, 40, 1 }, { maxVolume, 0, maxBPM, maxVolume }, { 1, 0, 100, 9 } };
    b480:	4e47      	ldr	r6, [pc, #284]	; (b5a0 <_GLOBAL__sub_I_sound0+0xd30>)
    b482:	4948      	ldr	r1, [pc, #288]	; (b5a4 <_GLOBAL__sub_I_sound0+0xd34>)
    b484:	4630      	mov	r0, r6
    b486:	f00b f966 	bl	16756 <String::String(char const*)>
    b48a:	462a      	mov	r2, r5
    b48c:	4621      	mov	r1, r4
    b48e:	4630      	mov	r0, r6
    b490:	f00e f95a 	bl	19748 <__aeabi_atexit>
Mode noteShift = { "NOTE_SHIFT", { 7, 0, 7, 0 }, { 9, 0, 9, 0 }, { 8, 0, 8, 0 } };
    b494:	4e44      	ldr	r6, [pc, #272]	; (b5a8 <_GLOBAL__sub_I_sound0+0xd38>)
    b496:	4945      	ldr	r1, [pc, #276]	; (b5ac <_GLOBAL__sub_I_sound0+0xd3c>)
    b498:	4630      	mov	r0, r6
    b49a:	f00b f95c 	bl	16756 <String::String(char const*)>
    b49e:	462a      	mov	r2, r5
    b4a0:	4621      	mov	r1, r4
    b4a2:	4630      	mov	r0, r6
    b4a4:	f00e f950 	bl	19748 <__aeabi_atexit>
Mode velocity = { "VELOCITY", { 1, 1, 1, 1 }, { 1, 1, maxY, maxY }, { 1, 1, 10, 10 } };
    b4a8:	4e41      	ldr	r6, [pc, #260]	; (b5b0 <_GLOBAL__sub_I_sound0+0xd40>)
    b4aa:	4942      	ldr	r1, [pc, #264]	; (b5b4 <_GLOBAL__sub_I_sound0+0xd44>)
    b4ac:	4630      	mov	r0, r6
    b4ae:	f00b f952 	bl	16756 <String::String(char const*)>
    b4b2:	462a      	mov	r2, r5
    b4b4:	4621      	mov	r1, r4
    b4b6:	4630      	mov	r0, r6
    b4b8:	f00e f946 	bl	19748 <__aeabi_atexit>
Mode set_Wav = { "SET_WAV", { 0, 1, 1, 0 }, { 999, maxFolders, 999, 999 }, { 0, 0, 1, 999 } };
    b4bc:	4e3e      	ldr	r6, [pc, #248]	; (b5b8 <_GLOBAL__sub_I_sound0+0xd48>)
    b4be:	493f      	ldr	r1, [pc, #252]	; (b5bc <_GLOBAL__sub_I_sound0+0xd4c>)
    b4c0:	4630      	mov	r0, r6
    b4c2:	f00b f948 	bl	16756 <String::String(char const*)>
    b4c6:	462a      	mov	r2, r5
    b4c8:	4621      	mov	r1, r4
    b4ca:	4630      	mov	r0, r6
    b4cc:	f00e f93c 	bl	19748 <__aeabi_atexit>
Mode set_SamplePack = { "SET_SAMPLEPACK", { 1, 1, 1, 1 }, { 1, 1, 99, 99 }, { 1, 1, 1, 1 } };
    b4d0:	4e3b      	ldr	r6, [pc, #236]	; (b5c0 <_GLOBAL__sub_I_sound0+0xd50>)
    b4d2:	493c      	ldr	r1, [pc, #240]	; (b5c4 <_GLOBAL__sub_I_sound0+0xd54>)
    b4d4:	4630      	mov	r0, r6
    b4d6:	f00b f93e 	bl	16756 <String::String(char const*)>
    b4da:	462a      	mov	r2, r5
    b4dc:	4621      	mov	r1, r4
    b4de:	4630      	mov	r0, r6
    b4e0:	f00e f932 	bl	19748 <__aeabi_atexit>
Mode menu = { "MENU", { 1, 1, 1, 1 }, { 1, 1, 12, 12 }, { 1, 1, 1, 1 } };
    b4e4:	4e38      	ldr	r6, [pc, #224]	; (b5c8 <_GLOBAL__sub_I_sound0+0xd58>)
    b4e6:	4939      	ldr	r1, [pc, #228]	; (b5cc <_GLOBAL__sub_I_sound0+0xd5c>)
    b4e8:	4630      	mov	r0, r6
    b4ea:	f00b f934 	bl	16756 <String::String(char const*)>
    b4ee:	462a      	mov	r2, r5
    b4f0:	4621      	mov	r1, r4
    b4f2:	4630      	mov	r0, r6
    b4f4:	f00e f928 	bl	19748 <__aeabi_atexit>
};
    b4f8:	4c35      	ldr	r4, [pc, #212]	; (b5d0 <_GLOBAL__sub_I_sound0+0xd60>)
    b4fa:	2216      	movs	r2, #22
    b4fc:	2105      	movs	r1, #5
    b4fe:	4620      	mov	r0, r4
    b500:	f7f7 fda6 	bl	3050 <Encoder::Encoder(unsigned char, unsigned char)>
    b504:	2202      	movs	r2, #2
    b506:	2104      	movs	r1, #4
    b508:	f104 001c 	add.w	r0, r4, #28
    b50c:	f7f7 fda0 	bl	3050 <Encoder::Encoder(unsigned char, unsigned char)>
    b510:	220e      	movs	r2, #14
    b512:	2109      	movs	r1, #9
    b514:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b518:	f7f7 fd9a 	bl	3050 <Encoder::Encoder(unsigned char, unsigned char)>
    b51c:	2221      	movs	r2, #33	; 0x21
    b51e:	2120      	movs	r1, #32
    b520:	f104 0054 	add.w	r0, r4, #84	; 0x54
    b524:	f7f7 fd94 	bl	3050 <Encoder::Encoder(unsigned char, unsigned char)>
  Switch multiresponseButton1 = Switch(15);  // Left-Knob: (doubleTab: Enter/Exit Single-Sample-Mode)
    b528:	270a      	movs	r7, #10
    b52a:	9703      	str	r7, [sp, #12]
    b52c:	26fa      	movs	r6, #250	; 0xfa
    b52e:	9602      	str	r6, [sp, #8]
    b530:	f44f 7596 	mov.w	r5, #300	; 0x12c
    b534:	9501      	str	r5, [sp, #4]
    b536:	2432      	movs	r4, #50	; 0x32
    b538:	9400      	str	r4, [sp, #0]
    b53a:	2300      	movs	r3, #0
    b53c:	2202      	movs	r2, #2
    b53e:	210f      	movs	r1, #15
    b540:	e078      	b.n	b634 <_GLOBAL__sub_I_sound0+0xdc4>
    b542:	bf00      	nop
    b544:	20008648 	.word	0x20008648
    b548:	20007ea0 	.word	0x20007ea0
    b54c:	20008664 	.word	0x20008664
    b550:	20007544 	.word	0x20007544
    b554:	200087f4 	.word	0x200087f4
    b558:	200085d8 	.word	0x200085d8
    b55c:	20007e30 	.word	0x20007e30
    b560:	20007e68 	.word	0x20007e68
    b564:	200085cc 	.word	0x200085cc
    b568:	200026ec 	.word	0x200026ec
    b56c:	20002158 	.word	0x20002158
    b570:	200080d0 	.word	0x200080d0
    b574:	000166c5 	.word	0x000166c5
    b578:	20007364 	.word	0x20007364
    b57c:	200080dc 	.word	0x200080dc
    b580:	000005ed 	.word	0x000005ed
    b584:	20005b04 	.word	0x20005b04
    b588:	20005808 	.word	0x20005808
    b58c:	20003ab0 	.word	0x20003ab0
    b590:	20005258 	.word	0x20005258
    b594:	00000343 	.word	0x00000343
    b598:	20005b88 	.word	0x20005b88
    b59c:	20003ad0 	.word	0x20003ad0
    b5a0:	20005c4c 	.word	0x20005c4c
    b5a4:	20003ab8 	.word	0x20003ab8
    b5a8:	20005ac4 	.word	0x20005ac4
    b5ac:	20003af8 	.word	0x20003af8
    b5b0:	20005bdc 	.word	0x20005bdc
    b5b4:	20003ac4 	.word	0x20003ac4
    b5b8:	20005b4c 	.word	0x20005b4c
    b5bc:	20003af0 	.word	0x20003af0
    b5c0:	20005b10 	.word	0x20005b10
    b5c4:	20003ae0 	.word	0x20003ae0
    b5c8:	20005a88 	.word	0x20005a88
    b5cc:	20003ad8 	.word	0x20003ad8
    b5d0:	20007374 	.word	0x20007374
    b5d4:	2000818c 	.word	0x2000818c
    b5d8:	200081a0 	.word	0x200081a0
    b5dc:	20007840 	.word	0x20007840
    b5e0:	200081b4 	.word	0x200081b4
    b5e4:	2000750c 	.word	0x2000750c
    b5e8:	200081c8 	.word	0x200081c8
    b5ec:	200081dc 	.word	0x200081dc
    b5f0:	2000787c 	.word	0x2000787c
    b5f4:	200081f0 	.word	0x200081f0
    b5f8:	20007ed8 	.word	0x20007ed8
    b5fc:	20008204 	.word	0x20008204
    b600:	20008218 	.word	0x20008218
    b604:	200078b8 	.word	0x200078b8
    b608:	2000822c 	.word	0x2000822c
    b60c:	200073f4 	.word	0x200073f4
    b610:	200080ec 	.word	0x200080ec
    b614:	20008100 	.word	0x20008100
    b618:	2000845c 	.word	0x2000845c
    b61c:	20007f10 	.word	0x20007f10
    b620:	20008470 	.word	0x20008470
    b624:	20008484 	.word	0x20008484
    b628:	20008498 	.word	0x20008498
    b62c:	200084ac 	.word	0x200084ac
    b630:	200084c0 	.word	0x200084c0
    b634:	481b      	ldr	r0, [pc, #108]	; (b6a4 <_GLOBAL__sub_I_sound0+0xe34>)
    b636:	f009 fdd5 	bl	151e4 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
  Switch multiresponseButton3 = Switch(16);  // Middle-Left: VOLUME / BPM
    b63a:	9703      	str	r7, [sp, #12]
    b63c:	9602      	str	r6, [sp, #8]
    b63e:	9501      	str	r5, [sp, #4]
    b640:	9400      	str	r4, [sp, #0]
    b642:	2300      	movs	r3, #0
    b644:	2202      	movs	r2, #2
    b646:	2110      	movs	r1, #16
    b648:	4817      	ldr	r0, [pc, #92]	; (b6a8 <_GLOBAL__sub_I_sound0+0xe38>)
    b64a:	f009 fdcb 	bl	151e4 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
  Switch multiresponseButton4 = Switch(41);  // Middle-Right:
    b64e:	9703      	str	r7, [sp, #12]
    b650:	9602      	str	r6, [sp, #8]
    b652:	9501      	str	r5, [sp, #4]
    b654:	9400      	str	r4, [sp, #0]
    b656:	2300      	movs	r3, #0
    b658:	2202      	movs	r2, #2
    b65a:	2129      	movs	r1, #41	; 0x29
    b65c:	4813      	ldr	r0, [pc, #76]	; (b6ac <_GLOBAL__sub_I_sound0+0xe3c>)
    b65e:	f009 fdc1 	bl	151e4 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
  Switch multiresponseButton2 = Switch(3);   // right-Knob:  (double-tab+hold: set Accents), Long hold(+l/r knob): Select BPM OR VOLUME
    b662:	9703      	str	r7, [sp, #12]
    b664:	9602      	str	r6, [sp, #8]
    b666:	9501      	str	r5, [sp, #4]
    b668:	9400      	str	r4, [sp, #0]
    b66a:	2300      	movs	r3, #0
    b66c:	2202      	movs	r2, #2
    b66e:	2103      	movs	r1, #3
    b670:	480f      	ldr	r0, [pc, #60]	; (b6b0 <_GLOBAL__sub_I_sound0+0xe40>)
    b672:	f009 fdb7 	bl	151e4 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
EXTMEM arraysampler _samplers[13];
    b676:	4c0f      	ldr	r4, [pc, #60]	; (b6b4 <_GLOBAL__sub_I_sound0+0xe44>)
    b678:	f504 5582 	add.w	r5, r4, #4160	; 0x1040
        }
        return candidate;
    }
};

class arraysampler : public audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay> {
    b67c:	4620      	mov	r0, r4
    b67e:	f7fb fb79 	bl	6d74 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()>
    b682:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    b686:	42ac      	cmp	r4, r5
    b688:	d1f8      	bne.n	b67c <_GLOBAL__sub_I_sound0+0xe0c>
    b68a:	4a0b      	ldr	r2, [pc, #44]	; (b6b8 <_GLOBAL__sub_I_sound0+0xe48>)
    b68c:	490b      	ldr	r1, [pc, #44]	; (b6bc <_GLOBAL__sub_I_sound0+0xe4c>)
    b68e:	2000      	movs	r0, #0
    b690:	f00e f85a 	bl	19748 <__aeabi_atexit>
}
    b694:	b005      	add	sp, #20
    b696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				first_update = this;
    b69a:	4b09      	ldr	r3, [pc, #36]	; (b6c0 <_GLOBAL__sub_I_sound0+0xe50>)
    b69c:	4a09      	ldr	r2, [pc, #36]	; (b6c4 <_GLOBAL__sub_I_sound0+0xe54>)
    b69e:	601a      	str	r2, [r3, #0]
    b6a0:	f7ff ba35 	b.w	ab0e <_GLOBAL__sub_I_sound0+0x29e>
    b6a4:	20007f48 	.word	0x20007f48
    b6a8:	20008000 	.word	0x20008000
    b6ac:	2000805c 	.word	0x2000805c
    b6b0:	20007fa4 	.word	0x20007fa4
    b6b4:	700001e0 	.word	0x700001e0
    b6b8:	20005258 	.word	0x20005258
    b6bc:	00000989 	.word	0x00000989
    b6c0:	20006d60 	.word	0x20006d60
    b6c4:	20007ae0 	.word	0x20007ae0

0000b6c8 <mapf(double, double, double, double, double)>:
#include "Mapf.h"

double mapf(double x, double in_min, double in_max, double out_min, double out_max)
{

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    b6c8:	ee30 7b41 	vsub.f64	d7, d0, d1
    b6cc:	ee34 4b43 	vsub.f64	d4, d4, d3
    b6d0:	ee27 7b04 	vmul.f64	d7, d7, d4
    b6d4:	ee32 2b41 	vsub.f64	d2, d2, d1
    b6d8:	ee87 0b02 	vdiv.f64	d0, d7, d2
}
    b6dc:	ee30 0b03 	vadd.f64	d0, d0, d3
    b6e0:	4770      	bx	lr
	...

0000b6e4 <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
    b6e4:	b570      	push	{r4, r5, r6, lr}
    b6e6:	4604      	mov	r4, r0
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
    b6e8:	7883      	ldrb	r3, [r0, #2]
    b6ea:	3b01      	subs	r3, #1
    b6ec:	2b34      	cmp	r3, #52	; 0x34
    b6ee:	f200 80e1 	bhi.w	b8b4 <WS2812Serial::begin()+0x1d0>
    b6f2:	e8df f013 	tbh	[pc, r3, lsl #1]
    b6f6:	0035      	.short	0x0035
    b6f8:	00df00df 	.word	0x00df00df
    b6fc:	00df00df 	.word	0x00df00df
    b700:	00df00df 	.word	0x00df00df
    b704:	00df0095 	.word	0x00df0095
    b708:	00df00df 	.word	0x00df00df
    b70c:	00df00df 	.word	0x00df00df
    b710:	00df009e 	.word	0x00df009e
    b714:	00a700df 	.word	0x00a700df
    b718:	00df00df 	.word	0x00df00df
    b71c:	00df00b0 	.word	0x00df00b0
    b720:	00df00df 	.word	0x00df00df
    b724:	00df00bb 	.word	0x00df00bb
    b728:	00df00df 	.word	0x00df00df
    b72c:	00c400df 	.word	0x00c400df
    b730:	00df00df 	.word	0x00df00df
    b734:	00df00df 	.word	0x00df00df
    b738:	00cd00df 	.word	0x00cd00df
    b73c:	00df00df 	.word	0x00df00df
    b740:	00df00df 	.word	0x00df00df
    b744:	00df00df 	.word	0x00df00df
    b748:	00df00df 	.word	0x00df00df
    b74c:	00df00df 	.word	0x00df00df
    b750:	00b000df 	.word	0x00b000df
    b754:	00df00df 	.word	0x00df00df
    b758:	00df00df 	.word	0x00df00df
    b75c:	003500df 	.word	0x003500df
#elif defined(__IMXRT1062__)
	  case 1: // Serial1
#if defined(ARDUINO_TEENSY41)
	  case 53:
#endif
		uart = &IMXRT_LPUART6; 
    b760:	4b55      	ldr	r3, [pc, #340]	; (b8b8 <WS2812Serial::begin()+0x1d4>)
    b762:	6183      	str	r3, [r0, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    b764:	4a55      	ldr	r2, [pc, #340]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b766:	6f53      	ldr	r3, [r2, #116]	; 0x74
    b768:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    b76c:	6753      	str	r3, [r2, #116]	; 0x74
		hwtrigger = DMAMUX_SOURCE_LPUART6_TX; 
    b76e:	2546      	movs	r5, #70	; 0x46
#endif		
#endif
	  default:
		return false; // pin not supported
	}
	if (!dma) {
    b770:	68e3      	ldr	r3, [r4, #12]
    b772:	2b00      	cmp	r3, #0
    b774:	f000 8095 	beq.w	b8a2 <WS2812Serial::begin()+0x1be>
		if (!dma) return false; // unable to allocate DMA channel
	}
#if defined(__IMXRT1062__)
	// Convert Baud
	// Computed values for 4mhz  
	uart->CTRL = 0;	// clear everything
    b778:	69a2      	ldr	r2, [r4, #24]
    b77a:	2300      	movs	r3, #0
    b77c:	6193      	str	r3, [r2, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    b77e:	69a2      	ldr	r2, [r4, #24]
    b780:	494f      	ldr	r1, [pc, #316]	; (b8c0 <WS2812Serial::begin()+0x1dc>)
    b782:	6111      	str	r1, [r2, #16]
	uart->PINCFG = 0;
    b784:	69a2      	ldr	r2, [r4, #24]
    b786:	60d3      	str	r3, [r2, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
    b788:	69a2      	ldr	r2, [r4, #24]
    b78a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b78c:	089b      	lsrs	r3, r3, #2
    b78e:	f003 031c 	and.w	r3, r3, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    b792:	2b0f      	cmp	r3, #15
    b794:	bf94      	ite	ls
    b796:	085b      	lsrls	r3, r3, #1
    b798:	2307      	movhi	r3, #7
//	uart->WATER = LPUART_WATER_TXWATER(1);	// guessing here? 
//	uart->FIFO = 0;	// disable the fifo.
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
    b79a:	f003 0303 	and.w	r3, r3, #3
    b79e:	62d3      	str	r3, [r2, #44]	; 0x2c
	uart->FIFO |= LPUART_FIFO_TXFE;
    b7a0:	69a2      	ldr	r2, [r4, #24]
    b7a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    b7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b7a8:	6293      	str	r3, [r2, #40]	; 0x28

	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    b7aa:	69a3      	ldr	r3, [r4, #24]
    b7ac:	4a45      	ldr	r2, [pc, #276]	; (b8c4 <WS2812Serial::begin()+0x1e0>)
    b7ae:	619a      	str	r2, [r3, #24]
	// We need to configure the TX pin now.
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    b7b0:	78a2      	ldrb	r2, [r4, #2]
    b7b2:	4b45      	ldr	r3, [pc, #276]	; (b8c8 <WS2812Serial::begin()+0x1e4>)
    b7b4:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b7b8:	689b      	ldr	r3, [r3, #8]
    b7ba:	22d9      	movs	r2, #217	; 0xd9
    b7bc:	601a      	str	r2, [r3, #0]
	uint32_t pinmuxval = 2; // most of them use mux ALT2
#if defined(ARDUINO_TEENSY41)
	if (pin == 35) pinmuxval = 1;
    b7be:	78a2      	ldrb	r2, [r4, #2]
    b7c0:	2a23      	cmp	r2, #35	; 0x23
    b7c2:	bf14      	ite	ne
    b7c4:	2102      	movne	r1, #2
    b7c6:	2101      	moveq	r1, #1
#endif
	*(portConfigRegister(pin)) = pinmuxval;
    b7c8:	4b3f      	ldr	r3, [pc, #252]	; (b8c8 <WS2812Serial::begin()+0x1e4>)
    b7ca:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    b7ce:	685b      	ldr	r3, [r3, #4]
    b7d0:	6019      	str	r1, [r3, #0]

	dma->destination((volatile uint8_t&)uart->DATA);
    b7d2:	68e3      	ldr	r3, [r4, #12]
    b7d4:	69a2      	ldr	r2, [r4, #24]
    b7d6:	321c      	adds	r2, #28

	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
    b7d8:	6819      	ldr	r1, [r3, #0]
    b7da:	610a      	str	r2, [r1, #16]
		TCD->DOFF = 0;
    b7dc:	6818      	ldr	r0, [r3, #0]
    b7de:	2100      	movs	r1, #0
    b7e0:	8281      	strh	r1, [r0, #20]
		TCD->ATTR_DST = 0;
    b7e2:	6818      	ldr	r0, [r3, #0]
    b7e4:	7181      	strb	r1, [r0, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    b7e6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
    b7ea:	d302      	bcc.n	b7f2 <WS2812Serial::begin()+0x10e>
    b7ec:	681a      	ldr	r2, [r3, #0]
    b7ee:	6892      	ldr	r2, [r2, #8]
    b7f0:	b912      	cbnz	r2, b7f8 <WS2812Serial::begin()+0x114>
    b7f2:	681a      	ldr	r2, [r3, #0]
    b7f4:	2101      	movs	r1, #1
    b7f6:	6091      	str	r1, [r2, #8]
		TCD->DLASTSGA = 0;
    b7f8:	681b      	ldr	r3, [r3, #0]
    b7fa:	2100      	movs	r1, #0
    b7fc:	6199      	str	r1, [r3, #24]
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    b7fe:	68e3      	ldr	r3, [r4, #12]
    b800:	791a      	ldrb	r2, [r3, #4]
    b802:	4b32      	ldr	r3, [pc, #200]	; (b8cc <WS2812Serial::begin()+0x1e8>)
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    b804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    b808:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    b80c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
	*(portConfigRegister(pin)) = portconfig;
	dma->destination(uart->D);
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
    b810:	8822      	ldrh	r2, [r4, #0]
    b812:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    b816:	68a0      	ldr	r0, [r4, #8]
    b818:	f017 fc1e 	bl	23058 <memset>
	return true;
    b81c:	2001      	movs	r0, #1
}
    b81e:	bd70      	pop	{r4, r5, r6, pc}
		uart = &IMXRT_LPUART4; 
    b820:	4b2b      	ldr	r3, [pc, #172]	; (b8d0 <WS2812Serial::begin()+0x1ec>)
    b822:	6183      	str	r3, [r0, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    b824:	4a25      	ldr	r2, [pc, #148]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b826:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    b828:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    b82c:	66d3      	str	r3, [r2, #108]	; 0x6c
		hwtrigger = DMAMUX_SOURCE_LPUART4_TX; 
    b82e:	2544      	movs	r5, #68	; 0x44
		break;
    b830:	e79e      	b.n	b770 <WS2812Serial::begin()+0x8c>
		uart = &IMXRT_LPUART2; 
    b832:	4b28      	ldr	r3, [pc, #160]	; (b8d4 <WS2812Serial::begin()+0x1f0>)
    b834:	6183      	str	r3, [r0, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    b836:	4a21      	ldr	r2, [pc, #132]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b838:	6e93      	ldr	r3, [r2, #104]	; 0x68
    b83a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
    b83e:	6693      	str	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART2_TX; 
    b840:	2542      	movs	r5, #66	; 0x42
		break;
    b842:	e795      	b.n	b770 <WS2812Serial::begin()+0x8c>
		uart = &IMXRT_LPUART3; 
    b844:	4b24      	ldr	r3, [pc, #144]	; (b8d8 <WS2812Serial::begin()+0x1f4>)
    b846:	6183      	str	r3, [r0, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    b848:	4a1c      	ldr	r2, [pc, #112]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b84a:	6e93      	ldr	r3, [r2, #104]	; 0x68
    b84c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    b850:	6693      	str	r3, [r2, #104]	; 0x68
		hwtrigger = DMAMUX_SOURCE_LPUART3_TX; 
    b852:	2504      	movs	r5, #4
		break;
    b854:	e78c      	b.n	b770 <WS2812Serial::begin()+0x8c>
		uart = &IMXRT_LPUART8; 
    b856:	4b21      	ldr	r3, [pc, #132]	; (b8dc <WS2812Serial::begin()+0x1f8>)
    b858:	6183      	str	r3, [r0, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    b85a:	4a18      	ldr	r2, [pc, #96]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b85c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    b860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
    b864:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		hwtrigger = DMAMUX_SOURCE_LPUART8_TX; 
    b868:	2548      	movs	r5, #72	; 0x48
		break;
    b86a:	e781      	b.n	b770 <WS2812Serial::begin()+0x8c>
		uart = &IMXRT_LPUART1; 
    b86c:	4b1c      	ldr	r3, [pc, #112]	; (b8e0 <WS2812Serial::begin()+0x1fc>)
    b86e:	6183      	str	r3, [r0, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    b870:	4a12      	ldr	r2, [pc, #72]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b872:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    b874:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
    b878:	67d3      	str	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART1_TX; 
    b87a:	2502      	movs	r5, #2
		break;
    b87c:	e778      	b.n	b770 <WS2812Serial::begin()+0x8c>
		uart = &IMXRT_LPUART7; 
    b87e:	4b19      	ldr	r3, [pc, #100]	; (b8e4 <WS2812Serial::begin()+0x200>)
    b880:	6183      	str	r3, [r0, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    b882:	4a0e      	ldr	r2, [pc, #56]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b884:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    b886:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    b88a:	67d3      	str	r3, [r2, #124]	; 0x7c
		hwtrigger = DMAMUX_SOURCE_LPUART7_TX; 
    b88c:	2508      	movs	r5, #8
		break;
    b88e:	e76f      	b.n	b770 <WS2812Serial::begin()+0x8c>
		uart = &IMXRT_LPUART5; 
    b890:	4b15      	ldr	r3, [pc, #84]	; (b8e8 <WS2812Serial::begin()+0x204>)
    b892:	6183      	str	r3, [r0, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
    b894:	4a09      	ldr	r2, [pc, #36]	; (b8bc <WS2812Serial::begin()+0x1d8>)
    b896:	6f53      	ldr	r3, [r2, #116]	; 0x74
    b898:	f043 030c 	orr.w	r3, r3, #12
    b89c:	6753      	str	r3, [r2, #116]	; 0x74
		hwtrigger = DMAMUX_SOURCE_LPUART5_TX; 
    b89e:	2506      	movs	r5, #6
		break;
    b8a0:	e766      	b.n	b770 <WS2812Serial::begin()+0x8c>
		dma = new DMAChannel;
    b8a2:	2008      	movs	r0, #8
    b8a4:	f00b fdbe 	bl	17424 <operator new(unsigned int)>
    b8a8:	4606      	mov	r6, r0
		begin();
    b8aa:	2100      	movs	r1, #0
    b8ac:	f00a fa74 	bl	15d98 <DMAChannel::begin(bool)>
    b8b0:	60e6      	str	r6, [r4, #12]
		if (!dma) return false; // unable to allocate DMA channel
    b8b2:	e761      	b.n	b778 <WS2812Serial::begin()+0x94>
	switch (pin) {
    b8b4:	2000      	movs	r0, #0
    b8b6:	e7b2      	b.n	b81e <WS2812Serial::begin()+0x13a>
    b8b8:	40198000 	.word	0x40198000
    b8bc:	400fc000 	.word	0x400fc000
    b8c0:	05800001 	.word	0x05800001
    b8c4:	10080000 	.word	0x10080000
    b8c8:	2000373c 	.word	0x2000373c
    b8cc:	400ec000 	.word	0x400ec000
    b8d0:	40190000 	.word	0x40190000
    b8d4:	40188000 	.word	0x40188000
    b8d8:	4018c000 	.word	0x4018c000
    b8dc:	401a0000 	.word	0x401a0000
    b8e0:	40184000 	.word	0x40184000
    b8e4:	4019c000 	.word	0x4019c000
    b8e8:	40194000 	.word	0x40194000

0000b8ec <WS2812Serial::show()>:

void WS2812Serial::show()
{
    b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b8f0:	b083      	sub	sp, #12
    b8f2:	4604      	mov	r4, r0
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
    b8f4:	4bd2      	ldr	r3, [pc, #840]	; (bc40 <WS2812Serial::show()+0x354>)
    b8f6:	68da      	ldr	r2, [r3, #12]
    b8f8:	68c3      	ldr	r3, [r0, #12]
    b8fa:	7919      	ldrb	r1, [r3, #4]
    b8fc:	2301      	movs	r3, #1
    b8fe:	408b      	lsls	r3, r1
    b900:	4213      	tst	r3, r2
    b902:	d00a      	beq.n	b91a <WS2812Serial::show()+0x2e>
    b904:	4ece      	ldr	r6, [pc, #824]	; (bc40 <WS2812Serial::show()+0x354>)
    b906:	2501      	movs	r5, #1
		yield();
    b908:	f000 fa64 	bl	bdd4 <yield>
	while ((DMA_ERQ & (1 << dma->channel))) {
    b90c:	68f2      	ldr	r2, [r6, #12]
    b90e:	68e3      	ldr	r3, [r4, #12]
    b910:	791b      	ldrb	r3, [r3, #4]
    b912:	fa05 f303 	lsl.w	r3, r5, r3
    b916:	4213      	tst	r3, r2
    b918:	d1f6      	bne.n	b908 <WS2812Serial::show()+0x1c>
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
    b91a:	78e3      	ldrb	r3, [r4, #3]
    b91c:	2b05      	cmp	r3, #5
    b91e:	d87e      	bhi.n	ba1e <WS2812Serial::show()+0x132>
		// RGB
		const uint8_t *p = drawBuffer;
    b920:	68a5      	ldr	r5, [r4, #8]
		const uint8_t *end = p + (numled * 3);
    b922:	8826      	ldrh	r6, [r4, #0]
    b924:	eb06 0646 	add.w	r6, r6, r6, lsl #1
    b928:	442e      	add	r6, r5
		uint8_t *fb = frameBuffer;
    b92a:	6860      	ldr	r0, [r4, #4]
		while (p < end) {
    b92c:	42b5      	cmp	r5, r6
    b92e:	f080 81e8 	bcs.w	bd02 <WS2812Serial::show()+0x416>
    b932:	300c      	adds	r0, #12
    b934:	e016      	b.n	b964 <WS2812Serial::show()+0x78>
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			uint32_t n=0;
			switch (config) {
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
    b936:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
    b93a:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    b93e:	433b      	orrs	r3, r7
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
			}
			const uint8_t *stop = fb + 12;
			do {
				uint8_t x = 0x08;
				if (!(n & 0x00800000)) x |= 0x07;
    b940:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    b944:	bf14      	ite	ne
    b946:	2108      	movne	r1, #8
    b948:	210f      	moveq	r1, #15
				if (!(n & 0x00400000)) x |= 0xE0;
    b94a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    b94e:	bf08      	it	eq
    b950:	f041 01e0 	orreq.w	r1, r1, #224	; 0xe0
				n <<= 2;
    b954:	009b      	lsls	r3, r3, #2
				*fb++ = x;
    b956:	f802 1b01 	strb.w	r1, [r2], #1
			} while (fb < stop);
    b95a:	4282      	cmp	r2, r0
    b95c:	d1f0      	bne.n	b940 <WS2812Serial::show()+0x54>
		while (p < end) {
    b95e:	300c      	adds	r0, #12
    b960:	42ae      	cmp	r6, r5
    b962:	d94b      	bls.n	b9fc <WS2812Serial::show()+0x110>
    b964:	f1a0 020c 	sub.w	r2, r0, #12
			uint8_t b = *p++;
    b968:	f895 8000 	ldrb.w	r8, [r5]
			uint8_t g = *p++;
    b96c:	786b      	ldrb	r3, [r5, #1]
			uint8_t r = *p++;
    b96e:	3503      	adds	r5, #3
			uint32_t mult = brightness + 1;
    b970:	7d21      	ldrb	r1, [r4, #20]
			b = (b * mult) >> 8;
    b972:	fb01 8808 	mla	r8, r1, r8, r8
    b976:	ea4f 2718 	mov.w	r7, r8, lsr #8
			g = (g * mult) >> 8;
    b97a:	fb01 3903 	mla	r9, r1, r3, r3
    b97e:	ea4f 2c19 	mov.w	ip, r9, lsr #8
			r = (r * mult) >> 8;
    b982:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    b986:	fb01 3103 	mla	r1, r1, r3, r3
    b98a:	0a0b      	lsrs	r3, r1, #8
			switch (config) {
    b98c:	f894 e003 	ldrb.w	lr, [r4, #3]
    b990:	f1be 0f05 	cmp.w	lr, #5
    b994:	d830      	bhi.n	b9f8 <WS2812Serial::show()+0x10c>
    b996:	f20f 0a08 	addw	sl, pc, #8
    b99a:	f85a f02e 	ldr.w	pc, [sl, lr, lsl #2]
    b99e:	bf00      	nop
    b9a0:	0000b937 	.word	0x0000b937
    b9a4:	0000b9b9 	.word	0x0000b9b9
    b9a8:	0000b9c7 	.word	0x0000b9c7
    b9ac:	0000b9d3 	.word	0x0000b9d3
    b9b0:	0000b9df 	.word	0x0000b9df
    b9b4:	0000b9ed 	.word	0x0000b9ed
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
    b9b8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
    b9bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    b9c0:	ea43 030c 	orr.w	r3, r3, ip
    b9c4:	e7bc      	b.n	b940 <WS2812Serial::show()+0x54>
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
    b9c6:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
    b9ca:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    b9ce:	433b      	orrs	r3, r7
    b9d0:	e7b6      	b.n	b940 <WS2812Serial::show()+0x54>
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
    b9d2:	f408 417f 	and.w	r1, r8, #65280	; 0xff00
    b9d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
    b9da:	430b      	orrs	r3, r1
    b9dc:	e7b0      	b.n	b940 <WS2812Serial::show()+0x54>
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
    b9de:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
    b9e2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    b9e6:	ea43 030c 	orr.w	r3, r3, ip
    b9ea:	e7a9      	b.n	b940 <WS2812Serial::show()+0x54>
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
    b9ec:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
    b9f0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
    b9f4:	430b      	orrs	r3, r1
    b9f6:	e7a3      	b.n	b940 <WS2812Serial::show()+0x54>
			switch (config) {
    b9f8:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 12;
    b9fa:	e7a1      	b.n	b940 <WS2812Serial::show()+0x54>
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
    b9fc:	260c      	movs	r6, #12
		microseconds_per_led = 30;
    b9fe:	231e      	movs	r3, #30
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    ba00:	8825      	ldrh	r5, [r4, #0]
    ba02:	fb03 f505 	mul.w	r5, r3, r5
    ba06:	f505 7596 	add.w	r5, r5, #300	; 0x12c
	//if (min_elapsed < 2500) min_elapsed = 2500; // limit refresh to 400 Hz
	uint32_t m;
	while (1) {
		m = micros();
    ba0a:	f00b f909 	bl	16c20 <micros>
		if ((m - prior_micros) > min_elapsed) break;
    ba0e:	6923      	ldr	r3, [r4, #16]
    ba10:	1ac3      	subs	r3, r0, r3
    ba12:	42ab      	cmp	r3, r5
    ba14:	f200 817b 	bhi.w	bd0e <WS2812Serial::show()+0x422>
		yield();
    ba18:	f000 f9dc 	bl	bdd4 <yield>
		m = micros();
    ba1c:	e7f5      	b.n	ba0a <WS2812Serial::show()+0x11e>
		const uint8_t *p = drawBuffer;
    ba1e:	68a3      	ldr	r3, [r4, #8]
		const uint8_t *end = p + (numled * 4);
    ba20:	8822      	ldrh	r2, [r4, #0]
		uint8_t *fb = frameBuffer;
    ba22:	6861      	ldr	r1, [r4, #4]
		const uint8_t *end = p + (numled * 4);
    ba24:	eb03 0282 	add.w	r2, r3, r2, lsl #2
		while (p < end) {
    ba28:	4293      	cmp	r3, r2
    ba2a:	f080 816d 	bcs.w	bd08 <WS2812Serial::show()+0x41c>
    ba2e:	3110      	adds	r1, #16
    ba30:	1d18      	adds	r0, r3, #4
    ba32:	f102 0b04 	add.w	fp, r2, #4
    ba36:	e01d      	b.n	ba74 <WS2812Serial::show()+0x188>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
    ba38:	9d01      	ldr	r5, [sp, #4]
    ba3a:	ea4f 4a05 	mov.w	sl, r5, lsl #16
    ba3e:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
    ba42:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    ba46:	ea43 030c 	orr.w	r3, r3, ip
    ba4a:	ea43 0309 	orr.w	r3, r3, r9
				if (!(n & 0x80000000)) x |= 0x07;
    ba4e:	2b00      	cmp	r3, #0
    ba50:	bfb4      	ite	lt
    ba52:	2508      	movlt	r5, #8
    ba54:	250f      	movge	r5, #15
				if (!(n & 0x40000000)) x |= 0xE0;
    ba56:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    ba5a:	bf08      	it	eq
    ba5c:	f045 05e0 	orreq.w	r5, r5, #224	; 0xe0
				n <<= 2;
    ba60:	009b      	lsls	r3, r3, #2
				*fb++ = x;
    ba62:	f802 5b01 	strb.w	r5, [r2], #1
			} while (fb < stop);
    ba66:	428a      	cmp	r2, r1
    ba68:	d1f1      	bne.n	ba4e <WS2812Serial::show()+0x162>
		while (p < end) {
    ba6a:	3110      	adds	r1, #16
    ba6c:	3004      	adds	r0, #4
    ba6e:	4583      	cmp	fp, r0
    ba70:	f000 8144 	beq.w	bcfc <WS2812Serial::show()+0x410>
    ba74:	f1a1 0210 	sub.w	r2, r1, #16
			uint32_t mult = brightness + 1;
    ba78:	f894 e014 	ldrb.w	lr, [r4, #20]
			b = (b * mult) >> 8;
    ba7c:	f810 cc04 	ldrb.w	ip, [r0, #-4]
    ba80:	fb0e cc0c 	mla	ip, lr, ip, ip
    ba84:	ea4f 281c 	mov.w	r8, ip, lsr #8
			g = (g * mult) >> 8;
    ba88:	f810 6c03 	ldrb.w	r6, [r0, #-3]
    ba8c:	fb0e 6606 	mla	r6, lr, r6, r6
    ba90:	0a33      	lsrs	r3, r6, #8
    ba92:	9301      	str	r3, [sp, #4]
			r = (r * mult) >> 8;
    ba94:	f810 7c02 	ldrb.w	r7, [r0, #-2]
    ba98:	fb0e 7707 	mla	r7, lr, r7, r7
    ba9c:	0a3b      	lsrs	r3, r7, #8
			w = (w * mult) >> 8;
    ba9e:	f810 5c01 	ldrb.w	r5, [r0, #-1]
    baa2:	fb0e 5505 	mla	r5, lr, r5, r5
    baa6:	ea4f 2915 	mov.w	r9, r5, lsr #8
			switch (config) {
    baaa:	f894 e003 	ldrb.w	lr, [r4, #3]
    baae:	f1ae 0e06 	sub.w	lr, lr, #6
    bab2:	f1be 0f17 	cmp.w	lr, #23
    bab6:	f200 811f 	bhi.w	bcf8 <WS2812Serial::show()+0x40c>
    baba:	f20f 0a08 	addw	sl, pc, #8
    babe:	f85a f02e 	ldr.w	pc, [sl, lr, lsl #2]
    bac2:	bf00      	nop
    bac4:	0000ba39 	.word	0x0000ba39
    bac8:	0000bb25 	.word	0x0000bb25
    bacc:	0000bb39 	.word	0x0000bb39
    bad0:	0000bb4f 	.word	0x0000bb4f
    bad4:	0000bb65 	.word	0x0000bb65
    bad8:	0000bb77 	.word	0x0000bb77
    badc:	0000bb8b 	.word	0x0000bb8b
    bae0:	0000bb9d 	.word	0x0000bb9d
    bae4:	0000bbb1 	.word	0x0000bbb1
    bae8:	0000bbc5 	.word	0x0000bbc5
    baec:	0000bbd9 	.word	0x0000bbd9
    baf0:	0000bbed 	.word	0x0000bbed
    baf4:	0000bbff 	.word	0x0000bbff
    baf8:	0000bc13 	.word	0x0000bc13
    bafc:	0000bc29 	.word	0x0000bc29
    bb00:	0000bc45 	.word	0x0000bc45
    bb04:	0000bc5b 	.word	0x0000bc5b
    bb08:	0000bc6f 	.word	0x0000bc6f
    bb0c:	0000bc81 	.word	0x0000bc81
    bb10:	0000bc97 	.word	0x0000bc97
    bb14:	0000bcab 	.word	0x0000bcab
    bb18:	0000bcbf 	.word	0x0000bcbf
    bb1c:	0000bcd3 	.word	0x0000bcd3
    bb20:	0000bce5 	.word	0x0000bce5
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
    bb24:	ea4f 4808 	mov.w	r8, r8, lsl #16
    bb28:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
    bb2c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bb30:	4333      	orrs	r3, r6
    bb32:	ea43 0309 	orr.w	r3, r3, r9
    bb36:	e78a      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
    bb38:	041b      	lsls	r3, r3, #16
    bb3a:	9d01      	ldr	r5, [sp, #4]
    bb3c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    bb40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    bb44:	ea43 030c 	orr.w	r3, r3, ip
    bb48:	ea43 0309 	orr.w	r3, r3, r9
    bb4c:	e77f      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
    bb4e:	ea4f 4308 	mov.w	r3, r8, lsl #16
    bb52:	9d01      	ldr	r5, [sp, #4]
    bb54:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    bb58:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    bb5c:	433b      	orrs	r3, r7
    bb5e:	ea43 0309 	orr.w	r3, r3, r9
    bb62:	e774      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
    bb64:	041b      	lsls	r3, r3, #16
    bb66:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    bb6a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bb6e:	4333      	orrs	r3, r6
    bb70:	ea43 0309 	orr.w	r3, r3, r9
    bb74:	e76b      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
    bb76:	ea4f 4308 	mov.w	r3, r8, lsl #16
    bb7a:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    bb7e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    bb82:	433b      	orrs	r3, r7
    bb84:	ea43 0309 	orr.w	r3, r3, r9
    bb88:	e761      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
    bb8a:	041b      	lsls	r3, r3, #16
    bb8c:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    bb90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bb94:	4333      	orrs	r3, r6
    bb96:	ea43 0308 	orr.w	r3, r3, r8
    bb9a:	e758      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
    bb9c:	041b      	lsls	r3, r3, #16
    bb9e:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    bba2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    bba6:	ea43 030c 	orr.w	r3, r3, ip
    bbaa:	9d01      	ldr	r5, [sp, #4]
    bbac:	432b      	orrs	r3, r5
    bbae:	e74e      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
    bbb0:	9b01      	ldr	r3, [sp, #4]
    bbb2:	041b      	lsls	r3, r3, #16
    bbb4:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    bbb8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    bbbc:	433b      	orrs	r3, r7
    bbbe:	ea43 0308 	orr.w	r3, r3, r8
    bbc2:	e744      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
    bbc4:	9d01      	ldr	r5, [sp, #4]
    bbc6:	042d      	lsls	r5, r5, #16
    bbc8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
    bbcc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    bbd0:	ea45 050c 	orr.w	r5, r5, ip
    bbd4:	432b      	orrs	r3, r5
    bbd6:	e73a      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
    bbd8:	ea4f 4308 	mov.w	r3, r8, lsl #16
    bbdc:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    bbe0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    bbe4:	433b      	orrs	r3, r7
    bbe6:	9d01      	ldr	r5, [sp, #4]
    bbe8:	432b      	orrs	r3, r5
    bbea:	e730      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
    bbec:	ea4f 4508 	mov.w	r5, r8, lsl #16
    bbf0:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
    bbf4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bbf8:	4335      	orrs	r5, r6
    bbfa:	432b      	orrs	r3, r5
    bbfc:	e727      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
    bbfe:	ea4f 4909 	mov.w	r9, r9, lsl #16
    bc02:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    bc06:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bc0a:	4333      	orrs	r3, r6
    bc0c:	ea43 0308 	orr.w	r3, r3, r8
    bc10:	e71d      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
    bc12:	ea4f 4909 	mov.w	r9, r9, lsl #16
    bc16:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    bc1a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    bc1e:	ea43 030c 	orr.w	r3, r3, ip
    bc22:	9d01      	ldr	r5, [sp, #4]
    bc24:	432b      	orrs	r3, r5
    bc26:	e712      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
    bc28:	ea4f 4309 	mov.w	r3, r9, lsl #16
    bc2c:	9d01      	ldr	r5, [sp, #4]
    bc2e:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    bc32:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    bc36:	433b      	orrs	r3, r7
    bc38:	ea43 0308 	orr.w	r3, r3, r8
    bc3c:	e707      	b.n	ba4e <WS2812Serial::show()+0x162>
    bc3e:	bf00      	nop
    bc40:	400e8000 	.word	0x400e8000
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
    bc44:	ea4f 4509 	mov.w	r5, r9, lsl #16
    bc48:	9e01      	ldr	r6, [sp, #4]
    bc4a:	ea45 6506 	orr.w	r5, r5, r6, lsl #24
    bc4e:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    bc52:	ea45 050c 	orr.w	r5, r5, ip
    bc56:	432b      	orrs	r3, r5
    bc58:	e6f9      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
    bc5a:	ea4f 4309 	mov.w	r3, r9, lsl #16
    bc5e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    bc62:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    bc66:	433b      	orrs	r3, r7
    bc68:	9d01      	ldr	r5, [sp, #4]
    bc6a:	432b      	orrs	r3, r5
    bc6c:	e6ef      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
    bc6e:	ea4f 4509 	mov.w	r5, r9, lsl #16
    bc72:	ea45 6508 	orr.w	r5, r5, r8, lsl #24
    bc76:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    bc7a:	4335      	orrs	r5, r6
    bc7c:	432b      	orrs	r3, r5
    bc7e:	e6e6      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
    bc80:	9e01      	ldr	r6, [sp, #4]
    bc82:	ea4f 4a06 	mov.w	sl, r6, lsl #16
    bc86:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
    bc8a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    bc8e:	432b      	orrs	r3, r5
    bc90:	ea43 0308 	orr.w	r3, r3, r8
    bc94:	e6db      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
    bc96:	ea4f 4808 	mov.w	r8, r8, lsl #16
    bc9a:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
    bc9e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    bca2:	432b      	orrs	r3, r5
    bca4:	9d01      	ldr	r5, [sp, #4]
    bca6:	432b      	orrs	r3, r5
    bca8:	e6d1      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
    bcaa:	041b      	lsls	r3, r3, #16
    bcac:	9e01      	ldr	r6, [sp, #4]
    bcae:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    bcb2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    bcb6:	432b      	orrs	r3, r5
    bcb8:	ea43 0308 	orr.w	r3, r3, r8
    bcbc:	e6c7      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
    bcbe:	ea4f 4608 	mov.w	r6, r8, lsl #16
    bcc2:	9f01      	ldr	r7, [sp, #4]
    bcc4:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
    bcc8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    bccc:	4335      	orrs	r5, r6
    bcce:	432b      	orrs	r3, r5
    bcd0:	e6bd      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
    bcd2:	041b      	lsls	r3, r3, #16
    bcd4:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    bcd8:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    bcdc:	432b      	orrs	r3, r5
    bcde:	9d01      	ldr	r5, [sp, #4]
    bce0:	432b      	orrs	r3, r5
    bce2:	e6b4      	b.n	ba4e <WS2812Serial::show()+0x162>
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
    bce4:	ea4f 6608 	mov.w	r6, r8, lsl #24
    bce8:	9f01      	ldr	r7, [sp, #4]
    bcea:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
    bcee:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    bcf2:	4335      	orrs	r5, r6
    bcf4:	432b      	orrs	r3, r5
    bcf6:	e6aa      	b.n	ba4e <WS2812Serial::show()+0x162>
			switch (config) {
    bcf8:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 16;
    bcfa:	e6a8      	b.n	ba4e <WS2812Serial::show()+0x162>
		bytes_per_led = 16;
    bcfc:	2610      	movs	r6, #16
		microseconds_per_led = 40;
    bcfe:	2328      	movs	r3, #40	; 0x28
    bd00:	e67e      	b.n	ba00 <WS2812Serial::show()+0x114>
		bytes_per_led = 12;
    bd02:	260c      	movs	r6, #12
		microseconds_per_led = 30;
    bd04:	231e      	movs	r3, #30
    bd06:	e67b      	b.n	ba00 <WS2812Serial::show()+0x114>
		bytes_per_led = 16;
    bd08:	2610      	movs	r6, #16
		microseconds_per_led = 40;
    bd0a:	2328      	movs	r3, #40	; 0x28
    bd0c:	e678      	b.n	ba00 <WS2812Serial::show()+0x114>
	}
	prior_micros = m;
    bd0e:	6120      	str	r0, [r4, #16]
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    bd10:	6862      	ldr	r2, [r4, #4]
    bd12:	4b2e      	ldr	r3, [pc, #184]	; (bdcc <WS2812Serial::show()+0x4e0>)
    bd14:	429a      	cmp	r2, r3
    bd16:	d911      	bls.n	bd3c <WS2812Serial::show()+0x450>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    bd18:	f022 031f 	bic.w	r3, r2, #31
    bd1c:	8821      	ldrh	r1, [r4, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    bd1e:	fb06 2201 	mla	r2, r6, r1, r2
	asm("dsb");
    bd22:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCMVAC = location;
    bd26:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    bd2a:	f8c1 3f68 	str.w	r3, [r1, #3944]	; 0xf68
		location += 32;
    bd2e:	3320      	adds	r3, #32
	} while (location < end_addr);
    bd30:	429a      	cmp	r2, r3
    bd32:	d8fa      	bhi.n	bd2a <WS2812Serial::show()+0x43e>
	asm("dsb");
    bd34:	f3bf 8f4f 	dsb	sy
	asm("isb");
    bd38:	f3bf 8f6f 	isb	sy
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
    bd3c:	68e2      	ldr	r2, [r4, #12]
    bd3e:	6860      	ldr	r0, [r4, #4]
    bd40:	8823      	ldrh	r3, [r4, #0]
    bd42:	fb06 f303 	mul.w	r3, r6, r3
		TCD->SADDR = p;
    bd46:	6811      	ldr	r1, [r2, #0]
    bd48:	6008      	str	r0, [r1, #0]
		TCD->SOFF = 1;
    bd4a:	6810      	ldr	r0, [r2, #0]
    bd4c:	2101      	movs	r1, #1
    bd4e:	8081      	strh	r1, [r0, #4]
		TCD->ATTR_SRC = 0;
    bd50:	6810      	ldr	r0, [r2, #0]
    bd52:	2500      	movs	r5, #0
    bd54:	71c5      	strb	r5, [r0, #7]
		TCD->NBYTES = 1;
    bd56:	6810      	ldr	r0, [r2, #0]
    bd58:	6081      	str	r1, [r0, #8]
		TCD->SLAST = -len;
    bd5a:	6811      	ldr	r1, [r2, #0]
    bd5c:	4258      	negs	r0, r3
    bd5e:	60c8      	str	r0, [r1, #12]
		TCD->BITER = len;
    bd60:	6811      	ldr	r1, [r2, #0]
    bd62:	b29b      	uxth	r3, r3
    bd64:	83cb      	strh	r3, [r1, #30]
		TCD->CITER = len;
    bd66:	6812      	ldr	r2, [r2, #0]
    bd68:	82d3      	strh	r3, [r2, #22]
//	dma->transferSize(1);
	dma->transferCount(numled * bytes_per_led);
    bd6a:	68e1      	ldr	r1, [r4, #12]
    bd6c:	8823      	ldrh	r3, [r4, #0]
    bd6e:	fb06 f303 	mul.w	r3, r6, r3
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    bd72:	680a      	ldr	r2, [r1, #0]
    bd74:	8bd0      	ldrh	r0, [r2, #30]
    bd76:	f410 4f00 	tst.w	r0, #32768	; 0x8000
    bd7a:	d117      	bne.n	bdac <WS2812Serial::show()+0x4c0>
			if (len > 32767) return;
    bd7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bd80:	d203      	bcs.n	bd8a <WS2812Serial::show()+0x49e>
			TCD->BITER = len;
    bd82:	b29b      	uxth	r3, r3
    bd84:	83d3      	strh	r3, [r2, #30]
			TCD->CITER = len;
    bd86:	680a      	ldr	r2, [r1, #0]
    bd88:	82d3      	strh	r3, [r2, #22]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    bd8a:	68e3      	ldr	r3, [r4, #12]
    bd8c:	681a      	ldr	r2, [r3, #0]
    bd8e:	8b93      	ldrh	r3, [r2, #28]
    bd90:	b29b      	uxth	r3, r3
    bd92:	f043 0308 	orr.w	r3, r3, #8
    bd96:	8393      	strh	r3, [r2, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
    bd98:	69a3      	ldr	r3, [r4, #24]
    bd9a:	2200      	movs	r2, #0
    bd9c:	615a      	str	r2, [r3, #20]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    bd9e:	68e3      	ldr	r3, [r4, #12]
    bda0:	791a      	ldrb	r2, [r3, #4]
    bda2:	4b0b      	ldr	r3, [pc, #44]	; (bdd0 <WS2812Serial::show()+0x4e4>)
    bda4:	76da      	strb	r2, [r3, #27]
	dma->enable();

#endif
}
    bda6:	b003      	add	sp, #12
    bda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > 511) return;
    bdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bdb0:	d2eb      	bcs.n	bd8a <WS2812Serial::show()+0x49e>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    bdb2:	8bd0      	ldrh	r0, [r2, #30]
    bdb4:	b29b      	uxth	r3, r3
    bdb6:	f400 407e 	and.w	r0, r0, #65024	; 0xfe00
    bdba:	4318      	orrs	r0, r3
    bdbc:	83d0      	strh	r0, [r2, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    bdbe:	6809      	ldr	r1, [r1, #0]
    bdc0:	8aca      	ldrh	r2, [r1, #22]
    bdc2:	f402 427e 	and.w	r2, r2, #65024	; 0xfe00
    bdc6:	4313      	orrs	r3, r2
    bdc8:	82cb      	strh	r3, [r1, #22]
    bdca:	e7de      	b.n	bd8a <WS2812Serial::show()+0x49e>
    bdcc:	201fffff 	.word	0x201fffff
    bdd0:	400e8000 	.word	0x400e8000

0000bdd4 <yield>:
extern "C"  __attribute__((weak)) void yield(void) { }
    bdd4:	4770      	bx	lr

0000bdd6 <CFastLED::CFastLED()>:
	m_Scale = 255;
    bdd6:	22ff      	movs	r2, #255	; 0xff
    bdd8:	7002      	strb	r2, [r0, #0]
	m_nFPS = 0;
    bdda:	2200      	movs	r2, #0
    bddc:	8042      	strh	r2, [r0, #2]
	m_pPowerFunc = NULL;
    bdde:	60c2      	str	r2, [r0, #12]
	m_nPowerData = 0xFFFFFFFF;
    bde0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    bde4:	6081      	str	r1, [r0, #8]
	m_nMinMicros = 0;
    bde6:	6042      	str	r2, [r0, #4]
}
    bde8:	4770      	bx	lr
	...

0000bdec <CFastLED::clearData()>:
		showColor(CRGB(0,0,0), 0);
	}
    clearData();
}

void CFastLED::clearData() {
    bdec:	b538      	push	{r3, r4, r5, lr}
    static CLEDController *head() { return m_pHead; }
    bdee:	4b06      	ldr	r3, [pc, #24]	; (be08 <CFastLED::clearData()+0x1c>)
    bdf0:	681c      	ldr	r4, [r3, #0]
	CLEDController *pCur = CLEDController::head();
	while(pCur) {
    bdf2:	b144      	cbz	r4, be06 <CFastLED::clearData()+0x1a>
		pCur->clearLedDataInternal();
    bdf4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    bdf8:	4629      	mov	r1, r5
    bdfa:	4620      	mov	r0, r4
    bdfc:	f000 f994 	bl	c128 <CLEDController::clearLedDataInternal(int)>
    CLEDController *next() { return m_pNext; }
    be00:	68a4      	ldr	r4, [r4, #8]
	while(pCur) {
    be02:	2c00      	cmp	r4, #0
    be04:	d1f8      	bne.n	bdf8 <CFastLED::clearData()+0xc>
		pCur = pCur->next();
	}
}
    be06:	bd38      	pop	{r3, r4, r5, pc}
    be08:	20006e54 	.word	0x20006e54

0000be0c <CFastLED::countFPS(int)>:

/// Unused value
/// @todo Remove?
extern int noise_max;

void CFastLED::countFPS(int nFrames) {
    be0c:	b430      	push	{r4, r5}
	static int br = 0;
	static uint32_t lastframe = 0; // millis();

	if(br++ >= nFrames) {
    be0e:	4c0e      	ldr	r4, [pc, #56]	; (be48 <CFastLED::countFPS(int)+0x3c>)
    be10:	6822      	ldr	r2, [r4, #0]
    be12:	1c53      	adds	r3, r2, #1
    be14:	6023      	str	r3, [r4, #0]
    be16:	428a      	cmp	r2, r1
    be18:	db13      	blt.n	be42 <CFastLED::countFPS(int)+0x36>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
    be1a:	4c0c      	ldr	r4, [pc, #48]	; (be4c <CFastLED::countFPS(int)+0x40>)
    be1c:	6822      	ldr	r2, [r4, #0]
		uint32_t now = millis();
		now -= lastframe;
		if(now == 0) {
			now = 1; // prevent division by zero below
		}
		m_nFPS = (br * 1000) / now;
    be1e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    be22:	fb01 f303 	mul.w	r3, r1, r3
		now -= lastframe;
    be26:	490a      	ldr	r1, [pc, #40]	; (be50 <CFastLED::countFPS(int)+0x44>)
    be28:	680d      	ldr	r5, [r1, #0]
    be2a:	1b52      	subs	r2, r2, r5
		m_nFPS = (br * 1000) / now;
    be2c:	2a01      	cmp	r2, #1
    be2e:	bf38      	it	cc
    be30:	2201      	movcc	r2, #1
    be32:	fbb3 f3f2 	udiv	r3, r3, r2
    be36:	8043      	strh	r3, [r0, #2]
		br = 0;
    be38:	4b03      	ldr	r3, [pc, #12]	; (be48 <CFastLED::countFPS(int)+0x3c>)
    be3a:	2200      	movs	r2, #0
    be3c:	601a      	str	r2, [r3, #0]
    be3e:	6823      	ldr	r3, [r4, #0]
		lastframe = millis();
    be40:	600b      	str	r3, [r1, #0]
	}
}
    be42:	bc30      	pop	{r4, r5}
    be44:	4770      	bx	lr
    be46:	bf00      	nop
    be48:	2000704c 	.word	0x2000704c
    be4c:	20008a6c 	.word	0x20008a6c
    be50:	20007050 	.word	0x20007050

0000be54 <CFastLED::show(unsigned char)>:
void CFastLED::show(uint8_t scale) {
    be54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be58:	4605      	mov	r5, r0
    be5a:	4689      	mov	r9, r1
        #endif
    }
    
    static void onBeginFrame() {
        #if FASTLED_HAS_ENGINE_EVENTS
        EngineEvents::getInstance()->_onBeginFrame();
    be5c:	f000 f9ec 	bl	c238 <fl::EngineEvents::getInstance()>
    be60:	f000 fa06 	bl	c270 <fl::EngineEvents::_onBeginFrame()>
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    be64:	4c2d      	ldr	r4, [pc, #180]	; (bf1c <CFastLED::show(unsigned char)+0xc8>)
    be66:	686b      	ldr	r3, [r5, #4]
    be68:	b133      	cbz	r3, be78 <CFastLED::show(unsigned char)+0x24>
    be6a:	f00a fed9 	bl	16c20 <micros>
    be6e:	6823      	ldr	r3, [r4, #0]
    be70:	1ac0      	subs	r0, r0, r3
    be72:	686b      	ldr	r3, [r5, #4]
    be74:	4298      	cmp	r0, r3
    be76:	d3f6      	bcc.n	be66 <CFastLED::show(unsigned char)+0x12>
	lastshow = micros();
    be78:	f00a fed2 	bl	16c20 <micros>
    be7c:	4b27      	ldr	r3, [pc, #156]	; (bf1c <CFastLED::show(unsigned char)+0xc8>)
    be7e:	6018      	str	r0, [r3, #0]
	if(m_pPowerFunc) {
    be80:	68eb      	ldr	r3, [r5, #12]
    be82:	b11b      	cbz	r3, be8c <CFastLED::show(unsigned char)+0x38>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    be84:	68a9      	ldr	r1, [r5, #8]
    be86:	4648      	mov	r0, r9
    be88:	4798      	blx	r3
    be8a:	4681      	mov	r9, r0
    static CLEDController *head() { return m_pHead; }
    be8c:	4b24      	ldr	r3, [pc, #144]	; (bf20 <CFastLED::show(unsigned char)+0xcc>)
    be8e:	681c      	ldr	r4, [r3, #0]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    be90:	2c00      	cmp	r4, #0
    be92:	d034      	beq.n	befe <CFastLED::show(unsigned char)+0xaa>
    be94:	4f23      	ldr	r7, [pc, #140]	; (bf24 <CFastLED::show(unsigned char)+0xd0>)
    be96:	46b8      	mov	r8, r7
	int length = 0;
    be98:	2600      	movs	r6, #0
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    be9a:	46b3      	mov	fp, r6
    be9c:	e003      	b.n	bea6 <CFastLED::show(unsigned char)+0x52>
    CLEDController *next() { return m_pNext; }
    be9e:	68a4      	ldr	r4, [r4, #8]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bea0:	b1f4      	cbz	r4, bee0 <CFastLED::show(unsigned char)+0x8c>
    bea2:	2e3f      	cmp	r6, #63	; 0x3f
    bea4:	dc1c      	bgt.n	bee0 <CFastLED::show(unsigned char)+0x8c>
		gControllersData[length++] = pCur->beginShowLeds(pCur->size());
    bea6:	6823      	ldr	r3, [r4, #0]
    bea8:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
    beac:	69db      	ldr	r3, [r3, #28]
    beae:	4620      	mov	r0, r4
    beb0:	4798      	blx	r3
    beb2:	4601      	mov	r1, r0
    beb4:	4620      	mov	r0, r4
    beb6:	47d0      	blx	sl
    beb8:	3601      	adds	r6, #1
    beba:	f848 0b04 	str.w	r0, [r8], #4
		if (m_nFPS < 100) { pCur->setDither(0); }
    bebe:	886b      	ldrh	r3, [r5, #2]
    bec0:	2b63      	cmp	r3, #99	; 0x63
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bec2:	bf98      	it	ls
    bec4:	f884 b012 	strbls.w	fp, [r4, #18]
        if (m_enabled) {
    bec8:	7ce3      	ldrb	r3, [r4, #19]
    beca:	2b00      	cmp	r3, #0
    becc:	d0e7      	beq.n	be9e <CFastLED::show(unsigned char)+0x4a>
            show(m_Data, m_nLeds, brightness);
    bece:	6823      	ldr	r3, [r4, #0]
    bed0:	f8d3 a004 	ldr.w	sl, [r3, #4]
    bed4:	464b      	mov	r3, r9
    bed6:	6962      	ldr	r2, [r4, #20]
    bed8:	6861      	ldr	r1, [r4, #4]
    beda:	4620      	mov	r0, r4
    bedc:	47d0      	blx	sl
    bede:	e7de      	b.n	be9e <CFastLED::show(unsigned char)+0x4a>
    static CLEDController *head() { return m_pHead; }
    bee0:	4b0f      	ldr	r3, [pc, #60]	; (bf20 <CFastLED::show(unsigned char)+0xcc>)
    bee2:	681c      	ldr	r4, [r3, #0]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bee4:	b15c      	cbz	r4, befe <CFastLED::show(unsigned char)+0xaa>
	length = 0;  // Reset length to 0 and iterate again.
    bee6:	2600      	movs	r6, #0
		pCur->endShowLeds(gControllersData[length++]);
    bee8:	3601      	adds	r6, #1
    beea:	6823      	ldr	r3, [r4, #0]
    beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    beee:	f857 1b04 	ldr.w	r1, [r7], #4
    bef2:	4620      	mov	r0, r4
    bef4:	4798      	blx	r3
    CLEDController *next() { return m_pNext; }
    bef6:	68a4      	ldr	r4, [r4, #8]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bef8:	b10c      	cbz	r4, befe <CFastLED::show(unsigned char)+0xaa>
    befa:	2e3f      	cmp	r6, #63	; 0x3f
    befc:	ddf4      	ble.n	bee8 <CFastLED::show(unsigned char)+0x94>
	countFPS();
    befe:	2119      	movs	r1, #25
    bf00:	4628      	mov	r0, r5
    bf02:	f7ff ff83 	bl	be0c <CFastLED::countFPS(int)>
        #endif
    }
    
    static void onEndShowLeds() {
        #if FASTLED_HAS_ENGINE_EVENTS
        EngineEvents::getInstance()->_onEndShowLeds();
    bf06:	f000 f997 	bl	c238 <fl::EngineEvents::getInstance()>
    bf0a:	f000 f9ca 	bl	c2a2 <fl::EngineEvents::_onEndShowLeds()>
        #endif
    }
    
    static void onEndFrame() {
        #if FASTLED_HAS_ENGINE_EVENTS
        EngineEvents::getInstance()->_onEndFrame();
    bf0e:	f000 f993 	bl	c238 <fl::EngineEvents::getInstance()>
    bf12:	f000 f9df 	bl	c2d4 <fl::EngineEvents::_onEndFrame()>
}
    bf16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf1a:	bf00      	nop
    bf1c:	20006c94 	.word	0x20006c94
    bf20:	20006e54 	.word	0x20006e54
    bf24:	20006b68 	.word	0x20006b68

0000bf28 <CFastLED::delay(unsigned long)>:
void CFastLED::delay(unsigned long ms) {
    bf28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf2a:	4604      	mov	r4, r0
    bf2c:	460d      	mov	r5, r1
    bf2e:	4b07      	ldr	r3, [pc, #28]	; (bf4c <CFastLED::delay(unsigned long)+0x24>)
    bf30:	681f      	ldr	r7, [r3, #0]
    bf32:	461e      	mov	r6, r3
	void show() { show(m_Scale); }
    bf34:	7821      	ldrb	r1, [r4, #0]
    bf36:	4620      	mov	r0, r4
    bf38:	f7ff ff8c 	bl	be54 <CFastLED::show(unsigned char)>
		yield();
    bf3c:	f7ff ff4a 	bl	bdd4 <yield>
    bf40:	6833      	ldr	r3, [r6, #0]
	while((millis()-start) < ms);
    bf42:	1bdb      	subs	r3, r3, r7
    bf44:	42ab      	cmp	r3, r5
    bf46:	d3f5      	bcc.n	bf34 <CFastLED::delay(unsigned long)+0xc>
}
    bf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bf4a:	bf00      	nop
    bf4c:	20008a6c 	.word	0x20008a6c

0000bf50 <CFastLED::showColor(CRGB const&, unsigned char)>:
void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    bf50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bf54:	b083      	sub	sp, #12
    bf56:	4605      	mov	r5, r0
    bf58:	9100      	str	r1, [sp, #0]
    bf5a:	4692      	mov	sl, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    bf5c:	4c2b      	ldr	r4, [pc, #172]	; (c00c <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    bf5e:	686b      	ldr	r3, [r5, #4]
    bf60:	b133      	cbz	r3, bf70 <CFastLED::showColor(CRGB const&, unsigned char)+0x20>
    bf62:	f00a fe5d 	bl	16c20 <micros>
    bf66:	6823      	ldr	r3, [r4, #0]
    bf68:	1ac0      	subs	r0, r0, r3
    bf6a:	686b      	ldr	r3, [r5, #4]
    bf6c:	4298      	cmp	r0, r3
    bf6e:	d3f6      	bcc.n	bf5e <CFastLED::showColor(CRGB const&, unsigned char)+0xe>
	lastshow = micros();
    bf70:	f00a fe56 	bl	16c20 <micros>
    bf74:	4b25      	ldr	r3, [pc, #148]	; (c00c <CFastLED::showColor(CRGB const&, unsigned char)+0xbc>)
    bf76:	6018      	str	r0, [r3, #0]
	if(m_pPowerFunc) {
    bf78:	68eb      	ldr	r3, [r5, #12]
    bf7a:	b11b      	cbz	r3, bf84 <CFastLED::showColor(CRGB const&, unsigned char)+0x34>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    bf7c:	68a9      	ldr	r1, [r5, #8]
    bf7e:	4650      	mov	r0, sl
    bf80:	4798      	blx	r3
    bf82:	4682      	mov	sl, r0
    static CLEDController *head() { return m_pHead; }
    bf84:	4b22      	ldr	r3, [pc, #136]	; (c010 <CFastLED::showColor(CRGB const&, unsigned char)+0xc0>)
    bf86:	681c      	ldr	r4, [r3, #0]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bf88:	2c00      	cmp	r4, #0
    bf8a:	d038      	beq.n	bffe <CFastLED::showColor(CRGB const&, unsigned char)+0xae>
    bf8c:	4f21      	ldr	r7, [pc, #132]	; (c014 <CFastLED::showColor(CRGB const&, unsigned char)+0xc4>)
    bf8e:	46b8      	mov	r8, r7
	int length = 0;
    bf90:	2600      	movs	r6, #0
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bf92:	46b3      	mov	fp, r6
    bf94:	9701      	str	r7, [sp, #4]
    bf96:	46a9      	mov	r9, r5
    bf98:	9f00      	ldr	r7, [sp, #0]
    bf9a:	e003      	b.n	bfa4 <CFastLED::showColor(CRGB const&, unsigned char)+0x54>
    CLEDController *next() { return m_pNext; }
    bf9c:	68a4      	ldr	r4, [r4, #8]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bf9e:	b1ec      	cbz	r4, bfdc <CFastLED::showColor(CRGB const&, unsigned char)+0x8c>
    bfa0:	2e3f      	cmp	r6, #63	; 0x3f
    bfa2:	dc1b      	bgt.n	bfdc <CFastLED::showColor(CRGB const&, unsigned char)+0x8c>
		gControllersData[length++] = pCur->beginShowLeds(pCur->size());
    bfa4:	6823      	ldr	r3, [r4, #0]
    bfa6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
    bfa8:	69db      	ldr	r3, [r3, #28]
    bfaa:	4620      	mov	r0, r4
    bfac:	4798      	blx	r3
    bfae:	4601      	mov	r1, r0
    bfb0:	4620      	mov	r0, r4
    bfb2:	47a8      	blx	r5
    bfb4:	3601      	adds	r6, #1
    bfb6:	f848 0b04 	str.w	r0, [r8], #4
		if(m_nFPS < 100) { pCur->setDither(0); }
    bfba:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    bfbe:	2b63      	cmp	r3, #99	; 0x63
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    bfc0:	bf98      	it	ls
    bfc2:	f884 b012 	strbls.w	fp, [r4, #18]
        if (m_enabled) {
    bfc6:	7ce3      	ldrb	r3, [r4, #19]
    bfc8:	2b00      	cmp	r3, #0
    bfca:	d0e7      	beq.n	bf9c <CFastLED::showColor(CRGB const&, unsigned char)+0x4c>
            showColor(data, m_nLeds, brightness);
    bfcc:	6823      	ldr	r3, [r4, #0]
    bfce:	681d      	ldr	r5, [r3, #0]
    bfd0:	4653      	mov	r3, sl
    bfd2:	6962      	ldr	r2, [r4, #20]
    bfd4:	4639      	mov	r1, r7
    bfd6:	4620      	mov	r0, r4
    bfd8:	47a8      	blx	r5
    bfda:	e7df      	b.n	bf9c <CFastLED::showColor(CRGB const&, unsigned char)+0x4c>
    static CLEDController *head() { return m_pHead; }
    bfdc:	9f01      	ldr	r7, [sp, #4]
    bfde:	464d      	mov	r5, r9
    bfe0:	4b0b      	ldr	r3, [pc, #44]	; (c010 <CFastLED::showColor(CRGB const&, unsigned char)+0xc0>)
    bfe2:	681c      	ldr	r4, [r3, #0]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bfe4:	b15c      	cbz	r4, bffe <CFastLED::showColor(CRGB const&, unsigned char)+0xae>
	length = 0;  // Reset length to 0 and iterate again.
    bfe6:	2600      	movs	r6, #0
		pCur->endShowLeds(gControllersData[length++]);
    bfe8:	3601      	adds	r6, #1
    bfea:	6823      	ldr	r3, [r4, #0]
    bfec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    bfee:	f857 1b04 	ldr.w	r1, [r7], #4
    bff2:	4620      	mov	r0, r4
    bff4:	4798      	blx	r3
    CLEDController *next() { return m_pNext; }
    bff6:	68a4      	ldr	r4, [r4, #8]
	while(pCur && length < MAX_CLED_CONTROLLERS) {
    bff8:	b10c      	cbz	r4, bffe <CFastLED::showColor(CRGB const&, unsigned char)+0xae>
    bffa:	2e3f      	cmp	r6, #63	; 0x3f
    bffc:	ddf4      	ble.n	bfe8 <CFastLED::showColor(CRGB const&, unsigned char)+0x98>
	countFPS();
    bffe:	2119      	movs	r1, #25
    c000:	4628      	mov	r0, r5
    c002:	f7ff ff03 	bl	be0c <CFastLED::countFPS(int)>
}
    c006:	b003      	add	sp, #12
    c008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c00c:	20006c94 	.word	0x20006c94
    c010:	20006e54 	.word	0x20006e54
    c014:	20006b68 	.word	0x20006b68

0000c018 <CFastLED::clear(bool)>:
void CFastLED::clear(bool writeData) {
    c018:	b510      	push	{r4, lr}
    c01a:	b082      	sub	sp, #8
    c01c:	4604      	mov	r4, r0
	if(writeData) {
    c01e:	b921      	cbnz	r1, c02a <CFastLED::clear(bool)+0x12>
    clearData();
    c020:	4620      	mov	r0, r4
    c022:	f7ff fee3 	bl	bdec <CFastLED::clearData()>
}
    c026:	b002      	add	sp, #8
    c028:	bd10      	pop	{r4, pc}
    c02a:	2200      	movs	r2, #0
    c02c:	f88d 2004 	strb.w	r2, [sp, #4]
    c030:	f88d 2005 	strb.w	r2, [sp, #5]
    c034:	f88d 2006 	strb.w	r2, [sp, #6]
		showColor(CRGB(0,0,0), 0);
    c038:	a901      	add	r1, sp, #4
    c03a:	f7ff ff89 	bl	bf50 <CFastLED::showColor(CRGB const&, unsigned char)>
    c03e:	e7ef      	b.n	c020 <CFastLED::clear(bool)+0x8>

0000c040 <CFastLED::setMaxRefreshRate(unsigned short, bool)>:

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
	if(constrain) {
    c040:	b14a      	cbz	r2, c056 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x16>
		// if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
		// allowed to slow things down if constraining)
		if(refresh > 0) {
    c042:	b181      	cbz	r1, c066 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x26>
			m_nMinMicros = ((1000000 / refresh) > m_nMinMicros) ? (1000000 / refresh) : m_nMinMicros;
    c044:	4a08      	ldr	r2, [pc, #32]	; (c068 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x28>)
    c046:	fb92 f2f1 	sdiv	r2, r2, r1
    c04a:	6843      	ldr	r3, [r0, #4]
    c04c:	4293      	cmp	r3, r2
    c04e:	bf38      	it	cc
    c050:	4613      	movcc	r3, r2
    c052:	6043      	str	r3, [r0, #4]
    c054:	4770      	bx	lr
		}
	} else if(refresh > 0) {
    c056:	b121      	cbz	r1, c062 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x22>
		m_nMinMicros = 1000000 / refresh;
    c058:	4b03      	ldr	r3, [pc, #12]	; (c068 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x28>)
    c05a:	fb93 f3f1 	sdiv	r3, r3, r1
    c05e:	6043      	str	r3, [r0, #4]
    c060:	4770      	bx	lr
	} else {
		m_nMinMicros = 0;
    c062:	2300      	movs	r3, #0
    c064:	6043      	str	r3, [r0, #4]
	}
}
    c066:	4770      	bx	lr
    c068:	000f4240 	.word	0x000f4240

0000c06c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
								  int nLedsOrOffset, int nLedsIfOffset) {
    c06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c070:	4604      	mov	r4, r0
    c072:	460e      	mov	r6, r1
    c074:	4615      	mov	r5, r2
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    c076:	f1b3 0800 	subs.w	r8, r3, #0
    c07a:	bfce      	itee	gt
    c07c:	4617      	movgt	r7, r2
    c07e:	2700      	movle	r7, #0
    c080:	4690      	movle	r8, r2
	pLed->init();
    c082:	6803      	ldr	r3, [r0, #0]
    c084:	691b      	ldr	r3, [r3, #16]
    c086:	4798      	blx	r3
	pLed->setLeds(data + nOffset, nLeds);
    c088:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    c08c:	441e      	add	r6, r3
        m_Data = data;
    c08e:	6066      	str	r6, [r4, #4]
        m_nLeds = nLeds;
    c090:	f8c4 8014 	str.w	r8, [r4, #20]
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    c094:	6823      	ldr	r3, [r4, #0]
    c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    c098:	4620      	mov	r0, r4
    c09a:	4798      	blx	r3
    c09c:	4601      	mov	r1, r0
    c09e:	2201      	movs	r2, #1
    c0a0:	4805      	ldr	r0, [pc, #20]	; (c0b8 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
    c0a2:	f7ff ffcd 	bl	c040 <CFastLED::setMaxRefreshRate(unsigned short, bool)>
        #endif
    }
    
    static void onStripAdded(CLEDController *strip, uint32_t num_leds) {
        #if FASTLED_HAS_ENGINE_EVENTS
        EngineEvents::getInstance()->_onStripAdded(strip, num_leds);
    c0a6:	f000 f8c7 	bl	c238 <fl::EngineEvents::getInstance()>
    c0aa:	1bea      	subs	r2, r5, r7
    c0ac:	4621      	mov	r1, r4
    c0ae:	f000 f92a 	bl	c306 <fl::EngineEvents::_onStripAdded(CLEDController*, unsigned long)>
}
    c0b2:	4620      	mov	r0, r4
    c0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c0b8:	20006668 	.word	0x20006668

0000c0bc <_GLOBAL__sub_I__Z19cled_contoller_sizev>:


uint8_t get_brightness() {
	return FastLED.getBrightness();
}
    c0bc:	b508      	push	{r3, lr}
CFastLED FastLED;
    c0be:	4802      	ldr	r0, [pc, #8]	; (c0c8 <_GLOBAL__sub_I__Z19cled_contoller_sizev+0xc>)
    c0c0:	f7ff fe89 	bl	bdd6 <CFastLED::CFastLED()>
}
    c0c4:	bd08      	pop	{r3, pc}
    c0c6:	bf00      	nop
    c0c8:	20006668 	.word	0x20006668

0000c0cc <CLEDController::lanes()>:
    virtual int lanes() { return 1; }
    c0cc:	2001      	movs	r0, #1
    c0ce:	4770      	bx	lr

0000c0d0 <CLEDController::~CLEDController()>:

#include "cled_controller.h"

FASTLED_NAMESPACE_BEGIN

CLEDController::~CLEDController() = default;
    c0d0:	4770      	bx	lr
	...

0000c0d4 <CLEDController::CLEDController()>:

/// Create an led controller object, add it to the chain of controllers
CLEDController::CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    c0d4:	4b11      	ldr	r3, [pc, #68]	; (c11c <CLEDController::CLEDController()+0x48>)
    c0d6:	6003      	str	r3, [r0, #0]
    c0d8:	2200      	movs	r2, #0
    c0da:	6042      	str	r2, [r0, #4]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    c0dc:	23ff      	movs	r3, #255	; 0xff
    c0de:	7303      	strb	r3, [r0, #12]
    c0e0:	7343      	strb	r3, [r0, #13]
    c0e2:	7383      	strb	r3, [r0, #14]
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    c0e4:	73c3      	strb	r3, [r0, #15]
    c0e6:	7403      	strb	r3, [r0, #16]
    c0e8:	7443      	strb	r3, [r0, #17]
    c0ea:	2301      	movs	r3, #1
    c0ec:	7483      	strb	r3, [r0, #18]
    c0ee:	74c3      	strb	r3, [r0, #19]
    c0f0:	6142      	str	r2, [r0, #20]
    c0f2:	f241 7370 	movw	r3, #6000	; 0x1770
    c0f6:	8303      	strh	r3, [r0, #24]
    c0f8:	2303      	movs	r3, #3
    c0fa:	7683      	strb	r3, [r0, #26]
    c0fc:	76c2      	strb	r2, [r0, #27]
    m_pNext = NULL;
    c0fe:	6082      	str	r2, [r0, #8]
    if(m_pHead==NULL) { m_pHead = this; }
    c100:	4b07      	ldr	r3, [pc, #28]	; (c120 <CLEDController::CLEDController()+0x4c>)
    c102:	681b      	ldr	r3, [r3, #0]
    c104:	b133      	cbz	r3, c114 <CLEDController::CLEDController()+0x40>
    if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    c106:	4b07      	ldr	r3, [pc, #28]	; (c124 <CLEDController::CLEDController()+0x50>)
    c108:	681b      	ldr	r3, [r3, #0]
    c10a:	b103      	cbz	r3, c10e <CLEDController::CLEDController()+0x3a>
    c10c:	6098      	str	r0, [r3, #8]
    m_pTail = this;
    c10e:	4b05      	ldr	r3, [pc, #20]	; (c124 <CLEDController::CLEDController()+0x50>)
    c110:	6018      	str	r0, [r3, #0]
}
    c112:	4770      	bx	lr
    if(m_pHead==NULL) { m_pHead = this; }
    c114:	4b02      	ldr	r3, [pc, #8]	; (c120 <CLEDController::CLEDController()+0x4c>)
    c116:	6018      	str	r0, [r3, #0]
    c118:	e7f5      	b.n	c106 <CLEDController::CLEDController()+0x32>
    c11a:	bf00      	nop
    c11c:	200025a8 	.word	0x200025a8
    c120:	20006e54 	.word	0x20006e54
    c124:	20006e58 	.word	0x20006e58

0000c128 <CLEDController::clearLedDataInternal(int)>:



void CLEDController::clearLedDataInternal(int nLeds) {
    c128:	b508      	push	{r3, lr}
    c12a:	4603      	mov	r3, r0
    if(m_Data) {
    c12c:	6840      	ldr	r0, [r0, #4]
    c12e:	b158      	cbz	r0, c148 <CLEDController::clearLedDataInternal(int)+0x20>
        nLeds = (nLeds < 0) ? m_nLeds : nLeds;
    c130:	2900      	cmp	r1, #0
    c132:	bfb8      	it	lt
    c134:	6959      	ldrlt	r1, [r3, #20]
        nLeds = (nLeds > m_nLeds) ? m_nLeds : nLeds;
        memset((void*)m_Data, 0, sizeof(struct CRGB) * nLeds);
    c136:	695b      	ldr	r3, [r3, #20]
    c138:	4299      	cmp	r1, r3
    c13a:	bfa8      	it	ge
    c13c:	4619      	movge	r1, r3
    c13e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    c142:	2100      	movs	r1, #0
    c144:	f016 ff88 	bl	23058 <memset>
    }

}
    c148:	bd08      	pop	{r3, pc}

0000c14a <CLEDController::getAdjustmentData(unsigned char)>:

ColorAdjustment CLEDController::getAdjustmentData(uint8_t brightness) {
    c14a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c14c:	b085      	sub	sp, #20
    c14e:	4604      	mov	r4, r0
    c150:	4616      	mov	r6, r2
        return CRGB::computeAdjustment(scale, m_ColorCorrection, m_ColorTemperature);
    c152:	f101 070c 	add.w	r7, r1, #12
    c156:	f101 050f 	add.w	r5, r1, #15
    c15a:	462a      	mov	r2, r5
    c15c:	4639      	mov	r1, r7
    c15e:	4630      	mov	r0, r6
    c160:	f000 f830 	bl	c1c4 <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    c164:	f88d 000c 	strb.w	r0, [sp, #12]
    c168:	f3c0 2307 	ubfx	r3, r0, #8, #8
    c16c:	f88d 300d 	strb.w	r3, [sp, #13]
    c170:	f3c0 4007 	ubfx	r0, r0, #16, #8
    c174:	f88d 000e 	strb.w	r0, [sp, #14]
    c178:	9b03      	ldr	r3, [sp, #12]
    c17a:	f8ad 3008 	strh.w	r3, [sp, #8]
    // *premixed = getAdjustment(brightness);
    // if (color_correction) {
    //     *color_correction = getAdjustment(255);
    // }
    #if FASTLED_HD_COLOR_MIXING
    ColorAdjustment out = {this->getAdjustment(brightness), this->getAdjustment(255), brightness};
    c17e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    c182:	f3c3 4307 	ubfx	r3, r3, #16, #8
    c186:	8022      	strh	r2, [r4, #0]
    c188:	70a3      	strb	r3, [r4, #2]
    c18a:	462a      	mov	r2, r5
    c18c:	4639      	mov	r1, r7
    c18e:	20ff      	movs	r0, #255	; 0xff
    c190:	f000 f818 	bl	c1c4 <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    c194:	f88d 0004 	strb.w	r0, [sp, #4]
    c198:	f3c0 2307 	ubfx	r3, r0, #8, #8
    c19c:	f88d 3005 	strb.w	r3, [sp, #5]
    c1a0:	f3c0 4007 	ubfx	r0, r0, #16, #8
    c1a4:	f88d 0006 	strb.w	r0, [sp, #6]
    c1a8:	9b01      	ldr	r3, [sp, #4]
    c1aa:	f8ad 3000 	strh.w	r3, [sp]
    c1ae:	f8bd 2000 	ldrh.w	r2, [sp]
    c1b2:	f3c3 4307 	ubfx	r3, r3, #16, #8
    c1b6:	f8a4 2003 	strh.w	r2, [r4, #3]
    c1ba:	7163      	strb	r3, [r4, #5]
    c1bc:	71a6      	strb	r6, [r4, #6]
    #else
    ColorAdjustment out = {getAdjustment(brightness)};
    #endif
    return out;
}
    c1be:	4620      	mov	r0, r4
    c1c0:	b005      	add	sp, #20
    c1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c1c4 <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
    out.append(int16_t(b));
    out.append(")");
    return out;
}

CRGB CRGB::computeAdjustment(uint8_t scale, const CRGB & colorCorrection, const CRGB & colorTemperature) {
    c1c4:	b510      	push	{r4, lr}
    c1c6:	b082      	sub	sp, #8
    #if defined(NO_CORRECTION) && (NO_CORRECTION==1)
            return CRGB(scale,scale,scale);
    #else
            CRGB adj(0,0,0);
    c1c8:	2300      	movs	r3, #0
    c1ca:	f88d 3000 	strb.w	r3, [sp]
    c1ce:	f88d 3001 	strb.w	r3, [sp, #1]
    c1d2:	f88d 3002 	strb.w	r3, [sp, #2]
            if(scale > 0) {
    c1d6:	b1d0      	cbz	r0, c20e <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x4a>
    c1d8:	4686      	mov	lr, r0
    c1da:	1e48      	subs	r0, r1, #1
    c1dc:	3a01      	subs	r2, #1
    c1de:	46ec      	mov	ip, sp
    c1e0:	3102      	adds	r1, #2
    c1e2:	e00b      	b.n	c1fc <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x38>
                    uint8_t ct = colorTemperature.raw[i];
                    if(cc > 0 && ct > 0) {
                        // Optimized for AVR size. This function is only called very infrequently so size
                        // matters more than speed.
                        uint32_t work = (((uint16_t)cc)+1);
                        work *= (((uint16_t)ct)+1);
    c1e4:	3301      	adds	r3, #1
    c1e6:	fb04 3303 	mla	r3, r4, r3, r3
                        work *= scale;
    c1ea:	fb03 f30e 	mul.w	r3, r3, lr
                        work /= 0x10000L;
    c1ee:	0c1b      	lsrs	r3, r3, #16
                        adj.raw[i] = work & 0xFF;
    c1f0:	f88c 3000 	strb.w	r3, [ip]
                for(uint8_t i = 0; i < 3; ++i) {
    c1f4:	f10c 0c01 	add.w	ip, ip, #1
    c1f8:	4288      	cmp	r0, r1
    c1fa:	d008      	beq.n	c20e <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x4a>
                    uint8_t cc = colorCorrection.raw[i];
    c1fc:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                    uint8_t ct = colorTemperature.raw[i];
    c200:	f812 3f01 	ldrb.w	r3, [r2, #1]!
                    if(cc > 0 && ct > 0) {
    c204:	2c00      	cmp	r4, #0
    c206:	d0f5      	beq.n	c1f4 <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x30>
    c208:	2b00      	cmp	r3, #0
    c20a:	d1eb      	bne.n	c1e4 <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x20>
    c20c:	e7f2      	b.n	c1f4 <CRGB::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x30>
                    }
                }
            }
            return adj;
    c20e:	9b00      	ldr	r3, [sp, #0]
    c210:	2000      	movs	r0, #0
    c212:	b2da      	uxtb	r2, r3
    c214:	f362 0007 	bfi	r0, r2, #0, #8
    c218:	f3c3 2207 	ubfx	r2, r3, #8, #8
    c21c:	f362 200f 	bfi	r0, r2, #8, #8
    c220:	f3c3 4307 	ubfx	r3, r3, #16, #8
    c224:	f363 4017 	bfi	r0, r3, #16, #8
    #endif
}
    c228:	b002      	add	sp, #8
    c22a:	bd10      	pop	{r4, pc}

0000c22c <fl::EngineEvents::~EngineEvents()>:
        while (current_size > 0) {
    c22c:	6c03      	ldr	r3, [r0, #64]	; 0x40
    c22e:	b10b      	cbz	r3, c234 <fl::EngineEvents::~EngineEvents()+0x8>
    c230:	3b01      	subs	r3, #1
    c232:	d1fd      	bne.n	c230 <fl::EngineEvents::~EngineEvents()+0x4>
class EngineEvents {
    c234:	4770      	bx	lr
	...

0000c238 <fl::EngineEvents::getInstance()>:
        ptr->_removeListener(this);
    }
    #endif
}

EngineEvents* EngineEvents::getInstance() {
    c238:	b508      	push	{r3, lr}
// A templated singleton class, parameterized by the type of the singleton and an optional integer.
template<typename T, int N = 0>
class Singleton {
public:
    static T& instance() {
        static T instance;
    c23a:	4b09      	ldr	r3, [pc, #36]	; (c260 <fl::EngineEvents::getInstance()+0x28>)
    c23c:	681b      	ldr	r3, [r3, #0]
    c23e:	f013 0f01 	tst.w	r3, #1
    c242:	d001      	beq.n	c248 <fl::EngineEvents::getInstance()+0x10>
    #if FASTLED_HAS_ENGINE_EVENTS
    return &Singleton<EngineEvents>::instance();
    #else
    return nullptr;  // strip out when engine events are disabled.
    #endif
}
    c244:	4807      	ldr	r0, [pc, #28]	; (c264 <fl::EngineEvents::getInstance()+0x2c>)
    c246:	bd08      	pop	{r3, pc}
    constexpr FixedVector() : current_size(0) {}
    c248:	4806      	ldr	r0, [pc, #24]	; (c264 <fl::EngineEvents::getInstance()+0x2c>)
    c24a:	2300      	movs	r3, #0
    c24c:	6403      	str	r3, [r0, #64]	; 0x40
    c24e:	4b04      	ldr	r3, [pc, #16]	; (c260 <fl::EngineEvents::getInstance()+0x28>)
    c250:	2201      	movs	r2, #1
    c252:	601a      	str	r2, [r3, #0]
    c254:	4a04      	ldr	r2, [pc, #16]	; (c268 <fl::EngineEvents::getInstance()+0x30>)
    c256:	4905      	ldr	r1, [pc, #20]	; (c26c <fl::EngineEvents::getInstance()+0x34>)
    c258:	f00d fa76 	bl	19748 <__aeabi_atexit>
    c25c:	e7f2      	b.n	c244 <fl::EngineEvents::getInstance()+0xc>
    c25e:	bf00      	nop
    c260:	20006b4c 	.word	0x20006b4c
    c264:	20006fe0 	.word	0x20006fe0
    c268:	20005258 	.word	0x20005258
    c26c:	0000c22d 	.word	0x0000c22d

0000c270 <fl::EngineEvents::_onBeginFrame()>:
    if (it != mListeners.end()) {
        mListeners.erase(it);
    }
}

void EngineEvents::_onBeginFrame() {
    c270:	b570      	push	{r4, r5, r6, lr}
    c272:	b092      	sub	sp, #72	; 0x48
    c274:	4601      	mov	r1, r0
    // Make the copy of the listener list to avoid issues with listeners being added or removed during the loop.
    ListenerList copy = mListeners;
    c276:	ad01      	add	r5, sp, #4
    c278:	2244      	movs	r2, #68	; 0x44
    c27a:	4628      	mov	r0, r5
    c27c:	f00b f838 	bl	172f0 <memcpy>
    }

    // Iterator support
    iterator begin() { return &mData[0]; }
    const_iterator begin() const { return &mData[0]; }
    iterator end() { return &mData[current_size]; }
    c280:	9c11      	ldr	r4, [sp, #68]	; 0x44
    c282:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
    for (auto& item : copy) {
    c286:	42ae      	cmp	r6, r5
    c288:	d006      	beq.n	c298 <fl::EngineEvents::_onBeginFrame()+0x28>
        auto listener = item.listener;
    c28a:	f855 0b08 	ldr.w	r0, [r5], #8
        listener->onBeginFrame();
    c28e:	6803      	ldr	r3, [r0, #0]
    c290:	689b      	ldr	r3, [r3, #8]
    c292:	4798      	blx	r3
    for (auto& item : copy) {
    c294:	42ae      	cmp	r6, r5
    c296:	d1f8      	bne.n	c28a <fl::EngineEvents::_onBeginFrame()+0x1a>
        while (current_size > 0) {
    c298:	b10c      	cbz	r4, c29e <fl::EngineEvents::_onBeginFrame()+0x2e>
    c29a:	3c01      	subs	r4, #1
    c29c:	d1fd      	bne.n	c29a <fl::EngineEvents::_onBeginFrame()+0x2a>
    }
}
    c29e:	b012      	add	sp, #72	; 0x48
    c2a0:	bd70      	pop	{r4, r5, r6, pc}

0000c2a2 <fl::EngineEvents::_onEndShowLeds()>:

void EngineEvents::_onEndShowLeds() {
    c2a2:	b570      	push	{r4, r5, r6, lr}
    c2a4:	b092      	sub	sp, #72	; 0x48
    c2a6:	4601      	mov	r1, r0
    // Make the copy of the listener list to avoid issues with listeners being added or removed during the loop.
    ListenerList copy = mListeners;
    c2a8:	ad01      	add	r5, sp, #4
    c2aa:	2244      	movs	r2, #68	; 0x44
    c2ac:	4628      	mov	r0, r5
    c2ae:	f00b f81f 	bl	172f0 <memcpy>
    iterator end() { return &mData[current_size]; }
    c2b2:	9c11      	ldr	r4, [sp, #68]	; 0x44
    c2b4:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
    for (auto& item : copy) {
    c2b8:	42ae      	cmp	r6, r5
    c2ba:	d006      	beq.n	c2ca <fl::EngineEvents::_onEndShowLeds()+0x28>
        auto listener = item.listener;
    c2bc:	f855 0b08 	ldr.w	r0, [r5], #8
        listener->onEndShowLeds();
    c2c0:	6803      	ldr	r3, [r0, #0]
    c2c2:	68db      	ldr	r3, [r3, #12]
    c2c4:	4798      	blx	r3
    for (auto& item : copy) {
    c2c6:	42ae      	cmp	r6, r5
    c2c8:	d1f8      	bne.n	c2bc <fl::EngineEvents::_onEndShowLeds()+0x1a>
        while (current_size > 0) {
    c2ca:	b10c      	cbz	r4, c2d0 <fl::EngineEvents::_onEndShowLeds()+0x2e>
    c2cc:	3c01      	subs	r4, #1
    c2ce:	d1fd      	bne.n	c2cc <fl::EngineEvents::_onEndShowLeds()+0x2a>
    }
}
    c2d0:	b012      	add	sp, #72	; 0x48
    c2d2:	bd70      	pop	{r4, r5, r6, pc}

0000c2d4 <fl::EngineEvents::_onEndFrame()>:

void EngineEvents::_onEndFrame() {
    c2d4:	b570      	push	{r4, r5, r6, lr}
    c2d6:	b092      	sub	sp, #72	; 0x48
    c2d8:	4601      	mov	r1, r0
    // Make the copy of the listener list to avoid issues with listeners being added or removed during the loop.
    ListenerList copy = mListeners;
    c2da:	ad01      	add	r5, sp, #4
    c2dc:	2244      	movs	r2, #68	; 0x44
    c2de:	4628      	mov	r0, r5
    c2e0:	f00b f806 	bl	172f0 <memcpy>
    iterator end() { return &mData[current_size]; }
    c2e4:	9c11      	ldr	r4, [sp, #68]	; 0x44
    c2e6:	eb05 06c4 	add.w	r6, r5, r4, lsl #3
    for (auto& item : copy) {
    c2ea:	42ae      	cmp	r6, r5
    c2ec:	d006      	beq.n	c2fc <fl::EngineEvents::_onEndFrame()+0x28>
        auto listener = item.listener;
    c2ee:	f855 0b08 	ldr.w	r0, [r5], #8
        listener->onEndFrame();
    c2f2:	6803      	ldr	r3, [r0, #0]
    c2f4:	691b      	ldr	r3, [r3, #16]
    c2f6:	4798      	blx	r3
    for (auto& item : copy) {
    c2f8:	42ae      	cmp	r6, r5
    c2fa:	d1f8      	bne.n	c2ee <fl::EngineEvents::_onEndFrame()+0x1a>
        while (current_size > 0) {
    c2fc:	b10c      	cbz	r4, c302 <fl::EngineEvents::_onEndFrame()+0x2e>
    c2fe:	3c01      	subs	r4, #1
    c300:	d1fd      	bne.n	c2fe <fl::EngineEvents::_onEndFrame()+0x2a>
    }
}
    c302:	b012      	add	sp, #72	; 0x48
    c304:	bd70      	pop	{r4, r5, r6, pc}

0000c306 <fl::EngineEvents::_onStripAdded(CLEDController*, unsigned long)>:

void EngineEvents::_onStripAdded(CLEDController* strip, uint32_t num_leds) {
    c306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c30a:	b092      	sub	sp, #72	; 0x48
    c30c:	460e      	mov	r6, r1
    c30e:	4617      	mov	r7, r2
    // Make the copy of the listener list to avoid issues with listeners being added or removed during the loop.
    ListenerList copy = mListeners;
    c310:	ad01      	add	r5, sp, #4
    c312:	2244      	movs	r2, #68	; 0x44
    c314:	4601      	mov	r1, r0
    c316:	4628      	mov	r0, r5
    c318:	f00a ffea 	bl	172f0 <memcpy>
    iterator end() { return &mData[current_size]; }
    c31c:	9c11      	ldr	r4, [sp, #68]	; 0x44
    c31e:	eb05 08c4 	add.w	r8, r5, r4, lsl #3
    for (auto& item : copy) {
    c322:	45a8      	cmp	r8, r5
    c324:	d008      	beq.n	c338 <fl::EngineEvents::_onStripAdded(CLEDController*, unsigned long)+0x32>
        auto listener = item.listener;
    c326:	f855 0b08 	ldr.w	r0, [r5], #8
        listener->onStripAdded(strip, num_leds);
    c32a:	6803      	ldr	r3, [r0, #0]
    c32c:	695b      	ldr	r3, [r3, #20]
    c32e:	463a      	mov	r2, r7
    c330:	4631      	mov	r1, r6
    c332:	4798      	blx	r3
    for (auto& item : copy) {
    c334:	45a8      	cmp	r8, r5
    c336:	d1f6      	bne.n	c326 <fl::EngineEvents::_onStripAdded(CLEDController*, unsigned long)+0x20>
        while (current_size > 0) {
    c338:	b10c      	cbz	r4, c33e <fl::EngineEvents::_onStripAdded(CLEDController*, unsigned long)+0x38>
    c33a:	3c01      	subs	r4, #1
    c33c:	d1fd      	bne.n	c33a <fl::EngineEvents::_onStripAdded(CLEDController*, unsigned long)+0x34>
    }
}
    c33e:	b012      	add	sp, #72	; 0x48
    c340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c344 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
    c344:	b510      	push	{r4, lr}
    c346:	4604      	mov	r4, r0
		release();
    c348:	f009 fd7a 	bl	15e40 <DMAChannel::release()>
	}
    c34c:	4620      	mov	r0, r4
    c34e:	bd10      	pop	{r4, pc}

0000c350 <_GLOBAL__sub_I_framebuffer_index>:
				*((uint8_t*)leds + (xCorner + size + y * planeX) * 3 + 1) = ((color >> 8) & 0xFF);
				*((uint8_t*)leds + (xCorner + size + y * planeX) * 3 + 2) = (color & 0xFF);
			}
		}	//if valid y
	}	//for y
} // drawSquare()
    c350:	b570      	push	{r4, r5, r6, lr}
		TCD = &tcddata;
    c352:	4b12      	ldr	r3, [pc, #72]	; (c39c <_GLOBAL__sub_I_framebuffer_index+0x4c>)
    c354:	f103 0220 	add.w	r2, r3, #32
    c358:	601a      	str	r2, [r3, #0]
		begin();
    c35a:	4e11      	ldr	r6, [pc, #68]	; (c3a0 <_GLOBAL__sub_I_framebuffer_index+0x50>)
    c35c:	2100      	movs	r1, #0
    c35e:	4630      	mov	r0, r6
    c360:	f009 fd1a 	bl	15d98 <DMAChannel::begin(bool)>
DMAChannel ObjectFLED::dma1;
    c364:	4d0f      	ldr	r5, [pc, #60]	; (c3a4 <_GLOBAL__sub_I_framebuffer_index+0x54>)
    c366:	4c10      	ldr	r4, [pc, #64]	; (c3a8 <_GLOBAL__sub_I_framebuffer_index+0x58>)
    c368:	462a      	mov	r2, r5
    c36a:	4621      	mov	r1, r4
    c36c:	4630      	mov	r0, r6
    c36e:	f00d f9eb 	bl	19748 <__aeabi_atexit>
    c372:	4e0e      	ldr	r6, [pc, #56]	; (c3ac <_GLOBAL__sub_I_framebuffer_index+0x5c>)
    c374:	2100      	movs	r1, #0
    c376:	4630      	mov	r0, r6
    c378:	f009 fd0e 	bl	15d98 <DMAChannel::begin(bool)>
DMAChannel ObjectFLED::dma2;
    c37c:	462a      	mov	r2, r5
    c37e:	4621      	mov	r1, r4
    c380:	4630      	mov	r0, r6
    c382:	f00d f9e1 	bl	19748 <__aeabi_atexit>
    c386:	4e0a      	ldr	r6, [pc, #40]	; (c3b0 <_GLOBAL__sub_I_framebuffer_index+0x60>)
    c388:	2100      	movs	r1, #0
    c38a:	4630      	mov	r0, r6
    c38c:	f009 fd04 	bl	15d98 <DMAChannel::begin(bool)>
DMAChannel ObjectFLED::dma3;
    c390:	462a      	mov	r2, r5
    c392:	4621      	mov	r1, r4
    c394:	4630      	mov	r0, r6
    c396:	f00d f9d7 	bl	19748 <__aeabi_atexit>
} // drawSquare()
    c39a:	bd70      	pop	{r4, r5, r6, pc}
    c39c:	20006320 	.word	0x20006320
    c3a0:	20006d44 	.word	0x20006d44
    c3a4:	20005258 	.word	0x20005258
    c3a8:	0000c345 	.word	0x0000c345
    c3ac:	20006d4c 	.word	0x20006d4c
    c3b0:	20006d54 	.word	0x20006d54

0000c3b4 <_spi_dma_rxISR0()>:
	// Save back out
	port().TCR = tcr;

}

void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c3b4:	b508      	push	{r3, lr}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    c3b6:	4b2e      	ldr	r3, [pc, #184]	; (c470 <_spi_dma_rxISR0()+0xbc>)
		DMA_CINT = channel;
    c3b8:	6c99      	ldr	r1, [r3, #72]	; 0x48
    c3ba:	7908      	ldrb	r0, [r1, #4]
    c3bc:	4a2d      	ldr	r2, [pc, #180]	; (c474 <_spi_dma_rxISR0()+0xc0>)
    c3be:	77d0      	strb	r0, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    c3c0:	6c58      	ldr	r0, [r3, #68]	; 0x44
    c3c2:	7900      	ldrb	r0, [r0, #4]
    c3c4:	7710      	strb	r0, [r2, #28]
    c3c6:	7909      	ldrb	r1, [r1, #4]
    c3c8:	7711      	strb	r1, [r2, #28]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    c3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    c3cc:	2b00      	cmp	r3, #0
    c3ce:	d03a      	beq.n	c446 <_spi_dma_rxISR0()+0x92>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    c3d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c3d4:	d30b      	bcc.n	c3ee <_spi_dma_rxISR0()+0x3a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    c3d6:	4a28      	ldr	r2, [pc, #160]	; (c478 <_spi_dma_rxISR0()+0xc4>)
    c3d8:	441a      	add	r2, r3
    c3da:	4b25      	ldr	r3, [pc, #148]	; (c470 <_spi_dma_rxISR0()+0xbc>)
    c3dc:	641a      	str	r2, [r3, #64]	; 0x40
		DMA_SERQ = channel;
    c3de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    c3e0:	7911      	ldrb	r1, [r2, #4]
    c3e2:	4a24      	ldr	r2, [pc, #144]	; (c474 <_spi_dma_rxISR0()+0xc0>)
    c3e4:	76d1      	strb	r1, [r2, #27]
    c3e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    c3e8:	791b      	ldrb	r3, [r3, #4]
    c3ea:	76d3      	strb	r3, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c3ec:	bd08      	pop	{r3, pc}
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    c3ee:	4a20      	ldr	r2, [pc, #128]	; (c470 <_spi_dma_rxISR0()+0xbc>)
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    c3f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
    c3f2:	6812      	ldr	r2, [r2, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    c3f4:	8bd1      	ldrh	r1, [r2, #30]
    c3f6:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    c3fa:	d114      	bne.n	c426 <_spi_dma_rxISR0()+0x72>
		tcd->BITER = len & 0x7fff;
    c3fc:	b29b      	uxth	r3, r3
    c3fe:	83d3      	strh	r3, [r2, #30]
	tcd->CITER = tcd->BITER; 
    c400:	8bd3      	ldrh	r3, [r2, #30]
    c402:	b29b      	uxth	r3, r3
    c404:	82d3      	strh	r3, [r2, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    c406:	4b1a      	ldr	r3, [pc, #104]	; (c470 <_spi_dma_rxISR0()+0xbc>)
    c408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	DMABaseClass::TCD_t *tcd = dmac->TCD;
    c40a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c40c:	681b      	ldr	r3, [r3, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    c40e:	8bd9      	ldrh	r1, [r3, #30]
    c410:	f411 4f00 	tst.w	r1, #32768	; 0x8000
    c414:	d10f      	bne.n	c436 <_spi_dma_rxISR0()+0x82>
		tcd->BITER = len & 0x7fff;
    c416:	f3c2 020e 	ubfx	r2, r2, #0, #15
    c41a:	83da      	strh	r2, [r3, #30]
	tcd->CITER = tcd->BITER; 
    c41c:	8bda      	ldrh	r2, [r3, #30]
    c41e:	b292      	uxth	r2, r2
    c420:	82da      	strh	r2, [r3, #22]
    c422:	2200      	movs	r2, #0
    c424:	e7d9      	b.n	c3da <_spi_dma_rxISR0()+0x26>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    c426:	8bd1      	ldrh	r1, [r2, #30]
    c428:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    c42c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    c430:	430b      	orrs	r3, r1
    c432:	83d3      	strh	r3, [r2, #30]
    c434:	e7e4      	b.n	c400 <_spi_dma_rxISR0()+0x4c>
    c436:	8bd9      	ldrh	r1, [r3, #30]
    c438:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    c43c:	f3c2 0208 	ubfx	r2, r2, #0, #9
    c440:	430a      	orrs	r2, r1
    c442:	83da      	strh	r2, [r3, #30]
    c444:	e7ea      	b.n	c41c <_spi_dma_rxISR0()+0x68>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c446:	4a0a      	ldr	r2, [pc, #40]	; (c470 <_spi_dma_rxISR0()+0xbc>)
    c448:	6813      	ldr	r3, [r2, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    c44a:	210f      	movs	r1, #15
    c44c:	6599      	str	r1, [r3, #88]	; 0x58
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    c44e:	2100      	movs	r1, #0
    c450:	61d9      	str	r1, [r3, #28]

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    c452:	f240 3001 	movw	r0, #769	; 0x301
    c456:	6118      	str	r0, [r3, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    c458:	f44f 507c 	mov.w	r0, #16128	; 0x3f00
    c45c:	6158      	str	r0, [r3, #20]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    c45e:	2303      	movs	r3, #3
    c460:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    c464:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
    c466:	6803      	ldr	r3, [r0, #0]
    c468:	681b      	ldr	r3, [r3, #0]
    c46a:	460a      	mov	r2, r1
    c46c:	4798      	blx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    c46e:	e7bd      	b.n	c3ec <_spi_dma_rxISR0()+0x38>
    c470:	20004e24 	.word	0x20004e24
    c474:	400e8000 	.word	0x400e8000
    c478:	ffff8001 	.word	0xffff8001

0000c47c <SPIClass::begin()>:
{
    c47c:	b410      	push	{r4}
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c47e:	6841      	ldr	r1, [r0, #4]
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    c480:	680a      	ldr	r2, [r1, #0]
    c482:	6813      	ldr	r3, [r2, #0]
    c484:	6849      	ldr	r1, [r1, #4]
    c486:	ea23 0301 	bic.w	r3, r3, r1
    c48a:	6013      	str	r3, [r2, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    c48c:	4990      	ldr	r1, [pc, #576]	; (c6d0 <SPIClass::begin()+0x254>)
    c48e:	698b      	ldr	r3, [r1, #24]
    c490:	4a90      	ldr	r2, [pc, #576]	; (c6d4 <SPIClass::begin()+0x258>)
    c492:	401a      	ands	r2, r3
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    c494:	4b90      	ldr	r3, [pc, #576]	; (c6d8 <SPIClass::begin()+0x25c>)
    c496:	4313      	orrs	r3, r2
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    c498:	618b      	str	r3, [r1, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    c49a:	4b90      	ldr	r3, [pc, #576]	; (c6dc <SPIClass::begin()+0x260>)
    c49c:	6842      	ldr	r2, [r0, #4]
    c49e:	7c01      	ldrb	r1, [r0, #16]
    c4a0:	440a      	add	r2, r1
    c4a2:	7c12      	ldrb	r2, [r2, #16]
    c4a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    c4a8:	6891      	ldr	r1, [r2, #8]
    c4aa:	22b8      	movs	r2, #184	; 0xb8
    c4ac:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    c4ae:	6841      	ldr	r1, [r0, #4]
    c4b0:	7c44      	ldrb	r4, [r0, #17]
    c4b2:	4421      	add	r1, r4
    c4b4:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
    c4b8:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    c4bc:	6889      	ldr	r1, [r1, #8]
    c4be:	600a      	str	r2, [r1, #0]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    c4c0:	6841      	ldr	r1, [r0, #4]
    c4c2:	7c84      	ldrb	r4, [r0, #18]
    c4c4:	4421      	add	r1, r4
    c4c6:	f891 1038 	ldrb.w	r1, [r1, #56]	; 0x38
    c4ca:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    c4ce:	6889      	ldr	r1, [r1, #8]
    c4d0:	600a      	str	r2, [r1, #0]
    c4d2:	6844      	ldr	r4, [r0, #4]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    c4d4:	6821      	ldr	r1, [r4, #0]
    c4d6:	680a      	ldr	r2, [r1, #0]
    c4d8:	6864      	ldr	r4, [r4, #4]
    c4da:	4322      	orrs	r2, r4
    c4dc:	600a      	str	r2, [r1, #0]
    c4de:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    c4e0:	7c01      	ldrb	r1, [r0, #16]
    c4e2:	eb02 0481 	add.w	r4, r2, r1, lsl #2
    c4e6:	6964      	ldr	r4, [r4, #20]
    c4e8:	440a      	add	r2, r1
    c4ea:	7c12      	ldrb	r2, [r2, #16]
    c4ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    c4f0:	6852      	ldr	r2, [r2, #4]
    c4f2:	6014      	str	r4, [r2, #0]
    c4f4:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    c4f6:	7c41      	ldrb	r1, [r0, #17]
    c4f8:	f101 040a 	add.w	r4, r1, #10
    c4fc:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
    c500:	440a      	add	r2, r1
    c502:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    c506:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    c50a:	6852      	ldr	r2, [r2, #4]
    c50c:	6014      	str	r4, [r2, #0]
    c50e:	6842      	ldr	r2, [r0, #4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    c510:	7c81      	ldrb	r1, [r0, #18]
    c512:	eb02 0481 	add.w	r4, r2, r1, lsl #2
    c516:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    c518:	440a      	add	r2, r1
    c51a:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
    c51e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
    c522:	685b      	ldr	r3, [r3, #4]
    c524:	601c      	str	r4, [r3, #0]
    c526:	6842      	ldr	r2, [r0, #4]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    c528:	7c83      	ldrb	r3, [r0, #18]
    c52a:	4413      	add	r3, r2
    c52c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
    c530:	6c93      	ldr	r3, [r2, #72]	; 0x48
    c532:	6019      	str	r1, [r3, #0]
    c534:	6842      	ldr	r2, [r0, #4]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    c536:	7c03      	ldrb	r3, [r0, #16]
    c538:	4413      	add	r3, r2
    c53a:	7f19      	ldrb	r1, [r3, #28]
    c53c:	6a13      	ldr	r3, [r2, #32]
    c53e:	6019      	str	r1, [r3, #0]
    c540:	6842      	ldr	r2, [r0, #4]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    c542:	7c43      	ldrb	r3, [r0, #17]
    c544:	4413      	add	r3, r2
    c546:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
    c54a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    c54c:	6019      	str	r1, [r3, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c54e:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    c550:	2202      	movs	r2, #2
    c552:	611a      	str	r2, [r3, #16]
    c554:	6803      	ldr	r3, [r0, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    c556:	220f      	movs	r2, #15
    c558:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    c55a:	7cc3      	ldrb	r3, [r0, #19]
    c55c:	2b00      	cmp	r3, #0
    c55e:	d042      	beq.n	c5e6 <SPIClass::begin()+0x16a>
			__disable_irq();
    c560:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    c562:	7cc3      	ldrb	r3, [r0, #19]
    c564:	f013 0f01 	tst.w	r3, #1
    c568:	d008      	beq.n	c57c <SPIClass::begin()+0x100>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    c56a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c56e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
    c572:	6941      	ldr	r1, [r0, #20]
    c574:	400b      	ands	r3, r1
    c576:	6283      	str	r3, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    c578:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    c57c:	7cc3      	ldrb	r3, [r0, #19]
    c57e:	f013 0f02 	tst.w	r3, #2
    c582:	d008      	beq.n	c596 <SPIClass::begin()+0x11a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    c584:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c588:	f8d2 3184 	ldr.w	r3, [r2, #388]	; 0x184
    c58c:	6981      	ldr	r1, [r0, #24]
    c58e:	400b      	ands	r3, r1
    c590:	62c3      	str	r3, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    c592:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    c596:	7cc3      	ldrb	r3, [r0, #19]
    c598:	f013 0f04 	tst.w	r3, #4
    c59c:	d008      	beq.n	c5b0 <SPIClass::begin()+0x134>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    c59e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c5a2:	f8d2 3188 	ldr.w	r3, [r2, #392]	; 0x188
    c5a6:	69c1      	ldr	r1, [r0, #28]
    c5a8:	400b      	ands	r3, r1
    c5aa:	6303      	str	r3, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    c5ac:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    c5b0:	7cc3      	ldrb	r3, [r0, #19]
    c5b2:	f013 0f08 	tst.w	r3, #8
    c5b6:	d008      	beq.n	c5ca <SPIClass::begin()+0x14e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    c5b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c5bc:	f8d2 318c 	ldr.w	r3, [r2, #396]	; 0x18c
    c5c0:	6a01      	ldr	r1, [r0, #32]
    c5c2:	400b      	ands	r3, r1
    c5c4:	6343      	str	r3, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    c5c6:	f8c2 318c 	str.w	r3, [r2, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    c5ca:	7cc3      	ldrb	r3, [r0, #19]
    c5cc:	f013 0f10 	tst.w	r3, #16
    c5d0:	d008      	beq.n	c5e4 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    c5d2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c5d6:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    c5da:	6a41      	ldr	r1, [r0, #36]	; 0x24
    c5dc:	400b      	ands	r3, r1
    c5de:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    c5e0:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
			__enable_irq();
    c5e4:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    c5e6:	6882      	ldr	r2, [r0, #8]
    c5e8:	4b3d      	ldr	r3, [pc, #244]	; (c6e0 <SPIClass::begin()+0x264>)
    c5ea:	429a      	cmp	r2, r3
    c5ec:	d029      	beq.n	c642 <SPIClass::begin()+0x1c6>
		    _clock = settings.clock();
    c5ee:	6083      	str	r3, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    c5f0:	4b37      	ldr	r3, [pc, #220]	; (c6d0 <SPIClass::begin()+0x254>)
    c5f2:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    c5f4:	f3c3 1101 	ubfx	r1, r3, #4, #2
    c5f8:	f3c3 6382 	ubfx	r3, r3, #26, #3
    c5fc:	3301      	adds	r3, #1
    c5fe:	4a39      	ldr	r2, [pc, #228]	; (c6e4 <SPIClass::begin()+0x268>)
    c600:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    c604:	fbb2 f2f3 	udiv	r2, r2, r3
			if (d && clkhz/d > _clock) d++;
    c608:	4b37      	ldr	r3, [pc, #220]	; (c6e8 <SPIClass::begin()+0x26c>)
    c60a:	429a      	cmp	r2, r3
    c60c:	d95d      	bls.n	c6ca <SPIClass::begin()+0x24e>
			d = _clock ? clkhz/_clock : clkhz;
    c60e:	4b37      	ldr	r3, [pc, #220]	; (c6ec <SPIClass::begin()+0x270>)
    c610:	fba3 1302 	umull	r1, r3, r3, r2
    c614:	0d1b      	lsrs	r3, r3, #20
			if (d && clkhz/d > _clock) d++;
    c616:	fbb2 f2f3 	udiv	r2, r2, r3
    c61a:	4931      	ldr	r1, [pc, #196]	; (c6e0 <SPIClass::begin()+0x264>)
    c61c:	428a      	cmp	r2, r1
    c61e:	bf88      	it	hi
    c620:	3301      	addhi	r3, #1
			if (d > 257) d= 257;  // max div
    c622:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    c626:	d34c      	bcc.n	c6c2 <SPIClass::begin()+0x246>
    c628:	f240 1301 	movw	r3, #257	; 0x101
				div = d-2;
    c62c:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    c62e:	0859      	lsrs	r1, r3, #1
    c630:	020a      	lsls	r2, r1, #8
    c632:	b292      	uxth	r2, r2
    c634:	0409      	lsls	r1, r1, #16
    c636:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    c63a:	430a      	orrs	r2, r1
    c63c:	b2db      	uxtb	r3, r3
    c63e:	4313      	orrs	r3, r2
    c640:	60c3      	str	r3, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c642:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;
    c644:	2200      	movs	r2, #0
    c646:	611a      	str	r2, [r3, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c648:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    c64a:	2203      	movs	r2, #3
    c64c:	625a      	str	r2, [r3, #36]	; 0x24
		port().CCR = _ccr;
    c64e:	68c2      	ldr	r2, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c650:	6803      	ldr	r3, [r0, #0]
		port().CCR = _ccr;
    c652:	641a      	str	r2, [r3, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c654:	6803      	ldr	r3, [r0, #0]
		port().TCR = settings.tcr;
    c656:	2207      	movs	r2, #7
    c658:	661a      	str	r2, [r3, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c65a:	6803      	ldr	r3, [r0, #0]
		port().CR = LPSPI_CR_MEN;
    c65c:	2201      	movs	r2, #1
    c65e:	611a      	str	r2, [r3, #16]
		if (interruptMasksUsed) {
    c660:	7cc3      	ldrb	r3, [r0, #19]
    c662:	b35b      	cbz	r3, c6bc <SPIClass::begin()+0x240>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    c664:	f013 0f01 	tst.w	r3, #1
    c668:	d004      	beq.n	c674 <SPIClass::begin()+0x1f8>
    c66a:	6a82      	ldr	r2, [r0, #40]	; 0x28
    c66c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c670:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    c674:	7cc3      	ldrb	r3, [r0, #19]
    c676:	f013 0f02 	tst.w	r3, #2
    c67a:	d004      	beq.n	c686 <SPIClass::begin()+0x20a>
    c67c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    c67e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c682:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    c686:	7cc3      	ldrb	r3, [r0, #19]
    c688:	f013 0f04 	tst.w	r3, #4
    c68c:	d004      	beq.n	c698 <SPIClass::begin()+0x21c>
    c68e:	6b02      	ldr	r2, [r0, #48]	; 0x30
    c690:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c694:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    c698:	7cc3      	ldrb	r3, [r0, #19]
    c69a:	f013 0f08 	tst.w	r3, #8
    c69e:	d004      	beq.n	c6aa <SPIClass::begin()+0x22e>
    c6a0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    c6a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c6a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    c6aa:	7cc3      	ldrb	r3, [r0, #19]
    c6ac:	f013 0f10 	tst.w	r3, #16
    c6b0:	d004      	beq.n	c6bc <SPIClass::begin()+0x240>
    c6b2:	6b82      	ldr	r2, [r0, #56]	; 0x38
    c6b4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c6b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    c6bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    c6c0:	4770      	bx	lr
			if (d > 2) {
    c6c2:	2b02      	cmp	r3, #2
    c6c4:	d8b2      	bhi.n	c62c <SPIClass::begin()+0x1b0>
				div =0;
    c6c6:	2300      	movs	r3, #0
    c6c8:	e7b1      	b.n	c62e <SPIClass::begin()+0x1b2>
    c6ca:	2300      	movs	r3, #0
    c6cc:	e7af      	b.n	c62e <SPIClass::begin()+0x1b2>
    c6ce:	bf00      	nop
    c6d0:	400fc000 	.word	0x400fc000
    c6d4:	e3ffffcf 	.word	0xe3ffffcf
    c6d8:	08000010 	.word	0x08000010
    c6dc:	2000373c 	.word	0x2000373c
    c6e0:	003d0900 	.word	0x003d0900
    c6e4:	200029c8 	.word	0x200029c8
    c6e8:	003d08ff 	.word	0x003d08ff
    c6ec:	431bde83 	.word	0x431bde83

0000c6f0 <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    c6f0:	2b00      	cmp	r3, #0
    c6f2:	d03b      	beq.n	c76c <SPIClass::transfer(void const*, void*, unsigned int)+0x7c>
{
    c6f4:	b470      	push	{r4, r5, r6}
    c6f6:	460e      	mov	r6, r1
    c6f8:	4611      	mov	r1, r2
    c6fa:	461d      	mov	r5, r3
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c6fc:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    c6fe:	f240 2201 	movw	r2, #513	; 0x201
    c702:	611a      	str	r2, [r3, #16]
    size_t count_read = count;
    c704:	462c      	mov	r4, r5
    c706:	e016      	b.n	c736 <SPIClass::transfer(void const*, void*, unsigned int)+0x46>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c708:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
    c70c:	e019      	b.n	c742 <SPIClass::transfer(void const*, void*, unsigned int)+0x52>
				count_read--;
    c70e:	3c01      	subs	r4, #1
    c710:	6803      	ldr	r3, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    c712:	695b      	ldr	r3, [r3, #20]
    c714:	f013 0f01 	tst.w	r3, #1
    c718:	d10c      	bne.n	c734 <SPIClass::transfer(void const*, void*, unsigned int)+0x44>
    c71a:	6803      	ldr	r3, [r0, #0]
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c71c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c71e:	f012 0f02 	tst.w	r2, #2
    c722:	d1f5      	bne.n	c710 <SPIClass::transfer(void const*, void*, unsigned int)+0x20>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    c726:	2900      	cmp	r1, #0
    c728:	d0f1      	beq.n	c70e <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
    c72a:	460a      	mov	r2, r1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    c72c:	f802 3b01 	strb.w	r3, [r2], #1
				if (p_read) *p_read++ = b; 
    c730:	4611      	mov	r1, r2
    c732:	e7ec      	b.n	c70e <SPIClass::transfer(void const*, void*, unsigned int)+0x1e>
	while (count > 0) {
    c734:	b155      	cbz	r5, c74c <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    c736:	2e00      	cmp	r6, #0
    c738:	d0e6      	beq.n	c708 <SPIClass::transfer(void const*, void*, unsigned int)+0x18>
    c73a:	4633      	mov	r3, r6
    c73c:	f813 2b01 	ldrb.w	r2, [r3], #1
    c740:	461e      	mov	r6, r3
    c742:	6803      	ldr	r3, [r0, #0]
    c744:	665a      	str	r2, [r3, #100]	; 0x64
		count--; // how many bytes left to output.
    c746:	3d01      	subs	r5, #1
    c748:	e7e7      	b.n	c71a <SPIClass::transfer(void const*, void*, unsigned int)+0x2a>
			count_read--;
    c74a:	3c01      	subs	r4, #1
	while (count_read) {
    c74c:	b164      	cbz	r4, c768 <SPIClass::transfer(void const*, void*, unsigned int)+0x78>
    c74e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    c750:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    c752:	f012 0f02 	tst.w	r2, #2
    c756:	d1f9      	bne.n	c74c <SPIClass::transfer(void const*, void*, unsigned int)+0x5c>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    c75a:	2900      	cmp	r1, #0
    c75c:	d0f5      	beq.n	c74a <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
    c75e:	460a      	mov	r2, r1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    c760:	f802 3b01 	strb.w	r3, [r2], #1
			if (p_read) *p_read++ = b; 
    c764:	4611      	mov	r1, r2
    c766:	e7f0      	b.n	c74a <SPIClass::transfer(void const*, void*, unsigned int)+0x5a>
}
    c768:	bc70      	pop	{r4, r5, r6}
    c76a:	4770      	bx	lr
    c76c:	4770      	bx	lr

0000c76e <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    c76e:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    c770:	681a      	ldr	r2, [r3, #0]
    c772:	6812      	ldr	r2, [r2, #0]
    c774:	685b      	ldr	r3, [r3, #4]
    c776:	421a      	tst	r2, r3
    c778:	d100      	bne.n	c77c <SPIClass::end()+0xe>
    c77a:	4770      	bx	lr
void SPIClass::end() {
    c77c:	b510      	push	{r4, lr}
    c77e:	4604      	mov	r4, r0
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    c780:	6803      	ldr	r3, [r0, #0]
		port().CR = 0;  // turn off the enable
    c782:	2200      	movs	r2, #0
    c784:	611a      	str	r2, [r3, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    c786:	6843      	ldr	r3, [r0, #4]
    c788:	7c02      	ldrb	r2, [r0, #16]
    c78a:	4413      	add	r3, r2
    c78c:	2105      	movs	r1, #5
    c78e:	7c18      	ldrb	r0, [r3, #16]
    c790:	f00a fabe 	bl	16d10 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    c794:	6863      	ldr	r3, [r4, #4]
    c796:	7c62      	ldrb	r2, [r4, #17]
    c798:	4413      	add	r3, r2
    c79a:	2105      	movs	r1, #5
    c79c:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    c7a0:	f00a fab6 	bl	16d10 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    c7a4:	6863      	ldr	r3, [r4, #4]
    c7a6:	7ca2      	ldrb	r2, [r4, #18]
    c7a8:	4413      	add	r3, r2
    c7aa:	2105      	movs	r1, #5
    c7ac:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    c7b0:	f00a faae 	bl	16d10 <pinMode>
}
    c7b4:	bd10      	pop	{r4, pc}
	...

0000c7b8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
double AsyncAudioInputSPDIF3::getAttenuation() const{
	return _resampler.getAttenuation();
}
int32_t AsyncAudioInputSPDIF3::getHalfFilterLength() const{
	return _resampler.getHalfFilterLength();
}
    c7b8:	b508      	push	{r3, lr}
DMAChannel AsyncAudioInputSPDIF3::dma(false);
    c7ba:	4a03      	ldr	r2, [pc, #12]	; (c7c8 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    c7bc:	4903      	ldr	r1, [pc, #12]	; (c7cc <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    c7be:	4804      	ldr	r0, [pc, #16]	; (c7d0 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x18>)
    c7c0:	f00c ffc2 	bl	19748 <__aeabi_atexit>
}
    c7c4:	bd08      	pop	{r3, pc}
    c7c6:	bf00      	nop
    c7c8:	20005258 	.word	0x20005258
    c7cc:	0000c345 	.word	0x0000c345
    c7d0:	20006edc 	.word	0x20006edc

0000c7d4 <AudioControlSGTL5000::disable()>:
	bool disable(void) { return false; }
    c7d4:	2000      	movs	r0, #0
    c7d6:	4770      	bx	lr

0000c7d8 <AudioControlSGTL5000::inputLevel(float)>:
	bool inputLevel(float n) {return false;}
    c7d8:	2000      	movs	r0, #0
    c7da:	4770      	bx	lr

0000c7dc <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    c7dc:	b570      	push	{r4, r5, r6, lr}
    c7de:	4606      	mov	r6, r0
    c7e0:	460d      	mov	r5, r1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    c7e2:	4c23      	ldr	r4, [pc, #140]	; (c870 <AudioControlSGTL5000::read(unsigned int)+0x94>)
    c7e4:	7a03      	ldrb	r3, [r0, #8]
    c7e6:	005b      	lsls	r3, r3, #1
    c7e8:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    c7ec:	2301      	movs	r3, #1
    c7ee:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		txBufferLength = 1;
    c7f2:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    c7f6:	6823      	ldr	r3, [r4, #0]
    c7f8:	681b      	ldr	r3, [r3, #0]
    c7fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
    c7fe:	4620      	mov	r0, r4
    c800:	4798      	blx	r3
    c802:	6823      	ldr	r3, [r4, #0]
    c804:	681b      	ldr	r3, [r3, #0]
    c806:	b2e9      	uxtb	r1, r5
    c808:	4620      	mov	r0, r4
    c80a:	4798      	blx	r3
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    c80c:	2100      	movs	r1, #0
    c80e:	4620      	mov	r0, r4
    c810:	f008 feca 	bl	155a8 <TwoWire::endTransmission(unsigned char)>
    c814:	b108      	cbz	r0, c81a <AudioControlSGTL5000::read(unsigned int)+0x3e>
    c816:	2000      	movs	r0, #0
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
	val = Wire.read() << 8;
	val |= Wire.read();
	return val;
}
    c818:	bd70      	pop	{r4, r5, r6, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    c81a:	2301      	movs	r3, #1
    c81c:	2202      	movs	r2, #2
    c81e:	7a31      	ldrb	r1, [r6, #8]
    c820:	4620      	mov	r0, r4
    c822:	f008 ff41 	bl	156a8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    c826:	2801      	cmp	r0, #1
    c828:	d91f      	bls.n	c86a <AudioControlSGTL5000::read(unsigned int)+0x8e>
		if (rxBufferIndex >= rxBufferLength) return -1;
    c82a:	f894 30a2 	ldrb.w	r3, [r4, #162]	; 0xa2
    c82e:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    c832:	4283      	cmp	r3, r0
    c834:	d211      	bcs.n	c85a <AudioControlSGTL5000::read(unsigned int)+0x7e>
		return rxBuffer[rxBufferIndex++];
    c836:	1c5a      	adds	r2, r3, #1
    c838:	b2d2      	uxtb	r2, r2
    c83a:	4621      	mov	r1, r4
    c83c:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
    c840:	4419      	add	r1, r3
    c842:	7e8c      	ldrb	r4, [r1, #26]
	val = Wire.read() << 8;
    c844:	0224      	lsls	r4, r4, #8
		if (rxBufferIndex >= rxBufferLength) return -1;
    c846:	4290      	cmp	r0, r2
    c848:	d90c      	bls.n	c864 <AudioControlSGTL5000::read(unsigned int)+0x88>
		return rxBuffer[rxBufferIndex++];
    c84a:	4909      	ldr	r1, [pc, #36]	; (c870 <AudioControlSGTL5000::read(unsigned int)+0x94>)
    c84c:	3302      	adds	r3, #2
    c84e:	f881 30a2 	strb.w	r3, [r1, #162]	; 0xa2
    c852:	4411      	add	r1, r2
    c854:	7e88      	ldrb	r0, [r1, #26]
	val |= Wire.read();
    c856:	4320      	orrs	r0, r4
	return val;
    c858:	e7de      	b.n	c818 <AudioControlSGTL5000::read(unsigned int)+0x3c>
	val = Wire.read() << 8;
    c85a:	f06f 04ff 	mvn.w	r4, #255	; 0xff
		if (rxBufferIndex >= rxBufferLength) return -1;
    c85e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c862:	e7f8      	b.n	c856 <AudioControlSGTL5000::read(unsigned int)+0x7a>
    c864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c868:	e7f5      	b.n	c856 <AudioControlSGTL5000::read(unsigned int)+0x7a>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    c86a:	2000      	movs	r0, #0
    c86c:	e7d4      	b.n	c818 <AudioControlSGTL5000::read(unsigned int)+0x3c>
    c86e:	bf00      	nop
    c870:	20004e84 	.word	0x20004e84

0000c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    c874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c876:	460d      	mov	r5, r1
    c878:	4616      	mov	r6, r2
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    c87a:	2924      	cmp	r1, #36	; 0x24
    c87c:	bf08      	it	eq
    c87e:	80c2      	strheq	r2, [r0, #6]
		txBuffer[0] = (address << 1);
    c880:	4c13      	ldr	r4, [pc, #76]	; (c8d0 <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x5c>)
    c882:	7a03      	ldrb	r3, [r0, #8]
    c884:	005b      	lsls	r3, r3, #1
    c886:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    c88a:	2701      	movs	r7, #1
    c88c:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    c890:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    c894:	6823      	ldr	r3, [r4, #0]
    c896:	681b      	ldr	r3, [r3, #0]
    c898:	f3c1 2107 	ubfx	r1, r1, #8, #8
    c89c:	4620      	mov	r0, r4
    c89e:	4798      	blx	r3
    c8a0:	6823      	ldr	r3, [r4, #0]
    c8a2:	681b      	ldr	r3, [r3, #0]
    c8a4:	b2e9      	uxtb	r1, r5
    c8a6:	4620      	mov	r0, r4
    c8a8:	4798      	blx	r3
    c8aa:	6823      	ldr	r3, [r4, #0]
    c8ac:	681b      	ldr	r3, [r3, #0]
    c8ae:	f3c6 2107 	ubfx	r1, r6, #8, #8
    c8b2:	4620      	mov	r0, r4
    c8b4:	4798      	blx	r3
    c8b6:	6823      	ldr	r3, [r4, #0]
    c8b8:	681b      	ldr	r3, [r3, #0]
    c8ba:	b2f1      	uxtb	r1, r6
    c8bc:	4620      	mov	r0, r4
    c8be:	4798      	blx	r3
		return endTransmission(1);
    c8c0:	4639      	mov	r1, r7
    c8c2:	4620      	mov	r0, r4
    c8c4:	f008 fe70 	bl	155a8 <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    c8c8:	fab0 f080 	clz	r0, r0
    c8cc:	0940      	lsrs	r0, r0, #5
    c8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8d0:	20004e84 	.word	0x20004e84

0000c8d4 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>:
{
    c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c8d6:	4604      	mov	r4, r0
    c8d8:	460d      	mov	r5, r1
    c8da:	4616      	mov	r6, r2
	Wire.begin();
    c8dc:	4865      	ldr	r0, [pc, #404]	; (ca74 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1a0>)
    c8de:	f01b ffdb 	bl	28898 <___ZN7TwoWire5beginEv_veneer>
	delay(5);
    c8e2:	2005      	movs	r0, #5
    c8e4:	f00a f9c6 	bl	16c74 <delay>
	unsigned int n = read(CHIP_I2S_CTRL);
    c8e8:	2106      	movs	r1, #6
    c8ea:	4620      	mov	r0, r4
    c8ec:	f7ff ff76 	bl	c7dc <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    c8f0:	1e2f      	subs	r7, r5, #0
    c8f2:	bf18      	it	ne
    c8f4:	2701      	movne	r7, #1
    c8f6:	28b0      	cmp	r0, #176	; 0xb0
    c8f8:	bf18      	it	ne
    c8fa:	2700      	movne	r7, #0
    c8fc:	b12f      	cbz	r7, c90a <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x36>
		muted = false;
    c8fe:	2300      	movs	r3, #0
    c900:	7123      	strb	r3, [r4, #4]
		semi_automated = true;
    c902:	2301      	movs	r3, #1
    c904:	7263      	strb	r3, [r4, #9]
}
    c906:	4638      	mov	r0, r7
    c908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        muted = true;
    c90a:	2301      	movs	r3, #1
    c90c:	7123      	strb	r3, [r4, #4]
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    c90e:	f244 0260 	movw	r2, #16480	; 0x4060
    c912:	2130      	movs	r1, #48	; 0x30
    c914:	4620      	mov	r0, r4
    c916:	f7ff ffad 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    c91a:	4607      	mov	r7, r0
    c91c:	2800      	cmp	r0, #0
    c91e:	d0f2      	beq.n	c906 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x32>
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    c920:	226c      	movs	r2, #108	; 0x6c
    c922:	2126      	movs	r1, #38	; 0x26
    c924:	4620      	mov	r0, r4
    c926:	f7ff ffa5 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    c92a:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    c92e:	2128      	movs	r1, #40	; 0x28
    c930:	4620      	mov	r0, r4
    c932:	f7ff ff9f 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    c936:	f640 7222 	movw	r2, #3874	; 0xf22
    c93a:	212c      	movs	r1, #44	; 0x2c
    c93c:	4620      	mov	r0, r4
    c93e:	f7ff ff99 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    c942:	f244 4246 	movw	r2, #17478	; 0x4446
    c946:	213c      	movs	r1, #60	; 0x3c
    c948:	4620      	mov	r0, r4
    c94a:	f7ff ff93 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    c94e:	f240 1237 	movw	r2, #311	; 0x137
    c952:	2124      	movs	r1, #36	; 0x24
    c954:	4620      	mov	r0, r4
    c956:	f7ff ff8d 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (extMCLK > 0) {
    c95a:	2d00      	cmp	r5, #0
    c95c:	d069      	beq.n	ca32 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x15e>
		if (extMCLK > 17000000) {
    c95e:	4b46      	ldr	r3, [pc, #280]	; (ca78 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1a4>)
    c960:	429d      	cmp	r5, r3
			write(CHIP_CLK_TOP_CTRL, 1);
    c962:	bf8c      	ite	hi
    c964:	2201      	movhi	r2, #1
			write(CHIP_CLK_TOP_CTRL, 0);
    c966:	2200      	movls	r2, #0
    c968:	2134      	movs	r1, #52	; 0x34
    c96a:	4620      	mov	r0, r4
    c96c:	f7ff ff82 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    c970:	fbb6 f2f5 	udiv	r2, r6, r5
    c974:	f002 021f 	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    c978:	ee07 6a90 	vmov	s15, r6
    c97c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    c980:	ee07 5a90 	vmov	s15, r5
    c984:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c988:	eec7 6a27 	vdiv.f32	s13, s14, s15
    c98c:	ee07 2a90 	vmov	s15, r2
    c990:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c994:	ee76 7ae7 	vsub.f32	s15, s13, s15
    c998:	ed9f 7a38 	vldr	s14, [pc, #224]	; ca7c <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x1a8>
    c99c:	ee67 7a87 	vmul.f32	s15, s15, s14
    c9a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c9a4:	ee17 3a90 	vmov	r3, s15
    c9a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    c9ac:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
    c9b0:	2132      	movs	r1, #50	; 0x32
    c9b2:	4620      	mov	r0, r4
    c9b4:	f7ff ff5e 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    c9b8:	f244 52ff 	movw	r2, #17919	; 0x45ff
    c9bc:	2130      	movs	r1, #48	; 0x30
    c9be:	4620      	mov	r0, r4
    c9c0:	f7ff ff58 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    c9c4:	2273      	movs	r2, #115	; 0x73
    c9c6:	2102      	movs	r1, #2
    c9c8:	4620      	mov	r0, r4
    c9ca:	f7ff ff53 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    c9ce:	f44f 70c8 	mov.w	r0, #400	; 0x190
    c9d2:	f00a f94f 	bl	16c74 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    c9d6:	f641 521d 	movw	r2, #7453	; 0x1d1d
    c9da:	212e      	movs	r1, #46	; 0x2e
    c9dc:	4620      	mov	r0, r4
    c9de:	f7ff ff49 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    c9e2:	2207      	movs	r2, #7
    c9e4:	2104      	movs	r1, #4
    c9e6:	4620      	mov	r0, r4
    c9e8:	f7ff ff44 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    c9ec:	22b0      	movs	r2, #176	; 0xb0
    c9ee:	2106      	movs	r1, #6
    c9f0:	4620      	mov	r0, r4
    c9f2:	f7ff ff3f 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    c9f6:	2210      	movs	r2, #16
    c9f8:	210a      	movs	r1, #10
    c9fa:	4620      	mov	r0, r4
    c9fc:	f7ff ff3a 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    ca00:	2200      	movs	r2, #0
    ca02:	210e      	movs	r1, #14
    ca04:	4620      	mov	r0, r4
    ca06:	f7ff ff35 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    ca0a:	f643 423c 	movw	r2, #15420	; 0x3c3c
    ca0e:	2110      	movs	r1, #16
    ca10:	4620      	mov	r0, r4
    ca12:	f7ff ff2f 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    ca16:	f647 727f 	movw	r2, #32639	; 0x7f7f
    ca1a:	2122      	movs	r1, #34	; 0x22
    ca1c:	4620      	mov	r0, r4
    ca1e:	f7ff ff29 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    ca22:	2236      	movs	r2, #54	; 0x36
    ca24:	2124      	movs	r1, #36	; 0x24
    ca26:	4620      	mov	r0, r4
    ca28:	f7ff ff24 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	semi_automated = true;
    ca2c:	2301      	movs	r3, #1
    ca2e:	7263      	strb	r3, [r4, #9]
	return true;
    ca30:	e769      	b.n	c906 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x32>
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    ca32:	f244 02ff 	movw	r2, #16639	; 0x40ff
    ca36:	2130      	movs	r1, #48	; 0x30
    ca38:	4620      	mov	r0, r4
    ca3a:	f7ff ff1b 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    ca3e:	2273      	movs	r2, #115	; 0x73
    ca40:	2102      	movs	r1, #2
    ca42:	4620      	mov	r0, r4
    ca44:	f7ff ff16 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    ca48:	f44f 70c8 	mov.w	r0, #400	; 0x190
    ca4c:	f00a f912 	bl	16c74 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    ca50:	f641 521d 	movw	r2, #7453	; 0x1d1d
    ca54:	212e      	movs	r1, #46	; 0x2e
    ca56:	4620      	mov	r0, r4
    ca58:	f7ff ff0c 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    ca5c:	2204      	movs	r2, #4
    ca5e:	4611      	mov	r1, r2
    ca60:	4620      	mov	r0, r4
    ca62:	f7ff ff07 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    ca66:	2230      	movs	r2, #48	; 0x30
    ca68:	2106      	movs	r1, #6
    ca6a:	4620      	mov	r0, r4
    ca6c:	f7ff ff02 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    ca70:	e7c1      	b.n	c9f6 <AudioControlSGTL5000::enable(unsigned int, unsigned long)+0x122>
    ca72:	bf00      	nop
    ca74:	20004e84 	.word	0x20004e84
    ca78:	01036640 	.word	0x01036640
    ca7c:	45000000 	.word	0x45000000

0000ca80 <AudioControlSGTL5000::enable()>:
bool AudioControlSGTL5000::enable(void) {
    ca80:	b508      	push	{r3, lr}
	return enable(0);
    ca82:	4a02      	ldr	r2, [pc, #8]	; (ca8c <AudioControlSGTL5000::enable()+0xc>)
    ca84:	2100      	movs	r1, #0
    ca86:	f7ff ff25 	bl	c8d4 <AudioControlSGTL5000::enable(unsigned int, unsigned long)>
}
    ca8a:	bd08      	pop	{r3, pc}
    ca8c:	0ac44000 	.word	0x0ac44000

0000ca90 <AudioControlSGTL5000::inputSelect(int)>:
	bool inputSelect(int n) {
    ca90:	b510      	push	{r4, lr}
    ca92:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    ca94:	b119      	cbz	r1, ca9e <AudioControlSGTL5000::inputSelect(int)+0xe>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    ca96:	2901      	cmp	r1, #1
    ca98:	d00f      	beq.n	caba <AudioControlSGTL5000::inputSelect(int)+0x2a>
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
    ca9a:	2000      	movs	r0, #0
		}
	}
    ca9c:	bd10      	pop	{r4, pc}
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    ca9e:	2255      	movs	r2, #85	; 0x55
    caa0:	2120      	movs	r1, #32
    caa2:	f7ff fee7 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    caa6:	2800      	cmp	r0, #0
    caa8:	d0f8      	beq.n	ca9c <AudioControlSGTL5000::inputSelect(int)+0xc>
    caaa:	88e2      	ldrh	r2, [r4, #6]
    caac:	f042 0204 	orr.w	r2, r2, #4
    cab0:	2124      	movs	r1, #36	; 0x24
    cab2:	4620      	mov	r0, r4
    cab4:	f7ff fede 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    cab8:	e7f0      	b.n	ca9c <AudioControlSGTL5000::inputSelect(int)+0xc>
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    caba:	f240 1273 	movw	r2, #371	; 0x173
    cabe:	212a      	movs	r1, #42	; 0x2a
    cac0:	f7ff fed8 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    cac4:	2800      	cmp	r0, #0
    cac6:	d0e9      	beq.n	ca9c <AudioControlSGTL5000::inputSelect(int)+0xc>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    cac8:	2288      	movs	r2, #136	; 0x88
    caca:	2120      	movs	r1, #32
    cacc:	4620      	mov	r0, r4
    cace:	f7ff fed1 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    cad2:	2800      	cmp	r0, #0
    cad4:	d0e2      	beq.n	ca9c <AudioControlSGTL5000::inputSelect(int)+0xc>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    cad6:	88e2      	ldrh	r2, [r4, #6]
    cad8:	f022 0204 	bic.w	r2, r2, #4
    cadc:	2124      	movs	r1, #36	; 0x24
    cade:	4620      	mov	r0, r4
    cae0:	f7ff fec8 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    cae4:	e7da      	b.n	ca9c <AudioControlSGTL5000::inputSelect(int)+0xc>

0000cae6 <AudioControlSGTL5000::modify(unsigned int, unsigned int, unsigned int)>:

unsigned int AudioControlSGTL5000::modify(unsigned int reg, unsigned int val, unsigned int iMask)
{
    cae6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cae8:	4605      	mov	r5, r0
    caea:	460e      	mov	r6, r1
    caec:	4617      	mov	r7, r2
    caee:	461c      	mov	r4, r3
	unsigned int val1 = (read(reg)&(~iMask))|val;
    caf0:	f7ff fe74 	bl	c7dc <AudioControlSGTL5000::read(unsigned int)>
    caf4:	ea20 0404 	bic.w	r4, r0, r4
    caf8:	433c      	orrs	r4, r7
	if(!write(reg,val1)) return 0;
    cafa:	4622      	mov	r2, r4
    cafc:	4631      	mov	r1, r6
    cafe:	4628      	mov	r0, r5
    cb00:	f7ff feb8 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    cb04:	2800      	cmp	r0, #0
	return val1;
}
    cb06:	bf14      	ite	ne
    cb08:	4620      	movne	r0, r4
    cb0a:	2000      	moveq	r0, #0
    cb0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000cb0e <AudioControlSGTL5000::volumeInteger(unsigned int)>:

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    cb0e:	b538      	push	{r3, r4, r5, lr}
    cb10:	4604      	mov	r4, r0
	if (n == 0) {
    cb12:	b171      	cbz	r1, cb32 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x24>
    cb14:	460d      	mov	r5, r1
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    cb16:	2980      	cmp	r1, #128	; 0x80
		n = 0;
	} else {
		n = 0x80 - n;
    cb18:	bf94      	ite	ls
    cb1a:	f1c1 0580 	rsbls	r5, r1, #128	; 0x80
		n = 0;
    cb1e:	2500      	movhi	r5, #0
	}
	if (muted) {
    cb20:	7903      	ldrb	r3, [r0, #4]
    cb22:	b9ab      	cbnz	r3, cb50 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x42>
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    cb24:	ea45 2205 	orr.w	r2, r5, r5, lsl #8
    cb28:	2122      	movs	r1, #34	; 0x22
    cb2a:	4620      	mov	r0, r4
    cb2c:	f7ff fea2 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
}
    cb30:	bd38      	pop	{r3, r4, r5, pc}
		muted = true;
    cb32:	2301      	movs	r3, #1
    cb34:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    cb36:	f647 727f 	movw	r2, #32639	; 0x7f7f
    cb3a:	2122      	movs	r1, #34	; 0x22
    cb3c:	f7ff fe9a 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    cb40:	88e2      	ldrh	r2, [r4, #6]
    cb42:	f042 0210 	orr.w	r2, r2, #16
    cb46:	2124      	movs	r1, #36	; 0x24
    cb48:	4620      	mov	r0, r4
    cb4a:	f7ff fe93 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		return muteHeadphone();
    cb4e:	e7ef      	b.n	cb30 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x22>
		muted = false;
    cb50:	2300      	movs	r3, #0
    cb52:	7103      	strb	r3, [r0, #4]
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    cb54:	88c2      	ldrh	r2, [r0, #6]
    cb56:	f022 0210 	bic.w	r2, r2, #16
    cb5a:	2124      	movs	r1, #36	; 0x24
    cb5c:	f7ff fe8a 	bl	c874 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    cb60:	e7e0      	b.n	cb24 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x16>
	...

0000cb64 <AudioControlSGTL5000::volume(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    cb64:	b508      	push	{r3, lr}
    cb66:	eddf 7a07 	vldr	s15, [pc, #28]	; cb84 <AudioControlSGTL5000::volume(float)+0x20>
    cb6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    cb6e:	eddf 7a06 	vldr	s15, [pc, #24]	; cb88 <AudioControlSGTL5000::volume(float)+0x24>
    cb72:	ee30 0a27 	vadd.f32	s0, s0, s15
    cb76:	eefc 7ac0 	vcvt.u32.f32	s15, s0
    cb7a:	ee17 1a90 	vmov	r1, s15
    cb7e:	f7ff ffc6 	bl	cb0e <AudioControlSGTL5000::volumeInteger(unsigned int)>
    cb82:	bd08      	pop	{r3, pc}
    cb84:	43010000 	.word	0x43010000
    cb88:	3eff7cee 	.word	0x3eff7cee

0000cb8c <AudioControlSGTL5000::lineOutLevel(unsigned char)>:
//  28: 1.37 Volts p-p
//  29: 1.29 Volts p-p
//  30: 1.22 Volts p-p
//  31: 1.16 Volts p-p
unsigned short AudioControlSGTL5000::lineOutLevel(uint8_t n)
{
    cb8c:	b508      	push	{r3, lr}
	if (n > 31) n = 31;
	else if (n < 13) n = 13;
	return modify(CHIP_LINE_OUT_VOL,(n<<8)|n,(31<<8)|31);
    cb8e:	460a      	mov	r2, r1
    cb90:	290d      	cmp	r1, #13
    cb92:	bf38      	it	cc
    cb94:	220d      	movcc	r2, #13
    cb96:	2a1f      	cmp	r2, #31
    cb98:	bf28      	it	cs
    cb9a:	221f      	movcs	r2, #31
    cb9c:	f641 731f 	movw	r3, #7967	; 0x1f1f
    cba0:	ea42 2202 	orr.w	r2, r2, r2, lsl #8
    cba4:	212e      	movs	r1, #46	; 0x2e
    cba6:	f7ff ff9e 	bl	cae6 <AudioControlSGTL5000::modify(unsigned int, unsigned int, unsigned int)>
}
    cbaa:	b280      	uxth	r0, r0
    cbac:	bd08      	pop	{r3, pc}
	...

0000cbb0 <AudioEffectEnvelope::update()>:
	}
	__enable_irq();
}

void AudioEffectEnvelope::update(void)
{
    cbb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cbb4:	4604      	mov	r4, r0
	audio_block_t *block;
	uint32_t *p, *end;
	uint32_t sample12, sample34, sample56, sample78, tmp1, tmp2;

	block = receiveWritable();
    cbb6:	2100      	movs	r1, #0
    cbb8:	f008 ffac 	bl	15b14 <AudioStream::receiveWritable(unsigned int)>
	if (!block) return;
    cbbc:	2800      	cmp	r0, #0
    cbbe:	f000 80cf 	beq.w	cd60 <AudioEffectEnvelope::update()+0x1b0>
    cbc2:	4605      	mov	r5, r0
	if (state == STATE_IDLE) {
    cbc4:	7f23      	ldrb	r3, [r4, #28]
    cbc6:	b153      	cbz	r3, cbde <AudioEffectEnvelope::update()+0x2e>
		AudioStream::release(block);
		return;
	}
	p = (uint32_t *)(block->data);
    cbc8:	1d01      	adds	r1, r0, #4
	end = p + AUDIO_BLOCK_SAMPLES/2;
    cbca:	f500 7082 	add.w	r0, r0, #260	; 0x104
					inc_hires = 0x40000000 / (int32_t)count;
				}
			} else if (state == STATE_DELAY) {
				state = STATE_ATTACK;
				count = attack_count;
				inc_hires = 0x40000000 / count;
    cbce:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
				mult_hires = 0;
    cbd2:	2600      	movs	r6, #0
				count = 0xFFFF;
    cbd4:	f64f 7cff 	movw	ip, #65535	; 0xffff
					state = STATE_HOLD;
    cbd8:	46a9      	mov	r9, r5
    cbda:	4680      	mov	r8, r0
    cbdc:	e064      	b.n	cca8 <AudioEffectEnvelope::update()+0xf8>
		AudioStream::release(block);
    cbde:	f008 ff43 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		return;
    cbe2:	e0bd      	b.n	cd60 <AudioEffectEnvelope::update()+0x1b0>
				count = hold_count;
    cbe4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    cbe6:	83e3      	strh	r3, [r4, #30]
				if (count > 0) {
    cbe8:	b12b      	cbz	r3, cbf6 <AudioEffectEnvelope::update()+0x46>
					state = STATE_HOLD;
    cbea:	f04f 0303 	mov.w	r3, #3
    cbee:	7723      	strb	r3, [r4, #28]
					mult_hires = 0x40000000;
    cbf0:	6227      	str	r7, [r4, #32]
					inc_hires = 0;
    cbf2:	6266      	str	r6, [r4, #36]	; 0x24
    cbf4:	e056      	b.n	cca4 <AudioEffectEnvelope::update()+0xf4>
					state = STATE_DECAY;
    cbf6:	f04f 0304 	mov.w	r3, #4
    cbfa:	7723      	strb	r3, [r4, #28]
					count = decay_count;
    cbfc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    cbfe:	83e2      	strh	r2, [r4, #30]
					inc_hires = (sustain_mult - 0x40000000) / (int32_t)count;
    cc00:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cc02:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
    cc06:	fb93 f3f2 	sdiv	r3, r3, r2
    cc0a:	6263      	str	r3, [r4, #36]	; 0x24
    cc0c:	e04a      	b.n	cca4 <AudioEffectEnvelope::update()+0xf4>
				state = STATE_DECAY;
    cc0e:	f04f 0304 	mov.w	r3, #4
    cc12:	7723      	strb	r3, [r4, #28]
				count = decay_count;
    cc14:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    cc16:	83e2      	strh	r2, [r4, #30]
				inc_hires = (sustain_mult - 0x40000000) / (int32_t)count;
    cc18:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cc1a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
    cc1e:	fb93 f3f2 	sdiv	r3, r3, r2
    cc22:	6263      	str	r3, [r4, #36]	; 0x24
				continue;
    cc24:	e03e      	b.n	cca4 <AudioEffectEnvelope::update()+0xf4>
				state = STATE_SUSTAIN;
    cc26:	f04f 0305 	mov.w	r3, #5
    cc2a:	7723      	strb	r3, [r4, #28]
				count = 0xFFFF;
    cc2c:	f8a4 c01e 	strh.w	ip, [r4, #30]
				mult_hires = sustain_mult;
    cc30:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cc32:	6223      	str	r3, [r4, #32]
				inc_hires = 0;
    cc34:	6266      	str	r6, [r4, #36]	; 0x24
				continue;
			}
		}

		int32_t mult = mult_hires >> 14;
    cc36:	6a23      	ldr	r3, [r4, #32]
		int32_t inc = inc_hires >> 17;
    cc38:	6a62      	ldr	r2, [r4, #36]	; 0x24
    cc3a:	1452      	asrs	r2, r2, #17
		// process 8 samples, using only mult and inc (16 bit resolution)
		sample12 = *p++;
    cc3c:	f8d1 e000 	ldr.w	lr, [r1]
		sample34 = *p++;
    cc40:	684d      	ldr	r5, [r1, #4]
		sample56 = *p++;
    cc42:	6888      	ldr	r0, [r1, #8]
		sample78 = *p++;
    cc44:	f8d1 a00c 	ldr.w	sl, [r1, #12]
		p -= 4;
		mult += inc;
    cc48:	eb02 3ba3 	add.w	fp, r2, r3, asr #14
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc4c:	fb3b f30e 	smulwb	r3, fp, lr
		tmp1 = signed_multiply_32x16b(mult, sample12);
		mult += inc;
    cc50:	4493      	add	fp, r2
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc52:	fb3b fe1e 	smulwt	lr, fp, lr
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    cc56:	eac3 4e0e 	pkhbt	lr, r3, lr, lsl #16
		tmp2 = signed_multiply_32x16t(mult, sample12);
		sample12 = pack_16b_16b(tmp2, tmp1);
		mult += inc;
    cc5a:	4493      	add	fp, r2
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc5c:	fb3b f305 	smulwb	r3, fp, r5
		tmp1 = signed_multiply_32x16b(mult, sample34);
		mult += inc;
    cc60:	4493      	add	fp, r2
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc62:	fb3b f515 	smulwt	r5, fp, r5
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    cc66:	eac3 4505 	pkhbt	r5, r3, r5, lsl #16
		tmp2 = signed_multiply_32x16t(mult, sample34);
		sample34 = pack_16b_16b(tmp2, tmp1);
		mult += inc;
    cc6a:	4493      	add	fp, r2
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc6c:	fb3b f300 	smulwb	r3, fp, r0
		tmp1 = signed_multiply_32x16b(mult, sample56);
		mult += inc;
    cc70:	4493      	add	fp, r2
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc72:	fb3b f010 	smulwt	r0, fp, r0
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    cc76:	eac3 4000 	pkhbt	r0, r3, r0, lsl #16
		tmp2 = signed_multiply_32x16t(mult, sample56);
		sample56 = pack_16b_16b(tmp2, tmp1);
		mult += inc;
    cc7a:	4493      	add	fp, r2
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc7c:	fb3b f30a 	smulwb	r3, fp, sl
		tmp1 = signed_multiply_32x16b(mult, sample78);
		mult += inc;
    cc80:	445a      	add	r2, fp
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cc82:	fb32 f21a 	smulwt	r2, r2, sl
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    cc86:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
		tmp2 = signed_multiply_32x16t(mult, sample78);
		sample78 = pack_16b_16b(tmp2, tmp1);
		*p++ = sample12;
    cc8a:	f8c1 e000 	str.w	lr, [r1]
		*p++ = sample34;
    cc8e:	604d      	str	r5, [r1, #4]
		*p++ = sample56;
    cc90:	6088      	str	r0, [r1, #8]
		*p++ = sample78;
    cc92:	60cb      	str	r3, [r1, #12]
		// adjust the long-term gain using 30 bit resolution (fix #102)
		// https://github.com/PaulStoffregen/Audio/issues/102
		mult_hires += inc_hires;
    cc94:	6a23      	ldr	r3, [r4, #32]
    cc96:	6a62      	ldr	r2, [r4, #36]	; 0x24
    cc98:	4413      	add	r3, r2
    cc9a:	6223      	str	r3, [r4, #32]
		count--;
    cc9c:	8be3      	ldrh	r3, [r4, #30]
    cc9e:	3b01      	subs	r3, #1
    cca0:	83e3      	strh	r3, [r4, #30]
		*p++ = sample78;
    cca2:	3110      	adds	r1, #16
	while (p < end) {
    cca4:	4588      	cmp	r8, r1
    cca6:	d952      	bls.n	cd4e <AudioEffectEnvelope::update()+0x19e>
		if (count == 0) {
    cca8:	8be3      	ldrh	r3, [r4, #30]
    ccaa:	2b00      	cmp	r3, #0
    ccac:	d1c3      	bne.n	cc36 <AudioEffectEnvelope::update()+0x86>
			if (state == STATE_ATTACK) {
    ccae:	7f23      	ldrb	r3, [r4, #28]
    ccb0:	2b02      	cmp	r3, #2
    ccb2:	d097      	beq.n	cbe4 <AudioEffectEnvelope::update()+0x34>
			} else if (state == STATE_HOLD) {
    ccb4:	3b01      	subs	r3, #1
    ccb6:	2b06      	cmp	r3, #6
    ccb8:	d8bd      	bhi.n	cc36 <AudioEffectEnvelope::update()+0x86>
    ccba:	a201      	add	r2, pc, #4	; (adr r2, ccc0 <AudioEffectEnvelope::update()+0x110>)
    ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ccc0:	0000cd3d 	.word	0x0000cd3d
    ccc4:	0000cc37 	.word	0x0000cc37
    ccc8:	0000cc0f 	.word	0x0000cc0f
    cccc:	0000cc27 	.word	0x0000cc27
    ccd0:	0000ccdd 	.word	0x0000ccdd
    ccd4:	0000cce3 	.word	0x0000cce3
    ccd8:	0000cd19 	.word	0x0000cd19
				count = 0xFFFF;
    ccdc:	f8a4 c01e 	strh.w	ip, [r4, #30]
    cce0:	e7a9      	b.n	cc36 <AudioEffectEnvelope::update()+0x86>
				state = STATE_IDLE;
    cce2:	464d      	mov	r5, r9
    cce4:	2300      	movs	r3, #0
    cce6:	7723      	strb	r3, [r4, #28]
				while (p < end) {
    cce8:	4588      	cmp	r8, r1
    ccea:	d931      	bls.n	cd50 <AudioEffectEnvelope::update()+0x1a0>
    ccec:	f101 0310 	add.w	r3, r1, #16
    ccf0:	f209 1203 	addw	r2, r9, #259	; 0x103
    ccf4:	1a52      	subs	r2, r2, r1
    ccf6:	f022 020f 	bic.w	r2, r2, #15
    ccfa:	3120      	adds	r1, #32
    ccfc:	4411      	add	r1, r2
					*p++ = 0;
    ccfe:	2200      	movs	r2, #0
    cd00:	f843 2c10 	str.w	r2, [r3, #-16]
					*p++ = 0;
    cd04:	f843 2c0c 	str.w	r2, [r3, #-12]
					*p++ = 0;
    cd08:	f843 2c08 	str.w	r2, [r3, #-8]
					*p++ = 0;
    cd0c:	f843 2c04 	str.w	r2, [r3, #-4]
				while (p < end) {
    cd10:	3310      	adds	r3, #16
    cd12:	428b      	cmp	r3, r1
    cd14:	d1f4      	bne.n	cd00 <AudioEffectEnvelope::update()+0x150>
    cd16:	e01b      	b.n	cd50 <AudioEffectEnvelope::update()+0x1a0>
				mult_hires = 0;
    cd18:	6226      	str	r6, [r4, #32]
				count = delay_count;
    cd1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    cd1c:	83e3      	strh	r3, [r4, #30]
				if (count > 0) {
    cd1e:	b123      	cbz	r3, cd2a <AudioEffectEnvelope::update()+0x17a>
					state = STATE_DELAY;
    cd20:	f04f 0301 	mov.w	r3, #1
    cd24:	7723      	strb	r3, [r4, #28]
					inc_hires = 0;
    cd26:	6266      	str	r6, [r4, #36]	; 0x24
    cd28:	e785      	b.n	cc36 <AudioEffectEnvelope::update()+0x86>
					state = STATE_ATTACK;
    cd2a:	f04f 0302 	mov.w	r3, #2
    cd2e:	7723      	strb	r3, [r4, #28]
					count = attack_count;
    cd30:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    cd32:	83e3      	strh	r3, [r4, #30]
					inc_hires = 0x40000000 / (int32_t)count;
    cd34:	fb97 f3f3 	sdiv	r3, r7, r3
    cd38:	6263      	str	r3, [r4, #36]	; 0x24
    cd3a:	e77c      	b.n	cc36 <AudioEffectEnvelope::update()+0x86>
				state = STATE_ATTACK;
    cd3c:	f04f 0302 	mov.w	r3, #2
    cd40:	7723      	strb	r3, [r4, #28]
				count = attack_count;
    cd42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    cd44:	83e3      	strh	r3, [r4, #30]
				inc_hires = 0x40000000 / count;
    cd46:	fb97 f3f3 	sdiv	r3, r7, r3
    cd4a:	6263      	str	r3, [r4, #36]	; 0x24
				continue;
    cd4c:	e7aa      	b.n	cca4 <AudioEffectEnvelope::update()+0xf4>
    cd4e:	464d      	mov	r5, r9
	}
	transmit(block);
    cd50:	2200      	movs	r2, #0
    cd52:	4629      	mov	r1, r5
    cd54:	4620      	mov	r0, r4
    cd56:	f008 feaf 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	AudioStream::release(block);
    cd5a:	4628      	mov	r0, r5
    cd5c:	f008 fe84 	bl	15a68 <AudioStream::release(audio_block_struct*)>
}
    cd60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000cd64 <AudioEffectEnvelope::noteOn()>:
	__disable_irq();
    cd64:	b672      	cpsid	i
	if (state == STATE_IDLE || state == STATE_DELAY || release_forced_count == 0) {
    cd66:	7f03      	ldrb	r3, [r0, #28]
    cd68:	2b01      	cmp	r3, #1
    cd6a:	d901      	bls.n	cd70 <AudioEffectEnvelope::noteOn()+0xc>
    cd6c:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    cd6e:	b9a2      	cbnz	r2, cd9a <AudioEffectEnvelope::noteOn()+0x36>
		mult_hires = 0;
    cd70:	2300      	movs	r3, #0
    cd72:	6203      	str	r3, [r0, #32]
		count = delay_count;
    cd74:	8d03      	ldrh	r3, [r0, #40]	; 0x28
    cd76:	83c3      	strh	r3, [r0, #30]
		if (count > 0) {
    cd78:	b12b      	cbz	r3, cd86 <AudioEffectEnvelope::noteOn()+0x22>
			state = STATE_DELAY;
    cd7a:	2301      	movs	r3, #1
    cd7c:	7703      	strb	r3, [r0, #28]
			inc_hires = 0;
    cd7e:	2300      	movs	r3, #0
    cd80:	6243      	str	r3, [r0, #36]	; 0x24
	__enable_irq();
    cd82:	b662      	cpsie	i
}
    cd84:	4770      	bx	lr
			state = STATE_ATTACK;
    cd86:	2302      	movs	r3, #2
    cd88:	7703      	strb	r3, [r0, #28]
			count = attack_count;
    cd8a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    cd8c:	83c2      	strh	r2, [r0, #30]
			inc_hires = 0x40000000 / (int32_t)count;
    cd8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cd92:	fb93 f3f2 	sdiv	r3, r3, r2
    cd96:	6243      	str	r3, [r0, #36]	; 0x24
    cd98:	e7f3      	b.n	cd82 <AudioEffectEnvelope::noteOn()+0x1e>
	} else if (state != STATE_FORCED) {
    cd9a:	2b07      	cmp	r3, #7
    cd9c:	d0f1      	beq.n	cd82 <AudioEffectEnvelope::noteOn()+0x1e>
		state = STATE_FORCED;
    cd9e:	2307      	movs	r3, #7
    cda0:	7703      	strb	r3, [r0, #28]
		count = release_forced_count;
    cda2:	83c2      	strh	r2, [r0, #30]
		inc_hires = (-mult_hires) / (int32_t)count;
    cda4:	6a03      	ldr	r3, [r0, #32]
    cda6:	425b      	negs	r3, r3
    cda8:	fb93 f3f2 	sdiv	r3, r3, r2
    cdac:	6243      	str	r3, [r0, #36]	; 0x24
    cdae:	e7e8      	b.n	cd82 <AudioEffectEnvelope::noteOn()+0x1e>

0000cdb0 <AudioEffectEnvelope::noteOff()>:
	__disable_irq();
    cdb0:	b672      	cpsid	i
	if (state != STATE_IDLE && state != STATE_FORCED) {
    cdb2:	7f03      	ldrb	r3, [r0, #28]
    cdb4:	b153      	cbz	r3, cdcc <AudioEffectEnvelope::noteOff()+0x1c>
    cdb6:	2b07      	cmp	r3, #7
    cdb8:	d008      	beq.n	cdcc <AudioEffectEnvelope::noteOff()+0x1c>
		state = STATE_RELEASE;
    cdba:	2306      	movs	r3, #6
    cdbc:	7703      	strb	r3, [r0, #28]
		count = release_count;
    cdbe:	8e82      	ldrh	r2, [r0, #52]	; 0x34
    cdc0:	83c2      	strh	r2, [r0, #30]
		inc_hires = (-mult_hires) / (int32_t)count;
    cdc2:	6a03      	ldr	r3, [r0, #32]
    cdc4:	425b      	negs	r3, r3
    cdc6:	fb93 f3f2 	sdiv	r3, r3, r2
    cdca:	6243      	str	r3, [r0, #36]	; 0x24
	__enable_irq();
    cdcc:	b662      	cpsie	i
}
    cdce:	4770      	bx	lr

0000cdd0 <AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)>:

#if defined(__ARM_ARCH_7EM__)

void AudioFilterStateVariable::update_fixed(const int16_t *in,
	int16_t *lp, int16_t *bp, int16_t *hp)
{
    cdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdd4:	b083      	sub	sp, #12
    cdd6:	9001      	str	r0, [sp, #4]
    cdd8:	460e      	mov	r6, r1
    cdda:	4690      	mov	r8, r2
    cddc:	461f      	mov	r7, r3
    cdde:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
	const int16_t *end = in + AUDIO_BLOCK_SAMPLES;
    cde2:	f501 7b80 	add.w	fp, r1, #256	; 0x100
	int32_t input, inputprev;
	int32_t lowpass, bandpass, highpass;
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fmult, damp;

	fmult = setting_fmult;
    cde6:	69c5      	ldr	r5, [r0, #28]
	damp = setting_damp;
    cde8:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
	inputprev = state_inputprev;
    cdec:	6a81      	ldr	r1, [r0, #40]	; 0x28
	lowpass = state_lowpass;
    cdee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	bandpass = state_bandpass;
    cdf0:	6b03      	ldr	r3, [r0, #48]	; 0x30
	do {
		input = (*in++) << 12;
    cdf2:	4608      	mov	r0, r1
    cdf4:	f936 1b02 	ldrsh.w	r1, [r6], #2
    cdf8:	0309      	lsls	r1, r1, #12
	asm volatile("smmulr %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cdfa:	fb55 fc13 	smmulr	ip, r5, r3
		lowpass = lowpass + MULT(fmult, bandpass);
    cdfe:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
    ce02:	fb59 f213 	smmulr	r2, r9, r3
		highpass = ((input + inputprev)>>1) - lowpass - MULT(damp, bandpass);
    ce06:	4408      	add	r0, r1
    ce08:	ebcc 0060 	rsb	r0, ip, r0, asr #1
    ce0c:	eba0 0082 	sub.w	r0, r0, r2, lsl #2
    ce10:	fb55 f410 	smmulr	r4, r5, r0
		inputprev = input;
		bandpass = bandpass + MULT(fmult, highpass);
    ce14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    ce18:	fb55 f214 	smmulr	r2, r5, r4
		lowpasstmp = lowpass;
		bandpasstmp = bandpass;
		highpasstmp = highpass;
		lowpass = lowpass + MULT(fmult, bandpass);
    ce1c:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    ce20:	fb59 f314 	smmulr	r3, r9, r4
		highpass = input - lowpass - MULT(damp, bandpass);
    ce24:	eba1 0e02 	sub.w	lr, r1, r2
    ce28:	ebae 0e83 	sub.w	lr, lr, r3, lsl #2
    ce2c:	fb55 f31e 	smmulr	r3, r5, lr
		bandpass = bandpass + MULT(fmult, highpass);
    ce30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
    ce34:	4494      	add	ip, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    ce36:	f32c 3c4f 	ssat	ip, #16, ip, asr #13
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
    ce3a:	441c      	add	r4, r3
    ce3c:	f324 344f 	ssat	r4, #16, r4, asr #13
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
    ce40:	4470      	add	r0, lr
    ce42:	f320 304f 	ssat	r0, #16, r0, asr #13
		*lp++ = lowpasstmp;
    ce46:	f828 cb02 	strh.w	ip, [r8], #2
		*bp++ = bandpasstmp;
    ce4a:	f827 4b02 	strh.w	r4, [r7], #2
		*hp++ = highpasstmp;
    ce4e:	f82a 0b02 	strh.w	r0, [sl], #2
	} while (in < end);
    ce52:	45b3      	cmp	fp, r6
    ce54:	d1cd      	bne.n	cdf2 <AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)+0x22>
	state_inputprev = inputprev;
    ce56:	9801      	ldr	r0, [sp, #4]
    ce58:	6281      	str	r1, [r0, #40]	; 0x28
	state_lowpass = lowpass;
    ce5a:	62c2      	str	r2, [r0, #44]	; 0x2c
	state_bandpass = bandpass;
    ce5c:	6303      	str	r3, [r0, #48]	; 0x30
}
    ce5e:	b003      	add	sp, #12
    ce60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ce64 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)>:


void AudioFilterStateVariable::update_variable(const int16_t *in,
	const int16_t *ctl, int16_t *lp, int16_t *bp, int16_t *hp)
{
    ce64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce68:	b085      	sub	sp, #20
    ce6a:	9003      	str	r0, [sp, #12]
    ce6c:	460e      	mov	r6, r1
    ce6e:	4690      	mov	r8, r2
    ce70:	461f      	mov	r7, r3
    ce72:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    ce76:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
	const int16_t *end = in + AUDIO_BLOCK_SAMPLES;
    ce7a:	f501 7280 	add.w	r2, r1, #256	; 0x100
    ce7e:	9200      	str	r2, [sp, #0]
	int32_t lowpass, bandpass, highpass;
	int32_t lowpasstmp, bandpasstmp, highpasstmp;
	int32_t fcenter, fmult, damp, octavemult;
	int32_t n;

	fcenter = setting_fcenter;
    ce80:	6982      	ldr	r2, [r0, #24]
    ce82:	9201      	str	r2, [sp, #4]
	octavemult = setting_octavemult;
    ce84:	6a02      	ldr	r2, [r0, #32]
    ce86:	9202      	str	r2, [sp, #8]
	damp = setting_damp;
    ce88:	f8d0 9024 	ldr.w	r9, [r0, #36]	; 0x24
	inputprev = state_inputprev;
    ce8c:	6a84      	ldr	r4, [r0, #40]	; 0x28
	lowpass = state_lowpass;
    ce8e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	bandpass = state_bandpass;
    ce90:	6b03      	ldr	r3, [r0, #48]	; 0x30
	do {
		// compute fmult using control input, fcenter and octavemult
		control = *ctl++;          // signal is always 15 fractional bits
    ce92:	f938 0b02 	ldrsh.w	r0, [r8], #2
		control *= octavemult;     // octavemult range: 0 to 28671 (12 frac bits)
    ce96:	9a02      	ldr	r2, [sp, #8]
    ce98:	fb02 f000 	mul.w	r0, r2, r0
		n = control & 0x7FFFFFF;   // 27 fractional control bits
    ce9c:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
			multiply_32x32_rshift32_rounded(x, 1358044250)) << 1);
		n = n << 1;
		#else
		// exp2 algorithm by Laurent de Soras
		// https://www.musicdsp.org/en/latest/Other/106-fast-exp2-approximation.html
		n = (n + 134217728) << 3;
    cea0:	f102 6200 	add.w	r2, r2, #134217728	; 0x8000000
    cea4:	00d2      	lsls	r2, r2, #3
	asm volatile("smmulr %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cea6:	fb52 f212 	smmulr	r2, r2, r2
    ceaa:	4d25      	ldr	r5, [pc, #148]	; (cf40 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)+0xdc>)
    ceac:	fb52 f215 	smmulr	r2, r2, r5
		n = multiply_32x32_rshift32_rounded(n, n);
		n = multiply_32x32_rshift32_rounded(n, 715827883) << 3;
		n = n + 715827882;
    ceb0:	3d01      	subs	r5, #1
    ceb2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		#endif
		n = n >> (6 - (control >> 27)); // 4 integer control bits
    ceb6:	16c0      	asrs	r0, r0, #27
    ceb8:	f1c0 0006 	rsb	r0, r0, #6
    cebc:	4102      	asrs	r2, r0
    cebe:	9801      	ldr	r0, [sp, #4]
    cec0:	fb50 f212 	smmulr	r2, r0, r2
		fmult = multiply_32x32_rshift32_rounded(fcenter, n);
		if (fmult > 5378279) fmult = 5378279;
		fmult = fmult << 8;
    cec4:	481f      	ldr	r0, [pc, #124]	; (cf44 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)+0xe0>)
    cec6:	4282      	cmp	r2, r0
    cec8:	bfa8      	it	ge
    ceca:	4602      	movge	r2, r0
    cecc:	0212      	lsls	r2, r2, #8
			multiply_32x32_rshift32_rounded(
			multiply_32x32_rshift32_rounded(fmult, fmult),
			multiply_32x32_rshift32_rounded(fmult, -1383276101))) << 1;
		#endif
		// now do the state variable filter as normal, using fmult
		input = (*in++) << 12;
    cece:	4620      	mov	r0, r4
    ced0:	f936 4b02 	ldrsh.w	r4, [r6], #2
    ced4:	0324      	lsls	r4, r4, #12
    ced6:	fb52 fc13 	smmulr	ip, r2, r3
		lowpass = lowpass + MULT(fmult, bandpass);
    ceda:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
    cede:	fb59 f113 	smmulr	r1, r9, r3
		highpass = ((input + inputprev)>>1) - lowpass - MULT(damp, bandpass);
    cee2:	4420      	add	r0, r4
    cee4:	ebcc 0060 	rsb	r0, ip, r0, asr #1
    cee8:	eba0 0081 	sub.w	r0, r0, r1, lsl #2
    ceec:	fb52 f510 	smmulr	r5, r2, r0
		inputprev = input;
		bandpass = bandpass + MULT(fmult, highpass);
    cef0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    cef4:	fb52 f115 	smmulr	r1, r2, r5
		lowpasstmp = lowpass;
		bandpasstmp = bandpass;
		highpasstmp = highpass;
		lowpass = lowpass + MULT(fmult, bandpass);
    cef8:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
    cefc:	fb59 fe15 	smmulr	lr, r9, r5
		highpass = input - lowpass - MULT(damp, bandpass);
    cf00:	1a63      	subs	r3, r4, r1
    cf02:	eba3 0e8e 	sub.w	lr, r3, lr, lsl #2
    cf06:	fb52 f21e 	smmulr	r2, r2, lr
		bandpass = bandpass + MULT(fmult, highpass);
    cf0a:	eb05 0382 	add.w	r3, r5, r2, lsl #2
		lowpasstmp = signed_saturate_rshift(lowpass+lowpasstmp, 16, 13);
    cf0e:	448c      	add	ip, r1
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    cf10:	f32c 3c4f 	ssat	ip, #16, ip, asr #13
		bandpasstmp = signed_saturate_rshift(bandpass+bandpasstmp, 16, 13);
    cf14:	441d      	add	r5, r3
    cf16:	f325 354f 	ssat	r5, #16, r5, asr #13
		highpasstmp = signed_saturate_rshift(highpass+highpasstmp, 16, 13);
    cf1a:	4470      	add	r0, lr
    cf1c:	f320 304f 	ssat	r0, #16, r0, asr #13
		*lp++ = lowpasstmp;
    cf20:	f827 cb02 	strh.w	ip, [r7], #2
		*bp++ = bandpasstmp;
    cf24:	f82b 5b02 	strh.w	r5, [fp], #2
		*hp++ = highpasstmp;
    cf28:	f82a 0b02 	strh.w	r0, [sl], #2
	} while (in < end);
    cf2c:	9a00      	ldr	r2, [sp, #0]
    cf2e:	42b2      	cmp	r2, r6
    cf30:	d1af      	bne.n	ce92 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)+0x2e>
	state_inputprev = inputprev;
    cf32:	9a03      	ldr	r2, [sp, #12]
    cf34:	6294      	str	r4, [r2, #40]	; 0x28
	state_lowpass = lowpass;
    cf36:	62d1      	str	r1, [r2, #44]	; 0x2c
	state_bandpass = bandpass;
    cf38:	6313      	str	r3, [r2, #48]	; 0x30
}
    cf3a:	b005      	add	sp, #20
    cf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cf40:	2aaaaaab 	.word	0x2aaaaaab
    cf44:	005210e7 	.word	0x005210e7

0000cf48 <AudioFilterStateVariable::update()>:


void AudioFilterStateVariable::update(void)
{
    cf48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cf4c:	b083      	sub	sp, #12
    cf4e:	4604      	mov	r4, r0
	audio_block_t *input_block=NULL, *control_block=NULL;
	audio_block_t *lowpass_block=NULL, *bandpass_block=NULL, *highpass_block=NULL;

	input_block = receiveReadOnly(0);
    cf50:	2100      	movs	r1, #0
    cf52:	f008 fdd3 	bl	15afc <AudioStream::receiveReadOnly(unsigned int)>
    cf56:	4605      	mov	r5, r0
	control_block = receiveReadOnly(1);
    cf58:	2101      	movs	r1, #1
    cf5a:	4620      	mov	r0, r4
    cf5c:	f008 fdce 	bl	15afc <AudioStream::receiveReadOnly(unsigned int)>
    cf60:	4606      	mov	r6, r0
	if (!input_block) {
    cf62:	2d00      	cmp	r5, #0
    cf64:	d03c      	beq.n	cfe0 <AudioFilterStateVariable::update()+0x98>
		if (control_block) release(control_block);
		return;
	}
	lowpass_block = allocate();
    cf66:	f008 fd23 	bl	159b0 <AudioStream::allocate()>
	if (!lowpass_block) {
    cf6a:	4607      	mov	r7, r0
    cf6c:	2800      	cmp	r0, #0
    cf6e:	d03c      	beq.n	cfea <AudioFilterStateVariable::update()+0xa2>
		release(input_block);
		if (control_block) release(control_block);
		return;
	}
	bandpass_block = allocate();
    cf70:	f008 fd1e 	bl	159b0 <AudioStream::allocate()>
	if (!bandpass_block) {
    cf74:	4680      	mov	r8, r0
    cf76:	2800      	cmp	r0, #0
    cf78:	d040      	beq.n	cffc <AudioFilterStateVariable::update()+0xb4>
		release(input_block);
		release(lowpass_block);
		if (control_block) release(control_block);
		return;
	}
	highpass_block = allocate();
    cf7a:	f008 fd19 	bl	159b0 <AudioStream::allocate()>
	if (!highpass_block) {
    cf7e:	4681      	mov	r9, r0
    cf80:	2800      	cmp	r0, #0
    cf82:	d047      	beq.n	d014 <AudioFilterStateVariable::update()+0xcc>
		release(bandpass_block);
		if (control_block) release(control_block);
		return;
	}

	if (control_block) {
    cf84:	2e00      	cmp	r6, #0
    cf86:	d054      	beq.n	d032 <AudioFilterStateVariable::update()+0xea>
		update_variable(input_block->data,
			 control_block->data,
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
    cf88:	1d03      	adds	r3, r0, #4
		update_variable(input_block->data,
    cf8a:	9301      	str	r3, [sp, #4]
			 bandpass_block->data,
    cf8c:	f108 0304 	add.w	r3, r8, #4
		update_variable(input_block->data,
    cf90:	9300      	str	r3, [sp, #0]
    cf92:	1d3b      	adds	r3, r7, #4
    cf94:	1d32      	adds	r2, r6, #4
    cf96:	1d29      	adds	r1, r5, #4
    cf98:	4620      	mov	r0, r4
    cf9a:	f7ff ff63 	bl	ce64 <AudioFilterStateVariable::update_variable(short const*, short const*, short*, short*, short*)>
		release(control_block);
    cf9e:	4630      	mov	r0, r6
    cfa0:	f008 fd62 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		update_fixed(input_block->data,
			 lowpass_block->data,
			 bandpass_block->data,
			 highpass_block->data);
	}
	release(input_block);
    cfa4:	4628      	mov	r0, r5
    cfa6:	f008 fd5f 	bl	15a68 <AudioStream::release(audio_block_struct*)>
	transmit(lowpass_block, 0);
    cfaa:	2200      	movs	r2, #0
    cfac:	4639      	mov	r1, r7
    cfae:	4620      	mov	r0, r4
    cfb0:	f008 fd82 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(lowpass_block);
    cfb4:	4638      	mov	r0, r7
    cfb6:	f008 fd57 	bl	15a68 <AudioStream::release(audio_block_struct*)>
	transmit(bandpass_block, 1);
    cfba:	2201      	movs	r2, #1
    cfbc:	4641      	mov	r1, r8
    cfbe:	4620      	mov	r0, r4
    cfc0:	f008 fd7a 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(bandpass_block);
    cfc4:	4640      	mov	r0, r8
    cfc6:	f008 fd4f 	bl	15a68 <AudioStream::release(audio_block_struct*)>
	transmit(highpass_block, 2);
    cfca:	2202      	movs	r2, #2
    cfcc:	4649      	mov	r1, r9
    cfce:	4620      	mov	r0, r4
    cfd0:	f008 fd72 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(highpass_block);
    cfd4:	4648      	mov	r0, r9
    cfd6:	f008 fd47 	bl	15a68 <AudioStream::release(audio_block_struct*)>
	return;
}
    cfda:	b003      	add	sp, #12
    cfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (control_block) release(control_block);
    cfe0:	2800      	cmp	r0, #0
    cfe2:	d0fa      	beq.n	cfda <AudioFilterStateVariable::update()+0x92>
    cfe4:	f008 fd40 	bl	15a68 <AudioStream::release(audio_block_struct*)>
    cfe8:	e7f7      	b.n	cfda <AudioFilterStateVariable::update()+0x92>
		release(input_block);
    cfea:	4628      	mov	r0, r5
    cfec:	f008 fd3c 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
    cff0:	2e00      	cmp	r6, #0
    cff2:	d0f2      	beq.n	cfda <AudioFilterStateVariable::update()+0x92>
    cff4:	4630      	mov	r0, r6
    cff6:	f008 fd37 	bl	15a68 <AudioStream::release(audio_block_struct*)>
    cffa:	e7ee      	b.n	cfda <AudioFilterStateVariable::update()+0x92>
		release(input_block);
    cffc:	4628      	mov	r0, r5
    cffe:	f008 fd33 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		release(lowpass_block);
    d002:	4638      	mov	r0, r7
    d004:	f008 fd30 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
    d008:	2e00      	cmp	r6, #0
    d00a:	d0e6      	beq.n	cfda <AudioFilterStateVariable::update()+0x92>
    d00c:	4630      	mov	r0, r6
    d00e:	f008 fd2b 	bl	15a68 <AudioStream::release(audio_block_struct*)>
    d012:	e7e2      	b.n	cfda <AudioFilterStateVariable::update()+0x92>
		release(input_block);
    d014:	4628      	mov	r0, r5
    d016:	f008 fd27 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		release(lowpass_block);
    d01a:	4638      	mov	r0, r7
    d01c:	f008 fd24 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		release(bandpass_block);
    d020:	4640      	mov	r0, r8
    d022:	f008 fd21 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		if (control_block) release(control_block);
    d026:	2e00      	cmp	r6, #0
    d028:	d0d7      	beq.n	cfda <AudioFilterStateVariable::update()+0x92>
    d02a:	4630      	mov	r0, r6
    d02c:	f008 fd1c 	bl	15a68 <AudioStream::release(audio_block_struct*)>
    d030:	e7d3      	b.n	cfda <AudioFilterStateVariable::update()+0x92>
			 highpass_block->data);
    d032:	1d03      	adds	r3, r0, #4
		update_fixed(input_block->data,
    d034:	9300      	str	r3, [sp, #0]
    d036:	f108 0304 	add.w	r3, r8, #4
    d03a:	1d3a      	adds	r2, r7, #4
    d03c:	1d29      	adds	r1, r5, #4
    d03e:	4620      	mov	r0, r4
    d040:	f7ff fec6 	bl	cdd0 <AudioFilterStateVariable::update_fixed(short const*, short*, short*, short*)>
    d044:	e7ae      	b.n	cfa4 <AudioFilterStateVariable::update()+0x5c>
	...

0000d048 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
		//if (x > filter_max) filter_max = x;
		//if (x < filter_min) filter_min = x;
	}
	transmit(output);
	release(output);
}
    d048:	b508      	push	{r3, lr}
DMAChannel AudioInputAnalog::dma(false);
    d04a:	4a03      	ldr	r2, [pc, #12]	; (d058 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    d04c:	4903      	ldr	r1, [pc, #12]	; (d05c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    d04e:	4804      	ldr	r0, [pc, #16]	; (d060 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x18>)
    d050:	f00c fb7a 	bl	19748 <__aeabi_atexit>
}
    d054:	bd08      	pop	{r3, pc}
    d056:	bf00      	nop
    d058:	20005258 	.word	0x20005258
    d05c:	0000c345 	.word	0x0000c345
    d060:	20006e74 	.word	0x20006e74

0000d064 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
	I2S1_RCSR = 0;
	I2S1_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR;
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
#endif
}
    d064:	b508      	push	{r3, lr}
DMAChannel AudioInputI2S::dma(false);
    d066:	4a03      	ldr	r2, [pc, #12]	; (d074 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    d068:	4903      	ldr	r1, [pc, #12]	; (d078 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    d06a:	4804      	ldr	r0, [pc, #16]	; (d07c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x18>)
    d06c:	f00c fb6c 	bl	19748 <__aeabi_atexit>
}
    d070:	bd08      	pop	{r3, pc}
    d072:	bf00      	nop
    d074:	20005258 	.word	0x20005258
    d078:	0000c345 	.word	0x0000c345
    d07c:	20006dec 	.word	0x20006dec

0000d080 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
	I2S2_RCSR = I2S_RCSR_RE | I2S_RCSR_BCE | I2S_RCSR_FRDE | I2S_RCSR_FR; // page 2099
	I2S2_TCSR |= I2S_TCSR_TE | I2S_TCSR_BCE; // page 2087
	update_responsibility = update_setup();
	dma.attachInterrupt(isr);

}
    d080:	b508      	push	{r3, lr}
DMAChannel AudioInputI2S2::dma(false);
    d082:	4a03      	ldr	r2, [pc, #12]	; (d090 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    d084:	4903      	ldr	r1, [pc, #12]	; (d094 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    d086:	4804      	ldr	r0, [pc, #16]	; (d098 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x18>)
    d088:	f00c fb5e 	bl	19748 <__aeabi_atexit>
}
    d08c:	bd08      	pop	{r3, pc}
    d08e:	bf00      	nop
    d090:	20005258 	.word	0x20005258
    d094:	0000c345 	.word	0x0000c345
    d098:	20006e04 	.word	0x20006e04

0000d09c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    d09c:	b508      	push	{r3, lr}
DMAChannel AudioInputI2SHex::dma(false);
    d09e:	4a03      	ldr	r2, [pc, #12]	; (d0ac <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    d0a0:	4903      	ldr	r1, [pc, #12]	; (d0b0 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    d0a2:	4804      	ldr	r0, [pc, #16]	; (d0b4 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x18>)
    d0a4:	f00c fb50 	bl	19748 <__aeabi_atexit>
}
    d0a8:	bd08      	pop	{r3, pc}
    d0aa:	bf00      	nop
    d0ac:	20005258 	.word	0x20005258
    d0b0:	0000c345 	.word	0x0000c345
    d0b4:	20006e7c 	.word	0x20006e7c

0000d0b8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
    d0b8:	b508      	push	{r3, lr}
DMAChannel AudioInputI2SOct::dma(false);
    d0ba:	4a03      	ldr	r2, [pc, #12]	; (d0c8 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    d0bc:	4903      	ldr	r1, [pc, #12]	; (d0cc <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    d0be:	4804      	ldr	r0, [pc, #16]	; (d0d0 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x18>)
    d0c0:	f00c fb42 	bl	19748 <__aeabi_atexit>
}
    d0c4:	bd08      	pop	{r3, pc}
    d0c6:	bf00      	nop
    d0c8:	20005258 	.word	0x20005258
    d0cc:	0000c345 	.word	0x0000c345
    d0d0:	20006e84 	.word	0x20006e84

0000d0d4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
    d0d4:	b508      	push	{r3, lr}
DMAChannel AudioInputI2SQuad::dma(false);
    d0d6:	4a03      	ldr	r2, [pc, #12]	; (d0e4 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    d0d8:	4903      	ldr	r1, [pc, #12]	; (d0e8 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    d0da:	4804      	ldr	r0, [pc, #16]	; (d0ec <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x18>)
    d0dc:	f00c fb34 	bl	19748 <__aeabi_atexit>
}
    d0e0:	bd08      	pop	{r3, pc}
    d0e2:	bf00      	nop
    d0e4:	20005258 	.word	0x20005258
    d0e8:	0000c345 	.word	0x0000c345
    d0ec:	20006e9c 	.word	0x20006e9c

0000d0f0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
     5,    49,    50,    95,   -41,     3,     4,    49,     6,    50,    52,    96,
     7,    51,    53,    97,    54,    99,   100,   144,   -40,     4,     5,    50,
     7,    51,    53,    97,     8,    52,    54,    98,    55,   100,   101,   145,
     9,    54,    55,    99,    56,   101,   102,   147,    58,   102,   103,   148,
   105,   149,   151,   195
};
    d0f0:	b508      	push	{r3, lr}
DMAChannel AudioInputPDM::dma(false);
    d0f2:	4a03      	ldr	r2, [pc, #12]	; (d100 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    d0f4:	4903      	ldr	r1, [pc, #12]	; (d104 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    d0f6:	4804      	ldr	r0, [pc, #16]	; (d108 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x18>)
    d0f8:	f00c fb26 	bl	19748 <__aeabi_atexit>
};
    d0fc:	bd08      	pop	{r3, pc}
    d0fe:	bf00      	nop
    d100:	20005258 	.word	0x20005258
    d104:	0000c345 	.word	0x0000c345
    d108:	20006df4 	.word	0x20006df4

0000d10c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:
	__enable_irq();
	if (out_left) {
		transmit(out_left, 0);
		release(out_left);
	}
}
    d10c:	b508      	push	{r3, lr}
DMAChannel AudioInputPDM2::dma(false);
    d10e:	4a03      	ldr	r2, [pc, #12]	; (d11c <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    d110:	4903      	ldr	r1, [pc, #12]	; (d120 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    d112:	4804      	ldr	r0, [pc, #16]	; (d124 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x18>)
    d114:	f00c fb18 	bl	19748 <__aeabi_atexit>
}
    d118:	bd08      	pop	{r3, pc}
    d11a:	bf00      	nop
    d11c:	20005258 	.word	0x20005258
    d120:	0000c345 	.word	0x0000c345
    d124:	20006e0c 	.word	0x20006e0c

0000d128 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
}

unsigned int AudioInputSPDIF3::sampleRate(void) {
	if (!pllLocked()) return 0;
	return (float)((uint64_t)F_BUS_ACTUAL * SPDIF_SRFM) / (0x8000000ULL * AudioOutputSPDIF3::dpll_Gain()) + 0.5F;
}
    d128:	b508      	push	{r3, lr}
DMAChannel AudioInputSPDIF3::dma(false);
    d12a:	4a03      	ldr	r2, [pc, #12]	; (d138 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    d12c:	4903      	ldr	r1, [pc, #12]	; (d13c <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    d12e:	4804      	ldr	r0, [pc, #16]	; (d140 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x18>)
    d130:	f00c fb0a 	bl	19748 <__aeabi_atexit>
}
    d134:	bd08      	pop	{r3, pc}
    d136:	bf00      	nop
    d138:	20005258 	.word	0x20005258
    d13c:	0000c345 	.word	0x0000c345
    d140:	20006e8c 	.word	0x20006e8c

0000d144 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
		for (i=0; i < 16; i++) {
			transmit(out_block[i], i);
			release(out_block[i]);
		}
	}
}
    d144:	b508      	push	{r3, lr}
DMAChannel AudioInputTDM::dma(false);
    d146:	4a03      	ldr	r2, [pc, #12]	; (d154 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    d148:	4903      	ldr	r1, [pc, #12]	; (d158 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    d14a:	4804      	ldr	r0, [pc, #16]	; (d15c <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x18>)
    d14c:	f00c fafc 	bl	19748 <__aeabi_atexit>
}
    d150:	bd08      	pop	{r3, pc}
    d152:	bf00      	nop
    d154:	20005258 	.word	0x20005258
    d158:	0000c345 	.word	0x0000c345
    d15c:	20006dfc 	.word	0x20006dfc

0000d160 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
		for (i=0; i < 16; i++) {
			transmit(out_block[i], i);
			release(out_block[i]);
		}
	}
}
    d160:	b508      	push	{r3, lr}
DMAChannel AudioInputTDM2::dma(false);
    d162:	4a03      	ldr	r2, [pc, #12]	; (d170 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    d164:	4903      	ldr	r1, [pc, #12]	; (d174 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    d166:	4804      	ldr	r0, [pc, #16]	; (d178 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x18>)
    d168:	f00c faee 	bl	19748 <__aeabi_atexit>
}
    d16c:	bd08      	pop	{r3, pc}
    d16e:	bf00      	nop
    d170:	20005258 	.word	0x20005258
    d174:	0000c345 	.word	0x0000c345
    d178:	20006e14 	.word	0x20006e14

0000d17c <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    d180:	f500 7e80 	add.w	lr, r0, #256	; 0x100

0000d184 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    d184:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    d188:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    d18c:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    d190:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    d194:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    d198:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    d19c:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    d1a0:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    d1a4:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    d1a8:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    d1ac:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    d1b0:	4586      	cmp	lr, r0
	bne .loopLR
    d1b2:	d1e7      	bne.n	d184 <.loopLR>

	pop	{r4-r11,r14}	
    d1b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8}
#endif
	BX lr
    d1b8:	4770      	bx	lr

0000d1ba <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    d1ba:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    d1be:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    d1c2:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    d1c6:	bf00      	nop

0000d1c8 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    d1c8:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    d1cc:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    d1d0:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    d1d4:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    d1d8:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    d1dc:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    d1e0:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    d1e4:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    d1e8:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    d1ec:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    d1f0:	4584      	cmp	ip, r0
	bne .loopL
    d1f2:	d1e9      	bne.n	d1c8 <.loopL>

	pop	{r4-r11}
    d1f4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    d1f8:	4770      	bx	lr

0000d1fa <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    d1fa:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    d1fe:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    d202:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    d206:	bf00      	nop

0000d208 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    d208:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    d20c:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    d210:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    d214:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    d218:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    d21c:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    d220:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    d224:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    d228:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    d22c:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    d230:	4584      	cmp	ip, r0
	bne .loopR
    d232:	d1e9      	bne.n	d208 <.loopR>

	pop	{r4-r11}
    d234:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    d238:	4770      	bx	lr

0000d23a <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    d23a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    d23e:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    d240:	f500 7b00 	add.w	fp, r0, #512	; 0x200

0000d244 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    d244:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    d248:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    d24c:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    d250:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    d254:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    d258:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    d25c:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    d260:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    d264:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    d268:	4583      	cmp	fp, r0
	bne .loopQuad
    d26a:	d1eb      	bne.n	d244 <.loopQuad>

	pop	{r4-r11}
    d26c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    d270:	4770      	bx	lr
    d272:	bf00      	nop

0000d274 <applyGain(short*, long)>:
#define MULTI_UNITYGAIN 65536

static void applyGain(int16_t *data, int32_t mult)
{
	uint32_t *p = (uint32_t *)data;
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    d274:	f500 7c80 	add.w	ip, r0, #256	; 0x100

	do {
		uint32_t tmp32 = *p; // read 2 samples from *data
    d278:	6803      	ldr	r3, [r0, #0]
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    d27a:	fb31 f203 	smulwb	r2, r1, r3
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    d27e:	fb31 f313 	smulwt	r3, r1, r3
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    d282:	f302 020f 	ssat	r2, #16, r2
    d286:	f303 030f 	ssat	r3, #16, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    d28a:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		int32_t val1 = signed_multiply_32x16b(mult, tmp32);
		int32_t val2 = signed_multiply_32x16t(mult, tmp32);
		val1 = signed_saturate_rshift(val1, 16, 0);
		val2 = signed_saturate_rshift(val2, 16, 0);
		*p++ = pack_16b_16b(val2, val1);
    d28e:	f840 3b04 	str.w	r3, [r0], #4
	} while (p < end);
    d292:	4584      	cmp	ip, r0
    d294:	d1f0      	bne.n	d278 <applyGain(short*, long)+0x4>
}
    d296:	4770      	bx	lr

0000d298 <AudioMixer4::update()>:
}

#endif

void AudioMixer4::update(void)
{
    d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d29c:	4607      	mov	r7, r0
	audio_block_t *in, *out=NULL;
	unsigned int channel;

	for (channel=0; channel < 4; channel++) {
    d29e:	f100 0518 	add.w	r5, r0, #24
    d2a2:	2400      	movs	r4, #0
	audio_block_t *in, *out=NULL;
    d2a4:	4626      	mov	r6, r4
    d2a6:	e02d      	b.n	d304 <AudioMixer4::update()+0x6c>
		if (!out) {
			out = receiveWritable(channel);
    d2a8:	4621      	mov	r1, r4
    d2aa:	4638      	mov	r0, r7
    d2ac:	f008 fc32 	bl	15b14 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    d2b0:	4606      	mov	r6, r0
    d2b2:	b318      	cbz	r0, d2fc <AudioMixer4::update()+0x64>
				int32_t mult = multiplier[channel];
    d2b4:	6829      	ldr	r1, [r5, #0]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    d2b6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    d2ba:	d01f      	beq.n	d2fc <AudioMixer4::update()+0x64>
    d2bc:	3004      	adds	r0, #4
    d2be:	f7ff ffd9 	bl	d274 <applyGain(short*, long)>
    d2c2:	e01b      	b.n	d2fc <AudioMixer4::update()+0x64>
    d2c4:	300c      	adds	r0, #12
    d2c6:	f106 030c 	add.w	r3, r6, #12
    d2ca:	f508 7c86 	add.w	ip, r8, #268	; 0x10c
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    d2ce:	f853 2c08 	ldr.w	r2, [r3, #-8]
    d2d2:	f850 1c08 	ldr.w	r1, [r0, #-8]
    d2d6:	fa92 f211 	qadd16	r2, r2, r1
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    d2da:	f843 2c08 	str.w	r2, [r3, #-8]
    d2de:	f853 2c04 	ldr.w	r2, [r3, #-4]
    d2e2:	f850 1c04 	ldr.w	r1, [r0, #-4]
    d2e6:	fa92 f211 	qadd16	r2, r2, r1
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    d2ea:	f843 2c04 	str.w	r2, [r3, #-4]
		} while (dst < end);
    d2ee:	3008      	adds	r0, #8
    d2f0:	3308      	adds	r3, #8
    d2f2:	4560      	cmp	r0, ip
    d2f4:	d1eb      	bne.n	d2ce <AudioMixer4::update()+0x36>
			}
		} else {
			in = receiveReadOnly(channel);
			if (in) {
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
				release(in);
    d2f6:	4640      	mov	r0, r8
    d2f8:	f008 fbb6 	bl	15a68 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    d2fc:	3401      	adds	r4, #1
    d2fe:	3504      	adds	r5, #4
    d300:	2c04      	cmp	r4, #4
    d302:	d025      	beq.n	d350 <AudioMixer4::update()+0xb8>
		if (!out) {
    d304:	2e00      	cmp	r6, #0
    d306:	d0cf      	beq.n	d2a8 <AudioMixer4::update()+0x10>
			in = receiveReadOnly(channel);
    d308:	4621      	mov	r1, r4
    d30a:	4638      	mov	r0, r7
    d30c:	f008 fbf6 	bl	15afc <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    d310:	4680      	mov	r8, r0
    d312:	2800      	cmp	r0, #0
    d314:	d0f2      	beq.n	d2fc <AudioMixer4::update()+0x64>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    d316:	1d31      	adds	r1, r6, #4
    d318:	1d02      	adds	r2, r0, #4
    d31a:	f8d5 c000 	ldr.w	ip, [r5]
	if (mult == MULTI_UNITYGAIN) {
    d31e:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
    d322:	d0cf      	beq.n	d2c4 <AudioMixer4::update()+0x2c>
    d324:	f500 7e82 	add.w	lr, r0, #260	; 0x104
			uint32_t tmp32 = *src++; // read 2 samples from *data
    d328:	f852 0b04 	ldr.w	r0, [r2], #4
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    d32c:	fb3c f300 	smulwb	r3, ip, r0
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    d330:	fb3c f010 	smulwt	r0, ip, r0
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    d334:	f303 030f 	ssat	r3, #16, r3
    d338:	f300 000f 	ssat	r0, #16, r0
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    d33c:	eac3 4300 	pkhbt	r3, r3, r0, lsl #16
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    d340:	6808      	ldr	r0, [r1, #0]
    d342:	fa93 f310 	qadd16	r3, r3, r0
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    d346:	f841 3b04 	str.w	r3, [r1], #4
		} while (dst < end);
    d34a:	4572      	cmp	r2, lr
    d34c:	d1ec      	bne.n	d328 <AudioMixer4::update()+0x90>
    d34e:	e7d2      	b.n	d2f6 <AudioMixer4::update()+0x5e>
			}
		}
	}
	if (out) {
    d350:	b13e      	cbz	r6, d362 <AudioMixer4::update()+0xca>
		transmit(out);
    d352:	2200      	movs	r2, #0
    d354:	4631      	mov	r1, r6
    d356:	4638      	mov	r0, r7
    d358:	f008 fbae 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    d35c:	4630      	mov	r0, r6
    d35e:	f008 fb83 	bl	15a68 <AudioStream::release(audio_block_struct*)>
	}
}
    d362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000d368 <AudioOutputI2S::isr()>:
	dma.attachInterrupt(isr);
}


void AudioOutputI2S::isr(void)
{
    d368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(KINETISK) || defined(__IMXRT1062__)
	int16_t *dest;
	audio_block_t *blockL, *blockR;
	uint32_t saddr, offsetL, offsetR;

	saddr = (uint32_t)(dma.TCD->SADDR);
    d36c:	4b42      	ldr	r3, [pc, #264]	; (d478 <AudioOutputI2S::isr()+0x110>)
    d36e:	681a      	ldr	r2, [r3, #0]
    d370:	6812      	ldr	r2, [r2, #0]
		DMA_CINT = channel;
    d372:	7919      	ldrb	r1, [r3, #4]
    d374:	4b41      	ldr	r3, [pc, #260]	; (d47c <AudioOutputI2S::isr()+0x114>)
    d376:	77d9      	strb	r1, [r3, #31]
	dma.clearInterrupt();
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    d378:	4b41      	ldr	r3, [pc, #260]	; (d480 <AudioOutputI2S::isr()+0x118>)
    d37a:	429a      	cmp	r2, r3
    d37c:	d20a      	bcs.n	d394 <AudioOutputI2S::isr()+0x2c>
		// DMA is transmitting the first half of the buffer
		// so we must fill the second half
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    d37e:	4b41      	ldr	r3, [pc, #260]	; (d484 <AudioOutputI2S::isr()+0x11c>)
    d380:	781b      	ldrb	r3, [r3, #0]
    d382:	2b00      	cmp	r3, #0
    d384:	d03e      	beq.n	d404 <AudioOutputI2S::isr()+0x9c>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    d386:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    d38a:	2240      	movs	r2, #64	; 0x40
    d38c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
    d390:	4c3b      	ldr	r4, [pc, #236]	; (d480 <AudioOutputI2S::isr()+0x118>)
    d392:	e000      	b.n	d396 <AudioOutputI2S::isr()+0x2e>
	} else {
		// DMA is transmitting the second half of the buffer
		// so we must fill the first half
		dest = (int16_t *)i2s_tx_buffer;
    d394:	4c3c      	ldr	r4, [pc, #240]	; (d488 <AudioOutputI2S::isr()+0x120>)
	}

	blockL = AudioOutputI2S::block_left_1st;
    d396:	4b3d      	ldr	r3, [pc, #244]	; (d48c <AudioOutputI2S::isr()+0x124>)
    d398:	681f      	ldr	r7, [r3, #0]
	blockR = AudioOutputI2S::block_right_1st;
    d39a:	4b3d      	ldr	r3, [pc, #244]	; (d490 <AudioOutputI2S::isr()+0x128>)
    d39c:	f8d3 8000 	ldr.w	r8, [r3]
	offsetL = AudioOutputI2S::block_left_offset;
    d3a0:	4b3c      	ldr	r3, [pc, #240]	; (d494 <AudioOutputI2S::isr()+0x12c>)
    d3a2:	881d      	ldrh	r5, [r3, #0]
	offsetR = AudioOutputI2S::block_right_offset;
    d3a4:	4b3c      	ldr	r3, [pc, #240]	; (d498 <AudioOutputI2S::isr()+0x130>)
    d3a6:	881e      	ldrh	r6, [r3, #0]

	if (blockL && blockR) {
    d3a8:	b117      	cbz	r7, d3b0 <AudioOutputI2S::isr()+0x48>
    d3aa:	f1b8 0f00 	cmp.w	r8, #0
    d3ae:	d12b      	bne.n	d408 <AudioOutputI2S::isr()+0xa0>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
	} else if (blockL) {
    d3b0:	b3bf      	cbz	r7, d422 <AudioOutputI2S::isr()+0xba>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    d3b2:	1d39      	adds	r1, r7, #4
    d3b4:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    d3b8:	4620      	mov	r0, r4
    d3ba:	f7ff fefe 	bl	d1ba <memcpy_tointerleaveL>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    d3be:	3540      	adds	r5, #64	; 0x40
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    d3c0:	4623      	mov	r3, r4
	asm("dsb");
    d3c2:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
    d3c6:	f504 7280 	add.w	r2, r4, #256	; 0x100
    d3ca:	f104 0120 	add.w	r1, r4, #32
    d3ce:	428a      	cmp	r2, r1
    d3d0:	bf34      	ite	cc
    d3d2:	2201      	movcc	r2, #1
    d3d4:	2208      	movcs	r2, #8
    d3d6:	eb04 1042 	add.w	r0, r4, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
    d3da:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    d3de:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
    d3e2:	3320      	adds	r3, #32
	} while (location < end_addr);
    d3e4:	4283      	cmp	r3, r0
    d3e6:	d1fa      	bne.n	d3de <AudioOutputI2S::isr()+0x76>
	asm("dsb");
    d3e8:	f3bf 8f4f 	dsb	sy
	asm("isb");
    d3ec:	f3bf 8f6f 	isb	sy
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
	}

	arm_dcache_flush_delete(dest, sizeof(i2s_tx_buffer) / 2 );

	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    d3f0:	2d7f      	cmp	r5, #127	; 0x7f
    d3f2:	d829      	bhi.n	d448 <AudioOutputI2S::isr()+0xe0>
		AudioOutputI2S::block_left_offset = offsetL;
    d3f4:	4b27      	ldr	r3, [pc, #156]	; (d494 <AudioOutputI2S::isr()+0x12c>)
    d3f6:	801d      	strh	r5, [r3, #0]
		AudioOutputI2S::block_left_offset = 0;
		AudioStream::release(blockL);
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
		AudioOutputI2S::block_left_2nd = NULL;
	}
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    d3f8:	2e7f      	cmp	r6, #127	; 0x7f
    d3fa:	d831      	bhi.n	d460 <AudioOutputI2S::isr()+0xf8>
		AudioOutputI2S::block_right_offset = offsetR;
    d3fc:	4b26      	ldr	r3, [pc, #152]	; (d498 <AudioOutputI2S::isr()+0x130>)
    d3fe:	801e      	strh	r6, [r3, #0]
			*dest = 0;
			dest += 2;
		} while (dest < end);
	}
#endif
}
    d400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dest = (int16_t *)&i2s_tx_buffer[AUDIO_BLOCK_SAMPLES/2];
    d404:	4c1e      	ldr	r4, [pc, #120]	; (d480 <AudioOutputI2S::isr()+0x118>)
    d406:	e7c6      	b.n	d396 <AudioOutputI2S::isr()+0x2e>
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    d408:	f108 0204 	add.w	r2, r8, #4
    d40c:	1d39      	adds	r1, r7, #4
    d40e:	eb02 0246 	add.w	r2, r2, r6, lsl #1
    d412:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    d416:	4620      	mov	r0, r4
    d418:	f7ff feb0 	bl	d17c <memcpy_tointerleaveLR>
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    d41c:	3540      	adds	r5, #64	; 0x40
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    d41e:	3640      	adds	r6, #64	; 0x40
    d420:	e7ce      	b.n	d3c0 <AudioOutputI2S::isr()+0x58>
	} else if (blockR) {
    d422:	f1b8 0f00 	cmp.w	r8, #0
    d426:	d008      	beq.n	d43a <AudioOutputI2S::isr()+0xd2>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    d428:	f108 0104 	add.w	r1, r8, #4
    d42c:	eb01 0146 	add.w	r1, r1, r6, lsl #1
    d430:	4620      	mov	r0, r4
    d432:	f7ff fee2 	bl	d1fa <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    d436:	3640      	adds	r6, #64	; 0x40
    d438:	e7c2      	b.n	d3c0 <AudioOutputI2S::isr()+0x58>
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    d43a:	f44f 7280 	mov.w	r2, #256	; 0x100
    d43e:	2100      	movs	r1, #0
    d440:	4620      	mov	r0, r4
    d442:	f015 fe09 	bl	23058 <memset>
    d446:	e7bb      	b.n	d3c0 <AudioOutputI2S::isr()+0x58>
		AudioOutputI2S::block_left_offset = 0;
    d448:	2400      	movs	r4, #0
    d44a:	4b12      	ldr	r3, [pc, #72]	; (d494 <AudioOutputI2S::isr()+0x12c>)
    d44c:	801c      	strh	r4, [r3, #0]
		AudioStream::release(blockL);
    d44e:	4638      	mov	r0, r7
    d450:	f008 fb0a 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    d454:	4b11      	ldr	r3, [pc, #68]	; (d49c <AudioOutputI2S::isr()+0x134>)
    d456:	6819      	ldr	r1, [r3, #0]
    d458:	4a0c      	ldr	r2, [pc, #48]	; (d48c <AudioOutputI2S::isr()+0x124>)
    d45a:	6011      	str	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    d45c:	601c      	str	r4, [r3, #0]
    d45e:	e7cb      	b.n	d3f8 <AudioOutputI2S::isr()+0x90>
		AudioOutputI2S::block_right_offset = 0;
    d460:	2400      	movs	r4, #0
    d462:	4b0d      	ldr	r3, [pc, #52]	; (d498 <AudioOutputI2S::isr()+0x130>)
    d464:	801c      	strh	r4, [r3, #0]
		AudioStream::release(blockR);
    d466:	4640      	mov	r0, r8
    d468:	f008 fafe 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    d46c:	4b0c      	ldr	r3, [pc, #48]	; (d4a0 <AudioOutputI2S::isr()+0x138>)
    d46e:	6819      	ldr	r1, [r3, #0]
    d470:	4a07      	ldr	r2, [pc, #28]	; (d490 <AudioOutputI2S::isr()+0x128>)
    d472:	6011      	str	r1, [r2, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    d474:	601c      	str	r4, [r3, #0]
}
    d476:	e7c3      	b.n	d400 <AudioOutputI2S::isr()+0x98>
    d478:	20006e2c 	.word	0x20006e2c
    d47c:	400e8000 	.word	0x400e8000
    d480:	20204200 	.word	0x20204200
    d484:	20008c24 	.word	0x20008c24
    d488:	20204100 	.word	0x20204100
    d48c:	20006e1c 	.word	0x20006e1c
    d490:	20006e24 	.word	0x20006e24
    d494:	20008c0a 	.word	0x20008c0a
    d498:	20008c0c 	.word	0x20008c0c
    d49c:	20006e20 	.word	0x20006e20
    d4a0:	20006e28 	.word	0x20006e28

0000d4a4 <AudioOutputI2S::update()>:




void AudioOutputI2S::update(void)
{
    d4a4:	b510      	push	{r4, lr}
    d4a6:	4604      	mov	r4, r0
	//if (!active) return;
	//audio_block_t *block = receiveReadOnly();
	//if (block) release(block);

	audio_block_t *block;
	block = receiveReadOnly(0); // input 0 = left channel
    d4a8:	2100      	movs	r1, #0
    d4aa:	f008 fb27 	bl	15afc <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    d4ae:	b188      	cbz	r0, d4d4 <AudioOutputI2S::update()+0x30>
    d4b0:	4603      	mov	r3, r0
		__disable_irq();
    d4b2:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    d4b4:	4a1d      	ldr	r2, [pc, #116]	; (d52c <AudioOutputI2S::update()+0x88>)
    d4b6:	6810      	ldr	r0, [r2, #0]
    d4b8:	b320      	cbz	r0, d504 <AudioOutputI2S::update()+0x60>
			block_left_1st = block;
			block_left_offset = 0;
			__enable_irq();
		} else if (block_left_2nd == NULL) {
    d4ba:	4a1d      	ldr	r2, [pc, #116]	; (d530 <AudioOutputI2S::update()+0x8c>)
    d4bc:	6812      	ldr	r2, [r2, #0]
    d4be:	b33a      	cbz	r2, d510 <AudioOutputI2S::update()+0x6c>
			block_left_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_left_1st;
			block_left_1st = block_left_2nd;
    d4c0:	491a      	ldr	r1, [pc, #104]	; (d52c <AudioOutputI2S::update()+0x88>)
    d4c2:	600a      	str	r2, [r1, #0]
			block_left_2nd = block;
    d4c4:	4a1a      	ldr	r2, [pc, #104]	; (d530 <AudioOutputI2S::update()+0x8c>)
    d4c6:	6013      	str	r3, [r2, #0]
			block_left_offset = 0;
    d4c8:	4b1a      	ldr	r3, [pc, #104]	; (d534 <AudioOutputI2S::update()+0x90>)
    d4ca:	2200      	movs	r2, #0
    d4cc:	801a      	strh	r2, [r3, #0]
			__enable_irq();
    d4ce:	b662      	cpsie	i
			release(tmp);
    d4d0:	f008 faca 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		}
	}
	block = receiveReadOnly(1); // input 1 = right channel
    d4d4:	2101      	movs	r1, #1
    d4d6:	4620      	mov	r0, r4
    d4d8:	f008 fb10 	bl	15afc <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    d4dc:	4603      	mov	r3, r0
    d4de:	b180      	cbz	r0, d502 <AudioOutputI2S::update()+0x5e>
		__disable_irq();
    d4e0:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    d4e2:	4a15      	ldr	r2, [pc, #84]	; (d538 <AudioOutputI2S::update()+0x94>)
    d4e4:	6810      	ldr	r0, [r2, #0]
    d4e6:	b1b8      	cbz	r0, d518 <AudioOutputI2S::update()+0x74>
			block_right_1st = block;
			block_right_offset = 0;
			__enable_irq();
		} else if (block_right_2nd == NULL) {
    d4e8:	4a14      	ldr	r2, [pc, #80]	; (d53c <AudioOutputI2S::update()+0x98>)
    d4ea:	6812      	ldr	r2, [r2, #0]
    d4ec:	b1d2      	cbz	r2, d524 <AudioOutputI2S::update()+0x80>
			block_right_2nd = block;
			__enable_irq();
		} else {
			audio_block_t *tmp = block_right_1st;
			block_right_1st = block_right_2nd;
    d4ee:	4912      	ldr	r1, [pc, #72]	; (d538 <AudioOutputI2S::update()+0x94>)
    d4f0:	600a      	str	r2, [r1, #0]
			block_right_2nd = block;
    d4f2:	4a12      	ldr	r2, [pc, #72]	; (d53c <AudioOutputI2S::update()+0x98>)
    d4f4:	6013      	str	r3, [r2, #0]
			block_right_offset = 0;
    d4f6:	4b12      	ldr	r3, [pc, #72]	; (d540 <AudioOutputI2S::update()+0x9c>)
    d4f8:	2200      	movs	r2, #0
    d4fa:	801a      	strh	r2, [r3, #0]
			__enable_irq();
    d4fc:	b662      	cpsie	i
			release(tmp);
    d4fe:	f008 fab3 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		}
	}
}
    d502:	bd10      	pop	{r4, pc}
			block_left_1st = block;
    d504:	6013      	str	r3, [r2, #0]
			block_left_offset = 0;
    d506:	4b0b      	ldr	r3, [pc, #44]	; (d534 <AudioOutputI2S::update()+0x90>)
    d508:	2200      	movs	r2, #0
    d50a:	801a      	strh	r2, [r3, #0]
			__enable_irq();
    d50c:	b662      	cpsie	i
    d50e:	e7e1      	b.n	d4d4 <AudioOutputI2S::update()+0x30>
			block_left_2nd = block;
    d510:	4a07      	ldr	r2, [pc, #28]	; (d530 <AudioOutputI2S::update()+0x8c>)
    d512:	6013      	str	r3, [r2, #0]
			__enable_irq();
    d514:	b662      	cpsie	i
    d516:	e7dd      	b.n	d4d4 <AudioOutputI2S::update()+0x30>
			block_right_1st = block;
    d518:	6013      	str	r3, [r2, #0]
			block_right_offset = 0;
    d51a:	4b09      	ldr	r3, [pc, #36]	; (d540 <AudioOutputI2S::update()+0x9c>)
    d51c:	2200      	movs	r2, #0
    d51e:	801a      	strh	r2, [r3, #0]
			__enable_irq();
    d520:	b662      	cpsie	i
    d522:	e7ee      	b.n	d502 <AudioOutputI2S::update()+0x5e>
			block_right_2nd = block;
    d524:	4a05      	ldr	r2, [pc, #20]	; (d53c <AudioOutputI2S::update()+0x98>)
    d526:	6013      	str	r3, [r2, #0]
			__enable_irq();
    d528:	b662      	cpsie	i
    d52a:	e7ea      	b.n	d502 <AudioOutputI2S::update()+0x5e>
    d52c:	20006e1c 	.word	0x20006e1c
    d530:	20006e20 	.word	0x20006e20
    d534:	20008c0a 	.word	0x20008c0a
    d538:	20006e24 	.word	0x20006e24
    d53c:	20006e28 	.word	0x20006e28
    d540:	20008c0c 	.word	0x20008c0c

0000d544 <AudioOutputI2S::config_i2s(bool)>:
#endif
#endif


void AudioOutputI2S::config_i2s(bool only_bclk)
{
    d544:	b538      	push	{r3, r4, r5, lr}
    d546:	4604      	mov	r4, r0
	}
	CORE_PIN9_CONFIG  = PORT_PCR_MUX(6); // pin  9, PTC3, I2S0_TX_BCLK

#elif defined(__IMXRT1062__)

	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    d548:	4a2e      	ldr	r2, [pc, #184]	; (d604 <AudioOutputI2S::config_i2s(bool)+0xc0>)
    d54a:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
    d54c:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    d550:	67d3      	str	r3, [r2, #124]	; 0x7c

	// if either transmitter or receiver is enabled, do nothing
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    d552:	4b2d      	ldr	r3, [pc, #180]	; (d608 <AudioOutputI2S::config_i2s(bool)+0xc4>)
    d554:	689b      	ldr	r3, [r3, #8]
    d556:	2b00      	cmp	r3, #0
    d558:	db4a      	blt.n	d5f0 <AudioOutputI2S::config_i2s(bool)+0xac>
    d55a:	4b2b      	ldr	r3, [pc, #172]	; (d608 <AudioOutputI2S::config_i2s(bool)+0xc4>)
    d55c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    d560:	2b00      	cmp	r3, #0
    d562:	db45      	blt.n	d5f0 <AudioOutputI2S::config_i2s(bool)+0xac>

	double C = ((double)fs * 256 * n1 * n2) / 24000000;
	int c0 = C;
	int c2 = 10000;
	int c1 = C * c2 - (c0 * c2);
	set_audioClock(c0, c1, c2);
    d564:	2300      	movs	r3, #0
    d566:	f242 7210 	movw	r2, #10000	; 0x2710
    d56a:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    d56e:	201c      	movs	r0, #28
    d570:	f01b f98e 	bl	28890 <___Z14set_audioClockilmb_veneer>

	// clear SAI1_CLK register locations
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    d574:	4a23      	ldr	r2, [pc, #140]	; (d604 <AudioOutputI2S::config_i2s(bool)+0xc0>)
    d576:	69d3      	ldr	r3, [r2, #28]
    d578:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    d57c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    d580:	61d3      	str	r3, [r2, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    d582:	6a91      	ldr	r1, [r2, #40]	; 0x28
    d584:	4b21      	ldr	r3, [pc, #132]	; (d60c <AudioOutputI2S::config_i2s(bool)+0xc8>)
    d586:	400b      	ands	r3, r1
		   | CCM_CS1CDR_SAI1_CLK_PRED(n1-1) // &0x07
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    d588:	f043 03ce 	orr.w	r3, r3, #206	; 0xce
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    d58c:	6293      	str	r3, [r2, #40]	; 0x28

	// Select MCLK
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    d58e:	f5a2 22a0 	sub.w	r2, r2, #327680	; 0x50000
    d592:	6851      	ldr	r1, [r2, #4]
		& ~(IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL_MASK))
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    d594:	4b1e      	ldr	r3, [pc, #120]	; (d610 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    d596:	400b      	ands	r3, r1
    d598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    d59c:	6053      	str	r3, [r2, #4]

	if (!only_bclk)
    d59e:	b92c      	cbnz	r4, d5ac <AudioOutputI2S::config_i2s(bool)+0x68>
	{
	  CORE_PIN23_CONFIG = 3;  //1:MCLK
    d5a0:	4b1c      	ldr	r3, [pc, #112]	; (d614 <AudioOutputI2S::config_i2s(bool)+0xd0>)
    d5a2:	2203      	movs	r2, #3
    d5a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	  CORE_PIN20_CONFIG = 3;  //1:RX_SYNC  (LRCLK)
    d5a8:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	}
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    d5ac:	4b19      	ldr	r3, [pc, #100]	; (d614 <AudioOutputI2S::config_i2s(bool)+0xd0>)
    d5ae:	2203      	movs	r2, #3
    d5b0:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	int rsync = 0;
	int tsync = 1;

	I2S1_TMR = 0;
    d5b4:	f503 13c6 	add.w	r3, r3, #1622016	; 0x18c000
    d5b8:	2500      	movs	r5, #0
    d5ba:	661d      	str	r5, [r3, #96]	; 0x60
	//I2S1_TCSR = (1<<25); //Reset
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    d5bc:	2401      	movs	r4, #1
    d5be:	60dc      	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    d5c0:	4a15      	ldr	r2, [pc, #84]	; (d618 <AudioOutputI2S::config_i2s(bool)+0xd4>)
    d5c2:	611a      	str	r2, [r3, #16]
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((1)) | I2S_TCR2_MSEL(1));
	I2S1_TCR3 = I2S_TCR3_TCE;
    d5c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    d5c8:	6158      	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    d5ca:	4914      	ldr	r1, [pc, #80]	; (d61c <AudioOutputI2S::config_i2s(bool)+0xd8>)
    d5cc:	6199      	str	r1, [r3, #24]
		    | I2S_TCR4_FSD | I2S_TCR4_FSE | I2S_TCR4_FSP;
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    d5ce:	4a14      	ldr	r2, [pc, #80]	; (d620 <AudioOutputI2S::config_i2s(bool)+0xdc>)
    d5d0:	61da      	str	r2, [r3, #28]

	I2S1_RMR = 0;
    d5d2:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
	//I2S1_RCSR = (1<<25); //Reset
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    d5d6:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
    d5da:	f104 64e0 	add.w	r4, r4, #117440512	; 0x7000000
    d5de:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
		    | (I2S_RCR2_BCD | I2S_RCR2_DIV((1)) | I2S_RCR2_MSEL(1));
	I2S1_RCR3 = I2S_RCR3_RCE;
    d5e2:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
    d5e6:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
		    | I2S_RCR4_FSE | I2S_RCR4_FSP | I2S_RCR4_FSD;
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    d5ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

#endif
}
    d5ee:	bd38      	pop	{r3, r4, r5, pc}
	  if (!only_bclk) // if previous transmitter/receiver only activated BCLK, activate the other clock pins now
    d5f0:	2c00      	cmp	r4, #0
    d5f2:	d1fc      	bne.n	d5ee <AudioOutputI2S::config_i2s(bool)+0xaa>
	    CORE_PIN23_CONFIG = 3;  //1:MCLK
    d5f4:	4b07      	ldr	r3, [pc, #28]	; (d614 <AudioOutputI2S::config_i2s(bool)+0xd0>)
    d5f6:	2203      	movs	r2, #3
    d5f8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC (LRCLK)
    d5fc:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    d600:	e7f5      	b.n	d5ee <AudioOutputI2S::config_i2s(bool)+0xaa>
    d602:	bf00      	nop
    d604:	400fc000 	.word	0x400fc000
    d608:	40384000 	.word	0x40384000
    d60c:	fffffe00 	.word	0xfffffe00
    d610:	fff7fff8 	.word	0xfff7fff8
    d614:	401f8000 	.word	0x401f8000
    d618:	47000001 	.word	0x47000001
    d61c:	00011f1b 	.word	0x00011f1b
    d620:	1f1f1f00 	.word	0x1f1f1f00

0000d624 <AudioOutputI2S::begin()>:
{
    d624:	b538      	push	{r3, r4, r5, lr}
	dma.begin(true); // Allocate the DMA channel first
    d626:	4c29      	ldr	r4, [pc, #164]	; (d6cc <AudioOutputI2S::begin()+0xa8>)
    d628:	2101      	movs	r1, #1
    d62a:	4620      	mov	r0, r4
    d62c:	f008 fbb4 	bl	15d98 <DMAChannel::begin(bool)>
	block_left_1st = NULL;
    d630:	2500      	movs	r5, #0
    d632:	4b27      	ldr	r3, [pc, #156]	; (d6d0 <AudioOutputI2S::begin()+0xac>)
    d634:	601d      	str	r5, [r3, #0]
	block_right_1st = NULL;
    d636:	4b27      	ldr	r3, [pc, #156]	; (d6d4 <AudioOutputI2S::begin()+0xb0>)
    d638:	601d      	str	r5, [r3, #0]
	config_i2s();
    d63a:	4628      	mov	r0, r5
    d63c:	f7ff ff82 	bl	d544 <AudioOutputI2S::config_i2s(bool)>
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    d640:	4b25      	ldr	r3, [pc, #148]	; (d6d8 <AudioOutputI2S::begin()+0xb4>)
    d642:	2203      	movs	r2, #3
    d644:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	dma.TCD->SADDR = i2s_tx_buffer;
    d648:	6823      	ldr	r3, [r4, #0]
    d64a:	4a24      	ldr	r2, [pc, #144]	; (d6dc <AudioOutputI2S::begin()+0xb8>)
    d64c:	601a      	str	r2, [r3, #0]
	dma.TCD->SOFF = 2;
    d64e:	6823      	ldr	r3, [r4, #0]
    d650:	2202      	movs	r2, #2
    d652:	809a      	strh	r2, [r3, #4]
	dma.TCD->ATTR = DMA_TCD_ATTR_SSIZE(1) | DMA_TCD_ATTR_DSIZE(1);
    d654:	f240 1101 	movw	r1, #257	; 0x101
    d658:	80d9      	strh	r1, [r3, #6]
	dma.TCD->NBYTES_MLNO = 2;
    d65a:	609a      	str	r2, [r3, #8]
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    d65c:	f2a2 2202 	subw	r2, r2, #514	; 0x202
    d660:	60da      	str	r2, [r3, #12]
	dma.TCD->DOFF = 0;
    d662:	829d      	strh	r5, [r3, #20]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    d664:	f44f 7280 	mov.w	r2, #256	; 0x100
    d668:	82da      	strh	r2, [r3, #22]
	dma.TCD->DLASTSGA = 0;
    d66a:	619d      	str	r5, [r3, #24]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    d66c:	83da      	strh	r2, [r3, #30]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    d66e:	2206      	movs	r2, #6
    d670:	839a      	strh	r2, [r3, #28]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    d672:	4a1b      	ldr	r2, [pc, #108]	; (d6e0 <AudioOutputI2S::begin()+0xbc>)
    d674:	611a      	str	r2, [r3, #16]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    d676:	7922      	ldrb	r2, [r4, #4]
    d678:	4b1a      	ldr	r3, [pc, #104]	; (d6e4 <AudioOutputI2S::begin()+0xc0>)
		*mux = 0;
    d67a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    d67e:	491a      	ldr	r1, [pc, #104]	; (d6e8 <AudioOutputI2S::begin()+0xc4>)
    d680:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		DMA_SERQ = channel;
    d684:	7922      	ldrb	r2, [r4, #4]
    d686:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
    d68a:	76da      	strb	r2, [r3, #27]
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    d68c:	f503 1327 	add.w	r3, r3, #2736128	; 0x29c000
    d690:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    d694:	f042 4210 	orr.w	r2, r2, #2415919104	; 0x90000000
    d698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    d69c:	4a13      	ldr	r2, [pc, #76]	; (d6ec <AudioOutputI2S::begin()+0xc8>)
    d69e:	609a      	str	r2, [r3, #8]
	update_responsibility = update_setup();
    d6a0:	f008 fb5c 	bl	15d5c <AudioStream::update_setup()>
    d6a4:	4b12      	ldr	r3, [pc, #72]	; (d6f0 <AudioOutputI2S::begin()+0xcc>)
    d6a6:	7018      	strb	r0, [r3, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    d6a8:	7922      	ldrb	r2, [r4, #4]
    d6aa:	f102 0110 	add.w	r1, r2, #16
    d6ae:	4b11      	ldr	r3, [pc, #68]	; (d6f4 <AudioOutputI2S::begin()+0xd0>)
    d6b0:	4811      	ldr	r0, [pc, #68]	; (d6f8 <AudioOutputI2S::begin()+0xd4>)
    d6b2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    d6b6:	4b11      	ldr	r3, [pc, #68]	; (d6fc <AudioOutputI2S::begin()+0xd8>)
    d6b8:	eb03 1362 	add.w	r3, r3, r2, asr #5
    d6bc:	009b      	lsls	r3, r3, #2
    d6be:	f002 021f 	and.w	r2, r2, #31
    d6c2:	2101      	movs	r1, #1
    d6c4:	fa01 f202 	lsl.w	r2, r1, r2
    d6c8:	601a      	str	r2, [r3, #0]
}
    d6ca:	bd38      	pop	{r3, r4, r5, pc}
    d6cc:	20006e2c 	.word	0x20006e2c
    d6d0:	20006e1c 	.word	0x20006e1c
    d6d4:	20006e24 	.word	0x20006e24
    d6d8:	401f8000 	.word	0x401f8000
    d6dc:	20204100 	.word	0x20204100
    d6e0:	40384022 	.word	0x40384022
    d6e4:	400ec000 	.word	0x400ec000
    d6e8:	80000014 	.word	0x80000014
    d6ec:	90000001 	.word	0x90000001
    d6f0:	20008c24 	.word	0x20008c24
    d6f4:	20006000 	.word	0x20006000
    d6f8:	0000d369 	.word	0x0000d369
    d6fc:	38003840 	.word	0x38003840

0000d700 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
	I2S1_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(31) | I2S_RCR4_MF
		| I2S_RCR4_FSE | I2S_RCR4_FSP;
	I2S1_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

#endif
}
    d700:	b508      	push	{r3, lr}
DMAChannel AudioOutputI2S::dma(false);
    d702:	4a03      	ldr	r2, [pc, #12]	; (d710 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    d704:	4903      	ldr	r1, [pc, #12]	; (d714 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    d706:	4804      	ldr	r0, [pc, #16]	; (d718 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x18>)
    d708:	f00c f81e 	bl	19748 <__aeabi_atexit>
}
    d70c:	bd08      	pop	{r3, pc}
    d70e:	bf00      	nop
    d710:	20005258 	.word	0x20005258
    d714:	0000c345 	.word	0x0000c345
    d718:	20006e2c 	.word	0x20006e2c

0000d71c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
				| I2S_RCR4_FSP;
	I2S2_RCR5 = I2S_RCR5_WNW(noBitsM1)
				| I2S_RCR5_W0W(noBitsM1)
				| I2S_RCR5_FBT(31);
	
}
    d71c:	b508      	push	{r3, lr}
DMAChannel AudioOutputI2S2::dma(false);
    d71e:	4a03      	ldr	r2, [pc, #12]	; (d72c <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    d720:	4903      	ldr	r1, [pc, #12]	; (d730 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    d722:	4804      	ldr	r0, [pc, #16]	; (d734 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x18>)
    d724:	f00c f810 	bl	19748 <__aeabi_atexit>
}
    d728:	bd08      	pop	{r3, pc}
    d72a:	bf00      	nop
    d72c:	20005258 	.word	0x20005258
    d730:	0000c345 	.word	0x0000c345
    d734:	20006e64 	.word	0x20006e64

0000d738 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
			ch6_offset = 0;
			__enable_irq();
			release(tmp);
		}
	}
}
    d738:	b508      	push	{r3, lr}
DMAChannel AudioOutputI2SHex::dma(false);
    d73a:	4a03      	ldr	r2, [pc, #12]	; (d748 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    d73c:	4903      	ldr	r1, [pc, #12]	; (d74c <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    d73e:	4804      	ldr	r0, [pc, #16]	; (d750 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x18>)
    d740:	f00c f802 	bl	19748 <__aeabi_atexit>
}
    d744:	bd08      	pop	{r3, pc}
    d746:	bf00      	nop
    d748:	20005258 	.word	0x20005258
    d74c:	0000c345 	.word	0x0000c345
    d750:	20006ea4 	.word	0x20006ea4

0000d754 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
			ch8_offset = 0;
			__enable_irq();
			release(tmp);
		}
	}
}
    d754:	b508      	push	{r3, lr}
DMAChannel AudioOutputI2SOct::dma(false);
    d756:	4a03      	ldr	r2, [pc, #12]	; (d764 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    d758:	4903      	ldr	r1, [pc, #12]	; (d768 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    d75a:	4804      	ldr	r0, [pc, #16]	; (d76c <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x18>)
    d75c:	f00b fff4 	bl	19748 <__aeabi_atexit>
}
    d760:	bd08      	pop	{r3, pc}
    d762:	bf00      	nop
    d764:	20005258 	.word	0x20005258
    d768:	0000c345 	.word	0x0000c345
    d76c:	20006eac 	.word	0x20006eac

0000d770 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
			ch4_offset = 0;
			__enable_irq();
			release(tmp);
		}
	}
}
    d770:	b508      	push	{r3, lr}
DMAChannel AudioOutputI2SQuad::dma(false);
    d772:	4a03      	ldr	r2, [pc, #12]	; (d780 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    d774:	4903      	ldr	r1, [pc, #12]	; (d784 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    d776:	4804      	ldr	r0, [pc, #16]	; (d788 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x18>)
    d778:	f00b ffe6 	bl	19748 <__aeabi_atexit>
}
    d77c:	bd08      	pop	{r3, pc}
    d77e:	bf00      	nop
    d780:	20005258 	.word	0x20005258
    d784:	0000c345 	.word	0x0000c345
    d788:	20006ecc 	.word	0x20006ecc

0000d78c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
	I2S3_TCR2 = I2S_TCR2_SYNC(0) /*| I2S_TCR2_BCP*/ // sync=0; tx is async;
		    | (I2S_TCR2_BCD | I2S_TCR2_DIV((3)) | I2S_TCR2_MSEL(1));
	I2S3_TCR3 = I2S_TCR3_TCE;
	I2S3_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((16-1)) | I2S_TCR4_MF | I2S_TCR4_FSD /*| I2S_TCR4_FSE*/ /* | I2S_TCR4_FSP */;
	I2S3_TCR5 = I2S_TCR5_WNW((16-1)) | I2S_TCR5_W0W((16-1)) | I2S_TCR5_FBT((16-1));
}
    d78c:	b508      	push	{r3, lr}
DMAChannel AudioOutputMQS::dma(false);
    d78e:	4a03      	ldr	r2, [pc, #12]	; (d79c <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    d790:	4903      	ldr	r1, [pc, #12]	; (d7a0 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    d792:	4804      	ldr	r0, [pc, #16]	; (d7a4 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x18>)
    d794:	f00b ffd8 	bl	19748 <__aeabi_atexit>
}
    d798:	bd08      	pop	{r3, pc}
    d79a:	bf00      	nop
    d79c:	20005258 	.word	0x20005258
    d7a0:	0000c345 	.word	0x0000c345
    d7a4:	20006e34 	.word	0x20006e34

0000d7a8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
//	I2S1_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD; //TDA1543
	I2S1_RCR4 = I2S_RCR4_FRSZ(1) | I2S_RCR4_SYWD(15) | I2S_RCR4_MF /*| I2S_RCR4_FSE*/ | I2S_RCR4_FSP | I2S_RCR4_FSD; //PT8211
	I2S1_RCR5 = I2S_RCR5_WNW(15) | I2S_RCR5_W0W(15) | I2S_RCR5_FBT(15);

#endif
}
    d7a8:	b508      	push	{r3, lr}
DMAChannel AudioOutputPT8211::dma(false);
    d7aa:	4a03      	ldr	r2, [pc, #12]	; (d7b8 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    d7ac:	4903      	ldr	r1, [pc, #12]	; (d7bc <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    d7ae:	4804      	ldr	r0, [pc, #16]	; (d7c0 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x18>)
    d7b0:	f00b ffca 	bl	19748 <__aeabi_atexit>
}
    d7b4:	bd08      	pop	{r3, pc}
    d7b6:	bf00      	nop
    d7b8:	20005258 	.word	0x20005258
    d7bc:	0000c345 	.word	0x0000c345
    d7c0:	20006eb4 	.word	0x20006eb4

0000d7c4 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
	I2S2_TCR3 = I2S_TCR3_TCE;
//	I2S2_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF | I2S_TCR4_FSE | I2S_TCR4_FSP | I2S_TCR4_FSD; //TDA1543
	I2S2_TCR4 = I2S_TCR4_FRSZ(1) | I2S_TCR4_SYWD(15) | I2S_TCR4_MF /*| I2S_TCR4_FSE*/ | I2S_TCR4_FSP | I2S_TCR4_FSD; //PT8211
	I2S2_TCR5 = I2S_TCR5_WNW(15) | I2S_TCR5_W0W(15) | I2S_TCR5_FBT(15);

}
    d7c4:	b508      	push	{r3, lr}
DMAChannel AudioOutputPT8211_2::dma(false);
    d7c6:	4a03      	ldr	r2, [pc, #12]	; (d7d4 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    d7c8:	4903      	ldr	r1, [pc, #12]	; (d7d8 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    d7ca:	4804      	ldr	r0, [pc, #16]	; (d7dc <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x18>)
    d7cc:	f00b ffbc 	bl	19748 <__aeabi_atexit>
}
    d7d0:	bd08      	pop	{r3, pc}
    d7d2:	bf00      	nop
    d7d4:	20005258 	.word	0x20005258
    d7d8:	0000c345 	.word	0x0000c345
    d7dc:	20006ed4 	.word	0x20006ed4

0000d7e0 <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    d7e0:	b510      	push	{r4, lr}
		release();
    d7e2:	4c04      	ldr	r4, [pc, #16]	; (d7f4 <__tcf_0+0x14>)
    d7e4:	f104 0008 	add.w	r0, r4, #8
    d7e8:	f008 fb2a 	bl	15e40 <DMAChannel::release()>
    d7ec:	4620      	mov	r0, r4
    d7ee:	f008 fb27 	bl	15e40 <DMAChannel::release()>
    d7f2:	bd10      	pop	{r4, pc}
    d7f4:	20006e3c 	.word	0x20006e3c

0000d7f8 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    d7f8:	b510      	push	{r4, lr}
		begin();
    d7fa:	4c08      	ldr	r4, [pc, #32]	; (d81c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    d7fc:	2100      	movs	r1, #0
    d7fe:	4620      	mov	r0, r4
    d800:	f008 faca 	bl	15d98 <DMAChannel::begin(bool)>
    d804:	2100      	movs	r1, #0
    d806:	f104 0008 	add.w	r0, r4, #8
    d80a:	f008 fac5 	bl	15d98 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    d80e:	4a04      	ldr	r2, [pc, #16]	; (d820 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    d810:	4904      	ldr	r1, [pc, #16]	; (d824 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    d812:	2000      	movs	r0, #0
    d814:	f00b ff98 	bl	19748 <__aeabi_atexit>
}
    d818:	bd10      	pop	{r4, pc}
    d81a:	bf00      	nop
    d81c:	20006e3c 	.word	0x20006e3c
    d820:	20005258 	.word	0x20005258
    d824:	0000d7e1 	.word	0x0000d7e1

0000d828 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
//	CORE_PIN6_CONFIG  = 3;  //1:TX_DATA0
//	CORE_PIN7_CONFIG  = 3;  //1:RX_DATA0
#endif

#endif
}
    d828:	b508      	push	{r3, lr}
DMAChannel AudioOutputSPDIF::dma(false);
    d82a:	4a03      	ldr	r2, [pc, #12]	; (d838 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    d82c:	4903      	ldr	r1, [pc, #12]	; (d83c <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    d82e:	4804      	ldr	r0, [pc, #16]	; (d840 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x18>)
    d830:	f00b ff8a 	bl	19748 <__aeabi_atexit>
}
    d834:	bd08      	pop	{r3, pc}
    d836:	bf00      	nop
    d838:	20005258 	.word	0x20005258
    d83c:	0000c345 	.word	0x0000c345
    d840:	20006e94 	.word	0x20006e94

0000d844 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
	//debug only:
	CORE_PIN5_CONFIG  = 2;  //2:MCLK	11.43MHz
	CORE_PIN4_CONFIG  = 2;  //2:TX_BCLK	5 MHz
	CORE_PIN3_CONFIG  = 2;  //2:TX_SYNC	44.1 KHz
#endif
}
    d844:	b508      	push	{r3, lr}
DMAChannel AudioOutputSPDIF2::dma(false);
    d846:	4a03      	ldr	r2, [pc, #12]	; (d854 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    d848:	4903      	ldr	r1, [pc, #12]	; (d858 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    d84a:	4804      	ldr	r0, [pc, #16]	; (d85c <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x18>)
    d84c:	f00b ff7c 	bl	19748 <__aeabi_atexit>
}
    d850:	bd08      	pop	{r3, pc}
    d852:	bf00      	nop
    d854:	20005258 	.word	0x20005258
    d858:	0000c345 	.word	0x0000c345
    d85c:	20006ebc 	.word	0x20006ebc

0000d860 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
#endif

	SPDIF_STC =
		SPDIF_STC_TXCLK_SOURCE(1) |	//tx_clk input (from SPDIF0_CLK_ROOT)
		SPDIF_STC_TXCLK_DF(clkdiv - 1);
}
    d860:	b508      	push	{r3, lr}
DMAChannel AudioOutputSPDIF3::dma(false);
    d862:	4a03      	ldr	r2, [pc, #12]	; (d870 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    d864:	4903      	ldr	r1, [pc, #12]	; (d874 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    d866:	4804      	ldr	r0, [pc, #16]	; (d878 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x18>)
    d868:	f00b ff6e 	bl	19748 <__aeabi_atexit>
}
    d86c:	bd08      	pop	{r3, pc}
    d86e:	bf00      	nop
    d870:	20005258 	.word	0x20005258
    d874:	0000c345 	.word	0x0000c345
    d878:	20006ec4 	.word	0x20006ec4

0000d87c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:

	CORE_PIN23_CONFIG = 3;  //1:MCLK
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
	CORE_PIN20_CONFIG = 3;  //1:RX_SYNC
#endif
}
    d87c:	b508      	push	{r3, lr}
DMAChannel AudioOutputTDM::dma(false);
    d87e:	4a03      	ldr	r2, [pc, #12]	; (d88c <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    d880:	4903      	ldr	r1, [pc, #12]	; (d890 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    d882:	4804      	ldr	r0, [pc, #16]	; (d894 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x18>)
    d884:	f00b ff60 	bl	19748 <__aeabi_atexit>
}
    d888:	bd08      	pop	{r3, pc}
    d88a:	bf00      	nop
    d88c:	20005258 	.word	0x20005258
    d890:	0000c345 	.word	0x0000c345
    d894:	20006e4c 	.word	0x20006e4c

0000d898 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
	I2S2_RCR5 = I2S_RCR5_WNW(31) | I2S_RCR5_W0W(31) | I2S_RCR5_FBT(31);

	CORE_PIN33_CONFIG = 2;  //2:MCLK
	CORE_PIN4_CONFIG  = 2;  //2:TX_BCLK
	CORE_PIN3_CONFIG  = 2;  //2:TX_SYNC
}
    d898:	b508      	push	{r3, lr}
DMAChannel AudioOutputTDM2::dma(false);
    d89a:	4a03      	ldr	r2, [pc, #12]	; (d8a8 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    d89c:	4903      	ldr	r1, [pc, #12]	; (d8ac <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    d89e:	4804      	ldr	r0, [pc, #16]	; (d8b0 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x18>)
    d8a0:	f00b ff52 	bl	19748 <__aeabi_atexit>
}
    d8a4:	bd08      	pop	{r3, pc}
    d8a6:	bf00      	nop
    d8a8:	20005258 	.word	0x20005258
    d8ac:	0000c345 	.word	0x0000c345
    d8b0:	20006e6c 	.word	0x20006e6c

0000d8b4 <BandLimitedWaveform::lookup(int)>:
  extern const int16_t step_table [258] ;
}

int32_t BandLimitedWaveform::lookup (int offset)
{
  int off = offset >> GUARD_BITS ;
    d8b4:	120b      	asrs	r3, r1, #8
  int frac = offset & (GUARD-1) ;
    d8b6:	fa5f fc81 	uxtb.w	ip, r1

  int32_t a, b ;
  if (off < N/2)   // handle odd symmetry by reflecting table
    d8ba:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    d8be:	da11      	bge.n	d8e4 <BandLimitedWaveform::lookup(int)+0x30>
  {
    a = step_table [off+1] ;
    d8c0:	490f      	ldr	r1, [pc, #60]	; (d900 <BandLimitedWaveform::lookup(int)+0x4c>)
    d8c2:	1c5a      	adds	r2, r3, #1
    d8c4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
    b = step_table [off+2] ;
    d8c8:	3302      	adds	r3, #2
    d8ca:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
  else
  {
    a = - step_table [N-off] ;
    b = - step_table [N-off-1] ;
  }
  return  BASE_AMPLITUDE + ((frac * b + (GUARD - frac) * a + HALF_GUARD) >> GUARD_BITS) ; // interpolated
    d8ce:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
    d8d2:	fb0c f000 	mul.w	r0, ip, r0
    d8d6:	fb02 0003 	mla	r0, r2, r3, r0
    d8da:	3080      	adds	r0, #128	; 0x80
    d8dc:	1200      	asrs	r0, r0, #8
}
    d8de:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    d8e2:	4770      	bx	lr
    a = - step_table [N-off] ;
    d8e4:	4806      	ldr	r0, [pc, #24]	; (d900 <BandLimitedWaveform::lookup(int)+0x4c>)
    d8e6:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
    d8ea:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
    d8ee:	4252      	negs	r2, r2
    b = - step_table [N-off-1] ;
    d8f0:	f240 11ff 	movw	r1, #511	; 0x1ff
    d8f4:	1ac9      	subs	r1, r1, r3
    d8f6:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    d8fa:	4240      	negs	r0, r0
    d8fc:	e7e7      	b.n	d8ce <BandLimitedWaveform::lookup(int)+0x1a>
    d8fe:	bf00      	nop
    d900:	20003c58 	.word	0x20003c58

0000d904 <BandLimitedWaveform::insert_step(int, bool, int)>:

// create a new step, apply its past waveform into the cyclic sample buffer
// and add a step_state object into active list so it can be added for the future samples
void BandLimitedWaveform::insert_step (int offset, bool rising, int i)
{
    d904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d908:	4606      	mov	r6, r0
    d90a:	460f      	mov	r7, r1
    d90c:	4690      	mov	r8, r2
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    d90e:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
    d912:	dc27      	bgt.n	d964 <BandLimitedWaveform::insert_step(int, bool, int)+0x60>
    d914:	461d      	mov	r5, r3
    d916:	460c      	mov	r4, r1
    d918:	e013      	b.n	d942 <BandLimitedWaveform::insert_step(int, bool, int)+0x3e>
  {
    if (offset >= 0)
      cyclic [i & 15] += rising ? lookup (offset) : -lookup (offset) ;
    d91a:	4621      	mov	r1, r4
    d91c:	4630      	mov	r0, r6
    d91e:	f7ff ffc9 	bl	d8b4 <BandLimitedWaveform::lookup(int)>
    d922:	4240      	negs	r0, r0
    d924:	f005 030f 	and.w	r3, r5, #15
    d928:	eb06 0383 	add.w	r3, r6, r3, lsl #2
    d92c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    d930:	4410      	add	r0, r2
    d932:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    offset += SCALE<<GUARD_BITS ;
    d936:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    i ++ ;
    d93a:	3501      	adds	r5, #1
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    d93c:	f5b4 4f70 	cmp.w	r4, #61440	; 0xf000
    d940:	dc09      	bgt.n	d956 <BandLimitedWaveform::insert_step(int, bool, int)+0x52>
    if (offset >= 0)
    d942:	2c00      	cmp	r4, #0
    d944:	dbf7      	blt.n	d936 <BandLimitedWaveform::insert_step(int, bool, int)+0x32>
      cyclic [i & 15] += rising ? lookup (offset) : -lookup (offset) ;
    d946:	f1b8 0f00 	cmp.w	r8, #0
    d94a:	d0e6      	beq.n	d91a <BandLimitedWaveform::insert_step(int, bool, int)+0x16>
    d94c:	4621      	mov	r1, r4
    d94e:	4630      	mov	r0, r6
    d950:	f7ff ffb0 	bl	d8b4 <BandLimitedWaveform::lookup(int)>
    d954:	e7e6      	b.n	d924 <BandLimitedWaveform::insert_step(int, bool, int)+0x20>
    d956:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
    d95a:	f5c7 4770 	rsb	r7, r7, #61440	; 0xf000
    d95e:	4b08      	ldr	r3, [pc, #32]	; (d980 <BandLimitedWaveform::insert_step(int, bool, int)+0x7c>)
    d960:	403b      	ands	r3, r7
    offset += SCALE<<GUARD_BITS ;
    d962:	18d7      	adds	r7, r2, r3
  }

  states[newptr].offset = offset ;
    d964:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    d968:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
    d96c:	6097      	str	r7, [r2, #8]
  states[newptr].positive = rising ;
    d96e:	f882 800c 	strb.w	r8, [r2, #12]
  newptr = (newptr+1) & PTRMASK ;
    d972:	3301      	adds	r3, #1
    d974:	f003 031f 	and.w	r3, r3, #31
    d978:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
}
    d97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d980:	fffff000 	.word	0xfffff000

0000d984 <BandLimitedWaveform::process_step(int)>:

// generate value for current sample from one active step, checking for the
// dc_offset adjustment at the end of the table.
int32_t BandLimitedWaveform::process_step (int i)
{
    d984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d986:	4606      	mov	r6, r0
  int off = states[i].offset ;
    d988:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
    d98c:	68ac      	ldr	r4, [r5, #8]
  bool positive = states[i].positive ;
    d98e:	7b2f      	ldrb	r7, [r5, #12]

  int32_t entry = lookup (off) ;
    d990:	4621      	mov	r1, r4
    d992:	f7ff ff8f 	bl	d8b4 <BandLimitedWaveform::lookup(int)>
  off += SCALE<<GUARD_BITS ;
    d996:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
  states[i].offset = off ;  // update offset in table for next sample
    d99a:	60ac      	str	r4, [r5, #8]
  if (off >= N<<GUARD_BITS)             // at end of step table we alter dc_offset to extend the step into future
    d99c:	f5b4 3f00 	cmp.w	r4, #131072	; 0x20000
    d9a0:	db07      	blt.n	d9b2 <BandLimitedWaveform::process_step(int)+0x2e>
    dc_offset += positive ? 2*BASE_AMPLITUDE : -2*BASE_AMPLITUDE ;
    d9a2:	6873      	ldr	r3, [r6, #4]
    d9a4:	2f00      	cmp	r7, #0
    d9a6:	4a04      	ldr	r2, [pc, #16]	; (d9b8 <BandLimitedWaveform::process_step(int)+0x34>)
    d9a8:	bf18      	it	ne
    d9aa:	f44f 4240 	movne.w	r2, #49152	; 0xc000
    d9ae:	4413      	add	r3, r2
    d9b0:	6073      	str	r3, [r6, #4]

  return positive ? entry : -entry ;
    d9b2:	b907      	cbnz	r7, d9b6 <BandLimitedWaveform::process_step(int)+0x32>
    d9b4:	4240      	negs	r0, r0
}
    d9b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d9b8:	ffff4000 	.word	0xffff4000

0000d9bc <BandLimitedWaveform::process_active_steps(unsigned long)>:

// process all active steps for current sample, basically generating the waveform portion
// due only to steps
// square waves use this directly.
int32_t BandLimitedWaveform::process_active_steps (uint32_t new_phase)
{
    d9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int32_t sample = dc_offset ;
    d9c0:	6845      	ldr	r5, [r0, #4]
  
  int step_count = (newptr - delptr) & PTRMASK ;
    d9c2:	f8d0 8108 	ldr.w	r8, [r0, #264]	; 0x108
    d9c6:	f8d0 710c 	ldr.w	r7, [r0, #268]	; 0x10c
    d9ca:	eba8 0307 	sub.w	r3, r8, r7
  if (step_count > 0)        // for any steps in-flight we sum in table entry and update its state
    d9ce:	f013 0f1f 	tst.w	r3, #31
    d9d2:	d023      	beq.n	da1c <BandLimitedWaveform::process_active_steps(unsigned long)+0x60>
    d9d4:	4606      	mov	r6, r0
  {
    int i = newptr ;
    d9d6:	4644      	mov	r4, r8
    do
    {
      i = (i-1) & PTRMASK ;
    d9d8:	3c01      	subs	r4, #1
    d9da:	f004 041f 	and.w	r4, r4, #31
      sample += process_step (i) ;
    d9de:	4621      	mov	r1, r4
    d9e0:	4630      	mov	r0, r6
    d9e2:	f7ff ffcf 	bl	d984 <BandLimitedWaveform::process_step(int)>
    d9e6:	4405      	add	r5, r0
    } while (i != delptr) ;
    d9e8:	42a7      	cmp	r7, r4
    d9ea:	d1f5      	bne.n	d9d8 <BandLimitedWaveform::process_active_steps(unsigned long)+0x1c>
    if (states[delptr].offset >= N<<GUARD_BITS)  // remove any finished entries from the buffer.
    d9ec:	1c7b      	adds	r3, r7, #1
    d9ee:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    d9f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    d9f6:	db11      	blt.n	da1c <BandLimitedWaveform::process_active_steps(unsigned long)+0x60>
    {
      delptr = (delptr+1) & PTRMASK ;
    d9f8:	3701      	adds	r7, #1
    d9fa:	f007 071f 	and.w	r7, r7, #31
    d9fe:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
      // can be upto two steps per sample now for pulses
      if (newptr != delptr && states[delptr].offset >= N<<GUARD_BITS)
    da02:	45b8      	cmp	r8, r7
    da04:	d00a      	beq.n	da1c <BandLimitedWaveform::process_active_steps(unsigned long)+0x60>
    da06:	1c7b      	adds	r3, r7, #1
    da08:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    da0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    da10:	db04      	blt.n	da1c <BandLimitedWaveform::process_active_steps(unsigned long)+0x60>
	delptr = (delptr+1) & PTRMASK ;
    da12:	3701      	adds	r7, #1
    da14:	f007 071f 	and.w	r7, r7, #31
    da18:	f8c6 710c 	str.w	r7, [r6, #268]	; 0x10c
    }
  }
  return sample ;
}
    da1c:	4628      	mov	r0, r5
    da1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000da22 <BandLimitedWaveform::process_active_steps_saw(unsigned long)>:

// for sawtooth need to add in the slope and compensate for all the steps being one way
int32_t BandLimitedWaveform::process_active_steps_saw (uint32_t new_phase)
{
    da22:	b538      	push	{r3, r4, r5, lr}
    da24:	4604      	mov	r4, r0
    da26:	460d      	mov	r5, r1
  int32_t sample = process_active_steps (new_phase) ;
    da28:	f7ff ffc8 	bl	d9bc <BandLimitedWaveform::process_active_steps(unsigned long)>

  sample += (int16_t) ((((uint64_t)phase_word * (2*BASE_AMPLITUDE)) >> 32) - BASE_AMPLITUDE) ;  // generate the sloped part of the wave
    da2c:	6822      	ldr	r2, [r4, #0]
    da2e:	2300      	movs	r3, #0
    da30:	1891      	adds	r1, r2, r2
    da32:	415b      	adcs	r3, r3
    da34:	1889      	adds	r1, r1, r2
    da36:	f143 0300 	adc.w	r3, r3, #0
    da3a:	039b      	lsls	r3, r3, #14
    da3c:	ea43 4391 	orr.w	r3, r3, r1, lsr #18
    da40:	f5a3 43c0 	sub.w	r3, r3, #24576	; 0x6000
    da44:	fa00 f083 	sxtah	r0, r0, r3

  if (new_phase < DEG180 && phase_word >= DEG180) // detect wrap around, correct dc offset
    da48:	2d00      	cmp	r5, #0
    da4a:	db01      	blt.n	da50 <BandLimitedWaveform::process_active_steps_saw(unsigned long)+0x2e>
    da4c:	2a00      	cmp	r2, #0
    da4e:	db00      	blt.n	da52 <BandLimitedWaveform::process_active_steps_saw(unsigned long)+0x30>
    dc_offset += 2*BASE_AMPLITUDE ;

  return sample ;
}
    da50:	bd38      	pop	{r3, r4, r5, pc}
    dc_offset += 2*BASE_AMPLITUDE ;
    da52:	6863      	ldr	r3, [r4, #4]
    da54:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
    da58:	6063      	str	r3, [r4, #4]
  return sample ;
    da5a:	e7f9      	b.n	da50 <BandLimitedWaveform::process_active_steps_saw(unsigned long)+0x2e>

0000da5c <BandLimitedWaveform::process_active_steps_pulse(unsigned long, unsigned long)>:

// for pulse need to adjust the baseline according to the pulse width to cancel the DC component.
int32_t BandLimitedWaveform::process_active_steps_pulse (uint32_t new_phase, uint32_t pulse_width)
{
    da5c:	b510      	push	{r4, lr}
    da5e:	4614      	mov	r4, r2
  int32_t sample = process_active_steps (new_phase) ;
    da60:	f7ff ffac 	bl	d9bc <BandLimitedWaveform::process_active_steps(unsigned long)>

  return sample + BASE_AMPLITUDE/2 - pulse_width / (0x80000000u / BASE_AMPLITUDE) ; // correct DC offset for duty cycle
    da64:	4b05      	ldr	r3, [pc, #20]	; (da7c <BandLimitedWaveform::process_active_steps_pulse(unsigned long, unsigned long)+0x20>)
    da66:	fba3 2304 	umull	r2, r3, r3, r4
    da6a:	1ae4      	subs	r4, r4, r3
    da6c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
    da70:	0c1b      	lsrs	r3, r3, #16
    da72:	f5c3 5340 	rsb	r3, r3, #12288	; 0x3000
}
    da76:	4418      	add	r0, r3
    da78:	bd10      	pop	{r4, pc}
    da7a:	bf00      	nop
    da7c:	80006001 	.word	0x80006001

0000da80 <BandLimitedWaveform::new_step_check_square(unsigned long, int)>:

// Check for new steps using the phase update for the current sample for a square wave
void BandLimitedWaveform::new_step_check_square (uint32_t new_phase, int i)
{
    da80:	b538      	push	{r3, r4, r5, lr}
    da82:	4604      	mov	r4, r0
    da84:	4615      	mov	r5, r2
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    da86:	2900      	cmp	r1, #0
    da88:	db03      	blt.n	da92 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x12>
    {
      insert_step (- offset, false, i) ;
      pulse_state = false ;
    }
  }
  else if (new_phase < DEG180 && phase_word >= DEG180) // detect wrap around, rising step
    da8a:	6802      	ldr	r2, [r0, #0]
    da8c:	2a00      	cmp	r2, #0
    da8e:	db23      	blt.n	dad8 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x58>
    {
      insert_step (- offset, true, i) ;
      pulse_state = true ;
    }
  }
}
    da90:	bd38      	pop	{r3, r4, r5, pc}
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    da92:	6802      	ldr	r2, [r0, #0]
    da94:	2a00      	cmp	r2, #0
    da96:	dbfb      	blt.n	da90 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (sampled_width - phase_word) / (new_phase - phase_word)) ;
    da98:	f8d0 3154 	ldr.w	r3, [r0, #340]	; 0x154
    da9c:	eba3 0c02 	sub.w	ip, r3, r2
    daa0:	1a8a      	subs	r2, r1, r2
    daa2:	2300      	movs	r3, #0
    daa4:	ea4f 300c 	mov.w	r0, ip, lsl #12
    daa8:	ea4f 511c 	mov.w	r1, ip, lsr #20
    daac:	f013 f808 	bl	20ac0 <__aeabi_uldivmod>
      offset -- ;
    dab0:	f640 71ff 	movw	r1, #4095	; 0xfff
    dab4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    dab8:	bf18      	it	ne
    daba:	4601      	movne	r1, r0
    if (pulse_state) // guard against two falling steps in a row (if pulse width changing for instance)
    dabc:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
    dac0:	2b00      	cmp	r3, #0
    dac2:	d0e5      	beq.n	da90 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
      insert_step (- offset, false, i) ;
    dac4:	462b      	mov	r3, r5
    dac6:	2200      	movs	r2, #0
    dac8:	4249      	negs	r1, r1
    daca:	4620      	mov	r0, r4
    dacc:	f7ff ff1a 	bl	d904 <BandLimitedWaveform::insert_step(int, bool, int)>
      pulse_state = false ;
    dad0:	2300      	movs	r3, #0
    dad2:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
    dad6:	e7db      	b.n	da90 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (- phase_word) / (new_phase - phase_word)) ;
    dad8:	f1c2 0c00 	rsb	ip, r2, #0
    dadc:	1a8a      	subs	r2, r1, r2
    dade:	2300      	movs	r3, #0
    dae0:	ea4f 300c 	mov.w	r0, ip, lsl #12
    dae4:	ea4f 511c 	mov.w	r1, ip, lsr #20
    dae8:	f012 ffea 	bl	20ac0 <__aeabi_uldivmod>
      offset -- ;
    daec:	f640 71ff 	movw	r1, #4095	; 0xfff
    daf0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    daf4:	bf18      	it	ne
    daf6:	4601      	movne	r1, r0
    if (!pulse_state) // guard against two rising steps in a row (if pulse width changing for instance)
    daf8:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
    dafc:	2b00      	cmp	r3, #0
    dafe:	d1c7      	bne.n	da90 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
      insert_step (- offset, true, i) ;
    db00:	462b      	mov	r3, r5
    db02:	2201      	movs	r2, #1
    db04:	4249      	negs	r1, r1
    db06:	4620      	mov	r0, r4
    db08:	f7ff fefc 	bl	d904 <BandLimitedWaveform::insert_step(int, bool, int)>
      pulse_state = true ;
    db0c:	2301      	movs	r3, #1
    db0e:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
    db12:	e7bd      	b.n	da90 <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>

0000db14 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)>:
// Checking for new steps for pulse waveform has to deal with changing frequency and pulse width and
// not letting a pulse glitch out of existence as these change across a single period of the waveform
// now we detect the rising edge just like for a square wave and use that to sample the pulse width
// parameter, which then has to be checked against the instantaneous frequency every sample.
void BandLimitedWaveform::new_step_check_pulse (uint32_t new_phase, uint32_t pulse_width, int i)
{
    db14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db18:	4604      	mov	r4, r0
    db1a:	460d      	mov	r5, r1
    db1c:	4617      	mov	r7, r2
    db1e:	461e      	mov	r6, r3
  if (pulse_state && phase_word < sampled_width && (new_phase >= sampled_width || new_phase < phase_word))  // falling edge
    db20:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
    db24:	b1f1      	cbz	r1, db64 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x50>
    db26:	6802      	ldr	r2, [r0, #0]
    db28:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    db2c:	428a      	cmp	r2, r1
    db2e:	d21e      	bcs.n	db6e <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x5a>
    db30:	42aa      	cmp	r2, r5
    db32:	d801      	bhi.n	db38 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x24>
    db34:	42a9      	cmp	r1, r5
    db36:	d81a      	bhi.n	db6e <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x5a>
  {
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (sampled_width - phase_word) / (new_phase - phase_word)) ;
    db38:	1a89      	subs	r1, r1, r2
    db3a:	1aaa      	subs	r2, r5, r2
    db3c:	2300      	movs	r3, #0
    db3e:	0308      	lsls	r0, r1, #12
    db40:	0d09      	lsrs	r1, r1, #20
    db42:	f012 ffbd 	bl	20ac0 <__aeabi_uldivmod>
    if (offset == SCALE<<GUARD_BITS)
      offset -- ;
    db46:	f640 71ff 	movw	r1, #4095	; 0xfff
    db4a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    db4e:	bf18      	it	ne
    db50:	4601      	movne	r1, r0
    insert_step (- offset, false, i) ;
    db52:	4633      	mov	r3, r6
    db54:	2200      	movs	r2, #0
    db56:	4249      	negs	r1, r1
    db58:	4620      	mov	r0, r4
    db5a:	f7ff fed3 	bl	d904 <BandLimitedWaveform::insert_step(int, bool, int)>
    pulse_state = false ;
    db5e:	2300      	movs	r3, #0
    db60:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
  }
  if ((!pulse_state) && phase_word >= DEG180 && new_phase < DEG180) // detect wrap around, rising step
    db64:	f8d4 8000 	ldr.w	r8, [r4]
    db68:	f1b8 0f00 	cmp.w	r8, #0
    db6c:	db01      	blt.n	db72 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x5e>
	offset -- ;
      insert_step (- offset, false, i) ;
      pulse_state = false ;
    }
  }
}
    db6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((!pulse_state) && phase_word >= DEG180 && new_phase < DEG180) // detect wrap around, rising step
    db72:	2d00      	cmp	r5, #0
    db74:	dbfb      	blt.n	db6e <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x5a>
    sampled_width = pulse_width ;
    db76:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (- phase_word) / (new_phase - phase_word)) ;
    db7a:	eba5 0a08 	sub.w	sl, r5, r8
    db7e:	f04f 0900 	mov.w	r9, #0
    db82:	f1c8 0100 	rsb	r1, r8, #0
    db86:	4652      	mov	r2, sl
    db88:	464b      	mov	r3, r9
    db8a:	0308      	lsls	r0, r1, #12
    db8c:	0d09      	lsrs	r1, r1, #20
    db8e:	f012 ff97 	bl	20ac0 <__aeabi_uldivmod>
      offset -- ;
    db92:	f640 71ff 	movw	r1, #4095	; 0xfff
    db96:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    db9a:	bf18      	it	ne
    db9c:	4601      	movne	r1, r0
    insert_step (- offset, true, i) ;
    db9e:	4633      	mov	r3, r6
    dba0:	2201      	movs	r2, #1
    dba2:	4249      	negs	r1, r1
    dba4:	4620      	mov	r0, r4
    dba6:	f7ff fead 	bl	d904 <BandLimitedWaveform::insert_step(int, bool, int)>
    pulse_state = true ;
    dbaa:	2301      	movs	r3, #1
    dbac:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
    if (pulse_state && new_phase >= sampled_width) // detect falling step directly after a rising edge
    dbb0:	42bd      	cmp	r5, r7
    dbb2:	d3dc      	bcc.n	db6e <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x5a>
      int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (sampled_width - phase_word) / (new_phase - phase_word)) ;
    dbb4:	eba7 0108 	sub.w	r1, r7, r8
    dbb8:	4652      	mov	r2, sl
    dbba:	464b      	mov	r3, r9
    dbbc:	0308      	lsls	r0, r1, #12
    dbbe:	0d09      	lsrs	r1, r1, #20
    dbc0:	f012 ff7e 	bl	20ac0 <__aeabi_uldivmod>
	offset -- ;
    dbc4:	f640 71ff 	movw	r1, #4095	; 0xfff
    dbc8:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    dbcc:	bf18      	it	ne
    dbce:	4601      	movne	r1, r0
      insert_step (- offset, false, i) ;
    dbd0:	4633      	mov	r3, r6
    dbd2:	464a      	mov	r2, r9
    dbd4:	4249      	negs	r1, r1
    dbd6:	4620      	mov	r0, r4
    dbd8:	f7ff fe94 	bl	d904 <BandLimitedWaveform::insert_step(int, bool, int)>
      pulse_state = false ;
    dbdc:	f884 9150 	strb.w	r9, [r4, #336]	; 0x150
}
    dbe0:	e7c5      	b.n	db6e <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x5a>

0000dbe2 <BandLimitedWaveform::new_step_check_saw(unsigned long, int)>:

// new steps for sawtooth are at 180 degree point, always falling.
void BandLimitedWaveform::new_step_check_saw (uint32_t new_phase, int i)
{
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    dbe2:	2900      	cmp	r1, #0
    dbe4:	db00      	blt.n	dbe8 <BandLimitedWaveform::new_step_check_saw(unsigned long, int)+0x6>
    dbe6:	4770      	bx	lr
{
    dbe8:	b538      	push	{r3, r4, r5, lr}
    dbea:	4605      	mov	r5, r0
    dbec:	4614      	mov	r4, r2
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    dbee:	6802      	ldr	r2, [r0, #0]
    dbf0:	2a00      	cmp	r2, #0
    dbf2:	db15      	blt.n	dc20 <BandLimitedWaveform::new_step_check_saw(unsigned long, int)+0x3e>
  {
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (DEG180 - phase_word) / (new_phase - phase_word)) ;
    dbf4:	f1c2 4c00 	rsb	ip, r2, #2147483648	; 0x80000000
    dbf8:	1a8a      	subs	r2, r1, r2
    dbfa:	2300      	movs	r3, #0
    dbfc:	ea4f 300c 	mov.w	r0, ip, lsl #12
    dc00:	ea4f 511c 	mov.w	r1, ip, lsr #20
    dc04:	f012 ff5c 	bl	20ac0 <__aeabi_uldivmod>
    if (offset == SCALE<<GUARD_BITS)
      offset -- ;
    dc08:	f640 71ff 	movw	r1, #4095	; 0xfff
    dc0c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    dc10:	bf18      	it	ne
    dc12:	4601      	movne	r1, r0
    insert_step (- offset, false, i) ;
    dc14:	4623      	mov	r3, r4
    dc16:	2200      	movs	r2, #0
    dc18:	4249      	negs	r1, r1
    dc1a:	4628      	mov	r0, r5
    dc1c:	f7ff fe72 	bl	d904 <BandLimitedWaveform::insert_step(int, bool, int)>
  }
}
    dc20:	bd38      	pop	{r3, r4, r5, pc}

0000dc22 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)>:
  
// the generation function pushd new sample into cyclic buffer, having taken out the oldest entry
// to return.  The output is thus 16 samples behind, which allows the non-casual step function to
// work in real time.
int16_t BandLimitedWaveform::generate_sawtooth (uint32_t new_phase, int i)
{
    dc22:	b570      	push	{r4, r5, r6, lr}
    dc24:	4605      	mov	r5, r0
    dc26:	460e      	mov	r6, r1
    dc28:	4614      	mov	r4, r2
  new_step_check_saw (new_phase, i) ;
    dc2a:	f7ff ffda 	bl	dbe2 <BandLimitedWaveform::new_step_check_saw(unsigned long, int)>
  int32_t val = process_active_steps_saw (new_phase) ;
    dc2e:	4631      	mov	r1, r6
    dc30:	4628      	mov	r0, r5
    dc32:	f7ff fef6 	bl	da22 <BandLimitedWaveform::process_active_steps_saw(unsigned long)>
  int16_t sample = (int16_t) cyclic [i&15] ;
    dc36:	f004 020f 	and.w	r2, r4, #15
    dc3a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    dc3e:	f9b2 3110 	ldrsh.w	r3, [r2, #272]	; 0x110
  cyclic [i&15] = val ;
    dc42:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
  phase_word = new_phase ;
    dc46:	602e      	str	r6, [r5, #0]
  return sample ;
}
    dc48:	4618      	mov	r0, r3
    dc4a:	bd70      	pop	{r4, r5, r6, pc}

0000dc4c <BandLimitedWaveform::generate_square(unsigned long, int)>:

int16_t BandLimitedWaveform::generate_square (uint32_t new_phase, int i)
{
    dc4c:	b570      	push	{r4, r5, r6, lr}
    dc4e:	4605      	mov	r5, r0
    dc50:	460e      	mov	r6, r1
    dc52:	4614      	mov	r4, r2
  new_step_check_square (new_phase, i) ;
    dc54:	f7ff ff14 	bl	da80 <BandLimitedWaveform::new_step_check_square(unsigned long, int)>
  int32_t val = process_active_steps (new_phase) ;
    dc58:	4631      	mov	r1, r6
    dc5a:	4628      	mov	r0, r5
    dc5c:	f7ff feae 	bl	d9bc <BandLimitedWaveform::process_active_steps(unsigned long)>
  int16_t sample = (int16_t) cyclic [i&15] ;
    dc60:	f004 020f 	and.w	r2, r4, #15
    dc64:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    dc68:	f9b2 3110 	ldrsh.w	r3, [r2, #272]	; 0x110
  cyclic [i&15] = val ;
    dc6c:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
  phase_word = new_phase ;
    dc70:	602e      	str	r6, [r5, #0]
  return sample ;
}
    dc72:	4618      	mov	r0, r3
    dc74:	bd70      	pop	{r4, r5, r6, pc}

0000dc76 <BandLimitedWaveform::generate_pulse(unsigned long, unsigned long, int)>:

int16_t BandLimitedWaveform::generate_pulse (uint32_t new_phase, uint32_t pulse_width, int i)
{
    dc76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc78:	4605      	mov	r5, r0
    dc7a:	460e      	mov	r6, r1
    dc7c:	4617      	mov	r7, r2
    dc7e:	461c      	mov	r4, r3
  new_step_check_pulse (new_phase, pulse_width, i) ;
    dc80:	f7ff ff48 	bl	db14 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)>
  int32_t val = process_active_steps_pulse (new_phase, pulse_width) ;
    dc84:	463a      	mov	r2, r7
    dc86:	4631      	mov	r1, r6
    dc88:	4628      	mov	r0, r5
    dc8a:	f7ff fee7 	bl	da5c <BandLimitedWaveform::process_active_steps_pulse(unsigned long, unsigned long)>
  int32_t sample = cyclic [i&15] ;
    dc8e:	f004 030f 	and.w	r3, r4, #15
    dc92:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    dc96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
  cyclic [i&15] = val ;
    dc9a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
  phase_word = new_phase ;
    dc9e:	602e      	str	r6, [r5, #0]
  return (int16_t) ((sample >> 1) - (sample >> 5)) ; // scale down to avoid overflow on narrow pulses, where the DC shift is big
    dca0:	1150      	asrs	r0, r2, #5
    dca2:	ebc0 0062 	rsb	r0, r0, r2, asr #1
}
    dca6:	b200      	sxth	r0, r0
    dca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000dcac <AudioSynthWaveform::update()>:
{
    dcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcb0:	b083      	sub	sp, #12
    dcb2:	4605      	mov	r5, r0
	const uint32_t inc = phase_increment;
    dcb4:	69c6      	ldr	r6, [r0, #28]
	ph = phase_accumulator + phase_offset;
    dcb6:	6984      	ldr	r4, [r0, #24]
    dcb8:	6a07      	ldr	r7, [r0, #32]
	if (magnitude == 0) {
    dcba:	6a43      	ldr	r3, [r0, #36]	; 0x24
    dcbc:	b92b      	cbnz	r3, dcca <AudioSynthWaveform::update()+0x1e>
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    dcbe:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
    dcc2:	6184      	str	r4, [r0, #24]
}
    dcc4:	b003      	add	sp, #12
    dcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	block = allocate();
    dcca:	f007 fe71 	bl	159b0 <AudioStream::allocate()>
	if (!block) {
    dcce:	4681      	mov	r9, r0
    dcd0:	b1a8      	cbz	r0, dcfe <AudioSynthWaveform::update()+0x52>
	ph = phase_accumulator + phase_offset;
    dcd2:	19e3      	adds	r3, r4, r7
    dcd4:	9301      	str	r3, [sp, #4]
	bp = block->data;
    dcd6:	1d04      	adds	r4, r0, #4
	switch(tone_type) {
    dcd8:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    dcdc:	2b0c      	cmp	r3, #12
    dcde:	d87f      	bhi.n	dde0 <AudioSynthWaveform::update()+0x134>
    dce0:	e8df f013 	tbh	[pc, r3, lsl #1]
    dce4:	00b50012 	.word	0x00b50012
    dce8:	01000065 	.word	0x01000065
    dcec:	01610034 	.word	0x01610034
    dcf0:	019700c6 	.word	0x019700c6
    dcf4:	00d8011c 	.word	0x00d8011c
    dcf8:	009b00d8 	.word	0x009b00d8
    dcfc:	017c      	.short	0x017c
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    dcfe:	69ab      	ldr	r3, [r5, #24]
    dd00:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    dd04:	61ab      	str	r3, [r5, #24]
		return;
    dd06:	e7dd      	b.n	dcc4 <AudioSynthWaveform::update()+0x18>
    dd08:	f500 7c82 	add.w	ip, r0, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    dd0c:	9a01      	ldr	r2, [sp, #4]
	bp = block->data;
    dd0e:	4621      	mov	r1, r4
			val2 = AudioWaveformSine[index+1];
    dd10:	4fc2      	ldr	r7, [pc, #776]	; (e01c <AudioSynthWaveform::update()+0x370>)
			index = ph >> 24;
    dd12:	ea4f 6e12 	mov.w	lr, r2, lsr #24
			scale = (ph >> 8) & 0xFFFF;
    dd16:	f3c2 200f 	ubfx	r0, r2, #8, #16
			val2 = AudioWaveformSine[index+1];
    dd1a:	f10e 0301 	add.w	r3, lr, #1
			val2 *= scale;
    dd1e:	f937 8013 	ldrsh.w	r8, [r7, r3, lsl #1]
			val1 *= 0x10000 - scale;
    dd22:	f5c0 3380 	rsb	r3, r0, #65536	; 0x10000
    dd26:	f937 e01e 	ldrsh.w	lr, [r7, lr, lsl #1]
    dd2a:	fb0e f303 	mul.w	r3, lr, r3
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    dd2e:	fb00 3308 	mla	r3, r0, r8, r3
	asm volatile("smmul %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    dd32:	6a68      	ldr	r0, [r5, #36]	; 0x24
    dd34:	fb53 f300 	smmul	r3, r3, r0
    dd38:	f821 3b02 	strh.w	r3, [r1], #2
			ph += inc;
    dd3c:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    dd3e:	458c      	cmp	ip, r1
    dd40:	d1e7      	bne.n	dd12 <AudioSynthWaveform::update()+0x66>
			ph += inc;
    dd42:	9b01      	ldr	r3, [sp, #4]
    dd44:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    dd48:	9301      	str	r3, [sp, #4]
    dd4a:	e049      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
		if (!arbdata) {
    dd4c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    dd4e:	b33b      	cbz	r3, dda0 <AudioSynthWaveform::update()+0xf4>
    dd50:	f500 7782 	add.w	r7, r0, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    dd54:	9a01      	ldr	r2, [sp, #4]
	bp = block->data;
    dd56:	4621      	mov	r1, r4
    dd58:	46a4      	mov	ip, r4
			index = ph >> 24;
    dd5a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
			index2 = index + 1;
    dd5e:	f10e 0301 	add.w	r3, lr, #1
			if (index2 >= 256) index2 = 0;
    dd62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    dd66:	bf28      	it	cs
    dd68:	2300      	movcs	r3, #0
			val1 = *(arbdata + index);
    dd6a:	6aec      	ldr	r4, [r5, #44]	; 0x2c
			scale = (ph >> 8) & 0xFFFF;
    dd6c:	f3c2 200f 	ubfx	r0, r2, #8, #16
			val1 *= 0x10000 - scale;
    dd70:	f934 e01e 	ldrsh.w	lr, [r4, lr, lsl #1]
    dd74:	f5c0 3880 	rsb	r8, r0, #65536	; 0x10000
			val2 *= scale;
    dd78:	f934 3013 	ldrsh.w	r3, [r4, r3, lsl #1]
    dd7c:	fb00 f303 	mul.w	r3, r0, r3
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    dd80:	fb08 330e 	mla	r3, r8, lr, r3
    dd84:	6a68      	ldr	r0, [r5, #36]	; 0x24
    dd86:	fb53 f300 	smmul	r3, r3, r0
    dd8a:	f821 3b02 	strh.w	r3, [r1], #2
			ph += inc;
    dd8e:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    dd90:	42b9      	cmp	r1, r7
    dd92:	d1e2      	bne.n	dd5a <AudioSynthWaveform::update()+0xae>
			ph += inc;
    dd94:	4664      	mov	r4, ip
    dd96:	9b01      	ldr	r3, [sp, #4]
    dd98:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    dd9c:	9301      	str	r3, [sp, #4]
    dd9e:	e01f      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
			release(block);
    dda0:	f007 fe62 	bl	15a68 <AudioStream::release(audio_block_struct*)>
			phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    dda4:	69ab      	ldr	r3, [r5, #24]
    dda6:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    ddaa:	61ab      	str	r3, [r5, #24]
			return;
    ddac:	e78a      	b.n	dcc4 <AudioSynthWaveform::update()+0x18>
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    ddae:	6a69      	ldr	r1, [r5, #36]	; 0x24
    ddb0:	f321 014f 	ssat	r1, #16, r1, asr #1
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
    ddb4:	fa0f fc81 	sxth.w	ip, r1
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ddb8:	1d82      	adds	r2, r0, #6
    ddba:	f500 7783 	add.w	r7, r0, #262	; 0x106
	ph = phase_accumulator + phase_offset;
    ddbe:	9b01      	ldr	r3, [sp, #4]
				*bp++ = -magnitude15;
    ddc0:	4249      	negs	r1, r1
    ddc2:	b208      	sxth	r0, r1
			if (ph & 0x80000000) {
    ddc4:	2b00      	cmp	r3, #0
				*bp++ = -magnitude15;
    ddc6:	bfac      	ite	ge
    ddc8:	4661      	movge	r1, ip
    ddca:	4601      	movlt	r1, r0
    ddcc:	f822 1c02 	strh.w	r1, [r2, #-2]
			ph += inc;
    ddd0:	4433      	add	r3, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ddd2:	3202      	adds	r2, #2
    ddd4:	42ba      	cmp	r2, r7
    ddd6:	d1f5      	bne.n	ddc4 <AudioSynthWaveform::update()+0x118>
			ph += inc;
    ddd8:	9b01      	ldr	r3, [sp, #4]
    ddda:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    ddde:	9301      	str	r3, [sp, #4]
	phase_accumulator = ph - phase_offset;
    dde0:	6a2b      	ldr	r3, [r5, #32]
    dde2:	9a01      	ldr	r2, [sp, #4]
    dde4:	1ad3      	subs	r3, r2, r3
    dde6:	61ab      	str	r3, [r5, #24]
	if (tone_offset) {
    dde8:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
    ddec:	b163      	cbz	r3, de08 <AudioSynthWaveform::update()+0x15c>
		end = bp + AUDIO_BLOCK_SAMPLES;
    ddee:	f509 7182 	add.w	r1, r9, #260	; 0x104
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
    ddf2:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
			val1 = *bp;
    ddf6:	f9b4 2000 	ldrsh.w	r2, [r4]
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
    ddfa:	4413      	add	r3, r2
    ddfc:	f303 030f 	ssat	r3, #16, r3
    de00:	f824 3b02 	strh.w	r3, [r4], #2
		} while (bp < end);
    de04:	42a1      	cmp	r1, r4
    de06:	d1f4      	bne.n	ddf2 <AudioSynthWaveform::update()+0x146>
	transmit(block, 0);
    de08:	2200      	movs	r2, #0
    de0a:	4649      	mov	r1, r9
    de0c:	4628      	mov	r0, r5
    de0e:	f007 fe53 	bl	15ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    de12:	4648      	mov	r0, r9
    de14:	f007 fe28 	bl	15a68 <AudioStream::release(audio_block_struct*)>
    de18:	e754      	b.n	dcc4 <AudioSynthWaveform::update()+0x18>
	switch(tone_type) {
    de1a:	f8dd 8004 	ldr.w	r8, [sp, #4]
    de1e:	46a2      	mov	sl, r4
    de20:	2700      	movs	r7, #0
		  int16_t val = band_limit_waveform.generate_square (new_ph, i) ;
    de22:	f105 0b38 	add.w	fp, r5, #56	; 0x38
		  uint32_t new_ph = ph + inc ;
    de26:	44b0      	add	r8, r6
		  int16_t val = band_limit_waveform.generate_square (new_ph, i) ;
    de28:	463a      	mov	r2, r7
    de2a:	4641      	mov	r1, r8
    de2c:	4658      	mov	r0, fp
    de2e:	f7ff ff0d 	bl	dc4c <BandLimitedWaveform::generate_square(unsigned long, int)>
		  *bp++ = (val * magnitude) >> 16 ;
    de32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de34:	fb03 f000 	mul.w	r0, r3, r0
    de38:	1400      	asrs	r0, r0, #16
    de3a:	f82a 0b02 	strh.w	r0, [sl], #2
		for (int i = 0 ; i < AUDIO_BLOCK_SAMPLES ; i++)
    de3e:	3701      	adds	r7, #1
    de40:	2f80      	cmp	r7, #128	; 0x80
    de42:	d1f0      	bne.n	de26 <AudioSynthWaveform::update()+0x17a>
		  ph = new_ph ;
    de44:	9b01      	ldr	r3, [sp, #4]
    de46:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    de4a:	9301      	str	r3, [sp, #4]
    de4c:	e7c8      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
    de4e:	f500 7082 	add.w	r0, r0, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    de52:	9901      	ldr	r1, [sp, #4]
	bp = block->data;
    de54:	4622      	mov	r2, r4
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    de56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de58:	fb33 f311 	smulwt	r3, r3, r1
			*bp++ = signed_multiply_32x16t(magnitude, ph);
    de5c:	f822 3b02 	strh.w	r3, [r2], #2
			ph += inc;
    de60:	4431      	add	r1, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    de62:	4290      	cmp	r0, r2
    de64:	d1f7      	bne.n	de56 <AudioSynthWaveform::update()+0x1aa>
			ph += inc;
    de66:	9b01      	ldr	r3, [sp, #4]
    de68:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    de6c:	9301      	str	r3, [sp, #4]
    de6e:	e7b7      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
    de70:	f500 7082 	add.w	r0, r0, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    de74:	9901      	ldr	r1, [sp, #4]
	bp = block->data;
    de76:	4622      	mov	r2, r4
			*bp++ = signed_multiply_32x16t(0xFFFFFFFFu - magnitude, ph);
    de78:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    de7a:	43db      	mvns	r3, r3
    de7c:	fb33 f311 	smulwt	r3, r3, r1
    de80:	f822 3b02 	strh.w	r3, [r2], #2
			ph += inc;
    de84:	4431      	add	r1, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    de86:	4290      	cmp	r0, r2
    de88:	d1f6      	bne.n	de78 <AudioSynthWaveform::update()+0x1cc>
			ph += inc;
    de8a:	9b01      	ldr	r3, [sp, #4]
    de8c:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    de90:	9301      	str	r3, [sp, #4]
    de92:	e7a5      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
    de94:	f100 0a06 	add.w	sl, r0, #6
	ph = phase_accumulator + phase_offset;
    de98:	f8dd 8004 	ldr.w	r8, [sp, #4]
		for (i = 0 ; i < AUDIO_BLOCK_SAMPLES; i++)
    de9c:	2700      	movs	r7, #0
		  int16_t val = band_limit_waveform.generate_sawtooth (new_ph, i) ;
    de9e:	f105 0b38 	add.w	fp, r5, #56	; 0x38
    dea2:	e00b      	b.n	debc <AudioSynthWaveform::update()+0x210>
		    *bp++ = (val * -magnitude) >> 16 ;
    dea4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dea6:	425b      	negs	r3, r3
    dea8:	fb00 f303 	mul.w	r3, r0, r3
    deac:	141b      	asrs	r3, r3, #16
    deae:	f82a 3c02 	strh.w	r3, [sl, #-2]
		for (i = 0 ; i < AUDIO_BLOCK_SAMPLES; i++)
    deb2:	3701      	adds	r7, #1
    deb4:	f10a 0a02 	add.w	sl, sl, #2
    deb8:	2f80      	cmp	r7, #128	; 0x80
    deba:	d00e      	beq.n	deda <AudioSynthWaveform::update()+0x22e>
		  uint32_t new_ph = ph + inc ;
    debc:	44b0      	add	r8, r6
		  int16_t val = band_limit_waveform.generate_sawtooth (new_ph, i) ;
    debe:	463a      	mov	r2, r7
    dec0:	4641      	mov	r1, r8
    dec2:	4658      	mov	r0, fp
    dec4:	f7ff fead 	bl	dc22 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)>
		  if (tone_type == WAVEFORM_BANDLIMIT_SAWTOOTH_REVERSE)
    dec8:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    decc:	2b0a      	cmp	r3, #10
    dece:	d0e9      	beq.n	dea4 <AudioSynthWaveform::update()+0x1f8>
		    *bp++ = (val * magnitude) >> 16 ;
    ded0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    ded2:	fb03 f000 	mul.w	r0, r3, r0
    ded6:	1403      	asrs	r3, r0, #16
    ded8:	e7e9      	b.n	deae <AudioSynthWaveform::update()+0x202>
		  ph = new_ph ;
    deda:	9b01      	ldr	r3, [sp, #4]
    dedc:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    dee0:	9301      	str	r3, [sp, #4]
    dee2:	e77d      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
    dee4:	1d82      	adds	r2, r0, #6
    dee6:	f500 7783 	add.w	r7, r0, #262	; 0x106
	ph = phase_accumulator + phase_offset;
    deea:	9901      	ldr	r1, [sp, #4]
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    deec:	f64f 7cff 	movw	ip, #65535	; 0xffff
			uint32_t phtop = ph >> 30;
    def0:	0f8b      	lsrs	r3, r1, #30
			if (phtop == 1 || phtop == 2) {
    def2:	3b01      	subs	r3, #1
    def4:	2b01      	cmp	r3, #1
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    def6:	bf94      	ite	ls
    def8:	ebac 33d1 	subls.w	r3, ip, r1, lsr #15
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
    defc:	13cb      	asrhi	r3, r1, #15
    defe:	6a68      	ldr	r0, [r5, #36]	; 0x24
    df00:	fb00 f303 	mul.w	r3, r0, r3
    df04:	141b      	asrs	r3, r3, #16
    df06:	f822 3c02 	strh.w	r3, [r2, #-2]
			ph += inc;
    df0a:	4431      	add	r1, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    df0c:	3202      	adds	r2, #2
    df0e:	42ba      	cmp	r2, r7
    df10:	d1ee      	bne.n	def0 <AudioSynthWaveform::update()+0x244>
			ph += inc;
    df12:	9b01      	ldr	r3, [sp, #4]
    df14:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    df18:	9301      	str	r3, [sp, #4]
    df1a:	e761      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    df1c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    df1e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    df22:	fbbc f7f2 	udiv	r7, ip, r2
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
    df26:	f64f 73ff 	movw	r3, #65535	; 0xffff
    df2a:	1a9b      	subs	r3, r3, r2
    df2c:	fbbc fcf3 	udiv	ip, ip, r3
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    df30:	1d82      	adds	r2, r0, #6
    df32:	f500 7183 	add.w	r1, r0, #262	; 0x106
	ph = phase_accumulator + phase_offset;
    df36:	9b01      	ldr	r3, [sp, #4]
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    df38:	f06f 4e00 	mvn.w	lr, #2147483648	; 0x80000000
    df3c:	46a2      	mov	sl, r4
    df3e:	e012      	b.n	df66 <AudioSynthWaveform::update()+0x2ba>
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    df40:	ea6f 0800 	mvn.w	r8, r0
    df44:	4598      	cmp	r8, r3
    df46:	d91c      	bls.n	df82 <AudioSynthWaveform::update()+0x2d6>
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    df48:	1a18      	subs	r0, r3, r0
    df4a:	0c00      	lsrs	r0, r0, #16
    df4c:	fb0c e010 	mls	r0, ip, r0, lr
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    df50:	1400      	asrs	r0, r0, #16
    df52:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    df54:	fb04 f000 	mul.w	r0, r4, r0
    df58:	1400      	asrs	r0, r0, #16
				*bp++ = ((n >> 16) * magnitude) >> 16;
    df5a:	f822 0c02 	strh.w	r0, [r2, #-2]
			ph += inc;
    df5e:	4433      	add	r3, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    df60:	3202      	adds	r2, #2
    df62:	4291      	cmp	r1, r2
    df64:	d019      	beq.n	df9a <AudioSynthWaveform::update()+0x2ee>
			if (ph < pulse_width/2) {
    df66:	6aac      	ldr	r4, [r5, #40]	; 0x28
    df68:	0860      	lsrs	r0, r4, #1
    df6a:	ebb3 0f54 	cmp.w	r3, r4, lsr #1
    df6e:	d2e7      	bcs.n	df40 <AudioSynthWaveform::update()+0x294>
				uint32_t n = (ph >> 16) * rise;
    df70:	0c18      	lsrs	r0, r3, #16
    df72:	fb07 f000 	mul.w	r0, r7, r0
				*bp++ = ((n >> 16) * magnitude) >> 16;
    df76:	0c00      	lsrs	r0, r0, #16
    df78:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    df7a:	fb04 f000 	mul.w	r0, r4, r0
    df7e:	1400      	asrs	r0, r0, #16
    df80:	e7eb      	b.n	df5a <AudioSynthWaveform::update()+0x2ae>
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
    df82:	4418      	add	r0, r3
    df84:	0c00      	lsrs	r0, r0, #16
    df86:	fb07 f000 	mul.w	r0, r7, r0
    df8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    df8e:	1400      	asrs	r0, r0, #16
    df90:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    df92:	fb04 f000 	mul.w	r0, r4, r0
    df96:	1400      	asrs	r0, r0, #16
    df98:	e7df      	b.n	df5a <AudioSynthWaveform::update()+0x2ae>
			ph += inc;
    df9a:	4654      	mov	r4, sl
    df9c:	9b01      	ldr	r3, [sp, #4]
    df9e:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    dfa2:	9301      	str	r3, [sp, #4]
    dfa4:	e71c      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    dfa6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    dfa8:	f321 014f 	ssat	r1, #16, r1, asr #1
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
    dfac:	fa0f fc81 	sxth.w	ip, r1
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    dfb0:	1d82      	adds	r2, r0, #6
    dfb2:	f500 7783 	add.w	r7, r0, #262	; 0x106
	ph = phase_accumulator + phase_offset;
    dfb6:	9b01      	ldr	r3, [sp, #4]
				*bp++ = -magnitude15;
    dfb8:	4249      	negs	r1, r1
    dfba:	b208      	sxth	r0, r1
			if (ph < pulse_width) {
    dfbc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    dfbe:	4299      	cmp	r1, r3
				*bp++ = -magnitude15;
    dfc0:	bf8c      	ite	hi
    dfc2:	4661      	movhi	r1, ip
    dfc4:	4601      	movls	r1, r0
    dfc6:	f822 1c02 	strh.w	r1, [r2, #-2]
			ph += inc;
    dfca:	4433      	add	r3, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    dfcc:	3202      	adds	r2, #2
    dfce:	4297      	cmp	r7, r2
    dfd0:	d1f4      	bne.n	dfbc <AudioSynthWaveform::update()+0x310>
			ph += inc;
    dfd2:	9b01      	ldr	r3, [sp, #4]
    dfd4:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    dfd8:	9301      	str	r3, [sp, #4]
    dfda:	e701      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
	switch(tone_type) {
    dfdc:	f8dd 8004 	ldr.w	r8, [sp, #4]
    dfe0:	46a2      	mov	sl, r4
    dfe2:	2700      	movs	r7, #0
		  int32_t val = band_limit_waveform.generate_pulse (new_ph, pulse_width, i) ;
    dfe4:	f105 0b38 	add.w	fp, r5, #56	; 0x38
		  int32_t new_ph = ph + inc ;
    dfe8:	44b0      	add	r8, r6
		  int32_t val = band_limit_waveform.generate_pulse (new_ph, pulse_width, i) ;
    dfea:	463b      	mov	r3, r7
    dfec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    dfee:	4641      	mov	r1, r8
    dff0:	4658      	mov	r0, fp
    dff2:	f7ff fe40 	bl	dc76 <BandLimitedWaveform::generate_pulse(unsigned long, unsigned long, int)>
		  *bp++ = (int16_t) ((val * magnitude) >> 16) ;
    dff6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dff8:	fb03 f000 	mul.w	r0, r3, r0
    dffc:	1400      	asrs	r0, r0, #16
    dffe:	f82a 0b02 	strh.w	r0, [sl], #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    e002:	3701      	adds	r7, #1
    e004:	2f80      	cmp	r7, #128	; 0x80
    e006:	d1ef      	bne.n	dfe8 <AudioSynthWaveform::update()+0x33c>
		  ph = new_ph ;
    e008:	9b01      	ldr	r3, [sp, #4]
    e00a:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    e00e:	9301      	str	r3, [sp, #4]
    e010:	e6e6      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
    e012:	f500 7a82 	add.w	sl, r0, #260	; 0x104
	switch(tone_type) {
    e016:	9f01      	ldr	r7, [sp, #4]
	bp = block->data;
    e018:	46a0      	mov	r8, r4
    e01a:	e003      	b.n	e024 <AudioSynthWaveform::update()+0x378>
    e01c:	200006c4 	.word	0x200006c4
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    e020:	45d0      	cmp	r8, sl
    e022:	d00f      	beq.n	e044 <AudioSynthWaveform::update()+0x398>
			*bp++ = sample;
    e024:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
    e028:	f828 3b02 	strh.w	r3, [r8], #2
			if (newph < ph) {
    e02c:	463b      	mov	r3, r7
    e02e:	4437      	add	r7, r6
    e030:	42bb      	cmp	r3, r7
    e032:	d9f5      	bls.n	e020 <AudioSynthWaveform::update()+0x374>
				sample = random(magnitude) - (magnitude >> 1);
    e034:	6a68      	ldr	r0, [r5, #36]	; 0x24
    e036:	f008 fb39 	bl	166ac <random(unsigned long)>
    e03a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e03c:	eba0 0063 	sub.w	r0, r0, r3, asr #1
    e040:	8628      	strh	r0, [r5, #48]	; 0x30
    e042:	e7ed      	b.n	e020 <AudioSynthWaveform::update()+0x374>
			ph = newph;
    e044:	9b01      	ldr	r3, [sp, #4]
    e046:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    e04a:	9301      	str	r3, [sp, #4]
    e04c:	e6c8      	b.n	dde0 <AudioSynthWaveform::update()+0x134>
    e04e:	bf00      	nop

0000e050 <BandLimitedWaveform::BandLimitedWaveform()>:
  }
}

BandLimitedWaveform::BandLimitedWaveform()
{
  newptr = 0 ;
    e050:	2200      	movs	r2, #0
    e052:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
  delptr = 0 ;
    e056:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
  dc_offset = BASE_AMPLITUDE ;
    e05a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
    e05e:	6041      	str	r1, [r0, #4]
  phase_word = 0 ;
    e060:	6002      	str	r2, [r0, #0]
}
    e062:	4770      	bx	lr

0000e064 <SDClass::totalSize()>:
		if (!cardPreviouslyPresent) return (uint64_t)0;
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    e064:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    e068:	b1e3      	cbz	r3, e0a4 <SDClass::totalSize()+0x40>
    return m_fVol ? m_fVol->clusterCount() :
    e06a:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    e06e:	b163      	cbz	r3, e08a <SDClass::totalSize()+0x26>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    e070:	69d8      	ldr	r0, [r3, #28]
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    e072:	3801      	subs	r0, #1
    e074:	2200      	movs	r2, #0
    return m_bytesPerSector << m_sectorsPerClusterShift;
    e076:	7999      	ldrb	r1, [r3, #6]
    e078:	f44f 7300 	mov.w	r3, #512	; 0x200
    e07c:	408b      	lsls	r3, r1
    return m_fVol ? m_fVol->bytesPerCluster() :
    e07e:	b29b      	uxth	r3, r3
    e080:	fba3 0100 	umull	r0, r1, r3, r0
    e084:	fb03 1102 	mla	r1, r3, r2, r1
    e088:	4770      	bx	lr
           m_xVol ? m_xVol->clusterCount() : 0;
    e08a:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    e08e:	b12b      	cbz	r3, e09c <SDClass::totalSize()+0x38>
    e090:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    e094:	2200      	movs	r2, #0
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
  /** \return the number of bytes in a cluster. */
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    e096:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    e09a:	e7f1      	b.n	e080 <SDClass::totalSize()+0x1c>
    e09c:	2000      	movs	r0, #0
    e09e:	4602      	mov	r2, r0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    e0a0:	4603      	mov	r3, r0
    e0a2:	e7ed      	b.n	e080 <SDClass::totalSize()+0x1c>
		if (!cardPreviouslyPresent) return (uint64_t)0;
    e0a4:	2000      	movs	r0, #0
    e0a6:	4601      	mov	r1, r0
	}
    e0a8:	4770      	bx	lr

0000e0aa <SDClass::~SDClass()>:
class SDClass : public FS
    e0aa:	4770      	bx	lr

0000e0ac <SDClass::dateTime(unsigned short*, unsigned short*)>:
{
    e0ac:	b530      	push	{r4, r5, lr}
    e0ae:	b083      	sub	sp, #12
    e0b0:	4605      	mov	r5, r0
    e0b2:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    e0b4:	f009 fc4c 	bl	17950 <rtc_get>
	if (now < 315532800) { // before 1980
    e0b8:	4b1c      	ldr	r3, [pc, #112]	; (e12c <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    e0ba:	4298      	cmp	r0, r3
    e0bc:	d804      	bhi.n	e0c8 <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    e0be:	2300      	movs	r3, #0
    e0c0:	802b      	strh	r3, [r5, #0]
		*time = 0;
    e0c2:	8023      	strh	r3, [r4, #0]
}
    e0c4:	b003      	add	sp, #12
    e0c6:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    e0c8:	4669      	mov	r1, sp
    e0ca:	f008 fa07 	bl	164dc <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    e0ce:	f89d 3005 	ldrb.w	r3, [sp, #5]
    e0d2:	3301      	adds	r3, #1
    e0d4:	b2db      	uxtb	r3, r3
    e0d6:	f89d 1004 	ldrb.w	r1, [sp, #4]
    e0da:	f89d 2006 	ldrb.w	r2, [sp, #6]
  year -= 1980;
    e0de:	3a50      	subs	r2, #80	; 0x50
    e0e0:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    e0e2:	291f      	cmp	r1, #31
    e0e4:	bf98      	it	ls
    e0e6:	2b0c      	cmpls	r3, #12
    e0e8:	d801      	bhi.n	e0ee <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    e0ea:	2a7f      	cmp	r2, #127	; 0x7f
    e0ec:	d910      	bls.n	e110 <SDClass::dateTime(unsigned short*, unsigned short*)+0x64>
         year << 9 | month << 5 | day;
    e0ee:	2100      	movs	r1, #0
    e0f0:	8029      	strh	r1, [r5, #0]
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    e0f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
    e0f6:	f89d 3001 	ldrb.w	r3, [sp, #1]
    e0fa:	f89d 1000 	ldrb.w	r1, [sp]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    e0fe:	2a17      	cmp	r2, #23
    e100:	bf98      	it	ls
    e102:	2b3b      	cmpls	r3, #59	; 0x3b
    e104:	d801      	bhi.n	e10a <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    e106:	293b      	cmp	r1, #59	; 0x3b
    e108:	d908      	bls.n	e11c <SDClass::dateTime(unsigned short*, unsigned short*)+0x70>
         hour << 11 | minute << 5 | second >> 1;
    e10a:	2300      	movs	r3, #0
    e10c:	8023      	strh	r3, [r4, #0]
}
    e10e:	e7d9      	b.n	e0c4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x18>
         year << 9 | month << 5 | day;
    e110:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    e114:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    e118:	b289      	uxth	r1, r1
    e11a:	e7e9      	b.n	e0f0 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
         hour << 11 | minute << 5 | second >> 1;
    e11c:	015b      	lsls	r3, r3, #5
    e11e:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    e122:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    e126:	b29b      	uxth	r3, r3
    e128:	e7f0      	b.n	e10c <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
    e12a:	bf00      	nop
    e12c:	12cea5ff 	.word	0x12cea5ff

0000e130 <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    e130:	b500      	push	{lr}
    e132:	b08f      	sub	sp, #60	; 0x3c
    e134:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->exists(path) :
    e136:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    e13a:	b161      	cbz	r1, e156 <SDClass::exists(char const*)+0x26>
    e13c:	2300      	movs	r3, #0
    e13e:	f88d 3000 	strb.w	r3, [sp]
    e142:	f88d 3001 	strb.w	r3, [sp, #1]
    e146:	f88d 3002 	strb.w	r3, [sp, #2]
    e14a:	4668      	mov	r0, sp
    e14c:	f002 fee1 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
	}
    e150:	b00f      	add	sp, #60	; 0x3c
    e152:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->exists(path) : false;
    e156:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    e15a:	b151      	cbz	r1, e172 <SDClass::exists(char const*)+0x42>
    e15c:	2300      	movs	r3, #0
    e15e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e162:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e166:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    e16a:	4668      	mov	r0, sp
    e16c:	f000 ff2d 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    e170:	e7ee      	b.n	e150 <SDClass::exists(char const*)+0x20>
    e172:	2000      	movs	r0, #0
    e174:	e7ec      	b.n	e150 <SDClass::exists(char const*)+0x20>

0000e176 <SDClass::rmdir(char const*)>:
	bool rmdir(const char *filepath) {
    e176:	b500      	push	{lr}
    e178:	b08f      	sub	sp, #60	; 0x3c
    e17a:	460a      	mov	r2, r1
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    e17c:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    e180:	b189      	cbz	r1, e1a6 <SDClass::rmdir(char const*)+0x30>
    e182:	2300      	movs	r3, #0
    e184:	f88d 3000 	strb.w	r3, [sp]
    e188:	f88d 3001 	strb.w	r3, [sp, #1]
    e18c:	f88d 3002 	strb.w	r3, [sp, #2]
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    e190:	4668      	mov	r0, sp
    e192:	f002 febe 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
    e196:	b910      	cbnz	r0, e19e <SDClass::rmdir(char const*)+0x28>
	}
    e198:	b00f      	add	sp, #60	; 0x3c
    e19a:	f85d fb04 	ldr.w	pc, [sp], #4
    e19e:	4668      	mov	r0, sp
    e1a0:	f002 fcfc 	bl	10b9c <FatFile::rmdir()>
    e1a4:	e7f8      	b.n	e198 <SDClass::rmdir(char const*)+0x22>
           m_xVol ? m_xVol->rmdir(path) : false;
    e1a6:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    e1aa:	b179      	cbz	r1, e1cc <SDClass::rmdir(char const*)+0x56>
    e1ac:	2300      	movs	r3, #0
    e1ae:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e1b2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e1b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    e1ba:	4668      	mov	r0, sp
    e1bc:	f000 ff05 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    e1c0:	2800      	cmp	r0, #0
    e1c2:	d0e9      	beq.n	e198 <SDClass::rmdir(char const*)+0x22>
    e1c4:	4668      	mov	r0, sp
    e1c6:	f000 ffe7 	bl	f198 <ExFatFile::rmdir()>
    e1ca:	e7e5      	b.n	e198 <SDClass::rmdir(char const*)+0x22>
    e1cc:	2000      	movs	r0, #0
    e1ce:	e7e3      	b.n	e198 <SDClass::rmdir(char const*)+0x22>

0000e1d0 <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    e1d0:	b500      	push	{lr}
    e1d2:	b08f      	sub	sp, #60	; 0x3c
    e1d4:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->remove(path) :
    e1d6:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    e1da:	b191      	cbz	r1, e202 <SDClass::remove(char const*)+0x32>
    e1dc:	2300      	movs	r3, #0
    e1de:	f88d 3000 	strb.w	r3, [sp]
    e1e2:	f88d 3001 	strb.w	r3, [sp, #1]
    e1e6:	f88d 3002 	strb.w	r3, [sp, #2]
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    e1ea:	2301      	movs	r3, #1
    e1ec:	4668      	mov	r0, sp
    e1ee:	f002 fe90 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
    e1f2:	b910      	cbnz	r0, e1fa <SDClass::remove(char const*)+0x2a>
	}
    e1f4:	b00f      	add	sp, #60	; 0x3c
    e1f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e1fa:	4668      	mov	r0, sp
    e1fc:	f003 fe6e 	bl	11edc <FatFile::remove()>
    e200:	e7f8      	b.n	e1f4 <SDClass::remove(char const*)+0x24>
           m_xVol ? m_xVol->remove(path) : false;
    e202:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    e206:	b181      	cbz	r1, e22a <SDClass::remove(char const*)+0x5a>
    e208:	2300      	movs	r3, #0
    e20a:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e20e:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e212:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    e216:	2301      	movs	r3, #1
    e218:	4668      	mov	r0, sp
    e21a:	f000 fed6 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
    e21e:	2800      	cmp	r0, #0
    e220:	d0e8      	beq.n	e1f4 <SDClass::remove(char const*)+0x24>
    e222:	4668      	mov	r0, sp
    e224:	f000 ff60 	bl	f0e8 <ExFatFile::remove()>
    e228:	e7e4      	b.n	e1f4 <SDClass::remove(char const*)+0x24>
    e22a:	2000      	movs	r0, #0
    e22c:	e7e2      	b.n	e1f4 <SDClass::remove(char const*)+0x24>

0000e22e <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    e22e:	b530      	push	{r4, r5, lr}
    e230:	b08f      	sub	sp, #60	; 0x3c
    e232:	4615      	mov	r5, r2
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    e234:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    e238:	b1b4      	cbz	r4, e268 <SDClass::rename(char const*, char const*)+0x3a>
    e23a:	2300      	movs	r3, #0
    e23c:	f88d 3000 	strb.w	r3, [sp]
    e240:	f88d 3001 	strb.w	r3, [sp, #1]
    e244:	f88d 3002 	strb.w	r3, [sp, #2]
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    e248:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    e24c:	460a      	mov	r2, r1
    e24e:	4621      	mov	r1, r4
    e250:	4668      	mov	r0, sp
    e252:	f002 fdf9 	bl	10e48 <FatFile::open(FatFile*, char const*, int)>
    e256:	b908      	cbnz	r0, e25c <SDClass::rename(char const*, char const*)+0x2e>
	}
    e258:	b00f      	add	sp, #60	; 0x3c
    e25a:	bd30      	pop	{r4, r5, pc}
    e25c:	462a      	mov	r2, r5
    e25e:	4621      	mov	r1, r4
    e260:	4668      	mov	r0, sp
    e262:	f002 ffb6 	bl	111d2 <FatFile::rename(FatFile*, char const*)>
    e266:	e7f7      	b.n	e258 <SDClass::rename(char const*, char const*)+0x2a>
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    e268:	f8d0 4488 	ldr.w	r4, [r0, #1160]	; 0x488
    e26c:	b1ac      	cbz	r4, e29a <SDClass::rename(char const*, char const*)+0x6c>
    e26e:	2300      	movs	r3, #0
    e270:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e274:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e278:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    e27c:	f504 6489 	add.w	r4, r4, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    e280:	460a      	mov	r2, r1
    e282:	4621      	mov	r1, r4
    e284:	4668      	mov	r0, sp
    e286:	f000 fe2d 	bl	eee4 <ExFatFile::open(ExFatFile*, char const*, int)>
    e28a:	2800      	cmp	r0, #0
    e28c:	d0e4      	beq.n	e258 <SDClass::rename(char const*, char const*)+0x2a>
    e28e:	462a      	mov	r2, r5
    e290:	4621      	mov	r1, r4
    e292:	4668      	mov	r0, sp
    e294:	f001 f965 	bl	f562 <ExFatFile::rename(ExFatFile*, char const*)>
    e298:	e7de      	b.n	e258 <SDClass::rename(char const*, char const*)+0x2a>
    e29a:	2000      	movs	r0, #0
    e29c:	e7dc      	b.n	e258 <SDClass::rename(char const*, char const*)+0x2a>

0000e29e <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    e29e:	b500      	push	{lr}
    e2a0:	b08f      	sub	sp, #60	; 0x3c
    e2a2:	460a      	mov	r2, r1
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    e2a4:	f8d0 1484 	ldr.w	r1, [r0, #1156]	; 0x484
    e2a8:	b179      	cbz	r1, e2ca <SDClass::mkdir(char const*)+0x2c>
    e2aa:	2300      	movs	r3, #0
    e2ac:	f88d 3000 	strb.w	r3, [sp]
    e2b0:	f88d 3001 	strb.w	r3, [sp, #1]
    e2b4:	f88d 3002 	strb.w	r3, [sp, #2]
    return sub.mkdir(vwd(), path, pFlag);
    e2b8:	2301      	movs	r3, #1
    e2ba:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    e2be:	4668      	mov	r0, sp
    e2c0:	f002 ff1e 	bl	11100 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    e2c4:	b00f      	add	sp, #60	; 0x3c
    e2c6:	f85d fb04 	ldr.w	pc, [sp], #4
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    e2ca:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
    e2ce:	b169      	cbz	r1, e2ec <SDClass::mkdir(char const*)+0x4e>
    e2d0:	2300      	movs	r3, #0
    e2d2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    e2d6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e2da:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    return sub.mkdir(vwd(), path, pFlag);
    e2de:	2301      	movs	r3, #1
    e2e0:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    e2e4:	4668      	mov	r0, sp
    e2e6:	f001 f8c6 	bl	f476 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    e2ea:	e7eb      	b.n	e2c4 <SDClass::mkdir(char const*)+0x26>
    e2ec:	2000      	movs	r0, #0
    e2ee:	e7e9      	b.n	e2c4 <SDClass::mkdir(char const*)+0x26>

0000e2f0 <SDClass::usedSize()>:
	uint64_t usedSize() {
    e2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if (!cardPreviouslyPresent) return (uint64_t)0;
    e2f2:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	d04d      	beq.n	e396 <SDClass::usedSize()+0xa6>
    e2fa:	4604      	mov	r4, r0
    return m_fVol ? m_fVol->clusterCount() :
    e2fc:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    e300:	b1f3      	cbz	r3, e340 <SDClass::usedSize()+0x50>
    return m_lastCluster - 1;
    e302:	69de      	ldr	r6, [r3, #28]
    e304:	3e01      	subs	r6, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    e306:	f8d0 0490 	ldr.w	r0, [r0, #1168]	; 0x490
    e30a:	2800      	cmp	r0, #0
    e30c:	d05a      	beq.n	e3c4 <SDClass::usedSize()+0xd4>
    e30e:	6803      	ldr	r3, [r0, #0]
    e310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    e312:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    e314:	4607      	mov	r7, r0
    e316:	b140      	cbz	r0, e32a <SDClass::usedSize()+0x3a>
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    e318:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    e31c:	2800      	cmp	r0, #0
    e31e:	d032      	beq.n	e386 <SDClass::usedSize()+0x96>
    e320:	6803      	ldr	r3, [r0, #0]
    e322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    e324:	4798      	blx	r3
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    e326:	b1b8      	cbz	r0, e358 <SDClass::usedSize()+0x68>
    e328:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    e32a:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    e32e:	2800      	cmp	r0, #0
    e330:	d14b      	bne.n	e3ca <SDClass::usedSize()+0xda>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    e332:	f8d4 0488 	ldr.w	r0, [r4, #1160]	; 0x488
    e336:	b388      	cbz	r0, e39c <SDClass::usedSize()+0xac>
    e338:	f002 f96b 	bl	10612 <ExFatPartition::freeClusterCount()>
    e33c:	4605      	mov	r5, r0
    e33e:	e047      	b.n	e3d0 <SDClass::usedSize()+0xe0>
           m_xVol ? m_xVol->clusterCount() : 0;
    e340:	f8d0 3488 	ldr.w	r3, [r0, #1160]	; 0x488
    e344:	2b00      	cmp	r3, #0
    e346:	d055      	beq.n	e3f4 <SDClass::usedSize()+0x104>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    e348:	f8d3 6430 	ldr.w	r6, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    e34c:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    e350:	2800      	cmp	r0, #0
    e352:	d1dc      	bne.n	e30e <SDClass::usedSize()+0x1e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    e354:	2700      	movs	r7, #0
    e356:	e7ec      	b.n	e332 <SDClass::usedSize()+0x42>
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    e358:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    e35c:	b1a8      	cbz	r0, e38a <SDClass::usedSize()+0x9a>
      return m_card->setDedicatedSpi(value);
    e35e:	6803      	ldr	r3, [r0, #0]
    e360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e362:	2101      	movs	r1, #1
    e364:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    e366:	4607      	mov	r7, r0
    e368:	2800      	cmp	r0, #0
    e36a:	d1de      	bne.n	e32a <SDClass::usedSize()+0x3a>
      return 0;
    e36c:	2500      	movs	r5, #0
    e36e:	e031      	b.n	e3d4 <SDClass::usedSize()+0xe4>
    if (m_card) {
    e370:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    e374:	b158      	cbz	r0, e38e <SDClass::usedSize()+0x9e>
      return m_card->setDedicatedSpi(value);
    e376:	6803      	ldr	r3, [r0, #0]
    e378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    e37a:	2100      	movs	r1, #0
    e37c:	4798      	blx	r3
      return 0;
    e37e:	2800      	cmp	r0, #0
    e380:	bf08      	it	eq
    e382:	2500      	moveq	r5, #0
    e384:	e026      	b.n	e3d4 <SDClass::usedSize()+0xe4>
      return 0;
    e386:	2500      	movs	r5, #0
    e388:	e024      	b.n	e3d4 <SDClass::usedSize()+0xe4>
    e38a:	2500      	movs	r5, #0
    e38c:	e022      	b.n	e3d4 <SDClass::usedSize()+0xe4>
      return 0;
    e38e:	2500      	movs	r5, #0
    e390:	e020      	b.n	e3d4 <SDClass::usedSize()+0xe4>
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    e392:	2300      	movs	r3, #0
    e394:	e029      	b.n	e3ea <SDClass::usedSize()+0xfa>
    e396:	2000      	movs	r0, #0
    e398:	4601      	mov	r1, r0
    e39a:	e02a      	b.n	e3f2 <SDClass::usedSize()+0x102>
    if (switchSpi && !setDedicatedSpi(false)) {
    e39c:	b967      	cbnz	r7, e3b8 <SDClass::usedSize()+0xc8>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    e39e:	2300      	movs	r3, #0
    e3a0:	4630      	mov	r0, r6
    e3a2:	461a      	mov	r2, r3
    return m_fVol ? m_fVol->bytesPerCluster() :
    e3a4:	e021      	b.n	e3ea <SDClass::usedSize()+0xfa>
    e3a6:	4630      	mov	r0, r6
    e3a8:	2200      	movs	r2, #0
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    e3aa:	f8d4 3488 	ldr.w	r3, [r4, #1160]	; 0x488
    e3ae:	2b00      	cmp	r3, #0
    e3b0:	d0ef      	beq.n	e392 <SDClass::usedSize()+0xa2>
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    e3b2:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    e3b6:	e018      	b.n	e3ea <SDClass::usedSize()+0xfa>
    if (m_card) {
    e3b8:	f8d4 0490 	ldr.w	r0, [r4, #1168]	; 0x490
    e3bc:	2800      	cmp	r0, #0
    e3be:	d0f2      	beq.n	e3a6 <SDClass::usedSize()+0xb6>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    e3c0:	2500      	movs	r5, #0
    e3c2:	e7d8      	b.n	e376 <SDClass::usedSize()+0x86>
    return m_fVol ? m_fVol->freeClusterCount() :
    e3c4:	f8d4 0484 	ldr.w	r0, [r4, #1156]	; 0x484
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    e3c8:	2700      	movs	r7, #0
    e3ca:	f004 fb9b 	bl	12b04 <FatPartition::freeClusterCount()>
    e3ce:	4605      	mov	r5, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    e3d0:	2f00      	cmp	r7, #0
    e3d2:	d1cd      	bne.n	e370 <SDClass::usedSize()+0x80>
    e3d4:	1b70      	subs	r0, r6, r5
    e3d6:	2200      	movs	r2, #0
    return m_fVol ? m_fVol->bytesPerCluster() :
    e3d8:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    e3dc:	2b00      	cmp	r3, #0
    e3de:	d0e4      	beq.n	e3aa <SDClass::usedSize()+0xba>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    e3e0:	7999      	ldrb	r1, [r3, #6]
    e3e2:	f44f 7300 	mov.w	r3, #512	; 0x200
    e3e6:	408b      	lsls	r3, r1
    e3e8:	b29b      	uxth	r3, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    e3ea:	fba3 0100 	umull	r0, r1, r3, r0
    e3ee:	fb03 1102 	mla	r1, r3, r2, r1
	}
    e3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
           m_xVol ? m_xVol->clusterCount() : 0;
    e3f4:	2600      	movs	r6, #0
    e3f6:	e7a9      	b.n	e34c <SDClass::usedSize()+0x5c>

0000e3f8 <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    e3f8:	b530      	push	{r4, r5, lr}
    e3fa:	b085      	sub	sp, #20
    e3fc:	4604      	mov	r4, r0
    e3fe:	460d      	mov	r5, r1
	FsDateTime::setCallback(dateTime);
    e400:	4832      	ldr	r0, [pc, #200]	; (e4cc <SDClass::begin(unsigned char)+0xd4>)
    e402:	f006 fc59 	bl	14cb8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	csPin_ = csPin; // remember which one passed in. 
    e406:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    e40a:	2dfe      	cmp	r5, #254	; 0xfe
    e40c:	d004      	beq.n	e418 <SDClass::begin(unsigned char)+0x20>
	if (csPin < NUM_DIGITAL_PINS) {
    e40e:	2d36      	cmp	r5, #54	; 0x36
    e410:	d930      	bls.n	e474 <SDClass::begin(unsigned char)+0x7c>
	return false;
    e412:	2000      	movs	r0, #0
}
    e414:	b005      	add	sp, #20
    e416:	bd30      	pop	{r4, r5, pc}
    spiConfigBackupPin = 255;
    e418:	23ff      	movs	r3, #255	; 0xff
    e41a:	f884 34c0 	strb.w	r3, [r4, #1216]	; 0x4c0
    sdioConfigBackup = sdioConfig;
    e41e:	2100      	movs	r1, #0
    e420:	f884 14cc 	strb.w	r1, [r4, #1228]	; 0x4cc
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    e424:	f204 4594 	addw	r5, r4, #1172	; 0x494
    e428:	4628      	mov	r0, r5
    e42a:	f006 f821 	bl	14470 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    e42e:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    e432:	f8d4 3494 	ldr.w	r3, [r4, #1172]	; 0x494
    e436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e438:	4628      	mov	r0, r5
    e43a:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    e43c:	b158      	cbz	r0, e456 <SDClass::begin(unsigned char)+0x5e>
		cardPreviouslyPresent = ret;
    e43e:	2300      	movs	r3, #0
    e440:	f884 34d0 	strb.w	r3, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    e444:	232e      	movs	r3, #46	; 0x2e
    e446:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    e44a:	2103      	movs	r1, #3
    e44c:	202e      	movs	r0, #46	; 0x2e
    e44e:	f008 fc5f 	bl	16d10 <pinMode>
		return ret;
    e452:	2000      	movs	r0, #0
    e454:	e7de      	b.n	e414 <SDClass::begin(unsigned char)+0x1c>
    e456:	2301      	movs	r3, #1
    e458:	461a      	mov	r2, r3
    e45a:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    e45e:	1d20      	adds	r0, r4, #4
    e460:	f004 fd20 	bl	12ea4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
		cardPreviouslyPresent = ret;
    e464:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    e468:	232e      	movs	r3, #46	; 0x2e
    e46a:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    e46e:	2800      	cmp	r0, #0
    e470:	d1d0      	bne.n	e414 <SDClass::begin(unsigned char)+0x1c>
    e472:	e7ea      	b.n	e44a <SDClass::begin(unsigned char)+0x52>
    spiConfigBackupPin = spiConfig.csPin;
    e474:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    e478:	2300      	movs	r3, #0
    e47a:	f884 34c1 	strb.w	r3, [r4, #1217]	; 0x4c1
    spiConfigBackupClock = spiConfig.maxSck;
    e47e:	4a14      	ldr	r2, [pc, #80]	; (e4d0 <SDClass::begin(unsigned char)+0xd8>)
    e480:	f8c4 24c4 	str.w	r2, [r4, #1220]	; 0x4c4
    spiConfigBackupPort = spiConfig.spiPort;
    e484:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    e488:	f88d 5004 	strb.w	r5, [sp, #4]
    e48c:	f88d 3005 	strb.w	r3, [sp, #5]
    e490:	9202      	str	r2, [sp, #8]
    e492:	9303      	str	r3, [sp, #12]
    m_spiCard.begin(config);
    e494:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    e498:	ab04      	add	r3, sp, #16
    e49a:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    e49e:	4628      	mov	r0, r5
    e4a0:	f005 f9d4 	bl	1384c <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    e4a4:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    e4a8:	f8d4 34a0 	ldr.w	r3, [r4, #1184]	; 0x4a0
    e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e4ae:	4628      	mov	r0, r5
    e4b0:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    e4b2:	b118      	cbz	r0, e4bc <SDClass::begin(unsigned char)+0xc4>
    e4b4:	2000      	movs	r0, #0
		cardPreviouslyPresent = ret;
    e4b6:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
		return ret;
    e4ba:	e7ab      	b.n	e414 <SDClass::begin(unsigned char)+0x1c>
    e4bc:	2301      	movs	r3, #1
    e4be:	461a      	mov	r2, r3
    e4c0:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    e4c4:	1d20      	adds	r0, r4, #4
    e4c6:	f004 fced 	bl	12ea4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    e4ca:	e7f4      	b.n	e4b6 <SDClass::begin(unsigned char)+0xbe>
    e4cc:	0000e0ad 	.word	0x0000e0ad
    e4d0:	017d7840 	.word	0x017d7840

0000e4d4 <SdBase<FsVolume, FsFormatter>::restart()>:
  bool restart() {
    e4d4:	b530      	push	{r4, r5, lr}
    e4d6:	b085      	sub	sp, #20
    e4d8:	4604      	mov	r4, r0
    if (spiConfigBackupPin == 255) {
    e4da:	f890 34bc 	ldrb.w	r3, [r0, #1212]	; 0x4bc
    e4de:	2bff      	cmp	r3, #255	; 0xff
    e4e0:	d01e      	beq.n	e520 <SdBase<FsVolume, FsFormatter>::restart()+0x4c>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    e4e2:	f890 04bd 	ldrb.w	r0, [r0, #1213]	; 0x4bd
    e4e6:	f8d4 14c0 	ldr.w	r1, [r4, #1216]	; 0x4c0
    e4ea:	f8d4 24c4 	ldr.w	r2, [r4, #1220]	; 0x4c4
  bool cardBegin(SdSpiConfig spiConfig) {
    e4ee:	f88d 3004 	strb.w	r3, [sp, #4]
    e4f2:	f88d 0005 	strb.w	r0, [sp, #5]
    e4f6:	9102      	str	r1, [sp, #8]
    e4f8:	9203      	str	r2, [sp, #12]
    e4fa:	f204 459c 	addw	r5, r4, #1180	; 0x49c
    e4fe:	ab04      	add	r3, sp, #16
    e500:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    e504:	4628      	mov	r0, r5
    e506:	f005 f9a1 	bl	1384c <DedicatedSpiCard::begin(SdSpiConfig)>
    m_card = m_cardFactory.newCard(spiConfig);
    e50a:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    e50e:	f8d4 349c 	ldr.w	r3, [r4, #1180]	; 0x49c
    e512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e514:	4628      	mov	r0, r5
    e516:	4798      	blx	r3
    return cardBegin(spiConfig) && Vol::begin(m_card);
    e518:	b1d8      	cbz	r0, e552 <SdBase<FsVolume, FsFormatter>::restart()+0x7e>
    e51a:	2000      	movs	r0, #0
  }
    e51c:	b005      	add	sp, #20
    e51e:	bd30      	pop	{r4, r5, pc}
    m_sdioCard.begin(config);
    e520:	f500 6592 	add.w	r5, r0, #1168	; 0x490
    e524:	f890 14c8 	ldrb.w	r1, [r0, #1224]	; 0x4c8
    e528:	4628      	mov	r0, r5
    e52a:	f005 ffa1 	bl	14470 <SdioCard::begin(SdioConfig)>
    m_card = m_cardFactory.newCard(sdioConfig);
    e52e:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    e532:	f8d4 3490 	ldr.w	r3, [r4, #1168]	; 0x490
    e536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    e538:	4628      	mov	r0, r5
    e53a:	4798      	blx	r3
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    e53c:	b108      	cbz	r0, e542 <SdBase<FsVolume, FsFormatter>::restart()+0x6e>
    e53e:	2000      	movs	r0, #0
      return begin(sdioConfigBackup);
    e540:	e7ec      	b.n	e51c <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    e542:	2301      	movs	r3, #1
    e544:	461a      	mov	r2, r3
    e546:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    e54a:	4620      	mov	r0, r4
    e54c:	f004 fcaa 	bl	12ea4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    e550:	e7e4      	b.n	e51c <SdBase<FsVolume, FsFormatter>::restart()+0x48>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    e552:	2301      	movs	r3, #1
    e554:	461a      	mov	r2, r3
    e556:	f8d4 148c 	ldr.w	r1, [r4, #1164]	; 0x48c
    e55a:	4620      	mov	r0, r4
    e55c:	f004 fca2 	bl	12ea4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    e560:	e7dc      	b.n	e51c <SdBase<FsVolume, FsFormatter>::restart()+0x48>

0000e562 <SDClass::format(int, char, Print&)>:
{
    e562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e566:	b08c      	sub	sp, #48	; 0x30
  SdCard* card() {return m_card;}
    e568:	f8d0 4490 	ldr.w	r4, [r0, #1168]	; 0x490
	if (!card) return false; // no SD card
    e56c:	b39c      	cbz	r4, e5d6 <SDClass::format(int, char, Print&)+0x74>
    e56e:	4605      	mov	r5, r0
    e570:	461f      	mov	r7, r3
	uint32_t sectors = card->sectorCount();
    e572:	6823      	ldr	r3, [r4, #0]
    e574:	69db      	ldr	r3, [r3, #28]
    e576:	4620      	mov	r0, r4
    e578:	4798      	blx	r3
    e57a:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    e57c:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    e580:	d804      	bhi.n	e58c <SDClass::format(int, char, Print&)+0x2a>
    e582:	2600      	movs	r6, #0
}
    e584:	4630      	mov	r0, r6
    e586:	b00c      	add	sp, #48	; 0x30
    e588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    e58c:	f44f 7000 	mov.w	r0, #512	; 0x200
    e590:	f013 fba2 	bl	21cd8 <malloc>
	if (!buf) return false; // unable to allocate memory
    e594:	4680      	mov	r8, r0
    e596:	b300      	cbz	r0, e5da <SDClass::format(int, char, Print&)+0x78>
	if (sectors > 67108864) {
    e598:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
    e59c:	d913      	bls.n	e5c6 <SDClass::format(int, char, Print&)+0x64>
		ret = exFatFormatter.format(card, buf, &pr);
    e59e:	463b      	mov	r3, r7
    e5a0:	4602      	mov	r2, r0
    e5a2:	4621      	mov	r1, r4
    e5a4:	a801      	add	r0, sp, #4
    e5a6:	f001 fb23 	bl	fbf0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    e5aa:	4606      	mov	r6, r0
	free(buf);
    e5ac:	4640      	mov	r0, r8
    e5ae:	f013 fb9b 	bl	21ce8 <free>
	if (ret) {
    e5b2:	2e00      	cmp	r6, #0
    e5b4:	d0e6      	beq.n	e584 <SDClass::format(int, char, Print&)+0x22>
		card->syncDevice();
    e5b6:	6823      	ldr	r3, [r4, #0]
    e5b8:	6a1b      	ldr	r3, [r3, #32]
    e5ba:	4620      	mov	r0, r4
    e5bc:	4798      	blx	r3
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    e5be:	1d28      	adds	r0, r5, #4
    e5c0:	f7ff ff88 	bl	e4d4 <SdBase<FsVolume, FsFormatter>::restart()>
    e5c4:	e7de      	b.n	e584 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    e5c6:	463b      	mov	r3, r7
    e5c8:	4602      	mov	r2, r0
    e5ca:	4621      	mov	r1, r4
    e5cc:	a801      	add	r0, sp, #4
    e5ce:	f003 ff7f 	bl	124d0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    e5d2:	4606      	mov	r6, r0
    e5d4:	e7ea      	b.n	e5ac <SDClass::format(int, char, Print&)+0x4a>
	if (!card) return false; // no SD card
    e5d6:	2600      	movs	r6, #0
    e5d8:	e7d4      	b.n	e584 <SDClass::format(int, char, Print&)+0x22>
	if (!buf) return false; // unable to allocate memory
    e5da:	2600      	movs	r6, #0
    e5dc:	e7d2      	b.n	e584 <SDClass::format(int, char, Print&)+0x22>
	...

0000e5e0 <SDClass::mediaPresent()>:
{
    e5e0:	b570      	push	{r4, r5, r6, lr}
    e5e2:	b084      	sub	sp, #16
    e5e4:	4604      	mov	r4, r0
    e5e6:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
	if (card) {
    e5ea:	2e00      	cmp	r6, #0
    e5ec:	d042      	beq.n	e674 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    e5ee:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
    e5f2:	b345      	cbz	r5, e646 <SDClass::mediaPresent()+0x66>
			if (csPin_ == BUILTIN_SDCARD) {
    e5f4:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    e5f8:	2bfe      	cmp	r3, #254	; 0xfe
    e5fa:	d00a      	beq.n	e612 <SDClass::mediaPresent()+0x32>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    e5fc:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    e600:	2836      	cmp	r0, #54	; 0x36
    e602:	d914      	bls.n	e62e <SDClass::mediaPresent()+0x4e>
					ret = card->readCID(&cid);
    e604:	6833      	ldr	r3, [r6, #0]
    e606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    e608:	4669      	mov	r1, sp
    e60a:	4630      	mov	r0, r6
    e60c:	4798      	blx	r3
    e60e:	4605      	mov	r5, r0
    e610:	e031      	b.n	e676 <SDClass::mediaPresent()+0x96>
				s = card->status();
    e612:	6833      	ldr	r3, [r6, #0]
    e614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    e616:	4630      	mov	r0, r6
    e618:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    e61a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    e61e:	d0ed      	beq.n	e5fc <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    e620:	bb48      	cbnz	r0, e676 <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    e622:	f894 34d1 	ldrb.w	r3, [r4, #1233]	; 0x4d1
    e626:	2bfe      	cmp	r3, #254	; 0xfe
    e628:	d007      	beq.n	e63a <SDClass::mediaPresent()+0x5a>
				ret = false;
    e62a:	2500      	movs	r5, #0
    e62c:	e023      	b.n	e676 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    e62e:	f008 fb5d 	bl	16cec <digitalRead>
    e632:	1e05      	subs	r5, r0, #0
    e634:	bf18      	it	ne
    e636:	2501      	movne	r5, #1
    e638:	e01d      	b.n	e676 <SDClass::mediaPresent()+0x96>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    e63a:	2103      	movs	r1, #3
    e63c:	202e      	movs	r0, #46	; 0x2e
    e63e:	f008 fb67 	bl	16d10 <pinMode>
				ret = false;
    e642:	2500      	movs	r5, #0
    e644:	e017      	b.n	e676 <SDClass::mediaPresent()+0x96>
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    e646:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
    e64a:	2bfe      	cmp	r3, #254	; 0xfe
    e64c:	d008      	beq.n	e660 <SDClass::mediaPresent()+0x80>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    e64e:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    e652:	2836      	cmp	r0, #54	; 0x36
    e654:	d90a      	bls.n	e66c <SDClass::mediaPresent()+0x8c>
				ret = sdfs.restart();
    e656:	1d20      	adds	r0, r4, #4
    e658:	f7ff ff3c 	bl	e4d4 <SdBase<FsVolume, FsFormatter>::restart()>
    e65c:	4605      	mov	r5, r0
    e65e:	e00a      	b.n	e676 <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    e660:	4b07      	ldr	r3, [pc, #28]	; (e680 <SDClass::mediaPresent()+0xa0>)
    e662:	689b      	ldr	r3, [r3, #8]
			if (ret)
    e664:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    e668:	d1f5      	bne.n	e656 <SDClass::mediaPresent()+0x76>
    e66a:	e004      	b.n	e676 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    e66c:	f008 fb3e 	bl	16cec <digitalRead>
			if (ret)
    e670:	b108      	cbz	r0, e676 <SDClass::mediaPresent()+0x96>
    e672:	e7f0      	b.n	e656 <SDClass::mediaPresent()+0x76>
		ret = false;
    e674:	2500      	movs	r5, #0
	cardPreviouslyPresent = ret;
    e676:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    e67a:	4628      	mov	r0, r5
    e67c:	b004      	add	sp, #16
    e67e:	bd70      	pop	{r4, r5, r6, pc}
    e680:	42008000 	.word	0x42008000

0000e684 <_GLOBAL__sub_I_SD>:
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    e684:	b508      	push	{r3, lr}
	SDClass() { }
    e686:	4817      	ldr	r0, [pc, #92]	; (e6e4 <_GLOBAL__sub_I_SD+0x60>)
    e688:	4b17      	ldr	r3, [pc, #92]	; (e6e8 <_GLOBAL__sub_I_SD+0x64>)
    e68a:	6003      	str	r3, [r0, #0]
  FsVolume() {}
    e68c:	2300      	movs	r3, #0
    e68e:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    e692:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    e696:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    e69a:	4a14      	ldr	r2, [pc, #80]	; (e6ec <_GLOBAL__sub_I_SD+0x68>)
    e69c:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
  SdioConfig() {}
    e6a0:	f880 349c 	strb.w	r3, [r0, #1180]	; 0x49c
class SdioCard : public SdCardInterface {
    e6a4:	f880 349d 	strb.w	r3, [r0, #1181]	; 0x49d
	SPISettings() : _clock(4000000) {
    e6a8:	4a11      	ldr	r2, [pc, #68]	; (e6f0 <_GLOBAL__sub_I_SD+0x6c>)
    e6aa:	f8c0 24a8 	str.w	r2, [r0, #1192]	; 0x4a8
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    e6ae:	2207      	movs	r2, #7
    e6b0:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    e6b4:	2229      	movs	r2, #41	; 0x29
    e6b6:	f880 24b1 	strb.w	r2, [r0, #1201]	; 0x4b1
    e6ba:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    e6be:	4a0d      	ldr	r2, [pc, #52]	; (e6f4 <_GLOBAL__sub_I_SD+0x70>)
    e6c0:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
    e6c4:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
  SdioConfig() {}
    e6c8:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    e6cc:	f880 34d0 	strb.w	r3, [r0, #1232]	; 0x4d0
    e6d0:	23ff      	movs	r3, #255	; 0xff
    e6d2:	f880 34d1 	strb.w	r3, [r0, #1233]	; 0x4d1
    e6d6:	f880 34d2 	strb.w	r3, [r0, #1234]	; 0x4d2
SDClass SD;
    e6da:	4a07      	ldr	r2, [pc, #28]	; (e6f8 <_GLOBAL__sub_I_SD+0x74>)
    e6dc:	4907      	ldr	r1, [pc, #28]	; (e6fc <_GLOBAL__sub_I_SD+0x78>)
    e6de:	f00b f833 	bl	19748 <__aeabi_atexit>
}
    e6e2:	bd08      	pop	{r3, pc}
    e6e4:	20006678 	.word	0x20006678
    e6e8:	20002820 	.word	0x20002820
    e6ec:	20002874 	.word	0x20002874
    e6f0:	003d0900 	.word	0x003d0900
    e6f4:	200025ec 	.word	0x200025ec
    e6f8:	20005258 	.word	0x20005258
    e6fc:	0000e0ab 	.word	0x0000e0ab

0000e700 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    e700:	b530      	push	{r4, r5, lr}
    e702:	b085      	sub	sp, #20
    e704:	4604      	mov	r4, r0
    e706:	468c      	mov	ip, r1
    e708:	4615      	mov	r5, r2
  DirPos_t pos = m_dirPos;
    e70a:	ab01      	add	r3, sp, #4
    e70c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e710:	c907      	ldmia	r1, {r0, r1, r2}
    e712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    e716:	ea4f 124c 	mov.w	r2, ip, lsl #5
    e71a:	4619      	mov	r1, r3
    e71c:	6a20      	ldr	r0, [r4, #32]
    e71e:	f001 fef5 	bl	1050c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    e722:	2801      	cmp	r0, #1
    e724:	d106      	bne.n	e734 <ExFatFile::dirCache(unsigned char, unsigned char)+0x34>
  return m_vol->dirCache(&pos, options);
    e726:	462a      	mov	r2, r5
    e728:	a901      	add	r1, sp, #4
    e72a:	6a20      	ldr	r0, [r4, #32]
    e72c:	f001 fe99 	bl	10462 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    e730:	b005      	add	sp, #20
    e732:	bd30      	pop	{r4, r5, pc}
    return nullptr;
    e734:	2000      	movs	r0, #0
    e736:	e7fb      	b.n	e730 <ExFatFile::dirCache(unsigned char, unsigned char)+0x30>

0000e738 <ExFatFile::close()>:
bool ExFatFile::close() {
    e738:	b510      	push	{r4, lr}
    e73a:	4604      	mov	r4, r0
  bool rtn = sync();
    e73c:	f000 fde8 	bl	f310 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    e740:	2300      	movs	r3, #0
    e742:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    e746:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    e74a:	bd10      	pop	{r4, pc}

0000e74c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    e74c:	b538      	push	{r3, r4, r5, lr}
    e74e:	460d      	mov	r5, r1
    e750:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    e752:	2200      	movs	r2, #0
    e754:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e758:	6a00      	ldr	r0, [r0, #32]
    e75a:	f001 fe82 	bl	10462 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    e75e:	b128      	cbz	r0, e76c <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    e760:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
    e762:	802a      	strh	r2, [r5, #0]
    e764:	8903      	ldrh	r3, [r0, #8]
  *ptime = getLe16(df->createTime);
    e766:	8023      	strh	r3, [r4, #0]
  return true;
    e768:	2001      	movs	r0, #1

 fail:
  return false;
}
    e76a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    e76c:	2000      	movs	r0, #0
    e76e:	e7fc      	b.n	e76a <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1e>

0000e770 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    e770:	b538      	push	{r3, r4, r5, lr}
    e772:	460d      	mov	r5, r1
    e774:	4614      	mov	r4, r2
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    e776:	2200      	movs	r2, #0
    e778:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e77c:	6a00      	ldr	r0, [r0, #32]
    e77e:	f001 fe70 	bl	10462 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    e782:	b128      	cbz	r0, e790 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    e784:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
    e786:	802a      	strh	r2, [r5, #0]
    e788:	8983      	ldrh	r3, [r0, #12]
  *ptime = getLe16(df->modifyTime);
    e78a:	8023      	strh	r3, [r4, #0]
  return true;
    e78c:	2001      	movs	r0, #1

 fail:
  return false;
}
    e78e:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    e790:	2000      	movs	r0, #0
    e792:	e7fc      	b.n	e78e <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1e>

0000e794 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    e794:	b538      	push	{r3, r4, r5, lr}
  if (isOpen()) {
    e796:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    e79a:	b10b      	cbz	r3, e7a0 <ExFatFile::openRoot(ExFatVolume*)+0xc>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    e79c:	2000      	movs	r0, #0
}
    e79e:	bd38      	pop	{r3, r4, r5, pc}
    e7a0:	4604      	mov	r4, r0
    e7a2:	460d      	mov	r5, r1
  memset(this, 0, sizeof(ExFatFile));
    e7a4:	2238      	movs	r2, #56	; 0x38
    e7a6:	2100      	movs	r1, #0
    e7a8:	f014 fc56 	bl	23058 <memset>
  m_attributes = FILE_ATTR_ROOT;
    e7ac:	2340      	movs	r3, #64	; 0x40
    e7ae:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
    e7b2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    e7b4:	2001      	movs	r0, #1
    e7b6:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
  return true;
    e7ba:	e7f0      	b.n	e79e <ExFatFile::openRoot(ExFatVolume*)+0xa>

0000e7bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    e7bc:	b570      	push	{r4, r5, r6, lr}
    e7be:	460d      	mov	r5, r1
    e7c0:	4611      	mov	r1, r2
  // Skip leading spaces.
  while (*path == ' ') {
    e7c2:	782a      	ldrb	r2, [r5, #0]
    e7c4:	2a20      	cmp	r2, #32
    e7c6:	d103      	bne.n	e7d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x14>
    e7c8:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    e7cc:	2c20      	cmp	r4, #32
    e7ce:	d0fb      	beq.n	e7c8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xc>
    path++;
  }
  fname->begin = path;
    e7d0:	600d      	str	r5, [r1, #0]
  fname->end = path;
    e7d2:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    e7d4:	782c      	ldrb	r4, [r5, #0]
    e7d6:	b384      	cbz	r4, e83a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    e7d8:	2c2f      	cmp	r4, #47	; 0x2f
    e7da:	d02e      	beq.n	e83a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    e7dc:	f105 0e01 	add.w	lr, r5, #1
    e7e0:	4e1f      	ldr	r6, [pc, #124]	; (e860 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa4>)
    e7e2:	e017      	b.n	e814 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x58>
    e7e4:	2c1f      	cmp	r4, #31
    e7e6:	d823      	bhi.n	e830 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    uint8_t c = *path++;
    e7e8:	2000      	movs	r0, #0
    e7ea:	e00b      	b.n	e804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    e7ec:	2c5c      	cmp	r4, #92	; 0x5c
    e7ee:	d035      	beq.n	e85c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa0>
    e7f0:	d903      	bls.n	e7fa <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    e7f2:	2c7c      	cmp	r4, #124	; 0x7c
    e7f4:	d107      	bne.n	e806 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    e7f6:	2000      	movs	r0, #0
    e7f8:	e004      	b.n	e804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    e7fa:	3c3e      	subs	r4, #62	; 0x3e
    e7fc:	b2e4      	uxtb	r4, r4
    e7fe:	2c01      	cmp	r4, #1
    e800:	d801      	bhi.n	e806 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
    e802:	2000      	movs	r0, #0
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    e804:	bd70      	pop	{r4, r5, r6, pc}
      fname->end = path;
    e806:	608d      	str	r5, [r1, #8]
  while (*path && !isDirSeparator(*path)) {
    e808:	782c      	ldrb	r4, [r5, #0]
    e80a:	f10e 0e01 	add.w	lr, lr, #1
    e80e:	b1a4      	cbz	r4, e83a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    e810:	2c2f      	cmp	r4, #47	; 0x2f
    e812:	d012      	beq.n	e83a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    uint8_t c = *path++;
    e814:	4675      	mov	r5, lr
    if (!lfnLegalChar(c)) {
    e816:	2c3c      	cmp	r4, #60	; 0x3c
    e818:	d8e8      	bhi.n	e7ec <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x30>
    e81a:	2c21      	cmp	r4, #33	; 0x21
    e81c:	d9e2      	bls.n	e7e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    e81e:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    e822:	fa5f fc8c 	uxtb.w	ip, ip
    e826:	fa26 fc0c 	lsr.w	ip, r6, ip
    e82a:	f01c 0f01 	tst.w	ip, #1
    e82e:	d113      	bne.n	e858 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9c>
    if (c != '.' && c != ' ') {
    e830:	2c2e      	cmp	r4, #46	; 0x2e
    e832:	d0e9      	beq.n	e808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    e834:	2c20      	cmp	r4, #32
    e836:	d0e7      	beq.n	e808 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4c>
    e838:	e7e5      	b.n	e806 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x4a>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    e83a:	782a      	ldrb	r2, [r5, #0]
    e83c:	2a2f      	cmp	r2, #47	; 0x2f
    e83e:	d001      	beq.n	e844 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    e840:	2a20      	cmp	r2, #32
    e842:	d105      	bne.n	e850 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x94>
    e844:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    e848:	2c20      	cmp	r4, #32
    e84a:	d0fb      	beq.n	e844 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
    e84c:	2c2f      	cmp	r4, #47	; 0x2f
    e84e:	d0f9      	beq.n	e844 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  *ptr = path;
    e850:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    e852:	f001 fd13 	bl	1027c <ExFatFile::hashName(ExName_t*)>
    e856:	e7d5      	b.n	e804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    uint8_t c = *path++;
    e858:	2000      	movs	r0, #0
    e85a:	e7d3      	b.n	e804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    e85c:	2000      	movs	r0, #0
    e85e:	e7d1      	b.n	e804 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x48>
    e860:	05002101 	.word	0x05002101

0000e864 <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    e864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e868:	b083      	sub	sp, #12
    e86a:	4604      	mov	r4, r0
    e86c:	9200      	str	r2, [sp, #0]
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    e86e:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    e872:	f013 0f01 	tst.w	r3, #1
    e876:	f000 80b3 	beq.w	e9e0 <ExFatFile::read(void*, unsigned int)+0x17c>
    e87a:	468a      	mov	sl, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    e87c:	f013 0f40 	tst.w	r3, #64	; 0x40
    e880:	d104      	bne.n	e88c <ExFatFile::read(void*, unsigned int)+0x28>
    e882:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    e886:	f013 0f08 	tst.w	r3, #8
    e88a:	d00d      	beq.n	e8a8 <ExFatFile::read(void*, unsigned int)+0x44>
    if ((m_curPosition + count) > m_validLength) {
    e88c:	6822      	ldr	r2, [r4, #0]
    e88e:	6863      	ldr	r3, [r4, #4]
    e890:	6921      	ldr	r1, [r4, #16]
    e892:	6960      	ldr	r0, [r4, #20]
    e894:	9d00      	ldr	r5, [sp, #0]
    e896:	18ad      	adds	r5, r5, r2
    e898:	f143 0300 	adc.w	r3, r3, #0
    e89c:	42a9      	cmp	r1, r5
    e89e:	eb70 0303 	sbcs.w	r3, r0, r3
    e8a2:	d201      	bcs.n	e8a8 <ExFatFile::read(void*, unsigned int)+0x44>
      count = toRead = m_validLength - m_curPosition;
    e8a4:	1a8b      	subs	r3, r1, r2
    e8a6:	9300      	str	r3, [sp, #0]
    }
  }
  while (toRead) {
    e8a8:	9b00      	ldr	r3, [sp, #0]
    e8aa:	2b00      	cmp	r3, #0
    e8ac:	f000 80a3 	beq.w	e9f6 <ExFatFile::read(void*, unsigned int)+0x192>
    e8b0:	9f00      	ldr	r7, [sp, #0]
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    e8b2:	f104 0318 	add.w	r3, r4, #24
    e8b6:	9301      	str	r3, [sp, #4]
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    e8b8:	f240 1bff 	movw	fp, #511	; 0x1ff
    e8bc:	e036      	b.n	e92c <ExFatFile::read(void*, unsigned int)+0xc8>
      } else if (isContiguous()) {
    e8be:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e8c2:	f013 0f40 	tst.w	r3, #64	; 0x40
    e8c6:	d003      	beq.n	e8d0 <ExFatFile::read(void*, unsigned int)+0x6c>
        m_curCluster++;
    e8c8:	69a3      	ldr	r3, [r4, #24]
    e8ca:	3301      	adds	r3, #1
    e8cc:	61a3      	str	r3, [r4, #24]
    e8ce:	e041      	b.n	e954 <ExFatFile::read(void*, unsigned int)+0xf0>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    e8d0:	9a01      	ldr	r2, [sp, #4]
    e8d2:	69a1      	ldr	r1, [r4, #24]
    e8d4:	f001 fde2 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    e8d8:	2800      	cmp	r0, #0
    e8da:	f2c0 8081 	blt.w	e9e0 <ExFatFile::read(void*, unsigned int)+0x17c>
        if (fg == 0) {
    e8de:	2800      	cmp	r0, #0
    e8e0:	d138      	bne.n	e954 <ExFatFile::read(void*, unsigned int)+0xf0>
          if (isDir()) {
    e8e2:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    e8e6:	f013 0f50 	tst.w	r3, #80	; 0x50
    e8ea:	d079      	beq.n	e9e0 <ExFatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    e8ec:	9b00      	ldr	r3, [sp, #0]
    e8ee:	1bd8      	subs	r0, r3, r7
    e8f0:	e07e      	b.n	e9f0 <ExFatFile::read(void*, unsigned int)+0x18c>
      n = m_vol->bytesPerSector() - sectorOffset;
    e8f2:	f5c9 7600 	rsb	r6, r9, #512	; 0x200
    e8f6:	42be      	cmp	r6, r7
    e8f8:	bf28      	it	cs
    e8fa:	463e      	movcs	r6, r7
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t option) {
    return m_dataCache.prepare(sector, option);
    e8fc:	2200      	movs	r2, #0
    e8fe:	4629      	mov	r1, r5
    e900:	f508 7004 	add.w	r0, r8, #528	; 0x210
    e904:	f006 f9a5 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    e908:	4601      	mov	r1, r0
    e90a:	2800      	cmp	r0, #0
    e90c:	d068      	beq.n	e9e0 <ExFatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
    e90e:	4632      	mov	r2, r6
    e910:	4449      	add	r1, r9
    e912:	4650      	mov	r0, sl
    e914:	f008 fcec 	bl	172f0 <memcpy>
    dst += n;
    e918:	44b2      	add	sl, r6
    m_curPosition += n;
    e91a:	6823      	ldr	r3, [r4, #0]
    e91c:	6862      	ldr	r2, [r4, #4]
    e91e:	199b      	adds	r3, r3, r6
    e920:	f142 0200 	adc.w	r2, r2, #0
    e924:	6023      	str	r3, [r4, #0]
    e926:	6062      	str	r2, [r4, #4]
  while (toRead) {
    e928:	1bbf      	subs	r7, r7, r6
    e92a:	d0df      	beq.n	e8ec <ExFatFile::read(void*, unsigned int)+0x88>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    e92c:	6823      	ldr	r3, [r4, #0]
    e92e:	6862      	ldr	r2, [r4, #4]
    e930:	6a20      	ldr	r0, [r4, #32]
    e932:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    e936:	401e      	ands	r6, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    e938:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    e93c:	b956      	cbnz	r6, e954 <ExFatFile::read(void*, unsigned int)+0xf0>
      if (m_curPosition == 0) {
    e93e:	4313      	orrs	r3, r2
    e940:	d1bd      	bne.n	e8be <ExFatFile::read(void*, unsigned int)+0x5a>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    e942:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    e946:	f013 0f40 	tst.w	r3, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    e94a:	bf14      	ite	ne
    e94c:	f8d0 3434 	ldrne.w	r3, [r0, #1076]	; 0x434
    e950:	69e3      	ldreq	r3, [r4, #28]
        m_curCluster = isRoot()
    e952:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    e954:	f8d4 8020 	ldr.w	r8, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    e958:	f898 3445 	ldrb.w	r3, [r8, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    e95c:	0a72      	lsrs	r2, r6, #9
    e95e:	69a5      	ldr	r5, [r4, #24]
    e960:	3d02      	subs	r5, #2
    e962:	409d      	lsls	r5, r3
    sector = m_vol->clusterStartSector(m_curCluster) +
    e964:	eb05 2556 	add.w	r5, r5, r6, lsr #9
    e968:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    e96c:	440d      	add	r5, r1
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    e96e:	f1b9 0f00 	cmp.w	r9, #0
    e972:	d1be      	bne.n	e8f2 <ExFatFile::read(void*, unsigned int)+0x8e>
    e974:	455f      	cmp	r7, fp
    e976:	d9bc      	bls.n	e8f2 <ExFatFile::read(void*, unsigned int)+0x8e>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    e978:	f8d8 121c 	ldr.w	r1, [r8, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    e97c:	428d      	cmp	r5, r1
    e97e:	d0b8      	beq.n	e8f2 <ExFatFile::read(void*, unsigned int)+0x8e>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    e980:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    e984:	d20a      	bcs.n	e99c <ExFatFile::read(void*, unsigned int)+0x138>
    return m_blockDev->readSector(sector, dst);
    e986:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    e98a:	6803      	ldr	r3, [r0, #0]
    e98c:	691b      	ldr	r3, [r3, #16]
    e98e:	4652      	mov	r2, sl
    e990:	4629      	mov	r1, r5
    e992:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    e994:	b320      	cbz	r0, e9e0 <ExFatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
    e996:	f44f 7600 	mov.w	r6, #512	; 0x200
    e99a:	e7bd      	b.n	e918 <ExFatFile::read(void*, unsigned int)+0xb4>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    e99c:	f04f 0901 	mov.w	r9, #1
    e9a0:	fa09 f903 	lsl.w	r9, r9, r3
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    e9a4:	eba9 0902 	sub.w	r9, r9, r2
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    e9a8:	0a7b      	lsrs	r3, r7, #9
    e9aa:	4599      	cmp	r9, r3
    e9ac:	bf28      	it	cs
    e9ae:	4699      	movcs	r9, r3
      n = ns << m_vol->bytesPerSectorShift();
    e9b0:	ea4f 2649 	mov.w	r6, r9, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
    e9b4:	428d      	cmp	r5, r1
    e9b6:	d808      	bhi.n	e9ca <ExFatFile::read(void*, unsigned int)+0x166>
    e9b8:	eb05 0309 	add.w	r3, r5, r9
    e9bc:	4299      	cmp	r1, r3
    e9be:	d204      	bcs.n	e9ca <ExFatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
    e9c0:	f508 7004 	add.w	r0, r8, #528	; 0x210
    e9c4:	f006 f91e 	bl	14c04 <FsCache::sync()>
    e9c8:	b150      	cbz	r0, e9e0 <ExFatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
    e9ca:	f8d8 0214 	ldr.w	r0, [r8, #532]	; 0x214
    e9ce:	6803      	ldr	r3, [r0, #0]
    e9d0:	f8d3 8014 	ldr.w	r8, [r3, #20]
    e9d4:	464b      	mov	r3, r9
    e9d6:	4652      	mov	r2, sl
    e9d8:	4629      	mov	r1, r5
    e9da:	47c0      	blx	r8
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    e9dc:	2800      	cmp	r0, #0
    e9de:	d19b      	bne.n	e918 <ExFatFile::read(void*, unsigned int)+0xb4>

 fail:
  m_error |= READ_ERROR;
    e9e0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    e9e4:	f043 0302 	orr.w	r3, r3, #2
    e9e8:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
    e9ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    e9f0:	b003      	add	sp, #12
    e9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (toRead) {
    e9f6:	461f      	mov	r7, r3
    e9f8:	e778      	b.n	e8ec <ExFatFile::read(void*, unsigned int)+0x88>

0000e9fa <ExFatFile::peek()>:
int ExFatFile::peek() {
    e9fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    e9fc:	b083      	sub	sp, #12
    e9fe:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
    ea00:	e9d0 6700 	ldrd	r6, r7, [r0]
  uint32_t curCluster = m_curCluster;
    ea04:	6985      	ldr	r5, [r0, #24]
    return read(&b, 1) == 1 ? b : -1;
    ea06:	2201      	movs	r2, #1
    ea08:	f10d 0107 	add.w	r1, sp, #7
    ea0c:	f7ff ff2a 	bl	e864 <ExFatFile::read(void*, unsigned int)>
    ea10:	2801      	cmp	r0, #1
    ea12:	bf0c      	ite	eq
    ea14:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    ea18:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    ea1c:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
    ea20:	61a5      	str	r5, [r4, #24]
}
    ea22:	b003      	add	sp, #12
    ea24:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ea26 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    ea26:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea2a:	4604      	mov	r4, r0
    ea2c:	4616      	mov	r6, r2
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    ea2e:	f8d0 8018 	ldr.w	r8, [r0, #24]
  bool isOpen() const {return m_attributes;}
    ea32:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
  // error if file not open
  if (!isOpen()) {
    ea36:	2a00      	cmp	r2, #0
    ea38:	d054      	beq.n	eae4 <ExFatFile::seekSet(unsigned long long)+0xbe>
    ea3a:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    ea3c:	6801      	ldr	r1, [r0, #0]
    ea3e:	f8d0 c004 	ldr.w	ip, [r0, #4]
    ea42:	459c      	cmp	ip, r3
    ea44:	bf08      	it	eq
    ea46:	42b1      	cmpeq	r1, r6
    ea48:	d05d      	beq.n	eb06 <ExFatFile::seekSet(unsigned long long)+0xe0>
    return true;
  }
  if (pos == 0) {
    ea4a:	ea56 0307 	orrs.w	r3, r6, r7
    ea4e:	d04e      	beq.n	eaee <ExFatFile::seekSet(unsigned long long)+0xc8>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    ea50:	f012 0f08 	tst.w	r2, #8
    ea54:	d004      	beq.n	ea60 <ExFatFile::seekSet(unsigned long long)+0x3a>
    if (pos > m_validLength) {
    ea56:	6900      	ldr	r0, [r0, #16]
    ea58:	6963      	ldr	r3, [r4, #20]
    ea5a:	42b0      	cmp	r0, r6
    ea5c:	41bb      	sbcs	r3, r7
    ea5e:	d341      	bcc.n	eae4 <ExFatFile::seekSet(unsigned long long)+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    ea60:	f8d4 e020 	ldr.w	lr, [r4, #32]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    ea64:	f89e 3445 	ldrb.w	r3, [lr, #1093]	; 0x445
    ea68:	3309      	adds	r3, #9
    ea6a:	b2db      	uxtb	r3, r3
    ea6c:	1e75      	subs	r5, r6, #1
    ea6e:	f147 3aff 	adc.w	sl, r7, #4294967295	; 0xffffffff
    ea72:	f1c3 0920 	rsb	r9, r3, #32
    ea76:	f1a3 0020 	sub.w	r0, r3, #32
    ea7a:	40dd      	lsrs	r5, r3
    ea7c:	fa0a f909 	lsl.w	r9, sl, r9
    ea80:	ea45 0509 	orr.w	r5, r5, r9
    ea84:	fa2a f000 	lsr.w	r0, sl, r0
    ea88:	4305      	orrs	r5, r0
  if (isContiguous()) {
    ea8a:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    ea8e:	f010 0f40 	tst.w	r0, #64	; 0x40
    ea92:	d132      	bne.n	eafa <ExFatFile::seekSet(unsigned long long)+0xd4>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    ea94:	f111 3bff 	adds.w	fp, r1, #4294967295	; 0xffffffff
    ea98:	f14c 3aff 	adc.w	sl, ip, #4294967295	; 0xffffffff
    ea9c:	f1c3 0920 	rsb	r9, r3, #32
    eaa0:	f1a3 0020 	sub.w	r0, r3, #32
    eaa4:	fa2b f303 	lsr.w	r3, fp, r3
    eaa8:	fa0a f909 	lsl.w	r9, sl, r9
    eaac:	ea43 0309 	orr.w	r3, r3, r9
    eab0:	fa2a f000 	lsr.w	r0, sl, r0
    eab4:	4303      	orrs	r3, r0
  if (nNew < nCur || m_curPosition == 0) {
    eab6:	ea51 0c0c 	orrs.w	ip, r1, ip
    eaba:	d001      	beq.n	eac0 <ExFatFile::seekSet(unsigned long long)+0x9a>
    eabc:	429d      	cmp	r5, r3
    eabe:	d220      	bcs.n	eb02 <ExFatFile::seekSet(unsigned long long)+0xdc>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    eac0:	f012 0f40 	tst.w	r2, #64	; 0x40
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    eac4:	bf14      	ite	ne
    eac6:	f8de 3434 	ldrne.w	r3, [lr, #1076]	; 0x434
    eaca:	69e3      	ldreq	r3, [r4, #28]
    eacc:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    eace:	f104 0918 	add.w	r9, r4, #24
  while (nNew--) {
    ead2:	b175      	cbz	r5, eaf2 <ExFatFile::seekSet(unsigned long long)+0xcc>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    ead4:	464a      	mov	r2, r9
    ead6:	69a1      	ldr	r1, [r4, #24]
    ead8:	6a20      	ldr	r0, [r4, #32]
    eada:	f001 fcdf 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    eade:	3d01      	subs	r5, #1
    eae0:	2800      	cmp	r0, #0
    eae2:	dcf6      	bgt.n	ead2 <ExFatFile::seekSet(unsigned long long)+0xac>
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    eae4:	f8c4 8018 	str.w	r8, [r4, #24]
  return false;
    eae8:	2000      	movs	r0, #0
}
    eaea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    eaee:	2300      	movs	r3, #0
    eaf0:	6183      	str	r3, [r0, #24]
  m_curPosition = pos;
    eaf2:	6026      	str	r6, [r4, #0]
    eaf4:	6067      	str	r7, [r4, #4]
  return true;
    eaf6:	2001      	movs	r0, #1
    eaf8:	e7f7      	b.n	eaea <ExFatFile::seekSet(unsigned long long)+0xc4>
    m_curCluster = m_firstCluster + nNew;
    eafa:	69e3      	ldr	r3, [r4, #28]
    eafc:	442b      	add	r3, r5
    eafe:	61a3      	str	r3, [r4, #24]
    goto done;
    eb00:	e7f7      	b.n	eaf2 <ExFatFile::seekSet(unsigned long long)+0xcc>
    nNew -= nCur;
    eb02:	1aed      	subs	r5, r5, r3
    eb04:	e7e3      	b.n	eace <ExFatFile::seekSet(unsigned long long)+0xa8>
    return true;
    eb06:	2001      	movs	r0, #1
    eb08:	e7ef      	b.n	eaea <ExFatFile::seekSet(unsigned long long)+0xc4>
	...

0000eb0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    eb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eb10:	b08f      	sub	sp, #60	; 0x3c
    eb12:	4607      	mov	r7, r0
    eb14:	9302      	str	r3, [sp, #8]
    eb16:	f890 b031 	ldrb.w	fp, [r0, #49]	; 0x31
  if (isOpen() || !dir->isDir()) {
    eb1a:	f1bb 0f00 	cmp.w	fp, #0
    eb1e:	d10e      	bne.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    eb20:	460d      	mov	r5, r1
    eb22:	4691      	mov	r9, r2
    eb24:	461a      	mov	r2, r3
    eb26:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    eb2a:	f013 0f50 	tst.w	r3, #80	; 0x50
    eb2e:	d006      	beq.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  switch (oflag & O_ACCMODE) {
    eb30:	f002 0303 	and.w	r3, r2, #3
    eb34:	2b01      	cmp	r3, #1
    eb36:	d02b      	beq.n	eb90 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
    eb38:	2b02      	cmp	r3, #2
    eb3a:	d02b      	beq.n	eb94 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x88>
    eb3c:	b143      	cbz	r3, eb50 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x44>
  m_attributes = FILE_ATTR_CLOSED;
    eb3e:	2600      	movs	r6, #0
    eb40:	f887 6031 	strb.w	r6, [r7, #49]	; 0x31
  m_flags = 0;
    eb44:	f887 6033 	strb.w	r6, [r7, #51]	; 0x33
}
    eb48:	4630      	mov	r0, r6
    eb4a:	b00f      	add	sp, #60	; 0x3c
    eb4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      modeFlags = FILE_FLAG_READ;
    eb50:	2301      	movs	r3, #1
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    eb52:	9a02      	ldr	r2, [sp, #8]
    eb54:	f002 0208 	and.w	r2, r2, #8
    eb58:	4313      	orrs	r3, r2
    eb5a:	9303      	str	r3, [sp, #12]
  if (fname) {
    eb5c:	f1b9 0f00 	cmp.w	r9, #0
    eb60:	d01a      	beq.n	eb98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x8c>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    eb62:	f8d9 3010 	ldr.w	r3, [r9, #16]
    eb66:	f103 080e 	add.w	r8, r3, #14
    eb6a:	4bae      	ldr	r3, [pc, #696]	; (ee24 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x318>)
    eb6c:	fba3 3808 	umull	r3, r8, r3, r8
    eb70:	ea4f 08d8 	mov.w	r8, r8, lsr #3
    eb74:	f108 0802 	add.w	r8, r8, #2
    eb78:	fa5f f888 	uxtb.w	r8, r8
    seekSet(0);
    eb7c:	2200      	movs	r2, #0
    eb7e:	2300      	movs	r3, #0
    eb80:	4628      	mov	r0, r5
    eb82:	f7ff ff50 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
      inSet = false;
    eb86:	465c      	mov	r4, fp
    eb88:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    eb8a:	f04f 0a20 	mov.w	sl, #32
    eb8e:	e00c      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  switch (oflag & O_ACCMODE) {
    eb90:	2302      	movs	r3, #2
    eb92:	e7de      	b.n	eb52 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
      modeFlags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    eb94:	2303      	movs	r3, #3
    eb96:	e7dc      	b.n	eb52 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x46>
  uint8_t freeNeed = 3;
    eb98:	f04f 0803 	mov.w	r8, #3
    eb9c:	e7f3      	b.n	eb86 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x7a>
        inSet = false;
    eb9e:	461e      	mov	r6, r3
    eba0:	e003      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    eba2:	461e      	mov	r6, r3
    eba4:	e001      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!buf[0]) {
    eba6:	b1cb      	cbz	r3, ebdc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd0>
      inSet = false;
    eba8:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    ebaa:	4652      	mov	r2, sl
    ebac:	a906      	add	r1, sp, #24
    ebae:	4628      	mov	r0, r5
    ebb0:	f7ff fe58 	bl	e864 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    ebb4:	b1a8      	cbz	r0, ebe2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xd6>
    if (n != FS_DIR_SIZE) {
    ebb6:	2820      	cmp	r0, #32
    ebb8:	d1c1      	bne.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    if (!(buf[0] & 0x80)) {
    ebba:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ebbe:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    ebc2:	2a00      	cmp	r2, #0
    ebc4:	db20      	blt.n	ec08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xfc>
      if (freeCount == 0) {
    ebc6:	b924      	cbnz	r4, ebd2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    ebc8:	682a      	ldr	r2, [r5, #0]
    ebca:	3a20      	subs	r2, #32
    ebcc:	9201      	str	r2, [sp, #4]
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    ebce:	69aa      	ldr	r2, [r5, #24]
    ebd0:	9200      	str	r2, [sp, #0]
      if (freeCount < freeNeed) {
    ebd2:	4544      	cmp	r4, r8
    ebd4:	d2e7      	bcs.n	eba6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        freeCount++;
    ebd6:	3401      	adds	r4, #1
    ebd8:	b2e4      	uxtb	r4, r4
    ebda:	e7e4      	b.n	eba6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9a>
        if (fname) {
    ebdc:	f1b9 0f00 	cmp.w	r9, #0
    ebe0:	d0ad      	beq.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    ebe2:	9b02      	ldr	r3, [sp, #8]
    ebe4:	f413 7f00 	tst.w	r3, #512	; 0x200
    ebe8:	d0a9      	beq.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    ebea:	9b03      	ldr	r3, [sp, #12]
    ebec:	f013 0f02 	tst.w	r3, #2
    ebf0:	d0a5      	beq.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    ebf2:	f1b9 0f00 	cmp.w	r9, #0
    ebf6:	d0a2      	beq.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  while (freeCount < freeNeed) {
    ebf8:	4544      	cmp	r4, r8
    ebfa:	f080 80cd 	bcs.w	ed98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28c>
    n = dir->read(buf, FS_DIR_SIZE);
    ebfe:	2620      	movs	r6, #32
    ec00:	f8dd a004 	ldr.w	sl, [sp, #4]
    ec04:	46bb      	mov	fp, r7
    ec06:	e0b2      	b.n	ed6e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x262>
    } else if (!inSet) {
    ec08:	bb3e      	cbnz	r6, ec5a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
        freeCount = 0;
    ec0a:	4544      	cmp	r4, r8
    ec0c:	bf38      	it	cc
    ec0e:	465c      	movcc	r4, fp
      if (buf[0] != EXFAT_TYPE_FILE) {
    ec10:	2b85      	cmp	r3, #133	; 0x85
    ec12:	d1ca      	bne.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      memset(this, 0, sizeof(ExFatFile));
    ec14:	2238      	movs	r2, #56	; 0x38
    ec16:	2100      	movs	r1, #0
    ec18:	4638      	mov	r0, r7
    ec1a:	f014 fa1d 	bl	23058 <memset>
      m_setCount = dirFile->setCount;
    ec1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    ec22:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    ec26:	f89d 201c 	ldrb.w	r2, [sp, #28]
    ec2a:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    ec2e:	f012 0f10 	tst.w	r2, #16
        m_attributes |= FILE_ATTR_FILE;
    ec32:	bf08      	it	eq
    ec34:	f043 0308 	orreq.w	r3, r3, #8
    ec38:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  ExFatVolume* volume() const {return m_vol;}
    ec3c:	6a2b      	ldr	r3, [r5, #32]
      m_vol = dir->volume();
    ec3e:	623b      	str	r3, [r7, #32]
  uint32_t curCluster() const {return m_curCluster;}
    ec40:	69ab      	ldr	r3, [r5, #24]
      m_dirPos.cluster = dir->curCluster();
    ec42:	627b      	str	r3, [r7, #36]	; 0x24
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    ec44:	682b      	ldr	r3, [r5, #0]
    ec46:	3b20      	subs	r3, #32
    ec48:	62bb      	str	r3, [r7, #40]	; 0x28
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    ec4a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    ec4e:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    ec52:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
      inSet = true;
    ec56:	2601      	movs	r6, #1
    ec58:	e7a7      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    ec5a:	2bc0      	cmp	r3, #192	; 0xc0
    ec5c:	d003      	beq.n	ec66 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x15a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    ec5e:	2bc1      	cmp	r3, #193	; 0xc1
    ec60:	d033      	beq.n	ecca <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1be>
      inSet = false;
    ec62:	2600      	movs	r6, #0
    ec64:	e7a1      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      m_flags = modeFlags;
    ec66:	9a03      	ldr	r2, [sp, #12]
    ec68:	f887 2033 	strb.w	r2, [r7, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    ec6c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    ec70:	f013 0f02 	tst.w	r3, #2
    ec74:	d003      	beq.n	ec7e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x172>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    ec76:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    ec7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      m_validLength = getLe64(dirStream->validLength);
    ec7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    ec82:	e9c7 2304 	strd	r2, r3, [r7, #16]
      m_firstCluster = getLe32(dirStream->firstCluster);
    ec86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ec88:	61fb      	str	r3, [r7, #28]
      m_dataLength = getLe64(dirStream->dataLength);
    ec8a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    ec8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      if (!fname) {
    ec92:	f1b9 0f00 	cmp.w	r9, #0
    ec96:	d02e      	beq.n	ecf6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ec98:	f8d9 3000 	ldr.w	r3, [r9]
    ec9c:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    eca0:	f04f 0300 	mov.w	r3, #0
    eca4:	f8a9 300c 	strh.w	r3, [r9, #12]
      if (fname->nameLength != dirStream->nameLength ||
    eca8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    ecac:	f8d9 2010 	ldr.w	r2, [r9, #16]
    ecb0:	429a      	cmp	r2, r3
    ecb2:	d001      	beq.n	ecb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ac>
        inSet = false;
    ecb4:	2600      	movs	r6, #0
    ecb6:	e778      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (fname->nameLength != dirStream->nameLength ||
    ecb8:	f8b9 6014 	ldrh.w	r6, [r9, #20]
    ecbc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    ecc0:	429e      	cmp	r6, r3
    ecc2:	bf14      	ite	ne
    ecc4:	2600      	movne	r6, #0
    ecc6:	2601      	moveq	r6, #1
    ecc8:	e76f      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
      if (!cmpName(dirName, fname)) {
    ecca:	464a      	mov	r2, r9
    eccc:	a906      	add	r1, sp, #24
    ecce:	4638      	mov	r0, r7
    ecd0:	f001 fa4c 	bl	1016c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    ecd4:	4603      	mov	r3, r0
    ecd6:	2800      	cmp	r0, #0
    ecd8:	f43f af61 	beq.w	eb9e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x92>
    return !ls && next == end;
    ecdc:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    ece0:	2a00      	cmp	r2, #0
    ece2:	f47f af5e 	bne.w	eba2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x96>
    ece6:	f8d9 1008 	ldr.w	r1, [r9, #8]
    ecea:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ecee:	4291      	cmp	r1, r2
    ecf0:	d001      	beq.n	ecf6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ea>
    ecf2:	461e      	mov	r6, r3
    ecf4:	e759      	b.n	ebaa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x9e>
  if (oflag & O_EXCL) {
    ecf6:	9b02      	ldr	r3, [sp, #8]
    ecf8:	f413 6f00 	tst.w	r3, #2048	; 0x800
    ecfc:	f47f af1f 	bne.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    ed00:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    ed04:	d105      	bne.n	ed12 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x206>
    ed06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    ed0a:	f013 0f02 	tst.w	r3, #2
    ed0e:	f000 80d5 	beq.w	eebc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3b0>
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    ed12:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
    ed16:	f013 0f11 	tst.w	r3, #17
    ed1a:	f47f af10 	bne.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    ed1e:	9b02      	ldr	r3, [sp, #8]
    ed20:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ed24:	f000 80cf 	beq.w	eec6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ba>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    ed28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    ed2c:	f013 0f02 	tst.w	r3, #2
    ed30:	f43f af05 	beq.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    return seekSet(length) && truncate();
    ed34:	2200      	movs	r2, #0
    ed36:	2300      	movs	r3, #0
    ed38:	4638      	mov	r0, r7
    ed3a:	f7ff fe74 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
    ed3e:	2800      	cmp	r0, #0
    ed40:	f43f aefd 	beq.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    ed44:	4638      	mov	r0, r7
    ed46:	f000 fd24 	bl	f792 <ExFatFile::truncate()>
    if (!truncate(0)) {
    ed4a:	4606      	mov	r6, r0
    ed4c:	2800      	cmp	r0, #0
    ed4e:	f47f aefb 	bne.w	eb48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    ed52:	e6f4      	b.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      curCluster = dir->m_curCluster;
    ed54:	69af      	ldr	r7, [r5, #24]
      if (!dir->addDirCluster()) {
    ed56:	4628      	mov	r0, r5
    ed58:	f000 fb08 	bl	f36c <ExFatFile::addDirCluster()>
    ed5c:	b908      	cbnz	r0, ed62 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ed5e:	465f      	mov	r7, fp
    ed60:	e6ed      	b.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
      dir->m_curCluster = curCluster;
    ed62:	61af      	str	r7, [r5, #24]
      continue;
    ed64:	e001      	b.n	ed6a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25e>
    freeCount++;
    ed66:	3401      	adds	r4, #1
    ed68:	b2e4      	uxtb	r4, r4
  while (freeCount < freeNeed) {
    ed6a:	4544      	cmp	r4, r8
    ed6c:	d211      	bcs.n	ed92 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    n = dir->read(buf, FS_DIR_SIZE);
    ed6e:	4632      	mov	r2, r6
    ed70:	a906      	add	r1, sp, #24
    ed72:	4628      	mov	r0, r5
    ed74:	f7ff fd76 	bl	e864 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    ed78:	2800      	cmp	r0, #0
    ed7a:	d0eb      	beq.n	ed54 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x248>
    if (n != FS_DIR_SIZE) {
    ed7c:	2820      	cmp	r0, #32
    ed7e:	f040 809b 	bne.w	eeb8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3ac>
    if (freeCount == 0) {
    ed82:	2c00      	cmp	r4, #0
    ed84:	d1ef      	bne.n	ed66 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    ed86:	682b      	ldr	r3, [r5, #0]
    ed88:	f1a3 0a20 	sub.w	sl, r3, #32
  uint32_t curCluster() const {return m_curCluster;}
    ed8c:	69ab      	ldr	r3, [r5, #24]
    ed8e:	9300      	str	r3, [sp, #0]
    ed90:	e7e9      	b.n	ed66 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x25a>
    ed92:	f8cd a004 	str.w	sl, [sp, #4]
    ed96:	465f      	mov	r7, fp
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    ed98:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
  freePos.isContiguous = dir->isContiguous();
    ed9c:	f3c4 1480 	ubfx	r4, r4, #6, #1
  memset(this, 0, sizeof(ExFatFile));
    eda0:	2238      	movs	r2, #56	; 0x38
    eda2:	2100      	movs	r1, #0
    eda4:	4638      	mov	r0, r7
    eda6:	f014 f957 	bl	23058 <memset>
  ExFatVolume* volume() const {return m_vol;}
    edaa:	6a2b      	ldr	r3, [r5, #32]
  m_vol = dir->volume();
    edac:	623b      	str	r3, [r7, #32]
  m_attributes = FILE_ATTR_FILE;
    edae:	2308      	movs	r3, #8
    edb0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  m_dirPos = freePos;
    edb4:	9b00      	ldr	r3, [sp, #0]
    edb6:	627b      	str	r3, [r7, #36]	; 0x24
    edb8:	9b01      	ldr	r3, [sp, #4]
    edba:	62bb      	str	r3, [r7, #40]	; 0x28
    edbc:	f887 402c 	strb.w	r4, [r7, #44]	; 0x2c
    next = begin;
    edc0:	f8d9 3000 	ldr.w	r3, [r9]
    edc4:	f8c9 3004 	str.w	r3, [r9, #4]
    ls = 0;  // lowSurrogate
    edc8:	2300      	movs	r3, #0
    edca:	f8a9 300c 	strh.w	r3, [r9, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    edce:	f1b8 0f00 	cmp.w	r8, #0
    edd2:	d06c      	beq.n	eeae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    edd4:	461e      	mov	r6, r3
      m_setCount = freeNeed - 1;
    edd6:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
    edda:	fa5f fa8a 	uxtb.w	sl, sl
      if (FsDateTime::callback) {
    edde:	f8df b048 	ldr.w	fp, [pc, #72]	; ee28 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x31c>
    ede2:	e036      	b.n	ee52 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x346>
      dirFile->type = EXFAT_TYPE_FILE;
    ede4:	2385      	movs	r3, #133	; 0x85
    ede6:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    ede8:	f887 a030 	strb.w	sl, [r7, #48]	; 0x30
      dirFile->setCount = m_setCount;
    edec:	f884 a001 	strb.w	sl, [r4, #1]
      if (FsDateTime::callback) {
    edf0:	f8db 3000 	ldr.w	r3, [fp]
    edf4:	b17b      	cbz	r3, ee16 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x30a>
        FsDateTime::callback(&date, &time, &ms10);
    edf6:	f10d 0213 	add.w	r2, sp, #19
    edfa:	f10d 0116 	add.w	r1, sp, #22
    edfe:	a805      	add	r0, sp, #20
    ee00:	4798      	blx	r3
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    ee02:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    ee06:	8163      	strh	r3, [r4, #10]
    ee08:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    ee0c:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    ee0e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ee12:	7523      	strb	r3, [r4, #20]
    ee14:	e019      	b.n	ee4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    ee16:	f645 2321 	movw	r3, #23073	; 0x5a21
    ee1a:	8163      	strh	r3, [r4, #10]
    ee1c:	81e3      	strh	r3, [r4, #14]
    ee1e:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    ee20:	e013      	b.n	ee4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    ee22:	bf00      	nop
    ee24:	88888889 	.word	0x88888889
    ee28:	20006d3c 	.word	0x20006d3c
      dirStream->type = EXFAT_TYPE_STREAM;
    ee2c:	23c0      	movs	r3, #192	; 0xc0
    ee2e:	7023      	strb	r3, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    ee30:	2301      	movs	r3, #1
    ee32:	7063      	strb	r3, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    ee34:	9b03      	ldr	r3, [sp, #12]
    ee36:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ee3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    ee3e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    ee42:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    ee44:	f8b9 3014 	ldrh.w	r3, [r9, #20]
    ee48:	80a3      	strh	r3, [r4, #4]
  for (uint8_t i = 0; i < freeNeed; i++) {
    ee4a:	3601      	adds	r6, #1
    ee4c:	b2f3      	uxtb	r3, r6
    ee4e:	4598      	cmp	r8, r3
    ee50:	d92d      	bls.n	eeae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3a2>
    ee52:	b2f5      	uxtb	r5, r6
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    ee54:	2201      	movs	r2, #1
    ee56:	4629      	mov	r1, r5
    ee58:	4638      	mov	r0, r7
    ee5a:	f7ff fc51 	bl	e700 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    ee5e:	4604      	mov	r4, r0
    ee60:	2800      	cmp	r0, #0
    ee62:	f43f ae6c 	beq.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    ee66:	f990 3000 	ldrsb.w	r3, [r0]
    ee6a:	2b00      	cmp	r3, #0
    ee6c:	f6ff ae67 	blt.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
    memset(cache, 0 , FS_DIR_SIZE);
    ee70:	2220      	movs	r2, #32
    ee72:	2100      	movs	r1, #0
    ee74:	f014 f8f0 	bl	23058 <memset>
    if (i == 0) {
    ee78:	2d00      	cmp	r5, #0
    ee7a:	d0b3      	beq.n	ede4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2d8>
    } else if (i == 1) {
    ee7c:	2d01      	cmp	r5, #1
    ee7e:	d0d5      	beq.n	ee2c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>
      dirName->type = EXFAT_TYPE_NAME;
    ee80:	23c1      	movs	r3, #193	; 0xc1
    ee82:	7023      	strb	r3, [r4, #0]
      for (size_t k = 0; k < 15; k++) {
    ee84:	4625      	mov	r5, r4
    ee86:	341e      	adds	r4, #30
    ee88:	e006      	b.n	ee98 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        uint16_t u = fname->get16();
    ee8a:	4648      	mov	r0, r9
    ee8c:	f005 ff20 	bl	14cd0 <FsName::get16()>
    ee90:	f825 0f02 	strh.w	r0, [r5, #2]!
      for (size_t k = 0; k < 15; k++) {
    ee94:	42ac      	cmp	r4, r5
    ee96:	d0d8      	beq.n	ee4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
    return !ls && next == end;
    ee98:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    ee9c:	2b00      	cmp	r3, #0
    ee9e:	d1f4      	bne.n	ee8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    eea0:	f8d9 2004 	ldr.w	r2, [r9, #4]
    eea4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    eea8:	429a      	cmp	r2, r3
    eeaa:	d1ee      	bne.n	ee8a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
    eeac:	e7cd      	b.n	ee4a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x33e>
  return sync();
    eeae:	4638      	mov	r0, r7
    eeb0:	f000 fa2e 	bl	f310 <ExFatFile::sync()>
    eeb4:	4606      	mov	r6, r0
    eeb6:	e647      	b.n	eb48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    eeb8:	465f      	mov	r7, fp
    eeba:	e640      	b.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  if (oflag & O_TRUNC) {
    eebc:	9b02      	ldr	r3, [sp, #8]
    eebe:	f413 6f80 	tst.w	r3, #1024	; 0x400
    eec2:	f47f ae3c 	bne.w	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    eec6:	9b02      	ldr	r3, [sp, #8]
    eec8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
    eecc:	f43f ae3c 	beq.w	eb48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    eed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    eed4:	4638      	mov	r0, r7
    eed6:	f7ff fda6 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
    eeda:	4606      	mov	r6, r0
    eedc:	2800      	cmp	r0, #0
    eede:	f47f ae33 	bne.w	eb48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x3c>
    eee2:	e62c      	b.n	eb3e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x32>

0000eee4 <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    eee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    eee8:	b096      	sub	sp, #88	; 0x58
    eeea:	9201      	str	r2, [sp, #4]
    eeec:	461f      	mov	r7, r3
  ExFatFile() {}
    eeee:	2300      	movs	r3, #0
    eef0:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
    eef4:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
    eef8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
class FsName {
    eefc:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    ef00:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    ef04:	2b00      	cmp	r3, #0
    ef06:	d159      	bne.n	efbc <ExFatFile::open(ExFatFile*, char const*, int)+0xd8>
    ef08:	4604      	mov	r4, r0
    ef0a:	460d      	mov	r5, r1
    ef0c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    ef10:	f013 0f50 	tst.w	r3, #80	; 0x50
    ef14:	d057      	beq.n	efc6 <ExFatFile::open(ExFatFile*, char const*, int)+0xe2>
  if (isDirSeparator(*path)) {
    ef16:	4613      	mov	r3, r2
    ef18:	7812      	ldrb	r2, [r2, #0]
    ef1a:	2a2f      	cmp	r2, #47	; 0x2f
    ef1c:	d001      	beq.n	ef22 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    ef1e:	2600      	movs	r6, #0
    ef20:	e02c      	b.n	ef7c <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    while (isDirSeparator(*path)) {
    ef22:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ef26:	2a2f      	cmp	r2, #47	; 0x2f
    ef28:	d0fb      	beq.n	ef22 <ExFatFile::open(ExFatFile*, char const*, int)+0x3e>
    ef2a:	9301      	str	r3, [sp, #4]
    if (*path == 0) {
    ef2c:	b92a      	cbnz	r2, ef3a <ExFatFile::open(ExFatFile*, char const*, int)+0x56>
      return openRoot(dirFile->m_vol);
    ef2e:	6a29      	ldr	r1, [r5, #32]
    ef30:	4620      	mov	r0, r4
    ef32:	f7ff fc2f 	bl	e794 <ExFatFile::openRoot(ExFatVolume*)>
    ef36:	4603      	mov	r3, r0
    ef38:	e041      	b.n	efbe <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    ef3a:	6a29      	ldr	r1, [r5, #32]
    ef3c:	a808      	add	r0, sp, #32
    ef3e:	f7ff fc29 	bl	e794 <ExFatFile::openRoot(ExFatVolume*)>
    ef42:	4603      	mov	r3, r0
    ef44:	2800      	cmp	r0, #0
    ef46:	d03a      	beq.n	efbe <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    dirFile = &tmpDir;
    ef48:	ad08      	add	r5, sp, #32
    ef4a:	e7e8      	b.n	ef1e <ExFatFile::open(ExFatFile*, char const*, int)+0x3a>
    tmpDir = *this;
    ef4c:	46ae      	mov	lr, r5
    ef4e:	f8dc 0000 	ldr.w	r0, [ip]
    ef52:	f8dc 1004 	ldr.w	r1, [ip, #4]
    ef56:	f8dc 2008 	ldr.w	r2, [ip, #8]
    ef5a:	f8dc 300c 	ldr.w	r3, [ip, #12]
    ef5e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    ef62:	f10c 0c10 	add.w	ip, ip, #16
    ef66:	4675      	mov	r5, lr
    ef68:	45c4      	cmp	ip, r8
    ef6a:	d1ef      	bne.n	ef4c <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
    ef6c:	f8dc 0000 	ldr.w	r0, [ip]
    ef70:	f8ce 0000 	str.w	r0, [lr]
    close();
    ef74:	4620      	mov	r0, r4
    ef76:	f7ff fbdf 	bl	e738 <ExFatFile::close()>
    dirFile = &tmpDir;
    ef7a:	ad08      	add	r5, sp, #32
    if (!parsePathName(path, &fname, &path)) {
    ef7c:	ab01      	add	r3, sp, #4
    ef7e:	aa02      	add	r2, sp, #8
    ef80:	9901      	ldr	r1, [sp, #4]
    ef82:	4620      	mov	r0, r4
    ef84:	f7ff fc1a 	bl	e7bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    ef88:	4603      	mov	r3, r0
    ef8a:	b1c0      	cbz	r0, efbe <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    if (*path == 0) {
    ef8c:	9b01      	ldr	r3, [sp, #4]
    ef8e:	781b      	ldrb	r3, [r3, #0]
    ef90:	b163      	cbz	r3, efac <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    ef92:	4633      	mov	r3, r6
    ef94:	aa02      	add	r2, sp, #8
    ef96:	4629      	mov	r1, r5
    ef98:	4620      	mov	r0, r4
    ef9a:	f7ff fdb7 	bl	eb0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    ef9e:	4603      	mov	r3, r0
    efa0:	b168      	cbz	r0, efbe <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
    tmpDir = *this;
    efa2:	46a4      	mov	ip, r4
    efa4:	ad08      	add	r5, sp, #32
    efa6:	f104 0830 	add.w	r8, r4, #48	; 0x30
    efaa:	e7cf      	b.n	ef4c <ExFatFile::open(ExFatFile*, char const*, int)+0x68>
  return openPrivate(dirFile, &fname, oflag);
    efac:	463b      	mov	r3, r7
    efae:	aa02      	add	r2, sp, #8
    efb0:	4629      	mov	r1, r5
    efb2:	4620      	mov	r0, r4
    efb4:	f7ff fdaa 	bl	eb0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    efb8:	4603      	mov	r3, r0
    efba:	e000      	b.n	efbe <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  return false;
    efbc:	2300      	movs	r3, #0
}
    efbe:	4618      	mov	r0, r3
    efc0:	b016      	add	sp, #88	; 0x58
    efc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    efc6:	2300      	movs	r3, #0
    efc8:	e7f9      	b.n	efbe <ExFatFile::open(ExFatFile*, char const*, int)+0xda>

0000efca <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    efca:	b129      	cbz	r1, efd8 <ExFatFile::open(ExFatVolume*, char const*, int)+0xe>
bool ExFatFile::open(ExFatVolume* vol, const char* path, oflag_t oflag) {
    efcc:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
    efce:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    efd2:	f7ff ff87 	bl	eee4 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    efd6:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
    efd8:	2000      	movs	r0, #0
}
    efda:	4770      	bx	lr

0000efdc <ExFatFile::openNext(ExFatFile*, int)>:
bool ExFatFile::openNext(ExFatFile* dir, oflag_t oflag) {
    efdc:	b508      	push	{r3, lr}
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    efde:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    efe2:	b97b      	cbnz	r3, f004 <ExFatFile::openNext(ExFatFile*, int)+0x28>
    efe4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    efe8:	f013 0f50 	tst.w	r3, #80	; 0x50
    efec:	d00c      	beq.n	f008 <ExFatFile::openNext(ExFatFile*, int)+0x2c>
    efee:	680b      	ldr	r3, [r1, #0]
    eff0:	f013 0f1f 	tst.w	r3, #31
    eff4:	d001      	beq.n	effa <ExFatFile::openNext(ExFatFile*, int)+0x1e>
  return false;
    eff6:	2000      	movs	r0, #0
    eff8:	e005      	b.n	f006 <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return openPrivate(dir, nullptr, oflag);
    effa:	4613      	mov	r3, r2
    effc:	2200      	movs	r2, #0
    effe:	f7ff fd85 	bl	eb0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    f002:	e000      	b.n	f006 <ExFatFile::openNext(ExFatFile*, int)+0x2a>
  return false;
    f004:	2000      	movs	r0, #0
}
    f006:	bd08      	pop	{r3, pc}
  return false;
    f008:	2000      	movs	r0, #0
    f00a:	e7fc      	b.n	f006 <ExFatFile::openNext(ExFatFile*, int)+0x2a>

0000f00c <exFatDirChecksum(unsigned char const*, unsigned short)>:
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
    f00c:	b410      	push	{r4}
    f00e:	4684      	mov	ip, r0
    f010:	4608      	mov	r0, r1
  bool skip = data[0] == EXFAT_TYPE_FILE;
    f012:	f89c 4000 	ldrb.w	r4, [ip]
    f016:	2c85      	cmp	r4, #133	; 0x85
    f018:	bf14      	ite	ne
    f01a:	2400      	movne	r4, #0
    f01c:	2401      	moveq	r4, #1
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    f01e:	2200      	movs	r2, #0
    f020:	e000      	b.n	f024 <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
    f022:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    f024:	03c3      	lsls	r3, r0, #15
    f026:	ea43 0350 	orr.w	r3, r3, r0, lsr #1
    f02a:	f81c 1002 	ldrb.w	r1, [ip, r2]
    f02e:	fa11 f383 	uxtah	r3, r1, r3
    f032:	b298      	uxth	r0, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    f034:	2a01      	cmp	r2, #1
    f036:	d101      	bne.n	f03c <exFatDirChecksum(unsigned char const*, unsigned short)+0x30>
    f038:	2c00      	cmp	r4, #0
    f03a:	d1f2      	bne.n	f022 <exFatDirChecksum(unsigned char const*, unsigned short)+0x16>
    f03c:	3201      	adds	r2, #1
    f03e:	2a1f      	cmp	r2, #31
    f040:	d9f0      	bls.n	f024 <exFatDirChecksum(unsigned char const*, unsigned short)+0x18>
}
    f042:	f85d 4b04 	ldr.w	r4, [sp], #4
    f046:	4770      	bx	lr

0000f048 <ExFatFile::addCluster()>:
bool ExFatFile::addCluster() {
    f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f04a:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    f04c:	6a00      	ldr	r0, [r0, #32]
    f04e:	69a1      	ldr	r1, [r4, #24]
    f050:	b101      	cbz	r1, f054 <ExFatFile::addCluster()+0xc>
    f052:	3101      	adds	r1, #1
    f054:	2201      	movs	r2, #1
    f056:	f001 f943 	bl	102e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
    f05a:	4605      	mov	r5, r0
  if (find < 2) {
    f05c:	2801      	cmp	r0, #1
    f05e:	d93c      	bls.n	f0da <ExFatFile::addCluster()+0x92>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    f060:	2301      	movs	r3, #1
    f062:	461a      	mov	r2, r3
    f064:	4601      	mov	r1, r0
    f066:	6a20      	ldr	r0, [r4, #32]
    f068:	f001 f993 	bl	10392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f06c:	4607      	mov	r7, r0
    f06e:	2800      	cmp	r0, #0
    f070:	d034      	beq.n	f0dc <ExFatFile::addCluster()+0x94>
  if (m_curCluster == 0) {
    f072:	69a3      	ldr	r3, [r4, #24]
    f074:	b1bb      	cbz	r3, f0a6 <ExFatFile::addCluster()+0x5e>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    f076:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    f07a:	f012 0f40 	tst.w	r2, #64	; 0x40
    f07e:	d01a      	beq.n	f0b6 <ExFatFile::addCluster()+0x6e>
    if (find == (m_curCluster + 1)) {
    f080:	3301      	adds	r3, #1
    f082:	42ab      	cmp	r3, r5
    f084:	d015      	beq.n	f0b2 <ExFatFile::addCluster()+0x6a>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    f086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f08a:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    f08e:	69e1      	ldr	r1, [r4, #28]
    f090:	69a3      	ldr	r3, [r4, #24]
    f092:	428b      	cmp	r3, r1
    f094:	d90f      	bls.n	f0b6 <ExFatFile::addCluster()+0x6e>
      if (!m_vol->fatPut(c, c + 1)) {
    f096:	1c4e      	adds	r6, r1, #1
    f098:	4632      	mov	r2, r6
    f09a:	6a20      	ldr	r0, [r4, #32]
    f09c:	f001 fa5d 	bl	1055a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    f0a0:	b1f0      	cbz	r0, f0e0 <ExFatFile::addCluster()+0x98>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    f0a2:	4631      	mov	r1, r6
    f0a4:	e7f4      	b.n	f090 <ExFatFile::addCluster()+0x48>
    m_flags |= FILE_FLAG_CONTIGUOUS;
    f0a6:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f0aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f0ae:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_curCluster = find;
    f0b2:	61a5      	str	r5, [r4, #24]
  return true;
    f0b4:	e012      	b.n	f0dc <ExFatFile::addCluster()+0x94>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    f0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f0ba:	4629      	mov	r1, r5
    f0bc:	6a20      	ldr	r0, [r4, #32]
    f0be:	f001 fa4c 	bl	1055a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    f0c2:	b178      	cbz	r0, f0e4 <ExFatFile::addCluster()+0x9c>
  if (m_curCluster) {
    f0c4:	69a1      	ldr	r1, [r4, #24]
    f0c6:	2900      	cmp	r1, #0
    f0c8:	d0f3      	beq.n	f0b2 <ExFatFile::addCluster()+0x6a>
    if (!m_vol->fatPut(m_curCluster, find)) {
    f0ca:	462a      	mov	r2, r5
    f0cc:	6a20      	ldr	r0, [r4, #32]
    f0ce:	f001 fa44 	bl	1055a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    f0d2:	2800      	cmp	r0, #0
    f0d4:	d1ed      	bne.n	f0b2 <ExFatFile::addCluster()+0x6a>
  return false;
    f0d6:	4607      	mov	r7, r0
    f0d8:	e000      	b.n	f0dc <ExFatFile::addCluster()+0x94>
    f0da:	2700      	movs	r7, #0
}
    f0dc:	4638      	mov	r0, r7
    f0de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
    f0e0:	4607      	mov	r7, r0
    f0e2:	e7fb      	b.n	f0dc <ExFatFile::addCluster()+0x94>
    f0e4:	4607      	mov	r7, r0
    f0e6:	e7f9      	b.n	f0dc <ExFatFile::addCluster()+0x94>

0000f0e8 <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    f0e8:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    f0ec:	f013 0f02 	tst.w	r3, #2
    f0f0:	d04e      	beq.n	f190 <ExFatFile::remove()+0xa8>
bool ExFatFile::remove() {
    f0f2:	b570      	push	{r4, r5, r6, lr}
    f0f4:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    f0f6:	69c1      	ldr	r1, [r0, #28]
    f0f8:	b1e9      	cbz	r1, f136 <ExFatFile::remove()+0x4e>
    if (isContiguous()) {
    f0fa:	f013 0f40 	tst.w	r3, #64	; 0x40
    f0fe:	d041      	beq.n	f184 <ExFatFile::remove()+0x9c>
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    f100:	6a00      	ldr	r0, [r0, #32]
    f102:	68aa      	ldr	r2, [r5, #8]
    f104:	68ec      	ldr	r4, [r5, #12]
    f106:	3a01      	subs	r2, #1
    f108:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f10c:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    f110:	3309      	adds	r3, #9
    f112:	b2db      	uxtb	r3, r3
    f114:	f1c3 0c20 	rsb	ip, r3, #32
    f118:	f1a3 0620 	sub.w	r6, r3, #32
    f11c:	40da      	lsrs	r2, r3
    f11e:	fa04 fc0c 	lsl.w	ip, r4, ip
    f122:	ea42 020c 	orr.w	r2, r2, ip
    f126:	fa24 f606 	lsr.w	r6, r4, r6
    f12a:	4332      	orrs	r2, r6
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    f12c:	2300      	movs	r3, #0
    f12e:	3201      	adds	r2, #1
    f130:	f001 f92f 	bl	10392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f134:	b378      	cbz	r0, f196 <ExFatFile::remove()+0xae>
bool ExFatFile::remove() {
    f136:	2400      	movs	r4, #0
      }
    }
  }

  for (uint8_t is = 0; is <= m_setCount; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    f138:	2601      	movs	r6, #1
    f13a:	4632      	mov	r2, r6
    f13c:	b2e1      	uxtb	r1, r4
    f13e:	4628      	mov	r0, r5
    f140:	f7ff fade 	bl	e700 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    f144:	b330      	cbz	r0, f194 <ExFatFile::remove()+0xac>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    f146:	7803      	ldrb	r3, [r0, #0]
    f148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f14c:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    f14e:	3401      	adds	r4, #1
    f150:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    f154:	b2e3      	uxtb	r3, r4
    f156:	429a      	cmp	r2, r3
    f158:	d2ef      	bcs.n	f13a <ExFatFile::remove()+0x52>
  }
  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
    f15a:	2300      	movs	r3, #0
    f15c:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    f160:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

  // Write entry to device.
  return m_vol->cacheSync();
    f164:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    f166:	4620      	mov	r0, r4
    f168:	f005 fd4c 	bl	14c04 <FsCache::sync()>
    f16c:	b198      	cbz	r0, f196 <ExFatFile::remove()+0xae>
    f16e:	f504 7004 	add.w	r0, r4, #528	; 0x210
    f172:	f005 fd47 	bl	14c04 <FsCache::sync()>
    f176:	b170      	cbz	r0, f196 <ExFatFile::remove()+0xae>
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    f178:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    f17c:	6803      	ldr	r3, [r0, #0]
    f17e:	6a1b      	ldr	r3, [r3, #32]
    f180:	4798      	blx	r3
    f182:	e008      	b.n	f196 <ExFatFile::remove()+0xae>
      if (!m_vol->freeChain(m_firstCluster)) {
    f184:	6a00      	ldr	r0, [r0, #32]
    f186:	f001 fa08 	bl	1059a <ExFatPartition::freeChain(unsigned long)>
    f18a:	2800      	cmp	r0, #0
    f18c:	d1d3      	bne.n	f136 <ExFatFile::remove()+0x4e>
    f18e:	e002      	b.n	f196 <ExFatFile::remove()+0xae>

 fail:
  return false;
    f190:	2000      	movs	r0, #0
}
    f192:	4770      	bx	lr
  return false;
    f194:	2000      	movs	r0, #0
}
    f196:	bd70      	pop	{r4, r5, r6, pc}

0000f198 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    f198:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    f19c:	f013 0f10 	tst.w	r3, #16
    f1a0:	d101      	bne.n	f1a6 <ExFatFile::rmdir()+0xe>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    f1a2:	2000      	movs	r0, #0
}
    f1a4:	4770      	bx	lr
bool ExFatFile::rmdir() {
    f1a6:	b530      	push	{r4, r5, lr}
    f1a8:	b089      	sub	sp, #36	; 0x24
    f1aa:	4604      	mov	r4, r0
    seekSet(0);
    f1ac:	2200      	movs	r2, #0
    f1ae:	2300      	movs	r3, #0
    f1b0:	f7ff fc39 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
    n = read(dir, FS_DIR_SIZE);
    f1b4:	2520      	movs	r5, #32
    f1b6:	462a      	mov	r2, r5
    f1b8:	4669      	mov	r1, sp
    f1ba:	4620      	mov	r0, r4
    f1bc:	f7ff fb52 	bl	e864 <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    f1c0:	b148      	cbz	r0, f1d6 <ExFatFile::rmdir()+0x3e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    f1c2:	2820      	cmp	r0, #32
    f1c4:	d115      	bne.n	f1f2 <ExFatFile::rmdir()+0x5a>
    f1c6:	f89d 2000 	ldrb.w	r2, [sp]
    f1ca:	f99d 3000 	ldrsb.w	r3, [sp]
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	db11      	blt.n	f1f6 <ExFatFile::rmdir()+0x5e>
    if (dir[0] == 0) {
    f1d2:	2a00      	cmp	r2, #0
    f1d4:	d1ef      	bne.n	f1b6 <ExFatFile::rmdir()+0x1e>
  m_attributes = FILE_ATTR_FILE;
    f1d6:	2308      	movs	r3, #8
    f1d8:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    f1dc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f1e0:	f043 0302 	orr.w	r3, r3, #2
    f1e4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    f1e8:	4620      	mov	r0, r4
    f1ea:	f7ff ff7d 	bl	f0e8 <ExFatFile::remove()>
}
    f1ee:	b009      	add	sp, #36	; 0x24
    f1f0:	bd30      	pop	{r4, r5, pc}
  return false;
    f1f2:	2000      	movs	r0, #0
    f1f4:	e7fb      	b.n	f1ee <ExFatFile::rmdir()+0x56>
    f1f6:	2000      	movs	r0, #0
    f1f8:	e7f9      	b.n	f1ee <ExFatFile::rmdir()+0x56>
	...

0000f1fc <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    f1fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f200:	b083      	sub	sp, #12
    f202:	4604      	mov	r4, r0
    f204:	2600      	movs	r6, #0
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    f206:	4637      	mov	r7, r6

  for (uint8_t is = 0; is <= m_setCount ; is++) {
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    f208:	46b0      	mov	r8, r6
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    f20a:	f8df 9100 	ldr.w	r9, [pc, #256]	; f30c <ExFatFile::syncDir()+0x110>
    f20e:	e02a      	b.n	f266 <ExFatFile::syncDir()+0x6a>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    f210:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    f214:	f003 0337 	and.w	r3, r3, #55	; 0x37
    f218:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    f21a:	f8d9 3000 	ldr.w	r3, [r9]
    f21e:	b183      	cbz	r3, f242 <ExFatFile::syncDir()+0x46>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    f220:	f10d 0203 	add.w	r2, sp, #3
    f224:	f10d 0106 	add.w	r1, sp, #6
    f228:	a801      	add	r0, sp, #4
    f22a:	4798      	blx	r3
          df->modifyTimeMs = ms10;
    f22c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    f230:	756b      	strb	r3, [r5, #21]
          setLe16(df->modifyTime, time);
    f232:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f236:	81aa      	strh	r2, [r5, #12]
          setLe16(df->modifyDate, date);
    f238:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f23c:	81eb      	strh	r3, [r5, #14]
    f23e:	822a      	strh	r2, [r5, #16]
    f240:	826b      	strh	r3, [r5, #18]
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    f242:	6a22      	ldr	r2, [r4, #32]
    m_status |= CACHE_STATUS_DIRTY;
    f244:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    f248:	f043 0301 	orr.w	r3, r3, #1
    f24c:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
      default:
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    f250:	4639      	mov	r1, r7
    f252:	4628      	mov	r0, r5
    f254:	f7ff feda 	bl	f00c <exFatDirChecksum(unsigned char const*, unsigned short)>
    f258:	4607      	mov	r7, r0
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    f25a:	3601      	adds	r6, #1
    f25c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
    f260:	b2f3      	uxtb	r3, r6
    f262:	429a      	cmp	r2, r3
    f264:	d334      	bcc.n	f2d0 <ExFatFile::syncDir()+0xd4>
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    f266:	4642      	mov	r2, r8
    f268:	b2f1      	uxtb	r1, r6
    f26a:	4620      	mov	r0, r4
    f26c:	f7ff fa48 	bl	e700 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    f270:	4605      	mov	r5, r0
    f272:	b130      	cbz	r0, f282 <ExFatFile::syncDir()+0x86>
    switch (cache[0]) {
    f274:	7803      	ldrb	r3, [r0, #0]
    f276:	2bc0      	cmp	r3, #192	; 0xc0
    f278:	d00d      	beq.n	f296 <ExFatFile::syncDir()+0x9a>
    f27a:	2bc1      	cmp	r3, #193	; 0xc1
    f27c:	d0e8      	beq.n	f250 <ExFatFile::syncDir()+0x54>
    f27e:	2b85      	cmp	r3, #133	; 0x85
    f280:	d0c6      	beq.n	f210 <ExFatFile::syncDir()+0x14>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    f282:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    f286:	f043 0301 	orr.w	r3, r3, #1
    f28a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    f28e:	2000      	movs	r0, #0
}
    f290:	b003      	add	sp, #12
    f292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (isContiguous()) {
    f296:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f29a:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    f29e:	7843      	ldrb	r3, [r0, #1]
    f2a0:	bf14      	ite	ne
    f2a2:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    f2a6:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    f2aa:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    f2ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    f2b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
        setLe32(ds->firstCluster, m_firstCluster);
    f2b4:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
    f2b6:	6143      	str	r3, [r0, #20]
        setLe64(ds->dataLength, m_dataLength);
    f2b8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
  *reinterpret_cast<uint64_t*>(dst) = src;
    f2bc:	e9c0 2306 	strd	r2, r3, [r0, #24]
        m_vol->dataCacheDirty();
    f2c0:	6a22      	ldr	r2, [r4, #32]
    f2c2:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    f2c6:	f043 0301 	orr.w	r3, r3, #1
    f2ca:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  void dataCacheDirty() {m_dataCache.dirty();}
    f2ce:	e7bf      	b.n	f250 <ExFatFile::syncDir()+0x54>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    f2d0:	2201      	movs	r2, #1
    f2d2:	f104 0124 	add.w	r1, r4, #36	; 0x24
    f2d6:	6a20      	ldr	r0, [r4, #32]
    f2d8:	f001 f8c3 	bl	10462 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    f2dc:	2800      	cmp	r0, #0
    f2de:	d0d0      	beq.n	f282 <ExFatFile::syncDir()+0x86>
  *reinterpret_cast<uint16_t*>(dst) = src;
    f2e0:	8047      	strh	r7, [r0, #2]
  if (!m_vol->cacheSync()) {
    f2e2:	6a25      	ldr	r5, [r4, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    f2e4:	4628      	mov	r0, r5
    f2e6:	f005 fc8d 	bl	14c04 <FsCache::sync()>
    f2ea:	2800      	cmp	r0, #0
    f2ec:	d0c9      	beq.n	f282 <ExFatFile::syncDir()+0x86>
    f2ee:	f505 7004 	add.w	r0, r5, #528	; 0x210
    f2f2:	f005 fc87 	bl	14c04 <FsCache::sync()>
    f2f6:	2800      	cmp	r0, #0
    f2f8:	d0c3      	beq.n	f282 <ExFatFile::syncDir()+0x86>
    return m_blockDev->syncDevice();
    f2fa:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    f2fe:	6803      	ldr	r3, [r0, #0]
    f300:	6a1b      	ldr	r3, [r3, #32]
    f302:	4798      	blx	r3
    f304:	2800      	cmp	r0, #0
    f306:	d1c3      	bne.n	f290 <ExFatFile::syncDir()+0x94>
    f308:	e7bb      	b.n	f282 <ExFatFile::syncDir()+0x86>
    f30a:	bf00      	nop
    f30c:	20006d3c 	.word	0x20006d3c

0000f310 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    f310:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    f312:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    f316:	b33b      	cbz	r3, f368 <ExFatFile::sync()+0x58>
    f318:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    f31a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    f31e:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    f322:	2a00      	cmp	r2, #0
    f324:	db0c      	blt.n	f340 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    f326:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    f328:	4628      	mov	r0, r5
    f32a:	f005 fc6b 	bl	14c04 <FsCache::sync()>
    f32e:	b970      	cbnz	r0, f34e <ExFatFile::sync()+0x3e>
  m_error |= WRITE_ERROR;
    f330:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    f334:	f043 0301 	orr.w	r3, r3, #1
    f338:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
    f33c:	2000      	movs	r0, #0
    f33e:	e014      	b.n	f36a <ExFatFile::sync()+0x5a>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    f340:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    f344:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
    return syncDir();
    f348:	f7ff ff58 	bl	f1fc <ExFatFile::syncDir()>
    f34c:	e00d      	b.n	f36a <ExFatFile::sync()+0x5a>
    f34e:	f505 7004 	add.w	r0, r5, #528	; 0x210
    f352:	f005 fc57 	bl	14c04 <FsCache::sync()>
    f356:	2800      	cmp	r0, #0
    f358:	d0ea      	beq.n	f330 <ExFatFile::sync()+0x20>
    return m_blockDev->syncDevice();
    f35a:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    f35e:	6803      	ldr	r3, [r0, #0]
    f360:	6a1b      	ldr	r3, [r3, #32]
    f362:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
    f364:	b908      	cbnz	r0, f36a <ExFatFile::sync()+0x5a>
    f366:	e7e3      	b.n	f330 <ExFatFile::sync()+0x20>
    return true;
    f368:	2001      	movs	r0, #1
}
    f36a:	bd38      	pop	{r3, r4, r5, pc}

0000f36c <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    f36c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f370:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    f372:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    f376:	f013 0f40 	tst.w	r3, #64	; 0x40
    f37a:	d10a      	bne.n	f392 <ExFatFile::addDirCluster()+0x26>
    f37c:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    f37e:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    f380:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    f384:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    f386:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    f38a:	d306      	bcc.n	f39a <ExFatFile::addDirCluster()+0x2e>
  return false;
    f38c:	2000      	movs	r0, #0
}
    f38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    f392:	6a00      	ldr	r0, [r0, #32]
    f394:	f001 f9f4 	bl	10780 <ExFatPartition::rootLength()>
    f398:	e7f1      	b.n	f37e <ExFatFile::addDirCluster()+0x12>
  if (!addCluster()) {
    f39a:	4628      	mov	r0, r5
    f39c:	f7ff fe54 	bl	f048 <ExFatFile::addCluster()>
    f3a0:	2800      	cmp	r0, #0
    f3a2:	d0f4      	beq.n	f38e <ExFatFile::addDirCluster()+0x22>
  sector = m_vol->clusterStartSector(m_curCluster);
    f3a4:	6a28      	ldr	r0, [r5, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    f3a6:	69ae      	ldr	r6, [r5, #24]
    f3a8:	3e02      	subs	r6, #2
    f3aa:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    f3ae:	409e      	lsls	r6, r3
    f3b0:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    f3b4:	441e      	add	r6, r3
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    f3b6:	2400      	movs	r4, #0
    return m_dataCache.prepare(sector, option);
    f3b8:	2705      	movs	r7, #5
    memset(cache, 0, m_vol->bytesPerSector());
    f3ba:	f44f 7900 	mov.w	r9, #512	; 0x200
    f3be:	46a0      	mov	r8, r4
    f3c0:	463a      	mov	r2, r7
    f3c2:	1931      	adds	r1, r6, r4
    f3c4:	f500 7004 	add.w	r0, r0, #528	; 0x210
    f3c8:	f005 fc43 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f3cc:	b360      	cbz	r0, f428 <ExFatFile::addDirCluster()+0xbc>
    memset(cache, 0, m_vol->bytesPerSector());
    f3ce:	464a      	mov	r2, r9
    f3d0:	4641      	mov	r1, r8
    f3d2:	f013 fe41 	bl	23058 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    f3d6:	3401      	adds	r4, #1
    f3d8:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    f3da:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    f3de:	2301      	movs	r3, #1
    f3e0:	4093      	lsls	r3, r2
    f3e2:	429c      	cmp	r4, r3
    f3e4:	d3ec      	bcc.n	f3c0 <ExFatFile::addDirCluster()+0x54>
  if (!isRoot()) {
    f3e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    f3ea:	f013 0f40 	tst.w	r3, #64	; 0x40
    f3ee:	d117      	bne.n	f420 <ExFatFile::addDirCluster()+0xb4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    f3f0:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    f3f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f3f8:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    f3fc:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    f400:	68ab      	ldr	r3, [r5, #8]
    f402:	68ea      	ldr	r2, [r5, #12]
    f404:	185b      	adds	r3, r3, r1
    f406:	f142 0200 	adc.w	r2, r2, #0
    f40a:	60ab      	str	r3, [r5, #8]
    f40c:	60ea      	str	r2, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    f40e:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    f412:	692b      	ldr	r3, [r5, #16]
    f414:	696a      	ldr	r2, [r5, #20]
    f416:	185b      	adds	r3, r3, r1
    f418:	f142 0200 	adc.w	r2, r2, #0
    f41c:	612b      	str	r3, [r5, #16]
    f41e:	616a      	str	r2, [r5, #20]
  return sync();
    f420:	4628      	mov	r0, r5
    f422:	f7ff ff75 	bl	f310 <ExFatFile::sync()>
    f426:	e7b2      	b.n	f38e <ExFatFile::addDirCluster()+0x22>
  return false;
    f428:	2000      	movs	r0, #0
    f42a:	e7b0      	b.n	f38e <ExFatFile::addDirCluster()+0x22>

0000f42c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
  if (!parent->isDir()) {
    f42c:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    f430:	f013 0f50 	tst.w	r3, #80	; 0x50
    f434:	d101      	bne.n	f43a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
  return false;
    f436:	2000      	movs	r0, #0
}
    f438:	4770      	bx	lr
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    f43a:	b510      	push	{r4, lr}
    f43c:	4604      	mov	r4, r0
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    f43e:	f640 2302 	movw	r3, #2562	; 0xa02
    f442:	f7ff fb63 	bl	eb0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    f446:	b900      	cbnz	r0, f44a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1e>
}
    f448:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_SUBDIR;
    f44a:	2310      	movs	r3, #16
    f44c:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    f450:	4620      	mov	r0, r4
    f452:	f7ff ff8b 	bl	f36c <ExFatFile::addDirCluster()>
    f456:	2800      	cmp	r0, #0
    f458:	d0f6      	beq.n	f448 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>
  m_firstCluster = m_curCluster;
    f45a:	69a3      	ldr	r3, [r4, #24]
    f45c:	61e3      	str	r3, [r4, #28]
    f45e:	2200      	movs	r2, #0
    f460:	2300      	movs	r3, #0
    f462:	4620      	mov	r0, r4
    f464:	f7ff fadf 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    f468:	23c1      	movs	r3, #193	; 0xc1
    f46a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    f46e:	4620      	mov	r0, r4
    f470:	f7ff ff4e 	bl	f310 <ExFatFile::sync()>
    f474:	e7e8      	b.n	f448 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x1c>

0000f476 <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    f476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f47a:	b096      	sub	sp, #88	; 0x58
    f47c:	9201      	str	r2, [sp, #4]
    f47e:	461e      	mov	r6, r3
    f480:	2300      	movs	r3, #0
    f482:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
  ExFatFile() {}
    f486:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    f48a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    f48e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
  if (isOpen() || !parent->isDir()) {
    f492:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    f496:	2b00      	cmp	r3, #0
    f498:	d15a      	bne.n	f550 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xda>
    f49a:	4604      	mov	r4, r0
    f49c:	460d      	mov	r5, r1
    f49e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    f4a2:	f013 0f50 	tst.w	r3, #80	; 0x50
    f4a6:	d058      	beq.n	f55a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe4>
  if (isDirSeparator(*path)) {
    f4a8:	4613      	mov	r3, r2
    f4aa:	7812      	ldrb	r2, [r2, #0]
    f4ac:	2a2f      	cmp	r2, #47	; 0x2f
    f4ae:	d001      	beq.n	f4b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    f4b0:	2700      	movs	r7, #0
    f4b2:	e029      	b.n	f508 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x92>
      path++;
    f4b4:	3301      	adds	r3, #1
    f4b6:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
    f4b8:	781a      	ldrb	r2, [r3, #0]
    f4ba:	2a2f      	cmp	r2, #47	; 0x2f
    f4bc:	d0fa      	beq.n	f4b4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3e>
    if (!tmpDir.openRoot(parent->m_vol)) {
    f4be:	6a29      	ldr	r1, [r5, #32]
    f4c0:	a802      	add	r0, sp, #8
    f4c2:	f7ff f967 	bl	e794 <ExFatFile::openRoot(ExFatVolume*)>
    f4c6:	4603      	mov	r3, r0
    f4c8:	2800      	cmp	r0, #0
    f4ca:	d042      	beq.n	f552 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    parent = &tmpDir;
    f4cc:	ad02      	add	r5, sp, #8
    f4ce:	e7ef      	b.n	f4b0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3a>
    tmpDir = *this;
    f4d0:	46a4      	mov	ip, r4
    f4d2:	ad02      	add	r5, sp, #8
    f4d4:	f104 0830 	add.w	r8, r4, #48	; 0x30
    f4d8:	46ae      	mov	lr, r5
    f4da:	f8dc 0000 	ldr.w	r0, [ip]
    f4de:	f8dc 1004 	ldr.w	r1, [ip, #4]
    f4e2:	f8dc 2008 	ldr.w	r2, [ip, #8]
    f4e6:	f8dc 300c 	ldr.w	r3, [ip, #12]
    f4ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    f4ee:	f10c 0c10 	add.w	ip, ip, #16
    f4f2:	4675      	mov	r5, lr
    f4f4:	45c4      	cmp	ip, r8
    f4f6:	d1ef      	bne.n	f4d8 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x62>
    f4f8:	f8dc 0000 	ldr.w	r0, [ip]
    f4fc:	f8ce 0000 	str.w	r0, [lr]
    close();
    f500:	4620      	mov	r0, r4
    f502:	f7ff f919 	bl	e738 <ExFatFile::close()>
    parent = &tmpDir;
    f506:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
    f508:	ab01      	add	r3, sp, #4
    f50a:	aa10      	add	r2, sp, #64	; 0x40
    f50c:	9901      	ldr	r1, [sp, #4]
    f50e:	4620      	mov	r0, r4
    f510:	f7ff f954 	bl	e7bc <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    f514:	4603      	mov	r3, r0
    f516:	b1e0      	cbz	r0, f552 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    if (!*path) {
    f518:	9b01      	ldr	r3, [sp, #4]
    f51a:	781b      	ldrb	r3, [r3, #0]
    f51c:	b18b      	cbz	r3, f542 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xcc>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    f51e:	463b      	mov	r3, r7
    f520:	aa10      	add	r2, sp, #64	; 0x40
    f522:	4629      	mov	r1, r5
    f524:	4620      	mov	r0, r4
    f526:	f7ff faf1 	bl	eb0c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    f52a:	2800      	cmp	r0, #0
    f52c:	d1d0      	bne.n	f4d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
      if (!pFlag || !mkdir(parent, &fname)) {
    f52e:	b1b6      	cbz	r6, f55e <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xe8>
    f530:	aa10      	add	r2, sp, #64	; 0x40
    f532:	4629      	mov	r1, r5
    f534:	4620      	mov	r0, r4
    f536:	f7ff ff79 	bl	f42c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    f53a:	4603      	mov	r3, r0
    f53c:	2800      	cmp	r0, #0
    f53e:	d1c7      	bne.n	f4d0 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x5a>
    f540:	e007      	b.n	f552 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return mkdir(parent, &fname);
    f542:	aa10      	add	r2, sp, #64	; 0x40
    f544:	4629      	mov	r1, r5
    f546:	4620      	mov	r0, r4
    f548:	f7ff ff70 	bl	f42c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    f54c:	4603      	mov	r3, r0
    f54e:	e000      	b.n	f552 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
  return false;
    f550:	2300      	movs	r3, #0
}
    f552:	4618      	mov	r0, r3
    f554:	b016      	add	sp, #88	; 0x58
    f556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
    f55a:	2300      	movs	r3, #0
    f55c:	e7f9      	b.n	f552 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>
    f55e:	4633      	mov	r3, r6
    f560:	e7f7      	b.n	f552 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xdc>

0000f562 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    f562:	b570      	push	{r4, r5, r6, lr}
    f564:	b09c      	sub	sp, #112	; 0x70
    f566:	2300      	movs	r3, #0
    f568:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    f56c:	f88d 306a 	strb.w	r3, [sp, #106]	; 0x6a
    f570:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
    f574:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    f578:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    f57c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  if (!(isFile() || isSubDir())) {
    f580:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    f584:	f013 0f18 	tst.w	r3, #24
    f588:	d047      	beq.n	f61a <ExFatFile::rename(ExFatFile*, char const*)+0xb8>
    f58a:	4604      	mov	r4, r0
  if (m_vol != dirFile->m_vol) {
    f58c:	6a00      	ldr	r0, [r0, #32]
    f58e:	6a0b      	ldr	r3, [r1, #32]
    f590:	4298      	cmp	r0, r3
    f592:	d002      	beq.n	f59a <ExFatFile::rename(ExFatFile*, char const*)+0x38>
  return false;
    f594:	2000      	movs	r0, #0
}
    f596:	b01c      	add	sp, #112	; 0x70
    f598:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    f59a:	f640 2301 	movw	r3, #2561	; 0xa01
    f59e:	a80e      	add	r0, sp, #56	; 0x38
    f5a0:	f7ff fca0 	bl	eee4 <ExFatFile::open(ExFatFile*, char const*, int)>
    f5a4:	2800      	cmp	r0, #0
    f5a6:	d0f6      	beq.n	f596 <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile = *this;
    f5a8:	46a4      	mov	ip, r4
    f5aa:	466d      	mov	r5, sp
    f5ac:	f104 0630 	add.w	r6, r4, #48	; 0x30
    f5b0:	46ae      	mov	lr, r5
    f5b2:	f8dc 0000 	ldr.w	r0, [ip]
    f5b6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    f5ba:	f8dc 2008 	ldr.w	r2, [ip, #8]
    f5be:	f8dc 300c 	ldr.w	r3, [ip, #12]
    f5c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    f5c6:	f10c 0c10 	add.w	ip, ip, #16
    f5ca:	4675      	mov	r5, lr
    f5cc:	45b4      	cmp	ip, r6
    f5ce:	d1ef      	bne.n	f5b0 <ExFatFile::rename(ExFatFile*, char const*)+0x4e>
    f5d0:	f8dc 0000 	ldr.w	r0, [ip]
    f5d4:	f8ce 0000 	str.w	r0, [lr]
  m_dirPos = file.m_dirPos;
    f5d8:	f104 0324 	add.w	r3, r4, #36	; 0x24
    f5dc:	aa17      	add	r2, sp, #92	; 0x5c
    f5de:	ca07      	ldmia	r2, {r0, r1, r2}
    f5e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_setCount = file.m_setCount;
    f5e4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
    f5e8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    f5ec:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f5f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f5f4:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    f5f8:	4620      	mov	r0, r4
    f5fa:	f7ff fe89 	bl	f310 <ExFatFile::sync()>
    f5fe:	2800      	cmp	r0, #0
    f600:	d0c9      	beq.n	f596 <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  oldFile.m_firstCluster = 0;
    f602:	2300      	movs	r3, #0
    f604:	9307      	str	r3, [sp, #28]
  oldFile.m_flags = FILE_FLAG_WRITE;
    f606:	2302      	movs	r3, #2
    f608:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
  oldFile.m_attributes = FILE_ATTR_FILE;
    f60c:	2308      	movs	r3, #8
    f60e:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  return oldFile.remove();
    f612:	4668      	mov	r0, sp
    f614:	f7ff fd68 	bl	f0e8 <ExFatFile::remove()>
    f618:	e7bd      	b.n	f596 <ExFatFile::rename(ExFatFile*, char const*)+0x34>
  return false;
    f61a:	2000      	movs	r0, #0
    f61c:	e7bb      	b.n	f596 <ExFatFile::rename(ExFatFile*, char const*)+0x34>

0000f61e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    f61e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f622:	b083      	sub	sp, #12
    f624:	9100      	str	r1, [sp, #0]
    f626:	461e      	mov	r6, r3
    f628:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
    f62c:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
    f630:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
    f634:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    f638:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    f63c:	f013 0f08 	tst.w	r3, #8
    f640:	f000 809a 	beq.w	f778 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15a>
    f644:	4605      	mov	r5, r0
      || year > 2107
    f646:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    f64a:	b294      	uxth	r4, r2
    f64c:	2c7f      	cmp	r4, #127	; 0x7f
    f64e:	f200 8098 	bhi.w	f782 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
      || month > 12
    f652:	1e73      	subs	r3, r6, #1
    f654:	b2db      	uxtb	r3, r3
    f656:	2b0b      	cmp	r3, #11
    f658:	f200 8095 	bhi.w	f786 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x168>
      || day > 31
    f65c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    f660:	b2db      	uxtb	r3, r3
    f662:	2b1e      	cmp	r3, #30
    f664:	f200 8091 	bhi.w	f78a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x16c>
      || minute > 59
    f668:	f1bb 0f3b 	cmp.w	fp, #59	; 0x3b
    f66c:	bf98      	it	ls
    f66e:	f1ba 0f17 	cmpls.w	sl, #23
    f672:	bf8c      	ite	hi
    f674:	2701      	movhi	r7, #1
    f676:	2700      	movls	r7, #0
    f678:	f1b9 0f3b 	cmp.w	r9, #59	; 0x3b
    f67c:	bf88      	it	hi
    f67e:	f047 0701 	orrhi.w	r7, r7, #1
      || second > 59) {
    f682:	b10f      	cbz	r7, f688 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x6a>
    goto fail;
  }
  return true;

 fail:
  return false;
    f684:	2700      	movs	r7, #0
    f686:	e078      	b.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
  if (!sync()) {
    f688:	f7ff fe42 	bl	f310 <ExFatFile::sync()>
    f68c:	2800      	cmp	r0, #0
    f68e:	d07e      	beq.n	f78e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
         year << 9 | month << 5 | day;
    f690:	ea48 1846 	orr.w	r8, r8, r6, lsl #5
    f694:	ea48 2444 	orr.w	r4, r8, r4, lsl #9
    f698:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    f69a:	ea4f 0359 	mov.w	r3, r9, lsr #1
    f69e:	ea43 134b 	orr.w	r3, r3, fp, lsl #5
    f6a2:	ea43 23ca 	orr.w	r3, r3, sl, lsl #11
    f6a6:	fa1f fb83 	uxth.w	fp, r3
  ms10 = second & 1 ? 100 : 0;
    f6aa:	f019 0901 	ands.w	r9, r9, #1
    f6ae:	bf18      	it	ne
    f6b0:	f04f 0964 	movne.w	r9, #100	; 0x64
    f6b4:	2600      	movs	r6, #0
  uint16_t checksum = 0;
    f6b6:	9601      	str	r6, [sp, #4]
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    f6b8:	46b2      	mov	sl, r6
        if (flags & T_ACCESS) {
    f6ba:	9b00      	ldr	r3, [sp, #0]
    f6bc:	f003 0801 	and.w	r8, r3, #1
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    f6c0:	4652      	mov	r2, sl
    f6c2:	b2f1      	uxtb	r1, r6
    f6c4:	4628      	mov	r0, r5
    f6c6:	f7ff f81b 	bl	e700 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    f6ca:	4602      	mov	r2, r0
    f6cc:	2800      	cmp	r0, #0
    f6ce:	d054      	beq.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    switch (cache[0]) {
    f6d0:	7803      	ldrb	r3, [r0, #0]
    f6d2:	2b85      	cmp	r3, #133	; 0x85
    f6d4:	d02b      	beq.n	f72e <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x110>
    f6d6:	3340      	adds	r3, #64	; 0x40
    f6d8:	b2db      	uxtb	r3, r3
    f6da:	2b01      	cmp	r3, #1
    f6dc:	d84d      	bhi.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    checksum = exFatDirChecksum(cache, checksum);
    f6de:	9901      	ldr	r1, [sp, #4]
    f6e0:	4610      	mov	r0, r2
    f6e2:	f7ff fc93 	bl	f00c <exFatDirChecksum(unsigned char const*, unsigned short)>
    f6e6:	9001      	str	r0, [sp, #4]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    f6e8:	3601      	adds	r6, #1
    f6ea:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    f6ee:	b2f3      	uxtb	r3, r6
    f6f0:	429a      	cmp	r2, r3
    f6f2:	d2e5      	bcs.n	f6c0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa2>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    f6f4:	2201      	movs	r2, #1
    f6f6:	f105 0124 	add.w	r1, r5, #36	; 0x24
    f6fa:	6a28      	ldr	r0, [r5, #32]
    f6fc:	f000 feb1 	bl	10462 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    f700:	2800      	cmp	r0, #0
    f702:	d03a      	beq.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    f704:	9a01      	ldr	r2, [sp, #4]
    f706:	8042      	strh	r2, [r0, #2]
  if (!m_vol->cacheSync()) {
    f708:	6a2c      	ldr	r4, [r5, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    f70a:	4620      	mov	r0, r4
    f70c:	f005 fa7a 	bl	14c04 <FsCache::sync()>
    f710:	4607      	mov	r7, r0
    f712:	b390      	cbz	r0, f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    f714:	f504 7004 	add.w	r0, r4, #528	; 0x210
    f718:	f005 fa74 	bl	14c04 <FsCache::sync()>
    f71c:	4607      	mov	r7, r0
    f71e:	b360      	cbz	r0, f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    return m_blockDev->syncDevice();
    f720:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    f724:	6803      	ldr	r3, [r0, #0]
    f726:	6a1b      	ldr	r3, [r3, #32]
    f728:	4798      	blx	r3
    f72a:	4607      	mov	r7, r0
    f72c:	e025      	b.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    f72e:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    f732:	f003 0337 	and.w	r3, r3, #55	; 0x37
    f736:	8083      	strh	r3, [r0, #4]
        m_vol->dataCacheDirty();
    f738:	6a29      	ldr	r1, [r5, #32]
    f73a:	f891 3210 	ldrb.w	r3, [r1, #528]	; 0x210
    f73e:	f043 0301 	orr.w	r3, r3, #1
    f742:	f881 3210 	strb.w	r3, [r1, #528]	; 0x210
        if (flags & T_ACCESS) {
    f746:	f1b8 0f00 	cmp.w	r8, #0
    f74a:	d002      	beq.n	f752 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    f74c:	f8a0 b010 	strh.w	fp, [r0, #16]
    f750:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    f752:	9b00      	ldr	r3, [sp, #0]
    f754:	f013 0f02 	tst.w	r3, #2
    f758:	d004      	beq.n	f764 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x146>
          df->createTimeMs = ms10;
    f75a:	f882 9014 	strb.w	r9, [r2, #20]
    f75e:	f8a2 b008 	strh.w	fp, [r2, #8]
    f762:	8154      	strh	r4, [r2, #10]
        if (flags & T_WRITE) {
    f764:	9b00      	ldr	r3, [sp, #0]
    f766:	f013 0f04 	tst.w	r3, #4
    f76a:	d0b8      	beq.n	f6de <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
          df->modifyTimeMs = ms10;
    f76c:	f882 9015 	strb.w	r9, [r2, #21]
    f770:	f8a2 b00c 	strh.w	fp, [r2, #12]
    f774:	81d4      	strh	r4, [r2, #14]
}
    f776:	e7b2      	b.n	f6de <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
  return false;
    f778:	2700      	movs	r7, #0
}
    f77a:	4638      	mov	r0, r7
    f77c:	b003      	add	sp, #12
    f77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
    f782:	2700      	movs	r7, #0
    f784:	e7f9      	b.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    f786:	2700      	movs	r7, #0
    f788:	e7f7      	b.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    f78a:	2700      	movs	r7, #0
    f78c:	e7f5      	b.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>
    f78e:	4607      	mov	r7, r0
    f790:	e7f3      	b.n	f77a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x15c>

0000f792 <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    f792:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    f796:	f013 0f02 	tst.w	r3, #2
    f79a:	d066      	beq.n	f86a <ExFatFile::truncate()+0xd8>
bool ExFatFile::truncate() {
    f79c:	b530      	push	{r4, r5, lr}
    f79e:	b083      	sub	sp, #12
    f7a0:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    f7a2:	69c5      	ldr	r5, [r0, #28]
    f7a4:	2d00      	cmp	r5, #0
    f7a6:	d062      	beq.n	f86e <ExFatFile::truncate()+0xdc>
      return true;
  }
  if (isContiguous()) {
    f7a8:	f013 0f40 	tst.w	r3, #64	; 0x40
    f7ac:	d03b      	beq.n	f826 <ExFatFile::truncate()+0x94>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    f7ae:	6a00      	ldr	r0, [r0, #32]
    f7b0:	68a2      	ldr	r2, [r4, #8]
    f7b2:	68e1      	ldr	r1, [r4, #12]
    f7b4:	3a01      	subs	r2, #1
    f7b6:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f7ba:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    f7be:	3309      	adds	r3, #9
    f7c0:	b2db      	uxtb	r3, r3
    f7c2:	f1c3 0e20 	rsb	lr, r3, #32
    f7c6:	f1a3 0c20 	sub.w	ip, r3, #32
    f7ca:	40da      	lsrs	r2, r3
    f7cc:	fa01 fe0e 	lsl.w	lr, r1, lr
    f7d0:	ea42 020e 	orr.w	r2, r2, lr
    f7d4:	fa21 fc0c 	lsr.w	ip, r1, ip
    f7d8:	ea42 020c 	orr.w	r2, r2, ip
    f7dc:	3201      	adds	r2, #1
    if (m_curCluster) {
    f7de:	69a3      	ldr	r3, [r4, #24]
    f7e0:	b1b3      	cbz	r3, f810 <ExFatFile::truncate()+0x7e>
      toFree = m_curCluster + 1;
    f7e2:	1c59      	adds	r1, r3, #1
    f7e4:	9101      	str	r1, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    f7e6:	3d01      	subs	r5, #1
    f7e8:	1aed      	subs	r5, r5, r3
    f7ea:	442a      	add	r2, r5
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    f7ec:	b9a2      	cbnz	r2, f818 <ExFatFile::truncate()+0x86>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    f7ee:	e9d4 2300 	ldrd	r2, r3, [r4]
    f7f2:	e9c4 2302 	strd	r2, r3, [r4, #8]
  m_validLength = m_curPosition;
    f7f6:	e9c4 2304 	strd	r2, r3, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    f7fa:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f7fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f802:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return sync();
    f806:	4620      	mov	r0, r4
    f808:	f7ff fd82 	bl	f310 <ExFatFile::sync()>

 fail:
  return false;
}
    f80c:	b003      	add	sp, #12
    f80e:	bd30      	pop	{r4, r5, pc}
      toFree = m_firstCluster;
    f810:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    f812:	2300      	movs	r3, #0
    f814:	61e3      	str	r3, [r4, #28]
    f816:	e7e9      	b.n	f7ec <ExFatFile::truncate()+0x5a>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    f818:	2300      	movs	r3, #0
    f81a:	9901      	ldr	r1, [sp, #4]
    f81c:	f000 fdb9 	bl	10392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f820:	2800      	cmp	r0, #0
    f822:	d1e4      	bne.n	f7ee <ExFatFile::truncate()+0x5c>
    f824:	e7f2      	b.n	f80c <ExFatFile::truncate()+0x7a>
    if (m_curCluster) {
    f826:	6981      	ldr	r1, [r0, #24]
    f828:	b949      	cbnz	r1, f83e <ExFatFile::truncate()+0xac>
      toFree = m_firstCluster;
    f82a:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    f82c:	2300      	movs	r3, #0
    f82e:	61c3      	str	r3, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    f830:	4629      	mov	r1, r5
    f832:	6a20      	ldr	r0, [r4, #32]
    f834:	f000 feb1 	bl	1059a <ExFatPartition::freeChain(unsigned long)>
    f838:	2800      	cmp	r0, #0
    f83a:	d1d8      	bne.n	f7ee <ExFatFile::truncate()+0x5c>
    f83c:	e7e6      	b.n	f80c <ExFatFile::truncate()+0x7a>
      toFree = 0;
    f83e:	2300      	movs	r3, #0
    f840:	9301      	str	r3, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    f842:	aa01      	add	r2, sp, #4
    f844:	6a00      	ldr	r0, [r0, #32]
    f846:	f000 fe29 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    f84a:	2800      	cmp	r0, #0
    f84c:	db11      	blt.n	f872 <ExFatFile::truncate()+0xe0>
      if (fg) {
    f84e:	b918      	cbnz	r0, f858 <ExFatFile::truncate()+0xc6>
    if (toFree) {
    f850:	9d01      	ldr	r5, [sp, #4]
    f852:	2d00      	cmp	r5, #0
    f854:	d0cb      	beq.n	f7ee <ExFatFile::truncate()+0x5c>
    f856:	e7eb      	b.n	f830 <ExFatFile::truncate()+0x9e>
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    f858:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f85c:	69a1      	ldr	r1, [r4, #24]
    f85e:	6a20      	ldr	r0, [r4, #32]
    f860:	f000 fe7b 	bl	1055a <ExFatPartition::fatPut(unsigned long, unsigned long)>
    f864:	2800      	cmp	r0, #0
    f866:	d1f3      	bne.n	f850 <ExFatFile::truncate()+0xbe>
    f868:	e7d0      	b.n	f80c <ExFatFile::truncate()+0x7a>
  return false;
    f86a:	2000      	movs	r0, #0
}
    f86c:	4770      	bx	lr
      return true;
    f86e:	2001      	movs	r0, #1
    f870:	e7cc      	b.n	f80c <ExFatFile::truncate()+0x7a>
  return false;
    f872:	2000      	movs	r0, #0
    f874:	e7ca      	b.n	f80c <ExFatFile::truncate()+0x7a>
	...

0000f878 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    f878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f87c:	b083      	sub	sp, #12
    f87e:	4604      	mov	r4, r0
    f880:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    f884:	f013 0f02 	tst.w	r3, #2
    f888:	d014      	beq.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
    f88a:	4688      	mov	r8, r1
    f88c:	4693      	mov	fp, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    f88e:	f013 0f08 	tst.w	r3, #8
    f892:	d109      	bne.n	f8a8 <ExFatFile::write(void const*, unsigned int)+0x30>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    f894:	f1bb 0f00 	cmp.w	fp, #0
    f898:	f000 80ed 	beq.w	fa76 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    f89c:	465f      	mov	r7, fp
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    f89e:	f104 0a18 	add.w	sl, r4, #24
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    f8a2:	f04f 0901 	mov.w	r9, #1
    f8a6:	e085      	b.n	f9b4 <ExFatFile::write(void const*, unsigned int)+0x13c>
    if (!seekSet(m_validLength)) {
    f8a8:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    f8ac:	f7ff f8bb 	bl	ea26 <ExFatFile::seekSet(unsigned long long)>
    f8b0:	2800      	cmp	r0, #0
    f8b2:	d1ef      	bne.n	f894 <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    f8b4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    f8b8:	f043 0301 	orr.w	r3, r3, #1
    f8bc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return 0;
    f8c0:	2000      	movs	r0, #0
}
    f8c2:	b003      	add	sp, #12
    f8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    f8c8:	4652      	mov	r2, sl
    f8ca:	f000 fde7 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    f8ce:	2800      	cmp	r0, #0
    f8d0:	dbf0      	blt.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (fg == 0) {
    f8d2:	b938      	cbnz	r0, f8e4 <ExFatFile::write(void const*, unsigned int)+0x6c>
          if (!addCluster()) {
    f8d4:	4620      	mov	r0, r4
    f8d6:	f7ff fbb7 	bl	f048 <ExFatFile::addCluster()>
    f8da:	b918      	cbnz	r0, f8e4 <ExFatFile::write(void const*, unsigned int)+0x6c>
    f8dc:	e7ea      	b.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
        if (m_firstCluster == 0) {
    f8de:	69e3      	ldr	r3, [r4, #28]
    f8e0:	b323      	cbz	r3, f92c <ExFatFile::write(void const*, unsigned int)+0xb4>
          m_curCluster = m_firstCluster;
    f8e2:	61a3      	str	r3, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    f8e4:	6a20      	ldr	r0, [r4, #32]
           ((cluster - 2) << m_sectorsPerClusterShift);
    f8e6:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
             (clusterOffset >> m_vol->bytesPerSectorShift());
    f8ea:	ea4f 2c55 	mov.w	ip, r5, lsr #9
    f8ee:	69a1      	ldr	r1, [r4, #24]
    f8f0:	3902      	subs	r1, #2
    f8f2:	4091      	lsls	r1, r2
    sector = m_vol->clusterStartSector(m_curCluster) +
    f8f4:	eb01 2155 	add.w	r1, r1, r5, lsr #9
    f8f8:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    f8fc:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    f8fe:	b916      	cbnz	r6, f906 <ExFatFile::write(void const*, unsigned int)+0x8e>
    f900:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    f904:	d21a      	bcs.n	f93c <ExFatFile::write(void const*, unsigned int)+0xc4>
      n = m_vol->bytesPerSector() - sectorOffset;
    f906:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
    f90a:	42bd      	cmp	r5, r7
    f90c:	bf28      	it	cs
    f90e:	463d      	movcs	r5, r7
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    f910:	bb3e      	cbnz	r6, f962 <ExFatFile::write(void const*, unsigned int)+0xea>
    f912:	6862      	ldr	r2, [r4, #4]
    f914:	9200      	str	r2, [sp, #0]
    f916:	6963      	ldr	r3, [r4, #20]
    f918:	9301      	str	r3, [sp, #4]
    f91a:	6823      	ldr	r3, [r4, #0]
    f91c:	6922      	ldr	r2, [r4, #16]
    f91e:	4293      	cmp	r3, r2
    f920:	9a00      	ldr	r2, [sp, #0]
    f922:	9b01      	ldr	r3, [sp, #4]
    f924:	419a      	sbcs	r2, r3
    f926:	d375      	bcc.n	fa14 <ExFatFile::write(void const*, unsigned int)+0x19c>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    f928:	2205      	movs	r2, #5
    f92a:	e01b      	b.n	f964 <ExFatFile::write(void const*, unsigned int)+0xec>
          if (!addCluster()) {
    f92c:	4620      	mov	r0, r4
    f92e:	f7ff fb8b 	bl	f048 <ExFatFile::addCluster()>
    f932:	2800      	cmp	r0, #0
    f934:	d0be      	beq.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
          m_firstCluster = m_curCluster;
    f936:	69a3      	ldr	r3, [r4, #24]
    f938:	61e3      	str	r3, [r4, #28]
    f93a:	e7d3      	b.n	f8e4 <ExFatFile::write(void const*, unsigned int)+0x6c>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    f93c:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
    f940:	d271      	bcs.n	fa26 <ExFatFile::write(void const*, unsigned int)+0x1ae>
    if (isCached(sector)) {
    f942:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    f946:	4299      	cmp	r1, r3
    f948:	f000 808d 	beq.w	fa66 <ExFatFile::write(void const*, unsigned int)+0x1ee>
    return m_blockDev->writeSector(sector, src);
    f94c:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    f950:	6803      	ldr	r3, [r0, #0]
    f952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    f954:	4642      	mov	r2, r8
    f956:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    f958:	2800      	cmp	r0, #0
    f95a:	d0ab      	beq.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
      n = m_vol->bytesPerSector();
    f95c:	f44f 7500 	mov.w	r5, #512	; 0x200
    f960:	e010      	b.n	f984 <ExFatFile::write(void const*, unsigned int)+0x10c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    f962:	464a      	mov	r2, r9
    return m_dataCache.prepare(sector, option);
    f964:	f500 7004 	add.w	r0, r0, #528	; 0x210
    f968:	f005 f973 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    f96c:	2800      	cmp	r0, #0
    f96e:	d0a1      	beq.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
      memcpy(dst, src, n);
    f970:	462a      	mov	r2, r5
    f972:	4641      	mov	r1, r8
    f974:	4430      	add	r0, r6
    f976:	f007 fcbb 	bl	172f0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    f97a:	6a20      	ldr	r0, [r4, #32]
    f97c:	442e      	add	r6, r5
    f97e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    f982:	d049      	beq.n	fa18 <ExFatFile::write(void const*, unsigned int)+0x1a0>
    m_curPosition += n;
    f984:	6823      	ldr	r3, [r4, #0]
    f986:	6862      	ldr	r2, [r4, #4]
    f988:	18eb      	adds	r3, r5, r3
    f98a:	f142 0200 	adc.w	r2, r2, #0
    f98e:	6023      	str	r3, [r4, #0]
    f990:	6062      	str	r2, [r4, #4]
    src += n;
    f992:	44a8      	add	r8, r5
    toWrite -= n;
    f994:	1b7f      	subs	r7, r7, r5
    if (m_curPosition > m_validLength) {
    f996:	6920      	ldr	r0, [r4, #16]
    f998:	6961      	ldr	r1, [r4, #20]
    f99a:	4298      	cmp	r0, r3
    f99c:	4191      	sbcs	r1, r2
    f99e:	d207      	bcs.n	f9b0 <ExFatFile::write(void const*, unsigned int)+0x138>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    f9a0:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    f9a4:	f061 017f 	orn	r1, r1, #127	; 0x7f
    f9a8:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
      m_validLength = m_curPosition;
    f9ac:	6123      	str	r3, [r4, #16]
    f9ae:	6162      	str	r2, [r4, #20]
  while (toWrite) {
    f9b0:	2f00      	cmp	r7, #0
    f9b2:	d060      	beq.n	fa76 <ExFatFile::write(void const*, unsigned int)+0x1fe>
    clusterOffset = m_curPosition & m_vol->clusterMask();
    f9b4:	6a20      	ldr	r0, [r4, #32]
    f9b6:	6825      	ldr	r5, [r4, #0]
    f9b8:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    f9bc:	401d      	ands	r5, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    f9be:	f3c5 0608 	ubfx	r6, r5, #0, #9
    if (clusterOffset == 0) {
    f9c2:	2d00      	cmp	r5, #0
    f9c4:	d18e      	bne.n	f8e4 <ExFatFile::write(void const*, unsigned int)+0x6c>
      if (m_curCluster != 0) {
    f9c6:	69a1      	ldr	r1, [r4, #24]
    f9c8:	2900      	cmp	r1, #0
    f9ca:	d088      	beq.n	f8de <ExFatFile::write(void const*, unsigned int)+0x66>
        if (isContiguous()) {
    f9cc:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    f9d0:	f013 0f40 	tst.w	r3, #64	; 0x40
    f9d4:	f43f af78 	beq.w	f8c8 <ExFatFile::write(void const*, unsigned int)+0x50>
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    f9d8:	68a3      	ldr	r3, [r4, #8]
    f9da:	68e2      	ldr	r2, [r4, #12]
    f9dc:	3b01      	subs	r3, #1
    f9de:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f9e2:	f890 0445 	ldrb.w	r0, [r0, #1093]	; 0x445
    f9e6:	3009      	adds	r0, #9
    f9e8:	b2c0      	uxtb	r0, r0
    f9ea:	f1c0 0e20 	rsb	lr, r0, #32
    f9ee:	f1a0 0c20 	sub.w	ip, r0, #32
    f9f2:	40c3      	lsrs	r3, r0
    f9f4:	fa02 fe0e 	lsl.w	lr, r2, lr
    f9f8:	ea43 030e 	orr.w	r3, r3, lr
    f9fc:	fa22 fc0c 	lsr.w	ip, r2, ip
    fa00:	ea43 030c 	orr.w	r3, r3, ip
    fa04:	69e2      	ldr	r2, [r4, #28]
    fa06:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    fa08:	4299      	cmp	r1, r3
    fa0a:	f4bf af63 	bcs.w	f8d4 <ExFatFile::write(void const*, unsigned int)+0x5c>
            m_curCluster++;
    fa0e:	3101      	adds	r1, #1
    fa10:	61a1      	str	r1, [r4, #24]
        if (fg == 0) {
    fa12:	e767      	b.n	f8e4 <ExFatFile::write(void const*, unsigned int)+0x6c>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    fa14:	464a      	mov	r2, r9
    fa16:	e7a5      	b.n	f964 <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    fa18:	f500 7004 	add.w	r0, r0, #528	; 0x210
    fa1c:	f005 f8f2 	bl	14c04 <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    fa20:	2800      	cmp	r0, #0
    fa22:	d1af      	bne.n	f984 <ExFatFile::write(void const*, unsigned int)+0x10c>
    fa24:	e746      	b.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    fa26:	fa09 f302 	lsl.w	r3, r9, r2
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    fa2a:	eba3 030c 	sub.w	r3, r3, ip
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    fa2e:	0a7a      	lsrs	r2, r7, #9
    fa30:	4293      	cmp	r3, r2
    fa32:	bf28      	it	cs
    fa34:	4613      	movcs	r3, r2
      n = ns << m_vol->bytesPerSectorShift();
    fa36:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
    fa38:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    fa3c:	4291      	cmp	r1, r2
    fa3e:	d809      	bhi.n	fa54 <ExFatFile::write(void const*, unsigned int)+0x1dc>
    fa40:	18ce      	adds	r6, r1, r3
    fa42:	42b2      	cmp	r2, r6
    fa44:	d206      	bcs.n	fa54 <ExFatFile::write(void const*, unsigned int)+0x1dc>
    m_status = 0;
    fa46:	2200      	movs	r2, #0
    fa48:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    fa4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    fa50:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    fa54:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    fa58:	6802      	ldr	r2, [r0, #0]
    fa5a:	6a96      	ldr	r6, [r2, #40]	; 0x28
    fa5c:	4642      	mov	r2, r8
    fa5e:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    fa60:	2800      	cmp	r0, #0
    fa62:	d18f      	bne.n	f984 <ExFatFile::write(void const*, unsigned int)+0x10c>
    fa64:	e726      	b.n	f8b4 <ExFatFile::write(void const*, unsigned int)+0x3c>
    m_status = 0;
    fa66:	2300      	movs	r3, #0
    fa68:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    fa6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    fa70:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
  }
    fa74:	e76a      	b.n	f94c <ExFatFile::write(void const*, unsigned int)+0xd4>
  if (m_curPosition > m_dataLength) {
    fa76:	6821      	ldr	r1, [r4, #0]
    fa78:	6862      	ldr	r2, [r4, #4]
    fa7a:	68a0      	ldr	r0, [r4, #8]
    fa7c:	68e3      	ldr	r3, [r4, #12]
    fa7e:	4288      	cmp	r0, r1
    fa80:	4193      	sbcs	r3, r2
    fa82:	d209      	bcs.n	fa98 <ExFatFile::write(void const*, unsigned int)+0x220>
    m_dataLength = m_curPosition;
    fa84:	60a1      	str	r1, [r4, #8]
    fa86:	60e2      	str	r2, [r4, #12]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    fa88:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    fa8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fa90:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    fa94:	4658      	mov	r0, fp
    fa96:	e714      	b.n	f8c2 <ExFatFile::write(void const*, unsigned int)+0x4a>
  } else if (FsDateTime::callback) {
    fa98:	4b06      	ldr	r3, [pc, #24]	; (fab4 <ExFatFile::write(void const*, unsigned int)+0x23c>)
    fa9a:	681b      	ldr	r3, [r3, #0]
    fa9c:	b13b      	cbz	r3, faae <ExFatFile::write(void const*, unsigned int)+0x236>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    fa9e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    faa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    faa6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return nbyte;
    faaa:	4658      	mov	r0, fp
    faac:	e709      	b.n	f8c2 <ExFatFile::write(void const*, unsigned int)+0x4a>
    faae:	4658      	mov	r0, fp
    fab0:	e707      	b.n	f8c2 <ExFatFile::write(void const*, unsigned int)+0x4a>
    fab2:	bf00      	nop
    fab4:	20006d3c 	.word	0x20006d3c

0000fab8 <Print::write(char const*)>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    fab8:	b161      	cbz	r1, fad4 <Print::write(char const*)+0x1c>
    faba:	b538      	push	{r3, r4, r5, lr}
    fabc:	4604      	mov	r4, r0
    fabe:	460d      	mov	r5, r1
							  return write((const uint8_t *)str, strlen(str)); }
    fac0:	4608      	mov	r0, r1
    fac2:	f013 fe5d 	bl	23780 <strlen>
    fac6:	4602      	mov	r2, r0
    fac8:	6823      	ldr	r3, [r4, #0]
    faca:	685b      	ldr	r3, [r3, #4]
    facc:	4629      	mov	r1, r5
    face:	4620      	mov	r0, r4
    fad0:	4798      	blx	r3
    fad2:	bd38      	pop	{r3, r4, r5, pc}
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    fad4:	2000      	movs	r0, #0
							  return write((const uint8_t *)str, strlen(str)); }
    fad6:	4770      	bx	lr

0000fad8 <ExFatFormatter::syncUpcase()>:
 fail:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
    fad8:	b508      	push	{r3, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    fada:	6883      	ldr	r3, [r0, #8]
    fadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    fae0:	b173      	cbz	r3, fb00 <ExFatFormatter::syncUpcase()+0x28>
    fae2:	4601      	mov	r1, r0
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    fae4:	2000      	movs	r0, #0
    fae6:	690a      	ldr	r2, [r1, #16]
    fae8:	54d0      	strb	r0, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    faea:	3301      	adds	r3, #1
    faec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    faf0:	d3f9      	bcc.n	fae6 <ExFatFormatter::syncUpcase()+0xe>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    faf2:	68c8      	ldr	r0, [r1, #12]
    faf4:	6803      	ldr	r3, [r0, #0]
    faf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    faf8:	690a      	ldr	r2, [r1, #16]
    fafa:	6809      	ldr	r1, [r1, #0]
    fafc:	4798      	blx	r3
}
    fafe:	bd08      	pop	{r3, pc}
    return true;
    fb00:	2001      	movs	r0, #1
    fb02:	e7fc      	b.n	fafe <ExFatFormatter::syncUpcase()+0x26>

0000fb04 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    fb04:	4603      	mov	r3, r0
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    fb06:	6882      	ldr	r2, [r0, #8]
    fb08:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    fb0c:	6900      	ldr	r0, [r0, #16]
    fb0e:	5481      	strb	r1, [r0, r2]
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    fb10:	6858      	ldr	r0, [r3, #4]
    fb12:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    fb16:	6059      	str	r1, [r3, #4]
  m_upcaseSize++;
    fb18:	6899      	ldr	r1, [r3, #8]
    fb1a:	3101      	adds	r1, #1
    fb1c:	6099      	str	r1, [r3, #8]
  if (index == SECTOR_MASK) {
    fb1e:	f240 11ff 	movw	r1, #511	; 0x1ff
    fb22:	428a      	cmp	r2, r1
    fb24:	d001      	beq.n	fb2a <ExFatFormatter::writeUpcaseByte(unsigned char)+0x26>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
    fb26:	2001      	movs	r0, #1
}
    fb28:	4770      	bx	lr
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    fb2a:	b510      	push	{r4, lr}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    fb2c:	68d8      	ldr	r0, [r3, #12]
    fb2e:	6802      	ldr	r2, [r0, #0]
    fb30:	6a54      	ldr	r4, [r2, #36]	; 0x24
    fb32:	6819      	ldr	r1, [r3, #0]
    fb34:	1c4a      	adds	r2, r1, #1
    fb36:	601a      	str	r2, [r3, #0]
    fb38:	691a      	ldr	r2, [r3, #16]
    fb3a:	47a0      	blx	r4
}
    fb3c:	bd10      	pop	{r4, pc}

0000fb3e <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    fb3e:	b538      	push	{r3, r4, r5, lr}
    fb40:	4605      	mov	r5, r0
    fb42:	460c      	mov	r4, r1
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    fb44:	b2c9      	uxtb	r1, r1
    fb46:	f7ff ffdd 	bl	fb04 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    fb4a:	b900      	cbnz	r0, fb4e <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x10>
}
    fb4c:	bd38      	pop	{r3, r4, r5, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    fb4e:	0a21      	lsrs	r1, r4, #8
    fb50:	4628      	mov	r0, r5
    fb52:	f7ff ffd7 	bl	fb04 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    fb56:	e7f9      	b.n	fb4c <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0xe>

0000fb58 <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    fb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb5c:	4606      	mov	r6, r0
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    fb5e:	2500      	movs	r5, #0
    fb60:	6085      	str	r5, [r0, #8]
  m_upcaseChecksum = 0;
    fb62:	6045      	str	r5, [r0, #4]
  m_upcaseSector = sector;
    fb64:	6001      	str	r1, [r0, #0]
      ch++;
    } else {
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
      ns = n - ch;
      if (ns >= MINIMUM_UPCASE_SKIP) {
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    fb66:	f64f 77ff 	movw	r7, #65535	; 0xffff
    fb6a:	e022      	b.n	fbb2 <ExFatFormatter::writeUpcase(unsigned long)+0x5a>
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    fb6c:	1c6c      	adds	r4, r5, #1
    fb6e:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    fb72:	d208      	bcs.n	fb86 <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    fb74:	b2a0      	uxth	r0, r4
    fb76:	f005 f9c9 	bl	14f0c <toUpcase(unsigned short)>
    fb7a:	42a0      	cmp	r0, r4
    fb7c:	d103      	bne.n	fb86 <ExFatFormatter::writeUpcase(unsigned long)+0x2e>
    fb7e:	3401      	adds	r4, #1
    fb80:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    fb84:	d1f6      	bne.n	fb74 <ExFatFormatter::writeUpcase(unsigned long)+0x1c>
      ns = n - ch;
    fb86:	eba4 0805 	sub.w	r8, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    fb8a:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    fb8e:	d31d      	bcc.n	fbcc <ExFatFormatter::writeUpcase(unsigned long)+0x74>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    fb90:	4639      	mov	r1, r7
    fb92:	4630      	mov	r0, r6
    fb94:	f7ff ffd3 	bl	fb3e <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    fb98:	4603      	mov	r3, r0
    fb9a:	b308      	cbz	r0, fbe0 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    fb9c:	fa1f f188 	uxth.w	r1, r8
    fba0:	4630      	mov	r0, r6
    fba2:	f7ff ffcc 	bl	fb3e <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    fba6:	4603      	mov	r3, r0
    fba8:	b1d0      	cbz	r0, fbe0 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
    fbaa:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    fbac:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    fbb0:	d219      	bcs.n	fbe6 <ExFatFormatter::writeUpcase(unsigned long)+0x8e>
    uc = toUpcase(ch);
    fbb2:	b2a8      	uxth	r0, r5
    fbb4:	f005 f9aa 	bl	14f0c <toUpcase(unsigned short)>
    fbb8:	4601      	mov	r1, r0
    if (uc != ch) {
    fbba:	42a8      	cmp	r0, r5
    fbbc:	d0d6      	beq.n	fb6c <ExFatFormatter::writeUpcase(unsigned long)+0x14>
      if (!writeUpcaseUnicode(uc)) {
    fbbe:	4630      	mov	r0, r6
    fbc0:	f7ff ffbd 	bl	fb3e <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    fbc4:	4603      	mov	r3, r0
    fbc6:	b158      	cbz	r0, fbe0 <ExFatFormatter::writeUpcase(unsigned long)+0x88>
      ch++;
    fbc8:	3501      	adds	r5, #1
    fbca:	e7ef      	b.n	fbac <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          DBG_FAIL_MACRO;
          goto fail;
        }
        ch = n;
      } else {
        while (ch < n) {
    fbcc:	42a5      	cmp	r5, r4
    fbce:	d2ed      	bcs.n	fbac <ExFatFormatter::writeUpcase(unsigned long)+0x54>
          if (!writeUpcaseUnicode(ch++)) {
    fbd0:	b2a9      	uxth	r1, r5
    fbd2:	4630      	mov	r0, r6
    fbd4:	f7ff ffb3 	bl	fb3e <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    fbd8:	3501      	adds	r5, #1
    fbda:	4603      	mov	r3, r0
    fbdc:	2800      	cmp	r0, #0
    fbde:	d1f5      	bne.n	fbcc <ExFatFormatter::writeUpcase(unsigned long)+0x74>
  }
  return true;

 fail:
  return false;
}
    fbe0:	4618      	mov	r0, r3
    fbe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!syncUpcase()) {
    fbe6:	4630      	mov	r0, r6
    fbe8:	f7ff ff76 	bl	fad8 <ExFatFormatter::syncUpcase()>
    fbec:	4603      	mov	r3, r0
    fbee:	e7f7      	b.n	fbe0 <ExFatFormatter::writeUpcase(unsigned long)+0x88>

0000fbf0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbf4:	b08b      	sub	sp, #44	; 0x2c
    fbf6:	9002      	str	r0, [sp, #8]
    fbf8:	460e      	mov	r6, r1
    fbfa:	4614      	mov	r4, r2
    fbfc:	4699      	mov	r9, r3
  m_dev = dev;
    fbfe:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    fc00:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    fc02:	680b      	ldr	r3, [r1, #0]
    fc04:	69db      	ldr	r3, [r3, #28]
    fc06:	4608      	mov	r0, r1
    fc08:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    fc0a:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    fc0e:	d369      	bcc.n	fce4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xf4>
    fc10:	4607      	mov	r7, r0
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    fc12:	2300      	movs	r3, #0
    fc14:	2201      	movs	r2, #1
    fc16:	3301      	adds	r3, #1
    fc18:	b2db      	uxtb	r3, r3
    fc1a:	0052      	lsls	r2, r2, #1
    fc1c:	bf14      	ite	ne
    fc1e:	2501      	movne	r5, #1
    fc20:	2500      	moveq	r5, #0
    fc22:	4297      	cmp	r7, r2
    fc24:	bf94      	ite	ls
    fc26:	2500      	movls	r5, #0
    fc28:	f005 0501 	andhi.w	r5, r5, #1
    fc2c:	2d00      	cmp	r5, #0
    fc2e:	d1f2      	bne.n	fc16 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    fc30:	2b1c      	cmp	r3, #28
    fc32:	d963      	bls.n	fcfc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x10c>
    fc34:	f1b3 0b0b 	subs.w	fp, r3, #11
    fc38:	bf48      	it	mi
    fc3a:	f10b 0b01 	addmi.w	fp, fp, #1
    fc3e:	ea4f 016b 	mov.w	r1, fp, asr #1
    fc42:	9101      	str	r1, [sp, #4]
    fc44:	f3cb 0b47 	ubfx	fp, fp, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    fc48:	2201      	movs	r2, #1
    fc4a:	408a      	lsls	r2, r1
    fc4c:	9204      	str	r2, [sp, #16]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    fc4e:	3301      	adds	r3, #1
    fc50:	105b      	asrs	r3, r3, #1
    fc52:	f04f 0a01 	mov.w	sl, #1
    fc56:	fa0a fa03 	lsl.w	sl, sl, r3
  partitionOffset = 2*fatLength;
    fc5a:	ea4f 034a 	mov.w	r3, sl, lsl #1
    fc5e:	9300      	str	r3, [sp, #0]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    fc60:	ea4f 028a 	mov.w	r2, sl, lsl #2
    fc64:	9205      	str	r2, [sp, #20]
    fc66:	eba7 038a 	sub.w	r3, r7, sl, lsl #2
    fc6a:	9901      	ldr	r1, [sp, #4]
    fc6c:	fa23 f201 	lsr.w	r2, r3, r1
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    fc70:	9203      	str	r2, [sp, #12]
    fc72:	fa02 f801 	lsl.w	r8, r2, r1
    fc76:	eb08 084a 	add.w	r8, r8, sl, lsl #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    fc7a:	f44f 7200 	mov.w	r2, #512	; 0x200
    fc7e:	2100      	movs	r1, #0
    fc80:	4620      	mov	r0, r4
    fc82:	f013 f9e9 	bl	23058 <memset>
  mbr->part->beginCHS[0] = 1;
    fc86:	2301      	movs	r3, #1
    fc88:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    fc8c:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
  mbr->part->type = 7;
    fc90:	2307      	movs	r3, #7
    fc92:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    fc96:	23fe      	movs	r3, #254	; 0xfe
    fc98:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  mbr->part->endCHS[1] = 0XFF;
    fc9c:	23ff      	movs	r3, #255	; 0xff
    fc9e:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  mbr->part->endCHS[2] = 0XFF;
    fca2:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  *reinterpret_cast<uint32_t*>(dst) = src;
    fca6:	9b00      	ldr	r3, [sp, #0]
    fca8:	f8c4 31c6 	str.w	r3, [r4, #454]	; 0x1c6
    fcac:	f8c4 81ca 	str.w	r8, [r4, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
    fcb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
    fcb4:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  if (!dev->writeSector(0, secBuf)) {
    fcb8:	6833      	ldr	r3, [r6, #0]
    fcba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fcbc:	4622      	mov	r2, r4
    fcbe:	2100      	movs	r1, #0
    fcc0:	4630      	mov	r0, r6
    fcc2:	4798      	blx	r3
    fcc4:	bb70      	cbnz	r0, fd24 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x134>
  writeMsg(pr, "Format failed\r\n");
    fcc6:	f1b9 0f00 	cmp.w	r9, #0
    fcca:	d007      	beq.n	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
    fccc:	f8d9 3000 	ldr.w	r3, [r9]
    fcd0:	685b      	ldr	r3, [r3, #4]
    fcd2:	220f      	movs	r2, #15
    fcd4:	49af      	ldr	r1, [pc, #700]	; (ff94 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a4>)
    fcd6:	4648      	mov	r0, r9
    fcd8:	4798      	blx	r3
  return false;
    fcda:	2500      	movs	r5, #0
}
    fcdc:	4628      	mov	r0, r5
    fcde:	b00b      	add	sp, #44	; 0x2c
    fce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    writeMsg(pr, "Device is too small\r\n");
    fce4:	f1b9 0f00 	cmp.w	r9, #0
    fce8:	f000 8207 	beq.w	100fa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50a>
    fcec:	f8d9 3000 	ldr.w	r3, [r9]
    fcf0:	685b      	ldr	r3, [r3, #4]
    fcf2:	2215      	movs	r2, #21
    fcf4:	49a8      	ldr	r1, [pc, #672]	; (ff98 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3a8>)
    fcf6:	4648      	mov	r0, r9
    fcf8:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    fcfa:	e7e7      	b.n	fccc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    fcfc:	2b1a      	cmp	r3, #26
    fcfe:	d809      	bhi.n	fd14 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x124>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    fd00:	f44f 7380 	mov.w	r3, #256	; 0x100
    fd04:	9304      	str	r3, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    fd06:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    fd0a:	f8cd b004 	str.w	fp, [sp, #4]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    fd0e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    fd12:	e7a2      	b.n	fc5a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    fd14:	f44f 7280 	mov.w	r2, #256	; 0x100
    fd18:	9204      	str	r2, [sp, #16]
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    fd1a:	f04f 0b08 	mov.w	fp, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    fd1e:	f8cd b004 	str.w	fp, [sp, #4]
    fd22:	e794      	b.n	fc4e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    fd24:	f44f 7200 	mov.w	r2, #512	; 0x200
    fd28:	2100      	movs	r1, #0
    fd2a:	4620      	mov	r0, r4
    fd2c:	f013 f994 	bl	23058 <memset>
  pbs->jmpInstruction[0] = 0XEB;
    fd30:	23eb      	movs	r3, #235	; 0xeb
    fd32:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    fd34:	2376      	movs	r3, #118	; 0x76
    fd36:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    fd38:	2390      	movs	r3, #144	; 0x90
    fd3a:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    fd3c:	2345      	movs	r3, #69	; 0x45
    fd3e:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    fd40:	2358      	movs	r3, #88	; 0x58
    fd42:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    fd44:	2346      	movs	r3, #70	; 0x46
    fd46:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    fd48:	2341      	movs	r3, #65	; 0x41
    fd4a:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    fd4c:	2354      	movs	r3, #84	; 0x54
    fd4e:	71e3      	strb	r3, [r4, #7]
  pbs->oemName[5] = ' ';
    fd50:	2320      	movs	r3, #32
    fd52:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    fd54:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    fd56:	72a3      	strb	r3, [r4, #10]
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    fd58:	9b00      	ldr	r3, [sp, #0]
    fd5a:	6423      	str	r3, [r4, #64]	; 0x40
  setLe64(pbs->bpb.volumeLength, volumeLength);
    fd5c:	f8c4 8048 	str.w	r8, [r4, #72]	; 0x48
  *reinterpret_cast<uint32_t*>(dst) = src;
    fd60:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
    fd64:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
    fd68:	65a3      	str	r3, [r4, #88]	; 0x58
    fd6a:	9a03      	ldr	r2, [sp, #12]
    fd6c:	65e2      	str	r2, [r4, #92]	; 0x5c
    fd6e:	2304      	movs	r3, #4
    fd70:	6623      	str	r3, [r4, #96]	; 0x60
    fd72:	6667      	str	r7, [r4, #100]	; 0x64
  *reinterpret_cast<uint16_t*>(dst) = src;
    fd74:	f44f 7380 	mov.w	r3, #256	; 0x100
    fd78:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    fd7c:	2309      	movs	r3, #9
    fd7e:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    fd82:	f884 b06d 	strb.w	fp, [r4, #109]	; 0x6d
  pbs->bpb.numberOfFats = 1;
    fd86:	2301      	movs	r3, #1
    fd88:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
  pbs->bpb.driveSelect = 0X80;
    fd8c:	2380      	movs	r3, #128	; 0x80
    fd8e:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    fd92:	f104 0377 	add.w	r3, r4, #119	; 0x77
    fd96:	9407      	str	r4, [sp, #28]
    fd98:	f204 11fd 	addw	r1, r4, #509	; 0x1fd
    pbs->bootCode[i] = 0XF4;
    fd9c:	22f4      	movs	r2, #244	; 0xf4
    fd9e:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bootCode); i++) {
    fda2:	428b      	cmp	r3, r1
    fda4:	d1fb      	bne.n	fd9e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ae>
    fda6:	f64a 2355 	movw	r3, #43605	; 0xaa55
    fdaa:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    fdae:	2300      	movs	r3, #0
  uint32_t checksum = 0;
    fdb0:	461f      	mov	r7, r3
    fdb2:	e003      	b.n	fdbc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1cc>
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    fdb4:	3301      	adds	r3, #1
    fdb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    fdba:	d009      	beq.n	fdd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e0>
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    fdbc:	f1a3 026a 	sub.w	r2, r3, #106	; 0x6a
    fdc0:	2a01      	cmp	r2, #1
    fdc2:	d9f7      	bls.n	fdb4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
    fdc4:	2b70      	cmp	r3, #112	; 0x70
    fdc6:	d0f5      	beq.n	fdb4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  return (sum << 31) + (sum >> 1) + data;
    fdc8:	5ce2      	ldrb	r2, [r4, r3]
    fdca:	eb02 0777 	add.w	r7, r2, r7, ror #1
    fdce:	e7f1      	b.n	fdb4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1c4>
  if (!dev->writeSector(sector, secBuf)  ||
    fdd0:	6833      	ldr	r3, [r6, #0]
    fdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdd4:	4622      	mov	r2, r4
    fdd6:	f8dd 8000 	ldr.w	r8, [sp]
    fdda:	4641      	mov	r1, r8
    fddc:	4630      	mov	r0, r6
    fdde:	4798      	blx	r3
    fde0:	2800      	cmp	r0, #0
    fde2:	f43f af70 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    fde6:	6833      	ldr	r3, [r6, #0]
    fde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fdea:	4622      	mov	r2, r4
    fdec:	f8cd 8000 	str.w	r8, [sp]
    fdf0:	4641      	mov	r1, r8
    fdf2:	310c      	adds	r1, #12
    fdf4:	4630      	mov	r0, r6
    fdf6:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    fdf8:	2800      	cmp	r0, #0
    fdfa:	f43f af64 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  sector++;
    fdfe:	9900      	ldr	r1, [sp, #0]
    fe00:	f101 0b01 	add.w	fp, r1, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    fe04:	f44f 7200 	mov.w	r2, #512	; 0x200
    fe08:	2100      	movs	r1, #0
    fe0a:	4620      	mov	r0, r4
    fe0c:	f013 f924 	bl	23058 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    fe10:	f64a 2355 	movw	r3, #43605	; 0xaa55
    fe14:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  for (int j = 0; j < 8; j++) {
    fe18:	9900      	ldr	r1, [sp, #0]
    fe1a:	f101 0309 	add.w	r3, r1, #9
    fe1e:	1e62      	subs	r2, r4, #1
    fe20:	9206      	str	r2, [sp, #24]
    fe22:	9a07      	ldr	r2, [sp, #28]
    fe24:	f202 18ff 	addw	r8, r2, #511	; 0x1ff
    fe28:	9508      	str	r5, [sp, #32]
    fe2a:	461d      	mov	r5, r3
  uint32_t checksum = 0;
    fe2c:	9b06      	ldr	r3, [sp, #24]
  return (sum << 31) + (sum >> 1) + data;
    fe2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fe32:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    fe36:	4543      	cmp	r3, r8
    fe38:	d1f9      	bne.n	fe2e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23e>
    if (!dev->writeSector(sector, secBuf)  ||
    fe3a:	6833      	ldr	r3, [r6, #0]
    fe3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe3e:	4622      	mov	r2, r4
    fe40:	4659      	mov	r1, fp
    fe42:	4630      	mov	r0, r6
    fe44:	4798      	blx	r3
    fe46:	2800      	cmp	r0, #0
    fe48:	f000 814f 	beq.w	100ea <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fa>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    fe4c:	6833      	ldr	r3, [r6, #0]
    fe4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe50:	4622      	mov	r2, r4
    fe52:	f10b 010c 	add.w	r1, fp, #12
    fe56:	4630      	mov	r0, r6
    fe58:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    fe5a:	2800      	cmp	r0, #0
    fe5c:	f000 8147 	beq.w	100ee <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4fe>
    sector++;
    fe60:	f10b 0301 	add.w	r3, fp, #1
  for (int j = 0; j < 8; j++) {
    fe64:	42ab      	cmp	r3, r5
    fe66:	d001      	beq.n	fe6c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x27c>
    sector++;
    fe68:	469b      	mov	fp, r3
    fe6a:	e7df      	b.n	fe2c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x23c>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    fe6c:	9309      	str	r3, [sp, #36]	; 0x24
    fe6e:	9d08      	ldr	r5, [sp, #32]
    fe70:	f44f 7200 	mov.w	r2, #512	; 0x200
    fe74:	2100      	movs	r1, #0
    fe76:	4620      	mov	r0, r4
    fe78:	f013 f8ee 	bl	23058 <memset>
  for (int j = 0; j < 2; j++) {
    fe7c:	f10b 0b03 	add.w	fp, fp, #3
    fe80:	9508      	str	r5, [sp, #32]
    fe82:	9d09      	ldr	r5, [sp, #36]	; 0x24
    sector++;
    fe84:	9b06      	ldr	r3, [sp, #24]
    fe86:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    fe8a:	eb02 0777 	add.w	r7, r2, r7, ror #1
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    fe8e:	4598      	cmp	r8, r3
    fe90:	d1f9      	bne.n	fe86 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x296>
    if (!dev->writeSector(sector, secBuf)  ||
    fe92:	6833      	ldr	r3, [r6, #0]
    fe94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe96:	4622      	mov	r2, r4
    fe98:	4629      	mov	r1, r5
    fe9a:	4630      	mov	r0, r6
    fe9c:	4798      	blx	r3
    fe9e:	2800      	cmp	r0, #0
    fea0:	f000 8127 	beq.w	100f2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    fea4:	6833      	ldr	r3, [r6, #0]
    fea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fea8:	4622      	mov	r2, r4
    feaa:	f105 010c 	add.w	r1, r5, #12
    feae:	4630      	mov	r0, r6
    feb0:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    feb2:	2800      	cmp	r0, #0
    feb4:	f000 811f 	beq.w	100f6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x506>
    sector++;
    feb8:	1c69      	adds	r1, r5, #1
  for (int j = 0; j < 2; j++) {
    feba:	458b      	cmp	fp, r1
    febc:	d001      	beq.n	fec2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d2>
    sector++;
    febe:	460d      	mov	r5, r1
    fec0:	e7e0      	b.n	fe84 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x294>
    fec2:	9509      	str	r5, [sp, #36]	; 0x24
    fec4:	9d08      	ldr	r5, [sp, #32]
    fec6:	1f23      	subs	r3, r4, #4
    fec8:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    fecc:	f843 7f04 	str.w	r7, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    fed0:	429a      	cmp	r2, r3
    fed2:	d1fb      	bne.n	fecc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2dc>
  if (!dev->writeSector(sector, secBuf)  ||
    fed4:	6833      	ldr	r3, [r6, #0]
    fed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fed8:	4622      	mov	r2, r4
    feda:	4630      	mov	r0, r6
    fedc:	4798      	blx	r3
    fede:	2800      	cmp	r0, #0
    fee0:	f43f aef1 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    fee4:	6833      	ldr	r3, [r6, #0]
    fee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fee8:	4622      	mov	r2, r4
    feea:	9909      	ldr	r1, [sp, #36]	; 0x24
    feec:	310d      	adds	r1, #13
    feee:	4630      	mov	r0, r6
    fef0:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    fef2:	2800      	cmp	r0, #0
    fef4:	f43f aee7 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  writeMsg(pr, "Writing FAT ");
    fef8:	f1b9 0f00 	cmp.w	r9, #0
    fefc:	d006      	beq.n	ff0c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x31c>
    fefe:	f8d9 3000 	ldr.w	r3, [r9]
    ff02:	685b      	ldr	r3, [r3, #4]
    ff04:	220c      	movs	r2, #12
    ff06:	4925      	ldr	r1, [pc, #148]	; (ff9c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ac>)
    ff08:	4648      	mov	r0, r9
    ff0a:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    ff0c:	9b00      	ldr	r3, [sp, #0]
    ff0e:	4453      	add	r3, sl
    ff10:	469b      	mov	fp, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ff12:	9b03      	ldr	r3, [sp, #12]
    ff14:	ea4f 0883 	mov.w	r8, r3, lsl #2
    ff18:	f208 2807 	addw	r8, r8, #519	; 0x207
    ff1c:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ff20:	f44f 7200 	mov.w	r2, #512	; 0x200
    ff24:	2100      	movs	r1, #0
    ff26:	4620      	mov	r0, r4
    ff28:	f013 f896 	bl	23058 <memset>
  secBuf[0] = 0XF8;
    ff2c:	4623      	mov	r3, r4
    ff2e:	22f8      	movs	r2, #248	; 0xf8
    ff30:	f803 2b13 	strb.w	r2, [r3], #19
    secBuf[i] = 0XFF;
    ff34:	22ff      	movs	r2, #255	; 0xff
    ff36:	9907      	ldr	r1, [sp, #28]
    ff38:	f801 2f01 	strb.w	r2, [r1, #1]!
  for (size_t i = 1; i < 20; i++) {
    ff3c:	428b      	cmp	r3, r1
    ff3e:	d1fb      	bne.n	ff38 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    if (i%(ns/32) == 0) {
    ff40:	ea4f 3898 	mov.w	r8, r8, lsr #14
  for (uint32_t i = 0; i < ns; i++) {
    ff44:	2700      	movs	r7, #0
    ff46:	e00d      	b.n	ff64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (!dev->writeSector(sector + i, secBuf)) {
    ff48:	6833      	ldr	r3, [r6, #0]
    ff4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ff4c:	4622      	mov	r2, r4
    ff4e:	eb0b 0107 	add.w	r1, fp, r7
    ff52:	4630      	mov	r0, r6
    ff54:	4798      	blx	r3
    ff56:	2800      	cmp	r0, #0
    ff58:	f43f aeb5 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
    ff5c:	b19f      	cbz	r7, ff86 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x396>
  for (uint32_t i = 0; i < ns; i++) {
    ff5e:	3701      	adds	r7, #1
    ff60:	45ba      	cmp	sl, r7
    ff62:	d91f      	bls.n	ffa4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
    if (i%(ns/32) == 0) {
    ff64:	fbb7 f3f8 	udiv	r3, r7, r8
    ff68:	fb08 7313 	mls	r3, r8, r3, r7
      writeMsg(pr, ".");
    ff6c:	2b00      	cmp	r3, #0
    ff6e:	d1eb      	bne.n	ff48 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    ff70:	f1b9 0f00 	cmp.w	r9, #0
    ff74:	d0e8      	beq.n	ff48 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
    ff76:	f8d9 3000 	ldr.w	r3, [r9]
    ff7a:	685b      	ldr	r3, [r3, #4]
    ff7c:	2201      	movs	r2, #1
    ff7e:	4908      	ldr	r1, [pc, #32]	; (ffa0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b0>)
    ff80:	4648      	mov	r0, r9
    ff82:	4798      	blx	r3
    ff84:	e7e0      	b.n	ff48 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x358>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    ff86:	f44f 7200 	mov.w	r2, #512	; 0x200
    ff8a:	2100      	movs	r1, #0
    ff8c:	4620      	mov	r0, r4
    ff8e:	f013 f863 	bl	23058 <memset>
    ff92:	e7e4      	b.n	ff5e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    ff94:	200021f0 	.word	0x200021f0
    ff98:	20002190 	.word	0x20002190
    ff9c:	200021a8 	.word	0x200021a8
    ffa0:	20004a84 	.word	0x20004a84
  writeMsg(pr, "\r\n");
    ffa4:	f1b9 0f00 	cmp.w	r9, #0
    ffa8:	f000 80ad 	beq.w	10106 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x516>
    ffac:	f8d9 3000 	ldr.w	r3, [r9]
    ffb0:	685b      	ldr	r3, [r3, #4]
    ffb2:	2202      	movs	r2, #2
    ffb4:	4969      	ldr	r1, [pc, #420]	; (1015c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x56c>)
    ffb6:	4648      	mov	r0, r9
    ffb8:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    ffba:	9f03      	ldr	r7, [sp, #12]
    ffbc:	3707      	adds	r7, #7
    ffbe:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ffc0:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
    ffc4:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
    ffc8:	9b04      	ldr	r3, [sp, #16]
    ffca:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
    ffce:	f4ff ae7d 	bcc.w	fccc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ffd2:	f44f 7200 	mov.w	r2, #512	; 0x200
    ffd6:	2100      	movs	r1, #0
    ffd8:	4620      	mov	r0, r4
    ffda:	f013 f83d 	bl	23058 <memset>
  secBuf[0] = 0X7;
    ffde:	2307      	movs	r3, #7
    ffe0:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    ffe2:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    ffe6:	d31b      	bcc.n	10020 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x430>
    ffe8:	f04f 0800 	mov.w	r8, #0
      secBuf[0] = 0;
    ffec:	46c3      	mov	fp, r8
    ffee:	e005      	b.n	fffc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x40c>
    fff0:	f884 b000 	strb.w	fp, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    fff4:	f108 0801 	add.w	r8, r8, #1
    fff8:	45c2      	cmp	sl, r8
    fffa:	d00d      	beq.n	10018 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x428>
    if (!dev->writeSector(sector + i, secBuf)) {
    fffc:	6833      	ldr	r3, [r6, #0]
    fffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10000:	4622      	mov	r2, r4
   10002:	9905      	ldr	r1, [sp, #20]
   10004:	4441      	add	r1, r8
   10006:	4630      	mov	r0, r6
   10008:	4798      	blx	r3
   1000a:	2800      	cmp	r0, #0
   1000c:	f43f ae5b 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
   10010:	f1b8 0f00 	cmp.w	r8, #0
   10014:	d1ee      	bne.n	fff4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x404>
   10016:	e7eb      	b.n	fff0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x400>
  writeMsg(pr, "Writing upcase table\r\n");
   10018:	f1b9 0f00 	cmp.w	r9, #0
   1001c:	f000 808b 	beq.w	10136 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x546>
   10020:	f8d9 3000 	ldr.w	r3, [r9]
   10024:	685b      	ldr	r3, [r3, #4]
   10026:	2216      	movs	r2, #22
   10028:	494d      	ldr	r1, [pc, #308]	; (10160 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x570>)
   1002a:	4648      	mov	r0, r9
   1002c:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
   1002e:	9b05      	ldr	r3, [sp, #20]
   10030:	9a04      	ldr	r2, [sp, #16]
   10032:	1899      	adds	r1, r3, r2
   10034:	9802      	ldr	r0, [sp, #8]
   10036:	f7ff fd8f 	bl	fb58 <ExFatFormatter::writeUpcase(unsigned long)>
   1003a:	2800      	cmp	r0, #0
   1003c:	f43f ae46 	beq.w	fccc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
   10040:	f44f 7300 	mov.w	r3, #512	; 0x200
   10044:	9a01      	ldr	r2, [sp, #4]
   10046:	4093      	lsls	r3, r2
   10048:	9a02      	ldr	r2, [sp, #8]
   1004a:	6892      	ldr	r2, [r2, #8]
   1004c:	429a      	cmp	r2, r3
   1004e:	f63f ae3d 	bhi.w	fccc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xdc>
  writeMsg(pr, "Writing root\r\n");
   10052:	f1b9 0f00 	cmp.w	r9, #0
   10056:	d003      	beq.n	10060 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x470>
   10058:	4942      	ldr	r1, [pc, #264]	; (10164 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x574>)
   1005a:	4648      	mov	r0, r9
   1005c:	f7ff fd2c 	bl	fab8 <Print::write(char const*)>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
   10060:	f04f 0a02 	mov.w	sl, #2
   10064:	9b01      	ldr	r3, [sp, #4]
   10066:	fa0a f803 	lsl.w	r8, sl, r3
   1006a:	9b05      	ldr	r3, [sp, #20]
   1006c:	4498      	add	r8, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
   1006e:	f44f 7200 	mov.w	r2, #512	; 0x200
   10072:	2100      	movs	r1, #0
   10074:	4620      	mov	r0, r4
   10076:	f012 ffef 	bl	23058 <memset>
  label->type = EXFAT_TYPE_LABEL & 0X7F;
   1007a:	2203      	movs	r2, #3
   1007c:	7022      	strb	r2, [r4, #0]
  dbm->type = EXFAT_TYPE_BITMAP;
   1007e:	2381      	movs	r3, #129	; 0x81
   10080:	f884 3020 	strb.w	r3, [r4, #32]
   10084:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
  setLe64(dbm->size, bitmapSize);
   10088:	2300      	movs	r3, #0
   1008a:	63a7      	str	r7, [r4, #56]	; 0x38
  dup->type = EXFAT_TYPE_UPCASE;
   1008c:	2182      	movs	r1, #130	; 0x82
   1008e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  setLe32(dup->checksum, m_upcaseChecksum);
   10092:	9802      	ldr	r0, [sp, #8]
   10094:	6841      	ldr	r1, [r0, #4]
   10096:	6461      	str	r1, [r4, #68]	; 0x44
   10098:	6562      	str	r2, [r4, #84]	; 0x54
  setLe64(dup->size, m_upcaseSize);
   1009a:	6882      	ldr	r2, [r0, #8]
   1009c:	65a2      	str	r2, [r4, #88]	; 0x58
   1009e:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
   100a0:	461f      	mov	r7, r3
      memset(secBuf, 0, BYTES_PER_SECTOR);
   100a2:	f44f 7a00 	mov.w	sl, #512	; 0x200
   100a6:	469b      	mov	fp, r3
   100a8:	e005      	b.n	100b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
   100aa:	4652      	mov	r2, sl
   100ac:	4659      	mov	r1, fp
   100ae:	4620      	mov	r0, r4
   100b0:	f012 ffd2 	bl	23058 <memset>
  for (uint32_t i = 0; i < ns; i++) {
   100b4:	3701      	adds	r7, #1
    if (!dev->writeSector(sector + i, secBuf)) {
   100b6:	6833      	ldr	r3, [r6, #0]
   100b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   100ba:	4622      	mov	r2, r4
   100bc:	eb08 0107 	add.w	r1, r8, r7
   100c0:	4630      	mov	r0, r6
   100c2:	4798      	blx	r3
   100c4:	9000      	str	r0, [sp, #0]
   100c6:	2800      	cmp	r0, #0
   100c8:	f43f adfd 	beq.w	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
    if (i == 0) {
   100cc:	2f00      	cmp	r7, #0
   100ce:	d0ec      	beq.n	100aa <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4ba>
  for (uint32_t i = 0; i < ns; i++) {
   100d0:	3701      	adds	r7, #1
   100d2:	9b04      	ldr	r3, [sp, #16]
   100d4:	42bb      	cmp	r3, r7
   100d6:	d1ee      	bne.n	100b6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c6>
  writeMsg(pr, "Format done\r\n");
   100d8:	f1b9 0f00 	cmp.w	r9, #0
   100dc:	d00f      	beq.n	100fe <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
   100de:	4922      	ldr	r1, [pc, #136]	; (10168 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x578>)
   100e0:	4648      	mov	r0, r9
   100e2:	f7ff fce9 	bl	fab8 <Print::write(char const*)>
  return true;
   100e6:	9d00      	ldr	r5, [sp, #0]
   100e8:	e5f8      	b.n	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
   100ea:	9d08      	ldr	r5, [sp, #32]
   100ec:	e5eb      	b.n	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
   100ee:	9d08      	ldr	r5, [sp, #32]
   100f0:	e5e9      	b.n	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
   100f2:	9d08      	ldr	r5, [sp, #32]
   100f4:	e5e7      	b.n	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
   100f6:	9d08      	ldr	r5, [sp, #32]
   100f8:	e5e5      	b.n	fcc6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd6>
  return false;
   100fa:	2500      	movs	r5, #0
   100fc:	e5ee      	b.n	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return true;
   100fe:	9d00      	ldr	r5, [sp, #0]
   10100:	e5ec      	b.n	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  return false;
   10102:	4605      	mov	r5, r0
   10104:	e5ea      	b.n	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  bitmapSize = (clusterCount + 7)/8;
   10106:	9f03      	ldr	r7, [sp, #12]
   10108:	3707      	adds	r7, #7
   1010a:	08ff      	lsrs	r7, r7, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
   1010c:	f207 18ff 	addw	r8, r7, #511	; 0x1ff
   10110:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  if (ns > sectorsPerCluster) {
   10114:	9b04      	ldr	r3, [sp, #16]
   10116:	ebb3 2f58 	cmp.w	r3, r8, lsr #9
   1011a:	f4ff addf 	bcc.w	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
  memset(secBuf, 0, BYTES_PER_SECTOR);
   1011e:	f44f 7200 	mov.w	r2, #512	; 0x200
   10122:	2100      	movs	r1, #0
   10124:	4620      	mov	r0, r4
   10126:	f012 ff97 	bl	23058 <memset>
  secBuf[0] = 0X7;
   1012a:	2307      	movs	r3, #7
   1012c:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
   1012e:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   10132:	f4bf af59 	bcs.w	ffe8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3f8>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
   10136:	9b05      	ldr	r3, [sp, #20]
   10138:	9a04      	ldr	r2, [sp, #16]
   1013a:	1899      	adds	r1, r3, r2
   1013c:	9802      	ldr	r0, [sp, #8]
   1013e:	f7ff fd0b 	bl	fb58 <ExFatFormatter::writeUpcase(unsigned long)>
   10142:	2800      	cmp	r0, #0
   10144:	d0dd      	beq.n	10102 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x512>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
   10146:	f44f 7300 	mov.w	r3, #512	; 0x200
   1014a:	9a01      	ldr	r2, [sp, #4]
   1014c:	4093      	lsls	r3, r2
   1014e:	9a02      	ldr	r2, [sp, #8]
   10150:	6892      	ldr	r2, [r2, #8]
   10152:	429a      	cmp	r2, r3
   10154:	f67f af7d 	bls.w	10052 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x462>
   10158:	e5c0      	b.n	fcdc <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xec>
   1015a:	bf00      	nop
   1015c:	200021cc 	.word	0x200021cc
   10160:	200021b8 	.word	0x200021b8
   10164:	200021d0 	.word	0x200021d0
   10168:	200021e0 	.word	0x200021e0

0001016c <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
   1016c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10170:	4614      	mov	r4, r2
  for (uint8_t i = 0; i < 15; i++) {
   10172:	460e      	mov	r6, r1
   10174:	f101 081e 	add.w	r8, r1, #30
   10178:	e00c      	b.n	10194 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x28>
    uint16_t cp = fname->get16();
   1017a:	4620      	mov	r0, r4
   1017c:	f004 fda8 	bl	14cd0 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
   10180:	f004 fec4 	bl	14f0c <toUpcase(unsigned short)>
   10184:	4605      	mov	r5, r0
   10186:	4638      	mov	r0, r7
   10188:	f004 fec0 	bl	14f0c <toUpcase(unsigned short)>
   1018c:	4285      	cmp	r5, r0
   1018e:	d111      	bne.n	101b4 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x48>
  for (uint8_t i = 0; i < 15; i++) {
   10190:	4546      	cmp	r6, r8
   10192:	d00d      	beq.n	101b0 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x44>
  return *reinterpret_cast<const uint16_t*>(src);
   10194:	f836 7f02 	ldrh.w	r7, [r6, #2]!
    return !ls && next == end;
   10198:	89a3      	ldrh	r3, [r4, #12]
   1019a:	2b00      	cmp	r3, #0
   1019c:	d1ed      	bne.n	1017a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
   1019e:	6862      	ldr	r2, [r4, #4]
   101a0:	68a3      	ldr	r3, [r4, #8]
   101a2:	429a      	cmp	r2, r3
   101a4:	d1e9      	bne.n	1017a <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xe>
      return u == 0;
   101a6:	fab7 f087 	clz	r0, r7
   101aa:	0940      	lsrs	r0, r0, #5
}
   101ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
   101b0:	2001      	movs	r0, #1
   101b2:	e7fb      	b.n	101ac <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>
       return false;
   101b4:	2000      	movs	r0, #0
   101b6:	e7f9      	b.n	101ac <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x40>

000101b8 <ExFatFile::getName8(char*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
   101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   101bc:	b083      	sub	sp, #12
   101be:	468a      	mov	sl, r1
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
   101c0:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
   101c4:	2b00      	cmp	r3, #0
   101c6:	d03e      	beq.n	10246 <ExFatFile::getName8(char*, unsigned int)+0x8e>
   101c8:	4681      	mov	r9, r0
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
   101ca:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   101ce:	2b01      	cmp	r3, #1
   101d0:	d94b      	bls.n	1026a <ExFatFile::getName8(char*, unsigned int)+0xb2>
  char* str = name;
   101d2:	460e      	mov	r6, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
   101d4:	2302      	movs	r3, #2
   101d6:	9301      	str	r3, [sp, #4]
  uint16_t hs = 0;
   101d8:	2400      	movs	r4, #0
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   101da:	3a01      	subs	r2, #1
   101dc:	188f      	adds	r7, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
   101de:	f8df b098 	ldr.w	fp, [pc, #152]	; 10278 <ExFatFile::getName8(char*, unsigned int)+0xc0>
         (dirCache(is, FsCache::CACHE_FOR_READ));
   101e2:	2200      	movs	r2, #0
   101e4:	9901      	ldr	r1, [sp, #4]
   101e6:	4648      	mov	r0, r9
   101e8:	f7fe fa8a 	bl	e700 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
   101ec:	b358      	cbz	r0, 10246 <ExFatFile::getName8(char*, unsigned int)+0x8e>
   101ee:	7803      	ldrb	r3, [r0, #0]
   101f0:	2bc1      	cmp	r3, #193	; 0xc1
   101f2:	d128      	bne.n	10246 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    for (uint8_t in = 0; in < 15; in++) {
   101f4:	4605      	mov	r5, r0
   101f6:	f100 081e 	add.w	r8, r0, #30
   101fa:	e00f      	b.n	1021c <ExFatFile::getName8(char*, unsigned int)+0x64>
    return 0XD800 <= c && c <= 0XDFFF;
   101fc:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   10200:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
   10202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   10206:	d31b      	bcc.n	10240 <ExFatFile::getName8(char*, unsigned int)+0x88>
        if (c == 0) {
   10208:	b380      	cbz	r0, 1026c <ExFatFile::getName8(char*, unsigned int)+0xb4>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   1020a:	463a      	mov	r2, r7
   1020c:	4631      	mov	r1, r6
   1020e:	f004 fdda 	bl	14dc6 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
   10212:	4606      	mov	r6, r0
   10214:	b1b8      	cbz	r0, 10246 <ExFatFile::getName8(char*, unsigned int)+0x8e>
   10216:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
   10218:	45a8      	cmp	r8, r5
   1021a:	d01c      	beq.n	10256 <ExFatFile::getName8(char*, unsigned int)+0x9e>
   1021c:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
   10220:	2c00      	cmp	r4, #0
   10222:	d0eb      	beq.n	101fc <ExFatFile::getName8(char*, unsigned int)+0x44>
    return 0XDC00 <= c && c <= 0XDFFF;
   10224:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
   10228:	b29b      	uxth	r3, r3
   1022a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1022e:	d20a      	bcs.n	10246 <ExFatFile::getName8(char*, unsigned int)+0x8e>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
   10230:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
   10234:	f3c0 0009 	ubfx	r0, r0, #0, #10
   10238:	4304      	orrs	r4, r0
   1023a:	f504 3080 	add.w	r0, r4, #65536	; 0x10000
        hs = 0;
   1023e:	e7e4      	b.n	1020a <ExFatFile::getName8(char*, unsigned int)+0x52>
      } else if (FsUtf::isHighSurrogate(c)) {
   10240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   10244:	d305      	bcc.n	10252 <ExFatFile::getName8(char*, unsigned int)+0x9a>
 done:
  *str = '\0';
  return str - name;

 fail:
  *name = 0;
   10246:	2000      	movs	r0, #0
   10248:	f88a 0000 	strb.w	r0, [sl]
  return 0;
}
   1024c:	b003      	add	sp, #12
   1024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
   10252:	4604      	mov	r4, r0
   10254:	e7e0      	b.n	10218 <ExFatFile::getName8(char*, unsigned int)+0x60>
  for (uint8_t is = 2; is <= m_setCount; is++) {
   10256:	9b01      	ldr	r3, [sp, #4]
   10258:	3301      	adds	r3, #1
   1025a:	b2db      	uxtb	r3, r3
   1025c:	461a      	mov	r2, r3
   1025e:	9301      	str	r3, [sp, #4]
   10260:	f899 3030 	ldrb.w	r3, [r9, #48]	; 0x30
   10264:	4293      	cmp	r3, r2
   10266:	d2bc      	bcs.n	101e2 <ExFatFile::getName8(char*, unsigned int)+0x2a>
   10268:	e000      	b.n	1026c <ExFatFile::getName8(char*, unsigned int)+0xb4>
  char* str = name;
   1026a:	460e      	mov	r6, r1
  *str = '\0';
   1026c:	2300      	movs	r3, #0
   1026e:	7033      	strb	r3, [r6, #0]
  return str - name;
   10270:	eba6 000a 	sub.w	r0, r6, sl
   10274:	e7ea      	b.n	1024c <ExFatFile::getName8(char*, unsigned int)+0x94>
   10276:	bf00      	nop
   10278:	000ffc00 	.word	0x000ffc00

0001027c <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
   1027c:	b570      	push	{r4, r5, r6, lr}
   1027e:	460c      	mov	r4, r1
    next = begin;
   10280:	680b      	ldr	r3, [r1, #0]
   10282:	604b      	str	r3, [r1, #4]
    ls = 0;  // lowSurrogate
   10284:	2600      	movs	r6, #0
   10286:	818e      	strh	r6, [r1, #12]
  uint16_t hash = 0;
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
   10288:	4630      	mov	r0, r6
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
   1028a:	f64f 75ff 	movw	r5, #65535	; 0xffff
  while (!fname->atEnd()) {
   1028e:	e016      	b.n	102be <ExFatFile::hashName(ExName_t*)+0x42>
    uint16_t u = fname->get16();
   10290:	4620      	mov	r0, r4
   10292:	f004 fd1d 	bl	14cd0 <FsName::get16()>
    if (u == 0XFFFF) {
   10296:	42a8      	cmp	r0, r5
   10298:	d020      	beq.n	102dc <ExFatFile::hashName(ExName_t*)+0x60>
  uint16_t c = toUpcase(u);
   1029a:	f004 fe37 	bl	14f0c <toUpcase(unsigned short)>
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
   1029e:	03f3      	lsls	r3, r6, #15
   102a0:	ea43 0356 	orr.w	r3, r3, r6, lsr #1
   102a4:	fa53 f380 	uxtab	r3, r3, r0
   102a8:	b29a      	uxth	r2, r3
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
   102aa:	f3c3 034e 	ubfx	r3, r3, #1, #15
   102ae:	ea43 33c2 	orr.w	r3, r3, r2, lsl #15
   102b2:	0a00      	lsrs	r0, r0, #8
   102b4:	fa10 f383 	uxtah	r3, r0, r3
   102b8:	b29e      	uxth	r6, r3
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
   102ba:	6920      	ldr	r0, [r4, #16]
   102bc:	3001      	adds	r0, #1
  fname->nameLength = 0;
   102be:	6120      	str	r0, [r4, #16]
    return !ls && next == end;
   102c0:	89a3      	ldrh	r3, [r4, #12]
   102c2:	2b00      	cmp	r3, #0
   102c4:	d1e4      	bne.n	10290 <ExFatFile::hashName(ExName_t*)+0x14>
   102c6:	6862      	ldr	r2, [r4, #4]
   102c8:	68a3      	ldr	r3, [r4, #8]
   102ca:	429a      	cmp	r2, r3
   102cc:	d1e0      	bne.n	10290 <ExFatFile::hashName(ExName_t*)+0x14>
    char c = fname->getch();
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
   102ce:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
   102d0:	3801      	subs	r0, #1
   102d2:	28fe      	cmp	r0, #254	; 0xfe
   102d4:	bf8c      	ite	hi
   102d6:	2000      	movhi	r0, #0
   102d8:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
   102da:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   102dc:	2000      	movs	r0, #0
   102de:	e7fc      	b.n	102da <ExFatFile::hashName(ExName_t*)+0x5e>

000102e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
   102e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e4:	b083      	sub	sp, #12
   102e6:	4607      	mov	r7, r0
   102e8:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
   102ea:	9101      	str	r1, [sp, #4]
   102ec:	b1e9      	cbz	r1, 1032a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4a>
   102ee:	1e8e      	subs	r6, r1, #2
  if (start >= m_clusterCount) {
   102f0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    start = 0;
   102f4:	42b3      	cmp	r3, r6
   102f6:	bf98      	it	ls
   102f8:	2600      	movls	r6, #0
  size_t i = (start >> 3) & (sectorSize - 1);
   102fa:	f3c6 0ac8 	ubfx	sl, r6, #3, #9
  uint8_t mask = 1 << (start & 7);
   102fe:	f006 0307 	and.w	r3, r6, #7
   10302:	2401      	movs	r4, #1
   10304:	409c      	lsls	r4, r3
   10306:	b2e4      	uxtb	r4, r4
  uint32_t bgnAlloc = start;
   10308:	46b0      	mov	r8, r6
  uint32_t endAlloc = start;
   1030a:	4635      	mov	r5, r6
    return m_bitmapCache.prepare(sector, option);
   1030c:	f04f 0b00 	mov.w	fp, #0
    uint32_t sector = m_clusterHeapStartSector +
   10310:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
   10314:	465a      	mov	r2, fp
   10316:	eb01 3115 	add.w	r1, r1, r5, lsr #12
   1031a:	4638      	mov	r0, r7
   1031c:	f004 fc99 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
   10320:	b388      	cbz	r0, 10386 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa6>
   10322:	4482      	add	sl, r0
   10324:	f500 7100 	add.w	r1, r0, #512	; 0x200
   10328:	e023      	b.n	10372 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x92>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
   1032a:	f8d0 6420 	ldr.w	r6, [r0, #1056]	; 0x420
   1032e:	e7df      	b.n	102f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
        endAlloc++;
   10330:	46a8      	mov	r8, r5
        if (endAlloc == start) {
   10332:	42ae      	cmp	r6, r5
   10334:	d029      	beq.n	1038a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
        if (endAlloc >= m_clusterCount) {
   10336:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
   1033a:	42ab      	cmp	r3, r5
   1033c:	d91e      	bls.n	1037c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
      for (; mask; mask <<= 1) {
   1033e:	0064      	lsls	r4, r4, #1
   10340:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10344:	d010      	beq.n	10368 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        endAlloc++;
   10346:	3501      	adds	r5, #1
        if (!(mask & cache[i])) {
   10348:	4222      	tst	r2, r4
   1034a:	d1f1      	bne.n	10330 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x50>
          if ((endAlloc - bgnAlloc) == count) {
   1034c:	eba5 0308 	sub.w	r3, r5, r8
   10350:	454b      	cmp	r3, r9
   10352:	d1ee      	bne.n	10332 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x52>
            if (cluster == 0 && count == 1) {
   10354:	9b01      	ldr	r3, [sp, #4]
   10356:	b923      	cbnz	r3, 10362 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
   10358:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
   1035c:	bf08      	it	eq
   1035e:	f8c7 8420 	streq.w	r8, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
   10362:	f108 0002 	add.w	r0, r8, #2
   10366:	e011      	b.n	1038c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    for (; i < sectorSize; i++) {
   10368:	f10a 0a01 	add.w	sl, sl, #1
      mask = 1;
   1036c:	2401      	movs	r4, #1
    for (; i < sectorSize; i++) {
   1036e:	4551      	cmp	r1, sl
   10370:	d007      	beq.n	10382 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa2>
      for (; mask; mask <<= 1) {
   10372:	2c00      	cmp	r4, #0
   10374:	d0f8      	beq.n	10368 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
        if (!(mask & cache[i])) {
   10376:	f89a 2000 	ldrb.w	r2, [sl]
   1037a:	e7e4      	b.n	10346 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x66>
      mask = 1;
   1037c:	2401      	movs	r4, #1
          endAlloc = bgnAlloc = 0;
   1037e:	46d8      	mov	r8, fp
   10380:	465d      	mov	r5, fp
    i = 0;
   10382:	46da      	mov	sl, fp
   10384:	e7c4      	b.n	10310 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x30>
      return 0;
   10386:	2000      	movs	r0, #0
   10388:	e000      	b.n	1038c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
          return 1;
   1038a:	2001      	movs	r0, #1
}
   1038c:	b003      	add	sp, #12
   1038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
                                  uint32_t count, bool value) {
   10392:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10396:	4615      	mov	r5, r2
   10398:	461e      	mov	r6, r3
  uint32_t start = cluster - 2;
   1039a:	3902      	subs	r1, #2
  if ((start + count) > m_clusterCount) {
   1039c:	188b      	adds	r3, r1, r2
   1039e:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
   103a2:	4293      	cmp	r3, r2
   103a4:	d854      	bhi.n	10450 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xbe>
   103a6:	4607      	mov	r7, r0
  if (value) {
   103a8:	b15e      	cbz	r6, 103c2 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x30>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
   103aa:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
   103ae:	4283      	cmp	r3, r0
   103b0:	d90d      	bls.n	103ce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
   103b2:	4288      	cmp	r0, r1
   103b4:	d30b      	bcc.n	103ce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
   103b6:	4293      	cmp	r3, r2
   103b8:	bf28      	it	cs
   103ba:	2300      	movcs	r3, #0
   103bc:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
   103c0:	e005      	b.n	103ce <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3c>
    if (start < m_bitmapStart) {
   103c2:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
   103c6:	428b      	cmp	r3, r1
      m_bitmapStart = start;
   103c8:	bf88      	it	hi
   103ca:	f8c0 1420 	strhi.w	r1, [r0, #1056]	; 0x420
  mask = 1 << (start & 7);
   103ce:	f001 0307 	and.w	r3, r1, #7
   103d2:	2401      	movs	r4, #1
   103d4:	409c      	lsls	r4, r3
   103d6:	b2e4      	uxtb	r4, r4
  sector = m_clusterHeapStartSector +
   103d8:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
   103dc:	eb03 3811 	add.w	r8, r3, r1, lsr #12
  i = (start >> 3) & m_sectorMask;
   103e0:	f3c1 0bc8 	ubfx	fp, r1, #3, #9
   103e4:	f04f 0901 	mov.w	r9, #1
    i = 0;
   103e8:	f04f 0a00 	mov.w	sl, #0
   103ec:	464a      	mov	r2, r9
   103ee:	4641      	mov	r1, r8
   103f0:	4638      	mov	r0, r7
   103f2:	f004 fc2e 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
   103f6:	4684      	mov	ip, r0
   103f8:	b368      	cbz	r0, 10456 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc4>
   103fa:	4458      	add	r0, fp
   103fc:	f50c 7c00 	add.w	ip, ip, #512	; 0x200
      for (; mask; mask <<= 1) {
   10400:	b1e4      	cbz	r4, 1043c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
   10402:	4603      	mov	r3, r0
   10404:	7802      	ldrb	r2, [r0, #0]
   10406:	4222      	tst	r2, r4
   10408:	bf14      	ite	ne
   1040a:	2101      	movne	r1, #1
   1040c:	2100      	moveq	r1, #0
   1040e:	42b1      	cmp	r1, r6
   10410:	d025      	beq.n	1045e <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xcc>
        cache[i] ^= mask;
   10412:	4062      	eors	r2, r4
   10414:	7002      	strb	r2, [r0, #0]
        if (--count == 0) {
   10416:	3d01      	subs	r5, #1
   10418:	d018      	beq.n	1044c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xba>
      for (; mask; mask <<= 1) {
   1041a:	0064      	lsls	r4, r4, #1
   1041c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10420:	d00c      	beq.n	1043c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xaa>
        if (value == static_cast<bool>(cache[i] & mask)) {
   10422:	7819      	ldrb	r1, [r3, #0]
   10424:	4221      	tst	r1, r4
   10426:	bf14      	ite	ne
   10428:	2201      	movne	r2, #1
   1042a:	2200      	moveq	r2, #0
   1042c:	42b2      	cmp	r2, r6
   1042e:	d014      	beq.n	1045a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc8>
        cache[i] ^= mask;
   10430:	4061      	eors	r1, r4
   10432:	7019      	strb	r1, [r3, #0]
        if (--count == 0) {
   10434:	3d01      	subs	r5, #1
   10436:	d1f0      	bne.n	1041a <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x88>
          return true;
   10438:	2001      	movs	r0, #1
   1043a:	e00a      	b.n	10452 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
    for (; i < m_bytesPerSector; i++) {
   1043c:	3001      	adds	r0, #1
      mask = 1;
   1043e:	464c      	mov	r4, r9
    for (; i < m_bytesPerSector; i++) {
   10440:	4560      	cmp	r0, ip
   10442:	d1dd      	bne.n	10400 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x6e>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
   10444:	f108 0801 	add.w	r8, r8, #1
    i = 0;
   10448:	46d3      	mov	fp, sl
   1044a:	e7cf      	b.n	103ec <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x5a>
          return true;
   1044c:	2001      	movs	r0, #1
   1044e:	e000      	b.n	10452 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
  return false;
   10450:	2000      	movs	r0, #0
}
   10452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   10456:	2000      	movs	r0, #0
   10458:	e7fb      	b.n	10452 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
   1045a:	2000      	movs	r0, #0
   1045c:	e7f9      	b.n	10452 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>
   1045e:	2000      	movs	r0, #0
   10460:	e7f7      	b.n	10452 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xc0>

00010462 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
   10462:	b510      	push	{r4, lr}
   10464:	460c      	mov	r4, r1
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
   10466:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
   1046a:	6849      	ldr	r1, [r1, #4]
   1046c:	4019      	ands	r1, r3
           ((cluster - 2) << m_sectorsPerClusterShift);
   1046e:	6823      	ldr	r3, [r4, #0]
   10470:	3b02      	subs	r3, #2
   10472:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
   10476:	fa03 f30c 	lsl.w	r3, r3, ip
   1047a:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   1047e:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    return m_dataCache.prepare(sector, option);
   10482:	4419      	add	r1, r3
   10484:	f500 7004 	add.w	r0, r0, #528	; 0x210
   10488:	f004 fbe3 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
   1048c:	4603      	mov	r3, r0
   1048e:	b118      	cbz	r0, 10498 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x36>
   10490:	6862      	ldr	r2, [r4, #4]
   10492:	f3c2 0208 	ubfx	r2, r2, #0, #9
   10496:	4413      	add	r3, r2
}
   10498:	4618      	mov	r0, r3
   1049a:	bd10      	pop	{r4, pc}

0001049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
   1049c:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
   1049e:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
   104a2:	3301      	adds	r3, #1
   104a4:	428b      	cmp	r3, r1
   104a6:	d202      	bcs.n	104ae <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
   104a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   104ac:	bd38      	pop	{r3, r4, r5, pc}
   104ae:	460c      	mov	r4, r1
   104b0:	4615      	mov	r5, r2
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   104b2:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
   104b6:	2200      	movs	r2, #0
   104b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   104bc:	f500 7004 	add.w	r0, r0, #528	; 0x210
   104c0:	f004 fbc7 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
   104c4:	b148      	cbz	r0, 104da <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
   104c6:	00a4      	lsls	r4, r4, #2
   104c8:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
   104cc:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
   104ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   104d2:	d005      	beq.n	104e0 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x44>
  *value = next;
   104d4:	602b      	str	r3, [r5, #0]
  return 1;
   104d6:	2001      	movs	r0, #1
   104d8:	e7e8      	b.n	104ac <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return -1;
   104da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   104de:	e7e5      	b.n	104ac <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>
    return 0;
   104e0:	2000      	movs	r0, #0
   104e2:	e7e3      	b.n	104ac <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x10>

000104e4 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
   104e4:	b530      	push	{r4, r5, lr}
   104e6:	b083      	sub	sp, #12
   104e8:	4605      	mov	r5, r0
   104ea:	9101      	str	r1, [sp, #4]
  uint32_t n = 0;
   104ec:	2400      	movs	r4, #0
    status = fatGet(cluster, & cluster);
   104ee:	aa01      	add	r2, sp, #4
   104f0:	9901      	ldr	r1, [sp, #4]
   104f2:	4628      	mov	r0, r5
   104f4:	f7ff ffd2 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) return 0;
   104f8:	2800      	cmp	r0, #0
   104fa:	db03      	blt.n	10504 <ExFatPartition::chainSize(unsigned long)+0x20>
    n++;
   104fc:	3401      	adds	r4, #1
  } while (status);
   104fe:	2800      	cmp	r0, #0
   10500:	d1f5      	bne.n	104ee <ExFatPartition::chainSize(unsigned long)+0xa>
   10502:	e000      	b.n	10506 <ExFatPartition::chainSize(unsigned long)+0x22>
    if (status < 0) return 0;
   10504:	2400      	movs	r4, #0
}
   10506:	4620      	mov	r0, r4
   10508:	b003      	add	sp, #12
   1050a:	bd30      	pop	{r4, r5, pc}

0001050c <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
   1050c:	b570      	push	{r4, r5, r6, lr}
   1050e:	4606      	mov	r6, r0
   10510:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
   10512:	6849      	ldr	r1, [r1, #4]
   10514:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
   10518:	400b      	ands	r3, r1
   1051a:	4413      	add	r3, r2
  pos->position += offset;
   1051c:	4411      	add	r1, r2
   1051e:	6061      	str	r1, [r4, #4]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
   10520:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
   10524:	3209      	adds	r2, #9
  tmp >>= bytesPerClusterShift();
   10526:	b2d2      	uxtb	r2, r2
   10528:	40d3      	lsrs	r3, r2
  while (tmp--) {
   1052a:	1e5d      	subs	r5, r3, #1
   1052c:	b963      	cbnz	r3, 10548 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x3c>
  return 1;
   1052e:	2001      	movs	r0, #1
   10530:	e012      	b.n	10558 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
      status = fatGet(pos->cluster, &pos->cluster);
   10532:	4622      	mov	r2, r4
   10534:	6821      	ldr	r1, [r4, #0]
   10536:	4630      	mov	r0, r6
   10538:	f7ff ffb0 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (status != 1) {
   1053c:	2801      	cmp	r0, #1
   1053e:	d10b      	bne.n	10558 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4c>
  while (tmp--) {
   10540:	3d01      	subs	r5, #1
   10542:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   10546:	d006      	beq.n	10556 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x4a>
    if (pos->isContiguous) {
   10548:	7a23      	ldrb	r3, [r4, #8]
   1054a:	2b00      	cmp	r3, #0
   1054c:	d0f1      	beq.n	10532 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x26>
      pos->cluster++;
   1054e:	6823      	ldr	r3, [r4, #0]
   10550:	3301      	adds	r3, #1
   10552:	6023      	str	r3, [r4, #0]
   10554:	e7f4      	b.n	10540 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x34>
  return 1;
   10556:	2001      	movs	r0, #1
}
   10558:	bd70      	pop	{r4, r5, r6, pc}

0001055a <ExFatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
   1055a:	2901      	cmp	r1, #1
   1055c:	d919      	bls.n	10592 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x38>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
   1055e:	b538      	push	{r3, r4, r5, lr}
   10560:	460c      	mov	r4, r1
   10562:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
   10564:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
   10568:	3301      	adds	r3, #1
   1056a:	428b      	cmp	r3, r1
   1056c:	d201      	bcs.n	10572 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  return false;
   1056e:	2000      	movs	r0, #0
}
   10570:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   10572:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    return m_dataCache.prepare(sector, option);
   10576:	2201      	movs	r2, #1
   10578:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   1057c:	f500 7004 	add.w	r0, r0, #528	; 0x210
   10580:	f004 fb67 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
   10584:	b138      	cbz	r0, 10596 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
   10586:	00a4      	lsls	r4, r4, #2
   10588:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
   1058c:	5105      	str	r5, [r0, r4]
  return true;
   1058e:	2001      	movs	r0, #1
   10590:	e7ee      	b.n	10570 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
   10592:	2000      	movs	r0, #0
}
   10594:	4770      	bx	lr
  return false;
   10596:	2000      	movs	r0, #0
   10598:	e7ea      	b.n	10570 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>

0001059a <ExFatPartition::freeChain(unsigned long)>:
bool ExFatPartition::freeChain(uint32_t cluster) {
   1059a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1059e:	b082      	sub	sp, #8
   105a0:	4606      	mov	r6, r0
   105a2:	460c      	mov	r4, r1
  uint32_t start = cluster;
   105a4:	460f      	mov	r7, r1
    if (!fatPut(cluster, 0)) {
   105a6:	f04f 0800 	mov.w	r8, #0
   105aa:	e00d      	b.n	105c8 <ExFatPartition::freeChain(unsigned long)+0x2e>
    cluster = next;
   105ac:	461c      	mov	r4, r3
   105ae:	e00b      	b.n	105c8 <ExFatPartition::freeChain(unsigned long)+0x2e>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
   105b0:	1c62      	adds	r2, r4, #1
   105b2:	4643      	mov	r3, r8
   105b4:	1bd2      	subs	r2, r2, r7
   105b6:	4639      	mov	r1, r7
   105b8:	4630      	mov	r0, r6
   105ba:	f7ff feea 	bl	10392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
   105be:	4603      	mov	r3, r0
   105c0:	b318      	cbz	r0, 1060a <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
   105c2:	9f01      	ldr	r7, [sp, #4]
  } while (status);
   105c4:	b30d      	cbz	r5, 1060a <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
   105c6:	463c      	mov	r4, r7
    status = fatGet(cluster, &next);
   105c8:	aa01      	add	r2, sp, #4
   105ca:	4621      	mov	r1, r4
   105cc:	4630      	mov	r0, r6
   105ce:	f7ff ff65 	bl	1049c <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    if (status < 0) {
   105d2:	1e05      	subs	r5, r0, #0
   105d4:	db18      	blt.n	10608 <ExFatPartition::freeChain(unsigned long)+0x6e>
    if (!fatPut(cluster, 0)) {
   105d6:	4642      	mov	r2, r8
   105d8:	4621      	mov	r1, r4
   105da:	4630      	mov	r0, r6
   105dc:	f7ff ffbd 	bl	1055a <ExFatPartition::fatPut(unsigned long, unsigned long)>
   105e0:	4603      	mov	r3, r0
   105e2:	b190      	cbz	r0, 1060a <ExFatPartition::freeChain(unsigned long)+0x70>
    if (status == 0 || (cluster + 1) != next) {
   105e4:	2d00      	cmp	r5, #0
   105e6:	d0e3      	beq.n	105b0 <ExFatPartition::freeChain(unsigned long)+0x16>
   105e8:	9b01      	ldr	r3, [sp, #4]
   105ea:	1c62      	adds	r2, r4, #1
   105ec:	429a      	cmp	r2, r3
   105ee:	d0dd      	beq.n	105ac <ExFatPartition::freeChain(unsigned long)+0x12>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
   105f0:	1c62      	adds	r2, r4, #1
   105f2:	4643      	mov	r3, r8
   105f4:	1bd2      	subs	r2, r2, r7
   105f6:	4639      	mov	r1, r7
   105f8:	4630      	mov	r0, r6
   105fa:	f7ff feca 	bl	10392 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
   105fe:	4603      	mov	r3, r0
   10600:	b118      	cbz	r0, 1060a <ExFatPartition::freeChain(unsigned long)+0x70>
      start = next;
   10602:	9f01      	ldr	r7, [sp, #4]
   10604:	463c      	mov	r4, r7
   10606:	e7df      	b.n	105c8 <ExFatPartition::freeChain(unsigned long)+0x2e>
  return false;
   10608:	2300      	movs	r3, #0
}
   1060a:	4618      	mov	r0, r3
   1060c:	b002      	add	sp, #8
   1060e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010612 <ExFatPartition::freeClusterCount()>:
uint32_t ExFatPartition::freeClusterCount() {
   10612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10616:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
   10618:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
  uint32_t usedCount = 0;
   1061c:	2500      	movs	r5, #0
  uint32_t nc = 0;
   1061e:	462c      	mov	r4, r5
   10620:	f500 7804 	add.w	r8, r0, #528	; 0x210
        for (uint8_t mask = 1; mask ; mask <<=1) {
   10624:	2701      	movs	r7, #1
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
   10626:	f101 0901 	add.w	r9, r1, #1
   1062a:	2200      	movs	r2, #0
   1062c:	4640      	mov	r0, r8
   1062e:	f004 fb10 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
   10632:	b308      	cbz	r0, 10678 <ExFatPartition::freeClusterCount()+0x66>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
   10634:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   10638:	f504 5e80 	add.w	lr, r4, #4096	; 0x1000
   1063c:	e007      	b.n	1064e <ExFatPartition::freeClusterCount()+0x3c>
        usedCount+= 8;
   1063e:	3508      	adds	r5, #8
      nc += 8;
   10640:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
   10642:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
   10646:	42a0      	cmp	r0, r4
   10648:	d911      	bls.n	1066e <ExFatPartition::freeClusterCount()+0x5c>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
   1064a:	4574      	cmp	r4, lr
   1064c:	d012      	beq.n	10674 <ExFatPartition::freeClusterCount()+0x62>
      if (cache[i] == 0XFF) {
   1064e:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
   10652:	29ff      	cmp	r1, #255	; 0xff
   10654:	d0f3      	beq.n	1063e <ExFatPartition::freeClusterCount()+0x2c>
      } else if (cache[i]) {
   10656:	2900      	cmp	r1, #0
   10658:	d0f2      	beq.n	10640 <ExFatPartition::freeClusterCount()+0x2e>
   1065a:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
   1065c:	463b      	mov	r3, r7
          if ((mask & cache[i])) {
   1065e:	4219      	tst	r1, r3
            usedCount++;
   10660:	bf18      	it	ne
   10662:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
   10664:	005b      	lsls	r3, r3, #1
   10666:	b2db      	uxtb	r3, r3
   10668:	3a01      	subs	r2, #1
   1066a:	d1f8      	bne.n	1065e <ExFatPartition::freeClusterCount()+0x4c>
   1066c:	e7e8      	b.n	10640 <ExFatPartition::freeClusterCount()+0x2e>
        return m_clusterCount - usedCount;
   1066e:	1b40      	subs	r0, r0, r5
}
   10670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
   10674:	4649      	mov	r1, r9
   10676:	e7d6      	b.n	10626 <ExFatPartition::freeClusterCount()+0x14>
      return 0;
   10678:	2000      	movs	r0, #0
   1067a:	e7f9      	b.n	10670 <ExFatPartition::freeClusterCount()+0x5e>

0001067c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
   1067c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10680:	4604      	mov	r4, r0
   10682:	460b      	mov	r3, r1
   10684:	4616      	mov	r6, r2
  m_fatType = 0;
   10686:	2100      	movs	r1, #0
   10688:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  m_blockDev = dev;
   1068c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
    m_blockDev = blockDev;
   10690:	6043      	str	r3, [r0, #4]
    m_status = 0;
   10692:	7001      	strb	r1, [r0, #0]
    m_sector = 0XFFFFFFFF;
   10694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10698:	60c2      	str	r2, [r0, #12]
    m_blockDev = blockDev;
   1069a:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
    m_status = 0;
   1069e:	f880 1210 	strb.w	r1, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
   106a2:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
   106a6:	f500 7704 	add.w	r7, r0, #528	; 0x210
   106aa:	460a      	mov	r2, r1
   106ac:	4638      	mov	r0, r7
   106ae:	f004 fad0 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  if (part > 4 || !cache) {
   106b2:	4680      	mov	r8, r0
   106b4:	fab0 f080 	clz	r0, r0
   106b8:	0940      	lsrs	r0, r0, #5
   106ba:	2e04      	cmp	r6, #4
   106bc:	bf94      	ite	ls
   106be:	4605      	movls	r5, r0
   106c0:	f040 0501 	orrhi.w	r5, r0, #1
   106c4:	2d00      	cmp	r5, #0
   106c6:	d154      	bne.n	10772 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf6>
  if (part >= 1) {
   106c8:	b1ce      	cbz	r6, 106fe <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x82>
    mp = &mbr->part[part - 1];
   106ca:	1e73      	subs	r3, r6, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
   106cc:	eb08 1203 	add.w	r2, r8, r3, lsl #4
   106d0:	f892 21be 	ldrb.w	r2, [r2, #446]	; 0x1be
   106d4:	f012 0f7f 	tst.w	r2, #127	; 0x7f
   106d8:	d14c      	bne.n	10774 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
   106da:	eb08 1303 	add.w	r3, r8, r3, lsl #4
   106de:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
   106e2:	2b00      	cmp	r3, #0
   106e4:	d046      	beq.n	10774 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return *reinterpret_cast<const uint32_t*>(src);
   106e6:	eb08 1606 	add.w	r6, r8, r6, lsl #4
   106ea:	f8d6 61b6 	ldr.w	r6, [r6, #438]	; 0x1b6
   106ee:	2200      	movs	r2, #0
   106f0:	4631      	mov	r1, r6
   106f2:	4638      	mov	r0, r7
   106f4:	f004 faad 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
   106f8:	4680      	mov	r8, r0
   106fa:	b908      	cbnz	r0, 10700 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x84>
   106fc:	e03a      	b.n	10774 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  uint32_t volStart = 0;
   106fe:	2600      	movs	r6, #0
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
   10700:	2205      	movs	r2, #5
   10702:	491e      	ldr	r1, [pc, #120]	; (1077c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x100>)
   10704:	f108 0003 	add.w	r0, r8, #3
   10708:	f012 fcf8 	bl	230fc <strncmp>
   1070c:	bb90      	cbnz	r0, 10774 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
   1070e:	f898 306c 	ldrb.w	r3, [r8, #108]	; 0x6c
   10712:	2b09      	cmp	r3, #9
   10714:	d12e      	bne.n	10774 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
   10716:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
   1071a:	4433      	add	r3, r6
   1071c:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
   10720:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
   10724:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
   10728:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
   1072c:	4433      	add	r3, r6
   1072e:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
   10732:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
   10736:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
   1073a:	f8d8 3060 	ldr.w	r3, [r8, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
   1073e:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
   10742:	f898 306d 	ldrb.w	r3, [r8, #109]	; 0x6d
   10746:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
   1074a:	3309      	adds	r3, #9
   1074c:	2501      	movs	r5, #1
   1074e:	fa05 f303 	lsl.w	r3, r5, r3
   10752:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
   10756:	3b01      	subs	r3, #1
   10758:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
  m_bitmapStart = 0;
   1075c:	2100      	movs	r1, #0
   1075e:	f8c4 1420 	str.w	r1, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
   10762:	462a      	mov	r2, r5
   10764:	4620      	mov	r0, r4
   10766:	f7ff fdbb 	bl	102e0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
   1076a:	2340      	movs	r3, #64	; 0x40
   1076c:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
   10770:	e000      	b.n	10774 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xf8>
  return false;
   10772:	2500      	movs	r5, #0
}
   10774:	4628      	mov	r0, r5
   10776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1077a:	bf00      	nop
   1077c:	20002200 	.word	0x20002200

00010780 <ExFatPartition::rootLength()>:
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
   10780:	b510      	push	{r4, lr}
   10782:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
   10784:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
   10788:	f7ff feac 	bl	104e4 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
   1078c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
   10790:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
   10792:	b2db      	uxtb	r3, r3
}
   10794:	4098      	lsls	r0, r3
   10796:	bd10      	pop	{r4, pc}

00010798 <FatFile::addCluster()>:
#define DBG_FILE "FatFile.cpp"
#include "../common/DebugMacros.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
   10798:	b538      	push	{r3, r4, r5, lr}
   1079a:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
   1079c:	4602      	mov	r2, r0
   1079e:	f852 5f10 	ldr.w	r5, [r2, #16]!
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
   107a2:	4629      	mov	r1, r5
   107a4:	6880      	ldr	r0, [r0, #8]
   107a6:	f002 f940 	bl	12a2a <FatPartition::allocateCluster(unsigned long, unsigned long*)>
   107aa:	b140      	cbz	r0, 107be <FatFile::addCluster()+0x26>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
   107ac:	b945      	cbnz	r5, 107c0 <FatFile::addCluster()+0x28>
    m_flags |= FILE_FLAG_CONTIGUOUS;
   107ae:	78a3      	ldrb	r3, [r4, #2]
   107b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   107b4:	70a3      	strb	r3, [r4, #2]
  } else if (m_curCluster != (cc + 1)) {
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
   107b6:	78a3      	ldrb	r3, [r4, #2]
   107b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   107bc:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
   107be:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_curCluster != (cc + 1)) {
   107c0:	3501      	adds	r5, #1
   107c2:	6923      	ldr	r3, [r4, #16]
   107c4:	42ab      	cmp	r3, r5
   107c6:	d0f6      	beq.n	107b6 <FatFile::addCluster()+0x1e>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
   107c8:	78a3      	ldrb	r3, [r4, #2]
   107ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   107ce:	70a3      	strb	r3, [r4, #2]
   107d0:	e7f1      	b.n	107b6 <FatFile::addCluster()+0x1e>
	...

000107d4 <FatFile::addDirCluster()>:
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
   107d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint8_t* pc;

  if (isRootFixed()) {
   107d8:	7803      	ldrb	r3, [r0, #0]
   107da:	f013 0f20 	tst.w	r3, #32
   107de:	d133      	bne.n	10848 <FatFile::addDirCluster()+0x74>
   107e0:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
   107e2:	6942      	ldr	r2, [r0, #20]
   107e4:	4b1b      	ldr	r3, [pc, #108]	; (10854 <FatFile::addDirCluster()+0x80>)
   107e6:	429a      	cmp	r2, r3
   107e8:	d301      	bcc.n	107ee <FatFile::addDirCluster()+0x1a>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
   107ea:	2700      	movs	r7, #0
   107ec:	e02d      	b.n	1084a <FatFile::addDirCluster()+0x76>
  if (!addCluster()) {
   107ee:	f7ff ffd3 	bl	10798 <FatFile::addCluster()>
   107f2:	4607      	mov	r7, r0
   107f4:	b348      	cbz	r0, 1084a <FatFile::addDirCluster()+0x76>
  sector = m_vol->clusterStartSector(m_curCluster);
   107f6:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   107f8:	692e      	ldr	r6, [r5, #16]
   107fa:	3e02      	subs	r6, #2
   107fc:	7983      	ldrb	r3, [r0, #6]
   107fe:	409e      	lsls	r6, r3
   10800:	6943      	ldr	r3, [r0, #20]
   10802:	441e      	add	r6, r3
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
   10804:	7903      	ldrb	r3, [r0, #4]
   10806:	b1b3      	cbz	r3, 10836 <FatFile::addDirCluster()+0x62>
   10808:	2400      	movs	r4, #0
    return m_cache.prepare(sector, options);
   1080a:	f04f 0805 	mov.w	r8, #5
    memset(pc, 0, m_vol->bytesPerSector());
   1080e:	f44f 7a00 	mov.w	sl, #512	; 0x200
   10812:	46a1      	mov	r9, r4
   10814:	4642      	mov	r2, r8
   10816:	fa56 f184 	uxtab	r1, r6, r4
   1081a:	3028      	adds	r0, #40	; 0x28
   1081c:	f004 fa19 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   10820:	b1b0      	cbz	r0, 10850 <FatFile::addDirCluster()+0x7c>
    memset(pc, 0, m_vol->bytesPerSector());
   10822:	4652      	mov	r2, sl
   10824:	4649      	mov	r1, r9
   10826:	f012 fc17 	bl	23058 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
   1082a:	68a8      	ldr	r0, [r5, #8]
   1082c:	3401      	adds	r4, #1
   1082e:	7902      	ldrb	r2, [r0, #4]
   10830:	b2e3      	uxtb	r3, r4
   10832:	429a      	cmp	r2, r3
   10834:	d8ee      	bhi.n	10814 <FatFile::addDirCluster()+0x40>
    return m_bytesPerSector << m_sectorsPerClusterShift;
   10836:	7982      	ldrb	r2, [r0, #6]
   10838:	f44f 7300 	mov.w	r3, #512	; 0x200
   1083c:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
   1083e:	696a      	ldr	r2, [r5, #20]
   10840:	fa12 f383 	uxtah	r3, r2, r3
   10844:	616b      	str	r3, [r5, #20]
  return true;
   10846:	e000      	b.n	1084a <FatFile::addDirCluster()+0x76>
  return false;
   10848:	2700      	movs	r7, #0
}
   1084a:	4638      	mov	r0, r7
   1084c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return false;
   10850:	2700      	movs	r7, #0
   10852:	e7fa      	b.n	1084a <FatFile::addDirCluster()+0x76>
   10854:	001ffe00 	.word	0x001ffe00

00010858 <FatFile::cacheDirEntry(unsigned char)>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
   10858:	b510      	push	{r4, lr}
   1085a:	4604      	mov	r4, r0
   1085c:	460a      	mov	r2, r1
    return m_cache.prepare(sector, options);
   1085e:	6880      	ldr	r0, [r0, #8]
   10860:	69a1      	ldr	r1, [r4, #24]
   10862:	3028      	adds	r0, #40	; 0x28
   10864:	f004 f9f5 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  uint8_t* pc = m_vol->dataCachePrepare(m_dirSector, action);
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(pc);
  if (!dir) {
   10868:	4603      	mov	r3, r0
   1086a:	b120      	cbz	r0, 10876 <FatFile::cacheDirEntry(unsigned char)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return dir + (m_dirIndex & 0XF);
   1086c:	88a2      	ldrh	r2, [r4, #4]
   1086e:	f002 020f 	and.w	r2, r2, #15
   10872:	eb00 1342 	add.w	r3, r0, r2, lsl #5

 fail:
  return nullptr;
}
   10876:	4618      	mov	r0, r3
   10878:	bd10      	pop	{r4, pc}

0001087a <FatFile::openRoot(FatVolume*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   1087a:	b538      	push	{r3, r4, r5, lr}
  // error if file is already open
  if (isOpen()) {
   1087c:	7803      	ldrb	r3, [r0, #0]
   1087e:	b10b      	cbz	r3, 10884 <FatFile::openRoot(FatVolume*)+0xa>
  // read only
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
   10880:	2000      	movs	r0, #0
}
   10882:	bd38      	pop	{r3, r4, r5, pc}
   10884:	4604      	mov	r4, r0
   10886:	460d      	mov	r5, r1
  memset(this, 0, sizeof(FatFile));
   10888:	2224      	movs	r2, #36	; 0x24
   1088a:	2100      	movs	r1, #0
   1088c:	f012 fbe4 	bl	23058 <memset>
  m_vol = vol;
   10890:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   10892:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   10894:	2b10      	cmp	r3, #16
   10896:	d007      	beq.n	108a8 <FatFile::openRoot(FatVolume*)+0x2e>
   10898:	2b20      	cmp	r3, #32
   1089a:	d007      	beq.n	108ac <FatFile::openRoot(FatVolume*)+0x32>
   1089c:	2b0c      	cmp	r3, #12
   1089e:	d001      	beq.n	108a4 <FatFile::openRoot(FatVolume*)+0x2a>
   108a0:	2000      	movs	r0, #0
   108a2:	e7ee      	b.n	10882 <FatFile::openRoot(FatVolume*)+0x8>
   108a4:	2320      	movs	r3, #32
   108a6:	e002      	b.n	108ae <FatFile::openRoot(FatVolume*)+0x34>
   108a8:	2320      	movs	r3, #32
   108aa:	e000      	b.n	108ae <FatFile::openRoot(FatVolume*)+0x34>
   108ac:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
   108ae:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
   108b0:	2001      	movs	r0, #1
   108b2:	70a0      	strb	r0, [r4, #2]
  return true;
   108b4:	e7e5      	b.n	10882 <FatFile::openRoot(FatVolume*)+0x8>

000108b6 <FatFile::openCluster(FatFile*)>:
bool FatFile::openCluster(FatFile* file) {
   108b6:	b538      	push	{r3, r4, r5, lr}
   108b8:	4604      	mov	r4, r0
   108ba:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   108bc:	68cb      	ldr	r3, [r1, #12]
   108be:	b91b      	cbnz	r3, 108c8 <FatFile::openCluster(FatFile*)+0x12>
    return openRoot(file->m_vol);
   108c0:	6889      	ldr	r1, [r1, #8]
   108c2:	f7ff ffda 	bl	1087a <FatFile::openRoot(FatVolume*)>
}
   108c6:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(FatFile));
   108c8:	2224      	movs	r2, #36	; 0x24
   108ca:	2100      	movs	r1, #0
   108cc:	f012 fbc4 	bl	23058 <memset>
  m_attributes = FILE_ATTR_SUBDIR;
   108d0:	2310      	movs	r3, #16
   108d2:	7023      	strb	r3, [r4, #0]
  m_flags = FILE_FLAG_READ;
   108d4:	2001      	movs	r0, #1
   108d6:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   108d8:	68ab      	ldr	r3, [r5, #8]
   108da:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   108dc:	68eb      	ldr	r3, [r5, #12]
   108de:	6223      	str	r3, [r4, #32]
  return true;
   108e0:	e7f1      	b.n	108c6 <FatFile::openCluster(FatFile*)+0x10>

000108e2 <FatFile::read(void*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   108e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108e6:	b083      	sub	sp, #12
   108e8:	4604      	mov	r4, r0
   108ea:	9200      	str	r2, [sp, #0]
  uint16_t offset;
  size_t toRead;
  uint32_t sector;  // raw device sector number
  uint8_t* pc;
  // error if not open for read
  if (!isReadable()) {
   108ec:	7883      	ldrb	r3, [r0, #2]
   108ee:	f013 0f01 	tst.w	r3, #1
   108f2:	f000 80b4 	beq.w	10a5e <FatFile::read(void*, unsigned int)+0x17c>
   108f6:	4689      	mov	r9, r1
   108f8:	4611      	mov	r1, r2
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
   108fa:	7803      	ldrb	r3, [r0, #0]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   108fc:	f013 0f08 	tst.w	r3, #8
   10900:	d012      	beq.n	10928 <FatFile::read(void*, unsigned int)+0x46>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   10902:	69c3      	ldr	r3, [r0, #28]
   10904:	6942      	ldr	r2, [r0, #20]
   10906:	1a9b      	subs	r3, r3, r2
   10908:	460a      	mov	r2, r1
   1090a:	4299      	cmp	r1, r3
   1090c:	bf28      	it	cs
   1090e:	461a      	movcs	r2, r3
   10910:	9200      	str	r2, [sp, #0]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
   10912:	9b00      	ldr	r3, [sp, #0]
   10914:	2b00      	cmp	r3, #0
   10916:	f000 80b7 	beq.w	10a88 <FatFile::read(void*, unsigned int)+0x1a6>
  toRead = nbyte;
   1091a:	461f      	mov	r7, r3
  uint8_t sectorOfCluster = 0;
   1091c:	f04f 0a00 	mov.w	sl, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   10920:	f104 0310 	add.w	r3, r4, #16
   10924:	9301      	str	r3, [sp, #4]
   10926:	e05b      	b.n	109e0 <FatFile::read(void*, unsigned int)+0xfe>
  } else if (isRootFixed()) {
   10928:	f013 0f20 	tst.w	r3, #32
   1092c:	d0f1      	beq.n	10912 <FatFile::read(void*, unsigned int)+0x30>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   1092e:	6883      	ldr	r3, [r0, #8]
   10930:	895a      	ldrh	r2, [r3, #10]
   10932:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
   10934:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   10938:	b29b      	uxth	r3, r3
   1093a:	9a00      	ldr	r2, [sp, #0]
   1093c:	429a      	cmp	r2, r3
   1093e:	bf28      	it	cs
   10940:	461a      	movcs	r2, r3
   10942:	9200      	str	r2, [sp, #0]
   10944:	e7e5      	b.n	10912 <FatFile::read(void*, unsigned int)+0x30>
    return (position >> 9) & m_clusterSectorMask;
   10946:	f890 a005 	ldrb.w	sl, [r0, #5]
   1094a:	ea0a 2a53 	and.w	sl, sl, r3, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
   1094e:	f1b8 0f00 	cmp.w	r8, #0
   10952:	d109      	bne.n	10968 <FatFile::read(void*, unsigned int)+0x86>
   10954:	f1ba 0f00 	cmp.w	sl, #0
   10958:	d106      	bne.n	10968 <FatFile::read(void*, unsigned int)+0x86>
        if (m_curPosition == 0) {
   1095a:	b973      	cbnz	r3, 1097a <FatFile::read(void*, unsigned int)+0x98>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   1095c:	f012 0f40 	tst.w	r2, #64	; 0x40
    return m_rootDirStart;
   10960:	bf14      	ite	ne
   10962:	6a03      	ldrne	r3, [r0, #32]
   10964:	6a23      	ldreq	r3, [r4, #32]
   10966:	6123      	str	r3, [r4, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
   10968:	68a3      	ldr	r3, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   1096a:	6925      	ldr	r5, [r4, #16]
   1096c:	3d02      	subs	r5, #2
   1096e:	799a      	ldrb	r2, [r3, #6]
   10970:	4095      	lsls	r5, r2
   10972:	695b      	ldr	r3, [r3, #20]
   10974:	441d      	add	r5, r3
   10976:	4455      	add	r5, sl
   10978:	e03d      	b.n	109f6 <FatFile::read(void*, unsigned int)+0x114>
        } else if (isFile() && isContiguous()) {
   1097a:	f012 0f08 	tst.w	r2, #8
   1097e:	d007      	beq.n	10990 <FatFile::read(void*, unsigned int)+0xae>
   10980:	78a3      	ldrb	r3, [r4, #2]
   10982:	f013 0f40 	tst.w	r3, #64	; 0x40
   10986:	d003      	beq.n	10990 <FatFile::read(void*, unsigned int)+0xae>
          m_curCluster++;
   10988:	6923      	ldr	r3, [r4, #16]
   1098a:	3301      	adds	r3, #1
   1098c:	6123      	str	r3, [r4, #16]
   1098e:	e7eb      	b.n	10968 <FatFile::read(void*, unsigned int)+0x86>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   10990:	9a01      	ldr	r2, [sp, #4]
   10992:	6921      	ldr	r1, [r4, #16]
   10994:	f001 ff27 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
   10998:	2800      	cmp	r0, #0
   1099a:	db60      	blt.n	10a5e <FatFile::read(void*, unsigned int)+0x17c>
          if (fg == 0) {
   1099c:	2800      	cmp	r0, #0
   1099e:	d1e3      	bne.n	10968 <FatFile::read(void*, unsigned int)+0x86>
            if (isDir()) {
   109a0:	7823      	ldrb	r3, [r4, #0]
   109a2:	f013 0f70 	tst.w	r3, #112	; 0x70
   109a6:	d05a      	beq.n	10a5e <FatFile::read(void*, unsigned int)+0x17c>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
   109a8:	9b00      	ldr	r3, [sp, #0]
   109aa:	1bd8      	subs	r0, r3, r7
   109ac:	e05d      	b.n	10a6a <FatFile::read(void*, unsigned int)+0x188>
      n = m_vol->bytesPerSector() - offset;
   109ae:	f5c8 7600 	rsb	r6, r8, #512	; 0x200
   109b2:	42be      	cmp	r6, r7
   109b4:	bf28      	it	cs
   109b6:	463e      	movcs	r6, r7
    return m_cache.prepare(sector, options);
   109b8:	68a0      	ldr	r0, [r4, #8]
   109ba:	2200      	movs	r2, #0
   109bc:	4629      	mov	r1, r5
   109be:	3028      	adds	r0, #40	; 0x28
   109c0:	f004 f947 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   109c4:	4601      	mov	r1, r0
   109c6:	2800      	cmp	r0, #0
   109c8:	d049      	beq.n	10a5e <FatFile::read(void*, unsigned int)+0x17c>
      memcpy(dst, src, n);
   109ca:	4632      	mov	r2, r6
   109cc:	4441      	add	r1, r8
   109ce:	4648      	mov	r0, r9
   109d0:	f006 fc8e 	bl	172f0 <memcpy>
    dst += n;
   109d4:	44b1      	add	r9, r6
    m_curPosition += n;
   109d6:	6963      	ldr	r3, [r4, #20]
   109d8:	4433      	add	r3, r6
   109da:	6163      	str	r3, [r4, #20]
  while (toRead) {
   109dc:	1bbf      	subs	r7, r7, r6
   109de:	d0e3      	beq.n	109a8 <FatFile::read(void*, unsigned int)+0xc6>
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
   109e0:	6963      	ldr	r3, [r4, #20]
   109e2:	68a0      	ldr	r0, [r4, #8]
   109e4:	f3c3 0808 	ubfx	r8, r3, #0, #9
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
   109e8:	7822      	ldrb	r2, [r4, #0]
    if (isRootFixed()) {
   109ea:	f012 0f20 	tst.w	r2, #32
   109ee:	d0aa      	beq.n	10946 <FatFile::read(void*, unsigned int)+0x64>
      sector = m_vol->rootDirStart()
   109f0:	6a05      	ldr	r5, [r0, #32]
   109f2:	eb05 2553 	add.w	r5, r5, r3, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
   109f6:	f1b8 0f00 	cmp.w	r8, #0
   109fa:	d1d8      	bne.n	109ae <FatFile::read(void*, unsigned int)+0xcc>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
   109fc:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   10a00:	d3d5      	bcc.n	109ae <FatFile::read(void*, unsigned int)+0xcc>
   10a02:	f8d4 b008 	ldr.w	fp, [r4, #8]
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
   10a06:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
   10a0a:	429d      	cmp	r5, r3
   10a0c:	d0cf      	beq.n	109ae <FatFile::read(void*, unsigned int)+0xcc>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
   10a0e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   10a12:	d32d      	bcc.n	10a70 <FatFile::read(void*, unsigned int)+0x18e>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
   10a14:	ea4f 2857 	mov.w	r8, r7, lsr #9
      if (!isRootFixed()) {
   10a18:	7822      	ldrb	r2, [r4, #0]
   10a1a:	f012 0f20 	tst.w	r2, #32
   10a1e:	d106      	bne.n	10a2e <FatFile::read(void*, unsigned int)+0x14c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
   10a20:	f89b 2004 	ldrb.w	r2, [fp, #4]
   10a24:	eba2 020a 	sub.w	r2, r2, sl
   10a28:	4590      	cmp	r8, r2
   10a2a:	bf28      	it	cs
   10a2c:	4690      	movcs	r8, r2
      n = ns << m_vol->bytesPerSectorShift();
   10a2e:	ea4f 2648 	mov.w	r6, r8, lsl #9
    return sector <= m_sector && m_sector < (sector + count);
   10a32:	429d      	cmp	r5, r3
   10a34:	d808      	bhi.n	10a48 <FatFile::read(void*, unsigned int)+0x166>
   10a36:	eb05 0208 	add.w	r2, r5, r8
   10a3a:	4293      	cmp	r3, r2
   10a3c:	d204      	bcs.n	10a48 <FatFile::read(void*, unsigned int)+0x166>
    if (isCached(sector, count) && !sync()) {
   10a3e:	f10b 0028 	add.w	r0, fp, #40	; 0x28
   10a42:	f004 f8df 	bl	14c04 <FsCache::sync()>
   10a46:	b150      	cbz	r0, 10a5e <FatFile::read(void*, unsigned int)+0x17c>
    return m_blockDev->readSectors(sector, dst, count);
   10a48:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
   10a4c:	6803      	ldr	r3, [r0, #0]
   10a4e:	f8d3 b014 	ldr.w	fp, [r3, #20]
   10a52:	4643      	mov	r3, r8
   10a54:	464a      	mov	r2, r9
   10a56:	4629      	mov	r1, r5
   10a58:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
   10a5a:	2800      	cmp	r0, #0
   10a5c:	d1ba      	bne.n	109d4 <FatFile::read(void*, unsigned int)+0xf2>

 fail:
  m_error |= READ_ERROR;
   10a5e:	7863      	ldrb	r3, [r4, #1]
   10a60:	f043 0302 	orr.w	r3, r3, #2
   10a64:	7063      	strb	r3, [r4, #1]
  return -1;
   10a66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   10a6a:	b003      	add	sp, #12
   10a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_blockDev->readSector(sector, dst);
   10a70:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
   10a74:	6803      	ldr	r3, [r0, #0]
   10a76:	691b      	ldr	r3, [r3, #16]
   10a78:	464a      	mov	r2, r9
   10a7a:	4629      	mov	r1, r5
   10a7c:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
   10a7e:	2800      	cmp	r0, #0
   10a80:	d0ed      	beq.n	10a5e <FatFile::read(void*, unsigned int)+0x17c>
      n = m_vol->bytesPerSector();
   10a82:	f44f 7600 	mov.w	r6, #512	; 0x200
   10a86:	e7a5      	b.n	109d4 <FatFile::read(void*, unsigned int)+0xf2>
  toRead = nbyte;
   10a88:	9f00      	ldr	r7, [sp, #0]
   10a8a:	e78d      	b.n	109a8 <FatFile::read(void*, unsigned int)+0xc6>

00010a8c <FatFile::peek()>:
int FatFile::peek() {
   10a8c:	b570      	push	{r4, r5, r6, lr}
   10a8e:	b082      	sub	sp, #8
   10a90:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
   10a92:	6946      	ldr	r6, [r0, #20]
  uint32_t curCluster = m_curCluster;
   10a94:	6905      	ldr	r5, [r0, #16]
    return read(&b, 1) == 1 ? b : -1;
   10a96:	2201      	movs	r2, #1
   10a98:	f10d 0107 	add.w	r1, sp, #7
   10a9c:	f7ff ff21 	bl	108e2 <FatFile::read(void*, unsigned int)>
   10aa0:	2801      	cmp	r0, #1
   10aa2:	bf0c      	ite	eq
   10aa4:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   10aa8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
   10aac:	6166      	str	r6, [r4, #20]
  m_curCluster = curCluster;
   10aae:	6125      	str	r5, [r4, #16]
}
   10ab0:	b002      	add	sp, #8
   10ab2:	bd70      	pop	{r4, r5, r6, pc}

00010ab4 <FatFile::readDirCache(bool)>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache.
// Assumes file is correctly positioned.
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
   10ab4:	b530      	push	{r4, r5, lr}
   10ab6:	b083      	sub	sp, #12
   10ab8:	4604      	mov	r4, r0
  DBG_HALT_IF(m_curPosition & 0X1F);
  uint8_t i = (m_curPosition >> 5) & 0XF;
   10aba:	6943      	ldr	r3, [r0, #20]
   10abc:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
   10ac0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
   10ac4:	d009      	beq.n	10ada <FatFile::readDirCache(bool)+0x26>
   10ac6:	2901      	cmp	r1, #1
   10ac8:	d107      	bne.n	10ada <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += FS_DIR_SIZE - 1;
  } else {
    m_curPosition += FS_DIR_SIZE;
   10aca:	3320      	adds	r3, #32
   10acc:	6143      	str	r3, [r0, #20]
    return m_buffer;
   10ace:	68a0      	ldr	r0, [r4, #8]
   10ad0:	3038      	adds	r0, #56	; 0x38
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   10ad2:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
   10ad6:	b003      	add	sp, #12
   10ad8:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
   10ada:	2201      	movs	r2, #1
   10adc:	f10d 0107 	add.w	r1, sp, #7
   10ae0:	4620      	mov	r0, r4
   10ae2:	f7ff fefe 	bl	108e2 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
   10ae6:	b240      	sxtb	r0, r0
   10ae8:	2801      	cmp	r0, #1
   10aea:	d103      	bne.n	10af4 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
   10aec:	6963      	ldr	r3, [r4, #20]
   10aee:	331f      	adds	r3, #31
   10af0:	6163      	str	r3, [r4, #20]
   10af2:	e7ec      	b.n	10ace <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
   10af4:	2000      	movs	r0, #0
   10af6:	e7ee      	b.n	10ad6 <FatFile::readDirCache(bool)+0x22>

00010af8 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
   10af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10afc:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
   10afe:	6907      	ldr	r7, [r0, #16]
  bool isOpen() const {return m_attributes;}
   10b00:	7803      	ldrb	r3, [r0, #0]
  // error if file not open
  if (!isOpen()) {
   10b02:	b36b      	cbz	r3, 10b60 <FatFile::seekSet(unsigned long)+0x68>
   10b04:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
   10b06:	6942      	ldr	r2, [r0, #20]
   10b08:	428a      	cmp	r2, r1
   10b0a:	d045      	beq.n	10b98 <FatFile::seekSet(unsigned long)+0xa0>
    return true;
  }
  if (pos == 0) {
   10b0c:	b361      	cbz	r1, 10b68 <FatFile::seekSet(unsigned long)+0x70>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
   10b0e:	f013 0f08 	tst.w	r3, #8
   10b12:	d032      	beq.n	10b7a <FatFile::seekSet(unsigned long)+0x82>
    if (pos > m_fileSize) {
   10b14:	69c1      	ldr	r1, [r0, #28]
   10b16:	42a9      	cmp	r1, r5
   10b18:	d322      	bcc.n	10b60 <FatFile::seekSet(unsigned long)+0x68>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
   10b1a:	f8d4 c008 	ldr.w	ip, [r4, #8]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
   10b1e:	f89c 1006 	ldrb.w	r1, [ip, #6]
   10b22:	3109      	adds	r1, #9
   10b24:	b2c9      	uxtb	r1, r1
   10b26:	1e6e      	subs	r6, r5, #1
   10b28:	40ce      	lsrs	r6, r1
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
   10b2a:	78a0      	ldrb	r0, [r4, #2]
   10b2c:	f010 0f40 	tst.w	r0, #64	; 0x40
   10b30:	d12c      	bne.n	10b8c <FatFile::seekSet(unsigned long)+0x94>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
   10b32:	1e50      	subs	r0, r2, #1
   10b34:	40c8      	lsrs	r0, r1

  if (nNew < nCur || m_curPosition == 0) {
   10b36:	b10a      	cbz	r2, 10b3c <FatFile::seekSet(unsigned long)+0x44>
   10b38:	4286      	cmp	r6, r0
   10b3a:	d22b      	bcs.n	10b94 <FatFile::seekSet(unsigned long)+0x9c>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   10b3c:	f013 0f40 	tst.w	r3, #64	; 0x40
    return m_rootDirStart;
   10b40:	bf14      	ite	ne
   10b42:	f8dc 3020 	ldrne.w	r3, [ip, #32]
   10b46:	6a23      	ldreq	r3, [r4, #32]
   10b48:	6123      	str	r3, [r4, #16]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   10b4a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   10b4e:	b16e      	cbz	r6, 10b6c <FatFile::seekSet(unsigned long)+0x74>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   10b50:	4642      	mov	r2, r8
   10b52:	6921      	ldr	r1, [r4, #16]
   10b54:	68a0      	ldr	r0, [r4, #8]
   10b56:	f001 fe46 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
   10b5a:	3e01      	subs	r6, #1
   10b5c:	2800      	cmp	r0, #0
   10b5e:	dcf6      	bgt.n	10b4e <FatFile::seekSet(unsigned long)+0x56>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
   10b60:	6127      	str	r7, [r4, #16]
  return false;
   10b62:	2000      	movs	r0, #0
}
   10b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = 0;
   10b68:	2300      	movs	r3, #0
   10b6a:	6103      	str	r3, [r0, #16]
  m_curPosition = pos;
   10b6c:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
   10b6e:	78a3      	ldrb	r3, [r4, #2]
   10b70:	f023 0320 	bic.w	r3, r3, #32
   10b74:	70a3      	strb	r3, [r4, #2]
  return true;
   10b76:	2001      	movs	r0, #1
   10b78:	e7f4      	b.n	10b64 <FatFile::seekSet(unsigned long)+0x6c>
  } else if (isRootFixed()) {
   10b7a:	f013 0f20 	tst.w	r3, #32
   10b7e:	d0cc      	beq.n	10b1a <FatFile::seekSet(unsigned long)+0x22>
    return m_rootDirEntryCount;
   10b80:	6883      	ldr	r3, [r0, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
   10b82:	895b      	ldrh	r3, [r3, #10]
   10b84:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
   10b88:	d9f0      	bls.n	10b6c <FatFile::seekSet(unsigned long)+0x74>
   10b8a:	e7e9      	b.n	10b60 <FatFile::seekSet(unsigned long)+0x68>
    m_curCluster = m_firstCluster + nNew;
   10b8c:	6a23      	ldr	r3, [r4, #32]
   10b8e:	4433      	add	r3, r6
   10b90:	6123      	str	r3, [r4, #16]
    goto done;
   10b92:	e7eb      	b.n	10b6c <FatFile::seekSet(unsigned long)+0x74>
    nNew -= nCur;
   10b94:	1a36      	subs	r6, r6, r0
   10b96:	e7d8      	b.n	10b4a <FatFile::seekSet(unsigned long)+0x52>
    return true;
   10b98:	2001      	movs	r0, #1
   10b9a:	e7e3      	b.n	10b64 <FatFile::seekSet(unsigned long)+0x6c>

00010b9c <FatFile::rmdir()>:
bool FatFile::rmdir() {
   10b9c:	b538      	push	{r3, r4, r5, lr}
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
   10b9e:	7803      	ldrb	r3, [r0, #0]
   10ba0:	f013 0f10 	tst.w	r3, #16
   10ba4:	d101      	bne.n	10baa <FatFile::rmdir()+0xe>
  return false;
   10ba6:	2000      	movs	r0, #0
}
   10ba8:	bd38      	pop	{r3, r4, r5, pc}
   10baa:	4604      	mov	r4, r0
    seekSet(0);
   10bac:	2100      	movs	r1, #0
   10bae:	f7ff ffa3 	bl	10af8 <FatFile::seekSet(unsigned long)>
    DirFat_t* dir = readDirCache(true);
   10bb2:	2501      	movs	r5, #1
   10bb4:	4629      	mov	r1, r5
   10bb6:	4620      	mov	r0, r4
   10bb8:	f7ff ff7c 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!dir) {
   10bbc:	4603      	mov	r3, r0
   10bbe:	b168      	cbz	r0, 10bdc <FatFile::rmdir()+0x40>
    if (dir->name[0] == FAT_NAME_FREE) {
   10bc0:	7800      	ldrb	r0, [r0, #0]
   10bc2:	b170      	cbz	r0, 10be2 <FatFile::rmdir()+0x46>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
   10bc4:	282e      	cmp	r0, #46	; 0x2e
   10bc6:	bf18      	it	ne
   10bc8:	28e5      	cmpne	r0, #229	; 0xe5
   10bca:	bf0c      	ite	eq
   10bcc:	2001      	moveq	r0, #1
   10bce:	2000      	movne	r0, #0
   10bd0:	d0f0      	beq.n	10bb4 <FatFile::rmdir()+0x18>
    if (isFileOrSubdir(dir)) {
   10bd2:	7adb      	ldrb	r3, [r3, #11]
   10bd4:	f013 0f08 	tst.w	r3, #8
   10bd8:	d1ec      	bne.n	10bb4 <FatFile::rmdir()+0x18>
   10bda:	e7e5      	b.n	10ba8 <FatFile::rmdir()+0xc>
      if (!getError()) {
   10bdc:	7863      	ldrb	r3, [r4, #1]
   10bde:	2b00      	cmp	r3, #0
   10be0:	d1e2      	bne.n	10ba8 <FatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
   10be2:	2308      	movs	r3, #8
   10be4:	7023      	strb	r3, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
   10be6:	78a3      	ldrb	r3, [r4, #2]
   10be8:	f043 0302 	orr.w	r3, r3, #2
   10bec:	70a3      	strb	r3, [r4, #2]
  return remove();
   10bee:	4620      	mov	r0, r4
   10bf0:	f001 f974 	bl	11edc <FatFile::remove()>
   10bf4:	e7d8      	b.n	10ba8 <FatFile::rmdir()+0xc>

00010bf6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
   10bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bf8:	4604      	mov	r4, r0
   10bfa:	460e      	mov	r6, r1
   10bfc:	4615      	mov	r5, r2
   10bfe:	461f      	mov	r7, r3
  memset(this, 0, sizeof(FatFile));
   10c00:	2224      	movs	r2, #36	; 0x24
   10c02:	2100      	movs	r1, #0
   10c04:	f012 fa28 	bl	23058 <memset>
  m_vol = dirFile->m_vol;
   10c08:	68b0      	ldr	r0, [r6, #8]
   10c0a:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   10c0c:	80a5      	strh	r5, [r4, #4]
  m_dirCluster = dirFile->m_firstCluster;
   10c0e:	6a33      	ldr	r3, [r6, #32]
   10c10:	60e3      	str	r3, [r4, #12]
   10c12:	f100 0238 	add.w	r2, r0, #56	; 0x38
  dir += 0XF & dirIndex;
   10c16:	f005 050f 	and.w	r5, r5, #15
   10c1a:	eb02 1245 	add.w	r2, r2, r5, lsl #5

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
   10c1e:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
   10c20:	f011 0f08 	tst.w	r1, #8
   10c24:	d113      	bne.n	10c4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
   10c26:	f001 0117 	and.w	r1, r1, #23
   10c2a:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
   10c2c:	7ad3      	ldrb	r3, [r2, #11]
   10c2e:	f013 0f18 	tst.w	r3, #24
   10c32:	d102      	bne.n	10c3a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x44>
    m_attributes |= FILE_ATTR_FILE;
   10c34:	f041 0108 	orr.w	r1, r1, #8
   10c38:	7021      	strb	r1, [r4, #0]
  m_lfnOrd = lfnOrd;
   10c3a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   10c3e:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   10c40:	f007 0303 	and.w	r3, r7, #3
   10c44:	2b01      	cmp	r3, #1
   10c46:	d027      	beq.n	10c98 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa2>
   10c48:	2b02      	cmp	r3, #2
   10c4a:	d027      	beq.n	10c9c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa6>
   10c4c:	b11b      	cbz	r3, 10c56 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x60>
  m_attributes = FILE_ATTR_CLOSED;
   10c4e:	2000      	movs	r0, #0
   10c50:	7020      	strb	r0, [r4, #0]
  m_flags = 0;
   10c52:	70a0      	strb	r0, [r4, #2]
}
   10c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (oflag & O_TRUNC) {
   10c56:	f417 6f80 	tst.w	r7, #1024	; 0x400
   10c5a:	d1f8      	bne.n	10c4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
   10c5c:	f007 0308 	and.w	r3, r7, #8
   10c60:	f043 0301 	orr.w	r3, r3, #1
   10c64:	70a3      	strb	r3, [r4, #2]
    return m_sector;
   10c66:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
   10c68:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10c6a:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
   10c6c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10c6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
   10c72:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
   10c74:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
   10c76:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   10c78:	f417 4f80 	tst.w	r7, #16384	; 0x4000
   10c7c:	d105      	bne.n	10c8a <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
  return true;
   10c7e:	2001      	movs	r0, #1
   10c80:	e7e8      	b.n	10c54 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   10c82:	f001 ff19 	bl	12ab8 <FatPartition::freeChain(unsigned long)>
   10c86:	b9f0      	cbnz	r0, 10cc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd0>
   10c88:	e7e1      	b.n	10c4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   10c8a:	69e1      	ldr	r1, [r4, #28]
   10c8c:	4620      	mov	r0, r4
   10c8e:	f7ff ff33 	bl	10af8 <FatFile::seekSet(unsigned long)>
   10c92:	2800      	cmp	r0, #0
   10c94:	d1de      	bne.n	10c54 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5e>
   10c96:	e7da      	b.n	10c4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  switch (oflag & O_ACCMODE) {
   10c98:	2302      	movs	r3, #2
   10c9a:	e000      	b.n	10c9e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa8>
   10c9c:	2303      	movs	r3, #3
      m_flags = FILE_FLAG_WRITE;
   10c9e:	70a3      	strb	r3, [r4, #2]
    if (isSubDir() || isReadOnly()) {
   10ca0:	7821      	ldrb	r1, [r4, #0]
   10ca2:	f011 0f11 	tst.w	r1, #17
   10ca6:	d1d2      	bne.n	10c4e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
   10ca8:	f007 0108 	and.w	r1, r7, #8
   10cac:	430b      	orrs	r3, r1
   10cae:	70a3      	strb	r3, [r4, #2]
   10cb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
  m_dirSector = m_vol->cacheSectorNumber();
   10cb2:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10cb4:	8a93      	ldrh	r3, [r2, #20]
                 | getLe16(dir->firstClusterLow);
   10cb6:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
  if (oflag & O_TRUNC) {
   10cbc:	f417 6f80 	tst.w	r7, #1024	; 0x400
   10cc0:	d0d7      	beq.n	10c72 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x7c>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   10cc2:	2900      	cmp	r1, #0
   10cc4:	d1dd      	bne.n	10c82 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   10cc6:	78a3      	ldrb	r3, [r4, #2]
   10cc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10ccc:	70a3      	strb	r3, [r4, #2]
   10cce:	e7d3      	b.n	10c78 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x82>

00010cd0 <FatFile::openNext(FatFile*, int)>:
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   10cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cd4:	b083      	sub	sp, #12
  bool isOpen() const {return m_attributes;}
   10cd6:	7805      	ldrb	r5, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   10cd8:	2d00      	cmp	r5, #0
   10cda:	d14f      	bne.n	10d7c <FatFile::openNext(FatFile*, int)+0xac>
   10cdc:	4606      	mov	r6, r0
   10cde:	460c      	mov	r4, r1
   10ce0:	4692      	mov	sl, r2
   10ce2:	780b      	ldrb	r3, [r1, #0]
   10ce4:	f013 0f70 	tst.w	r3, #112	; 0x70
   10ce8:	d04c      	beq.n	10d84 <FatFile::openNext(FatFile*, int)+0xb4>
   10cea:	694b      	ldr	r3, [r1, #20]
   10cec:	f013 0f1f 	tst.w	r3, #31
   10cf0:	d14a      	bne.n	10d88 <FatFile::openNext(FatFile*, int)+0xb8>
   10cf2:	46a9      	mov	r9, r5
   10cf4:	46ab      	mov	fp, r5
    DirFat_t* dir = dirFile->readDirCache();
   10cf6:	2700      	movs	r7, #0
   10cf8:	e000      	b.n	10cfc <FatFile::openNext(FatFile*, int)+0x2c>
      lfnOrd = 0;
   10cfa:	46a9      	mov	r9, r5
  uint32_t curPosition() const {return m_curPosition;}
   10cfc:	f8d4 8014 	ldr.w	r8, [r4, #20]
    DirFat_t* dir = dirFile->readDirCache();
   10d00:	4639      	mov	r1, r7
   10d02:	4620      	mov	r0, r4
   10d04:	f7ff fed6 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!dir) {
   10d08:	4602      	mov	r2, r0
   10d0a:	2800      	cmp	r0, #0
   10d0c:	d03e      	beq.n	10d8c <FatFile::openNext(FatFile*, int)+0xbc>
    if (dir->name[0] == FAT_NAME_FREE) {
   10d0e:	7803      	ldrb	r3, [r0, #0]
   10d10:	2b00      	cmp	r3, #0
   10d12:	d03d      	beq.n	10d90 <FatFile::openNext(FatFile*, int)+0xc0>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
   10d14:	2be5      	cmp	r3, #229	; 0xe5
   10d16:	bf18      	it	ne
   10d18:	2b2e      	cmpne	r3, #46	; 0x2e
   10d1a:	bf0c      	ite	eq
   10d1c:	2001      	moveq	r0, #1
   10d1e:	2000      	movne	r0, #0
   10d20:	d0eb      	beq.n	10cfa <FatFile::openNext(FatFile*, int)+0x2a>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
   10d22:	7ad1      	ldrb	r1, [r2, #11]
    } else if (isFileOrSubdir(dir)) {
   10d24:	f011 0c08 	ands.w	ip, r1, #8
   10d28:	d003      	beq.n	10d32 <FatFile::openNext(FatFile*, int)+0x62>
    } else if (isLongName(dir)) {
   10d2a:	290f      	cmp	r1, #15
   10d2c:	d01e      	beq.n	10d6c <FatFile::openNext(FatFile*, int)+0x9c>
      lfnOrd = 0;
   10d2e:	46a9      	mov	r9, r5
   10d30:	e7e4      	b.n	10cfc <FatFile::openNext(FatFile*, int)+0x2c>
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
   10d32:	f1b9 0f00 	cmp.w	r9, #0
   10d36:	d00f      	beq.n	10d58 <FatFile::openNext(FatFile*, int)+0x88>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
   10d38:	1e51      	subs	r1, r2, #1
   10d3a:	320a      	adds	r2, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10d3c:	ea4f 13cc 	mov.w	r3, ip, lsl #7
   10d40:	ea43 035c 	orr.w	r3, r3, ip, lsr #1
   10d44:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   10d48:	fa55 f383 	uxtab	r3, r5, r3
   10d4c:	fa5f fc83 	uxtb.w	ip, r3
    for (uint8_t i = 0; i < 11; i++) {
   10d50:	4291      	cmp	r1, r2
   10d52:	d1f3      	bne.n	10d3c <FatFile::openNext(FatFile*, int)+0x6c>
   10d54:	45e3      	cmp	fp, ip
   10d56:	d112      	bne.n	10d7e <FatFile::openNext(FatFile*, int)+0xae>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   10d58:	f8cd 9000 	str.w	r9, [sp]
   10d5c:	4653      	mov	r3, sl
   10d5e:	f3c8 124f 	ubfx	r2, r8, #5, #16
   10d62:	4621      	mov	r1, r4
   10d64:	4630      	mov	r0, r6
   10d66:	f7ff ff46 	bl	10bf6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
   10d6a:	e008      	b.n	10d7e <FatFile::openNext(FatFile*, int)+0xae>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
   10d6c:	f013 0f40 	tst.w	r3, #64	; 0x40
   10d70:	d0c4      	beq.n	10cfc <FatFile::openNext(FatFile*, int)+0x2c>
        lfnOrd = ldir->order & 0X1F;
   10d72:	f003 091f 	and.w	r9, r3, #31
        checksum = ldir->checksum;
   10d76:	f892 b00d 	ldrb.w	fp, [r2, #13]
   10d7a:	e7bf      	b.n	10cfc <FatFile::openNext(FatFile*, int)+0x2c>
  return false;
   10d7c:	2000      	movs	r0, #0
}
   10d7e:	b003      	add	sp, #12
   10d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   10d84:	2000      	movs	r0, #0
   10d86:	e7fa      	b.n	10d7e <FatFile::openNext(FatFile*, int)+0xae>
   10d88:	2000      	movs	r0, #0
   10d8a:	e7f8      	b.n	10d7e <FatFile::openNext(FatFile*, int)+0xae>
   10d8c:	2000      	movs	r0, #0
   10d8e:	e7f6      	b.n	10d7e <FatFile::openNext(FatFile*, int)+0xae>
   10d90:	2000      	movs	r0, #0
   10d92:	e7f4      	b.n	10d7e <FatFile::openNext(FatFile*, int)+0xae>

00010d94 <FatFile::sync()>:
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
   10d94:	7803      	ldrb	r3, [r0, #0]
   10d96:	2b00      	cmp	r3, #0
   10d98:	d049      	beq.n	10e2e <FatFile::sync()+0x9a>
bool FatFile::sync() {
   10d9a:	b530      	push	{r4, r5, lr}
   10d9c:	b083      	sub	sp, #12
   10d9e:	4604      	mov	r4, r0
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
   10da0:	f990 3002 	ldrsb.w	r3, [r0, #2]
   10da4:	2b00      	cmp	r3, #0
   10da6:	db0d      	blt.n	10dc4 <FatFile::sync()+0x30>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
   10da8:	68a5      	ldr	r5, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   10daa:	f105 0028 	add.w	r0, r5, #40	; 0x28
   10dae:	f003 ff29 	bl	14c04 <FsCache::sync()>
   10db2:	2800      	cmp	r0, #0
   10db4:	d12e      	bne.n	10e14 <FatFile::sync()+0x80>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
   10db6:	7863      	ldrb	r3, [r4, #1]
   10db8:	f043 0301 	orr.w	r3, r3, #1
   10dbc:	7063      	strb	r3, [r4, #1]
  return false;
   10dbe:	2000      	movs	r0, #0
}
   10dc0:	b003      	add	sp, #12
   10dc2:	bd30      	pop	{r4, r5, pc}
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   10dc4:	2101      	movs	r1, #1
   10dc6:	f7ff fd47 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
   10dca:	4605      	mov	r5, r0
   10dcc:	2800      	cmp	r0, #0
   10dce:	d0f2      	beq.n	10db6 <FatFile::sync()+0x22>
   10dd0:	7803      	ldrb	r3, [r0, #0]
   10dd2:	2be5      	cmp	r3, #229	; 0xe5
   10dd4:	d0ef      	beq.n	10db6 <FatFile::sync()+0x22>
    if (isFile()) {
   10dd6:	7823      	ldrb	r3, [r4, #0]
   10dd8:	f013 0f08 	tst.w	r3, #8
   10ddc:	d001      	beq.n	10de2 <FatFile::sync()+0x4e>
      setLe32(dir->fileSize, m_fileSize);
   10dde:	69e3      	ldr	r3, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
   10de0:	61c3      	str	r3, [r0, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
   10de2:	6a23      	ldr	r3, [r4, #32]
   10de4:	836b      	strh	r3, [r5, #26]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
   10de6:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   10de8:	82ab      	strh	r3, [r5, #20]
    if (FsDateTime::callback) {
   10dea:	4b12      	ldr	r3, [pc, #72]	; (10e34 <FatFile::sync()+0xa0>)
   10dec:	681b      	ldr	r3, [r3, #0]
   10dee:	b163      	cbz	r3, 10e0a <FatFile::sync()+0x76>
      FsDateTime::callback(&date, &time, &ms10);
   10df0:	f10d 0203 	add.w	r2, sp, #3
   10df4:	a901      	add	r1, sp, #4
   10df6:	f10d 0006 	add.w	r0, sp, #6
   10dfa:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
   10dfc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *reinterpret_cast<uint16_t*>(dst) = src;
   10e00:	832b      	strh	r3, [r5, #24]
   10e02:	826b      	strh	r3, [r5, #18]
   10e04:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   10e08:	82eb      	strh	r3, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
   10e0a:	78a3      	ldrb	r3, [r4, #2]
   10e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10e10:	70a3      	strb	r3, [r4, #2]
   10e12:	e7c9      	b.n	10da8 <FatFile::sync()+0x14>
   10e14:	f505 700e 	add.w	r0, r5, #568	; 0x238
   10e18:	f003 fef4 	bl	14c04 <FsCache::sync()>
   10e1c:	2800      	cmp	r0, #0
   10e1e:	d0ca      	beq.n	10db6 <FatFile::sync()+0x22>
    return m_blockDev->syncDevice();
   10e20:	6828      	ldr	r0, [r5, #0]
   10e22:	6803      	ldr	r3, [r0, #0]
   10e24:	6a1b      	ldr	r3, [r3, #32]
   10e26:	4798      	blx	r3
  if (m_vol->cacheSync()) {
   10e28:	2800      	cmp	r0, #0
   10e2a:	d1c9      	bne.n	10dc0 <FatFile::sync()+0x2c>
 fail:
   10e2c:	e7c3      	b.n	10db6 <FatFile::sync()+0x22>
    return true;
   10e2e:	2001      	movs	r0, #1
}
   10e30:	4770      	bx	lr
   10e32:	bf00      	nop
   10e34:	20006d3c 	.word	0x20006d3c

00010e38 <FatFile::close()>:
bool FatFile::close() {
   10e38:	b510      	push	{r4, lr}
   10e3a:	4604      	mov	r4, r0
  bool rtn = sync();
   10e3c:	f7ff ffaa 	bl	10d94 <FatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
   10e40:	2300      	movs	r3, #0
   10e42:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
   10e44:	70a3      	strb	r3, [r4, #2]
}
   10e46:	bd10      	pop	{r4, pc}

00010e48 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   10e48:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e4a:	b095      	sub	sp, #84	; 0x54
   10e4c:	9201      	str	r2, [sp, #4]
   10e4e:	461f      	mov	r7, r3
  FatFile() {}
   10e50:	2300      	movs	r3, #0
   10e52:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   10e56:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
   10e5a:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
   10e5e:	f8ad 3014 	strh.w	r3, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
   10e62:	7803      	ldrb	r3, [r0, #0]
   10e64:	2b00      	cmp	r3, #0
   10e66:	d14e      	bne.n	10f06 <FatFile::open(FatFile*, char const*, int)+0xbe>
   10e68:	4604      	mov	r4, r0
   10e6a:	460d      	mov	r5, r1
   10e6c:	780b      	ldrb	r3, [r1, #0]
   10e6e:	f013 0f70 	tst.w	r3, #112	; 0x70
   10e72:	d04c      	beq.n	10f0e <FatFile::open(FatFile*, char const*, int)+0xc6>
  if (isDirSeparator(*path)) {
   10e74:	4613      	mov	r3, r2
   10e76:	7812      	ldrb	r2, [r2, #0]
   10e78:	2a2f      	cmp	r2, #47	; 0x2f
   10e7a:	d028      	beq.n	10ece <FatFile::open(FatFile*, char const*, int)+0x86>
    if (!open(dirFile, &fname, O_RDONLY)) {
   10e7c:	2600      	movs	r6, #0
    if (!parsePathName(path, &fname, &path)) {
   10e7e:	ab01      	add	r3, sp, #4
   10e80:	aa02      	add	r2, sp, #8
   10e82:	9901      	ldr	r1, [sp, #4]
   10e84:	4620      	mov	r0, r4
   10e86:	f000 ffbb 	bl	11e00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
   10e8a:	4603      	mov	r3, r0
   10e8c:	2800      	cmp	r0, #0
   10e8e:	d03b      	beq.n	10f08 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (*path == 0) {
   10e90:	9b01      	ldr	r3, [sp, #4]
   10e92:	781b      	ldrb	r3, [r3, #0]
   10e94:	b37b      	cbz	r3, 10ef6 <FatFile::open(FatFile*, char const*, int)+0xae>
    if (!open(dirFile, &fname, O_RDONLY)) {
   10e96:	4633      	mov	r3, r6
   10e98:	aa02      	add	r2, sp, #8
   10e9a:	4629      	mov	r1, r5
   10e9c:	4620      	mov	r0, r4
   10e9e:	f000 fe2f 	bl	11b00 <FatFile::open(FatFile*, FatLfn_t*, int)>
   10ea2:	4603      	mov	r3, r0
   10ea4:	b380      	cbz	r0, 10f08 <FatFile::open(FatFile*, char const*, int)+0xc0>
    tmpDir = *this;
   10ea6:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
   10eaa:	46a6      	mov	lr, r4
   10eac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   10eb0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10eb4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   10eb8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10ebc:	f8de 3000 	ldr.w	r3, [lr]
   10ec0:	f8cc 3000 	str.w	r3, [ip]
    close();
   10ec4:	4620      	mov	r0, r4
   10ec6:	f7ff ffb7 	bl	10e38 <FatFile::close()>
    dirFile = &tmpDir;
   10eca:	ad0b      	add	r5, sp, #44	; 0x2c
    if (!parsePathName(path, &fname, &path)) {
   10ecc:	e7d7      	b.n	10e7e <FatFile::open(FatFile*, char const*, int)+0x36>
      path++;
   10ece:	3301      	adds	r3, #1
   10ed0:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
   10ed2:	781a      	ldrb	r2, [r3, #0]
   10ed4:	2a2f      	cmp	r2, #47	; 0x2f
   10ed6:	d0fa      	beq.n	10ece <FatFile::open(FatFile*, char const*, int)+0x86>
    if (*path == 0) {
   10ed8:	b92a      	cbnz	r2, 10ee6 <FatFile::open(FatFile*, char const*, int)+0x9e>
      return openRoot(dirFile->m_vol);
   10eda:	68a9      	ldr	r1, [r5, #8]
   10edc:	4620      	mov	r0, r4
   10ede:	f7ff fccc 	bl	1087a <FatFile::openRoot(FatVolume*)>
   10ee2:	4603      	mov	r3, r0
   10ee4:	e010      	b.n	10f08 <FatFile::open(FatFile*, char const*, int)+0xc0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   10ee6:	68a9      	ldr	r1, [r5, #8]
   10ee8:	a80b      	add	r0, sp, #44	; 0x2c
   10eea:	f7ff fcc6 	bl	1087a <FatFile::openRoot(FatVolume*)>
   10eee:	4603      	mov	r3, r0
   10ef0:	b150      	cbz	r0, 10f08 <FatFile::open(FatFile*, char const*, int)+0xc0>
    dirFile = &tmpDir;
   10ef2:	ad0b      	add	r5, sp, #44	; 0x2c
   10ef4:	e7c2      	b.n	10e7c <FatFile::open(FatFile*, char const*, int)+0x34>
  return open(dirFile, &fname, oflag);
   10ef6:	463b      	mov	r3, r7
   10ef8:	aa02      	add	r2, sp, #8
   10efa:	4629      	mov	r1, r5
   10efc:	4620      	mov	r0, r4
   10efe:	f000 fdff 	bl	11b00 <FatFile::open(FatFile*, FatLfn_t*, int)>
   10f02:	4603      	mov	r3, r0
   10f04:	e000      	b.n	10f08 <FatFile::open(FatFile*, char const*, int)+0xc0>
  return false;
   10f06:	2300      	movs	r3, #0
}
   10f08:	4618      	mov	r0, r3
   10f0a:	b015      	add	sp, #84	; 0x54
   10f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
   10f0e:	2300      	movs	r3, #0
   10f10:	e7fa      	b.n	10f08 <FatFile::open(FatFile*, char const*, int)+0xc0>

00010f12 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
   10f12:	b129      	cbz	r1, 10f20 <FatFile::open(FatVolume*, char const*, int)+0xe>
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
   10f14:	b508      	push	{r3, lr}
  return vol && open(vol->vwd(), path, oflag);
   10f16:	f501 6189 	add.w	r1, r1, #1096	; 0x448
   10f1a:	f7ff ff95 	bl	10e48 <FatFile::open(FatFile*, char const*, int)>
}
   10f1e:	bd08      	pop	{r3, pc}
  return vol && open(vol->vwd(), path, oflag);
   10f20:	2000      	movs	r0, #0
}
   10f22:	4770      	bx	lr

00010f24 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
   10f24:	b570      	push	{r4, r5, r6, lr}
   10f26:	4605      	mov	r5, r0
   10f28:	460c      	mov	r4, r1
  if (!sync()) {
   10f2a:	f7ff ff33 	bl	10d94 <FatFile::sync()>
   10f2e:	4606      	mov	r6, r0
   10f30:	b908      	cbnz	r0, 10f36 <FatFile::dirEntry(DirFat_t*)+0x12>
}
   10f32:	4630      	mov	r0, r6
   10f34:	bd70      	pop	{r4, r5, r6, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
   10f36:	2100      	movs	r1, #0
   10f38:	4628      	mov	r0, r5
   10f3a:	f7ff fc8d 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   10f3e:	4603      	mov	r3, r0
   10f40:	b180      	cbz	r0, 10f64 <FatFile::dirEntry(DirFat_t*)+0x40>
  memcpy(dst, dir, sizeof(DirFat_t));
   10f42:	6805      	ldr	r5, [r0, #0]
   10f44:	6840      	ldr	r0, [r0, #4]
   10f46:	6899      	ldr	r1, [r3, #8]
   10f48:	68da      	ldr	r2, [r3, #12]
   10f4a:	6025      	str	r5, [r4, #0]
   10f4c:	6060      	str	r0, [r4, #4]
   10f4e:	60a1      	str	r1, [r4, #8]
   10f50:	60e2      	str	r2, [r4, #12]
   10f52:	691d      	ldr	r5, [r3, #16]
   10f54:	6958      	ldr	r0, [r3, #20]
   10f56:	6999      	ldr	r1, [r3, #24]
   10f58:	69da      	ldr	r2, [r3, #28]
   10f5a:	6125      	str	r5, [r4, #16]
   10f5c:	6160      	str	r0, [r4, #20]
   10f5e:	61a1      	str	r1, [r4, #24]
   10f60:	61e2      	str	r2, [r4, #28]
  return true;
   10f62:	e7e6      	b.n	10f32 <FatFile::dirEntry(DirFat_t*)+0xe>
  return false;
   10f64:	2600      	movs	r6, #0
   10f66:	e7e4      	b.n	10f32 <FatFile::dirEntry(DirFat_t*)+0xe>

00010f68 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
   10f68:	b530      	push	{r4, r5, lr}
   10f6a:	b089      	sub	sp, #36	; 0x24
   10f6c:	460d      	mov	r5, r1
   10f6e:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
   10f70:	4669      	mov	r1, sp
   10f72:	f7ff ffd7 	bl	10f24 <FatFile::dirEntry(DirFat_t*)>
   10f76:	b128      	cbz	r0, 10f84 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
   10f78:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   10f7c:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.createTime);
   10f7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   10f82:	8023      	strh	r3, [r4, #0]
}
   10f84:	b009      	add	sp, #36	; 0x24
   10f86:	bd30      	pop	{r4, r5, pc}

00010f88 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
   10f88:	b530      	push	{r4, r5, lr}
   10f8a:	b089      	sub	sp, #36	; 0x24
   10f8c:	460d      	mov	r5, r1
   10f8e:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
   10f90:	4669      	mov	r1, sp
   10f92:	f7ff ffc7 	bl	10f24 <FatFile::dirEntry(DirFat_t*)>
   10f96:	b128      	cbz	r0, 10fa4 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
   10f98:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10f9c:	802b      	strh	r3, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
   10f9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
   10fa2:	8023      	strh	r3, [r4, #0]
}
   10fa4:	b009      	add	sp, #36	; 0x24
   10fa6:	bd30      	pop	{r4, r5, pc}

00010fa8 <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
   10fa8:	780b      	ldrb	r3, [r1, #0]
   10faa:	f013 0f70 	tst.w	r3, #112	; 0x70
   10fae:	d101      	bne.n	10fb4 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
  return false;
   10fb0:	2000      	movs	r0, #0
}
   10fb2:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
   10fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fb6:	b089      	sub	sp, #36	; 0x24
   10fb8:	4604      	mov	r4, r0
   10fba:	460d      	mov	r5, r1
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
   10fbc:	f640 2302 	movw	r3, #2562	; 0xa02
   10fc0:	f000 fd9e 	bl	11b00 <FatFile::open(FatFile*, FatLfn_t*, int)>
   10fc4:	b908      	cbnz	r0, 10fca <FatFile::mkdir(FatFile*, FatLfn_t*)+0x22>
}
   10fc6:	b009      	add	sp, #36	; 0x24
   10fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_flags = FILE_FLAG_READ;
   10fca:	2301      	movs	r3, #1
   10fcc:	70a3      	strb	r3, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
   10fce:	2310      	movs	r3, #16
   10fd0:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
   10fd2:	4620      	mov	r0, r4
   10fd4:	f7ff fbfe 	bl	107d4 <FatFile::addDirCluster()>
   10fd8:	2800      	cmp	r0, #0
   10fda:	d0f4      	beq.n	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  m_firstCluster = m_curCluster;
   10fdc:	6923      	ldr	r3, [r4, #16]
   10fde:	6223      	str	r3, [r4, #32]
    seekSet(0);
   10fe0:	2100      	movs	r1, #0
   10fe2:	4620      	mov	r0, r4
   10fe4:	f7ff fd88 	bl	10af8 <FatFile::seekSet(unsigned long)>
  if (!sync()) {
   10fe8:	4620      	mov	r0, r4
   10fea:	f7ff fed3 	bl	10d94 <FatFile::sync()>
   10fee:	2800      	cmp	r0, #0
   10ff0:	d0e9      	beq.n	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   10ff2:	2101      	movs	r1, #1
   10ff4:	4620      	mov	r0, r4
   10ff6:	f7ff fc2f 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   10ffa:	4686      	mov	lr, r0
   10ffc:	2800      	cmp	r0, #0
   10ffe:	d07b      	beq.n	110f8 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x150>
  dir->attributes = FAT_ATTRIB_DIRECTORY;
   11000:	2310      	movs	r3, #16
   11002:	72c3      	strb	r3, [r0, #11]
  memcpy(&dot, dir, sizeof(dot));
   11004:	46ec      	mov	ip, sp
   11006:	6800      	ldr	r0, [r0, #0]
   11008:	f8de 1004 	ldr.w	r1, [lr, #4]
   1100c:	f8de 2008 	ldr.w	r2, [lr, #8]
   11010:	f8de 300c 	ldr.w	r3, [lr, #12]
   11014:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11018:	f8de 0010 	ldr.w	r0, [lr, #16]
   1101c:	f8de 1014 	ldr.w	r1, [lr, #20]
   11020:	f8de 2018 	ldr.w	r2, [lr, #24]
   11024:	f8de 301c 	ldr.w	r3, [lr, #28]
   11028:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1102c:	f8be 6014 	ldrh.w	r6, [lr, #20]
   11030:	f8be 701a 	ldrh.w	r7, [lr, #26]
  dot.name[0] = '.';
   11034:	232e      	movs	r3, #46	; 0x2e
   11036:	f88d 3000 	strb.w	r3, [sp]
  for (uint8_t i = 1; i < 11; i++) {
   1103a:	466b      	mov	r3, sp
   1103c:	f10d 010a 	add.w	r1, sp, #10
    dot.name[i] = ' ';
   11040:	2220      	movs	r2, #32
   11042:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (uint8_t i = 1; i < 11; i++) {
   11046:	428b      	cmp	r3, r1
   11048:	d1fb      	bne.n	11042 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x9a>
  sector = m_vol->clusterStartSector(m_firstCluster);
   1104a:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   1104c:	6a23      	ldr	r3, [r4, #32]
   1104e:	3b02      	subs	r3, #2
   11050:	7982      	ldrb	r2, [r0, #6]
   11052:	4093      	lsls	r3, r2
   11054:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
   11056:	2201      	movs	r2, #1
   11058:	4419      	add	r1, r3
   1105a:	3028      	adds	r0, #40	; 0x28
   1105c:	f003 fdf9 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
   11060:	4684      	mov	ip, r0
   11062:	2800      	cmp	r0, #0
   11064:	d04a      	beq.n	110fc <FatFile::mkdir(FatFile*, FatLfn_t*)+0x154>
  memcpy(&dir[0], &dot, sizeof(dot));
   11066:	f8ad 6014 	strh.w	r6, [sp, #20]
   1106a:	f8ad 701a 	strh.w	r7, [sp, #26]
   1106e:	46ee      	mov	lr, sp
   11070:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   11074:	f8cc 0000 	str.w	r0, [ip]
   11078:	f8cc 1004 	str.w	r1, [ip, #4]
   1107c:	f8cc 2008 	str.w	r2, [ip, #8]
   11080:	f8cc 300c 	str.w	r3, [ip, #12]
   11084:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   11088:	f8cc 0010 	str.w	r0, [ip, #16]
   1108c:	f8cc 1014 	str.w	r1, [ip, #20]
   11090:	f8cc 2018 	str.w	r2, [ip, #24]
   11094:	f8cc 301c 	str.w	r3, [ip, #28]
  dot.name[1] = '.';
   11098:	232e      	movs	r3, #46	; 0x2e
   1109a:	f88d 3001 	strb.w	r3, [sp, #1]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
   1109e:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
   110a0:	0c1a      	lsrs	r2, r3, #16
   110a2:	f8ad 2014 	strh.w	r2, [sp, #20]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
   110a6:	f8ad 301a 	strh.w	r3, [sp, #26]
  memcpy(&dir[1], &dot, sizeof(dot));
   110aa:	466d      	mov	r5, sp
   110ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   110ae:	f8cc 0020 	str.w	r0, [ip, #32]
   110b2:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
   110b6:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
   110ba:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
   110be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   110c0:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
   110c4:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
   110c8:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
   110cc:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
   110d0:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   110d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   110d6:	f003 fd95 	bl	14c04 <FsCache::sync()>
   110da:	2800      	cmp	r0, #0
   110dc:	f43f af73 	beq.w	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
   110e0:	f504 700e 	add.w	r0, r4, #568	; 0x238
   110e4:	f003 fd8e 	bl	14c04 <FsCache::sync()>
   110e8:	2800      	cmp	r0, #0
   110ea:	f43f af6c 	beq.w	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
    return m_blockDev->syncDevice();
   110ee:	6820      	ldr	r0, [r4, #0]
   110f0:	6803      	ldr	r3, [r0, #0]
   110f2:	6a1b      	ldr	r3, [r3, #32]
   110f4:	4798      	blx	r3
   110f6:	e766      	b.n	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
  return false;
   110f8:	2000      	movs	r0, #0
   110fa:	e764      	b.n	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>
   110fc:	2000      	movs	r0, #0
   110fe:	e762      	b.n	10fc6 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x1e>

00011100 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
   11100:	b5f0      	push	{r4, r5, r6, r7, lr}
   11102:	b095      	sub	sp, #84	; 0x54
   11104:	9201      	str	r2, [sp, #4]
   11106:	461e      	mov	r6, r3
   11108:	2300      	movs	r3, #0
   1110a:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  FatFile() {}
   1110e:	f88d 3008 	strb.w	r3, [sp, #8]
   11112:	f88d 3009 	strb.w	r3, [sp, #9]
   11116:	f88d 300a 	strb.w	r3, [sp, #10]
  if (isOpen() || !parent->isDir()) {
   1111a:	7803      	ldrb	r3, [r0, #0]
   1111c:	2b00      	cmp	r3, #0
   1111e:	d150      	bne.n	111c2 <FatFile::mkdir(FatFile*, char const*, bool)+0xc2>
   11120:	4604      	mov	r4, r0
   11122:	460d      	mov	r5, r1
   11124:	780b      	ldrb	r3, [r1, #0]
   11126:	f013 0f70 	tst.w	r3, #112	; 0x70
   1112a:	d04e      	beq.n	111ca <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
  if (isDirSeparator(*path)) {
   1112c:	4613      	mov	r3, r2
   1112e:	7812      	ldrb	r2, [r2, #0]
   11130:	2a2f      	cmp	r2, #47	; 0x2f
   11132:	d001      	beq.n	11138 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!open(parent, &fname, O_RDONLY)) {
   11134:	2700      	movs	r7, #0
   11136:	e020      	b.n	1117a <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
      path++;
   11138:	3301      	adds	r3, #1
   1113a:	9301      	str	r3, [sp, #4]
    while (isDirSeparator(*path)) {
   1113c:	781a      	ldrb	r2, [r3, #0]
   1113e:	2a2f      	cmp	r2, #47	; 0x2f
   11140:	d0fa      	beq.n	11138 <FatFile::mkdir(FatFile*, char const*, bool)+0x38>
    if (!tmpDir.openRoot(parent->m_vol)) {
   11142:	68a9      	ldr	r1, [r5, #8]
   11144:	a802      	add	r0, sp, #8
   11146:	f7ff fb98 	bl	1087a <FatFile::openRoot(FatVolume*)>
   1114a:	4602      	mov	r2, r0
   1114c:	2800      	cmp	r0, #0
   1114e:	d039      	beq.n	111c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    parent = &tmpDir;
   11150:	ad02      	add	r5, sp, #8
   11152:	e7ef      	b.n	11134 <FatFile::mkdir(FatFile*, char const*, bool)+0x34>
    tmpDir = *this;
   11154:	f10d 0c08 	add.w	ip, sp, #8
   11158:	46a6      	mov	lr, r4
   1115a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1115e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11162:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   11166:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1116a:	f8de 3000 	ldr.w	r3, [lr]
   1116e:	f8cc 3000 	str.w	r3, [ip]
    close();
   11172:	4620      	mov	r0, r4
   11174:	f7ff fe60 	bl	10e38 <FatFile::close()>
    parent = &tmpDir;
   11178:	ad02      	add	r5, sp, #8
    if (!parsePathName(path, &fname, &path)) {
   1117a:	ab01      	add	r3, sp, #4
   1117c:	aa0b      	add	r2, sp, #44	; 0x2c
   1117e:	9901      	ldr	r1, [sp, #4]
   11180:	4620      	mov	r0, r4
   11182:	f000 fe3d 	bl	11e00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
   11186:	4602      	mov	r2, r0
   11188:	b1e0      	cbz	r0, 111c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
    if (!*path) {
   1118a:	9b01      	ldr	r3, [sp, #4]
   1118c:	781b      	ldrb	r3, [r3, #0]
   1118e:	b18b      	cbz	r3, 111b4 <FatFile::mkdir(FatFile*, char const*, bool)+0xb4>
    if (!open(parent, &fname, O_RDONLY)) {
   11190:	463b      	mov	r3, r7
   11192:	aa0b      	add	r2, sp, #44	; 0x2c
   11194:	4629      	mov	r1, r5
   11196:	4620      	mov	r0, r4
   11198:	f000 fcb2 	bl	11b00 <FatFile::open(FatFile*, FatLfn_t*, int)>
   1119c:	2800      	cmp	r0, #0
   1119e:	d1d9      	bne.n	11154 <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
      if (!pFlag || !mkdir(parent, &fname)) {
   111a0:	b1ae      	cbz	r6, 111ce <FatFile::mkdir(FatFile*, char const*, bool)+0xce>
   111a2:	aa0b      	add	r2, sp, #44	; 0x2c
   111a4:	4629      	mov	r1, r5
   111a6:	4620      	mov	r0, r4
   111a8:	f7ff fefe 	bl	10fa8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
   111ac:	4602      	mov	r2, r0
   111ae:	2800      	cmp	r0, #0
   111b0:	d1d0      	bne.n	11154 <FatFile::mkdir(FatFile*, char const*, bool)+0x54>
   111b2:	e007      	b.n	111c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return mkdir(parent, &fname);
   111b4:	aa0b      	add	r2, sp, #44	; 0x2c
   111b6:	4629      	mov	r1, r5
   111b8:	4620      	mov	r0, r4
   111ba:	f7ff fef5 	bl	10fa8 <FatFile::mkdir(FatFile*, FatLfn_t*)>
   111be:	4602      	mov	r2, r0
   111c0:	e000      	b.n	111c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
  return false;
   111c2:	2200      	movs	r2, #0
}
   111c4:	4610      	mov	r0, r2
   111c6:	b015      	add	sp, #84	; 0x54
   111c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return false;
   111ca:	2200      	movs	r2, #0
   111cc:	e7fa      	b.n	111c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>
   111ce:	4632      	mov	r2, r6
   111d0:	e7f8      	b.n	111c4 <FatFile::mkdir(FatFile*, char const*, bool)+0xc4>

000111d2 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
   111d2:	b570      	push	{r4, r5, r6, lr}
   111d4:	b09a      	sub	sp, #104	; 0x68
   111d6:	2300      	movs	r3, #0
   111d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   111dc:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
   111e0:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   111e4:	f88d 3000 	strb.w	r3, [sp]
   111e8:	f88d 3001 	strb.w	r3, [sp, #1]
   111ec:	f88d 3002 	strb.w	r3, [sp, #2]
  if (!(isFile() || isSubDir())) {
   111f0:	7803      	ldrb	r3, [r0, #0]
   111f2:	f013 0f18 	tst.w	r3, #24
   111f6:	f000 80e3 	beq.w	113c0 <FatFile::rename(FatFile*, char const*)+0x1ee>
   111fa:	4604      	mov	r4, r0
   111fc:	460d      	mov	r5, r1
   111fe:	4616      	mov	r6, r2
  if (m_vol != dirFile->m_vol) {
   11200:	6882      	ldr	r2, [r0, #8]
   11202:	688b      	ldr	r3, [r1, #8]
   11204:	429a      	cmp	r2, r3
   11206:	d002      	beq.n	1120e <FatFile::rename(FatFile*, char const*)+0x3c>
  return false;
   11208:	2000      	movs	r0, #0
}
   1120a:	b01a      	add	sp, #104	; 0x68
   1120c:	bd70      	pop	{r4, r5, r6, pc}
  sync();
   1120e:	f7ff fdc1 	bl	10d94 <FatFile::sync()>
  oldFile = *this;
   11212:	46ec      	mov	ip, sp
   11214:	46a6      	mov	lr, r4
   11216:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1121a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1121e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   11222:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11226:	f8de 3000 	ldr.w	r3, [lr]
   1122a:	f8cc 3000 	str.w	r3, [ip]
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
   1122e:	2100      	movs	r1, #0
   11230:	4620      	mov	r0, r4
   11232:	f7ff fb11 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   11236:	4686      	mov	lr, r0
   11238:	2800      	cmp	r0, #0
   1123a:	f000 80c3 	beq.w	113c4 <FatFile::rename(FatFile*, char const*)+0x1f2>
  memcpy(&entry, dir, sizeof(entry));
   1123e:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
   11242:	6800      	ldr	r0, [r0, #0]
   11244:	f8de 1004 	ldr.w	r1, [lr, #4]
   11248:	f8de 2008 	ldr.w	r2, [lr, #8]
   1124c:	f8de 300c 	ldr.w	r3, [lr, #12]
   11250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11254:	f8de 0010 	ldr.w	r0, [lr, #16]
   11258:	f8de 1014 	ldr.w	r1, [lr, #20]
   1125c:	f8de 2018 	ldr.w	r2, [lr, #24]
   11260:	f8de 301c 	ldr.w	r3, [lr, #28]
   11264:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
   11268:	7823      	ldrb	r3, [r4, #0]
   1126a:	f013 0f08 	tst.w	r3, #8
   1126e:	d00a      	beq.n	11286 <FatFile::rename(FatFile*, char const*)+0xb4>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
   11270:	f640 2301 	movw	r3, #2561	; 0xa01
   11274:	4632      	mov	r2, r6
   11276:	4629      	mov	r1, r5
   11278:	a809      	add	r0, sp, #36	; 0x24
   1127a:	f7ff fde5 	bl	10e48 <FatFile::open(FatFile*, char const*, int)>
   1127e:	2800      	cmp	r0, #0
   11280:	d0c3      	beq.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
  uint32_t dirCluster = 0;
   11282:	2600      	movs	r6, #0
   11284:	e008      	b.n	11298 <FatFile::rename(FatFile*, char const*)+0xc6>
    if (!file.mkdir(dirFile, newPath, false)) {
   11286:	2300      	movs	r3, #0
   11288:	4632      	mov	r2, r6
   1128a:	4629      	mov	r1, r5
   1128c:	a809      	add	r0, sp, #36	; 0x24
   1128e:	f7ff ff37 	bl	11100 <FatFile::mkdir(FatFile*, char const*, bool)>
   11292:	2800      	cmp	r0, #0
   11294:	d0b9      	beq.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
    dirCluster = file.m_firstCluster;
   11296:	9e11      	ldr	r6, [sp, #68]	; 0x44
  m_dirSector = file.m_dirSector;
   11298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1129a:	61a3      	str	r3, [r4, #24]
  m_dirIndex = file.m_dirIndex;
   1129c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   112a0:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
   112a2:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   112a6:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
   112a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112aa:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
   112ac:	2300      	movs	r3, #0
   112ae:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  file.m_flags = 0;
   112b2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   112b6:	2101      	movs	r1, #1
   112b8:	4620      	mov	r0, r4
   112ba:	f7ff facd 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   112be:	4603      	mov	r3, r0
   112c0:	2800      	cmp	r0, #0
   112c2:	f000 8081 	beq.w	113c8 <FatFile::rename(FatFile*, char const*)+0x1f6>
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
   112c6:	f8dd 5055 	ldr.w	r5, [sp, #85]	; 0x55
   112ca:	f8dd 0059 	ldr.w	r0, [sp, #89]	; 0x59
   112ce:	f8dd 105d 	ldr.w	r1, [sp, #93]	; 0x5d
   112d2:	f8dd 2061 	ldr.w	r2, [sp, #97]	; 0x61
   112d6:	f8c3 500d 	str.w	r5, [r3, #13]
   112da:	f8c3 0011 	str.w	r0, [r3, #17]
   112de:	f8c3 1015 	str.w	r1, [r3, #21]
   112e2:	f8c3 2019 	str.w	r2, [r3, #25]
   112e6:	f8bd 1065 	ldrh.w	r1, [sp, #101]	; 0x65
   112ea:	f89d 2067 	ldrb.w	r2, [sp, #103]	; 0x67
   112ee:	f8a3 101d 	strh.w	r1, [r3, #29]
   112f2:	77da      	strb	r2, [r3, #31]
  dir->attributes = entry.attributes;
   112f4:	f89d 2053 	ldrb.w	r2, [sp, #83]	; 0x53
   112f8:	72da      	strb	r2, [r3, #11]
  if (dirCluster) {
   112fa:	2e00      	cmp	r6, #0
   112fc:	d03e      	beq.n	1137c <FatFile::rename(FatFile*, char const*)+0x1aa>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
   112fe:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   11300:	1eb3      	subs	r3, r6, #2
   11302:	7982      	ldrb	r2, [r0, #6]
   11304:	4093      	lsls	r3, r2
   11306:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
   11308:	2200      	movs	r2, #0
   1130a:	4419      	add	r1, r3
   1130c:	3028      	adds	r0, #40	; 0x28
   1130e:	f003 fca0 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
   11312:	4684      	mov	ip, r0
   11314:	2800      	cmp	r0, #0
   11316:	d059      	beq.n	113cc <FatFile::rename(FatFile*, char const*)+0x1fa>
    memcpy(&entry, &dir[1], sizeof(entry));
   11318:	ad12      	add	r5, sp, #72	; 0x48
   1131a:	6a00      	ldr	r0, [r0, #32]
   1131c:	f8dc 1024 	ldr.w	r1, [ip, #36]	; 0x24
   11320:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
   11324:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
   11328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1132a:	f8dc 0030 	ldr.w	r0, [ip, #48]	; 0x30
   1132e:	f8dc 1034 	ldr.w	r1, [ip, #52]	; 0x34
   11332:	f8dc 2038 	ldr.w	r2, [ip, #56]	; 0x38
   11336:	f8dc 303c 	ldr.w	r3, [ip, #60]	; 0x3c
   1133a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
   1133c:	4631      	mov	r1, r6
   1133e:	68a0      	ldr	r0, [r4, #8]
   11340:	f001 fbba 	bl	12ab8 <FatPartition::freeChain(unsigned long)>
   11344:	2800      	cmp	r0, #0
   11346:	f43f af60 	beq.w	1120a <FatFile::rename(FatFile*, char const*)+0x38>
    sector = m_vol->clusterStartSector(m_firstCluster);
   1134a:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   1134c:	6a23      	ldr	r3, [r4, #32]
   1134e:	3b02      	subs	r3, #2
   11350:	7982      	ldrb	r2, [r0, #6]
   11352:	4093      	lsls	r3, r2
   11354:	6941      	ldr	r1, [r0, #20]
    return m_cache.prepare(sector, options);
   11356:	2201      	movs	r2, #1
   11358:	4419      	add	r1, r3
   1135a:	3028      	adds	r0, #40	; 0x28
   1135c:	f003 fc79 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
   11360:	4606      	mov	r6, r0
   11362:	2800      	cmp	r0, #0
   11364:	d034      	beq.n	113d0 <FatFile::rename(FatFile*, char const*)+0x1fe>
    memcpy(&dir[1], &entry, sizeof(entry));
   11366:	ad12      	add	r5, sp, #72	; 0x48
   11368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1136a:	6230      	str	r0, [r6, #32]
   1136c:	6271      	str	r1, [r6, #36]	; 0x24
   1136e:	62b2      	str	r2, [r6, #40]	; 0x28
   11370:	62f3      	str	r3, [r6, #44]	; 0x2c
   11372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11374:	6330      	str	r0, [r6, #48]	; 0x30
   11376:	6371      	str	r1, [r6, #52]	; 0x34
   11378:	63b2      	str	r2, [r6, #56]	; 0x38
   1137a:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
   1137c:	2300      	movs	r3, #0
   1137e:	9308      	str	r3, [sp, #32]
  oldFile.m_flags = FILE_FLAG_WRITE;
   11380:	2302      	movs	r3, #2
   11382:	f88d 3002 	strb.w	r3, [sp, #2]
  oldFile.m_attributes = FILE_ATTR_FILE;
   11386:	2308      	movs	r3, #8
   11388:	f88d 3000 	strb.w	r3, [sp]
  if (!oldFile.remove()) {
   1138c:	4668      	mov	r0, sp
   1138e:	f000 fda5 	bl	11edc <FatFile::remove()>
   11392:	2800      	cmp	r0, #0
   11394:	f43f af39 	beq.w	1120a <FatFile::rename(FatFile*, char const*)+0x38>
  return m_vol->cacheSync();
   11398:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   1139a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1139e:	f003 fc31 	bl	14c04 <FsCache::sync()>
   113a2:	2800      	cmp	r0, #0
   113a4:	f43f af31 	beq.w	1120a <FatFile::rename(FatFile*, char const*)+0x38>
   113a8:	f504 700e 	add.w	r0, r4, #568	; 0x238
   113ac:	f003 fc2a 	bl	14c04 <FsCache::sync()>
   113b0:	2800      	cmp	r0, #0
   113b2:	f43f af2a 	beq.w	1120a <FatFile::rename(FatFile*, char const*)+0x38>
    return m_blockDev->syncDevice();
   113b6:	6820      	ldr	r0, [r4, #0]
   113b8:	6803      	ldr	r3, [r0, #0]
   113ba:	6a1b      	ldr	r3, [r3, #32]
   113bc:	4798      	blx	r3
   113be:	e724      	b.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
  return false;
   113c0:	2000      	movs	r0, #0
   113c2:	e722      	b.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
   113c4:	2000      	movs	r0, #0
   113c6:	e720      	b.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
   113c8:	2000      	movs	r0, #0
   113ca:	e71e      	b.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
   113cc:	2000      	movs	r0, #0
   113ce:	e71c      	b.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>
   113d0:	2000      	movs	r0, #0
   113d2:	e71a      	b.n	1120a <FatFile::rename(FatFile*, char const*)+0x38>

000113d4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   113d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113d8:	b083      	sub	sp, #12
   113da:	9101      	str	r1, [sp, #4]
   113dc:	461e      	mov	r6, r3
   113de:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   113e2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   113e6:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   113ea:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
   113ee:	7803      	ldrb	r3, [r0, #0]
   113f0:	f013 0f08 	tst.w	r3, #8
   113f4:	d060      	beq.n	114b8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe4>
   113f6:	4605      	mov	r5, r0
      || year > 2107
   113f8:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
   113fc:	b294      	uxth	r4, r2
   113fe:	2c7f      	cmp	r4, #127	; 0x7f
   11400:	d85e      	bhi.n	114c0 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>
      || month > 12
   11402:	1e73      	subs	r3, r6, #1
   11404:	b2db      	uxtb	r3, r3
   11406:	2b0b      	cmp	r3, #11
   11408:	d85c      	bhi.n	114c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>
      || day > 31
   1140a:	1e7b      	subs	r3, r7, #1
   1140c:	b2db      	uxtb	r3, r3
   1140e:	2b1e      	cmp	r3, #30
   11410:	d85a      	bhi.n	114c8 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>
      || minute > 59
   11412:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
   11416:	bf98      	it	ls
   11418:	f1b9 0f17 	cmpls.w	r9, #23
   1141c:	bf8c      	ite	hi
   1141e:	f04f 0b01 	movhi.w	fp, #1
   11422:	f04f 0b00 	movls.w	fp, #0
   11426:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
   1142a:	bf88      	it	hi
   1142c:	f04b 0b01 	orrhi.w	fp, fp, #1
      || second > 59) {
   11430:	f1bb 0f00 	cmp.w	fp, #0
   11434:	d001      	beq.n	1143a <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x66>
    setLe16(dir->modifyTime, dirTime);
  }
  return m_vol->cacheSync();

 fail:
  return false;
   11436:	2000      	movs	r0, #0
   11438:	e03f      	b.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  if (!sync()) {
   1143a:	f7ff fcab 	bl	10d94 <FatFile::sync()>
   1143e:	2800      	cmp	r0, #0
   11440:	d03b      	beq.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   11442:	2101      	movs	r1, #1
   11444:	4628      	mov	r0, r5
   11446:	f7ff fa07 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   1144a:	4601      	mov	r1, r0
   1144c:	2800      	cmp	r0, #0
   1144e:	d03d      	beq.n	114cc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
   11450:	ea47 1346 	orr.w	r3, r7, r6, lsl #5
   11454:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
   11458:	b29b      	uxth	r3, r3
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
   1145a:	ea4f 0258 	mov.w	r2, r8, lsr #1
   1145e:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
   11462:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
   11466:	b292      	uxth	r2, r2
  if (flags & T_ACCESS) {
   11468:	9801      	ldr	r0, [sp, #4]
   1146a:	f010 0f01 	tst.w	r0, #1
   1146e:	bf18      	it	ne
   11470:	824b      	strhne	r3, [r1, #18]
  if (flags & T_CREATE) {
   11472:	9801      	ldr	r0, [sp, #4]
   11474:	f010 0f02 	tst.w	r0, #2
   11478:	d008      	beq.n	1148c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb8>
   1147a:	820b      	strh	r3, [r1, #16]
   1147c:	81ca      	strh	r2, [r1, #14]
    dir->createTimeMs = second & 1 ? 100 : 0;
   1147e:	f018 0801 	ands.w	r8, r8, #1
   11482:	bf18      	it	ne
   11484:	f04f 0864 	movne.w	r8, #100	; 0x64
   11488:	f881 800d 	strb.w	r8, [r1, #13]
  if (flags & T_WRITE) {
   1148c:	9801      	ldr	r0, [sp, #4]
   1148e:	f010 0f04 	tst.w	r0, #4
   11492:	d001      	beq.n	11498 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc4>
   11494:	830b      	strh	r3, [r1, #24]
   11496:	82ca      	strh	r2, [r1, #22]
  return m_vol->cacheSync();
   11498:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   1149a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1149e:	f003 fbb1 	bl	14c04 <FsCache::sync()>
   114a2:	b150      	cbz	r0, 114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
   114a4:	f504 700e 	add.w	r0, r4, #568	; 0x238
   114a8:	f003 fbac 	bl	14c04 <FsCache::sync()>
   114ac:	b128      	cbz	r0, 114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
    return m_blockDev->syncDevice();
   114ae:	6820      	ldr	r0, [r4, #0]
   114b0:	6803      	ldr	r3, [r0, #0]
   114b2:	6a1b      	ldr	r3, [r3, #32]
   114b4:	4798      	blx	r3
   114b6:	e000      	b.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
  return false;
   114b8:	2000      	movs	r0, #0
}
   114ba:	b003      	add	sp, #12
   114bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   114c0:	2000      	movs	r0, #0
   114c2:	e7fa      	b.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
   114c4:	2000      	movs	r0, #0
   114c6:	e7f8      	b.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
   114c8:	2000      	movs	r0, #0
   114ca:	e7f6      	b.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>
   114cc:	4658      	mov	r0, fp
   114ce:	e7f4      	b.n	114ba <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe6>

000114d0 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
   114d0:	7883      	ldrb	r3, [r0, #2]
   114d2:	f013 0f02 	tst.w	r3, #2
   114d6:	d02f      	beq.n	11538 <FatFile::truncate()+0x68>
bool FatFile::truncate() {
   114d8:	b510      	push	{r4, lr}
   114da:	b082      	sub	sp, #8
   114dc:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
   114de:	6a01      	ldr	r1, [r0, #32]
   114e0:	b361      	cbz	r1, 1153c <FatFile::truncate()+0x6c>
      return true;
  }
  if (m_curCluster) {
   114e2:	6903      	ldr	r3, [r0, #16]
   114e4:	b93b      	cbnz	r3, 114f6 <FatFile::truncate()+0x26>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
   114e6:	9101      	str	r1, [sp, #4]
    m_firstCluster = 0;
   114e8:	2300      	movs	r3, #0
   114ea:	6203      	str	r3, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
   114ec:	68a0      	ldr	r0, [r4, #8]
   114ee:	f001 fae3 	bl	12ab8 <FatPartition::freeChain(unsigned long)>
   114f2:	b968      	cbnz	r0, 11510 <FatFile::truncate()+0x40>
   114f4:	e015      	b.n	11522 <FatFile::truncate()+0x52>
    toFree = 0;
   114f6:	2200      	movs	r2, #0
   114f8:	9201      	str	r2, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
   114fa:	aa01      	add	r2, sp, #4
   114fc:	4619      	mov	r1, r3
   114fe:	6880      	ldr	r0, [r0, #8]
   11500:	f001 f971 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
   11504:	2800      	cmp	r0, #0
   11506:	db1b      	blt.n	11540 <FatFile::truncate()+0x70>
    if (fg) {
   11508:	b968      	cbnz	r0, 11526 <FatFile::truncate()+0x56>
  if (toFree) {
   1150a:	9901      	ldr	r1, [sp, #4]
   1150c:	2900      	cmp	r1, #0
   1150e:	d1ed      	bne.n	114ec <FatFile::truncate()+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
   11510:	6963      	ldr	r3, [r4, #20]
   11512:	61e3      	str	r3, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
   11514:	78a3      	ldrb	r3, [r4, #2]
   11516:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1151a:	70a3      	strb	r3, [r4, #2]
  return sync();
   1151c:	4620      	mov	r0, r4
   1151e:	f7ff fc39 	bl	10d94 <FatFile::sync()>

 fail:
  return false;
}
   11522:	b002      	add	sp, #8
   11524:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   11526:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   1152a:	6921      	ldr	r1, [r4, #16]
   1152c:	68a0      	ldr	r0, [r4, #8]
   1152e:	f001 f9e9 	bl	12904 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
   11532:	2800      	cmp	r0, #0
   11534:	d1e9      	bne.n	1150a <FatFile::truncate()+0x3a>
   11536:	e7f4      	b.n	11522 <FatFile::truncate()+0x52>
  return false;
   11538:	2000      	movs	r0, #0
}
   1153a:	4770      	bx	lr
      return true;
   1153c:	2001      	movs	r0, #1
   1153e:	e7f0      	b.n	11522 <FatFile::truncate()+0x52>
  return false;
   11540:	2000      	movs	r0, #0
   11542:	e7ee      	b.n	11522 <FatFile::truncate()+0x52>

00011544 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
   11544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11548:	4604      	mov	r4, r0
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
   1154a:	7883      	ldrb	r3, [r0, #2]
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
   1154c:	f013 0f02 	tst.w	r3, #2
   11550:	d017      	beq.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
   11552:	4688      	mov	r8, r1
   11554:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
   11556:	f013 0f08 	tst.w	r3, #8
   1155a:	d10d      	bne.n	11578 <FatFile::write(void const*, unsigned int)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   1155c:	6963      	ldr	r3, [r4, #20]
   1155e:	43db      	mvns	r3, r3
   11560:	454b      	cmp	r3, r9
   11562:	d30e      	bcc.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   11564:	f1b9 0f00 	cmp.w	r9, #0
   11568:	f000 80ac 	beq.w	116c4 <FatFile::write(void const*, unsigned int)+0x180>
  size_t nToWrite = nbyte;
   1156c:	464f      	mov	r7, r9
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   1156e:	f104 0b10 	add.w	fp, r4, #16
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
   11572:	f04f 0a01 	mov.w	sl, #1
   11576:	e064      	b.n	11642 <FatFile::write(void const*, unsigned int)+0xfe>
    if (!seekSet(m_fileSize)) {
   11578:	69c1      	ldr	r1, [r0, #28]
   1157a:	f7ff fabd 	bl	10af8 <FatFile::seekSet(unsigned long)>
   1157e:	2800      	cmp	r0, #0
   11580:	d1ec      	bne.n	1155c <FatFile::write(void const*, unsigned int)+0x18>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
   11582:	7863      	ldrb	r3, [r4, #1]
   11584:	f043 0301 	orr.w	r3, r3, #1
   11588:	7063      	strb	r3, [r4, #1]
  return 0;
   1158a:	2000      	movs	r0, #0
}
   1158c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   11590:	465a      	mov	r2, fp
   11592:	f001 f928 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
   11596:	2800      	cmp	r0, #0
   11598:	dbf3      	blt.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
        if (fg == 0) {
   1159a:	b938      	cbnz	r0, 115ac <FatFile::write(void const*, unsigned int)+0x68>
          if (!addCluster()) {
   1159c:	4620      	mov	r0, r4
   1159e:	f7ff f8fb 	bl	10798 <FatFile::addCluster()>
   115a2:	b918      	cbnz	r0, 115ac <FatFile::write(void const*, unsigned int)+0x68>
   115a4:	e7ed      	b.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
        if (m_firstCluster == 0) {
   115a6:	6a23      	ldr	r3, [r4, #32]
   115a8:	b1eb      	cbz	r3, 115e6 <FatFile::write(void const*, unsigned int)+0xa2>
          m_curCluster = m_firstCluster;
   115aa:	6123      	str	r3, [r4, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
   115ac:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   115ae:	6921      	ldr	r1, [r4, #16]
   115b0:	3902      	subs	r1, #2
   115b2:	7983      	ldrb	r3, [r0, #6]
   115b4:	4099      	lsls	r1, r3
   115b6:	6943      	ldr	r3, [r0, #20]
   115b8:	4419      	add	r1, r3
                      + sectorOfCluster;
   115ba:	4429      	add	r1, r5
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
   115bc:	b916      	cbnz	r6, 115c4 <FatFile::write(void const*, unsigned int)+0x80>
   115be:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   115c2:	d218      	bcs.n	115f6 <FatFile::write(void const*, unsigned int)+0xb2>
      n = m_vol->bytesPerSector() - sectorOffset;
   115c4:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
   115c8:	42bd      	cmp	r5, r7
   115ca:	bf28      	it	cs
   115cc:	463d      	movcs	r5, r7
      if (sectorOffset == 0 &&
   115ce:	bb16      	cbnz	r6, 11616 <FatFile::write(void const*, unsigned int)+0xd2>
   115d0:	6962      	ldr	r2, [r4, #20]
   115d2:	69e3      	ldr	r3, [r4, #28]
   115d4:	429a      	cmp	r2, r3
   115d6:	d24b      	bcs.n	11670 <FatFile::write(void const*, unsigned int)+0x12c>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
   115d8:	78a3      	ldrb	r3, [r4, #2]
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
   115da:	f013 0f20 	tst.w	r3, #32
   115de:	bf0c      	ite	eq
   115e0:	2201      	moveq	r2, #1
   115e2:	2205      	movne	r2, #5
   115e4:	e018      	b.n	11618 <FatFile::write(void const*, unsigned int)+0xd4>
          if (!addCluster()) {
   115e6:	4620      	mov	r0, r4
   115e8:	f7ff f8d6 	bl	10798 <FatFile::addCluster()>
   115ec:	2800      	cmp	r0, #0
   115ee:	d0c8      	beq.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
          m_firstCluster = m_curCluster;
   115f0:	6923      	ldr	r3, [r4, #16]
   115f2:	6223      	str	r3, [r4, #32]
   115f4:	e7da      	b.n	115ac <FatFile::write(void const*, unsigned int)+0x68>
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
   115f6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   115fa:	d241      	bcs.n	11680 <FatFile::write(void const*, unsigned int)+0x13c>
    if (isCached(sector)) {
   115fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   115fe:	4299      	cmp	r1, r3
   11600:	d059      	beq.n	116b6 <FatFile::write(void const*, unsigned int)+0x172>
    return m_blockDev->writeSector(sector, src);
   11602:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   11604:	6803      	ldr	r3, [r0, #0]
   11606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11608:	4642      	mov	r2, r8
   1160a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
   1160c:	2800      	cmp	r0, #0
   1160e:	d0b8      	beq.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
      n = m_vol->bytesPerSector();
   11610:	f44f 7500 	mov.w	r5, #512	; 0x200
   11614:	e00f      	b.n	11636 <FatFile::write(void const*, unsigned int)+0xf2>
        cacheOption = FsCache::CACHE_FOR_WRITE;
   11616:	4652      	mov	r2, sl
    return m_cache.prepare(sector, options);
   11618:	3028      	adds	r0, #40	; 0x28
   1161a:	f003 fb1a 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   1161e:	2800      	cmp	r0, #0
   11620:	d0af      	beq.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
      memcpy(dst, src, n);
   11622:	462a      	mov	r2, r5
   11624:	4641      	mov	r1, r8
   11626:	4430      	add	r0, r6
   11628:	f005 fe62 	bl	172f0 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
   1162c:	68a0      	ldr	r0, [r4, #8]
   1162e:	442e      	add	r6, r5
   11630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   11634:	d01e      	beq.n	11674 <FatFile::write(void const*, unsigned int)+0x130>
    m_curPosition += n;
   11636:	6963      	ldr	r3, [r4, #20]
   11638:	442b      	add	r3, r5
   1163a:	6163      	str	r3, [r4, #20]
    src += n;
   1163c:	44a8      	add	r8, r5
  while (nToWrite) {
   1163e:	1b7f      	subs	r7, r7, r5
   11640:	d040      	beq.n	116c4 <FatFile::write(void const*, unsigned int)+0x180>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
   11642:	68a0      	ldr	r0, [r4, #8]
   11644:	6963      	ldr	r3, [r4, #20]
    return (position >> 9) & m_clusterSectorMask;
   11646:	7945      	ldrb	r5, [r0, #5]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
   11648:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
   1164c:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
   11650:	d1ac      	bne.n	115ac <FatFile::write(void const*, unsigned int)+0x68>
   11652:	2e00      	cmp	r6, #0
   11654:	d1aa      	bne.n	115ac <FatFile::write(void const*, unsigned int)+0x68>
      if (m_curCluster != 0) {
   11656:	6921      	ldr	r1, [r4, #16]
   11658:	2900      	cmp	r1, #0
   1165a:	d0a4      	beq.n	115a6 <FatFile::write(void const*, unsigned int)+0x62>
        if (isContiguous() && m_fileSize > m_curPosition) {
   1165c:	78a2      	ldrb	r2, [r4, #2]
   1165e:	f012 0f40 	tst.w	r2, #64	; 0x40
   11662:	d095      	beq.n	11590 <FatFile::write(void const*, unsigned int)+0x4c>
   11664:	69e2      	ldr	r2, [r4, #28]
   11666:	4293      	cmp	r3, r2
   11668:	d292      	bcs.n	11590 <FatFile::write(void const*, unsigned int)+0x4c>
          m_curCluster++;
   1166a:	3101      	adds	r1, #1
   1166c:	6121      	str	r1, [r4, #16]
        if (fg == 0) {
   1166e:	e79d      	b.n	115ac <FatFile::write(void const*, unsigned int)+0x68>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
   11670:	2205      	movs	r2, #5
   11672:	e7d1      	b.n	11618 <FatFile::write(void const*, unsigned int)+0xd4>
    return m_cache.sync();
   11674:	3028      	adds	r0, #40	; 0x28
   11676:	f003 fac5 	bl	14c04 <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
   1167a:	2800      	cmp	r0, #0
   1167c:	d1db      	bne.n	11636 <FatFile::write(void const*, unsigned int)+0xf2>
   1167e:	e780      	b.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
   11680:	7903      	ldrb	r3, [r0, #4]
   11682:	1b5b      	subs	r3, r3, r5
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
   11684:	0a7a      	lsrs	r2, r7, #9
   11686:	4293      	cmp	r3, r2
   11688:	bf28      	it	cs
   1168a:	4613      	movcs	r3, r2
      n = nSector << m_vol->bytesPerSectorShift();
   1168c:	025d      	lsls	r5, r3, #9
    return sector <= m_sector && m_sector < (sector + count);
   1168e:	6b42      	ldr	r2, [r0, #52]	; 0x34
   11690:	4291      	cmp	r1, r2
   11692:	d808      	bhi.n	116a6 <FatFile::write(void const*, unsigned int)+0x162>
   11694:	18ce      	adds	r6, r1, r3
   11696:	42b2      	cmp	r2, r6
   11698:	d205      	bcs.n	116a6 <FatFile::write(void const*, unsigned int)+0x162>
    m_status = 0;
   1169a:	2200      	movs	r2, #0
   1169c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   116a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   116a4:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
   116a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   116a8:	6802      	ldr	r2, [r0, #0]
   116aa:	6a96      	ldr	r6, [r2, #40]	; 0x28
   116ac:	4642      	mov	r2, r8
   116ae:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
   116b0:	2800      	cmp	r0, #0
   116b2:	d1c0      	bne.n	11636 <FatFile::write(void const*, unsigned int)+0xf2>
   116b4:	e765      	b.n	11582 <FatFile::write(void const*, unsigned int)+0x3e>
    m_status = 0;
   116b6:	2300      	movs	r3, #0
   116b8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   116bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   116c0:	6343      	str	r3, [r0, #52]	; 0x34
  }
   116c2:	e79e      	b.n	11602 <FatFile::write(void const*, unsigned int)+0xbe>
  if (m_curPosition > m_fileSize) {
   116c4:	6963      	ldr	r3, [r4, #20]
   116c6:	69e2      	ldr	r2, [r4, #28]
   116c8:	4293      	cmp	r3, r2
   116ca:	d906      	bls.n	116da <FatFile::write(void const*, unsigned int)+0x196>
    m_fileSize = m_curPosition;
   116cc:	61e3      	str	r3, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
   116ce:	78a3      	ldrb	r3, [r4, #2]
   116d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   116d4:	70a3      	strb	r3, [r4, #2]
  return nbyte;
   116d6:	4648      	mov	r0, r9
   116d8:	e758      	b.n	1158c <FatFile::write(void const*, unsigned int)+0x48>
  } else if (FsDateTime::callback) {
   116da:	4b05      	ldr	r3, [pc, #20]	; (116f0 <FatFile::write(void const*, unsigned int)+0x1ac>)
   116dc:	681b      	ldr	r3, [r3, #0]
   116de:	b12b      	cbz	r3, 116ec <FatFile::write(void const*, unsigned int)+0x1a8>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   116e0:	78a3      	ldrb	r3, [r4, #2]
   116e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   116e6:	70a3      	strb	r3, [r4, #2]
  return nbyte;
   116e8:	4648      	mov	r0, r9
   116ea:	e74f      	b.n	1158c <FatFile::write(void const*, unsigned int)+0x48>
   116ec:	4648      	mov	r0, r9
   116ee:	e74d      	b.n	1158c <FatFile::write(void const*, unsigned int)+0x48>
   116f0:	20006d3c 	.word	0x20006d3c

000116f4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   116f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f8:	b08d      	sub	sp, #52	; 0x34
   116fa:	4680      	mov	r8, r0
   116fc:	9100      	str	r1, [sp, #0]
   116fe:	4614      	mov	r4, r2
   11700:	461f      	mov	r7, r3
  FatFile dir = *this;
   11702:	ad03      	add	r5, sp, #12
   11704:	4606      	mov	r6, r0
   11706:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1170a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1170c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1170e:	6833      	ldr	r3, [r6, #0]
   11710:	602b      	str	r3, [r5, #0]
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
   11712:	6823      	ldr	r3, [r4, #0]
   11714:	6063      	str	r3, [r4, #4]
    ls = 0;  // lowSurrogate
   11716:	2300      	movs	r3, #0
   11718:	81a3      	strh	r3, [r4, #12]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   1171a:	9701      	str	r7, [sp, #4]
   1171c:	2f00      	cmp	r7, #0
   1171e:	d040      	beq.n	117a2 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xae>
   11720:	f04f 0b01 	mov.w	fp, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
   11724:	9b00      	ldr	r3, [sp, #0]
   11726:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   1172a:	b289      	uxth	r1, r1
   1172c:	0149      	lsls	r1, r1, #5
   1172e:	a803      	add	r0, sp, #12
   11730:	f7ff f9e2 	bl	10af8 <FatFile::seekSet(unsigned long)>
   11734:	4682      	mov	sl, r0
   11736:	b340      	cbz	r0, 1178a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
   11738:	2100      	movs	r1, #0
   1173a:	a803      	add	r0, sp, #12
   1173c:	f7ff f9ba 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!ldir) {
   11740:	4681      	mov	r9, r0
   11742:	b388      	cbz	r0, 117a8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb4>
   11744:	2600      	movs	r6, #0
   11746:	e00f      	b.n	11768 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x74>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
   11748:	4620      	mov	r0, r4
   1174a:	f003 fac1 	bl	14cd0 <FsName::get16()>
   1174e:	4607      	mov	r7, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
   11750:	4628      	mov	r0, r5
   11752:	f003 fbdb 	bl	14f0c <toUpcase(unsigned short)>
   11756:	4605      	mov	r5, r0
   11758:	4638      	mov	r0, r7
   1175a:	f003 fbd7 	bl	14f0c <toUpcase(unsigned short)>
   1175e:	4285      	cmp	r5, r0
   11760:	d125      	bne.n	117ae <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xba>
    for (uint8_t i = 0; i < 13; i++) {
   11762:	3601      	adds	r6, #1
   11764:	2e0d      	cmp	r6, #13
   11766:	d014      	beq.n	11792 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9e>
      uint16_t u = getLfnChar(ldir, i);
   11768:	b2f2      	uxtb	r2, r6
   1176a:	4649      	mov	r1, r9
   1176c:	4640      	mov	r0, r8
   1176e:	f000 ff19 	bl	125a4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
   11772:	4605      	mov	r5, r0
    return !ls && next == end;
   11774:	89a3      	ldrh	r3, [r4, #12]
   11776:	2b00      	cmp	r3, #0
   11778:	d1e6      	bne.n	11748 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
   1177a:	6862      	ldr	r2, [r4, #4]
   1177c:	68a3      	ldr	r3, [r4, #8]
   1177e:	429a      	cmp	r2, r3
   11780:	d1e2      	bne.n	11748 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x54>
        return u == 0;
   11782:	fab0 fa80 	clz	sl, r0
   11786:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  }
  return true;

 fail:
  return false;
}
   1178a:	4650      	mov	r0, sl
   1178c:	b00d      	add	sp, #52	; 0x34
   1178e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   11792:	f10b 0b01 	add.w	fp, fp, #1
   11796:	fa5f fb8b 	uxtb.w	fp, fp
   1179a:	9b01      	ldr	r3, [sp, #4]
   1179c:	455b      	cmp	r3, fp
   1179e:	d2c1      	bcs.n	11724 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x30>
   117a0:	e7f3      	b.n	1178a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return true;
   117a2:	f04f 0a01 	mov.w	sl, #1
   117a6:	e7f0      	b.n	1178a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
  return false;
   117a8:	f04f 0a00 	mov.w	sl, #0
   117ac:	e7ed      	b.n	1178a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>
        return false;
   117ae:	f04f 0a00 	mov.w	sl, #0
   117b2:	e7ea      	b.n	1178a <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x96>

000117b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   117b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117b8:	b08f      	sub	sp, #60	; 0x3c
   117ba:	9102      	str	r1, [sp, #8]
   117bc:	4617      	mov	r7, r2
   117be:	461e      	mov	r6, r3
  FatFile dir = *this;
   117c0:	ad05      	add	r5, sp, #20
   117c2:	4604      	mov	r4, r0
   117c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   117c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   117c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   117ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   117cc:	6823      	ldr	r3, [r4, #0]
   117ce:	602b      	str	r3, [r5, #0]
    for (uint8_t i = 0; i < 11; i++) {
   117d0:	f107 0215 	add.w	r2, r7, #21
   117d4:	f107 0120 	add.w	r1, r7, #32
    uint8_t sum = 0;
   117d8:	f04f 0a00 	mov.w	sl, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   117dc:	ea4f 13ca 	mov.w	r3, sl, lsl #7
   117e0:	ea43 035a 	orr.w	r3, r3, sl, lsr #1
   117e4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   117e8:	fa50 f383 	uxtab	r3, r0, r3
   117ec:	fa5f fa83 	uxtb.w	sl, r3
    for (uint8_t i = 0; i < 11; i++) {
   117f0:	428a      	cmp	r2, r1
   117f2:	d1f3      	bne.n	117dc <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x28>
    next = begin;
   117f4:	683b      	ldr	r3, [r7, #0]
   117f6:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
   117f8:	2300      	movs	r3, #0
   117fa:	81bb      	strh	r3, [r7, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
   117fc:	2e00      	cmp	r6, #0
   117fe:	d064      	beq.n	118ca <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x116>
   11800:	f04f 0b01 	mov.w	fp, #1
  uint8_t fc = 0;
   11804:	2400      	movs	r4, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
   11806:	f8cd a00c 	str.w	sl, [sp, #12]
   1180a:	46b2      	mov	sl, r6
   1180c:	e032      	b.n	11874 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc0>
    for (uint8_t i = 0; i < 13; i++) {
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
   1180e:	4638      	mov	r0, r7
   11810:	f003 fa5e 	bl	14cd0 <FsName::get16()>
  if (i < 5) {
   11814:	f1b8 0f04 	cmp.w	r8, #4
   11818:	d818      	bhi.n	1184c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x98>
    setLe16(ldir->unicode1 + 2*i, c);
   1181a:	b2f3      	uxtb	r3, r6
   1181c:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   11820:	f8a3 0001 	strh.w	r0, [r3, #1]
   11824:	3601      	adds	r6, #1
   11826:	3501      	adds	r5, #1
   11828:	b2ed      	uxtb	r5, r5
   1182a:	fa5f f886 	uxtb.w	r8, r6
    return !ls && next == end;
   1182e:	89bb      	ldrh	r3, [r7, #12]
   11830:	2b00      	cmp	r3, #0
   11832:	d1ec      	bne.n	1180e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
   11834:	687a      	ldr	r2, [r7, #4]
   11836:	68bb      	ldr	r3, [r7, #8]
   11838:	429a      	cmp	r2, r3
   1183a:	d1e8      	bne.n	1180e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5a>
        cp = fc++ ? 0XFFFF : 0;
   1183c:	1c63      	adds	r3, r4, #1
   1183e:	1e20      	subs	r0, r4, #0
   11840:	bf18      	it	ne
   11842:	2001      	movne	r0, #1
   11844:	4240      	negs	r0, r0
   11846:	b280      	uxth	r0, r0
   11848:	b2dc      	uxtb	r4, r3
   1184a:	e7e3      	b.n	11814 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x60>
  } else if (i < 11) {
   1184c:	f1b8 0f0a 	cmp.w	r8, #10
   11850:	d804      	bhi.n	1185c <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xa8>
    setLe16(ldir->unicode2 + 2*i -10, c);
   11852:	b2f3      	uxtb	r3, r6
   11854:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   11858:	8098      	strh	r0, [r3, #4]
}
   1185a:	e7e3      	b.n	11824 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
    setLe16(ldir->unicode3 + 2*i - 22, c);
   1185c:	b2f3      	uxtb	r3, r6
  *reinterpret_cast<uint16_t*>(dst) = src;
   1185e:	eb09 0343 	add.w	r3, r9, r3, lsl #1
   11862:	80d8      	strh	r0, [r3, #6]
    for (uint8_t i = 0; i < 13; i++) {
   11864:	2d0c      	cmp	r5, #12
   11866:	d9dd      	bls.n	11824 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x70>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   11868:	f10b 0b01 	add.w	fp, fp, #1
   1186c:	fa5f fb8b 	uxtb.w	fp, fp
   11870:	45da      	cmp	sl, fp
   11872:	d32c      	bcc.n	118ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
   11874:	9b02      	ldr	r3, [sp, #8]
   11876:	eba3 010b 	sub.w	r1, r3, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   1187a:	b289      	uxth	r1, r1
   1187c:	0149      	lsls	r1, r1, #5
   1187e:	a805      	add	r0, sp, #20
   11880:	f7ff f93a 	bl	10af8 <FatFile::seekSet(unsigned long)>
   11884:	9001      	str	r0, [sp, #4]
   11886:	b310      	cbz	r0, 118ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
   11888:	2100      	movs	r1, #0
   1188a:	a805      	add	r0, sp, #20
   1188c:	f7ff f912 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!ldir) {
   11890:	4681      	mov	r9, r0
   11892:	b300      	cbz	r0, 118d6 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x122>
    dir.m_vol->cacheDirty();
   11894:	9a07      	ldr	r2, [sp, #28]
    m_status |= CACHE_STATUS_DIRTY;
   11896:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   1189a:	f043 0301 	orr.w	r3, r3, #1
   1189e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   118a2:	45da      	cmp	sl, fp
   118a4:	bf0c      	ite	eq
   118a6:	f04b 0340 	orreq.w	r3, fp, #64	; 0x40
   118aa:	465b      	movne	r3, fp
   118ac:	7003      	strb	r3, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
   118ae:	f04f 030f 	mov.w	r3, #15
   118b2:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
   118b4:	f04f 0300 	mov.w	r3, #0
   118b8:	7303      	strb	r3, [r0, #12]
    ldir->checksum = checksum;
   118ba:	9b03      	ldr	r3, [sp, #12]
   118bc:	7343      	strb	r3, [r0, #13]
   118be:	f04f 0300 	mov.w	r3, #0
   118c2:	8343      	strh	r3, [r0, #26]
   118c4:	2501      	movs	r5, #1
   118c6:	2600      	movs	r6, #0
   118c8:	e7af      	b.n	1182a <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x76>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
   118ca:	2301      	movs	r3, #1
   118cc:	9301      	str	r3, [sp, #4]

 fail:
  return false;
}
   118ce:	9801      	ldr	r0, [sp, #4]
   118d0:	b00f      	add	sp, #60	; 0x3c
   118d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   118d6:	2300      	movs	r3, #0
   118d8:	9301      	str	r3, [sp, #4]
   118da:	e7f8      	b.n	118ce <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>

000118dc <FatFile::makeSFN(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeSFN(FatLfn_t* fname) {
   118dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118e0:	4686      	mov	lr, r0
  uint8_t lc = 0;
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
   118e2:	6884      	ldr	r4, [r0, #8]
  const char* ptr = fname->begin;
   118e4:	4602      	mov	r2, r0
   118e6:	f852 3b15 	ldr.w	r3, [r2], #21
  DBG_HALT_IF(end == ptr);
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
   118ea:	3020      	adds	r0, #32
    fname->sfn[k] = ' ';
   118ec:	2120      	movs	r1, #32
   118ee:	f802 1f01 	strb.w	r1, [r2, #1]!
  for (uint8_t k = 0; k < 11; k++) {
   118f2:	4282      	cmp	r2, r0
   118f4:	d1fb      	bne.n	118ee <FatFile::makeSFN(FatLfn_t*)+0x12>
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
   118f6:	781a      	ldrb	r2, [r3, #0]
   118f8:	2a2e      	cmp	r2, #46	; 0x2e
   118fa:	bf14      	ite	ne
   118fc:	2501      	movne	r5, #1
   118fe:	2500      	moveq	r5, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
   11900:	d103      	bne.n	1190a <FatFile::makeSFN(FatLfn_t*)+0x2e>
   11902:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   11906:	2a2e      	cmp	r2, #46	; 0x2e
   11908:	d0fb      	beq.n	11902 <FatFile::makeSFN(FatLfn_t*)+0x26>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
   1190a:	1e62      	subs	r2, r4, #1
   1190c:	429a      	cmp	r2, r3
   1190e:	d909      	bls.n	11924 <FatFile::makeSFN(FatLfn_t*)+0x48>
   11910:	4611      	mov	r1, r2
   11912:	461e      	mov	r6, r3
   11914:	460a      	mov	r2, r1
   11916:	3901      	subs	r1, #1
   11918:	7810      	ldrb	r0, [r2, #0]
   1191a:	282e      	cmp	r0, #46	; 0x2e
   1191c:	d002      	beq.n	11924 <FatFile::makeSFN(FatLfn_t*)+0x48>
   1191e:	460a      	mov	r2, r1
   11920:	42b1      	cmp	r1, r6
   11922:	d1f7      	bne.n	11914 <FatFile::makeSFN(FatLfn_t*)+0x38>

  for (; ptr < end; ptr++) {
   11924:	429c      	cmp	r4, r3
   11926:	d908      	bls.n	1193a <FatFile::makeSFN(FatLfn_t*)+0x5e>
   11928:	2600      	movs	r6, #0
   1192a:	2707      	movs	r7, #7
   1192c:	46b4      	mov	ip, r6
   1192e:	46b3      	mov	fp, r6
   11930:	f04f 0908 	mov.w	r9, #8
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
   11934:	f04f 0a0a 	mov.w	sl, #10
   11938:	e061      	b.n	119fe <FatFile::makeSFN(FatLfn_t*)+0x122>
  for (; ptr < end; ptr++) {
   1193a:	2600      	movs	r6, #0
   1193c:	46b3      	mov	fp, r6
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   1193e:	f89e 3016 	ldrb.w	r3, [lr, #22]
   11942:	2b20      	cmp	r3, #32
   11944:	f000 8084 	beq.w	11a50 <FatFile::makeSFN(FatLfn_t*)+0x174>
    DBG_HALT_MACRO;
    goto fail;
  }
  if (is83) {
   11948:	2d00      	cmp	r5, #0
   1194a:	d03b      	beq.n	119c4 <FatFile::makeSFN(FatLfn_t*)+0xe8>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   1194c:	ea1b 0f06 	tst.w	fp, r6
   11950:	bf18      	it	ne
   11952:	2602      	movne	r6, #2
   11954:	f88e 6015 	strb.w	r6, [lr, #21]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
   11958:	4628      	mov	r0, r5

 fail:
  return false;
}
   1195a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
   1195e:	f1a1 083a 	sub.w	r8, r1, #58	; 0x3a
   11962:	fa5f f888 	uxtb.w	r8, r8
   11966:	f1b8 0f05 	cmp.w	r8, #5
   1196a:	d964      	bls.n	11a36 <FatFile::makeSFN(FatLfn_t*)+0x15a>
  return !(0X20 < c && c < 0X7F);
   1196c:	f1a1 0821 	sub.w	r8, r1, #33	; 0x21
      if (sfnReservedChar(c)) {
   11970:	fa5f f888 	uxtb.w	r8, r8
   11974:	f1b8 0f5d 	cmp.w	r8, #93	; 0x5d
   11978:	d85d      	bhi.n	11a36 <FatFile::makeSFN(FatLfn_t*)+0x15a>
      if (i > in) {
   1197a:	45bc      	cmp	ip, r7
   1197c:	d815      	bhi.n	119aa <FatFile::makeSFN(FatLfn_t*)+0xce>
  return 'a' <= c && c <= 'z';
   1197e:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
      if (isLower(c)) {
   11982:	b2c0      	uxtb	r0, r0
   11984:	2819      	cmp	r0, #25
   11986:	d82a      	bhi.n	119de <FatFile::makeSFN(FatLfn_t*)+0x102>
        c += 'A' - 'a';
   11988:	3920      	subs	r1, #32
   1198a:	b2c9      	uxtb	r1, r1
        lc |= bit;
   1198c:	ea49 0606 	orr.w	r6, r9, r6
   11990:	b2f6      	uxtb	r6, r6
      fname->sfn[i++] = c;
   11992:	f10c 0001 	add.w	r0, ip, #1
   11996:	b2c0      	uxtb	r0, r0
   11998:	44f4      	add	ip, lr
   1199a:	f88c 1016 	strb.w	r1, [ip, #22]
      if (i < 7) {
   1199e:	2806      	cmp	r0, #6
   119a0:	d854      	bhi.n	11a4c <FatFile::makeSFN(FatLfn_t*)+0x170>
        fname->seqPos = i;
   119a2:	f88e 0014 	strb.w	r0, [lr, #20]
      fname->sfn[i++] = c;
   119a6:	4684      	mov	ip, r0
   119a8:	e026      	b.n	119f8 <FatFile::makeSFN(FatLfn_t*)+0x11c>
        if (in == 10 || ptr > dot) {
   119aa:	429a      	cmp	r2, r3
   119ac:	bf2c      	ite	cs
   119ae:	2500      	movcs	r5, #0
   119b0:	2501      	movcc	r5, #1
   119b2:	2f0a      	cmp	r7, #10
   119b4:	bf08      	it	eq
   119b6:	f045 0501 	orreq.w	r5, r5, #1
   119ba:	b175      	cbz	r5, 119da <FatFile::makeSFN(FatLfn_t*)+0xfe>
  if (fname->sfn[0] == ' ') {
   119bc:	f89e 3016 	ldrb.w	r3, [lr, #22]
   119c0:	2b20      	cmp	r3, #32
   119c2:	d0ca      	beq.n	1195a <FatFile::makeSFN(FatLfn_t*)+0x7e>
    fname->flags = FNAME_FLAG_LOST_CHARS;
   119c4:	2001      	movs	r0, #1
   119c6:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
   119ca:	f89e 3014 	ldrb.w	r3, [lr, #20]
   119ce:	4473      	add	r3, lr
   119d0:	227e      	movs	r2, #126	; 0x7e
   119d2:	759a      	strb	r2, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
   119d4:	2231      	movs	r2, #49	; 0x31
   119d6:	75da      	strb	r2, [r3, #23]
   119d8:	e7bf      	b.n	1195a <FatFile::makeSFN(FatLfn_t*)+0x7e>
        ptr = dot - 1;
   119da:	1e53      	subs	r3, r2, #1
        continue;
   119dc:	e00c      	b.n	119f8 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return 'A' <= c && c <= 'Z';
   119de:	f1a1 0041 	sub.w	r0, r1, #65	; 0x41
      } else if (isUpper(c)) {
   119e2:	b2c0      	uxtb	r0, r0
   119e4:	2819      	cmp	r0, #25
        uc |= bit;
   119e6:	bf98      	it	ls
   119e8:	ea49 0b0b 	orrls.w	fp, r9, fp
   119ec:	e7d1      	b.n	11992 <FatFile::makeSFN(FatLfn_t*)+0xb6>
      in = 10;  // Max index for full 8.3 name.
   119ee:	4657      	mov	r7, sl
      i = 8;    // Place for extension.
   119f0:	f04f 0c08 	mov.w	ip, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
   119f4:	f04f 0910 	mov.w	r9, #16
  for (; ptr < end; ptr++) {
   119f8:	3301      	adds	r3, #1
   119fa:	429c      	cmp	r4, r3
   119fc:	d99f      	bls.n	1193e <FatFile::makeSFN(FatLfn_t*)+0x62>
    c = *ptr;
   119fe:	7819      	ldrb	r1, [r3, #0]
    if (c == '.' && ptr == dot) {
   11a00:	292e      	cmp	r1, #46	; 0x2e
   11a02:	bf08      	it	eq
   11a04:	429a      	cmpeq	r2, r3
   11a06:	bf0c      	ite	eq
   11a08:	2001      	moveq	r0, #1
   11a0a:	2000      	movne	r0, #0
   11a0c:	d0ef      	beq.n	119ee <FatFile::makeSFN(FatLfn_t*)+0x112>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
   11a0e:	2922      	cmp	r1, #34	; 0x22
   11a10:	d011      	beq.n	11a36 <FatFile::makeSFN(FatLfn_t*)+0x15a>
   11a12:	297c      	cmp	r1, #124	; 0x7c
   11a14:	d00f      	beq.n	11a36 <FatFile::makeSFN(FatLfn_t*)+0x15a>
   11a16:	f1a1 085b 	sub.w	r8, r1, #91	; 0x5b
   11a1a:	fa5f f888 	uxtb.w	r8, r8
   11a1e:	f1b8 0f02 	cmp.w	r8, #2
   11a22:	d908      	bls.n	11a36 <FatFile::makeSFN(FatLfn_t*)+0x15a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
   11a24:	f1a1 082a 	sub.w	r8, r1, #42	; 0x2a
   11a28:	fa5f f888 	uxtb.w	r8, r8
   11a2c:	f1b8 0f05 	cmp.w	r8, #5
   11a30:	d895      	bhi.n	1195e <FatFile::makeSFN(FatLfn_t*)+0x82>
   11a32:	292d      	cmp	r1, #45	; 0x2d
   11a34:	d093      	beq.n	1195e <FatFile::makeSFN(FatLfn_t*)+0x82>
        if ((c & 0XC0) == 0X80) {
   11a36:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
   11a3a:	2980      	cmp	r1, #128	; 0x80
   11a3c:	d004      	beq.n	11a48 <FatFile::makeSFN(FatLfn_t*)+0x16c>
      if (i > in) {
   11a3e:	45bc      	cmp	ip, r7
   11a40:	d8b3      	bhi.n	119aa <FatFile::makeSFN(FatLfn_t*)+0xce>
        is83 = false;
   11a42:	4605      	mov	r5, r0
        c = '_';
   11a44:	215f      	movs	r1, #95	; 0x5f
   11a46:	e7a4      	b.n	11992 <FatFile::makeSFN(FatLfn_t*)+0xb6>
        is83 = false;
   11a48:	4605      	mov	r5, r0
   11a4a:	e7d5      	b.n	119f8 <FatFile::makeSFN(FatLfn_t*)+0x11c>
      fname->sfn[i++] = c;
   11a4c:	4684      	mov	ip, r0
   11a4e:	e7d3      	b.n	119f8 <FatFile::makeSFN(FatLfn_t*)+0x11c>
  return false;
   11a50:	2000      	movs	r0, #0
   11a52:	e782      	b.n	1195a <FatFile::makeSFN(FatLfn_t*)+0x7e>

00011a54 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
   11a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a58:	b083      	sub	sp, #12
   11a5a:	4604      	mov	r4, r0
   11a5c:	460f      	mov	r7, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
   11a5e:	f891 8014 	ldrb.w	r8, [r1, #20]
   11a62:	2362      	movs	r3, #98	; 0x62
   11a64:	9301      	str	r3, [sp, #4]
  DirFat_t* dir;
  uint16_t hex = 0;
   11a66:	2500      	movs	r5, #0
	return systick_millis_count;
   11a68:	f8df b090 	ldr.w	fp, [pc, #144]	; 11afc <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   11a6c:	f101 0a16 	add.w	sl, r1, #22
   11a70:	f8db 3000 	ldr.w	r3, [fp]
    hex += millis();
   11a74:	442b      	add	r3, r5
   11a76:	b29d      	uxth	r5, r3
    if (pos > 3) {
   11a78:	f1b8 0f03 	cmp.w	r8, #3
   11a7c:	bf28      	it	cs
   11a7e:	f04f 0803 	movcs.w	r8, #3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   11a82:	f108 0304 	add.w	r3, r8, #4
   11a86:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
   11a88:	f005 020f 	and.w	r2, r5, #15
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   11a8c:	2a09      	cmp	r2, #9
   11a8e:	bf94      	ite	ls
   11a90:	3230      	addls	r2, #48	; 0x30
   11a92:	3237      	addhi	r2, #55	; 0x37
   11a94:	18f9      	adds	r1, r7, r3
   11a96:	758a      	strb	r2, [r1, #22]
      hex >>= 4;
   11a98:	092d      	lsrs	r5, r5, #4
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   11a9a:	3b01      	subs	r3, #1
   11a9c:	b2db      	uxtb	r3, r3
   11a9e:	4598      	cmp	r8, r3
   11aa0:	d1f2      	bne.n	11a88 <FatFile::makeUniqueSfn(FatLfn_t*)+0x34>
    fname->sfn[pos] = '~';
   11aa2:	eb07 0308 	add.w	r3, r7, r8
   11aa6:	227e      	movs	r2, #126	; 0x7e
   11aa8:	759a      	strb	r2, [r3, #22]
    seekSet(0);
   11aaa:	2100      	movs	r1, #0
   11aac:	4620      	mov	r0, r4
   11aae:	f7ff f823 	bl	10af8 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
   11ab2:	2601      	movs	r6, #1
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   11ab4:	f04f 090b 	mov.w	r9, #11
      dir = readDirCache(true);
   11ab8:	4631      	mov	r1, r6
   11aba:	4620      	mov	r0, r4
   11abc:	f7fe fffa 	bl	10ab4 <FatFile::readDirCache(bool)>
      if (!dir) {
   11ac0:	4601      	mov	r1, r0
   11ac2:	b190      	cbz	r0, 11aea <FatFile::makeUniqueSfn(FatLfn_t*)+0x96>
      if (dir->name[0] == FAT_NAME_FREE) {
   11ac4:	7803      	ldrb	r3, [r0, #0]
   11ac6:	b1bb      	cbz	r3, 11af8 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   11ac8:	7ac3      	ldrb	r3, [r0, #11]
   11aca:	f013 0f08 	tst.w	r3, #8
   11ace:	d1f3      	bne.n	11ab8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
   11ad0:	464a      	mov	r2, r9
   11ad2:	4650      	mov	r0, sl
   11ad4:	f011 fa14 	bl	22f00 <memcmp>
   11ad8:	2800      	cmp	r0, #0
   11ada:	d1ed      	bne.n	11ab8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
   11adc:	9b01      	ldr	r3, [sp, #4]
   11ade:	3b01      	subs	r3, #1
   11ae0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   11ae4:	9301      	str	r3, [sp, #4]
   11ae6:	d1c3      	bne.n	11a70 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1c>
   11ae8:	e003      	b.n	11af2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
        if (!getError()) {
   11aea:	7860      	ldrb	r0, [r4, #1]
   11aec:	fab0 f080 	clz	r0, r0
   11af0:	0940      	lsrs	r0, r0, #5
 fail:
  return false;

 done:
  return true;
}
   11af2:	b003      	add	sp, #12
   11af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
   11af8:	2001      	movs	r0, #1
   11afa:	e7fa      	b.n	11af2 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9e>
   11afc:	20008a6c 	.word	0x20008a6c

00011b00 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
   11b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b04:	b08f      	sub	sp, #60	; 0x3c
   11b06:	900a      	str	r0, [sp, #40]	; 0x28
   11b08:	460e      	mov	r6, r1
   11b0a:	9204      	str	r2, [sp, #16]
   11b0c:	9306      	str	r3, [sp, #24]
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;

  if (!dirFile->isDir() || isOpen()) {
   11b0e:	780b      	ldrb	r3, [r1, #0]
   11b10:	f013 0f70 	tst.w	r3, #112	; 0x70
   11b14:	f000 8158 	beq.w	11dc8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2c8>
   11b18:	4611      	mov	r1, r2
  bool isOpen() const {return m_attributes;}
   11b1a:	f890 8000 	ldrb.w	r8, [r0]
   11b1e:	f1b8 0f00 	cmp.w	r8, #0
   11b22:	f040 8157 	bne.w	11dd4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2d4>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
   11b26:	6913      	ldr	r3, [r2, #16]
   11b28:	330c      	adds	r3, #12
   11b2a:	4ab0      	ldr	r2, [pc, #704]	; (11dec <FatFile::open(FatFile*, FatLfn_t*, int)+0x2ec>)
   11b2c:	fba2 2303 	umull	r2, r3, r2, r3
   11b30:	f3c3 0287 	ubfx	r2, r3, #2, #8
   11b34:	9207      	str	r2, [sp, #28]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   11b36:	7d4b      	ldrb	r3, [r1, #21]
   11b38:	f013 0f03 	tst.w	r3, #3
   11b3c:	d017      	beq.n	11b6e <FatFile::open(FatFile*, FatLfn_t*, int)+0x6e>
   11b3e:	1c57      	adds	r7, r2, #1
   11b40:	b2ff      	uxtb	r7, r7
  auto vol = dirFile->m_vol;
   11b42:	68b3      	ldr	r3, [r6, #8]
   11b44:	930b      	str	r3, [sp, #44]	; 0x2c
    seekSet(0);
   11b46:	2100      	movs	r1, #0
   11b48:	4630      	mov	r0, r6
   11b4a:	f7fe ffd5 	bl	10af8 <FatFile::seekSet(unsigned long)>
  uint8_t checksum = 0;
   11b4e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  uint8_t order = 0;
   11b52:	f8cd 800c 	str.w	r8, [sp, #12]
  uint8_t freeFound = 0;
   11b56:	4644      	mov	r4, r8
  uint8_t lfnOrd = 0;
   11b58:	f8cd 8008 	str.w	r8, [sp, #8]
  uint16_t freeIndex = 0;
   11b5c:	f04f 0a00 	mov.w	sl, #0
  bool fnameFound = false;
   11b60:	f8cd a020 	str.w	sl, [sp, #32]
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
    dir = dirFile->readDirCache();
   11b64:	46d3      	mov	fp, sl
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   11b66:	9b04      	ldr	r3, [sp, #16]
   11b68:	3316      	adds	r3, #22
   11b6a:	9305      	str	r3, [sp, #20]
  }
   11b6c:	e087      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   11b6e:	2701      	movs	r7, #1
   11b70:	e7e7      	b.n	11b42 <FatFile::open(FatFile*, FatLfn_t*, int)+0x42>
      lfnOrd = 0;
   11b72:	f8cd 8008 	str.w	r8, [sp, #8]
   11b76:	e082      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        lfnOrd = 0;
   11b78:	f8cd 8008 	str.w	r8, [sp, #8]
   11b7c:	e07f      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
   11b7e:	f8cd 8008 	str.w	r8, [sp, #8]
   11b82:	e07c      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (dirFile->getError()) {
   11b84:	7873      	ldrb	r3, [r6, #1]
   11b86:	2b00      	cmp	r3, #0
   11b88:	f040 8127 	bne.w	11dda <FatFile::open(FatFile*, FatLfn_t*, int)+0x2da>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   11b8c:	9b06      	ldr	r3, [sp, #24]
   11b8e:	f413 7f00 	tst.w	r3, #512	; 0x200
   11b92:	f000 8125 	beq.w	11de0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e0>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   11b96:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   11b9a:	3b01      	subs	r3, #1
   11b9c:	2b01      	cmp	r3, #1
   11b9e:	f200 8122 	bhi.w	11de6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2e6>
    DBG_WARN_MACRO;
    goto fail;
  }
  // Keep found entries or start at current index if no free entries found.
  if (freeFound == 0) {
   11ba2:	2c00      	cmp	r4, #0
   11ba4:	bf08      	it	eq
   11ba6:	46aa      	moveq	sl, r5
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
   11ba8:	42bc      	cmp	r4, r7
   11baa:	d20b      	bcs.n	11bc4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
    dir = dirFile->readDirCache();
   11bac:	2500      	movs	r5, #0
   11bae:	4629      	mov	r1, r5
   11bb0:	4630      	mov	r0, r6
   11bb2:	f7fe ff7f 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!dir) {
   11bb6:	2800      	cmp	r0, #0
   11bb8:	f000 80ee 	beq.w	11d98 <FatFile::open(FatFile*, FatLfn_t*, int)+0x298>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
   11bbc:	3401      	adds	r4, #1
   11bbe:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   11bc0:	42a7      	cmp	r7, r4
   11bc2:	d1f4      	bne.n	11bae <FatFile::open(FatFile*, FatLfn_t*, int)+0xae>
      DBG_FAIL_MACRO;
      goto fail;
    }
    freeFound += vol->dirEntriesPerCluster();
  }
  if (fnameFound) {
   11bc4:	9b08      	ldr	r3, [sp, #32]
   11bc6:	b13b      	cbz	r3, 11bd8 <FatFile::open(FatFile*, FatLfn_t*, int)+0xd8>
    if (!dirFile->makeUniqueSfn(fname)) {
   11bc8:	9904      	ldr	r1, [sp, #16]
   11bca:	4630      	mov	r0, r6
   11bcc:	f7ff ff42 	bl	11a54 <FatFile::makeUniqueSfn(FatLfn_t*)>
   11bd0:	4681      	mov	r9, r0
   11bd2:	2800      	cmp	r0, #0
   11bd4:	f000 80fa 	beq.w	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      goto fail;
    }
  }
  lfnOrd = freeNeed - 1;
   11bd8:	3f01      	subs	r7, #1
   11bda:	b2fb      	uxtb	r3, r7
   11bdc:	4698      	mov	r8, r3
  curIndex = freeIndex + lfnOrd;
   11bde:	449a      	add	sl, r3
   11be0:	fa1f f58a 	uxth.w	r5, sl
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
   11be4:	9f04      	ldr	r7, [sp, #16]
   11be6:	463a      	mov	r2, r7
   11be8:	4629      	mov	r1, r5
   11bea:	4630      	mov	r0, r6
   11bec:	f7ff fde2 	bl	117b4 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
   11bf0:	4681      	mov	r9, r0
   11bf2:	2800      	cmp	r0, #0
   11bf4:	f000 80ea 	beq.w	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   11bf8:	0169      	lsls	r1, r5, #5
   11bfa:	4630      	mov	r0, r6
   11bfc:	f7fe ff7c 	bl	10af8 <FatFile::seekSet(unsigned long)>
   11c00:	4681      	mov	r9, r0
   11c02:	2800      	cmp	r0, #0
   11c04:	f000 80e2 	beq.w	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11c08:	2100      	movs	r1, #0
   11c0a:	4630      	mov	r0, r6
   11c0c:	f7fe ff52 	bl	10ab4 <FatFile::readDirCache(bool)>
    goto fail;
  }
  dir = dirFile->cacheDir(curIndex);
  if (!dir) {
   11c10:	4604      	mov	r4, r0
   11c12:	2800      	cmp	r0, #0
   11c14:	f000 80f1 	beq.w	11dfa <FatFile::open(FatFile*, FatLfn_t*, int)+0x2fa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
   11c18:	2220      	movs	r2, #32
   11c1a:	2100      	movs	r1, #0
   11c1c:	f011 fa1c 	bl	23058 <memset>
  memcpy(dir->name, fname->sfn, 11);
   11c20:	f8d7 2016 	ldr.w	r2, [r7, #22]
   11c24:	f8d7 301a 	ldr.w	r3, [r7, #26]
   11c28:	6022      	str	r2, [r4, #0]
   11c2a:	6063      	str	r3, [r4, #4]
   11c2c:	8bfa      	ldrh	r2, [r7, #30]
   11c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
   11c32:	8122      	strh	r2, [r4, #8]
   11c34:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
   11c36:	7d7b      	ldrb	r3, [r7, #21]
   11c38:	f003 0318 	and.w	r3, r3, #24
   11c3c:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
   11c3e:	4b6c      	ldr	r3, [pc, #432]	; (11df0 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f0>)
   11c40:	681b      	ldr	r3, [r3, #0]
   11c42:	2b00      	cmp	r3, #0
   11c44:	f000 80ba 	beq.w	11dbc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2bc>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
   11c48:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   11c4c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
   11c50:	a80d      	add	r0, sp, #52	; 0x34
   11c52:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
   11c54:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   11c58:	8223      	strh	r3, [r4, #16]
   11c5a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11c5e:	81e3      	strh	r3, [r4, #14]
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
   11c60:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   11c64:	7363      	strb	r3, [r4, #13]
   11c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11c68:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   11c6c:	f043 0301 	orr.w	r3, r3, #1
   11c70:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  }
   11c74:	e086      	b.n	11d84 <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
      if (dir->name[0] == FAT_NAME_FREE) {
   11c76:	2b00      	cmp	r3, #0
   11c78:	d088      	beq.n	11b8c <FatFile::open(FatFile*, FatLfn_t*, int)+0x8c>
      lfnOrd = 0;
   11c7a:	f8cd 8008 	str.w	r8, [sp, #8]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   11c7e:	6975      	ldr	r5, [r6, #20]
   11c80:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache();
   11c84:	4659      	mov	r1, fp
   11c86:	4630      	mov	r0, r6
   11c88:	f7fe ff14 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!dir) {
   11c8c:	2800      	cmp	r0, #0
   11c8e:	f43f af79 	beq.w	11b84 <FatFile::open(FatFile*, FatLfn_t*, int)+0x84>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
   11c92:	7803      	ldrb	r3, [r0, #0]
   11c94:	2b00      	cmp	r3, #0
   11c96:	bf18      	it	ne
   11c98:	2be5      	cmpne	r3, #229	; 0xe5
   11c9a:	bf0c      	ite	eq
   11c9c:	f04f 0901 	moveq.w	r9, #1
   11ca0:	f04f 0900 	movne.w	r9, #0
   11ca4:	d107      	bne.n	11cb6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1b6>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   11ca6:	2c00      	cmp	r4, #0
   11ca8:	bf08      	it	eq
   11caa:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
   11cac:	42bc      	cmp	r4, r7
   11cae:	d2e2      	bcs.n	11c76 <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound++;
   11cb0:	3401      	adds	r4, #1
   11cb2:	b2e4      	uxtb	r4, r4
   11cb4:	e7df      	b.n	11c76 <FatFile::open(FatFile*, FatLfn_t*, int)+0x176>
        freeFound = 0;
   11cb6:	42bc      	cmp	r4, r7
   11cb8:	bf38      	it	cc
   11cba:	4644      	movcc	r4, r8
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
   11cbc:	2b2e      	cmp	r3, #46	; 0x2e
   11cbe:	f43f af58 	beq.w	11b72 <FatFile::open(FatFile*, FatLfn_t*, int)+0x72>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
   11cc2:	7ac2      	ldrb	r2, [r0, #11]
    } else if (isLongName(dir)) {
   11cc4:	2a0f      	cmp	r2, #15
   11cc6:	d014      	beq.n	11cf2 <FatFile::open(FatFile*, FatLfn_t*, int)+0x1f2>
    } else if (isFileOrSubdir(dir)) {
   11cc8:	f012 0208 	ands.w	r2, r2, #8
   11ccc:	f47f af57 	bne.w	11b7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x7e>
      if (lfnOrd) {
   11cd0:	9b02      	ldr	r3, [sp, #8]
   11cd2:	2b00      	cmp	r3, #0
   11cd4:	d13b      	bne.n	11d4e <FatFile::open(FatFile*, FatLfn_t*, int)+0x24e>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   11cd6:	220b      	movs	r2, #11
   11cd8:	9905      	ldr	r1, [sp, #20]
   11cda:	f011 f911 	bl	22f00 <memcmp>
   11cde:	2800      	cmp	r0, #0
   11ce0:	d1cd      	bne.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   11ce2:	9b04      	ldr	r3, [sp, #16]
   11ce4:	7d5b      	ldrb	r3, [r3, #21]
   11ce6:	f013 0301 	ands.w	r3, r3, #1
   11cea:	d046      	beq.n	11d7a <FatFile::open(FatFile*, FatLfn_t*, int)+0x27a>
        fnameFound = true;
   11cec:	2301      	movs	r3, #1
   11cee:	9308      	str	r3, [sp, #32]
   11cf0:	e7c5      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      if (!lfnOrd) {
   11cf2:	9a02      	ldr	r2, [sp, #8]
   11cf4:	b9ea      	cbnz	r2, 11d32 <FatFile::open(FatFile*, FatLfn_t*, int)+0x232>
        order = ldir->order & 0X1F;
   11cf6:	f003 021f 	and.w	r2, r3, #31
   11cfa:	9203      	str	r2, [sp, #12]
        if (order != nameOrd ||
   11cfc:	9907      	ldr	r1, [sp, #28]
   11cfe:	4291      	cmp	r1, r2
   11d00:	d1bd      	bne.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
   11d02:	f013 0340 	ands.w	r3, r3, #64	; 0x40
   11d06:	9302      	str	r3, [sp, #8]
   11d08:	d0b9      	beq.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        checksum = ldir->checksum;
   11d0a:	7b43      	ldrb	r3, [r0, #13]
   11d0c:	9309      	str	r3, [sp, #36]	; 0x24
        lfnOrd = nameOrd;
   11d0e:	9202      	str	r2, [sp, #8]
      if (order == 1) {
   11d10:	9b03      	ldr	r3, [sp, #12]
   11d12:	2b01      	cmp	r3, #1
   11d14:	d1b3      	bne.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
   11d16:	1c69      	adds	r1, r5, #1
   11d18:	9d02      	ldr	r5, [sp, #8]
   11d1a:	462b      	mov	r3, r5
   11d1c:	9a04      	ldr	r2, [sp, #16]
   11d1e:	b289      	uxth	r1, r1
   11d20:	4630      	mov	r0, r6
   11d22:	f7ff fce7 	bl	116f4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
   11d26:	462b      	mov	r3, r5
   11d28:	2800      	cmp	r0, #0
   11d2a:	bf08      	it	eq
   11d2c:	4643      	moveq	r3, r8
   11d2e:	9302      	str	r3, [sp, #8]
   11d30:	e7a5      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
   11d32:	9a03      	ldr	r2, [sp, #12]
   11d34:	3a01      	subs	r2, #1
   11d36:	b2d2      	uxtb	r2, r2
   11d38:	9203      	str	r2, [sp, #12]
   11d3a:	4293      	cmp	r3, r2
   11d3c:	f47f af1c 	bne.w	11b78 <FatFile::open(FatFile*, FatLfn_t*, int)+0x78>
   11d40:	7b43      	ldrb	r3, [r0, #13]
   11d42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d44:	4293      	cmp	r3, r2
   11d46:	d0e3      	beq.n	11d10 <FatFile::open(FatFile*, FatLfn_t*, int)+0x210>
        lfnOrd = 0;
   11d48:	f8cd 8008 	str.w	r8, [sp, #8]
   11d4c:	e797      	b.n	11c7e <FatFile::open(FatFile*, FatLfn_t*, int)+0x17e>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
   11d4e:	9b03      	ldr	r3, [sp, #12]
   11d50:	2b01      	cmp	r3, #1
   11d52:	d13b      	bne.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    for (uint8_t i = 0; i < 11; i++) {
   11d54:	1e41      	subs	r1, r0, #1
   11d56:	f100 0c0a 	add.w	ip, r0, #10
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   11d5a:	01d3      	lsls	r3, r2, #7
   11d5c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   11d60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   11d64:	fa52 f383 	uxtab	r3, r2, r3
   11d68:	b2da      	uxtb	r2, r3
    for (uint8_t i = 0; i < 11; i++) {
   11d6a:	4561      	cmp	r1, ip
   11d6c:	d1f5      	bne.n	11d5a <FatFile::open(FatFile*, FatLfn_t*, int)+0x25a>
   11d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11d70:	4293      	cmp	r3, r2
   11d72:	d12b      	bne.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11d74:	9b02      	ldr	r3, [sp, #8]
   11d76:	4698      	mov	r8, r3
   11d78:	e000      	b.n	11d7c <FatFile::open(FatFile*, FatLfn_t*, int)+0x27c>
   11d7a:	4698      	mov	r8, r3
  if (oflag & O_EXCL) {
   11d7c:	9b06      	ldr	r3, [sp, #24]
   11d7e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   11d82:	d123      	bne.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
  // Force write of entry to device.
  vol->cacheDirty();

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   11d84:	f8cd 8000 	str.w	r8, [sp]
   11d88:	9b06      	ldr	r3, [sp, #24]
   11d8a:	462a      	mov	r2, r5
   11d8c:	4631      	mov	r1, r6
   11d8e:	980a      	ldr	r0, [sp, #40]	; 0x28
   11d90:	f7fe ff31 	bl	10bf6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
   11d94:	4681      	mov	r9, r0
   11d96:	e019      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
      if (dirFile->getError()) {
   11d98:	7873      	ldrb	r3, [r6, #1]
   11d9a:	bb5b      	cbnz	r3, 11df4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2f4>
  while (freeFound < freeNeed) {
   11d9c:	42a7      	cmp	r7, r4
   11d9e:	f67f af11 	bls.w	11bc4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
   11da2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    if (!dirFile->addDirCluster()) {
   11da4:	4630      	mov	r0, r6
   11da6:	f7fe fd15 	bl	107d4 <FatFile::addDirCluster()>
   11daa:	4681      	mov	r9, r0
   11dac:	b170      	cbz	r0, 11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
   11dae:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
   11db0:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   11db4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   11db6:	42a7      	cmp	r7, r4
   11db8:	d8f4      	bhi.n	11da4 <FatFile::open(FatFile*, FatLfn_t*, int)+0x2a4>
   11dba:	e703      	b.n	11bc4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
  *reinterpret_cast<uint16_t*>(dst) = src;
   11dbc:	f645 2321 	movw	r3, #23073	; 0x5a21
   11dc0:	8223      	strh	r3, [r4, #16]
   11dc2:	8323      	strh	r3, [r4, #24]
   11dc4:	8263      	strh	r3, [r4, #18]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
   11dc6:	e74e      	b.n	11c66 <FatFile::open(FatFile*, FatLfn_t*, int)+0x166>
    goto fail;
  }
  return true;

 fail:
  return false;
   11dc8:	f04f 0900 	mov.w	r9, #0
}
   11dcc:	4648      	mov	r0, r9
   11dce:	b00f      	add	sp, #60	; 0x3c
   11dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   11dd4:	f04f 0900 	mov.w	r9, #0
   11dd8:	e7f8      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11dda:	f04f 0900 	mov.w	r9, #0
   11dde:	e7f5      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11de0:	f04f 0900 	mov.w	r9, #0
   11de4:	e7f2      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11de6:	f04f 0900 	mov.w	r9, #0
   11dea:	e7ef      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11dec:	4ec4ec4f 	.word	0x4ec4ec4f
   11df0:	20006d3c 	.word	0x20006d3c
   11df4:	f04f 0900 	mov.w	r9, #0
   11df8:	e7e8      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>
   11dfa:	f04f 0900 	mov.w	r9, #0
   11dfe:	e7e5      	b.n	11dcc <FatFile::open(FatFile*, FatLfn_t*, int)+0x2cc>

00011e00 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
   11e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   11e02:	b083      	sub	sp, #12
   11e04:	4608      	mov	r0, r1
   11e06:	4615      	mov	r5, r2
   11e08:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
   11e0a:	780b      	ldrb	r3, [r1, #0]
   11e0c:	2b20      	cmp	r3, #32
   11e0e:	d103      	bne.n	11e18 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x18>
   11e10:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   11e14:	2b20      	cmp	r3, #32
   11e16:	d0fb      	beq.n	11e10 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x10>
    path++;
  }
  fname->begin = path;
   11e18:	6028      	str	r0, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
   11e1a:	7803      	ldrb	r3, [r0, #0]
   11e1c:	b1d3      	cbz	r3, 11e54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
   11e1e:	2b2f      	cmp	r3, #47	; 0x2f
   11e20:	d018      	beq.n	11e54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
  size_t len = 0;
   11e22:	2400      	movs	r4, #0
   11e24:	4e2c      	ldr	r6, [pc, #176]	; (11ed8 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd8>)
   11e26:	e033      	b.n	11e90 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
   11e28:	f1bc 0f1f 	cmp.w	ip, #31
   11e2c:	d90f      	bls.n	11e4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
   11e2e:	e04d      	b.n	11ecc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
   11e30:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
   11e34:	d00b      	beq.n	11e4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
   11e36:	d903      	bls.n	11e40 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x40>
   11e38:	f1bc 0f7c 	cmp.w	ip, #124	; 0x7c
   11e3c:	d007      	beq.n	11e4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
   11e3e:	e020      	b.n	11e82 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
   11e40:	f1ac 0c3e 	sub.w	ip, ip, #62	; 0x3e
   11e44:	fa5f fc8c 	uxtb.w	ip, ip
   11e48:	f1bc 0f01 	cmp.w	ip, #1
   11e4c:	d819      	bhi.n	11e82 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
   11e4e:	2000      	movs	r0, #0
}
   11e50:	b003      	add	sp, #12
   11e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
   11e54:	692b      	ldr	r3, [r5, #16]
   11e56:	3b01      	subs	r3, #1
   11e58:	2bfe      	cmp	r3, #254	; 0xfe
   11e5a:	d80f      	bhi.n	11e7c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7c>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
   11e5c:	7803      	ldrb	r3, [r0, #0]
   11e5e:	2b20      	cmp	r3, #32
   11e60:	d001      	beq.n	11e66 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
   11e62:	2b2f      	cmp	r3, #47	; 0x2f
   11e64:	d105      	bne.n	11e72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   11e66:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   11e6a:	2b20      	cmp	r3, #32
   11e6c:	d0fb      	beq.n	11e66 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
   11e6e:	2b2f      	cmp	r3, #47	; 0x2f
   11e70:	d0f9      	beq.n	11e66 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x66>
  *ptr = path;
   11e72:	6038      	str	r0, [r7, #0]
  return makeSFN(fname);
   11e74:	4628      	mov	r0, r5
   11e76:	f7ff fd31 	bl	118dc <FatFile::makeSFN(FatLfn_t*)>
   11e7a:	e7e9      	b.n	11e50 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
  return false;
   11e7c:	2000      	movs	r0, #0
   11e7e:	e7e7      	b.n	11e50 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x50>
    len += cp <= 0XFFFF ? 1 : 2;
   11e80:	3402      	adds	r4, #2
      fname->len = len;
   11e82:	612c      	str	r4, [r5, #16]
      fname->end = path;
   11e84:	60a8      	str	r0, [r5, #8]
  while (*path && !isDirSeparator(*path)) {
   11e86:	7803      	ldrb	r3, [r0, #0]
   11e88:	2b00      	cmp	r3, #0
   11e8a:	d0e3      	beq.n	11e54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
   11e8c:	2b2f      	cmp	r3, #47	; 0x2f
   11e8e:	d0e1      	beq.n	11e54 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x54>
    path = FsUtf::mbToCp(path, path + 4, &cp);
   11e90:	aa01      	add	r2, sp, #4
   11e92:	1d01      	adds	r1, r0, #4
   11e94:	f002 ffe6 	bl	14e64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
   11e98:	2800      	cmp	r0, #0
   11e9a:	d0d8      	beq.n	11e4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    len += cp <= 0XFFFF ? 1 : 2;
   11e9c:	9b01      	ldr	r3, [sp, #4]
   11e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   11ea2:	d2ed      	bcs.n	11e80 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x80>
   11ea4:	3401      	adds	r4, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
   11ea6:	2b7f      	cmp	r3, #127	; 0x7f
   11ea8:	d810      	bhi.n	11ecc <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xcc>
   11eaa:	fa5f fc83 	uxtb.w	ip, r3
   11eae:	f1bc 0f3c 	cmp.w	ip, #60	; 0x3c
   11eb2:	d8bd      	bhi.n	11e30 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x30>
   11eb4:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
   11eb8:	d9b6      	bls.n	11e28 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x28>
   11eba:	f1ac 0c22 	sub.w	ip, ip, #34	; 0x22
   11ebe:	fa5f fc8c 	uxtb.w	ip, ip
   11ec2:	fa26 fc0c 	lsr.w	ip, r6, ip
   11ec6:	f01c 0f01 	tst.w	ip, #1
   11eca:	d1c0      	bne.n	11e4e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x4e>
    if (cp != '.' && cp != ' ') {
   11ecc:	2b2e      	cmp	r3, #46	; 0x2e
   11ece:	d0da      	beq.n	11e86 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
   11ed0:	2b20      	cmp	r3, #32
   11ed2:	d0d8      	beq.n	11e86 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x86>
   11ed4:	e7d5      	b.n	11e82 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x82>
   11ed6:	bf00      	nop
   11ed8:	05002101 	.word	0x05002101

00011edc <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
   11edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ee0:	b08a      	sub	sp, #40	; 0x28
  FatFile() {}
   11ee2:	2300      	movs	r3, #0
   11ee4:	f88d 3004 	strb.w	r3, [sp, #4]
   11ee8:	f88d 3005 	strb.w	r3, [sp, #5]
   11eec:	f88d 3006 	strb.w	r3, [sp, #6]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
   11ef0:	7883      	ldrb	r3, [r0, #2]
   11ef2:	f013 0f02 	tst.w	r3, #2
   11ef6:	f000 8091 	beq.w	1201c <FatFile::remove()+0x140>
   11efa:	4605      	mov	r5, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   11efc:	6a01      	ldr	r1, [r0, #32]
   11efe:	b129      	cbz	r1, 11f0c <FatFile::remove()+0x30>
   11f00:	6880      	ldr	r0, [r0, #8]
   11f02:	f000 fdd9 	bl	12ab8 <FatPartition::freeChain(unsigned long)>
   11f06:	4603      	mov	r3, r0
   11f08:	2800      	cmp	r0, #0
   11f0a:	d06c      	beq.n	11fe6 <FatFile::remove()+0x10a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   11f0c:	2101      	movs	r1, #1
   11f0e:	4628      	mov	r0, r5
   11f10:	f7fe fca2 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   11f14:	4606      	mov	r6, r0
   11f16:	2800      	cmp	r0, #0
   11f18:	f000 8082 	beq.w	12020 <FatFile::remove()+0x144>
    for (uint8_t i = 0; i < 11; i++) {
   11f1c:	1e42      	subs	r2, r0, #1
   11f1e:	300a      	adds	r0, #10
    uint8_t sum = 0;
   11f20:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   11f22:	01e3      	lsls	r3, r4, #7
   11f24:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
   11f28:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   11f2c:	fa51 f383 	uxtab	r3, r1, r3
   11f30:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
   11f32:	4290      	cmp	r0, r2
   11f34:	d1f5      	bne.n	11f22 <FatFile::remove()+0x46>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
   11f36:	23e5      	movs	r3, #229	; 0xe5
   11f38:	7033      	strb	r3, [r6, #0]

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
   11f3a:	2300      	movs	r3, #0
   11f3c:	702b      	strb	r3, [r5, #0]
  m_flags = 0;
   11f3e:	70ab      	strb	r3, [r5, #2]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   11f40:	68ae      	ldr	r6, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   11f42:	f106 0028 	add.w	r0, r6, #40	; 0x28
   11f46:	f002 fe5d 	bl	14c04 <FsCache::sync()>
   11f4a:	b908      	cbnz	r0, 11f50 <FatFile::remove()+0x74>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
   11f4c:	2300      	movs	r3, #0
   11f4e:	e04a      	b.n	11fe6 <FatFile::remove()+0x10a>
   11f50:	f506 700e 	add.w	r0, r6, #568	; 0x238
   11f54:	f002 fe56 	bl	14c04 <FsCache::sync()>
   11f58:	2800      	cmp	r0, #0
   11f5a:	d0f7      	beq.n	11f4c <FatFile::remove()+0x70>
    return m_blockDev->syncDevice();
   11f5c:	6830      	ldr	r0, [r6, #0]
   11f5e:	6803      	ldr	r3, [r0, #0]
   11f60:	6a1b      	ldr	r3, [r3, #32]
   11f62:	4798      	blx	r3
  if (!m_vol->cacheSync()) {
   11f64:	4603      	mov	r3, r0
   11f66:	2800      	cmp	r0, #0
   11f68:	d03d      	beq.n	11fe6 <FatFile::remove()+0x10a>
  if (!isLFN()) {
   11f6a:	78ea      	ldrb	r2, [r5, #3]
   11f6c:	2a00      	cmp	r2, #0
   11f6e:	d03a      	beq.n	11fe6 <FatFile::remove()+0x10a>
  if (!dirFile.openCluster(this)) {
   11f70:	4629      	mov	r1, r5
   11f72:	a801      	add	r0, sp, #4
   11f74:	f7fe fc9f 	bl	108b6 <FatFile::openCluster(FatFile*)>
   11f78:	4603      	mov	r3, r0
   11f7a:	2800      	cmp	r0, #0
   11f7c:	d033      	beq.n	11fe6 <FatFile::remove()+0x10a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11f7e:	78eb      	ldrb	r3, [r5, #3]
   11f80:	2b00      	cmp	r3, #0
   11f82:	d04f      	beq.n	12024 <FatFile::remove()+0x148>
   11f84:	2601      	movs	r6, #1
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   11f86:	2700      	movs	r7, #0
    ldir->order = FAT_NAME_DELETED;
   11f88:	f04f 08e5 	mov.w	r8, #229	; 0xe5
   11f8c:	e021      	b.n	11fd2 <FatFile::remove()+0xf6>
   11f8e:	4639      	mov	r1, r7
   11f90:	a801      	add	r0, sp, #4
   11f92:	f7fe fd8f 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!ldir) {
   11f96:	2800      	cmp	r0, #0
   11f98:	d046      	beq.n	12028 <FatFile::remove()+0x14c>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   11f9a:	7ac2      	ldrb	r2, [r0, #11]
   11f9c:	2a0f      	cmp	r2, #15
   11f9e:	d145      	bne.n	1202c <FatFile::remove()+0x150>
        order != (ldir->order & 0X1F) ||
   11fa0:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   11fa2:	f002 011f 	and.w	r1, r2, #31
   11fa6:	428e      	cmp	r6, r1
   11fa8:	d142      	bne.n	12030 <FatFile::remove()+0x154>
        order != (ldir->order & 0X1F) ||
   11faa:	7b41      	ldrb	r1, [r0, #13]
   11fac:	42a1      	cmp	r1, r4
   11fae:	d141      	bne.n	12034 <FatFile::remove()+0x158>
    ldir->order = FAT_NAME_DELETED;
   11fb0:	f880 8000 	strb.w	r8, [r0]
    m_vol->cacheDirty();
   11fb4:	68a9      	ldr	r1, [r5, #8]
   11fb6:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
   11fba:	f043 0301 	orr.w	r3, r3, #1
   11fbe:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
   11fc2:	f012 0f40 	tst.w	r2, #64	; 0x40
   11fc6:	d112      	bne.n	11fee <FatFile::remove()+0x112>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11fc8:	3601      	adds	r6, #1
   11fca:	b2f6      	uxtb	r6, r6
   11fcc:	78eb      	ldrb	r3, [r5, #3]
   11fce:	42b3      	cmp	r3, r6
   11fd0:	d322      	bcc.n	12018 <FatFile::remove()+0x13c>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
   11fd2:	88a9      	ldrh	r1, [r5, #4]
   11fd4:	1b89      	subs	r1, r1, r6
   11fd6:	b289      	uxth	r1, r1
   11fd8:	0149      	lsls	r1, r1, #5
   11fda:	a801      	add	r0, sp, #4
   11fdc:	f7fe fd8c 	bl	10af8 <FatFile::seekSet(unsigned long)>
   11fe0:	4603      	mov	r3, r0
   11fe2:	2800      	cmp	r0, #0
   11fe4:	d1d3      	bne.n	11f8e <FatFile::remove()+0xb2>
}
   11fe6:	4618      	mov	r0, r3
   11fe8:	b00a      	add	sp, #40	; 0x28
   11fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!m_vol->cacheSync()) {
   11fee:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   11ff0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   11ff4:	f002 fe06 	bl	14c04 <FsCache::sync()>
   11ff8:	4603      	mov	r3, r0
   11ffa:	2800      	cmp	r0, #0
   11ffc:	d0f3      	beq.n	11fe6 <FatFile::remove()+0x10a>
   11ffe:	f504 700e 	add.w	r0, r4, #568	; 0x238
   12002:	f002 fdff 	bl	14c04 <FsCache::sync()>
   12006:	4603      	mov	r3, r0
   12008:	2800      	cmp	r0, #0
   1200a:	d0ec      	beq.n	11fe6 <FatFile::remove()+0x10a>
    return m_blockDev->syncDevice();
   1200c:	6820      	ldr	r0, [r4, #0]
   1200e:	6803      	ldr	r3, [r0, #0]
   12010:	6a1b      	ldr	r3, [r3, #32]
   12012:	4798      	blx	r3
   12014:	4603      	mov	r3, r0
   12016:	e7e6      	b.n	11fe6 <FatFile::remove()+0x10a>
  return false;
   12018:	2300      	movs	r3, #0
 fail:
   1201a:	e7e4      	b.n	11fe6 <FatFile::remove()+0x10a>
  return false;
   1201c:	2300      	movs	r3, #0
   1201e:	e7e2      	b.n	11fe6 <FatFile::remove()+0x10a>
   12020:	2300      	movs	r3, #0
   12022:	e7e0      	b.n	11fe6 <FatFile::remove()+0x10a>
   12024:	2300      	movs	r3, #0
   12026:	e7de      	b.n	11fe6 <FatFile::remove()+0x10a>
   12028:	2300      	movs	r3, #0
   1202a:	e7dc      	b.n	11fe6 <FatFile::remove()+0x10a>
   1202c:	2300      	movs	r3, #0
   1202e:	e7da      	b.n	11fe6 <FatFile::remove()+0x10a>
   12030:	2300      	movs	r3, #0
   12032:	e7d8      	b.n	11fe6 <FatFile::remove()+0x10a>
   12034:	2300      	movs	r3, #0
   12036:	e7d6      	b.n	11fe6 <FatFile::remove()+0x10a>

00012038 <initFatDirCallback(unsigned long, void*)>:
  uint8_t * buffer;
  print_t * pr;
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
   12038:	b510      	push	{r4, lr}
   1203a:	460c      	mov	r4, r1
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
   1203c:	6848      	ldr	r0, [r1, #4]
   1203e:	b130      	cbz	r0, 1204e <initFatDirCallback(unsigned long, void*)+0x16>
   12040:	890b      	ldrh	r3, [r1, #8]
   12042:	3301      	adds	r3, #1
   12044:	b29b      	uxth	r3, r3
   12046:	810b      	strh	r3, [r1, #8]
   12048:	894a      	ldrh	r2, [r1, #10]
   1204a:	429a      	cmp	r2, r3
   1204c:	d901      	bls.n	12052 <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
   1204e:	6820      	ldr	r0, [r4, #0]
   12050:	bd10      	pop	{r4, pc}
   12052:	6803      	ldr	r3, [r0, #0]
   12054:	685b      	ldr	r3, [r3, #4]
   12056:	2201      	movs	r2, #1
   12058:	4902      	ldr	r1, [pc, #8]	; (12064 <initFatDirCallback(unsigned long, void*)+0x2c>)
   1205a:	4798      	blx	r3
    state->count = 0;
   1205c:	2300      	movs	r3, #0
   1205e:	8123      	strh	r3, [r4, #8]
   12060:	e7f5      	b.n	1204e <initFatDirCallback(unsigned long, void*)+0x16>
   12062:	bf00      	nop
   12064:	20004a84 	.word	0x20004a84

00012068 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
   12068:	b5f0      	push	{r4, r5, r6, r7, lr}
   1206a:	b087      	sub	sp, #28
   1206c:	4604      	mov	r4, r0
   1206e:	460e      	mov	r6, r1
   12070:	4615      	mov	r5, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   12072:	f44f 7200 	mov.w	r2, #512	; 0x200
   12076:	2100      	movs	r1, #0
   12078:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1207a:	f010 ffed 	bl	23058 <memset>
  writeMsg("Writing FAT ");
   1207e:	6a20      	ldr	r0, [r4, #32]
   12080:	b120      	cbz	r0, 1208c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x24>
   12082:	6803      	ldr	r3, [r0, #0]
   12084:	685b      	ldr	r3, [r3, #4]
   12086:	220c      	movs	r2, #12
   12088:	4920      	ldr	r1, [pc, #128]	; (1210c <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa4>)
   1208a:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
   1208c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1208e:	9303      	str	r3, [sp, #12]
  state.pr = m_pr;
   12090:	6a23      	ldr	r3, [r4, #32]
   12092:	9304      	str	r3, [sp, #16]
  state.count = 0;
   12094:	2300      	movs	r3, #0
   12096:	f8ad 3014 	strh.w	r3, [sp, #20]
  state.dotcount = sectorCount/32;
   1209a:	096b      	lsrs	r3, r5, #5
   1209c:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   120a0:	69e0      	ldr	r0, [r4, #28]
   120a2:	68e1      	ldr	r1, [r4, #12]
   120a4:	6803      	ldr	r3, [r0, #0]
   120a6:	aa03      	add	r2, sp, #12
   120a8:	9200      	str	r2, [sp, #0]
   120aa:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   120ac:	4b18      	ldr	r3, [pc, #96]	; (12110 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa8>)
   120ae:	1e6a      	subs	r2, r5, #1
   120b0:	3101      	adds	r1, #1
   120b2:	47b8      	blx	r7
   120b4:	4603      	mov	r3, r0
   120b6:	b328      	cbz	r0, 12104 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
     return false;
  }
  writeMsg("\r\n");
   120b8:	6a20      	ldr	r0, [r4, #32]
   120ba:	b120      	cbz	r0, 120c6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x5e>
   120bc:	6803      	ldr	r3, [r0, #0]
   120be:	685b      	ldr	r3, [r3, #4]
   120c0:	2202      	movs	r2, #2
   120c2:	4914      	ldr	r1, [pc, #80]	; (12114 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xac>)
   120c4:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
   120c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   120c8:	22f8      	movs	r2, #248	; 0xf8
   120ca:	701a      	strb	r2, [r3, #0]
  n = fatType == 16 ? 4 : 12;
   120cc:	2e10      	cmp	r6, #16
   120ce:	bf0c      	ite	eq
   120d0:	2004      	moveq	r0, #4
   120d2:	200c      	movne	r0, #12
  for (size_t i = 1; i < n; i++) {
   120d4:	2301      	movs	r3, #1
    m_secBuf[i] = 0XFF;
   120d6:	21ff      	movs	r1, #255	; 0xff
   120d8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   120da:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
   120dc:	3301      	adds	r3, #1
   120de:	4298      	cmp	r0, r3
   120e0:	d1fa      	bne.n	120d8 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x70>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
   120e2:	69e0      	ldr	r0, [r4, #28]
   120e4:	6803      	ldr	r3, [r0, #0]
   120e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   120e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   120ea:	68e1      	ldr	r1, [r4, #12]
   120ec:	4798      	blx	r3
   120ee:	4603      	mov	r3, r0
   120f0:	b140      	cbz	r0, 12104 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x9c>
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
   120f2:	69e0      	ldr	r0, [r4, #28]
   120f4:	68e5      	ldr	r5, [r4, #12]
   120f6:	68a1      	ldr	r1, [r4, #8]
   120f8:	6803      	ldr	r3, [r0, #0]
   120fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   120fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   120fe:	4429      	add	r1, r5
   12100:	4798      	blx	r3
   12102:	4603      	mov	r3, r0
}
   12104:	4618      	mov	r0, r3
   12106:	b007      	add	sp, #28
   12108:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1210a:	bf00      	nop
   1210c:	200021a8 	.word	0x200021a8
   12110:	00012039 	.word	0x00012039
   12114:	200021cc 	.word	0x200021cc

00012118 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
   12118:	b570      	push	{r4, r5, r6, lr}
   1211a:	4605      	mov	r5, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   1211c:	6a44      	ldr	r4, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   1211e:	f44f 7600 	mov.w	r6, #512	; 0x200
   12122:	4632      	mov	r2, r6
   12124:	2100      	movs	r1, #0
   12126:	4620      	mov	r0, r4
   12128:	f010 ff96 	bl	23058 <memset>
  pbs->jmpInstruction[0] = 0XEB;
   1212c:	23eb      	movs	r3, #235	; 0xeb
   1212e:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
   12130:	2376      	movs	r3, #118	; 0x76
   12132:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
   12134:	2390      	movs	r3, #144	; 0x90
   12136:	70a3      	strb	r3, [r4, #2]
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
   12138:	2320      	movs	r3, #32
   1213a:	70e3      	strb	r3, [r4, #3]
   1213c:	7123      	strb	r3, [r4, #4]
   1213e:	7163      	strb	r3, [r4, #5]
   12140:	71a3      	strb	r3, [r4, #6]
   12142:	71e3      	strb	r3, [r4, #7]
   12144:	7223      	strb	r3, [r4, #8]
   12146:	7263      	strb	r3, [r4, #9]
   12148:	72a3      	strb	r3, [r4, #10]
   1214a:	f8a4 600b 	strh.w	r6, [r4, #11]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
   1214e:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   12152:	7363      	strb	r3, [r4, #13]
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
   12154:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   12156:	81e3      	strh	r3, [r4, #14]
  pbs->bpb.bpb16.fatCount = 2;
   12158:	2302      	movs	r3, #2
   1215a:	7423      	strb	r3, [r4, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
   1215c:	23f8      	movs	r3, #248	; 0xf8
   1215e:	7563      	strb	r3, [r4, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
   12160:	692b      	ldr	r3, [r5, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
   12162:	61e3      	str	r3, [r4, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
   12164:	69ab      	ldr	r3, [r5, #24]
   12166:	6223      	str	r3, [r4, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
   12168:	f64a 2355 	movw	r3, #43605	; 0xaa55
   1216c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
   12170:	bd70      	pop	{r4, r5, r6, pc}

00012172 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
   12172:	b538      	push	{r3, r4, r5, lr}
   12174:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   12176:	f44f 7200 	mov.w	r2, #512	; 0x200
   1217a:	2100      	movs	r1, #0
   1217c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1217e:	f010 ff6b 	bl	23058 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
   12182:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
   12184:	6922      	ldr	r2, [r4, #16]
   12186:	6821      	ldr	r1, [r4, #0]
   12188:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
   1218c:	f002 fdc6 	bl	14d1c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
   12190:	6922      	ldr	r2, [r4, #16]
   12192:	69a3      	ldr	r3, [r4, #24]
   12194:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
   12196:	3a01      	subs	r2, #1
   12198:	6821      	ldr	r1, [r4, #0]
   1219a:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
   1219e:	f002 fdbd 	bl	14d1c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
   121a2:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   121a6:	f885 31c2 	strb.w	r3, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
   121aa:	6923      	ldr	r3, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
   121ac:	f8c5 31c6 	str.w	r3, [r5, #454]	; 0x1c6
  setLe32(mbr->part->totalSectors, m_totalSectors);
   121b0:	69a3      	ldr	r3, [r4, #24]
   121b2:	f8c5 31ca 	str.w	r3, [r5, #458]	; 0x1ca
  *reinterpret_cast<uint16_t*>(dst) = src;
   121b6:	f64a 2355 	movw	r3, #43605	; 0xaa55
   121ba:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
   121be:	69e0      	ldr	r0, [r4, #28]
   121c0:	6803      	ldr	r3, [r0, #0]
   121c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   121c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
   121c6:	2100      	movs	r1, #0
   121c8:	4798      	blx	r3
}
   121ca:	bd38      	pop	{r3, r4, r5, pc}

000121cc <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
   121cc:	b570      	push	{r4, r5, r6, lr}
   121ce:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   121d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   121d2:	f44f 7380 	mov.w	r3, #256	; 0x100
   121d6:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   121d8:	6946      	ldr	r6, [r0, #20]
   121da:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
   121de:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
   121e2:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   121e6:	f202 1001 	addw	r0, r2, #257	; 0x101
   121ea:	0a00      	lsrs	r0, r0, #8
   121ec:	60a0      	str	r0, [r4, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   121ee:	0040      	lsls	r0, r0, #1
   121f0:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
   121f4:	459c      	cmp	ip, r3
   121f6:	d90f      	bls.n	12218 <FatFormatter::makeFat16()+0x4c>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   121f8:	f44f 7380 	mov.w	r3, #256	; 0x100
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   121fc:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   121fe:	1af2      	subs	r2, r6, r3
   12200:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   12204:	f202 1101 	addw	r1, r2, #257	; 0x101
   12208:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   1220a:	0048      	lsls	r0, r1, #1
   1220c:	f100 0ca1 	add.w	ip, r0, #161	; 0xa1
    if (m_dataStart >= r) {
   12210:	4563      	cmp	r3, ip
   12212:	d3f3      	bcc.n	121fc <FatFormatter::makeFat16()+0x30>
   12214:	6063      	str	r3, [r4, #4]
   12216:	60a1      	str	r1, [r4, #8]
      m_relativeSectors = m_dataStart - r + BU16;
   12218:	eba3 030c 	sub.w	r3, r3, ip
   1221c:	f103 0180 	add.w	r1, r3, #128	; 0x80
   12220:	6121      	str	r1, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
   12222:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
   12226:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
   1222a:	d213      	bcs.n	12254 <FatFormatter::makeFat16()+0x88>
  m_reservedSectorCount = 1;
   1222c:	2101      	movs	r1, #1
   1222e:	8521      	strh	r1, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   12230:	3381      	adds	r3, #129	; 0x81
   12232:	60e3      	str	r3, [r4, #12]
                   + 2*m_fatSize + m_reservedSectorCount + 32;
   12234:	3021      	adds	r0, #33	; 0x21
   12236:	fb02 000e 	mla	r0, r2, lr, r0
  m_totalSectors = nc*m_sectorsPerCluster
   1223a:	61a0      	str	r0, [r4, #24]
    m_partType = 0X06;
   1223c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   12240:	bf34      	ite	cc
   12242:	2304      	movcc	r3, #4
   12244:	2306      	movcs	r3, #6
   12246:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  if (!writeMbr()) {
   1224a:	4620      	mov	r0, r4
   1224c:	f7ff ff91 	bl	12172 <FatFormatter::writeMbr()>
   12250:	b950      	cbnz	r0, 12268 <FatFormatter::makeFat16()+0x9c>
}
   12252:	bd70      	pop	{r4, r5, r6, pc}
    writeMsg("Bad cluster count\r\n");
   12254:	6a20      	ldr	r0, [r4, #32]
   12256:	2800      	cmp	r0, #0
   12258:	d040      	beq.n	122dc <FatFormatter::makeFat16()+0x110>
   1225a:	6803      	ldr	r3, [r0, #0]
   1225c:	685b      	ldr	r3, [r3, #4]
   1225e:	2213      	movs	r2, #19
   12260:	491f      	ldr	r1, [pc, #124]	; (122e0 <FatFormatter::makeFat16()+0x114>)
   12262:	4798      	blx	r3
    return false;
   12264:	2000      	movs	r0, #0
   12266:	e7f4      	b.n	12252 <FatFormatter::makeFat16()+0x86>
  initPbs();
   12268:	4620      	mov	r0, r4
   1226a:	f7ff ff55 	bl	12118 <FatFormatter::initPbs()>
   1226e:	f44f 7300 	mov.w	r3, #512	; 0x200
   12272:	f8a5 3011 	strh.w	r3, [r5, #17]
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
   12276:	68a3      	ldr	r3, [r4, #8]
   12278:	82eb      	strh	r3, [r5, #22]
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
   1227a:	2380      	movs	r3, #128	; 0x80
   1227c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
   12280:	2329      	movs	r3, #41	; 0x29
   12282:	f885 3026 	strb.w	r3, [r5, #38]	; 0x26
  *reinterpret_cast<uint32_t*>(dst) = src;
   12286:	4b17      	ldr	r3, [pc, #92]	; (122e4 <FatFormatter::makeFat16()+0x118>)
   12288:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
   1228c:	f105 032a 	add.w	r3, r5, #42	; 0x2a
   12290:	f105 0135 	add.w	r1, r5, #53	; 0x35
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   12294:	2220      	movs	r2, #32
   12296:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb16.volumeLabel); i++) {
   1229a:	4299      	cmp	r1, r3
   1229c:	d1fb      	bne.n	12296 <FatFormatter::makeFat16()+0xca>
  pbs->bpb.bpb16.volumeType[0] = 'F';
   1229e:	2346      	movs	r3, #70	; 0x46
   122a0:	f885 3036 	strb.w	r3, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[1] = 'A';
   122a4:	2341      	movs	r3, #65	; 0x41
   122a6:	f885 3037 	strb.w	r3, [r5, #55]	; 0x37
  pbs->bpb.bpb16.volumeType[2] = 'T';
   122aa:	2354      	movs	r3, #84	; 0x54
   122ac:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[3] = '1';
   122b0:	2331      	movs	r3, #49	; 0x31
   122b2:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[4] = '6';
   122b6:	2336      	movs	r3, #54	; 0x36
   122b8:	f885 303a 	strb.w	r3, [r5, #58]	; 0x3a
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
   122bc:	69e0      	ldr	r0, [r4, #28]
   122be:	6803      	ldr	r3, [r0, #0]
   122c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   122c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
   122c4:	6921      	ldr	r1, [r4, #16]
   122c6:	4798      	blx	r3
   122c8:	2800      	cmp	r0, #0
   122ca:	d0c2      	beq.n	12252 <FatFormatter::makeFat16()+0x86>
  return initFatDir(16, m_dataStart - m_fatStart);
   122cc:	6862      	ldr	r2, [r4, #4]
   122ce:	68e3      	ldr	r3, [r4, #12]
   122d0:	1ad2      	subs	r2, r2, r3
   122d2:	2110      	movs	r1, #16
   122d4:	4620      	mov	r0, r4
   122d6:	f7ff fec7 	bl	12068 <FatFormatter::initFatDir(unsigned char, unsigned long)>
   122da:	e7ba      	b.n	12252 <FatFormatter::makeFat16()+0x86>
    return false;
   122dc:	2000      	movs	r0, #0
   122de:	e7b8      	b.n	12252 <FatFormatter::makeFat16()+0x86>
   122e0:	2000217c 	.word	0x2000217c
   122e4:	0012d687 	.word	0x0012d687

000122e8 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
   122e8:	b570      	push	{r4, r5, r6, lr}
   122ea:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   122ec:	6a45      	ldr	r5, [r0, #36]	; 0x24
  m_relativeSectors = BU32;
   122ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   122f2:	6103      	str	r3, [r0, #16]
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   122f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
   122f8:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   122fa:	6946      	ldr	r6, [r0, #20]
   122fc:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
   12300:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
   12304:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
   12308:	f101 0381 	add.w	r3, r1, #129	; 0x81
   1230c:	09db      	lsrs	r3, r3, #7
   1230e:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
   12310:	f242 0209 	movw	r2, #8201	; 0x2009
   12314:	eb02 0243 	add.w	r2, r2, r3, lsl #1
    if (m_dataStart >= r) {
   12318:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
   1231c:	d931      	bls.n	12382 <FatFormatter::makeFat32()+0x9a>
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   1231e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    r = m_relativeSectors + 9 + 2*m_fatSize;
   12322:	f242 0e09 	movw	lr, #8201	; 0x2009
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   12326:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   1232a:	1ab1      	subs	r1, r6, r2
   1232c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
   12330:	f101 0381 	add.w	r3, r1, #129	; 0x81
   12334:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
   12336:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
   1233a:	4282      	cmp	r2, r0
   1233c:	d3f3      	bcc.n	12326 <FatFormatter::makeFat32()+0x3e>
   1233e:	6062      	str	r2, [r4, #4]
   12340:	60a3      	str	r3, [r4, #8]
  if (nc < 65525) {
   12342:	f64f 70f4 	movw	r0, #65524	; 0xfff4
   12346:	4281      	cmp	r1, r0
   12348:	d91e      	bls.n	12388 <FatFormatter::makeFat32()+0xa0>
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   1234a:	f5a2 5000 	sub.w	r0, r2, #8192	; 0x2000
   1234e:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
   12352:	b29b      	uxth	r3, r3
   12354:	8523      	strh	r3, [r4, #40]	; 0x28
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   12356:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   1235a:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   1235c:	fb01 220c 	mla	r2, r1, ip, r2
   12360:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   12364:	61a3      	str	r3, [r4, #24]
    m_partType = 0X0C;
   12366:	4b55      	ldr	r3, [pc, #340]	; (124bc <FatFormatter::makeFat32()+0x1d4>)
   12368:	429a      	cmp	r2, r3
   1236a:	bf94      	ite	ls
   1236c:	220b      	movls	r2, #11
   1236e:	220c      	movhi	r2, #12
   12370:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  if (!writeMbr()) {
   12374:	4620      	mov	r0, r4
   12376:	f7ff fefc 	bl	12172 <FatFormatter::writeMbr()>
   1237a:	4603      	mov	r3, r0
   1237c:	b978      	cbnz	r0, 1239e <FatFormatter::makeFat32()+0xb6>
}
   1237e:	4618      	mov	r0, r3
   12380:	bd70      	pop	{r4, r5, r6, pc}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   12382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   12386:	e7dc      	b.n	12342 <FatFormatter::makeFat32()+0x5a>
    writeMsg("Bad cluster count\r\n");
   12388:	6a20      	ldr	r0, [r4, #32]
   1238a:	2800      	cmp	r0, #0
   1238c:	f000 8093 	beq.w	124b6 <FatFormatter::makeFat32()+0x1ce>
   12390:	6803      	ldr	r3, [r0, #0]
   12392:	685b      	ldr	r3, [r3, #4]
   12394:	2213      	movs	r2, #19
   12396:	494a      	ldr	r1, [pc, #296]	; (124c0 <FatFormatter::makeFat32()+0x1d8>)
   12398:	4798      	blx	r3
    return false;
   1239a:	2300      	movs	r3, #0
   1239c:	e7ef      	b.n	1237e <FatFormatter::makeFat32()+0x96>
  initPbs();
   1239e:	4620      	mov	r0, r4
   123a0:	f7ff feba 	bl	12118 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
   123a4:	68a3      	ldr	r3, [r4, #8]
   123a6:	626b      	str	r3, [r5, #36]	; 0x24
   123a8:	2302      	movs	r3, #2
   123aa:	62eb      	str	r3, [r5, #44]	; 0x2c
  *reinterpret_cast<uint16_t*>(dst) = src;
   123ac:	2301      	movs	r3, #1
   123ae:	862b      	strh	r3, [r5, #48]	; 0x30
   123b0:	2306      	movs	r3, #6
   123b2:	866b      	strh	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
   123b4:	2380      	movs	r3, #128	; 0x80
   123b6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
   123ba:	2329      	movs	r3, #41	; 0x29
   123bc:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
  *reinterpret_cast<uint32_t*>(dst) = src;
   123c0:	4b40      	ldr	r3, [pc, #256]	; (124c4 <FatFormatter::makeFat32()+0x1dc>)
   123c2:	f8c5 3043 	str.w	r3, [r5, #67]	; 0x43
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
   123c6:	f105 0346 	add.w	r3, r5, #70	; 0x46
   123ca:	f105 0151 	add.w	r1, r5, #81	; 0x51
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   123ce:	2220      	movs	r2, #32
   123d0:	f803 2f01 	strb.w	r2, [r3, #1]!
  for (size_t i = 0; i < sizeof(pbs->bpb.bpb32.volumeLabel); i++) {
   123d4:	4299      	cmp	r1, r3
   123d6:	d1fb      	bne.n	123d0 <FatFormatter::makeFat32()+0xe8>
  pbs->bpb.bpb32.volumeType[0] = 'F';
   123d8:	2346      	movs	r3, #70	; 0x46
   123da:	f885 3052 	strb.w	r3, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[1] = 'A';
   123de:	2341      	movs	r3, #65	; 0x41
   123e0:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[2] = 'T';
   123e4:	2354      	movs	r3, #84	; 0x54
   123e6:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[3] = '3';
   123ea:	2333      	movs	r3, #51	; 0x33
   123ec:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[4] = '2';
   123f0:	2332      	movs	r3, #50	; 0x32
   123f2:	f885 3056 	strb.w	r3, [r5, #86]	; 0x56
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
   123f6:	69e0      	ldr	r0, [r4, #28]
   123f8:	6803      	ldr	r3, [r0, #0]
   123fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   123fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   123fe:	6921      	ldr	r1, [r4, #16]
   12400:	4798      	blx	r3
   12402:	4603      	mov	r3, r0
   12404:	2800      	cmp	r0, #0
   12406:	d0ba      	beq.n	1237e <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
   12408:	69e0      	ldr	r0, [r4, #28]
   1240a:	6921      	ldr	r1, [r4, #16]
   1240c:	6803      	ldr	r3, [r0, #0]
   1240e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12410:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12412:	3106      	adds	r1, #6
   12414:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
   12416:	4603      	mov	r3, r0
   12418:	2800      	cmp	r0, #0
   1241a:	d0b0      	beq.n	1237e <FatFormatter::makeFat32()+0x96>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
   1241c:	f44f 7200 	mov.w	r2, #512	; 0x200
   12420:	2100      	movs	r1, #0
   12422:	6a60      	ldr	r0, [r4, #36]	; 0x24
   12424:	f010 fe18 	bl	23058 <memset>
   12428:	4b27      	ldr	r3, [pc, #156]	; (124c8 <FatFormatter::makeFat32()+0x1e0>)
   1242a:	f8c5 31fc 	str.w	r3, [r5, #508]	; 0x1fc
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
   1242e:	69e0      	ldr	r0, [r4, #28]
   12430:	6921      	ldr	r1, [r4, #16]
   12432:	6803      	ldr	r3, [r0, #0]
   12434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12436:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12438:	3102      	adds	r1, #2
   1243a:	4798      	blx	r3
   1243c:	4603      	mov	r3, r0
   1243e:	2800      	cmp	r0, #0
   12440:	d09d      	beq.n	1237e <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
   12442:	69e0      	ldr	r0, [r4, #28]
   12444:	6921      	ldr	r1, [r4, #16]
   12446:	6803      	ldr	r3, [r0, #0]
   12448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1244a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1244c:	3108      	adds	r1, #8
   1244e:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
   12450:	4603      	mov	r3, r0
   12452:	2800      	cmp	r0, #0
   12454:	d093      	beq.n	1237e <FatFormatter::makeFat32()+0x96>
   12456:	4b1d      	ldr	r3, [pc, #116]	; (124cc <FatFormatter::makeFat32()+0x1e4>)
   12458:	602b      	str	r3, [r5, #0]
   1245a:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
   1245e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   12462:	3320      	adds	r3, #32
   12464:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
   12468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1246c:	f8c5 31e8 	str.w	r3, [r5, #488]	; 0x1e8
   12470:	f8c5 31ec 	str.w	r3, [r5, #492]	; 0x1ec
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
   12474:	69e0      	ldr	r0, [r4, #28]
   12476:	6921      	ldr	r1, [r4, #16]
   12478:	6803      	ldr	r3, [r0, #0]
   1247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1247c:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1247e:	3101      	adds	r1, #1
   12480:	4798      	blx	r3
   12482:	4603      	mov	r3, r0
   12484:	2800      	cmp	r0, #0
   12486:	f43f af7a 	beq.w	1237e <FatFormatter::makeFat32()+0x96>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
   1248a:	69e0      	ldr	r0, [r4, #28]
   1248c:	6921      	ldr	r1, [r4, #16]
   1248e:	6803      	ldr	r3, [r0, #0]
   12490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   12492:	6a62      	ldr	r2, [r4, #36]	; 0x24
   12494:	3107      	adds	r1, #7
   12496:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
   12498:	4603      	mov	r3, r0
   1249a:	2800      	cmp	r0, #0
   1249c:	f43f af6f 	beq.w	1237e <FatFormatter::makeFat32()+0x96>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
   124a0:	68a2      	ldr	r2, [r4, #8]
   124a2:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   124a6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   124aa:	2120      	movs	r1, #32
   124ac:	4620      	mov	r0, r4
   124ae:	f7ff fddb 	bl	12068 <FatFormatter::initFatDir(unsigned char, unsigned long)>
   124b2:	4603      	mov	r3, r0
   124b4:	e763      	b.n	1237e <FatFormatter::makeFat32()+0x96>
    return false;
   124b6:	2300      	movs	r3, #0
   124b8:	e761      	b.n	1237e <FatFormatter::makeFat32()+0x96>
   124ba:	bf00      	nop
   124bc:	00fb0400 	.word	0x00fb0400
   124c0:	2000217c 	.word	0x2000217c
   124c4:	0012d687 	.word	0x0012d687
   124c8:	aa550000 	.word	0xaa550000
   124cc:	41615252 	.word	0x41615252

000124d0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
   124d0:	b538      	push	{r3, r4, r5, lr}
   124d2:	4604      	mov	r4, r0
   124d4:	4608      	mov	r0, r1
  m_dev = dev;
   124d6:	61e1      	str	r1, [r4, #28]
  m_secBuf = secBuf;
   124d8:	6262      	str	r2, [r4, #36]	; 0x24
  m_pr = pr;
   124da:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
   124dc:	680b      	ldr	r3, [r1, #0]
   124de:	69db      	ldr	r3, [r3, #28]
   124e0:	4798      	blx	r3
   124e2:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   124e4:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
   124e8:	0ada      	lsrs	r2, r3, #11
   124ea:	6022      	str	r2, [r4, #0]
  if (m_capacityMB <= 6) {
   124ec:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
   124f0:	d31d      	bcc.n	1252e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x5e>
  } else if (m_capacityMB <= 16) {
   124f2:	f5b3 4f08 	cmp.w	r3, #34816	; 0x8800
   124f6:	d333      	bcc.n	12560 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
  } else if (m_capacityMB <= 32) {
   124f8:	f5b3 3f84 	cmp.w	r3, #67584	; 0x10800
   124fc:	d342      	bcc.n	12584 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb4>
  } else if (m_capacityMB <= 64) {
   124fe:	f5b3 3f02 	cmp.w	r3, #133120	; 0x20800
   12502:	d341      	bcc.n	12588 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb8>
  } else if (m_capacityMB <= 128) {
   12504:	f5b3 2f81 	cmp.w	r3, #264192	; 0x40800
   12508:	d340      	bcc.n	1258c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xbc>
  } else if (m_capacityMB <= 1024) {
   1250a:	4a22      	ldr	r2, [pc, #136]	; (12594 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc4>)
   1250c:	4293      	cmp	r3, r2
   1250e:	d93f      	bls.n	12590 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc0>
  } else if (m_capacityMB <= 32768) {
   12510:	f102 7278 	add.w	r2, r2, #65011712	; 0x3e00000
   12514:	4293      	cmp	r3, r2
   12516:	d814      	bhi.n	12542 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x72>
    m_sectorsPerCluster = 64;
   12518:	2340      	movs	r3, #64	; 0x40
   1251a:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   1251e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
   12522:	d320      	bcc.n	12566 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x96>
   12524:	4620      	mov	r0, r4
   12526:	f7ff fedf 	bl	122e8 <FatFormatter::makeFat32()>
   1252a:	4605      	mov	r5, r0
   1252c:	e01f      	b.n	1256e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9e>
    writeMsg("Card is too small.\r\n");
   1252e:	6a20      	ldr	r0, [r4, #32]
   12530:	b1a0      	cbz	r0, 1255c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x8c>
   12532:	6803      	ldr	r3, [r0, #0]
   12534:	685b      	ldr	r3, [r3, #4]
   12536:	2214      	movs	r2, #20
   12538:	4917      	ldr	r1, [pc, #92]	; (12598 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xc8>)
   1253a:	4798      	blx	r3
    return false;
   1253c:	2500      	movs	r5, #0
}
   1253e:	4628      	mov	r0, r5
   12540:	bd38      	pop	{r3, r4, r5, pc}
    m_sectorsPerCluster = 128;
   12542:	2380      	movs	r3, #128	; 0x80
   12544:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   12548:	e7ec      	b.n	12524 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x54>
    writeMsg("Format Failed\r\n");
   1254a:	6a20      	ldr	r0, [r4, #32]
   1254c:	2800      	cmp	r0, #0
   1254e:	d0f6      	beq.n	1253e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
   12550:	6803      	ldr	r3, [r0, #0]
   12552:	685b      	ldr	r3, [r3, #4]
   12554:	220f      	movs	r2, #15
   12556:	4911      	ldr	r1, [pc, #68]	; (1259c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xcc>)
   12558:	4798      	blx	r3
   1255a:	e7f0      	b.n	1253e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
    return false;
   1255c:	2500      	movs	r5, #0
   1255e:	e7ee      	b.n	1253e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
   12560:	2302      	movs	r3, #2
    m_sectorsPerCluster = 32;
   12562:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   12566:	4620      	mov	r0, r4
   12568:	f7ff fe30 	bl	121cc <FatFormatter::makeFat16()>
   1256c:	4605      	mov	r5, r0
  if (rtn) {
   1256e:	2d00      	cmp	r5, #0
   12570:	d0eb      	beq.n	1254a <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7a>
    writeMsg("Format Done\r\n");
   12572:	6a20      	ldr	r0, [r4, #32]
   12574:	2800      	cmp	r0, #0
   12576:	d0e2      	beq.n	1253e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
   12578:	6803      	ldr	r3, [r0, #0]
   1257a:	685b      	ldr	r3, [r3, #4]
   1257c:	220d      	movs	r2, #13
   1257e:	4908      	ldr	r1, [pc, #32]	; (125a0 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xd0>)
   12580:	4798      	blx	r3
   12582:	e7dc      	b.n	1253e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6e>
   12584:	2304      	movs	r3, #4
   12586:	e7ec      	b.n	12562 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
   12588:	2308      	movs	r3, #8
   1258a:	e7ea      	b.n	12562 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
   1258c:	2310      	movs	r3, #16
   1258e:	e7e8      	b.n	12562 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
   12590:	2320      	movs	r3, #32
   12592:	e7e6      	b.n	12562 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x92>
   12594:	002007ff 	.word	0x002007ff
   12598:	20002144 	.word	0x20002144
   1259c:	2000216c 	.word	0x2000216c
   125a0:	2000215c 	.word	0x2000215c

000125a4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
  if (i < 5) {
   125a4:	2a04      	cmp	r2, #4
   125a6:	d804      	bhi.n	125b2 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
   125a8:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   125ac:	f8b1 0001 	ldrh.w	r0, [r1, #1]
    return getLe16(ldir->unicode1 + 2*i);
   125b0:	4770      	bx	lr
  } else if (i < 11) {
   125b2:	2a0a      	cmp	r2, #10
   125b4:	d803      	bhi.n	125be <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
   125b6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   125ba:	8888      	ldrh	r0, [r1, #4]
    return getLe16(ldir->unicode2 + 2*i - 10);
   125bc:	4770      	bx	lr
  } else if (i < 13) {
   125be:	2a0c      	cmp	r2, #12
   125c0:	d803      	bhi.n	125ca <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
   125c2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   125c6:	88c8      	ldrh	r0, [r1, #6]
    return getLe16(ldir->unicode3 + 2*i - 22);
   125c8:	4770      	bx	lr
  return 0;
   125ca:	2000      	movs	r0, #0
}
   125cc:	4770      	bx	lr

000125ce <FatFile::getSFN(char*, unsigned int)>:
size_t FatFile::getSFN(char* name, size_t size) {
   125ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   125d2:	460d      	mov	r5, r1
  bool isOpen() const {return m_attributes;}
   125d4:	7804      	ldrb	r4, [r0, #0]
  if (!isOpen()) {
   125d6:	2c00      	cmp	r4, #0
   125d8:	d041      	beq.n	1265e <FatFile::getSFN(char*, unsigned int)+0x90>
   125da:	4616      	mov	r6, r2
  if (isRoot()) {
   125dc:	f014 0460 	ands.w	r4, r4, #96	; 0x60
   125e0:	d007      	beq.n	125f2 <FatFile::getSFN(char*, unsigned int)+0x24>
    if (size < 2) {
   125e2:	2a01      	cmp	r2, #1
   125e4:	d93b      	bls.n	1265e <FatFile::getSFN(char*, unsigned int)+0x90>
    name[0] = '/';
   125e6:	232f      	movs	r3, #47	; 0x2f
   125e8:	700b      	strb	r3, [r1, #0]
    name[1] = '\0';
   125ea:	2300      	movs	r3, #0
   125ec:	704b      	strb	r3, [r1, #1]
    return 1;
   125ee:	2001      	movs	r0, #1
   125f0:	e037      	b.n	12662 <FatFile::getSFN(char*, unsigned int)+0x94>
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
   125f2:	2100      	movs	r1, #0
   125f4:	f7fe f930 	bl	10858 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   125f8:	4686      	mov	lr, r0
   125fa:	b380      	cbz	r0, 1265e <FatFile::getSFN(char*, unsigned int)+0x90>
  ptr = dir->name;
   125fc:	4603      	mov	r3, r0
   125fe:	2000      	movs	r0, #0
  uint8_t lcBit = FAT_CASE_LC_BASE;
   12600:	2108      	movs	r1, #8
      lcBit = FAT_CASE_LC_EXT;
   12602:	f04f 0810 	mov.w	r8, #16
      c = '.';
   12606:	272e      	movs	r7, #46	; 0x2e
   12608:	e012      	b.n	12630 <FatFile::getSFN(char*, unsigned int)+0x62>
      if (*ptr == ' ') {
   1260a:	781a      	ldrb	r2, [r3, #0]
   1260c:	2a20      	cmp	r2, #32
   1260e:	d022      	beq.n	12656 <FatFile::getSFN(char*, unsigned int)+0x88>
      lcBit = FAT_CASE_LC_EXT;
   12610:	4641      	mov	r1, r8
      c = '.';
   12612:	46bc      	mov	ip, r7
   12614:	e002      	b.n	1261c <FatFile::getSFN(char*, unsigned int)+0x4e>
      if (c == ' ') {
   12616:	f1bc 0f20 	cmp.w	ip, #32
   1261a:	d006      	beq.n	1262a <FatFile::getSFN(char*, unsigned int)+0x5c>
    if ((j + 1u) >= size) {
   1261c:	46a1      	mov	r9, r4
   1261e:	1c62      	adds	r2, r4, #1
   12620:	42b2      	cmp	r2, r6
   12622:	d21c      	bcs.n	1265e <FatFile::getSFN(char*, unsigned int)+0x90>
    name[j++] = c;
   12624:	b2d4      	uxtb	r4, r2
   12626:	f805 c009 	strb.w	ip, [r5, r9]
  for (uint8_t i = 0; i < 12; i++) {
   1262a:	3001      	adds	r0, #1
   1262c:	280c      	cmp	r0, #12
   1262e:	d012      	beq.n	12656 <FatFile::getSFN(char*, unsigned int)+0x88>
    if (i == 8) {
   12630:	b2c2      	uxtb	r2, r0
   12632:	2a08      	cmp	r2, #8
   12634:	d0e9      	beq.n	1260a <FatFile::getSFN(char*, unsigned int)+0x3c>
      c = *ptr++;
   12636:	f813 cb01 	ldrb.w	ip, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
   1263a:	f1ac 0241 	sub.w	r2, ip, #65	; 0x41
   1263e:	b2d2      	uxtb	r2, r2
   12640:	2a19      	cmp	r2, #25
   12642:	d8e8      	bhi.n	12616 <FatFile::getSFN(char*, unsigned int)+0x48>
   12644:	f89e 200c 	ldrb.w	r2, [lr, #12]
   12648:	4211      	tst	r1, r2
   1264a:	d0e7      	beq.n	1261c <FatFile::getSFN(char*, unsigned int)+0x4e>
        c += 'a' - 'A';
   1264c:	f10c 0c20 	add.w	ip, ip, #32
   12650:	fa5f fc8c 	uxtb.w	ip, ip
   12654:	e7e2      	b.n	1261c <FatFile::getSFN(char*, unsigned int)+0x4e>
  name[j] = '\0';
   12656:	4620      	mov	r0, r4
   12658:	2300      	movs	r3, #0
   1265a:	552b      	strb	r3, [r5, r4]
  return j;
   1265c:	e001      	b.n	12662 <FatFile::getSFN(char*, unsigned int)+0x94>
  name[0] = '\0';
   1265e:	2000      	movs	r0, #0
   12660:	7028      	strb	r0, [r5, #0]
}
   12662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

00012668 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
   12668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1266c:	b08b      	sub	sp, #44	; 0x2c
   1266e:	4689      	mov	r9, r1
  FatFile() {}
   12670:	2300      	movs	r3, #0
   12672:	f88d 3004 	strb.w	r3, [sp, #4]
   12676:	f88d 3005 	strb.w	r3, [sp, #5]
   1267a:	f88d 3006 	strb.w	r3, [sp, #6]
  if (!isOpen()) {
   1267e:	7803      	ldrb	r3, [r0, #0]
   12680:	2b00      	cmp	r3, #0
   12682:	d05d      	beq.n	12740 <FatFile::getName8(char*, unsigned int)+0xd8>
   12684:	4604      	mov	r4, r0
   12686:	4617      	mov	r7, r2
  if (!isLFN()) {
   12688:	78c3      	ldrb	r3, [r0, #3]
   1268a:	b913      	cbnz	r3, 12692 <FatFile::getName8(char*, unsigned int)+0x2a>
    return getSFN(name, size);
   1268c:	f7ff ff9f 	bl	125ce <FatFile::getSFN(char*, unsigned int)>
   12690:	e059      	b.n	12746 <FatFile::getName8(char*, unsigned int)+0xde>
  if (!dir.openCluster(this)) {
   12692:	4601      	mov	r1, r0
   12694:	a801      	add	r0, sp, #4
   12696:	f7fe f90e 	bl	108b6 <FatFile::openCluster(FatFile*)>
   1269a:	2800      	cmp	r0, #0
   1269c:	d050      	beq.n	12740 <FatFile::getName8(char*, unsigned int)+0xd8>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   1269e:	78e3      	ldrb	r3, [r4, #3]
   126a0:	2b00      	cmp	r3, #0
   126a2:	d05d      	beq.n	12760 <FatFile::getName8(char*, unsigned int)+0xf8>
  char* str = name;
   126a4:	464d      	mov	r5, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   126a6:	f04f 0b01 	mov.w	fp, #1
  uint16_t hs = 0;
   126aa:	2600      	movs	r6, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   126ac:	3f01      	subs	r7, #1
   126ae:	444f      	add	r7, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
   126b0:	88a1      	ldrh	r1, [r4, #4]
   126b2:	eba1 010b 	sub.w	r1, r1, fp
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   126b6:	b289      	uxth	r1, r1
   126b8:	0149      	lsls	r1, r1, #5
   126ba:	a801      	add	r0, sp, #4
   126bc:	f7fe fa1c 	bl	10af8 <FatFile::seekSet(unsigned long)>
   126c0:	2800      	cmp	r0, #0
   126c2:	d03d      	beq.n	12740 <FatFile::getName8(char*, unsigned int)+0xd8>
   126c4:	2100      	movs	r1, #0
   126c6:	a801      	add	r0, sp, #4
   126c8:	f7fe f9f4 	bl	10ab4 <FatFile::readDirCache(bool)>
    if (!ldir) {
   126cc:	4682      	mov	sl, r0
   126ce:	b3b8      	cbz	r0, 12740 <FatFile::getName8(char*, unsigned int)+0xd8>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   126d0:	7ac3      	ldrb	r3, [r0, #11]
   126d2:	2b0f      	cmp	r3, #15
   126d4:	d134      	bne.n	12740 <FatFile::getName8(char*, unsigned int)+0xd8>
   126d6:	7803      	ldrb	r3, [r0, #0]
   126d8:	f003 031f 	and.w	r3, r3, #31
   126dc:	455b      	cmp	r3, fp
   126de:	d12f      	bne.n	12740 <FatFile::getName8(char*, unsigned int)+0xd8>
   126e0:	f04f 0800 	mov.w	r8, #0
   126e4:	e012      	b.n	1270c <FatFile::getName8(char*, unsigned int)+0xa4>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
   126e6:	f500 5320 	add.w	r3, r0, #10240	; 0x2800
   126ea:	b29b      	uxth	r3, r3
      } else if (!FsUtf::isSurrogate(c)) {
   126ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   126f0:	d323      	bcc.n	1273a <FatFile::getName8(char*, unsigned int)+0xd2>
        if (c == 0) {
   126f2:	b3b0      	cbz	r0, 12762 <FatFile::getName8(char*, unsigned int)+0xfa>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   126f4:	463a      	mov	r2, r7
   126f6:	4629      	mov	r1, r5
   126f8:	f002 fb65 	bl	14dc6 <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
   126fc:	4605      	mov	r5, r0
   126fe:	b1f8      	cbz	r0, 12740 <FatFile::getName8(char*, unsigned int)+0xd8>
   12700:	2600      	movs	r6, #0
    for (uint8_t i = 0; i < 13; i++) {
   12702:	f108 0801 	add.w	r8, r8, #1
   12706:	f1b8 0f0d 	cmp.w	r8, #13
   1270a:	d021      	beq.n	12750 <FatFile::getName8(char*, unsigned int)+0xe8>
      uint16_t c = getLfnChar(ldir, i);
   1270c:	fa5f f288 	uxtb.w	r2, r8
   12710:	4651      	mov	r1, sl
   12712:	4620      	mov	r0, r4
   12714:	f7ff ff46 	bl	125a4 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
      if (hs) {
   12718:	2e00      	cmp	r6, #0
   1271a:	d0e4      	beq.n	126e6 <FatFile::getName8(char*, unsigned int)+0x7e>
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
   1271c:	f500 5310 	add.w	r3, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
   12720:	b29b      	uxth	r3, r3
   12722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   12726:	d20b      	bcs.n	12740 <FatFile::getName8(char*, unsigned int)+0xd8>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
   12728:	4b10      	ldr	r3, [pc, #64]	; (1276c <FatFile::getName8(char*, unsigned int)+0x104>)
   1272a:	ea03 2686 	and.w	r6, r3, r6, lsl #10
   1272e:	f3c0 0009 	ubfx	r0, r0, #0, #10
   12732:	4306      	orrs	r6, r0
   12734:	f506 3080 	add.w	r0, r6, #65536	; 0x10000
        hs = 0;
   12738:	e7dc      	b.n	126f4 <FatFile::getName8(char*, unsigned int)+0x8c>
      } else if (FsUtf::isHighSurrogate(c)) {
   1273a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   1273e:	d305      	bcc.n	1274c <FatFile::getName8(char*, unsigned int)+0xe4>
  *name = 0;
   12740:	2000      	movs	r0, #0
   12742:	f889 0000 	strb.w	r0, [r9]
}
   12746:	b00b      	add	sp, #44	; 0x2c
   12748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hs = c;
   1274c:	4606      	mov	r6, r0
   1274e:	e7d8      	b.n	12702 <FatFile::getName8(char*, unsigned int)+0x9a>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   12750:	f10b 0b01 	add.w	fp, fp, #1
   12754:	fa5f fb8b 	uxtb.w	fp, fp
   12758:	78e3      	ldrb	r3, [r4, #3]
   1275a:	455b      	cmp	r3, fp
   1275c:	d2a8      	bcs.n	126b0 <FatFile::getName8(char*, unsigned int)+0x48>
   1275e:	e000      	b.n	12762 <FatFile::getName8(char*, unsigned int)+0xfa>
  char* str = name;
   12760:	464d      	mov	r5, r9
  *str = '\0';
   12762:	2300      	movs	r3, #0
   12764:	702b      	strb	r3, [r5, #0]
  return str - name;
   12766:	eba5 0009 	sub.w	r0, r5, r9
   1276a:	e7ec      	b.n	12746 <FatFile::getName8(char*, unsigned int)+0xde>
   1276c:	000ffc00 	.word	0x000ffc00

00012770 <FatFile::getName(char*, unsigned int)>:
size_t FatFile::getName(char* name, size_t size) {
   12770:	b508      	push	{r3, lr}
  return getName8(name, size);
   12772:	f7ff ff79 	bl	12668 <FatFile::getName8(char*, unsigned int)>
}
   12776:	bd08      	pop	{r3, pc}

00012778 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   12778:	b410      	push	{r4}
  unsigned int n = state->clusters_to_do;
   1277a:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
   1277c:	46a4      	mov	ip, r4
   1277e:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   12782:	bf28      	it	cs
   12784:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
   12788:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
   1278c:	4281      	cmp	r1, r0
   1278e:	d307      	bcc.n	127a0 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
  state->clusters_to_do -= n;
   12790:	eba4 040c 	sub.w	r4, r4, ip
   12794:	6014      	str	r4, [r2, #0]
}
   12796:	f85d 4b04 	ldr.w	r4, [sp], #4
   1279a:	4770      	bx	lr
  while (p < e) {
   1279c:	4288      	cmp	r0, r1
   1279e:	d9f7      	bls.n	12790 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
    if (*p++ == 0) state->free_count++;
   127a0:	f831 3b02 	ldrh.w	r3, [r1], #2
   127a4:	2b00      	cmp	r3, #0
   127a6:	d1f9      	bne.n	1279c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
   127a8:	6853      	ldr	r3, [r2, #4]
   127aa:	3301      	adds	r3, #1
   127ac:	6053      	str	r3, [r2, #4]
   127ae:	e7f5      	b.n	1279c <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>

000127b0 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
   127b0:	b410      	push	{r4}
  unsigned int n = state->clusters_to_do;
   127b2:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
   127b4:	46a4      	mov	ip, r4
   127b6:	2c80      	cmp	r4, #128	; 0x80
   127b8:	bf28      	it	cs
   127ba:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
   127be:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
   127c2:	4281      	cmp	r1, r0
   127c4:	d307      	bcc.n	127d6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
  state->clusters_to_do -= n;
   127c6:	eba4 040c 	sub.w	r4, r4, ip
   127ca:	6014      	str	r4, [r2, #0]
}
   127cc:	f85d 4b04 	ldr.w	r4, [sp], #4
   127d0:	4770      	bx	lr
  while (p < e) {
   127d2:	4288      	cmp	r0, r1
   127d4:	d9f7      	bls.n	127c6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
    if (*p++ == 0) state->free_count++;
   127d6:	f851 3b04 	ldr.w	r3, [r1], #4
   127da:	2b00      	cmp	r3, #0
   127dc:	d1f9      	bne.n	127d2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
   127de:	6853      	ldr	r3, [r2, #4]
   127e0:	3301      	adds	r3, #1
   127e2:	6053      	str	r3, [r2, #4]
   127e4:	e7f5      	b.n	127d2 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>

000127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
   127e6:	2901      	cmp	r1, #1
   127e8:	d974      	bls.n	128d4 <FatPartition::fatGet(unsigned long, unsigned long*)+0xee>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
   127ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   127ee:	4606      	mov	r6, r0
   127f0:	460c      	mov	r4, r1
   127f2:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   127f4:	69c3      	ldr	r3, [r0, #28]
   127f6:	428b      	cmp	r3, r1
   127f8:	d36f      	bcc.n	128da <FatPartition::fatGet(unsigned long, unsigned long*)+0xf4>
    return m_fatType;
   127fa:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   127fc:	2b20      	cmp	r3, #32
   127fe:	d02d      	beq.n	1285c <FatPartition::fatGet(unsigned long, unsigned long*)+0x76>
  } else if (fatType() == 16) {
   12800:	2b10      	cmp	r3, #16
   12802:	d044      	beq.n	1288e <FatPartition::fatGet(unsigned long, unsigned long*)+0xa8>
  } else if (FAT12_SUPPORT && fatType() == 12) {
   12804:	2b0c      	cmp	r3, #12
   12806:	d172      	bne.n	128ee <FatPartition::fatGet(unsigned long, unsigned long*)+0x108>
    index += index >> 1;
   12808:	f3c1 034e 	ubfx	r3, r1, #1, #15
   1280c:	fa13 f381 	uxtah	r3, r3, r1
   12810:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   12812:	f3c3 2346 	ubfx	r3, r3, #9, #7
   12816:	6982      	ldr	r2, [r0, #24]
   12818:	eb03 0802 	add.w	r8, r3, r2
    return m_fatCache.prepare(sector, options);
   1281c:	f500 790e 	add.w	r9, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   12820:	7a02      	ldrb	r2, [r0, #8]
   12822:	2a02      	cmp	r2, #2
   12824:	bf14      	ite	ne
   12826:	2200      	movne	r2, #0
   12828:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
   1282a:	0052      	lsls	r2, r2, #1
   1282c:	4641      	mov	r1, r8
   1282e:	4648      	mov	r0, r9
   12830:	f002 fa0f 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   12834:	4602      	mov	r2, r0
   12836:	2800      	cmp	r0, #0
   12838:	d05c      	beq.n	128f4 <FatPartition::fatGet(unsigned long, unsigned long*)+0x10e>
    index &= m_sectorMask;
   1283a:	f3c7 0308 	ubfx	r3, r7, #0, #9
    uint16_t tmp = pc[index];
   1283e:	5cc7      	ldrb	r7, [r0, r3]
    index++;
   12840:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   12842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12846:	d036      	beq.n	128b6 <FatPartition::fatGet(unsigned long, unsigned long*)+0xd0>
    tmp |= pc[index] << 8;
   12848:	5cd3      	ldrb	r3, [r2, r3]
   1284a:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
   1284e:	f014 0f01 	tst.w	r4, #1
   12852:	bf14      	ite	ne
   12854:	091b      	lsrne	r3, r3, #4
   12856:	f3c3 030b 	ubfxeq	r3, r3, #0, #12
   1285a:	e012      	b.n	12882 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1285c:	7a02      	ldrb	r2, [r0, #8]
   1285e:	2a02      	cmp	r2, #2
   12860:	bf14      	ite	ne
   12862:	2200      	movne	r2, #0
   12864:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   12866:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
   12868:	0052      	lsls	r2, r2, #1
   1286a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   1286e:	f500 700e 	add.w	r0, r0, #568	; 0x238
   12872:	f002 f9ee 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   12876:	2800      	cmp	r0, #0
   12878:	d033      	beq.n	128e2 <FatPartition::fatGet(unsigned long, unsigned long*)+0xfc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
   1287a:	00a4      	lsls	r4, r4, #2
    next = getLe32(pc + offset);
   1287c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
   12880:	5903      	ldr	r3, [r0, r4]
  if (isEOC(next)) {
   12882:	69f2      	ldr	r2, [r6, #28]
   12884:	4293      	cmp	r3, r2
   12886:	d83b      	bhi.n	12900 <FatPartition::fatGet(unsigned long, unsigned long*)+0x11a>
  *value = next;
   12888:	602b      	str	r3, [r5, #0]
  return 1;
   1288a:	2001      	movs	r0, #1
   1288c:	e027      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1288e:	7a02      	ldrb	r2, [r0, #8]
   12890:	2a02      	cmp	r2, #2
   12892:	bf14      	ite	ne
   12894:	2200      	movne	r2, #0
   12896:	2201      	moveq	r2, #1
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
   12898:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1289c:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   1289e:	0052      	lsls	r2, r2, #1
   128a0:	4419      	add	r1, r3
   128a2:	f500 700e 	add.w	r0, r0, #568	; 0x238
   128a6:	f002 f9d4 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   128aa:	b1e8      	cbz	r0, 128e8 <FatPartition::fatGet(unsigned long, unsigned long*)+0x102>
    uint16_t offset = (cluster << 1) & m_sectorMask;
   128ac:	0064      	lsls	r4, r4, #1
    next = getLe16(pc + offset);
   128ae:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   128b2:	5b03      	ldrh	r3, [r0, r4]
   128b4:	e7e5      	b.n	12882 <FatPartition::fatGet(unsigned long, unsigned long*)+0x9c>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   128b6:	7a32      	ldrb	r2, [r6, #8]
   128b8:	2a02      	cmp	r2, #2
   128ba:	bf14      	ite	ne
   128bc:	2200      	movne	r2, #0
   128be:	2201      	moveq	r2, #1
    return m_fatCache.prepare(sector, options);
   128c0:	0052      	lsls	r2, r2, #1
   128c2:	f108 0101 	add.w	r1, r8, #1
   128c6:	4648      	mov	r0, r9
   128c8:	f002 f9c3 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   128cc:	4602      	mov	r2, r0
   128ce:	b1a0      	cbz	r0, 128fa <FatPartition::fatGet(unsigned long, unsigned long*)+0x114>
      index = 0;
   128d0:	2300      	movs	r3, #0
   128d2:	e7b9      	b.n	12848 <FatPartition::fatGet(unsigned long, unsigned long*)+0x62>
  return -1;
   128d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   128d8:	4770      	bx	lr
  return -1;
   128da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   128de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return -1;
   128e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128e6:	e7fa      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
   128e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128ec:	e7f7      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
   128ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128f2:	e7f4      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
   128f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128f8:	e7f1      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
   128fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   128fe:	e7ee      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>
    return 0;
   12900:	2000      	movs	r0, #0
   12902:	e7ec      	b.n	128de <FatPartition::fatGet(unsigned long, unsigned long*)+0xf8>

00012904 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
   12904:	2901      	cmp	r1, #1
   12906:	d972      	bls.n	129ee <FatPartition::fatPut(unsigned long, unsigned long)+0xea>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
   12908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1290c:	4606      	mov	r6, r0
   1290e:	460c      	mov	r4, r1
   12910:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   12912:	69c3      	ldr	r3, [r0, #28]
   12914:	428b      	cmp	r3, r1
   12916:	d36c      	bcc.n	129f2 <FatPartition::fatPut(unsigned long, unsigned long)+0xee>
    return m_fatType;
   12918:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   1291a:	2b20      	cmp	r3, #32
   1291c:	d02d      	beq.n	1297a <FatPartition::fatPut(unsigned long, unsigned long)+0x76>
  if (fatType() == 16) {
   1291e:	2b10      	cmp	r3, #16
   12920:	d03e      	beq.n	129a0 <FatPartition::fatPut(unsigned long, unsigned long)+0x9c>
  if (FAT12_SUPPORT && fatType() == 12) {
   12922:	2b0c      	cmp	r3, #12
   12924:	d16c      	bne.n	12a00 <FatPartition::fatPut(unsigned long, unsigned long)+0xfc>
    index += index >> 1;
   12926:	f3c1 034e 	ubfx	r3, r1, #1, #15
   1292a:	fa13 f381 	uxtah	r3, r3, r1
   1292e:	b29f      	uxth	r7, r3
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   12930:	f3c3 2346 	ubfx	r3, r3, #9, #7
   12934:	6982      	ldr	r2, [r0, #24]
   12936:	eb03 0802 	add.w	r8, r3, r2
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1293a:	7a03      	ldrb	r3, [r0, #8]
   1293c:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   1293e:	f500 790e 	add.w	r9, r0, #568	; 0x238
   12942:	bf14      	ite	ne
   12944:	2201      	movne	r2, #1
   12946:	2203      	moveq	r2, #3
   12948:	4641      	mov	r1, r8
   1294a:	4648      	mov	r0, r9
   1294c:	f002 f981 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   12950:	4601      	mov	r1, r0
   12952:	2800      	cmp	r0, #0
   12954:	d056      	beq.n	12a04 <FatPartition::fatPut(unsigned long, unsigned long)+0x100>
    index &= m_sectorMask;
   12956:	f3c7 0308 	ubfx	r3, r7, #0, #9
    if (cluster & 1) {
   1295a:	f014 0401 	ands.w	r4, r4, #1
   1295e:	d055      	beq.n	12a0c <FatPartition::fatPut(unsigned long, unsigned long)+0x108>
      tmp = (pc[index] & 0XF) | tmp << 4;
   12960:	5cc2      	ldrb	r2, [r0, r3]
   12962:	f002 020f 	and.w	r2, r2, #15
   12966:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    pc[index] = tmp;
   1296a:	54c2      	strb	r2, [r0, r3]
    index++;
   1296c:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   1296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12972:	d029      	beq.n	129c8 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
   12974:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
   12978:	e054      	b.n	12a24 <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   1297a:	6981      	ldr	r1, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1297c:	7a03      	ldrb	r3, [r0, #8]
   1297e:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   12980:	bf14      	ite	ne
   12982:	2201      	movne	r2, #1
   12984:	2203      	moveq	r2, #3
   12986:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   1298a:	f500 700e 	add.w	r0, r0, #568	; 0x238
   1298e:	f002 f960 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   12992:	b388      	cbz	r0, 129f8 <FatPartition::fatPut(unsigned long, unsigned long)+0xf4>
    uint16_t offset = (cluster << 2) & m_sectorMask;
   12994:	00a4      	lsls	r4, r4, #2
    setLe32(pc + offset, value);
   12996:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
   1299a:	5105      	str	r5, [r0, r4]
    return true;
   1299c:	2001      	movs	r0, #1
   1299e:	e029      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
   129a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   129a4:	6983      	ldr	r3, [r0, #24]
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   129a6:	7a02      	ldrb	r2, [r0, #8]
   129a8:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
   129aa:	bf14      	ite	ne
   129ac:	2201      	movne	r2, #1
   129ae:	2203      	moveq	r2, #3
   129b0:	4419      	add	r1, r3
   129b2:	f500 700e 	add.w	r0, r0, #568	; 0x238
   129b6:	f002 f94c 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   129ba:	b1f8      	cbz	r0, 129fc <FatPartition::fatPut(unsigned long, unsigned long)+0xf8>
    uint16_t offset = (cluster << 1) & m_sectorMask;
   129bc:	0064      	lsls	r4, r4, #1
    setLe16(pc + offset, value);
   129be:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   129c2:	5305      	strh	r5, [r0, r4]
    return true;
   129c4:	2001      	movs	r0, #1
   129c6:	e015      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   129c8:	7a33      	ldrb	r3, [r6, #8]
   129ca:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   129cc:	bf14      	ite	ne
   129ce:	2201      	movne	r2, #1
   129d0:	2203      	moveq	r2, #3
   129d2:	f108 0101 	add.w	r1, r8, #1
   129d6:	4648      	mov	r0, r9
   129d8:	f002 f93b 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   129dc:	4601      	mov	r1, r0
   129de:	b198      	cbz	r0, 12a08 <FatPartition::fatPut(unsigned long, unsigned long)+0x104>
    tmp = value >> 4;
   129e0:	f3c5 1207 	ubfx	r2, r5, #4, #8
    if (!(cluster & 1)) {
   129e4:	b90c      	cbnz	r4, 129ea <FatPartition::fatPut(unsigned long, unsigned long)+0xe6>
      index = 0;
   129e6:	2300      	movs	r3, #0
   129e8:	e017      	b.n	12a1a <FatPartition::fatPut(unsigned long, unsigned long)+0x116>
   129ea:	2300      	movs	r3, #0
   129ec:	e01a      	b.n	12a24 <FatPartition::fatPut(unsigned long, unsigned long)+0x120>
  return false;
   129ee:	2000      	movs	r0, #0
}
   129f0:	4770      	bx	lr
  return false;
   129f2:	2000      	movs	r0, #0
}
   129f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
   129f8:	2000      	movs	r0, #0
   129fa:	e7fb      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
   129fc:	2000      	movs	r0, #0
   129fe:	e7f9      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
   12a00:	2000      	movs	r0, #0
   12a02:	e7f7      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
   12a04:	2000      	movs	r0, #0
   12a06:	e7f5      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
   12a08:	2000      	movs	r0, #0
   12a0a:	e7f3      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>
    uint8_t tmp = value;
   12a0c:	54c5      	strb	r5, [r0, r3]
    index++;
   12a0e:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   12a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12a14:	d0d8      	beq.n	129c8 <FatPartition::fatPut(unsigned long, unsigned long)+0xc4>
    tmp = value >> 4;
   12a16:	f3c5 1207 	ubfx	r2, r5, #4, #8
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
   12a1a:	5cc8      	ldrb	r0, [r1, r3]
   12a1c:	f020 000f 	bic.w	r0, r0, #15
   12a20:	ea40 1212 	orr.w	r2, r0, r2, lsr #4
    pc[index] = tmp;
   12a24:	54ca      	strb	r2, [r1, r3]
    return true;
   12a26:	2001      	movs	r0, #1
   12a28:	e7e4      	b.n	129f4 <FatPartition::fatPut(unsigned long, unsigned long)+0xf0>

00012a2a <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   12a2a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12a2e:	b083      	sub	sp, #12
   12a30:	4605      	mov	r5, r0
   12a32:	460e      	mov	r6, r1
   12a34:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   12a36:	68c4      	ldr	r4, [r0, #12]
   12a38:	428c      	cmp	r4, r1
   12a3a:	d30c      	bcc.n	12a56 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
    setStart = true;
   12a3c:	2701      	movs	r7, #1
      setStart = true;
   12a3e:	f04f 0901 	mov.w	r9, #1
    find++;
   12a42:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   12a44:	69eb      	ldr	r3, [r5, #28]
   12a46:	42a3      	cmp	r3, r4
   12a48:	d20b      	bcs.n	12a62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x38>
      if (setStart) {
   12a4a:	b13f      	cbz	r7, 12a5c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x32>
  return false;
   12a4c:	2700      	movs	r7, #0
}
   12a4e:	4638      	mov	r0, r7
   12a50:	b003      	add	sp, #12
   12a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    find = current;
   12a56:	460c      	mov	r4, r1
    setStart = false;
   12a58:	2700      	movs	r7, #0
   12a5a:	e7f0      	b.n	12a3e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
      find = m_allocSearchStart;
   12a5c:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   12a5e:	464f      	mov	r7, r9
   12a60:	e7ef      	b.n	12a42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
    if (find == current) {
   12a62:	42a6      	cmp	r6, r4
   12a64:	d0f2      	beq.n	12a4c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    int8_t fg = fatGet(find, &f);
   12a66:	aa01      	add	r2, sp, #4
   12a68:	4621      	mov	r1, r4
   12a6a:	4628      	mov	r0, r5
   12a6c:	f7ff febb 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
   12a70:	2800      	cmp	r0, #0
   12a72:	dbeb      	blt.n	12a4c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x22>
    if (fg && f == 0) {
   12a74:	2800      	cmp	r0, #0
   12a76:	d0e4      	beq.n	12a42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
   12a78:	9b01      	ldr	r3, [sp, #4]
   12a7a:	2b00      	cmp	r3, #0
   12a7c:	d1e1      	bne.n	12a42 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x18>
  if (setStart) {
   12a7e:	b107      	cbz	r7, 12a82 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x58>
    m_allocSearchStart = find;
   12a80:	60ec      	str	r4, [r5, #12]
    return fatPut(cluster, 0x0FFFFFFF);
   12a82:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   12a86:	4621      	mov	r1, r4
   12a88:	4628      	mov	r0, r5
   12a8a:	f7ff ff3b 	bl	12904 <FatPartition::fatPut(unsigned long, unsigned long)>
  if (!fatPutEOC(find)) {
   12a8e:	4607      	mov	r7, r0
   12a90:	2800      	cmp	r0, #0
   12a92:	d0dc      	beq.n	12a4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
  if (current) {
   12a94:	b93e      	cbnz	r6, 12aa6 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7c>
    if (m_freeClusterCount >= 0) {
   12a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12a98:	2b00      	cmp	r3, #0
   12a9a:	db01      	blt.n	12aa0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
      m_freeClusterCount += change;
   12a9c:	3b01      	subs	r3, #1
   12a9e:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
   12aa0:	f8c8 4000 	str.w	r4, [r8]
  return true;
   12aa4:	e7d3      	b.n	12a4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
    if (!fatPut(current, find)) {
   12aa6:	4622      	mov	r2, r4
   12aa8:	4631      	mov	r1, r6
   12aaa:	4628      	mov	r0, r5
   12aac:	f7ff ff2a 	bl	12904 <FatPartition::fatPut(unsigned long, unsigned long)>
   12ab0:	2800      	cmp	r0, #0
   12ab2:	d1f0      	bne.n	12a96 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
  return false;
   12ab4:	4607      	mov	r7, r0
   12ab6:	e7ca      	b.n	12a4e <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>

00012ab8 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
   12ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12aba:	b083      	sub	sp, #12
   12abc:	4605      	mov	r5, r0
   12abe:	460c      	mov	r4, r1
    if (!fatPut(cluster, 0)) {
   12ac0:	2700      	movs	r7, #0
   12ac2:	e001      	b.n	12ac8 <FatPartition::freeChain(unsigned long)+0x10>
    cluster = next;
   12ac4:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   12ac6:	b1ce      	cbz	r6, 12afc <FatPartition::freeChain(unsigned long)+0x44>
    fg = fatGet(cluster, &next);
   12ac8:	aa01      	add	r2, sp, #4
   12aca:	4621      	mov	r1, r4
   12acc:	4628      	mov	r0, r5
   12ace:	f7ff fe8a 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
   12ad2:	1e06      	subs	r6, r0, #0
   12ad4:	db11      	blt.n	12afa <FatPartition::freeChain(unsigned long)+0x42>
    if (!fatPut(cluster, 0)) {
   12ad6:	463a      	mov	r2, r7
   12ad8:	4621      	mov	r1, r4
   12ada:	4628      	mov	r0, r5
   12adc:	f7ff ff12 	bl	12904 <FatPartition::fatPut(unsigned long, unsigned long)>
   12ae0:	4602      	mov	r2, r0
   12ae2:	b158      	cbz	r0, 12afc <FatPartition::freeChain(unsigned long)+0x44>
    if (m_freeClusterCount >= 0) {
   12ae4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	db01      	blt.n	12aee <FatPartition::freeChain(unsigned long)+0x36>
      m_freeClusterCount += change;
   12aea:	3301      	adds	r3, #1
   12aec:	626b      	str	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
   12aee:	68eb      	ldr	r3, [r5, #12]
   12af0:	42a3      	cmp	r3, r4
   12af2:	d9e7      	bls.n	12ac4 <FatPartition::freeChain(unsigned long)+0xc>
      m_allocSearchStart = cluster - 1;
   12af4:	3c01      	subs	r4, #1
   12af6:	60ec      	str	r4, [r5, #12]
   12af8:	e7e4      	b.n	12ac4 <FatPartition::freeChain(unsigned long)+0xc>
  return false;
   12afa:	2200      	movs	r2, #0
}
   12afc:	4610      	mov	r0, r2
   12afe:	b003      	add	sp, #12
   12b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

00012b04 <FatPartition::freeClusterCount()>:
int32_t FatPartition::freeClusterCount() {
   12b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   12b06:	b087      	sub	sp, #28
   12b08:	4604      	mov	r4, r0
  if (m_freeClusterCount >= 0) {
   12b0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   12b0c:	2800      	cmp	r0, #0
   12b0e:	da45      	bge.n	12b9c <FatPartition::freeClusterCount()+0x98>
 if (FAT12_SUPPORT && fatType() == 12) {
   12b10:	79e3      	ldrb	r3, [r4, #7]
   12b12:	2b0c      	cmp	r3, #12
   12b14:	d11e      	bne.n	12b54 <FatPartition::freeClusterCount()+0x50>
    uint32_t todo = m_lastCluster + 1;
   12b16:	69e7      	ldr	r7, [r4, #28]
   12b18:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
   12b1a:	2b02      	cmp	r3, #2
   12b1c:	d917      	bls.n	12b4e <FatPartition::freeClusterCount()+0x4a>
   12b1e:	2502      	movs	r5, #2
    uint32_t free = 0;
   12b20:	2600      	movs	r6, #0
   12b22:	e006      	b.n	12b32 <FatPartition::freeClusterCount()+0x2e>
        return -1;
   12b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12b28:	e038      	b.n	12b9c <FatPartition::freeClusterCount()+0x98>
    for (unsigned i = 2; i < todo; i++) {
   12b2a:	1c6b      	adds	r3, r5, #1
   12b2c:	42af      	cmp	r7, r5
   12b2e:	d00f      	beq.n	12b50 <FatPartition::freeClusterCount()+0x4c>
   12b30:	461d      	mov	r5, r3
      int8_t fg = fatGet(i, &c);
   12b32:	aa03      	add	r2, sp, #12
   12b34:	4629      	mov	r1, r5
   12b36:	4620      	mov	r0, r4
   12b38:	f7ff fe55 	bl	127e6 <FatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
   12b3c:	2800      	cmp	r0, #0
   12b3e:	dbf1      	blt.n	12b24 <FatPartition::freeClusterCount()+0x20>
      if (fg && c == 0) {
   12b40:	2800      	cmp	r0, #0
   12b42:	d0f2      	beq.n	12b2a <FatPartition::freeClusterCount()+0x26>
   12b44:	9b03      	ldr	r3, [sp, #12]
   12b46:	2b00      	cmp	r3, #0
   12b48:	d1ef      	bne.n	12b2a <FatPartition::freeClusterCount()+0x26>
        free++;
   12b4a:	3601      	adds	r6, #1
   12b4c:	e7ed      	b.n	12b2a <FatPartition::freeClusterCount()+0x26>
    uint32_t free = 0;
   12b4e:	2600      	movs	r6, #0
    return free;
   12b50:	4630      	mov	r0, r6
   12b52:	e023      	b.n	12b9c <FatPartition::freeClusterCount()+0x98>
  state.free_count = 0;
   12b54:	2300      	movs	r3, #0
   12b56:	9305      	str	r3, [sp, #20]
  state.clusters_to_do = m_lastCluster + 1;
   12b58:	69e3      	ldr	r3, [r4, #28]
   12b5a:	3301      	adds	r3, #1
   12b5c:	9304      	str	r3, [sp, #16]
  num_sectors = m_sectorsPerFat;
   12b5e:	6925      	ldr	r5, [r4, #16]
    if (isDirty() && !sync()) {
   12b60:	f894 3238 	ldrb.w	r3, [r4, #568]	; 0x238
   12b64:	f013 0f01 	tst.w	r3, #1
   12b68:	d11a      	bne.n	12ba0 <FatPartition::freeClusterCount()+0x9c>
    m_status = 0;
   12b6a:	2300      	movs	r3, #0
   12b6c:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
   12b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12b74:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
    return m_buffer;
   12b78:	f504 7212 	add.w	r2, r4, #584	; 0x248
  if (fatType() == FAT_TYPE_FAT32) {
   12b7c:	79e3      	ldrb	r3, [r4, #7]
   12b7e:	2b20      	cmp	r3, #32
   12b80:	d017      	beq.n	12bb2 <FatPartition::freeClusterCount()+0xae>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
   12b82:	6820      	ldr	r0, [r4, #0]
   12b84:	6803      	ldr	r3, [r0, #0]
   12b86:	a904      	add	r1, sp, #16
   12b88:	9101      	str	r1, [sp, #4]
   12b8a:	4913      	ldr	r1, [pc, #76]	; (12bd8 <FatPartition::freeClusterCount()+0xd4>)
   12b8c:	9100      	str	r1, [sp, #0]
   12b8e:	699e      	ldr	r6, [r3, #24]
   12b90:	462b      	mov	r3, r5
   12b92:	69a1      	ldr	r1, [r4, #24]
   12b94:	47b0      	blx	r6
   12b96:	b1d8      	cbz	r0, 12bd0 <FatPartition::freeClusterCount()+0xcc>
  setFreeClusterCount(state.free_count);
   12b98:	9805      	ldr	r0, [sp, #20]
    m_freeClusterCount = value;
   12b9a:	6260      	str	r0, [r4, #36]	; 0x24
}
   12b9c:	b007      	add	sp, #28
   12b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (isDirty() && !sync()) {
   12ba0:	f504 700e 	add.w	r0, r4, #568	; 0x238
   12ba4:	f002 f82e 	bl	14c04 <FsCache::sync()>
   12ba8:	2800      	cmp	r0, #0
   12baa:	d1de      	bne.n	12b6a <FatPartition::freeClusterCount()+0x66>
  if (buf == nullptr) return -1;
   12bac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12bb0:	e7f4      	b.n	12b9c <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
   12bb2:	6820      	ldr	r0, [r4, #0]
   12bb4:	6803      	ldr	r3, [r0, #0]
   12bb6:	a904      	add	r1, sp, #16
   12bb8:	9101      	str	r1, [sp, #4]
   12bba:	4908      	ldr	r1, [pc, #32]	; (12bdc <FatPartition::freeClusterCount()+0xd8>)
   12bbc:	9100      	str	r1, [sp, #0]
   12bbe:	699e      	ldr	r6, [r3, #24]
   12bc0:	462b      	mov	r3, r5
   12bc2:	69a1      	ldr	r1, [r4, #24]
   12bc4:	47b0      	blx	r6
   12bc6:	2800      	cmp	r0, #0
   12bc8:	d1e6      	bne.n	12b98 <FatPartition::freeClusterCount()+0x94>
   12bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12bce:	e7e5      	b.n	12b9c <FatPartition::freeClusterCount()+0x98>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
   12bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12bd4:	e7e2      	b.n	12b9c <FatPartition::freeClusterCount()+0x98>
   12bd6:	bf00      	nop
   12bd8:	00012779 	.word	0x00012779
   12bdc:	000127b1 	.word	0x000127b1

00012be0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
   12be0:	b570      	push	{r4, r5, r6, lr}
   12be2:	4604      	mov	r4, r0
  m_blockDev = dev;
   12be4:	6001      	str	r1, [r0, #0]
  m_fatType = 0;
   12be6:	2300      	movs	r3, #0
   12be8:	71c3      	strb	r3, [r0, #7]
  m_allocSearchStart = 1;
   12bea:	2001      	movs	r0, #1
   12bec:	60e0      	str	r0, [r4, #12]
  m_cache.init(dev);
   12bee:	f104 0528 	add.w	r5, r4, #40	; 0x28
    m_blockDev = blockDev;
   12bf2:	62e1      	str	r1, [r4, #44]	; 0x2c
    m_status = 0;
   12bf4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   12bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12bfc:	6360      	str	r0, [r4, #52]	; 0x34
    m_blockDev = blockDev;
   12bfe:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
   12c02:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
   12c06:	f8c4 0244 	str.w	r0, [r4, #580]	; 0x244
  if (part) {
   12c0a:	b1e2      	cbz	r2, 12c46 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x66>
   12c0c:	4616      	mov	r6, r2
    if (part > 4) {
   12c0e:	2a04      	cmp	r2, #4
   12c10:	d901      	bls.n	12c16 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  return false;
   12c12:	2000      	movs	r0, #0
}
   12c14:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
   12c16:	461a      	mov	r2, r3
   12c18:	4619      	mov	r1, r3
   12c1a:	4628      	mov	r0, r5
   12c1c:	f002 f819 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
   12c20:	f500 72df 	add.w	r2, r0, #446	; 0x1be
   12c24:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   12c28:	4433      	add	r3, r6
   12c2a:	011e      	lsls	r6, r3, #4
   12c2c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
   12c30:	2800      	cmp	r0, #0
   12c32:	d06a      	beq.n	12d0a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12a>
   12c34:	7919      	ldrb	r1, [r3, #4]
   12c36:	2900      	cmp	r1, #0
   12c38:	d069      	beq.n	12d0e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x12e>
   12c3a:	5d92      	ldrb	r2, [r2, r6]
   12c3c:	f012 0f7f 	tst.w	r2, #127	; 0x7f
   12c40:	d167      	bne.n	12d12 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x132>
  return *reinterpret_cast<const uint32_t*>(src);
   12c42:	689e      	ldr	r6, [r3, #8]
   12c44:	e000      	b.n	12c48 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x68>
  uint32_t volumeStartSector = 0;
   12c46:	2600      	movs	r6, #0
   12c48:	2200      	movs	r2, #0
   12c4a:	4631      	mov	r1, r6
   12c4c:	4628      	mov	r0, r5
   12c4e:	f002 f800 	bl	14c52 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
   12c52:	4601      	mov	r1, r0
   12c54:	2800      	cmp	r0, #0
   12c56:	d05e      	beq.n	12d16 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x136>
   12c58:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   12c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   12c60:	d15b      	bne.n	12d1a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13a>
  m_fatCount = bpb->fatCount;
   12c62:	7c03      	ldrb	r3, [r0, #16]
   12c64:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
   12c66:	3b01      	subs	r3, #1
   12c68:	b2db      	uxtb	r3, r3
   12c6a:	2b01      	cmp	r3, #1
   12c6c:	d857      	bhi.n	12d1e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x13e>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
   12c6e:	7b40      	ldrb	r0, [r0, #13]
   12c70:	7120      	strb	r0, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
   12c72:	1e43      	subs	r3, r0, #1
   12c74:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
   12c76:	2300      	movs	r3, #0
   12c78:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   12c7a:	2801      	cmp	r0, #1
   12c7c:	d00d      	beq.n	12c9a <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xba>
   12c7e:	2200      	movs	r2, #0
   12c80:	2301      	movs	r3, #1
    m_sectorsPerClusterShift++;
   12c82:	3201      	adds	r2, #1
   12c84:	b2d2      	uxtb	r2, r2
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   12c86:	005b      	lsls	r3, r3, #1
   12c88:	b2db      	uxtb	r3, r3
   12c8a:	4298      	cmp	r0, r3
   12c8c:	d004      	beq.n	12c98 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb8>
    if (tmp == 0) {
   12c8e:	2b00      	cmp	r3, #0
   12c90:	d1f7      	bne.n	12c82 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xa2>
   12c92:	71a2      	strb	r2, [r4, #6]
  return false;
   12c94:	2000      	movs	r0, #0
   12c96:	e7bd      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12c98:	71a2      	strb	r2, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
   12c9a:	8acb      	ldrh	r3, [r1, #22]
   12c9c:	6123      	str	r3, [r4, #16]
  if (m_sectorsPerFat == 0) {
   12c9e:	b90b      	cbnz	r3, 12ca4 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xc4>
   12ca0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
   12ca2:	6123      	str	r3, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
   12ca4:	89cb      	ldrh	r3, [r1, #14]
   12ca6:	4433      	add	r3, r6
   12ca8:	61a3      	str	r3, [r4, #24]
  return *reinterpret_cast<const uint16_t*>(src);
   12caa:	f8b1 2011 	ldrh.w	r2, [r1, #17]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
   12cae:	8162      	strh	r2, [r4, #10]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   12cb0:	6920      	ldr	r0, [r4, #16]
   12cb2:	7c0d      	ldrb	r5, [r1, #16]
   12cb4:	fb00 3305 	mla	r3, r0, r5, r3
   12cb8:	6223      	str	r3, [r4, #32]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
   12cba:	0152      	lsls	r2, r2, #5
   12cbc:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
  m_dataStartSector = m_rootDirStart +
   12cc0:	eb03 2352 	add.w	r3, r3, r2, lsr #9
   12cc4:	6163      	str	r3, [r4, #20]
  totalSectors = getLe16(bpb->totalSectors16);
   12cc6:	f8b1 2013 	ldrh.w	r2, [r1, #19]
  if (totalSectors == 0) {
   12cca:	b902      	cbnz	r2, 12cce <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xee>
  return *reinterpret_cast<const uint32_t*>(src);
   12ccc:	6a0a      	ldr	r2, [r1, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
   12cce:	1af3      	subs	r3, r6, r3
   12cd0:	4413      	add	r3, r2
  clusterCount >>= m_sectorsPerClusterShift;
   12cd2:	79a2      	ldrb	r2, [r4, #6]
   12cd4:	40d3      	lsrs	r3, r2
  m_lastCluster = clusterCount + 1;
   12cd6:	1c5a      	adds	r2, r3, #1
   12cd8:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
   12cda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12cde:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
   12ce0:	f640 72f4 	movw	r2, #4084	; 0xff4
   12ce4:	4293      	cmp	r3, r2
   12ce6:	d907      	bls.n	12cf8 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
   12ce8:	f64f 72f4 	movw	r2, #65524	; 0xfff4
   12cec:	4293      	cmp	r3, r2
   12cee:	d90a      	bls.n	12d06 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x126>
   12cf0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
   12cf2:	6223      	str	r3, [r4, #32]
   12cf4:	2320      	movs	r3, #32
   12cf6:	e000      	b.n	12cfa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
   12cf8:	230c      	movs	r3, #12
    m_fatType = 12;
   12cfa:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
   12cfc:	6320      	str	r0, [r4, #48]	; 0x30
   12cfe:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
  return true;
   12d02:	2001      	movs	r0, #1
   12d04:	e786      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12d06:	2310      	movs	r3, #16
   12d08:	e7f7      	b.n	12cfa <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11a>
  return false;
   12d0a:	2000      	movs	r0, #0
   12d0c:	e782      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12d0e:	2000      	movs	r0, #0
   12d10:	e780      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12d12:	2000      	movs	r0, #0
   12d14:	e77e      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12d16:	2000      	movs	r0, #0
   12d18:	e77c      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12d1a:	2000      	movs	r0, #0
   12d1c:	e77a      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>
   12d1e:	2000      	movs	r0, #0
   12d20:	e778      	b.n	12c14 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x34>

00012d22 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
   12d22:	b538      	push	{r3, r4, r5, lr}
   12d24:	4604      	mov	r4, r0
   12d26:	460d      	mov	r5, r1
   12d28:	2300      	movs	r3, #0
   12d2a:	6383      	str	r3, [r0, #56]	; 0x38
   12d2c:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (from.m_fFile) {
   12d2e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   12d30:	b1ab      	cbz	r3, 12d5e <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x3c>
    m_fFile = new (m_fileMem) FatFile;
   12d32:	4601      	mov	r1, r0
   12d34:	2024      	movs	r0, #36	; 0x24
   12d36:	f000 f8b3 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
   12d3a:	2300      	movs	r3, #0
   12d3c:	7003      	strb	r3, [r0, #0]
   12d3e:	7043      	strb	r3, [r0, #1]
   12d40:	7083      	strb	r3, [r0, #2]
   12d42:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
   12d44:	4684      	mov	ip, r0
   12d46:	6bad      	ldr	r5, [r5, #56]	; 0x38
   12d48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12d4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12d4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   12d50:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12d54:	682b      	ldr	r3, [r5, #0]
   12d56:	f8cc 3000 	str.w	r3, [ip]
}
   12d5a:	4620      	mov	r0, r4
   12d5c:	bd38      	pop	{r3, r4, r5, pc}
  } else if (from.m_xFile) {
   12d5e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   12d60:	2b00      	cmp	r3, #0
   12d62:	d0fa      	beq.n	12d5a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_xFile = new (m_fileMem) ExFatFile;
   12d64:	4601      	mov	r1, r0
   12d66:	2038      	movs	r0, #56	; 0x38
   12d68:	f000 f89a 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
   12d6c:	2300      	movs	r3, #0
   12d6e:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
   12d72:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
   12d76:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
   12d7a:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
   12d7c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   12d7e:	f103 0e30 	add.w	lr, r3, #48	; 0x30
   12d82:	f8d3 c000 	ldr.w	ip, [r3]
   12d86:	685d      	ldr	r5, [r3, #4]
   12d88:	6899      	ldr	r1, [r3, #8]
   12d8a:	68da      	ldr	r2, [r3, #12]
   12d8c:	f8c0 c000 	str.w	ip, [r0]
   12d90:	6045      	str	r5, [r0, #4]
   12d92:	6081      	str	r1, [r0, #8]
   12d94:	60c2      	str	r2, [r0, #12]
   12d96:	3310      	adds	r3, #16
   12d98:	3010      	adds	r0, #16
   12d9a:	4573      	cmp	r3, lr
   12d9c:	d1f1      	bne.n	12d82 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x60>
   12d9e:	681b      	ldr	r3, [r3, #0]
   12da0:	6003      	str	r3, [r0, #0]
   12da2:	e7da      	b.n	12d5a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>

00012da4 <FsBaseFile::close()>:
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
   12da4:	b510      	push	{r4, lr}
   12da6:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   12da8:	6b80      	ldr	r0, [r0, #56]	; 0x38
   12daa:	b110      	cbz	r0, 12db2 <FsBaseFile::close()+0xe>
   12dac:	f7fe f844 	bl	10e38 <FatFile::close()>
   12db0:	b938      	cbnz	r0, 12dc2 <FsBaseFile::close()+0x1e>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
   12db2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   12db4:	b140      	cbz	r0, 12dc8 <FsBaseFile::close()+0x24>
   12db6:	f7fb fcbf 	bl	e738 <ExFatFile::close()>
   12dba:	b130      	cbz	r0, 12dca <FsBaseFile::close()+0x26>
    m_xFile = nullptr;
   12dbc:	2300      	movs	r3, #0
   12dbe:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
   12dc0:	e003      	b.n	12dca <FsBaseFile::close()+0x26>
    m_fFile = nullptr;
   12dc2:	2300      	movs	r3, #0
   12dc4:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
   12dc6:	e000      	b.n	12dca <FsBaseFile::close()+0x26>
  }
  return false;
   12dc8:	2000      	movs	r0, #0
}
   12dca:	bd10      	pop	{r4, pc}

00012dcc <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
   12dcc:	b3a1      	cbz	r1, 12e38 <FsBaseFile::open(FsVolume*, char const*, int)+0x6c>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
   12dce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12dd0:	4604      	mov	r4, r0
   12dd2:	4617      	mov	r7, r2
   12dd4:	461e      	mov	r6, r3
   12dd6:	460d      	mov	r5, r1
    return false;
  }
  close();
   12dd8:	f7ff ffe4 	bl	12da4 <FsBaseFile::close()>
  if (vol->m_fVol) {
   12ddc:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
   12de0:	b18b      	cbz	r3, 12e06 <FsBaseFile::open(FsVolume*, char const*, int)+0x3a>
    m_fFile = new (m_fileMem) FatFile;
   12de2:	4621      	mov	r1, r4
   12de4:	2024      	movs	r0, #36	; 0x24
   12de6:	f000 f85b 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
   12dea:	2300      	movs	r3, #0
   12dec:	7003      	strb	r3, [r0, #0]
   12dee:	7043      	strb	r3, [r0, #1]
   12df0:	7083      	strb	r3, [r0, #2]
   12df2:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
   12df4:	4633      	mov	r3, r6
   12df6:	463a      	mov	r2, r7
   12df8:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
   12dfc:	f7fe f889 	bl	10f12 <FatFile::open(FatVolume*, char const*, int)>
   12e00:	b900      	cbnz	r0, 12e04 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_fFile = nullptr;
   12e02:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
   12e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (vol->m_xVol) {
   12e06:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
   12e0a:	b1bb      	cbz	r3, 12e3c <FsBaseFile::open(FsVolume*, char const*, int)+0x70>
    m_xFile = new (m_fileMem) ExFatFile;
   12e0c:	4621      	mov	r1, r4
   12e0e:	2038      	movs	r0, #56	; 0x38
   12e10:	f000 f846 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
   12e14:	2200      	movs	r2, #0
   12e16:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
   12e1a:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
   12e1e:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
   12e22:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
   12e24:	4633      	mov	r3, r6
   12e26:	463a      	mov	r2, r7
   12e28:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
   12e2c:	f7fc f8cd 	bl	efca <ExFatFile::open(ExFatVolume*, char const*, int)>
   12e30:	2800      	cmp	r0, #0
   12e32:	d1e7      	bne.n	12e04 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    m_xFile = nullptr;
   12e34:	63e0      	str	r0, [r4, #60]	; 0x3c
   12e36:	e7e5      	b.n	12e04 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
    return false;
   12e38:	2000      	movs	r0, #0
}
   12e3a:	4770      	bx	lr
  return false;
   12e3c:	2000      	movs	r0, #0
   12e3e:	e7e1      	b.n	12e04 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>

00012e40 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
   12e40:	b570      	push	{r4, r5, r6, lr}
   12e42:	4605      	mov	r5, r0
   12e44:	460c      	mov	r4, r1
   12e46:	4616      	mov	r6, r2
  close();
   12e48:	f7ff ffac 	bl	12da4 <FsBaseFile::close()>
  if (dir->m_fFile) {
   12e4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   12e4e:	b17b      	cbz	r3, 12e70 <FsBaseFile::openNext(FsBaseFile*, int)+0x30>
    m_fFile = new (m_fileMem) FatFile;
   12e50:	4629      	mov	r1, r5
   12e52:	2024      	movs	r0, #36	; 0x24
   12e54:	f000 f824 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
   12e58:	2100      	movs	r1, #0
   12e5a:	7001      	strb	r1, [r0, #0]
   12e5c:	7041      	strb	r1, [r0, #1]
   12e5e:	7081      	strb	r1, [r0, #2]
   12e60:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
   12e62:	4632      	mov	r2, r6
   12e64:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   12e66:	f7fd ff33 	bl	10cd0 <FatFile::openNext(FatFile*, int)>
   12e6a:	b900      	cbnz	r0, 12e6e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
      return true;
    }
    m_fFile = nullptr;
   12e6c:	63a8      	str	r0, [r5, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
   12e6e:	bd70      	pop	{r4, r5, r6, pc}
  } else if (dir->m_xFile) {
   12e70:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   12e72:	b19b      	cbz	r3, 12e9c <FsBaseFile::openNext(FsBaseFile*, int)+0x5c>
    m_xFile = new (m_fileMem) ExFatFile;
   12e74:	4629      	mov	r1, r5
   12e76:	2038      	movs	r0, #56	; 0x38
   12e78:	f000 f812 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
   12e7c:	2200      	movs	r2, #0
   12e7e:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
   12e82:	f880 2032 	strb.w	r2, [r0, #50]	; 0x32
   12e86:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
   12e8a:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
   12e8c:	4632      	mov	r2, r6
   12e8e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   12e90:	f7fc f8a4 	bl	efdc <ExFatFile::openNext(ExFatFile*, int)>
   12e94:	2800      	cmp	r0, #0
   12e96:	d1ea      	bne.n	12e6e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
    m_xFile = nullptr;
   12e98:	63e8      	str	r0, [r5, #60]	; 0x3c
   12e9a:	e7e8      	b.n	12e6e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>
  return false;
   12e9c:	2000      	movs	r0, #0
   12e9e:	e7e6      	b.n	12e6e <FsBaseFile::openNext(FsBaseFile*, int)+0x2e>

00012ea0 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
   12ea0:	4608      	mov	r0, r1
   12ea2:	4770      	bx	lr

00012ea4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   12ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ea8:	4604      	mov	r4, r0
   12eaa:	4690      	mov	r8, r2
   12eac:	461f      	mov	r7, r3
  m_blockDev = blockDev;
   12eae:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
   12eb2:	2600      	movs	r6, #0
   12eb4:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
   12eb8:	4601      	mov	r1, r0
   12eba:	f44f 6090 	mov.w	r0, #1152	; 0x480
   12ebe:	f7ff ffef 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
   12ec2:	4605      	mov	r5, r0
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
   12ec4:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
   12ec8:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
   12ecc:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
   12ed0:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
   12ed4:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
   12ed8:	463a      	mov	r2, r7
   12eda:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
   12ede:	f7fd fbcd 	bl	1067c <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
   12ee2:	bb00      	cbnz	r0, 12f26 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x82>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
   12ee4:	2500      	movs	r5, #0
   12ee6:	f8c4 5484 	str.w	r5, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
   12eea:	4621      	mov	r1, r4
   12eec:	f240 406c 	movw	r0, #1132	; 0x46c
   12ef0:	f7ff ffd6 	bl	12ea0 <operator new(unsigned int, unsigned long*)>
   12ef4:	4606      	mov	r6, r0
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
   12ef6:	71c5      	strb	r5, [r0, #7]
   12ef8:	2302      	movs	r3, #2
   12efa:	7203      	strb	r3, [r0, #8]
   12efc:	f880 5448 	strb.w	r5, [r0, #1096]	; 0x448
   12f00:	f880 5449 	strb.w	r5, [r0, #1097]	; 0x449
   12f04:	f880 544a 	strb.w	r5, [r0, #1098]	; 0x44a
   12f08:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
   12f0c:	463a      	mov	r2, r7
   12f0e:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
   12f12:	f7ff fe65 	bl	12be0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
   12f16:	b9f8      	cbnz	r0, 12f58 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xb4>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
   12f18:	2000      	movs	r0, #0
   12f1a:	4b1a      	ldr	r3, [pc, #104]	; (12f84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
   12f1c:	6018      	str	r0, [r3, #0]
  m_fVol = nullptr;
   12f1e:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
   12f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
   12f26:	f505 6689 	add.w	r6, r5, #1096	; 0x448
   12f2a:	4630      	mov	r0, r6
   12f2c:	f7fb fc04 	bl	e738 <ExFatFile::close()>
    return m_vwd.openRoot(this);
   12f30:	4629      	mov	r1, r5
   12f32:	4630      	mov	r0, r6
   12f34:	f7fb fc2e 	bl	e794 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
   12f38:	2800      	cmp	r0, #0
   12f3a:	d0d3      	beq.n	12ee4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x40>
    if (setCwv || !m_cwv) {
   12f3c:	4b12      	ldr	r3, [pc, #72]	; (12f88 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
   12f3e:	681b      	ldr	r3, [r3, #0]
   12f40:	b13b      	cbz	r3, 12f52 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xae>
  if (setCwv || !m_cwv) {
   12f42:	f1b8 0f00 	cmp.w	r8, #0
   12f46:	d119      	bne.n	12f7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
   12f48:	4b0e      	ldr	r3, [pc, #56]	; (12f84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
   12f4a:	681b      	ldr	r3, [r3, #0]
   12f4c:	b1b3      	cbz	r3, 12f7c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>
  return true;
   12f4e:	2001      	movs	r0, #1
   12f50:	e7e7      	b.n	12f22 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
      m_cwv = this;
   12f52:	4b0d      	ldr	r3, [pc, #52]	; (12f88 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe4>)
   12f54:	601d      	str	r5, [r3, #0]
   12f56:	e7f4      	b.n	12f42 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
   12f58:	f506 6589 	add.w	r5, r6, #1096	; 0x448
   12f5c:	4628      	mov	r0, r5
   12f5e:	f7fd ff6b 	bl	10e38 <FatFile::close()>
    return m_vwd.openRoot(this);
   12f62:	4631      	mov	r1, r6
   12f64:	4628      	mov	r0, r5
   12f66:	f7fd fc88 	bl	1087a <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
   12f6a:	2800      	cmp	r0, #0
   12f6c:	d0d4      	beq.n	12f18 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x74>
    if (setCwv || !m_cwv) {
   12f6e:	4b07      	ldr	r3, [pc, #28]	; (12f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
   12f70:	681b      	ldr	r3, [r3, #0]
   12f72:	2b00      	cmp	r3, #0
   12f74:	d1e5      	bne.n	12f42 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
      m_cwv = this;
   12f76:	4b05      	ldr	r3, [pc, #20]	; (12f8c <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe8>)
   12f78:	601e      	str	r6, [r3, #0]
   12f7a:	e7e2      	b.n	12f42 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
    m_cwv = this;
   12f7c:	4b01      	ldr	r3, [pc, #4]	; (12f84 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
   12f7e:	601c      	str	r4, [r3, #0]
  return true;
   12f80:	2001      	movs	r0, #1
   12f82:	e7ce      	b.n	12f22 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7e>
   12f84:	20006fc8 	.word	0x20006fc8
   12f88:	20006dd8 	.word	0x20006dd8
   12f8c:	20006fcc 	.word	0x20006fcc

00012f90 <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
   12f90:	b538      	push	{r3, r4, r5, lr}
   12f92:	4604      	mov	r4, r0
	constexpr Print() : write_error(0) {}
   12f94:	2000      	movs	r0, #0
   12f96:	6060      	str	r0, [r4, #4]
   12f98:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   12f9c:	60a5      	str	r5, [r4, #8]
   12f9e:	7320      	strb	r0, [r4, #12]
  FsBaseFile() {}
   12fa0:	64a0      	str	r0, [r4, #72]	; 0x48
   12fa2:	64e0      	str	r0, [r4, #76]	; 0x4c
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
   12fa4:	4620      	mov	r0, r4
   12fa6:	4d03      	ldr	r5, [pc, #12]	; (12fb4 <FsVolume::open(char const*, int)+0x24>)
   12fa8:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
   12fac:	f7ff ff0e 	bl	12dcc <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
   12fb0:	4620      	mov	r0, r4
   12fb2:	bd38      	pop	{r3, r4, r5, pc}
   12fb4:	2000277c 	.word	0x2000277c

00012fb8 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
   12fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   12fbc:	4770      	bx	lr

00012fbe <SharedSpiCard::errorCode() const>:
  }
   12fbe:	7c40      	ldrb	r0, [r0, #17]
   12fc0:	4770      	bx	lr

00012fc2 <SharedSpiCard::errorData() const>:
  }
   12fc2:	7d00      	ldrb	r0, [r0, #20]
   12fc4:	4770      	bx	lr

00012fc6 <SharedSpiCard::type() const>:
  }
   12fc6:	7d40      	ldrb	r0, [r0, #21]
   12fc8:	4770      	bx	lr

00012fca <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
   12fca:	2001      	movs	r0, #1
   12fcc:	4770      	bx	lr

00012fce <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
   12fce:	7f00      	ldrb	r0, [r0, #28]
   12fd0:	4770      	bx	lr

00012fd2 <SharedSpiCard::sectorCount()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SharedSpiCard::sectorCount() {
   12fd2:	b500      	push	{lr}
   12fd4:	b085      	sub	sp, #20
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   12fd6:	6803      	ldr	r3, [r0, #0]
   12fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   12fda:	4669      	mov	r1, sp
   12fdc:	4798      	blx	r3
   12fde:	b3b0      	cbz	r0, 1304e <SharedSpiCard::sectorCount()+0x7c>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
   12fe0:	f89d 3000 	ldrb.w	r3, [sp]
   12fe4:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   12fe8:	d003      	beq.n	12ff2 <SharedSpiCard::sectorCount()+0x20>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
   12fea:	2b40      	cmp	r3, #64	; 0x40
   12fec:	d020      	beq.n	13030 <SharedSpiCard::sectorCount()+0x5e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
   12fee:	2000      	movs	r0, #0
   12ff0:	e02e      	b.n	13050 <SharedSpiCard::sectorCount()+0x7e>
    uint16_t c_size = (csd->v1.c_size_high << 10)
   12ff2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   12ff6:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12ffa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12ffe:	0080      	lsls	r0, r0, #2
   13000:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   13004:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13008:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   1300c:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   1300e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   13012:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
   13016:	f89d 200a 	ldrb.w	r2, [sp, #10]
   1301a:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   1301c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
   13020:	f89d 2005 	ldrb.w	r2, [sp, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   13024:	f002 020f 	and.w	r2, r2, #15
   13028:	4413      	add	r3, r2
   1302a:	3b07      	subs	r3, #7
   1302c:	4098      	lsls	r0, r3
   1302e:	e00f      	b.n	13050 <SharedSpiCard::sectorCount()+0x7e>
    return (((uint32_t)csd->v2.c_size_high << 16) +
   13030:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   13038:	f89d 0009 	ldrb.w	r0, [sp, #9]
   1303c:	3001      	adds	r0, #1
   1303e:	eb00 4003 	add.w	r0, r0, r3, lsl #16
   13042:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13046:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   1304a:	0280      	lsls	r0, r0, #10
   1304c:	e000      	b.n	13050 <SharedSpiCard::sectorCount()+0x7e>
   1304e:	2000      	movs	r0, #0
}
   13050:	b005      	add	sp, #20
   13052:	f85d fb04 	ldr.w	pc, [sp], #4

00013056 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  }
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
  return true;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
   13056:	b510      	push	{r4, lr}
  return readSectors(sector, dst, 1);
   13058:	6803      	ldr	r3, [r0, #0]
   1305a:	695c      	ldr	r4, [r3, #20]
   1305c:	2301      	movs	r3, #1
   1305e:	47a0      	blx	r4
}
   13060:	bd10      	pop	{r4, pc}

00013062 <DedicatedSpiCard::setDedicatedSpi(bool)>:
  return m_dedicatedSpi ? true : readStop();
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
   13062:	b538      	push	{r3, r4, r5, lr}
   13064:	4604      	mov	r4, r0
   13066:	460d      	mov	r5, r1
  if (!syncDevice()) {
   13068:	6803      	ldr	r3, [r0, #0]
   1306a:	6a1b      	ldr	r3, [r3, #32]
   1306c:	4798      	blx	r3
   1306e:	b100      	cbz	r0, 13072 <DedicatedSpiCard::setDedicatedSpi(bool)+0x10>
    return false;
  }
  m_dedicatedSpi = value;
   13070:	7725      	strb	r5, [r4, #28]
  return true;
}
   13072:	bd38      	pop	{r3, r4, r5, pc}

00013074 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
  }
  return SharedSpiCard::writeSector(sector, src);
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectors(
    uint32_t sector, const uint8_t* src, size_t ns) {
   13074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13076:	4605      	mov	r5, r0
   13078:	460e      	mov	r6, r1
   1307a:	4614      	mov	r4, r2
   1307c:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   1307e:	7cc3      	ldrb	r3, [r0, #19]
   13080:	2b02      	cmp	r3, #2
   13082:	d021      	beq.n	130c8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x54>
    if (!writeStart(sector)) {
   13084:	682b      	ldr	r3, [r5, #0]
   13086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13088:	4631      	mov	r1, r6
   1308a:	4628      	mov	r0, r5
   1308c:	4798      	blx	r3
   1308e:	4603      	mov	r3, r0
   13090:	b1c0      	cbz	r0, 130c4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
      goto fail;
    }
    m_curSector = sector;
   13092:	61ae      	str	r6, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
   13094:	b167      	cbz	r7, 130b0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3c>
   13096:	2600      	movs	r6, #0
    if (!writeData(src)) {
   13098:	682a      	ldr	r2, [r5, #0]
   1309a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
   1309c:	4621      	mov	r1, r4
   1309e:	4628      	mov	r0, r5
   130a0:	4790      	blx	r2
   130a2:	4603      	mov	r3, r0
   130a4:	b170      	cbz	r0, 130c4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
  for (size_t i = 0; i < ns; i++, src += 512) {
   130a6:	3601      	adds	r6, #1
   130a8:	f504 7400 	add.w	r4, r4, #512	; 0x200
   130ac:	42b7      	cmp	r7, r6
   130ae:	d1f3      	bne.n	13098 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x24>
      goto fail;
    }
  }
  m_curSector += ns;
   130b0:	69ab      	ldr	r3, [r5, #24]
   130b2:	443b      	add	r3, r7
   130b4:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   130b6:	7f2b      	ldrb	r3, [r5, #28]
   130b8:	b923      	cbnz	r3, 130c4 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x50>
   130ba:	682b      	ldr	r3, [r5, #0]
   130bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   130be:	4628      	mov	r0, r5
   130c0:	4798      	blx	r3
   130c2:	4603      	mov	r3, r0

fail:
  return false;
}
   130c4:	4618      	mov	r0, r3
   130c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   130c8:	6983      	ldr	r3, [r0, #24]
   130ca:	428b      	cmp	r3, r1
   130cc:	d1da      	bne.n	13084 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x10>
   130ce:	e7e1      	b.n	13094 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

000130d0 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   130d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   130d4:	4605      	mov	r5, r0
   130d6:	460c      	mov	r4, r1
   130d8:	4692      	mov	sl, r2
   130da:	461f      	mov	r7, r3
   130dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   130e0:	7cc3      	ldrb	r3, [r0, #19]
   130e2:	2b02      	cmp	r3, #2
   130e4:	d026      	beq.n	13134 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x64>
    if (!writeStart(sector)) {
   130e6:	682b      	ldr	r3, [r5, #0]
   130e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   130ea:	4621      	mov	r1, r4
   130ec:	4628      	mov	r0, r5
   130ee:	4798      	blx	r3
   130f0:	4603      	mov	r3, r0
   130f2:	b1e0      	cbz	r0, 1312e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
      goto fail;
    }
    m_curSector = sector;
   130f4:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
   130f6:	f1ba 0f00 	cmp.w	sl, #0
   130fa:	d00e      	beq.n	1311a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
   130fc:	eb04 090a 	add.w	r9, r4, sl
    const uint8_t *src = callback(sector + i, context);
   13100:	4641      	mov	r1, r8
   13102:	4620      	mov	r0, r4
   13104:	47b8      	blx	r7
   13106:	4601      	mov	r1, r0
    if (!writeData(src)) {
   13108:	682b      	ldr	r3, [r5, #0]
   1310a:	6dde      	ldr	r6, [r3, #92]	; 0x5c
   1310c:	4628      	mov	r0, r5
   1310e:	47b0      	blx	r6
   13110:	4603      	mov	r3, r0
   13112:	b160      	cbz	r0, 1312e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
  for (size_t i = 0; i < ns; i++) {
   13114:	3401      	adds	r4, #1
   13116:	45a1      	cmp	r9, r4
   13118:	d1f2      	bne.n	13100 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
      goto fail;
    }
  }
  m_curSector += ns;
   1311a:	69ab      	ldr	r3, [r5, #24]
   1311c:	4453      	add	r3, sl
   1311e:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   13120:	7f2b      	ldrb	r3, [r5, #28]
   13122:	b923      	cbnz	r3, 1312e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x5e>
   13124:	682b      	ldr	r3, [r5, #0]
   13126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   13128:	4628      	mov	r0, r5
   1312a:	4798      	blx	r3
   1312c:	4603      	mov	r3, r0

 fail:
  return false;
}
   1312e:	4618      	mov	r0, r3
   13130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   13134:	6983      	ldr	r3, [r0, #24]
   13136:	428b      	cmp	r3, r1
   13138:	d1d5      	bne.n	130e6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x16>
   1313a:	e7dc      	b.n	130f6 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x26>

0001313c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
   1313c:	4770      	bx	lr

0001313e <SharedSpiCard::end()>:
  void end() {
   1313e:	b508      	push	{r3, lr}
    m_spiDriver.end();
   13140:	3004      	adds	r0, #4
   13142:	f001 fd0d 	bl	14b60 <SdSpiArduinoDriver::end()>
  }
   13146:	bd08      	pop	{r3, pc}

00013148 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
   13148:	b510      	push	{r4, lr}
   1314a:	4604      	mov	r4, r0
   1314c:	2120      	movs	r1, #32
   1314e:	f004 f979 	bl	17444 <operator delete(void*, unsigned int)>
   13152:	4620      	mov	r0, r4
   13154:	bd10      	pop	{r4, pc}

00013156 <SharedSpiCard::spiStart()>:
void SharedSpiCard::spiStart() {
   13156:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   13158:	7c83      	ldrb	r3, [r0, #18]
   1315a:	b103      	cbz	r3, 1315e <SharedSpiCard::spiStart()+0x8>
}
   1315c:	bd38      	pop	{r3, r4, r5, pc}
   1315e:	4604      	mov	r4, r0
    m_spiDriver.activate();
   13160:	1d05      	adds	r5, r0, #4
   13162:	4628      	mov	r0, r5
   13164:	f001 fc24 	bl	149b0 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   13168:	2100      	movs	r1, #0
   1316a:	7c20      	ldrb	r0, [r4, #16]
   1316c:	f001 fc1c 	bl	149a8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   13170:	21ff      	movs	r1, #255	; 0xff
   13172:	4628      	mov	r0, r5
   13174:	f001 fd15 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
   13178:	2301      	movs	r3, #1
   1317a:	74a3      	strb	r3, [r4, #18]
}
   1317c:	e7ee      	b.n	1315c <SharedSpiCard::spiStart()+0x6>

0001317e <SharedSpiCard::spiStop()>:
void SharedSpiCard::spiStop() {
   1317e:	b538      	push	{r3, r4, r5, lr}
  if (m_spiActive) {
   13180:	7c83      	ldrb	r3, [r0, #18]
   13182:	b903      	cbnz	r3, 13186 <SharedSpiCard::spiStop()+0x8>
}
   13184:	bd38      	pop	{r3, r4, r5, pc}
   13186:	4604      	mov	r4, r0
    sdCsWrite(m_csPin, true);
   13188:	2101      	movs	r1, #1
   1318a:	7c00      	ldrb	r0, [r0, #16]
   1318c:	f001 fc0c 	bl	149a8 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   13190:	1d25      	adds	r5, r4, #4
   13192:	21ff      	movs	r1, #255	; 0xff
   13194:	4628      	mov	r0, r5
   13196:	f001 fd04 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1319a:	4628      	mov	r0, r5
   1319c:	f001 fcb0 	bl	14b00 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   131a0:	2300      	movs	r3, #0
   131a2:	74a3      	strb	r3, [r4, #18]
}
   131a4:	e7ee      	b.n	13184 <SharedSpiCard::spiStop()+0x6>

000131a6 <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
   131a6:	b538      	push	{r3, r4, r5, lr}
  if (m_state == READ_STATE) {
   131a8:	7cc3      	ldrb	r3, [r0, #19]
   131aa:	2b01      	cmp	r3, #1
   131ac:	d018      	beq.n	131e0 <SharedSpiCard::isBusy()+0x3a>
   131ae:	4604      	mov	r4, r0
  if (!spiActive) {
   131b0:	7c83      	ldrb	r3, [r0, #18]
   131b2:	b143      	cbz	r3, 131c6 <SharedSpiCard::isBusy()+0x20>
    return m_spiDriver.receive();
   131b4:	3004      	adds	r0, #4
   131b6:	f001 fcd8 	bl	14b6a <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
   131ba:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
   131be:	bf18      	it	ne
   131c0:	2501      	movne	r5, #1
}
   131c2:	4628      	mov	r0, r5
   131c4:	bd38      	pop	{r3, r4, r5, pc}
    spiStart();
   131c6:	f7ff ffc6 	bl	13156 <SharedSpiCard::spiStart()>
   131ca:	1d20      	adds	r0, r4, #4
   131cc:	f001 fccd 	bl	14b6a <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
   131d0:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
   131d4:	bf18      	it	ne
   131d6:	2501      	movne	r5, #1
    spiStop();
   131d8:	4620      	mov	r0, r4
   131da:	f7ff ffd0 	bl	1317e <SharedSpiCard::spiStop()>
   131de:	e7f0      	b.n	131c2 <SharedSpiCard::isBusy()+0x1c>
    return false;
   131e0:	2500      	movs	r5, #0
   131e2:	e7ee      	b.n	131c2 <SharedSpiCard::isBusy()+0x1c>

000131e4 <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
   131e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   131e8:	4604      	mov	r4, r0
   131ea:	4688      	mov	r8, r1
   131ec:	4691      	mov	r9, r2
   131ee:	4b17      	ldr	r3, [pc, #92]	; (1324c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x68>)
   131f0:	681d      	ldr	r5, [r3, #0]
    m_endTime = ms + millis16();
   131f2:	f505 7596 	add.w	r5, r5, #300	; 0x12c
   131f6:	b2ad      	uxth	r5, r5
   131f8:	1d06      	adds	r6, r0, #4
   131fa:	461f      	mov	r7, r3
   131fc:	4630      	mov	r0, r6
   131fe:	f001 fcb4 	bl	14b6a <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
   13202:	7520      	strb	r0, [r4, #20]
   13204:	28ff      	cmp	r0, #255	; 0xff
   13206:	d10c      	bne.n	13222 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3e>
   13208:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   1320a:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
   1320c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   13210:	d0f4      	beq.n	131fc <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
   13212:	231d      	movs	r3, #29
    m_errorCode = code;
   13214:	7463      	strb	r3, [r4, #17]
  spiStop();
   13216:	4620      	mov	r0, r4
   13218:	f7ff ffb1 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   1321c:	2000      	movs	r0, #0
}
   1321e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (m_status != DATA_START_SECTOR) {
   13222:	28fe      	cmp	r0, #254	; 0xfe
   13224:	d001      	beq.n	1322a <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
   13226:	2318      	movs	r3, #24
   13228:	e7f4      	b.n	13214 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive(buf, n);
   1322a:	464a      	mov	r2, r9
   1322c:	4641      	mov	r1, r8
   1322e:	4630      	mov	r0, r6
   13230:	f001 fca7 	bl	14b82 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
   13234:	7520      	strb	r0, [r4, #20]
   13236:	b108      	cbz	r0, 1323c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x58>
   13238:	2325      	movs	r3, #37	; 0x25
   1323a:	e7eb      	b.n	13214 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x30>
    return m_spiDriver.receive();
   1323c:	4630      	mov	r0, r6
   1323e:	f001 fc94 	bl	14b6a <SdSpiArduinoDriver::receive()>
   13242:	4630      	mov	r0, r6
   13244:	f001 fc91 	bl	14b6a <SdSpiArduinoDriver::receive()>
  return true;
   13248:	2001      	movs	r0, #1
   1324a:	e7e8      	b.n	1321e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3a>
   1324c:	20008a6c 	.word	0x20008a6c

00013250 <SharedSpiCard::readData(unsigned char*)>:
bool SharedSpiCard::readData(uint8_t* dst) {
   13250:	b508      	push	{r3, lr}
  return readData(dst, 512);
   13252:	f44f 7200 	mov.w	r2, #512	; 0x200
   13256:	f7ff ffc5 	bl	131e4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
}
   1325a:	bd08      	pop	{r3, pc}

0001325c <SharedSpiCard::waitReady(unsigned short)>:
bool SharedSpiCard::waitReady(uint16_t ms) {
   1325c:	b570      	push	{r4, r5, r6, lr}
   1325e:	4b0a      	ldr	r3, [pc, #40]	; (13288 <SharedSpiCard::waitReady(unsigned short)+0x2c>)
   13260:	681c      	ldr	r4, [r3, #0]
    m_endTime = ms + millis16();
   13262:	440c      	add	r4, r1
   13264:	b2a4      	uxth	r4, r4
   13266:	1d05      	adds	r5, r0, #4
   13268:	461e      	mov	r6, r3
   1326a:	4628      	mov	r0, r5
   1326c:	f001 fc7d 	bl	14b6a <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   13270:	28ff      	cmp	r0, #255	; 0xff
   13272:	d006      	beq.n	13282 <SharedSpiCard::waitReady(unsigned short)+0x26>
   13274:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   13276:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
   13278:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   1327c:	d0f5      	beq.n	1326a <SharedSpiCard::waitReady(unsigned short)+0xe>
      return false;
   1327e:	2000      	movs	r0, #0
   13280:	e000      	b.n	13284 <SharedSpiCard::waitReady(unsigned short)+0x28>
  return true;
   13282:	2001      	movs	r0, #1
}
   13284:	bd70      	pop	{r4, r5, r6, pc}
   13286:	bf00      	nop
   13288:	20008a6c 	.word	0x20008a6c

0001328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   1328c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13290:	b082      	sub	sp, #8
   13292:	4605      	mov	r5, r0
   13294:	460f      	mov	r7, r1
   13296:	9201      	str	r2, [sp, #4]
  if (!syncDevice()) {
   13298:	6803      	ldr	r3, [r0, #0]
   1329a:	6a1b      	ldr	r3, [r3, #32]
   1329c:	4798      	blx	r3
   1329e:	2800      	cmp	r0, #0
   132a0:	d03b      	beq.n	1331a <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x8e>
  if (!m_spiActive) {
   132a2:	7cab      	ldrb	r3, [r5, #18]
   132a4:	b3ab      	cbz	r3, 13312 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
  if (cmd != CMD12) {
   132a6:	2f0c      	cmp	r7, #12
   132a8:	d00a      	beq.n	132c0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
   132aa:	f44f 7196 	mov.w	r1, #300	; 0x12c
   132ae:	4628      	mov	r0, r5
   132b0:	f7ff ffd4 	bl	1325c <SharedSpiCard::waitReady(unsigned short)>
   132b4:	b127      	cbz	r7, 132c0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x34>
   132b6:	f080 0001 	eor.w	r0, r0, #1
   132ba:	f010 0fff 	tst.w	r0, #255	; 0xff
   132be:	d12e      	bne.n	1331e <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x92>
    m_spiDriver.send(data);
   132c0:	1d2e      	adds	r6, r5, #4
   132c2:	f047 0140 	orr.w	r1, r7, #64	; 0x40
   132c6:	4630      	mov	r0, r6
   132c8:	f001 fc6b 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
   132cc:	f10d 0804 	add.w	r8, sp, #4
   132d0:	ac02      	add	r4, sp, #8
   132d2:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   132d6:	4630      	mov	r0, r6
   132d8:	f001 fc63 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
   132dc:	4544      	cmp	r4, r8
   132de:	d1f8      	bne.n	132d2 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   132e0:	2f00      	cmp	r7, #0
   132e2:	bf0c      	ite	eq
   132e4:	2195      	moveq	r1, #149	; 0x95
   132e6:	2187      	movne	r1, #135	; 0x87
   132e8:	4630      	mov	r0, r6
   132ea:	f001 fc5a 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   132ee:	4630      	mov	r0, r6
   132f0:	f001 fc3b 	bl	14b6a <SdSpiArduinoDriver::receive()>
   132f4:	240a      	movs	r4, #10
   132f6:	4630      	mov	r0, r6
   132f8:	f001 fc37 	bl	14b6a <SdSpiArduinoDriver::receive()>
    m_status = spiReceive();
   132fc:	7528      	strb	r0, [r5, #20]
  } while (m_status & 0X80 && ++n < 10);
   132fe:	f010 0f80 	tst.w	r0, #128	; 0x80
   13302:	d003      	beq.n	1330c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
   13304:	3c01      	subs	r4, #1
   13306:	b2a4      	uxth	r4, r4
   13308:	2c00      	cmp	r4, #0
   1330a:	d1f4      	bne.n	132f6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x6a>
}
   1330c:	b002      	add	sp, #8
   1330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
   13312:	4628      	mov	r0, r5
   13314:	f7ff ff1f 	bl	13156 <SharedSpiCard::spiStart()>
   13318:	e7c5      	b.n	132a6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x1a>
    return 0XFF;
   1331a:	20ff      	movs	r0, #255	; 0xff
   1331c:	e7f6      	b.n	1330c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
      return 0XFF;
   1331e:	20ff      	movs	r0, #255	; 0xff
   13320:	e7f4      	b.n	1330c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x80>
	...

00013324 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   13324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13328:	b089      	sub	sp, #36	; 0x24
   1332a:	4605      	mov	r5, r0
   1332c:	ac01      	add	r4, sp, #4
   1332e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
   13332:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13336:	4617      	mov	r7, r2
  m_spiActive = false;
   13338:	f04f 0800 	mov.w	r8, #0
   1333c:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
   13340:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
   13344:	f885 8015 	strb.w	r8, [r5, #21]
  m_csPin = spiConfig.csPin;
   13348:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
   1334a:	f001 fb28 	bl	1499e <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
   1334e:	2101      	movs	r1, #1
   13350:	7c28      	ldrb	r0, [r5, #16]
   13352:	f001 fb29 	bl	149a8 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
   13356:	4b55      	ldr	r3, [pc, #340]	; (134ac <SharedSpiCard::begin(SdSpiConfig)+0x188>)
   13358:	60ab      	str	r3, [r5, #8]
   1335a:	2307      	movs	r3, #7
   1335c:	60eb      	str	r3, [r5, #12]
  spiBegin(spiConfig);
   1335e:	ab05      	add	r3, sp, #20
   13360:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   13364:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
   13368:	1d2e      	adds	r6, r5, #4
   1336a:	cb0e      	ldmia	r3, {r1, r2, r3}
   1336c:	4630      	mov	r0, r6
   1336e:	f001 fbb3 	bl	14ad8 <SdSpiArduinoDriver::begin(SdSpiConfig)>
  m_state = IDLE_STATE;
   13372:	f885 8013 	strb.w	r8, [r5, #19]
  spiStart();
   13376:	4628      	mov	r0, r5
   13378:	f7ff feed 	bl	13156 <SharedSpiCard::spiStart()>
    sdCsWrite(m_csPin, true);
   1337c:	2101      	movs	r1, #1
   1337e:	7c28      	ldrb	r0, [r5, #16]
   13380:	f001 fb12 	bl	149a8 <sdCsWrite(unsigned char, bool)>
   13384:	240a      	movs	r4, #10
    m_spiDriver.send(data);
   13386:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1338a:	4641      	mov	r1, r8
   1338c:	4630      	mov	r0, r6
   1338e:	f001 fc08 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
   13392:	1e63      	subs	r3, r4, #1
   13394:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   13398:	d1f7      	bne.n	1338a <SharedSpiCard::begin(SdSpiConfig)+0x66>
    sdCsWrite(m_csPin, false);
   1339a:	2100      	movs	r1, #0
   1339c:	7c28      	ldrb	r0, [r5, #16]
   1339e:	f001 fb03 	bl	149a8 <sdCsWrite(unsigned char, bool)>
   133a2:	240a      	movs	r4, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   133a4:	f04f 0800 	mov.w	r8, #0
   133a8:	4642      	mov	r2, r8
   133aa:	4641      	mov	r1, r8
   133ac:	4628      	mov	r0, r5
   133ae:	f7ff ff6d 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   133b2:	2801      	cmp	r0, #1
   133b4:	d00c      	beq.n	133d0 <SharedSpiCard::begin(SdSpiConfig)+0xac>
    if (i == SD_CMD0_RETRY) {
   133b6:	1e63      	subs	r3, r4, #1
   133b8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   133bc:	d1f4      	bne.n	133a8 <SharedSpiCard::begin(SdSpiConfig)+0x84>
   133be:	2301      	movs	r3, #1
    m_errorCode = code;
   133c0:	746b      	strb	r3, [r5, #17]
  spiStop();
   133c2:	4628      	mov	r0, r5
   133c4:	f7ff fedb 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   133c8:	2000      	movs	r0, #0
}
   133ca:	b009      	add	sp, #36	; 0x24
   133cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
   133d0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   133d4:	2108      	movs	r1, #8
   133d6:	4628      	mov	r0, r5
   133d8:	f7ff ff58 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   133dc:	f010 0f04 	tst.w	r0, #4
   133e0:	d10e      	bne.n	13400 <SharedSpiCard::begin(SdSpiConfig)+0xdc>
    m_type = value;
   133e2:	2302      	movs	r3, #2
   133e4:	756b      	strb	r3, [r5, #21]
   133e6:	2404      	movs	r4, #4
    return m_spiDriver.receive();
   133e8:	4630      	mov	r0, r6
   133ea:	f001 fbbe 	bl	14b6a <SdSpiArduinoDriver::receive()>
      m_status = spiReceive();
   133ee:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
   133f0:	1e63      	subs	r3, r4, #1
   133f2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   133f6:	d1f7      	bne.n	133e8 <SharedSpiCard::begin(SdSpiConfig)+0xc4>
    if (m_status != 0XAA) {
   133f8:	28aa      	cmp	r0, #170	; 0xaa
   133fa:	d003      	beq.n	13404 <SharedSpiCard::begin(SdSpiConfig)+0xe0>
   133fc:	2306      	movs	r3, #6
   133fe:	e7df      	b.n	133c0 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    m_type = value;
   13400:	2301      	movs	r3, #1
   13402:	756b      	strb	r3, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   13404:	682b      	ldr	r3, [r5, #0]
   13406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13408:	4628      	mov	r0, r5
   1340a:	4798      	blx	r3
   1340c:	2802      	cmp	r0, #2
   1340e:	bf14      	ite	ne
   13410:	2400      	movne	r4, #0
   13412:	2401      	moveq	r4, #1
   13414:	07a4      	lsls	r4, r4, #30
   13416:	4b26      	ldr	r3, [pc, #152]	; (134b0 <SharedSpiCard::begin(SdSpiConfig)+0x18c>)
   13418:	681b      	ldr	r3, [r3, #0]
    m_endTime = ms + millis16();
   1341a:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
   1341e:	fa1f f888 	uxth.w	r8, r8
    cardCommand(CMD55, 0);
   13422:	f04f 0a00 	mov.w	sl, #0
   13426:	f04f 0937 	mov.w	r9, #55	; 0x37
   1342a:	f8df b084 	ldr.w	fp, [pc, #132]	; 134b0 <SharedSpiCard::begin(SdSpiConfig)+0x18c>
   1342e:	4652      	mov	r2, sl
   13430:	4649      	mov	r1, r9
   13432:	4628      	mov	r0, r5
   13434:	f7ff ff2a 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
   13438:	4622      	mov	r2, r4
   1343a:	2129      	movs	r1, #41	; 0x29
   1343c:	4628      	mov	r0, r5
   1343e:	f7ff ff25 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   13442:	b140      	cbz	r0, 13456 <SharedSpiCard::begin(SdSpiConfig)+0x132>
   13444:	f8db 3000 	ldr.w	r3, [fp]
    return (int16_t)(m_endTime - millis16()) < 0;
   13448:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
   1344c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   13450:	d0ed      	beq.n	1342e <SharedSpiCard::begin(SdSpiConfig)+0x10a>
   13452:	2317      	movs	r3, #23
   13454:	e7b4      	b.n	133c0 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
  if (type() == SD_CARD_TYPE_SD2) {
   13456:	682b      	ldr	r3, [r5, #0]
   13458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1345a:	4628      	mov	r0, r5
   1345c:	4798      	blx	r3
   1345e:	2802      	cmp	r0, #2
   13460:	d007      	beq.n	13472 <SharedSpiCard::begin(SdSpiConfig)+0x14e>
  spiStop();
   13462:	4628      	mov	r0, r5
   13464:	f7ff fe8b 	bl	1317e <SharedSpiCard::spiStop()>
   13468:	60af      	str	r7, [r5, #8]
   1346a:	2307      	movs	r3, #7
   1346c:	60eb      	str	r3, [r5, #12]
  return true;
   1346e:	2001      	movs	r0, #1
   13470:	e7ab      	b.n	133ca <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (cardCommand(CMD58, 0)) {
   13472:	2200      	movs	r2, #0
   13474:	213a      	movs	r1, #58	; 0x3a
   13476:	4628      	mov	r0, r5
   13478:	f7ff ff08 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   1347c:	b108      	cbz	r0, 13482 <SharedSpiCard::begin(SdSpiConfig)+0x15e>
   1347e:	2312      	movs	r3, #18
   13480:	e79e      	b.n	133c0 <SharedSpiCard::begin(SdSpiConfig)+0x9c>
    return m_spiDriver.receive();
   13482:	4630      	mov	r0, r6
   13484:	f001 fb71 	bl	14b6a <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
   13488:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
   1348c:	2bc0      	cmp	r3, #192	; 0xc0
   1348e:	d009      	beq.n	134a4 <SharedSpiCard::begin(SdSpiConfig)+0x180>
   13490:	4630      	mov	r0, r6
   13492:	f001 fb6a 	bl	14b6a <SdSpiArduinoDriver::receive()>
   13496:	4630      	mov	r0, r6
   13498:	f001 fb67 	bl	14b6a <SdSpiArduinoDriver::receive()>
   1349c:	4630      	mov	r0, r6
   1349e:	f001 fb64 	bl	14b6a <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
   134a2:	e7de      	b.n	13462 <SharedSpiCard::begin(SdSpiConfig)+0x13e>
    m_type = value;
   134a4:	2303      	movs	r3, #3
   134a6:	756b      	strb	r3, [r5, #21]
  }
   134a8:	e7f2      	b.n	13490 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
   134aa:	bf00      	nop
   134ac:	00061a80 	.word	0x00061a80
   134b0:	20008a6c 	.word	0x20008a6c

000134b4 <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   134b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   134b6:	4606      	mov	r6, r0
   134b8:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
   134ba:	2200      	movs	r2, #0
   134bc:	213a      	movs	r1, #58	; 0x3a
   134be:	f7ff fee5 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   134c2:	b968      	cbnz	r0, 134e0 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
   134c4:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
   134c6:	1d37      	adds	r7, r6, #4
   134c8:	4638      	mov	r0, r7
   134ca:	f001 fb4e 	bl	14b6a <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
   134ce:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
   134d2:	42ac      	cmp	r4, r5
   134d4:	d1f8      	bne.n	134c8 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  spiStop();
   134d6:	4630      	mov	r0, r6
   134d8:	f7ff fe51 	bl	1317e <SharedSpiCard::spiStop()>
  return true;
   134dc:	2001      	movs	r0, #1
}
   134de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
   134e0:	2312      	movs	r3, #18
   134e2:	7473      	strb	r3, [r6, #17]
  spiStop();
   134e4:	4630      	mov	r0, r6
   134e6:	f7ff fe4a 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   134ea:	2000      	movs	r0, #0
   134ec:	e7f7      	b.n	134de <SharedSpiCard::readOCR(unsigned long*)+0x2a>

000134ee <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
   134ee:	b538      	push	{r3, r4, r5, lr}
   134f0:	4604      	mov	r4, r0
   134f2:	4615      	mov	r5, r2
  if (cardCommand(cmd, 0)) {
   134f4:	2200      	movs	r2, #0
   134f6:	f7ff fec9 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   134fa:	b138      	cbz	r0, 1350c <SharedSpiCard::readRegister(unsigned char, void*)+0x1e>
   134fc:	231b      	movs	r3, #27
   134fe:	7463      	strb	r3, [r4, #17]
  spiStop();
   13500:	4620      	mov	r0, r4
   13502:	f7ff fe3c 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   13506:	2500      	movs	r5, #0
}
   13508:	4628      	mov	r0, r5
   1350a:	bd38      	pop	{r3, r4, r5, pc}
  if (!readData(dst, 16)) {
   1350c:	2210      	movs	r2, #16
   1350e:	4629      	mov	r1, r5
   13510:	4620      	mov	r0, r4
   13512:	f7ff fe67 	bl	131e4 <SharedSpiCard::readData(unsigned char*, unsigned int)>
   13516:	4605      	mov	r5, r0
   13518:	2800      	cmp	r0, #0
   1351a:	d0f1      	beq.n	13500 <SharedSpiCard::readRegister(unsigned char, void*)+0x12>
  spiStop();
   1351c:	4620      	mov	r0, r4
   1351e:	f7ff fe2e 	bl	1317e <SharedSpiCard::spiStop()>
  return true;
   13522:	e7f1      	b.n	13508 <SharedSpiCard::readRegister(unsigned char, void*)+0x1a>

00013524 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
   13524:	b508      	push	{r3, lr}
   13526:	460a      	mov	r2, r1
    return readRegister(CMD9, csd);
   13528:	2109      	movs	r1, #9
   1352a:	f7ff ffe0 	bl	134ee <SharedSpiCard::readRegister(unsigned char, void*)>
  }
   1352e:	bd08      	pop	{r3, pc}

00013530 <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
   13530:	b508      	push	{r3, lr}
   13532:	460a      	mov	r2, r1
    return readRegister(CMD10, cid);
   13534:	210a      	movs	r1, #10
   13536:	f7ff ffda 	bl	134ee <SharedSpiCard::readRegister(unsigned char, void*)>
  }
   1353a:	bd08      	pop	{r3, pc}

0001353c <SharedSpiCard::readStart(unsigned long)>:
bool SharedSpiCard::readStart(uint32_t sector) {
   1353c:	b538      	push	{r3, r4, r5, lr}
   1353e:	4604      	mov	r4, r0
   13540:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
   13542:	6803      	ldr	r3, [r0, #0]
   13544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   13546:	4798      	blx	r3
   13548:	2803      	cmp	r0, #3
    sector <<= 9;
   1354a:	bf18      	it	ne
   1354c:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD18, sector)) {
   1354e:	462a      	mov	r2, r5
   13550:	2112      	movs	r1, #18
   13552:	4620      	mov	r0, r4
   13554:	f7ff fe9a 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   13558:	b910      	cbnz	r0, 13560 <SharedSpiCard::readStart(unsigned long)+0x24>
  m_state = READ_STATE;
   1355a:	2001      	movs	r0, #1
   1355c:	74e0      	strb	r0, [r4, #19]
}
   1355e:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
   13560:	230c      	movs	r3, #12
   13562:	7463      	strb	r3, [r4, #17]
  spiStop();
   13564:	4620      	mov	r0, r4
   13566:	f7ff fe0a 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   1356a:	2000      	movs	r0, #0
   1356c:	e7f7      	b.n	1355e <SharedSpiCard::readStart(unsigned long)+0x22>

0001356e <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
   1356e:	b510      	push	{r4, lr}
   13570:	4604      	mov	r4, r0
  m_state = IDLE_STATE;
   13572:	2200      	movs	r2, #0
   13574:	74c2      	strb	r2, [r0, #19]
  if (cardCommand(CMD12, 0)) {
   13576:	210c      	movs	r1, #12
   13578:	f7ff fe88 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   1357c:	b920      	cbnz	r0, 13588 <SharedSpiCard::readStop()+0x1a>
  spiStop();
   1357e:	4620      	mov	r0, r4
   13580:	f7ff fdfd 	bl	1317e <SharedSpiCard::spiStop()>
  return true;
   13584:	2001      	movs	r0, #1
}
   13586:	bd10      	pop	{r4, pc}
   13588:	2309      	movs	r3, #9
   1358a:	7463      	strb	r3, [r4, #17]
  spiStop();
   1358c:	4620      	mov	r0, r4
   1358e:	f7ff fdf6 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   13592:	2000      	movs	r0, #0
   13594:	e7f7      	b.n	13586 <SharedSpiCard::readStop()+0x18>

00013596 <SharedSpiCard::syncDevice()>:
bool SharedSpiCard::syncDevice() {
   13596:	b508      	push	{r3, lr}
  if (m_state == WRITE_STATE) {
   13598:	7cc3      	ldrb	r3, [r0, #19]
   1359a:	2b02      	cmp	r3, #2
   1359c:	d003      	beq.n	135a6 <SharedSpiCard::syncDevice()+0x10>
  if (m_state == READ_STATE) {
   1359e:	2b01      	cmp	r3, #1
   135a0:	d005      	beq.n	135ae <SharedSpiCard::syncDevice()+0x18>
  return true;
   135a2:	2001      	movs	r0, #1
}
   135a4:	bd08      	pop	{r3, pc}
    return writeStop();
   135a6:	6803      	ldr	r3, [r0, #0]
   135a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   135aa:	4798      	blx	r3
   135ac:	e7fa      	b.n	135a4 <SharedSpiCard::syncDevice()+0xe>
    return readStop();
   135ae:	f7ff ffde 	bl	1356e <SharedSpiCard::readStop()>
   135b2:	e7f7      	b.n	135a4 <SharedSpiCard::syncDevice()+0xe>

000135b4 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
   135b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135b6:	4606      	mov	r6, r0
   135b8:	460d      	mov	r5, r1
   135ba:	4614      	mov	r4, r2
   135bc:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
   135be:	7cc3      	ldrb	r3, [r0, #19]
   135c0:	2b01      	cmp	r3, #1
   135c2:	d102      	bne.n	135ca <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
   135c4:	6983      	ldr	r3, [r0, #24]
   135c6:	428b      	cmp	r3, r1
   135c8:	d006      	beq.n	135d8 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x24>
    if (!readStart(sector)) {
   135ca:	4629      	mov	r1, r5
   135cc:	4630      	mov	r0, r6
   135ce:	f7ff ffb5 	bl	1353c <SharedSpiCard::readStart(unsigned long)>
   135d2:	4603      	mov	r3, r0
   135d4:	b190      	cbz	r0, 135fc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    m_curSector = sector;
   135d6:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
   135d8:	b15f      	cbz	r7, 135f2 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x3e>
   135da:	2500      	movs	r5, #0
    if (!readData(dst)) {
   135dc:	4621      	mov	r1, r4
   135de:	4630      	mov	r0, r6
   135e0:	f7ff fe36 	bl	13250 <SharedSpiCard::readData(unsigned char*)>
   135e4:	4603      	mov	r3, r0
   135e6:	b148      	cbz	r0, 135fc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
  for (size_t i = 0; i < ns; i++, dst += 512) {
   135e8:	3501      	adds	r5, #1
   135ea:	f504 7400 	add.w	r4, r4, #512	; 0x200
   135ee:	42af      	cmp	r7, r5
   135f0:	d1f4      	bne.n	135dc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  m_curSector += ns;
   135f2:	69b3      	ldr	r3, [r6, #24]
   135f4:	443b      	add	r3, r7
   135f6:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   135f8:	7f33      	ldrb	r3, [r6, #28]
   135fa:	b10b      	cbz	r3, 13600 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4c>
}
   135fc:	4618      	mov	r0, r3
   135fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return m_dedicatedSpi ? true : readStop();
   13600:	4630      	mov	r0, r6
   13602:	f7ff ffb4 	bl	1356e <SharedSpiCard::readStop()>
   13606:	4603      	mov	r3, r0
   13608:	e7f8      	b.n	135fc <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>

0001360a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   1360a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1360e:	4606      	mov	r6, r0
   13610:	460c      	mov	r4, r1
   13612:	4615      	mov	r5, r2
   13614:	469a      	mov	sl, r3
   13616:	9f08      	ldr	r7, [sp, #32]
   13618:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
  if (sdState() != READ_STATE || sector != m_curSector) {
   1361c:	7cc3      	ldrb	r3, [r0, #19]
   1361e:	2b01      	cmp	r3, #1
   13620:	d102      	bne.n	13628 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1e>
   13622:	6983      	ldr	r3, [r0, #24]
   13624:	428b      	cmp	r3, r1
   13626:	d006      	beq.n	13636 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
   13628:	4621      	mov	r1, r4
   1362a:	4630      	mov	r0, r6
   1362c:	f7ff ff86 	bl	1353c <SharedSpiCard::readStart(unsigned long)>
   13630:	4603      	mov	r3, r0
   13632:	b1b8      	cbz	r0, 13664 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
    m_curSector = sector;
   13634:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
   13636:	f1ba 0f00 	cmp.w	sl, #0
   1363a:	d00e      	beq.n	1365a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x50>
   1363c:	eb04 090a 	add.w	r9, r4, sl
    if (readData(dst)) {
   13640:	4629      	mov	r1, r5
   13642:	4630      	mov	r0, r6
   13644:	f7ff fe04 	bl	13250 <SharedSpiCard::readData(unsigned char*)>
   13648:	4603      	mov	r3, r0
   1364a:	b158      	cbz	r0, 13664 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
      callback(sector + i, dst, context);
   1364c:	4642      	mov	r2, r8
   1364e:	4629      	mov	r1, r5
   13650:	4620      	mov	r0, r4
   13652:	47b8      	blx	r7
  for (size_t i = 0; i < ns; i++) {
   13654:	3401      	adds	r4, #1
   13656:	45a1      	cmp	r9, r4
   13658:	d1f2      	bne.n	13640 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
  m_curSector += ns;
   1365a:	69b3      	ldr	r3, [r6, #24]
   1365c:	4453      	add	r3, sl
   1365e:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   13660:	7f33      	ldrb	r3, [r6, #28]
   13662:	b113      	cbz	r3, 1366a <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x60>
}
   13664:	4618      	mov	r0, r3
   13666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  return m_dedicatedSpi ? true : readStop();
   1366a:	4630      	mov	r0, r6
   1366c:	f7ff ff7f 	bl	1356e <SharedSpiCard::readStop()>
   13670:	4603      	mov	r3, r0
   13672:	e7f7      	b.n	13664 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>

00013674 <SharedSpiCard::writeStart(unsigned long)>:
bool SharedSpiCard::writeStart(uint32_t sector) {
   13674:	b538      	push	{r3, r4, r5, lr}
   13676:	4604      	mov	r4, r0
   13678:	460d      	mov	r5, r1
  if (type() != SD_CARD_TYPE_SDHC) {
   1367a:	6803      	ldr	r3, [r0, #0]
   1367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   1367e:	4798      	blx	r3
   13680:	2803      	cmp	r0, #3
    sector <<= 9;
   13682:	bf18      	it	ne
   13684:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD25, sector)) {
   13686:	462a      	mov	r2, r5
   13688:	2119      	movs	r1, #25
   1368a:	4620      	mov	r0, r4
   1368c:	f7ff fdfe 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   13690:	b918      	cbnz	r0, 1369a <SharedSpiCard::writeStart(unsigned long)+0x26>
  m_state = WRITE_STATE;
   13692:	2302      	movs	r3, #2
   13694:	74e3      	strb	r3, [r4, #19]
  return true;
   13696:	2001      	movs	r0, #1
}
   13698:	bd38      	pop	{r3, r4, r5, pc}
   1369a:	230e      	movs	r3, #14
   1369c:	7463      	strb	r3, [r4, #17]
  spiStop();
   1369e:	4620      	mov	r0, r4
   136a0:	f7ff fd6d 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   136a4:	2000      	movs	r0, #0
   136a6:	e7f7      	b.n	13698 <SharedSpiCard::writeStart(unsigned long)+0x24>

000136a8 <SharedSpiCard::erase(unsigned long, unsigned long)>:
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
   136a8:	b570      	push	{r4, r5, r6, lr}
   136aa:	b084      	sub	sp, #16
   136ac:	4604      	mov	r4, r0
   136ae:	460d      	mov	r5, r1
   136b0:	4616      	mov	r6, r2
  if (!readCSD(&csd)) {
   136b2:	6803      	ldr	r3, [r0, #0]
   136b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   136b6:	4669      	mov	r1, sp
   136b8:	4798      	blx	r3
   136ba:	b1f8      	cbz	r0, 136fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (!csd.v1.erase_blk_en) {
   136bc:	f89d 300a 	ldrb.w	r3, [sp, #10]
   136c0:	f013 0f40 	tst.w	r3, #64	; 0x40
   136c4:	d10d      	bne.n	136e2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
   136c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   136ca:	f89d 200b 	ldrb.w	r2, [sp, #11]
   136ce:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
   136d0:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
   136d4:	1c72      	adds	r2, r6, #1
   136d6:	432a      	orrs	r2, r5
   136d8:	4213      	tst	r3, r2
   136da:	d002      	beq.n	136e2 <SharedSpiCard::erase(unsigned long, unsigned long)+0x3a>
   136dc:	2327      	movs	r3, #39	; 0x27
   136de:	7463      	strb	r3, [r4, #17]
      goto fail;
   136e0:	e00c      	b.n	136fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  if (m_type != SD_CARD_TYPE_SDHC) {
   136e2:	7d63      	ldrb	r3, [r4, #21]
   136e4:	2b03      	cmp	r3, #3
   136e6:	d001      	beq.n	136ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x44>
    firstSector <<= 9;
   136e8:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
   136ea:	0276      	lsls	r6, r6, #9
  if (cardCommand(CMD32, firstSector)
   136ec:	462a      	mov	r2, r5
   136ee:	2120      	movs	r1, #32
   136f0:	4620      	mov	r0, r4
   136f2:	f7ff fdcb 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
   136f6:	b140      	cbz	r0, 1370a <SharedSpiCard::erase(unsigned long, unsigned long)+0x62>
   136f8:	2326      	movs	r3, #38	; 0x26
   136fa:	7463      	strb	r3, [r4, #17]
  spiStop();
   136fc:	4620      	mov	r0, r4
   136fe:	f7ff fd3e 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   13702:	2500      	movs	r5, #0
}
   13704:	4628      	mov	r0, r5
   13706:	b004      	add	sp, #16
   13708:	bd70      	pop	{r4, r5, r6, pc}
      || cardCommand(CMD33, lastSector)
   1370a:	4632      	mov	r2, r6
   1370c:	2121      	movs	r1, #33	; 0x21
   1370e:	4620      	mov	r0, r4
   13710:	f7ff fdbc 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   13714:	2800      	cmp	r0, #0
   13716:	d1ef      	bne.n	136f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
      || cardCommand(CMD38, 0)) {
   13718:	2200      	movs	r2, #0
   1371a:	2126      	movs	r1, #38	; 0x26
   1371c:	4620      	mov	r0, r4
   1371e:	f7ff fdb5 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   13722:	2800      	cmp	r0, #0
   13724:	d1e8      	bne.n	136f8 <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!waitReady(SD_ERASE_TIMEOUT)) {
   13726:	f242 7110 	movw	r1, #10000	; 0x2710
   1372a:	4620      	mov	r0, r4
   1372c:	f7ff fd96 	bl	1325c <SharedSpiCard::waitReady(unsigned short)>
   13730:	4605      	mov	r5, r0
   13732:	b910      	cbnz	r0, 1373a <SharedSpiCard::erase(unsigned long, unsigned long)+0x92>
   13734:	2328      	movs	r3, #40	; 0x28
   13736:	7463      	strb	r3, [r4, #17]
    goto fail;
   13738:	e7e0      	b.n	136fc <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
  spiStop();
   1373a:	4620      	mov	r0, r4
   1373c:	f7ff fd1f 	bl	1317e <SharedSpiCard::spiStop()>
  return true;
   13740:	e7e0      	b.n	13704 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>

00013742 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
   13742:	b538      	push	{r3, r4, r5, lr}
   13744:	4604      	mov	r4, r0
  if (!waitReady(SD_WRITE_TIMEOUT)) {
   13746:	f44f 7116 	mov.w	r1, #600	; 0x258
   1374a:	f7ff fd87 	bl	1325c <SharedSpiCard::waitReady(unsigned short)>
   1374e:	4605      	mov	r5, r0
   13750:	b150      	cbz	r0, 13768 <SharedSpiCard::writeStop()+0x26>
    m_spiDriver.send(data);
   13752:	21fd      	movs	r1, #253	; 0xfd
   13754:	1d20      	adds	r0, r4, #4
   13756:	f001 fa24 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
  spiStop();
   1375a:	4620      	mov	r0, r4
   1375c:	f7ff fd0f 	bl	1317e <SharedSpiCard::spiStop()>
  m_state = IDLE_STATE;
   13760:	2300      	movs	r3, #0
   13762:	74e3      	strb	r3, [r4, #19]
}
   13764:	4628      	mov	r0, r5
   13766:	bd38      	pop	{r3, r4, r5, pc}
    m_errorCode = code;
   13768:	231e      	movs	r3, #30
   1376a:	7463      	strb	r3, [r4, #17]
  spiStop();
   1376c:	4620      	mov	r0, r4
   1376e:	f7ff fd06 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   13772:	e7f7      	b.n	13764 <SharedSpiCard::writeStop()+0x22>

00013774 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
   13774:	b570      	push	{r4, r5, r6, lr}
   13776:	4605      	mov	r5, r0
   13778:	4616      	mov	r6, r2
    m_spiDriver.send(data);
   1377a:	1d04      	adds	r4, r0, #4
   1377c:	4620      	mov	r0, r4
   1377e:	f001 fa10 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
   13782:	f44f 7200 	mov.w	r2, #512	; 0x200
   13786:	4631      	mov	r1, r6
   13788:	4620      	mov	r0, r4
   1378a:	f001 fa14 	bl	14bb6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
   1378e:	21ff      	movs	r1, #255	; 0xff
   13790:	4620      	mov	r0, r4
   13792:	f001 fa06 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
   13796:	21ff      	movs	r1, #255	; 0xff
   13798:	4620      	mov	r0, r4
   1379a:	f001 fa02 	bl	14ba2 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   1379e:	4620      	mov	r0, r4
   137a0:	f001 f9e3 	bl	14b6a <SdSpiArduinoDriver::receive()>
  m_status = spiReceive();
   137a4:	7528      	strb	r0, [r5, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   137a6:	f000 031f 	and.w	r3, r0, #31
   137aa:	2b05      	cmp	r3, #5
   137ac:	d101      	bne.n	137b2 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3e>
  return true;
   137ae:	2001      	movs	r0, #1
}
   137b0:	bd70      	pop	{r4, r5, r6, pc}
    m_errorCode = code;
   137b2:	2320      	movs	r3, #32
   137b4:	746b      	strb	r3, [r5, #17]
  spiStop();
   137b6:	4628      	mov	r0, r5
   137b8:	f7ff fce1 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   137bc:	2000      	movs	r0, #0
   137be:	e7f7      	b.n	137b0 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x3c>

000137c0 <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
   137c0:	b538      	push	{r3, r4, r5, lr}
   137c2:	4604      	mov	r4, r0
   137c4:	460d      	mov	r5, r1
  if (!waitReady(SD_WRITE_TIMEOUT)) {
   137c6:	f44f 7116 	mov.w	r1, #600	; 0x258
   137ca:	f7ff fd47 	bl	1325c <SharedSpiCard::waitReady(unsigned short)>
   137ce:	b930      	cbnz	r0, 137de <SharedSpiCard::writeData(unsigned char const*)+0x1e>
   137d0:	2324      	movs	r3, #36	; 0x24
   137d2:	7463      	strb	r3, [r4, #17]
  spiStop();
   137d4:	4620      	mov	r0, r4
   137d6:	f7ff fcd2 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   137da:	2000      	movs	r0, #0
}
   137dc:	bd38      	pop	{r3, r4, r5, pc}
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   137de:	462a      	mov	r2, r5
   137e0:	21fc      	movs	r1, #252	; 0xfc
   137e2:	4620      	mov	r0, r4
   137e4:	f7ff ffc6 	bl	13774 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
   137e8:	2800      	cmp	r0, #0
   137ea:	d1f7      	bne.n	137dc <SharedSpiCard::writeData(unsigned char const*)+0x1c>
   137ec:	e7f2      	b.n	137d4 <SharedSpiCard::writeData(unsigned char const*)+0x14>

000137ee <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   137ee:	b570      	push	{r4, r5, r6, lr}
   137f0:	4604      	mov	r4, r0
   137f2:	460d      	mov	r5, r1
   137f4:	4616      	mov	r6, r2
  if (type() != SD_CARD_TYPE_SDHC) {
   137f6:	6803      	ldr	r3, [r0, #0]
   137f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   137fa:	4798      	blx	r3
   137fc:	2803      	cmp	r0, #3
    sector <<= 9;
   137fe:	bf18      	it	ne
   13800:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
   13802:	462a      	mov	r2, r5
   13804:	2118      	movs	r1, #24
   13806:	4620      	mov	r0, r4
   13808:	f7ff fd40 	bl	1328c <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   1380c:	b138      	cbz	r0, 1381e <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
   1380e:	230d      	movs	r3, #13
   13810:	7463      	strb	r3, [r4, #17]
  spiStop();
   13812:	4620      	mov	r0, r4
   13814:	f7ff fcb3 	bl	1317e <SharedSpiCard::spiStop()>
  return false;
   13818:	2500      	movs	r5, #0
}
   1381a:	4628      	mov	r0, r5
   1381c:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
   1381e:	4632      	mov	r2, r6
   13820:	21fe      	movs	r1, #254	; 0xfe
   13822:	4620      	mov	r0, r4
   13824:	f7ff ffa6 	bl	13774 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
   13828:	4605      	mov	r5, r0
   1382a:	2800      	cmp	r0, #0
   1382c:	d0f1      	beq.n	13812 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x24>
  spiStop();
   1382e:	4620      	mov	r0, r4
   13830:	f7ff fca5 	bl	1317e <SharedSpiCard::spiStop()>
  return true;
   13834:	e7f1      	b.n	1381a <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x2c>

00013836 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   13836:	b510      	push	{r4, lr}
  if (m_dedicatedSpi) {
   13838:	7f03      	ldrb	r3, [r0, #28]
   1383a:	b123      	cbz	r3, 13846 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x10>
    return writeSectors(sector, src, 1);
   1383c:	6803      	ldr	r3, [r0, #0]
   1383e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   13840:	2301      	movs	r3, #1
   13842:	47a0      	blx	r4
}
   13844:	bd10      	pop	{r4, pc}
  return SharedSpiCard::writeSector(sector, src);
   13846:	f7ff ffd2 	bl	137ee <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>
   1384a:	e7fb      	b.n	13844 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0xe>

0001384c <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
   1384c:	b510      	push	{r4, lr}
   1384e:	b084      	sub	sp, #16
   13850:	4604      	mov	r4, r0
   13852:	f10d 0c04 	add.w	ip, sp, #4
   13856:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
   1385a:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
   1385e:	f7ff fd61 	bl	13324 <SharedSpiCard::begin(SdSpiConfig)>
   13862:	b120      	cbz	r0, 1386e <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
   13864:	f89d 3005 	ldrb.w	r3, [sp, #5]
   13868:	f003 0301 	and.w	r3, r3, #1
  m_dedicatedSpi = spiOptionDedicated(spiConfig.options);
   1386c:	7723      	strb	r3, [r4, #28]
}
   1386e:	b004      	add	sp, #16
   13870:	bd10      	pop	{r4, pc}

00013872 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
   * \param[out] dst Pointer to the location that will receive the data.
   * \param[in] callback Function to be called with each sector's data
   * \param[in] context Pointer to be passed to the callback function
   * \return true for success or false for failure.
   */
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   13872:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13876:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1387a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
   1387e:	b1b3      	cbz	r3, 138ae <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
   13880:	4605      	mov	r5, r0
   13882:	460c      	mov	r4, r1
   13884:	4616      	mov	r6, r2
   13886:	461f      	mov	r7, r3
   13888:	440f      	add	r7, r1
       if (!readSector(sector + i, dst)) return false;
   1388a:	682b      	ldr	r3, [r5, #0]
   1388c:	691b      	ldr	r3, [r3, #16]
   1388e:	4632      	mov	r2, r6
   13890:	4621      	mov	r1, r4
   13892:	4628      	mov	r0, r5
   13894:	4798      	blx	r3
   13896:	4682      	mov	sl, r0
   13898:	b130      	cbz	r0, 138a8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>
       callback(sector + i, dst, context);
   1389a:	464a      	mov	r2, r9
   1389c:	4631      	mov	r1, r6
   1389e:	4620      	mov	r0, r4
   138a0:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
   138a2:	3401      	adds	r4, #1
   138a4:	42bc      	cmp	r4, r7
   138a6:	d1f0      	bne.n	1388a <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x18>
     }
     return true;
  }
   138a8:	4650      	mov	r0, sl
   138aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     return true;
   138ae:	f04f 0a01 	mov.w	sl, #1
   138b2:	e7f9      	b.n	138a8 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x36>

000138b4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
   138b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   138b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
   138bc:	b1aa      	cbz	r2, 138ea <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x36>
   138be:	4605      	mov	r5, r0
   138c0:	460c      	mov	r4, r1
   138c2:	461f      	mov	r7, r3
   138c4:	4690      	mov	r8, r2
   138c6:	4488      	add	r8, r1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   138c8:	682b      	ldr	r3, [r5, #0]
   138ca:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   138cc:	4649      	mov	r1, r9
   138ce:	4620      	mov	r0, r4
   138d0:	47b8      	blx	r7
   138d2:	4602      	mov	r2, r0
   138d4:	4621      	mov	r1, r4
   138d6:	4628      	mov	r0, r5
   138d8:	47b0      	blx	r6
   138da:	4603      	mov	r3, r0
   138dc:	b110      	cbz	r0, 138e4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>
     for (size_t i = 0; i < ns; i++) {
   138de:	3401      	adds	r4, #1
   138e0:	4544      	cmp	r4, r8
   138e2:	d1f1      	bne.n	138c8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
   138e4:	4618      	mov	r0, r3
   138e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
   138ea:	2301      	movs	r3, #1
   138ec:	e7fa      	b.n	138e4 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x30>

000138ee <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
   138ee:	2000      	movs	r0, #0
   138f0:	4770      	bx	lr

000138f2 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
   138f2:	2000      	movs	r0, #0
   138f4:	4770      	bx	lr

000138f6 <SdCardInterface::setDedicatedSpi(bool)>:
  }
   138f6:	2000      	movs	r0, #0
   138f8:	4770      	bx	lr

000138fa <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
   138fa:	4770      	bx	lr

000138fc <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
   138fc:	4b07      	ldr	r3, [pc, #28]	; (1391c <sdIrs()+0x20>)
   138fe:	2100      	movs	r1, #0
   13900:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
   13902:	6b18      	ldr	r0, [r3, #48]	; 0x30
   13904:	4a06      	ldr	r2, [pc, #24]	; (13920 <sdIrs()+0x24>)
   13906:	6010      	str	r0, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
   13908:	6812      	ldr	r2, [r2, #0]
   1390a:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
   1390c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1390e:	f022 0281 	bic.w	r2, r2, #129	; 0x81
   13912:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
   13914:	4b03      	ldr	r3, [pc, #12]	; (13924 <sdIrs()+0x28>)
   13916:	7019      	strb	r1, [r3, #0]
}
   13918:	4770      	bx	lr
   1391a:	bf00      	nop
   1391c:	402c0000 	.word	0x402c0000
   13920:	20006c9c 	.word	0x20006c9c
   13924:	20008c22 	.word	0x20008c22

00013928 <gpioMux(unsigned char)>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13928:	4b06      	ldr	r3, [pc, #24]	; (13944 <gpioMux(unsigned char)+0x1c>)
   1392a:	f8c3 01cc 	str.w	r0, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   1392e:	f8c3 01d0 	str.w	r0, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13932:	f8c3 01bc 	str.w	r0, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   13936:	f8c3 01c0 	str.w	r0, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   1393a:	f8c3 01c4 	str.w	r0, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   1393e:	f8c3 01c8 	str.w	r0, [r3, #456]	; 0x1c8
}
   13942:	4770      	bx	lr
   13944:	401f8000 	.word	0x401f8000

00013948 <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
   13948:	4b03      	ldr	r3, [pc, #12]	; (13958 <isBusyCommandComplete()+0x10>)
   1394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1394c:	4803      	ldr	r0, [pc, #12]	; (1395c <isBusyCommandComplete()+0x14>)
   1394e:	4018      	ands	r0, r3
}
   13950:	fab0 f080 	clz	r0, r0
   13954:	0940      	lsrs	r0, r0, #5
   13956:	4770      	bx	lr
   13958:	402c0000 	.word	0x402c0000
   1395c:	000f0001 	.word	0x000f0001

00013960 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
   13960:	4b02      	ldr	r3, [pc, #8]	; (1396c <isBusyCommandInhibit()+0xc>)
   13962:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   13964:	f000 0001 	and.w	r0, r0, #1
   13968:	4770      	bx	lr
   1396a:	bf00      	nop
   1396c:	402c0000 	.word	0x402c0000

00013970 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   13970:	4b03      	ldr	r3, [pc, #12]	; (13980 <isBusyDat()+0x10>)
   13972:	6a58      	ldr	r0, [r3, #36]	; 0x24
   13974:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
   13978:	f3c0 6000 	ubfx	r0, r0, #24, #1
   1397c:	4770      	bx	lr
   1397e:	bf00      	nop
   13980:	402c0000 	.word	0x402c0000

00013984 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
   13984:	4b01      	ldr	r3, [pc, #4]	; (1398c <isBusyDMA()+0x8>)
   13986:	7818      	ldrb	r0, [r3, #0]
}
   13988:	4770      	bx	lr
   1398a:	bf00      	nop
   1398c:	20008c22 	.word	0x20008c22

00013990 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
   13990:	4b03      	ldr	r3, [pc, #12]	; (139a0 <isBusyFifoRead()+0x10>)
   13992:	6a58      	ldr	r0, [r3, #36]	; 0x24
   13994:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
   13998:	f3c0 20c0 	ubfx	r0, r0, #11, #1
   1399c:	4770      	bx	lr
   1399e:	bf00      	nop
   139a0:	402c0000 	.word	0x402c0000

000139a4 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
   139a4:	4b03      	ldr	r3, [pc, #12]	; (139b4 <isBusyFifoWrite()+0x10>)
   139a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   139a8:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
   139ac:	f3c0 2080 	ubfx	r0, r0, #10, #1
   139b0:	4770      	bx	lr
   139b2:	bf00      	nop
   139b4:	402c0000 	.word	0x402c0000

000139b8 <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   139b8:	4b03      	ldr	r3, [pc, #12]	; (139c8 <isBusyTransferComplete()+0x10>)
   139ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   139bc:	4803      	ldr	r0, [pc, #12]	; (139cc <isBusyTransferComplete()+0x14>)
   139be:	4018      	ands	r0, r3
}
   139c0:	fab0 f080 	clz	r0, r0
   139c4:	0940      	lsrs	r0, r0, #5
   139c6:	4770      	bx	lr
   139c8:	402c0000 	.word	0x402c0000
   139cc:	117f0002 	.word	0x117f0002

000139d0 <setSdclk(unsigned long)>:
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
   139d0:	b510      	push	{r4, lr}
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
   139d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   139d6:	fb03 fe00 	mul.w	lr, r3, r0
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   139da:	4b2b      	ldr	r3, [pc, #172]	; (13a88 <setSdclk(unsigned long)+0xb8>)
   139dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   139de:	f5a3 3310 	sub.w	r3, r3, #147456	; 0x24000
   139e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   139e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   139ea:	4b28      	ldr	r3, [pc, #160]	; (13a8c <setSdclk(unsigned long)+0xbc>)
   139ec:	fba3 3202 	umull	r3, r2, r3, r2
   139f0:	0892      	lsrs	r2, r2, #2
   139f2:	4b27      	ldr	r3, [pc, #156]	; (13a90 <setSdclk(unsigned long)+0xc0>)
   139f4:	fbb3 fcf2 	udiv	ip, r3, r2
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   139f8:	f3c1 23c2 	ubfx	r3, r1, #11, #3
   139fc:	3301      	adds	r3, #1
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   139fe:	fbbc fcf3 	udiv	ip, ip, r3
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   13a02:	ebbe 1f1c 	cmp.w	lr, ip, lsr #4
   13a06:	d239      	bcs.n	13a7c <setSdclk(unsigned long)+0xac>
  uint32_t sdclkfs = 1;
   13a08:	2201      	movs	r2, #1
    sdclkfs <<= 1;
   13a0a:	0052      	lsls	r2, r2, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   13a0c:	0113      	lsls	r3, r2, #4
   13a0e:	fbbc f3f3 	udiv	r3, ip, r3
   13a12:	4573      	cmp	r3, lr
   13a14:	d901      	bls.n	13a1a <setSdclk(unsigned long)+0x4a>
   13a16:	2aff      	cmp	r2, #255	; 0xff
   13a18:	d9f7      	bls.n	13a0a <setSdclk(unsigned long)+0x3a>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13a1a:	fbbc f3f2 	udiv	r3, ip, r2
   13a1e:	459e      	cmp	lr, r3
   13a20:	d22e      	bcs.n	13a80 <setSdclk(unsigned long)+0xb0>
   13a22:	0051      	lsls	r1, r2, #1
   13a24:	2301      	movs	r3, #1
    dvs++;
   13a26:	3301      	adds	r3, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13a28:	fbbc f0f1 	udiv	r0, ip, r1
   13a2c:	4570      	cmp	r0, lr
   13a2e:	bf94      	ite	ls
   13a30:	2000      	movls	r0, #0
   13a32:	2001      	movhi	r0, #1
   13a34:	2b0f      	cmp	r3, #15
   13a36:	bf88      	it	hi
   13a38:	2000      	movhi	r0, #0
   13a3a:	460c      	mov	r4, r1
   13a3c:	4411      	add	r1, r2
   13a3e:	2800      	cmp	r0, #0
   13a40:	d1f1      	bne.n	13a26 <setSdclk(unsigned long)+0x56>
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
   13a42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13a46:	fb01 f404 	mul.w	r4, r1, r4
   13a4a:	fbbc f4f4 	udiv	r4, ip, r4
   13a4e:	4811      	ldr	r0, [pc, #68]	; (13a94 <setSdclk(unsigned long)+0xc4>)
   13a50:	6004      	str	r4, [r0, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
   13a52:	4811      	ldr	r0, [pc, #68]	; (13a98 <setSdclk(unsigned long)+0xc8>)
   13a54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  dvs--;
   13a56:	3b01      	subs	r3, #1
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   13a58:	011b      	lsls	r3, r3, #4
   13a5a:	b2db      	uxtb	r3, r3
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
   13a5c:	490f      	ldr	r1, [pc, #60]	; (13a9c <setSdclk(unsigned long)+0xcc>)
   13a5e:	4021      	ands	r1, r4
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   13a60:	430b      	orrs	r3, r1
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
   13a62:	01d2      	lsls	r2, r2, #7
   13a64:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   13a68:	4313      	orrs	r3, r2
   13a6a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   13a6e:	62c3      	str	r3, [r0, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
   13a70:	4602      	mov	r2, r0
   13a72:	6a53      	ldr	r3, [r2, #36]	; 0x24
   13a74:	f013 0f08 	tst.w	r3, #8
   13a78:	d0fb      	beq.n	13a72 <setSdclk(unsigned long)+0xa2>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
   13a7a:	bd10      	pop	{r4, pc}
  uint32_t sdclkfs = 1;
   13a7c:	2201      	movs	r2, #1
   13a7e:	e7cc      	b.n	13a1a <setSdclk(unsigned long)+0x4a>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   13a80:	4614      	mov	r4, r2
   13a82:	2301      	movs	r3, #1
   13a84:	e7dd      	b.n	13a42 <setSdclk(unsigned long)+0x72>
   13a86:	bf00      	nop
   13a88:	400fc000 	.word	0x400fc000
   13a8c:	aaaaaaab 	.word	0xaaaaaaab
   13a90:	5e69ec00 	.word	0x5e69ec00
   13a94:	20006b60 	.word	0x20006b60
   13a98:	402c0000 	.word	0x402c0000
   13a9c:	fff0000f 	.word	0xfff0000f

00013aa0 <SdioCard::errorCode() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
}
   13aa0:	4b01      	ldr	r3, [pc, #4]	; (13aa8 <SdioCard::errorCode() const+0x8>)
   13aa2:	7818      	ldrb	r0, [r3, #0]
   13aa4:	4770      	bx	lr
   13aa6:	bf00      	nop
   13aa8:	20005c88 	.word	0x20005c88

00013aac <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
   13aac:	4b01      	ldr	r3, [pc, #4]	; (13ab4 <SdioCard::errorData() const+0x8>)
   13aae:	6818      	ldr	r0, [r3, #0]
}
   13ab0:	4770      	bx	lr
   13ab2:	bf00      	nop
   13ab4:	20006c9c 	.word	0x20006c9c

00013ab8 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
   13ab8:	b410      	push	{r4}
   13aba:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
   13abc:	4c06      	ldr	r4, [pc, #24]	; (13ad8 <SdioCard::readCID(CID*)+0x20>)
   13abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13ac0:	f8cc 0000 	str.w	r0, [ip]
   13ac4:	f8cc 1004 	str.w	r1, [ip, #4]
   13ac8:	f8cc 2008 	str.w	r2, [ip, #8]
   13acc:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
   13ad0:	2001      	movs	r0, #1
   13ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
   13ad6:	4770      	bx	lr
   13ad8:	20006c6c 	.word	0x20006c6c

00013adc <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
   13adc:	b410      	push	{r4}
   13ade:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
   13ae0:	4c06      	ldr	r4, [pc, #24]	; (13afc <SdioCard::readCSD(csd_t*)+0x20>)
   13ae2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   13ae4:	f8cc 0000 	str.w	r0, [ip]
   13ae8:	f8cc 1004 	str.w	r1, [ip, #4]
   13aec:	f8cc 2008 	str.w	r2, [ip, #8]
   13af0:	f8cc 300c 	str.w	r3, [ip, #12]
  return true;
}
   13af4:	2001      	movs	r0, #1
   13af6:	f85d 4b04 	ldr.w	r4, [sp], #4
   13afa:	4770      	bx	lr
   13afc:	20006c7c 	.word	0x20006c7c

00013b00 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
   13b00:	4b02      	ldr	r3, [pc, #8]	; (13b0c <SdioCard::readOCR(unsigned long*)+0xc>)
   13b02:	681b      	ldr	r3, [r3, #0]
   13b04:	600b      	str	r3, [r1, #0]
  return true;
}
   13b06:	2001      	movs	r0, #1
   13b08:	4770      	bx	lr
   13b0a:	bf00      	nop
   13b0c:	20006c8c 	.word	0x20006c8c

00013b10 <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
   13b10:	4b17      	ldr	r3, [pc, #92]	; (13b70 <SdioCard::sectorCount()+0x60>)
   13b12:	781b      	ldrb	r3, [r3, #0]
   13b14:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   13b18:	d003      	beq.n	13b22 <SdioCard::sectorCount()+0x12>
  } else if (csd->v2.csd_ver == 1) {
   13b1a:	2b40      	cmp	r3, #64	; 0x40
   13b1c:	d01b      	beq.n	13b56 <SdioCard::sectorCount()+0x46>
    return 0;
   13b1e:	2000      	movs	r0, #0
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
   13b20:	4770      	bx	lr
    uint16_t c_size = (csd->v1.c_size_high << 10)
   13b22:	4a13      	ldr	r2, [pc, #76]	; (13b70 <SdioCard::sectorCount()+0x60>)
   13b24:	7993      	ldrb	r3, [r2, #6]
   13b26:	f003 0303 	and.w	r3, r3, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   13b2a:	79d0      	ldrb	r0, [r2, #7]
   13b2c:	0080      	lsls	r0, r0, #2
   13b2e:	ea40 2083 	orr.w	r0, r0, r3, lsl #10
   13b32:	7a13      	ldrb	r3, [r2, #8]
   13b34:	ea40 1093 	orr.w	r0, r0, r3, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   13b38:	3001      	adds	r0, #1
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   13b3a:	7a53      	ldrb	r3, [r2, #9]
   13b3c:	f003 0303 	and.w	r3, r3, #3
                          | csd->v1.c_size_mult_low;
   13b40:	7a91      	ldrb	r1, [r2, #10]
   13b42:	005b      	lsls	r3, r3, #1
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   13b44:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
   13b48:	7952      	ldrb	r2, [r2, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   13b4a:	f002 020f 	and.w	r2, r2, #15
   13b4e:	4413      	add	r3, r2
   13b50:	3b07      	subs	r3, #7
   13b52:	4098      	lsls	r0, r3
   13b54:	4770      	bx	lr
    return (((uint32_t)csd->v2.c_size_high << 16) +
   13b56:	4b06      	ldr	r3, [pc, #24]	; (13b70 <SdioCard::sectorCount()+0x60>)
   13b58:	79da      	ldrb	r2, [r3, #7]
   13b5a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   13b5e:	7a58      	ldrb	r0, [r3, #9]
   13b60:	3001      	adds	r0, #1
   13b62:	eb00 4002 	add.w	r0, r0, r2, lsl #16
   13b66:	7a1b      	ldrb	r3, [r3, #8]
   13b68:	eb00 2003 	add.w	r0, r0, r3, lsl #8
   13b6c:	0280      	lsls	r0, r0, #10
   13b6e:	4770      	bx	lr
   13b70:	20006c7c 	.word	0x20006c7c

00013b74 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
   13b74:	4b04      	ldr	r3, [pc, #16]	; (13b88 <SdioCard::type() const+0x14>)
   13b76:	781b      	ldrb	r3, [r3, #0]
   13b78:	b123      	cbz	r3, 13b84 <SdioCard::type() const+0x10>
   13b7a:	4b04      	ldr	r3, [pc, #16]	; (13b8c <SdioCard::type() const+0x18>)
   13b7c:	7818      	ldrb	r0, [r3, #0]
   13b7e:	3002      	adds	r0, #2
   13b80:	b2c0      	uxtb	r0, r0
   13b82:	4770      	bx	lr
   13b84:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
   13b86:	4770      	bx	lr
   13b88:	20008c1f 	.word	0x20008c1f
   13b8c:	20008c20 	.word	0x20008c20

00013b90 <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
   13b90:	4770      	bx	lr
	...

00013b94 <waitTimeout(bool (*)())>:
static bool waitTimeout(bool (*fcn)()) {
   13b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b96:	4604      	mov	r4, r0
  uint32_t m = micros();
   13b98:	f003 f842 	bl	16c20 <micros>
   13b9c:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13b9e:	4f05      	ldr	r7, [pc, #20]	; (13bb4 <waitTimeout(bool (*)())+0x20>)
  while (fcn()) {
   13ba0:	47a0      	blx	r4
   13ba2:	4606      	mov	r6, r0
   13ba4:	b120      	cbz	r0, 13bb0 <waitTimeout(bool (*)())+0x1c>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13ba6:	f003 f83b 	bl	16c20 <micros>
   13baa:	1b40      	subs	r0, r0, r5
   13bac:	42b8      	cmp	r0, r7
   13bae:	d9f7      	bls.n	13ba0 <waitTimeout(bool (*)())+0xc>
}
   13bb0:	4630      	mov	r0, r6
   13bb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13bb4:	000f4240 	.word	0x000f4240

00013bb8 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
   13bb8:	b570      	push	{r4, r5, r6, lr}
   13bba:	4604      	mov	r4, r0
   13bbc:	460d      	mov	r5, r1
  if (waitTimeout(isBusyCommandInhibit)) {
   13bbe:	4819      	ldr	r0, [pc, #100]	; (13c24 <cardCommand(unsigned long, unsigned long)+0x6c>)
   13bc0:	f7ff ffe8 	bl	13b94 <waitTimeout(bool (*)())>
   13bc4:	bb40      	cbnz	r0, 13c18 <cardCommand(unsigned long, unsigned long)+0x60>
   13bc6:	4606      	mov	r6, r0
  SDHC_CMDARG = arg;
   13bc8:	4b17      	ldr	r3, [pc, #92]	; (13c28 <cardCommand(unsigned long, unsigned long)+0x70>)
   13bca:	609d      	str	r5, [r3, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
   13bcc:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
   13bd0:	d007      	beq.n	13be2 <cardCommand(unsigned long, unsigned long)+0x2a>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
   13bd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   13bd4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   13bd8:	649a      	str	r2, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
   13bda:	6c99      	ldr	r1, [r3, #72]	; 0x48
   13bdc:	b2e2      	uxtb	r2, r4
   13bde:	430a      	orrs	r2, r1
   13be0:	649a      	str	r2, [r3, #72]	; 0x48
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
   13be2:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
   13be6:	4b10      	ldr	r3, [pc, #64]	; (13c28 <cardCommand(unsigned long, unsigned long)+0x70>)
   13be8:	60dc      	str	r4, [r3, #12]
  if (waitTimeout(isBusyCommandComplete)) {
   13bea:	4810      	ldr	r0, [pc, #64]	; (13c2c <cardCommand(unsigned long, unsigned long)+0x74>)
   13bec:	f7ff ffd2 	bl	13b94 <waitTimeout(bool (*)())>
   13bf0:	4601      	mov	r1, r0
   13bf2:	b990      	cbnz	r0, 13c1a <cardCommand(unsigned long, unsigned long)+0x62>
  m_irqstat = SDHC_IRQSTAT;
   13bf4:	4a0c      	ldr	r2, [pc, #48]	; (13c28 <cardCommand(unsigned long, unsigned long)+0x70>)
   13bf6:	6b10      	ldr	r0, [r2, #48]	; 0x30
   13bf8:	4b0d      	ldr	r3, [pc, #52]	; (13c30 <cardCommand(unsigned long, unsigned long)+0x78>)
   13bfa:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   13bfc:	6818      	ldr	r0, [r3, #0]
   13bfe:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   13c00:	681b      	ldr	r3, [r3, #0]
   13c02:	f013 0f01 	tst.w	r3, #1
   13c06:	d00a      	beq.n	13c1e <cardCommand(unsigned long, unsigned long)+0x66>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
   13c08:	4b09      	ldr	r3, [pc, #36]	; (13c30 <cardCommand(unsigned long, unsigned long)+0x78>)
   13c0a:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   13c0c:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
   13c10:	bf0c      	ite	eq
   13c12:	2601      	moveq	r6, #1
   13c14:	2600      	movne	r6, #0
   13c16:	e000      	b.n	13c1a <cardCommand(unsigned long, unsigned long)+0x62>
    return false;  // Caller will set errorCode.
   13c18:	2600      	movs	r6, #0
}
   13c1a:	4630      	mov	r0, r6
   13c1c:	bd70      	pop	{r4, r5, r6, pc}
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   13c1e:	460e      	mov	r6, r1
   13c20:	e7fb      	b.n	13c1a <cardCommand(unsigned long, unsigned long)+0x62>
   13c22:	bf00      	nop
   13c24:	00013961 	.word	0x00013961
   13c28:	402c0000 	.word	0x402c0000
   13c2c:	00013949 	.word	0x00013949
   13c30:	20006c9c 	.word	0x20006c9c

00013c34 <readReg16(unsigned long, void*)>:
static bool readReg16(uint32_t xfertyp, void* data) {
   13c34:	b510      	push	{r4, lr}
   13c36:	b084      	sub	sp, #16
   13c38:	460c      	mov	r4, r1
  if (!cardCommand(xfertyp, m_rca)) {
   13c3a:	4b19      	ldr	r3, [pc, #100]	; (13ca0 <readReg16(unsigned long, void*)+0x6c>)
   13c3c:	6819      	ldr	r1, [r3, #0]
   13c3e:	f7ff ffbb 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   13c42:	b350      	cbz	r0, 13c9a <readReg16(unsigned long, void*)+0x66>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
   13c44:	4b17      	ldr	r3, [pc, #92]	; (13ca4 <readReg16(unsigned long, void*)+0x70>)
   13c46:	691a      	ldr	r2, [r3, #16]
   13c48:	9200      	str	r2, [sp, #0]
   13c4a:	695a      	ldr	r2, [r3, #20]
   13c4c:	9201      	str	r2, [sp, #4]
   13c4e:	699a      	ldr	r2, [r3, #24]
   13c50:	9202      	str	r2, [sp, #8]
   13c52:	69db      	ldr	r3, [r3, #28]
   13c54:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
   13c56:	f104 0e0f 	add.w	lr, r4, #15
   13c5a:	2300      	movs	r3, #0
    d[14 - i] = sr[i/4] >> 8*(i%4);
   13c5c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   13c60:	461a      	mov	r2, r3
   13c62:	2b00      	cmp	r3, #0
   13c64:	bfb8      	it	lt
   13c66:	1cda      	addlt	r2, r3, #3
   13c68:	f022 0203 	bic.w	r2, r2, #3
   13c6c:	3210      	adds	r2, #16
   13c6e:	446a      	add	r2, sp
   13c70:	4259      	negs	r1, r3
   13c72:	f003 0c03 	and.w	ip, r3, #3
   13c76:	f001 0103 	and.w	r1, r1, #3
   13c7a:	bf58      	it	pl
   13c7c:	f1c1 0c00 	rsbpl	ip, r1, #0
   13c80:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   13c84:	f852 2c10 	ldr.w	r2, [r2, #-16]
   13c88:	fa22 f20c 	lsr.w	r2, r2, ip
   13c8c:	f88e 2000 	strb.w	r2, [lr]
  for (int i = 0; i < 15; i++) {
   13c90:	3301      	adds	r3, #1
   13c92:	2b0f      	cmp	r3, #15
   13c94:	d1e2      	bne.n	13c5c <readReg16(unsigned long, void*)+0x28>
  d[15] = 0;
   13c96:	2300      	movs	r3, #0
   13c98:	73e3      	strb	r3, [r4, #15]
}
   13c9a:	b004      	add	sp, #16
   13c9c:	bd10      	pop	{r4, pc}
   13c9e:	bf00      	nop
   13ca0:	20006c90 	.word	0x20006c90
   13ca4:	402c0000 	.word	0x402c0000

00013ca8 <statusCMD13()>:
static uint32_t statusCMD13() {
   13ca8:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13caa:	4b05      	ldr	r3, [pc, #20]	; (13cc0 <statusCMD13()+0x18>)
   13cac:	6819      	ldr	r1, [r3, #0]
   13cae:	4805      	ldr	r0, [pc, #20]	; (13cc4 <statusCMD13()+0x1c>)
   13cb0:	f7ff ff82 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   13cb4:	b110      	cbz	r0, 13cbc <statusCMD13()+0x14>
   13cb6:	4b04      	ldr	r3, [pc, #16]	; (13cc8 <statusCMD13()+0x20>)
   13cb8:	6918      	ldr	r0, [r3, #16]
}
   13cba:	bd08      	pop	{r3, pc}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13cbc:	2000      	movs	r0, #0
   13cbe:	e7fc      	b.n	13cba <statusCMD13()+0x12>
   13cc0:	20006c90 	.word	0x20006c90
   13cc4:	0d1a0000 	.word	0x0d1a0000
   13cc8:	402c0000 	.word	0x402c0000

00013ccc <isBusyCMD13()>:
static bool isBusyCMD13() {
   13ccc:	b508      	push	{r3, lr}
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
   13cce:	f7ff ffeb 	bl	13ca8 <statusCMD13()>
   13cd2:	f480 7080 	eor.w	r0, r0, #256	; 0x100
}
   13cd6:	f3c0 2000 	ubfx	r0, r0, #8, #1
   13cda:	bd08      	pop	{r3, pc}

00013cdc <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
   13cdc:	b508      	push	{r3, lr}
  if (m_sdioConfig.useDma()) {
   13cde:	7a03      	ldrb	r3, [r0, #8]
   13ce0:	f013 0f01 	tst.w	r3, #1
   13ce4:	d00b      	beq.n	13cfe <SdioCard::isBusy()+0x22>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   13ce6:	4b0c      	ldr	r3, [pc, #48]	; (13d18 <SdioCard::isBusy()+0x3c>)
   13ce8:	681b      	ldr	r3, [r3, #0]
   13cea:	b10b      	cbz	r3, 13cf0 <SdioCard::isBusy()+0x14>
   13cec:	4798      	blx	r3
}
   13cee:	bd08      	pop	{r3, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   13cf0:	4b0a      	ldr	r3, [pc, #40]	; (13d1c <SdioCard::isBusy()+0x40>)
   13cf2:	7818      	ldrb	r0, [r3, #0]
   13cf4:	2800      	cmp	r0, #0
   13cf6:	d0fa      	beq.n	13cee <SdioCard::isBusy()+0x12>
   13cf8:	f7ff ffe8 	bl	13ccc <isBusyCMD13()>
   13cfc:	e7f7      	b.n	13cee <SdioCard::isBusy()+0x12>
    if (m_transferActive) {
   13cfe:	4b08      	ldr	r3, [pc, #32]	; (13d20 <SdioCard::isBusy()+0x44>)
   13d00:	781b      	ldrb	r3, [r3, #0]
   13d02:	b933      	cbnz	r3, 13d12 <SdioCard::isBusy()+0x36>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
   13d04:	4b07      	ldr	r3, [pc, #28]	; (13d24 <SdioCard::isBusy()+0x48>)
   13d06:	6a58      	ldr	r0, [r3, #36]	; 0x24
   13d08:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
   13d0c:	f3c0 6000 	ubfx	r0, r0, #24, #1
   13d10:	e7ed      	b.n	13cee <SdioCard::isBusy()+0x12>
      if (isBusyTransferComplete()) {
   13d12:	f7ff fe51 	bl	139b8 <isBusyTransferComplete()>
   13d16:	e7ea      	b.n	13cee <SdioCard::isBusy()+0x12>
   13d18:	20006c98 	.word	0x20006c98
   13d1c:	20008c1e 	.word	0x20008c1e
   13d20:	20008c21 	.word	0x20008c21
   13d24:	402c0000 	.word	0x402c0000

00013d28 <SdioCard::status()>:
uint32_t SdioCard::status() {
   13d28:	b508      	push	{r3, lr}
  return statusCMD13();
   13d2a:	f7ff ffbd 	bl	13ca8 <statusCMD13()>
}
   13d2e:	bd08      	pop	{r3, pc}

00013d30 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
   13d30:	b538      	push	{r3, r4, r5, lr}
   13d32:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
   13d34:	4b2a      	ldr	r3, [pc, #168]	; (13de0 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
   13d36:	7a9b      	ldrb	r3, [r3, #10]
   13d38:	f013 0f40 	tst.w	r3, #64	; 0x40
   13d3c:	d113      	bne.n	13d66 <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
   13d3e:	4a28      	ldr	r2, [pc, #160]	; (13de0 <SdioCard::erase(unsigned long, unsigned long)+0xb0>)
   13d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   13d44:	7ad2      	ldrb	r2, [r2, #11]
   13d46:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
   13d48:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
   13d4c:	1c62      	adds	r2, r4, #1
   13d4e:	430a      	orrs	r2, r1
   13d50:	4213      	tst	r3, r2
   13d52:	d008      	beq.n	13d66 <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
   13d54:	4b23      	ldr	r3, [pc, #140]	; (13de4 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
   13d56:	2227      	movs	r2, #39	; 0x27
   13d58:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13d5a:	4b23      	ldr	r3, [pc, #140]	; (13de8 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
   13d5c:	f240 3202 	movw	r2, #770	; 0x302
   13d60:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
   13d62:	2500      	movs	r5, #0
   13d64:	e010      	b.n	13d88 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!m_highCapacity) {
   13d66:	4b21      	ldr	r3, [pc, #132]	; (13dec <SdioCard::erase(unsigned long, unsigned long)+0xbc>)
   13d68:	781b      	ldrb	r3, [r3, #0]
   13d6a:	b90b      	cbnz	r3, 13d70 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
   13d6c:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
   13d6e:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
   13d70:	481f      	ldr	r0, [pc, #124]	; (13df0 <SdioCard::erase(unsigned long, unsigned long)+0xc0>)
   13d72:	f7ff ff21 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   13d76:	4605      	mov	r5, r0
   13d78:	b940      	cbnz	r0, 13d8c <SdioCard::erase(unsigned long, unsigned long)+0x5c>
  m_errorCode = code;
   13d7a:	4b1a      	ldr	r3, [pc, #104]	; (13de4 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
   13d7c:	220f      	movs	r2, #15
   13d7e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13d80:	4b19      	ldr	r3, [pc, #100]	; (13de8 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
   13d82:	f240 320a 	movw	r2, #778	; 0x30a
   13d86:	601a      	str	r2, [r3, #0]
}
   13d88:	4628      	mov	r0, r5
   13d8a:	bd38      	pop	{r3, r4, r5, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
   13d8c:	4621      	mov	r1, r4
   13d8e:	4819      	ldr	r0, [pc, #100]	; (13df4 <SdioCard::erase(unsigned long, unsigned long)+0xc4>)
   13d90:	f7ff ff12 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   13d94:	4605      	mov	r5, r0
   13d96:	b938      	cbnz	r0, 13da8 <SdioCard::erase(unsigned long, unsigned long)+0x78>
  m_errorCode = code;
   13d98:	4b12      	ldr	r3, [pc, #72]	; (13de4 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
   13d9a:	2210      	movs	r2, #16
   13d9c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13d9e:	4b12      	ldr	r3, [pc, #72]	; (13de8 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
   13da0:	f240 320d 	movw	r2, #781	; 0x30d
   13da4:	601a      	str	r2, [r3, #0]
     return sdError(SD_CARD_ERROR_CMD33);
   13da6:	e7ef      	b.n	13d88 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (!cardCommand(CMD38_XFERTYP, 0)) {
   13da8:	2100      	movs	r1, #0
   13daa:	4813      	ldr	r0, [pc, #76]	; (13df8 <SdioCard::erase(unsigned long, unsigned long)+0xc8>)
   13dac:	f7ff ff04 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   13db0:	4605      	mov	r5, r0
   13db2:	b938      	cbnz	r0, 13dc4 <SdioCard::erase(unsigned long, unsigned long)+0x94>
  m_errorCode = code;
   13db4:	4b0b      	ldr	r3, [pc, #44]	; (13de4 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
   13db6:	2211      	movs	r2, #17
   13db8:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13dba:	4b0b      	ldr	r3, [pc, #44]	; (13de8 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
   13dbc:	f44f 7244 	mov.w	r2, #784	; 0x310
   13dc0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
   13dc2:	e7e1      	b.n	13d88 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  if (waitTimeout(isBusyCMD13)) {
   13dc4:	480d      	ldr	r0, [pc, #52]	; (13dfc <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
   13dc6:	f7ff fee5 	bl	13b94 <waitTimeout(bool (*)())>
   13dca:	2800      	cmp	r0, #0
   13dcc:	d0dc      	beq.n	13d88 <SdioCard::erase(unsigned long, unsigned long)+0x58>
  m_errorCode = code;
   13dce:	4b05      	ldr	r3, [pc, #20]	; (13de4 <SdioCard::erase(unsigned long, unsigned long)+0xb4>)
   13dd0:	2228      	movs	r2, #40	; 0x28
   13dd2:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13dd4:	4b04      	ldr	r3, [pc, #16]	; (13de8 <SdioCard::erase(unsigned long, unsigned long)+0xb8>)
   13dd6:	f240 3213 	movw	r2, #787	; 0x313
   13dda:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
   13ddc:	2500      	movs	r5, #0
   13dde:	e7d3      	b.n	13d88 <SdioCard::erase(unsigned long, unsigned long)+0x58>
   13de0:	20006c7c 	.word	0x20006c7c
   13de4:	20005c88 	.word	0x20005c88
   13de8:	20006b64 	.word	0x20006b64
   13dec:	20008c20 	.word	0x20008c20
   13df0:	201a0000 	.word	0x201a0000
   13df4:	211a0000 	.word	0x211a0000
   13df8:	261b0000 	.word	0x261b0000
   13dfc:	00013ccd 	.word	0x00013ccd

00013e00 <waitTransferComplete()>:
static bool waitTransferComplete() {
   13e00:	b510      	push	{r4, lr}
  if (!m_transferActive) {
   13e02:	4b10      	ldr	r3, [pc, #64]	; (13e44 <waitTransferComplete()+0x44>)
   13e04:	781c      	ldrb	r4, [r3, #0]
   13e06:	b914      	cbnz	r4, 13e0e <waitTransferComplete()+0xe>
    return true;
   13e08:	2401      	movs	r4, #1
}
   13e0a:	4620      	mov	r0, r4
   13e0c:	bd10      	pop	{r4, pc}
  bool timeOut = waitTimeout(isBusyTransferComplete);
   13e0e:	480e      	ldr	r0, [pc, #56]	; (13e48 <waitTransferComplete()+0x48>)
   13e10:	f7ff fec0 	bl	13b94 <waitTimeout(bool (*)())>
  m_transferActive = false;
   13e14:	4b0b      	ldr	r3, [pc, #44]	; (13e44 <waitTransferComplete()+0x44>)
   13e16:	2200      	movs	r2, #0
   13e18:	701a      	strb	r2, [r3, #0]
  m_irqstat = SDHC_IRQSTAT;
   13e1a:	4b0c      	ldr	r3, [pc, #48]	; (13e4c <waitTransferComplete()+0x4c>)
   13e1c:	6b19      	ldr	r1, [r3, #48]	; 0x30
   13e1e:	4a0c      	ldr	r2, [pc, #48]	; (13e50 <waitTransferComplete()+0x50>)
   13e20:	6011      	str	r1, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
   13e22:	6812      	ldr	r2, [r2, #0]
   13e24:	631a      	str	r2, [r3, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   13e26:	b920      	cbnz	r0, 13e32 <waitTransferComplete()+0x32>
   13e28:	4b09      	ldr	r3, [pc, #36]	; (13e50 <waitTransferComplete()+0x50>)
   13e2a:	681a      	ldr	r2, [r3, #0]
   13e2c:	4b09      	ldr	r3, [pc, #36]	; (13e54 <waitTransferComplete()+0x54>)
   13e2e:	421a      	tst	r2, r3
   13e30:	d0eb      	beq.n	13e0a <waitTransferComplete()+0xa>
  m_errorCode = code;
   13e32:	4b09      	ldr	r3, [pc, #36]	; (13e58 <waitTransferComplete()+0x58>)
   13e34:	221f      	movs	r2, #31
   13e36:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13e38:	4b08      	ldr	r3, [pc, #32]	; (13e5c <waitTransferComplete()+0x5c>)
   13e3a:	f240 227a 	movw	r2, #634	; 0x27a
   13e3e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
   13e40:	2400      	movs	r4, #0
   13e42:	e7e2      	b.n	13e0a <waitTransferComplete()+0xa>
   13e44:	20008c21 	.word	0x20008c21
   13e48:	000139b9 	.word	0x000139b9
   13e4c:	402c0000 	.word	0x402c0000
   13e50:	20006c9c 	.word	0x20006c9c
   13e54:	117f0000 	.word	0x117f0000
   13e58:	20005c88 	.word	0x20005c88
   13e5c:	20006b64 	.word	0x20006b64

00013e60 <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
   13e60:	b538      	push	{r3, r4, r5, lr}
   13e62:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
   13e64:	f7ff ffcc 	bl	13e00 <waitTransferComplete()>
   13e68:	4604      	mov	r4, r0
   13e6a:	b1f0      	cbz	r0, 13eaa <SdioCard::writeData(unsigned char const*)+0x4a>
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
   13e6c:	4b1c      	ldr	r3, [pc, #112]	; (13ee0 <SdioCard::writeData(unsigned char const*)+0x80>)
   13e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   13e70:	f413 7f80 	tst.w	r3, #256	; 0x100
   13e74:	d108      	bne.n	13e88 <SdioCard::writeData(unsigned char const*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13e76:	4b1a      	ldr	r3, [pc, #104]	; (13ee0 <SdioCard::writeData(unsigned char const*)+0x80>)
   13e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13e7a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   13e7e:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
   13e80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13e82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   13e86:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   13e88:	4a15      	ldr	r2, [pc, #84]	; (13ee0 <SdioCard::writeData(unsigned char const*)+0x80>)
   13e8a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13e90:	6293      	str	r3, [r2, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
   13e92:	4814      	ldr	r0, [pc, #80]	; (13ee4 <SdioCard::writeData(unsigned char const*)+0x84>)
   13e94:	f7ff fe7e 	bl	13b94 <waitTimeout(bool (*)())>
   13e98:	b148      	cbz	r0, 13eae <SdioCard::writeData(unsigned char const*)+0x4e>
  m_errorCode = code;
   13e9a:	4b13      	ldr	r3, [pc, #76]	; (13ee8 <SdioCard::writeData(unsigned char const*)+0x88>)
   13e9c:	2221      	movs	r2, #33	; 0x21
   13e9e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13ea0:	4b12      	ldr	r3, [pc, #72]	; (13eec <SdioCard::writeData(unsigned char const*)+0x8c>)
   13ea2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
   13ea6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
   13ea8:	2400      	movs	r4, #0
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
  return true;
}
   13eaa:	4620      	mov	r0, r4
   13eac:	bd38      	pop	{r3, r4, r5, pc}
   13eae:	f105 0c3c 	add.w	ip, r5, #60	; 0x3c
   13eb2:	f505 710f 	add.w	r1, r5, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
   13eb6:	480a      	ldr	r0, [pc, #40]	; (13ee0 <SdioCard::writeData(unsigned char const*)+0x80>)
   13eb8:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13eba:	f413 6f80 	tst.w	r3, #1024	; 0x400
   13ebe:	d0fb      	beq.n	13eb8 <SdioCard::writeData(unsigned char const*)+0x58>
   13ec0:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      SDHC_DATPORT = p32[i];
   13ec4:	f853 2f04 	ldr.w	r2, [r3, #4]!
   13ec8:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   13eca:	4563      	cmp	r3, ip
   13ecc:	d1fa      	bne.n	13ec4 <SdioCard::writeData(unsigned char const*)+0x64>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
   13ece:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
   13ed2:	458c      	cmp	ip, r1
   13ed4:	d1f0      	bne.n	13eb8 <SdioCard::writeData(unsigned char const*)+0x58>
  m_transferActive = true;
   13ed6:	4b06      	ldr	r3, [pc, #24]	; (13ef0 <SdioCard::writeData(unsigned char const*)+0x90>)
   13ed8:	2201      	movs	r2, #1
   13eda:	701a      	strb	r2, [r3, #0]
  return true;
   13edc:	e7e5      	b.n	13eaa <SdioCard::writeData(unsigned char const*)+0x4a>
   13ede:	bf00      	nop
   13ee0:	402c0000 	.word	0x402c0000
   13ee4:	000139a5 	.word	0x000139a5
   13ee8:	20005c88 	.word	0x20005c88
   13eec:	20006b64 	.word	0x20006b64
   13ef0:	20008c21 	.word	0x20008c21

00013ef4 <yieldTimeout(bool (*)())>:
static bool yieldTimeout(bool (*fcn)()) {
   13ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ef6:	4604      	mov	r4, r0
  m_busyFcn = fcn;
   13ef8:	4b0a      	ldr	r3, [pc, #40]	; (13f24 <yieldTimeout(bool (*)())+0x30>)
   13efa:	6018      	str	r0, [r3, #0]
  uint32_t m = micros();
   13efc:	f002 fe90 	bl	16c20 <micros>
   13f00:	4605      	mov	r5, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13f02:	4f09      	ldr	r7, [pc, #36]	; (13f28 <yieldTimeout(bool (*)())+0x34>)
  while (fcn()) {
   13f04:	e001      	b.n	13f0a <yieldTimeout(bool (*)())+0x16>
    yield();
   13f06:	f7f7 ff65 	bl	bdd4 <yield>
  while (fcn()) {
   13f0a:	47a0      	blx	r4
   13f0c:	4606      	mov	r6, r0
   13f0e:	b120      	cbz	r0, 13f1a <yieldTimeout(bool (*)())+0x26>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13f10:	f002 fe86 	bl	16c20 <micros>
   13f14:	1b40      	subs	r0, r0, r5
   13f16:	42b8      	cmp	r0, r7
   13f18:	d9f5      	bls.n	13f06 <yieldTimeout(bool (*)())+0x12>
      m_busyFcn = 0;
   13f1a:	4b02      	ldr	r3, [pc, #8]	; (13f24 <yieldTimeout(bool (*)())+0x30>)
   13f1c:	2200      	movs	r2, #0
   13f1e:	601a      	str	r2, [r3, #0]
}
   13f20:	4630      	mov	r0, r6
   13f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13f24:	20006c98 	.word	0x20006c98
   13f28:	000f4240 	.word	0x000f4240

00013f2c <waitDmaStatus()>:
static bool waitDmaStatus() {
   13f2c:	b508      	push	{r3, lr}
  if (yieldTimeout(isBusyDMA)) {
   13f2e:	4809      	ldr	r0, [pc, #36]	; (13f54 <waitDmaStatus()+0x28>)
   13f30:	f7ff ffe0 	bl	13ef4 <yieldTimeout(bool (*)())>
   13f34:	b960      	cbnz	r0, 13f50 <waitDmaStatus()+0x24>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13f36:	4b08      	ldr	r3, [pc, #32]	; (13f58 <waitDmaStatus()+0x2c>)
   13f38:	681b      	ldr	r3, [r3, #0]
   13f3a:	f013 0f02 	tst.w	r3, #2
   13f3e:	d008      	beq.n	13f52 <waitDmaStatus()+0x26>
   13f40:	4b05      	ldr	r3, [pc, #20]	; (13f58 <waitDmaStatus()+0x2c>)
   13f42:	681a      	ldr	r2, [r3, #0]
   13f44:	4b05      	ldr	r3, [pc, #20]	; (13f5c <waitDmaStatus()+0x30>)
   13f46:	421a      	tst	r2, r3
   13f48:	bf0c      	ite	eq
   13f4a:	2001      	moveq	r0, #1
   13f4c:	2000      	movne	r0, #0
   13f4e:	e000      	b.n	13f52 <waitDmaStatus()+0x26>
    return false;  // Caller will set errorCode.
   13f50:	2000      	movs	r0, #0
}
   13f52:	bd08      	pop	{r3, pc}
   13f54:	00013985 	.word	0x00013985
   13f58:	20006c9c 	.word	0x20006c9c
   13f5c:	117f0000 	.word	0x117f0000

00013f60 <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
   13f60:	b538      	push	{r3, r4, r5, lr}
   13f62:	4605      	mov	r5, r0
   13f64:	460c      	mov	r4, r1
  if (waitTimeout(isBusyCMD13)) {
   13f66:	4819      	ldr	r0, [pc, #100]	; (13fcc <cardCMD6(unsigned long, unsigned char*)+0x6c>)
   13f68:	f7ff fe14 	bl	13b94 <waitTimeout(bool (*)())>
   13f6c:	b140      	cbz	r0, 13f80 <cardCMD6(unsigned long, unsigned char*)+0x20>
  m_errorCode = code;
   13f6e:	4b18      	ldr	r3, [pc, #96]	; (13fd0 <cardCMD6(unsigned long, unsigned char*)+0x70>)
   13f70:	220a      	movs	r2, #10
   13f72:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13f74:	4b17      	ldr	r3, [pc, #92]	; (13fd4 <cardCMD6(unsigned long, unsigned char*)+0x74>)
   13f76:	f44f 72cc 	mov.w	r2, #408	; 0x198
   13f7a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   13f7c:	2000      	movs	r0, #0
}
   13f7e:	bd38      	pop	{r3, r4, r5, pc}
  m_dmaBusy = true;
   13f80:	4b15      	ldr	r3, [pc, #84]	; (13fd8 <cardCMD6(unsigned long, unsigned char*)+0x78>)
   13f82:	2201      	movs	r2, #1
   13f84:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
   13f86:	4b15      	ldr	r3, [pc, #84]	; (13fdc <cardCMD6(unsigned long, unsigned char*)+0x7c>)
   13f88:	2200      	movs	r2, #0
   13f8a:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)status;
   13f8c:	4b14      	ldr	r3, [pc, #80]	; (13fe0 <cardCMD6(unsigned long, unsigned char*)+0x80>)
   13f8e:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
   13f90:	4a14      	ldr	r2, [pc, #80]	; (13fe4 <cardCMD6(unsigned long, unsigned char*)+0x84>)
   13f92:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
   13f94:	4a14      	ldr	r2, [pc, #80]	; (13fe8 <cardCMD6(unsigned long, unsigned char*)+0x88>)
   13f96:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   13f98:	4629      	mov	r1, r5
   13f9a:	4814      	ldr	r0, [pc, #80]	; (13fec <cardCMD6(unsigned long, unsigned char*)+0x8c>)
   13f9c:	f7ff fe0c 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   13fa0:	b938      	cbnz	r0, 13fb2 <cardCMD6(unsigned long, unsigned char*)+0x52>
  m_errorCode = code;
   13fa2:	4b0b      	ldr	r3, [pc, #44]	; (13fd0 <cardCMD6(unsigned long, unsigned char*)+0x70>)
   13fa4:	2204      	movs	r2, #4
   13fa6:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13fa8:	4b0a      	ldr	r3, [pc, #40]	; (13fd4 <cardCMD6(unsigned long, unsigned char*)+0x74>)
   13faa:	f240 129f 	movw	r2, #415	; 0x19f
   13fae:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD6);
   13fb0:	e7e5      	b.n	13f7e <cardCMD6(unsigned long, unsigned char*)+0x1e>
  if (!waitDmaStatus()) {
   13fb2:	f7ff ffbb 	bl	13f2c <waitDmaStatus()>
   13fb6:	2800      	cmp	r0, #0
   13fb8:	d1e1      	bne.n	13f7e <cardCMD6(unsigned long, unsigned char*)+0x1e>
  m_errorCode = code;
   13fba:	4b05      	ldr	r3, [pc, #20]	; (13fd0 <cardCMD6(unsigned long, unsigned char*)+0x70>)
   13fbc:	2225      	movs	r2, #37	; 0x25
   13fbe:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13fc0:	4b04      	ldr	r3, [pc, #16]	; (13fd4 <cardCMD6(unsigned long, unsigned char*)+0x74>)
   13fc2:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
   13fc6:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
   13fc8:	e7d9      	b.n	13f7e <cardCMD6(unsigned long, unsigned char*)+0x1e>
   13fca:	bf00      	nop
   13fcc:	00013ccd 	.word	0x00013ccd
   13fd0:	20005c88 	.word	0x20005c88
   13fd4:	20006b64 	.word	0x20006b64
   13fd8:	20008c22 	.word	0x20008c22
   13fdc:	20006c9c 	.word	0x20006c9c
   13fe0:	402c0000 	.word	0x402c0000
   13fe4:	00010040 	.word	0x00010040
   13fe8:	117f0002 	.word	0x117f0002
   13fec:	063a0011 	.word	0x063a0011

00013ff0 <transferStop()>:
static bool transferStop() {
   13ff0:	b510      	push	{r4, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13ff2:	4a19      	ldr	r2, [pc, #100]	; (14058 <transferStop()+0x68>)
   13ff4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13ffa:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   13ffc:	2100      	movs	r1, #0
   13ffe:	4817      	ldr	r0, [pc, #92]	; (1405c <transferStop()+0x6c>)
   14000:	f7ff fdda 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14004:	4604      	mov	r4, r0
   14006:	b940      	cbnz	r0, 1401a <transferStop()+0x2a>
  m_errorCode = code;
   14008:	4b15      	ldr	r3, [pc, #84]	; (14060 <transferStop()+0x70>)
   1400a:	2209      	movs	r2, #9
   1400c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   1400e:	4b15      	ldr	r3, [pc, #84]	; (14064 <transferStop()+0x74>)
   14010:	f240 223d 	movw	r2, #573	; 0x23d
   14014:	601a      	str	r2, [r3, #0]
}
   14016:	4620      	mov	r0, r4
   14018:	bd10      	pop	{r4, pc}
  if (yieldTimeout(isBusyDat)) {
   1401a:	4813      	ldr	r0, [pc, #76]	; (14068 <transferStop()+0x78>)
   1401c:	f7ff ff6a 	bl	13ef4 <yieldTimeout(bool (*)())>
   14020:	b140      	cbz	r0, 14034 <transferStop()+0x44>
  m_errorCode = code;
   14022:	4b0f      	ldr	r3, [pc, #60]	; (14060 <transferStop()+0x70>)
   14024:	220a      	movs	r2, #10
   14026:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14028:	4b0e      	ldr	r3, [pc, #56]	; (14064 <transferStop()+0x74>)
   1402a:	f44f 7210 	mov.w	r2, #576	; 0x240
   1402e:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   14030:	2400      	movs	r4, #0
   14032:	e7f0      	b.n	14016 <transferStop()+0x26>
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
   14034:	4b08      	ldr	r3, [pc, #32]	; (14058 <transferStop()+0x68>)
   14036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14038:	f013 0f02 	tst.w	r3, #2
   1403c:	d0eb      	beq.n	14016 <transferStop()+0x26>
    uint32_t irqsststen = SDHC_IRQSTATEN;
   1403e:	4b06      	ldr	r3, [pc, #24]	; (14058 <transferStop()+0x68>)
   14040:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
   14042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14044:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
   14048:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   1404a:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
   1404e:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
   14050:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
   14052:	629a      	str	r2, [r3, #40]	; 0x28
   14054:	e7df      	b.n	14016 <transferStop()+0x26>
   14056:	bf00      	nop
   14058:	402c0000 	.word	0x402c0000
   1405c:	0cdb0000 	.word	0x0cdb0000
   14060:	20005c88 	.word	0x20005c88
   14064:	20006b64 	.word	0x20006b64
   14068:	00013971 	.word	0x00013971

0001406c <SdioCard::writeStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
   1406c:	b508      	push	{r3, lr}
  return transferStop();
   1406e:	f7ff ffbf 	bl	13ff0 <transferStop()>
}
   14072:	bd08      	pop	{r3, pc}

00014074 <SdioCard::writeStart(unsigned long)>:
bool SdioCard::writeStart(uint32_t sector) {
   14074:	b510      	push	{r4, lr}
   14076:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
   14078:	4813      	ldr	r0, [pc, #76]	; (140c8 <SdioCard::writeStart(unsigned long)+0x54>)
   1407a:	f7ff ff3b 	bl	13ef4 <yieldTimeout(bool (*)())>
   1407e:	b140      	cbz	r0, 14092 <SdioCard::writeStart(unsigned long)+0x1e>
  m_errorCode = code;
   14080:	4b12      	ldr	r3, [pc, #72]	; (140cc <SdioCard::writeStart(unsigned long)+0x58>)
   14082:	220a      	movs	r2, #10
   14084:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14086:	4b12      	ldr	r3, [pc, #72]	; (140d0 <SdioCard::writeStart(unsigned long)+0x5c>)
   14088:	f240 424b 	movw	r2, #1099	; 0x44b
   1408c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   1408e:	2000      	movs	r0, #0
}
   14090:	bd10      	pop	{r4, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   14092:	4b10      	ldr	r3, [pc, #64]	; (140d4 <SdioCard::writeStart(unsigned long)+0x60>)
   14094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14096:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   1409a:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   1409c:	f44f 7200 	mov.w	r2, #512	; 0x200
   140a0:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   140a2:	4b0d      	ldr	r3, [pc, #52]	; (140d8 <SdioCard::writeStart(unsigned long)+0x64>)
   140a4:	781b      	ldrb	r3, [r3, #0]
   140a6:	b903      	cbnz	r3, 140aa <SdioCard::writeStart(unsigned long)+0x36>
   140a8:	0264      	lsls	r4, r4, #9
   140aa:	4621      	mov	r1, r4
   140ac:	480b      	ldr	r0, [pc, #44]	; (140dc <SdioCard::writeStart(unsigned long)+0x68>)
   140ae:	f7ff fd83 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   140b2:	2800      	cmp	r0, #0
   140b4:	d1ec      	bne.n	14090 <SdioCard::writeStart(unsigned long)+0x1c>
  m_errorCode = code;
   140b6:	4b05      	ldr	r3, [pc, #20]	; (140cc <SdioCard::writeStart(unsigned long)+0x58>)
   140b8:	220e      	movs	r2, #14
   140ba:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   140bc:	4b04      	ldr	r3, [pc, #16]	; (140d0 <SdioCard::writeStart(unsigned long)+0x5c>)
   140be:	f240 4257 	movw	r2, #1111	; 0x457
   140c2:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
   140c4:	e7e4      	b.n	14090 <SdioCard::writeStart(unsigned long)+0x1c>
   140c6:	bf00      	nop
   140c8:	00013ccd 	.word	0x00013ccd
   140cc:	20005c88 	.word	0x20005c88
   140d0:	20006b64 	.word	0x20006b64
   140d4:	402c0000 	.word	0x402c0000
   140d8:	20008c20 	.word	0x20008c20
   140dc:	193a0020 	.word	0x193a0020

000140e0 <SdioCard::~SdioCard()>:
   140e0:	b510      	push	{r4, lr}
   140e2:	4604      	mov	r4, r0
   140e4:	210c      	movs	r1, #12
   140e6:	f003 f9ad 	bl	17444 <operator delete(void*, unsigned int)>
   140ea:	4620      	mov	r0, r4
   140ec:	bd10      	pop	{r4, pc}
	...

000140f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
   140f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   140f4:	4614      	mov	r4, r2
  if ((3 & (uint32_t)buf) || n == 0) {
   140f6:	f012 0203 	ands.w	r2, r2, #3
   140fa:	bf18      	it	ne
   140fc:	2201      	movne	r2, #1
   140fe:	2b00      	cmp	r3, #0
   14100:	bf14      	ite	ne
   14102:	4615      	movne	r5, r2
   14104:	f042 0501 	orreq.w	r5, r2, #1
   14108:	b155      	cbz	r5, 14120 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x30>
  m_errorCode = code;
   1410a:	4b1c      	ldr	r3, [pc, #112]	; (1417c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
   1410c:	2225      	movs	r2, #37	; 0x25
   1410e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14110:	4b1b      	ldr	r3, [pc, #108]	; (14180 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
   14112:	f240 12f5 	movw	r2, #501	; 0x1f5
   14116:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
   14118:	2500      	movs	r5, #0
}
   1411a:	4628      	mov	r0, r5
   1411c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14120:	4607      	mov	r7, r0
   14122:	460e      	mov	r6, r1
   14124:	4698      	mov	r8, r3
  if (yieldTimeout(isBusyCMD13)) {
   14126:	4817      	ldr	r0, [pc, #92]	; (14184 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
   14128:	f7ff fee4 	bl	13ef4 <yieldTimeout(bool (*)())>
   1412c:	b138      	cbz	r0, 1413e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x4e>
  m_errorCode = code;
   1412e:	4b13      	ldr	r3, [pc, #76]	; (1417c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>)
   14130:	220a      	movs	r2, #10
   14132:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14134:	4b12      	ldr	r3, [pc, #72]	; (14180 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
   14136:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1413a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   1413c:	e7ed      	b.n	1411a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  m_dmaBusy = true;
   1413e:	4b12      	ldr	r3, [pc, #72]	; (14188 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
   14140:	2201      	movs	r2, #1
   14142:	701a      	strb	r2, [r3, #0]
  m_irqstat = 0;
   14144:	4b11      	ldr	r3, [pc, #68]	; (1418c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
   14146:	2200      	movs	r2, #0
   14148:	601a      	str	r2, [r3, #0]
  SDHC_DSADDR  = (uint32_t)buf;
   1414a:	4a11      	ldr	r2, [pc, #68]	; (14190 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
   1414c:	6014      	str	r4, [r2, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   1414e:	4b11      	ldr	r3, [pc, #68]	; (14194 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
   14150:	ea03 4308 	and.w	r3, r3, r8, lsl #16
   14154:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14158:	6053      	str	r3, [r2, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
   1415a:	4b0f      	ldr	r3, [pc, #60]	; (14198 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
   1415c:	6393      	str	r3, [r2, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
   1415e:	4b0f      	ldr	r3, [pc, #60]	; (1419c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
   14160:	781b      	ldrb	r3, [r3, #0]
   14162:	b903      	cbnz	r3, 14166 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x76>
   14164:	0276      	lsls	r6, r6, #9
   14166:	4631      	mov	r1, r6
   14168:	4638      	mov	r0, r7
   1416a:	f7ff fd25 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   1416e:	4605      	mov	r5, r0
   14170:	2800      	cmp	r0, #0
   14172:	d0d2      	beq.n	1411a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
  return waitDmaStatus();
   14174:	f7ff feda 	bl	13f2c <waitDmaStatus()>
   14178:	4605      	mov	r5, r0
   1417a:	e7ce      	b.n	1411a <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2a>
   1417c:	20005c88 	.word	0x20005c88
   14180:	20006b64 	.word	0x20006b64
   14184:	00013ccd 	.word	0x00013ccd
   14188:	20008c22 	.word	0x20008c22
   1418c:	20006c9c 	.word	0x20006c9c
   14190:	402c0000 	.word	0x402c0000
   14194:	1fff0000 	.word	0x1fff0000
   14198:	117f0002 	.word	0x117f0002
   1419c:	20008c20 	.word	0x20008c20

000141a0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
   141a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141a2:	4606      	mov	r6, r0
   141a4:	460c      	mov	r4, r1
   141a6:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   141a8:	7a02      	ldrb	r2, [r0, #8]
   141aa:	f012 0f01 	tst.w	r2, #1
   141ae:	d112      	bne.n	141d6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
   141b0:	b17b      	cbz	r3, 141d2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
   141b2:	185f      	adds	r7, r3, r1
      if (!readSector(sector + i, dst + i*512UL)) {
   141b4:	6833      	ldr	r3, [r6, #0]
   141b6:	691b      	ldr	r3, [r3, #16]
   141b8:	462a      	mov	r2, r5
   141ba:	4621      	mov	r1, r4
   141bc:	4630      	mov	r0, r6
   141be:	4798      	blx	r3
   141c0:	4603      	mov	r3, r0
   141c2:	b120      	cbz	r0, 141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
   141c4:	3401      	adds	r4, #1
   141c6:	f505 7500 	add.w	r5, r5, #512	; 0x200
   141ca:	42a7      	cmp	r7, r4
   141cc:	d1f2      	bne.n	141b4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x14>
}
   141ce:	4618      	mov	r0, r3
   141d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   141d2:	2301      	movs	r3, #1
   141d4:	e7fb      	b.n	141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if ((uint32_t)dst & 3) {
   141d6:	f015 0f03 	tst.w	r5, #3
   141da:	d010      	beq.n	141fe <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
   141dc:	b1f3      	cbz	r3, 1421c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>
   141de:	185f      	adds	r7, r3, r1
        if (!readSector(sector, dst)) {
   141e0:	6833      	ldr	r3, [r6, #0]
   141e2:	691b      	ldr	r3, [r3, #16]
   141e4:	462a      	mov	r2, r5
   141e6:	4621      	mov	r1, r4
   141e8:	4630      	mov	r0, r6
   141ea:	4798      	blx	r3
   141ec:	4603      	mov	r3, r0
   141ee:	2800      	cmp	r0, #0
   141f0:	d0ed      	beq.n	141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
   141f2:	3401      	adds	r4, #1
   141f4:	f505 7500 	add.w	r5, r5, #512	; 0x200
   141f8:	42bc      	cmp	r4, r7
   141fa:	d1f1      	bne.n	141e0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
   141fc:	e7e7      	b.n	141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
   141fe:	462a      	mov	r2, r5
   14200:	4807      	ldr	r0, [pc, #28]	; (14220 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
   14202:	f7ff ff75 	bl	140f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   14206:	4603      	mov	r3, r0
   14208:	2800      	cmp	r0, #0
   1420a:	d1e0      	bne.n	141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
  m_errorCode = code;
   1420c:	4a05      	ldr	r2, [pc, #20]	; (14224 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
   1420e:	210c      	movs	r1, #12
   14210:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   14212:	4a05      	ldr	r2, [pc, #20]	; (14228 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x88>)
   14214:	f240 31a1 	movw	r1, #929	; 0x3a1
   14218:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD18);
   1421a:	e7d8      	b.n	141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
      return true;
   1421c:	2301      	movs	r3, #1
   1421e:	e7d6      	b.n	141ce <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2e>
   14220:	123a0037 	.word	0x123a0037
   14224:	20005c88 	.word	0x20005c88
   14228:	20006b64 	.word	0x20006b64

0001422c <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
   1422c:	b570      	push	{r4, r5, r6, lr}
   1422e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   14232:	460e      	mov	r6, r1
   14234:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   14236:	7a03      	ldrb	r3, [r0, #8]
   14238:	f013 0f01 	tst.w	r3, #1
   1423c:	d01c      	beq.n	14278 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
    if (3 & (uint32_t)src) {
   1423e:	f012 0f03 	tst.w	r2, #3
   14242:	d006      	beq.n	14252 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x26>
      memcpy(aligned, src, 512);
   14244:	f44f 7200 	mov.w	r2, #512	; 0x200
   14248:	4629      	mov	r1, r5
   1424a:	4668      	mov	r0, sp
   1424c:	f003 f850 	bl	172f0 <memcpy>
      ptr = aligned;
   14250:	466d      	mov	r5, sp
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
   14252:	2301      	movs	r3, #1
   14254:	462a      	mov	r2, r5
   14256:	4631      	mov	r1, r6
   14258:	481d      	ldr	r0, [pc, #116]	; (142d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>)
   1425a:	f7ff ff49 	bl	140f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   1425e:	4603      	mov	r3, r0
   14260:	b930      	cbnz	r0, 14270 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
  m_errorCode = code;
   14262:	4a1c      	ldr	r2, [pc, #112]	; (142d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa8>)
   14264:	210d      	movs	r1, #13
   14266:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   14268:	4a1b      	ldr	r2, [pc, #108]	; (142d8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xac>)
   1426a:	f240 4111 	movw	r1, #1041	; 0x411
   1426e:	6011      	str	r1, [r2, #0]
}
   14270:	4618      	mov	r0, r3
   14272:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   14276:	bd70      	pop	{r4, r5, r6, pc}
   14278:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
   1427a:	f7ff fdc1 	bl	13e00 <waitTransferComplete()>
   1427e:	4603      	mov	r3, r0
   14280:	2800      	cmp	r0, #0
   14282:	d0f5      	beq.n	14270 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
   14284:	7a63      	ldrb	r3, [r4, #9]
   14286:	2b02      	cmp	r3, #2
   14288:	d01d      	beq.n	142c6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x9a>
      if (!syncDevice()) {
   1428a:	6823      	ldr	r3, [r4, #0]
   1428c:	6a1b      	ldr	r3, [r3, #32]
   1428e:	4620      	mov	r0, r4
   14290:	4798      	blx	r3
   14292:	4603      	mov	r3, r0
   14294:	2800      	cmp	r0, #0
   14296:	d0eb      	beq.n	14270 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      if (!writeStart(sector )) {
   14298:	6823      	ldr	r3, [r4, #0]
   1429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   1429c:	4631      	mov	r1, r6
   1429e:	4620      	mov	r0, r4
   142a0:	4798      	blx	r3
   142a2:	4603      	mov	r3, r0
   142a4:	2800      	cmp	r0, #0
   142a6:	d0e3      	beq.n	14270 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
      m_curSector = sector;
   142a8:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
   142aa:	2302      	movs	r3, #2
   142ac:	7263      	strb	r3, [r4, #9]
    if (!writeData(src)) {
   142ae:	6823      	ldr	r3, [r4, #0]
   142b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   142b2:	4629      	mov	r1, r5
   142b4:	4620      	mov	r0, r4
   142b6:	4798      	blx	r3
   142b8:	4603      	mov	r3, r0
   142ba:	2800      	cmp	r0, #0
   142bc:	d0d8      	beq.n	14270 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    m_curSector++;
   142be:	6862      	ldr	r2, [r4, #4]
   142c0:	3201      	adds	r2, #1
   142c2:	6062      	str	r2, [r4, #4]
   142c4:	e7d4      	b.n	14270 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
   142c6:	6863      	ldr	r3, [r4, #4]
   142c8:	42b3      	cmp	r3, r6
   142ca:	d1de      	bne.n	1428a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
   142cc:	e7ef      	b.n	142ae <SdioCard::writeSector(unsigned long, unsigned char const*)+0x82>
   142ce:	bf00      	nop
   142d0:	183a0001 	.word	0x183a0001
   142d4:	20005c88 	.word	0x20005c88
   142d8:	20006b64 	.word	0x20006b64

000142dc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
   142dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   142de:	4606      	mov	r6, r0
   142e0:	460c      	mov	r4, r1
   142e2:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   142e4:	7a02      	ldrb	r2, [r0, #8]
   142e6:	f012 0f01 	tst.w	r2, #1
   142ea:	d112      	bne.n	14312 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    for (size_t i = 0; i < n; i++) {
   142ec:	b17b      	cbz	r3, 1430e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
   142ee:	185f      	adds	r7, r3, r1
      if (!writeSector(sector + i, src + i*512UL)) {
   142f0:	6833      	ldr	r3, [r6, #0]
   142f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   142f4:	462a      	mov	r2, r5
   142f6:	4621      	mov	r1, r4
   142f8:	4630      	mov	r0, r6
   142fa:	4798      	blx	r3
   142fc:	4603      	mov	r3, r0
   142fe:	b120      	cbz	r0, 1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    for (size_t i = 0; i < n; i++) {
   14300:	3401      	adds	r4, #1
   14302:	f505 7500 	add.w	r5, r5, #512	; 0x200
   14306:	42a7      	cmp	r7, r4
   14308:	d1f2      	bne.n	142f0 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x14>
}
   1430a:	4618      	mov	r0, r3
   1430c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   1430e:	2301      	movs	r3, #1
   14310:	e7fb      	b.n	1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (3 & (uint32_t)ptr) {
   14312:	f015 0f03 	tst.w	r5, #3
   14316:	d010      	beq.n	1433a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
   14318:	b1f3      	cbz	r3, 14358 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>
   1431a:	185f      	adds	r7, r3, r1
        if (!writeSector(sector, ptr)) {
   1431c:	6833      	ldr	r3, [r6, #0]
   1431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14320:	462a      	mov	r2, r5
   14322:	4621      	mov	r1, r4
   14324:	4630      	mov	r0, r6
   14326:	4798      	blx	r3
   14328:	4603      	mov	r3, r0
   1432a:	2800      	cmp	r0, #0
   1432c:	d0ed      	beq.n	1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
   1432e:	3401      	adds	r4, #1
   14330:	f505 7500 	add.w	r5, r5, #512	; 0x200
   14334:	42bc      	cmp	r4, r7
   14336:	d1f1      	bne.n	1431c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
   14338:	e7e7      	b.n	1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
   1433a:	462a      	mov	r2, r5
   1433c:	4807      	ldr	r0, [pc, #28]	; (1435c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
   1433e:	f7ff fed7 	bl	140f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   14342:	4603      	mov	r3, r0
   14344:	2800      	cmp	r0, #0
   14346:	d1e0      	bne.n	1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
  m_errorCode = code;
   14348:	4a05      	ldr	r2, [pc, #20]	; (14360 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
   1434a:	210e      	movs	r1, #14
   1434c:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   1434e:	4a05      	ldr	r2, [pc, #20]	; (14364 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x88>)
   14350:	f240 413d 	movw	r1, #1085	; 0x43d
   14354:	6011      	str	r1, [r2, #0]
      return sdError(SD_CARD_ERROR_CMD25);
   14356:	e7d8      	b.n	1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
      return true;
   14358:	2301      	movs	r3, #1
   1435a:	e7d6      	b.n	1430a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2e>
   1435c:	193a0027 	.word	0x193a0027
   14360:	20005c88 	.word	0x20005c88
   14364:	20006b64 	.word	0x20006b64

00014368 <initSDHC()>:
static void initSDHC() {
   14368:	b508      	push	{r3, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
   1436a:	4b39      	ldr	r3, [pc, #228]	; (14450 <initSDHC()+0xe8>)
   1436c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   14370:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   14374:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
   14378:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1437c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   14380:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
   14384:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   14388:	f042 0218 	orr.w	r2, r2, #24
   1438c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
   14390:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   14394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   14398:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
   1439c:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
   143a0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   143a4:	f042 020c 	orr.w	r2, r2, #12
   143a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
   143ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   143ae:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
   143b2:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
   143b4:	69da      	ldr	r2, [r3, #28]
   143b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   143ba:	61da      	str	r2, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
   143bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   143be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   143c2:	625a      	str	r2, [r3, #36]	; 0x24
    gpioMux(5);
   143c4:	2005      	movs	r0, #5
   143c6:	f7ff faaf 	bl	13928 <gpioMux(unsigned char)>
  SDHC_MIX_CTRL |= 0x80000000;
   143ca:	4b22      	ldr	r3, [pc, #136]	; (14454 <initSDHC()+0xec>)
   143cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   143ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   143d2:	649a      	str	r2, [r3, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
   143d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   143d6:	4a20      	ldr	r2, [pc, #128]	; (14458 <initSDHC()+0xf0>)
   143d8:	430a      	orrs	r2, r1
   143da:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
   143dc:	461a      	mov	r2, r3
   143de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   143e0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   143e4:	d1fb      	bne.n	143de <initSDHC()+0x76>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
   143e6:	f44f 70c8 	mov.w	r0, #400	; 0x190
   143ea:	f7ff faf1 	bl	139d0 <setSdclk(unsigned long)>
    gpioMux(0);
   143ee:	2000      	movs	r0, #0
   143f0:	f7ff fa9a 	bl	13928 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   143f4:	4b19      	ldr	r3, [pc, #100]	; (1445c <initSDHC()+0xf4>)
   143f6:	f247 02b8 	movw	r2, #28856	; 0x70b8
   143fa:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
   143fe:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
   14402:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   14406:	f241 01b8 	movw	r1, #4280	; 0x10b8
   1440a:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
   1440e:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
   14412:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
   14416:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
   1441a:	4a11      	ldr	r2, [pc, #68]	; (14460 <initSDHC()+0xf8>)
   1441c:	635a      	str	r2, [r3, #52]	; 0x34
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   1441e:	4a11      	ldr	r2, [pc, #68]	; (14464 <initSDHC()+0xfc>)
   14420:	4911      	ldr	r1, [pc, #68]	; (14468 <initSDHC()+0x100>)
   14422:	f8c2 11f8 	str.w	r1, [r2, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
   14426:	4a11      	ldr	r2, [pc, #68]	; (1446c <initSDHC()+0x104>)
   14428:	2160      	movs	r1, #96	; 0x60
   1442a:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
   1442e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14432:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   14436:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
   1443a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1443c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
   14440:	62da      	str	r2, [r3, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
   14442:	461a      	mov	r2, r3
   14444:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   14446:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
   1444a:	d1fb      	bne.n	14444 <initSDHC()+0xdc>
}
   1444c:	bd08      	pop	{r3, pc}
   1444e:	bf00      	nop
   14450:	400d8000 	.word	0x400d8000
   14454:	402c0000 	.word	0x402c0000
   14458:	01008000 	.word	0x01008000
   1445c:	401f8000 	.word	0x401f8000
   14460:	117f000b 	.word	0x117f000b
   14464:	20006000 	.word	0x20006000
   14468:	000138fd 	.word	0x000138fd
   1446c:	e000e400 	.word	0xe000e400

00014470 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
   14470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14474:	b090      	sub	sp, #64	; 0x40
  m_sdioConfig = sdioConfig;
   14476:	7201      	strb	r1, [r0, #8]
  m_curState = IDLE_STATE;
   14478:	2400      	movs	r4, #0
   1447a:	7244      	strb	r4, [r0, #9]
  m_initDone = false;
   1447c:	4b96      	ldr	r3, [pc, #600]	; (146d8 <SdioCard::begin(SdioConfig)+0x268>)
   1447e:	701c      	strb	r4, [r3, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
   14480:	4b96      	ldr	r3, [pc, #600]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   14482:	701c      	strb	r4, [r3, #0]
  m_highCapacity = false;
   14484:	4b96      	ldr	r3, [pc, #600]	; (146e0 <SdioCard::begin(SdioConfig)+0x270>)
   14486:	701c      	strb	r4, [r3, #0]
  m_version2 = false;
   14488:	4b96      	ldr	r3, [pc, #600]	; (146e4 <SdioCard::begin(SdioConfig)+0x274>)
   1448a:	701c      	strb	r4, [r3, #0]
  initSDHC();
   1448c:	f7ff ff6c 	bl	14368 <initSDHC()>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
   14490:	4621      	mov	r1, r4
   14492:	4620      	mov	r0, r4
   14494:	f7ff fb90 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14498:	b958      	cbnz	r0, 144b2 <SdioCard::begin(SdioConfig)+0x42>
   1449a:	4604      	mov	r4, r0
  m_errorCode = code;
   1449c:	4b8f      	ldr	r3, [pc, #572]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   1449e:	2201      	movs	r2, #1
   144a0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   144a2:	4b91      	ldr	r3, [pc, #580]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   144a4:	f240 228e 	movw	r2, #654	; 0x28e
   144a8:	601a      	str	r2, [r3, #0]
}
   144aa:	4620      	mov	r0, r4
   144ac:	b010      	add	sp, #64	; 0x40
   144ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   144b2:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
   144b4:	4e8d      	ldr	r6, [pc, #564]	; (146ec <SdioCard::begin(SdioConfig)+0x27c>)
   144b6:	f44f 75d5 	mov.w	r5, #426	; 0x1aa
   144ba:	4629      	mov	r1, r5
   144bc:	4630      	mov	r0, r6
   144be:	f7ff fb7b 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   144c2:	b930      	cbnz	r0, 144d2 <SdioCard::begin(SdioConfig)+0x62>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
   144c4:	3c01      	subs	r4, #1
   144c6:	d1f8      	bne.n	144ba <SdioCard::begin(SdioConfig)+0x4a>
  if (!m_version2) {
   144c8:	4b86      	ldr	r3, [pc, #536]	; (146e4 <SdioCard::begin(SdioConfig)+0x274>)
   144ca:	781b      	ldrb	r3, [r3, #0]
   144cc:	b19b      	cbz	r3, 144f6 <SdioCard::begin(SdioConfig)+0x86>
  arg = m_version2 ? 0X40300000 : 0x00300000;
   144ce:	4d88      	ldr	r5, [pc, #544]	; (146f0 <SdioCard::begin(SdioConfig)+0x280>)
   144d0:	e01e      	b.n	14510 <SdioCard::begin(SdioConfig)+0xa0>
      if (SDHC_CMDRSP0 != 0X1AA) {
   144d2:	4b88      	ldr	r3, [pc, #544]	; (146f4 <SdioCard::begin(SdioConfig)+0x284>)
   144d4:	691b      	ldr	r3, [r3, #16]
   144d6:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
   144da:	d008      	beq.n	144ee <SdioCard::begin(SdioConfig)+0x7e>
  m_errorCode = code;
   144dc:	4b7f      	ldr	r3, [pc, #508]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   144de:	2206      	movs	r2, #6
   144e0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   144e2:	4b81      	ldr	r3, [pc, #516]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   144e4:	f44f 7225 	mov.w	r2, #660	; 0x294
   144e8:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
   144ea:	2400      	movs	r4, #0
   144ec:	e7dd      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
      m_version2 = true;
   144ee:	4b7d      	ldr	r3, [pc, #500]	; (146e4 <SdioCard::begin(SdioConfig)+0x274>)
   144f0:	2201      	movs	r2, #1
   144f2:	701a      	strb	r2, [r3, #0]
  if (!m_version2) {
   144f4:	e7eb      	b.n	144ce <SdioCard::begin(SdioConfig)+0x5e>
    initSDHC();
   144f6:	f7ff ff37 	bl	14368 <initSDHC()>
    cardCommand(CMD0_XFERTYP, 0);
   144fa:	2100      	movs	r1, #0
   144fc:	4608      	mov	r0, r1
   144fe:	f7ff fb5b 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
  arg = m_version2 ? 0X40300000 : 0x00300000;
   14502:	4b78      	ldr	r3, [pc, #480]	; (146e4 <SdioCard::begin(SdioConfig)+0x274>)
   14504:	781b      	ldrb	r3, [r3, #0]
   14506:	2b00      	cmp	r3, #0
   14508:	4d79      	ldr	r5, [pc, #484]	; (146f0 <SdioCard::begin(SdioConfig)+0x280>)
   1450a:	bf08      	it	eq
   1450c:	f44f 1540 	moveq.w	r5, #3145728	; 0x300000
  int m = micros();
   14510:	f002 fb86 	bl	16c20 <micros>
   14514:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   14516:	4e78      	ldr	r6, [pc, #480]	; (146f8 <SdioCard::begin(SdioConfig)+0x288>)
   14518:	f8df 8218 	ldr.w	r8, [pc, #536]	; 14734 <SdioCard::begin(SdioConfig)+0x2c4>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   1451c:	4f77      	ldr	r7, [pc, #476]	; (146fc <SdioCard::begin(SdioConfig)+0x28c>)
   1451e:	e00d      	b.n	1453c <SdioCard::begin(SdioConfig)+0xcc>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   14520:	4629      	mov	r1, r5
   14522:	4640      	mov	r0, r8
   14524:	f7ff fb48 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   14528:	b170      	cbz	r0, 14548 <SdioCard::begin(SdioConfig)+0xd8>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
   1452a:	f002 fb79 	bl	16c20 <micros>
   1452e:	1b00      	subs	r0, r0, r4
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   14530:	42b8      	cmp	r0, r7
   14532:	d809      	bhi.n	14548 <SdioCard::begin(SdioConfig)+0xd8>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
   14534:	4b6f      	ldr	r3, [pc, #444]	; (146f4 <SdioCard::begin(SdioConfig)+0x284>)
   14536:	691b      	ldr	r3, [r3, #16]
   14538:	2b00      	cmp	r3, #0
   1453a:	db0e      	blt.n	1455a <SdioCard::begin(SdioConfig)+0xea>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   1453c:	2100      	movs	r1, #0
   1453e:	4630      	mov	r0, r6
   14540:	f7ff fb3a 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14544:	2800      	cmp	r0, #0
   14546:	d1eb      	bne.n	14520 <SdioCard::begin(SdioConfig)+0xb0>
  m_errorCode = code;
   14548:	4b64      	ldr	r3, [pc, #400]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   1454a:	2217      	movs	r2, #23
   1454c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   1454e:	4b66      	ldr	r3, [pc, #408]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   14550:	f44f 722a 	mov.w	r2, #680	; 0x2a8
   14554:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_ACMD41);
   14556:	2400      	movs	r4, #0
   14558:	e7a7      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  m_ocr = SDHC_CMDRSP0;
   1455a:	4b66      	ldr	r3, [pc, #408]	; (146f4 <SdioCard::begin(SdioConfig)+0x284>)
   1455c:	6919      	ldr	r1, [r3, #16]
   1455e:	4a68      	ldr	r2, [pc, #416]	; (14700 <SdioCard::begin(SdioConfig)+0x290>)
   14560:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
   14562:	691b      	ldr	r3, [r3, #16]
   14564:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   14568:	d002      	beq.n	14570 <SdioCard::begin(SdioConfig)+0x100>
    m_highCapacity = true;
   1456a:	4b5d      	ldr	r3, [pc, #372]	; (146e0 <SdioCard::begin(SdioConfig)+0x270>)
   1456c:	2201      	movs	r2, #1
   1456e:	701a      	strb	r2, [r3, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
   14570:	2100      	movs	r1, #0
   14572:	4864      	ldr	r0, [pc, #400]	; (14704 <SdioCard::begin(SdioConfig)+0x294>)
   14574:	f7ff fb20 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14578:	4604      	mov	r4, r0
   1457a:	b938      	cbnz	r0, 1458c <SdioCard::begin(SdioConfig)+0x11c>
  m_errorCode = code;
   1457c:	4b57      	ldr	r3, [pc, #348]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   1457e:	2202      	movs	r2, #2
   14580:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14582:	4b59      	ldr	r3, [pc, #356]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   14584:	f240 22b1 	movw	r2, #689	; 0x2b1
   14588:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
   1458a:	e78e      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
   1458c:	2100      	movs	r1, #0
   1458e:	485e      	ldr	r0, [pc, #376]	; (14708 <SdioCard::begin(SdioConfig)+0x298>)
   14590:	f7ff fb12 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14594:	4604      	mov	r4, r0
   14596:	b938      	cbnz	r0, 145a8 <SdioCard::begin(SdioConfig)+0x138>
  m_errorCode = code;
   14598:	4b50      	ldr	r3, [pc, #320]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   1459a:	2203      	movs	r2, #3
   1459c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   1459e:	4b52      	ldr	r3, [pc, #328]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   145a0:	f44f 722d 	mov.w	r2, #692	; 0x2b4
   145a4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
   145a6:	e780      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
   145a8:	4b52      	ldr	r3, [pc, #328]	; (146f4 <SdioCard::begin(SdioConfig)+0x284>)
   145aa:	691a      	ldr	r2, [r3, #16]
   145ac:	4b57      	ldr	r3, [pc, #348]	; (1470c <SdioCard::begin(SdioConfig)+0x29c>)
   145ae:	4013      	ands	r3, r2
   145b0:	4a57      	ldr	r2, [pc, #348]	; (14710 <SdioCard::begin(SdioConfig)+0x2a0>)
   145b2:	6013      	str	r3, [r2, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
   145b4:	4957      	ldr	r1, [pc, #348]	; (14714 <SdioCard::begin(SdioConfig)+0x2a4>)
   145b6:	4858      	ldr	r0, [pc, #352]	; (14718 <SdioCard::begin(SdioConfig)+0x2a8>)
   145b8:	f7ff fb3c 	bl	13c34 <readReg16(unsigned long, void*)>
   145bc:	4604      	mov	r4, r0
   145be:	b938      	cbnz	r0, 145d0 <SdioCard::begin(SdioConfig)+0x160>
  m_errorCode = code;
   145c0:	4b46      	ldr	r3, [pc, #280]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   145c2:	2207      	movs	r2, #7
   145c4:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   145c6:	4b48      	ldr	r3, [pc, #288]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   145c8:	f240 22b9 	movw	r2, #697	; 0x2b9
   145cc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
   145ce:	e76c      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
   145d0:	4952      	ldr	r1, [pc, #328]	; (1471c <SdioCard::begin(SdioConfig)+0x2ac>)
   145d2:	4853      	ldr	r0, [pc, #332]	; (14720 <SdioCard::begin(SdioConfig)+0x2b0>)
   145d4:	f7ff fb2e 	bl	13c34 <readReg16(unsigned long, void*)>
   145d8:	4604      	mov	r4, r0
   145da:	b938      	cbnz	r0, 145ec <SdioCard::begin(SdioConfig)+0x17c>
  m_errorCode = code;
   145dc:	4b3f      	ldr	r3, [pc, #252]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   145de:	2208      	movs	r2, #8
   145e0:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   145e2:	4b41      	ldr	r3, [pc, #260]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   145e4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
   145e8:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
   145ea:	e75e      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
   145ec:	4b48      	ldr	r3, [pc, #288]	; (14710 <SdioCard::begin(SdioConfig)+0x2a0>)
   145ee:	6819      	ldr	r1, [r3, #0]
   145f0:	484c      	ldr	r0, [pc, #304]	; (14724 <SdioCard::begin(SdioConfig)+0x2b4>)
   145f2:	f7ff fae1 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   145f6:	4604      	mov	r4, r0
   145f8:	b938      	cbnz	r0, 1460a <SdioCard::begin(SdioConfig)+0x19a>
  m_errorCode = code;
   145fa:	4b38      	ldr	r3, [pc, #224]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   145fc:	2205      	movs	r2, #5
   145fe:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14600:	4b39      	ldr	r3, [pc, #228]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   14602:	f240 22bf 	movw	r2, #703	; 0x2bf
   14606:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
   14608:	e74f      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   1460a:	4b41      	ldr	r3, [pc, #260]	; (14710 <SdioCard::begin(SdioConfig)+0x2a0>)
   1460c:	6819      	ldr	r1, [r3, #0]
   1460e:	483a      	ldr	r0, [pc, #232]	; (146f8 <SdioCard::begin(SdioConfig)+0x288>)
   14610:	f7ff fad2 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14614:	b940      	cbnz	r0, 14628 <SdioCard::begin(SdioConfig)+0x1b8>
  m_errorCode = code;
   14616:	4b31      	ldr	r3, [pc, #196]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   14618:	2214      	movs	r2, #20
   1461a:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   1461c:	4b32      	ldr	r3, [pc, #200]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   1461e:	f240 22c3 	movw	r2, #707	; 0x2c3
   14622:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
   14624:	2400      	movs	r4, #0
   14626:	e740      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   14628:	2102      	movs	r1, #2
   1462a:	483f      	ldr	r0, [pc, #252]	; (14728 <SdioCard::begin(SdioConfig)+0x2b8>)
   1462c:	f7ff fac4 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
   14630:	4604      	mov	r4, r0
   14632:	2800      	cmp	r0, #0
   14634:	d0ef      	beq.n	14616 <SdioCard::begin(SdioConfig)+0x1a6>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
   14636:	4b2f      	ldr	r3, [pc, #188]	; (146f4 <SdioCard::begin(SdioConfig)+0x284>)
   14638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1463a:	f022 0206 	bic.w	r2, r2, #6
   1463e:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
   14640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14642:	f042 0202 	orr.w	r2, r2, #2
   14646:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
   14648:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   1464c:	645a      	str	r2, [r3, #68]	; 0x44
  bool highSpeedModeAsk = cardCMD6(0X00FFFFFF, status);
   1464e:	4669      	mov	r1, sp
   14650:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   14654:	f7ff fc84 	bl	13f60 <cardCMD6(unsigned long, unsigned char*)>
  bool highspeedModeSupported = (2 & status[13]);
   14658:	f89d 200d 	ldrb.w	r2, [sp, #13]
  if (highSpeedModeAsk && highspeedModeSupported) {
   1465c:	f012 0f02 	tst.w	r2, #2
   14660:	d000      	beq.n	14664 <SdioCard::begin(SdioConfig)+0x1f4>
   14662:	b9f8      	cbnz	r0, 146a4 <SdioCard::begin(SdioConfig)+0x234>
  kHzSdClk = 25000;
   14664:	f246 15a8 	movw	r5, #25000	; 0x61a8
    gpioMux(5);
   14668:	2005      	movs	r0, #5
   1466a:	f7ff f95d 	bl	13928 <gpioMux(unsigned char)>
  setSdclk(kHzSdClk);
   1466e:	4628      	mov	r0, r5
   14670:	f7ff f9ae 	bl	139d0 <setSdclk(unsigned long)>
    gpioMux(0);
   14674:	2000      	movs	r0, #0
   14676:	f7ff f957 	bl	13928 <gpioMux(unsigned char)>
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   1467a:	4b2c      	ldr	r3, [pc, #176]	; (1472c <SdioCard::begin(SdioConfig)+0x2bc>)
   1467c:	f247 02b8 	movw	r2, #28856	; 0x70b8
   14680:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
   14684:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
   14688:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   1468c:	f241 01b8 	movw	r1, #4280	; 0x10b8
   14690:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
   14694:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
   14698:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  m_initDone = true;
   1469c:	4b0e      	ldr	r3, [pc, #56]	; (146d8 <SdioCard::begin(SdioConfig)+0x268>)
   1469e:	2201      	movs	r2, #1
   146a0:	701a      	strb	r2, [r3, #0]
  return true;
   146a2:	e702      	b.n	144aa <SdioCard::begin(SdioConfig)+0x3a>
    uint8_t err_code_before = m_errorCode;
   146a4:	4b0d      	ldr	r3, [pc, #52]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   146a6:	781e      	ldrb	r6, [r3, #0]
    uint32_t m_errorLine_before = m_errorLine;
   146a8:	4b0f      	ldr	r3, [pc, #60]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   146aa:	681d      	ldr	r5, [r3, #0]
    bool switchRequestAsk = cardCMD6(0X80FFFFF1, status);
   146ac:	4669      	mov	r1, sp
   146ae:	4820      	ldr	r0, [pc, #128]	; (14730 <SdioCard::begin(SdioConfig)+0x2c0>)
   146b0:	f7ff fc56 	bl	13f60 <cardCMD6(unsigned long, unsigned char*)>
    bool switchRequestDone = ((status[16] & 0XF) == 1);
   146b4:	f89d 2010 	ldrb.w	r2, [sp, #16]
   146b8:	f002 020f 	and.w	r2, r2, #15
    if (switchRequestAsk && switchRequestDone) {
   146bc:	2a01      	cmp	r2, #1
   146be:	d103      	bne.n	146c8 <SdioCard::begin(SdioConfig)+0x258>
   146c0:	b110      	cbz	r0, 146c8 <SdioCard::begin(SdioConfig)+0x258>
      kHzSdClk = 50000;
   146c2:	f24c 3550 	movw	r5, #50000	; 0xc350
   146c6:	e7cf      	b.n	14668 <SdioCard::begin(SdioConfig)+0x1f8>
      m_errorCode = err_code_before;
   146c8:	4b04      	ldr	r3, [pc, #16]	; (146dc <SdioCard::begin(SdioConfig)+0x26c>)
   146ca:	701e      	strb	r6, [r3, #0]
      m_errorLine = m_errorLine_before;
   146cc:	4b06      	ldr	r3, [pc, #24]	; (146e8 <SdioCard::begin(SdioConfig)+0x278>)
   146ce:	601d      	str	r5, [r3, #0]
  kHzSdClk = 25000;
   146d0:	f246 15a8 	movw	r5, #25000	; 0x61a8
   146d4:	e7c8      	b.n	14668 <SdioCard::begin(SdioConfig)+0x1f8>
   146d6:	bf00      	nop
   146d8:	20008c1e 	.word	0x20008c1e
   146dc:	20005c88 	.word	0x20005c88
   146e0:	20008c20 	.word	0x20008c20
   146e4:	20008c1f 	.word	0x20008c1f
   146e8:	20006b64 	.word	0x20006b64
   146ec:	081a0000 	.word	0x081a0000
   146f0:	40300000 	.word	0x40300000
   146f4:	402c0000 	.word	0x402c0000
   146f8:	371a0000 	.word	0x371a0000
   146fc:	000f4240 	.word	0x000f4240
   14700:	20006c8c 	.word	0x20006c8c
   14704:	02090000 	.word	0x02090000
   14708:	031a0000 	.word	0x031a0000
   1470c:	ffff0000 	.word	0xffff0000
   14710:	20006c90 	.word	0x20006c90
   14714:	20006c7c 	.word	0x20006c7c
   14718:	09090000 	.word	0x09090000
   1471c:	20006c6c 	.word	0x20006c6c
   14720:	0a090000 	.word	0x0a090000
   14724:	071b0000 	.word	0x071b0000
   14728:	061a0000 	.word	0x061a0000
   1472c:	401f8000 	.word	0x401f8000
   14730:	80fffff1 	.word	0x80fffff1
   14734:	29020000 	.word	0x29020000

00014738 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readData(uint8_t* dst) {
   14738:	b538      	push	{r3, r4, r5, lr}
   1473a:	460c      	mov	r4, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
   1473c:	4b2b      	ldr	r3, [pc, #172]	; (147ec <SdioCard::readData(unsigned char*)+0xb4>)
   1473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14740:	f413 7f00 	tst.w	r3, #512	; 0x200
   14744:	d10e      	bne.n	14764 <SdioCard::readData(unsigned char*)+0x2c>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   14746:	4b29      	ldr	r3, [pc, #164]	; (147ec <SdioCard::readData(unsigned char*)+0xb4>)
   14748:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1474a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   1474e:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
   14750:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
   14752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14754:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   14758:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   1475a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1475c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   14760:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
   14762:	b662      	cpsie	i
  if (waitTimeout(isBusyFifoRead)) {
   14764:	4822      	ldr	r0, [pc, #136]	; (147f0 <SdioCard::readData(unsigned char*)+0xb8>)
   14766:	f7ff fa15 	bl	13b94 <waitTimeout(bool (*)())>
   1476a:	4605      	mov	r5, r0
   1476c:	b148      	cbz	r0, 14782 <SdioCard::readData(unsigned char*)+0x4a>
  m_errorCode = code;
   1476e:	4b21      	ldr	r3, [pc, #132]	; (147f4 <SdioCard::readData(unsigned char*)+0xbc>)
   14770:	221a      	movs	r2, #26
   14772:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14774:	4b20      	ldr	r3, [pc, #128]	; (147f8 <SdioCard::readData(unsigned char*)+0xc0>)
   14776:	f240 3256 	movw	r2, #854	; 0x356
   1477a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_FIFO);
   1477c:	2500      	movs	r5, #0
}
   1477e:	4628      	mov	r0, r5
   14780:	bd38      	pop	{r3, r4, r5, pc}
   14782:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
   14786:	f504 710f 	add.w	r1, r4, #572	; 0x23c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
   1478a:	4818      	ldr	r0, [pc, #96]	; (147ec <SdioCard::readData(unsigned char*)+0xb4>)
   1478c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   1478e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   14792:	d0fb      	beq.n	1478c <SdioCard::readData(unsigned char*)+0x54>
   14794:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
   14798:	6a02      	ldr	r2, [r0, #32]
   1479a:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   1479e:	4563      	cmp	r3, ip
   147a0:	d1fa      	bne.n	14798 <SdioCard::readData(unsigned char*)+0x60>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
   147a2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
   147a6:	458c      	cmp	ip, r1
   147a8:	d1f0      	bne.n	1478c <SdioCard::readData(unsigned char*)+0x54>
  if (waitTimeout(isBusyTransferComplete)) {
   147aa:	4814      	ldr	r0, [pc, #80]	; (147fc <SdioCard::readData(unsigned char*)+0xc4>)
   147ac:	f7ff f9f2 	bl	13b94 <waitTimeout(bool (*)())>
   147b0:	4601      	mov	r1, r0
   147b2:	b138      	cbz	r0, 147c4 <SdioCard::readData(unsigned char*)+0x8c>
  m_errorCode = code;
   147b4:	4b0f      	ldr	r3, [pc, #60]	; (147f4 <SdioCard::readData(unsigned char*)+0xbc>)
   147b6:	221d      	movs	r2, #29
   147b8:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   147ba:	4b0f      	ldr	r3, [pc, #60]	; (147f8 <SdioCard::readData(unsigned char*)+0xc0>)
   147bc:	f240 3261 	movw	r2, #865	; 0x361
   147c0:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
   147c2:	e7dc      	b.n	1477e <SdioCard::readData(unsigned char*)+0x46>
  m_irqstat = SDHC_IRQSTAT;
   147c4:	4a09      	ldr	r2, [pc, #36]	; (147ec <SdioCard::readData(unsigned char*)+0xb4>)
   147c6:	6b10      	ldr	r0, [r2, #48]	; 0x30
   147c8:	4b0d      	ldr	r3, [pc, #52]	; (14800 <SdioCard::readData(unsigned char*)+0xc8>)
   147ca:	6018      	str	r0, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   147cc:	6818      	ldr	r0, [r3, #0]
   147ce:	6310      	str	r0, [r2, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   147d0:	681b      	ldr	r3, [r3, #0]
   147d2:	f013 0f02 	tst.w	r3, #2
   147d6:	d007      	beq.n	147e8 <SdioCard::readData(unsigned char*)+0xb0>
   147d8:	4b09      	ldr	r3, [pc, #36]	; (14800 <SdioCard::readData(unsigned char*)+0xc8>)
   147da:	681a      	ldr	r2, [r3, #0]
   147dc:	4b09      	ldr	r3, [pc, #36]	; (14804 <SdioCard::readData(unsigned char*)+0xcc>)
   147de:	421a      	tst	r2, r3
   147e0:	bf0c      	ite	eq
   147e2:	2501      	moveq	r5, #1
   147e4:	2500      	movne	r5, #0
   147e6:	e7ca      	b.n	1477e <SdioCard::readData(unsigned char*)+0x46>
   147e8:	460d      	mov	r5, r1
   147ea:	e7c8      	b.n	1477e <SdioCard::readData(unsigned char*)+0x46>
   147ec:	402c0000 	.word	0x402c0000
   147f0:	00013991 	.word	0x00013991
   147f4:	20005c88 	.word	0x20005c88
   147f8:	20006b64 	.word	0x20006b64
   147fc:	000139b9 	.word	0x000139b9
   14800:	20006c9c 	.word	0x20006c9c
   14804:	117f0000 	.word	0x117f0000

00014808 <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
   14808:	b510      	push	{r4, lr}
   1480a:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
   1480c:	4813      	ldr	r0, [pc, #76]	; (1485c <SdioCard::readStart(unsigned long)+0x54>)
   1480e:	f7ff fb71 	bl	13ef4 <yieldTimeout(bool (*)())>
   14812:	b140      	cbz	r0, 14826 <SdioCard::readStart(unsigned long)+0x1e>
  m_errorCode = code;
   14814:	4b12      	ldr	r3, [pc, #72]	; (14860 <SdioCard::readStart(unsigned long)+0x58>)
   14816:	220a      	movs	r2, #10
   14818:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   1481a:	4b12      	ldr	r3, [pc, #72]	; (14864 <SdioCard::readStart(unsigned long)+0x5c>)
   1481c:	f240 32b1 	movw	r2, #945	; 0x3b1
   14820:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   14822:	2000      	movs	r0, #0
}
   14824:	bd10      	pop	{r4, pc}
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   14826:	4b10      	ldr	r3, [pc, #64]	; (14868 <SdioCard::readStart(unsigned long)+0x60>)
   14828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1482a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   1482e:	629a      	str	r2, [r3, #40]	; 0x28
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   14830:	f44f 7200 	mov.w	r2, #512	; 0x200
   14834:	605a      	str	r2, [r3, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   14836:	4b0d      	ldr	r3, [pc, #52]	; (1486c <SdioCard::readStart(unsigned long)+0x64>)
   14838:	781b      	ldrb	r3, [r3, #0]
   1483a:	b903      	cbnz	r3, 1483e <SdioCard::readStart(unsigned long)+0x36>
   1483c:	0264      	lsls	r4, r4, #9
   1483e:	4621      	mov	r1, r4
   14840:	480b      	ldr	r0, [pc, #44]	; (14870 <SdioCard::readStart(unsigned long)+0x68>)
   14842:	f7ff f9b9 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   14846:	2800      	cmp	r0, #0
   14848:	d1ec      	bne.n	14824 <SdioCard::readStart(unsigned long)+0x1c>
  m_errorCode = code;
   1484a:	4b05      	ldr	r3, [pc, #20]	; (14860 <SdioCard::readStart(unsigned long)+0x58>)
   1484c:	220c      	movs	r2, #12
   1484e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14850:	4b04      	ldr	r3, [pc, #16]	; (14864 <SdioCard::readStart(unsigned long)+0x5c>)
   14852:	f240 32bd 	movw	r2, #957	; 0x3bd
   14856:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD18);
   14858:	e7e4      	b.n	14824 <SdioCard::readStart(unsigned long)+0x1c>
   1485a:	bf00      	nop
   1485c:	00013ccd 	.word	0x00013ccd
   14860:	20005c88 	.word	0x20005c88
   14864:	20006b64 	.word	0x20006b64
   14868:	402c0000 	.word	0x402c0000
   1486c:	20008c20 	.word	0x20008c20
   14870:	123a0030 	.word	0x123a0030

00014874 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
   14874:	b570      	push	{r4, r5, r6, lr}
   14876:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   1487a:	460e      	mov	r6, r1
   1487c:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   1487e:	7a03      	ldrb	r3, [r0, #8]
   14880:	f013 0f01 	tst.w	r3, #1
   14884:	d013      	beq.n	148ae <SdioCard::readSector(unsigned long, unsigned char*)+0x3a>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
   14886:	f012 0f03 	tst.w	r2, #3
   1488a:	d135      	bne.n	148f8 <SdioCard::readSector(unsigned long, unsigned char*)+0x84>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
   1488c:	2301      	movs	r3, #1
   1488e:	4822      	ldr	r0, [pc, #136]	; (14918 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
   14890:	f7ff fc2e 	bl	140f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   14894:	2800      	cmp	r0, #0
   14896:	d13c      	bne.n	14912 <SdioCard::readSector(unsigned long, unsigned char*)+0x9e>
  m_errorCode = code;
   14898:	4b20      	ldr	r3, [pc, #128]	; (1491c <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>)
   1489a:	220b      	movs	r2, #11
   1489c:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   1489e:	4b20      	ldr	r3, [pc, #128]	; (14920 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>)
   148a0:	f44f 725d 	mov.w	r2, #884	; 0x374
   148a4:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD17);
   148a6:	2000      	movs	r0, #0
}
   148a8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   148ac:	bd70      	pop	{r4, r5, r6, pc}
   148ae:	4604      	mov	r4, r0
    if (!waitTransferComplete()) {
   148b0:	f7ff faa6 	bl	13e00 <waitTransferComplete()>
   148b4:	2800      	cmp	r0, #0
   148b6:	d0f7      	beq.n	148a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
   148b8:	7a63      	ldrb	r3, [r4, #9]
   148ba:	2b01      	cmp	r3, #1
   148bc:	d018      	beq.n	148f0 <SdioCard::readSector(unsigned long, unsigned char*)+0x7c>
      if (!syncDevice()) {
   148be:	6823      	ldr	r3, [r4, #0]
   148c0:	6a1b      	ldr	r3, [r3, #32]
   148c2:	4620      	mov	r0, r4
   148c4:	4798      	blx	r3
   148c6:	2800      	cmp	r0, #0
   148c8:	d0ee      	beq.n	148a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      if (!readStart(sector)) {
   148ca:	4631      	mov	r1, r6
   148cc:	4620      	mov	r0, r4
   148ce:	f7ff ff9b 	bl	14808 <SdioCard::readStart(unsigned long)>
   148d2:	2800      	cmp	r0, #0
   148d4:	d0e8      	beq.n	148a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
      m_curSector = sector;
   148d6:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
   148d8:	2301      	movs	r3, #1
   148da:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
   148dc:	4629      	mov	r1, r5
   148de:	4620      	mov	r0, r4
   148e0:	f7ff ff2a 	bl	14738 <SdioCard::readData(unsigned char*)>
   148e4:	2800      	cmp	r0, #0
   148e6:	d0df      	beq.n	148a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    m_curSector++;
   148e8:	6863      	ldr	r3, [r4, #4]
   148ea:	3301      	adds	r3, #1
   148ec:	6063      	str	r3, [r4, #4]
   148ee:	e7db      	b.n	148a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
    if (m_curState != READ_STATE || sector != m_curSector) {
   148f0:	6863      	ldr	r3, [r4, #4]
   148f2:	42b3      	cmp	r3, r6
   148f4:	d1e3      	bne.n	148be <SdioCard::readSector(unsigned long, unsigned char*)+0x4a>
   148f6:	e7f1      	b.n	148dc <SdioCard::readSector(unsigned long, unsigned char*)+0x68>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
   148f8:	2301      	movs	r3, #1
   148fa:	466a      	mov	r2, sp
   148fc:	4806      	ldr	r0, [pc, #24]	; (14918 <SdioCard::readSector(unsigned long, unsigned char*)+0xa4>)
   148fe:	f7ff fbf7 	bl	140f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   14902:	2800      	cmp	r0, #0
   14904:	d0c8      	beq.n	14898 <SdioCard::readSector(unsigned long, unsigned char*)+0x24>
      memcpy(dst, aligned, 512);
   14906:	f44f 7200 	mov.w	r2, #512	; 0x200
   1490a:	4669      	mov	r1, sp
   1490c:	4628      	mov	r0, r5
   1490e:	f002 fcef 	bl	172f0 <memcpy>
  return true;
   14912:	2001      	movs	r0, #1
   14914:	e7c8      	b.n	148a8 <SdioCard::readSector(unsigned long, unsigned char*)+0x34>
   14916:	bf00      	nop
   14918:	113a0011 	.word	0x113a0011
   1491c:	20005c88 	.word	0x20005c88
   14920:	20006b64 	.word	0x20006b64

00014924 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
   14924:	b510      	push	{r4, lr}
   14926:	460c      	mov	r4, r1
  m_curState = IDLE_STATE;
   14928:	2100      	movs	r1, #0
   1492a:	7241      	strb	r1, [r0, #9]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   1492c:	4a10      	ldr	r2, [pc, #64]	; (14970 <SdioCard::stopTransmission(bool)+0x4c>)
   1492e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   14930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   14934:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   14936:	480f      	ldr	r0, [pc, #60]	; (14974 <SdioCard::stopTransmission(bool)+0x50>)
   14938:	f7ff f93e 	bl	13bb8 <cardCommand(unsigned long, unsigned long)>
   1493c:	b938      	cbnz	r0, 1494e <SdioCard::stopTransmission(bool)+0x2a>
  m_errorCode = code;
   1493e:	4b0e      	ldr	r3, [pc, #56]	; (14978 <SdioCard::stopTransmission(bool)+0x54>)
   14940:	2209      	movs	r2, #9
   14942:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14944:	4b0d      	ldr	r3, [pc, #52]	; (1497c <SdioCard::stopTransmission(bool)+0x58>)
   14946:	f240 32d3 	movw	r2, #979	; 0x3d3
   1494a:	601a      	str	r2, [r3, #0]
}
   1494c:	bd10      	pop	{r4, pc}
  if (blocking) {
   1494e:	2c00      	cmp	r4, #0
   14950:	d0fc      	beq.n	1494c <SdioCard::stopTransmission(bool)+0x28>
    if (yieldTimeout(isBusyDat)) {
   14952:	480b      	ldr	r0, [pc, #44]	; (14980 <SdioCard::stopTransmission(bool)+0x5c>)
   14954:	f7ff face 	bl	13ef4 <yieldTimeout(bool (*)())>
   14958:	b140      	cbz	r0, 1496c <SdioCard::stopTransmission(bool)+0x48>
  m_errorCode = code;
   1495a:	4b07      	ldr	r3, [pc, #28]	; (14978 <SdioCard::stopTransmission(bool)+0x54>)
   1495c:	220a      	movs	r2, #10
   1495e:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   14960:	4b06      	ldr	r3, [pc, #24]	; (1497c <SdioCard::stopTransmission(bool)+0x58>)
   14962:	f240 32d7 	movw	r2, #983	; 0x3d7
   14966:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
   14968:	2000      	movs	r0, #0
   1496a:	e7ef      	b.n	1494c <SdioCard::stopTransmission(bool)+0x28>
  return true;
   1496c:	4620      	mov	r0, r4
   1496e:	e7ed      	b.n	1494c <SdioCard::stopTransmission(bool)+0x28>
   14970:	402c0000 	.word	0x402c0000
   14974:	0cdb0000 	.word	0x0cdb0000
   14978:	20005c88 	.word	0x20005c88
   1497c:	20006b64 	.word	0x20006b64
   14980:	00013971 	.word	0x00013971

00014984 <SdioCard::syncDevice()>:
bool SdioCard::syncDevice() {
   14984:	b510      	push	{r4, lr}
   14986:	4604      	mov	r4, r0
  if (!waitTransferComplete()) {
   14988:	f7ff fa3a 	bl	13e00 <waitTransferComplete()>
   1498c:	b108      	cbz	r0, 14992 <SdioCard::syncDevice()+0xe>
  if (m_curState != IDLE_STATE) {
   1498e:	7a63      	ldrb	r3, [r4, #9]
   14990:	b903      	cbnz	r3, 14994 <SdioCard::syncDevice()+0x10>
}
   14992:	bd10      	pop	{r4, pc}
    return stopTransmission(true);
   14994:	2101      	movs	r1, #1
   14996:	4620      	mov	r0, r4
   14998:	f7ff ffc4 	bl	14924 <SdioCard::stopTransmission(bool)>
   1499c:	e7f9      	b.n	14992 <SdioCard::syncDevice()+0xe>

0001499e <sdCsInit(unsigned char)>:
 */
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
   1499e:	b508      	push	{r3, lr}
  pinMode(pin, OUTPUT);
   149a0:	2101      	movs	r1, #1
   149a2:	f002 f9b5 	bl	16d10 <pinMode>
}
   149a6:	bd08      	pop	{r3, pc}

000149a8 <sdCsWrite(unsigned char, bool)>:
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
   149a8:	b508      	push	{r3, lr}
  digitalWrite(pin, level);
   149aa:	f002 f979 	bl	16ca0 <digitalWrite>
}
   149ae:	bd08      	pop	{r3, pc}

000149b0 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
   149b0:	b430      	push	{r4, r5}
  m_spi->beginTransaction(m_spiSettings);
   149b2:	6803      	ldr	r3, [r0, #0]
   149b4:	6842      	ldr	r2, [r0, #4]
   149b6:	6884      	ldr	r4, [r0, #8]
		if (interruptMasksUsed) {
   149b8:	7cd9      	ldrb	r1, [r3, #19]
   149ba:	2900      	cmp	r1, #0
   149bc:	d042      	beq.n	14a44 <SdSpiArduinoDriver::activate()+0x94>
			__disable_irq();
   149be:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
   149c0:	7cd9      	ldrb	r1, [r3, #19]
   149c2:	f011 0f01 	tst.w	r1, #1
   149c6:	d008      	beq.n	149da <SdSpiArduinoDriver::activate()+0x2a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
   149c8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   149cc:	f8d0 1180 	ldr.w	r1, [r0, #384]	; 0x180
   149d0:	695d      	ldr	r5, [r3, #20]
   149d2:	4029      	ands	r1, r5
   149d4:	6299      	str	r1, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
   149d6:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
   149da:	7cd9      	ldrb	r1, [r3, #19]
   149dc:	f011 0f02 	tst.w	r1, #2
   149e0:	d008      	beq.n	149f4 <SdSpiArduinoDriver::activate()+0x44>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
   149e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   149e6:	f8d0 1184 	ldr.w	r1, [r0, #388]	; 0x184
   149ea:	699d      	ldr	r5, [r3, #24]
   149ec:	4029      	ands	r1, r5
   149ee:	62d9      	str	r1, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
   149f0:	f8c0 1184 	str.w	r1, [r0, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
   149f4:	7cd9      	ldrb	r1, [r3, #19]
   149f6:	f011 0f04 	tst.w	r1, #4
   149fa:	d008      	beq.n	14a0e <SdSpiArduinoDriver::activate()+0x5e>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
   149fc:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   14a00:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   14a04:	69dd      	ldr	r5, [r3, #28]
   14a06:	4029      	ands	r1, r5
   14a08:	6319      	str	r1, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
   14a0a:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
   14a0e:	7cd9      	ldrb	r1, [r3, #19]
   14a10:	f011 0f08 	tst.w	r1, #8
   14a14:	d008      	beq.n	14a28 <SdSpiArduinoDriver::activate()+0x78>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
   14a16:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   14a1a:	f8d0 118c 	ldr.w	r1, [r0, #396]	; 0x18c
   14a1e:	6a1d      	ldr	r5, [r3, #32]
   14a20:	4029      	ands	r1, r5
   14a22:	6359      	str	r1, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
   14a24:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
   14a28:	7cd9      	ldrb	r1, [r3, #19]
   14a2a:	f011 0f10 	tst.w	r1, #16
   14a2e:	d008      	beq.n	14a42 <SdSpiArduinoDriver::activate()+0x92>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
   14a30:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   14a34:	f8d0 1190 	ldr.w	r1, [r0, #400]	; 0x190
   14a38:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   14a3a:	4029      	ands	r1, r5
   14a3c:	6399      	str	r1, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
   14a3e:	f8c0 1190 	str.w	r1, [r0, #400]	; 0x190
			__enable_irq();
   14a42:	b662      	cpsie	i
		if (settings.clock() != _clock) {
   14a44:	6899      	ldr	r1, [r3, #8]
   14a46:	428a      	cmp	r2, r1
   14a48:	d025      	beq.n	14a96 <SdSpiArduinoDriver::activate()+0xe6>
		    _clock = settings.clock();
   14a4a:	609a      	str	r2, [r3, #8]
			uint32_t cbcmr = CCM_CBCMR;
   14a4c:	4920      	ldr	r1, [pc, #128]	; (14ad0 <SdSpiArduinoDriver::activate()+0x120>)
   14a4e:	6989      	ldr	r1, [r1, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
   14a50:	f3c1 1501 	ubfx	r5, r1, #4, #2
   14a54:	481f      	ldr	r0, [pc, #124]	; (14ad4 <SdSpiArduinoDriver::activate()+0x124>)
   14a56:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
   14a5a:	f3c1 6182 	ubfx	r1, r1, #26, #3
   14a5e:	3101      	adds	r1, #1
   14a60:	fbb5 f0f1 	udiv	r0, r5, r1
			d = _clock ? clkhz/_clock : clkhz;
   14a64:	b37a      	cbz	r2, 14ac6 <SdSpiArduinoDriver::activate()+0x116>
			if (d && clkhz/d > _clock) d++;
   14a66:	4282      	cmp	r2, r0
   14a68:	d82b      	bhi.n	14ac2 <SdSpiArduinoDriver::activate()+0x112>
			d = _clock ? clkhz/_clock : clkhz;
   14a6a:	fbb0 f1f2 	udiv	r1, r0, r2
			if (d && clkhz/d > _clock) d++;
   14a6e:	fbb0 f0f1 	udiv	r0, r0, r1
   14a72:	4282      	cmp	r2, r0
   14a74:	d31f      	bcc.n	14ab6 <SdSpiArduinoDriver::activate()+0x106>
			if (d > 257) d= 257;  // max div
   14a76:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   14a7a:	d31e      	bcc.n	14aba <SdSpiArduinoDriver::activate()+0x10a>
   14a7c:	f240 1101 	movw	r1, #257	; 0x101
				div = d-2;
   14a80:	1e8a      	subs	r2, r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
   14a82:	0850      	lsrs	r0, r2, #1
   14a84:	0201      	lsls	r1, r0, #8
   14a86:	b289      	uxth	r1, r1
   14a88:	0400      	lsls	r0, r0, #16
   14a8a:	f400 007f 	and.w	r0, r0, #16711680	; 0xff0000
   14a8e:	4301      	orrs	r1, r0
   14a90:	b2d2      	uxtb	r2, r2
   14a92:	430a      	orrs	r2, r1
   14a94:	60da      	str	r2, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14a96:	681a      	ldr	r2, [r3, #0]
		port().CR = 0;
   14a98:	2100      	movs	r1, #0
   14a9a:	6111      	str	r1, [r2, #16]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14a9c:	681a      	ldr	r2, [r3, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
   14a9e:	2103      	movs	r1, #3
   14aa0:	6251      	str	r1, [r2, #36]	; 0x24
		port().CCR = _ccr;
   14aa2:	68d9      	ldr	r1, [r3, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14aa4:	681a      	ldr	r2, [r3, #0]
		port().CCR = _ccr;
   14aa6:	6411      	str	r1, [r2, #64]	; 0x40
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14aa8:	681a      	ldr	r2, [r3, #0]
		port().TCR = settings.tcr;
   14aaa:	6614      	str	r4, [r2, #96]	; 0x60
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14aac:	681b      	ldr	r3, [r3, #0]
		port().CR = LPSPI_CR_MEN;
   14aae:	2201      	movs	r2, #1
   14ab0:	611a      	str	r2, [r3, #16]
}
   14ab2:	bc30      	pop	{r4, r5}
   14ab4:	4770      	bx	lr
			d = _clock ? clkhz/_clock : clkhz;
   14ab6:	4608      	mov	r0, r1
   14ab8:	e007      	b.n	14aca <SdSpiArduinoDriver::activate()+0x11a>
			if (d > 2) {
   14aba:	2902      	cmp	r1, #2
   14abc:	d8e0      	bhi.n	14a80 <SdSpiArduinoDriver::activate()+0xd0>
				div =0;
   14abe:	2200      	movs	r2, #0
   14ac0:	e7df      	b.n	14a82 <SdSpiArduinoDriver::activate()+0xd2>
   14ac2:	2200      	movs	r2, #0
   14ac4:	e7dd      	b.n	14a82 <SdSpiArduinoDriver::activate()+0xd2>
			if (d && clkhz/d > _clock) d++;
   14ac6:	428d      	cmp	r5, r1
   14ac8:	d3db      	bcc.n	14a82 <SdSpiArduinoDriver::activate()+0xd2>
   14aca:	1c41      	adds	r1, r0, #1
   14acc:	e7d3      	b.n	14a76 <SdSpiArduinoDriver::activate()+0xc6>
   14ace:	bf00      	nop
   14ad0:	400fc000 	.word	0x400fc000
   14ad4:	200029c8 	.word	0x200029c8

00014ad8 <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
   14ad8:	b500      	push	{lr}
   14ada:	b085      	sub	sp, #20
   14adc:	4684      	mov	ip, r0
   14ade:	a804      	add	r0, sp, #16
   14ae0:	e900 000e 	stmdb	r0, {r1, r2, r3}
   14ae4:	4618      	mov	r0, r3
  if (spiConfig.spiPort) {
   14ae6:	b133      	cbz	r3, 14af6 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x1e>
   14ae8:	f8cc 0000 	str.w	r0, [ip]
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
   14aec:	f7f7 fcc6 	bl	c47c <SPIClass::begin()>
}
   14af0:	b005      	add	sp, #20
   14af2:	f85d fb04 	ldr.w	pc, [sp], #4
    m_spi = &SPI;
   14af6:	4801      	ldr	r0, [pc, #4]	; (14afc <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
   14af8:	e7f6      	b.n	14ae8 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x10>
   14afa:	bf00      	nop
   14afc:	20004e24 	.word	0x20004e24

00014b00 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
   14b00:	6803      	ldr	r3, [r0, #0]
		if (interruptMasksUsed) {
   14b02:	7cda      	ldrb	r2, [r3, #19]
   14b04:	b35a      	cbz	r2, 14b5e <SdSpiArduinoDriver::deactivate()+0x5e>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   14b06:	f012 0f01 	tst.w	r2, #1
   14b0a:	d004      	beq.n	14b16 <SdSpiArduinoDriver::deactivate()+0x16>
   14b0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
   14b0e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14b12:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   14b16:	7cda      	ldrb	r2, [r3, #19]
   14b18:	f012 0f02 	tst.w	r2, #2
   14b1c:	d004      	beq.n	14b28 <SdSpiArduinoDriver::deactivate()+0x28>
   14b1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   14b20:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14b24:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   14b28:	7cda      	ldrb	r2, [r3, #19]
   14b2a:	f012 0f04 	tst.w	r2, #4
   14b2e:	d004      	beq.n	14b3a <SdSpiArduinoDriver::deactivate()+0x3a>
   14b30:	6b19      	ldr	r1, [r3, #48]	; 0x30
   14b32:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14b36:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   14b3a:	7cda      	ldrb	r2, [r3, #19]
   14b3c:	f012 0f08 	tst.w	r2, #8
   14b40:	d004      	beq.n	14b4c <SdSpiArduinoDriver::deactivate()+0x4c>
   14b42:	6b59      	ldr	r1, [r3, #52]	; 0x34
   14b44:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   14b48:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   14b4c:	7cda      	ldrb	r2, [r3, #19]
   14b4e:	f012 0f10 	tst.w	r2, #16
   14b52:	d004      	beq.n	14b5e <SdSpiArduinoDriver::deactivate()+0x5e>
   14b54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   14b56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   14b5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   14b5e:	4770      	bx	lr

00014b60 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
   14b60:	b508      	push	{r3, lr}
  m_spi->end();
   14b62:	6800      	ldr	r0, [r0, #0]
   14b64:	f7f7 fe03 	bl	c76e <SPIClass::end()>
}
   14b68:	bd08      	pop	{r3, pc}

00014b6a <SdSpiArduinoDriver::receive()>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
   14b6a:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14b6c:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   14b6e:	21ff      	movs	r1, #255	; 0xff
   14b70:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14b72:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   14b74:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   14b76:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14b7a:	d0fb      	beq.n	14b74 <SdSpiArduinoDriver::receive()+0xa>
   14b7c:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
   14b7e:	b2c0      	uxtb	r0, r0
   14b80:	4770      	bx	lr

00014b82 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
   14b82:	b570      	push	{r4, r5, r6, lr}
   14b84:	4605      	mov	r5, r0
   14b86:	460c      	mov	r4, r1
   14b88:	4616      	mov	r6, r2
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
   14b8a:	21ff      	movs	r1, #255	; 0xff
   14b8c:	4620      	mov	r0, r4
   14b8e:	f00e fa63 	bl	23058 <memset>
		transfer(buf, buf, count);
   14b92:	4633      	mov	r3, r6
   14b94:	4622      	mov	r2, r4
   14b96:	4621      	mov	r1, r4
   14b98:	6828      	ldr	r0, [r5, #0]
   14b9a:	f7f7 fda9 	bl	c6f0 <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
   14b9e:	2000      	movs	r0, #0
   14ba0:	bd70      	pop	{r4, r5, r6, pc}

00014ba2 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
   14ba2:	6803      	ldr	r3, [r0, #0]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14ba4:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   14ba6:	6651      	str	r1, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14ba8:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   14baa:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   14bac:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14bb0:	d0fb      	beq.n	14baa <SdSpiArduinoDriver::send(unsigned char)+0x8>
   14bb2:	6f53      	ldr	r3, [r2, #116]	; 0x74
}
   14bb4:	4770      	bx	lr

00014bb6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
   14bb6:	b530      	push	{r4, r5, lr}
   14bb8:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
   14bbc:	4604      	mov	r4, r0
   14bbe:	4615      	mov	r5, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
   14bc0:	1e53      	subs	r3, r2, #1
   14bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   14bc6:	d313      	bcc.n	14bf0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x3a>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
   14bc8:	b17a      	cbz	r2, 14bea <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>
   14bca:	3901      	subs	r1, #1
   14bcc:	eb01 0c02 	add.w	ip, r1, r2
    m_spi->transfer(buf[i]);
   14bd0:	6823      	ldr	r3, [r4, #0]
		port().TDR = data;
   14bd2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14bd6:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   14bd8:	6650      	str	r0, [r2, #100]	; 0x64
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14bda:	681a      	ldr	r2, [r3, #0]
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   14bdc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   14bde:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14be2:	d0fb      	beq.n	14bdc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x26>
   14be4:	6f53      	ldr	r3, [r2, #116]	; 0x74
  for (size_t i = 0; i < count; i++) {
   14be6:	4561      	cmp	r1, ip
   14be8:	d1f2      	bne.n	14bd0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1a>
  }
}
   14bea:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   14bee:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
   14bf0:	4668      	mov	r0, sp
   14bf2:	f002 fb7d 	bl	172f0 <memcpy>
		transfer(buf, buf, count);
   14bf6:	462b      	mov	r3, r5
   14bf8:	466a      	mov	r2, sp
   14bfa:	4669      	mov	r1, sp
   14bfc:	6820      	ldr	r0, [r4, #0]
   14bfe:	f7f7 fd77 	bl	c6f0 <SPIClass::transfer(void const*, void*, unsigned int)>
    return;
   14c02:	e7f2      	b.n	14bea <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x34>

00014c04 <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
   14c04:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   14c06:	7803      	ldrb	r3, [r0, #0]
   14c08:	f013 0f01 	tst.w	r3, #1
   14c0c:	d01c      	beq.n	14c48 <FsCache::sync()+0x44>
   14c0e:	4604      	mov	r4, r0
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
   14c10:	6840      	ldr	r0, [r0, #4]
   14c12:	f104 0610 	add.w	r6, r4, #16
   14c16:	6803      	ldr	r3, [r0, #0]
   14c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14c1a:	4632      	mov	r2, r6
   14c1c:	68e1      	ldr	r1, [r4, #12]
   14c1e:	4798      	blx	r3
   14c20:	4605      	mov	r5, r0
   14c22:	b190      	cbz	r0, 14c4a <FsCache::sync()+0x46>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   14c24:	7823      	ldrb	r3, [r4, #0]
   14c26:	f013 0f02 	tst.w	r3, #2
   14c2a:	d008      	beq.n	14c3e <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
   14c2c:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
   14c2e:	68a1      	ldr	r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
   14c30:	6803      	ldr	r3, [r0, #0]
   14c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14c34:	4632      	mov	r2, r6
   14c36:	68e6      	ldr	r6, [r4, #12]
   14c38:	4431      	add	r1, r6
   14c3a:	4798      	blx	r3
   14c3c:	b138      	cbz	r0, 14c4e <FsCache::sync()+0x4a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   14c3e:	7823      	ldrb	r3, [r4, #0]
   14c40:	f023 0301 	bic.w	r3, r3, #1
   14c44:	7023      	strb	r3, [r4, #0]
   14c46:	e000      	b.n	14c4a <FsCache::sync()+0x46>
  }
  return true;
   14c48:	2501      	movs	r5, #1

 fail:
  return false;
}
   14c4a:	4628      	mov	r0, r5
   14c4c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   14c4e:	4605      	mov	r5, r0
   14c50:	e7fb      	b.n	14c4a <FsCache::sync()+0x46>

00014c52 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
   14c52:	b570      	push	{r4, r5, r6, lr}
   14c54:	4604      	mov	r4, r0
  if (!m_blockDev) {
   14c56:	6840      	ldr	r0, [r0, #4]
   14c58:	b158      	cbz	r0, 14c72 <FsCache::prepare(unsigned long, unsigned char)+0x20>
   14c5a:	460e      	mov	r6, r1
   14c5c:	4615      	mov	r5, r2
  if (m_sector != sector) {
   14c5e:	68e3      	ldr	r3, [r4, #12]
   14c60:	428b      	cmp	r3, r1
   14c62:	d107      	bne.n	14c74 <FsCache::prepare(unsigned long, unsigned char)+0x22>
  m_status |= option & CACHE_STATUS_MASK;
   14c64:	f005 0503 	and.w	r5, r5, #3
   14c68:	7823      	ldrb	r3, [r4, #0]
   14c6a:	432b      	orrs	r3, r5
   14c6c:	4620      	mov	r0, r4
   14c6e:	f800 3b10 	strb.w	r3, [r0], #16
}
   14c72:	bd70      	pop	{r4, r5, r6, pc}
    if (!sync()) {
   14c74:	4620      	mov	r0, r4
   14c76:	f7ff ffc5 	bl	14c04 <FsCache::sync()>
   14c7a:	b170      	cbz	r0, 14c9a <FsCache::prepare(unsigned long, unsigned char)+0x48>
    if (!(option & CACHE_OPTION_NO_READ)) {
   14c7c:	f015 0f04 	tst.w	r5, #4
   14c80:	d107      	bne.n	14c92 <FsCache::prepare(unsigned long, unsigned char)+0x40>
      if (!m_blockDev->readSector(sector, m_buffer)) {
   14c82:	6860      	ldr	r0, [r4, #4]
   14c84:	6803      	ldr	r3, [r0, #0]
   14c86:	691b      	ldr	r3, [r3, #16]
   14c88:	f104 0210 	add.w	r2, r4, #16
   14c8c:	4631      	mov	r1, r6
   14c8e:	4798      	blx	r3
   14c90:	b128      	cbz	r0, 14c9e <FsCache::prepare(unsigned long, unsigned char)+0x4c>
    m_status = 0;
   14c92:	2300      	movs	r3, #0
   14c94:	7023      	strb	r3, [r4, #0]
    m_sector = sector;
   14c96:	60e6      	str	r6, [r4, #12]
   14c98:	e7e4      	b.n	14c64 <FsCache::prepare(unsigned long, unsigned char)+0x12>
  return nullptr;
   14c9a:	2000      	movs	r0, #0
   14c9c:	e7e9      	b.n	14c72 <FsCache::prepare(unsigned long, unsigned char)+0x20>
   14c9e:	2000      	movs	r0, #0
   14ca0:	e7e7      	b.n	14c72 <FsCache::prepare(unsigned long, unsigned char)+0x20>
	...

00014ca4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
static void dateTimeMs10(uint16_t* date, uint16_t* time, uint8_t* ms10) {
   14ca4:	b508      	push	{r3, lr}
  *ms10 = 0;
   14ca6:	2300      	movs	r3, #0
   14ca8:	7013      	strb	r3, [r2, #0]
  FsDateTime::callback2(date, time);
   14caa:	4b02      	ldr	r3, [pc, #8]	; (14cb4 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
   14cac:	681b      	ldr	r3, [r3, #0]
   14cae:	4798      	blx	r3
}
   14cb0:	bd08      	pop	{r3, pc}
   14cb2:	bf00      	nop
   14cb4:	20006d40 	.word	0x20006d40

00014cb8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
    callback = dateTimeMs10;
   14cb8:	4b02      	ldr	r3, [pc, #8]	; (14cc4 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
   14cba:	4a03      	ldr	r2, [pc, #12]	; (14cc8 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
   14cbc:	601a      	str	r2, [r3, #0]
    callback2 = dateTime;
   14cbe:	4b03      	ldr	r3, [pc, #12]	; (14ccc <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
   14cc0:	6018      	str	r0, [r3, #0]
  }
   14cc2:	4770      	bx	lr
   14cc4:	20006d3c 	.word	0x20006d3c
   14cc8:	00014ca5 	.word	0x00014ca5
   14ccc:	20006d40 	.word	0x20006d40

00014cd0 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
   14cd0:	b510      	push	{r4, lr}
   14cd2:	b082      	sub	sp, #8
   14cd4:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
   14cd6:	8980      	ldrh	r0, [r0, #12]
   14cd8:	b118      	cbz	r0, 14ce2 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
   14cda:	2300      	movs	r3, #0
   14cdc:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
   14cde:	b002      	add	sp, #8
   14ce0:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
   14ce2:	6863      	ldr	r3, [r4, #4]
   14ce4:	68a1      	ldr	r1, [r4, #8]
   14ce6:	428b      	cmp	r3, r1
   14ce8:	d2f9      	bcs.n	14cde <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
   14cea:	aa01      	add	r2, sp, #4
   14cec:	4618      	mov	r0, r3
   14cee:	f000 f8b9 	bl	14e64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
   14cf2:	b130      	cbz	r0, 14d02 <FsName::get16()+0x32>
    next = ptr;
   14cf4:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
   14cf6:	9801      	ldr	r0, [sp, #4]
   14cf8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   14cfc:	d204      	bcs.n	14d08 <FsName::get16()+0x38>
      rtn = cp;
   14cfe:	b280      	uxth	r0, r0
   14d00:	e7ed      	b.n	14cde <FsName::get16()+0xe>
  return 0XFFFF;
   14d02:	f64f 70ff 	movw	r0, #65535	; 0xffff
   14d06:	e7ea      	b.n	14cde <FsName::get16()+0xe>
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
   14d08:	f3c0 0309 	ubfx	r3, r0, #0, #10
   14d0c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
      ls = FsUtf::lowSurrogate(cp);
   14d10:	81a3      	strh	r3, [r4, #12]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14d12:	0a80      	lsrs	r0, r0, #10
   14d14:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
   14d18:	b280      	uxth	r0, r0
   14d1a:	e7e0      	b.n	14cde <FsName::get16()+0xe>

00014d1c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsStructs.h"
// bgnLba = relSector;
// endLba = relSector + partSize - 1;
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
   14d1c:	b500      	push	{lr}
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14d1e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   14d22:	d82e      	bhi.n	14d82 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x66>
  if (capacityMB <= 16) {
   14d24:	2910      	cmp	r1, #16
   14d26:	d81f      	bhi.n	14d68 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4c>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14d28:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 2;
   14d2c:	2102      	movs	r1, #2
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
   14d2e:	fb0e f101 	mul.w	r1, lr, r1
   14d32:	fbb2 fcf1 	udiv	ip, r2, r1
  if (c <= 1023) {
   14d36:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
   14d3a:	d23f      	bcs.n	14dbc <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0xa0>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   14d3c:	fb01 231c 	mls	r3, r1, ip, r2
   14d40:	fbb3 f3fe 	udiv	r3, r3, lr
   14d44:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
   14d46:	fbb2 f1fe 	udiv	r1, r2, lr
   14d4a:	fb0e 2211 	mls	r2, lr, r1, r2
   14d4e:	3201      	adds	r2, #1
   14d50:	b2d2      	uxtb	r2, r2
  } else {
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
   14d52:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
   14d54:	ea4f 039c 	mov.w	r3, ip, lsr #2
   14d58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   14d5c:	431a      	orrs	r2, r3
   14d5e:	7042      	strb	r2, [r0, #1]
  chs[2] = c;
   14d60:	f880 c002 	strb.w	ip, [r0, #2]
}
   14d64:	f85d fb04 	ldr.w	pc, [sp], #4
  } else if (capacityMB <= 32) {
   14d68:	2920      	cmp	r1, #32
   14d6a:	d803      	bhi.n	14d74 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x58>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14d6c:	f04f 0e20 	mov.w	lr, #32
    numberOfHeads = 4;
   14d70:	2104      	movs	r1, #4
   14d72:	e7dc      	b.n	14d2e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14d74:	f04f 0e20 	mov.w	lr, #32
   14d78:	2980      	cmp	r1, #128	; 0x80
   14d7a:	bf8c      	ite	hi
   14d7c:	2110      	movhi	r1, #16
   14d7e:	2108      	movls	r1, #8
   14d80:	e7d5      	b.n	14d2e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  } else if (capacityMB <= 504) {
   14d82:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
   14d86:	d90d      	bls.n	14da4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 1008) {
   14d88:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
   14d8c:	d90e      	bls.n	14dac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x90>
  } else if (capacityMB <= 2016) {
   14d8e:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
   14d92:	d90f      	bls.n	14db4 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x98>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14d94:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   14d98:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
   14d9c:	bf94      	ite	ls
   14d9e:	2180      	movls	r1, #128	; 0x80
   14da0:	21ff      	movhi	r1, #255	; 0xff
   14da2:	e7c4      	b.n	14d2e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
   14da4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 16;
   14da8:	2110      	movs	r1, #16
   14daa:	e7c0      	b.n	14d2e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14dac:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 32;
   14db0:	2120      	movs	r1, #32
   14db2:	e7bc      	b.n	14d2e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14db4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
    numberOfHeads = 64;
   14db8:	2140      	movs	r1, #64	; 0x40
   14dba:	e7b8      	b.n	14d2e <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x12>
    s = 63;
   14dbc:	223f      	movs	r2, #63	; 0x3f
    h = 254;
   14dbe:	23fe      	movs	r3, #254	; 0xfe
    c = 1023;
   14dc0:	f240 3cff 	movw	ip, #1023	; 0x3ff
   14dc4:	e7c5      	b.n	14d52 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x36>

00014dc6 <FsUtf::cpToMb(unsigned long, char*, char*)>:
  char* cpToMb(uint32_t cp, char* str, char* end) {
   14dc6:	4603      	mov	r3, r0
    size_t n = end - str;
   14dc8:	1a52      	subs	r2, r2, r1
    if (cp < 0X80) {
   14dca:	287f      	cmp	r0, #127	; 0x7f
   14dcc:	d805      	bhi.n	14dda <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
   14dce:	2a00      	cmp	r2, #0
   14dd0:	d040      	beq.n	14e54 <FsUtf::cpToMb(unsigned long, char*, char*)+0x8e>
      *(str++) = static_cast<uint8_t>(cp);
   14dd2:	4608      	mov	r0, r1
   14dd4:	f800 3b01 	strb.w	r3, [r0], #1
   14dd8:	4770      	bx	lr
    } else if (cp < 0X800) {
   14dda:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14dde:	d20d      	bcs.n	14dfc <FsUtf::cpToMb(unsigned long, char*, char*)+0x36>
      if (n < 2) goto fail;
   14de0:	2a01      	cmp	r2, #1
   14de2:	d939      	bls.n	14e58 <FsUtf::cpToMb(unsigned long, char*, char*)+0x92>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   14de4:	0982      	lsrs	r2, r0, #6
   14de6:	f062 023f 	orn	r2, r2, #63	; 0x3f
   14dea:	4608      	mov	r0, r1
   14dec:	f800 2b02 	strb.w	r2, [r0], #2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14df4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14df8:	704b      	strb	r3, [r1, #1]
   14dfa:	4770      	bx	lr
    } else if (cp < 0X10000) {
   14dfc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   14e00:	d211      	bcs.n	14e26 <FsUtf::cpToMb(unsigned long, char*, char*)+0x60>
      if (n < 3) goto fail;
   14e02:	2a02      	cmp	r2, #2
   14e04:	d92a      	bls.n	14e5c <FsUtf::cpToMb(unsigned long, char*, char*)+0x96>
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   14e06:	0b02      	lsrs	r2, r0, #12
   14e08:	f062 021f 	orn	r2, r2, #31
   14e0c:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14e0e:	f3c0 1285 	ubfx	r2, r0, #6, #6
   14e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e16:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14e18:	1cc8      	adds	r0, r1, #3
   14e1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14e22:	708b      	strb	r3, [r1, #2]
   14e24:	4770      	bx	lr
       if (n < 4) goto fail;
   14e26:	2a03      	cmp	r2, #3
   14e28:	d91a      	bls.n	14e60 <FsUtf::cpToMb(unsigned long, char*, char*)+0x9a>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   14e2a:	0c82      	lsrs	r2, r0, #18
   14e2c:	f062 020f 	orn	r2, r2, #15
   14e30:	700a      	strb	r2, [r1, #0]
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   14e32:	f3c0 3205 	ubfx	r2, r0, #12, #6
   14e36:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e3a:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14e3c:	f3c0 1285 	ubfx	r2, r0, #6, #6
   14e40:	f062 027f 	orn	r2, r2, #127	; 0x7f
   14e44:	708a      	strb	r2, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14e46:	1d08      	adds	r0, r1, #4
   14e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   14e50:	70cb      	strb	r3, [r1, #3]
   14e52:	4770      	bx	lr
    return nullptr;
   14e54:	2000      	movs	r0, #0
   14e56:	4770      	bx	lr
   14e58:	2000      	movs	r0, #0
   14e5a:	4770      	bx	lr
   14e5c:	2000      	movs	r0, #0
   14e5e:	4770      	bx	lr
   14e60:	2000      	movs	r0, #0
  }
   14e62:	4770      	bx	lr

00014e64 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
   14e64:	4288      	cmp	r0, r1
   14e66:	d242      	bcs.n	14eee <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8a>
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
   14e68:	b510      	push	{r4, lr}
   14e6a:	4603      	mov	r3, r0
    uint8_t ch = str[0];
   14e6c:	7804      	ldrb	r4, [r0, #0]
    if ((ch & 0X80) == 0) {
   14e6e:	f990 0000 	ldrsb.w	r0, [r0]
   14e72:	2800      	cmp	r0, #0
   14e74:	da10      	bge.n	14e98 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x34>
    if ((ch & 0XE0) == 0XC0) {
   14e76:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
   14e7a:	28c0      	cmp	r0, #192	; 0xc0
   14e7c:	d00f      	beq.n	14e9e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x3a>
    } else if ((ch & 0XF0) == 0XE0) {
   14e7e:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
   14e82:	28e0      	cmp	r0, #224	; 0xe0
   14e84:	d02e      	beq.n	14ee4 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
    } else if ((ch & 0XF8) == 0XF0) {
   14e86:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
   14e8a:	28f0      	cmp	r0, #240	; 0xf0
   14e8c:	d131      	bne.n	14ef2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8e>
      cp = ch & 0X07;
   14e8e:	f004 0407 	and.w	r4, r4, #7
      n = 4;
   14e92:	f04f 0c04 	mov.w	ip, #4
   14e96:	e006      	b.n	14ea6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      *rtn = ch;
   14e98:	6014      	str	r4, [r2, #0]
      return str + 1;
   14e9a:	1c58      	adds	r0, r3, #1
  }
   14e9c:	bd10      	pop	{r4, pc}
      cp = ch & 0X1F;
   14e9e:	f004 041f 	and.w	r4, r4, #31
      n = 2;
   14ea2:	f04f 0c02 	mov.w	ip, #2
    if ((str + n) > end) {
   14ea6:	eb03 000c 	add.w	r0, r3, ip
   14eaa:	4288      	cmp	r0, r1
   14eac:	d823      	bhi.n	14ef6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x92>
   14eae:	1c59      	adds	r1, r3, #1
   14eb0:	4684      	mov	ip, r0
      ch = str[i];
   14eb2:	f811 3b01 	ldrb.w	r3, [r1], #1
      if ((ch & 0XC0) != 0X80) {
   14eb6:	f003 0ec0 	and.w	lr, r3, #192	; 0xc0
   14eba:	f1be 0f80 	cmp.w	lr, #128	; 0x80
   14ebe:	d11c      	bne.n	14efa <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x96>
      cp |= ch & 0X3F;
   14ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   14ec4:	ea43 1484 	orr.w	r4, r3, r4, lsl #6
    for (size_t i = 1; i < n; i++) {
   14ec8:	4561      	cmp	r1, ip
   14eca:	d1f2      	bne.n	14eb2 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x4e>
    if (cp < 0X80 || !isValidCp(cp)) {
   14ecc:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
   14ed0:	4b0d      	ldr	r3, [pc, #52]	; (14f08 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0xa4>)
   14ed2:	4299      	cmp	r1, r3
   14ed4:	d813      	bhi.n	14efe <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9a>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
   14ed6:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
   14eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   14ede:	d310      	bcc.n	14f02 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x9e>
    *rtn = cp;
   14ee0:	6014      	str	r4, [r2, #0]
    return str + n;
   14ee2:	e7db      	b.n	14e9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      cp = ch & 0X0F;
   14ee4:	f004 040f 	and.w	r4, r4, #15
      n = 3;
   14ee8:	f04f 0c03 	mov.w	ip, #3
   14eec:	e7db      	b.n	14ea6 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x42>
      return nullptr;
   14eee:	2000      	movs	r0, #0
  }
   14ef0:	4770      	bx	lr
      return nullptr;
   14ef2:	2000      	movs	r0, #0
   14ef4:	e7d2      	b.n	14e9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
   14ef6:	2000      	movs	r0, #0
   14ef8:	e7d0      	b.n	14e9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
        return nullptr;
   14efa:	2000      	movs	r0, #0
   14efc:	e7ce      	b.n	14e9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
      return nullptr;
   14efe:	2000      	movs	r0, #0
   14f00:	e7cc      	b.n	14e9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
   14f02:	2000      	movs	r0, #0
   14f04:	e7ca      	b.n	14e9c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
   14f06:	bf00      	nop
   14f08:	0010ff7f 	.word	0x0010ff7f

00014f0c <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
   14f0c:	287e      	cmp	r0, #126	; 0x7e
   14f0e:	d80c      	bhi.n	14f2a <toUpcase(unsigned short)+0x1e>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
   14f10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   14f14:	b29b      	uxth	r3, r3
   14f16:	2b19      	cmp	r3, #25
   14f18:	bf8c      	ite	hi
   14f1a:	2300      	movhi	r3, #0
   14f1c:	2301      	movls	r3, #1
   14f1e:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
   14f22:	b298      	uxth	r0, r3
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
   14f24:	4770      	bx	lr
    mid = left + (right - left)/2;
   14f26:	469c      	mov	ip, r3
   14f28:	e004      	b.n	14f34 <toUpcase(unsigned short)+0x28>
uint16_t toUpcase(uint16_t chr) {
   14f2a:	b430      	push	{r4, r5}
  size_t right = size;
   14f2c:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
   14f30:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
   14f32:	4c27      	ldr	r4, [pc, #156]	; (14fd0 <toUpcase(unsigned short)+0xc4>)
  while (right - left > 1) {
   14f34:	ebac 0302 	sub.w	r3, ip, r2
   14f38:	2b01      	cmp	r3, #1
   14f3a:	d907      	bls.n	14f4c <toUpcase(unsigned short)+0x40>
    mid = left + (right - left)/2;
   14f3c:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
   14f40:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
   14f44:	4281      	cmp	r1, r0
   14f46:	d8ee      	bhi.n	14f26 <toUpcase(unsigned short)+0x1a>
    mid = left + (right - left)/2;
   14f48:	461a      	mov	r2, r3
   14f4a:	e7f3      	b.n	14f34 <toUpcase(unsigned short)+0x28>
  first = readTable16(mapTable[i].base);
   14f4c:	b292      	uxth	r2, r2
   14f4e:	4b20      	ldr	r3, [pc, #128]	; (14fd0 <toUpcase(unsigned short)+0xc4>)
   14f50:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
   14f54:	4298      	cmp	r0, r3
   14f56:	d31d      	bcc.n	14f94 <toUpcase(unsigned short)+0x88>
   14f58:	1ac1      	subs	r1, r0, r3
   14f5a:	4c1d      	ldr	r4, [pc, #116]	; (14fd0 <toUpcase(unsigned short)+0xc4>)
   14f5c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   14f60:	78e4      	ldrb	r4, [r4, #3]
   14f62:	42a1      	cmp	r1, r4
   14f64:	da19      	bge.n	14f9a <toUpcase(unsigned short)+0x8e>
    int8_t off = readTable8(mapTable[i].off);
   14f66:	491a      	ldr	r1, [pc, #104]	; (14fd0 <toUpcase(unsigned short)+0xc4>)
   14f68:	eb01 0282 	add.w	r2, r1, r2, lsl #2
   14f6c:	f992 2002 	ldrsb.w	r2, [r2, #2]
    if (off == 1) {
   14f70:	2a01      	cmp	r2, #1
   14f72:	d004      	beq.n	14f7e <toUpcase(unsigned short)+0x72>
    return chr + (off ? off : -0x1C60);
   14f74:	b14a      	cbz	r2, 14f8a <toUpcase(unsigned short)+0x7e>
   14f76:	b293      	uxth	r3, r2
   14f78:	4403      	add	r3, r0
   14f7a:	b298      	uxth	r0, r3
   14f7c:	e021      	b.n	14fc2 <toUpcase(unsigned short)+0xb6>
      return chr - ((chr - first) & 1);
   14f7e:	1ac3      	subs	r3, r0, r3
   14f80:	f003 0301 	and.w	r3, r3, #1
   14f84:	1ac3      	subs	r3, r0, r3
   14f86:	b298      	uxth	r0, r3
   14f88:	e01b      	b.n	14fc2 <toUpcase(unsigned short)+0xb6>
    return chr + (off ? off : -0x1C60);
   14f8a:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
   14f8e:	e7f3      	b.n	14f78 <toUpcase(unsigned short)+0x6c>
    mid = left + (right - left)/2;
   14f90:	461c      	mov	r4, r3
   14f92:	e005      	b.n	14fa0 <toUpcase(unsigned short)+0x94>
   14f94:	244b      	movs	r4, #75	; 0x4b
   14f96:	2200      	movs	r2, #0
   14f98:	e001      	b.n	14f9e <toUpcase(unsigned short)+0x92>
   14f9a:	244b      	movs	r4, #75	; 0x4b
   14f9c:	2200      	movs	r2, #0
    if (readTable16(table[mid].key) <= key) {
   14f9e:	4d0d      	ldr	r5, [pc, #52]	; (14fd4 <toUpcase(unsigned short)+0xc8>)
  while (right - left > 1) {
   14fa0:	1aa3      	subs	r3, r4, r2
   14fa2:	2b01      	cmp	r3, #1
   14fa4:	d907      	bls.n	14fb6 <toUpcase(unsigned short)+0xaa>
    mid = left + (right - left)/2;
   14fa6:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    if (readTable16(table[mid].key) <= key) {
   14faa:	f835 1023 	ldrh.w	r1, [r5, r3, lsl #2]
   14fae:	4281      	cmp	r1, r0
   14fb0:	d8ee      	bhi.n	14f90 <toUpcase(unsigned short)+0x84>
    mid = left + (right - left)/2;
   14fb2:	461a      	mov	r2, r3
   14fb4:	e7f4      	b.n	14fa0 <toUpcase(unsigned short)+0x94>
  if (readTable16(lookupTable[i].key) == chr) {
   14fb6:	b292      	uxth	r2, r2
   14fb8:	4b06      	ldr	r3, [pc, #24]	; (14fd4 <toUpcase(unsigned short)+0xc8>)
   14fba:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
   14fbe:	4283      	cmp	r3, r0
   14fc0:	d001      	beq.n	14fc6 <toUpcase(unsigned short)+0xba>
}
   14fc2:	bc30      	pop	{r4, r5}
   14fc4:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
   14fc6:	4b03      	ldr	r3, [pc, #12]	; (14fd4 <toUpcase(unsigned short)+0xc8>)
   14fc8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   14fcc:	8858      	ldrh	r0, [r3, #2]
   14fce:	e7f8      	b.n	14fc2 <toUpcase(unsigned short)+0xb6>
   14fd0:	20002064 	.word	0x20002064
   14fd4:	20000ff8 	.word	0x20000ff8

00014fd8 <Switch::pushed()>:

bool Switch::switched() { return _switched; }

bool Switch::on() { return !(debounced ^ polarity); }

bool Switch::pushed() { return _switched && !(debounced ^ polarity); }
   14fd8:	4603      	mov	r3, r0
   14fda:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
   14fde:	b138      	cbz	r0, 14ff0 <Switch::pushed()+0x18>
   14fe0:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   14fe4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   14fe8:	4298      	cmp	r0, r3
   14fea:	bf14      	ite	ne
   14fec:	2000      	movne	r0, #0
   14fee:	2001      	moveq	r0, #1
   14ff0:	4770      	bx	lr

00014ff2 <Switch::released()>:

bool Switch::released() { return _switched && (debounced ^ polarity); }
   14ff2:	4603      	mov	r3, r0
   14ff4:	f890 002b 	ldrb.w	r0, [r0, #43]	; 0x2b
   14ff8:	b130      	cbz	r0, 15008 <Switch::released()+0x16>
   14ffa:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
   14ffe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   15002:	1ac0      	subs	r0, r0, r3
   15004:	bf18      	it	ne
   15006:	2001      	movne	r0, #1
   15008:	4770      	bx	lr

0001500a <Switch::triggerCallbacks()>:
bool Switch::doubleClick() { return _doubleClick; }

bool Switch::singleClick() { return _singleClick; }

void Switch::triggerCallbacks()
{
   1500a:	b538      	push	{r3, r4, r5, lr}
   1500c:	4604      	mov	r4, r0
    if (_pushedCallback && pushed()) {
   1500e:	6b45      	ldr	r5, [r0, #52]	; 0x34
   15010:	b1d5      	cbz	r5, 15048 <Switch::triggerCallbacks()+0x3e>
   15012:	f7ff ffe1 	bl	14fd8 <Switch::pushed()>
   15016:	b1b8      	cbz	r0, 15048 <Switch::triggerCallbacks()+0x3e>
        _pushedCallback(_pushedCallbackParam);
   15018:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1501a:	47a8      	blx	r5
    } else if (_releasedCallback && released()) {
        _releasedCallback(_releasedCallbackParam);
    }

    if (_longPressCallback && longPress()) {
   1501c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1501e:	b123      	cbz	r3, 1502a <Switch::triggerCallbacks()+0x20>
   15020:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   15024:	b10a      	cbz	r2, 1502a <Switch::triggerCallbacks()+0x20>
        _longPressCallback(_longPressCallbackParam);
   15026:	6d20      	ldr	r0, [r4, #80]	; 0x50
   15028:	4798      	blx	r3
    }

    if (_doubleClickCallback && doubleClick()) {
   1502a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1502c:	b123      	cbz	r3, 15038 <Switch::triggerCallbacks()+0x2e>
   1502e:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   15032:	b10a      	cbz	r2, 15038 <Switch::triggerCallbacks()+0x2e>
        _doubleClickCallback(_doubleClickCallbackParam);
   15034:	6d60      	ldr	r0, [r4, #84]	; 0x54
   15036:	4798      	blx	r3
    }

    if (_singleClickCallback && singleClick()) {
   15038:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1503a:	b123      	cbz	r3, 15046 <Switch::triggerCallbacks()+0x3c>
   1503c:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
   15040:	b10a      	cbz	r2, 15046 <Switch::triggerCallbacks()+0x3c>
        _singleClickCallback(_singleClickCallbackParam);
   15042:	6da0      	ldr	r0, [r4, #88]	; 0x58
   15044:	4798      	blx	r3
    }
}
   15046:	bd38      	pop	{r3, r4, r5, pc}
    } else if (_releasedCallback && released()) {
   15048:	6ba5      	ldr	r5, [r4, #56]	; 0x38
   1504a:	2d00      	cmp	r5, #0
   1504c:	d0e6      	beq.n	1501c <Switch::triggerCallbacks()+0x12>
   1504e:	4620      	mov	r0, r4
   15050:	f7ff ffcf 	bl	14ff2 <Switch::released()>
   15054:	2800      	cmp	r0, #0
   15056:	d0e1      	beq.n	1501c <Switch::triggerCallbacks()+0x12>
        _releasedCallback(_releasedCallbackParam);
   15058:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1505a:	47a8      	blx	r5
   1505c:	e7de      	b.n	1501c <Switch::triggerCallbacks()+0x12>
	...

00015060 <Switch::process()>:
{
   15060:	b538      	push	{r3, r4, r5, lr}
   15062:	4604      	mov	r4, r0
    if (input == lastInput)
   15064:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   15068:	f890 2027 	ldrb.w	r2, [r0, #39]	; 0x27
   1506c:	429a      	cmp	r2, r3
   1506e:	d040      	beq.n	150f2 <Switch::process()+0x92>
        equal = 0;
   15070:	2200      	movs	r2, #0
   15072:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        deglitchTime = ms;
   15076:	6a02      	ldr	r2, [r0, #32]
   15078:	6102      	str	r2, [r0, #16]
    lastInput = input;
   1507a:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    _switched = 0;
   1507e:	2300      	movs	r3, #0
   15080:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    if ((deglitched != debounced) && ((ms - switchedTime) > debouncePeriod)) {
   15084:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   15088:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
   1508c:	4293      	cmp	r3, r2
   1508e:	d00a      	beq.n	150a6 <Switch::process()+0x46>
   15090:	6a23      	ldr	r3, [r4, #32]
   15092:	6961      	ldr	r1, [r4, #20]
   15094:	1a5b      	subs	r3, r3, r1
   15096:	6861      	ldr	r1, [r4, #4]
   15098:	428b      	cmp	r3, r1
   1509a:	d904      	bls.n	150a6 <Switch::process()+0x46>
        debounced = deglitched;
   1509c:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
        _switched = 1;
   150a0:	2301      	movs	r3, #1
   150a2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    _singleClick = false;
   150a6:	2300      	movs	r3, #0
   150a8:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
    if (pushed()) {
   150ac:	4620      	mov	r0, r4
   150ae:	f7ff ff93 	bl	14fd8 <Switch::pushed()>
   150b2:	4603      	mov	r3, r0
   150b4:	2800      	cmp	r0, #0
   150b6:	d077      	beq.n	151a8 <Switch::process()+0x148>
        if ((ms - pushedTime) >= doubleClickPeriod) {
   150b8:	6a22      	ldr	r2, [r4, #32]
   150ba:	69a1      	ldr	r1, [r4, #24]
   150bc:	1a52      	subs	r2, r2, r1
   150be:	68e1      	ldr	r1, [r4, #12]
   150c0:	428a      	cmp	r2, r1
   150c2:	d326      	bcc.n	15112 <Switch::process()+0xb2>
bool Switch::switched() { return _switched; }
   150c4:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
        _singleClick = !switched() && !on() && ((releasedTime - pushedTime) <= longPressPeriod) && ((ms - pushedTime) >= doubleClickPeriod); // true just one time between polls
   150c8:	bb03      	cbnz	r3, 1510c <Switch::process()+0xac>
   150ca:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   150ce:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   150d2:	4291      	cmp	r1, r2
   150d4:	d01b      	beq.n	1510e <Switch::process()+0xae>
   150d6:	69a1      	ldr	r1, [r4, #24]
   150d8:	69e2      	ldr	r2, [r4, #28]
   150da:	1a52      	subs	r2, r2, r1
   150dc:	68a0      	ldr	r0, [r4, #8]
   150de:	4282      	cmp	r2, r0
   150e0:	d815      	bhi.n	1510e <Switch::process()+0xae>
   150e2:	6a23      	ldr	r3, [r4, #32]
   150e4:	1a5b      	subs	r3, r3, r1
   150e6:	68e2      	ldr	r2, [r4, #12]
   150e8:	4293      	cmp	r3, r2
   150ea:	bf34      	ite	cc
   150ec:	2300      	movcc	r3, #0
   150ee:	2301      	movcs	r3, #1
   150f0:	e00d      	b.n	1510e <Switch::process()+0xae>
        equal = 1;
   150f2:	2201      	movs	r2, #1
   150f4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    if (equal && ((ms - deglitchTime) > deglitchPeriod)) // max 50ms, disable deglitch: 0ms
   150f8:	6a01      	ldr	r1, [r0, #32]
   150fa:	6902      	ldr	r2, [r0, #16]
   150fc:	1a8a      	subs	r2, r1, r2
   150fe:	6800      	ldr	r0, [r0, #0]
   15100:	4282      	cmp	r2, r0
   15102:	d9ba      	bls.n	1507a <Switch::process()+0x1a>
        deglitched = input;
   15104:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        deglitchTime = ms;
   15108:	6121      	str	r1, [r4, #16]
   1510a:	e7b6      	b.n	1507a <Switch::process()+0x1a>
        _singleClick = !switched() && !on() && ((releasedTime - pushedTime) <= longPressPeriod) && ((ms - pushedTime) >= doubleClickPeriod); // true just one time between polls
   1510c:	2300      	movs	r3, #0
   1510e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
            singleClickDisable = true; // silence single click in second cl. doublecl.
   15112:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    _doubleClick = pushed() && ((ms - pushedTime) < doubleClickPeriod);
   15116:	4620      	mov	r0, r4
   15118:	f7ff ff5e 	bl	14fd8 <Switch::pushed()>
   1511c:	4603      	mov	r3, r0
   1511e:	b138      	cbz	r0, 15130 <Switch::process()+0xd0>
   15120:	6a23      	ldr	r3, [r4, #32]
   15122:	69a2      	ldr	r2, [r4, #24]
   15124:	1a9b      	subs	r3, r3, r2
   15126:	68e2      	ldr	r2, [r4, #12]
   15128:	4293      	cmp	r3, r2
   1512a:	bf2c      	ite	cs
   1512c:	2300      	movcs	r3, #0
   1512e:	2301      	movcc	r3, #1
   15130:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    _longPress = false;
   15134:	2300      	movs	r3, #0
   15136:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    if (released())
   1513a:	4620      	mov	r0, r4
   1513c:	f7ff ff59 	bl	14ff2 <Switch::released()>
   15140:	b910      	cbnz	r0, 15148 <Switch::process()+0xe8>
    if (!longPressDisable) {
   15142:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   15146:	b9b3      	cbnz	r3, 15176 <Switch::process()+0x116>
bool Switch::switched() { return _switched; }
   15148:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
        _longPress = !switched() && on() && ((ms - pushedTime) > longPressPeriod); // true just one time between polls
   1514c:	b973      	cbnz	r3, 1516c <Switch::process()+0x10c>
   1514e:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
   15152:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   15156:	4291      	cmp	r1, r2
   15158:	d109      	bne.n	1516e <Switch::process()+0x10e>
   1515a:	6a23      	ldr	r3, [r4, #32]
   1515c:	69a2      	ldr	r2, [r4, #24]
   1515e:	1a9b      	subs	r3, r3, r2
   15160:	68a2      	ldr	r2, [r4, #8]
   15162:	4293      	cmp	r3, r2
   15164:	bf94      	ite	ls
   15166:	2300      	movls	r3, #0
   15168:	2301      	movhi	r3, #1
   1516a:	e000      	b.n	1516e <Switch::process()+0x10e>
   1516c:	2300      	movs	r3, #0
   1516e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        longPressDisable = _longPress; // will be reset at next release
   15172:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (switched()) {
   15176:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1517a:	b16b      	cbz	r3, 15198 <Switch::process()+0x138>
        switchedTime = ms; // stores last times for future rounds
   1517c:	6a25      	ldr	r5, [r4, #32]
   1517e:	6165      	str	r5, [r4, #20]
        if (pushed()) {
   15180:	4620      	mov	r0, r4
   15182:	f7ff ff29 	bl	14fd8 <Switch::pushed()>
   15186:	b168      	cbz	r0, 151a4 <Switch::process()+0x144>
            if (_beepAllCallback)
   15188:	4b0a      	ldr	r3, [pc, #40]	; (151b4 <Switch::process()+0x154>)
   1518a:	681b      	ldr	r3, [r3, #0]
   1518c:	b113      	cbz	r3, 15194 <Switch::process()+0x134>
                _beepAllCallback(_beepAllCallbackParam);
   1518e:	4a0a      	ldr	r2, [pc, #40]	; (151b8 <Switch::process()+0x158>)
   15190:	6810      	ldr	r0, [r2, #0]
   15192:	4798      	blx	r3
            pushedTime = ms;
   15194:	6a23      	ldr	r3, [r4, #32]
   15196:	61a3      	str	r3, [r4, #24]
    triggerCallbacks();
   15198:	4620      	mov	r0, r4
   1519a:	f7ff ff36 	bl	1500a <Switch::triggerCallbacks()>
    return _switched;
   1519e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
}
   151a2:	bd38      	pop	{r3, r4, r5, pc}
            releasedTime = ms;
   151a4:	61e5      	str	r5, [r4, #28]
   151a6:	e7f7      	b.n	15198 <Switch::process()+0x138>
    if (!singleClickDisable) {
   151a8:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   151ac:	2a00      	cmp	r2, #0
   151ae:	d1bf      	bne.n	15130 <Switch::process()+0xd0>
   151b0:	e788      	b.n	150c4 <Switch::process()+0x64>
   151b2:	bf00      	nop
   151b4:	20006ee4 	.word	0x20006ee4
   151b8:	20006ee8 	.word	0x20006ee8

000151bc <Switch::poll()>:
{
   151bc:	b510      	push	{r4, lr}
   151be:	4604      	mov	r4, r0
    input = digitalRead(pin);
   151c0:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   151c4:	f001 fd92 	bl	16cec <digitalRead>
   151c8:	3800      	subs	r0, #0
   151ca:	bf18      	it	ne
   151cc:	2001      	movne	r0, #1
   151ce:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
   151d2:	4b03      	ldr	r3, [pc, #12]	; (151e0 <Switch::poll()+0x24>)
   151d4:	681b      	ldr	r3, [r3, #0]
    ms = millis();
   151d6:	6223      	str	r3, [r4, #32]
    return process();
   151d8:	4620      	mov	r0, r4
   151da:	f7ff ff41 	bl	15060 <Switch::process()>
}
   151de:	bd10      	pop	{r4, pc}
   151e0:	20008a6c 	.word	0x20008a6c

000151e4 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>:
Switch::Switch(byte _pin, byte PinMode, bool polarity,
   151e4:	b510      	push	{r4, lr}
   151e6:	4604      	mov	r4, r0
   151e8:	4608      	mov	r0, r1
    : deglitchPeriod(deglitchPeriod)
   151ea:	9905      	ldr	r1, [sp, #20]
   151ec:	6021      	str	r1, [r4, #0]
    , debouncePeriod(debouncePeriod)
   151ee:	9902      	ldr	r1, [sp, #8]
   151f0:	6061      	str	r1, [r4, #4]
    , longPressPeriod(longPressPeriod)
   151f2:	9903      	ldr	r1, [sp, #12]
   151f4:	60a1      	str	r1, [r4, #8]
    , doubleClickPeriod(doubleClickPeriod)
   151f6:	9904      	ldr	r1, [sp, #16]
   151f8:	60e1      	str	r1, [r4, #12]
    , pin(_pin)
   151fa:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    , polarity(polarity)
   151fe:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
   15202:	2300      	movs	r3, #0
   15204:	6363      	str	r3, [r4, #52]	; 0x34
   15206:	63a3      	str	r3, [r4, #56]	; 0x38
   15208:	63e3      	str	r3, [r4, #60]	; 0x3c
   1520a:	6423      	str	r3, [r4, #64]	; 0x40
   1520c:	6463      	str	r3, [r4, #68]	; 0x44
   1520e:	64a3      	str	r3, [r4, #72]	; 0x48
   15210:	64e3      	str	r3, [r4, #76]	; 0x4c
   15212:	6523      	str	r3, [r4, #80]	; 0x50
   15214:	6563      	str	r3, [r4, #84]	; 0x54
   15216:	65a3      	str	r3, [r4, #88]	; 0x58
    pinMode(pin, PinMode);
   15218:	4611      	mov	r1, r2
   1521a:	f001 fd79 	bl	16d10 <pinMode>
   1521e:	4b0a      	ldr	r3, [pc, #40]	; (15248 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)+0x64>)
   15220:	681b      	ldr	r3, [r3, #0]
    switchedTime = millis();
   15222:	6163      	str	r3, [r4, #20]
    debounced = digitalRead(pin);
   15224:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   15228:	f001 fd60 	bl	16cec <digitalRead>
   1522c:	3800      	subs	r0, #0
   1522e:	bf18      	it	ne
   15230:	2001      	movne	r0, #1
   15232:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    singleClickDisable = true;
   15236:	2301      	movs	r3, #1
   15238:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    poll();
   1523c:	4620      	mov	r0, r4
   1523e:	f7ff ffbd 	bl	151bc <Switch::poll()>
}
   15242:	4620      	mov	r0, r4
   15244:	bd10      	pop	{r4, pc}
   15246:	bf00      	nop
   15248:	20008a6c 	.word	0x20008a6c

0001524c <Switch::setPushedCallback(void (*)(void*), void*)>:

void Switch::setPushedCallback(switchCallback_t cb, void* param)
{
    _pushedCallback = cb; // Store the "pushed" callback function
   1524c:	6341      	str	r1, [r0, #52]	; 0x34
    _pushedCallbackParam = param;
   1524e:	6482      	str	r2, [r0, #72]	; 0x48
}
   15250:	4770      	bx	lr

00015252 <Switch::setReleasedCallback(void (*)(void*), void*)>:

void Switch::setReleasedCallback(switchCallback_t cb, void* param)
{
    _releasedCallback = cb; // Store the "released" callback function
   15252:	6381      	str	r1, [r0, #56]	; 0x38
    _releasedCallbackParam = param;
   15254:	64c2      	str	r2, [r0, #76]	; 0x4c
}
   15256:	4770      	bx	lr

00015258 <Switch::setLongPressCallback(void (*)(void*), void*)>:

void Switch::setLongPressCallback(switchCallback_t cb, void* param)
{
    _longPressCallback = cb; // Store the "long press" callback function
   15258:	63c1      	str	r1, [r0, #60]	; 0x3c
    _longPressCallbackParam = param;
   1525a:	6502      	str	r2, [r0, #80]	; 0x50
}
   1525c:	4770      	bx	lr

0001525e <Switch::setDoubleClickCallback(void (*)(void*), void*)>:

void Switch::setDoubleClickCallback(switchCallback_t cb, void* param)
{
    _doubleClickCallback = cb; // Store the "double click" callback function
   1525e:	6401      	str	r1, [r0, #64]	; 0x40
    _doubleClickCallbackParam = param;
   15260:	6542      	str	r2, [r0, #84]	; 0x54
}
   15262:	4770      	bx	lr

00015264 <Switch::setSingleClickCallback(void (*)(void*), void*)>:

void Switch::setSingleClickCallback(switchCallback_t cb, void* param)
{
    _singleClickCallback = cb; // Store the "double click" callback function
   15264:	6441      	str	r1, [r0, #68]	; 0x44
    _singleClickCallbackParam = param;
   15266:	6582      	str	r2, [r0, #88]	; 0x58
}
   15268:	4770      	bx	lr
	...

0001526c <fastinterpolate(short, short, short, short, float)>:


int16_t fastinterpolate(int16_t d1, int16_t d2, int16_t d3, int16_t d4, float x) {
   1526c:	ee06 0a90 	vmov	s13, r0
   15270:	ee04 1a90 	vmov	s9, r1
   15274:	ee05 2a10 	vmov	s10, r2
   15278:	ee05 3a90 	vmov	s11, r3
    float x_1 = x * 1000.0;
   1527c:	eddf 7a32 	vldr	s15, [pc, #200]	; 15348 <fastinterpolate(short, short, short, short, float)+0xdc>
   15280:	ee20 0a27 	vmul.f32	s0, s0, s15
    float x_2 = x_1 * x_1;
   15284:	ee20 6a00 	vmul.f32	s12, s0, s0
    float x_3 = x_2 * x_1;
   15288:	ee20 7a06 	vmul.f32	s14, s0, s12

    //Serial.printf("%i,%i,%i,%i @ x=%f \n", d1,d2,d3,d4,x);

    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   1528c:	eddf 7a2f 	vldr	s15, [pc, #188]	; 1534c <fastinterpolate(short, short, short, short, float)+0xe0>
   15290:	ee66 7a27 	vmul.f32	s15, s12, s15
   15294:	ee77 7a67 	vsub.f32	s15, s14, s15
   15298:	ed9f 4a2d 	vldr	s8, [pc, #180]	; 15350 <fastinterpolate(short, short, short, short, float)+0xe4>
   1529c:	ee20 4a04 	vmul.f32	s8, s0, s8
   152a0:	ee77 7a84 	vadd.f32	s15, s15, s8
   152a4:	ed9f 4a2b 	vldr	s8, [pc, #172]	; 15354 <fastinterpolate(short, short, short, short, float)+0xe8>
   152a8:	ee77 7ac4 	vsub.f32	s15, s15, s8
   152ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
   152b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
   152b4:	eddf 3a28 	vldr	s7, [pc, #160]	; 15358 <fastinterpolate(short, short, short, short, float)+0xec>
   152b8:	eec7 6aa3 	vdiv.f32	s13, s15, s7
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   152bc:	eddf 7a27 	vldr	s15, [pc, #156]	; 1535c <fastinterpolate(short, short, short, short, float)+0xf0>
   152c0:	ee66 7a27 	vmul.f32	s15, s12, s15
   152c4:	ee77 7a67 	vsub.f32	s15, s14, s15
   152c8:	eddf 3a25 	vldr	s7, [pc, #148]	; 15360 <fastinterpolate(short, short, short, short, float)+0xf4>
   152cc:	ee60 3a23 	vmul.f32	s7, s0, s7
   152d0:	ee77 7aa3 	vadd.f32	s15, s15, s7
   152d4:	eef8 4ae4 	vcvt.f32.s32	s9, s9
   152d8:	ee67 7aa4 	vmul.f32	s15, s15, s9
   152dc:	eddf 3a21 	vldr	s7, [pc, #132]	; 15364 <fastinterpolate(short, short, short, short, float)+0xf8>
   152e0:	eec7 4aa3 	vdiv.f32	s9, s15, s7
   152e4:	ee76 7aa4 	vadd.f32	s15, s13, s9
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   152e8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 15368 <fastinterpolate(short, short, short, short, float)+0xfc>
   152ec:	ee66 6a26 	vmul.f32	s13, s12, s13
   152f0:	ee77 6a66 	vsub.f32	s13, s14, s13
   152f4:	eddf 4a1d 	vldr	s9, [pc, #116]	; 1536c <fastinterpolate(short, short, short, short, float)+0x100>
   152f8:	ee60 4a24 	vmul.f32	s9, s0, s9
   152fc:	ee76 6aa4 	vadd.f32	s13, s13, s9
   15300:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
   15304:	ee66 6a85 	vmul.f32	s13, s13, s10
   15308:	eddf 4a19 	vldr	s9, [pc, #100]	; 15370 <fastinterpolate(short, short, short, short, float)+0x104>
   1530c:	ee86 5aa4 	vdiv.f32	s10, s13, s9
   15310:	ee77 7a85 	vadd.f32	s15, s15, s10
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   15314:	eddf 6a17 	vldr	s13, [pc, #92]	; 15374 <fastinterpolate(short, short, short, short, float)+0x108>
   15318:	ee26 6a26 	vmul.f32	s12, s12, s13
   1531c:	ee37 7a46 	vsub.f32	s14, s14, s12
   15320:	eddf 6a15 	vldr	s13, [pc, #84]	; 15378 <fastinterpolate(short, short, short, short, float)+0x10c>
   15324:	ee20 0a26 	vmul.f32	s0, s0, s13
   15328:	ee37 7a00 	vadd.f32	s14, s14, s0
   1532c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
   15330:	ee27 7a25 	vmul.f32	s14, s14, s11
   15334:	eec7 6a04 	vdiv.f32	s13, s14, s8
   15338:	ee77 7aa6 	vadd.f32	s15, s15, s13
   1533c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
      return -32768;
    if (untruncated > 32767)
      return 32767;
    return result;
    */
   15340:	ee17 3a90 	vmov	r3, s15
   15344:	b218      	sxth	r0, r3
   15346:	4770      	bx	lr
   15348:	447a0000 	.word	0x447a0000
   1534c:	45bb8000 	.word	0x45bb8000
   15350:	4b27d8c0 	.word	0x4b27d8c0
   15354:	4fb2d05e 	.word	0x4fb2d05e
   15358:	cfb2d05e 	.word	0xcfb2d05e
   1535c:	459c4000 	.word	0x459c4000
   15360:	4ab71b00 	.word	0x4ab71b00
   15364:	4eee6b28 	.word	0x4eee6b28
   15368:	457a0000 	.word	0x457a0000
   1536c:	4a371b00 	.word	0x4a371b00
   15370:	ceee6b28 	.word	0xceee6b28
   15374:	453b8000 	.word	0x453b8000
   15378:	49f42400 	.word	0x49f42400

0001537c <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
   1537c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   15380:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
   15384:	1a10      	subs	r0, r2, r0
   15386:	4770      	bx	lr

00015388 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   15388:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   1538c:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   15390:	429a      	cmp	r2, r3
   15392:	d905      	bls.n	153a0 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
   15394:	1c5a      	adds	r2, r3, #1
   15396:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
   1539a:	4418      	add	r0, r3
   1539c:	7e80      	ldrb	r0, [r0, #26]
   1539e:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   153a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   153a4:	4770      	bx	lr

000153a6 <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   153a6:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   153aa:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   153ae:	429a      	cmp	r2, r3
   153b0:	d902      	bls.n	153b8 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
   153b2:	4418      	add	r0, r3
   153b4:	7e80      	ldrb	r0, [r0, #26]
   153b6:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   153b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   153bc:	4770      	bx	lr

000153be <TwoWire::flush()>:
	}
   153be:	4770      	bx	lr

000153c0 <TwoWire::write(unsigned char)>:
	if (transmitting || slave_mode) {
   153c0:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
   153c4:	b17b      	cbz	r3, 153e6 <TwoWire::write(unsigned char)+0x26>
		if (txBufferLength >= BUFFER_LENGTH+1) {
   153c6:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
   153ca:	2b88      	cmp	r3, #136	; 0x88
   153cc:	d903      	bls.n	153d6 <TwoWire::write(unsigned char)+0x16>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
   153ce:	2301      	movs	r3, #1
   153d0:	6043      	str	r3, [r0, #4]
			return 0;
   153d2:	2000      	movs	r0, #0
   153d4:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
   153d6:	1c5a      	adds	r2, r3, #1
   153d8:	f880 212f 	strb.w	r2, [r0, #303]	; 0x12f
   153dc:	4418      	add	r0, r3
   153de:	f880 10a5 	strb.w	r1, [r0, #165]	; 0xa5
		return 1;
   153e2:	2001      	movs	r0, #1
   153e4:	4770      	bx	lr
	return 0;
   153e6:	2000      	movs	r0, #0
}
   153e8:	4770      	bx	lr

000153ea <TwoWire::write(unsigned char const*, unsigned int)>:
{
   153ea:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
   153ec:	f8b0 3130 	ldrh.w	r3, [r0, #304]	; 0x130
   153f0:	b90b      	cbnz	r3, 153f6 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
	return 0;
   153f2:	2000      	movs	r0, #0
}
   153f4:	bd38      	pop	{r3, r4, r5, pc}
   153f6:	4605      	mov	r5, r0
   153f8:	4614      	mov	r4, r2
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
   153fa:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
   153fe:	f1c3 0289 	rsb	r2, r3, #137	; 0x89
		if (quantity > avail) {
   15402:	42a2      	cmp	r2, r4
   15404:	d202      	bcs.n	1540c <TwoWire::write(unsigned char const*, unsigned int)+0x22>
   15406:	2001      	movs	r0, #1
   15408:	6068      	str	r0, [r5, #4]
			quantity = avail;
   1540a:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
   1540c:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
   15410:	4622      	mov	r2, r4
   15412:	4418      	add	r0, r3
   15414:	f001 ff6c 	bl	172f0 <memcpy>
		txBufferLength += quantity;
   15418:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
   1541c:	4423      	add	r3, r4
   1541e:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
		return quantity;
   15422:	4620      	mov	r0, r4
   15424:	e7e6      	b.n	153f4 <TwoWire::write(unsigned char const*, unsigned int)+0xa>
	...

00015428 <TwoWire::force_clock()>:
{
   15428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1542c:	b083      	sub	sp, #12
   1542e:	4684      	mov	ip, r0
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   15430:	6943      	ldr	r3, [r0, #20]
   15432:	7e02      	ldrb	r2, [r0, #24]
   15434:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   15438:	7a11      	ldrb	r1, [r2, #8]
   1543a:	9101      	str	r1, [sp, #4]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   1543c:	7e42      	ldrb	r2, [r0, #25]
   1543e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   15442:	f893 8028 	ldrb.w	r8, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   15446:	4b47      	ldr	r3, [pc, #284]	; (15564 <TwoWire::force_clock()+0x13c>)
   15448:	ea4f 1e01 	mov.w	lr, r1, lsl #4
   1544c:	eb03 1201 	add.w	r2, r3, r1, lsl #4
   15450:	68d6      	ldr	r6, [r2, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   15452:	ea4f 1108 	mov.w	r1, r8, lsl #4
   15456:	eb03 1508 	add.w	r5, r3, r8, lsl #4
   1545a:	68e8      	ldr	r0, [r5, #12]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   1545c:	6852      	ldr	r2, [r2, #4]
   1545e:	2415      	movs	r4, #21
   15460:	6014      	str	r4, [r2, #0]
	*portSetRegister(sda_pin) = sda_mask;
   15462:	f853 200e 	ldr.w	r2, [r3, lr]
   15466:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
   1546a:	f853 e00e 	ldr.w	lr, [r3, lr]
   1546e:	f8de 2004 	ldr.w	r2, [lr, #4]
   15472:	4332      	orrs	r2, r6
   15474:	f8ce 2004 	str.w	r2, [lr, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   15478:	686a      	ldr	r2, [r5, #4]
   1547a:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
   1547c:	585a      	ldr	r2, [r3, r1]
   1547e:	f8c2 0084 	str.w	r0, [r2, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
   15482:	585a      	ldr	r2, [r3, r1]
   15484:	6853      	ldr	r3, [r2, #4]
   15486:	4303      	orrs	r3, r0
   15488:	6053      	str	r3, [r2, #4]
	uint32_t begin = ARM_DWT_CYCCNT;
   1548a:	4b37      	ldr	r3, [pc, #220]	; (15568 <TwoWire::force_clock()+0x140>)
   1548c:	685c      	ldr	r4, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   1548e:	4b37      	ldr	r3, [pc, #220]	; (1556c <TwoWire::force_clock()+0x144>)
   15490:	681a      	ldr	r2, [r3, #0]
   15492:	4b37      	ldr	r3, [pc, #220]	; (15570 <TwoWire::force_clock()+0x148>)
   15494:	fba3 3202 	umull	r3, r2, r3, r2
   15498:	0c92      	lsrs	r2, r2, #18
   1549a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1549e:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   154a0:	4931      	ldr	r1, [pc, #196]	; (15568 <TwoWire::force_clock()+0x140>)
   154a2:	684b      	ldr	r3, [r1, #4]
   154a4:	1b1b      	subs	r3, r3, r4
   154a6:	429a      	cmp	r2, r3
   154a8:	d8fb      	bhi.n	154a2 <TwoWire::force_clock()+0x7a>
   154aa:	2209      	movs	r2, #9
		if ((*portInputRegister(sda_pin) & sda_mask)
   154ac:	492d      	ldr	r1, [pc, #180]	; (15564 <TwoWire::force_clock()+0x13c>)
   154ae:	9b01      	ldr	r3, [sp, #4]
   154b0:	eb01 1e03 	add.w	lr, r1, r3, lsl #4
		  && (*portInputRegister(scl_pin) & scl_mask)) {
   154b4:	eb01 1108 	add.w	r1, r1, r8, lsl #4
	uint32_t begin = ARM_DWT_CYCCNT;
   154b8:	4b2b      	ldr	r3, [pc, #172]	; (15568 <TwoWire::force_clock()+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   154ba:	4d2c      	ldr	r5, [pc, #176]	; (1556c <TwoWire::force_clock()+0x144>)
   154bc:	4c2c      	ldr	r4, [pc, #176]	; (15570 <TwoWire::force_clock()+0x148>)
   154be:	e025      	b.n	1550c <TwoWire::force_clock()+0xe4>
		*portClearRegister(scl_pin) = scl_mask;
   154c0:	680f      	ldr	r7, [r1, #0]
   154c2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
   154c6:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   154ca:	f8d5 a000 	ldr.w	sl, [r5]
   154ce:	fba4 9a0a 	umull	r9, sl, r4, sl
   154d2:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
   154d6:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   154da:	685f      	ldr	r7, [r3, #4]
   154dc:	eba7 090b 	sub.w	r9, r7, fp
   154e0:	45ca      	cmp	sl, r9
   154e2:	d8fa      	bhi.n	154da <TwoWire::force_clock()+0xb2>
		*portSetRegister(scl_pin) = scl_mask;
   154e4:	680f      	ldr	r7, [r1, #0]
   154e6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
   154ea:	f8d3 b004 	ldr.w	fp, [r3, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   154ee:	f8d5 a000 	ldr.w	sl, [r5]
   154f2:	fba4 9a0a 	umull	r9, sl, r4, sl
   154f6:	ea4f 4a9a 	mov.w	sl, sl, lsr #18
   154fa:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   154fe:	685f      	ldr	r7, [r3, #4]
   15500:	eba7 090b 	sub.w	r9, r7, fp
   15504:	45ca      	cmp	sl, r9
   15506:	d8fa      	bhi.n	154fe <TwoWire::force_clock()+0xd6>
	for (int i=0; i < 9; i++) {
   15508:	3a01      	subs	r2, #1
   1550a:	d00e      	beq.n	1552a <TwoWire::force_clock()+0x102>
		if ((*portInputRegister(sda_pin) & sda_mask)
   1550c:	f8de 7000 	ldr.w	r7, [lr]
   15510:	f8d7 9008 	ldr.w	r9, [r7, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
   15514:	ea19 0f06 	tst.w	r9, r6
   15518:	d0d2      	beq.n	154c0 <TwoWire::force_clock()+0x98>
   1551a:	680f      	ldr	r7, [r1, #0]
   1551c:	f8d7 9008 	ldr.w	r9, [r7, #8]
   15520:	ea19 0f00 	tst.w	r9, r0
   15524:	d0cc      	beq.n	154c0 <TwoWire::force_clock()+0x98>
			ret = true;
   15526:	2001      	movs	r0, #1
   15528:	e000      	b.n	1552c <TwoWire::force_clock()+0x104>
	bool ret = false;
   1552a:	2000      	movs	r0, #0
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   1552c:	4b0d      	ldr	r3, [pc, #52]	; (15564 <TwoWire::force_clock()+0x13c>)
   1552e:	9a01      	ldr	r2, [sp, #4]
   15530:	eb03 1702 	add.w	r7, r3, r2, lsl #4
   15534:	6879      	ldr	r1, [r7, #4]
   15536:	f8dc 2014 	ldr.w	r2, [ip, #20]
   1553a:	f89c 4018 	ldrb.w	r4, [ip, #24]
   1553e:	eb02 1204 	add.w	r2, r2, r4, lsl #4
   15542:	68d2      	ldr	r2, [r2, #12]
   15544:	600a      	str	r2, [r1, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   15546:	eb03 1308 	add.w	r3, r3, r8, lsl #4
   1554a:	685a      	ldr	r2, [r3, #4]
   1554c:	f8dc 3014 	ldr.w	r3, [ip, #20]
   15550:	f89c 1019 	ldrb.w	r1, [ip, #25]
   15554:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   15558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1555a:	6013      	str	r3, [r2, #0]
}
   1555c:	b003      	add	sp, #12
   1555e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15562:	bf00      	nop
   15564:	2000373c 	.word	0x2000373c
   15568:	e0001000 	.word	0xe0001000
   1556c:	20004e18 	.word	0x20004e18
   15570:	431bde83 	.word	0x431bde83

00015574 <TwoWire::wait_idle()>:
{
   15574:	b510      	push	{r4, lr}
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   15576:	6904      	ldr	r4, [r0, #16]
	return systick_millis_count;
   15578:	4b0a      	ldr	r3, [pc, #40]	; (155a4 <TwoWire::wait_idle()+0x30>)
   1557a:	6819      	ldr	r1, [r3, #0]
   1557c:	461a      	mov	r2, r3
		uint32_t status = port->MSR; // pg 2899 & 2892
   1557e:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
   15580:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   15584:	d009      	beq.n	1559a <TwoWire::wait_idle()+0x26>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
   15586:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   1558a:	d106      	bne.n	1559a <TwoWire::wait_idle()+0x26>
   1558c:	6813      	ldr	r3, [r2, #0]
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   1558e:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
   15590:	2b10      	cmp	r3, #16
   15592:	d9f4      	bls.n	1557e <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
   15594:	f7ff ff48 	bl	15428 <TwoWire::force_clock()>
   15598:	b118      	cbz	r0, 155a2 <TwoWire::wait_idle()+0x2e>
	port->MSR = 0x00007F00; // clear all prior flags
   1559a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
   1559e:	6163      	str	r3, [r4, #20]
	return true;
   155a0:	2001      	movs	r0, #1
}
   155a2:	bd10      	pop	{r4, pc}
   155a4:	20008a6c 	.word	0x20008a6c

000155a8 <TwoWire::endTransmission(unsigned char)>:
{
   155a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tx_len = txBufferLength;
   155ac:	f890 712f 	ldrb.w	r7, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
   155b0:	2f00      	cmp	r7, #0
   155b2:	d072      	beq.n	1569a <TwoWire::endTransmission(unsigned char)+0xf2>
   155b4:	4606      	mov	r6, r0
   155b6:	468a      	mov	sl, r1
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   155b8:	6905      	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
   155ba:	f7ff ffdb 	bl	15574 <TwoWire::wait_idle()>
   155be:	2800      	cmp	r0, #0
   155c0:	d06e      	beq.n	156a0 <TwoWire::endTransmission(unsigned char)+0xf8>
   155c2:	4b38      	ldr	r3, [pc, #224]	; (156a4 <TwoWire::endTransmission(unsigned char)+0xfc>)
   155c4:	f8d3 9000 	ldr.w	r9, [r3]
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
   155c8:	2400      	movs	r4, #0
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   155ca:	f44f 7b00 	mov.w	fp, #512	; 0x200
   155ce:	4698      	mov	r8, r3
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   155d0:	e040      	b.n	15654 <TwoWire::endTransmission(unsigned char)+0xac>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   155d2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   155d4:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
   155d8:	f012 0f04 	tst.w	r2, #4
   155dc:	d00a      	beq.n	155f4 <TwoWire::endTransmission(unsigned char)+0x4c>
   155de:	e03b      	b.n	15658 <TwoWire::endTransmission(unsigned char)+0xb0>
				} else if (tx_index < tx_len) {
   155e0:	42a7      	cmp	r7, r4
   155e2:	d910      	bls.n	15606 <TwoWire::endTransmission(unsigned char)+0x5e>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   155e4:	1932      	adds	r2, r6, r4
   155e6:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
   155ea:	662a      	str	r2, [r5, #96]	; 0x60
   155ec:	3401      	adds	r4, #1
				fifo_used++;
   155ee:	3301      	adds	r3, #1
			while (fifo_used < 4) {
   155f0:	2b03      	cmp	r3, #3
   155f2:	d831      	bhi.n	15658 <TwoWire::endTransmission(unsigned char)+0xb0>
				if (tx_index == 0) {
   155f4:	2c00      	cmp	r4, #0
   155f6:	d1f3      	bne.n	155e0 <TwoWire::endTransmission(unsigned char)+0x38>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   155f8:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
   155fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
   15600:	662a      	str	r2, [r5, #96]	; 0x60
					tx_index = 1;
   15602:	2401      	movs	r4, #1
   15604:	e7f3      	b.n	155ee <TwoWire::endTransmission(unsigned char)+0x46>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   15606:	f1ba 0f00 	cmp.w	sl, #0
   1560a:	d001      	beq.n	15610 <TwoWire::endTransmission(unsigned char)+0x68>
   1560c:	f8c5 b060 	str.w	fp, [r5, #96]	; 0x60
					tx_index++;
   15610:	3401      	adds	r4, #1
					break;
   15612:	e021      	b.n	15658 <TwoWire::endTransmission(unsigned char)+0xb0>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   15614:	692b      	ldr	r3, [r5, #16]
   15616:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   1561a:	612b      	str	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
   1561c:	2004      	movs	r0, #4
   1561e:	e03d      	b.n	1569c <TwoWire::endTransmission(unsigned char)+0xf4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   15620:	692b      	ldr	r3, [r5, #16]
   15622:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   15626:	612b      	str	r3, [r5, #16]
			return 5; // FIFO error
   15628:	2005      	movs	r0, #5
   1562a:	e037      	b.n	1569c <TwoWire::endTransmission(unsigned char)+0xf4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   1562c:	692b      	ldr	r3, [r5, #16]
   1562e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   15632:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   15634:	f44f 7300 	mov.w	r3, #512	; 0x200
   15638:	662b      	str	r3, [r5, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
   1563a:	2002      	movs	r0, #2
   1563c:	e02e      	b.n	1569c <TwoWire::endTransmission(unsigned char)+0xf4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   1563e:	692b      	ldr	r3, [r5, #16]
   15640:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   15644:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   15646:	f44f 7300 	mov.w	r3, #512	; 0x200
   1564a:	662b      	str	r3, [r5, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
   1564c:	2004      	movs	r0, #4
   1564e:	e025      	b.n	1569c <TwoWire::endTransmission(unsigned char)+0xf4>
		yield();
   15650:	f7f6 fbc0 	bl	bdd4 <yield>
		if (tx_index <= tx_len) {
   15654:	42bc      	cmp	r4, r7
   15656:	d9bc      	bls.n	155d2 <TwoWire::endTransmission(unsigned char)+0x2a>
		uint32_t status = port->MSR; // pg 2884 & 2891
   15658:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
   1565a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   1565e:	d1d9      	bne.n	15614 <TwoWire::endTransmission(unsigned char)+0x6c>
		if (status & LPI2C_MSR_FEF) {
   15660:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   15664:	d1dc      	bne.n	15620 <TwoWire::endTransmission(unsigned char)+0x78>
		if (status & LPI2C_MSR_NDF) {
   15666:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1566a:	d1df      	bne.n	1562c <TwoWire::endTransmission(unsigned char)+0x84>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
   1566c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   15670:	d1e5      	bne.n	1563e <TwoWire::endTransmission(unsigned char)+0x96>
   15672:	f8d8 2000 	ldr.w	r2, [r8]
	operator unsigned long () const { return millis() - ms; }
   15676:	eba2 0209 	sub.w	r2, r2, r9
   1567a:	2a32      	cmp	r2, #50	; 0x32
   1567c:	d8df      	bhi.n	1563e <TwoWire::endTransmission(unsigned char)+0x96>
		if (tx_index > tx_len) {
   1567e:	42bc      	cmp	r4, r7
   15680:	d9e6      	bls.n	15650 <TwoWire::endTransmission(unsigned char)+0xa8>
			uint32_t tx_fifo = port->MFSR & 0x07;
   15682:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   15684:	f012 0f07 	tst.w	r2, #7
   15688:	d1e2      	bne.n	15650 <TwoWire::endTransmission(unsigned char)+0xa8>
   1568a:	f413 7f00 	tst.w	r3, #512	; 0x200
   1568e:	d102      	bne.n	15696 <TwoWire::endTransmission(unsigned char)+0xee>
   15690:	f1ba 0f00 	cmp.w	sl, #0
   15694:	d1dc      	bne.n	15650 <TwoWire::endTransmission(unsigned char)+0xa8>
				return 0;
   15696:	2000      	movs	r0, #0
   15698:	e000      	b.n	1569c <TwoWire::endTransmission(unsigned char)+0xf4>
	if (!tx_len) return 4; // no address for transmit
   1569a:	2004      	movs	r0, #4
}
   1569c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!wait_idle()) return 4;
   156a0:	2004      	movs	r0, #4
   156a2:	e7fb      	b.n	1569c <TwoWire::endTransmission(unsigned char)+0xf4>
   156a4:	20008a6c 	.word	0x20008a6c

000156a8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
   156a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   156ac:	4604      	mov	r4, r0
   156ae:	460e      	mov	r6, r1
   156b0:	4617      	mov	r7, r2
   156b2:	4699      	mov	r9, r3
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   156b4:	6905      	ldr	r5, [r0, #16]
	if (!wait_idle()) return 4;
   156b6:	f7ff ff5d 	bl	15574 <TwoWire::wait_idle()>
   156ba:	2800      	cmp	r0, #0
   156bc:	f000 8087 	beq.w	157ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x126>
	address = (address & 0x7F) << 1;
   156c0:	0071      	lsls	r1, r6, #1
	if (length < 1) length = 1;
   156c2:	2f01      	cmp	r7, #1
   156c4:	bf38      	it	cc
   156c6:	2701      	movcc	r7, #1
	rxBufferIndex = 0;
   156c8:	2600      	movs	r6, #0
   156ca:	f884 60a2 	strb.w	r6, [r4, #162]	; 0xa2
	rxBufferLength = 0;
   156ce:	f884 60a3 	strb.w	r6, [r4, #163]	; 0xa3
   156d2:	4b40      	ldr	r3, [pc, #256]	; (157d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x12c>)
   156d4:	f8d3 a000 	ldr.w	sl, [r3]
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   156d8:	b2c9      	uxtb	r1, r1
   156da:	f240 4801 	movw	r8, #1025	; 0x401
   156de:	ea41 0808 	orr.w	r8, r1, r8
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   156e2:	e050      	b.n	15786 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xde>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
   156e4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   156e6:	f003 0107 	and.w	r1, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
   156ea:	f013 0f04 	tst.w	r3, #4
   156ee:	d14c      	bne.n	1578a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe2>
   156f0:	4633      	mov	r3, r6
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   156f2:	f44f 7c00 	mov.w	ip, #512	; 0x200
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   156f6:	1e78      	subs	r0, r7, #1
   156f8:	f440 7080 	orr.w	r0, r0, #256	; 0x100
   156fc:	4431      	add	r1, r6
   156fe:	e00e      	b.n	1571e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
				} else if (tx_state == 1) {
   15700:	2b01      	cmp	r3, #1
   15702:	d005      	beq.n	15710 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x68>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   15704:	f1b9 0f00 	cmp.w	r9, #0
   15708:	d003      	beq.n	15712 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6a>
   1570a:	f8c5 c060 	str.w	ip, [r5, #96]	; 0x60
   1570e:	e000      	b.n	15712 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6a>
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   15710:	6628      	str	r0, [r5, #96]	; 0x60
				tx_state++;
   15712:	3301      	adds	r3, #1
			while (tx_fifo < 4 && tx_state < 3) {
   15714:	1aca      	subs	r2, r1, r3
   15716:	2a03      	cmp	r2, #3
   15718:	d806      	bhi.n	15728 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
   1571a:	2b02      	cmp	r3, #2
   1571c:	d804      	bhi.n	15728 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x80>
				if (tx_state == 0) {
   1571e:	2b00      	cmp	r3, #0
   15720:	d1ee      	bne.n	15700 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x58>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   15722:	f8c5 8060 	str.w	r8, [r5, #96]	; 0x60
   15726:	e7f4      	b.n	15712 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x6a>
				tx_state++;
   15728:	461e      	mov	r6, r3
   1572a:	e02e      	b.n	1578a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xe2>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   1572c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   1572e:	f3c3 4202 	ubfx	r2, r3, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   15732:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   15736:	d02c      	beq.n	15792 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
				rxBuffer[rxBufferLength++] = port->MRDR;
   15738:	6f28      	ldr	r0, [r5, #112]	; 0x70
   1573a:	460b      	mov	r3, r1
   1573c:	3101      	adds	r1, #1
   1573e:	b2c9      	uxtb	r1, r1
   15740:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
   15744:	4423      	add	r3, r4
   15746:	7698      	strb	r0, [r3, #26]
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   15748:	3a01      	subs	r2, #1
   1574a:	d022      	beq.n	15792 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
   1574c:	2987      	cmp	r1, #135	; 0x87
   1574e:	d9f3      	bls.n	15738 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x90>
   15750:	e01f      	b.n	15792 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xea>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   15752:	692b      	ldr	r3, [r5, #16]
   15754:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   15758:	612b      	str	r3, [r5, #16]
			break;
   1575a:	e006      	b.n	1576a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   1575c:	692b      	ldr	r3, [r5, #16]
   1575e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   15762:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   15764:	f44f 7300 	mov.w	r3, #512	; 0x200
   15768:	662b      	str	r3, [r5, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   1576a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   1576c:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   15770:	d003      	beq.n	1577a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd2>
   15772:	692b      	ldr	r3, [r5, #16]
   15774:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   15778:	612b      	str	r3, [r5, #16]
	return rxBufferLength;
   1577a:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
}
   1577e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		yield();
   15782:	f7f6 fb27 	bl	bdd4 <yield>
		if (tx_state < 3) {
   15786:	2e02      	cmp	r6, #2
   15788:	d9ac      	bls.n	156e4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x3c>
		if (rxBufferLength < sizeof(rxBuffer)) {
   1578a:	f894 10a3 	ldrb.w	r1, [r4, #163]	; 0xa3
   1578e:	2987      	cmp	r1, #135	; 0x87
   15790:	d9cc      	bls.n	1572c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x84>
		uint32_t status = port->MSR; // pg 2884 & 2891
   15792:	696a      	ldr	r2, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
   15794:	f412 6f00 	tst.w	r2, #2048	; 0x800
   15798:	d1db      	bne.n	15752 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xaa>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
   1579a:	f412 5f10 	tst.w	r2, #9216	; 0x2400
   1579e:	d1dd      	bne.n	1575c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
   157a0:	4b0c      	ldr	r3, [pc, #48]	; (157d4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x12c>)
   157a2:	681b      	ldr	r3, [r3, #0]
	operator unsigned long () const { return millis() - ms; }
   157a4:	eba3 030a 	sub.w	r3, r3, sl
   157a8:	2b32      	cmp	r3, #50	; 0x32
   157aa:	d8d7      	bhi.n	1575c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
		if (rxBufferLength >= length && tx_state >= 3) {
   157ac:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
   157b0:	42bb      	cmp	r3, r7
   157b2:	d3e6      	bcc.n	15782 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
   157b4:	2e02      	cmp	r6, #2
   157b6:	d9e4      	bls.n	15782 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
			uint32_t tx_fifo = port->MFSR & 0x07;
   157b8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   157ba:	f013 0f07 	tst.w	r3, #7
   157be:	d1e0      	bne.n	15782 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
   157c0:	f412 7f00 	tst.w	r2, #512	; 0x200
   157c4:	d1d1      	bne.n	1576a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc2>
   157c6:	f1b9 0f00 	cmp.w	r9, #0
   157ca:	d1da      	bne.n	15782 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xda>
   157cc:	e7cd      	b.n	1576a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc2>
	if (!wait_idle()) return 4;
   157ce:	2004      	movs	r0, #4
   157d0:	e7d5      	b.n	1577e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd6>
   157d2:	bf00      	nop
   157d4:	20008a6c 	.word	0x20008a6c

000157d8 <TwoWire::isr()>:
{
   157d8:	b570      	push	{r4, r5, r6, lr}
   157da:	4604      	mov	r4, r0
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   157dc:	6906      	ldr	r6, [r0, #16]
	uint32_t status = port->SSR;
   157de:	f8d6 5114 	ldr.w	r5, [r6, #276]	; 0x114
	if (w1c_bits) port->SSR = w1c_bits;
   157e2:	f415 6370 	ands.w	r3, r5, #3840	; 0xf00
   157e6:	d001      	beq.n	157ec <TwoWire::isr()+0x14>
   157e8:	f8c6 3114 	str.w	r3, [r6, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
   157ec:	f015 0f02 	tst.w	r5, #2
   157f0:	d011      	beq.n	15816 <TwoWire::isr()+0x3e>
		int rx = port->SRDR;
   157f2:	f8d6 2170 	ldr.w	r2, [r6, #368]	; 0x170
		if (rx & 0x8000) {
   157f6:	f412 4f00 	tst.w	r2, #32768	; 0x8000
   157fa:	d008      	beq.n	1580e <TwoWire::isr()+0x36>
			rxBufferIndex = 0;
   157fc:	2300      	movs	r3, #0
   157fe:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
   15802:	1c59      	adds	r1, r3, #1
   15804:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
   15808:	4423      	add	r3, r4
   1580a:	769a      	strb	r2, [r3, #26]
   1580c:	e003      	b.n	15816 <TwoWire::isr()+0x3e>
		if (rxBufferLength < BUFFER_LENGTH) {
   1580e:	f894 30a3 	ldrb.w	r3, [r4, #163]	; 0xa3
   15812:	2b87      	cmp	r3, #135	; 0x87
   15814:	d9f5      	bls.n	15802 <TwoWire::isr()+0x2a>
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
   15816:	f015 0f01 	tst.w	r5, #1
   1581a:	d01a      	beq.n	15852 <TwoWire::isr()+0x7a>
		if (!transmitting) {
   1581c:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   15820:	b94b      	cbnz	r3, 15836 <TwoWire::isr()+0x5e>
			if (user_onRequest != nullptr) {
   15822:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   15826:	b103      	cbz	r3, 1582a <TwoWire::isr()+0x52>
				(*user_onRequest)();
   15828:	4798      	blx	r3
			txBufferIndex = 0;
   1582a:	2300      	movs	r3, #0
   1582c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
			transmitting = 1;
   15830:	2301      	movs	r3, #1
   15832:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
   15836:	f894 312e 	ldrb.w	r3, [r4, #302]	; 0x12e
   1583a:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
   1583e:	429a      	cmp	r2, r3
   15840:	d91d      	bls.n	1587e <TwoWire::isr()+0xa6>
			port->STDR = txBuffer[txBufferIndex++];
   15842:	1c5a      	adds	r2, r3, #1
   15844:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
   15848:	4423      	add	r3, r4
   1584a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
   1584e:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
   15852:	f415 7f00 	tst.w	r5, #512	; 0x200
   15856:	d011      	beq.n	1587c <TwoWire::isr()+0xa4>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
   15858:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
   1585c:	b118      	cbz	r0, 15866 <TwoWire::isr()+0x8e>
   1585e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   15862:	b103      	cbz	r3, 15866 <TwoWire::isr()+0x8e>
			(*user_onReceive)(rxBufferLength);
   15864:	4798      	blx	r3
		rxBufferIndex = 0;
   15866:	2300      	movs	r3, #0
   15868:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		rxBufferLength = 0;
   1586c:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
		txBufferIndex = 0;
   15870:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
		txBufferLength = 0;
   15874:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
		transmitting = 0;
   15878:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
   1587c:	bd70      	pop	{r4, r5, r6, pc}
			port->STDR = 0;
   1587e:	2300      	movs	r3, #0
   15880:	f8c6 3160 	str.w	r3, [r6, #352]	; 0x160
   15884:	e7e5      	b.n	15852 <TwoWire::isr()+0x7a>
	...

00015888 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
void lpi2c3_isr(void) { Wire2.isr(); }
void lpi2c4_isr(void) { Wire1.isr(); }
void lpi2c2_isr(void) { Wire3.isr(); }
#else
void lpi2c1_isr(void) { Wire.isr(); }
   15888:	b508      	push	{r3, lr}
   1588a:	4802      	ldr	r0, [pc, #8]	; (15894 <lpi2c1_isr()+0xc>)
   1588c:	f7ff ffa4 	bl	157d8 <TwoWire::isr()>
   15890:	bd08      	pop	{r3, pc}
   15892:	bf00      	nop
   15894:	20004e84 	.word	0x20004e84

00015898 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
   15898:	b508      	push	{r3, lr}
   1589a:	4802      	ldr	r0, [pc, #8]	; (158a4 <lpi2c3_isr()+0xc>)
   1589c:	f7ff ff9c 	bl	157d8 <TwoWire::isr()>
   158a0:	bd08      	pop	{r3, pc}
   158a2:	bf00      	nop
   158a4:	20004fc4 	.word	0x20004fc4

000158a8 <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
   158a8:	b508      	push	{r3, lr}
   158aa:	4802      	ldr	r0, [pc, #8]	; (158b4 <lpi2c4_isr()+0xc>)
   158ac:	f7ff ff94 	bl	157d8 <TwoWire::isr()>
   158b0:	bd08      	pop	{r3, pc}
   158b2:	bf00      	nop
   158b4:	20005104 	.word	0x20005104

000158b8 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	IMXRT_LPI2C_t* port = (IMXRT_LPI2C_t*)portAddr;
   158b8:	6903      	ldr	r3, [r0, #16]
	port->MCR = 0;
   158ba:	2200      	movs	r2, #0
   158bc:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
   158be:	4a15      	ldr	r2, [pc, #84]	; (15914 <TwoWire::setClock(unsigned long)+0x5c>)
   158c0:	4291      	cmp	r1, r2
   158c2:	d812      	bhi.n	158ea <TwoWire::setClock(unsigned long)+0x32>
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
   158c4:	4a14      	ldr	r2, [pc, #80]	; (15918 <TwoWire::setClock(unsigned long)+0x60>)
   158c6:	649a      	str	r2, [r3, #72]	; 0x48
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
   158c8:	2201      	movs	r2, #1
   158ca:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
   158cc:	4a13      	ldr	r2, [pc, #76]	; (1591c <TwoWire::setClock(unsigned long)+0x64>)
   158ce:	629a      	str	r2, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
   158d0:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
   158d4:	62da      	str	r2, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
   158d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   158d8:	651a      	str	r2, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
   158da:	2200      	movs	r2, #0
   158dc:	621a      	str	r2, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
   158de:	f04f 1201 	mov.w	r2, #65537	; 0x10001
   158e2:	659a      	str	r2, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
   158e4:	2201      	movs	r2, #1
   158e6:	611a      	str	r2, [r3, #16]
}
   158e8:	4770      	bx	lr
	} else if (frequency < 1000000) {
   158ea:	4a0d      	ldr	r2, [pc, #52]	; (15920 <TwoWire::setClock(unsigned long)+0x68>)
   158ec:	4291      	cmp	r1, r2
   158ee:	d808      	bhi.n	15902 <TwoWire::setClock(unsigned long)+0x4a>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
   158f0:	4a0c      	ldr	r2, [pc, #48]	; (15924 <TwoWire::setClock(unsigned long)+0x6c>)
   158f2:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
   158f4:	2200      	movs	r2, #0
   158f6:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
   158f8:	4a0b      	ldr	r2, [pc, #44]	; (15928 <TwoWire::setClock(unsigned long)+0x70>)
   158fa:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
   158fc:	4a0b      	ldr	r2, [pc, #44]	; (1592c <TwoWire::setClock(unsigned long)+0x74>)
   158fe:	62da      	str	r2, [r3, #44]	; 0x2c
   15900:	e7e9      	b.n	158d6 <TwoWire::setClock(unsigned long)+0x1e>
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
   15902:	4a0b      	ldr	r2, [pc, #44]	; (15930 <TwoWire::setClock(unsigned long)+0x78>)
   15904:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
   15906:	2200      	movs	r2, #0
   15908:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
   1590a:	4a0a      	ldr	r2, [pc, #40]	; (15934 <TwoWire::setClock(unsigned long)+0x7c>)
   1590c:	629a      	str	r2, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
   1590e:	4a07      	ldr	r2, [pc, #28]	; (1592c <TwoWire::setClock(unsigned long)+0x74>)
   15910:	62da      	str	r2, [r3, #44]	; 0x2c
   15912:	e7e0      	b.n	158d6 <TwoWire::setClock(unsigned long)+0x1e>
   15914:	00061a7f 	.word	0x00061a7f
   15918:	1928373b 	.word	0x1928373b
   1591c:	05050bb8 	.word	0x05050bb8
   15920:	000f423f 	.word	0x000f423f
   15924:	0c121a1c 	.word	0x0c121a1c
   15928:	02020e10 	.word	0x02020e10
   1592c:	00057f00 	.word	0x00057f00
   15930:	0407090a 	.word	0x0407090a
   15934:	01010960 	.word	0x01010960

00015938 <AudioStream::update_all()>:
   15938:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1593c:	2240      	movs	r2, #64	; 0x40
   1593e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   15942:	4770      	bx	lr

00015944 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
   15944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
   15946:	4b16      	ldr	r3, [pc, #88]	; (159a0 <software_isr()+0x5c>)
   15948:	685e      	ldr	r6, [r3, #4]
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   1594a:	4b16      	ldr	r3, [pc, #88]	; (159a4 <software_isr()+0x60>)
   1594c:	681c      	ldr	r4, [r3, #0]
   1594e:	b1b4      	cbz	r4, 1597e <software_isr()+0x3a>
		if (p->active) {
			uint32_t cycles = ARM_DWT_CYCCNT;
   15950:	4d13      	ldr	r5, [pc, #76]	; (159a0 <software_isr()+0x5c>)
   15952:	e001      	b.n	15958 <software_isr()+0x14>
	for (p = AudioStream::first_update; p; p = p->next_update) {
   15954:	6964      	ldr	r4, [r4, #20]
   15956:	b194      	cbz	r4, 1597e <software_isr()+0x3a>
		if (p->active) {
   15958:	7a23      	ldrb	r3, [r4, #8]
   1595a:	2b00      	cmp	r3, #0
   1595c:	d0fa      	beq.n	15954 <software_isr()+0x10>
			uint32_t cycles = ARM_DWT_CYCCNT;
   1595e:	686f      	ldr	r7, [r5, #4]
			p->update();
   15960:	6823      	ldr	r3, [r4, #0]
   15962:	681b      	ldr	r3, [r3, #0]
   15964:	4620      	mov	r0, r4
   15966:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   15968:	686b      	ldr	r3, [r5, #4]
   1596a:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
   1596c:	f3c3 128f 	ubfx	r2, r3, #6, #16
   15970:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   15972:	88e1      	ldrh	r1, [r4, #6]
   15974:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
   15978:	bf38      	it	cc
   1597a:	80e2      	strhcc	r2, [r4, #6]
   1597c:	e7ea      	b.n	15954 <software_isr()+0x10>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   1597e:	4b08      	ldr	r3, [pc, #32]	; (159a0 <software_isr()+0x5c>)
   15980:	685b      	ldr	r3, [r3, #4]
   15982:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
   15984:	f3c3 128f 	ubfx	r2, r3, #6, #16
   15988:	4907      	ldr	r1, [pc, #28]	; (159a8 <software_isr()+0x64>)
   1598a:	800a      	strh	r2, [r1, #0]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   1598c:	4907      	ldr	r1, [pc, #28]	; (159ac <software_isr()+0x68>)
   1598e:	8809      	ldrh	r1, [r1, #0]
   15990:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
   15994:	d201      	bcs.n	1599a <software_isr()+0x56>
		AudioStream::cpu_cycles_total_max = totalcycles;
   15996:	4b05      	ldr	r3, [pc, #20]	; (159ac <software_isr()+0x68>)
   15998:	801a      	strh	r2, [r3, #0]

	asm("DSB");
   1599a:	f3bf 8f4f 	dsb	sy
}
   1599e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   159a0:	e0001000 	.word	0xe0001000
   159a4:	20006d60 	.word	0x20006d60
   159a8:	20008c04 	.word	0x20008c04
   159ac:	20008c06 	.word	0x20008c06

000159b0 <AudioStream::allocate()>:
	__disable_irq();
   159b0:	b672      	cpsid	i
	index = memory_pool_first_mask;
   159b2:	4b27      	ldr	r3, [pc, #156]	; (15a50 <AudioStream::allocate()+0xa0>)
   159b4:	881b      	ldrh	r3, [r3, #0]
	p += index;
   159b6:	4a27      	ldr	r2, [pc, #156]	; (15a54 <AudioStream::allocate()+0xa4>)
   159b8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
		if (p >= end) {
   159bc:	3270      	adds	r2, #112	; 0x70
   159be:	4291      	cmp	r1, r2
   159c0:	d20d      	bcs.n	159de <AudioStream::allocate()+0x2e>
   159c2:	460a      	mov	r2, r1
   159c4:	4824      	ldr	r0, [pc, #144]	; (15a58 <AudioStream::allocate()+0xa8>)
   159c6:	1a41      	subs	r1, r0, r1
   159c8:	f103 0c01 	add.w	ip, r3, #1
   159cc:	eb0c 0c91 	add.w	ip, ip, r1, lsr #2
   159d0:	4610      	mov	r0, r2
		avail = *p;
   159d2:	f852 1b04 	ldr.w	r1, [r2], #4
		if (avail) break;
   159d6:	b929      	cbnz	r1, 159e4 <AudioStream::allocate()+0x34>
		index++;
   159d8:	3301      	adds	r3, #1
		if (p >= end) {
   159da:	4563      	cmp	r3, ip
   159dc:	d1f8      	bne.n	159d0 <AudioStream::allocate()+0x20>
			__enable_irq();
   159de:	b662      	cpsie	i
			return NULL;
   159e0:	2000      	movs	r0, #0
}
   159e2:	4770      	bx	lr
{
   159e4:	b500      	push	{lr}
	n = __builtin_clz(avail);
   159e6:	fab1 f281 	clz	r2, r1
	avail &= ~(0x80000000 >> n);
   159ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   159ee:	fa2c fc02 	lsr.w	ip, ip, r2
   159f2:	ea21 010c 	bic.w	r1, r1, ip
	*p = avail;
   159f6:	6001      	str	r1, [r0, #0]
	if (!avail) index++;
   159f8:	b901      	cbnz	r1, 159fc <AudioStream::allocate()+0x4c>
   159fa:	3301      	adds	r3, #1
	memory_pool_first_mask = index;
   159fc:	4914      	ldr	r1, [pc, #80]	; (15a50 <AudioStream::allocate()+0xa0>)
   159fe:	800b      	strh	r3, [r1, #0]
	used = memory_used + 1;
   15a00:	4b16      	ldr	r3, [pc, #88]	; (15a5c <AudioStream::allocate()+0xac>)
   15a02:	8819      	ldrh	r1, [r3, #0]
	memory_used = used;
   15a04:	3101      	adds	r1, #1
   15a06:	fa1f fc81 	uxth.w	ip, r1
   15a0a:	f8a3 c000 	strh.w	ip, [r3]
	__enable_irq();
   15a0e:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
   15a10:	4b10      	ldr	r3, [pc, #64]	; (15a54 <AudioStream::allocate()+0xa4>)
   15a12:	1ac0      	subs	r0, r0, r3
   15a14:	1080      	asrs	r0, r0, #2
	block = memory_pool + ((index << 5) + (31 - n));
   15a16:	eb00 1080 	add.w	r0, r0, r0, lsl #6
   15a1a:	f641 737c 	movw	r3, #8060	; 0x1f7c
   15a1e:	eb03 13c0 	add.w	r3, r3, r0, lsl #7
   15a22:	ebc2 6002 	rsb	r0, r2, r2, lsl #24
   15a26:	ebc2 1280 	rsb	r2, r2, r0, lsl #6
   15a2a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   15a2e:	4a0c      	ldr	r2, [pc, #48]	; (15a60 <AudioStream::allocate()+0xb0>)
   15a30:	6812      	ldr	r2, [r2, #0]
   15a32:	18d0      	adds	r0, r2, r3
	block->ref_count = 1;
   15a34:	f04f 0e01 	mov.w	lr, #1
   15a38:	f802 e003 	strb.w	lr, [r2, r3]
	if (used > memory_used_max) memory_used_max = used;
   15a3c:	4b09      	ldr	r3, [pc, #36]	; (15a64 <AudioStream::allocate()+0xb4>)
   15a3e:	881b      	ldrh	r3, [r3, #0]
   15a40:	428b      	cmp	r3, r1
   15a42:	d202      	bcs.n	15a4a <AudioStream::allocate()+0x9a>
   15a44:	4b07      	ldr	r3, [pc, #28]	; (15a64 <AudioStream::allocate()+0xb4>)
   15a46:	f8a3 c000 	strh.w	ip, [r3]
}
   15a4a:	f85d fb04 	ldr.w	pc, [sp], #4
   15a4e:	bf00      	nop
   15a50:	20008c08 	.word	0x20008c08
   15a54:	20006d64 	.word	0x20006d64
   15a58:	20006dd3 	.word	0x20006dd3
   15a5c:	20008c00 	.word	0x20008c00
   15a60:	20006d5c 	.word	0x20006d5c
   15a64:	20008c02 	.word	0x20008c02

00015a68 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   15a68:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
   15a6a:	b672      	cpsid	i
	if (block->ref_count > 1) {
   15a6c:	7803      	ldrb	r3, [r0, #0]
   15a6e:	2b01      	cmp	r3, #1
   15a70:	d903      	bls.n	15a7a <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
   15a72:	3b01      	subs	r3, #1
   15a74:	7003      	strb	r3, [r0, #0]
	__enable_irq();
   15a76:	b662      	cpsie	i
}
   15a78:	4770      	bx	lr
	uint32_t index = block->memory_pool_index >> 5;
   15a7a:	0951      	lsrs	r1, r2, #5
		memory_pool_available_mask[index] |= mask;
   15a7c:	480b      	ldr	r0, [pc, #44]	; (15aac <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   15a7e:	43d2      	mvns	r2, r2
   15a80:	f002 021f 	and.w	r2, r2, #31
   15a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   15a88:	40d3      	lsrs	r3, r2
		memory_pool_available_mask[index] |= mask;
   15a8a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
   15a8e:	4313      	orrs	r3, r2
   15a90:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   15a94:	4b06      	ldr	r3, [pc, #24]	; (15ab0 <AudioStream::release(audio_block_struct*)+0x48>)
   15a96:	881b      	ldrh	r3, [r3, #0]
   15a98:	428b      	cmp	r3, r1
   15a9a:	d901      	bls.n	15aa0 <AudioStream::release(audio_block_struct*)+0x38>
   15a9c:	4b04      	ldr	r3, [pc, #16]	; (15ab0 <AudioStream::release(audio_block_struct*)+0x48>)
   15a9e:	8019      	strh	r1, [r3, #0]
		memory_used--;
   15aa0:	4a04      	ldr	r2, [pc, #16]	; (15ab4 <AudioStream::release(audio_block_struct*)+0x4c>)
   15aa2:	8813      	ldrh	r3, [r2, #0]
   15aa4:	3b01      	subs	r3, #1
   15aa6:	8013      	strh	r3, [r2, #0]
   15aa8:	e7e5      	b.n	15a76 <AudioStream::release(audio_block_struct*)+0xe>
   15aaa:	bf00      	nop
   15aac:	20006d64 	.word	0x20006d64
   15ab0:	20008c08 	.word	0x20008c08
   15ab4:	20008c00 	.word	0x20008c00

00015ab8 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   15ab8:	68c3      	ldr	r3, [r0, #12]
   15aba:	b95b      	cbnz	r3, 15ad4 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x1c>
   15abc:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
   15abe:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
   15ac2:	7808      	ldrb	r0, [r1, #0]
   15ac4:	3001      	adds	r0, #1
   15ac6:	7008      	strb	r0, [r1, #0]
   15ac8:	e010      	b.n	15aec <AudioStream::transmit(audio_block_struct*, unsigned char)+0x34>
}
   15aca:	f85d 4b04 	ldr.w	r4, [sp], #4
   15ace:	4770      	bx	lr
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   15ad0:	68db      	ldr	r3, [r3, #12]
   15ad2:	b193      	cbz	r3, 15afa <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
		if (c->src_index == index) {
   15ad4:	7a18      	ldrb	r0, [r3, #8]
   15ad6:	4290      	cmp	r0, r2
   15ad8:	d1fa      	bne.n	15ad0 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x18>
{
   15ada:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
   15adc:	6858      	ldr	r0, [r3, #4]
   15ade:	f893 c009 	ldrb.w	ip, [r3, #9]
   15ae2:	6900      	ldr	r0, [r0, #16]
   15ae4:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
   15ae8:	2c00      	cmp	r4, #0
   15aea:	d0e8      	beq.n	15abe <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   15aec:	68db      	ldr	r3, [r3, #12]
   15aee:	2b00      	cmp	r3, #0
   15af0:	d0eb      	beq.n	15aca <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
		if (c->src_index == index) {
   15af2:	7a18      	ldrb	r0, [r3, #8]
   15af4:	4290      	cmp	r0, r2
   15af6:	d1f9      	bne.n	15aec <AudioStream::transmit(audio_block_struct*, unsigned char)+0x34>
   15af8:	e7f0      	b.n	15adc <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
   15afa:	4770      	bx	lr

00015afc <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
   15afc:	7a43      	ldrb	r3, [r0, #9]
   15afe:	428b      	cmp	r3, r1
   15b00:	d906      	bls.n	15b10 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
   15b02:	6903      	ldr	r3, [r0, #16]
   15b04:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   15b08:	2200      	movs	r2, #0
   15b0a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
   15b0e:	4770      	bx	lr
	if (index >= num_inputs) return NULL;
   15b10:	2000      	movs	r0, #0
}
   15b12:	4770      	bx	lr

00015b14 <AudioStream::receiveWritable(unsigned int)>:
{
   15b14:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
   15b16:	7a43      	ldrb	r3, [r0, #9]
   15b18:	428b      	cmp	r3, r1
   15b1a:	d91a      	bls.n	15b52 <AudioStream::receiveWritable(unsigned int)+0x3e>
	in = inputQueue[index];
   15b1c:	6903      	ldr	r3, [r0, #16]
   15b1e:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   15b22:	2200      	movs	r2, #0
   15b24:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
   15b28:	b114      	cbz	r4, 15b30 <AudioStream::receiveWritable(unsigned int)+0x1c>
   15b2a:	7823      	ldrb	r3, [r4, #0]
   15b2c:	2b01      	cmp	r3, #1
   15b2e:	d801      	bhi.n	15b34 <AudioStream::receiveWritable(unsigned int)+0x20>
}
   15b30:	4620      	mov	r0, r4
   15b32:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
   15b34:	f7ff ff3c 	bl	159b0 <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
   15b38:	4605      	mov	r5, r0
   15b3a:	b128      	cbz	r0, 15b48 <AudioStream::receiveWritable(unsigned int)+0x34>
   15b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
   15b40:	1d21      	adds	r1, r4, #4
   15b42:	3004      	adds	r0, #4
   15b44:	f001 fbd4 	bl	172f0 <memcpy>
		in->ref_count--;
   15b48:	7823      	ldrb	r3, [r4, #0]
   15b4a:	3b01      	subs	r3, #1
   15b4c:	7023      	strb	r3, [r4, #0]
		in = p;
   15b4e:	462c      	mov	r4, r5
   15b50:	e7ee      	b.n	15b30 <AudioStream::receiveWritable(unsigned int)+0x1c>
	if (index >= num_inputs) return NULL;
   15b52:	2400      	movs	r4, #0
   15b54:	e7ec      	b.n	15b30 <AudioStream::receiveWritable(unsigned int)+0x1c>
	...

00015b58 <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
   15b58:	2200      	movs	r2, #0
   15b5a:	6002      	str	r2, [r0, #0]
   15b5c:	6042      	str	r2, [r0, #4]
	  src_index(0), dest_index(0),
   15b5e:	7202      	strb	r2, [r0, #8]
   15b60:	7242      	strb	r2, [r0, #9]
	  isConnected(false)
   15b62:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
   15b64:	4a02      	ldr	r2, [pc, #8]	; (15b70 <AudioConnection::AudioConnection()+0x18>)
   15b66:	6811      	ldr	r1, [r2, #0]
   15b68:	60c1      	str	r1, [r0, #12]
	AudioStream::unused = this;
   15b6a:	6010      	str	r0, [r2, #0]
}
   15b6c:	4770      	bx	lr
   15b6e:	bf00      	nop
   15b70:	20006dd4 	.word	0x20006dd4

00015b74 <AudioConnection::connect()>:
		if (isConnected) // already connected
   15b74:	7c03      	ldrb	r3, [r0, #16]
   15b76:	2b00      	cmp	r3, #0
   15b78:	d166      	bne.n	15c48 <AudioConnection::connect()+0xd4>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
   15b7a:	6803      	ldr	r3, [r0, #0]
   15b7c:	2b00      	cmp	r3, #0
   15b7e:	d066      	beq.n	15c4e <AudioConnection::connect()+0xda>
   15b80:	6843      	ldr	r3, [r0, #4]
   15b82:	2b00      	cmp	r3, #0
   15b84:	d065      	beq.n	15c52 <AudioConnection::connect()+0xde>
		if (dest_index >= dst->num_inputs) // input number too high
   15b86:	7a42      	ldrb	r2, [r0, #9]
   15b88:	7a5b      	ldrb	r3, [r3, #9]
   15b8a:	429a      	cmp	r2, r3
   15b8c:	d263      	bcs.n	15c56 <AudioConnection::connect()+0xe2>
{
   15b8e:	b410      	push	{r4}
		__disable_irq();
   15b90:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
   15b92:	4b33      	ldr	r3, [pc, #204]	; (15c60 <AudioConnection::connect()+0xec>)
   15b94:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
   15b96:	2c00      	cmp	r4, #0
   15b98:	d13f      	bne.n	15c1a <AudioConnection::connect()+0xa6>
		pp = &AudioStream::unused;
   15b9a:	4b32      	ldr	r3, [pc, #200]	; (15c64 <AudioConnection::connect()+0xf0>)
   15b9c:	681b      	ldr	r3, [r3, #0]
		while (*pp && *pp != this)
   15b9e:	4283      	cmp	r3, r0
   15ba0:	d040      	beq.n	15c24 <AudioConnection::connect()+0xb0>
   15ba2:	2b00      	cmp	r3, #0
   15ba4:	d03e      	beq.n	15c24 <AudioConnection::connect()+0xb0>
			pp = &((*pp)->next_dest);
   15ba6:	461a      	mov	r2, r3
   15ba8:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
   15baa:	4298      	cmp	r0, r3
   15bac:	d001      	beq.n	15bb2 <AudioConnection::connect()+0x3e>
   15bae:	2b00      	cmp	r3, #0
   15bb0:	d1f9      	bne.n	15ba6 <AudioConnection::connect()+0x32>
			pp = &((*pp)->next_dest);
   15bb2:	f102 040c 	add.w	r4, r2, #12
		if (!*pp) // never found ourselves - fail
   15bb6:	2b00      	cmp	r3, #0
   15bb8:	d04f      	beq.n	15c5a <AudioConnection::connect()+0xe6>
		p = src->destination_list; // first AudioConnection
   15bba:	6803      	ldr	r3, [r0, #0]
   15bbc:	68d9      	ldr	r1, [r3, #12]
		if (p == NULL) 
   15bbe:	2900      	cmp	r1, #0
   15bc0:	d032      	beq.n	15c28 <AudioConnection::connect()+0xb4>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
   15bc2:	68cb      	ldr	r3, [r1, #12]
   15bc4:	2b00      	cmp	r3, #0
   15bc6:	d136      	bne.n	15c36 <AudioConnection::connect()+0xc2>
		p = src->destination_list; // first AudioConnection
   15bc8:	460b      	mov	r3, r1
			p->next_dest = this; // end of list, can link ourselves in
   15bca:	60d8      	str	r0, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
   15bcc:	68c3      	ldr	r3, [r0, #12]
   15bce:	6023      	str	r3, [r4, #0]
		next_dest = NULL; // we're last in the source's destination list
   15bd0:	2300      	movs	r3, #0
   15bd2:	60c3      	str	r3, [r0, #12]
		src->numConnections++;
   15bd4:	6801      	ldr	r1, [r0, #0]
   15bd6:	7a8a      	ldrb	r2, [r1, #10]
   15bd8:	3201      	adds	r2, #1
   15bda:	728a      	strb	r2, [r1, #10]
		src->active = true;
   15bdc:	6801      	ldr	r1, [r0, #0]
   15bde:	2201      	movs	r2, #1
   15be0:	720a      	strb	r2, [r1, #8]
		dst->numConnections++;
   15be2:	6844      	ldr	r4, [r0, #4]
   15be4:	7aa1      	ldrb	r1, [r4, #10]
   15be6:	4411      	add	r1, r2
   15be8:	72a1      	strb	r1, [r4, #10]
		dst->active = true;
   15bea:	6841      	ldr	r1, [r0, #4]
   15bec:	720a      	strb	r2, [r1, #8]
		isConnected = true;
   15bee:	7402      	strb	r2, [r0, #16]
		result = 0;
   15bf0:	4618      	mov	r0, r3
	__enable_irq();
   15bf2:	b662      	cpsie	i
}
   15bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
   15bf8:	4770      	bx	lr
				p = p->next_dest;
   15bfa:	68db      	ldr	r3, [r3, #12]
			while (p)
   15bfc:	b153      	cbz	r3, 15c14 <AudioConnection::connect()+0xa0>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
   15bfe:	685a      	ldr	r2, [r3, #4]
   15c00:	428a      	cmp	r2, r1
   15c02:	d1fa      	bne.n	15bfa <AudioConnection::connect()+0x86>
   15c04:	f893 c009 	ldrb.w	ip, [r3, #9]
   15c08:	7a42      	ldrb	r2, [r0, #9]
   15c0a:	4594      	cmp	ip, r2
   15c0c:	d1f5      	bne.n	15bfa <AudioConnection::connect()+0x86>
					__enable_irq();
   15c0e:	b662      	cpsie	i
					return 4;
   15c10:	2004      	movs	r0, #4
   15c12:	e7ef      	b.n	15bf4 <AudioConnection::connect()+0x80>
			s = s->next_update;
   15c14:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
   15c16:	2c00      	cmp	r4, #0
   15c18:	d0bf      	beq.n	15b9a <AudioConnection::connect()+0x26>
			p = s->destination_list;	// first patchCord in this stream's list
   15c1a:	68e3      	ldr	r3, [r4, #12]
			while (p)
   15c1c:	2b00      	cmp	r3, #0
   15c1e:	d0f9      	beq.n	15c14 <AudioConnection::connect()+0xa0>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
   15c20:	6841      	ldr	r1, [r0, #4]
   15c22:	e7ec      	b.n	15bfe <AudioConnection::connect()+0x8a>
		pp = &AudioStream::unused;
   15c24:	4c0f      	ldr	r4, [pc, #60]	; (15c64 <AudioConnection::connect()+0xf0>)
   15c26:	e7c6      	b.n	15bb6 <AudioConnection::connect()+0x42>
			src->destination_list = this;
   15c28:	60d8      	str	r0, [r3, #12]
   15c2a:	e7cf      	b.n	15bcc <AudioConnection::connect()+0x58>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
   15c2c:	68da      	ldr	r2, [r3, #12]
   15c2e:	4619      	mov	r1, r3
   15c30:	2a00      	cmp	r2, #0
   15c32:	d0ca      	beq.n	15bca <AudioConnection::connect()+0x56>
   15c34:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
   15c36:	4288      	cmp	r0, r1
   15c38:	d1f8      	bne.n	15c2c <AudioConnection::connect()+0xb8>
					&& p->src_index == this->src_index && p->dest_index == this->dest_index) 
   15c3a:	8909      	ldrh	r1, [r1, #8]
   15c3c:	8902      	ldrh	r2, [r0, #8]
   15c3e:	4291      	cmp	r1, r2
   15c40:	d1f4      	bne.n	15c2c <AudioConnection::connect()+0xb8>
					__enable_irq();
   15c42:	b662      	cpsie	i
					return 6;
   15c44:	2006      	movs	r0, #6
   15c46:	e7d5      	b.n	15bf4 <AudioConnection::connect()+0x80>
	int result = 1;
   15c48:	2001      	movs	r0, #1
	__enable_irq();
   15c4a:	b662      	cpsie	i
}
   15c4c:	4770      	bx	lr
			result = 3;
   15c4e:	2003      	movs	r0, #3
   15c50:	e7fb      	b.n	15c4a <AudioConnection::connect()+0xd6>
   15c52:	2003      	movs	r0, #3
   15c54:	e7f9      	b.n	15c4a <AudioConnection::connect()+0xd6>
			result = 2;
   15c56:	2002      	movs	r0, #2
   15c58:	e7f7      	b.n	15c4a <AudioConnection::connect()+0xd6>
			result = 5;
   15c5a:	2005      	movs	r0, #5
   15c5c:	e7c9      	b.n	15bf2 <AudioConnection::connect()+0x7e>
   15c5e:	bf00      	nop
   15c60:	20006d60 	.word	0x20006d60
   15c64:	20006dd4 	.word	0x20006dd4

00015c68 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
   15c68:	b510      	push	{r4, lr}
	if (!isConnected)
   15c6a:	7c04      	ldrb	r4, [r0, #16]
   15c6c:	b10c      	cbz	r4, 15c72 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xa>
	int result = 1;
   15c6e:	2001      	movs	r0, #1
}
   15c70:	bd10      	pop	{r4, pc}
		src = &source;
   15c72:	6001      	str	r1, [r0, #0]
		dst = &destination;
   15c74:	6043      	str	r3, [r0, #4]
		src_index = sourceOutput;
   15c76:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
   15c78:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15c7c:	7243      	strb	r3, [r0, #9]
		result = connect();
   15c7e:	f7ff ff79 	bl	15b74 <AudioConnection::connect()>
   15c82:	e7f5      	b.n	15c70 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0x8>

00015c84 <AudioConnection::disconnect()>:
	if (!isConnected) return 1;
   15c84:	7c03      	ldrb	r3, [r0, #16]
   15c86:	2b00      	cmp	r3, #0
   15c88:	d047      	beq.n	15d1a <AudioConnection::disconnect()+0x96>
{
   15c8a:	b510      	push	{r4, lr}
   15c8c:	4604      	mov	r4, r0
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
   15c8e:	6843      	ldr	r3, [r0, #4]
   15c90:	7a42      	ldrb	r2, [r0, #9]
   15c92:	7a5b      	ldrb	r3, [r3, #9]
   15c94:	429a      	cmp	r2, r3
   15c96:	d242      	bcs.n	15d1e <AudioConnection::disconnect()+0x9a>
	__disable_irq();
   15c98:	b672      	cpsid	i
	p = src->destination_list;
   15c9a:	6802      	ldr	r2, [r0, #0]
   15c9c:	68d3      	ldr	r3, [r2, #12]
	if (p == NULL) {
   15c9e:	2b00      	cmp	r3, #0
   15ca0:	d02e      	beq.n	15d00 <AudioConnection::disconnect()+0x7c>
	} else if (p == this) {
   15ca2:	4298      	cmp	r0, r3
   15ca4:	d02f      	beq.n	15d06 <AudioConnection::disconnect()+0x82>
			if (p->next_dest == this) // found the parent of the disconnecting object
   15ca6:	461a      	mov	r2, r3
   15ca8:	68db      	ldr	r3, [r3, #12]
   15caa:	42a3      	cmp	r3, r4
   15cac:	d032      	beq.n	15d14 <AudioConnection::disconnect()+0x90>
		while (p)
   15cae:	2b00      	cmp	r3, #0
   15cb0:	d1f9      	bne.n	15ca6 <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
   15cb2:	6863      	ldr	r3, [r4, #4]
   15cb4:	7a62      	ldrb	r2, [r4, #9]
   15cb6:	691b      	ldr	r3, [r3, #16]
   15cb8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   15cbc:	b140      	cbz	r0, 15cd0 <AudioConnection::disconnect()+0x4c>
		AudioStream::release(dst->inputQueue[dest_index]);
   15cbe:	f7ff fed3 	bl	15a68 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
   15cc2:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
   15cc4:	6863      	ldr	r3, [r4, #4]
   15cc6:	7a62      	ldrb	r2, [r4, #9]
   15cc8:	691b      	ldr	r3, [r3, #16]
   15cca:	2100      	movs	r1, #0
   15ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	src->numConnections--;
   15cd0:	6822      	ldr	r2, [r4, #0]
   15cd2:	7a93      	ldrb	r3, [r2, #10]
   15cd4:	3b01      	subs	r3, #1
   15cd6:	7293      	strb	r3, [r2, #10]
	if (src->numConnections == 0) {
   15cd8:	6823      	ldr	r3, [r4, #0]
   15cda:	7a9a      	ldrb	r2, [r3, #10]
   15cdc:	b902      	cbnz	r2, 15ce0 <AudioConnection::disconnect()+0x5c>
		src->active = false;
   15cde:	721a      	strb	r2, [r3, #8]
	dst->numConnections--;
   15ce0:	6862      	ldr	r2, [r4, #4]
   15ce2:	7a93      	ldrb	r3, [r2, #10]
   15ce4:	3b01      	subs	r3, #1
   15ce6:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
   15ce8:	6863      	ldr	r3, [r4, #4]
   15cea:	7a9a      	ldrb	r2, [r3, #10]
   15cec:	b902      	cbnz	r2, 15cf0 <AudioConnection::disconnect()+0x6c>
		dst->active = false;
   15cee:	721a      	strb	r2, [r3, #8]
	isConnected = false;
   15cf0:	2000      	movs	r0, #0
   15cf2:	7420      	strb	r0, [r4, #16]
	next_dest = dst->unused;
   15cf4:	4b0b      	ldr	r3, [pc, #44]	; (15d24 <AudioConnection::disconnect()+0xa0>)
   15cf6:	681a      	ldr	r2, [r3, #0]
   15cf8:	60e2      	str	r2, [r4, #12]
	dst->unused = this;
   15cfa:	601c      	str	r4, [r3, #0]
	__enable_irq();
   15cfc:	b662      	cpsie	i
}
   15cfe:	bd10      	pop	{r4, pc}
		__enable_irq();
   15d00:	b662      	cpsie	i
		return 3;
   15d02:	2003      	movs	r0, #3
   15d04:	e7fb      	b.n	15cfe <AudioConnection::disconnect()+0x7a>
		if (p->next_dest) {
   15d06:	68db      	ldr	r3, [r3, #12]
   15d08:	b10b      	cbz	r3, 15d0e <AudioConnection::disconnect()+0x8a>
			src->destination_list = next_dest;
   15d0a:	60d3      	str	r3, [r2, #12]
   15d0c:	e7d1      	b.n	15cb2 <AudioConnection::disconnect()+0x2e>
			src->destination_list = NULL;
   15d0e:	2300      	movs	r3, #0
   15d10:	60d3      	str	r3, [r2, #12]
   15d12:	e7ce      	b.n	15cb2 <AudioConnection::disconnect()+0x2e>
				p-> next_dest = this->next_dest; // skip parent's link past us
   15d14:	68e3      	ldr	r3, [r4, #12]
   15d16:	60d3      	str	r3, [r2, #12]
				break;
   15d18:	e7cb      	b.n	15cb2 <AudioConnection::disconnect()+0x2e>
	if (!isConnected) return 1;
   15d1a:	2001      	movs	r0, #1
}
   15d1c:	4770      	bx	lr
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
   15d1e:	2002      	movs	r0, #2
   15d20:	e7ed      	b.n	15cfe <AudioConnection::disconnect()+0x7a>
   15d22:	bf00      	nop
   15d24:	20006dd4 	.word	0x20006dd4

00015d28 <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
   15d28:	b510      	push	{r4, lr}
   15d2a:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
   15d2c:	f7ff ffaa 	bl	15c84 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
   15d30:	4b09      	ldr	r3, [pc, #36]	; (15d58 <AudioConnection::~AudioConnection()+0x30>)
   15d32:	681b      	ldr	r3, [r3, #0]
	while (*pp && *pp != this)
   15d34:	429c      	cmp	r4, r3
   15d36:	d00c      	beq.n	15d52 <AudioConnection::~AudioConnection()+0x2a>
   15d38:	b15b      	cbz	r3, 15d52 <AudioConnection::~AudioConnection()+0x2a>
		pp = &((*pp)->next_dest);
   15d3a:	461a      	mov	r2, r3
   15d3c:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
   15d3e:	429c      	cmp	r4, r3
   15d40:	d001      	beq.n	15d46 <AudioConnection::~AudioConnection()+0x1e>
   15d42:	2b00      	cmp	r3, #0
   15d44:	d1f9      	bne.n	15d3a <AudioConnection::~AudioConnection()+0x12>
		pp = &((*pp)->next_dest);
   15d46:	320c      	adds	r2, #12
	if (*pp) // found ourselves
   15d48:	b10b      	cbz	r3, 15d4e <AudioConnection::~AudioConnection()+0x26>
		*pp = next_dest; // remove ourselves from the unused list
   15d4a:	68e3      	ldr	r3, [r4, #12]
   15d4c:	6013      	str	r3, [r2, #0]
}
   15d4e:	4620      	mov	r0, r4
   15d50:	bd10      	pop	{r4, pc}
	pp = &AudioStream::unused;
   15d52:	4a01      	ldr	r2, [pc, #4]	; (15d58 <AudioConnection::~AudioConnection()+0x30>)
   15d54:	e7f8      	b.n	15d48 <AudioConnection::~AudioConnection()+0x20>
   15d56:	bf00      	nop
   15d58:	20006dd4 	.word	0x20006dd4

00015d5c <AudioStream::update_setup()>:
	if (update_scheduled) return false;
   15d5c:	4b0a      	ldr	r3, [pc, #40]	; (15d88 <AudioStream::update_setup()+0x2c>)
   15d5e:	781b      	ldrb	r3, [r3, #0]
   15d60:	b983      	cbnz	r3, 15d84 <AudioStream::update_setup()+0x28>
   15d62:	4b0a      	ldr	r3, [pc, #40]	; (15d8c <AudioStream::update_setup()+0x30>)
   15d64:	4a0a      	ldr	r2, [pc, #40]	; (15d90 <AudioStream::update_setup()+0x34>)
   15d66:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   15d6a:	4b0a      	ldr	r3, [pc, #40]	; (15d94 <AudioStream::update_setup()+0x38>)
   15d6c:	22d0      	movs	r2, #208	; 0xd0
   15d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   15d72:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   15d76:	2240      	movs	r2, #64	; 0x40
   15d78:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
   15d7c:	2001      	movs	r0, #1
   15d7e:	4b02      	ldr	r3, [pc, #8]	; (15d88 <AudioStream::update_setup()+0x2c>)
   15d80:	7018      	strb	r0, [r3, #0]
	return true;
   15d82:	4770      	bx	lr
	if (update_scheduled) return false;
   15d84:	2000      	movs	r0, #0
}
   15d86:	4770      	bx	lr
   15d88:	20008c23 	.word	0x20008c23
   15d8c:	20006000 	.word	0x20006000
   15d90:	00015945 	.word	0x00015945
   15d94:	e000e400 	.word	0xe000e400

00015d98 <DMAChannel::begin(bool)>:
	__disable_irq();
   15d98:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   15d9a:	b979      	cbnz	r1, 15dbc <DMAChannel::begin(bool)+0x24>
   15d9c:	6803      	ldr	r3, [r0, #0]
   15d9e:	b16b      	cbz	r3, 15dbc <DMAChannel::begin(bool)+0x24>
   15da0:	7902      	ldrb	r2, [r0, #4]
   15da2:	2a0f      	cmp	r2, #15
   15da4:	d80a      	bhi.n	15dbc <DMAChannel::begin(bool)+0x24>
	  && (dma_channel_allocated_mask & (1 << channel))
   15da6:	4922      	ldr	r1, [pc, #136]	; (15e30 <DMAChannel::begin(bool)+0x98>)
   15da8:	8809      	ldrh	r1, [r1, #0]
   15daa:	4111      	asrs	r1, r2
   15dac:	f011 0f01 	tst.w	r1, #1
   15db0:	d004      	beq.n	15dbc <DMAChannel::begin(bool)+0x24>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   15db2:	4920      	ldr	r1, [pc, #128]	; (15e34 <DMAChannel::begin(bool)+0x9c>)
   15db4:	4411      	add	r1, r2
   15db6:	ebb3 1f41 	cmp.w	r3, r1, lsl #5
   15dba:	d010      	beq.n	15dde <DMAChannel::begin(bool)+0x46>
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   15dbc:	4b1c      	ldr	r3, [pc, #112]	; (15e30 <DMAChannel::begin(bool)+0x98>)
   15dbe:	8819      	ldrh	r1, [r3, #0]
   15dc0:	2300      	movs	r3, #0
   15dc2:	fa41 f203 	asr.w	r2, r1, r3
   15dc6:	f012 0f01 	tst.w	r2, #1
   15dca:	d00a      	beq.n	15de2 <DMAChannel::begin(bool)+0x4a>
		if (++ch >= DMA_MAX_CHANNELS) {
   15dcc:	3301      	adds	r3, #1
   15dce:	2b10      	cmp	r3, #16
   15dd0:	d1f7      	bne.n	15dc2 <DMAChannel::begin(bool)+0x2a>
			__enable_irq();
   15dd2:	b662      	cpsie	i
			TCD = (TCD_t *)0;
   15dd4:	2300      	movs	r3, #0
   15dd6:	6003      	str	r3, [r0, #0]
			channel = DMA_MAX_CHANNELS;
   15dd8:	2310      	movs	r3, #16
   15dda:	7103      	strb	r3, [r0, #4]
			return; // no more channels available
   15ddc:	4770      	bx	lr
		__enable_irq();
   15dde:	b662      	cpsie	i
		return;
   15de0:	4770      	bx	lr
{
   15de2:	b410      	push	{r4}
			dma_channel_allocated_mask |= (1 << ch);
   15de4:	2201      	movs	r2, #1
   15de6:	409a      	lsls	r2, r3
   15de8:	4311      	orrs	r1, r2
   15dea:	4a11      	ldr	r2, [pc, #68]	; (15e30 <DMAChannel::begin(bool)+0x98>)
   15dec:	8011      	strh	r1, [r2, #0]
			__enable_irq();
   15dee:	b662      	cpsie	i
	channel = ch;
   15df0:	b2d9      	uxtb	r1, r3
   15df2:	7101      	strb	r1, [r0, #4]
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   15df4:	4c10      	ldr	r4, [pc, #64]	; (15e38 <DMAChannel::begin(bool)+0xa0>)
   15df6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   15df8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
   15dfc:	67e2      	str	r2, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   15dfe:	4a0f      	ldr	r2, [pc, #60]	; (15e3c <DMAChannel::begin(bool)+0xa4>)
   15e00:	f240 4482 	movw	r4, #1154	; 0x482
   15e04:	6014      	str	r4, [r2, #0]
	DMA_CERQ = ch;
   15e06:	7691      	strb	r1, [r2, #26]
	DMA_CERR = ch;
   15e08:	7791      	strb	r1, [r2, #30]
	DMA_CEEI = ch;
   15e0a:	7611      	strb	r1, [r2, #24]
	DMA_CINT = ch;
   15e0c:	77d1      	strb	r1, [r2, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   15e0e:	4a09      	ldr	r2, [pc, #36]	; (15e34 <DMAChannel::begin(bool)+0x9c>)
   15e10:	441a      	add	r2, r3
   15e12:	0153      	lsls	r3, r2, #5
   15e14:	6003      	str	r3, [r0, #0]
	*p++ = 0;
   15e16:	2200      	movs	r2, #0
   15e18:	601a      	str	r2, [r3, #0]
	*p++ = 0;
   15e1a:	605a      	str	r2, [r3, #4]
	*p++ = 0;
   15e1c:	609a      	str	r2, [r3, #8]
	*p++ = 0;
   15e1e:	60da      	str	r2, [r3, #12]
	*p++ = 0;
   15e20:	611a      	str	r2, [r3, #16]
	*p++ = 0;
   15e22:	615a      	str	r2, [r3, #20]
	*p++ = 0;
   15e24:	619a      	str	r2, [r3, #24]
	*p++ = 0;
   15e26:	61da      	str	r2, [r3, #28]
}
   15e28:	f85d 4b04 	ldr.w	r4, [sp], #4
   15e2c:	4770      	bx	lr
   15e2e:	bf00      	nop
   15e30:	20008c0e 	.word	0x20008c0e
   15e34:	02007480 	.word	0x02007480
   15e38:	400fc000 	.word	0x400fc000
   15e3c:	400e8000 	.word	0x400e8000

00015e40 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
   15e40:	7903      	ldrb	r3, [r0, #4]
   15e42:	2b0f      	cmp	r3, #15
   15e44:	d80f      	bhi.n	15e66 <DMAChannel::release()+0x26>
	DMA_CERQ = channel;
   15e46:	4a08      	ldr	r2, [pc, #32]	; (15e68 <DMAChannel::release()+0x28>)
   15e48:	7693      	strb	r3, [r2, #26]
	__disable_irq();
   15e4a:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
   15e4c:	4907      	ldr	r1, [pc, #28]	; (15e6c <DMAChannel::release()+0x2c>)
   15e4e:	7903      	ldrb	r3, [r0, #4]
   15e50:	2201      	movs	r2, #1
   15e52:	409a      	lsls	r2, r3
   15e54:	880b      	ldrh	r3, [r1, #0]
   15e56:	ea23 0302 	bic.w	r3, r3, r2
   15e5a:	800b      	strh	r3, [r1, #0]
	__enable_irq();
   15e5c:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
   15e5e:	2310      	movs	r3, #16
   15e60:	7103      	strb	r3, [r0, #4]
	TCD = (TCD_t *)0;
   15e62:	2300      	movs	r3, #0
   15e64:	6003      	str	r3, [r0, #0]
}
   15e66:	4770      	bx	lr
   15e68:	400e8000 	.word	0x400e8000
   15e6c:	20008c0e 	.word	0x20008c0e

00015e70 <EventResponder::runFromInterrupt()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   15e70:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   15e74:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   15e76:	4b11      	ldr	r3, [pc, #68]	; (15ebc <EventResponder::runFromInterrupt()+0x4c>)
   15e78:	6818      	ldr	r0, [r3, #0]
		if (first) {
   15e7a:	b1d0      	cbz	r0, 15eb2 <EventResponder::runFromInterrupt()+0x42>
{
   15e7c:	b570      	push	{r4, r5, r6, lr}
			firstInterrupt = first->_next;
   15e7e:	461d      	mov	r5, r3
				lastInterrupt = nullptr;
   15e80:	4e0f      	ldr	r6, [pc, #60]	; (15ec0 <EventResponder::runFromInterrupt()+0x50>)
   15e82:	2400      	movs	r4, #0
   15e84:	e009      	b.n	15e9a <EventResponder::runFromInterrupt()+0x2a>
   15e86:	6034      	str	r4, [r6, #0]
   15e88:	e00c      	b.n	15ea4 <EventResponder::runFromInterrupt()+0x34>
			first->_triggered = false;
   15e8a:	7744      	strb	r4, [r0, #29]
			(*(first->_function))(*first);
   15e8c:	6883      	ldr	r3, [r0, #8]
   15e8e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   15e90:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   15e94:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   15e96:	6828      	ldr	r0, [r5, #0]
		if (first) {
   15e98:	b140      	cbz	r0, 15eac <EventResponder::runFromInterrupt()+0x3c>
			firstInterrupt = first->_next;
   15e9a:	6943      	ldr	r3, [r0, #20]
   15e9c:	602b      	str	r3, [r5, #0]
			if (firstInterrupt) {
   15e9e:	2b00      	cmp	r3, #0
   15ea0:	d0f1      	beq.n	15e86 <EventResponder::runFromInterrupt()+0x16>
				firstInterrupt->_prev = nullptr;
   15ea2:	619c      	str	r4, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   15ea4:	2a00      	cmp	r2, #0
   15ea6:	d1f0      	bne.n	15e8a <EventResponder::runFromInterrupt()+0x1a>
   15ea8:	b662      	cpsie	i
   15eaa:	e7ee      	b.n	15e8a <EventResponder::runFromInterrupt()+0x1a>
   15eac:	b902      	cbnz	r2, 15eb0 <EventResponder::runFromInterrupt()+0x40>
   15eae:	b662      	cpsie	i
}
   15eb0:	bd70      	pop	{r4, r5, r6, pc}
   15eb2:	b90a      	cbnz	r2, 15eb8 <EventResponder::runFromInterrupt()+0x48>
   15eb4:	b662      	cpsie	i
			break;
   15eb6:	4770      	bx	lr
   15eb8:	4770      	bx	lr
   15eba:	bf00      	nop
   15ebc:	20006e60 	.word	0x20006e60
   15ec0:	20006e5c 	.word	0x20006e5c

00015ec4 <pendablesrvreq_isr>:
{
   15ec4:	b508      	push	{r3, lr}
	EventResponder::runFromInterrupt();
   15ec6:	f7ff ffd3 	bl	15e70 <EventResponder::runFromInterrupt()>
}
   15eca:	bd08      	pop	{r3, pc}

00015ecc <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   15ecc:	4b04      	ldr	r3, [pc, #16]	; (15ee0 <systick_isr+0x14>)
   15ece:	685a      	ldr	r2, [r3, #4]
   15ed0:	4b04      	ldr	r3, [pc, #16]	; (15ee4 <systick_isr+0x18>)
   15ed2:	601a      	str	r2, [r3, #0]
	systick_millis_count++;
   15ed4:	4a04      	ldr	r2, [pc, #16]	; (15ee8 <systick_isr+0x1c>)
   15ed6:	6813      	ldr	r3, [r2, #0]
   15ed8:	3301      	adds	r3, #1
   15eda:	6013      	str	r3, [r2, #0]
}
   15edc:	4770      	bx	lr
   15ede:	bf00      	nop
   15ee0:	e0001000 	.word	0xe0001000
   15ee4:	20008a68 	.word	0x20008a68
   15ee8:	20008a6c 	.word	0x20008a6c

00015eec <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#1}::_FUN(void*)>:
        invoke_ptr{ [](storage_ptr_t, Args&&...) -> R
   15eec:	4770      	bx	lr

00015eee <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#2}::_FUN(void*, void*)>:
        copy_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   15eee:	4770      	bx	lr

00015ef0 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*, void*)#3}::_FUN(void*, void*)>:
        relocate_ptr{ [](storage_ptr_t, storage_ptr_t) -> void {} },
   15ef0:	4770      	bx	lr

00015ef2 <teensy::inplace_function_detail::vtable<void>::vtable()::{lambda(void*)#4}::_FUN(void*)>:
        destructor_ptr{ [](storage_ptr_t) -> void {} }
   15ef2:	4770      	bx	lr

00015ef4 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   15ef4:	b508      	push	{r3, lr}
        return operator bool();
    }

    explicit constexpr operator bool() const noexcept
    {
        return vtable_ptr_ != std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   15ef6:	4b1f      	ldr	r3, [pc, #124]	; (15f74 <pit_isr()+0x80>)
   15ef8:	681b      	ldr	r3, [r3, #0]

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   15efa:	4a1f      	ldr	r2, [pc, #124]	; (15f78 <pit_isr()+0x84>)
   15efc:	4293      	cmp	r3, r2
   15efe:	d008      	beq.n	15f12 <pit_isr()+0x1e>
   15f00:	4a1e      	ldr	r2, [pc, #120]	; (15f7c <pit_isr()+0x88>)
   15f02:	68d2      	ldr	r2, [r2, #12]
   15f04:	b12a      	cbz	r2, 15f12 <pit_isr()+0x1e>
   15f06:	4a1d      	ldr	r2, [pc, #116]	; (15f7c <pit_isr()+0x88>)
   15f08:	2101      	movs	r1, #1
   15f0a:	60d1      	str	r1, [r2, #12]
        return vtable_ptr_->invoke_ptr(
   15f0c:	681b      	ldr	r3, [r3, #0]
   15f0e:	481c      	ldr	r0, [pc, #112]	; (15f80 <pit_isr()+0x8c>)
   15f10:	4798      	blx	r3
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   15f12:	4b18      	ldr	r3, [pc, #96]	; (15f74 <pit_isr()+0x80>)
   15f14:	699a      	ldr	r2, [r3, #24]
   15f16:	4b18      	ldr	r3, [pc, #96]	; (15f78 <pit_isr()+0x84>)
   15f18:	429a      	cmp	r2, r3
   15f1a:	d00a      	beq.n	15f32 <pit_isr()+0x3e>
   15f1c:	4b17      	ldr	r3, [pc, #92]	; (15f7c <pit_isr()+0x88>)
   15f1e:	69db      	ldr	r3, [r3, #28]
   15f20:	b13b      	cbz	r3, 15f32 <pit_isr()+0x3e>
   15f22:	4b16      	ldr	r3, [pc, #88]	; (15f7c <pit_isr()+0x88>)
   15f24:	2201      	movs	r2, #1
   15f26:	61da      	str	r2, [r3, #28]
   15f28:	4812      	ldr	r0, [pc, #72]	; (15f74 <pit_isr()+0x80>)
   15f2a:	6983      	ldr	r3, [r0, #24]
   15f2c:	681b      	ldr	r3, [r3, #0]
   15f2e:	3020      	adds	r0, #32
   15f30:	4798      	blx	r3
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   15f32:	4b10      	ldr	r3, [pc, #64]	; (15f74 <pit_isr()+0x80>)
   15f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   15f36:	4b10      	ldr	r3, [pc, #64]	; (15f78 <pit_isr()+0x84>)
   15f38:	429a      	cmp	r2, r3
   15f3a:	d00a      	beq.n	15f52 <pit_isr()+0x5e>
   15f3c:	4b0f      	ldr	r3, [pc, #60]	; (15f7c <pit_isr()+0x88>)
   15f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   15f40:	b13b      	cbz	r3, 15f52 <pit_isr()+0x5e>
   15f42:	4b0e      	ldr	r3, [pc, #56]	; (15f7c <pit_isr()+0x88>)
   15f44:	2201      	movs	r2, #1
   15f46:	62da      	str	r2, [r3, #44]	; 0x2c
   15f48:	480a      	ldr	r0, [pc, #40]	; (15f74 <pit_isr()+0x80>)
   15f4a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   15f4c:	681b      	ldr	r3, [r3, #0]
   15f4e:	3038      	adds	r0, #56	; 0x38
   15f50:	4798      	blx	r3
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   15f52:	4b08      	ldr	r3, [pc, #32]	; (15f74 <pit_isr()+0x80>)
   15f54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   15f56:	4b08      	ldr	r3, [pc, #32]	; (15f78 <pit_isr()+0x84>)
   15f58:	429a      	cmp	r2, r3
   15f5a:	d00a      	beq.n	15f72 <pit_isr()+0x7e>
   15f5c:	4b07      	ldr	r3, [pc, #28]	; (15f7c <pit_isr()+0x88>)
   15f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   15f60:	b13b      	cbz	r3, 15f72 <pit_isr()+0x7e>
   15f62:	4b06      	ldr	r3, [pc, #24]	; (15f7c <pit_isr()+0x88>)
   15f64:	2201      	movs	r2, #1
   15f66:	63da      	str	r2, [r3, #60]	; 0x3c
   15f68:	4802      	ldr	r0, [pc, #8]	; (15f74 <pit_isr()+0x80>)
   15f6a:	6c83      	ldr	r3, [r0, #72]	; 0x48
   15f6c:	681b      	ldr	r3, [r3, #0]
   15f6e:	3050      	adds	r0, #80	; 0x50
   15f70:	4798      	blx	r3
#endif
}
   15f72:	bd08      	pop	{r3, pc}
   15f74:	200062c0 	.word	0x200062c0
   15f78:	20002228 	.word	0x20002228
   15f7c:	40084100 	.word	0x40084100
   15f80:	200062c8 	.word	0x200062c8

00015f84 <__tcf_0>:
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   15f84:	b538      	push	{r3, r4, r5, lr}
   15f86:	4d06      	ldr	r5, [pc, #24]	; (15fa0 <__tcf_0+0x1c>)
   15f88:	f105 0450 	add.w	r4, r5, #80	; 0x50
   15f8c:	3d10      	subs	r5, #16
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   15f8e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   15f92:	68db      	ldr	r3, [r3, #12]
   15f94:	4620      	mov	r0, r4
   15f96:	4798      	blx	r3
   15f98:	3c18      	subs	r4, #24
   15f9a:	42ac      	cmp	r4, r5
   15f9c:	d1f7      	bne.n	15f8e <__tcf_0+0xa>
   15f9e:	bd38      	pop	{r3, r4, r5, pc}
   15fa0:	200062c0 	.word	0x200062c0

00015fa4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)>:
{
   15fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15fa8:	b087      	sub	sp, #28
   15faa:	4604      	mov	r4, r0
   15fac:	4616      	mov	r6, r2
	if (channel) {
   15fae:	6803      	ldr	r3, [r0, #0]
   15fb0:	2b00      	cmp	r3, #0
   15fb2:	d052      	beq.n	1605a <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xb6>
		channel->TCTRL = 0;
   15fb4:	2200      	movs	r2, #0
   15fb6:	609a      	str	r2, [r3, #8]
		channel->TFLG = 1;
   15fb8:	6803      	ldr	r3, [r0, #0]
   15fba:	2201      	movs	r2, #1
   15fbc:	60da      	str	r2, [r3, #12]
	int index = channel - IMXRT_PIT_CHANNELS;
   15fbe:	6823      	ldr	r3, [r4, #0]
   15fc0:	4d31      	ldr	r5, [pc, #196]	; (16088 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe4>)
   15fc2:	441d      	add	r5, r3
   15fc4:	112d      	asrs	r5, r5, #4
        vtable_ptr_{other.vtable_ptr_}
   15fc6:	f851 3b08 	ldr.w	r3, [r1], #8
   15fca:	9300      	str	r3, [sp, #0]
        vtable_ptr_->copy_ptr(
   15fcc:	685b      	ldr	r3, [r3, #4]
   15fce:	a802      	add	r0, sp, #8
   15fd0:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   15fd2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 160ac <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x108>
   15fd6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
   15fda:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   15fde:	f100 0708 	add.w	r7, r0, #8
   15fe2:	eb05 0945 	add.w	r9, r5, r5, lsl #1
   15fe6:	ea4f 09c9 	mov.w	r9, r9, lsl #3
   15fea:	f858 3009 	ldr.w	r3, [r8, r9]
   15fee:	68db      	ldr	r3, [r3, #12]
   15ff0:	4638      	mov	r0, r7
   15ff2:	4798      	blx	r3
      _Tp __old_val = std::move(__obj);
   15ff4:	9b00      	ldr	r3, [sp, #0]
      __obj = std::forward<_Up>(__new_val);
   15ff6:	4a25      	ldr	r2, [pc, #148]	; (1608c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xe8>)
   15ff8:	9200      	str	r2, [sp, #0]
        vtable_ptr_ = std::exchange(other.vtable_ptr_, std::addressof(inplace_function_detail::empty_vtable<R, Args...>));
   15ffa:	f848 3009 	str.w	r3, [r8, r9]
        vtable_ptr_->relocate_ptr(
   15ffe:	689b      	ldr	r3, [r3, #8]
   16000:	a902      	add	r1, sp, #8
   16002:	4638      	mov	r0, r7
   16004:	4798      	blx	r3
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   16006:	9b00      	ldr	r3, [sp, #0]
   16008:	68db      	ldr	r3, [r3, #12]
   1600a:	a802      	add	r0, sp, #8
   1600c:	4798      	blx	r3
	channel->LDVAL = cycles;
   1600e:	6823      	ldr	r3, [r4, #0]
   16010:	601e      	str	r6, [r3, #0]
	channel->TCTRL = 3;
   16012:	6823      	ldr	r3, [r4, #0]
   16014:	2203      	movs	r2, #3
   16016:	609a      	str	r2, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   16018:	4a1d      	ldr	r2, [pc, #116]	; (16090 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xec>)
   1601a:	7923      	ldrb	r3, [r4, #4]
   1601c:	5553      	strb	r3, [r2, r5]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   1601e:	7813      	ldrb	r3, [r2, #0]
   16020:	7851      	ldrb	r1, [r2, #1]
   16022:	428b      	cmp	r3, r1
   16024:	bf28      	it	cs
   16026:	460b      	movcs	r3, r1
   16028:	7891      	ldrb	r1, [r2, #2]
   1602a:	428b      	cmp	r3, r1
   1602c:	bf28      	it	cs
   1602e:	460b      	movcs	r3, r1
   16030:	78d2      	ldrb	r2, [r2, #3]
   16032:	4293      	cmp	r3, r2
   16034:	bf28      	it	cs
   16036:	4613      	movcs	r3, r2
   16038:	4a16      	ldr	r2, [pc, #88]	; (16094 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf0>)
   1603a:	4917      	ldr	r1, [pc, #92]	; (16098 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf4>)
   1603c:	f8c2 1228 	str.w	r1, [r2, #552]	; 0x228
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   16040:	4a16      	ldr	r2, [pc, #88]	; (1609c <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xf8>)
   16042:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
	NVIC_ENABLE_IRQ(IRQ_PIT);
   16046:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1604a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1604e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	return true;
   16052:	2001      	movs	r0, #1
}
   16054:	b007      	add	sp, #28
   16056:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1605a:	4a11      	ldr	r2, [pc, #68]	; (160a0 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xfc>)
   1605c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1605e:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   16062:	66d3      	str	r3, [r2, #108]	; 0x6c
		PIT_MCR = 1;
   16064:	4b0f      	ldr	r3, [pc, #60]	; (160a4 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x100>)
   16066:	2201      	movs	r2, #1
   16068:	601a      	str	r2, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   1606a:	f503 7380 	add.w	r3, r3, #256	; 0x100
   1606e:	6003      	str	r3, [r0, #0]
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   16070:	4a0d      	ldr	r2, [pc, #52]	; (160a8 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x104>)
			if (channel->TCTRL == 0) break;
   16072:	6823      	ldr	r3, [r4, #0]
   16074:	6898      	ldr	r0, [r3, #8]
   16076:	2800      	cmp	r0, #0
   16078:	d0a1      	beq.n	15fbe <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0x1a>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   1607a:	3310      	adds	r3, #16
   1607c:	6023      	str	r3, [r4, #0]
   1607e:	4293      	cmp	r3, r2
   16080:	d9f7      	bls.n	16072 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xce>
				channel = NULL;
   16082:	2000      	movs	r0, #0
   16084:	6020      	str	r0, [r4, #0]
				return false;
   16086:	e7e5      	b.n	16054 <IntervalTimer::beginCycles(teensy::inplace_function<void (), 16u, 8u>, unsigned long)+0xb0>
   16088:	bff7bf00 	.word	0xbff7bf00
   1608c:	20002228 	.word	0x20002228
   16090:	2000524c 	.word	0x2000524c
   16094:	20006000 	.word	0x20006000
   16098:	00015ef5 	.word	0x00015ef5
   1609c:	e000e400 	.word	0xe000e400
   160a0:	400fc000 	.word	0x400fc000
   160a4:	40084000 	.word	0x40084000
   160a8:	4008413f 	.word	0x4008413f
   160ac:	200062c0 	.word	0x200062c0

000160b0 <IntervalTimer::end()>:
void IntervalTimer::end() {
   160b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (channel) {
   160b2:	6803      	ldr	r3, [r0, #0]
   160b4:	b35b      	cbz	r3, 1610e <IntervalTimer::end()+0x5e>
   160b6:	4605      	mov	r5, r0
		int index = channel - IMXRT_PIT_CHANNELS;
   160b8:	4c15      	ldr	r4, [pc, #84]	; (16110 <IntervalTimer::end()+0x60>)
   160ba:	441c      	add	r4, r3
   160bc:	1124      	asrs	r4, r4, #4
        vtable_ptr_->destructor_ptr(std::addressof(storage_));
   160be:	4f15      	ldr	r7, [pc, #84]	; (16114 <IntervalTimer::end()+0x64>)
   160c0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   160c4:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
   160c8:	eb04 0644 	add.w	r6, r4, r4, lsl #1
   160cc:	00f6      	lsls	r6, r6, #3
   160ce:	59bb      	ldr	r3, [r7, r6]
   160d0:	68db      	ldr	r3, [r3, #12]
   160d2:	3008      	adds	r0, #8
   160d4:	4798      	blx	r3
        vtable_ptr_ = std::addressof(inplace_function_detail::empty_vtable<R, Args...>);
   160d6:	4b10      	ldr	r3, [pc, #64]	; (16118 <IntervalTimer::end()+0x68>)
   160d8:	51bb      	str	r3, [r7, r6]
		channel->TCTRL = 0;
   160da:	682b      	ldr	r3, [r5, #0]
   160dc:	2100      	movs	r1, #0
   160de:	6099      	str	r1, [r3, #8]
		channel->TFLG = 1;
   160e0:	682b      	ldr	r3, [r5, #0]
   160e2:	2201      	movs	r2, #1
   160e4:	60da      	str	r2, [r3, #12]
		nvic_priorites[index] = 255;
   160e6:	4a0d      	ldr	r2, [pc, #52]	; (1611c <IntervalTimer::end()+0x6c>)
   160e8:	23ff      	movs	r3, #255	; 0xff
   160ea:	5513      	strb	r3, [r2, r4]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   160ec:	7813      	ldrb	r3, [r2, #0]
   160ee:	7850      	ldrb	r0, [r2, #1]
   160f0:	4283      	cmp	r3, r0
   160f2:	bf28      	it	cs
   160f4:	4603      	movcs	r3, r0
   160f6:	7890      	ldrb	r0, [r2, #2]
   160f8:	4283      	cmp	r3, r0
   160fa:	bf28      	it	cs
   160fc:	4603      	movcs	r3, r0
   160fe:	78d2      	ldrb	r2, [r2, #3]
   16100:	4293      	cmp	r3, r2
   16102:	bf28      	it	cs
   16104:	4613      	movcs	r3, r2
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   16106:	4a06      	ldr	r2, [pc, #24]	; (16120 <IntervalTimer::end()+0x70>)
   16108:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
   1610c:	6029      	str	r1, [r5, #0]
}
   1610e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16110:	bff7bf00 	.word	0xbff7bf00
   16114:	200062c0 	.word	0x200062c0
   16118:	20002228 	.word	0x20002228
   1611c:	2000524c 	.word	0x2000524c
   16120:	e000e400 	.word	0xe000e400

00016124 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE>:
}
   16124:	b508      	push	{r3, lr}
        vtable_ptr_{std::addressof(inplace_function_detail::empty_vtable<R, Args...>)}
   16126:	4b06      	ldr	r3, [pc, #24]	; (16140 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x1c>)
   16128:	4a06      	ldr	r2, [pc, #24]	; (16144 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x20>)
   1612a:	601a      	str	r2, [r3, #0]
   1612c:	619a      	str	r2, [r3, #24]
   1612e:	631a      	str	r2, [r3, #48]	; 0x30
   16130:	649a      	str	r2, [r3, #72]	; 0x48
static IntervalTimer::callback_t funct_table[4] __attribute((aligned(32))) = {nullptr, nullptr, nullptr, nullptr};
   16132:	4a05      	ldr	r2, [pc, #20]	; (16148 <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x24>)
   16134:	4905      	ldr	r1, [pc, #20]	; (1614c <_GLOBAL__sub_I__ZN13IntervalTimer14nvic_prioritesE+0x28>)
   16136:	2000      	movs	r0, #0
   16138:	f003 fb06 	bl	19748 <__aeabi_atexit>
}
   1613c:	bd08      	pop	{r3, pc}
   1613e:	bf00      	nop
   16140:	200062c0 	.word	0x200062c0
   16144:	20002228 	.word	0x20002228
   16148:	20005258 	.word	0x20005258
   1614c:	00015f85 	.word	0x00015f85

00016150 <Print::write(unsigned char const*, unsigned int)>:
{
   16150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buffer == nullptr) return 0;
   16152:	b179      	cbz	r1, 16174 <Print::write(unsigned char const*, unsigned int)+0x24>
   16154:	4606      	mov	r6, r0
   16156:	460c      	mov	r4, r1
	while (size--) count += write(*buffer++);
   16158:	b172      	cbz	r2, 16178 <Print::write(unsigned char const*, unsigned int)+0x28>
   1615a:	188f      	adds	r7, r1, r2
	size_t count = 0;
   1615c:	2500      	movs	r5, #0
	while (size--) count += write(*buffer++);
   1615e:	6833      	ldr	r3, [r6, #0]
   16160:	681b      	ldr	r3, [r3, #0]
   16162:	f814 1b01 	ldrb.w	r1, [r4], #1
   16166:	4630      	mov	r0, r6
   16168:	4798      	blx	r3
   1616a:	4405      	add	r5, r0
   1616c:	42a7      	cmp	r7, r4
   1616e:	d1f6      	bne.n	1615e <Print::write(unsigned char const*, unsigned int)+0xe>
}
   16170:	4628      	mov	r0, r5
   16172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (buffer == nullptr) return 0;
   16174:	2500      	movs	r5, #0
   16176:	e7fb      	b.n	16170 <Print::write(unsigned char const*, unsigned int)+0x20>
	size_t count = 0;
   16178:	4615      	mov	r5, r2
   1617a:	e7f9      	b.n	16170 <Print::write(unsigned char const*, unsigned int)+0x20>

0001617c <Print::print(String const&)>:
{
   1617c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16180:	b08b      	sub	sp, #44	; 0x2c
	inline unsigned int length(void) const {return len;}
   16182:	688c      	ldr	r4, [r1, #8]
	while (len > 0) {
   16184:	b1ec      	cbz	r4, 161c2 <Print::print(String const&)+0x46>
   16186:	4606      	mov	r6, r0
   16188:	4688      	mov	r8, r1
	unsigned int index = 0;
   1618a:	2500      	movs	r5, #0
	size_t count = 0;
   1618c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
   1618e:	f04f 0921 	mov.w	r9, #33	; 0x21
   16192:	462b      	mov	r3, r5
   16194:	464a      	mov	r2, r9
   16196:	a901      	add	r1, sp, #4
   16198:	4640      	mov	r0, r8
   1619a:	f000 fbd9 	bl	16950 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
   1619e:	4622      	mov	r2, r4
   161a0:	2c20      	cmp	r4, #32
   161a2:	bf28      	it	cs
   161a4:	2220      	movcs	r2, #32
		index += nbytes;
   161a6:	4415      	add	r5, r2
		len -= nbytes;
   161a8:	1aa4      	subs	r4, r4, r2
		count += write(buffer, nbytes);
   161aa:	6833      	ldr	r3, [r6, #0]
   161ac:	685b      	ldr	r3, [r3, #4]
   161ae:	a901      	add	r1, sp, #4
   161b0:	4630      	mov	r0, r6
   161b2:	4798      	blx	r3
   161b4:	4407      	add	r7, r0
	while (len > 0) {
   161b6:	2c00      	cmp	r4, #0
   161b8:	d1eb      	bne.n	16192 <Print::print(String const&)+0x16>
}
   161ba:	4638      	mov	r0, r7
   161bc:	b00b      	add	sp, #44	; 0x2c
   161be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	size_t count = 0;
   161c2:	4627      	mov	r7, r4
	return count;
   161c4:	e7f9      	b.n	161ba <Print::print(String const&)+0x3e>

000161c6 <Print::println()>:
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
   161c6:	b500      	push	{lr}
   161c8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
   161ca:	f640 230d 	movw	r3, #2573	; 0xa0d
   161ce:	f8ad 3004 	strh.w	r3, [sp, #4]
	return write(buf, 2);
   161d2:	6803      	ldr	r3, [r0, #0]
   161d4:	685b      	ldr	r3, [r3, #4]
   161d6:	2202      	movs	r2, #2
   161d8:	a901      	add	r1, sp, #4
   161da:	4798      	blx	r3
}
   161dc:	b003      	add	sp, #12
   161de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000161e4 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
   161e4:	b510      	push	{r4, lr}
	if (file >= 0 && file <= 2) file = (int)&Serial;
   161e6:	4b04      	ldr	r3, [pc, #16]	; (161f8 <_write+0x14>)
   161e8:	2802      	cmp	r0, #2
   161ea:	bf88      	it	hi
   161ec:	4603      	movhi	r3, r0
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   161ee:	6818      	ldr	r0, [r3, #0]
   161f0:	6844      	ldr	r4, [r0, #4]
   161f2:	4618      	mov	r0, r3
   161f4:	47a0      	blx	r4
}
   161f6:	bd10      	pop	{r4, pc}
   161f8:	20004e74 	.word	0x20004e74

000161fc <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
   161fc:	b40e      	push	{r1, r2, r3}
   161fe:	b500      	push	{lr}
   16200:	b082      	sub	sp, #8
   16202:	aa03      	add	r2, sp, #12
   16204:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
   16208:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	va_end(ap);
	return 0;  // TODO: make this work with -std=c++0x
#else
	int retval = vdprintf((int)this, format, ap);
   1620a:	f00c fc01 	bl	22a10 <vdprintf>
	va_end(ap);
	return retval;
#endif
}
   1620e:	b002      	add	sp, #8
   16210:	f85d eb04 	ldr.w	lr, [sp], #4
   16214:	b003      	add	sp, #12
   16216:	4770      	bx	lr

00016218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return retval;
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
   16218:	b530      	push	{r4, r5, lr}
   1621a:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
   1621c:	b92a      	cbnz	r2, 1622a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x12>
		return write((uint8_t)n);
   1621e:	6803      	ldr	r3, [r0, #0]
   16220:	681b      	ldr	r3, [r3, #0]
   16222:	b2c9      	uxtb	r1, r1
   16224:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
   16226:	b00b      	add	sp, #44	; 0x2c
   16228:	bd30      	pop	{r4, r5, pc}
   1622a:	4696      	mov	lr, r2
		base = 10;
   1622c:	2a01      	cmp	r2, #1
   1622e:	bf14      	ite	ne
   16230:	4696      	movne	lr, r2
   16232:	f04f 0e0a 	moveq.w	lr, #10
	if (n == 0) {
   16236:	b9b9      	cbnz	r1, 16268 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x50>
		buf[sizeof(buf) - 1] = '0';
   16238:	2230      	movs	r2, #48	; 0x30
   1623a:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
   1623e:	f04f 0c21 	mov.w	ip, #33	; 0x21
	if (sign) {
   16242:	b14b      	cbz	r3, 16258 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x40>
		i--;
   16244:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   16248:	fa5f fc8c 	uxtb.w	ip, ip
		buf[i] = '-';
   1624c:	f10c 0328 	add.w	r3, ip, #40	; 0x28
   16250:	446b      	add	r3, sp
   16252:	222d      	movs	r2, #45	; 0x2d
   16254:	f803 2c24 	strb.w	r2, [r3, #-36]
	return write(buf + i, sizeof(buf) - i);
   16258:	6803      	ldr	r3, [r0, #0]
   1625a:	685b      	ldr	r3, [r3, #4]
   1625c:	f1cc 0222 	rsb	r2, ip, #34	; 0x22
   16260:	a901      	add	r1, sp, #4
   16262:	4461      	add	r1, ip
   16264:	4798      	blx	r3
   16266:	e7de      	b.n	16226 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0xe>
		i = sizeof(buf) - 1;
   16268:	f04f 0c21 	mov.w	ip, #33	; 0x21
			digit = n % base;
   1626c:	4674      	mov	r4, lr
   1626e:	e004      	b.n	1627a <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x62>
			i--;
   16270:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   16274:	fa5f fc8c 	uxtb.w	ip, ip
			n /= base;
   16278:	4611      	mov	r1, r2
			digit = n % base;
   1627a:	fbb1 f2fe 	udiv	r2, r1, lr
   1627e:	fb0e 1212 	mls	r2, lr, r2, r1
   16282:	b2d2      	uxtb	r2, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   16284:	2a09      	cmp	r2, #9
   16286:	bf94      	ite	ls
   16288:	3230      	addls	r2, #48	; 0x30
   1628a:	3237      	addhi	r2, #55	; 0x37
   1628c:	b2d2      	uxtb	r2, r2
   1628e:	f10c 0528 	add.w	r5, ip, #40	; 0x28
   16292:	446d      	add	r5, sp
   16294:	f805 2c24 	strb.w	r2, [r5, #-36]
			n /= base;
   16298:	fbb1 f2f4 	udiv	r2, r1, r4
			if (n == 0) break;
   1629c:	428c      	cmp	r4, r1
   1629e:	d9e7      	bls.n	16270 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x58>
   162a0:	e7cf      	b.n	16242 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x2a>

000162a2 <Print::print(long)>:
{
   162a2:	b508      	push	{r3, lr}
	if (n < 0) {
   162a4:	2900      	cmp	r1, #0
   162a6:	db04      	blt.n	162b2 <Print::print(long)+0x10>
	uint8_t sign=0;
   162a8:	2300      	movs	r3, #0
	return printNumber(n, 10, sign);
   162aa:	220a      	movs	r2, #10
   162ac:	f7ff ffb4 	bl	16218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
}
   162b0:	bd08      	pop	{r3, pc}
		n = -n;
   162b2:	4249      	negs	r1, r1
		sign = '-';
   162b4:	232d      	movs	r3, #45	; 0x2d
   162b6:	e7f8      	b.n	162aa <Print::print(long)+0x8>

000162b8 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)>:

size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
   162b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   162bc:	b092      	sub	sp, #72	; 0x48
   162be:	f89d 7068 	ldrb.w	r7, [sp, #104]	; 0x68
   162c2:	f89d a06c 	ldrb.w	sl, [sp, #108]	; 0x6c
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
   162c6:	2f01      	cmp	r7, #1
   162c8:	d949      	bls.n	1635e <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0xa6>
   162ca:	4681      	mov	r9, r0
   162cc:	4616      	mov	r6, r2
   162ce:	461c      	mov	r4, r3
	if (n == 0) {
   162d0:	ea52 0304 	orrs.w	r3, r2, r4
   162d4:	d11a      	bne.n	1630c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x54>
		buf[sizeof(buf) - 1] = '0';
   162d6:	2330      	movs	r3, #48	; 0x30
   162d8:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
		i = sizeof(buf) - 1;
   162dc:	2541      	movs	r5, #65	; 0x41
			n /= base;
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
   162de:	f1ba 0f00 	cmp.w	sl, #0
   162e2:	d007      	beq.n	162f4 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x3c>
		i--;
   162e4:	3d01      	subs	r5, #1
   162e6:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
   162e8:	f105 0348 	add.w	r3, r5, #72	; 0x48
   162ec:	446b      	add	r3, sp
   162ee:	222d      	movs	r2, #45	; 0x2d
   162f0:	f803 2c44 	strb.w	r2, [r3, #-68]
	}
	return write(buf + i, sizeof(buf) - i);
   162f4:	f8d9 3000 	ldr.w	r3, [r9]
   162f8:	685b      	ldr	r3, [r3, #4]
   162fa:	f1c5 0242 	rsb	r2, r5, #66	; 0x42
   162fe:	a901      	add	r1, sp, #4
   16300:	4429      	add	r1, r5
   16302:	4648      	mov	r0, r9
   16304:	4798      	blx	r3
}
   16306:	b012      	add	sp, #72	; 0x48
   16308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		i = sizeof(buf) - 1;
   1630c:	2541      	movs	r5, #65	; 0x41
			digit = n % base;
   1630e:	f04f 0800 	mov.w	r8, #0
   16312:	e003      	b.n	1631c <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x64>
			i--;
   16314:	3d01      	subs	r5, #1
   16316:	b2ed      	uxtb	r5, r5
			n /= base;
   16318:	4606      	mov	r6, r0
   1631a:	460c      	mov	r4, r1
			digit = n % base;
   1631c:	463a      	mov	r2, r7
   1631e:	4643      	mov	r3, r8
   16320:	4630      	mov	r0, r6
   16322:	4621      	mov	r1, r4
   16324:	f00a fbcc 	bl	20ac0 <__aeabi_uldivmod>
   16328:	fa5f fc82 	uxtb.w	ip, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1632c:	f1bc 0f09 	cmp.w	ip, #9
   16330:	bf94      	ite	ls
   16332:	f10c 0c30 	addls.w	ip, ip, #48	; 0x30
   16336:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
   1633a:	fa5f fc8c 	uxtb.w	ip, ip
   1633e:	f105 0348 	add.w	r3, r5, #72	; 0x48
   16342:	446b      	add	r3, sp
   16344:	f803 cc44 	strb.w	ip, [r3, #-68]
			n /= base;
   16348:	463a      	mov	r2, r7
   1634a:	4643      	mov	r3, r8
   1634c:	4630      	mov	r0, r6
   1634e:	4621      	mov	r1, r4
   16350:	f00a fbb6 	bl	20ac0 <__aeabi_uldivmod>
			if (n == 0) break;
   16354:	42be      	cmp	r6, r7
   16356:	f174 0400 	sbcs.w	r4, r4, #0
   1635a:	d2db      	bcs.n	16314 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x5c>
   1635c:	e7bf      	b.n	162de <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x26>
	if (base < 2) return 0;
   1635e:	2000      	movs	r0, #0
   16360:	e7d1      	b.n	16306 <Print::printNumber64(unsigned long long, unsigned char, unsigned char)+0x4e>
   16362:	0000      	movs	r0, r0
   16364:	0000      	movs	r0, r0
	...

00016368 <Print::printFloat(double, unsigned char)>:

size_t Print::printFloat(double number, uint8_t digits) 
{
   16368:	b570      	push	{r4, r5, r6, lr}
   1636a:	ed2d 8b02 	vpush	{d8}
   1636e:	b086      	sub	sp, #24
   16370:	4605      	mov	r5, r0
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
   16372:	eeb4 0b40 	vcmp.f64	d0, d0
   16376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1637a:	d666      	bvs.n	1644a <Print::printFloat(double, unsigned char)+0xe2>
   1637c:	460c      	mov	r4, r1
  { return __builtin_isinf(__x); }
   1637e:	eeb0 7bc0 	vabs.f64	d7, d0
    	if (isinf(number)) return print("inf");
   16382:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 164b0 <Print::printFloat(double, unsigned char)+0x148>
   16386:	eeb4 7b46 	vcmp.f64	d7, d6
   1638a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1638e:	dc63      	bgt.n	16458 <Print::printFloat(double, unsigned char)+0xf0>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
   16390:	ed9f 7b49 	vldr	d7, [pc, #292]	; 164b8 <Print::printFloat(double, unsigned char)+0x150>
   16394:	eeb4 0bc7 	vcmpe.f64	d0, d7
   16398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1639c:	dc67      	bgt.n	1646e <Print::printFloat(double, unsigned char)+0x106>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
   1639e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 164c0 <Print::printFloat(double, unsigned char)+0x158>
   163a2:	eeb4 0bc7 	vcmpe.f64	d0, d7
   163a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   163aa:	d467      	bmi.n	1647c <Print::printFloat(double, unsigned char)+0x114>
	
	// Handle negative numbers
	if (number < 0.0) {
   163ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
   163b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   163b4:	d469      	bmi.n	1648a <Print::printFloat(double, unsigned char)+0x122>
	uint8_t sign=0;
   163b6:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
   163b8:	2c00      	cmp	r4, #0
   163ba:	d06a      	beq.n	16492 <Print::printFloat(double, unsigned char)+0x12a>
   163bc:	f04f 0c00 	mov.w	ip, #0
	double rounding = 0.5;
   163c0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
		rounding *= 0.1;
   163c4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 164c8 <Print::printFloat(double, unsigned char)+0x160>
   163c8:	ee27 7b06 	vmul.f64	d7, d7, d6
	for (uint8_t i=0; i<digits; ++i) {
   163cc:	f10c 0c01 	add.w	ip, ip, #1
   163d0:	fa5f f28c 	uxtb.w	r2, ip
   163d4:	4294      	cmp	r4, r2
   163d6:	d8f7      	bhi.n	163c8 <Print::printFloat(double, unsigned char)+0x60>
	}
	number += rounding;
   163d8:	ee30 0b07 	vadd.f64	d0, d0, d7

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
   163dc:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
   163e0:	eeb8 8b67 	vcvt.f64.u32	d8, s15
   163e4:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
   163e8:	220a      	movs	r2, #10
   163ea:	ee17 1a90 	vmov	r1, s15
   163ee:	4628      	mov	r0, r5
   163f0:	f7ff ff12 	bl	16218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
   163f4:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
   163f6:	232e      	movs	r3, #46	; 0x2e
   163f8:	f88d 3008 	strb.w	r3, [sp, #8]

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;
   163fc:	2c0f      	cmp	r4, #15
   163fe:	bf28      	it	cs
   16400:	240f      	movcs	r4, #15

		while (digits-- > 0) {
   16402:	aa02      	add	r2, sp, #8
   16404:	1e60      	subs	r0, r4, #1
   16406:	f10d 0309 	add.w	r3, sp, #9
   1640a:	fa53 f080 	uxtab	r0, r3, r0
			remainder *= 10.0;
   1640e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
   16412:	ee28 0b06 	vmul.f64	d0, d8, d6
			n = (uint8_t)(remainder);
   16416:	eefc 7bc0 	vcvt.u32.f64	s15, d0
   1641a:	edcd 7a01 	vstr	s15, [sp, #4]
   1641e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
   16422:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16426:	f802 1f01 	strb.w	r1, [r2, #1]!
			remainder -= n; 
   1642a:	ee07 3a90 	vmov	s15, r3
   1642e:	eeb8 8be7 	vcvt.f64.s32	d8, s15
   16432:	ee30 8b48 	vsub.f64	d8, d0, d8
		while (digits-- > 0) {
   16436:	4282      	cmp	r2, r0
   16438:	d1eb      	bne.n	16412 <Print::printFloat(double, unsigned char)+0xaa>
			buf[count++] = '0' + n;
   1643a:	3401      	adds	r4, #1
		}
		count += write(buf, count);
   1643c:	682b      	ldr	r3, [r5, #0]
   1643e:	685b      	ldr	r3, [r3, #4]
   16440:	b2e2      	uxtb	r2, r4
   16442:	a902      	add	r1, sp, #8
   16444:	4628      	mov	r0, r5
   16446:	4798      	blx	r3
   16448:	e00c      	b.n	16464 <Print::printFloat(double, unsigned char)+0xfc>
							  return write((const uint8_t *)str, strlen(str)); }
   1644a:	6803      	ldr	r3, [r0, #0]
   1644c:	685b      	ldr	r3, [r3, #4]
   1644e:	2203      	movs	r2, #3
   16450:	491f      	ldr	r1, [pc, #124]	; (164d0 <Print::printFloat(double, unsigned char)+0x168>)
   16452:	4798      	blx	r3
   16454:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
   16456:	e005      	b.n	16464 <Print::printFloat(double, unsigned char)+0xfc>
   16458:	6803      	ldr	r3, [r0, #0]
   1645a:	685b      	ldr	r3, [r3, #4]
   1645c:	2203      	movs	r2, #3
   1645e:	491d      	ldr	r1, [pc, #116]	; (164d4 <Print::printFloat(double, unsigned char)+0x16c>)
   16460:	4798      	blx	r3
   16462:	4606      	mov	r6, r0
	}
	return count;
}
   16464:	4630      	mov	r0, r6
   16466:	b006      	add	sp, #24
   16468:	ecbd 8b02 	vpop	{d8}
   1646c:	bd70      	pop	{r4, r5, r6, pc}
   1646e:	6803      	ldr	r3, [r0, #0]
   16470:	685b      	ldr	r3, [r3, #4]
   16472:	2203      	movs	r2, #3
   16474:	4918      	ldr	r1, [pc, #96]	; (164d8 <Print::printFloat(double, unsigned char)+0x170>)
   16476:	4798      	blx	r3
   16478:	4606      	mov	r6, r0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
   1647a:	e7f3      	b.n	16464 <Print::printFloat(double, unsigned char)+0xfc>
   1647c:	6803      	ldr	r3, [r0, #0]
   1647e:	685b      	ldr	r3, [r3, #4]
   16480:	2203      	movs	r2, #3
   16482:	4915      	ldr	r1, [pc, #84]	; (164d8 <Print::printFloat(double, unsigned char)+0x170>)
   16484:	4798      	blx	r3
   16486:	4606      	mov	r6, r0
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
   16488:	e7ec      	b.n	16464 <Print::printFloat(double, unsigned char)+0xfc>
		number = -number;
   1648a:	eeb1 0b40 	vneg.f64	d0, d0
		sign = 1;
   1648e:	2301      	movs	r3, #1
   16490:	e792      	b.n	163b8 <Print::printFloat(double, unsigned char)+0x50>
	number += rounding;
   16492:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
   16496:	ee30 0b07 	vadd.f64	d0, d0, d7
	count += printNumber(int_part, 10, sign);
   1649a:	220a      	movs	r2, #10
   1649c:	eefc 7bc0 	vcvt.u32.f64	s15, d0
   164a0:	ee17 1a90 	vmov	r1, s15
   164a4:	4628      	mov	r0, r5
   164a6:	f7ff feb7 	bl	16218 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
   164aa:	4606      	mov	r6, r0
	if (digits > 0) {
   164ac:	e7da      	b.n	16464 <Print::printFloat(double, unsigned char)+0xfc>
   164ae:	bf00      	nop
   164b0:	ffffffff 	.word	0xffffffff
   164b4:	7fefffff 	.word	0x7fefffff
   164b8:	e0000000 	.word	0xe0000000
   164bc:	41efffff 	.word	0x41efffff
   164c0:	e0000000 	.word	0xe0000000
   164c4:	c1efffff 	.word	0xc1efffff
   164c8:	9999999a 	.word	0x9999999a
   164cc:	3fb99999 	.word	0x3fb99999
   164d0:	2000221c 	.word	0x2000221c
   164d4:	20002220 	.word	0x20002220
   164d8:	20002224 	.word	0x20002224

000164dc <breakTime(unsigned long, DateTimeFields&)>:
{
   164dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tm.sec = time % 60;
   164e0:	4b59      	ldr	r3, [pc, #356]	; (16648 <breakTime(unsigned long, DateTimeFields&)+0x16c>)
   164e2:	fba3 4200 	umull	r4, r2, r3, r0
   164e6:	0952      	lsrs	r2, r2, #5
   164e8:	ebc2 1402 	rsb	r4, r2, r2, lsl #4
   164ec:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
   164f0:	7008      	strb	r0, [r1, #0]
  tm.min = time % 60;
   164f2:	fba3 0302 	umull	r0, r3, r3, r2
   164f6:	095b      	lsrs	r3, r3, #5
   164f8:	ebc3 1003 	rsb	r0, r3, r3, lsl #4
   164fc:	eba2 0280 	sub.w	r2, r2, r0, lsl #2
   16500:	704a      	strb	r2, [r1, #1]
  tm.hour = time % 24;
   16502:	4a52      	ldr	r2, [pc, #328]	; (1664c <breakTime(unsigned long, DateTimeFields&)+0x170>)
   16504:	fba2 2e03 	umull	r2, lr, r2, r3
   16508:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
   1650c:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
   16510:	eba3 03c2 	sub.w	r3, r3, r2, lsl #3
   16514:	708b      	strb	r3, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
   16516:	f10e 0204 	add.w	r2, lr, #4
   1651a:	4b4d      	ldr	r3, [pc, #308]	; (16650 <breakTime(unsigned long, DateTimeFields&)+0x174>)
   1651c:	fba3 0302 	umull	r0, r3, r3, r2
   16520:	1ad0      	subs	r0, r2, r3
   16522:	eb03 0350 	add.w	r3, r3, r0, lsr #1
   16526:	089b      	lsrs	r3, r3, #2
   16528:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1652c:	1ad2      	subs	r2, r2, r3
   1652e:	70ca      	strb	r2, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16530:	2000      	movs	r0, #0
  days = 0;
   16532:	4602      	mov	r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   16534:	f240 176d 	movw	r7, #365	; 0x16d
   16538:	4e46      	ldr	r6, [pc, #280]	; (16654 <breakTime(unsigned long, DateTimeFields&)+0x178>)
   1653a:	f04f 0864 	mov.w	r8, #100	; 0x64
   1653e:	f44f 7ab7 	mov.w	sl, #366	; 0x16e
   16542:	f44f 79c8 	mov.w	r9, #400	; 0x190
   16546:	e004      	b.n	16552 <breakTime(unsigned long, DateTimeFields&)+0x76>
   16548:	463c      	mov	r4, r7
   1654a:	4422      	add	r2, r4
   1654c:	3001      	adds	r0, #1
   1654e:	4596      	cmp	lr, r2
   16550:	d319      	bcc.n	16586 <breakTime(unsigned long, DateTimeFields&)+0xaa>
   16552:	fa5f fc80 	uxtb.w	ip, r0
   16556:	f20c 73b2 	addw	r3, ip, #1970	; 0x7b2
   1655a:	f013 0503 	ands.w	r5, r3, #3
   1655e:	d1f3      	bne.n	16548 <breakTime(unsigned long, DateTimeFields&)+0x6c>
   16560:	fb86 b403 	smull	fp, r4, r6, r3
   16564:	1164      	asrs	r4, r4, #5
   16566:	fb08 3414 	mls	r4, r8, r4, r3
   1656a:	b954      	cbnz	r4, 16582 <breakTime(unsigned long, DateTimeFields&)+0xa6>
   1656c:	fb86 b403 	smull	fp, r4, r6, r3
   16570:	11e4      	asrs	r4, r4, #7
   16572:	fb09 3414 	mls	r4, r9, r4, r3
   16576:	2c00      	cmp	r4, #0
   16578:	bf14      	ite	ne
   1657a:	463c      	movne	r4, r7
   1657c:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
   16580:	e7e3      	b.n	1654a <breakTime(unsigned long, DateTimeFields&)+0x6e>
   16582:	4654      	mov	r4, sl
   16584:	e7e1      	b.n	1654a <breakTime(unsigned long, DateTimeFields&)+0x6e>
  tm.year = year + 70; // year is offset from 1970
   16586:	f10c 0c46 	add.w	ip, ip, #70	; 0x46
   1658a:	f881 c006 	strb.w	ip, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
   1658e:	b9b5      	cbnz	r5, 165be <breakTime(unsigned long, DateTimeFields&)+0xe2>
   16590:	4830      	ldr	r0, [pc, #192]	; (16654 <breakTime(unsigned long, DateTimeFields&)+0x178>)
   16592:	fb80 4003 	smull	r4, r0, r0, r3
   16596:	1140      	asrs	r0, r0, #5
   16598:	2464      	movs	r4, #100	; 0x64
   1659a:	fb04 3010 	mls	r0, r4, r0, r3
   1659e:	bb50      	cbnz	r0, 165f6 <breakTime(unsigned long, DateTimeFields&)+0x11a>
   165a0:	482c      	ldr	r0, [pc, #176]	; (16654 <breakTime(unsigned long, DateTimeFields&)+0x178>)
   165a2:	fb80 4003 	smull	r4, r0, r0, r3
   165a6:	11c0      	asrs	r0, r0, #7
   165a8:	f44f 74c8 	mov.w	r4, #400	; 0x190
   165ac:	fb04 3010 	mls	r0, r4, r0, r3
   165b0:	2800      	cmp	r0, #0
   165b2:	f240 106d 	movw	r0, #365	; 0x16d
   165b6:	bf08      	it	eq
   165b8:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   165bc:	e001      	b.n	165c2 <breakTime(unsigned long, DateTimeFields&)+0xe6>
   165be:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
   165c2:	ebae 0e02 	sub.w	lr, lr, r2
   165c6:	eb00 020e 	add.w	r2, r0, lr
      if (LEAP_YEAR(year)) {
   165ca:	4f22      	ldr	r7, [pc, #136]	; (16654 <breakTime(unsigned long, DateTimeFields&)+0x178>)
   165cc:	fb87 0703 	smull	r0, r7, r7, r3
   165d0:	ea4f 1e67 	mov.w	lr, r7, asr #5
   165d4:	2064      	movs	r0, #100	; 0x64
   165d6:	fb00 3e1e 	mls	lr, r0, lr, r3
   165da:	11ff      	asrs	r7, r7, #7
   165dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   165e0:	fb00 3717 	mls	r7, r0, r7, r3
   165e4:	2301      	movs	r3, #1
   165e6:	2000      	movs	r0, #0
      monthLength = monthDays[month];
   165e8:	f8df c06c 	ldr.w	ip, [pc, #108]	; 16658 <breakTime(unsigned long, DateTimeFields&)+0x17c>
        monthLength=28;
   165ec:	f04f 081c 	mov.w	r8, #28
        monthLength=29;
   165f0:	f04f 091d 	mov.w	r9, #29
   165f4:	e014      	b.n	16620 <breakTime(unsigned long, DateTimeFields&)+0x144>
  days -= LEAP_YEAR(year) ? 366 : 365;
   165f6:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   165fa:	e7e2      	b.n	165c2 <breakTime(unsigned long, DateTimeFields&)+0xe6>
      if (LEAP_YEAR(year)) {
   165fc:	b94d      	cbnz	r5, 16612 <breakTime(unsigned long, DateTimeFields&)+0x136>
   165fe:	f1be 0f00 	cmp.w	lr, #0
   16602:	d11c      	bne.n	1663e <breakTime(unsigned long, DateTimeFields&)+0x162>
        monthLength=29;
   16604:	2f00      	cmp	r7, #0
   16606:	bf14      	ite	ne
   16608:	241c      	movne	r4, #28
   1660a:	241d      	moveq	r4, #29
   1660c:	e002      	b.n	16614 <breakTime(unsigned long, DateTimeFields&)+0x138>
   1660e:	4633      	mov	r3, r6
   16610:	e010      	b.n	16634 <breakTime(unsigned long, DateTimeFields&)+0x158>
        monthLength=28;
   16612:	4644      	mov	r4, r8
    if (time >= monthLength) {
   16614:	4294      	cmp	r4, r2
   16616:	d814      	bhi.n	16642 <breakTime(unsigned long, DateTimeFields&)+0x166>
      time -= monthLength;
   16618:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
   1661a:	3001      	adds	r0, #1
   1661c:	3301      	adds	r3, #1
   1661e:	b2db      	uxtb	r3, r3
   16620:	b2c6      	uxtb	r6, r0
    if (month==1) { // february
   16622:	2e01      	cmp	r6, #1
   16624:	d0ea      	beq.n	165fc <breakTime(unsigned long, DateTimeFields&)+0x120>
    if (time >= monthLength) {
   16626:	f810 400c 	ldrb.w	r4, [r0, ip]
   1662a:	4294      	cmp	r4, r2
   1662c:	d8ef      	bhi.n	1660e <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
   1662e:	1b12      	subs	r2, r2, r4
  for (month=0; month<12; month++) {
   16630:	2b0b      	cmp	r3, #11
   16632:	d9f2      	bls.n	1661a <breakTime(unsigned long, DateTimeFields&)+0x13e>
  tm.mon = month;  // jan is month 0
   16634:	714b      	strb	r3, [r1, #5]
  tm.mday = time + 1;     // day of month
   16636:	3201      	adds	r2, #1
   16638:	710a      	strb	r2, [r1, #4]
}
   1663a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        monthLength=29;
   1663e:	464c      	mov	r4, r9
   16640:	e7e8      	b.n	16614 <breakTime(unsigned long, DateTimeFields&)+0x138>
    if (time >= monthLength) {
   16642:	4633      	mov	r3, r6
   16644:	e7f6      	b.n	16634 <breakTime(unsigned long, DateTimeFields&)+0x158>
   16646:	bf00      	nop
   16648:	88888889 	.word	0x88888889
   1664c:	aaaaaaab 	.word	0xaaaaaaab
   16650:	24924925 	.word	0x24924925
   16654:	51eb851f 	.word	0x51eb851f
   16658:	20002138 	.word	0x20002138

0001665c <random()>:
int32_t random(void)
{
	int32_t hi, lo, x;

	// the algorithm used in avr-libc 1.6.4
	x = seed;
   1665c:	4b0e      	ldr	r3, [pc, #56]	; (16698 <random()+0x3c>)
   1665e:	681b      	ldr	r3, [r3, #0]
	if (x == 0) x = 123459876;
   16660:	b1b3      	cbz	r3, 16690 <random()+0x34>
	hi = x / 127773;
	lo = x % 127773;
   16662:	4a0e      	ldr	r2, [pc, #56]	; (1669c <random()+0x40>)
   16664:	fb82 1203 	smull	r1, r2, r2, r3
   16668:	441a      	add	r2, r3
   1666a:	17d8      	asrs	r0, r3, #31
   1666c:	ebc0 4022 	rsb	r0, r0, r2, asr #16
   16670:	4a0b      	ldr	r2, [pc, #44]	; (166a0 <random()+0x44>)
   16672:	fb02 3310 	mls	r3, r2, r0, r3
	x = 16807 * lo - 2836 * hi;
   16676:	4a0b      	ldr	r2, [pc, #44]	; (166a4 <random()+0x48>)
   16678:	fb02 f000 	mul.w	r0, r2, r0
   1667c:	f244 12a7 	movw	r2, #16807	; 0x41a7
   16680:	fb02 0003 	mla	r0, r2, r3, r0
	if (x < 0) x += 0x7FFFFFFF;
   16684:	2800      	cmp	r0, #0
   16686:	da04      	bge.n	16692 <random()+0x36>
   16688:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
   1668c:	3801      	subs	r0, #1
   1668e:	e000      	b.n	16692 <random()+0x36>
	x = 16807 * lo - 2836 * hi;
   16690:	4805      	ldr	r0, [pc, #20]	; (166a8 <random()+0x4c>)
	seed = x;
   16692:	4b01      	ldr	r3, [pc, #4]	; (16698 <random()+0x3c>)
   16694:	6018      	str	r0, [r3, #0]
	return x;
}
   16696:	4770      	bx	lr
   16698:	20006c68 	.word	0x20006c68
   1669c:	834e0b5f 	.word	0x834e0b5f
   166a0:	0001f31d 	.word	0x0001f31d
   166a4:	fffff4ec 	.word	0xfffff4ec
   166a8:	1f0cce42 	.word	0x1f0cce42

000166ac <random(unsigned long)>:

uint32_t random(uint32_t howbig)
{
   166ac:	b510      	push	{r4, lr}
	if (howbig == 0) return 0;
   166ae:	4604      	mov	r4, r0
   166b0:	b908      	cbnz	r0, 166b6 <random(unsigned long)+0xa>
	return random() % howbig;
}
   166b2:	4620      	mov	r0, r4
   166b4:	bd10      	pop	{r4, pc}
	return random() % howbig;
   166b6:	f7ff ffd1 	bl	1665c <random()>
   166ba:	fbb0 f3f4 	udiv	r3, r0, r4
   166be:	fb03 0414 	mls	r4, r3, r4, r0
   166c2:	e7f6      	b.n	166b2 <random(unsigned long)+0x6>

000166c4 <String::~String()>:
String::~String()
   166c4:	b510      	push	{r4, lr}
   166c6:	4604      	mov	r4, r0
	free(buffer);
   166c8:	6800      	ldr	r0, [r0, #0]
   166ca:	f00b fb0d 	bl	21ce8 <free>
}
   166ce:	4620      	mov	r0, r4
   166d0:	bd10      	pop	{r4, pc}

000166d2 <String::changeBuffer(unsigned int)>:
{
   166d2:	b538      	push	{r3, r4, r5, lr}
   166d4:	4604      	mov	r4, r0
   166d6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   166d8:	3101      	adds	r1, #1
   166da:	6800      	ldr	r0, [r0, #0]
   166dc:	f00b fdc8 	bl	22270 <realloc>
	if (newbuffer) {
   166e0:	b118      	cbz	r0, 166ea <String::changeBuffer(unsigned int)+0x18>
		buffer = newbuffer;
   166e2:	6020      	str	r0, [r4, #0]
		capacity = maxStrLen;
   166e4:	6065      	str	r5, [r4, #4]
		return 1;
   166e6:	2001      	movs	r0, #1
}
   166e8:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   166ea:	2000      	movs	r0, #0
   166ec:	e7fc      	b.n	166e8 <String::changeBuffer(unsigned int)+0x16>

000166ee <String::reserve(unsigned int)>:
	if (capacity >= size) return 1;
   166ee:	6843      	ldr	r3, [r0, #4]
   166f0:	428b      	cmp	r3, r1
   166f2:	d301      	bcc.n	166f8 <String::reserve(unsigned int)+0xa>
   166f4:	2001      	movs	r0, #1
}
   166f6:	4770      	bx	lr
{
   166f8:	b510      	push	{r4, lr}
   166fa:	4604      	mov	r4, r0
	if (changeBuffer(size)) {
   166fc:	f7ff ffe9 	bl	166d2 <String::changeBuffer(unsigned int)>
   16700:	b900      	cbnz	r0, 16704 <String::reserve(unsigned int)+0x16>
}
   16702:	bd10      	pop	{r4, pc}
		if (len == 0) buffer[0] = 0;
   16704:	68a3      	ldr	r3, [r4, #8]
   16706:	b923      	cbnz	r3, 16712 <String::reserve(unsigned int)+0x24>
   16708:	6823      	ldr	r3, [r4, #0]
   1670a:	2200      	movs	r2, #0
   1670c:	701a      	strb	r2, [r3, #0]
		return 1;
   1670e:	2001      	movs	r0, #1
   16710:	e7f7      	b.n	16702 <String::reserve(unsigned int)+0x14>
   16712:	2001      	movs	r0, #1
   16714:	e7f5      	b.n	16702 <String::reserve(unsigned int)+0x14>

00016716 <String::copy(char const*, unsigned int)>:
{
   16716:	b570      	push	{r4, r5, r6, lr}
   16718:	4604      	mov	r4, r0
	if (length == 0) {
   1671a:	b932      	cbnz	r2, 1672a <String::copy(char const*, unsigned int)+0x14>
		if (buffer) buffer[0] = 0;
   1671c:	6803      	ldr	r3, [r0, #0]
   1671e:	b103      	cbz	r3, 16722 <String::copy(char const*, unsigned int)+0xc>
   16720:	701a      	strb	r2, [r3, #0]
		len = 0;
   16722:	2300      	movs	r3, #0
   16724:	60a3      	str	r3, [r4, #8]
}
   16726:	4620      	mov	r0, r4
   16728:	bd70      	pop	{r4, r5, r6, pc}
   1672a:	460d      	mov	r5, r1
   1672c:	4616      	mov	r6, r2
	if (!reserve(length)) {
   1672e:	4611      	mov	r1, r2
   16730:	f7ff ffdd 	bl	166ee <String::reserve(unsigned int)>
   16734:	b948      	cbnz	r0, 1674a <String::copy(char const*, unsigned int)+0x34>
		if (buffer) {
   16736:	6820      	ldr	r0, [r4, #0]
   16738:	b118      	cbz	r0, 16742 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
   1673a:	f00b fad5 	bl	21ce8 <free>
			buffer = NULL;
   1673e:	2300      	movs	r3, #0
   16740:	6023      	str	r3, [r4, #0]
		len = capacity = 0;
   16742:	2300      	movs	r3, #0
   16744:	6063      	str	r3, [r4, #4]
   16746:	60a3      	str	r3, [r4, #8]
		return *this;
   16748:	e7ed      	b.n	16726 <String::copy(char const*, unsigned int)+0x10>
	len = length;
   1674a:	60a6      	str	r6, [r4, #8]
	strcpy(buffer, cstr);
   1674c:	4629      	mov	r1, r5
   1674e:	6820      	ldr	r0, [r4, #0]
   16750:	f00c ff34 	bl	235bc <strcpy>
	return *this;
   16754:	e7e7      	b.n	16726 <String::copy(char const*, unsigned int)+0x10>

00016756 <String::String(char const*)>:
String::String(const char *cstr)
   16756:	b538      	push	{r3, r4, r5, lr}
   16758:	4604      	mov	r4, r0
	buffer = NULL;
   1675a:	2300      	movs	r3, #0
   1675c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   1675e:	6043      	str	r3, [r0, #4]
	len = 0;
   16760:	6083      	str	r3, [r0, #8]
	if (cstr) copy(cstr, strlen(cstr));
   16762:	b141      	cbz	r1, 16776 <String::String(char const*)+0x20>
   16764:	460d      	mov	r5, r1
   16766:	4608      	mov	r0, r1
   16768:	f00d f80a 	bl	23780 <strlen>
   1676c:	4602      	mov	r2, r0
   1676e:	4629      	mov	r1, r5
   16770:	4620      	mov	r0, r4
   16772:	f7ff ffd0 	bl	16716 <String::copy(char const*, unsigned int)>
}
   16776:	4620      	mov	r0, r4
   16778:	bd38      	pop	{r3, r4, r5, pc}

0001677a <String::operator=(String const&)>:
	if (this == &rhs) return *this;
   1677a:	4288      	cmp	r0, r1
   1677c:	d005      	beq.n	1678a <String::operator=(String const&)+0x10>
{
   1677e:	b508      	push	{r3, lr}
	return copy(rhs.buffer, rhs.len);
   16780:	688a      	ldr	r2, [r1, #8]
   16782:	6809      	ldr	r1, [r1, #0]
   16784:	f7ff ffc7 	bl	16716 <String::copy(char const*, unsigned int)>
}
   16788:	bd08      	pop	{r3, pc}
	if (this == &rhs) return *this;
   1678a:	4608      	mov	r0, r1
}
   1678c:	4770      	bx	lr

0001678e <String::String(String const&)>:
String::String(const String &value)
   1678e:	b510      	push	{r4, lr}
   16790:	4604      	mov	r4, r0
	buffer = NULL;
   16792:	2300      	movs	r3, #0
   16794:	6003      	str	r3, [r0, #0]
	capacity = 0;
   16796:	6043      	str	r3, [r0, #4]
	len = 0;
   16798:	6083      	str	r3, [r0, #8]
	*this = value;
   1679a:	f7ff ffee 	bl	1677a <String::operator=(String const&)>
}
   1679e:	4620      	mov	r0, r4
   167a0:	bd10      	pop	{r4, pc}

000167a2 <String::operator=(char const*)>:
{
   167a2:	b538      	push	{r3, r4, r5, lr}
   167a4:	4604      	mov	r4, r0
	if (cstr) {
   167a6:	b151      	cbz	r1, 167be <String::operator=(char const*)+0x1c>
   167a8:	460d      	mov	r5, r1
		copy(cstr, strlen(cstr));
   167aa:	4608      	mov	r0, r1
   167ac:	f00c ffe8 	bl	23780 <strlen>
   167b0:	4602      	mov	r2, r0
   167b2:	4629      	mov	r1, r5
   167b4:	4620      	mov	r0, r4
   167b6:	f7ff ffae 	bl	16716 <String::copy(char const*, unsigned int)>
}
   167ba:	4620      	mov	r0, r4
   167bc:	bd38      	pop	{r3, r4, r5, pc}
		len = 0;
   167be:	2300      	movs	r3, #0
   167c0:	6083      	str	r3, [r0, #8]
   167c2:	e7fa      	b.n	167ba <String::operator=(char const*)+0x18>

000167c4 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
   167c4:	b510      	push	{r4, lr}
   167c6:	b08a      	sub	sp, #40	; 0x28
   167c8:	4604      	mov	r4, r0
   167ca:	4608      	mov	r0, r1
	buffer = NULL;
   167cc:	2300      	movs	r3, #0
   167ce:	6023      	str	r3, [r4, #0]
	capacity = 0;
   167d0:	6063      	str	r3, [r4, #4]
	len = 0;
   167d2:	60a3      	str	r3, [r4, #8]
	itoa(value, buf, base);
   167d4:	a901      	add	r1, sp, #4
   167d6:	f00b fa69 	bl	21cac <itoa>
	*this = buf;
   167da:	a901      	add	r1, sp, #4
   167dc:	4620      	mov	r0, r4
   167de:	f7ff ffe0 	bl	167a2 <String::operator=(char const*)>
}
   167e2:	4620      	mov	r0, r4
   167e4:	b00a      	add	sp, #40	; 0x28
   167e6:	bd10      	pop	{r4, pc}

000167e8 <String::String(unsigned int, unsigned char)>:
String::String(unsigned int value, unsigned char base)
   167e8:	b510      	push	{r4, lr}
   167ea:	b08a      	sub	sp, #40	; 0x28
   167ec:	4604      	mov	r4, r0
   167ee:	4608      	mov	r0, r1
	buffer = NULL;
   167f0:	2300      	movs	r3, #0
   167f2:	6023      	str	r3, [r4, #0]
	capacity = 0;
   167f4:	6063      	str	r3, [r4, #4]
	len = 0;
   167f6:	60a3      	str	r3, [r4, #8]
  	utoa(value, buf, base);
   167f8:	a901      	add	r1, sp, #4
   167fa:	f00b ff7f 	bl	226fc <utoa>
	*this = buf;
   167fe:	a901      	add	r1, sp, #4
   16800:	4620      	mov	r0, r4
   16802:	f7ff ffce 	bl	167a2 <String::operator=(char const*)>
}
   16806:	4620      	mov	r0, r4
   16808:	b00a      	add	sp, #40	; 0x28
   1680a:	bd10      	pop	{r4, pc}

0001680c <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
   1680c:	b510      	push	{r4, lr}
   1680e:	b08a      	sub	sp, #40	; 0x28
   16810:	4604      	mov	r4, r0
	buffer = NULL;
   16812:	2300      	movs	r3, #0
   16814:	6003      	str	r3, [r0, #0]
	capacity = 0;
   16816:	6043      	str	r3, [r0, #4]
	len = 0;
   16818:	6083      	str	r3, [r0, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
   1681a:	466a      	mov	r2, sp
   1681c:	1c88      	adds	r0, r1, #2
   1681e:	f000 fe47 	bl	174b0 <dtostrf>
   16822:	4601      	mov	r1, r0
   16824:	4620      	mov	r0, r4
   16826:	f7ff ffbc 	bl	167a2 <String::operator=(char const*)>
}
   1682a:	4620      	mov	r0, r4
   1682c:	b00a      	add	sp, #40	; 0x28
   1682e:	bd10      	pop	{r4, pc}

00016830 <String::append(char const*, unsigned int)>:
{
   16830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16834:	4604      	mov	r4, r0
   16836:	460d      	mov	r5, r1
   16838:	4616      	mov	r6, r2
	unsigned int newlen = len + length;
   1683a:	6881      	ldr	r1, [r0, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   1683c:	6803      	ldr	r3, [r0, #0]
   1683e:	42ab      	cmp	r3, r5
   16840:	d806      	bhi.n	16850 <String::append(char const*, unsigned int)+0x20>
   16842:	185a      	adds	r2, r3, r1
   16844:	4295      	cmp	r5, r2
   16846:	d209      	bcs.n	1685c <String::append(char const*, unsigned int)+0x2c>
		buffer_offset = (unsigned int)(cstr-buffer);
   16848:	1aef      	subs	r7, r5, r3
		self = true;
   1684a:	f04f 0901 	mov.w	r9, #1
   1684e:	e001      	b.n	16854 <String::append(char const*, unsigned int)+0x24>
	bool self = false;
   16850:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
   16854:	b92e      	cbnz	r6, 16862 <String::append(char const*, unsigned int)+0x32>
}
   16856:	4620      	mov	r0, r4
   16858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
   1685c:	f04f 0900 	mov.w	r9, #0
   16860:	e7f8      	b.n	16854 <String::append(char const*, unsigned int)+0x24>
	unsigned int newlen = len + length;
   16862:	eb01 0806 	add.w	r8, r1, r6
	if (length == 0 || !reserve(newlen)) return *this;
   16866:	4641      	mov	r1, r8
   16868:	4620      	mov	r0, r4
   1686a:	f7ff ff40 	bl	166ee <String::reserve(unsigned int)>
   1686e:	2800      	cmp	r0, #0
   16870:	d0f1      	beq.n	16856 <String::append(char const*, unsigned int)+0x26>
	if ( self ) {
   16872:	f1b9 0f00 	cmp.w	r9, #0
   16876:	d00d      	beq.n	16894 <String::append(char const*, unsigned int)+0x64>
		memcpy(buffer + len, buffer+buffer_offset, length);
   16878:	6823      	ldr	r3, [r4, #0]
   1687a:	68a0      	ldr	r0, [r4, #8]
   1687c:	4632      	mov	r2, r6
   1687e:	19d9      	adds	r1, r3, r7
   16880:	4418      	add	r0, r3
   16882:	f000 fd35 	bl	172f0 <memcpy>
		buffer[newlen] = 0;
   16886:	6823      	ldr	r3, [r4, #0]
   16888:	2200      	movs	r2, #0
   1688a:	f803 2008 	strb.w	r2, [r3, r8]
	len = newlen;
   1688e:	f8c4 8008 	str.w	r8, [r4, #8]
	return *this;
   16892:	e7e0      	b.n	16856 <String::append(char const*, unsigned int)+0x26>
		strcpy(buffer + len, cstr);
   16894:	6820      	ldr	r0, [r4, #0]
   16896:	68a3      	ldr	r3, [r4, #8]
   16898:	4629      	mov	r1, r5
   1689a:	4418      	add	r0, r3
   1689c:	f00c fe8e 	bl	235bc <strcpy>
   168a0:	e7f5      	b.n	1688e <String::append(char const*, unsigned int)+0x5e>

000168a2 <operator+(StringSumHelper const&, String const&)>:
{
   168a2:	b510      	push	{r4, lr}
   168a4:	4604      	mov	r4, r0
	a.append(rhs.buffer, rhs.len);
   168a6:	688a      	ldr	r2, [r1, #8]
   168a8:	6809      	ldr	r1, [r1, #0]
   168aa:	f7ff ffc1 	bl	16830 <String::append(char const*, unsigned int)>
}
   168ae:	4620      	mov	r0, r4
   168b0:	bd10      	pop	{r4, pc}

000168b2 <operator+(StringSumHelper const&, char const*)>:
{
   168b2:	b538      	push	{r3, r4, r5, lr}
   168b4:	4604      	mov	r4, r0
	if (cstr) a.append(cstr, strlen(cstr));
   168b6:	b141      	cbz	r1, 168ca <operator+(StringSumHelper const&, char const*)+0x18>
   168b8:	460d      	mov	r5, r1
   168ba:	4608      	mov	r0, r1
   168bc:	f00c ff60 	bl	23780 <strlen>
   168c0:	4602      	mov	r2, r0
   168c2:	4629      	mov	r1, r5
   168c4:	4620      	mov	r0, r4
   168c6:	f7ff ffb3 	bl	16830 <String::append(char const*, unsigned int)>
}
   168ca:	4620      	mov	r0, r4
   168cc:	bd38      	pop	{r3, r4, r5, pc}

000168ce <String::compareTo(String const&) const>:
{
   168ce:	b508      	push	{r3, lr}
   168d0:	4603      	mov	r3, r0
	if (!buffer || !s.buffer) {
   168d2:	6800      	ldr	r0, [r0, #0]
   168d4:	b168      	cbz	r0, 168f2 <String::compareTo(String const&) const+0x24>
   168d6:	6809      	ldr	r1, [r1, #0]
   168d8:	b129      	cbz	r1, 168e6 <String::compareTo(String const&) const+0x18>
	return strcmp(buffer, s.buffer);
   168da:	f00c fd05 	bl	232e8 <strcmp>
}
   168de:	bd08      	pop	{r3, pc}
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   168e0:	7818      	ldrb	r0, [r3, #0]
   168e2:	4240      	negs	r0, r0
   168e4:	e7fb      	b.n	168de <String::compareTo(String const&) const+0x10>
		if (buffer && len > 0) return *(unsigned char *)buffer;
   168e6:	689b      	ldr	r3, [r3, #8]
   168e8:	b10b      	cbz	r3, 168ee <String::compareTo(String const&) const+0x20>
   168ea:	7800      	ldrb	r0, [r0, #0]
   168ec:	e7f7      	b.n	168de <String::compareTo(String const&) const+0x10>
		return 0;
   168ee:	2000      	movs	r0, #0
   168f0:	e7f5      	b.n	168de <String::compareTo(String const&) const+0x10>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   168f2:	680b      	ldr	r3, [r1, #0]
   168f4:	b123      	cbz	r3, 16900 <String::compareTo(String const&) const+0x32>
   168f6:	688a      	ldr	r2, [r1, #8]
   168f8:	2a00      	cmp	r2, #0
   168fa:	d1f1      	bne.n	168e0 <String::compareTo(String const&) const+0x12>
		return 0;
   168fc:	2000      	movs	r0, #0
   168fe:	e7ee      	b.n	168de <String::compareTo(String const&) const+0x10>
   16900:	2000      	movs	r0, #0
   16902:	e7ec      	b.n	168de <String::compareTo(String const&) const+0x10>

00016904 <String::equals(String const&) const>:
{
   16904:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   16906:	6882      	ldr	r2, [r0, #8]
   16908:	688b      	ldr	r3, [r1, #8]
   1690a:	429a      	cmp	r2, r3
   1690c:	d001      	beq.n	16912 <String::equals(String const&) const+0xe>
   1690e:	2000      	movs	r0, #0
}
   16910:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   16912:	f7ff ffdc 	bl	168ce <String::compareTo(String const&) const>
   16916:	fab0 f080 	clz	r0, r0
   1691a:	0940      	lsrs	r0, r0, #5
   1691c:	e7f8      	b.n	16910 <String::equals(String const&) const+0xc>

0001691e <String::equals(char const*) const>:
{
   1691e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   16920:	6883      	ldr	r3, [r0, #8]
   16922:	b13b      	cbz	r3, 16934 <String::equals(char const*) const+0x16>
	if (cstr == NULL) return buffer[0] == 0;
   16924:	b171      	cbz	r1, 16944 <String::equals(char const*) const+0x26>
	return strcmp(buffer, cstr) == 0;
   16926:	6800      	ldr	r0, [r0, #0]
   16928:	f00c fcde 	bl	232e8 <strcmp>
   1692c:	fab0 f080 	clz	r0, r0
   16930:	0940      	lsrs	r0, r0, #5
}
   16932:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   16934:	b121      	cbz	r1, 16940 <String::equals(char const*) const+0x22>
   16936:	7808      	ldrb	r0, [r1, #0]
   16938:	fab0 f080 	clz	r0, r0
   1693c:	0940      	lsrs	r0, r0, #5
   1693e:	e7f8      	b.n	16932 <String::equals(char const*) const+0x14>
   16940:	2001      	movs	r0, #1
   16942:	e7f6      	b.n	16932 <String::equals(char const*) const+0x14>
	if (cstr == NULL) return buffer[0] == 0;
   16944:	6803      	ldr	r3, [r0, #0]
   16946:	7818      	ldrb	r0, [r3, #0]
   16948:	fab0 f080 	clz	r0, r0
   1694c:	0940      	lsrs	r0, r0, #5
   1694e:	e7f0      	b.n	16932 <String::equals(char const*) const+0x14>

00016950 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (!bufsize || !buf) return;
   16950:	b1b2      	cbz	r2, 16980 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
{
   16952:	b538      	push	{r3, r4, r5, lr}
   16954:	460c      	mov	r4, r1
	if (!bufsize || !buf) return;
   16956:	b124      	cbz	r4, 16962 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
	if (index >= len) {
   16958:	6885      	ldr	r5, [r0, #8]
   1695a:	429d      	cmp	r5, r3
   1695c:	d802      	bhi.n	16964 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x14>
		buf[0] = 0;
   1695e:	2300      	movs	r3, #0
   16960:	7023      	strb	r3, [r4, #0]
}
   16962:	bd38      	pop	{r3, r4, r5, pc}
	if (n > len - index) n = len - index;
   16964:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
   16966:	1e51      	subs	r1, r2, #1
   16968:	428d      	cmp	r5, r1
   1696a:	bf28      	it	cs
   1696c:	460d      	movcs	r5, r1
	strncpy((char *)buf, buffer + index, n);
   1696e:	6801      	ldr	r1, [r0, #0]
   16970:	462a      	mov	r2, r5
   16972:	4419      	add	r1, r3
   16974:	4620      	mov	r0, r4
   16976:	f00c fc07 	bl	23188 <strncpy>
	buf[n] = 0;
   1697a:	2300      	movs	r3, #0
   1697c:	5563      	strb	r3, [r4, r5]
   1697e:	e7f0      	b.n	16962 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x12>
   16980:	4770      	bx	lr
	...

00016984 <set_arm_clock>:
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
   16984:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   16986:	4b8e      	ldr	r3, [pc, #568]	; (16bc0 <set_arm_clock+0x23c>)
   16988:	695d      	ldr	r5, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   1698a:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   1698c:	f5a3 23f8 	sub.w	r3, r3, #507904	; 0x7c000
   16990:	68dc      	ldr	r4, [r3, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   16992:	4b8c      	ldr	r3, [pc, #560]	; (16bc4 <set_arm_clock+0x240>)
   16994:	4298      	cmp	r0, r3
   16996:	d915      	bls.n	169c4 <set_arm_clock+0x40>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   16998:	4b8b      	ldr	r3, [pc, #556]	; (16bc8 <set_arm_clock+0x244>)
   1699a:	4298      	cmp	r0, r3
   1699c:	d96d      	bls.n	16a7a <set_arm_clock+0xf6>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   1699e:	4b8b      	ldr	r3, [pc, #556]	; (16bcc <set_arm_clock+0x248>)
   169a0:	4403      	add	r3, r0
   169a2:	0a1b      	lsrs	r3, r3, #8
   169a4:	498a      	ldr	r1, [pc, #552]	; (16bd0 <set_arm_clock+0x24c>)
   169a6:	fba1 1303 	umull	r1, r3, r1, r3
   169aa:	09db      	lsrs	r3, r3, #7
   169ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   169b0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   169b4:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
   169b8:	f240 6127 	movw	r1, #1575	; 0x627
   169bc:	428b      	cmp	r3, r1
   169be:	bf28      	it	cs
   169c0:	460b      	movcs	r3, r1
   169c2:	e007      	b.n	169d4 <set_arm_clock+0x50>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
   169c4:	4e83      	ldr	r6, [pc, #524]	; (16bd4 <set_arm_clock+0x250>)
   169c6:	f240 437e 	movw	r3, #1150	; 0x47e
   169ca:	f240 31b6 	movw	r1, #950	; 0x3b6
   169ce:	42b0      	cmp	r0, r6
   169d0:	bf98      	it	ls
   169d2:	460b      	movls	r3, r1
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   169d4:	4e7a      	ldr	r6, [pc, #488]	; (16bc0 <set_arm_clock+0x23c>)
   169d6:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
   169da:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
   169de:	f8c6 1080 	str.w	r1, [r6, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   169e2:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
   169e6:	497c      	ldr	r1, [pc, #496]	; (16bd8 <set_arm_clock+0x254>)
   169e8:	fba1 1303 	umull	r1, r3, r1, r3
   169ec:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
   169f0:	f004 011f 	and.w	r1, r4, #31
   169f4:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
   169f8:	d209      	bcs.n	16a0e <set_arm_clock+0x8a>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   169fa:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   169fe:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
   16a02:	4b76      	ldr	r3, [pc, #472]	; (16bdc <set_arm_clock+0x258>)
   16a04:	60dc      	str	r4, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   16a06:	4619      	mov	r1, r3
   16a08:	680b      	ldr	r3, [r1, #0]
   16a0a:	2b00      	cmp	r3, #0
   16a0c:	dafc      	bge.n	16a08 <set_arm_clock+0x84>
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   16a0e:	f015 7300 	ands.w	r3, r5, #33554432	; 0x2000000
   16a12:	d12a      	bne.n	16a6a <set_arm_clock+0xe6>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   16a14:	4972      	ldr	r1, [pc, #456]	; (16be0 <set_arm_clock+0x25c>)
   16a16:	690e      	ldr	r6, [r1, #16]
   16a18:	4972      	ldr	r1, [pc, #456]	; (16be4 <set_arm_clock+0x260>)
   16a1a:	43b1      	bics	r1, r6
   16a1c:	d030      	beq.n	16a80 <set_arm_clock+0xfc>
			sel = 0;
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
   16a1e:	4619      	mov	r1, r3
			sel = 1;
   16a20:	2301      	movs	r3, #1
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   16a22:	06ce      	lsls	r6, r1, #27
   16a24:	ea85 61c1 	eor.w	r1, r5, r1, lsl #27
   16a28:	f011 5f60 	tst.w	r1, #939524096	; 0x38000000
   16a2c:	d004      	beq.n	16a38 <set_arm_clock+0xb4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   16a2e:	f025 5560 	bic.w	r5, r5, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   16a32:	4335      	orrs	r5, r6
			CCM_CBCDR = cbcdr;
   16a34:	4962      	ldr	r1, [pc, #392]	; (16bc0 <set_arm_clock+0x23c>)
   16a36:	614d      	str	r5, [r1, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   16a38:	0319      	lsls	r1, r3, #12
   16a3a:	ea82 3303 	eor.w	r3, r2, r3, lsl #12
   16a3e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   16a42:	d009      	beq.n	16a58 <set_arm_clock+0xd4>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   16a44:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   16a48:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
   16a4a:	4b5d      	ldr	r3, [pc, #372]	; (16bc0 <set_arm_clock+0x23c>)
   16a4c:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   16a4e:	461a      	mov	r2, r3
   16a50:	6c93      	ldr	r3, [r2, #72]	; 0x48
   16a52:	f013 0f08 	tst.w	r3, #8
   16a56:	d1fb      	bne.n	16a50 <set_arm_clock+0xcc>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   16a58:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   16a5c:	4b58      	ldr	r3, [pc, #352]	; (16bc0 <set_arm_clock+0x23c>)
   16a5e:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   16a60:	461a      	mov	r2, r3
   16a62:	6c93      	ldr	r3, [r2, #72]	; 0x48
   16a64:	f013 0f20 	tst.w	r3, #32
   16a68:	d1fb      	bne.n	16a62 <set_arm_clock+0xde>
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
   16a6a:	4b5f      	ldr	r3, [pc, #380]	; (16be8 <set_arm_clock+0x264>)
   16a6c:	4298      	cmp	r0, r3
   16a6e:	d817      	bhi.n	16aa0 <set_arm_clock+0x11c>
   16a70:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
   16a72:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
   16a74:	460a      	mov	r2, r1
	while (frequency * div_arm * div_ahb < 648000000) {
   16a76:	4e5c      	ldr	r6, [pc, #368]	; (16be8 <set_arm_clock+0x264>)
   16a78:	e00e      	b.n	16a98 <set_arm_clock+0x114>
		voltage = 1250; // 1.25V
   16a7a:	f240 43e2 	movw	r3, #1250	; 0x4e2
   16a7e:	e7a9      	b.n	169d4 <set_arm_clock+0x50>
			div = 3; // divide down to 120 MHz, so IPG is ok even if IPG_PODF=0
   16a80:	2103      	movs	r1, #3
   16a82:	e7ce      	b.n	16a22 <set_arm_clock+0x9e>
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
   16a84:	2904      	cmp	r1, #4
   16a86:	d80e      	bhi.n	16aa6 <set_arm_clock+0x122>
				div_ahb = div_ahb + 1;
   16a88:	3101      	adds	r1, #1
				div_arm = 1;
   16a8a:	2201      	movs	r2, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   16a8c:	fb01 f302 	mul.w	r3, r1, r2
   16a90:	fb00 f303 	mul.w	r3, r0, r3
   16a94:	42b3      	cmp	r3, r6
   16a96:	d806      	bhi.n	16aa6 <set_arm_clock+0x122>
		if (div_arm < 8) {
   16a98:	2a07      	cmp	r2, #7
   16a9a:	d8f3      	bhi.n	16a84 <set_arm_clock+0x100>
			div_arm = div_arm + 1;
   16a9c:	3201      	adds	r2, #1
   16a9e:	e7f5      	b.n	16a8c <set_arm_clock+0x108>
	while (frequency * div_arm * div_ahb < 648000000) {
   16aa0:	4603      	mov	r3, r0
	uint32_t div_ahb = 1;
   16aa2:	2101      	movs	r1, #1
	uint32_t div_arm = 1;
   16aa4:	460a      	mov	r2, r1
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   16aa6:	4851      	ldr	r0, [pc, #324]	; (16bec <set_arm_clock+0x268>)
   16aa8:	4418      	add	r0, r3
	if (mult > 108) mult = 108;
   16aaa:	4b51      	ldr	r3, [pc, #324]	; (16bf0 <set_arm_clock+0x26c>)
   16aac:	4298      	cmp	r0, r3
   16aae:	f200 8083 	bhi.w	16bb8 <set_arm_clock+0x234>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   16ab2:	4b50      	ldr	r3, [pc, #320]	; (16bf4 <set_arm_clock+0x270>)
   16ab4:	fba3 0300 	umull	r0, r3, r3, r0
   16ab8:	0d1b      	lsrs	r3, r3, #20
   16aba:	2b36      	cmp	r3, #54	; 0x36
   16abc:	bf38      	it	cc
   16abe:	2336      	movcc	r3, #54	; 0x36
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
   16ac0:	484d      	ldr	r0, [pc, #308]	; (16bf8 <set_arm_clock+0x274>)
   16ac2:	fb03 f000 	mul.w	r0, r3, r0
   16ac6:	fbb0 f0f2 	udiv	r0, r0, r2
   16aca:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   16ace:	4e44      	ldr	r6, [pc, #272]	; (16be0 <set_arm_clock+0x25c>)
   16ad0:	6836      	ldr	r6, [r6, #0]
   16ad2:	4f4a      	ldr	r7, [pc, #296]	; (16bfc <set_arm_clock+0x278>)
   16ad4:	4037      	ands	r7, r6
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   16ad6:	4e4a      	ldr	r6, [pc, #296]	; (16c00 <set_arm_clock+0x27c>)
   16ad8:	431e      	orrs	r6, r3
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   16ada:	42b7      	cmp	r7, r6
   16adc:	d009      	beq.n	16af2 <set_arm_clock+0x16e>
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   16ade:	4e40      	ldr	r6, [pc, #256]	; (16be0 <set_arm_clock+0x25c>)
   16ae0:	f44f 5780 	mov.w	r7, #4096	; 0x1000
   16ae4:	6037      	str	r7, [r6, #0]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   16ae6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   16aea:	6033      	str	r3, [r6, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   16aec:	6833      	ldr	r3, [r6, #0]
   16aee:	2b00      	cmp	r3, #0
   16af0:	dafc      	bge.n	16aec <set_arm_clock+0x168>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   16af2:	4b33      	ldr	r3, [pc, #204]	; (16bc0 <set_arm_clock+0x23c>)
   16af4:	691b      	ldr	r3, [r3, #16]
   16af6:	3a01      	subs	r2, #1
   16af8:	f003 0307 	and.w	r3, r3, #7
   16afc:	4293      	cmp	r3, r2
   16afe:	d008      	beq.n	16b12 <set_arm_clock+0x18e>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   16b00:	f002 0207 	and.w	r2, r2, #7
   16b04:	4b2e      	ldr	r3, [pc, #184]	; (16bc0 <set_arm_clock+0x23c>)
   16b06:	611a      	str	r2, [r3, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   16b08:	461a      	mov	r2, r3
   16b0a:	6c93      	ldr	r3, [r2, #72]	; 0x48
   16b0c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   16b10:	d1fb      	bne.n	16b0a <set_arm_clock+0x186>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   16b12:	3901      	subs	r1, #1
   16b14:	028b      	lsls	r3, r1, #10
   16b16:	ea85 2181 	eor.w	r1, r5, r1, lsl #10
   16b1a:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   16b1e:	d00b      	beq.n	16b38 <set_arm_clock+0x1b4>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   16b20:	f425 55e0 	bic.w	r5, r5, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   16b24:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
   16b28:	431d      	orrs	r5, r3
		CCM_CBCDR = cbcdr;
   16b2a:	4b25      	ldr	r3, [pc, #148]	; (16bc0 <set_arm_clock+0x23c>)
   16b2c:	615d      	str	r5, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   16b2e:	461a      	mov	r2, r3
   16b30:	6c93      	ldr	r3, [r2, #72]	; 0x48
   16b32:	f013 0f02 	tst.w	r3, #2
   16b36:	d1fb      	bne.n	16b30 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   16b38:	4932      	ldr	r1, [pc, #200]	; (16c04 <set_arm_clock+0x280>)
   16b3a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   16b3c:	4a32      	ldr	r2, [pc, #200]	; (16c08 <set_arm_clock+0x284>)
   16b3e:	4291      	cmp	r1, r2
   16b40:	d83c      	bhi.n	16bbc <set_arm_clock+0x238>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   16b42:	09c9      	lsrs	r1, r1, #7
   16b44:	4b31      	ldr	r3, [pc, #196]	; (16c0c <set_arm_clock+0x288>)
   16b46:	fba3 3101 	umull	r3, r1, r3, r1
   16b4a:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   16b4c:	1e4b      	subs	r3, r1, #1
   16b4e:	021a      	lsls	r2, r3, #8
   16b50:	ea85 2303 	eor.w	r3, r5, r3, lsl #8
   16b54:	f413 7f40 	tst.w	r3, #768	; 0x300
   16b58:	d006      	beq.n	16b68 <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   16b5a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   16b5e:	f402 7240 	and.w	r2, r2, #768	; 0x300
   16b62:	432a      	orrs	r2, r5
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
   16b64:	4b16      	ldr	r3, [pc, #88]	; (16bc0 <set_arm_clock+0x23c>)
   16b66:	615a      	str	r2, [r3, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   16b68:	4a15      	ldr	r2, [pc, #84]	; (16bc0 <set_arm_clock+0x23c>)
   16b6a:	6953      	ldr	r3, [r2, #20]
   16b6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   16b70:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   16b72:	6c93      	ldr	r3, [r2, #72]	; 0x48
   16b74:	f013 0f20 	tst.w	r3, #32
   16b78:	d1fb      	bne.n	16b72 <set_arm_clock+0x1ee>

	F_CPU_ACTUAL = frequency;
   16b7a:	4b25      	ldr	r3, [pc, #148]	; (16c10 <set_arm_clock+0x28c>)
   16b7c:	6018      	str	r0, [r3, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   16b7e:	fbb0 f1f1 	udiv	r1, r0, r1
   16b82:	4b24      	ldr	r3, [pc, #144]	; (16c14 <set_arm_clock+0x290>)
   16b84:	6019      	str	r1, [r3, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   16b86:	4b24      	ldr	r3, [pc, #144]	; (16c18 <set_arm_clock+0x294>)
   16b88:	fba3 2300 	umull	r2, r3, r3, r0
   16b8c:	0c9b      	lsrs	r3, r3, #18
   16b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16b92:	fbb2 f3f3 	udiv	r3, r2, r3
   16b96:	4a21      	ldr	r2, [pc, #132]	; (16c1c <set_arm_clock+0x298>)
   16b98:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   16b9a:	f004 031f 	and.w	r3, r4, #31
   16b9e:	459c      	cmp	ip, r3
   16ba0:	d208      	bcs.n	16bb4 <set_arm_clock+0x230>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   16ba2:	f024 041f 	bic.w	r4, r4, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   16ba6:	ea4c 0404 	orr.w	r4, ip, r4
		DCDC_REG3 = dcdc;
   16baa:	4a0c      	ldr	r2, [pc, #48]	; (16bdc <set_arm_clock+0x258>)
   16bac:	60d4      	str	r4, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   16bae:	6813      	ldr	r3, [r2, #0]
   16bb0:	2b00      	cmp	r3, #0
   16bb2:	dafc      	bge.n	16bae <set_arm_clock+0x22a>
	}

	return frequency;
}
   16bb4:	bcf0      	pop	{r4, r5, r6, r7}
   16bb6:	4770      	bx	lr
	if (mult > 108) mult = 108;
   16bb8:	236c      	movs	r3, #108	; 0x6c
   16bba:	e781      	b.n	16ac0 <set_arm_clock+0x13c>
	if (div_ipg > 4) div_ipg = 4;
   16bbc:	2104      	movs	r1, #4
   16bbe:	e7c5      	b.n	16b4c <set_arm_clock+0x1c8>
   16bc0:	400fc000 	.word	0x400fc000
   16bc4:	1f78a400 	.word	0x1f78a400
   16bc8:	23c34600 	.word	0x23c34600
   16bcc:	dc3cba00 	.word	0xdc3cba00
   16bd0:	004cb223 	.word	0x004cb223
   16bd4:	016e3600 	.word	0x016e3600
   16bd8:	51eb851f 	.word	0x51eb851f
   16bdc:	40080000 	.word	0x40080000
   16be0:	400d8000 	.word	0x400d8000
   16be4:	80003040 	.word	0x80003040
   16be8:	269fb1ff 	.word	0x269fb1ff
   16bec:	005b8d80 	.word	0x005b8d80
   16bf0:	4df67eff 	.word	0x4df67eff
   16bf4:	165e9f81 	.word	0x165e9f81
   16bf8:	00b71b00 	.word	0x00b71b00
   16bfc:	8001307f 	.word	0x8001307f
   16c00:	80002000 	.word	0x80002000
   16c04:	08f0d17f 	.word	0x08f0d17f
   16c08:	2cb4177f 	.word	0x2cb4177f
   16c0c:	00e5109f 	.word	0x00e5109f
   16c10:	20004e18 	.word	0x20004e18
   16c14:	20004e14 	.word	0x20004e14
   16c18:	431bde83 	.word	0x431bde83
   16c1c:	20008548 	.word	0x20008548

00016c20 <micros>:
// Returns the number of microseconds since your program started running.
// This 32 bit number will roll back to zero after about 71 minutes and
// 35 seconds.  For a simpler way to build delays or timeouts, consider
// using elapsedMicros.
uint32_t micros(void)
{
   16c20:	b430      	push	{r4, r5}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   16c22:	4b0f      	ldr	r3, [pc, #60]	; (16c60 <micros+0x40>)
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   16c24:	4d0f      	ldr	r5, [pc, #60]	; (16c64 <micros+0x44>)
		scc = systick_cycle_count;
   16c26:	4c10      	ldr	r4, [pc, #64]	; (16c68 <micros+0x48>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   16c28:	f04f 0c01 	mov.w	ip, #1
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   16c2c:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   16c30:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   16c32:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   16c34:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   16c38:	2a00      	cmp	r2, #0
   16c3a:	d1f7      	bne.n	16c2c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   16c3c:	4b0b      	ldr	r3, [pc, #44]	; (16c6c <micros+0x4c>)
   16c3e:	685b      	ldr	r3, [r3, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   16c40:	4a0b      	ldr	r2, [pc, #44]	; (16c70 <micros+0x50>)
   16c42:	6812      	ldr	r2, [r2, #0]
	uint32_t ccdelta = cyccnt - scc;
   16c44:	1a5b      	subs	r3, r3, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   16c46:	fba3 3202 	umull	r3, r2, r3, r2
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   16c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16c4e:	fb03 f000 	mul.w	r0, r3, r0
	return usec;
}
   16c52:	429a      	cmp	r2, r3
   16c54:	bf94      	ite	ls
   16c56:	1880      	addls	r0, r0, r2
   16c58:	18c0      	addhi	r0, r0, r3
   16c5a:	bc30      	pop	{r4, r5}
   16c5c:	4770      	bx	lr
   16c5e:	bf00      	nop
   16c60:	20008a70 	.word	0x20008a70
   16c64:	20008a6c 	.word	0x20008a6c
   16c68:	20008a68 	.word	0x20008a68
   16c6c:	e0001000 	.word	0xe0001000
   16c70:	20008548 	.word	0x20008548

00016c74 <delay>:
	if (msec == 0) return;
   16c74:	b900      	cbnz	r0, 16c78 <delay+0x4>
   16c76:	4770      	bx	lr
{
   16c78:	b538      	push	{r3, r4, r5, lr}
   16c7a:	4605      	mov	r5, r0
	start = micros();
   16c7c:	f7ff ffd0 	bl	16c20 <micros>
   16c80:	4604      	mov	r4, r0
   16c82:	e001      	b.n	16c88 <delay+0x14>
		yield();
   16c84:	f7f5 f8a6 	bl	bdd4 <yield>
		while ((micros() - start) >= 1000) {
   16c88:	f7ff ffca 	bl	16c20 <micros>
   16c8c:	1b00      	subs	r0, r0, r4
   16c8e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   16c92:	d3f7      	bcc.n	16c84 <delay+0x10>
			if (--msec == 0) return;
   16c94:	3d01      	subs	r5, #1
   16c96:	d002      	beq.n	16c9e <delay+0x2a>
			start += 1000;
   16c98:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
   16c9c:	e7f4      	b.n	16c88 <delay+0x14>
}
   16c9e:	bd38      	pop	{r3, r4, r5, pc}

00016ca0 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   16ca0:	2836      	cmp	r0, #54	; 0x36
   16ca2:	d81b      	bhi.n	16cdc <digitalWrite+0x3c>
{
   16ca4:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
   16ca6:	4b0e      	ldr	r3, [pc, #56]	; (16ce0 <digitalWrite+0x40>)
   16ca8:	0102      	lsls	r2, r0, #4
   16caa:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   16cae:	589b      	ldr	r3, [r3, r2]
   16cb0:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
   16cb2:	68c2      	ldr	r2, [r0, #12]
	if (pinmode & mask) {
   16cb4:	4214      	tst	r4, r2
   16cb6:	d008      	beq.n	16cca <digitalWrite+0x2a>
		// pin is configured for output mode
		if (val) {
   16cb8:	b121      	cbz	r1, 16cc4 <digitalWrite+0x24>
			*(p->reg + 0x21) = mask; // set register
   16cba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   16cbe:	f85d 4b04 	ldr.w	r4, [sp], #4
   16cc2:	4770      	bx	lr
			*(p->reg + 0x22) = mask; // clear register
   16cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   16cc8:	e7f9      	b.n	16cbe <digitalWrite+0x1e>
		if (val) {
   16cca:	b119      	cbz	r1, 16cd4 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   16ccc:	6883      	ldr	r3, [r0, #8]
   16cce:	4a05      	ldr	r2, [pc, #20]	; (16ce4 <digitalWrite+0x44>)
   16cd0:	601a      	str	r2, [r3, #0]
   16cd2:	e7f4      	b.n	16cbe <digitalWrite+0x1e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   16cd4:	6883      	ldr	r3, [r0, #8]
   16cd6:	4a04      	ldr	r2, [pc, #16]	; (16ce8 <digitalWrite+0x48>)
   16cd8:	601a      	str	r2, [r3, #0]
   16cda:	e7f0      	b.n	16cbe <digitalWrite+0x1e>
   16cdc:	4770      	bx	lr
   16cde:	bf00      	nop
   16ce0:	2000373c 	.word	0x2000373c
   16ce4:	0001f038 	.word	0x0001f038
   16ce8:	00013038 	.word	0x00013038

00016cec <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
   16cec:	2836      	cmp	r0, #54	; 0x36
   16cee:	d80b      	bhi.n	16d08 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   16cf0:	4b06      	ldr	r3, [pc, #24]	; (16d0c <digitalRead+0x20>)
   16cf2:	0102      	lsls	r2, r0, #4
   16cf4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   16cf8:	589b      	ldr	r3, [r3, r2]
   16cfa:	689a      	ldr	r2, [r3, #8]
   16cfc:	68c3      	ldr	r3, [r0, #12]
   16cfe:	421a      	tst	r2, r3
   16d00:	bf14      	ite	ne
   16d02:	2001      	movne	r0, #1
   16d04:	2000      	moveq	r0, #0
   16d06:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   16d08:	2000      	movs	r0, #0
}
   16d0a:	4770      	bx	lr
   16d0c:	2000373c 	.word	0x2000373c

00016d10 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
   16d10:	2836      	cmp	r0, #54	; 0x36
   16d12:	d832      	bhi.n	16d7a <pinMode+0x6a>
{
   16d14:	b410      	push	{r4}
	p = digital_pin_to_info_PGM + pin;
   16d16:	4b19      	ldr	r3, [pc, #100]	; (16d7c <pinMode+0x6c>)
   16d18:	0102      	lsls	r2, r0, #4
   16d1a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   16d1e:	2901      	cmp	r1, #1
   16d20:	d00c      	beq.n	16d3c <pinMode+0x2c>
   16d22:	2904      	cmp	r1, #4
   16d24:	d00a      	beq.n	16d3c <pinMode+0x2c>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   16d26:	589a      	ldr	r2, [r3, r2]
   16d28:	6853      	ldr	r3, [r2, #4]
   16d2a:	68c4      	ldr	r4, [r0, #12]
   16d2c:	ea23 0304 	bic.w	r3, r3, r4
   16d30:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
   16d32:	b9a9      	cbnz	r1, 16d60 <pinMode+0x50>
			*(p->pad) = IOMUXC_PAD_DSE(7);
   16d34:	6883      	ldr	r3, [r0, #8]
   16d36:	2238      	movs	r2, #56	; 0x38
   16d38:	601a      	str	r2, [r3, #0]
   16d3a:	e00b      	b.n	16d54 <pinMode+0x44>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   16d3c:	589a      	ldr	r2, [r3, r2]
   16d3e:	6853      	ldr	r3, [r2, #4]
   16d40:	68c4      	ldr	r4, [r0, #12]
   16d42:	4323      	orrs	r3, r4
   16d44:	6053      	str	r3, [r2, #4]
		if (mode == OUTPUT) {
   16d46:	2901      	cmp	r1, #1
			*(p->pad) = IOMUXC_PAD_DSE(7);
   16d48:	6883      	ldr	r3, [r0, #8]
   16d4a:	bf0c      	ite	eq
   16d4c:	2238      	moveq	r2, #56	; 0x38
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   16d4e:	f640 0238 	movwne	r2, #2104	; 0x838
   16d52:	601a      	str	r2, [r3, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
   16d54:	6843      	ldr	r3, [r0, #4]
   16d56:	2215      	movs	r2, #21
   16d58:	601a      	str	r2, [r3, #0]
}
   16d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
   16d5e:	4770      	bx	lr
		} else if (mode == INPUT_PULLUP) {
   16d60:	2902      	cmp	r1, #2
   16d62:	d006      	beq.n	16d72 <pinMode+0x62>
		} else if (mode == INPUT_PULLDOWN) {
   16d64:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   16d66:	6883      	ldr	r3, [r0, #8]
   16d68:	bf0c      	ite	eq
   16d6a:	4a05      	ldreq	r2, [pc, #20]	; (16d80 <pinMode+0x70>)
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   16d6c:	4a05      	ldrne	r2, [pc, #20]	; (16d84 <pinMode+0x74>)
   16d6e:	601a      	str	r2, [r3, #0]
   16d70:	e7f0      	b.n	16d54 <pinMode+0x44>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   16d72:	6883      	ldr	r3, [r0, #8]
   16d74:	4a04      	ldr	r2, [pc, #16]	; (16d88 <pinMode+0x78>)
   16d76:	601a      	str	r2, [r3, #0]
   16d78:	e7ec      	b.n	16d54 <pinMode+0x44>
   16d7a:	4770      	bx	lr
   16d7c:	2000373c 	.word	0x2000373c
   16d80:	00013038 	.word	0x00013038
   16d84:	00010038 	.word	0x00010038
   16d88:	0001f038 	.word	0x0001f038

00016d8c <flash_wait>:
{
   16d8c:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   16d8e:	4b14      	ldr	r3, [pc, #80]	; (16de0 <flash_wait+0x54>)
   16d90:	4a14      	ldr	r2, [pc, #80]	; (16de4 <flash_wait+0x58>)
   16d92:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   16d96:	2200      	movs	r2, #0
   16d98:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   16d9c:	461a      	mov	r2, r3
   16d9e:	2101      	movs	r1, #1
		FLEXSPI_IPCR0 = 0;
   16da0:	2500      	movs	r5, #0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   16da2:	4c11      	ldr	r4, [pc, #68]	; (16de8 <flash_wait+0x5c>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
   16da4:	4811      	ldr	r0, [pc, #68]	; (16dec <flash_wait+0x60>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   16da6:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
   16daa:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   16dae:	f8c2 40a4 	str.w	r4, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16db2:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
   16db6:	6953      	ldr	r3, [r2, #20]
   16db8:	f013 0f01 	tst.w	r3, #1
   16dbc:	d0fb      	beq.n	16db6 <flash_wait+0x2a>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16dbe:	6151      	str	r1, [r2, #20]
	} while (status & 1);
   16dc0:	7803      	ldrb	r3, [r0, #0]
   16dc2:	f013 0f01 	tst.w	r3, #1
   16dc6:	d1ee      	bne.n	16da6 <flash_wait+0x1a>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   16dc8:	4a05      	ldr	r2, [pc, #20]	; (16de0 <flash_wait+0x54>)
   16dca:	6813      	ldr	r3, [r2, #0]
   16dcc:	f043 0301 	orr.w	r3, r3, #1
   16dd0:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   16dd2:	6813      	ldr	r3, [r2, #0]
   16dd4:	f013 0f01 	tst.w	r3, #1
   16dd8:	d1fb      	bne.n	16dd2 <flash_wait+0x46>
	__enable_irq();
   16dda:	b662      	cpsie	i
}
   16ddc:	bc30      	pop	{r4, r5}
   16dde:	4770      	bx	lr
   16de0:	402a8000 	.word	0x402a8000
   16de4:	24010405 	.word	0x24010405
   16de8:	000f0001 	.word	0x000f0001
   16dec:	402a8100 	.word	0x402a8100

00016df0 <eeprom_initialize>:
{
   16df0:	b530      	push	{r4, r5, lr}
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   16df2:	4c0f      	ldr	r4, [pc, #60]	; (16e30 <eeprom_initialize+0x40>)
   16df4:	f1a4 0e02 	sub.w	lr, r4, #2
   16df8:	347c      	adds	r4, #124	; 0x7c
{
   16dfa:	480e      	ldr	r0, [pc, #56]	; (16e34 <eeprom_initialize+0x44>)
		uint16_t index = 0;
   16dfc:	2500      	movs	r5, #0
			if (*p++ == 0xFFFF) break;
   16dfe:	f64f 7cff 	movw	ip, #65535	; 0xffff
   16e02:	e005      	b.n	16e10 <eeprom_initialize+0x20>
		sector_index[sector] = index;
   16e04:	f82e 1f02 	strh.w	r1, [lr, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   16e08:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
   16e0c:	45a6      	cmp	lr, r4
   16e0e:	d00b      	beq.n	16e28 <eeprom_initialize+0x38>
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16e10:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
		uint16_t index = 0;
   16e14:	4629      	mov	r1, r5
			if (*p++ == 0xFFFF) break;
   16e16:	881a      	ldrh	r2, [r3, #0]
   16e18:	3302      	adds	r3, #2
   16e1a:	4562      	cmp	r2, ip
   16e1c:	d0f2      	beq.n	16e04 <eeprom_initialize+0x14>
			index++;
   16e1e:	3101      	adds	r1, #1
   16e20:	b289      	uxth	r1, r1
		} while (p < end);
   16e22:	4283      	cmp	r3, r0
   16e24:	d3f7      	bcc.n	16e16 <eeprom_initialize+0x26>
   16e26:	e7ed      	b.n	16e04 <eeprom_initialize+0x14>
	initialized = 1;
   16e28:	4b03      	ldr	r3, [pc, #12]	; (16e38 <eeprom_initialize+0x48>)
   16e2a:	2201      	movs	r2, #1
   16e2c:	701a      	strb	r2, [r3, #0]
}
   16e2e:	bd30      	pop	{r4, r5, pc}
   16e30:	2000854c 	.word	0x2000854c
   16e34:	607c1000 	.word	0x607c1000
   16e38:	20008c2a 	.word	0x20008c2a

00016e3c <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
   16e3c:	f241 03bb 	movw	r3, #4283	; 0x10bb
   16e40:	4298      	cmp	r0, r3
   16e42:	d82d      	bhi.n	16ea0 <eeprom_read_byte+0x64>
{
   16e44:	b510      	push	{r4, lr}
   16e46:	4604      	mov	r4, r0
	if (!initialized) eeprom_initialize();
   16e48:	4b17      	ldr	r3, [pc, #92]	; (16ea8 <eeprom_read_byte+0x6c>)
   16e4a:	781b      	ldrb	r3, [r3, #0]
   16e4c:	b32b      	cbz	r3, 16e9a <eeprom_read_byte+0x5e>
	sector = (addr >> 2) % FLASH_SECTORS;
   16e4e:	08a3      	lsrs	r3, r4, #2
   16e50:	4a16      	ldr	r2, [pc, #88]	; (16eac <eeprom_read_byte+0x70>)
   16e52:	fba2 1203 	umull	r1, r2, r2, r3
   16e56:	1a99      	subs	r1, r3, r2
   16e58:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   16e5c:	0952      	lsrs	r2, r2, #5
   16e5e:	4611      	mov	r1, r2
   16e60:	ebc2 1282 	rsb	r2, r2, r2, lsl #6
   16e64:	1a9a      	subs	r2, r3, r2
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   16e66:	f004 0c03 	and.w	ip, r4, #3
   16e6a:	ea4c 0c81 	orr.w	ip, ip, r1, lsl #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16e6e:	4910      	ldr	r1, [pc, #64]	; (16eb0 <eeprom_read_byte+0x74>)
   16e70:	4411      	add	r1, r2
   16e72:	030b      	lsls	r3, r1, #12
	end = p + sector_index[sector];
   16e74:	480f      	ldr	r0, [pc, #60]	; (16eb4 <eeprom_read_byte+0x78>)
   16e76:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
   16e7a:	0064      	lsls	r4, r4, #1
   16e7c:	eb04 3401 	add.w	r4, r4, r1, lsl #12
	while (p < end) {
   16e80:	ebb4 3f01 	cmp.w	r4, r1, lsl #12
   16e84:	d90e      	bls.n	16ea4 <eeprom_read_byte+0x68>
	uint8_t data=0xFF;
   16e86:	20ff      	movs	r0, #255	; 0xff
		uint32_t val = *p++;
   16e88:	881a      	ldrh	r2, [r3, #0]
   16e8a:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
   16e8c:	b2d1      	uxtb	r1, r2
   16e8e:	4561      	cmp	r1, ip
   16e90:	bf08      	it	eq
   16e92:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
   16e94:	429c      	cmp	r4, r3
   16e96:	d8f7      	bhi.n	16e88 <eeprom_read_byte+0x4c>
}
   16e98:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
   16e9a:	f7ff ffa9 	bl	16df0 <eeprom_initialize>
   16e9e:	e7d6      	b.n	16e4e <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
   16ea0:	20ff      	movs	r0, #255	; 0xff
}
   16ea2:	4770      	bx	lr
	uint8_t data=0xFF;
   16ea4:	20ff      	movs	r0, #255	; 0xff
   16ea6:	e7f7      	b.n	16e98 <eeprom_read_byte+0x5c>
   16ea8:	20008c2a 	.word	0x20008c2a
   16eac:	04104105 	.word	0x04104105
   16eb0:	000607c0 	.word	0x000607c0
   16eb4:	2000854c 	.word	0x2000854c

00016eb8 <eepromemu_flash_write>:
{
   16eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ebc:	460e      	mov	r6, r1
   16ebe:	4615      	mov	r5, r2
	__disable_irq();
   16ec0:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16ec2:	4b33      	ldr	r3, [pc, #204]	; (16f90 <eepromemu_flash_write+0xd8>)
   16ec4:	4a33      	ldr	r2, [pc, #204]	; (16f94 <eepromemu_flash_write+0xdc>)
   16ec6:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16ec8:	2202      	movs	r2, #2
   16eca:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
   16ecc:	2200      	movs	r2, #0
   16ece:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   16ed2:	f240 4106 	movw	r1, #1030	; 0x406
   16ed6:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   16eda:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   16ede:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   16ee2:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   16ee6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16eea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16eee:	2201      	movs	r2, #1
   16ef0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   16ef4:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
   16ef8:	1942      	adds	r2, r0, r5
	asm("dsb");
   16efa:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   16efe:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
   16f02:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
   16f06:	3320      	adds	r3, #32
	} while (location < end_addr);
   16f08:	429a      	cmp	r2, r3
   16f0a:	d8fa      	bhi.n	16f02 <eepromemu_flash_write+0x4a>
	asm("dsb");
   16f0c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   16f10:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   16f14:	4c1e      	ldr	r4, [pc, #120]	; (16f90 <eepromemu_flash_write+0xd8>)
   16f16:	6963      	ldr	r3, [r4, #20]
   16f18:	f013 0f01 	tst.w	r3, #1
   16f1c:	d0fb      	beq.n	16f16 <eepromemu_flash_write+0x5e>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16f1e:	4b1c      	ldr	r3, [pc, #112]	; (16f90 <eepromemu_flash_write+0xd8>)
   16f20:	2201      	movs	r2, #1
   16f22:	615a      	str	r2, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   16f24:	491c      	ldr	r1, [pc, #112]	; (16f98 <eepromemu_flash_write+0xe0>)
   16f26:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   16f2a:	f242 2101 	movw	r1, #8705	; 0x2201
   16f2e:	f8c3 12f4 	str.w	r1, [r3, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
   16f32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   16f36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16f3a:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   16f3e:	b2a9      	uxth	r1, r5
   16f40:	f441 2170 	orr.w	r1, r1, #983040	; 0xf0000
   16f44:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16f48:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   16f4c:	461c      	mov	r4, r3
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16f4e:	f8df 804c 	ldr.w	r8, [pc, #76]	; 16f9c <eepromemu_flash_write+0xe4>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   16f52:	6963      	ldr	r3, [r4, #20]
   16f54:	f013 0f01 	tst.w	r3, #1
   16f58:	d112      	bne.n	16f80 <eepromemu_flash_write+0xc8>
		if (n & FLEXSPI_INTR_IPTXWE) {
   16f5a:	f013 0f40 	tst.w	r3, #64	; 0x40
   16f5e:	d0f8      	beq.n	16f52 <eepromemu_flash_write+0x9a>
			if (wrlen > 8) wrlen = 8;
   16f60:	2d08      	cmp	r5, #8
   16f62:	d80b      	bhi.n	16f7c <eepromemu_flash_write+0xc4>
			if (wrlen > 0) {
   16f64:	b13d      	cbz	r5, 16f76 <eepromemu_flash_write+0xbe>
			uint32_t wrlen = len;
   16f66:	462f      	mov	r7, r5
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16f68:	463a      	mov	r2, r7
   16f6a:	4631      	mov	r1, r6
   16f6c:	4640      	mov	r0, r8
   16f6e:	f000 f9bf 	bl	172f0 <memcpy>
				src += wrlen;
   16f72:	443e      	add	r6, r7
				len -= wrlen;
   16f74:	1bed      	subs	r5, r5, r7
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
   16f76:	2340      	movs	r3, #64	; 0x40
   16f78:	6163      	str	r3, [r4, #20]
   16f7a:	e7ea      	b.n	16f52 <eepromemu_flash_write+0x9a>
			if (wrlen > 8) wrlen = 8;
   16f7c:	2708      	movs	r7, #8
   16f7e:	e7f3      	b.n	16f68 <eepromemu_flash_write+0xb0>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
   16f80:	4b03      	ldr	r3, [pc, #12]	; (16f90 <eepromemu_flash_write+0xd8>)
   16f82:	2241      	movs	r2, #65	; 0x41
   16f84:	615a      	str	r2, [r3, #20]
	flash_wait();
   16f86:	f7ff ff01 	bl	16d8c <flash_wait>
}
   16f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16f8e:	bf00      	nop
   16f90:	402a8000 	.word	0x402a8000
   16f94:	5af05af0 	.word	0x5af05af0
   16f98:	08180432 	.word	0x08180432
   16f9c:	402a8180 	.word	0x402a8180

00016fa0 <eepromemu_flash_erase_sector>:
{
   16fa0:	b508      	push	{r3, lr}
	__disable_irq();
   16fa2:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16fa4:	4b28      	ldr	r3, [pc, #160]	; (17048 <eepromemu_flash_erase_sector+0xa8>)
   16fa6:	4a29      	ldr	r2, [pc, #164]	; (1704c <eepromemu_flash_erase_sector+0xac>)
   16fa8:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16faa:	2202      	movs	r2, #2
   16fac:	61da      	str	r2, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   16fae:	f240 4206 	movw	r2, #1030	; 0x406
   16fb2:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   16fb6:	2200      	movs	r2, #0
   16fb8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   16fbc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   16fc0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
   16fc4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   16fc8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16fcc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16fd0:	2201      	movs	r2, #1
   16fd2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   16fd6:	4b1e      	ldr	r3, [pc, #120]	; (17050 <eepromemu_flash_erase_sector+0xb0>)
   16fd8:	4003      	ands	r3, r0
	asm("dsb");
   16fda:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
   16fde:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
   16fe2:	f103 0120 	add.w	r1, r3, #32
   16fe6:	428a      	cmp	r2, r1
   16fe8:	bf34      	ite	cc
   16fea:	2201      	movcc	r2, #1
   16fec:	2280      	movcs	r2, #128	; 0x80
   16fee:	eb03 1242 	add.w	r2, r3, r2, lsl #5
		SCB_CACHE_DCIMVAC = location;
   16ff2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   16ff6:	f8c1 3f5c 	str.w	r3, [r1, #3932]	; 0xf5c
		location += 32;
   16ffa:	3320      	adds	r3, #32
	} while (location < end_addr);
   16ffc:	4293      	cmp	r3, r2
   16ffe:	d1fa      	bne.n	16ff6 <eepromemu_flash_erase_sector+0x56>
	asm("dsb");
   17000:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17004:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   17008:	4a0f      	ldr	r2, [pc, #60]	; (17048 <eepromemu_flash_erase_sector+0xa8>)
   1700a:	6953      	ldr	r3, [r2, #20]
   1700c:	f013 0f01 	tst.w	r3, #1
   17010:	d0fb      	beq.n	1700a <eepromemu_flash_erase_sector+0x6a>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   17012:	4b0d      	ldr	r3, [pc, #52]	; (17048 <eepromemu_flash_erase_sector+0xa8>)
   17014:	2101      	movs	r1, #1
   17016:	6159      	str	r1, [r3, #20]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   17018:	4a0e      	ldr	r2, [pc, #56]	; (17054 <eepromemu_flash_erase_sector+0xb4>)
   1701a:	f8c3 22f0 	str.w	r2, [r3, #752]	; 0x2f0
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   1701e:	4a0e      	ldr	r2, [pc, #56]	; (17058 <eepromemu_flash_erase_sector+0xb8>)
   17020:	4002      	ands	r2, r0
   17022:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   17026:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1702a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1702e:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   17032:	461a      	mov	r2, r3
   17034:	6953      	ldr	r3, [r2, #20]
   17036:	f013 0f01 	tst.w	r3, #1
   1703a:	d0fb      	beq.n	17034 <eepromemu_flash_erase_sector+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   1703c:	4b02      	ldr	r3, [pc, #8]	; (17048 <eepromemu_flash_erase_sector+0xa8>)
   1703e:	2201      	movs	r2, #1
   17040:	615a      	str	r2, [r3, #20]
	flash_wait();
   17042:	f7ff fea3 	bl	16d8c <flash_wait>
}
   17046:	bd08      	pop	{r3, pc}
   17048:	402a8000 	.word	0x402a8000
   1704c:	5af05af0 	.word	0x5af05af0
   17050:	fffff000 	.word	0xfffff000
   17054:	08180420 	.word	0x08180420
   17058:	00fff000 	.word	0x00fff000

0001705c <eeprom_write_byte>:
	if (addr > E2END) return;
   1705c:	f241 03bb 	movw	r3, #4283	; 0x10bb
   17060:	4298      	cmp	r0, r3
   17062:	f200 808f 	bhi.w	17184 <eeprom_write_byte+0x128>
{
   17066:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1706a:	b0c2      	sub	sp, #264	; 0x108
   1706c:	4605      	mov	r5, r0
   1706e:	4688      	mov	r8, r1
	if (!initialized) eeprom_initialize();
   17070:	4b45      	ldr	r3, [pc, #276]	; (17188 <eeprom_write_byte+0x12c>)
   17072:	781b      	ldrb	r3, [r3, #0]
   17074:	2b00      	cmp	r3, #0
   17076:	d03c      	beq.n	170f2 <eeprom_write_byte+0x96>
	sector = (addr >> 2) % FLASH_SECTORS; 
   17078:	08ab      	lsrs	r3, r5, #2
   1707a:	4f44      	ldr	r7, [pc, #272]	; (1718c <eeprom_write_byte+0x130>)
   1707c:	fba7 2703 	umull	r2, r7, r7, r3
   17080:	1bda      	subs	r2, r3, r7
   17082:	eb07 0752 	add.w	r7, r7, r2, lsr #1
   17086:	097f      	lsrs	r7, r7, #5
   17088:	463a      	mov	r2, r7
   1708a:	ebc7 1787 	rsb	r7, r7, r7, lsl #6
   1708e:	1bdf      	subs	r7, r3, r7
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   17090:	f005 0503 	and.w	r5, r5, #3
   17094:	ea45 0582 	orr.w	r5, r5, r2, lsl #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   17098:	4b3d      	ldr	r3, [pc, #244]	; (17190 <eeprom_write_byte+0x134>)
   1709a:	443b      	add	r3, r7
   1709c:	031e      	lsls	r6, r3, #12
	end = p + sector_index[sector];
   1709e:	4a3d      	ldr	r2, [pc, #244]	; (17194 <eeprom_write_byte+0x138>)
   170a0:	f832 4017 	ldrh.w	r4, [r2, r7, lsl #1]
   170a4:	0060      	lsls	r0, r4, #1
   170a6:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
   170aa:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
   170ae:	d923      	bls.n	170f8 <eeprom_write_byte+0x9c>
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   170b0:	4633      	mov	r3, r6
	uint8_t olddata=0xFF;
   170b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
   170b6:	881a      	ldrh	r2, [r3, #0]
   170b8:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
   170ba:	b2d1      	uxtb	r1, r2
   170bc:	42a9      	cmp	r1, r5
   170be:	bf08      	it	eq
   170c0:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
   170c4:	4298      	cmp	r0, r3
   170c6:	d8f6      	bhi.n	170b6 <eeprom_write_byte+0x5a>
	if (data == olddata) return;
   170c8:	45e0      	cmp	r8, ip
   170ca:	d00f      	beq.n	170ec <eeprom_write_byte+0x90>
	if (sector_index[sector] < 2048) {
   170cc:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   170d0:	d215      	bcs.n	170fe <eeprom_write_byte+0xa2>
		uint16_t newdata = offset | (data << 8);
   170d2:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
   170d6:	f8ad 5006 	strh.w	r5, [sp, #6]
		eepromemu_flash_write(end, &newdata, 2);
   170da:	2202      	movs	r2, #2
   170dc:	f10d 0106 	add.w	r1, sp, #6
   170e0:	f7ff feea 	bl	16eb8 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
   170e4:	3401      	adds	r4, #1
   170e6:	4b2b      	ldr	r3, [pc, #172]	; (17194 <eeprom_write_byte+0x138>)
   170e8:	f823 4017 	strh.w	r4, [r3, r7, lsl #1]
}
   170ec:	b042      	add	sp, #264	; 0x108
   170ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
   170f2:	f7ff fe7d 	bl	16df0 <eeprom_initialize>
   170f6:	e7bf      	b.n	17078 <eeprom_write_byte+0x1c>
	uint8_t olddata=0xFF;
   170f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   170fc:	e7e4      	b.n	170c8 <eeprom_write_byte+0x6c>
		memset(buf, 0xFF, sizeof(buf));
   170fe:	f44f 7280 	mov.w	r2, #256	; 0x100
   17102:	21ff      	movs	r1, #255	; 0xff
   17104:	a802      	add	r0, sp, #8
   17106:	f00b ffa7 	bl	23058 <memset>
		while (p < end) {
   1710a:	1cb1      	adds	r1, r6, #2
   1710c:	f506 5380 	add.w	r3, r6, #4096	; 0x1000
   17110:	4299      	cmp	r1, r3
   17112:	bf8c      	ite	hi
   17114:	2101      	movhi	r1, #1
   17116:	f44f 6100 	movls.w	r1, #2048	; 0x800
   1711a:	eb06 0141 	add.w	r1, r6, r1, lsl #1
		p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1711e:	4632      	mov	r2, r6
			buf[val & 255] = val >> 8;
   17120:	a802      	add	r0, sp, #8
			uint16_t val = *p++;
   17122:	4613      	mov	r3, r2
   17124:	3202      	adds	r2, #2
   17126:	881b      	ldrh	r3, [r3, #0]
			buf[val & 255] = val >> 8;
   17128:	b2dc      	uxtb	r4, r3
   1712a:	0a1b      	lsrs	r3, r3, #8
   1712c:	5503      	strb	r3, [r0, r4]
		while (p < end) {
   1712e:	428a      	cmp	r2, r1
   17130:	d1f7      	bne.n	17122 <eeprom_write_byte+0xc6>
		buf[offset] = data;
   17132:	ab02      	add	r3, sp, #8
   17134:	f803 8005 	strb.w	r8, [r3, r5]
		eepromemu_flash_erase_sector(p);
   17138:	4630      	mov	r0, r6
   1713a:	f7ff ff31 	bl	16fa0 <eepromemu_flash_erase_sector>
		for (i=0; i < 256; i++) {
   1713e:	f10d 0907 	add.w	r9, sp, #7
   17142:	f20d 1807 	addw	r8, sp, #263	; 0x107
		eepromemu_flash_erase_sector(p);
   17146:	464c      	mov	r4, r9
		index = 0;
   17148:	2500      	movs	r5, #0
				eepromemu_flash_write(p + index, &newval, 2);
   1714a:	f04f 0a02 	mov.w	sl, #2
   1714e:	e001      	b.n	17154 <eeprom_write_byte+0xf8>
		for (i=0; i < 256; i++) {
   17150:	45a0      	cmp	r8, r4
   17152:	d013      	beq.n	1717c <eeprom_write_byte+0x120>
			if (buf[i] != 0xFF) {
   17154:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   17158:	2aff      	cmp	r2, #255	; 0xff
   1715a:	d0f9      	beq.n	17150 <eeprom_write_byte+0xf4>
				uint16_t newval = i | (buf[i] << 8);
   1715c:	1e63      	subs	r3, r4, #1
   1715e:	eba3 0309 	sub.w	r3, r3, r9
   17162:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17166:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
   1716a:	4652      	mov	r2, sl
   1716c:	f10d 0106 	add.w	r1, sp, #6
   17170:	eb06 0045 	add.w	r0, r6, r5, lsl #1
   17174:	f7ff fea0 	bl	16eb8 <eepromemu_flash_write>
				index = index + 1;
   17178:	3501      	adds	r5, #1
   1717a:	e7e9      	b.n	17150 <eeprom_write_byte+0xf4>
		sector_index[sector] = index;
   1717c:	4b05      	ldr	r3, [pc, #20]	; (17194 <eeprom_write_byte+0x138>)
   1717e:	f823 5017 	strh.w	r5, [r3, r7, lsl #1]
   17182:	e7b3      	b.n	170ec <eeprom_write_byte+0x90>
   17184:	4770      	bx	lr
   17186:	bf00      	nop
   17188:	20008c2a 	.word	0x20008c2a
   1718c:	04104105 	.word	0x04104105
   17190:	000607c0 	.word	0x000607c0
   17194:	2000854c 	.word	0x2000854c

00017198 <eeprom_write_block>:
	while (len--) {
   17198:	b16a      	cbz	r2, 171b6 <eeprom_write_block+0x1e>
{
   1719a:	b570      	push	{r4, r5, r6, lr}
   1719c:	4605      	mov	r5, r0
   1719e:	460c      	mov	r4, r1
   171a0:	4616      	mov	r6, r2
   171a2:	440e      	add	r6, r1
		eeprom_write_byte(p++, *src++);
   171a4:	4620      	mov	r0, r4
   171a6:	3401      	adds	r4, #1
   171a8:	f815 1b01 	ldrb.w	r1, [r5], #1
   171ac:	f7ff ff56 	bl	1705c <eeprom_write_byte>
	while (len--) {
   171b0:	42a6      	cmp	r6, r4
   171b2:	d1f7      	bne.n	171a4 <eeprom_write_block+0xc>
}
   171b4:	bd70      	pop	{r4, r5, r6, pc}
   171b6:	4770      	bx	lr

000171b8 <dummy_isr>:
static void dummy_isr() {};
   171b8:	4770      	bx	lr
	...

000171bc <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   171bc:	2836      	cmp	r0, #54	; 0x36
   171be:	d87c      	bhi.n	172ba <attachInterrupt+0xfe>
{
   171c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
   171c4:	0103      	lsls	r3, r0, #4
   171c6:	4c3d      	ldr	r4, [pc, #244]	; (172bc <attachInterrupt+0x100>)
   171c8:	58e3      	ldr	r3, [r4, r3]

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
   171ca:	4c3d      	ldr	r4, [pc, #244]	; (172c0 <attachInterrupt+0x104>)
   171cc:	42a3      	cmp	r3, r4
   171ce:	d025      	beq.n	1721c <attachInterrupt+0x60>
   171d0:	d81f      	bhi.n	17212 <attachInterrupt+0x56>
   171d2:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
   171d6:	d023      	beq.n	17220 <attachInterrupt+0x64>
   171d8:	f5a4 4480 	sub.w	r4, r4, #16384	; 0x4000
   171dc:	42a3      	cmp	r3, r4
   171de:	d15d      	bne.n	1729c <attachInterrupt+0xe0>
   171e0:	4d38      	ldr	r5, [pc, #224]	; (172c4 <attachInterrupt+0x108>)
	volatile uint32_t *mux = portConfigRegister(pin);
   171e2:	4c36      	ldr	r4, [pc, #216]	; (172bc <attachInterrupt+0x100>)
   171e4:	eb04 1000 	add.w	r0, r4, r0, lsl #4
   171e8:	f8d0 8004 	ldr.w	r8, [r0, #4]
	volatile uint32_t *pad = portControlRegister(pin);
   171ec:	6886      	ldr	r6, [r0, #8]
	uint32_t mask = digitalPinToBitMask(pin);
   171ee:	68c4      	ldr	r4, [r0, #12]
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   171f0:	4835      	ldr	r0, [pc, #212]	; (172c8 <attachInterrupt+0x10c>)
   171f2:	4f36      	ldr	r7, [pc, #216]	; (172cc <attachInterrupt+0x110>)
   171f4:	f8c0 72b4 	str.w	r7, [r0, #692]	; 0x2b4
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
   171f8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   171fc:	f04f 5700 	mov.w	r7, #536870912	; 0x20000000
   17200:	f8c0 7110 	str.w	r7, [r0, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
   17204:	2a04      	cmp	r2, #4
   17206:	d849      	bhi.n	1729c <attachInterrupt+0xe0>
   17208:	e8df f002 	tbb	[pc, r2]
   1720c:	0c0f1215 	.word	0x0c0f1215
   17210:	15          	.byte	0x15
   17211:	00          	.byte	0x00
	switch((uint32_t)gpio) {
   17212:	4c2f      	ldr	r4, [pc, #188]	; (172d0 <attachInterrupt+0x114>)
   17214:	42a3      	cmp	r3, r4
   17216:	d141      	bne.n	1729c <attachInterrupt+0xe0>
			table = isr_table_gpio4;
   17218:	4d2e      	ldr	r5, [pc, #184]	; (172d4 <attachInterrupt+0x118>)
   1721a:	e7e2      	b.n	171e2 <attachInterrupt+0x26>
			table = isr_table_gpio3;
   1721c:	4d2e      	ldr	r5, [pc, #184]	; (172d8 <attachInterrupt+0x11c>)
   1721e:	e7e0      	b.n	171e2 <attachInterrupt+0x26>
			table = isr_table_gpio1;
   17220:	4d2e      	ldr	r5, [pc, #184]	; (172dc <attachInterrupt+0x120>)
   17222:	e7de      	b.n	171e2 <attachInterrupt+0x26>
	switch (mode) {
   17224:	f04f 0c02 	mov.w	ip, #2
   17228:	e007      	b.n	1723a <attachInterrupt+0x7e>
		case CHANGE:  icr = 0; break;
		case RISING:  icr = 2; break;
		case FALLING: icr = 3; break;
   1722a:	f04f 0c03 	mov.w	ip, #3
   1722e:	e004      	b.n	1723a <attachInterrupt+0x7e>
		case LOW:     icr = 0; break;
		case HIGH:    icr = 1; break;
   17230:	f04f 0c01 	mov.w	ip, #1
   17234:	e001      	b.n	1723a <attachInterrupt+0x7e>
		case CHANGE:  icr = 0; break;
   17236:	f04f 0c00 	mov.w	ip, #0
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   1723a:	6958      	ldr	r0, [r3, #20]
   1723c:	ea6f 0e04 	mvn.w	lr, r4
   17240:	ea20 0004 	bic.w	r0, r0, r4
   17244:	6158      	str	r0, [r3, #20]
	*mux = 5;			// pin is GPIO
   17246:	2005      	movs	r0, #5
   17248:	f8c8 0000 	str.w	r0, [r8]
	*pad |= IOMUXC_PAD_HYS;		// use hystersis avoid false trigger by slow signals
   1724c:	6830      	ldr	r0, [r6, #0]
   1724e:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
   17252:	6030      	str	r0, [r6, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
   17254:	6858      	ldr	r0, [r3, #4]
   17256:	ea20 0004 	bic.w	r0, r0, r4
   1725a:	6058      	str	r0, [r3, #4]
	uint32_t index = __builtin_ctz(mask);
   1725c:	fa94 f0a4 	rbit	r0, r4
   17260:	fab0 f080 	clz	r0, r0
	table[index] = function;
   17264:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
	if (mode == CHANGE) {
   17268:	2a04      	cmp	r2, #4
   1726a:	d010      	beq.n	1728e <attachInterrupt+0xd2>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
   1726c:	69da      	ldr	r2, [r3, #28]
   1726e:	ea0e 0202 	and.w	r2, lr, r2
   17272:	61da      	str	r2, [r3, #28]
		if (index < 16) {
   17274:	280f      	cmp	r0, #15
   17276:	d813      	bhi.n	172a0 <attachInterrupt+0xe4>
			uint32_t shift = index * 2;
   17278:	0040      	lsls	r0, r0, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
   1727a:	68da      	ldr	r2, [r3, #12]
   1727c:	2103      	movs	r1, #3
   1727e:	4081      	lsls	r1, r0
   17280:	ea22 0201 	bic.w	r2, r2, r1
   17284:	fa0c f000 	lsl.w	r0, ip, r0
   17288:	4302      	orrs	r2, r0
   1728a:	60da      	str	r2, [r3, #12]
   1728c:	e002      	b.n	17294 <attachInterrupt+0xd8>
		gpio[EDGE_INDEX] |= mask;
   1728e:	69da      	ldr	r2, [r3, #28]
   17290:	4322      	orrs	r2, r4
   17292:	61da      	str	r2, [r3, #28]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
   17294:	619c      	str	r4, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
   17296:	695a      	ldr	r2, [r3, #20]
   17298:	4322      	orrs	r2, r4
   1729a:	615a      	str	r2, [r3, #20]
}
   1729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uint32_t shift = (index - 16) * 2;
   172a0:	3810      	subs	r0, #16
   172a2:	0040      	lsls	r0, r0, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   172a4:	691a      	ldr	r2, [r3, #16]
   172a6:	2103      	movs	r1, #3
   172a8:	4081      	lsls	r1, r0
   172aa:	ea22 0201 	bic.w	r2, r2, r1
   172ae:	fa0c fc00 	lsl.w	ip, ip, r0
   172b2:	ea42 020c 	orr.w	r2, r2, ip
   172b6:	611a      	str	r2, [r3, #16]
   172b8:	e7ec      	b.n	17294 <attachInterrupt+0xd8>
   172ba:	4770      	bx	lr
   172bc:	2000373c 	.word	0x2000373c
   172c0:	42008000 	.word	0x42008000
   172c4:	20005900 	.word	0x20005900
   172c8:	20006000 	.word	0x20006000
   172cc:	00000021 	.word	0x00000021
   172d0:	4200c000 	.word	0x4200c000
   172d4:	20005a00 	.word	0x20005a00
   172d8:	20005980 	.word	0x20005980
   172dc:	20005880 	.word	0x20005880

000172e0 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   172e0:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   172e2:	f7f0 f9fd 	bl	76e0 <setup>
	while (1) {
		loop();
   172e6:	f7f2 fd63 	bl	9db0 <loop>
		yield();
   172ea:	f7f4 fd73 	bl	bdd4 <yield>
	while (1) {
   172ee:	e7fa      	b.n	172e6 <main+0x6>

000172f0 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   172f0:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   172f2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   172f6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   172fa:	d16d      	bne.n	173d8 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   172fc:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   172fe:	d341      	bcc.n	17384 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   17300:	f851 3b04 	ldr.w	r3, [r1], #4
   17304:	f840 3b04 	str.w	r3, [r0], #4
   17308:	f851 3b04 	ldr.w	r3, [r1], #4
   1730c:	f840 3b04 	str.w	r3, [r0], #4
   17310:	f851 3b04 	ldr.w	r3, [r1], #4
   17314:	f840 3b04 	str.w	r3, [r0], #4
   17318:	f851 3b04 	ldr.w	r3, [r1], #4
   1731c:	f840 3b04 	str.w	r3, [r0], #4
   17320:	f851 3b04 	ldr.w	r3, [r1], #4
   17324:	f840 3b04 	str.w	r3, [r0], #4
   17328:	f851 3b04 	ldr.w	r3, [r1], #4
   1732c:	f840 3b04 	str.w	r3, [r0], #4
   17330:	f851 3b04 	ldr.w	r3, [r1], #4
   17334:	f840 3b04 	str.w	r3, [r0], #4
   17338:	f851 3b04 	ldr.w	r3, [r1], #4
   1733c:	f840 3b04 	str.w	r3, [r0], #4
   17340:	f851 3b04 	ldr.w	r3, [r1], #4
   17344:	f840 3b04 	str.w	r3, [r0], #4
   17348:	f851 3b04 	ldr.w	r3, [r1], #4
   1734c:	f840 3b04 	str.w	r3, [r0], #4
   17350:	f851 3b04 	ldr.w	r3, [r1], #4
   17354:	f840 3b04 	str.w	r3, [r0], #4
   17358:	f851 3b04 	ldr.w	r3, [r1], #4
   1735c:	f840 3b04 	str.w	r3, [r0], #4
   17360:	f851 3b04 	ldr.w	r3, [r1], #4
   17364:	f840 3b04 	str.w	r3, [r0], #4
   17368:	f851 3b04 	ldr.w	r3, [r1], #4
   1736c:	f840 3b04 	str.w	r3, [r0], #4
   17370:	f851 3b04 	ldr.w	r3, [r1], #4
   17374:	f840 3b04 	str.w	r3, [r0], #4
   17378:	f851 3b04 	ldr.w	r3, [r1], #4
   1737c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   17380:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   17382:	d2bd      	bcs.n	17300 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   17384:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   17386:	d311      	bcc.n	173ac <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   17388:	f851 3b04 	ldr.w	r3, [r1], #4
   1738c:	f840 3b04 	str.w	r3, [r0], #4
   17390:	f851 3b04 	ldr.w	r3, [r1], #4
   17394:	f840 3b04 	str.w	r3, [r0], #4
   17398:	f851 3b04 	ldr.w	r3, [r1], #4
   1739c:	f840 3b04 	str.w	r3, [r0], #4
   173a0:	f851 3b04 	ldr.w	r3, [r1], #4
   173a4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   173a8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   173aa:	d2ed      	bcs.n	17388 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   173ac:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   173ae:	d305      	bcc.n	173bc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   173b0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   173b4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   173b8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   173ba:	d2f9      	bcs.n	173b0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   173bc:	3204      	adds	r2, #4
	beq	.Ldone
   173be:	d008      	beq.n	173d2 <memcpy+0xe2>

	lsls	r2, r2, #31
   173c0:	07d2      	lsls	r2, r2, #31
	itt ne
   173c2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   173c4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   173c8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   173cc:	d301      	bcc.n	173d2 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   173ce:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   173d0:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   173d2:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   173d4:	4770      	bx	lr
   173d6:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   173d8:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   173da:	d313      	bcc.n	17404 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   173dc:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   173de:	d08d      	beq.n	172fc <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   173e0:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   173e4:	d08a      	beq.n	172fc <memcpy+0xc>

	rsb	r3, #4
   173e6:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   173ea:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   173ec:	07db      	lsls	r3, r3, #31
	itt ne
   173ee:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   173f0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   173f4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   173f8:	d380      	bcc.n	172fc <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   173fa:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   173fe:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   17402:	e77b      	b.n	172fc <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   17404:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   17406:	d3d9      	bcc.n	173bc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   17408:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   1740a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   1740e:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   17412:	d2f9      	bcs.n	17408 <memcpy+0x118>

	ldrb	r3, [r1]
   17414:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   17416:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   17418:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   1741a:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   1741c:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   1741e:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   17420:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   17422:	4770      	bx	lr

00017424 <operator new(unsigned int)>:
 */

#include <stdlib.h>

void * operator new(size_t size)
{
   17424:	b508      	push	{r3, lr}
	return malloc(size);
   17426:	f00a fc57 	bl	21cd8 <malloc>
}
   1742a:	bd08      	pop	{r3, pc}

0001742c <operator new[](unsigned int)>:

void * operator new[](size_t size)
{
   1742c:	b508      	push	{r3, lr}
	return malloc(size);
   1742e:	f00a fc53 	bl	21cd8 <malloc>
}
   17432:	bd08      	pop	{r3, pc}

00017434 <operator delete(void*)>:

void operator delete(void * ptr)
{
   17434:	b508      	push	{r3, lr}
	free(ptr);
   17436:	f00a fc57 	bl	21ce8 <free>
}
   1743a:	bd08      	pop	{r3, pc}

0001743c <operator delete[](void*)>:

void operator delete[](void * ptr)
{
   1743c:	b508      	push	{r3, lr}
	free(ptr);
   1743e:	f00a fc53 	bl	21ce8 <free>
}
   17442:	bd08      	pop	{r3, pc}

00017444 <operator delete(void*, unsigned int)>:

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
   17444:	b508      	push	{r3, lr}
	free(ptr);
   17446:	f00a fc4f 	bl	21ce8 <free>
}
   1744a:	bd08      	pop	{r3, pc}

0001744c <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
   1744c:	b530      	push	{r4, r5, lr}
   1744e:	4684      	mov	ip, r0
   17450:	4608      	mov	r0, r1
	unsigned digit;
	int i=0, j;
   17452:	3901      	subs	r1, #1
{
   17454:	460d      	mov	r5, r1
	int i=0, j;
   17456:	f04f 0e00 	mov.w	lr, #0
   1745a:	e002      	b.n	17462 <ultoa+0x16>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
   1745c:	f10e 0e01 	add.w	lr, lr, #1
		val /= radix;
   17460:	469c      	mov	ip, r3
		digit = val % radix;
   17462:	fbbc f3f2 	udiv	r3, ip, r2
   17466:	fb02 c313 	mls	r3, r2, r3, ip
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   1746a:	2b09      	cmp	r3, #9
   1746c:	bf94      	ite	ls
   1746e:	3330      	addls	r3, #48	; 0x30
   17470:	3337      	addhi	r3, #55	; 0x37
   17472:	b2db      	uxtb	r3, r3
   17474:	4674      	mov	r4, lr
   17476:	f805 3f01 	strb.w	r3, [r5, #1]!
		val /= radix;
   1747a:	fbbc f3f2 	udiv	r3, ip, r2
		if (val == 0) break;
   1747e:	4562      	cmp	r2, ip
   17480:	d9ec      	bls.n	1745c <ultoa+0x10>
	}
	buf[i + 1] = 0;
   17482:	1c63      	adds	r3, r4, #1
   17484:	eb00 0c03 	add.w	ip, r0, r3
   17488:	2200      	movs	r2, #0
   1748a:	54c2      	strb	r2, [r0, r3]
	for (j=0; j < i; j++, i--) {
   1748c:	4596      	cmp	lr, r2
   1748e:	dd0e      	ble.n	174ae <ultoa+0x62>
		t = buf[j];
   17490:	460a      	mov	r2, r1
   17492:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		buf[j] = buf[i];
   17496:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   1749a:	700d      	strb	r5, [r1, #0]
		buf[i] = t;
   1749c:	f88c 3000 	strb.w	r3, [ip]
	for (j=0; j < i; j++, i--) {
   174a0:	3202      	adds	r2, #2
   174a2:	1a12      	subs	r2, r2, r0
   174a4:	1a43      	subs	r3, r0, r1
   174a6:	3b01      	subs	r3, #1
   174a8:	4423      	add	r3, r4
   174aa:	429a      	cmp	r2, r3
   174ac:	dbf0      	blt.n	17490 <ultoa+0x44>
	}
	return buf;
}
   174ae:	bd30      	pop	{r4, r5, pc}

000174b0 <dtostrf>:
char * fcvtf(float, int, int *, int *);
int isnanf (float x);
int isinff (float x);

char * dtostrf(float val, int width, unsigned int precision, char *buf)
{
   174b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   174b4:	ed2d 8b02 	vpush	{d8}
   174b8:	b084      	sub	sp, #16
   174ba:	eeb0 8a40 	vmov.f32	s16, s0
   174be:	4605      	mov	r5, r0
   174c0:	4614      	mov	r4, r2
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
   174c2:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
   174c6:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
	if (isnanf(val)) {
   174ca:	eeb4 0a40 	vcmp.f32	s0, s0
   174ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   174d2:	d62c      	bvs.n	1752e <dtostrf+0x7e>
   174d4:	4688      	mov	r8, r1
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
   174d6:	eef0 7ac0 	vabs.f32	s15, s0
   174da:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 1779c <dtostrf+0x2ec>
   174de:	eef4 7a47 	vcmp.f32	s15, s14
   174e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   174e6:	dd52      	ble.n	1758e <dtostrf+0xde>
		int ndigs = (val<0) ? 4 : 3;
   174e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   174ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   174f0:	bf4c      	ite	mi
   174f2:	2304      	movmi	r3, #4
   174f4:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   174f6:	4293      	cmp	r3, r2
   174f8:	f280 817c 	bge.w	177f4 <dtostrf+0x344>
   174fc:	1ad2      	subs	r2, r2, r3
		if (width<0) {
   174fe:	2800      	cmp	r0, #0
   17500:	f280 817b 	bge.w	177fa <dtostrf+0x34a>
			while (awidth) {
   17504:	2a00      	cmp	r2, #0
   17506:	f000 813b 	beq.w	17780 <dtostrf+0x2d0>
   1750a:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
   1750c:	2220      	movs	r2, #32
   1750e:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
   17512:	42a3      	cmp	r3, r4
   17514:	d1fb      	bne.n	1750e <dtostrf+0x5e>
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   17516:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   1751a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1751e:	f140 8127 	bpl.w	17770 <dtostrf+0x2c0>
   17522:	2200      	movs	r2, #0
   17524:	461c      	mov	r4, r3
   17526:	232d      	movs	r3, #45	; 0x2d
   17528:	f804 3b01 	strb.w	r3, [r4], #1
   1752c:	e16b      	b.n	17806 <dtostrf+0x356>
		int ndigs = (val<0) ? 4 : 3;
   1752e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   17532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17536:	bf4c      	ite	mi
   17538:	2304      	movmi	r3, #4
   1753a:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1753c:	4293      	cmp	r3, r2
   1753e:	f280 8133 	bge.w	177a8 <dtostrf+0x2f8>
   17542:	1ad2      	subs	r2, r2, r3
		if (width<0) {
   17544:	2800      	cmp	r0, #0
   17546:	f280 8132 	bge.w	177ae <dtostrf+0x2fe>
			while (awidth) {
   1754a:	2a00      	cmp	r2, #0
   1754c:	f000 810c 	beq.w	17768 <dtostrf+0x2b8>
   17550:	18a3      	adds	r3, r4, r2
				*buf++ = ' ';
   17552:	2220      	movs	r2, #32
   17554:	f804 2b01 	strb.w	r2, [r4], #1
			while (awidth) {
   17558:	429c      	cmp	r4, r3
   1755a:	d1fb      	bne.n	17554 <dtostrf+0xa4>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   1755c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   17560:	ee18 2a10 	vmov	r2, s16
   17564:	2a00      	cmp	r2, #0
   17566:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   1756a:	fe67 7a87 	vselge.f32	s15, s15, s14
   1756e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   17572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17576:	f140 80f0 	bpl.w	1775a <dtostrf+0x2aa>
   1757a:	2200      	movs	r2, #0
   1757c:	461c      	mov	r4, r3
   1757e:	232d      	movs	r3, #45	; 0x2d
   17580:	f804 3b01 	strb.w	r3, [r4], #1
   17584:	e122      	b.n	177cc <dtostrf+0x31c>
   17586:	4623      	mov	r3, r4
   17588:	e7f8      	b.n	1757c <dtostrf+0xcc>
   1758a:	4623      	mov	r3, r4
   1758c:	e7ca      	b.n	17524 <dtostrf+0x74>
		}
		*buf = 0;
		return buf;
	}

	s = fcvtf(val, precision, &decpt, &sign);
   1758e:	468a      	mov	sl, r1
   17590:	aa02      	add	r2, sp, #8
   17592:	a903      	add	r1, sp, #12
   17594:	4640      	mov	r0, r8
   17596:	f00b fe67 	bl	23268 <fcvtf>
   1759a:	4607      	mov	r7, r0

	// if only 1 digit in output
	if (precision == 0 && decpt == 0) {
   1759c:	9b03      	ldr	r3, [sp, #12]
   1759e:	ea58 0203 	orrs.w	r2, r8, r3
   175a2:	d131      	bne.n	17608 <dtostrf+0x158>
		// round and move decimal point
		s = (*s < '5') ? "0" : "1";
   175a4:	7802      	ldrb	r2, [r0, #0]
   175a6:	487e      	ldr	r0, [pc, #504]	; (177a0 <dtostrf+0x2f0>)
   175a8:	4f7e      	ldr	r7, [pc, #504]	; (177a4 <dtostrf+0x2f4>)
   175aa:	2a34      	cmp	r2, #52	; 0x34
   175ac:	bf98      	it	ls
   175ae:	4607      	movls	r7, r0
		decpt++;
   175b0:	2301      	movs	r3, #1
   175b2:	9303      	str	r3, [sp, #12]
	if (-decpt  > (int)precision) {
		s = "0";
		decpt = -precision;
	}

	reqd = strlen(s);
   175b4:	461e      	mov	r6, r3
   175b6:	4618      	mov	r0, r3

	// add 1 for zero in front of decimal point
	if (decpt == 0) reqd++;

	// if leading zeros after decimal point
	if (decpt < 0 && precision > 0) {
   175b8:	f1b8 0e00 	subs.w	lr, r8, #0
   175bc:	bf18      	it	ne
   175be:	f04f 0e01 	movne.w	lr, #1
   175c2:	ea1e 79d3 	ands.w	r9, lr, r3, lsr #31
   175c6:	d036      	beq.n	17636 <dtostrf+0x186>
		// ensure enough trailing zeros, add 2 for '0.'
		reqd = precision + 2;
   175c8:	f108 0602 	add.w	r6, r8, #2

		if (strlen(s) > precision + decpt) {
   175cc:	4443      	add	r3, r8
   175ce:	4283      	cmp	r3, r0
   175d0:	d26d      	bcs.n	176ae <dtostrf+0x1fe>

			int newPrecision = precision;
			int newDecimalPoint;

			// shift decimal point
			while (newPrecision > 0) {
   175d2:	f1b8 0f00 	cmp.w	r8, #0
   175d6:	dd06      	ble.n	175e6 <dtostrf+0x136>
				val *= 10.0f;
   175d8:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
   175dc:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
   175e0:	f1ba 0a01 	subs.w	sl, sl, #1
   175e4:	d1fa      	bne.n	175dc <dtostrf+0x12c>
				newPrecision--;
			}

			// round after accounting for leading 0's
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   175e6:	aa02      	add	r2, sp, #8
   175e8:	a901      	add	r1, sp, #4
   175ea:	4650      	mov	r0, sl
   175ec:	eeb0 0a48 	vmov.f32	s0, s16
   175f0:	f00b fe3a 	bl	23268 <fcvtf>
   175f4:	4607      	mov	r7, r0

			// if rounded up to new digit (e.g. 0.09 to 0.1), move decimal point
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   175f6:	9903      	ldr	r1, [sp, #12]
   175f8:	9b01      	ldr	r3, [sp, #4]
   175fa:	1a5a      	subs	r2, r3, r1
   175fc:	f108 0301 	add.w	r3, r8, #1
   17600:	429a      	cmp	r2, r3
   17602:	d051      	beq.n	176a8 <dtostrf+0x1f8>
	if (decpt < 0 && precision > 0) {
   17604:	46ce      	mov	lr, r9
   17606:	e016      	b.n	17636 <dtostrf+0x186>
	if (-decpt  > (int)precision) {
   17608:	425b      	negs	r3, r3
   1760a:	4598      	cmp	r8, r3
   1760c:	da03      	bge.n	17616 <dtostrf+0x166>
		decpt = -precision;
   1760e:	f1c8 0300 	rsb	r3, r8, #0
   17612:	9303      	str	r3, [sp, #12]
		s = "0";
   17614:	4f62      	ldr	r7, [pc, #392]	; (177a0 <dtostrf+0x2f0>)
	reqd = strlen(s);
   17616:	4638      	mov	r0, r7
   17618:	f00c f8b2 	bl	23780 <strlen>
   1761c:	4606      	mov	r6, r0
	if (reqd > decpt) reqd++;
   1761e:	9b03      	ldr	r3, [sp, #12]
   17620:	4283      	cmp	r3, r0
   17622:	bfb8      	it	lt
   17624:	1c46      	addlt	r6, r0, #1
	if (decpt == 0) reqd++;
   17626:	2b00      	cmp	r3, #0
   17628:	d1c6      	bne.n	175b8 <dtostrf+0x108>
   1762a:	3601      	adds	r6, #1
	if (decpt < 0 && precision > 0) {
   1762c:	f1b8 0e00 	subs.w	lr, r8, #0
   17630:	bf18      	it	ne
   17632:	f04f 0e01 	movne.w	lr, #1
		}
	}

	// add 1 for sign if negative
	if (sign) reqd++;
   17636:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1763a:	f1b8 0f00 	cmp.w	r8, #0
   1763e:	f000 80a3 	beq.w	17788 <dtostrf+0x2d8>
   17642:	3601      	adds	r6, #1

	p = buf;
	e = p + reqd;
   17644:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
   17646:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
   1764a:	f1b9 0f00 	cmp.w	r9, #0
   1764e:	dd30      	ble.n	176b2 <dtostrf+0x202>
		e += pad;
   17650:	464b      	mov	r3, r9
   17652:	444a      	add	r2, r9
	p = buf;
   17654:	4620      	mov	r0, r4
		while (pad-- > 0) *p++ = ' ';
   17656:	f04f 0c20 	mov.w	ip, #32
   1765a:	f800 cb01 	strb.w	ip, [r0], #1
   1765e:	1a21      	subs	r1, r4, r0
   17660:	4419      	add	r1, r3
   17662:	2900      	cmp	r1, #0
   17664:	dcf9      	bgt.n	1765a <dtostrf+0x1aa>
   17666:	f1b9 0f00 	cmp.w	r9, #0
   1766a:	bfd8      	it	le
   1766c:	2301      	movle	r3, #1
   1766e:	4423      	add	r3, r4
	}
	if (sign) *p++ = '-';
   17670:	f1b8 0f00 	cmp.w	r8, #0
   17674:	d002      	beq.n	1767c <dtostrf+0x1cc>
   17676:	212d      	movs	r1, #45	; 0x2d
   17678:	f803 1b01 	strb.w	r1, [r3], #1
	if (decpt == 0 && precision > 0) {
   1767c:	9803      	ldr	r0, [sp, #12]
   1767e:	b910      	cbnz	r0, 17686 <dtostrf+0x1d6>
   17680:	f1be 0f00 	cmp.w	lr, #0
   17684:	d117      	bne.n	176b6 <dtostrf+0x206>
		*p++ = '0';
		*p++ = '.';
	}
	else if (decpt < 0 && precision > 0) {
   17686:	2800      	cmp	r0, #0
   17688:	da02      	bge.n	17690 <dtostrf+0x1e0>
   1768a:	f1be 0f00 	cmp.w	lr, #0
   1768e:	d11a      	bne.n	176c6 <dtostrf+0x216>
			decpt++;
			*p++ = '0';
		}
	}
	// print digits
	while (p < e) {
   17690:	4293      	cmp	r3, r2
   17692:	d24d      	bcs.n	17730 <dtostrf+0x280>
		*p++ = *s++;
   17694:	4638      	mov	r0, r7
   17696:	469c      	mov	ip, r3
   17698:	f810 1b01 	ldrb.w	r1, [r0], #1
   1769c:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
   176a0:	4594      	cmp	ip, r2
   176a2:	d03f      	beq.n	17724 <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
   176a4:	272e      	movs	r7, #46	; 0x2e
   176a6:	e034      	b.n	17712 <dtostrf+0x262>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   176a8:	3101      	adds	r1, #1
   176aa:	9103      	str	r1, [sp, #12]
   176ac:	e7aa      	b.n	17604 <dtostrf+0x154>
	if (decpt < 0 && precision > 0) {
   176ae:	46ce      	mov	lr, r9
   176b0:	e7c1      	b.n	17636 <dtostrf+0x186>
	p = buf;
   176b2:	4623      	mov	r3, r4
   176b4:	e7df      	b.n	17676 <dtostrf+0x1c6>
		*p++ = '0';
   176b6:	4619      	mov	r1, r3
   176b8:	2030      	movs	r0, #48	; 0x30
   176ba:	f801 0b02 	strb.w	r0, [r1], #2
		*p++ = '.';
   176be:	202e      	movs	r0, #46	; 0x2e
   176c0:	7058      	strb	r0, [r3, #1]
   176c2:	460b      	mov	r3, r1
   176c4:	e7e4      	b.n	17690 <dtostrf+0x1e0>
		*p++ = '0';
   176c6:	469e      	mov	lr, r3
   176c8:	2130      	movs	r1, #48	; 0x30
   176ca:	f80e 1b02 	strb.w	r1, [lr], #2
		*p++ = '.';
   176ce:	212e      	movs	r1, #46	; 0x2e
   176d0:	7059      	strb	r1, [r3, #1]
   176d2:	4673      	mov	r3, lr
		while ( decpt < 0 ) {
   176d4:	4601      	mov	r1, r0
			*p++ = '0';
   176d6:	f04f 0c30 	mov.w	ip, #48	; 0x30
   176da:	f803 cb01 	strb.w	ip, [r3], #1
		while ( decpt < 0 ) {
   176de:	3101      	adds	r1, #1
   176e0:	d4fb      	bmi.n	176da <dtostrf+0x22a>
			*p++ = '0';
   176e2:	4243      	negs	r3, r0
   176e4:	2800      	cmp	r0, #0
   176e6:	bfa8      	it	ge
   176e8:	2301      	movge	r3, #1
   176ea:	4473      	add	r3, lr
   176ec:	9103      	str	r1, [sp, #12]
   176ee:	ea6f 0000 	mvn.w	r0, r0
   176f2:	bfa8      	it	ge
   176f4:	2000      	movge	r0, #0
   176f6:	2130      	movs	r1, #48	; 0x30
   176f8:	f80e 1000 	strb.w	r1, [lr, r0]
   176fc:	e7c8      	b.n	17690 <dtostrf+0x1e0>
   176fe:	4663      	mov	r3, ip
	while (p < e) {
   17700:	4293      	cmp	r3, r2
   17702:	d20e      	bcs.n	17722 <dtostrf+0x272>
		*p++ = *s++;
   17704:	469c      	mov	ip, r3
   17706:	f810 1b01 	ldrb.w	r1, [r0], #1
   1770a:	f80c 1b01 	strb.w	r1, [ip], #1
		if (p == e) break;
   1770e:	4594      	cmp	ip, r2
   17710:	d008      	beq.n	17724 <dtostrf+0x274>
		if (--decpt == 0) *p++ = '.';
   17712:	9903      	ldr	r1, [sp, #12]
   17714:	3901      	subs	r1, #1
   17716:	9103      	str	r1, [sp, #12]
   17718:	2900      	cmp	r1, #0
   1771a:	d1f0      	bne.n	176fe <dtostrf+0x24e>
   1771c:	705f      	strb	r7, [r3, #1]
   1771e:	3302      	adds	r3, #2
   17720:	e7ee      	b.n	17700 <dtostrf+0x250>
   17722:	461a      	mov	r2, r3
	}
	if (width < 0) {
   17724:	2d00      	cmp	r5, #0
   17726:	db05      	blt.n	17734 <dtostrf+0x284>
		pad = (reqd + width) * -1;
		while (pad-- > 0) *p++ = ' ';
	}
	*p = 0;
   17728:	2300      	movs	r3, #0
   1772a:	7013      	strb	r3, [r2, #0]

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
   1772c:	4620      	mov	r0, r4
   1772e:	e07e      	b.n	1782e <dtostrf+0x37e>
	while (p < e) {
   17730:	461a      	mov	r2, r3
   17732:	e7f7      	b.n	17724 <dtostrf+0x274>
		pad = (reqd + width) * -1;
   17734:	442e      	add	r6, r5
		while (pad-- > 0) *p++ = ' ';
   17736:	43f0      	mvns	r0, r6
   17738:	2e00      	cmp	r6, #0
   1773a:	daf5      	bge.n	17728 <dtostrf+0x278>
   1773c:	4611      	mov	r1, r2
   1773e:	2520      	movs	r5, #32
   17740:	f801 5b01 	strb.w	r5, [r1], #1
   17744:	f1c1 0301 	rsb	r3, r1, #1
   17748:	4403      	add	r3, r0
   1774a:	4413      	add	r3, r2
   1774c:	2b00      	cmp	r3, #0
   1774e:	dcf7      	bgt.n	17740 <dtostrf+0x290>
   17750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   17754:	3001      	adds	r0, #1
   17756:	4402      	add	r2, r0
   17758:	e7e6      	b.n	17728 <dtostrf+0x278>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   1775a:	224e      	movs	r2, #78	; 0x4e
   1775c:	701a      	strb	r2, [r3, #0]
   1775e:	2141      	movs	r1, #65	; 0x41
   17760:	7059      	strb	r1, [r3, #1]
   17762:	1cd8      	adds	r0, r3, #3
   17764:	709a      	strb	r2, [r3, #2]
		while (awidth) {
   17766:	e042      	b.n	177ee <dtostrf+0x33e>
			while (awidth) {
   17768:	4623      	mov	r3, r4
   1776a:	e6f7      	b.n	1755c <dtostrf+0xac>
		if (width<0) {
   1776c:	4623      	mov	r3, r4
   1776e:	e6f5      	b.n	1755c <dtostrf+0xac>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   17770:	2249      	movs	r2, #73	; 0x49
   17772:	701a      	strb	r2, [r3, #0]
   17774:	224e      	movs	r2, #78	; 0x4e
   17776:	705a      	strb	r2, [r3, #1]
   17778:	1cd8      	adds	r0, r3, #3
   1777a:	2246      	movs	r2, #70	; 0x46
   1777c:	709a      	strb	r2, [r3, #2]
		while (awidth) {
   1777e:	e054      	b.n	1782a <dtostrf+0x37a>
			while (awidth) {
   17780:	4623      	mov	r3, r4
   17782:	e6c8      	b.n	17516 <dtostrf+0x66>
		if (width<0) {
   17784:	4623      	mov	r3, r4
   17786:	e6c6      	b.n	17516 <dtostrf+0x66>
	e = p + reqd;
   17788:	19a2      	adds	r2, r4, r6
	pad = width - reqd;
   1778a:	eba5 0906 	sub.w	r9, r5, r6
	if (pad > 0) {
   1778e:	f1b9 0f00 	cmp.w	r9, #0
   17792:	f73f af5d 	bgt.w	17650 <dtostrf+0x1a0>
	p = buf;
   17796:	4623      	mov	r3, r4
   17798:	e770      	b.n	1767c <dtostrf+0x1cc>
   1779a:	bf00      	nop
   1779c:	7f7fffff 	.word	0x7f7fffff
   177a0:	20003aac 	.word	0x20003aac
   177a4:	20003b6c 	.word	0x20003b6c
		if (width<0) {
   177a8:	2800      	cmp	r0, #0
   177aa:	dbdf      	blt.n	1776c <dtostrf+0x2bc>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   177ac:	2200      	movs	r2, #0
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   177ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   177b2:	ee18 3a10 	vmov	r3, s16
   177b6:	2b00      	cmp	r3, #0
   177b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
   177bc:	fe67 7a87 	vselge.f32	s15, s15, s14
   177c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   177c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   177c8:	f53f aedd 	bmi.w	17586 <dtostrf+0xd6>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   177cc:	234e      	movs	r3, #78	; 0x4e
   177ce:	7023      	strb	r3, [r4, #0]
   177d0:	2141      	movs	r1, #65	; 0x41
   177d2:	7061      	strb	r1, [r4, #1]
   177d4:	1ce0      	adds	r0, r4, #3
   177d6:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
   177d8:	b14a      	cbz	r2, 177ee <dtostrf+0x33e>
   177da:	4615      	mov	r5, r2
   177dc:	3203      	adds	r2, #3
   177de:	18a3      	adds	r3, r4, r2
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   177e0:	4602      	mov	r2, r0
			*buf++ = ' ';
   177e2:	2120      	movs	r1, #32
   177e4:	f802 1b01 	strb.w	r1, [r2], #1
		while (awidth) {
   177e8:	4293      	cmp	r3, r2
   177ea:	d1fb      	bne.n	177e4 <dtostrf+0x334>
			*buf++ = ' ';
   177ec:	4428      	add	r0, r5
		*buf = 0;
   177ee:	2300      	movs	r3, #0
   177f0:	7003      	strb	r3, [r0, #0]
		return buf;
   177f2:	e01c      	b.n	1782e <dtostrf+0x37e>
		if (width<0) {
   177f4:	2800      	cmp	r0, #0
   177f6:	dbc5      	blt.n	17784 <dtostrf+0x2d4>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   177f8:	2200      	movs	r2, #0
		if (val<0) *buf++ = '-';
   177fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   177fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   17802:	f53f aec2 	bmi.w	1758a <dtostrf+0xda>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   17806:	2349      	movs	r3, #73	; 0x49
   17808:	7023      	strb	r3, [r4, #0]
   1780a:	234e      	movs	r3, #78	; 0x4e
   1780c:	7063      	strb	r3, [r4, #1]
   1780e:	1ce0      	adds	r0, r4, #3
   17810:	2346      	movs	r3, #70	; 0x46
   17812:	70a3      	strb	r3, [r4, #2]
		while (awidth) {
   17814:	b14a      	cbz	r2, 1782a <dtostrf+0x37a>
   17816:	4615      	mov	r5, r2
   17818:	3203      	adds	r2, #3
   1781a:	4422      	add	r2, r4
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   1781c:	4603      	mov	r3, r0
			*buf++ = ' ';
   1781e:	2120      	movs	r1, #32
   17820:	f803 1b01 	strb.w	r1, [r3], #1
		while (awidth) {
   17824:	429a      	cmp	r2, r3
   17826:	d1fb      	bne.n	17820 <dtostrf+0x370>
			*buf++ = ' ';
   17828:	4428      	add	r0, r5
		*buf = 0;
   1782a:	2300      	movs	r3, #0
   1782c:	7003      	strb	r3, [r0, #0]
}
   1782e:	b004      	add	sp, #16
   17830:	ecbd 8b02 	vpop	{d8}
   17834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00017838 <flexpwm_init>:
		quadtimerFrequency(qtimer, info->module & 0x03, frequency);
	}
}

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
   17838:	b510      	push	{r4, lr}
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   1783a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
   1783e:	f8a0 318c 	strh.w	r3, [r0, #396]	; 0x18c
	p->FSTS0 = 0x000F; // clear fault status
   17842:	230f      	movs	r3, #15
   17844:	f8a0 318e 	strh.w	r3, [r0, #398]	; 0x18e
	p->FFILT0 = 0;
   17848:	2100      	movs	r1, #0
   1784a:	f8a0 1190 	strh.w	r1, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   1784e:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   17852:	b29b      	uxth	r3, r3
   17854:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   17858:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1785c:	f44f 4460 	mov.w	r4, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   17860:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].OCTRL = 0;
   17864:	460a      	mov	r2, r1
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   17866:	f248 2cb8 	movw	ip, #33464	; 0x82b8
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   1786a:	eb01 0341 	add.w	r3, r1, r1, lsl #1
   1786e:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   17872:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   17874:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   17878:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   1787a:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   1787c:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   1787e:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   17880:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   17884:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   17886:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   17888:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   1788a:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   1788c:	3101      	adds	r1, #1
   1788e:	2904      	cmp	r1, #4
   17890:	d1eb      	bne.n	1786a <flexpwm_init+0x32>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   17892:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   17896:	b29b      	uxth	r3, r3
   17898:	f043 030f 	orr.w	r3, r3, #15
   1789c:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   178a0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   178a4:	b29b      	uxth	r3, r3
   178a6:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   178aa:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   178ae:	bd10      	pop	{r4, pc}

000178b0 <quadtimer_init>:

void quadtimer_init(IMXRT_TMR_t *p)
{
   178b0:	b570      	push	{r4, r5, r6, lr}
	int i;

	for (i=0; i < 4; i++) {
   178b2:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   178b4:	4611      	mov	r1, r2
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   178b6:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   178b8:	f241 0501 	movw	r5, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   178bc:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   178c0:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   178c4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
   178c8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   178cc:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
   178ce:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   178d0:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   178d2:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   178d4:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   178d6:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   178da:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   178dc:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   178e0:	3201      	adds	r2, #1
   178e2:	2a04      	cmp	r2, #4
   178e4:	d1ee      	bne.n	178c4 <quadtimer_init+0x14>
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}
   178e6:	bd70      	pop	{r4, r5, r6, pc}

000178e8 <pwm_init>:

void pwm_init(void)
{
   178e8:	b508      	push	{r3, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   178ea:	4b10      	ldr	r3, [pc, #64]	; (1792c <pwm_init+0x44>)
   178ec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
   178ee:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
   178f2:	679a      	str	r2, [r3, #120]	; 0x78
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   178f4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
   178f8:	4a0d      	ldr	r2, [pc, #52]	; (17930 <pwm_init+0x48>)
   178fa:	430a      	orrs	r2, r1
   178fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   17900:	480c      	ldr	r0, [pc, #48]	; (17934 <pwm_init+0x4c>)
   17902:	f7ff ff99 	bl	17838 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   17906:	480c      	ldr	r0, [pc, #48]	; (17938 <pwm_init+0x50>)
   17908:	f7ff ff96 	bl	17838 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   1790c:	480b      	ldr	r0, [pc, #44]	; (1793c <pwm_init+0x54>)
   1790e:	f7ff ff93 	bl	17838 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   17912:	480b      	ldr	r0, [pc, #44]	; (17940 <pwm_init+0x58>)
   17914:	f7ff ff90 	bl	17838 <flexpwm_init>
	quadtimer_init(&IMXRT_TMR1);
   17918:	480a      	ldr	r0, [pc, #40]	; (17944 <pwm_init+0x5c>)
   1791a:	f7ff ffc9 	bl	178b0 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR2);
   1791e:	480a      	ldr	r0, [pc, #40]	; (17948 <pwm_init+0x60>)
   17920:	f7ff ffc6 	bl	178b0 <quadtimer_init>
	quadtimer_init(&IMXRT_TMR3);
   17924:	4809      	ldr	r0, [pc, #36]	; (1794c <pwm_init+0x64>)
   17926:	f7ff ffc3 	bl	178b0 <quadtimer_init>
}
   1792a:	bd08      	pop	{r3, pc}
   1792c:	400fc000 	.word	0x400fc000
   17930:	fc030000 	.word	0xfc030000
   17934:	403dc000 	.word	0x403dc000
   17938:	403e0000 	.word	0x403e0000
   1793c:	403e4000 	.word	0x403e4000
   17940:	403e8000 	.word	0x403e8000
   17944:	401dc000 	.word	0x401dc000
   17948:	401e0000 	.word	0x401e0000
   1794c:	401e4000 	.word	0x401e4000

00017950 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
   17950:	4b07      	ldr	r3, [pc, #28]	; (17970 <rtc_get+0x20>)
   17952:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   17954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
   17956:	4a06      	ldr	r2, [pc, #24]	; (17970 <rtc_get+0x20>)
   17958:	4684      	mov	ip, r0
   1795a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   1795c:	4619      	mov	r1, r3
   1795e:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   17960:	4299      	cmp	r1, r3
   17962:	d1f9      	bne.n	17958 <rtc_get+0x8>
   17964:	4584      	cmp	ip, r0
   17966:	d1f7      	bne.n	17958 <rtc_get+0x8>
			return (hi2 << 17) | (lo2 >> 15);
   17968:	0bdb      	lsrs	r3, r3, #15
}
   1796a:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   1796e:	4770      	bx	lr
   17970:	400d4000 	.word	0x400d4000

00017974 <unused_interrupt_vector>:
	__disable_irq();
   17974:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   17976:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   1797a:	4c55      	ldr	r4, [pc, #340]	; (17ad0 <unused_interrupt_vector+0x15c>)
   1797c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
   17980:	f01e 0f04 	tst.w	lr, #4
   17984:	bf0c      	ite	eq
   17986:	f3ef 8208 	mrseq	r2, MSP
   1798a:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
   1798e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17992:	f8d3 1d28 	ldr.w	r1, [r3, #3368]	; 0xd28
   17996:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
	info->hfsr = SCB_HFSR;
   1799a:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   1799e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
	info->mmfar = SCB_MMFAR;
   179a2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
   179a6:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
	info->bfar = SCB_BFAR;
   179aa:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   179ae:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	info->ret = stack[6];
   179b2:	6993      	ldr	r3, [r2, #24]
   179b4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   179b8:	69d3      	ldr	r3, [r2, #28]
   179ba:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   179be:	f000 f8d3 	bl	17b68 <tempmonGetTemp>
   179c2:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   179c6:	f7ff ffc3 	bl	17950 <rtc_get>
   179ca:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   179ce:	230b      	movs	r3, #11
   179d0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
	p = (uint32_t *)info;
   179d4:	483f      	ldr	r0, [pc, #252]	; (17ad4 <unused_interrupt_vector+0x160>)
	crc = 0xFFFFFFFF;
   179d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   179da:	493f      	ldr	r1, [pc, #252]	; (17ad8 <unused_interrupt_vector+0x164>)
	while (p < end) {
   179dc:	4d3f      	ldr	r5, [pc, #252]	; (17adc <unused_interrupt_vector+0x168>)
		crc ^= *p++;
   179de:	6803      	ldr	r3, [r0, #0]
   179e0:	3004      	adds	r0, #4
   179e2:	405a      	eors	r2, r3
   179e4:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   179e6:	f002 0301 	and.w	r3, r2, #1
   179ea:	fb01 f303 	mul.w	r3, r1, r3
   179ee:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   179f2:	3c01      	subs	r4, #1
   179f4:	d1f7      	bne.n	179e6 <unused_interrupt_vector+0x72>
	while (p < end) {
   179f6:	42a8      	cmp	r0, r5
   179f8:	d1f1      	bne.n	179de <unused_interrupt_vector+0x6a>
	info->crc = crc;
   179fa:	4b35      	ldr	r3, [pc, #212]	; (17ad0 <unused_interrupt_vector+0x15c>)
   179fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
   17a00:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17a04:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17a08:	4a32      	ldr	r2, [pc, #200]	; (17ad4 <unused_interrupt_vector+0x160>)
   17a0a:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
   17a0e:	3220      	adds	r2, #32
   17a10:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
   17a14:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17a18:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   17a1c:	4a30      	ldr	r2, [pc, #192]	; (17ae0 <unused_interrupt_vector+0x16c>)
   17a1e:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   17a20:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   17a24:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   17a26:	4b2f      	ldr	r3, [pc, #188]	; (17ae4 <unused_interrupt_vector+0x170>)
   17a28:	2102      	movs	r1, #2
   17a2a:	6019      	str	r1, [r3, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   17a2c:	69d3      	ldr	r3, [r2, #28]
   17a2e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   17a32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   17a36:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   17a38:	4b2b      	ldr	r3, [pc, #172]	; (17ae8 <unused_interrupt_vector+0x174>)
   17a3a:	681a      	ldr	r2, [r3, #0]
   17a3c:	4b2b      	ldr	r3, [pc, #172]	; (17aec <unused_interrupt_vector+0x178>)
   17a3e:	429a      	cmp	r2, r3
   17a40:	d81b      	bhi.n	17a7a <unused_interrupt_vector+0x106>
	PIT_MCR = 0;
   17a42:	4b28      	ldr	r3, [pc, #160]	; (17ae4 <unused_interrupt_vector+0x170>)
   17a44:	2200      	movs	r2, #0
   17a46:	601a      	str	r2, [r3, #0]
	PIT_TCTRL0 = 0;
   17a48:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   17a4c:	4a28      	ldr	r2, [pc, #160]	; (17af0 <unused_interrupt_vector+0x17c>)
   17a4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   17a52:	2201      	movs	r2, #1
   17a54:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   17a58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17a5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17a60:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   17a64:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   17a68:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   17a6c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   17a70:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
		if (PIT_TFLG0) {
   17a74:	4d1b      	ldr	r5, [pc, #108]	; (17ae4 <unused_interrupt_vector+0x170>)
			PIT_TFLG0 = 1;
   17a76:	2601      	movs	r6, #1
   17a78:	e005      	b.n	17a86 <unused_interrupt_vector+0x112>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   17a7a:	4618      	mov	r0, r3
   17a7c:	f7fe ff82 	bl	16984 <set_arm_clock>
   17a80:	e7df      	b.n	17a42 <unused_interrupt_vector+0xce>
		usb_isr();
   17a82:	f000 f9e9 	bl	17e58 <usb_isr>
		if (PIT_TFLG0) {
   17a86:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   17a8a:	2b00      	cmp	r3, #0
   17a8c:	d0f9      	beq.n	17a82 <unused_interrupt_vector+0x10e>
			PIT_TFLG0 = 1;
   17a8e:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   17a92:	3401      	adds	r4, #1
   17a94:	2c4f      	cmp	r4, #79	; 0x4f
   17a96:	d9f4      	bls.n	17a82 <unused_interrupt_vector+0x10e>
	USB1_USBCMD = USB_USBCMD_RST;
   17a98:	4b16      	ldr	r3, [pc, #88]	; (17af4 <unused_interrupt_vector+0x180>)
   17a9a:	2202      	movs	r2, #2
   17a9c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   17aa0:	4b15      	ldr	r3, [pc, #84]	; (17af8 <unused_interrupt_vector+0x184>)
   17aa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17aa6:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   17aa8:	f5a3 23aa 	sub.w	r3, r3, #348160	; 0x55000
   17aac:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   17ab0:	b93b      	cbnz	r3, 17ac2 <unused_interrupt_vector+0x14e>
	SRC_GPR5 = 0x0BAD00F1;
   17ab2:	4812      	ldr	r0, [pc, #72]	; (17afc <unused_interrupt_vector+0x188>)
   17ab4:	4912      	ldr	r1, [pc, #72]	; (17b00 <unused_interrupt_vector+0x18c>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   17ab6:	4a0b      	ldr	r2, [pc, #44]	; (17ae4 <unused_interrupt_vector+0x170>)
	SRC_GPR5 = 0x0BAD00F1;
   17ab8:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   17aba:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   17abe:	2b00      	cmp	r3, #0
   17ac0:	d0fa      	beq.n	17ab8 <unused_interrupt_vector+0x144>
	SCB_AIRCR = 0x05FA0004;
   17ac2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17ac6:	4a0f      	ldr	r2, [pc, #60]	; (17b04 <unused_interrupt_vector+0x190>)
   17ac8:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   17acc:	e7fe      	b.n	17acc <unused_interrupt_vector+0x158>
   17ace:	bf00      	nop
   17ad0:	2027ff00 	.word	0x2027ff00
   17ad4:	2027ff80 	.word	0x2027ff80
   17ad8:	edb88320 	.word	0xedb88320
   17adc:	2027ffa8 	.word	0x2027ffa8
   17ae0:	400fc000 	.word	0x400fc000
   17ae4:	40084000 	.word	0x40084000
   17ae8:	20004e18 	.word	0x20004e18
   17aec:	0bcd3d80 	.word	0x0bcd3d80
   17af0:	00249f00 	.word	0x00249f00
   17af4:	402e0000 	.word	0x402e0000
   17af8:	400d9000 	.word	0x400d9000
   17afc:	400f8000 	.word	0x400f8000
   17b00:	0bad00f1 	.word	0x0bad00f1
   17b04:	05fa0004 	.word	0x05fa0004

00017b08 <_sbrk>:

char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
   17b08:	b508      	push	{r3, lr}
   17b0a:	4603      	mov	r3, r0
        char *prev = __brkval;
   17b0c:	4a08      	ldr	r2, [pc, #32]	; (17b30 <_sbrk+0x28>)
   17b0e:	6810      	ldr	r0, [r2, #0]
        if (incr != 0) {
   17b10:	b133      	cbz	r3, 17b20 <_sbrk+0x18>
   17b12:	461a      	mov	r2, r3
                if (prev + incr > (char *)&_heap_end) {
   17b14:	4402      	add	r2, r0
   17b16:	4b07      	ldr	r3, [pc, #28]	; (17b34 <_sbrk+0x2c>)
   17b18:	429a      	cmp	r2, r3
   17b1a:	d802      	bhi.n	17b22 <_sbrk+0x1a>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
   17b1c:	4b04      	ldr	r3, [pc, #16]	; (17b30 <_sbrk+0x28>)
   17b1e:	601a      	str	r2, [r3, #0]
        }
        return prev;
}
   17b20:	bd08      	pop	{r3, pc}
                        errno = ENOMEM;
   17b22:	f00b fbcf 	bl	232c4 <__errno>
   17b26:	230c      	movs	r3, #12
   17b28:	6003      	str	r3, [r0, #0]
                        return (void *)-1;
   17b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b2e:	e7f7      	b.n	17b20 <_sbrk+0x18>
   17b30:	20005254 	.word	0x20005254
   17b34:	20280000 	.word	0x20280000

00017b38 <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   17b38:	2000      	movs	r0, #0
   17b3a:	4770      	bx	lr

00017b3c <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   17b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b40:	4770      	bx	lr

00017b42 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   17b42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17b46:	604b      	str	r3, [r1, #4]
	return 0;
}
   17b48:	2000      	movs	r0, #0
   17b4a:	4770      	bx	lr

00017b4c <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   17b4c:	2001      	movs	r0, #1
   17b4e:	4770      	bx	lr

00017b50 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   17b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17b54:	4770      	bx	lr

00017b56 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   17b56:	bf30      	wfi
   17b58:	e7fd      	b.n	17b56 <__cxa_pure_virtual>

00017b5a <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   17b5a:	bf30      	wfi
   17b5c:	e7fd      	b.n	17b5a <abort>

00017b5e <Panic_Temp_isr>:
void Panic_Temp_isr(void) {
   17b5e:	b508      	push	{r3, lr}
  unused_interrupt_vector();
   17b60:	f7ff ff08 	bl	17974 <unused_interrupt_vector>
}
   17b64:	bd08      	pop	{r3, pc}
	...

00017b68 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   17b68:	4a13      	ldr	r2, [pc, #76]	; (17bb8 <tempmonGetTemp+0x50>)
   17b6a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   17b6e:	f013 0f04 	tst.w	r3, #4
   17b72:	d0fa      	beq.n	17b6a <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   17b74:	4b10      	ldr	r3, [pc, #64]	; (17bb8 <tempmonGetTemp+0x50>)
   17b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   17b7a:	4a10      	ldr	r2, [pc, #64]	; (17bbc <tempmonGetTemp+0x54>)
   17b7c:	ed92 7a00 	vldr	s14, [r2]
   17b80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   17b84:	f3c3 230b 	ubfx	r3, r3, #8, #12
   17b88:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   17b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
   17b90:	4b0b      	ldr	r3, [pc, #44]	; (17bc0 <tempmonGetTemp+0x58>)
   17b92:	edd3 6a00 	vldr	s13, [r3]
   17b96:	eef8 6a66 	vcvt.f32.u32	s13, s13
   17b9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
   17b9e:	4b09      	ldr	r3, [pc, #36]	; (17bc4 <tempmonGetTemp+0x5c>)
   17ba0:	edd3 6a00 	vldr	s13, [r3]
   17ba4:	ee67 7aa6 	vmul.f32	s15, s15, s13
   17ba8:	4b07      	ldr	r3, [pc, #28]	; (17bc8 <tempmonGetTemp+0x60>)
   17baa:	edd3 6a00 	vldr	s13, [r3]
   17bae:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   17bb2:	ee37 0a40 	vsub.f32	s0, s14, s0
   17bb6:	4770      	bx	lr
   17bb8:	400d8100 	.word	0x400d8100
   17bbc:	20008538 	.word	0x20008538
   17bc0:	20008534 	.word	0x20008534
   17bc4:	2000853c 	.word	0x2000853c
   17bc8:	20008540 	.word	0x20008540

00017bcc <endpoint0_transmit>:
	if (len > 0) {
   17bcc:	468c      	mov	ip, r1
   17bce:	b319      	cbz	r1, 17c18 <endpoint0_transmit+0x4c>
		endpoint0_transfer_data.next = 1;
   17bd0:	4b23      	ldr	r3, [pc, #140]	; (17c60 <endpoint0_transmit+0x94>)
   17bd2:	2101      	movs	r1, #1
   17bd4:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   17bd6:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   17bda:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
   17bde:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   17be0:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   17be2:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   17be6:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   17be8:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
   17bec:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   17bee:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
   17bf2:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   17bf4:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   17bf8:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   17bfa:	491a      	ldr	r1, [pc, #104]	; (17c64 <endpoint0_transmit+0x98>)
   17bfc:	648b      	str	r3, [r1, #72]	; 0x48
		endpoint_queue_head[1].status = 0;
   17bfe:	2300      	movs	r3, #0
   17c00:	64cb      	str	r3, [r1, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   17c02:	4919      	ldr	r1, [pc, #100]	; (17c68 <endpoint0_transmit+0x9c>)
   17c04:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
   17c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17c0c:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   17c10:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
   17c14:	2b00      	cmp	r3, #0
   17c16:	d1fb      	bne.n	17c10 <endpoint0_transmit+0x44>
	endpoint0_transfer_ack.next = 1;
   17c18:	4b14      	ldr	r3, [pc, #80]	; (17c6c <endpoint0_transmit+0xa0>)
   17c1a:	2101      	movs	r1, #1
   17c1c:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17c1e:	2a00      	cmp	r2, #0
   17c20:	f248 0180 	movw	r1, #32896	; 0x8080
   17c24:	bf08      	it	eq
   17c26:	2180      	moveq	r1, #128	; 0x80
   17c28:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
   17c2a:	2000      	movs	r0, #0
   17c2c:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
   17c2e:	490d      	ldr	r1, [pc, #52]	; (17c64 <endpoint0_transmit+0x98>)
   17c30:	608b      	str	r3, [r1, #8]
	endpoint_queue_head[0].status = 0;
   17c32:	60c8      	str	r0, [r1, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17c34:	4b0c      	ldr	r3, [pc, #48]	; (17c68 <endpoint0_transmit+0x9c>)
   17c36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   17c3a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   17c3e:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
   17c42:	f041 0101 	orr.w	r1, r1, #1
   17c46:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   17c4a:	1a12      	subs	r2, r2, r0
   17c4c:	bf18      	it	ne
   17c4e:	2201      	movne	r2, #1
   17c50:	4b07      	ldr	r3, [pc, #28]	; (17c70 <endpoint0_transmit+0xa4>)
   17c52:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
   17c54:	4a04      	ldr	r2, [pc, #16]	; (17c68 <endpoint0_transmit+0x9c>)
   17c56:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   17c5a:	2b00      	cmp	r3, #0
   17c5c:	d1fb      	bne.n	17c56 <endpoint0_transmit+0x8a>
}
   17c5e:	4770      	bx	lr
   17c60:	20006380 	.word	0x20006380
   17c64:	20000000 	.word	0x20000000
   17c68:	402e0000 	.word	0x402e0000
   17c6c:	20006360 	.word	0x20006360
   17c70:	200073ec 	.word	0x200073ec

00017c74 <endpoint0_receive>:
	if (len > 0) {
   17c74:	468c      	mov	ip, r1
   17c76:	b319      	cbz	r1, 17cc0 <endpoint0_receive+0x4c>
		endpoint0_transfer_data.next = 1;
   17c78:	4b24      	ldr	r3, [pc, #144]	; (17d0c <endpoint0_receive+0x98>)
   17c7a:	2101      	movs	r1, #1
   17c7c:	6019      	str	r1, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   17c7e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
   17c82:	f04c 0180 	orr.w	r1, ip, #128	; 0x80
   17c86:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   17c88:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   17c8a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
   17c8e:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   17c90:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
   17c94:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   17c96:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
   17c9a:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   17c9c:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   17ca0:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   17ca2:	491b      	ldr	r1, [pc, #108]	; (17d10 <endpoint0_receive+0x9c>)
   17ca4:	608b      	str	r3, [r1, #8]
		endpoint_queue_head[0].status = 0;
   17ca6:	2300      	movs	r3, #0
   17ca8:	60cb      	str	r3, [r1, #12]
		USB1_ENDPTPRIME |= (1<<0);
   17caa:	491a      	ldr	r1, [pc, #104]	; (17d14 <endpoint0_receive+0xa0>)
   17cac:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
   17cb0:	f043 0301 	orr.w	r3, r3, #1
   17cb4:	f8c1 31b0 	str.w	r3, [r1, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   17cb8:	f8d1 31b0 	ldr.w	r3, [r1, #432]	; 0x1b0
   17cbc:	2b00      	cmp	r3, #0
   17cbe:	d1fb      	bne.n	17cb8 <endpoint0_receive+0x44>
	endpoint0_transfer_ack.next = 1;
   17cc0:	4b15      	ldr	r3, [pc, #84]	; (17d18 <endpoint0_receive+0xa4>)
   17cc2:	2101      	movs	r1, #1
   17cc4:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17cc6:	2a00      	cmp	r2, #0
   17cc8:	f248 0180 	movw	r1, #32896	; 0x8080
   17ccc:	bf08      	it	eq
   17cce:	2180      	moveq	r1, #128	; 0x80
   17cd0:	6059      	str	r1, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
   17cd2:	2000      	movs	r0, #0
   17cd4:	6098      	str	r0, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   17cd6:	490e      	ldr	r1, [pc, #56]	; (17d10 <endpoint0_receive+0x9c>)
   17cd8:	648b      	str	r3, [r1, #72]	; 0x48
	endpoint_queue_head[1].status = 0;
   17cda:	64c8      	str	r0, [r1, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17cdc:	4b0d      	ldr	r3, [pc, #52]	; (17d14 <endpoint0_receive+0xa0>)
   17cde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
   17ce2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   17ce6:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
   17cea:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
   17cee:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   17cf2:	1a12      	subs	r2, r2, r0
   17cf4:	bf18      	it	ne
   17cf6:	2201      	movne	r2, #1
   17cf8:	0412      	lsls	r2, r2, #16
   17cfa:	4b08      	ldr	r3, [pc, #32]	; (17d1c <endpoint0_receive+0xa8>)
   17cfc:	601a      	str	r2, [r3, #0]
	while (USB1_ENDPTPRIME) ;
   17cfe:	4a05      	ldr	r2, [pc, #20]	; (17d14 <endpoint0_receive+0xa0>)
   17d00:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   17d04:	2b00      	cmp	r3, #0
   17d06:	d1fb      	bne.n	17d00 <endpoint0_receive+0x8c>
}
   17d08:	4770      	bx	lr
   17d0a:	bf00      	nop
   17d0c:	20006380 	.word	0x20006380
   17d10:	20000000 	.word	0x20000000
   17d14:	402e0000 	.word	0x402e0000
   17d18:	20006360 	.word	0x20006360
   17d1c:	200073ec 	.word	0x200073ec

00017d20 <schedule_transfer>:
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
   17d20:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   17d22:	6b83      	ldr	r3, [r0, #56]	; 0x38
   17d24:	b11b      	cbz	r3, 17d2e <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   17d26:	6853      	ldr	r3, [r2, #4]
   17d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   17d2c:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   17d2e:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   17d30:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (last) {
   17d32:	b33b      	cbz	r3, 17d84 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
   17d34:	601a      	str	r2, [r3, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   17d36:	4b1a      	ldr	r3, [pc, #104]	; (17da0 <schedule_transfer+0x80>)
   17d38:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
   17d3c:	420b      	tst	r3, r1
   17d3e:	d12b      	bne.n	17d98 <schedule_transfer+0x78>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   17d40:	4b18      	ldr	r3, [pc, #96]	; (17da4 <schedule_transfer+0x84>)
   17d42:	685f      	ldr	r7, [r3, #4]
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   17d44:	4b16      	ldr	r3, [pc, #88]	; (17da0 <schedule_transfer+0x80>)
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   17d46:	4e17      	ldr	r6, [pc, #92]	; (17da4 <schedule_transfer+0x84>)
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   17d48:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   17d4c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   17d50:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   17d54:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   17d58:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   17d5c:	f414 4f80 	tst.w	r4, #16384	; 0x4000
   17d60:	d104      	bne.n	17d6c <schedule_transfer+0x4c>
   17d62:	6874      	ldr	r4, [r6, #4]
   17d64:	1be4      	subs	r4, r4, r7
   17d66:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   17d6a:	d3ed      	bcc.n	17d48 <schedule_transfer+0x28>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   17d6c:	4229      	tst	r1, r5
   17d6e:	d113      	bne.n	17d98 <schedule_transfer+0x78>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
   17d70:	6082      	str	r2, [r0, #8]
		endpoint->status = 0;
   17d72:	2300      	movs	r3, #0
   17d74:	60c3      	str	r3, [r0, #12]
		USB1_ENDPTPRIME |= epmask;
   17d76:	4c0a      	ldr	r4, [pc, #40]	; (17da0 <schedule_transfer+0x80>)
   17d78:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17d7c:	430b      	orrs	r3, r1
   17d7e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
		goto end;
   17d82:	e009      	b.n	17d98 <schedule_transfer+0x78>
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
   17d84:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
   17d86:	2300      	movs	r3, #0
   17d88:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
   17d8a:	4c05      	ldr	r4, [pc, #20]	; (17da0 <schedule_transfer+0x80>)
   17d8c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17d90:	430b      	orrs	r3, r1
   17d92:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   17d96:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
   17d98:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   17d9a:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   17d9c:	bcf0      	pop	{r4, r5, r6, r7}
   17d9e:	4770      	bx	lr
   17da0:	402e0000 	.word	0x402e0000
   17da4:	e0001000 	.word	0xe0001000

00017da8 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   17da8:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   17daa:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   17dac:	b1b5      	cbz	r5, 17ddc <run_callbacks+0x34>
   17dae:	4606      	mov	r6, r0

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
   17db0:	462b      	mov	r3, r5
	uint32_t count = 0;
   17db2:	2400      	movs	r4, #0
	while (1) {
		if (t->status & (1<<7)) {
   17db4:	685a      	ldr	r2, [r3, #4]
   17db6:	f012 0f80 	tst.w	r2, #128	; 0x80
   17dba:	d107      	bne.n	17dcc <run_callbacks+0x24>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
   17dbc:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
   17dbe:	681b      	ldr	r3, [r3, #0]
		if ((uint32_t)t == 1) {
   17dc0:	2b01      	cmp	r3, #1
   17dc2:	d1f7      	bne.n	17db4 <run_callbacks+0xc>
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
   17dc4:	2300      	movs	r3, #0
   17dc6:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
   17dc8:	6373      	str	r3, [r6, #52]	; 0x34
			break;
   17dca:	e000      	b.n	17dce <run_callbacks+0x26>
			ep->first_transfer = t;
   17dcc:	6333      	str	r3, [r6, #48]	; 0x30
		}
	}
	// do all the callbacks
	while (count) {
   17dce:	b12c      	cbz	r4, 17ddc <run_callbacks+0x34>
		transfer_t *next = (transfer_t *)first->next;
   17dd0:	4628      	mov	r0, r5
   17dd2:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   17dd4:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   17dd6:	4798      	blx	r3
	while (count) {
   17dd8:	3c01      	subs	r4, #1
   17dda:	d1f9      	bne.n	17dd0 <run_callbacks+0x28>
		first = next;
		count--;
	}
}
   17ddc:	bd70      	pop	{r4, r5, r6, pc}

00017dde <usb_endpoint_config>:
{
   17dde:	b570      	push	{r4, r5, r6, lr}
   17de0:	4604      	mov	r4, r0
   17de2:	460e      	mov	r6, r1
   17de4:	4615      	mov	r5, r2
	memset(qh, 0, sizeof(endpoint_t));
   17de6:	223c      	movs	r2, #60	; 0x3c
   17de8:	2100      	movs	r1, #0
   17dea:	3004      	adds	r0, #4
   17dec:	f00b f934 	bl	23058 <memset>
	qh->config = config;
   17df0:	6026      	str	r6, [r4, #0]
	qh->next = 1; // Terminate bit = 1
   17df2:	2301      	movs	r3, #1
   17df4:	60a3      	str	r3, [r4, #8]
	qh->callback_function = callback;
   17df6:	63a5      	str	r5, [r4, #56]	; 0x38
}
   17df8:	bd70      	pop	{r4, r5, r6, pc}
	...

00017dfc <usb_start_sof_interrupts>:
	__disable_irq();
   17dfc:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   17dfe:	4a0a      	ldr	r2, [pc, #40]	; (17e28 <usb_start_sof_interrupts+0x2c>)
   17e00:	2301      	movs	r3, #1
   17e02:	4083      	lsls	r3, r0
   17e04:	7810      	ldrb	r0, [r2, #0]
   17e06:	4318      	orrs	r0, r3
   17e08:	7010      	strb	r0, [r2, #0]
	uint32_t intr = USB1_USBINTR;
   17e0a:	4b08      	ldr	r3, [pc, #32]	; (17e2c <usb_start_sof_interrupts+0x30>)
   17e0c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   17e10:	f013 0f80 	tst.w	r3, #128	; 0x80
   17e14:	d106      	bne.n	17e24 <usb_start_sof_interrupts+0x28>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   17e16:	4a05      	ldr	r2, [pc, #20]	; (17e2c <usb_start_sof_interrupts+0x30>)
   17e18:	2180      	movs	r1, #128	; 0x80
   17e1a:	f8c2 1144 	str.w	r1, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   17e1e:	430b      	orrs	r3, r1
   17e20:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
	__enable_irq();
   17e24:	b662      	cpsie	i
}
   17e26:	4770      	bx	lr
   17e28:	20008c36 	.word	0x20008c36
   17e2c:	402e0000 	.word	0x402e0000

00017e30 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   17e30:	2301      	movs	r3, #1
   17e32:	4083      	lsls	r3, r0
   17e34:	4a06      	ldr	r2, [pc, #24]	; (17e50 <usb_stop_sof_interrupts+0x20>)
   17e36:	7810      	ldrb	r0, [r2, #0]
   17e38:	ea20 0003 	bic.w	r0, r0, r3
   17e3c:	7010      	strb	r0, [r2, #0]
	if (sof_usage == 0) {
   17e3e:	b930      	cbnz	r0, 17e4e <usb_stop_sof_interrupts+0x1e>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   17e40:	4a04      	ldr	r2, [pc, #16]	; (17e54 <usb_stop_sof_interrupts+0x24>)
   17e42:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   17e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   17e4a:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   17e4e:	4770      	bx	lr
   17e50:	20008c36 	.word	0x20008c36
   17e54:	402e0000 	.word	0x402e0000

00017e58 <usb_isr>:
{
   17e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t status = USB1_USBSTS;
   17e5c:	4bb6      	ldr	r3, [pc, #728]	; (18138 <usb_isr+0x2e0>)
   17e5e:	f8d3 7144 	ldr.w	r7, [r3, #324]	; 0x144
	USB1_USBSTS = status;
   17e62:	f8c3 7144 	str.w	r7, [r3, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   17e66:	f017 0f01 	tst.w	r7, #1
   17e6a:	f000 81b9 	beq.w	181e0 <usb_isr+0x388>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   17e6e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
		while (setupstatus) {
   17e72:	2b00      	cmp	r3, #0
   17e74:	f000 8182 	beq.w	1817c <usb_isr+0x324>
			USB1_ENDPTSETUPSTAT = setupstatus;
   17e78:	4caf      	ldr	r4, [pc, #700]	; (18138 <usb_isr+0x2e0>)
				s.word1 = endpoint_queue_head[0].setup0;
   17e7a:	4eb0      	ldr	r6, [pc, #704]	; (1813c <usb_isr+0x2e4>)
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   17e7c:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 18178 <usb_isr+0x320>
   17e80:	e10c      	b.n	1809c <usb_isr+0x244>
	switch (setup.wRequestAndType) {
   17e82:	2b80      	cmp	r3, #128	; 0x80
   17e84:	d065      	beq.n	17f52 <usb_isr+0xfa>
   17e86:	2b82      	cmp	r3, #130	; 0x82
   17e88:	f040 8100 	bne.w	1808c <usb_isr+0x234>
		endpoint = setup.wIndex & 0x7F;
   17e8c:	b293      	uxth	r3, r2
   17e8e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
   17e92:	2a07      	cmp	r2, #7
   17e94:	f200 80fa 	bhi.w	1808c <usb_isr+0x234>
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   17e98:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
   17e9c:	4aa8      	ldr	r2, [pc, #672]	; (18140 <usb_isr+0x2e8>)
   17e9e:	2100      	movs	r1, #0
   17ea0:	7011      	strb	r1, [r2, #0]
		reply_buffer[1] = 0;
   17ea2:	7051      	strb	r1, [r2, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   17ea4:	f013 0f80 	tst.w	r3, #128	; 0x80
   17ea8:	d05b      	beq.n	17f62 <usb_isr+0x10a>
   17eaa:	f410 3f80 	tst.w	r0, #65536	; 0x10000
   17eae:	d002      	beq.n	17eb6 <usb_isr+0x5e>
			reply_buffer[0] = 1;
   17eb0:	4ba3      	ldr	r3, [pc, #652]	; (18140 <usb_isr+0x2e8>)
   17eb2:	2201      	movs	r2, #1
   17eb4:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   17eb6:	2200      	movs	r2, #0
   17eb8:	2102      	movs	r1, #2
   17eba:	48a1      	ldr	r0, [pc, #644]	; (18140 <usb_isr+0x2e8>)
   17ebc:	f7ff fe86 	bl	17bcc <endpoint0_transmit>
		return;
   17ec0:	e0e8      	b.n	18094 <usb_isr+0x23c>
	switch (setup.wRequestAndType) {
   17ec2:	f242 0121 	movw	r1, #8225	; 0x2021
   17ec6:	428b      	cmp	r3, r1
   17ec8:	f000 80dd 	beq.w	18086 <usb_isr+0x22e>
   17ecc:	d90f      	bls.n	17eee <usb_isr+0x96>
   17ece:	f242 2121 	movw	r1, #8737	; 0x2221
   17ed2:	428b      	cmp	r3, r1
   17ed4:	f000 80ca 	beq.w	1806c <usb_isr+0x214>
   17ed8:	f242 3221 	movw	r2, #8993	; 0x2321
   17edc:	4293      	cmp	r3, r2
   17ede:	f040 80d5 	bne.w	1808c <usb_isr+0x234>
		endpoint0_receive(NULL, 0, 0);
   17ee2:	2200      	movs	r2, #0
   17ee4:	4611      	mov	r1, r2
   17ee6:	4610      	mov	r0, r2
   17ee8:	f7ff fec4 	bl	17c74 <endpoint0_receive>
		return;
   17eec:	e0d2      	b.n	18094 <usb_isr+0x23c>
	switch (setup.wRequestAndType) {
   17eee:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
   17ef2:	d025      	beq.n	17f40 <usb_isr+0xe8>
   17ef4:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
   17ef8:	f040 80c8 	bne.w	1808c <usb_isr+0x234>
		usb_configuration = setup.wValue;
   17efc:	f3c5 4507 	ubfx	r5, r5, #16, #8
   17f00:	4b90      	ldr	r3, [pc, #576]	; (18144 <usb_isr+0x2ec>)
   17f02:	701d      	strb	r5, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   17f04:	4b90      	ldr	r3, [pc, #576]	; (18148 <usb_isr+0x2f0>)
   17f06:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   17f0a:	f04f 13c8 	mov.w	r3, #13107400	; 0xc800c8
   17f0e:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   17f12:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
   17f16:	f000 ff03 	bl	18d20 <usb_serial_configure>
		usb_midi_configure();
   17f1a:	f000 fb49 	bl	185b0 <usb_midi_configure>
		endpoint0_receive(NULL, 0, 0);
   17f1e:	2200      	movs	r2, #0
   17f20:	4611      	mov	r1, r2
   17f22:	4610      	mov	r0, r2
   17f24:	f7ff fea6 	bl	17c74 <endpoint0_receive>
		return;
   17f28:	e0b4      	b.n	18094 <usb_isr+0x23c>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   17f2a:	4b88      	ldr	r3, [pc, #544]	; (1814c <usb_isr+0x2f4>)
   17f2c:	6859      	ldr	r1, [r3, #4]
   17f2e:	2900      	cmp	r1, #0
   17f30:	f000 80ac 	beq.w	1808c <usb_isr+0x234>
   17f34:	4b85      	ldr	r3, [pc, #532]	; (1814c <usb_isr+0x2f4>)
   17f36:	f3c5 450f 	ubfx	r5, r5, #16, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   17f3a:	fa1f fe82 	uxth.w	lr, r2
   17f3e:	e06c      	b.n	1801a <usb_isr+0x1c2>
		reply_buffer[0] = usb_configuration;
   17f40:	4b80      	ldr	r3, [pc, #512]	; (18144 <usb_isr+0x2ec>)
   17f42:	781b      	ldrb	r3, [r3, #0]
   17f44:	487e      	ldr	r0, [pc, #504]	; (18140 <usb_isr+0x2e8>)
   17f46:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   17f48:	2200      	movs	r2, #0
   17f4a:	2101      	movs	r1, #1
   17f4c:	f7ff fe3e 	bl	17bcc <endpoint0_transmit>
		return;
   17f50:	e0a0      	b.n	18094 <usb_isr+0x23c>
		reply_buffer[0] = 0;
   17f52:	487b      	ldr	r0, [pc, #492]	; (18140 <usb_isr+0x2e8>)
   17f54:	2200      	movs	r2, #0
   17f56:	7002      	strb	r2, [r0, #0]
		reply_buffer[1] = 0;
   17f58:	7042      	strb	r2, [r0, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
   17f5a:	2102      	movs	r1, #2
   17f5c:	f7ff fe36 	bl	17bcc <endpoint0_transmit>
		return;
   17f60:	e098      	b.n	18094 <usb_isr+0x23c>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   17f62:	f010 0f01 	tst.w	r0, #1
   17f66:	d0a6      	beq.n	17eb6 <usb_isr+0x5e>
   17f68:	e7a2      	b.n	17eb0 <usb_isr+0x58>
		endpoint = setup.wIndex & 0x7F;
   17f6a:	b293      	uxth	r3, r2
   17f6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
   17f70:	2a07      	cmp	r2, #7
   17f72:	f200 808b 	bhi.w	1808c <usb_isr+0x234>
		if (dir) {
   17f76:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   17f7a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   17f7e:	bf14      	ite	ne
   17f80:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   17f84:	f043 0301 	orreq.w	r3, r3, #1
   17f88:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
   17f8c:	2200      	movs	r2, #0
   17f8e:	4611      	mov	r1, r2
   17f90:	4610      	mov	r0, r2
   17f92:	f7ff fe6f 	bl	17c74 <endpoint0_receive>
		return;
   17f96:	e07d      	b.n	18094 <usb_isr+0x23c>
		endpoint = setup.wIndex & 0x7F;
   17f98:	b293      	uxth	r3, r2
   17f9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		if (endpoint > 7) break;
   17f9e:	2a07      	cmp	r2, #7
   17fa0:	d874      	bhi.n	1808c <usb_isr+0x234>
		if (dir) {
   17fa2:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   17fa6:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
   17faa:	bf14      	ite	ne
   17fac:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   17fb0:	f023 0301 	biceq.w	r3, r3, #1
   17fb4:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
		endpoint0_receive(NULL, 0, 0);
   17fb8:	2200      	movs	r2, #0
   17fba:	4611      	mov	r1, r2
   17fbc:	4610      	mov	r0, r2
   17fbe:	f7ff fe59 	bl	17c74 <endpoint0_receive>
		return;
   17fc2:	e067      	b.n	18094 <usb_isr+0x23c>
					if (usb_high_speed) src = usb_config_descriptor_480;
   17fc4:	4b62      	ldr	r3, [pc, #392]	; (18150 <usb_isr+0x2f8>)
   17fc6:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
   17fc8:	462a      	mov	r2, r5
   17fca:	4962      	ldr	r1, [pc, #392]	; (18154 <usb_isr+0x2fc>)
   17fcc:	4b62      	ldr	r3, [pc, #392]	; (18158 <usb_isr+0x300>)
   17fce:	2800      	cmp	r0, #0
   17fd0:	bf18      	it	ne
   17fd2:	4619      	movne	r1, r3
   17fd4:	4861      	ldr	r0, [pc, #388]	; (1815c <usb_isr+0x304>)
   17fd6:	f7ff f98b 	bl	172f0 <memcpy>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   17fda:	4a60      	ldr	r2, [pc, #384]	; (1815c <usb_isr+0x304>)
   17fdc:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
   17fe0:	442a      	add	r2, r5
	asm("dsb");
   17fe2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17fe6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   17fea:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
   17fee:	3320      	adds	r3, #32
	} while (location < end_addr);
   17ff0:	429a      	cmp	r2, r3
   17ff2:	d8fa      	bhi.n	17fea <usb_isr+0x192>
	asm("dsb");
   17ff4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17ff8:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   17ffc:	2200      	movs	r2, #0
   17ffe:	4629      	mov	r1, r5
   18000:	4856      	ldr	r0, [pc, #344]	; (1815c <usb_isr+0x304>)
   18002:	f7ff fde3 	bl	17bcc <endpoint0_transmit>
				return;
   18006:	e045      	b.n	18094 <usb_isr+0x23c>
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   18008:	462a      	mov	r2, r5
   1800a:	4854      	ldr	r0, [pc, #336]	; (1815c <usb_isr+0x304>)
   1800c:	f7ff f970 	bl	172f0 <memcpy>
   18010:	e7e3      	b.n	17fda <usb_isr+0x182>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   18012:	330c      	adds	r3, #12
   18014:	6859      	ldr	r1, [r3, #4]
   18016:	2900      	cmp	r1, #0
   18018:	d038      	beq.n	1808c <usb_isr+0x234>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   1801a:	4628      	mov	r0, r5
   1801c:	f8b3 c000 	ldrh.w	ip, [r3]
   18020:	45ac      	cmp	ip, r5
   18022:	d1f6      	bne.n	18012 <usb_isr+0x1ba>
   18024:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   18028:	45f4      	cmp	ip, lr
   1802a:	d1f2      	bne.n	18012 <usb_isr+0x1ba>
				if ((setup.wValue >> 8) == 3) {
   1802c:	0a2d      	lsrs	r5, r5, #8
   1802e:	2d03      	cmp	r5, #3
					datalen = *(list->addr);
   18030:	bf0c      	ite	eq
   18032:	780b      	ldrbeq	r3, [r1, #0]
					datalen = list->length;
   18034:	891b      	ldrhne	r3, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   18036:	0c15      	lsrs	r5, r2, #16
   18038:	429d      	cmp	r5, r3
   1803a:	bf28      	it	cs
   1803c:	461d      	movcs	r5, r3
				if (setup.wValue == 0x200) {
   1803e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   18042:	d0bf      	beq.n	17fc4 <usb_isr+0x16c>
				} else if (setup.wValue == 0x700) {
   18044:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
   18048:	d1de      	bne.n	18008 <usb_isr+0x1b0>
					if (usb_high_speed) src = usb_config_descriptor_12;
   1804a:	4b41      	ldr	r3, [pc, #260]	; (18150 <usb_isr+0x2f8>)
   1804c:	7818      	ldrb	r0, [r3, #0]
					memcpy(usb_descriptor_buffer, src, datalen);
   1804e:	f8df 910c 	ldr.w	r9, [pc, #268]	; 1815c <usb_isr+0x304>
   18052:	462a      	mov	r2, r5
   18054:	4940      	ldr	r1, [pc, #256]	; (18158 <usb_isr+0x300>)
   18056:	4b3f      	ldr	r3, [pc, #252]	; (18154 <usb_isr+0x2fc>)
   18058:	2800      	cmp	r0, #0
   1805a:	bf18      	it	ne
   1805c:	4619      	movne	r1, r3
   1805e:	4648      	mov	r0, r9
   18060:	f7ff f946 	bl	172f0 <memcpy>
					usb_descriptor_buffer[1] = 7;
   18064:	2307      	movs	r3, #7
   18066:	f889 3001 	strb.w	r3, [r9, #1]
   1806a:	e7b6      	b.n	17fda <usb_isr+0x182>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   1806c:	b292      	uxth	r2, r2
   1806e:	2a00      	cmp	r2, #0
   18070:	f47f af37 	bne.w	17ee2 <usb_isr+0x8a>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   18074:	4b3a      	ldr	r3, [pc, #232]	; (18160 <usb_isr+0x308>)
   18076:	681a      	ldr	r2, [r3, #0]
   18078:	4b3a      	ldr	r3, [pc, #232]	; (18164 <usb_isr+0x30c>)
   1807a:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   1807c:	f3c5 4507 	ubfx	r5, r5, #16, #8
   18080:	4b39      	ldr	r3, [pc, #228]	; (18168 <usb_isr+0x310>)
   18082:	701d      	strb	r5, [r3, #0]
   18084:	e72d      	b.n	17ee2 <usb_isr+0x8a>
		if (setup.wLength != 7) break;
   18086:	0c13      	lsrs	r3, r2, #16
   18088:	2b07      	cmp	r3, #7
   1808a:	d04c      	beq.n	18126 <usb_isr+0x2ce>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   1808c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   18090:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   18094:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
   18098:	2b00      	cmp	r3, #0
   1809a:	d06f      	beq.n	1817c <usb_isr+0x324>
			USB1_ENDPTSETUPSTAT = setupstatus;
   1809c:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word1 = endpoint_queue_head[0].setup0;
   180a0:	6ab5      	ldr	r5, [r6, #40]	; 0x28
				s.word2 = endpoint_queue_head[0].setup1;
   180a2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
				USB1_USBCMD |= USB_USBCMD_SUTW;
   180a4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   180a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   180ac:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   180b0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   180b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   180b8:	d0f4      	beq.n	180a4 <usb_isr+0x24c>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   180ba:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   180be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   180c2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   180c6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   180ca:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   180ce:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   180d2:	f013 1f01 	tst.w	r3, #65537	; 0x10001
   180d6:	d1fa      	bne.n	180ce <usb_isr+0x276>
			endpoint0_notify_mask = 0;
   180d8:	4b24      	ldr	r3, [pc, #144]	; (1816c <usb_isr+0x314>)
   180da:	2100      	movs	r1, #0
   180dc:	6019      	str	r1, [r3, #0]
	switch (setup.wRequestAndType) {
   180de:	b2ab      	uxth	r3, r5
   180e0:	f240 6181 	movw	r1, #1665	; 0x681
   180e4:	428b      	cmp	r3, r1
   180e6:	f63f aeec 	bhi.w	17ec2 <usb_isr+0x6a>
   180ea:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
   180ee:	f4bf af1c 	bcs.w	17f2a <usb_isr+0xd2>
   180f2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
   180f6:	f43f af4f 	beq.w	17f98 <usb_isr+0x140>
   180fa:	f67f aec2 	bls.w	17e82 <usb_isr+0x2a>
   180fe:	f240 3102 	movw	r1, #770	; 0x302
   18102:	428b      	cmp	r3, r1
   18104:	f43f af31 	beq.w	17f6a <usb_isr+0x112>
   18108:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1810c:	d1be      	bne.n	1808c <usb_isr+0x234>
		endpoint0_receive(NULL, 0, 0);
   1810e:	2200      	movs	r2, #0
   18110:	4611      	mov	r1, r2
   18112:	4610      	mov	r0, r2
   18114:	f7ff fdae 	bl	17c74 <endpoint0_receive>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   18118:	0c2b      	lsrs	r3, r5, #16
   1811a:	065b      	lsls	r3, r3, #25
   1811c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18120:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
   18124:	e7b6      	b.n	18094 <usb_isr+0x23c>
		endpoint0_setupdata.bothwords = setupdata;
   18126:	4b12      	ldr	r3, [pc, #72]	; (18170 <usb_isr+0x318>)
   18128:	601d      	str	r5, [r3, #0]
   1812a:	605a      	str	r2, [r3, #4]
		endpoint0_receive(endpoint0_buffer, 7, 1);
   1812c:	2201      	movs	r2, #1
   1812e:	2107      	movs	r1, #7
   18130:	4810      	ldr	r0, [pc, #64]	; (18174 <usb_isr+0x31c>)
   18132:	f7ff fd9f 	bl	17c74 <endpoint0_receive>
		return;
   18136:	e7ad      	b.n	18094 <usb_isr+0x23c>
   18138:	402e0000 	.word	0x402e0000
   1813c:	20000000 	.word	0x20000000
   18140:	200084d8 	.word	0x200084d8
   18144:	20008c40 	.word	0x20008c40
   18148:	00cc0002 	.word	0x00cc0002
   1814c:	20004c5c 	.word	0x20004c5c
   18150:	20008c41 	.word	0x20008c41
   18154:	60002b68 	.word	0x60002b68
   18158:	60002de0 	.word	0x60002de0
   1815c:	20204300 	.word	0x20204300
   18160:	20008a6c 	.word	0x20008a6c
   18164:	20008a80 	.word	0x20008a80
   18168:	20008c3f 	.word	0x20008c3f
   1816c:	200073ec 	.word	0x200073ec
   18170:	20006660 	.word	0x20006660
   18174:	200073e4 	.word	0x200073e4
   18178:	402e01c0 	.word	0x402e01c0
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   1817c:	4b51      	ldr	r3, [pc, #324]	; (182c4 <usb_isr+0x46c>)
   1817e:	f8d3 41bc 	ldr.w	r4, [r3, #444]	; 0x1bc
		if (completestatus) {
   18182:	b36c      	cbz	r4, 181e0 <usb_isr+0x388>
			USB1_ENDPTCOMPLETE = completestatus;
   18184:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   18188:	4b4f      	ldr	r3, [pc, #316]	; (182c8 <usb_isr+0x470>)
   1818a:	681b      	ldr	r3, [r3, #0]
   1818c:	421c      	tst	r4, r3
   1818e:	d174      	bne.n	1827a <usb_isr+0x422>
			completestatus &= endpointN_notify_mask;
   18190:	4b4e      	ldr	r3, [pc, #312]	; (182cc <usb_isr+0x474>)
   18192:	681b      	ldr	r3, [r3, #0]
			if (completestatus) {
   18194:	401c      	ands	r4, r3
   18196:	d023      	beq.n	181e0 <usb_isr+0x388>
				while (tx) {
   18198:	0c26      	lsrs	r6, r4, #16
   1819a:	d010      	beq.n	181be <usb_isr+0x366>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   1819c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 182ec <usb_isr+0x494>
					tx &= ~(1<<p);
   181a0:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(tx);
   181a4:	fa96 f5a6 	rbit	r5, r6
   181a8:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   181ac:	eb09 10c5 	add.w	r0, r9, r5, lsl #7
   181b0:	3040      	adds	r0, #64	; 0x40
   181b2:	f7ff fdf9 	bl	17da8 <run_callbacks>
					tx &= ~(1<<p);
   181b6:	fa08 f505 	lsl.w	r5, r8, r5
				while (tx) {
   181ba:	43ae      	bics	r6, r5
   181bc:	d1f2      	bne.n	181a4 <usb_isr+0x34c>
				uint32_t rx = completestatus & 0xffff;
   181be:	b2a4      	uxth	r4, r4
				while(rx) {
   181c0:	b174      	cbz	r4, 181e0 <usb_isr+0x388>
					run_callbacks(endpoint_queue_head + p * 2);
   181c2:	f8df 8128 	ldr.w	r8, [pc, #296]	; 182ec <usb_isr+0x494>
					rx &= ~(1<<p);
   181c6:	2601      	movs	r6, #1
					int p=__builtin_ctz(rx);
   181c8:	fa94 f5a4 	rbit	r5, r4
   181cc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
   181d0:	eb08 10c5 	add.w	r0, r8, r5, lsl #7
   181d4:	f7ff fde8 	bl	17da8 <run_callbacks>
					rx &= ~(1<<p);
   181d8:	fa06 f505 	lsl.w	r5, r6, r5
				while(rx) {
   181dc:	43ac      	bics	r4, r5
   181de:	d1f3      	bne.n	181c8 <usb_isr+0x370>
	if (status & USB_USBSTS_URI) { // page 3164
   181e0:	f017 0f40 	tst.w	r7, #64	; 0x40
   181e4:	d019      	beq.n	1821a <usb_isr+0x3c2>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   181e6:	4b37      	ldr	r3, [pc, #220]	; (182c4 <usb_isr+0x46c>)
   181e8:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   181ec:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   181f0:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   181f4:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   181f8:	461a      	mov	r2, r3
   181fa:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   181fe:	2b00      	cmp	r3, #0
   18200:	d1fb      	bne.n	181fa <usb_isr+0x3a2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   18202:	4b30      	ldr	r3, [pc, #192]	; (182c4 <usb_isr+0x46c>)
   18204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18208:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   1820c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   18210:	f000 fd84 	bl	18d1c <usb_serial_reset>
		endpointN_notify_mask = 0;
   18214:	4b2d      	ldr	r3, [pc, #180]	; (182cc <usb_isr+0x474>)
   18216:	2200      	movs	r2, #0
   18218:	601a      	str	r2, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   1821a:	f017 7f80 	tst.w	r7, #16777216	; 0x1000000
   1821e:	d003      	beq.n	18228 <usb_isr+0x3d0>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   18220:	4b2b      	ldr	r3, [pc, #172]	; (182d0 <usb_isr+0x478>)
   18222:	681b      	ldr	r3, [r3, #0]
   18224:	b103      	cbz	r3, 18228 <usb_isr+0x3d0>
   18226:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   18228:	f017 7f00 	tst.w	r7, #33554432	; 0x2000000
   1822c:	d003      	beq.n	18236 <usb_isr+0x3de>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   1822e:	4b29      	ldr	r3, [pc, #164]	; (182d4 <usb_isr+0x47c>)
   18230:	681b      	ldr	r3, [r3, #0]
   18232:	b103      	cbz	r3, 18236 <usb_isr+0x3de>
   18234:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   18236:	f017 0f04 	tst.w	r7, #4
   1823a:	d009      	beq.n	18250 <usb_isr+0x3f8>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   1823c:	4b21      	ldr	r3, [pc, #132]	; (182c4 <usb_isr+0x46c>)
   1823e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   18242:	f413 7f00 	tst.w	r3, #512	; 0x200
			usb_high_speed = 1;
   18246:	4b24      	ldr	r3, [pc, #144]	; (182d8 <usb_isr+0x480>)
   18248:	bf14      	ite	ne
   1824a:	2201      	movne	r2, #1
			usb_high_speed = 0;
   1824c:	2200      	moveq	r2, #0
   1824e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   18250:	4b1c      	ldr	r3, [pc, #112]	; (182c4 <usb_isr+0x46c>)
   18252:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   18256:	f013 0f80 	tst.w	r3, #128	; 0x80
   1825a:	d00c      	beq.n	18276 <usb_isr+0x41e>
   1825c:	f017 0f80 	tst.w	r7, #128	; 0x80
   18260:	d009      	beq.n	18276 <usb_isr+0x41e>
		if (usb_reboot_timer) {
   18262:	4b1e      	ldr	r3, [pc, #120]	; (182dc <usb_isr+0x484>)
   18264:	781b      	ldrb	r3, [r3, #0]
   18266:	b123      	cbz	r3, 18272 <usb_isr+0x41a>
			if (--usb_reboot_timer == 0) {
   18268:	3b01      	subs	r3, #1
   1826a:	b2db      	uxtb	r3, r3
   1826c:	4a1b      	ldr	r2, [pc, #108]	; (182dc <usb_isr+0x484>)
   1826e:	7013      	strb	r3, [r2, #0]
   18270:	b31b      	cbz	r3, 182ba <usb_isr+0x462>
		usb_midi_flush_output();
   18272:	f000 f9fd 	bl	18670 <usb_midi_flush_output>
}
   18276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				endpoint0_notify_mask = 0;
   1827a:	4b13      	ldr	r3, [pc, #76]	; (182c8 <usb_isr+0x470>)
   1827c:	2200      	movs	r2, #0
   1827e:	601a      	str	r2, [r3, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   18280:	4b17      	ldr	r3, [pc, #92]	; (182e0 <usb_isr+0x488>)
   18282:	685a      	ldr	r2, [r3, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   18284:	8819      	ldrh	r1, [r3, #0]
   18286:	f242 0321 	movw	r3, #8225	; 0x2021
   1828a:	4299      	cmp	r1, r3
   1828c:	d180      	bne.n	18190 <usb_isr+0x338>
   1828e:	b292      	uxth	r2, r2
   18290:	2a00      	cmp	r2, #0
   18292:	f47f af7d 	bne.w	18190 <usb_isr+0x338>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   18296:	4b13      	ldr	r3, [pc, #76]	; (182e4 <usb_isr+0x48c>)
   18298:	4a13      	ldr	r2, [pc, #76]	; (182e8 <usb_isr+0x490>)
   1829a:	e892 0003 	ldmia.w	r2, {r0, r1}
   1829e:	6018      	str	r0, [r3, #0]
   182a0:	8099      	strh	r1, [r3, #4]
   182a2:	0c09      	lsrs	r1, r1, #16
   182a4:	7199      	strb	r1, [r3, #6]
		if (usb_cdc_line_coding[0] == 134) {
   182a6:	2886      	cmp	r0, #134	; 0x86
   182a8:	f47f af72 	bne.w	18190 <usb_isr+0x338>
			usb_start_sof_interrupts(NUM_INTERFACE);
   182ac:	2003      	movs	r0, #3
   182ae:	f7ff fda5 	bl	17dfc <usb_start_sof_interrupts>
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   182b2:	4b0a      	ldr	r3, [pc, #40]	; (182dc <usb_isr+0x484>)
   182b4:	2250      	movs	r2, #80	; 0x50
   182b6:	701a      	strb	r2, [r3, #0]
   182b8:	e76a      	b.n	18190 <usb_isr+0x338>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   182ba:	2003      	movs	r0, #3
   182bc:	f7ff fdb8 	bl	17e30 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   182c0:	f010 fae2 	bl	28888 <___reboot_Teensyduino__veneer>
   182c4:	402e0000 	.word	0x402e0000
   182c8:	200073ec 	.word	0x200073ec
   182cc:	200073f0 	.word	0x200073f0
   182d0:	20008bf8 	.word	0x20008bf8
   182d4:	20008bfc 	.word	0x20008bfc
   182d8:	20008c41 	.word	0x20008c41
   182dc:	20008c47 	.word	0x20008c47
   182e0:	20006660 	.word	0x20006660
   182e4:	20008a78 	.word	0x20008a78
   182e8:	200073e4 	.word	0x200073e4
   182ec:	20000000 	.word	0x20000000

000182f0 <usb_config_rx>:
{
   182f0:	b538      	push	{r3, r4, r5, lr}
   182f2:	461d      	mov	r5, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   182f4:	1e83      	subs	r3, r0, #2
   182f6:	2b02      	cmp	r3, #2
   182f8:	d900      	bls.n	182fc <usb_config_rx+0xc>
}
   182fa:	bd38      	pop	{r3, r4, r5, pc}
   182fc:	4604      	mov	r4, r0
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   182fe:	fab2 fc82 	clz	ip, r2
   18302:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   18306:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   18308:	462a      	mov	r2, r5
   1830a:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
   1830e:	4807      	ldr	r0, [pc, #28]	; (1832c <usb_config_rx+0x3c>)
   18310:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   18314:	f7ff fd63 	bl	17dde <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << ep);
   18318:	2d00      	cmp	r5, #0
   1831a:	d0ee      	beq.n	182fa <usb_config_rx+0xa>
   1831c:	4a04      	ldr	r2, [pc, #16]	; (18330 <usb_config_rx+0x40>)
   1831e:	2301      	movs	r3, #1
   18320:	40a3      	lsls	r3, r4
   18322:	6811      	ldr	r1, [r2, #0]
   18324:	430b      	orrs	r3, r1
   18326:	6013      	str	r3, [r2, #0]
   18328:	e7e7      	b.n	182fa <usb_config_rx+0xa>
   1832a:	bf00      	nop
   1832c:	20000000 	.word	0x20000000
   18330:	200073f0 	.word	0x200073f0

00018334 <usb_config_tx>:
{
   18334:	b538      	push	{r3, r4, r5, lr}
   18336:	4604      	mov	r4, r0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   18338:	3802      	subs	r0, #2
   1833a:	2802      	cmp	r0, #2
   1833c:	d900      	bls.n	18340 <usb_config_tx+0xc>
}
   1833e:	bd38      	pop	{r3, r4, r5, pc}
   18340:	461d      	mov	r5, r3
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   18342:	fab2 fc82 	clz	ip, r2
   18346:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   1834a:	0409      	lsls	r1, r1, #16
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   1834c:	4809      	ldr	r0, [pc, #36]	; (18374 <usb_config_tx+0x40>)
   1834e:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   18352:	461a      	mov	r2, r3
   18354:	ea41 714c 	orr.w	r1, r1, ip, lsl #29
   18358:	3040      	adds	r0, #64	; 0x40
   1835a:	f7ff fd40 	bl	17dde <usb_endpoint_config>
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   1835e:	2d00      	cmp	r5, #0
   18360:	d0ed      	beq.n	1833e <usb_config_tx+0xa>
   18362:	4a05      	ldr	r2, [pc, #20]	; (18378 <usb_config_tx+0x44>)
   18364:	3410      	adds	r4, #16
   18366:	2301      	movs	r3, #1
   18368:	40a3      	lsls	r3, r4
   1836a:	6811      	ldr	r1, [r2, #0]
   1836c:	430b      	orrs	r3, r1
   1836e:	6013      	str	r3, [r2, #0]
   18370:	e7e5      	b.n	1833e <usb_config_tx+0xa>
   18372:	bf00      	nop
   18374:	20000000 	.word	0x20000000
   18378:	200073f0 	.word	0x200073f0

0001837c <usb_prepare_transfer>:
{
   1837c:	b410      	push	{r4}
	transfer->next = 1;
   1837e:	2401      	movs	r4, #1
   18380:	6004      	str	r4, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
   18382:	0412      	lsls	r2, r2, #16
   18384:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18388:	6042      	str	r2, [r0, #4]
	transfer->pointer0 = addr;
   1838a:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
   1838c:	f501 5280 	add.w	r2, r1, #4096	; 0x1000
   18390:	60c2      	str	r2, [r0, #12]
	transfer->pointer2 = addr + 8192;
   18392:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
   18396:	6102      	str	r2, [r0, #16]
	transfer->pointer3 = addr + 12288;
   18398:	f501 5240 	add.w	r2, r1, #12288	; 0x3000
   1839c:	6142      	str	r2, [r0, #20]
	transfer->pointer4 = addr + 16384;
   1839e:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
   183a2:	6181      	str	r1, [r0, #24]
	transfer->callback_param = param;
   183a4:	61c3      	str	r3, [r0, #28]
}
   183a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   183aa:	4770      	bx	lr

000183ac <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
   183ac:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   183ae:	1e83      	subs	r3, r0, #2
   183b0:	2b02      	cmp	r3, #2
   183b2:	d900      	bls.n	183b6 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   183b4:	bd08      	pop	{r3, pc}
   183b6:	460a      	mov	r2, r1
	uint32_t mask = 1 << (endpoint_number + 16);
   183b8:	f100 0110 	add.w	r1, r0, #16
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   183bc:	4b04      	ldr	r3, [pc, #16]	; (183d0 <usb_transmit+0x24>)
   183be:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   183c2:	2301      	movs	r3, #1
   183c4:	fa03 f101 	lsl.w	r1, r3, r1
   183c8:	3040      	adds	r0, #64	; 0x40
   183ca:	f7ff fca9 	bl	17d20 <schedule_transfer>
   183ce:	e7f1      	b.n	183b4 <usb_transmit+0x8>
   183d0:	20000000 	.word	0x20000000

000183d4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
   183d4:	b508      	push	{r3, lr}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   183d6:	1e83      	subs	r3, r0, #2
   183d8:	2b02      	cmp	r3, #2
   183da:	d900      	bls.n	183de <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   183dc:	bd08      	pop	{r3, pc}
	schedule_transfer(endpoint, mask, transfer);
   183de:	460a      	mov	r2, r1
   183e0:	2101      	movs	r1, #1
   183e2:	4081      	lsls	r1, r0
   183e4:	4b02      	ldr	r3, [pc, #8]	; (183f0 <usb_receive+0x1c>)
   183e6:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   183ea:	f7ff fc99 	bl	17d20 <schedule_transfer>
   183ee:	e7f5      	b.n	183dc <usb_receive+0x8>
   183f0:	20000000 	.word	0x20000000

000183f4 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   183f4:	6840      	ldr	r0, [r0, #4]
#endif
}
   183f6:	4770      	bx	lr

000183f8 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
   183f8:	b500      	push	{lr}
   183fa:	b085      	sub	sp, #20
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   183fc:	4b10      	ldr	r3, [pc, #64]	; (18440 <usb_init_serialnumber+0x48>)
   183fe:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
   18402:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   18406:	4b0f      	ldr	r3, [pc, #60]	; (18444 <usb_init_serialnumber+0x4c>)
   18408:	4298      	cmp	r0, r3
   1840a:	d202      	bcs.n	18412 <usb_init_serialnumber+0x1a>
   1840c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18410:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   18412:	220a      	movs	r2, #10
   18414:	a901      	add	r1, sp, #4
   18416:	f7ff f819 	bl	1744c <ultoa>
	for (i=0; i<10; i++) {
   1841a:	a901      	add	r1, sp, #4
   1841c:	480a      	ldr	r0, [pc, #40]	; (18448 <usb_init_serialnumber+0x50>)
   1841e:	2300      	movs	r3, #0
		char c = buf[i];
   18420:	f811 2b01 	ldrb.w	r2, [r1], #1
		if (!c) break;
   18424:	b122      	cbz	r2, 18430 <usb_init_serialnumber+0x38>
		usb_string_serial_number_default.wString[i] = c;
   18426:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   1842a:	3301      	adds	r3, #1
   1842c:	2b0a      	cmp	r3, #10
   1842e:	d1f7      	bne.n	18420 <usb_init_serialnumber+0x28>
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   18430:	3301      	adds	r3, #1
   18432:	005b      	lsls	r3, r3, #1
   18434:	4a04      	ldr	r2, [pc, #16]	; (18448 <usb_init_serialnumber+0x50>)
   18436:	7013      	strb	r3, [r2, #0]
}
   18438:	b005      	add	sp, #20
   1843a:	f85d fb04 	ldr.w	pc, [sp], #4
   1843e:	bf00      	nop
   18440:	401f4400 	.word	0x401f4400
   18444:	00989680 	.word	0x00989680
   18448:	20005bc4 	.word	0x20005bc4

0001844c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   1844c:	b508      	push	{r3, lr}
   1844e:	f000 fd87 	bl	18f60 <usb_serial_flush_input>
   18452:	bd08      	pop	{r3, pc}

00018454 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   18454:	b508      	push	{r3, lr}
   18456:	f000 fd53 	bl	18f00 <usb_serial_peekchar>
   1845a:	bd08      	pop	{r3, pc}

0001845c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
   1845c:	b508      	push	{r3, lr}
   1845e:	f000 fdb1 	bl	18fc4 <usb_serial_getchar>
   18462:	bd08      	pop	{r3, pc}

00018464 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
   18464:	b508      	push	{r3, lr}
   18466:	f000 fd6f 	bl	18f48 <usb_serial_available>
   1846a:	bd08      	pop	{r3, pc}

0001846c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   1846c:	b508      	push	{r3, lr}
   1846e:	f000 fec7 	bl	19200 <usb_serial_flush_output>
   18472:	bd08      	pop	{r3, pc}

00018474 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   18474:	b508      	push	{r3, lr}
   18476:	f000 fe9d 	bl	191b4 <usb_serial_write_buffer_free>
   1847a:	bd08      	pop	{r3, pc}

0001847c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   1847c:	b508      	push	{r3, lr}
   1847e:	4608      	mov	r0, r1
   18480:	4611      	mov	r1, r2
   18482:	f000 fdaf 	bl	18fe4 <usb_serial_write>
   18486:	bd08      	pop	{r3, pc}

00018488 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   18488:	b508      	push	{r3, lr}
   1848a:	4608      	mov	r0, r1
   1848c:	f000 fe86 	bl	1919c <usb_serial_putchar>
   18490:	bd08      	pop	{r3, pc}
	...

00018494 <sysex_byte>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

static void sysex_byte(uint8_t b)
{
   18494:	b510      	push	{r4, lr}
   18496:	4604      	mov	r4, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   18498:	4b0d      	ldr	r3, [pc, #52]	; (184d0 <sysex_byte+0x3c>)
   1849a:	681b      	ldr	r3, [r3, #0]
   1849c:	b193      	cbz	r3, 184c4 <sysex_byte+0x30>
   1849e:	4a0d      	ldr	r2, [pc, #52]	; (184d4 <sysex_byte+0x40>)
   184a0:	8811      	ldrh	r1, [r2, #0]
   184a2:	f5b1 7f91 	cmp.w	r1, #290	; 0x122
   184a6:	d305      	bcc.n	184b4 <sysex_byte+0x20>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
   184a8:	2200      	movs	r2, #0
   184aa:	480b      	ldr	r0, [pc, #44]	; (184d8 <sysex_byte+0x44>)
   184ac:	4798      	blx	r3
		usb_midi_msg_sysex_len = 0;
   184ae:	4b09      	ldr	r3, [pc, #36]	; (184d4 <sysex_byte+0x40>)
   184b0:	2200      	movs	r2, #0
   184b2:	801a      	strh	r2, [r3, #0]
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   184b4:	4b07      	ldr	r3, [pc, #28]	; (184d4 <sysex_byte+0x40>)
   184b6:	881b      	ldrh	r3, [r3, #0]
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   184b8:	1c59      	adds	r1, r3, #1
   184ba:	4a06      	ldr	r2, [pc, #24]	; (184d4 <sysex_byte+0x40>)
   184bc:	8011      	strh	r1, [r2, #0]
   184be:	4a06      	ldr	r2, [pc, #24]	; (184d8 <sysex_byte+0x44>)
   184c0:	54d4      	strb	r4, [r2, r3]
	}
}
   184c2:	bd10      	pop	{r4, pc}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   184c4:	4b03      	ldr	r3, [pc, #12]	; (184d4 <sysex_byte+0x40>)
   184c6:	881b      	ldrh	r3, [r3, #0]
   184c8:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
   184cc:	d2f9      	bcs.n	184c2 <sysex_byte+0x2e>
   184ce:	e7f3      	b.n	184b8 <sysex_byte+0x24>
   184d0:	20008ac0 	.word	0x20008ac0
   184d4:	20008c1c 	.word	0x20008c1c
   184d8:	20008ad4 	.word	0x20008ad4

000184dc <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
   184dc:	b570      	push	{r4, r5, r6, lr}
   184de:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   184e0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   184e4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   184e8:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   184ec:	4c13      	ldr	r4, [pc, #76]	; (1853c <rx_queue_transfer+0x60>)
   184ee:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   184f2:	4d13      	ldr	r5, [pc, #76]	; (18540 <rx_queue_transfer+0x64>)
   184f4:	eb05 1540 	add.w	r5, r5, r0, lsl #5
   184f8:	4e12      	ldr	r6, [pc, #72]	; (18544 <rx_queue_transfer+0x68>)
   184fa:	8832      	ldrh	r2, [r6, #0]
   184fc:	4621      	mov	r1, r4
   184fe:	4628      	mov	r0, r5
   18500:	f7ff ff3c 	bl	1837c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   18504:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
   18506:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   18508:	4422      	add	r2, r4
	asm("dsb");
   1850a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   1850e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   18512:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
   18516:	3320      	adds	r3, #32
	} while (location < end_addr);
   18518:	429a      	cmp	r2, r3
   1851a:	d8fa      	bhi.n	18512 <rx_queue_transfer+0x36>
	asm("dsb");
   1851c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18520:	f3bf 8f6f 	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
   18524:	4629      	mov	r1, r5
   18526:	2004      	movs	r0, #4
   18528:	f7ff ff54 	bl	183d4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1852c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18530:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18534:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   18538:	bd70      	pop	{r4, r5, r6, pc}
   1853a:	bf00      	nop
   1853c:	20204580 	.word	0x20204580
   18540:	200063a0 	.word	0x200063a0
   18544:	20008c10 	.word	0x20008c10

00018548 <rx_event>:



// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
   18548:	b508      	push	{r3, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1854a:	6842      	ldr	r2, [r0, #4]
   1854c:	4b12      	ldr	r3, [pc, #72]	; (18598 <rx_event+0x50>)
   1854e:	881b      	ldrh	r3, [r3, #0]
   18550:	f3c2 420e 	ubfx	r2, r2, #16, #15
   18554:	1a9b      	subs	r3, r3, r2
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   18556:	f64f 72fc 	movw	r2, #65532	; 0xfffc
	int i = t->callback_param;
   1855a:	69c0      	ldr	r0, [r0, #28]
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   1855c:	4013      	ands	r3, r2
   1855e:	d017      	beq.n	18590 <rx_event+0x48>
		uint32_t head = rx_head;
   18560:	4a0e      	ldr	r2, [pc, #56]	; (1859c <rx_event+0x54>)
   18562:	7812      	ldrb	r2, [r2, #0]
		rx_count[i] = len;
   18564:	490e      	ldr	r1, [pc, #56]	; (185a0 <rx_event+0x58>)
   18566:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
   1856a:	490e      	ldr	r1, [pc, #56]	; (185a4 <rx_event+0x5c>)
   1856c:	f04f 0c00 	mov.w	ip, #0
   18570:	f821 c010 	strh.w	ip, [r1, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
   18574:	3201      	adds	r2, #1
   18576:	2a07      	cmp	r2, #7
   18578:	bf28      	it	cs
   1857a:	4662      	movcs	r2, ip
		rx_list[head] = i;
   1857c:	490a      	ldr	r1, [pc, #40]	; (185a8 <rx_event+0x60>)
   1857e:	5488      	strb	r0, [r1, r2]
		rx_head = head;
   18580:	b2d2      	uxtb	r2, r2
   18582:	4906      	ldr	r1, [pc, #24]	; (1859c <rx_event+0x54>)
   18584:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   18586:	4a09      	ldr	r2, [pc, #36]	; (185ac <rx_event+0x64>)
   18588:	6811      	ldr	r1, [r2, #0]
   1858a:	440b      	add	r3, r1
   1858c:	6013      	str	r3, [r2, #0]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   1858e:	bd08      	pop	{r3, pc}
		rx_queue_transfer(i);
   18590:	f7ff ffa4 	bl	184dc <rx_queue_transfer>
}
   18594:	e7fb      	b.n	1858e <rx_event+0x46>
   18596:	bf00      	nop
   18598:	20008c10 	.word	0x20008c10
   1859c:	20008c2f 	.word	0x20008c2f
   185a0:	200084e8 	.word	0x200084e8
   185a4:	20008504 	.word	0x20008504
   185a8:	20008520 	.word	0x20008520
   185ac:	200084e0 	.word	0x200084e0

000185b0 <usb_midi_configure>:
{
   185b0:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   185b2:	4b20      	ldr	r3, [pc, #128]	; (18634 <usb_midi_configure+0x84>)
   185b4:	781b      	ldrb	r3, [r3, #0]
   185b6:	f013 0fff 	tst.w	r3, #255	; 0xff
   185ba:	bf0c      	ite	eq
   185bc:	2540      	moveq	r5, #64	; 0x40
   185be:	f44f 7500 	movne.w	r5, #512	; 0x200
		tx_packet_size = MIDI_TX_SIZE_480;
   185c2:	4e1d      	ldr	r6, [pc, #116]	; (18638 <usb_midi_configure+0x88>)
   185c4:	8035      	strh	r5, [r6, #0]
		rx_packet_size = MIDI_RX_SIZE_480;
   185c6:	4b1d      	ldr	r3, [pc, #116]	; (1863c <usb_midi_configure+0x8c>)
   185c8:	801d      	strh	r5, [r3, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   185ca:	2280      	movs	r2, #128	; 0x80
   185cc:	2100      	movs	r1, #0
   185ce:	481c      	ldr	r0, [pc, #112]	; (18640 <usb_midi_configure+0x90>)
   185d0:	f00a fd42 	bl	23058 <memset>
	tx_head = 0;
   185d4:	2400      	movs	r4, #0
   185d6:	4b1b      	ldr	r3, [pc, #108]	; (18644 <usb_midi_configure+0x94>)
   185d8:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
   185da:	4b1b      	ldr	r3, [pc, #108]	; (18648 <usb_midi_configure+0x98>)
   185dc:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   185de:	22c0      	movs	r2, #192	; 0xc0
   185e0:	4621      	mov	r1, r4
   185e2:	481a      	ldr	r0, [pc, #104]	; (1864c <usb_midi_configure+0x9c>)
   185e4:	f00a fd38 	bl	23058 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   185e8:	4b19      	ldr	r3, [pc, #100]	; (18650 <usb_midi_configure+0xa0>)
   185ea:	601c      	str	r4, [r3, #0]
   185ec:	605c      	str	r4, [r3, #4]
   185ee:	609c      	str	r4, [r3, #8]
	memset(rx_index, 0, sizeof(rx_index));
   185f0:	4b18      	ldr	r3, [pc, #96]	; (18654 <usb_midi_configure+0xa4>)
   185f2:	601c      	str	r4, [r3, #0]
   185f4:	605c      	str	r4, [r3, #4]
   185f6:	609c      	str	r4, [r3, #8]
	rx_head = 0;
   185f8:	4b17      	ldr	r3, [pc, #92]	; (18658 <usb_midi_configure+0xa8>)
   185fa:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
   185fc:	4b17      	ldr	r3, [pc, #92]	; (1865c <usb_midi_configure+0xac>)
   185fe:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
   18600:	4b17      	ldr	r3, [pc, #92]	; (18660 <usb_midi_configure+0xb0>)
   18602:	601c      	str	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   18604:	4b17      	ldr	r3, [pc, #92]	; (18664 <usb_midi_configure+0xb4>)
   18606:	4622      	mov	r2, r4
   18608:	4629      	mov	r1, r5
   1860a:	2004      	movs	r0, #4
   1860c:	f7ff fe70 	bl	182f0 <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
   18610:	4623      	mov	r3, r4
   18612:	4622      	mov	r2, r4
   18614:	8831      	ldrh	r1, [r6, #0]
   18616:	2004      	movs	r0, #4
   18618:	f7ff fe8c 	bl	18334 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   1861c:	4620      	mov	r0, r4
   1861e:	f7ff ff5d 	bl	184dc <rx_queue_transfer>
   18622:	3401      	adds	r4, #1
   18624:	2c06      	cmp	r4, #6
   18626:	d1f9      	bne.n	1861c <usb_midi_configure+0x6c>
	transmit_previous_timeout = 0;
   18628:	2300      	movs	r3, #0
   1862a:	4a0f      	ldr	r2, [pc, #60]	; (18668 <usb_midi_configure+0xb8>)
   1862c:	7013      	strb	r3, [r2, #0]
	tx_noautoflush = 0;
   1862e:	4a0f      	ldr	r2, [pc, #60]	; (1866c <usb_midi_configure+0xbc>)
   18630:	7013      	strb	r3, [r2, #0]
}
   18632:	bd70      	pop	{r4, r5, r6, pc}
   18634:	20008c41 	.word	0x20008c41
   18638:	20008c18 	.word	0x20008c18
   1863c:	20008c10 	.word	0x20008c10
   18640:	20006560 	.word	0x20006560
   18644:	20008c3a 	.word	0x20008c3a
   18648:	20008c14 	.word	0x20008c14
   1864c:	200063a0 	.word	0x200063a0
   18650:	200084e8 	.word	0x200084e8
   18654:	20008504 	.word	0x20008504
   18658:	20008c2f 	.word	0x20008c2f
   1865c:	20008c31 	.word	0x20008c31
   18660:	200084e0 	.word	0x200084e0
   18664:	00018549 	.word	0x00018549
   18668:	20008c38 	.word	0x20008c38
   1866c:	20008c3c 	.word	0x20008c3c

00018670 <usb_midi_flush_output>:
	if (tx_noautoflush == 0 && tx_available > 0) {
   18670:	4b20      	ldr	r3, [pc, #128]	; (186f4 <usb_midi_flush_output+0x84>)
   18672:	781b      	ldrb	r3, [r3, #0]
   18674:	b913      	cbnz	r3, 1867c <usb_midi_flush_output+0xc>
   18676:	4b20      	ldr	r3, [pc, #128]	; (186f8 <usb_midi_flush_output+0x88>)
   18678:	8818      	ldrh	r0, [r3, #0]
   1867a:	b900      	cbnz	r0, 1867e <usb_midi_flush_output+0xe>
   1867c:	4770      	bx	lr
{
   1867e:	b570      	push	{r4, r5, r6, lr}
		uint32_t head = tx_head;
   18680:	4b1e      	ldr	r3, [pc, #120]	; (186fc <usb_midi_flush_output+0x8c>)
   18682:	781d      	ldrb	r5, [r3, #0]
		transfer_t *xfer = tx_transfer + head;
   18684:	4e1e      	ldr	r6, [pc, #120]	; (18700 <usb_midi_flush_output+0x90>)
   18686:	eb06 1645 	add.w	r6, r6, r5, lsl #5
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   1868a:	4c1e      	ldr	r4, [pc, #120]	; (18704 <usb_midi_flush_output+0x94>)
   1868c:	eb04 2445 	add.w	r4, r4, r5, lsl #9
		uint32_t len = tx_packet_size - tx_available;
   18690:	4b1d      	ldr	r3, [pc, #116]	; (18708 <usb_midi_flush_output+0x98>)
   18692:	881a      	ldrh	r2, [r3, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
   18694:	2300      	movs	r3, #0
   18696:	1a12      	subs	r2, r2, r0
   18698:	4621      	mov	r1, r4
   1869a:	4630      	mov	r0, r6
   1869c:	f7ff fe6e 	bl	1837c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   186a0:	4623      	mov	r3, r4
	asm("dsb");
   186a2:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
   186a6:	f504 7200 	add.w	r2, r4, #512	; 0x200
   186aa:	f104 0120 	add.w	r1, r4, #32
   186ae:	428a      	cmp	r2, r1
   186b0:	bf34      	ite	cc
   186b2:	2201      	movcc	r2, #1
   186b4:	2210      	movcs	r2, #16
   186b6:	eb04 1242 	add.w	r2, r4, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
   186ba:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   186be:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
   186c2:	3320      	adds	r3, #32
	} while (location < end_addr);
   186c4:	4293      	cmp	r3, r2
   186c6:	d1fa      	bne.n	186be <usb_midi_flush_output+0x4e>
	asm("dsb");
   186c8:	f3bf 8f4f 	dsb	sy
	asm("isb");
   186cc:	f3bf 8f6f 	isb	sy
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
   186d0:	4631      	mov	r1, r6
   186d2:	2004      	movs	r0, #4
   186d4:	f7ff fe6a 	bl	183ac <usb_transmit>
		if (++head >= TX_NUM) head = 0;
   186d8:	1c6b      	adds	r3, r5, #1
   186da:	2b04      	cmp	r3, #4
   186dc:	bf28      	it	cs
   186de:	2300      	movcs	r3, #0
		tx_head = head;
   186e0:	4a06      	ldr	r2, [pc, #24]	; (186fc <usb_midi_flush_output+0x8c>)
   186e2:	7013      	strb	r3, [r2, #0]
		tx_available = 0;
   186e4:	4b04      	ldr	r3, [pc, #16]	; (186f8 <usb_midi_flush_output+0x88>)
   186e6:	2200      	movs	r2, #0
   186e8:	801a      	strh	r2, [r3, #0]
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   186ea:	2002      	movs	r0, #2
   186ec:	f7ff fba0 	bl	17e30 <usb_stop_sof_interrupts>
}
   186f0:	bd70      	pop	{r4, r5, r6, pc}
   186f2:	bf00      	nop
   186f4:	20008c3c 	.word	0x20008c3c
   186f8:	20008c14 	.word	0x20008c14
   186fc:	20008c3a 	.word	0x20008c3a
   18700:	20006560 	.word	0x20006560
   18704:	20205180 	.word	0x20205180
   18708:	20008c18 	.word	0x20008c18

0001870c <usb_midi_read_message>:
{
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
   1870c:	b570      	push	{r4, r5, r6, lr}
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   1870e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18712:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18716:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
   1871a:	4b19      	ldr	r3, [pc, #100]	; (18780 <usb_midi_read_message+0x74>)
   1871c:	781b      	ldrb	r3, [r3, #0]
   1871e:	b2db      	uxtb	r3, r3
	if (tail != rx_head) {
   18720:	4a18      	ldr	r2, [pc, #96]	; (18784 <usb_midi_read_message+0x78>)
   18722:	7812      	ldrb	r2, [r2, #0]
   18724:	b2d2      	uxtb	r2, r2
   18726:	4293      	cmp	r3, r2
   18728:	d027      	beq.n	1877a <usb_midi_read_message+0x6e>
		if (++tail > RX_NUM) tail = 0;
   1872a:	3301      	adds	r3, #1
   1872c:	2b07      	cmp	r3, #7
   1872e:	bf28      	it	cs
   18730:	2300      	movcs	r3, #0
		uint32_t i = rx_list[tail];
   18732:	4a15      	ldr	r2, [pc, #84]	; (18788 <usb_midi_read_message+0x7c>)
   18734:	5cd0      	ldrb	r0, [r2, r3]
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   18736:	4d15      	ldr	r5, [pc, #84]	; (1878c <usb_midi_read_message+0x80>)
   18738:	f835 2010 	ldrh.w	r2, [r5, r0, lsl #1]
		n = *(uint32_t *)p;
   1873c:	4914      	ldr	r1, [pc, #80]	; (18790 <usb_midi_read_message+0x84>)
   1873e:	eb01 2140 	add.w	r1, r1, r0, lsl #9
   18742:	588c      	ldr	r4, [r1, r2]
		rx_available -= 4;
   18744:	4e13      	ldr	r6, [pc, #76]	; (18794 <usb_midi_read_message+0x88>)
   18746:	6831      	ldr	r1, [r6, #0]
   18748:	3904      	subs	r1, #4
   1874a:	6031      	str	r1, [r6, #0]
		rx_index[i] += 4;
   1874c:	3204      	adds	r2, #4
   1874e:	b292      	uxth	r2, r2
   18750:	f825 2010 	strh.w	r2, [r5, r0, lsl #1]
		if (rx_index[i] >= rx_count[i]) {
   18754:	4910      	ldr	r1, [pc, #64]	; (18798 <usb_midi_read_message+0x8c>)
   18756:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
   1875a:	4291      	cmp	r1, r2
   1875c:	d907      	bls.n	1876e <usb_midi_read_message+0x62>
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1875e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18762:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18766:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	return n;
}
   1876a:	4620      	mov	r0, r4
   1876c:	bd70      	pop	{r4, r5, r6, pc}
			rx_tail = tail;
   1876e:	b2db      	uxtb	r3, r3
   18770:	4a03      	ldr	r2, [pc, #12]	; (18780 <usb_midi_read_message+0x74>)
   18772:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
   18774:	f7ff feb2 	bl	184dc <rx_queue_transfer>
   18778:	e7f1      	b.n	1875e <usb_midi_read_message+0x52>
	uint32_t n = 0;
   1877a:	2400      	movs	r4, #0
   1877c:	e7ef      	b.n	1875e <usb_midi_read_message+0x52>
   1877e:	bf00      	nop
   18780:	20008c31 	.word	0x20008c31
   18784:	20008c2f 	.word	0x20008c2f
   18788:	20008520 	.word	0x20008520
   1878c:	20008504 	.word	0x20008504
   18790:	20204580 	.word	0x20204580
   18794:	200084e0 	.word	0x200084e0
   18798:	200084e8 	.word	0x200084e8

0001879c <usb_midi_read>:

int usb_midi_read(uint32_t channel)
{
   1879c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187a0:	4606      	mov	r6, r0
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
   187a2:	f7ff ffb3 	bl	1870c <usb_midi_read_message>
	if (n == 0) return 0;
   187a6:	2800      	cmp	r0, #0
   187a8:	f000 81bb 	beq.w	18b22 <usb_midi_read+0x386>
   187ac:	4604      	mov	r4, r0
	type1 = n & 15;
   187ae:	f000 050f 	and.w	r5, r0, #15
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
   187b2:	ea4f 2810 	mov.w	r8, r0, lsr #8
	ch = (b1 & 15) + 1;
   187b6:	f3c0 2703 	ubfx	r7, r0, #8, #4
   187ba:	3701      	adds	r7, #1
	usb_midi_msg_cable = (n >> 4) & 15;
   187bc:	f3c0 1303 	ubfx	r3, r0, #4, #4
   187c0:	4a92      	ldr	r2, [pc, #584]	; (18a0c <usb_midi_read+0x270>)
   187c2:	7013      	strb	r3, [r2, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
   187c4:	f1a5 0308 	sub.w	r3, r5, #8
   187c8:	2b06      	cmp	r3, #6
   187ca:	f200 8095 	bhi.w	188f8 <usb_midi_read+0x15c>
		if (channel && channel != ch) {
   187ce:	b11e      	cbz	r6, 187d8 <usb_midi_read+0x3c>
   187d0:	42b7      	cmp	r7, r6
   187d2:	d001      	beq.n	187d8 <usb_midi_read+0x3c>
			// ignore other channels when user wants single channel read
			return 0;
   187d4:	2000      	movs	r0, #0
   187d6:	e0cd      	b.n	18974 <usb_midi_read+0x1d8>
	type2 = (n >> 12) & 15;
   187d8:	f3c4 3303 	ubfx	r3, r4, #12, #4
		}
		if (type1 == 0x08 && type2 == 0x08) {
   187dc:	2d08      	cmp	r5, #8
   187de:	d10f      	bne.n	18800 <usb_midi_read+0x64>
   187e0:	2b08      	cmp	r3, #8
   187e2:	d10d      	bne.n	18800 <usb_midi_read+0x64>
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   187e4:	4b8a      	ldr	r3, [pc, #552]	; (18a10 <usb_midi_read+0x274>)
   187e6:	2280      	movs	r2, #128	; 0x80
   187e8:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handleNoteOff)
   187ea:	4b8a      	ldr	r3, [pc, #552]	; (18a14 <usb_midi_read+0x278>)
   187ec:	681b      	ldr	r3, [r3, #0]
   187ee:	2b00      	cmp	r3, #0
   187f0:	f000 80b7 	beq.w	18962 <usb_midi_read+0x1c6>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   187f4:	0e22      	lsrs	r2, r4, #24
   187f6:	f3c4 4107 	ubfx	r1, r4, #16, #8
   187fa:	b2f8      	uxtb	r0, r7
   187fc:	4798      	blx	r3
   187fe:	e0b0      	b.n	18962 <usb_midi_read+0x1c6>
		} else
		if (type1 == 0x09 && type2 == 0x09) {
   18800:	2d09      	cmp	r5, #9
   18802:	d11e      	bne.n	18842 <usb_midi_read+0xa6>
   18804:	2b09      	cmp	r3, #9
   18806:	d11c      	bne.n	18842 <usb_midi_read+0xa6>
			if ((n >> 24) > 0) {
   18808:	0e22      	lsrs	r2, r4, #24
   1880a:	d00c      	beq.n	18826 <usb_midi_read+0x8a>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   1880c:	4b80      	ldr	r3, [pc, #512]	; (18a10 <usb_midi_read+0x274>)
   1880e:	2190      	movs	r1, #144	; 0x90
   18810:	7019      	strb	r1, [r3, #0]
				if (usb_midi_handleNoteOn)
   18812:	4b81      	ldr	r3, [pc, #516]	; (18a18 <usb_midi_read+0x27c>)
   18814:	681b      	ldr	r3, [r3, #0]
   18816:	2b00      	cmp	r3, #0
   18818:	f000 80a3 	beq.w	18962 <usb_midi_read+0x1c6>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   1881c:	f3c4 4107 	ubfx	r1, r4, #16, #8
   18820:	b2f8      	uxtb	r0, r7
   18822:	4798      	blx	r3
   18824:	e09d      	b.n	18962 <usb_midi_read+0x1c6>
			} else {
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   18826:	4b7a      	ldr	r3, [pc, #488]	; (18a10 <usb_midi_read+0x274>)
   18828:	2280      	movs	r2, #128	; 0x80
   1882a:	701a      	strb	r2, [r3, #0]
				if (usb_midi_handleNoteOff)
   1882c:	4b79      	ldr	r3, [pc, #484]	; (18a14 <usb_midi_read+0x278>)
   1882e:	681b      	ldr	r3, [r3, #0]
   18830:	2b00      	cmp	r3, #0
   18832:	f000 8096 	beq.w	18962 <usb_midi_read+0x1c6>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   18836:	2200      	movs	r2, #0
   18838:	f3c4 4107 	ubfx	r1, r4, #16, #8
   1883c:	b2f8      	uxtb	r0, r7
   1883e:	4798      	blx	r3
   18840:	e08f      	b.n	18962 <usb_midi_read+0x1c6>
			}
		} else
		if (type1 == 0x0A && type2 == 0x0A) {
   18842:	2d0a      	cmp	r5, #10
   18844:	d10f      	bne.n	18866 <usb_midi_read+0xca>
   18846:	2b0a      	cmp	r3, #10
   18848:	d10d      	bne.n	18866 <usb_midi_read+0xca>
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   1884a:	4b71      	ldr	r3, [pc, #452]	; (18a10 <usb_midi_read+0x274>)
   1884c:	22a0      	movs	r2, #160	; 0xa0
   1884e:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handleVelocityChange)
   18850:	4b72      	ldr	r3, [pc, #456]	; (18a1c <usb_midi_read+0x280>)
   18852:	681b      	ldr	r3, [r3, #0]
   18854:	2b00      	cmp	r3, #0
   18856:	f000 8084 	beq.w	18962 <usb_midi_read+0x1c6>
				(*usb_midi_handleVelocityChange)(ch, (n >> 16), (n >> 24));
   1885a:	0e22      	lsrs	r2, r4, #24
   1885c:	f3c4 4107 	ubfx	r1, r4, #16, #8
   18860:	b2f8      	uxtb	r0, r7
   18862:	4798      	blx	r3
   18864:	e07d      	b.n	18962 <usb_midi_read+0x1c6>
		} else
		if (type1 == 0x0B && type2 == 0x0B) {
   18866:	2d0b      	cmp	r5, #11
   18868:	d10e      	bne.n	18888 <usb_midi_read+0xec>
   1886a:	2b0b      	cmp	r3, #11
   1886c:	d10c      	bne.n	18888 <usb_midi_read+0xec>
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   1886e:	4b68      	ldr	r3, [pc, #416]	; (18a10 <usb_midi_read+0x274>)
   18870:	22b0      	movs	r2, #176	; 0xb0
   18872:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handleControlChange)
   18874:	4b6a      	ldr	r3, [pc, #424]	; (18a20 <usb_midi_read+0x284>)
   18876:	681b      	ldr	r3, [r3, #0]
   18878:	2b00      	cmp	r3, #0
   1887a:	d072      	beq.n	18962 <usb_midi_read+0x1c6>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   1887c:	0e22      	lsrs	r2, r4, #24
   1887e:	f3c4 4107 	ubfx	r1, r4, #16, #8
   18882:	b2f8      	uxtb	r0, r7
   18884:	4798      	blx	r3
   18886:	e06c      	b.n	18962 <usb_midi_read+0x1c6>
		} else
		if (type1 == 0x0C && type2 == 0x0C) {
   18888:	2d0c      	cmp	r5, #12
   1888a:	d10d      	bne.n	188a8 <usb_midi_read+0x10c>
   1888c:	2b0c      	cmp	r3, #12
   1888e:	d10b      	bne.n	188a8 <usb_midi_read+0x10c>
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   18890:	4b5f      	ldr	r3, [pc, #380]	; (18a10 <usb_midi_read+0x274>)
   18892:	22c0      	movs	r2, #192	; 0xc0
   18894:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handleProgramChange)
   18896:	4b63      	ldr	r3, [pc, #396]	; (18a24 <usb_midi_read+0x288>)
   18898:	681b      	ldr	r3, [r3, #0]
   1889a:	2b00      	cmp	r3, #0
   1889c:	d061      	beq.n	18962 <usb_midi_read+0x1c6>
				(*usb_midi_handleProgramChange)(ch, (n >> 16));
   1889e:	f3c4 4107 	ubfx	r1, r4, #16, #8
   188a2:	b2f8      	uxtb	r0, r7
   188a4:	4798      	blx	r3
   188a6:	e05c      	b.n	18962 <usb_midi_read+0x1c6>
		} else
		if (type1 == 0x0D && type2 == 0x0D) {
   188a8:	2d0d      	cmp	r5, #13
   188aa:	d10d      	bne.n	188c8 <usb_midi_read+0x12c>
   188ac:	2b0d      	cmp	r3, #13
   188ae:	d10b      	bne.n	188c8 <usb_midi_read+0x12c>
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   188b0:	4b57      	ldr	r3, [pc, #348]	; (18a10 <usb_midi_read+0x274>)
   188b2:	22d0      	movs	r2, #208	; 0xd0
   188b4:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handleAfterTouch)
   188b6:	4b5c      	ldr	r3, [pc, #368]	; (18a28 <usb_midi_read+0x28c>)
   188b8:	681b      	ldr	r3, [r3, #0]
   188ba:	2b00      	cmp	r3, #0
   188bc:	d051      	beq.n	18962 <usb_midi_read+0x1c6>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   188be:	f3c4 4107 	ubfx	r1, r4, #16, #8
   188c2:	b2f8      	uxtb	r0, r7
   188c4:	4798      	blx	r3
   188c6:	e04c      	b.n	18962 <usb_midi_read+0x1c6>
		} else
		if (type1 == 0x0E && type2 == 0x0E) {
   188c8:	2d0e      	cmp	r5, #14
   188ca:	f040 812c 	bne.w	18b26 <usb_midi_read+0x38a>
   188ce:	2b0e      	cmp	r3, #14
   188d0:	f040 8129 	bne.w	18b26 <usb_midi_read+0x38a>
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   188d4:	4b4e      	ldr	r3, [pc, #312]	; (18a10 <usb_midi_read+0x274>)
   188d6:	22e0      	movs	r2, #224	; 0xe0
   188d8:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handlePitchChange) {
   188da:	4b54      	ldr	r3, [pc, #336]	; (18a2c <usb_midi_read+0x290>)
   188dc:	681b      	ldr	r3, [r3, #0]
   188de:	2b00      	cmp	r3, #0
   188e0:	d03f      	beq.n	18962 <usb_midi_read+0x1c6>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   188e2:	f3c4 4106 	ubfx	r1, r4, #16, #7
   188e6:	0c62      	lsrs	r2, r4, #17
   188e8:	f402 527e 	and.w	r2, r2, #16256	; 0x3f80
   188ec:	4311      	orrs	r1, r2
				value -= 8192; // 0 to 16383 --> -8192 to +8191
				(*usb_midi_handlePitchChange)(ch, value);
   188ee:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
   188f2:	b2f8      	uxtb	r0, r7
   188f4:	4798      	blx	r3
   188f6:	e034      	b.n	18962 <usb_midi_read+0x1c6>
	b1 = (n >> 8) & 0xFF;
   188f8:	fa5f f388 	uxtb.w	r3, r8
		usb_midi_msg_channel = ch;
		usb_midi_msg_data1 = (n >> 16);
		usb_midi_msg_data2 = (n >> 24);
		return 1;
	}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   188fc:	1eaa      	subs	r2, r5, #2
   188fe:	2a01      	cmp	r2, #1
   18900:	d911      	bls.n	18926 <usb_midi_read+0x18a>
   18902:	2bf7      	cmp	r3, #247	; 0xf7
   18904:	bf18      	it	ne
   18906:	2bf0      	cmpne	r3, #240	; 0xf0
   18908:	d901      	bls.n	1890e <usb_midi_read+0x172>
   1890a:	2d05      	cmp	r5, #5
   1890c:	d00b      	beq.n	18926 <usb_midi_read+0x18a>
			return 0; // unknown message, ignore it
		}
		usb_midi_msg_type = b1;
		goto return_message;
	}
	if (type1 == 0x04) {
   1890e:	2d04      	cmp	r5, #4
   18910:	f000 80c0 	beq.w	18a94 <usb_midi_read+0x2f8>
		sysex_byte(n >> 8);
		sysex_byte(n >> 16);
		sysex_byte(n >> 24);
		return 0;
	}
	if (type1 >= 0x05 && type1 <= 0x07) {
   18914:	1f6a      	subs	r2, r5, #5
   18916:	2a02      	cmp	r2, #2
   18918:	f240 80c9 	bls.w	18aae <usb_midi_read+0x312>
		} else if (usb_midi_handleSysExComplete) {
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
		}
		return 1;
	}
	if (type1 == 0x0F) {
   1891c:	2d0f      	cmp	r5, #15
   1891e:	f000 80f2 	beq.w	18b06 <usb_midi_read+0x36a>
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
   18922:	2000      	movs	r0, #0
   18924:	e026      	b.n	18974 <usb_midi_read+0x1d8>
		switch (b1) {
   18926:	3bf1      	subs	r3, #241	; 0xf1
   18928:	2b0e      	cmp	r3, #14
   1892a:	f200 80fe 	bhi.w	18b2a <usb_midi_read+0x38e>
   1892e:	e8df f013 	tbh	[pc, r3, lsl #1]
   18932:	000f      	.short	0x000f
   18934:	002f0023 	.word	0x002f0023
   18938:	00fc00fc 	.word	0x00fc00fc
   1893c:	00fc0037 	.word	0x00fc0037
   18940:	00fc003d 	.word	0x00fc003d
   18944:	00550049 	.word	0x00550049
   18948:	00fc0061 	.word	0x00fc0061
   1894c:	00a40097 	.word	0x00a40097
			if (usb_midi_handleTimeCodeQuarterFrame) {
   18950:	4b37      	ldr	r3, [pc, #220]	; (18a30 <usb_midi_read+0x294>)
   18952:	681b      	ldr	r3, [r3, #0]
   18954:	b113      	cbz	r3, 1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
   18956:	f3c4 4007 	ubfx	r0, r4, #16, #8
   1895a:	4798      	blx	r3
		usb_midi_msg_type = b1;
   1895c:	4b2c      	ldr	r3, [pc, #176]	; (18a10 <usb_midi_read+0x274>)
   1895e:	f883 8000 	strb.w	r8, [r3]
		usb_midi_msg_channel = ch;
   18962:	4b34      	ldr	r3, [pc, #208]	; (18a34 <usb_midi_read+0x298>)
   18964:	701f      	strb	r7, [r3, #0]
		usb_midi_msg_data1 = (n >> 16);
   18966:	0c22      	lsrs	r2, r4, #16
   18968:	4b33      	ldr	r3, [pc, #204]	; (18a38 <usb_midi_read+0x29c>)
   1896a:	701a      	strb	r2, [r3, #0]
		usb_midi_msg_data2 = (n >> 24);
   1896c:	0e24      	lsrs	r4, r4, #24
   1896e:	4b33      	ldr	r3, [pc, #204]	; (18a3c <usb_midi_read+0x2a0>)
   18970:	701c      	strb	r4, [r3, #0]
		return 1;
   18972:	2001      	movs	r0, #1
}
   18974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (usb_midi_handleSongPosition) {
   18978:	4b31      	ldr	r3, [pc, #196]	; (18a40 <usb_midi_read+0x2a4>)
   1897a:	681a      	ldr	r2, [r3, #0]
   1897c:	2a00      	cmp	r2, #0
   1897e:	d0ed      	beq.n	1895c <usb_midi_read+0x1c0>
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
   18980:	f3c4 4006 	ubfx	r0, r4, #16, #7
   18984:	0c63      	lsrs	r3, r4, #17
   18986:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
				(*usb_midi_handleSongPosition)(
   1898a:	4318      	orrs	r0, r3
   1898c:	4790      	blx	r2
   1898e:	e7e5      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleSongSelect) {
   18990:	4b2c      	ldr	r3, [pc, #176]	; (18a44 <usb_midi_read+0x2a8>)
   18992:	681b      	ldr	r3, [r3, #0]
   18994:	2b00      	cmp	r3, #0
   18996:	d0e1      	beq.n	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleSongSelect)(n >> 16);
   18998:	f3c4 4007 	ubfx	r0, r4, #16, #8
   1899c:	4798      	blx	r3
   1899e:	e7dd      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleTuneRequest) {
   189a0:	4b29      	ldr	r3, [pc, #164]	; (18a48 <usb_midi_read+0x2ac>)
   189a2:	681b      	ldr	r3, [r3, #0]
   189a4:	2b00      	cmp	r3, #0
   189a6:	d0d9      	beq.n	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleTuneRequest)();
   189a8:	4798      	blx	r3
   189aa:	e7d7      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleClock) {
   189ac:	4b27      	ldr	r3, [pc, #156]	; (18a4c <usb_midi_read+0x2b0>)
   189ae:	681b      	ldr	r3, [r3, #0]
   189b0:	b10b      	cbz	r3, 189b6 <usb_midi_read+0x21a>
				(*usb_midi_handleClock)();
   189b2:	4798      	blx	r3
   189b4:	e7d2      	b.n	1895c <usb_midi_read+0x1c0>
			} else if (usb_midi_handleRealTimeSystem) {
   189b6:	4b26      	ldr	r3, [pc, #152]	; (18a50 <usb_midi_read+0x2b4>)
   189b8:	681b      	ldr	r3, [r3, #0]
   189ba:	2b00      	cmp	r3, #0
   189bc:	d0ce      	beq.n	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleRealTimeSystem)(0xF8);
   189be:	20f8      	movs	r0, #248	; 0xf8
   189c0:	4798      	blx	r3
   189c2:	e7cb      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleStart) {
   189c4:	4b23      	ldr	r3, [pc, #140]	; (18a54 <usb_midi_read+0x2b8>)
   189c6:	681b      	ldr	r3, [r3, #0]
   189c8:	b10b      	cbz	r3, 189ce <usb_midi_read+0x232>
				(*usb_midi_handleStart)();
   189ca:	4798      	blx	r3
   189cc:	e7c6      	b.n	1895c <usb_midi_read+0x1c0>
			} else if (usb_midi_handleRealTimeSystem) {
   189ce:	4b20      	ldr	r3, [pc, #128]	; (18a50 <usb_midi_read+0x2b4>)
   189d0:	681b      	ldr	r3, [r3, #0]
   189d2:	2b00      	cmp	r3, #0
   189d4:	d0c2      	beq.n	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleRealTimeSystem)(0xFA);
   189d6:	20fa      	movs	r0, #250	; 0xfa
   189d8:	4798      	blx	r3
   189da:	e7bf      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleContinue) {
   189dc:	4b1e      	ldr	r3, [pc, #120]	; (18a58 <usb_midi_read+0x2bc>)
   189de:	681b      	ldr	r3, [r3, #0]
   189e0:	b10b      	cbz	r3, 189e6 <usb_midi_read+0x24a>
				(*usb_midi_handleContinue)();
   189e2:	4798      	blx	r3
   189e4:	e7ba      	b.n	1895c <usb_midi_read+0x1c0>
			} else if (usb_midi_handleRealTimeSystem) {
   189e6:	4b1a      	ldr	r3, [pc, #104]	; (18a50 <usb_midi_read+0x2b4>)
   189e8:	681b      	ldr	r3, [r3, #0]
   189ea:	2b00      	cmp	r3, #0
   189ec:	d0b6      	beq.n	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleRealTimeSystem)(0xFB);
   189ee:	20fb      	movs	r0, #251	; 0xfb
   189f0:	4798      	blx	r3
   189f2:	e7b3      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleStop) {
   189f4:	4b19      	ldr	r3, [pc, #100]	; (18a5c <usb_midi_read+0x2c0>)
   189f6:	681b      	ldr	r3, [r3, #0]
   189f8:	b10b      	cbz	r3, 189fe <usb_midi_read+0x262>
				(*usb_midi_handleStop)();
   189fa:	4798      	blx	r3
   189fc:	e7ae      	b.n	1895c <usb_midi_read+0x1c0>
			} else if (usb_midi_handleRealTimeSystem) {
   189fe:	4b14      	ldr	r3, [pc, #80]	; (18a50 <usb_midi_read+0x2b4>)
   18a00:	681b      	ldr	r3, [r3, #0]
   18a02:	2b00      	cmp	r3, #0
   18a04:	d0aa      	beq.n	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleRealTimeSystem)(0xFC);
   18a06:	20fc      	movs	r0, #252	; 0xfc
   18a08:	4798      	blx	r3
   18a0a:	e7a7      	b.n	1895c <usb_midi_read+0x1c0>
   18a0c:	20008c42 	.word	0x20008c42
   18a10:	20008c46 	.word	0x20008c46
   18a14:	20008a98 	.word	0x20008a98
   18a18:	20008a9c 	.word	0x20008a9c
   18a1c:	20008ad0 	.word	0x20008ad0
   18a20:	20008a94 	.word	0x20008a94
   18a24:	20008aa4 	.word	0x20008aa4
   18a28:	20008a88 	.word	0x20008a88
   18a2c:	20008aa0 	.word	0x20008aa0
   18a30:	20008ac8 	.word	0x20008ac8
   18a34:	20008c43 	.word	0x20008c43
   18a38:	20008c44 	.word	0x20008c44
   18a3c:	20008c45 	.word	0x20008c45
   18a40:	20008aac 	.word	0x20008aac
   18a44:	20008ab0 	.word	0x20008ab0
   18a48:	20008acc 	.word	0x20008acc
   18a4c:	20008a8c 	.word	0x20008a8c
   18a50:	20008aa8 	.word	0x20008aa8
   18a54:	20008ab4 	.word	0x20008ab4
   18a58:	20008a90 	.word	0x20008a90
   18a5c:	20008ab8 	.word	0x20008ab8
			if (usb_midi_handleActiveSensing) {
   18a60:	4b35      	ldr	r3, [pc, #212]	; (18b38 <usb_midi_read+0x39c>)
   18a62:	681b      	ldr	r3, [r3, #0]
   18a64:	b10b      	cbz	r3, 18a6a <usb_midi_read+0x2ce>
				(*usb_midi_handleActiveSensing)();
   18a66:	4798      	blx	r3
   18a68:	e778      	b.n	1895c <usb_midi_read+0x1c0>
			} else if (usb_midi_handleRealTimeSystem) {
   18a6a:	4b34      	ldr	r3, [pc, #208]	; (18b3c <usb_midi_read+0x3a0>)
   18a6c:	681b      	ldr	r3, [r3, #0]
   18a6e:	2b00      	cmp	r3, #0
   18a70:	f43f af74 	beq.w	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleRealTimeSystem)(0xFE);
   18a74:	20fe      	movs	r0, #254	; 0xfe
   18a76:	4798      	blx	r3
   18a78:	e770      	b.n	1895c <usb_midi_read+0x1c0>
			if (usb_midi_handleSystemReset) {
   18a7a:	4b31      	ldr	r3, [pc, #196]	; (18b40 <usb_midi_read+0x3a4>)
   18a7c:	681b      	ldr	r3, [r3, #0]
   18a7e:	b10b      	cbz	r3, 18a84 <usb_midi_read+0x2e8>
				(*usb_midi_handleSystemReset)();
   18a80:	4798      	blx	r3
   18a82:	e76b      	b.n	1895c <usb_midi_read+0x1c0>
			} else if (usb_midi_handleRealTimeSystem) {
   18a84:	4b2d      	ldr	r3, [pc, #180]	; (18b3c <usb_midi_read+0x3a0>)
   18a86:	681b      	ldr	r3, [r3, #0]
   18a88:	2b00      	cmp	r3, #0
   18a8a:	f43f af67 	beq.w	1895c <usb_midi_read+0x1c0>
				(*usb_midi_handleRealTimeSystem)(0xFF);
   18a8e:	20ff      	movs	r0, #255	; 0xff
   18a90:	4798      	blx	r3
   18a92:	e763      	b.n	1895c <usb_midi_read+0x1c0>
		sysex_byte(n >> 8);
   18a94:	fa5f f088 	uxtb.w	r0, r8
   18a98:	f7ff fcfc 	bl	18494 <sysex_byte>
		sysex_byte(n >> 16);
   18a9c:	f3c4 4007 	ubfx	r0, r4, #16, #8
   18aa0:	f7ff fcf8 	bl	18494 <sysex_byte>
		sysex_byte(n >> 24);
   18aa4:	0e20      	lsrs	r0, r4, #24
   18aa6:	f7ff fcf5 	bl	18494 <sysex_byte>
		return 0;
   18aaa:	2000      	movs	r0, #0
   18aac:	e762      	b.n	18974 <usb_midi_read+0x1d8>
		sysex_byte(b1);
   18aae:	fa5f f088 	uxtb.w	r0, r8
   18ab2:	f7ff fcef 	bl	18494 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   18ab6:	2d05      	cmp	r5, #5
   18ab8:	d815      	bhi.n	18ae6 <usb_midi_read+0x34a>
		if (type1 == 0x07) sysex_byte(n >> 24);
   18aba:	2d07      	cmp	r5, #7
   18abc:	d018      	beq.n	18af0 <usb_midi_read+0x354>
		uint16_t len = usb_midi_msg_sysex_len;
   18abe:	4b21      	ldr	r3, [pc, #132]	; (18b44 <usb_midi_read+0x3a8>)
   18ac0:	8819      	ldrh	r1, [r3, #0]
		usb_midi_msg_data1 = len;
   18ac2:	4a21      	ldr	r2, [pc, #132]	; (18b48 <usb_midi_read+0x3ac>)
   18ac4:	7011      	strb	r1, [r2, #0]
		usb_midi_msg_data2 = len >> 8;
   18ac6:	0a08      	lsrs	r0, r1, #8
   18ac8:	4a20      	ldr	r2, [pc, #128]	; (18b4c <usb_midi_read+0x3b0>)
   18aca:	7010      	strb	r0, [r2, #0]
		usb_midi_msg_sysex_len = 0;
   18acc:	2200      	movs	r2, #0
   18ace:	801a      	strh	r2, [r3, #0]
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   18ad0:	4b1f      	ldr	r3, [pc, #124]	; (18b50 <usb_midi_read+0x3b4>)
   18ad2:	22f0      	movs	r2, #240	; 0xf0
   18ad4:	701a      	strb	r2, [r3, #0]
		if (usb_midi_handleSysExPartial) {
   18ad6:	4b1f      	ldr	r3, [pc, #124]	; (18b54 <usb_midi_read+0x3b8>)
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	b16b      	cbz	r3, 18af8 <usb_midi_read+0x35c>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
   18adc:	2201      	movs	r2, #1
   18ade:	481e      	ldr	r0, [pc, #120]	; (18b58 <usb_midi_read+0x3bc>)
   18ae0:	4798      	blx	r3
		return 1;
   18ae2:	2001      	movs	r0, #1
   18ae4:	e746      	b.n	18974 <usb_midi_read+0x1d8>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   18ae6:	f3c4 4007 	ubfx	r0, r4, #16, #8
   18aea:	f7ff fcd3 	bl	18494 <sysex_byte>
   18aee:	e7e4      	b.n	18aba <usb_midi_read+0x31e>
		if (type1 == 0x07) sysex_byte(n >> 24);
   18af0:	0e20      	lsrs	r0, r4, #24
   18af2:	f7ff fccf 	bl	18494 <sysex_byte>
   18af6:	e7e2      	b.n	18abe <usb_midi_read+0x322>
		} else if (usb_midi_handleSysExComplete) {
   18af8:	4b18      	ldr	r3, [pc, #96]	; (18b5c <usb_midi_read+0x3c0>)
   18afa:	681b      	ldr	r3, [r3, #0]
   18afc:	b1bb      	cbz	r3, 18b2e <usb_midi_read+0x392>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
   18afe:	4816      	ldr	r0, [pc, #88]	; (18b58 <usb_midi_read+0x3bc>)
   18b00:	4798      	blx	r3
		return 1;
   18b02:	2001      	movs	r0, #1
   18b04:	e736      	b.n	18974 <usb_midi_read+0x1d8>
		if (b1 >= 0xF8) {
   18b06:	2bf7      	cmp	r3, #247	; 0xf7
   18b08:	f63f af0d 	bhi.w	18926 <usb_midi_read+0x18a>
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
   18b0c:	2bf0      	cmp	r3, #240	; 0xf0
   18b0e:	d002      	beq.n	18b16 <usb_midi_read+0x37a>
   18b10:	4b0c      	ldr	r3, [pc, #48]	; (18b44 <usb_midi_read+0x3a8>)
   18b12:	881b      	ldrh	r3, [r3, #0]
   18b14:	b16b      	cbz	r3, 18b32 <usb_midi_read+0x396>
			sysex_byte(b1);
   18b16:	fa5f f088 	uxtb.w	r0, r8
   18b1a:	f7ff fcbb 	bl	18494 <sysex_byte>
	return 0;
   18b1e:	2000      	movs	r0, #0
   18b20:	e728      	b.n	18974 <usb_midi_read+0x1d8>
	if (n == 0) return 0;
   18b22:	2000      	movs	r0, #0
   18b24:	e726      	b.n	18974 <usb_midi_read+0x1d8>
			return 0;
   18b26:	2000      	movs	r0, #0
   18b28:	e724      	b.n	18974 <usb_midi_read+0x1d8>
		switch (b1) {
   18b2a:	2000      	movs	r0, #0
   18b2c:	e722      	b.n	18974 <usb_midi_read+0x1d8>
		return 1;
   18b2e:	2001      	movs	r0, #1
   18b30:	e720      	b.n	18974 <usb_midi_read+0x1d8>
	return 0;
   18b32:	2000      	movs	r0, #0
   18b34:	e71e      	b.n	18974 <usb_midi_read+0x1d8>
   18b36:	bf00      	nop
   18b38:	20008a84 	.word	0x20008a84
   18b3c:	20008aa8 	.word	0x20008aa8
   18b40:	20008ac4 	.word	0x20008ac4
   18b44:	20008c1c 	.word	0x20008c1c
   18b48:	20008c44 	.word	0x20008c44
   18b4c:	20008c45 	.word	0x20008c45
   18b50:	20008c46 	.word	0x20008c46
   18b54:	20008ac0 	.word	0x20008ac0
   18b58:	20008ad4 	.word	0x20008ad4
   18b5c:	20008abc 	.word	0x20008abc

00018b60 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   18b60:	4b20      	ldr	r3, [pc, #128]	; (18be4 <usb_serial_flush_callback+0x84>)
   18b62:	781b      	ldrb	r3, [r3, #0]
   18b64:	2b00      	cmp	r3, #0
   18b66:	d13b      	bne.n	18be0 <usb_serial_flush_callback+0x80>
	if (!usb_configuration) return;
   18b68:	4b1f      	ldr	r3, [pc, #124]	; (18be8 <usb_serial_flush_callback+0x88>)
   18b6a:	781b      	ldrb	r3, [r3, #0]
   18b6c:	2b00      	cmp	r3, #0
   18b6e:	d037      	beq.n	18be0 <usb_serial_flush_callback+0x80>
{
   18b70:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
   18b72:	4b1e      	ldr	r3, [pc, #120]	; (18bec <usb_serial_flush_callback+0x8c>)
   18b74:	881d      	ldrh	r5, [r3, #0]
   18b76:	b905      	cbnz	r5, 18b7a <usb_serial_flush_callback+0x1a>
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
	if (++tx_head >= TX_NUM) tx_head = 0;
	tx_available = 0;
}
   18b78:	bd70      	pop	{r4, r5, r6, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   18b7a:	4a1d      	ldr	r2, [pc, #116]	; (18bf0 <usb_serial_flush_callback+0x90>)
   18b7c:	7811      	ldrb	r1, [r2, #0]
   18b7e:	4e1d      	ldr	r6, [pc, #116]	; (18bf4 <usb_serial_flush_callback+0x94>)
   18b80:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   18b84:	4c1c      	ldr	r4, [pc, #112]	; (18bf8 <usb_serial_flush_callback+0x98>)
   18b86:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
   18b8a:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   18b8e:	2300      	movs	r3, #0
   18b90:	462a      	mov	r2, r5
   18b92:	4621      	mov	r1, r4
   18b94:	4630      	mov	r0, r6
   18b96:	f7ff fbf1 	bl	1837c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   18b9a:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
   18b9c:	1962      	adds	r2, r4, r5
	asm("dsb");
   18b9e:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   18ba2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   18ba6:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
   18baa:	3320      	adds	r3, #32
	} while (location < end_addr);
   18bac:	429a      	cmp	r2, r3
   18bae:	d8fa      	bhi.n	18ba6 <usb_serial_flush_callback+0x46>
	asm("dsb");
   18bb0:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18bb4:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   18bb8:	4631      	mov	r1, r6
   18bba:	2003      	movs	r0, #3
   18bbc:	f7ff fbf6 	bl	183ac <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   18bc0:	4b0b      	ldr	r3, [pc, #44]	; (18bf0 <usb_serial_flush_callback+0x90>)
   18bc2:	781b      	ldrb	r3, [r3, #0]
   18bc4:	3301      	adds	r3, #1
   18bc6:	b2db      	uxtb	r3, r3
   18bc8:	2b03      	cmp	r3, #3
   18bca:	d805      	bhi.n	18bd8 <usb_serial_flush_callback+0x78>
   18bcc:	4a08      	ldr	r2, [pc, #32]	; (18bf0 <usb_serial_flush_callback+0x90>)
   18bce:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
   18bd0:	4b06      	ldr	r3, [pc, #24]	; (18bec <usb_serial_flush_callback+0x8c>)
   18bd2:	2200      	movs	r2, #0
   18bd4:	801a      	strh	r2, [r3, #0]
   18bd6:	e7cf      	b.n	18b78 <usb_serial_flush_callback+0x18>
	if (++tx_head >= TX_NUM) tx_head = 0;
   18bd8:	4b05      	ldr	r3, [pc, #20]	; (18bf0 <usb_serial_flush_callback+0x90>)
   18bda:	2200      	movs	r2, #0
   18bdc:	701a      	strb	r2, [r3, #0]
   18bde:	e7f7      	b.n	18bd0 <usb_serial_flush_callback+0x70>
   18be0:	4770      	bx	lr
   18be2:	bf00      	nop
   18be4:	20008c3d 	.word	0x20008c3d
   18be8:	20008c40 	.word	0x20008c40
   18bec:	20008c16 	.word	0x20008c16
   18bf0:	20008c3b 	.word	0x20008c3b
   18bf4:	200065e0 	.word	0x200065e0
   18bf8:	20206980 	.word	0x20206980

00018bfc <rx_queue_transfer>:
{
   18bfc:	b570      	push	{r4, r5, r6, lr}
   18bfe:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   18c00:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   18c04:	f44f 3100 	mov.w	r1, #131072	; 0x20000
   18c08:	f8c2 118c 	str.w	r1, [r2, #396]	; 0x18c
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   18c0c:	4c13      	ldr	r4, [pc, #76]	; (18c5c <rx_queue_transfer+0x60>)
   18c0e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   18c12:	4d13      	ldr	r5, [pc, #76]	; (18c60 <rx_queue_transfer+0x64>)
   18c14:	eb05 1540 	add.w	r5, r5, r0, lsl #5
   18c18:	4e12      	ldr	r6, [pc, #72]	; (18c64 <rx_queue_transfer+0x68>)
   18c1a:	8832      	ldrh	r2, [r6, #0]
   18c1c:	4621      	mov	r1, r4
   18c1e:	4628      	mov	r0, r5
   18c20:	f7ff fbac 	bl	1837c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   18c24:	4623      	mov	r3, r4
	arm_dcache_delete(buffer, rx_packet_size);
   18c26:	8832      	ldrh	r2, [r6, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   18c28:	4422      	add	r2, r4
	asm("dsb");
   18c2a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   18c2e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   18c32:	f8c0 3f5c 	str.w	r3, [r0, #3932]	; 0xf5c
		location += 32;
   18c36:	3320      	adds	r3, #32
	} while (location < end_addr);
   18c38:	429a      	cmp	r2, r3
   18c3a:	d8fa      	bhi.n	18c32 <rx_queue_transfer+0x36>
	asm("dsb");
   18c3c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18c40:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   18c44:	4629      	mov	r1, r5
   18c46:	2003      	movs	r0, #3
   18c48:	f7ff fbc4 	bl	183d4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   18c4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18c50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18c54:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   18c58:	bd70      	pop	{r4, r5, r6, pc}
   18c5a:	bf00      	nop
   18c5c:	20205980 	.word	0x20205980
   18c60:	20006460 	.word	0x20006460
   18c64:	20008c12 	.word	0x20008c12

00018c68 <rx_event>:
{
   18c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   18c6a:	6843      	ldr	r3, [r0, #4]
   18c6c:	4a23      	ldr	r2, [pc, #140]	; (18cfc <rx_event+0x94>)
   18c6e:	8814      	ldrh	r4, [r2, #0]
   18c70:	f3c3 430e 	ubfx	r3, r3, #16, #15
   18c74:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
   18c76:	69c5      	ldr	r5, [r0, #28]
	if (len > 0) {
   18c78:	2c00      	cmp	r4, #0
   18c7a:	dd3a      	ble.n	18cf2 <rx_event+0x8a>
		uint32_t head = rx_head;
   18c7c:	4b20      	ldr	r3, [pc, #128]	; (18d00 <rx_event+0x98>)
   18c7e:	781b      	ldrb	r3, [r3, #0]
   18c80:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
   18c82:	4a20      	ldr	r2, [pc, #128]	; (18d04 <rx_event+0x9c>)
   18c84:	7812      	ldrb	r2, [r2, #0]
   18c86:	b2d2      	uxtb	r2, r2
   18c88:	4293      	cmp	r3, r2
   18c8a:	d008      	beq.n	18c9e <rx_event+0x36>
			uint32_t ii = rx_list[head];
   18c8c:	4a1e      	ldr	r2, [pc, #120]	; (18d08 <rx_event+0xa0>)
   18c8e:	5cd7      	ldrb	r7, [r2, r3]
			uint32_t count = rx_count[ii];
   18c90:	4a1e      	ldr	r2, [pc, #120]	; (18d0c <rx_event+0xa4>)
   18c92:	f832 6017 	ldrh.w	r6, [r2, r7, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   18c96:	f5c6 7200 	rsb	r2, r6, #512	; 0x200
   18c9a:	4294      	cmp	r4, r2
   18c9c:	d914      	bls.n	18cc8 <rx_event+0x60>
		rx_count[i] = len;
   18c9e:	4a1b      	ldr	r2, [pc, #108]	; (18d0c <rx_event+0xa4>)
   18ca0:	f822 4015 	strh.w	r4, [r2, r5, lsl #1]
		rx_index[i] = 0;
   18ca4:	4a1a      	ldr	r2, [pc, #104]	; (18d10 <rx_event+0xa8>)
   18ca6:	2100      	movs	r1, #0
   18ca8:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   18cac:	3301      	adds	r3, #1
   18cae:	2b09      	cmp	r3, #9
   18cb0:	bf28      	it	cs
   18cb2:	460b      	movcs	r3, r1
		rx_list[head] = i;
   18cb4:	4a14      	ldr	r2, [pc, #80]	; (18d08 <rx_event+0xa0>)
   18cb6:	54d5      	strb	r5, [r2, r3]
		rx_head = head;
   18cb8:	b2db      	uxtb	r3, r3
   18cba:	4a11      	ldr	r2, [pc, #68]	; (18d00 <rx_event+0x98>)
   18cbc:	7013      	strb	r3, [r2, #0]
		rx_available += len;
   18cbe:	4b15      	ldr	r3, [pc, #84]	; (18d14 <rx_event+0xac>)
   18cc0:	681a      	ldr	r2, [r3, #0]
   18cc2:	4414      	add	r4, r2
   18cc4:	601c      	str	r4, [r3, #0]
}
   18cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   18cc8:	eb06 2047 	add.w	r0, r6, r7, lsl #9
   18ccc:	4b12      	ldr	r3, [pc, #72]	; (18d18 <rx_event+0xb0>)
   18cce:	4622      	mov	r2, r4
   18cd0:	eb03 2145 	add.w	r1, r3, r5, lsl #9
   18cd4:	4418      	add	r0, r3
   18cd6:	f7fe fb0b 	bl	172f0 <memcpy>
				rx_count[ii] = count + len;
   18cda:	4426      	add	r6, r4
   18cdc:	4b0b      	ldr	r3, [pc, #44]	; (18d0c <rx_event+0xa4>)
   18cde:	f823 6017 	strh.w	r6, [r3, r7, lsl #1]
				rx_available += len;
   18ce2:	4a0c      	ldr	r2, [pc, #48]	; (18d14 <rx_event+0xac>)
   18ce4:	6813      	ldr	r3, [r2, #0]
   18ce6:	4423      	add	r3, r4
   18ce8:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   18cea:	4628      	mov	r0, r5
   18cec:	f7ff ff86 	bl	18bfc <rx_queue_transfer>
				return;
   18cf0:	e7e9      	b.n	18cc6 <rx_event+0x5e>
		rx_queue_transfer(i);
   18cf2:	4628      	mov	r0, r5
   18cf4:	f7ff ff82 	bl	18bfc <rx_queue_transfer>
   18cf8:	e7e5      	b.n	18cc6 <rx_event+0x5e>
   18cfa:	bf00      	nop
   18cfc:	20008c12 	.word	0x20008c12
   18d00:	20008c30 	.word	0x20008c30
   18d04:	20008c32 	.word	0x20008c32
   18d08:	20008528 	.word	0x20008528
   18d0c:	200084f4 	.word	0x200084f4
   18d10:	20008510 	.word	0x20008510
   18d14:	200084e4 	.word	0x200084e4
   18d18:	20205980 	.word	0x20205980

00018d1c <usb_serial_reset>:
}
   18d1c:	4770      	bx	lr
	...

00018d20 <usb_serial_configure>:
{
   18d20:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   18d22:	4b2e      	ldr	r3, [pc, #184]	; (18ddc <usb_serial_configure+0xbc>)
   18d24:	781b      	ldrb	r3, [r3, #0]
   18d26:	f013 0fff 	tst.w	r3, #255	; 0xff
   18d2a:	bf0c      	ite	eq
   18d2c:	2340      	moveq	r3, #64	; 0x40
   18d2e:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   18d32:	4d2b      	ldr	r5, [pc, #172]	; (18de0 <usb_serial_configure+0xc0>)
   18d34:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   18d36:	4e2b      	ldr	r6, [pc, #172]	; (18de4 <usb_serial_configure+0xc4>)
   18d38:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   18d3a:	2280      	movs	r2, #128	; 0x80
   18d3c:	2100      	movs	r1, #0
   18d3e:	482a      	ldr	r0, [pc, #168]	; (18de8 <usb_serial_configure+0xc8>)
   18d40:	f00a f98a 	bl	23058 <memset>
	tx_head = 0;
   18d44:	2400      	movs	r4, #0
   18d46:	4b29      	ldr	r3, [pc, #164]	; (18dec <usb_serial_configure+0xcc>)
   18d48:	701c      	strb	r4, [r3, #0]
	tx_available = 0;
   18d4a:	4b29      	ldr	r3, [pc, #164]	; (18df0 <usb_serial_configure+0xd0>)
   18d4c:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   18d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
   18d52:	4621      	mov	r1, r4
   18d54:	4827      	ldr	r0, [pc, #156]	; (18df4 <usb_serial_configure+0xd4>)
   18d56:	f00a f97f 	bl	23058 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   18d5a:	4b27      	ldr	r3, [pc, #156]	; (18df8 <usb_serial_configure+0xd8>)
   18d5c:	601c      	str	r4, [r3, #0]
   18d5e:	605c      	str	r4, [r3, #4]
   18d60:	609c      	str	r4, [r3, #8]
   18d62:	60dc      	str	r4, [r3, #12]
	memset(rx_index, 0, sizeof(rx_index));
   18d64:	4b25      	ldr	r3, [pc, #148]	; (18dfc <usb_serial_configure+0xdc>)
   18d66:	601c      	str	r4, [r3, #0]
   18d68:	605c      	str	r4, [r3, #4]
   18d6a:	609c      	str	r4, [r3, #8]
   18d6c:	60dc      	str	r4, [r3, #12]
	rx_head = 0;
   18d6e:	4b24      	ldr	r3, [pc, #144]	; (18e00 <usb_serial_configure+0xe0>)
   18d70:	701c      	strb	r4, [r3, #0]
	rx_tail = 0;
   18d72:	4b24      	ldr	r3, [pc, #144]	; (18e04 <usb_serial_configure+0xe4>)
   18d74:	701c      	strb	r4, [r3, #0]
	rx_available = 0;
   18d76:	4b24      	ldr	r3, [pc, #144]	; (18e08 <usb_serial_configure+0xe8>)
   18d78:	601c      	str	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   18d7a:	4623      	mov	r3, r4
   18d7c:	4622      	mov	r2, r4
   18d7e:	2110      	movs	r1, #16
   18d80:	2002      	movs	r0, #2
   18d82:	f7ff fad7 	bl	18334 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   18d86:	4b21      	ldr	r3, [pc, #132]	; (18e0c <usb_serial_configure+0xec>)
   18d88:	4622      	mov	r2, r4
   18d8a:	8831      	ldrh	r1, [r6, #0]
   18d8c:	2003      	movs	r0, #3
   18d8e:	f7ff faaf 	bl	182f0 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   18d92:	4623      	mov	r3, r4
   18d94:	2201      	movs	r2, #1
   18d96:	8829      	ldrh	r1, [r5, #0]
   18d98:	2003      	movs	r0, #3
   18d9a:	f7ff facb 	bl	18334 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   18d9e:	4620      	mov	r0, r4
   18da0:	f7ff ff2c 	bl	18bfc <rx_queue_transfer>
   18da4:	3401      	adds	r4, #1
   18da6:	2c08      	cmp	r4, #8
   18da8:	d1f9      	bne.n	18d9e <usb_serial_configure+0x7e>
	usb_timer0_callback = callback;
   18daa:	4b19      	ldr	r3, [pc, #100]	; (18e10 <usb_serial_configure+0xf0>)
   18dac:	4a19      	ldr	r2, [pc, #100]	; (18e14 <usb_serial_configure+0xf4>)
   18dae:	601a      	str	r2, [r3, #0]
	USB1_GPTIMER0CTRL = 0;
   18db0:	4b19      	ldr	r3, [pc, #100]	; (18e18 <usb_serial_configure+0xf8>)
   18db2:	2200      	movs	r2, #0
   18db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   18db8:	224a      	movs	r2, #74	; 0x4a
   18dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   18dbe:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   18dc2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   18dc6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
   18dca:	4b14      	ldr	r3, [pc, #80]	; (18e1c <usb_serial_configure+0xfc>)
   18dcc:	b123      	cbz	r3, 18dd8 <usb_serial_configure+0xb8>
   18dce:	4a14      	ldr	r2, [pc, #80]	; (18e20 <usb_serial_configure+0x100>)
   18dd0:	7813      	ldrb	r3, [r2, #0]
   18dd2:	f043 0301 	orr.w	r3, r3, #1
   18dd6:	7013      	strb	r3, [r2, #0]
}
   18dd8:	bd70      	pop	{r4, r5, r6, pc}
   18dda:	bf00      	nop
   18ddc:	20008c41 	.word	0x20008c41
   18de0:	20008c1a 	.word	0x20008c1a
   18de4:	20008c12 	.word	0x20008c12
   18de8:	200065e0 	.word	0x200065e0
   18dec:	20008c3b 	.word	0x20008c3b
   18df0:	20008c16 	.word	0x20008c16
   18df4:	20006460 	.word	0x20006460
   18df8:	200084f4 	.word	0x200084f4
   18dfc:	20008510 	.word	0x20008510
   18e00:	20008c30 	.word	0x20008c30
   18e04:	20008c32 	.word	0x20008c32
   18e08:	200084e4 	.word	0x200084e4
   18e0c:	00018c69 	.word	0x00018c69
   18e10:	20008bf8 	.word	0x20008bf8
   18e14:	00018b61 	.word	0x00018b61
   18e18:	402e0000 	.word	0x402e0000
   18e1c:	00000000 	.word	0x00000000
   18e20:	20008c49 	.word	0x20008c49

00018e24 <usb_serial_read>:
{
   18e24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   18e28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18e2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18e30:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	uint32_t tail = rx_tail;
   18e34:	4b2b      	ldr	r3, [pc, #172]	; (18ee4 <usb_serial_read+0xc0>)
   18e36:	781c      	ldrb	r4, [r3, #0]
	while (count < size && tail != rx_head) {
   18e38:	468a      	mov	sl, r1
   18e3a:	2900      	cmp	r1, #0
   18e3c:	d045      	beq.n	18eca <usb_serial_read+0xa6>
   18e3e:	4681      	mov	r9, r0
   18e40:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   18e42:	2700      	movs	r7, #0
	while (count < size && tail != rx_head) {
   18e44:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 18efc <usb_serial_read+0xd8>
   18e48:	e015      	b.n	18e76 <usb_serial_read+0x52>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   18e4a:	eb01 2146 	add.w	r1, r1, r6, lsl #9
   18e4e:	462a      	mov	r2, r5
   18e50:	4b25      	ldr	r3, [pc, #148]	; (18ee8 <usb_serial_read+0xc4>)
   18e52:	4419      	add	r1, r3
   18e54:	4648      	mov	r0, r9
   18e56:	f7fe fa4b 	bl	172f0 <memcpy>
			p += avail;
   18e5a:	44a9      	add	r9, r5
			rx_available -= avail;
   18e5c:	4a23      	ldr	r2, [pc, #140]	; (18eec <usb_serial_read+0xc8>)
   18e5e:	6813      	ldr	r3, [r2, #0]
   18e60:	1b5b      	subs	r3, r3, r5
   18e62:	6013      	str	r3, [r2, #0]
			count += avail;
   18e64:	442f      	add	r7, r5
			rx_tail = tail;
   18e66:	b2e3      	uxtb	r3, r4
   18e68:	4a1e      	ldr	r2, [pc, #120]	; (18ee4 <usb_serial_read+0xc0>)
   18e6a:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
   18e6c:	4630      	mov	r0, r6
   18e6e:	f7ff fec5 	bl	18bfc <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   18e72:	45ba      	cmp	sl, r7
   18e74:	d934      	bls.n	18ee0 <usb_serial_read+0xbc>
   18e76:	f89b 3000 	ldrb.w	r3, [fp]
   18e7a:	b2db      	uxtb	r3, r3
   18e7c:	42a3      	cmp	r3, r4
   18e7e:	d02d      	beq.n	18edc <usb_serial_read+0xb8>
		if (++tail > RX_NUM) tail = 0;
   18e80:	3401      	adds	r4, #1
   18e82:	2c09      	cmp	r4, #9
   18e84:	bf28      	it	cs
   18e86:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   18e88:	4b19      	ldr	r3, [pc, #100]	; (18ef0 <usb_serial_read+0xcc>)
   18e8a:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t len = size - count;
   18e8c:	ebaa 0807 	sub.w	r8, sl, r7
		uint32_t avail = rx_count[i] - rx_index[i];
   18e90:	4b18      	ldr	r3, [pc, #96]	; (18ef4 <usb_serial_read+0xd0>)
   18e92:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
   18e96:	4b18      	ldr	r3, [pc, #96]	; (18ef8 <usb_serial_read+0xd4>)
   18e98:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   18e9c:	1a6d      	subs	r5, r5, r1
		if (avail > len) {
   18e9e:	45a8      	cmp	r8, r5
   18ea0:	d2d3      	bcs.n	18e4a <usb_serial_read+0x26>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   18ea2:	eb01 2146 	add.w	r1, r1, r6, lsl #9
   18ea6:	4642      	mov	r2, r8
   18ea8:	4b0f      	ldr	r3, [pc, #60]	; (18ee8 <usb_serial_read+0xc4>)
   18eaa:	4419      	add	r1, r3
   18eac:	4648      	mov	r0, r9
   18eae:	f7fe fa1f 	bl	172f0 <memcpy>
			rx_available -= len;
   18eb2:	4a0e      	ldr	r2, [pc, #56]	; (18eec <usb_serial_read+0xc8>)
   18eb4:	6813      	ldr	r3, [r2, #0]
   18eb6:	eba3 030a 	sub.w	r3, r3, sl
   18eba:	443b      	add	r3, r7
   18ebc:	6013      	str	r3, [r2, #0]
			rx_index[i] += len;
   18ebe:	4b0d      	ldr	r3, [pc, #52]	; (18ef4 <usb_serial_read+0xd0>)
   18ec0:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
   18ec4:	4490      	add	r8, r2
   18ec6:	f823 8016 	strh.w	r8, [r3, r6, lsl #1]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   18eca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18ece:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   18ed2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   18ed6:	4650      	mov	r0, sl
   18ed8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18edc:	46ba      	mov	sl, r7
   18ede:	e7f4      	b.n	18eca <usb_serial_read+0xa6>
			count += avail;
   18ee0:	46ba      	mov	sl, r7
   18ee2:	e7f2      	b.n	18eca <usb_serial_read+0xa6>
   18ee4:	20008c32 	.word	0x20008c32
   18ee8:	20205980 	.word	0x20205980
   18eec:	200084e4 	.word	0x200084e4
   18ef0:	20008528 	.word	0x20008528
   18ef4:	20008510 	.word	0x20008510
   18ef8:	200084f4 	.word	0x200084f4
   18efc:	20008c30 	.word	0x20008c30

00018f00 <usb_serial_peekchar>:
	uint32_t tail = rx_tail;
   18f00:	4b0c      	ldr	r3, [pc, #48]	; (18f34 <usb_serial_peekchar+0x34>)
   18f02:	781b      	ldrb	r3, [r3, #0]
   18f04:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
   18f06:	4a0c      	ldr	r2, [pc, #48]	; (18f38 <usb_serial_peekchar+0x38>)
   18f08:	7812      	ldrb	r2, [r2, #0]
   18f0a:	b2d2      	uxtb	r2, r2
   18f0c:	4293      	cmp	r3, r2
   18f0e:	d00d      	beq.n	18f2c <usb_serial_peekchar+0x2c>
	if (++tail > RX_NUM) tail = 0;
   18f10:	3301      	adds	r3, #1
   18f12:	2b09      	cmp	r3, #9
   18f14:	bf28      	it	cs
   18f16:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   18f18:	4a08      	ldr	r2, [pc, #32]	; (18f3c <usb_serial_peekchar+0x3c>)
   18f1a:	5cd2      	ldrb	r2, [r2, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   18f1c:	4b08      	ldr	r3, [pc, #32]	; (18f40 <usb_serial_peekchar+0x40>)
   18f1e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
   18f22:	4b08      	ldr	r3, [pc, #32]	; (18f44 <usb_serial_peekchar+0x44>)
   18f24:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   18f28:	5c58      	ldrb	r0, [r3, r1]
   18f2a:	4770      	bx	lr
	if (tail == rx_head) return -1;
   18f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18f30:	4770      	bx	lr
   18f32:	bf00      	nop
   18f34:	20008c32 	.word	0x20008c32
   18f38:	20008c30 	.word	0x20008c30
   18f3c:	20008528 	.word	0x20008528
   18f40:	20008510 	.word	0x20008510
   18f44:	20205980 	.word	0x20205980

00018f48 <usb_serial_available>:
{
   18f48:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   18f4a:	4b04      	ldr	r3, [pc, #16]	; (18f5c <usb_serial_available+0x14>)
   18f4c:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   18f4e:	b10c      	cbz	r4, 18f54 <usb_serial_available+0xc>
}
   18f50:	4620      	mov	r0, r4
   18f52:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   18f54:	f7f2 ff3e 	bl	bdd4 <yield>
   18f58:	e7fa      	b.n	18f50 <usb_serial_available+0x8>
   18f5a:	bf00      	nop
   18f5c:	200084e4 	.word	0x200084e4

00018f60 <usb_serial_flush_input>:
{
   18f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = rx_tail;
   18f62:	4b12      	ldr	r3, [pc, #72]	; (18fac <usb_serial_flush_input+0x4c>)
   18f64:	781c      	ldrb	r4, [r3, #0]
   18f66:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
   18f68:	4b11      	ldr	r3, [pc, #68]	; (18fb0 <usb_serial_flush_input+0x50>)
   18f6a:	781b      	ldrb	r3, [r3, #0]
   18f6c:	b2db      	uxtb	r3, r3
   18f6e:	429c      	cmp	r4, r3
   18f70:	d01a      	beq.n	18fa8 <usb_serial_flush_input+0x48>
		uint32_t i = rx_list[tail];
   18f72:	4f10      	ldr	r7, [pc, #64]	; (18fb4 <usb_serial_flush_input+0x54>)
		rx_available -= rx_count[i] - rx_index[i];
   18f74:	4d10      	ldr	r5, [pc, #64]	; (18fb8 <usb_serial_flush_input+0x58>)
   18f76:	4e11      	ldr	r6, [pc, #68]	; (18fbc <usb_serial_flush_input+0x5c>)
		if (++tail > RX_NUM) tail = 0;
   18f78:	3401      	adds	r4, #1
   18f7a:	2c09      	cmp	r4, #9
   18f7c:	bf28      	it	cs
   18f7e:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   18f80:	5d38      	ldrb	r0, [r7, r4]
		rx_available -= rx_count[i] - rx_index[i];
   18f82:	682b      	ldr	r3, [r5, #0]
   18f84:	f836 2010 	ldrh.w	r2, [r6, r0, lsl #1]
   18f88:	490d      	ldr	r1, [pc, #52]	; (18fc0 <usb_serial_flush_input+0x60>)
   18f8a:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
   18f8e:	1a52      	subs	r2, r2, r1
   18f90:	1a9b      	subs	r3, r3, r2
   18f92:	602b      	str	r3, [r5, #0]
		rx_queue_transfer(i);
   18f94:	f7ff fe32 	bl	18bfc <rx_queue_transfer>
		rx_tail = tail;
   18f98:	b2e2      	uxtb	r2, r4
   18f9a:	4b04      	ldr	r3, [pc, #16]	; (18fac <usb_serial_flush_input+0x4c>)
   18f9c:	701a      	strb	r2, [r3, #0]
	while (tail != rx_head) {
   18f9e:	4b04      	ldr	r3, [pc, #16]	; (18fb0 <usb_serial_flush_input+0x50>)
   18fa0:	781b      	ldrb	r3, [r3, #0]
   18fa2:	b2db      	uxtb	r3, r3
   18fa4:	42a3      	cmp	r3, r4
   18fa6:	d1e7      	bne.n	18f78 <usb_serial_flush_input+0x18>
}
   18fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18faa:	bf00      	nop
   18fac:	20008c32 	.word	0x20008c32
   18fb0:	20008c30 	.word	0x20008c30
   18fb4:	20008528 	.word	0x20008528
   18fb8:	200084e4 	.word	0x200084e4
   18fbc:	200084f4 	.word	0x200084f4
   18fc0:	20008510 	.word	0x20008510

00018fc4 <usb_serial_getchar>:
{
   18fc4:	b500      	push	{lr}
   18fc6:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   18fc8:	2101      	movs	r1, #1
   18fca:	f10d 0007 	add.w	r0, sp, #7
   18fce:	f7ff ff29 	bl	18e24 <usb_serial_read>
   18fd2:	b120      	cbz	r0, 18fde <usb_serial_getchar+0x1a>
   18fd4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   18fd8:	b003      	add	sp, #12
   18fda:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   18fde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18fe2:	e7f9      	b.n	18fd8 <usb_serial_getchar+0x14>

00018fe4 <usb_serial_write>:
{
   18fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fe8:	b085      	sub	sp, #20
   18fea:	9003      	str	r0, [sp, #12]
	if (!usb_configuration) return 0;
   18fec:	4b62      	ldr	r3, [pc, #392]	; (19178 <usb_serial_write+0x194>)
   18fee:	781b      	ldrb	r3, [r3, #0]
   18ff0:	2b00      	cmp	r3, #0
   18ff2:	f000 80bd 	beq.w	19170 <usb_serial_write+0x18c>
   18ff6:	468b      	mov	fp, r1
	while (size > 0) {
   18ff8:	2900      	cmp	r1, #0
   18ffa:	d047      	beq.n	1908c <usb_serial_write+0xa8>
	uint32_t sent=0;
   18ffc:	2300      	movs	r3, #0
   18ffe:	9301      	str	r3, [sp, #4]
		tx_noautoflush = 1;
   19000:	4c5e      	ldr	r4, [pc, #376]	; (1917c <usb_serial_write+0x198>)
   19002:	2601      	movs	r6, #1
   19004:	f88d 600b 	strb.w	r6, [sp, #11]
				wait_begin_at = systick_millis_count;
   19008:	f8df 818c 	ldr.w	r8, [pc, #396]	; 19198 <usb_serial_write+0x1b4>
			if (transmit_previous_timeout) return sent;
   1900c:	f8df a184 	ldr.w	sl, [pc, #388]	; 19194 <usb_serial_write+0x1b0>
		tx_noautoflush = 1;
   19010:	f89d 300b 	ldrb.w	r3, [sp, #11]
   19014:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   19016:	4b5a      	ldr	r3, [pc, #360]	; (19180 <usb_serial_write+0x19c>)
   19018:	f893 9000 	ldrb.w	r9, [r3]
   1901c:	4b59      	ldr	r3, [pc, #356]	; (19184 <usb_serial_write+0x1a0>)
   1901e:	eb03 1949 	add.w	r9, r3, r9, lsl #5
		while (!tx_available) {
   19022:	4b59      	ldr	r3, [pc, #356]	; (19188 <usb_serial_write+0x1a4>)
   19024:	881b      	ldrh	r3, [r3, #0]
   19026:	b94b      	cbnz	r3, 1903c <usb_serial_write+0x58>
		uint32_t wait_begin_at=0;
   19028:	2700      	movs	r7, #0
		int waiting=0;
   1902a:	463d      	mov	r5, r7
   1902c:	e043      	b.n	190b6 <usb_serial_write+0xd2>
				tx_available = TX_SIZE;
   1902e:	4b56      	ldr	r3, [pc, #344]	; (19188 <usb_serial_write+0x1a4>)
   19030:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19034:	801a      	strh	r2, [r3, #0]
				transmit_previous_timeout = 0;
   19036:	2300      	movs	r3, #0
   19038:	f88a 3000 	strb.w	r3, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1903c:	4b50      	ldr	r3, [pc, #320]	; (19180 <usb_serial_write+0x19c>)
   1903e:	781b      	ldrb	r3, [r3, #0]
   19040:	02df      	lsls	r7, r3, #11
   19042:	4a51      	ldr	r2, [pc, #324]	; (19188 <usb_serial_write+0x1a4>)
   19044:	8815      	ldrh	r5, [r2, #0]
   19046:	f5c5 6000 	rsb	r0, r5, #2048	; 0x800
   1904a:	eb00 20c3 	add.w	r0, r0, r3, lsl #11
   1904e:	4b4f      	ldr	r3, [pc, #316]	; (1918c <usb_serial_write+0x1a8>)
   19050:	4418      	add	r0, r3
		if (size >= tx_available) {
   19052:	455d      	cmp	r5, fp
   19054:	d947      	bls.n	190e6 <usb_serial_write+0x102>
			memcpy(txdata, data, size);
   19056:	465a      	mov	r2, fp
   19058:	9903      	ldr	r1, [sp, #12]
   1905a:	f7fe f949 	bl	172f0 <memcpy>
			tx_available -= size;
   1905e:	eba5 050b 	sub.w	r5, r5, fp
   19062:	4b49      	ldr	r3, [pc, #292]	; (19188 <usb_serial_write+0x1a4>)
   19064:	801d      	strh	r5, [r3, #0]
			sent += size;
   19066:	9b01      	ldr	r3, [sp, #4]
   19068:	445b      	add	r3, fp
   1906a:	9301      	str	r3, [sp, #4]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   1906c:	4b48      	ldr	r3, [pc, #288]	; (19190 <usb_serial_write+0x1ac>)
   1906e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
   19072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			size = 0;
   19076:	f04f 0b00 	mov.w	fp, #0
		asm("dsb" ::: "memory");
   1907a:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   1907e:	2300      	movs	r3, #0
   19080:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   19082:	f1bb 0f00 	cmp.w	fp, #0
   19086:	d1c3      	bne.n	19010 <usb_serial_write+0x2c>
   19088:	f8dd b004 	ldr.w	fp, [sp, #4]
	return sent;
   1908c:	4658      	mov	r0, fp
   1908e:	e070      	b.n	19172 <usb_serial_write+0x18e>
			if (transmit_previous_timeout) return sent;
   19090:	f89a 3000 	ldrb.w	r3, [sl]
   19094:	b9f3      	cbnz	r3, 190d4 <usb_serial_write+0xf0>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   19096:	f8d8 3000 	ldr.w	r3, [r8]
   1909a:	1bdb      	subs	r3, r3, r7
   1909c:	2b78      	cmp	r3, #120	; 0x78
   1909e:	d81b      	bhi.n	190d8 <usb_serial_write+0xf4>
			if (!usb_configuration) return sent;
   190a0:	4b35      	ldr	r3, [pc, #212]	; (19178 <usb_serial_write+0x194>)
   190a2:	781b      	ldrb	r3, [r3, #0]
   190a4:	b1eb      	cbz	r3, 190e2 <usb_serial_write+0xfe>
			yield();
   190a6:	f7f2 fe95 	bl	bdd4 <yield>
			tx_noautoflush = 1;
   190aa:	7026      	strb	r6, [r4, #0]
		while (!tx_available) {
   190ac:	4635      	mov	r5, r6
   190ae:	4b36      	ldr	r3, [pc, #216]	; (19188 <usb_serial_write+0x1a4>)
   190b0:	881b      	ldrh	r3, [r3, #0]
   190b2:	2b00      	cmp	r3, #0
   190b4:	d1c2      	bne.n	1903c <usb_serial_write+0x58>
			uint32_t status = usb_transfer_status(xfer);
   190b6:	4648      	mov	r0, r9
   190b8:	f7ff f99c 	bl	183f4 <usb_transfer_status>
			if (!(status & 0x80)) {
   190bc:	f010 0f80 	tst.w	r0, #128	; 0x80
   190c0:	d0b5      	beq.n	1902e <usb_serial_write+0x4a>
			asm("dsb" ::: "memory");
   190c2:	f3bf 8f4f 	dsb	sy
			tx_noautoflush = 0;
   190c6:	2300      	movs	r3, #0
   190c8:	7023      	strb	r3, [r4, #0]
			if (!waiting) {
   190ca:	2d00      	cmp	r5, #0
   190cc:	d1e0      	bne.n	19090 <usb_serial_write+0xac>
				wait_begin_at = systick_millis_count;
   190ce:	f8d8 7000 	ldr.w	r7, [r8]
				waiting = 1;
   190d2:	e7dd      	b.n	19090 <usb_serial_write+0xac>
			if (transmit_previous_timeout) return sent;
   190d4:	9801      	ldr	r0, [sp, #4]
   190d6:	e04c      	b.n	19172 <usb_serial_write+0x18e>
				transmit_previous_timeout = 1;
   190d8:	4b2e      	ldr	r3, [pc, #184]	; (19194 <usb_serial_write+0x1b0>)
   190da:	2201      	movs	r2, #1
   190dc:	701a      	strb	r2, [r3, #0]
				return sent;
   190de:	9801      	ldr	r0, [sp, #4]
   190e0:	e047      	b.n	19172 <usb_serial_write+0x18e>
			if (!usb_configuration) return sent;
   190e2:	9801      	ldr	r0, [sp, #4]
   190e4:	e045      	b.n	19172 <usb_serial_write+0x18e>
			memcpy(txdata, data, tx_available);
   190e6:	462a      	mov	r2, r5
   190e8:	9903      	ldr	r1, [sp, #12]
   190ea:	f7fe f901 	bl	172f0 <memcpy>
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   190ee:	4d27      	ldr	r5, [pc, #156]	; (1918c <usb_serial_write+0x1a8>)
   190f0:	443d      	add	r5, r7
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   190f2:	2300      	movs	r3, #0
   190f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   190f8:	4629      	mov	r1, r5
   190fa:	4648      	mov	r0, r9
   190fc:	f7ff f93e 	bl	1837c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   19100:	462b      	mov	r3, r5
	asm("dsb");
   19102:	f3bf 8f4f 	dsb	sy
   19106:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   1910a:	f505 6100 	add.w	r1, r5, #2048	; 0x800
   1910e:	428a      	cmp	r2, r1
   19110:	bf8c      	ite	hi
   19112:	2201      	movhi	r2, #1
   19114:	2240      	movls	r2, #64	; 0x40
   19116:	eb05 1542 	add.w	r5, r5, r2, lsl #5
		SCB_CACHE_DCCIMVAC = location;
   1911a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   1911e:	f8c2 3f70 	str.w	r3, [r2, #3952]	; 0xf70
		location += 32;
   19122:	3320      	adds	r3, #32
	} while (location < end_addr);
   19124:	429d      	cmp	r5, r3
   19126:	d1fa      	bne.n	1911e <usb_serial_write+0x13a>
	asm("dsb");
   19128:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1912c:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   19130:	4649      	mov	r1, r9
   19132:	2003      	movs	r0, #3
   19134:	f7ff f93a 	bl	183ac <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   19138:	4b11      	ldr	r3, [pc, #68]	; (19180 <usb_serial_write+0x19c>)
   1913a:	781b      	ldrb	r3, [r3, #0]
   1913c:	3301      	adds	r3, #1
   1913e:	b2db      	uxtb	r3, r3
   19140:	2b03      	cmp	r3, #3
   19142:	d811      	bhi.n	19168 <usb_serial_write+0x184>
   19144:	4a0e      	ldr	r2, [pc, #56]	; (19180 <usb_serial_write+0x19c>)
   19146:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   19148:	4a0f      	ldr	r2, [pc, #60]	; (19188 <usb_serial_write+0x1a4>)
   1914a:	8813      	ldrh	r3, [r2, #0]
   1914c:	ebab 0b03 	sub.w	fp, fp, r3
			sent += tx_available;
   19150:	9901      	ldr	r1, [sp, #4]
   19152:	4419      	add	r1, r3
   19154:	9101      	str	r1, [sp, #4]
			data += tx_available;
   19156:	9903      	ldr	r1, [sp, #12]
   19158:	4419      	add	r1, r3
   1915a:	9103      	str	r1, [sp, #12]
			tx_available = 0;
   1915c:	2300      	movs	r3, #0
   1915e:	8013      	strh	r3, [r2, #0]
	USB1_GPTIMER0CTRL = 0;
   19160:	4a0b      	ldr	r2, [pc, #44]	; (19190 <usb_serial_write+0x1ac>)
   19162:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
   19166:	e788      	b.n	1907a <usb_serial_write+0x96>
			if (++tx_head >= TX_NUM) tx_head = 0;
   19168:	4b05      	ldr	r3, [pc, #20]	; (19180 <usb_serial_write+0x19c>)
   1916a:	2200      	movs	r2, #0
   1916c:	701a      	strb	r2, [r3, #0]
   1916e:	e7eb      	b.n	19148 <usb_serial_write+0x164>
	if (!usb_configuration) return 0;
   19170:	2000      	movs	r0, #0
}
   19172:	b005      	add	sp, #20
   19174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19178:	20008c40 	.word	0x20008c40
   1917c:	20008c3d 	.word	0x20008c3d
   19180:	20008c3b 	.word	0x20008c3b
   19184:	200065e0 	.word	0x200065e0
   19188:	20008c16 	.word	0x20008c16
   1918c:	20206980 	.word	0x20206980
   19190:	402e0000 	.word	0x402e0000
   19194:	20008c39 	.word	0x20008c39
   19198:	20008a6c 	.word	0x20008a6c

0001919c <usb_serial_putchar>:
{
   1919c:	b500      	push	{lr}
   1919e:	b083      	sub	sp, #12
   191a0:	f88d 0007 	strb.w	r0, [sp, #7]
	return usb_serial_write(&c, 1);
   191a4:	2101      	movs	r1, #1
   191a6:	f10d 0007 	add.w	r0, sp, #7
   191aa:	f7ff ff1b 	bl	18fe4 <usb_serial_write>
}
   191ae:	b003      	add	sp, #12
   191b0:	f85d fb04 	ldr.w	pc, [sp], #4

000191b4 <usb_serial_write_buffer_free>:
{
   191b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tx_noautoflush = 1;
   191b6:	4b0f      	ldr	r3, [pc, #60]	; (191f4 <usb_serial_write_buffer_free+0x40>)
   191b8:	2201      	movs	r2, #1
   191ba:	701a      	strb	r2, [r3, #0]
	for (uint32_t i=0; i < TX_NUM; i++) {
   191bc:	4d0e      	ldr	r5, [pc, #56]	; (191f8 <usb_serial_write_buffer_free+0x44>)
   191be:	2400      	movs	r4, #0
	uint32_t sum = 0;
   191c0:	4627      	mov	r7, r4
		if (i == tx_head) continue;
   191c2:	4e0e      	ldr	r6, [pc, #56]	; (191fc <usb_serial_write_buffer_free+0x48>)
   191c4:	e003      	b.n	191ce <usb_serial_write_buffer_free+0x1a>
	for (uint32_t i=0; i < TX_NUM; i++) {
   191c6:	3401      	adds	r4, #1
   191c8:	3520      	adds	r5, #32
   191ca:	2c04      	cmp	r4, #4
   191cc:	d00b      	beq.n	191e6 <usb_serial_write_buffer_free+0x32>
		if (i == tx_head) continue;
   191ce:	7833      	ldrb	r3, [r6, #0]
   191d0:	42a3      	cmp	r3, r4
   191d2:	d0f8      	beq.n	191c6 <usb_serial_write_buffer_free+0x12>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   191d4:	4628      	mov	r0, r5
   191d6:	f7ff f90d 	bl	183f4 <usb_transfer_status>
   191da:	f010 0f80 	tst.w	r0, #128	; 0x80
   191de:	bf08      	it	eq
   191e0:	f507 6700 	addeq.w	r7, r7, #2048	; 0x800
   191e4:	e7ef      	b.n	191c6 <usb_serial_write_buffer_free+0x12>
	asm("dsb" ::: "memory");
   191e6:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   191ea:	4b02      	ldr	r3, [pc, #8]	; (191f4 <usb_serial_write_buffer_free+0x40>)
   191ec:	2200      	movs	r2, #0
   191ee:	701a      	strb	r2, [r3, #0]
}
   191f0:	4638      	mov	r0, r7
   191f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   191f4:	20008c3d 	.word	0x20008c3d
   191f8:	200065e0 	.word	0x200065e0
   191fc:	20008c3b 	.word	0x20008c3b

00019200 <usb_serial_flush_output>:
	if (!usb_configuration) return;
   19200:	4b21      	ldr	r3, [pc, #132]	; (19288 <usb_serial_flush_output+0x88>)
   19202:	781b      	ldrb	r3, [r3, #0]
   19204:	2b00      	cmp	r3, #0
   19206:	d03e      	beq.n	19286 <usb_serial_flush_output+0x86>
{
   19208:	b570      	push	{r4, r5, r6, lr}
	if (tx_available == 0) return;
   1920a:	4b20      	ldr	r3, [pc, #128]	; (1928c <usb_serial_flush_output+0x8c>)
   1920c:	881d      	ldrh	r5, [r3, #0]
   1920e:	b905      	cbnz	r5, 19212 <usb_serial_flush_output+0x12>
}
   19210:	bd70      	pop	{r4, r5, r6, pc}
	tx_noautoflush = 1;
   19212:	4a1f      	ldr	r2, [pc, #124]	; (19290 <usb_serial_flush_output+0x90>)
   19214:	2101      	movs	r1, #1
   19216:	7011      	strb	r1, [r2, #0]
	transfer_t *xfer = tx_transfer + tx_head;
   19218:	4a1e      	ldr	r2, [pc, #120]	; (19294 <usb_serial_flush_output+0x94>)
   1921a:	7811      	ldrb	r1, [r2, #0]
   1921c:	4e1e      	ldr	r6, [pc, #120]	; (19298 <usb_serial_flush_output+0x98>)
   1921e:	eb06 1641 	add.w	r6, r6, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   19222:	4c1e      	ldr	r4, [pc, #120]	; (1929c <usb_serial_flush_output+0x9c>)
   19224:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
   19228:	f5c5 6500 	rsb	r5, r5, #2048	; 0x800
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1922c:	2300      	movs	r3, #0
   1922e:	462a      	mov	r2, r5
   19230:	4621      	mov	r1, r4
   19232:	4630      	mov	r0, r6
   19234:	f7ff f8a2 	bl	1837c <usb_prepare_transfer>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   19238:	4623      	mov	r3, r4
	uint32_t end_addr = (uint32_t)addr + size;
   1923a:	1962      	adds	r2, r4, r5
	asm("dsb");
   1923c:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   19240:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   19244:	f8c0 3f70 	str.w	r3, [r0, #3952]	; 0xf70
		location += 32;
   19248:	3320      	adds	r3, #32
	} while (location < end_addr);
   1924a:	429a      	cmp	r2, r3
   1924c:	d8fa      	bhi.n	19244 <usb_serial_flush_output+0x44>
	asm("dsb");
   1924e:	f3bf 8f4f 	dsb	sy
	asm("isb");
   19252:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   19256:	4631      	mov	r1, r6
   19258:	2003      	movs	r0, #3
   1925a:	f7ff f8a7 	bl	183ac <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   1925e:	4b0d      	ldr	r3, [pc, #52]	; (19294 <usb_serial_flush_output+0x94>)
   19260:	781b      	ldrb	r3, [r3, #0]
   19262:	3301      	adds	r3, #1
   19264:	b2db      	uxtb	r3, r3
   19266:	2b03      	cmp	r3, #3
   19268:	d809      	bhi.n	1927e <usb_serial_flush_output+0x7e>
   1926a:	4a0a      	ldr	r2, [pc, #40]	; (19294 <usb_serial_flush_output+0x94>)
   1926c:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
   1926e:	2300      	movs	r3, #0
   19270:	4a06      	ldr	r2, [pc, #24]	; (1928c <usb_serial_flush_output+0x8c>)
   19272:	8013      	strh	r3, [r2, #0]
	asm("dsb" ::: "memory");
   19274:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   19278:	4a05      	ldr	r2, [pc, #20]	; (19290 <usb_serial_flush_output+0x90>)
   1927a:	7013      	strb	r3, [r2, #0]
   1927c:	e7c8      	b.n	19210 <usb_serial_flush_output+0x10>
	if (++tx_head >= TX_NUM) tx_head = 0;
   1927e:	4b05      	ldr	r3, [pc, #20]	; (19294 <usb_serial_flush_output+0x94>)
   19280:	2200      	movs	r2, #0
   19282:	701a      	strb	r2, [r3, #0]
   19284:	e7f3      	b.n	1926e <usb_serial_flush_output+0x6e>
   19286:	4770      	bx	lr
   19288:	20008c40 	.word	0x20008c40
   1928c:	20008c16 	.word	0x20008c16
   19290:	20008c3d 	.word	0x20008c3d
   19294:	20008c3b 	.word	0x20008c3b
   19298:	200065e0 	.word	0x200065e0
   1929c:	20206980 	.word	0x20206980

000192a0 <smalloc_verify_pool>:

struct smalloc_pool smalloc_curr_pool;

int smalloc_verify_pool(struct smalloc_pool *spool)
{
	if (!spool->pool || !spool->pool_size) return 0;
   192a0:	6803      	ldr	r3, [r0, #0]
   192a2:	b16b      	cbz	r3, 192c0 <smalloc_verify_pool+0x20>
   192a4:	6842      	ldr	r2, [r0, #4]
   192a6:	b16a      	cbz	r2, 192c4 <smalloc_verify_pool+0x24>
	if (spool->pool_size % HEADER_SZ) return 0;
   192a8:	4b07      	ldr	r3, [pc, #28]	; (192c8 <smalloc_verify_pool+0x28>)
   192aa:	fba3 1302 	umull	r1, r3, r3, r2
   192ae:	08db      	lsrs	r3, r3, #3
   192b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   192b4:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
   192b8:	bf0c      	ite	eq
   192ba:	2001      	moveq	r0, #1
   192bc:	2000      	movne	r0, #0
   192be:	4770      	bx	lr
	if (!spool->pool || !spool->pool_size) return 0;
   192c0:	2000      	movs	r0, #0
   192c2:	4770      	bx	lr
   192c4:	2000      	movs	r0, #0
	return 1;
}
   192c6:	4770      	bx	lr
   192c8:	aaaaaaab 	.word	0xaaaaaaab

000192cc <sm_align_pool>:

int sm_align_pool(struct smalloc_pool *spool)
{
   192cc:	b538      	push	{r3, r4, r5, lr}
   192ce:	4604      	mov	r4, r0
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;
   192d0:	f7ff ffe6 	bl	192a0 <smalloc_verify_pool>
   192d4:	b9b8      	cbnz	r0, 19306 <sm_align_pool+0x3a>
   192d6:	4605      	mov	r5, r0

	x = spool->pool_size % HEADER_SZ;
   192d8:	6862      	ldr	r2, [r4, #4]
   192da:	4b0c      	ldr	r3, [pc, #48]	; (1930c <sm_align_pool+0x40>)
   192dc:	fba3 1302 	umull	r1, r3, r3, r2
   192e0:	08db      	lsrs	r3, r3, #3
   192e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   192e6:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   192ea:	d001      	beq.n	192f0 <sm_align_pool+0x24>
   192ec:	1ad2      	subs	r2, r2, r3
   192ee:	6062      	str	r2, [r4, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   192f0:	6863      	ldr	r3, [r4, #4]
   192f2:	2bf0      	cmp	r3, #240	; 0xf0
   192f4:	d902      	bls.n	192fc <sm_align_pool+0x30>
		errno = ENOSPC;
		return 0;
	}

	return 1;
   192f6:	2501      	movs	r5, #1
}
   192f8:	4628      	mov	r0, r5
   192fa:	bd38      	pop	{r3, r4, r5, pc}
		errno = ENOSPC;
   192fc:	f009 ffe2 	bl	232c4 <__errno>
   19300:	231c      	movs	r3, #28
   19302:	6003      	str	r3, [r0, #0]
		return 0;
   19304:	e7f8      	b.n	192f8 <sm_align_pool+0x2c>
	if (smalloc_verify_pool(spool)) return 1;
   19306:	2501      	movs	r5, #1
   19308:	e7f6      	b.n	192f8 <sm_align_pool+0x2c>
   1930a:	bf00      	nop
   1930c:	aaaaaaab 	.word	0xaaaaaaab

00019310 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   19310:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   19312:	b190      	cbz	r0, 1933a <sm_set_pool+0x2a>
   19314:	461d      	mov	r5, r3
   19316:	4604      	mov	r4, r0
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   19318:	b101      	cbz	r1, 1931c <sm_set_pool+0xc>
   1931a:	b9fa      	cbnz	r2, 1935c <sm_set_pool+0x4c>
		if (smalloc_verify_pool(spool)) {
   1931c:	4620      	mov	r0, r4
   1931e:	f7ff ffbf 	bl	192a0 <smalloc_verify_pool>
   19322:	4606      	mov	r6, r0
   19324:	b1a8      	cbz	r0, 19352 <sm_set_pool+0x42>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   19326:	68a3      	ldr	r3, [r4, #8]
   19328:	b96b      	cbnz	r3, 19346 <sm_set_pool+0x36>
			memset(spool, 0, sizeof(struct smalloc_pool));
   1932a:	2300      	movs	r3, #0
   1932c:	6023      	str	r3, [r4, #0]
   1932e:	6063      	str	r3, [r4, #4]
   19330:	60a3      	str	r3, [r4, #8]
   19332:	60e3      	str	r3, [r4, #12]
			return 1;
   19334:	2601      	movs	r6, #1
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   19336:	4630      	mov	r0, r6
   19338:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   1933a:	f009 ffc3 	bl	232c4 <__errno>
   1933e:	2316      	movs	r3, #22
   19340:	6003      	str	r3, [r0, #0]
		return 0;
   19342:	2600      	movs	r6, #0
   19344:	e7f7      	b.n	19336 <sm_set_pool+0x26>
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   19346:	6862      	ldr	r2, [r4, #4]
   19348:	2100      	movs	r1, #0
   1934a:	6820      	ldr	r0, [r4, #0]
   1934c:	f009 fe84 	bl	23058 <memset>
   19350:	e7eb      	b.n	1932a <sm_set_pool+0x1a>
		errno = EINVAL;
   19352:	f009 ffb7 	bl	232c4 <__errno>
   19356:	2316      	movs	r3, #22
   19358:	6003      	str	r3, [r0, #0]
		return 0;
   1935a:	e7ec      	b.n	19336 <sm_set_pool+0x26>
	spool->pool = new_pool;
   1935c:	6001      	str	r1, [r0, #0]
	spool->pool_size = new_pool_size;
   1935e:	6042      	str	r2, [r0, #4]
	spool->oomfn = oom_handler;
   19360:	9b04      	ldr	r3, [sp, #16]
   19362:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   19364:	f7ff ffb2 	bl	192cc <sm_align_pool>
   19368:	4606      	mov	r6, r0
   1936a:	2800      	cmp	r0, #0
   1936c:	d0e3      	beq.n	19336 <sm_set_pool+0x26>
	if (do_zero) {
   1936e:	b90d      	cbnz	r5, 19374 <sm_set_pool+0x64>
	return 1;
   19370:	2601      	movs	r6, #1
   19372:	e7e0      	b.n	19336 <sm_set_pool+0x26>
		spool->do_zero = do_zero;
   19374:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   19376:	6862      	ldr	r2, [r4, #4]
   19378:	2100      	movs	r1, #0
   1937a:	6820      	ldr	r0, [r4, #0]
   1937c:	f009 fe6c 	bl	23058 <memset>
	return 1;
   19380:	2601      	movs	r6, #1
   19382:	e7d8      	b.n	19336 <sm_set_pool+0x26>
   19384:	0000      	movs	r0, r0
	...

00019388 <powf>:
   19388:	b430      	push	{r4, r5}
   1938a:	ee10 3a10 	vmov	r3, s0
   1938e:	ed2d 8b02 	vpush	{d8}
   19392:	f5a3 0100 	sub.w	r1, r3, #8388608	; 0x800000
   19396:	ee10 2a90 	vmov	r2, s1
   1939a:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
   1939e:	ee10 4a10 	vmov	r4, s0
   193a2:	b082      	sub	sp, #8
   193a4:	ea4f 0142 	mov.w	r1, r2, lsl #1
   193a8:	d27c      	bcs.n	194a4 <powf+0x11c>
   193aa:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   193ae:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   193b2:	4584      	cmp	ip, r0
   193b4:	f080 80f7 	bcs.w	195a6 <powf+0x21e>
   193b8:	2000      	movs	r0, #0
   193ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   193be:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
   193c2:	f3c3 42c3 	ubfx	r2, r3, #19, #4
   193c6:	0ddb      	lsrs	r3, r3, #23
   193c8:	05db      	lsls	r3, r3, #23
   193ca:	1ae1      	subs	r1, r4, r3
   193cc:	15db      	asrs	r3, r3, #23
   193ce:	ee07 3a90 	vmov	s15, r3
   193d2:	4bb1      	ldr	r3, [pc, #708]	; (19698 <powf+0x310>)
   193d4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   193d8:	ed92 3b00 	vldr	d3, [r2]
   193dc:	ee04 1a10 	vmov	s8, r1
   193e0:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
   193e4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
   193e8:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   193ec:	eea3 0b04 	vfma.f64	d0, d3, d4
   193f0:	ed93 3b44 	vldr	d3, [r3, #272]	; 0x110
   193f4:	ee20 1b00 	vmul.f64	d1, d0, d0
   193f8:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
   193fc:	ed93 2b40 	vldr	d2, [r3, #256]	; 0x100
   19400:	eea0 4b03 	vfma.f64	d4, d0, d3
   19404:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
   19408:	ed93 3b48 	vldr	d3, [r3, #288]	; 0x120
   1940c:	eea0 5b02 	vfma.f64	d5, d0, d2
   19410:	ee21 2b01 	vmul.f64	d2, d1, d1
   19414:	ed92 8b02 	vldr	d8, [r2, #8]
   19418:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1941c:	ee37 7b08 	vadd.f64	d7, d7, d8
   19420:	eea0 7b03 	vfma.f64	d7, d0, d3
   19424:	eea1 7b04 	vfma.f64	d7, d1, d4
   19428:	eea5 7b02 	vfma.f64	d7, d5, d2
   1942c:	ee26 7b07 	vmul.f64	d7, d6, d7
   19430:	ee17 3a90 	vmov	r3, s15
   19434:	f248 01bf 	movw	r1, #32959	; 0x80bf
   19438:	f3c3 33cf 	ubfx	r3, r3, #15, #16
   1943c:	428b      	cmp	r3, r1
   1943e:	d250      	bcs.n	194e2 <powf+0x15a>
   19440:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   19444:	4b95      	ldr	r3, [pc, #596]	; (1969c <powf+0x314>)
   19446:	ed93 2b40 	vldr	d2, [r3, #256]	; 0x100
   1944a:	ee37 3b02 	vadd.f64	d3, d7, d2
   1944e:	ee13 2a10 	vmov	r2, s6
   19452:	ee33 3b42 	vsub.f64	d3, d3, d2
   19456:	f002 011f 	and.w	r1, r2, #31
   1945a:	1882      	adds	r2, r0, r2
   1945c:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   19460:	ed93 4b42 	vldr	d4, [r3, #264]	; 0x108
   19464:	ee37 7b43 	vsub.f64	d7, d7, d3
   19468:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
   1946c:	6845      	ldr	r5, [r0, #4]
   1946e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
   19472:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
   19476:	eea7 6b04 	vfma.f64	d6, d7, d4
   1947a:	ee27 4b07 	vmul.f64	d4, d7, d7
   1947e:	2300      	movs	r3, #0
   19480:	1918      	adds	r0, r3, r4
   19482:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
   19486:	eea7 0b05 	vfma.f64	d0, d7, d5
   1948a:	ec41 0b17 	vmov	d7, r0, r1
   1948e:	eea6 0b04 	vfma.f64	d0, d6, d4
   19492:	ee20 0b07 	vmul.f64	d0, d0, d7
   19496:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   1949a:	b002      	add	sp, #8
   1949c:	ecbd 8b02 	vpop	{d8}
   194a0:	bc30      	pop	{r4, r5}
   194a2:	4770      	bx	lr
   194a4:	1e4d      	subs	r5, r1, #1
   194a6:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   194aa:	4285      	cmp	r5, r0
   194ac:	f080 80ce 	bcs.w	1964c <powf+0x2c4>
   194b0:	0059      	lsls	r1, r3, #1
   194b2:	1e4d      	subs	r5, r1, #1
   194b4:	4285      	cmp	r5, r0
   194b6:	f080 8092 	bcs.w	195de <powf+0x256>
   194ba:	2b00      	cmp	r3, #0
   194bc:	db55      	blt.n	1956a <powf+0x1e2>
   194be:	2000      	movs	r0, #0
   194c0:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   194c4:	f4bf af79 	bcs.w	193ba <powf+0x32>
   194c8:	eddf 7a75 	vldr	s15, [pc, #468]	; 196a0 <powf+0x318>
   194cc:	ee07 3a10 	vmov	s14, r3
   194d0:	ee67 7a27 	vmul.f32	s15, s14, s15
   194d4:	ee17 4a90 	vmov	r4, s15
   194d8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   194dc:	f1a4 6438 	sub.w	r4, r4, #192937984	; 0xb800000
   194e0:	e76b      	b.n	193ba <powf+0x32>
   194e2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 19678 <powf+0x2f0>
   194e6:	eeb4 7bc6 	vcmpe.f64	d7, d6
   194ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194ee:	dc15      	bgt.n	1951c <powf+0x194>
   194f0:	ed9f 6b63 	vldr	d6, [pc, #396]	; 19680 <powf+0x2f8>
   194f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
   194f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   194fc:	dd20      	ble.n	19540 <powf+0x1b8>
   194fe:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
   19502:	b188      	cbz	r0, 19528 <powf+0x1a0>
   19504:	9301      	str	r3, [sp, #4]
   19506:	eddd 6a01 	vldr	s13, [sp, #4]
   1950a:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
   1950e:	ee76 6a66 	vsub.f32	s13, s12, s13
   19512:	eef4 6a46 	vcmp.f32	s13, s12
   19516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1951a:	d011      	beq.n	19540 <powf+0x1b8>
   1951c:	b002      	add	sp, #8
   1951e:	ecbd 8b02 	vpop	{d8}
   19522:	bc30      	pop	{r4, r5}
   19524:	f000 b8e8 	b.w	196f8 <__math_oflowf>
   19528:	9300      	str	r3, [sp, #0]
   1952a:	eddd 6a00 	vldr	s13, [sp]
   1952e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   19532:	ee76 6a86 	vadd.f32	s13, s13, s12
   19536:	eef4 6a46 	vcmp.f32	s13, s12
   1953a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1953e:	d1ed      	bne.n	1951c <powf+0x194>
   19540:	ed9f 6b51 	vldr	d6, [pc, #324]	; 19688 <powf+0x300>
   19544:	eeb4 7bc6 	vcmpe.f64	d7, d6
   19548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1954c:	d957      	bls.n	195fe <powf+0x276>
   1954e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 19690 <powf+0x308>
   19552:	eeb4 7bc6 	vcmpe.f64	d7, d6
   19556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1955a:	f57f af71 	bpl.w	19440 <powf+0xb8>
   1955e:	b002      	add	sp, #8
   19560:	ecbd 8b02 	vpop	{d8}
   19564:	bc30      	pop	{r4, r5}
   19566:	f000 b8c1 	b.w	196ec <__math_may_uflowf>
   1956a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   1956e:	297e      	cmp	r1, #126	; 0x7e
   19570:	dd11      	ble.n	19596 <powf+0x20e>
   19572:	2996      	cmp	r1, #150	; 0x96
   19574:	dc54      	bgt.n	19620 <powf+0x298>
   19576:	2001      	movs	r0, #1
   19578:	f1c1 0196 	rsb	r1, r1, #150	; 0x96
   1957c:	fa00 f101 	lsl.w	r1, r0, r1
   19580:	1e48      	subs	r0, r1, #1
   19582:	4210      	tst	r0, r2
   19584:	d107      	bne.n	19596 <powf+0x20e>
   19586:	4211      	tst	r1, r2
   19588:	bf14      	ite	ne
   1958a:	2001      	movne	r0, #1
   1958c:	2000      	moveq	r0, #0
   1958e:	0400      	lsls	r0, r0, #16
   19590:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   19594:	e794      	b.n	194c0 <powf+0x138>
   19596:	ee00 3a10 	vmov	s0, r3
   1959a:	b002      	add	sp, #8
   1959c:	ecbd 8b02 	vpop	{d8}
   195a0:	bc30      	pop	{r4, r5}
   195a2:	f000 b8c1 	b.w	19728 <__math_invalidf>
   195a6:	2900      	cmp	r1, #0
   195a8:	d052      	beq.n	19650 <powf+0x2c8>
   195aa:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   195ae:	d02c      	beq.n	1960a <powf+0x282>
   195b0:	0064      	lsls	r4, r4, #1
   195b2:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   195b6:	d82e      	bhi.n	19616 <powf+0x28e>
   195b8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   195bc:	d12b      	bne.n	19616 <powf+0x28e>
   195be:	f1b4 4ffe 	cmp.w	r4, #2130706432	; 0x7f000000
   195c2:	d04b      	beq.n	1965c <powf+0x2d4>
   195c4:	f1b4 4ffe 	cmp.w	r4, #2130706432	; 0x7f000000
   195c8:	ea6f 0202 	mvn.w	r2, r2
   195cc:	bf34      	ite	cc
   195ce:	2400      	movcc	r4, #0
   195d0:	2401      	movcs	r4, #1
   195d2:	0fd2      	lsrs	r2, r2, #31
   195d4:	4294      	cmp	r4, r2
   195d6:	d04c      	beq.n	19672 <powf+0x2ea>
   195d8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 196a4 <powf+0x31c>
   195dc:	e75d      	b.n	1949a <powf+0x112>
   195de:	2b00      	cmp	r3, #0
   195e0:	ee20 0a00 	vmul.f32	s0, s0, s0
   195e4:	db1e      	blt.n	19624 <powf+0x29c>
   195e6:	2000      	movs	r0, #0
   195e8:	2900      	cmp	r1, #0
   195ea:	d13a      	bne.n	19662 <powf+0x2da>
   195ec:	2a00      	cmp	r2, #0
   195ee:	f6bf af54 	bge.w	1949a <powf+0x112>
   195f2:	b002      	add	sp, #8
   195f4:	ecbd 8b02 	vpop	{d8}
   195f8:	bc30      	pop	{r4, r5}
   195fa:	f000 b883 	b.w	19704 <__math_divzerof>
   195fe:	b002      	add	sp, #8
   19600:	ecbd 8b02 	vpop	{d8}
   19604:	bc30      	pop	{r4, r5}
   19606:	f000 b86b 	b.w	196e0 <__math_uflowf>
   1960a:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
   1960e:	0052      	lsls	r2, r2, #1
   19610:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
   19614:	d922      	bls.n	1965c <powf+0x2d4>
   19616:	ee07 3a90 	vmov	s15, r3
   1961a:	ee37 0aa0 	vadd.f32	s0, s15, s1
   1961e:	e73c      	b.n	1949a <powf+0x112>
   19620:	2000      	movs	r0, #0
   19622:	e7b5      	b.n	19590 <powf+0x208>
   19624:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   19628:	f1a3 007f 	sub.w	r0, r3, #127	; 0x7f
   1962c:	2817      	cmp	r0, #23
   1962e:	d8da      	bhi.n	195e6 <powf+0x25e>
   19630:	f1c3 0096 	rsb	r0, r3, #150	; 0x96
   19634:	2301      	movs	r3, #1
   19636:	fa03 f000 	lsl.w	r0, r3, r0
   1963a:	1e44      	subs	r4, r0, #1
   1963c:	4214      	tst	r4, r2
   1963e:	d1d2      	bne.n	195e6 <powf+0x25e>
   19640:	4010      	ands	r0, r2
   19642:	d0d1      	beq.n	195e8 <powf+0x260>
   19644:	eeb1 0a40 	vneg.f32	s0, s0
   19648:	4618      	mov	r0, r3
   1964a:	e7cd      	b.n	195e8 <powf+0x260>
   1964c:	2900      	cmp	r1, #0
   1964e:	d1af      	bne.n	195b0 <powf+0x228>
   19650:	f484 0280 	eor.w	r2, r4, #4194304	; 0x400000
   19654:	0052      	lsls	r2, r2, #1
   19656:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
   1965a:	d8dc      	bhi.n	19616 <powf+0x28e>
   1965c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   19660:	e71b      	b.n	1949a <powf+0x112>
   19662:	2a00      	cmp	r2, #0
   19664:	f6bf af19 	bge.w	1949a <powf+0x112>
   19668:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   1966c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   19670:	e713      	b.n	1949a <powf+0x112>
   19672:	ee20 0aa0 	vmul.f32	s0, s1, s1
   19676:	e710      	b.n	1949a <powf+0x112>
   19678:	ffd1d571 	.word	0xffd1d571
   1967c:	405fffff 	.word	0x405fffff
   19680:	ffa3aae2 	.word	0xffa3aae2
   19684:	405fffff 	.word	0x405fffff
   19688:	00000000 	.word	0x00000000
   1968c:	c062c000 	.word	0xc062c000
   19690:	00000000 	.word	0x00000000
   19694:	c062a000 	.word	0xc062a000
   19698:	200004b8 	.word	0x200004b8
   1969c:	20000280 	.word	0x20000280
   196a0:	4b000000 	.word	0x4b000000
   196a4:	00000000 	.word	0x00000000

000196a8 <with_errnof>:
   196a8:	b510      	push	{r4, lr}
   196aa:	b082      	sub	sp, #8
   196ac:	ed8d 0a01 	vstr	s0, [sp, #4]
   196b0:	4604      	mov	r4, r0
   196b2:	f009 fe07 	bl	232c4 <__errno>
   196b6:	ed9d 0a01 	vldr	s0, [sp, #4]
   196ba:	6004      	str	r4, [r0, #0]
   196bc:	b002      	add	sp, #8
   196be:	bd10      	pop	{r4, pc}

000196c0 <xflowf>:
   196c0:	b130      	cbz	r0, 196d0 <xflowf+0x10>
   196c2:	eef1 7a40 	vneg.f32	s15, s0
   196c6:	ee27 0a80 	vmul.f32	s0, s15, s0
   196ca:	2022      	movs	r0, #34	; 0x22
   196cc:	f7ff bfec 	b.w	196a8 <with_errnof>
   196d0:	eef0 7a40 	vmov.f32	s15, s0
   196d4:	ee27 0a80 	vmul.f32	s0, s15, s0
   196d8:	2022      	movs	r0, #34	; 0x22
   196da:	f7ff bfe5 	b.w	196a8 <with_errnof>
   196de:	bf00      	nop

000196e0 <__math_uflowf>:
   196e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 196e8 <__math_uflowf+0x8>
   196e4:	f7ff bfec 	b.w	196c0 <xflowf>
   196e8:	10000000 	.word	0x10000000

000196ec <__math_may_uflowf>:
   196ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 196f4 <__math_may_uflowf+0x8>
   196f0:	f7ff bfe6 	b.w	196c0 <xflowf>
   196f4:	1a200000 	.word	0x1a200000

000196f8 <__math_oflowf>:
   196f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 19700 <__math_oflowf+0x8>
   196fc:	f7ff bfe0 	b.w	196c0 <xflowf>
   19700:	70000000 	.word	0x70000000

00019704 <__math_divzerof>:
   19704:	ed9f 0a07 	vldr	s0, [pc, #28]	; 19724 <__math_divzerof+0x20>
   19708:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   1970c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   19710:	2800      	cmp	r0, #0
   19712:	f04f 0022 	mov.w	r0, #34	; 0x22
   19716:	fe47 7a27 	vseleq.f32	s15, s14, s15
   1971a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   1971e:	f7ff bfc3 	b.w	196a8 <with_errnof>
   19722:	bf00      	nop
   19724:	00000000 	.word	0x00000000

00019728 <__math_invalidf>:
   19728:	ee70 7a40 	vsub.f32	s15, s0, s0
   1972c:	eeb4 0a40 	vcmp.f32	s0, s0
   19730:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   19734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   19738:	eeb0 0a47 	vmov.f32	s0, s14
   1973c:	d602      	bvs.n	19744 <__math_invalidf+0x1c>
   1973e:	2021      	movs	r0, #33	; 0x21
   19740:	f7ff bfb2 	b.w	196a8 <with_errnof>
   19744:	4770      	bx	lr
   19746:	bf00      	nop

00019748 <__aeabi_atexit>:
   19748:	4603      	mov	r3, r0
   1974a:	4608      	mov	r0, r1
   1974c:	4619      	mov	r1, r3
   1974e:	f009 bd85 	b.w	2325c <__cxa_atexit>
   19752:	bf00      	nop

00019754 <std::__throw_bad_alloc()>:
   19754:	b508      	push	{r3, lr}
   19756:	2004      	movs	r0, #4
   19758:	f000 f8f4 	bl	19944 <__cxa_allocate_exception>
   1975c:	4b02      	ldr	r3, [pc, #8]	; (19768 <std::__throw_bad_alloc()+0x14>)
   1975e:	4a03      	ldr	r2, [pc, #12]	; (1976c <std::__throw_bad_alloc()+0x18>)
   19760:	4903      	ldr	r1, [pc, #12]	; (19770 <std::__throw_bad_alloc()+0x1c>)
   19762:	6003      	str	r3, [r0, #0]
   19764:	f000 fda2 	bl	1a2ac <__cxa_throw>
   19768:	200029ac 	.word	0x200029ac
   1976c:	00019835 	.word	0x00019835
   19770:	2000242c 	.word	0x2000242c

00019774 <std::__throw_logic_error(char const*)>:
   19774:	b510      	push	{r4, lr}
   19776:	b082      	sub	sp, #8
   19778:	9001      	str	r0, [sp, #4]
   1977a:	2008      	movs	r0, #8
   1977c:	f000 f8e2 	bl	19944 <__cxa_allocate_exception>
   19780:	9901      	ldr	r1, [sp, #4]
   19782:	4604      	mov	r4, r0
   19784:	f000 ff9a 	bl	1a6bc <std::logic_error::logic_error(char const*)>
   19788:	4a04      	ldr	r2, [pc, #16]	; (1979c <std::__throw_logic_error(char const*)+0x28>)
   1978a:	4905      	ldr	r1, [pc, #20]	; (197a0 <std::__throw_logic_error(char const*)+0x2c>)
   1978c:	4620      	mov	r0, r4
   1978e:	f000 fd8d 	bl	1a2ac <__cxa_throw>
   19792:	4620      	mov	r0, r4
   19794:	f000 f8ee 	bl	19974 <__cxa_free_exception>
   19798:	f000 f910 	bl	199bc <__cxa_end_cleanup>
   1979c:	0001a5ad 	.word	0x0001a5ad
   197a0:	200023fc 	.word	0x200023fc

000197a4 <std::__throw_length_error(char const*)>:
   197a4:	b510      	push	{r4, lr}
   197a6:	b082      	sub	sp, #8
   197a8:	9001      	str	r0, [sp, #4]
   197aa:	2008      	movs	r0, #8
   197ac:	f000 f8ca 	bl	19944 <__cxa_allocate_exception>
   197b0:	9901      	ldr	r1, [sp, #4]
   197b2:	4604      	mov	r4, r0
   197b4:	f000 ffc2 	bl	1a73c <std::length_error::length_error(char const*)>
   197b8:	4a04      	ldr	r2, [pc, #16]	; (197cc <std::__throw_length_error(char const*)+0x28>)
   197ba:	4905      	ldr	r1, [pc, #20]	; (197d0 <std::__throw_length_error(char const*)+0x2c>)
   197bc:	4620      	mov	r0, r4
   197be:	f000 fd75 	bl	1a2ac <__cxa_throw>
   197c2:	4620      	mov	r0, r4
   197c4:	f000 f8d6 	bl	19974 <__cxa_free_exception>
   197c8:	f000 f8f8 	bl	199bc <__cxa_end_cleanup>
   197cc:	0001a5ed 	.word	0x0001a5ed
   197d0:	20002408 	.word	0x20002408

000197d4 <std::bad_function_call::what() const>:
   197d4:	4800      	ldr	r0, [pc, #0]	; (197d8 <std::bad_function_call::what() const+0x4>)
   197d6:	4770      	bx	lr
   197d8:	20002350 	.word	0x20002350

000197dc <std::bad_function_call::~bad_function_call()>:
   197dc:	b510      	push	{r4, lr}
   197de:	4b03      	ldr	r3, [pc, #12]	; (197ec <std::bad_function_call::~bad_function_call()+0x10>)
   197e0:	6003      	str	r3, [r0, #0]
   197e2:	4604      	mov	r4, r0
   197e4:	f000 f9b2 	bl	19b4c <std::exception::~exception()>
   197e8:	4620      	mov	r0, r4
   197ea:	bd10      	pop	{r4, pc}
   197ec:	20002998 	.word	0x20002998

000197f0 <std::bad_function_call::~bad_function_call()>:
   197f0:	b510      	push	{r4, lr}
   197f2:	4b05      	ldr	r3, [pc, #20]	; (19808 <std::bad_function_call::~bad_function_call()+0x18>)
   197f4:	6003      	str	r3, [r0, #0]
   197f6:	4604      	mov	r4, r0
   197f8:	f000 f9a8 	bl	19b4c <std::exception::~exception()>
   197fc:	4620      	mov	r0, r4
   197fe:	f7fd fe19 	bl	17434 <operator delete(void*)>
   19802:	4620      	mov	r0, r4
   19804:	bd10      	pop	{r4, pc}
   19806:	bf00      	nop
   19808:	20002998 	.word	0x20002998

0001980c <std::__throw_bad_function_call()>:
   1980c:	b508      	push	{r3, lr}
   1980e:	2004      	movs	r0, #4
   19810:	f000 f898 	bl	19944 <__cxa_allocate_exception>
   19814:	4b02      	ldr	r3, [pc, #8]	; (19820 <std::__throw_bad_function_call()+0x14>)
   19816:	4a03      	ldr	r2, [pc, #12]	; (19824 <std::__throw_bad_function_call()+0x18>)
   19818:	4903      	ldr	r1, [pc, #12]	; (19828 <std::__throw_bad_function_call()+0x1c>)
   1981a:	6003      	str	r3, [r0, #0]
   1981c:	f000 fd46 	bl	1a2ac <__cxa_throw>
   19820:	20002998 	.word	0x20002998
   19824:	000197dd 	.word	0x000197dd
   19828:	20002420 	.word	0x20002420

0001982c <std::bad_alloc::what() const>:
   1982c:	4800      	ldr	r0, [pc, #0]	; (19830 <std::bad_alloc::what() const+0x4>)
   1982e:	4770      	bx	lr
   19830:	20002364 	.word	0x20002364

00019834 <std::bad_alloc::~bad_alloc()>:
   19834:	b510      	push	{r4, lr}
   19836:	4b03      	ldr	r3, [pc, #12]	; (19844 <std::bad_alloc::~bad_alloc()+0x10>)
   19838:	6003      	str	r3, [r0, #0]
   1983a:	4604      	mov	r4, r0
   1983c:	f000 f986 	bl	19b4c <std::exception::~exception()>
   19840:	4620      	mov	r0, r4
   19842:	bd10      	pop	{r4, pc}
   19844:	200029ac 	.word	0x200029ac

00019848 <std::bad_alloc::~bad_alloc()>:
   19848:	b510      	push	{r4, lr}
   1984a:	4b05      	ldr	r3, [pc, #20]	; (19860 <std::bad_alloc::~bad_alloc()+0x18>)
   1984c:	6003      	str	r3, [r0, #0]
   1984e:	4604      	mov	r4, r0
   19850:	f000 f97c 	bl	19b4c <std::exception::~exception()>
   19854:	4620      	mov	r0, r4
   19856:	2104      	movs	r1, #4
   19858:	f7fd fdf4 	bl	17444 <operator delete(void*, unsigned int)>
   1985c:	4620      	mov	r0, r4
   1985e:	bd10      	pop	{r4, pc}
   19860:	200029ac 	.word	0x200029ac

00019864 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>:
   19864:	4920      	ldr	r1, [pc, #128]	; (198e8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x84>)
   19866:	684b      	ldr	r3, [r1, #4]
   19868:	b530      	push	{r4, r5, lr}
   1986a:	f850 5c08 	ldr.w	r5, [r0, #-8]
   1986e:	f1a0 0408 	sub.w	r4, r0, #8
   19872:	b35b      	cbz	r3, 198cc <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
   19874:	eb04 0e05 	add.w	lr, r4, r5
   19878:	4573      	cmp	r3, lr
   1987a:	d827      	bhi.n	198cc <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
   1987c:	d021      	beq.n	198c2 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x5e>
   1987e:	685a      	ldr	r2, [r3, #4]
   19880:	f101 0c04 	add.w	ip, r1, #4
   19884:	b932      	cbnz	r2, 19894 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x30>
   19886:	e00f      	b.n	198a8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x44>
   19888:	6851      	ldr	r1, [r2, #4]
   1988a:	f103 0c04 	add.w	ip, r3, #4
   1988e:	b321      	cbz	r1, 198da <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x76>
   19890:	4613      	mov	r3, r2
   19892:	460a      	mov	r2, r1
   19894:	4596      	cmp	lr, r2
   19896:	d3f7      	bcc.n	19888 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x24>
   19898:	bf04      	itt	eq
   1989a:	e9de 2100 	ldrdeq	r2, r1, [lr]
   1989e:	6059      	streq	r1, [r3, #4]
   198a0:	f8dc 3000 	ldr.w	r3, [ip]
   198a4:	bf08      	it	eq
   198a6:	18ad      	addeq	r5, r5, r2
   198a8:	681a      	ldr	r2, [r3, #0]
   198aa:	1899      	adds	r1, r3, r2
   198ac:	428c      	cmp	r4, r1
   198ae:	d011      	beq.n	198d4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
   198b0:	685b      	ldr	r3, [r3, #4]
   198b2:	f840 3c04 	str.w	r3, [r0, #-4]
   198b6:	f8dc 3000 	ldr.w	r3, [ip]
   198ba:	f840 5c08 	str.w	r5, [r0, #-8]
   198be:	605c      	str	r4, [r3, #4]
   198c0:	bd30      	pop	{r4, r5, pc}
   198c2:	681a      	ldr	r2, [r3, #0]
   198c4:	685b      	ldr	r3, [r3, #4]
   198c6:	442a      	add	r2, r5
   198c8:	f840 2c08 	str.w	r2, [r0, #-8]
   198cc:	f840 3c04 	str.w	r3, [r0, #-4]
   198d0:	604c      	str	r4, [r1, #4]
   198d2:	bd30      	pop	{r4, r5, pc}
   198d4:	442a      	add	r2, r5
   198d6:	601a      	str	r2, [r3, #0]
   198d8:	bd30      	pop	{r4, r5, pc}
   198da:	685b      	ldr	r3, [r3, #4]
   198dc:	681a      	ldr	r2, [r3, #0]
   198de:	1899      	adds	r1, r3, r2
   198e0:	428c      	cmp	r4, r1
   198e2:	d1e5      	bne.n	198b0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x4c>
   198e4:	e7f6      	b.n	198d4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
   198e6:	bf00      	nop
   198e8:	20006ddc 	.word	0x20006ddc

000198ec <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>:
   198ec:	4914      	ldr	r1, [pc, #80]	; (19940 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x54>)
   198ee:	f100 0308 	add.w	r3, r0, #8
   198f2:	6848      	ldr	r0, [r1, #4]
   198f4:	2b08      	cmp	r3, #8
   198f6:	bf38      	it	cc
   198f8:	2308      	movcc	r3, #8
   198fa:	b1f8      	cbz	r0, 1993c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x50>
   198fc:	3307      	adds	r3, #7
   198fe:	f023 0307 	bic.w	r3, r3, #7
   19902:	3104      	adds	r1, #4
   19904:	e002      	b.n	1990c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x20>
   19906:	1d01      	adds	r1, r0, #4
   19908:	6840      	ldr	r0, [r0, #4]
   1990a:	b180      	cbz	r0, 1992e <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x42>
   1990c:	6802      	ldr	r2, [r0, #0]
   1990e:	4293      	cmp	r3, r2
   19910:	d8f9      	bhi.n	19906 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x1a>
   19912:	b430      	push	{r4, r5}
   19914:	1ad4      	subs	r4, r2, r3
   19916:	2c07      	cmp	r4, #7
   19918:	d90a      	bls.n	19930 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x44>
   1991a:	18c5      	adds	r5, r0, r3
   1991c:	6842      	ldr	r2, [r0, #4]
   1991e:	606a      	str	r2, [r5, #4]
   19920:	50c4      	str	r4, [r0, r3]
   19922:	6808      	ldr	r0, [r1, #0]
   19924:	6003      	str	r3, [r0, #0]
   19926:	600d      	str	r5, [r1, #0]
   19928:	3008      	adds	r0, #8
   1992a:	bc30      	pop	{r4, r5}
   1992c:	4770      	bx	lr
   1992e:	4770      	bx	lr
   19930:	6845      	ldr	r5, [r0, #4]
   19932:	6002      	str	r2, [r0, #0]
   19934:	600d      	str	r5, [r1, #0]
   19936:	3008      	adds	r0, #8
   19938:	bc30      	pop	{r4, r5}
   1993a:	4770      	bx	lr
   1993c:	4770      	bx	lr
   1993e:	bf00      	nop
   19940:	20006ddc 	.word	0x20006ddc

00019944 <__cxa_allocate_exception>:
   19944:	b510      	push	{r4, lr}
   19946:	f100 0480 	add.w	r4, r0, #128	; 0x80
   1994a:	4620      	mov	r0, r4
   1994c:	f008 f9c4 	bl	21cd8 <malloc>
   19950:	4603      	mov	r3, r0
   19952:	b130      	cbz	r0, 19962 <__cxa_allocate_exception+0x1e>
   19954:	2280      	movs	r2, #128	; 0x80
   19956:	2100      	movs	r1, #0
   19958:	4618      	mov	r0, r3
   1995a:	f009 fb7d 	bl	23058 <memset>
   1995e:	3080      	adds	r0, #128	; 0x80
   19960:	bd10      	pop	{r4, pc}
   19962:	4620      	mov	r0, r4
   19964:	f7ff ffc2 	bl	198ec <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>
   19968:	4603      	mov	r3, r0
   1996a:	2800      	cmp	r0, #0
   1996c:	d1f2      	bne.n	19954 <__cxa_allocate_exception+0x10>
   1996e:	f000 fc23 	bl	1a1b8 <std::terminate()>
   19972:	bf00      	nop

00019974 <__cxa_free_exception>:
   19974:	4a06      	ldr	r2, [pc, #24]	; (19990 <__cxa_free_exception+0x1c>)
   19976:	6893      	ldr	r3, [r2, #8]
   19978:	3880      	subs	r0, #128	; 0x80
   1997a:	4298      	cmp	r0, r3
   1997c:	d905      	bls.n	1998a <__cxa_free_exception+0x16>
   1997e:	68d2      	ldr	r2, [r2, #12]
   19980:	4413      	add	r3, r2
   19982:	4298      	cmp	r0, r3
   19984:	d201      	bcs.n	1998a <__cxa_free_exception+0x16>
   19986:	f7ff bf6d 	b.w	19864 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>
   1998a:	f008 b9ad 	b.w	21ce8 <free>
   1998e:	bf00      	nop
   19990:	20006ddc 	.word	0x20006ddc

00019994 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   19994:	b538      	push	{r3, r4, r5, lr}
   19996:	4c08      	ldr	r4, [pc, #32]	; (199b8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   19998:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   1999c:	4628      	mov	r0, r5
   1999e:	60e5      	str	r5, [r4, #12]
   199a0:	f008 f99a 	bl	21cd8 <malloc>
   199a4:	60a0      	str	r0, [r4, #8]
   199a6:	b120      	cbz	r0, 199b2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   199a8:	2300      	movs	r3, #0
   199aa:	e9c0 5300 	strd	r5, r3, [r0]
   199ae:	6060      	str	r0, [r4, #4]
   199b0:	bd38      	pop	{r3, r4, r5, pc}
   199b2:	60e0      	str	r0, [r4, #12]
   199b4:	6060      	str	r0, [r4, #4]
   199b6:	bd38      	pop	{r3, r4, r5, pc}
   199b8:	20006ddc 	.word	0x20006ddc

000199bc <__cxa_end_cleanup>:
   199bc:	b41e      	push	{r1, r2, r3, r4}
   199be:	f000 f88d 	bl	19adc <__gnu_end_cleanup>
   199c2:	bc1e      	pop	{r1, r2, r3, r4}
   199c4:	f007 ff8a 	bl	218dc <_Unwind_Resume>

000199c8 <__cxa_type_match>:
   199c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   199ca:	7802      	ldrb	r2, [r0, #0]
   199cc:	2a47      	cmp	r2, #71	; 0x47
   199ce:	b083      	sub	sp, #12
   199d0:	460c      	mov	r4, r1
   199d2:	461d      	mov	r5, r3
   199d4:	d019      	beq.n	19a0a <__cxa_type_match+0x42>
   199d6:	4e26      	ldr	r6, [pc, #152]	; (19a70 <__cxa_type_match+0xa8>)
   199d8:	2000      	movs	r0, #0
   199da:	6833      	ldr	r3, [r6, #0]
   199dc:	9001      	str	r0, [sp, #4]
   199de:	689b      	ldr	r3, [r3, #8]
   199e0:	4630      	mov	r0, r6
   199e2:	4798      	blx	r3
   199e4:	b178      	cbz	r0, 19a06 <__cxa_type_match+0x3e>
   199e6:	9b01      	ldr	r3, [sp, #4]
   199e8:	681b      	ldr	r3, [r3, #0]
   199ea:	9301      	str	r3, [sp, #4]
   199ec:	2702      	movs	r7, #2
   199ee:	6823      	ldr	r3, [r4, #0]
   199f0:	4631      	mov	r1, r6
   199f2:	4620      	mov	r0, r4
   199f4:	691e      	ldr	r6, [r3, #16]
   199f6:	aa01      	add	r2, sp, #4
   199f8:	2301      	movs	r3, #1
   199fa:	47b0      	blx	r6
   199fc:	bb10      	cbnz	r0, 19a44 <__cxa_type_match+0x7c>
   199fe:	4607      	mov	r7, r0
   19a00:	4638      	mov	r0, r7
   19a02:	b003      	add	sp, #12
   19a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a06:	2701      	movs	r7, #1
   19a08:	e7f1      	b.n	199ee <__cxa_type_match+0x26>
   19a0a:	7843      	ldrb	r3, [r0, #1]
   19a0c:	2b4e      	cmp	r3, #78	; 0x4e
   19a0e:	d1e2      	bne.n	199d6 <__cxa_type_match+0xe>
   19a10:	7883      	ldrb	r3, [r0, #2]
   19a12:	2b55      	cmp	r3, #85	; 0x55
   19a14:	d1df      	bne.n	199d6 <__cxa_type_match+0xe>
   19a16:	78c3      	ldrb	r3, [r0, #3]
   19a18:	2b43      	cmp	r3, #67	; 0x43
   19a1a:	d1dc      	bne.n	199d6 <__cxa_type_match+0xe>
   19a1c:	7903      	ldrb	r3, [r0, #4]
   19a1e:	2b46      	cmp	r3, #70	; 0x46
   19a20:	d01a      	beq.n	19a58 <__cxa_type_match+0x90>
   19a22:	7903      	ldrb	r3, [r0, #4]
   19a24:	2b43      	cmp	r3, #67	; 0x43
   19a26:	d1d6      	bne.n	199d6 <__cxa_type_match+0xe>
   19a28:	7943      	ldrb	r3, [r0, #5]
   19a2a:	2b2b      	cmp	r3, #43	; 0x2b
   19a2c:	d1d3      	bne.n	199d6 <__cxa_type_match+0xe>
   19a2e:	7983      	ldrb	r3, [r0, #6]
   19a30:	2b2b      	cmp	r3, #43	; 0x2b
   19a32:	d1d0      	bne.n	199d6 <__cxa_type_match+0xe>
   19a34:	79c3      	ldrb	r3, [r0, #7]
   19a36:	2b01      	cmp	r3, #1
   19a38:	d8cd      	bhi.n	199d6 <__cxa_type_match+0xe>
   19a3a:	d008      	beq.n	19a4e <__cxa_type_match+0x86>
   19a3c:	f850 6c20 	ldr.w	r6, [r0, #-32]
   19a40:	3058      	adds	r0, #88	; 0x58
   19a42:	e7ca      	b.n	199da <__cxa_type_match+0x12>
   19a44:	9b01      	ldr	r3, [sp, #4]
   19a46:	602b      	str	r3, [r5, #0]
   19a48:	4638      	mov	r0, r7
   19a4a:	b003      	add	sp, #12
   19a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19a4e:	f850 0c20 	ldr.w	r0, [r0, #-32]
   19a52:	f850 6c78 	ldr.w	r6, [r0, #-120]
   19a56:	e7c0      	b.n	199da <__cxa_type_match+0x12>
   19a58:	7943      	ldrb	r3, [r0, #5]
   19a5a:	2b4f      	cmp	r3, #79	; 0x4f
   19a5c:	d1e1      	bne.n	19a22 <__cxa_type_match+0x5a>
   19a5e:	7983      	ldrb	r3, [r0, #6]
   19a60:	2b52      	cmp	r3, #82	; 0x52
   19a62:	d1de      	bne.n	19a22 <__cxa_type_match+0x5a>
   19a64:	79c3      	ldrb	r3, [r0, #7]
   19a66:	2b00      	cmp	r3, #0
   19a68:	d1db      	bne.n	19a22 <__cxa_type_match+0x5a>
   19a6a:	4e02      	ldr	r6, [pc, #8]	; (19a74 <__cxa_type_match+0xac>)
   19a6c:	4618      	mov	r0, r3
   19a6e:	e7b4      	b.n	199da <__cxa_type_match+0x12>
   19a70:	200023e8 	.word	0x200023e8
   19a74:	200023d4 	.word	0x200023d4

00019a78 <__cxa_begin_cleanup>:
   19a78:	b510      	push	{r4, lr}
   19a7a:	4604      	mov	r4, r0
   19a7c:	f000 f87a 	bl	19b74 <__cxa_get_globals>
   19a80:	4622      	mov	r2, r4
   19a82:	f812 3920 	ldrb.w	r3, [r2], #-32
   19a86:	2b47      	cmp	r3, #71	; 0x47
   19a88:	d004      	beq.n	19a94 <__cxa_begin_cleanup+0x1c>
   19a8a:	6883      	ldr	r3, [r0, #8]
   19a8c:	bb23      	cbnz	r3, 19ad8 <__cxa_begin_cleanup+0x60>
   19a8e:	6082      	str	r2, [r0, #8]
   19a90:	2001      	movs	r0, #1
   19a92:	bd10      	pop	{r4, pc}
   19a94:	7863      	ldrb	r3, [r4, #1]
   19a96:	2b4e      	cmp	r3, #78	; 0x4e
   19a98:	d1f7      	bne.n	19a8a <__cxa_begin_cleanup+0x12>
   19a9a:	78a3      	ldrb	r3, [r4, #2]
   19a9c:	2b55      	cmp	r3, #85	; 0x55
   19a9e:	d1f4      	bne.n	19a8a <__cxa_begin_cleanup+0x12>
   19aa0:	78e3      	ldrb	r3, [r4, #3]
   19aa2:	2b43      	cmp	r3, #67	; 0x43
   19aa4:	d1f1      	bne.n	19a8a <__cxa_begin_cleanup+0x12>
   19aa6:	7923      	ldrb	r3, [r4, #4]
   19aa8:	2b43      	cmp	r3, #67	; 0x43
   19aaa:	d1ee      	bne.n	19a8a <__cxa_begin_cleanup+0x12>
   19aac:	7963      	ldrb	r3, [r4, #5]
   19aae:	2b2b      	cmp	r3, #43	; 0x2b
   19ab0:	d1eb      	bne.n	19a8a <__cxa_begin_cleanup+0x12>
   19ab2:	79a3      	ldrb	r3, [r4, #6]
   19ab4:	2b2b      	cmp	r3, #43	; 0x2b
   19ab6:	d1e8      	bne.n	19a8a <__cxa_begin_cleanup+0x12>
   19ab8:	79e3      	ldrb	r3, [r4, #7]
   19aba:	2b01      	cmp	r3, #1
   19abc:	d8e5      	bhi.n	19a8a <__cxa_begin_cleanup+0x12>
   19abe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19ac2:	3301      	adds	r3, #1
   19ac4:	2b01      	cmp	r3, #1
   19ac6:	f844 3c04 	str.w	r3, [r4, #-4]
   19aca:	d1e1      	bne.n	19a90 <__cxa_begin_cleanup+0x18>
   19acc:	6883      	ldr	r3, [r0, #8]
   19ace:	f844 3c08 	str.w	r3, [r4, #-8]
   19ad2:	6082      	str	r2, [r0, #8]
   19ad4:	2001      	movs	r0, #1
   19ad6:	bd10      	pop	{r4, pc}
   19ad8:	f000 fb6e 	bl	1a1b8 <std::terminate()>

00019adc <__gnu_end_cleanup>:
   19adc:	b508      	push	{r3, lr}
   19ade:	f000 f849 	bl	19b74 <__cxa_get_globals>
   19ae2:	6883      	ldr	r3, [r0, #8]
   19ae4:	b383      	cbz	r3, 19b48 <__gnu_end_cleanup+0x6c>
   19ae6:	f893 2020 	ldrb.w	r2, [r3, #32]
   19aea:	2a47      	cmp	r2, #71	; 0x47
   19aec:	d004      	beq.n	19af8 <__gnu_end_cleanup+0x1c>
   19aee:	2200      	movs	r2, #0
   19af0:	6082      	str	r2, [r0, #8]
   19af2:	f103 0020 	add.w	r0, r3, #32
   19af6:	bd08      	pop	{r3, pc}
   19af8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   19afc:	2a4e      	cmp	r2, #78	; 0x4e
   19afe:	d1f6      	bne.n	19aee <__gnu_end_cleanup+0x12>
   19b00:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   19b04:	2a55      	cmp	r2, #85	; 0x55
   19b06:	d1f2      	bne.n	19aee <__gnu_end_cleanup+0x12>
   19b08:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   19b0c:	2a43      	cmp	r2, #67	; 0x43
   19b0e:	d1ee      	bne.n	19aee <__gnu_end_cleanup+0x12>
   19b10:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19b14:	2a43      	cmp	r2, #67	; 0x43
   19b16:	d1ea      	bne.n	19aee <__gnu_end_cleanup+0x12>
   19b18:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   19b1c:	2a2b      	cmp	r2, #43	; 0x2b
   19b1e:	d1e6      	bne.n	19aee <__gnu_end_cleanup+0x12>
   19b20:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   19b24:	2a2b      	cmp	r2, #43	; 0x2b
   19b26:	d1e2      	bne.n	19aee <__gnu_end_cleanup+0x12>
   19b28:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   19b2c:	2a01      	cmp	r2, #1
   19b2e:	d8de      	bhi.n	19aee <__gnu_end_cleanup+0x12>
   19b30:	69da      	ldr	r2, [r3, #28]
   19b32:	3a01      	subs	r2, #1
   19b34:	61da      	str	r2, [r3, #28]
   19b36:	2a00      	cmp	r2, #0
   19b38:	d1db      	bne.n	19af2 <__gnu_end_cleanup+0x16>
   19b3a:	6999      	ldr	r1, [r3, #24]
   19b3c:	6081      	str	r1, [r0, #8]
   19b3e:	2200      	movs	r2, #0
   19b40:	619a      	str	r2, [r3, #24]
   19b42:	f103 0020 	add.w	r0, r3, #32
   19b46:	bd08      	pop	{r3, pc}
   19b48:	f000 fb36 	bl	1a1b8 <std::terminate()>

00019b4c <std::exception::~exception()>:
   19b4c:	4770      	bx	lr
   19b4e:	bf00      	nop

00019b50 <std::bad_exception::~bad_exception()>:
   19b50:	4770      	bx	lr
   19b52:	bf00      	nop

00019b54 <transaction clone for std::bad_exception::what() const>:
   19b54:	4800      	ldr	r0, [pc, #0]	; (19b58 <transaction clone for std::bad_exception::what() const+0x4>)
   19b56:	4770      	bx	lr
   19b58:	2000233c 	.word	0x2000233c

00019b5c <std::bad_exception::~bad_exception()>:
   19b5c:	b510      	push	{r4, lr}
   19b5e:	2104      	movs	r1, #4
   19b60:	4604      	mov	r4, r0
   19b62:	f7fd fc6f 	bl	17444 <operator delete(void*, unsigned int)>
   19b66:	4620      	mov	r0, r4
   19b68:	bd10      	pop	{r4, pc}
   19b6a:	bf00      	nop

00019b6c <__cxa_get_globals_fast>:
   19b6c:	4800      	ldr	r0, [pc, #0]	; (19b70 <__cxa_get_globals_fast+0x4>)
   19b6e:	4770      	bx	lr
   19b70:	20006b54 	.word	0x20006b54

00019b74 <__cxa_get_globals>:
   19b74:	4800      	ldr	r0, [pc, #0]	; (19b78 <__cxa_get_globals+0x4>)
   19b76:	4770      	bx	lr
   19b78:	20006b54 	.word	0x20006b54

00019b7c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
   19b7c:	2850      	cmp	r0, #80	; 0x50
   19b7e:	b570      	push	{r4, r5, r6, lr}
   19b80:	d01d      	beq.n	19bbe <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x42>
   19b82:	4684      	mov	ip, r0
   19b84:	f000 000f 	and.w	r0, r0, #15
   19b88:	280c      	cmp	r0, #12
   19b8a:	d855      	bhi.n	19c38 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xbc>
   19b8c:	e8df f000 	tbb	[pc, r0]
   19b90:	07264407 	.word	0x07264407
   19b94:	5454541e 	.word	0x5454541e
   19b98:	07222a54 	.word	0x07222a54
   19b9c:	1e          	.byte	0x1e
   19b9d:	00          	.byte	0x00
   19b9e:	4610      	mov	r0, r2
   19ba0:	f850 6b04 	ldr.w	r6, [r0], #4
   19ba4:	b14e      	cbz	r6, 19bba <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x3e>
   19ba6:	f00c 0470 	and.w	r4, ip, #112	; 0x70
   19baa:	2c10      	cmp	r4, #16
   19bac:	bf08      	it	eq
   19bae:	4611      	moveq	r1, r2
   19bb0:	440e      	add	r6, r1
   19bb2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   19bb6:	bf18      	it	ne
   19bb8:	6836      	ldrne	r6, [r6, #0]
   19bba:	601e      	str	r6, [r3, #0]
   19bbc:	bd70      	pop	{r4, r5, r6, pc}
   19bbe:	1cd0      	adds	r0, r2, #3
   19bc0:	f020 0003 	bic.w	r0, r0, #3
   19bc4:	f850 6b04 	ldr.w	r6, [r0], #4
   19bc8:	601e      	str	r6, [r3, #0]
   19bca:	bd70      	pop	{r4, r5, r6, pc}
   19bcc:	4610      	mov	r0, r2
   19bce:	f850 6b08 	ldr.w	r6, [r0], #8
   19bd2:	e7e7      	b.n	19ba4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19bd4:	4610      	mov	r0, r2
   19bd6:	f930 6b02 	ldrsh.w	r6, [r0], #2
   19bda:	e7e3      	b.n	19ba4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19bdc:	4610      	mov	r0, r2
   19bde:	f830 6b02 	ldrh.w	r6, [r0], #2
   19be2:	e7df      	b.n	19ba4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19be4:	2600      	movs	r6, #0
   19be6:	4610      	mov	r0, r2
   19be8:	4634      	mov	r4, r6
   19bea:	f810 5b01 	ldrb.w	r5, [r0], #1
   19bee:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   19bf2:	fa0e fe04 	lsl.w	lr, lr, r4
   19bf6:	f015 0f80 	tst.w	r5, #128	; 0x80
   19bfa:	ea46 060e 	orr.w	r6, r6, lr
   19bfe:	f104 0407 	add.w	r4, r4, #7
   19c02:	d1f2      	bne.n	19bea <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
   19c04:	2c1f      	cmp	r4, #31
   19c06:	d8cd      	bhi.n	19ba4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19c08:	066d      	lsls	r5, r5, #25
   19c0a:	d5cb      	bpl.n	19ba4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19c0c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19c10:	fa05 f404 	lsl.w	r4, r5, r4
   19c14:	4326      	orrs	r6, r4
   19c16:	e7c6      	b.n	19ba6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2a>
   19c18:	2600      	movs	r6, #0
   19c1a:	4610      	mov	r0, r2
   19c1c:	4634      	mov	r4, r6
   19c1e:	f810 5b01 	ldrb.w	r5, [r0], #1
   19c22:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   19c26:	fa0e fe04 	lsl.w	lr, lr, r4
   19c2a:	062d      	lsls	r5, r5, #24
   19c2c:	ea46 060e 	orr.w	r6, r6, lr
   19c30:	f104 0407 	add.w	r4, r4, #7
   19c34:	d4f3      	bmi.n	19c1e <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xa2>
   19c36:	e7b5      	b.n	19ba4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19c38:	f7fd ff8f 	bl	17b5a <abort>

00019c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
   19c3c:	28ff      	cmp	r0, #255	; 0xff
   19c3e:	b508      	push	{r3, lr}
   19c40:	4603      	mov	r3, r0
   19c42:	d019      	beq.n	19c78 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
   19c44:	f003 0270 	and.w	r2, r3, #112	; 0x70
   19c48:	2a30      	cmp	r2, #48	; 0x30
   19c4a:	4608      	mov	r0, r1
   19c4c:	d016      	beq.n	19c7c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
   19c4e:	d805      	bhi.n	19c5c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
   19c50:	2a20      	cmp	r2, #32
   19c52:	d109      	bne.n	19c68 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2c>
   19c54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19c58:	f008 b823 	b.w	21ca2 <_Unwind_GetTextRelBase>
   19c5c:	2a40      	cmp	r2, #64	; 0x40
   19c5e:	d109      	bne.n	19c74 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
   19c60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19c64:	f008 b80a 	b.w	21c7c <_Unwind_GetRegionStart>
   19c68:	d802      	bhi.n	19c70 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
   19c6a:	f013 0f60 	tst.w	r3, #96	; 0x60
   19c6e:	d003      	beq.n	19c78 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
   19c70:	f7fd ff73 	bl	17b5a <abort>
   19c74:	2a50      	cmp	r2, #80	; 0x50
   19c76:	d1fb      	bne.n	19c70 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
   19c78:	2000      	movs	r0, #0
   19c7a:	bd08      	pop	{r3, pc}
   19c7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19c80:	f008 b80c 	b.w	21c9c <_Unwind_GetDataRelBase>

00019c84 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
   19c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c86:	460c      	mov	r4, r1
   19c88:	4615      	mov	r5, r2
   19c8a:	4606      	mov	r6, r0
   19c8c:	b108      	cbz	r0, 19c92 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0xe>
   19c8e:	f007 fff5 	bl	21c7c <_Unwind_GetRegionStart>
   19c92:	6028      	str	r0, [r5, #0]
   19c94:	f814 7b01 	ldrb.w	r7, [r4], #1
   19c98:	2fff      	cmp	r7, #255	; 0xff
   19c9a:	d128      	bne.n	19cee <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x6a>
   19c9c:	6068      	str	r0, [r5, #4]
   19c9e:	4620      	mov	r0, r4
   19ca0:	f810 3b01 	ldrb.w	r3, [r0], #1
   19ca4:	2bff      	cmp	r3, #255	; 0xff
   19ca6:	d032      	beq.n	19d0e <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x8a>
   19ca8:	2310      	movs	r3, #16
   19caa:	2400      	movs	r4, #0
   19cac:	752b      	strb	r3, [r5, #20]
   19cae:	4622      	mov	r2, r4
   19cb0:	f810 1b01 	ldrb.w	r1, [r0], #1
   19cb4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   19cb8:	4093      	lsls	r3, r2
   19cba:	0609      	lsls	r1, r1, #24
   19cbc:	ea44 0403 	orr.w	r4, r4, r3
   19cc0:	f102 0207 	add.w	r2, r2, #7
   19cc4:	d4f4      	bmi.n	19cb0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x2c>
   19cc6:	4404      	add	r4, r0
   19cc8:	60ec      	str	r4, [r5, #12]
   19cca:	f810 3b01 	ldrb.w	r3, [r0], #1
   19cce:	756b      	strb	r3, [r5, #21]
   19cd0:	2400      	movs	r4, #0
   19cd2:	4622      	mov	r2, r4
   19cd4:	f810 1b01 	ldrb.w	r1, [r0], #1
   19cd8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   19cdc:	4093      	lsls	r3, r2
   19cde:	431c      	orrs	r4, r3
   19ce0:	060b      	lsls	r3, r1, #24
   19ce2:	f102 0207 	add.w	r2, r2, #7
   19ce6:	d4f5      	bmi.n	19cd4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x50>
   19ce8:	4404      	add	r4, r0
   19cea:	612c      	str	r4, [r5, #16]
   19cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19cee:	4631      	mov	r1, r6
   19cf0:	4638      	mov	r0, r7
   19cf2:	f7ff ffa3 	bl	19c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19cf6:	4622      	mov	r2, r4
   19cf8:	4601      	mov	r1, r0
   19cfa:	1d2b      	adds	r3, r5, #4
   19cfc:	4638      	mov	r0, r7
   19cfe:	f7ff ff3d 	bl	19b7c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   19d02:	4604      	mov	r4, r0
   19d04:	4620      	mov	r0, r4
   19d06:	f810 3b01 	ldrb.w	r3, [r0], #1
   19d0a:	2bff      	cmp	r3, #255	; 0xff
   19d0c:	d1cc      	bne.n	19ca8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x24>
   19d0e:	752b      	strb	r3, [r5, #20]
   19d10:	2400      	movs	r4, #0
   19d12:	e7d9      	b.n	19cc8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>

00019d14 <__gxx_personality_v0>:
   19d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d18:	f000 0403 	and.w	r4, r0, #3
   19d1c:	b093      	sub	sp, #76	; 0x4c
   19d1e:	2300      	movs	r3, #0
   19d20:	2c01      	cmp	r4, #1
   19d22:	9308      	str	r3, [sp, #32]
   19d24:	460f      	mov	r7, r1
   19d26:	4690      	mov	r8, r2
   19d28:	d013      	beq.n	19d52 <__gxx_personality_v0+0x3e>
   19d2a:	2c02      	cmp	r4, #2
   19d2c:	d108      	bne.n	19d40 <__gxx_personality_v0+0x2c>
   19d2e:	4641      	mov	r1, r8
   19d30:	4638      	mov	r0, r7
   19d32:	f007 ff8d 	bl	21c50 <__gnu_unwind_frame>
   19d36:	b940      	cbnz	r0, 19d4a <__gxx_personality_v0+0x36>
   19d38:	2008      	movs	r0, #8
   19d3a:	b013      	add	sp, #76	; 0x4c
   19d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d40:	2c00      	cmp	r4, #0
   19d42:	f000 8093 	beq.w	19e6c <__gxx_personality_v0+0x158>
   19d46:	f7fd ff08 	bl	17b5a <abort>
   19d4a:	2009      	movs	r0, #9
   19d4c:	b013      	add	sp, #76	; 0x4c
   19d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d52:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   19d56:	f010 0408 	ands.w	r4, r0, #8
   19d5a:	f8cd a000 	str.w	sl, [sp]
   19d5e:	f000 809a 	beq.w	19e96 <__gxx_personality_v0+0x182>
   19d62:	f044 0202 	orr.w	r2, r4, #2
   19d66:	9202      	str	r2, [sp, #8]
   19d68:	910c      	str	r1, [sp, #48]	; 0x30
   19d6a:	220c      	movs	r2, #12
   19d6c:	4619      	mov	r1, r3
   19d6e:	4640      	mov	r0, r8
   19d70:	f007 fa08 	bl	21184 <_Unwind_VRS_Set>
   19d74:	4640      	mov	r0, r8
   19d76:	f007 ff87 	bl	21c88 <_Unwind_GetLanguageSpecificData>
   19d7a:	4683      	mov	fp, r0
   19d7c:	2800      	cmp	r0, #0
   19d7e:	d0d6      	beq.n	19d2e <__gxx_personality_v0+0x1a>
   19d80:	4652      	mov	r2, sl
   19d82:	4601      	mov	r1, r0
   19d84:	4640      	mov	r0, r8
   19d86:	f7ff ff7d 	bl	19c84 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
   19d8a:	4641      	mov	r1, r8
   19d8c:	4605      	mov	r5, r0
   19d8e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   19d92:	f7ff ff53 	bl	19c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19d96:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   19d9a:	2300      	movs	r3, #0
   19d9c:	900e      	str	r0, [sp, #56]	; 0x38
   19d9e:	4619      	mov	r1, r3
   19da0:	f8cd 9000 	str.w	r9, [sp]
   19da4:	220f      	movs	r2, #15
   19da6:	4640      	mov	r0, r8
   19da8:	f007 f9c6 	bl	21138 <_Unwind_VRS_Get>
   19dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19dae:	f023 0301 	bic.w	r3, r3, #1
   19db2:	1e5e      	subs	r6, r3, #1
   19db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19db6:	429d      	cmp	r5, r3
   19db8:	f080 80bd 	bcs.w	19f36 <__gxx_personality_v0+0x222>
   19dbc:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
   19dc0:	2100      	movs	r1, #0
   19dc2:	4620      	mov	r0, r4
   19dc4:	f7ff ff3a 	bl	19c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19dc8:	462a      	mov	r2, r5
   19dca:	4601      	mov	r1, r0
   19dcc:	ab09      	add	r3, sp, #36	; 0x24
   19dce:	4620      	mov	r0, r4
   19dd0:	f7ff fed4 	bl	19b7c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   19dd4:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   19dd8:	4604      	mov	r4, r0
   19dda:	2100      	movs	r1, #0
   19ddc:	4628      	mov	r0, r5
   19dde:	f7ff ff2d 	bl	19c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19de2:	4622      	mov	r2, r4
   19de4:	4601      	mov	r1, r0
   19de6:	ab0a      	add	r3, sp, #40	; 0x28
   19de8:	4628      	mov	r0, r5
   19dea:	f7ff fec7 	bl	19b7c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   19dee:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   19df2:	4604      	mov	r4, r0
   19df4:	2100      	movs	r1, #0
   19df6:	4628      	mov	r0, r5
   19df8:	f7ff ff20 	bl	19c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19dfc:	4622      	mov	r2, r4
   19dfe:	4601      	mov	r1, r0
   19e00:	464b      	mov	r3, r9
   19e02:	4628      	mov	r0, r5
   19e04:	f7ff feba 	bl	19b7c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   19e08:	2400      	movs	r4, #0
   19e0a:	4605      	mov	r5, r0
   19e0c:	4622      	mov	r2, r4
   19e0e:	f815 1b01 	ldrb.w	r1, [r5], #1
   19e12:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   19e16:	4093      	lsls	r3, r2
   19e18:	431c      	orrs	r4, r3
   19e1a:	060b      	lsls	r3, r1, #24
   19e1c:	f102 0207 	add.w	r2, r2, #7
   19e20:	d4f5      	bmi.n	19e0e <__gxx_personality_v0+0xfa>
   19e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19e26:	4413      	add	r3, r2
   19e28:	42b3      	cmp	r3, r6
   19e2a:	d917      	bls.n	19e5c <__gxx_personality_v0+0x148>
   19e2c:	9b02      	ldr	r3, [sp, #8]
   19e2e:	07d8      	lsls	r0, r3, #31
   19e30:	d52d      	bpl.n	19e8e <__gxx_personality_v0+0x17a>
   19e32:	2400      	movs	r4, #0
   19e34:	9403      	str	r4, [sp, #12]
   19e36:	2300      	movs	r3, #0
   19e38:	4619      	mov	r1, r3
   19e3a:	f8cd 9000 	str.w	r9, [sp]
   19e3e:	4640      	mov	r0, r8
   19e40:	220d      	movs	r2, #13
   19e42:	9d08      	ldr	r5, [sp, #32]
   19e44:	f007 f978 	bl	21138 <_Unwind_VRS_Get>
   19e48:	9b03      	ldr	r3, [sp, #12]
   19e4a:	633b      	str	r3, [r7, #48]	; 0x30
   19e4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19e4e:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   19e52:	e9c7 5409 	strd	r5, r4, [r7, #36]	; 0x24
   19e56:	2006      	movs	r0, #6
   19e58:	623b      	str	r3, [r7, #32]
   19e5a:	e76e      	b.n	19d3a <__gxx_personality_v0+0x26>
   19e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19e5e:	4413      	add	r3, r2
   19e60:	42b3      	cmp	r3, r6
   19e62:	d872      	bhi.n	19f4a <__gxx_personality_v0+0x236>
   19e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19e66:	42ab      	cmp	r3, r5
   19e68:	d8a8      	bhi.n	19dbc <__gxx_personality_v0+0xa8>
   19e6a:	e7df      	b.n	19e2c <__gxx_personality_v0+0x118>
   19e6c:	0702      	lsls	r2, r0, #28
   19e6e:	f53f af5e 	bmi.w	19d2e <__gxx_personality_v0+0x1a>
   19e72:	2301      	movs	r3, #1
   19e74:	9302      	str	r3, [sp, #8]
   19e76:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   19e7a:	2300      	movs	r3, #0
   19e7c:	f8cd a000 	str.w	sl, [sp]
   19e80:	220c      	movs	r2, #12
   19e82:	4619      	mov	r1, r3
   19e84:	4640      	mov	r0, r8
   19e86:	970c      	str	r7, [sp, #48]	; 0x30
   19e88:	f007 f97c 	bl	21184 <_Unwind_VRS_Set>
   19e8c:	e772      	b.n	19d74 <__gxx_personality_v0+0x60>
   19e8e:	0719      	lsls	r1, r3, #28
   19e90:	d558      	bpl.n	19f44 <__gxx_personality_v0+0x230>
   19e92:	f000 f991 	bl	1a1b8 <std::terminate()>
   19e96:	6a0d      	ldr	r5, [r1, #32]
   19e98:	4623      	mov	r3, r4
   19e9a:	220d      	movs	r2, #13
   19e9c:	4621      	mov	r1, r4
   19e9e:	4640      	mov	r0, r8
   19ea0:	f007 f94a 	bl	21138 <_Unwind_VRS_Get>
   19ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19ea6:	429d      	cmp	r5, r3
   19ea8:	d002      	beq.n	19eb0 <__gxx_personality_v0+0x19c>
   19eaa:	2302      	movs	r3, #2
   19eac:	9302      	str	r3, [sp, #8]
   19eae:	e7e4      	b.n	19e7a <__gxx_personality_v0+0x166>
   19eb0:	4623      	mov	r3, r4
   19eb2:	4621      	mov	r1, r4
   19eb4:	220c      	movs	r2, #12
   19eb6:	f8cd a000 	str.w	sl, [sp]
   19eba:	4640      	mov	r0, r8
   19ebc:	970c      	str	r7, [sp, #48]	; 0x30
   19ebe:	f007 f961 	bl	21184 <_Unwind_VRS_Set>
   19ec2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   19ec4:	9203      	str	r2, [sp, #12]
   19ec6:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	; 0x28
   19eca:	2a00      	cmp	r2, #0
   19ecc:	d03a      	beq.n	19f44 <__gxx_personality_v0+0x230>
   19ece:	469b      	mov	fp, r3
   19ed0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   19ed4:	2c00      	cmp	r4, #0
   19ed6:	db54      	blt.n	19f82 <__gxx_personality_v0+0x26e>
   19ed8:	2503      	movs	r5, #3
   19eda:	2300      	movs	r3, #0
   19edc:	461a      	mov	r2, r3
   19ede:	4619      	mov	r1, r3
   19ee0:	f8cd 9000 	str.w	r9, [sp]
   19ee4:	4640      	mov	r0, r8
   19ee6:	970b      	str	r7, [sp, #44]	; 0x2c
   19ee8:	f007 f94c 	bl	21184 <_Unwind_VRS_Set>
   19eec:	2300      	movs	r3, #0
   19eee:	4619      	mov	r1, r3
   19ef0:	2201      	movs	r2, #1
   19ef2:	f8cd 9000 	str.w	r9, [sp]
   19ef6:	4640      	mov	r0, r8
   19ef8:	940b      	str	r4, [sp, #44]	; 0x2c
   19efa:	f007 f943 	bl	21184 <_Unwind_VRS_Set>
   19efe:	2300      	movs	r3, #0
   19f00:	4619      	mov	r1, r3
   19f02:	220f      	movs	r2, #15
   19f04:	f8cd 9000 	str.w	r9, [sp]
   19f08:	4640      	mov	r0, r8
   19f0a:	f007 f915 	bl	21138 <_Unwind_VRS_Get>
   19f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19f10:	9903      	ldr	r1, [sp, #12]
   19f12:	f8cd 9000 	str.w	r9, [sp]
   19f16:	f002 0201 	and.w	r2, r2, #1
   19f1a:	430a      	orrs	r2, r1
   19f1c:	2300      	movs	r3, #0
   19f1e:	920b      	str	r2, [sp, #44]	; 0x2c
   19f20:	4640      	mov	r0, r8
   19f22:	220f      	movs	r2, #15
   19f24:	4619      	mov	r1, r3
   19f26:	f007 f92d 	bl	21184 <_Unwind_VRS_Set>
   19f2a:	2d02      	cmp	r5, #2
   19f2c:	d024      	beq.n	19f78 <__gxx_personality_v0+0x264>
   19f2e:	2007      	movs	r0, #7
   19f30:	b013      	add	sp, #76	; 0x4c
   19f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f36:	9b02      	ldr	r3, [sp, #8]
   19f38:	07de      	lsls	r6, r3, #31
   19f3a:	f53f af7a 	bmi.w	19e32 <__gxx_personality_v0+0x11e>
   19f3e:	9b02      	ldr	r3, [sp, #8]
   19f40:	071b      	lsls	r3, r3, #28
   19f42:	d4a6      	bmi.n	19e92 <__gxx_personality_v0+0x17e>
   19f44:	4638      	mov	r0, r7
   19f46:	f006 fca7 	bl	20898 <__cxa_call_terminate>
   19f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19f4c:	2b00      	cmp	r3, #0
   19f4e:	f43f aeee 	beq.w	19d2e <__gxx_personality_v0+0x1a>
   19f52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19f54:	4413      	add	r3, r2
   19f56:	9303      	str	r3, [sp, #12]
   19f58:	2c00      	cmp	r4, #0
   19f5a:	d136      	bne.n	19fca <__gxx_personality_v0+0x2b6>
   19f5c:	2b00      	cmp	r3, #0
   19f5e:	f43f aee6 	beq.w	19d2e <__gxx_personality_v0+0x1a>
   19f62:	9b02      	ldr	r3, [sp, #8]
   19f64:	07dd      	lsls	r5, r3, #31
   19f66:	f53f aee2 	bmi.w	19d2e <__gxx_personality_v0+0x1a>
   19f6a:	9b02      	ldr	r3, [sp, #8]
   19f6c:	071a      	lsls	r2, r3, #28
   19f6e:	f140 8116 	bpl.w	1a19e <__gxx_personality_v0+0x48a>
   19f72:	2400      	movs	r4, #0
   19f74:	2502      	movs	r5, #2
   19f76:	e7b0      	b.n	19eda <__gxx_personality_v0+0x1c6>
   19f78:	4638      	mov	r0, r7
   19f7a:	f7ff fd7d 	bl	19a78 <__cxa_begin_cleanup>
   19f7e:	2007      	movs	r0, #7
   19f80:	e6db      	b.n	19d3a <__gxx_personality_v0+0x26>
   19f82:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   19f86:	1b1b      	subs	r3, r3, r4
   19f88:	461e      	mov	r6, r3
   19f8a:	4652      	mov	r2, sl
   19f8c:	4659      	mov	r1, fp
   19f8e:	4640      	mov	r0, r8
   19f90:	f7ff fe78 	bl	19c84 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
   19f94:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   19f98:	4641      	mov	r1, r8
   19f9a:	f7ff fe4f 	bl	19c3c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19f9e:	900e      	str	r0, [sp, #56]	; 0x38
   19fa0:	4605      	mov	r5, r0
   19fa2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   19fa4:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
   19fa8:	eb00 0086 	add.w	r0, r0, r6, lsl #2
   19fac:	b133      	cbz	r3, 19fbc <__gxx_personality_v0+0x2a8>
   19fae:	4602      	mov	r2, r0
   19fb0:	2300      	movs	r3, #0
   19fb2:	f852 1f04 	ldr.w	r1, [r2, #4]!
   19fb6:	3301      	adds	r3, #1
   19fb8:	2900      	cmp	r1, #0
   19fba:	d1fa      	bne.n	19fb2 <__gxx_personality_v0+0x29e>
   19fbc:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
   19fc0:	2304      	movs	r3, #4
   19fc2:	6378      	str	r0, [r7, #52]	; 0x34
   19fc4:	633b      	str	r3, [r7, #48]	; 0x30
   19fc6:	2503      	movs	r5, #3
   19fc8:	e787      	b.n	19eda <__gxx_personality_v0+0x1c6>
   19fca:	9e10      	ldr	r6, [sp, #64]	; 0x40
   19fcc:	9b03      	ldr	r3, [sp, #12]
   19fce:	3c01      	subs	r4, #1
   19fd0:	4426      	add	r6, r4
   19fd2:	2b00      	cmp	r3, #0
   19fd4:	f43f aeab 	beq.w	19d2e <__gxx_personality_v0+0x1a>
   19fd8:	9b02      	ldr	r3, [sp, #8]
   19fda:	2e00      	cmp	r6, #0
   19fdc:	f000 80d7 	beq.w	1a18e <__gxx_personality_v0+0x47a>
   19fe0:	f013 0308 	ands.w	r3, r3, #8
   19fe4:	9304      	str	r3, [sp, #16]
   19fe6:	f000 80c9 	beq.w	1a17c <__gxx_personality_v0+0x468>
   19fea:	2347      	movs	r3, #71	; 0x47
   19fec:	703b      	strb	r3, [r7, #0]
   19fee:	234e      	movs	r3, #78	; 0x4e
   19ff0:	707b      	strb	r3, [r7, #1]
   19ff2:	2355      	movs	r3, #85	; 0x55
   19ff4:	70bb      	strb	r3, [r7, #2]
   19ff6:	2343      	movs	r3, #67	; 0x43
   19ff8:	70fb      	strb	r3, [r7, #3]
   19ffa:	2346      	movs	r3, #70	; 0x46
   19ffc:	713b      	strb	r3, [r7, #4]
   19ffe:	234f      	movs	r3, #79	; 0x4f
   1a000:	717b      	strb	r3, [r7, #5]
   1a002:	2352      	movs	r3, #82	; 0x52
   1a004:	71bb      	strb	r3, [r7, #6]
   1a006:	2300      	movs	r3, #0
   1a008:	71fb      	strb	r3, [r7, #7]
   1a00a:	2300      	movs	r3, #0
   1a00c:	f8cd b018 	str.w	fp, [sp, #24]
   1a010:	f8cd 8014 	str.w	r8, [sp, #20]
   1a014:	469b      	mov	fp, r3
   1a016:	f8cd a01c 	str.w	sl, [sp, #28]
   1a01a:	2400      	movs	r4, #0
   1a01c:	4622      	mov	r2, r4
   1a01e:	f816 1b01 	ldrb.w	r1, [r6], #1
   1a022:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1a026:	4093      	lsls	r3, r2
   1a028:	0608      	lsls	r0, r1, #24
   1a02a:	ea44 0403 	orr.w	r4, r4, r3
   1a02e:	f102 0207 	add.w	r2, r2, #7
   1a032:	d4f4      	bmi.n	1a01e <__gxx_personality_v0+0x30a>
   1a034:	2a1f      	cmp	r2, #31
   1a036:	d805      	bhi.n	1a044 <__gxx_personality_v0+0x330>
   1a038:	0649      	lsls	r1, r1, #25
   1a03a:	d503      	bpl.n	1a044 <__gxx_personality_v0+0x330>
   1a03c:	2301      	movs	r3, #1
   1a03e:	4093      	lsls	r3, r2
   1a040:	425b      	negs	r3, r3
   1a042:	431c      	orrs	r4, r3
   1a044:	2500      	movs	r5, #0
   1a046:	4630      	mov	r0, r6
   1a048:	462a      	mov	r2, r5
   1a04a:	f810 1b01 	ldrb.w	r1, [r0], #1
   1a04e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   1a052:	4093      	lsls	r3, r2
   1a054:	431d      	orrs	r5, r3
   1a056:	060b      	lsls	r3, r1, #24
   1a058:	f102 0207 	add.w	r2, r2, #7
   1a05c:	d4f5      	bmi.n	1a04a <__gxx_personality_v0+0x336>
   1a05e:	2a1f      	cmp	r2, #31
   1a060:	d805      	bhi.n	1a06e <__gxx_personality_v0+0x35a>
   1a062:	064b      	lsls	r3, r1, #25
   1a064:	d503      	bpl.n	1a06e <__gxx_personality_v0+0x35a>
   1a066:	2301      	movs	r3, #1
   1a068:	4093      	lsls	r3, r2
   1a06a:	425b      	negs	r3, r3
   1a06c:	431d      	orrs	r5, r3
   1a06e:	2c00      	cmp	r4, #0
   1a070:	d034      	beq.n	1a0dc <__gxx_personality_v0+0x3c8>
   1a072:	dc36      	bgt.n	1a0e2 <__gxx_personality_v0+0x3ce>
   1a074:	b117      	cbz	r7, 1a07c <__gxx_personality_v0+0x368>
   1a076:	9b04      	ldr	r3, [sp, #16]
   1a078:	2b00      	cmp	r3, #0
   1a07a:	d04f      	beq.n	1a11c <__gxx_personality_v0+0x408>
   1a07c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1a080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a082:	ebaa 0a04 	sub.w	sl, sl, r4
   1a086:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   1a08a:	b1b3      	cbz	r3, 1a0ba <__gxx_personality_v0+0x3a6>
   1a08c:	2d00      	cmp	r5, #0
   1a08e:	d06a      	beq.n	1a166 <__gxx_personality_v0+0x452>
   1a090:	442e      	add	r6, r5
   1a092:	e7c2      	b.n	1a01a <__gxx_personality_v0+0x306>
   1a094:	00a3      	lsls	r3, r4, #2
   1a096:	425b      	negs	r3, r3
   1a098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1a09a:	990e      	ldr	r1, [sp, #56]	; 0x38
   1a09c:	441a      	add	r2, r3
   1a09e:	464b      	mov	r3, r9
   1a0a0:	f7ff fd6c 	bl	19b7c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   1a0a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1a0a6:	b141      	cbz	r1, 1a0ba <__gxx_personality_v0+0x3a6>
   1a0a8:	2f00      	cmp	r7, #0
   1a0aa:	d0ef      	beq.n	1a08c <__gxx_personality_v0+0x378>
   1a0ac:	ab08      	add	r3, sp, #32
   1a0ae:	2200      	movs	r2, #0
   1a0b0:	4638      	mov	r0, r7
   1a0b2:	f7ff fc89 	bl	199c8 <__cxa_type_match>
   1a0b6:	2800      	cmp	r0, #0
   1a0b8:	d0e8      	beq.n	1a08c <__gxx_personality_v0+0x378>
   1a0ba:	9b02      	ldr	r3, [sp, #8]
   1a0bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   1a0c0:	07db      	lsls	r3, r3, #31
   1a0c2:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
   1a0c6:	f53f aeb6 	bmi.w	19e36 <__gxx_personality_v0+0x122>
   1a0ca:	9b04      	ldr	r3, [sp, #16]
   1a0cc:	2b00      	cmp	r3, #0
   1a0ce:	f43f af01 	beq.w	19ed4 <__gxx_personality_v0+0x1c0>
   1a0d2:	2c00      	cmp	r4, #0
   1a0d4:	f6bf af00 	bge.w	19ed8 <__gxx_personality_v0+0x1c4>
   1a0d8:	f000 f87c 	bl	1a1d4 <std::unexpected()>
   1a0dc:	f04f 0b01 	mov.w	fp, #1
   1a0e0:	e7d4      	b.n	1a08c <__gxx_personality_v0+0x378>
   1a0e2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1a0e6:	28ff      	cmp	r0, #255	; 0xff
   1a0e8:	d031      	beq.n	1a14e <__gxx_personality_v0+0x43a>
   1a0ea:	f000 0307 	and.w	r3, r0, #7
   1a0ee:	2b04      	cmp	r3, #4
   1a0f0:	f63f ae29 	bhi.w	19d46 <__gxx_personality_v0+0x32>
   1a0f4:	a201      	add	r2, pc, #4	; (adr r2, 1a0fc <__gxx_personality_v0+0x3e8>)
   1a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1a0fa:	bf00      	nop
   1a0fc:	0001a095 	.word	0x0001a095
   1a100:	00019d47 	.word	0x00019d47
   1a104:	0001a117 	.word	0x0001a117
   1a108:	0001a095 	.word	0x0001a095
   1a10c:	0001a111 	.word	0x0001a111
   1a110:	00e3      	lsls	r3, r4, #3
   1a112:	425b      	negs	r3, r3
   1a114:	e7c0      	b.n	1a098 <__gxx_personality_v0+0x384>
   1a116:	0063      	lsls	r3, r4, #1
   1a118:	425b      	negs	r3, r3
   1a11a:	e7bd      	b.n	1a098 <__gxx_personality_v0+0x384>
   1a11c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   1a120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1a122:	9a08      	ldr	r2, [sp, #32]
   1a124:	920b      	str	r2, [sp, #44]	; 0x2c
   1a126:	ebaa 0a04 	sub.w	sl, sl, r4
   1a12a:	eb03 088a 	add.w	r8, r3, sl, lsl #2
   1a12e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   1a132:	b919      	cbnz	r1, 1a13c <__gxx_personality_v0+0x428>
   1a134:	e00d      	b.n	1a152 <__gxx_personality_v0+0x43e>
   1a136:	f858 1f04 	ldr.w	r1, [r8, #4]!
   1a13a:	b151      	cbz	r1, 1a152 <__gxx_personality_v0+0x43e>
   1a13c:	4441      	add	r1, r8
   1a13e:	464b      	mov	r3, r9
   1a140:	2200      	movs	r2, #0
   1a142:	4638      	mov	r0, r7
   1a144:	f7ff fc40 	bl	199c8 <__cxa_type_match>
   1a148:	2800      	cmp	r0, #0
   1a14a:	d0f4      	beq.n	1a136 <__gxx_personality_v0+0x422>
   1a14c:	e79e      	b.n	1a08c <__gxx_personality_v0+0x378>
   1a14e:	2300      	movs	r3, #0
   1a150:	e7a2      	b.n	1a098 <__gxx_personality_v0+0x384>
   1a152:	9b02      	ldr	r3, [sp, #8]
   1a154:	07d8      	lsls	r0, r3, #31
   1a156:	4656      	mov	r6, sl
   1a158:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
   1a15c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   1a160:	f53f ae69 	bmi.w	19e36 <__gxx_personality_v0+0x122>
   1a164:	e711      	b.n	19f8a <__gxx_personality_v0+0x276>
   1a166:	465b      	mov	r3, fp
   1a168:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1a16c:	2b00      	cmp	r3, #0
   1a16e:	f43f adde 	beq.w	19d2e <__gxx_personality_v0+0x1a>
   1a172:	9b02      	ldr	r3, [sp, #8]
   1a174:	07d9      	lsls	r1, r3, #31
   1a176:	f53f adda 	bmi.w	19d2e <__gxx_personality_v0+0x1a>
   1a17a:	e6fa      	b.n	19f72 <__gxx_personality_v0+0x25e>
   1a17c:	79fb      	ldrb	r3, [r7, #7]
   1a17e:	2b01      	cmp	r3, #1
   1a180:	bf0c      	ite	eq
   1a182:	f857 3c20 	ldreq.w	r3, [r7, #-32]
   1a186:	f107 0358 	addne.w	r3, r7, #88	; 0x58
   1a18a:	9308      	str	r3, [sp, #32]
   1a18c:	e73d      	b.n	1a00a <__gxx_personality_v0+0x2f6>
   1a18e:	07da      	lsls	r2, r3, #31
   1a190:	f53f adcd 	bmi.w	19d2e <__gxx_personality_v0+0x1a>
   1a194:	9b02      	ldr	r3, [sp, #8]
   1a196:	f013 0408 	ands.w	r4, r3, #8
   1a19a:	f47f aeea 	bne.w	19f72 <__gxx_personality_v0+0x25e>
   1a19e:	2502      	movs	r5, #2
   1a1a0:	e69b      	b.n	19eda <__gxx_personality_v0+0x1c6>
   1a1a2:	f006 fbfb 	bl	2099c <__cxa_begin_catch>
   1a1a6:	e674      	b.n	19e92 <__gxx_personality_v0+0x17e>

0001a1a8 <__cxxabiv1::__terminate(void (*)())>:
   1a1a8:	b508      	push	{r3, lr}
   1a1aa:	4780      	blx	r0
   1a1ac:	f7fd fcd5 	bl	17b5a <abort>
   1a1b0:	f006 fbf4 	bl	2099c <__cxa_begin_catch>
   1a1b4:	f7fd fcd1 	bl	17b5a <abort>

0001a1b8 <std::terminate()>:
   1a1b8:	b508      	push	{r3, lr}
   1a1ba:	4b03      	ldr	r3, [pc, #12]	; (1a1c8 <std::terminate()+0x10>)
   1a1bc:	6818      	ldr	r0, [r3, #0]
   1a1be:	f3bf 8f5b 	dmb	ish
   1a1c2:	f7ff fff1 	bl	1a1a8 <__cxxabiv1::__terminate(void (*)())>
   1a1c6:	bf00      	nop
   1a1c8:	20005244 	.word	0x20005244

0001a1cc <__cxxabiv1::__unexpected(void (*)())>:
   1a1cc:	b508      	push	{r3, lr}
   1a1ce:	4780      	blx	r0
   1a1d0:	f7ff fff2 	bl	1a1b8 <std::terminate()>

0001a1d4 <std::unexpected()>:
   1a1d4:	b508      	push	{r3, lr}
   1a1d6:	4b03      	ldr	r3, [pc, #12]	; (1a1e4 <std::unexpected()+0x10>)
   1a1d8:	6818      	ldr	r0, [r3, #0]
   1a1da:	f3bf 8f5b 	dmb	ish
   1a1de:	f7ff fff5 	bl	1a1cc <__cxxabiv1::__unexpected(void (*)())>
   1a1e2:	bf00      	nop
   1a1e4:	20005248 	.word	0x20005248

0001a1e8 <std::get_terminate()>:
   1a1e8:	4b02      	ldr	r3, [pc, #8]	; (1a1f4 <std::get_terminate()+0xc>)
   1a1ea:	6818      	ldr	r0, [r3, #0]
   1a1ec:	f3bf 8f5b 	dmb	ish
   1a1f0:	4770      	bx	lr
   1a1f2:	bf00      	nop
   1a1f4:	20005244 	.word	0x20005244

0001a1f8 <std::get_unexpected()>:
   1a1f8:	4b02      	ldr	r3, [pc, #8]	; (1a204 <std::get_unexpected()+0xc>)
   1a1fa:	6818      	ldr	r0, [r3, #0]
   1a1fc:	f3bf 8f5b 	dmb	ish
   1a200:	4770      	bx	lr
   1a202:	bf00      	nop
   1a204:	20005248 	.word	0x20005248

0001a208 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
   1a208:	b500      	push	{lr}
   1a20a:	2801      	cmp	r0, #1
   1a20c:	b083      	sub	sp, #12
   1a20e:	d81d      	bhi.n	1a24c <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x44>
   1a210:	f3bf 8f5b 	dmb	ish
   1a214:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   1a218:	e853 2f00 	ldrex	r2, [r3]
   1a21c:	3a01      	subs	r2, #1
   1a21e:	e843 2000 	strex	r0, r2, [r3]
   1a222:	2800      	cmp	r0, #0
   1a224:	d1f8      	bne.n	1a218 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x10>
   1a226:	f3bf 8f5b 	dmb	ish
   1a22a:	b962      	cbnz	r2, 1a246 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3e>
   1a22c:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   1a230:	f101 0058 	add.w	r0, r1, #88	; 0x58
   1a234:	b113      	cbz	r3, 1a23c <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x34>
   1a236:	9001      	str	r0, [sp, #4]
   1a238:	4798      	blx	r3
   1a23a:	9801      	ldr	r0, [sp, #4]
   1a23c:	b003      	add	sp, #12
   1a23e:	f85d eb04 	ldr.w	lr, [sp], #4
   1a242:	f7ff bb97 	b.w	19974 <__cxa_free_exception>
   1a246:	b003      	add	sp, #12
   1a248:	f85d fb04 	ldr.w	pc, [sp], #4
   1a24c:	f851 0c14 	ldr.w	r0, [r1, #-20]
   1a250:	f7ff ffaa 	bl	1a1a8 <__cxxabiv1::__terminate(void (*)())>

0001a254 <__cxa_init_primary_exception>:
   1a254:	b538      	push	{r3, r4, r5, lr}
   1a256:	2500      	movs	r5, #0
   1a258:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   1a25c:	f840 5c80 	str.w	r5, [r0, #-128]
   1a260:	4604      	mov	r4, r0
   1a262:	f7ff ffc9 	bl	1a1f8 <std::get_unexpected()>
   1a266:	f844 0c70 	str.w	r0, [r4, #-112]
   1a26a:	f7ff ffbd 	bl	1a1e8 <std::get_terminate()>
   1a26e:	2243      	movs	r2, #67	; 0x43
   1a270:	232b      	movs	r3, #43	; 0x2b
   1a272:	2147      	movs	r1, #71	; 0x47
   1a274:	f804 2c55 	strb.w	r2, [r4, #-85]
   1a278:	f804 2c54 	strb.w	r2, [r4, #-84]
   1a27c:	f804 3c53 	strb.w	r3, [r4, #-83]
   1a280:	f804 3c52 	strb.w	r3, [r4, #-82]
   1a284:	224e      	movs	r2, #78	; 0x4e
   1a286:	2355      	movs	r3, #85	; 0x55
   1a288:	f804 1c58 	strb.w	r1, [r4, #-88]
   1a28c:	f804 5c51 	strb.w	r5, [r4, #-81]
   1a290:	4905      	ldr	r1, [pc, #20]	; (1a2a8 <__cxa_init_primary_exception+0x54>)
   1a292:	f804 2c57 	strb.w	r2, [r4, #-87]
   1a296:	f804 3c56 	strb.w	r3, [r4, #-86]
   1a29a:	f844 0c6c 	str.w	r0, [r4, #-108]
   1a29e:	f844 1c50 	str.w	r1, [r4, #-80]
   1a2a2:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   1a2a6:	bd38      	pop	{r3, r4, r5, pc}
   1a2a8:	0001a209 	.word	0x0001a209

0001a2ac <__cxa_throw>:
   1a2ac:	b510      	push	{r4, lr}
   1a2ae:	b082      	sub	sp, #8
   1a2b0:	e9cd 2100 	strd	r2, r1, [sp]
   1a2b4:	4604      	mov	r4, r0
   1a2b6:	f7ff fc5d 	bl	19b74 <__cxa_get_globals>
   1a2ba:	4603      	mov	r3, r0
   1a2bc:	6840      	ldr	r0, [r0, #4]
   1a2be:	9a00      	ldr	r2, [sp, #0]
   1a2c0:	9901      	ldr	r1, [sp, #4]
   1a2c2:	3001      	adds	r0, #1
   1a2c4:	6058      	str	r0, [r3, #4]
   1a2c6:	4620      	mov	r0, r4
   1a2c8:	f7ff ffc4 	bl	1a254 <__cxa_init_primary_exception>
   1a2cc:	4604      	mov	r4, r0
   1a2ce:	2301      	movs	r3, #1
   1a2d0:	f844 3b28 	str.w	r3, [r4], #40
   1a2d4:	4620      	mov	r0, r4
   1a2d6:	f007 faef 	bl	218b8 <_Unwind_RaiseException>
   1a2da:	4620      	mov	r0, r4
   1a2dc:	f006 fb5e 	bl	2099c <__cxa_begin_catch>
   1a2e0:	f7ff ff6a 	bl	1a1b8 <std::terminate()>

0001a2e4 <__cxa_rethrow>:
   1a2e4:	b510      	push	{r4, lr}
   1a2e6:	f7ff fc45 	bl	19b74 <__cxa_get_globals>
   1a2ea:	e9d0 4200 	ldrd	r4, r2, [r0]
   1a2ee:	3201      	adds	r2, #1
   1a2f0:	6042      	str	r2, [r0, #4]
   1a2f2:	b164      	cbz	r4, 1a30e <__cxa_rethrow+0x2a>
   1a2f4:	f894 2020 	ldrb.w	r2, [r4, #32]
   1a2f8:	2a47      	cmp	r2, #71	; 0x47
   1a2fa:	d00a      	beq.n	1a312 <__cxa_rethrow+0x2e>
   1a2fc:	2200      	movs	r2, #0
   1a2fe:	6002      	str	r2, [r0, #0]
   1a300:	3420      	adds	r4, #32
   1a302:	4620      	mov	r0, r4
   1a304:	f007 fafc 	bl	21900 <_Unwind_Resume_or_Rethrow>
   1a308:	4620      	mov	r0, r4
   1a30a:	f006 fb47 	bl	2099c <__cxa_begin_catch>
   1a30e:	f7ff ff53 	bl	1a1b8 <std::terminate()>
   1a312:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   1a316:	2a4e      	cmp	r2, #78	; 0x4e
   1a318:	d1f0      	bne.n	1a2fc <__cxa_rethrow+0x18>
   1a31a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1a31e:	2a55      	cmp	r2, #85	; 0x55
   1a320:	d1ec      	bne.n	1a2fc <__cxa_rethrow+0x18>
   1a322:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   1a326:	2a43      	cmp	r2, #67	; 0x43
   1a328:	d1e8      	bne.n	1a2fc <__cxa_rethrow+0x18>
   1a32a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1a32e:	2a43      	cmp	r2, #67	; 0x43
   1a330:	d1e4      	bne.n	1a2fc <__cxa_rethrow+0x18>
   1a332:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   1a336:	2a2b      	cmp	r2, #43	; 0x2b
   1a338:	d1e0      	bne.n	1a2fc <__cxa_rethrow+0x18>
   1a33a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1a33e:	2a2b      	cmp	r2, #43	; 0x2b
   1a340:	d1dc      	bne.n	1a2fc <__cxa_rethrow+0x18>
   1a342:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   1a346:	2a01      	cmp	r2, #1
   1a348:	d8d8      	bhi.n	1a2fc <__cxa_rethrow+0x18>
   1a34a:	6962      	ldr	r2, [r4, #20]
   1a34c:	4252      	negs	r2, r2
   1a34e:	6162      	str	r2, [r4, #20]
   1a350:	e7d6      	b.n	1a300 <__cxa_rethrow+0x1c>
   1a352:	bf00      	nop

0001a354 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   1a354:	b510      	push	{r4, lr}
   1a356:	4b03      	ldr	r3, [pc, #12]	; (1a364 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
   1a358:	6003      	str	r3, [r0, #0]
   1a35a:	4604      	mov	r4, r0
   1a35c:	f000 fa56 	bl	1a80c <__cxxabiv1::__class_type_info::~__class_type_info()>
   1a360:	4620      	mov	r0, r4
   1a362:	bd10      	pop	{r4, pc}
   1a364:	20002910 	.word	0x20002910

0001a368 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   1a368:	b510      	push	{r4, lr}
   1a36a:	4b05      	ldr	r3, [pc, #20]	; (1a380 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x18>)
   1a36c:	6003      	str	r3, [r0, #0]
   1a36e:	4604      	mov	r4, r0
   1a370:	f000 fa4c 	bl	1a80c <__cxxabiv1::__class_type_info::~__class_type_info()>
   1a374:	4620      	mov	r0, r4
   1a376:	210c      	movs	r1, #12
   1a378:	f7fd f864 	bl	17444 <operator delete(void*, unsigned int)>
   1a37c:	4620      	mov	r0, r4
   1a37e:	bd10      	pop	{r4, pc}
   1a380:	20002910 	.word	0x20002910

0001a384 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   1a384:	b570      	push	{r4, r5, r6, lr}
   1a386:	b082      	sub	sp, #8
   1a388:	4604      	mov	r4, r0
   1a38a:	9e06      	ldr	r6, [sp, #24]
   1a38c:	4296      	cmp	r6, r2
   1a38e:	460d      	mov	r5, r1
   1a390:	d009      	beq.n	1a3a6 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x22>
   1a392:	68a0      	ldr	r0, [r4, #8]
   1a394:	6804      	ldr	r4, [r0, #0]
   1a396:	9606      	str	r6, [sp, #24]
   1a398:	6a24      	ldr	r4, [r4, #32]
   1a39a:	4629      	mov	r1, r5
   1a39c:	46a4      	mov	ip, r4
   1a39e:	b002      	add	sp, #8
   1a3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1a3a4:	4760      	bx	ip
   1a3a6:	4619      	mov	r1, r3
   1a3a8:	9201      	str	r2, [sp, #4]
   1a3aa:	9300      	str	r3, [sp, #0]
   1a3ac:	f000 f860 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a3b0:	e9dd 3200 	ldrd	r3, r2, [sp]
   1a3b4:	2800      	cmp	r0, #0
   1a3b6:	d0ec      	beq.n	1a392 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
   1a3b8:	2006      	movs	r0, #6
   1a3ba:	b002      	add	sp, #8
   1a3bc:	bd70      	pop	{r4, r5, r6, pc}
   1a3be:	bf00      	nop

0001a3c0 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   1a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3c4:	460c      	mov	r4, r1
   1a3c6:	b081      	sub	sp, #4
   1a3c8:	4619      	mov	r1, r3
   1a3ca:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
   1a3ce:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
   1a3d2:	469b      	mov	fp, r3
   1a3d4:	4605      	mov	r5, r0
   1a3d6:	4692      	mov	sl, r2
   1a3d8:	f000 f84a 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a3dc:	b980      	cbnz	r0, 1a400 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
   1a3de:	4546      	cmp	r6, r8
   1a3e0:	d022      	beq.n	1a428 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x68>
   1a3e2:	68a8      	ldr	r0, [r5, #8]
   1a3e4:	4621      	mov	r1, r4
   1a3e6:	6804      	ldr	r4, [r0, #0]
   1a3e8:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
   1a3ec:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
   1a3f0:	69e4      	ldr	r4, [r4, #28]
   1a3f2:	465b      	mov	r3, fp
   1a3f4:	4652      	mov	r2, sl
   1a3f6:	46a4      	mov	ip, r4
   1a3f8:	b001      	add	sp, #4
   1a3fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3fe:	4760      	bx	ip
   1a400:	2c00      	cmp	r4, #0
   1a402:	603e      	str	r6, [r7, #0]
   1a404:	f887 a004 	strb.w	sl, [r7, #4]
   1a408:	db09      	blt.n	1a41e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   1a40a:	4426      	add	r6, r4
   1a40c:	45b0      	cmp	r8, r6
   1a40e:	bf0c      	ite	eq
   1a410:	2606      	moveq	r6, #6
   1a412:	2601      	movne	r6, #1
   1a414:	71be      	strb	r6, [r7, #6]
   1a416:	2000      	movs	r0, #0
   1a418:	b001      	add	sp, #4
   1a41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a41e:	3402      	adds	r4, #2
   1a420:	d1f9      	bne.n	1a416 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   1a422:	2301      	movs	r3, #1
   1a424:	71bb      	strb	r3, [r7, #6]
   1a426:	e7f6      	b.n	1a416 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   1a428:	4649      	mov	r1, r9
   1a42a:	4628      	mov	r0, r5
   1a42c:	f000 f820 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a430:	2800      	cmp	r0, #0
   1a432:	d0d6      	beq.n	1a3e2 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x22>
   1a434:	f887 a005 	strb.w	sl, [r7, #5]
   1a438:	e7ed      	b.n	1a416 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   1a43a:	bf00      	nop

0001a43c <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   1a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a440:	4606      	mov	r6, r0
   1a442:	460f      	mov	r7, r1
   1a444:	4614      	mov	r4, r2
   1a446:	461d      	mov	r5, r3
   1a448:	f000 fa1a 	bl	1a880 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
   1a44c:	b948      	cbnz	r0, 1a462 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
   1a44e:	68b0      	ldr	r0, [r6, #8]
   1a450:	6801      	ldr	r1, [r0, #0]
   1a452:	4622      	mov	r2, r4
   1a454:	698c      	ldr	r4, [r1, #24]
   1a456:	462b      	mov	r3, r5
   1a458:	4639      	mov	r1, r7
   1a45a:	46a4      	mov	ip, r4
   1a45c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a460:	4760      	bx	ip
   1a462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a466:	bf00      	nop

0001a468 <std::type_info::~type_info()>:
   1a468:	4770      	bx	lr
   1a46a:	bf00      	nop

0001a46c <std::type_info::__is_pointer_p() const>:
   1a46c:	2000      	movs	r0, #0
   1a46e:	4770      	bx	lr

0001a470 <std::type_info::operator==(std::type_info const&) const>:
   1a470:	4281      	cmp	r1, r0
   1a472:	d011      	beq.n	1a498 <std::type_info::operator==(std::type_info const&) const+0x28>
   1a474:	b508      	push	{r3, lr}
   1a476:	6840      	ldr	r0, [r0, #4]
   1a478:	7803      	ldrb	r3, [r0, #0]
   1a47a:	2b2a      	cmp	r3, #42	; 0x2a
   1a47c:	d00a      	beq.n	1a494 <std::type_info::operator==(std::type_info const&) const+0x24>
   1a47e:	6849      	ldr	r1, [r1, #4]
   1a480:	780b      	ldrb	r3, [r1, #0]
   1a482:	2b2a      	cmp	r3, #42	; 0x2a
   1a484:	bf08      	it	eq
   1a486:	3101      	addeq	r1, #1
   1a488:	f008 ff2e 	bl	232e8 <strcmp>
   1a48c:	fab0 f080 	clz	r0, r0
   1a490:	0940      	lsrs	r0, r0, #5
   1a492:	bd08      	pop	{r3, pc}
   1a494:	2000      	movs	r0, #0
   1a496:	bd08      	pop	{r3, pc}
   1a498:	2001      	movs	r0, #1
   1a49a:	4770      	bx	lr

0001a49c <__gnu_cxx::__verbose_terminate_handler()>:
   1a49c:	b570      	push	{r4, r5, r6, lr}
   1a49e:	4b3b      	ldr	r3, [pc, #236]	; (1a58c <__gnu_cxx::__verbose_terminate_handler()+0xf0>)
   1a4a0:	781a      	ldrb	r2, [r3, #0]
   1a4a2:	b082      	sub	sp, #8
   1a4a4:	2a00      	cmp	r2, #0
   1a4a6:	d141      	bne.n	1a52c <__gnu_cxx::__verbose_terminate_handler()+0x90>
   1a4a8:	2401      	movs	r4, #1
   1a4aa:	701c      	strb	r4, [r3, #0]
   1a4ac:	f006 fafa 	bl	20aa4 <__cxa_current_exception_type>
   1a4b0:	2800      	cmp	r0, #0
   1a4b2:	d031      	beq.n	1a518 <__gnu_cxx::__verbose_terminate_handler()+0x7c>
   1a4b4:	6844      	ldr	r4, [r0, #4]
   1a4b6:	4d36      	ldr	r5, [pc, #216]	; (1a590 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1a4b8:	7823      	ldrb	r3, [r4, #0]
   1a4ba:	2b2a      	cmp	r3, #42	; 0x2a
   1a4bc:	bf08      	it	eq
   1a4be:	3401      	addeq	r4, #1
   1a4c0:	2200      	movs	r2, #0
   1a4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a4c6:	4611      	mov	r1, r2
   1a4c8:	ab01      	add	r3, sp, #4
   1a4ca:	9001      	str	r0, [sp, #4]
   1a4cc:	4620      	mov	r0, r4
   1a4ce:	f006 f963 	bl	20798 <__cxa_demangle>
   1a4d2:	682b      	ldr	r3, [r5, #0]
   1a4d4:	2230      	movs	r2, #48	; 0x30
   1a4d6:	68db      	ldr	r3, [r3, #12]
   1a4d8:	4606      	mov	r6, r0
   1a4da:	2101      	movs	r1, #1
   1a4dc:	482d      	ldr	r0, [pc, #180]	; (1a594 <__gnu_cxx::__verbose_terminate_handler()+0xf8>)
   1a4de:	f008 fc99 	bl	22e14 <fwrite>
   1a4e2:	9b01      	ldr	r3, [sp, #4]
   1a4e4:	b193      	cbz	r3, 1a50c <__gnu_cxx::__verbose_terminate_handler()+0x70>
   1a4e6:	682b      	ldr	r3, [r5, #0]
   1a4e8:	4620      	mov	r0, r4
   1a4ea:	68d9      	ldr	r1, [r3, #12]
   1a4ec:	f008 fa5e 	bl	229ac <fputs>
   1a4f0:	682b      	ldr	r3, [r5, #0]
   1a4f2:	4829      	ldr	r0, [pc, #164]	; (1a598 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
   1a4f4:	68db      	ldr	r3, [r3, #12]
   1a4f6:	2202      	movs	r2, #2
   1a4f8:	2101      	movs	r1, #1
   1a4fa:	f008 fc8b 	bl	22e14 <fwrite>
   1a4fe:	9b01      	ldr	r3, [sp, #4]
   1a500:	b913      	cbnz	r3, 1a508 <__gnu_cxx::__verbose_terminate_handler()+0x6c>
   1a502:	4630      	mov	r0, r6
   1a504:	f007 fbf0 	bl	21ce8 <free>
   1a508:	f7ff feec 	bl	1a2e4 <__cxa_rethrow>
   1a50c:	682b      	ldr	r3, [r5, #0]
   1a50e:	4630      	mov	r0, r6
   1a510:	68d9      	ldr	r1, [r3, #12]
   1a512:	f008 fa4b 	bl	229ac <fputs>
   1a516:	e7eb      	b.n	1a4f0 <__gnu_cxx::__verbose_terminate_handler()+0x54>
   1a518:	4b1d      	ldr	r3, [pc, #116]	; (1a590 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1a51a:	4820      	ldr	r0, [pc, #128]	; (1a59c <__gnu_cxx::__verbose_terminate_handler()+0x100>)
   1a51c:	681b      	ldr	r3, [r3, #0]
   1a51e:	222d      	movs	r2, #45	; 0x2d
   1a520:	68db      	ldr	r3, [r3, #12]
   1a522:	4621      	mov	r1, r4
   1a524:	f008 fc76 	bl	22e14 <fwrite>
   1a528:	f7fd fb17 	bl	17b5a <abort>
   1a52c:	4b18      	ldr	r3, [pc, #96]	; (1a590 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1a52e:	481c      	ldr	r0, [pc, #112]	; (1a5a0 <__gnu_cxx::__verbose_terminate_handler()+0x104>)
   1a530:	681b      	ldr	r3, [r3, #0]
   1a532:	221d      	movs	r2, #29
   1a534:	68db      	ldr	r3, [r3, #12]
   1a536:	2101      	movs	r1, #1
   1a538:	f008 fc6c 	bl	22e14 <fwrite>
   1a53c:	f7fd fb0d 	bl	17b5a <abort>
   1a540:	2901      	cmp	r1, #1
   1a542:	460c      	mov	r4, r1
   1a544:	d119      	bne.n	1a57a <__gnu_cxx::__verbose_terminate_handler()+0xde>
   1a546:	f006 fa29 	bl	2099c <__cxa_begin_catch>
   1a54a:	6803      	ldr	r3, [r0, #0]
   1a54c:	689b      	ldr	r3, [r3, #8]
   1a54e:	4798      	blx	r3
   1a550:	682b      	ldr	r3, [r5, #0]
   1a552:	4621      	mov	r1, r4
   1a554:	68db      	ldr	r3, [r3, #12]
   1a556:	4604      	mov	r4, r0
   1a558:	220b      	movs	r2, #11
   1a55a:	4812      	ldr	r0, [pc, #72]	; (1a5a4 <__gnu_cxx::__verbose_terminate_handler()+0x108>)
   1a55c:	f008 fc5a 	bl	22e14 <fwrite>
   1a560:	682b      	ldr	r3, [r5, #0]
   1a562:	4620      	mov	r0, r4
   1a564:	68d9      	ldr	r1, [r3, #12]
   1a566:	f008 fa21 	bl	229ac <fputs>
   1a56a:	682b      	ldr	r3, [r5, #0]
   1a56c:	200a      	movs	r0, #10
   1a56e:	68d9      	ldr	r1, [r3, #12]
   1a570:	f008 f9a6 	bl	228c0 <fputc>
   1a574:	f006 fa50 	bl	20a18 <__cxa_end_catch>
   1a578:	e7d6      	b.n	1a528 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
   1a57a:	f006 fa0f 	bl	2099c <__cxa_begin_catch>
   1a57e:	f006 fa4b 	bl	20a18 <__cxa_end_catch>
   1a582:	e7d1      	b.n	1a528 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
   1a584:	f006 fa48 	bl	20a18 <__cxa_end_catch>
   1a588:	f7ff fa18 	bl	199bc <__cxa_end_cleanup>
   1a58c:	20008c27 	.word	0x20008c27
   1a590:	200057e4 	.word	0x200057e4
   1a594:	200022c8 	.word	0x200022c8
   1a598:	200022fc 	.word	0x200022fc
   1a59c:	20002300 	.word	0x20002300
   1a5a0:	200022a8 	.word	0x200022a8
   1a5a4:	20002330 	.word	0x20002330

0001a5a8 <std::logic_error::what() const>:
   1a5a8:	6840      	ldr	r0, [r0, #4]
   1a5aa:	4770      	bx	lr

0001a5ac <std::logic_error::~logic_error()>:
   1a5ac:	b510      	push	{r4, lr}
   1a5ae:	6843      	ldr	r3, [r0, #4]
   1a5b0:	4a0c      	ldr	r2, [pc, #48]	; (1a5e4 <std::logic_error::~logic_error()+0x38>)
   1a5b2:	490d      	ldr	r1, [pc, #52]	; (1a5e8 <std::logic_error::~logic_error()+0x3c>)
   1a5b4:	4604      	mov	r4, r0
   1a5b6:	f1a3 000c 	sub.w	r0, r3, #12
   1a5ba:	4290      	cmp	r0, r2
   1a5bc:	b082      	sub	sp, #8
   1a5be:	6021      	str	r1, [r4, #0]
   1a5c0:	d105      	bne.n	1a5ce <std::logic_error::~logic_error()+0x22>
   1a5c2:	4620      	mov	r0, r4
   1a5c4:	f7ff fac2 	bl	19b4c <std::exception::~exception()>
   1a5c8:	4620      	mov	r0, r4
   1a5ca:	b002      	add	sp, #8
   1a5cc:	bd10      	pop	{r4, pc}
   1a5ce:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1a5d2:	1e51      	subs	r1, r2, #1
   1a5d4:	2a00      	cmp	r2, #0
   1a5d6:	f843 1c04 	str.w	r1, [r3, #-4]
   1a5da:	dcf2      	bgt.n	1a5c2 <std::logic_error::~logic_error()+0x16>
   1a5dc:	a901      	add	r1, sp, #4
   1a5de:	f000 f8f3 	bl	1a7c8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   1a5e2:	e7ee      	b.n	1a5c2 <std::logic_error::~logic_error()+0x16>
   1a5e4:	20006fd0 	.word	0x20006fd0
   1a5e8:	2000295c 	.word	0x2000295c

0001a5ec <std::length_error::~length_error()>:
   1a5ec:	b510      	push	{r4, lr}
   1a5ee:	6843      	ldr	r3, [r0, #4]
   1a5f0:	4a0c      	ldr	r2, [pc, #48]	; (1a624 <std::length_error::~length_error()+0x38>)
   1a5f2:	490d      	ldr	r1, [pc, #52]	; (1a628 <std::length_error::~length_error()+0x3c>)
   1a5f4:	4604      	mov	r4, r0
   1a5f6:	f1a3 000c 	sub.w	r0, r3, #12
   1a5fa:	4290      	cmp	r0, r2
   1a5fc:	b082      	sub	sp, #8
   1a5fe:	6021      	str	r1, [r4, #0]
   1a600:	d105      	bne.n	1a60e <std::length_error::~length_error()+0x22>
   1a602:	4620      	mov	r0, r4
   1a604:	f7ff faa2 	bl	19b4c <std::exception::~exception()>
   1a608:	4620      	mov	r0, r4
   1a60a:	b002      	add	sp, #8
   1a60c:	bd10      	pop	{r4, pc}
   1a60e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1a612:	1e51      	subs	r1, r2, #1
   1a614:	2a00      	cmp	r2, #0
   1a616:	f843 1c04 	str.w	r1, [r3, #-4]
   1a61a:	dcf2      	bgt.n	1a602 <std::length_error::~length_error()+0x16>
   1a61c:	a901      	add	r1, sp, #4
   1a61e:	f000 f8d3 	bl	1a7c8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   1a622:	e7ee      	b.n	1a602 <std::length_error::~length_error()+0x16>
   1a624:	20006fd0 	.word	0x20006fd0
   1a628:	2000295c 	.word	0x2000295c

0001a62c <std::logic_error::~logic_error()>:
   1a62c:	b510      	push	{r4, lr}
   1a62e:	6843      	ldr	r3, [r0, #4]
   1a630:	4a0e      	ldr	r2, [pc, #56]	; (1a66c <std::logic_error::~logic_error()+0x40>)
   1a632:	490f      	ldr	r1, [pc, #60]	; (1a670 <std::logic_error::~logic_error()+0x44>)
   1a634:	4604      	mov	r4, r0
   1a636:	f1a3 000c 	sub.w	r0, r3, #12
   1a63a:	4290      	cmp	r0, r2
   1a63c:	b082      	sub	sp, #8
   1a63e:	6021      	str	r1, [r4, #0]
   1a640:	d108      	bne.n	1a654 <std::logic_error::~logic_error()+0x28>
   1a642:	4620      	mov	r0, r4
   1a644:	f7ff fa82 	bl	19b4c <std::exception::~exception()>
   1a648:	4620      	mov	r0, r4
   1a64a:	f7fc fef3 	bl	17434 <operator delete(void*)>
   1a64e:	4620      	mov	r0, r4
   1a650:	b002      	add	sp, #8
   1a652:	bd10      	pop	{r4, pc}
   1a654:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1a658:	1e51      	subs	r1, r2, #1
   1a65a:	2a00      	cmp	r2, #0
   1a65c:	f843 1c04 	str.w	r1, [r3, #-4]
   1a660:	dcef      	bgt.n	1a642 <std::logic_error::~logic_error()+0x16>
   1a662:	a901      	add	r1, sp, #4
   1a664:	f000 f8b0 	bl	1a7c8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   1a668:	e7eb      	b.n	1a642 <std::logic_error::~logic_error()+0x16>
   1a66a:	bf00      	nop
   1a66c:	20006fd0 	.word	0x20006fd0
   1a670:	2000295c 	.word	0x2000295c

0001a674 <std::length_error::~length_error()>:
   1a674:	b510      	push	{r4, lr}
   1a676:	6843      	ldr	r3, [r0, #4]
   1a678:	4a0e      	ldr	r2, [pc, #56]	; (1a6b4 <std::length_error::~length_error()+0x40>)
   1a67a:	490f      	ldr	r1, [pc, #60]	; (1a6b8 <std::length_error::~length_error()+0x44>)
   1a67c:	4604      	mov	r4, r0
   1a67e:	f1a3 000c 	sub.w	r0, r3, #12
   1a682:	4290      	cmp	r0, r2
   1a684:	b082      	sub	sp, #8
   1a686:	6021      	str	r1, [r4, #0]
   1a688:	d108      	bne.n	1a69c <std::length_error::~length_error()+0x28>
   1a68a:	4620      	mov	r0, r4
   1a68c:	f7ff fa5e 	bl	19b4c <std::exception::~exception()>
   1a690:	4620      	mov	r0, r4
   1a692:	f7fc fecf 	bl	17434 <operator delete(void*)>
   1a696:	4620      	mov	r0, r4
   1a698:	b002      	add	sp, #8
   1a69a:	bd10      	pop	{r4, pc}
   1a69c:	f853 2c04 	ldr.w	r2, [r3, #-4]
   1a6a0:	1e51      	subs	r1, r2, #1
   1a6a2:	2a00      	cmp	r2, #0
   1a6a4:	f843 1c04 	str.w	r1, [r3, #-4]
   1a6a8:	dcef      	bgt.n	1a68a <std::length_error::~length_error()+0x16>
   1a6aa:	a901      	add	r1, sp, #4
   1a6ac:	f000 f88c 	bl	1a7c8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   1a6b0:	e7eb      	b.n	1a68a <std::length_error::~length_error()+0x16>
   1a6b2:	bf00      	nop
   1a6b4:	20006fd0 	.word	0x20006fd0
   1a6b8:	2000295c 	.word	0x2000295c

0001a6bc <std::logic_error::logic_error(char const*)>:
   1a6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a6be:	4b1b      	ldr	r3, [pc, #108]	; (1a72c <std::logic_error::logic_error(char const*)+0x70>)
   1a6c0:	6003      	str	r3, [r0, #0]
   1a6c2:	b083      	sub	sp, #12
   1a6c4:	4604      	mov	r4, r0
   1a6c6:	b349      	cbz	r1, 1a71c <std::logic_error::logic_error(char const*)+0x60>
   1a6c8:	4608      	mov	r0, r1
   1a6ca:	460d      	mov	r5, r1
   1a6cc:	f009 f858 	bl	23780 <strlen>
   1a6d0:	4607      	mov	r7, r0
   1a6d2:	b1a8      	cbz	r0, 1a700 <std::logic_error::logic_error(char const*)+0x44>
   1a6d4:	aa01      	add	r2, sp, #4
   1a6d6:	2100      	movs	r1, #0
   1a6d8:	f000 f83a 	bl	1a750 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
   1a6dc:	2f01      	cmp	r7, #1
   1a6de:	4606      	mov	r6, r0
   1a6e0:	f100 030c 	add.w	r3, r0, #12
   1a6e4:	d011      	beq.n	1a70a <std::logic_error::logic_error(char const*)+0x4e>
   1a6e6:	4618      	mov	r0, r3
   1a6e8:	4629      	mov	r1, r5
   1a6ea:	463a      	mov	r2, r7
   1a6ec:	f7fc fe00 	bl	172f0 <memcpy>
   1a6f0:	4603      	mov	r3, r0
   1a6f2:	4a0f      	ldr	r2, [pc, #60]	; (1a730 <std::logic_error::logic_error(char const*)+0x74>)
   1a6f4:	4296      	cmp	r6, r2
   1a6f6:	d10b      	bne.n	1a710 <std::logic_error::logic_error(char const*)+0x54>
   1a6f8:	4620      	mov	r0, r4
   1a6fa:	6063      	str	r3, [r4, #4]
   1a6fc:	b003      	add	sp, #12
   1a6fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a700:	4b0c      	ldr	r3, [pc, #48]	; (1a734 <std::logic_error::logic_error(char const*)+0x78>)
   1a702:	6063      	str	r3, [r4, #4]
   1a704:	4620      	mov	r0, r4
   1a706:	b003      	add	sp, #12
   1a708:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a70a:	782a      	ldrb	r2, [r5, #0]
   1a70c:	7302      	strb	r2, [r0, #12]
   1a70e:	e7f0      	b.n	1a6f2 <std::logic_error::logic_error(char const*)+0x36>
   1a710:	2200      	movs	r2, #0
   1a712:	60b2      	str	r2, [r6, #8]
   1a714:	6037      	str	r7, [r6, #0]
   1a716:	443e      	add	r6, r7
   1a718:	7332      	strb	r2, [r6, #12]
   1a71a:	e7ed      	b.n	1a6f8 <std::logic_error::logic_error(char const*)+0x3c>
   1a71c:	4806      	ldr	r0, [pc, #24]	; (1a738 <std::logic_error::logic_error(char const*)+0x7c>)
   1a71e:	f7ff f829 	bl	19774 <std::__throw_logic_error(char const*)>
   1a722:	4620      	mov	r0, r4
   1a724:	f7ff fa12 	bl	19b4c <std::exception::~exception()>
   1a728:	f7ff f948 	bl	199bc <__cxa_end_cleanup>
   1a72c:	2000295c 	.word	0x2000295c
   1a730:	20006fd0 	.word	0x20006fd0
   1a734:	20006fdc 	.word	0x20006fdc
   1a738:	2000238c 	.word	0x2000238c

0001a73c <std::length_error::length_error(char const*)>:
   1a73c:	b510      	push	{r4, lr}
   1a73e:	4604      	mov	r4, r0
   1a740:	f7ff ffbc 	bl	1a6bc <std::logic_error::logic_error(char const*)>
   1a744:	4b01      	ldr	r3, [pc, #4]	; (1a74c <std::length_error::length_error(char const*)+0x10>)
   1a746:	6023      	str	r3, [r4, #0]
   1a748:	4620      	mov	r0, r4
   1a74a:	bd10      	pop	{r4, pc}
   1a74c:	20002970 	.word	0x20002970

0001a750 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>:
   1a750:	4b1b      	ldr	r3, [pc, #108]	; (1a7c0 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x70>)
   1a752:	4298      	cmp	r0, r3
   1a754:	b510      	push	{r4, lr}
   1a756:	d830      	bhi.n	1a7ba <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x6a>
   1a758:	4288      	cmp	r0, r1
   1a75a:	4604      	mov	r4, r0
   1a75c:	d91c      	bls.n	1a798 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x48>
   1a75e:	004a      	lsls	r2, r1, #1
   1a760:	4290      	cmp	r0, r2
   1a762:	bf38      	it	cc
   1a764:	4614      	movcc	r4, r2
   1a766:	f104 021d 	add.w	r2, r4, #29
   1a76a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1a76e:	f104 000d 	add.w	r0, r4, #13
   1a772:	d918      	bls.n	1a7a6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x56>
   1a774:	428c      	cmp	r4, r1
   1a776:	d916      	bls.n	1a7a6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x56>
   1a778:	f3c2 020b 	ubfx	r2, r2, #0, #12
   1a77c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   1a780:	1aa4      	subs	r4, r4, r2
   1a782:	429c      	cmp	r4, r3
   1a784:	bf28      	it	cs
   1a786:	461c      	movcs	r4, r3
   1a788:	f104 000d 	add.w	r0, r4, #13
   1a78c:	f7fc fe4a 	bl	17424 <operator new(unsigned int)>
   1a790:	2200      	movs	r2, #0
   1a792:	e9c0 4201 	strd	r4, r2, [r0, #4]
   1a796:	bd10      	pop	{r4, pc}
   1a798:	f100 031d 	add.w	r3, r0, #29
   1a79c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   1a7a0:	f100 000d 	add.w	r0, r0, #13
   1a7a4:	d901      	bls.n	1a7aa <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x5a>
   1a7a6:	2800      	cmp	r0, #0
   1a7a8:	db05      	blt.n	1a7b6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x66>
   1a7aa:	f7fc fe3b 	bl	17424 <operator new(unsigned int)>
   1a7ae:	2200      	movs	r2, #0
   1a7b0:	e9c0 4201 	strd	r4, r2, [r0, #4]
   1a7b4:	bd10      	pop	{r4, pc}
   1a7b6:	f7fe ffcd 	bl	19754 <std::__throw_bad_alloc()>
   1a7ba:	4802      	ldr	r0, [pc, #8]	; (1a7c4 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x74>)
   1a7bc:	f7fe fff2 	bl	197a4 <std::__throw_length_error(char const*)>
   1a7c0:	3ffffffc 	.word	0x3ffffffc
   1a7c4:	20002374 	.word	0x20002374

0001a7c8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
   1a7c8:	f7fc be34 	b.w	17434 <operator delete(void*)>

0001a7cc <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   1a7cc:	b570      	push	{r4, r5, r6, lr}
   1a7ce:	6803      	ldr	r3, [r0, #0]
   1a7d0:	b084      	sub	sp, #16
   1a7d2:	2400      	movs	r4, #0
   1a7d4:	699e      	ldr	r6, [r3, #24]
   1a7d6:	9403      	str	r4, [sp, #12]
   1a7d8:	2310      	movs	r3, #16
   1a7da:	4615      	mov	r5, r2
   1a7dc:	9302      	str	r3, [sp, #8]
   1a7de:	e9cd 4400 	strd	r4, r4, [sp]
   1a7e2:	466b      	mov	r3, sp
   1a7e4:	6812      	ldr	r2, [r2, #0]
   1a7e6:	47b0      	blx	r6
   1a7e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1a7ec:	f003 0306 	and.w	r3, r3, #6
   1a7f0:	2b06      	cmp	r3, #6
   1a7f2:	bf03      	ittte	eq
   1a7f4:	9b00      	ldreq	r3, [sp, #0]
   1a7f6:	602b      	streq	r3, [r5, #0]
   1a7f8:	2001      	moveq	r0, #1
   1a7fa:	4620      	movne	r0, r4
   1a7fc:	b004      	add	sp, #16
   1a7fe:	bd70      	pop	{r4, r5, r6, pc}

0001a800 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   1a800:	9800      	ldr	r0, [sp, #0]
   1a802:	4290      	cmp	r0, r2
   1a804:	bf14      	ite	ne
   1a806:	2001      	movne	r0, #1
   1a808:	2006      	moveq	r0, #6
   1a80a:	4770      	bx	lr

0001a80c <__cxxabiv1::__class_type_info::~__class_type_info()>:
   1a80c:	b510      	push	{r4, lr}
   1a80e:	4b03      	ldr	r3, [pc, #12]	; (1a81c <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
   1a810:	6003      	str	r3, [r0, #0]
   1a812:	4604      	mov	r4, r0
   1a814:	f7ff fe28 	bl	1a468 <std::type_info::~type_info()>
   1a818:	4620      	mov	r0, r4
   1a81a:	bd10      	pop	{r4, pc}
   1a81c:	200028e4 	.word	0x200028e4

0001a820 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   1a820:	b510      	push	{r4, lr}
   1a822:	4b05      	ldr	r3, [pc, #20]	; (1a838 <__cxxabiv1::__class_type_info::~__class_type_info()+0x18>)
   1a824:	6003      	str	r3, [r0, #0]
   1a826:	4604      	mov	r4, r0
   1a828:	f7ff fe1e 	bl	1a468 <std::type_info::~type_info()>
   1a82c:	4620      	mov	r0, r4
   1a82e:	2108      	movs	r1, #8
   1a830:	f7fc fe08 	bl	17444 <operator delete(void*, unsigned int)>
   1a834:	4620      	mov	r0, r4
   1a836:	bd10      	pop	{r4, pc}
   1a838:	200028e4 	.word	0x200028e4

0001a83c <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   1a83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a840:	9f06      	ldr	r7, [sp, #24]
   1a842:	9908      	ldr	r1, [sp, #32]
   1a844:	9e09      	ldr	r6, [sp, #36]	; 0x24
   1a846:	428f      	cmp	r7, r1
   1a848:	4604      	mov	r4, r0
   1a84a:	4690      	mov	r8, r2
   1a84c:	461d      	mov	r5, r3
   1a84e:	d00c      	beq.n	1a86a <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2e>
   1a850:	4629      	mov	r1, r5
   1a852:	4620      	mov	r0, r4
   1a854:	f7ff fe0c 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a858:	b120      	cbz	r0, 1a864 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x28>
   1a85a:	2301      	movs	r3, #1
   1a85c:	6037      	str	r7, [r6, #0]
   1a85e:	f886 8004 	strb.w	r8, [r6, #4]
   1a862:	71b3      	strb	r3, [r6, #6]
   1a864:	2000      	movs	r0, #0
   1a866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a86a:	9907      	ldr	r1, [sp, #28]
   1a86c:	f7ff fe00 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a870:	2800      	cmp	r0, #0
   1a872:	d0ed      	beq.n	1a850 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x14>
   1a874:	f886 8005 	strb.w	r8, [r6, #5]
   1a878:	2000      	movs	r0, #0
   1a87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a87e:	bf00      	nop

0001a880 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   1a880:	b538      	push	{r3, r4, r5, lr}
   1a882:	4615      	mov	r5, r2
   1a884:	461c      	mov	r4, r3
   1a886:	f7ff fdf3 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a88a:	b900      	cbnz	r0, 1a88e <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0xe>
   1a88c:	bd38      	pop	{r3, r4, r5, pc}
   1a88e:	2208      	movs	r2, #8
   1a890:	2306      	movs	r3, #6
   1a892:	6025      	str	r5, [r4, #0]
   1a894:	60e2      	str	r2, [r4, #12]
   1a896:	7123      	strb	r3, [r4, #4]
   1a898:	bd38      	pop	{r3, r4, r5, pc}
   1a89a:	bf00      	nop

0001a89c <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   1a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8a0:	4606      	mov	r6, r0
   1a8a2:	4617      	mov	r7, r2
   1a8a4:	461d      	mov	r5, r3
   1a8a6:	460c      	mov	r4, r1
   1a8a8:	f7ff fde2 	bl	1a470 <std::type_info::operator==(std::type_info const&) const>
   1a8ac:	b948      	cbnz	r0, 1a8c2 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
   1a8ae:	2d03      	cmp	r5, #3
   1a8b0:	d807      	bhi.n	1a8c2 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
   1a8b2:	6823      	ldr	r3, [r4, #0]
   1a8b4:	463a      	mov	r2, r7
   1a8b6:	4631      	mov	r1, r6
   1a8b8:	4620      	mov	r0, r4
   1a8ba:	695b      	ldr	r3, [r3, #20]
   1a8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a8c0:	4718      	bx	r3
   1a8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a8c6:	bf00      	nop

0001a8c8 <d_make_comp>:
   1a8c8:	2931      	cmp	r1, #49	; 0x31
   1a8ca:	b570      	push	{r4, r5, r6, lr}
   1a8cc:	4686      	mov	lr, r0
   1a8ce:	d845      	bhi.n	1a95c <d_make_comp+0x94>
   1a8d0:	2928      	cmp	r1, #40	; 0x28
   1a8d2:	d82a      	bhi.n	1a92a <d_make_comp+0x62>
   1a8d4:	290a      	cmp	r1, #10
   1a8d6:	d920      	bls.n	1a91a <d_make_comp+0x52>
   1a8d8:	f1a1 0c0b 	sub.w	ip, r1, #11
   1a8dc:	4c32      	ldr	r4, [pc, #200]	; (1a9a8 <d_make_comp+0xe0>)
   1a8de:	fa5f fc8c 	uxtb.w	ip, ip
   1a8e2:	2001      	movs	r0, #1
   1a8e4:	fa00 f00c 	lsl.w	r0, r0, ip
   1a8e8:	4004      	ands	r4, r0
   1a8ea:	2c00      	cmp	r4, #0
   1a8ec:	d04d      	beq.n	1a98a <d_make_comp+0xc2>
   1a8ee:	b1d2      	cbz	r2, 1a926 <d_make_comp+0x5e>
   1a8f0:	e9de 4005 	ldrd	r4, r0, [lr, #20]
   1a8f4:	4284      	cmp	r4, r0
   1a8f6:	da16      	bge.n	1a926 <d_make_comp+0x5e>
   1a8f8:	f8de 5010 	ldr.w	r5, [lr, #16]
   1a8fc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   1a900:	eb05 008c 	add.w	r0, r5, ip, lsl #2
   1a904:	3401      	adds	r4, #1
   1a906:	2600      	movs	r6, #0
   1a908:	e9c0 6601 	strd	r6, r6, [r0, #4]
   1a90c:	f8ce 4014 	str.w	r4, [lr, #20]
   1a910:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
   1a914:	e9c0 2303 	strd	r2, r3, [r0, #12]
   1a918:	bd70      	pop	{r4, r5, r6, pc}
   1a91a:	2904      	cmp	r1, #4
   1a91c:	d930      	bls.n	1a980 <d_make_comp+0xb8>
   1a91e:	f1a1 0009 	sub.w	r0, r1, #9
   1a922:	2801      	cmp	r0, #1
   1a924:	d9e3      	bls.n	1a8ee <d_make_comp+0x26>
   1a926:	2000      	movs	r0, #0
   1a928:	bd70      	pop	{r4, r5, r6, pc}
   1a92a:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
   1a92e:	2808      	cmp	r0, #8
   1a930:	d8f9      	bhi.n	1a926 <d_make_comp+0x5e>
   1a932:	a401      	add	r4, pc, #4	; (adr r4, 1a938 <d_make_comp+0x70>)
   1a934:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
   1a938:	0001a8f1 	.word	0x0001a8f1
   1a93c:	0001a985 	.word	0x0001a985
   1a940:	0001a981 	.word	0x0001a981
   1a944:	0001a927 	.word	0x0001a927
   1a948:	0001a981 	.word	0x0001a981
   1a94c:	0001a8f1 	.word	0x0001a8f1
   1a950:	0001a8f1 	.word	0x0001a8f1
   1a954:	0001a8ef 	.word	0x0001a8ef
   1a958:	0001a985 	.word	0x0001a985
   1a95c:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
   1a960:	b2c0      	uxtb	r0, r0
   1a962:	281d      	cmp	r0, #29
   1a964:	d8df      	bhi.n	1a926 <d_make_comp+0x5e>
   1a966:	4c11      	ldr	r4, [pc, #68]	; (1a9ac <d_make_comp+0xe4>)
   1a968:	f04f 0c01 	mov.w	ip, #1
   1a96c:	fa0c fc00 	lsl.w	ip, ip, r0
   1a970:	ea0c 0404 	and.w	r4, ip, r4
   1a974:	2c00      	cmp	r4, #0
   1a976:	d1ba      	bne.n	1a8ee <d_make_comp+0x26>
   1a978:	480d      	ldr	r0, [pc, #52]	; (1a9b0 <d_make_comp+0xe8>)
   1a97a:	ea0c 0000 	and.w	r0, ip, r0
   1a97e:	b170      	cbz	r0, 1a99e <d_make_comp+0xd6>
   1a980:	2a00      	cmp	r2, #0
   1a982:	d0d0      	beq.n	1a926 <d_make_comp+0x5e>
   1a984:	2b00      	cmp	r3, #0
   1a986:	d1b3      	bne.n	1a8f0 <d_make_comp+0x28>
   1a988:	e7cd      	b.n	1a926 <d_make_comp+0x5e>
   1a98a:	f410 1f7f 	tst.w	r0, #4177920	; 0x3fc000
   1a98e:	d1af      	bne.n	1a8f0 <d_make_comp+0x28>
   1a990:	4c08      	ldr	r4, [pc, #32]	; (1a9b4 <d_make_comp+0xec>)
   1a992:	4004      	ands	r4, r0
   1a994:	2c00      	cmp	r4, #0
   1a996:	d0c6      	beq.n	1a926 <d_make_comp+0x5e>
   1a998:	2a00      	cmp	r2, #0
   1a99a:	d1f3      	bne.n	1a984 <d_make_comp+0xbc>
   1a99c:	e7c3      	b.n	1a926 <d_make_comp+0x5e>
   1a99e:	f01c 5c50 	ands.w	ip, ip, #872415232	; 0x34000000
   1a9a2:	d0c0      	beq.n	1a926 <d_make_comp+0x5e>
   1a9a4:	e7a4      	b.n	1a8f0 <d_make_comp+0x28>
   1a9a6:	bf00      	nop
   1a9a8:	2f801ffe 	.word	0x2f801ffe
   1a9ac:	01c71107 	.word	0x01c71107
   1a9b0:	0a002ef8 	.word	0x0a002ef8
   1a9b4:	00400001 	.word	0x00400001

0001a9b8 <d_number>:
   1a9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9ba:	68c2      	ldr	r2, [r0, #12]
   1a9bc:	7811      	ldrb	r1, [r2, #0]
   1a9be:	296e      	cmp	r1, #110	; 0x6e
   1a9c0:	4686      	mov	lr, r0
   1a9c2:	d025      	beq.n	1aa10 <d_number+0x58>
   1a9c4:	3930      	subs	r1, #48	; 0x30
   1a9c6:	b2cb      	uxtb	r3, r1
   1a9c8:	2b09      	cmp	r3, #9
   1a9ca:	d82b      	bhi.n	1aa24 <d_number+0x6c>
   1a9cc:	2600      	movs	r6, #0
   1a9ce:	4d16      	ldr	r5, [pc, #88]	; (1aa28 <d_number+0x70>)
   1a9d0:	2000      	movs	r0, #0
   1a9d2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   1a9d6:	e002      	b.n	1a9de <d_number+0x26>
   1a9d8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
   1a9dc:	dc15      	bgt.n	1aa0a <d_number+0x52>
   1a9de:	3201      	adds	r2, #1
   1a9e0:	f8ce 200c 	str.w	r2, [lr, #12]
   1a9e4:	7813      	ldrb	r3, [r2, #0]
   1a9e6:	3b30      	subs	r3, #48	; 0x30
   1a9e8:	fa5f fc83 	uxtb.w	ip, r3
   1a9ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a9f0:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   1a9f4:	f1bc 0f09 	cmp.w	ip, #9
   1a9f8:	4619      	mov	r1, r3
   1a9fa:	eba4 0303 	sub.w	r3, r4, r3
   1a9fe:	fba5 7303 	umull	r7, r3, r5, r3
   1aa02:	d9e9      	bls.n	1a9d8 <d_number+0x20>
   1aa04:	b106      	cbz	r6, 1aa08 <d_number+0x50>
   1aa06:	4240      	negs	r0, r0
   1aa08:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa10:	1c53      	adds	r3, r2, #1
   1aa12:	60c3      	str	r3, [r0, #12]
   1aa14:	7851      	ldrb	r1, [r2, #1]
   1aa16:	3930      	subs	r1, #48	; 0x30
   1aa18:	b2ca      	uxtb	r2, r1
   1aa1a:	2a09      	cmp	r2, #9
   1aa1c:	d802      	bhi.n	1aa24 <d_number+0x6c>
   1aa1e:	461a      	mov	r2, r3
   1aa20:	2601      	movs	r6, #1
   1aa22:	e7d4      	b.n	1a9ce <d_number+0x16>
   1aa24:	2000      	movs	r0, #0
   1aa26:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1aa28:	cccccccd 	.word	0xcccccccd

0001aa2c <d_call_offset>:
   1aa2c:	b510      	push	{r4, lr}
   1aa2e:	4604      	mov	r4, r0
   1aa30:	b929      	cbnz	r1, 1aa3e <d_call_offset+0x12>
   1aa32:	68c3      	ldr	r3, [r0, #12]
   1aa34:	781a      	ldrb	r2, [r3, #0]
   1aa36:	b16a      	cbz	r2, 1aa54 <d_call_offset+0x28>
   1aa38:	1c5a      	adds	r2, r3, #1
   1aa3a:	60c2      	str	r2, [r0, #12]
   1aa3c:	7819      	ldrb	r1, [r3, #0]
   1aa3e:	2968      	cmp	r1, #104	; 0x68
   1aa40:	d00c      	beq.n	1aa5c <d_call_offset+0x30>
   1aa42:	2976      	cmp	r1, #118	; 0x76
   1aa44:	d106      	bne.n	1aa54 <d_call_offset+0x28>
   1aa46:	4620      	mov	r0, r4
   1aa48:	f7ff ffb6 	bl	1a9b8 <d_number>
   1aa4c:	68e3      	ldr	r3, [r4, #12]
   1aa4e:	781a      	ldrb	r2, [r3, #0]
   1aa50:	2a5f      	cmp	r2, #95	; 0x5f
   1aa52:	d001      	beq.n	1aa58 <d_call_offset+0x2c>
   1aa54:	2000      	movs	r0, #0
   1aa56:	bd10      	pop	{r4, pc}
   1aa58:	3301      	adds	r3, #1
   1aa5a:	60e3      	str	r3, [r4, #12]
   1aa5c:	4620      	mov	r0, r4
   1aa5e:	f7ff ffab 	bl	1a9b8 <d_number>
   1aa62:	68e3      	ldr	r3, [r4, #12]
   1aa64:	781a      	ldrb	r2, [r3, #0]
   1aa66:	2a5f      	cmp	r2, #95	; 0x5f
   1aa68:	d1f4      	bne.n	1aa54 <d_call_offset+0x28>
   1aa6a:	3301      	adds	r3, #1
   1aa6c:	60e3      	str	r3, [r4, #12]
   1aa6e:	2001      	movs	r0, #1
   1aa70:	bd10      	pop	{r4, pc}
   1aa72:	bf00      	nop

0001aa74 <d_ref_qualifier>:
   1aa74:	b410      	push	{r4}
   1aa76:	68c3      	ldr	r3, [r0, #12]
   1aa78:	460a      	mov	r2, r1
   1aa7a:	7819      	ldrb	r1, [r3, #0]
   1aa7c:	2952      	cmp	r1, #82	; 0x52
   1aa7e:	d010      	beq.n	1aaa2 <d_ref_qualifier+0x2e>
   1aa80:	294f      	cmp	r1, #79	; 0x4f
   1aa82:	d003      	beq.n	1aa8c <d_ref_qualifier+0x18>
   1aa84:	4610      	mov	r0, r2
   1aa86:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aa8a:	4770      	bx	lr
   1aa8c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1aa8e:	2120      	movs	r1, #32
   1aa90:	3403      	adds	r4, #3
   1aa92:	3301      	adds	r3, #1
   1aa94:	62c4      	str	r4, [r0, #44]	; 0x2c
   1aa96:	60c3      	str	r3, [r0, #12]
   1aa98:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aa9c:	2300      	movs	r3, #0
   1aa9e:	f7ff bf13 	b.w	1a8c8 <d_make_comp>
   1aaa2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   1aaa4:	211f      	movs	r1, #31
   1aaa6:	3402      	adds	r4, #2
   1aaa8:	e7f3      	b.n	1aa92 <d_ref_qualifier+0x1e>
   1aaaa:	bf00      	nop

0001aaac <d_count_templates_scopes>:
   1aaac:	2900      	cmp	r1, #0
   1aaae:	d066      	beq.n	1ab7e <d_count_templates_scopes+0xd2>
   1aab0:	b538      	push	{r3, r4, r5, lr}
   1aab2:	4605      	mov	r5, r0
   1aab4:	460c      	mov	r4, r1
   1aab6:	68a3      	ldr	r3, [r4, #8]
   1aab8:	2b01      	cmp	r3, #1
   1aaba:	dc39      	bgt.n	1ab30 <d_count_templates_scopes+0x84>
   1aabc:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
   1aac0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   1aac4:	f103 0301 	add.w	r3, r3, #1
   1aac8:	dc32      	bgt.n	1ab30 <d_count_templates_scopes+0x84>
   1aaca:	7822      	ldrb	r2, [r4, #0]
   1aacc:	60a3      	str	r3, [r4, #8]
   1aace:	1e53      	subs	r3, r2, #1
   1aad0:	2b50      	cmp	r3, #80	; 0x50
   1aad2:	d82d      	bhi.n	1ab30 <d_count_templates_scopes+0x84>
   1aad4:	e8df f003 	tbb	[pc, r3]
   1aad8:	4c313131 	.word	0x4c313131
   1aadc:	2d2d2c2c 	.word	0x2d2d2c2c
   1aae0:	31313131 	.word	0x31313131
   1aae4:	31313131 	.word	0x31313131
   1aae8:	31313131 	.word	0x31313131
   1aaec:	2c313131 	.word	0x2c313131
   1aaf0:	31313131 	.word	0x31313131
   1aaf4:	31313131 	.word	0x31313131
   1aaf8:	42423131 	.word	0x42423131
   1aafc:	312c3131 	.word	0x312c3131
   1ab00:	29313131 	.word	0x29313131
   1ab04:	31313131 	.word	0x31313131
   1ab08:	312d2c31 	.word	0x312d2c31
   1ab0c:	31313131 	.word	0x31313131
   1ab10:	31313131 	.word	0x31313131
   1ab14:	31313131 	.word	0x31313131
   1ab18:	312c2c31 	.word	0x312c2c31
   1ab1c:	29292929 	.word	0x29292929
   1ab20:	3131312c 	.word	0x3131312c
   1ab24:	31313131 	.word	0x31313131
   1ab28:	31          	.byte	0x31
   1ab29:	00          	.byte	0x00
   1ab2a:	68e4      	ldr	r4, [r4, #12]
   1ab2c:	2c00      	cmp	r4, #0
   1ab2e:	d1c2      	bne.n	1aab6 <d_count_templates_scopes+0xa>
   1ab30:	bd38      	pop	{r3, r4, r5, pc}
   1ab32:	6924      	ldr	r4, [r4, #16]
   1ab34:	2c00      	cmp	r4, #0
   1ab36:	d1be      	bne.n	1aab6 <d_count_templates_scopes+0xa>
   1ab38:	e7fa      	b.n	1ab30 <d_count_templates_scopes+0x84>
   1ab3a:	68e1      	ldr	r1, [r4, #12]
   1ab3c:	1c43      	adds	r3, r0, #1
   1ab3e:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1ab42:	4628      	mov	r0, r5
   1ab44:	f7ff ffb2 	bl	1aaac <d_count_templates_scopes>
   1ab48:	6921      	ldr	r1, [r4, #16]
   1ab4a:	4628      	mov	r0, r5
   1ab4c:	f7ff ffae 	bl	1aaac <d_count_templates_scopes>
   1ab50:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   1ab54:	3b01      	subs	r3, #1
   1ab56:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1ab5a:	bd38      	pop	{r3, r4, r5, pc}
   1ab5c:	68e1      	ldr	r1, [r4, #12]
   1ab5e:	780b      	ldrb	r3, [r1, #0]
   1ab60:	2b05      	cmp	r3, #5
   1ab62:	d1eb      	bne.n	1ab3c <d_count_templates_scopes+0x90>
   1ab64:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   1ab68:	3301      	adds	r3, #1
   1ab6a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
   1ab6e:	e7e5      	b.n	1ab3c <d_count_templates_scopes+0x90>
   1ab70:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   1ab74:	68e1      	ldr	r1, [r4, #12]
   1ab76:	3301      	adds	r3, #1
   1ab78:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   1ab7c:	e7de      	b.n	1ab3c <d_count_templates_scopes+0x90>
   1ab7e:	4770      	bx	lr

0001ab80 <d_pack_length>:
   1ab80:	4603      	mov	r3, r0
   1ab82:	b148      	cbz	r0, 1ab98 <d_pack_length+0x18>
   1ab84:	2300      	movs	r3, #0
   1ab86:	e004      	b.n	1ab92 <d_pack_length+0x12>
   1ab88:	68c2      	ldr	r2, [r0, #12]
   1ab8a:	b12a      	cbz	r2, 1ab98 <d_pack_length+0x18>
   1ab8c:	6900      	ldr	r0, [r0, #16]
   1ab8e:	3301      	adds	r3, #1
   1ab90:	b110      	cbz	r0, 1ab98 <d_pack_length+0x18>
   1ab92:	7802      	ldrb	r2, [r0, #0]
   1ab94:	2a2f      	cmp	r2, #47	; 0x2f
   1ab96:	d0f7      	beq.n	1ab88 <d_pack_length+0x8>
   1ab98:	4618      	mov	r0, r3
   1ab9a:	4770      	bx	lr

0001ab9c <d_discriminator>:
   1ab9c:	68c3      	ldr	r3, [r0, #12]
   1ab9e:	781a      	ldrb	r2, [r3, #0]
   1aba0:	2a5f      	cmp	r2, #95	; 0x5f
   1aba2:	d001      	beq.n	1aba8 <d_discriminator+0xc>
   1aba4:	2001      	movs	r0, #1
   1aba6:	4770      	bx	lr
   1aba8:	b510      	push	{r4, lr}
   1abaa:	1c5a      	adds	r2, r3, #1
   1abac:	60c2      	str	r2, [r0, #12]
   1abae:	785a      	ldrb	r2, [r3, #1]
   1abb0:	2a5f      	cmp	r2, #95	; 0x5f
   1abb2:	4604      	mov	r4, r0
   1abb4:	d004      	beq.n	1abc0 <d_discriminator+0x24>
   1abb6:	f7ff feff 	bl	1a9b8 <d_number>
   1abba:	43c0      	mvns	r0, r0
   1abbc:	0fc0      	lsrs	r0, r0, #31
   1abbe:	bd10      	pop	{r4, pc}
   1abc0:	3302      	adds	r3, #2
   1abc2:	60c3      	str	r3, [r0, #12]
   1abc4:	f7ff fef8 	bl	1a9b8 <d_number>
   1abc8:	2800      	cmp	r0, #0
   1abca:	db09      	blt.n	1abe0 <d_discriminator+0x44>
   1abcc:	2809      	cmp	r0, #9
   1abce:	dd05      	ble.n	1abdc <d_discriminator+0x40>
   1abd0:	68e3      	ldr	r3, [r4, #12]
   1abd2:	781a      	ldrb	r2, [r3, #0]
   1abd4:	2a5f      	cmp	r2, #95	; 0x5f
   1abd6:	d103      	bne.n	1abe0 <d_discriminator+0x44>
   1abd8:	3301      	adds	r3, #1
   1abda:	60e3      	str	r3, [r4, #12]
   1abdc:	2001      	movs	r0, #1
   1abde:	bd10      	pop	{r4, pc}
   1abe0:	2000      	movs	r0, #0
   1abe2:	bd10      	pop	{r4, pc}

0001abe4 <d_index_template_argument.part.0>:
   1abe4:	b920      	cbnz	r0, 1abf0 <d_index_template_argument.part.0+0xc>
   1abe6:	e009      	b.n	1abfc <d_index_template_argument.part.0+0x18>
   1abe8:	b139      	cbz	r1, 1abfa <d_index_template_argument.part.0+0x16>
   1abea:	6900      	ldr	r0, [r0, #16]
   1abec:	3901      	subs	r1, #1
   1abee:	b130      	cbz	r0, 1abfe <d_index_template_argument.part.0+0x1a>
   1abf0:	7803      	ldrb	r3, [r0, #0]
   1abf2:	2b2f      	cmp	r3, #47	; 0x2f
   1abf4:	d0f8      	beq.n	1abe8 <d_index_template_argument.part.0+0x4>
   1abf6:	2000      	movs	r0, #0
   1abf8:	4770      	bx	lr
   1abfa:	68c0      	ldr	r0, [r0, #12]
   1abfc:	4770      	bx	lr
   1abfe:	4770      	bx	lr

0001ac00 <d_growable_string_callback_adapter>:
   1ac00:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ac02:	4614      	mov	r4, r2
   1ac04:	6852      	ldr	r2, [r2, #4]
   1ac06:	68a5      	ldr	r5, [r4, #8]
   1ac08:	1c4b      	adds	r3, r1, #1
   1ac0a:	4413      	add	r3, r2
   1ac0c:	42ab      	cmp	r3, r5
   1ac0e:	b083      	sub	sp, #12
   1ac10:	460e      	mov	r6, r1
   1ac12:	4607      	mov	r7, r0
   1ac14:	d811      	bhi.n	1ac3a <d_growable_string_callback_adapter+0x3a>
   1ac16:	68e5      	ldr	r5, [r4, #12]
   1ac18:	b96d      	cbnz	r5, 1ac36 <d_growable_string_callback_adapter+0x36>
   1ac1a:	6863      	ldr	r3, [r4, #4]
   1ac1c:	6820      	ldr	r0, [r4, #0]
   1ac1e:	4632      	mov	r2, r6
   1ac20:	4418      	add	r0, r3
   1ac22:	4639      	mov	r1, r7
   1ac24:	f7fc fb64 	bl	172f0 <memcpy>
   1ac28:	e9d4 3200 	ldrd	r3, r2, [r4]
   1ac2c:	4433      	add	r3, r6
   1ac2e:	549d      	strb	r5, [r3, r2]
   1ac30:	6863      	ldr	r3, [r4, #4]
   1ac32:	4433      	add	r3, r6
   1ac34:	6063      	str	r3, [r4, #4]
   1ac36:	b003      	add	sp, #12
   1ac38:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ac3a:	68e2      	ldr	r2, [r4, #12]
   1ac3c:	2a00      	cmp	r2, #0
   1ac3e:	d1fa      	bne.n	1ac36 <d_growable_string_callback_adapter+0x36>
   1ac40:	b155      	cbz	r5, 1ac58 <d_growable_string_callback_adapter+0x58>
   1ac42:	006d      	lsls	r5, r5, #1
   1ac44:	42ab      	cmp	r3, r5
   1ac46:	d8fc      	bhi.n	1ac42 <d_growable_string_callback_adapter+0x42>
   1ac48:	6820      	ldr	r0, [r4, #0]
   1ac4a:	4629      	mov	r1, r5
   1ac4c:	f007 fb10 	bl	22270 <realloc>
   1ac50:	b138      	cbz	r0, 1ac62 <d_growable_string_callback_adapter+0x62>
   1ac52:	6020      	str	r0, [r4, #0]
   1ac54:	60a5      	str	r5, [r4, #8]
   1ac56:	e7de      	b.n	1ac16 <d_growable_string_callback_adapter+0x16>
   1ac58:	2b02      	cmp	r3, #2
   1ac5a:	f04f 0502 	mov.w	r5, #2
   1ac5e:	d8f0      	bhi.n	1ac42 <d_growable_string_callback_adapter+0x42>
   1ac60:	e7f2      	b.n	1ac48 <d_growable_string_callback_adapter+0x48>
   1ac62:	9001      	str	r0, [sp, #4]
   1ac64:	6820      	ldr	r0, [r4, #0]
   1ac66:	f007 f83f 	bl	21ce8 <free>
   1ac6a:	9b01      	ldr	r3, [sp, #4]
   1ac6c:	2201      	movs	r2, #1
   1ac6e:	e9c4 3300 	strd	r3, r3, [r4]
   1ac72:	e9c4 3202 	strd	r3, r2, [r4, #8]
   1ac76:	e7de      	b.n	1ac36 <d_growable_string_callback_adapter+0x36>

0001ac78 <next_is_type_qual.isra.0>:
   1ac78:	7803      	ldrb	r3, [r0, #0]
   1ac7a:	2b72      	cmp	r3, #114	; 0x72
   1ac7c:	d007      	beq.n	1ac8e <next_is_type_qual.isra.0+0x16>
   1ac7e:	2b56      	cmp	r3, #86	; 0x56
   1ac80:	d005      	beq.n	1ac8e <next_is_type_qual.isra.0+0x16>
   1ac82:	2b4b      	cmp	r3, #75	; 0x4b
   1ac84:	d003      	beq.n	1ac8e <next_is_type_qual.isra.0+0x16>
   1ac86:	2b44      	cmp	r3, #68	; 0x44
   1ac88:	d003      	beq.n	1ac92 <next_is_type_qual.isra.0+0x1a>
   1ac8a:	2000      	movs	r0, #0
   1ac8c:	4770      	bx	lr
   1ac8e:	2001      	movs	r0, #1
   1ac90:	4770      	bx	lr
   1ac92:	7840      	ldrb	r0, [r0, #1]
   1ac94:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   1ac98:	2b4f      	cmp	r3, #79	; 0x4f
   1ac9a:	d0f8      	beq.n	1ac8e <next_is_type_qual.isra.0+0x16>
   1ac9c:	3877      	subs	r0, #119	; 0x77
   1ac9e:	2801      	cmp	r0, #1
   1aca0:	bf8c      	ite	hi
   1aca2:	2000      	movhi	r0, #0
   1aca4:	2001      	movls	r0, #1
   1aca6:	4770      	bx	lr

0001aca8 <d_append_char>:
   1aca8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1acac:	2bff      	cmp	r3, #255	; 0xff
   1acae:	b570      	push	{r4, r5, r6, lr}
   1acb0:	4604      	mov	r4, r0
   1acb2:	460d      	mov	r5, r1
   1acb4:	d006      	beq.n	1acc4 <d_append_char+0x1c>
   1acb6:	1c5a      	adds	r2, r3, #1
   1acb8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1acbc:	54e5      	strb	r5, [r4, r3]
   1acbe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1acc2:	bd70      	pop	{r4, r5, r6, pc}
   1acc4:	2600      	movs	r6, #0
   1acc6:	4619      	mov	r1, r3
   1acc8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1accc:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1acd0:	4798      	blx	r3
   1acd2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1acd6:	2201      	movs	r2, #1
   1acd8:	4413      	add	r3, r2
   1acda:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1acde:	4633      	mov	r3, r6
   1ace0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ace4:	54e5      	strb	r5, [r4, r3]
   1ace6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1acea:	bd70      	pop	{r4, r5, r6, pc}

0001acec <d_lookup_template_argument>:
   1acec:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1acf0:	b19b      	cbz	r3, 1ad1a <d_lookup_template_argument+0x2e>
   1acf2:	68ca      	ldr	r2, [r1, #12]
   1acf4:	685b      	ldr	r3, [r3, #4]
   1acf6:	2a00      	cmp	r2, #0
   1acf8:	691b      	ldr	r3, [r3, #16]
   1acfa:	db09      	blt.n	1ad10 <d_lookup_template_argument+0x24>
   1acfc:	b923      	cbnz	r3, 1ad08 <d_lookup_template_argument+0x1c>
   1acfe:	e007      	b.n	1ad10 <d_lookup_template_argument+0x24>
   1ad00:	b142      	cbz	r2, 1ad14 <d_lookup_template_argument+0x28>
   1ad02:	691b      	ldr	r3, [r3, #16]
   1ad04:	3a01      	subs	r2, #1
   1ad06:	b11b      	cbz	r3, 1ad10 <d_lookup_template_argument+0x24>
   1ad08:	7819      	ldrb	r1, [r3, #0]
   1ad0a:	292f      	cmp	r1, #47	; 0x2f
   1ad0c:	d0f8      	beq.n	1ad00 <d_lookup_template_argument+0x14>
   1ad0e:	2300      	movs	r3, #0
   1ad10:	4618      	mov	r0, r3
   1ad12:	4770      	bx	lr
   1ad14:	68db      	ldr	r3, [r3, #12]
   1ad16:	4618      	mov	r0, r3
   1ad18:	4770      	bx	lr
   1ad1a:	2201      	movs	r2, #1
   1ad1c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1ad20:	e7f6      	b.n	1ad10 <d_lookup_template_argument+0x24>
   1ad22:	bf00      	nop

0001ad24 <d_find_pack>:
   1ad24:	2900      	cmp	r1, #0
   1ad26:	d040      	beq.n	1adaa <d_find_pack+0x86>
   1ad28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ad2c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1adb4 <d_find_pack+0x90>
   1ad30:	4f1f      	ldr	r7, [pc, #124]	; (1adb0 <d_find_pack+0x8c>)
   1ad32:	4605      	mov	r5, r0
   1ad34:	460c      	mov	r4, r1
   1ad36:	2601      	movs	r6, #1
   1ad38:	7823      	ldrb	r3, [r4, #0]
   1ad3a:	2b08      	cmp	r3, #8
   1ad3c:	d813      	bhi.n	1ad66 <d_find_pack+0x42>
   1ad3e:	2b08      	cmp	r3, #8
   1ad40:	d81e      	bhi.n	1ad80 <d_find_pack+0x5c>
   1ad42:	e8df f003 	tbb	[pc, r3]
   1ad46:	1d0d      	.short	0x1d0d
   1ad48:	271d1d1d 	.word	0x271d1d1d
   1ad4c:	230d      	.short	0x230d
   1ad4e:	23          	.byte	0x23
   1ad4f:	00          	.byte	0x00
   1ad50:	2b17      	cmp	r3, #23
   1ad52:	d915      	bls.n	1ad80 <d_find_pack+0x5c>
   1ad54:	3b18      	subs	r3, #24
   1ad56:	b2db      	uxtb	r3, r3
   1ad58:	fa27 f303 	lsr.w	r3, r7, r3
   1ad5c:	07db      	lsls	r3, r3, #31
   1ad5e:	d50f      	bpl.n	1ad80 <d_find_pack+0x5c>
   1ad60:	2000      	movs	r0, #0
   1ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ad66:	2b2c      	cmp	r3, #44	; 0x2c
   1ad68:	d9f2      	bls.n	1ad50 <d_find_pack+0x2c>
   1ad6a:	3b32      	subs	r3, #50	; 0x32
   1ad6c:	b2db      	uxtb	r3, r3
   1ad6e:	2b1b      	cmp	r3, #27
   1ad70:	d806      	bhi.n	1ad80 <d_find_pack+0x5c>
   1ad72:	fa06 f203 	lsl.w	r2, r6, r3
   1ad76:	ea12 0f08 	tst.w	r2, r8
   1ad7a:	d1f1      	bne.n	1ad60 <d_find_pack+0x3c>
   1ad7c:	2b01      	cmp	r3, #1
   1ad7e:	d005      	beq.n	1ad8c <d_find_pack+0x68>
   1ad80:	68e1      	ldr	r1, [r4, #12]
   1ad82:	4628      	mov	r0, r5
   1ad84:	f7ff ffce 	bl	1ad24 <d_find_pack>
   1ad88:	2800      	cmp	r0, #0
   1ad8a:	d1ea      	bne.n	1ad62 <d_find_pack+0x3e>
   1ad8c:	6924      	ldr	r4, [r4, #16]
   1ad8e:	2c00      	cmp	r4, #0
   1ad90:	d1d2      	bne.n	1ad38 <d_find_pack+0x14>
   1ad92:	e7e5      	b.n	1ad60 <d_find_pack+0x3c>
   1ad94:	4621      	mov	r1, r4
   1ad96:	4628      	mov	r0, r5
   1ad98:	f7ff ffa8 	bl	1acec <d_lookup_template_argument>
   1ad9c:	2800      	cmp	r0, #0
   1ad9e:	d0df      	beq.n	1ad60 <d_find_pack+0x3c>
   1ada0:	7803      	ldrb	r3, [r0, #0]
   1ada2:	2b2f      	cmp	r3, #47	; 0x2f
   1ada4:	d1dc      	bne.n	1ad60 <d_find_pack+0x3c>
   1ada6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1adaa:	2000      	movs	r0, #0
   1adac:	4770      	bx	lr
   1adae:	bf00      	nop
   1adb0:	00108001 	.word	0x00108001
   1adb4:	0ce30001 	.word	0x0ce30001

0001adb8 <d_append_string>:
   1adb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1adbc:	4604      	mov	r4, r0
   1adbe:	4608      	mov	r0, r1
   1adc0:	460d      	mov	r5, r1
   1adc2:	f008 fcdd 	bl	23780 <strlen>
   1adc6:	b340      	cbz	r0, 1ae1a <d_append_string+0x62>
   1adc8:	3d01      	subs	r5, #1
   1adca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1adce:	182f      	adds	r7, r5, r0
   1add0:	f04f 0800 	mov.w	r8, #0
   1add4:	e009      	b.n	1adea <d_append_string+0x32>
   1add6:	460b      	mov	r3, r1
   1add8:	42bd      	cmp	r5, r7
   1adda:	f101 0101 	add.w	r1, r1, #1
   1adde:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ade2:	54e6      	strb	r6, [r4, r3]
   1ade4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ade8:	d017      	beq.n	1ae1a <d_append_string+0x62>
   1adea:	29ff      	cmp	r1, #255	; 0xff
   1adec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1adf0:	d1f1      	bne.n	1add6 <d_append_string+0x1e>
   1adf2:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1adf6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1adfa:	4620      	mov	r0, r4
   1adfc:	4798      	blx	r3
   1adfe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ae02:	2101      	movs	r1, #1
   1ae04:	440b      	add	r3, r1
   1ae06:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ae0a:	2300      	movs	r3, #0
   1ae0c:	42bd      	cmp	r5, r7
   1ae0e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ae12:	54e6      	strb	r6, [r4, r3]
   1ae14:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ae18:	d1e7      	bne.n	1adea <d_append_string+0x32>
   1ae1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ae1e:	bf00      	nop

0001ae20 <d_template_param>:
   1ae20:	b538      	push	{r3, r4, r5, lr}
   1ae22:	68c3      	ldr	r3, [r0, #12]
   1ae24:	781a      	ldrb	r2, [r3, #0]
   1ae26:	2a54      	cmp	r2, #84	; 0x54
   1ae28:	d124      	bne.n	1ae74 <d_template_param+0x54>
   1ae2a:	1c5a      	adds	r2, r3, #1
   1ae2c:	60c2      	str	r2, [r0, #12]
   1ae2e:	785a      	ldrb	r2, [r3, #1]
   1ae30:	2a5f      	cmp	r2, #95	; 0x5f
   1ae32:	4604      	mov	r4, r0
   1ae34:	d020      	beq.n	1ae78 <d_template_param+0x58>
   1ae36:	2a6e      	cmp	r2, #110	; 0x6e
   1ae38:	d01c      	beq.n	1ae74 <d_template_param+0x54>
   1ae3a:	f7ff fdbd 	bl	1a9b8 <d_number>
   1ae3e:	1c41      	adds	r1, r0, #1
   1ae40:	d418      	bmi.n	1ae74 <d_template_param+0x54>
   1ae42:	68e3      	ldr	r3, [r4, #12]
   1ae44:	781a      	ldrb	r2, [r3, #0]
   1ae46:	2a5f      	cmp	r2, #95	; 0x5f
   1ae48:	d114      	bne.n	1ae74 <d_template_param+0x54>
   1ae4a:	3301      	adds	r3, #1
   1ae4c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1ae50:	4282      	cmp	r2, r0
   1ae52:	60e3      	str	r3, [r4, #12]
   1ae54:	da0e      	bge.n	1ae74 <d_template_param+0x54>
   1ae56:	6923      	ldr	r3, [r4, #16]
   1ae58:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1ae5c:	eb03 008c 	add.w	r0, r3, ip, lsl #2
   1ae60:	3201      	adds	r2, #1
   1ae62:	2500      	movs	r5, #0
   1ae64:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1ae68:	6162      	str	r2, [r4, #20]
   1ae6a:	2205      	movs	r2, #5
   1ae6c:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
   1ae70:	60c1      	str	r1, [r0, #12]
   1ae72:	bd38      	pop	{r3, r4, r5, pc}
   1ae74:	2000      	movs	r0, #0
   1ae76:	bd38      	pop	{r3, r4, r5, pc}
   1ae78:	3302      	adds	r3, #2
   1ae7a:	2100      	movs	r1, #0
   1ae7c:	e7e6      	b.n	1ae4c <d_template_param+0x2c>
   1ae7e:	bf00      	nop

0001ae80 <d_append_num>:
   1ae80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae84:	b088      	sub	sp, #32
   1ae86:	460a      	mov	r2, r1
   1ae88:	4604      	mov	r4, r0
   1ae8a:	491a      	ldr	r1, [pc, #104]	; (1aef4 <d_append_num+0x74>)
   1ae8c:	a801      	add	r0, sp, #4
   1ae8e:	f007 fc37 	bl	22700 <sprintf>
   1ae92:	a801      	add	r0, sp, #4
   1ae94:	f008 fc74 	bl	23780 <strlen>
   1ae98:	b340      	cbz	r0, 1aeec <d_append_num+0x6c>
   1ae9a:	ad01      	add	r5, sp, #4
   1ae9c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1aea0:	182f      	adds	r7, r5, r0
   1aea2:	f04f 0800 	mov.w	r8, #0
   1aea6:	e009      	b.n	1aebc <d_append_num+0x3c>
   1aea8:	460b      	mov	r3, r1
   1aeaa:	42bd      	cmp	r5, r7
   1aeac:	f101 0101 	add.w	r1, r1, #1
   1aeb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aeb4:	54e6      	strb	r6, [r4, r3]
   1aeb6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1aeba:	d017      	beq.n	1aeec <d_append_num+0x6c>
   1aebc:	29ff      	cmp	r1, #255	; 0xff
   1aebe:	f815 6b01 	ldrb.w	r6, [r5], #1
   1aec2:	d1f1      	bne.n	1aea8 <d_append_num+0x28>
   1aec4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1aec8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1aecc:	4620      	mov	r0, r4
   1aece:	4798      	blx	r3
   1aed0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1aed4:	2101      	movs	r1, #1
   1aed6:	440b      	add	r3, r1
   1aed8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1aedc:	2300      	movs	r3, #0
   1aede:	42bd      	cmp	r5, r7
   1aee0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1aee4:	54e6      	strb	r6, [r4, r3]
   1aee6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1aeea:	d1e7      	bne.n	1aebc <d_append_num+0x3c>
   1aeec:	b008      	add	sp, #32
   1aeee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1aef2:	bf00      	nop
   1aef4:	200033c0 	.word	0x200033c0

0001aef8 <d_source_name>:
   1aef8:	b570      	push	{r4, r5, r6, lr}
   1aefa:	4604      	mov	r4, r0
   1aefc:	f7ff fd5c 	bl	1a9b8 <d_number>
   1af00:	1e05      	subs	r5, r0, #0
   1af02:	dd46      	ble.n	1af92 <d_source_name+0x9a>
   1af04:	68e6      	ldr	r6, [r4, #12]
   1af06:	6863      	ldr	r3, [r4, #4]
   1af08:	1b9b      	subs	r3, r3, r6
   1af0a:	429d      	cmp	r5, r3
   1af0c:	dc3e      	bgt.n	1af8c <d_source_name+0x94>
   1af0e:	68a2      	ldr	r2, [r4, #8]
   1af10:	1973      	adds	r3, r6, r5
   1af12:	0752      	lsls	r2, r2, #29
   1af14:	60e3      	str	r3, [r4, #12]
   1af16:	d504      	bpl.n	1af22 <d_source_name+0x2a>
   1af18:	5d72      	ldrb	r2, [r6, r5]
   1af1a:	2a24      	cmp	r2, #36	; 0x24
   1af1c:	bf04      	itt	eq
   1af1e:	3301      	addeq	r3, #1
   1af20:	60e3      	streq	r3, [r4, #12]
   1af22:	2d09      	cmp	r5, #9
   1af24:	dd22      	ble.n	1af6c <d_source_name+0x74>
   1af26:	492a      	ldr	r1, [pc, #168]	; (1afd0 <d_source_name+0xd8>)
   1af28:	2208      	movs	r2, #8
   1af2a:	4630      	mov	r0, r6
   1af2c:	f007 ffe8 	bl	22f00 <memcmp>
   1af30:	b930      	cbnz	r0, 1af40 <d_source_name+0x48>
   1af32:	7a33      	ldrb	r3, [r6, #8]
   1af34:	2b2e      	cmp	r3, #46	; 0x2e
   1af36:	d02e      	beq.n	1af96 <d_source_name+0x9e>
   1af38:	2b5f      	cmp	r3, #95	; 0x5f
   1af3a:	d02c      	beq.n	1af96 <d_source_name+0x9e>
   1af3c:	2b24      	cmp	r3, #36	; 0x24
   1af3e:	d02a      	beq.n	1af96 <d_source_name+0x9e>
   1af40:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1af44:	4293      	cmp	r3, r2
   1af46:	da21      	bge.n	1af8c <d_source_name+0x94>
   1af48:	6920      	ldr	r0, [r4, #16]
   1af4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1af4e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1af52:	3301      	adds	r3, #1
   1af54:	2200      	movs	r2, #0
   1af56:	e9c0 2201 	strd	r2, r2, [r0, #4]
   1af5a:	6163      	str	r3, [r4, #20]
   1af5c:	2300      	movs	r3, #0
   1af5e:	7003      	strb	r3, [r0, #0]
   1af60:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1af64:	e9c0 6503 	strd	r6, r5, [r0, #12]
   1af68:	62a0      	str	r0, [r4, #40]	; 0x28
   1af6a:	bd70      	pop	{r4, r5, r6, pc}
   1af6c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1af70:	4293      	cmp	r3, r2
   1af72:	da0b      	bge.n	1af8c <d_source_name+0x94>
   1af74:	6920      	ldr	r0, [r4, #16]
   1af76:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1af7a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1af7e:	3301      	adds	r3, #1
   1af80:	2200      	movs	r2, #0
   1af82:	e9c0 2201 	strd	r2, r2, [r0, #4]
   1af86:	6163      	str	r3, [r4, #20]
   1af88:	2e00      	cmp	r6, #0
   1af8a:	d1e7      	bne.n	1af5c <d_source_name+0x64>
   1af8c:	2000      	movs	r0, #0
   1af8e:	62a0      	str	r0, [r4, #40]	; 0x28
   1af90:	bd70      	pop	{r4, r5, r6, pc}
   1af92:	2000      	movs	r0, #0
   1af94:	bd70      	pop	{r4, r5, r6, pc}
   1af96:	7a73      	ldrb	r3, [r6, #9]
   1af98:	2b4e      	cmp	r3, #78	; 0x4e
   1af9a:	d1d1      	bne.n	1af40 <d_source_name+0x48>
   1af9c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1af9e:	6963      	ldr	r3, [r4, #20]
   1afa0:	69a1      	ldr	r1, [r4, #24]
   1afa2:	3216      	adds	r2, #22
   1afa4:	1b52      	subs	r2, r2, r5
   1afa6:	428b      	cmp	r3, r1
   1afa8:	62e2      	str	r2, [r4, #44]	; 0x2c
   1afaa:	daef      	bge.n	1af8c <d_source_name+0x94>
   1afac:	6922      	ldr	r2, [r4, #16]
   1afae:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1afb2:	0081      	lsls	r1, r0, #2
   1afb4:	3301      	adds	r3, #1
   1afb6:	6163      	str	r3, [r4, #20]
   1afb8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1afbc:	2300      	movs	r3, #0
   1afbe:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1afc2:	5453      	strb	r3, [r2, r1]
   1afc4:	4a03      	ldr	r2, [pc, #12]	; (1afd4 <d_source_name+0xdc>)
   1afc6:	2315      	movs	r3, #21
   1afc8:	e9c0 2303 	strd	r2, r3, [r0, #12]
   1afcc:	e7df      	b.n	1af8e <d_source_name+0x96>
   1afce:	bf00      	nop
   1afd0:	20003700 	.word	0x20003700
   1afd4:	2000370c 	.word	0x2000370c

0001afd8 <d_substitution>:
   1afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1afdc:	68c3      	ldr	r3, [r0, #12]
   1afde:	781a      	ldrb	r2, [r3, #0]
   1afe0:	2a53      	cmp	r2, #83	; 0x53
   1afe2:	d131      	bne.n	1b048 <d_substitution+0x70>
   1afe4:	1c5a      	adds	r2, r3, #1
   1afe6:	60c2      	str	r2, [r0, #12]
   1afe8:	785a      	ldrb	r2, [r3, #1]
   1afea:	4604      	mov	r4, r0
   1afec:	b3a2      	cbz	r2, 1b058 <d_substitution+0x80>
   1afee:	1c9a      	adds	r2, r3, #2
   1aff0:	60c2      	str	r2, [r0, #12]
   1aff2:	785a      	ldrb	r2, [r3, #1]
   1aff4:	2a5f      	cmp	r2, #95	; 0x5f
   1aff6:	d044      	beq.n	1b082 <d_substitution+0xaa>
   1aff8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1affc:	b2d8      	uxtb	r0, r3
   1affe:	2809      	cmp	r0, #9
   1b000:	d826      	bhi.n	1b050 <d_substitution+0x78>
   1b002:	2100      	movs	r1, #0
   1b004:	e00d      	b.n	1b022 <d_substitution+0x4a>
   1b006:	3b30      	subs	r3, #48	; 0x30
   1b008:	4299      	cmp	r1, r3
   1b00a:	d81d      	bhi.n	1b048 <d_substitution+0x70>
   1b00c:	68e0      	ldr	r0, [r4, #12]
   1b00e:	7802      	ldrb	r2, [r0, #0]
   1b010:	4619      	mov	r1, r3
   1b012:	1c45      	adds	r5, r0, #1
   1b014:	b11a      	cbz	r2, 1b01e <d_substitution+0x46>
   1b016:	60e5      	str	r5, [r4, #12]
   1b018:	7802      	ldrb	r2, [r0, #0]
   1b01a:	2a5f      	cmp	r2, #95	; 0x5f
   1b01c:	d03b      	beq.n	1b096 <d_substitution+0xbe>
   1b01e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1b022:	b2d8      	uxtb	r0, r3
   1b024:	2809      	cmp	r0, #9
   1b026:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1b02a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
   1b02e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b032:	d9e8      	bls.n	1b006 <d_substitution+0x2e>
   1b034:	f1bc 0f19 	cmp.w	ip, #25
   1b038:	d806      	bhi.n	1b048 <d_substitution+0x70>
   1b03a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1b03e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1b042:	3b37      	subs	r3, #55	; 0x37
   1b044:	4299      	cmp	r1, r3
   1b046:	d9e1      	bls.n	1b00c <d_substitution+0x34>
   1b048:	2500      	movs	r5, #0
   1b04a:	4628      	mov	r0, r5
   1b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b050:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   1b054:	2819      	cmp	r0, #25
   1b056:	d9d4      	bls.n	1b002 <d_substitution+0x2a>
   1b058:	68a3      	ldr	r3, [r4, #8]
   1b05a:	f003 0308 	and.w	r3, r3, #8
   1b05e:	2b00      	cmp	r3, #0
   1b060:	bf14      	ite	ne
   1b062:	2501      	movne	r5, #1
   1b064:	2500      	moveq	r5, #0
   1b066:	d100      	bne.n	1b06a <d_substitution+0x92>
   1b068:	b9b9      	cbnz	r1, 1b09a <d_substitution+0xc2>
   1b06a:	4b3f      	ldr	r3, [pc, #252]	; (1b168 <d_substitution+0x190>)
   1b06c:	2174      	movs	r1, #116	; 0x74
   1b06e:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
   1b072:	e001      	b.n	1b078 <d_substitution+0xa0>
   1b074:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
   1b078:	4291      	cmp	r1, r2
   1b07a:	d015      	beq.n	1b0a8 <d_substitution+0xd0>
   1b07c:	4283      	cmp	r3, r0
   1b07e:	d1f9      	bne.n	1b074 <d_substitution+0x9c>
   1b080:	e7e2      	b.n	1b048 <d_substitution+0x70>
   1b082:	2300      	movs	r3, #0
   1b084:	6a22      	ldr	r2, [r4, #32]
   1b086:	429a      	cmp	r2, r3
   1b088:	d9de      	bls.n	1b048 <d_substitution+0x70>
   1b08a:	69e2      	ldr	r2, [r4, #28]
   1b08c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1b090:	4628      	mov	r0, r5
   1b092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b096:	3301      	adds	r3, #1
   1b098:	e7f4      	b.n	1b084 <d_substitution+0xac>
   1b09a:	68e3      	ldr	r3, [r4, #12]
   1b09c:	781b      	ldrb	r3, [r3, #0]
   1b09e:	3b43      	subs	r3, #67	; 0x43
   1b0a0:	2b01      	cmp	r3, #1
   1b0a2:	bf98      	it	ls
   1b0a4:	460d      	movls	r5, r1
   1b0a6:	e7e0      	b.n	1b06a <d_substitution+0x92>
   1b0a8:	695e      	ldr	r6, [r3, #20]
   1b0aa:	2e00      	cmp	r6, #0
   1b0ac:	d054      	beq.n	1b158 <d_substitution+0x180>
   1b0ae:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1b0b2:	4282      	cmp	r2, r0
   1b0b4:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1b0b8:	da53      	bge.n	1b162 <d_substitution+0x18a>
   1b0ba:	6927      	ldr	r7, [r4, #16]
   1b0bc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1b0c0:	eb07 018c 	add.w	r1, r7, ip, lsl #2
   1b0c4:	f04f 0e00 	mov.w	lr, #0
   1b0c8:	e9c1 ee01 	strd	lr, lr, [r1, #4]
   1b0cc:	3201      	adds	r2, #1
   1b0ce:	f04f 0e18 	mov.w	lr, #24
   1b0d2:	6162      	str	r2, [r4, #20]
   1b0d4:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
   1b0d8:	e9c1 6803 	strd	r6, r8, [r1, #12]
   1b0dc:	62a1      	str	r1, [r4, #40]	; 0x28
   1b0de:	2d00      	cmp	r5, #0
   1b0e0:	d037      	beq.n	1b152 <d_substitution+0x17a>
   1b0e2:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
   1b0e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b0e8:	4282      	cmp	r2, r0
   1b0ea:	440b      	add	r3, r1
   1b0ec:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b0ee:	da36      	bge.n	1b15e <d_substitution+0x186>
   1b0f0:	6923      	ldr	r3, [r4, #16]
   1b0f2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1b0f6:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   1b0fa:	3201      	adds	r2, #1
   1b0fc:	2600      	movs	r6, #0
   1b0fe:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b102:	6162      	str	r2, [r4, #20]
   1b104:	2218      	movs	r2, #24
   1b106:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
   1b10a:	e9c5 7103 	strd	r7, r1, [r5, #12]
   1b10e:	68e3      	ldr	r3, [r4, #12]
   1b110:	781a      	ldrb	r2, [r3, #0]
   1b112:	2a42      	cmp	r2, #66	; 0x42
   1b114:	d199      	bne.n	1b04a <d_substitution+0x72>
   1b116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b118:	3301      	adds	r3, #1
   1b11a:	60e3      	str	r3, [r4, #12]
   1b11c:	4620      	mov	r0, r4
   1b11e:	f7ff feeb 	bl	1aef8 <d_source_name>
   1b122:	462a      	mov	r2, r5
   1b124:	4603      	mov	r3, r0
   1b126:	214d      	movs	r1, #77	; 0x4d
   1b128:	4620      	mov	r0, r4
   1b12a:	f7ff fbcd 	bl	1a8c8 <d_make_comp>
   1b12e:	68e3      	ldr	r3, [r4, #12]
   1b130:	781a      	ldrb	r2, [r3, #0]
   1b132:	2a42      	cmp	r2, #66	; 0x42
   1b134:	4605      	mov	r5, r0
   1b136:	d0ef      	beq.n	1b118 <d_substitution+0x140>
   1b138:	62a6      	str	r6, [r4, #40]	; 0x28
   1b13a:	2800      	cmp	r0, #0
   1b13c:	d084      	beq.n	1b048 <d_substitution+0x70>
   1b13e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1b142:	4293      	cmp	r3, r2
   1b144:	da80      	bge.n	1b048 <d_substitution+0x70>
   1b146:	69e1      	ldr	r1, [r4, #28]
   1b148:	1c5a      	adds	r2, r3, #1
   1b14a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1b14e:	6222      	str	r2, [r4, #32]
   1b150:	e77b      	b.n	1b04a <d_substitution+0x72>
   1b152:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
   1b156:	e7c6      	b.n	1b0e6 <d_substitution+0x10e>
   1b158:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1b15c:	e7bf      	b.n	1b0de <d_substitution+0x106>
   1b15e:	2500      	movs	r5, #0
   1b160:	e7d5      	b.n	1b10e <d_substitution+0x136>
   1b162:	2100      	movs	r1, #0
   1b164:	e7ba      	b.n	1b0dc <d_substitution+0x104>
   1b166:	bf00      	nop
   1b168:	20003b94 	.word	0x20003b94

0001b16c <d_type>:
   1b16c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b170:	68c2      	ldr	r2, [r0, #12]
   1b172:	b083      	sub	sp, #12
   1b174:	4604      	mov	r4, r0
   1b176:	4610      	mov	r0, r2
   1b178:	f7ff fd7e 	bl	1ac78 <next_is_type_qual.isra.0>
   1b17c:	2800      	cmp	r0, #0
   1b17e:	d166      	bne.n	1b24e <d_type+0xe2>
   1b180:	7813      	ldrb	r3, [r2, #0]
   1b182:	2b5a      	cmp	r3, #90	; 0x5a
   1b184:	d831      	bhi.n	1b1ea <d_type+0x7e>
   1b186:	2b2f      	cmp	r3, #47	; 0x2f
   1b188:	d95c      	bls.n	1b244 <d_type+0xd8>
   1b18a:	3b30      	subs	r3, #48	; 0x30
   1b18c:	2b2a      	cmp	r3, #42	; 0x2a
   1b18e:	d859      	bhi.n	1b244 <d_type+0xd8>
   1b190:	e8df f013 	tbh	[pc, r3, lsl #1]
   1b194:	008c008c 	.word	0x008c008c
   1b198:	008c008c 	.word	0x008c008c
   1b19c:	008c008c 	.word	0x008c008c
   1b1a0:	008c008c 	.word	0x008c008c
   1b1a4:	008c008c 	.word	0x008c008c
   1b1a8:	00580058 	.word	0x00580058
   1b1ac:	00580058 	.word	0x00580058
   1b1b0:	00580058 	.word	0x00580058
   1b1b4:	01d60058 	.word	0x01d60058
   1b1b8:	00d90058 	.word	0x00d90058
   1b1bc:	005800ed 	.word	0x005800ed
   1b1c0:	016000e7 	.word	0x016000e7
   1b1c4:	00580058 	.word	0x00580058
   1b1c8:	00580058 	.word	0x00580058
   1b1cc:	02180058 	.word	0x02180058
   1b1d0:	00cb008c 	.word	0x00cb008c
   1b1d4:	005800bd 	.word	0x005800bd
   1b1d8:	019500af 	.word	0x019500af
   1b1dc:	01be016e 	.word	0x01be016e
   1b1e0:	00580058 	.word	0x00580058
   1b1e4:	00580058 	.word	0x00580058
   1b1e8:	008c      	.short	0x008c
   1b1ea:	3b61      	subs	r3, #97	; 0x61
   1b1ec:	fa5f fc83 	uxtb.w	ip, r3
   1b1f0:	f1bc 0f19 	cmp.w	ip, #25
   1b1f4:	d826      	bhi.n	1b244 <d_type+0xd8>
   1b1f6:	4dc4      	ldr	r5, [pc, #784]	; (1b508 <d_type+0x39c>)
   1b1f8:	2101      	movs	r1, #1
   1b1fa:	fa01 f10c 	lsl.w	r1, r1, ip
   1b1fe:	400d      	ands	r5, r1
   1b200:	b1ed      	cbz	r5, 1b23e <d_type+0xd2>
   1b202:	49c2      	ldr	r1, [pc, #776]	; (1b50c <d_type+0x3a0>)
   1b204:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b208:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1b20c:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
   1b210:	42ab      	cmp	r3, r5
   1b212:	f280 83c5 	bge.w	1b9a0 <d_type+0x834>
   1b216:	6926      	ldr	r6, [r4, #16]
   1b218:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1b21c:	eb06 058c 	add.w	r5, r6, ip, lsl #2
   1b220:	3301      	adds	r3, #1
   1b222:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b226:	6163      	str	r3, [r4, #20]
   1b228:	2327      	movs	r3, #39	; 0x27
   1b22a:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
   1b22e:	60e9      	str	r1, [r5, #12]
   1b230:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b232:	6849      	ldr	r1, [r1, #4]
   1b234:	3201      	adds	r2, #1
   1b236:	440b      	add	r3, r1
   1b238:	60e2      	str	r2, [r4, #12]
   1b23a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b23c:	e003      	b.n	1b246 <d_type+0xda>
   1b23e:	f1bc 0f14 	cmp.w	ip, #20
   1b242:	d048      	beq.n	1b2d6 <d_type+0x16a>
   1b244:	2500      	movs	r5, #0
   1b246:	4628      	mov	r0, r5
   1b248:	b003      	add	sp, #12
   1b24a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b24e:	2200      	movs	r2, #0
   1b250:	a901      	add	r1, sp, #4
   1b252:	4620      	mov	r0, r4
   1b254:	f001 fab4 	bl	1c7c0 <d_cv_qualifiers>
   1b258:	4605      	mov	r5, r0
   1b25a:	2800      	cmp	r0, #0
   1b25c:	d0f2      	beq.n	1b244 <d_type+0xd8>
   1b25e:	68e3      	ldr	r3, [r4, #12]
   1b260:	781b      	ldrb	r3, [r3, #0]
   1b262:	2b46      	cmp	r3, #70	; 0x46
   1b264:	4620      	mov	r0, r4
   1b266:	d01e      	beq.n	1b2a6 <d_type+0x13a>
   1b268:	f7ff ff80 	bl	1b16c <d_type>
   1b26c:	6028      	str	r0, [r5, #0]
   1b26e:	2800      	cmp	r0, #0
   1b270:	d0e8      	beq.n	1b244 <d_type+0xd8>
   1b272:	7803      	ldrb	r3, [r0, #0]
   1b274:	3b1f      	subs	r3, #31
   1b276:	2b01      	cmp	r3, #1
   1b278:	d805      	bhi.n	1b286 <d_type+0x11a>
   1b27a:	9a01      	ldr	r2, [sp, #4]
   1b27c:	68c3      	ldr	r3, [r0, #12]
   1b27e:	60c2      	str	r2, [r0, #12]
   1b280:	682a      	ldr	r2, [r5, #0]
   1b282:	9201      	str	r2, [sp, #4]
   1b284:	602b      	str	r3, [r5, #0]
   1b286:	9d01      	ldr	r5, [sp, #4]
   1b288:	2d00      	cmp	r5, #0
   1b28a:	d0db      	beq.n	1b244 <d_type+0xd8>
   1b28c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1b290:	4293      	cmp	r3, r2
   1b292:	dad7      	bge.n	1b244 <d_type+0xd8>
   1b294:	69e1      	ldr	r1, [r4, #28]
   1b296:	1c5a      	adds	r2, r3, #1
   1b298:	4628      	mov	r0, r5
   1b29a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1b29e:	6222      	str	r2, [r4, #32]
   1b2a0:	b003      	add	sp, #12
   1b2a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b2a6:	f000 fbfd 	bl	1baa4 <d_function_type>
   1b2aa:	e7df      	b.n	1b26c <d_type+0x100>
   1b2ac:	4620      	mov	r0, r4
   1b2ae:	f001 fd6b 	bl	1cd88 <d_name>
   1b2b2:	4605      	mov	r5, r0
   1b2b4:	9001      	str	r0, [sp, #4]
   1b2b6:	2d00      	cmp	r5, #0
   1b2b8:	d0c4      	beq.n	1b244 <d_type+0xd8>
   1b2ba:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1b2be:	4293      	cmp	r3, r2
   1b2c0:	dac0      	bge.n	1b244 <d_type+0xd8>
   1b2c2:	69e1      	ldr	r1, [r4, #28]
   1b2c4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1b2c8:	9d01      	ldr	r5, [sp, #4]
   1b2ca:	1c5a      	adds	r2, r3, #1
   1b2cc:	4628      	mov	r0, r5
   1b2ce:	6222      	str	r2, [r4, #32]
   1b2d0:	b003      	add	sp, #12
   1b2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1b2d6:	3201      	adds	r2, #1
   1b2d8:	60e2      	str	r2, [r4, #12]
   1b2da:	4620      	mov	r0, r4
   1b2dc:	f7ff fe0c 	bl	1aef8 <d_source_name>
   1b2e0:	462b      	mov	r3, r5
   1b2e2:	4602      	mov	r2, r0
   1b2e4:	2128      	movs	r1, #40	; 0x28
   1b2e6:	4620      	mov	r0, r4
   1b2e8:	f7ff faee 	bl	1a8c8 <d_make_comp>
   1b2ec:	4605      	mov	r5, r0
   1b2ee:	9001      	str	r0, [sp, #4]
   1b2f0:	e7e1      	b.n	1b2b6 <d_type+0x14a>
   1b2f2:	3201      	adds	r2, #1
   1b2f4:	60e2      	str	r2, [r4, #12]
   1b2f6:	4620      	mov	r0, r4
   1b2f8:	f7ff ff38 	bl	1b16c <d_type>
   1b2fc:	2300      	movs	r3, #0
   1b2fe:	4602      	mov	r2, r0
   1b300:	2123      	movs	r1, #35	; 0x23
   1b302:	4620      	mov	r0, r4
   1b304:	f7ff fae0 	bl	1a8c8 <d_make_comp>
   1b308:	4605      	mov	r5, r0
   1b30a:	9001      	str	r0, [sp, #4]
   1b30c:	e7d3      	b.n	1b2b6 <d_type+0x14a>
   1b30e:	3201      	adds	r2, #1
   1b310:	60e2      	str	r2, [r4, #12]
   1b312:	4620      	mov	r0, r4
   1b314:	f7ff ff2a 	bl	1b16c <d_type>
   1b318:	2300      	movs	r3, #0
   1b31a:	4602      	mov	r2, r0
   1b31c:	2122      	movs	r1, #34	; 0x22
   1b31e:	4620      	mov	r0, r4
   1b320:	f7ff fad2 	bl	1a8c8 <d_make_comp>
   1b324:	4605      	mov	r5, r0
   1b326:	9001      	str	r0, [sp, #4]
   1b328:	e7c5      	b.n	1b2b6 <d_type+0x14a>
   1b32a:	3201      	adds	r2, #1
   1b32c:	60e2      	str	r2, [r4, #12]
   1b32e:	4620      	mov	r0, r4
   1b330:	f7ff ff1c 	bl	1b16c <d_type>
   1b334:	2300      	movs	r3, #0
   1b336:	4602      	mov	r2, r0
   1b338:	2124      	movs	r1, #36	; 0x24
   1b33a:	4620      	mov	r0, r4
   1b33c:	f7ff fac4 	bl	1a8c8 <d_make_comp>
   1b340:	4605      	mov	r5, r0
   1b342:	9001      	str	r0, [sp, #4]
   1b344:	e7b7      	b.n	1b2b6 <d_type+0x14a>
   1b346:	3201      	adds	r2, #1
   1b348:	60e2      	str	r2, [r4, #12]
   1b34a:	4620      	mov	r0, r4
   1b34c:	f7ff ff0e 	bl	1b16c <d_type>
   1b350:	2300      	movs	r3, #0
   1b352:	4602      	mov	r2, r0
   1b354:	2125      	movs	r1, #37	; 0x25
   1b356:	4620      	mov	r0, r4
   1b358:	f7ff fab6 	bl	1a8c8 <d_make_comp>
   1b35c:	4605      	mov	r5, r0
   1b35e:	9001      	str	r0, [sp, #4]
   1b360:	e7a9      	b.n	1b2b6 <d_type+0x14a>
   1b362:	4620      	mov	r0, r4
   1b364:	f000 fb9e 	bl	1baa4 <d_function_type>
   1b368:	4605      	mov	r5, r0
   1b36a:	9001      	str	r0, [sp, #4]
   1b36c:	e7a3      	b.n	1b2b6 <d_type+0x14a>
   1b36e:	1c53      	adds	r3, r2, #1
   1b370:	60e3      	str	r3, [r4, #12]
   1b372:	7853      	ldrb	r3, [r2, #1]
   1b374:	2b00      	cmp	r3, #0
   1b376:	f43f af65 	beq.w	1b244 <d_type+0xd8>
   1b37a:	1c93      	adds	r3, r2, #2
   1b37c:	60e3      	str	r3, [r4, #12]
   1b37e:	7853      	ldrb	r3, [r2, #1]
   1b380:	3b46      	subs	r3, #70	; 0x46
   1b382:	2b30      	cmp	r3, #48	; 0x30
   1b384:	f63f af5e 	bhi.w	1b244 <d_type+0xd8>
   1b388:	a101      	add	r1, pc, #4	; (adr r1, 1b390 <d_type+0x224>)
   1b38a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1b38e:	bf00      	nop
   1b390:	0001b631 	.word	0x0001b631
   1b394:	0001b245 	.word	0x0001b245
   1b398:	0001b245 	.word	0x0001b245
   1b39c:	0001b245 	.word	0x0001b245
   1b3a0:	0001b245 	.word	0x0001b245
   1b3a4:	0001b245 	.word	0x0001b245
   1b3a8:	0001b245 	.word	0x0001b245
   1b3ac:	0001b245 	.word	0x0001b245
   1b3b0:	0001b245 	.word	0x0001b245
   1b3b4:	0001b245 	.word	0x0001b245
   1b3b8:	0001b245 	.word	0x0001b245
   1b3bc:	0001b245 	.word	0x0001b245
   1b3c0:	0001b245 	.word	0x0001b245
   1b3c4:	0001b245 	.word	0x0001b245
   1b3c8:	0001b5f5 	.word	0x0001b5f5
   1b3cc:	0001b245 	.word	0x0001b245
   1b3d0:	0001b245 	.word	0x0001b245
   1b3d4:	0001b245 	.word	0x0001b245
   1b3d8:	0001b245 	.word	0x0001b245
   1b3dc:	0001b245 	.word	0x0001b245
   1b3e0:	0001b245 	.word	0x0001b245
   1b3e4:	0001b245 	.word	0x0001b245
   1b3e8:	0001b245 	.word	0x0001b245
   1b3ec:	0001b245 	.word	0x0001b245
   1b3f0:	0001b245 	.word	0x0001b245
   1b3f4:	0001b245 	.word	0x0001b245
   1b3f8:	0001b245 	.word	0x0001b245
   1b3fc:	0001b6c9 	.word	0x0001b6c9
   1b400:	0001b245 	.word	0x0001b245
   1b404:	0001b69d 	.word	0x0001b69d
   1b408:	0001b8b7 	.word	0x0001b8b7
   1b40c:	0001b887 	.word	0x0001b887
   1b410:	0001b725 	.word	0x0001b725
   1b414:	0001b245 	.word	0x0001b245
   1b418:	0001b6f5 	.word	0x0001b6f5
   1b41c:	0001b857 	.word	0x0001b857
   1b420:	0001b245 	.word	0x0001b245
   1b424:	0001b245 	.word	0x0001b245
   1b428:	0001b245 	.word	0x0001b245
   1b42c:	0001b245 	.word	0x0001b245
   1b430:	0001b827 	.word	0x0001b827
   1b434:	0001b245 	.word	0x0001b245
   1b438:	0001b80f 	.word	0x0001b80f
   1b43c:	0001b245 	.word	0x0001b245
   1b440:	0001b245 	.word	0x0001b245
   1b444:	0001b7df 	.word	0x0001b7df
   1b448:	0001b5f5 	.word	0x0001b5f5
   1b44c:	0001b7af 	.word	0x0001b7af
   1b450:	0001b755 	.word	0x0001b755
   1b454:	3201      	adds	r2, #1
   1b456:	60e2      	str	r2, [r4, #12]
   1b458:	4620      	mov	r0, r4
   1b45a:	f7ff fe87 	bl	1b16c <d_type>
   1b45e:	2300      	movs	r3, #0
   1b460:	4602      	mov	r2, r0
   1b462:	2126      	movs	r1, #38	; 0x26
   1b464:	4620      	mov	r0, r4
   1b466:	f7ff fa2f 	bl	1a8c8 <d_make_comp>
   1b46a:	4605      	mov	r5, r0
   1b46c:	9001      	str	r0, [sp, #4]
   1b46e:	e722      	b.n	1b2b6 <d_type+0x14a>
   1b470:	4620      	mov	r0, r4
   1b472:	f7ff fcd5 	bl	1ae20 <d_template_param>
   1b476:	68e6      	ldr	r6, [r4, #12]
   1b478:	9001      	str	r0, [sp, #4]
   1b47a:	7833      	ldrb	r3, [r6, #0]
   1b47c:	2b49      	cmp	r3, #73	; 0x49
   1b47e:	4605      	mov	r5, r0
   1b480:	f47f af19 	bne.w	1b2b6 <d_type+0x14a>
   1b484:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1b486:	2b00      	cmp	r3, #0
   1b488:	f040 8257 	bne.w	1b93a <d_type+0x7ce>
   1b48c:	2800      	cmp	r0, #0
   1b48e:	f43f aed9 	beq.w	1b244 <d_type+0xd8>
   1b492:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1b496:	428a      	cmp	r2, r1
   1b498:	f6bf aed4 	bge.w	1b244 <d_type+0xd8>
   1b49c:	69e1      	ldr	r1, [r4, #28]
   1b49e:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1b4a2:	3201      	adds	r2, #1
   1b4a4:	6222      	str	r2, [r4, #32]
   1b4a6:	7832      	ldrb	r2, [r6, #0]
   1b4a8:	3a49      	subs	r2, #73	; 0x49
   1b4aa:	2a01      	cmp	r2, #1
   1b4ac:	d805      	bhi.n	1b4ba <d_type+0x34e>
   1b4ae:	3601      	adds	r6, #1
   1b4b0:	60e6      	str	r6, [r4, #12]
   1b4b2:	4620      	mov	r0, r4
   1b4b4:	f000 fe0c 	bl	1c0d0 <d_template_args_1>
   1b4b8:	4603      	mov	r3, r0
   1b4ba:	462a      	mov	r2, r5
   1b4bc:	e01c      	b.n	1b4f8 <d_type+0x38c>
   1b4be:	7853      	ldrb	r3, [r2, #1]
   1b4c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1b4c4:	2a09      	cmp	r2, #9
   1b4c6:	d905      	bls.n	1b4d4 <d_type+0x368>
   1b4c8:	2b5f      	cmp	r3, #95	; 0x5f
   1b4ca:	d003      	beq.n	1b4d4 <d_type+0x368>
   1b4cc:	3b41      	subs	r3, #65	; 0x41
   1b4ce:	2b19      	cmp	r3, #25
   1b4d0:	f200 8226 	bhi.w	1b920 <d_type+0x7b4>
   1b4d4:	2100      	movs	r1, #0
   1b4d6:	4620      	mov	r0, r4
   1b4d8:	f7ff fd7e 	bl	1afd8 <d_substitution>
   1b4dc:	68e3      	ldr	r3, [r4, #12]
   1b4de:	9001      	str	r0, [sp, #4]
   1b4e0:	781a      	ldrb	r2, [r3, #0]
   1b4e2:	2a49      	cmp	r2, #73	; 0x49
   1b4e4:	4605      	mov	r5, r0
   1b4e6:	f47f aeae 	bne.w	1b246 <d_type+0xda>
   1b4ea:	3301      	adds	r3, #1
   1b4ec:	60e3      	str	r3, [r4, #12]
   1b4ee:	4620      	mov	r0, r4
   1b4f0:	f000 fdee 	bl	1c0d0 <d_template_args_1>
   1b4f4:	462a      	mov	r2, r5
   1b4f6:	4603      	mov	r3, r0
   1b4f8:	2104      	movs	r1, #4
   1b4fa:	4620      	mov	r0, r4
   1b4fc:	f7ff f9e4 	bl	1a8c8 <d_make_comp>
   1b500:	4605      	mov	r5, r0
   1b502:	9001      	str	r0, [sp, #4]
   1b504:	e6d7      	b.n	1b2b6 <d_type+0x14a>
   1b506:	bf00      	nop
   1b508:	03ec7bff 	.word	0x03ec7bff
   1b50c:	20002c88 	.word	0x20002c88
   1b510:	3201      	adds	r2, #1
   1b512:	60e2      	str	r2, [r4, #12]
   1b514:	4620      	mov	r0, r4
   1b516:	f7ff fcef 	bl	1aef8 <d_source_name>
   1b51a:	68e3      	ldr	r3, [r4, #12]
   1b51c:	9001      	str	r0, [sp, #4]
   1b51e:	781a      	ldrb	r2, [r3, #0]
   1b520:	2a49      	cmp	r2, #73	; 0x49
   1b522:	4605      	mov	r5, r0
   1b524:	f000 81e1 	beq.w	1b8ea <d_type+0x77e>
   1b528:	4620      	mov	r0, r4
   1b52a:	f7ff fe1f 	bl	1b16c <d_type>
   1b52e:	462b      	mov	r3, r5
   1b530:	4602      	mov	r2, r0
   1b532:	2121      	movs	r1, #33	; 0x21
   1b534:	4620      	mov	r0, r4
   1b536:	f7ff f9c7 	bl	1a8c8 <d_make_comp>
   1b53a:	4605      	mov	r5, r0
   1b53c:	9001      	str	r0, [sp, #4]
   1b53e:	e6ba      	b.n	1b2b6 <d_type+0x14a>
   1b540:	1c55      	adds	r5, r2, #1
   1b542:	60e5      	str	r5, [r4, #12]
   1b544:	7853      	ldrb	r3, [r2, #1]
   1b546:	2b5f      	cmp	r3, #95	; 0x5f
   1b548:	f000 81cd 	beq.w	1b8e6 <d_type+0x77a>
   1b54c:	3b30      	subs	r3, #48	; 0x30
   1b54e:	2b09      	cmp	r3, #9
   1b550:	f200 81d8 	bhi.w	1b904 <d_type+0x798>
   1b554:	462b      	mov	r3, r5
   1b556:	469c      	mov	ip, r3
   1b558:	3301      	adds	r3, #1
   1b55a:	60e3      	str	r3, [r4, #12]
   1b55c:	7819      	ldrb	r1, [r3, #0]
   1b55e:	3930      	subs	r1, #48	; 0x30
   1b560:	2909      	cmp	r1, #9
   1b562:	d9f8      	bls.n	1b556 <d_type+0x3ea>
   1b564:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
   1b568:	4281      	cmp	r1, r0
   1b56a:	ebac 0202 	sub.w	r2, ip, r2
   1b56e:	f6bf ae69 	bge.w	1b244 <d_type+0xd8>
   1b572:	6927      	ldr	r7, [r4, #16]
   1b574:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   1b578:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   1b57c:	ea4f 0e80 	mov.w	lr, r0, lsl #2
   1b580:	2000      	movs	r0, #0
   1b582:	3101      	adds	r1, #1
   1b584:	4282      	cmp	r2, r0
   1b586:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1b58a:	6161      	str	r1, [r4, #20]
   1b58c:	f77f ae5a 	ble.w	1b244 <d_type+0xd8>
   1b590:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1b594:	f807 000e 	strb.w	r0, [r7, lr]
   1b598:	e9c6 5203 	strd	r5, r2, [r6, #12]
   1b59c:	f89c 2001 	ldrb.w	r2, [ip, #1]
   1b5a0:	461d      	mov	r5, r3
   1b5a2:	2a5f      	cmp	r2, #95	; 0x5f
   1b5a4:	f47f ae4e 	bne.w	1b244 <d_type+0xd8>
   1b5a8:	3501      	adds	r5, #1
   1b5aa:	60e5      	str	r5, [r4, #12]
   1b5ac:	4620      	mov	r0, r4
   1b5ae:	f7ff fddd 	bl	1b16c <d_type>
   1b5b2:	4632      	mov	r2, r6
   1b5b4:	4603      	mov	r3, r0
   1b5b6:	212a      	movs	r1, #42	; 0x2a
   1b5b8:	4620      	mov	r0, r4
   1b5ba:	f7ff f985 	bl	1a8c8 <d_make_comp>
   1b5be:	4605      	mov	r5, r0
   1b5c0:	9001      	str	r0, [sp, #4]
   1b5c2:	e678      	b.n	1b2b6 <d_type+0x14a>
   1b5c4:	3201      	adds	r2, #1
   1b5c6:	60e2      	str	r2, [r4, #12]
   1b5c8:	4620      	mov	r0, r4
   1b5ca:	f7ff fdcf 	bl	1b16c <d_type>
   1b5ce:	4605      	mov	r5, r0
   1b5d0:	2800      	cmp	r0, #0
   1b5d2:	f43f ae37 	beq.w	1b244 <d_type+0xd8>
   1b5d6:	4620      	mov	r0, r4
   1b5d8:	f7ff fdc8 	bl	1b16c <d_type>
   1b5dc:	4603      	mov	r3, r0
   1b5de:	2800      	cmp	r0, #0
   1b5e0:	f43f ae30 	beq.w	1b244 <d_type+0xd8>
   1b5e4:	462a      	mov	r2, r5
   1b5e6:	212b      	movs	r1, #43	; 0x2b
   1b5e8:	4620      	mov	r0, r4
   1b5ea:	f7ff f96d 	bl	1a8c8 <d_make_comp>
   1b5ee:	4605      	mov	r5, r0
   1b5f0:	9001      	str	r0, [sp, #4]
   1b5f2:	e660      	b.n	1b2b6 <d_type+0x14a>
   1b5f4:	2301      	movs	r3, #1
   1b5f6:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b5f8:	6323      	str	r3, [r4, #48]	; 0x30
   1b5fa:	4620      	mov	r0, r4
   1b5fc:	f000 fe30 	bl	1c260 <d_expression_1>
   1b600:	6325      	str	r5, [r4, #48]	; 0x30
   1b602:	4602      	mov	r2, r0
   1b604:	2300      	movs	r3, #0
   1b606:	2144      	movs	r1, #68	; 0x44
   1b608:	4620      	mov	r0, r4
   1b60a:	f7ff f95d 	bl	1a8c8 <d_make_comp>
   1b60e:	4605      	mov	r5, r0
   1b610:	9001      	str	r0, [sp, #4]
   1b612:	2800      	cmp	r0, #0
   1b614:	f43f ae16 	beq.w	1b244 <d_type+0xd8>
   1b618:	68e3      	ldr	r3, [r4, #12]
   1b61a:	781a      	ldrb	r2, [r3, #0]
   1b61c:	2a00      	cmp	r2, #0
   1b61e:	f43f ae11 	beq.w	1b244 <d_type+0xd8>
   1b622:	1c5a      	adds	r2, r3, #1
   1b624:	60e2      	str	r2, [r4, #12]
   1b626:	781b      	ldrb	r3, [r3, #0]
   1b628:	2b45      	cmp	r3, #69	; 0x45
   1b62a:	f47f ae0b 	bne.w	1b244 <d_type+0xd8>
   1b62e:	e644      	b.n	1b2ba <d_type+0x14e>
   1b630:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   1b634:	428b      	cmp	r3, r1
   1b636:	f280 81b5 	bge.w	1b9a4 <d_type+0x838>
   1b63a:	6921      	ldr	r1, [r4, #16]
   1b63c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1b640:	eb01 0580 	add.w	r5, r1, r0, lsl #2
   1b644:	3301      	adds	r3, #1
   1b646:	2600      	movs	r6, #0
   1b648:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b64c:	6163      	str	r3, [r4, #20]
   1b64e:	232c      	movs	r3, #44	; 0x2c
   1b650:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
   1b654:	7893      	ldrb	r3, [r2, #2]
   1b656:	9501      	str	r5, [sp, #4]
   1b658:	3b30      	subs	r3, #48	; 0x30
   1b65a:	b2db      	uxtb	r3, r3
   1b65c:	2b09      	cmp	r3, #9
   1b65e:	bf94      	ite	ls
   1b660:	2301      	movls	r3, #1
   1b662:	4633      	movhi	r3, r6
   1b664:	822b      	strh	r3, [r5, #16]
   1b666:	d802      	bhi.n	1b66e <d_type+0x502>
   1b668:	4620      	mov	r0, r4
   1b66a:	f7ff f9a5 	bl	1a9b8 <d_number>
   1b66e:	4620      	mov	r0, r4
   1b670:	f7ff fd7c 	bl	1b16c <d_type>
   1b674:	60e8      	str	r0, [r5, #12]
   1b676:	2800      	cmp	r0, #0
   1b678:	f43f ade4 	beq.w	1b244 <d_type+0xd8>
   1b67c:	4620      	mov	r0, r4
   1b67e:	f7ff f99b 	bl	1a9b8 <d_number>
   1b682:	68e2      	ldr	r2, [r4, #12]
   1b684:	7813      	ldrb	r3, [r2, #0]
   1b686:	b113      	cbz	r3, 1b68e <d_type+0x522>
   1b688:	1c53      	adds	r3, r2, #1
   1b68a:	60e3      	str	r3, [r4, #12]
   1b68c:	7813      	ldrb	r3, [r2, #0]
   1b68e:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   1b692:	fab3 f383 	clz	r3, r3
   1b696:	095b      	lsrs	r3, r3, #5
   1b698:	826b      	strh	r3, [r5, #18]
   1b69a:	e5d4      	b.n	1b246 <d_type+0xda>
   1b69c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b6a0:	4293      	cmp	r3, r2
   1b6a2:	f6bf adcf 	bge.w	1b244 <d_type+0xd8>
   1b6a6:	6922      	ldr	r2, [r4, #16]
   1b6a8:	49c0      	ldr	r1, [pc, #768]	; (1b9ac <d_type+0x840>)
   1b6aa:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b6ae:	00a8      	lsls	r0, r5, #2
   1b6b0:	3301      	adds	r3, #1
   1b6b2:	6163      	str	r3, [r4, #20]
   1b6b4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1b6b8:	2300      	movs	r3, #0
   1b6ba:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1b6be:	5413      	strb	r3, [r2, r0]
   1b6c0:	230e      	movs	r3, #14
   1b6c2:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1b6c6:	e5be      	b.n	1b246 <d_type+0xda>
   1b6c8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b6cc:	4293      	cmp	r3, r2
   1b6ce:	f6bf adb9 	bge.w	1b244 <d_type+0xd8>
   1b6d2:	6922      	ldr	r2, [r4, #16]
   1b6d4:	49b6      	ldr	r1, [pc, #728]	; (1b9b0 <d_type+0x844>)
   1b6d6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1b6da:	00a8      	lsls	r0, r5, #2
   1b6dc:	3301      	adds	r3, #1
   1b6de:	6163      	str	r3, [r4, #20]
   1b6e0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1b6e4:	2300      	movs	r3, #0
   1b6e6:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1b6ea:	5413      	strb	r3, [r2, r0]
   1b6ec:	2304      	movs	r3, #4
   1b6ee:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1b6f2:	e5a8      	b.n	1b246 <d_type+0xda>
   1b6f4:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b6f8:	4293      	cmp	r3, r2
   1b6fa:	f280 816b 	bge.w	1b9d4 <d_type+0x868>
   1b6fe:	6922      	ldr	r2, [r4, #16]
   1b700:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b704:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b708:	3301      	adds	r3, #1
   1b70a:	2000      	movs	r0, #0
   1b70c:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b710:	6163      	str	r3, [r4, #20]
   1b712:	2327      	movs	r3, #39	; 0x27
   1b714:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b718:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b71a:	4aa6      	ldr	r2, [pc, #664]	; (1b9b4 <d_type+0x848>)
   1b71c:	60ea      	str	r2, [r5, #12]
   1b71e:	3304      	adds	r3, #4
   1b720:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b722:	e590      	b.n	1b246 <d_type+0xda>
   1b724:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b728:	4293      	cmp	r3, r2
   1b72a:	f280 8153 	bge.w	1b9d4 <d_type+0x868>
   1b72e:	6922      	ldr	r2, [r4, #16]
   1b730:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b734:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b738:	3301      	adds	r3, #1
   1b73a:	2000      	movs	r0, #0
   1b73c:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b740:	6163      	str	r3, [r4, #20]
   1b742:	2327      	movs	r3, #39	; 0x27
   1b744:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b748:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b74a:	4a9b      	ldr	r2, [pc, #620]	; (1b9b8 <d_type+0x84c>)
   1b74c:	60ea      	str	r2, [r5, #12]
   1b74e:	3309      	adds	r3, #9
   1b750:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b752:	e578      	b.n	1b246 <d_type+0xda>
   1b754:	7893      	ldrb	r3, [r2, #2]
   1b756:	2b5f      	cmp	r3, #95	; 0x5f
   1b758:	f000 8114 	beq.w	1b984 <d_type+0x818>
   1b75c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b760:	4293      	cmp	r3, r2
   1b762:	f6bf ad6f 	bge.w	1b244 <d_type+0xd8>
   1b766:	6922      	ldr	r2, [r4, #16]
   1b768:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b76c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b770:	3301      	adds	r3, #1
   1b772:	2000      	movs	r0, #0
   1b774:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b778:	6163      	str	r3, [r4, #20]
   1b77a:	2343      	movs	r3, #67	; 0x43
   1b77c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b780:	4620      	mov	r0, r4
   1b782:	f7ff f919 	bl	1a9b8 <d_number>
   1b786:	60e8      	str	r0, [r5, #12]
   1b788:	68e3      	ldr	r3, [r4, #12]
   1b78a:	781a      	ldrb	r2, [r3, #0]
   1b78c:	2a5f      	cmp	r2, #95	; 0x5f
   1b78e:	f47f ad59 	bne.w	1b244 <d_type+0xd8>
   1b792:	3301      	adds	r3, #1
   1b794:	60e3      	str	r3, [r4, #12]
   1b796:	4620      	mov	r0, r4
   1b798:	f7ff fce8 	bl	1b16c <d_type>
   1b79c:	462a      	mov	r2, r5
   1b79e:	4603      	mov	r3, r0
   1b7a0:	212d      	movs	r1, #45	; 0x2d
   1b7a2:	4620      	mov	r0, r4
   1b7a4:	f7ff f890 	bl	1a8c8 <d_make_comp>
   1b7a8:	4605      	mov	r5, r0
   1b7aa:	9001      	str	r0, [sp, #4]
   1b7ac:	e583      	b.n	1b2b6 <d_type+0x14a>
   1b7ae:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b7b2:	4293      	cmp	r3, r2
   1b7b4:	f280 810e 	bge.w	1b9d4 <d_type+0x868>
   1b7b8:	6922      	ldr	r2, [r4, #16]
   1b7ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b7be:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b7c2:	3301      	adds	r3, #1
   1b7c4:	2000      	movs	r0, #0
   1b7c6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b7ca:	6163      	str	r3, [r4, #20]
   1b7cc:	2327      	movs	r3, #39	; 0x27
   1b7ce:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b7d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b7d4:	4a79      	ldr	r2, [pc, #484]	; (1b9bc <d_type+0x850>)
   1b7d6:	60ea      	str	r2, [r5, #12]
   1b7d8:	3307      	adds	r3, #7
   1b7da:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b7dc:	e533      	b.n	1b246 <d_type+0xda>
   1b7de:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b7e2:	4293      	cmp	r3, r2
   1b7e4:	f280 80f6 	bge.w	1b9d4 <d_type+0x868>
   1b7e8:	6922      	ldr	r2, [r4, #16]
   1b7ea:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b7ee:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b7f2:	3301      	adds	r3, #1
   1b7f4:	2000      	movs	r0, #0
   1b7f6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b7fa:	6163      	str	r3, [r4, #20]
   1b7fc:	2327      	movs	r3, #39	; 0x27
   1b7fe:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b804:	4a6e      	ldr	r2, [pc, #440]	; (1b9c0 <d_type+0x854>)
   1b806:	60ea      	str	r2, [r5, #12]
   1b808:	3308      	adds	r3, #8
   1b80a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b80c:	e51b      	b.n	1b246 <d_type+0xda>
   1b80e:	4620      	mov	r0, r4
   1b810:	f7ff fcac 	bl	1b16c <d_type>
   1b814:	2300      	movs	r3, #0
   1b816:	4602      	mov	r2, r0
   1b818:	214c      	movs	r1, #76	; 0x4c
   1b81a:	4620      	mov	r0, r4
   1b81c:	f7ff f854 	bl	1a8c8 <d_make_comp>
   1b820:	4605      	mov	r5, r0
   1b822:	9001      	str	r0, [sp, #4]
   1b824:	e547      	b.n	1b2b6 <d_type+0x14a>
   1b826:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b82a:	4293      	cmp	r3, r2
   1b82c:	f280 80d2 	bge.w	1b9d4 <d_type+0x868>
   1b830:	6922      	ldr	r2, [r4, #16]
   1b832:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b836:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b83a:	3301      	adds	r3, #1
   1b83c:	2000      	movs	r0, #0
   1b83e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b842:	6163      	str	r3, [r4, #20]
   1b844:	2327      	movs	r3, #39	; 0x27
   1b846:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b84a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b84c:	4a5d      	ldr	r2, [pc, #372]	; (1b9c4 <d_type+0x858>)
   1b84e:	60ea      	str	r2, [r5, #12]
   1b850:	3311      	adds	r3, #17
   1b852:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b854:	e4f7      	b.n	1b246 <d_type+0xda>
   1b856:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b85a:	4293      	cmp	r3, r2
   1b85c:	f280 80ba 	bge.w	1b9d4 <d_type+0x868>
   1b860:	6922      	ldr	r2, [r4, #16]
   1b862:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b866:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b86a:	3301      	adds	r3, #1
   1b86c:	2000      	movs	r0, #0
   1b86e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b872:	6163      	str	r3, [r4, #20]
   1b874:	2327      	movs	r3, #39	; 0x27
   1b876:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b87a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b87c:	4a52      	ldr	r2, [pc, #328]	; (1b9c8 <d_type+0x85c>)
   1b87e:	60ea      	str	r2, [r5, #12]
   1b880:	3308      	adds	r3, #8
   1b882:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b884:	e4df      	b.n	1b246 <d_type+0xda>
   1b886:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b88a:	4293      	cmp	r3, r2
   1b88c:	f280 80a2 	bge.w	1b9d4 <d_type+0x868>
   1b890:	6922      	ldr	r2, [r4, #16]
   1b892:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b896:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b89a:	3301      	adds	r3, #1
   1b89c:	2000      	movs	r0, #0
   1b89e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b8a2:	6163      	str	r3, [r4, #20]
   1b8a4:	2327      	movs	r3, #39	; 0x27
   1b8a6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b8aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b8ac:	4a47      	ldr	r2, [pc, #284]	; (1b9cc <d_type+0x860>)
   1b8ae:	60ea      	str	r2, [r5, #12]
   1b8b0:	330a      	adds	r3, #10
   1b8b2:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b8b4:	e4c7      	b.n	1b246 <d_type+0xda>
   1b8b6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b8ba:	4293      	cmp	r3, r2
   1b8bc:	f280 808a 	bge.w	1b9d4 <d_type+0x868>
   1b8c0:	6922      	ldr	r2, [r4, #16]
   1b8c2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b8c6:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b8ca:	3301      	adds	r3, #1
   1b8cc:	2000      	movs	r0, #0
   1b8ce:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b8d2:	6163      	str	r3, [r4, #20]
   1b8d4:	2327      	movs	r3, #39	; 0x27
   1b8d6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b8da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b8dc:	4a3c      	ldr	r2, [pc, #240]	; (1b9d0 <d_type+0x864>)
   1b8de:	60ea      	str	r2, [r5, #12]
   1b8e0:	3309      	adds	r3, #9
   1b8e2:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b8e4:	e4af      	b.n	1b246 <d_type+0xda>
   1b8e6:	2600      	movs	r6, #0
   1b8e8:	e65e      	b.n	1b5a8 <d_type+0x43c>
   1b8ea:	3301      	adds	r3, #1
   1b8ec:	60e3      	str	r3, [r4, #12]
   1b8ee:	4620      	mov	r0, r4
   1b8f0:	f000 fbee 	bl	1c0d0 <d_template_args_1>
   1b8f4:	462a      	mov	r2, r5
   1b8f6:	4603      	mov	r3, r0
   1b8f8:	2104      	movs	r1, #4
   1b8fa:	4620      	mov	r0, r4
   1b8fc:	f7fe ffe4 	bl	1a8c8 <d_make_comp>
   1b900:	4605      	mov	r5, r0
   1b902:	e611      	b.n	1b528 <d_type+0x3bc>
   1b904:	2301      	movs	r3, #1
   1b906:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b908:	6323      	str	r3, [r4, #48]	; 0x30
   1b90a:	4620      	mov	r0, r4
   1b90c:	f000 fca8 	bl	1c260 <d_expression_1>
   1b910:	6325      	str	r5, [r4, #48]	; 0x30
   1b912:	4606      	mov	r6, r0
   1b914:	2800      	cmp	r0, #0
   1b916:	f43f ac95 	beq.w	1b244 <d_type+0xd8>
   1b91a:	68e5      	ldr	r5, [r4, #12]
   1b91c:	782a      	ldrb	r2, [r5, #0]
   1b91e:	e640      	b.n	1b5a2 <d_type+0x436>
   1b920:	4620      	mov	r0, r4
   1b922:	f001 fa31 	bl	1cd88 <d_name>
   1b926:	4605      	mov	r5, r0
   1b928:	9001      	str	r0, [sp, #4]
   1b92a:	2800      	cmp	r0, #0
   1b92c:	f43f ac8a 	beq.w	1b244 <d_type+0xd8>
   1b930:	7803      	ldrb	r3, [r0, #0]
   1b932:	2b18      	cmp	r3, #24
   1b934:	f47f acc1 	bne.w	1b2ba <d_type+0x14e>
   1b938:	e485      	b.n	1b246 <d_type+0xda>
   1b93a:	1c73      	adds	r3, r6, #1
   1b93c:	60e3      	str	r3, [r4, #12]
   1b93e:	4620      	mov	r0, r4
   1b940:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1b944:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1b948:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1b94a:	f000 fbc1 	bl	1c0d0 <d_template_args_1>
   1b94e:	68e3      	ldr	r3, [r4, #12]
   1b950:	781b      	ldrb	r3, [r3, #0]
   1b952:	2b49      	cmp	r3, #73	; 0x49
   1b954:	d006      	beq.n	1b964 <d_type+0x7f8>
   1b956:	60e6      	str	r6, [r4, #12]
   1b958:	f8c4 9014 	str.w	r9, [r4, #20]
   1b95c:	f8c4 8020 	str.w	r8, [r4, #32]
   1b960:	62e7      	str	r7, [r4, #44]	; 0x2c
   1b962:	e4a8      	b.n	1b2b6 <d_type+0x14a>
   1b964:	2d00      	cmp	r5, #0
   1b966:	f43f ac6d 	beq.w	1b244 <d_type+0xd8>
   1b96a:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   1b96e:	4299      	cmp	r1, r3
   1b970:	f6bf ac68 	bge.w	1b244 <d_type+0xd8>
   1b974:	69e2      	ldr	r2, [r4, #28]
   1b976:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1b97a:	3101      	adds	r1, #1
   1b97c:	4603      	mov	r3, r0
   1b97e:	462a      	mov	r2, r5
   1b980:	6221      	str	r1, [r4, #32]
   1b982:	e5b9      	b.n	1b4f8 <d_type+0x38c>
   1b984:	3203      	adds	r2, #3
   1b986:	2301      	movs	r3, #1
   1b988:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1b98a:	60e2      	str	r2, [r4, #12]
   1b98c:	6323      	str	r3, [r4, #48]	; 0x30
   1b98e:	4620      	mov	r0, r4
   1b990:	f000 fc66 	bl	1c260 <d_expression_1>
   1b994:	6325      	str	r5, [r4, #48]	; 0x30
   1b996:	4605      	mov	r5, r0
   1b998:	2800      	cmp	r0, #0
   1b99a:	f47f aef5 	bne.w	1b788 <d_type+0x61c>
   1b99e:	e451      	b.n	1b244 <d_type+0xd8>
   1b9a0:	68c3      	ldr	r3, [r0, #12]
   1b9a2:	deff      	udf	#255	; 0xff
   1b9a4:	2300      	movs	r3, #0
   1b9a6:	701b      	strb	r3, [r3, #0]
   1b9a8:	deff      	udf	#255	; 0xff
   1b9aa:	bf00      	nop
   1b9ac:	2000372c 	.word	0x2000372c
   1b9b0:	20003724 	.word	0x20003724
   1b9b4:	20002ecc 	.word	0x20002ecc
   1b9b8:	20002e90 	.word	0x20002e90
   1b9bc:	20002ee0 	.word	0x20002ee0
   1b9c0:	20002ef4 	.word	0x20002ef4
   1b9c4:	20002f1c 	.word	0x20002f1c
   1b9c8:	20002f08 	.word	0x20002f08
   1b9cc:	20002eb8 	.word	0x20002eb8
   1b9d0:	20002ea4 	.word	0x20002ea4
   1b9d4:	2300      	movs	r3, #0
   1b9d6:	68db      	ldr	r3, [r3, #12]
   1b9d8:	deff      	udf	#255	; 0xff
   1b9da:	bf00      	nop

0001b9dc <d_parmlist>:
   1b9dc:	b530      	push	{r4, r5, lr}
   1b9de:	68c2      	ldr	r2, [r0, #12]
   1b9e0:	b083      	sub	sp, #12
   1b9e2:	2300      	movs	r3, #0
   1b9e4:	9301      	str	r3, [sp, #4]
   1b9e6:	7813      	ldrb	r3, [r2, #0]
   1b9e8:	2b00      	cmp	r3, #0
   1b9ea:	d034      	beq.n	1ba56 <d_parmlist+0x7a>
   1b9ec:	4604      	mov	r4, r0
   1b9ee:	ad01      	add	r5, sp, #4
   1b9f0:	2b4f      	cmp	r3, #79	; 0x4f
   1b9f2:	d00c      	beq.n	1ba0e <d_parmlist+0x32>
   1b9f4:	d809      	bhi.n	1ba0a <d_parmlist+0x2e>
   1b9f6:	2b2e      	cmp	r3, #46	; 0x2e
   1b9f8:	d001      	beq.n	1b9fe <d_parmlist+0x22>
   1b9fa:	2b45      	cmp	r3, #69	; 0x45
   1b9fc:	d10a      	bne.n	1ba14 <d_parmlist+0x38>
   1b9fe:	9801      	ldr	r0, [sp, #4]
   1ba00:	b348      	cbz	r0, 1ba56 <d_parmlist+0x7a>
   1ba02:	6903      	ldr	r3, [r0, #16]
   1ba04:	b1cb      	cbz	r3, 1ba3a <d_parmlist+0x5e>
   1ba06:	b003      	add	sp, #12
   1ba08:	bd30      	pop	{r4, r5, pc}
   1ba0a:	2b52      	cmp	r3, #82	; 0x52
   1ba0c:	d102      	bne.n	1ba14 <d_parmlist+0x38>
   1ba0e:	7853      	ldrb	r3, [r2, #1]
   1ba10:	2b45      	cmp	r3, #69	; 0x45
   1ba12:	d0f4      	beq.n	1b9fe <d_parmlist+0x22>
   1ba14:	4620      	mov	r0, r4
   1ba16:	f7ff fba9 	bl	1b16c <d_type>
   1ba1a:	4602      	mov	r2, r0
   1ba1c:	2300      	movs	r3, #0
   1ba1e:	212e      	movs	r1, #46	; 0x2e
   1ba20:	4620      	mov	r0, r4
   1ba22:	b1c2      	cbz	r2, 1ba56 <d_parmlist+0x7a>
   1ba24:	f7fe ff50 	bl	1a8c8 <d_make_comp>
   1ba28:	6028      	str	r0, [r5, #0]
   1ba2a:	b1a0      	cbz	r0, 1ba56 <d_parmlist+0x7a>
   1ba2c:	68e2      	ldr	r2, [r4, #12]
   1ba2e:	7813      	ldrb	r3, [r2, #0]
   1ba30:	f100 0510 	add.w	r5, r0, #16
   1ba34:	2b00      	cmp	r3, #0
   1ba36:	d1db      	bne.n	1b9f0 <d_parmlist+0x14>
   1ba38:	e7e1      	b.n	1b9fe <d_parmlist+0x22>
   1ba3a:	68c2      	ldr	r2, [r0, #12]
   1ba3c:	7811      	ldrb	r1, [r2, #0]
   1ba3e:	2927      	cmp	r1, #39	; 0x27
   1ba40:	d1e1      	bne.n	1ba06 <d_parmlist+0x2a>
   1ba42:	68d2      	ldr	r2, [r2, #12]
   1ba44:	7c11      	ldrb	r1, [r2, #16]
   1ba46:	2909      	cmp	r1, #9
   1ba48:	d1dd      	bne.n	1ba06 <d_parmlist+0x2a>
   1ba4a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1ba4c:	6852      	ldr	r2, [r2, #4]
   1ba4e:	1a89      	subs	r1, r1, r2
   1ba50:	62e1      	str	r1, [r4, #44]	; 0x2c
   1ba52:	60c3      	str	r3, [r0, #12]
   1ba54:	e7d7      	b.n	1ba06 <d_parmlist+0x2a>
   1ba56:	2000      	movs	r0, #0
   1ba58:	b003      	add	sp, #12
   1ba5a:	bd30      	pop	{r4, r5, pc}

0001ba5c <d_bare_function_type>:
   1ba5c:	b570      	push	{r4, r5, r6, lr}
   1ba5e:	68c3      	ldr	r3, [r0, #12]
   1ba60:	781a      	ldrb	r2, [r3, #0]
   1ba62:	2a4a      	cmp	r2, #74	; 0x4a
   1ba64:	4605      	mov	r5, r0
   1ba66:	d01a      	beq.n	1ba9e <d_bare_function_type+0x42>
   1ba68:	b181      	cbz	r1, 1ba8c <d_bare_function_type+0x30>
   1ba6a:	4628      	mov	r0, r5
   1ba6c:	f7ff fb7e 	bl	1b16c <d_type>
   1ba70:	4604      	mov	r4, r0
   1ba72:	b190      	cbz	r0, 1ba9a <d_bare_function_type+0x3e>
   1ba74:	4628      	mov	r0, r5
   1ba76:	f7ff ffb1 	bl	1b9dc <d_parmlist>
   1ba7a:	4603      	mov	r3, r0
   1ba7c:	b168      	cbz	r0, 1ba9a <d_bare_function_type+0x3e>
   1ba7e:	4622      	mov	r2, r4
   1ba80:	4628      	mov	r0, r5
   1ba82:	2129      	movs	r1, #41	; 0x29
   1ba84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ba88:	f7fe bf1e 	b.w	1a8c8 <d_make_comp>
   1ba8c:	4628      	mov	r0, r5
   1ba8e:	460c      	mov	r4, r1
   1ba90:	f7ff ffa4 	bl	1b9dc <d_parmlist>
   1ba94:	4603      	mov	r3, r0
   1ba96:	2800      	cmp	r0, #0
   1ba98:	d1f1      	bne.n	1ba7e <d_bare_function_type+0x22>
   1ba9a:	2000      	movs	r0, #0
   1ba9c:	bd70      	pop	{r4, r5, r6, pc}
   1ba9e:	3301      	adds	r3, #1
   1baa0:	60c3      	str	r3, [r0, #12]
   1baa2:	e7e2      	b.n	1ba6a <d_bare_function_type+0xe>

0001baa4 <d_function_type>:
   1baa4:	b510      	push	{r4, lr}
   1baa6:	4604      	mov	r4, r0
   1baa8:	6880      	ldr	r0, [r0, #8]
   1baaa:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
   1baae:	d10b      	bne.n	1bac8 <d_function_type+0x24>
   1bab0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1bab2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1bab6:	d806      	bhi.n	1bac6 <d_function_type+0x22>
   1bab8:	1c51      	adds	r1, r2, #1
   1baba:	68e3      	ldr	r3, [r4, #12]
   1babc:	63e1      	str	r1, [r4, #60]	; 0x3c
   1babe:	7819      	ldrb	r1, [r3, #0]
   1bac0:	2946      	cmp	r1, #70	; 0x46
   1bac2:	d007      	beq.n	1bad4 <d_function_type+0x30>
   1bac4:	63e2      	str	r2, [r4, #60]	; 0x3c
   1bac6:	bd10      	pop	{r4, pc}
   1bac8:	68e3      	ldr	r3, [r4, #12]
   1baca:	781a      	ldrb	r2, [r3, #0]
   1bacc:	2a46      	cmp	r2, #70	; 0x46
   1bace:	d001      	beq.n	1bad4 <d_function_type+0x30>
   1bad0:	2000      	movs	r0, #0
   1bad2:	bd10      	pop	{r4, pc}
   1bad4:	1c5a      	adds	r2, r3, #1
   1bad6:	60e2      	str	r2, [r4, #12]
   1bad8:	785a      	ldrb	r2, [r3, #1]
   1bada:	2a59      	cmp	r2, #89	; 0x59
   1badc:	bf04      	itt	eq
   1bade:	3302      	addeq	r3, #2
   1bae0:	60e3      	streq	r3, [r4, #12]
   1bae2:	2101      	movs	r1, #1
   1bae4:	4620      	mov	r0, r4
   1bae6:	f7ff ffb9 	bl	1ba5c <d_bare_function_type>
   1baea:	4601      	mov	r1, r0
   1baec:	4620      	mov	r0, r4
   1baee:	f7fe ffc1 	bl	1aa74 <d_ref_qualifier>
   1baf2:	68e3      	ldr	r3, [r4, #12]
   1baf4:	781a      	ldrb	r2, [r3, #0]
   1baf6:	2a45      	cmp	r2, #69	; 0x45
   1baf8:	bf04      	itt	eq
   1bafa:	3301      	addeq	r3, #1
   1bafc:	60e3      	streq	r3, [r4, #12]
   1bafe:	68a3      	ldr	r3, [r4, #8]
   1bb00:	bf18      	it	ne
   1bb02:	2000      	movne	r0, #0
   1bb04:	035b      	lsls	r3, r3, #13
   1bb06:	d4de      	bmi.n	1bac6 <d_function_type+0x22>
   1bb08:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1bb0a:	3a01      	subs	r2, #1
   1bb0c:	e7da      	b.n	1bac4 <d_function_type+0x20>
   1bb0e:	bf00      	nop

0001bb10 <d_operator_name>:
   1bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb12:	68c3      	ldr	r3, [r0, #12]
   1bb14:	781f      	ldrb	r7, [r3, #0]
   1bb16:	4606      	mov	r6, r0
   1bb18:	bb77      	cbnz	r7, 1bb78 <d_operator_name+0x68>
   1bb1a:	f04f 0e00 	mov.w	lr, #0
   1bb1e:	4d3d      	ldr	r5, [pc, #244]	; (1bc14 <d_operator_name+0x104>)
   1bb20:	2148      	movs	r1, #72	; 0x48
   1bb22:	2200      	movs	r2, #0
   1bb24:	1a8b      	subs	r3, r1, r2
   1bb26:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1bb2a:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1bb2e:	0118      	lsls	r0, r3, #4
   1bb30:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
   1bb34:	582c      	ldr	r4, [r5, r0]
   1bb36:	7820      	ldrb	r0, [r4, #0]
   1bb38:	42b8      	cmp	r0, r7
   1bb3a:	d006      	beq.n	1bb4a <d_operator_name+0x3a>
   1bb3c:	bf94      	ite	ls
   1bb3e:	1c5a      	addls	r2, r3, #1
   1bb40:	4619      	movhi	r1, r3
   1bb42:	428a      	cmp	r2, r1
   1bb44:	d1ee      	bne.n	1bb24 <d_operator_name+0x14>
   1bb46:	2000      	movs	r0, #0
   1bb48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb4a:	7860      	ldrb	r0, [r4, #1]
   1bb4c:	4570      	cmp	r0, lr
   1bb4e:	d1f5      	bne.n	1bb3c <d_operator_name+0x2c>
   1bb50:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
   1bb54:	4293      	cmp	r3, r2
   1bb56:	daf6      	bge.n	1bb46 <d_operator_name+0x36>
   1bb58:	6932      	ldr	r2, [r6, #16]
   1bb5a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1bb5e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   1bb62:	3301      	adds	r3, #1
   1bb64:	2400      	movs	r4, #0
   1bb66:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1bb6a:	6173      	str	r3, [r6, #20]
   1bb6c:	2332      	movs	r3, #50	; 0x32
   1bb6e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1bb72:	f8c0 c00c 	str.w	ip, [r0, #12]
   1bb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb78:	1c5a      	adds	r2, r3, #1
   1bb7a:	60c2      	str	r2, [r0, #12]
   1bb7c:	f893 e001 	ldrb.w	lr, [r3, #1]
   1bb80:	781f      	ldrb	r7, [r3, #0]
   1bb82:	f1be 0f00 	cmp.w	lr, #0
   1bb86:	d102      	bne.n	1bb8e <d_operator_name+0x7e>
   1bb88:	2f76      	cmp	r7, #118	; 0x76
   1bb8a:	d0c8      	beq.n	1bb1e <d_operator_name+0xe>
   1bb8c:	e7c5      	b.n	1bb1a <d_operator_name+0xa>
   1bb8e:	1c9a      	adds	r2, r3, #2
   1bb90:	60c2      	str	r2, [r0, #12]
   1bb92:	2f76      	cmp	r7, #118	; 0x76
   1bb94:	f893 e001 	ldrb.w	lr, [r3, #1]
   1bb98:	d11f      	bne.n	1bbda <d_operator_name+0xca>
   1bb9a:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
   1bb9e:	b2e3      	uxtb	r3, r4
   1bba0:	2b09      	cmp	r3, #9
   1bba2:	d8bc      	bhi.n	1bb1e <d_operator_name+0xe>
   1bba4:	f7ff f9a8 	bl	1aef8 <d_source_name>
   1bba8:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   1bbac:	428b      	cmp	r3, r1
   1bbae:	4602      	mov	r2, r0
   1bbb0:	dac9      	bge.n	1bb46 <d_operator_name+0x36>
   1bbb2:	6937      	ldr	r7, [r6, #16]
   1bbb4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1bbb8:	eb07 0081 	add.w	r0, r7, r1, lsl #2
   1bbbc:	3301      	adds	r3, #1
   1bbbe:	2500      	movs	r5, #0
   1bbc0:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1bbc4:	0089      	lsls	r1, r1, #2
   1bbc6:	6173      	str	r3, [r6, #20]
   1bbc8:	2a00      	cmp	r2, #0
   1bbca:	d0bc      	beq.n	1bb46 <d_operator_name+0x36>
   1bbcc:	2333      	movs	r3, #51	; 0x33
   1bbce:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1bbd2:	547b      	strb	r3, [r7, r1]
   1bbd4:	e9c0 4203 	strd	r4, r2, [r0, #12]
   1bbd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbda:	2f63      	cmp	r7, #99	; 0x63
   1bbdc:	d19f      	bne.n	1bb1e <d_operator_name+0xe>
   1bbde:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   1bbe2:	d19c      	bne.n	1bb1e <d_operator_name+0xe>
   1bbe4:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
   1bbe8:	fab3 f383 	clz	r3, r3
   1bbec:	095b      	lsrs	r3, r3, #5
   1bbee:	6343      	str	r3, [r0, #52]	; 0x34
   1bbf0:	f7ff fabc 	bl	1b16c <d_type>
   1bbf4:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1bbf6:	4602      	mov	r2, r0
   1bbf8:	b133      	cbz	r3, 1bc08 <d_operator_name+0xf8>
   1bbfa:	2300      	movs	r3, #0
   1bbfc:	2135      	movs	r1, #53	; 0x35
   1bbfe:	4630      	mov	r0, r6
   1bc00:	f7fe fe62 	bl	1a8c8 <d_make_comp>
   1bc04:	6374      	str	r4, [r6, #52]	; 0x34
   1bc06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc08:	2134      	movs	r1, #52	; 0x34
   1bc0a:	4630      	mov	r0, r6
   1bc0c:	f7fe fe5c 	bl	1a8c8 <d_make_comp>
   1bc10:	e7f8      	b.n	1bc04 <d_operator_name+0xf4>
   1bc12:	bf00      	nop
   1bc14:	20002f30 	.word	0x20002f30

0001bc18 <d_unqualified_name>:
   1bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc1a:	68c3      	ldr	r3, [r0, #12]
   1bc1c:	781a      	ldrb	r2, [r3, #0]
   1bc1e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1bc22:	2909      	cmp	r1, #9
   1bc24:	4604      	mov	r4, r0
   1bc26:	d965      	bls.n	1bcf4 <d_unqualified_name+0xdc>
   1bc28:	2a55      	cmp	r2, #85	; 0x55
   1bc2a:	d06c      	beq.n	1bd06 <d_unqualified_name+0xee>
   1bc2c:	d838      	bhi.n	1bca0 <d_unqualified_name+0x88>
   1bc2e:	2a44      	cmp	r2, #68	; 0x44
   1bc30:	d90f      	bls.n	1bc52 <d_unqualified_name+0x3a>
   1bc32:	2a4c      	cmp	r2, #76	; 0x4c
   1bc34:	d10a      	bne.n	1bc4c <d_unqualified_name+0x34>
   1bc36:	3301      	adds	r3, #1
   1bc38:	60c3      	str	r3, [r0, #12]
   1bc3a:	f7ff f95d 	bl	1aef8 <d_source_name>
   1bc3e:	4605      	mov	r5, r0
   1bc40:	b120      	cbz	r0, 1bc4c <d_unqualified_name+0x34>
   1bc42:	4620      	mov	r0, r4
   1bc44:	f7fe ffaa 	bl	1ab9c <d_discriminator>
   1bc48:	2800      	cmp	r0, #0
   1bc4a:	d13b      	bne.n	1bcc4 <d_unqualified_name+0xac>
   1bc4c:	2500      	movs	r5, #0
   1bc4e:	4628      	mov	r0, r5
   1bc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bc52:	2a42      	cmp	r2, #66	; 0x42
   1bc54:	d9fa      	bls.n	1bc4c <d_unqualified_name+0x34>
   1bc56:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1bc58:	b141      	cbz	r1, 1bc6c <d_unqualified_name+0x54>
   1bc5a:	7808      	ldrb	r0, [r1, #0]
   1bc5c:	2800      	cmp	r0, #0
   1bc5e:	f040 8091 	bne.w	1bd84 <d_unqualified_name+0x16c>
   1bc62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bc64:	6908      	ldr	r0, [r1, #16]
   1bc66:	4402      	add	r2, r0
   1bc68:	62e2      	str	r2, [r4, #44]	; 0x2c
   1bc6a:	781a      	ldrb	r2, [r3, #0]
   1bc6c:	2a43      	cmp	r2, #67	; 0x43
   1bc6e:	f000 80c8 	beq.w	1be02 <d_unqualified_name+0x1ea>
   1bc72:	2a44      	cmp	r2, #68	; 0x44
   1bc74:	f040 8084 	bne.w	1bd80 <d_unqualified_name+0x168>
   1bc78:	785a      	ldrb	r2, [r3, #1]
   1bc7a:	3a30      	subs	r2, #48	; 0x30
   1bc7c:	2a05      	cmp	r2, #5
   1bc7e:	d8e5      	bhi.n	1bc4c <d_unqualified_name+0x34>
   1bc80:	a001      	add	r0, pc, #4	; (adr r0, 1bc88 <d_unqualified_name+0x70>)
   1bc82:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1bc86:	bf00      	nop
   1bc88:	0001bd93 	.word	0x0001bd93
   1bc8c:	0001bdeb 	.word	0x0001bdeb
   1bc90:	0001bdd9 	.word	0x0001bdd9
   1bc94:	0001bc4d 	.word	0x0001bc4d
   1bc98:	0001bde5 	.word	0x0001bde5
   1bc9c:	0001bddf 	.word	0x0001bddf
   1bca0:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1bca4:	2919      	cmp	r1, #25
   1bca6:	d8d1      	bhi.n	1bc4c <d_unqualified_name+0x34>
   1bca8:	2a6f      	cmp	r2, #111	; 0x6f
   1bcaa:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1bcac:	f000 80a0 	beq.w	1bdf0 <d_unqualified_name+0x1d8>
   1bcb0:	4620      	mov	r0, r4
   1bcb2:	f7ff ff2d 	bl	1bb10 <d_operator_name>
   1bcb6:	6325      	str	r5, [r4, #48]	; 0x30
   1bcb8:	4605      	mov	r5, r0
   1bcba:	b118      	cbz	r0, 1bcc4 <d_unqualified_name+0xac>
   1bcbc:	7803      	ldrb	r3, [r0, #0]
   1bcbe:	2b32      	cmp	r3, #50	; 0x32
   1bcc0:	f000 80c6 	beq.w	1be50 <d_unqualified_name+0x238>
   1bcc4:	68e3      	ldr	r3, [r4, #12]
   1bcc6:	781a      	ldrb	r2, [r3, #0]
   1bcc8:	2a42      	cmp	r2, #66	; 0x42
   1bcca:	d1c0      	bne.n	1bc4e <d_unqualified_name+0x36>
   1bccc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1bcce:	3301      	adds	r3, #1
   1bcd0:	60e3      	str	r3, [r4, #12]
   1bcd2:	4620      	mov	r0, r4
   1bcd4:	f7ff f910 	bl	1aef8 <d_source_name>
   1bcd8:	462a      	mov	r2, r5
   1bcda:	4603      	mov	r3, r0
   1bcdc:	214d      	movs	r1, #77	; 0x4d
   1bcde:	4620      	mov	r0, r4
   1bce0:	f7fe fdf2 	bl	1a8c8 <d_make_comp>
   1bce4:	68e3      	ldr	r3, [r4, #12]
   1bce6:	781a      	ldrb	r2, [r3, #0]
   1bce8:	2a42      	cmp	r2, #66	; 0x42
   1bcea:	4605      	mov	r5, r0
   1bcec:	d0ef      	beq.n	1bcce <d_unqualified_name+0xb6>
   1bcee:	62a6      	str	r6, [r4, #40]	; 0x28
   1bcf0:	4628      	mov	r0, r5
   1bcf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bcf4:	f7ff f900 	bl	1aef8 <d_source_name>
   1bcf8:	68e3      	ldr	r3, [r4, #12]
   1bcfa:	781a      	ldrb	r2, [r3, #0]
   1bcfc:	4605      	mov	r5, r0
   1bcfe:	2a42      	cmp	r2, #66	; 0x42
   1bd00:	d0e4      	beq.n	1bccc <d_unqualified_name+0xb4>
   1bd02:	4628      	mov	r0, r5
   1bd04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd06:	785a      	ldrb	r2, [r3, #1]
   1bd08:	2a6c      	cmp	r2, #108	; 0x6c
   1bd0a:	f000 80c1 	beq.w	1be90 <d_unqualified_name+0x278>
   1bd0e:	2a74      	cmp	r2, #116	; 0x74
   1bd10:	d19c      	bne.n	1bc4c <d_unqualified_name+0x34>
   1bd12:	1c59      	adds	r1, r3, #1
   1bd14:	60c1      	str	r1, [r0, #12]
   1bd16:	785a      	ldrb	r2, [r3, #1]
   1bd18:	2a74      	cmp	r2, #116	; 0x74
   1bd1a:	d137      	bne.n	1bd8c <d_unqualified_name+0x174>
   1bd1c:	1c9a      	adds	r2, r3, #2
   1bd1e:	60c2      	str	r2, [r0, #12]
   1bd20:	789a      	ldrb	r2, [r3, #2]
   1bd22:	2a5f      	cmp	r2, #95	; 0x5f
   1bd24:	f000 8108 	beq.w	1bf38 <d_unqualified_name+0x320>
   1bd28:	2a6e      	cmp	r2, #110	; 0x6e
   1bd2a:	d08f      	beq.n	1bc4c <d_unqualified_name+0x34>
   1bd2c:	f7fe fe44 	bl	1a9b8 <d_number>
   1bd30:	3001      	adds	r0, #1
   1bd32:	68e3      	ldr	r3, [r4, #12]
   1bd34:	f100 80fd 	bmi.w	1bf32 <d_unqualified_name+0x31a>
   1bd38:	781a      	ldrb	r2, [r3, #0]
   1bd3a:	2a5f      	cmp	r2, #95	; 0x5f
   1bd3c:	d120      	bne.n	1bd80 <d_unqualified_name+0x168>
   1bd3e:	3301      	adds	r3, #1
   1bd40:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   1bd44:	428a      	cmp	r2, r1
   1bd46:	60e3      	str	r3, [r4, #12]
   1bd48:	f280 8100 	bge.w	1bf4c <d_unqualified_name+0x334>
   1bd4c:	6926      	ldr	r6, [r4, #16]
   1bd4e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   1bd52:	eb06 0587 	add.w	r5, r6, r7, lsl #2
   1bd56:	3201      	adds	r2, #1
   1bd58:	2100      	movs	r1, #0
   1bd5a:	e9c5 1101 	strd	r1, r1, [r5, #4]
   1bd5e:	6162      	str	r2, [r4, #20]
   1bd60:	2249      	movs	r2, #73	; 0x49
   1bd62:	f806 2027 	strb.w	r2, [r6, r7, lsl #2]
   1bd66:	60e8      	str	r0, [r5, #12]
   1bd68:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   1bd6c:	4282      	cmp	r2, r0
   1bd6e:	f280 80ea 	bge.w	1bf46 <d_unqualified_name+0x32e>
   1bd72:	69e1      	ldr	r1, [r4, #28]
   1bd74:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   1bd78:	3201      	adds	r2, #1
   1bd7a:	6222      	str	r2, [r4, #32]
   1bd7c:	781a      	ldrb	r2, [r3, #0]
   1bd7e:	e7be      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bd80:	2500      	movs	r5, #0
   1bd82:	e7bc      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bd84:	2818      	cmp	r0, #24
   1bd86:	f47f af71 	bne.w	1bc6c <d_unqualified_name+0x54>
   1bd8a:	e76a      	b.n	1bc62 <d_unqualified_name+0x4a>
   1bd8c:	460b      	mov	r3, r1
   1bd8e:	2500      	movs	r5, #0
   1bd90:	e7b5      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bd92:	f04f 0e01 	mov.w	lr, #1
   1bd96:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1bd9a:	1c9f      	adds	r7, r3, #2
   1bd9c:	4282      	cmp	r2, r0
   1bd9e:	60e7      	str	r7, [r4, #12]
   1bda0:	f280 80c2 	bge.w	1bf28 <d_unqualified_name+0x310>
   1bda4:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1bda8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1bdac:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
   1bdb0:	3201      	adds	r2, #1
   1bdb2:	2600      	movs	r6, #0
   1bdb4:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1bdb8:	0080      	lsls	r0, r0, #2
   1bdba:	6162      	str	r2, [r4, #20]
   1bdbc:	2900      	cmp	r1, #0
   1bdbe:	f000 80b3 	beq.w	1bf28 <d_unqualified_name+0x310>
   1bdc2:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1bdc6:	2208      	movs	r2, #8
   1bdc8:	f80c 2000 	strb.w	r2, [ip, r0]
   1bdcc:	f885 e00c 	strb.w	lr, [r5, #12]
   1bdd0:	6129      	str	r1, [r5, #16]
   1bdd2:	789a      	ldrb	r2, [r3, #2]
   1bdd4:	463b      	mov	r3, r7
   1bdd6:	e792      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bdd8:	f04f 0e03 	mov.w	lr, #3
   1bddc:	e7db      	b.n	1bd96 <d_unqualified_name+0x17e>
   1bdde:	f04f 0e05 	mov.w	lr, #5
   1bde2:	e7d8      	b.n	1bd96 <d_unqualified_name+0x17e>
   1bde4:	f04f 0e04 	mov.w	lr, #4
   1bde8:	e7d5      	b.n	1bd96 <d_unqualified_name+0x17e>
   1bdea:	f04f 0e02 	mov.w	lr, #2
   1bdee:	e7d2      	b.n	1bd96 <d_unqualified_name+0x17e>
   1bdf0:	785a      	ldrb	r2, [r3, #1]
   1bdf2:	2a6e      	cmp	r2, #110	; 0x6e
   1bdf4:	f47f af5c 	bne.w	1bcb0 <d_unqualified_name+0x98>
   1bdf8:	3302      	adds	r3, #2
   1bdfa:	2200      	movs	r2, #0
   1bdfc:	60c3      	str	r3, [r0, #12]
   1bdfe:	6302      	str	r2, [r0, #48]	; 0x30
   1be00:	e756      	b.n	1bcb0 <d_unqualified_name+0x98>
   1be02:	785a      	ldrb	r2, [r3, #1]
   1be04:	2a49      	cmp	r2, #73	; 0x49
   1be06:	d07f      	beq.n	1bf08 <d_unqualified_name+0x2f0>
   1be08:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
   1be0c:	2804      	cmp	r0, #4
   1be0e:	f63f af1d 	bhi.w	1bc4c <d_unqualified_name+0x34>
   1be12:	3a30      	subs	r2, #48	; 0x30
   1be14:	3302      	adds	r3, #2
   1be16:	b2d6      	uxtb	r6, r2
   1be18:	60e3      	str	r3, [r4, #12]
   1be1a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1be1e:	4293      	cmp	r3, r2
   1be20:	f280 8086 	bge.w	1bf30 <d_unqualified_name+0x318>
   1be24:	6927      	ldr	r7, [r4, #16]
   1be26:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1be2a:	eb07 0582 	add.w	r5, r7, r2, lsl #2
   1be2e:	3301      	adds	r3, #1
   1be30:	2000      	movs	r0, #0
   1be32:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1be36:	0092      	lsls	r2, r2, #2
   1be38:	6163      	str	r3, [r4, #20]
   1be3a:	2900      	cmp	r1, #0
   1be3c:	d078      	beq.n	1bf30 <d_unqualified_name+0x318>
   1be3e:	2307      	movs	r3, #7
   1be40:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1be44:	54bb      	strb	r3, [r7, r2]
   1be46:	68e3      	ldr	r3, [r4, #12]
   1be48:	732e      	strb	r6, [r5, #12]
   1be4a:	6129      	str	r1, [r5, #16]
   1be4c:	781a      	ldrb	r2, [r3, #0]
   1be4e:	e756      	b.n	1bcfe <d_unqualified_name+0xe6>
   1be50:	68c2      	ldr	r2, [r0, #12]
   1be52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1be54:	6891      	ldr	r1, [r2, #8]
   1be56:	6812      	ldr	r2, [r2, #0]
   1be58:	3307      	adds	r3, #7
   1be5a:	440b      	add	r3, r1
   1be5c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1be5e:	7813      	ldrb	r3, [r2, #0]
   1be60:	2b6c      	cmp	r3, #108	; 0x6c
   1be62:	f47f af2f 	bne.w	1bcc4 <d_unqualified_name+0xac>
   1be66:	7853      	ldrb	r3, [r2, #1]
   1be68:	2b69      	cmp	r3, #105	; 0x69
   1be6a:	f47f af2b 	bne.w	1bcc4 <d_unqualified_name+0xac>
   1be6e:	7893      	ldrb	r3, [r2, #2]
   1be70:	2b00      	cmp	r3, #0
   1be72:	f47f af27 	bne.w	1bcc4 <d_unqualified_name+0xac>
   1be76:	4620      	mov	r0, r4
   1be78:	f7ff f83e 	bl	1aef8 <d_source_name>
   1be7c:	462a      	mov	r2, r5
   1be7e:	4603      	mov	r3, r0
   1be80:	2137      	movs	r1, #55	; 0x37
   1be82:	4620      	mov	r0, r4
   1be84:	f7fe fd20 	bl	1a8c8 <d_make_comp>
   1be88:	68e3      	ldr	r3, [r4, #12]
   1be8a:	4605      	mov	r5, r0
   1be8c:	781a      	ldrb	r2, [r3, #0]
   1be8e:	e736      	b.n	1bcfe <d_unqualified_name+0xe6>
   1be90:	1c59      	adds	r1, r3, #1
   1be92:	60c1      	str	r1, [r0, #12]
   1be94:	785a      	ldrb	r2, [r3, #1]
   1be96:	2a6c      	cmp	r2, #108	; 0x6c
   1be98:	f47f af78 	bne.w	1bd8c <d_unqualified_name+0x174>
   1be9c:	3302      	adds	r3, #2
   1be9e:	60c3      	str	r3, [r0, #12]
   1bea0:	f7ff fd9c 	bl	1b9dc <d_parmlist>
   1bea4:	68e3      	ldr	r3, [r4, #12]
   1bea6:	4606      	mov	r6, r0
   1bea8:	2800      	cmp	r0, #0
   1beaa:	d042      	beq.n	1bf32 <d_unqualified_name+0x31a>
   1beac:	781a      	ldrb	r2, [r3, #0]
   1beae:	2a45      	cmp	r2, #69	; 0x45
   1beb0:	f47f af66 	bne.w	1bd80 <d_unqualified_name+0x168>
   1beb4:	1c5a      	adds	r2, r3, #1
   1beb6:	60e2      	str	r2, [r4, #12]
   1beb8:	785a      	ldrb	r2, [r3, #1]
   1beba:	2a5f      	cmp	r2, #95	; 0x5f
   1bebc:	d049      	beq.n	1bf52 <d_unqualified_name+0x33a>
   1bebe:	2a6e      	cmp	r2, #110	; 0x6e
   1bec0:	f43f aec4 	beq.w	1bc4c <d_unqualified_name+0x34>
   1bec4:	4620      	mov	r0, r4
   1bec6:	f7fe fd77 	bl	1a9b8 <d_number>
   1beca:	3001      	adds	r0, #1
   1becc:	68e3      	ldr	r3, [r4, #12]
   1bece:	d430      	bmi.n	1bf32 <d_unqualified_name+0x31a>
   1bed0:	781a      	ldrb	r2, [r3, #0]
   1bed2:	2a5f      	cmp	r2, #95	; 0x5f
   1bed4:	f47f af54 	bne.w	1bd80 <d_unqualified_name+0x168>
   1bed8:	3301      	adds	r3, #1
   1beda:	6962      	ldr	r2, [r4, #20]
   1bedc:	69a1      	ldr	r1, [r4, #24]
   1bede:	60e3      	str	r3, [r4, #12]
   1bee0:	428a      	cmp	r2, r1
   1bee2:	da33      	bge.n	1bf4c <d_unqualified_name+0x334>
   1bee4:	6921      	ldr	r1, [r4, #16]
   1bee6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   1beea:	eb01 0587 	add.w	r5, r1, r7, lsl #2
   1beee:	3201      	adds	r2, #1
   1bef0:	f04f 0c00 	mov.w	ip, #0
   1bef4:	e9c5 cc01 	strd	ip, ip, [r5, #4]
   1bef8:	6162      	str	r2, [r4, #20]
   1befa:	2247      	movs	r2, #71	; 0x47
   1befc:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
   1bf00:	e9c5 6003 	strd	r6, r0, [r5, #12]
   1bf04:	781a      	ldrb	r2, [r3, #0]
   1bf06:	e6fa      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bf08:	1c59      	adds	r1, r3, #1
   1bf0a:	60e1      	str	r1, [r4, #12]
   1bf0c:	789a      	ldrb	r2, [r3, #2]
   1bf0e:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
   1bf12:	2804      	cmp	r0, #4
   1bf14:	d813      	bhi.n	1bf3e <d_unqualified_name+0x326>
   1bf16:	3303      	adds	r3, #3
   1bf18:	3a30      	subs	r2, #48	; 0x30
   1bf1a:	60e3      	str	r3, [r4, #12]
   1bf1c:	4620      	mov	r0, r4
   1bf1e:	b2d6      	uxtb	r6, r2
   1bf20:	f7ff f924 	bl	1b16c <d_type>
   1bf24:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1bf26:	e778      	b.n	1be1a <d_unqualified_name+0x202>
   1bf28:	789a      	ldrb	r2, [r3, #2]
   1bf2a:	2500      	movs	r5, #0
   1bf2c:	463b      	mov	r3, r7
   1bf2e:	e6e6      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bf30:	68e3      	ldr	r3, [r4, #12]
   1bf32:	781a      	ldrb	r2, [r3, #0]
   1bf34:	2500      	movs	r5, #0
   1bf36:	e6e2      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bf38:	3303      	adds	r3, #3
   1bf3a:	2000      	movs	r0, #0
   1bf3c:	e700      	b.n	1bd40 <d_unqualified_name+0x128>
   1bf3e:	785a      	ldrb	r2, [r3, #1]
   1bf40:	2500      	movs	r5, #0
   1bf42:	460b      	mov	r3, r1
   1bf44:	e6db      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bf46:	781a      	ldrb	r2, [r3, #0]
   1bf48:	460d      	mov	r5, r1
   1bf4a:	e6d8      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bf4c:	781a      	ldrb	r2, [r3, #0]
   1bf4e:	2500      	movs	r5, #0
   1bf50:	e6d5      	b.n	1bcfe <d_unqualified_name+0xe6>
   1bf52:	3302      	adds	r3, #2
   1bf54:	2000      	movs	r0, #0
   1bf56:	e7c0      	b.n	1beda <d_unqualified_name+0x2c2>

0001bf58 <d_expr_primary>:
   1bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf5a:	68c2      	ldr	r2, [r0, #12]
   1bf5c:	7813      	ldrb	r3, [r2, #0]
   1bf5e:	2b4c      	cmp	r3, #76	; 0x4c
   1bf60:	d132      	bne.n	1bfc8 <d_expr_primary+0x70>
   1bf62:	1c53      	adds	r3, r2, #1
   1bf64:	60c3      	str	r3, [r0, #12]
   1bf66:	7851      	ldrb	r1, [r2, #1]
   1bf68:	295f      	cmp	r1, #95	; 0x5f
   1bf6a:	4604      	mov	r4, r0
   1bf6c:	d051      	beq.n	1c012 <d_expr_primary+0xba>
   1bf6e:	295a      	cmp	r1, #90	; 0x5a
   1bf70:	d113      	bne.n	1bf9a <d_expr_primary+0x42>
   1bf72:	1c5a      	adds	r2, r3, #1
   1bf74:	60e2      	str	r2, [r4, #12]
   1bf76:	785b      	ldrb	r3, [r3, #1]
   1bf78:	2b47      	cmp	r3, #71	; 0x47
   1bf7a:	d043      	beq.n	1c004 <d_expr_primary+0xac>
   1bf7c:	2b54      	cmp	r3, #84	; 0x54
   1bf7e:	d041      	beq.n	1c004 <d_expr_primary+0xac>
   1bf80:	2100      	movs	r1, #0
   1bf82:	4620      	mov	r0, r4
   1bf84:	f001 f84e 	bl	1d024 <d_encoding.part.0>
   1bf88:	68e3      	ldr	r3, [r4, #12]
   1bf8a:	781a      	ldrb	r2, [r3, #0]
   1bf8c:	4606      	mov	r6, r0
   1bf8e:	2a45      	cmp	r2, #69	; 0x45
   1bf90:	d11a      	bne.n	1bfc8 <d_expr_primary+0x70>
   1bf92:	3301      	adds	r3, #1
   1bf94:	60e3      	str	r3, [r4, #12]
   1bf96:	4630      	mov	r0, r6
   1bf98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bf9a:	f7ff f8e7 	bl	1b16c <d_type>
   1bf9e:	4606      	mov	r6, r0
   1bfa0:	b190      	cbz	r0, 1bfc8 <d_expr_primary+0x70>
   1bfa2:	7803      	ldrb	r3, [r0, #0]
   1bfa4:	2b27      	cmp	r3, #39	; 0x27
   1bfa6:	d012      	beq.n	1bfce <d_expr_primary+0x76>
   1bfa8:	68e2      	ldr	r2, [r4, #12]
   1bfaa:	7815      	ldrb	r5, [r2, #0]
   1bfac:	2d6e      	cmp	r5, #110	; 0x6e
   1bfae:	d023      	beq.n	1bff8 <d_expr_primary+0xa0>
   1bfb0:	213d      	movs	r1, #61	; 0x3d
   1bfb2:	2d45      	cmp	r5, #69	; 0x45
   1bfb4:	d059      	beq.n	1c06a <d_expr_primary+0x112>
   1bfb6:	4613      	mov	r3, r2
   1bfb8:	e003      	b.n	1bfc2 <d_expr_primary+0x6a>
   1bfba:	60e3      	str	r3, [r4, #12]
   1bfbc:	781d      	ldrb	r5, [r3, #0]
   1bfbe:	2d45      	cmp	r5, #69	; 0x45
   1bfc0:	d02f      	beq.n	1c022 <d_expr_primary+0xca>
   1bfc2:	3301      	adds	r3, #1
   1bfc4:	2d00      	cmp	r5, #0
   1bfc6:	d1f8      	bne.n	1bfba <d_expr_primary+0x62>
   1bfc8:	2600      	movs	r6, #0
   1bfca:	4630      	mov	r0, r6
   1bfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfce:	68c3      	ldr	r3, [r0, #12]
   1bfd0:	7c1a      	ldrb	r2, [r3, #16]
   1bfd2:	b11a      	cbz	r2, 1bfdc <d_expr_primary+0x84>
   1bfd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1bfd6:	6859      	ldr	r1, [r3, #4]
   1bfd8:	1a52      	subs	r2, r2, r1
   1bfda:	62e2      	str	r2, [r4, #44]	; 0x2c
   1bfdc:	4925      	ldr	r1, [pc, #148]	; (1c074 <d_expr_primary+0x11c>)
   1bfde:	6818      	ldr	r0, [r3, #0]
   1bfe0:	f007 f982 	bl	232e8 <strcmp>
   1bfe4:	2800      	cmp	r0, #0
   1bfe6:	d1df      	bne.n	1bfa8 <d_expr_primary+0x50>
   1bfe8:	68e2      	ldr	r2, [r4, #12]
   1bfea:	7815      	ldrb	r5, [r2, #0]
   1bfec:	2d45      	cmp	r5, #69	; 0x45
   1bfee:	d03e      	beq.n	1c06e <d_expr_primary+0x116>
   1bff0:	2d6e      	cmp	r5, #110	; 0x6e
   1bff2:	d001      	beq.n	1bff8 <d_expr_primary+0xa0>
   1bff4:	213d      	movs	r1, #61	; 0x3d
   1bff6:	e7de      	b.n	1bfb6 <d_expr_primary+0x5e>
   1bff8:	1c53      	adds	r3, r2, #1
   1bffa:	60e3      	str	r3, [r4, #12]
   1bffc:	7855      	ldrb	r5, [r2, #1]
   1bffe:	213e      	movs	r1, #62	; 0x3e
   1c000:	461a      	mov	r2, r3
   1c002:	e7d6      	b.n	1bfb2 <d_expr_primary+0x5a>
   1c004:	4620      	mov	r0, r4
   1c006:	f000 fc85 	bl	1c914 <d_special_name>
   1c00a:	68e3      	ldr	r3, [r4, #12]
   1c00c:	4606      	mov	r6, r0
   1c00e:	781a      	ldrb	r2, [r3, #0]
   1c010:	e7bd      	b.n	1bf8e <d_expr_primary+0x36>
   1c012:	1c93      	adds	r3, r2, #2
   1c014:	60c3      	str	r3, [r0, #12]
   1c016:	7892      	ldrb	r2, [r2, #2]
   1c018:	2a5a      	cmp	r2, #90	; 0x5a
   1c01a:	bf18      	it	ne
   1c01c:	2600      	movne	r6, #0
   1c01e:	d1b6      	bne.n	1bf8e <d_expr_primary+0x36>
   1c020:	e7a7      	b.n	1bf72 <d_expr_primary+0x1a>
   1c022:	1a9d      	subs	r5, r3, r2
   1c024:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1c028:	4298      	cmp	r0, r3
   1c02a:	da1c      	bge.n	1c066 <d_expr_primary+0x10e>
   1c02c:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1c030:	eb00 0780 	add.w	r7, r0, r0, lsl #2
   1c034:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
   1c038:	ea4f 0c87 	mov.w	ip, r7, lsl #2
   1c03c:	2700      	movs	r7, #0
   1c03e:	3001      	adds	r0, #1
   1c040:	42bd      	cmp	r5, r7
   1c042:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1c046:	6160      	str	r0, [r4, #20]
   1c048:	dd0d      	ble.n	1c066 <d_expr_primary+0x10e>
   1c04a:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1c04e:	f80e 700c 	strb.w	r7, [lr, ip]
   1c052:	e9c3 2503 	strd	r2, r5, [r3, #12]
   1c056:	4632      	mov	r2, r6
   1c058:	4620      	mov	r0, r4
   1c05a:	f7fe fc35 	bl	1a8c8 <d_make_comp>
   1c05e:	68e3      	ldr	r3, [r4, #12]
   1c060:	4606      	mov	r6, r0
   1c062:	781a      	ldrb	r2, [r3, #0]
   1c064:	e793      	b.n	1bf8e <d_expr_primary+0x36>
   1c066:	2300      	movs	r3, #0
   1c068:	e7f5      	b.n	1c056 <d_expr_primary+0xfe>
   1c06a:	2500      	movs	r5, #0
   1c06c:	e7da      	b.n	1c024 <d_expr_primary+0xcc>
   1c06e:	3201      	adds	r2, #1
   1c070:	60e2      	str	r2, [r4, #12]
   1c072:	e7aa      	b.n	1bfca <d_expr_primary+0x72>
   1c074:	200033c4 	.word	0x200033c4

0001c078 <d_template_arg>:
   1c078:	b538      	push	{r3, r4, r5, lr}
   1c07a:	68c2      	ldr	r2, [r0, #12]
   1c07c:	7813      	ldrb	r3, [r2, #0]
   1c07e:	2b4c      	cmp	r3, #76	; 0x4c
   1c080:	d020      	beq.n	1c0c4 <d_template_arg+0x4c>
   1c082:	4604      	mov	r4, r0
   1c084:	d808      	bhi.n	1c098 <d_template_arg+0x20>
   1c086:	3b49      	subs	r3, #73	; 0x49
   1c088:	2b01      	cmp	r3, #1
   1c08a:	d816      	bhi.n	1c0ba <d_template_arg+0x42>
   1c08c:	3201      	adds	r2, #1
   1c08e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c092:	60c2      	str	r2, [r0, #12]
   1c094:	f000 b81c 	b.w	1c0d0 <d_template_args_1>
   1c098:	2b58      	cmp	r3, #88	; 0x58
   1c09a:	d10e      	bne.n	1c0ba <d_template_arg+0x42>
   1c09c:	3201      	adds	r2, #1
   1c09e:	2301      	movs	r3, #1
   1c0a0:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1c0a2:	60c2      	str	r2, [r0, #12]
   1c0a4:	6303      	str	r3, [r0, #48]	; 0x30
   1c0a6:	f000 f8db 	bl	1c260 <d_expression_1>
   1c0aa:	68e3      	ldr	r3, [r4, #12]
   1c0ac:	6325      	str	r5, [r4, #48]	; 0x30
   1c0ae:	781a      	ldrb	r2, [r3, #0]
   1c0b0:	2a45      	cmp	r2, #69	; 0x45
   1c0b2:	d10b      	bne.n	1c0cc <d_template_arg+0x54>
   1c0b4:	3301      	adds	r3, #1
   1c0b6:	60e3      	str	r3, [r4, #12]
   1c0b8:	bd38      	pop	{r3, r4, r5, pc}
   1c0ba:	4620      	mov	r0, r4
   1c0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c0c0:	f7ff b854 	b.w	1b16c <d_type>
   1c0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1c0c8:	f7ff bf46 	b.w	1bf58 <d_expr_primary>
   1c0cc:	2000      	movs	r0, #0
   1c0ce:	bd38      	pop	{r3, r4, r5, pc}

0001c0d0 <d_template_args_1>:
   1c0d0:	b570      	push	{r4, r5, r6, lr}
   1c0d2:	68c3      	ldr	r3, [r0, #12]
   1c0d4:	6a86      	ldr	r6, [r0, #40]	; 0x28
   1c0d6:	781a      	ldrb	r2, [r3, #0]
   1c0d8:	2a45      	cmp	r2, #69	; 0x45
   1c0da:	b082      	sub	sp, #8
   1c0dc:	4604      	mov	r4, r0
   1c0de:	d01f      	beq.n	1c120 <d_template_args_1+0x50>
   1c0e0:	2300      	movs	r3, #0
   1c0e2:	9301      	str	r3, [sp, #4]
   1c0e4:	ad01      	add	r5, sp, #4
   1c0e6:	e009      	b.n	1c0fc <d_template_args_1+0x2c>
   1c0e8:	f7fe fbee 	bl	1a8c8 <d_make_comp>
   1c0ec:	6028      	str	r0, [r5, #0]
   1c0ee:	f100 0510 	add.w	r5, r0, #16
   1c0f2:	b160      	cbz	r0, 1c10e <d_template_args_1+0x3e>
   1c0f4:	68e3      	ldr	r3, [r4, #12]
   1c0f6:	781a      	ldrb	r2, [r3, #0]
   1c0f8:	2a45      	cmp	r2, #69	; 0x45
   1c0fa:	d00b      	beq.n	1c114 <d_template_args_1+0x44>
   1c0fc:	4620      	mov	r0, r4
   1c0fe:	f7ff ffbb 	bl	1c078 <d_template_arg>
   1c102:	4602      	mov	r2, r0
   1c104:	2300      	movs	r3, #0
   1c106:	212f      	movs	r1, #47	; 0x2f
   1c108:	4620      	mov	r0, r4
   1c10a:	2a00      	cmp	r2, #0
   1c10c:	d1ec      	bne.n	1c0e8 <d_template_args_1+0x18>
   1c10e:	2000      	movs	r0, #0
   1c110:	b002      	add	sp, #8
   1c112:	bd70      	pop	{r4, r5, r6, pc}
   1c114:	9801      	ldr	r0, [sp, #4]
   1c116:	62a6      	str	r6, [r4, #40]	; 0x28
   1c118:	3301      	adds	r3, #1
   1c11a:	60e3      	str	r3, [r4, #12]
   1c11c:	b002      	add	sp, #8
   1c11e:	bd70      	pop	{r4, r5, r6, pc}
   1c120:	1c5a      	adds	r2, r3, #1
   1c122:	2300      	movs	r3, #0
   1c124:	60c2      	str	r2, [r0, #12]
   1c126:	212f      	movs	r1, #47	; 0x2f
   1c128:	461a      	mov	r2, r3
   1c12a:	b002      	add	sp, #8
   1c12c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c130:	f7fe bbca 	b.w	1a8c8 <d_make_comp>

0001c134 <d_prefix>:
   1c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c136:	68c2      	ldr	r2, [r0, #12]
   1c138:	7814      	ldrb	r4, [r2, #0]
   1c13a:	b394      	cbz	r4, 1c1a2 <d_prefix+0x6e>
   1c13c:	4606      	mov	r6, r0
   1c13e:	460f      	mov	r7, r1
   1c140:	2500      	movs	r5, #0
   1c142:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1c146:	2b4a      	cmp	r3, #74	; 0x4a
   1c148:	d82b      	bhi.n	1c1a2 <d_prefix+0x6e>
   1c14a:	e8df f003 	tbb	[pc, r3]
   1c14e:	2d2d      	.short	0x2d2d
   1c150:	2d2d2d2d 	.word	0x2d2d2d2d
   1c154:	2d2d2d2d 	.word	0x2d2d2d2d
   1c158:	2a2a2a2a 	.word	0x2a2a2a2a
   1c15c:	2a2a2a2a 	.word	0x2a2a2a2a
   1c160:	2b772d2a 	.word	0x2b772d2a
   1c164:	682a2a2a 	.word	0x682a2a2a
   1c168:	5f2d2a2a 	.word	0x5f2d2a2a
   1c16c:	2a2a2a2a 	.word	0x2a2a2a2a
   1c170:	2d4b532a 	.word	0x2d4b532a
   1c174:	2a2a2a2a 	.word	0x2a2a2a2a
   1c178:	2a2a2a2a 	.word	0x2a2a2a2a
   1c17c:	2d2a2a2a 	.word	0x2d2a2a2a
   1c180:	2d2d2d2d 	.word	0x2d2d2d2d
   1c184:	2d2d2d2d 	.word	0x2d2d2d2d
   1c188:	2d2d2d2d 	.word	0x2d2d2d2d
   1c18c:	2d2d2d2d 	.word	0x2d2d2d2d
   1c190:	2d2d2d2d 	.word	0x2d2d2d2d
   1c194:	2d2d2d2d 	.word	0x2d2d2d2d
   1c198:	2d          	.byte	0x2d
   1c199:	00          	.byte	0x00
   1c19a:	68f2      	ldr	r2, [r6, #12]
   1c19c:	7814      	ldrb	r4, [r2, #0]
   1c19e:	2c00      	cmp	r4, #0
   1c1a0:	d1cf      	bne.n	1c142 <d_prefix+0xe>
   1c1a2:	2500      	movs	r5, #0
   1c1a4:	4628      	mov	r0, r5
   1c1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c1a8:	4630      	mov	r0, r6
   1c1aa:	f7ff fd35 	bl	1bc18 <d_unqualified_name>
   1c1ae:	4603      	mov	r3, r0
   1c1b0:	2d00      	cmp	r5, #0
   1c1b2:	d14e      	bne.n	1c252 <d_prefix+0x11e>
   1c1b4:	4605      	mov	r5, r0
   1c1b6:	2c53      	cmp	r4, #83	; 0x53
   1c1b8:	d0ef      	beq.n	1c19a <d_prefix+0x66>
   1c1ba:	68f2      	ldr	r2, [r6, #12]
   1c1bc:	7814      	ldrb	r4, [r2, #0]
   1c1be:	2c45      	cmp	r4, #69	; 0x45
   1c1c0:	d0f0      	beq.n	1c1a4 <d_prefix+0x70>
   1c1c2:	2f00      	cmp	r7, #0
   1c1c4:	d0eb      	beq.n	1c19e <d_prefix+0x6a>
   1c1c6:	2d00      	cmp	r5, #0
   1c1c8:	d0eb      	beq.n	1c1a2 <d_prefix+0x6e>
   1c1ca:	e9d6 3108 	ldrd	r3, r1, [r6, #32]
   1c1ce:	428b      	cmp	r3, r1
   1c1d0:	dae7      	bge.n	1c1a2 <d_prefix+0x6e>
   1c1d2:	69f1      	ldr	r1, [r6, #28]
   1c1d4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1c1d8:	3301      	adds	r3, #1
   1c1da:	6233      	str	r3, [r6, #32]
   1c1dc:	7814      	ldrb	r4, [r2, #0]
   1c1de:	2c00      	cmp	r4, #0
   1c1e0:	d1af      	bne.n	1c142 <d_prefix+0xe>
   1c1e2:	e7de      	b.n	1c1a2 <d_prefix+0x6e>
   1c1e4:	4630      	mov	r0, r6
   1c1e6:	f7fe fe1b 	bl	1ae20 <d_template_param>
   1c1ea:	4603      	mov	r3, r0
   1c1ec:	2d00      	cmp	r5, #0
   1c1ee:	d130      	bne.n	1c252 <d_prefix+0x11e>
   1c1f0:	461d      	mov	r5, r3
   1c1f2:	e7e2      	b.n	1c1ba <d_prefix+0x86>
   1c1f4:	2101      	movs	r1, #1
   1c1f6:	4630      	mov	r0, r6
   1c1f8:	f7fe feee 	bl	1afd8 <d_substitution>
   1c1fc:	4603      	mov	r3, r0
   1c1fe:	bb45      	cbnz	r5, 1c252 <d_prefix+0x11e>
   1c200:	68f2      	ldr	r2, [r6, #12]
   1c202:	7814      	ldrb	r4, [r2, #0]
   1c204:	461d      	mov	r5, r3
   1c206:	2c00      	cmp	r4, #0
   1c208:	d19b      	bne.n	1c142 <d_prefix+0xe>
   1c20a:	e7ca      	b.n	1c1a2 <d_prefix+0x6e>
   1c20c:	2d00      	cmp	r5, #0
   1c20e:	d0c8      	beq.n	1c1a2 <d_prefix+0x6e>
   1c210:	1c53      	adds	r3, r2, #1
   1c212:	60f3      	str	r3, [r6, #12]
   1c214:	7854      	ldrb	r4, [r2, #1]
   1c216:	461a      	mov	r2, r3
   1c218:	2c00      	cmp	r4, #0
   1c21a:	d192      	bne.n	1c142 <d_prefix+0xe>
   1c21c:	e7c1      	b.n	1c1a2 <d_prefix+0x6e>
   1c21e:	2d00      	cmp	r5, #0
   1c220:	d0bf      	beq.n	1c1a2 <d_prefix+0x6e>
   1c222:	3201      	adds	r2, #1
   1c224:	60f2      	str	r2, [r6, #12]
   1c226:	4630      	mov	r0, r6
   1c228:	f7ff ff52 	bl	1c0d0 <d_template_args_1>
   1c22c:	2104      	movs	r1, #4
   1c22e:	4603      	mov	r3, r0
   1c230:	462a      	mov	r2, r5
   1c232:	4630      	mov	r0, r6
   1c234:	f7fe fb48 	bl	1a8c8 <d_make_comp>
   1c238:	4605      	mov	r5, r0
   1c23a:	e7bc      	b.n	1c1b6 <d_prefix+0x82>
   1c23c:	7853      	ldrb	r3, [r2, #1]
   1c23e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1c242:	2b54      	cmp	r3, #84	; 0x54
   1c244:	4630      	mov	r0, r6
   1c246:	d006      	beq.n	1c256 <d_prefix+0x122>
   1c248:	f7ff fce6 	bl	1bc18 <d_unqualified_name>
   1c24c:	4603      	mov	r3, r0
   1c24e:	2d00      	cmp	r5, #0
   1c250:	d0ce      	beq.n	1c1f0 <d_prefix+0xbc>
   1c252:	2101      	movs	r1, #1
   1c254:	e7ec      	b.n	1c230 <d_prefix+0xfc>
   1c256:	f7fe ff89 	bl	1b16c <d_type>
   1c25a:	4603      	mov	r3, r0
   1c25c:	e7c6      	b.n	1c1ec <d_prefix+0xb8>
   1c25e:	bf00      	nop

0001c260 <d_expression_1>:
   1c260:	68c2      	ldr	r2, [r0, #12]
   1c262:	7813      	ldrb	r3, [r2, #0]
   1c264:	2b4c      	cmp	r3, #76	; 0x4c
   1c266:	f000 8089 	beq.w	1c37c <d_expression_1+0x11c>
   1c26a:	2b54      	cmp	r3, #84	; 0x54
   1c26c:	f000 8088 	beq.w	1c380 <d_expression_1+0x120>
   1c270:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c272:	2b73      	cmp	r3, #115	; 0x73
   1c274:	b083      	sub	sp, #12
   1c276:	4604      	mov	r4, r0
   1c278:	d05a      	beq.n	1c330 <d_expression_1+0xd0>
   1c27a:	2b66      	cmp	r3, #102	; 0x66
   1c27c:	d028      	beq.n	1c2d0 <d_expression_1+0x70>
   1c27e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1c282:	2909      	cmp	r1, #9
   1c284:	d80c      	bhi.n	1c2a0 <d_expression_1+0x40>
   1c286:	4620      	mov	r0, r4
   1c288:	f7ff fcc6 	bl	1bc18 <d_unqualified_name>
   1c28c:	4605      	mov	r5, r0
   1c28e:	2800      	cmp	r0, #0
   1c290:	d070      	beq.n	1c374 <d_expression_1+0x114>
   1c292:	68e3      	ldr	r3, [r4, #12]
   1c294:	781a      	ldrb	r2, [r3, #0]
   1c296:	2a49      	cmp	r2, #73	; 0x49
   1c298:	d074      	beq.n	1c384 <d_expression_1+0x124>
   1c29a:	4628      	mov	r0, r5
   1c29c:	b003      	add	sp, #12
   1c29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c2a0:	2b6f      	cmp	r3, #111	; 0x6f
   1c2a2:	d061      	beq.n	1c368 <d_expression_1+0x108>
   1c2a4:	2b69      	cmp	r3, #105	; 0x69
   1c2a6:	d17b      	bne.n	1c3a0 <d_expression_1+0x140>
   1c2a8:	7853      	ldrb	r3, [r2, #1]
   1c2aa:	2b6c      	cmp	r3, #108	; 0x6c
   1c2ac:	d147      	bne.n	1c33e <d_expression_1+0xde>
   1c2ae:	3202      	adds	r2, #2
   1c2b0:	60e2      	str	r2, [r4, #12]
   1c2b2:	2500      	movs	r5, #0
   1c2b4:	7811      	ldrb	r1, [r2, #0]
   1c2b6:	2900      	cmp	r1, #0
   1c2b8:	d05c      	beq.n	1c374 <d_expression_1+0x114>
   1c2ba:	7853      	ldrb	r3, [r2, #1]
   1c2bc:	2b00      	cmp	r3, #0
   1c2be:	d059      	beq.n	1c374 <d_expression_1+0x114>
   1c2c0:	2145      	movs	r1, #69	; 0x45
   1c2c2:	4620      	mov	r0, r4
   1c2c4:	f000 fa42 	bl	1c74c <d_exprlist>
   1c2c8:	462a      	mov	r2, r5
   1c2ca:	4603      	mov	r3, r0
   1c2cc:	2131      	movs	r1, #49	; 0x31
   1c2ce:	e061      	b.n	1c394 <d_expression_1+0x134>
   1c2d0:	7853      	ldrb	r3, [r2, #1]
   1c2d2:	2b70      	cmp	r3, #112	; 0x70
   1c2d4:	d133      	bne.n	1c33e <d_expression_1+0xde>
   1c2d6:	1c93      	adds	r3, r2, #2
   1c2d8:	60c3      	str	r3, [r0, #12]
   1c2da:	7893      	ldrb	r3, [r2, #2]
   1c2dc:	2b54      	cmp	r3, #84	; 0x54
   1c2de:	f000 8148 	beq.w	1c572 <d_expression_1+0x312>
   1c2e2:	2b5f      	cmp	r3, #95	; 0x5f
   1c2e4:	f000 8086 	beq.w	1c3f4 <d_expression_1+0x194>
   1c2e8:	2b6e      	cmp	r3, #110	; 0x6e
   1c2ea:	d043      	beq.n	1c374 <d_expression_1+0x114>
   1c2ec:	f7fe fb64 	bl	1a9b8 <d_number>
   1c2f0:	1c41      	adds	r1, r0, #1
   1c2f2:	d43f      	bmi.n	1c374 <d_expression_1+0x114>
   1c2f4:	68e3      	ldr	r3, [r4, #12]
   1c2f6:	781a      	ldrb	r2, [r3, #0]
   1c2f8:	2a5f      	cmp	r2, #95	; 0x5f
   1c2fa:	d13b      	bne.n	1c374 <d_expression_1+0x114>
   1c2fc:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1c300:	3301      	adds	r3, #1
   1c302:	4291      	cmp	r1, r2
   1c304:	60e3      	str	r3, [r4, #12]
   1c306:	d035      	beq.n	1c374 <d_expression_1+0x114>
   1c308:	3002      	adds	r0, #2
   1c30a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1c30e:	4293      	cmp	r3, r2
   1c310:	da30      	bge.n	1c374 <d_expression_1+0x114>
   1c312:	6922      	ldr	r2, [r4, #16]
   1c314:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1c318:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1c31c:	3301      	adds	r3, #1
   1c31e:	2600      	movs	r6, #0
   1c320:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1c324:	6163      	str	r3, [r4, #20]
   1c326:	2306      	movs	r3, #6
   1c328:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1c32c:	60e8      	str	r0, [r5, #12]
   1c32e:	e7b4      	b.n	1c29a <d_expression_1+0x3a>
   1c330:	7853      	ldrb	r3, [r2, #1]
   1c332:	2b72      	cmp	r3, #114	; 0x72
   1c334:	f000 80f8 	beq.w	1c528 <d_expression_1+0x2c8>
   1c338:	2b70      	cmp	r3, #112	; 0x70
   1c33a:	f000 8112 	beq.w	1c562 <d_expression_1+0x302>
   1c33e:	4620      	mov	r0, r4
   1c340:	f7ff fbe6 	bl	1bb10 <d_operator_name>
   1c344:	4605      	mov	r5, r0
   1c346:	b1a8      	cbz	r0, 1c374 <d_expression_1+0x114>
   1c348:	7803      	ldrb	r3, [r0, #0]
   1c34a:	2b32      	cmp	r3, #50	; 0x32
   1c34c:	d035      	beq.n	1c3ba <d_expression_1+0x15a>
   1c34e:	2b34      	cmp	r3, #52	; 0x34
   1c350:	f000 819b 	beq.w	1c68a <d_expression_1+0x42a>
   1c354:	d80e      	bhi.n	1c374 <d_expression_1+0x114>
   1c356:	2b33      	cmp	r3, #51	; 0x33
   1c358:	d10c      	bne.n	1c374 <d_expression_1+0x114>
   1c35a:	68c3      	ldr	r3, [r0, #12]
   1c35c:	2b03      	cmp	r3, #3
   1c35e:	d809      	bhi.n	1c374 <d_expression_1+0x114>
   1c360:	e8df f003 	tbb	[pc, r3]
   1c364:	0808ce6d 	.word	0x0808ce6d
   1c368:	7853      	ldrb	r3, [r2, #1]
   1c36a:	2b6e      	cmp	r3, #110	; 0x6e
   1c36c:	d1e7      	bne.n	1c33e <d_expression_1+0xde>
   1c36e:	3202      	adds	r2, #2
   1c370:	60c2      	str	r2, [r0, #12]
   1c372:	e788      	b.n	1c286 <d_expression_1+0x26>
   1c374:	2500      	movs	r5, #0
   1c376:	4628      	mov	r0, r5
   1c378:	b003      	add	sp, #12
   1c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c37c:	f7ff bdec 	b.w	1bf58 <d_expr_primary>
   1c380:	f7fe bd4e 	b.w	1ae20 <d_template_param>
   1c384:	3301      	adds	r3, #1
   1c386:	60e3      	str	r3, [r4, #12]
   1c388:	4620      	mov	r0, r4
   1c38a:	f7ff fea1 	bl	1c0d0 <d_template_args_1>
   1c38e:	462a      	mov	r2, r5
   1c390:	4603      	mov	r3, r0
   1c392:	2104      	movs	r1, #4
   1c394:	4620      	mov	r0, r4
   1c396:	b003      	add	sp, #12
   1c398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c39c:	f7fe ba94 	b.w	1a8c8 <d_make_comp>
   1c3a0:	2b74      	cmp	r3, #116	; 0x74
   1c3a2:	f040 80b2 	bne.w	1c50a <d_expression_1+0x2aa>
   1c3a6:	7853      	ldrb	r3, [r2, #1]
   1c3a8:	2b6c      	cmp	r3, #108	; 0x6c
   1c3aa:	d1c8      	bne.n	1c33e <d_expression_1+0xde>
   1c3ac:	3202      	adds	r2, #2
   1c3ae:	60e2      	str	r2, [r4, #12]
   1c3b0:	f7fe fedc 	bl	1b16c <d_type>
   1c3b4:	68e2      	ldr	r2, [r4, #12]
   1c3b6:	4605      	mov	r5, r0
   1c3b8:	e77c      	b.n	1c2b4 <d_expression_1+0x54>
   1c3ba:	68c1      	ldr	r1, [r0, #12]
   1c3bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c3be:	688a      	ldr	r2, [r1, #8]
   1c3c0:	680e      	ldr	r6, [r1, #0]
   1c3c2:	3a02      	subs	r2, #2
   1c3c4:	4413      	add	r3, r2
   1c3c6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c3c8:	7833      	ldrb	r3, [r6, #0]
   1c3ca:	2b73      	cmp	r3, #115	; 0x73
   1c3cc:	d10b      	bne.n	1c3e6 <d_expression_1+0x186>
   1c3ce:	7872      	ldrb	r2, [r6, #1]
   1c3d0:	2a74      	cmp	r2, #116	; 0x74
   1c3d2:	d108      	bne.n	1c3e6 <d_expression_1+0x186>
   1c3d4:	78b2      	ldrb	r2, [r6, #2]
   1c3d6:	b932      	cbnz	r2, 1c3e6 <d_expression_1+0x186>
   1c3d8:	4620      	mov	r0, r4
   1c3da:	f7fe fec7 	bl	1b16c <d_type>
   1c3de:	462a      	mov	r2, r5
   1c3e0:	4603      	mov	r3, r0
   1c3e2:	2137      	movs	r1, #55	; 0x37
   1c3e4:	e7d6      	b.n	1c394 <d_expression_1+0x134>
   1c3e6:	68cf      	ldr	r7, [r1, #12]
   1c3e8:	2f03      	cmp	r7, #3
   1c3ea:	d8c3      	bhi.n	1c374 <d_expression_1+0x114>
   1c3ec:	e8df f007 	tbb	[pc, r7]
   1c3f0:	2b540627 	.word	0x2b540627
   1c3f4:	3203      	adds	r2, #3
   1c3f6:	60c2      	str	r2, [r0, #12]
   1c3f8:	2001      	movs	r0, #1
   1c3fa:	e786      	b.n	1c30a <d_expression_1+0xaa>
   1c3fc:	7832      	ldrb	r2, [r6, #0]
   1c3fe:	2a70      	cmp	r2, #112	; 0x70
   1c400:	f000 80c0 	beq.w	1c584 <d_expression_1+0x324>
   1c404:	2a6d      	cmp	r2, #109	; 0x6d
   1c406:	f000 80bd 	beq.w	1c584 <d_expression_1+0x324>
   1c40a:	2700      	movs	r7, #0
   1c40c:	2b73      	cmp	r3, #115	; 0x73
   1c40e:	f040 80b4 	bne.w	1c57a <d_expression_1+0x31a>
   1c412:	7873      	ldrb	r3, [r6, #1]
   1c414:	2b50      	cmp	r3, #80	; 0x50
   1c416:	f040 80b0 	bne.w	1c57a <d_expression_1+0x31a>
   1c41a:	78b3      	ldrb	r3, [r6, #2]
   1c41c:	2b00      	cmp	r3, #0
   1c41e:	f040 80ac 	bne.w	1c57a <d_expression_1+0x31a>
   1c422:	4620      	mov	r0, r4
   1c424:	f7ff fe54 	bl	1c0d0 <d_template_args_1>
   1c428:	4603      	mov	r3, r0
   1c42a:	b12f      	cbz	r7, 1c438 <d_expression_1+0x1d8>
   1c42c:	461a      	mov	r2, r3
   1c42e:	2139      	movs	r1, #57	; 0x39
   1c430:	4620      	mov	r0, r4
   1c432:	f7fe fa49 	bl	1a8c8 <d_make_comp>
   1c436:	4603      	mov	r3, r0
   1c438:	462a      	mov	r2, r5
   1c43a:	2137      	movs	r1, #55	; 0x37
   1c43c:	e7aa      	b.n	1c394 <d_expression_1+0x134>
   1c43e:	2300      	movs	r3, #0
   1c440:	462a      	mov	r2, r5
   1c442:	2136      	movs	r1, #54	; 0x36
   1c444:	e7a6      	b.n	1c394 <d_expression_1+0x134>
   1c446:	2b71      	cmp	r3, #113	; 0x71
   1c448:	f040 80c4 	bne.w	1c5d4 <d_expression_1+0x374>
   1c44c:	7872      	ldrb	r2, [r6, #1]
   1c44e:	2a75      	cmp	r2, #117	; 0x75
   1c450:	f040 80c0 	bne.w	1c5d4 <d_expression_1+0x374>
   1c454:	78b2      	ldrb	r2, [r6, #2]
   1c456:	2a00      	cmp	r2, #0
   1c458:	f040 80bc 	bne.w	1c5d4 <d_expression_1+0x374>
   1c45c:	4620      	mov	r0, r4
   1c45e:	f7ff feff 	bl	1c260 <d_expression_1>
   1c462:	4606      	mov	r6, r0
   1c464:	4620      	mov	r0, r4
   1c466:	f7ff fefb 	bl	1c260 <d_expression_1>
   1c46a:	4607      	mov	r7, r0
   1c46c:	4620      	mov	r0, r4
   1c46e:	f7ff fef7 	bl	1c260 <d_expression_1>
   1c472:	4603      	mov	r3, r0
   1c474:	2800      	cmp	r0, #0
   1c476:	f43f af7d 	beq.w	1c374 <d_expression_1+0x114>
   1c47a:	463a      	mov	r2, r7
   1c47c:	213c      	movs	r1, #60	; 0x3c
   1c47e:	4620      	mov	r0, r4
   1c480:	f7fe fa22 	bl	1a8c8 <d_make_comp>
   1c484:	4632      	mov	r2, r6
   1c486:	4603      	mov	r3, r0
   1c488:	213b      	movs	r1, #59	; 0x3b
   1c48a:	4620      	mov	r0, r4
   1c48c:	f7fe fa1c 	bl	1a8c8 <d_make_comp>
   1c490:	462a      	mov	r2, r5
   1c492:	4603      	mov	r3, r0
   1c494:	213a      	movs	r1, #58	; 0x3a
   1c496:	e77d      	b.n	1c394 <d_expression_1+0x134>
   1c498:	68eb      	ldr	r3, [r5, #12]
   1c49a:	681b      	ldr	r3, [r3, #0]
   1c49c:	785a      	ldrb	r2, [r3, #1]
   1c49e:	2a63      	cmp	r2, #99	; 0x63
   1c4a0:	f000 810e 	beq.w	1c6c0 <d_expression_1+0x460>
   1c4a4:	7833      	ldrb	r3, [r6, #0]
   1c4a6:	2b66      	cmp	r3, #102	; 0x66
   1c4a8:	f000 8133 	beq.w	1c712 <d_expression_1+0x4b2>
   1c4ac:	2b64      	cmp	r3, #100	; 0x64
   1c4ae:	f040 8127 	bne.w	1c700 <d_expression_1+0x4a0>
   1c4b2:	7873      	ldrb	r3, [r6, #1]
   1c4b4:	2b69      	cmp	r3, #105	; 0x69
   1c4b6:	f040 8123 	bne.w	1c700 <d_expression_1+0x4a0>
   1c4ba:	78b3      	ldrb	r3, [r6, #2]
   1c4bc:	2b00      	cmp	r3, #0
   1c4be:	f040 811f 	bne.w	1c700 <d_expression_1+0x4a0>
   1c4c2:	4620      	mov	r0, r4
   1c4c4:	f7ff fba8 	bl	1bc18 <d_unqualified_name>
   1c4c8:	4607      	mov	r7, r0
   1c4ca:	7833      	ldrb	r3, [r6, #0]
   1c4cc:	2b63      	cmp	r3, #99	; 0x63
   1c4ce:	f040 80b4 	bne.w	1c63a <d_expression_1+0x3da>
   1c4d2:	7872      	ldrb	r2, [r6, #1]
   1c4d4:	2a6c      	cmp	r2, #108	; 0x6c
   1c4d6:	f040 80b0 	bne.w	1c63a <d_expression_1+0x3da>
   1c4da:	78b2      	ldrb	r2, [r6, #2]
   1c4dc:	2a00      	cmp	r2, #0
   1c4de:	f040 80ac 	bne.w	1c63a <d_expression_1+0x3da>
   1c4e2:	2145      	movs	r1, #69	; 0x45
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	f000 f931 	bl	1c74c <d_exprlist>
   1c4ea:	4602      	mov	r2, r0
   1c4ec:	4613      	mov	r3, r2
   1c4ee:	2139      	movs	r1, #57	; 0x39
   1c4f0:	463a      	mov	r2, r7
   1c4f2:	4620      	mov	r0, r4
   1c4f4:	f7fe f9e8 	bl	1a8c8 <d_make_comp>
   1c4f8:	462a      	mov	r2, r5
   1c4fa:	4603      	mov	r3, r0
   1c4fc:	2138      	movs	r1, #56	; 0x38
   1c4fe:	e749      	b.n	1c394 <d_expression_1+0x134>
   1c500:	4620      	mov	r0, r4
   1c502:	f7ff fead 	bl	1c260 <d_expression_1>
   1c506:	4603      	mov	r3, r0
   1c508:	e796      	b.n	1c438 <d_expression_1+0x1d8>
   1c50a:	2b75      	cmp	r3, #117	; 0x75
   1c50c:	f47f af17 	bne.w	1c33e <d_expression_1+0xde>
   1c510:	3201      	adds	r2, #1
   1c512:	60c2      	str	r2, [r0, #12]
   1c514:	f7fe fcf0 	bl	1aef8 <d_source_name>
   1c518:	9001      	str	r0, [sp, #4]
   1c51a:	4620      	mov	r0, r4
   1c51c:	f7ff fdd8 	bl	1c0d0 <d_template_args_1>
   1c520:	9a01      	ldr	r2, [sp, #4]
   1c522:	4603      	mov	r3, r0
   1c524:	213f      	movs	r1, #63	; 0x3f
   1c526:	e735      	b.n	1c394 <d_expression_1+0x134>
   1c528:	1c93      	adds	r3, r2, #2
   1c52a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1c52c:	60c3      	str	r3, [r0, #12]
   1c52e:	7893      	ldrb	r3, [r2, #2]
   1c530:	b131      	cbz	r1, 1c540 <d_expression_1+0x2e0>
   1c532:	2b55      	cmp	r3, #85	; 0x55
   1c534:	d84a      	bhi.n	1c5cc <d_expression_1+0x36c>
   1c536:	2b42      	cmp	r3, #66	; 0x42
   1c538:	d832      	bhi.n	1c5a0 <d_expression_1+0x340>
   1c53a:	3b30      	subs	r3, #48	; 0x30
   1c53c:	2b09      	cmp	r3, #9
   1c53e:	d936      	bls.n	1c5ae <d_expression_1+0x34e>
   1c540:	4620      	mov	r0, r4
   1c542:	f7fe fe13 	bl	1b16c <d_type>
   1c546:	4605      	mov	r5, r0
   1c548:	4620      	mov	r0, r4
   1c54a:	f7ff fb65 	bl	1bc18 <d_unqualified_name>
   1c54e:	68e3      	ldr	r3, [r4, #12]
   1c550:	7819      	ldrb	r1, [r3, #0]
   1c552:	2949      	cmp	r1, #73	; 0x49
   1c554:	4602      	mov	r2, r0
   1c556:	f000 80a5 	beq.w	1c6a4 <d_expression_1+0x444>
   1c55a:	4613      	mov	r3, r2
   1c55c:	2101      	movs	r1, #1
   1c55e:	462a      	mov	r2, r5
   1c560:	e718      	b.n	1c394 <d_expression_1+0x134>
   1c562:	3202      	adds	r2, #2
   1c564:	60c2      	str	r2, [r0, #12]
   1c566:	f7ff fe7b 	bl	1c260 <d_expression_1>
   1c56a:	2300      	movs	r3, #0
   1c56c:	4602      	mov	r2, r0
   1c56e:	214c      	movs	r1, #76	; 0x4c
   1c570:	e710      	b.n	1c394 <d_expression_1+0x134>
   1c572:	3203      	adds	r2, #3
   1c574:	60c2      	str	r2, [r0, #12]
   1c576:	2000      	movs	r0, #0
   1c578:	e6c7      	b.n	1c30a <d_expression_1+0xaa>
   1c57a:	4620      	mov	r0, r4
   1c57c:	f7ff fe70 	bl	1c260 <d_expression_1>
   1c580:	4603      	mov	r3, r0
   1c582:	e752      	b.n	1c42a <d_expression_1+0x1ca>
   1c584:	7871      	ldrb	r1, [r6, #1]
   1c586:	4291      	cmp	r1, r2
   1c588:	f47f af3f 	bne.w	1c40a <d_expression_1+0x1aa>
   1c58c:	68e2      	ldr	r2, [r4, #12]
   1c58e:	7811      	ldrb	r1, [r2, #0]
   1c590:	295f      	cmp	r1, #95	; 0x5f
   1c592:	f47f af3b 	bne.w	1c40c <d_expression_1+0x1ac>
   1c596:	3201      	adds	r2, #1
   1c598:	60e2      	str	r2, [r4, #12]
   1c59a:	7833      	ldrb	r3, [r6, #0]
   1c59c:	2700      	movs	r7, #0
   1c59e:	e735      	b.n	1c40c <d_expression_1+0x1ac>
   1c5a0:	4a68      	ldr	r2, [pc, #416]	; (1c744 <d_expression_1+0x4e4>)
   1c5a2:	3b43      	subs	r3, #67	; 0x43
   1c5a4:	b2db      	uxtb	r3, r3
   1c5a6:	fa22 f303 	lsr.w	r3, r2, r3
   1c5aa:	07db      	lsls	r3, r3, #31
   1c5ac:	d5c8      	bpl.n	1c540 <d_expression_1+0x2e0>
   1c5ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c5b2:	63a3      	str	r3, [r4, #56]	; 0x38
   1c5b4:	2100      	movs	r1, #0
   1c5b6:	4620      	mov	r0, r4
   1c5b8:	f7ff fdbc 	bl	1c134 <d_prefix>
   1c5bc:	68e3      	ldr	r3, [r4, #12]
   1c5be:	781a      	ldrb	r2, [r3, #0]
   1c5c0:	2a45      	cmp	r2, #69	; 0x45
   1c5c2:	4605      	mov	r5, r0
   1c5c4:	d1c0      	bne.n	1c548 <d_expression_1+0x2e8>
   1c5c6:	3301      	adds	r3, #1
   1c5c8:	60e3      	str	r3, [r4, #12]
   1c5ca:	e7bd      	b.n	1c548 <d_expression_1+0x2e8>
   1c5cc:	3b61      	subs	r3, #97	; 0x61
   1c5ce:	2b19      	cmp	r3, #25
   1c5d0:	d8b6      	bhi.n	1c540 <d_expression_1+0x2e0>
   1c5d2:	e7ec      	b.n	1c5ae <d_expression_1+0x34e>
   1c5d4:	2b64      	cmp	r3, #100	; 0x64
   1c5d6:	d106      	bne.n	1c5e6 <d_expression_1+0x386>
   1c5d8:	7873      	ldrb	r3, [r6, #1]
   1c5da:	2b58      	cmp	r3, #88	; 0x58
   1c5dc:	d103      	bne.n	1c5e6 <d_expression_1+0x386>
   1c5de:	78b3      	ldrb	r3, [r6, #2]
   1c5e0:	2b00      	cmp	r3, #0
   1c5e2:	f43f af3b 	beq.w	1c45c <d_expression_1+0x1fc>
   1c5e6:	7833      	ldrb	r3, [r6, #0]
   1c5e8:	2b66      	cmp	r3, #102	; 0x66
   1c5ea:	f000 8097 	beq.w	1c71c <d_expression_1+0x4bc>
   1c5ee:	2b6e      	cmp	r3, #110	; 0x6e
   1c5f0:	f47f aec0 	bne.w	1c374 <d_expression_1+0x114>
   1c5f4:	7873      	ldrb	r3, [r6, #1]
   1c5f6:	2b77      	cmp	r3, #119	; 0x77
   1c5f8:	d002      	beq.n	1c600 <d_expression_1+0x3a0>
   1c5fa:	2b61      	cmp	r3, #97	; 0x61
   1c5fc:	f47f aeba 	bne.w	1c374 <d_expression_1+0x114>
   1c600:	215f      	movs	r1, #95	; 0x5f
   1c602:	4620      	mov	r0, r4
   1c604:	f000 f8a2 	bl	1c74c <d_exprlist>
   1c608:	4606      	mov	r6, r0
   1c60a:	4620      	mov	r0, r4
   1c60c:	f7fe fdae 	bl	1b16c <d_type>
   1c610:	68e3      	ldr	r3, [r4, #12]
   1c612:	781a      	ldrb	r2, [r3, #0]
   1c614:	2a45      	cmp	r2, #69	; 0x45
   1c616:	4607      	mov	r7, r0
   1c618:	f000 8090 	beq.w	1c73c <d_expression_1+0x4dc>
   1c61c:	2a70      	cmp	r2, #112	; 0x70
   1c61e:	f000 8081 	beq.w	1c724 <d_expression_1+0x4c4>
   1c622:	2a69      	cmp	r2, #105	; 0x69
   1c624:	f47f aea6 	bne.w	1c374 <d_expression_1+0x114>
   1c628:	785b      	ldrb	r3, [r3, #1]
   1c62a:	2b6c      	cmp	r3, #108	; 0x6c
   1c62c:	f47f aea2 	bne.w	1c374 <d_expression_1+0x114>
   1c630:	4620      	mov	r0, r4
   1c632:	f7ff fe15 	bl	1c260 <d_expression_1>
   1c636:	4603      	mov	r3, r0
   1c638:	e71f      	b.n	1c47a <d_expression_1+0x21a>
   1c63a:	2b64      	cmp	r3, #100	; 0x64
   1c63c:	d153      	bne.n	1c6e6 <d_expression_1+0x486>
   1c63e:	7872      	ldrb	r2, [r6, #1]
   1c640:	2a74      	cmp	r2, #116	; 0x74
   1c642:	d150      	bne.n	1c6e6 <d_expression_1+0x486>
   1c644:	78b2      	ldrb	r2, [r6, #2]
   1c646:	2a00      	cmp	r2, #0
   1c648:	d14d      	bne.n	1c6e6 <d_expression_1+0x486>
   1c64a:	68e3      	ldr	r3, [r4, #12]
   1c64c:	781a      	ldrb	r2, [r3, #0]
   1c64e:	2a67      	cmp	r2, #103	; 0x67
   1c650:	d05b      	beq.n	1c70a <d_expression_1+0x4aa>
   1c652:	2a73      	cmp	r2, #115	; 0x73
   1c654:	d102      	bne.n	1c65c <d_expression_1+0x3fc>
   1c656:	785b      	ldrb	r3, [r3, #1]
   1c658:	2b72      	cmp	r3, #114	; 0x72
   1c65a:	d04c      	beq.n	1c6f6 <d_expression_1+0x496>
   1c65c:	4620      	mov	r0, r4
   1c65e:	f7ff fadb 	bl	1bc18 <d_unqualified_name>
   1c662:	68e3      	ldr	r3, [r4, #12]
   1c664:	7819      	ldrb	r1, [r3, #0]
   1c666:	2949      	cmp	r1, #73	; 0x49
   1c668:	4602      	mov	r2, r0
   1c66a:	f47f af3f 	bne.w	1c4ec <d_expression_1+0x28c>
   1c66e:	3301      	adds	r3, #1
   1c670:	60e3      	str	r3, [r4, #12]
   1c672:	4620      	mov	r0, r4
   1c674:	9201      	str	r2, [sp, #4]
   1c676:	f7ff fd2b 	bl	1c0d0 <d_template_args_1>
   1c67a:	9a01      	ldr	r2, [sp, #4]
   1c67c:	4603      	mov	r3, r0
   1c67e:	2104      	movs	r1, #4
   1c680:	4620      	mov	r0, r4
   1c682:	f7fe f921 	bl	1a8c8 <d_make_comp>
   1c686:	4602      	mov	r2, r0
   1c688:	e730      	b.n	1c4ec <d_expression_1+0x28c>
   1c68a:	68e3      	ldr	r3, [r4, #12]
   1c68c:	781a      	ldrb	r2, [r3, #0]
   1c68e:	2a5f      	cmp	r2, #95	; 0x5f
   1c690:	f47f af36 	bne.w	1c500 <d_expression_1+0x2a0>
   1c694:	3301      	adds	r3, #1
   1c696:	60e3      	str	r3, [r4, #12]
   1c698:	2145      	movs	r1, #69	; 0x45
   1c69a:	4620      	mov	r0, r4
   1c69c:	f000 f856 	bl	1c74c <d_exprlist>
   1c6a0:	4603      	mov	r3, r0
   1c6a2:	e6c9      	b.n	1c438 <d_expression_1+0x1d8>
   1c6a4:	3301      	adds	r3, #1
   1c6a6:	60e3      	str	r3, [r4, #12]
   1c6a8:	4620      	mov	r0, r4
   1c6aa:	9201      	str	r2, [sp, #4]
   1c6ac:	f7ff fd10 	bl	1c0d0 <d_template_args_1>
   1c6b0:	9a01      	ldr	r2, [sp, #4]
   1c6b2:	4603      	mov	r3, r0
   1c6b4:	2104      	movs	r1, #4
   1c6b6:	4620      	mov	r0, r4
   1c6b8:	f7fe f906 	bl	1a8c8 <d_make_comp>
   1c6bc:	4602      	mov	r2, r0
   1c6be:	e74c      	b.n	1c55a <d_expression_1+0x2fa>
   1c6c0:	781b      	ldrb	r3, [r3, #0]
   1c6c2:	2b73      	cmp	r3, #115	; 0x73
   1c6c4:	d00a      	beq.n	1c6dc <d_expression_1+0x47c>
   1c6c6:	3b63      	subs	r3, #99	; 0x63
   1c6c8:	b2db      	uxtb	r3, r3
   1c6ca:	2b0f      	cmp	r3, #15
   1c6cc:	f63f aeea 	bhi.w	1c4a4 <d_expression_1+0x244>
   1c6d0:	4a1d      	ldr	r2, [pc, #116]	; (1c748 <d_expression_1+0x4e8>)
   1c6d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1c6d6:	2b00      	cmp	r3, #0
   1c6d8:	f43f aee4 	beq.w	1c4a4 <d_expression_1+0x244>
   1c6dc:	4620      	mov	r0, r4
   1c6de:	f7fe fd45 	bl	1b16c <d_type>
   1c6e2:	4607      	mov	r7, r0
   1c6e4:	e6f1      	b.n	1c4ca <d_expression_1+0x26a>
   1c6e6:	2b70      	cmp	r3, #112	; 0x70
   1c6e8:	d105      	bne.n	1c6f6 <d_expression_1+0x496>
   1c6ea:	7873      	ldrb	r3, [r6, #1]
   1c6ec:	2b74      	cmp	r3, #116	; 0x74
   1c6ee:	d102      	bne.n	1c6f6 <d_expression_1+0x496>
   1c6f0:	78b3      	ldrb	r3, [r6, #2]
   1c6f2:	2b00      	cmp	r3, #0
   1c6f4:	d0a9      	beq.n	1c64a <d_expression_1+0x3ea>
   1c6f6:	4620      	mov	r0, r4
   1c6f8:	f7ff fdb2 	bl	1c260 <d_expression_1>
   1c6fc:	4602      	mov	r2, r0
   1c6fe:	e6f5      	b.n	1c4ec <d_expression_1+0x28c>
   1c700:	4620      	mov	r0, r4
   1c702:	f7ff fdad 	bl	1c260 <d_expression_1>
   1c706:	4607      	mov	r7, r0
   1c708:	e6df      	b.n	1c4ca <d_expression_1+0x26a>
   1c70a:	785b      	ldrb	r3, [r3, #1]
   1c70c:	2b73      	cmp	r3, #115	; 0x73
   1c70e:	d1a5      	bne.n	1c65c <d_expression_1+0x3fc>
   1c710:	e7f1      	b.n	1c6f6 <d_expression_1+0x496>
   1c712:	4620      	mov	r0, r4
   1c714:	f7ff f9fc 	bl	1bb10 <d_operator_name>
   1c718:	4607      	mov	r7, r0
   1c71a:	e6d6      	b.n	1c4ca <d_expression_1+0x26a>
   1c71c:	4620      	mov	r0, r4
   1c71e:	f7ff f9f7 	bl	1bb10 <d_operator_name>
   1c722:	e69e      	b.n	1c462 <d_expression_1+0x202>
   1c724:	785a      	ldrb	r2, [r3, #1]
   1c726:	2a69      	cmp	r2, #105	; 0x69
   1c728:	f47f ae24 	bne.w	1c374 <d_expression_1+0x114>
   1c72c:	3302      	adds	r3, #2
   1c72e:	60e3      	str	r3, [r4, #12]
   1c730:	2145      	movs	r1, #69	; 0x45
   1c732:	4620      	mov	r0, r4
   1c734:	f000 f80a 	bl	1c74c <d_exprlist>
   1c738:	4603      	mov	r3, r0
   1c73a:	e69e      	b.n	1c47a <d_expression_1+0x21a>
   1c73c:	3301      	adds	r3, #1
   1c73e:	60e3      	str	r3, [r4, #12]
   1c740:	2300      	movs	r3, #0
   1c742:	e69a      	b.n	1c47a <d_expression_1+0x21a>
   1c744:	00040201 	.word	0x00040201
   1c748:	200008c8 	.word	0x200008c8

0001c74c <d_exprlist>:
   1c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c750:	68c2      	ldr	r2, [r0, #12]
   1c752:	460e      	mov	r6, r1
   1c754:	7811      	ldrb	r1, [r2, #0]
   1c756:	b082      	sub	sp, #8
   1c758:	2300      	movs	r3, #0
   1c75a:	42b1      	cmp	r1, r6
   1c75c:	4604      	mov	r4, r0
   1c75e:	9301      	str	r3, [sp, #4]
   1c760:	d024      	beq.n	1c7ac <d_exprlist+0x60>
   1c762:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   1c766:	ad01      	add	r5, sp, #4
   1c768:	2701      	movs	r7, #1
   1c76a:	e009      	b.n	1c780 <d_exprlist+0x34>
   1c76c:	f7fe f8ac 	bl	1a8c8 <d_make_comp>
   1c770:	6028      	str	r0, [r5, #0]
   1c772:	f100 0510 	add.w	r5, r0, #16
   1c776:	b178      	cbz	r0, 1c798 <d_exprlist+0x4c>
   1c778:	68e3      	ldr	r3, [r4, #12]
   1c77a:	781a      	ldrb	r2, [r3, #0]
   1c77c:	42b2      	cmp	r2, r6
   1c77e:	d00f      	beq.n	1c7a0 <d_exprlist+0x54>
   1c780:	6327      	str	r7, [r4, #48]	; 0x30
   1c782:	4620      	mov	r0, r4
   1c784:	f7ff fd6c 	bl	1c260 <d_expression_1>
   1c788:	4602      	mov	r2, r0
   1c78a:	2300      	movs	r3, #0
   1c78c:	212e      	movs	r1, #46	; 0x2e
   1c78e:	4620      	mov	r0, r4
   1c790:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   1c794:	2a00      	cmp	r2, #0
   1c796:	d1e9      	bne.n	1c76c <d_exprlist+0x20>
   1c798:	2000      	movs	r0, #0
   1c79a:	b002      	add	sp, #8
   1c79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c7a0:	9801      	ldr	r0, [sp, #4]
   1c7a2:	3301      	adds	r3, #1
   1c7a4:	60e3      	str	r3, [r4, #12]
   1c7a6:	b002      	add	sp, #8
   1c7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c7ac:	3201      	adds	r2, #1
   1c7ae:	60c2      	str	r2, [r0, #12]
   1c7b0:	212e      	movs	r1, #46	; 0x2e
   1c7b2:	461a      	mov	r2, r3
   1c7b4:	b002      	add	sp, #8
   1c7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1c7ba:	f7fe b885 	b.w	1a8c8 <d_make_comp>
   1c7be:	bf00      	nop

0001c7c0 <d_cv_qualifiers>:
   1c7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c7c4:	460f      	mov	r7, r1
   1c7c6:	68c1      	ldr	r1, [r0, #12]
   1c7c8:	f1b2 0900 	subs.w	r9, r2, #0
   1c7cc:	b083      	sub	sp, #12
   1c7ce:	780a      	ldrb	r2, [r1, #0]
   1c7d0:	4604      	mov	r4, r0
   1c7d2:	bf15      	itete	ne
   1c7d4:	f04f 0a1e 	movne.w	sl, #30
   1c7d8:	f04f 0a1b 	moveq.w	sl, #27
   1c7dc:	f04f 081d 	movne.w	r8, #29
   1c7e0:	f04f 081a 	moveq.w	r8, #26
   1c7e4:	bf14      	ite	ne
   1c7e6:	261c      	movne	r6, #28
   1c7e8:	2619      	moveq	r6, #25
   1c7ea:	463d      	mov	r5, r7
   1c7ec:	f04f 0b01 	mov.w	fp, #1
   1c7f0:	e01b      	b.n	1c82a <d_cv_qualifiers+0x6a>
   1c7f2:	2a56      	cmp	r2, #86	; 0x56
   1c7f4:	d033      	beq.n	1c85e <d_cv_qualifiers+0x9e>
   1c7f6:	2a4b      	cmp	r2, #75	; 0x4b
   1c7f8:	d037      	beq.n	1c86a <d_cv_qualifiers+0xaa>
   1c7fa:	784b      	ldrb	r3, [r1, #1]
   1c7fc:	b353      	cbz	r3, 1c854 <d_cv_qualifiers+0x94>
   1c7fe:	1c8b      	adds	r3, r1, #2
   1c800:	60e3      	str	r3, [r4, #12]
   1c802:	784b      	ldrb	r3, [r1, #1]
   1c804:	2b78      	cmp	r3, #120	; 0x78
   1c806:	d04f      	beq.n	1c8a8 <d_cv_qualifiers+0xe8>
   1c808:	2b6f      	cmp	r3, #111	; 0x6f
   1c80a:	d134      	bne.n	1c876 <d_cv_qualifiers+0xb6>
   1c80c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c80e:	3309      	adds	r3, #9
   1c810:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c812:	2150      	movs	r1, #80	; 0x50
   1c814:	2300      	movs	r3, #0
   1c816:	2200      	movs	r2, #0
   1c818:	4620      	mov	r0, r4
   1c81a:	f7fe f855 	bl	1a8c8 <d_make_comp>
   1c81e:	6028      	str	r0, [r5, #0]
   1c820:	b1c0      	cbz	r0, 1c854 <d_cv_qualifiers+0x94>
   1c822:	68e1      	ldr	r1, [r4, #12]
   1c824:	780a      	ldrb	r2, [r1, #0]
   1c826:	f100 050c 	add.w	r5, r0, #12
   1c82a:	4608      	mov	r0, r1
   1c82c:	f7fe fa24 	bl	1ac78 <next_is_type_qual.isra.0>
   1c830:	2800      	cmp	r0, #0
   1c832:	d03f      	beq.n	1c8b4 <d_cv_qualifiers+0xf4>
   1c834:	1c4b      	adds	r3, r1, #1
   1c836:	2a72      	cmp	r2, #114	; 0x72
   1c838:	60e3      	str	r3, [r4, #12]
   1c83a:	d1da      	bne.n	1c7f2 <d_cv_qualifiers+0x32>
   1c83c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c83e:	3309      	adds	r3, #9
   1c840:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c842:	4631      	mov	r1, r6
   1c844:	2300      	movs	r3, #0
   1c846:	2200      	movs	r2, #0
   1c848:	4620      	mov	r0, r4
   1c84a:	f7fe f83d 	bl	1a8c8 <d_make_comp>
   1c84e:	6028      	str	r0, [r5, #0]
   1c850:	2800      	cmp	r0, #0
   1c852:	d1e6      	bne.n	1c822 <d_cv_qualifiers+0x62>
   1c854:	2500      	movs	r5, #0
   1c856:	4628      	mov	r0, r5
   1c858:	b003      	add	sp, #12
   1c85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c85e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c860:	3309      	adds	r3, #9
   1c862:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c864:	4641      	mov	r1, r8
   1c866:	2300      	movs	r3, #0
   1c868:	e7d5      	b.n	1c816 <d_cv_qualifiers+0x56>
   1c86a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c86c:	3306      	adds	r3, #6
   1c86e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c870:	4651      	mov	r1, sl
   1c872:	2300      	movs	r3, #0
   1c874:	e7cf      	b.n	1c816 <d_cv_qualifiers+0x56>
   1c876:	2b4f      	cmp	r3, #79	; 0x4f
   1c878:	d138      	bne.n	1c8ec <d_cv_qualifiers+0x12c>
   1c87a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c87c:	3309      	adds	r3, #9
   1c87e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c880:	4620      	mov	r0, r4
   1c882:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c884:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
   1c888:	9301      	str	r3, [sp, #4]
   1c88a:	f7ff fce9 	bl	1c260 <d_expression_1>
   1c88e:	9b01      	ldr	r3, [sp, #4]
   1c890:	6323      	str	r3, [r4, #48]	; 0x30
   1c892:	4603      	mov	r3, r0
   1c894:	2800      	cmp	r0, #0
   1c896:	d0dd      	beq.n	1c854 <d_cv_qualifiers+0x94>
   1c898:	68e2      	ldr	r2, [r4, #12]
   1c89a:	7811      	ldrb	r1, [r2, #0]
   1c89c:	2945      	cmp	r1, #69	; 0x45
   1c89e:	d1d9      	bne.n	1c854 <d_cv_qualifiers+0x94>
   1c8a0:	3201      	adds	r2, #1
   1c8a2:	60e2      	str	r2, [r4, #12]
   1c8a4:	2150      	movs	r1, #80	; 0x50
   1c8a6:	e7b6      	b.n	1c816 <d_cv_qualifiers+0x56>
   1c8a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c8aa:	3311      	adds	r3, #17
   1c8ac:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c8ae:	214e      	movs	r1, #78	; 0x4e
   1c8b0:	2300      	movs	r3, #0
   1c8b2:	e7b0      	b.n	1c816 <d_cv_qualifiers+0x56>
   1c8b4:	f1b9 0f00 	cmp.w	r9, #0
   1c8b8:	d1cd      	bne.n	1c856 <d_cv_qualifiers+0x96>
   1c8ba:	2a46      	cmp	r2, #70	; 0x46
   1c8bc:	d1cb      	bne.n	1c856 <d_cv_qualifiers+0x96>
   1c8be:	42bd      	cmp	r5, r7
   1c8c0:	d0c9      	beq.n	1c856 <d_cv_qualifiers+0x96>
   1c8c2:	201d      	movs	r0, #29
   1c8c4:	211e      	movs	r1, #30
   1c8c6:	221c      	movs	r2, #28
   1c8c8:	e004      	b.n	1c8d4 <d_cv_qualifiers+0x114>
   1c8ca:	2b19      	cmp	r3, #25
   1c8cc:	d00c      	beq.n	1c8e8 <d_cv_qualifiers+0x128>
   1c8ce:	370c      	adds	r7, #12
   1c8d0:	42bd      	cmp	r5, r7
   1c8d2:	d0c0      	beq.n	1c856 <d_cv_qualifiers+0x96>
   1c8d4:	683f      	ldr	r7, [r7, #0]
   1c8d6:	783b      	ldrb	r3, [r7, #0]
   1c8d8:	2b1a      	cmp	r3, #26
   1c8da:	d003      	beq.n	1c8e4 <d_cv_qualifiers+0x124>
   1c8dc:	2b1b      	cmp	r3, #27
   1c8de:	d1f4      	bne.n	1c8ca <d_cv_qualifiers+0x10a>
   1c8e0:	7039      	strb	r1, [r7, #0]
   1c8e2:	e7f4      	b.n	1c8ce <d_cv_qualifiers+0x10e>
   1c8e4:	7038      	strb	r0, [r7, #0]
   1c8e6:	e7f2      	b.n	1c8ce <d_cv_qualifiers+0x10e>
   1c8e8:	703a      	strb	r2, [r7, #0]
   1c8ea:	e7f0      	b.n	1c8ce <d_cv_qualifiers+0x10e>
   1c8ec:	2b77      	cmp	r3, #119	; 0x77
   1c8ee:	d1b1      	bne.n	1c854 <d_cv_qualifiers+0x94>
   1c8f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c8f2:	3306      	adds	r3, #6
   1c8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
   1c8f6:	4620      	mov	r0, r4
   1c8f8:	f7ff f870 	bl	1b9dc <d_parmlist>
   1c8fc:	4603      	mov	r3, r0
   1c8fe:	2800      	cmp	r0, #0
   1c900:	d0a8      	beq.n	1c854 <d_cv_qualifiers+0x94>
   1c902:	68e2      	ldr	r2, [r4, #12]
   1c904:	7811      	ldrb	r1, [r2, #0]
   1c906:	2945      	cmp	r1, #69	; 0x45
   1c908:	d1a4      	bne.n	1c854 <d_cv_qualifiers+0x94>
   1c90a:	3201      	adds	r2, #1
   1c90c:	60e2      	str	r2, [r4, #12]
   1c90e:	2151      	movs	r1, #81	; 0x51
   1c910:	e781      	b.n	1c816 <d_cv_qualifiers+0x56>
   1c912:	bf00      	nop

0001c914 <d_special_name>:
   1c914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c918:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1c91a:	68c3      	ldr	r3, [r0, #12]
   1c91c:	f101 0214 	add.w	r2, r1, #20
   1c920:	62c2      	str	r2, [r0, #44]	; 0x2c
   1c922:	781a      	ldrb	r2, [r3, #0]
   1c924:	2a54      	cmp	r2, #84	; 0x54
   1c926:	b082      	sub	sp, #8
   1c928:	4604      	mov	r4, r0
   1c92a:	d075      	beq.n	1ca18 <d_special_name+0x104>
   1c92c:	2a47      	cmp	r2, #71	; 0x47
   1c92e:	d128      	bne.n	1c982 <d_special_name+0x6e>
   1c930:	1c5a      	adds	r2, r3, #1
   1c932:	60c2      	str	r2, [r0, #12]
   1c934:	785a      	ldrb	r2, [r3, #1]
   1c936:	b322      	cbz	r2, 1c982 <d_special_name+0x6e>
   1c938:	1c9a      	adds	r2, r3, #2
   1c93a:	60c2      	str	r2, [r0, #12]
   1c93c:	785a      	ldrb	r2, [r3, #1]
   1c93e:	2a56      	cmp	r2, #86	; 0x56
   1c940:	d823      	bhi.n	1c98a <d_special_name+0x76>
   1c942:	2a40      	cmp	r2, #64	; 0x40
   1c944:	d91d      	bls.n	1c982 <d_special_name+0x6e>
   1c946:	3a41      	subs	r2, #65	; 0x41
   1c948:	2a15      	cmp	r2, #21
   1c94a:	d81a      	bhi.n	1c982 <d_special_name+0x6e>
   1c94c:	e8df f012 	tbh	[pc, r2, lsl #1]
   1c950:	0019011d 	.word	0x0019011d
   1c954:	00190019 	.word	0x00190019
   1c958:	00190019 	.word	0x00190019
   1c95c:	00190019 	.word	0x00190019
   1c960:	00190019 	.word	0x00190019
   1c964:	00190019 	.word	0x00190019
   1c968:	00190019 	.word	0x00190019
   1c96c:	00190019 	.word	0x00190019
   1c970:	00ff0019 	.word	0x00ff0019
   1c974:	00e90019 	.word	0x00e90019
   1c978:	00de0019 	.word	0x00de0019
   1c97c:	68e3      	ldr	r3, [r4, #12]
   1c97e:	3302      	adds	r3, #2
   1c980:	60e3      	str	r3, [r4, #12]
   1c982:	2000      	movs	r0, #0
   1c984:	b002      	add	sp, #8
   1c986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c98a:	2a72      	cmp	r2, #114	; 0x72
   1c98c:	d1f9      	bne.n	1c982 <d_special_name+0x6e>
   1c98e:	f7fe f813 	bl	1a9b8 <d_number>
   1c992:	2801      	cmp	r0, #1
   1c994:	ddf5      	ble.n	1c982 <d_special_name+0x6e>
   1c996:	68e3      	ldr	r3, [r4, #12]
   1c998:	781a      	ldrb	r2, [r3, #0]
   1c99a:	2a00      	cmp	r2, #0
   1c99c:	d0f1      	beq.n	1c982 <d_special_name+0x6e>
   1c99e:	1c5e      	adds	r6, r3, #1
   1c9a0:	60e6      	str	r6, [r4, #12]
   1c9a2:	781b      	ldrb	r3, [r3, #0]
   1c9a4:	2b5f      	cmp	r3, #95	; 0x5f
   1c9a6:	d1ec      	bne.n	1c982 <d_special_name+0x6e>
   1c9a8:	2200      	movs	r2, #0
   1c9aa:	1e45      	subs	r5, r0, #1
   1c9ac:	4617      	mov	r7, r2
   1c9ae:	f04f 0842 	mov.w	r8, #66	; 0x42
   1c9b2:	7833      	ldrb	r3, [r6, #0]
   1c9b4:	2b00      	cmp	r3, #0
   1c9b6:	d0e4      	beq.n	1c982 <d_special_name+0x6e>
   1c9b8:	2b24      	cmp	r3, #36	; 0x24
   1c9ba:	f040 819f 	bne.w	1ccfc <d_special_name+0x3e8>
   1c9be:	7873      	ldrb	r3, [r6, #1]
   1c9c0:	2b53      	cmp	r3, #83	; 0x53
   1c9c2:	f000 81bf 	beq.w	1cd44 <d_special_name+0x430>
   1c9c6:	2b5f      	cmp	r3, #95	; 0x5f
   1c9c8:	f000 81ba 	beq.w	1cd40 <d_special_name+0x42c>
   1c9cc:	2b24      	cmp	r3, #36	; 0x24
   1c9ce:	d1d8      	bne.n	1c982 <d_special_name+0x6e>
   1c9d0:	4619      	mov	r1, r3
   1c9d2:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1c9d6:	4298      	cmp	r0, r3
   1c9d8:	dad0      	bge.n	1c97c <d_special_name+0x68>
   1c9da:	6926      	ldr	r6, [r4, #16]
   1c9dc:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   1c9e0:	eb06 038c 	add.w	r3, r6, ip, lsl #2
   1c9e4:	3001      	adds	r0, #1
   1c9e6:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1c9ea:	6160      	str	r0, [r4, #20]
   1c9ec:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
   1c9f0:	68e6      	ldr	r6, [r4, #12]
   1c9f2:	60d9      	str	r1, [r3, #12]
   1c9f4:	3d02      	subs	r5, #2
   1c9f6:	3602      	adds	r6, #2
   1c9f8:	60e6      	str	r6, [r4, #12]
   1c9fa:	2a00      	cmp	r2, #0
   1c9fc:	f000 819e 	beq.w	1cd3c <d_special_name+0x428>
   1ca00:	2141      	movs	r1, #65	; 0x41
   1ca02:	4620      	mov	r0, r4
   1ca04:	f7fd ff60 	bl	1a8c8 <d_make_comp>
   1ca08:	4602      	mov	r2, r0
   1ca0a:	2800      	cmp	r0, #0
   1ca0c:	d0b9      	beq.n	1c982 <d_special_name+0x6e>
   1ca0e:	2d00      	cmp	r5, #0
   1ca10:	dccf      	bgt.n	1c9b2 <d_special_name+0x9e>
   1ca12:	2300      	movs	r3, #0
   1ca14:	2140      	movs	r1, #64	; 0x40
   1ca16:	e07e      	b.n	1cb16 <d_special_name+0x202>
   1ca18:	1c5a      	adds	r2, r3, #1
   1ca1a:	60c2      	str	r2, [r0, #12]
   1ca1c:	785a      	ldrb	r2, [r3, #1]
   1ca1e:	2a00      	cmp	r2, #0
   1ca20:	d0af      	beq.n	1c982 <d_special_name+0x6e>
   1ca22:	1c9a      	adds	r2, r3, #2
   1ca24:	60c2      	str	r2, [r0, #12]
   1ca26:	785b      	ldrb	r3, [r3, #1]
   1ca28:	3b41      	subs	r3, #65	; 0x41
   1ca2a:	2b35      	cmp	r3, #53	; 0x35
   1ca2c:	d8a9      	bhi.n	1c982 <d_special_name+0x6e>
   1ca2e:	a201      	add	r2, pc, #4	; (adr r2, 1ca34 <d_special_name+0x120>)
   1ca30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ca34:	0001cbfb 	.word	0x0001cbfb
   1ca38:	0001c983 	.word	0x0001c983
   1ca3c:	0001cbc7 	.word	0x0001cbc7
   1ca40:	0001c983 	.word	0x0001c983
   1ca44:	0001c983 	.word	0x0001c983
   1ca48:	0001cc07 	.word	0x0001cc07
   1ca4c:	0001c983 	.word	0x0001c983
   1ca50:	0001cc6b 	.word	0x0001cc6b
   1ca54:	0001cce5 	.word	0x0001cce5
   1ca58:	0001ccd9 	.word	0x0001ccd9
   1ca5c:	0001c983 	.word	0x0001c983
   1ca60:	0001c983 	.word	0x0001c983
   1ca64:	0001c983 	.word	0x0001c983
   1ca68:	0001c983 	.word	0x0001c983
   1ca6c:	0001c983 	.word	0x0001c983
   1ca70:	0001c983 	.word	0x0001c983
   1ca74:	0001c983 	.word	0x0001c983
   1ca78:	0001c983 	.word	0x0001c983
   1ca7c:	0001ccf1 	.word	0x0001ccf1
   1ca80:	0001cc77 	.word	0x0001cc77
   1ca84:	0001c983 	.word	0x0001c983
   1ca88:	0001cc87 	.word	0x0001cc87
   1ca8c:	0001cc97 	.word	0x0001cc97
   1ca90:	0001c983 	.word	0x0001c983
   1ca94:	0001c983 	.word	0x0001c983
   1ca98:	0001c983 	.word	0x0001c983
   1ca9c:	0001c983 	.word	0x0001c983
   1caa0:	0001c983 	.word	0x0001c983
   1caa4:	0001c983 	.word	0x0001c983
   1caa8:	0001c983 	.word	0x0001c983
   1caac:	0001c983 	.word	0x0001c983
   1cab0:	0001c983 	.word	0x0001c983
   1cab4:	0001c983 	.word	0x0001c983
   1cab8:	0001c983 	.word	0x0001c983
   1cabc:	0001cca3 	.word	0x0001cca3
   1cac0:	0001c983 	.word	0x0001c983
   1cac4:	0001c983 	.word	0x0001c983
   1cac8:	0001c983 	.word	0x0001c983
   1cacc:	0001c983 	.word	0x0001c983
   1cad0:	0001cc13 	.word	0x0001cc13
   1cad4:	0001c983 	.word	0x0001c983
   1cad8:	0001c983 	.word	0x0001c983
   1cadc:	0001c983 	.word	0x0001c983
   1cae0:	0001c983 	.word	0x0001c983
   1cae4:	0001c983 	.word	0x0001c983
   1cae8:	0001c983 	.word	0x0001c983
   1caec:	0001c983 	.word	0x0001c983
   1caf0:	0001c983 	.word	0x0001c983
   1caf4:	0001c983 	.word	0x0001c983
   1caf8:	0001c983 	.word	0x0001c983
   1cafc:	0001c983 	.word	0x0001c983
   1cb00:	0001c983 	.word	0x0001c983
   1cb04:	0001c983 	.word	0x0001c983
   1cb08:	0001cc3f 	.word	0x0001cc3f
   1cb0c:	f000 f93c 	bl	1cd88 <d_name>
   1cb10:	2300      	movs	r3, #0
   1cb12:	4602      	mov	r2, r0
   1cb14:	2113      	movs	r1, #19
   1cb16:	4620      	mov	r0, r4
   1cb18:	b002      	add	sp, #8
   1cb1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cb1e:	f7fd bed3 	b.w	1a8c8 <d_make_comp>
   1cb22:	789a      	ldrb	r2, [r3, #2]
   1cb24:	2a00      	cmp	r2, #0
   1cb26:	f000 810f 	beq.w	1cd48 <d_special_name+0x434>
   1cb2a:	1cda      	adds	r2, r3, #3
   1cb2c:	60c2      	str	r2, [r0, #12]
   1cb2e:	789a      	ldrb	r2, [r3, #2]
   1cb30:	78db      	ldrb	r3, [r3, #3]
   1cb32:	2a6e      	cmp	r2, #110	; 0x6e
   1cb34:	d03a      	beq.n	1cbac <d_special_name+0x298>
   1cb36:	2b47      	cmp	r3, #71	; 0x47
   1cb38:	d002      	beq.n	1cb40 <d_special_name+0x22c>
   1cb3a:	2b54      	cmp	r3, #84	; 0x54
   1cb3c:	f040 8104 	bne.w	1cd48 <d_special_name+0x434>
   1cb40:	4620      	mov	r0, r4
   1cb42:	f7ff fee7 	bl	1c914 <d_special_name>
   1cb46:	4602      	mov	r2, r0
   1cb48:	2300      	movs	r3, #0
   1cb4a:	214a      	movs	r1, #74	; 0x4a
   1cb4c:	e7e3      	b.n	1cb16 <d_special_name+0x202>
   1cb4e:	f000 f91b 	bl	1cd88 <d_name>
   1cb52:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
   1cb56:	4299      	cmp	r1, r3
   1cb58:	4602      	mov	r2, r0
   1cb5a:	f280 80ff 	bge.w	1cd5c <d_special_name+0x448>
   1cb5e:	9001      	str	r0, [sp, #4]
   1cb60:	6920      	ldr	r0, [r4, #16]
   1cb62:	eb01 0681 	add.w	r6, r1, r1, lsl #2
   1cb66:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1cb6a:	2300      	movs	r3, #0
   1cb6c:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1cb70:	3101      	adds	r1, #1
   1cb72:	2343      	movs	r3, #67	; 0x43
   1cb74:	6161      	str	r1, [r4, #20]
   1cb76:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
   1cb7a:	4620      	mov	r0, r4
   1cb7c:	f7fd ff1c 	bl	1a9b8 <d_number>
   1cb80:	9a01      	ldr	r2, [sp, #4]
   1cb82:	60e8      	str	r0, [r5, #12]
   1cb84:	462b      	mov	r3, r5
   1cb86:	2116      	movs	r1, #22
   1cb88:	e7c5      	b.n	1cb16 <d_special_name+0x202>
   1cb8a:	789b      	ldrb	r3, [r3, #2]
   1cb8c:	2b47      	cmp	r3, #71	; 0x47
   1cb8e:	d001      	beq.n	1cb94 <d_special_name+0x280>
   1cb90:	2b54      	cmp	r3, #84	; 0x54
   1cb92:	d106      	bne.n	1cba2 <d_special_name+0x28e>
   1cb94:	4620      	mov	r0, r4
   1cb96:	f7ff febd 	bl	1c914 <d_special_name>
   1cb9a:	4602      	mov	r2, r0
   1cb9c:	2300      	movs	r3, #0
   1cb9e:	2117      	movs	r1, #23
   1cba0:	e7b9      	b.n	1cb16 <d_special_name+0x202>
   1cba2:	2100      	movs	r1, #0
   1cba4:	f000 fa3e 	bl	1d024 <d_encoding.part.0>
   1cba8:	4602      	mov	r2, r0
   1cbaa:	e7f7      	b.n	1cb9c <d_special_name+0x288>
   1cbac:	2b47      	cmp	r3, #71	; 0x47
   1cbae:	f000 80e1 	beq.w	1cd74 <d_special_name+0x460>
   1cbb2:	2b54      	cmp	r3, #84	; 0x54
   1cbb4:	f000 80de 	beq.w	1cd74 <d_special_name+0x460>
   1cbb8:	2100      	movs	r1, #0
   1cbba:	f000 fa33 	bl	1d024 <d_encoding.part.0>
   1cbbe:	4602      	mov	r2, r0
   1cbc0:	2300      	movs	r3, #0
   1cbc2:	214b      	movs	r1, #75	; 0x4b
   1cbc4:	e7a7      	b.n	1cb16 <d_special_name+0x202>
   1cbc6:	f7fe fad1 	bl	1b16c <d_type>
   1cbca:	4605      	mov	r5, r0
   1cbcc:	4620      	mov	r0, r4
   1cbce:	f7fd fef3 	bl	1a9b8 <d_number>
   1cbd2:	2800      	cmp	r0, #0
   1cbd4:	f6ff aed5 	blt.w	1c982 <d_special_name+0x6e>
   1cbd8:	68e3      	ldr	r3, [r4, #12]
   1cbda:	781a      	ldrb	r2, [r3, #0]
   1cbdc:	2a5f      	cmp	r2, #95	; 0x5f
   1cbde:	f47f aed0 	bne.w	1c982 <d_special_name+0x6e>
   1cbe2:	3301      	adds	r3, #1
   1cbe4:	60e3      	str	r3, [r4, #12]
   1cbe6:	4620      	mov	r0, r4
   1cbe8:	f7fe fac0 	bl	1b16c <d_type>
   1cbec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1cbee:	3105      	adds	r1, #5
   1cbf0:	62e1      	str	r1, [r4, #44]	; 0x2c
   1cbf2:	4602      	mov	r2, r0
   1cbf4:	462b      	mov	r3, r5
   1cbf6:	210b      	movs	r1, #11
   1cbf8:	e78d      	b.n	1cb16 <d_special_name+0x202>
   1cbfa:	f7ff fa3d 	bl	1c078 <d_template_arg>
   1cbfe:	2300      	movs	r3, #0
   1cc00:	4602      	mov	r2, r0
   1cc02:	2130      	movs	r1, #48	; 0x30
   1cc04:	e787      	b.n	1cb16 <d_special_name+0x202>
   1cc06:	f7fe fab1 	bl	1b16c <d_type>
   1cc0a:	2300      	movs	r3, #0
   1cc0c:	4602      	mov	r2, r0
   1cc0e:	210e      	movs	r1, #14
   1cc10:	e781      	b.n	1cb16 <d_special_name+0x202>
   1cc12:	2168      	movs	r1, #104	; 0x68
   1cc14:	f7fd ff0a 	bl	1aa2c <d_call_offset>
   1cc18:	2800      	cmp	r0, #0
   1cc1a:	f43f aeb2 	beq.w	1c982 <d_special_name+0x6e>
   1cc1e:	68e3      	ldr	r3, [r4, #12]
   1cc20:	781b      	ldrb	r3, [r3, #0]
   1cc22:	2b47      	cmp	r3, #71	; 0x47
   1cc24:	f000 80a1 	beq.w	1cd6a <d_special_name+0x456>
   1cc28:	2b54      	cmp	r3, #84	; 0x54
   1cc2a:	f000 809e 	beq.w	1cd6a <d_special_name+0x456>
   1cc2e:	2100      	movs	r1, #0
   1cc30:	4620      	mov	r0, r4
   1cc32:	f000 f9f7 	bl	1d024 <d_encoding.part.0>
   1cc36:	4602      	mov	r2, r0
   1cc38:	2300      	movs	r3, #0
   1cc3a:	210f      	movs	r1, #15
   1cc3c:	e76b      	b.n	1cb16 <d_special_name+0x202>
   1cc3e:	2176      	movs	r1, #118	; 0x76
   1cc40:	f7fd fef4 	bl	1aa2c <d_call_offset>
   1cc44:	2800      	cmp	r0, #0
   1cc46:	f43f ae9c 	beq.w	1c982 <d_special_name+0x6e>
   1cc4a:	68e3      	ldr	r3, [r4, #12]
   1cc4c:	781b      	ldrb	r3, [r3, #0]
   1cc4e:	2b47      	cmp	r3, #71	; 0x47
   1cc50:	f000 8086 	beq.w	1cd60 <d_special_name+0x44c>
   1cc54:	2b54      	cmp	r3, #84	; 0x54
   1cc56:	f000 8083 	beq.w	1cd60 <d_special_name+0x44c>
   1cc5a:	2100      	movs	r1, #0
   1cc5c:	4620      	mov	r0, r4
   1cc5e:	f000 f9e1 	bl	1d024 <d_encoding.part.0>
   1cc62:	4602      	mov	r2, r0
   1cc64:	2300      	movs	r3, #0
   1cc66:	2110      	movs	r1, #16
   1cc68:	e755      	b.n	1cb16 <d_special_name+0x202>
   1cc6a:	f000 f88d 	bl	1cd88 <d_name>
   1cc6e:	2300      	movs	r3, #0
   1cc70:	4602      	mov	r2, r0
   1cc72:	2114      	movs	r1, #20
   1cc74:	e74f      	b.n	1cb16 <d_special_name+0x202>
   1cc76:	310a      	adds	r1, #10
   1cc78:	62c1      	str	r1, [r0, #44]	; 0x2c
   1cc7a:	f7fe fa77 	bl	1b16c <d_type>
   1cc7e:	2300      	movs	r3, #0
   1cc80:	4602      	mov	r2, r0
   1cc82:	210a      	movs	r1, #10
   1cc84:	e747      	b.n	1cb16 <d_special_name+0x202>
   1cc86:	310f      	adds	r1, #15
   1cc88:	62c1      	str	r1, [r0, #44]	; 0x2c
   1cc8a:	f7fe fa6f 	bl	1b16c <d_type>
   1cc8e:	2300      	movs	r3, #0
   1cc90:	4602      	mov	r2, r0
   1cc92:	2109      	movs	r1, #9
   1cc94:	e73f      	b.n	1cb16 <d_special_name+0x202>
   1cc96:	f000 f877 	bl	1cd88 <d_name>
   1cc9a:	2300      	movs	r3, #0
   1cc9c:	4602      	mov	r2, r0
   1cc9e:	2115      	movs	r1, #21
   1cca0:	e739      	b.n	1cb16 <d_special_name+0x202>
   1cca2:	2100      	movs	r1, #0
   1cca4:	f7fd fec2 	bl	1aa2c <d_call_offset>
   1cca8:	2800      	cmp	r0, #0
   1ccaa:	f43f ae6a 	beq.w	1c982 <d_special_name+0x6e>
   1ccae:	2100      	movs	r1, #0
   1ccb0:	4620      	mov	r0, r4
   1ccb2:	f7fd febb 	bl	1aa2c <d_call_offset>
   1ccb6:	2800      	cmp	r0, #0
   1ccb8:	f43f ae63 	beq.w	1c982 <d_special_name+0x6e>
   1ccbc:	68e3      	ldr	r3, [r4, #12]
   1ccbe:	781b      	ldrb	r3, [r3, #0]
   1ccc0:	2b47      	cmp	r3, #71	; 0x47
   1ccc2:	d05c      	beq.n	1cd7e <d_special_name+0x46a>
   1ccc4:	2b54      	cmp	r3, #84	; 0x54
   1ccc6:	d05a      	beq.n	1cd7e <d_special_name+0x46a>
   1ccc8:	2100      	movs	r1, #0
   1ccca:	4620      	mov	r0, r4
   1cccc:	f000 f9aa 	bl	1d024 <d_encoding.part.0>
   1ccd0:	4602      	mov	r2, r0
   1ccd2:	2300      	movs	r3, #0
   1ccd4:	2111      	movs	r1, #17
   1ccd6:	e71e      	b.n	1cb16 <d_special_name+0x202>
   1ccd8:	f7fe fa48 	bl	1b16c <d_type>
   1ccdc:	2300      	movs	r3, #0
   1ccde:	4602      	mov	r2, r0
   1cce0:	2112      	movs	r1, #18
   1cce2:	e718      	b.n	1cb16 <d_special_name+0x202>
   1cce4:	f7fe fa42 	bl	1b16c <d_type>
   1cce8:	2300      	movs	r3, #0
   1ccea:	4602      	mov	r2, r0
   1ccec:	210c      	movs	r1, #12
   1ccee:	e712      	b.n	1cb16 <d_special_name+0x202>
   1ccf0:	f7fe fa3c 	bl	1b16c <d_type>
   1ccf4:	2300      	movs	r3, #0
   1ccf6:	4602      	mov	r2, r0
   1ccf8:	210d      	movs	r1, #13
   1ccfa:	e70c      	b.n	1cb16 <d_special_name+0x202>
   1ccfc:	46b4      	mov	ip, r6
   1ccfe:	2100      	movs	r1, #0
   1cd00:	e004      	b.n	1cd0c <d_special_name+0x3f8>
   1cd02:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   1cd06:	b123      	cbz	r3, 1cd12 <d_special_name+0x3fe>
   1cd08:	2b24      	cmp	r3, #36	; 0x24
   1cd0a:	d002      	beq.n	1cd12 <d_special_name+0x3fe>
   1cd0c:	3101      	adds	r1, #1
   1cd0e:	42a9      	cmp	r1, r5
   1cd10:	dbf7      	blt.n	1cd02 <d_special_name+0x3ee>
   1cd12:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
   1cd16:	4283      	cmp	r3, r0
   1cd18:	da1c      	bge.n	1cd54 <d_special_name+0x440>
   1cd1a:	6920      	ldr	r0, [r4, #16]
   1cd1c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1cd20:	3301      	adds	r3, #1
   1cd22:	6163      	str	r3, [r4, #20]
   1cd24:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1cd28:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1cd2c:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
   1cd30:	e9c3 6103 	strd	r6, r1, [r3, #12]
   1cd34:	68e6      	ldr	r6, [r4, #12]
   1cd36:	1a6d      	subs	r5, r5, r1
   1cd38:	440e      	add	r6, r1
   1cd3a:	e65d      	b.n	1c9f8 <d_special_name+0xe4>
   1cd3c:	461a      	mov	r2, r3
   1cd3e:	e666      	b.n	1ca0e <d_special_name+0xfa>
   1cd40:	212e      	movs	r1, #46	; 0x2e
   1cd42:	e646      	b.n	1c9d2 <d_special_name+0xbe>
   1cd44:	212f      	movs	r1, #47	; 0x2f
   1cd46:	e644      	b.n	1c9d2 <d_special_name+0xbe>
   1cd48:	2100      	movs	r1, #0
   1cd4a:	4620      	mov	r0, r4
   1cd4c:	f000 f96a 	bl	1d024 <d_encoding.part.0>
   1cd50:	4602      	mov	r2, r0
   1cd52:	e6f9      	b.n	1cb48 <d_special_name+0x234>
   1cd54:	68e3      	ldr	r3, [r4, #12]
   1cd56:	440b      	add	r3, r1
   1cd58:	60e3      	str	r3, [r4, #12]
   1cd5a:	e612      	b.n	1c982 <d_special_name+0x6e>
   1cd5c:	2500      	movs	r5, #0
   1cd5e:	e711      	b.n	1cb84 <d_special_name+0x270>
   1cd60:	4620      	mov	r0, r4
   1cd62:	f7ff fdd7 	bl	1c914 <d_special_name>
   1cd66:	4602      	mov	r2, r0
   1cd68:	e77c      	b.n	1cc64 <d_special_name+0x350>
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	f7ff fdd2 	bl	1c914 <d_special_name>
   1cd70:	4602      	mov	r2, r0
   1cd72:	e761      	b.n	1cc38 <d_special_name+0x324>
   1cd74:	4620      	mov	r0, r4
   1cd76:	f7ff fdcd 	bl	1c914 <d_special_name>
   1cd7a:	4602      	mov	r2, r0
   1cd7c:	e720      	b.n	1cbc0 <d_special_name+0x2ac>
   1cd7e:	4620      	mov	r0, r4
   1cd80:	f7ff fdc8 	bl	1c914 <d_special_name>
   1cd84:	4602      	mov	r2, r0
   1cd86:	e7a4      	b.n	1ccd2 <d_special_name+0x3be>

0001cd88 <d_name>:
   1cd88:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cd8a:	68c2      	ldr	r2, [r0, #12]
   1cd8c:	7813      	ldrb	r3, [r2, #0]
   1cd8e:	3b4e      	subs	r3, #78	; 0x4e
   1cd90:	b083      	sub	sp, #12
   1cd92:	4604      	mov	r4, r0
   1cd94:	2b0c      	cmp	r3, #12
   1cd96:	d808      	bhi.n	1cdaa <d_name+0x22>
   1cd98:	e8df f003 	tbb	[pc, r3]
   1cd9c:	07070731 	.word	0x07070731
   1cda0:	12071707 	.word	0x12071707
   1cda4:	07070707 	.word	0x07070707
   1cda8:	55          	.byte	0x55
   1cda9:	00          	.byte	0x00
   1cdaa:	f7fe ff35 	bl	1bc18 <d_unqualified_name>
   1cdae:	68e3      	ldr	r3, [r4, #12]
   1cdb0:	781a      	ldrb	r2, [r3, #0]
   1cdb2:	2a49      	cmp	r2, #73	; 0x49
   1cdb4:	4605      	mov	r5, r0
   1cdb6:	f000 80d2 	beq.w	1cf5e <d_name+0x1d6>
   1cdba:	4628      	mov	r0, r5
   1cdbc:	b003      	add	sp, #12
   1cdbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cdc0:	b003      	add	sp, #12
   1cdc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1cdc6:	f7fe bf27 	b.w	1bc18 <d_unqualified_name>
   1cdca:	7853      	ldrb	r3, [r2, #1]
   1cdcc:	2b74      	cmp	r3, #116	; 0x74
   1cdce:	f000 808e 	beq.w	1ceee <d_name+0x166>
   1cdd2:	2100      	movs	r1, #0
   1cdd4:	f7fe f900 	bl	1afd8 <d_substitution>
   1cdd8:	68e3      	ldr	r3, [r4, #12]
   1cdda:	781a      	ldrb	r2, [r3, #0]
   1cddc:	2a49      	cmp	r2, #73	; 0x49
   1cdde:	4605      	mov	r5, r0
   1cde0:	d1eb      	bne.n	1cdba <d_name+0x32>
   1cde2:	3301      	adds	r3, #1
   1cde4:	60e3      	str	r3, [r4, #12]
   1cde6:	4620      	mov	r0, r4
   1cde8:	f7ff f972 	bl	1c0d0 <d_template_args_1>
   1cdec:	4603      	mov	r3, r0
   1cdee:	462a      	mov	r2, r5
   1cdf0:	2104      	movs	r1, #4
   1cdf2:	4620      	mov	r0, r4
   1cdf4:	b003      	add	sp, #12
   1cdf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1cdfa:	f7fd bd65 	b.w	1a8c8 <d_make_comp>
   1cdfe:	3201      	adds	r2, #1
   1ce00:	60c2      	str	r2, [r0, #12]
   1ce02:	a901      	add	r1, sp, #4
   1ce04:	2201      	movs	r2, #1
   1ce06:	f7ff fcdb 	bl	1c7c0 <d_cv_qualifiers>
   1ce0a:	4605      	mov	r5, r0
   1ce0c:	2800      	cmp	r0, #0
   1ce0e:	f000 80b7 	beq.w	1cf80 <d_name+0x1f8>
   1ce12:	2100      	movs	r1, #0
   1ce14:	4620      	mov	r0, r4
   1ce16:	f7fd fe2d 	bl	1aa74 <d_ref_qualifier>
   1ce1a:	2101      	movs	r1, #1
   1ce1c:	4606      	mov	r6, r0
   1ce1e:	4620      	mov	r0, r4
   1ce20:	f7ff f988 	bl	1c134 <d_prefix>
   1ce24:	6028      	str	r0, [r5, #0]
   1ce26:	2800      	cmp	r0, #0
   1ce28:	f000 80aa 	beq.w	1cf80 <d_name+0x1f8>
   1ce2c:	b116      	cbz	r6, 1ce34 <d_name+0xac>
   1ce2e:	9b01      	ldr	r3, [sp, #4]
   1ce30:	60f3      	str	r3, [r6, #12]
   1ce32:	9601      	str	r6, [sp, #4]
   1ce34:	68e3      	ldr	r3, [r4, #12]
   1ce36:	781a      	ldrb	r2, [r3, #0]
   1ce38:	2a45      	cmp	r2, #69	; 0x45
   1ce3a:	f040 80a1 	bne.w	1cf80 <d_name+0x1f8>
   1ce3e:	3301      	adds	r3, #1
   1ce40:	9d01      	ldr	r5, [sp, #4]
   1ce42:	60e3      	str	r3, [r4, #12]
   1ce44:	e7b9      	b.n	1cdba <d_name+0x32>
   1ce46:	1c53      	adds	r3, r2, #1
   1ce48:	60c3      	str	r3, [r0, #12]
   1ce4a:	7853      	ldrb	r3, [r2, #1]
   1ce4c:	2b47      	cmp	r3, #71	; 0x47
   1ce4e:	d002      	beq.n	1ce56 <d_name+0xce>
   1ce50:	2b54      	cmp	r3, #84	; 0x54
   1ce52:	f040 8099 	bne.w	1cf88 <d_name+0x200>
   1ce56:	4620      	mov	r0, r4
   1ce58:	f7ff fd5c 	bl	1c914 <d_special_name>
   1ce5c:	4605      	mov	r5, r0
   1ce5e:	2d00      	cmp	r5, #0
   1ce60:	f000 808e 	beq.w	1cf80 <d_name+0x1f8>
   1ce64:	68e3      	ldr	r3, [r4, #12]
   1ce66:	781a      	ldrb	r2, [r3, #0]
   1ce68:	2a45      	cmp	r2, #69	; 0x45
   1ce6a:	f040 8089 	bne.w	1cf80 <d_name+0x1f8>
   1ce6e:	1c5a      	adds	r2, r3, #1
   1ce70:	60e2      	str	r2, [r4, #12]
   1ce72:	785a      	ldrb	r2, [r3, #1]
   1ce74:	2a73      	cmp	r2, #115	; 0x73
   1ce76:	f000 80ad 	beq.w	1cfd4 <d_name+0x24c>
   1ce7a:	2a64      	cmp	r2, #100	; 0x64
   1ce7c:	f000 8089 	beq.w	1cf92 <d_name+0x20a>
   1ce80:	4620      	mov	r0, r4
   1ce82:	f7ff ff81 	bl	1cd88 <d_name>
   1ce86:	4603      	mov	r3, r0
   1ce88:	b328      	cbz	r0, 1ced6 <d_name+0x14e>
   1ce8a:	7802      	ldrb	r2, [r0, #0]
   1ce8c:	2a47      	cmp	r2, #71	; 0x47
   1ce8e:	d022      	beq.n	1ced6 <d_name+0x14e>
   1ce90:	2a49      	cmp	r2, #73	; 0x49
   1ce92:	d020      	beq.n	1ced6 <d_name+0x14e>
   1ce94:	461f      	mov	r7, r3
   1ce96:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ce9a:	4620      	mov	r0, r4
   1ce9c:	f7fd fe7e 	bl	1ab9c <d_discriminator>
   1cea0:	2800      	cmp	r0, #0
   1cea2:	d06d      	beq.n	1cf80 <d_name+0x1f8>
   1cea4:	1c73      	adds	r3, r6, #1
   1cea6:	bf08      	it	eq
   1cea8:	463b      	moveq	r3, r7
   1ceaa:	d014      	beq.n	1ced6 <d_name+0x14e>
   1ceac:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1ceb0:	429a      	cmp	r2, r3
   1ceb2:	f280 80b0 	bge.w	1d016 <d_name+0x28e>
   1ceb6:	6921      	ldr	r1, [r4, #16]
   1ceb8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1cebc:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   1cec0:	3201      	adds	r2, #1
   1cec2:	f04f 0c00 	mov.w	ip, #0
   1cec6:	e9c3 cc01 	strd	ip, ip, [r3, #4]
   1ceca:	6162      	str	r2, [r4, #20]
   1cecc:	2248      	movs	r2, #72	; 0x48
   1cece:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
   1ced2:	e9c3 7603 	strd	r7, r6, [r3, #12]
   1ced6:	782a      	ldrb	r2, [r5, #0]
   1ced8:	2a03      	cmp	r2, #3
   1ceda:	d105      	bne.n	1cee8 <d_name+0x160>
   1cedc:	692a      	ldr	r2, [r5, #16]
   1cede:	7811      	ldrb	r1, [r2, #0]
   1cee0:	2929      	cmp	r1, #41	; 0x29
   1cee2:	bf04      	itt	eq
   1cee4:	2100      	moveq	r1, #0
   1cee6:	60d1      	streq	r1, [r2, #12]
   1cee8:	462a      	mov	r2, r5
   1ceea:	2102      	movs	r1, #2
   1ceec:	e781      	b.n	1cdf2 <d_name+0x6a>
   1ceee:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
   1cef2:	3202      	adds	r2, #2
   1cef4:	428b      	cmp	r3, r1
   1cef6:	60c2      	str	r2, [r0, #12]
   1cef8:	f280 8088 	bge.w	1d00c <d_name+0x284>
   1cefc:	6902      	ldr	r2, [r0, #16]
   1cefe:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1cf02:	00a9      	lsls	r1, r5, #2
   1cf04:	3301      	adds	r3, #1
   1cf06:	6143      	str	r3, [r0, #20]
   1cf08:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1cf0c:	2300      	movs	r3, #0
   1cf0e:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1cf12:	5453      	strb	r3, [r2, r1]
   1cf14:	4a41      	ldr	r2, [pc, #260]	; (1d01c <d_name+0x294>)
   1cf16:	2303      	movs	r3, #3
   1cf18:	e9c5 2303 	strd	r2, r3, [r5, #12]
   1cf1c:	4620      	mov	r0, r4
   1cf1e:	f7fe fe7b 	bl	1bc18 <d_unqualified_name>
   1cf22:	462a      	mov	r2, r5
   1cf24:	4603      	mov	r3, r0
   1cf26:	2101      	movs	r1, #1
   1cf28:	4620      	mov	r0, r4
   1cf2a:	f7fd fccd 	bl	1a8c8 <d_make_comp>
   1cf2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1cf30:	68e3      	ldr	r3, [r4, #12]
   1cf32:	3203      	adds	r2, #3
   1cf34:	62e2      	str	r2, [r4, #44]	; 0x2c
   1cf36:	781a      	ldrb	r2, [r3, #0]
   1cf38:	2a49      	cmp	r2, #73	; 0x49
   1cf3a:	4605      	mov	r5, r0
   1cf3c:	f47f af3d 	bne.w	1cdba <d_name+0x32>
   1cf40:	b1f0      	cbz	r0, 1cf80 <d_name+0x1f8>
   1cf42:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1cf46:	428a      	cmp	r2, r1
   1cf48:	da1a      	bge.n	1cf80 <d_name+0x1f8>
   1cf4a:	69e1      	ldr	r1, [r4, #28]
   1cf4c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1cf50:	3201      	adds	r2, #1
   1cf52:	6222      	str	r2, [r4, #32]
   1cf54:	781a      	ldrb	r2, [r3, #0]
   1cf56:	3a49      	subs	r2, #73	; 0x49
   1cf58:	2a01      	cmp	r2, #1
   1cf5a:	d80f      	bhi.n	1cf7c <d_name+0x1f4>
   1cf5c:	e741      	b.n	1cde2 <d_name+0x5a>
   1cf5e:	b178      	cbz	r0, 1cf80 <d_name+0x1f8>
   1cf60:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1cf64:	428a      	cmp	r2, r1
   1cf66:	da0b      	bge.n	1cf80 <d_name+0x1f8>
   1cf68:	69e1      	ldr	r1, [r4, #28]
   1cf6a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1cf6e:	3201      	adds	r2, #1
   1cf70:	6222      	str	r2, [r4, #32]
   1cf72:	781a      	ldrb	r2, [r3, #0]
   1cf74:	3a49      	subs	r2, #73	; 0x49
   1cf76:	2a01      	cmp	r2, #1
   1cf78:	f67f af33 	bls.w	1cde2 <d_name+0x5a>
   1cf7c:	2300      	movs	r3, #0
   1cf7e:	e736      	b.n	1cdee <d_name+0x66>
   1cf80:	2500      	movs	r5, #0
   1cf82:	4628      	mov	r0, r5
   1cf84:	b003      	add	sp, #12
   1cf86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1cf88:	2100      	movs	r1, #0
   1cf8a:	f000 f84b 	bl	1d024 <d_encoding.part.0>
   1cf8e:	4605      	mov	r5, r0
   1cf90:	e765      	b.n	1ce5e <d_name+0xd6>
   1cf92:	1c9a      	adds	r2, r3, #2
   1cf94:	60e2      	str	r2, [r4, #12]
   1cf96:	789a      	ldrb	r2, [r3, #2]
   1cf98:	2a5f      	cmp	r2, #95	; 0x5f
   1cf9a:	d039      	beq.n	1d010 <d_name+0x288>
   1cf9c:	2a6e      	cmp	r2, #110	; 0x6e
   1cf9e:	d0ef      	beq.n	1cf80 <d_name+0x1f8>
   1cfa0:	4620      	mov	r0, r4
   1cfa2:	f7fd fd09 	bl	1a9b8 <d_number>
   1cfa6:	1c46      	adds	r6, r0, #1
   1cfa8:	d4ea      	bmi.n	1cf80 <d_name+0x1f8>
   1cfaa:	68e3      	ldr	r3, [r4, #12]
   1cfac:	781a      	ldrb	r2, [r3, #0]
   1cfae:	2a5f      	cmp	r2, #95	; 0x5f
   1cfb0:	d1e6      	bne.n	1cf80 <d_name+0x1f8>
   1cfb2:	3301      	adds	r3, #1
   1cfb4:	60e3      	str	r3, [r4, #12]
   1cfb6:	4620      	mov	r0, r4
   1cfb8:	f7ff fee6 	bl	1cd88 <d_name>
   1cfbc:	4607      	mov	r7, r0
   1cfbe:	2800      	cmp	r0, #0
   1cfc0:	f43f af74 	beq.w	1ceac <d_name+0x124>
   1cfc4:	783b      	ldrb	r3, [r7, #0]
   1cfc6:	2b47      	cmp	r3, #71	; 0x47
   1cfc8:	f43f af70 	beq.w	1ceac <d_name+0x124>
   1cfcc:	2b49      	cmp	r3, #73	; 0x49
   1cfce:	f43f af6d 	beq.w	1ceac <d_name+0x124>
   1cfd2:	e762      	b.n	1ce9a <d_name+0x112>
   1cfd4:	3302      	adds	r3, #2
   1cfd6:	60e3      	str	r3, [r4, #12]
   1cfd8:	4620      	mov	r0, r4
   1cfda:	f7fd fddf 	bl	1ab9c <d_discriminator>
   1cfde:	2800      	cmp	r0, #0
   1cfe0:	d0ce      	beq.n	1cf80 <d_name+0x1f8>
   1cfe2:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1cfe6:	429a      	cmp	r2, r3
   1cfe8:	da15      	bge.n	1d016 <d_name+0x28e>
   1cfea:	6921      	ldr	r1, [r4, #16]
   1cfec:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1cff0:	0098      	lsls	r0, r3, #2
   1cff2:	3201      	adds	r2, #1
   1cff4:	6162      	str	r2, [r4, #20]
   1cff6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1cffa:	2200      	movs	r2, #0
   1cffc:	e9c3 2201 	strd	r2, r2, [r3, #4]
   1d000:	540a      	strb	r2, [r1, r0]
   1d002:	4907      	ldr	r1, [pc, #28]	; (1d020 <d_name+0x298>)
   1d004:	220e      	movs	r2, #14
   1d006:	e9c3 1203 	strd	r1, r2, [r3, #12]
   1d00a:	e764      	b.n	1ced6 <d_name+0x14e>
   1d00c:	2500      	movs	r5, #0
   1d00e:	e785      	b.n	1cf1c <d_name+0x194>
   1d010:	3303      	adds	r3, #3
   1d012:	2600      	movs	r6, #0
   1d014:	e7ce      	b.n	1cfb4 <d_name+0x22c>
   1d016:	2300      	movs	r3, #0
   1d018:	e75d      	b.n	1ced6 <d_name+0x14e>
   1d01a:	bf00      	nop
   1d01c:	20003400 	.word	0x20003400
   1d020:	200033f0 	.word	0x200033f0

0001d024 <d_encoding.part.0>:
   1d024:	b570      	push	{r4, r5, r6, lr}
   1d026:	4605      	mov	r5, r0
   1d028:	460e      	mov	r6, r1
   1d02a:	f7ff fead 	bl	1cd88 <d_name>
   1d02e:	b300      	cbz	r0, 1d072 <d_encoding.part.0+0x4e>
   1d030:	4604      	mov	r4, r0
   1d032:	b30e      	cbz	r6, 1d078 <d_encoding.part.0+0x54>
   1d034:	68ab      	ldr	r3, [r5, #8]
   1d036:	07db      	lsls	r3, r3, #31
   1d038:	d41e      	bmi.n	1d078 <d_encoding.part.0+0x54>
   1d03a:	7823      	ldrb	r3, [r4, #0]
   1d03c:	2b4e      	cmp	r3, #78	; 0x4e
   1d03e:	f1a3 011c 	sub.w	r1, r3, #28
   1d042:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1d046:	d03a      	beq.n	1d0be <d_encoding.part.0+0x9a>
   1d048:	d837      	bhi.n	1d0ba <d_encoding.part.0+0x96>
   1d04a:	2904      	cmp	r1, #4
   1d04c:	d937      	bls.n	1d0be <d_encoding.part.0+0x9a>
   1d04e:	2b02      	cmp	r3, #2
   1d050:	d110      	bne.n	1d074 <d_encoding.part.0+0x50>
   1d052:	6923      	ldr	r3, [r4, #16]
   1d054:	b16b      	cbz	r3, 1d072 <d_encoding.part.0+0x4e>
   1d056:	781a      	ldrb	r2, [r3, #0]
   1d058:	2a4e      	cmp	r2, #78	; 0x4e
   1d05a:	f1a2 001c 	sub.w	r0, r2, #28
   1d05e:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
   1d062:	d002      	beq.n	1d06a <d_encoding.part.0+0x46>
   1d064:	d83d      	bhi.n	1d0e2 <d_encoding.part.0+0xbe>
   1d066:	2804      	cmp	r0, #4
   1d068:	d804      	bhi.n	1d074 <d_encoding.part.0+0x50>
   1d06a:	68db      	ldr	r3, [r3, #12]
   1d06c:	6123      	str	r3, [r4, #16]
   1d06e:	2b00      	cmp	r3, #0
   1d070:	d1f1      	bne.n	1d056 <d_encoding.part.0+0x32>
   1d072:	2400      	movs	r4, #0
   1d074:	4620      	mov	r0, r4
   1d076:	bd70      	pop	{r4, r5, r6, pc}
   1d078:	68eb      	ldr	r3, [r5, #12]
   1d07a:	781b      	ldrb	r3, [r3, #0]
   1d07c:	2b00      	cmp	r3, #0
   1d07e:	d0f9      	beq.n	1d074 <d_encoding.part.0+0x50>
   1d080:	2b45      	cmp	r3, #69	; 0x45
   1d082:	d0f7      	beq.n	1d074 <d_encoding.part.0+0x50>
   1d084:	4621      	mov	r1, r4
   1d086:	780b      	ldrb	r3, [r1, #0]
   1d088:	2b04      	cmp	r3, #4
   1d08a:	d02d      	beq.n	1d0e8 <d_encoding.part.0+0xc4>
   1d08c:	d81e      	bhi.n	1d0cc <d_encoding.part.0+0xa8>
   1d08e:	2b02      	cmp	r3, #2
   1d090:	d11a      	bne.n	1d0c8 <d_encoding.part.0+0xa4>
   1d092:	6909      	ldr	r1, [r1, #16]
   1d094:	2900      	cmp	r1, #0
   1d096:	d1f6      	bne.n	1d086 <d_encoding.part.0+0x62>
   1d098:	4628      	mov	r0, r5
   1d09a:	f7fe fcdf 	bl	1ba5c <d_bare_function_type>
   1d09e:	2800      	cmp	r0, #0
   1d0a0:	d0e7      	beq.n	1d072 <d_encoding.part.0+0x4e>
   1d0a2:	b916      	cbnz	r6, 1d0aa <d_encoding.part.0+0x86>
   1d0a4:	7823      	ldrb	r3, [r4, #0]
   1d0a6:	2b02      	cmp	r3, #2
   1d0a8:	d032      	beq.n	1d110 <d_encoding.part.0+0xec>
   1d0aa:	4603      	mov	r3, r0
   1d0ac:	4622      	mov	r2, r4
   1d0ae:	4628      	mov	r0, r5
   1d0b0:	2103      	movs	r1, #3
   1d0b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1d0b6:	f7fd bc07 	b.w	1a8c8 <d_make_comp>
   1d0ba:	2a01      	cmp	r2, #1
   1d0bc:	d8da      	bhi.n	1d074 <d_encoding.part.0+0x50>
   1d0be:	68e4      	ldr	r4, [r4, #12]
   1d0c0:	e7bb      	b.n	1d03a <d_encoding.part.0+0x16>
   1d0c2:	3b1c      	subs	r3, #28
   1d0c4:	2b04      	cmp	r3, #4
   1d0c6:	d908      	bls.n	1d0da <d_encoding.part.0+0xb6>
   1d0c8:	2100      	movs	r1, #0
   1d0ca:	e7e5      	b.n	1d098 <d_encoding.part.0+0x74>
   1d0cc:	2b4e      	cmp	r3, #78	; 0x4e
   1d0ce:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1d0d2:	d002      	beq.n	1d0da <d_encoding.part.0+0xb6>
   1d0d4:	d9f5      	bls.n	1d0c2 <d_encoding.part.0+0x9e>
   1d0d6:	2a01      	cmp	r2, #1
   1d0d8:	d8f6      	bhi.n	1d0c8 <d_encoding.part.0+0xa4>
   1d0da:	68c9      	ldr	r1, [r1, #12]
   1d0dc:	2900      	cmp	r1, #0
   1d0de:	d1d2      	bne.n	1d086 <d_encoding.part.0+0x62>
   1d0e0:	e7da      	b.n	1d098 <d_encoding.part.0+0x74>
   1d0e2:	2901      	cmp	r1, #1
   1d0e4:	d8c6      	bhi.n	1d074 <d_encoding.part.0+0x50>
   1d0e6:	e7c0      	b.n	1d06a <d_encoding.part.0+0x46>
   1d0e8:	68cb      	ldr	r3, [r1, #12]
   1d0ea:	b15b      	cbz	r3, 1d104 <d_encoding.part.0+0xe0>
   1d0ec:	7819      	ldrb	r1, [r3, #0]
   1d0ee:	2908      	cmp	r1, #8
   1d0f0:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   1d0f4:	d808      	bhi.n	1d108 <d_encoding.part.0+0xe4>
   1d0f6:	2906      	cmp	r1, #6
   1d0f8:	d8e6      	bhi.n	1d0c8 <d_encoding.part.0+0xa4>
   1d0fa:	2a01      	cmp	r2, #1
   1d0fc:	d802      	bhi.n	1d104 <d_encoding.part.0+0xe0>
   1d0fe:	691b      	ldr	r3, [r3, #16]
   1d100:	2b00      	cmp	r3, #0
   1d102:	d1f3      	bne.n	1d0ec <d_encoding.part.0+0xc8>
   1d104:	2101      	movs	r1, #1
   1d106:	e7c7      	b.n	1d098 <d_encoding.part.0+0x74>
   1d108:	3935      	subs	r1, #53	; 0x35
   1d10a:	bf18      	it	ne
   1d10c:	2101      	movne	r1, #1
   1d10e:	e7c3      	b.n	1d098 <d_encoding.part.0+0x74>
   1d110:	7803      	ldrb	r3, [r0, #0]
   1d112:	2b29      	cmp	r3, #41	; 0x29
   1d114:	bf08      	it	eq
   1d116:	60c6      	streq	r6, [r0, #12]
   1d118:	e7c7      	b.n	1d0aa <d_encoding.part.0+0x86>
   1d11a:	bf00      	nop

0001d11c <d_print_comp_inner>:
   1d11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d120:	4604      	mov	r4, r0
   1d122:	b095      	sub	sp, #84	; 0x54
   1d124:	2a00      	cmp	r2, #0
   1d126:	d066      	beq.n	1d1f6 <d_print_comp_inner+0xda>
   1d128:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
   1d12c:	2d00      	cmp	r5, #0
   1d12e:	d165      	bne.n	1d1fc <d_print_comp_inner+0xe0>
   1d130:	7817      	ldrb	r7, [r2, #0]
   1d132:	4616      	mov	r6, r2
   1d134:	2f51      	cmp	r7, #81	; 0x51
   1d136:	d85e      	bhi.n	1d1f6 <d_print_comp_inner+0xda>
   1d138:	e8df f017 	tbh	[pc, r7, lsl #1]
   1d13c:	011b095c 	.word	0x011b095c
   1d140:	04ee011b 	.word	0x04ee011b
   1d144:	02de0898 	.word	0x02de0898
   1d148:	0097044a 	.word	0x0097044a
   1d14c:	08f9008b 	.word	0x08f9008b
   1d150:	03a608d2 	.word	0x03a608d2
   1d154:	019101b8 	.word	0x019101b8
   1d158:	0747016a 	.word	0x0747016a
   1d15c:	06f90720 	.word	0x06f90720
   1d160:	07bc07e3 	.word	0x07bc07e3
   1d164:	076e0795 	.word	0x076e0795
   1d168:	0423037f 	.word	0x0423037f
   1d16c:	009903f8 	.word	0x009903f8
   1d170:	00990099 	.word	0x00990099
   1d174:	00630063 	.word	0x00630063
   1d178:	00630063 	.word	0x00630063
   1d17c:	00630063 	.word	0x00630063
   1d180:	00c50063 	.word	0x00c50063
   1d184:	006300c5 	.word	0x006300c5
   1d188:	09870063 	.word	0x09870063
   1d18c:	04c80083 	.word	0x04c80083
   1d190:	00af068d 	.word	0x00af068d
   1d194:	00af066b 	.word	0x00af066b
   1d198:	00e600e6 	.word	0x00e600e6
   1d19c:	03340358 	.word	0x03340358
   1d1a0:	0831030a 	.word	0x0831030a
   1d1a4:	080a005d 	.word	0x080a005d
   1d1a8:	06460663 	.word	0x06460663
   1d1ac:	005d05eb 	.word	0x005d05eb
   1d1b0:	005d0920 	.word	0x005d0920
   1d1b4:	012a005d 	.word	0x012a005d
   1d1b8:	0455012a 	.word	0x0455012a
   1d1bc:	0858085e 	.word	0x0858085e
   1d1c0:	047804ba 	.word	0x047804ba
   1d1c4:	05c4054f 	.word	0x05c4054f
   1d1c8:	0576059d 	.word	0x0576059d
   1d1cc:	02a4005d 	.word	0x02a4005d
   1d1d0:	0256027d 	.word	0x0256027d
   1d1d4:	01df020a 	.word	0x01df020a
   1d1d8:	03cd0063 	.word	0x03cd0063
   1d1dc:	00630063 	.word	0x00630063
   1d1e0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1d1e4:	2900      	cmp	r1, #0
   1d1e6:	f2c1 8425 	blt.w	1ea34 <d_print_comp_inner+0x1918>
   1d1ea:	f7fd fcfb 	bl	1abe4 <d_index_template_argument.part.0>
   1d1ee:	4602      	mov	r2, r0
   1d1f0:	2800      	cmp	r0, #0
   1d1f2:	f041 841f 	bne.w	1ea34 <d_print_comp_inner+0x1918>
   1d1f6:	2301      	movs	r3, #1
   1d1f8:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1d1fc:	b015      	add	sp, #84	; 0x54
   1d1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d202:	2200      	movs	r2, #0
   1d204:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1d208:	9304      	str	r3, [sp, #16]
   1d20a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1d20e:	9307      	str	r3, [sp, #28]
   1d210:	ab04      	add	r3, sp, #16
   1d212:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d216:	2300      	movs	r3, #0
   1d218:	9605      	str	r6, [sp, #20]
   1d21a:	9306      	str	r3, [sp, #24]
   1d21c:	2a00      	cmp	r2, #0
   1d21e:	f001 87e6 	beq.w	1f1ee <d_print_comp_inner+0x20d2>
   1d222:	2111      	movs	r1, #17
   1d224:	4620      	mov	r0, r4
   1d226:	f001 fff3 	bl	1f210 <d_print_comp>
   1d22a:	9b06      	ldr	r3, [sp, #24]
   1d22c:	2b00      	cmp	r3, #0
   1d22e:	f001 82e9 	beq.w	1e804 <d_print_comp_inner+0x16e8>
   1d232:	9b04      	ldr	r3, [sp, #16]
   1d234:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d238:	2d00      	cmp	r5, #0
   1d23a:	d0df      	beq.n	1d1fc <d_print_comp_inner+0xe0>
   1d23c:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
   1d240:	e7dc      	b.n	1d1fc <d_print_comp_inner+0xe0>
   1d242:	68f2      	ldr	r2, [r6, #12]
   1d244:	2111      	movs	r1, #17
   1d246:	4620      	mov	r0, r4
   1d248:	b015      	add	sp, #84	; 0x54
   1d24a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d24e:	f001 bfdf 	b.w	1f210 <d_print_comp>
   1d252:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d256:	29ff      	cmp	r1, #255	; 0xff
   1d258:	f001 855f 	beq.w	1ed1a <d_print_comp_inner+0x1bfe>
   1d25c:	1c4a      	adds	r2, r1, #1
   1d25e:	237e      	movs	r3, #126	; 0x7e
   1d260:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d264:	5463      	strb	r3, [r4, r1]
   1d266:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d26a:	6932      	ldr	r2, [r6, #16]
   1d26c:	e7ea      	b.n	1d244 <d_print_comp_inner+0x128>
   1d26e:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1d272:	f1bc 0f00 	cmp.w	ip, #0
   1d276:	d00e      	beq.n	1d296 <d_print_comp_inner+0x17a>
   1d278:	4663      	mov	r3, ip
   1d27a:	6899      	ldr	r1, [r3, #8]
   1d27c:	b941      	cbnz	r1, 1d290 <d_print_comp_inner+0x174>
   1d27e:	685a      	ldr	r2, [r3, #4]
   1d280:	7812      	ldrb	r2, [r2, #0]
   1d282:	f1a2 0019 	sub.w	r0, r2, #25
   1d286:	2802      	cmp	r0, #2
   1d288:	f201 84ef 	bhi.w	1ec6a <d_print_comp_inner+0x1b4e>
   1d28c:	4297      	cmp	r7, r2
   1d28e:	d0d8      	beq.n	1d242 <d_print_comp_inner+0x126>
   1d290:	681b      	ldr	r3, [r3, #0]
   1d292:	2b00      	cmp	r3, #0
   1d294:	d1f1      	bne.n	1d27a <d_print_comp_inner+0x15e>
   1d296:	68f2      	ldr	r2, [r6, #12]
   1d298:	e02b      	b.n	1d2f2 <d_print_comp_inner+0x1d6>
   1d29a:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
   1d29e:	aa04      	add	r2, sp, #16
   1d2a0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1d2a4:	2200      	movs	r2, #0
   1d2a6:	e9cd 1604 	strd	r1, r6, [sp, #16]
   1d2aa:	9206      	str	r2, [sp, #24]
   1d2ac:	2111      	movs	r1, #17
   1d2ae:	6932      	ldr	r2, [r6, #16]
   1d2b0:	9307      	str	r3, [sp, #28]
   1d2b2:	f001 ffad 	bl	1f210 <d_print_comp>
   1d2b6:	9b06      	ldr	r3, [sp, #24]
   1d2b8:	2b00      	cmp	r3, #0
   1d2ba:	f001 84c3 	beq.w	1ec44 <d_print_comp_inner+0x1b28>
   1d2be:	9b04      	ldr	r3, [sp, #16]
   1d2c0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d2c4:	e79a      	b.n	1d1fc <d_print_comp_inner+0xe0>
   1d2c6:	68d2      	ldr	r2, [r2, #12]
   1d2c8:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   1d2cc:	7813      	ldrb	r3, [r2, #0]
   1d2ce:	2d00      	cmp	r5, #0
   1d2d0:	f041 8370 	bne.w	1e9b4 <d_print_comp_inner+0x1898>
   1d2d4:	2b05      	cmp	r3, #5
   1d2d6:	f001 85d2 	beq.w	1ee7e <d_print_comp_inner+0x1d62>
   1d2da:	4610      	mov	r0, r2
   1d2dc:	2b23      	cmp	r3, #35	; 0x23
   1d2de:	f001 82d8 	beq.w	1e892 <d_print_comp_inner+0x1776>
   1d2e2:	429f      	cmp	r7, r3
   1d2e4:	f001 82d5 	beq.w	1e892 <d_print_comp_inner+0x1776>
   1d2e8:	2b24      	cmp	r3, #36	; 0x24
   1d2ea:	f001 860a 	beq.w	1ef02 <d_print_comp_inner+0x1de6>
   1d2ee:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1d2f2:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1d2f6:	9307      	str	r3, [sp, #28]
   1d2f8:	ab04      	add	r3, sp, #16
   1d2fa:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d2fe:	2300      	movs	r3, #0
   1d300:	e9cd c604 	strd	ip, r6, [sp, #16]
   1d304:	9306      	str	r3, [sp, #24]
   1d306:	e78c      	b.n	1d222 <d_print_comp_inner+0x106>
   1d308:	68d2      	ldr	r2, [r2, #12]
   1d30a:	b112      	cbz	r2, 1d312 <d_print_comp_inner+0x1f6>
   1d30c:	2111      	movs	r1, #17
   1d30e:	f001 ff7f 	bl	1f210 <d_print_comp>
   1d312:	6933      	ldr	r3, [r6, #16]
   1d314:	2b00      	cmp	r3, #0
   1d316:	f43f af71 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1d31a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   1d31e:	2dfd      	cmp	r5, #253	; 0xfd
   1d320:	f201 84a7 	bhi.w	1ec72 <d_print_comp_inner+0x1b56>
   1d324:	f8df 8384 	ldr.w	r8, [pc, #900]	; 1d6ac <d_print_comp_inner+0x590>
   1d328:	272c      	movs	r7, #44	; 0x2c
   1d32a:	f108 0a01 	add.w	sl, r8, #1
   1d32e:	f04f 0900 	mov.w	r9, #0
   1d332:	4629      	mov	r1, r5
   1d334:	e00b      	b.n	1d34e <d_print_comp_inner+0x232>
   1d336:	460b      	mov	r3, r1
   1d338:	3101      	adds	r1, #1
   1d33a:	45d0      	cmp	r8, sl
   1d33c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d340:	54e7      	strb	r7, [r4, r3]
   1d342:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1d346:	f001 8264 	beq.w	1e812 <d_print_comp_inner+0x16f6>
   1d34a:	f818 7f01 	ldrb.w	r7, [r8, #1]!
   1d34e:	29ff      	cmp	r1, #255	; 0xff
   1d350:	d1f1      	bne.n	1d336 <d_print_comp_inner+0x21a>
   1d352:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d356:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d35a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1d35e:	4620      	mov	r0, r4
   1d360:	4798      	blx	r3
   1d362:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d366:	3301      	adds	r3, #1
   1d368:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d36c:	2101      	movs	r1, #1
   1d36e:	2300      	movs	r3, #0
   1d370:	e7e3      	b.n	1d33a <d_print_comp_inner+0x21e>
   1d372:	68d2      	ldr	r2, [r2, #12]
   1d374:	2111      	movs	r1, #17
   1d376:	f001 ff4b 	bl	1f210 <d_print_comp>
   1d37a:	49c7      	ldr	r1, [pc, #796]	; (1d698 <d_print_comp_inner+0x57c>)
   1d37c:	4620      	mov	r0, r4
   1d37e:	f7fd fd1b 	bl	1adb8 <d_append_string>
   1d382:	6937      	ldr	r7, [r6, #16]
   1d384:	783b      	ldrb	r3, [r7, #0]
   1d386:	2b48      	cmp	r3, #72	; 0x48
   1d388:	f001 808b 	beq.w	1e4a2 <d_print_comp_inner+0x1386>
   1d38c:	463a      	mov	r2, r7
   1d38e:	e759      	b.n	1d244 <d_print_comp_inner+0x128>
   1d390:	68d2      	ldr	r2, [r2, #12]
   1d392:	7813      	ldrb	r3, [r2, #0]
   1d394:	2b27      	cmp	r3, #39	; 0x27
   1d396:	f041 835a 	bne.w	1ea4e <d_print_comp_inner+0x1932>
   1d39a:	68d3      	ldr	r3, [r2, #12]
   1d39c:	7c1d      	ldrb	r5, [r3, #16]
   1d39e:	2d06      	cmp	r5, #6
   1d3a0:	f201 827d 	bhi.w	1e89e <d_print_comp_inner+0x1782>
   1d3a4:	2d00      	cmp	r5, #0
   1d3a6:	f041 851c 	bne.w	1ede2 <d_print_comp_inner+0x1cc6>
   1d3aa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d3ae:	29ff      	cmp	r1, #255	; 0xff
   1d3b0:	f001 84f0 	beq.w	1ed94 <d_print_comp_inner+0x1c78>
   1d3b4:	1c4b      	adds	r3, r1, #1
   1d3b6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d3ba:	2328      	movs	r3, #40	; 0x28
   1d3bc:	5463      	strb	r3, [r4, r1]
   1d3be:	4620      	mov	r0, r4
   1d3c0:	2111      	movs	r1, #17
   1d3c2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d3c6:	f001 ff23 	bl	1f210 <d_print_comp>
   1d3ca:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d3ce:	29ff      	cmp	r1, #255	; 0xff
   1d3d0:	f001 84f7 	beq.w	1edc2 <d_print_comp_inner+0x1ca6>
   1d3d4:	1c4b      	adds	r3, r1, #1
   1d3d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d3da:	2329      	movs	r3, #41	; 0x29
   1d3dc:	5463      	strb	r3, [r4, r1]
   1d3de:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d3e2:	7833      	ldrb	r3, [r6, #0]
   1d3e4:	2b3e      	cmp	r3, #62	; 0x3e
   1d3e6:	f001 84e6 	beq.w	1edb6 <d_print_comp_inner+0x1c9a>
   1d3ea:	2d08      	cmp	r5, #8
   1d3ec:	f47f af3d 	bne.w	1d26a <d_print_comp_inner+0x14e>
   1d3f0:	215b      	movs	r1, #91	; 0x5b
   1d3f2:	4620      	mov	r0, r4
   1d3f4:	f7fd fc58 	bl	1aca8 <d_append_char>
   1d3f8:	2111      	movs	r1, #17
   1d3fa:	6932      	ldr	r2, [r6, #16]
   1d3fc:	4620      	mov	r0, r4
   1d3fe:	f001 ff07 	bl	1f210 <d_print_comp>
   1d402:	215d      	movs	r1, #93	; 0x5d
   1d404:	4620      	mov	r0, r4
   1d406:	b015      	add	sp, #84	; 0x54
   1d408:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d40c:	f7fd bc4c 	b.w	1aca8 <d_append_char>
   1d410:	4fa2      	ldr	r7, [pc, #648]	; (1d69c <d_print_comp_inner+0x580>)
   1d412:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d416:	f107 090f 	add.w	r9, r7, #15
   1d41a:	2574      	movs	r5, #116	; 0x74
   1d41c:	f04f 0800 	mov.w	r8, #0
   1d420:	e00b      	b.n	1d43a <d_print_comp_inner+0x31e>
   1d422:	460b      	mov	r3, r1
   1d424:	3101      	adds	r1, #1
   1d426:	454f      	cmp	r7, r9
   1d428:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d42c:	54e5      	strb	r5, [r4, r3]
   1d42e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d432:	f43f af06 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d436:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d43a:	29ff      	cmp	r1, #255	; 0xff
   1d43c:	d1f1      	bne.n	1d422 <d_print_comp_inner+0x306>
   1d43e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d446:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d44a:	4620      	mov	r0, r4
   1d44c:	4798      	blx	r3
   1d44e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d452:	3301      	adds	r3, #1
   1d454:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d458:	2101      	movs	r1, #1
   1d45a:	2300      	movs	r3, #0
   1d45c:	e7e3      	b.n	1d426 <d_print_comp_inner+0x30a>
   1d45e:	4f90      	ldr	r7, [pc, #576]	; (1d6a0 <d_print_comp_inner+0x584>)
   1d460:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d464:	f107 0911 	add.w	r9, r7, #17
   1d468:	2574      	movs	r5, #116	; 0x74
   1d46a:	f04f 0800 	mov.w	r8, #0
   1d46e:	e00b      	b.n	1d488 <d_print_comp_inner+0x36c>
   1d470:	460b      	mov	r3, r1
   1d472:	3101      	adds	r1, #1
   1d474:	45b9      	cmp	r9, r7
   1d476:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d47a:	54e5      	strb	r5, [r4, r3]
   1d47c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d480:	f43f aedf 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d484:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d488:	29ff      	cmp	r1, #255	; 0xff
   1d48a:	d1f1      	bne.n	1d470 <d_print_comp_inner+0x354>
   1d48c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d490:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d494:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d498:	4620      	mov	r0, r4
   1d49a:	4798      	blx	r3
   1d49c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d4a0:	3301      	adds	r3, #1
   1d4a2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d4a6:	2101      	movs	r1, #1
   1d4a8:	2300      	movs	r3, #0
   1d4aa:	e7e3      	b.n	1d474 <d_print_comp_inner+0x358>
   1d4ac:	4f7d      	ldr	r7, [pc, #500]	; (1d6a4 <d_print_comp_inner+0x588>)
   1d4ae:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d4b2:	f107 090c 	add.w	r9, r7, #12
   1d4b6:	2574      	movs	r5, #116	; 0x74
   1d4b8:	f04f 0800 	mov.w	r8, #0
   1d4bc:	e00b      	b.n	1d4d6 <d_print_comp_inner+0x3ba>
   1d4be:	460b      	mov	r3, r1
   1d4c0:	3101      	adds	r1, #1
   1d4c2:	454f      	cmp	r7, r9
   1d4c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d4c8:	54e5      	strb	r5, [r4, r3]
   1d4ca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d4ce:	f43f aeb8 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d4d2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d4d6:	29ff      	cmp	r1, #255	; 0xff
   1d4d8:	d1f1      	bne.n	1d4be <d_print_comp_inner+0x3a2>
   1d4da:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d4de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d4e2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d4e6:	4620      	mov	r0, r4
   1d4e8:	4798      	blx	r3
   1d4ea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d4ee:	3301      	adds	r3, #1
   1d4f0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d4f4:	2101      	movs	r1, #1
   1d4f6:	2300      	movs	r3, #0
   1d4f8:	e7e3      	b.n	1d4c2 <d_print_comp_inner+0x3a6>
   1d4fa:	4f6b      	ldr	r7, [pc, #428]	; (1d6a8 <d_print_comp_inner+0x58c>)
   1d4fc:	68d2      	ldr	r2, [r2, #12]
   1d4fe:	2111      	movs	r1, #17
   1d500:	f001 fe86 	bl	1f210 <d_print_comp>
   1d504:	f107 0904 	add.w	r9, r7, #4
   1d508:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d50c:	255b      	movs	r5, #91	; 0x5b
   1d50e:	f04f 0800 	mov.w	r8, #0
   1d512:	e00b      	b.n	1d52c <d_print_comp_inner+0x410>
   1d514:	460b      	mov	r3, r1
   1d516:	3101      	adds	r1, #1
   1d518:	45b9      	cmp	r9, r7
   1d51a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d51e:	54e5      	strb	r5, [r4, r3]
   1d520:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d524:	f000 87f3 	beq.w	1e50e <d_print_comp_inner+0x13f2>
   1d528:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d52c:	29ff      	cmp	r1, #255	; 0xff
   1d52e:	d1f1      	bne.n	1d514 <d_print_comp_inner+0x3f8>
   1d530:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d534:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d538:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d53c:	4620      	mov	r0, r4
   1d53e:	4798      	blx	r3
   1d540:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d544:	3301      	adds	r3, #1
   1d546:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d54a:	2101      	movs	r1, #1
   1d54c:	2300      	movs	r3, #0
   1d54e:	e7e3      	b.n	1d518 <d_print_comp_inner+0x3fc>
   1d550:	f8d2 a00c 	ldr.w	sl, [r2, #12]
   1d554:	4651      	mov	r1, sl
   1d556:	f7fd fbe5 	bl	1ad24 <d_find_pack>
   1d55a:	f04f 0800 	mov.w	r8, #0
   1d55e:	b910      	cbnz	r0, 1d566 <d_print_comp_inner+0x44a>
   1d560:	f001 bd20 	b.w	1efa4 <d_print_comp_inner+0x1e88>
   1d564:	46c8      	mov	r8, r9
   1d566:	7803      	ldrb	r3, [r0, #0]
   1d568:	2b2f      	cmp	r3, #47	; 0x2f
   1d56a:	f108 0901 	add.w	r9, r8, #1
   1d56e:	f041 8187 	bne.w	1e880 <d_print_comp_inner+0x1764>
   1d572:	68c3      	ldr	r3, [r0, #12]
   1d574:	2b00      	cmp	r3, #0
   1d576:	f001 8183 	beq.w	1e880 <d_print_comp_inner+0x1764>
   1d57a:	6900      	ldr	r0, [r0, #16]
   1d57c:	2800      	cmp	r0, #0
   1d57e:	d1f1      	bne.n	1d564 <d_print_comp_inner+0x448>
   1d580:	e003      	b.n	1d58a <d_print_comp_inner+0x46e>
   1d582:	3501      	adds	r5, #1
   1d584:	454d      	cmp	r5, r9
   1d586:	f6bf ae39 	bge.w	1d1fc <d_print_comp_inner+0xe0>
   1d58a:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1d58e:	4652      	mov	r2, sl
   1d590:	2111      	movs	r1, #17
   1d592:	4620      	mov	r0, r4
   1d594:	f001 fe3c 	bl	1f210 <d_print_comp>
   1d598:	45a8      	cmp	r8, r5
   1d59a:	ddf2      	ble.n	1d582 <d_print_comp_inner+0x466>
   1d59c:	4f43      	ldr	r7, [pc, #268]	; (1d6ac <d_print_comp_inner+0x590>)
   1d59e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d5a2:	f107 0b01 	add.w	fp, r7, #1
   1d5a6:	262c      	movs	r6, #44	; 0x2c
   1d5a8:	e00a      	b.n	1d5c0 <d_print_comp_inner+0x4a4>
   1d5aa:	460b      	mov	r3, r1
   1d5ac:	3101      	adds	r1, #1
   1d5ae:	45bb      	cmp	fp, r7
   1d5b0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d5b4:	54e6      	strb	r6, [r4, r3]
   1d5b6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d5ba:	d0e2      	beq.n	1d582 <d_print_comp_inner+0x466>
   1d5bc:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1d5c0:	29ff      	cmp	r1, #255	; 0xff
   1d5c2:	d1f2      	bne.n	1d5aa <d_print_comp_inner+0x48e>
   1d5c4:	f04f 0200 	mov.w	r2, #0
   1d5c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d5cc:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1d5d0:	4620      	mov	r0, r4
   1d5d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d5d6:	4798      	blx	r3
   1d5d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d5dc:	3301      	adds	r3, #1
   1d5de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d5e2:	2101      	movs	r1, #1
   1d5e4:	2300      	movs	r3, #0
   1d5e6:	e7e2      	b.n	1d5ae <d_print_comp_inner+0x492>
   1d5e8:	4f31      	ldr	r7, [pc, #196]	; (1d6b0 <d_print_comp_inner+0x594>)
   1d5ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d5ee:	f107 0919 	add.w	r9, r7, #25
   1d5f2:	256e      	movs	r5, #110	; 0x6e
   1d5f4:	f04f 0800 	mov.w	r8, #0
   1d5f8:	e00b      	b.n	1d612 <d_print_comp_inner+0x4f6>
   1d5fa:	460b      	mov	r3, r1
   1d5fc:	3101      	adds	r1, #1
   1d5fe:	45b9      	cmp	r9, r7
   1d600:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d604:	54e5      	strb	r5, [r4, r3]
   1d606:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d60a:	f43f ae1a 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d60e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d612:	29ff      	cmp	r1, #255	; 0xff
   1d614:	d1f1      	bne.n	1d5fa <d_print_comp_inner+0x4de>
   1d616:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d61a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d61e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d622:	4620      	mov	r0, r4
   1d624:	4798      	blx	r3
   1d626:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d62a:	3301      	adds	r3, #1
   1d62c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d630:	2101      	movs	r1, #1
   1d632:	2300      	movs	r3, #0
   1d634:	e7e3      	b.n	1d5fe <d_print_comp_inner+0x4e2>
   1d636:	4f1f      	ldr	r7, [pc, #124]	; (1d6b4 <d_print_comp_inner+0x598>)
   1d638:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d63c:	f107 0915 	add.w	r9, r7, #21
   1d640:	2574      	movs	r5, #116	; 0x74
   1d642:	f04f 0800 	mov.w	r8, #0
   1d646:	e00b      	b.n	1d660 <d_print_comp_inner+0x544>
   1d648:	460b      	mov	r3, r1
   1d64a:	3101      	adds	r1, #1
   1d64c:	45b9      	cmp	r9, r7
   1d64e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d652:	54e5      	strb	r5, [r4, r3]
   1d654:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d658:	f43f adf3 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d65c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d660:	29ff      	cmp	r1, #255	; 0xff
   1d662:	d1f1      	bne.n	1d648 <d_print_comp_inner+0x52c>
   1d664:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d668:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d66c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d670:	4620      	mov	r0, r4
   1d672:	4798      	blx	r3
   1d674:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d678:	3301      	adds	r3, #1
   1d67a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d67e:	2101      	movs	r1, #1
   1d680:	2300      	movs	r3, #0
   1d682:	e7e3      	b.n	1d64c <d_print_comp_inner+0x530>
   1d684:	4f0c      	ldr	r7, [pc, #48]	; (1d6b8 <d_print_comp_inner+0x59c>)
   1d686:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d68a:	f107 090d 	add.w	r9, r7, #13
   1d68e:	257b      	movs	r5, #123	; 0x7b
   1d690:	f04f 0800 	mov.w	r8, #0
   1d694:	e01e      	b.n	1d6d4 <d_print_comp_inner+0x5b8>
   1d696:	bf00      	nop
   1d698:	2000340c 	.word	0x2000340c
   1d69c:	200034ac 	.word	0x200034ac
   1d6a0:	20003498 	.word	0x20003498
   1d6a4:	20003488 	.word	0x20003488
   1d6a8:	20003404 	.word	0x20003404
   1d6ac:	200035ac 	.word	0x200035ac
   1d6b0:	20003578 	.word	0x20003578
   1d6b4:	2000357c 	.word	0x2000357c
   1d6b8:	20003670 	.word	0x20003670
   1d6bc:	460b      	mov	r3, r1
   1d6be:	3101      	adds	r1, #1
   1d6c0:	454f      	cmp	r7, r9
   1d6c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d6c6:	54e5      	strb	r5, [r4, r3]
   1d6c8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d6cc:	f000 8739 	beq.w	1e542 <d_print_comp_inner+0x1426>
   1d6d0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d6d4:	29ff      	cmp	r1, #255	; 0xff
   1d6d6:	d1f1      	bne.n	1d6bc <d_print_comp_inner+0x5a0>
   1d6d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d6dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d6e0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d6e4:	4620      	mov	r0, r4
   1d6e6:	4798      	blx	r3
   1d6e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d6ec:	3301      	adds	r3, #1
   1d6ee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d6f2:	2101      	movs	r1, #1
   1d6f4:	2300      	movs	r3, #0
   1d6f6:	e7e3      	b.n	1d6c0 <d_print_comp_inner+0x5a4>
   1d6f8:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1d6fc:	2b00      	cmp	r3, #0
   1d6fe:	f001 818e 	beq.w	1ea1e <d_print_comp_inner+0x1902>
   1d702:	4fd3      	ldr	r7, [pc, #844]	; (1da50 <d_print_comp_inner+0x934>)
   1d704:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d708:	f107 0904 	add.w	r9, r7, #4
   1d70c:	2561      	movs	r5, #97	; 0x61
   1d70e:	f04f 0800 	mov.w	r8, #0
   1d712:	e00b      	b.n	1d72c <d_print_comp_inner+0x610>
   1d714:	460b      	mov	r3, r1
   1d716:	3101      	adds	r1, #1
   1d718:	45b9      	cmp	r9, r7
   1d71a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d71e:	54e5      	strb	r5, [r4, r3]
   1d720:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d724:	f001 814a 	beq.w	1e9bc <d_print_comp_inner+0x18a0>
   1d728:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d72c:	29ff      	cmp	r1, #255	; 0xff
   1d72e:	d1f1      	bne.n	1d714 <d_print_comp_inner+0x5f8>
   1d730:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d734:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d738:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d73c:	4620      	mov	r0, r4
   1d73e:	4798      	blx	r3
   1d740:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d744:	3301      	adds	r3, #1
   1d746:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d74a:	2101      	movs	r1, #1
   1d74c:	2300      	movs	r3, #0
   1d74e:	e7e3      	b.n	1d718 <d_print_comp_inner+0x5fc>
   1d750:	68d7      	ldr	r7, [r2, #12]
   1d752:	4ec0      	ldr	r6, [pc, #768]	; (1da54 <d_print_comp_inner+0x938>)
   1d754:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1d758:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d75c:	f106 0a07 	add.w	sl, r6, #7
   1d760:	256f      	movs	r5, #111	; 0x6f
   1d762:	f04f 0900 	mov.w	r9, #0
   1d766:	e00b      	b.n	1d780 <d_print_comp_inner+0x664>
   1d768:	460b      	mov	r3, r1
   1d76a:	3101      	adds	r1, #1
   1d76c:	45b2      	cmp	sl, r6
   1d76e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d772:	54e5      	strb	r5, [r4, r3]
   1d774:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d778:	f000 8726 	beq.w	1e5c8 <d_print_comp_inner+0x14ac>
   1d77c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1d780:	29ff      	cmp	r1, #255	; 0xff
   1d782:	d1f1      	bne.n	1d768 <d_print_comp_inner+0x64c>
   1d784:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d788:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d78c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1d790:	4620      	mov	r0, r4
   1d792:	4798      	blx	r3
   1d794:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d798:	3301      	adds	r3, #1
   1d79a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d79e:	2101      	movs	r1, #1
   1d7a0:	2300      	movs	r3, #0
   1d7a2:	e7e3      	b.n	1d76c <d_print_comp_inner+0x650>
   1d7a4:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
   1d7a8:	b112      	cbz	r2, 1d7b0 <d_print_comp_inner+0x694>
   1d7aa:	2111      	movs	r1, #17
   1d7ac:	f001 fd30 	bl	1f210 <d_print_comp>
   1d7b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d7b4:	29ff      	cmp	r1, #255	; 0xff
   1d7b6:	f001 826d 	beq.w	1ec94 <d_print_comp_inner+0x1b78>
   1d7ba:	1c4a      	adds	r2, r1, #1
   1d7bc:	237b      	movs	r3, #123	; 0x7b
   1d7be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d7c2:	4620      	mov	r0, r4
   1d7c4:	5463      	strb	r3, [r4, r1]
   1d7c6:	462a      	mov	r2, r5
   1d7c8:	2111      	movs	r1, #17
   1d7ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d7ce:	f001 fd1f 	bl	1f210 <d_print_comp>
   1d7d2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d7d6:	29ff      	cmp	r1, #255	; 0xff
   1d7d8:	f000 86e6 	beq.w	1e5a8 <d_print_comp_inner+0x148c>
   1d7dc:	1c4a      	adds	r2, r1, #1
   1d7de:	237d      	movs	r3, #125	; 0x7d
   1d7e0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d7e4:	5463      	strb	r3, [r4, r1]
   1d7e6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d7ea:	e507      	b.n	1d1fc <d_print_comp_inner+0xe0>
   1d7ec:	4f9a      	ldr	r7, [pc, #616]	; (1da58 <d_print_comp_inner+0x93c>)
   1d7ee:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d7f2:	f107 091d 	add.w	r9, r7, #29
   1d7f6:	2574      	movs	r5, #116	; 0x74
   1d7f8:	f04f 0800 	mov.w	r8, #0
   1d7fc:	e00b      	b.n	1d816 <d_print_comp_inner+0x6fa>
   1d7fe:	460b      	mov	r3, r1
   1d800:	3101      	adds	r1, #1
   1d802:	45b9      	cmp	r9, r7
   1d804:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d808:	54e5      	strb	r5, [r4, r3]
   1d80a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d80e:	f43f ad18 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d812:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d816:	29ff      	cmp	r1, #255	; 0xff
   1d818:	d1f1      	bne.n	1d7fe <d_print_comp_inner+0x6e2>
   1d81a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d81e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d822:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d826:	4620      	mov	r0, r4
   1d828:	4798      	blx	r3
   1d82a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d82e:	3301      	adds	r3, #1
   1d830:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d834:	2101      	movs	r1, #1
   1d836:	2300      	movs	r3, #0
   1d838:	e7e3      	b.n	1d802 <d_print_comp_inner+0x6e6>
   1d83a:	4f88      	ldr	r7, [pc, #544]	; (1da5c <d_print_comp_inner+0x940>)
   1d83c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d840:	f107 0914 	add.w	r9, r7, #20
   1d844:	2572      	movs	r5, #114	; 0x72
   1d846:	f04f 0800 	mov.w	r8, #0
   1d84a:	e00b      	b.n	1d864 <d_print_comp_inner+0x748>
   1d84c:	460b      	mov	r3, r1
   1d84e:	3101      	adds	r1, #1
   1d850:	45b9      	cmp	r9, r7
   1d852:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d856:	54e5      	strb	r5, [r4, r3]
   1d858:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d85c:	f000 86f4 	beq.w	1e648 <d_print_comp_inner+0x152c>
   1d860:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d864:	29ff      	cmp	r1, #255	; 0xff
   1d866:	d1f1      	bne.n	1d84c <d_print_comp_inner+0x730>
   1d868:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d86c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d870:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d874:	4620      	mov	r0, r4
   1d876:	4798      	blx	r3
   1d878:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d87c:	3301      	adds	r3, #1
   1d87e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d882:	2101      	movs	r1, #1
   1d884:	2300      	movs	r3, #0
   1d886:	e7e3      	b.n	1d850 <d_print_comp_inner+0x734>
   1d888:	4f75      	ldr	r7, [pc, #468]	; (1da60 <d_print_comp_inner+0x944>)
   1d88a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d88e:	f107 0917 	add.w	r9, r7, #23
   1d892:	2563      	movs	r5, #99	; 0x63
   1d894:	f04f 0800 	mov.w	r8, #0
   1d898:	e00b      	b.n	1d8b2 <d_print_comp_inner+0x796>
   1d89a:	460b      	mov	r3, r1
   1d89c:	3101      	adds	r1, #1
   1d89e:	454f      	cmp	r7, r9
   1d8a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d8a4:	54e5      	strb	r5, [r4, r3]
   1d8a6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d8aa:	f000 877c 	beq.w	1e7a6 <d_print_comp_inner+0x168a>
   1d8ae:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d8b2:	29ff      	cmp	r1, #255	; 0xff
   1d8b4:	d1f1      	bne.n	1d89a <d_print_comp_inner+0x77e>
   1d8b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d8ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d8be:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d8c2:	4620      	mov	r0, r4
   1d8c4:	4798      	blx	r3
   1d8c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d8ca:	3301      	adds	r3, #1
   1d8cc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d8d0:	2101      	movs	r1, #1
   1d8d2:	2300      	movs	r3, #0
   1d8d4:	e7e3      	b.n	1d89e <d_print_comp_inner+0x782>
   1d8d6:	4f63      	ldr	r7, [pc, #396]	; (1da64 <d_print_comp_inner+0x948>)
   1d8d8:	68d2      	ldr	r2, [r2, #12]
   1d8da:	2111      	movs	r1, #17
   1d8dc:	f001 fc98 	bl	1f210 <d_print_comp>
   1d8e0:	f107 0907 	add.w	r9, r7, #7
   1d8e4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d8e8:	2520      	movs	r5, #32
   1d8ea:	f04f 0800 	mov.w	r8, #0
   1d8ee:	e00b      	b.n	1d908 <d_print_comp_inner+0x7ec>
   1d8f0:	460b      	mov	r3, r1
   1d8f2:	3101      	adds	r1, #1
   1d8f4:	45b9      	cmp	r9, r7
   1d8f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d8fa:	54e5      	strb	r5, [r4, r3]
   1d8fc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d900:	f000 8605 	beq.w	1e50e <d_print_comp_inner+0x13f2>
   1d904:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d908:	29ff      	cmp	r1, #255	; 0xff
   1d90a:	d1f1      	bne.n	1d8f0 <d_print_comp_inner+0x7d4>
   1d90c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d910:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d914:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d918:	4620      	mov	r0, r4
   1d91a:	4798      	blx	r3
   1d91c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d920:	3301      	adds	r3, #1
   1d922:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d926:	2101      	movs	r1, #1
   1d928:	2300      	movs	r3, #0
   1d92a:	e7e3      	b.n	1d8f4 <d_print_comp_inner+0x7d8>
   1d92c:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   1d930:	2b00      	cmp	r3, #0
   1d932:	f43f ac63 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1d936:	442b      	add	r3, r5
   1d938:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d93c:	3d01      	subs	r5, #1
   1d93e:	1e5f      	subs	r7, r3, #1
   1d940:	f04f 0800 	mov.w	r8, #0
   1d944:	e009      	b.n	1d95a <d_print_comp_inner+0x83e>
   1d946:	460b      	mov	r3, r1
   1d948:	3101      	adds	r1, #1
   1d94a:	42af      	cmp	r7, r5
   1d94c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d950:	54e6      	strb	r6, [r4, r3]
   1d952:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d956:	f43f ac51 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1d95a:	29ff      	cmp	r1, #255	; 0xff
   1d95c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d960:	d1f1      	bne.n	1d946 <d_print_comp_inner+0x82a>
   1d962:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d966:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d96a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d96e:	4620      	mov	r0, r4
   1d970:	4798      	blx	r3
   1d972:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d976:	3301      	adds	r3, #1
   1d978:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d97c:	2101      	movs	r1, #1
   1d97e:	2300      	movs	r3, #0
   1d980:	e7e3      	b.n	1d94a <d_print_comp_inner+0x82e>
   1d982:	4f39      	ldr	r7, [pc, #228]	; (1da68 <d_print_comp_inner+0x94c>)
   1d984:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d988:	f107 0910 	add.w	r9, r7, #16
   1d98c:	2568      	movs	r5, #104	; 0x68
   1d98e:	f04f 0800 	mov.w	r8, #0
   1d992:	e00b      	b.n	1d9ac <d_print_comp_inner+0x890>
   1d994:	460b      	mov	r3, r1
   1d996:	3101      	adds	r1, #1
   1d998:	45b9      	cmp	r9, r7
   1d99a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d99e:	54e5      	strb	r5, [r4, r3]
   1d9a0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d9a4:	f43f ac4d 	beq.w	1d242 <d_print_comp_inner+0x126>
   1d9a8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d9ac:	29ff      	cmp	r1, #255	; 0xff
   1d9ae:	d1f1      	bne.n	1d994 <d_print_comp_inner+0x878>
   1d9b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d9b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d9b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d9bc:	4620      	mov	r0, r4
   1d9be:	4798      	blx	r3
   1d9c0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d9c4:	3301      	adds	r3, #1
   1d9c6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d9ca:	2101      	movs	r1, #1
   1d9cc:	2300      	movs	r3, #0
   1d9ce:	e7e3      	b.n	1d998 <d_print_comp_inner+0x87c>
   1d9d0:	68d5      	ldr	r5, [r2, #12]
   1d9d2:	2d00      	cmp	r5, #0
   1d9d4:	f040 87a1 	bne.w	1e91a <d_print_comp_inner+0x17fe>
   1d9d8:	4924      	ldr	r1, [pc, #144]	; (1da6c <d_print_comp_inner+0x950>)
   1d9da:	4620      	mov	r0, r4
   1d9dc:	b015      	add	sp, #84	; 0x54
   1d9de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d9e2:	f7fd b9e9 	b.w	1adb8 <d_append_string>
   1d9e6:	2111      	movs	r1, #17
   1d9e8:	68d2      	ldr	r2, [r2, #12]
   1d9ea:	f001 fc11 	bl	1f210 <d_print_comp>
   1d9ee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d9f2:	29ff      	cmp	r1, #255	; 0xff
   1d9f4:	f001 816e 	beq.w	1ecd4 <d_print_comp_inner+0x1bb8>
   1d9f8:	1c4a      	adds	r2, r1, #1
   1d9fa:	2328      	movs	r3, #40	; 0x28
   1d9fc:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1da00:	5463      	strb	r3, [r4, r1]
   1da02:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1da06:	6932      	ldr	r2, [r6, #16]
   1da08:	2111      	movs	r1, #17
   1da0a:	4620      	mov	r0, r4
   1da0c:	f001 fc00 	bl	1f210 <d_print_comp>
   1da10:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1da14:	29ff      	cmp	r1, #255	; 0xff
   1da16:	f001 802c 	beq.w	1ea72 <d_print_comp_inner+0x1956>
   1da1a:	1c4a      	adds	r2, r1, #1
   1da1c:	2329      	movs	r3, #41	; 0x29
   1da1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1da22:	5463      	strb	r3, [r4, r1]
   1da24:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1da28:	f7ff bbe8 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1da2c:	68d2      	ldr	r2, [r2, #12]
   1da2e:	4910      	ldr	r1, [pc, #64]	; (1da70 <d_print_comp_inner+0x954>)
   1da30:	a804      	add	r0, sp, #16
   1da32:	f004 fe65 	bl	22700 <sprintf>
   1da36:	a804      	add	r0, sp, #16
   1da38:	f005 fea2 	bl	23780 <strlen>
   1da3c:	2800      	cmp	r0, #0
   1da3e:	f43f abdd 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1da42:	ad04      	add	r5, sp, #16
   1da44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1da48:	182f      	adds	r7, r5, r0
   1da4a:	f04f 0800 	mov.w	r8, #0
   1da4e:	e01b      	b.n	1da88 <d_print_comp_inner+0x96c>
   1da50:	20003424 	.word	0x20003424
   1da54:	200035b0 	.word	0x200035b0
   1da58:	2000342c 	.word	0x2000342c
   1da5c:	2000354c 	.word	0x2000354c
   1da60:	20003464 	.word	0x20003464
   1da64:	20003680 	.word	0x20003680
   1da68:	20003564 	.word	0x20003564
   1da6c:	20003610 	.word	0x20003610
   1da70:	200033c0 	.word	0x200033c0
   1da74:	460b      	mov	r3, r1
   1da76:	3101      	adds	r1, #1
   1da78:	42af      	cmp	r7, r5
   1da7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1da7e:	54e6      	strb	r6, [r4, r3]
   1da80:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1da84:	f43f abba 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1da88:	29ff      	cmp	r1, #255	; 0xff
   1da8a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1da8e:	d1f1      	bne.n	1da74 <d_print_comp_inner+0x958>
   1da90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1da94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1da98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1da9c:	4620      	mov	r0, r4
   1da9e:	4798      	blx	r3
   1daa0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1daa4:	3301      	adds	r3, #1
   1daa6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1daaa:	2101      	movs	r1, #1
   1daac:	2300      	movs	r3, #0
   1daae:	e7e3      	b.n	1da78 <d_print_comp_inner+0x95c>
   1dab0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dab4:	7b15      	ldrb	r5, [r2, #12]
   1dab6:	29ff      	cmp	r1, #255	; 0xff
   1dab8:	f001 811e 	beq.w	1ecf8 <d_print_comp_inner+0x1bdc>
   1dabc:	1c4b      	adds	r3, r1, #1
   1dabe:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1dac2:	5465      	strb	r5, [r4, r1]
   1dac4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dac8:	f7ff bb98 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1dacc:	68d2      	ldr	r2, [r2, #12]
   1dace:	b1ca      	cbz	r2, 1db04 <d_print_comp_inner+0x9e8>
   1dad0:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1dad4:	ab04      	add	r3, sp, #16
   1dad6:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1dada:	2300      	movs	r3, #0
   1dadc:	e9cd 1604 	strd	r1, r6, [sp, #16]
   1dae0:	9306      	str	r3, [sp, #24]
   1dae2:	2111      	movs	r1, #17
   1dae4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1dae8:	9307      	str	r3, [sp, #28]
   1daea:	f001 fb91 	bl	1f210 <d_print_comp>
   1daee:	9b06      	ldr	r3, [sp, #24]
   1daf0:	9a04      	ldr	r2, [sp, #16]
   1daf2:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1daf6:	2b00      	cmp	r3, #0
   1daf8:	f47f ab80 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1dafc:	2120      	movs	r1, #32
   1dafe:	4620      	mov	r0, r4
   1db00:	f7fd f8d2 	bl	1aca8 <d_append_char>
   1db04:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1db08:	4632      	mov	r2, r6
   1db0a:	2111      	movs	r1, #17
   1db0c:	4620      	mov	r0, r4
   1db0e:	b015      	add	sp, #84	; 0x54
   1db10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db14:	f001 bec6 	b.w	1f8a4 <d_print_function_type>
   1db18:	68d7      	ldr	r7, [r2, #12]
   1db1a:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1db1e:	2200      	movs	r2, #0
   1db20:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1db24:	2f00      	cmp	r7, #0
   1db26:	f43f ab66 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1db2a:	f10d 0810 	add.w	r8, sp, #16
   1db2e:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   1db32:	4643      	mov	r3, r8
   1db34:	4611      	mov	r1, r2
   1db36:	4696      	mov	lr, r2
   1db38:	e9c3 2700 	strd	r2, r7, [r3]
   1db3c:	e9c3 ec02 	strd	lr, ip, [r3, #8]
   1db40:	783a      	ldrb	r2, [r7, #0]
   1db42:	2a4e      	cmp	r2, #78	; 0x4e
   1db44:	469a      	mov	sl, r3
   1db46:	f1a2 0b1c 	sub.w	fp, r2, #28
   1db4a:	f1a2 0050 	sub.w	r0, r2, #80	; 0x50
   1db4e:	f101 0501 	add.w	r5, r1, #1
   1db52:	f000 8688 	beq.w	1e866 <d_print_comp_inner+0x174a>
   1db56:	f200 84ed 	bhi.w	1e534 <d_print_comp_inner+0x1418>
   1db5a:	f1bb 0f04 	cmp.w	fp, #4
   1db5e:	f240 8682 	bls.w	1e866 <d_print_comp_inner+0x174a>
   1db62:	2a02      	cmp	r2, #2
   1db64:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1db68:	d114      	bne.n	1db94 <d_print_comp_inner+0xa78>
   1db6a:	693f      	ldr	r7, [r7, #16]
   1db6c:	783a      	ldrb	r2, [r7, #0]
   1db6e:	2a48      	cmp	r2, #72	; 0x48
   1db70:	f001 8250 	beq.w	1f014 <d_print_comp_inner+0x1ef8>
   1db74:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   1db78:	f04f 0a00 	mov.w	sl, #0
   1db7c:	2a4e      	cmp	r2, #78	; 0x4e
   1db7e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
   1db82:	f1a2 001c 	sub.w	r0, r2, #28
   1db86:	f000 8787 	beq.w	1ea98 <d_print_comp_inner+0x197c>
   1db8a:	f200 8782 	bhi.w	1ea92 <d_print_comp_inner+0x1976>
   1db8e:	2804      	cmp	r0, #4
   1db90:	f240 8782 	bls.w	1ea98 <d_print_comp_inner+0x197c>
   1db94:	2a04      	cmp	r2, #4
   1db96:	d104      	bne.n	1dba2 <d_print_comp_inner+0xa86>
   1db98:	e9cd c702 	strd	ip, r7, [sp, #8]
   1db9c:	ab02      	add	r3, sp, #8
   1db9e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1dba2:	6932      	ldr	r2, [r6, #16]
   1dba4:	2111      	movs	r1, #17
   1dba6:	4620      	mov	r0, r4
   1dba8:	f001 fb32 	bl	1f210 <d_print_comp>
   1dbac:	783b      	ldrb	r3, [r7, #0]
   1dbae:	2b04      	cmp	r3, #4
   1dbb0:	d102      	bne.n	1dbb8 <d_print_comp_inner+0xa9c>
   1dbb2:	9b02      	ldr	r3, [sp, #8]
   1dbb4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1dbb8:	eb08 1805 	add.w	r8, r8, r5, lsl #4
   1dbbc:	2720      	movs	r7, #32
   1dbbe:	f858 6c08 	ldr.w	r6, [r8, #-8]
   1dbc2:	3d01      	subs	r5, #1
   1dbc4:	2e00      	cmp	r6, #0
   1dbc6:	f000 863b 	beq.w	1e840 <d_print_comp_inner+0x1724>
   1dbca:	f1a8 0810 	sub.w	r8, r8, #16
   1dbce:	2d00      	cmp	r5, #0
   1dbd0:	d1f5      	bne.n	1dbbe <d_print_comp_inner+0xaa2>
   1dbd2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1dbd6:	f7ff bb11 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1dbda:	4fab      	ldr	r7, [pc, #684]	; (1de88 <d_print_comp_inner+0xd6c>)
   1dbdc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dbe0:	f107 0909 	add.w	r9, r7, #9
   1dbe4:	2564      	movs	r5, #100	; 0x64
   1dbe6:	f04f 0800 	mov.w	r8, #0
   1dbea:	e00b      	b.n	1dc04 <d_print_comp_inner+0xae8>
   1dbec:	460b      	mov	r3, r1
   1dbee:	3101      	adds	r1, #1
   1dbf0:	454f      	cmp	r7, r9
   1dbf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dbf6:	54e5      	strb	r5, [r4, r3]
   1dbf8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dbfc:	f000 85ff 	beq.w	1e7fe <d_print_comp_inner+0x16e2>
   1dc00:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dc04:	29ff      	cmp	r1, #255	; 0xff
   1dc06:	d1f1      	bne.n	1dbec <d_print_comp_inner+0xad0>
   1dc08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dc0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dc10:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dc14:	4620      	mov	r0, r4
   1dc16:	4798      	blx	r3
   1dc18:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc1c:	3301      	adds	r3, #1
   1dc1e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dc22:	2101      	movs	r1, #1
   1dc24:	2300      	movs	r3, #0
   1dc26:	e7e3      	b.n	1dbf0 <d_print_comp_inner+0xad4>
   1dc28:	4f98      	ldr	r7, [pc, #608]	; (1de8c <d_print_comp_inner+0xd70>)
   1dc2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dc2e:	f107 0907 	add.w	r9, r7, #7
   1dc32:	257b      	movs	r5, #123	; 0x7b
   1dc34:	f04f 0800 	mov.w	r8, #0
   1dc38:	e00b      	b.n	1dc52 <d_print_comp_inner+0xb36>
   1dc3a:	460b      	mov	r3, r1
   1dc3c:	3101      	adds	r1, #1
   1dc3e:	454f      	cmp	r7, r9
   1dc40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dc44:	54e5      	strb	r5, [r4, r3]
   1dc46:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dc4a:	f000 8546 	beq.w	1e6da <d_print_comp_inner+0x15be>
   1dc4e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dc52:	29ff      	cmp	r1, #255	; 0xff
   1dc54:	d1f1      	bne.n	1dc3a <d_print_comp_inner+0xb1e>
   1dc56:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dc5a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dc5e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dc62:	4620      	mov	r0, r4
   1dc64:	4798      	blx	r3
   1dc66:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc6a:	3301      	adds	r3, #1
   1dc6c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dc70:	2101      	movs	r1, #1
   1dc72:	2300      	movs	r3, #0
   1dc74:	e7e3      	b.n	1dc3e <d_print_comp_inner+0xb22>
   1dc76:	4f86      	ldr	r7, [pc, #536]	; (1de90 <d_print_comp_inner+0xd74>)
   1dc78:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dc7c:	f107 091b 	add.w	r9, r7, #27
   1dc80:	2567      	movs	r5, #103	; 0x67
   1dc82:	f04f 0800 	mov.w	r8, #0
   1dc86:	e00b      	b.n	1dca0 <d_print_comp_inner+0xb84>
   1dc88:	460b      	mov	r3, r1
   1dc8a:	3101      	adds	r1, #1
   1dc8c:	45b9      	cmp	r9, r7
   1dc8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dc92:	54e5      	strb	r5, [r4, r3]
   1dc94:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dc98:	f43f aad3 	beq.w	1d242 <d_print_comp_inner+0x126>
   1dc9c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dca0:	29ff      	cmp	r1, #255	; 0xff
   1dca2:	d1f1      	bne.n	1dc88 <d_print_comp_inner+0xb6c>
   1dca4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dca8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dcac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	4798      	blx	r3
   1dcb4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dcb8:	3301      	adds	r3, #1
   1dcba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dcbe:	2101      	movs	r1, #1
   1dcc0:	2300      	movs	r3, #0
   1dcc2:	e7e3      	b.n	1dc8c <d_print_comp_inner+0xb70>
   1dcc4:	4f73      	ldr	r7, [pc, #460]	; (1de94 <d_print_comp_inner+0xd78>)
   1dcc6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dcca:	f107 091c 	add.w	r9, r7, #28
   1dcce:	2567      	movs	r5, #103	; 0x67
   1dcd0:	f04f 0800 	mov.w	r8, #0
   1dcd4:	e00b      	b.n	1dcee <d_print_comp_inner+0xbd2>
   1dcd6:	460b      	mov	r3, r1
   1dcd8:	3101      	adds	r1, #1
   1dcda:	45b9      	cmp	r9, r7
   1dcdc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dce0:	54e5      	strb	r5, [r4, r3]
   1dce2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dce6:	f43f aaac 	beq.w	1d242 <d_print_comp_inner+0x126>
   1dcea:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dcee:	29ff      	cmp	r1, #255	; 0xff
   1dcf0:	d1f1      	bne.n	1dcd6 <d_print_comp_inner+0xbba>
   1dcf2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dcf6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dcfa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dcfe:	4620      	mov	r0, r4
   1dd00:	4798      	blx	r3
   1dd02:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd06:	3301      	adds	r3, #1
   1dd08:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd0c:	2101      	movs	r1, #1
   1dd0e:	2300      	movs	r3, #0
   1dd10:	e7e3      	b.n	1dcda <d_print_comp_inner+0xbbe>
   1dd12:	6913      	ldr	r3, [r2, #16]
   1dd14:	781b      	ldrb	r3, [r3, #0]
   1dd16:	2b39      	cmp	r3, #57	; 0x39
   1dd18:	f47f aa6d 	bne.w	1d1f6 <d_print_comp_inner+0xda>
   1dd1c:	68d2      	ldr	r2, [r2, #12]
   1dd1e:	68d3      	ldr	r3, [r2, #12]
   1dd20:	681b      	ldr	r3, [r3, #0]
   1dd22:	7859      	ldrb	r1, [r3, #1]
   1dd24:	2963      	cmp	r1, #99	; 0x63
   1dd26:	f001 8081 	beq.w	1ee2c <d_print_comp_inner+0x1d10>
   1dd2a:	4632      	mov	r2, r6
   1dd2c:	2111      	movs	r1, #17
   1dd2e:	4620      	mov	r0, r4
   1dd30:	f002 fb16 	bl	20360 <d_maybe_print_fold_expression>
   1dd34:	2800      	cmp	r0, #0
   1dd36:	f47f aa61 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1dd3a:	4632      	mov	r2, r6
   1dd3c:	2111      	movs	r1, #17
   1dd3e:	4620      	mov	r0, r4
   1dd40:	f002 fc38 	bl	205b4 <d_maybe_print_designated_init>
   1dd44:	2800      	cmp	r0, #0
   1dd46:	f47f aa59 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1dd4a:	68f3      	ldr	r3, [r6, #12]
   1dd4c:	781a      	ldrb	r2, [r3, #0]
   1dd4e:	2a32      	cmp	r2, #50	; 0x32
   1dd50:	f001 81dd 	beq.w	1f10e <d_print_comp_inner+0x1ff2>
   1dd54:	68db      	ldr	r3, [r3, #12]
   1dd56:	4950      	ldr	r1, [pc, #320]	; (1de98 <d_print_comp_inner+0xd7c>)
   1dd58:	6818      	ldr	r0, [r3, #0]
   1dd5a:	f005 fac5 	bl	232e8 <strcmp>
   1dd5e:	6933      	ldr	r3, [r6, #16]
   1dd60:	b920      	cbnz	r0, 1dd6c <d_print_comp_inner+0xc50>
   1dd62:	68da      	ldr	r2, [r3, #12]
   1dd64:	7811      	ldrb	r1, [r2, #0]
   1dd66:	2903      	cmp	r1, #3
   1dd68:	f001 8200 	beq.w	1f16c <d_print_comp_inner+0x2050>
   1dd6c:	68da      	ldr	r2, [r3, #12]
   1dd6e:	2111      	movs	r1, #17
   1dd70:	4620      	mov	r0, r4
   1dd72:	f002 fa87 	bl	20284 <d_print_subexpr>
   1dd76:	68f5      	ldr	r5, [r6, #12]
   1dd78:	4948      	ldr	r1, [pc, #288]	; (1de9c <d_print_comp_inner+0xd80>)
   1dd7a:	68eb      	ldr	r3, [r5, #12]
   1dd7c:	681f      	ldr	r7, [r3, #0]
   1dd7e:	4638      	mov	r0, r7
   1dd80:	f005 fab2 	bl	232e8 <strcmp>
   1dd84:	2800      	cmp	r0, #0
   1dd86:	f001 81e1 	beq.w	1f14c <d_print_comp_inner+0x2030>
   1dd8a:	4943      	ldr	r1, [pc, #268]	; (1de98 <d_print_comp_inner+0xd7c>)
   1dd8c:	4638      	mov	r0, r7
   1dd8e:	f005 faab 	bl	232e8 <strcmp>
   1dd92:	2800      	cmp	r0, #0
   1dd94:	f041 81f8 	bne.w	1f188 <d_print_comp_inner+0x206c>
   1dd98:	6933      	ldr	r3, [r6, #16]
   1dd9a:	2111      	movs	r1, #17
   1dd9c:	691a      	ldr	r2, [r3, #16]
   1dd9e:	4620      	mov	r0, r4
   1dda0:	f002 fa70 	bl	20284 <d_print_subexpr>
   1dda4:	68f3      	ldr	r3, [r6, #12]
   1dda6:	781a      	ldrb	r2, [r3, #0]
   1dda8:	2a32      	cmp	r2, #50	; 0x32
   1ddaa:	f47f aa27 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1ddae:	68db      	ldr	r3, [r3, #12]
   1ddb0:	689a      	ldr	r2, [r3, #8]
   1ddb2:	2a01      	cmp	r2, #1
   1ddb4:	f47f aa22 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1ddb8:	685b      	ldr	r3, [r3, #4]
   1ddba:	781b      	ldrb	r3, [r3, #0]
   1ddbc:	2b3e      	cmp	r3, #62	; 0x3e
   1ddbe:	f47f aa1d 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1ddc2:	2129      	movs	r1, #41	; 0x29
   1ddc4:	f7ff bb1e 	b.w	1d404 <d_print_comp_inner+0x2e8>
   1ddc8:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
   1ddcc:	783b      	ldrb	r3, [r7, #0]
   1ddce:	2b32      	cmp	r3, #50	; 0x32
   1ddd0:	f000 86b1 	beq.w	1eb36 <d_print_comp_inner+0x1a1a>
   1ddd4:	2b34      	cmp	r3, #52	; 0x34
   1ddd6:	f041 820d 	bne.w	1f1f4 <d_print_comp_inner+0x20d8>
   1ddda:	2128      	movs	r1, #40	; 0x28
   1dddc:	f7fc ff64 	bl	1aca8 <d_append_char>
   1dde0:	4620      	mov	r0, r4
   1dde2:	2111      	movs	r1, #17
   1dde4:	68fa      	ldr	r2, [r7, #12]
   1dde6:	f001 fa13 	bl	1f210 <d_print_comp>
   1ddea:	2129      	movs	r1, #41	; 0x29
   1ddec:	4620      	mov	r0, r4
   1ddee:	f7fc ff5b 	bl	1aca8 <d_append_char>
   1ddf2:	462a      	mov	r2, r5
   1ddf4:	2111      	movs	r1, #17
   1ddf6:	4620      	mov	r0, r4
   1ddf8:	b015      	add	sp, #84	; 0x54
   1ddfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ddfe:	f002 ba41 	b.w	20284 <d_print_subexpr>
   1de02:	68d2      	ldr	r2, [r2, #12]
   1de04:	2111      	movs	r1, #17
   1de06:	4620      	mov	r0, r4
   1de08:	b015      	add	sp, #84	; 0x54
   1de0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de0e:	f002 b83d 	b.w	1fe8c <d_print_expr_op>
   1de12:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
   1de16:	2b00      	cmp	r3, #0
   1de18:	f040 871b 	bne.w	1ec52 <d_print_comp_inner+0x1b36>
   1de1c:	68f2      	ldr	r2, [r6, #12]
   1de1e:	4b20      	ldr	r3, [pc, #128]	; (1dea0 <d_print_comp_inner+0xd84>)
   1de20:	68d1      	ldr	r1, [r2, #12]
   1de22:	4299      	cmp	r1, r3
   1de24:	d00f      	beq.n	1de46 <d_print_comp_inner+0xd2a>
   1de26:	2111      	movs	r1, #17
   1de28:	4620      	mov	r0, r4
   1de2a:	f001 f9f1 	bl	1f210 <d_print_comp>
   1de2e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1de32:	29ff      	cmp	r1, #255	; 0xff
   1de34:	f001 80be 	beq.w	1efb4 <d_print_comp_inner+0x1e98>
   1de38:	2320      	movs	r3, #32
   1de3a:	1c4a      	adds	r2, r1, #1
   1de3c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1de40:	5463      	strb	r3, [r4, r1]
   1de42:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1de46:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   1de4a:	f1b8 0f00 	cmp.w	r8, #0
   1de4e:	f000 8540 	beq.w	1e8d2 <d_print_comp_inner+0x17b6>
   1de52:	4914      	ldr	r1, [pc, #80]	; (1dea4 <d_print_comp_inner+0xd88>)
   1de54:	e5c1      	b.n	1d9da <d_print_comp_inner+0x8be>
   1de56:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1de5a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1de5e:	9307      	str	r3, [sp, #28]
   1de60:	f10d 0810 	add.w	r8, sp, #16
   1de64:	2300      	movs	r3, #0
   1de66:	46e1      	mov	r9, ip
   1de68:	f8cd c010 	str.w	ip, [sp, #16]
   1de6c:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
   1de70:	9205      	str	r2, [sp, #20]
   1de72:	9306      	str	r3, [sp, #24]
   1de74:	f1bc 0f00 	cmp.w	ip, #0
   1de78:	f001 813d 	beq.w	1f0f6 <d_print_comp_inner+0x1fda>
   1de7c:	2701      	movs	r7, #1
   1de7e:	4665      	mov	r5, ip
   1de80:	46be      	mov	lr, r7
   1de82:	4694      	mov	ip, r2
   1de84:	4646      	mov	r6, r8
   1de86:	e028      	b.n	1deda <d_print_comp_inner+0xdbe>
   1de88:	20003600 	.word	0x20003600
   1de8c:	20003660 	.word	0x20003660
   1de90:	20003640 	.word	0x20003640
   1de94:	20003620 	.word	0x20003620
   1de98:	200035cc 	.word	0x200035cc
   1de9c:	200035d0 	.word	0x200035d0
   1dea0:	20002d28 	.word	0x20002d28
   1dea4:	2000359c 	.word	0x2000359c
   1dea8:	68ab      	ldr	r3, [r5, #8]
   1deaa:	b9a3      	cbnz	r3, 1ded6 <d_print_comp_inner+0xdba>
   1deac:	2f03      	cmp	r7, #3
   1deae:	f63f a9a2 	bhi.w	1d1f6 <d_print_comp_inner+0xda>
   1deb2:	ab14      	add	r3, sp, #80	; 0x50
   1deb4:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
   1deb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1debc:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   1dec0:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1dec4:	f84b 6c40 	str.w	r6, [fp, #-64]
   1dec8:	eb08 1607 	add.w	r6, r8, r7, lsl #4
   1decc:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
   1ded0:	3701      	adds	r7, #1
   1ded2:	f8c5 e008 	str.w	lr, [r5, #8]
   1ded6:	682d      	ldr	r5, [r5, #0]
   1ded8:	b125      	cbz	r5, 1dee4 <d_print_comp_inner+0xdc8>
   1deda:	686b      	ldr	r3, [r5, #4]
   1dedc:	781b      	ldrb	r3, [r3, #0]
   1dede:	3b19      	subs	r3, #25
   1dee0:	2b02      	cmp	r3, #2
   1dee2:	d9e1      	bls.n	1dea8 <d_print_comp_inner+0xd8c>
   1dee4:	f8dc 2010 	ldr.w	r2, [ip, #16]
   1dee8:	2111      	movs	r1, #17
   1deea:	4620      	mov	r0, r4
   1deec:	4666      	mov	r6, ip
   1deee:	f001 f98f 	bl	1f210 <d_print_comp>
   1def2:	9b06      	ldr	r3, [sp, #24]
   1def4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1def8:	2b00      	cmp	r3, #0
   1defa:	f47f a97f 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1defe:	2f01      	cmp	r7, #1
   1df00:	d00c      	beq.n	1df1c <d_print_comp_inner+0xe00>
   1df02:	eb08 1807 	add.w	r8, r8, r7, lsl #4
   1df06:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1df0a:	3f01      	subs	r7, #1
   1df0c:	2111      	movs	r1, #17
   1df0e:	4620      	mov	r0, r4
   1df10:	f001 f9ac 	bl	1f26c <d_print_mod>
   1df14:	2f01      	cmp	r7, #1
   1df16:	f1a8 0810 	sub.w	r8, r8, #16
   1df1a:	d1f4      	bne.n	1df06 <d_print_comp_inner+0xdea>
   1df1c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1df20:	4632      	mov	r2, r6
   1df22:	2111      	movs	r1, #17
   1df24:	4620      	mov	r0, r4
   1df26:	f001 fecd 	bl	1fcc4 <d_print_array_type>
   1df2a:	f7ff b967 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1df2e:	4fc6      	ldr	r7, [pc, #792]	; (1e248 <d_print_comp_inner+0x112c>)
   1df30:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1df34:	f107 0919 	add.w	r9, r7, #25
   1df38:	2563      	movs	r5, #99	; 0x63
   1df3a:	f04f 0800 	mov.w	r8, #0
   1df3e:	e00b      	b.n	1df58 <d_print_comp_inner+0xe3c>
   1df40:	460b      	mov	r3, r1
   1df42:	3101      	adds	r1, #1
   1df44:	45b9      	cmp	r9, r7
   1df46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1df4a:	54e5      	strb	r5, [r4, r3]
   1df4c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1df50:	f43f a977 	beq.w	1d242 <d_print_comp_inner+0x126>
   1df54:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1df58:	29ff      	cmp	r1, #255	; 0xff
   1df5a:	d1f1      	bne.n	1df40 <d_print_comp_inner+0xe24>
   1df5c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1df60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1df64:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1df68:	4620      	mov	r0, r4
   1df6a:	4798      	blx	r3
   1df6c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1df70:	3301      	adds	r3, #1
   1df72:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1df76:	2101      	movs	r1, #1
   1df78:	2300      	movs	r3, #0
   1df7a:	e7e3      	b.n	1df44 <d_print_comp_inner+0xe28>
   1df7c:	4fb3      	ldr	r7, [pc, #716]	; (1e24c <d_print_comp_inner+0x1130>)
   1df7e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1df82:	f107 0910 	add.w	r9, r7, #16
   1df86:	2576      	movs	r5, #118	; 0x76
   1df88:	f04f 0800 	mov.w	r8, #0
   1df8c:	e00b      	b.n	1dfa6 <d_print_comp_inner+0xe8a>
   1df8e:	460b      	mov	r3, r1
   1df90:	3101      	adds	r1, #1
   1df92:	45b9      	cmp	r9, r7
   1df94:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1df98:	54e5      	strb	r5, [r4, r3]
   1df9a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1df9e:	f43f a950 	beq.w	1d242 <d_print_comp_inner+0x126>
   1dfa2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dfa6:	29ff      	cmp	r1, #255	; 0xff
   1dfa8:	d1f1      	bne.n	1df8e <d_print_comp_inner+0xe72>
   1dfaa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dfae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dfb2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dfb6:	4620      	mov	r0, r4
   1dfb8:	4798      	blx	r3
   1dfba:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dfbe:	3301      	adds	r3, #1
   1dfc0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dfc4:	2101      	movs	r1, #1
   1dfc6:	2300      	movs	r3, #0
   1dfc8:	e7e3      	b.n	1df92 <d_print_comp_inner+0xe76>
   1dfca:	4fa1      	ldr	r7, [pc, #644]	; (1e250 <d_print_comp_inner+0x1134>)
   1dfcc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1dfd0:	f107 0914 	add.w	r9, r7, #20
   1dfd4:	256e      	movs	r5, #110	; 0x6e
   1dfd6:	f04f 0800 	mov.w	r8, #0
   1dfda:	e00b      	b.n	1dff4 <d_print_comp_inner+0xed8>
   1dfdc:	460b      	mov	r3, r1
   1dfde:	3101      	adds	r1, #1
   1dfe0:	45b9      	cmp	r9, r7
   1dfe2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dfe6:	54e5      	strb	r5, [r4, r3]
   1dfe8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dfec:	f43f a929 	beq.w	1d242 <d_print_comp_inner+0x126>
   1dff0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dff4:	29ff      	cmp	r1, #255	; 0xff
   1dff6:	d1f1      	bne.n	1dfdc <d_print_comp_inner+0xec0>
   1dff8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dffc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e000:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e004:	4620      	mov	r0, r4
   1e006:	4798      	blx	r3
   1e008:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e00c:	3301      	adds	r3, #1
   1e00e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e012:	2101      	movs	r1, #1
   1e014:	2300      	movs	r3, #0
   1e016:	e7e3      	b.n	1dfe0 <d_print_comp_inner+0xec4>
   1e018:	4f8e      	ldr	r7, [pc, #568]	; (1e254 <d_print_comp_inner+0x1138>)
   1e01a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e01e:	f107 0918 	add.w	r9, r7, #24
   1e022:	2554      	movs	r5, #84	; 0x54
   1e024:	f04f 0800 	mov.w	r8, #0
   1e028:	e00b      	b.n	1e042 <d_print_comp_inner+0xf26>
   1e02a:	460b      	mov	r3, r1
   1e02c:	3101      	adds	r1, #1
   1e02e:	45b9      	cmp	r9, r7
   1e030:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e034:	54e5      	strb	r5, [r4, r3]
   1e036:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e03a:	f43f a902 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e03e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e042:	29ff      	cmp	r1, #255	; 0xff
   1e044:	d1f1      	bne.n	1e02a <d_print_comp_inner+0xf0e>
   1e046:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e04a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e04e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e052:	4620      	mov	r0, r4
   1e054:	4798      	blx	r3
   1e056:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e05a:	3301      	adds	r3, #1
   1e05c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e060:	2101      	movs	r1, #1
   1e062:	2300      	movs	r3, #0
   1e064:	e7e3      	b.n	1e02e <d_print_comp_inner+0xf12>
   1e066:	4f7c      	ldr	r7, [pc, #496]	; (1e258 <d_print_comp_inner+0x113c>)
   1e068:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e06c:	f107 0915 	add.w	r9, r7, #21
   1e070:	2554      	movs	r5, #84	; 0x54
   1e072:	f04f 0800 	mov.w	r8, #0
   1e076:	e00b      	b.n	1e090 <d_print_comp_inner+0xf74>
   1e078:	460b      	mov	r3, r1
   1e07a:	3101      	adds	r1, #1
   1e07c:	45b9      	cmp	r9, r7
   1e07e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e082:	54e5      	strb	r5, [r4, r3]
   1e084:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e088:	f43f a8db 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e08c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e090:	29ff      	cmp	r1, #255	; 0xff
   1e092:	d1f1      	bne.n	1e078 <d_print_comp_inner+0xf5c>
   1e094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e098:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e09c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e0a0:	4620      	mov	r0, r4
   1e0a2:	4798      	blx	r3
   1e0a4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e0a8:	3301      	adds	r3, #1
   1e0aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e0ae:	2101      	movs	r1, #1
   1e0b0:	2300      	movs	r3, #0
   1e0b2:	e7e3      	b.n	1e07c <d_print_comp_inner+0xf60>
   1e0b4:	4f69      	ldr	r7, [pc, #420]	; (1e25c <d_print_comp_inner+0x1140>)
   1e0b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e0ba:	f107 0912 	add.w	r9, r7, #18
   1e0be:	2567      	movs	r5, #103	; 0x67
   1e0c0:	f04f 0800 	mov.w	r8, #0
   1e0c4:	e00b      	b.n	1e0de <d_print_comp_inner+0xfc2>
   1e0c6:	460b      	mov	r3, r1
   1e0c8:	3101      	adds	r1, #1
   1e0ca:	45b9      	cmp	r9, r7
   1e0cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e0d0:	54e5      	strb	r5, [r4, r3]
   1e0d2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e0d6:	f43f a8b4 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e0da:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e0de:	29ff      	cmp	r1, #255	; 0xff
   1e0e0:	d1f1      	bne.n	1e0c6 <d_print_comp_inner+0xfaa>
   1e0e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e0e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e0ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e0ee:	4620      	mov	r0, r4
   1e0f0:	4798      	blx	r3
   1e0f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e0f6:	3301      	adds	r3, #1
   1e0f8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e0fc:	2101      	movs	r1, #1
   1e0fe:	2300      	movs	r3, #0
   1e100:	e7e3      	b.n	1e0ca <d_print_comp_inner+0xfae>
   1e102:	4f57      	ldr	r7, [pc, #348]	; (1e260 <d_print_comp_inner+0x1144>)
   1e104:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e108:	f107 090e 	add.w	r9, r7, #14
   1e10c:	256a      	movs	r5, #106	; 0x6a
   1e10e:	f04f 0800 	mov.w	r8, #0
   1e112:	e00b      	b.n	1e12c <d_print_comp_inner+0x1010>
   1e114:	460b      	mov	r3, r1
   1e116:	3101      	adds	r1, #1
   1e118:	45b9      	cmp	r9, r7
   1e11a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e11e:	54e5      	strb	r5, [r4, r3]
   1e120:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e124:	f43f a88d 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e128:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e12c:	29ff      	cmp	r1, #255	; 0xff
   1e12e:	d1f1      	bne.n	1e114 <d_print_comp_inner+0xff8>
   1e130:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e134:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e138:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e13c:	4620      	mov	r0, r4
   1e13e:	4798      	blx	r3
   1e140:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e144:	3301      	adds	r3, #1
   1e146:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e14a:	2101      	movs	r1, #1
   1e14c:	2300      	movs	r3, #0
   1e14e:	e7e3      	b.n	1e118 <d_print_comp_inner+0xffc>
   1e150:	4f44      	ldr	r7, [pc, #272]	; (1e264 <d_print_comp_inner+0x1148>)
   1e152:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e156:	f107 0908 	add.w	r9, r7, #8
   1e15a:	256f      	movs	r5, #111	; 0x6f
   1e15c:	f04f 0800 	mov.w	r8, #0
   1e160:	e00b      	b.n	1e17a <d_print_comp_inner+0x105e>
   1e162:	460b      	mov	r3, r1
   1e164:	3101      	adds	r1, #1
   1e166:	45b9      	cmp	r9, r7
   1e168:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e16c:	54e5      	strb	r5, [r4, r3]
   1e16e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e172:	f000 8295 	beq.w	1e6a0 <d_print_comp_inner+0x1584>
   1e176:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e17a:	29ff      	cmp	r1, #255	; 0xff
   1e17c:	d1f1      	bne.n	1e162 <d_print_comp_inner+0x1046>
   1e17e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e182:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e186:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e18a:	4620      	mov	r0, r4
   1e18c:	4798      	blx	r3
   1e18e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e192:	3301      	adds	r3, #1
   1e194:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e198:	2101      	movs	r1, #1
   1e19a:	2300      	movs	r3, #0
   1e19c:	e7e3      	b.n	1e166 <d_print_comp_inner+0x104a>
   1e19e:	4f31      	ldr	r7, [pc, #196]	; (1e264 <d_print_comp_inner+0x1148>)
   1e1a0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e1a4:	f107 0908 	add.w	r9, r7, #8
   1e1a8:	256f      	movs	r5, #111	; 0x6f
   1e1aa:	f04f 0800 	mov.w	r8, #0
   1e1ae:	e00b      	b.n	1e1c8 <d_print_comp_inner+0x10ac>
   1e1b0:	460b      	mov	r3, r1
   1e1b2:	3101      	adds	r1, #1
   1e1b4:	45b9      	cmp	r9, r7
   1e1b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e1ba:	54e5      	strb	r5, [r4, r3]
   1e1bc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e1c0:	f43f a853 	beq.w	1d26a <d_print_comp_inner+0x14e>
   1e1c4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e1c8:	29ff      	cmp	r1, #255	; 0xff
   1e1ca:	d1f1      	bne.n	1e1b0 <d_print_comp_inner+0x1094>
   1e1cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e1d0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e1d4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e1d8:	4620      	mov	r0, r4
   1e1da:	4798      	blx	r3
   1e1dc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e1e0:	3301      	adds	r3, #1
   1e1e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e1e6:	2101      	movs	r1, #1
   1e1e8:	2300      	movs	r3, #0
   1e1ea:	e7e3      	b.n	1e1b4 <d_print_comp_inner+0x1098>
   1e1ec:	68d2      	ldr	r2, [r2, #12]
   1e1ee:	2111      	movs	r1, #17
   1e1f0:	f001 f80e 	bl	1f210 <d_print_comp>
   1e1f4:	f7ff b839 	b.w	1d26a <d_print_comp_inner+0x14e>
   1e1f8:	4f1b      	ldr	r7, [pc, #108]	; (1e268 <d_print_comp_inner+0x114c>)
   1e1fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e1fe:	f107 090d 	add.w	r9, r7, #13
   1e202:	256a      	movs	r5, #106	; 0x6a
   1e204:	f04f 0800 	mov.w	r8, #0
   1e208:	e00b      	b.n	1e222 <d_print_comp_inner+0x1106>
   1e20a:	460b      	mov	r3, r1
   1e20c:	3101      	adds	r1, #1
   1e20e:	45b9      	cmp	r9, r7
   1e210:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e214:	54e5      	strb	r5, [r4, r3]
   1e216:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e21a:	f43f a812 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e21e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e222:	29ff      	cmp	r1, #255	; 0xff
   1e224:	d1f1      	bne.n	1e20a <d_print_comp_inner+0x10ee>
   1e226:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e22a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e22e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e232:	4620      	mov	r0, r4
   1e234:	4798      	blx	r3
   1e236:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e23a:	3301      	adds	r3, #1
   1e23c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e240:	2101      	movs	r1, #1
   1e242:	2300      	movs	r3, #0
   1e244:	e7e3      	b.n	1e20e <d_print_comp_inner+0x10f2>
   1e246:	bf00      	nop
   1e248:	200034d8 	.word	0x200034d8
   1e24c:	200034c4 	.word	0x200034c4
   1e250:	200034c0 	.word	0x200034c0
   1e254:	20003530 	.word	0x20003530
   1e258:	20003518 	.word	0x20003518
   1e25c:	20003504 	.word	0x20003504
   1e260:	200034f4 	.word	0x200034f4
   1e264:	200035bc 	.word	0x200035bc
   1e268:	200035f0 	.word	0x200035f0
   1e26c:	2300      	movs	r3, #0
   1e26e:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
   1e272:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
   1e276:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1e27a:	2111      	movs	r1, #17
   1e27c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1e280:	68d2      	ldr	r2, [r2, #12]
   1e282:	f000 ffc5 	bl	1f210 <d_print_comp>
   1e286:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1e28a:	2b3c      	cmp	r3, #60	; 0x3c
   1e28c:	f000 857c 	beq.w	1ed88 <d_print_comp_inner+0x1c6c>
   1e290:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e294:	29ff      	cmp	r1, #255	; 0xff
   1e296:	f000 8567 	beq.w	1ed68 <d_print_comp_inner+0x1c4c>
   1e29a:	1c4b      	adds	r3, r1, #1
   1e29c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e2a0:	233c      	movs	r3, #60	; 0x3c
   1e2a2:	5463      	strb	r3, [r4, r1]
   1e2a4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e2a8:	6932      	ldr	r2, [r6, #16]
   1e2aa:	2111      	movs	r1, #17
   1e2ac:	4620      	mov	r0, r4
   1e2ae:	f000 ffaf 	bl	1f210 <d_print_comp>
   1e2b2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1e2b6:	2b3e      	cmp	r3, #62	; 0x3e
   1e2b8:	f000 8550 	beq.w	1ed5c <d_print_comp_inner+0x1c40>
   1e2bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e2c0:	29ff      	cmp	r1, #255	; 0xff
   1e2c2:	f000 853b 	beq.w	1ed3c <d_print_comp_inner+0x1c20>
   1e2c6:	1c4b      	adds	r3, r1, #1
   1e2c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e2cc:	233e      	movs	r3, #62	; 0x3e
   1e2ce:	5463      	strb	r3, [r4, r1]
   1e2d0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e2d4:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1e2d8:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
   1e2dc:	f7fe bf8e 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1e2e0:	4fc4      	ldr	r7, [pc, #784]	; (1e5f4 <d_print_comp_inner+0x14d8>)
   1e2e2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e2e6:	f107 0907 	add.w	r9, r7, #7
   1e2ea:	2556      	movs	r5, #86	; 0x56
   1e2ec:	f04f 0800 	mov.w	r8, #0
   1e2f0:	e00b      	b.n	1e30a <d_print_comp_inner+0x11ee>
   1e2f2:	460b      	mov	r3, r1
   1e2f4:	3101      	adds	r1, #1
   1e2f6:	454f      	cmp	r7, r9
   1e2f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e2fc:	54e5      	strb	r5, [r4, r3]
   1e2fe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e302:	f43e af9e 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e306:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e30a:	29ff      	cmp	r1, #255	; 0xff
   1e30c:	d1f1      	bne.n	1e2f2 <d_print_comp_inner+0x11d6>
   1e30e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e312:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e316:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e31a:	4620      	mov	r0, r4
   1e31c:	4798      	blx	r3
   1e31e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e322:	3301      	adds	r3, #1
   1e324:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e328:	2101      	movs	r1, #1
   1e32a:	2300      	movs	r3, #0
   1e32c:	e7e3      	b.n	1e2f6 <d_print_comp_inner+0x11da>
   1e32e:	4fb2      	ldr	r7, [pc, #712]	; (1e5f8 <d_print_comp_inner+0x14dc>)
   1e330:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e334:	f107 090a 	add.w	r9, r7, #10
   1e338:	2576      	movs	r5, #118	; 0x76
   1e33a:	f04f 0800 	mov.w	r8, #0
   1e33e:	e00b      	b.n	1e358 <d_print_comp_inner+0x123c>
   1e340:	460b      	mov	r3, r1
   1e342:	3101      	adds	r1, #1
   1e344:	45b9      	cmp	r9, r7
   1e346:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e34a:	54e5      	strb	r5, [r4, r3]
   1e34c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e350:	f43e af77 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e354:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e358:	29ff      	cmp	r1, #255	; 0xff
   1e35a:	d1f1      	bne.n	1e340 <d_print_comp_inner+0x1224>
   1e35c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e360:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e364:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e368:	4620      	mov	r0, r4
   1e36a:	4798      	blx	r3
   1e36c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e370:	3301      	adds	r3, #1
   1e372:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e376:	2101      	movs	r1, #1
   1e378:	2300      	movs	r3, #0
   1e37a:	e7e3      	b.n	1e344 <d_print_comp_inner+0x1228>
   1e37c:	6913      	ldr	r3, [r2, #16]
   1e37e:	781a      	ldrb	r2, [r3, #0]
   1e380:	2a3b      	cmp	r2, #59	; 0x3b
   1e382:	f47e af38 	bne.w	1d1f6 <d_print_comp_inner+0xda>
   1e386:	691b      	ldr	r3, [r3, #16]
   1e388:	781b      	ldrb	r3, [r3, #0]
   1e38a:	2b3c      	cmp	r3, #60	; 0x3c
   1e38c:	f47e af33 	bne.w	1d1f6 <d_print_comp_inner+0xda>
   1e390:	4632      	mov	r2, r6
   1e392:	2111      	movs	r1, #17
   1e394:	f001 ffe4 	bl	20360 <d_maybe_print_fold_expression>
   1e398:	2800      	cmp	r0, #0
   1e39a:	f47e af2f 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1e39e:	4632      	mov	r2, r6
   1e3a0:	2111      	movs	r1, #17
   1e3a2:	4620      	mov	r0, r4
   1e3a4:	f002 f906 	bl	205b4 <d_maybe_print_designated_init>
   1e3a8:	2800      	cmp	r0, #0
   1e3aa:	f47e af27 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1e3ae:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
   1e3b2:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
   1e3b6:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1e3ba:	4990      	ldr	r1, [pc, #576]	; (1e5fc <d_print_comp_inner+0x14e0>)
   1e3bc:	6810      	ldr	r0, [r2, #0]
   1e3be:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
   1e3c2:	f004 ff91 	bl	232e8 <strcmp>
   1e3c6:	2800      	cmp	r0, #0
   1e3c8:	f040 86e5 	bne.w	1f196 <d_print_comp_inner+0x207a>
   1e3cc:	4632      	mov	r2, r6
   1e3ce:	4620      	mov	r0, r4
   1e3d0:	2111      	movs	r1, #17
   1e3d2:	f001 ff57 	bl	20284 <d_print_subexpr>
   1e3d6:	4642      	mov	r2, r8
   1e3d8:	4620      	mov	r0, r4
   1e3da:	2111      	movs	r1, #17
   1e3dc:	f001 fd56 	bl	1fe8c <d_print_expr_op>
   1e3e0:	4620      	mov	r0, r4
   1e3e2:	463a      	mov	r2, r7
   1e3e4:	2111      	movs	r1, #17
   1e3e6:	f001 ff4d 	bl	20284 <d_print_subexpr>
   1e3ea:	4985      	ldr	r1, [pc, #532]	; (1e600 <d_print_comp_inner+0x14e4>)
   1e3ec:	4620      	mov	r0, r4
   1e3ee:	f7fc fce3 	bl	1adb8 <d_append_string>
   1e3f2:	e4fe      	b.n	1ddf2 <d_print_comp_inner+0xcd6>
   1e3f4:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   1e3f8:	2b00      	cmp	r3, #0
   1e3fa:	f43e aeff 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e3fe:	442b      	add	r3, r5
   1e400:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e404:	3d01      	subs	r5, #1
   1e406:	1e5f      	subs	r7, r3, #1
   1e408:	f04f 0800 	mov.w	r8, #0
   1e40c:	e009      	b.n	1e422 <d_print_comp_inner+0x1306>
   1e40e:	460b      	mov	r3, r1
   1e410:	3101      	adds	r1, #1
   1e412:	42af      	cmp	r7, r5
   1e414:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e418:	54e6      	strb	r6, [r4, r3]
   1e41a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e41e:	f43e aeed 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e422:	29ff      	cmp	r1, #255	; 0xff
   1e424:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e428:	d1f1      	bne.n	1e40e <d_print_comp_inner+0x12f2>
   1e42a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e42e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e432:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e436:	4620      	mov	r0, r4
   1e438:	4798      	blx	r3
   1e43a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e43e:	3301      	adds	r3, #1
   1e440:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e444:	2101      	movs	r1, #1
   1e446:	2300      	movs	r3, #0
   1e448:	e7e3      	b.n	1e412 <d_print_comp_inner+0x12f6>
   1e44a:	68d2      	ldr	r2, [r2, #12]
   1e44c:	e9d2 5300 	ldrd	r5, r3, [r2]
   1e450:	2b00      	cmp	r3, #0
   1e452:	f43e aed3 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e456:	442b      	add	r3, r5
   1e458:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e45c:	3d01      	subs	r5, #1
   1e45e:	1e5f      	subs	r7, r3, #1
   1e460:	f04f 0800 	mov.w	r8, #0
   1e464:	e009      	b.n	1e47a <d_print_comp_inner+0x135e>
   1e466:	460b      	mov	r3, r1
   1e468:	3101      	adds	r1, #1
   1e46a:	42af      	cmp	r7, r5
   1e46c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e470:	54e6      	strb	r6, [r4, r3]
   1e472:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e476:	f43e aec1 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e47a:	29ff      	cmp	r1, #255	; 0xff
   1e47c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e480:	d1f1      	bne.n	1e466 <d_print_comp_inner+0x134a>
   1e482:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e486:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e48a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e48e:	4620      	mov	r0, r4
   1e490:	4798      	blx	r3
   1e492:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e496:	3301      	adds	r3, #1
   1e498:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e49c:	2101      	movs	r1, #1
   1e49e:	2300      	movs	r3, #0
   1e4a0:	e7e3      	b.n	1e46a <d_print_comp_inner+0x134e>
   1e4a2:	4958      	ldr	r1, [pc, #352]	; (1e604 <d_print_comp_inner+0x14e8>)
   1e4a4:	4620      	mov	r0, r4
   1e4a6:	f7fc fc87 	bl	1adb8 <d_append_string>
   1e4aa:	693a      	ldr	r2, [r7, #16]
   1e4ac:	4956      	ldr	r1, [pc, #344]	; (1e608 <d_print_comp_inner+0x14ec>)
   1e4ae:	3201      	adds	r2, #1
   1e4b0:	a804      	add	r0, sp, #16
   1e4b2:	f004 f925 	bl	22700 <sprintf>
   1e4b6:	a804      	add	r0, sp, #16
   1e4b8:	f005 f962 	bl	23780 <strlen>
   1e4bc:	2800      	cmp	r0, #0
   1e4be:	f000 83fb 	beq.w	1ecb8 <d_print_comp_inner+0x1b9c>
   1e4c2:	ad04      	add	r5, sp, #16
   1e4c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e4c8:	eb05 0900 	add.w	r9, r5, r0
   1e4cc:	f04f 0800 	mov.w	r8, #0
   1e4d0:	e009      	b.n	1e4e6 <d_print_comp_inner+0x13ca>
   1e4d2:	460b      	mov	r3, r1
   1e4d4:	3101      	adds	r1, #1
   1e4d6:	45a9      	cmp	r9, r5
   1e4d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e4dc:	54e6      	strb	r6, [r4, r3]
   1e4de:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e4e2:	f000 83e9 	beq.w	1ecb8 <d_print_comp_inner+0x1b9c>
   1e4e6:	29ff      	cmp	r1, #255	; 0xff
   1e4e8:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e4ec:	d1f1      	bne.n	1e4d2 <d_print_comp_inner+0x13b6>
   1e4ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e4f2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e4f6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	4798      	blx	r3
   1e4fe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e502:	3301      	adds	r3, #1
   1e504:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e508:	2101      	movs	r1, #1
   1e50a:	2300      	movs	r3, #0
   1e50c:	e7e3      	b.n	1e4d6 <d_print_comp_inner+0x13ba>
   1e50e:	2111      	movs	r1, #17
   1e510:	6932      	ldr	r2, [r6, #16]
   1e512:	4620      	mov	r0, r4
   1e514:	f000 fe7c 	bl	1f210 <d_print_comp>
   1e518:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e51c:	29ff      	cmp	r1, #255	; 0xff
   1e51e:	f000 8299 	beq.w	1ea54 <d_print_comp_inner+0x1938>
   1e522:	1c4a      	adds	r2, r1, #1
   1e524:	235d      	movs	r3, #93	; 0x5d
   1e526:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e52a:	5463      	strb	r3, [r4, r1]
   1e52c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e530:	f7fe be64 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1e534:	2801      	cmp	r0, #1
   1e536:	f240 8196 	bls.w	1e866 <d_print_comp_inner+0x174a>
   1e53a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1e53e:	f7ff bb30 	b.w	1dba2 <d_print_comp_inner+0xa86>
   1e542:	68f2      	ldr	r2, [r6, #12]
   1e544:	4930      	ldr	r1, [pc, #192]	; (1e608 <d_print_comp_inner+0x14ec>)
   1e546:	3201      	adds	r2, #1
   1e548:	a804      	add	r0, sp, #16
   1e54a:	f004 f8d9 	bl	22700 <sprintf>
   1e54e:	a804      	add	r0, sp, #16
   1e550:	f005 f916 	bl	23780 <strlen>
   1e554:	b318      	cbz	r0, 1e59e <d_print_comp_inner+0x1482>
   1e556:	ad04      	add	r5, sp, #16
   1e558:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e55c:	182f      	adds	r7, r5, r0
   1e55e:	f04f 0800 	mov.w	r8, #0
   1e562:	e008      	b.n	1e576 <d_print_comp_inner+0x145a>
   1e564:	460b      	mov	r3, r1
   1e566:	3101      	adds	r1, #1
   1e568:	42af      	cmp	r7, r5
   1e56a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e56e:	54e6      	strb	r6, [r4, r3]
   1e570:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e574:	d015      	beq.n	1e5a2 <d_print_comp_inner+0x1486>
   1e576:	29ff      	cmp	r1, #255	; 0xff
   1e578:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e57c:	d1f2      	bne.n	1e564 <d_print_comp_inner+0x1448>
   1e57e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e582:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e586:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e58a:	4620      	mov	r0, r4
   1e58c:	4798      	blx	r3
   1e58e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e592:	3301      	adds	r3, #1
   1e594:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e598:	2101      	movs	r1, #1
   1e59a:	2300      	movs	r3, #0
   1e59c:	e7e4      	b.n	1e568 <d_print_comp_inner+0x144c>
   1e59e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e5a2:	29ff      	cmp	r1, #255	; 0xff
   1e5a4:	f47f a91a 	bne.w	1d7dc <d_print_comp_inner+0x6c0>
   1e5a8:	2500      	movs	r5, #0
   1e5aa:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e5ae:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e5b2:	4620      	mov	r0, r4
   1e5b4:	4798      	blx	r3
   1e5b6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e5ba:	2201      	movs	r2, #1
   1e5bc:	4413      	add	r3, r2
   1e5be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e5c2:	4629      	mov	r1, r5
   1e5c4:	f7ff b90b 	b.w	1d7de <d_print_comp_inner+0x6c2>
   1e5c8:	687d      	ldr	r5, [r7, #4]
   1e5ca:	782b      	ldrb	r3, [r5, #0]
   1e5cc:	3b61      	subs	r3, #97	; 0x61
   1e5ce:	2b19      	cmp	r3, #25
   1e5d0:	f240 832d 	bls.w	1ec2e <d_print_comp_inner+0x1b12>
   1e5d4:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1e5d8:	5deb      	ldrb	r3, [r5, r7]
   1e5da:	2b20      	cmp	r3, #32
   1e5dc:	bf18      	it	ne
   1e5de:	4647      	movne	r7, r8
   1e5e0:	2f00      	cmp	r7, #0
   1e5e2:	f43e ae0b 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e5e6:	3d01      	subs	r5, #1
   1e5e8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e5ec:	442f      	add	r7, r5
   1e5ee:	f04f 0800 	mov.w	r8, #0
   1e5f2:	e015      	b.n	1e620 <d_print_comp_inner+0x1504>
   1e5f4:	20003458 	.word	0x20003458
   1e5f8:	2000344c 	.word	0x2000344c
   1e5fc:	200035d4 	.word	0x200035d4
   1e600:	200035d8 	.word	0x200035d8
   1e604:	20003410 	.word	0x20003410
   1e608:	200033c0 	.word	0x200033c0
   1e60c:	460b      	mov	r3, r1
   1e60e:	3101      	adds	r1, #1
   1e610:	42af      	cmp	r7, r5
   1e612:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e616:	54e6      	strb	r6, [r4, r3]
   1e618:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e61c:	f43e adee 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e620:	29ff      	cmp	r1, #255	; 0xff
   1e622:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e626:	d1f1      	bne.n	1e60c <d_print_comp_inner+0x14f0>
   1e628:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e62c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e630:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e634:	4620      	mov	r0, r4
   1e636:	4798      	blx	r3
   1e638:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e63c:	3301      	adds	r3, #1
   1e63e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e642:	2101      	movs	r1, #1
   1e644:	2300      	movs	r3, #0
   1e646:	e7e3      	b.n	1e610 <d_print_comp_inner+0x14f4>
   1e648:	4fcc      	ldr	r7, [pc, #816]	; (1e97c <d_print_comp_inner+0x1860>)
   1e64a:	6932      	ldr	r2, [r6, #16]
   1e64c:	2111      	movs	r1, #17
   1e64e:	4620      	mov	r0, r4
   1e650:	f000 fdde 	bl	1f210 <d_print_comp>
   1e654:	f107 0904 	add.w	r9, r7, #4
   1e658:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e65c:	2520      	movs	r5, #32
   1e65e:	f04f 0800 	mov.w	r8, #0
   1e662:	e00b      	b.n	1e67c <d_print_comp_inner+0x1560>
   1e664:	460b      	mov	r3, r1
   1e666:	3101      	adds	r1, #1
   1e668:	45b9      	cmp	r9, r7
   1e66a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e66e:	54e5      	strb	r5, [r4, r3]
   1e670:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e674:	f43e ade5 	beq.w	1d242 <d_print_comp_inner+0x126>
   1e678:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e67c:	29ff      	cmp	r1, #255	; 0xff
   1e67e:	d1f1      	bne.n	1e664 <d_print_comp_inner+0x1548>
   1e680:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e684:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e688:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e68c:	4620      	mov	r0, r4
   1e68e:	4798      	blx	r3
   1e690:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e694:	3301      	adds	r3, #1
   1e696:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e69a:	2101      	movs	r1, #1
   1e69c:	2300      	movs	r3, #0
   1e69e:	e7e3      	b.n	1e668 <d_print_comp_inner+0x154c>
   1e6a0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1e6a4:	b133      	cbz	r3, 1e6b4 <d_print_comp_inner+0x1598>
   1e6a6:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   1e6aa:	9104      	str	r1, [sp, #16]
   1e6ac:	aa04      	add	r2, sp, #16
   1e6ae:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   1e6b2:	9305      	str	r3, [sp, #20]
   1e6b4:	68f2      	ldr	r2, [r6, #12]
   1e6b6:	7813      	ldrb	r3, [r2, #0]
   1e6b8:	2b04      	cmp	r3, #4
   1e6ba:	f000 8207 	beq.w	1eacc <d_print_comp_inner+0x19b0>
   1e6be:	2111      	movs	r1, #17
   1e6c0:	4620      	mov	r0, r4
   1e6c2:	f000 fda5 	bl	1f210 <d_print_comp>
   1e6c6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1e6ca:	2b00      	cmp	r3, #0
   1e6cc:	f43e ad96 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e6d0:	9b04      	ldr	r3, [sp, #16]
   1e6d2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e6d6:	f7fe bd91 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1e6da:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1e6de:	68f2      	ldr	r2, [r6, #12]
   1e6e0:	4fa7      	ldr	r7, [pc, #668]	; (1e980 <d_print_comp_inner+0x1864>)
   1e6e2:	3301      	adds	r3, #1
   1e6e4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1e6e8:	2111      	movs	r1, #17
   1e6ea:	4620      	mov	r0, r4
   1e6ec:	f000 fd90 	bl	1f210 <d_print_comp>
   1e6f0:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1e6f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e6f8:	3b01      	subs	r3, #1
   1e6fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1e6fe:	f107 0901 	add.w	r9, r7, #1
   1e702:	2529      	movs	r5, #41	; 0x29
   1e704:	f04f 0800 	mov.w	r8, #0
   1e708:	e00a      	b.n	1e720 <d_print_comp_inner+0x1604>
   1e70a:	460b      	mov	r3, r1
   1e70c:	3101      	adds	r1, #1
   1e70e:	454f      	cmp	r7, r9
   1e710:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e714:	54e5      	strb	r5, [r4, r3]
   1e716:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e71a:	d013      	beq.n	1e744 <d_print_comp_inner+0x1628>
   1e71c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e720:	29ff      	cmp	r1, #255	; 0xff
   1e722:	d1f2      	bne.n	1e70a <d_print_comp_inner+0x15ee>
   1e724:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e728:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e72c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e730:	4620      	mov	r0, r4
   1e732:	4798      	blx	r3
   1e734:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e738:	3301      	adds	r3, #1
   1e73a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e73e:	2101      	movs	r1, #1
   1e740:	2300      	movs	r3, #0
   1e742:	e7e4      	b.n	1e70e <d_print_comp_inner+0x15f2>
   1e744:	6932      	ldr	r2, [r6, #16]
   1e746:	498f      	ldr	r1, [pc, #572]	; (1e984 <d_print_comp_inner+0x1868>)
   1e748:	3201      	adds	r2, #1
   1e74a:	a804      	add	r0, sp, #16
   1e74c:	f003 ffd8 	bl	22700 <sprintf>
   1e750:	a804      	add	r0, sp, #16
   1e752:	f005 f815 	bl	23780 <strlen>
   1e756:	2800      	cmp	r0, #0
   1e758:	f43f af21 	beq.w	1e59e <d_print_comp_inner+0x1482>
   1e75c:	ad04      	add	r5, sp, #16
   1e75e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e762:	182f      	adds	r7, r5, r0
   1e764:	f04f 0800 	mov.w	r8, #0
   1e768:	e009      	b.n	1e77e <d_print_comp_inner+0x1662>
   1e76a:	460b      	mov	r3, r1
   1e76c:	3101      	adds	r1, #1
   1e76e:	42bd      	cmp	r5, r7
   1e770:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e774:	54e6      	strb	r6, [r4, r3]
   1e776:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e77a:	f43f af12 	beq.w	1e5a2 <d_print_comp_inner+0x1486>
   1e77e:	29ff      	cmp	r1, #255	; 0xff
   1e780:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e784:	d1f1      	bne.n	1e76a <d_print_comp_inner+0x164e>
   1e786:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e78a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e78e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e792:	4620      	mov	r0, r4
   1e794:	4798      	blx	r3
   1e796:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e79a:	3301      	adds	r3, #1
   1e79c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e7a0:	2101      	movs	r1, #1
   1e7a2:	2300      	movs	r3, #0
   1e7a4:	e7e3      	b.n	1e76e <d_print_comp_inner+0x1652>
   1e7a6:	4f78      	ldr	r7, [pc, #480]	; (1e988 <d_print_comp_inner+0x186c>)
   1e7a8:	68f2      	ldr	r2, [r6, #12]
   1e7aa:	2111      	movs	r1, #17
   1e7ac:	4620      	mov	r0, r4
   1e7ae:	f000 fd2f 	bl	1f210 <d_print_comp>
   1e7b2:	f107 0903 	add.w	r9, r7, #3
   1e7b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e7ba:	252d      	movs	r5, #45	; 0x2d
   1e7bc:	f04f 0800 	mov.w	r8, #0
   1e7c0:	e00b      	b.n	1e7da <d_print_comp_inner+0x16be>
   1e7c2:	460b      	mov	r3, r1
   1e7c4:	3101      	adds	r1, #1
   1e7c6:	45b9      	cmp	r9, r7
   1e7c8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e7cc:	54e5      	strb	r5, [r4, r3]
   1e7ce:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e7d2:	f43e ad4a 	beq.w	1d26a <d_print_comp_inner+0x14e>
   1e7d6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1e7da:	29ff      	cmp	r1, #255	; 0xff
   1e7dc:	d1f1      	bne.n	1e7c2 <d_print_comp_inner+0x16a6>
   1e7de:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e7e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e7e6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e7ea:	4620      	mov	r0, r4
   1e7ec:	4798      	blx	r3
   1e7ee:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e7f2:	3301      	adds	r3, #1
   1e7f4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e7f8:	2101      	movs	r1, #1
   1e7fa:	2300      	movs	r3, #0
   1e7fc:	e7e3      	b.n	1e7c6 <d_print_comp_inner+0x16aa>
   1e7fe:	68f2      	ldr	r2, [r6, #12]
   1e800:	f7ff b902 	b.w	1da08 <d_print_comp_inner+0x8ec>
   1e804:	4632      	mov	r2, r6
   1e806:	2111      	movs	r1, #17
   1e808:	4620      	mov	r0, r4
   1e80a:	f000 fd2f 	bl	1f26c <d_print_mod>
   1e80e:	f7fe bd10 	b.w	1d232 <d_print_comp_inner+0x116>
   1e812:	6932      	ldr	r2, [r6, #16]
   1e814:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
   1e818:	460d      	mov	r5, r1
   1e81a:	4620      	mov	r0, r4
   1e81c:	2111      	movs	r1, #17
   1e81e:	f000 fcf7 	bl	1f210 <d_print_comp>
   1e822:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e826:	42b3      	cmp	r3, r6
   1e828:	f47e ace8 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1e82c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1e830:	429d      	cmp	r5, r3
   1e832:	f47e ace3 	bne.w	1d1fc <d_print_comp_inner+0xe0>
   1e836:	3d02      	subs	r5, #2
   1e838:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1e83c:	f7fe bcde 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1e840:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e844:	29ff      	cmp	r1, #255	; 0xff
   1e846:	f000 835f 	beq.w	1ef08 <d_print_comp_inner+0x1dec>
   1e84a:	1c4b      	adds	r3, r1, #1
   1e84c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e850:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1e854:	5467      	strb	r7, [r4, r1]
   1e856:	4620      	mov	r0, r4
   1e858:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1e85c:	2111      	movs	r1, #17
   1e85e:	f000 fd05 	bl	1f26c <d_print_mod>
   1e862:	f7ff b9b2 	b.w	1dbca <d_print_comp_inner+0xaae>
   1e866:	68ff      	ldr	r7, [r7, #12]
   1e868:	4652      	mov	r2, sl
   1e86a:	2f00      	cmp	r7, #0
   1e86c:	f000 84ac 	beq.w	1f1c8 <d_print_comp_inner+0x20ac>
   1e870:	2d04      	cmp	r5, #4
   1e872:	f103 0310 	add.w	r3, r3, #16
   1e876:	f000 81f1 	beq.w	1ec5c <d_print_comp_inner+0x1b40>
   1e87a:	4629      	mov	r1, r5
   1e87c:	f7ff b95c 	b.w	1db38 <d_print_comp_inner+0xa1c>
   1e880:	f1b8 0f00 	cmp.w	r8, #0
   1e884:	f43e acba 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e888:	46c1      	mov	r9, r8
   1e88a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1e88e:	f7fe be7c 	b.w	1d58a <d_print_comp_inner+0x46e>
   1e892:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1e896:	68c2      	ldr	r2, [r0, #12]
   1e898:	4606      	mov	r6, r0
   1e89a:	f7fe bd2a 	b.w	1d2f2 <d_print_comp_inner+0x1d6>
   1e89e:	2d07      	cmp	r5, #7
   1e8a0:	f47e ad83 	bne.w	1d3aa <d_print_comp_inner+0x28e>
   1e8a4:	6933      	ldr	r3, [r6, #16]
   1e8a6:	7819      	ldrb	r1, [r3, #0]
   1e8a8:	2900      	cmp	r1, #0
   1e8aa:	f47e ad7e 	bne.w	1d3aa <d_print_comp_inner+0x28e>
   1e8ae:	6919      	ldr	r1, [r3, #16]
   1e8b0:	2901      	cmp	r1, #1
   1e8b2:	f47e ad7a 	bne.w	1d3aa <d_print_comp_inner+0x28e>
   1e8b6:	2f3d      	cmp	r7, #61	; 0x3d
   1e8b8:	f47e ad77 	bne.w	1d3aa <d_print_comp_inner+0x28e>
   1e8bc:	68db      	ldr	r3, [r3, #12]
   1e8be:	781b      	ldrb	r3, [r3, #0]
   1e8c0:	2b30      	cmp	r3, #48	; 0x30
   1e8c2:	f000 849d 	beq.w	1f200 <d_print_comp_inner+0x20e4>
   1e8c6:	2b31      	cmp	r3, #49	; 0x31
   1e8c8:	f47e ad6f 	bne.w	1d3aa <d_print_comp_inner+0x28e>
   1e8cc:	492f      	ldr	r1, [pc, #188]	; (1e98c <d_print_comp_inner+0x1870>)
   1e8ce:	f7ff b884 	b.w	1d9da <d_print_comp_inner+0x8be>
   1e8d2:	4e2f      	ldr	r6, [pc, #188]	; (1e990 <d_print_comp_inner+0x1874>)
   1e8d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e8d8:	1d77      	adds	r7, r6, #5
   1e8da:	255f      	movs	r5, #95	; 0x5f
   1e8dc:	e00b      	b.n	1e8f6 <d_print_comp_inner+0x17da>
   1e8de:	460b      	mov	r3, r1
   1e8e0:	3101      	adds	r1, #1
   1e8e2:	42b7      	cmp	r7, r6
   1e8e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e8e8:	54e5      	strb	r5, [r4, r3]
   1e8ea:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e8ee:	f43e ac85 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e8f2:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e8f6:	29ff      	cmp	r1, #255	; 0xff
   1e8f8:	d1f1      	bne.n	1e8de <d_print_comp_inner+0x17c2>
   1e8fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e8fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e902:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e906:	4620      	mov	r0, r4
   1e908:	4798      	blx	r3
   1e90a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e90e:	3301      	adds	r3, #1
   1e910:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e914:	2101      	movs	r1, #1
   1e916:	2300      	movs	r3, #0
   1e918:	e7e3      	b.n	1e8e2 <d_print_comp_inner+0x17c6>
   1e91a:	491e      	ldr	r1, [pc, #120]	; (1e994 <d_print_comp_inner+0x1878>)
   1e91c:	f7fc fa4c 	bl	1adb8 <d_append_string>
   1e920:	4918      	ldr	r1, [pc, #96]	; (1e984 <d_print_comp_inner+0x1868>)
   1e922:	462a      	mov	r2, r5
   1e924:	a804      	add	r0, sp, #16
   1e926:	f003 feeb 	bl	22700 <sprintf>
   1e92a:	a804      	add	r0, sp, #16
   1e92c:	f004 ff28 	bl	23780 <strlen>
   1e930:	b390      	cbz	r0, 1e998 <d_print_comp_inner+0x187c>
   1e932:	ad04      	add	r5, sp, #16
   1e934:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e938:	182f      	adds	r7, r5, r0
   1e93a:	f04f 0800 	mov.w	r8, #0
   1e93e:	e008      	b.n	1e952 <d_print_comp_inner+0x1836>
   1e940:	460b      	mov	r3, r1
   1e942:	3101      	adds	r1, #1
   1e944:	42bd      	cmp	r5, r7
   1e946:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e94a:	54e6      	strb	r6, [r4, r3]
   1e94c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e950:	d024      	beq.n	1e99c <d_print_comp_inner+0x1880>
   1e952:	29ff      	cmp	r1, #255	; 0xff
   1e954:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e958:	d1f2      	bne.n	1e940 <d_print_comp_inner+0x1824>
   1e95a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e95e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e962:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e966:	4620      	mov	r0, r4
   1e968:	4798      	blx	r3
   1e96a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e96e:	3301      	adds	r3, #1
   1e970:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e974:	2101      	movs	r1, #1
   1e976:	2300      	movs	r3, #0
   1e978:	e7e4      	b.n	1e944 <d_print_comp_inner+0x1828>
   1e97a:	bf00      	nop
   1e97c:	20003544 	.word	0x20003544
   1e980:	2000366c 	.word	0x2000366c
   1e984:	200033c0 	.word	0x200033c0
   1e988:	20003480 	.word	0x20003480
   1e98c:	20000a9c 	.word	0x20000a9c
   1e990:	200035a4 	.word	0x200035a4
   1e994:	20003618 	.word	0x20003618
   1e998:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e99c:	29ff      	cmp	r1, #255	; 0xff
   1e99e:	f000 82f3 	beq.w	1ef88 <d_print_comp_inner+0x1e6c>
   1e9a2:	237d      	movs	r3, #125	; 0x7d
   1e9a4:	1c4a      	adds	r2, r1, #1
   1e9a6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e9aa:	5463      	strb	r3, [r4, r1]
   1e9ac:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e9b0:	f7fe bc24 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1e9b4:	4610      	mov	r0, r2
   1e9b6:	2500      	movs	r5, #0
   1e9b8:	f7fe bc90 	b.w	1d2dc <d_print_comp_inner+0x1c0>
   1e9bc:	68f2      	ldr	r2, [r6, #12]
   1e9be:	49c2      	ldr	r1, [pc, #776]	; (1ecc8 <d_print_comp_inner+0x1bac>)
   1e9c0:	3201      	adds	r2, #1
   1e9c2:	a804      	add	r0, sp, #16
   1e9c4:	f003 fe9c 	bl	22700 <sprintf>
   1e9c8:	a804      	add	r0, sp, #16
   1e9ca:	f004 fed9 	bl	23780 <strlen>
   1e9ce:	2800      	cmp	r0, #0
   1e9d0:	f43e ac14 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e9d4:	ad04      	add	r5, sp, #16
   1e9d6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e9da:	182f      	adds	r7, r5, r0
   1e9dc:	f04f 0800 	mov.w	r8, #0
   1e9e0:	e009      	b.n	1e9f6 <d_print_comp_inner+0x18da>
   1e9e2:	460b      	mov	r3, r1
   1e9e4:	3101      	adds	r1, #1
   1e9e6:	42bd      	cmp	r5, r7
   1e9e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e9ec:	54e6      	strb	r6, [r4, r3]
   1e9ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e9f2:	f43e ac03 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1e9f6:	29ff      	cmp	r1, #255	; 0xff
   1e9f8:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e9fc:	d1f1      	bne.n	1e9e2 <d_print_comp_inner+0x18c6>
   1e9fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ea02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ea06:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ea0a:	4620      	mov	r0, r4
   1ea0c:	4798      	blx	r3
   1ea0e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea12:	3301      	adds	r3, #1
   1ea14:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea18:	2101      	movs	r1, #1
   1ea1a:	2300      	movs	r3, #0
   1ea1c:	e7e3      	b.n	1e9e6 <d_print_comp_inner+0x18ca>
   1ea1e:	4611      	mov	r1, r2
   1ea20:	f7fc f964 	bl	1acec <d_lookup_template_argument>
   1ea24:	4602      	mov	r2, r0
   1ea26:	2800      	cmp	r0, #0
   1ea28:	f43e abe5 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1ea2c:	7803      	ldrb	r3, [r0, #0]
   1ea2e:	2b2f      	cmp	r3, #47	; 0x2f
   1ea30:	f43e abd6 	beq.w	1d1e0 <d_print_comp_inner+0xc4>
   1ea34:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   1ea38:	682b      	ldr	r3, [r5, #0]
   1ea3a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1ea3e:	2111      	movs	r1, #17
   1ea40:	4620      	mov	r0, r4
   1ea42:	f000 fbe5 	bl	1f210 <d_print_comp>
   1ea46:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1ea4a:	f7fe bbd7 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1ea4e:	2500      	movs	r5, #0
   1ea50:	f7fe bcab 	b.w	1d3aa <d_print_comp_inner+0x28e>
   1ea54:	2500      	movs	r5, #0
   1ea56:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ea5a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ea5e:	4620      	mov	r0, r4
   1ea60:	4798      	blx	r3
   1ea62:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea66:	2201      	movs	r2, #1
   1ea68:	4413      	add	r3, r2
   1ea6a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea6e:	4629      	mov	r1, r5
   1ea70:	e558      	b.n	1e524 <d_print_comp_inner+0x1408>
   1ea72:	2500      	movs	r5, #0
   1ea74:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ea78:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ea7c:	4620      	mov	r0, r4
   1ea7e:	4798      	blx	r3
   1ea80:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea84:	2201      	movs	r2, #1
   1ea86:	4413      	add	r3, r2
   1ea88:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea8c:	4629      	mov	r1, r5
   1ea8e:	f7fe bfc5 	b.w	1da1c <d_print_comp_inner+0x900>
   1ea92:	2b01      	cmp	r3, #1
   1ea94:	f63f a885 	bhi.w	1dba2 <d_print_comp_inner+0xa86>
   1ea98:	2d04      	cmp	r5, #4
   1ea9a:	f43e abac 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1ea9e:	468e      	mov	lr, r1
   1eaa0:	f101 0b10 	add.w	fp, r1, #16
   1eaa4:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   1eaa6:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   1eaaa:	e9ce 7a01 	strd	r7, sl, [lr, #4]
   1eaae:	68ff      	ldr	r7, [r7, #12]
   1eab0:	f8ce e010 	str.w	lr, [lr, #16]
   1eab4:	3501      	adds	r5, #1
   1eab6:	f8ce c00c 	str.w	ip, [lr, #12]
   1eaba:	4659      	mov	r1, fp
   1eabc:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
   1eac0:	2f00      	cmp	r7, #0
   1eac2:	f43e ab98 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1eac6:	783a      	ldrb	r2, [r7, #0]
   1eac8:	f7ff b858 	b.w	1db7c <d_print_comp_inner+0xa60>
   1eacc:	68d2      	ldr	r2, [r2, #12]
   1eace:	2111      	movs	r1, #17
   1ead0:	4620      	mov	r0, r4
   1ead2:	f000 fb9d 	bl	1f210 <d_print_comp>
   1ead6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1eada:	b113      	cbz	r3, 1eae2 <d_print_comp_inner+0x19c6>
   1eadc:	9b04      	ldr	r3, [sp, #16]
   1eade:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1eae2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1eae6:	2b3c      	cmp	r3, #60	; 0x3c
   1eae8:	f000 82be 	beq.w	1f068 <d_print_comp_inner+0x1f4c>
   1eaec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1eaf0:	29ff      	cmp	r1, #255	; 0xff
   1eaf2:	f000 82a9 	beq.w	1f048 <d_print_comp_inner+0x1f2c>
   1eaf6:	1c4a      	adds	r2, r1, #1
   1eaf8:	233c      	movs	r3, #60	; 0x3c
   1eafa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1eafe:	5463      	strb	r3, [r4, r1]
   1eb00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb04:	68f3      	ldr	r3, [r6, #12]
   1eb06:	2111      	movs	r1, #17
   1eb08:	691a      	ldr	r2, [r3, #16]
   1eb0a:	4620      	mov	r0, r4
   1eb0c:	f000 fb80 	bl	1f210 <d_print_comp>
   1eb10:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1eb14:	2b3e      	cmp	r3, #62	; 0x3e
   1eb16:	f000 8292 	beq.w	1f03e <d_print_comp_inner+0x1f22>
   1eb1a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1eb1e:	29ff      	cmp	r1, #255	; 0xff
   1eb20:	f000 827f 	beq.w	1f022 <d_print_comp_inner+0x1f06>
   1eb24:	233e      	movs	r3, #62	; 0x3e
   1eb26:	1c4a      	adds	r2, r1, #1
   1eb28:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1eb2c:	5463      	strb	r3, [r4, r1]
   1eb2e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb32:	f7fe bb63 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1eb36:	68fb      	ldr	r3, [r7, #12]
   1eb38:	681e      	ldr	r6, [r3, #0]
   1eb3a:	7833      	ldrb	r3, [r6, #0]
   1eb3c:	2b61      	cmp	r3, #97	; 0x61
   1eb3e:	f040 8092 	bne.w	1ec66 <d_print_comp_inner+0x1b4a>
   1eb42:	7872      	ldrb	r2, [r6, #1]
   1eb44:	2a64      	cmp	r2, #100	; 0x64
   1eb46:	f040 808e 	bne.w	1ec66 <d_print_comp_inner+0x1b4a>
   1eb4a:	78b2      	ldrb	r2, [r6, #2]
   1eb4c:	2a00      	cmp	r2, #0
   1eb4e:	f040 808a 	bne.w	1ec66 <d_print_comp_inner+0x1b4a>
   1eb52:	782a      	ldrb	r2, [r5, #0]
   1eb54:	2a03      	cmp	r2, #3
   1eb56:	f000 828c 	beq.w	1f072 <d_print_comp_inner+0x1f56>
   1eb5a:	2a39      	cmp	r2, #57	; 0x39
   1eb5c:	f000 8294 	beq.w	1f088 <d_print_comp_inner+0x1f6c>
   1eb60:	2b73      	cmp	r3, #115	; 0x73
   1eb62:	d111      	bne.n	1eb88 <d_print_comp_inner+0x1a6c>
   1eb64:	7872      	ldrb	r2, [r6, #1]
   1eb66:	2a5a      	cmp	r2, #90	; 0x5a
   1eb68:	d135      	bne.n	1ebd6 <d_print_comp_inner+0x1aba>
   1eb6a:	78b2      	ldrb	r2, [r6, #2]
   1eb6c:	bb9a      	cbnz	r2, 1ebd6 <d_print_comp_inner+0x1aba>
   1eb6e:	4629      	mov	r1, r5
   1eb70:	4620      	mov	r0, r4
   1eb72:	f7fc f8d7 	bl	1ad24 <d_find_pack>
   1eb76:	f7fc f803 	bl	1ab80 <d_pack_length>
   1eb7a:	4601      	mov	r1, r0
   1eb7c:	4620      	mov	r0, r4
   1eb7e:	b015      	add	sp, #84	; 0x54
   1eb80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb84:	f7fc b97c 	b.w	1ae80 <d_append_num>
   1eb88:	463a      	mov	r2, r7
   1eb8a:	2111      	movs	r1, #17
   1eb8c:	4620      	mov	r0, r4
   1eb8e:	f001 f97d 	bl	1fe8c <d_print_expr_op>
   1eb92:	7833      	ldrb	r3, [r6, #0]
   1eb94:	2b67      	cmp	r3, #103	; 0x67
   1eb96:	d107      	bne.n	1eba8 <d_print_comp_inner+0x1a8c>
   1eb98:	7872      	ldrb	r2, [r6, #1]
   1eb9a:	2a73      	cmp	r2, #115	; 0x73
   1eb9c:	d104      	bne.n	1eba8 <d_print_comp_inner+0x1a8c>
   1eb9e:	78b2      	ldrb	r2, [r6, #2]
   1eba0:	b912      	cbnz	r2, 1eba8 <d_print_comp_inner+0x1a8c>
   1eba2:	462a      	mov	r2, r5
   1eba4:	f7fe bb4e 	b.w	1d244 <d_print_comp_inner+0x128>
   1eba8:	2b73      	cmp	r3, #115	; 0x73
   1ebaa:	f47f a922 	bne.w	1ddf2 <d_print_comp_inner+0xcd6>
   1ebae:	7873      	ldrb	r3, [r6, #1]
   1ebb0:	2b74      	cmp	r3, #116	; 0x74
   1ebb2:	f47f a91e 	bne.w	1ddf2 <d_print_comp_inner+0xcd6>
   1ebb6:	78b3      	ldrb	r3, [r6, #2]
   1ebb8:	2b00      	cmp	r3, #0
   1ebba:	f47f a91a 	bne.w	1ddf2 <d_print_comp_inner+0xcd6>
   1ebbe:	2128      	movs	r1, #40	; 0x28
   1ebc0:	4620      	mov	r0, r4
   1ebc2:	f7fc f871 	bl	1aca8 <d_append_char>
   1ebc6:	2111      	movs	r1, #17
   1ebc8:	462a      	mov	r2, r5
   1ebca:	4620      	mov	r0, r4
   1ebcc:	f000 fb20 	bl	1f210 <d_print_comp>
   1ebd0:	2129      	movs	r1, #41	; 0x29
   1ebd2:	f7fe bc17 	b.w	1d404 <d_print_comp_inner+0x2e8>
   1ebd6:	2b73      	cmp	r3, #115	; 0x73
   1ebd8:	d1d6      	bne.n	1eb88 <d_print_comp_inner+0x1a6c>
   1ebda:	7873      	ldrb	r3, [r6, #1]
   1ebdc:	2b50      	cmp	r3, #80	; 0x50
   1ebde:	d1d3      	bne.n	1eb88 <d_print_comp_inner+0x1a6c>
   1ebe0:	78b3      	ldrb	r3, [r6, #2]
   1ebe2:	2b00      	cmp	r3, #0
   1ebe4:	d1d0      	bne.n	1eb88 <d_print_comp_inner+0x1a6c>
   1ebe6:	461e      	mov	r6, r3
   1ebe8:	e004      	b.n	1ebf4 <d_print_comp_inner+0x1ad8>
   1ebea:	3601      	adds	r6, #1
   1ebec:	692d      	ldr	r5, [r5, #16]
   1ebee:	2d00      	cmp	r5, #0
   1ebf0:	f000 819a 	beq.w	1ef28 <d_print_comp_inner+0x1e0c>
   1ebf4:	782b      	ldrb	r3, [r5, #0]
   1ebf6:	2b2f      	cmp	r3, #47	; 0x2f
   1ebf8:	f040 8196 	bne.w	1ef28 <d_print_comp_inner+0x1e0c>
   1ebfc:	68eb      	ldr	r3, [r5, #12]
   1ebfe:	2b00      	cmp	r3, #0
   1ec00:	f000 8192 	beq.w	1ef28 <d_print_comp_inner+0x1e0c>
   1ec04:	781a      	ldrb	r2, [r3, #0]
   1ec06:	2a4c      	cmp	r2, #76	; 0x4c
   1ec08:	d1ef      	bne.n	1ebea <d_print_comp_inner+0x1ace>
   1ec0a:	68d9      	ldr	r1, [r3, #12]
   1ec0c:	4620      	mov	r0, r4
   1ec0e:	f7fc f889 	bl	1ad24 <d_find_pack>
   1ec12:	4603      	mov	r3, r0
   1ec14:	b148      	cbz	r0, 1ec2a <d_print_comp_inner+0x1b0e>
   1ec16:	2300      	movs	r3, #0
   1ec18:	e004      	b.n	1ec24 <d_print_comp_inner+0x1b08>
   1ec1a:	68c2      	ldr	r2, [r0, #12]
   1ec1c:	b12a      	cbz	r2, 1ec2a <d_print_comp_inner+0x1b0e>
   1ec1e:	6900      	ldr	r0, [r0, #16]
   1ec20:	3301      	adds	r3, #1
   1ec22:	b110      	cbz	r0, 1ec2a <d_print_comp_inner+0x1b0e>
   1ec24:	7802      	ldrb	r2, [r0, #0]
   1ec26:	2a2f      	cmp	r2, #47	; 0x2f
   1ec28:	d0f7      	beq.n	1ec1a <d_print_comp_inner+0x1afe>
   1ec2a:	441e      	add	r6, r3
   1ec2c:	e7de      	b.n	1ebec <d_print_comp_inner+0x1ad0>
   1ec2e:	29ff      	cmp	r1, #255	; 0xff
   1ec30:	f000 81d1 	beq.w	1efd6 <d_print_comp_inner+0x1eba>
   1ec34:	1c4b      	adds	r3, r1, #1
   1ec36:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ec3a:	2320      	movs	r3, #32
   1ec3c:	5463      	strb	r3, [r4, r1]
   1ec3e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ec42:	e4c7      	b.n	1e5d4 <d_print_comp_inner+0x14b8>
   1ec44:	4632      	mov	r2, r6
   1ec46:	2111      	movs	r1, #17
   1ec48:	4620      	mov	r0, r4
   1ec4a:	f000 fb0f 	bl	1f26c <d_print_mod>
   1ec4e:	f7fe bb36 	b.w	1d2be <d_print_comp_inner+0x1a2>
   1ec52:	491e      	ldr	r1, [pc, #120]	; (1eccc <d_print_comp_inner+0x1bb0>)
   1ec54:	f7fc f8b0 	bl	1adb8 <d_append_string>
   1ec58:	f7ff b8e0 	b.w	1de1c <d_print_comp_inner+0xd00>
   1ec5c:	2301      	movs	r3, #1
   1ec5e:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
   1ec62:	f7fe bacb 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1ec66:	782a      	ldrb	r2, [r5, #0]
   1ec68:	e777      	b.n	1eb5a <d_print_comp_inner+0x1a3e>
   1ec6a:	68f2      	ldr	r2, [r6, #12]
   1ec6c:	460d      	mov	r5, r1
   1ec6e:	f7fe bb40 	b.w	1d2f2 <d_print_comp_inner+0x1d6>
   1ec72:	2700      	movs	r7, #0
   1ec74:	5567      	strb	r7, [r4, r5]
   1ec76:	4629      	mov	r1, r5
   1ec78:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ec7c:	4620      	mov	r0, r4
   1ec7e:	4798      	blx	r3
   1ec80:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec84:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1ec88:	3301      	adds	r3, #1
   1ec8a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec8e:	463d      	mov	r5, r7
   1ec90:	f7fe bb48 	b.w	1d324 <d_print_comp_inner+0x208>
   1ec94:	2600      	movs	r6, #0
   1ec96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ec9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ec9e:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1eca2:	4620      	mov	r0, r4
   1eca4:	4798      	blx	r3
   1eca6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ecaa:	2201      	movs	r2, #1
   1ecac:	4413      	add	r3, r2
   1ecae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ecb2:	4631      	mov	r1, r6
   1ecb4:	f7fe bd82 	b.w	1d7bc <d_print_comp_inner+0x6a0>
   1ecb8:	4905      	ldr	r1, [pc, #20]	; (1ecd0 <d_print_comp_inner+0x1bb4>)
   1ecba:	4620      	mov	r0, r4
   1ecbc:	f7fc f87c 	bl	1adb8 <d_append_string>
   1ecc0:	68ff      	ldr	r7, [r7, #12]
   1ecc2:	463a      	mov	r2, r7
   1ecc4:	f7fe babe 	b.w	1d244 <d_print_comp_inner+0x128>
   1ecc8:	200033c0 	.word	0x200033c0
   1eccc:	20003594 	.word	0x20003594
   1ecd0:	20003420 	.word	0x20003420
   1ecd4:	2500      	movs	r5, #0
   1ecd6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ecda:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ecde:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ece2:	4620      	mov	r0, r4
   1ece4:	4798      	blx	r3
   1ece6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ecea:	2201      	movs	r2, #1
   1ecec:	4413      	add	r3, r2
   1ecee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ecf2:	4629      	mov	r1, r5
   1ecf4:	f7fe be81 	b.w	1d9fa <d_print_comp_inner+0x8de>
   1ecf8:	2600      	movs	r6, #0
   1ecfa:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ecfe:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1ed02:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1ed06:	4798      	blx	r3
   1ed08:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1ed0c:	2301      	movs	r3, #1
   1ed0e:	441a      	add	r2, r3
   1ed10:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1ed14:	4631      	mov	r1, r6
   1ed16:	f7fe bed2 	b.w	1dabe <d_print_comp_inner+0x9a2>
   1ed1a:	2500      	movs	r5, #0
   1ed1c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ed20:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1ed24:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1ed28:	4798      	blx	r3
   1ed2a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ed2e:	2201      	movs	r2, #1
   1ed30:	4413      	add	r3, r2
   1ed32:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ed36:	4629      	mov	r1, r5
   1ed38:	f7fe ba91 	b.w	1d25e <d_print_comp_inner+0x142>
   1ed3c:	2500      	movs	r5, #0
   1ed3e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ed42:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ed46:	4620      	mov	r0, r4
   1ed48:	4798      	blx	r3
   1ed4a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ed4e:	3301      	adds	r3, #1
   1ed50:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ed54:	4629      	mov	r1, r5
   1ed56:	2301      	movs	r3, #1
   1ed58:	f7ff bab6 	b.w	1e2c8 <d_print_comp_inner+0x11ac>
   1ed5c:	2120      	movs	r1, #32
   1ed5e:	4620      	mov	r0, r4
   1ed60:	f7fb ffa2 	bl	1aca8 <d_append_char>
   1ed64:	f7ff baaa 	b.w	1e2bc <d_print_comp_inner+0x11a0>
   1ed68:	2500      	movs	r5, #0
   1ed6a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ed6e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ed72:	4620      	mov	r0, r4
   1ed74:	4798      	blx	r3
   1ed76:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ed7a:	3301      	adds	r3, #1
   1ed7c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ed80:	4629      	mov	r1, r5
   1ed82:	2301      	movs	r3, #1
   1ed84:	f7ff ba8a 	b.w	1e29c <d_print_comp_inner+0x1180>
   1ed88:	2120      	movs	r1, #32
   1ed8a:	4620      	mov	r0, r4
   1ed8c:	f7fb ff8c 	bl	1aca8 <d_append_char>
   1ed90:	f7ff ba7e 	b.w	1e290 <d_print_comp_inner+0x1174>
   1ed94:	2700      	movs	r7, #0
   1ed96:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ed9a:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1ed9e:	4620      	mov	r0, r4
   1eda0:	4798      	blx	r3
   1eda2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1eda6:	68f2      	ldr	r2, [r6, #12]
   1eda8:	3301      	adds	r3, #1
   1edaa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1edae:	4639      	mov	r1, r7
   1edb0:	2301      	movs	r3, #1
   1edb2:	f7fe bb00 	b.w	1d3b6 <d_print_comp_inner+0x29a>
   1edb6:	212d      	movs	r1, #45	; 0x2d
   1edb8:	4620      	mov	r0, r4
   1edba:	f7fb ff75 	bl	1aca8 <d_append_char>
   1edbe:	f7fe bb14 	b.w	1d3ea <d_print_comp_inner+0x2ce>
   1edc2:	2700      	movs	r7, #0
   1edc4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1edc8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1edcc:	4620      	mov	r0, r4
   1edce:	4798      	blx	r3
   1edd0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1edd4:	3301      	adds	r3, #1
   1edd6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1edda:	4639      	mov	r1, r7
   1eddc:	2301      	movs	r3, #1
   1edde:	f7fe bafa 	b.w	1d3d6 <d_print_comp_inner+0x2ba>
   1ede2:	6933      	ldr	r3, [r6, #16]
   1ede4:	781b      	ldrb	r3, [r3, #0]
   1ede6:	2b00      	cmp	r3, #0
   1ede8:	f47e aadf 	bne.w	1d3aa <d_print_comp_inner+0x28e>
   1edec:	2f3e      	cmp	r7, #62	; 0x3e
   1edee:	f000 81f6 	beq.w	1f1de <d_print_comp_inner+0x20c2>
   1edf2:	6932      	ldr	r2, [r6, #16]
   1edf4:	2111      	movs	r1, #17
   1edf6:	4620      	mov	r0, r4
   1edf8:	3d02      	subs	r5, #2
   1edfa:	f000 fa09 	bl	1f210 <d_print_comp>
   1edfe:	2d04      	cmp	r5, #4
   1ee00:	f63e a9fc 	bhi.w	1d1fc <d_print_comp_inner+0xe0>
   1ee04:	e8df f005 	tbb	[pc, r5]
   1ee08:	06090c0f 	.word	0x06090c0f
   1ee0c:	03          	.byte	0x03
   1ee0d:	00          	.byte	0x00
   1ee0e:	49c8      	ldr	r1, [pc, #800]	; (1f130 <d_print_comp_inner+0x2014>)
   1ee10:	f7fe bde3 	b.w	1d9da <d_print_comp_inner+0x8be>
   1ee14:	49c7      	ldr	r1, [pc, #796]	; (1f134 <d_print_comp_inner+0x2018>)
   1ee16:	f7fe bde0 	b.w	1d9da <d_print_comp_inner+0x8be>
   1ee1a:	49c7      	ldr	r1, [pc, #796]	; (1f138 <d_print_comp_inner+0x201c>)
   1ee1c:	f7fe bddd 	b.w	1d9da <d_print_comp_inner+0x8be>
   1ee20:	216c      	movs	r1, #108	; 0x6c
   1ee22:	f7fe baef 	b.w	1d404 <d_print_comp_inner+0x2e8>
   1ee26:	2175      	movs	r1, #117	; 0x75
   1ee28:	f7fe baec 	b.w	1d404 <d_print_comp_inner+0x2e8>
   1ee2c:	781b      	ldrb	r3, [r3, #0]
   1ee2e:	2b73      	cmp	r3, #115	; 0x73
   1ee30:	d00a      	beq.n	1ee48 <d_print_comp_inner+0x1d2c>
   1ee32:	3b63      	subs	r3, #99	; 0x63
   1ee34:	b2db      	uxtb	r3, r3
   1ee36:	2b0f      	cmp	r3, #15
   1ee38:	f63e af77 	bhi.w	1dd2a <d_print_comp_inner+0xc0e>
   1ee3c:	49bf      	ldr	r1, [pc, #764]	; (1f13c <d_print_comp_inner+0x2020>)
   1ee3e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1ee42:	2b00      	cmp	r3, #0
   1ee44:	f43e af71 	beq.w	1dd2a <d_print_comp_inner+0xc0e>
   1ee48:	2111      	movs	r1, #17
   1ee4a:	4620      	mov	r0, r4
   1ee4c:	f001 f81e 	bl	1fe8c <d_print_expr_op>
   1ee50:	213c      	movs	r1, #60	; 0x3c
   1ee52:	4620      	mov	r0, r4
   1ee54:	f7fb ff28 	bl	1aca8 <d_append_char>
   1ee58:	6933      	ldr	r3, [r6, #16]
   1ee5a:	2111      	movs	r1, #17
   1ee5c:	68da      	ldr	r2, [r3, #12]
   1ee5e:	4620      	mov	r0, r4
   1ee60:	f000 f9d6 	bl	1f210 <d_print_comp>
   1ee64:	49b6      	ldr	r1, [pc, #728]	; (1f140 <d_print_comp_inner+0x2024>)
   1ee66:	4620      	mov	r0, r4
   1ee68:	f7fb ffa6 	bl	1adb8 <d_append_string>
   1ee6c:	6933      	ldr	r3, [r6, #16]
   1ee6e:	2111      	movs	r1, #17
   1ee70:	691a      	ldr	r2, [r3, #16]
   1ee72:	4620      	mov	r0, r4
   1ee74:	f000 f9cc 	bl	1f210 <d_print_comp>
   1ee78:	2129      	movs	r1, #41	; 0x29
   1ee7a:	f7fe bac3 	b.w	1d404 <d_print_comp_inner+0x2e8>
   1ee7e:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
   1ee82:	f1bc 0f00 	cmp.w	ip, #0
   1ee86:	f340 8107 	ble.w	1f098 <d_print_comp_inner+0x1f7c>
   1ee8a:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   1ee8e:	462b      	mov	r3, r5
   1ee90:	4670      	mov	r0, lr
   1ee92:	e004      	b.n	1ee9e <d_print_comp_inner+0x1d82>
   1ee94:	4563      	cmp	r3, ip
   1ee96:	f100 0008 	add.w	r0, r0, #8
   1ee9a:	f000 80fd 	beq.w	1f098 <d_print_comp_inner+0x1f7c>
   1ee9e:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
   1eea2:	428a      	cmp	r2, r1
   1eea4:	f103 0301 	add.w	r3, r3, #1
   1eea8:	d1f4      	bne.n	1ee94 <d_print_comp_inner+0x1d78>
   1eeaa:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
   1eeae:	4663      	mov	r3, ip
   1eeb0:	f1bc 0f00 	cmp.w	ip, #0
   1eeb4:	d104      	bne.n	1eec0 <d_print_comp_inner+0x1da4>
   1eeb6:	e09d      	b.n	1eff4 <d_print_comp_inner+0x1ed8>
   1eeb8:	685b      	ldr	r3, [r3, #4]
   1eeba:	2b00      	cmp	r3, #0
   1eebc:	f000 809a 	beq.w	1eff4 <d_print_comp_inner+0x1ed8>
   1eec0:	6819      	ldr	r1, [r3, #0]
   1eec2:	4291      	cmp	r1, r2
   1eec4:	d003      	beq.n	1eece <d_print_comp_inner+0x1db2>
   1eec6:	42b1      	cmp	r1, r6
   1eec8:	d1f6      	bne.n	1eeb8 <d_print_comp_inner+0x1d9c>
   1eeca:	459c      	cmp	ip, r3
   1eecc:	d0f4      	beq.n	1eeb8 <d_print_comp_inner+0x1d9c>
   1eece:	4611      	mov	r1, r2
   1eed0:	4620      	mov	r0, r4
   1eed2:	9201      	str	r2, [sp, #4]
   1eed4:	f7fb ff0a 	bl	1acec <d_lookup_template_argument>
   1eed8:	9a01      	ldr	r2, [sp, #4]
   1eeda:	2800      	cmp	r0, #0
   1eedc:	f43e a98b 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1eee0:	7803      	ldrb	r3, [r0, #0]
   1eee2:	2b2f      	cmp	r3, #47	; 0x2f
   1eee4:	f47e a9fa 	bne.w	1d2dc <d_print_comp_inner+0x1c0>
   1eee8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1eeec:	2900      	cmp	r1, #0
   1eeee:	f6fe a9fe 	blt.w	1d2ee <d_print_comp_inner+0x1d2>
   1eef2:	f7fb fe77 	bl	1abe4 <d_index_template_argument.part.0>
   1eef6:	2800      	cmp	r0, #0
   1eef8:	f000 816a 	beq.w	1f1d0 <d_print_comp_inner+0x20b4>
   1eefc:	7803      	ldrb	r3, [r0, #0]
   1eefe:	f7fe b9ed 	b.w	1d2dc <d_print_comp_inner+0x1c0>
   1ef02:	68c2      	ldr	r2, [r0, #12]
   1ef04:	f7fe b97e 	b.w	1d204 <d_print_comp_inner+0xe8>
   1ef08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ef0c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ef10:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1ef14:	4620      	mov	r0, r4
   1ef16:	4798      	blx	r3
   1ef18:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ef1c:	3301      	adds	r3, #1
   1ef1e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ef22:	4631      	mov	r1, r6
   1ef24:	2301      	movs	r3, #1
   1ef26:	e491      	b.n	1e84c <d_print_comp_inner+0x1730>
   1ef28:	4986      	ldr	r1, [pc, #536]	; (1f144 <d_print_comp_inner+0x2028>)
   1ef2a:	4632      	mov	r2, r6
   1ef2c:	a804      	add	r0, sp, #16
   1ef2e:	f003 fbe7 	bl	22700 <sprintf>
   1ef32:	a804      	add	r0, sp, #16
   1ef34:	f004 fc24 	bl	23780 <strlen>
   1ef38:	2800      	cmp	r0, #0
   1ef3a:	f43e a95f 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1ef3e:	ad04      	add	r5, sp, #16
   1ef40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ef44:	182f      	adds	r7, r5, r0
   1ef46:	f04f 0800 	mov.w	r8, #0
   1ef4a:	e009      	b.n	1ef60 <d_print_comp_inner+0x1e44>
   1ef4c:	460b      	mov	r3, r1
   1ef4e:	3101      	adds	r1, #1
   1ef50:	42af      	cmp	r7, r5
   1ef52:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ef56:	54e6      	strb	r6, [r4, r3]
   1ef58:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ef5c:	f43e a94e 	beq.w	1d1fc <d_print_comp_inner+0xe0>
   1ef60:	29ff      	cmp	r1, #255	; 0xff
   1ef62:	f815 6b01 	ldrb.w	r6, [r5], #1
   1ef66:	d1f1      	bne.n	1ef4c <d_print_comp_inner+0x1e30>
   1ef68:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ef6c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ef70:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ef74:	4620      	mov	r0, r4
   1ef76:	4798      	blx	r3
   1ef78:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ef7c:	3301      	adds	r3, #1
   1ef7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ef82:	2101      	movs	r1, #1
   1ef84:	2300      	movs	r3, #0
   1ef86:	e7e3      	b.n	1ef50 <d_print_comp_inner+0x1e34>
   1ef88:	2500      	movs	r5, #0
   1ef8a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ef8e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ef92:	4620      	mov	r0, r4
   1ef94:	4798      	blx	r3
   1ef96:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ef9a:	3301      	adds	r3, #1
   1ef9c:	4629      	mov	r1, r5
   1ef9e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1efa2:	e4fe      	b.n	1e9a2 <d_print_comp_inner+0x1886>
   1efa4:	2111      	movs	r1, #17
   1efa6:	4620      	mov	r0, r4
   1efa8:	4652      	mov	r2, sl
   1efaa:	f001 f96b 	bl	20284 <d_print_subexpr>
   1efae:	4966      	ldr	r1, [pc, #408]	; (1f148 <d_print_comp_inner+0x202c>)
   1efb0:	f7fe bd13 	b.w	1d9da <d_print_comp_inner+0x8be>
   1efb4:	2500      	movs	r5, #0
   1efb6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1efba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1efbe:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1efc2:	4620      	mov	r0, r4
   1efc4:	4798      	blx	r3
   1efc6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1efca:	3301      	adds	r3, #1
   1efcc:	4629      	mov	r1, r5
   1efce:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1efd2:	f7fe bf31 	b.w	1de38 <d_print_comp_inner+0xd1c>
   1efd6:	2600      	movs	r6, #0
   1efd8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1efdc:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1efe0:	4620      	mov	r0, r4
   1efe2:	4798      	blx	r3
   1efe4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1efe8:	687d      	ldr	r5, [r7, #4]
   1efea:	3301      	adds	r3, #1
   1efec:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1eff0:	4631      	mov	r1, r6
   1eff2:	e61f      	b.n	1ec34 <d_print_comp_inner+0x1b18>
   1eff4:	6843      	ldr	r3, [r0, #4]
   1eff6:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
   1effa:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1effe:	4611      	mov	r1, r2
   1f000:	4620      	mov	r0, r4
   1f002:	9201      	str	r2, [sp, #4]
   1f004:	f7fb fe72 	bl	1acec <d_lookup_template_argument>
   1f008:	9a01      	ldr	r2, [sp, #4]
   1f00a:	2800      	cmp	r0, #0
   1f00c:	f000 80e3 	beq.w	1f1d6 <d_print_comp_inner+0x20ba>
   1f010:	2501      	movs	r5, #1
   1f012:	e765      	b.n	1eee0 <d_print_comp_inner+0x1dc4>
   1f014:	68ff      	ldr	r7, [r7, #12]
   1f016:	2f00      	cmp	r7, #0
   1f018:	f43e a8ed 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1f01c:	783a      	ldrb	r2, [r7, #0]
   1f01e:	f7fe bda9 	b.w	1db74 <d_print_comp_inner+0xa58>
   1f022:	2500      	movs	r5, #0
   1f024:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f028:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f02c:	4620      	mov	r0, r4
   1f02e:	4798      	blx	r3
   1f030:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f034:	3301      	adds	r3, #1
   1f036:	4629      	mov	r1, r5
   1f038:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f03c:	e572      	b.n	1eb24 <d_print_comp_inner+0x1a08>
   1f03e:	2120      	movs	r1, #32
   1f040:	4620      	mov	r0, r4
   1f042:	f7fb fe31 	bl	1aca8 <d_append_char>
   1f046:	e568      	b.n	1eb1a <d_print_comp_inner+0x19fe>
   1f048:	2500      	movs	r5, #0
   1f04a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f04e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f052:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f056:	4620      	mov	r0, r4
   1f058:	4798      	blx	r3
   1f05a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f05e:	3301      	adds	r3, #1
   1f060:	4629      	mov	r1, r5
   1f062:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f066:	e546      	b.n	1eaf6 <d_print_comp_inner+0x19da>
   1f068:	2120      	movs	r1, #32
   1f06a:	4620      	mov	r0, r4
   1f06c:	f7fb fe1c 	bl	1aca8 <d_append_char>
   1f070:	e53c      	b.n	1eaec <d_print_comp_inner+0x19d0>
   1f072:	68ea      	ldr	r2, [r5, #12]
   1f074:	7811      	ldrb	r1, [r2, #0]
   1f076:	2901      	cmp	r1, #1
   1f078:	f47f ad72 	bne.w	1eb60 <d_print_comp_inner+0x1a44>
   1f07c:	6929      	ldr	r1, [r5, #16]
   1f07e:	7809      	ldrb	r1, [r1, #0]
   1f080:	2929      	cmp	r1, #41	; 0x29
   1f082:	bf08      	it	eq
   1f084:	4615      	moveq	r5, r2
   1f086:	e56b      	b.n	1eb60 <d_print_comp_inner+0x1a44>
   1f088:	68ea      	ldr	r2, [r5, #12]
   1f08a:	2111      	movs	r1, #17
   1f08c:	4620      	mov	r0, r4
   1f08e:	f001 f8f9 	bl	20284 <d_print_subexpr>
   1f092:	463a      	mov	r2, r7
   1f094:	f7fe beb6 	b.w	1de04 <d_print_comp_inner+0xce8>
   1f098:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1f09c:	4563      	cmp	r3, ip
   1f09e:	f77e a8aa 	ble.w	1d1f6 <d_print_comp_inner+0xda>
   1f0a2:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   1f0a6:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
   1f0aa:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
   1f0ae:	f10c 0001 	add.w	r0, ip, #1
   1f0b2:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   1f0b6:	3304      	adds	r3, #4
   1f0b8:	f841 203c 	str.w	r2, [r1, ip, lsl #3]
   1f0bc:	f1be 0f00 	cmp.w	lr, #0
   1f0c0:	f000 8092 	beq.w	1f1e8 <d_print_comp_inner+0x20cc>
   1f0c4:	e9d4 0950 	ldrd	r0, r9, [r4, #320]	; 0x140
   1f0c8:	4694      	mov	ip, r2
   1f0ca:	e010      	b.n	1f0ee <d_print_comp_inner+0x1fd2>
   1f0cc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1f0d0:	f8de 2004 	ldr.w	r2, [lr, #4]
   1f0d4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1f0d8:	3001      	adds	r0, #1
   1f0da:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
   1f0de:	604a      	str	r2, [r1, #4]
   1f0e0:	6019      	str	r1, [r3, #0]
   1f0e2:	f8de e000 	ldr.w	lr, [lr]
   1f0e6:	460b      	mov	r3, r1
   1f0e8:	f1be 0f00 	cmp.w	lr, #0
   1f0ec:	d07b      	beq.n	1f1e6 <d_print_comp_inner+0x20ca>
   1f0ee:	4581      	cmp	r9, r0
   1f0f0:	dcec      	bgt.n	1f0cc <d_print_comp_inner+0x1fb0>
   1f0f2:	f7fe b880 	b.w	1d1f6 <d_print_comp_inner+0xda>
   1f0f6:	6912      	ldr	r2, [r2, #16]
   1f0f8:	2111      	movs	r1, #17
   1f0fa:	f000 f889 	bl	1f210 <d_print_comp>
   1f0fe:	9b06      	ldr	r3, [sp, #24]
   1f100:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1f104:	2b00      	cmp	r3, #0
   1f106:	f43e af09 	beq.w	1df1c <d_print_comp_inner+0xe00>
   1f10a:	f7fe b877 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1f10e:	68da      	ldr	r2, [r3, #12]
   1f110:	6891      	ldr	r1, [r2, #8]
   1f112:	2901      	cmp	r1, #1
   1f114:	f47e ae1e 	bne.w	1dd54 <d_print_comp_inner+0xc38>
   1f118:	6852      	ldr	r2, [r2, #4]
   1f11a:	7812      	ldrb	r2, [r2, #0]
   1f11c:	2a3e      	cmp	r2, #62	; 0x3e
   1f11e:	f47e ae19 	bne.w	1dd54 <d_print_comp_inner+0xc38>
   1f122:	2128      	movs	r1, #40	; 0x28
   1f124:	4620      	mov	r0, r4
   1f126:	f7fb fdbf 	bl	1aca8 <d_append_char>
   1f12a:	68f3      	ldr	r3, [r6, #12]
   1f12c:	f7fe be12 	b.w	1dd54 <d_print_comp_inner+0xc38>
   1f130:	200035ec 	.word	0x200035ec
   1f134:	200035e8 	.word	0x200035e8
   1f138:	200035e4 	.word	0x200035e4
   1f13c:	200008c8 	.word	0x200008c8
   1f140:	200035c8 	.word	0x200035c8
   1f144:	200033c0 	.word	0x200033c0
   1f148:	2000360c 	.word	0x2000360c
   1f14c:	4620      	mov	r0, r4
   1f14e:	215b      	movs	r1, #91	; 0x5b
   1f150:	f7fb fdaa 	bl	1aca8 <d_append_char>
   1f154:	6933      	ldr	r3, [r6, #16]
   1f156:	4620      	mov	r0, r4
   1f158:	691a      	ldr	r2, [r3, #16]
   1f15a:	2111      	movs	r1, #17
   1f15c:	f000 f858 	bl	1f210 <d_print_comp>
   1f160:	215d      	movs	r1, #93	; 0x5d
   1f162:	4620      	mov	r0, r4
   1f164:	f7fb fda0 	bl	1aca8 <d_append_char>
   1f168:	f7fe be1c 	b.w	1dda4 <d_print_comp_inner+0xc88>
   1f16c:	6913      	ldr	r3, [r2, #16]
   1f16e:	68d2      	ldr	r2, [r2, #12]
   1f170:	781b      	ldrb	r3, [r3, #0]
   1f172:	2b29      	cmp	r3, #41	; 0x29
   1f174:	bf1c      	itt	ne
   1f176:	2301      	movne	r3, #1
   1f178:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1f17c:	2111      	movs	r1, #17
   1f17e:	4620      	mov	r0, r4
   1f180:	f001 f880 	bl	20284 <d_print_subexpr>
   1f184:	f7fe bdf7 	b.w	1dd76 <d_print_comp_inner+0xc5a>
   1f188:	462a      	mov	r2, r5
   1f18a:	2111      	movs	r1, #17
   1f18c:	4620      	mov	r0, r4
   1f18e:	f000 fe7d 	bl	1fe8c <d_print_expr_op>
   1f192:	f7fe be01 	b.w	1dd98 <d_print_comp_inner+0xc7c>
   1f196:	491c      	ldr	r1, [pc, #112]	; (1f208 <d_print_comp_inner+0x20ec>)
   1f198:	4620      	mov	r0, r4
   1f19a:	f7fb fe0d 	bl	1adb8 <d_append_string>
   1f19e:	68f3      	ldr	r3, [r6, #12]
   1f1a0:	b143      	cbz	r3, 1f1b4 <d_print_comp_inner+0x2098>
   1f1a2:	2111      	movs	r1, #17
   1f1a4:	4620      	mov	r0, r4
   1f1a6:	4632      	mov	r2, r6
   1f1a8:	f001 f86c 	bl	20284 <d_print_subexpr>
   1f1ac:	2120      	movs	r1, #32
   1f1ae:	4620      	mov	r0, r4
   1f1b0:	f7fb fd7a 	bl	1aca8 <d_append_char>
   1f1b4:	463a      	mov	r2, r7
   1f1b6:	2111      	movs	r1, #17
   1f1b8:	4620      	mov	r0, r4
   1f1ba:	f000 f829 	bl	1f210 <d_print_comp>
   1f1be:	2d00      	cmp	r5, #0
   1f1c0:	f47e ae17 	bne.w	1ddf2 <d_print_comp_inner+0xcd6>
   1f1c4:	f7fe b81a 	b.w	1d1fc <d_print_comp_inner+0xe0>
   1f1c8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1f1cc:	f7fe b813 	b.w	1d1f6 <d_print_comp_inner+0xda>
   1f1d0:	2d00      	cmp	r5, #0
   1f1d2:	f43e a810 	beq.w	1d1f6 <d_print_comp_inner+0xda>
   1f1d6:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
   1f1da:	f7fe b80c 	b.w	1d1f6 <d_print_comp_inner+0xda>
   1f1de:	212d      	movs	r1, #45	; 0x2d
   1f1e0:	f7fb fd62 	bl	1aca8 <d_append_char>
   1f1e4:	e605      	b.n	1edf2 <d_print_comp_inner+0x1cd6>
   1f1e6:	4662      	mov	r2, ip
   1f1e8:	2100      	movs	r1, #0
   1f1ea:	6019      	str	r1, [r3, #0]
   1f1ec:	e66f      	b.n	1eece <d_print_comp_inner+0x1db2>
   1f1ee:	68f2      	ldr	r2, [r6, #12]
   1f1f0:	f7fe b817 	b.w	1d222 <d_print_comp_inner+0x106>
   1f1f4:	463a      	mov	r2, r7
   1f1f6:	2111      	movs	r1, #17
   1f1f8:	f000 fe48 	bl	1fe8c <d_print_expr_op>
   1f1fc:	f7fe bdf9 	b.w	1ddf2 <d_print_comp_inner+0xcd6>
   1f200:	4902      	ldr	r1, [pc, #8]	; (1f20c <d_print_comp_inner+0x20f0>)
   1f202:	f7fe bbea 	b.w	1d9da <d_print_comp_inner+0x8be>
   1f206:	bf00      	nop
   1f208:	200035dc 	.word	0x200035dc
   1f20c:	20000a7c 	.word	0x20000a7c

0001f210 <d_print_comp>:
   1f210:	b530      	push	{r4, r5, lr}
   1f212:	4605      	mov	r5, r0
   1f214:	b083      	sub	sp, #12
   1f216:	b31a      	cbz	r2, 1f260 <d_print_comp+0x50>
   1f218:	6853      	ldr	r3, [r2, #4]
   1f21a:	2b01      	cmp	r3, #1
   1f21c:	4614      	mov	r4, r2
   1f21e:	dc1f      	bgt.n	1f260 <d_print_comp+0x50>
   1f220:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   1f224:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1f228:	dc1a      	bgt.n	1f260 <d_print_comp+0x50>
   1f22a:	3301      	adds	r3, #1
   1f22c:	6053      	str	r3, [r2, #4]
   1f22e:	3101      	adds	r1, #1
   1f230:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   1f234:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   1f238:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
   1f23c:	2111      	movs	r1, #17
   1f23e:	e9cd 2300 	strd	r2, r3, [sp]
   1f242:	f7fd ff6b 	bl	1d11c <d_print_comp_inner>
   1f246:	6862      	ldr	r2, [r4, #4]
   1f248:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   1f24c:	9901      	ldr	r1, [sp, #4]
   1f24e:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
   1f252:	3a01      	subs	r2, #1
   1f254:	3b01      	subs	r3, #1
   1f256:	6062      	str	r2, [r4, #4]
   1f258:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1f25c:	b003      	add	sp, #12
   1f25e:	bd30      	pop	{r4, r5, pc}
   1f260:	2301      	movs	r3, #1
   1f262:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
   1f266:	b003      	add	sp, #12
   1f268:	bd30      	pop	{r4, r5, pc}
   1f26a:	bf00      	nop

0001f26c <d_print_mod>:
   1f26c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f270:	7813      	ldrb	r3, [r2, #0]
   1f272:	3b03      	subs	r3, #3
   1f274:	4615      	mov	r5, r2
   1f276:	4604      	mov	r4, r0
   1f278:	2b4e      	cmp	r3, #78	; 0x4e
   1f27a:	d850      	bhi.n	1f31e <d_print_mod+0xb2>
   1f27c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f280:	004f011c 	.word	0x004f011c
   1f284:	004f004f 	.word	0x004f004f
   1f288:	004f004f 	.word	0x004f004f
   1f28c:	004f004f 	.word	0x004f004f
   1f290:	004f004f 	.word	0x004f004f
   1f294:	004f004f 	.word	0x004f004f
   1f298:	004f004f 	.word	0x004f004f
   1f29c:	004f004f 	.word	0x004f004f
   1f2a0:	004f004f 	.word	0x004f004f
   1f2a4:	004f004f 	.word	0x004f004f
   1f2a8:	004f004f 	.word	0x004f004f
   1f2ac:	007c0055 	.word	0x007c0055
   1f2b0:	005500a3 	.word	0x005500a3
   1f2b4:	00a3007c 	.word	0x00a3007c
   1f2b8:	00fc00ef 	.word	0x00fc00ef
   1f2bc:	02870109 	.word	0x02870109
   1f2c0:	01300122 	.word	0x01300122
   1f2c4:	017b0155 	.word	0x017b0155
   1f2c8:	004f004f 	.word	0x004f004f
   1f2cc:	004f004f 	.word	0x004f004f
   1f2d0:	004f01a1 	.word	0x004f01a1
   1f2d4:	004f01d1 	.word	0x004f01d1
   1f2d8:	004f004f 	.word	0x004f004f
   1f2dc:	004f004f 	.word	0x004f004f
   1f2e0:	004f004f 	.word	0x004f004f
   1f2e4:	004f004f 	.word	0x004f004f
   1f2e8:	004f004f 	.word	0x004f004f
   1f2ec:	004f004f 	.word	0x004f004f
   1f2f0:	004f004f 	.word	0x004f004f
   1f2f4:	004f004f 	.word	0x004f004f
   1f2f8:	004f004f 	.word	0x004f004f
   1f2fc:	004f004f 	.word	0x004f004f
   1f300:	004f004f 	.word	0x004f004f
   1f304:	004f004f 	.word	0x004f004f
   1f308:	004f004f 	.word	0x004f004f
   1f30c:	004f004f 	.word	0x004f004f
   1f310:	004f004f 	.word	0x004f004f
   1f314:	01f8004f 	.word	0x01f8004f
   1f318:	0234004f 	.word	0x0234004f
   1f31c:	00c8      	.short	0x00c8
   1f31e:	462a      	mov	r2, r5
   1f320:	2111      	movs	r1, #17
   1f322:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f326:	f7ff bf73 	b.w	1f210 <d_print_comp>
   1f32a:	4ed6      	ldr	r6, [pc, #856]	; (1f684 <d_print_mod+0x418>)
   1f32c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f330:	f106 0708 	add.w	r7, r6, #8
   1f334:	2520      	movs	r5, #32
   1f336:	f04f 0800 	mov.w	r8, #0
   1f33a:	e00b      	b.n	1f354 <d_print_mod+0xe8>
   1f33c:	460b      	mov	r3, r1
   1f33e:	3101      	adds	r1, #1
   1f340:	42be      	cmp	r6, r7
   1f342:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f346:	54e5      	strb	r5, [r4, r3]
   1f348:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f34c:	f000 80c6 	beq.w	1f4dc <d_print_mod+0x270>
   1f350:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f354:	29ff      	cmp	r1, #255	; 0xff
   1f356:	d1f1      	bne.n	1f33c <d_print_mod+0xd0>
   1f358:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f35c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f360:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f364:	4620      	mov	r0, r4
   1f366:	4798      	blx	r3
   1f368:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f36c:	3301      	adds	r3, #1
   1f36e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f372:	2101      	movs	r1, #1
   1f374:	2300      	movs	r3, #0
   1f376:	e7e3      	b.n	1f340 <d_print_mod+0xd4>
   1f378:	4ec3      	ldr	r6, [pc, #780]	; (1f688 <d_print_mod+0x41c>)
   1f37a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f37e:	f106 0708 	add.w	r7, r6, #8
   1f382:	2520      	movs	r5, #32
   1f384:	f04f 0800 	mov.w	r8, #0
   1f388:	e00b      	b.n	1f3a2 <d_print_mod+0x136>
   1f38a:	460b      	mov	r3, r1
   1f38c:	3101      	adds	r1, #1
   1f38e:	42b7      	cmp	r7, r6
   1f390:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f394:	54e5      	strb	r5, [r4, r3]
   1f396:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f39a:	f000 809f 	beq.w	1f4dc <d_print_mod+0x270>
   1f39e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f3a2:	29ff      	cmp	r1, #255	; 0xff
   1f3a4:	d1f1      	bne.n	1f38a <d_print_mod+0x11e>
   1f3a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f3aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f3ae:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f3b2:	4620      	mov	r0, r4
   1f3b4:	4798      	blx	r3
   1f3b6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f3ba:	3301      	adds	r3, #1
   1f3bc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f3c0:	2101      	movs	r1, #1
   1f3c2:	2300      	movs	r3, #0
   1f3c4:	e7e3      	b.n	1f38e <d_print_mod+0x122>
   1f3c6:	4eb1      	ldr	r6, [pc, #708]	; (1f68c <d_print_mod+0x420>)
   1f3c8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f3cc:	1d77      	adds	r7, r6, #5
   1f3ce:	2520      	movs	r5, #32
   1f3d0:	f04f 0800 	mov.w	r8, #0
   1f3d4:	e00a      	b.n	1f3ec <d_print_mod+0x180>
   1f3d6:	460b      	mov	r3, r1
   1f3d8:	3101      	adds	r1, #1
   1f3da:	42b7      	cmp	r7, r6
   1f3dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f3e0:	54e5      	strb	r5, [r4, r3]
   1f3e2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f3e6:	d079      	beq.n	1f4dc <d_print_mod+0x270>
   1f3e8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f3ec:	29ff      	cmp	r1, #255	; 0xff
   1f3ee:	d1f2      	bne.n	1f3d6 <d_print_mod+0x16a>
   1f3f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f3f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f3f8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f3fc:	4620      	mov	r0, r4
   1f3fe:	4798      	blx	r3
   1f400:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f404:	3301      	adds	r3, #1
   1f406:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f40a:	2101      	movs	r1, #1
   1f40c:	2300      	movs	r3, #0
   1f40e:	e7e4      	b.n	1f3da <d_print_mod+0x16e>
   1f410:	4f9f      	ldr	r7, [pc, #636]	; (1f690 <d_print_mod+0x424>)
   1f412:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f416:	f107 0905 	add.w	r9, r7, #5
   1f41a:	2620      	movs	r6, #32
   1f41c:	f04f 0800 	mov.w	r8, #0
   1f420:	e00b      	b.n	1f43a <d_print_mod+0x1ce>
   1f422:	460b      	mov	r3, r1
   1f424:	3101      	adds	r1, #1
   1f426:	45b9      	cmp	r9, r7
   1f428:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f42c:	54e6      	strb	r6, [r4, r3]
   1f42e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f432:	f000 817f 	beq.w	1f734 <d_print_mod+0x4c8>
   1f436:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f43a:	29ff      	cmp	r1, #255	; 0xff
   1f43c:	d1f1      	bne.n	1f422 <d_print_mod+0x1b6>
   1f43e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f446:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f44a:	4620      	mov	r0, r4
   1f44c:	4798      	blx	r3
   1f44e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f452:	3301      	adds	r3, #1
   1f454:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f458:	2101      	movs	r1, #1
   1f45a:	2300      	movs	r3, #0
   1f45c:	e7e3      	b.n	1f426 <d_print_mod+0x1ba>
   1f45e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1f462:	2bff      	cmp	r3, #255	; 0xff
   1f464:	f000 81d0 	beq.w	1f808 <d_print_mod+0x59c>
   1f468:	2220      	movs	r2, #32
   1f46a:	1c59      	adds	r1, r3, #1
   1f46c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   1f470:	54c2      	strb	r2, [r0, r3]
   1f472:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
   1f476:	e027      	b.n	1f4c8 <d_print_mod+0x25c>
   1f478:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1f47c:	2bff      	cmp	r3, #255	; 0xff
   1f47e:	f000 81b4 	beq.w	1f7ea <d_print_mod+0x57e>
   1f482:	1c59      	adds	r1, r3, #1
   1f484:	2220      	movs	r2, #32
   1f486:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f48a:	54e2      	strb	r2, [r4, r3]
   1f48c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f490:	e028      	b.n	1f4e4 <d_print_mod+0x278>
   1f492:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f496:	29ff      	cmp	r1, #255	; 0xff
   1f498:	f000 8197 	beq.w	1f7ca <d_print_mod+0x55e>
   1f49c:	1c4a      	adds	r2, r1, #1
   1f49e:	2320      	movs	r3, #32
   1f4a0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f4a4:	5463      	strb	r3, [r4, r1]
   1f4a6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f4aa:	692a      	ldr	r2, [r5, #16]
   1f4ac:	4620      	mov	r0, r4
   1f4ae:	2111      	movs	r1, #17
   1f4b0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f4b4:	f7ff beac 	b.w	1f210 <d_print_comp>
   1f4b8:	68ea      	ldr	r2, [r5, #12]
   1f4ba:	2111      	movs	r1, #17
   1f4bc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f4c0:	f7ff bea6 	b.w	1f210 <d_print_comp>
   1f4c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f4c8:	29ff      	cmp	r1, #255	; 0xff
   1f4ca:	f000 81bc 	beq.w	1f846 <d_print_mod+0x5da>
   1f4ce:	1c4a      	adds	r2, r1, #1
   1f4d0:	2326      	movs	r3, #38	; 0x26
   1f4d2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f4d6:	5463      	strb	r3, [r4, r1]
   1f4d8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f4e0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f4e4:	4d6b      	ldr	r5, [pc, #428]	; (1f694 <d_print_mod+0x428>)
   1f4e6:	2626      	movs	r6, #38	; 0x26
   1f4e8:	1c6f      	adds	r7, r5, #1
   1f4ea:	f04f 0800 	mov.w	r8, #0
   1f4ee:	e00a      	b.n	1f506 <d_print_mod+0x29a>
   1f4f0:	460b      	mov	r3, r1
   1f4f2:	3101      	adds	r1, #1
   1f4f4:	42bd      	cmp	r5, r7
   1f4f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f4fa:	54e6      	strb	r6, [r4, r3]
   1f4fc:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f500:	d0ec      	beq.n	1f4dc <d_print_mod+0x270>
   1f502:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1f506:	29ff      	cmp	r1, #255	; 0xff
   1f508:	d1f2      	bne.n	1f4f0 <d_print_mod+0x284>
   1f50a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f50e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f512:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f516:	4620      	mov	r0, r4
   1f518:	4798      	blx	r3
   1f51a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f51e:	3301      	adds	r3, #1
   1f520:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f524:	2101      	movs	r1, #1
   1f526:	2300      	movs	r3, #0
   1f528:	e7e4      	b.n	1f4f4 <d_print_mod+0x288>
   1f52a:	4e5b      	ldr	r6, [pc, #364]	; (1f698 <d_print_mod+0x42c>)
   1f52c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f530:	f106 0708 	add.w	r7, r6, #8
   1f534:	2520      	movs	r5, #32
   1f536:	f04f 0800 	mov.w	r8, #0
   1f53a:	e00a      	b.n	1f552 <d_print_mod+0x2e6>
   1f53c:	460b      	mov	r3, r1
   1f53e:	3101      	adds	r1, #1
   1f540:	42b7      	cmp	r7, r6
   1f542:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f546:	54e5      	strb	r5, [r4, r3]
   1f548:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f54c:	d0c6      	beq.n	1f4dc <d_print_mod+0x270>
   1f54e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f552:	29ff      	cmp	r1, #255	; 0xff
   1f554:	d1f2      	bne.n	1f53c <d_print_mod+0x2d0>
   1f556:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f55a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f55e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f562:	4620      	mov	r0, r4
   1f564:	4798      	blx	r3
   1f566:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f56a:	3301      	adds	r3, #1
   1f56c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f570:	2101      	movs	r1, #1
   1f572:	2300      	movs	r3, #0
   1f574:	e7e4      	b.n	1f540 <d_print_mod+0x2d4>
   1f576:	4e49      	ldr	r6, [pc, #292]	; (1f69c <d_print_mod+0x430>)
   1f578:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f57c:	f106 070a 	add.w	r7, r6, #10
   1f580:	2520      	movs	r5, #32
   1f582:	f04f 0800 	mov.w	r8, #0
   1f586:	e00a      	b.n	1f59e <d_print_mod+0x332>
   1f588:	460b      	mov	r3, r1
   1f58a:	3101      	adds	r1, #1
   1f58c:	42b7      	cmp	r7, r6
   1f58e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f592:	54e5      	strb	r5, [r4, r3]
   1f594:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f598:	d0a0      	beq.n	1f4dc <d_print_mod+0x270>
   1f59a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f59e:	29ff      	cmp	r1, #255	; 0xff
   1f5a0:	d1f2      	bne.n	1f588 <d_print_mod+0x31c>
   1f5a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f5a6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f5aa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f5ae:	4620      	mov	r0, r4
   1f5b0:	4798      	blx	r3
   1f5b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f5b6:	3301      	adds	r3, #1
   1f5b8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f5bc:	2101      	movs	r1, #1
   1f5be:	2300      	movs	r3, #0
   1f5c0:	e7e4      	b.n	1f58c <d_print_mod+0x320>
   1f5c2:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   1f5c6:	2b28      	cmp	r3, #40	; 0x28
   1f5c8:	f040 80d5 	bne.w	1f776 <d_print_mod+0x50a>
   1f5cc:	4e34      	ldr	r6, [pc, #208]	; (1f6a0 <d_print_mod+0x434>)
   1f5ce:	68ea      	ldr	r2, [r5, #12]
   1f5d0:	2111      	movs	r1, #17
   1f5d2:	4620      	mov	r0, r4
   1f5d4:	f7ff fe1c 	bl	1f210 <d_print_comp>
   1f5d8:	1cb7      	adds	r7, r6, #2
   1f5da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f5de:	253a      	movs	r5, #58	; 0x3a
   1f5e0:	f04f 0800 	mov.w	r8, #0
   1f5e4:	e00b      	b.n	1f5fe <d_print_mod+0x392>
   1f5e6:	460b      	mov	r3, r1
   1f5e8:	3101      	adds	r1, #1
   1f5ea:	42b7      	cmp	r7, r6
   1f5ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f5f0:	54e5      	strb	r5, [r4, r3]
   1f5f2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f5f6:	f43f af71 	beq.w	1f4dc <d_print_mod+0x270>
   1f5fa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f5fe:	29ff      	cmp	r1, #255	; 0xff
   1f600:	d1f1      	bne.n	1f5e6 <d_print_mod+0x37a>
   1f602:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f606:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f60a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f60e:	4620      	mov	r0, r4
   1f610:	4798      	blx	r3
   1f612:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f616:	3301      	adds	r3, #1
   1f618:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f61c:	2101      	movs	r1, #1
   1f61e:	2300      	movs	r3, #0
   1f620:	e7e3      	b.n	1f5ea <d_print_mod+0x37e>
   1f622:	4f20      	ldr	r7, [pc, #128]	; (1f6a4 <d_print_mod+0x438>)
   1f624:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f628:	f107 0909 	add.w	r9, r7, #9
   1f62c:	2620      	movs	r6, #32
   1f62e:	f04f 0800 	mov.w	r8, #0
   1f632:	e00b      	b.n	1f64c <d_print_mod+0x3e0>
   1f634:	460b      	mov	r3, r1
   1f636:	3101      	adds	r1, #1
   1f638:	454f      	cmp	r7, r9
   1f63a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f63e:	54e6      	strb	r6, [r4, r3]
   1f640:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f644:	f000 8085 	beq.w	1f752 <d_print_mod+0x4e6>
   1f648:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f64c:	29ff      	cmp	r1, #255	; 0xff
   1f64e:	d1f1      	bne.n	1f634 <d_print_mod+0x3c8>
   1f650:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f654:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f658:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f65c:	4620      	mov	r0, r4
   1f65e:	4798      	blx	r3
   1f660:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f664:	3301      	adds	r3, #1
   1f666:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f66a:	2101      	movs	r1, #1
   1f66c:	2300      	movs	r3, #0
   1f66e:	e7e3      	b.n	1f638 <d_print_mod+0x3cc>
   1f670:	4e0d      	ldr	r6, [pc, #52]	; (1f6a8 <d_print_mod+0x43c>)
   1f672:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f676:	f106 0710 	add.w	r7, r6, #16
   1f67a:	2520      	movs	r5, #32
   1f67c:	f04f 0800 	mov.w	r8, #0
   1f680:	e020      	b.n	1f6c4 <d_print_mod+0x458>
   1f682:	bf00      	nop
   1f684:	2000368c 	.word	0x2000368c
   1f688:	20003698 	.word	0x20003698
   1f68c:	200036a4 	.word	0x200036a4
   1f690:	200036cc 	.word	0x200036cc
   1f694:	200036d4 	.word	0x200036d4
   1f698:	200036d8 	.word	0x200036d8
   1f69c:	200036e4 	.word	0x200036e4
   1f6a0:	200036f0 	.word	0x200036f0
   1f6a4:	200036f4 	.word	0x200036f4
   1f6a8:	200036ac 	.word	0x200036ac
   1f6ac:	460b      	mov	r3, r1
   1f6ae:	3101      	adds	r1, #1
   1f6b0:	42b7      	cmp	r7, r6
   1f6b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f6b6:	54e5      	strb	r5, [r4, r3]
   1f6b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f6bc:	f43f af0e 	beq.w	1f4dc <d_print_mod+0x270>
   1f6c0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f6c4:	29ff      	cmp	r1, #255	; 0xff
   1f6c6:	d1f1      	bne.n	1f6ac <d_print_mod+0x440>
   1f6c8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f6cc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f6d0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f6d4:	4620      	mov	r0, r4
   1f6d6:	4798      	blx	r3
   1f6d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f6dc:	3301      	adds	r3, #1
   1f6de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f6e2:	2101      	movs	r1, #1
   1f6e4:	2300      	movs	r3, #0
   1f6e6:	e7e3      	b.n	1f6b0 <d_print_mod+0x444>
   1f6e8:	4f6d      	ldr	r7, [pc, #436]	; (1f8a0 <d_print_mod+0x634>)
   1f6ea:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f6ee:	f107 0908 	add.w	r9, r7, #8
   1f6f2:	2620      	movs	r6, #32
   1f6f4:	f04f 0800 	mov.w	r8, #0
   1f6f8:	e00a      	b.n	1f710 <d_print_mod+0x4a4>
   1f6fa:	460b      	mov	r3, r1
   1f6fc:	3101      	adds	r1, #1
   1f6fe:	45b9      	cmp	r9, r7
   1f700:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f704:	54e6      	strb	r6, [r4, r3]
   1f706:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f70a:	d013      	beq.n	1f734 <d_print_mod+0x4c8>
   1f70c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f710:	29ff      	cmp	r1, #255	; 0xff
   1f712:	d1f2      	bne.n	1f6fa <d_print_mod+0x48e>
   1f714:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f718:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f71c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f720:	4620      	mov	r0, r4
   1f722:	4798      	blx	r3
   1f724:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f728:	3301      	adds	r3, #1
   1f72a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f72e:	2101      	movs	r1, #1
   1f730:	2300      	movs	r3, #0
   1f732:	e7e4      	b.n	1f6fe <d_print_mod+0x492>
   1f734:	692a      	ldr	r2, [r5, #16]
   1f736:	2a00      	cmp	r2, #0
   1f738:	f43f aed0 	beq.w	1f4dc <d_print_mod+0x270>
   1f73c:	29ff      	cmp	r1, #255	; 0xff
   1f73e:	d032      	beq.n	1f7a6 <d_print_mod+0x53a>
   1f740:	1c48      	adds	r0, r1, #1
   1f742:	2328      	movs	r3, #40	; 0x28
   1f744:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1f748:	5463      	strb	r3, [r4, r1]
   1f74a:	2111      	movs	r1, #17
   1f74c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f750:	e001      	b.n	1f756 <d_print_mod+0x4ea>
   1f752:	68ea      	ldr	r2, [r5, #12]
   1f754:	2111      	movs	r1, #17
   1f756:	4620      	mov	r0, r4
   1f758:	f7ff fd5a 	bl	1f210 <d_print_comp>
   1f75c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f760:	29ff      	cmp	r1, #255	; 0xff
   1f762:	d061      	beq.n	1f828 <d_print_mod+0x5bc>
   1f764:	1c4a      	adds	r2, r1, #1
   1f766:	2329      	movs	r3, #41	; 0x29
   1f768:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f76c:	5463      	strb	r3, [r4, r1]
   1f76e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f776:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f77a:	29ff      	cmp	r1, #255	; 0xff
   1f77c:	d072      	beq.n	1f864 <d_print_mod+0x5f8>
   1f77e:	1c4a      	adds	r2, r1, #1
   1f780:	2320      	movs	r3, #32
   1f782:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f786:	5463      	strb	r3, [r4, r1]
   1f788:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f78c:	e71e      	b.n	1f5cc <d_print_mod+0x360>
   1f78e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f792:	29ff      	cmp	r1, #255	; 0xff
   1f794:	d076      	beq.n	1f884 <d_print_mod+0x618>
   1f796:	1c4a      	adds	r2, r1, #1
   1f798:	232a      	movs	r3, #42	; 0x2a
   1f79a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f79e:	5463      	strb	r3, [r4, r1]
   1f7a0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f7a4:	e69a      	b.n	1f4dc <d_print_mod+0x270>
   1f7a6:	2600      	movs	r6, #0
   1f7a8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f7ac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f7b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1f7b4:	4620      	mov	r0, r4
   1f7b6:	4798      	blx	r3
   1f7b8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f7bc:	692a      	ldr	r2, [r5, #16]
   1f7be:	3301      	adds	r3, #1
   1f7c0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f7c4:	2001      	movs	r0, #1
   1f7c6:	4631      	mov	r1, r6
   1f7c8:	e7bb      	b.n	1f742 <d_print_mod+0x4d6>
   1f7ca:	2600      	movs	r6, #0
   1f7cc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1f7d0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1f7d4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1f7d8:	4798      	blx	r3
   1f7da:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f7de:	2201      	movs	r2, #1
   1f7e0:	4413      	add	r3, r2
   1f7e2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f7e6:	4631      	mov	r1, r6
   1f7e8:	e659      	b.n	1f49e <d_print_mod+0x232>
   1f7ea:	2500      	movs	r5, #0
   1f7ec:	4619      	mov	r1, r3
   1f7ee:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1f7f2:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f7f6:	4798      	blx	r3
   1f7f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f7fc:	2101      	movs	r1, #1
   1f7fe:	440b      	add	r3, r1
   1f800:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f804:	462b      	mov	r3, r5
   1f806:	e63d      	b.n	1f484 <d_print_mod+0x218>
   1f808:	2100      	movs	r1, #0
   1f80a:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
   1f80e:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
   1f812:	4619      	mov	r1, r3
   1f814:	47a8      	blx	r5
   1f816:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f81a:	2220      	movs	r2, #32
   1f81c:	3301      	adds	r3, #1
   1f81e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f822:	7022      	strb	r2, [r4, #0]
   1f824:	2101      	movs	r1, #1
   1f826:	e652      	b.n	1f4ce <d_print_mod+0x262>
   1f828:	2500      	movs	r5, #0
   1f82a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f82e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f832:	4620      	mov	r0, r4
   1f834:	4798      	blx	r3
   1f836:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f83a:	2201      	movs	r2, #1
   1f83c:	4413      	add	r3, r2
   1f83e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f842:	4629      	mov	r1, r5
   1f844:	e78f      	b.n	1f766 <d_print_mod+0x4fa>
   1f846:	2500      	movs	r5, #0
   1f848:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f84c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f850:	4620      	mov	r0, r4
   1f852:	4798      	blx	r3
   1f854:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f858:	2201      	movs	r2, #1
   1f85a:	4413      	add	r3, r2
   1f85c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f860:	4629      	mov	r1, r5
   1f862:	e635      	b.n	1f4d0 <d_print_mod+0x264>
   1f864:	2600      	movs	r6, #0
   1f866:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1f86a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1f86e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1f872:	4798      	blx	r3
   1f874:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f878:	2201      	movs	r2, #1
   1f87a:	4413      	add	r3, r2
   1f87c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f880:	4631      	mov	r1, r6
   1f882:	e77d      	b.n	1f780 <d_print_mod+0x514>
   1f884:	2500      	movs	r5, #0
   1f886:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f88a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1f88e:	4798      	blx	r3
   1f890:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f894:	2201      	movs	r2, #1
   1f896:	4413      	add	r3, r2
   1f898:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f89c:	4629      	mov	r1, r5
   1f89e:	e77b      	b.n	1f798 <d_print_mod+0x52c>
   1f8a0:	200036c0 	.word	0x200036c0

0001f8a4 <d_print_function_type>:
   1f8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f8a8:	4604      	mov	r4, r0
   1f8aa:	4616      	mov	r6, r2
   1f8ac:	461d      	mov	r5, r3
   1f8ae:	b19b      	cbz	r3, 1f8d8 <d_print_function_type+0x34>
   1f8b0:	4f71      	ldr	r7, [pc, #452]	; (1fa78 <d_print_function_type+0x1d4>)
   1f8b2:	2001      	movs	r0, #1
   1f8b4:	689a      	ldr	r2, [r3, #8]
   1f8b6:	b97a      	cbnz	r2, 1f8d8 <d_print_function_type+0x34>
   1f8b8:	685a      	ldr	r2, [r3, #4]
   1f8ba:	7811      	ldrb	r1, [r2, #0]
   1f8bc:	3919      	subs	r1, #25
   1f8be:	b2c9      	uxtb	r1, r1
   1f8c0:	2912      	cmp	r1, #18
   1f8c2:	fa00 f201 	lsl.w	r2, r0, r1
   1f8c6:	d804      	bhi.n	1f8d2 <d_print_function_type+0x2e>
   1f8c8:	423a      	tst	r2, r7
   1f8ca:	d135      	bne.n	1f938 <d_print_function_type+0x94>
   1f8cc:	f412 6f60 	tst.w	r2, #3584	; 0xe00
   1f8d0:	d174      	bne.n	1f9bc <d_print_function_type+0x118>
   1f8d2:	681b      	ldr	r3, [r3, #0]
   1f8d4:	2b00      	cmp	r3, #0
   1f8d6:	d1ed      	bne.n	1f8b4 <d_print_function_type+0x10>
   1f8d8:	2300      	movs	r3, #0
   1f8da:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1f8de:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1f8e2:	462a      	mov	r2, r5
   1f8e4:	2111      	movs	r1, #17
   1f8e6:	4620      	mov	r0, r4
   1f8e8:	f000 f8c8 	bl	1fa7c <d_print_mod_list>
   1f8ec:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f8f0:	2bff      	cmp	r3, #255	; 0xff
   1f8f2:	d04b      	beq.n	1f98c <d_print_function_type+0xe8>
   1f8f4:	2228      	movs	r2, #40	; 0x28
   1f8f6:	1c59      	adds	r1, r3, #1
   1f8f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f8fc:	54e2      	strb	r2, [r4, r3]
   1f8fe:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f902:	6932      	ldr	r2, [r6, #16]
   1f904:	b12a      	cbz	r2, 1f912 <d_print_function_type+0x6e>
   1f906:	2111      	movs	r1, #17
   1f908:	4620      	mov	r0, r4
   1f90a:	f7ff fc81 	bl	1f210 <d_print_comp>
   1f90e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f912:	29ff      	cmp	r1, #255	; 0xff
   1f914:	d076      	beq.n	1fa04 <d_print_function_type+0x160>
   1f916:	1c4b      	adds	r3, r1, #1
   1f918:	2229      	movs	r2, #41	; 0x29
   1f91a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f91e:	4620      	mov	r0, r4
   1f920:	5462      	strb	r2, [r4, r1]
   1f922:	2301      	movs	r3, #1
   1f924:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f928:	2111      	movs	r1, #17
   1f92a:	462a      	mov	r2, r5
   1f92c:	f000 f8a6 	bl	1fa7c <d_print_mod_list>
   1f930:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   1f934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1f938:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1f93c:	2b20      	cmp	r3, #32
   1f93e:	d145      	bne.n	1f9cc <d_print_function_type+0x128>
   1f940:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f944:	29ff      	cmp	r1, #255	; 0xff
   1f946:	d04e      	beq.n	1f9e6 <d_print_function_type+0x142>
   1f948:	1c4b      	adds	r3, r1, #1
   1f94a:	f04f 0828 	mov.w	r8, #40	; 0x28
   1f94e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f952:	f804 8001 	strb.w	r8, [r4, r1]
   1f956:	f04f 0900 	mov.w	r9, #0
   1f95a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1f95e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1f962:	2111      	movs	r1, #17
   1f964:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1f968:	464b      	mov	r3, r9
   1f96a:	462a      	mov	r2, r5
   1f96c:	4620      	mov	r0, r4
   1f96e:	f000 f885 	bl	1fa7c <d_print_mod_list>
   1f972:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f976:	29ff      	cmp	r1, #255	; 0xff
   1f978:	d053      	beq.n	1fa22 <d_print_function_type+0x17e>
   1f97a:	1c4b      	adds	r3, r1, #1
   1f97c:	2229      	movs	r2, #41	; 0x29
   1f97e:	2bff      	cmp	r3, #255	; 0xff
   1f980:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f984:	5462      	strb	r2, [r4, r1]
   1f986:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f98a:	d1b3      	bne.n	1f8f4 <d_print_function_type+0x50>
   1f98c:	4619      	mov	r1, r3
   1f98e:	2300      	movs	r3, #0
   1f990:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1f994:	4620      	mov	r0, r4
   1f996:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f99a:	4798      	blx	r3
   1f99c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f9a0:	3301      	adds	r3, #1
   1f9a2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f9a6:	2328      	movs	r3, #40	; 0x28
   1f9a8:	7023      	strb	r3, [r4, #0]
   1f9aa:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f9ae:	6932      	ldr	r2, [r6, #16]
   1f9b0:	2101      	movs	r1, #1
   1f9b2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f9b6:	2a00      	cmp	r2, #0
   1f9b8:	d1a5      	bne.n	1f906 <d_print_function_type+0x62>
   1f9ba:	e7ac      	b.n	1f916 <d_print_function_type+0x72>
   1f9bc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1f9c0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1f9c4:	2a28      	cmp	r2, #40	; 0x28
   1f9c6:	d0bb      	beq.n	1f940 <d_print_function_type+0x9c>
   1f9c8:	2b20      	cmp	r3, #32
   1f9ca:	d0b9      	beq.n	1f940 <d_print_function_type+0x9c>
   1f9cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f9d0:	2bff      	cmp	r3, #255	; 0xff
   1f9d2:	d03e      	beq.n	1fa52 <d_print_function_type+0x1ae>
   1f9d4:	1c59      	adds	r1, r3, #1
   1f9d6:	2220      	movs	r2, #32
   1f9d8:	29ff      	cmp	r1, #255	; 0xff
   1f9da:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f9de:	54e2      	strb	r2, [r4, r3]
   1f9e0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f9e4:	d1b0      	bne.n	1f948 <d_print_function_type+0xa4>
   1f9e6:	2700      	movs	r7, #0
   1f9e8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f9ec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1f9f0:	4620      	mov	r0, r4
   1f9f2:	4798      	blx	r3
   1f9f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f9f8:	3301      	adds	r3, #1
   1f9fa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f9fe:	4639      	mov	r1, r7
   1fa00:	2301      	movs	r3, #1
   1fa02:	e7a2      	b.n	1f94a <d_print_function_type+0xa6>
   1fa04:	2600      	movs	r6, #0
   1fa06:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1fa0a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1fa0e:	4620      	mov	r0, r4
   1fa10:	4798      	blx	r3
   1fa12:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fa16:	3301      	adds	r3, #1
   1fa18:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fa1c:	4631      	mov	r1, r6
   1fa1e:	2301      	movs	r3, #1
   1fa20:	e77a      	b.n	1f918 <d_print_function_type+0x74>
   1fa22:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1fa26:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1fa2a:	4620      	mov	r0, r4
   1fa2c:	4798      	blx	r3
   1fa2e:	f642 0329 	movw	r3, #10281	; 0x2829
   1fa32:	8023      	strh	r3, [r4, #0]
   1fa34:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1fa38:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fa3c:	6932      	ldr	r2, [r6, #16]
   1fa3e:	3301      	adds	r3, #1
   1fa40:	2102      	movs	r1, #2
   1fa42:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fa46:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fa4a:	2a00      	cmp	r2, #0
   1fa4c:	f47f af5b 	bne.w	1f906 <d_print_function_type+0x62>
   1fa50:	e761      	b.n	1f916 <d_print_function_type+0x72>
   1fa52:	2200      	movs	r2, #0
   1fa54:	4619      	mov	r1, r3
   1fa56:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1fa5a:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
   1fa5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fa62:	4620      	mov	r0, r4
   1fa64:	47b8      	blx	r7
   1fa66:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fa6a:	2220      	movs	r2, #32
   1fa6c:	3301      	adds	r3, #1
   1fa6e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fa72:	7022      	strb	r2, [r4, #0]
   1fa74:	2101      	movs	r1, #1
   1fa76:	e767      	b.n	1f948 <d_print_function_type+0xa4>
   1fa78:	00043107 	.word	0x00043107

0001fa7c <d_print_mod_list>:
   1fa7c:	2a00      	cmp	r2, #0
   1fa7e:	f000 80c2 	beq.w	1fc06 <d_print_mod_list+0x18a>
   1fa82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fa86:	4605      	mov	r5, r0
   1fa88:	b088      	sub	sp, #32
   1fa8a:	461e      	mov	r6, r3
   1fa8c:	4614      	mov	r4, r2
   1fa8e:	2701      	movs	r7, #1
   1fa90:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1fa94:	b9ca      	cbnz	r2, 1faca <d_print_mod_list+0x4e>
   1fa96:	68a2      	ldr	r2, [r4, #8]
   1fa98:	bb0a      	cbnz	r2, 1fade <d_print_mod_list+0x62>
   1fa9a:	6862      	ldr	r2, [r4, #4]
   1fa9c:	7811      	ldrb	r1, [r2, #0]
   1fa9e:	b1be      	cbz	r6, 1fad0 <d_print_mod_list+0x54>
   1faa0:	68e3      	ldr	r3, [r4, #12]
   1faa2:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1faa6:	60a7      	str	r7, [r4, #8]
   1faa8:	2929      	cmp	r1, #41	; 0x29
   1faaa:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1faae:	d024      	beq.n	1fafa <d_print_mod_list+0x7e>
   1fab0:	292a      	cmp	r1, #42	; 0x2a
   1fab2:	d02c      	beq.n	1fb0e <d_print_mod_list+0x92>
   1fab4:	2902      	cmp	r1, #2
   1fab6:	d034      	beq.n	1fb22 <d_print_mod_list+0xa6>
   1fab8:	2111      	movs	r1, #17
   1faba:	4628      	mov	r0, r5
   1fabc:	f7ff fbd6 	bl	1f26c <d_print_mod>
   1fac0:	6824      	ldr	r4, [r4, #0]
   1fac2:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1fac6:	2c00      	cmp	r4, #0
   1fac8:	d1e2      	bne.n	1fa90 <d_print_mod_list+0x14>
   1faca:	b008      	add	sp, #32
   1facc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fad0:	294e      	cmp	r1, #78	; 0x4e
   1fad2:	d004      	beq.n	1fade <d_print_mod_list+0x62>
   1fad4:	d807      	bhi.n	1fae6 <d_print_mod_list+0x6a>
   1fad6:	f1a1 031c 	sub.w	r3, r1, #28
   1fada:	2b04      	cmp	r3, #4
   1fadc:	d8e0      	bhi.n	1faa0 <d_print_mod_list+0x24>
   1fade:	6824      	ldr	r4, [r4, #0]
   1fae0:	2c00      	cmp	r4, #0
   1fae2:	d1d5      	bne.n	1fa90 <d_print_mod_list+0x14>
   1fae4:	e7f1      	b.n	1faca <d_print_mod_list+0x4e>
   1fae6:	3950      	subs	r1, #80	; 0x50
   1fae8:	2901      	cmp	r1, #1
   1faea:	d9f8      	bls.n	1fade <d_print_mod_list+0x62>
   1faec:	68e3      	ldr	r3, [r4, #12]
   1faee:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1faf2:	60a7      	str	r7, [r4, #8]
   1faf4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1faf8:	e7de      	b.n	1fab8 <d_print_mod_list+0x3c>
   1fafa:	6823      	ldr	r3, [r4, #0]
   1fafc:	2111      	movs	r1, #17
   1fafe:	4628      	mov	r0, r5
   1fb00:	f7ff fed0 	bl	1f8a4 <d_print_function_type>
   1fb04:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1fb08:	b008      	add	sp, #32
   1fb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fb0e:	6823      	ldr	r3, [r4, #0]
   1fb10:	2111      	movs	r1, #17
   1fb12:	4628      	mov	r0, r5
   1fb14:	f000 f8d6 	bl	1fcc4 <d_print_array_type>
   1fb18:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1fb1c:	b008      	add	sp, #32
   1fb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fb22:	4e64      	ldr	r6, [pc, #400]	; (1fcb4 <d_print_mod_list+0x238>)
   1fb24:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
   1fb28:	68d2      	ldr	r2, [r2, #12]
   1fb2a:	f04f 0900 	mov.w	r9, #0
   1fb2e:	2111      	movs	r1, #17
   1fb30:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
   1fb34:	4628      	mov	r0, r5
   1fb36:	f7ff fb6b 	bl	1f210 <d_print_comp>
   1fb3a:	f106 0a01 	add.w	sl, r6, #1
   1fb3e:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
   1fb42:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1fb46:	273a      	movs	r7, #58	; 0x3a
   1fb48:	e00a      	b.n	1fb60 <d_print_mod_list+0xe4>
   1fb4a:	460b      	mov	r3, r1
   1fb4c:	3101      	adds	r1, #1
   1fb4e:	4556      	cmp	r6, sl
   1fb50:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1fb54:	54ef      	strb	r7, [r5, r3]
   1fb56:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1fb5a:	d013      	beq.n	1fb84 <d_print_mod_list+0x108>
   1fb5c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1fb60:	29ff      	cmp	r1, #255	; 0xff
   1fb62:	d1f2      	bne.n	1fb4a <d_print_mod_list+0xce>
   1fb64:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1fb68:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1fb6c:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1fb70:	4628      	mov	r0, r5
   1fb72:	4798      	blx	r3
   1fb74:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1fb78:	3301      	adds	r3, #1
   1fb7a:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1fb7e:	2101      	movs	r1, #1
   1fb80:	2300      	movs	r3, #0
   1fb82:	e7e4      	b.n	1fb4e <d_print_mod_list+0xd2>
   1fb84:	6863      	ldr	r3, [r4, #4]
   1fb86:	691c      	ldr	r4, [r3, #16]
   1fb88:	7823      	ldrb	r3, [r4, #0]
   1fb8a:	2b48      	cmp	r3, #72	; 0x48
   1fb8c:	d017      	beq.n	1fbbe <d_print_mod_list+0x142>
   1fb8e:	2b4e      	cmp	r3, #78	; 0x4e
   1fb90:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1fb94:	f1a3 011c 	sub.w	r1, r3, #28
   1fb98:	d00e      	beq.n	1fbb8 <d_print_mod_list+0x13c>
   1fb9a:	d80b      	bhi.n	1fbb4 <d_print_mod_list+0x138>
   1fb9c:	2904      	cmp	r1, #4
   1fb9e:	d90b      	bls.n	1fbb8 <d_print_mod_list+0x13c>
   1fba0:	4622      	mov	r2, r4
   1fba2:	2111      	movs	r1, #17
   1fba4:	4628      	mov	r0, r5
   1fba6:	f7ff fb33 	bl	1f210 <d_print_comp>
   1fbaa:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1fbae:	b008      	add	sp, #32
   1fbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fbb4:	2a01      	cmp	r2, #1
   1fbb6:	d8f3      	bhi.n	1fba0 <d_print_mod_list+0x124>
   1fbb8:	68e4      	ldr	r4, [r4, #12]
   1fbba:	7823      	ldrb	r3, [r4, #0]
   1fbbc:	e7e7      	b.n	1fb8e <d_print_mod_list+0x112>
   1fbbe:	4f3e      	ldr	r7, [pc, #248]	; (1fcb8 <d_print_mod_list+0x23c>)
   1fbc0:	267b      	movs	r6, #123	; 0x7b
   1fbc2:	f107 0a0c 	add.w	sl, r7, #12
   1fbc6:	f04f 0900 	mov.w	r9, #0
   1fbca:	e00a      	b.n	1fbe2 <d_print_mod_list+0x166>
   1fbcc:	460b      	mov	r3, r1
   1fbce:	3101      	adds	r1, #1
   1fbd0:	4557      	cmp	r7, sl
   1fbd2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1fbd6:	54ee      	strb	r6, [r5, r3]
   1fbd8:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1fbdc:	d014      	beq.n	1fc08 <d_print_mod_list+0x18c>
   1fbde:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1fbe2:	29ff      	cmp	r1, #255	; 0xff
   1fbe4:	d1f2      	bne.n	1fbcc <d_print_mod_list+0x150>
   1fbe6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1fbea:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1fbee:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1fbf2:	4628      	mov	r0, r5
   1fbf4:	4798      	blx	r3
   1fbf6:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1fbfa:	3301      	adds	r3, #1
   1fbfc:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1fc00:	2101      	movs	r1, #1
   1fc02:	2300      	movs	r3, #0
   1fc04:	e7e4      	b.n	1fbd0 <d_print_mod_list+0x154>
   1fc06:	4770      	bx	lr
   1fc08:	6922      	ldr	r2, [r4, #16]
   1fc0a:	492c      	ldr	r1, [pc, #176]	; (1fcbc <d_print_mod_list+0x240>)
   1fc0c:	3201      	adds	r2, #1
   1fc0e:	a801      	add	r0, sp, #4
   1fc10:	f002 fd76 	bl	22700 <sprintf>
   1fc14:	a801      	add	r0, sp, #4
   1fc16:	f003 fdb3 	bl	23780 <strlen>
   1fc1a:	b320      	cbz	r0, 1fc66 <d_print_mod_list+0x1ea>
   1fc1c:	ae01      	add	r6, sp, #4
   1fc1e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1fc22:	eb06 0a00 	add.w	sl, r6, r0
   1fc26:	f04f 0900 	mov.w	r9, #0
   1fc2a:	e008      	b.n	1fc3e <d_print_mod_list+0x1c2>
   1fc2c:	460b      	mov	r3, r1
   1fc2e:	3101      	adds	r1, #1
   1fc30:	4556      	cmp	r6, sl
   1fc32:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1fc36:	54ef      	strb	r7, [r5, r3]
   1fc38:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1fc3c:	d015      	beq.n	1fc6a <d_print_mod_list+0x1ee>
   1fc3e:	29ff      	cmp	r1, #255	; 0xff
   1fc40:	f816 7b01 	ldrb.w	r7, [r6], #1
   1fc44:	d1f2      	bne.n	1fc2c <d_print_mod_list+0x1b0>
   1fc46:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1fc4a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1fc4e:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1fc52:	4628      	mov	r0, r5
   1fc54:	4798      	blx	r3
   1fc56:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1fc5a:	3301      	adds	r3, #1
   1fc5c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1fc60:	2101      	movs	r1, #1
   1fc62:	2300      	movs	r3, #0
   1fc64:	e7e4      	b.n	1fc30 <d_print_mod_list+0x1b4>
   1fc66:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1fc6a:	4f15      	ldr	r7, [pc, #84]	; (1fcc0 <d_print_mod_list+0x244>)
   1fc6c:	267d      	movs	r6, #125	; 0x7d
   1fc6e:	f107 0a02 	add.w	sl, r7, #2
   1fc72:	f04f 0900 	mov.w	r9, #0
   1fc76:	e00a      	b.n	1fc8e <d_print_mod_list+0x212>
   1fc78:	460b      	mov	r3, r1
   1fc7a:	3101      	adds	r1, #1
   1fc7c:	4557      	cmp	r7, sl
   1fc7e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1fc82:	54ee      	strb	r6, [r5, r3]
   1fc84:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1fc88:	d096      	beq.n	1fbb8 <d_print_mod_list+0x13c>
   1fc8a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1fc8e:	29ff      	cmp	r1, #255	; 0xff
   1fc90:	d1f2      	bne.n	1fc78 <d_print_mod_list+0x1fc>
   1fc92:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1fc96:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1fc9a:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1fc9e:	4628      	mov	r0, r5
   1fca0:	4798      	blx	r3
   1fca2:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1fca6:	3301      	adds	r3, #1
   1fca8:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1fcac:	2101      	movs	r1, #1
   1fcae:	2300      	movs	r3, #0
   1fcb0:	e7e4      	b.n	1fc7c <d_print_mod_list+0x200>
   1fcb2:	bf00      	nop
   1fcb4:	2000340c 	.word	0x2000340c
   1fcb8:	20003410 	.word	0x20003410
   1fcbc:	200033c0 	.word	0x200033c0
   1fcc0:	20003420 	.word	0x20003420

0001fcc4 <d_print_array_type>:
   1fcc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1fcc8:	4604      	mov	r4, r0
   1fcca:	4617      	mov	r7, r2
   1fccc:	b153      	cbz	r3, 1fce4 <d_print_array_type+0x20>
   1fcce:	461e      	mov	r6, r3
   1fcd0:	689d      	ldr	r5, [r3, #8]
   1fcd2:	b37d      	cbz	r5, 1fd34 <d_print_array_type+0x70>
   1fcd4:	681b      	ldr	r3, [r3, #0]
   1fcd6:	2b00      	cmp	r3, #0
   1fcd8:	d1fa      	bne.n	1fcd0 <d_print_array_type+0xc>
   1fcda:	4632      	mov	r2, r6
   1fcdc:	2111      	movs	r1, #17
   1fcde:	4620      	mov	r0, r4
   1fce0:	f7ff fecc 	bl	1fa7c <d_print_mod_list>
   1fce4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1fce8:	2bff      	cmp	r3, #255	; 0xff
   1fcea:	f000 809d 	beq.w	1fe28 <d_print_array_type+0x164>
   1fcee:	1c59      	adds	r1, r3, #1
   1fcf0:	2220      	movs	r2, #32
   1fcf2:	29ff      	cmp	r1, #255	; 0xff
   1fcf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fcf8:	54e2      	strb	r2, [r4, r3]
   1fcfa:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fcfe:	d027      	beq.n	1fd50 <d_print_array_type+0x8c>
   1fd00:	225b      	movs	r2, #91	; 0x5b
   1fd02:	1c4b      	adds	r3, r1, #1
   1fd04:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fd08:	5462      	strb	r2, [r4, r1]
   1fd0a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fd0e:	68fa      	ldr	r2, [r7, #12]
   1fd10:	b12a      	cbz	r2, 1fd1e <d_print_array_type+0x5a>
   1fd12:	2111      	movs	r1, #17
   1fd14:	4620      	mov	r0, r4
   1fd16:	f7ff fa7b 	bl	1f210 <d_print_comp>
   1fd1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1fd1e:	2bff      	cmp	r3, #255	; 0xff
   1fd20:	d02f      	beq.n	1fd82 <d_print_array_type+0xbe>
   1fd22:	1c59      	adds	r1, r3, #1
   1fd24:	225d      	movs	r2, #93	; 0x5d
   1fd26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fd2a:	54e2      	strb	r2, [r4, r3]
   1fd2c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fd34:	685b      	ldr	r3, [r3, #4]
   1fd36:	781b      	ldrb	r3, [r3, #0]
   1fd38:	2b2a      	cmp	r3, #42	; 0x2a
   1fd3a:	d132      	bne.n	1fda2 <d_print_array_type+0xde>
   1fd3c:	2111      	movs	r1, #17
   1fd3e:	462b      	mov	r3, r5
   1fd40:	4632      	mov	r2, r6
   1fd42:	4620      	mov	r0, r4
   1fd44:	f7ff fe9a 	bl	1fa7c <d_print_mod_list>
   1fd48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fd4c:	29ff      	cmp	r1, #255	; 0xff
   1fd4e:	d1d7      	bne.n	1fd00 <d_print_array_type+0x3c>
   1fd50:	2200      	movs	r2, #0
   1fd52:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fd56:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1fd5a:	4620      	mov	r0, r4
   1fd5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fd60:	4798      	blx	r3
   1fd62:	225b      	movs	r2, #91	; 0x5b
   1fd64:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fd68:	7022      	strb	r2, [r4, #0]
   1fd6a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fd6e:	68fa      	ldr	r2, [r7, #12]
   1fd70:	1c59      	adds	r1, r3, #1
   1fd72:	2301      	movs	r3, #1
   1fd74:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   1fd78:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fd7c:	2a00      	cmp	r2, #0
   1fd7e:	d1c8      	bne.n	1fd12 <d_print_array_type+0x4e>
   1fd80:	e7cf      	b.n	1fd22 <d_print_array_type+0x5e>
   1fd82:	2500      	movs	r5, #0
   1fd84:	4619      	mov	r1, r3
   1fd86:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1fd8a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1fd8e:	4620      	mov	r0, r4
   1fd90:	4798      	blx	r3
   1fd92:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fd96:	2101      	movs	r1, #1
   1fd98:	440b      	add	r3, r1
   1fd9a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fd9e:	462b      	mov	r3, r5
   1fda0:	e7c0      	b.n	1fd24 <d_print_array_type+0x60>
   1fda2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1fe88 <d_print_array_type+0x1c4>
   1fda6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fdaa:	f04f 0920 	mov.w	r9, #32
   1fdae:	f108 0a01 	add.w	sl, r8, #1
   1fdb2:	e00c      	b.n	1fdce <d_print_array_type+0x10a>
   1fdb4:	460b      	mov	r3, r1
   1fdb6:	45d0      	cmp	r8, sl
   1fdb8:	f101 0101 	add.w	r1, r1, #1
   1fdbc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fdc0:	f804 9003 	strb.w	r9, [r4, r3]
   1fdc4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1fdc8:	d01a      	beq.n	1fe00 <d_print_array_type+0x13c>
   1fdca:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1fdce:	29ff      	cmp	r1, #255	; 0xff
   1fdd0:	d1f0      	bne.n	1fdb4 <d_print_array_type+0xf0>
   1fdd2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fdd6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fdda:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1fdde:	4620      	mov	r0, r4
   1fde0:	4798      	blx	r3
   1fde2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fde6:	3301      	adds	r3, #1
   1fde8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fdec:	2300      	movs	r3, #0
   1fdee:	2101      	movs	r1, #1
   1fdf0:	45d0      	cmp	r8, sl
   1fdf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fdf6:	f804 9003 	strb.w	r9, [r4, r3]
   1fdfa:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1fdfe:	d1e4      	bne.n	1fdca <d_print_array_type+0x106>
   1fe00:	2111      	movs	r1, #17
   1fe02:	2300      	movs	r3, #0
   1fe04:	4632      	mov	r2, r6
   1fe06:	4620      	mov	r0, r4
   1fe08:	f7ff fe38 	bl	1fa7c <d_print_mod_list>
   1fe0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fe10:	29ff      	cmp	r1, #255	; 0xff
   1fe12:	d026      	beq.n	1fe62 <d_print_array_type+0x19e>
   1fe14:	1c4b      	adds	r3, r1, #1
   1fe16:	2229      	movs	r2, #41	; 0x29
   1fe18:	2bff      	cmp	r3, #255	; 0xff
   1fe1a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fe1e:	5462      	strb	r2, [r4, r1]
   1fe20:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fe24:	f47f af63 	bne.w	1fcee <d_print_array_type+0x2a>
   1fe28:	2200      	movs	r2, #0
   1fe2a:	4619      	mov	r1, r3
   1fe2c:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1fe30:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
   1fe34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fe38:	4620      	mov	r0, r4
   1fe3a:	47a8      	blx	r5
   1fe3c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fe40:	225b      	movs	r2, #91	; 0x5b
   1fe42:	f645 3120 	movw	r1, #23328	; 0x5b20
   1fe46:	8021      	strh	r1, [r4, #0]
   1fe48:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1fe4c:	68fa      	ldr	r2, [r7, #12]
   1fe4e:	3301      	adds	r3, #1
   1fe50:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fe54:	2302      	movs	r3, #2
   1fe56:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fe5a:	2a00      	cmp	r2, #0
   1fe5c:	f47f af59 	bne.w	1fd12 <d_print_array_type+0x4e>
   1fe60:	e75f      	b.n	1fd22 <d_print_array_type+0x5e>
   1fe62:	2200      	movs	r2, #0
   1fe64:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fe68:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1fe6c:	4620      	mov	r0, r4
   1fe6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fe72:	4798      	blx	r3
   1fe74:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fe78:	2229      	movs	r2, #41	; 0x29
   1fe7a:	3301      	adds	r3, #1
   1fe7c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fe80:	7022      	strb	r2, [r4, #0]
   1fe82:	2301      	movs	r3, #1
   1fe84:	e733      	b.n	1fcee <d_print_array_type+0x2a>
   1fe86:	bf00      	nop
   1fe88:	20003608 	.word	0x20003608

0001fe8c <d_print_expr_op>:
   1fe8c:	7811      	ldrb	r1, [r2, #0]
   1fe8e:	2932      	cmp	r1, #50	; 0x32
   1fe90:	d002      	beq.n	1fe98 <d_print_expr_op+0xc>
   1fe92:	2111      	movs	r1, #17
   1fe94:	f7ff b9bc 	b.w	1f210 <d_print_comp>
   1fe98:	68d3      	ldr	r3, [r2, #12]
   1fe9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fe9e:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
   1fea2:	b367      	cbz	r7, 1fefe <d_print_expr_op+0x72>
   1fea4:	442f      	add	r7, r5
   1fea6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1feaa:	4604      	mov	r4, r0
   1feac:	3d01      	subs	r5, #1
   1feae:	3f01      	subs	r7, #1
   1feb0:	f04f 0800 	mov.w	r8, #0
   1feb4:	e009      	b.n	1feca <d_print_expr_op+0x3e>
   1feb6:	460b      	mov	r3, r1
   1feb8:	42bd      	cmp	r5, r7
   1feba:	f101 0101 	add.w	r1, r1, #1
   1febe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fec2:	54e6      	strb	r6, [r4, r3]
   1fec4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1fec8:	d019      	beq.n	1fefe <d_print_expr_op+0x72>
   1feca:	29ff      	cmp	r1, #255	; 0xff
   1fecc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1fed0:	d1f1      	bne.n	1feb6 <d_print_expr_op+0x2a>
   1fed2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fed6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1feda:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1fede:	4620      	mov	r0, r4
   1fee0:	4798      	blx	r3
   1fee2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fee6:	3301      	adds	r3, #1
   1fee8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1feec:	2300      	movs	r3, #0
   1feee:	2101      	movs	r1, #1
   1fef0:	42bd      	cmp	r5, r7
   1fef2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fef6:	54e6      	strb	r6, [r4, r3]
   1fef8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1fefc:	d1e5      	bne.n	1feca <d_print_expr_op+0x3e>
   1fefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff02:	bf00      	nop

0001ff04 <d_demangle_callback.constprop.0>:
   1ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff08:	ed2d 8b02 	vpush	{d8}
   1ff0c:	b0e7      	sub	sp, #412	; 0x19c
   1ff0e:	7803      	ldrb	r3, [r0, #0]
   1ff10:	af00      	add	r7, sp, #0
   1ff12:	2b5f      	cmp	r3, #95	; 0x5f
   1ff14:	e9c7 2100 	strd	r2, r1, [r7]
   1ff18:	4605      	mov	r5, r0
   1ff1a:	f000 8144 	beq.w	201a6 <d_demangle_callback.constprop.0+0x2a2>
   1ff1e:	49a9      	ldr	r1, [pc, #676]	; (201c4 <d_demangle_callback.constprop.0+0x2c0>)
   1ff20:	2208      	movs	r2, #8
   1ff22:	4628      	mov	r0, r5
   1ff24:	f003 f8ea 	bl	230fc <strncmp>
   1ff28:	2800      	cmp	r0, #0
   1ff2a:	f000 8107 	beq.w	2013c <d_demangle_callback.constprop.0+0x238>
   1ff2e:	f04f 0900 	mov.w	r9, #0
   1ff32:	2301      	movs	r3, #1
   1ff34:	f1b9 0f02 	cmp.w	r9, #2
   1ff38:	647b      	str	r3, [r7, #68]	; 0x44
   1ff3a:	bf0c      	ite	eq
   1ff3c:	2345      	moveq	r3, #69	; 0x45
   1ff3e:	2346      	movne	r3, #70	; 0x46
   1ff40:	f1a9 0a02 	sub.w	sl, r9, #2
   1ff44:	ee08 3a10 	vmov	s16, r3
   1ff48:	fa5f fa8a 	uxtb.w	sl, sl
   1ff4c:	4628      	mov	r0, r5
   1ff4e:	f003 fc17 	bl	23780 <strlen>
   1ff52:	182b      	adds	r3, r5, r0
   1ff54:	0042      	lsls	r2, r0, #1
   1ff56:	2100      	movs	r1, #0
   1ff58:	e9c7 5303 	strd	r5, r3, [r7, #12]
   1ff5c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1ff60:	f04f 0311 	mov.w	r3, #17
   1ff64:	e9c7 3505 	strd	r3, r5, [r7, #20]
   1ff68:	e9c7 1208 	strd	r1, r2, [r7, #32]
   1ff6c:	e9c7 100b 	strd	r1, r0, [r7, #44]	; 0x2c
   1ff70:	e9c7 110d 	strd	r1, r1, [r7, #52]	; 0x34
   1ff74:	e9c7 110f 	strd	r1, r1, [r7, #60]	; 0x3c
   1ff78:	64b9      	str	r1, [r7, #72]	; 0x48
   1ff7a:	f200 811b 	bhi.w	201b4 <d_demangle_callback.constprop.0+0x2b0>
   1ff7e:	0083      	lsls	r3, r0, #2
   1ff80:	46e8      	mov	r8, sp
   1ff82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1ff86:	3307      	adds	r3, #7
   1ff88:	eba8 00c0 	sub.w	r0, r8, r0, lsl #3
   1ff8c:	4685      	mov	sp, r0
   1ff8e:	f023 0307 	bic.w	r3, r3, #7
   1ff92:	466e      	mov	r6, sp
   1ff94:	f1b9 0f01 	cmp.w	r9, #1
   1ff98:	ebad 0d03 	sub.w	sp, sp, r3
   1ff9c:	61fe      	str	r6, [r7, #28]
   1ff9e:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
   1ffa2:	d040      	beq.n	20026 <d_demangle_callback.constprop.0+0x122>
   1ffa4:	f1ba 0f01 	cmp.w	sl, #1
   1ffa8:	d835      	bhi.n	20016 <d_demangle_callback.constprop.0+0x112>
   1ffaa:	7aeb      	ldrb	r3, [r5, #11]
   1ffac:	f105 040b 	add.w	r4, r5, #11
   1ffb0:	2b5f      	cmp	r3, #95	; 0x5f
   1ffb2:	61bc      	str	r4, [r7, #24]
   1ffb4:	d103      	bne.n	1ffbe <d_demangle_callback.constprop.0+0xba>
   1ffb6:	7b2b      	ldrb	r3, [r5, #12]
   1ffb8:	2b5a      	cmp	r3, #90	; 0x5a
   1ffba:	f000 80b0 	beq.w	2011e <d_demangle_callback.constprop.0+0x21a>
   1ffbe:	2a00      	cmp	r2, #0
   1ffc0:	f340 80ab 	ble.w	2011a <d_demangle_callback.constprop.0+0x216>
   1ffc4:	4620      	mov	r0, r4
   1ffc6:	f003 fbdb 	bl	23780 <strlen>
   1ffca:	2300      	movs	r3, #0
   1ffcc:	2201      	movs	r2, #1
   1ffce:	e9c6 3301 	strd	r3, r3, [r6, #4]
   1ffd2:	623a      	str	r2, [r7, #32]
   1ffd4:	2800      	cmp	r0, #0
   1ffd6:	f000 80a0 	beq.w	2011a <d_demangle_callback.constprop.0+0x216>
   1ffda:	e9c6 4003 	strd	r4, r0, [r6, #12]
   1ffde:	7033      	strb	r3, [r6, #0]
   1ffe0:	2300      	movs	r3, #0
   1ffe2:	4632      	mov	r2, r6
   1ffe4:	ee18 1a10 	vmov	r1, s16
   1ffe8:	f107 000c 	add.w	r0, r7, #12
   1ffec:	f7fa fc6c 	bl	1a8c8 <d_make_comp>
   1fff0:	4606      	mov	r6, r0
   1fff2:	4620      	mov	r0, r4
   1fff4:	f003 fbc4 	bl	23780 <strlen>
   1fff8:	1823      	adds	r3, r4, r0
   1fffa:	61bb      	str	r3, [r7, #24]
   1fffc:	5c23      	ldrb	r3, [r4, r0]
   1fffe:	b913      	cbnz	r3, 20006 <d_demangle_callback.constprop.0+0x102>
   20000:	2e00      	cmp	r6, #0
   20002:	f040 80e1 	bne.w	201c8 <d_demangle_callback.constprop.0+0x2c4>
   20006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   20008:	3301      	adds	r3, #1
   2000a:	f040 80c3 	bne.w	20194 <d_demangle_callback.constprop.0+0x290>
   2000e:	2300      	movs	r3, #0
   20010:	647b      	str	r3, [r7, #68]	; 0x44
   20012:	46c5      	mov	sp, r8
   20014:	e79a      	b.n	1ff4c <d_demangle_callback.constprop.0+0x48>
   20016:	f107 000c 	add.w	r0, r7, #12
   2001a:	f7fb f8a7 	bl	1b16c <d_type>
   2001e:	69bb      	ldr	r3, [r7, #24]
   20020:	4606      	mov	r6, r0
   20022:	781b      	ldrb	r3, [r3, #0]
   20024:	e7eb      	b.n	1fffe <d_demangle_callback.constprop.0+0xfa>
   20026:	782b      	ldrb	r3, [r5, #0]
   20028:	2b5f      	cmp	r3, #95	; 0x5f
   2002a:	d1ec      	bne.n	20006 <d_demangle_callback.constprop.0+0x102>
   2002c:	786b      	ldrb	r3, [r5, #1]
   2002e:	1c6a      	adds	r2, r5, #1
   20030:	2b5a      	cmp	r3, #90	; 0x5a
   20032:	61ba      	str	r2, [r7, #24]
   20034:	d1e7      	bne.n	20006 <d_demangle_callback.constprop.0+0x102>
   20036:	78ab      	ldrb	r3, [r5, #2]
   20038:	1caa      	adds	r2, r5, #2
   2003a:	2b47      	cmp	r3, #71	; 0x47
   2003c:	61ba      	str	r2, [r7, #24]
   2003e:	f000 809b 	beq.w	20178 <d_demangle_callback.constprop.0+0x274>
   20042:	2b54      	cmp	r3, #84	; 0x54
   20044:	f000 8098 	beq.w	20178 <d_demangle_callback.constprop.0+0x274>
   20048:	4649      	mov	r1, r9
   2004a:	f107 000c 	add.w	r0, r7, #12
   2004e:	f7fc ffe9 	bl	1d024 <d_encoding.part.0>
   20052:	697b      	ldr	r3, [r7, #20]
   20054:	07db      	lsls	r3, r3, #31
   20056:	4606      	mov	r6, r0
   20058:	f140 8097 	bpl.w	2018a <d_demangle_callback.constprop.0+0x286>
   2005c:	69ba      	ldr	r2, [r7, #24]
   2005e:	7813      	ldrb	r3, [r2, #0]
   20060:	2b2e      	cmp	r3, #46	; 0x2e
   20062:	d1cc      	bne.n	1fffe <d_demangle_callback.constprop.0+0xfa>
   20064:	4633      	mov	r3, r6
   20066:	4616      	mov	r6, r2
   20068:	461a      	mov	r2, r3
   2006a:	7873      	ldrb	r3, [r6, #1]
   2006c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   20070:	2919      	cmp	r1, #25
   20072:	f04f 0b00 	mov.w	fp, #0
   20076:	d945      	bls.n	20104 <d_demangle_callback.constprop.0+0x200>
   20078:	2b5f      	cmp	r3, #95	; 0x5f
   2007a:	d043      	beq.n	20104 <d_demangle_callback.constprop.0+0x200>
   2007c:	3b30      	subs	r3, #48	; 0x30
   2007e:	2b09      	cmp	r3, #9
   20080:	f200 80fd 	bhi.w	2027e <d_demangle_callback.constprop.0+0x37a>
   20084:	7831      	ldrb	r1, [r6, #0]
   20086:	4634      	mov	r4, r6
   20088:	292e      	cmp	r1, #46	; 0x2e
   2008a:	d112      	bne.n	200b2 <d_demangle_callback.constprop.0+0x1ae>
   2008c:	7863      	ldrb	r3, [r4, #1]
   2008e:	3b30      	subs	r3, #48	; 0x30
   20090:	2b09      	cmp	r3, #9
   20092:	d80e      	bhi.n	200b2 <d_demangle_callback.constprop.0+0x1ae>
   20094:	78a3      	ldrb	r3, [r4, #2]
   20096:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   2009a:	1ca0      	adds	r0, r4, #2
   2009c:	2909      	cmp	r1, #9
   2009e:	4604      	mov	r4, r0
   200a0:	d805      	bhi.n	200ae <d_demangle_callback.constprop.0+0x1aa>
   200a2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   200a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   200aa:	2909      	cmp	r1, #9
   200ac:	d9f9      	bls.n	200a2 <d_demangle_callback.constprop.0+0x19e>
   200ae:	2b2e      	cmp	r3, #46	; 0x2e
   200b0:	d0ec      	beq.n	2008c <d_demangle_callback.constprop.0+0x188>
   200b2:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
   200b6:	4299      	cmp	r1, r3
   200b8:	61bc      	str	r4, [r7, #24]
   200ba:	eba4 0006 	sub.w	r0, r4, r6
   200be:	da67      	bge.n	20190 <d_demangle_callback.constprop.0+0x28c>
   200c0:	f8d7 c01c 	ldr.w	ip, [r7, #28]
   200c4:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
   200c8:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   200cc:	3101      	adds	r1, #1
   200ce:	2800      	cmp	r0, #0
   200d0:	e9c3 bb01 	strd	fp, fp, [r3, #4]
   200d4:	6239      	str	r1, [r7, #32]
   200d6:	dd5b      	ble.n	20190 <d_demangle_callback.constprop.0+0x28c>
   200d8:	e9c3 bb01 	strd	fp, fp, [r3, #4]
   200dc:	f80c b02e 	strb.w	fp, [ip, lr, lsl #2]
   200e0:	e9c3 6003 	strd	r6, r0, [r3, #12]
   200e4:	214f      	movs	r1, #79	; 0x4f
   200e6:	f107 000c 	add.w	r0, r7, #12
   200ea:	f7fa fbed 	bl	1a8c8 <d_make_comp>
   200ee:	7823      	ldrb	r3, [r4, #0]
   200f0:	2b2e      	cmp	r3, #46	; 0x2e
   200f2:	4602      	mov	r2, r0
   200f4:	f040 80c1 	bne.w	2027a <d_demangle_callback.constprop.0+0x376>
   200f8:	4626      	mov	r6, r4
   200fa:	7873      	ldrb	r3, [r6, #1]
   200fc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   20100:	2919      	cmp	r1, #25
   20102:	d8b9      	bhi.n	20078 <d_demangle_callback.constprop.0+0x174>
   20104:	1cb3      	adds	r3, r6, #2
   20106:	461c      	mov	r4, r3
   20108:	f813 1b01 	ldrb.w	r1, [r3], #1
   2010c:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
   20110:	2819      	cmp	r0, #25
   20112:	d9f8      	bls.n	20106 <d_demangle_callback.constprop.0+0x202>
   20114:	295f      	cmp	r1, #95	; 0x5f
   20116:	d0f6      	beq.n	20106 <d_demangle_callback.constprop.0+0x202>
   20118:	e7b6      	b.n	20088 <d_demangle_callback.constprop.0+0x184>
   2011a:	2600      	movs	r6, #0
   2011c:	e760      	b.n	1ffe0 <d_demangle_callback.constprop.0+0xdc>
   2011e:	7b6b      	ldrb	r3, [r5, #13]
   20120:	f105 020d 	add.w	r2, r5, #13
   20124:	2b47      	cmp	r3, #71	; 0x47
   20126:	61ba      	str	r2, [r7, #24]
   20128:	f107 000c 	add.w	r0, r7, #12
   2012c:	d001      	beq.n	20132 <d_demangle_callback.constprop.0+0x22e>
   2012e:	2b54      	cmp	r3, #84	; 0x54
   20130:	d11d      	bne.n	2016e <d_demangle_callback.constprop.0+0x26a>
   20132:	f7fc fbef 	bl	1c914 <d_special_name>
   20136:	69bc      	ldr	r4, [r7, #24]
   20138:	4606      	mov	r6, r0
   2013a:	e751      	b.n	1ffe0 <d_demangle_callback.constprop.0+0xdc>
   2013c:	7a2b      	ldrb	r3, [r5, #8]
   2013e:	2b2e      	cmp	r3, #46	; 0x2e
   20140:	d004      	beq.n	2014c <d_demangle_callback.constprop.0+0x248>
   20142:	2b5f      	cmp	r3, #95	; 0x5f
   20144:	d002      	beq.n	2014c <d_demangle_callback.constprop.0+0x248>
   20146:	2b24      	cmp	r3, #36	; 0x24
   20148:	f47f aef1 	bne.w	1ff2e <d_demangle_callback.constprop.0+0x2a>
   2014c:	7a6b      	ldrb	r3, [r5, #9]
   2014e:	2b44      	cmp	r3, #68	; 0x44
   20150:	d002      	beq.n	20158 <d_demangle_callback.constprop.0+0x254>
   20152:	2b49      	cmp	r3, #73	; 0x49
   20154:	f47f aeeb 	bne.w	1ff2e <d_demangle_callback.constprop.0+0x2a>
   20158:	7aaa      	ldrb	r2, [r5, #10]
   2015a:	2a5f      	cmp	r2, #95	; 0x5f
   2015c:	f47f aee7 	bne.w	1ff2e <d_demangle_callback.constprop.0+0x2a>
   20160:	2b49      	cmp	r3, #73	; 0x49
   20162:	bf0c      	ite	eq
   20164:	f04f 0902 	moveq.w	r9, #2
   20168:	f04f 0903 	movne.w	r9, #3
   2016c:	e6e1      	b.n	1ff32 <d_demangle_callback.constprop.0+0x2e>
   2016e:	f7fc ff59 	bl	1d024 <d_encoding.part.0>
   20172:	69bc      	ldr	r4, [r7, #24]
   20174:	4606      	mov	r6, r0
   20176:	e733      	b.n	1ffe0 <d_demangle_callback.constprop.0+0xdc>
   20178:	f107 000c 	add.w	r0, r7, #12
   2017c:	f7fc fbca 	bl	1c914 <d_special_name>
   20180:	697b      	ldr	r3, [r7, #20]
   20182:	07db      	lsls	r3, r3, #31
   20184:	4606      	mov	r6, r0
   20186:	f53f af69 	bmi.w	2005c <d_demangle_callback.constprop.0+0x158>
   2018a:	69bb      	ldr	r3, [r7, #24]
   2018c:	781b      	ldrb	r3, [r3, #0]
   2018e:	e736      	b.n	1fffe <d_demangle_callback.constprop.0+0xfa>
   20190:	2300      	movs	r3, #0
   20192:	e7a7      	b.n	200e4 <d_demangle_callback.constprop.0+0x1e0>
   20194:	2000      	movs	r0, #0
   20196:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   2019a:	46c5      	mov	sp, r8
   2019c:	46bd      	mov	sp, r7
   2019e:	ecbd 8b02 	vpop	{d8}
   201a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201a6:	7843      	ldrb	r3, [r0, #1]
   201a8:	2b5a      	cmp	r3, #90	; 0x5a
   201aa:	f47f aeb8 	bne.w	1ff1e <d_demangle_callback.constprop.0+0x1a>
   201ae:	f04f 0901 	mov.w	r9, #1
   201b2:	e6be      	b.n	1ff32 <d_demangle_callback.constprop.0+0x2e>
   201b4:	4608      	mov	r0, r1
   201b6:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   201ba:	46bd      	mov	sp, r7
   201bc:	ecbd 8b02 	vpop	{d8}
   201c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   201c4:	20003700 	.word	0x20003700
   201c8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
   201cc:	687a      	ldr	r2, [r7, #4]
   201ce:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
   201d2:	4631      	mov	r1, r6
   201d4:	683a      	ldr	r2, [r7, #0]
   201d6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   201da:	4620      	mov	r0, r4
   201dc:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
   201e0:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
   201e4:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
   201e8:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
   201ec:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
   201f0:	607b      	str	r3, [r7, #4]
   201f2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   201f6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   201fa:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   201fe:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   20202:	f7fa fc53 	bl	1aaac <d_count_templates_scopes>
   20206:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   2020a:	687b      	ldr	r3, [r7, #4]
   2020c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   20210:	da01      	bge.n	20216 <d_demangle_callback.constprop.0+0x312>
   20212:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   20216:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   2021a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2021e:	2901      	cmp	r1, #1
   20220:	fb01 f303 	mul.w	r3, r1, r3
   20224:	4632      	mov	r2, r6
   20226:	bfb8      	it	lt
   20228:	2101      	movlt	r1, #1
   2022a:	466e      	mov	r6, sp
   2022c:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
   20230:	2b01      	cmp	r3, #1
   20232:	468d      	mov	sp, r1
   20234:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   20238:	4668      	mov	r0, sp
   2023a:	bfb8      	it	lt
   2023c:	2301      	movlt	r3, #1
   2023e:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   20242:	469d      	mov	sp, r3
   20244:	2500      	movs	r5, #0
   20246:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
   2024a:	4620      	mov	r0, r4
   2024c:	2111      	movs	r1, #17
   2024e:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
   20252:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
   20256:	f7fe ffdb 	bl	1f210 <d_print_comp>
   2025a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2025e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20262:	5465      	strb	r5, [r4, r1]
   20264:	4620      	mov	r0, r4
   20266:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2026a:	46b5      	mov	sp, r6
   2026c:	4798      	blx	r3
   2026e:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   20272:	fab0 f080 	clz	r0, r0
   20276:	0940      	lsrs	r0, r0, #5
   20278:	e78d      	b.n	20196 <d_demangle_callback.constprop.0+0x292>
   2027a:	4606      	mov	r6, r0
   2027c:	e6bf      	b.n	1fffe <d_demangle_callback.constprop.0+0xfa>
   2027e:	4616      	mov	r6, r2
   20280:	e783      	b.n	2018a <d_demangle_callback.constprop.0+0x286>
   20282:	bf00      	nop

00020284 <d_print_subexpr>:
   20284:	b570      	push	{r4, r5, r6, lr}
   20286:	7813      	ldrb	r3, [r2, #0]
   20288:	2b01      	cmp	r3, #1
   2028a:	b082      	sub	sp, #8
   2028c:	4615      	mov	r5, r2
   2028e:	4604      	mov	r4, r0
   20290:	d903      	bls.n	2029a <d_print_subexpr+0x16>
   20292:	2b31      	cmp	r3, #49	; 0x31
   20294:	d001      	beq.n	2029a <d_print_subexpr+0x16>
   20296:	2b06      	cmp	r3, #6
   20298:	d138      	bne.n	2030c <d_print_subexpr+0x88>
   2029a:	2601      	movs	r6, #1
   2029c:	686b      	ldr	r3, [r5, #4]
   2029e:	2b01      	cmp	r3, #1
   202a0:	dc22      	bgt.n	202e8 <d_print_subexpr+0x64>
   202a2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   202a6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   202aa:	dc1d      	bgt.n	202e8 <d_print_subexpr+0x64>
   202ac:	3301      	adds	r3, #1
   202ae:	3201      	adds	r2, #1
   202b0:	606b      	str	r3, [r5, #4]
   202b2:	2111      	movs	r1, #17
   202b4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   202b8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   202bc:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
   202c0:	462a      	mov	r2, r5
   202c2:	4620      	mov	r0, r4
   202c4:	9301      	str	r3, [sp, #4]
   202c6:	9500      	str	r5, [sp, #0]
   202c8:	f7fc ff28 	bl	1d11c <d_print_comp_inner>
   202cc:	686a      	ldr	r2, [r5, #4]
   202ce:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   202d2:	9901      	ldr	r1, [sp, #4]
   202d4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
   202d8:	3a01      	subs	r2, #1
   202da:	3b01      	subs	r3, #1
   202dc:	606a      	str	r2, [r5, #4]
   202de:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   202e2:	b136      	cbz	r6, 202f2 <d_print_subexpr+0x6e>
   202e4:	b002      	add	sp, #8
   202e6:	bd70      	pop	{r4, r5, r6, pc}
   202e8:	2301      	movs	r3, #1
   202ea:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   202ee:	2e00      	cmp	r6, #0
   202f0:	d1f8      	bne.n	202e4 <d_print_subexpr+0x60>
   202f2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   202f6:	29ff      	cmp	r1, #255	; 0xff
   202f8:	d015      	beq.n	20326 <d_print_subexpr+0xa2>
   202fa:	1c4a      	adds	r2, r1, #1
   202fc:	2329      	movs	r3, #41	; 0x29
   202fe:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   20302:	5463      	strb	r3, [r4, r1]
   20304:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20308:	b002      	add	sp, #8
   2030a:	bd70      	pop	{r4, r5, r6, pc}
   2030c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20310:	29ff      	cmp	r1, #255	; 0xff
   20312:	d016      	beq.n	20342 <d_print_subexpr+0xbe>
   20314:	1c4a      	adds	r2, r1, #1
   20316:	2328      	movs	r3, #40	; 0x28
   20318:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   2031c:	2600      	movs	r6, #0
   2031e:	5463      	strb	r3, [r4, r1]
   20320:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20324:	e7ba      	b.n	2029c <d_print_subexpr+0x18>
   20326:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   2032a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   2032e:	4620      	mov	r0, r4
   20330:	4798      	blx	r3
   20332:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20336:	2201      	movs	r2, #1
   20338:	4413      	add	r3, r2
   2033a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2033e:	4631      	mov	r1, r6
   20340:	e7dc      	b.n	202fc <d_print_subexpr+0x78>
   20342:	2600      	movs	r6, #0
   20344:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   20348:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   2034c:	4798      	blx	r3
   2034e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20352:	2201      	movs	r2, #1
   20354:	4413      	add	r3, r2
   20356:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2035a:	4631      	mov	r1, r6
   2035c:	e7db      	b.n	20316 <d_print_subexpr+0x92>
   2035e:	bf00      	nop

00020360 <d_maybe_print_fold_expression>:
   20360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20364:	68d3      	ldr	r3, [r2, #12]
   20366:	68db      	ldr	r3, [r3, #12]
   20368:	681b      	ldr	r3, [r3, #0]
   2036a:	7819      	ldrb	r1, [r3, #0]
   2036c:	2966      	cmp	r1, #102	; 0x66
   2036e:	d178      	bne.n	20462 <d_maybe_print_fold_expression+0x102>
   20370:	6912      	ldr	r2, [r2, #16]
   20372:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
   20376:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
   2037a:	f89a 2000 	ldrb.w	r2, [sl]
   2037e:	2a3c      	cmp	r2, #60	; 0x3c
   20380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20384:	bf08      	it	eq
   20386:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
   2038a:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   2038e:	785b      	ldrb	r3, [r3, #1]
   20390:	bf18      	it	ne
   20392:	f04f 0900 	movne.w	r9, #0
   20396:	2b6c      	cmp	r3, #108	; 0x6c
   20398:	4604      	mov	r4, r0
   2039a:	f000 80a2 	beq.w	204e2 <d_maybe_print_fold_expression+0x182>
   2039e:	d863      	bhi.n	20468 <d_maybe_print_fold_expression+0x108>
   203a0:	2b4c      	cmp	r3, #76	; 0x4c
   203a2:	d001      	beq.n	203a8 <d_maybe_print_fold_expression+0x48>
   203a4:	2b52      	cmp	r3, #82	; 0x52
   203a6:	d157      	bne.n	20458 <d_maybe_print_fold_expression+0xf8>
   203a8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   203ac:	29ff      	cmp	r1, #255	; 0xff
   203ae:	f000 80eb 	beq.w	20588 <d_maybe_print_fold_expression+0x228>
   203b2:	1c4b      	adds	r3, r1, #1
   203b4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   203b8:	2328      	movs	r3, #40	; 0x28
   203ba:	5463      	strb	r3, [r4, r1]
   203bc:	4652      	mov	r2, sl
   203be:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   203c2:	2111      	movs	r1, #17
   203c4:	4620      	mov	r0, r4
   203c6:	4e78      	ldr	r6, [pc, #480]	; (205a8 <d_maybe_print_fold_expression+0x248>)
   203c8:	f7ff ff5c 	bl	20284 <d_print_subexpr>
   203cc:	2111      	movs	r1, #17
   203ce:	4642      	mov	r2, r8
   203d0:	4620      	mov	r0, r4
   203d2:	f7ff fd5b 	bl	1fe8c <d_print_expr_op>
   203d6:	f106 0b02 	add.w	fp, r6, #2
   203da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   203de:	252e      	movs	r5, #46	; 0x2e
   203e0:	f04f 0a00 	mov.w	sl, #0
   203e4:	e00b      	b.n	203fe <d_maybe_print_fold_expression+0x9e>
   203e6:	460b      	mov	r3, r1
   203e8:	455e      	cmp	r6, fp
   203ea:	f101 0101 	add.w	r1, r1, #1
   203ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   203f2:	54e5      	strb	r5, [r4, r3]
   203f4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   203f8:	d019      	beq.n	2042e <d_maybe_print_fold_expression+0xce>
   203fa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   203fe:	29ff      	cmp	r1, #255	; 0xff
   20400:	d1f1      	bne.n	203e6 <d_maybe_print_fold_expression+0x86>
   20402:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20406:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2040a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   2040e:	4620      	mov	r0, r4
   20410:	4798      	blx	r3
   20412:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20416:	3301      	adds	r3, #1
   20418:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2041c:	2300      	movs	r3, #0
   2041e:	2101      	movs	r1, #1
   20420:	455e      	cmp	r6, fp
   20422:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20426:	54e5      	strb	r5, [r4, r3]
   20428:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   2042c:	d1e5      	bne.n	203fa <d_maybe_print_fold_expression+0x9a>
   2042e:	4642      	mov	r2, r8
   20430:	2111      	movs	r1, #17
   20432:	4620      	mov	r0, r4
   20434:	f7ff fd2a 	bl	1fe8c <d_print_expr_op>
   20438:	464a      	mov	r2, r9
   2043a:	2111      	movs	r1, #17
   2043c:	4620      	mov	r0, r4
   2043e:	f7ff ff21 	bl	20284 <d_print_subexpr>
   20442:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   20446:	29ff      	cmp	r1, #255	; 0xff
   20448:	d07f      	beq.n	2054a <d_maybe_print_fold_expression+0x1ea>
   2044a:	1c4a      	adds	r2, r1, #1
   2044c:	2329      	movs	r3, #41	; 0x29
   2044e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   20452:	5463      	strb	r3, [r4, r1]
   20454:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20458:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   2045c:	2001      	movs	r0, #1
   2045e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20462:	2000      	movs	r0, #0
   20464:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20468:	2b72      	cmp	r3, #114	; 0x72
   2046a:	d1f5      	bne.n	20458 <d_maybe_print_fold_expression+0xf8>
   2046c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20470:	29ff      	cmp	r1, #255	; 0xff
   20472:	d07b      	beq.n	2056c <d_maybe_print_fold_expression+0x20c>
   20474:	1c4b      	adds	r3, r1, #1
   20476:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   2047a:	2328      	movs	r3, #40	; 0x28
   2047c:	5463      	strb	r3, [r4, r1]
   2047e:	4652      	mov	r2, sl
   20480:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20484:	2111      	movs	r1, #17
   20486:	4620      	mov	r0, r4
   20488:	4e48      	ldr	r6, [pc, #288]	; (205ac <d_maybe_print_fold_expression+0x24c>)
   2048a:	f7ff fefb 	bl	20284 <d_print_subexpr>
   2048e:	4642      	mov	r2, r8
   20490:	2111      	movs	r1, #17
   20492:	4620      	mov	r0, r4
   20494:	f7ff fcfa 	bl	1fe8c <d_print_expr_op>
   20498:	f106 0903 	add.w	r9, r6, #3
   2049c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   204a0:	252e      	movs	r5, #46	; 0x2e
   204a2:	f04f 0800 	mov.w	r8, #0
   204a6:	e00a      	b.n	204be <d_maybe_print_fold_expression+0x15e>
   204a8:	460b      	mov	r3, r1
   204aa:	3101      	adds	r1, #1
   204ac:	454e      	cmp	r6, r9
   204ae:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   204b2:	54e5      	strb	r5, [r4, r3]
   204b4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   204b8:	d0ce      	beq.n	20458 <d_maybe_print_fold_expression+0xf8>
   204ba:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   204be:	29ff      	cmp	r1, #255	; 0xff
   204c0:	d1f2      	bne.n	204a8 <d_maybe_print_fold_expression+0x148>
   204c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   204c6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   204ca:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   204ce:	4620      	mov	r0, r4
   204d0:	4798      	blx	r3
   204d2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   204d6:	3301      	adds	r3, #1
   204d8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   204dc:	2101      	movs	r1, #1
   204de:	2300      	movs	r3, #0
   204e0:	e7e4      	b.n	204ac <d_maybe_print_fold_expression+0x14c>
   204e2:	4d33      	ldr	r5, [pc, #204]	; (205b0 <d_maybe_print_fold_expression+0x250>)
   204e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   204e8:	2628      	movs	r6, #40	; 0x28
   204ea:	f105 0b03 	add.w	fp, r5, #3
   204ee:	f04f 0900 	mov.w	r9, #0
   204f2:	e00b      	b.n	2050c <d_maybe_print_fold_expression+0x1ac>
   204f4:	460b      	mov	r3, r1
   204f6:	45ab      	cmp	fp, r5
   204f8:	f101 0101 	add.w	r1, r1, #1
   204fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20500:	54e6      	strb	r6, [r4, r3]
   20502:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   20506:	d019      	beq.n	2053c <d_maybe_print_fold_expression+0x1dc>
   20508:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   2050c:	29ff      	cmp	r1, #255	; 0xff
   2050e:	d1f1      	bne.n	204f4 <d_maybe_print_fold_expression+0x194>
   20510:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20514:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20518:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   2051c:	4620      	mov	r0, r4
   2051e:	4798      	blx	r3
   20520:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20524:	3301      	adds	r3, #1
   20526:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2052a:	2300      	movs	r3, #0
   2052c:	2101      	movs	r1, #1
   2052e:	45ab      	cmp	fp, r5
   20530:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   20534:	54e6      	strb	r6, [r4, r3]
   20536:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   2053a:	d1e5      	bne.n	20508 <d_maybe_print_fold_expression+0x1a8>
   2053c:	4642      	mov	r2, r8
   2053e:	2111      	movs	r1, #17
   20540:	4620      	mov	r0, r4
   20542:	f7ff fca3 	bl	1fe8c <d_print_expr_op>
   20546:	4652      	mov	r2, sl
   20548:	e777      	b.n	2043a <d_maybe_print_fold_expression+0xda>
   2054a:	2500      	movs	r5, #0
   2054c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20550:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   20554:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   20558:	4620      	mov	r0, r4
   2055a:	4798      	blx	r3
   2055c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20560:	2201      	movs	r2, #1
   20562:	4413      	add	r3, r2
   20564:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20568:	4629      	mov	r1, r5
   2056a:	e76f      	b.n	2044c <d_maybe_print_fold_expression+0xec>
   2056c:	2500      	movs	r5, #0
   2056e:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   20572:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   20576:	4798      	blx	r3
   20578:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2057c:	3301      	adds	r3, #1
   2057e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20582:	4629      	mov	r1, r5
   20584:	2301      	movs	r3, #1
   20586:	e776      	b.n	20476 <d_maybe_print_fold_expression+0x116>
   20588:	2500      	movs	r5, #0
   2058a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   2058e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   20592:	4620      	mov	r0, r4
   20594:	4798      	blx	r3
   20596:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2059a:	3301      	adds	r3, #1
   2059c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   205a0:	4629      	mov	r1, r5
   205a2:	2301      	movs	r3, #1
   205a4:	e706      	b.n	203b4 <d_maybe_print_fold_expression+0x54>
   205a6:	bf00      	nop
   205a8:	2000360c 	.word	0x2000360c
   205ac:	200033e8 	.word	0x200033e8
   205b0:	200033e0 	.word	0x200033e0

000205b4 <d_maybe_print_designated_init>:
   205b4:	7813      	ldrb	r3, [r2, #0]
   205b6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   205ba:	2b38      	cmp	r3, #56	; 0x38
   205bc:	d001      	beq.n	205c2 <d_maybe_print_designated_init+0xe>
   205be:	2000      	movs	r0, #0
   205c0:	4770      	bx	lr
   205c2:	68d3      	ldr	r3, [r2, #12]
   205c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   205c8:	68db      	ldr	r3, [r3, #12]
   205ca:	681f      	ldr	r7, [r3, #0]
   205cc:	783b      	ldrb	r3, [r7, #0]
   205ce:	2b64      	cmp	r3, #100	; 0x64
   205d0:	d002      	beq.n	205d8 <d_maybe_print_designated_init+0x24>
   205d2:	2000      	movs	r0, #0
   205d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   205d8:	787b      	ldrb	r3, [r7, #1]
   205da:	2b69      	cmp	r3, #105	; 0x69
   205dc:	4604      	mov	r4, r0
   205de:	d011      	beq.n	20604 <d_maybe_print_designated_init+0x50>
   205e0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   205e4:	2b58      	cmp	r3, #88	; 0x58
   205e6:	d1f4      	bne.n	205d2 <d_maybe_print_designated_init+0x1e>
   205e8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   205ec:	6913      	ldr	r3, [r2, #16]
   205ee:	29ff      	cmp	r1, #255	; 0xff
   205f0:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
   205f4:	f000 808e 	beq.w	20714 <d_maybe_print_designated_init+0x160>
   205f8:	1c4b      	adds	r3, r1, #1
   205fa:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   205fe:	235b      	movs	r3, #91	; 0x5b
   20600:	5463      	strb	r3, [r4, r1]
   20602:	e00c      	b.n	2061e <d_maybe_print_designated_init+0x6a>
   20604:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   20608:	6913      	ldr	r3, [r2, #16]
   2060a:	29ff      	cmp	r1, #255	; 0xff
   2060c:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
   20610:	f000 80b1 	beq.w	20776 <d_maybe_print_designated_init+0x1c2>
   20614:	1c4b      	adds	r3, r1, #1
   20616:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   2061a:	232e      	movs	r3, #46	; 0x2e
   2061c:	5463      	strb	r3, [r4, r1]
   2061e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20622:	462a      	mov	r2, r5
   20624:	2111      	movs	r1, #17
   20626:	4620      	mov	r0, r4
   20628:	f7fe fdf2 	bl	1f210 <d_print_comp>
   2062c:	787b      	ldrb	r3, [r7, #1]
   2062e:	2b58      	cmp	r3, #88	; 0x58
   20630:	d03a      	beq.n	206a8 <d_maybe_print_designated_init+0xf4>
   20632:	2b69      	cmp	r3, #105	; 0x69
   20634:	d00b      	beq.n	2064e <d_maybe_print_designated_init+0x9a>
   20636:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2063a:	29ff      	cmp	r1, #255	; 0xff
   2063c:	f000 808a 	beq.w	20754 <d_maybe_print_designated_init+0x1a0>
   20640:	1c4a      	adds	r2, r1, #1
   20642:	235d      	movs	r3, #93	; 0x5d
   20644:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   20648:	5463      	strb	r3, [r4, r1]
   2064a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   2064e:	7833      	ldrb	r3, [r6, #0]
   20650:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   20654:	2b38      	cmp	r3, #56	; 0x38
   20656:	d012      	beq.n	2067e <d_maybe_print_designated_init+0xca>
   20658:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   2065c:	29ff      	cmp	r1, #255	; 0xff
   2065e:	d068      	beq.n	20732 <d_maybe_print_designated_init+0x17e>
   20660:	1c4a      	adds	r2, r1, #1
   20662:	233d      	movs	r3, #61	; 0x3d
   20664:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   20668:	4620      	mov	r0, r4
   2066a:	5463      	strb	r3, [r4, r1]
   2066c:	4632      	mov	r2, r6
   2066e:	2111      	movs	r1, #17
   20670:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   20674:	f7ff fe06 	bl	20284 <d_print_subexpr>
   20678:	2001      	movs	r0, #1
   2067a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2067e:	68f3      	ldr	r3, [r6, #12]
   20680:	68db      	ldr	r3, [r3, #12]
   20682:	681b      	ldr	r3, [r3, #0]
   20684:	781a      	ldrb	r2, [r3, #0]
   20686:	2a64      	cmp	r2, #100	; 0x64
   20688:	d1e6      	bne.n	20658 <d_maybe_print_designated_init+0xa4>
   2068a:	785b      	ldrb	r3, [r3, #1]
   2068c:	2b69      	cmp	r3, #105	; 0x69
   2068e:	d003      	beq.n	20698 <d_maybe_print_designated_init+0xe4>
   20690:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   20694:	2b58      	cmp	r3, #88	; 0x58
   20696:	d1df      	bne.n	20658 <d_maybe_print_designated_init+0xa4>
   20698:	4620      	mov	r0, r4
   2069a:	4632      	mov	r2, r6
   2069c:	2111      	movs	r1, #17
   2069e:	f7fe fdb7 	bl	1f210 <d_print_comp>
   206a2:	2001      	movs	r0, #1
   206a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   206a8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 20794 <d_maybe_print_designated_init+0x1e0>
   206ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   206b0:	f108 0a04 	add.w	sl, r8, #4
   206b4:	2520      	movs	r5, #32
   206b6:	f04f 0900 	mov.w	r9, #0
   206ba:	e00b      	b.n	206d4 <d_maybe_print_designated_init+0x120>
   206bc:	460b      	mov	r3, r1
   206be:	45c2      	cmp	sl, r8
   206c0:	f101 0101 	add.w	r1, r1, #1
   206c4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   206c8:	54e5      	strb	r5, [r4, r3]
   206ca:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   206ce:	d019      	beq.n	20704 <d_maybe_print_designated_init+0x150>
   206d0:	f818 5f01 	ldrb.w	r5, [r8, #1]!
   206d4:	29ff      	cmp	r1, #255	; 0xff
   206d6:	d1f1      	bne.n	206bc <d_maybe_print_designated_init+0x108>
   206d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   206dc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   206e0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   206e4:	4620      	mov	r0, r4
   206e6:	4798      	blx	r3
   206e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   206ec:	3301      	adds	r3, #1
   206ee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   206f2:	2300      	movs	r3, #0
   206f4:	2101      	movs	r1, #1
   206f6:	45c2      	cmp	sl, r8
   206f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   206fc:	54e5      	strb	r5, [r4, r3]
   206fe:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   20702:	d1e5      	bne.n	206d0 <d_maybe_print_designated_init+0x11c>
   20704:	68f2      	ldr	r2, [r6, #12]
   20706:	2111      	movs	r1, #17
   20708:	4620      	mov	r0, r4
   2070a:	f7fe fd81 	bl	1f210 <d_print_comp>
   2070e:	6936      	ldr	r6, [r6, #16]
   20710:	787b      	ldrb	r3, [r7, #1]
   20712:	e78e      	b.n	20632 <d_maybe_print_designated_init+0x7e>
   20714:	f04f 0800 	mov.w	r8, #0
   20718:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   2071c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   20720:	4798      	blx	r3
   20722:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20726:	3301      	adds	r3, #1
   20728:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2072c:	4641      	mov	r1, r8
   2072e:	2301      	movs	r3, #1
   20730:	e763      	b.n	205fa <d_maybe_print_designated_init+0x46>
   20732:	2500      	movs	r5, #0
   20734:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   20738:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2073c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   20740:	4620      	mov	r0, r4
   20742:	4798      	blx	r3
   20744:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20748:	2201      	movs	r2, #1
   2074a:	4413      	add	r3, r2
   2074c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20750:	4629      	mov	r1, r5
   20752:	e786      	b.n	20662 <d_maybe_print_designated_init+0xae>
   20754:	2500      	movs	r5, #0
   20756:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   2075a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   2075e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   20762:	4620      	mov	r0, r4
   20764:	4798      	blx	r3
   20766:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   2076a:	2201      	movs	r2, #1
   2076c:	4413      	add	r3, r2
   2076e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   20772:	4629      	mov	r1, r5
   20774:	e765      	b.n	20642 <d_maybe_print_designated_init+0x8e>
   20776:	f04f 0800 	mov.w	r8, #0
   2077a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   2077e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   20782:	4798      	blx	r3
   20784:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   20788:	3301      	adds	r3, #1
   2078a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   2078e:	4641      	mov	r1, r8
   20790:	2301      	movs	r3, #1
   20792:	e740      	b.n	20616 <d_maybe_print_designated_init+0x62>
   20794:	200033d8 	.word	0x200033d8

00020798 <__cxa_demangle>:
   20798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2079c:	461e      	mov	r6, r3
   2079e:	b084      	sub	sp, #16
   207a0:	2800      	cmp	r0, #0
   207a2:	d040      	beq.n	20826 <__cxa_demangle+0x8e>
   207a4:	460c      	mov	r4, r1
   207a6:	4615      	mov	r5, r2
   207a8:	b109      	cbz	r1, 207ae <__cxa_demangle+0x16>
   207aa:	2a00      	cmp	r2, #0
   207ac:	d03b      	beq.n	20826 <__cxa_demangle+0x8e>
   207ae:	2300      	movs	r3, #0
   207b0:	4929      	ldr	r1, [pc, #164]	; (20858 <__cxa_demangle+0xc0>)
   207b2:	466a      	mov	r2, sp
   207b4:	e9cd 3300 	strd	r3, r3, [sp]
   207b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   207bc:	f7ff fba2 	bl	1ff04 <d_demangle_callback.constprop.0>
   207c0:	2800      	cmp	r0, #0
   207c2:	d039      	beq.n	20838 <__cxa_demangle+0xa0>
   207c4:	9b03      	ldr	r3, [sp, #12]
   207c6:	9f00      	ldr	r7, [sp, #0]
   207c8:	b9d3      	cbnz	r3, 20800 <__cxa_demangle+0x68>
   207ca:	f8dd 8008 	ldr.w	r8, [sp, #8]
   207ce:	2f00      	cmp	r7, #0
   207d0:	d03c      	beq.n	2084c <__cxa_demangle+0xb4>
   207d2:	b32c      	cbz	r4, 20820 <__cxa_demangle+0x88>
   207d4:	4638      	mov	r0, r7
   207d6:	f002 ffd3 	bl	23780 <strlen>
   207da:	682b      	ldr	r3, [r5, #0]
   207dc:	4298      	cmp	r0, r3
   207de:	d219      	bcs.n	20814 <__cxa_demangle+0x7c>
   207e0:	4639      	mov	r1, r7
   207e2:	1c42      	adds	r2, r0, #1
   207e4:	4620      	mov	r0, r4
   207e6:	f7f6 fd83 	bl	172f0 <memcpy>
   207ea:	4638      	mov	r0, r7
   207ec:	f001 fa7c 	bl	21ce8 <free>
   207f0:	4627      	mov	r7, r4
   207f2:	b10e      	cbz	r6, 207f8 <__cxa_demangle+0x60>
   207f4:	2300      	movs	r3, #0
   207f6:	6033      	str	r3, [r6, #0]
   207f8:	4638      	mov	r0, r7
   207fa:	b004      	add	sp, #16
   207fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20800:	f04f 0801 	mov.w	r8, #1
   20804:	2f00      	cmp	r7, #0
   20806:	d1e4      	bne.n	207d2 <__cxa_demangle+0x3a>
   20808:	b18e      	cbz	r6, 2082e <__cxa_demangle+0x96>
   2080a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2080e:	6033      	str	r3, [r6, #0]
   20810:	2700      	movs	r7, #0
   20812:	e7f1      	b.n	207f8 <__cxa_demangle+0x60>
   20814:	4620      	mov	r0, r4
   20816:	f001 fa67 	bl	21ce8 <free>
   2081a:	f8c5 8000 	str.w	r8, [r5]
   2081e:	e7e8      	b.n	207f2 <__cxa_demangle+0x5a>
   20820:	2d00      	cmp	r5, #0
   20822:	d1fa      	bne.n	2081a <__cxa_demangle+0x82>
   20824:	e7e5      	b.n	207f2 <__cxa_demangle+0x5a>
   20826:	b116      	cbz	r6, 2082e <__cxa_demangle+0x96>
   20828:	f06f 0302 	mvn.w	r3, #2
   2082c:	6033      	str	r3, [r6, #0]
   2082e:	2700      	movs	r7, #0
   20830:	4638      	mov	r0, r7
   20832:	b004      	add	sp, #16
   20834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20838:	9800      	ldr	r0, [sp, #0]
   2083a:	f001 fa55 	bl	21ce8 <free>
   2083e:	2e00      	cmp	r6, #0
   20840:	d0f5      	beq.n	2082e <__cxa_demangle+0x96>
   20842:	f06f 0301 	mvn.w	r3, #1
   20846:	6033      	str	r3, [r6, #0]
   20848:	2700      	movs	r7, #0
   2084a:	e7d5      	b.n	207f8 <__cxa_demangle+0x60>
   2084c:	2e00      	cmp	r6, #0
   2084e:	d0ee      	beq.n	2082e <__cxa_demangle+0x96>
   20850:	f1b8 0f01 	cmp.w	r8, #1
   20854:	d0d9      	beq.n	2080a <__cxa_demangle+0x72>
   20856:	e7f4      	b.n	20842 <__cxa_demangle+0xaa>
   20858:	0001ac01 	.word	0x0001ac01

0002085c <__cxxabiv1::__is_gxx_exception_class(char*)>:
   2085c:	7803      	ldrb	r3, [r0, #0]
   2085e:	2b47      	cmp	r3, #71	; 0x47
   20860:	d001      	beq.n	20866 <__cxxabiv1::__is_gxx_exception_class(char*)+0xa>
   20862:	2000      	movs	r0, #0
   20864:	4770      	bx	lr
   20866:	7843      	ldrb	r3, [r0, #1]
   20868:	2b4e      	cmp	r3, #78	; 0x4e
   2086a:	d1fa      	bne.n	20862 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   2086c:	7883      	ldrb	r3, [r0, #2]
   2086e:	2b55      	cmp	r3, #85	; 0x55
   20870:	d1f7      	bne.n	20862 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   20872:	78c3      	ldrb	r3, [r0, #3]
   20874:	2b43      	cmp	r3, #67	; 0x43
   20876:	d1f4      	bne.n	20862 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   20878:	7903      	ldrb	r3, [r0, #4]
   2087a:	2b43      	cmp	r3, #67	; 0x43
   2087c:	d1f1      	bne.n	20862 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   2087e:	7943      	ldrb	r3, [r0, #5]
   20880:	2b2b      	cmp	r3, #43	; 0x2b
   20882:	d1ee      	bne.n	20862 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   20884:	7983      	ldrb	r3, [r0, #6]
   20886:	2b2b      	cmp	r3, #43	; 0x2b
   20888:	d1eb      	bne.n	20862 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   2088a:	79c0      	ldrb	r0, [r0, #7]
   2088c:	2801      	cmp	r0, #1
   2088e:	bf8c      	ite	hi
   20890:	2000      	movhi	r0, #0
   20892:	2001      	movls	r0, #1
   20894:	4770      	bx	lr
   20896:	bf00      	nop

00020898 <__cxa_call_terminate>:
   20898:	b510      	push	{r4, lr}
   2089a:	b130      	cbz	r0, 208aa <__cxa_call_terminate+0x12>
   2089c:	4604      	mov	r4, r0
   2089e:	f000 f87d 	bl	2099c <__cxa_begin_catch>
   208a2:	4620      	mov	r0, r4
   208a4:	f7ff ffda 	bl	2085c <__cxxabiv1::__is_gxx_exception_class(char*)>
   208a8:	b908      	cbnz	r0, 208ae <__cxa_call_terminate+0x16>
   208aa:	f7f9 fc85 	bl	1a1b8 <std::terminate()>
   208ae:	f854 0c14 	ldr.w	r0, [r4, #-20]
   208b2:	f7f9 fc79 	bl	1a1a8 <__cxxabiv1::__terminate(void (*)())>
   208b6:	bf00      	nop

000208b8 <__cxa_call_unexpected>:
   208b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208bc:	b085      	sub	sp, #20
   208be:	4602      	mov	r2, r0
   208c0:	f7ff ffcc 	bl	2085c <__cxxabiv1::__is_gxx_exception_class(char*)>
   208c4:	b138      	cbz	r0, 208d6 <__cxa_call_unexpected+0x1e>
   208c6:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   208ca:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   208ce:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   208d2:	2600      	movs	r6, #0
   208d4:	e005      	b.n	208e2 <__cxa_call_unexpected+0x2a>
   208d6:	4604      	mov	r4, r0
   208d8:	4607      	mov	r7, r0
   208da:	2601      	movs	r6, #1
   208dc:	4605      	mov	r5, r0
   208de:	4680      	mov	r8, r0
   208e0:	4682      	mov	sl, r0
   208e2:	4610      	mov	r0, r2
   208e4:	f000 f85a 	bl	2099c <__cxa_begin_catch>
   208e8:	b10e      	cbz	r6, 208ee <__cxa_call_unexpected+0x36>
   208ea:	f7f9 fc73 	bl	1a1d4 <std::unexpected()>
   208ee:	4638      	mov	r0, r7
   208f0:	f7f9 fc6c 	bl	1a1cc <__cxxabiv1::__unexpected(void (*)())>
   208f4:	f000 f852 	bl	2099c <__cxa_begin_catch>
   208f8:	b10e      	cbz	r6, 208fe <__cxa_call_unexpected+0x46>
   208fa:	f7f9 fc5d 	bl	1a1b8 <std::terminate()>
   208fe:	f7f9 f935 	bl	19b6c <__cxa_get_globals_fast>
   20902:	6807      	ldr	r7, [r0, #0]
   20904:	f8df b090 	ldr.w	fp, [pc, #144]	; 20998 <__cxa_call_unexpected+0xe0>
   20908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   2090c:	2b01      	cmp	r3, #1
   2090e:	bf0c      	ite	eq
   20910:	683b      	ldreq	r3, [r7, #0]
   20912:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   20916:	9302      	str	r3, [sp, #8]
   20918:	f028 0303 	bic.w	r3, r8, #3
   2091c:	9301      	str	r3, [sp, #4]
   2091e:	3720      	adds	r7, #32
   20920:	f04f 0900 	mov.w	r9, #0
   20924:	45ca      	cmp	sl, r9
   20926:	dd20      	ble.n	2096a <__cxa_call_unexpected+0xb2>
   20928:	f8d5 8000 	ldr.w	r8, [r5]
   2092c:	f1b8 0f00 	cmp.w	r8, #0
   20930:	d000      	beq.n	20934 <__cxa_call_unexpected+0x7c>
   20932:	44a8      	add	r8, r5
   20934:	ab02      	add	r3, sp, #8
   20936:	2200      	movs	r2, #0
   20938:	4641      	mov	r1, r8
   2093a:	4638      	mov	r0, r7
   2093c:	f7f9 f844 	bl	199c8 <__cxa_type_match>
   20940:	b108      	cbz	r0, 20946 <__cxa_call_unexpected+0x8e>
   20942:	f7f9 fccf 	bl	1a2e4 <__cxa_rethrow>
   20946:	f8d8 3000 	ldr.w	r3, [r8]
   2094a:	9003      	str	r0, [sp, #12]
   2094c:	aa03      	add	r2, sp, #12
   2094e:	4640      	mov	r0, r8
   20950:	4659      	mov	r1, fp
   20952:	f8d3 8010 	ldr.w	r8, [r3, #16]
   20956:	2301      	movs	r3, #1
   20958:	47c0      	blx	r8
   2095a:	9b01      	ldr	r3, [sp, #4]
   2095c:	2800      	cmp	r0, #0
   2095e:	bf18      	it	ne
   20960:	4606      	movne	r6, r0
   20962:	f109 0901 	add.w	r9, r9, #1
   20966:	441d      	add	r5, r3
   20968:	e7dc      	b.n	20924 <__cxa_call_unexpected+0x6c>
   2096a:	b146      	cbz	r6, 2097e <__cxa_call_unexpected+0xc6>
   2096c:	2004      	movs	r0, #4
   2096e:	f7f8 ffe9 	bl	19944 <__cxa_allocate_exception>
   20972:	4b07      	ldr	r3, [pc, #28]	; (20990 <__cxa_call_unexpected+0xd8>)
   20974:	4a07      	ldr	r2, [pc, #28]	; (20994 <__cxa_call_unexpected+0xdc>)
   20976:	4908      	ldr	r1, [pc, #32]	; (20998 <__cxa_call_unexpected+0xe0>)
   20978:	6003      	str	r3, [r0, #0]
   2097a:	f7f9 fc97 	bl	1a2ac <__cxa_throw>
   2097e:	4620      	mov	r0, r4
   20980:	f7f9 fc12 	bl	1a1a8 <__cxxabiv1::__terminate(void (*)())>
   20984:	f000 f848 	bl	20a18 <__cxa_end_catch>
   20988:	f000 f846 	bl	20a18 <__cxa_end_catch>
   2098c:	f7f9 f816 	bl	199bc <__cxa_end_cleanup>
   20990:	20002984 	.word	0x20002984
   20994:	00019b51 	.word	0x00019b51
   20998:	20002414 	.word	0x20002414

0002099c <__cxa_begin_catch>:
   2099c:	b538      	push	{r3, r4, r5, lr}
   2099e:	4604      	mov	r4, r0
   209a0:	f7f9 f8e8 	bl	19b74 <__cxa_get_globals>
   209a4:	4622      	mov	r2, r4
   209a6:	6805      	ldr	r5, [r0, #0]
   209a8:	f812 3920 	ldrb.w	r3, [r2], #-32
   209ac:	2b47      	cmp	r3, #71	; 0x47
   209ae:	d003      	beq.n	209b8 <__cxa_begin_catch+0x1c>
   209b0:	bb85      	cbnz	r5, 20a14 <__cxa_begin_catch+0x78>
   209b2:	6002      	str	r2, [r0, #0]
   209b4:	4628      	mov	r0, r5
   209b6:	bd38      	pop	{r3, r4, r5, pc}
   209b8:	7863      	ldrb	r3, [r4, #1]
   209ba:	2b4e      	cmp	r3, #78	; 0x4e
   209bc:	d1f8      	bne.n	209b0 <__cxa_begin_catch+0x14>
   209be:	78a3      	ldrb	r3, [r4, #2]
   209c0:	2b55      	cmp	r3, #85	; 0x55
   209c2:	d1f5      	bne.n	209b0 <__cxa_begin_catch+0x14>
   209c4:	78e3      	ldrb	r3, [r4, #3]
   209c6:	2b43      	cmp	r3, #67	; 0x43
   209c8:	d1f2      	bne.n	209b0 <__cxa_begin_catch+0x14>
   209ca:	7923      	ldrb	r3, [r4, #4]
   209cc:	2b43      	cmp	r3, #67	; 0x43
   209ce:	d1ef      	bne.n	209b0 <__cxa_begin_catch+0x14>
   209d0:	7963      	ldrb	r3, [r4, #5]
   209d2:	2b2b      	cmp	r3, #43	; 0x2b
   209d4:	d1ec      	bne.n	209b0 <__cxa_begin_catch+0x14>
   209d6:	79a3      	ldrb	r3, [r4, #6]
   209d8:	2b2b      	cmp	r3, #43	; 0x2b
   209da:	d1e9      	bne.n	209b0 <__cxa_begin_catch+0x14>
   209dc:	79e3      	ldrb	r3, [r4, #7]
   209de:	2b01      	cmp	r3, #1
   209e0:	d8e6      	bhi.n	209b0 <__cxa_begin_catch+0x14>
   209e2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   209e6:	2b00      	cmp	r3, #0
   209e8:	db11      	blt.n	20a0e <__cxa_begin_catch+0x72>
   209ea:	3301      	adds	r3, #1
   209ec:	f844 3c0c 	str.w	r3, [r4, #-12]
   209f0:	6843      	ldr	r3, [r0, #4]
   209f2:	3b01      	subs	r3, #1
   209f4:	6043      	str	r3, [r0, #4]
   209f6:	4295      	cmp	r5, r2
   209f8:	bf18      	it	ne
   209fa:	f844 5c10 	strne.w	r5, [r4, #-16]
   209fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
   20a00:	bf18      	it	ne
   20a02:	6002      	strne	r2, [r0, #0]
   20a04:	4620      	mov	r0, r4
   20a06:	f000 fb8f 	bl	21128 <_Unwind_Complete>
   20a0a:	4628      	mov	r0, r5
   20a0c:	bd38      	pop	{r3, r4, r5, pc}
   20a0e:	f1c3 0301 	rsb	r3, r3, #1
   20a12:	e7eb      	b.n	209ec <__cxa_begin_catch+0x50>
   20a14:	f7f9 fbd0 	bl	1a1b8 <std::terminate()>

00020a18 <__cxa_end_catch>:
   20a18:	b508      	push	{r3, lr}
   20a1a:	f7f9 f8a7 	bl	19b6c <__cxa_get_globals_fast>
   20a1e:	6803      	ldr	r3, [r0, #0]
   20a20:	b37b      	cbz	r3, 20a82 <__cxa_end_catch+0x6a>
   20a22:	f893 2020 	ldrb.w	r2, [r3, #32]
   20a26:	2a47      	cmp	r2, #71	; 0x47
   20a28:	d007      	beq.n	20a3a <__cxa_end_catch+0x22>
   20a2a:	2200      	movs	r2, #0
   20a2c:	6002      	str	r2, [r0, #0]
   20a2e:	f103 0020 	add.w	r0, r3, #32
   20a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20a36:	f000 bb79 	b.w	2112c <_Unwind_DeleteException>
   20a3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   20a3e:	2a4e      	cmp	r2, #78	; 0x4e
   20a40:	d1f3      	bne.n	20a2a <__cxa_end_catch+0x12>
   20a42:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   20a46:	2a55      	cmp	r2, #85	; 0x55
   20a48:	d1ef      	bne.n	20a2a <__cxa_end_catch+0x12>
   20a4a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   20a4e:	2a43      	cmp	r2, #67	; 0x43
   20a50:	d1eb      	bne.n	20a2a <__cxa_end_catch+0x12>
   20a52:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   20a56:	2a43      	cmp	r2, #67	; 0x43
   20a58:	d1e7      	bne.n	20a2a <__cxa_end_catch+0x12>
   20a5a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   20a5e:	2a2b      	cmp	r2, #43	; 0x2b
   20a60:	d1e3      	bne.n	20a2a <__cxa_end_catch+0x12>
   20a62:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   20a66:	2a2b      	cmp	r2, #43	; 0x2b
   20a68:	d1df      	bne.n	20a2a <__cxa_end_catch+0x12>
   20a6a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   20a6e:	2a01      	cmp	r2, #1
   20a70:	d8db      	bhi.n	20a2a <__cxa_end_catch+0x12>
   20a72:	695a      	ldr	r2, [r3, #20]
   20a74:	2a00      	cmp	r2, #0
   20a76:	db05      	blt.n	20a84 <__cxa_end_catch+0x6c>
   20a78:	3a01      	subs	r2, #1
   20a7a:	d008      	beq.n	20a8e <__cxa_end_catch+0x76>
   20a7c:	1c51      	adds	r1, r2, #1
   20a7e:	d00e      	beq.n	20a9e <__cxa_end_catch+0x86>
   20a80:	615a      	str	r2, [r3, #20]
   20a82:	bd08      	pop	{r3, pc}
   20a84:	3201      	adds	r2, #1
   20a86:	d1fb      	bne.n	20a80 <__cxa_end_catch+0x68>
   20a88:	6919      	ldr	r1, [r3, #16]
   20a8a:	6001      	str	r1, [r0, #0]
   20a8c:	e7f8      	b.n	20a80 <__cxa_end_catch+0x68>
   20a8e:	691a      	ldr	r2, [r3, #16]
   20a90:	6002      	str	r2, [r0, #0]
   20a92:	f103 0020 	add.w	r0, r3, #32
   20a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   20a9a:	f000 bb47 	b.w	2112c <_Unwind_DeleteException>
   20a9e:	f7f9 fb8b 	bl	1a1b8 <std::terminate()>
   20aa2:	bf00      	nop

00020aa4 <__cxa_current_exception_type>:
   20aa4:	b508      	push	{r3, lr}
   20aa6:	f7f9 f865 	bl	19b74 <__cxa_get_globals>
   20aaa:	6800      	ldr	r0, [r0, #0]
   20aac:	b130      	cbz	r0, 20abc <__cxa_current_exception_type+0x18>
   20aae:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   20ab2:	2b01      	cmp	r3, #1
   20ab4:	bf04      	itt	eq
   20ab6:	6800      	ldreq	r0, [r0, #0]
   20ab8:	3878      	subeq	r0, #120	; 0x78
   20aba:	6800      	ldr	r0, [r0, #0]
   20abc:	bd08      	pop	{r3, pc}
   20abe:	bf00      	nop

00020ac0 <__aeabi_uldivmod>:
   20ac0:	b953      	cbnz	r3, 20ad8 <__aeabi_uldivmod+0x18>
   20ac2:	b94a      	cbnz	r2, 20ad8 <__aeabi_uldivmod+0x18>
   20ac4:	2900      	cmp	r1, #0
   20ac6:	bf08      	it	eq
   20ac8:	2800      	cmpeq	r0, #0
   20aca:	bf1c      	itt	ne
   20acc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   20ad0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   20ad4:	f001 b8e8 	b.w	21ca8 <__aeabi_idiv0>
   20ad8:	f1ad 0c08 	sub.w	ip, sp, #8
   20adc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   20ae0:	f000 f806 	bl	20af0 <__udivmoddi4>
   20ae4:	f8dd e004 	ldr.w	lr, [sp, #4]
   20ae8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20aec:	b004      	add	sp, #16
   20aee:	4770      	bx	lr

00020af0 <__udivmoddi4>:
   20af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20af4:	9e08      	ldr	r6, [sp, #32]
   20af6:	460d      	mov	r5, r1
   20af8:	4604      	mov	r4, r0
   20afa:	460f      	mov	r7, r1
   20afc:	2b00      	cmp	r3, #0
   20afe:	d14a      	bne.n	20b96 <__udivmoddi4+0xa6>
   20b00:	428a      	cmp	r2, r1
   20b02:	4694      	mov	ip, r2
   20b04:	d965      	bls.n	20bd2 <__udivmoddi4+0xe2>
   20b06:	fab2 f382 	clz	r3, r2
   20b0a:	b143      	cbz	r3, 20b1e <__udivmoddi4+0x2e>
   20b0c:	fa02 fc03 	lsl.w	ip, r2, r3
   20b10:	f1c3 0220 	rsb	r2, r3, #32
   20b14:	409f      	lsls	r7, r3
   20b16:	fa20 f202 	lsr.w	r2, r0, r2
   20b1a:	4317      	orrs	r7, r2
   20b1c:	409c      	lsls	r4, r3
   20b1e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   20b22:	fa1f f58c 	uxth.w	r5, ip
   20b26:	fbb7 f1fe 	udiv	r1, r7, lr
   20b2a:	0c22      	lsrs	r2, r4, #16
   20b2c:	fb0e 7711 	mls	r7, lr, r1, r7
   20b30:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   20b34:	fb01 f005 	mul.w	r0, r1, r5
   20b38:	4290      	cmp	r0, r2
   20b3a:	d90a      	bls.n	20b52 <__udivmoddi4+0x62>
   20b3c:	eb1c 0202 	adds.w	r2, ip, r2
   20b40:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   20b44:	f080 811c 	bcs.w	20d80 <__udivmoddi4+0x290>
   20b48:	4290      	cmp	r0, r2
   20b4a:	f240 8119 	bls.w	20d80 <__udivmoddi4+0x290>
   20b4e:	3902      	subs	r1, #2
   20b50:	4462      	add	r2, ip
   20b52:	1a12      	subs	r2, r2, r0
   20b54:	b2a4      	uxth	r4, r4
   20b56:	fbb2 f0fe 	udiv	r0, r2, lr
   20b5a:	fb0e 2210 	mls	r2, lr, r0, r2
   20b5e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   20b62:	fb00 f505 	mul.w	r5, r0, r5
   20b66:	42a5      	cmp	r5, r4
   20b68:	d90a      	bls.n	20b80 <__udivmoddi4+0x90>
   20b6a:	eb1c 0404 	adds.w	r4, ip, r4
   20b6e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   20b72:	f080 8107 	bcs.w	20d84 <__udivmoddi4+0x294>
   20b76:	42a5      	cmp	r5, r4
   20b78:	f240 8104 	bls.w	20d84 <__udivmoddi4+0x294>
   20b7c:	4464      	add	r4, ip
   20b7e:	3802      	subs	r0, #2
   20b80:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   20b84:	1b64      	subs	r4, r4, r5
   20b86:	2100      	movs	r1, #0
   20b88:	b11e      	cbz	r6, 20b92 <__udivmoddi4+0xa2>
   20b8a:	40dc      	lsrs	r4, r3
   20b8c:	2300      	movs	r3, #0
   20b8e:	e9c6 4300 	strd	r4, r3, [r6]
   20b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20b96:	428b      	cmp	r3, r1
   20b98:	d908      	bls.n	20bac <__udivmoddi4+0xbc>
   20b9a:	2e00      	cmp	r6, #0
   20b9c:	f000 80ed 	beq.w	20d7a <__udivmoddi4+0x28a>
   20ba0:	2100      	movs	r1, #0
   20ba2:	e9c6 0500 	strd	r0, r5, [r6]
   20ba6:	4608      	mov	r0, r1
   20ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20bac:	fab3 f183 	clz	r1, r3
   20bb0:	2900      	cmp	r1, #0
   20bb2:	d149      	bne.n	20c48 <__udivmoddi4+0x158>
   20bb4:	42ab      	cmp	r3, r5
   20bb6:	d302      	bcc.n	20bbe <__udivmoddi4+0xce>
   20bb8:	4282      	cmp	r2, r0
   20bba:	f200 80f8 	bhi.w	20dae <__udivmoddi4+0x2be>
   20bbe:	1a84      	subs	r4, r0, r2
   20bc0:	eb65 0203 	sbc.w	r2, r5, r3
   20bc4:	2001      	movs	r0, #1
   20bc6:	4617      	mov	r7, r2
   20bc8:	2e00      	cmp	r6, #0
   20bca:	d0e2      	beq.n	20b92 <__udivmoddi4+0xa2>
   20bcc:	e9c6 4700 	strd	r4, r7, [r6]
   20bd0:	e7df      	b.n	20b92 <__udivmoddi4+0xa2>
   20bd2:	b902      	cbnz	r2, 20bd6 <__udivmoddi4+0xe6>
   20bd4:	deff      	udf	#255	; 0xff
   20bd6:	fab2 f382 	clz	r3, r2
   20bda:	2b00      	cmp	r3, #0
   20bdc:	f040 8090 	bne.w	20d00 <__udivmoddi4+0x210>
   20be0:	1a8a      	subs	r2, r1, r2
   20be2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   20be6:	fa1f fe8c 	uxth.w	lr, ip
   20bea:	2101      	movs	r1, #1
   20bec:	fbb2 f5f7 	udiv	r5, r2, r7
   20bf0:	fb07 2015 	mls	r0, r7, r5, r2
   20bf4:	0c22      	lsrs	r2, r4, #16
   20bf6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   20bfa:	fb0e f005 	mul.w	r0, lr, r5
   20bfe:	4290      	cmp	r0, r2
   20c00:	d908      	bls.n	20c14 <__udivmoddi4+0x124>
   20c02:	eb1c 0202 	adds.w	r2, ip, r2
   20c06:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   20c0a:	d202      	bcs.n	20c12 <__udivmoddi4+0x122>
   20c0c:	4290      	cmp	r0, r2
   20c0e:	f200 80cb 	bhi.w	20da8 <__udivmoddi4+0x2b8>
   20c12:	4645      	mov	r5, r8
   20c14:	1a12      	subs	r2, r2, r0
   20c16:	b2a4      	uxth	r4, r4
   20c18:	fbb2 f0f7 	udiv	r0, r2, r7
   20c1c:	fb07 2210 	mls	r2, r7, r0, r2
   20c20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   20c24:	fb0e fe00 	mul.w	lr, lr, r0
   20c28:	45a6      	cmp	lr, r4
   20c2a:	d908      	bls.n	20c3e <__udivmoddi4+0x14e>
   20c2c:	eb1c 0404 	adds.w	r4, ip, r4
   20c30:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   20c34:	d202      	bcs.n	20c3c <__udivmoddi4+0x14c>
   20c36:	45a6      	cmp	lr, r4
   20c38:	f200 80bb 	bhi.w	20db2 <__udivmoddi4+0x2c2>
   20c3c:	4610      	mov	r0, r2
   20c3e:	eba4 040e 	sub.w	r4, r4, lr
   20c42:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   20c46:	e79f      	b.n	20b88 <__udivmoddi4+0x98>
   20c48:	f1c1 0720 	rsb	r7, r1, #32
   20c4c:	408b      	lsls	r3, r1
   20c4e:	fa22 fc07 	lsr.w	ip, r2, r7
   20c52:	ea4c 0c03 	orr.w	ip, ip, r3
   20c56:	fa05 f401 	lsl.w	r4, r5, r1
   20c5a:	fa20 f307 	lsr.w	r3, r0, r7
   20c5e:	40fd      	lsrs	r5, r7
   20c60:	ea4f 491c 	mov.w	r9, ip, lsr #16
   20c64:	4323      	orrs	r3, r4
   20c66:	fbb5 f8f9 	udiv	r8, r5, r9
   20c6a:	fa1f fe8c 	uxth.w	lr, ip
   20c6e:	fb09 5518 	mls	r5, r9, r8, r5
   20c72:	0c1c      	lsrs	r4, r3, #16
   20c74:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   20c78:	fb08 f50e 	mul.w	r5, r8, lr
   20c7c:	42a5      	cmp	r5, r4
   20c7e:	fa02 f201 	lsl.w	r2, r2, r1
   20c82:	fa00 f001 	lsl.w	r0, r0, r1
   20c86:	d90b      	bls.n	20ca0 <__udivmoddi4+0x1b0>
   20c88:	eb1c 0404 	adds.w	r4, ip, r4
   20c8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   20c90:	f080 8088 	bcs.w	20da4 <__udivmoddi4+0x2b4>
   20c94:	42a5      	cmp	r5, r4
   20c96:	f240 8085 	bls.w	20da4 <__udivmoddi4+0x2b4>
   20c9a:	f1a8 0802 	sub.w	r8, r8, #2
   20c9e:	4464      	add	r4, ip
   20ca0:	1b64      	subs	r4, r4, r5
   20ca2:	b29d      	uxth	r5, r3
   20ca4:	fbb4 f3f9 	udiv	r3, r4, r9
   20ca8:	fb09 4413 	mls	r4, r9, r3, r4
   20cac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   20cb0:	fb03 fe0e 	mul.w	lr, r3, lr
   20cb4:	45a6      	cmp	lr, r4
   20cb6:	d908      	bls.n	20cca <__udivmoddi4+0x1da>
   20cb8:	eb1c 0404 	adds.w	r4, ip, r4
   20cbc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   20cc0:	d26c      	bcs.n	20d9c <__udivmoddi4+0x2ac>
   20cc2:	45a6      	cmp	lr, r4
   20cc4:	d96a      	bls.n	20d9c <__udivmoddi4+0x2ac>
   20cc6:	3b02      	subs	r3, #2
   20cc8:	4464      	add	r4, ip
   20cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   20cce:	fba3 9502 	umull	r9, r5, r3, r2
   20cd2:	eba4 040e 	sub.w	r4, r4, lr
   20cd6:	42ac      	cmp	r4, r5
   20cd8:	46c8      	mov	r8, r9
   20cda:	46ae      	mov	lr, r5
   20cdc:	d356      	bcc.n	20d8c <__udivmoddi4+0x29c>
   20cde:	d053      	beq.n	20d88 <__udivmoddi4+0x298>
   20ce0:	b156      	cbz	r6, 20cf8 <__udivmoddi4+0x208>
   20ce2:	ebb0 0208 	subs.w	r2, r0, r8
   20ce6:	eb64 040e 	sbc.w	r4, r4, lr
   20cea:	fa04 f707 	lsl.w	r7, r4, r7
   20cee:	40ca      	lsrs	r2, r1
   20cf0:	40cc      	lsrs	r4, r1
   20cf2:	4317      	orrs	r7, r2
   20cf4:	e9c6 7400 	strd	r7, r4, [r6]
   20cf8:	4618      	mov	r0, r3
   20cfa:	2100      	movs	r1, #0
   20cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20d00:	f1c3 0120 	rsb	r1, r3, #32
   20d04:	fa02 fc03 	lsl.w	ip, r2, r3
   20d08:	fa20 f201 	lsr.w	r2, r0, r1
   20d0c:	fa25 f101 	lsr.w	r1, r5, r1
   20d10:	409d      	lsls	r5, r3
   20d12:	432a      	orrs	r2, r5
   20d14:	ea4f 471c 	mov.w	r7, ip, lsr #16
   20d18:	fa1f fe8c 	uxth.w	lr, ip
   20d1c:	fbb1 f0f7 	udiv	r0, r1, r7
   20d20:	fb07 1510 	mls	r5, r7, r0, r1
   20d24:	0c11      	lsrs	r1, r2, #16
   20d26:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   20d2a:	fb00 f50e 	mul.w	r5, r0, lr
   20d2e:	428d      	cmp	r5, r1
   20d30:	fa04 f403 	lsl.w	r4, r4, r3
   20d34:	d908      	bls.n	20d48 <__udivmoddi4+0x258>
   20d36:	eb1c 0101 	adds.w	r1, ip, r1
   20d3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   20d3e:	d22f      	bcs.n	20da0 <__udivmoddi4+0x2b0>
   20d40:	428d      	cmp	r5, r1
   20d42:	d92d      	bls.n	20da0 <__udivmoddi4+0x2b0>
   20d44:	3802      	subs	r0, #2
   20d46:	4461      	add	r1, ip
   20d48:	1b49      	subs	r1, r1, r5
   20d4a:	b292      	uxth	r2, r2
   20d4c:	fbb1 f5f7 	udiv	r5, r1, r7
   20d50:	fb07 1115 	mls	r1, r7, r5, r1
   20d54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   20d58:	fb05 f10e 	mul.w	r1, r5, lr
   20d5c:	4291      	cmp	r1, r2
   20d5e:	d908      	bls.n	20d72 <__udivmoddi4+0x282>
   20d60:	eb1c 0202 	adds.w	r2, ip, r2
   20d64:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   20d68:	d216      	bcs.n	20d98 <__udivmoddi4+0x2a8>
   20d6a:	4291      	cmp	r1, r2
   20d6c:	d914      	bls.n	20d98 <__udivmoddi4+0x2a8>
   20d6e:	3d02      	subs	r5, #2
   20d70:	4462      	add	r2, ip
   20d72:	1a52      	subs	r2, r2, r1
   20d74:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   20d78:	e738      	b.n	20bec <__udivmoddi4+0xfc>
   20d7a:	4631      	mov	r1, r6
   20d7c:	4630      	mov	r0, r6
   20d7e:	e708      	b.n	20b92 <__udivmoddi4+0xa2>
   20d80:	4639      	mov	r1, r7
   20d82:	e6e6      	b.n	20b52 <__udivmoddi4+0x62>
   20d84:	4610      	mov	r0, r2
   20d86:	e6fb      	b.n	20b80 <__udivmoddi4+0x90>
   20d88:	4548      	cmp	r0, r9
   20d8a:	d2a9      	bcs.n	20ce0 <__udivmoddi4+0x1f0>
   20d8c:	ebb9 0802 	subs.w	r8, r9, r2
   20d90:	eb65 0e0c 	sbc.w	lr, r5, ip
   20d94:	3b01      	subs	r3, #1
   20d96:	e7a3      	b.n	20ce0 <__udivmoddi4+0x1f0>
   20d98:	4645      	mov	r5, r8
   20d9a:	e7ea      	b.n	20d72 <__udivmoddi4+0x282>
   20d9c:	462b      	mov	r3, r5
   20d9e:	e794      	b.n	20cca <__udivmoddi4+0x1da>
   20da0:	4640      	mov	r0, r8
   20da2:	e7d1      	b.n	20d48 <__udivmoddi4+0x258>
   20da4:	46d0      	mov	r8, sl
   20da6:	e77b      	b.n	20ca0 <__udivmoddi4+0x1b0>
   20da8:	3d02      	subs	r5, #2
   20daa:	4462      	add	r2, ip
   20dac:	e732      	b.n	20c14 <__udivmoddi4+0x124>
   20dae:	4608      	mov	r0, r1
   20db0:	e70a      	b.n	20bc8 <__udivmoddi4+0xd8>
   20db2:	4464      	add	r4, ip
   20db4:	3802      	subs	r0, #2
   20db6:	e742      	b.n	20c3e <__udivmoddi4+0x14e>

00020db8 <selfrel_offset31>:
   20db8:	6803      	ldr	r3, [r0, #0]
   20dba:	005a      	lsls	r2, r3, #1
   20dbc:	bf4c      	ite	mi
   20dbe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   20dc2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   20dc6:	4418      	add	r0, r3
   20dc8:	4770      	bx	lr
   20dca:	bf00      	nop

00020dcc <search_EIT_table>:
   20dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20dd0:	b329      	cbz	r1, 20e1e <search_EIT_table+0x52>
   20dd2:	1e4f      	subs	r7, r1, #1
   20dd4:	4604      	mov	r4, r0
   20dd6:	4615      	mov	r5, r2
   20dd8:	463e      	mov	r6, r7
   20dda:	f04f 0800 	mov.w	r8, #0
   20dde:	eb08 0106 	add.w	r1, r8, r6
   20de2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   20de6:	1049      	asrs	r1, r1, #1
   20de8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   20dec:	4648      	mov	r0, r9
   20dee:	f7ff ffe3 	bl	20db8 <selfrel_offset31>
   20df2:	4603      	mov	r3, r0
   20df4:	00c8      	lsls	r0, r1, #3
   20df6:	3008      	adds	r0, #8
   20df8:	428f      	cmp	r7, r1
   20dfa:	4420      	add	r0, r4
   20dfc:	d009      	beq.n	20e12 <search_EIT_table+0x46>
   20dfe:	42ab      	cmp	r3, r5
   20e00:	d809      	bhi.n	20e16 <search_EIT_table+0x4a>
   20e02:	f7ff ffd9 	bl	20db8 <selfrel_offset31>
   20e06:	3801      	subs	r0, #1
   20e08:	42a8      	cmp	r0, r5
   20e0a:	d20a      	bcs.n	20e22 <search_EIT_table+0x56>
   20e0c:	f101 0801 	add.w	r8, r1, #1
   20e10:	e7e5      	b.n	20dde <search_EIT_table+0x12>
   20e12:	42ab      	cmp	r3, r5
   20e14:	d905      	bls.n	20e22 <search_EIT_table+0x56>
   20e16:	4588      	cmp	r8, r1
   20e18:	d001      	beq.n	20e1e <search_EIT_table+0x52>
   20e1a:	1e4e      	subs	r6, r1, #1
   20e1c:	e7df      	b.n	20dde <search_EIT_table+0x12>
   20e1e:	f04f 0900 	mov.w	r9, #0
   20e22:	4648      	mov	r0, r9
   20e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020e28 <__gnu_unwind_get_pr_addr>:
   20e28:	2801      	cmp	r0, #1
   20e2a:	d007      	beq.n	20e3c <__gnu_unwind_get_pr_addr+0x14>
   20e2c:	2802      	cmp	r0, #2
   20e2e:	d007      	beq.n	20e40 <__gnu_unwind_get_pr_addr+0x18>
   20e30:	4b04      	ldr	r3, [pc, #16]	; (20e44 <__gnu_unwind_get_pr_addr+0x1c>)
   20e32:	2800      	cmp	r0, #0
   20e34:	bf0c      	ite	eq
   20e36:	4618      	moveq	r0, r3
   20e38:	2000      	movne	r0, #0
   20e3a:	4770      	bx	lr
   20e3c:	4802      	ldr	r0, [pc, #8]	; (20e48 <__gnu_unwind_get_pr_addr+0x20>)
   20e3e:	4770      	bx	lr
   20e40:	4802      	ldr	r0, [pc, #8]	; (20e4c <__gnu_unwind_get_pr_addr+0x24>)
   20e42:	4770      	bx	lr
   20e44:	000214f9 	.word	0x000214f9
   20e48:	00021501 	.word	0x00021501
   20e4c:	00021509 	.word	0x00021509

00020e50 <get_eit_entry>:
   20e50:	b530      	push	{r4, r5, lr}
   20e52:	4b22      	ldr	r3, [pc, #136]	; (20edc <get_eit_entry+0x8c>)
   20e54:	b083      	sub	sp, #12
   20e56:	4604      	mov	r4, r0
   20e58:	1e8d      	subs	r5, r1, #2
   20e5a:	b343      	cbz	r3, 20eae <get_eit_entry+0x5e>
   20e5c:	a901      	add	r1, sp, #4
   20e5e:	4628      	mov	r0, r5
   20e60:	f3af 8000 	nop.w
   20e64:	b1f0      	cbz	r0, 20ea4 <get_eit_entry+0x54>
   20e66:	9901      	ldr	r1, [sp, #4]
   20e68:	462a      	mov	r2, r5
   20e6a:	f7ff ffaf 	bl	20dcc <search_EIT_table>
   20e6e:	4601      	mov	r1, r0
   20e70:	b1c0      	cbz	r0, 20ea4 <get_eit_entry+0x54>
   20e72:	f7ff ffa1 	bl	20db8 <selfrel_offset31>
   20e76:	684b      	ldr	r3, [r1, #4]
   20e78:	64a0      	str	r0, [r4, #72]	; 0x48
   20e7a:	2b01      	cmp	r3, #1
   20e7c:	d02b      	beq.n	20ed6 <get_eit_entry+0x86>
   20e7e:	2b00      	cmp	r3, #0
   20e80:	f101 0004 	add.w	r0, r1, #4
   20e84:	db25      	blt.n	20ed2 <get_eit_entry+0x82>
   20e86:	f7ff ff97 	bl	20db8 <selfrel_offset31>
   20e8a:	2300      	movs	r3, #0
   20e8c:	6523      	str	r3, [r4, #80]	; 0x50
   20e8e:	6803      	ldr	r3, [r0, #0]
   20e90:	64e0      	str	r0, [r4, #76]	; 0x4c
   20e92:	2b00      	cmp	r3, #0
   20e94:	db12      	blt.n	20ebc <get_eit_entry+0x6c>
   20e96:	f7ff ff8f 	bl	20db8 <selfrel_offset31>
   20e9a:	4603      	mov	r3, r0
   20e9c:	2000      	movs	r0, #0
   20e9e:	6123      	str	r3, [r4, #16]
   20ea0:	b003      	add	sp, #12
   20ea2:	bd30      	pop	{r4, r5, pc}
   20ea4:	2300      	movs	r3, #0
   20ea6:	2009      	movs	r0, #9
   20ea8:	6123      	str	r3, [r4, #16]
   20eaa:	b003      	add	sp, #12
   20eac:	bd30      	pop	{r4, r5, pc}
   20eae:	4b0c      	ldr	r3, [pc, #48]	; (20ee0 <get_eit_entry+0x90>)
   20eb0:	490c      	ldr	r1, [pc, #48]	; (20ee4 <get_eit_entry+0x94>)
   20eb2:	1ac9      	subs	r1, r1, r3
   20eb4:	10c9      	asrs	r1, r1, #3
   20eb6:	4618      	mov	r0, r3
   20eb8:	9101      	str	r1, [sp, #4]
   20eba:	e7d5      	b.n	20e68 <get_eit_entry+0x18>
   20ebc:	f3c3 6003 	ubfx	r0, r3, #24, #4
   20ec0:	f7ff ffb2 	bl	20e28 <__gnu_unwind_get_pr_addr>
   20ec4:	1e03      	subs	r3, r0, #0
   20ec6:	bf0c      	ite	eq
   20ec8:	2009      	moveq	r0, #9
   20eca:	2000      	movne	r0, #0
   20ecc:	6123      	str	r3, [r4, #16]
   20ece:	b003      	add	sp, #12
   20ed0:	bd30      	pop	{r4, r5, pc}
   20ed2:	2301      	movs	r3, #1
   20ed4:	e7da      	b.n	20e8c <get_eit_entry+0x3c>
   20ed6:	2300      	movs	r3, #0
   20ed8:	2005      	movs	r0, #5
   20eda:	e7e0      	b.n	20e9e <get_eit_entry+0x4e>
   20edc:	00000000 	.word	0x00000000
   20ee0:	000288b4 	.word	0x000288b4
   20ee4:	00028ba8 	.word	0x00028ba8

00020ee8 <restore_non_core_regs>:
   20ee8:	6803      	ldr	r3, [r0, #0]
   20eea:	07da      	lsls	r2, r3, #31
   20eec:	b510      	push	{r4, lr}
   20eee:	4604      	mov	r4, r0
   20ef0:	d406      	bmi.n	20f00 <restore_non_core_regs+0x18>
   20ef2:	079b      	lsls	r3, r3, #30
   20ef4:	f100 0048 	add.w	r0, r0, #72	; 0x48
   20ef8:	d509      	bpl.n	20f0e <restore_non_core_regs+0x26>
   20efa:	f000 fc75 	bl	217e8 <__gnu_Unwind_Restore_VFP_D>
   20efe:	6823      	ldr	r3, [r4, #0]
   20f00:	0759      	lsls	r1, r3, #29
   20f02:	d509      	bpl.n	20f18 <restore_non_core_regs+0x30>
   20f04:	071a      	lsls	r2, r3, #28
   20f06:	d50e      	bpl.n	20f26 <restore_non_core_regs+0x3e>
   20f08:	06db      	lsls	r3, r3, #27
   20f0a:	d513      	bpl.n	20f34 <restore_non_core_regs+0x4c>
   20f0c:	bd10      	pop	{r4, pc}
   20f0e:	f000 fc63 	bl	217d8 <__gnu_Unwind_Restore_VFP>
   20f12:	6823      	ldr	r3, [r4, #0]
   20f14:	0759      	lsls	r1, r3, #29
   20f16:	d4f5      	bmi.n	20f04 <restore_non_core_regs+0x1c>
   20f18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   20f1c:	f000 fc6c 	bl	217f8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   20f20:	6823      	ldr	r3, [r4, #0]
   20f22:	071a      	lsls	r2, r3, #28
   20f24:	d4f0      	bmi.n	20f08 <restore_non_core_regs+0x20>
   20f26:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   20f2a:	f000 fc6d 	bl	21808 <__gnu_Unwind_Restore_WMMXD>
   20f2e:	6823      	ldr	r3, [r4, #0]
   20f30:	06db      	lsls	r3, r3, #27
   20f32:	d4eb      	bmi.n	20f0c <restore_non_core_regs+0x24>
   20f34:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   20f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20f3c:	f000 bca8 	b.w	21890 <__gnu_Unwind_Restore_WMMXC>

00020f40 <_Unwind_decode_typeinfo_ptr.constprop.0>:
   20f40:	4603      	mov	r3, r0
   20f42:	6800      	ldr	r0, [r0, #0]
   20f44:	b100      	cbz	r0, 20f48 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
   20f46:	4418      	add	r0, r3
   20f48:	4770      	bx	lr
   20f4a:	bf00      	nop

00020f4c <_Unwind_DebugHook>:
   20f4c:	4770      	bx	lr
   20f4e:	bf00      	nop

00020f50 <unwind_phase2>:
   20f50:	b570      	push	{r4, r5, r6, lr}
   20f52:	4604      	mov	r4, r0
   20f54:	460e      	mov	r6, r1
   20f56:	6c31      	ldr	r1, [r6, #64]	; 0x40
   20f58:	4620      	mov	r0, r4
   20f5a:	f7ff ff79 	bl	20e50 <get_eit_entry>
   20f5e:	4605      	mov	r5, r0
   20f60:	b988      	cbnz	r0, 20f86 <unwind_phase2+0x36>
   20f62:	6c32      	ldr	r2, [r6, #64]	; 0x40
   20f64:	6162      	str	r2, [r4, #20]
   20f66:	6923      	ldr	r3, [r4, #16]
   20f68:	4632      	mov	r2, r6
   20f6a:	4621      	mov	r1, r4
   20f6c:	2001      	movs	r0, #1
   20f6e:	4798      	blx	r3
   20f70:	2808      	cmp	r0, #8
   20f72:	d0f0      	beq.n	20f56 <unwind_phase2+0x6>
   20f74:	2807      	cmp	r0, #7
   20f76:	d106      	bne.n	20f86 <unwind_phase2+0x36>
   20f78:	4628      	mov	r0, r5
   20f7a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   20f7c:	f7ff ffe6 	bl	20f4c <_Unwind_DebugHook>
   20f80:	1d30      	adds	r0, r6, #4
   20f82:	f000 fc1d 	bl	217c0 <__restore_core_regs>
   20f86:	f7f6 fde8 	bl	17b5a <abort>
   20f8a:	bf00      	nop

00020f8c <unwind_phase2_forced>:
   20f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20f90:	1d0d      	adds	r5, r1, #4
   20f92:	f8d0 800c 	ldr.w	r8, [r0, #12]
   20f96:	f8d0 9018 	ldr.w	r9, [r0, #24]
   20f9a:	4607      	mov	r7, r0
   20f9c:	4614      	mov	r4, r2
   20f9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20fa0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   20fa4:	f10d 0c0c 	add.w	ip, sp, #12
   20fa8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20fae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20fb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20fb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   20fbc:	ae02      	add	r6, sp, #8
   20fbe:	f04f 0e00 	mov.w	lr, #0
   20fc2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   20fc6:	f8c6 e000 	str.w	lr, [r6]
   20fca:	e020      	b.n	2100e <unwind_phase2_forced+0x82>
   20fcc:	6c33      	ldr	r3, [r6, #64]	; 0x40
   20fce:	617b      	str	r3, [r7, #20]
   20fd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   20fd4:	4631      	mov	r1, r6
   20fd6:	a87a      	add	r0, sp, #488	; 0x1e8
   20fd8:	f7f6 f98a 	bl	172f0 <memcpy>
   20fdc:	693b      	ldr	r3, [r7, #16]
   20fde:	aa7a      	add	r2, sp, #488	; 0x1e8
   20fe0:	4639      	mov	r1, r7
   20fe2:	4650      	mov	r0, sl
   20fe4:	4798      	blx	r3
   20fe6:	9b88      	ldr	r3, [sp, #544]	; 0x220
   20fe8:	6473      	str	r3, [r6, #68]	; 0x44
   20fea:	4621      	mov	r1, r4
   20fec:	e9cd 6900 	strd	r6, r9, [sp]
   20ff0:	4605      	mov	r5, r0
   20ff2:	463b      	mov	r3, r7
   20ff4:	463a      	mov	r2, r7
   20ff6:	2001      	movs	r0, #1
   20ff8:	47c0      	blx	r8
   20ffa:	4604      	mov	r4, r0
   20ffc:	b9e0      	cbnz	r0, 21038 <unwind_phase2_forced+0xac>
   20ffe:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   21002:	a97a      	add	r1, sp, #488	; 0x1e8
   21004:	4630      	mov	r0, r6
   21006:	f7f6 f973 	bl	172f0 <memcpy>
   2100a:	2d08      	cmp	r5, #8
   2100c:	d11a      	bne.n	21044 <unwind_phase2_forced+0xb8>
   2100e:	6c31      	ldr	r1, [r6, #64]	; 0x40
   21010:	4638      	mov	r0, r7
   21012:	f7ff ff1d 	bl	20e50 <get_eit_entry>
   21016:	3409      	adds	r4, #9
   21018:	fa5f fa84 	uxtb.w	sl, r4
   2101c:	4605      	mov	r5, r0
   2101e:	2800      	cmp	r0, #0
   21020:	d0d4      	beq.n	20fcc <unwind_phase2_forced+0x40>
   21022:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   21024:	6473      	str	r3, [r6, #68]	; 0x44
   21026:	463a      	mov	r2, r7
   21028:	e9cd 6900 	strd	r6, r9, [sp]
   2102c:	463b      	mov	r3, r7
   2102e:	f04a 0110 	orr.w	r1, sl, #16
   21032:	2001      	movs	r0, #1
   21034:	47c0      	blx	r8
   21036:	b100      	cbz	r0, 2103a <unwind_phase2_forced+0xae>
   21038:	2509      	movs	r5, #9
   2103a:	4628      	mov	r0, r5
   2103c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   21040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21044:	2d07      	cmp	r5, #7
   21046:	d1f7      	bne.n	21038 <unwind_phase2_forced+0xac>
   21048:	4620      	mov	r0, r4
   2104a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   2104c:	f7ff ff7e 	bl	20f4c <_Unwind_DebugHook>
   21050:	a803      	add	r0, sp, #12
   21052:	f000 fbb5 	bl	217c0 <__restore_core_regs>
   21056:	bf00      	nop

00021058 <__gnu_Unwind_RaiseException>:
   21058:	b5f0      	push	{r4, r5, r6, r7, lr}
   2105a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2105c:	640b      	str	r3, [r1, #64]	; 0x40
   2105e:	f101 0c04 	add.w	ip, r1, #4
   21062:	460e      	mov	r6, r1
   21064:	4605      	mov	r5, r0
   21066:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2106a:	b0f9      	sub	sp, #484	; 0x1e4
   2106c:	ac01      	add	r4, sp, #4
   2106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21070:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   21074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   21076:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2107a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2107c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   21080:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   21084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   21088:	9700      	str	r7, [sp, #0]
   2108a:	e006      	b.n	2109a <__gnu_Unwind_RaiseException+0x42>
   2108c:	692b      	ldr	r3, [r5, #16]
   2108e:	466a      	mov	r2, sp
   21090:	4629      	mov	r1, r5
   21092:	4798      	blx	r3
   21094:	2808      	cmp	r0, #8
   21096:	4604      	mov	r4, r0
   21098:	d108      	bne.n	210ac <__gnu_Unwind_RaiseException+0x54>
   2109a:	9910      	ldr	r1, [sp, #64]	; 0x40
   2109c:	4628      	mov	r0, r5
   2109e:	f7ff fed7 	bl	20e50 <get_eit_entry>
   210a2:	2800      	cmp	r0, #0
   210a4:	d0f2      	beq.n	2108c <__gnu_Unwind_RaiseException+0x34>
   210a6:	2009      	movs	r0, #9
   210a8:	b079      	add	sp, #484	; 0x1e4
   210aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   210ac:	4668      	mov	r0, sp
   210ae:	f7ff ff1b 	bl	20ee8 <restore_non_core_regs>
   210b2:	2c06      	cmp	r4, #6
   210b4:	d1f7      	bne.n	210a6 <__gnu_Unwind_RaiseException+0x4e>
   210b6:	4631      	mov	r1, r6
   210b8:	4628      	mov	r0, r5
   210ba:	f7ff ff49 	bl	20f50 <unwind_phase2>
   210be:	bf00      	nop

000210c0 <__gnu_Unwind_ForcedUnwind>:
   210c0:	60c1      	str	r1, [r0, #12]
   210c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   210c4:	6182      	str	r2, [r0, #24]
   210c6:	6419      	str	r1, [r3, #64]	; 0x40
   210c8:	2200      	movs	r2, #0
   210ca:	4619      	mov	r1, r3
   210cc:	f7ff bf5e 	b.w	20f8c <unwind_phase2_forced>

000210d0 <__gnu_Unwind_Resume>:
   210d0:	b570      	push	{r4, r5, r6, lr}
   210d2:	68c6      	ldr	r6, [r0, #12]
   210d4:	6943      	ldr	r3, [r0, #20]
   210d6:	640b      	str	r3, [r1, #64]	; 0x40
   210d8:	b9ae      	cbnz	r6, 21106 <__gnu_Unwind_Resume+0x36>
   210da:	6903      	ldr	r3, [r0, #16]
   210dc:	460a      	mov	r2, r1
   210de:	4604      	mov	r4, r0
   210e0:	460d      	mov	r5, r1
   210e2:	4601      	mov	r1, r0
   210e4:	2002      	movs	r0, #2
   210e6:	4798      	blx	r3
   210e8:	2807      	cmp	r0, #7
   210ea:	d005      	beq.n	210f8 <__gnu_Unwind_Resume+0x28>
   210ec:	2808      	cmp	r0, #8
   210ee:	d10f      	bne.n	21110 <__gnu_Unwind_Resume+0x40>
   210f0:	4629      	mov	r1, r5
   210f2:	4620      	mov	r0, r4
   210f4:	f7ff ff2c 	bl	20f50 <unwind_phase2>
   210f8:	4630      	mov	r0, r6
   210fa:	6c29      	ldr	r1, [r5, #64]	; 0x40
   210fc:	f7ff ff26 	bl	20f4c <_Unwind_DebugHook>
   21100:	1d28      	adds	r0, r5, #4
   21102:	f000 fb5d 	bl	217c0 <__restore_core_regs>
   21106:	2201      	movs	r2, #1
   21108:	f7ff ff40 	bl	20f8c <unwind_phase2_forced>
   2110c:	f7f6 fd25 	bl	17b5a <abort>
   21110:	f7f6 fd23 	bl	17b5a <abort>

00021114 <__gnu_Unwind_Resume_or_Rethrow>:
   21114:	68c2      	ldr	r2, [r0, #12]
   21116:	b122      	cbz	r2, 21122 <__gnu_Unwind_Resume_or_Rethrow+0xe>
   21118:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   2111a:	640a      	str	r2, [r1, #64]	; 0x40
   2111c:	2200      	movs	r2, #0
   2111e:	f7ff bf35 	b.w	20f8c <unwind_phase2_forced>
   21122:	f7ff bf99 	b.w	21058 <__gnu_Unwind_RaiseException>
   21126:	bf00      	nop

00021128 <_Unwind_Complete>:
   21128:	4770      	bx	lr
   2112a:	bf00      	nop

0002112c <_Unwind_DeleteException>:
   2112c:	6883      	ldr	r3, [r0, #8]
   2112e:	4601      	mov	r1, r0
   21130:	b10b      	cbz	r3, 21136 <_Unwind_DeleteException+0xa>
   21132:	2001      	movs	r0, #1
   21134:	4718      	bx	r3
   21136:	4770      	bx	lr

00021138 <_Unwind_VRS_Get>:
   21138:	2901      	cmp	r1, #1
   2113a:	d012      	beq.n	21162 <_Unwind_VRS_Get+0x2a>
   2113c:	d809      	bhi.n	21152 <_Unwind_VRS_Get+0x1a>
   2113e:	b973      	cbnz	r3, 2115e <_Unwind_VRS_Get+0x26>
   21140:	2a0f      	cmp	r2, #15
   21142:	d80c      	bhi.n	2115e <_Unwind_VRS_Get+0x26>
   21144:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   21148:	4618      	mov	r0, r3
   2114a:	6853      	ldr	r3, [r2, #4]
   2114c:	9a00      	ldr	r2, [sp, #0]
   2114e:	6013      	str	r3, [r2, #0]
   21150:	4770      	bx	lr
   21152:	3903      	subs	r1, #3
   21154:	2901      	cmp	r1, #1
   21156:	bf94      	ite	ls
   21158:	2001      	movls	r0, #1
   2115a:	2002      	movhi	r0, #2
   2115c:	4770      	bx	lr
   2115e:	2002      	movs	r0, #2
   21160:	4770      	bx	lr
   21162:	4608      	mov	r0, r1
   21164:	4770      	bx	lr
   21166:	bf00      	nop

00021168 <_Unwind_GetGR>:
   21168:	b500      	push	{lr}
   2116a:	b085      	sub	sp, #20
   2116c:	460a      	mov	r2, r1
   2116e:	2300      	movs	r3, #0
   21170:	a903      	add	r1, sp, #12
   21172:	9100      	str	r1, [sp, #0]
   21174:	4619      	mov	r1, r3
   21176:	f7ff ffdf 	bl	21138 <_Unwind_VRS_Get>
   2117a:	9803      	ldr	r0, [sp, #12]
   2117c:	b005      	add	sp, #20
   2117e:	f85d fb04 	ldr.w	pc, [sp], #4
   21182:	bf00      	nop

00021184 <_Unwind_VRS_Set>:
   21184:	2901      	cmp	r1, #1
   21186:	d012      	beq.n	211ae <_Unwind_VRS_Set+0x2a>
   21188:	d809      	bhi.n	2119e <_Unwind_VRS_Set+0x1a>
   2118a:	b973      	cbnz	r3, 211aa <_Unwind_VRS_Set+0x26>
   2118c:	2a0f      	cmp	r2, #15
   2118e:	d80c      	bhi.n	211aa <_Unwind_VRS_Set+0x26>
   21190:	9900      	ldr	r1, [sp, #0]
   21192:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   21196:	6809      	ldr	r1, [r1, #0]
   21198:	6051      	str	r1, [r2, #4]
   2119a:	4618      	mov	r0, r3
   2119c:	4770      	bx	lr
   2119e:	3903      	subs	r1, #3
   211a0:	2901      	cmp	r1, #1
   211a2:	bf94      	ite	ls
   211a4:	2001      	movls	r0, #1
   211a6:	2002      	movhi	r0, #2
   211a8:	4770      	bx	lr
   211aa:	2002      	movs	r0, #2
   211ac:	4770      	bx	lr
   211ae:	4608      	mov	r0, r1
   211b0:	4770      	bx	lr
   211b2:	bf00      	nop

000211b4 <_Unwind_SetGR>:
   211b4:	b510      	push	{r4, lr}
   211b6:	b084      	sub	sp, #16
   211b8:	2300      	movs	r3, #0
   211ba:	ac03      	add	r4, sp, #12
   211bc:	9203      	str	r2, [sp, #12]
   211be:	9400      	str	r4, [sp, #0]
   211c0:	460a      	mov	r2, r1
   211c2:	4619      	mov	r1, r3
   211c4:	f7ff ffde 	bl	21184 <_Unwind_VRS_Set>
   211c8:	b004      	add	sp, #16
   211ca:	bd10      	pop	{r4, pc}

000211cc <__gnu_Unwind_Backtrace>:
   211cc:	b570      	push	{r4, r5, r6, lr}
   211ce:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   211d0:	6413      	str	r3, [r2, #64]	; 0x40
   211d2:	f102 0c04 	add.w	ip, r2, #4
   211d6:	4605      	mov	r5, r0
   211d8:	460c      	mov	r4, r1
   211da:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   211de:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   211e2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
   211e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   211ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   211ee:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   211f2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   211f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   211fa:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   211fe:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   21202:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   21206:	9616      	str	r6, [sp, #88]	; 0x58
   21208:	e010      	b.n	2122c <__gnu_Unwind_Backtrace+0x60>
   2120a:	f7ff ffd3 	bl	211b4 <_Unwind_SetGR>
   2120e:	4621      	mov	r1, r4
   21210:	a816      	add	r0, sp, #88	; 0x58
   21212:	47a8      	blx	r5
   21214:	4603      	mov	r3, r0
   21216:	aa16      	add	r2, sp, #88	; 0x58
   21218:	4669      	mov	r1, sp
   2121a:	2008      	movs	r0, #8
   2121c:	b983      	cbnz	r3, 21240 <__gnu_Unwind_Backtrace+0x74>
   2121e:	9b04      	ldr	r3, [sp, #16]
   21220:	4798      	blx	r3
   21222:	2805      	cmp	r0, #5
   21224:	4606      	mov	r6, r0
   21226:	d00c      	beq.n	21242 <__gnu_Unwind_Backtrace+0x76>
   21228:	2809      	cmp	r0, #9
   2122a:	d009      	beq.n	21240 <__gnu_Unwind_Backtrace+0x74>
   2122c:	9926      	ldr	r1, [sp, #152]	; 0x98
   2122e:	4668      	mov	r0, sp
   21230:	f7ff fe0e 	bl	20e50 <get_eit_entry>
   21234:	4603      	mov	r3, r0
   21236:	466a      	mov	r2, sp
   21238:	210c      	movs	r1, #12
   2123a:	a816      	add	r0, sp, #88	; 0x58
   2123c:	2b00      	cmp	r3, #0
   2123e:	d0e4      	beq.n	2120a <__gnu_Unwind_Backtrace+0x3e>
   21240:	2609      	movs	r6, #9
   21242:	a816      	add	r0, sp, #88	; 0x58
   21244:	f7ff fe50 	bl	20ee8 <restore_non_core_regs>
   21248:	4630      	mov	r0, r6
   2124a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
   2124e:	bd70      	pop	{r4, r5, r6, pc}

00021250 <__gnu_unwind_pr_common>:
   21250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21254:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   21256:	b089      	sub	sp, #36	; 0x24
   21258:	461e      	mov	r6, r3
   2125a:	f854 3b04 	ldr.w	r3, [r4], #4
   2125e:	9406      	str	r4, [sp, #24]
   21260:	460d      	mov	r5, r1
   21262:	4617      	mov	r7, r2
   21264:	f000 0803 	and.w	r8, r0, #3
   21268:	2e00      	cmp	r6, #0
   2126a:	d079      	beq.n	21360 <__gnu_unwind_pr_common+0x110>
   2126c:	0c1a      	lsrs	r2, r3, #16
   2126e:	f88d 201d 	strb.w	r2, [sp, #29]
   21272:	041b      	lsls	r3, r3, #16
   21274:	b2d2      	uxtb	r2, r2
   21276:	9305      	str	r3, [sp, #20]
   21278:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   2127c:	2302      	movs	r3, #2
   2127e:	f88d 301c 	strb.w	r3, [sp, #28]
   21282:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   21284:	f1b8 0f02 	cmp.w	r8, #2
   21288:	bf08      	it	eq
   2128a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   2128c:	f013 0301 	ands.w	r3, r3, #1
   21290:	d00c      	beq.n	212ac <__gnu_unwind_pr_common+0x5c>
   21292:	a905      	add	r1, sp, #20
   21294:	4638      	mov	r0, r7
   21296:	f000 fb95 	bl	219c4 <__gnu_unwind_execute>
   2129a:	b918      	cbnz	r0, 212a4 <__gnu_unwind_pr_common+0x54>
   2129c:	2008      	movs	r0, #8
   2129e:	b009      	add	sp, #36	; 0x24
   212a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212a4:	2009      	movs	r0, #9
   212a6:	b009      	add	sp, #36	; 0x24
   212a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212ac:	f8d4 a000 	ldr.w	sl, [r4]
   212b0:	f1ba 0f00 	cmp.w	sl, #0
   212b4:	d0ed      	beq.n	21292 <__gnu_unwind_pr_common+0x42>
   212b6:	9301      	str	r3, [sp, #4]
   212b8:	f000 0308 	and.w	r3, r0, #8
   212bc:	9302      	str	r3, [sp, #8]
   212be:	2e02      	cmp	r6, #2
   212c0:	d04a      	beq.n	21358 <__gnu_unwind_pr_common+0x108>
   212c2:	f8b4 a000 	ldrh.w	sl, [r4]
   212c6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   212ca:	3404      	adds	r4, #4
   212cc:	6cab      	ldr	r3, [r5, #72]	; 0x48
   212ce:	f029 0b01 	bic.w	fp, r9, #1
   212d2:	210f      	movs	r1, #15
   212d4:	4638      	mov	r0, r7
   212d6:	449b      	add	fp, r3
   212d8:	f7ff ff46 	bl	21168 <_Unwind_GetGR>
   212dc:	4583      	cmp	fp, r0
   212de:	d839      	bhi.n	21354 <__gnu_unwind_pr_common+0x104>
   212e0:	f02a 0201 	bic.w	r2, sl, #1
   212e4:	445a      	add	r2, fp
   212e6:	4282      	cmp	r2, r0
   212e8:	bf94      	ite	ls
   212ea:	2200      	movls	r2, #0
   212ec:	2201      	movhi	r2, #1
   212ee:	ea4f 0349 	mov.w	r3, r9, lsl #1
   212f2:	f003 0302 	and.w	r3, r3, #2
   212f6:	f00a 0a01 	and.w	sl, sl, #1
   212fa:	ea43 030a 	orr.w	r3, r3, sl
   212fe:	2b01      	cmp	r3, #1
   21300:	d04b      	beq.n	2139a <__gnu_unwind_pr_common+0x14a>
   21302:	2b02      	cmp	r3, #2
   21304:	d032      	beq.n	2136c <__gnu_unwind_pr_common+0x11c>
   21306:	2b00      	cmp	r3, #0
   21308:	d1cc      	bne.n	212a4 <__gnu_unwind_pr_common+0x54>
   2130a:	f1b8 0f00 	cmp.w	r8, #0
   2130e:	d002      	beq.n	21316 <__gnu_unwind_pr_common+0xc6>
   21310:	2a00      	cmp	r2, #0
   21312:	f040 80cd 	bne.w	214b0 <__gnu_unwind_pr_common+0x260>
   21316:	3404      	adds	r4, #4
   21318:	f8d4 a000 	ldr.w	sl, [r4]
   2131c:	f1ba 0f00 	cmp.w	sl, #0
   21320:	d1cd      	bne.n	212be <__gnu_unwind_pr_common+0x6e>
   21322:	a905      	add	r1, sp, #20
   21324:	4638      	mov	r0, r7
   21326:	f000 fb4d 	bl	219c4 <__gnu_unwind_execute>
   2132a:	2800      	cmp	r0, #0
   2132c:	d1ba      	bne.n	212a4 <__gnu_unwind_pr_common+0x54>
   2132e:	9b01      	ldr	r3, [sp, #4]
   21330:	2b00      	cmp	r3, #0
   21332:	d0b3      	beq.n	2129c <__gnu_unwind_pr_common+0x4c>
   21334:	210f      	movs	r1, #15
   21336:	4638      	mov	r0, r7
   21338:	f7ff ff16 	bl	21168 <_Unwind_GetGR>
   2133c:	210e      	movs	r1, #14
   2133e:	4602      	mov	r2, r0
   21340:	4638      	mov	r0, r7
   21342:	f7ff ff37 	bl	211b4 <_Unwind_SetGR>
   21346:	4638      	mov	r0, r7
   21348:	4a6a      	ldr	r2, [pc, #424]	; (214f4 <__gnu_unwind_pr_common+0x2a4>)
   2134a:	210f      	movs	r1, #15
   2134c:	f7ff ff32 	bl	211b4 <_Unwind_SetGR>
   21350:	2007      	movs	r0, #7
   21352:	e7a8      	b.n	212a6 <__gnu_unwind_pr_common+0x56>
   21354:	2200      	movs	r2, #0
   21356:	e7ca      	b.n	212ee <__gnu_unwind_pr_common+0x9e>
   21358:	f8d4 9004 	ldr.w	r9, [r4, #4]
   2135c:	3408      	adds	r4, #8
   2135e:	e7b5      	b.n	212cc <__gnu_unwind_pr_common+0x7c>
   21360:	021b      	lsls	r3, r3, #8
   21362:	9305      	str	r3, [sp, #20]
   21364:	f88d 601d 	strb.w	r6, [sp, #29]
   21368:	2303      	movs	r3, #3
   2136a:	e788      	b.n	2127e <__gnu_unwind_pr_common+0x2e>
   2136c:	f8d4 9000 	ldr.w	r9, [r4]
   21370:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
   21374:	f1b8 0f00 	cmp.w	r8, #0
   21378:	d146      	bne.n	21408 <__gnu_unwind_pr_common+0x1b8>
   2137a:	b12a      	cbz	r2, 21388 <__gnu_unwind_pr_common+0x138>
   2137c:	9b02      	ldr	r3, [sp, #8]
   2137e:	2b00      	cmp	r3, #0
   21380:	d05b      	beq.n	2143a <__gnu_unwind_pr_common+0x1ea>
   21382:	f1bb 0f00 	cmp.w	fp, #0
   21386:	d073      	beq.n	21470 <__gnu_unwind_pr_common+0x220>
   21388:	f1b9 0f00 	cmp.w	r9, #0
   2138c:	da00      	bge.n	21390 <__gnu_unwind_pr_common+0x140>
   2138e:	3404      	adds	r4, #4
   21390:	f10b 0b01 	add.w	fp, fp, #1
   21394:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   21398:	e7be      	b.n	21318 <__gnu_unwind_pr_common+0xc8>
   2139a:	f1b8 0f00 	cmp.w	r8, #0
   2139e:	d119      	bne.n	213d4 <__gnu_unwind_pr_common+0x184>
   213a0:	b1b2      	cbz	r2, 213d0 <__gnu_unwind_pr_common+0x180>
   213a2:	6861      	ldr	r1, [r4, #4]
   213a4:	6822      	ldr	r2, [r4, #0]
   213a6:	1c88      	adds	r0, r1, #2
   213a8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   213ac:	f43f af7a 	beq.w	212a4 <__gnu_unwind_pr_common+0x54>
   213b0:	f105 0358 	add.w	r3, r5, #88	; 0x58
   213b4:	3101      	adds	r1, #1
   213b6:	9304      	str	r3, [sp, #16]
   213b8:	f000 808e 	beq.w	214d8 <__gnu_unwind_pr_common+0x288>
   213bc:	1d20      	adds	r0, r4, #4
   213be:	f7ff fdbf 	bl	20f40 <_Unwind_decode_typeinfo_ptr.constprop.0>
   213c2:	ab04      	add	r3, sp, #16
   213c4:	4601      	mov	r1, r0
   213c6:	4628      	mov	r0, r5
   213c8:	f7f8 fafe 	bl	199c8 <__cxa_type_match>
   213cc:	2800      	cmp	r0, #0
   213ce:	d159      	bne.n	21484 <__gnu_unwind_pr_common+0x234>
   213d0:	3408      	adds	r4, #8
   213d2:	e7a1      	b.n	21318 <__gnu_unwind_pr_common+0xc8>
   213d4:	210d      	movs	r1, #13
   213d6:	4638      	mov	r0, r7
   213d8:	f8d5 9020 	ldr.w	r9, [r5, #32]
   213dc:	f7ff fec4 	bl	21168 <_Unwind_GetGR>
   213e0:	4581      	cmp	r9, r0
   213e2:	d1f5      	bne.n	213d0 <__gnu_unwind_pr_common+0x180>
   213e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   213e6:	429c      	cmp	r4, r3
   213e8:	d1f2      	bne.n	213d0 <__gnu_unwind_pr_common+0x180>
   213ea:	4620      	mov	r0, r4
   213ec:	f7ff fce4 	bl	20db8 <selfrel_offset31>
   213f0:	210f      	movs	r1, #15
   213f2:	4602      	mov	r2, r0
   213f4:	4638      	mov	r0, r7
   213f6:	f7ff fedd 	bl	211b4 <_Unwind_SetGR>
   213fa:	4638      	mov	r0, r7
   213fc:	462a      	mov	r2, r5
   213fe:	2100      	movs	r1, #0
   21400:	f7ff fed8 	bl	211b4 <_Unwind_SetGR>
   21404:	2007      	movs	r0, #7
   21406:	e74e      	b.n	212a6 <__gnu_unwind_pr_common+0x56>
   21408:	210d      	movs	r1, #13
   2140a:	4638      	mov	r0, r7
   2140c:	f8d5 a020 	ldr.w	sl, [r5, #32]
   21410:	f7ff feaa 	bl	21168 <_Unwind_GetGR>
   21414:	4582      	cmp	sl, r0
   21416:	d1b7      	bne.n	21388 <__gnu_unwind_pr_common+0x138>
   21418:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2141a:	429c      	cmp	r4, r3
   2141c:	d1b4      	bne.n	21388 <__gnu_unwind_pr_common+0x138>
   2141e:	2304      	movs	r3, #4
   21420:	2200      	movs	r2, #0
   21422:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
   21426:	18e3      	adds	r3, r4, r3
   21428:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   2142c:	636b      	str	r3, [r5, #52]	; 0x34
   2142e:	6823      	ldr	r3, [r4, #0]
   21430:	2b00      	cmp	r3, #0
   21432:	db59      	blt.n	214e8 <__gnu_unwind_pr_common+0x298>
   21434:	2301      	movs	r3, #1
   21436:	9301      	str	r3, [sp, #4]
   21438:	e7aa      	b.n	21390 <__gnu_unwind_pr_common+0x140>
   2143a:	4699      	mov	r9, r3
   2143c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   21440:	f8cd 800c 	str.w	r8, [sp, #12]
   21444:	f104 0a04 	add.w	sl, r4, #4
   21448:	46b0      	mov	r8, r6
   2144a:	461e      	mov	r6, r3
   2144c:	e00e      	b.n	2146c <__gnu_unwind_pr_common+0x21c>
   2144e:	4650      	mov	r0, sl
   21450:	9604      	str	r6, [sp, #16]
   21452:	f7ff fd75 	bl	20f40 <_Unwind_decode_typeinfo_ptr.constprop.0>
   21456:	2200      	movs	r2, #0
   21458:	4601      	mov	r1, r0
   2145a:	ab04      	add	r3, sp, #16
   2145c:	4628      	mov	r0, r5
   2145e:	f109 0901 	add.w	r9, r9, #1
   21462:	f10a 0a04 	add.w	sl, sl, #4
   21466:	f7f8 faaf 	bl	199c8 <__cxa_type_match>
   2146a:	b9d8      	cbnz	r0, 214a4 <__gnu_unwind_pr_common+0x254>
   2146c:	45d9      	cmp	r9, fp
   2146e:	d1ee      	bne.n	2144e <__gnu_unwind_pr_common+0x1fe>
   21470:	210d      	movs	r1, #13
   21472:	4638      	mov	r0, r7
   21474:	f7ff fe78 	bl	21168 <_Unwind_GetGR>
   21478:	9b04      	ldr	r3, [sp, #16]
   2147a:	6228      	str	r0, [r5, #32]
   2147c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   21480:	2006      	movs	r0, #6
   21482:	e710      	b.n	212a6 <__gnu_unwind_pr_common+0x56>
   21484:	4681      	mov	r9, r0
   21486:	210d      	movs	r1, #13
   21488:	4638      	mov	r0, r7
   2148a:	f7ff fe6d 	bl	21168 <_Unwind_GetGR>
   2148e:	f1b9 0f02 	cmp.w	r9, #2
   21492:	bf04      	itt	eq
   21494:	462b      	moveq	r3, r5
   21496:	9a04      	ldreq	r2, [sp, #16]
   21498:	6228      	str	r0, [r5, #32]
   2149a:	bf14      	ite	ne
   2149c:	9b04      	ldrne	r3, [sp, #16]
   2149e:	f843 2f2c 	streq.w	r2, [r3, #44]!
   214a2:	e7eb      	b.n	2147c <__gnu_unwind_pr_common+0x22c>
   214a4:	4646      	mov	r6, r8
   214a6:	f8d4 9000 	ldr.w	r9, [r4]
   214aa:	f8dd 800c 	ldr.w	r8, [sp, #12]
   214ae:	e76b      	b.n	21388 <__gnu_unwind_pr_common+0x138>
   214b0:	4620      	mov	r0, r4
   214b2:	f7ff fc81 	bl	20db8 <selfrel_offset31>
   214b6:	3404      	adds	r4, #4
   214b8:	4602      	mov	r2, r0
   214ba:	63ac      	str	r4, [r5, #56]	; 0x38
   214bc:	4628      	mov	r0, r5
   214be:	4614      	mov	r4, r2
   214c0:	f7f8 fada 	bl	19a78 <__cxa_begin_cleanup>
   214c4:	2800      	cmp	r0, #0
   214c6:	f43f aeed 	beq.w	212a4 <__gnu_unwind_pr_common+0x54>
   214ca:	4638      	mov	r0, r7
   214cc:	4622      	mov	r2, r4
   214ce:	210f      	movs	r1, #15
   214d0:	f7ff fe70 	bl	211b4 <_Unwind_SetGR>
   214d4:	2007      	movs	r0, #7
   214d6:	e6e6      	b.n	212a6 <__gnu_unwind_pr_common+0x56>
   214d8:	210d      	movs	r1, #13
   214da:	4638      	mov	r0, r7
   214dc:	9301      	str	r3, [sp, #4]
   214de:	f7ff fe43 	bl	21168 <_Unwind_GetGR>
   214e2:	9b01      	ldr	r3, [sp, #4]
   214e4:	6228      	str	r0, [r5, #32]
   214e6:	e7c9      	b.n	2147c <__gnu_unwind_pr_common+0x22c>
   214e8:	f10b 0001 	add.w	r0, fp, #1
   214ec:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   214f0:	e77c      	b.n	213ec <__gnu_unwind_pr_common+0x19c>
   214f2:	bf00      	nop
   214f4:	000208b9 	.word	0x000208b9

000214f8 <__aeabi_unwind_cpp_pr0>:
   214f8:	2300      	movs	r3, #0
   214fa:	f7ff bea9 	b.w	21250 <__gnu_unwind_pr_common>
   214fe:	bf00      	nop

00021500 <__aeabi_unwind_cpp_pr1>:
   21500:	2301      	movs	r3, #1
   21502:	f7ff bea5 	b.w	21250 <__gnu_unwind_pr_common>
   21506:	bf00      	nop

00021508 <__aeabi_unwind_cpp_pr2>:
   21508:	2302      	movs	r3, #2
   2150a:	f7ff bea1 	b.w	21250 <__gnu_unwind_pr_common>
   2150e:	bf00      	nop

00021510 <_Unwind_VRS_Pop>:
   21510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   21514:	4606      	mov	r6, r0
   21516:	b0c3      	sub	sp, #268	; 0x10c
   21518:	4691      	mov	r9, r2
   2151a:	461c      	mov	r4, r3
   2151c:	2904      	cmp	r1, #4
   2151e:	f200 809b 	bhi.w	21658 <_Unwind_VRS_Pop+0x148>
   21522:	e8df f001 	tbb	[pc, r1]
   21526:	567b      	.short	0x567b
   21528:	2e99      	.short	0x2e99
   2152a:	03          	.byte	0x03
   2152b:	00          	.byte	0x00
   2152c:	2c00      	cmp	r4, #0
   2152e:	f040 8093 	bne.w	21658 <_Unwind_VRS_Pop+0x148>
   21532:	2a10      	cmp	r2, #16
   21534:	f200 8090 	bhi.w	21658 <_Unwind_VRS_Pop+0x148>
   21538:	6803      	ldr	r3, [r0, #0]
   2153a:	06dc      	lsls	r4, r3, #27
   2153c:	f100 80f3 	bmi.w	21726 <_Unwind_VRS_Pop+0x216>
   21540:	af20      	add	r7, sp, #128	; 0x80
   21542:	4638      	mov	r0, r7
   21544:	f000 f9ae 	bl	218a4 <__gnu_Unwind_Save_WMMXC>
   21548:	6bb4      	ldr	r4, [r6, #56]	; 0x38
   2154a:	4639      	mov	r1, r7
   2154c:	2300      	movs	r3, #0
   2154e:	f04f 0c01 	mov.w	ip, #1
   21552:	fa0c f203 	lsl.w	r2, ip, r3
   21556:	ea12 0f09 	tst.w	r2, r9
   2155a:	4620      	mov	r0, r4
   2155c:	f103 0301 	add.w	r3, r3, #1
   21560:	d003      	beq.n	2156a <_Unwind_VRS_Pop+0x5a>
   21562:	f850 2b04 	ldr.w	r2, [r0], #4
   21566:	600a      	str	r2, [r1, #0]
   21568:	4604      	mov	r4, r0
   2156a:	2b04      	cmp	r3, #4
   2156c:	f101 0104 	add.w	r1, r1, #4
   21570:	d1ef      	bne.n	21552 <_Unwind_VRS_Pop+0x42>
   21572:	4638      	mov	r0, r7
   21574:	63b4      	str	r4, [r6, #56]	; 0x38
   21576:	f000 f98b 	bl	21890 <__gnu_Unwind_Restore_WMMXC>
   2157a:	2000      	movs	r0, #0
   2157c:	b043      	add	sp, #268	; 0x10c
   2157e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21582:	2c03      	cmp	r4, #3
   21584:	d168      	bne.n	21658 <_Unwind_VRS_Pop+0x148>
   21586:	b294      	uxth	r4, r2
   21588:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   2158c:	2b10      	cmp	r3, #16
   2158e:	ea4f 4912 	mov.w	r9, r2, lsr #16
   21592:	d861      	bhi.n	21658 <_Unwind_VRS_Pop+0x148>
   21594:	6803      	ldr	r3, [r0, #0]
   21596:	071d      	lsls	r5, r3, #28
   21598:	f100 80cd 	bmi.w	21736 <_Unwind_VRS_Pop+0x226>
   2159c:	af20      	add	r7, sp, #128	; 0x80
   2159e:	4638      	mov	r0, r7
   215a0:	f000 f954 	bl	2184c <__gnu_Unwind_Save_WMMXD>
   215a4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   215a6:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
   215aa:	b154      	cbz	r4, 215c2 <_Unwind_VRS_Pop+0xb2>
   215ac:	460b      	mov	r3, r1
   215ae:	1ad0      	subs	r0, r2, r3
   215b0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   215b4:	00e4      	lsls	r4, r4, #3
   215b6:	581d      	ldr	r5, [r3, r0]
   215b8:	f843 5b04 	str.w	r5, [r3], #4
   215bc:	428b      	cmp	r3, r1
   215be:	d1fa      	bne.n	215b6 <_Unwind_VRS_Pop+0xa6>
   215c0:	4422      	add	r2, r4
   215c2:	4638      	mov	r0, r7
   215c4:	63b2      	str	r2, [r6, #56]	; 0x38
   215c6:	f000 f91f 	bl	21808 <__gnu_Unwind_Restore_WMMXD>
   215ca:	2000      	movs	r0, #0
   215cc:	b043      	add	sp, #268	; 0x10c
   215ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   215d2:	2c01      	cmp	r4, #1
   215d4:	ea4f 4812 	mov.w	r8, r2, lsr #16
   215d8:	fa1f f982 	uxth.w	r9, r2
   215dc:	d038      	beq.n	21650 <_Unwind_VRS_Pop+0x140>
   215de:	2c05      	cmp	r4, #5
   215e0:	d13a      	bne.n	21658 <_Unwind_VRS_Pop+0x148>
   215e2:	eb08 0309 	add.w	r3, r8, r9
   215e6:	2b20      	cmp	r3, #32
   215e8:	d836      	bhi.n	21658 <_Unwind_VRS_Pop+0x148>
   215ea:	f1b8 0f0f 	cmp.w	r8, #15
   215ee:	d976      	bls.n	216de <_Unwind_VRS_Pop+0x1ce>
   215f0:	f1b9 0f00 	cmp.w	r9, #0
   215f4:	f040 8083 	bne.w	216fe <_Unwind_VRS_Pop+0x1ee>
   215f8:	2b0f      	cmp	r3, #15
   215fa:	d80b      	bhi.n	21614 <_Unwind_VRS_Pop+0x104>
   215fc:	6833      	ldr	r3, [r6, #0]
   215fe:	07d8      	lsls	r0, r3, #31
   21600:	d508      	bpl.n	21614 <_Unwind_VRS_Pop+0x104>
   21602:	4630      	mov	r0, r6
   21604:	f023 0301 	bic.w	r3, r3, #1
   21608:	f043 0302 	orr.w	r3, r3, #2
   2160c:	f840 3b48 	str.w	r3, [r0], #72
   21610:	f000 f8ee 	bl	217f0 <__gnu_Unwind_Save_VFP_D>
   21614:	2000      	movs	r0, #0
   21616:	b043      	add	sp, #268	; 0x10c
   21618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2161c:	b9e4      	cbnz	r4, 21658 <_Unwind_VRS_Pop+0x148>
   2161e:	6b87      	ldr	r7, [r0, #56]	; 0x38
   21620:	4623      	mov	r3, r4
   21622:	fa1f fc82 	uxth.w	ip, r2
   21626:	2001      	movs	r0, #1
   21628:	1d34      	adds	r4, r6, #4
   2162a:	fa00 f203 	lsl.w	r2, r0, r3
   2162e:	ea12 0f0c 	tst.w	r2, ip
   21632:	4639      	mov	r1, r7
   21634:	d004      	beq.n	21640 <_Unwind_VRS_Pop+0x130>
   21636:	f851 2b04 	ldr.w	r2, [r1], #4
   2163a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   2163e:	460f      	mov	r7, r1
   21640:	3301      	adds	r3, #1
   21642:	2b10      	cmp	r3, #16
   21644:	d1f1      	bne.n	2162a <_Unwind_VRS_Pop+0x11a>
   21646:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
   2164a:	d1e3      	bne.n	21614 <_Unwind_VRS_Pop+0x104>
   2164c:	63b7      	str	r7, [r6, #56]	; 0x38
   2164e:	e004      	b.n	2165a <_Unwind_VRS_Pop+0x14a>
   21650:	eb08 0309 	add.w	r3, r8, r9
   21654:	2b10      	cmp	r3, #16
   21656:	d903      	bls.n	21660 <_Unwind_VRS_Pop+0x150>
   21658:	2002      	movs	r0, #2
   2165a:	b043      	add	sp, #268	; 0x10c
   2165c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21660:	f1b8 0f0f 	cmp.w	r8, #15
   21664:	d8f8      	bhi.n	21658 <_Unwind_VRS_Pop+0x148>
   21666:	6833      	ldr	r3, [r6, #0]
   21668:	07da      	lsls	r2, r3, #31
   2166a:	d506      	bpl.n	2167a <_Unwind_VRS_Pop+0x16a>
   2166c:	4630      	mov	r0, r6
   2166e:	f023 0303 	bic.w	r3, r3, #3
   21672:	f840 3b48 	str.w	r3, [r0], #72
   21676:	f000 f8b3 	bl	217e0 <__gnu_Unwind_Save_VFP>
   2167a:	af20      	add	r7, sp, #128	; 0x80
   2167c:	4638      	mov	r0, r7
   2167e:	464d      	mov	r5, r9
   21680:	f000 f8ae 	bl	217e0 <__gnu_Unwind_Save_VFP>
   21684:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   21686:	2d00      	cmp	r5, #0
   21688:	d05e      	beq.n	21748 <_Unwind_VRS_Pop+0x238>
   2168a:	f04f 0900 	mov.w	r9, #0
   2168e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
   21692:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   21696:	3904      	subs	r1, #4
   21698:	f852 0b04 	ldr.w	r0, [r2], #4
   2169c:	f841 0f04 	str.w	r0, [r1, #4]!
   216a0:	429a      	cmp	r2, r3
   216a2:	d1f9      	bne.n	21698 <_Unwind_VRS_Pop+0x188>
   216a4:	f1b9 0f00 	cmp.w	r9, #0
   216a8:	d054      	beq.n	21754 <_Unwind_VRS_Pop+0x244>
   216aa:	466f      	mov	r7, sp
   216ac:	4641      	mov	r1, r8
   216ae:	2910      	cmp	r1, #16
   216b0:	bf38      	it	cc
   216b2:	2110      	movcc	r1, #16
   216b4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   216b8:	3984      	subs	r1, #132	; 0x84
   216ba:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
   216be:	f853 5b04 	ldr.w	r5, [r3], #4
   216c2:	f841 5f04 	str.w	r5, [r1, #4]!
   216c6:	429a      	cmp	r2, r3
   216c8:	d1f9      	bne.n	216be <_Unwind_VRS_Pop+0x1ae>
   216ca:	2c01      	cmp	r4, #1
   216cc:	d03b      	beq.n	21746 <_Unwind_VRS_Pop+0x236>
   216ce:	f1b8 0f0f 	cmp.w	r8, #15
   216d2:	63b2      	str	r2, [r6, #56]	; 0x38
   216d4:	d958      	bls.n	21788 <_Unwind_VRS_Pop+0x278>
   216d6:	4638      	mov	r0, r7
   216d8:	f000 f88e 	bl	217f8 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   216dc:	e79a      	b.n	21614 <_Unwind_VRS_Pop+0x104>
   216de:	2b10      	cmp	r3, #16
   216e0:	d954      	bls.n	2178c <_Unwind_VRS_Pop+0x27c>
   216e2:	6832      	ldr	r2, [r6, #0]
   216e4:	07d7      	lsls	r7, r2, #31
   216e6:	f1a3 0910 	sub.w	r9, r3, #16
   216ea:	d509      	bpl.n	21700 <_Unwind_VRS_Pop+0x1f0>
   216ec:	f022 0301 	bic.w	r3, r2, #1
   216f0:	4630      	mov	r0, r6
   216f2:	f043 0302 	orr.w	r3, r3, #2
   216f6:	f840 3b48 	str.w	r3, [r0], #72
   216fa:	f000 f879 	bl	217f0 <__gnu_Unwind_Save_VFP_D>
   216fe:	6832      	ldr	r2, [r6, #0]
   21700:	0753      	lsls	r3, r2, #29
   21702:	d439      	bmi.n	21778 <_Unwind_VRS_Pop+0x268>
   21704:	f1b8 0f0f 	cmp.w	r8, #15
   21708:	d802      	bhi.n	21710 <_Unwind_VRS_Pop+0x200>
   2170a:	a820      	add	r0, sp, #128	; 0x80
   2170c:	f000 f870 	bl	217f0 <__gnu_Unwind_Save_VFP_D>
   21710:	466f      	mov	r7, sp
   21712:	4638      	mov	r0, r7
   21714:	f1c8 0510 	rsb	r5, r8, #16
   21718:	f000 f872 	bl	21800 <__gnu_Unwind_Save_VFP_D_16_to_31>
   2171c:	2d00      	cmp	r5, #0
   2171e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   21720:	dd28      	ble.n	21774 <_Unwind_VRS_Pop+0x264>
   21722:	af20      	add	r7, sp, #128	; 0x80
   21724:	e7b3      	b.n	2168e <_Unwind_VRS_Pop+0x17e>
   21726:	f023 0310 	bic.w	r3, r3, #16
   2172a:	6003      	str	r3, [r0, #0]
   2172c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
   21730:	f000 f8b8 	bl	218a4 <__gnu_Unwind_Save_WMMXC>
   21734:	e704      	b.n	21540 <_Unwind_VRS_Pop+0x30>
   21736:	f023 0308 	bic.w	r3, r3, #8
   2173a:	6003      	str	r3, [r0, #0]
   2173c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   21740:	f000 f884 	bl	2184c <__gnu_Unwind_Save_WMMXD>
   21744:	e72a      	b.n	2159c <_Unwind_VRS_Pop+0x8c>
   21746:	af20      	add	r7, sp, #128	; 0x80
   21748:	3204      	adds	r2, #4
   2174a:	63b2      	str	r2, [r6, #56]	; 0x38
   2174c:	4638      	mov	r0, r7
   2174e:	f000 f843 	bl	217d8 <__gnu_Unwind_Restore_VFP>
   21752:	e75f      	b.n	21614 <_Unwind_VRS_Pop+0x104>
   21754:	2c01      	cmp	r4, #1
   21756:	d0f7      	beq.n	21748 <_Unwind_VRS_Pop+0x238>
   21758:	f1b8 0f0f 	cmp.w	r8, #15
   2175c:	63b2      	str	r2, [r6, #56]	; 0x38
   2175e:	f63f af59 	bhi.w	21614 <_Unwind_VRS_Pop+0x104>
   21762:	4638      	mov	r0, r7
   21764:	f000 f840 	bl	217e8 <__gnu_Unwind_Restore_VFP_D>
   21768:	f1b9 0f00 	cmp.w	r9, #0
   2176c:	f43f af52 	beq.w	21614 <_Unwind_VRS_Pop+0x104>
   21770:	466f      	mov	r7, sp
   21772:	e7b0      	b.n	216d6 <_Unwind_VRS_Pop+0x1c6>
   21774:	4613      	mov	r3, r2
   21776:	e799      	b.n	216ac <_Unwind_VRS_Pop+0x19c>
   21778:	4630      	mov	r0, r6
   2177a:	f022 0204 	bic.w	r2, r2, #4
   2177e:	f840 2bd0 	str.w	r2, [r0], #208
   21782:	f000 f83d 	bl	21800 <__gnu_Unwind_Save_VFP_D_16_to_31>
   21786:	e7bd      	b.n	21704 <_Unwind_VRS_Pop+0x1f4>
   21788:	af20      	add	r7, sp, #128	; 0x80
   2178a:	e7ea      	b.n	21762 <_Unwind_VRS_Pop+0x252>
   2178c:	6833      	ldr	r3, [r6, #0]
   2178e:	07d9      	lsls	r1, r3, #31
   21790:	d508      	bpl.n	217a4 <_Unwind_VRS_Pop+0x294>
   21792:	f023 0301 	bic.w	r3, r3, #1
   21796:	4630      	mov	r0, r6
   21798:	f043 0302 	orr.w	r3, r3, #2
   2179c:	f840 3b48 	str.w	r3, [r0], #72
   217a0:	f000 f826 	bl	217f0 <__gnu_Unwind_Save_VFP_D>
   217a4:	af20      	add	r7, sp, #128	; 0x80
   217a6:	4638      	mov	r0, r7
   217a8:	464d      	mov	r5, r9
   217aa:	f000 f821 	bl	217f0 <__gnu_Unwind_Save_VFP_D>
   217ae:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   217b0:	2d00      	cmp	r5, #0
   217b2:	f47f af6a 	bne.w	2168a <_Unwind_VRS_Pop+0x17a>
   217b6:	4638      	mov	r0, r7
   217b8:	f000 f816 	bl	217e8 <__gnu_Unwind_Restore_VFP_D>
   217bc:	e72a      	b.n	21614 <_Unwind_VRS_Pop+0x104>
   217be:	bf00      	nop

000217c0 <__restore_core_regs>:
   217c0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   217c4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   217c8:	469c      	mov	ip, r3
   217ca:	46a6      	mov	lr, r4
   217cc:	f84c 5d04 	str.w	r5, [ip, #-4]!
   217d0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   217d4:	46e5      	mov	sp, ip
   217d6:	bd00      	pop	{pc}

000217d8 <__gnu_Unwind_Restore_VFP>:
   217d8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   217dc:	4770      	bx	lr
   217de:	bf00      	nop

000217e0 <__gnu_Unwind_Save_VFP>:
   217e0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   217e4:	4770      	bx	lr
   217e6:	bf00      	nop

000217e8 <__gnu_Unwind_Restore_VFP_D>:
   217e8:	ec90 0b20 	vldmia	r0, {d0-d15}
   217ec:	4770      	bx	lr
   217ee:	bf00      	nop

000217f0 <__gnu_Unwind_Save_VFP_D>:
   217f0:	ec80 0b20 	vstmia	r0, {d0-d15}
   217f4:	4770      	bx	lr
   217f6:	bf00      	nop

000217f8 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   217f8:	ecd0 0b20 	vldmia	r0, {d16-d31}
   217fc:	4770      	bx	lr
   217fe:	bf00      	nop

00021800 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   21800:	ecc0 0b20 	vstmia	r0, {d16-d31}
   21804:	4770      	bx	lr
   21806:	bf00      	nop

00021808 <__gnu_Unwind_Restore_WMMXD>:
   21808:	ecf0 0102 	ldfe	f0, [r0], #8
   2180c:	ecf0 1102 	ldfe	f1, [r0], #8
   21810:	ecf0 2102 	ldfe	f2, [r0], #8
   21814:	ecf0 3102 	ldfe	f3, [r0], #8
   21818:	ecf0 4102 	ldfe	f4, [r0], #8
   2181c:	ecf0 5102 	ldfe	f5, [r0], #8
   21820:	ecf0 6102 	ldfe	f6, [r0], #8
   21824:	ecf0 7102 	ldfe	f7, [r0], #8
   21828:	ecf0 8102 	ldfp	f0, [r0], #8
   2182c:	ecf0 9102 	ldfp	f1, [r0], #8
   21830:	ecf0 a102 	ldfp	f2, [r0], #8
   21834:	ecf0 b102 	ldfp	f3, [r0], #8
   21838:	ecf0 c102 	ldfp	f4, [r0], #8
   2183c:	ecf0 d102 	ldfp	f5, [r0], #8
   21840:	ecf0 e102 	ldfp	f6, [r0], #8
   21844:	ecf0 f102 	ldfp	f7, [r0], #8
   21848:	4770      	bx	lr
   2184a:	bf00      	nop

0002184c <__gnu_Unwind_Save_WMMXD>:
   2184c:	ece0 0102 	stfe	f0, [r0], #8
   21850:	ece0 1102 	stfe	f1, [r0], #8
   21854:	ece0 2102 	stfe	f2, [r0], #8
   21858:	ece0 3102 	stfe	f3, [r0], #8
   2185c:	ece0 4102 	stfe	f4, [r0], #8
   21860:	ece0 5102 	stfe	f5, [r0], #8
   21864:	ece0 6102 	stfe	f6, [r0], #8
   21868:	ece0 7102 	stfe	f7, [r0], #8
   2186c:	ece0 8102 	stfp	f0, [r0], #8
   21870:	ece0 9102 	stfp	f1, [r0], #8
   21874:	ece0 a102 	stfp	f2, [r0], #8
   21878:	ece0 b102 	stfp	f3, [r0], #8
   2187c:	ece0 c102 	stfp	f4, [r0], #8
   21880:	ece0 d102 	stfp	f5, [r0], #8
   21884:	ece0 e102 	stfp	f6, [r0], #8
   21888:	ece0 f102 	stfp	f7, [r0], #8
   2188c:	4770      	bx	lr
   2188e:	bf00      	nop

00021890 <__gnu_Unwind_Restore_WMMXC>:
   21890:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   21894:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   21898:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   2189c:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   218a0:	4770      	bx	lr
   218a2:	bf00      	nop

000218a4 <__gnu_Unwind_Save_WMMXC>:
   218a4:	fca0 8101 	stc2	1, cr8, [r0], #4
   218a8:	fca0 9101 	stc2	1, cr9, [r0], #4
   218ac:	fca0 a101 	stc2	1, cr10, [r0], #4
   218b0:	fca0 b101 	stc2	1, cr11, [r0], #4
   218b4:	4770      	bx	lr
   218b6:	bf00      	nop

000218b8 <_Unwind_RaiseException>:
   218b8:	46ec      	mov	ip, sp
   218ba:	b500      	push	{lr}
   218bc:	e92d 5000 	stmdb	sp!, {ip, lr}
   218c0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   218c4:	f04f 0300 	mov.w	r3, #0
   218c8:	e92d 000c 	stmdb	sp!, {r2, r3}
   218cc:	a901      	add	r1, sp, #4
   218ce:	f7ff fbc3 	bl	21058 <__gnu_Unwind_RaiseException>
   218d2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   218d6:	b012      	add	sp, #72	; 0x48
   218d8:	4770      	bx	lr
   218da:	bf00      	nop

000218dc <_Unwind_Resume>:
   218dc:	46ec      	mov	ip, sp
   218de:	b500      	push	{lr}
   218e0:	e92d 5000 	stmdb	sp!, {ip, lr}
   218e4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   218e8:	f04f 0300 	mov.w	r3, #0
   218ec:	e92d 000c 	stmdb	sp!, {r2, r3}
   218f0:	a901      	add	r1, sp, #4
   218f2:	f7ff fbed 	bl	210d0 <__gnu_Unwind_Resume>
   218f6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   218fa:	b012      	add	sp, #72	; 0x48
   218fc:	4770      	bx	lr
   218fe:	bf00      	nop

00021900 <_Unwind_Resume_or_Rethrow>:
   21900:	46ec      	mov	ip, sp
   21902:	b500      	push	{lr}
   21904:	e92d 5000 	stmdb	sp!, {ip, lr}
   21908:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   2190c:	f04f 0300 	mov.w	r3, #0
   21910:	e92d 000c 	stmdb	sp!, {r2, r3}
   21914:	a901      	add	r1, sp, #4
   21916:	f7ff fbfd 	bl	21114 <__gnu_Unwind_Resume_or_Rethrow>
   2191a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   2191e:	b012      	add	sp, #72	; 0x48
   21920:	4770      	bx	lr
   21922:	bf00      	nop

00021924 <_Unwind_ForcedUnwind>:
   21924:	46ec      	mov	ip, sp
   21926:	b500      	push	{lr}
   21928:	e92d 5000 	stmdb	sp!, {ip, lr}
   2192c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21930:	f04f 0300 	mov.w	r3, #0
   21934:	e92d 000c 	stmdb	sp!, {r2, r3}
   21938:	ab01      	add	r3, sp, #4
   2193a:	f7ff fbc1 	bl	210c0 <__gnu_Unwind_ForcedUnwind>
   2193e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21942:	b012      	add	sp, #72	; 0x48
   21944:	4770      	bx	lr
   21946:	bf00      	nop

00021948 <_Unwind_Backtrace>:
   21948:	46ec      	mov	ip, sp
   2194a:	b500      	push	{lr}
   2194c:	e92d 5000 	stmdb	sp!, {ip, lr}
   21950:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21954:	f04f 0300 	mov.w	r3, #0
   21958:	e92d 000c 	stmdb	sp!, {r2, r3}
   2195c:	aa01      	add	r2, sp, #4
   2195e:	f7ff fc35 	bl	211cc <__gnu_Unwind_Backtrace>
   21962:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   21966:	b012      	add	sp, #72	; 0x48
   21968:	4770      	bx	lr
   2196a:	bf00      	nop

0002196c <next_unwind_byte>:
   2196c:	7a02      	ldrb	r2, [r0, #8]
   2196e:	4603      	mov	r3, r0
   21970:	b97a      	cbnz	r2, 21992 <next_unwind_byte+0x26>
   21972:	7a42      	ldrb	r2, [r0, #9]
   21974:	b1a2      	cbz	r2, 219a0 <next_unwind_byte+0x34>
   21976:	6841      	ldr	r1, [r0, #4]
   21978:	3a01      	subs	r2, #1
   2197a:	b410      	push	{r4}
   2197c:	7242      	strb	r2, [r0, #9]
   2197e:	6808      	ldr	r0, [r1, #0]
   21980:	2203      	movs	r2, #3
   21982:	1d0c      	adds	r4, r1, #4
   21984:	721a      	strb	r2, [r3, #8]
   21986:	0202      	lsls	r2, r0, #8
   21988:	605c      	str	r4, [r3, #4]
   2198a:	0e00      	lsrs	r0, r0, #24
   2198c:	bc10      	pop	{r4}
   2198e:	601a      	str	r2, [r3, #0]
   21990:	4770      	bx	lr
   21992:	6800      	ldr	r0, [r0, #0]
   21994:	3a01      	subs	r2, #1
   21996:	721a      	strb	r2, [r3, #8]
   21998:	0202      	lsls	r2, r0, #8
   2199a:	601a      	str	r2, [r3, #0]
   2199c:	0e00      	lsrs	r0, r0, #24
   2199e:	4770      	bx	lr
   219a0:	20b0      	movs	r0, #176	; 0xb0
   219a2:	4770      	bx	lr

000219a4 <_Unwind_GetGR.constprop.0>:
   219a4:	b500      	push	{lr}
   219a6:	b085      	sub	sp, #20
   219a8:	2300      	movs	r3, #0
   219aa:	aa03      	add	r2, sp, #12
   219ac:	9200      	str	r2, [sp, #0]
   219ae:	4619      	mov	r1, r3
   219b0:	220c      	movs	r2, #12
   219b2:	f7ff fbc1 	bl	21138 <_Unwind_VRS_Get>
   219b6:	9803      	ldr	r0, [sp, #12]
   219b8:	b005      	add	sp, #20
   219ba:	f85d fb04 	ldr.w	pc, [sp], #4
   219be:	bf00      	nop

000219c0 <unwind_UCB_from_context>:
   219c0:	f7ff bff0 	b.w	219a4 <_Unwind_GetGR.constprop.0>

000219c4 <__gnu_unwind_execute>:
   219c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   219c8:	b085      	sub	sp, #20
   219ca:	4607      	mov	r7, r0
   219cc:	460e      	mov	r6, r1
   219ce:	f04f 0800 	mov.w	r8, #0
   219d2:	ad03      	add	r5, sp, #12
   219d4:	4630      	mov	r0, r6
   219d6:	f7ff ffc9 	bl	2196c <next_unwind_byte>
   219da:	28b0      	cmp	r0, #176	; 0xb0
   219dc:	4604      	mov	r4, r0
   219de:	f000 80cb 	beq.w	21b78 <__gnu_unwind_execute+0x1b4>
   219e2:	0603      	lsls	r3, r0, #24
   219e4:	d540      	bpl.n	21a68 <__gnu_unwind_execute+0xa4>
   219e6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   219ea:	2b80      	cmp	r3, #128	; 0x80
   219ec:	d056      	beq.n	21a9c <__gnu_unwind_execute+0xd8>
   219ee:	2bb0      	cmp	r3, #176	; 0xb0
   219f0:	d07d      	beq.n	21aee <__gnu_unwind_execute+0x12a>
   219f2:	d81c      	bhi.n	21a2e <__gnu_unwind_execute+0x6a>
   219f4:	2b90      	cmp	r3, #144	; 0x90
   219f6:	f000 8093 	beq.w	21b20 <__gnu_unwind_execute+0x15c>
   219fa:	2ba0      	cmp	r3, #160	; 0xa0
   219fc:	d113      	bne.n	21a26 <__gnu_unwind_execute+0x62>
   219fe:	43c3      	mvns	r3, r0
   21a00:	f003 0307 	and.w	r3, r3, #7
   21a04:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   21a08:	411a      	asrs	r2, r3
   21a0a:	0701      	lsls	r1, r0, #28
   21a0c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   21a10:	f04f 0300 	mov.w	r3, #0
   21a14:	bf48      	it	mi
   21a16:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   21a1a:	4619      	mov	r1, r3
   21a1c:	4638      	mov	r0, r7
   21a1e:	f7ff fd77 	bl	21510 <_Unwind_VRS_Pop>
   21a22:	2800      	cmp	r0, #0
   21a24:	d0d6      	beq.n	219d4 <__gnu_unwind_execute+0x10>
   21a26:	2009      	movs	r0, #9
   21a28:	b005      	add	sp, #20
   21a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   21a2e:	2bc0      	cmp	r3, #192	; 0xc0
   21a30:	d14b      	bne.n	21aca <__gnu_unwind_execute+0x106>
   21a32:	28c6      	cmp	r0, #198	; 0xc6
   21a34:	f000 8089 	beq.w	21b4a <__gnu_unwind_execute+0x186>
   21a38:	28c7      	cmp	r0, #199	; 0xc7
   21a3a:	f000 80a2 	beq.w	21b82 <__gnu_unwind_execute+0x1be>
   21a3e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   21a42:	2bc0      	cmp	r3, #192	; 0xc0
   21a44:	f000 80bc 	beq.w	21bc0 <__gnu_unwind_execute+0x1fc>
   21a48:	28c8      	cmp	r0, #200	; 0xc8
   21a4a:	f000 80bf 	beq.w	21bcc <__gnu_unwind_execute+0x208>
   21a4e:	28c9      	cmp	r0, #201	; 0xc9
   21a50:	d1e9      	bne.n	21a26 <__gnu_unwind_execute+0x62>
   21a52:	4630      	mov	r0, r6
   21a54:	f7ff ff8a 	bl	2196c <next_unwind_byte>
   21a58:	0302      	lsls	r2, r0, #12
   21a5a:	f000 000f 	and.w	r0, r0, #15
   21a5e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   21a62:	3001      	adds	r0, #1
   21a64:	4302      	orrs	r2, r0
   21a66:	e039      	b.n	21adc <__gnu_unwind_execute+0x118>
   21a68:	0083      	lsls	r3, r0, #2
   21a6a:	b2db      	uxtb	r3, r3
   21a6c:	f103 0904 	add.w	r9, r3, #4
   21a70:	2300      	movs	r3, #0
   21a72:	4619      	mov	r1, r3
   21a74:	9500      	str	r5, [sp, #0]
   21a76:	220d      	movs	r2, #13
   21a78:	4638      	mov	r0, r7
   21a7a:	f7ff fb5d 	bl	21138 <_Unwind_VRS_Get>
   21a7e:	9b03      	ldr	r3, [sp, #12]
   21a80:	0660      	lsls	r0, r4, #25
   21a82:	bf4c      	ite	mi
   21a84:	eba3 0309 	submi.w	r3, r3, r9
   21a88:	444b      	addpl	r3, r9
   21a8a:	9303      	str	r3, [sp, #12]
   21a8c:	2300      	movs	r3, #0
   21a8e:	9500      	str	r5, [sp, #0]
   21a90:	220d      	movs	r2, #13
   21a92:	4619      	mov	r1, r3
   21a94:	4638      	mov	r0, r7
   21a96:	f7ff fb75 	bl	21184 <_Unwind_VRS_Set>
   21a9a:	e79b      	b.n	219d4 <__gnu_unwind_execute+0x10>
   21a9c:	0204      	lsls	r4, r0, #8
   21a9e:	4630      	mov	r0, r6
   21aa0:	f7ff ff64 	bl	2196c <next_unwind_byte>
   21aa4:	4320      	orrs	r0, r4
   21aa6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   21aaa:	d0bc      	beq.n	21a26 <__gnu_unwind_execute+0x62>
   21aac:	0104      	lsls	r4, r0, #4
   21aae:	2300      	movs	r3, #0
   21ab0:	b2a2      	uxth	r2, r4
   21ab2:	4619      	mov	r1, r3
   21ab4:	4638      	mov	r0, r7
   21ab6:	f7ff fd2b 	bl	21510 <_Unwind_VRS_Pop>
   21aba:	2800      	cmp	r0, #0
   21abc:	d1b3      	bne.n	21a26 <__gnu_unwind_execute+0x62>
   21abe:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   21ac2:	bf18      	it	ne
   21ac4:	f04f 0801 	movne.w	r8, #1
   21ac8:	e784      	b.n	219d4 <__gnu_unwind_execute+0x10>
   21aca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   21ace:	2bd0      	cmp	r3, #208	; 0xd0
   21ad0:	d1a9      	bne.n	21a26 <__gnu_unwind_execute+0x62>
   21ad2:	f000 0207 	and.w	r2, r0, #7
   21ad6:	3201      	adds	r2, #1
   21ad8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   21adc:	2305      	movs	r3, #5
   21ade:	2101      	movs	r1, #1
   21ae0:	4638      	mov	r0, r7
   21ae2:	f7ff fd15 	bl	21510 <_Unwind_VRS_Pop>
   21ae6:	2800      	cmp	r0, #0
   21ae8:	f43f af74 	beq.w	219d4 <__gnu_unwind_execute+0x10>
   21aec:	e79b      	b.n	21a26 <__gnu_unwind_execute+0x62>
   21aee:	28b1      	cmp	r0, #177	; 0xb1
   21af0:	d037      	beq.n	21b62 <__gnu_unwind_execute+0x19e>
   21af2:	28b2      	cmp	r0, #178	; 0xb2
   21af4:	f000 8087 	beq.w	21c06 <__gnu_unwind_execute+0x242>
   21af8:	28b3      	cmp	r0, #179	; 0xb3
   21afa:	d056      	beq.n	21baa <__gnu_unwind_execute+0x1e6>
   21afc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   21b00:	2bb4      	cmp	r3, #180	; 0xb4
   21b02:	d090      	beq.n	21a26 <__gnu_unwind_execute+0x62>
   21b04:	f000 0207 	and.w	r2, r0, #7
   21b08:	3201      	adds	r2, #1
   21b0a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   21b0e:	2301      	movs	r3, #1
   21b10:	4619      	mov	r1, r3
   21b12:	4638      	mov	r0, r7
   21b14:	f7ff fcfc 	bl	21510 <_Unwind_VRS_Pop>
   21b18:	2800      	cmp	r0, #0
   21b1a:	f43f af5b 	beq.w	219d4 <__gnu_unwind_execute+0x10>
   21b1e:	e782      	b.n	21a26 <__gnu_unwind_execute+0x62>
   21b20:	f000 030d 	and.w	r3, r0, #13
   21b24:	2b0d      	cmp	r3, #13
   21b26:	f43f af7e 	beq.w	21a26 <__gnu_unwind_execute+0x62>
   21b2a:	2300      	movs	r3, #0
   21b2c:	f000 020f 	and.w	r2, r0, #15
   21b30:	4619      	mov	r1, r3
   21b32:	9500      	str	r5, [sp, #0]
   21b34:	4638      	mov	r0, r7
   21b36:	f7ff faff 	bl	21138 <_Unwind_VRS_Get>
   21b3a:	2300      	movs	r3, #0
   21b3c:	9500      	str	r5, [sp, #0]
   21b3e:	220d      	movs	r2, #13
   21b40:	4619      	mov	r1, r3
   21b42:	4638      	mov	r0, r7
   21b44:	f7ff fb1e 	bl	21184 <_Unwind_VRS_Set>
   21b48:	e744      	b.n	219d4 <__gnu_unwind_execute+0x10>
   21b4a:	4630      	mov	r0, r6
   21b4c:	f7ff ff0e 	bl	2196c <next_unwind_byte>
   21b50:	0302      	lsls	r2, r0, #12
   21b52:	f000 000f 	and.w	r0, r0, #15
   21b56:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   21b5a:	3001      	adds	r0, #1
   21b5c:	4302      	orrs	r2, r0
   21b5e:	2303      	movs	r3, #3
   21b60:	e7d6      	b.n	21b10 <__gnu_unwind_execute+0x14c>
   21b62:	4630      	mov	r0, r6
   21b64:	f7ff ff02 	bl	2196c <next_unwind_byte>
   21b68:	4602      	mov	r2, r0
   21b6a:	2800      	cmp	r0, #0
   21b6c:	f43f af5b 	beq.w	21a26 <__gnu_unwind_execute+0x62>
   21b70:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   21b74:	d0cc      	beq.n	21b10 <__gnu_unwind_execute+0x14c>
   21b76:	e756      	b.n	21a26 <__gnu_unwind_execute+0x62>
   21b78:	f1b8 0f00 	cmp.w	r8, #0
   21b7c:	d032      	beq.n	21be4 <__gnu_unwind_execute+0x220>
   21b7e:	2000      	movs	r0, #0
   21b80:	e752      	b.n	21a28 <__gnu_unwind_execute+0x64>
   21b82:	4630      	mov	r0, r6
   21b84:	f7ff fef2 	bl	2196c <next_unwind_byte>
   21b88:	4602      	mov	r2, r0
   21b8a:	2800      	cmp	r0, #0
   21b8c:	f43f af4b 	beq.w	21a26 <__gnu_unwind_execute+0x62>
   21b90:	f010 0ff0 	tst.w	r0, #240	; 0xf0
   21b94:	f47f af47 	bne.w	21a26 <__gnu_unwind_execute+0x62>
   21b98:	2300      	movs	r3, #0
   21b9a:	2104      	movs	r1, #4
   21b9c:	4638      	mov	r0, r7
   21b9e:	f7ff fcb7 	bl	21510 <_Unwind_VRS_Pop>
   21ba2:	2800      	cmp	r0, #0
   21ba4:	f43f af16 	beq.w	219d4 <__gnu_unwind_execute+0x10>
   21ba8:	e73d      	b.n	21a26 <__gnu_unwind_execute+0x62>
   21baa:	4630      	mov	r0, r6
   21bac:	f7ff fede 	bl	2196c <next_unwind_byte>
   21bb0:	0302      	lsls	r2, r0, #12
   21bb2:	f000 000f 	and.w	r0, r0, #15
   21bb6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   21bba:	3001      	adds	r0, #1
   21bbc:	4302      	orrs	r2, r0
   21bbe:	e7a6      	b.n	21b0e <__gnu_unwind_execute+0x14a>
   21bc0:	f000 020f 	and.w	r2, r0, #15
   21bc4:	3201      	adds	r2, #1
   21bc6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   21bca:	e7c8      	b.n	21b5e <__gnu_unwind_execute+0x19a>
   21bcc:	4630      	mov	r0, r6
   21bce:	f7ff fecd 	bl	2196c <next_unwind_byte>
   21bd2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   21bd6:	f000 030f 	and.w	r3, r0, #15
   21bda:	3210      	adds	r2, #16
   21bdc:	3301      	adds	r3, #1
   21bde:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   21be2:	e77b      	b.n	21adc <__gnu_unwind_execute+0x118>
   21be4:	ac03      	add	r4, sp, #12
   21be6:	4643      	mov	r3, r8
   21be8:	220e      	movs	r2, #14
   21bea:	4641      	mov	r1, r8
   21bec:	9400      	str	r4, [sp, #0]
   21bee:	4638      	mov	r0, r7
   21bf0:	f7ff faa2 	bl	21138 <_Unwind_VRS_Get>
   21bf4:	9400      	str	r4, [sp, #0]
   21bf6:	4643      	mov	r3, r8
   21bf8:	220f      	movs	r2, #15
   21bfa:	4641      	mov	r1, r8
   21bfc:	4638      	mov	r0, r7
   21bfe:	f7ff fac1 	bl	21184 <_Unwind_VRS_Set>
   21c02:	4640      	mov	r0, r8
   21c04:	e710      	b.n	21a28 <__gnu_unwind_execute+0x64>
   21c06:	2300      	movs	r3, #0
   21c08:	220d      	movs	r2, #13
   21c0a:	4619      	mov	r1, r3
   21c0c:	9500      	str	r5, [sp, #0]
   21c0e:	4638      	mov	r0, r7
   21c10:	f7ff fa92 	bl	21138 <_Unwind_VRS_Get>
   21c14:	4630      	mov	r0, r6
   21c16:	f7ff fea9 	bl	2196c <next_unwind_byte>
   21c1a:	0602      	lsls	r2, r0, #24
   21c1c:	9c03      	ldr	r4, [sp, #12]
   21c1e:	f04f 0902 	mov.w	r9, #2
   21c22:	d50c      	bpl.n	21c3e <__gnu_unwind_execute+0x27a>
   21c24:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   21c28:	fa00 f009 	lsl.w	r0, r0, r9
   21c2c:	4404      	add	r4, r0
   21c2e:	4630      	mov	r0, r6
   21c30:	9403      	str	r4, [sp, #12]
   21c32:	f7ff fe9b 	bl	2196c <next_unwind_byte>
   21c36:	0603      	lsls	r3, r0, #24
   21c38:	f109 0907 	add.w	r9, r9, #7
   21c3c:	d4f2      	bmi.n	21c24 <__gnu_unwind_execute+0x260>
   21c3e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   21c42:	fa03 f309 	lsl.w	r3, r3, r9
   21c46:	f504 7401 	add.w	r4, r4, #516	; 0x204
   21c4a:	4423      	add	r3, r4
   21c4c:	e71d      	b.n	21a8a <__gnu_unwind_execute+0xc6>
   21c4e:	bf00      	nop

00021c50 <__gnu_unwind_frame>:
   21c50:	b510      	push	{r4, lr}
   21c52:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   21c54:	6853      	ldr	r3, [r2, #4]
   21c56:	b084      	sub	sp, #16
   21c58:	f04f 0c03 	mov.w	ip, #3
   21c5c:	3208      	adds	r2, #8
   21c5e:	021c      	lsls	r4, r3, #8
   21c60:	4608      	mov	r0, r1
   21c62:	0e1b      	lsrs	r3, r3, #24
   21c64:	a901      	add	r1, sp, #4
   21c66:	9401      	str	r4, [sp, #4]
   21c68:	9202      	str	r2, [sp, #8]
   21c6a:	f88d c00c 	strb.w	ip, [sp, #12]
   21c6e:	f88d 300d 	strb.w	r3, [sp, #13]
   21c72:	f7ff fea7 	bl	219c4 <__gnu_unwind_execute>
   21c76:	b004      	add	sp, #16
   21c78:	bd10      	pop	{r4, pc}
   21c7a:	bf00      	nop

00021c7c <_Unwind_GetRegionStart>:
   21c7c:	b508      	push	{r3, lr}
   21c7e:	f7ff fe9f 	bl	219c0 <unwind_UCB_from_context>
   21c82:	6c80      	ldr	r0, [r0, #72]	; 0x48
   21c84:	bd08      	pop	{r3, pc}
   21c86:	bf00      	nop

00021c88 <_Unwind_GetLanguageSpecificData>:
   21c88:	b508      	push	{r3, lr}
   21c8a:	f7ff fe99 	bl	219c0 <unwind_UCB_from_context>
   21c8e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   21c90:	79c3      	ldrb	r3, [r0, #7]
   21c92:	3302      	adds	r3, #2
   21c94:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   21c98:	bd08      	pop	{r3, pc}
   21c9a:	bf00      	nop

00021c9c <_Unwind_GetDataRelBase>:
   21c9c:	b508      	push	{r3, lr}
   21c9e:	f7f5 ff5c 	bl	17b5a <abort>

00021ca2 <_Unwind_GetTextRelBase>:
   21ca2:	b508      	push	{r3, lr}
   21ca4:	f7ff fffa 	bl	21c9c <_Unwind_GetDataRelBase>

00021ca8 <__aeabi_idiv0>:
   21ca8:	4770      	bx	lr
   21caa:	bf00      	nop

00021cac <itoa>:
   21cac:	1e93      	subs	r3, r2, #2
   21cae:	2b22      	cmp	r3, #34	; 0x22
   21cb0:	b510      	push	{r4, lr}
   21cb2:	460c      	mov	r4, r1
   21cb4:	d80c      	bhi.n	21cd0 <itoa+0x24>
   21cb6:	2a0a      	cmp	r2, #10
   21cb8:	d003      	beq.n	21cc2 <itoa+0x16>
   21cba:	f000 fcd1 	bl	22660 <__utoa>
   21cbe:	4620      	mov	r0, r4
   21cc0:	bd10      	pop	{r4, pc}
   21cc2:	2800      	cmp	r0, #0
   21cc4:	daf9      	bge.n	21cba <itoa+0xe>
   21cc6:	232d      	movs	r3, #45	; 0x2d
   21cc8:	f801 3b01 	strb.w	r3, [r1], #1
   21ccc:	4240      	negs	r0, r0
   21cce:	e7f4      	b.n	21cba <itoa+0xe>
   21cd0:	2300      	movs	r3, #0
   21cd2:	700b      	strb	r3, [r1, #0]
   21cd4:	4618      	mov	r0, r3
   21cd6:	bd10      	pop	{r4, pc}

00021cd8 <malloc>:
   21cd8:	4b02      	ldr	r3, [pc, #8]	; (21ce4 <malloc+0xc>)
   21cda:	4601      	mov	r1, r0
   21cdc:	6818      	ldr	r0, [r3, #0]
   21cde:	f000 b80b 	b.w	21cf8 <_malloc_r>
   21ce2:	bf00      	nop
   21ce4:	200057e4 	.word	0x200057e4

00021ce8 <free>:
   21ce8:	4b02      	ldr	r3, [pc, #8]	; (21cf4 <free+0xc>)
   21cea:	4601      	mov	r1, r0
   21cec:	6818      	ldr	r0, [r3, #0]
   21cee:	f001 be49 	b.w	23984 <_free_r>
   21cf2:	bf00      	nop
   21cf4:	200057e4 	.word	0x200057e4

00021cf8 <_malloc_r>:
   21cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cfc:	f101 060b 	add.w	r6, r1, #11
   21d00:	2e16      	cmp	r6, #22
   21d02:	b083      	sub	sp, #12
   21d04:	4604      	mov	r4, r0
   21d06:	d824      	bhi.n	21d52 <_malloc_r+0x5a>
   21d08:	2910      	cmp	r1, #16
   21d0a:	f200 80ba 	bhi.w	21e82 <_malloc_r+0x18a>
   21d0e:	f000 faa3 	bl	22258 <__malloc_lock>
   21d12:	2610      	movs	r6, #16
   21d14:	2218      	movs	r2, #24
   21d16:	2002      	movs	r0, #2
   21d18:	4fb5      	ldr	r7, [pc, #724]	; (21ff0 <_malloc_r+0x2f8>)
   21d1a:	443a      	add	r2, r7
   21d1c:	f1a2 0108 	sub.w	r1, r2, #8
   21d20:	6853      	ldr	r3, [r2, #4]
   21d22:	428b      	cmp	r3, r1
   21d24:	f000 80ba 	beq.w	21e9c <_malloc_r+0x1a4>
   21d28:	685a      	ldr	r2, [r3, #4]
   21d2a:	68d9      	ldr	r1, [r3, #12]
   21d2c:	f022 0203 	bic.w	r2, r2, #3
   21d30:	441a      	add	r2, r3
   21d32:	689d      	ldr	r5, [r3, #8]
   21d34:	60e9      	str	r1, [r5, #12]
   21d36:	608d      	str	r5, [r1, #8]
   21d38:	6851      	ldr	r1, [r2, #4]
   21d3a:	f041 0101 	orr.w	r1, r1, #1
   21d3e:	4620      	mov	r0, r4
   21d40:	6051      	str	r1, [r2, #4]
   21d42:	f103 0508 	add.w	r5, r3, #8
   21d46:	f000 fa8d 	bl	22264 <__malloc_unlock>
   21d4a:	4628      	mov	r0, r5
   21d4c:	b003      	add	sp, #12
   21d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d52:	f036 0607 	bics.w	r6, r6, #7
   21d56:	f100 8094 	bmi.w	21e82 <_malloc_r+0x18a>
   21d5a:	42b1      	cmp	r1, r6
   21d5c:	f200 8091 	bhi.w	21e82 <_malloc_r+0x18a>
   21d60:	f000 fa7a 	bl	22258 <__malloc_lock>
   21d64:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   21d68:	f0c0 819a 	bcc.w	220a0 <_malloc_r+0x3a8>
   21d6c:	0a73      	lsrs	r3, r6, #9
   21d6e:	f000 808f 	beq.w	21e90 <_malloc_r+0x198>
   21d72:	2b04      	cmp	r3, #4
   21d74:	f200 816f 	bhi.w	22056 <_malloc_r+0x35e>
   21d78:	09b3      	lsrs	r3, r6, #6
   21d7a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   21d7e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   21d82:	00c3      	lsls	r3, r0, #3
   21d84:	4f9a      	ldr	r7, [pc, #616]	; (21ff0 <_malloc_r+0x2f8>)
   21d86:	443b      	add	r3, r7
   21d88:	f1a3 0508 	sub.w	r5, r3, #8
   21d8c:	685b      	ldr	r3, [r3, #4]
   21d8e:	429d      	cmp	r5, r3
   21d90:	d106      	bne.n	21da0 <_malloc_r+0xa8>
   21d92:	e00c      	b.n	21dae <_malloc_r+0xb6>
   21d94:	2900      	cmp	r1, #0
   21d96:	f280 8127 	bge.w	21fe8 <_malloc_r+0x2f0>
   21d9a:	68db      	ldr	r3, [r3, #12]
   21d9c:	429d      	cmp	r5, r3
   21d9e:	d006      	beq.n	21dae <_malloc_r+0xb6>
   21da0:	685a      	ldr	r2, [r3, #4]
   21da2:	f022 0203 	bic.w	r2, r2, #3
   21da6:	1b91      	subs	r1, r2, r6
   21da8:	290f      	cmp	r1, #15
   21daa:	ddf3      	ble.n	21d94 <_malloc_r+0x9c>
   21dac:	4660      	mov	r0, ip
   21dae:	693d      	ldr	r5, [r7, #16]
   21db0:	f8df c250 	ldr.w	ip, [pc, #592]	; 22004 <_malloc_r+0x30c>
   21db4:	4565      	cmp	r5, ip
   21db6:	d07c      	beq.n	21eb2 <_malloc_r+0x1ba>
   21db8:	686a      	ldr	r2, [r5, #4]
   21dba:	f022 0203 	bic.w	r2, r2, #3
   21dbe:	1b93      	subs	r3, r2, r6
   21dc0:	2b0f      	cmp	r3, #15
   21dc2:	f300 817b 	bgt.w	220bc <_malloc_r+0x3c4>
   21dc6:	2b00      	cmp	r3, #0
   21dc8:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   21dcc:	f280 816c 	bge.w	220a8 <_malloc_r+0x3b0>
   21dd0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   21dd4:	f080 811a 	bcs.w	2200c <_malloc_r+0x314>
   21dd8:	08d3      	lsrs	r3, r2, #3
   21dda:	6879      	ldr	r1, [r7, #4]
   21ddc:	3301      	adds	r3, #1
   21dde:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   21de2:	2201      	movs	r2, #1
   21de4:	fa02 f20e 	lsl.w	r2, r2, lr
   21de8:	430a      	orrs	r2, r1
   21dea:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   21dee:	f8c5 e008 	str.w	lr, [r5, #8]
   21df2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   21df6:	3908      	subs	r1, #8
   21df8:	60e9      	str	r1, [r5, #12]
   21dfa:	607a      	str	r2, [r7, #4]
   21dfc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   21e00:	f8ce 500c 	str.w	r5, [lr, #12]
   21e04:	1083      	asrs	r3, r0, #2
   21e06:	2101      	movs	r1, #1
   21e08:	4099      	lsls	r1, r3
   21e0a:	4291      	cmp	r1, r2
   21e0c:	d857      	bhi.n	21ebe <_malloc_r+0x1c6>
   21e0e:	4211      	tst	r1, r2
   21e10:	d106      	bne.n	21e20 <_malloc_r+0x128>
   21e12:	f020 0003 	bic.w	r0, r0, #3
   21e16:	0049      	lsls	r1, r1, #1
   21e18:	4211      	tst	r1, r2
   21e1a:	f100 0004 	add.w	r0, r0, #4
   21e1e:	d0fa      	beq.n	21e16 <_malloc_r+0x11e>
   21e20:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   21e24:	464d      	mov	r5, r9
   21e26:	4686      	mov	lr, r0
   21e28:	f8d5 800c 	ldr.w	r8, [r5, #12]
   21e2c:	4545      	cmp	r5, r8
   21e2e:	d108      	bne.n	21e42 <_malloc_r+0x14a>
   21e30:	e11d      	b.n	2206e <_malloc_r+0x376>
   21e32:	2b00      	cmp	r3, #0
   21e34:	f280 8124 	bge.w	22080 <_malloc_r+0x388>
   21e38:	f8d8 800c 	ldr.w	r8, [r8, #12]
   21e3c:	4545      	cmp	r5, r8
   21e3e:	f000 8116 	beq.w	2206e <_malloc_r+0x376>
   21e42:	f8d8 2004 	ldr.w	r2, [r8, #4]
   21e46:	f022 0203 	bic.w	r2, r2, #3
   21e4a:	1b93      	subs	r3, r2, r6
   21e4c:	2b0f      	cmp	r3, #15
   21e4e:	ddf0      	ble.n	21e32 <_malloc_r+0x13a>
   21e50:	4620      	mov	r0, r4
   21e52:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   21e56:	eb08 0106 	add.w	r1, r8, r6
   21e5a:	f046 0601 	orr.w	r6, r6, #1
   21e5e:	f8c8 6004 	str.w	r6, [r8, #4]
   21e62:	60ec      	str	r4, [r5, #12]
   21e64:	60a5      	str	r5, [r4, #8]
   21e66:	f043 0401 	orr.w	r4, r3, #1
   21e6a:	e9c7 1104 	strd	r1, r1, [r7, #16]
   21e6e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   21e72:	604c      	str	r4, [r1, #4]
   21e74:	f848 3002 	str.w	r3, [r8, r2]
   21e78:	f000 f9f4 	bl	22264 <__malloc_unlock>
   21e7c:	f108 0508 	add.w	r5, r8, #8
   21e80:	e002      	b.n	21e88 <_malloc_r+0x190>
   21e82:	230c      	movs	r3, #12
   21e84:	6023      	str	r3, [r4, #0]
   21e86:	2500      	movs	r5, #0
   21e88:	4628      	mov	r0, r5
   21e8a:	b003      	add	sp, #12
   21e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e90:	f44f 7300 	mov.w	r3, #512	; 0x200
   21e94:	2040      	movs	r0, #64	; 0x40
   21e96:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   21e9a:	e773      	b.n	21d84 <_malloc_r+0x8c>
   21e9c:	68d3      	ldr	r3, [r2, #12]
   21e9e:	429a      	cmp	r2, r3
   21ea0:	bf08      	it	eq
   21ea2:	3002      	addeq	r0, #2
   21ea4:	f47f af40 	bne.w	21d28 <_malloc_r+0x30>
   21ea8:	693d      	ldr	r5, [r7, #16]
   21eaa:	f8df c158 	ldr.w	ip, [pc, #344]	; 22004 <_malloc_r+0x30c>
   21eae:	4565      	cmp	r5, ip
   21eb0:	d182      	bne.n	21db8 <_malloc_r+0xc0>
   21eb2:	687a      	ldr	r2, [r7, #4]
   21eb4:	1083      	asrs	r3, r0, #2
   21eb6:	2101      	movs	r1, #1
   21eb8:	4099      	lsls	r1, r3
   21eba:	4291      	cmp	r1, r2
   21ebc:	d9a7      	bls.n	21e0e <_malloc_r+0x116>
   21ebe:	68bd      	ldr	r5, [r7, #8]
   21ec0:	686b      	ldr	r3, [r5, #4]
   21ec2:	f023 0903 	bic.w	r9, r3, #3
   21ec6:	454e      	cmp	r6, r9
   21ec8:	d803      	bhi.n	21ed2 <_malloc_r+0x1da>
   21eca:	eba9 0306 	sub.w	r3, r9, r6
   21ece:	2b0f      	cmp	r3, #15
   21ed0:	dc7a      	bgt.n	21fc8 <_malloc_r+0x2d0>
   21ed2:	f8df b134 	ldr.w	fp, [pc, #308]	; 22008 <_malloc_r+0x310>
   21ed6:	4b47      	ldr	r3, [pc, #284]	; (21ff4 <_malloc_r+0x2fc>)
   21ed8:	f8db 2000 	ldr.w	r2, [fp]
   21edc:	681b      	ldr	r3, [r3, #0]
   21ede:	3201      	adds	r2, #1
   21ee0:	4433      	add	r3, r6
   21ee2:	eb05 0a09 	add.w	sl, r5, r9
   21ee6:	f000 8133 	beq.w	22150 <_malloc_r+0x458>
   21eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   21eee:	330f      	adds	r3, #15
   21ef0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   21ef4:	f028 080f 	bic.w	r8, r8, #15
   21ef8:	4641      	mov	r1, r8
   21efa:	4620      	mov	r0, r4
   21efc:	f001 f9ba 	bl	23274 <_sbrk_r>
   21f00:	1c41      	adds	r1, r0, #1
   21f02:	4602      	mov	r2, r0
   21f04:	f000 80f3 	beq.w	220ee <_malloc_r+0x3f6>
   21f08:	4582      	cmp	sl, r0
   21f0a:	f200 80ee 	bhi.w	220ea <_malloc_r+0x3f2>
   21f0e:	4b3a      	ldr	r3, [pc, #232]	; (21ff8 <_malloc_r+0x300>)
   21f10:	6819      	ldr	r1, [r3, #0]
   21f12:	4441      	add	r1, r8
   21f14:	6019      	str	r1, [r3, #0]
   21f16:	4608      	mov	r0, r1
   21f18:	f000 814e 	beq.w	221b8 <_malloc_r+0x4c0>
   21f1c:	f8db 1000 	ldr.w	r1, [fp]
   21f20:	9301      	str	r3, [sp, #4]
   21f22:	3101      	adds	r1, #1
   21f24:	bf1b      	ittet	ne
   21f26:	eba2 010a 	subne.w	r1, r2, sl
   21f2a:	1809      	addne	r1, r1, r0
   21f2c:	f8cb 2000 	streq.w	r2, [fp]
   21f30:	6019      	strne	r1, [r3, #0]
   21f32:	f012 0b07 	ands.w	fp, r2, #7
   21f36:	f000 8117 	beq.w	22168 <_malloc_r+0x470>
   21f3a:	f1cb 0108 	rsb	r1, fp, #8
   21f3e:	440a      	add	r2, r1
   21f40:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   21f44:	4490      	add	r8, r2
   21f46:	3108      	adds	r1, #8
   21f48:	eba1 0108 	sub.w	r1, r1, r8
   21f4c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   21f50:	4651      	mov	r1, sl
   21f52:	4620      	mov	r0, r4
   21f54:	9200      	str	r2, [sp, #0]
   21f56:	f001 f98d 	bl	23274 <_sbrk_r>
   21f5a:	1c42      	adds	r2, r0, #1
   21f5c:	e9dd 2300 	ldrd	r2, r3, [sp]
   21f60:	f000 814f 	beq.w	22202 <_malloc_r+0x50a>
   21f64:	1a80      	subs	r0, r0, r2
   21f66:	eb00 080a 	add.w	r8, r0, sl
   21f6a:	6819      	ldr	r1, [r3, #0]
   21f6c:	60ba      	str	r2, [r7, #8]
   21f6e:	f048 0001 	orr.w	r0, r8, #1
   21f72:	4451      	add	r1, sl
   21f74:	42bd      	cmp	r5, r7
   21f76:	6050      	str	r0, [r2, #4]
   21f78:	6019      	str	r1, [r3, #0]
   21f7a:	f000 8129 	beq.w	221d0 <_malloc_r+0x4d8>
   21f7e:	f1b9 0f0f 	cmp.w	r9, #15
   21f82:	f240 8127 	bls.w	221d4 <_malloc_r+0x4dc>
   21f86:	6868      	ldr	r0, [r5, #4]
   21f88:	f1a9 0c0c 	sub.w	ip, r9, #12
   21f8c:	f02c 0c07 	bic.w	ip, ip, #7
   21f90:	f000 0001 	and.w	r0, r0, #1
   21f94:	ea40 000c 	orr.w	r0, r0, ip
   21f98:	6068      	str	r0, [r5, #4]
   21f9a:	f04f 0e05 	mov.w	lr, #5
   21f9e:	eb05 000c 	add.w	r0, r5, ip
   21fa2:	f1bc 0f0f 	cmp.w	ip, #15
   21fa6:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   21faa:	f200 8132 	bhi.w	22212 <_malloc_r+0x51a>
   21fae:	6850      	ldr	r0, [r2, #4]
   21fb0:	4615      	mov	r5, r2
   21fb2:	4b12      	ldr	r3, [pc, #72]	; (21ffc <_malloc_r+0x304>)
   21fb4:	681a      	ldr	r2, [r3, #0]
   21fb6:	428a      	cmp	r2, r1
   21fb8:	bf38      	it	cc
   21fba:	6019      	strcc	r1, [r3, #0]
   21fbc:	4b10      	ldr	r3, [pc, #64]	; (22000 <_malloc_r+0x308>)
   21fbe:	681a      	ldr	r2, [r3, #0]
   21fc0:	428a      	cmp	r2, r1
   21fc2:	bf38      	it	cc
   21fc4:	6019      	strcc	r1, [r3, #0]
   21fc6:	e094      	b.n	220f2 <_malloc_r+0x3fa>
   21fc8:	19aa      	adds	r2, r5, r6
   21fca:	f043 0301 	orr.w	r3, r3, #1
   21fce:	f046 0601 	orr.w	r6, r6, #1
   21fd2:	606e      	str	r6, [r5, #4]
   21fd4:	4620      	mov	r0, r4
   21fd6:	60ba      	str	r2, [r7, #8]
   21fd8:	6053      	str	r3, [r2, #4]
   21fda:	f000 f943 	bl	22264 <__malloc_unlock>
   21fde:	3508      	adds	r5, #8
   21fe0:	4628      	mov	r0, r5
   21fe2:	b003      	add	sp, #12
   21fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21fe8:	68d9      	ldr	r1, [r3, #12]
   21fea:	441a      	add	r2, r3
   21fec:	e6a1      	b.n	21d32 <_malloc_r+0x3a>
   21fee:	bf00      	nop
   21ff0:	200053c8 	.word	0x200053c8
   21ff4:	20007224 	.word	0x20007224
   21ff8:	200071f4 	.word	0x200071f4
   21ffc:	2000721c 	.word	0x2000721c
   22000:	20007220 	.word	0x20007220
   22004:	200053d0 	.word	0x200053d0
   22008:	200057d0 	.word	0x200057d0
   2200c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   22010:	ea4f 2352 	mov.w	r3, r2, lsr #9
   22014:	d363      	bcc.n	220de <_malloc_r+0x3e6>
   22016:	2b14      	cmp	r3, #20
   22018:	f200 80b7 	bhi.w	2218a <_malloc_r+0x492>
   2201c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   22020:	00c9      	lsls	r1, r1, #3
   22022:	335b      	adds	r3, #91	; 0x5b
   22024:	eb07 0e01 	add.w	lr, r7, r1
   22028:	5879      	ldr	r1, [r7, r1]
   2202a:	f1ae 0e08 	sub.w	lr, lr, #8
   2202e:	458e      	cmp	lr, r1
   22030:	f000 8091 	beq.w	22156 <_malloc_r+0x45e>
   22034:	684b      	ldr	r3, [r1, #4]
   22036:	f023 0303 	bic.w	r3, r3, #3
   2203a:	4293      	cmp	r3, r2
   2203c:	d902      	bls.n	22044 <_malloc_r+0x34c>
   2203e:	6889      	ldr	r1, [r1, #8]
   22040:	458e      	cmp	lr, r1
   22042:	d1f7      	bne.n	22034 <_malloc_r+0x33c>
   22044:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   22048:	687a      	ldr	r2, [r7, #4]
   2204a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   2204e:	f8ce 5008 	str.w	r5, [lr, #8]
   22052:	60cd      	str	r5, [r1, #12]
   22054:	e6d6      	b.n	21e04 <_malloc_r+0x10c>
   22056:	2b14      	cmp	r3, #20
   22058:	d959      	bls.n	2210e <_malloc_r+0x416>
   2205a:	2b54      	cmp	r3, #84	; 0x54
   2205c:	f200 809d 	bhi.w	2219a <_malloc_r+0x4a2>
   22060:	0b33      	lsrs	r3, r6, #12
   22062:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   22066:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   2206a:	00c3      	lsls	r3, r0, #3
   2206c:	e68a      	b.n	21d84 <_malloc_r+0x8c>
   2206e:	f10e 0e01 	add.w	lr, lr, #1
   22072:	f01e 0f03 	tst.w	lr, #3
   22076:	f105 0508 	add.w	r5, r5, #8
   2207a:	f47f aed5 	bne.w	21e28 <_malloc_r+0x130>
   2207e:	e051      	b.n	22124 <_malloc_r+0x42c>
   22080:	4442      	add	r2, r8
   22082:	4645      	mov	r5, r8
   22084:	6853      	ldr	r3, [r2, #4]
   22086:	f8d8 100c 	ldr.w	r1, [r8, #12]
   2208a:	f043 0301 	orr.w	r3, r3, #1
   2208e:	6053      	str	r3, [r2, #4]
   22090:	f855 3f08 	ldr.w	r3, [r5, #8]!
   22094:	4620      	mov	r0, r4
   22096:	60d9      	str	r1, [r3, #12]
   22098:	608b      	str	r3, [r1, #8]
   2209a:	f000 f8e3 	bl	22264 <__malloc_unlock>
   2209e:	e6f3      	b.n	21e88 <_malloc_r+0x190>
   220a0:	08f0      	lsrs	r0, r6, #3
   220a2:	f106 0208 	add.w	r2, r6, #8
   220a6:	e637      	b.n	21d18 <_malloc_r+0x20>
   220a8:	442a      	add	r2, r5
   220aa:	4620      	mov	r0, r4
   220ac:	6853      	ldr	r3, [r2, #4]
   220ae:	f043 0301 	orr.w	r3, r3, #1
   220b2:	6053      	str	r3, [r2, #4]
   220b4:	3508      	adds	r5, #8
   220b6:	f000 f8d5 	bl	22264 <__malloc_unlock>
   220ba:	e6e5      	b.n	21e88 <_malloc_r+0x190>
   220bc:	19a9      	adds	r1, r5, r6
   220be:	4620      	mov	r0, r4
   220c0:	f046 0601 	orr.w	r6, r6, #1
   220c4:	f043 0401 	orr.w	r4, r3, #1
   220c8:	606e      	str	r6, [r5, #4]
   220ca:	e9c7 1104 	strd	r1, r1, [r7, #16]
   220ce:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   220d2:	604c      	str	r4, [r1, #4]
   220d4:	50ab      	str	r3, [r5, r2]
   220d6:	f000 f8c5 	bl	22264 <__malloc_unlock>
   220da:	3508      	adds	r5, #8
   220dc:	e6d4      	b.n	21e88 <_malloc_r+0x190>
   220de:	0993      	lsrs	r3, r2, #6
   220e0:	f103 0139 	add.w	r1, r3, #57	; 0x39
   220e4:	00c9      	lsls	r1, r1, #3
   220e6:	3338      	adds	r3, #56	; 0x38
   220e8:	e79c      	b.n	22024 <_malloc_r+0x32c>
   220ea:	42bd      	cmp	r5, r7
   220ec:	d05f      	beq.n	221ae <_malloc_r+0x4b6>
   220ee:	68bd      	ldr	r5, [r7, #8]
   220f0:	6868      	ldr	r0, [r5, #4]
   220f2:	f020 0803 	bic.w	r8, r0, #3
   220f6:	4546      	cmp	r6, r8
   220f8:	eba8 0306 	sub.w	r3, r8, r6
   220fc:	d802      	bhi.n	22104 <_malloc_r+0x40c>
   220fe:	2b0f      	cmp	r3, #15
   22100:	f73f af62 	bgt.w	21fc8 <_malloc_r+0x2d0>
   22104:	4620      	mov	r0, r4
   22106:	f000 f8ad 	bl	22264 <__malloc_unlock>
   2210a:	2500      	movs	r5, #0
   2210c:	e6bc      	b.n	21e88 <_malloc_r+0x190>
   2210e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   22112:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   22116:	00c3      	lsls	r3, r0, #3
   22118:	e634      	b.n	21d84 <_malloc_r+0x8c>
   2211a:	f859 3908 	ldr.w	r3, [r9], #-8
   2211e:	454b      	cmp	r3, r9
   22120:	f040 8096 	bne.w	22250 <_malloc_r+0x558>
   22124:	f010 0f03 	tst.w	r0, #3
   22128:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2212c:	d1f5      	bne.n	2211a <_malloc_r+0x422>
   2212e:	687b      	ldr	r3, [r7, #4]
   22130:	ea23 0301 	bic.w	r3, r3, r1
   22134:	607b      	str	r3, [r7, #4]
   22136:	0049      	lsls	r1, r1, #1
   22138:	4299      	cmp	r1, r3
   2213a:	f63f aec0 	bhi.w	21ebe <_malloc_r+0x1c6>
   2213e:	b919      	cbnz	r1, 22148 <_malloc_r+0x450>
   22140:	e6bd      	b.n	21ebe <_malloc_r+0x1c6>
   22142:	0049      	lsls	r1, r1, #1
   22144:	f10e 0e04 	add.w	lr, lr, #4
   22148:	4219      	tst	r1, r3
   2214a:	d0fa      	beq.n	22142 <_malloc_r+0x44a>
   2214c:	4670      	mov	r0, lr
   2214e:	e667      	b.n	21e20 <_malloc_r+0x128>
   22150:	f103 0810 	add.w	r8, r3, #16
   22154:	e6d0      	b.n	21ef8 <_malloc_r+0x200>
   22156:	109a      	asrs	r2, r3, #2
   22158:	f04f 0801 	mov.w	r8, #1
   2215c:	687b      	ldr	r3, [r7, #4]
   2215e:	fa08 f202 	lsl.w	r2, r8, r2
   22162:	431a      	orrs	r2, r3
   22164:	607a      	str	r2, [r7, #4]
   22166:	e770      	b.n	2204a <_malloc_r+0x352>
   22168:	eb02 0108 	add.w	r1, r2, r8
   2216c:	4249      	negs	r1, r1
   2216e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   22172:	4651      	mov	r1, sl
   22174:	4620      	mov	r0, r4
   22176:	9200      	str	r2, [sp, #0]
   22178:	f001 f87c 	bl	23274 <_sbrk_r>
   2217c:	1c43      	adds	r3, r0, #1
   2217e:	e9dd 2300 	ldrd	r2, r3, [sp]
   22182:	f47f aeef 	bne.w	21f64 <_malloc_r+0x26c>
   22186:	46da      	mov	sl, fp
   22188:	e6ef      	b.n	21f6a <_malloc_r+0x272>
   2218a:	2b54      	cmp	r3, #84	; 0x54
   2218c:	d825      	bhi.n	221da <_malloc_r+0x4e2>
   2218e:	0b13      	lsrs	r3, r2, #12
   22190:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   22194:	00c9      	lsls	r1, r1, #3
   22196:	336e      	adds	r3, #110	; 0x6e
   22198:	e744      	b.n	22024 <_malloc_r+0x32c>
   2219a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2219e:	d825      	bhi.n	221ec <_malloc_r+0x4f4>
   221a0:	0bf3      	lsrs	r3, r6, #15
   221a2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   221a6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   221aa:	00c3      	lsls	r3, r0, #3
   221ac:	e5ea      	b.n	21d84 <_malloc_r+0x8c>
   221ae:	4b29      	ldr	r3, [pc, #164]	; (22254 <_malloc_r+0x55c>)
   221b0:	6818      	ldr	r0, [r3, #0]
   221b2:	4440      	add	r0, r8
   221b4:	6018      	str	r0, [r3, #0]
   221b6:	e6b1      	b.n	21f1c <_malloc_r+0x224>
   221b8:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   221bc:	f1bc 0f00 	cmp.w	ip, #0
   221c0:	f47f aeac 	bne.w	21f1c <_malloc_r+0x224>
   221c4:	68bd      	ldr	r5, [r7, #8]
   221c6:	44c8      	add	r8, r9
   221c8:	f048 0001 	orr.w	r0, r8, #1
   221cc:	6068      	str	r0, [r5, #4]
   221ce:	e6f0      	b.n	21fb2 <_malloc_r+0x2ba>
   221d0:	4615      	mov	r5, r2
   221d2:	e6ee      	b.n	21fb2 <_malloc_r+0x2ba>
   221d4:	2301      	movs	r3, #1
   221d6:	6053      	str	r3, [r2, #4]
   221d8:	e794      	b.n	22104 <_malloc_r+0x40c>
   221da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   221de:	d823      	bhi.n	22228 <_malloc_r+0x530>
   221e0:	0bd3      	lsrs	r3, r2, #15
   221e2:	f103 0178 	add.w	r1, r3, #120	; 0x78
   221e6:	00c9      	lsls	r1, r1, #3
   221e8:	3377      	adds	r3, #119	; 0x77
   221ea:	e71b      	b.n	22024 <_malloc_r+0x32c>
   221ec:	f240 5254 	movw	r2, #1364	; 0x554
   221f0:	4293      	cmp	r3, r2
   221f2:	d823      	bhi.n	2223c <_malloc_r+0x544>
   221f4:	0cb3      	lsrs	r3, r6, #18
   221f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   221fa:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   221fe:	00c3      	lsls	r3, r0, #3
   22200:	e5c0      	b.n	21d84 <_malloc_r+0x8c>
   22202:	f1ab 0b08 	sub.w	fp, fp, #8
   22206:	44d8      	add	r8, fp
   22208:	eba8 0802 	sub.w	r8, r8, r2
   2220c:	f04f 0a00 	mov.w	sl, #0
   22210:	e6ab      	b.n	21f6a <_malloc_r+0x272>
   22212:	f105 0108 	add.w	r1, r5, #8
   22216:	4620      	mov	r0, r4
   22218:	9300      	str	r3, [sp, #0]
   2221a:	f001 fbb3 	bl	23984 <_free_r>
   2221e:	68bd      	ldr	r5, [r7, #8]
   22220:	9b00      	ldr	r3, [sp, #0]
   22222:	6868      	ldr	r0, [r5, #4]
   22224:	6819      	ldr	r1, [r3, #0]
   22226:	e6c4      	b.n	21fb2 <_malloc_r+0x2ba>
   22228:	f240 5154 	movw	r1, #1364	; 0x554
   2222c:	428b      	cmp	r3, r1
   2222e:	d80b      	bhi.n	22248 <_malloc_r+0x550>
   22230:	0c93      	lsrs	r3, r2, #18
   22232:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   22236:	00c9      	lsls	r1, r1, #3
   22238:	337c      	adds	r3, #124	; 0x7c
   2223a:	e6f3      	b.n	22024 <_malloc_r+0x32c>
   2223c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   22240:	207f      	movs	r0, #127	; 0x7f
   22242:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   22246:	e59d      	b.n	21d84 <_malloc_r+0x8c>
   22248:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2224c:	237e      	movs	r3, #126	; 0x7e
   2224e:	e6e9      	b.n	22024 <_malloc_r+0x32c>
   22250:	687b      	ldr	r3, [r7, #4]
   22252:	e770      	b.n	22136 <_malloc_r+0x43e>
   22254:	200071f4 	.word	0x200071f4

00022258 <__malloc_lock>:
   22258:	4801      	ldr	r0, [pc, #4]	; (22260 <__malloc_lock+0x8>)
   2225a:	f001 ba35 	b.w	236c8 <__retarget_lock_acquire_recursive>
   2225e:	bf00      	nop
   22260:	200071ec 	.word	0x200071ec

00022264 <__malloc_unlock>:
   22264:	4801      	ldr	r0, [pc, #4]	; (2226c <__malloc_unlock+0x8>)
   22266:	f001 ba31 	b.w	236cc <__retarget_lock_release_recursive>
   2226a:	bf00      	nop
   2226c:	200071ec 	.word	0x200071ec

00022270 <realloc>:
   22270:	b410      	push	{r4}
   22272:	4c04      	ldr	r4, [pc, #16]	; (22284 <realloc+0x14>)
   22274:	4603      	mov	r3, r0
   22276:	460a      	mov	r2, r1
   22278:	6820      	ldr	r0, [r4, #0]
   2227a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2227e:	4619      	mov	r1, r3
   22280:	f000 b802 	b.w	22288 <_realloc_r>
   22284:	200057e4 	.word	0x200057e4

00022288 <_realloc_r>:
   22288:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2228c:	4617      	mov	r7, r2
   2228e:	2900      	cmp	r1, #0
   22290:	f000 8098 	beq.w	223c4 <_realloc_r+0x13c>
   22294:	460c      	mov	r4, r1
   22296:	f107 050b 	add.w	r5, r7, #11
   2229a:	4680      	mov	r8, r0
   2229c:	f7ff ffdc 	bl	22258 <__malloc_lock>
   222a0:	2d16      	cmp	r5, #22
   222a2:	f854 1c04 	ldr.w	r1, [r4, #-4]
   222a6:	d85b      	bhi.n	22360 <_realloc_r+0xd8>
   222a8:	2510      	movs	r5, #16
   222aa:	462a      	mov	r2, r5
   222ac:	42af      	cmp	r7, r5
   222ae:	d85c      	bhi.n	2236a <_realloc_r+0xe2>
   222b0:	f021 0603 	bic.w	r6, r1, #3
   222b4:	4296      	cmp	r6, r2
   222b6:	f1a4 0908 	sub.w	r9, r4, #8
   222ba:	da62      	bge.n	22382 <_realloc_r+0xfa>
   222bc:	4bbc      	ldr	r3, [pc, #752]	; (225b0 <_realloc_r+0x328>)
   222be:	f8d3 c008 	ldr.w	ip, [r3, #8]
   222c2:	eb09 0006 	add.w	r0, r9, r6
   222c6:	4584      	cmp	ip, r0
   222c8:	f000 8097 	beq.w	223fa <_realloc_r+0x172>
   222cc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   222d0:	f02c 0301 	bic.w	r3, ip, #1
   222d4:	4403      	add	r3, r0
   222d6:	685b      	ldr	r3, [r3, #4]
   222d8:	07db      	lsls	r3, r3, #31
   222da:	d468      	bmi.n	223ae <_realloc_r+0x126>
   222dc:	f02c 0c03 	bic.w	ip, ip, #3
   222e0:	eb06 030c 	add.w	r3, r6, ip
   222e4:	4293      	cmp	r3, r2
   222e6:	da47      	bge.n	22378 <_realloc_r+0xf0>
   222e8:	07cb      	lsls	r3, r1, #31
   222ea:	d410      	bmi.n	2230e <_realloc_r+0x86>
   222ec:	f854 3c08 	ldr.w	r3, [r4, #-8]
   222f0:	eba9 0a03 	sub.w	sl, r9, r3
   222f4:	f8da 3004 	ldr.w	r3, [sl, #4]
   222f8:	f023 0103 	bic.w	r1, r3, #3
   222fc:	448c      	add	ip, r1
   222fe:	44b4      	add	ip, r6
   22300:	4594      	cmp	ip, r2
   22302:	f280 8111 	bge.w	22528 <_realloc_r+0x2a0>
   22306:	1873      	adds	r3, r6, r1
   22308:	4293      	cmp	r3, r2
   2230a:	f280 80e8 	bge.w	224de <_realloc_r+0x256>
   2230e:	4639      	mov	r1, r7
   22310:	4640      	mov	r0, r8
   22312:	f7ff fcf1 	bl	21cf8 <_malloc_r>
   22316:	4607      	mov	r7, r0
   22318:	b1e0      	cbz	r0, 22354 <_realloc_r+0xcc>
   2231a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2231e:	f023 0301 	bic.w	r3, r3, #1
   22322:	444b      	add	r3, r9
   22324:	f1a0 0208 	sub.w	r2, r0, #8
   22328:	4293      	cmp	r3, r2
   2232a:	f000 80d2 	beq.w	224d2 <_realloc_r+0x24a>
   2232e:	1f32      	subs	r2, r6, #4
   22330:	2a24      	cmp	r2, #36	; 0x24
   22332:	f200 80f5 	bhi.w	22520 <_realloc_r+0x298>
   22336:	2a13      	cmp	r2, #19
   22338:	f200 80ac 	bhi.w	22494 <_realloc_r+0x20c>
   2233c:	4603      	mov	r3, r0
   2233e:	4622      	mov	r2, r4
   22340:	6811      	ldr	r1, [r2, #0]
   22342:	6019      	str	r1, [r3, #0]
   22344:	6851      	ldr	r1, [r2, #4]
   22346:	6059      	str	r1, [r3, #4]
   22348:	6892      	ldr	r2, [r2, #8]
   2234a:	609a      	str	r2, [r3, #8]
   2234c:	4621      	mov	r1, r4
   2234e:	4640      	mov	r0, r8
   22350:	f001 fb18 	bl	23984 <_free_r>
   22354:	4640      	mov	r0, r8
   22356:	f7ff ff85 	bl	22264 <__malloc_unlock>
   2235a:	4638      	mov	r0, r7
   2235c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22360:	f025 0507 	bic.w	r5, r5, #7
   22364:	2d00      	cmp	r5, #0
   22366:	462a      	mov	r2, r5
   22368:	daa0      	bge.n	222ac <_realloc_r+0x24>
   2236a:	230c      	movs	r3, #12
   2236c:	f8c8 3000 	str.w	r3, [r8]
   22370:	2700      	movs	r7, #0
   22372:	4638      	mov	r0, r7
   22374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22378:	461e      	mov	r6, r3
   2237a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   2237e:	60d3      	str	r3, [r2, #12]
   22380:	609a      	str	r2, [r3, #8]
   22382:	1b73      	subs	r3, r6, r5
   22384:	2b0f      	cmp	r3, #15
   22386:	d822      	bhi.n	223ce <_realloc_r+0x146>
   22388:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2238c:	f003 0301 	and.w	r3, r3, #1
   22390:	4333      	orrs	r3, r6
   22392:	444e      	add	r6, r9
   22394:	f8c9 3004 	str.w	r3, [r9, #4]
   22398:	6873      	ldr	r3, [r6, #4]
   2239a:	f043 0301 	orr.w	r3, r3, #1
   2239e:	6073      	str	r3, [r6, #4]
   223a0:	4640      	mov	r0, r8
   223a2:	4627      	mov	r7, r4
   223a4:	f7ff ff5e 	bl	22264 <__malloc_unlock>
   223a8:	4638      	mov	r0, r7
   223aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223ae:	07c9      	lsls	r1, r1, #31
   223b0:	d4ad      	bmi.n	2230e <_realloc_r+0x86>
   223b2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   223b6:	eba9 0a03 	sub.w	sl, r9, r3
   223ba:	f8da 1004 	ldr.w	r1, [sl, #4]
   223be:	f021 0103 	bic.w	r1, r1, #3
   223c2:	e7a0      	b.n	22306 <_realloc_r+0x7e>
   223c4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223c8:	4611      	mov	r1, r2
   223ca:	f7ff bc95 	b.w	21cf8 <_malloc_r>
   223ce:	f8d9 2004 	ldr.w	r2, [r9, #4]
   223d2:	eb09 0105 	add.w	r1, r9, r5
   223d6:	f002 0201 	and.w	r2, r2, #1
   223da:	444e      	add	r6, r9
   223dc:	f043 0301 	orr.w	r3, r3, #1
   223e0:	432a      	orrs	r2, r5
   223e2:	f8c9 2004 	str.w	r2, [r9, #4]
   223e6:	604b      	str	r3, [r1, #4]
   223e8:	6873      	ldr	r3, [r6, #4]
   223ea:	f043 0301 	orr.w	r3, r3, #1
   223ee:	3108      	adds	r1, #8
   223f0:	6073      	str	r3, [r6, #4]
   223f2:	4640      	mov	r0, r8
   223f4:	f001 fac6 	bl	23984 <_free_r>
   223f8:	e7d2      	b.n	223a0 <_realloc_r+0x118>
   223fa:	f8dc 0004 	ldr.w	r0, [ip, #4]
   223fe:	f020 0b03 	bic.w	fp, r0, #3
   22402:	eb06 0c0b 	add.w	ip, r6, fp
   22406:	f105 0010 	add.w	r0, r5, #16
   2240a:	4584      	cmp	ip, r0
   2240c:	da4d      	bge.n	224aa <_realloc_r+0x222>
   2240e:	07c9      	lsls	r1, r1, #31
   22410:	f53f af7d 	bmi.w	2230e <_realloc_r+0x86>
   22414:	f854 1c08 	ldr.w	r1, [r4, #-8]
   22418:	eba9 0a01 	sub.w	sl, r9, r1
   2241c:	f8da 1004 	ldr.w	r1, [sl, #4]
   22420:	f021 0103 	bic.w	r1, r1, #3
   22424:	448b      	add	fp, r1
   22426:	44b3      	add	fp, r6
   22428:	4558      	cmp	r0, fp
   2242a:	f73f af6c 	bgt.w	22306 <_realloc_r+0x7e>
   2242e:	4657      	mov	r7, sl
   22430:	f8da 100c 	ldr.w	r1, [sl, #12]
   22434:	f857 0f08 	ldr.w	r0, [r7, #8]!
   22438:	1f32      	subs	r2, r6, #4
   2243a:	2a24      	cmp	r2, #36	; 0x24
   2243c:	60c1      	str	r1, [r0, #12]
   2243e:	6088      	str	r0, [r1, #8]
   22440:	f200 80db 	bhi.w	225fa <_realloc_r+0x372>
   22444:	2a13      	cmp	r2, #19
   22446:	f240 80d6 	bls.w	225f6 <_realloc_r+0x36e>
   2244a:	6821      	ldr	r1, [r4, #0]
   2244c:	f8ca 1008 	str.w	r1, [sl, #8]
   22450:	6861      	ldr	r1, [r4, #4]
   22452:	f8ca 100c 	str.w	r1, [sl, #12]
   22456:	2a1b      	cmp	r2, #27
   22458:	f200 80df 	bhi.w	2261a <_realloc_r+0x392>
   2245c:	3408      	adds	r4, #8
   2245e:	f10a 0210 	add.w	r2, sl, #16
   22462:	6821      	ldr	r1, [r4, #0]
   22464:	6011      	str	r1, [r2, #0]
   22466:	6861      	ldr	r1, [r4, #4]
   22468:	6051      	str	r1, [r2, #4]
   2246a:	68a1      	ldr	r1, [r4, #8]
   2246c:	6091      	str	r1, [r2, #8]
   2246e:	eb0a 0105 	add.w	r1, sl, r5
   22472:	ebab 0205 	sub.w	r2, fp, r5
   22476:	f042 0201 	orr.w	r2, r2, #1
   2247a:	6099      	str	r1, [r3, #8]
   2247c:	604a      	str	r2, [r1, #4]
   2247e:	f8da 3004 	ldr.w	r3, [sl, #4]
   22482:	f003 0301 	and.w	r3, r3, #1
   22486:	432b      	orrs	r3, r5
   22488:	4640      	mov	r0, r8
   2248a:	f8ca 3004 	str.w	r3, [sl, #4]
   2248e:	f7ff fee9 	bl	22264 <__malloc_unlock>
   22492:	e76e      	b.n	22372 <_realloc_r+0xea>
   22494:	6823      	ldr	r3, [r4, #0]
   22496:	6003      	str	r3, [r0, #0]
   22498:	6863      	ldr	r3, [r4, #4]
   2249a:	6043      	str	r3, [r0, #4]
   2249c:	2a1b      	cmp	r2, #27
   2249e:	d868      	bhi.n	22572 <_realloc_r+0x2ea>
   224a0:	f104 0208 	add.w	r2, r4, #8
   224a4:	f100 0308 	add.w	r3, r0, #8
   224a8:	e74a      	b.n	22340 <_realloc_r+0xb8>
   224aa:	eb09 0205 	add.w	r2, r9, r5
   224ae:	609a      	str	r2, [r3, #8]
   224b0:	ebac 0305 	sub.w	r3, ip, r5
   224b4:	f043 0301 	orr.w	r3, r3, #1
   224b8:	6053      	str	r3, [r2, #4]
   224ba:	f854 3c04 	ldr.w	r3, [r4, #-4]
   224be:	f003 0301 	and.w	r3, r3, #1
   224c2:	432b      	orrs	r3, r5
   224c4:	4640      	mov	r0, r8
   224c6:	f844 3c04 	str.w	r3, [r4, #-4]
   224ca:	f7ff fecb 	bl	22264 <__malloc_unlock>
   224ce:	4627      	mov	r7, r4
   224d0:	e74f      	b.n	22372 <_realloc_r+0xea>
   224d2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   224d6:	f023 0303 	bic.w	r3, r3, #3
   224da:	441e      	add	r6, r3
   224dc:	e751      	b.n	22382 <_realloc_r+0xfa>
   224de:	4657      	mov	r7, sl
   224e0:	f8da 100c 	ldr.w	r1, [sl, #12]
   224e4:	f857 0f08 	ldr.w	r0, [r7, #8]!
   224e8:	1f32      	subs	r2, r6, #4
   224ea:	2a24      	cmp	r2, #36	; 0x24
   224ec:	60c1      	str	r1, [r0, #12]
   224ee:	6088      	str	r0, [r1, #8]
   224f0:	d84c      	bhi.n	2258c <_realloc_r+0x304>
   224f2:	2a13      	cmp	r2, #19
   224f4:	d948      	bls.n	22588 <_realloc_r+0x300>
   224f6:	6821      	ldr	r1, [r4, #0]
   224f8:	f8ca 1008 	str.w	r1, [sl, #8]
   224fc:	6861      	ldr	r1, [r4, #4]
   224fe:	f8ca 100c 	str.w	r1, [sl, #12]
   22502:	2a1b      	cmp	r2, #27
   22504:	d856      	bhi.n	225b4 <_realloc_r+0x32c>
   22506:	3408      	adds	r4, #8
   22508:	f10a 0210 	add.w	r2, sl, #16
   2250c:	461e      	mov	r6, r3
   2250e:	6823      	ldr	r3, [r4, #0]
   22510:	6013      	str	r3, [r2, #0]
   22512:	6863      	ldr	r3, [r4, #4]
   22514:	6053      	str	r3, [r2, #4]
   22516:	68a3      	ldr	r3, [r4, #8]
   22518:	6093      	str	r3, [r2, #8]
   2251a:	46d1      	mov	r9, sl
   2251c:	463c      	mov	r4, r7
   2251e:	e730      	b.n	22382 <_realloc_r+0xfa>
   22520:	4621      	mov	r1, r4
   22522:	f000 fd1d 	bl	22f60 <memmove>
   22526:	e711      	b.n	2234c <_realloc_r+0xc4>
   22528:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   2252c:	4657      	mov	r7, sl
   2252e:	60cb      	str	r3, [r1, #12]
   22530:	6099      	str	r1, [r3, #8]
   22532:	f857 1f08 	ldr.w	r1, [r7, #8]!
   22536:	f8da 300c 	ldr.w	r3, [sl, #12]
   2253a:	60cb      	str	r3, [r1, #12]
   2253c:	1f32      	subs	r2, r6, #4
   2253e:	2a24      	cmp	r2, #36	; 0x24
   22540:	6099      	str	r1, [r3, #8]
   22542:	d82d      	bhi.n	225a0 <_realloc_r+0x318>
   22544:	2a13      	cmp	r2, #19
   22546:	d929      	bls.n	2259c <_realloc_r+0x314>
   22548:	6823      	ldr	r3, [r4, #0]
   2254a:	f8ca 3008 	str.w	r3, [sl, #8]
   2254e:	6863      	ldr	r3, [r4, #4]
   22550:	f8ca 300c 	str.w	r3, [sl, #12]
   22554:	2a1b      	cmp	r2, #27
   22556:	d842      	bhi.n	225de <_realloc_r+0x356>
   22558:	3408      	adds	r4, #8
   2255a:	f10a 0310 	add.w	r3, sl, #16
   2255e:	6822      	ldr	r2, [r4, #0]
   22560:	601a      	str	r2, [r3, #0]
   22562:	6862      	ldr	r2, [r4, #4]
   22564:	605a      	str	r2, [r3, #4]
   22566:	68a2      	ldr	r2, [r4, #8]
   22568:	609a      	str	r2, [r3, #8]
   2256a:	4666      	mov	r6, ip
   2256c:	46d1      	mov	r9, sl
   2256e:	463c      	mov	r4, r7
   22570:	e707      	b.n	22382 <_realloc_r+0xfa>
   22572:	68a3      	ldr	r3, [r4, #8]
   22574:	6083      	str	r3, [r0, #8]
   22576:	68e3      	ldr	r3, [r4, #12]
   22578:	60c3      	str	r3, [r0, #12]
   2257a:	2a24      	cmp	r2, #36	; 0x24
   2257c:	d026      	beq.n	225cc <_realloc_r+0x344>
   2257e:	f104 0210 	add.w	r2, r4, #16
   22582:	f100 0310 	add.w	r3, r0, #16
   22586:	e6db      	b.n	22340 <_realloc_r+0xb8>
   22588:	463a      	mov	r2, r7
   2258a:	e7bf      	b.n	2250c <_realloc_r+0x284>
   2258c:	4621      	mov	r1, r4
   2258e:	4638      	mov	r0, r7
   22590:	461e      	mov	r6, r3
   22592:	46d1      	mov	r9, sl
   22594:	f000 fce4 	bl	22f60 <memmove>
   22598:	463c      	mov	r4, r7
   2259a:	e6f2      	b.n	22382 <_realloc_r+0xfa>
   2259c:	463b      	mov	r3, r7
   2259e:	e7de      	b.n	2255e <_realloc_r+0x2d6>
   225a0:	4621      	mov	r1, r4
   225a2:	4638      	mov	r0, r7
   225a4:	4666      	mov	r6, ip
   225a6:	46d1      	mov	r9, sl
   225a8:	f000 fcda 	bl	22f60 <memmove>
   225ac:	463c      	mov	r4, r7
   225ae:	e6e8      	b.n	22382 <_realloc_r+0xfa>
   225b0:	200053c8 	.word	0x200053c8
   225b4:	68a1      	ldr	r1, [r4, #8]
   225b6:	f8ca 1010 	str.w	r1, [sl, #16]
   225ba:	68e1      	ldr	r1, [r4, #12]
   225bc:	f8ca 1014 	str.w	r1, [sl, #20]
   225c0:	2a24      	cmp	r2, #36	; 0x24
   225c2:	d020      	beq.n	22606 <_realloc_r+0x37e>
   225c4:	3410      	adds	r4, #16
   225c6:	f10a 0218 	add.w	r2, sl, #24
   225ca:	e79f      	b.n	2250c <_realloc_r+0x284>
   225cc:	6923      	ldr	r3, [r4, #16]
   225ce:	6103      	str	r3, [r0, #16]
   225d0:	6961      	ldr	r1, [r4, #20]
   225d2:	6141      	str	r1, [r0, #20]
   225d4:	f104 0218 	add.w	r2, r4, #24
   225d8:	f100 0318 	add.w	r3, r0, #24
   225dc:	e6b0      	b.n	22340 <_realloc_r+0xb8>
   225de:	68a3      	ldr	r3, [r4, #8]
   225e0:	f8ca 3010 	str.w	r3, [sl, #16]
   225e4:	68e3      	ldr	r3, [r4, #12]
   225e6:	f8ca 3014 	str.w	r3, [sl, #20]
   225ea:	2a24      	cmp	r2, #36	; 0x24
   225ec:	d021      	beq.n	22632 <_realloc_r+0x3aa>
   225ee:	3410      	adds	r4, #16
   225f0:	f10a 0318 	add.w	r3, sl, #24
   225f4:	e7b3      	b.n	2255e <_realloc_r+0x2d6>
   225f6:	463a      	mov	r2, r7
   225f8:	e733      	b.n	22462 <_realloc_r+0x1da>
   225fa:	4621      	mov	r1, r4
   225fc:	4638      	mov	r0, r7
   225fe:	f000 fcaf 	bl	22f60 <memmove>
   22602:	4b16      	ldr	r3, [pc, #88]	; (2265c <_realloc_r+0x3d4>)
   22604:	e733      	b.n	2246e <_realloc_r+0x1e6>
   22606:	6922      	ldr	r2, [r4, #16]
   22608:	f8ca 2018 	str.w	r2, [sl, #24]
   2260c:	6962      	ldr	r2, [r4, #20]
   2260e:	f8ca 201c 	str.w	r2, [sl, #28]
   22612:	3418      	adds	r4, #24
   22614:	f10a 0220 	add.w	r2, sl, #32
   22618:	e778      	b.n	2250c <_realloc_r+0x284>
   2261a:	68a1      	ldr	r1, [r4, #8]
   2261c:	f8ca 1010 	str.w	r1, [sl, #16]
   22620:	68e1      	ldr	r1, [r4, #12]
   22622:	f8ca 1014 	str.w	r1, [sl, #20]
   22626:	2a24      	cmp	r2, #36	; 0x24
   22628:	d00d      	beq.n	22646 <_realloc_r+0x3be>
   2262a:	3410      	adds	r4, #16
   2262c:	f10a 0218 	add.w	r2, sl, #24
   22630:	e717      	b.n	22462 <_realloc_r+0x1da>
   22632:	6923      	ldr	r3, [r4, #16]
   22634:	f8ca 3018 	str.w	r3, [sl, #24]
   22638:	6963      	ldr	r3, [r4, #20]
   2263a:	f8ca 301c 	str.w	r3, [sl, #28]
   2263e:	3418      	adds	r4, #24
   22640:	f10a 0320 	add.w	r3, sl, #32
   22644:	e78b      	b.n	2255e <_realloc_r+0x2d6>
   22646:	6922      	ldr	r2, [r4, #16]
   22648:	f8ca 2018 	str.w	r2, [sl, #24]
   2264c:	6962      	ldr	r2, [r4, #20]
   2264e:	f8ca 201c 	str.w	r2, [sl, #28]
   22652:	3418      	adds	r4, #24
   22654:	f10a 0220 	add.w	r2, sl, #32
   22658:	e703      	b.n	22462 <_realloc_r+0x1da>
   2265a:	bf00      	nop
   2265c:	200053c8 	.word	0x200053c8

00022660 <__utoa>:
   22660:	b5f0      	push	{r4, r5, r6, r7, lr}
   22662:	4f25      	ldr	r7, [pc, #148]	; (226f8 <__utoa+0x98>)
   22664:	f1a2 0e02 	sub.w	lr, r2, #2
   22668:	4616      	mov	r6, r2
   2266a:	4605      	mov	r5, r0
   2266c:	460c      	mov	r4, r1
   2266e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   22670:	b08b      	sub	sp, #44	; 0x2c
   22672:	46ec      	mov	ip, sp
   22674:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   22678:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2267a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   2267e:	e897 0003 	ldmia.w	r7, {r0, r1}
   22682:	f84c 0b04 	str.w	r0, [ip], #4
   22686:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   2268a:	f88c 1000 	strb.w	r1, [ip]
   2268e:	d82e      	bhi.n	226ee <__utoa+0x8e>
   22690:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   22694:	4670      	mov	r0, lr
   22696:	f04f 0c00 	mov.w	ip, #0
   2269a:	fbb5 f2f6 	udiv	r2, r5, r6
   2269e:	fb06 5312 	mls	r3, r6, r2, r5
   226a2:	3328      	adds	r3, #40	; 0x28
   226a4:	446b      	add	r3, sp
   226a6:	4661      	mov	r1, ip
   226a8:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   226ac:	f800 cf01 	strb.w	ip, [r0, #1]!
   226b0:	462b      	mov	r3, r5
   226b2:	429e      	cmp	r6, r3
   226b4:	f101 0c01 	add.w	ip, r1, #1
   226b8:	4615      	mov	r5, r2
   226ba:	d9ee      	bls.n	2269a <__utoa+0x3a>
   226bc:	2300      	movs	r3, #0
   226be:	f804 300c 	strb.w	r3, [r4, ip]
   226c2:	b189      	cbz	r1, 226e8 <__utoa+0x88>
   226c4:	44a4      	add	ip, r4
   226c6:	4672      	mov	r2, lr
   226c8:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   226cc:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   226d0:	f88e 5000 	strb.w	r5, [lr]
   226d4:	eba4 030e 	sub.w	r3, r4, lr
   226d8:	3202      	adds	r2, #2
   226da:	3b01      	subs	r3, #1
   226dc:	1b12      	subs	r2, r2, r4
   226de:	440b      	add	r3, r1
   226e0:	429a      	cmp	r2, r3
   226e2:	f88c 0000 	strb.w	r0, [ip]
   226e6:	dbee      	blt.n	226c6 <__utoa+0x66>
   226e8:	4620      	mov	r0, r4
   226ea:	b00b      	add	sp, #44	; 0x2c
   226ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226ee:	2300      	movs	r3, #0
   226f0:	4618      	mov	r0, r3
   226f2:	7023      	strb	r3, [r4, #0]
   226f4:	b00b      	add	sp, #44	; 0x2c
   226f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   226f8:	20002a90 	.word	0x20002a90

000226fc <utoa>:
   226fc:	f7ff bfb0 	b.w	22660 <__utoa>

00022700 <sprintf>:
   22700:	b40e      	push	{r1, r2, r3}
   22702:	b510      	push	{r4, lr}
   22704:	b09d      	sub	sp, #116	; 0x74
   22706:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   2270a:	ab1f      	add	r3, sp, #124	; 0x7c
   2270c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   22710:	9104      	str	r1, [sp, #16]
   22712:	4909      	ldr	r1, [pc, #36]	; (22738 <sprintf+0x38>)
   22714:	f853 2b04 	ldr.w	r2, [r3], #4
   22718:	9002      	str	r0, [sp, #8]
   2271a:	4c08      	ldr	r4, [pc, #32]	; (2273c <sprintf+0x3c>)
   2271c:	6808      	ldr	r0, [r1, #0]
   2271e:	9301      	str	r3, [sp, #4]
   22720:	a902      	add	r1, sp, #8
   22722:	9405      	str	r4, [sp, #20]
   22724:	f001 fa4c 	bl	23bc0 <_svfprintf_r>
   22728:	9b02      	ldr	r3, [sp, #8]
   2272a:	2200      	movs	r2, #0
   2272c:	701a      	strb	r2, [r3, #0]
   2272e:	b01d      	add	sp, #116	; 0x74
   22730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22734:	b003      	add	sp, #12
   22736:	4770      	bx	lr
   22738:	200057e4 	.word	0x200057e4
   2273c:	ffff0208 	.word	0xffff0208

00022740 <stdio_exit_handler>:
   22740:	4a02      	ldr	r2, [pc, #8]	; (2274c <stdio_exit_handler+0xc>)
   22742:	4903      	ldr	r1, [pc, #12]	; (22750 <stdio_exit_handler+0x10>)
   22744:	4803      	ldr	r0, [pc, #12]	; (22754 <stdio_exit_handler+0x14>)
   22746:	f000 baeb 	b.w	22d20 <_fwalk_sglue>
   2274a:	bf00      	nop
   2274c:	200057d8 	.word	0x200057d8
   22750:	00025fcd 	.word	0x00025fcd
   22754:	20004cf0 	.word	0x20004cf0

00022758 <cleanup_stdio>:
   22758:	4b0c      	ldr	r3, [pc, #48]	; (2278c <cleanup_stdio+0x34>)
   2275a:	6841      	ldr	r1, [r0, #4]
   2275c:	4299      	cmp	r1, r3
   2275e:	b510      	push	{r4, lr}
   22760:	4604      	mov	r4, r0
   22762:	d001      	beq.n	22768 <cleanup_stdio+0x10>
   22764:	f003 fc32 	bl	25fcc <_fclose_r>
   22768:	68a1      	ldr	r1, [r4, #8]
   2276a:	4b09      	ldr	r3, [pc, #36]	; (22790 <cleanup_stdio+0x38>)
   2276c:	4299      	cmp	r1, r3
   2276e:	d002      	beq.n	22776 <cleanup_stdio+0x1e>
   22770:	4620      	mov	r0, r4
   22772:	f003 fc2b 	bl	25fcc <_fclose_r>
   22776:	68e1      	ldr	r1, [r4, #12]
   22778:	4b06      	ldr	r3, [pc, #24]	; (22794 <cleanup_stdio+0x3c>)
   2277a:	4299      	cmp	r1, r3
   2277c:	d004      	beq.n	22788 <cleanup_stdio+0x30>
   2277e:	4620      	mov	r0, r4
   22780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22784:	f003 bc22 	b.w	25fcc <_fclose_r>
   22788:	bd10      	pop	{r4, pc}
   2278a:	bf00      	nop
   2278c:	20007228 	.word	0x20007228
   22790:	20007290 	.word	0x20007290
   22794:	200072f8 	.word	0x200072f8

00022798 <global_stdio_init.part.0>:
   22798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2279c:	4c2a      	ldr	r4, [pc, #168]	; (22848 <global_stdio_init.part.0+0xb0>)
   2279e:	4b2b      	ldr	r3, [pc, #172]	; (2284c <global_stdio_init.part.0+0xb4>)
   227a0:	482b      	ldr	r0, [pc, #172]	; (22850 <global_stdio_init.part.0+0xb8>)
   227a2:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 22864 <global_stdio_init.part.0+0xcc>
   227a6:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 22868 <global_stdio_init.part.0+0xd0>
   227aa:	4f2a      	ldr	r7, [pc, #168]	; (22854 <global_stdio_init.part.0+0xbc>)
   227ac:	6018      	str	r0, [r3, #0]
   227ae:	2500      	movs	r5, #0
   227b0:	2304      	movs	r3, #4
   227b2:	2208      	movs	r2, #8
   227b4:	4629      	mov	r1, r5
   227b6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   227ba:	4e27      	ldr	r6, [pc, #156]	; (22858 <global_stdio_init.part.0+0xc0>)
   227bc:	6665      	str	r5, [r4, #100]	; 0x64
   227be:	e9c4 5302 	strd	r5, r3, [r4, #8]
   227c2:	e9c4 5500 	strd	r5, r5, [r4]
   227c6:	e9c4 5504 	strd	r5, r5, [r4, #16]
   227ca:	61a5      	str	r5, [r4, #24]
   227cc:	f000 fc44 	bl	23058 <memset>
   227d0:	4b22      	ldr	r3, [pc, #136]	; (2285c <global_stdio_init.part.0+0xc4>)
   227d2:	6763      	str	r3, [r4, #116]	; 0x74
   227d4:	2208      	movs	r2, #8
   227d6:	4629      	mov	r1, r5
   227d8:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   227dc:	e9c4 4907 	strd	r4, r9, [r4, #28]
   227e0:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   227e4:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   227e8:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   227ec:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   227f0:	6725      	str	r5, [r4, #112]	; 0x70
   227f2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   227f6:	62e6      	str	r6, [r4, #44]	; 0x2c
   227f8:	f000 fc2e 	bl	23058 <memset>
   227fc:	4b18      	ldr	r3, [pc, #96]	; (22860 <global_stdio_init.part.0+0xc8>)
   227fe:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   22802:	4629      	mov	r1, r5
   22804:	f104 0368 	add.w	r3, r4, #104	; 0x68
   22808:	2208      	movs	r2, #8
   2280a:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   2280e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   22812:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   22816:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   2281a:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   2281e:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   22822:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   22826:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   2282a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   2282e:	f000 fc13 	bl	23058 <memset>
   22832:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   22836:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   2283a:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   2283e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   22842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22846:	bf00      	nop
   22848:	20007228 	.word	0x20007228
   2284c:	20007360 	.word	0x20007360
   22850:	00022741 	.word	0x00022741
   22854:	0002627d 	.word	0x0002627d
   22858:	0002629d 	.word	0x0002629d
   2285c:	00010009 	.word	0x00010009
   22860:	00020012 	.word	0x00020012
   22864:	00026219 	.word	0x00026219
   22868:	0002623d 	.word	0x0002623d

0002286c <__sinit>:
   2286c:	b510      	push	{r4, lr}
   2286e:	4604      	mov	r4, r0
   22870:	480a      	ldr	r0, [pc, #40]	; (2289c <__sinit+0x30>)
   22872:	f000 ff29 	bl	236c8 <__retarget_lock_acquire_recursive>
   22876:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22878:	b923      	cbnz	r3, 22884 <__sinit+0x18>
   2287a:	4b09      	ldr	r3, [pc, #36]	; (228a0 <__sinit+0x34>)
   2287c:	4a09      	ldr	r2, [pc, #36]	; (228a4 <__sinit+0x38>)
   2287e:	681b      	ldr	r3, [r3, #0]
   22880:	6362      	str	r2, [r4, #52]	; 0x34
   22882:	b123      	cbz	r3, 2288e <__sinit+0x22>
   22884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22888:	4804      	ldr	r0, [pc, #16]	; (2289c <__sinit+0x30>)
   2288a:	f000 bf1f 	b.w	236cc <__retarget_lock_release_recursive>
   2288e:	f7ff ff83 	bl	22798 <global_stdio_init.part.0>
   22892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22896:	4801      	ldr	r0, [pc, #4]	; (2289c <__sinit+0x30>)
   22898:	f000 bf18 	b.w	236cc <__retarget_lock_release_recursive>
   2289c:	200071f0 	.word	0x200071f0
   228a0:	20007360 	.word	0x20007360
   228a4:	00022759 	.word	0x00022759

000228a8 <__sfp_lock_acquire>:
   228a8:	4801      	ldr	r0, [pc, #4]	; (228b0 <__sfp_lock_acquire+0x8>)
   228aa:	f000 bf0d 	b.w	236c8 <__retarget_lock_acquire_recursive>
   228ae:	bf00      	nop
   228b0:	200071f0 	.word	0x200071f0

000228b4 <__sfp_lock_release>:
   228b4:	4801      	ldr	r0, [pc, #4]	; (228bc <__sfp_lock_release+0x8>)
   228b6:	f000 bf09 	b.w	236cc <__retarget_lock_release_recursive>
   228ba:	bf00      	nop
   228bc:	200071f0 	.word	0x200071f0

000228c0 <fputc>:
   228c0:	b530      	push	{r4, r5, lr}
   228c2:	4b17      	ldr	r3, [pc, #92]	; (22920 <fputc+0x60>)
   228c4:	681d      	ldr	r5, [r3, #0]
   228c6:	460c      	mov	r4, r1
   228c8:	b083      	sub	sp, #12
   228ca:	4601      	mov	r1, r0
   228cc:	b10d      	cbz	r5, 228d2 <fputc+0x12>
   228ce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   228d0:	b1fb      	cbz	r3, 22912 <fputc+0x52>
   228d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   228d4:	07db      	lsls	r3, r3, #31
   228d6:	d402      	bmi.n	228de <fputc+0x1e>
   228d8:	89a3      	ldrh	r3, [r4, #12]
   228da:	0598      	lsls	r0, r3, #22
   228dc:	d513      	bpl.n	22906 <fputc+0x46>
   228de:	4622      	mov	r2, r4
   228e0:	4628      	mov	r0, r5
   228e2:	f002 ff7b 	bl	257dc <_putc_r>
   228e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   228e8:	07da      	lsls	r2, r3, #31
   228ea:	4605      	mov	r5, r0
   228ec:	d402      	bmi.n	228f4 <fputc+0x34>
   228ee:	89a3      	ldrh	r3, [r4, #12]
   228f0:	059b      	lsls	r3, r3, #22
   228f2:	d502      	bpl.n	228fa <fputc+0x3a>
   228f4:	4628      	mov	r0, r5
   228f6:	b003      	add	sp, #12
   228f8:	bd30      	pop	{r4, r5, pc}
   228fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   228fc:	f000 fee6 	bl	236cc <__retarget_lock_release_recursive>
   22900:	4628      	mov	r0, r5
   22902:	b003      	add	sp, #12
   22904:	bd30      	pop	{r4, r5, pc}
   22906:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22908:	9101      	str	r1, [sp, #4]
   2290a:	f000 fedd 	bl	236c8 <__retarget_lock_acquire_recursive>
   2290e:	9901      	ldr	r1, [sp, #4]
   22910:	e7e5      	b.n	228de <fputc+0x1e>
   22912:	9001      	str	r0, [sp, #4]
   22914:	4628      	mov	r0, r5
   22916:	f7ff ffa9 	bl	2286c <__sinit>
   2291a:	9901      	ldr	r1, [sp, #4]
   2291c:	e7d9      	b.n	228d2 <fputc+0x12>
   2291e:	bf00      	nop
   22920:	200057e4 	.word	0x200057e4

00022924 <_fputs_r>:
   22924:	b530      	push	{r4, r5, lr}
   22926:	b087      	sub	sp, #28
   22928:	4605      	mov	r5, r0
   2292a:	4608      	mov	r0, r1
   2292c:	4614      	mov	r4, r2
   2292e:	9101      	str	r1, [sp, #4]
   22930:	f000 ff26 	bl	23780 <strlen>
   22934:	aa01      	add	r2, sp, #4
   22936:	2301      	movs	r3, #1
   22938:	e9cd 0202 	strd	r0, r2, [sp, #8]
   2293c:	9005      	str	r0, [sp, #20]
   2293e:	9304      	str	r3, [sp, #16]
   22940:	b10d      	cbz	r5, 22946 <_fputs_r+0x22>
   22942:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   22944:	b36b      	cbz	r3, 229a2 <_fputs_r+0x7e>
   22946:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22948:	f013 0f01 	tst.w	r3, #1
   2294c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22950:	b29a      	uxth	r2, r3
   22952:	d101      	bne.n	22958 <_fputs_r+0x34>
   22954:	0598      	lsls	r0, r3, #22
   22956:	d51d      	bpl.n	22994 <_fputs_r+0x70>
   22958:	0491      	lsls	r1, r2, #18
   2295a:	d406      	bmi.n	2296a <_fputs_r+0x46>
   2295c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2295e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   22966:	81a3      	strh	r3, [r4, #12]
   22968:	6662      	str	r2, [r4, #100]	; 0x64
   2296a:	aa03      	add	r2, sp, #12
   2296c:	4628      	mov	r0, r5
   2296e:	4621      	mov	r1, r4
   22970:	f000 f85c 	bl	22a2c <__sfvwrite_r>
   22974:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22976:	07da      	lsls	r2, r3, #31
   22978:	4605      	mov	r5, r0
   2297a:	d402      	bmi.n	22982 <_fputs_r+0x5e>
   2297c:	89a3      	ldrh	r3, [r4, #12]
   2297e:	059b      	lsls	r3, r3, #22
   22980:	d502      	bpl.n	22988 <_fputs_r+0x64>
   22982:	4628      	mov	r0, r5
   22984:	b007      	add	sp, #28
   22986:	bd30      	pop	{r4, r5, pc}
   22988:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2298a:	f000 fe9f 	bl	236cc <__retarget_lock_release_recursive>
   2298e:	4628      	mov	r0, r5
   22990:	b007      	add	sp, #28
   22992:	bd30      	pop	{r4, r5, pc}
   22994:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22996:	f000 fe97 	bl	236c8 <__retarget_lock_acquire_recursive>
   2299a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2299e:	b29a      	uxth	r2, r3
   229a0:	e7da      	b.n	22958 <_fputs_r+0x34>
   229a2:	4628      	mov	r0, r5
   229a4:	f7ff ff62 	bl	2286c <__sinit>
   229a8:	e7cd      	b.n	22946 <_fputs_r+0x22>
   229aa:	bf00      	nop

000229ac <fputs>:
   229ac:	b410      	push	{r4}
   229ae:	4c04      	ldr	r4, [pc, #16]	; (229c0 <fputs+0x14>)
   229b0:	4603      	mov	r3, r0
   229b2:	460a      	mov	r2, r1
   229b4:	6820      	ldr	r0, [r4, #0]
   229b6:	f85d 4b04 	ldr.w	r4, [sp], #4
   229ba:	4619      	mov	r1, r3
   229bc:	f7ff bfb2 	b.w	22924 <_fputs_r>
   229c0:	200057e4 	.word	0x200057e4

000229c4 <_vdprintf_r>:
   229c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   229c6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   229ca:	af04      	add	r7, sp, #16
   229cc:	9300      	str	r3, [sp, #0]
   229ce:	4613      	mov	r3, r2
   229d0:	f44f 7200 	mov.w	r2, #512	; 0x200
   229d4:	460e      	mov	r6, r1
   229d6:	9203      	str	r2, [sp, #12]
   229d8:	4639      	mov	r1, r7
   229da:	aa03      	add	r2, sp, #12
   229dc:	4605      	mov	r5, r0
   229de:	f000 fc05 	bl	231ec <_vasnprintf_r>
   229e2:	b188      	cbz	r0, 22a08 <_vdprintf_r+0x44>
   229e4:	4604      	mov	r4, r0
   229e6:	4602      	mov	r2, r0
   229e8:	9b03      	ldr	r3, [sp, #12]
   229ea:	4631      	mov	r1, r6
   229ec:	4628      	mov	r0, r5
   229ee:	f000 fc53 	bl	23298 <_write_r>
   229f2:	42bc      	cmp	r4, r7
   229f4:	9003      	str	r0, [sp, #12]
   229f6:	d004      	beq.n	22a02 <_vdprintf_r+0x3e>
   229f8:	4628      	mov	r0, r5
   229fa:	4621      	mov	r1, r4
   229fc:	f000 ffc2 	bl	23984 <_free_r>
   22a00:	9803      	ldr	r0, [sp, #12]
   22a02:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   22a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   22a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22a0c:	e7f9      	b.n	22a02 <_vdprintf_r+0x3e>
   22a0e:	bf00      	nop

00022a10 <vdprintf>:
   22a10:	b410      	push	{r4}
   22a12:	4c05      	ldr	r4, [pc, #20]	; (22a28 <vdprintf+0x18>)
   22a14:	4684      	mov	ip, r0
   22a16:	4613      	mov	r3, r2
   22a18:	6820      	ldr	r0, [r4, #0]
   22a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
   22a1e:	460a      	mov	r2, r1
   22a20:	4661      	mov	r1, ip
   22a22:	f7ff bfcf 	b.w	229c4 <_vdprintf_r>
   22a26:	bf00      	nop
   22a28:	200057e4 	.word	0x200057e4

00022a2c <__sfvwrite_r>:
   22a2c:	6893      	ldr	r3, [r2, #8]
   22a2e:	2b00      	cmp	r3, #0
   22a30:	f000 8085 	beq.w	22b3e <__sfvwrite_r+0x112>
   22a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a38:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   22a3c:	460c      	mov	r4, r1
   22a3e:	0719      	lsls	r1, r3, #28
   22a40:	4680      	mov	r8, r0
   22a42:	b083      	sub	sp, #12
   22a44:	4617      	mov	r7, r2
   22a46:	b298      	uxth	r0, r3
   22a48:	d525      	bpl.n	22a96 <__sfvwrite_r+0x6a>
   22a4a:	6923      	ldr	r3, [r4, #16]
   22a4c:	b31b      	cbz	r3, 22a96 <__sfvwrite_r+0x6a>
   22a4e:	f010 0302 	ands.w	r3, r0, #2
   22a52:	683d      	ldr	r5, [r7, #0]
   22a54:	d02d      	beq.n	22ab2 <__sfvwrite_r+0x86>
   22a56:	f04f 0a00 	mov.w	sl, #0
   22a5a:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 22d1c <__sfvwrite_r+0x2f0>
   22a5e:	4656      	mov	r6, sl
   22a60:	46b9      	mov	r9, r7
   22a62:	455e      	cmp	r6, fp
   22a64:	4633      	mov	r3, r6
   22a66:	4652      	mov	r2, sl
   22a68:	bf28      	it	cs
   22a6a:	465b      	movcs	r3, fp
   22a6c:	4640      	mov	r0, r8
   22a6e:	2e00      	cmp	r6, #0
   22a70:	d052      	beq.n	22b18 <__sfvwrite_r+0xec>
   22a72:	69e1      	ldr	r1, [r4, #28]
   22a74:	6a67      	ldr	r7, [r4, #36]	; 0x24
   22a76:	47b8      	blx	r7
   22a78:	2800      	cmp	r0, #0
   22a7a:	dd56      	ble.n	22b2a <__sfvwrite_r+0xfe>
   22a7c:	f8d9 3008 	ldr.w	r3, [r9, #8]
   22a80:	1a1b      	subs	r3, r3, r0
   22a82:	4482      	add	sl, r0
   22a84:	1a36      	subs	r6, r6, r0
   22a86:	f8c9 3008 	str.w	r3, [r9, #8]
   22a8a:	2b00      	cmp	r3, #0
   22a8c:	d1e9      	bne.n	22a62 <__sfvwrite_r+0x36>
   22a8e:	2000      	movs	r0, #0
   22a90:	b003      	add	sp, #12
   22a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22a96:	4621      	mov	r1, r4
   22a98:	4640      	mov	r0, r8
   22a9a:	f000 f9cb 	bl	22e34 <__swsetup_r>
   22a9e:	2800      	cmp	r0, #0
   22aa0:	f040 8138 	bne.w	22d14 <__sfvwrite_r+0x2e8>
   22aa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22aa8:	683d      	ldr	r5, [r7, #0]
   22aaa:	b298      	uxth	r0, r3
   22aac:	f010 0302 	ands.w	r3, r0, #2
   22ab0:	d1d1      	bne.n	22a56 <__sfvwrite_r+0x2a>
   22ab2:	f010 0901 	ands.w	r9, r0, #1
   22ab6:	d144      	bne.n	22b42 <__sfvwrite_r+0x116>
   22ab8:	464e      	mov	r6, r9
   22aba:	9700      	str	r7, [sp, #0]
   22abc:	b346      	cbz	r6, 22b10 <__sfvwrite_r+0xe4>
   22abe:	0582      	lsls	r2, r0, #22
   22ac0:	f8d4 b008 	ldr.w	fp, [r4, #8]
   22ac4:	f140 8085 	bpl.w	22bd2 <__sfvwrite_r+0x1a6>
   22ac8:	45b3      	cmp	fp, r6
   22aca:	465a      	mov	r2, fp
   22acc:	f200 80b4 	bhi.w	22c38 <__sfvwrite_r+0x20c>
   22ad0:	f410 6f90 	tst.w	r0, #1152	; 0x480
   22ad4:	f040 80c1 	bne.w	22c5a <__sfvwrite_r+0x22e>
   22ad8:	6820      	ldr	r0, [r4, #0]
   22ada:	9201      	str	r2, [sp, #4]
   22adc:	4649      	mov	r1, r9
   22ade:	f000 fa3f 	bl	22f60 <memmove>
   22ae2:	68a3      	ldr	r3, [r4, #8]
   22ae4:	9a01      	ldr	r2, [sp, #4]
   22ae6:	eba3 010b 	sub.w	r1, r3, fp
   22aea:	6823      	ldr	r3, [r4, #0]
   22aec:	60a1      	str	r1, [r4, #8]
   22aee:	4413      	add	r3, r2
   22af0:	46b2      	mov	sl, r6
   22af2:	6023      	str	r3, [r4, #0]
   22af4:	2600      	movs	r6, #0
   22af6:	9a00      	ldr	r2, [sp, #0]
   22af8:	6893      	ldr	r3, [r2, #8]
   22afa:	eba3 030a 	sub.w	r3, r3, sl
   22afe:	44d1      	add	r9, sl
   22b00:	6093      	str	r3, [r2, #8]
   22b02:	2b00      	cmp	r3, #0
   22b04:	d0c3      	beq.n	22a8e <__sfvwrite_r+0x62>
   22b06:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   22b0a:	b280      	uxth	r0, r0
   22b0c:	2e00      	cmp	r6, #0
   22b0e:	d1d6      	bne.n	22abe <__sfvwrite_r+0x92>
   22b10:	e9d5 9600 	ldrd	r9, r6, [r5]
   22b14:	3508      	adds	r5, #8
   22b16:	e7d1      	b.n	22abc <__sfvwrite_r+0x90>
   22b18:	e9d5 a600 	ldrd	sl, r6, [r5]
   22b1c:	3508      	adds	r5, #8
   22b1e:	e7a0      	b.n	22a62 <__sfvwrite_r+0x36>
   22b20:	4621      	mov	r1, r4
   22b22:	4640      	mov	r0, r8
   22b24:	f003 fb4e 	bl	261c4 <_fflush_r>
   22b28:	b388      	cbz	r0, 22b8e <__sfvwrite_r+0x162>
   22b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22b36:	81a3      	strh	r3, [r4, #12]
   22b38:	b003      	add	sp, #12
   22b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b3e:	2000      	movs	r0, #0
   22b40:	4770      	bx	lr
   22b42:	461e      	mov	r6, r3
   22b44:	46ba      	mov	sl, r7
   22b46:	4699      	mov	r9, r3
   22b48:	4618      	mov	r0, r3
   22b4a:	9500      	str	r5, [sp, #0]
   22b4c:	461f      	mov	r7, r3
   22b4e:	b366      	cbz	r6, 22baa <__sfvwrite_r+0x17e>
   22b50:	2800      	cmp	r0, #0
   22b52:	d032      	beq.n	22bba <__sfvwrite_r+0x18e>
   22b54:	464a      	mov	r2, r9
   22b56:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   22b5a:	6820      	ldr	r0, [r4, #0]
   22b5c:	68a5      	ldr	r5, [r4, #8]
   22b5e:	42b2      	cmp	r2, r6
   22b60:	bf28      	it	cs
   22b62:	4632      	movcs	r2, r6
   22b64:	4288      	cmp	r0, r1
   22b66:	d904      	bls.n	22b72 <__sfvwrite_r+0x146>
   22b68:	eb05 0b03 	add.w	fp, r5, r3
   22b6c:	455a      	cmp	r2, fp
   22b6e:	f300 80a7 	bgt.w	22cc0 <__sfvwrite_r+0x294>
   22b72:	4293      	cmp	r3, r2
   22b74:	dc64      	bgt.n	22c40 <__sfvwrite_r+0x214>
   22b76:	69e1      	ldr	r1, [r4, #28]
   22b78:	6a65      	ldr	r5, [r4, #36]	; 0x24
   22b7a:	463a      	mov	r2, r7
   22b7c:	4640      	mov	r0, r8
   22b7e:	47a8      	blx	r5
   22b80:	f1b0 0b00 	subs.w	fp, r0, #0
   22b84:	ddd1      	ble.n	22b2a <__sfvwrite_r+0xfe>
   22b86:	ebb9 090b 	subs.w	r9, r9, fp
   22b8a:	d0c9      	beq.n	22b20 <__sfvwrite_r+0xf4>
   22b8c:	2001      	movs	r0, #1
   22b8e:	f8da 3008 	ldr.w	r3, [sl, #8]
   22b92:	eba3 030b 	sub.w	r3, r3, fp
   22b96:	445f      	add	r7, fp
   22b98:	eba6 060b 	sub.w	r6, r6, fp
   22b9c:	f8ca 3008 	str.w	r3, [sl, #8]
   22ba0:	2b00      	cmp	r3, #0
   22ba2:	f43f af74 	beq.w	22a8e <__sfvwrite_r+0x62>
   22ba6:	2e00      	cmp	r6, #0
   22ba8:	d1d2      	bne.n	22b50 <__sfvwrite_r+0x124>
   22baa:	9a00      	ldr	r2, [sp, #0]
   22bac:	6856      	ldr	r6, [r2, #4]
   22bae:	4613      	mov	r3, r2
   22bb0:	3208      	adds	r2, #8
   22bb2:	9200      	str	r2, [sp, #0]
   22bb4:	2e00      	cmp	r6, #0
   22bb6:	d0f8      	beq.n	22baa <__sfvwrite_r+0x17e>
   22bb8:	681f      	ldr	r7, [r3, #0]
   22bba:	4632      	mov	r2, r6
   22bbc:	210a      	movs	r1, #10
   22bbe:	4638      	mov	r0, r7
   22bc0:	f000 fd86 	bl	236d0 <memchr>
   22bc4:	2800      	cmp	r0, #0
   22bc6:	f000 809c 	beq.w	22d02 <__sfvwrite_r+0x2d6>
   22bca:	3001      	adds	r0, #1
   22bcc:	eba0 0907 	sub.w	r9, r0, r7
   22bd0:	e7c0      	b.n	22b54 <__sfvwrite_r+0x128>
   22bd2:	6820      	ldr	r0, [r4, #0]
   22bd4:	6923      	ldr	r3, [r4, #16]
   22bd6:	4298      	cmp	r0, r3
   22bd8:	d816      	bhi.n	22c08 <__sfvwrite_r+0x1dc>
   22bda:	6962      	ldr	r2, [r4, #20]
   22bdc:	42b2      	cmp	r2, r6
   22bde:	d813      	bhi.n	22c08 <__sfvwrite_r+0x1dc>
   22be0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   22be4:	42b3      	cmp	r3, r6
   22be6:	bf28      	it	cs
   22be8:	4633      	movcs	r3, r6
   22bea:	69e1      	ldr	r1, [r4, #28]
   22bec:	fb93 f3f2 	sdiv	r3, r3, r2
   22bf0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   22bf2:	fb02 f303 	mul.w	r3, r2, r3
   22bf6:	4640      	mov	r0, r8
   22bf8:	464a      	mov	r2, r9
   22bfa:	47b8      	blx	r7
   22bfc:	f1b0 0a00 	subs.w	sl, r0, #0
   22c00:	dd93      	ble.n	22b2a <__sfvwrite_r+0xfe>
   22c02:	eba6 060a 	sub.w	r6, r6, sl
   22c06:	e776      	b.n	22af6 <__sfvwrite_r+0xca>
   22c08:	45b3      	cmp	fp, r6
   22c0a:	46da      	mov	sl, fp
   22c0c:	bf28      	it	cs
   22c0e:	46b2      	movcs	sl, r6
   22c10:	4652      	mov	r2, sl
   22c12:	4649      	mov	r1, r9
   22c14:	f000 f9a4 	bl	22f60 <memmove>
   22c18:	68a3      	ldr	r3, [r4, #8]
   22c1a:	6822      	ldr	r2, [r4, #0]
   22c1c:	eba3 030a 	sub.w	r3, r3, sl
   22c20:	4452      	add	r2, sl
   22c22:	60a3      	str	r3, [r4, #8]
   22c24:	6022      	str	r2, [r4, #0]
   22c26:	2b00      	cmp	r3, #0
   22c28:	d1eb      	bne.n	22c02 <__sfvwrite_r+0x1d6>
   22c2a:	4621      	mov	r1, r4
   22c2c:	4640      	mov	r0, r8
   22c2e:	f003 fac9 	bl	261c4 <_fflush_r>
   22c32:	2800      	cmp	r0, #0
   22c34:	d0e5      	beq.n	22c02 <__sfvwrite_r+0x1d6>
   22c36:	e778      	b.n	22b2a <__sfvwrite_r+0xfe>
   22c38:	6820      	ldr	r0, [r4, #0]
   22c3a:	46b3      	mov	fp, r6
   22c3c:	4632      	mov	r2, r6
   22c3e:	e74c      	b.n	22ada <__sfvwrite_r+0xae>
   22c40:	4639      	mov	r1, r7
   22c42:	9201      	str	r2, [sp, #4]
   22c44:	f000 f98c 	bl	22f60 <memmove>
   22c48:	9a01      	ldr	r2, [sp, #4]
   22c4a:	68a3      	ldr	r3, [r4, #8]
   22c4c:	1a9b      	subs	r3, r3, r2
   22c4e:	60a3      	str	r3, [r4, #8]
   22c50:	6823      	ldr	r3, [r4, #0]
   22c52:	4413      	add	r3, r2
   22c54:	6023      	str	r3, [r4, #0]
   22c56:	4693      	mov	fp, r2
   22c58:	e795      	b.n	22b86 <__sfvwrite_r+0x15a>
   22c5a:	6823      	ldr	r3, [r4, #0]
   22c5c:	6921      	ldr	r1, [r4, #16]
   22c5e:	eba3 0b01 	sub.w	fp, r3, r1
   22c62:	6963      	ldr	r3, [r4, #20]
   22c64:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   22c68:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   22c6c:	f10b 0301 	add.w	r3, fp, #1
   22c70:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   22c74:	4433      	add	r3, r6
   22c76:	4553      	cmp	r3, sl
   22c78:	4652      	mov	r2, sl
   22c7a:	bf84      	itt	hi
   22c7c:	469a      	movhi	sl, r3
   22c7e:	4652      	movhi	r2, sl
   22c80:	0543      	lsls	r3, r0, #21
   22c82:	d52c      	bpl.n	22cde <__sfvwrite_r+0x2b2>
   22c84:	4611      	mov	r1, r2
   22c86:	4640      	mov	r0, r8
   22c88:	f7ff f836 	bl	21cf8 <_malloc_r>
   22c8c:	2800      	cmp	r0, #0
   22c8e:	d03b      	beq.n	22d08 <__sfvwrite_r+0x2dc>
   22c90:	465a      	mov	r2, fp
   22c92:	6921      	ldr	r1, [r4, #16]
   22c94:	9001      	str	r0, [sp, #4]
   22c96:	f7f4 fb2b 	bl	172f0 <memcpy>
   22c9a:	89a2      	ldrh	r2, [r4, #12]
   22c9c:	9b01      	ldr	r3, [sp, #4]
   22c9e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   22ca2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   22ca6:	81a2      	strh	r2, [r4, #12]
   22ca8:	eb03 000b 	add.w	r0, r3, fp
   22cac:	6123      	str	r3, [r4, #16]
   22cae:	ebaa 030b 	sub.w	r3, sl, fp
   22cb2:	f8c4 a014 	str.w	sl, [r4, #20]
   22cb6:	60a3      	str	r3, [r4, #8]
   22cb8:	6020      	str	r0, [r4, #0]
   22cba:	46b3      	mov	fp, r6
   22cbc:	4632      	mov	r2, r6
   22cbe:	e70c      	b.n	22ada <__sfvwrite_r+0xae>
   22cc0:	4639      	mov	r1, r7
   22cc2:	465a      	mov	r2, fp
   22cc4:	f000 f94c 	bl	22f60 <memmove>
   22cc8:	6823      	ldr	r3, [r4, #0]
   22cca:	445b      	add	r3, fp
   22ccc:	6023      	str	r3, [r4, #0]
   22cce:	4621      	mov	r1, r4
   22cd0:	4640      	mov	r0, r8
   22cd2:	f003 fa77 	bl	261c4 <_fflush_r>
   22cd6:	2800      	cmp	r0, #0
   22cd8:	f43f af55 	beq.w	22b86 <__sfvwrite_r+0x15a>
   22cdc:	e725      	b.n	22b2a <__sfvwrite_r+0xfe>
   22cde:	4640      	mov	r0, r8
   22ce0:	f7ff fad2 	bl	22288 <_realloc_r>
   22ce4:	4603      	mov	r3, r0
   22ce6:	2800      	cmp	r0, #0
   22ce8:	d1de      	bne.n	22ca8 <__sfvwrite_r+0x27c>
   22cea:	6921      	ldr	r1, [r4, #16]
   22cec:	4640      	mov	r0, r8
   22cee:	f000 fe49 	bl	23984 <_free_r>
   22cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22cf6:	220c      	movs	r2, #12
   22cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   22cfc:	f8c8 2000 	str.w	r2, [r8]
   22d00:	e715      	b.n	22b2e <__sfvwrite_r+0x102>
   22d02:	1c72      	adds	r2, r6, #1
   22d04:	4691      	mov	r9, r2
   22d06:	e726      	b.n	22b56 <__sfvwrite_r+0x12a>
   22d08:	220c      	movs	r2, #12
   22d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22d0e:	f8c8 2000 	str.w	r2, [r8]
   22d12:	e70c      	b.n	22b2e <__sfvwrite_r+0x102>
   22d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d18:	e6ba      	b.n	22a90 <__sfvwrite_r+0x64>
   22d1a:	bf00      	nop
   22d1c:	7ffffc00 	.word	0x7ffffc00

00022d20 <_fwalk_sglue>:
   22d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22d24:	4680      	mov	r8, r0
   22d26:	460f      	mov	r7, r1
   22d28:	4616      	mov	r6, r2
   22d2a:	f04f 0900 	mov.w	r9, #0
   22d2e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   22d32:	3d01      	subs	r5, #1
   22d34:	d411      	bmi.n	22d5a <_fwalk_sglue+0x3a>
   22d36:	89a3      	ldrh	r3, [r4, #12]
   22d38:	2b01      	cmp	r3, #1
   22d3a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   22d3e:	d908      	bls.n	22d52 <_fwalk_sglue+0x32>
   22d40:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   22d44:	3301      	adds	r3, #1
   22d46:	4621      	mov	r1, r4
   22d48:	d003      	beq.n	22d52 <_fwalk_sglue+0x32>
   22d4a:	4640      	mov	r0, r8
   22d4c:	47b8      	blx	r7
   22d4e:	ea49 0900 	orr.w	r9, r9, r0
   22d52:	1c6b      	adds	r3, r5, #1
   22d54:	f104 0468 	add.w	r4, r4, #104	; 0x68
   22d58:	d1ed      	bne.n	22d36 <_fwalk_sglue+0x16>
   22d5a:	6836      	ldr	r6, [r6, #0]
   22d5c:	2e00      	cmp	r6, #0
   22d5e:	d1e6      	bne.n	22d2e <_fwalk_sglue+0xe>
   22d60:	4648      	mov	r0, r9
   22d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22d66:	bf00      	nop

00022d68 <_fwrite_r>:
   22d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22d6c:	b086      	sub	sp, #24
   22d6e:	fb02 f703 	mul.w	r7, r2, r3
   22d72:	461d      	mov	r5, r3
   22d74:	ab01      	add	r3, sp, #4
   22d76:	9303      	str	r3, [sp, #12]
   22d78:	2301      	movs	r3, #1
   22d7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   22d7c:	9101      	str	r1, [sp, #4]
   22d7e:	4690      	mov	r8, r2
   22d80:	9702      	str	r7, [sp, #8]
   22d82:	9705      	str	r7, [sp, #20]
   22d84:	9304      	str	r3, [sp, #16]
   22d86:	4606      	mov	r6, r0
   22d88:	b110      	cbz	r0, 22d90 <_fwrite_r+0x28>
   22d8a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   22d8c:	2b00      	cmp	r3, #0
   22d8e:	d03d      	beq.n	22e0c <_fwrite_r+0xa4>
   22d90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22d92:	f013 0f01 	tst.w	r3, #1
   22d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22d9a:	b29a      	uxth	r2, r3
   22d9c:	d101      	bne.n	22da2 <_fwrite_r+0x3a>
   22d9e:	0599      	lsls	r1, r3, #22
   22da0:	d52d      	bpl.n	22dfe <_fwrite_r+0x96>
   22da2:	0492      	lsls	r2, r2, #18
   22da4:	d406      	bmi.n	22db4 <_fwrite_r+0x4c>
   22da6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22daa:	81a3      	strh	r3, [r4, #12]
   22dac:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22dae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   22db2:	6663      	str	r3, [r4, #100]	; 0x64
   22db4:	4630      	mov	r0, r6
   22db6:	aa03      	add	r2, sp, #12
   22db8:	4621      	mov	r1, r4
   22dba:	f7ff fe37 	bl	22a2c <__sfvwrite_r>
   22dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22dc0:	b178      	cbz	r0, 22de2 <_fwrite_r+0x7a>
   22dc2:	07da      	lsls	r2, r3, #31
   22dc4:	d506      	bpl.n	22dd4 <_fwrite_r+0x6c>
   22dc6:	9b05      	ldr	r3, [sp, #20]
   22dc8:	1aff      	subs	r7, r7, r3
   22dca:	fbb7 f0f8 	udiv	r0, r7, r8
   22dce:	b006      	add	sp, #24
   22dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22dd4:	89a3      	ldrh	r3, [r4, #12]
   22dd6:	059b      	lsls	r3, r3, #22
   22dd8:	d4f5      	bmi.n	22dc6 <_fwrite_r+0x5e>
   22dda:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22ddc:	f000 fc76 	bl	236cc <__retarget_lock_release_recursive>
   22de0:	e7f1      	b.n	22dc6 <_fwrite_r+0x5e>
   22de2:	07d8      	lsls	r0, r3, #31
   22de4:	d407      	bmi.n	22df6 <_fwrite_r+0x8e>
   22de6:	89a3      	ldrh	r3, [r4, #12]
   22de8:	0599      	lsls	r1, r3, #22
   22dea:	d404      	bmi.n	22df6 <_fwrite_r+0x8e>
   22dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22dee:	f000 fc6d 	bl	236cc <__retarget_lock_release_recursive>
   22df2:	4628      	mov	r0, r5
   22df4:	e7eb      	b.n	22dce <_fwrite_r+0x66>
   22df6:	4628      	mov	r0, r5
   22df8:	b006      	add	sp, #24
   22dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22e00:	f000 fc62 	bl	236c8 <__retarget_lock_acquire_recursive>
   22e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22e08:	b29a      	uxth	r2, r3
   22e0a:	e7ca      	b.n	22da2 <_fwrite_r+0x3a>
   22e0c:	f7ff fd2e 	bl	2286c <__sinit>
   22e10:	e7be      	b.n	22d90 <_fwrite_r+0x28>
   22e12:	bf00      	nop

00022e14 <fwrite>:
   22e14:	b510      	push	{r4, lr}
   22e16:	4c06      	ldr	r4, [pc, #24]	; (22e30 <fwrite+0x1c>)
   22e18:	b082      	sub	sp, #8
   22e1a:	4684      	mov	ip, r0
   22e1c:	9300      	str	r3, [sp, #0]
   22e1e:	6820      	ldr	r0, [r4, #0]
   22e20:	4613      	mov	r3, r2
   22e22:	460a      	mov	r2, r1
   22e24:	4661      	mov	r1, ip
   22e26:	f7ff ff9f 	bl	22d68 <_fwrite_r>
   22e2a:	b002      	add	sp, #8
   22e2c:	bd10      	pop	{r4, pc}
   22e2e:	bf00      	nop
   22e30:	200057e4 	.word	0x200057e4

00022e34 <__swsetup_r>:
   22e34:	b538      	push	{r3, r4, r5, lr}
   22e36:	4b31      	ldr	r3, [pc, #196]	; (22efc <__swsetup_r+0xc8>)
   22e38:	681b      	ldr	r3, [r3, #0]
   22e3a:	4605      	mov	r5, r0
   22e3c:	460c      	mov	r4, r1
   22e3e:	b113      	cbz	r3, 22e46 <__swsetup_r+0x12>
   22e40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   22e42:	2a00      	cmp	r2, #0
   22e44:	d04e      	beq.n	22ee4 <__swsetup_r+0xb0>
   22e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22e4a:	0718      	lsls	r0, r3, #28
   22e4c:	b29a      	uxth	r2, r3
   22e4e:	d51c      	bpl.n	22e8a <__swsetup_r+0x56>
   22e50:	6921      	ldr	r1, [r4, #16]
   22e52:	b329      	cbz	r1, 22ea0 <__swsetup_r+0x6c>
   22e54:	f012 0001 	ands.w	r0, r2, #1
   22e58:	d007      	beq.n	22e6a <__swsetup_r+0x36>
   22e5a:	2000      	movs	r0, #0
   22e5c:	60a0      	str	r0, [r4, #8]
   22e5e:	6960      	ldr	r0, [r4, #20]
   22e60:	4240      	negs	r0, r0
   22e62:	61a0      	str	r0, [r4, #24]
   22e64:	b139      	cbz	r1, 22e76 <__swsetup_r+0x42>
   22e66:	2000      	movs	r0, #0
   22e68:	bd38      	pop	{r3, r4, r5, pc}
   22e6a:	0795      	lsls	r5, r2, #30
   22e6c:	bf58      	it	pl
   22e6e:	6960      	ldrpl	r0, [r4, #20]
   22e70:	60a0      	str	r0, [r4, #8]
   22e72:	2900      	cmp	r1, #0
   22e74:	d1f7      	bne.n	22e66 <__swsetup_r+0x32>
   22e76:	0612      	lsls	r2, r2, #24
   22e78:	bf58      	it	pl
   22e7a:	4608      	movpl	r0, r1
   22e7c:	d5f4      	bpl.n	22e68 <__swsetup_r+0x34>
   22e7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22e82:	81a3      	strh	r3, [r4, #12]
   22e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22e88:	bd38      	pop	{r3, r4, r5, pc}
   22e8a:	06d1      	lsls	r1, r2, #27
   22e8c:	d52e      	bpl.n	22eec <__swsetup_r+0xb8>
   22e8e:	0752      	lsls	r2, r2, #29
   22e90:	d414      	bmi.n	22ebc <__swsetup_r+0x88>
   22e92:	6921      	ldr	r1, [r4, #16]
   22e94:	f043 0308 	orr.w	r3, r3, #8
   22e98:	81a3      	strh	r3, [r4, #12]
   22e9a:	b29a      	uxth	r2, r3
   22e9c:	2900      	cmp	r1, #0
   22e9e:	d1d9      	bne.n	22e54 <__swsetup_r+0x20>
   22ea0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   22ea4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   22ea8:	d0d4      	beq.n	22e54 <__swsetup_r+0x20>
   22eaa:	4621      	mov	r1, r4
   22eac:	4628      	mov	r0, r5
   22eae:	f002 fc29 	bl	25704 <__smakebuf_r>
   22eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22eb6:	6921      	ldr	r1, [r4, #16]
   22eb8:	b29a      	uxth	r2, r3
   22eba:	e7cb      	b.n	22e54 <__swsetup_r+0x20>
   22ebc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22ebe:	b151      	cbz	r1, 22ed6 <__swsetup_r+0xa2>
   22ec0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   22ec4:	4291      	cmp	r1, r2
   22ec6:	d004      	beq.n	22ed2 <__swsetup_r+0x9e>
   22ec8:	4628      	mov	r0, r5
   22eca:	f000 fd5b 	bl	23984 <_free_r>
   22ece:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22ed2:	2200      	movs	r2, #0
   22ed4:	6322      	str	r2, [r4, #48]	; 0x30
   22ed6:	6921      	ldr	r1, [r4, #16]
   22ed8:	2200      	movs	r2, #0
   22eda:	e9c4 1200 	strd	r1, r2, [r4]
   22ede:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   22ee2:	e7d7      	b.n	22e94 <__swsetup_r+0x60>
   22ee4:	4618      	mov	r0, r3
   22ee6:	f7ff fcc1 	bl	2286c <__sinit>
   22eea:	e7ac      	b.n	22e46 <__swsetup_r+0x12>
   22eec:	2209      	movs	r2, #9
   22eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22ef2:	602a      	str	r2, [r5, #0]
   22ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22ef8:	81a3      	strh	r3, [r4, #12]
   22efa:	bd38      	pop	{r3, r4, r5, pc}
   22efc:	200057e4 	.word	0x200057e4

00022f00 <memcmp>:
   22f00:	2a03      	cmp	r2, #3
   22f02:	b570      	push	{r4, r5, r6, lr}
   22f04:	d914      	bls.n	22f30 <memcmp+0x30>
   22f06:	ea40 0301 	orr.w	r3, r0, r1
   22f0a:	079b      	lsls	r3, r3, #30
   22f0c:	d122      	bne.n	22f54 <memcmp+0x54>
   22f0e:	4604      	mov	r4, r0
   22f10:	460b      	mov	r3, r1
   22f12:	4619      	mov	r1, r3
   22f14:	4620      	mov	r0, r4
   22f16:	680e      	ldr	r6, [r1, #0]
   22f18:	6805      	ldr	r5, [r0, #0]
   22f1a:	42b5      	cmp	r5, r6
   22f1c:	f104 0404 	add.w	r4, r4, #4
   22f20:	f103 0304 	add.w	r3, r3, #4
   22f24:	d116      	bne.n	22f54 <memcmp+0x54>
   22f26:	3a04      	subs	r2, #4
   22f28:	2a03      	cmp	r2, #3
   22f2a:	4620      	mov	r0, r4
   22f2c:	4619      	mov	r1, r3
   22f2e:	d8f0      	bhi.n	22f12 <memcmp+0x12>
   22f30:	1e54      	subs	r4, r2, #1
   22f32:	b19a      	cbz	r2, 22f5c <memcmp+0x5c>
   22f34:	1e42      	subs	r2, r0, #1
   22f36:	3901      	subs	r1, #1
   22f38:	e001      	b.n	22f3e <memcmp+0x3e>
   22f3a:	18c3      	adds	r3, r0, r3
   22f3c:	d00c      	beq.n	22f58 <memcmp+0x58>
   22f3e:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   22f42:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   22f46:	45e6      	cmp	lr, ip
   22f48:	eba4 0302 	sub.w	r3, r4, r2
   22f4c:	d0f5      	beq.n	22f3a <memcmp+0x3a>
   22f4e:	ebae 000c 	sub.w	r0, lr, ip
   22f52:	bd70      	pop	{r4, r5, r6, pc}
   22f54:	1e54      	subs	r4, r2, #1
   22f56:	e7ed      	b.n	22f34 <memcmp+0x34>
   22f58:	4618      	mov	r0, r3
   22f5a:	bd70      	pop	{r4, r5, r6, pc}
   22f5c:	4610      	mov	r0, r2
   22f5e:	bd70      	pop	{r4, r5, r6, pc}

00022f60 <memmove>:
   22f60:	4288      	cmp	r0, r1
   22f62:	d90d      	bls.n	22f80 <memmove+0x20>
   22f64:	188b      	adds	r3, r1, r2
   22f66:	4283      	cmp	r3, r0
   22f68:	d90a      	bls.n	22f80 <memmove+0x20>
   22f6a:	eb00 0c02 	add.w	ip, r0, r2
   22f6e:	b1ba      	cbz	r2, 22fa0 <memmove+0x40>
   22f70:	4662      	mov	r2, ip
   22f72:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   22f76:	f802 cd01 	strb.w	ip, [r2, #-1]!
   22f7a:	4299      	cmp	r1, r3
   22f7c:	d1f9      	bne.n	22f72 <memmove+0x12>
   22f7e:	4770      	bx	lr
   22f80:	2a0f      	cmp	r2, #15
   22f82:	d80e      	bhi.n	22fa2 <memmove+0x42>
   22f84:	4603      	mov	r3, r0
   22f86:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   22f8a:	b14a      	cbz	r2, 22fa0 <memmove+0x40>
   22f8c:	f10c 0c01 	add.w	ip, ip, #1
   22f90:	3b01      	subs	r3, #1
   22f92:	448c      	add	ip, r1
   22f94:	f811 2b01 	ldrb.w	r2, [r1], #1
   22f98:	f803 2f01 	strb.w	r2, [r3, #1]!
   22f9c:	4561      	cmp	r1, ip
   22f9e:	d1f9      	bne.n	22f94 <memmove+0x34>
   22fa0:	4770      	bx	lr
   22fa2:	ea40 0301 	orr.w	r3, r0, r1
   22fa6:	079b      	lsls	r3, r3, #30
   22fa8:	d150      	bne.n	2304c <memmove+0xec>
   22faa:	f1a2 0310 	sub.w	r3, r2, #16
   22fae:	b570      	push	{r4, r5, r6, lr}
   22fb0:	f101 0c20 	add.w	ip, r1, #32
   22fb4:	f023 050f 	bic.w	r5, r3, #15
   22fb8:	f101 0e10 	add.w	lr, r1, #16
   22fbc:	f100 0410 	add.w	r4, r0, #16
   22fc0:	44ac      	add	ip, r5
   22fc2:	091b      	lsrs	r3, r3, #4
   22fc4:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   22fc8:	f844 5c10 	str.w	r5, [r4, #-16]
   22fcc:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   22fd0:	f844 5c0c 	str.w	r5, [r4, #-12]
   22fd4:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   22fd8:	f844 5c08 	str.w	r5, [r4, #-8]
   22fdc:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   22fe0:	f844 5c04 	str.w	r5, [r4, #-4]
   22fe4:	f10e 0e10 	add.w	lr, lr, #16
   22fe8:	45e6      	cmp	lr, ip
   22fea:	f104 0410 	add.w	r4, r4, #16
   22fee:	d1e9      	bne.n	22fc4 <memmove+0x64>
   22ff0:	3301      	adds	r3, #1
   22ff2:	f012 0f0c 	tst.w	r2, #12
   22ff6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   22ffa:	f002 040f 	and.w	r4, r2, #15
   22ffe:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   23002:	d027      	beq.n	23054 <memmove+0xf4>
   23004:	3c04      	subs	r4, #4
   23006:	f024 0603 	bic.w	r6, r4, #3
   2300a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   2300e:	441e      	add	r6, r3
   23010:	1f1c      	subs	r4, r3, #4
   23012:	468e      	mov	lr, r1
   23014:	f85e 5b04 	ldr.w	r5, [lr], #4
   23018:	f844 5f04 	str.w	r5, [r4, #4]!
   2301c:	42b4      	cmp	r4, r6
   2301e:	d1f9      	bne.n	23014 <memmove+0xb4>
   23020:	f10c 0401 	add.w	r4, ip, #1
   23024:	f002 0203 	and.w	r2, r2, #3
   23028:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   2302c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   23030:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   23034:	b14a      	cbz	r2, 2304a <memmove+0xea>
   23036:	f10c 0c01 	add.w	ip, ip, #1
   2303a:	3b01      	subs	r3, #1
   2303c:	448c      	add	ip, r1
   2303e:	f811 2b01 	ldrb.w	r2, [r1], #1
   23042:	f803 2f01 	strb.w	r2, [r3, #1]!
   23046:	4561      	cmp	r1, ip
   23048:	d1f9      	bne.n	2303e <memmove+0xde>
   2304a:	bd70      	pop	{r4, r5, r6, pc}
   2304c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   23050:	4603      	mov	r3, r0
   23052:	e79b      	b.n	22f8c <memmove+0x2c>
   23054:	4622      	mov	r2, r4
   23056:	e7eb      	b.n	23030 <memmove+0xd0>

00023058 <memset>:
   23058:	0783      	lsls	r3, r0, #30
   2305a:	b530      	push	{r4, r5, lr}
   2305c:	d048      	beq.n	230f0 <memset+0x98>
   2305e:	1e54      	subs	r4, r2, #1
   23060:	2a00      	cmp	r2, #0
   23062:	d03f      	beq.n	230e4 <memset+0x8c>
   23064:	b2ca      	uxtb	r2, r1
   23066:	4603      	mov	r3, r0
   23068:	e001      	b.n	2306e <memset+0x16>
   2306a:	3c01      	subs	r4, #1
   2306c:	d33a      	bcc.n	230e4 <memset+0x8c>
   2306e:	f803 2b01 	strb.w	r2, [r3], #1
   23072:	079d      	lsls	r5, r3, #30
   23074:	d1f9      	bne.n	2306a <memset+0x12>
   23076:	2c03      	cmp	r4, #3
   23078:	d92d      	bls.n	230d6 <memset+0x7e>
   2307a:	b2cd      	uxtb	r5, r1
   2307c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   23080:	2c0f      	cmp	r4, #15
   23082:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   23086:	d936      	bls.n	230f6 <memset+0x9e>
   23088:	f1a4 0210 	sub.w	r2, r4, #16
   2308c:	f022 0c0f 	bic.w	ip, r2, #15
   23090:	f103 0e20 	add.w	lr, r3, #32
   23094:	44e6      	add	lr, ip
   23096:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   2309a:	f103 0210 	add.w	r2, r3, #16
   2309e:	e942 5504 	strd	r5, r5, [r2, #-16]
   230a2:	e942 5502 	strd	r5, r5, [r2, #-8]
   230a6:	3210      	adds	r2, #16
   230a8:	4572      	cmp	r2, lr
   230aa:	d1f8      	bne.n	2309e <memset+0x46>
   230ac:	f10c 0201 	add.w	r2, ip, #1
   230b0:	f014 0f0c 	tst.w	r4, #12
   230b4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   230b8:	f004 0c0f 	and.w	ip, r4, #15
   230bc:	d013      	beq.n	230e6 <memset+0x8e>
   230be:	f1ac 0304 	sub.w	r3, ip, #4
   230c2:	f023 0303 	bic.w	r3, r3, #3
   230c6:	3304      	adds	r3, #4
   230c8:	4413      	add	r3, r2
   230ca:	f842 5b04 	str.w	r5, [r2], #4
   230ce:	4293      	cmp	r3, r2
   230d0:	d1fb      	bne.n	230ca <memset+0x72>
   230d2:	f00c 0403 	and.w	r4, ip, #3
   230d6:	b12c      	cbz	r4, 230e4 <memset+0x8c>
   230d8:	b2c9      	uxtb	r1, r1
   230da:	441c      	add	r4, r3
   230dc:	f803 1b01 	strb.w	r1, [r3], #1
   230e0:	429c      	cmp	r4, r3
   230e2:	d1fb      	bne.n	230dc <memset+0x84>
   230e4:	bd30      	pop	{r4, r5, pc}
   230e6:	4664      	mov	r4, ip
   230e8:	4613      	mov	r3, r2
   230ea:	2c00      	cmp	r4, #0
   230ec:	d1f4      	bne.n	230d8 <memset+0x80>
   230ee:	e7f9      	b.n	230e4 <memset+0x8c>
   230f0:	4603      	mov	r3, r0
   230f2:	4614      	mov	r4, r2
   230f4:	e7bf      	b.n	23076 <memset+0x1e>
   230f6:	461a      	mov	r2, r3
   230f8:	46a4      	mov	ip, r4
   230fa:	e7e0      	b.n	230be <memset+0x66>

000230fc <strncmp>:
   230fc:	2a00      	cmp	r2, #0
   230fe:	d03e      	beq.n	2317e <strncmp+0x82>
   23100:	ea40 0301 	orr.w	r3, r0, r1
   23104:	079b      	lsls	r3, r3, #30
   23106:	b530      	push	{r4, r5, lr}
   23108:	4684      	mov	ip, r0
   2310a:	d12f      	bne.n	2316c <strncmp+0x70>
   2310c:	2a03      	cmp	r2, #3
   2310e:	d92d      	bls.n	2316c <strncmp+0x70>
   23110:	460b      	mov	r3, r1
   23112:	e008      	b.n	23126 <strncmp+0x2a>
   23114:	3a04      	subs	r2, #4
   23116:	4684      	mov	ip, r0
   23118:	4619      	mov	r1, r3
   2311a:	d025      	beq.n	23168 <strncmp+0x6c>
   2311c:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   23120:	d122      	bne.n	23168 <strncmp+0x6c>
   23122:	2a03      	cmp	r2, #3
   23124:	d922      	bls.n	2316c <strncmp+0x70>
   23126:	6804      	ldr	r4, [r0, #0]
   23128:	4619      	mov	r1, r3
   2312a:	f853 5b04 	ldr.w	r5, [r3], #4
   2312e:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   23132:	42ac      	cmp	r4, r5
   23134:	4684      	mov	ip, r0
   23136:	ea2e 0e04 	bic.w	lr, lr, r4
   2313a:	f100 0004 	add.w	r0, r0, #4
   2313e:	d0e9      	beq.n	23114 <strncmp+0x18>
   23140:	f89c 0000 	ldrb.w	r0, [ip]
   23144:	780c      	ldrb	r4, [r1, #0]
   23146:	42a0      	cmp	r0, r4
   23148:	d11b      	bne.n	23182 <strncmp+0x86>
   2314a:	46e6      	mov	lr, ip
   2314c:	b168      	cbz	r0, 2316a <strncmp+0x6e>
   2314e:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   23152:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   23156:	eba2 030e 	sub.w	r3, r2, lr
   2315a:	42a0      	cmp	r0, r4
   2315c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   23160:	d10f      	bne.n	23182 <strncmp+0x86>
   23162:	eb1c 0303 	adds.w	r3, ip, r3
   23166:	d1f1      	bne.n	2314c <strncmp+0x50>
   23168:	2000      	movs	r0, #0
   2316a:	bd30      	pop	{r4, r5, pc}
   2316c:	f89c 0000 	ldrb.w	r0, [ip]
   23170:	780c      	ldrb	r4, [r1, #0]
   23172:	4284      	cmp	r4, r0
   23174:	d105      	bne.n	23182 <strncmp+0x86>
   23176:	2a01      	cmp	r2, #1
   23178:	d0f6      	beq.n	23168 <strncmp+0x6c>
   2317a:	46e6      	mov	lr, ip
   2317c:	e7e6      	b.n	2314c <strncmp+0x50>
   2317e:	4610      	mov	r0, r2
   23180:	4770      	bx	lr
   23182:	1b00      	subs	r0, r0, r4
   23184:	bd30      	pop	{r4, r5, pc}
   23186:	bf00      	nop

00023188 <strncpy>:
   23188:	ea40 0301 	orr.w	r3, r0, r1
   2318c:	079b      	lsls	r3, r3, #30
   2318e:	b530      	push	{r4, r5, lr}
   23190:	d101      	bne.n	23196 <strncpy+0xe>
   23192:	2a03      	cmp	r2, #3
   23194:	d80f      	bhi.n	231b6 <strncpy+0x2e>
   23196:	4684      	mov	ip, r0
   23198:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   2319c:	e007      	b.n	231ae <strncpy+0x26>
   2319e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   231a2:	f803 1b01 	strb.w	r1, [r3], #1
   231a6:	1e54      	subs	r4, r2, #1
   231a8:	b1c1      	cbz	r1, 231dc <strncpy+0x54>
   231aa:	469c      	mov	ip, r3
   231ac:	4622      	mov	r2, r4
   231ae:	4663      	mov	r3, ip
   231b0:	2a00      	cmp	r2, #0
   231b2:	d1f4      	bne.n	2319e <strncpy+0x16>
   231b4:	bd30      	pop	{r4, r5, pc}
   231b6:	460b      	mov	r3, r1
   231b8:	4684      	mov	ip, r0
   231ba:	4619      	mov	r1, r3
   231bc:	f853 5b04 	ldr.w	r5, [r3], #4
   231c0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   231c4:	ea24 0405 	bic.w	r4, r4, r5
   231c8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   231cc:	d1e4      	bne.n	23198 <strncpy+0x10>
   231ce:	3a04      	subs	r2, #4
   231d0:	2a03      	cmp	r2, #3
   231d2:	f84c 5b04 	str.w	r5, [ip], #4
   231d6:	4619      	mov	r1, r3
   231d8:	d8ef      	bhi.n	231ba <strncpy+0x32>
   231da:	e7dd      	b.n	23198 <strncpy+0x10>
   231dc:	4494      	add	ip, r2
   231de:	2c00      	cmp	r4, #0
   231e0:	d0e8      	beq.n	231b4 <strncpy+0x2c>
   231e2:	f803 1b01 	strb.w	r1, [r3], #1
   231e6:	4563      	cmp	r3, ip
   231e8:	d1fb      	bne.n	231e2 <strncpy+0x5a>
   231ea:	bd30      	pop	{r4, r5, pc}

000231ec <_vasnprintf_r>:
   231ec:	b530      	push	{r4, r5, lr}
   231ee:	6814      	ldr	r4, [r2, #0]
   231f0:	4615      	mov	r5, r2
   231f2:	b09b      	sub	sp, #108	; 0x6c
   231f4:	461a      	mov	r2, r3
   231f6:	b109      	cbz	r1, 231fc <_vasnprintf_r+0x10>
   231f8:	2c00      	cmp	r4, #0
   231fa:	d119      	bne.n	23230 <_vasnprintf_r+0x44>
   231fc:	2100      	movs	r1, #0
   231fe:	f44f 7322 	mov.w	r3, #648	; 0x288
   23202:	f8ad 300c 	strh.w	r3, [sp, #12]
   23206:	9100      	str	r1, [sp, #0]
   23208:	9104      	str	r1, [sp, #16]
   2320a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2320e:	9102      	str	r1, [sp, #8]
   23210:	9105      	str	r1, [sp, #20]
   23212:	f8ad 300e 	strh.w	r3, [sp, #14]
   23216:	4669      	mov	r1, sp
   23218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2321a:	f000 fcd1 	bl	23bc0 <_svfprintf_r>
   2321e:	2800      	cmp	r0, #0
   23220:	db13      	blt.n	2324a <_vasnprintf_r+0x5e>
   23222:	9b00      	ldr	r3, [sp, #0]
   23224:	6028      	str	r0, [r5, #0]
   23226:	2200      	movs	r2, #0
   23228:	701a      	strb	r2, [r3, #0]
   2322a:	9804      	ldr	r0, [sp, #16]
   2322c:	b01b      	add	sp, #108	; 0x6c
   2322e:	bd30      	pop	{r4, r5, pc}
   23230:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   23234:	9100      	str	r1, [sp, #0]
   23236:	9104      	str	r1, [sp, #16]
   23238:	f8ad 300c 	strh.w	r3, [sp, #12]
   2323c:	4621      	mov	r1, r4
   2323e:	dae4      	bge.n	2320a <_vasnprintf_r+0x1e>
   23240:	238b      	movs	r3, #139	; 0x8b
   23242:	6003      	str	r3, [r0, #0]
   23244:	2000      	movs	r0, #0
   23246:	b01b      	add	sp, #108	; 0x6c
   23248:	bd30      	pop	{r4, r5, pc}
   2324a:	2000      	movs	r0, #0
   2324c:	e7ee      	b.n	2322c <_vasnprintf_r+0x40>
   2324e:	bf00      	nop

00023250 <__locale_mb_cur_max>:
   23250:	4b01      	ldr	r3, [pc, #4]	; (23258 <__locale_mb_cur_max+0x8>)
   23252:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   23256:	4770      	bx	lr
   23258:	2000525c 	.word	0x2000525c

0002325c <__cxa_atexit>:
   2325c:	4613      	mov	r3, r2
   2325e:	460a      	mov	r2, r1
   23260:	4601      	mov	r1, r0
   23262:	2002      	movs	r0, #2
   23264:	f000 bafa 	b.w	2385c <__register_exitproc>

00023268 <fcvtf>:
   23268:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   2326c:	2300      	movs	r3, #0
   2326e:	f003 b8e9 	b.w	26444 <fcvtbuf>
   23272:	bf00      	nop

00023274 <_sbrk_r>:
   23274:	b538      	push	{r3, r4, r5, lr}
   23276:	4d07      	ldr	r5, [pc, #28]	; (23294 <_sbrk_r+0x20>)
   23278:	2200      	movs	r2, #0
   2327a:	4604      	mov	r4, r0
   2327c:	4608      	mov	r0, r1
   2327e:	602a      	str	r2, [r5, #0]
   23280:	f7f4 fc42 	bl	17b08 <_sbrk>
   23284:	1c43      	adds	r3, r0, #1
   23286:	d000      	beq.n	2328a <_sbrk_r+0x16>
   23288:	bd38      	pop	{r3, r4, r5, pc}
   2328a:	682b      	ldr	r3, [r5, #0]
   2328c:	2b00      	cmp	r3, #0
   2328e:	d0fb      	beq.n	23288 <_sbrk_r+0x14>
   23290:	6023      	str	r3, [r4, #0]
   23292:	bd38      	pop	{r3, r4, r5, pc}
   23294:	2000773c 	.word	0x2000773c

00023298 <_write_r>:
   23298:	b538      	push	{r3, r4, r5, lr}
   2329a:	460c      	mov	r4, r1
   2329c:	4d08      	ldr	r5, [pc, #32]	; (232c0 <_write_r+0x28>)
   2329e:	4684      	mov	ip, r0
   232a0:	4611      	mov	r1, r2
   232a2:	4620      	mov	r0, r4
   232a4:	461a      	mov	r2, r3
   232a6:	2300      	movs	r3, #0
   232a8:	602b      	str	r3, [r5, #0]
   232aa:	4664      	mov	r4, ip
   232ac:	f7f2 ff9a 	bl	161e4 <_write>
   232b0:	1c43      	adds	r3, r0, #1
   232b2:	d000      	beq.n	232b6 <_write_r+0x1e>
   232b4:	bd38      	pop	{r3, r4, r5, pc}
   232b6:	682b      	ldr	r3, [r5, #0]
   232b8:	2b00      	cmp	r3, #0
   232ba:	d0fb      	beq.n	232b4 <_write_r+0x1c>
   232bc:	6023      	str	r3, [r4, #0]
   232be:	bd38      	pop	{r3, r4, r5, pc}
   232c0:	2000773c 	.word	0x2000773c

000232c4 <__errno>:
   232c4:	4b01      	ldr	r3, [pc, #4]	; (232cc <__errno+0x8>)
   232c6:	6818      	ldr	r0, [r3, #0]
   232c8:	4770      	bx	lr
   232ca:	bf00      	nop
   232cc:	200057e4 	.word	0x200057e4
	...
   232e0:	eba2 0003 	sub.w	r0, r2, r3
   232e4:	4770      	bx	lr
   232e6:	bf00      	nop

000232e8 <strcmp>:
   232e8:	7802      	ldrb	r2, [r0, #0]
   232ea:	780b      	ldrb	r3, [r1, #0]
   232ec:	2a01      	cmp	r2, #1
   232ee:	bf28      	it	cs
   232f0:	429a      	cmpcs	r2, r3
   232f2:	d1f5      	bne.n	232e0 <__errno+0x1c>
   232f4:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   232f8:	ea40 0401 	orr.w	r4, r0, r1
   232fc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   23300:	f06f 0c00 	mvn.w	ip, #0
   23304:	ea4f 7244 	mov.w	r2, r4, lsl #29
   23308:	b312      	cbz	r2, 23350 <strcmp+0x68>
   2330a:	ea80 0401 	eor.w	r4, r0, r1
   2330e:	f014 0f07 	tst.w	r4, #7
   23312:	d16a      	bne.n	233ea <strcmp+0x102>
   23314:	f000 0407 	and.w	r4, r0, #7
   23318:	f020 0007 	bic.w	r0, r0, #7
   2331c:	f004 0503 	and.w	r5, r4, #3
   23320:	f021 0107 	bic.w	r1, r1, #7
   23324:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   23328:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   2332c:	f014 0f04 	tst.w	r4, #4
   23330:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   23334:	fa0c f405 	lsl.w	r4, ip, r5
   23338:	ea62 0204 	orn	r2, r2, r4
   2333c:	ea66 0604 	orn	r6, r6, r4
   23340:	d00a      	beq.n	23358 <strcmp+0x70>
   23342:	ea63 0304 	orn	r3, r3, r4
   23346:	4662      	mov	r2, ip
   23348:	ea67 0704 	orn	r7, r7, r4
   2334c:	4666      	mov	r6, ip
   2334e:	e003      	b.n	23358 <strcmp+0x70>
   23350:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   23354:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   23358:	fa82 f54c 	uadd8	r5, r2, ip
   2335c:	ea82 0406 	eor.w	r4, r2, r6
   23360:	faa4 f48c 	sel	r4, r4, ip
   23364:	bb6c      	cbnz	r4, 233c2 <strcmp+0xda>
   23366:	fa83 f54c 	uadd8	r5, r3, ip
   2336a:	ea83 0507 	eor.w	r5, r3, r7
   2336e:	faa5 f58c 	sel	r5, r5, ip
   23372:	b995      	cbnz	r5, 2339a <strcmp+0xb2>
   23374:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   23378:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   2337c:	fa82 f54c 	uadd8	r5, r2, ip
   23380:	ea82 0406 	eor.w	r4, r2, r6
   23384:	faa4 f48c 	sel	r4, r4, ip
   23388:	fa83 f54c 	uadd8	r5, r3, ip
   2338c:	ea83 0507 	eor.w	r5, r3, r7
   23390:	faa5 f58c 	sel	r5, r5, ip
   23394:	4325      	orrs	r5, r4
   23396:	d0db      	beq.n	23350 <strcmp+0x68>
   23398:	b99c      	cbnz	r4, 233c2 <strcmp+0xda>
   2339a:	ba2d      	rev	r5, r5
   2339c:	fab5 f485 	clz	r4, r5
   233a0:	f024 0407 	bic.w	r4, r4, #7
   233a4:	fa27 f104 	lsr.w	r1, r7, r4
   233a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   233ac:	fa23 f304 	lsr.w	r3, r3, r4
   233b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   233b4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   233b8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   233bc:	eba0 0001 	sub.w	r0, r0, r1
   233c0:	4770      	bx	lr
   233c2:	ba24      	rev	r4, r4
   233c4:	fab4 f484 	clz	r4, r4
   233c8:	f024 0407 	bic.w	r4, r4, #7
   233cc:	fa26 f104 	lsr.w	r1, r6, r4
   233d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   233d4:	fa22 f204 	lsr.w	r2, r2, r4
   233d8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   233dc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   233e0:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   233e4:	eba0 0001 	sub.w	r0, r0, r1
   233e8:	4770      	bx	lr
   233ea:	f014 0f03 	tst.w	r4, #3
   233ee:	d13c      	bne.n	2346a <strcmp+0x182>
   233f0:	f010 0403 	ands.w	r4, r0, #3
   233f4:	d128      	bne.n	23448 <strcmp+0x160>
   233f6:	f850 2b08 	ldr.w	r2, [r0], #8
   233fa:	f851 3b08 	ldr.w	r3, [r1], #8
   233fe:	fa82 f54c 	uadd8	r5, r2, ip
   23402:	ea82 0503 	eor.w	r5, r2, r3
   23406:	faa5 f58c 	sel	r5, r5, ip
   2340a:	b95d      	cbnz	r5, 23424 <strcmp+0x13c>
   2340c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   23410:	f851 3c04 	ldr.w	r3, [r1, #-4]
   23414:	fa82 f54c 	uadd8	r5, r2, ip
   23418:	ea82 0503 	eor.w	r5, r2, r3
   2341c:	faa5 f58c 	sel	r5, r5, ip
   23420:	2d00      	cmp	r5, #0
   23422:	d0e8      	beq.n	233f6 <strcmp+0x10e>
   23424:	ba2d      	rev	r5, r5
   23426:	fab5 f485 	clz	r4, r5
   2342a:	f024 0407 	bic.w	r4, r4, #7
   2342e:	fa23 f104 	lsr.w	r1, r3, r4
   23432:	fa22 f204 	lsr.w	r2, r2, r4
   23436:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   2343a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2343e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   23442:	eba0 0001 	sub.w	r0, r0, r1
   23446:	4770      	bx	lr
   23448:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   2344c:	f020 0003 	bic.w	r0, r0, #3
   23450:	f850 2b08 	ldr.w	r2, [r0], #8
   23454:	f021 0103 	bic.w	r1, r1, #3
   23458:	f851 3b08 	ldr.w	r3, [r1], #8
   2345c:	fa0c f404 	lsl.w	r4, ip, r4
   23460:	ea62 0204 	orn	r2, r2, r4
   23464:	ea63 0304 	orn	r3, r3, r4
   23468:	e7c9      	b.n	233fe <strcmp+0x116>
   2346a:	f010 0403 	ands.w	r4, r0, #3
   2346e:	d01a      	beq.n	234a6 <strcmp+0x1be>
   23470:	eba1 0104 	sub.w	r1, r1, r4
   23474:	f020 0003 	bic.w	r0, r0, #3
   23478:	07e4      	lsls	r4, r4, #31
   2347a:	f850 2b04 	ldr.w	r2, [r0], #4
   2347e:	d006      	beq.n	2348e <strcmp+0x1a6>
   23480:	d20f      	bcs.n	234a2 <strcmp+0x1ba>
   23482:	788b      	ldrb	r3, [r1, #2]
   23484:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   23488:	1ae4      	subs	r4, r4, r3
   2348a:	d106      	bne.n	2349a <strcmp+0x1b2>
   2348c:	b12b      	cbz	r3, 2349a <strcmp+0x1b2>
   2348e:	78cb      	ldrb	r3, [r1, #3]
   23490:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   23494:	1ae4      	subs	r4, r4, r3
   23496:	d100      	bne.n	2349a <strcmp+0x1b2>
   23498:	b91b      	cbnz	r3, 234a2 <strcmp+0x1ba>
   2349a:	4620      	mov	r0, r4
   2349c:	f85d 4b10 	ldr.w	r4, [sp], #16
   234a0:	4770      	bx	lr
   234a2:	f101 0104 	add.w	r1, r1, #4
   234a6:	f850 2b04 	ldr.w	r2, [r0], #4
   234aa:	07cc      	lsls	r4, r1, #31
   234ac:	f021 0103 	bic.w	r1, r1, #3
   234b0:	f851 3b04 	ldr.w	r3, [r1], #4
   234b4:	d848      	bhi.n	23548 <strcmp+0x260>
   234b6:	d224      	bcs.n	23502 <strcmp+0x21a>
   234b8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   234bc:	fa82 f54c 	uadd8	r5, r2, ip
   234c0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   234c4:	faa5 f58c 	sel	r5, r5, ip
   234c8:	d10a      	bne.n	234e0 <strcmp+0x1f8>
   234ca:	b965      	cbnz	r5, 234e6 <strcmp+0x1fe>
   234cc:	f851 3b04 	ldr.w	r3, [r1], #4
   234d0:	ea84 0402 	eor.w	r4, r4, r2
   234d4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   234d8:	d10e      	bne.n	234f8 <strcmp+0x210>
   234da:	f850 2b04 	ldr.w	r2, [r0], #4
   234de:	e7eb      	b.n	234b8 <strcmp+0x1d0>
   234e0:	ea4f 2313 	mov.w	r3, r3, lsr #8
   234e4:	e055      	b.n	23592 <strcmp+0x2aa>
   234e6:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   234ea:	d14d      	bne.n	23588 <strcmp+0x2a0>
   234ec:	7808      	ldrb	r0, [r1, #0]
   234ee:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   234f2:	f1c0 0000 	rsb	r0, r0, #0
   234f6:	4770      	bx	lr
   234f8:	ea4f 6212 	mov.w	r2, r2, lsr #24
   234fc:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   23500:	e047      	b.n	23592 <strcmp+0x2aa>
   23502:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   23506:	fa82 f54c 	uadd8	r5, r2, ip
   2350a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   2350e:	faa5 f58c 	sel	r5, r5, ip
   23512:	d10a      	bne.n	2352a <strcmp+0x242>
   23514:	b965      	cbnz	r5, 23530 <strcmp+0x248>
   23516:	f851 3b04 	ldr.w	r3, [r1], #4
   2351a:	ea84 0402 	eor.w	r4, r4, r2
   2351e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   23522:	d10c      	bne.n	2353e <strcmp+0x256>
   23524:	f850 2b04 	ldr.w	r2, [r0], #4
   23528:	e7eb      	b.n	23502 <strcmp+0x21a>
   2352a:	ea4f 4313 	mov.w	r3, r3, lsr #16
   2352e:	e030      	b.n	23592 <strcmp+0x2aa>
   23530:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   23534:	d128      	bne.n	23588 <strcmp+0x2a0>
   23536:	880b      	ldrh	r3, [r1, #0]
   23538:	ea4f 4212 	mov.w	r2, r2, lsr #16
   2353c:	e029      	b.n	23592 <strcmp+0x2aa>
   2353e:	ea4f 4212 	mov.w	r2, r2, lsr #16
   23542:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   23546:	e024      	b.n	23592 <strcmp+0x2aa>
   23548:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   2354c:	fa82 f54c 	uadd8	r5, r2, ip
   23550:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   23554:	faa5 f58c 	sel	r5, r5, ip
   23558:	d10a      	bne.n	23570 <strcmp+0x288>
   2355a:	b965      	cbnz	r5, 23576 <strcmp+0x28e>
   2355c:	f851 3b04 	ldr.w	r3, [r1], #4
   23560:	ea84 0402 	eor.w	r4, r4, r2
   23564:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   23568:	d109      	bne.n	2357e <strcmp+0x296>
   2356a:	f850 2b04 	ldr.w	r2, [r0], #4
   2356e:	e7eb      	b.n	23548 <strcmp+0x260>
   23570:	ea4f 6313 	mov.w	r3, r3, lsr #24
   23574:	e00d      	b.n	23592 <strcmp+0x2aa>
   23576:	f015 0fff 	tst.w	r5, #255	; 0xff
   2357a:	d105      	bne.n	23588 <strcmp+0x2a0>
   2357c:	680b      	ldr	r3, [r1, #0]
   2357e:	ea4f 2212 	mov.w	r2, r2, lsr #8
   23582:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   23586:	e004      	b.n	23592 <strcmp+0x2aa>
   23588:	f04f 0000 	mov.w	r0, #0
   2358c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   23590:	4770      	bx	lr
   23592:	ba12      	rev	r2, r2
   23594:	ba1b      	rev	r3, r3
   23596:	fa82 f44c 	uadd8	r4, r2, ip
   2359a:	ea82 0403 	eor.w	r4, r2, r3
   2359e:	faa4 f58c 	sel	r5, r4, ip
   235a2:	fab5 f485 	clz	r4, r5
   235a6:	fa02 f204 	lsl.w	r2, r2, r4
   235aa:	fa03 f304 	lsl.w	r3, r3, r4
   235ae:	ea4f 6012 	mov.w	r0, r2, lsr #24
   235b2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   235b6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   235ba:	4770      	bx	lr

000235bc <strcpy>:
   235bc:	ea80 0201 	eor.w	r2, r0, r1
   235c0:	4684      	mov	ip, r0
   235c2:	f012 0f03 	tst.w	r2, #3
   235c6:	d14f      	bne.n	23668 <strcpy+0xac>
   235c8:	f011 0f03 	tst.w	r1, #3
   235cc:	d132      	bne.n	23634 <strcpy+0x78>
   235ce:	f84d 4d04 	str.w	r4, [sp, #-4]!
   235d2:	f011 0f04 	tst.w	r1, #4
   235d6:	f851 3b04 	ldr.w	r3, [r1], #4
   235da:	d00b      	beq.n	235f4 <strcpy+0x38>
   235dc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   235e0:	439a      	bics	r2, r3
   235e2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   235e6:	bf04      	itt	eq
   235e8:	f84c 3b04 	streq.w	r3, [ip], #4
   235ec:	f851 3b04 	ldreq.w	r3, [r1], #4
   235f0:	d116      	bne.n	23620 <strcpy+0x64>
   235f2:	bf00      	nop
   235f4:	f851 4b04 	ldr.w	r4, [r1], #4
   235f8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   235fc:	439a      	bics	r2, r3
   235fe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   23602:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   23606:	d10b      	bne.n	23620 <strcpy+0x64>
   23608:	f84c 3b04 	str.w	r3, [ip], #4
   2360c:	43a2      	bics	r2, r4
   2360e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   23612:	bf04      	itt	eq
   23614:	f851 3b04 	ldreq.w	r3, [r1], #4
   23618:	f84c 4b04 	streq.w	r4, [ip], #4
   2361c:	d0ea      	beq.n	235f4 <strcpy+0x38>
   2361e:	4623      	mov	r3, r4
   23620:	f80c 3b01 	strb.w	r3, [ip], #1
   23624:	f013 0fff 	tst.w	r3, #255	; 0xff
   23628:	ea4f 2333 	mov.w	r3, r3, ror #8
   2362c:	d1f8      	bne.n	23620 <strcpy+0x64>
   2362e:	f85d 4b04 	ldr.w	r4, [sp], #4
   23632:	4770      	bx	lr
   23634:	f011 0f01 	tst.w	r1, #1
   23638:	d006      	beq.n	23648 <strcpy+0x8c>
   2363a:	f811 2b01 	ldrb.w	r2, [r1], #1
   2363e:	f80c 2b01 	strb.w	r2, [ip], #1
   23642:	2a00      	cmp	r2, #0
   23644:	bf08      	it	eq
   23646:	4770      	bxeq	lr
   23648:	f011 0f02 	tst.w	r1, #2
   2364c:	d0bf      	beq.n	235ce <strcpy+0x12>
   2364e:	f831 2b02 	ldrh.w	r2, [r1], #2
   23652:	f012 0fff 	tst.w	r2, #255	; 0xff
   23656:	bf16      	itet	ne
   23658:	f82c 2b02 	strhne.w	r2, [ip], #2
   2365c:	f88c 2000 	strbeq.w	r2, [ip]
   23660:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   23664:	d1b3      	bne.n	235ce <strcpy+0x12>
   23666:	4770      	bx	lr
   23668:	f811 2b01 	ldrb.w	r2, [r1], #1
   2366c:	f80c 2b01 	strb.w	r2, [ip], #1
   23670:	2a00      	cmp	r2, #0
   23672:	d1f9      	bne.n	23668 <strcpy+0xac>
   23674:	4770      	bx	lr
   23676:	bf00      	nop

00023678 <__libc_init_array>:
   23678:	b570      	push	{r4, r5, r6, lr}
   2367a:	4e0d      	ldr	r6, [pc, #52]	; (236b0 <__libc_init_array+0x38>)
   2367c:	4d0d      	ldr	r5, [pc, #52]	; (236b4 <__libc_init_array+0x3c>)
   2367e:	1b76      	subs	r6, r6, r5
   23680:	10b6      	asrs	r6, r6, #2
   23682:	d006      	beq.n	23692 <__libc_init_array+0x1a>
   23684:	2400      	movs	r4, #0
   23686:	f855 3b04 	ldr.w	r3, [r5], #4
   2368a:	3401      	adds	r4, #1
   2368c:	4798      	blx	r3
   2368e:	42a6      	cmp	r6, r4
   23690:	d1f9      	bne.n	23686 <__libc_init_array+0xe>
   23692:	4e09      	ldr	r6, [pc, #36]	; (236b8 <__libc_init_array+0x40>)
   23694:	4d09      	ldr	r5, [pc, #36]	; (236bc <__libc_init_array+0x44>)
   23696:	1b76      	subs	r6, r6, r5
   23698:	f005 f902 	bl	288a0 <___init_veneer>
   2369c:	10b6      	asrs	r6, r6, #2
   2369e:	d006      	beq.n	236ae <__libc_init_array+0x36>
   236a0:	2400      	movs	r4, #0
   236a2:	f855 3b04 	ldr.w	r3, [r5], #4
   236a6:	3401      	adds	r4, #1
   236a8:	4798      	blx	r3
   236aa:	42a6      	cmp	r6, r4
   236ac:	d1f9      	bne.n	236a2 <__libc_init_array+0x2a>
   236ae:	bd70      	pop	{r4, r5, r6, pc}
   236b0:	600029b8 	.word	0x600029b8
   236b4:	600029b8 	.word	0x600029b8
   236b8:	60002a3c 	.word	0x60002a3c
   236bc:	600029b8 	.word	0x600029b8

000236c0 <__retarget_lock_init_recursive>:
   236c0:	4770      	bx	lr
   236c2:	bf00      	nop

000236c4 <__retarget_lock_close_recursive>:
   236c4:	4770      	bx	lr
   236c6:	bf00      	nop

000236c8 <__retarget_lock_acquire_recursive>:
   236c8:	4770      	bx	lr
   236ca:	bf00      	nop

000236cc <__retarget_lock_release_recursive>:
   236cc:	4770      	bx	lr
   236ce:	bf00      	nop

000236d0 <memchr>:
   236d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   236d4:	2a10      	cmp	r2, #16
   236d6:	db2b      	blt.n	23730 <memchr+0x60>
   236d8:	f010 0f07 	tst.w	r0, #7
   236dc:	d008      	beq.n	236f0 <memchr+0x20>
   236de:	f810 3b01 	ldrb.w	r3, [r0], #1
   236e2:	3a01      	subs	r2, #1
   236e4:	428b      	cmp	r3, r1
   236e6:	d02d      	beq.n	23744 <memchr+0x74>
   236e8:	f010 0f07 	tst.w	r0, #7
   236ec:	b342      	cbz	r2, 23740 <memchr+0x70>
   236ee:	d1f6      	bne.n	236de <memchr+0xe>
   236f0:	b4f0      	push	{r4, r5, r6, r7}
   236f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   236f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   236fa:	f022 0407 	bic.w	r4, r2, #7
   236fe:	f07f 0700 	mvns.w	r7, #0
   23702:	2300      	movs	r3, #0
   23704:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   23708:	3c08      	subs	r4, #8
   2370a:	ea85 0501 	eor.w	r5, r5, r1
   2370e:	ea86 0601 	eor.w	r6, r6, r1
   23712:	fa85 f547 	uadd8	r5, r5, r7
   23716:	faa3 f587 	sel	r5, r3, r7
   2371a:	fa86 f647 	uadd8	r6, r6, r7
   2371e:	faa5 f687 	sel	r6, r5, r7
   23722:	b98e      	cbnz	r6, 23748 <memchr+0x78>
   23724:	d1ee      	bne.n	23704 <memchr+0x34>
   23726:	bcf0      	pop	{r4, r5, r6, r7}
   23728:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   2372c:	f002 0207 	and.w	r2, r2, #7
   23730:	b132      	cbz	r2, 23740 <memchr+0x70>
   23732:	f810 3b01 	ldrb.w	r3, [r0], #1
   23736:	3a01      	subs	r2, #1
   23738:	ea83 0301 	eor.w	r3, r3, r1
   2373c:	b113      	cbz	r3, 23744 <memchr+0x74>
   2373e:	d1f8      	bne.n	23732 <memchr+0x62>
   23740:	2000      	movs	r0, #0
   23742:	4770      	bx	lr
   23744:	3801      	subs	r0, #1
   23746:	4770      	bx	lr
   23748:	2d00      	cmp	r5, #0
   2374a:	bf06      	itte	eq
   2374c:	4635      	moveq	r5, r6
   2374e:	3803      	subeq	r0, #3
   23750:	3807      	subne	r0, #7
   23752:	f015 0f01 	tst.w	r5, #1
   23756:	d107      	bne.n	23768 <memchr+0x98>
   23758:	3001      	adds	r0, #1
   2375a:	f415 7f80 	tst.w	r5, #256	; 0x100
   2375e:	bf02      	ittt	eq
   23760:	3001      	addeq	r0, #1
   23762:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   23766:	3001      	addeq	r0, #1
   23768:	bcf0      	pop	{r4, r5, r6, r7}
   2376a:	3801      	subs	r0, #1
   2376c:	4770      	bx	lr
   2376e:	bf00      	nop
	...

00023780 <strlen>:
   23780:	f890 f000 	pld	[r0]
   23784:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   23788:	f020 0107 	bic.w	r1, r0, #7
   2378c:	f06f 0c00 	mvn.w	ip, #0
   23790:	f010 0407 	ands.w	r4, r0, #7
   23794:	f891 f020 	pld	[r1, #32]
   23798:	f040 8049 	bne.w	2382e <strlen+0xae>
   2379c:	f04f 0400 	mov.w	r4, #0
   237a0:	f06f 0007 	mvn.w	r0, #7
   237a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   237a8:	f891 f040 	pld	[r1, #64]	; 0x40
   237ac:	f100 0008 	add.w	r0, r0, #8
   237b0:	fa82 f24c 	uadd8	r2, r2, ip
   237b4:	faa4 f28c 	sel	r2, r4, ip
   237b8:	fa83 f34c 	uadd8	r3, r3, ip
   237bc:	faa2 f38c 	sel	r3, r2, ip
   237c0:	bb4b      	cbnz	r3, 23816 <strlen+0x96>
   237c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   237c6:	fa82 f24c 	uadd8	r2, r2, ip
   237ca:	f100 0008 	add.w	r0, r0, #8
   237ce:	faa4 f28c 	sel	r2, r4, ip
   237d2:	fa83 f34c 	uadd8	r3, r3, ip
   237d6:	faa2 f38c 	sel	r3, r2, ip
   237da:	b9e3      	cbnz	r3, 23816 <strlen+0x96>
   237dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   237e0:	fa82 f24c 	uadd8	r2, r2, ip
   237e4:	f100 0008 	add.w	r0, r0, #8
   237e8:	faa4 f28c 	sel	r2, r4, ip
   237ec:	fa83 f34c 	uadd8	r3, r3, ip
   237f0:	faa2 f38c 	sel	r3, r2, ip
   237f4:	b97b      	cbnz	r3, 23816 <strlen+0x96>
   237f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   237fa:	f101 0120 	add.w	r1, r1, #32
   237fe:	fa82 f24c 	uadd8	r2, r2, ip
   23802:	f100 0008 	add.w	r0, r0, #8
   23806:	faa4 f28c 	sel	r2, r4, ip
   2380a:	fa83 f34c 	uadd8	r3, r3, ip
   2380e:	faa2 f38c 	sel	r3, r2, ip
   23812:	2b00      	cmp	r3, #0
   23814:	d0c6      	beq.n	237a4 <strlen+0x24>
   23816:	2a00      	cmp	r2, #0
   23818:	bf04      	itt	eq
   2381a:	3004      	addeq	r0, #4
   2381c:	461a      	moveq	r2, r3
   2381e:	ba12      	rev	r2, r2
   23820:	fab2 f282 	clz	r2, r2
   23824:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   23828:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   2382c:	4770      	bx	lr
   2382e:	e9d1 2300 	ldrd	r2, r3, [r1]
   23832:	f004 0503 	and.w	r5, r4, #3
   23836:	f1c4 0000 	rsb	r0, r4, #0
   2383a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   2383e:	f014 0f04 	tst.w	r4, #4
   23842:	f891 f040 	pld	[r1, #64]	; 0x40
   23846:	fa0c f505 	lsl.w	r5, ip, r5
   2384a:	ea62 0205 	orn	r2, r2, r5
   2384e:	bf1c      	itt	ne
   23850:	ea63 0305 	ornne	r3, r3, r5
   23854:	4662      	movne	r2, ip
   23856:	f04f 0400 	mov.w	r4, #0
   2385a:	e7a9      	b.n	237b0 <strlen+0x30>

0002385c <__register_exitproc>:
   2385c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23860:	f8df a07c 	ldr.w	sl, [pc, #124]	; 238e0 <__register_exitproc+0x84>
   23864:	4606      	mov	r6, r0
   23866:	f8da 0000 	ldr.w	r0, [sl]
   2386a:	4698      	mov	r8, r3
   2386c:	460f      	mov	r7, r1
   2386e:	4691      	mov	r9, r2
   23870:	f7ff ff2a 	bl	236c8 <__retarget_lock_acquire_recursive>
   23874:	4b18      	ldr	r3, [pc, #96]	; (238d8 <__register_exitproc+0x7c>)
   23876:	681c      	ldr	r4, [r3, #0]
   23878:	b324      	cbz	r4, 238c4 <__register_exitproc+0x68>
   2387a:	6865      	ldr	r5, [r4, #4]
   2387c:	2d1f      	cmp	r5, #31
   2387e:	dc24      	bgt.n	238ca <__register_exitproc+0x6e>
   23880:	b95e      	cbnz	r6, 2389a <__register_exitproc+0x3e>
   23882:	1c6b      	adds	r3, r5, #1
   23884:	3502      	adds	r5, #2
   23886:	f8da 0000 	ldr.w	r0, [sl]
   2388a:	6063      	str	r3, [r4, #4]
   2388c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   23890:	f7ff ff1c 	bl	236cc <__retarget_lock_release_recursive>
   23894:	2000      	movs	r0, #0
   23896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2389a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   2389e:	2301      	movs	r3, #1
   238a0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   238a4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   238a8:	40ab      	lsls	r3, r5
   238aa:	431a      	orrs	r2, r3
   238ac:	2e02      	cmp	r6, #2
   238ae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   238b2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   238b6:	d1e4      	bne.n	23882 <__register_exitproc+0x26>
   238b8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   238bc:	431a      	orrs	r2, r3
   238be:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   238c2:	e7de      	b.n	23882 <__register_exitproc+0x26>
   238c4:	4c05      	ldr	r4, [pc, #20]	; (238dc <__register_exitproc+0x80>)
   238c6:	601c      	str	r4, [r3, #0]
   238c8:	e7d7      	b.n	2387a <__register_exitproc+0x1e>
   238ca:	f8da 0000 	ldr.w	r0, [sl]
   238ce:	f7ff fefd 	bl	236cc <__retarget_lock_release_recursive>
   238d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   238d6:	e7de      	b.n	23896 <__register_exitproc+0x3a>
   238d8:	20007054 	.word	0x20007054
   238dc:	20007058 	.word	0x20007058
   238e0:	20005250 	.word	0x20005250

000238e4 <_malloc_trim_r>:
   238e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   238e6:	4f24      	ldr	r7, [pc, #144]	; (23978 <_malloc_trim_r+0x94>)
   238e8:	460c      	mov	r4, r1
   238ea:	4606      	mov	r6, r0
   238ec:	f7fe fcb4 	bl	22258 <__malloc_lock>
   238f0:	68bb      	ldr	r3, [r7, #8]
   238f2:	685d      	ldr	r5, [r3, #4]
   238f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   238f8:	310f      	adds	r1, #15
   238fa:	f025 0503 	bic.w	r5, r5, #3
   238fe:	194b      	adds	r3, r1, r5
   23900:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   23904:	f023 030f 	bic.w	r3, r3, #15
   23908:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   2390c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   23910:	db07      	blt.n	23922 <_malloc_trim_r+0x3e>
   23912:	2100      	movs	r1, #0
   23914:	4630      	mov	r0, r6
   23916:	f7ff fcad 	bl	23274 <_sbrk_r>
   2391a:	68bb      	ldr	r3, [r7, #8]
   2391c:	442b      	add	r3, r5
   2391e:	4298      	cmp	r0, r3
   23920:	d004      	beq.n	2392c <_malloc_trim_r+0x48>
   23922:	4630      	mov	r0, r6
   23924:	f7fe fc9e 	bl	22264 <__malloc_unlock>
   23928:	2000      	movs	r0, #0
   2392a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2392c:	4261      	negs	r1, r4
   2392e:	4630      	mov	r0, r6
   23930:	f7ff fca0 	bl	23274 <_sbrk_r>
   23934:	3001      	adds	r0, #1
   23936:	d00d      	beq.n	23954 <_malloc_trim_r+0x70>
   23938:	4a10      	ldr	r2, [pc, #64]	; (2397c <_malloc_trim_r+0x98>)
   2393a:	68bb      	ldr	r3, [r7, #8]
   2393c:	1b2d      	subs	r5, r5, r4
   2393e:	f045 0501 	orr.w	r5, r5, #1
   23942:	605d      	str	r5, [r3, #4]
   23944:	6813      	ldr	r3, [r2, #0]
   23946:	4630      	mov	r0, r6
   23948:	1b1b      	subs	r3, r3, r4
   2394a:	6013      	str	r3, [r2, #0]
   2394c:	f7fe fc8a 	bl	22264 <__malloc_unlock>
   23950:	2001      	movs	r0, #1
   23952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23954:	2100      	movs	r1, #0
   23956:	4630      	mov	r0, r6
   23958:	f7ff fc8c 	bl	23274 <_sbrk_r>
   2395c:	68ba      	ldr	r2, [r7, #8]
   2395e:	1a83      	subs	r3, r0, r2
   23960:	2b0f      	cmp	r3, #15
   23962:	ddde      	ble.n	23922 <_malloc_trim_r+0x3e>
   23964:	f043 0301 	orr.w	r3, r3, #1
   23968:	6053      	str	r3, [r2, #4]
   2396a:	4b05      	ldr	r3, [pc, #20]	; (23980 <_malloc_trim_r+0x9c>)
   2396c:	4903      	ldr	r1, [pc, #12]	; (2397c <_malloc_trim_r+0x98>)
   2396e:	681b      	ldr	r3, [r3, #0]
   23970:	1ac0      	subs	r0, r0, r3
   23972:	6008      	str	r0, [r1, #0]
   23974:	e7d5      	b.n	23922 <_malloc_trim_r+0x3e>
   23976:	bf00      	nop
   23978:	200053c8 	.word	0x200053c8
   2397c:	200071f4 	.word	0x200071f4
   23980:	200057d0 	.word	0x200057d0

00023984 <_free_r>:
   23984:	2900      	cmp	r1, #0
   23986:	d061      	beq.n	23a4c <_free_r+0xc8>
   23988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2398a:	460c      	mov	r4, r1
   2398c:	4606      	mov	r6, r0
   2398e:	f7fe fc63 	bl	22258 <__malloc_lock>
   23992:	f854 2c04 	ldr.w	r2, [r4, #-4]
   23996:	4f7b      	ldr	r7, [pc, #492]	; (23b84 <_free_r+0x200>)
   23998:	f1a4 0508 	sub.w	r5, r4, #8
   2399c:	f022 0101 	bic.w	r1, r2, #1
   239a0:	eb05 0c01 	add.w	ip, r5, r1
   239a4:	68b8      	ldr	r0, [r7, #8]
   239a6:	f8dc 3004 	ldr.w	r3, [ip, #4]
   239aa:	4560      	cmp	r0, ip
   239ac:	f023 0303 	bic.w	r3, r3, #3
   239b0:	f000 808b 	beq.w	23aca <_free_r+0x146>
   239b4:	07d2      	lsls	r2, r2, #31
   239b6:	f8cc 3004 	str.w	r3, [ip, #4]
   239ba:	d432      	bmi.n	23a22 <_free_r+0x9e>
   239bc:	f854 2c08 	ldr.w	r2, [r4, #-8]
   239c0:	1aad      	subs	r5, r5, r2
   239c2:	4411      	add	r1, r2
   239c4:	68aa      	ldr	r2, [r5, #8]
   239c6:	f107 0008 	add.w	r0, r7, #8
   239ca:	4282      	cmp	r2, r0
   239cc:	d06a      	beq.n	23aa4 <_free_r+0x120>
   239ce:	eb0c 0403 	add.w	r4, ip, r3
   239d2:	f8d4 e004 	ldr.w	lr, [r4, #4]
   239d6:	68ec      	ldr	r4, [r5, #12]
   239d8:	60d4      	str	r4, [r2, #12]
   239da:	f01e 0f01 	tst.w	lr, #1
   239de:	60a2      	str	r2, [r4, #8]
   239e0:	f000 8097 	beq.w	23b12 <_free_r+0x18e>
   239e4:	f041 0301 	orr.w	r3, r1, #1
   239e8:	606b      	str	r3, [r5, #4]
   239ea:	f8cc 1000 	str.w	r1, [ip]
   239ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   239f2:	d235      	bcs.n	23a60 <_free_r+0xdc>
   239f4:	6878      	ldr	r0, [r7, #4]
   239f6:	08cb      	lsrs	r3, r1, #3
   239f8:	2201      	movs	r2, #1
   239fa:	0949      	lsrs	r1, r1, #5
   239fc:	3301      	adds	r3, #1
   239fe:	408a      	lsls	r2, r1
   23a00:	4302      	orrs	r2, r0
   23a02:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   23a06:	607a      	str	r2, [r7, #4]
   23a08:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   23a0c:	3a08      	subs	r2, #8
   23a0e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   23a12:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   23a16:	60cd      	str	r5, [r1, #12]
   23a18:	4630      	mov	r0, r6
   23a1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23a1e:	f7fe bc21 	b.w	22264 <__malloc_unlock>
   23a22:	eb0c 0203 	add.w	r2, ip, r3
   23a26:	6852      	ldr	r2, [r2, #4]
   23a28:	07d0      	lsls	r0, r2, #31
   23a2a:	d410      	bmi.n	23a4e <_free_r+0xca>
   23a2c:	4419      	add	r1, r3
   23a2e:	f107 0008 	add.w	r0, r7, #8
   23a32:	f8dc 3008 	ldr.w	r3, [ip, #8]
   23a36:	4283      	cmp	r3, r0
   23a38:	d073      	beq.n	23b22 <_free_r+0x19e>
   23a3a:	f8dc 200c 	ldr.w	r2, [ip, #12]
   23a3e:	60da      	str	r2, [r3, #12]
   23a40:	6093      	str	r3, [r2, #8]
   23a42:	f041 0301 	orr.w	r3, r1, #1
   23a46:	606b      	str	r3, [r5, #4]
   23a48:	5069      	str	r1, [r5, r1]
   23a4a:	e7d0      	b.n	239ee <_free_r+0x6a>
   23a4c:	4770      	bx	lr
   23a4e:	f041 0301 	orr.w	r3, r1, #1
   23a52:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   23a56:	f844 3c04 	str.w	r3, [r4, #-4]
   23a5a:	f8cc 1000 	str.w	r1, [ip]
   23a5e:	d3c9      	bcc.n	239f4 <_free_r+0x70>
   23a60:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   23a64:	ea4f 2351 	mov.w	r3, r1, lsr #9
   23a68:	d248      	bcs.n	23afc <_free_r+0x178>
   23a6a:	098b      	lsrs	r3, r1, #6
   23a6c:	f103 0039 	add.w	r0, r3, #57	; 0x39
   23a70:	f103 0238 	add.w	r2, r3, #56	; 0x38
   23a74:	00c3      	lsls	r3, r0, #3
   23a76:	18f8      	adds	r0, r7, r3
   23a78:	58fb      	ldr	r3, [r7, r3]
   23a7a:	3808      	subs	r0, #8
   23a7c:	4298      	cmp	r0, r3
   23a7e:	d059      	beq.n	23b34 <_free_r+0x1b0>
   23a80:	685a      	ldr	r2, [r3, #4]
   23a82:	f022 0203 	bic.w	r2, r2, #3
   23a86:	428a      	cmp	r2, r1
   23a88:	d902      	bls.n	23a90 <_free_r+0x10c>
   23a8a:	689b      	ldr	r3, [r3, #8]
   23a8c:	4298      	cmp	r0, r3
   23a8e:	d1f7      	bne.n	23a80 <_free_r+0xfc>
   23a90:	68d8      	ldr	r0, [r3, #12]
   23a92:	e9c5 3002 	strd	r3, r0, [r5, #8]
   23a96:	6085      	str	r5, [r0, #8]
   23a98:	60dd      	str	r5, [r3, #12]
   23a9a:	4630      	mov	r0, r6
   23a9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23aa0:	f7fe bbe0 	b.w	22264 <__malloc_unlock>
   23aa4:	eb0c 0203 	add.w	r2, ip, r3
   23aa8:	6852      	ldr	r2, [r2, #4]
   23aaa:	07d2      	lsls	r2, r2, #31
   23aac:	d463      	bmi.n	23b76 <_free_r+0x1f2>
   23aae:	440b      	add	r3, r1
   23ab0:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   23ab4:	60ca      	str	r2, [r1, #12]
   23ab6:	6091      	str	r1, [r2, #8]
   23ab8:	f043 0201 	orr.w	r2, r3, #1
   23abc:	606a      	str	r2, [r5, #4]
   23abe:	4630      	mov	r0, r6
   23ac0:	50eb      	str	r3, [r5, r3]
   23ac2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   23ac6:	f7fe bbcd 	b.w	22264 <__malloc_unlock>
   23aca:	440b      	add	r3, r1
   23acc:	07d1      	lsls	r1, r2, #31
   23ace:	d407      	bmi.n	23ae0 <_free_r+0x15c>
   23ad0:	f854 2c08 	ldr.w	r2, [r4, #-8]
   23ad4:	1aad      	subs	r5, r5, r2
   23ad6:	4413      	add	r3, r2
   23ad8:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   23adc:	60ca      	str	r2, [r1, #12]
   23ade:	6091      	str	r1, [r2, #8]
   23ae0:	f043 0201 	orr.w	r2, r3, #1
   23ae4:	606a      	str	r2, [r5, #4]
   23ae6:	4a28      	ldr	r2, [pc, #160]	; (23b88 <_free_r+0x204>)
   23ae8:	60bd      	str	r5, [r7, #8]
   23aea:	6812      	ldr	r2, [r2, #0]
   23aec:	429a      	cmp	r2, r3
   23aee:	d893      	bhi.n	23a18 <_free_r+0x94>
   23af0:	4b26      	ldr	r3, [pc, #152]	; (23b8c <_free_r+0x208>)
   23af2:	4630      	mov	r0, r6
   23af4:	6819      	ldr	r1, [r3, #0]
   23af6:	f7ff fef5 	bl	238e4 <_malloc_trim_r>
   23afa:	e78d      	b.n	23a18 <_free_r+0x94>
   23afc:	2b14      	cmp	r3, #20
   23afe:	d90a      	bls.n	23b16 <_free_r+0x192>
   23b00:	2b54      	cmp	r3, #84	; 0x54
   23b02:	d81f      	bhi.n	23b44 <_free_r+0x1c0>
   23b04:	0b0b      	lsrs	r3, r1, #12
   23b06:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   23b0a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   23b0e:	00c3      	lsls	r3, r0, #3
   23b10:	e7b1      	b.n	23a76 <_free_r+0xf2>
   23b12:	4419      	add	r1, r3
   23b14:	e78d      	b.n	23a32 <_free_r+0xae>
   23b16:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   23b1a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   23b1e:	00c3      	lsls	r3, r0, #3
   23b20:	e7a9      	b.n	23a76 <_free_r+0xf2>
   23b22:	f041 0301 	orr.w	r3, r1, #1
   23b26:	e9c7 5504 	strd	r5, r5, [r7, #16]
   23b2a:	e9c5 0002 	strd	r0, r0, [r5, #8]
   23b2e:	606b      	str	r3, [r5, #4]
   23b30:	5069      	str	r1, [r5, r1]
   23b32:	e771      	b.n	23a18 <_free_r+0x94>
   23b34:	6879      	ldr	r1, [r7, #4]
   23b36:	1092      	asrs	r2, r2, #2
   23b38:	2401      	movs	r4, #1
   23b3a:	fa04 f202 	lsl.w	r2, r4, r2
   23b3e:	430a      	orrs	r2, r1
   23b40:	607a      	str	r2, [r7, #4]
   23b42:	e7a6      	b.n	23a92 <_free_r+0x10e>
   23b44:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   23b48:	d806      	bhi.n	23b58 <_free_r+0x1d4>
   23b4a:	0bcb      	lsrs	r3, r1, #15
   23b4c:	f103 0078 	add.w	r0, r3, #120	; 0x78
   23b50:	f103 0277 	add.w	r2, r3, #119	; 0x77
   23b54:	00c3      	lsls	r3, r0, #3
   23b56:	e78e      	b.n	23a76 <_free_r+0xf2>
   23b58:	f240 5254 	movw	r2, #1364	; 0x554
   23b5c:	4293      	cmp	r3, r2
   23b5e:	d806      	bhi.n	23b6e <_free_r+0x1ea>
   23b60:	0c8b      	lsrs	r3, r1, #18
   23b62:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   23b66:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   23b6a:	00c3      	lsls	r3, r0, #3
   23b6c:	e783      	b.n	23a76 <_free_r+0xf2>
   23b6e:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   23b72:	227e      	movs	r2, #126	; 0x7e
   23b74:	e77f      	b.n	23a76 <_free_r+0xf2>
   23b76:	f041 0301 	orr.w	r3, r1, #1
   23b7a:	606b      	str	r3, [r5, #4]
   23b7c:	f8cc 1000 	str.w	r1, [ip]
   23b80:	e74a      	b.n	23a18 <_free_r+0x94>
   23b82:	bf00      	nop
   23b84:	200053c8 	.word	0x200053c8
   23b88:	200057d4 	.word	0x200057d4
   23b8c:	20007224 	.word	0x20007224

00023b90 <__ascii_mbtowc>:
   23b90:	b082      	sub	sp, #8
   23b92:	b149      	cbz	r1, 23ba8 <__ascii_mbtowc+0x18>
   23b94:	b15a      	cbz	r2, 23bae <__ascii_mbtowc+0x1e>
   23b96:	b16b      	cbz	r3, 23bb4 <__ascii_mbtowc+0x24>
   23b98:	7813      	ldrb	r3, [r2, #0]
   23b9a:	600b      	str	r3, [r1, #0]
   23b9c:	7812      	ldrb	r2, [r2, #0]
   23b9e:	1e10      	subs	r0, r2, #0
   23ba0:	bf18      	it	ne
   23ba2:	2001      	movne	r0, #1
   23ba4:	b002      	add	sp, #8
   23ba6:	4770      	bx	lr
   23ba8:	a901      	add	r1, sp, #4
   23baa:	2a00      	cmp	r2, #0
   23bac:	d1f3      	bne.n	23b96 <__ascii_mbtowc+0x6>
   23bae:	4610      	mov	r0, r2
   23bb0:	b002      	add	sp, #8
   23bb2:	4770      	bx	lr
   23bb4:	f06f 0001 	mvn.w	r0, #1
   23bb8:	e7f4      	b.n	23ba4 <__ascii_mbtowc+0x14>
   23bba:	bf00      	nop
   23bbc:	0000      	movs	r0, r0
	...

00023bc0 <_svfprintf_r>:
   23bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23bc4:	ed2d 8b08 	vpush	{d8-d11}
   23bc8:	b0d1      	sub	sp, #324	; 0x144
   23bca:	460c      	mov	r4, r1
   23bcc:	ee0b 1a10 	vmov	s22, r1
   23bd0:	4690      	mov	r8, r2
   23bd2:	9308      	str	r3, [sp, #32]
   23bd4:	4683      	mov	fp, r0
   23bd6:	f002 fbcb 	bl	26370 <_localeconv_r>
   23bda:	6803      	ldr	r3, [r0, #0]
   23bdc:	9312      	str	r3, [sp, #72]	; 0x48
   23bde:	4618      	mov	r0, r3
   23be0:	f7ff fdce 	bl	23780 <strlen>
   23be4:	af20      	add	r7, sp, #128	; 0x80
   23be6:	9010      	str	r0, [sp, #64]	; 0x40
   23be8:	2208      	movs	r2, #8
   23bea:	2100      	movs	r1, #0
   23bec:	4638      	mov	r0, r7
   23bee:	f7ff fa33 	bl	23058 <memset>
   23bf2:	89a3      	ldrh	r3, [r4, #12]
   23bf4:	061b      	lsls	r3, r3, #24
   23bf6:	d503      	bpl.n	23c00 <_svfprintf_r+0x40>
   23bf8:	6923      	ldr	r3, [r4, #16]
   23bfa:	2b00      	cmp	r3, #0
   23bfc:	f000 8755 	beq.w	24aaa <_svfprintf_r+0xeea>
   23c00:	2300      	movs	r3, #0
   23c02:	ed9f 8b83 	vldr	d8, [pc, #524]	; 23e10 <_svfprintf_r+0x250>
   23c06:	ed9f 9b84 	vldr	d9, [pc, #528]	; 23e18 <_svfprintf_r+0x258>
   23c0a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   23c0e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   23c12:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   23c16:	aa27      	add	r2, sp, #156	; 0x9c
   23c18:	930e      	str	r3, [sp, #56]	; 0x38
   23c1a:	9224      	str	r2, [sp, #144]	; 0x90
   23c1c:	4692      	mov	sl, r2
   23c1e:	9311      	str	r3, [sp, #68]	; 0x44
   23c20:	9304      	str	r3, [sp, #16]
   23c22:	4644      	mov	r4, r8
   23c24:	46a1      	mov	r9, r4
   23c26:	4b7e      	ldr	r3, [pc, #504]	; (23e20 <_svfprintf_r+0x260>)
   23c28:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   23c2c:	f7ff fb10 	bl	23250 <__locale_mb_cur_max>
   23c30:	464a      	mov	r2, r9
   23c32:	4603      	mov	r3, r0
   23c34:	a91c      	add	r1, sp, #112	; 0x70
   23c36:	9700      	str	r7, [sp, #0]
   23c38:	4658      	mov	r0, fp
   23c3a:	47a8      	blx	r5
   23c3c:	2800      	cmp	r0, #0
   23c3e:	f000 80b0 	beq.w	23da2 <_svfprintf_r+0x1e2>
   23c42:	f2c0 80a6 	blt.w	23d92 <_svfprintf_r+0x1d2>
   23c46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   23c48:	2a25      	cmp	r2, #37	; 0x25
   23c4a:	4603      	mov	r3, r0
   23c4c:	d001      	beq.n	23c52 <_svfprintf_r+0x92>
   23c4e:	4499      	add	r9, r3
   23c50:	e7e9      	b.n	23c26 <_svfprintf_r+0x66>
   23c52:	ebb9 0504 	subs.w	r5, r9, r4
   23c56:	4606      	mov	r6, r0
   23c58:	f040 80a7 	bne.w	23daa <_svfprintf_r+0x1ea>
   23c5c:	2300      	movs	r3, #0
   23c5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   23c62:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   23c66:	4698      	mov	r8, r3
   23c68:	9306      	str	r3, [sp, #24]
   23c6a:	f109 0901 	add.w	r9, r9, #1
   23c6e:	f899 3000 	ldrb.w	r3, [r9]
   23c72:	9203      	str	r2, [sp, #12]
   23c74:	252b      	movs	r5, #43	; 0x2b
   23c76:	2620      	movs	r6, #32
   23c78:	f109 0901 	add.w	r9, r9, #1
   23c7c:	f1a3 0220 	sub.w	r2, r3, #32
   23c80:	2a5a      	cmp	r2, #90	; 0x5a
   23c82:	f200 80cf 	bhi.w	23e24 <_svfprintf_r+0x264>
   23c86:	e8df f012 	tbh	[pc, r2, lsl #1]
   23c8a:	02e8      	.short	0x02e8
   23c8c:	00cd00cd 	.word	0x00cd00cd
   23c90:	00cd02e3 	.word	0x00cd02e3
   23c94:	00cd00cd 	.word	0x00cd00cd
   23c98:	00cd006a 	.word	0x00cd006a
   23c9c:	020500cd 	.word	0x020500cd
   23ca0:	00cd0284 	.word	0x00cd0284
   23ca4:	02c90210 	.word	0x02c90210
   23ca8:	02bd00cd 	.word	0x02bd00cd
   23cac:	005b005b 	.word	0x005b005b
   23cb0:	005b005b 	.word	0x005b005b
   23cb4:	005b005b 	.word	0x005b005b
   23cb8:	005b005b 	.word	0x005b005b
   23cbc:	00cd005b 	.word	0x00cd005b
   23cc0:	00cd00cd 	.word	0x00cd00cd
   23cc4:	00cd00cd 	.word	0x00cd00cd
   23cc8:	00cd00cd 	.word	0x00cd00cd
   23ccc:	00cd0153 	.word	0x00cd0153
   23cd0:	021a0183 	.word	0x021a0183
   23cd4:	01530153 	.word	0x01530153
   23cd8:	00cd0153 	.word	0x00cd0153
   23cdc:	00cd00cd 	.word	0x00cd00cd
   23ce0:	021500cd 	.word	0x021500cd
   23ce4:	00cd00cd 	.word	0x00cd00cd
   23ce8:	00cd0296 	.word	0x00cd0296
   23cec:	00cd00cd 	.word	0x00cd00cd
   23cf0:	00cd01ab 	.word	0x00cd01ab
   23cf4:	00cd02aa 	.word	0x00cd02aa
   23cf8:	06e300cd 	.word	0x06e300cd
   23cfc:	00cd00cd 	.word	0x00cd00cd
   23d00:	00cd00cd 	.word	0x00cd00cd
   23d04:	00cd00cd 	.word	0x00cd00cd
   23d08:	00cd00cd 	.word	0x00cd00cd
   23d0c:	00cd0153 	.word	0x00cd0153
   23d10:	01de0183 	.word	0x01de0183
   23d14:	01530153 	.word	0x01530153
   23d18:	02770153 	.word	0x02770153
   23d1c:	007f01de 	.word	0x007f01de
   23d20:	028900cd 	.word	0x028900cd
   23d24:	025f00cd 	.word	0x025f00cd
   23d28:	022f06e0 	.word	0x022f06e0
   23d2c:	00cd007f 	.word	0x00cd007f
   23d30:	007c01ab 	.word	0x007c01ab
   23d34:	00cd06b8 	.word	0x00cd06b8
   23d38:	06bd00cd 	.word	0x06bd00cd
   23d3c:	007c00cd 	.word	0x007c00cd
   23d40:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   23d44:	2100      	movs	r1, #0
   23d46:	f819 3b01 	ldrb.w	r3, [r9], #1
   23d4a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   23d4e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   23d52:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   23d56:	2a09      	cmp	r2, #9
   23d58:	d9f5      	bls.n	23d46 <_svfprintf_r+0x186>
   23d5a:	9106      	str	r1, [sp, #24]
   23d5c:	e78e      	b.n	23c7c <_svfprintf_r+0xbc>
   23d5e:	4658      	mov	r0, fp
   23d60:	f002 fb06 	bl	26370 <_localeconv_r>
   23d64:	6843      	ldr	r3, [r0, #4]
   23d66:	9315      	str	r3, [sp, #84]	; 0x54
   23d68:	4618      	mov	r0, r3
   23d6a:	f7ff fd09 	bl	23780 <strlen>
   23d6e:	9016      	str	r0, [sp, #88]	; 0x58
   23d70:	4658      	mov	r0, fp
   23d72:	f002 fafd 	bl	26370 <_localeconv_r>
   23d76:	6883      	ldr	r3, [r0, #8]
   23d78:	9313      	str	r3, [sp, #76]	; 0x4c
   23d7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   23d7c:	2b00      	cmp	r3, #0
   23d7e:	f040 862d 	bne.w	249dc <_svfprintf_r+0xe1c>
   23d82:	f899 3000 	ldrb.w	r3, [r9]
   23d86:	e777      	b.n	23c78 <_svfprintf_r+0xb8>
   23d88:	f899 3000 	ldrb.w	r3, [r9]
   23d8c:	f048 0820 	orr.w	r8, r8, #32
   23d90:	e772      	b.n	23c78 <_svfprintf_r+0xb8>
   23d92:	2208      	movs	r2, #8
   23d94:	2100      	movs	r1, #0
   23d96:	4638      	mov	r0, r7
   23d98:	f7ff f95e 	bl	23058 <memset>
   23d9c:	2301      	movs	r3, #1
   23d9e:	4499      	add	r9, r3
   23da0:	e741      	b.n	23c26 <_svfprintf_r+0x66>
   23da2:	ebb9 0504 	subs.w	r5, r9, r4
   23da6:	4606      	mov	r6, r0
   23da8:	d011      	beq.n	23dce <_svfprintf_r+0x20e>
   23daa:	9b26      	ldr	r3, [sp, #152]	; 0x98
   23dac:	442b      	add	r3, r5
   23dae:	9326      	str	r3, [sp, #152]	; 0x98
   23db0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23db2:	3301      	adds	r3, #1
   23db4:	2b07      	cmp	r3, #7
   23db6:	e9ca 4500 	strd	r4, r5, [sl]
   23dba:	9325      	str	r3, [sp, #148]	; 0x94
   23dbc:	dc1c      	bgt.n	23df8 <_svfprintf_r+0x238>
   23dbe:	f10a 0a08 	add.w	sl, sl, #8
   23dc2:	9b04      	ldr	r3, [sp, #16]
   23dc4:	442b      	add	r3, r5
   23dc6:	9304      	str	r3, [sp, #16]
   23dc8:	2e00      	cmp	r6, #0
   23dca:	f47f af47 	bne.w	23c5c <_svfprintf_r+0x9c>
   23dce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   23dd0:	2b00      	cmp	r3, #0
   23dd2:	f041 820b 	bne.w	251ec <_svfprintf_r+0x162c>
   23dd6:	ee1b 3a10 	vmov	r3, s22
   23dda:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   23dde:	f013 0f40 	tst.w	r3, #64	; 0x40
   23de2:	9b04      	ldr	r3, [sp, #16]
   23de4:	bf18      	it	ne
   23de6:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   23dea:	9304      	str	r3, [sp, #16]
   23dec:	9804      	ldr	r0, [sp, #16]
   23dee:	b051      	add	sp, #324	; 0x144
   23df0:	ecbd 8b08 	vpop	{d8-d11}
   23df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23df8:	ee1b 1a10 	vmov	r1, s22
   23dfc:	aa24      	add	r2, sp, #144	; 0x90
   23dfe:	4658      	mov	r0, fp
   23e00:	f003 fb5c 	bl	274bc <__ssprint_r>
   23e04:	2800      	cmp	r0, #0
   23e06:	d1e6      	bne.n	23dd6 <_svfprintf_r+0x216>
   23e08:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23e0c:	e7d9      	b.n	23dc2 <_svfprintf_r+0x202>
   23e0e:	bf00      	nop
	...
   23e18:	ffffffff 	.word	0xffffffff
   23e1c:	7fefffff 	.word	0x7fefffff
   23e20:	2000525c 	.word	0x2000525c
   23e24:	930b      	str	r3, [sp, #44]	; 0x2c
   23e26:	2b00      	cmp	r3, #0
   23e28:	d0d1      	beq.n	23dce <_svfprintf_r+0x20e>
   23e2a:	2100      	movs	r1, #0
   23e2c:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   23e30:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   23e34:	2301      	movs	r3, #1
   23e36:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   23e3a:	9302      	str	r3, [sp, #8]
   23e3c:	9107      	str	r1, [sp, #28]
   23e3e:	9305      	str	r3, [sp, #20]
   23e40:	9103      	str	r1, [sp, #12]
   23e42:	910f      	str	r1, [sp, #60]	; 0x3c
   23e44:	ac37      	add	r4, sp, #220	; 0xdc
   23e46:	f018 0302 	ands.w	r3, r8, #2
   23e4a:	9309      	str	r3, [sp, #36]	; 0x24
   23e4c:	d002      	beq.n	23e54 <_svfprintf_r+0x294>
   23e4e:	9b02      	ldr	r3, [sp, #8]
   23e50:	3302      	adds	r3, #2
   23e52:	9302      	str	r3, [sp, #8]
   23e54:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   23e58:	930a      	str	r3, [sp, #40]	; 0x28
   23e5a:	d105      	bne.n	23e68 <_svfprintf_r+0x2a8>
   23e5c:	9b06      	ldr	r3, [sp, #24]
   23e5e:	9a02      	ldr	r2, [sp, #8]
   23e60:	1a9d      	subs	r5, r3, r2
   23e62:	2d00      	cmp	r5, #0
   23e64:	f300 8369 	bgt.w	2453a <_svfprintf_r+0x97a>
   23e68:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23e6a:	b189      	cbz	r1, 23e90 <_svfprintf_r+0x2d0>
   23e6c:	9925      	ldr	r1, [sp, #148]	; 0x94
   23e6e:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   23e72:	3101      	adds	r1, #1
   23e74:	3201      	adds	r2, #1
   23e76:	f8ca 0000 	str.w	r0, [sl]
   23e7a:	2907      	cmp	r1, #7
   23e7c:	f04f 0001 	mov.w	r0, #1
   23e80:	9226      	str	r2, [sp, #152]	; 0x98
   23e82:	9125      	str	r1, [sp, #148]	; 0x94
   23e84:	f8ca 0004 	str.w	r0, [sl, #4]
   23e88:	f300 83a2 	bgt.w	245d0 <_svfprintf_r+0xa10>
   23e8c:	f10a 0a08 	add.w	sl, sl, #8
   23e90:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23e92:	b183      	cbz	r3, 23eb6 <_svfprintf_r+0x2f6>
   23e94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23e96:	a91a      	add	r1, sp, #104	; 0x68
   23e98:	3301      	adds	r3, #1
   23e9a:	3202      	adds	r2, #2
   23e9c:	f8ca 1000 	str.w	r1, [sl]
   23ea0:	2b07      	cmp	r3, #7
   23ea2:	f04f 0102 	mov.w	r1, #2
   23ea6:	9226      	str	r2, [sp, #152]	; 0x98
   23ea8:	9325      	str	r3, [sp, #148]	; 0x94
   23eaa:	f8ca 1004 	str.w	r1, [sl, #4]
   23eae:	f300 83a3 	bgt.w	245f8 <_svfprintf_r+0xa38>
   23eb2:	f10a 0a08 	add.w	sl, sl, #8
   23eb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23eb8:	2b80      	cmp	r3, #128	; 0x80
   23eba:	f000 826c 	beq.w	24396 <_svfprintf_r+0x7d6>
   23ebe:	9b03      	ldr	r3, [sp, #12]
   23ec0:	9905      	ldr	r1, [sp, #20]
   23ec2:	1a5d      	subs	r5, r3, r1
   23ec4:	2d00      	cmp	r5, #0
   23ec6:	f300 82a5 	bgt.w	24414 <_svfprintf_r+0x854>
   23eca:	f418 7f80 	tst.w	r8, #256	; 0x100
   23ece:	f040 820d 	bne.w	242ec <_svfprintf_r+0x72c>
   23ed2:	9b05      	ldr	r3, [sp, #20]
   23ed4:	f8ca 3004 	str.w	r3, [sl, #4]
   23ed8:	441a      	add	r2, r3
   23eda:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23edc:	f8ca 4000 	str.w	r4, [sl]
   23ee0:	3301      	adds	r3, #1
   23ee2:	2b07      	cmp	r3, #7
   23ee4:	9226      	str	r2, [sp, #152]	; 0x98
   23ee6:	9325      	str	r3, [sp, #148]	; 0x94
   23ee8:	f300 831b 	bgt.w	24522 <_svfprintf_r+0x962>
   23eec:	f10a 0a08 	add.w	sl, sl, #8
   23ef0:	f018 0f04 	tst.w	r8, #4
   23ef4:	d005      	beq.n	23f02 <_svfprintf_r+0x342>
   23ef6:	9b06      	ldr	r3, [sp, #24]
   23ef8:	9902      	ldr	r1, [sp, #8]
   23efa:	1a5c      	subs	r4, r3, r1
   23efc:	2c00      	cmp	r4, #0
   23efe:	f300 8388 	bgt.w	24612 <_svfprintf_r+0xa52>
   23f02:	9b04      	ldr	r3, [sp, #16]
   23f04:	9906      	ldr	r1, [sp, #24]
   23f06:	9802      	ldr	r0, [sp, #8]
   23f08:	4281      	cmp	r1, r0
   23f0a:	bfac      	ite	ge
   23f0c:	185b      	addge	r3, r3, r1
   23f0e:	181b      	addlt	r3, r3, r0
   23f10:	9304      	str	r3, [sp, #16]
   23f12:	2a00      	cmp	r2, #0
   23f14:	f040 82b0 	bne.w	24478 <_svfprintf_r+0x8b8>
   23f18:	2300      	movs	r3, #0
   23f1a:	9325      	str	r3, [sp, #148]	; 0x94
   23f1c:	9b07      	ldr	r3, [sp, #28]
   23f1e:	b11b      	cbz	r3, 23f28 <_svfprintf_r+0x368>
   23f20:	9907      	ldr	r1, [sp, #28]
   23f22:	4658      	mov	r0, fp
   23f24:	f7ff fd2e 	bl	23984 <_free_r>
   23f28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23f2c:	464c      	mov	r4, r9
   23f2e:	e679      	b.n	23c24 <_svfprintf_r+0x64>
   23f30:	930b      	str	r3, [sp, #44]	; 0x2c
   23f32:	9b08      	ldr	r3, [sp, #32]
   23f34:	3307      	adds	r3, #7
   23f36:	f023 0307 	bic.w	r3, r3, #7
   23f3a:	ecb3 8b02 	vldmia	r3!, {d8}
   23f3e:	eeb0 7bc8 	vabs.f64	d7, d8
   23f42:	eeb4 7b49 	vcmp.f64	d7, d9
   23f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23f4a:	9308      	str	r3, [sp, #32]
   23f4c:	f340 84e9 	ble.w	24922 <_svfprintf_r+0xd62>
   23f50:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   23f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23f58:	f101 8059 	bmi.w	2500e <_svfprintf_r+0x144e>
   23f5c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23f60:	4cab      	ldr	r4, [pc, #684]	; (24210 <_svfprintf_r+0x650>)
   23f62:	4bac      	ldr	r3, [pc, #688]	; (24214 <_svfprintf_r+0x654>)
   23f64:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   23f68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23f6a:	2a47      	cmp	r2, #71	; 0x47
   23f6c:	bfc8      	it	gt
   23f6e:	461c      	movgt	r4, r3
   23f70:	2300      	movs	r3, #0
   23f72:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23f76:	2203      	movs	r2, #3
   23f78:	9307      	str	r3, [sp, #28]
   23f7a:	9202      	str	r2, [sp, #8]
   23f7c:	9205      	str	r2, [sp, #20]
   23f7e:	9303      	str	r3, [sp, #12]
   23f80:	930f      	str	r3, [sp, #60]	; 0x3c
   23f82:	2900      	cmp	r1, #0
   23f84:	f43f af5f 	beq.w	23e46 <_svfprintf_r+0x286>
   23f88:	9b02      	ldr	r3, [sp, #8]
   23f8a:	3301      	adds	r3, #1
   23f8c:	9302      	str	r3, [sp, #8]
   23f8e:	e75a      	b.n	23e46 <_svfprintf_r+0x286>
   23f90:	2b43      	cmp	r3, #67	; 0x43
   23f92:	930b      	str	r3, [sp, #44]	; 0x2c
   23f94:	d003      	beq.n	23f9e <_svfprintf_r+0x3de>
   23f96:	f018 0f10 	tst.w	r8, #16
   23f9a:	f000 855d 	beq.w	24a58 <_svfprintf_r+0xe98>
   23f9e:	9d08      	ldr	r5, [sp, #32]
   23fa0:	2208      	movs	r2, #8
   23fa2:	2100      	movs	r1, #0
   23fa4:	a822      	add	r0, sp, #136	; 0x88
   23fa6:	ac37      	add	r4, sp, #220	; 0xdc
   23fa8:	f7ff f856 	bl	23058 <memset>
   23fac:	ab22      	add	r3, sp, #136	; 0x88
   23fae:	f855 2b04 	ldr.w	r2, [r5], #4
   23fb2:	4621      	mov	r1, r4
   23fb4:	4658      	mov	r0, fp
   23fb6:	f002 fa97 	bl	264e8 <_wcrtomb_r>
   23fba:	4603      	mov	r3, r0
   23fbc:	3301      	adds	r3, #1
   23fbe:	9005      	str	r0, [sp, #20]
   23fc0:	f001 82ee 	beq.w	255a0 <_svfprintf_r+0x19e0>
   23fc4:	9b05      	ldr	r3, [sp, #20]
   23fc6:	9508      	str	r5, [sp, #32]
   23fc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   23fcc:	9302      	str	r3, [sp, #8]
   23fce:	2100      	movs	r1, #0
   23fd0:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   23fd4:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   23fd8:	9107      	str	r1, [sp, #28]
   23fda:	9103      	str	r1, [sp, #12]
   23fdc:	910f      	str	r1, [sp, #60]	; 0x3c
   23fde:	e732      	b.n	23e46 <_svfprintf_r+0x286>
   23fe0:	930b      	str	r3, [sp, #44]	; 0x2c
   23fe2:	9b08      	ldr	r3, [sp, #32]
   23fe4:	461a      	mov	r2, r3
   23fe6:	2300      	movs	r3, #0
   23fe8:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   23fec:	4613      	mov	r3, r2
   23fee:	f853 4b04 	ldr.w	r4, [r3], #4
   23ff2:	9308      	str	r3, [sp, #32]
   23ff4:	2c00      	cmp	r4, #0
   23ff6:	f000 8548 	beq.w	24a8a <_svfprintf_r+0xeca>
   23ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23ffc:	2b53      	cmp	r3, #83	; 0x53
   23ffe:	f000 86ec 	beq.w	24dda <_svfprintf_r+0x121a>
   24002:	f018 0310 	ands.w	r3, r8, #16
   24006:	930c      	str	r3, [sp, #48]	; 0x30
   24008:	f040 86e7 	bne.w	24dda <_svfprintf_r+0x121a>
   2400c:	9b03      	ldr	r3, [sp, #12]
   2400e:	1c5d      	adds	r5, r3, #1
   24010:	f001 80e5 	beq.w	251de <_svfprintf_r+0x161e>
   24014:	990c      	ldr	r1, [sp, #48]	; 0x30
   24016:	461a      	mov	r2, r3
   24018:	4620      	mov	r0, r4
   2401a:	f7ff fb59 	bl	236d0 <memchr>
   2401e:	9007      	str	r0, [sp, #28]
   24020:	2800      	cmp	r0, #0
   24022:	f001 8328 	beq.w	25676 <_svfprintf_r+0x1ab6>
   24026:	9b07      	ldr	r3, [sp, #28]
   24028:	1b1a      	subs	r2, r3, r4
   2402a:	9205      	str	r2, [sp, #20]
   2402c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2402e:	9303      	str	r3, [sp, #12]
   24030:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   24034:	930f      	str	r3, [sp, #60]	; 0x3c
   24036:	930d      	str	r3, [sp, #52]	; 0x34
   24038:	9307      	str	r3, [sp, #28]
   2403a:	2373      	movs	r3, #115	; 0x73
   2403c:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24040:	9202      	str	r2, [sp, #8]
   24042:	930b      	str	r3, [sp, #44]	; 0x2c
   24044:	e79d      	b.n	23f82 <_svfprintf_r+0x3c2>
   24046:	f018 0f20 	tst.w	r8, #32
   2404a:	930b      	str	r3, [sp, #44]	; 0x2c
   2404c:	9b08      	ldr	r3, [sp, #32]
   2404e:	d03d      	beq.n	240cc <_svfprintf_r+0x50c>
   24050:	3307      	adds	r3, #7
   24052:	f023 0307 	bic.w	r3, r3, #7
   24056:	461a      	mov	r2, r3
   24058:	4611      	mov	r1, r2
   2405a:	685b      	ldr	r3, [r3, #4]
   2405c:	f851 2b08 	ldr.w	r2, [r1], #8
   24060:	9108      	str	r1, [sp, #32]
   24062:	4619      	mov	r1, r3
   24064:	2b00      	cmp	r3, #0
   24066:	f2c0 840c 	blt.w	24882 <_svfprintf_r+0xcc2>
   2406a:	9b03      	ldr	r3, [sp, #12]
   2406c:	3301      	adds	r3, #1
   2406e:	f000 829e 	beq.w	245ae <_svfprintf_r+0x9ee>
   24072:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   24076:	ea52 0301 	orrs.w	r3, r2, r1
   2407a:	9002      	str	r0, [sp, #8]
   2407c:	f040 8299 	bne.w	245b2 <_svfprintf_r+0x9f2>
   24080:	9b03      	ldr	r3, [sp, #12]
   24082:	2b00      	cmp	r3, #0
   24084:	f040 829a 	bne.w	245bc <_svfprintf_r+0x9fc>
   24088:	4680      	mov	r8, r0
   2408a:	2300      	movs	r3, #0
   2408c:	9303      	str	r3, [sp, #12]
   2408e:	9305      	str	r3, [sp, #20]
   24090:	ac50      	add	r4, sp, #320	; 0x140
   24092:	e106      	b.n	242a2 <_svfprintf_r+0x6e2>
   24094:	9b08      	ldr	r3, [sp, #32]
   24096:	f853 2b04 	ldr.w	r2, [r3], #4
   2409a:	9206      	str	r2, [sp, #24]
   2409c:	2a00      	cmp	r2, #0
   2409e:	f280 8419 	bge.w	248d4 <_svfprintf_r+0xd14>
   240a2:	9a06      	ldr	r2, [sp, #24]
   240a4:	9308      	str	r3, [sp, #32]
   240a6:	4252      	negs	r2, r2
   240a8:	9206      	str	r2, [sp, #24]
   240aa:	f899 3000 	ldrb.w	r3, [r9]
   240ae:	f048 0804 	orr.w	r8, r8, #4
   240b2:	e5e1      	b.n	23c78 <_svfprintf_r+0xb8>
   240b4:	f899 3000 	ldrb.w	r3, [r9]
   240b8:	f048 0808 	orr.w	r8, r8, #8
   240bc:	e5dc      	b.n	23c78 <_svfprintf_r+0xb8>
   240be:	f048 0810 	orr.w	r8, r8, #16
   240c2:	f018 0f20 	tst.w	r8, #32
   240c6:	930b      	str	r3, [sp, #44]	; 0x2c
   240c8:	9b08      	ldr	r3, [sp, #32]
   240ca:	d1c1      	bne.n	24050 <_svfprintf_r+0x490>
   240cc:	f018 0f10 	tst.w	r8, #16
   240d0:	f040 840b 	bne.w	248ea <_svfprintf_r+0xd2a>
   240d4:	f018 0f40 	tst.w	r8, #64	; 0x40
   240d8:	f000 8403 	beq.w	248e2 <_svfprintf_r+0xd22>
   240dc:	f933 2b04 	ldrsh.w	r2, [r3], #4
   240e0:	9308      	str	r3, [sp, #32]
   240e2:	17d1      	asrs	r1, r2, #31
   240e4:	460b      	mov	r3, r1
   240e6:	e7bd      	b.n	24064 <_svfprintf_r+0x4a4>
   240e8:	9b08      	ldr	r3, [sp, #32]
   240ea:	f048 0202 	orr.w	r2, r8, #2
   240ee:	9202      	str	r2, [sp, #8]
   240f0:	f853 2b04 	ldr.w	r2, [r3], #4
   240f4:	9308      	str	r3, [sp, #32]
   240f6:	f647 0330 	movw	r3, #30768	; 0x7830
   240fa:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   240fe:	2078      	movs	r0, #120	; 0x78
   24100:	4b45      	ldr	r3, [pc, #276]	; (24218 <_svfprintf_r+0x658>)
   24102:	9311      	str	r3, [sp, #68]	; 0x44
   24104:	2100      	movs	r1, #0
   24106:	2302      	movs	r3, #2
   24108:	900b      	str	r0, [sp, #44]	; 0x2c
   2410a:	2000      	movs	r0, #0
   2410c:	9c03      	ldr	r4, [sp, #12]
   2410e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   24112:	1c60      	adds	r0, r4, #1
   24114:	f000 80ad 	beq.w	24272 <_svfprintf_r+0x6b2>
   24118:	9802      	ldr	r0, [sp, #8]
   2411a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   2411e:	ea52 0001 	orrs.w	r0, r2, r1
   24122:	f040 80a4 	bne.w	2426e <_svfprintf_r+0x6ae>
   24126:	2c00      	cmp	r4, #0
   24128:	f040 86ae 	bne.w	24e88 <_svfprintf_r+0x12c8>
   2412c:	2b00      	cmp	r3, #0
   2412e:	d1ac      	bne.n	2408a <_svfprintf_r+0x4ca>
   24130:	9b02      	ldr	r3, [sp, #8]
   24132:	f013 0301 	ands.w	r3, r3, #1
   24136:	9305      	str	r3, [sp, #20]
   24138:	f000 83d1 	beq.w	248de <_svfprintf_r+0xd1e>
   2413c:	2330      	movs	r3, #48	; 0x30
   2413e:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   24142:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   24146:	e0ac      	b.n	242a2 <_svfprintf_r+0x6e2>
   24148:	f018 0f20 	tst.w	r8, #32
   2414c:	f040 83d4 	bne.w	248f8 <_svfprintf_r+0xd38>
   24150:	f018 0f10 	tst.w	r8, #16
   24154:	f040 869f 	bne.w	24e96 <_svfprintf_r+0x12d6>
   24158:	f018 0f40 	tst.w	r8, #64	; 0x40
   2415c:	f040 8797 	bne.w	2508e <_svfprintf_r+0x14ce>
   24160:	f418 7f00 	tst.w	r8, #512	; 0x200
   24164:	f000 8697 	beq.w	24e96 <_svfprintf_r+0x12d6>
   24168:	9b08      	ldr	r3, [sp, #32]
   2416a:	9904      	ldr	r1, [sp, #16]
   2416c:	f853 2b04 	ldr.w	r2, [r3], #4
   24170:	9308      	str	r3, [sp, #32]
   24172:	7011      	strb	r1, [r2, #0]
   24174:	464c      	mov	r4, r9
   24176:	e555      	b.n	23c24 <_svfprintf_r+0x64>
   24178:	f899 3000 	ldrb.w	r3, [r9]
   2417c:	2b68      	cmp	r3, #104	; 0x68
   2417e:	bf03      	ittte	eq
   24180:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   24184:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   24188:	f109 0901 	addeq.w	r9, r9, #1
   2418c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   24190:	e572      	b.n	23c78 <_svfprintf_r+0xb8>
   24192:	f899 3000 	ldrb.w	r3, [r9]
   24196:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   2419a:	e56d      	b.n	23c78 <_svfprintf_r+0xb8>
   2419c:	f899 3000 	ldrb.w	r3, [r9]
   241a0:	2b6c      	cmp	r3, #108	; 0x6c
   241a2:	bf03      	ittte	eq
   241a4:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   241a8:	f048 0820 	orreq.w	r8, r8, #32
   241ac:	f109 0901 	addeq.w	r9, r9, #1
   241b0:	f048 0810 	orrne.w	r8, r8, #16
   241b4:	e560      	b.n	23c78 <_svfprintf_r+0xb8>
   241b6:	930b      	str	r3, [sp, #44]	; 0x2c
   241b8:	f048 0810 	orr.w	r8, r8, #16
   241bc:	f018 0120 	ands.w	r1, r8, #32
   241c0:	f000 8351 	beq.w	24866 <_svfprintf_r+0xca6>
   241c4:	9b08      	ldr	r3, [sp, #32]
   241c6:	3307      	adds	r3, #7
   241c8:	f023 0307 	bic.w	r3, r3, #7
   241cc:	6859      	ldr	r1, [r3, #4]
   241ce:	f853 2b08 	ldr.w	r2, [r3], #8
   241d2:	9308      	str	r3, [sp, #32]
   241d4:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   241d8:	9302      	str	r3, [sp, #8]
   241da:	2300      	movs	r3, #0
   241dc:	e795      	b.n	2410a <_svfprintf_r+0x54a>
   241de:	930b      	str	r3, [sp, #44]	; 0x2c
   241e0:	f048 0310 	orr.w	r3, r8, #16
   241e4:	9302      	str	r3, [sp, #8]
   241e6:	9b02      	ldr	r3, [sp, #8]
   241e8:	f013 0120 	ands.w	r1, r3, #32
   241ec:	f000 8329 	beq.w	24842 <_svfprintf_r+0xc82>
   241f0:	9b08      	ldr	r3, [sp, #32]
   241f2:	3307      	adds	r3, #7
   241f4:	f023 0307 	bic.w	r3, r3, #7
   241f8:	6859      	ldr	r1, [r3, #4]
   241fa:	f853 2b08 	ldr.w	r2, [r3], #8
   241fe:	9308      	str	r3, [sp, #32]
   24200:	2301      	movs	r3, #1
   24202:	e782      	b.n	2410a <_svfprintf_r+0x54a>
   24204:	f899 3000 	ldrb.w	r3, [r9]
   24208:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   2420c:	e534      	b.n	23c78 <_svfprintf_r+0xb8>
   2420e:	bf00      	nop
   24210:	20002c30 	.word	0x20002c30
   24214:	20002220 	.word	0x20002220
   24218:	20002c38 	.word	0x20002c38
   2421c:	4649      	mov	r1, r9
   2421e:	f811 3b01 	ldrb.w	r3, [r1], #1
   24222:	2b2a      	cmp	r3, #42	; 0x2a
   24224:	f001 8249 	beq.w	256ba <_svfprintf_r+0x1afa>
   24228:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   2422c:	2a09      	cmp	r2, #9
   2422e:	4689      	mov	r9, r1
   24230:	bf98      	it	ls
   24232:	2100      	movls	r1, #0
   24234:	f201 8144 	bhi.w	254c0 <_svfprintf_r+0x1900>
   24238:	f819 3b01 	ldrb.w	r3, [r9], #1
   2423c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   24240:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   24244:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   24248:	2a09      	cmp	r2, #9
   2424a:	d9f5      	bls.n	24238 <_svfprintf_r+0x678>
   2424c:	9103      	str	r1, [sp, #12]
   2424e:	e515      	b.n	23c7c <_svfprintf_r+0xbc>
   24250:	f899 3000 	ldrb.w	r3, [r9]
   24254:	f048 0801 	orr.w	r8, r8, #1
   24258:	e50e      	b.n	23c78 <_svfprintf_r+0xb8>
   2425a:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   2425e:	2b00      	cmp	r3, #0
   24260:	f47f ad8f 	bne.w	23d82 <_svfprintf_r+0x1c2>
   24264:	f899 3000 	ldrb.w	r3, [r9]
   24268:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   2426c:	e504      	b.n	23c78 <_svfprintf_r+0xb8>
   2426e:	f8cd 8008 	str.w	r8, [sp, #8]
   24272:	2b01      	cmp	r3, #1
   24274:	f000 819d 	beq.w	245b2 <_svfprintf_r+0x9f2>
   24278:	2b02      	cmp	r3, #2
   2427a:	ac50      	add	r4, sp, #320	; 0x140
   2427c:	d120      	bne.n	242c0 <_svfprintf_r+0x700>
   2427e:	9811      	ldr	r0, [sp, #68]	; 0x44
   24280:	f002 030f 	and.w	r3, r2, #15
   24284:	0912      	lsrs	r2, r2, #4
   24286:	5cc3      	ldrb	r3, [r0, r3]
   24288:	f804 3d01 	strb.w	r3, [r4, #-1]!
   2428c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   24290:	0909      	lsrs	r1, r1, #4
   24292:	ea52 0301 	orrs.w	r3, r2, r1
   24296:	d1f3      	bne.n	24280 <_svfprintf_r+0x6c0>
   24298:	ab50      	add	r3, sp, #320	; 0x140
   2429a:	1b1b      	subs	r3, r3, r4
   2429c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   242a0:	9305      	str	r3, [sp, #20]
   242a2:	9a05      	ldr	r2, [sp, #20]
   242a4:	9803      	ldr	r0, [sp, #12]
   242a6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   242aa:	4282      	cmp	r2, r0
   242ac:	f04f 0300 	mov.w	r3, #0
   242b0:	bfb8      	it	lt
   242b2:	4602      	movlt	r2, r0
   242b4:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   242b8:	9307      	str	r3, [sp, #28]
   242ba:	9202      	str	r2, [sp, #8]
   242bc:	930f      	str	r3, [sp, #60]	; 0x3c
   242be:	e660      	b.n	23f82 <_svfprintf_r+0x3c2>
   242c0:	f002 0307 	and.w	r3, r2, #7
   242c4:	08d2      	lsrs	r2, r2, #3
   242c6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   242ca:	08c9      	lsrs	r1, r1, #3
   242cc:	3330      	adds	r3, #48	; 0x30
   242ce:	ea52 0501 	orrs.w	r5, r2, r1
   242d2:	4620      	mov	r0, r4
   242d4:	f804 3d01 	strb.w	r3, [r4, #-1]!
   242d8:	d1f2      	bne.n	242c0 <_svfprintf_r+0x700>
   242da:	9a02      	ldr	r2, [sp, #8]
   242dc:	07d1      	lsls	r1, r2, #31
   242de:	f100 824d 	bmi.w	2477c <_svfprintf_r+0xbbc>
   242e2:	ab50      	add	r3, sp, #320	; 0x140
   242e4:	1b1b      	subs	r3, r3, r4
   242e6:	4690      	mov	r8, r2
   242e8:	9305      	str	r3, [sp, #20]
   242ea:	e7da      	b.n	242a2 <_svfprintf_r+0x6e2>
   242ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   242ee:	2b65      	cmp	r3, #101	; 0x65
   242f0:	f340 80d4 	ble.w	2449c <_svfprintf_r+0x8dc>
   242f4:	eeb5 8b40 	vcmp.f64	d8, #0.0
   242f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   242fc:	f040 81c1 	bne.w	24682 <_svfprintf_r+0xac2>
   24300:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24302:	49ba      	ldr	r1, [pc, #744]	; (245ec <_svfprintf_r+0xa2c>)
   24304:	f8ca 1000 	str.w	r1, [sl]
   24308:	3301      	adds	r3, #1
   2430a:	3201      	adds	r2, #1
   2430c:	2101      	movs	r1, #1
   2430e:	2b07      	cmp	r3, #7
   24310:	9226      	str	r2, [sp, #152]	; 0x98
   24312:	9325      	str	r3, [sp, #148]	; 0x94
   24314:	f8ca 1004 	str.w	r1, [sl, #4]
   24318:	f300 8551 	bgt.w	24dbe <_svfprintf_r+0x11fe>
   2431c:	f10a 0a08 	add.w	sl, sl, #8
   24320:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   24322:	990e      	ldr	r1, [sp, #56]	; 0x38
   24324:	428b      	cmp	r3, r1
   24326:	f280 82d0 	bge.w	248ca <_svfprintf_r+0xd0a>
   2432a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2432c:	9912      	ldr	r1, [sp, #72]	; 0x48
   2432e:	441a      	add	r2, r3
   24330:	e9ca 1300 	strd	r1, r3, [sl]
   24334:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24336:	9226      	str	r2, [sp, #152]	; 0x98
   24338:	3301      	adds	r3, #1
   2433a:	2b07      	cmp	r3, #7
   2433c:	9325      	str	r3, [sp, #148]	; 0x94
   2433e:	f300 8397 	bgt.w	24a70 <_svfprintf_r+0xeb0>
   24342:	f10a 0a08 	add.w	sl, sl, #8
   24346:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24348:	1e5c      	subs	r4, r3, #1
   2434a:	2c00      	cmp	r4, #0
   2434c:	f77f add0 	ble.w	23ef0 <_svfprintf_r+0x330>
   24350:	2c10      	cmp	r4, #16
   24352:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24354:	f340 856e 	ble.w	24e34 <_svfprintf_r+0x1274>
   24358:	ee1b 6a10 	vmov	r6, s22
   2435c:	2510      	movs	r5, #16
   2435e:	e005      	b.n	2436c <_svfprintf_r+0x7ac>
   24360:	f10a 0a08 	add.w	sl, sl, #8
   24364:	3c10      	subs	r4, #16
   24366:	2c10      	cmp	r4, #16
   24368:	f340 8564 	ble.w	24e34 <_svfprintf_r+0x1274>
   2436c:	3301      	adds	r3, #1
   2436e:	49a0      	ldr	r1, [pc, #640]	; (245f0 <_svfprintf_r+0xa30>)
   24370:	3210      	adds	r2, #16
   24372:	2b07      	cmp	r3, #7
   24374:	e9ca 1500 	strd	r1, r5, [sl]
   24378:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2437c:	ddf0      	ble.n	24360 <_svfprintf_r+0x7a0>
   2437e:	aa24      	add	r2, sp, #144	; 0x90
   24380:	4631      	mov	r1, r6
   24382:	4658      	mov	r0, fp
   24384:	f003 f89a 	bl	274bc <__ssprint_r>
   24388:	2800      	cmp	r0, #0
   2438a:	d17e      	bne.n	2448a <_svfprintf_r+0x8ca>
   2438c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24390:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24394:	e7e6      	b.n	24364 <_svfprintf_r+0x7a4>
   24396:	9b06      	ldr	r3, [sp, #24]
   24398:	9902      	ldr	r1, [sp, #8]
   2439a:	1a5d      	subs	r5, r3, r1
   2439c:	2d00      	cmp	r5, #0
   2439e:	f77f ad8e 	ble.w	23ebe <_svfprintf_r+0x2fe>
   243a2:	2d10      	cmp	r5, #16
   243a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   243a6:	dd21      	ble.n	243ec <_svfprintf_r+0x82c>
   243a8:	9409      	str	r4, [sp, #36]	; 0x24
   243aa:	2610      	movs	r6, #16
   243ac:	ee1b 4a10 	vmov	r4, s22
   243b0:	e004      	b.n	243bc <_svfprintf_r+0x7fc>
   243b2:	3d10      	subs	r5, #16
   243b4:	2d10      	cmp	r5, #16
   243b6:	f10a 0a08 	add.w	sl, sl, #8
   243ba:	dd16      	ble.n	243ea <_svfprintf_r+0x82a>
   243bc:	3301      	adds	r3, #1
   243be:	498c      	ldr	r1, [pc, #560]	; (245f0 <_svfprintf_r+0xa30>)
   243c0:	3210      	adds	r2, #16
   243c2:	2b07      	cmp	r3, #7
   243c4:	e9ca 1600 	strd	r1, r6, [sl]
   243c8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   243cc:	ddf1      	ble.n	243b2 <_svfprintf_r+0x7f2>
   243ce:	aa24      	add	r2, sp, #144	; 0x90
   243d0:	4621      	mov	r1, r4
   243d2:	4658      	mov	r0, fp
   243d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   243d8:	f003 f870 	bl	274bc <__ssprint_r>
   243dc:	2800      	cmp	r0, #0
   243de:	d154      	bne.n	2448a <_svfprintf_r+0x8ca>
   243e0:	3d10      	subs	r5, #16
   243e2:	2d10      	cmp	r5, #16
   243e4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   243e8:	dce8      	bgt.n	243bc <_svfprintf_r+0x7fc>
   243ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
   243ec:	4980      	ldr	r1, [pc, #512]	; (245f0 <_svfprintf_r+0xa30>)
   243ee:	f8ca 5004 	str.w	r5, [sl, #4]
   243f2:	3301      	adds	r3, #1
   243f4:	442a      	add	r2, r5
   243f6:	2b07      	cmp	r3, #7
   243f8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   243fc:	f8ca 1000 	str.w	r1, [sl]
   24400:	f300 8526 	bgt.w	24e50 <_svfprintf_r+0x1290>
   24404:	9b03      	ldr	r3, [sp, #12]
   24406:	9905      	ldr	r1, [sp, #20]
   24408:	1a5d      	subs	r5, r3, r1
   2440a:	2d00      	cmp	r5, #0
   2440c:	f10a 0a08 	add.w	sl, sl, #8
   24410:	f77f ad5b 	ble.w	23eca <_svfprintf_r+0x30a>
   24414:	2d10      	cmp	r5, #16
   24416:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24418:	dd1f      	ble.n	2445a <_svfprintf_r+0x89a>
   2441a:	4651      	mov	r1, sl
   2441c:	2610      	movs	r6, #16
   2441e:	ee1b aa10 	vmov	sl, s22
   24422:	e004      	b.n	2442e <_svfprintf_r+0x86e>
   24424:	3d10      	subs	r5, #16
   24426:	2d10      	cmp	r5, #16
   24428:	f101 0108 	add.w	r1, r1, #8
   2442c:	dd14      	ble.n	24458 <_svfprintf_r+0x898>
   2442e:	3301      	adds	r3, #1
   24430:	486f      	ldr	r0, [pc, #444]	; (245f0 <_svfprintf_r+0xa30>)
   24432:	3210      	adds	r2, #16
   24434:	2b07      	cmp	r3, #7
   24436:	e9c1 0600 	strd	r0, r6, [r1]
   2443a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2443e:	ddf1      	ble.n	24424 <_svfprintf_r+0x864>
   24440:	aa24      	add	r2, sp, #144	; 0x90
   24442:	4651      	mov	r1, sl
   24444:	4658      	mov	r0, fp
   24446:	f003 f839 	bl	274bc <__ssprint_r>
   2444a:	b9f0      	cbnz	r0, 2448a <_svfprintf_r+0x8ca>
   2444c:	3d10      	subs	r5, #16
   2444e:	2d10      	cmp	r5, #16
   24450:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24454:	a927      	add	r1, sp, #156	; 0x9c
   24456:	dcea      	bgt.n	2442e <_svfprintf_r+0x86e>
   24458:	468a      	mov	sl, r1
   2445a:	3301      	adds	r3, #1
   2445c:	4964      	ldr	r1, [pc, #400]	; (245f0 <_svfprintf_r+0xa30>)
   2445e:	f8ca 5004 	str.w	r5, [sl, #4]
   24462:	442a      	add	r2, r5
   24464:	2b07      	cmp	r3, #7
   24466:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2446a:	f8ca 1000 	str.w	r1, [sl]
   2446e:	f300 81da 	bgt.w	24826 <_svfprintf_r+0xc66>
   24472:	f10a 0a08 	add.w	sl, sl, #8
   24476:	e528      	b.n	23eca <_svfprintf_r+0x30a>
   24478:	ee1b 1a10 	vmov	r1, s22
   2447c:	aa24      	add	r2, sp, #144	; 0x90
   2447e:	4658      	mov	r0, fp
   24480:	f003 f81c 	bl	274bc <__ssprint_r>
   24484:	2800      	cmp	r0, #0
   24486:	f43f ad47 	beq.w	23f18 <_svfprintf_r+0x358>
   2448a:	9b07      	ldr	r3, [sp, #28]
   2448c:	2b00      	cmp	r3, #0
   2448e:	f43f aca2 	beq.w	23dd6 <_svfprintf_r+0x216>
   24492:	9907      	ldr	r1, [sp, #28]
   24494:	4658      	mov	r0, fp
   24496:	f7ff fa75 	bl	23984 <_free_r>
   2449a:	e49c      	b.n	23dd6 <_svfprintf_r+0x216>
   2449c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2449e:	2b01      	cmp	r3, #1
   244a0:	f340 817a 	ble.w	24798 <_svfprintf_r+0xbd8>
   244a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   244a6:	f8ca 4000 	str.w	r4, [sl]
   244aa:	3301      	adds	r3, #1
   244ac:	3201      	adds	r2, #1
   244ae:	2101      	movs	r1, #1
   244b0:	2b07      	cmp	r3, #7
   244b2:	9226      	str	r2, [sp, #152]	; 0x98
   244b4:	9325      	str	r3, [sp, #148]	; 0x94
   244b6:	f8ca 1004 	str.w	r1, [sl, #4]
   244ba:	f300 81f8 	bgt.w	248ae <_svfprintf_r+0xcee>
   244be:	f10a 0a08 	add.w	sl, sl, #8
   244c2:	9910      	ldr	r1, [sp, #64]	; 0x40
   244c4:	9812      	ldr	r0, [sp, #72]	; 0x48
   244c6:	3301      	adds	r3, #1
   244c8:	440a      	add	r2, r1
   244ca:	2b07      	cmp	r3, #7
   244cc:	e9ca 0100 	strd	r0, r1, [sl]
   244d0:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   244d4:	f300 81dd 	bgt.w	24892 <_svfprintf_r+0xcd2>
   244d8:	f10a 0a08 	add.w	sl, sl, #8
   244dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
   244e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   244e4:	f000 8177 	beq.w	247d6 <_svfprintf_r+0xc16>
   244e8:	990e      	ldr	r1, [sp, #56]	; 0x38
   244ea:	3301      	adds	r3, #1
   244ec:	3901      	subs	r1, #1
   244ee:	3401      	adds	r4, #1
   244f0:	440a      	add	r2, r1
   244f2:	2b07      	cmp	r3, #7
   244f4:	f8ca 4000 	str.w	r4, [sl]
   244f8:	9325      	str	r3, [sp, #148]	; 0x94
   244fa:	f8ca 1004 	str.w	r1, [sl, #4]
   244fe:	9226      	str	r2, [sp, #152]	; 0x98
   24500:	f300 815b 	bgt.w	247ba <_svfprintf_r+0xbfa>
   24504:	f10a 0a08 	add.w	sl, sl, #8
   24508:	9914      	ldr	r1, [sp, #80]	; 0x50
   2450a:	f8ca 1004 	str.w	r1, [sl, #4]
   2450e:	3301      	adds	r3, #1
   24510:	440a      	add	r2, r1
   24512:	2b07      	cmp	r3, #7
   24514:	a91e      	add	r1, sp, #120	; 0x78
   24516:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2451a:	f8ca 1000 	str.w	r1, [sl]
   2451e:	f77f ace5 	ble.w	23eec <_svfprintf_r+0x32c>
   24522:	ee1b 1a10 	vmov	r1, s22
   24526:	aa24      	add	r2, sp, #144	; 0x90
   24528:	4658      	mov	r0, fp
   2452a:	f002 ffc7 	bl	274bc <__ssprint_r>
   2452e:	2800      	cmp	r0, #0
   24530:	d1ab      	bne.n	2448a <_svfprintf_r+0x8ca>
   24532:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24534:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24538:	e4da      	b.n	23ef0 <_svfprintf_r+0x330>
   2453a:	2d10      	cmp	r5, #16
   2453c:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   24540:	4e2c      	ldr	r6, [pc, #176]	; (245f4 <_svfprintf_r+0xa34>)
   24542:	dd24      	ble.n	2458e <_svfprintf_r+0x9ce>
   24544:	9417      	str	r4, [sp, #92]	; 0x5c
   24546:	2310      	movs	r3, #16
   24548:	ee1b 4a10 	vmov	r4, s22
   2454c:	4608      	mov	r0, r1
   2454e:	e004      	b.n	2455a <_svfprintf_r+0x99a>
   24550:	3d10      	subs	r5, #16
   24552:	2d10      	cmp	r5, #16
   24554:	f10a 0a08 	add.w	sl, sl, #8
   24558:	dd17      	ble.n	2458a <_svfprintf_r+0x9ca>
   2455a:	3001      	adds	r0, #1
   2455c:	3210      	adds	r2, #16
   2455e:	2807      	cmp	r0, #7
   24560:	e9ca 6300 	strd	r6, r3, [sl]
   24564:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   24568:	ddf2      	ble.n	24550 <_svfprintf_r+0x990>
   2456a:	aa24      	add	r2, sp, #144	; 0x90
   2456c:	4621      	mov	r1, r4
   2456e:	4658      	mov	r0, fp
   24570:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24574:	f002 ffa2 	bl	274bc <__ssprint_r>
   24578:	2800      	cmp	r0, #0
   2457a:	d186      	bne.n	2448a <_svfprintf_r+0x8ca>
   2457c:	3d10      	subs	r5, #16
   2457e:	2d10      	cmp	r5, #16
   24580:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   24584:	f04f 0310 	mov.w	r3, #16
   24588:	dce7      	bgt.n	2455a <_svfprintf_r+0x99a>
   2458a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   2458c:	4601      	mov	r1, r0
   2458e:	3101      	adds	r1, #1
   24590:	442a      	add	r2, r5
   24592:	2907      	cmp	r1, #7
   24594:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   24598:	f8ca 6000 	str.w	r6, [sl]
   2459c:	f8ca 5004 	str.w	r5, [sl, #4]
   245a0:	f300 83bd 	bgt.w	24d1e <_svfprintf_r+0x115e>
   245a4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   245a8:	f10a 0a08 	add.w	sl, sl, #8
   245ac:	e45d      	b.n	23e6a <_svfprintf_r+0x2aa>
   245ae:	f8cd 8008 	str.w	r8, [sp, #8]
   245b2:	2a0a      	cmp	r2, #10
   245b4:	f171 0300 	sbcs.w	r3, r1, #0
   245b8:	f080 8345 	bcs.w	24c46 <_svfprintf_r+0x1086>
   245bc:	3230      	adds	r2, #48	; 0x30
   245be:	2301      	movs	r3, #1
   245c0:	f8dd 8008 	ldr.w	r8, [sp, #8]
   245c4:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   245c8:	9305      	str	r3, [sp, #20]
   245ca:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   245ce:	e668      	b.n	242a2 <_svfprintf_r+0x6e2>
   245d0:	ee1b 1a10 	vmov	r1, s22
   245d4:	aa24      	add	r2, sp, #144	; 0x90
   245d6:	4658      	mov	r0, fp
   245d8:	f002 ff70 	bl	274bc <__ssprint_r>
   245dc:	2800      	cmp	r0, #0
   245de:	f47f af54 	bne.w	2448a <_svfprintf_r+0x8ca>
   245e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   245e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   245e8:	e452      	b.n	23e90 <_svfprintf_r+0x2d0>
   245ea:	bf00      	nop
   245ec:	20003aac 	.word	0x20003aac
   245f0:	20004cc8 	.word	0x20004cc8
   245f4:	20002c68 	.word	0x20002c68
   245f8:	ee1b 1a10 	vmov	r1, s22
   245fc:	aa24      	add	r2, sp, #144	; 0x90
   245fe:	4658      	mov	r0, fp
   24600:	f002 ff5c 	bl	274bc <__ssprint_r>
   24604:	2800      	cmp	r0, #0
   24606:	f47f af40 	bne.w	2448a <_svfprintf_r+0x8ca>
   2460a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2460c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24610:	e451      	b.n	23eb6 <_svfprintf_r+0x2f6>
   24612:	2c10      	cmp	r4, #16
   24614:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24616:	4ebe      	ldr	r6, [pc, #760]	; (24910 <_svfprintf_r+0xd50>)
   24618:	dd1f      	ble.n	2465a <_svfprintf_r+0xa9a>
   2461a:	ee1b 8a10 	vmov	r8, s22
   2461e:	2510      	movs	r5, #16
   24620:	e004      	b.n	2462c <_svfprintf_r+0xa6c>
   24622:	3c10      	subs	r4, #16
   24624:	2c10      	cmp	r4, #16
   24626:	f10a 0a08 	add.w	sl, sl, #8
   2462a:	dd16      	ble.n	2465a <_svfprintf_r+0xa9a>
   2462c:	3301      	adds	r3, #1
   2462e:	3210      	adds	r2, #16
   24630:	2b07      	cmp	r3, #7
   24632:	e9ca 6500 	strd	r6, r5, [sl]
   24636:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2463a:	ddf2      	ble.n	24622 <_svfprintf_r+0xa62>
   2463c:	aa24      	add	r2, sp, #144	; 0x90
   2463e:	4641      	mov	r1, r8
   24640:	4658      	mov	r0, fp
   24642:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24646:	f002 ff39 	bl	274bc <__ssprint_r>
   2464a:	2800      	cmp	r0, #0
   2464c:	f47f af1d 	bne.w	2448a <_svfprintf_r+0x8ca>
   24650:	3c10      	subs	r4, #16
   24652:	2c10      	cmp	r4, #16
   24654:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24658:	dce8      	bgt.n	2462c <_svfprintf_r+0xa6c>
   2465a:	3301      	adds	r3, #1
   2465c:	4422      	add	r2, r4
   2465e:	2b07      	cmp	r3, #7
   24660:	e9ca 6400 	strd	r6, r4, [sl]
   24664:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24668:	f77f ac4b 	ble.w	23f02 <_svfprintf_r+0x342>
   2466c:	ee1b 1a10 	vmov	r1, s22
   24670:	aa24      	add	r2, sp, #144	; 0x90
   24672:	4658      	mov	r0, fp
   24674:	f002 ff22 	bl	274bc <__ssprint_r>
   24678:	2800      	cmp	r0, #0
   2467a:	f47f af06 	bne.w	2448a <_svfprintf_r+0x8ca>
   2467e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24680:	e43f      	b.n	23f02 <_svfprintf_r+0x342>
   24682:	991b      	ldr	r1, [sp, #108]	; 0x6c
   24684:	2900      	cmp	r1, #0
   24686:	f340 835a 	ble.w	24d3e <_svfprintf_r+0x117e>
   2468a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2468c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2468e:	429e      	cmp	r6, r3
   24690:	bfa8      	it	ge
   24692:	461e      	movge	r6, r3
   24694:	2e00      	cmp	r6, #0
   24696:	dd0b      	ble.n	246b0 <_svfprintf_r+0xaf0>
   24698:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2469a:	3301      	adds	r3, #1
   2469c:	4432      	add	r2, r6
   2469e:	2b07      	cmp	r3, #7
   246a0:	e9ca 4600 	strd	r4, r6, [sl]
   246a4:	9226      	str	r2, [sp, #152]	; 0x98
   246a6:	9325      	str	r3, [sp, #148]	; 0x94
   246a8:	f300 8689 	bgt.w	253be <_svfprintf_r+0x17fe>
   246ac:	f10a 0a08 	add.w	sl, sl, #8
   246b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   246b2:	2e00      	cmp	r6, #0
   246b4:	bfa8      	it	ge
   246b6:	1bad      	subge	r5, r5, r6
   246b8:	2d00      	cmp	r5, #0
   246ba:	f300 8203 	bgt.w	24ac4 <_svfprintf_r+0xf04>
   246be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   246c0:	f418 6f80 	tst.w	r8, #1024	; 0x400
   246c4:	4423      	add	r3, r4
   246c6:	9305      	str	r3, [sp, #20]
   246c8:	f040 821f 	bne.w	24b0a <_svfprintf_r+0xf4a>
   246cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   246ce:	990e      	ldr	r1, [sp, #56]	; 0x38
   246d0:	428b      	cmp	r3, r1
   246d2:	db03      	blt.n	246dc <_svfprintf_r+0xb1c>
   246d4:	f018 0f01 	tst.w	r8, #1
   246d8:	f000 84cf 	beq.w	2507a <_svfprintf_r+0x14ba>
   246dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   246de:	9812      	ldr	r0, [sp, #72]	; 0x48
   246e0:	440a      	add	r2, r1
   246e2:	e9ca 0100 	strd	r0, r1, [sl]
   246e6:	9925      	ldr	r1, [sp, #148]	; 0x94
   246e8:	9226      	str	r2, [sp, #152]	; 0x98
   246ea:	3101      	adds	r1, #1
   246ec:	2907      	cmp	r1, #7
   246ee:	9125      	str	r1, [sp, #148]	; 0x94
   246f0:	f300 86a5 	bgt.w	2543e <_svfprintf_r+0x187e>
   246f4:	f10a 0a08 	add.w	sl, sl, #8
   246f8:	990e      	ldr	r1, [sp, #56]	; 0x38
   246fa:	1865      	adds	r5, r4, r1
   246fc:	1acc      	subs	r4, r1, r3
   246fe:	9b05      	ldr	r3, [sp, #20]
   24700:	1aed      	subs	r5, r5, r3
   24702:	42a5      	cmp	r5, r4
   24704:	bfa8      	it	ge
   24706:	4625      	movge	r5, r4
   24708:	2d00      	cmp	r5, #0
   2470a:	dd0d      	ble.n	24728 <_svfprintf_r+0xb68>
   2470c:	f8ca 3000 	str.w	r3, [sl]
   24710:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24712:	f8ca 5004 	str.w	r5, [sl, #4]
   24716:	3301      	adds	r3, #1
   24718:	442a      	add	r2, r5
   2471a:	2b07      	cmp	r3, #7
   2471c:	9226      	str	r2, [sp, #152]	; 0x98
   2471e:	9325      	str	r3, [sp, #148]	; 0x94
   24720:	f300 86bb 	bgt.w	2549a <_svfprintf_r+0x18da>
   24724:	f10a 0a08 	add.w	sl, sl, #8
   24728:	2d00      	cmp	r5, #0
   2472a:	bfa8      	it	ge
   2472c:	1b64      	subge	r4, r4, r5
   2472e:	2c00      	cmp	r4, #0
   24730:	f77f abde 	ble.w	23ef0 <_svfprintf_r+0x330>
   24734:	2c10      	cmp	r4, #16
   24736:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24738:	f340 837c 	ble.w	24e34 <_svfprintf_r+0x1274>
   2473c:	ee1b 6a10 	vmov	r6, s22
   24740:	2510      	movs	r5, #16
   24742:	e005      	b.n	24750 <_svfprintf_r+0xb90>
   24744:	f10a 0a08 	add.w	sl, sl, #8
   24748:	3c10      	subs	r4, #16
   2474a:	2c10      	cmp	r4, #16
   2474c:	f340 8372 	ble.w	24e34 <_svfprintf_r+0x1274>
   24750:	3301      	adds	r3, #1
   24752:	4970      	ldr	r1, [pc, #448]	; (24914 <_svfprintf_r+0xd54>)
   24754:	3210      	adds	r2, #16
   24756:	2b07      	cmp	r3, #7
   24758:	e9ca 1500 	strd	r1, r5, [sl]
   2475c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24760:	ddf0      	ble.n	24744 <_svfprintf_r+0xb84>
   24762:	aa24      	add	r2, sp, #144	; 0x90
   24764:	4631      	mov	r1, r6
   24766:	4658      	mov	r0, fp
   24768:	f002 fea8 	bl	274bc <__ssprint_r>
   2476c:	2800      	cmp	r0, #0
   2476e:	f47f ae8c 	bne.w	2448a <_svfprintf_r+0x8ca>
   24772:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24776:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2477a:	e7e5      	b.n	24748 <_svfprintf_r+0xb88>
   2477c:	2b30      	cmp	r3, #48	; 0x30
   2477e:	f43f ad8b 	beq.w	24298 <_svfprintf_r+0x6d8>
   24782:	2330      	movs	r3, #48	; 0x30
   24784:	3802      	subs	r0, #2
   24786:	f804 3c01 	strb.w	r3, [r4, #-1]
   2478a:	ab50      	add	r3, sp, #320	; 0x140
   2478c:	1a1b      	subs	r3, r3, r0
   2478e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24792:	9305      	str	r3, [sp, #20]
   24794:	4604      	mov	r4, r0
   24796:	e584      	b.n	242a2 <_svfprintf_r+0x6e2>
   24798:	f018 0f01 	tst.w	r8, #1
   2479c:	f47f ae82 	bne.w	244a4 <_svfprintf_r+0x8e4>
   247a0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   247a2:	f8ca 4000 	str.w	r4, [sl]
   247a6:	3301      	adds	r3, #1
   247a8:	3201      	adds	r2, #1
   247aa:	2101      	movs	r1, #1
   247ac:	2b07      	cmp	r3, #7
   247ae:	9226      	str	r2, [sp, #152]	; 0x98
   247b0:	9325      	str	r3, [sp, #148]	; 0x94
   247b2:	f8ca 1004 	str.w	r1, [sl, #4]
   247b6:	f77f aea5 	ble.w	24504 <_svfprintf_r+0x944>
   247ba:	ee1b 1a10 	vmov	r1, s22
   247be:	aa24      	add	r2, sp, #144	; 0x90
   247c0:	4658      	mov	r0, fp
   247c2:	f002 fe7b 	bl	274bc <__ssprint_r>
   247c6:	2800      	cmp	r0, #0
   247c8:	f47f ae5f 	bne.w	2448a <_svfprintf_r+0x8ca>
   247cc:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   247d0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   247d4:	e698      	b.n	24508 <_svfprintf_r+0x948>
   247d6:	990e      	ldr	r1, [sp, #56]	; 0x38
   247d8:	1e4c      	subs	r4, r1, #1
   247da:	2c00      	cmp	r4, #0
   247dc:	f77f ae94 	ble.w	24508 <_svfprintf_r+0x948>
   247e0:	2c10      	cmp	r4, #16
   247e2:	f340 8361 	ble.w	24ea8 <_svfprintf_r+0x12e8>
   247e6:	ee1b 6a10 	vmov	r6, s22
   247ea:	2510      	movs	r5, #16
   247ec:	e005      	b.n	247fa <_svfprintf_r+0xc3a>
   247ee:	f10a 0a08 	add.w	sl, sl, #8
   247f2:	3c10      	subs	r4, #16
   247f4:	2c10      	cmp	r4, #16
   247f6:	f340 8357 	ble.w	24ea8 <_svfprintf_r+0x12e8>
   247fa:	3301      	adds	r3, #1
   247fc:	4945      	ldr	r1, [pc, #276]	; (24914 <_svfprintf_r+0xd54>)
   247fe:	3210      	adds	r2, #16
   24800:	2b07      	cmp	r3, #7
   24802:	e9ca 1500 	strd	r1, r5, [sl]
   24806:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2480a:	ddf0      	ble.n	247ee <_svfprintf_r+0xc2e>
   2480c:	aa24      	add	r2, sp, #144	; 0x90
   2480e:	4631      	mov	r1, r6
   24810:	4658      	mov	r0, fp
   24812:	f002 fe53 	bl	274bc <__ssprint_r>
   24816:	2800      	cmp	r0, #0
   24818:	f47f ae37 	bne.w	2448a <_svfprintf_r+0x8ca>
   2481c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24820:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24824:	e7e5      	b.n	247f2 <_svfprintf_r+0xc32>
   24826:	ee1b 1a10 	vmov	r1, s22
   2482a:	aa24      	add	r2, sp, #144	; 0x90
   2482c:	4658      	mov	r0, fp
   2482e:	f002 fe45 	bl	274bc <__ssprint_r>
   24832:	2800      	cmp	r0, #0
   24834:	f47f ae29 	bne.w	2448a <_svfprintf_r+0x8ca>
   24838:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2483a:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2483e:	f7ff bb44 	b.w	23eca <_svfprintf_r+0x30a>
   24842:	9b02      	ldr	r3, [sp, #8]
   24844:	f013 0310 	ands.w	r3, r3, #16
   24848:	f040 80c1 	bne.w	249ce <_svfprintf_r+0xe0e>
   2484c:	9a02      	ldr	r2, [sp, #8]
   2484e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   24852:	f000 837a 	beq.w	24f4a <_svfprintf_r+0x138a>
   24856:	9808      	ldr	r0, [sp, #32]
   24858:	f850 2b04 	ldr.w	r2, [r0], #4
   2485c:	9008      	str	r0, [sp, #32]
   2485e:	4619      	mov	r1, r3
   24860:	b292      	uxth	r2, r2
   24862:	2301      	movs	r3, #1
   24864:	e451      	b.n	2410a <_svfprintf_r+0x54a>
   24866:	f018 0310 	ands.w	r3, r8, #16
   2486a:	d155      	bne.n	24918 <_svfprintf_r+0xd58>
   2486c:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   24870:	f000 835d 	beq.w	24f2e <_svfprintf_r+0x136e>
   24874:	9808      	ldr	r0, [sp, #32]
   24876:	f850 2b04 	ldr.w	r2, [r0], #4
   2487a:	9008      	str	r0, [sp, #32]
   2487c:	4619      	mov	r1, r3
   2487e:	b292      	uxth	r2, r2
   24880:	e4a8      	b.n	241d4 <_svfprintf_r+0x614>
   24882:	4252      	negs	r2, r2
   24884:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   24888:	f8cd 8008 	str.w	r8, [sp, #8]
   2488c:	202d      	movs	r0, #45	; 0x2d
   2488e:	2301      	movs	r3, #1
   24890:	e43c      	b.n	2410c <_svfprintf_r+0x54c>
   24892:	ee1b 1a10 	vmov	r1, s22
   24896:	aa24      	add	r2, sp, #144	; 0x90
   24898:	4658      	mov	r0, fp
   2489a:	f002 fe0f 	bl	274bc <__ssprint_r>
   2489e:	2800      	cmp	r0, #0
   248a0:	f47f adf3 	bne.w	2448a <_svfprintf_r+0x8ca>
   248a4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   248a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   248ac:	e616      	b.n	244dc <_svfprintf_r+0x91c>
   248ae:	ee1b 1a10 	vmov	r1, s22
   248b2:	aa24      	add	r2, sp, #144	; 0x90
   248b4:	4658      	mov	r0, fp
   248b6:	f002 fe01 	bl	274bc <__ssprint_r>
   248ba:	2800      	cmp	r0, #0
   248bc:	f47f ade5 	bne.w	2448a <_svfprintf_r+0x8ca>
   248c0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   248c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   248c8:	e5fb      	b.n	244c2 <_svfprintf_r+0x902>
   248ca:	f018 0f01 	tst.w	r8, #1
   248ce:	f43f ab0f 	beq.w	23ef0 <_svfprintf_r+0x330>
   248d2:	e52a      	b.n	2432a <_svfprintf_r+0x76a>
   248d4:	9308      	str	r3, [sp, #32]
   248d6:	f899 3000 	ldrb.w	r3, [r9]
   248da:	f7ff b9cd 	b.w	23c78 <_svfprintf_r+0xb8>
   248de:	ac50      	add	r4, sp, #320	; 0x140
   248e0:	e4df      	b.n	242a2 <_svfprintf_r+0x6e2>
   248e2:	f418 7f00 	tst.w	r8, #512	; 0x200
   248e6:	f040 83db 	bne.w	250a0 <_svfprintf_r+0x14e0>
   248ea:	f853 2b04 	ldr.w	r2, [r3], #4
   248ee:	9308      	str	r3, [sp, #32]
   248f0:	17d1      	asrs	r1, r2, #31
   248f2:	460b      	mov	r3, r1
   248f4:	f7ff bbb6 	b.w	24064 <_svfprintf_r+0x4a4>
   248f8:	9b08      	ldr	r3, [sp, #32]
   248fa:	9804      	ldr	r0, [sp, #16]
   248fc:	f853 1b04 	ldr.w	r1, [r3], #4
   24900:	9308      	str	r3, [sp, #32]
   24902:	17c2      	asrs	r2, r0, #31
   24904:	e9c1 0200 	strd	r0, r2, [r1]
   24908:	464c      	mov	r4, r9
   2490a:	f7ff b98b 	b.w	23c24 <_svfprintf_r+0x64>
   2490e:	bf00      	nop
   24910:	20002c68 	.word	0x20002c68
   24914:	20004cc8 	.word	0x20004cc8
   24918:	9b08      	ldr	r3, [sp, #32]
   2491a:	f853 2b04 	ldr.w	r2, [r3], #4
   2491e:	9308      	str	r3, [sp, #32]
   24920:	e458      	b.n	241d4 <_svfprintf_r+0x614>
   24922:	eeb4 8b48 	vcmp.f64	d8, d8
   24926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2492a:	f180 8694 	bvs.w	25656 <_svfprintf_r+0x1a96>
   2492e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24930:	2b61      	cmp	r3, #97	; 0x61
   24932:	f000 8552 	beq.w	253da <_svfprintf_r+0x181a>
   24936:	2b41      	cmp	r3, #65	; 0x41
   24938:	f000 85c0 	beq.w	254bc <_svfprintf_r+0x18fc>
   2493c:	9b03      	ldr	r3, [sp, #12]
   2493e:	3301      	adds	r3, #1
   24940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24942:	f023 0520 	bic.w	r5, r3, #32
   24946:	f000 8480 	beq.w	2524a <_svfprintf_r+0x168a>
   2494a:	2d47      	cmp	r5, #71	; 0x47
   2494c:	d104      	bne.n	24958 <_svfprintf_r+0xd98>
   2494e:	9b03      	ldr	r3, [sp, #12]
   24950:	2b00      	cmp	r3, #0
   24952:	bf08      	it	eq
   24954:	2301      	moveq	r3, #1
   24956:	9303      	str	r3, [sp, #12]
   24958:	ee18 3a90 	vmov	r3, s17
   2495c:	2b00      	cmp	r3, #0
   2495e:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   24962:	4646      	mov	r6, r8
   24964:	f2c0 8618 	blt.w	25598 <_svfprintf_r+0x19d8>
   24968:	eeb0 ab48 	vmov.f64	d10, d8
   2496c:	2300      	movs	r3, #0
   2496e:	4690      	mov	r8, r2
   24970:	9309      	str	r3, [sp, #36]	; 0x24
   24972:	9307      	str	r3, [sp, #28]
   24974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24976:	3b41      	subs	r3, #65	; 0x41
   24978:	2b25      	cmp	r3, #37	; 0x25
   2497a:	f200 8398 	bhi.w	250ae <_svfprintf_r+0x14ee>
   2497e:	e8df f013 	tbh	[pc, r3, lsl #1]
   24982:	046f      	.short	0x046f
   24984:	03960396 	.word	0x03960396
   24988:	04680396 	.word	0x04680396
   2498c:	0396046c 	.word	0x0396046c
   24990:	03960396 	.word	0x03960396
   24994:	03960396 	.word	0x03960396
   24998:	03960396 	.word	0x03960396
   2499c:	03960396 	.word	0x03960396
   249a0:	03960396 	.word	0x03960396
   249a4:	03960396 	.word	0x03960396
   249a8:	03960396 	.word	0x03960396
   249ac:	03960396 	.word	0x03960396
   249b0:	03960396 	.word	0x03960396
   249b4:	03960396 	.word	0x03960396
   249b8:	03960396 	.word	0x03960396
   249bc:	03960396 	.word	0x03960396
   249c0:	03960396 	.word	0x03960396
   249c4:	03960396 	.word	0x03960396
   249c8:	04680396 	.word	0x04680396
   249cc:	046c      	.short	0x046c
   249ce:	9b08      	ldr	r3, [sp, #32]
   249d0:	f853 2b04 	ldr.w	r2, [r3], #4
   249d4:	9308      	str	r3, [sp, #32]
   249d6:	2301      	movs	r3, #1
   249d8:	f7ff bb97 	b.w	2410a <_svfprintf_r+0x54a>
   249dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   249de:	2b00      	cmp	r3, #0
   249e0:	f43f a9cf 	beq.w	23d82 <_svfprintf_r+0x1c2>
   249e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   249e6:	781b      	ldrb	r3, [r3, #0]
   249e8:	2b00      	cmp	r3, #0
   249ea:	f43f a9ca 	beq.w	23d82 <_svfprintf_r+0x1c2>
   249ee:	f899 3000 	ldrb.w	r3, [r9]
   249f2:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   249f6:	f7ff b93f 	b.w	23c78 <_svfprintf_r+0xb8>
   249fa:	930b      	str	r3, [sp, #44]	; 0x2c
   249fc:	f8cd 8008 	str.w	r8, [sp, #8]
   24a00:	f7ff bbf1 	b.w	241e6 <_svfprintf_r+0x626>
   24a04:	930b      	str	r3, [sp, #44]	; 0x2c
   24a06:	4b9a      	ldr	r3, [pc, #616]	; (24c70 <_svfprintf_r+0x10b0>)
   24a08:	9311      	str	r3, [sp, #68]	; 0x44
   24a0a:	f018 0120 	ands.w	r1, r8, #32
   24a0e:	f000 8105 	beq.w	24c1c <_svfprintf_r+0x105c>
   24a12:	9b08      	ldr	r3, [sp, #32]
   24a14:	3307      	adds	r3, #7
   24a16:	f023 0307 	bic.w	r3, r3, #7
   24a1a:	6859      	ldr	r1, [r3, #4]
   24a1c:	f853 2b08 	ldr.w	r2, [r3], #8
   24a20:	9308      	str	r3, [sp, #32]
   24a22:	f018 0f01 	tst.w	r8, #1
   24a26:	d00a      	beq.n	24a3e <_svfprintf_r+0xe7e>
   24a28:	ea52 0301 	orrs.w	r3, r2, r1
   24a2c:	d007      	beq.n	24a3e <_svfprintf_r+0xe7e>
   24a2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24a30:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   24a34:	2330      	movs	r3, #48	; 0x30
   24a36:	f048 0802 	orr.w	r8, r8, #2
   24a3a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   24a3e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   24a42:	9302      	str	r3, [sp, #8]
   24a44:	2302      	movs	r3, #2
   24a46:	f7ff bb60 	b.w	2410a <_svfprintf_r+0x54a>
   24a4a:	930b      	str	r3, [sp, #44]	; 0x2c
   24a4c:	f7ff bbb6 	b.w	241bc <_svfprintf_r+0x5fc>
   24a50:	930b      	str	r3, [sp, #44]	; 0x2c
   24a52:	4b88      	ldr	r3, [pc, #544]	; (24c74 <_svfprintf_r+0x10b4>)
   24a54:	9311      	str	r3, [sp, #68]	; 0x44
   24a56:	e7d8      	b.n	24a0a <_svfprintf_r+0xe4a>
   24a58:	9b08      	ldr	r3, [sp, #32]
   24a5a:	2101      	movs	r1, #1
   24a5c:	f853 2b04 	ldr.w	r2, [r3], #4
   24a60:	9102      	str	r1, [sp, #8]
   24a62:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   24a66:	9308      	str	r3, [sp, #32]
   24a68:	9105      	str	r1, [sp, #20]
   24a6a:	ac37      	add	r4, sp, #220	; 0xdc
   24a6c:	f7ff baaf 	b.w	23fce <_svfprintf_r+0x40e>
   24a70:	ee1b 1a10 	vmov	r1, s22
   24a74:	aa24      	add	r2, sp, #144	; 0x90
   24a76:	4658      	mov	r0, fp
   24a78:	f002 fd20 	bl	274bc <__ssprint_r>
   24a7c:	2800      	cmp	r0, #0
   24a7e:	f47f ad04 	bne.w	2448a <_svfprintf_r+0x8ca>
   24a82:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24a84:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24a88:	e45d      	b.n	24346 <_svfprintf_r+0x786>
   24a8a:	9b03      	ldr	r3, [sp, #12]
   24a8c:	9407      	str	r4, [sp, #28]
   24a8e:	2b06      	cmp	r3, #6
   24a90:	4622      	mov	r2, r4
   24a92:	bf28      	it	cs
   24a94:	2306      	movcs	r3, #6
   24a96:	9403      	str	r4, [sp, #12]
   24a98:	4621      	mov	r1, r4
   24a9a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   24a9e:	4c76      	ldr	r4, [pc, #472]	; (24c78 <_svfprintf_r+0x10b8>)
   24aa0:	9302      	str	r3, [sp, #8]
   24aa2:	9305      	str	r3, [sp, #20]
   24aa4:	920f      	str	r2, [sp, #60]	; 0x3c
   24aa6:	f7ff ba6c 	b.w	23f82 <_svfprintf_r+0x3c2>
   24aaa:	2140      	movs	r1, #64	; 0x40
   24aac:	4658      	mov	r0, fp
   24aae:	f7fd f923 	bl	21cf8 <_malloc_r>
   24ab2:	6020      	str	r0, [r4, #0]
   24ab4:	6120      	str	r0, [r4, #16]
   24ab6:	2800      	cmp	r0, #0
   24ab8:	f000 860f 	beq.w	256da <_svfprintf_r+0x1b1a>
   24abc:	2340      	movs	r3, #64	; 0x40
   24abe:	6163      	str	r3, [r4, #20]
   24ac0:	f7ff b89e 	b.w	23c00 <_svfprintf_r+0x40>
   24ac4:	2d10      	cmp	r5, #16
   24ac6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24ac8:	f340 825d 	ble.w	24f86 <_svfprintf_r+0x13c6>
   24acc:	4651      	mov	r1, sl
   24ace:	2610      	movs	r6, #16
   24ad0:	ee1b aa10 	vmov	sl, s22
   24ad4:	e004      	b.n	24ae0 <_svfprintf_r+0xf20>
   24ad6:	3108      	adds	r1, #8
   24ad8:	3d10      	subs	r5, #16
   24ada:	2d10      	cmp	r5, #16
   24adc:	f340 8252 	ble.w	24f84 <_svfprintf_r+0x13c4>
   24ae0:	3301      	adds	r3, #1
   24ae2:	4866      	ldr	r0, [pc, #408]	; (24c7c <_svfprintf_r+0x10bc>)
   24ae4:	3210      	adds	r2, #16
   24ae6:	2b07      	cmp	r3, #7
   24ae8:	e9c1 0600 	strd	r0, r6, [r1]
   24aec:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24af0:	ddf1      	ble.n	24ad6 <_svfprintf_r+0xf16>
   24af2:	aa24      	add	r2, sp, #144	; 0x90
   24af4:	4651      	mov	r1, sl
   24af6:	4658      	mov	r0, fp
   24af8:	f002 fce0 	bl	274bc <__ssprint_r>
   24afc:	2800      	cmp	r0, #0
   24afe:	f47f acc4 	bne.w	2448a <_svfprintf_r+0x8ca>
   24b02:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24b06:	a927      	add	r1, sp, #156	; 0x9c
   24b08:	e7e6      	b.n	24ad8 <_svfprintf_r+0xf18>
   24b0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24b0c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   24b10:	18e3      	adds	r3, r4, r3
   24b12:	9303      	str	r3, [sp, #12]
   24b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24b16:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   24b1a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   24b1c:	9d05      	ldr	r5, [sp, #20]
   24b1e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   24b22:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   24b26:	940b      	str	r4, [sp, #44]	; 0x2c
   24b28:	ee1b 1a10 	vmov	r1, s22
   24b2c:	4650      	mov	r0, sl
   24b2e:	2b00      	cmp	r3, #0
   24b30:	d034      	beq.n	24b9c <_svfprintf_r+0xfdc>
   24b32:	f1b8 0f00 	cmp.w	r8, #0
   24b36:	d135      	bne.n	24ba4 <_svfprintf_r+0xfe4>
   24b38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24b3a:	3b01      	subs	r3, #1
   24b3c:	3e01      	subs	r6, #1
   24b3e:	930d      	str	r3, [sp, #52]	; 0x34
   24b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   24b42:	e9c0 3900 	strd	r3, r9, [r0]
   24b46:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24b48:	3301      	adds	r3, #1
   24b4a:	444a      	add	r2, r9
   24b4c:	2b07      	cmp	r3, #7
   24b4e:	9226      	str	r2, [sp, #152]	; 0x98
   24b50:	9325      	str	r3, [sp, #148]	; 0x94
   24b52:	dc6c      	bgt.n	24c2e <_svfprintf_r+0x106e>
   24b54:	3008      	adds	r0, #8
   24b56:	9b03      	ldr	r3, [sp, #12]
   24b58:	f896 c000 	ldrb.w	ip, [r6]
   24b5c:	1b5b      	subs	r3, r3, r5
   24b5e:	4563      	cmp	r3, ip
   24b60:	bfa8      	it	ge
   24b62:	4663      	movge	r3, ip
   24b64:	2b00      	cmp	r3, #0
   24b66:	469a      	mov	sl, r3
   24b68:	dd0c      	ble.n	24b84 <_svfprintf_r+0xfc4>
   24b6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
   24b6c:	3401      	adds	r4, #1
   24b6e:	441a      	add	r2, r3
   24b70:	2c07      	cmp	r4, #7
   24b72:	e9c0 5300 	strd	r5, r3, [r0]
   24b76:	9226      	str	r2, [sp, #152]	; 0x98
   24b78:	9425      	str	r4, [sp, #148]	; 0x94
   24b7a:	f300 8177 	bgt.w	24e6c <_svfprintf_r+0x12ac>
   24b7e:	f896 c000 	ldrb.w	ip, [r6]
   24b82:	3008      	adds	r0, #8
   24b84:	f1ba 0f00 	cmp.w	sl, #0
   24b88:	bfac      	ite	ge
   24b8a:	ebac 040a 	subge.w	r4, ip, sl
   24b8e:	4664      	movlt	r4, ip
   24b90:	2c00      	cmp	r4, #0
   24b92:	dc0a      	bgt.n	24baa <_svfprintf_r+0xfea>
   24b94:	4465      	add	r5, ip
   24b96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24b98:	2b00      	cmp	r3, #0
   24b9a:	d1ca      	bne.n	24b32 <_svfprintf_r+0xf72>
   24b9c:	f1b8 0f00 	cmp.w	r8, #0
   24ba0:	f000 83ac 	beq.w	252fc <_svfprintf_r+0x173c>
   24ba4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   24ba8:	e7ca      	b.n	24b40 <_svfprintf_r+0xf80>
   24baa:	2c10      	cmp	r4, #16
   24bac:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   24bb0:	dd24      	ble.n	24bfc <_svfprintf_r+0x103c>
   24bb2:	9505      	str	r5, [sp, #20]
   24bb4:	f04f 0a10 	mov.w	sl, #16
   24bb8:	4663      	mov	r3, ip
   24bba:	460d      	mov	r5, r1
   24bbc:	e004      	b.n	24bc8 <_svfprintf_r+0x1008>
   24bbe:	3c10      	subs	r4, #16
   24bc0:	2c10      	cmp	r4, #16
   24bc2:	f100 0008 	add.w	r0, r0, #8
   24bc6:	dd16      	ble.n	24bf6 <_svfprintf_r+0x1036>
   24bc8:	3301      	adds	r3, #1
   24bca:	492c      	ldr	r1, [pc, #176]	; (24c7c <_svfprintf_r+0x10bc>)
   24bcc:	3210      	adds	r2, #16
   24bce:	2b07      	cmp	r3, #7
   24bd0:	e9c0 1a00 	strd	r1, sl, [r0]
   24bd4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24bd8:	ddf1      	ble.n	24bbe <_svfprintf_r+0xffe>
   24bda:	aa24      	add	r2, sp, #144	; 0x90
   24bdc:	4629      	mov	r1, r5
   24bde:	4658      	mov	r0, fp
   24be0:	f002 fc6c 	bl	274bc <__ssprint_r>
   24be4:	2800      	cmp	r0, #0
   24be6:	f47f ac50 	bne.w	2448a <_svfprintf_r+0x8ca>
   24bea:	3c10      	subs	r4, #16
   24bec:	2c10      	cmp	r4, #16
   24bee:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24bf2:	a827      	add	r0, sp, #156	; 0x9c
   24bf4:	dce8      	bgt.n	24bc8 <_svfprintf_r+0x1008>
   24bf6:	4629      	mov	r1, r5
   24bf8:	9d05      	ldr	r5, [sp, #20]
   24bfa:	469c      	mov	ip, r3
   24bfc:	f10c 0301 	add.w	r3, ip, #1
   24c00:	4422      	add	r2, r4
   24c02:	6044      	str	r4, [r0, #4]
   24c04:	2b07      	cmp	r3, #7
   24c06:	4c1d      	ldr	r4, [pc, #116]	; (24c7c <_svfprintf_r+0x10bc>)
   24c08:	6004      	str	r4, [r0, #0]
   24c0a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24c0e:	f300 83c6 	bgt.w	2539e <_svfprintf_r+0x17de>
   24c12:	f896 c000 	ldrb.w	ip, [r6]
   24c16:	3008      	adds	r0, #8
   24c18:	4465      	add	r5, ip
   24c1a:	e7bc      	b.n	24b96 <_svfprintf_r+0xfd6>
   24c1c:	f018 0310 	ands.w	r3, r8, #16
   24c20:	f000 80c2 	beq.w	24da8 <_svfprintf_r+0x11e8>
   24c24:	9b08      	ldr	r3, [sp, #32]
   24c26:	f853 2b04 	ldr.w	r2, [r3], #4
   24c2a:	9308      	str	r3, [sp, #32]
   24c2c:	e6f9      	b.n	24a22 <_svfprintf_r+0xe62>
   24c2e:	aa24      	add	r2, sp, #144	; 0x90
   24c30:	4658      	mov	r0, fp
   24c32:	9105      	str	r1, [sp, #20]
   24c34:	f002 fc42 	bl	274bc <__ssprint_r>
   24c38:	2800      	cmp	r0, #0
   24c3a:	f47f ac26 	bne.w	2448a <_svfprintf_r+0x8ca>
   24c3e:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24c40:	9905      	ldr	r1, [sp, #20]
   24c42:	a827      	add	r0, sp, #156	; 0x9c
   24c44:	e787      	b.n	24b56 <_svfprintf_r+0xf96>
   24c46:	9802      	ldr	r0, [sp, #8]
   24c48:	f8cd a01c 	str.w	sl, [sp, #28]
   24c4c:	ac50      	add	r4, sp, #320	; 0x140
   24c4e:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   24c52:	2500      	movs	r5, #0
   24c54:	ee0a ba10 	vmov	s20, fp
   24c58:	4b09      	ldr	r3, [pc, #36]	; (24c80 <_svfprintf_r+0x10c0>)
   24c5a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   24c5e:	f8cd 9014 	str.w	r9, [sp, #20]
   24c62:	46a3      	mov	fp, r4
   24c64:	f04f 0805 	mov.w	r8, #5
   24c68:	46ac      	mov	ip, r5
   24c6a:	4604      	mov	r4, r0
   24c6c:	e010      	b.n	24c90 <_svfprintf_r+0x10d0>
   24c6e:	bf00      	nop
   24c70:	20002c38 	.word	0x20002c38
   24c74:	20002c4c 	.word	0x20002c4c
   24c78:	20002c60 	.word	0x20002c60
   24c7c:	20004cc8 	.word	0x20004cc8
   24c80:	cccccccd 	.word	0xcccccccd
   24c84:	2a0a      	cmp	r2, #10
   24c86:	f171 0100 	sbcs.w	r1, r1, #0
   24c8a:	d336      	bcc.n	24cfa <_svfprintf_r+0x113a>
   24c8c:	464a      	mov	r2, r9
   24c8e:	4631      	mov	r1, r6
   24c90:	1850      	adds	r0, r2, r1
   24c92:	f140 0000 	adc.w	r0, r0, #0
   24c96:	fba3 5600 	umull	r5, r6, r3, r0
   24c9a:	f026 0503 	bic.w	r5, r6, #3
   24c9e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   24ca2:	1b40      	subs	r0, r0, r5
   24ca4:	1a15      	subs	r5, r2, r0
   24ca6:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   24caa:	f161 0e00 	sbc.w	lr, r1, #0
   24cae:	fb06 f605 	mul.w	r6, r6, r5
   24cb2:	fba5 9503 	umull	r9, r5, r5, r3
   24cb6:	fb03 660e 	mla	r6, r3, lr, r6
   24cba:	f009 0e01 	and.w	lr, r9, #1
   24cbe:	442e      	add	r6, r5
   24cc0:	fbae 5e08 	umull	r5, lr, lr, r8
   24cc4:	182d      	adds	r5, r5, r0
   24cc6:	ea4f 0959 	mov.w	r9, r9, lsr #1
   24cca:	3530      	adds	r5, #48	; 0x30
   24ccc:	f80b 5c01 	strb.w	r5, [fp, #-1]
   24cd0:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   24cd4:	f10c 0c01 	add.w	ip, ip, #1
   24cd8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   24cdc:	0876      	lsrs	r6, r6, #1
   24cde:	2c00      	cmp	r4, #0
   24ce0:	d0d0      	beq.n	24c84 <_svfprintf_r+0x10c4>
   24ce2:	f89a 0000 	ldrb.w	r0, [sl]
   24ce6:	4584      	cmp	ip, r0
   24ce8:	d1cc      	bne.n	24c84 <_svfprintf_r+0x10c4>
   24cea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   24cee:	d0c9      	beq.n	24c84 <_svfprintf_r+0x10c4>
   24cf0:	2a0a      	cmp	r2, #10
   24cf2:	f171 0100 	sbcs.w	r1, r1, #0
   24cf6:	f080 818f 	bcs.w	25018 <_svfprintf_r+0x1458>
   24cfa:	465c      	mov	r4, fp
   24cfc:	ab50      	add	r3, sp, #320	; 0x140
   24cfe:	1b1b      	subs	r3, r3, r4
   24d00:	f8dd 9014 	ldr.w	r9, [sp, #20]
   24d04:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   24d08:	ee1a ba10 	vmov	fp, s20
   24d0c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   24d10:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24d14:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   24d18:	9305      	str	r3, [sp, #20]
   24d1a:	f7ff bac2 	b.w	242a2 <_svfprintf_r+0x6e2>
   24d1e:	ee1b 1a10 	vmov	r1, s22
   24d22:	aa24      	add	r2, sp, #144	; 0x90
   24d24:	4658      	mov	r0, fp
   24d26:	f002 fbc9 	bl	274bc <__ssprint_r>
   24d2a:	2800      	cmp	r0, #0
   24d2c:	f47f abad 	bne.w	2448a <_svfprintf_r+0x8ca>
   24d30:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24d34:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24d36:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24d3a:	f7ff b896 	b.w	23e6a <_svfprintf_r+0x2aa>
   24d3e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24d40:	48be      	ldr	r0, [pc, #760]	; (2503c <_svfprintf_r+0x147c>)
   24d42:	f8ca 0000 	str.w	r0, [sl]
   24d46:	3301      	adds	r3, #1
   24d48:	3201      	adds	r2, #1
   24d4a:	2001      	movs	r0, #1
   24d4c:	2b07      	cmp	r3, #7
   24d4e:	9226      	str	r2, [sp, #152]	; 0x98
   24d50:	9325      	str	r3, [sp, #148]	; 0x94
   24d52:	f8ca 0004 	str.w	r0, [sl, #4]
   24d56:	f300 8177 	bgt.w	25048 <_svfprintf_r+0x1488>
   24d5a:	f10a 0a08 	add.w	sl, sl, #8
   24d5e:	2900      	cmp	r1, #0
   24d60:	f040 80af 	bne.w	24ec2 <_svfprintf_r+0x1302>
   24d64:	990e      	ldr	r1, [sp, #56]	; 0x38
   24d66:	f008 0301 	and.w	r3, r8, #1
   24d6a:	430b      	orrs	r3, r1
   24d6c:	f43f a8c0 	beq.w	23ef0 <_svfprintf_r+0x330>
   24d70:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24d72:	9912      	ldr	r1, [sp, #72]	; 0x48
   24d74:	441a      	add	r2, r3
   24d76:	e9ca 1300 	strd	r1, r3, [sl]
   24d7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24d7c:	9226      	str	r2, [sp, #152]	; 0x98
   24d7e:	3301      	adds	r3, #1
   24d80:	2b07      	cmp	r3, #7
   24d82:	9325      	str	r3, [sp, #148]	; 0x94
   24d84:	f300 8252 	bgt.w	2522c <_svfprintf_r+0x166c>
   24d88:	f10a 0a08 	add.w	sl, sl, #8
   24d8c:	990e      	ldr	r1, [sp, #56]	; 0x38
   24d8e:	f8ca 4000 	str.w	r4, [sl]
   24d92:	3301      	adds	r3, #1
   24d94:	440a      	add	r2, r1
   24d96:	2b07      	cmp	r3, #7
   24d98:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24d9c:	f8ca 1004 	str.w	r1, [sl, #4]
   24da0:	f77f a8a4 	ble.w	23eec <_svfprintf_r+0x32c>
   24da4:	f7ff bbbd 	b.w	24522 <_svfprintf_r+0x962>
   24da8:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   24dac:	f000 80dd 	beq.w	24f6a <_svfprintf_r+0x13aa>
   24db0:	9808      	ldr	r0, [sp, #32]
   24db2:	f850 2b04 	ldr.w	r2, [r0], #4
   24db6:	9008      	str	r0, [sp, #32]
   24db8:	4619      	mov	r1, r3
   24dba:	b292      	uxth	r2, r2
   24dbc:	e631      	b.n	24a22 <_svfprintf_r+0xe62>
   24dbe:	ee1b 1a10 	vmov	r1, s22
   24dc2:	aa24      	add	r2, sp, #144	; 0x90
   24dc4:	4658      	mov	r0, fp
   24dc6:	f002 fb79 	bl	274bc <__ssprint_r>
   24dca:	2800      	cmp	r0, #0
   24dcc:	f47f ab5d 	bne.w	2448a <_svfprintf_r+0x8ca>
   24dd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24dd2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24dd6:	f7ff baa3 	b.w	24320 <_svfprintf_r+0x760>
   24dda:	ae22      	add	r6, sp, #136	; 0x88
   24ddc:	2208      	movs	r2, #8
   24dde:	2100      	movs	r1, #0
   24de0:	4630      	mov	r0, r6
   24de2:	941d      	str	r4, [sp, #116]	; 0x74
   24de4:	f7fe f938 	bl	23058 <memset>
   24de8:	9b03      	ldr	r3, [sp, #12]
   24dea:	1c5a      	adds	r2, r3, #1
   24dec:	f000 80db 	beq.w	24fa6 <_svfprintf_r+0x13e6>
   24df0:	2500      	movs	r5, #0
   24df2:	f8cd 9008 	str.w	r9, [sp, #8]
   24df6:	f8cd 801c 	str.w	r8, [sp, #28]
   24dfa:	4699      	mov	r9, r3
   24dfc:	46a8      	mov	r8, r5
   24dfe:	e00c      	b.n	24e1a <_svfprintf_r+0x125a>
   24e00:	a937      	add	r1, sp, #220	; 0xdc
   24e02:	4658      	mov	r0, fp
   24e04:	f001 fb70 	bl	264e8 <_wcrtomb_r>
   24e08:	1c43      	adds	r3, r0, #1
   24e0a:	4440      	add	r0, r8
   24e0c:	f000 83c8 	beq.w	255a0 <_svfprintf_r+0x19e0>
   24e10:	4548      	cmp	r0, r9
   24e12:	dc08      	bgt.n	24e26 <_svfprintf_r+0x1266>
   24e14:	f000 8418 	beq.w	25648 <_svfprintf_r+0x1a88>
   24e18:	4680      	mov	r8, r0
   24e1a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   24e1c:	5952      	ldr	r2, [r2, r5]
   24e1e:	4633      	mov	r3, r6
   24e20:	3504      	adds	r5, #4
   24e22:	2a00      	cmp	r2, #0
   24e24:	d1ec      	bne.n	24e00 <_svfprintf_r+0x1240>
   24e26:	f8cd 8014 	str.w	r8, [sp, #20]
   24e2a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   24e2e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   24e32:	e0c5      	b.n	24fc0 <_svfprintf_r+0x1400>
   24e34:	3301      	adds	r3, #1
   24e36:	4982      	ldr	r1, [pc, #520]	; (25040 <_svfprintf_r+0x1480>)
   24e38:	f8ca 4004 	str.w	r4, [sl, #4]
   24e3c:	4422      	add	r2, r4
   24e3e:	2b07      	cmp	r3, #7
   24e40:	f8ca 1000 	str.w	r1, [sl]
   24e44:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24e48:	f77f a850 	ble.w	23eec <_svfprintf_r+0x32c>
   24e4c:	f7ff bb69 	b.w	24522 <_svfprintf_r+0x962>
   24e50:	ee1b 1a10 	vmov	r1, s22
   24e54:	aa24      	add	r2, sp, #144	; 0x90
   24e56:	4658      	mov	r0, fp
   24e58:	f002 fb30 	bl	274bc <__ssprint_r>
   24e5c:	2800      	cmp	r0, #0
   24e5e:	f47f ab14 	bne.w	2448a <_svfprintf_r+0x8ca>
   24e62:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24e64:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24e68:	f7ff b829 	b.w	23ebe <_svfprintf_r+0x2fe>
   24e6c:	aa24      	add	r2, sp, #144	; 0x90
   24e6e:	4658      	mov	r0, fp
   24e70:	9105      	str	r1, [sp, #20]
   24e72:	f002 fb23 	bl	274bc <__ssprint_r>
   24e76:	2800      	cmp	r0, #0
   24e78:	f47f ab07 	bne.w	2448a <_svfprintf_r+0x8ca>
   24e7c:	f896 c000 	ldrb.w	ip, [r6]
   24e80:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24e82:	9905      	ldr	r1, [sp, #20]
   24e84:	a827      	add	r0, sp, #156	; 0x9c
   24e86:	e67d      	b.n	24b84 <_svfprintf_r+0xfc4>
   24e88:	2b01      	cmp	r3, #1
   24e8a:	f8cd 8008 	str.w	r8, [sp, #8]
   24e8e:	f47f a9f3 	bne.w	24278 <_svfprintf_r+0x6b8>
   24e92:	f7ff bb93 	b.w	245bc <_svfprintf_r+0x9fc>
   24e96:	9b08      	ldr	r3, [sp, #32]
   24e98:	9904      	ldr	r1, [sp, #16]
   24e9a:	f853 2b04 	ldr.w	r2, [r3], #4
   24e9e:	464c      	mov	r4, r9
   24ea0:	6011      	str	r1, [r2, #0]
   24ea2:	9308      	str	r3, [sp, #32]
   24ea4:	f7fe bebe 	b.w	23c24 <_svfprintf_r+0x64>
   24ea8:	3301      	adds	r3, #1
   24eaa:	4965      	ldr	r1, [pc, #404]	; (25040 <_svfprintf_r+0x1480>)
   24eac:	f8ca 4004 	str.w	r4, [sl, #4]
   24eb0:	4422      	add	r2, r4
   24eb2:	2b07      	cmp	r3, #7
   24eb4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24eb8:	f8ca 1000 	str.w	r1, [sl]
   24ebc:	f77f ab22 	ble.w	24504 <_svfprintf_r+0x944>
   24ec0:	e47b      	b.n	247ba <_svfprintf_r+0xbfa>
   24ec2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24ec4:	9812      	ldr	r0, [sp, #72]	; 0x48
   24ec6:	441a      	add	r2, r3
   24ec8:	e9ca 0300 	strd	r0, r3, [sl]
   24ecc:	9b25      	ldr	r3, [sp, #148]	; 0x94
   24ece:	9226      	str	r2, [sp, #152]	; 0x98
   24ed0:	3301      	adds	r3, #1
   24ed2:	2b07      	cmp	r3, #7
   24ed4:	9325      	str	r3, [sp, #148]	; 0x94
   24ed6:	f300 81a9 	bgt.w	2522c <_svfprintf_r+0x166c>
   24eda:	f10a 0a08 	add.w	sl, sl, #8
   24ede:	2900      	cmp	r1, #0
   24ee0:	f6bf af54 	bge.w	24d8c <_svfprintf_r+0x11cc>
   24ee4:	424d      	negs	r5, r1
   24ee6:	3110      	adds	r1, #16
   24ee8:	f280 830f 	bge.w	2550a <_svfprintf_r+0x194a>
   24eec:	ee1b 1a10 	vmov	r1, s22
   24ef0:	2610      	movs	r6, #16
   24ef2:	e005      	b.n	24f00 <_svfprintf_r+0x1340>
   24ef4:	f10a 0a08 	add.w	sl, sl, #8
   24ef8:	3d10      	subs	r5, #16
   24efa:	2d10      	cmp	r5, #16
   24efc:	f340 8305 	ble.w	2550a <_svfprintf_r+0x194a>
   24f00:	3301      	adds	r3, #1
   24f02:	484f      	ldr	r0, [pc, #316]	; (25040 <_svfprintf_r+0x1480>)
   24f04:	3210      	adds	r2, #16
   24f06:	2b07      	cmp	r3, #7
   24f08:	e9ca 0600 	strd	r0, r6, [sl]
   24f0c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24f10:	ddf0      	ble.n	24ef4 <_svfprintf_r+0x1334>
   24f12:	aa24      	add	r2, sp, #144	; 0x90
   24f14:	4658      	mov	r0, fp
   24f16:	9103      	str	r1, [sp, #12]
   24f18:	f002 fad0 	bl	274bc <__ssprint_r>
   24f1c:	2800      	cmp	r0, #0
   24f1e:	f47f aab4 	bne.w	2448a <_svfprintf_r+0x8ca>
   24f22:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24f26:	9903      	ldr	r1, [sp, #12]
   24f28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24f2c:	e7e4      	b.n	24ef8 <_svfprintf_r+0x1338>
   24f2e:	9b08      	ldr	r3, [sp, #32]
   24f30:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   24f34:	bf1a      	itte	ne
   24f36:	4611      	movne	r1, r2
   24f38:	f853 2b04 	ldrne.w	r2, [r3], #4
   24f3c:	f853 2b04 	ldreq.w	r2, [r3], #4
   24f40:	9308      	str	r3, [sp, #32]
   24f42:	bf18      	it	ne
   24f44:	b2d2      	uxtbne	r2, r2
   24f46:	f7ff b945 	b.w	241d4 <_svfprintf_r+0x614>
   24f4a:	9b02      	ldr	r3, [sp, #8]
   24f4c:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   24f50:	9b08      	ldr	r3, [sp, #32]
   24f52:	bf1a      	itte	ne
   24f54:	4611      	movne	r1, r2
   24f56:	f853 2b04 	ldrne.w	r2, [r3], #4
   24f5a:	f853 2b04 	ldreq.w	r2, [r3], #4
   24f5e:	9308      	str	r3, [sp, #32]
   24f60:	bf18      	it	ne
   24f62:	b2d2      	uxtbne	r2, r2
   24f64:	2301      	movs	r3, #1
   24f66:	f7ff b8d0 	b.w	2410a <_svfprintf_r+0x54a>
   24f6a:	9b08      	ldr	r3, [sp, #32]
   24f6c:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   24f70:	bf1a      	itte	ne
   24f72:	4611      	movne	r1, r2
   24f74:	f853 2b04 	ldrne.w	r2, [r3], #4
   24f78:	f853 2b04 	ldreq.w	r2, [r3], #4
   24f7c:	9308      	str	r3, [sp, #32]
   24f7e:	bf18      	it	ne
   24f80:	b2d2      	uxtbne	r2, r2
   24f82:	e54e      	b.n	24a22 <_svfprintf_r+0xe62>
   24f84:	468a      	mov	sl, r1
   24f86:	3301      	adds	r3, #1
   24f88:	492d      	ldr	r1, [pc, #180]	; (25040 <_svfprintf_r+0x1480>)
   24f8a:	f8ca 5004 	str.w	r5, [sl, #4]
   24f8e:	442a      	add	r2, r5
   24f90:	2b07      	cmp	r3, #7
   24f92:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24f96:	f8ca 1000 	str.w	r1, [sl]
   24f9a:	f300 8139 	bgt.w	25210 <_svfprintf_r+0x1650>
   24f9e:	f10a 0a08 	add.w	sl, sl, #8
   24fa2:	f7ff bb8c 	b.w	246be <_svfprintf_r+0xafe>
   24fa6:	2300      	movs	r3, #0
   24fa8:	4619      	mov	r1, r3
   24faa:	9600      	str	r6, [sp, #0]
   24fac:	aa1d      	add	r2, sp, #116	; 0x74
   24fae:	4658      	mov	r0, fp
   24fb0:	f001 fac0 	bl	26534 <_wcsrtombs_r>
   24fb4:	4603      	mov	r3, r0
   24fb6:	3301      	adds	r3, #1
   24fb8:	9005      	str	r0, [sp, #20]
   24fba:	f000 82f1 	beq.w	255a0 <_svfprintf_r+0x19e0>
   24fbe:	941d      	str	r4, [sp, #116]	; 0x74
   24fc0:	9b05      	ldr	r3, [sp, #20]
   24fc2:	2b00      	cmp	r3, #0
   24fc4:	d04e      	beq.n	25064 <_svfprintf_r+0x14a4>
   24fc6:	2b63      	cmp	r3, #99	; 0x63
   24fc8:	f300 8118 	bgt.w	251fc <_svfprintf_r+0x163c>
   24fcc:	2300      	movs	r3, #0
   24fce:	9307      	str	r3, [sp, #28]
   24fd0:	ac37      	add	r4, sp, #220	; 0xdc
   24fd2:	2208      	movs	r2, #8
   24fd4:	2100      	movs	r1, #0
   24fd6:	4630      	mov	r0, r6
   24fd8:	f7fe f83e 	bl	23058 <memset>
   24fdc:	9d05      	ldr	r5, [sp, #20]
   24fde:	9600      	str	r6, [sp, #0]
   24fe0:	462b      	mov	r3, r5
   24fe2:	aa1d      	add	r2, sp, #116	; 0x74
   24fe4:	4621      	mov	r1, r4
   24fe6:	4658      	mov	r0, fp
   24fe8:	f001 faa4 	bl	26534 <_wcsrtombs_r>
   24fec:	4285      	cmp	r5, r0
   24fee:	f040 837c 	bne.w	256ea <_svfprintf_r+0x1b2a>
   24ff2:	9a05      	ldr	r2, [sp, #20]
   24ff4:	2300      	movs	r3, #0
   24ff6:	54a3      	strb	r3, [r4, r2]
   24ff8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   24ffc:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   25000:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   25004:	9303      	str	r3, [sp, #12]
   25006:	9202      	str	r2, [sp, #8]
   25008:	930f      	str	r3, [sp, #60]	; 0x3c
   2500a:	f7fe bfba 	b.w	23f82 <_svfprintf_r+0x3c2>
   2500e:	212d      	movs	r1, #45	; 0x2d
   25010:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   25014:	f7fe bfa4 	b.w	23f60 <_svfprintf_r+0x3a0>
   25018:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2501a:	9915      	ldr	r1, [sp, #84]	; 0x54
   2501c:	ebab 0b03 	sub.w	fp, fp, r3
   25020:	461a      	mov	r2, r3
   25022:	4658      	mov	r0, fp
   25024:	f7fe f8b0 	bl	23188 <strncpy>
   25028:	f89a 2001 	ldrb.w	r2, [sl, #1]
   2502c:	4b05      	ldr	r3, [pc, #20]	; (25044 <_svfprintf_r+0x1484>)
   2502e:	b10a      	cbz	r2, 25034 <_svfprintf_r+0x1474>
   25030:	f10a 0a01 	add.w	sl, sl, #1
   25034:	f04f 0c00 	mov.w	ip, #0
   25038:	e628      	b.n	24c8c <_svfprintf_r+0x10cc>
   2503a:	bf00      	nop
   2503c:	20003aac 	.word	0x20003aac
   25040:	20004cc8 	.word	0x20004cc8
   25044:	cccccccd 	.word	0xcccccccd
   25048:	ee1b 1a10 	vmov	r1, s22
   2504c:	aa24      	add	r2, sp, #144	; 0x90
   2504e:	4658      	mov	r0, fp
   25050:	f002 fa34 	bl	274bc <__ssprint_r>
   25054:	2800      	cmp	r0, #0
   25056:	f47f aa18 	bne.w	2448a <_svfprintf_r+0x8ca>
   2505a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   2505c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2505e:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   25062:	e67c      	b.n	24d5e <_svfprintf_r+0x119e>
   25064:	9b05      	ldr	r3, [sp, #20]
   25066:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2506a:	930f      	str	r3, [sp, #60]	; 0x3c
   2506c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   25070:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   25074:	9307      	str	r3, [sp, #28]
   25076:	f7fe bf84 	b.w	23f82 <_svfprintf_r+0x3c2>
   2507a:	990e      	ldr	r1, [sp, #56]	; 0x38
   2507c:	9805      	ldr	r0, [sp, #20]
   2507e:	1865      	adds	r5, r4, r1
   25080:	1a2d      	subs	r5, r5, r0
   25082:	1acc      	subs	r4, r1, r3
   25084:	42a5      	cmp	r5, r4
   25086:	bfa8      	it	ge
   25088:	4625      	movge	r5, r4
   2508a:	f7ff bb4d 	b.w	24728 <_svfprintf_r+0xb68>
   2508e:	9b08      	ldr	r3, [sp, #32]
   25090:	9904      	ldr	r1, [sp, #16]
   25092:	f853 2b04 	ldr.w	r2, [r3], #4
   25096:	9308      	str	r3, [sp, #32]
   25098:	8011      	strh	r1, [r2, #0]
   2509a:	464c      	mov	r4, r9
   2509c:	f7fe bdc2 	b.w	23c24 <_svfprintf_r+0x64>
   250a0:	f913 2b04 	ldrsb.w	r2, [r3], #4
   250a4:	9308      	str	r3, [sp, #32]
   250a6:	17d1      	asrs	r1, r2, #31
   250a8:	460b      	mov	r3, r1
   250aa:	f7fe bfdb 	b.w	24064 <_svfprintf_r+0x4a4>
   250ae:	9a03      	ldr	r2, [sp, #12]
   250b0:	2102      	movs	r1, #2
   250b2:	ab22      	add	r3, sp, #136	; 0x88
   250b4:	9301      	str	r3, [sp, #4]
   250b6:	ab1d      	add	r3, sp, #116	; 0x74
   250b8:	9300      	str	r3, [sp, #0]
   250ba:	4658      	mov	r0, fp
   250bc:	ab1b      	add	r3, sp, #108	; 0x6c
   250be:	eeb0 0b4a 	vmov.f64	d0, d10
   250c2:	9202      	str	r2, [sp, #8]
   250c4:	f001 fb70 	bl	267a8 <_dtoa_r>
   250c8:	2d47      	cmp	r5, #71	; 0x47
   250ca:	9a02      	ldr	r2, [sp, #8]
   250cc:	4604      	mov	r4, r0
   250ce:	f000 8161 	beq.w	25394 <_svfprintf_r+0x17d4>
   250d2:	2d46      	cmp	r5, #70	; 0x46
   250d4:	4410      	add	r0, r2
   250d6:	d105      	bne.n	250e4 <_svfprintf_r+0x1524>
   250d8:	7823      	ldrb	r3, [r4, #0]
   250da:	2b30      	cmp	r3, #48	; 0x30
   250dc:	f000 826f 	beq.w	255be <_svfprintf_r+0x19fe>
   250e0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   250e2:	4410      	add	r0, r2
   250e4:	eeb5 ab40 	vcmp.f64	d10, #0.0
   250e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   250ec:	f040 8146 	bne.w	2537c <_svfprintf_r+0x17bc>
   250f0:	4603      	mov	r3, r0
   250f2:	1b1b      	subs	r3, r3, r4
   250f4:	930e      	str	r3, [sp, #56]	; 0x38
   250f6:	2d47      	cmp	r5, #71	; 0x47
   250f8:	f000 8110 	beq.w	2531c <_svfprintf_r+0x175c>
   250fc:	2d46      	cmp	r5, #70	; 0x46
   250fe:	f000 81b5 	beq.w	2546c <_svfprintf_r+0x18ac>
   25102:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25104:	930c      	str	r3, [sp, #48]	; 0x30
   25106:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25108:	2d41      	cmp	r5, #65	; 0x41
   2510a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2510e:	931b      	str	r3, [sp, #108]	; 0x6c
   25110:	f000 81e5 	beq.w	254de <_svfprintf_r+0x191e>
   25114:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   25118:	2100      	movs	r1, #0
   2511a:	2b00      	cmp	r3, #0
   2511c:	bfb8      	it	lt
   2511e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   25120:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   25124:	bfba      	itte	lt
   25126:	f1c3 0301 	rsblt	r3, r3, #1
   2512a:	222d      	movlt	r2, #45	; 0x2d
   2512c:	222b      	movge	r2, #43	; 0x2b
   2512e:	2b09      	cmp	r3, #9
   25130:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   25134:	f340 81da 	ble.w	254ec <_svfprintf_r+0x192c>
   25138:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   2513c:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 2555c <_svfprintf_r+0x199c>
   25140:	462a      	mov	r2, r5
   25142:	4610      	mov	r0, r2
   25144:	fb8c 2103 	smull	r2, r1, ip, r3
   25148:	17da      	asrs	r2, r3, #31
   2514a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   2514e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   25152:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   25156:	3130      	adds	r1, #48	; 0x30
   25158:	f800 1c01 	strb.w	r1, [r0, #-1]
   2515c:	4619      	mov	r1, r3
   2515e:	2963      	cmp	r1, #99	; 0x63
   25160:	4613      	mov	r3, r2
   25162:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   25166:	dcec      	bgt.n	25142 <_svfprintf_r+0x1582>
   25168:	3330      	adds	r3, #48	; 0x30
   2516a:	b2d9      	uxtb	r1, r3
   2516c:	1e83      	subs	r3, r0, #2
   2516e:	429d      	cmp	r5, r3
   25170:	f802 1c01 	strb.w	r1, [r2, #-1]
   25174:	f240 828b 	bls.w	2568e <_svfprintf_r+0x1ace>
   25178:	4613      	mov	r3, r2
   2517a:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   2517e:	e001      	b.n	25184 <_svfprintf_r+0x15c4>
   25180:	f813 1b01 	ldrb.w	r1, [r3], #1
   25184:	f802 1b01 	strb.w	r1, [r2], #1
   25188:	429d      	cmp	r5, r3
   2518a:	d1f9      	bne.n	25180 <_svfprintf_r+0x15c0>
   2518c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   25190:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   25194:	1a1b      	subs	r3, r3, r0
   25196:	4413      	add	r3, r2
   25198:	aa1e      	add	r2, sp, #120	; 0x78
   2519a:	1a9b      	subs	r3, r3, r2
   2519c:	9314      	str	r3, [sp, #80]	; 0x50
   2519e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   251a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   251a2:	2b01      	cmp	r3, #1
   251a4:	441a      	add	r2, r3
   251a6:	9205      	str	r2, [sp, #20]
   251a8:	f340 8203 	ble.w	255b2 <_svfprintf_r+0x19f2>
   251ac:	9b05      	ldr	r3, [sp, #20]
   251ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
   251b0:	4413      	add	r3, r2
   251b2:	9305      	str	r3, [sp, #20]
   251b4:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   251b8:	9a05      	ldr	r2, [sp, #20]
   251ba:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   251be:	2300      	movs	r3, #0
   251c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   251c4:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   251c8:	930f      	str	r3, [sp, #60]	; 0x3c
   251ca:	9202      	str	r2, [sp, #8]
   251cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   251ce:	2b00      	cmp	r3, #0
   251d0:	f040 80b1 	bne.w	25336 <_svfprintf_r+0x1776>
   251d4:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   251d8:	9303      	str	r3, [sp, #12]
   251da:	f7fe bed2 	b.w	23f82 <_svfprintf_r+0x3c2>
   251de:	4620      	mov	r0, r4
   251e0:	f7fe face 	bl	23780 <strlen>
   251e4:	4602      	mov	r2, r0
   251e6:	9005      	str	r0, [sp, #20]
   251e8:	f7fe bf20 	b.w	2402c <_svfprintf_r+0x46c>
   251ec:	ee1b 1a10 	vmov	r1, s22
   251f0:	aa24      	add	r2, sp, #144	; 0x90
   251f2:	4658      	mov	r0, fp
   251f4:	f002 f962 	bl	274bc <__ssprint_r>
   251f8:	f7fe bded 	b.w	23dd6 <_svfprintf_r+0x216>
   251fc:	1c59      	adds	r1, r3, #1
   251fe:	4658      	mov	r0, fp
   25200:	f7fc fd7a 	bl	21cf8 <_malloc_r>
   25204:	4604      	mov	r4, r0
   25206:	2800      	cmp	r0, #0
   25208:	f000 81ca 	beq.w	255a0 <_svfprintf_r+0x19e0>
   2520c:	9007      	str	r0, [sp, #28]
   2520e:	e6e0      	b.n	24fd2 <_svfprintf_r+0x1412>
   25210:	ee1b 1a10 	vmov	r1, s22
   25214:	aa24      	add	r2, sp, #144	; 0x90
   25216:	4658      	mov	r0, fp
   25218:	f002 f950 	bl	274bc <__ssprint_r>
   2521c:	2800      	cmp	r0, #0
   2521e:	f47f a934 	bne.w	2448a <_svfprintf_r+0x8ca>
   25222:	9a26      	ldr	r2, [sp, #152]	; 0x98
   25224:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   25228:	f7ff ba49 	b.w	246be <_svfprintf_r+0xafe>
   2522c:	ee1b 1a10 	vmov	r1, s22
   25230:	aa24      	add	r2, sp, #144	; 0x90
   25232:	4658      	mov	r0, fp
   25234:	f002 f942 	bl	274bc <__ssprint_r>
   25238:	2800      	cmp	r0, #0
   2523a:	f47f a926 	bne.w	2448a <_svfprintf_r+0x8ca>
   2523e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   25242:	991b      	ldr	r1, [sp, #108]	; 0x6c
   25244:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   25248:	e649      	b.n	24ede <_svfprintf_r+0x131e>
   2524a:	2306      	movs	r3, #6
   2524c:	9303      	str	r3, [sp, #12]
   2524e:	f7ff bb83 	b.w	24958 <_svfprintf_r+0xd98>
   25252:	9b03      	ldr	r3, [sp, #12]
   25254:	2102      	movs	r1, #2
   25256:	1c5a      	adds	r2, r3, #1
   25258:	e72b      	b.n	250b2 <_svfprintf_r+0x14f2>
   2525a:	9a03      	ldr	r2, [sp, #12]
   2525c:	2103      	movs	r1, #3
   2525e:	e728      	b.n	250b2 <_svfprintf_r+0x14f2>
   25260:	a81b      	add	r0, sp, #108	; 0x6c
   25262:	eeb0 0b4a 	vmov.f64	d0, d10
   25266:	f001 f973 	bl	26550 <frexp>
   2526a:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   2526e:	ee20 0b07 	vmul.f64	d0, d0, d7
   25272:	eeb5 0b40 	vcmp.f64	d0, #0.0
   25276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2527a:	d101      	bne.n	25280 <_svfprintf_r+0x16c0>
   2527c:	2301      	movs	r3, #1
   2527e:	931b      	str	r3, [sp, #108]	; 0x6c
   25280:	48b3      	ldr	r0, [pc, #716]	; (25550 <_svfprintf_r+0x1990>)
   25282:	9b03      	ldr	r3, [sp, #12]
   25284:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   25288:	3b01      	subs	r3, #1
   2528a:	4622      	mov	r2, r4
   2528c:	e004      	b.n	25298 <_svfprintf_r+0x16d8>
   2528e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   25292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25296:	d013      	beq.n	252c0 <_svfprintf_r+0x1700>
   25298:	ee20 0b05 	vmul.f64	d0, d0, d5
   2529c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   252a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   252a4:	ee17 1a90 	vmov	r1, s15
   252a8:	5c41      	ldrb	r1, [r0, r1]
   252aa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   252ae:	4694      	mov	ip, r2
   252b0:	ee30 0b46 	vsub.f64	d0, d0, d6
   252b4:	f802 1b01 	strb.w	r1, [r2], #1
   252b8:	4619      	mov	r1, r3
   252ba:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   252be:	d1e6      	bne.n	2528e <_svfprintf_r+0x16ce>
   252c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   252c4:	eeb4 0bc6 	vcmpe.f64	d0, d6
   252c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   252cc:	f300 8148 	bgt.w	25560 <_svfprintf_r+0x19a0>
   252d0:	eeb4 0b46 	vcmp.f64	d0, d6
   252d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   252d8:	d104      	bne.n	252e4 <_svfprintf_r+0x1724>
   252da:	ee17 3a90 	vmov	r3, s15
   252de:	07db      	lsls	r3, r3, #31
   252e0:	f100 813e 	bmi.w	25560 <_svfprintf_r+0x19a0>
   252e4:	2900      	cmp	r1, #0
   252e6:	db06      	blt.n	252f6 <_svfprintf_r+0x1736>
   252e8:	1c4b      	adds	r3, r1, #1
   252ea:	4413      	add	r3, r2
   252ec:	2130      	movs	r1, #48	; 0x30
   252ee:	f802 1b01 	strb.w	r1, [r2], #1
   252f2:	4293      	cmp	r3, r2
   252f4:	d1fb      	bne.n	252ee <_svfprintf_r+0x172e>
   252f6:	1b13      	subs	r3, r2, r4
   252f8:	930e      	str	r3, [sp, #56]	; 0x38
   252fa:	e6fc      	b.n	250f6 <_svfprintf_r+0x1536>
   252fc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   252fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25300:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   25304:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   25308:	9613      	str	r6, [sp, #76]	; 0x4c
   2530a:	18e3      	adds	r3, r4, r3
   2530c:	429d      	cmp	r5, r3
   2530e:	4629      	mov	r1, r5
   25310:	bf28      	it	cs
   25312:	4619      	movcs	r1, r3
   25314:	4682      	mov	sl, r0
   25316:	9105      	str	r1, [sp, #20]
   25318:	f7ff b9d8 	b.w	246cc <_svfprintf_r+0xb0c>
   2531c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2531e:	930c      	str	r3, [sp, #48]	; 0x30
   25320:	1cda      	adds	r2, r3, #3
   25322:	db02      	blt.n	2532a <_svfprintf_r+0x176a>
   25324:	9a03      	ldr	r2, [sp, #12]
   25326:	4293      	cmp	r3, r2
   25328:	dd0c      	ble.n	25344 <_svfprintf_r+0x1784>
   2532a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2532c:	3b02      	subs	r3, #2
   2532e:	930b      	str	r3, [sp, #44]	; 0x2c
   25330:	f023 0520 	bic.w	r5, r3, #32
   25334:	e6e7      	b.n	25106 <_svfprintf_r+0x1546>
   25336:	212d      	movs	r1, #45	; 0x2d
   25338:	2300      	movs	r3, #0
   2533a:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   2533e:	9303      	str	r3, [sp, #12]
   25340:	f7fe be22 	b.w	23f88 <_svfprintf_r+0x3c8>
   25344:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25348:	4293      	cmp	r3, r2
   2534a:	f2c0 80bd 	blt.w	254c8 <_svfprintf_r+0x1908>
   2534e:	07f0      	lsls	r0, r6, #31
   25350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25352:	f140 8132 	bpl.w	255ba <_svfprintf_r+0x19fa>
   25356:	9a10      	ldr	r2, [sp, #64]	; 0x40
   25358:	4413      	add	r3, r2
   2535a:	9305      	str	r3, [sp, #20]
   2535c:	0571      	lsls	r1, r6, #21
   2535e:	d503      	bpl.n	25368 <_svfprintf_r+0x17a8>
   25360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25362:	2b00      	cmp	r3, #0
   25364:	f300 8135 	bgt.w	255d2 <_svfprintf_r+0x1a12>
   25368:	9b05      	ldr	r3, [sp, #20]
   2536a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2536e:	9302      	str	r3, [sp, #8]
   25370:	2367      	movs	r3, #103	; 0x67
   25372:	930b      	str	r3, [sp, #44]	; 0x2c
   25374:	2300      	movs	r3, #0
   25376:	930f      	str	r3, [sp, #60]	; 0x3c
   25378:	930d      	str	r3, [sp, #52]	; 0x34
   2537a:	e727      	b.n	251cc <_svfprintf_r+0x160c>
   2537c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2537e:	4283      	cmp	r3, r0
   25380:	f4bf aeb7 	bcs.w	250f2 <_svfprintf_r+0x1532>
   25384:	2130      	movs	r1, #48	; 0x30
   25386:	1c5a      	adds	r2, r3, #1
   25388:	9222      	str	r2, [sp, #136]	; 0x88
   2538a:	7019      	strb	r1, [r3, #0]
   2538c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2538e:	4298      	cmp	r0, r3
   25390:	d8f9      	bhi.n	25386 <_svfprintf_r+0x17c6>
   25392:	e6ae      	b.n	250f2 <_svfprintf_r+0x1532>
   25394:	07f3      	lsls	r3, r6, #31
   25396:	f100 80a7 	bmi.w	254e8 <_svfprintf_r+0x1928>
   2539a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2539c:	e6a9      	b.n	250f2 <_svfprintf_r+0x1532>
   2539e:	aa24      	add	r2, sp, #144	; 0x90
   253a0:	4658      	mov	r0, fp
   253a2:	9105      	str	r1, [sp, #20]
   253a4:	f002 f88a 	bl	274bc <__ssprint_r>
   253a8:	2800      	cmp	r0, #0
   253aa:	f47f a86e 	bne.w	2448a <_svfprintf_r+0x8ca>
   253ae:	f896 c000 	ldrb.w	ip, [r6]
   253b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   253b4:	9905      	ldr	r1, [sp, #20]
   253b6:	a827      	add	r0, sp, #156	; 0x9c
   253b8:	4465      	add	r5, ip
   253ba:	f7ff bbec 	b.w	24b96 <_svfprintf_r+0xfd6>
   253be:	ee1b 1a10 	vmov	r1, s22
   253c2:	aa24      	add	r2, sp, #144	; 0x90
   253c4:	4658      	mov	r0, fp
   253c6:	f002 f879 	bl	274bc <__ssprint_r>
   253ca:	2800      	cmp	r0, #0
   253cc:	f47f a85d 	bne.w	2448a <_svfprintf_r+0x8ca>
   253d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   253d2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   253d6:	f7ff b96b 	b.w	246b0 <_svfprintf_r+0xaf0>
   253da:	2378      	movs	r3, #120	; 0x78
   253dc:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   253e0:	2330      	movs	r3, #48	; 0x30
   253e2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   253e6:	9b03      	ldr	r3, [sp, #12]
   253e8:	2b63      	cmp	r3, #99	; 0x63
   253ea:	f048 0602 	orr.w	r6, r8, #2
   253ee:	f300 80a6 	bgt.w	2553e <_svfprintf_r+0x197e>
   253f2:	2300      	movs	r3, #0
   253f4:	9307      	str	r3, [sp, #28]
   253f6:	ac37      	add	r4, sp, #220	; 0xdc
   253f8:	ee18 3a90 	vmov	r3, s17
   253fc:	2b00      	cmp	r3, #0
   253fe:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   25402:	db2b      	blt.n	2545c <_svfprintf_r+0x189c>
   25404:	eeb0 ab48 	vmov.f64	d10, d8
   25408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2540a:	f023 0520 	bic.w	r5, r3, #32
   2540e:	2300      	movs	r3, #0
   25410:	9309      	str	r3, [sp, #36]	; 0x24
   25412:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   25414:	2b61      	cmp	r3, #97	; 0x61
   25416:	f47f aaad 	bne.w	24974 <_svfprintf_r+0xdb4>
   2541a:	eeb0 0b4a 	vmov.f64	d0, d10
   2541e:	a81b      	add	r0, sp, #108	; 0x6c
   25420:	f001 f896 	bl	26550 <frexp>
   25424:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   25428:	ee20 0b07 	vmul.f64	d0, d0, d7
   2542c:	eeb5 0b40 	vcmp.f64	d0, #0.0
   25430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25434:	d101      	bne.n	2543a <_svfprintf_r+0x187a>
   25436:	2301      	movs	r3, #1
   25438:	931b      	str	r3, [sp, #108]	; 0x6c
   2543a:	4846      	ldr	r0, [pc, #280]	; (25554 <_svfprintf_r+0x1994>)
   2543c:	e721      	b.n	25282 <_svfprintf_r+0x16c2>
   2543e:	ee1b 1a10 	vmov	r1, s22
   25442:	aa24      	add	r2, sp, #144	; 0x90
   25444:	4658      	mov	r0, fp
   25446:	f002 f839 	bl	274bc <__ssprint_r>
   2544a:	2800      	cmp	r0, #0
   2544c:	f47f a81d 	bne.w	2448a <_svfprintf_r+0x8ca>
   25450:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25452:	9a26      	ldr	r2, [sp, #152]	; 0x98
   25454:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   25458:	f7ff b94e 	b.w	246f8 <_svfprintf_r+0xb38>
   2545c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2545e:	f023 0520 	bic.w	r5, r3, #32
   25462:	232d      	movs	r3, #45	; 0x2d
   25464:	9309      	str	r3, [sp, #36]	; 0x24
   25466:	eeb1 ab48 	vneg.f64	d10, d8
   2546a:	e7d2      	b.n	25412 <_svfprintf_r+0x1852>
   2546c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2546e:	920c      	str	r2, [sp, #48]	; 0x30
   25470:	2a00      	cmp	r2, #0
   25472:	f006 0301 	and.w	r3, r6, #1
   25476:	f340 810d 	ble.w	25694 <_svfprintf_r+0x1ad4>
   2547a:	9903      	ldr	r1, [sp, #12]
   2547c:	430b      	orrs	r3, r1
   2547e:	f040 80cf 	bne.w	25620 <_svfprintf_r+0x1a60>
   25482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   25484:	9305      	str	r3, [sp, #20]
   25486:	2366      	movs	r3, #102	; 0x66
   25488:	930b      	str	r3, [sp, #44]	; 0x2c
   2548a:	0572      	lsls	r2, r6, #21
   2548c:	f100 80a3 	bmi.w	255d6 <_svfprintf_r+0x1a16>
   25490:	9b05      	ldr	r3, [sp, #20]
   25492:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   25496:	9302      	str	r3, [sp, #8]
   25498:	e76c      	b.n	25374 <_svfprintf_r+0x17b4>
   2549a:	ee1b 1a10 	vmov	r1, s22
   2549e:	aa24      	add	r2, sp, #144	; 0x90
   254a0:	4658      	mov	r0, fp
   254a2:	f002 f80b 	bl	274bc <__ssprint_r>
   254a6:	2800      	cmp	r0, #0
   254a8:	f47e afef 	bne.w	2448a <_svfprintf_r+0x8ca>
   254ac:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   254ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   254b0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   254b2:	1b1c      	subs	r4, r3, r4
   254b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   254b8:	f7ff b936 	b.w	24728 <_svfprintf_r+0xb68>
   254bc:	2358      	movs	r3, #88	; 0x58
   254be:	e78d      	b.n	253dc <_svfprintf_r+0x181c>
   254c0:	2200      	movs	r2, #0
   254c2:	9203      	str	r2, [sp, #12]
   254c4:	f7fe bbda 	b.w	23c7c <_svfprintf_r+0xbc>
   254c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   254ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
   254cc:	189a      	adds	r2, r3, r2
   254ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   254d0:	9205      	str	r2, [sp, #20]
   254d2:	2b00      	cmp	r3, #0
   254d4:	f340 80ab 	ble.w	2562e <_svfprintf_r+0x1a6e>
   254d8:	2367      	movs	r3, #103	; 0x67
   254da:	930b      	str	r3, [sp, #44]	; 0x2c
   254dc:	e7d5      	b.n	2548a <_svfprintf_r+0x18ca>
   254de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   254e0:	320f      	adds	r2, #15
   254e2:	b2d2      	uxtb	r2, r2
   254e4:	2101      	movs	r1, #1
   254e6:	e618      	b.n	2511a <_svfprintf_r+0x155a>
   254e8:	18a0      	adds	r0, r4, r2
   254ea:	e5fb      	b.n	250e4 <_svfprintf_r+0x1524>
   254ec:	2900      	cmp	r1, #0
   254ee:	f040 80a8 	bne.w	25642 <_svfprintf_r+0x1a82>
   254f2:	2230      	movs	r2, #48	; 0x30
   254f4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   254f8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   254fc:	3330      	adds	r3, #48	; 0x30
   254fe:	f802 3b01 	strb.w	r3, [r2], #1
   25502:	ab1e      	add	r3, sp, #120	; 0x78
   25504:	1ad3      	subs	r3, r2, r3
   25506:	9314      	str	r3, [sp, #80]	; 0x50
   25508:	e649      	b.n	2519e <_svfprintf_r+0x15de>
   2550a:	3301      	adds	r3, #1
   2550c:	4912      	ldr	r1, [pc, #72]	; (25558 <_svfprintf_r+0x1998>)
   2550e:	f8ca 5004 	str.w	r5, [sl, #4]
   25512:	442a      	add	r2, r5
   25514:	2b07      	cmp	r3, #7
   25516:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2551a:	f8ca 1000 	str.w	r1, [sl]
   2551e:	f77f ac33 	ble.w	24d88 <_svfprintf_r+0x11c8>
   25522:	ee1b 1a10 	vmov	r1, s22
   25526:	aa24      	add	r2, sp, #144	; 0x90
   25528:	4658      	mov	r0, fp
   2552a:	f001 ffc7 	bl	274bc <__ssprint_r>
   2552e:	2800      	cmp	r0, #0
   25530:	f47e afab 	bne.w	2448a <_svfprintf_r+0x8ca>
   25534:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   25538:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2553c:	e426      	b.n	24d8c <_svfprintf_r+0x11cc>
   2553e:	1c59      	adds	r1, r3, #1
   25540:	4658      	mov	r0, fp
   25542:	f7fc fbd9 	bl	21cf8 <_malloc_r>
   25546:	4604      	mov	r4, r0
   25548:	b350      	cbz	r0, 255a0 <_svfprintf_r+0x19e0>
   2554a:	9007      	str	r0, [sp, #28]
   2554c:	e754      	b.n	253f8 <_svfprintf_r+0x1838>
   2554e:	bf00      	nop
   25550:	20002c4c 	.word	0x20002c4c
   25554:	20002c38 	.word	0x20002c38
   25558:	20004cc8 	.word	0x20004cc8
   2555c:	66666667 	.word	0x66666667
   25560:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   25564:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   25568:	f890 c00f 	ldrb.w	ip, [r0, #15]
   2556c:	4561      	cmp	r1, ip
   2556e:	4613      	mov	r3, r2
   25570:	d10a      	bne.n	25588 <_svfprintf_r+0x19c8>
   25572:	f04f 0e30 	mov.w	lr, #48	; 0x30
   25576:	f803 ec01 	strb.w	lr, [r3, #-1]
   2557a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2557c:	1e59      	subs	r1, r3, #1
   2557e:	9122      	str	r1, [sp, #136]	; 0x88
   25580:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   25584:	458c      	cmp	ip, r1
   25586:	d0f6      	beq.n	25576 <_svfprintf_r+0x19b6>
   25588:	2939      	cmp	r1, #57	; 0x39
   2558a:	bf16      	itet	ne
   2558c:	3101      	addne	r1, #1
   2558e:	7a81      	ldrbeq	r1, [r0, #10]
   25590:	b2c9      	uxtbne	r1, r1
   25592:	f803 1c01 	strb.w	r1, [r3, #-1]
   25596:	e6ae      	b.n	252f6 <_svfprintf_r+0x1736>
   25598:	2300      	movs	r3, #0
   2559a:	4690      	mov	r8, r2
   2559c:	9307      	str	r3, [sp, #28]
   2559e:	e760      	b.n	25462 <_svfprintf_r+0x18a2>
   255a0:	ee1b 2a10 	vmov	r2, s22
   255a4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   255a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   255ac:	8193      	strh	r3, [r2, #12]
   255ae:	f7fe bc16 	b.w	23dde <_svfprintf_r+0x21e>
   255b2:	07f5      	lsls	r5, r6, #31
   255b4:	f57f adfe 	bpl.w	251b4 <_svfprintf_r+0x15f4>
   255b8:	e5f8      	b.n	251ac <_svfprintf_r+0x15ec>
   255ba:	9305      	str	r3, [sp, #20]
   255bc:	e6ce      	b.n	2535c <_svfprintf_r+0x179c>
   255be:	eeb5 ab40 	vcmp.f64	d10, #0.0
   255c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   255c6:	f43f ad8b 	beq.w	250e0 <_svfprintf_r+0x1520>
   255ca:	f1c2 0201 	rsb	r2, r2, #1
   255ce:	921b      	str	r2, [sp, #108]	; 0x6c
   255d0:	e587      	b.n	250e2 <_svfprintf_r+0x1522>
   255d2:	2367      	movs	r3, #103	; 0x67
   255d4:	930b      	str	r3, [sp, #44]	; 0x2c
   255d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   255d8:	780b      	ldrb	r3, [r1, #0]
   255da:	2bff      	cmp	r3, #255	; 0xff
   255dc:	d079      	beq.n	256d2 <_svfprintf_r+0x1b12>
   255de:	2500      	movs	r5, #0
   255e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   255e2:	4628      	mov	r0, r5
   255e4:	e003      	b.n	255ee <_svfprintf_r+0x1a2e>
   255e6:	3001      	adds	r0, #1
   255e8:	3101      	adds	r1, #1
   255ea:	2bff      	cmp	r3, #255	; 0xff
   255ec:	d008      	beq.n	25600 <_svfprintf_r+0x1a40>
   255ee:	4293      	cmp	r3, r2
   255f0:	da06      	bge.n	25600 <_svfprintf_r+0x1a40>
   255f2:	1ad2      	subs	r2, r2, r3
   255f4:	784b      	ldrb	r3, [r1, #1]
   255f6:	2b00      	cmp	r3, #0
   255f8:	d1f5      	bne.n	255e6 <_svfprintf_r+0x1a26>
   255fa:	780b      	ldrb	r3, [r1, #0]
   255fc:	3501      	adds	r5, #1
   255fe:	e7f4      	b.n	255ea <_svfprintf_r+0x1a2a>
   25600:	920c      	str	r2, [sp, #48]	; 0x30
   25602:	9113      	str	r1, [sp, #76]	; 0x4c
   25604:	900d      	str	r0, [sp, #52]	; 0x34
   25606:	950f      	str	r5, [sp, #60]	; 0x3c
   25608:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2560a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2560c:	9916      	ldr	r1, [sp, #88]	; 0x58
   2560e:	4413      	add	r3, r2
   25610:	9a05      	ldr	r2, [sp, #20]
   25612:	fb01 2303 	mla	r3, r1, r3, r2
   25616:	9305      	str	r3, [sp, #20]
   25618:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2561c:	9302      	str	r3, [sp, #8]
   2561e:	e5d5      	b.n	251cc <_svfprintf_r+0x160c>
   25620:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25622:	18d3      	adds	r3, r2, r3
   25624:	4419      	add	r1, r3
   25626:	2366      	movs	r3, #102	; 0x66
   25628:	9105      	str	r1, [sp, #20]
   2562a:	930b      	str	r3, [sp, #44]	; 0x2c
   2562c:	e72d      	b.n	2548a <_svfprintf_r+0x18ca>
   2562e:	f1c3 0301 	rsb	r3, r3, #1
   25632:	441a      	add	r2, r3
   25634:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   25638:	9302      	str	r3, [sp, #8]
   2563a:	2367      	movs	r3, #103	; 0x67
   2563c:	9205      	str	r2, [sp, #20]
   2563e:	930b      	str	r3, [sp, #44]	; 0x2c
   25640:	e698      	b.n	25374 <_svfprintf_r+0x17b4>
   25642:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   25646:	e759      	b.n	254fc <_svfprintf_r+0x193c>
   25648:	9b03      	ldr	r3, [sp, #12]
   2564a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   2564e:	f8dd 801c 	ldr.w	r8, [sp, #28]
   25652:	9305      	str	r3, [sp, #20]
   25654:	e4b4      	b.n	24fc0 <_svfprintf_r+0x1400>
   25656:	ee18 3a90 	vmov	r3, s17
   2565a:	2b00      	cmp	r3, #0
   2565c:	bfb4      	ite	lt
   2565e:	212d      	movlt	r1, #45	; 0x2d
   25660:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   25664:	4c25      	ldr	r4, [pc, #148]	; (256fc <_svfprintf_r+0x1b3c>)
   25666:	4b26      	ldr	r3, [pc, #152]	; (25700 <_svfprintf_r+0x1b40>)
   25668:	bfb8      	it	lt
   2566a:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   2566e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   25672:	f7fe bc79 	b.w	23f68 <_svfprintf_r+0x3a8>
   25676:	9b03      	ldr	r3, [sp, #12]
   25678:	9302      	str	r3, [sp, #8]
   2567a:	9305      	str	r3, [sp, #20]
   2567c:	2373      	movs	r3, #115	; 0x73
   2567e:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   25682:	9003      	str	r0, [sp, #12]
   25684:	900f      	str	r0, [sp, #60]	; 0x3c
   25686:	900d      	str	r0, [sp, #52]	; 0x34
   25688:	930b      	str	r3, [sp, #44]	; 0x2c
   2568a:	f7fe bc7a 	b.w	23f82 <_svfprintf_r+0x3c2>
   2568e:	2302      	movs	r3, #2
   25690:	9314      	str	r3, [sp, #80]	; 0x50
   25692:	e584      	b.n	2519e <_svfprintf_r+0x15de>
   25694:	9a03      	ldr	r2, [sp, #12]
   25696:	4313      	orrs	r3, r2
   25698:	d105      	bne.n	256a6 <_svfprintf_r+0x1ae6>
   2569a:	2301      	movs	r3, #1
   2569c:	2266      	movs	r2, #102	; 0x66
   2569e:	9302      	str	r3, [sp, #8]
   256a0:	920b      	str	r2, [sp, #44]	; 0x2c
   256a2:	9305      	str	r3, [sp, #20]
   256a4:	e666      	b.n	25374 <_svfprintf_r+0x17b4>
   256a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   256a8:	3301      	adds	r3, #1
   256aa:	441a      	add	r2, r3
   256ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   256b0:	9302      	str	r3, [sp, #8]
   256b2:	2366      	movs	r3, #102	; 0x66
   256b4:	9205      	str	r2, [sp, #20]
   256b6:	930b      	str	r3, [sp, #44]	; 0x2c
   256b8:	e65c      	b.n	25374 <_svfprintf_r+0x17b4>
   256ba:	9a08      	ldr	r2, [sp, #32]
   256bc:	f899 3001 	ldrb.w	r3, [r9, #1]
   256c0:	4689      	mov	r9, r1
   256c2:	f852 1b04 	ldr.w	r1, [r2], #4
   256c6:	9208      	str	r2, [sp, #32]
   256c8:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   256cc:	9103      	str	r1, [sp, #12]
   256ce:	f7fe bad3 	b.w	23c78 <_svfprintf_r+0xb8>
   256d2:	2300      	movs	r3, #0
   256d4:	930f      	str	r3, [sp, #60]	; 0x3c
   256d6:	930d      	str	r3, [sp, #52]	; 0x34
   256d8:	e796      	b.n	25608 <_svfprintf_r+0x1a48>
   256da:	230c      	movs	r3, #12
   256dc:	f8cb 3000 	str.w	r3, [fp]
   256e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   256e4:	9304      	str	r3, [sp, #16]
   256e6:	f7fe bb81 	b.w	23dec <_svfprintf_r+0x22c>
   256ea:	ee1b 2a10 	vmov	r2, s22
   256ee:	8993      	ldrh	r3, [r2, #12]
   256f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   256f4:	8193      	strh	r3, [r2, #12]
   256f6:	f7fe bec8 	b.w	2448a <_svfprintf_r+0x8ca>
   256fa:	bf00      	nop
   256fc:	20002c34 	.word	0x20002c34
   25700:	2000221c 	.word	0x2000221c

00025704 <__smakebuf_r>:
   25704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25708:	898b      	ldrh	r3, [r1, #12]
   2570a:	460c      	mov	r4, r1
   2570c:	0799      	lsls	r1, r3, #30
   2570e:	b096      	sub	sp, #88	; 0x58
   25710:	d508      	bpl.n	25724 <__smakebuf_r+0x20>
   25712:	f104 0343 	add.w	r3, r4, #67	; 0x43
   25716:	2201      	movs	r2, #1
   25718:	e9c4 3204 	strd	r3, r2, [r4, #16]
   2571c:	6023      	str	r3, [r4, #0]
   2571e:	b016      	add	sp, #88	; 0x58
   25720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   25728:	2900      	cmp	r1, #0
   2572a:	4606      	mov	r6, r0
   2572c:	db25      	blt.n	2577a <__smakebuf_r+0x76>
   2572e:	466a      	mov	r2, sp
   25730:	f000 fe34 	bl	2639c <_fstat_r>
   25734:	2800      	cmp	r0, #0
   25736:	db1f      	blt.n	25778 <__smakebuf_r+0x74>
   25738:	9d01      	ldr	r5, [sp, #4]
   2573a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   2573e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   25742:	fab5 f585 	clz	r5, r5
   25746:	f44f 6880 	mov.w	r8, #1024	; 0x400
   2574a:	096d      	lsrs	r5, r5, #5
   2574c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   25750:	4641      	mov	r1, r8
   25752:	4630      	mov	r0, r6
   25754:	f7fc fad0 	bl	21cf8 <_malloc_r>
   25758:	b1e0      	cbz	r0, 25794 <__smakebuf_r+0x90>
   2575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2575e:	f8c4 8014 	str.w	r8, [r4, #20]
   25762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   25766:	6020      	str	r0, [r4, #0]
   25768:	6120      	str	r0, [r4, #16]
   2576a:	81a3      	strh	r3, [r4, #12]
   2576c:	bb35      	cbnz	r5, 257bc <__smakebuf_r+0xb8>
   2576e:	433b      	orrs	r3, r7
   25770:	81a3      	strh	r3, [r4, #12]
   25772:	b016      	add	sp, #88	; 0x58
   25774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25778:	89a3      	ldrh	r3, [r4, #12]
   2577a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   2577e:	d019      	beq.n	257b4 <__smakebuf_r+0xb0>
   25780:	f04f 0840 	mov.w	r8, #64	; 0x40
   25784:	2500      	movs	r5, #0
   25786:	4641      	mov	r1, r8
   25788:	4630      	mov	r0, r6
   2578a:	462f      	mov	r7, r5
   2578c:	f7fc fab4 	bl	21cf8 <_malloc_r>
   25790:	2800      	cmp	r0, #0
   25792:	d1e2      	bne.n	2575a <__smakebuf_r+0x56>
   25794:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25798:	059a      	lsls	r2, r3, #22
   2579a:	d4c0      	bmi.n	2571e <__smakebuf_r+0x1a>
   2579c:	f023 0303 	bic.w	r3, r3, #3
   257a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   257a4:	f043 0302 	orr.w	r3, r3, #2
   257a8:	2101      	movs	r1, #1
   257aa:	e9c4 2104 	strd	r2, r1, [r4, #16]
   257ae:	81a3      	strh	r3, [r4, #12]
   257b0:	6022      	str	r2, [r4, #0]
   257b2:	e7b4      	b.n	2571e <__smakebuf_r+0x1a>
   257b4:	f44f 6880 	mov.w	r8, #1024	; 0x400
   257b8:	462f      	mov	r7, r5
   257ba:	e7c9      	b.n	25750 <__smakebuf_r+0x4c>
   257bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   257c0:	4630      	mov	r0, r6
   257c2:	f000 fe01 	bl	263c8 <_isatty_r>
   257c6:	b910      	cbnz	r0, 257ce <__smakebuf_r+0xca>
   257c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   257cc:	e7cf      	b.n	2576e <__smakebuf_r+0x6a>
   257ce:	89a3      	ldrh	r3, [r4, #12]
   257d0:	f023 0303 	bic.w	r3, r3, #3
   257d4:	f043 0301 	orr.w	r3, r3, #1
   257d8:	b21b      	sxth	r3, r3
   257da:	e7c8      	b.n	2576e <__smakebuf_r+0x6a>

000257dc <_putc_r>:
   257dc:	b570      	push	{r4, r5, r6, lr}
   257de:	460e      	mov	r6, r1
   257e0:	4614      	mov	r4, r2
   257e2:	4605      	mov	r5, r0
   257e4:	b110      	cbz	r0, 257ec <_putc_r+0x10>
   257e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
   257e8:	2b00      	cmp	r3, #0
   257ea:	d02f      	beq.n	2584c <_putc_r+0x70>
   257ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   257ee:	07d8      	lsls	r0, r3, #31
   257f0:	d402      	bmi.n	257f8 <_putc_r+0x1c>
   257f2:	89a3      	ldrh	r3, [r4, #12]
   257f4:	0599      	lsls	r1, r3, #22
   257f6:	d520      	bpl.n	2583a <_putc_r+0x5e>
   257f8:	68a3      	ldr	r3, [r4, #8]
   257fa:	3b01      	subs	r3, #1
   257fc:	2b00      	cmp	r3, #0
   257fe:	60a3      	str	r3, [r4, #8]
   25800:	da19      	bge.n	25836 <_putc_r+0x5a>
   25802:	69a2      	ldr	r2, [r4, #24]
   25804:	4293      	cmp	r3, r2
   25806:	db0f      	blt.n	25828 <_putc_r+0x4c>
   25808:	b2f0      	uxtb	r0, r6
   2580a:	280a      	cmp	r0, #10
   2580c:	d00c      	beq.n	25828 <_putc_r+0x4c>
   2580e:	6823      	ldr	r3, [r4, #0]
   25810:	1c5a      	adds	r2, r3, #1
   25812:	6022      	str	r2, [r4, #0]
   25814:	4605      	mov	r5, r0
   25816:	701e      	strb	r6, [r3, #0]
   25818:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2581a:	07da      	lsls	r2, r3, #31
   2581c:	d402      	bmi.n	25824 <_putc_r+0x48>
   2581e:	89a3      	ldrh	r3, [r4, #12]
   25820:	059b      	lsls	r3, r3, #22
   25822:	d50e      	bpl.n	25842 <_putc_r+0x66>
   25824:	4628      	mov	r0, r5
   25826:	bd70      	pop	{r4, r5, r6, pc}
   25828:	4628      	mov	r0, r5
   2582a:	4622      	mov	r2, r4
   2582c:	4631      	mov	r1, r6
   2582e:	f000 fd47 	bl	262c0 <__swbuf_r>
   25832:	4605      	mov	r5, r0
   25834:	e7f0      	b.n	25818 <_putc_r+0x3c>
   25836:	b2f0      	uxtb	r0, r6
   25838:	e7e9      	b.n	2580e <_putc_r+0x32>
   2583a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2583c:	f7fd ff44 	bl	236c8 <__retarget_lock_acquire_recursive>
   25840:	e7da      	b.n	257f8 <_putc_r+0x1c>
   25842:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25844:	f7fd ff42 	bl	236cc <__retarget_lock_release_recursive>
   25848:	4628      	mov	r0, r5
   2584a:	bd70      	pop	{r4, r5, r6, pc}
   2584c:	f7fd f80e 	bl	2286c <__sinit>
   25850:	e7cc      	b.n	257ec <_putc_r+0x10>
   25852:	bf00      	nop

00025854 <_Balloc>:
   25854:	6c43      	ldr	r3, [r0, #68]	; 0x44
   25856:	b570      	push	{r4, r5, r6, lr}
   25858:	4605      	mov	r5, r0
   2585a:	460c      	mov	r4, r1
   2585c:	b14b      	cbz	r3, 25872 <_Balloc+0x1e>
   2585e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   25862:	b180      	cbz	r0, 25886 <_Balloc+0x32>
   25864:	6802      	ldr	r2, [r0, #0]
   25866:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2586a:	2300      	movs	r3, #0
   2586c:	e9c0 3303 	strd	r3, r3, [r0, #12]
   25870:	bd70      	pop	{r4, r5, r6, pc}
   25872:	2221      	movs	r2, #33	; 0x21
   25874:	2104      	movs	r1, #4
   25876:	f000 fec7 	bl	26608 <_calloc_r>
   2587a:	4603      	mov	r3, r0
   2587c:	6468      	str	r0, [r5, #68]	; 0x44
   2587e:	2800      	cmp	r0, #0
   25880:	d1ed      	bne.n	2585e <_Balloc+0xa>
   25882:	2000      	movs	r0, #0
   25884:	bd70      	pop	{r4, r5, r6, pc}
   25886:	2101      	movs	r1, #1
   25888:	fa01 f604 	lsl.w	r6, r1, r4
   2588c:	1d72      	adds	r2, r6, #5
   2588e:	0092      	lsls	r2, r2, #2
   25890:	4628      	mov	r0, r5
   25892:	f000 feb9 	bl	26608 <_calloc_r>
   25896:	2800      	cmp	r0, #0
   25898:	d0f3      	beq.n	25882 <_Balloc+0x2e>
   2589a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   2589e:	e7e4      	b.n	2586a <_Balloc+0x16>

000258a0 <_Bfree>:
   258a0:	b131      	cbz	r1, 258b0 <_Bfree+0x10>
   258a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   258a4:	684a      	ldr	r2, [r1, #4]
   258a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   258aa:	6008      	str	r0, [r1, #0]
   258ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   258b0:	4770      	bx	lr
   258b2:	bf00      	nop

000258b4 <__multadd>:
   258b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   258b8:	690e      	ldr	r6, [r1, #16]
   258ba:	4680      	mov	r8, r0
   258bc:	460f      	mov	r7, r1
   258be:	461d      	mov	r5, r3
   258c0:	f101 0e14 	add.w	lr, r1, #20
   258c4:	2000      	movs	r0, #0
   258c6:	f8de 1000 	ldr.w	r1, [lr]
   258ca:	b28c      	uxth	r4, r1
   258cc:	fb02 5304 	mla	r3, r2, r4, r5
   258d0:	0c09      	lsrs	r1, r1, #16
   258d2:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   258d6:	fb02 cc01 	mla	ip, r2, r1, ip
   258da:	3001      	adds	r0, #1
   258dc:	b29c      	uxth	r4, r3
   258de:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   258e2:	4286      	cmp	r6, r0
   258e4:	f84e 4b04 	str.w	r4, [lr], #4
   258e8:	ea4f 451c 	mov.w	r5, ip, lsr #16
   258ec:	dceb      	bgt.n	258c6 <__multadd+0x12>
   258ee:	b13d      	cbz	r5, 25900 <__multadd+0x4c>
   258f0:	68bb      	ldr	r3, [r7, #8]
   258f2:	42b3      	cmp	r3, r6
   258f4:	dd07      	ble.n	25906 <__multadd+0x52>
   258f6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   258fa:	3601      	adds	r6, #1
   258fc:	615d      	str	r5, [r3, #20]
   258fe:	613e      	str	r6, [r7, #16]
   25900:	4638      	mov	r0, r7
   25902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25906:	6879      	ldr	r1, [r7, #4]
   25908:	4640      	mov	r0, r8
   2590a:	3101      	adds	r1, #1
   2590c:	f7ff ffa2 	bl	25854 <_Balloc>
   25910:	4604      	mov	r4, r0
   25912:	b1b0      	cbz	r0, 25942 <__multadd+0x8e>
   25914:	693a      	ldr	r2, [r7, #16]
   25916:	3202      	adds	r2, #2
   25918:	f107 010c 	add.w	r1, r7, #12
   2591c:	0092      	lsls	r2, r2, #2
   2591e:	300c      	adds	r0, #12
   25920:	f7f1 fce6 	bl	172f0 <memcpy>
   25924:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   25928:	687a      	ldr	r2, [r7, #4]
   2592a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2592e:	6039      	str	r1, [r7, #0]
   25930:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   25934:	4627      	mov	r7, r4
   25936:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   2593a:	3601      	adds	r6, #1
   2593c:	615d      	str	r5, [r3, #20]
   2593e:	613e      	str	r6, [r7, #16]
   25940:	e7de      	b.n	25900 <__multadd+0x4c>
   25942:	4b03      	ldr	r3, [pc, #12]	; (25950 <__multadd+0x9c>)
   25944:	4803      	ldr	r0, [pc, #12]	; (25954 <__multadd+0xa0>)
   25946:	4622      	mov	r2, r4
   25948:	21ba      	movs	r1, #186	; 0xba
   2594a:	f000 fe3d 	bl	265c8 <__assert_func>
   2594e:	bf00      	nop
   25950:	20002a18 	.word	0x20002a18
   25954:	20002a2c 	.word	0x20002a2c

00025958 <__hi0bits>:
   25958:	0c03      	lsrs	r3, r0, #16
   2595a:	041b      	lsls	r3, r3, #16
   2595c:	b9d3      	cbnz	r3, 25994 <__hi0bits+0x3c>
   2595e:	0400      	lsls	r0, r0, #16
   25960:	2310      	movs	r3, #16
   25962:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   25966:	bf04      	itt	eq
   25968:	0200      	lsleq	r0, r0, #8
   2596a:	3308      	addeq	r3, #8
   2596c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   25970:	bf04      	itt	eq
   25972:	0100      	lsleq	r0, r0, #4
   25974:	3304      	addeq	r3, #4
   25976:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   2597a:	bf04      	itt	eq
   2597c:	0080      	lsleq	r0, r0, #2
   2597e:	3302      	addeq	r3, #2
   25980:	2800      	cmp	r0, #0
   25982:	db05      	blt.n	25990 <__hi0bits+0x38>
   25984:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   25988:	f103 0301 	add.w	r3, r3, #1
   2598c:	bf08      	it	eq
   2598e:	2320      	moveq	r3, #32
   25990:	4618      	mov	r0, r3
   25992:	4770      	bx	lr
   25994:	2300      	movs	r3, #0
   25996:	e7e4      	b.n	25962 <__hi0bits+0xa>

00025998 <__lo0bits>:
   25998:	6803      	ldr	r3, [r0, #0]
   2599a:	f013 0207 	ands.w	r2, r3, #7
   2599e:	d008      	beq.n	259b2 <__lo0bits+0x1a>
   259a0:	07d9      	lsls	r1, r3, #31
   259a2:	d41f      	bmi.n	259e4 <__lo0bits+0x4c>
   259a4:	079a      	lsls	r2, r3, #30
   259a6:	d522      	bpl.n	259ee <__lo0bits+0x56>
   259a8:	085b      	lsrs	r3, r3, #1
   259aa:	6003      	str	r3, [r0, #0]
   259ac:	2201      	movs	r2, #1
   259ae:	4610      	mov	r0, r2
   259b0:	4770      	bx	lr
   259b2:	b299      	uxth	r1, r3
   259b4:	b909      	cbnz	r1, 259ba <__lo0bits+0x22>
   259b6:	0c1b      	lsrs	r3, r3, #16
   259b8:	2210      	movs	r2, #16
   259ba:	b2d9      	uxtb	r1, r3
   259bc:	b909      	cbnz	r1, 259c2 <__lo0bits+0x2a>
   259be:	3208      	adds	r2, #8
   259c0:	0a1b      	lsrs	r3, r3, #8
   259c2:	0719      	lsls	r1, r3, #28
   259c4:	bf04      	itt	eq
   259c6:	091b      	lsreq	r3, r3, #4
   259c8:	3204      	addeq	r2, #4
   259ca:	0799      	lsls	r1, r3, #30
   259cc:	bf04      	itt	eq
   259ce:	089b      	lsreq	r3, r3, #2
   259d0:	3202      	addeq	r2, #2
   259d2:	07d9      	lsls	r1, r3, #31
   259d4:	d403      	bmi.n	259de <__lo0bits+0x46>
   259d6:	085b      	lsrs	r3, r3, #1
   259d8:	f102 0201 	add.w	r2, r2, #1
   259dc:	d005      	beq.n	259ea <__lo0bits+0x52>
   259de:	6003      	str	r3, [r0, #0]
   259e0:	4610      	mov	r0, r2
   259e2:	4770      	bx	lr
   259e4:	2200      	movs	r2, #0
   259e6:	4610      	mov	r0, r2
   259e8:	4770      	bx	lr
   259ea:	2220      	movs	r2, #32
   259ec:	e7df      	b.n	259ae <__lo0bits+0x16>
   259ee:	089b      	lsrs	r3, r3, #2
   259f0:	2202      	movs	r2, #2
   259f2:	6003      	str	r3, [r0, #0]
   259f4:	4610      	mov	r0, r2
   259f6:	4770      	bx	lr

000259f8 <__i2b>:
   259f8:	b538      	push	{r3, r4, r5, lr}
   259fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
   259fc:	4604      	mov	r4, r0
   259fe:	460d      	mov	r5, r1
   25a00:	b14b      	cbz	r3, 25a16 <__i2b+0x1e>
   25a02:	6858      	ldr	r0, [r3, #4]
   25a04:	b1b0      	cbz	r0, 25a34 <__i2b+0x3c>
   25a06:	6802      	ldr	r2, [r0, #0]
   25a08:	605a      	str	r2, [r3, #4]
   25a0a:	2200      	movs	r2, #0
   25a0c:	2301      	movs	r3, #1
   25a0e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   25a12:	60c2      	str	r2, [r0, #12]
   25a14:	bd38      	pop	{r3, r4, r5, pc}
   25a16:	2221      	movs	r2, #33	; 0x21
   25a18:	2104      	movs	r1, #4
   25a1a:	f000 fdf5 	bl	26608 <_calloc_r>
   25a1e:	4603      	mov	r3, r0
   25a20:	6460      	str	r0, [r4, #68]	; 0x44
   25a22:	2800      	cmp	r0, #0
   25a24:	d1ed      	bne.n	25a02 <__i2b+0xa>
   25a26:	4b09      	ldr	r3, [pc, #36]	; (25a4c <__i2b+0x54>)
   25a28:	4809      	ldr	r0, [pc, #36]	; (25a50 <__i2b+0x58>)
   25a2a:	2200      	movs	r2, #0
   25a2c:	f240 1145 	movw	r1, #325	; 0x145
   25a30:	f000 fdca 	bl	265c8 <__assert_func>
   25a34:	221c      	movs	r2, #28
   25a36:	2101      	movs	r1, #1
   25a38:	4620      	mov	r0, r4
   25a3a:	f000 fde5 	bl	26608 <_calloc_r>
   25a3e:	2800      	cmp	r0, #0
   25a40:	d0f1      	beq.n	25a26 <__i2b+0x2e>
   25a42:	2201      	movs	r2, #1
   25a44:	2302      	movs	r3, #2
   25a46:	e9c0 2301 	strd	r2, r3, [r0, #4]
   25a4a:	e7de      	b.n	25a0a <__i2b+0x12>
   25a4c:	20002a18 	.word	0x20002a18
   25a50:	20002a2c 	.word	0x20002a2c

00025a54 <__multiply>:
   25a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a58:	690e      	ldr	r6, [r1, #16]
   25a5a:	6915      	ldr	r5, [r2, #16]
   25a5c:	42ae      	cmp	r6, r5
   25a5e:	b085      	sub	sp, #20
   25a60:	4688      	mov	r8, r1
   25a62:	4614      	mov	r4, r2
   25a64:	db05      	blt.n	25a72 <__multiply+0x1e>
   25a66:	462a      	mov	r2, r5
   25a68:	4623      	mov	r3, r4
   25a6a:	4635      	mov	r5, r6
   25a6c:	460c      	mov	r4, r1
   25a6e:	4616      	mov	r6, r2
   25a70:	4698      	mov	r8, r3
   25a72:	68a3      	ldr	r3, [r4, #8]
   25a74:	6861      	ldr	r1, [r4, #4]
   25a76:	19af      	adds	r7, r5, r6
   25a78:	42bb      	cmp	r3, r7
   25a7a:	bfb8      	it	lt
   25a7c:	3101      	addlt	r1, #1
   25a7e:	f7ff fee9 	bl	25854 <_Balloc>
   25a82:	9001      	str	r0, [sp, #4]
   25a84:	2800      	cmp	r0, #0
   25a86:	f000 8087 	beq.w	25b98 <__multiply+0x144>
   25a8a:	9b01      	ldr	r3, [sp, #4]
   25a8c:	f103 0914 	add.w	r9, r3, #20
   25a90:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   25a94:	45d1      	cmp	r9, sl
   25a96:	d205      	bcs.n	25aa4 <__multiply+0x50>
   25a98:	464b      	mov	r3, r9
   25a9a:	2200      	movs	r2, #0
   25a9c:	f843 2b04 	str.w	r2, [r3], #4
   25aa0:	459a      	cmp	sl, r3
   25aa2:	d8fb      	bhi.n	25a9c <__multiply+0x48>
   25aa4:	f108 0814 	add.w	r8, r8, #20
   25aa8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   25aac:	f104 0314 	add.w	r3, r4, #20
   25ab0:	45d8      	cmp	r8, fp
   25ab2:	461a      	mov	r2, r3
   25ab4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   25ab8:	d25f      	bcs.n	25b7a <__multiply+0x126>
   25aba:	1b2b      	subs	r3, r5, r4
   25abc:	3b15      	subs	r3, #21
   25abe:	f023 0303 	bic.w	r3, r3, #3
   25ac2:	3304      	adds	r3, #4
   25ac4:	3415      	adds	r4, #21
   25ac6:	42a5      	cmp	r5, r4
   25ac8:	bf38      	it	cc
   25aca:	2304      	movcc	r3, #4
   25acc:	e9cd a702 	strd	sl, r7, [sp, #8]
   25ad0:	46ac      	mov	ip, r5
   25ad2:	461f      	mov	r7, r3
   25ad4:	4692      	mov	sl, r2
   25ad6:	e005      	b.n	25ae4 <__multiply+0x90>
   25ad8:	0c09      	lsrs	r1, r1, #16
   25ada:	d129      	bne.n	25b30 <__multiply+0xdc>
   25adc:	45c3      	cmp	fp, r8
   25ade:	f109 0904 	add.w	r9, r9, #4
   25ae2:	d948      	bls.n	25b76 <__multiply+0x122>
   25ae4:	f858 1b04 	ldr.w	r1, [r8], #4
   25ae8:	b28d      	uxth	r5, r1
   25aea:	2d00      	cmp	r5, #0
   25aec:	d0f4      	beq.n	25ad8 <__multiply+0x84>
   25aee:	4656      	mov	r6, sl
   25af0:	464c      	mov	r4, r9
   25af2:	2300      	movs	r3, #0
   25af4:	f856 1b04 	ldr.w	r1, [r6], #4
   25af8:	6822      	ldr	r2, [r4, #0]
   25afa:	fa1f fe81 	uxth.w	lr, r1
   25afe:	b290      	uxth	r0, r2
   25b00:	0c09      	lsrs	r1, r1, #16
   25b02:	fb05 000e 	mla	r0, r5, lr, r0
   25b06:	0c12      	lsrs	r2, r2, #16
   25b08:	4403      	add	r3, r0
   25b0a:	fb05 2201 	mla	r2, r5, r1, r2
   25b0e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   25b12:	b29b      	uxth	r3, r3
   25b14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25b18:	45b4      	cmp	ip, r6
   25b1a:	f844 3b04 	str.w	r3, [r4], #4
   25b1e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   25b22:	d8e7      	bhi.n	25af4 <__multiply+0xa0>
   25b24:	f849 3007 	str.w	r3, [r9, r7]
   25b28:	f858 1c04 	ldr.w	r1, [r8, #-4]
   25b2c:	0c09      	lsrs	r1, r1, #16
   25b2e:	d0d5      	beq.n	25adc <__multiply+0x88>
   25b30:	f8d9 3000 	ldr.w	r3, [r9]
   25b34:	4650      	mov	r0, sl
   25b36:	461a      	mov	r2, r3
   25b38:	464c      	mov	r4, r9
   25b3a:	2600      	movs	r6, #0
   25b3c:	8805      	ldrh	r5, [r0, #0]
   25b3e:	0c12      	lsrs	r2, r2, #16
   25b40:	fb01 2205 	mla	r2, r1, r5, r2
   25b44:	4416      	add	r6, r2
   25b46:	b29b      	uxth	r3, r3
   25b48:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   25b4c:	f844 3b04 	str.w	r3, [r4], #4
   25b50:	f850 5b04 	ldr.w	r5, [r0], #4
   25b54:	6822      	ldr	r2, [r4, #0]
   25b56:	0c2d      	lsrs	r5, r5, #16
   25b58:	b293      	uxth	r3, r2
   25b5a:	fb01 3305 	mla	r3, r1, r5, r3
   25b5e:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   25b62:	4584      	cmp	ip, r0
   25b64:	ea4f 4613 	mov.w	r6, r3, lsr #16
   25b68:	d8e8      	bhi.n	25b3c <__multiply+0xe8>
   25b6a:	45c3      	cmp	fp, r8
   25b6c:	f849 3007 	str.w	r3, [r9, r7]
   25b70:	f109 0904 	add.w	r9, r9, #4
   25b74:	d8b6      	bhi.n	25ae4 <__multiply+0x90>
   25b76:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   25b7a:	2f00      	cmp	r7, #0
   25b7c:	dc02      	bgt.n	25b84 <__multiply+0x130>
   25b7e:	e005      	b.n	25b8c <__multiply+0x138>
   25b80:	3f01      	subs	r7, #1
   25b82:	d003      	beq.n	25b8c <__multiply+0x138>
   25b84:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   25b88:	2b00      	cmp	r3, #0
   25b8a:	d0f9      	beq.n	25b80 <__multiply+0x12c>
   25b8c:	9b01      	ldr	r3, [sp, #4]
   25b8e:	4618      	mov	r0, r3
   25b90:	611f      	str	r7, [r3, #16]
   25b92:	b005      	add	sp, #20
   25b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b98:	4b03      	ldr	r3, [pc, #12]	; (25ba8 <__multiply+0x154>)
   25b9a:	4804      	ldr	r0, [pc, #16]	; (25bac <__multiply+0x158>)
   25b9c:	9a01      	ldr	r2, [sp, #4]
   25b9e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   25ba2:	f000 fd11 	bl	265c8 <__assert_func>
   25ba6:	bf00      	nop
   25ba8:	20002a18 	.word	0x20002a18
   25bac:	20002a2c 	.word	0x20002a2c

00025bb0 <__pow5mult>:
   25bb0:	f012 0303 	ands.w	r3, r2, #3
   25bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25bb8:	4614      	mov	r4, r2
   25bba:	4606      	mov	r6, r0
   25bbc:	d132      	bne.n	25c24 <__pow5mult+0x74>
   25bbe:	460d      	mov	r5, r1
   25bc0:	10a4      	asrs	r4, r4, #2
   25bc2:	d020      	beq.n	25c06 <__pow5mult+0x56>
   25bc4:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   25bc8:	f1b8 0f00 	cmp.w	r8, #0
   25bcc:	d033      	beq.n	25c36 <__pow5mult+0x86>
   25bce:	07e3      	lsls	r3, r4, #31
   25bd0:	f04f 0700 	mov.w	r7, #0
   25bd4:	d407      	bmi.n	25be6 <__pow5mult+0x36>
   25bd6:	1064      	asrs	r4, r4, #1
   25bd8:	d015      	beq.n	25c06 <__pow5mult+0x56>
   25bda:	f8d8 0000 	ldr.w	r0, [r8]
   25bde:	b1a8      	cbz	r0, 25c0c <__pow5mult+0x5c>
   25be0:	4680      	mov	r8, r0
   25be2:	07e3      	lsls	r3, r4, #31
   25be4:	d5f7      	bpl.n	25bd6 <__pow5mult+0x26>
   25be6:	4642      	mov	r2, r8
   25be8:	4629      	mov	r1, r5
   25bea:	4630      	mov	r0, r6
   25bec:	f7ff ff32 	bl	25a54 <__multiply>
   25bf0:	b1b5      	cbz	r5, 25c20 <__pow5mult+0x70>
   25bf2:	6869      	ldr	r1, [r5, #4]
   25bf4:	6c73      	ldr	r3, [r6, #68]	; 0x44
   25bf6:	1064      	asrs	r4, r4, #1
   25bf8:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   25bfc:	602a      	str	r2, [r5, #0]
   25bfe:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   25c02:	4605      	mov	r5, r0
   25c04:	d1e9      	bne.n	25bda <__pow5mult+0x2a>
   25c06:	4628      	mov	r0, r5
   25c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25c0c:	4642      	mov	r2, r8
   25c0e:	4641      	mov	r1, r8
   25c10:	4630      	mov	r0, r6
   25c12:	f7ff ff1f 	bl	25a54 <__multiply>
   25c16:	f8c8 0000 	str.w	r0, [r8]
   25c1a:	6007      	str	r7, [r0, #0]
   25c1c:	4680      	mov	r8, r0
   25c1e:	e7e0      	b.n	25be2 <__pow5mult+0x32>
   25c20:	4605      	mov	r5, r0
   25c22:	e7d8      	b.n	25bd6 <__pow5mult+0x26>
   25c24:	3b01      	subs	r3, #1
   25c26:	4a0f      	ldr	r2, [pc, #60]	; (25c64 <__pow5mult+0xb4>)
   25c28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   25c2c:	2300      	movs	r3, #0
   25c2e:	f7ff fe41 	bl	258b4 <__multadd>
   25c32:	4605      	mov	r5, r0
   25c34:	e7c4      	b.n	25bc0 <__pow5mult+0x10>
   25c36:	2101      	movs	r1, #1
   25c38:	4630      	mov	r0, r6
   25c3a:	f7ff fe0b 	bl	25854 <_Balloc>
   25c3e:	4680      	mov	r8, r0
   25c40:	b140      	cbz	r0, 25c54 <__pow5mult+0xa4>
   25c42:	2301      	movs	r3, #1
   25c44:	f240 2271 	movw	r2, #625	; 0x271
   25c48:	e9c0 3204 	strd	r3, r2, [r0, #16]
   25c4c:	2300      	movs	r3, #0
   25c4e:	6430      	str	r0, [r6, #64]	; 0x40
   25c50:	6003      	str	r3, [r0, #0]
   25c52:	e7bc      	b.n	25bce <__pow5mult+0x1e>
   25c54:	4b04      	ldr	r3, [pc, #16]	; (25c68 <__pow5mult+0xb8>)
   25c56:	4805      	ldr	r0, [pc, #20]	; (25c6c <__pow5mult+0xbc>)
   25c58:	4642      	mov	r2, r8
   25c5a:	f240 1145 	movw	r1, #325	; 0x145
   25c5e:	f000 fcb3 	bl	265c8 <__assert_func>
   25c62:	bf00      	nop
   25c64:	20003b04 	.word	0x20003b04
   25c68:	20002a18 	.word	0x20002a18
   25c6c:	20002a2c 	.word	0x20002a2c

00025c70 <__lshift>:
   25c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25c74:	460d      	mov	r5, r1
   25c76:	4614      	mov	r4, r2
   25c78:	692f      	ldr	r7, [r5, #16]
   25c7a:	68ab      	ldr	r3, [r5, #8]
   25c7c:	6849      	ldr	r1, [r1, #4]
   25c7e:	eb07 1762 	add.w	r7, r7, r2, asr #5
   25c82:	1c7e      	adds	r6, r7, #1
   25c84:	429e      	cmp	r6, r3
   25c86:	4680      	mov	r8, r0
   25c88:	ea4f 1962 	mov.w	r9, r2, asr #5
   25c8c:	dd04      	ble.n	25c98 <__lshift+0x28>
   25c8e:	005b      	lsls	r3, r3, #1
   25c90:	429e      	cmp	r6, r3
   25c92:	f101 0101 	add.w	r1, r1, #1
   25c96:	dcfa      	bgt.n	25c8e <__lshift+0x1e>
   25c98:	4640      	mov	r0, r8
   25c9a:	f7ff fddb 	bl	25854 <_Balloc>
   25c9e:	4684      	mov	ip, r0
   25ca0:	2800      	cmp	r0, #0
   25ca2:	d052      	beq.n	25d4a <__lshift+0xda>
   25ca4:	f1b9 0f00 	cmp.w	r9, #0
   25ca8:	f100 0214 	add.w	r2, r0, #20
   25cac:	dd0e      	ble.n	25ccc <__lshift+0x5c>
   25cae:	f109 0105 	add.w	r1, r9, #5
   25cb2:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   25cb6:	4613      	mov	r3, r2
   25cb8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   25cbc:	2000      	movs	r0, #0
   25cbe:	f843 0b04 	str.w	r0, [r3], #4
   25cc2:	428b      	cmp	r3, r1
   25cc4:	d1fb      	bne.n	25cbe <__lshift+0x4e>
   25cc6:	f1ae 0314 	sub.w	r3, lr, #20
   25cca:	441a      	add	r2, r3
   25ccc:	6929      	ldr	r1, [r5, #16]
   25cce:	f105 0314 	add.w	r3, r5, #20
   25cd2:	f014 0e1f 	ands.w	lr, r4, #31
   25cd6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   25cda:	d02e      	beq.n	25d3a <__lshift+0xca>
   25cdc:	f1ce 0920 	rsb	r9, lr, #32
   25ce0:	4610      	mov	r0, r2
   25ce2:	f04f 0a00 	mov.w	sl, #0
   25ce6:	681c      	ldr	r4, [r3, #0]
   25ce8:	fa04 f40e 	lsl.w	r4, r4, lr
   25cec:	ea44 040a 	orr.w	r4, r4, sl
   25cf0:	f840 4b04 	str.w	r4, [r0], #4
   25cf4:	f853 4b04 	ldr.w	r4, [r3], #4
   25cf8:	4299      	cmp	r1, r3
   25cfa:	fa24 fa09 	lsr.w	sl, r4, r9
   25cfe:	d8f2      	bhi.n	25ce6 <__lshift+0x76>
   25d00:	1b4b      	subs	r3, r1, r5
   25d02:	3b15      	subs	r3, #21
   25d04:	f023 0303 	bic.w	r3, r3, #3
   25d08:	3304      	adds	r3, #4
   25d0a:	f105 0015 	add.w	r0, r5, #21
   25d0e:	4281      	cmp	r1, r0
   25d10:	bf38      	it	cc
   25d12:	2304      	movcc	r3, #4
   25d14:	f1ba 0f00 	cmp.w	sl, #0
   25d18:	bf18      	it	ne
   25d1a:	4637      	movne	r7, r6
   25d1c:	f842 a003 	str.w	sl, [r2, r3]
   25d20:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   25d24:	686a      	ldr	r2, [r5, #4]
   25d26:	f8cc 7010 	str.w	r7, [ip, #16]
   25d2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   25d2e:	6029      	str	r1, [r5, #0]
   25d30:	4660      	mov	r0, ip
   25d32:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   25d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25d3a:	3a04      	subs	r2, #4
   25d3c:	f853 0b04 	ldr.w	r0, [r3], #4
   25d40:	f842 0f04 	str.w	r0, [r2, #4]!
   25d44:	4299      	cmp	r1, r3
   25d46:	d8f9      	bhi.n	25d3c <__lshift+0xcc>
   25d48:	e7ea      	b.n	25d20 <__lshift+0xb0>
   25d4a:	4b03      	ldr	r3, [pc, #12]	; (25d58 <__lshift+0xe8>)
   25d4c:	4803      	ldr	r0, [pc, #12]	; (25d5c <__lshift+0xec>)
   25d4e:	4662      	mov	r2, ip
   25d50:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   25d54:	f000 fc38 	bl	265c8 <__assert_func>
   25d58:	20002a18 	.word	0x20002a18
   25d5c:	20002a2c 	.word	0x20002a2c

00025d60 <__mcmp>:
   25d60:	690b      	ldr	r3, [r1, #16]
   25d62:	4684      	mov	ip, r0
   25d64:	6900      	ldr	r0, [r0, #16]
   25d66:	1ac0      	subs	r0, r0, r3
   25d68:	d116      	bne.n	25d98 <__mcmp+0x38>
   25d6a:	f10c 0c14 	add.w	ip, ip, #20
   25d6e:	3114      	adds	r1, #20
   25d70:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   25d74:	b410      	push	{r4}
   25d76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   25d7a:	e001      	b.n	25d80 <__mcmp+0x20>
   25d7c:	4594      	cmp	ip, r2
   25d7e:	d208      	bcs.n	25d92 <__mcmp+0x32>
   25d80:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   25d84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   25d88:	428c      	cmp	r4, r1
   25d8a:	d0f7      	beq.n	25d7c <__mcmp+0x1c>
   25d8c:	d205      	bcs.n	25d9a <__mcmp+0x3a>
   25d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d92:	f85d 4b04 	ldr.w	r4, [sp], #4
   25d96:	4770      	bx	lr
   25d98:	4770      	bx	lr
   25d9a:	2001      	movs	r0, #1
   25d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
   25da0:	4770      	bx	lr
   25da2:	bf00      	nop

00025da4 <__mdiff>:
   25da4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25da8:	690f      	ldr	r7, [r1, #16]
   25daa:	6913      	ldr	r3, [r2, #16]
   25dac:	1aff      	subs	r7, r7, r3
   25dae:	2f00      	cmp	r7, #0
   25db0:	460e      	mov	r6, r1
   25db2:	4690      	mov	r8, r2
   25db4:	d17f      	bne.n	25eb6 <__mdiff+0x112>
   25db6:	f101 0514 	add.w	r5, r1, #20
   25dba:	3214      	adds	r2, #20
   25dbc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   25dc0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   25dc4:	e001      	b.n	25dca <__mdiff+0x26>
   25dc6:	429d      	cmp	r5, r3
   25dc8:	d278      	bcs.n	25ebc <__mdiff+0x118>
   25dca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   25dce:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   25dd2:	42a1      	cmp	r1, r4
   25dd4:	d0f7      	beq.n	25dc6 <__mdiff+0x22>
   25dd6:	d369      	bcc.n	25eac <__mdiff+0x108>
   25dd8:	6871      	ldr	r1, [r6, #4]
   25dda:	f7ff fd3b 	bl	25854 <_Balloc>
   25dde:	4681      	mov	r9, r0
   25de0:	2800      	cmp	r0, #0
   25de2:	d077      	beq.n	25ed4 <__mdiff+0x130>
   25de4:	6935      	ldr	r5, [r6, #16]
   25de6:	f8d8 2010 	ldr.w	r2, [r8, #16]
   25dea:	60c7      	str	r7, [r0, #12]
   25dec:	f108 0e14 	add.w	lr, r8, #20
   25df0:	f106 0014 	add.w	r0, r6, #20
   25df4:	f109 0a14 	add.w	sl, r9, #20
   25df8:	f106 0110 	add.w	r1, r6, #16
   25dfc:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   25e00:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   25e04:	4656      	mov	r6, sl
   25e06:	f04f 0c00 	mov.w	ip, #0
   25e0a:	f85e 4b04 	ldr.w	r4, [lr], #4
   25e0e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   25e12:	b2a3      	uxth	r3, r4
   25e14:	fa1c fc8b 	uxtah	ip, ip, fp
   25e18:	ebac 0303 	sub.w	r3, ip, r3
   25e1c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   25e20:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   25e24:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   25e28:	b29b      	uxth	r3, r3
   25e2a:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   25e2e:	4572      	cmp	r2, lr
   25e30:	f846 3b04 	str.w	r3, [r6], #4
   25e34:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   25e38:	d8e7      	bhi.n	25e0a <__mdiff+0x66>
   25e3a:	eba2 0108 	sub.w	r1, r2, r8
   25e3e:	3915      	subs	r1, #21
   25e40:	f108 0815 	add.w	r8, r8, #21
   25e44:	4542      	cmp	r2, r8
   25e46:	f021 0403 	bic.w	r4, r1, #3
   25e4a:	f104 0404 	add.w	r4, r4, #4
   25e4e:	bf38      	it	cc
   25e50:	2404      	movcc	r4, #4
   25e52:	4420      	add	r0, r4
   25e54:	f021 0203 	bic.w	r2, r1, #3
   25e58:	bf38      	it	cc
   25e5a:	2200      	movcc	r2, #0
   25e5c:	4287      	cmp	r7, r0
   25e5e:	4452      	add	r2, sl
   25e60:	4454      	add	r4, sl
   25e62:	d918      	bls.n	25e96 <__mdiff+0xf2>
   25e64:	4626      	mov	r6, r4
   25e66:	4601      	mov	r1, r0
   25e68:	f851 3b04 	ldr.w	r3, [r1], #4
   25e6c:	fa1c fc83 	uxtah	ip, ip, r3
   25e70:	ea4f 422c 	mov.w	r2, ip, asr #16
   25e74:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   25e78:	fa1f fc8c 	uxth.w	ip, ip
   25e7c:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   25e80:	428f      	cmp	r7, r1
   25e82:	f846 3b04 	str.w	r3, [r6], #4
   25e86:	ea4f 4c22 	mov.w	ip, r2, asr #16
   25e8a:	d8ed      	bhi.n	25e68 <__mdiff+0xc4>
   25e8c:	3f01      	subs	r7, #1
   25e8e:	1a3f      	subs	r7, r7, r0
   25e90:	f027 0703 	bic.w	r7, r7, #3
   25e94:	19e2      	adds	r2, r4, r7
   25e96:	b923      	cbnz	r3, 25ea2 <__mdiff+0xfe>
   25e98:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   25e9c:	3d01      	subs	r5, #1
   25e9e:	2b00      	cmp	r3, #0
   25ea0:	d0fa      	beq.n	25e98 <__mdiff+0xf4>
   25ea2:	f8c9 5010 	str.w	r5, [r9, #16]
   25ea6:	4648      	mov	r0, r9
   25ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25eac:	4633      	mov	r3, r6
   25eae:	2701      	movs	r7, #1
   25eb0:	4646      	mov	r6, r8
   25eb2:	4698      	mov	r8, r3
   25eb4:	e790      	b.n	25dd8 <__mdiff+0x34>
   25eb6:	dbf9      	blt.n	25eac <__mdiff+0x108>
   25eb8:	2700      	movs	r7, #0
   25eba:	e78d      	b.n	25dd8 <__mdiff+0x34>
   25ebc:	2100      	movs	r1, #0
   25ebe:	f7ff fcc9 	bl	25854 <_Balloc>
   25ec2:	4681      	mov	r9, r0
   25ec4:	b168      	cbz	r0, 25ee2 <__mdiff+0x13e>
   25ec6:	2201      	movs	r2, #1
   25ec8:	2300      	movs	r3, #0
   25eca:	e9c9 2304 	strd	r2, r3, [r9, #16]
   25ece:	4648      	mov	r0, r9
   25ed0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ed4:	4b06      	ldr	r3, [pc, #24]	; (25ef0 <__mdiff+0x14c>)
   25ed6:	4807      	ldr	r0, [pc, #28]	; (25ef4 <__mdiff+0x150>)
   25ed8:	464a      	mov	r2, r9
   25eda:	f240 2145 	movw	r1, #581	; 0x245
   25ede:	f000 fb73 	bl	265c8 <__assert_func>
   25ee2:	4b03      	ldr	r3, [pc, #12]	; (25ef0 <__mdiff+0x14c>)
   25ee4:	4803      	ldr	r0, [pc, #12]	; (25ef4 <__mdiff+0x150>)
   25ee6:	464a      	mov	r2, r9
   25ee8:	f240 2137 	movw	r1, #567	; 0x237
   25eec:	f000 fb6c 	bl	265c8 <__assert_func>
   25ef0:	20002a18 	.word	0x20002a18
   25ef4:	20002a2c 	.word	0x20002a2c

00025ef8 <__d2b>:
   25ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25efc:	4688      	mov	r8, r1
   25efe:	b083      	sub	sp, #12
   25f00:	2101      	movs	r1, #1
   25f02:	ec57 6b10 	vmov	r6, r7, d0
   25f06:	4615      	mov	r5, r2
   25f08:	f7ff fca4 	bl	25854 <_Balloc>
   25f0c:	4604      	mov	r4, r0
   25f0e:	2800      	cmp	r0, #0
   25f10:	d051      	beq.n	25fb6 <__d2b+0xbe>
   25f12:	f3c7 590a 	ubfx	r9, r7, #20, #11
   25f16:	f3c7 0313 	ubfx	r3, r7, #0, #20
   25f1a:	f1b9 0f00 	cmp.w	r9, #0
   25f1e:	d001      	beq.n	25f24 <__d2b+0x2c>
   25f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   25f24:	2e00      	cmp	r6, #0
   25f26:	9301      	str	r3, [sp, #4]
   25f28:	d118      	bne.n	25f5c <__d2b+0x64>
   25f2a:	a801      	add	r0, sp, #4
   25f2c:	f7ff fd34 	bl	25998 <__lo0bits>
   25f30:	9a01      	ldr	r2, [sp, #4]
   25f32:	6162      	str	r2, [r4, #20]
   25f34:	2201      	movs	r2, #1
   25f36:	f100 0320 	add.w	r3, r0, #32
   25f3a:	6122      	str	r2, [r4, #16]
   25f3c:	f1b9 0f00 	cmp.w	r9, #0
   25f40:	d025      	beq.n	25f8e <__d2b+0x96>
   25f42:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   25f46:	eb09 0203 	add.w	r2, r9, r3
   25f4a:	4620      	mov	r0, r4
   25f4c:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   25f50:	f8c8 2000 	str.w	r2, [r8]
   25f54:	602b      	str	r3, [r5, #0]
   25f56:	b003      	add	sp, #12
   25f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25f5c:	4668      	mov	r0, sp
   25f5e:	9600      	str	r6, [sp, #0]
   25f60:	f7ff fd1a 	bl	25998 <__lo0bits>
   25f64:	4603      	mov	r3, r0
   25f66:	b310      	cbz	r0, 25fae <__d2b+0xb6>
   25f68:	e9dd 0200 	ldrd	r0, r2, [sp]
   25f6c:	f1c3 0120 	rsb	r1, r3, #32
   25f70:	fa02 f101 	lsl.w	r1, r2, r1
   25f74:	4301      	orrs	r1, r0
   25f76:	40da      	lsrs	r2, r3
   25f78:	6161      	str	r1, [r4, #20]
   25f7a:	9201      	str	r2, [sp, #4]
   25f7c:	2a00      	cmp	r2, #0
   25f7e:	61a2      	str	r2, [r4, #24]
   25f80:	bf14      	ite	ne
   25f82:	2202      	movne	r2, #2
   25f84:	2201      	moveq	r2, #1
   25f86:	6122      	str	r2, [r4, #16]
   25f88:	f1b9 0f00 	cmp.w	r9, #0
   25f8c:	d1d9      	bne.n	25f42 <__d2b+0x4a>
   25f8e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   25f92:	f8c8 3000 	str.w	r3, [r8]
   25f96:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   25f9a:	6918      	ldr	r0, [r3, #16]
   25f9c:	f7ff fcdc 	bl	25958 <__hi0bits>
   25fa0:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   25fa4:	4620      	mov	r0, r4
   25fa6:	602b      	str	r3, [r5, #0]
   25fa8:	b003      	add	sp, #12
   25faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25fae:	9a00      	ldr	r2, [sp, #0]
   25fb0:	6162      	str	r2, [r4, #20]
   25fb2:	9a01      	ldr	r2, [sp, #4]
   25fb4:	e7e2      	b.n	25f7c <__d2b+0x84>
   25fb6:	4b03      	ldr	r3, [pc, #12]	; (25fc4 <__d2b+0xcc>)
   25fb8:	4803      	ldr	r0, [pc, #12]	; (25fc8 <__d2b+0xd0>)
   25fba:	4622      	mov	r2, r4
   25fbc:	f240 310f 	movw	r1, #783	; 0x30f
   25fc0:	f000 fb02 	bl	265c8 <__assert_func>
   25fc4:	20002a18 	.word	0x20002a18
   25fc8:	20002a2c 	.word	0x20002a2c

00025fcc <_fclose_r>:
   25fcc:	b570      	push	{r4, r5, r6, lr}
   25fce:	2900      	cmp	r1, #0
   25fd0:	d04b      	beq.n	2606a <_fclose_r+0x9e>
   25fd2:	4606      	mov	r6, r0
   25fd4:	460c      	mov	r4, r1
   25fd6:	b110      	cbz	r0, 25fde <_fclose_r+0x12>
   25fd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25fda:	2b00      	cmp	r3, #0
   25fdc:	d048      	beq.n	26070 <_fclose_r+0xa4>
   25fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25fe0:	07d8      	lsls	r0, r3, #31
   25fe2:	d534      	bpl.n	2604e <_fclose_r+0x82>
   25fe4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25fe8:	2b00      	cmp	r3, #0
   25fea:	d03e      	beq.n	2606a <_fclose_r+0x9e>
   25fec:	4621      	mov	r1, r4
   25fee:	4630      	mov	r0, r6
   25ff0:	f000 f850 	bl	26094 <__sflush_r>
   25ff4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25ff6:	4605      	mov	r5, r0
   25ff8:	b133      	cbz	r3, 26008 <_fclose_r+0x3c>
   25ffa:	69e1      	ldr	r1, [r4, #28]
   25ffc:	4630      	mov	r0, r6
   25ffe:	4798      	blx	r3
   26000:	2800      	cmp	r0, #0
   26002:	bfb8      	it	lt
   26004:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   26008:	89a3      	ldrh	r3, [r4, #12]
   2600a:	061a      	lsls	r2, r3, #24
   2600c:	d43c      	bmi.n	26088 <_fclose_r+0xbc>
   2600e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   26010:	b141      	cbz	r1, 26024 <_fclose_r+0x58>
   26012:	f104 0340 	add.w	r3, r4, #64	; 0x40
   26016:	4299      	cmp	r1, r3
   26018:	d002      	beq.n	26020 <_fclose_r+0x54>
   2601a:	4630      	mov	r0, r6
   2601c:	f7fd fcb2 	bl	23984 <_free_r>
   26020:	2300      	movs	r3, #0
   26022:	6323      	str	r3, [r4, #48]	; 0x30
   26024:	6c61      	ldr	r1, [r4, #68]	; 0x44
   26026:	b121      	cbz	r1, 26032 <_fclose_r+0x66>
   26028:	4630      	mov	r0, r6
   2602a:	f7fd fcab 	bl	23984 <_free_r>
   2602e:	2300      	movs	r3, #0
   26030:	6463      	str	r3, [r4, #68]	; 0x44
   26032:	f7fc fc39 	bl	228a8 <__sfp_lock_acquire>
   26036:	6e63      	ldr	r3, [r4, #100]	; 0x64
   26038:	2200      	movs	r2, #0
   2603a:	07db      	lsls	r3, r3, #31
   2603c:	81a2      	strh	r2, [r4, #12]
   2603e:	d51f      	bpl.n	26080 <_fclose_r+0xb4>
   26040:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26042:	f7fd fb3f 	bl	236c4 <__retarget_lock_close_recursive>
   26046:	f7fc fc35 	bl	228b4 <__sfp_lock_release>
   2604a:	4628      	mov	r0, r5
   2604c:	bd70      	pop	{r4, r5, r6, pc}
   2604e:	89a3      	ldrh	r3, [r4, #12]
   26050:	0599      	lsls	r1, r3, #22
   26052:	d4cb      	bmi.n	25fec <_fclose_r+0x20>
   26054:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26056:	f7fd fb37 	bl	236c8 <__retarget_lock_acquire_recursive>
   2605a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2605e:	2b00      	cmp	r3, #0
   26060:	d1c4      	bne.n	25fec <_fclose_r+0x20>
   26062:	6e65      	ldr	r5, [r4, #100]	; 0x64
   26064:	f015 0501 	ands.w	r5, r5, #1
   26068:	d005      	beq.n	26076 <_fclose_r+0xaa>
   2606a:	2500      	movs	r5, #0
   2606c:	4628      	mov	r0, r5
   2606e:	bd70      	pop	{r4, r5, r6, pc}
   26070:	f7fc fbfc 	bl	2286c <__sinit>
   26074:	e7b3      	b.n	25fde <_fclose_r+0x12>
   26076:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26078:	f7fd fb28 	bl	236cc <__retarget_lock_release_recursive>
   2607c:	4628      	mov	r0, r5
   2607e:	bd70      	pop	{r4, r5, r6, pc}
   26080:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26082:	f7fd fb23 	bl	236cc <__retarget_lock_release_recursive>
   26086:	e7db      	b.n	26040 <_fclose_r+0x74>
   26088:	6921      	ldr	r1, [r4, #16]
   2608a:	4630      	mov	r0, r6
   2608c:	f7fd fc7a 	bl	23984 <_free_r>
   26090:	e7bd      	b.n	2600e <_fclose_r+0x42>
   26092:	bf00      	nop

00026094 <__sflush_r>:
   26094:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   26098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2609c:	460c      	mov	r4, r1
   2609e:	0711      	lsls	r1, r2, #28
   260a0:	4680      	mov	r8, r0
   260a2:	d447      	bmi.n	26134 <__sflush_r+0xa0>
   260a4:	6863      	ldr	r3, [r4, #4]
   260a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   260aa:	2b00      	cmp	r3, #0
   260ac:	81a2      	strh	r2, [r4, #12]
   260ae:	dd5e      	ble.n	2616e <__sflush_r+0xda>
   260b0:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   260b2:	2d00      	cmp	r5, #0
   260b4:	d058      	beq.n	26168 <__sflush_r+0xd4>
   260b6:	2300      	movs	r3, #0
   260b8:	f8d8 6000 	ldr.w	r6, [r8]
   260bc:	f8c8 3000 	str.w	r3, [r8]
   260c0:	b293      	uxth	r3, r2
   260c2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   260c6:	d156      	bne.n	26176 <__sflush_r+0xe2>
   260c8:	2301      	movs	r3, #1
   260ca:	69e1      	ldr	r1, [r4, #28]
   260cc:	4640      	mov	r0, r8
   260ce:	47a8      	blx	r5
   260d0:	1c43      	adds	r3, r0, #1
   260d2:	d067      	beq.n	261a4 <__sflush_r+0x110>
   260d4:	89a3      	ldrh	r3, [r4, #12]
   260d6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   260d8:	075f      	lsls	r7, r3, #29
   260da:	d505      	bpl.n	260e8 <__sflush_r+0x54>
   260dc:	6863      	ldr	r3, [r4, #4]
   260de:	1ac0      	subs	r0, r0, r3
   260e0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   260e2:	b10b      	cbz	r3, 260e8 <__sflush_r+0x54>
   260e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   260e6:	1ac0      	subs	r0, r0, r3
   260e8:	69e1      	ldr	r1, [r4, #28]
   260ea:	4602      	mov	r2, r0
   260ec:	2300      	movs	r3, #0
   260ee:	4640      	mov	r0, r8
   260f0:	47a8      	blx	r5
   260f2:	1c41      	adds	r1, r0, #1
   260f4:	d141      	bne.n	2617a <__sflush_r+0xe6>
   260f6:	f8d8 3000 	ldr.w	r3, [r8]
   260fa:	2b00      	cmp	r3, #0
   260fc:	d03d      	beq.n	2617a <__sflush_r+0xe6>
   260fe:	2b1d      	cmp	r3, #29
   26100:	d001      	beq.n	26106 <__sflush_r+0x72>
   26102:	2b16      	cmp	r3, #22
   26104:	d156      	bne.n	261b4 <__sflush_r+0x120>
   26106:	89a3      	ldrh	r3, [r4, #12]
   26108:	6922      	ldr	r2, [r4, #16]
   2610a:	6022      	str	r2, [r4, #0]
   2610c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   26110:	2100      	movs	r1, #0
   26112:	6061      	str	r1, [r4, #4]
   26114:	81a3      	strh	r3, [r4, #12]
   26116:	6b21      	ldr	r1, [r4, #48]	; 0x30
   26118:	f8c8 6000 	str.w	r6, [r8]
   2611c:	b321      	cbz	r1, 26168 <__sflush_r+0xd4>
   2611e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   26122:	4299      	cmp	r1, r3
   26124:	d002      	beq.n	2612c <__sflush_r+0x98>
   26126:	4640      	mov	r0, r8
   26128:	f7fd fc2c 	bl	23984 <_free_r>
   2612c:	2000      	movs	r0, #0
   2612e:	6320      	str	r0, [r4, #48]	; 0x30
   26130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26134:	6926      	ldr	r6, [r4, #16]
   26136:	b1be      	cbz	r6, 26168 <__sflush_r+0xd4>
   26138:	b293      	uxth	r3, r2
   2613a:	6825      	ldr	r5, [r4, #0]
   2613c:	6026      	str	r6, [r4, #0]
   2613e:	079a      	lsls	r2, r3, #30
   26140:	bf0c      	ite	eq
   26142:	6963      	ldreq	r3, [r4, #20]
   26144:	2300      	movne	r3, #0
   26146:	1bad      	subs	r5, r5, r6
   26148:	60a3      	str	r3, [r4, #8]
   2614a:	e00b      	b.n	26164 <__sflush_r+0xd0>
   2614c:	462b      	mov	r3, r5
   2614e:	4632      	mov	r2, r6
   26150:	69e1      	ldr	r1, [r4, #28]
   26152:	6a67      	ldr	r7, [r4, #36]	; 0x24
   26154:	4640      	mov	r0, r8
   26156:	47b8      	blx	r7
   26158:	f1b0 0c00 	subs.w	ip, r0, #0
   2615c:	eba5 050c 	sub.w	r5, r5, ip
   26160:	4466      	add	r6, ip
   26162:	dd17      	ble.n	26194 <__sflush_r+0x100>
   26164:	2d00      	cmp	r5, #0
   26166:	dcf1      	bgt.n	2614c <__sflush_r+0xb8>
   26168:	2000      	movs	r0, #0
   2616a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2616e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   26170:	2b00      	cmp	r3, #0
   26172:	dc9d      	bgt.n	260b0 <__sflush_r+0x1c>
   26174:	e7f8      	b.n	26168 <__sflush_r+0xd4>
   26176:	6d20      	ldr	r0, [r4, #80]	; 0x50
   26178:	e7ae      	b.n	260d8 <__sflush_r+0x44>
   2617a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2617e:	6922      	ldr	r2, [r4, #16]
   26180:	6022      	str	r2, [r4, #0]
   26182:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   26186:	81a3      	strh	r3, [r4, #12]
   26188:	2200      	movs	r2, #0
   2618a:	04db      	lsls	r3, r3, #19
   2618c:	6062      	str	r2, [r4, #4]
   2618e:	d5c2      	bpl.n	26116 <__sflush_r+0x82>
   26190:	6520      	str	r0, [r4, #80]	; 0x50
   26192:	e7c0      	b.n	26116 <__sflush_r+0x82>
   26194:	89a3      	ldrh	r3, [r4, #12]
   26196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2619a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2619e:	81a3      	strh	r3, [r4, #12]
   261a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   261a4:	f8d8 3000 	ldr.w	r3, [r8]
   261a8:	2b00      	cmp	r3, #0
   261aa:	d093      	beq.n	260d4 <__sflush_r+0x40>
   261ac:	2b1d      	cmp	r3, #29
   261ae:	d006      	beq.n	261be <__sflush_r+0x12a>
   261b0:	2b16      	cmp	r3, #22
   261b2:	d004      	beq.n	261be <__sflush_r+0x12a>
   261b4:	89a3      	ldrh	r3, [r4, #12]
   261b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   261ba:	81a3      	strh	r3, [r4, #12]
   261bc:	e7d5      	b.n	2616a <__sflush_r+0xd6>
   261be:	f8c8 6000 	str.w	r6, [r8]
   261c2:	e7d1      	b.n	26168 <__sflush_r+0xd4>

000261c4 <_fflush_r>:
   261c4:	b538      	push	{r3, r4, r5, lr}
   261c6:	460c      	mov	r4, r1
   261c8:	4605      	mov	r5, r0
   261ca:	b108      	cbz	r0, 261d0 <_fflush_r+0xc>
   261cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   261ce:	b303      	cbz	r3, 26212 <_fflush_r+0x4e>
   261d0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   261d4:	b188      	cbz	r0, 261fa <_fflush_r+0x36>
   261d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   261d8:	07db      	lsls	r3, r3, #31
   261da:	d401      	bmi.n	261e0 <_fflush_r+0x1c>
   261dc:	0581      	lsls	r1, r0, #22
   261de:	d50f      	bpl.n	26200 <_fflush_r+0x3c>
   261e0:	4628      	mov	r0, r5
   261e2:	4621      	mov	r1, r4
   261e4:	f7ff ff56 	bl	26094 <__sflush_r>
   261e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   261ea:	07da      	lsls	r2, r3, #31
   261ec:	4605      	mov	r5, r0
   261ee:	d402      	bmi.n	261f6 <_fflush_r+0x32>
   261f0:	89a3      	ldrh	r3, [r4, #12]
   261f2:	059b      	lsls	r3, r3, #22
   261f4:	d508      	bpl.n	26208 <_fflush_r+0x44>
   261f6:	4628      	mov	r0, r5
   261f8:	bd38      	pop	{r3, r4, r5, pc}
   261fa:	4605      	mov	r5, r0
   261fc:	4628      	mov	r0, r5
   261fe:	bd38      	pop	{r3, r4, r5, pc}
   26200:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26202:	f7fd fa61 	bl	236c8 <__retarget_lock_acquire_recursive>
   26206:	e7eb      	b.n	261e0 <_fflush_r+0x1c>
   26208:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2620a:	f7fd fa5f 	bl	236cc <__retarget_lock_release_recursive>
   2620e:	4628      	mov	r0, r5
   26210:	bd38      	pop	{r3, r4, r5, pc}
   26212:	f7fc fb2b 	bl	2286c <__sinit>
   26216:	e7db      	b.n	261d0 <_fflush_r+0xc>

00026218 <__sread>:
   26218:	b510      	push	{r4, lr}
   2621a:	460c      	mov	r4, r1
   2621c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26220:	f000 f8fa 	bl	26418 <_read_r>
   26224:	2800      	cmp	r0, #0
   26226:	db03      	blt.n	26230 <__sread+0x18>
   26228:	6d23      	ldr	r3, [r4, #80]	; 0x50
   2622a:	4403      	add	r3, r0
   2622c:	6523      	str	r3, [r4, #80]	; 0x50
   2622e:	bd10      	pop	{r4, pc}
   26230:	89a3      	ldrh	r3, [r4, #12]
   26232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   26236:	81a3      	strh	r3, [r4, #12]
   26238:	bd10      	pop	{r4, pc}
   2623a:	bf00      	nop

0002623c <__swrite>:
   2623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26240:	460c      	mov	r4, r1
   26242:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   26246:	461f      	mov	r7, r3
   26248:	05cb      	lsls	r3, r1, #23
   2624a:	4605      	mov	r5, r0
   2624c:	4616      	mov	r6, r2
   2624e:	d40b      	bmi.n	26268 <__swrite+0x2c>
   26250:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   26254:	81a1      	strh	r1, [r4, #12]
   26256:	463b      	mov	r3, r7
   26258:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2625c:	4632      	mov	r2, r6
   2625e:	4628      	mov	r0, r5
   26260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26264:	f7fd b818 	b.w	23298 <_write_r>
   26268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2626c:	2302      	movs	r3, #2
   2626e:	2200      	movs	r2, #0
   26270:	f000 f8bc 	bl	263ec <_lseek_r>
   26274:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   26278:	e7ea      	b.n	26250 <__swrite+0x14>
   2627a:	bf00      	nop

0002627c <__sseek>:
   2627c:	b510      	push	{r4, lr}
   2627e:	460c      	mov	r4, r1
   26280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   26284:	f000 f8b2 	bl	263ec <_lseek_r>
   26288:	89a3      	ldrh	r3, [r4, #12]
   2628a:	1c42      	adds	r2, r0, #1
   2628c:	bf0e      	itee	eq
   2628e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   26292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   26296:	6520      	strne	r0, [r4, #80]	; 0x50
   26298:	81a3      	strh	r3, [r4, #12]
   2629a:	bd10      	pop	{r4, pc}

0002629c <__sclose>:
   2629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   262a0:	f000 b86a 	b.w	26378 <_close_r>

000262a4 <__ascii_wctomb>:
   262a4:	b149      	cbz	r1, 262ba <__ascii_wctomb+0x16>
   262a6:	2aff      	cmp	r2, #255	; 0xff
   262a8:	d802      	bhi.n	262b0 <__ascii_wctomb+0xc>
   262aa:	700a      	strb	r2, [r1, #0]
   262ac:	2001      	movs	r0, #1
   262ae:	4770      	bx	lr
   262b0:	238a      	movs	r3, #138	; 0x8a
   262b2:	6003      	str	r3, [r0, #0]
   262b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   262b8:	4770      	bx	lr
   262ba:	4608      	mov	r0, r1
   262bc:	4770      	bx	lr
   262be:	bf00      	nop

000262c0 <__swbuf_r>:
   262c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262c2:	460d      	mov	r5, r1
   262c4:	4614      	mov	r4, r2
   262c6:	4606      	mov	r6, r0
   262c8:	b110      	cbz	r0, 262d0 <__swbuf_r+0x10>
   262ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
   262cc:	2b00      	cmp	r3, #0
   262ce:	d04c      	beq.n	2636a <__swbuf_r+0xaa>
   262d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   262d4:	69a3      	ldr	r3, [r4, #24]
   262d6:	60a3      	str	r3, [r4, #8]
   262d8:	0717      	lsls	r7, r2, #28
   262da:	b290      	uxth	r0, r2
   262dc:	d51b      	bpl.n	26316 <__swbuf_r+0x56>
   262de:	6923      	ldr	r3, [r4, #16]
   262e0:	b1cb      	cbz	r3, 26316 <__swbuf_r+0x56>
   262e2:	b2ed      	uxtb	r5, r5
   262e4:	0481      	lsls	r1, r0, #18
   262e6:	462f      	mov	r7, r5
   262e8:	d522      	bpl.n	26330 <__swbuf_r+0x70>
   262ea:	6822      	ldr	r2, [r4, #0]
   262ec:	6961      	ldr	r1, [r4, #20]
   262ee:	1ad3      	subs	r3, r2, r3
   262f0:	4299      	cmp	r1, r3
   262f2:	dd29      	ble.n	26348 <__swbuf_r+0x88>
   262f4:	3301      	adds	r3, #1
   262f6:	68a1      	ldr	r1, [r4, #8]
   262f8:	3901      	subs	r1, #1
   262fa:	60a1      	str	r1, [r4, #8]
   262fc:	1c51      	adds	r1, r2, #1
   262fe:	6021      	str	r1, [r4, #0]
   26300:	7015      	strb	r5, [r2, #0]
   26302:	6962      	ldr	r2, [r4, #20]
   26304:	429a      	cmp	r2, r3
   26306:	d027      	beq.n	26358 <__swbuf_r+0x98>
   26308:	89a3      	ldrh	r3, [r4, #12]
   2630a:	07db      	lsls	r3, r3, #31
   2630c:	d501      	bpl.n	26312 <__swbuf_r+0x52>
   2630e:	2d0a      	cmp	r5, #10
   26310:	d022      	beq.n	26358 <__swbuf_r+0x98>
   26312:	4638      	mov	r0, r7
   26314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26316:	4621      	mov	r1, r4
   26318:	4630      	mov	r0, r6
   2631a:	f7fc fd8b 	bl	22e34 <__swsetup_r>
   2631e:	bb08      	cbnz	r0, 26364 <__swbuf_r+0xa4>
   26320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   26324:	6923      	ldr	r3, [r4, #16]
   26326:	b290      	uxth	r0, r2
   26328:	b2ed      	uxtb	r5, r5
   2632a:	0481      	lsls	r1, r0, #18
   2632c:	462f      	mov	r7, r5
   2632e:	d4dc      	bmi.n	262ea <__swbuf_r+0x2a>
   26330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   26334:	81a2      	strh	r2, [r4, #12]
   26336:	6e62      	ldr	r2, [r4, #100]	; 0x64
   26338:	6961      	ldr	r1, [r4, #20]
   2633a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   2633e:	6662      	str	r2, [r4, #100]	; 0x64
   26340:	6822      	ldr	r2, [r4, #0]
   26342:	1ad3      	subs	r3, r2, r3
   26344:	4299      	cmp	r1, r3
   26346:	dcd5      	bgt.n	262f4 <__swbuf_r+0x34>
   26348:	4621      	mov	r1, r4
   2634a:	4630      	mov	r0, r6
   2634c:	f7ff ff3a 	bl	261c4 <_fflush_r>
   26350:	b940      	cbnz	r0, 26364 <__swbuf_r+0xa4>
   26352:	6822      	ldr	r2, [r4, #0]
   26354:	2301      	movs	r3, #1
   26356:	e7ce      	b.n	262f6 <__swbuf_r+0x36>
   26358:	4621      	mov	r1, r4
   2635a:	4630      	mov	r0, r6
   2635c:	f7ff ff32 	bl	261c4 <_fflush_r>
   26360:	2800      	cmp	r0, #0
   26362:	d0d6      	beq.n	26312 <__swbuf_r+0x52>
   26364:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26368:	e7d3      	b.n	26312 <__swbuf_r+0x52>
   2636a:	f7fc fa7f 	bl	2286c <__sinit>
   2636e:	e7af      	b.n	262d0 <__swbuf_r+0x10>

00026370 <_localeconv_r>:
   26370:	4800      	ldr	r0, [pc, #0]	; (26374 <_localeconv_r+0x4>)
   26372:	4770      	bx	lr
   26374:	2000534c 	.word	0x2000534c

00026378 <_close_r>:
   26378:	b538      	push	{r3, r4, r5, lr}
   2637a:	4d07      	ldr	r5, [pc, #28]	; (26398 <_close_r+0x20>)
   2637c:	2200      	movs	r2, #0
   2637e:	4604      	mov	r4, r0
   26380:	4608      	mov	r0, r1
   26382:	602a      	str	r2, [r5, #0]
   26384:	f7f1 fbda 	bl	17b3c <_close>
   26388:	1c43      	adds	r3, r0, #1
   2638a:	d000      	beq.n	2638e <_close_r+0x16>
   2638c:	bd38      	pop	{r3, r4, r5, pc}
   2638e:	682b      	ldr	r3, [r5, #0]
   26390:	2b00      	cmp	r3, #0
   26392:	d0fb      	beq.n	2638c <_close_r+0x14>
   26394:	6023      	str	r3, [r4, #0]
   26396:	bd38      	pop	{r3, r4, r5, pc}
   26398:	2000773c 	.word	0x2000773c

0002639c <_fstat_r>:
   2639c:	b570      	push	{r4, r5, r6, lr}
   2639e:	460c      	mov	r4, r1
   263a0:	4d08      	ldr	r5, [pc, #32]	; (263c4 <_fstat_r+0x28>)
   263a2:	4603      	mov	r3, r0
   263a4:	2600      	movs	r6, #0
   263a6:	4620      	mov	r0, r4
   263a8:	4611      	mov	r1, r2
   263aa:	461c      	mov	r4, r3
   263ac:	602e      	str	r6, [r5, #0]
   263ae:	f7f1 fbc8 	bl	17b42 <_fstat>
   263b2:	1c43      	adds	r3, r0, #1
   263b4:	d000      	beq.n	263b8 <_fstat_r+0x1c>
   263b6:	bd70      	pop	{r4, r5, r6, pc}
   263b8:	682b      	ldr	r3, [r5, #0]
   263ba:	2b00      	cmp	r3, #0
   263bc:	d0fb      	beq.n	263b6 <_fstat_r+0x1a>
   263be:	6023      	str	r3, [r4, #0]
   263c0:	bd70      	pop	{r4, r5, r6, pc}
   263c2:	bf00      	nop
   263c4:	2000773c 	.word	0x2000773c

000263c8 <_isatty_r>:
   263c8:	b538      	push	{r3, r4, r5, lr}
   263ca:	4d07      	ldr	r5, [pc, #28]	; (263e8 <_isatty_r+0x20>)
   263cc:	2200      	movs	r2, #0
   263ce:	4604      	mov	r4, r0
   263d0:	4608      	mov	r0, r1
   263d2:	602a      	str	r2, [r5, #0]
   263d4:	f7f1 fbba 	bl	17b4c <_isatty>
   263d8:	1c43      	adds	r3, r0, #1
   263da:	d000      	beq.n	263de <_isatty_r+0x16>
   263dc:	bd38      	pop	{r3, r4, r5, pc}
   263de:	682b      	ldr	r3, [r5, #0]
   263e0:	2b00      	cmp	r3, #0
   263e2:	d0fb      	beq.n	263dc <_isatty_r+0x14>
   263e4:	6023      	str	r3, [r4, #0]
   263e6:	bd38      	pop	{r3, r4, r5, pc}
   263e8:	2000773c 	.word	0x2000773c

000263ec <_lseek_r>:
   263ec:	b538      	push	{r3, r4, r5, lr}
   263ee:	460c      	mov	r4, r1
   263f0:	4d08      	ldr	r5, [pc, #32]	; (26414 <_lseek_r+0x28>)
   263f2:	4684      	mov	ip, r0
   263f4:	4611      	mov	r1, r2
   263f6:	4620      	mov	r0, r4
   263f8:	461a      	mov	r2, r3
   263fa:	2300      	movs	r3, #0
   263fc:	602b      	str	r3, [r5, #0]
   263fe:	4664      	mov	r4, ip
   26400:	f7f1 fba6 	bl	17b50 <_lseek>
   26404:	1c43      	adds	r3, r0, #1
   26406:	d000      	beq.n	2640a <_lseek_r+0x1e>
   26408:	bd38      	pop	{r3, r4, r5, pc}
   2640a:	682b      	ldr	r3, [r5, #0]
   2640c:	2b00      	cmp	r3, #0
   2640e:	d0fb      	beq.n	26408 <_lseek_r+0x1c>
   26410:	6023      	str	r3, [r4, #0]
   26412:	bd38      	pop	{r3, r4, r5, pc}
   26414:	2000773c 	.word	0x2000773c

00026418 <_read_r>:
   26418:	b538      	push	{r3, r4, r5, lr}
   2641a:	460c      	mov	r4, r1
   2641c:	4d08      	ldr	r5, [pc, #32]	; (26440 <_read_r+0x28>)
   2641e:	4684      	mov	ip, r0
   26420:	4611      	mov	r1, r2
   26422:	4620      	mov	r0, r4
   26424:	461a      	mov	r2, r3
   26426:	2300      	movs	r3, #0
   26428:	602b      	str	r3, [r5, #0]
   2642a:	4664      	mov	r4, ip
   2642c:	f7f1 fb84 	bl	17b38 <_read>
   26430:	1c43      	adds	r3, r0, #1
   26432:	d000      	beq.n	26436 <_read_r+0x1e>
   26434:	bd38      	pop	{r3, r4, r5, pc}
   26436:	682b      	ldr	r3, [r5, #0]
   26438:	2b00      	cmp	r3, #0
   2643a:	d0fb      	beq.n	26434 <_read_r+0x1c>
   2643c:	6023      	str	r3, [r4, #0]
   2643e:	bd38      	pop	{r3, r4, r5, pc}
   26440:	2000773c 	.word	0x2000773c

00026444 <fcvtbuf>:
   26444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26448:	460e      	mov	r6, r1
   2644a:	4926      	ldr	r1, [pc, #152]	; (264e4 <fcvtbuf+0xa0>)
   2644c:	b087      	sub	sp, #28
   2644e:	680f      	ldr	r7, [r1, #0]
   26450:	4604      	mov	r4, r0
   26452:	4690      	mov	r8, r2
   26454:	461d      	mov	r5, r3
   26456:	b353      	cbz	r3, 264ae <fcvtbuf+0x6a>
   26458:	aa05      	add	r2, sp, #20
   2645a:	4633      	mov	r3, r6
   2645c:	9201      	str	r2, [sp, #4]
   2645e:	2103      	movs	r1, #3
   26460:	4622      	mov	r2, r4
   26462:	f8cd 8000 	str.w	r8, [sp]
   26466:	4638      	mov	r0, r7
   26468:	f000 f99e 	bl	267a8 <_dtoa_r>
   2646c:	9b05      	ldr	r3, [sp, #20]
   2646e:	6832      	ldr	r2, [r6, #0]
   26470:	4298      	cmp	r0, r3
   26472:	4684      	mov	ip, r0
   26474:	f1c2 0200 	rsb	r2, r2, #0
   26478:	4629      	mov	r1, r5
   2647a:	d209      	bcs.n	26490 <fcvtbuf+0x4c>
   2647c:	1a10      	subs	r0, r2, r0
   2647e:	f81c 3b01 	ldrb.w	r3, [ip], #1
   26482:	f801 3b01 	strb.w	r3, [r1], #1
   26486:	9b05      	ldr	r3, [sp, #20]
   26488:	4563      	cmp	r3, ip
   2648a:	eb00 020c 	add.w	r2, r0, ip
   2648e:	d8f6      	bhi.n	2647e <fcvtbuf+0x3a>
   26490:	4294      	cmp	r4, r2
   26492:	dd24      	ble.n	264de <fcvtbuf+0x9a>
   26494:	1aa2      	subs	r2, r4, r2
   26496:	440a      	add	r2, r1
   26498:	2330      	movs	r3, #48	; 0x30
   2649a:	f801 3b01 	strb.w	r3, [r1], #1
   2649e:	4291      	cmp	r1, r2
   264a0:	d1fb      	bne.n	2649a <fcvtbuf+0x56>
   264a2:	2300      	movs	r3, #0
   264a4:	7013      	strb	r3, [r2, #0]
   264a6:	4628      	mov	r0, r5
   264a8:	b007      	add	sp, #28
   264aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   264ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
   264b0:	f100 0323 	add.w	r3, r0, #35	; 0x23
   264b4:	429a      	cmp	r2, r3
   264b6:	dd01      	ble.n	264bc <fcvtbuf+0x78>
   264b8:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   264ba:	e7cd      	b.n	26458 <fcvtbuf+0x14>
   264bc:	f100 0924 	add.w	r9, r0, #36	; 0x24
   264c0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   264c2:	464a      	mov	r2, r9
   264c4:	4638      	mov	r0, r7
   264c6:	ed8d 0b02 	vstr	d0, [sp, #8]
   264ca:	f7fb fedd 	bl	22288 <_realloc_r>
   264ce:	4605      	mov	r5, r0
   264d0:	2800      	cmp	r0, #0
   264d2:	d0e8      	beq.n	264a6 <fcvtbuf+0x62>
   264d4:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   264d8:	ed9d 0b02 	vldr	d0, [sp, #8]
   264dc:	e7bc      	b.n	26458 <fcvtbuf+0x14>
   264de:	460a      	mov	r2, r1
   264e0:	e7df      	b.n	264a2 <fcvtbuf+0x5e>
   264e2:	bf00      	nop
   264e4:	200057e4 	.word	0x200057e4

000264e8 <_wcrtomb_r>:
   264e8:	b570      	push	{r4, r5, r6, lr}
   264ea:	4605      	mov	r5, r0
   264ec:	b084      	sub	sp, #16
   264ee:	b15b      	cbz	r3, 26508 <_wcrtomb_r+0x20>
   264f0:	461c      	mov	r4, r3
   264f2:	b169      	cbz	r1, 26510 <_wcrtomb_r+0x28>
   264f4:	4b0e      	ldr	r3, [pc, #56]	; (26530 <_wcrtomb_r+0x48>)
   264f6:	4628      	mov	r0, r5
   264f8:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   264fc:	4623      	mov	r3, r4
   264fe:	47b0      	blx	r6
   26500:	1c43      	adds	r3, r0, #1
   26502:	d00f      	beq.n	26524 <_wcrtomb_r+0x3c>
   26504:	b004      	add	sp, #16
   26506:	bd70      	pop	{r4, r5, r6, pc}
   26508:	f500 7482 	add.w	r4, r0, #260	; 0x104
   2650c:	2900      	cmp	r1, #0
   2650e:	d1f1      	bne.n	264f4 <_wcrtomb_r+0xc>
   26510:	4a07      	ldr	r2, [pc, #28]	; (26530 <_wcrtomb_r+0x48>)
   26512:	4623      	mov	r3, r4
   26514:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   26518:	4628      	mov	r0, r5
   2651a:	460a      	mov	r2, r1
   2651c:	a901      	add	r1, sp, #4
   2651e:	47b0      	blx	r6
   26520:	1c43      	adds	r3, r0, #1
   26522:	d1ef      	bne.n	26504 <_wcrtomb_r+0x1c>
   26524:	2200      	movs	r2, #0
   26526:	238a      	movs	r3, #138	; 0x8a
   26528:	6022      	str	r2, [r4, #0]
   2652a:	602b      	str	r3, [r5, #0]
   2652c:	b004      	add	sp, #16
   2652e:	bd70      	pop	{r4, r5, r6, pc}
   26530:	2000525c 	.word	0x2000525c

00026534 <_wcsrtombs_r>:
   26534:	b510      	push	{r4, lr}
   26536:	b082      	sub	sp, #8
   26538:	9c04      	ldr	r4, [sp, #16]
   2653a:	e9cd 3400 	strd	r3, r4, [sp]
   2653e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26542:	f002 f98b 	bl	2885c <_wcsnrtombs_r>
   26546:	b002      	add	sp, #8
   26548:	bd10      	pop	{r4, pc}
   2654a:	bf00      	nop
   2654c:	0000      	movs	r0, r0
	...

00026550 <frexp>:
   26550:	b430      	push	{r4, r5}
   26552:	b082      	sub	sp, #8
   26554:	ed8d 0b00 	vstr	d0, [sp]
   26558:	9a01      	ldr	r2, [sp, #4]
   2655a:	4c19      	ldr	r4, [pc, #100]	; (265c0 <frexp+0x70>)
   2655c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   26560:	2100      	movs	r1, #0
   26562:	42a3      	cmp	r3, r4
   26564:	6001      	str	r1, [r0, #0]
   26566:	dc21      	bgt.n	265ac <frexp+0x5c>
   26568:	9c00      	ldr	r4, [sp, #0]
   2656a:	431c      	orrs	r4, r3
   2656c:	d01e      	beq.n	265ac <frexp+0x5c>
   2656e:	4c15      	ldr	r4, [pc, #84]	; (265c4 <frexp+0x74>)
   26570:	4014      	ands	r4, r2
   26572:	b954      	cbnz	r4, 2658a <frexp+0x3a>
   26574:	ed9f 7b10 	vldr	d7, [pc, #64]	; 265b8 <frexp+0x68>
   26578:	ee20 7b07 	vmul.f64	d7, d0, d7
   2657c:	ed8d 7b00 	vstr	d7, [sp]
   26580:	9a01      	ldr	r2, [sp, #4]
   26582:	f06f 0135 	mvn.w	r1, #53	; 0x35
   26586:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   2658a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   2658e:	e9dd 4500 	ldrd	r4, r5, [sp]
   26592:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   26596:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   2659a:	151b      	asrs	r3, r3, #20
   2659c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   265a0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   265a4:	e9cd 4500 	strd	r4, r5, [sp]
   265a8:	440b      	add	r3, r1
   265aa:	6003      	str	r3, [r0, #0]
   265ac:	ed9d 0b00 	vldr	d0, [sp]
   265b0:	b002      	add	sp, #8
   265b2:	bc30      	pop	{r4, r5}
   265b4:	4770      	bx	lr
   265b6:	bf00      	nop
   265b8:	00000000 	.word	0x00000000
   265bc:	43500000 	.word	0x43500000
   265c0:	7fefffff 	.word	0x7fefffff
   265c4:	7ff00000 	.word	0x7ff00000

000265c8 <__assert_func>:
   265c8:	b500      	push	{lr}
   265ca:	4c0b      	ldr	r4, [pc, #44]	; (265f8 <__assert_func+0x30>)
   265cc:	6825      	ldr	r5, [r4, #0]
   265ce:	4614      	mov	r4, r2
   265d0:	68ee      	ldr	r6, [r5, #12]
   265d2:	461a      	mov	r2, r3
   265d4:	b085      	sub	sp, #20
   265d6:	4603      	mov	r3, r0
   265d8:	460d      	mov	r5, r1
   265da:	b14c      	cbz	r4, 265f0 <__assert_func+0x28>
   265dc:	4907      	ldr	r1, [pc, #28]	; (265fc <__assert_func+0x34>)
   265de:	9500      	str	r5, [sp, #0]
   265e0:	e9cd 1401 	strd	r1, r4, [sp, #4]
   265e4:	4630      	mov	r0, r6
   265e6:	4906      	ldr	r1, [pc, #24]	; (26600 <__assert_func+0x38>)
   265e8:	f000 ff54 	bl	27494 <fiprintf>
   265ec:	f7f1 fab5 	bl	17b5a <abort>
   265f0:	4904      	ldr	r1, [pc, #16]	; (26604 <__assert_func+0x3c>)
   265f2:	460c      	mov	r4, r1
   265f4:	e7f3      	b.n	265de <__assert_func+0x16>
   265f6:	bf00      	nop
   265f8:	200057e4 	.word	0x200057e4
   265fc:	200029d8 	.word	0x200029d8
   26600:	200029e8 	.word	0x200029e8
   26604:	20002158 	.word	0x20002158

00026608 <_calloc_r>:
   26608:	b538      	push	{r3, r4, r5, lr}
   2660a:	fba1 1402 	umull	r1, r4, r1, r2
   2660e:	bb8c      	cbnz	r4, 26674 <_calloc_r+0x6c>
   26610:	f7fb fb72 	bl	21cf8 <_malloc_r>
   26614:	4605      	mov	r5, r0
   26616:	b1e0      	cbz	r0, 26652 <_calloc_r+0x4a>
   26618:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2661c:	f022 0203 	bic.w	r2, r2, #3
   26620:	3a04      	subs	r2, #4
   26622:	2a24      	cmp	r2, #36	; 0x24
   26624:	d817      	bhi.n	26656 <_calloc_r+0x4e>
   26626:	2a13      	cmp	r2, #19
   26628:	d91a      	bls.n	26660 <_calloc_r+0x58>
   2662a:	2a1b      	cmp	r2, #27
   2662c:	e9c0 4400 	strd	r4, r4, [r0]
   26630:	d91d      	bls.n	2666e <_calloc_r+0x66>
   26632:	2a24      	cmp	r2, #36	; 0x24
   26634:	bf14      	ite	ne
   26636:	f100 0210 	addne.w	r2, r0, #16
   2663a:	f100 0218 	addeq.w	r2, r0, #24
   2663e:	f04f 0300 	mov.w	r3, #0
   26642:	e9c0 4402 	strd	r4, r4, [r0, #8]
   26646:	bf04      	itt	eq
   26648:	6104      	streq	r4, [r0, #16]
   2664a:	6144      	streq	r4, [r0, #20]
   2664c:	e9c2 3300 	strd	r3, r3, [r2]
   26650:	6093      	str	r3, [r2, #8]
   26652:	4628      	mov	r0, r5
   26654:	bd38      	pop	{r3, r4, r5, pc}
   26656:	4621      	mov	r1, r4
   26658:	f7fc fcfe 	bl	23058 <memset>
   2665c:	4628      	mov	r0, r5
   2665e:	bd38      	pop	{r3, r4, r5, pc}
   26660:	4602      	mov	r2, r0
   26662:	2300      	movs	r3, #0
   26664:	e9c2 3300 	strd	r3, r3, [r2]
   26668:	6093      	str	r3, [r2, #8]
   2666a:	4628      	mov	r0, r5
   2666c:	bd38      	pop	{r3, r4, r5, pc}
   2666e:	f100 0208 	add.w	r2, r0, #8
   26672:	e7f6      	b.n	26662 <_calloc_r+0x5a>
   26674:	f7fc fe26 	bl	232c4 <__errno>
   26678:	230c      	movs	r3, #12
   2667a:	2500      	movs	r5, #0
   2667c:	6003      	str	r3, [r0, #0]
   2667e:	e7e8      	b.n	26652 <_calloc_r+0x4a>

00026680 <quorem>:
   26680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26684:	6903      	ldr	r3, [r0, #16]
   26686:	690c      	ldr	r4, [r1, #16]
   26688:	42a3      	cmp	r3, r4
   2668a:	b083      	sub	sp, #12
   2668c:	f2c0 8087 	blt.w	2679e <quorem+0x11e>
   26690:	3c01      	subs	r4, #1
   26692:	f101 0514 	add.w	r5, r1, #20
   26696:	00a3      	lsls	r3, r4, #2
   26698:	f100 0814 	add.w	r8, r0, #20
   2669c:	9300      	str	r3, [sp, #0]
   2669e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   266a2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   266a6:	3301      	adds	r3, #1
   266a8:	4681      	mov	r9, r0
   266aa:	429a      	cmp	r2, r3
   266ac:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   266b0:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   266b4:	9001      	str	r0, [sp, #4]
   266b6:	fbb2 f6f3 	udiv	r6, r2, r3
   266ba:	d33b      	bcc.n	26734 <quorem+0xb4>
   266bc:	f04f 0c00 	mov.w	ip, #0
   266c0:	46ae      	mov	lr, r5
   266c2:	4640      	mov	r0, r8
   266c4:	46e2      	mov	sl, ip
   266c6:	4663      	mov	r3, ip
   266c8:	f85e bb04 	ldr.w	fp, [lr], #4
   266cc:	6802      	ldr	r2, [r0, #0]
   266ce:	fa1f fc8b 	uxth.w	ip, fp
   266d2:	fb06 330c 	mla	r3, r6, ip, r3
   266d6:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   266da:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   266de:	fb06 cc0b 	mla	ip, r6, fp, ip
   266e2:	b29b      	uxth	r3, r3
   266e4:	ebaa 0303 	sub.w	r3, sl, r3
   266e8:	fa1f fa8c 	uxth.w	sl, ip
   266ec:	fa13 f382 	uxtah	r3, r3, r2
   266f0:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   266f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   266f8:	b29b      	uxth	r3, r3
   266fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   266fe:	4577      	cmp	r7, lr
   26700:	f840 3b04 	str.w	r3, [r0], #4
   26704:	ea4f 4a22 	mov.w	sl, r2, asr #16
   26708:	ea4f 431c 	mov.w	r3, ip, lsr #16
   2670c:	d2dc      	bcs.n	266c8 <quorem+0x48>
   2670e:	9b00      	ldr	r3, [sp, #0]
   26710:	f858 3003 	ldr.w	r3, [r8, r3]
   26714:	b973      	cbnz	r3, 26734 <quorem+0xb4>
   26716:	9b01      	ldr	r3, [sp, #4]
   26718:	3b04      	subs	r3, #4
   2671a:	4598      	cmp	r8, r3
   2671c:	d304      	bcc.n	26728 <quorem+0xa8>
   2671e:	e007      	b.n	26730 <quorem+0xb0>
   26720:	4598      	cmp	r8, r3
   26722:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   26726:	d203      	bcs.n	26730 <quorem+0xb0>
   26728:	f853 2904 	ldr.w	r2, [r3], #-4
   2672c:	2a00      	cmp	r2, #0
   2672e:	d0f7      	beq.n	26720 <quorem+0xa0>
   26730:	f8c9 4010 	str.w	r4, [r9, #16]
   26734:	4648      	mov	r0, r9
   26736:	f7ff fb13 	bl	25d60 <__mcmp>
   2673a:	2800      	cmp	r0, #0
   2673c:	db2b      	blt.n	26796 <quorem+0x116>
   2673e:	3601      	adds	r6, #1
   26740:	4641      	mov	r1, r8
   26742:	2300      	movs	r3, #0
   26744:	f855 0b04 	ldr.w	r0, [r5], #4
   26748:	f8d1 c000 	ldr.w	ip, [r1]
   2674c:	b282      	uxth	r2, r0
   2674e:	1a9a      	subs	r2, r3, r2
   26750:	0c03      	lsrs	r3, r0, #16
   26752:	fa12 f28c 	uxtah	r2, r2, ip
   26756:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   2675a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2675e:	b292      	uxth	r2, r2
   26760:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   26764:	42af      	cmp	r7, r5
   26766:	f841 2b04 	str.w	r2, [r1], #4
   2676a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2676e:	d2e9      	bcs.n	26744 <quorem+0xc4>
   26770:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   26774:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   26778:	b96a      	cbnz	r2, 26796 <quorem+0x116>
   2677a:	3b04      	subs	r3, #4
   2677c:	4598      	cmp	r8, r3
   2677e:	d304      	bcc.n	2678a <quorem+0x10a>
   26780:	e007      	b.n	26792 <quorem+0x112>
   26782:	4598      	cmp	r8, r3
   26784:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   26788:	d203      	bcs.n	26792 <quorem+0x112>
   2678a:	f853 2904 	ldr.w	r2, [r3], #-4
   2678e:	2a00      	cmp	r2, #0
   26790:	d0f7      	beq.n	26782 <quorem+0x102>
   26792:	f8c9 4010 	str.w	r4, [r9, #16]
   26796:	4630      	mov	r0, r6
   26798:	b003      	add	sp, #12
   2679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2679e:	2000      	movs	r0, #0
   267a0:	b003      	add	sp, #12
   267a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267a6:	bf00      	nop

000267a8 <_dtoa_r>:
   267a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267ac:	ed2d 8b02 	vpush	{d8}
   267b0:	b08f      	sub	sp, #60	; 0x3c
   267b2:	ed8d 0b02 	vstr	d0, [sp, #8]
   267b6:	9101      	str	r1, [sp, #4]
   267b8:	6b81      	ldr	r1, [r0, #56]	; 0x38
   267ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   267bc:	9305      	str	r3, [sp, #20]
   267be:	ec57 6b10 	vmov	r6, r7, d0
   267c2:	4604      	mov	r4, r0
   267c4:	4693      	mov	fp, r2
   267c6:	b141      	cbz	r1, 267da <_dtoa_r+0x32>
   267c8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   267ca:	604a      	str	r2, [r1, #4]
   267cc:	2301      	movs	r3, #1
   267ce:	4093      	lsls	r3, r2
   267d0:	608b      	str	r3, [r1, #8]
   267d2:	f7ff f865 	bl	258a0 <_Bfree>
   267d6:	2300      	movs	r3, #0
   267d8:	63a3      	str	r3, [r4, #56]	; 0x38
   267da:	f1b7 0800 	subs.w	r8, r7, #0
   267de:	bfb4      	ite	lt
   267e0:	2301      	movlt	r3, #1
   267e2:	2300      	movge	r3, #0
   267e4:	602b      	str	r3, [r5, #0]
   267e6:	4bbe      	ldr	r3, [pc, #760]	; (26ae0 <_dtoa_r+0x338>)
   267e8:	bfbc      	itt	lt
   267ea:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   267ee:	f8cd 800c 	strlt.w	r8, [sp, #12]
   267f2:	ea33 0308 	bics.w	r3, r3, r8
   267f6:	f000 809f 	beq.w	26938 <_dtoa_r+0x190>
   267fa:	ed9d 8b02 	vldr	d8, [sp, #8]
   267fe:	eeb5 8b40 	vcmp.f64	d8, #0.0
   26802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26806:	d111      	bne.n	2682c <_dtoa_r+0x84>
   26808:	9a05      	ldr	r2, [sp, #20]
   2680a:	2301      	movs	r3, #1
   2680c:	6013      	str	r3, [r2, #0]
   2680e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26810:	2b00      	cmp	r3, #0
   26812:	f000 823f 	beq.w	26c94 <_dtoa_r+0x4ec>
   26816:	4bb3      	ldr	r3, [pc, #716]	; (26ae4 <_dtoa_r+0x33c>)
   26818:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2681a:	6013      	str	r3, [r2, #0]
   2681c:	3b01      	subs	r3, #1
   2681e:	9300      	str	r3, [sp, #0]
   26820:	9800      	ldr	r0, [sp, #0]
   26822:	b00f      	add	sp, #60	; 0x3c
   26824:	ecbd 8b02 	vpop	{d8}
   26828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2682c:	aa0c      	add	r2, sp, #48	; 0x30
   2682e:	a90d      	add	r1, sp, #52	; 0x34
   26830:	4620      	mov	r0, r4
   26832:	eeb0 0b48 	vmov.f64	d0, d8
   26836:	f7ff fb5f 	bl	25ef8 <__d2b>
   2683a:	ea5f 5318 	movs.w	r3, r8, lsr #20
   2683e:	4605      	mov	r5, r0
   26840:	f040 8092 	bne.w	26968 <_dtoa_r+0x1c0>
   26844:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   26848:	440b      	add	r3, r1
   2684a:	f203 4232 	addw	r2, r3, #1074	; 0x432
   2684e:	2a20      	cmp	r2, #32
   26850:	f340 82fa 	ble.w	26e48 <_dtoa_r+0x6a0>
   26854:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   26858:	fa08 f802 	lsl.w	r8, r8, r2
   2685c:	f203 4212 	addw	r2, r3, #1042	; 0x412
   26860:	40d6      	lsrs	r6, r2
   26862:	ea48 0206 	orr.w	r2, r8, r6
   26866:	ee07 2a10 	vmov	s14, r2
   2686a:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   2686e:	1e58      	subs	r0, r3, #1
   26870:	ee17 6a90 	vmov	r6, s15
   26874:	ec53 2b17 	vmov	r2, r3, d7
   26878:	f04f 0a01 	mov.w	sl, #1
   2687c:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   26880:	ed9f 3b91 	vldr	d3, [pc, #580]	; 26ac8 <_dtoa_r+0x320>
   26884:	ed9f 7b92 	vldr	d7, [pc, #584]	; 26ad0 <_dtoa_r+0x328>
   26888:	ed9f 5b93 	vldr	d5, [pc, #588]	; 26ad8 <_dtoa_r+0x330>
   2688c:	ee06 0a90 	vmov	s13, r0
   26890:	ec43 2b12 	vmov	d2, r2, r3
   26894:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   26898:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   2689c:	ee32 6b46 	vsub.f64	d6, d2, d6
   268a0:	eea6 7b03 	vfma.f64	d7, d6, d3
   268a4:	eea4 7b05 	vfma.f64	d7, d4, d5
   268a8:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   268ac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   268b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   268b4:	ee16 7a90 	vmov	r7, s13
   268b8:	d508      	bpl.n	268cc <_dtoa_r+0x124>
   268ba:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   268be:	eeb4 6b47 	vcmp.f64	d6, d7
   268c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   268c6:	bf18      	it	ne
   268c8:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   268cc:	2f16      	cmp	r7, #22
   268ce:	f200 8145 	bhi.w	26b5c <_dtoa_r+0x3b4>
   268d2:	4b85      	ldr	r3, [pc, #532]	; (26ae8 <_dtoa_r+0x340>)
   268d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   268d8:	ed93 7b00 	vldr	d7, [r3]
   268dc:	eeb4 8bc7 	vcmpe.f64	d8, d7
   268e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   268e4:	d557      	bpl.n	26996 <_dtoa_r+0x1ee>
   268e6:	1a09      	subs	r1, r1, r0
   268e8:	2300      	movs	r3, #0
   268ea:	f1b1 0801 	subs.w	r8, r1, #1
   268ee:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   268f2:	930a      	str	r3, [sp, #40]	; 0x28
   268f4:	f100 8139 	bmi.w	26b6a <_dtoa_r+0x3c2>
   268f8:	2300      	movs	r3, #0
   268fa:	9306      	str	r3, [sp, #24]
   268fc:	2f00      	cmp	r7, #0
   268fe:	da52      	bge.n	269a6 <_dtoa_r+0x1fe>
   26900:	9b06      	ldr	r3, [sp, #24]
   26902:	9704      	str	r7, [sp, #16]
   26904:	1bdb      	subs	r3, r3, r7
   26906:	9306      	str	r3, [sp, #24]
   26908:	427b      	negs	r3, r7
   2690a:	9308      	str	r3, [sp, #32]
   2690c:	9b01      	ldr	r3, [sp, #4]
   2690e:	2b09      	cmp	r3, #9
   26910:	f04f 0700 	mov.w	r7, #0
   26914:	d84e      	bhi.n	269b4 <_dtoa_r+0x20c>
   26916:	2b05      	cmp	r3, #5
   26918:	f340 829d 	ble.w	26e56 <_dtoa_r+0x6ae>
   2691c:	3b04      	subs	r3, #4
   2691e:	9301      	str	r3, [sp, #4]
   26920:	2600      	movs	r6, #0
   26922:	9b01      	ldr	r3, [sp, #4]
   26924:	1e9a      	subs	r2, r3, #2
   26926:	2a03      	cmp	r2, #3
   26928:	f200 8125 	bhi.w	26b76 <_dtoa_r+0x3ce>
   2692c:	e8df f012 	tbh	[pc, r2, lsl #1]
   26930:	03a703aa 	.word	0x03a703aa
   26934:	037e039d 	.word	0x037e039d
   26938:	9a05      	ldr	r2, [sp, #20]
   2693a:	f3c8 0813 	ubfx	r8, r8, #0, #20
   2693e:	f242 730f 	movw	r3, #9999	; 0x270f
   26942:	ea58 0806 	orrs.w	r8, r8, r6
   26946:	6013      	str	r3, [r2, #0]
   26948:	d11e      	bne.n	26988 <_dtoa_r+0x1e0>
   2694a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2694c:	2b00      	cmp	r3, #0
   2694e:	f000 8591 	beq.w	27474 <_dtoa_r+0xccc>
   26952:	4b66      	ldr	r3, [pc, #408]	; (26aec <_dtoa_r+0x344>)
   26954:	9300      	str	r3, [sp, #0]
   26956:	3308      	adds	r3, #8
   26958:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2695a:	9800      	ldr	r0, [sp, #0]
   2695c:	6013      	str	r3, [r2, #0]
   2695e:	b00f      	add	sp, #60	; 0x3c
   26960:	ecbd 8b02 	vpop	{d8}
   26964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26968:	ee18 6a90 	vmov	r6, s17
   2696c:	f3c6 0613 	ubfx	r6, r6, #0, #20
   26970:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   26974:	ec53 2b18 	vmov	r2, r3, d8
   26978:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   2697c:	990c      	ldr	r1, [sp, #48]	; 0x30
   2697e:	f04f 0a00 	mov.w	sl, #0
   26982:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   26986:	e77b      	b.n	26880 <_dtoa_r+0xd8>
   26988:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2698a:	2b00      	cmp	r3, #0
   2698c:	f040 833b 	bne.w	27006 <_dtoa_r+0x85e>
   26990:	4b57      	ldr	r3, [pc, #348]	; (26af0 <_dtoa_r+0x348>)
   26992:	9300      	str	r3, [sp, #0]
   26994:	e744      	b.n	26820 <_dtoa_r+0x78>
   26996:	1a09      	subs	r1, r1, r0
   26998:	2300      	movs	r3, #0
   2699a:	f1b1 0801 	subs.w	r8, r1, #1
   2699e:	930a      	str	r3, [sp, #40]	; 0x28
   269a0:	f100 80e3 	bmi.w	26b6a <_dtoa_r+0x3c2>
   269a4:	9306      	str	r3, [sp, #24]
   269a6:	2300      	movs	r3, #0
   269a8:	9308      	str	r3, [sp, #32]
   269aa:	9b01      	ldr	r3, [sp, #4]
   269ac:	9704      	str	r7, [sp, #16]
   269ae:	2b09      	cmp	r3, #9
   269b0:	44b8      	add	r8, r7
   269b2:	d9b0      	bls.n	26916 <_dtoa_r+0x16e>
   269b4:	2300      	movs	r3, #0
   269b6:	2601      	movs	r6, #1
   269b8:	9301      	str	r3, [sp, #4]
   269ba:	9607      	str	r6, [sp, #28]
   269bc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   269c0:	469b      	mov	fp, r3
   269c2:	2100      	movs	r1, #0
   269c4:	63e1      	str	r1, [r4, #60]	; 0x3c
   269c6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   269ca:	4620      	mov	r0, r4
   269cc:	f7fe ff42 	bl	25854 <_Balloc>
   269d0:	9000      	str	r0, [sp, #0]
   269d2:	2800      	cmp	r0, #0
   269d4:	f000 8540 	beq.w	27458 <_dtoa_r+0xcb0>
   269d8:	9b00      	ldr	r3, [sp, #0]
   269da:	63a3      	str	r3, [r4, #56]	; 0x38
   269dc:	f1b9 0f0e 	cmp.w	r9, #14
   269e0:	f200 80dc 	bhi.w	26b9c <_dtoa_r+0x3f4>
   269e4:	2e00      	cmp	r6, #0
   269e6:	f000 80d9 	beq.w	26b9c <_dtoa_r+0x3f4>
   269ea:	9b04      	ldr	r3, [sp, #16]
   269ec:	2b00      	cmp	r3, #0
   269ee:	f340 83de 	ble.w	271ae <_dtoa_r+0xa06>
   269f2:	4a3d      	ldr	r2, [pc, #244]	; (26ae8 <_dtoa_r+0x340>)
   269f4:	f003 010f 	and.w	r1, r3, #15
   269f8:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   269fc:	ed92 7b00 	vldr	d7, [r2]
   26a00:	111a      	asrs	r2, r3, #4
   26a02:	05db      	lsls	r3, r3, #23
   26a04:	f140 8382 	bpl.w	2710c <_dtoa_r+0x964>
   26a08:	493a      	ldr	r1, [pc, #232]	; (26af4 <_dtoa_r+0x34c>)
   26a0a:	ed91 6b08 	vldr	d6, [r1, #32]
   26a0e:	f002 020f 	and.w	r2, r2, #15
   26a12:	2003      	movs	r0, #3
   26a14:	ee88 5b06 	vdiv.f64	d5, d8, d6
   26a18:	b15a      	cbz	r2, 26a32 <_dtoa_r+0x28a>
   26a1a:	4936      	ldr	r1, [pc, #216]	; (26af4 <_dtoa_r+0x34c>)
   26a1c:	07d6      	lsls	r6, r2, #31
   26a1e:	d504      	bpl.n	26a2a <_dtoa_r+0x282>
   26a20:	ed91 6b00 	vldr	d6, [r1]
   26a24:	3001      	adds	r0, #1
   26a26:	ee27 7b06 	vmul.f64	d7, d7, d6
   26a2a:	1052      	asrs	r2, r2, #1
   26a2c:	f101 0108 	add.w	r1, r1, #8
   26a30:	d1f4      	bne.n	26a1c <_dtoa_r+0x274>
   26a32:	ee85 6b07 	vdiv.f64	d6, d5, d7
   26a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26a38:	b13b      	cbz	r3, 26a4a <_dtoa_r+0x2a2>
   26a3a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   26a3e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   26a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26a46:	f100 84ae 	bmi.w	273a6 <_dtoa_r+0xbfe>
   26a4a:	ee07 0a90 	vmov	s15, r0
   26a4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   26a52:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   26a56:	eea5 7b06 	vfma.f64	d7, d5, d6
   26a5a:	ee17 2a90 	vmov	r2, s15
   26a5e:	ec51 0b17 	vmov	r0, r1, d7
   26a62:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   26a66:	f1b9 0f00 	cmp.w	r9, #0
   26a6a:	f000 8388 	beq.w	2717e <_dtoa_r+0x9d6>
   26a6e:	9e04      	ldr	r6, [sp, #16]
   26a70:	464a      	mov	r2, r9
   26a72:	9b07      	ldr	r3, [sp, #28]
   26a74:	2b00      	cmp	r3, #0
   26a76:	f000 8447 	beq.w	27308 <_dtoa_r+0xb60>
   26a7a:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   26a7e:	4b1a      	ldr	r3, [pc, #104]	; (26ae8 <_dtoa_r+0x340>)
   26a80:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   26a84:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   26a88:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   26a8c:	ee36 7b47 	vsub.f64	d7, d6, d7
   26a90:	ed1c 6b02 	vldr	d6, [ip, #-8]
   26a94:	ee83 5b06 	vdiv.f64	d5, d3, d6
   26a98:	ec41 0b16 	vmov	d6, r0, r1
   26a9c:	ee14 0a90 	vmov	r0, s9
   26aa0:	ee35 5b46 	vsub.f64	d5, d5, d6
   26aa4:	9900      	ldr	r1, [sp, #0]
   26aa6:	eeb4 5bc7 	vcmpe.f64	d5, d7
   26aaa:	3030      	adds	r0, #48	; 0x30
   26aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26ab0:	f801 0b01 	strb.w	r0, [r1], #1
   26ab4:	f300 84ac 	bgt.w	27410 <_dtoa_r+0xc68>
   26ab8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   26abc:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26ac0:	f04f 0c00 	mov.w	ip, #0
   26ac4:	e031      	b.n	26b2a <_dtoa_r+0x382>
   26ac6:	bf00      	nop
   26ac8:	636f4361 	.word	0x636f4361
   26acc:	3fd287a7 	.word	0x3fd287a7
   26ad0:	8b60c8b3 	.word	0x8b60c8b3
   26ad4:	3fc68a28 	.word	0x3fc68a28
   26ad8:	509f79fb 	.word	0x509f79fb
   26adc:	3fd34413 	.word	0x3fd34413
   26ae0:	7ff00000 	.word	0x7ff00000
   26ae4:	20003aad 	.word	0x20003aad
   26ae8:	200003f0 	.word	0x200003f0
   26aec:	20002bbc 	.word	0x20002bbc
   26af0:	20002bc8 	.word	0x20002bc8
   26af4:	200003c8 	.word	0x200003c8
   26af8:	f10c 0c01 	add.w	ip, ip, #1
   26afc:	4594      	cmp	ip, r2
   26afe:	da4d      	bge.n	26b9c <_dtoa_r+0x3f4>
   26b00:	ee27 7b04 	vmul.f64	d7, d7, d4
   26b04:	ee25 5b04 	vmul.f64	d5, d5, d4
   26b08:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   26b0c:	ee16 3a90 	vmov	r3, s13
   26b10:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   26b14:	3330      	adds	r3, #48	; 0x30
   26b16:	ee37 7b43 	vsub.f64	d7, d7, d3
   26b1a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   26b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26b22:	f801 3b01 	strb.w	r3, [r1], #1
   26b26:	f100 8473 	bmi.w	27410 <_dtoa_r+0xc68>
   26b2a:	ee32 6b47 	vsub.f64	d6, d2, d7
   26b2e:	eeb4 6bc5 	vcmpe.f64	d6, d5
   26b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26b36:	d5df      	bpl.n	26af8 <_dtoa_r+0x350>
   26b38:	9a00      	ldr	r2, [sp, #0]
   26b3a:	9604      	str	r6, [sp, #16]
   26b3c:	e002      	b.n	26b44 <_dtoa_r+0x39c>
   26b3e:	428a      	cmp	r2, r1
   26b40:	f000 8450 	beq.w	273e4 <_dtoa_r+0xc3c>
   26b44:	4689      	mov	r9, r1
   26b46:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   26b4a:	2b39      	cmp	r3, #57	; 0x39
   26b4c:	d0f7      	beq.n	26b3e <_dtoa_r+0x396>
   26b4e:	3301      	adds	r3, #1
   26b50:	b2db      	uxtb	r3, r3
   26b52:	700b      	strb	r3, [r1, #0]
   26b54:	9b04      	ldr	r3, [sp, #16]
   26b56:	3301      	adds	r3, #1
   26b58:	9304      	str	r3, [sp, #16]
   26b5a:	e155      	b.n	26e08 <_dtoa_r+0x660>
   26b5c:	1a09      	subs	r1, r1, r0
   26b5e:	2301      	movs	r3, #1
   26b60:	f1b1 0801 	subs.w	r8, r1, #1
   26b64:	930a      	str	r3, [sp, #40]	; 0x28
   26b66:	f57f aec7 	bpl.w	268f8 <_dtoa_r+0x150>
   26b6a:	f1c1 0301 	rsb	r3, r1, #1
   26b6e:	9306      	str	r3, [sp, #24]
   26b70:	f04f 0800 	mov.w	r8, #0
   26b74:	e6c2      	b.n	268fc <_dtoa_r+0x154>
   26b76:	2600      	movs	r6, #0
   26b78:	63e6      	str	r6, [r4, #60]	; 0x3c
   26b7a:	4631      	mov	r1, r6
   26b7c:	4620      	mov	r0, r4
   26b7e:	f7fe fe69 	bl	25854 <_Balloc>
   26b82:	9000      	str	r0, [sp, #0]
   26b84:	2800      	cmp	r0, #0
   26b86:	f000 8467 	beq.w	27458 <_dtoa_r+0xcb0>
   26b8a:	9b00      	ldr	r3, [sp, #0]
   26b8c:	63a3      	str	r3, [r4, #56]	; 0x38
   26b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26b92:	930b      	str	r3, [sp, #44]	; 0x2c
   26b94:	4699      	mov	r9, r3
   26b96:	2301      	movs	r3, #1
   26b98:	46b3      	mov	fp, r6
   26b9a:	9307      	str	r3, [sp, #28]
   26b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   26b9e:	2a00      	cmp	r2, #0
   26ba0:	db55      	blt.n	26c4e <_dtoa_r+0x4a6>
   26ba2:	9904      	ldr	r1, [sp, #16]
   26ba4:	290e      	cmp	r1, #14
   26ba6:	dc52      	bgt.n	26c4e <_dtoa_r+0x4a6>
   26ba8:	4bb7      	ldr	r3, [pc, #732]	; (26e88 <_dtoa_r+0x6e0>)
   26baa:	f1bb 0f00 	cmp.w	fp, #0
   26bae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   26bb2:	ed93 6b00 	vldr	d6, [r3]
   26bb6:	da15      	bge.n	26be4 <_dtoa_r+0x43c>
   26bb8:	f1b9 0f00 	cmp.w	r9, #0
   26bbc:	dc12      	bgt.n	26be4 <_dtoa_r+0x43c>
   26bbe:	f040 82f2 	bne.w	271a6 <_dtoa_r+0x9fe>
   26bc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   26bc6:	ee26 7b07 	vmul.f64	d7, d6, d7
   26bca:	eeb4 8bc7 	vcmpe.f64	d8, d7
   26bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26bd2:	46ca      	mov	sl, r9
   26bd4:	464e      	mov	r6, r9
   26bd6:	f200 826d 	bhi.w	270b4 <_dtoa_r+0x90c>
   26bda:	f8dd 8000 	ldr.w	r8, [sp]
   26bde:	ea6f 0b0b 	mvn.w	fp, fp
   26be2:	e270      	b.n	270c6 <_dtoa_r+0x91e>
   26be4:	ee88 7b06 	vdiv.f64	d7, d8, d6
   26be8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   26bec:	9900      	ldr	r1, [sp, #0]
   26bee:	ee17 3a10 	vmov	r3, s14
   26bf2:	f1b9 0f01 	cmp.w	r9, #1
   26bf6:	f103 0330 	add.w	r3, r3, #48	; 0x30
   26bfa:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   26bfe:	f801 3b01 	strb.w	r3, [r1], #1
   26c02:	eea5 8b46 	vfms.f64	d8, d5, d6
   26c06:	f000 8334 	beq.w	27272 <_dtoa_r+0xaca>
   26c0a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26c0e:	2301      	movs	r3, #1
   26c10:	e011      	b.n	26c36 <_dtoa_r+0x48e>
   26c12:	ee88 7b06 	vdiv.f64	d7, d8, d6
   26c16:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   26c1a:	3301      	adds	r3, #1
   26c1c:	ee17 2a10 	vmov	r2, s14
   26c20:	454b      	cmp	r3, r9
   26c22:	f102 0230 	add.w	r2, r2, #48	; 0x30
   26c26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   26c2a:	f801 2b01 	strb.w	r2, [r1], #1
   26c2e:	eea5 8b46 	vfms.f64	d8, d5, d6
   26c32:	f000 831e 	beq.w	27272 <_dtoa_r+0xaca>
   26c36:	ee28 8b04 	vmul.f64	d8, d8, d4
   26c3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
   26c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26c42:	d1e6      	bne.n	26c12 <_dtoa_r+0x46a>
   26c44:	9b04      	ldr	r3, [sp, #16]
   26c46:	3301      	adds	r3, #1
   26c48:	9304      	str	r3, [sp, #16]
   26c4a:	4689      	mov	r9, r1
   26c4c:	e0dc      	b.n	26e08 <_dtoa_r+0x660>
   26c4e:	9b07      	ldr	r3, [sp, #28]
   26c50:	b343      	cbz	r3, 26ca4 <_dtoa_r+0x4fc>
   26c52:	9b01      	ldr	r3, [sp, #4]
   26c54:	2b01      	cmp	r3, #1
   26c56:	f340 8276 	ble.w	27146 <_dtoa_r+0x99e>
   26c5a:	9b08      	ldr	r3, [sp, #32]
   26c5c:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   26c60:	4553      	cmp	r3, sl
   26c62:	f280 823f 	bge.w	270e4 <_dtoa_r+0x93c>
   26c66:	9b08      	ldr	r3, [sp, #32]
   26c68:	f8cd a020 	str.w	sl, [sp, #32]
   26c6c:	ebaa 0203 	sub.w	r2, sl, r3
   26c70:	4417      	add	r7, r2
   26c72:	f04f 0a00 	mov.w	sl, #0
   26c76:	f1b9 0f00 	cmp.w	r9, #0
   26c7a:	f2c0 8325 	blt.w	272c8 <_dtoa_r+0xb20>
   26c7e:	9b06      	ldr	r3, [sp, #24]
   26c80:	9309      	str	r3, [sp, #36]	; 0x24
   26c82:	444b      	add	r3, r9
   26c84:	44c8      	add	r8, r9
   26c86:	9306      	str	r3, [sp, #24]
   26c88:	2101      	movs	r1, #1
   26c8a:	4620      	mov	r0, r4
   26c8c:	f7fe feb4 	bl	259f8 <__i2b>
   26c90:	4606      	mov	r6, r0
   26c92:	e00c      	b.n	26cae <_dtoa_r+0x506>
   26c94:	4b7d      	ldr	r3, [pc, #500]	; (26e8c <_dtoa_r+0x6e4>)
   26c96:	9300      	str	r3, [sp, #0]
   26c98:	9800      	ldr	r0, [sp, #0]
   26c9a:	b00f      	add	sp, #60	; 0x3c
   26c9c:	ecbd 8b02 	vpop	{d8}
   26ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ca4:	9b06      	ldr	r3, [sp, #24]
   26ca6:	f8dd a020 	ldr.w	sl, [sp, #32]
   26caa:	9e07      	ldr	r6, [sp, #28]
   26cac:	9309      	str	r3, [sp, #36]	; 0x24
   26cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26cb0:	b16b      	cbz	r3, 26cce <_dtoa_r+0x526>
   26cb2:	f1b8 0f00 	cmp.w	r8, #0
   26cb6:	dd0a      	ble.n	26cce <_dtoa_r+0x526>
   26cb8:	4543      	cmp	r3, r8
   26cba:	9906      	ldr	r1, [sp, #24]
   26cbc:	461a      	mov	r2, r3
   26cbe:	bfa8      	it	ge
   26cc0:	4642      	movge	r2, r8
   26cc2:	1a89      	subs	r1, r1, r2
   26cc4:	1a9b      	subs	r3, r3, r2
   26cc6:	9106      	str	r1, [sp, #24]
   26cc8:	9309      	str	r3, [sp, #36]	; 0x24
   26cca:	eba8 0802 	sub.w	r8, r8, r2
   26cce:	9b08      	ldr	r3, [sp, #32]
   26cd0:	b163      	cbz	r3, 26cec <_dtoa_r+0x544>
   26cd2:	9b07      	ldr	r3, [sp, #28]
   26cd4:	2b00      	cmp	r3, #0
   26cd6:	f000 82a7 	beq.w	27228 <_dtoa_r+0xa80>
   26cda:	f1ba 0f00 	cmp.w	sl, #0
   26cde:	f300 8204 	bgt.w	270ea <_dtoa_r+0x942>
   26ce2:	9b08      	ldr	r3, [sp, #32]
   26ce4:	ebb3 020a 	subs.w	r2, r3, sl
   26ce8:	f040 82ff 	bne.w	272ea <_dtoa_r+0xb42>
   26cec:	2101      	movs	r1, #1
   26cee:	4620      	mov	r0, r4
   26cf0:	f7fe fe82 	bl	259f8 <__i2b>
   26cf4:	2f00      	cmp	r7, #0
   26cf6:	4682      	mov	sl, r0
   26cf8:	f300 80af 	bgt.w	26e5a <_dtoa_r+0x6b2>
   26cfc:	9b01      	ldr	r3, [sp, #4]
   26cfe:	2b01      	cmp	r3, #1
   26d00:	f340 8187 	ble.w	27012 <_dtoa_r+0x86a>
   26d04:	2300      	movs	r3, #0
   26d06:	9308      	str	r3, [sp, #32]
   26d08:	2001      	movs	r0, #1
   26d0a:	2f00      	cmp	r7, #0
   26d0c:	f040 80b1 	bne.w	26e72 <_dtoa_r+0x6ca>
   26d10:	4440      	add	r0, r8
   26d12:	f010 001f 	ands.w	r0, r0, #31
   26d16:	f000 817a 	beq.w	2700e <_dtoa_r+0x866>
   26d1a:	f1c0 0220 	rsb	r2, r0, #32
   26d1e:	2a04      	cmp	r2, #4
   26d20:	f300 8088 	bgt.w	26e34 <_dtoa_r+0x68c>
   26d24:	f040 81f6 	bne.w	27114 <_dtoa_r+0x96c>
   26d28:	9b06      	ldr	r3, [sp, #24]
   26d2a:	2b00      	cmp	r3, #0
   26d2c:	dd05      	ble.n	26d3a <_dtoa_r+0x592>
   26d2e:	4629      	mov	r1, r5
   26d30:	461a      	mov	r2, r3
   26d32:	4620      	mov	r0, r4
   26d34:	f7fe ff9c 	bl	25c70 <__lshift>
   26d38:	4605      	mov	r5, r0
   26d3a:	f1b8 0f00 	cmp.w	r8, #0
   26d3e:	dd05      	ble.n	26d4c <_dtoa_r+0x5a4>
   26d40:	4651      	mov	r1, sl
   26d42:	4642      	mov	r2, r8
   26d44:	4620      	mov	r0, r4
   26d46:	f7fe ff93 	bl	25c70 <__lshift>
   26d4a:	4682      	mov	sl, r0
   26d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26d4e:	2b00      	cmp	r3, #0
   26d50:	f040 813f 	bne.w	26fd2 <_dtoa_r+0x82a>
   26d54:	f1b9 0f00 	cmp.w	r9, #0
   26d58:	f340 8125 	ble.w	26fa6 <_dtoa_r+0x7fe>
   26d5c:	9b07      	ldr	r3, [sp, #28]
   26d5e:	2b00      	cmp	r3, #0
   26d60:	f040 80a3 	bne.w	26eaa <_dtoa_r+0x702>
   26d64:	9b04      	ldr	r3, [sp, #16]
   26d66:	3301      	adds	r3, #1
   26d68:	9304      	str	r3, [sp, #16]
   26d6a:	f8dd 8000 	ldr.w	r8, [sp]
   26d6e:	2701      	movs	r7, #1
   26d70:	e007      	b.n	26d82 <_dtoa_r+0x5da>
   26d72:	4629      	mov	r1, r5
   26d74:	2300      	movs	r3, #0
   26d76:	220a      	movs	r2, #10
   26d78:	4620      	mov	r0, r4
   26d7a:	f7fe fd9b 	bl	258b4 <__multadd>
   26d7e:	3701      	adds	r7, #1
   26d80:	4605      	mov	r5, r0
   26d82:	4651      	mov	r1, sl
   26d84:	4628      	mov	r0, r5
   26d86:	f7ff fc7b 	bl	26680 <quorem>
   26d8a:	45b9      	cmp	r9, r7
   26d8c:	f100 0030 	add.w	r0, r0, #48	; 0x30
   26d90:	f808 0b01 	strb.w	r0, [r8], #1
   26d94:	dced      	bgt.n	26d72 <_dtoa_r+0x5ca>
   26d96:	f1b9 0f00 	cmp.w	r9, #0
   26d9a:	9a00      	ldr	r2, [sp, #0]
   26d9c:	bfcc      	ite	gt
   26d9e:	46cb      	movgt	fp, r9
   26da0:	f04f 0b01 	movle.w	fp, #1
   26da4:	4603      	mov	r3, r0
   26da6:	4493      	add	fp, r2
   26da8:	2700      	movs	r7, #0
   26daa:	4629      	mov	r1, r5
   26dac:	2201      	movs	r2, #1
   26dae:	4620      	mov	r0, r4
   26db0:	9301      	str	r3, [sp, #4]
   26db2:	f7fe ff5d 	bl	25c70 <__lshift>
   26db6:	4651      	mov	r1, sl
   26db8:	4605      	mov	r5, r0
   26dba:	f7fe ffd1 	bl	25d60 <__mcmp>
   26dbe:	2800      	cmp	r0, #0
   26dc0:	f340 81af 	ble.w	27122 <_dtoa_r+0x97a>
   26dc4:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   26dc8:	9a00      	ldr	r2, [sp, #0]
   26dca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   26dce:	e004      	b.n	26dda <_dtoa_r+0x632>
   26dd0:	455a      	cmp	r2, fp
   26dd2:	f000 81b1 	beq.w	27138 <_dtoa_r+0x990>
   26dd6:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   26dda:	2b39      	cmp	r3, #57	; 0x39
   26ddc:	f10b 0901 	add.w	r9, fp, #1
   26de0:	d0f6      	beq.n	26dd0 <_dtoa_r+0x628>
   26de2:	3301      	adds	r3, #1
   26de4:	f88b 3000 	strb.w	r3, [fp]
   26de8:	4651      	mov	r1, sl
   26dea:	4620      	mov	r0, r4
   26dec:	f7fe fd58 	bl	258a0 <_Bfree>
   26df0:	b156      	cbz	r6, 26e08 <_dtoa_r+0x660>
   26df2:	b12f      	cbz	r7, 26e00 <_dtoa_r+0x658>
   26df4:	42b7      	cmp	r7, r6
   26df6:	d003      	beq.n	26e00 <_dtoa_r+0x658>
   26df8:	4639      	mov	r1, r7
   26dfa:	4620      	mov	r0, r4
   26dfc:	f7fe fd50 	bl	258a0 <_Bfree>
   26e00:	4631      	mov	r1, r6
   26e02:	4620      	mov	r0, r4
   26e04:	f7fe fd4c 	bl	258a0 <_Bfree>
   26e08:	4629      	mov	r1, r5
   26e0a:	4620      	mov	r0, r4
   26e0c:	f7fe fd48 	bl	258a0 <_Bfree>
   26e10:	2300      	movs	r3, #0
   26e12:	f889 3000 	strb.w	r3, [r9]
   26e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   26e1a:	601a      	str	r2, [r3, #0]
   26e1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26e1e:	2b00      	cmp	r3, #0
   26e20:	f43f acfe 	beq.w	26820 <_dtoa_r+0x78>
   26e24:	9800      	ldr	r0, [sp, #0]
   26e26:	f8c3 9000 	str.w	r9, [r3]
   26e2a:	b00f      	add	sp, #60	; 0x3c
   26e2c:	ecbd 8b02 	vpop	{d8}
   26e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e34:	f1c0 001c 	rsb	r0, r0, #28
   26e38:	9b06      	ldr	r3, [sp, #24]
   26e3a:	4403      	add	r3, r0
   26e3c:	9306      	str	r3, [sp, #24]
   26e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26e40:	4403      	add	r3, r0
   26e42:	9309      	str	r3, [sp, #36]	; 0x24
   26e44:	4480      	add	r8, r0
   26e46:	e76f      	b.n	26d28 <_dtoa_r+0x580>
   26e48:	f1c2 0220 	rsb	r2, r2, #32
   26e4c:	fa06 f202 	lsl.w	r2, r6, r2
   26e50:	ee07 2a10 	vmov	s14, r2
   26e54:	e509      	b.n	2686a <_dtoa_r+0xc2>
   26e56:	2601      	movs	r6, #1
   26e58:	e563      	b.n	26922 <_dtoa_r+0x17a>
   26e5a:	4601      	mov	r1, r0
   26e5c:	463a      	mov	r2, r7
   26e5e:	4620      	mov	r0, r4
   26e60:	f7fe fea6 	bl	25bb0 <__pow5mult>
   26e64:	9b01      	ldr	r3, [sp, #4]
   26e66:	2b01      	cmp	r3, #1
   26e68:	4682      	mov	sl, r0
   26e6a:	f340 81c5 	ble.w	271f8 <_dtoa_r+0xa50>
   26e6e:	2300      	movs	r3, #0
   26e70:	9308      	str	r3, [sp, #32]
   26e72:	f8da 2010 	ldr.w	r2, [sl, #16]
   26e76:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   26e7a:	6910      	ldr	r0, [r2, #16]
   26e7c:	f7fe fd6c 	bl	25958 <__hi0bits>
   26e80:	f1c0 0020 	rsb	r0, r0, #32
   26e84:	e744      	b.n	26d10 <_dtoa_r+0x568>
   26e86:	bf00      	nop
   26e88:	200003f0 	.word	0x200003f0
   26e8c:	20003aac 	.word	0x20003aac
   26e90:	4631      	mov	r1, r6
   26e92:	2300      	movs	r3, #0
   26e94:	220a      	movs	r2, #10
   26e96:	4620      	mov	r0, r4
   26e98:	f7fe fd0c 	bl	258b4 <__multadd>
   26e9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26e9e:	2b00      	cmp	r3, #0
   26ea0:	4606      	mov	r6, r0
   26ea2:	f340 82ce 	ble.w	27442 <_dtoa_r+0xc9a>
   26ea6:	9704      	str	r7, [sp, #16]
   26ea8:	4699      	mov	r9, r3
   26eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26eac:	2b00      	cmp	r3, #0
   26eae:	dd05      	ble.n	26ebc <_dtoa_r+0x714>
   26eb0:	4631      	mov	r1, r6
   26eb2:	461a      	mov	r2, r3
   26eb4:	4620      	mov	r0, r4
   26eb6:	f7fe fedb 	bl	25c70 <__lshift>
   26eba:	4606      	mov	r6, r0
   26ebc:	9b08      	ldr	r3, [sp, #32]
   26ebe:	2b00      	cmp	r3, #0
   26ec0:	f040 81eb 	bne.w	2729a <_dtoa_r+0xaf2>
   26ec4:	46b0      	mov	r8, r6
   26ec6:	9b02      	ldr	r3, [sp, #8]
   26ec8:	9f00      	ldr	r7, [sp, #0]
   26eca:	f003 0201 	and.w	r2, r3, #1
   26ece:	1e7b      	subs	r3, r7, #1
   26ed0:	444b      	add	r3, r9
   26ed2:	9308      	str	r3, [sp, #32]
   26ed4:	9b01      	ldr	r3, [sp, #4]
   26ed6:	920a      	str	r2, [sp, #40]	; 0x28
   26ed8:	4313      	orrs	r3, r2
   26eda:	9309      	str	r3, [sp, #36]	; 0x24
   26edc:	4651      	mov	r1, sl
   26ede:	4628      	mov	r0, r5
   26ee0:	f7ff fbce 	bl	26680 <quorem>
   26ee4:	4631      	mov	r1, r6
   26ee6:	4683      	mov	fp, r0
   26ee8:	4628      	mov	r0, r5
   26eea:	f7fe ff39 	bl	25d60 <__mcmp>
   26eee:	4642      	mov	r2, r8
   26ef0:	4651      	mov	r1, sl
   26ef2:	4681      	mov	r9, r0
   26ef4:	4620      	mov	r0, r4
   26ef6:	f7fe ff55 	bl	25da4 <__mdiff>
   26efa:	68c2      	ldr	r2, [r0, #12]
   26efc:	4601      	mov	r1, r0
   26efe:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   26f02:	2a00      	cmp	r2, #0
   26f04:	d142      	bne.n	26f8c <_dtoa_r+0x7e4>
   26f06:	e9cd 0306 	strd	r0, r3, [sp, #24]
   26f0a:	4628      	mov	r0, r5
   26f0c:	f7fe ff28 	bl	25d60 <__mcmp>
   26f10:	9906      	ldr	r1, [sp, #24]
   26f12:	9002      	str	r0, [sp, #8]
   26f14:	4620      	mov	r0, r4
   26f16:	f7fe fcc3 	bl	258a0 <_Bfree>
   26f1a:	9a02      	ldr	r2, [sp, #8]
   26f1c:	9b07      	ldr	r3, [sp, #28]
   26f1e:	b91a      	cbnz	r2, 26f28 <_dtoa_r+0x780>
   26f20:	9909      	ldr	r1, [sp, #36]	; 0x24
   26f22:	2900      	cmp	r1, #0
   26f24:	f000 827e 	beq.w	27424 <_dtoa_r+0xc7c>
   26f28:	f1b9 0f00 	cmp.w	r9, #0
   26f2c:	f2c0 8183 	blt.w	27236 <_dtoa_r+0xa8e>
   26f30:	9901      	ldr	r1, [sp, #4]
   26f32:	ea49 0901 	orr.w	r9, r9, r1
   26f36:	990a      	ldr	r1, [sp, #40]	; 0x28
   26f38:	ea51 0909 	orrs.w	r9, r1, r9
   26f3c:	f000 817b 	beq.w	27236 <_dtoa_r+0xa8e>
   26f40:	2a00      	cmp	r2, #0
   26f42:	f300 81c6 	bgt.w	272d2 <_dtoa_r+0xb2a>
   26f46:	9a08      	ldr	r2, [sp, #32]
   26f48:	703b      	strb	r3, [r7, #0]
   26f4a:	f107 0901 	add.w	r9, r7, #1
   26f4e:	4297      	cmp	r7, r2
   26f50:	46cb      	mov	fp, r9
   26f52:	f000 81c4 	beq.w	272de <_dtoa_r+0xb36>
   26f56:	4629      	mov	r1, r5
   26f58:	2300      	movs	r3, #0
   26f5a:	220a      	movs	r2, #10
   26f5c:	4620      	mov	r0, r4
   26f5e:	f7fe fca9 	bl	258b4 <__multadd>
   26f62:	4546      	cmp	r6, r8
   26f64:	4605      	mov	r5, r0
   26f66:	4631      	mov	r1, r6
   26f68:	f04f 0300 	mov.w	r3, #0
   26f6c:	f04f 020a 	mov.w	r2, #10
   26f70:	4620      	mov	r0, r4
   26f72:	d012      	beq.n	26f9a <_dtoa_r+0x7f2>
   26f74:	f7fe fc9e 	bl	258b4 <__multadd>
   26f78:	4641      	mov	r1, r8
   26f7a:	4606      	mov	r6, r0
   26f7c:	2300      	movs	r3, #0
   26f7e:	220a      	movs	r2, #10
   26f80:	4620      	mov	r0, r4
   26f82:	f7fe fc97 	bl	258b4 <__multadd>
   26f86:	464f      	mov	r7, r9
   26f88:	4680      	mov	r8, r0
   26f8a:	e7a7      	b.n	26edc <_dtoa_r+0x734>
   26f8c:	4620      	mov	r0, r4
   26f8e:	9302      	str	r3, [sp, #8]
   26f90:	f7fe fc86 	bl	258a0 <_Bfree>
   26f94:	9b02      	ldr	r3, [sp, #8]
   26f96:	2201      	movs	r2, #1
   26f98:	e7c6      	b.n	26f28 <_dtoa_r+0x780>
   26f9a:	f7fe fc8b 	bl	258b4 <__multadd>
   26f9e:	464f      	mov	r7, r9
   26fa0:	4606      	mov	r6, r0
   26fa2:	4680      	mov	r8, r0
   26fa4:	e79a      	b.n	26edc <_dtoa_r+0x734>
   26fa6:	9b01      	ldr	r3, [sp, #4]
   26fa8:	2b02      	cmp	r3, #2
   26faa:	dc71      	bgt.n	27090 <_dtoa_r+0x8e8>
   26fac:	9b07      	ldr	r3, [sp, #28]
   26fae:	2b00      	cmp	r3, #0
   26fb0:	f47f af7b 	bne.w	26eaa <_dtoa_r+0x702>
   26fb4:	9b04      	ldr	r3, [sp, #16]
   26fb6:	4651      	mov	r1, sl
   26fb8:	3301      	adds	r3, #1
   26fba:	4628      	mov	r0, r5
   26fbc:	9304      	str	r3, [sp, #16]
   26fbe:	f7ff fb5f 	bl	26680 <quorem>
   26fc2:	f8dd b000 	ldr.w	fp, [sp]
   26fc6:	f100 0330 	add.w	r3, r0, #48	; 0x30
   26fca:	f80b 3b01 	strb.w	r3, [fp], #1
   26fce:	2700      	movs	r7, #0
   26fd0:	e6eb      	b.n	26daa <_dtoa_r+0x602>
   26fd2:	4651      	mov	r1, sl
   26fd4:	4628      	mov	r0, r5
   26fd6:	f7fe fec3 	bl	25d60 <__mcmp>
   26fda:	2800      	cmp	r0, #0
   26fdc:	f6bf aeba 	bge.w	26d54 <_dtoa_r+0x5ac>
   26fe0:	4629      	mov	r1, r5
   26fe2:	2300      	movs	r3, #0
   26fe4:	220a      	movs	r2, #10
   26fe6:	4620      	mov	r0, r4
   26fe8:	f7fe fc64 	bl	258b4 <__multadd>
   26fec:	9b04      	ldr	r3, [sp, #16]
   26fee:	1e5f      	subs	r7, r3, #1
   26ff0:	9b07      	ldr	r3, [sp, #28]
   26ff2:	4605      	mov	r5, r0
   26ff4:	2b00      	cmp	r3, #0
   26ff6:	f47f af4b 	bne.w	26e90 <_dtoa_r+0x6e8>
   26ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26ffc:	2b00      	cmp	r3, #0
   26ffe:	f340 8218 	ble.w	27432 <_dtoa_r+0xc8a>
   27002:	4699      	mov	r9, r3
   27004:	e6b1      	b.n	26d6a <_dtoa_r+0x5c2>
   27006:	4bbc      	ldr	r3, [pc, #752]	; (272f8 <_dtoa_r+0xb50>)
   27008:	9300      	str	r3, [sp, #0]
   2700a:	3303      	adds	r3, #3
   2700c:	e4a4      	b.n	26958 <_dtoa_r+0x1b0>
   2700e:	201c      	movs	r0, #28
   27010:	e712      	b.n	26e38 <_dtoa_r+0x690>
   27012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   27016:	2800      	cmp	r0, #0
   27018:	f47f ae74 	bne.w	26d04 <_dtoa_r+0x55c>
   2701c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   27020:	2a00      	cmp	r2, #0
   27022:	f000 80f4 	beq.w	2720e <_dtoa_r+0xa66>
   27026:	9b02      	ldr	r3, [sp, #8]
   27028:	9308      	str	r3, [sp, #32]
   2702a:	e66d      	b.n	26d08 <_dtoa_r+0x560>
   2702c:	2301      	movs	r3, #1
   2702e:	9307      	str	r3, [sp, #28]
   27030:	9b04      	ldr	r3, [sp, #16]
   27032:	445b      	add	r3, fp
   27034:	f103 0901 	add.w	r9, r3, #1
   27038:	f1b9 0f01 	cmp.w	r9, #1
   2703c:	46cc      	mov	ip, r9
   2703e:	930b      	str	r3, [sp, #44]	; 0x2c
   27040:	bfb8      	it	lt
   27042:	f04f 0c01 	movlt.w	ip, #1
   27046:	2100      	movs	r1, #0
   27048:	f1bc 0f17 	cmp.w	ip, #23
   2704c:	63e1      	str	r1, [r4, #60]	; 0x3c
   2704e:	f77f acbc 	ble.w	269ca <_dtoa_r+0x222>
   27052:	2001      	movs	r0, #1
   27054:	2204      	movs	r2, #4
   27056:	0052      	lsls	r2, r2, #1
   27058:	f102 0314 	add.w	r3, r2, #20
   2705c:	4563      	cmp	r3, ip
   2705e:	4601      	mov	r1, r0
   27060:	f100 0001 	add.w	r0, r0, #1
   27064:	d9f7      	bls.n	27056 <_dtoa_r+0x8ae>
   27066:	63e1      	str	r1, [r4, #60]	; 0x3c
   27068:	e4af      	b.n	269ca <_dtoa_r+0x222>
   2706a:	2301      	movs	r3, #1
   2706c:	9307      	str	r3, [sp, #28]
   2706e:	f1bb 0f00 	cmp.w	fp, #0
   27072:	dd52      	ble.n	2711a <_dtoa_r+0x972>
   27074:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   27078:	46d9      	mov	r9, fp
   2707a:	46dc      	mov	ip, fp
   2707c:	e7e3      	b.n	27046 <_dtoa_r+0x89e>
   2707e:	2300      	movs	r3, #0
   27080:	9307      	str	r3, [sp, #28]
   27082:	e7d5      	b.n	27030 <_dtoa_r+0x888>
   27084:	2300      	movs	r3, #0
   27086:	9307      	str	r3, [sp, #28]
   27088:	e7f1      	b.n	2706e <_dtoa_r+0x8c6>
   2708a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2708e:	9704      	str	r7, [sp, #16]
   27090:	f1b9 0f00 	cmp.w	r9, #0
   27094:	f47f ada1 	bne.w	26bda <_dtoa_r+0x432>
   27098:	4651      	mov	r1, sl
   2709a:	464b      	mov	r3, r9
   2709c:	2205      	movs	r2, #5
   2709e:	4620      	mov	r0, r4
   270a0:	f7fe fc08 	bl	258b4 <__multadd>
   270a4:	4601      	mov	r1, r0
   270a6:	4682      	mov	sl, r0
   270a8:	4628      	mov	r0, r5
   270aa:	f7fe fe59 	bl	25d60 <__mcmp>
   270ae:	2800      	cmp	r0, #0
   270b0:	f77f ad93 	ble.w	26bda <_dtoa_r+0x432>
   270b4:	9b04      	ldr	r3, [sp, #16]
   270b6:	f103 0b01 	add.w	fp, r3, #1
   270ba:	9b00      	ldr	r3, [sp, #0]
   270bc:	2231      	movs	r2, #49	; 0x31
   270be:	4698      	mov	r8, r3
   270c0:	f803 2b01 	strb.w	r2, [r3], #1
   270c4:	9300      	str	r3, [sp, #0]
   270c6:	4651      	mov	r1, sl
   270c8:	4620      	mov	r0, r4
   270ca:	f7fe fbe9 	bl	258a0 <_Bfree>
   270ce:	f10b 0301 	add.w	r3, fp, #1
   270d2:	f8dd 9000 	ldr.w	r9, [sp]
   270d6:	9304      	str	r3, [sp, #16]
   270d8:	f8cd 8000 	str.w	r8, [sp]
   270dc:	2e00      	cmp	r6, #0
   270de:	f47f ae8f 	bne.w	26e00 <_dtoa_r+0x658>
   270e2:	e691      	b.n	26e08 <_dtoa_r+0x660>
   270e4:	eba3 0a0a 	sub.w	sl, r3, sl
   270e8:	e5c5      	b.n	26c76 <_dtoa_r+0x4ce>
   270ea:	4631      	mov	r1, r6
   270ec:	4652      	mov	r2, sl
   270ee:	4620      	mov	r0, r4
   270f0:	f7fe fd5e 	bl	25bb0 <__pow5mult>
   270f4:	462a      	mov	r2, r5
   270f6:	4601      	mov	r1, r0
   270f8:	4606      	mov	r6, r0
   270fa:	4620      	mov	r0, r4
   270fc:	f7fe fcaa 	bl	25a54 <__multiply>
   27100:	4629      	mov	r1, r5
   27102:	4605      	mov	r5, r0
   27104:	4620      	mov	r0, r4
   27106:	f7fe fbcb 	bl	258a0 <_Bfree>
   2710a:	e5ea      	b.n	26ce2 <_dtoa_r+0x53a>
   2710c:	2002      	movs	r0, #2
   2710e:	eeb0 5b48 	vmov.f64	d5, d8
   27112:	e481      	b.n	26a18 <_dtoa_r+0x270>
   27114:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   27118:	e68e      	b.n	26e38 <_dtoa_r+0x690>
   2711a:	f04f 0b01 	mov.w	fp, #1
   2711e:	46d9      	mov	r9, fp
   27120:	e44f      	b.n	269c2 <_dtoa_r+0x21a>
   27122:	d103      	bne.n	2712c <_dtoa_r+0x984>
   27124:	9b01      	ldr	r3, [sp, #4]
   27126:	07db      	lsls	r3, r3, #31
   27128:	f53f ae4c 	bmi.w	26dc4 <_dtoa_r+0x61c>
   2712c:	46d9      	mov	r9, fp
   2712e:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   27132:	2b30      	cmp	r3, #48	; 0x30
   27134:	d0fa      	beq.n	2712c <_dtoa_r+0x984>
   27136:	e657      	b.n	26de8 <_dtoa_r+0x640>
   27138:	9b04      	ldr	r3, [sp, #16]
   2713a:	9a00      	ldr	r2, [sp, #0]
   2713c:	3301      	adds	r3, #1
   2713e:	9304      	str	r3, [sp, #16]
   27140:	2331      	movs	r3, #49	; 0x31
   27142:	7013      	strb	r3, [r2, #0]
   27144:	e650      	b.n	26de8 <_dtoa_r+0x640>
   27146:	f1ba 0f00 	cmp.w	sl, #0
   2714a:	f000 8123 	beq.w	27394 <_dtoa_r+0xbec>
   2714e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   27152:	9b06      	ldr	r3, [sp, #24]
   27154:	9309      	str	r3, [sp, #36]	; 0x24
   27156:	4413      	add	r3, r2
   27158:	f8dd a020 	ldr.w	sl, [sp, #32]
   2715c:	9306      	str	r3, [sp, #24]
   2715e:	4490      	add	r8, r2
   27160:	e592      	b.n	26c88 <_dtoa_r+0x4e0>
   27162:	ee07 0a90 	vmov	s15, r0
   27166:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   2716a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   2716e:	eea6 5b07 	vfma.f64	d5, d6, d7
   27172:	ee15 2a90 	vmov	r2, s11
   27176:	ec51 0b15 	vmov	r0, r1, d5
   2717a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   2717e:	ec41 0b15 	vmov	d5, r0, r1
   27182:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   27186:	ee36 7b47 	vsub.f64	d7, d6, d7
   2718a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   2718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27192:	f300 8137 	bgt.w	27404 <_dtoa_r+0xc5c>
   27196:	eeb1 5b45 	vneg.f64	d5, d5
   2719a:	eeb4 7bc5 	vcmpe.f64	d7, d5
   2719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   271a2:	f57f acfb 	bpl.w	26b9c <_dtoa_r+0x3f4>
   271a6:	f04f 0a00 	mov.w	sl, #0
   271aa:	4656      	mov	r6, sl
   271ac:	e515      	b.n	26bda <_dtoa_r+0x432>
   271ae:	f000 80f5 	beq.w	2739c <_dtoa_r+0xbf4>
   271b2:	9b04      	ldr	r3, [sp, #16]
   271b4:	4951      	ldr	r1, [pc, #324]	; (272fc <_dtoa_r+0xb54>)
   271b6:	425a      	negs	r2, r3
   271b8:	f002 000f 	and.w	r0, r2, #15
   271bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   271c0:	ed91 6b00 	vldr	d6, [r1]
   271c4:	1112      	asrs	r2, r2, #4
   271c6:	ee28 6b06 	vmul.f64	d6, d8, d6
   271ca:	f000 8142 	beq.w	27452 <_dtoa_r+0xcaa>
   271ce:	eeb0 7b46 	vmov.f64	d7, d6
   271d2:	494b      	ldr	r1, [pc, #300]	; (27300 <_dtoa_r+0xb58>)
   271d4:	2600      	movs	r6, #0
   271d6:	2002      	movs	r0, #2
   271d8:	07d3      	lsls	r3, r2, #31
   271da:	d505      	bpl.n	271e8 <_dtoa_r+0xa40>
   271dc:	ed91 5b00 	vldr	d5, [r1]
   271e0:	3001      	adds	r0, #1
   271e2:	2601      	movs	r6, #1
   271e4:	ee27 7b05 	vmul.f64	d7, d7, d5
   271e8:	1052      	asrs	r2, r2, #1
   271ea:	f101 0108 	add.w	r1, r1, #8
   271ee:	d1f3      	bne.n	271d8 <_dtoa_r+0xa30>
   271f0:	2e00      	cmp	r6, #0
   271f2:	fe06 6b07 	vseleq.f64	d6, d6, d7
   271f6:	e41e      	b.n	26a36 <_dtoa_r+0x28e>
   271f8:	9b02      	ldr	r3, [sp, #8]
   271fa:	2b00      	cmp	r3, #0
   271fc:	f47f ae37 	bne.w	26e6e <_dtoa_r+0x6c6>
   27200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   27204:	f3c1 0213 	ubfx	r2, r1, #0, #20
   27208:	2a00      	cmp	r2, #0
   2720a:	f040 8137 	bne.w	2747c <_dtoa_r+0xcd4>
   2720e:	4a3d      	ldr	r2, [pc, #244]	; (27304 <_dtoa_r+0xb5c>)
   27210:	400a      	ands	r2, r1
   27212:	2a00      	cmp	r2, #0
   27214:	f000 80fa 	beq.w	2740c <_dtoa_r+0xc64>
   27218:	9b06      	ldr	r3, [sp, #24]
   2721a:	3301      	adds	r3, #1
   2721c:	9306      	str	r3, [sp, #24]
   2721e:	2301      	movs	r3, #1
   27220:	f108 0801 	add.w	r8, r8, #1
   27224:	9308      	str	r3, [sp, #32]
   27226:	e56f      	b.n	26d08 <_dtoa_r+0x560>
   27228:	4629      	mov	r1, r5
   2722a:	9a08      	ldr	r2, [sp, #32]
   2722c:	4620      	mov	r0, r4
   2722e:	f7fe fcbf 	bl	25bb0 <__pow5mult>
   27232:	4605      	mov	r5, r0
   27234:	e55a      	b.n	26cec <_dtoa_r+0x544>
   27236:	2a00      	cmp	r2, #0
   27238:	dd12      	ble.n	27260 <_dtoa_r+0xab8>
   2723a:	4629      	mov	r1, r5
   2723c:	2201      	movs	r2, #1
   2723e:	4620      	mov	r0, r4
   27240:	9301      	str	r3, [sp, #4]
   27242:	f7fe fd15 	bl	25c70 <__lshift>
   27246:	4651      	mov	r1, sl
   27248:	4605      	mov	r5, r0
   2724a:	f7fe fd89 	bl	25d60 <__mcmp>
   2724e:	2800      	cmp	r0, #0
   27250:	9b01      	ldr	r3, [sp, #4]
   27252:	f340 80e1 	ble.w	27418 <_dtoa_r+0xc70>
   27256:	2b39      	cmp	r3, #57	; 0x39
   27258:	f000 80ca 	beq.w	273f0 <_dtoa_r+0xc48>
   2725c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   27260:	46b9      	mov	r9, r7
   27262:	f809 3b01 	strb.w	r3, [r9], #1
   27266:	9b04      	ldr	r3, [sp, #16]
   27268:	3301      	adds	r3, #1
   2726a:	4637      	mov	r7, r6
   2726c:	9304      	str	r3, [sp, #16]
   2726e:	4646      	mov	r6, r8
   27270:	e5ba      	b.n	26de8 <_dtoa_r+0x640>
   27272:	ee38 8b08 	vadd.f64	d8, d8, d8
   27276:	eeb4 8bc6 	vcmpe.f64	d8, d6
   2727a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2727e:	dc0a      	bgt.n	27296 <_dtoa_r+0xaee>
   27280:	eeb4 8b46 	vcmp.f64	d8, d6
   27284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   27288:	f47f acdc 	bne.w	26c44 <_dtoa_r+0x49c>
   2728c:	ee17 3a10 	vmov	r3, s14
   27290:	07d8      	lsls	r0, r3, #31
   27292:	f57f acd7 	bpl.w	26c44 <_dtoa_r+0x49c>
   27296:	9a00      	ldr	r2, [sp, #0]
   27298:	e454      	b.n	26b44 <_dtoa_r+0x39c>
   2729a:	6871      	ldr	r1, [r6, #4]
   2729c:	4620      	mov	r0, r4
   2729e:	f7fe fad9 	bl	25854 <_Balloc>
   272a2:	4607      	mov	r7, r0
   272a4:	2800      	cmp	r0, #0
   272a6:	f000 80de 	beq.w	27466 <_dtoa_r+0xcbe>
   272aa:	6933      	ldr	r3, [r6, #16]
   272ac:	3302      	adds	r3, #2
   272ae:	009a      	lsls	r2, r3, #2
   272b0:	f106 010c 	add.w	r1, r6, #12
   272b4:	300c      	adds	r0, #12
   272b6:	f7f0 f81b 	bl	172f0 <memcpy>
   272ba:	4639      	mov	r1, r7
   272bc:	2201      	movs	r2, #1
   272be:	4620      	mov	r0, r4
   272c0:	f7fe fcd6 	bl	25c70 <__lshift>
   272c4:	4680      	mov	r8, r0
   272c6:	e5fe      	b.n	26ec6 <_dtoa_r+0x71e>
   272c8:	9b06      	ldr	r3, [sp, #24]
   272ca:	eba3 0309 	sub.w	r3, r3, r9
   272ce:	9309      	str	r3, [sp, #36]	; 0x24
   272d0:	e4da      	b.n	26c88 <_dtoa_r+0x4e0>
   272d2:	2b39      	cmp	r3, #57	; 0x39
   272d4:	f000 808c 	beq.w	273f0 <_dtoa_r+0xc48>
   272d8:	46b9      	mov	r9, r7
   272da:	3301      	adds	r3, #1
   272dc:	e7c1      	b.n	27262 <_dtoa_r+0xaba>
   272de:	9a04      	ldr	r2, [sp, #16]
   272e0:	3201      	adds	r2, #1
   272e2:	4637      	mov	r7, r6
   272e4:	9204      	str	r2, [sp, #16]
   272e6:	4646      	mov	r6, r8
   272e8:	e55f      	b.n	26daa <_dtoa_r+0x602>
   272ea:	4629      	mov	r1, r5
   272ec:	4620      	mov	r0, r4
   272ee:	f7fe fc5f 	bl	25bb0 <__pow5mult>
   272f2:	4605      	mov	r5, r0
   272f4:	e4fa      	b.n	26cec <_dtoa_r+0x544>
   272f6:	bf00      	nop
   272f8:	20002bc8 	.word	0x20002bc8
   272fc:	200003f0 	.word	0x200003f0
   27300:	200003c8 	.word	0x200003c8
   27304:	7ff00000 	.word	0x7ff00000
   27308:	4b5e      	ldr	r3, [pc, #376]	; (27484 <_dtoa_r+0xcdc>)
   2730a:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   2730e:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   27312:	ed1c 3b02 	vldr	d3, [ip, #-8]
   27316:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   2731a:	ee36 7b47 	vsub.f64	d7, d6, d7
   2731e:	ec41 0b16 	vmov	d6, r0, r1
   27322:	ee15 1a90 	vmov	r1, s11
   27326:	ee23 3b06 	vmul.f64	d3, d3, d6
   2732a:	9800      	ldr	r0, [sp, #0]
   2732c:	3130      	adds	r1, #48	; 0x30
   2732e:	2a01      	cmp	r2, #1
   27330:	f800 1b01 	strb.w	r1, [r0], #1
   27334:	f000 8083 	beq.w	2743e <_dtoa_r+0xc96>
   27338:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   2733c:	9b00      	ldr	r3, [sp, #0]
   2733e:	1899      	adds	r1, r3, r2
   27340:	ee27 7b04 	vmul.f64	d7, d7, d4
   27344:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   27348:	ee16 3a90 	vmov	r3, s13
   2734c:	3330      	adds	r3, #48	; 0x30
   2734e:	f800 3b01 	strb.w	r3, [r0], #1
   27352:	4281      	cmp	r1, r0
   27354:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   27358:	ee37 7b45 	vsub.f64	d7, d7, d5
   2735c:	d1f0      	bne.n	27340 <_dtoa_r+0xb98>
   2735e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   27362:	ee33 5b06 	vadd.f64	d5, d3, d6
   27366:	eeb4 5bc7 	vcmpe.f64	d5, d7
   2736a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2736e:	f53f abe3 	bmi.w	26b38 <_dtoa_r+0x390>
   27372:	ee36 6b43 	vsub.f64	d6, d6, d3
   27376:	eeb4 6bc7 	vcmpe.f64	d6, d7
   2737a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2737e:	f77f ac0d 	ble.w	26b9c <_dtoa_r+0x3f4>
   27382:	4689      	mov	r9, r1
   27384:	3901      	subs	r1, #1
   27386:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   2738a:	2b30      	cmp	r3, #48	; 0x30
   2738c:	d0f9      	beq.n	27382 <_dtoa_r+0xbda>
   2738e:	1c73      	adds	r3, r6, #1
   27390:	9304      	str	r3, [sp, #16]
   27392:	e539      	b.n	26e08 <_dtoa_r+0x660>
   27394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   27396:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   2739a:	e6da      	b.n	27152 <_dtoa_r+0x9aa>
   2739c:	2002      	movs	r0, #2
   2739e:	eeb0 6b48 	vmov.f64	d6, d8
   273a2:	f7ff bb48 	b.w	26a36 <_dtoa_r+0x28e>
   273a6:	f1b9 0f00 	cmp.w	r9, #0
   273aa:	f43f aeda 	beq.w	27162 <_dtoa_r+0x9ba>
   273ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   273b0:	2a00      	cmp	r2, #0
   273b2:	f77f abf3 	ble.w	26b9c <_dtoa_r+0x3f4>
   273b6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   273ba:	ee26 6b04 	vmul.f64	d6, d6, d4
   273be:	3001      	adds	r0, #1
   273c0:	ee07 0a90 	vmov	s15, r0
   273c4:	9b04      	ldr	r3, [sp, #16]
   273c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   273ca:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   273ce:	eea6 7b05 	vfma.f64	d7, d6, d5
   273d2:	ee17 ca90 	vmov	ip, s15
   273d6:	ec51 0b17 	vmov	r0, r1, d7
   273da:	1e5e      	subs	r6, r3, #1
   273dc:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   273e0:	f7ff bb47 	b.w	26a72 <_dtoa_r+0x2ca>
   273e4:	9b04      	ldr	r3, [sp, #16]
   273e6:	3301      	adds	r3, #1
   273e8:	9304      	str	r3, [sp, #16]
   273ea:	2331      	movs	r3, #49	; 0x31
   273ec:	f7ff bbb1 	b.w	26b52 <_dtoa_r+0x3aa>
   273f0:	9b04      	ldr	r3, [sp, #16]
   273f2:	46bb      	mov	fp, r7
   273f4:	3301      	adds	r3, #1
   273f6:	9304      	str	r3, [sp, #16]
   273f8:	2339      	movs	r3, #57	; 0x39
   273fa:	4637      	mov	r7, r6
   273fc:	f80b 3b01 	strb.w	r3, [fp], #1
   27400:	4646      	mov	r6, r8
   27402:	e4e1      	b.n	26dc8 <_dtoa_r+0x620>
   27404:	f04f 0a00 	mov.w	sl, #0
   27408:	4656      	mov	r6, sl
   2740a:	e653      	b.n	270b4 <_dtoa_r+0x90c>
   2740c:	9208      	str	r2, [sp, #32]
   2740e:	e47b      	b.n	26d08 <_dtoa_r+0x560>
   27410:	1c73      	adds	r3, r6, #1
   27412:	9304      	str	r3, [sp, #16]
   27414:	4689      	mov	r9, r1
   27416:	e4f7      	b.n	26e08 <_dtoa_r+0x660>
   27418:	f47f af22 	bne.w	27260 <_dtoa_r+0xab8>
   2741c:	07da      	lsls	r2, r3, #31
   2741e:	f57f af1f 	bpl.w	27260 <_dtoa_r+0xab8>
   27422:	e718      	b.n	27256 <_dtoa_r+0xaae>
   27424:	2b39      	cmp	r3, #57	; 0x39
   27426:	d0e3      	beq.n	273f0 <_dtoa_r+0xc48>
   27428:	f1b9 0f00 	cmp.w	r9, #0
   2742c:	f73f af16 	bgt.w	2725c <_dtoa_r+0xab4>
   27430:	e716      	b.n	27260 <_dtoa_r+0xab8>
   27432:	9b01      	ldr	r3, [sp, #4]
   27434:	2b02      	cmp	r3, #2
   27436:	f73f ae28 	bgt.w	2708a <_dtoa_r+0x8e2>
   2743a:	9704      	str	r7, [sp, #16]
   2743c:	e5ba      	b.n	26fb4 <_dtoa_r+0x80c>
   2743e:	4601      	mov	r1, r0
   27440:	e78d      	b.n	2735e <_dtoa_r+0xbb6>
   27442:	9b01      	ldr	r3, [sp, #4]
   27444:	2b02      	cmp	r3, #2
   27446:	f73f ae20 	bgt.w	2708a <_dtoa_r+0x8e2>
   2744a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2744e:	9704      	str	r7, [sp, #16]
   27450:	e52b      	b.n	26eaa <_dtoa_r+0x702>
   27452:	2002      	movs	r0, #2
   27454:	f7ff baef 	b.w	26a36 <_dtoa_r+0x28e>
   27458:	4b0b      	ldr	r3, [pc, #44]	; (27488 <_dtoa_r+0xce0>)
   2745a:	480c      	ldr	r0, [pc, #48]	; (2748c <_dtoa_r+0xce4>)
   2745c:	2200      	movs	r2, #0
   2745e:	f240 11af 	movw	r1, #431	; 0x1af
   27462:	f7ff f8b1 	bl	265c8 <__assert_func>
   27466:	4b08      	ldr	r3, [pc, #32]	; (27488 <_dtoa_r+0xce0>)
   27468:	4808      	ldr	r0, [pc, #32]	; (2748c <_dtoa_r+0xce4>)
   2746a:	463a      	mov	r2, r7
   2746c:	f240 21ef 	movw	r1, #751	; 0x2ef
   27470:	f7ff f8aa 	bl	265c8 <__assert_func>
   27474:	4b06      	ldr	r3, [pc, #24]	; (27490 <_dtoa_r+0xce8>)
   27476:	9300      	str	r3, [sp, #0]
   27478:	f7ff b9d2 	b.w	26820 <_dtoa_r+0x78>
   2747c:	9b02      	ldr	r3, [sp, #8]
   2747e:	9308      	str	r3, [sp, #32]
   27480:	e4f7      	b.n	26e72 <_dtoa_r+0x6ca>
   27482:	bf00      	nop
   27484:	200003f0 	.word	0x200003f0
   27488:	20002a18 	.word	0x20002a18
   2748c:	20002bcc 	.word	0x20002bcc
   27490:	20002bbc 	.word	0x20002bbc

00027494 <fiprintf>:
   27494:	b40e      	push	{r1, r2, r3}
   27496:	b510      	push	{r4, lr}
   27498:	b083      	sub	sp, #12
   2749a:	ab05      	add	r3, sp, #20
   2749c:	4c06      	ldr	r4, [pc, #24]	; (274b8 <fiprintf+0x24>)
   2749e:	f853 2b04 	ldr.w	r2, [r3], #4
   274a2:	9301      	str	r3, [sp, #4]
   274a4:	4601      	mov	r1, r0
   274a6:	6820      	ldr	r0, [r4, #0]
   274a8:	f000 f8c4 	bl	27634 <_vfiprintf_r>
   274ac:	b003      	add	sp, #12
   274ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   274b2:	b003      	add	sp, #12
   274b4:	4770      	bx	lr
   274b6:	bf00      	nop
   274b8:	200057e4 	.word	0x200057e4

000274bc <__ssprint_r>:
   274bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   274c0:	6893      	ldr	r3, [r2, #8]
   274c2:	6817      	ldr	r7, [r2, #0]
   274c4:	b083      	sub	sp, #12
   274c6:	4692      	mov	sl, r2
   274c8:	2b00      	cmp	r3, #0
   274ca:	d070      	beq.n	275ae <__ssprint_r+0xf2>
   274cc:	4681      	mov	r9, r0
   274ce:	688a      	ldr	r2, [r1, #8]
   274d0:	6808      	ldr	r0, [r1, #0]
   274d2:	460c      	mov	r4, r1
   274d4:	3708      	adds	r7, #8
   274d6:	e043      	b.n	27560 <__ssprint_r+0xa4>
   274d8:	89a3      	ldrh	r3, [r4, #12]
   274da:	f413 6f90 	tst.w	r3, #1152	; 0x480
   274de:	d02e      	beq.n	2753e <__ssprint_r+0x82>
   274e0:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   274e4:	eba0 0801 	sub.w	r8, r0, r1
   274e8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   274ec:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   274f0:	f108 0001 	add.w	r0, r8, #1
   274f4:	1076      	asrs	r6, r6, #1
   274f6:	4428      	add	r0, r5
   274f8:	42b0      	cmp	r0, r6
   274fa:	4632      	mov	r2, r6
   274fc:	bf84      	itt	hi
   274fe:	4606      	movhi	r6, r0
   27500:	4632      	movhi	r2, r6
   27502:	055b      	lsls	r3, r3, #21
   27504:	d537      	bpl.n	27576 <__ssprint_r+0xba>
   27506:	4611      	mov	r1, r2
   27508:	4648      	mov	r0, r9
   2750a:	f7fa fbf5 	bl	21cf8 <_malloc_r>
   2750e:	9001      	str	r0, [sp, #4]
   27510:	2800      	cmp	r0, #0
   27512:	d03a      	beq.n	2758a <__ssprint_r+0xce>
   27514:	4642      	mov	r2, r8
   27516:	6921      	ldr	r1, [r4, #16]
   27518:	f7ef feea 	bl	172f0 <memcpy>
   2751c:	89a2      	ldrh	r2, [r4, #12]
   2751e:	9b01      	ldr	r3, [sp, #4]
   27520:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   27524:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   27528:	81a2      	strh	r2, [r4, #12]
   2752a:	eba6 0208 	sub.w	r2, r6, r8
   2752e:	eb03 0008 	add.w	r0, r3, r8
   27532:	6166      	str	r6, [r4, #20]
   27534:	60a2      	str	r2, [r4, #8]
   27536:	6123      	str	r3, [r4, #16]
   27538:	6020      	str	r0, [r4, #0]
   2753a:	462e      	mov	r6, r5
   2753c:	46a8      	mov	r8, r5
   2753e:	4642      	mov	r2, r8
   27540:	4659      	mov	r1, fp
   27542:	f7fb fd0d 	bl	22f60 <memmove>
   27546:	f8da 3008 	ldr.w	r3, [sl, #8]
   2754a:	68a2      	ldr	r2, [r4, #8]
   2754c:	6820      	ldr	r0, [r4, #0]
   2754e:	1b92      	subs	r2, r2, r6
   27550:	4440      	add	r0, r8
   27552:	1b5b      	subs	r3, r3, r5
   27554:	60a2      	str	r2, [r4, #8]
   27556:	6020      	str	r0, [r4, #0]
   27558:	f8ca 3008 	str.w	r3, [sl, #8]
   2755c:	b33b      	cbz	r3, 275ae <__ssprint_r+0xf2>
   2755e:	3708      	adds	r7, #8
   27560:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   27564:	2d00      	cmp	r5, #0
   27566:	d0fa      	beq.n	2755e <__ssprint_r+0xa2>
   27568:	42aa      	cmp	r2, r5
   2756a:	4616      	mov	r6, r2
   2756c:	4690      	mov	r8, r2
   2756e:	d9b3      	bls.n	274d8 <__ssprint_r+0x1c>
   27570:	462e      	mov	r6, r5
   27572:	46a8      	mov	r8, r5
   27574:	e7e3      	b.n	2753e <__ssprint_r+0x82>
   27576:	4648      	mov	r0, r9
   27578:	f7fa fe86 	bl	22288 <_realloc_r>
   2757c:	4603      	mov	r3, r0
   2757e:	2800      	cmp	r0, #0
   27580:	d1d3      	bne.n	2752a <__ssprint_r+0x6e>
   27582:	6921      	ldr	r1, [r4, #16]
   27584:	4648      	mov	r0, r9
   27586:	f7fc f9fd 	bl	23984 <_free_r>
   2758a:	89a3      	ldrh	r3, [r4, #12]
   2758c:	220c      	movs	r2, #12
   2758e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27592:	f8c9 2000 	str.w	r2, [r9]
   27596:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2759a:	81a3      	strh	r3, [r4, #12]
   2759c:	2200      	movs	r2, #0
   2759e:	2300      	movs	r3, #0
   275a0:	f8ca 2008 	str.w	r2, [sl, #8]
   275a4:	f8ca 3004 	str.w	r3, [sl, #4]
   275a8:	b003      	add	sp, #12
   275aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   275ae:	2000      	movs	r0, #0
   275b0:	2300      	movs	r3, #0
   275b2:	f8ca 3004 	str.w	r3, [sl, #4]
   275b6:	b003      	add	sp, #12
   275b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000275bc <__sprint_r.part.0>:
   275bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275c0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   275c2:	049c      	lsls	r4, r3, #18
   275c4:	4690      	mov	r8, r2
   275c6:	d52d      	bpl.n	27624 <__sprint_r.part.0+0x68>
   275c8:	6893      	ldr	r3, [r2, #8]
   275ca:	6812      	ldr	r2, [r2, #0]
   275cc:	b343      	cbz	r3, 27620 <__sprint_r.part.0+0x64>
   275ce:	468b      	mov	fp, r1
   275d0:	4606      	mov	r6, r0
   275d2:	f102 0908 	add.w	r9, r2, #8
   275d6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   275da:	ea5f 079a 	movs.w	r7, sl, lsr #2
   275de:	d015      	beq.n	2760c <__sprint_r.part.0+0x50>
   275e0:	3d04      	subs	r5, #4
   275e2:	2400      	movs	r4, #0
   275e4:	e001      	b.n	275ea <__sprint_r.part.0+0x2e>
   275e6:	42a7      	cmp	r7, r4
   275e8:	d00e      	beq.n	27608 <__sprint_r.part.0+0x4c>
   275ea:	f855 1f04 	ldr.w	r1, [r5, #4]!
   275ee:	465a      	mov	r2, fp
   275f0:	4630      	mov	r0, r6
   275f2:	f001 f87b 	bl	286ec <_fputwc_r>
   275f6:	1c43      	adds	r3, r0, #1
   275f8:	f104 0401 	add.w	r4, r4, #1
   275fc:	d1f3      	bne.n	275e6 <__sprint_r.part.0+0x2a>
   275fe:	2300      	movs	r3, #0
   27600:	e9c8 3301 	strd	r3, r3, [r8, #4]
   27604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27608:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2760c:	f02a 0a03 	bic.w	sl, sl, #3
   27610:	eba3 030a 	sub.w	r3, r3, sl
   27614:	f8c8 3008 	str.w	r3, [r8, #8]
   27618:	f109 0908 	add.w	r9, r9, #8
   2761c:	2b00      	cmp	r3, #0
   2761e:	d1da      	bne.n	275d6 <__sprint_r.part.0+0x1a>
   27620:	2000      	movs	r0, #0
   27622:	e7ec      	b.n	275fe <__sprint_r.part.0+0x42>
   27624:	f7fb fa02 	bl	22a2c <__sfvwrite_r>
   27628:	2300      	movs	r3, #0
   2762a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   2762e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27632:	bf00      	nop

00027634 <_vfiprintf_r>:
   27634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27638:	ed2d 8b02 	vpush	{d8}
   2763c:	b0c5      	sub	sp, #276	; 0x114
   2763e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   27642:	4683      	mov	fp, r0
   27644:	ee08 1a10 	vmov	s16, r1
   27648:	4616      	mov	r6, r2
   2764a:	2100      	movs	r1, #0
   2764c:	2208      	movs	r2, #8
   2764e:	4650      	mov	r0, sl
   27650:	461c      	mov	r4, r3
   27652:	9307      	str	r3, [sp, #28]
   27654:	f7fb fd00 	bl	23058 <memset>
   27658:	f1bb 0f00 	cmp.w	fp, #0
   2765c:	d004      	beq.n	27668 <_vfiprintf_r+0x34>
   2765e:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   27662:	2b00      	cmp	r3, #0
   27664:	f000 86a0 	beq.w	283a8 <_vfiprintf_r+0xd74>
   27668:	ee18 2a10 	vmov	r2, s16
   2766c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2766e:	07db      	lsls	r3, r3, #31
   27670:	f140 8513 	bpl.w	2809a <_vfiprintf_r+0xa66>
   27674:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   27678:	b28a      	uxth	r2, r1
   2767a:	0495      	lsls	r5, r2, #18
   2767c:	d40b      	bmi.n	27696 <_vfiprintf_r+0x62>
   2767e:	ee18 3a10 	vmov	r3, s16
   27682:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   27686:	8199      	strh	r1, [r3, #12]
   27688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   2768a:	b28a      	uxth	r2, r1
   2768c:	ee18 1a10 	vmov	r1, s16
   27690:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   27694:	664b      	str	r3, [r1, #100]	; 0x64
   27696:	0710      	lsls	r0, r2, #28
   27698:	f140 8105 	bpl.w	278a6 <_vfiprintf_r+0x272>
   2769c:	ee18 3a10 	vmov	r3, s16
   276a0:	691b      	ldr	r3, [r3, #16]
   276a2:	2b00      	cmp	r3, #0
   276a4:	f000 80ff 	beq.w	278a6 <_vfiprintf_r+0x272>
   276a8:	f002 031a 	and.w	r3, r2, #26
   276ac:	2b0a      	cmp	r3, #10
   276ae:	f000 810a 	beq.w	278c6 <_vfiprintf_r+0x292>
   276b2:	2300      	movs	r3, #0
   276b4:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   276b8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   276bc:	aa1b      	add	r2, sp, #108	; 0x6c
   276be:	930c      	str	r3, [sp, #48]	; 0x30
   276c0:	9218      	str	r2, [sp, #96]	; 0x60
   276c2:	4691      	mov	r9, r2
   276c4:	930b      	str	r3, [sp, #44]	; 0x2c
   276c6:	9305      	str	r3, [sp, #20]
   276c8:	46b0      	mov	r8, r6
   276ca:	4644      	mov	r4, r8
   276cc:	4ba8      	ldr	r3, [pc, #672]	; (27970 <_vfiprintf_r+0x33c>)
   276ce:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   276d2:	f7fb fdbd 	bl	23250 <__locale_mb_cur_max>
   276d6:	4622      	mov	r2, r4
   276d8:	4603      	mov	r3, r0
   276da:	a912      	add	r1, sp, #72	; 0x48
   276dc:	f8cd a000 	str.w	sl, [sp]
   276e0:	4658      	mov	r0, fp
   276e2:	47a8      	blx	r5
   276e4:	2800      	cmp	r0, #0
   276e6:	f000 8145 	beq.w	27974 <_vfiprintf_r+0x340>
   276ea:	f2c0 8139 	blt.w	27960 <_vfiprintf_r+0x32c>
   276ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
   276f0:	2a25      	cmp	r2, #37	; 0x25
   276f2:	4603      	mov	r3, r0
   276f4:	d001      	beq.n	276fa <_vfiprintf_r+0xc6>
   276f6:	441c      	add	r4, r3
   276f8:	e7e8      	b.n	276cc <_vfiprintf_r+0x98>
   276fa:	ebb4 0608 	subs.w	r6, r4, r8
   276fe:	4605      	mov	r5, r0
   27700:	f040 813c 	bne.w	2797c <_vfiprintf_r+0x348>
   27704:	2300      	movs	r3, #0
   27706:	7861      	ldrb	r1, [r4, #1]
   27708:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2770c:	f104 0801 	add.w	r8, r4, #1
   27710:	9306      	str	r3, [sp, #24]
   27712:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27716:	461e      	mov	r6, r3
   27718:	242b      	movs	r4, #43	; 0x2b
   2771a:	f108 0801 	add.w	r8, r8, #1
   2771e:	f1a1 0320 	sub.w	r3, r1, #32
   27722:	2b5a      	cmp	r3, #90	; 0x5a
   27724:	f200 8178 	bhi.w	27a18 <_vfiprintf_r+0x3e4>
   27728:	e8df f013 	tbh	[pc, r3, lsl #1]
   2772c:	017602b5 	.word	0x017602b5
   27730:	02b00176 	.word	0x02b00176
   27734:	01760176 	.word	0x01760176
   27738:	006a0176 	.word	0x006a0176
   2773c:	01760176 	.word	0x01760176
   27740:	028d027d 	.word	0x028d027d
   27744:	02880176 	.word	0x02880176
   27748:	01760297 	.word	0x01760297
   2774c:	005b0292 	.word	0x005b0292
   27750:	005b005b 	.word	0x005b005b
   27754:	005b005b 	.word	0x005b005b
   27758:	005b005b 	.word	0x005b005b
   2775c:	005b005b 	.word	0x005b005b
   27760:	01760176 	.word	0x01760176
   27764:	01760176 	.word	0x01760176
   27768:	01760176 	.word	0x01760176
   2776c:	01760176 	.word	0x01760176
   27770:	025c0176 	.word	0x025c0176
   27774:	01760084 	.word	0x01760084
   27778:	01760176 	.word	0x01760176
   2777c:	01760176 	.word	0x01760176
   27780:	01760176 	.word	0x01760176
   27784:	01760176 	.word	0x01760176
   27788:	00e80176 	.word	0x00e80176
   2778c:	01760176 	.word	0x01760176
   27790:	02330176 	.word	0x02330176
   27794:	02da0176 	.word	0x02da0176
   27798:	01760176 	.word	0x01760176
   2779c:	0176058b 	.word	0x0176058b
   277a0:	01760176 	.word	0x01760176
   277a4:	01760176 	.word	0x01760176
   277a8:	01760176 	.word	0x01760176
   277ac:	01760176 	.word	0x01760176
   277b0:	025c0176 	.word	0x025c0176
   277b4:	01760086 	.word	0x01760086
   277b8:	01760176 	.word	0x01760176
   277bc:	008602cd 	.word	0x008602cd
   277c0:	0176007f 	.word	0x0176007f
   277c4:	017602c0 	.word	0x017602c0
   277c8:	00ea02fd 	.word	0x00ea02fd
   277cc:	007f02ed 	.word	0x007f02ed
   277d0:	02330176 	.word	0x02330176
   277d4:	0569007c 	.word	0x0569007c
   277d8:	01760176 	.word	0x01760176
   277dc:	0176056b 	.word	0x0176056b
   277e0:	007c      	.short	0x007c
   277e2:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   277e6:	2200      	movs	r2, #0
   277e8:	f818 1b01 	ldrb.w	r1, [r8], #1
   277ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   277f0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   277f4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   277f8:	2b09      	cmp	r3, #9
   277fa:	d9f5      	bls.n	277e8 <_vfiprintf_r+0x1b4>
   277fc:	9206      	str	r2, [sp, #24]
   277fe:	e78e      	b.n	2771e <_vfiprintf_r+0xea>
   27800:	4658      	mov	r0, fp
   27802:	f7fe fdb5 	bl	26370 <_localeconv_r>
   27806:	6843      	ldr	r3, [r0, #4]
   27808:	930d      	str	r3, [sp, #52]	; 0x34
   2780a:	4618      	mov	r0, r3
   2780c:	f7fb ffb8 	bl	23780 <strlen>
   27810:	900e      	str	r0, [sp, #56]	; 0x38
   27812:	4605      	mov	r5, r0
   27814:	4658      	mov	r0, fp
   27816:	f7fe fdab 	bl	26370 <_localeconv_r>
   2781a:	6883      	ldr	r3, [r0, #8]
   2781c:	930b      	str	r3, [sp, #44]	; 0x2c
   2781e:	2d00      	cmp	r5, #0
   27820:	f040 84d6 	bne.w	281d0 <_vfiprintf_r+0xb9c>
   27824:	f898 1000 	ldrb.w	r1, [r8]
   27828:	e777      	b.n	2771a <_vfiprintf_r+0xe6>
   2782a:	f898 1000 	ldrb.w	r1, [r8]
   2782e:	f046 0620 	orr.w	r6, r6, #32
   27832:	e772      	b.n	2771a <_vfiprintf_r+0xe6>
   27834:	f046 0610 	orr.w	r6, r6, #16
   27838:	06b4      	lsls	r4, r6, #26
   2783a:	f140 818e 	bpl.w	27b5a <_vfiprintf_r+0x526>
   2783e:	9b07      	ldr	r3, [sp, #28]
   27840:	3307      	adds	r3, #7
   27842:	f023 0307 	bic.w	r3, r3, #7
   27846:	461a      	mov	r2, r3
   27848:	6859      	ldr	r1, [r3, #4]
   2784a:	f852 3b08 	ldr.w	r3, [r2], #8
   2784e:	9207      	str	r2, [sp, #28]
   27850:	460a      	mov	r2, r1
   27852:	2900      	cmp	r1, #0
   27854:	f2c0 8470 	blt.w	28138 <_vfiprintf_r+0xb04>
   27858:	1c79      	adds	r1, r7, #1
   2785a:	f000 85a2 	beq.w	283a2 <_vfiprintf_r+0xd6e>
   2785e:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   27862:	9103      	str	r1, [sp, #12]
   27864:	ea53 0102 	orrs.w	r1, r3, r2
   27868:	f000 843f 	beq.w	280ea <_vfiprintf_r+0xab6>
   2786c:	2b0a      	cmp	r3, #10
   2786e:	f172 0100 	sbcs.w	r1, r2, #0
   27872:	f080 8541 	bcs.w	282f8 <_vfiprintf_r+0xcc4>
   27876:	3330      	adds	r3, #48	; 0x30
   27878:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   2787c:	9e03      	ldr	r6, [sp, #12]
   2787e:	2301      	movs	r3, #1
   27880:	9304      	str	r3, [sp, #16]
   27882:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   27886:	9b04      	ldr	r3, [sp, #16]
   27888:	42bb      	cmp	r3, r7
   2788a:	bfb8      	it	lt
   2788c:	463b      	movlt	r3, r7
   2788e:	9303      	str	r3, [sp, #12]
   27890:	2300      	movs	r3, #0
   27892:	9308      	str	r3, [sp, #32]
   27894:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   27898:	2b00      	cmp	r3, #0
   2789a:	f000 80cb 	beq.w	27a34 <_vfiprintf_r+0x400>
   2789e:	9b03      	ldr	r3, [sp, #12]
   278a0:	3301      	adds	r3, #1
   278a2:	9303      	str	r3, [sp, #12]
   278a4:	e0c6      	b.n	27a34 <_vfiprintf_r+0x400>
   278a6:	ee18 1a10 	vmov	r1, s16
   278aa:	4658      	mov	r0, fp
   278ac:	ee18 5a10 	vmov	r5, s16
   278b0:	f7fb fac0 	bl	22e34 <__swsetup_r>
   278b4:	2800      	cmp	r0, #0
   278b6:	f040 8652 	bne.w	2855e <_vfiprintf_r+0xf2a>
   278ba:	89aa      	ldrh	r2, [r5, #12]
   278bc:	f002 031a 	and.w	r3, r2, #26
   278c0:	2b0a      	cmp	r3, #10
   278c2:	f47f aef6 	bne.w	276b2 <_vfiprintf_r+0x7e>
   278c6:	ee18 1a10 	vmov	r1, s16
   278ca:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   278ce:	2b00      	cmp	r3, #0
   278d0:	f6ff aeef 	blt.w	276b2 <_vfiprintf_r+0x7e>
   278d4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   278d6:	07db      	lsls	r3, r3, #31
   278d8:	d402      	bmi.n	278e0 <_vfiprintf_r+0x2ac>
   278da:	0597      	lsls	r7, r2, #22
   278dc:	f140 8612 	bpl.w	28504 <_vfiprintf_r+0xed0>
   278e0:	ee18 1a10 	vmov	r1, s16
   278e4:	4623      	mov	r3, r4
   278e6:	4632      	mov	r2, r6
   278e8:	4658      	mov	r0, fp
   278ea:	f000 fe69 	bl	285c0 <__sbprintf>
   278ee:	9005      	str	r0, [sp, #20]
   278f0:	9805      	ldr	r0, [sp, #20]
   278f2:	b045      	add	sp, #276	; 0x114
   278f4:	ecbd 8b02 	vpop	{d8}
   278f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   278fc:	f046 0610 	orr.w	r6, r6, #16
   27900:	f016 0220 	ands.w	r2, r6, #32
   27904:	f000 8136 	beq.w	27b74 <_vfiprintf_r+0x540>
   27908:	9b07      	ldr	r3, [sp, #28]
   2790a:	3307      	adds	r3, #7
   2790c:	f023 0307 	bic.w	r3, r3, #7
   27910:	4619      	mov	r1, r3
   27912:	685a      	ldr	r2, [r3, #4]
   27914:	f851 3b08 	ldr.w	r3, [r1], #8
   27918:	9107      	str	r1, [sp, #28]
   2791a:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   2791e:	9103      	str	r1, [sp, #12]
   27920:	2100      	movs	r1, #0
   27922:	2000      	movs	r0, #0
   27924:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   27928:	1c78      	adds	r0, r7, #1
   2792a:	f000 8210 	beq.w	27d4e <_vfiprintf_r+0x71a>
   2792e:	9803      	ldr	r0, [sp, #12]
   27930:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   27934:	ea53 0002 	orrs.w	r0, r3, r2
   27938:	f040 8208 	bne.w	27d4c <_vfiprintf_r+0x718>
   2793c:	2f00      	cmp	r7, #0
   2793e:	f040 8538 	bne.w	283b2 <_vfiprintf_r+0xd7e>
   27942:	2900      	cmp	r1, #0
   27944:	f040 83d5 	bne.w	280f2 <_vfiprintf_r+0xabe>
   27948:	9b03      	ldr	r3, [sp, #12]
   2794a:	f013 0301 	ands.w	r3, r3, #1
   2794e:	9304      	str	r3, [sp, #16]
   27950:	f000 8411 	beq.w	28176 <_vfiprintf_r+0xb42>
   27954:	2330      	movs	r3, #48	; 0x30
   27956:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   2795a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   2795e:	e792      	b.n	27886 <_vfiprintf_r+0x252>
   27960:	2208      	movs	r2, #8
   27962:	2100      	movs	r1, #0
   27964:	4650      	mov	r0, sl
   27966:	f7fb fb77 	bl	23058 <memset>
   2796a:	2301      	movs	r3, #1
   2796c:	441c      	add	r4, r3
   2796e:	e6ad      	b.n	276cc <_vfiprintf_r+0x98>
   27970:	2000525c 	.word	0x2000525c
   27974:	ebb4 0608 	subs.w	r6, r4, r8
   27978:	4605      	mov	r5, r0
   2797a:	d01b      	beq.n	279b4 <_vfiprintf_r+0x380>
   2797c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2797e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   27980:	3301      	adds	r3, #1
   27982:	4432      	add	r2, r6
   27984:	2b07      	cmp	r3, #7
   27986:	e9c9 8600 	strd	r8, r6, [r9]
   2798a:	921a      	str	r2, [sp, #104]	; 0x68
   2798c:	9319      	str	r3, [sp, #100]	; 0x64
   2798e:	dd1c      	ble.n	279ca <_vfiprintf_r+0x396>
   27990:	2a00      	cmp	r2, #0
   27992:	f000 83a6 	beq.w	280e2 <_vfiprintf_r+0xaae>
   27996:	ee18 1a10 	vmov	r1, s16
   2799a:	aa18      	add	r2, sp, #96	; 0x60
   2799c:	4658      	mov	r0, fp
   2799e:	f7ff fe0d 	bl	275bc <__sprint_r.part.0>
   279a2:	bb20      	cbnz	r0, 279ee <_vfiprintf_r+0x3ba>
   279a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   279a8:	9b05      	ldr	r3, [sp, #20]
   279aa:	4433      	add	r3, r6
   279ac:	9305      	str	r3, [sp, #20]
   279ae:	2d00      	cmp	r5, #0
   279b0:	f47f aea8 	bne.w	27704 <_vfiprintf_r+0xd0>
   279b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   279b6:	2b00      	cmp	r3, #0
   279b8:	f040 85c1 	bne.w	2853e <_vfiprintf_r+0xf0a>
   279bc:	ee18 3a10 	vmov	r3, s16
   279c0:	2200      	movs	r2, #0
   279c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   279c6:	9219      	str	r2, [sp, #100]	; 0x64
   279c8:	e015      	b.n	279f6 <_vfiprintf_r+0x3c2>
   279ca:	f109 0908 	add.w	r9, r9, #8
   279ce:	e7eb      	b.n	279a8 <_vfiprintf_r+0x374>
   279d0:	ee18 1a10 	vmov	r1, s16
   279d4:	aa18      	add	r2, sp, #96	; 0x60
   279d6:	4658      	mov	r0, fp
   279d8:	f7ff fdf0 	bl	275bc <__sprint_r.part.0>
   279dc:	2800      	cmp	r0, #0
   279de:	f000 80a6 	beq.w	27b2e <_vfiprintf_r+0x4fa>
   279e2:	9b08      	ldr	r3, [sp, #32]
   279e4:	b11b      	cbz	r3, 279ee <_vfiprintf_r+0x3ba>
   279e6:	9908      	ldr	r1, [sp, #32]
   279e8:	4658      	mov	r0, fp
   279ea:	f7fb ffcb 	bl	23984 <_free_r>
   279ee:	ee18 3a10 	vmov	r3, s16
   279f2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   279f6:	ee18 2a10 	vmov	r2, s16
   279fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
   279fc:	f012 0f01 	tst.w	r2, #1
   27a00:	b29a      	uxth	r2, r3
   27a02:	f000 80a0 	beq.w	27b46 <_vfiprintf_r+0x512>
   27a06:	0650      	lsls	r0, r2, #25
   27a08:	f100 85b2 	bmi.w	28570 <_vfiprintf_r+0xf3c>
   27a0c:	9805      	ldr	r0, [sp, #20]
   27a0e:	b045      	add	sp, #276	; 0x114
   27a10:	ecbd 8b02 	vpop	{d8}
   27a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27a18:	2900      	cmp	r1, #0
   27a1a:	d0cb      	beq.n	279b4 <_vfiprintf_r+0x380>
   27a1c:	2300      	movs	r3, #0
   27a1e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27a22:	2301      	movs	r3, #1
   27a24:	e9cd 3303 	strd	r3, r3, [sp, #12]
   27a28:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   27a2c:	ac2b      	add	r4, sp, #172	; 0xac
   27a2e:	2300      	movs	r3, #0
   27a30:	9308      	str	r3, [sp, #32]
   27a32:	461f      	mov	r7, r3
   27a34:	f016 0302 	ands.w	r3, r6, #2
   27a38:	9309      	str	r3, [sp, #36]	; 0x24
   27a3a:	d002      	beq.n	27a42 <_vfiprintf_r+0x40e>
   27a3c:	9b03      	ldr	r3, [sp, #12]
   27a3e:	3302      	adds	r3, #2
   27a40:	9303      	str	r3, [sp, #12]
   27a42:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   27a46:	930a      	str	r3, [sp, #40]	; 0x28
   27a48:	d105      	bne.n	27a56 <_vfiprintf_r+0x422>
   27a4a:	9b06      	ldr	r3, [sp, #24]
   27a4c:	9a03      	ldr	r2, [sp, #12]
   27a4e:	1a9d      	subs	r5, r3, r2
   27a50:	2d00      	cmp	r5, #0
   27a52:	f300 827b 	bgt.w	27f4c <_vfiprintf_r+0x918>
   27a56:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27a5a:	1c41      	adds	r1, r0, #1
   27a5c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   27a60:	b182      	cbz	r2, 27a84 <_vfiprintf_r+0x450>
   27a62:	2201      	movs	r2, #1
   27a64:	3301      	adds	r3, #1
   27a66:	f8c9 2004 	str.w	r2, [r9, #4]
   27a6a:	2907      	cmp	r1, #7
   27a6c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   27a70:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27a74:	f8c9 2000 	str.w	r2, [r9]
   27a78:	f300 824a 	bgt.w	27f10 <_vfiprintf_r+0x8dc>
   27a7c:	4608      	mov	r0, r1
   27a7e:	f109 0908 	add.w	r9, r9, #8
   27a82:	3101      	adds	r1, #1
   27a84:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27a86:	b1e2      	cbz	r2, 27ac2 <_vfiprintf_r+0x48e>
   27a88:	aa11      	add	r2, sp, #68	; 0x44
   27a8a:	3302      	adds	r3, #2
   27a8c:	f8c9 2000 	str.w	r2, [r9]
   27a90:	2907      	cmp	r1, #7
   27a92:	f04f 0202 	mov.w	r2, #2
   27a96:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27a9a:	f8c9 2004 	str.w	r2, [r9, #4]
   27a9e:	f340 8250 	ble.w	27f42 <_vfiprintf_r+0x90e>
   27aa2:	2b00      	cmp	r3, #0
   27aa4:	f000 8343 	beq.w	2812e <_vfiprintf_r+0xafa>
   27aa8:	ee18 1a10 	vmov	r1, s16
   27aac:	aa18      	add	r2, sp, #96	; 0x60
   27aae:	4658      	mov	r0, fp
   27ab0:	f7ff fd84 	bl	275bc <__sprint_r.part.0>
   27ab4:	2800      	cmp	r0, #0
   27ab6:	d194      	bne.n	279e2 <_vfiprintf_r+0x3ae>
   27ab8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27abc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27ac0:	1c41      	adds	r1, r0, #1
   27ac2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   27ac4:	2a80      	cmp	r2, #128	; 0x80
   27ac6:	f000 8184 	beq.w	27dd2 <_vfiprintf_r+0x79e>
   27aca:	9a04      	ldr	r2, [sp, #16]
   27acc:	1abd      	subs	r5, r7, r2
   27ace:	2d00      	cmp	r5, #0
   27ad0:	f300 81d7 	bgt.w	27e82 <_vfiprintf_r+0x84e>
   27ad4:	9a04      	ldr	r2, [sp, #16]
   27ad6:	f8c9 4000 	str.w	r4, [r9]
   27ada:	4413      	add	r3, r2
   27adc:	2907      	cmp	r1, #7
   27ade:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27ae2:	f8c9 2004 	str.w	r2, [r9, #4]
   27ae6:	f340 816e 	ble.w	27dc6 <_vfiprintf_r+0x792>
   27aea:	2b00      	cmp	r3, #0
   27aec:	f000 8275 	beq.w	27fda <_vfiprintf_r+0x9a6>
   27af0:	ee18 1a10 	vmov	r1, s16
   27af4:	aa18      	add	r2, sp, #96	; 0x60
   27af6:	4658      	mov	r0, fp
   27af8:	f7ff fd60 	bl	275bc <__sprint_r.part.0>
   27afc:	2800      	cmp	r0, #0
   27afe:	f47f af70 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   27b02:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27b04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27b08:	0775      	lsls	r5, r6, #29
   27b0a:	d505      	bpl.n	27b18 <_vfiprintf_r+0x4e4>
   27b0c:	9a06      	ldr	r2, [sp, #24]
   27b0e:	9903      	ldr	r1, [sp, #12]
   27b10:	1a54      	subs	r4, r2, r1
   27b12:	2c00      	cmp	r4, #0
   27b14:	f300 826b 	bgt.w	27fee <_vfiprintf_r+0x9ba>
   27b18:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   27b1c:	9803      	ldr	r0, [sp, #12]
   27b1e:	4281      	cmp	r1, r0
   27b20:	bfac      	ite	ge
   27b22:	1852      	addge	r2, r2, r1
   27b24:	1812      	addlt	r2, r2, r0
   27b26:	9205      	str	r2, [sp, #20]
   27b28:	2b00      	cmp	r3, #0
   27b2a:	f47f af51 	bne.w	279d0 <_vfiprintf_r+0x39c>
   27b2e:	9908      	ldr	r1, [sp, #32]
   27b30:	2300      	movs	r3, #0
   27b32:	9319      	str	r3, [sp, #100]	; 0x64
   27b34:	2900      	cmp	r1, #0
   27b36:	f000 8149 	beq.w	27dcc <_vfiprintf_r+0x798>
   27b3a:	4658      	mov	r0, fp
   27b3c:	f7fb ff22 	bl	23984 <_free_r>
   27b40:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27b44:	e5c1      	b.n	276ca <_vfiprintf_r+0x96>
   27b46:	059c      	lsls	r4, r3, #22
   27b48:	f53f af5d 	bmi.w	27a06 <_vfiprintf_r+0x3d2>
   27b4c:	ee18 4a10 	vmov	r4, s16
   27b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27b52:	f7fb fdbb 	bl	236cc <__retarget_lock_release_recursive>
   27b56:	89a2      	ldrh	r2, [r4, #12]
   27b58:	e755      	b.n	27a06 <_vfiprintf_r+0x3d2>
   27b5a:	06f0      	lsls	r0, r6, #27
   27b5c:	9a07      	ldr	r2, [sp, #28]
   27b5e:	f100 831f 	bmi.w	281a0 <_vfiprintf_r+0xb6c>
   27b62:	0671      	lsls	r1, r6, #25
   27b64:	f140 8319 	bpl.w	2819a <_vfiprintf_r+0xb66>
   27b68:	f932 3b04 	ldrsh.w	r3, [r2], #4
   27b6c:	9207      	str	r2, [sp, #28]
   27b6e:	17da      	asrs	r2, r3, #31
   27b70:	4611      	mov	r1, r2
   27b72:	e66e      	b.n	27852 <_vfiprintf_r+0x21e>
   27b74:	f016 0310 	ands.w	r3, r6, #16
   27b78:	9907      	ldr	r1, [sp, #28]
   27b7a:	f040 8309 	bne.w	28190 <_vfiprintf_r+0xb5c>
   27b7e:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   27b82:	f000 8301 	beq.w	28188 <_vfiprintf_r+0xb54>
   27b86:	461a      	mov	r2, r3
   27b88:	f851 3b04 	ldr.w	r3, [r1], #4
   27b8c:	9107      	str	r1, [sp, #28]
   27b8e:	b29b      	uxth	r3, r3
   27b90:	e6c3      	b.n	2791a <_vfiprintf_r+0x2e6>
   27b92:	9b07      	ldr	r3, [sp, #28]
   27b94:	461a      	mov	r2, r3
   27b96:	2300      	movs	r3, #0
   27b98:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27b9c:	4613      	mov	r3, r2
   27b9e:	f853 4b04 	ldr.w	r4, [r3], #4
   27ba2:	9303      	str	r3, [sp, #12]
   27ba4:	2c00      	cmp	r4, #0
   27ba6:	f000 8412 	beq.w	283ce <_vfiprintf_r+0xd9a>
   27baa:	2953      	cmp	r1, #83	; 0x53
   27bac:	f000 8365 	beq.w	2827a <_vfiprintf_r+0xc46>
   27bb0:	f016 0510 	ands.w	r5, r6, #16
   27bb4:	f040 8361 	bne.w	2827a <_vfiprintf_r+0xc46>
   27bb8:	1c7b      	adds	r3, r7, #1
   27bba:	f000 84b3 	beq.w	28524 <_vfiprintf_r+0xef0>
   27bbe:	463a      	mov	r2, r7
   27bc0:	4629      	mov	r1, r5
   27bc2:	4620      	mov	r0, r4
   27bc4:	f7fb fd84 	bl	236d0 <memchr>
   27bc8:	9008      	str	r0, [sp, #32]
   27bca:	2800      	cmp	r0, #0
   27bcc:	f000 849f 	beq.w	2850e <_vfiprintf_r+0xeda>
   27bd0:	1b03      	subs	r3, r0, r4
   27bd2:	9a03      	ldr	r2, [sp, #12]
   27bd4:	9304      	str	r3, [sp, #16]
   27bd6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27bda:	462f      	mov	r7, r5
   27bdc:	9207      	str	r2, [sp, #28]
   27bde:	9303      	str	r3, [sp, #12]
   27be0:	9508      	str	r5, [sp, #32]
   27be2:	e657      	b.n	27894 <_vfiprintf_r+0x260>
   27be4:	2943      	cmp	r1, #67	; 0x43
   27be6:	d002      	beq.n	27bee <_vfiprintf_r+0x5ba>
   27be8:	06f5      	lsls	r5, r6, #27
   27bea:	f140 832d 	bpl.w	28248 <_vfiprintf_r+0xc14>
   27bee:	9d07      	ldr	r5, [sp, #28]
   27bf0:	2208      	movs	r2, #8
   27bf2:	2100      	movs	r1, #0
   27bf4:	a816      	add	r0, sp, #88	; 0x58
   27bf6:	ac2b      	add	r4, sp, #172	; 0xac
   27bf8:	f7fb fa2e 	bl	23058 <memset>
   27bfc:	ab16      	add	r3, sp, #88	; 0x58
   27bfe:	f855 2b04 	ldr.w	r2, [r5], #4
   27c02:	4621      	mov	r1, r4
   27c04:	4658      	mov	r0, fp
   27c06:	f7fe fc6f 	bl	264e8 <_wcrtomb_r>
   27c0a:	4603      	mov	r3, r0
   27c0c:	3301      	adds	r3, #1
   27c0e:	9004      	str	r0, [sp, #16]
   27c10:	f000 84b3 	beq.w	2857a <_vfiprintf_r+0xf46>
   27c14:	9b04      	ldr	r3, [sp, #16]
   27c16:	9507      	str	r5, [sp, #28]
   27c18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27c1c:	9303      	str	r3, [sp, #12]
   27c1e:	2300      	movs	r3, #0
   27c20:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27c24:	e703      	b.n	27a2e <_vfiprintf_r+0x3fa>
   27c26:	9b07      	ldr	r3, [sp, #28]
   27c28:	f853 2b04 	ldr.w	r2, [r3], #4
   27c2c:	9206      	str	r2, [sp, #24]
   27c2e:	2a00      	cmp	r2, #0
   27c30:	f280 829c 	bge.w	2816c <_vfiprintf_r+0xb38>
   27c34:	9a06      	ldr	r2, [sp, #24]
   27c36:	4252      	negs	r2, r2
   27c38:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27c3c:	f898 1000 	ldrb.w	r1, [r8]
   27c40:	f046 0604 	orr.w	r6, r6, #4
   27c44:	e569      	b.n	2771a <_vfiprintf_r+0xe6>
   27c46:	f898 1000 	ldrb.w	r1, [r8]
   27c4a:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   27c4e:	e564      	b.n	2771a <_vfiprintf_r+0xe6>
   27c50:	f898 1000 	ldrb.w	r1, [r8]
   27c54:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   27c58:	e55f      	b.n	2771a <_vfiprintf_r+0xe6>
   27c5a:	4642      	mov	r2, r8
   27c5c:	f812 1b01 	ldrb.w	r1, [r2], #1
   27c60:	292a      	cmp	r1, #42	; 0x2a
   27c62:	f000 8496 	beq.w	28592 <_vfiprintf_r+0xf5e>
   27c66:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27c6a:	2b09      	cmp	r3, #9
   27c6c:	4690      	mov	r8, r2
   27c6e:	f04f 0700 	mov.w	r7, #0
   27c72:	f63f ad54 	bhi.w	2771e <_vfiprintf_r+0xea>
   27c76:	f818 1b01 	ldrb.w	r1, [r8], #1
   27c7a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   27c7e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   27c82:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27c86:	2b09      	cmp	r3, #9
   27c88:	d9f5      	bls.n	27c76 <_vfiprintf_r+0x642>
   27c8a:	e548      	b.n	2771e <_vfiprintf_r+0xea>
   27c8c:	f898 1000 	ldrb.w	r1, [r8]
   27c90:	f046 0601 	orr.w	r6, r6, #1
   27c94:	e541      	b.n	2771a <_vfiprintf_r+0xe6>
   27c96:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   27c9a:	2b00      	cmp	r3, #0
   27c9c:	f47f adc2 	bne.w	27824 <_vfiprintf_r+0x1f0>
   27ca0:	2320      	movs	r3, #32
   27ca2:	f898 1000 	ldrb.w	r1, [r8]
   27ca6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   27caa:	e536      	b.n	2771a <_vfiprintf_r+0xe6>
   27cac:	f898 1000 	ldrb.w	r1, [r8]
   27cb0:	296c      	cmp	r1, #108	; 0x6c
   27cb2:	bf03      	ittte	eq
   27cb4:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   27cb8:	f046 0620 	orreq.w	r6, r6, #32
   27cbc:	f108 0801 	addeq.w	r8, r8, #1
   27cc0:	f046 0610 	orrne.w	r6, r6, #16
   27cc4:	e529      	b.n	2771a <_vfiprintf_r+0xe6>
   27cc6:	f898 1000 	ldrb.w	r1, [r8]
   27cca:	2968      	cmp	r1, #104	; 0x68
   27ccc:	bf03      	ittte	eq
   27cce:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   27cd2:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   27cd6:	f108 0801 	addeq.w	r8, r8, #1
   27cda:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   27cde:	e51c      	b.n	2771a <_vfiprintf_r+0xe6>
   27ce0:	f046 0310 	orr.w	r3, r6, #16
   27ce4:	9303      	str	r3, [sp, #12]
   27ce6:	9b03      	ldr	r3, [sp, #12]
   27ce8:	f013 0220 	ands.w	r2, r3, #32
   27cec:	f000 8206 	beq.w	280fc <_vfiprintf_r+0xac8>
   27cf0:	9b07      	ldr	r3, [sp, #28]
   27cf2:	3307      	adds	r3, #7
   27cf4:	f023 0307 	bic.w	r3, r3, #7
   27cf8:	4619      	mov	r1, r3
   27cfa:	685a      	ldr	r2, [r3, #4]
   27cfc:	f851 3b08 	ldr.w	r3, [r1], #8
   27d00:	9107      	str	r1, [sp, #28]
   27d02:	2101      	movs	r1, #1
   27d04:	e60d      	b.n	27922 <_vfiprintf_r+0x2ee>
   27d06:	9a07      	ldr	r2, [sp, #28]
   27d08:	f046 0302 	orr.w	r3, r6, #2
   27d0c:	9303      	str	r3, [sp, #12]
   27d0e:	f852 3b04 	ldr.w	r3, [r2], #4
   27d12:	9207      	str	r2, [sp, #28]
   27d14:	f647 0230 	movw	r2, #30768	; 0x7830
   27d18:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   27d1c:	4ab8      	ldr	r2, [pc, #736]	; (28000 <_vfiprintf_r+0x9cc>)
   27d1e:	920c      	str	r2, [sp, #48]	; 0x30
   27d20:	2102      	movs	r1, #2
   27d22:	2200      	movs	r2, #0
   27d24:	e5fd      	b.n	27922 <_vfiprintf_r+0x2ee>
   27d26:	06b7      	lsls	r7, r6, #26
   27d28:	f100 8248 	bmi.w	281bc <_vfiprintf_r+0xb88>
   27d2c:	06f5      	lsls	r5, r6, #27
   27d2e:	f100 8346 	bmi.w	283be <_vfiprintf_r+0xd8a>
   27d32:	0674      	lsls	r4, r6, #25
   27d34:	f100 83d5 	bmi.w	284e2 <_vfiprintf_r+0xeae>
   27d38:	05b0      	lsls	r0, r6, #22
   27d3a:	f140 8340 	bpl.w	283be <_vfiprintf_r+0xd8a>
   27d3e:	9b07      	ldr	r3, [sp, #28]
   27d40:	9905      	ldr	r1, [sp, #20]
   27d42:	f853 2b04 	ldr.w	r2, [r3], #4
   27d46:	9307      	str	r3, [sp, #28]
   27d48:	7011      	strb	r1, [r2, #0]
   27d4a:	e4be      	b.n	276ca <_vfiprintf_r+0x96>
   27d4c:	9603      	str	r6, [sp, #12]
   27d4e:	2901      	cmp	r1, #1
   27d50:	f43f ad8c 	beq.w	2786c <_vfiprintf_r+0x238>
   27d54:	2902      	cmp	r1, #2
   27d56:	ac44      	add	r4, sp, #272	; 0x110
   27d58:	d111      	bne.n	27d7e <_vfiprintf_r+0x74a>
   27d5a:	980c      	ldr	r0, [sp, #48]	; 0x30
   27d5c:	f003 010f 	and.w	r1, r3, #15
   27d60:	091b      	lsrs	r3, r3, #4
   27d62:	5c41      	ldrb	r1, [r0, r1]
   27d64:	f804 1d01 	strb.w	r1, [r4, #-1]!
   27d68:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   27d6c:	0912      	lsrs	r2, r2, #4
   27d6e:	ea53 0102 	orrs.w	r1, r3, r2
   27d72:	d1f3      	bne.n	27d5c <_vfiprintf_r+0x728>
   27d74:	9e03      	ldr	r6, [sp, #12]
   27d76:	ab44      	add	r3, sp, #272	; 0x110
   27d78:	1b1b      	subs	r3, r3, r4
   27d7a:	9304      	str	r3, [sp, #16]
   27d7c:	e583      	b.n	27886 <_vfiprintf_r+0x252>
   27d7e:	f003 0107 	and.w	r1, r3, #7
   27d82:	08db      	lsrs	r3, r3, #3
   27d84:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   27d88:	08d2      	lsrs	r2, r2, #3
   27d8a:	3130      	adds	r1, #48	; 0x30
   27d8c:	ea53 0502 	orrs.w	r5, r3, r2
   27d90:	4620      	mov	r0, r4
   27d92:	f804 1d01 	strb.w	r1, [r4, #-1]!
   27d96:	d1f2      	bne.n	27d7e <_vfiprintf_r+0x74a>
   27d98:	9e03      	ldr	r6, [sp, #12]
   27d9a:	07f3      	lsls	r3, r6, #31
   27d9c:	d5eb      	bpl.n	27d76 <_vfiprintf_r+0x742>
   27d9e:	2930      	cmp	r1, #48	; 0x30
   27da0:	d0e8      	beq.n	27d74 <_vfiprintf_r+0x740>
   27da2:	2330      	movs	r3, #48	; 0x30
   27da4:	3802      	subs	r0, #2
   27da6:	f804 3c01 	strb.w	r3, [r4, #-1]
   27daa:	ab44      	add	r3, sp, #272	; 0x110
   27dac:	1a1b      	subs	r3, r3, r0
   27dae:	9e03      	ldr	r6, [sp, #12]
   27db0:	9304      	str	r3, [sp, #16]
   27db2:	4604      	mov	r4, r0
   27db4:	e567      	b.n	27886 <_vfiprintf_r+0x252>
   27db6:	9b04      	ldr	r3, [sp, #16]
   27db8:	941b      	str	r4, [sp, #108]	; 0x6c
   27dba:	2201      	movs	r2, #1
   27dbc:	931c      	str	r3, [sp, #112]	; 0x70
   27dbe:	931a      	str	r3, [sp, #104]	; 0x68
   27dc0:	9219      	str	r2, [sp, #100]	; 0x64
   27dc2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27dc6:	f109 0908 	add.w	r9, r9, #8
   27dca:	e69d      	b.n	27b08 <_vfiprintf_r+0x4d4>
   27dcc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27dd0:	e47b      	b.n	276ca <_vfiprintf_r+0x96>
   27dd2:	9a06      	ldr	r2, [sp, #24]
   27dd4:	9d03      	ldr	r5, [sp, #12]
   27dd6:	1b55      	subs	r5, r2, r5
   27dd8:	2d00      	cmp	r5, #0
   27dda:	f77f ae76 	ble.w	27aca <_vfiprintf_r+0x496>
   27dde:	2d10      	cmp	r5, #16
   27de0:	f340 83bb 	ble.w	2855a <_vfiprintf_r+0xf26>
   27de4:	9409      	str	r4, [sp, #36]	; 0x24
   27de6:	ee18 4a10 	vmov	r4, s16
   27dea:	e007      	b.n	27dfc <_vfiprintf_r+0x7c8>
   27dec:	f100 0c02 	add.w	ip, r0, #2
   27df0:	f109 0908 	add.w	r9, r9, #8
   27df4:	4610      	mov	r0, r2
   27df6:	3d10      	subs	r5, #16
   27df8:	2d10      	cmp	r5, #16
   27dfa:	dd1e      	ble.n	27e3a <_vfiprintf_r+0x806>
   27dfc:	4981      	ldr	r1, [pc, #516]	; (28004 <_vfiprintf_r+0x9d0>)
   27dfe:	f8c9 1000 	str.w	r1, [r9]
   27e02:	1c42      	adds	r2, r0, #1
   27e04:	3310      	adds	r3, #16
   27e06:	2110      	movs	r1, #16
   27e08:	2a07      	cmp	r2, #7
   27e0a:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27e0e:	f8c9 1004 	str.w	r1, [r9, #4]
   27e12:	ddeb      	ble.n	27dec <_vfiprintf_r+0x7b8>
   27e14:	aa18      	add	r2, sp, #96	; 0x60
   27e16:	2b00      	cmp	r3, #0
   27e18:	d074      	beq.n	27f04 <_vfiprintf_r+0x8d0>
   27e1a:	4621      	mov	r1, r4
   27e1c:	4658      	mov	r0, fp
   27e1e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27e22:	f7ff fbcb 	bl	275bc <__sprint_r.part.0>
   27e26:	2800      	cmp	r0, #0
   27e28:	f47f addb 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   27e2c:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27e30:	3d10      	subs	r5, #16
   27e32:	2d10      	cmp	r5, #16
   27e34:	f100 0c01 	add.w	ip, r0, #1
   27e38:	dce0      	bgt.n	27dfc <_vfiprintf_r+0x7c8>
   27e3a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   27e3c:	4a71      	ldr	r2, [pc, #452]	; (28004 <_vfiprintf_r+0x9d0>)
   27e3e:	f8c9 5004 	str.w	r5, [r9, #4]
   27e42:	442b      	add	r3, r5
   27e44:	f1bc 0f07 	cmp.w	ip, #7
   27e48:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   27e4c:	f8c9 2000 	str.w	r2, [r9]
   27e50:	f340 8194 	ble.w	2817c <_vfiprintf_r+0xb48>
   27e54:	2b00      	cmp	r3, #0
   27e56:	f000 831f 	beq.w	28498 <_vfiprintf_r+0xe64>
   27e5a:	ee18 1a10 	vmov	r1, s16
   27e5e:	aa18      	add	r2, sp, #96	; 0x60
   27e60:	4658      	mov	r0, fp
   27e62:	f7ff fbab 	bl	275bc <__sprint_r.part.0>
   27e66:	2800      	cmp	r0, #0
   27e68:	f47f adbb 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   27e6c:	9a04      	ldr	r2, [sp, #16]
   27e6e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27e72:	1abd      	subs	r5, r7, r2
   27e74:	2d00      	cmp	r5, #0
   27e76:	f100 0101 	add.w	r1, r0, #1
   27e7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27e7e:	f77f ae29 	ble.w	27ad4 <_vfiprintf_r+0x4a0>
   27e82:	2d10      	cmp	r5, #16
   27e84:	dd29      	ble.n	27eda <_vfiprintf_r+0x8a6>
   27e86:	9409      	str	r4, [sp, #36]	; 0x24
   27e88:	2710      	movs	r7, #16
   27e8a:	ee18 4a10 	vmov	r4, s16
   27e8e:	e007      	b.n	27ea0 <_vfiprintf_r+0x86c>
   27e90:	f100 0c02 	add.w	ip, r0, #2
   27e94:	f109 0908 	add.w	r9, r9, #8
   27e98:	4610      	mov	r0, r2
   27e9a:	3d10      	subs	r5, #16
   27e9c:	2d10      	cmp	r5, #16
   27e9e:	dd1a      	ble.n	27ed6 <_vfiprintf_r+0x8a2>
   27ea0:	1c42      	adds	r2, r0, #1
   27ea2:	4958      	ldr	r1, [pc, #352]	; (28004 <_vfiprintf_r+0x9d0>)
   27ea4:	3310      	adds	r3, #16
   27ea6:	2a07      	cmp	r2, #7
   27ea8:	e9c9 1700 	strd	r1, r7, [r9]
   27eac:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27eb0:	ddee      	ble.n	27e90 <_vfiprintf_r+0x85c>
   27eb2:	aa18      	add	r2, sp, #96	; 0x60
   27eb4:	b303      	cbz	r3, 27ef8 <_vfiprintf_r+0x8c4>
   27eb6:	4621      	mov	r1, r4
   27eb8:	4658      	mov	r0, fp
   27eba:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27ebe:	f7ff fb7d 	bl	275bc <__sprint_r.part.0>
   27ec2:	2800      	cmp	r0, #0
   27ec4:	f47f ad8d 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   27ec8:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27ecc:	3d10      	subs	r5, #16
   27ece:	2d10      	cmp	r5, #16
   27ed0:	f100 0c01 	add.w	ip, r0, #1
   27ed4:	dce4      	bgt.n	27ea0 <_vfiprintf_r+0x86c>
   27ed6:	9c09      	ldr	r4, [sp, #36]	; 0x24
   27ed8:	4661      	mov	r1, ip
   27eda:	4a4a      	ldr	r2, [pc, #296]	; (28004 <_vfiprintf_r+0x9d0>)
   27edc:	f8c9 5004 	str.w	r5, [r9, #4]
   27ee0:	442b      	add	r3, r5
   27ee2:	2907      	cmp	r1, #7
   27ee4:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   27ee8:	f8c9 2000 	str.w	r2, [r9]
   27eec:	f300 80e7 	bgt.w	280be <_vfiprintf_r+0xa8a>
   27ef0:	f109 0908 	add.w	r9, r9, #8
   27ef4:	3101      	adds	r1, #1
   27ef6:	e5ed      	b.n	27ad4 <_vfiprintf_r+0x4a0>
   27ef8:	f04f 0c01 	mov.w	ip, #1
   27efc:	4618      	mov	r0, r3
   27efe:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27f02:	e7ca      	b.n	27e9a <_vfiprintf_r+0x866>
   27f04:	f04f 0c01 	mov.w	ip, #1
   27f08:	4618      	mov	r0, r3
   27f0a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27f0e:	e772      	b.n	27df6 <_vfiprintf_r+0x7c2>
   27f10:	2b00      	cmp	r3, #0
   27f12:	f000 8104 	beq.w	2811e <_vfiprintf_r+0xaea>
   27f16:	ee18 1a10 	vmov	r1, s16
   27f1a:	aa18      	add	r2, sp, #96	; 0x60
   27f1c:	4658      	mov	r0, fp
   27f1e:	f7ff fb4d 	bl	275bc <__sprint_r.part.0>
   27f22:	2800      	cmp	r0, #0
   27f24:	f47f ad5d 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   27f28:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27f2c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27f30:	1c41      	adds	r1, r0, #1
   27f32:	e5a7      	b.n	27a84 <_vfiprintf_r+0x450>
   27f34:	2302      	movs	r3, #2
   27f36:	aa11      	add	r2, sp, #68	; 0x44
   27f38:	931c      	str	r3, [sp, #112]	; 0x70
   27f3a:	921b      	str	r2, [sp, #108]	; 0x6c
   27f3c:	2101      	movs	r1, #1
   27f3e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27f42:	4608      	mov	r0, r1
   27f44:	f109 0908 	add.w	r9, r9, #8
   27f48:	1c41      	adds	r1, r0, #1
   27f4a:	e5ba      	b.n	27ac2 <_vfiprintf_r+0x48e>
   27f4c:	2d10      	cmp	r5, #16
   27f4e:	f340 82e5 	ble.w	2851c <_vfiprintf_r+0xee8>
   27f52:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   27f56:	940f      	str	r4, [sp, #60]	; 0x3c
   27f58:	4608      	mov	r0, r1
   27f5a:	ee18 4a10 	vmov	r4, s16
   27f5e:	e007      	b.n	27f70 <_vfiprintf_r+0x93c>
   27f60:	f100 0c02 	add.w	ip, r0, #2
   27f64:	f109 0908 	add.w	r9, r9, #8
   27f68:	4610      	mov	r0, r2
   27f6a:	3d10      	subs	r5, #16
   27f6c:	2d10      	cmp	r5, #16
   27f6e:	dd1d      	ble.n	27fac <_vfiprintf_r+0x978>
   27f70:	4925      	ldr	r1, [pc, #148]	; (28008 <_vfiprintf_r+0x9d4>)
   27f72:	f8c9 1000 	str.w	r1, [r9]
   27f76:	1c42      	adds	r2, r0, #1
   27f78:	3310      	adds	r3, #16
   27f7a:	2110      	movs	r1, #16
   27f7c:	2a07      	cmp	r2, #7
   27f7e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27f82:	f8c9 1004 	str.w	r1, [r9, #4]
   27f86:	ddeb      	ble.n	27f60 <_vfiprintf_r+0x92c>
   27f88:	aa18      	add	r2, sp, #96	; 0x60
   27f8a:	b303      	cbz	r3, 27fce <_vfiprintf_r+0x99a>
   27f8c:	4621      	mov	r1, r4
   27f8e:	4658      	mov	r0, fp
   27f90:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27f94:	f7ff fb12 	bl	275bc <__sprint_r.part.0>
   27f98:	2800      	cmp	r0, #0
   27f9a:	f47f ad22 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   27f9e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27fa2:	3d10      	subs	r5, #16
   27fa4:	2d10      	cmp	r5, #16
   27fa6:	f100 0c01 	add.w	ip, r0, #1
   27faa:	dce1      	bgt.n	27f70 <_vfiprintf_r+0x93c>
   27fac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   27fae:	4660      	mov	r0, ip
   27fb0:	4a15      	ldr	r2, [pc, #84]	; (28008 <_vfiprintf_r+0x9d4>)
   27fb2:	f8c9 5004 	str.w	r5, [r9, #4]
   27fb6:	442b      	add	r3, r5
   27fb8:	2807      	cmp	r0, #7
   27fba:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   27fbe:	f8c9 2000 	str.w	r2, [r9]
   27fc2:	f300 80c1 	bgt.w	28148 <_vfiprintf_r+0xb14>
   27fc6:	f109 0908 	add.w	r9, r9, #8
   27fca:	1c41      	adds	r1, r0, #1
   27fcc:	e546      	b.n	27a5c <_vfiprintf_r+0x428>
   27fce:	4618      	mov	r0, r3
   27fd0:	f04f 0c01 	mov.w	ip, #1
   27fd4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27fd8:	e7c7      	b.n	27f6a <_vfiprintf_r+0x936>
   27fda:	0776      	lsls	r6, r6, #29
   27fdc:	9319      	str	r3, [sp, #100]	; 0x64
   27fde:	d553      	bpl.n	28088 <_vfiprintf_r+0xa54>
   27fe0:	9a06      	ldr	r2, [sp, #24]
   27fe2:	9903      	ldr	r1, [sp, #12]
   27fe4:	1a54      	subs	r4, r2, r1
   27fe6:	2c00      	cmp	r4, #0
   27fe8:	dd4e      	ble.n	28088 <_vfiprintf_r+0xa54>
   27fea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27fee:	2c10      	cmp	r4, #16
   27ff0:	f340 82b0 	ble.w	28554 <_vfiprintf_r+0xf20>
   27ff4:	9919      	ldr	r1, [sp, #100]	; 0x64
   27ff6:	ee18 6a10 	vmov	r6, s16
   27ffa:	2510      	movs	r5, #16
   27ffc:	e00d      	b.n	2801a <_vfiprintf_r+0x9e6>
   27ffe:	bf00      	nop
   28000:	20002c38 	.word	0x20002c38
   28004:	20004cd8 	.word	0x20004cd8
   28008:	20002c78 	.word	0x20002c78
   2800c:	1c88      	adds	r0, r1, #2
   2800e:	f109 0908 	add.w	r9, r9, #8
   28012:	4611      	mov	r1, r2
   28014:	3c10      	subs	r4, #16
   28016:	2c10      	cmp	r4, #16
   28018:	dd1a      	ble.n	28050 <_vfiprintf_r+0xa1c>
   2801a:	1c4a      	adds	r2, r1, #1
   2801c:	48b3      	ldr	r0, [pc, #716]	; (282ec <_vfiprintf_r+0xcb8>)
   2801e:	3310      	adds	r3, #16
   28020:	2a07      	cmp	r2, #7
   28022:	e9c9 0500 	strd	r0, r5, [r9]
   28026:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2802a:	ddef      	ble.n	2800c <_vfiprintf_r+0x9d8>
   2802c:	aa18      	add	r2, sp, #96	; 0x60
   2802e:	b333      	cbz	r3, 2807e <_vfiprintf_r+0xa4a>
   28030:	4631      	mov	r1, r6
   28032:	4658      	mov	r0, fp
   28034:	f7ff fac2 	bl	275bc <__sprint_r.part.0>
   28038:	2800      	cmp	r0, #0
   2803a:	f47f acd2 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   2803e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   28042:	3c10      	subs	r4, #16
   28044:	2c10      	cmp	r4, #16
   28046:	f101 0001 	add.w	r0, r1, #1
   2804a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2804e:	dce4      	bgt.n	2801a <_vfiprintf_r+0x9e6>
   28050:	4aa6      	ldr	r2, [pc, #664]	; (282ec <_vfiprintf_r+0xcb8>)
   28052:	f8c9 4004 	str.w	r4, [r9, #4]
   28056:	4423      	add	r3, r4
   28058:	2807      	cmp	r0, #7
   2805a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   2805e:	f8c9 2000 	str.w	r2, [r9]
   28062:	f77f ad59 	ble.w	27b18 <_vfiprintf_r+0x4e4>
   28066:	b17b      	cbz	r3, 28088 <_vfiprintf_r+0xa54>
   28068:	ee18 1a10 	vmov	r1, s16
   2806c:	aa18      	add	r2, sp, #96	; 0x60
   2806e:	4658      	mov	r0, fp
   28070:	f7ff faa4 	bl	275bc <__sprint_r.part.0>
   28074:	2800      	cmp	r0, #0
   28076:	f47f acb4 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   2807a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2807c:	e54c      	b.n	27b18 <_vfiprintf_r+0x4e4>
   2807e:	2001      	movs	r0, #1
   28080:	4619      	mov	r1, r3
   28082:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28086:	e7c5      	b.n	28014 <_vfiprintf_r+0x9e0>
   28088:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   2808c:	9903      	ldr	r1, [sp, #12]
   2808e:	428a      	cmp	r2, r1
   28090:	bfac      	ite	ge
   28092:	189b      	addge	r3, r3, r2
   28094:	185b      	addlt	r3, r3, r1
   28096:	9305      	str	r3, [sp, #20]
   28098:	e549      	b.n	27b2e <_vfiprintf_r+0x4fa>
   2809a:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   2809e:	058f      	lsls	r7, r1, #22
   280a0:	ee18 3a10 	vmov	r3, s16
   280a4:	b28a      	uxth	r2, r1
   280a6:	f53f aae8 	bmi.w	2767a <_vfiprintf_r+0x46>
   280aa:	ee18 5a10 	vmov	r5, s16
   280ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
   280b0:	f7fb fb0a 	bl	236c8 <__retarget_lock_acquire_recursive>
   280b4:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   280b8:	b28a      	uxth	r2, r1
   280ba:	f7ff bade 	b.w	2767a <_vfiprintf_r+0x46>
   280be:	2b00      	cmp	r3, #0
   280c0:	f43f ae79 	beq.w	27db6 <_vfiprintf_r+0x782>
   280c4:	ee18 1a10 	vmov	r1, s16
   280c8:	aa18      	add	r2, sp, #96	; 0x60
   280ca:	4658      	mov	r0, fp
   280cc:	f7ff fa76 	bl	275bc <__sprint_r.part.0>
   280d0:	2800      	cmp	r0, #0
   280d2:	f47f ac86 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   280d6:	9919      	ldr	r1, [sp, #100]	; 0x64
   280d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   280da:	3101      	adds	r1, #1
   280dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   280e0:	e4f8      	b.n	27ad4 <_vfiprintf_r+0x4a0>
   280e2:	9219      	str	r2, [sp, #100]	; 0x64
   280e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   280e8:	e45e      	b.n	279a8 <_vfiprintf_r+0x374>
   280ea:	2f00      	cmp	r7, #0
   280ec:	f47f abc3 	bne.w	27876 <_vfiprintf_r+0x242>
   280f0:	9e03      	ldr	r6, [sp, #12]
   280f2:	2700      	movs	r7, #0
   280f4:	9704      	str	r7, [sp, #16]
   280f6:	ac44      	add	r4, sp, #272	; 0x110
   280f8:	f7ff bbc5 	b.w	27886 <_vfiprintf_r+0x252>
   280fc:	9b03      	ldr	r3, [sp, #12]
   280fe:	f013 0310 	ands.w	r3, r3, #16
   28102:	d154      	bne.n	281ae <_vfiprintf_r+0xb7a>
   28104:	9a03      	ldr	r2, [sp, #12]
   28106:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   2810a:	f000 816b 	beq.w	283e4 <_vfiprintf_r+0xdb0>
   2810e:	9907      	ldr	r1, [sp, #28]
   28110:	461a      	mov	r2, r3
   28112:	f851 3b04 	ldr.w	r3, [r1], #4
   28116:	9107      	str	r1, [sp, #28]
   28118:	b29b      	uxth	r3, r3
   2811a:	2101      	movs	r1, #1
   2811c:	e401      	b.n	27922 <_vfiprintf_r+0x2ee>
   2811e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   28120:	2a00      	cmp	r2, #0
   28122:	d164      	bne.n	281ee <_vfiprintf_r+0xbba>
   28124:	4618      	mov	r0, r3
   28126:	2101      	movs	r1, #1
   28128:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2812c:	e4c9      	b.n	27ac2 <_vfiprintf_r+0x48e>
   2812e:	2101      	movs	r1, #1
   28130:	4618      	mov	r0, r3
   28132:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28136:	e4c4      	b.n	27ac2 <_vfiprintf_r+0x48e>
   28138:	425b      	negs	r3, r3
   2813a:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   2813e:	9603      	str	r6, [sp, #12]
   28140:	202d      	movs	r0, #45	; 0x2d
   28142:	2101      	movs	r1, #1
   28144:	f7ff bbee 	b.w	27924 <_vfiprintf_r+0x2f0>
   28148:	2b00      	cmp	r3, #0
   2814a:	f000 8088 	beq.w	2825e <_vfiprintf_r+0xc2a>
   2814e:	ee18 1a10 	vmov	r1, s16
   28152:	aa18      	add	r2, sp, #96	; 0x60
   28154:	4658      	mov	r0, fp
   28156:	f7ff fa31 	bl	275bc <__sprint_r.part.0>
   2815a:	2800      	cmp	r0, #0
   2815c:	f47f ac41 	bne.w	279e2 <_vfiprintf_r+0x3ae>
   28160:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   28164:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28168:	1c41      	adds	r1, r0, #1
   2816a:	e477      	b.n	27a5c <_vfiprintf_r+0x428>
   2816c:	f898 1000 	ldrb.w	r1, [r8]
   28170:	9307      	str	r3, [sp, #28]
   28172:	f7ff bad2 	b.w	2771a <_vfiprintf_r+0xe6>
   28176:	ac44      	add	r4, sp, #272	; 0x110
   28178:	f7ff bb85 	b.w	27886 <_vfiprintf_r+0x252>
   2817c:	f109 0908 	add.w	r9, r9, #8
   28180:	f10c 0101 	add.w	r1, ip, #1
   28184:	4660      	mov	r0, ip
   28186:	e4a0      	b.n	27aca <_vfiprintf_r+0x496>
   28188:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   2818c:	f040 8197 	bne.w	284be <_vfiprintf_r+0xe8a>
   28190:	f851 3b04 	ldr.w	r3, [r1], #4
   28194:	9107      	str	r1, [sp, #28]
   28196:	f7ff bbc0 	b.w	2791a <_vfiprintf_r+0x2e6>
   2819a:	05b3      	lsls	r3, r6, #22
   2819c:	f100 8188 	bmi.w	284b0 <_vfiprintf_r+0xe7c>
   281a0:	f852 3b04 	ldr.w	r3, [r2], #4
   281a4:	9207      	str	r2, [sp, #28]
   281a6:	17da      	asrs	r2, r3, #31
   281a8:	4611      	mov	r1, r2
   281aa:	f7ff bb52 	b.w	27852 <_vfiprintf_r+0x21e>
   281ae:	9907      	ldr	r1, [sp, #28]
   281b0:	f851 3b04 	ldr.w	r3, [r1], #4
   281b4:	9107      	str	r1, [sp, #28]
   281b6:	2101      	movs	r1, #1
   281b8:	f7ff bbb3 	b.w	27922 <_vfiprintf_r+0x2ee>
   281bc:	9b07      	ldr	r3, [sp, #28]
   281be:	9805      	ldr	r0, [sp, #20]
   281c0:	f853 1b04 	ldr.w	r1, [r3], #4
   281c4:	9307      	str	r3, [sp, #28]
   281c6:	17c2      	asrs	r2, r0, #31
   281c8:	e9c1 0200 	strd	r0, r2, [r1]
   281cc:	f7ff ba7d 	b.w	276ca <_vfiprintf_r+0x96>
   281d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   281d2:	2b00      	cmp	r3, #0
   281d4:	f43f ab26 	beq.w	27824 <_vfiprintf_r+0x1f0>
   281d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   281da:	781b      	ldrb	r3, [r3, #0]
   281dc:	2b00      	cmp	r3, #0
   281de:	f43f ab21 	beq.w	27824 <_vfiprintf_r+0x1f0>
   281e2:	f898 1000 	ldrb.w	r1, [r8]
   281e6:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   281ea:	f7ff ba96 	b.w	2771a <_vfiprintf_r+0xe6>
   281ee:	2302      	movs	r3, #2
   281f0:	aa11      	add	r2, sp, #68	; 0x44
   281f2:	931c      	str	r3, [sp, #112]	; 0x70
   281f4:	921b      	str	r2, [sp, #108]	; 0x6c
   281f6:	2001      	movs	r0, #1
   281f8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   281fc:	e6a2      	b.n	27f44 <_vfiprintf_r+0x910>
   281fe:	9603      	str	r6, [sp, #12]
   28200:	e571      	b.n	27ce6 <_vfiprintf_r+0x6b2>
   28202:	4b3b      	ldr	r3, [pc, #236]	; (282f0 <_vfiprintf_r+0xcbc>)
   28204:	930c      	str	r3, [sp, #48]	; 0x30
   28206:	f016 0220 	ands.w	r2, r6, #32
   2820a:	d059      	beq.n	282c0 <_vfiprintf_r+0xc8c>
   2820c:	9b07      	ldr	r3, [sp, #28]
   2820e:	3307      	adds	r3, #7
   28210:	f023 0307 	bic.w	r3, r3, #7
   28214:	4618      	mov	r0, r3
   28216:	685a      	ldr	r2, [r3, #4]
   28218:	f850 3b08 	ldr.w	r3, [r0], #8
   2821c:	9007      	str	r0, [sp, #28]
   2821e:	07f4      	lsls	r4, r6, #31
   28220:	d509      	bpl.n	28236 <_vfiprintf_r+0xc02>
   28222:	ea53 0002 	orrs.w	r0, r3, r2
   28226:	d006      	beq.n	28236 <_vfiprintf_r+0xc02>
   28228:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   2822c:	2130      	movs	r1, #48	; 0x30
   2822e:	f046 0602 	orr.w	r6, r6, #2
   28232:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   28236:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   2823a:	9103      	str	r1, [sp, #12]
   2823c:	2102      	movs	r1, #2
   2823e:	f7ff bb70 	b.w	27922 <_vfiprintf_r+0x2ee>
   28242:	4b2c      	ldr	r3, [pc, #176]	; (282f4 <_vfiprintf_r+0xcc0>)
   28244:	930c      	str	r3, [sp, #48]	; 0x30
   28246:	e7de      	b.n	28206 <_vfiprintf_r+0xbd2>
   28248:	9b07      	ldr	r3, [sp, #28]
   2824a:	2101      	movs	r1, #1
   2824c:	f853 2b04 	ldr.w	r2, [r3], #4
   28250:	9103      	str	r1, [sp, #12]
   28252:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   28256:	9307      	str	r3, [sp, #28]
   28258:	9104      	str	r1, [sp, #16]
   2825a:	ac2b      	add	r4, sp, #172	; 0xac
   2825c:	e4df      	b.n	27c1e <_vfiprintf_r+0x5ea>
   2825e:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   28262:	2a00      	cmp	r2, #0
   28264:	f040 8132 	bne.w	284cc <_vfiprintf_r+0xe98>
   28268:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2826a:	2a00      	cmp	r2, #0
   2826c:	f47f ae62 	bne.w	27f34 <_vfiprintf_r+0x900>
   28270:	4618      	mov	r0, r3
   28272:	2101      	movs	r1, #1
   28274:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   28278:	e427      	b.n	27aca <_vfiprintf_r+0x496>
   2827a:	2100      	movs	r1, #0
   2827c:	2208      	movs	r2, #8
   2827e:	a816      	add	r0, sp, #88	; 0x58
   28280:	9413      	str	r4, [sp, #76]	; 0x4c
   28282:	f7fa fee9 	bl	23058 <memset>
   28286:	1c79      	adds	r1, r7, #1
   28288:	f000 80bc 	beq.w	28404 <_vfiprintf_r+0xdd0>
   2828c:	2500      	movs	r5, #0
   2828e:	9407      	str	r4, [sp, #28]
   28290:	462c      	mov	r4, r5
   28292:	e00c      	b.n	282ae <_vfiprintf_r+0xc7a>
   28294:	a92b      	add	r1, sp, #172	; 0xac
   28296:	4658      	mov	r0, fp
   28298:	f7fe f926 	bl	264e8 <_wcrtomb_r>
   2829c:	1c42      	adds	r2, r0, #1
   2829e:	4420      	add	r0, r4
   282a0:	f000 816b 	beq.w	2857a <_vfiprintf_r+0xf46>
   282a4:	42b8      	cmp	r0, r7
   282a6:	dc08      	bgt.n	282ba <_vfiprintf_r+0xc86>
   282a8:	f000 8170 	beq.w	2858c <_vfiprintf_r+0xf58>
   282ac:	4604      	mov	r4, r0
   282ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   282b0:	5952      	ldr	r2, [r2, r5]
   282b2:	ab16      	add	r3, sp, #88	; 0x58
   282b4:	3504      	adds	r5, #4
   282b6:	2a00      	cmp	r2, #0
   282b8:	d1ec      	bne.n	28294 <_vfiprintf_r+0xc60>
   282ba:	9404      	str	r4, [sp, #16]
   282bc:	9c07      	ldr	r4, [sp, #28]
   282be:	e0af      	b.n	28420 <_vfiprintf_r+0xdec>
   282c0:	f016 0310 	ands.w	r3, r6, #16
   282c4:	9807      	ldr	r0, [sp, #28]
   282c6:	d10c      	bne.n	282e2 <_vfiprintf_r+0xcae>
   282c8:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   282cc:	d005      	beq.n	282da <_vfiprintf_r+0xca6>
   282ce:	461a      	mov	r2, r3
   282d0:	f850 3b04 	ldr.w	r3, [r0], #4
   282d4:	9007      	str	r0, [sp, #28]
   282d6:	b29b      	uxth	r3, r3
   282d8:	e7a1      	b.n	2821e <_vfiprintf_r+0xbea>
   282da:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   282de:	f040 80e1 	bne.w	284a4 <_vfiprintf_r+0xe70>
   282e2:	f850 3b04 	ldr.w	r3, [r0], #4
   282e6:	9007      	str	r0, [sp, #28]
   282e8:	e799      	b.n	2821e <_vfiprintf_r+0xbea>
   282ea:	bf00      	nop
   282ec:	20002c78 	.word	0x20002c78
   282f0:	20002c38 	.word	0x20002c38
   282f4:	20002c4c 	.word	0x20002c4c
   282f8:	9903      	ldr	r1, [sp, #12]
   282fa:	9704      	str	r7, [sp, #16]
   282fc:	ac44      	add	r4, sp, #272	; 0x110
   282fe:	469e      	mov	lr, r3
   28300:	ee08 ba90 	vmov	s17, fp
   28304:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   28308:	f04f 0c00 	mov.w	ip, #0
   2830c:	4623      	mov	r3, r4
   2830e:	e006      	b.n	2831e <_vfiprintf_r+0xcea>
   28310:	f1be 0f0a 	cmp.w	lr, #10
   28314:	f172 0200 	sbcs.w	r2, r2, #0
   28318:	d339      	bcc.n	2838e <_vfiprintf_r+0xd5a>
   2831a:	46a6      	mov	lr, r4
   2831c:	462a      	mov	r2, r5
   2831e:	49a6      	ldr	r1, [pc, #664]	; (285b8 <_vfiprintf_r+0xf84>)
   28320:	eb1e 0002 	adds.w	r0, lr, r2
   28324:	f140 0000 	adc.w	r0, r0, #0
   28328:	460f      	mov	r7, r1
   2832a:	fba1 1400 	umull	r1, r4, r1, r0
   2832e:	f024 0103 	bic.w	r1, r4, #3
   28332:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   28336:	1a40      	subs	r0, r0, r1
   28338:	ebbe 0100 	subs.w	r1, lr, r0
   2833c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   28340:	f162 0400 	sbc.w	r4, r2, #0
   28344:	fb05 f501 	mul.w	r5, r5, r1
   28348:	fb07 5504 	mla	r5, r7, r4, r5
   2834c:	fba1 4107 	umull	r4, r1, r1, r7
   28350:	440d      	add	r5, r1
   28352:	2705      	movs	r7, #5
   28354:	f004 0101 	and.w	r1, r4, #1
   28358:	fba1 1b07 	umull	r1, fp, r1, r7
   2835c:	1809      	adds	r1, r1, r0
   2835e:	0864      	lsrs	r4, r4, #1
   28360:	3130      	adds	r1, #48	; 0x30
   28362:	f803 1c01 	strb.w	r1, [r3, #-1]
   28366:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   2836a:	f10c 0c01 	add.w	ip, ip, #1
   2836e:	3b01      	subs	r3, #1
   28370:	086d      	lsrs	r5, r5, #1
   28372:	2e00      	cmp	r6, #0
   28374:	d0cc      	beq.n	28310 <_vfiprintf_r+0xcdc>
   28376:	990b      	ldr	r1, [sp, #44]	; 0x2c
   28378:	7809      	ldrb	r1, [r1, #0]
   2837a:	4561      	cmp	r1, ip
   2837c:	d1c8      	bne.n	28310 <_vfiprintf_r+0xcdc>
   2837e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   28382:	d0c5      	beq.n	28310 <_vfiprintf_r+0xcdc>
   28384:	f1be 0f0a 	cmp.w	lr, #10
   28388:	f172 0200 	sbcs.w	r2, r2, #0
   2838c:	d26c      	bcs.n	28468 <_vfiprintf_r+0xe34>
   2838e:	461c      	mov	r4, r3
   28390:	ab44      	add	r3, sp, #272	; 0x110
   28392:	1b1b      	subs	r3, r3, r4
   28394:	9f04      	ldr	r7, [sp, #16]
   28396:	9e03      	ldr	r6, [sp, #12]
   28398:	9304      	str	r3, [sp, #16]
   2839a:	ee18 ba90 	vmov	fp, s17
   2839e:	f7ff ba72 	b.w	27886 <_vfiprintf_r+0x252>
   283a2:	9603      	str	r6, [sp, #12]
   283a4:	f7ff ba62 	b.w	2786c <_vfiprintf_r+0x238>
   283a8:	4658      	mov	r0, fp
   283aa:	f7fa fa5f 	bl	2286c <__sinit>
   283ae:	f7ff b95b 	b.w	27668 <_vfiprintf_r+0x34>
   283b2:	2901      	cmp	r1, #1
   283b4:	9603      	str	r6, [sp, #12]
   283b6:	f47f accd 	bne.w	27d54 <_vfiprintf_r+0x720>
   283ba:	f7ff ba5c 	b.w	27876 <_vfiprintf_r+0x242>
   283be:	9b07      	ldr	r3, [sp, #28]
   283c0:	9905      	ldr	r1, [sp, #20]
   283c2:	f853 2b04 	ldr.w	r2, [r3], #4
   283c6:	6011      	str	r1, [r2, #0]
   283c8:	9307      	str	r3, [sp, #28]
   283ca:	f7ff b97e 	b.w	276ca <_vfiprintf_r+0x96>
   283ce:	2f06      	cmp	r7, #6
   283d0:	463b      	mov	r3, r7
   283d2:	9a03      	ldr	r2, [sp, #12]
   283d4:	4c79      	ldr	r4, [pc, #484]	; (285bc <_vfiprintf_r+0xf88>)
   283d6:	9207      	str	r2, [sp, #28]
   283d8:	bf28      	it	cs
   283da:	2306      	movcs	r3, #6
   283dc:	9304      	str	r3, [sp, #16]
   283de:	9303      	str	r3, [sp, #12]
   283e0:	f7ff bb25 	b.w	27a2e <_vfiprintf_r+0x3fa>
   283e4:	9b03      	ldr	r3, [sp, #12]
   283e6:	9907      	ldr	r1, [sp, #28]
   283e8:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   283ec:	bf14      	ite	ne
   283ee:	f851 3b04 	ldrne.w	r3, [r1], #4
   283f2:	f851 3b04 	ldreq.w	r3, [r1], #4
   283f6:	9107      	str	r1, [sp, #28]
   283f8:	bf1c      	itt	ne
   283fa:	4602      	movne	r2, r0
   283fc:	b2db      	uxtbne	r3, r3
   283fe:	2101      	movs	r1, #1
   28400:	f7ff ba8f 	b.w	27922 <_vfiprintf_r+0x2ee>
   28404:	ab16      	add	r3, sp, #88	; 0x58
   28406:	9300      	str	r3, [sp, #0]
   28408:	2300      	movs	r3, #0
   2840a:	4619      	mov	r1, r3
   2840c:	aa13      	add	r2, sp, #76	; 0x4c
   2840e:	4658      	mov	r0, fp
   28410:	f7fe f890 	bl	26534 <_wcsrtombs_r>
   28414:	4603      	mov	r3, r0
   28416:	3301      	adds	r3, #1
   28418:	9004      	str	r0, [sp, #16]
   2841a:	f000 80ae 	beq.w	2857a <_vfiprintf_r+0xf46>
   2841e:	9413      	str	r4, [sp, #76]	; 0x4c
   28420:	9b04      	ldr	r3, [sp, #16]
   28422:	2b00      	cmp	r3, #0
   28424:	d030      	beq.n	28488 <_vfiprintf_r+0xe54>
   28426:	2b63      	cmp	r3, #99	; 0x63
   28428:	dc63      	bgt.n	284f2 <_vfiprintf_r+0xebe>
   2842a:	2300      	movs	r3, #0
   2842c:	9308      	str	r3, [sp, #32]
   2842e:	ac2b      	add	r4, sp, #172	; 0xac
   28430:	2208      	movs	r2, #8
   28432:	2100      	movs	r1, #0
   28434:	a816      	add	r0, sp, #88	; 0x58
   28436:	f7fa fe0f 	bl	23058 <memset>
   2843a:	9d04      	ldr	r5, [sp, #16]
   2843c:	ab16      	add	r3, sp, #88	; 0x58
   2843e:	9300      	str	r3, [sp, #0]
   28440:	aa13      	add	r2, sp, #76	; 0x4c
   28442:	462b      	mov	r3, r5
   28444:	4621      	mov	r1, r4
   28446:	4658      	mov	r0, fp
   28448:	f7fe f874 	bl	26534 <_wcsrtombs_r>
   2844c:	4285      	cmp	r5, r0
   2844e:	f040 80ab 	bne.w	285a8 <_vfiprintf_r+0xf74>
   28452:	9b03      	ldr	r3, [sp, #12]
   28454:	9a04      	ldr	r2, [sp, #16]
   28456:	9307      	str	r3, [sp, #28]
   28458:	2300      	movs	r3, #0
   2845a:	54a3      	strb	r3, [r4, r2]
   2845c:	461f      	mov	r7, r3
   2845e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   28462:	9303      	str	r3, [sp, #12]
   28464:	f7ff ba16 	b.w	27894 <_vfiprintf_r+0x260>
   28468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2846a:	990d      	ldr	r1, [sp, #52]	; 0x34
   2846c:	1a9b      	subs	r3, r3, r2
   2846e:	4618      	mov	r0, r3
   28470:	9308      	str	r3, [sp, #32]
   28472:	f7fa fe89 	bl	23188 <strncpy>
   28476:	990b      	ldr	r1, [sp, #44]	; 0x2c
   28478:	9b08      	ldr	r3, [sp, #32]
   2847a:	784a      	ldrb	r2, [r1, #1]
   2847c:	b10a      	cbz	r2, 28482 <_vfiprintf_r+0xe4e>
   2847e:	3101      	adds	r1, #1
   28480:	910b      	str	r1, [sp, #44]	; 0x2c
   28482:	f04f 0c00 	mov.w	ip, #0
   28486:	e748      	b.n	2831a <_vfiprintf_r+0xce6>
   28488:	9b03      	ldr	r3, [sp, #12]
   2848a:	9307      	str	r3, [sp, #28]
   2848c:	9b04      	ldr	r3, [sp, #16]
   2848e:	9303      	str	r3, [sp, #12]
   28490:	461f      	mov	r7, r3
   28492:	9308      	str	r3, [sp, #32]
   28494:	f7ff b9fe 	b.w	27894 <_vfiprintf_r+0x260>
   28498:	2101      	movs	r1, #1
   2849a:	4618      	mov	r0, r3
   2849c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   284a0:	f7ff bb13 	b.w	27aca <_vfiprintf_r+0x496>
   284a4:	f850 3b04 	ldr.w	r3, [r0], #4
   284a8:	9007      	str	r0, [sp, #28]
   284aa:	4622      	mov	r2, r4
   284ac:	b2db      	uxtb	r3, r3
   284ae:	e6b6      	b.n	2821e <_vfiprintf_r+0xbea>
   284b0:	f912 3b04 	ldrsb.w	r3, [r2], #4
   284b4:	9207      	str	r2, [sp, #28]
   284b6:	17da      	asrs	r2, r3, #31
   284b8:	4611      	mov	r1, r2
   284ba:	f7ff b9ca 	b.w	27852 <_vfiprintf_r+0x21e>
   284be:	f851 3b04 	ldr.w	r3, [r1], #4
   284c2:	9107      	str	r1, [sp, #28]
   284c4:	4602      	mov	r2, r0
   284c6:	b2db      	uxtb	r3, r3
   284c8:	f7ff ba27 	b.w	2791a <_vfiprintf_r+0x2e6>
   284cc:	2301      	movs	r3, #1
   284ce:	931c      	str	r3, [sp, #112]	; 0x70
   284d0:	2101      	movs	r1, #1
   284d2:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   284d6:	931b      	str	r3, [sp, #108]	; 0x6c
   284d8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   284dc:	460b      	mov	r3, r1
   284de:	f7ff bacd 	b.w	27a7c <_vfiprintf_r+0x448>
   284e2:	9b07      	ldr	r3, [sp, #28]
   284e4:	9905      	ldr	r1, [sp, #20]
   284e6:	f853 2b04 	ldr.w	r2, [r3], #4
   284ea:	9307      	str	r3, [sp, #28]
   284ec:	8011      	strh	r1, [r2, #0]
   284ee:	f7ff b8ec 	b.w	276ca <_vfiprintf_r+0x96>
   284f2:	1c59      	adds	r1, r3, #1
   284f4:	4658      	mov	r0, fp
   284f6:	f7f9 fbff 	bl	21cf8 <_malloc_r>
   284fa:	4604      	mov	r4, r0
   284fc:	2800      	cmp	r0, #0
   284fe:	d03c      	beq.n	2857a <_vfiprintf_r+0xf46>
   28500:	9008      	str	r0, [sp, #32]
   28502:	e795      	b.n	28430 <_vfiprintf_r+0xdfc>
   28504:	6d88      	ldr	r0, [r1, #88]	; 0x58
   28506:	f7fb f8e1 	bl	236cc <__retarget_lock_release_recursive>
   2850a:	f7ff b9e9 	b.w	278e0 <_vfiprintf_r+0x2ac>
   2850e:	9b03      	ldr	r3, [sp, #12]
   28510:	9307      	str	r3, [sp, #28]
   28512:	e9cd 7703 	strd	r7, r7, [sp, #12]
   28516:	9f08      	ldr	r7, [sp, #32]
   28518:	f7ff b9bc 	b.w	27894 <_vfiprintf_r+0x260>
   2851c:	9819      	ldr	r0, [sp, #100]	; 0x64
   2851e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   28520:	3001      	adds	r0, #1
   28522:	e545      	b.n	27fb0 <_vfiprintf_r+0x97c>
   28524:	9b03      	ldr	r3, [sp, #12]
   28526:	9307      	str	r3, [sp, #28]
   28528:	4620      	mov	r0, r4
   2852a:	f7fb f929 	bl	23780 <strlen>
   2852e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   28532:	462f      	mov	r7, r5
   28534:	9004      	str	r0, [sp, #16]
   28536:	9303      	str	r3, [sp, #12]
   28538:	9508      	str	r5, [sp, #32]
   2853a:	f7ff b9ab 	b.w	27894 <_vfiprintf_r+0x260>
   2853e:	ee18 1a10 	vmov	r1, s16
   28542:	aa18      	add	r2, sp, #96	; 0x60
   28544:	4658      	mov	r0, fp
   28546:	f7ff f839 	bl	275bc <__sprint_r.part.0>
   2854a:	2800      	cmp	r0, #0
   2854c:	f43f aa36 	beq.w	279bc <_vfiprintf_r+0x388>
   28550:	f7ff ba4d 	b.w	279ee <_vfiprintf_r+0x3ba>
   28554:	9819      	ldr	r0, [sp, #100]	; 0x64
   28556:	3001      	adds	r0, #1
   28558:	e57a      	b.n	28050 <_vfiprintf_r+0xa1c>
   2855a:	468c      	mov	ip, r1
   2855c:	e46e      	b.n	27e3c <_vfiprintf_r+0x808>
   2855e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   28560:	07d9      	lsls	r1, r3, #31
   28562:	d405      	bmi.n	28570 <_vfiprintf_r+0xf3c>
   28564:	89ab      	ldrh	r3, [r5, #12]
   28566:	059a      	lsls	r2, r3, #22
   28568:	d402      	bmi.n	28570 <_vfiprintf_r+0xf3c>
   2856a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2856c:	f7fb f8ae 	bl	236cc <__retarget_lock_release_recursive>
   28570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28574:	9305      	str	r3, [sp, #20]
   28576:	f7ff ba49 	b.w	27a0c <_vfiprintf_r+0x3d8>
   2857a:	ee18 2a10 	vmov	r2, s16
   2857e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   28582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28586:	8193      	strh	r3, [r2, #12]
   28588:	f7ff ba35 	b.w	279f6 <_vfiprintf_r+0x3c2>
   2858c:	9c07      	ldr	r4, [sp, #28]
   2858e:	9704      	str	r7, [sp, #16]
   28590:	e746      	b.n	28420 <_vfiprintf_r+0xdec>
   28592:	9b07      	ldr	r3, [sp, #28]
   28594:	f898 1001 	ldrb.w	r1, [r8, #1]
   28598:	f853 7b04 	ldr.w	r7, [r3], #4
   2859c:	9307      	str	r3, [sp, #28]
   2859e:	4690      	mov	r8, r2
   285a0:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   285a4:	f7ff b8b9 	b.w	2771a <_vfiprintf_r+0xe6>
   285a8:	ee18 2a10 	vmov	r2, s16
   285ac:	8993      	ldrh	r3, [r2, #12]
   285ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   285b2:	8193      	strh	r3, [r2, #12]
   285b4:	f7ff ba15 	b.w	279e2 <_vfiprintf_r+0x3ae>
   285b8:	cccccccd 	.word	0xcccccccd
   285bc:	20002c60 	.word	0x20002c60

000285c0 <__sbprintf>:
   285c0:	b570      	push	{r4, r5, r6, lr}
   285c2:	460c      	mov	r4, r1
   285c4:	8989      	ldrh	r1, [r1, #12]
   285c6:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   285ca:	f021 0102 	bic.w	r1, r1, #2
   285ce:	f8ad 1014 	strh.w	r1, [sp, #20]
   285d2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   285d4:	911b      	str	r1, [sp, #108]	; 0x6c
   285d6:	89e1      	ldrh	r1, [r4, #14]
   285d8:	f8ad 1016 	strh.w	r1, [sp, #22]
   285dc:	69e1      	ldr	r1, [r4, #28]
   285de:	9109      	str	r1, [sp, #36]	; 0x24
   285e0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   285e2:	910b      	str	r1, [sp, #44]	; 0x2c
   285e4:	a91c      	add	r1, sp, #112	; 0x70
   285e6:	9102      	str	r1, [sp, #8]
   285e8:	9106      	str	r1, [sp, #24]
   285ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
   285ee:	4606      	mov	r6, r0
   285f0:	9104      	str	r1, [sp, #16]
   285f2:	9107      	str	r1, [sp, #28]
   285f4:	a818      	add	r0, sp, #96	; 0x60
   285f6:	2100      	movs	r1, #0
   285f8:	e9cd 3200 	strd	r3, r2, [sp]
   285fc:	9108      	str	r1, [sp, #32]
   285fe:	f7fb f85f 	bl	236c0 <__retarget_lock_init_recursive>
   28602:	e9dd 3200 	ldrd	r3, r2, [sp]
   28606:	a902      	add	r1, sp, #8
   28608:	4630      	mov	r0, r6
   2860a:	f7ff f813 	bl	27634 <_vfiprintf_r>
   2860e:	1e05      	subs	r5, r0, #0
   28610:	db07      	blt.n	28622 <__sbprintf+0x62>
   28612:	a902      	add	r1, sp, #8
   28614:	4630      	mov	r0, r6
   28616:	f7fd fdd5 	bl	261c4 <_fflush_r>
   2861a:	2800      	cmp	r0, #0
   2861c:	bf18      	it	ne
   2861e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   28622:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   28626:	065b      	lsls	r3, r3, #25
   28628:	d503      	bpl.n	28632 <__sbprintf+0x72>
   2862a:	89a3      	ldrh	r3, [r4, #12]
   2862c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28630:	81a3      	strh	r3, [r4, #12]
   28632:	9818      	ldr	r0, [sp, #96]	; 0x60
   28634:	f7fb f846 	bl	236c4 <__retarget_lock_close_recursive>
   28638:	4628      	mov	r0, r5
   2863a:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   2863e:	bd70      	pop	{r4, r5, r6, pc}

00028640 <__fputwc>:
   28640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28644:	b082      	sub	sp, #8
   28646:	4682      	mov	sl, r0
   28648:	4688      	mov	r8, r1
   2864a:	4614      	mov	r4, r2
   2864c:	f7fa fe00 	bl	23250 <__locale_mb_cur_max>
   28650:	2801      	cmp	r0, #1
   28652:	d103      	bne.n	2865c <__fputwc+0x1c>
   28654:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   28658:	2bfe      	cmp	r3, #254	; 0xfe
   2865a:	d936      	bls.n	286ca <__fputwc+0x8a>
   2865c:	f10d 0904 	add.w	r9, sp, #4
   28660:	4642      	mov	r2, r8
   28662:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   28666:	4649      	mov	r1, r9
   28668:	4650      	mov	r0, sl
   2866a:	f7fd ff3d 	bl	264e8 <_wcrtomb_r>
   2866e:	1c42      	adds	r2, r0, #1
   28670:	4606      	mov	r6, r0
   28672:	d032      	beq.n	286da <__fputwc+0x9a>
   28674:	b320      	cbz	r0, 286c0 <__fputwc+0x80>
   28676:	f89d c004 	ldrb.w	ip, [sp, #4]
   2867a:	2500      	movs	r5, #0
   2867c:	e009      	b.n	28692 <__fputwc+0x52>
   2867e:	6823      	ldr	r3, [r4, #0]
   28680:	1c5a      	adds	r2, r3, #1
   28682:	6022      	str	r2, [r4, #0]
   28684:	f883 c000 	strb.w	ip, [r3]
   28688:	3501      	adds	r5, #1
   2868a:	42b5      	cmp	r5, r6
   2868c:	d218      	bcs.n	286c0 <__fputwc+0x80>
   2868e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   28692:	68a3      	ldr	r3, [r4, #8]
   28694:	3b01      	subs	r3, #1
   28696:	2b00      	cmp	r3, #0
   28698:	60a3      	str	r3, [r4, #8]
   2869a:	daf0      	bge.n	2867e <__fputwc+0x3e>
   2869c:	69a7      	ldr	r7, [r4, #24]
   2869e:	42bb      	cmp	r3, r7
   286a0:	4661      	mov	r1, ip
   286a2:	4622      	mov	r2, r4
   286a4:	4650      	mov	r0, sl
   286a6:	db02      	blt.n	286ae <__fputwc+0x6e>
   286a8:	f1bc 0f0a 	cmp.w	ip, #10
   286ac:	d1e7      	bne.n	2867e <__fputwc+0x3e>
   286ae:	f7fd fe07 	bl	262c0 <__swbuf_r>
   286b2:	1c43      	adds	r3, r0, #1
   286b4:	d1e8      	bne.n	28688 <__fputwc+0x48>
   286b6:	4606      	mov	r6, r0
   286b8:	4630      	mov	r0, r6
   286ba:	b002      	add	sp, #8
   286bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   286c0:	4646      	mov	r6, r8
   286c2:	4630      	mov	r0, r6
   286c4:	b002      	add	sp, #8
   286c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   286ca:	fa5f fc88 	uxtb.w	ip, r8
   286ce:	f88d c004 	strb.w	ip, [sp, #4]
   286d2:	4606      	mov	r6, r0
   286d4:	f10d 0904 	add.w	r9, sp, #4
   286d8:	e7cf      	b.n	2867a <__fputwc+0x3a>
   286da:	89a3      	ldrh	r3, [r4, #12]
   286dc:	4630      	mov	r0, r6
   286de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   286e2:	81a3      	strh	r3, [r4, #12]
   286e4:	b002      	add	sp, #8
   286e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   286ea:	bf00      	nop

000286ec <_fputwc_r>:
   286ec:	b530      	push	{r4, r5, lr}
   286ee:	6e53      	ldr	r3, [r2, #100]	; 0x64
   286f0:	f013 0f01 	tst.w	r3, #1
   286f4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   286f8:	4614      	mov	r4, r2
   286fa:	b083      	sub	sp, #12
   286fc:	4605      	mov	r5, r0
   286fe:	b29a      	uxth	r2, r3
   28700:	d101      	bne.n	28706 <_fputwc_r+0x1a>
   28702:	0598      	lsls	r0, r3, #22
   28704:	d51c      	bpl.n	28740 <_fputwc_r+0x54>
   28706:	0490      	lsls	r0, r2, #18
   28708:	d406      	bmi.n	28718 <_fputwc_r+0x2c>
   2870a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2870c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   28710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   28714:	81a3      	strh	r3, [r4, #12]
   28716:	6662      	str	r2, [r4, #100]	; 0x64
   28718:	4622      	mov	r2, r4
   2871a:	4628      	mov	r0, r5
   2871c:	f7ff ff90 	bl	28640 <__fputwc>
   28720:	6e63      	ldr	r3, [r4, #100]	; 0x64
   28722:	07da      	lsls	r2, r3, #31
   28724:	4605      	mov	r5, r0
   28726:	d402      	bmi.n	2872e <_fputwc_r+0x42>
   28728:	89a3      	ldrh	r3, [r4, #12]
   2872a:	059b      	lsls	r3, r3, #22
   2872c:	d502      	bpl.n	28734 <_fputwc_r+0x48>
   2872e:	4628      	mov	r0, r5
   28730:	b003      	add	sp, #12
   28732:	bd30      	pop	{r4, r5, pc}
   28734:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28736:	f7fa ffc9 	bl	236cc <__retarget_lock_release_recursive>
   2873a:	4628      	mov	r0, r5
   2873c:	b003      	add	sp, #12
   2873e:	bd30      	pop	{r4, r5, pc}
   28740:	6da0      	ldr	r0, [r4, #88]	; 0x58
   28742:	9101      	str	r1, [sp, #4]
   28744:	f7fa ffc0 	bl	236c8 <__retarget_lock_acquire_recursive>
   28748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2874c:	9901      	ldr	r1, [sp, #4]
   2874e:	b29a      	uxth	r2, r3
   28750:	e7d9      	b.n	28706 <_fputwc_r+0x1a>
   28752:	bf00      	nop

00028754 <_wcsnrtombs_l>:
   28754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28758:	b08b      	sub	sp, #44	; 0x2c
   2875a:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   2875e:	9f14      	ldr	r7, [sp, #80]	; 0x50
   28760:	9103      	str	r1, [sp, #12]
   28762:	4681      	mov	r9, r0
   28764:	9205      	str	r2, [sp, #20]
   28766:	461e      	mov	r6, r3
   28768:	f1b8 0f00 	cmp.w	r8, #0
   2876c:	d05c      	beq.n	28828 <_wcsnrtombs_l+0xd4>
   2876e:	9b03      	ldr	r3, [sp, #12]
   28770:	2b00      	cmp	r3, #0
   28772:	d05e      	beq.n	28832 <_wcsnrtombs_l+0xde>
   28774:	9b05      	ldr	r3, [sp, #20]
   28776:	681d      	ldr	r5, [r3, #0]
   28778:	2f00      	cmp	r7, #0
   2877a:	d06a      	beq.n	28852 <_wcsnrtombs_l+0xfe>
   2877c:	1e74      	subs	r4, r6, #1
   2877e:	b34e      	cbz	r6, 287d4 <_wcsnrtombs_l+0x80>
   28780:	9b03      	ldr	r3, [sp, #12]
   28782:	9304      	str	r3, [sp, #16]
   28784:	3d04      	subs	r5, #4
   28786:	2600      	movs	r6, #0
   28788:	9501      	str	r5, [sp, #4]
   2878a:	e00b      	b.n	287a4 <_wcsnrtombs_l+0x50>
   2878c:	9b03      	ldr	r3, [sp, #12]
   2878e:	bb2b      	cbnz	r3, 287dc <_wcsnrtombs_l+0x88>
   28790:	9b01      	ldr	r3, [sp, #4]
   28792:	681a      	ldr	r2, [r3, #0]
   28794:	2a00      	cmp	r2, #0
   28796:	d03a      	beq.n	2880e <_wcsnrtombs_l+0xba>
   28798:	45bc      	cmp	ip, r7
   2879a:	d25c      	bcs.n	28856 <_wcsnrtombs_l+0x102>
   2879c:	3c01      	subs	r4, #1
   2879e:	1c63      	adds	r3, r4, #1
   287a0:	4666      	mov	r6, ip
   287a2:	d017      	beq.n	287d4 <_wcsnrtombs_l+0x80>
   287a4:	f8d8 3000 	ldr.w	r3, [r8]
   287a8:	9302      	str	r3, [sp, #8]
   287aa:	9b01      	ldr	r3, [sp, #4]
   287ac:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   287b0:	f853 2f04 	ldr.w	r2, [r3, #4]!
   287b4:	9301      	str	r3, [sp, #4]
   287b6:	a907      	add	r1, sp, #28
   287b8:	4643      	mov	r3, r8
   287ba:	4648      	mov	r0, r9
   287bc:	f8d8 b004 	ldr.w	fp, [r8, #4]
   287c0:	47a8      	blx	r5
   287c2:	1c42      	adds	r2, r0, #1
   287c4:	d03a      	beq.n	2883c <_wcsnrtombs_l+0xe8>
   287c6:	eb00 0c06 	add.w	ip, r0, r6
   287ca:	45bc      	cmp	ip, r7
   287cc:	d9de      	bls.n	2878c <_wcsnrtombs_l+0x38>
   287ce:	9b02      	ldr	r3, [sp, #8]
   287d0:	e9c8 3b00 	strd	r3, fp, [r8]
   287d4:	4630      	mov	r0, r6
   287d6:	b00b      	add	sp, #44	; 0x2c
   287d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   287dc:	2800      	cmp	r0, #0
   287de:	dd0e      	ble.n	287fe <_wcsnrtombs_l+0xaa>
   287e0:	9b04      	ldr	r3, [sp, #16]
   287e2:	9d01      	ldr	r5, [sp, #4]
   287e4:	4418      	add	r0, r3
   287e6:	1e5a      	subs	r2, r3, #1
   287e8:	a907      	add	r1, sp, #28
   287ea:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   287ee:	f811 3b01 	ldrb.w	r3, [r1], #1
   287f2:	f802 3f01 	strb.w	r3, [r2, #1]!
   287f6:	4572      	cmp	r2, lr
   287f8:	d1f9      	bne.n	287ee <_wcsnrtombs_l+0x9a>
   287fa:	9501      	str	r5, [sp, #4]
   287fc:	9004      	str	r0, [sp, #16]
   287fe:	9b05      	ldr	r3, [sp, #20]
   28800:	681a      	ldr	r2, [r3, #0]
   28802:	3204      	adds	r2, #4
   28804:	601a      	str	r2, [r3, #0]
   28806:	9b01      	ldr	r3, [sp, #4]
   28808:	681a      	ldr	r2, [r3, #0]
   2880a:	2a00      	cmp	r2, #0
   2880c:	d1c4      	bne.n	28798 <_wcsnrtombs_l+0x44>
   2880e:	9b03      	ldr	r3, [sp, #12]
   28810:	b10b      	cbz	r3, 28816 <_wcsnrtombs_l+0xc2>
   28812:	9b05      	ldr	r3, [sp, #20]
   28814:	601a      	str	r2, [r3, #0]
   28816:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   2881a:	2200      	movs	r2, #0
   2881c:	4630      	mov	r0, r6
   2881e:	f8c8 2000 	str.w	r2, [r8]
   28822:	b00b      	add	sp, #44	; 0x2c
   28824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28828:	9b03      	ldr	r3, [sp, #12]
   2882a:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   2882e:	2b00      	cmp	r3, #0
   28830:	d1a0      	bne.n	28774 <_wcsnrtombs_l+0x20>
   28832:	9b05      	ldr	r3, [sp, #20]
   28834:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   28838:	681d      	ldr	r5, [r3, #0]
   2883a:	e79f      	b.n	2877c <_wcsnrtombs_l+0x28>
   2883c:	4606      	mov	r6, r0
   2883e:	218a      	movs	r1, #138	; 0x8a
   28840:	2200      	movs	r2, #0
   28842:	4630      	mov	r0, r6
   28844:	f8c9 1000 	str.w	r1, [r9]
   28848:	f8c8 2000 	str.w	r2, [r8]
   2884c:	b00b      	add	sp, #44	; 0x2c
   2884e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28852:	463e      	mov	r6, r7
   28854:	e7be      	b.n	287d4 <_wcsnrtombs_l+0x80>
   28856:	4666      	mov	r6, ip
   28858:	e7bc      	b.n	287d4 <_wcsnrtombs_l+0x80>
   2885a:	bf00      	nop

0002885c <_wcsnrtombs_r>:
   2885c:	b510      	push	{r4, lr}
   2885e:	b084      	sub	sp, #16
   28860:	4c05      	ldr	r4, [pc, #20]	; (28878 <_wcsnrtombs_r+0x1c>)
   28862:	9806      	ldr	r0, [sp, #24]
   28864:	9000      	str	r0, [sp, #0]
   28866:	9807      	ldr	r0, [sp, #28]
   28868:	9001      	str	r0, [sp, #4]
   2886a:	4804      	ldr	r0, [pc, #16]	; (2887c <_wcsnrtombs_r+0x20>)
   2886c:	6800      	ldr	r0, [r0, #0]
   2886e:	9402      	str	r4, [sp, #8]
   28870:	f7ff ff70 	bl	28754 <_wcsnrtombs_l>
   28874:	b004      	add	sp, #16
   28876:	bd10      	pop	{r4, pc}
   28878:	2000525c 	.word	0x2000525c
   2887c:	200057e4 	.word	0x200057e4

00028880 <___ZN16CrashReportClasscvbEv_veneer>:
   28880:	f85f f000 	ldr.w	pc, [pc]	; 28884 <___ZN16CrashReportClasscvbEv_veneer+0x4>
   28884:	600021c5 	.word	0x600021c5

00028888 <___reboot_Teensyduino__veneer>:
   28888:	f85f f000 	ldr.w	pc, [pc]	; 2888c <___reboot_Teensyduino__veneer+0x4>
   2888c:	6000287d 	.word	0x6000287d

00028890 <___Z14set_audioClockilmb_veneer>:
   28890:	f85f f000 	ldr.w	pc, [pc]	; 28894 <___Z14set_audioClockilmb_veneer+0x4>
   28894:	60001669 	.word	0x60001669

00028898 <___ZN7TwoWire5beginEv_veneer>:
   28898:	f85f f000 	ldr.w	pc, [pc]	; 2889c <___ZN7TwoWire5beginEv_veneer+0x4>
   2889c:	60001805 	.word	0x60001805

000288a0 <___init_veneer>:
   288a0:	f85f f000 	ldr.w	pc, [pc]	; 288a4 <___init_veneer+0x4>
   288a4:	60002925 	.word	0x60002925

000288a8 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   288a8:	f85f f000 	ldr.w	pc, [pc]	; 288ac <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   288ac:	60001849 	.word	0x60001849

Disassembly of section .fini:

000288b0 <_fini>:
   288b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   288b2:	bf00      	nop
