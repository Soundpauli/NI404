
/private/var/folders/3h/f1rm8vzs1lv5ljhwy05p7nfhf1r72j/T/arduino/sketches/64EF741A8E74C5DF9B6FEB97D70BCF95/soundpauli_ni404.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
}

__attribute__((section(".startup"), optimize("O1")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001400:	4288      	cmp	r0, r1
60001402:	d007      	beq.n	60001414 <memory_copy+0x14>
	while (dest < dest_end) {
60001404:	4290      	cmp	r0, r2
60001406:	d205      	bcs.n	60001414 <memory_copy+0x14>
		*dest++ = *src++;
60001408:	f851 3b04 	ldr.w	r3, [r1], #4
6000140c:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001410:	4282      	cmp	r2, r0
60001412:	d8f9      	bhi.n	60001408 <memory_copy+0x8>
	}
}
60001414:	4770      	bx	lr
60001416:	bf00      	nop

60001418 <memory_clear>:

__attribute__((section(".startup"), optimize("O1")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
60001418:	4288      	cmp	r0, r1
6000141a:	d204      	bcs.n	60001426 <memory_clear+0xe>
		*dest++ = 0;
6000141c:	2300      	movs	r3, #0
6000141e:	f840 3b04 	str.w	r3, [r0], #4
	while (dest < dest_end) {
60001422:	4281      	cmp	r1, r0
60001424:	d8fb      	bhi.n	6000141e <memory_clear+0x6>
	}
}
60001426:	4770      	bx	lr

60001428 <ResetHandler2>:
{
60001428:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
6000142c:	f000 fa5e 	bl	600018ec <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001430:	2408      	movs	r4, #8
60001432:	4b61      	ldr	r3, [pc, #388]	; (600015b8 <ResetHandler2+0x190>)
	memory_copy(&_stext, &_stextload, &_etext);
60001434:	4a61      	ldr	r2, [pc, #388]	; (600015bc <ResetHandler2+0x194>)
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001436:	f8c3 4154 	str.w	r4, [r3, #340]	; 0x154
	memory_copy(&_stext, &_stextload, &_etext);
6000143a:	4961      	ldr	r1, [pc, #388]	; (600015c0 <ResetHandler2+0x198>)
6000143c:	4861      	ldr	r0, [pc, #388]	; (600015c4 <ResetHandler2+0x19c>)
6000143e:	f7ff ffdf 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001442:	4a61      	ldr	r2, [pc, #388]	; (600015c8 <ResetHandler2+0x1a0>)
60001444:	4961      	ldr	r1, [pc, #388]	; (600015cc <ResetHandler2+0x1a4>)
60001446:	4862      	ldr	r0, [pc, #392]	; (600015d0 <ResetHandler2+0x1a8>)
60001448:	f7ff ffda 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
6000144c:	4961      	ldr	r1, [pc, #388]	; (600015d4 <ResetHandler2+0x1ac>)
6000144e:	4862      	ldr	r0, [pc, #392]	; (600015d8 <ResetHandler2+0x1b0>)
60001450:	f7ff ffe2 	bl	60001418 <memory_clear>
	SCB_CPACR = 0x00F00000;
60001454:	4c61      	ldr	r4, [pc, #388]	; (600015dc <ResetHandler2+0x1b4>)
60001456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
6000145a:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000145e:	2300      	movs	r3, #0
60001460:	4a5f      	ldr	r2, [pc, #380]	; (600015e0 <ResetHandler2+0x1b8>)
	SCB_CPACR = 0x00F00000;
60001462:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001466:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000146a:	3301      	adds	r3, #1
6000146c:	2bb0      	cmp	r3, #176	; 0xb0
6000146e:	d1fa      	bne.n	60001466 <ResetHandler2+0x3e>
60001470:	4b5c      	ldr	r3, [pc, #368]	; (600015e4 <ResetHandler2+0x1bc>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
60001472:	2180      	movs	r1, #128	; 0x80
60001474:	4a5c      	ldr	r2, [pc, #368]	; (600015e8 <ResetHandler2+0x1c0>)
60001476:	f803 1b01 	strb.w	r1, [r3], #1
6000147a:	4293      	cmp	r3, r2
6000147c:	d1fb      	bne.n	60001476 <ResetHandler2+0x4e>
	SCB_VTOR = (uint32_t)_VectorsRam;
6000147e:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001482:	4e4d      	ldr	r6, [pc, #308]	; (600015b8 <ResetHandler2+0x190>)
60001484:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001488:	f8df b18c 	ldr.w	fp, [pc, #396]	; 60001618 <ResetHandler2+0x1f0>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000148c:	f8df a18c 	ldr.w	sl, [pc, #396]	; 6000161c <ResetHandler2+0x1f4>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
60001494:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
60001498:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
6000149a:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000149e:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014a2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014a6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014aa:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ae:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60001620 <ResetHandler2+0x1f8>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014b6:	4a4d      	ldr	r2, [pc, #308]	; (600015ec <ResetHandler2+0x1c4>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014b8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014bc:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014c8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014cc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
600014d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014d8:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014dc:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
600014de:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
600014e0:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
600014e2:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
600014e4:	f000 fa0a 	bl	600018fc <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
600014e8:	4b41      	ldr	r3, [pc, #260]	; (600015f0 <ResetHandler2+0x1c8>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
600014ea:	4942      	ldr	r1, [pc, #264]	; (600015f4 <ResetHandler2+0x1cc>)
	_VectorsRam[14] = pendablesrvreq_isr;
600014ec:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
600014ee:	4b42      	ldr	r3, [pc, #264]	; (600015f8 <ResetHandler2+0x1d0>)
600014f0:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
600014f2:	2363      	movs	r3, #99	; 0x63
600014f4:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014f6:	2303      	movs	r3, #3
	SYST_CVR = 0;
600014f8:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
600014fa:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
600014fc:	4b3f      	ldr	r3, [pc, #252]	; (600015fc <ResetHandler2+0x1d4>)
600014fe:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001502:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001506:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000150a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000150e:	4b3c      	ldr	r3, [pc, #240]	; (60001600 <ResetHandler2+0x1d8>)
60001510:	681a      	ldr	r2, [r3, #0]
60001512:	f042 0201 	orr.w	r2, r2, #1
60001516:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001518:	685b      	ldr	r3, [r3, #4]
6000151a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000151c:	f000 fc2c 	bl	60001d78 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001520:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001524:	4837      	ldr	r0, [pc, #220]	; (60001604 <ResetHandler2+0x1dc>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001526:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000152a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000152e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001532:	f000 fdb9 	bl	600020a8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001536:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000153a:	4b33      	ldr	r3, [pc, #204]	; (60001608 <ResetHandler2+0x1e0>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000153c:	4a33      	ldr	r2, [pc, #204]	; (6000160c <ResetHandler2+0x1e4>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000153e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001542:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001546:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001548:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000154c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001550:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001554:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001558:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000155a:	07db      	lsls	r3, r3, #31
6000155c:	d408      	bmi.n	60001570 <ResetHandler2+0x148>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000155e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001562:	492b      	ldr	r1, [pc, #172]	; (60001610 <ResetHandler2+0x1e8>)
60001564:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001566:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001568:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000156a:	f043 0301 	orr.w	r3, r3, #1
6000156e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
60001570:	4a26      	ldr	r2, [pc, #152]	; (6000160c <ResetHandler2+0x1e4>)
60001572:	4c28      	ldr	r4, [pc, #160]	; (60001614 <ResetHandler2+0x1ec>)
60001574:	6893      	ldr	r3, [r2, #8]
60001576:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
6000157a:	6093      	str	r3, [r2, #8]
	configure_external_ram();
6000157c:	f000 fa3a 	bl	600019f4 <configure_external_ram>
	analog_init();
60001580:	f000 fd5e 	bl	60002040 <analog_init>
	pwm_init();
60001584:	f000 fd8c 	bl	600020a0 <__pwm_init_veneer>
	tempmon_init();
60001588:	f000 fc24 	bl	60001dd4 <tempmon_init>
	startup_middle_hook();
6000158c:	f000 f9b0 	bl	600018f0 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
60001590:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
60001592:	2b13      	cmp	r3, #19
60001594:	d9fc      	bls.n	60001590 <ResetHandler2+0x168>
	usb_init();
60001596:	f000 fcb5 	bl	60001f04 <usb_init>
6000159a:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
6000159c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015a0:	d3fb      	bcc.n	6000159a <ResetHandler2+0x172>
	startup_debug_reset();
600015a2:	f000 f9a9 	bl	600018f8 <startup_debug_reset>
	startup_late_hook();
600015a6:	f000 f9a5 	bl	600018f4 <startup_default_late_hook>
	__libc_init_array();
600015aa:	f000 fd95 	bl	600020d8 <____libc_init_array_veneer>
	main();
600015ae:	f000 fd97 	bl	600020e0 <__main_veneer>
	while (1) asm("WFI");
600015b2:	bf30      	wfi
600015b4:	e7fd      	b.n	600015b2 <ResetHandler2+0x18a>
600015b6:	bf00      	nop
600015b8:	400d8000 	.word	0x400d8000
600015bc:	00027fa4 	.word	0x00027fa4
600015c0:	600035d8 	.word	0x600035d8
600015c4:	00000000 	.word	0x00000000
600015c8:	200042c0 	.word	0x200042c0
600015cc:	6002b580 	.word	0x6002b580
600015d0:	20000000 	.word	0x20000000
600015d4:	2000c9a0 	.word	0x2000c9a0
600015d8:	200042c0 	.word	0x200042c0
600015dc:	20004000 	.word	0x20004000
600015e0:	00016c29 	.word	0x00016c29
600015e4:	e000e400 	.word	0xe000e400
600015e8:	e000e4a0 	.word	0xe000e4a0
600015ec:	400ac000 	.word	0x400ac000
600015f0:	00015395 	.word	0x00015395
600015f4:	2000bc20 	.word	0x2000bc20
600015f8:	00015399 	.word	0x00015399
600015fc:	20200000 	.word	0x20200000
60001600:	e0001000 	.word	0xe0001000
60001604:	23c34600 	.word	0x23c34600
60001608:	40084000 	.word	0x40084000
6000160c:	400d4000 	.word	0x400d4000
60001610:	56c00000 	.word	0x56c00000
60001614:	2000bc24 	.word	0x2000bc24
60001618:	2018101b 	.word	0x2018101b
6000161c:	13110d0c 	.word	0x13110d0c
60001620:	400fc000 	.word	0x400fc000

60001624 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001624:	4b07      	ldr	r3, [pc, #28]	; (60001644 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001626:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162a:	4a07      	ldr	r2, [pc, #28]	; (60001648 <ResetHandler+0x24>)
	IOMUXC_GPR_GPR16 = 0x00200007;
6000162c:	4807      	ldr	r0, [pc, #28]	; (6000164c <ResetHandler+0x28>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000162e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001630:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001632:	4a07      	ldr	r2, [pc, #28]	; (60001650 <ResetHandler+0x2c>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001634:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001636:	4695      	mov	sp, r2
	__asm__ volatile("dsb":::"memory");
60001638:	f3bf 8f4f 	dsb	sy
	__asm__ volatile("isb":::"memory");
6000163c:	f3bf 8f6f 	isb	sy
	ResetHandler2();
60001640:	f7ff fef2 	bl	60001428 <ResetHandler2>
60001644:	400ac000 	.word	0x400ac000
60001648:	aaaaabff 	.word	0xaaaaabff
6000164c:	00200007 	.word	0x00200007
60001650:	20058000 	.word	0x20058000

60001654 <set_audioClock(int, long, unsigned long, bool)>:
#include "imxrt_hw.h"

FLASHMEM
void set_audioClock(int nfact, int32_t nmult, uint32_t ndiv, bool force) // sets PLL4
{
	if (!force && (CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_ENABLE)) return;
60001654:	b91b      	cbnz	r3, 6000165e <set_audioClock(int, long, unsigned long, bool)+0xa>
60001656:	4b12      	ldr	r3, [pc, #72]	; (600016a0 <set_audioClock(int, long, unsigned long, bool)+0x4c>)
60001658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
6000165a:	049b      	lsls	r3, r3, #18
6000165c:	d41e      	bmi.n	6000169c <set_audioClock(int, long, unsigned long, bool)+0x48>

	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
			     | CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT(2) // 2: 1/4; 1: 1/2; 0: 1/1
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000165e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60001662:	4b0f      	ldr	r3, [pc, #60]	; (600016a0 <set_audioClock(int, long, unsigned long, bool)+0x4c>)

	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001664:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001668:	f021 4160 	bic.w	r1, r1, #3758096384	; 0xe0000000
			     | CCM_ANALOG_PLL_AUDIO_DIV_SELECT(nfact);
6000166c:	f440 1089 	orr.w	r0, r0, #1122304	; 0x112000
	CCM_ANALOG_PLL_AUDIO = CCM_ANALOG_PLL_AUDIO_BYPASS | CCM_ANALOG_PLL_AUDIO_ENABLE
60001670:	6718      	str	r0, [r3, #112]	; 0x70
	CCM_ANALOG_PLL_AUDIO_NUM   = nmult & CCM_ANALOG_PLL_AUDIO_NUM_MASK;
60001672:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	CCM_ANALOG_PLL_AUDIO_DENOM = ndiv & CCM_ANALOG_PLL_AUDIO_DENOM_MASK;
60001676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_POWERDOWN;//Switch on PLL
6000167a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
6000167c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
60001680:	671a      	str	r2, [r3, #112]	; 0x70
	while (!(CCM_ANALOG_PLL_AUDIO & CCM_ANALOG_PLL_AUDIO_LOCK)) {}; //Wait for pll-lock
60001682:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001684:	2a00      	cmp	r2, #0
60001686:	dafc      	bge.n	60001682 <set_audioClock(int, long, unsigned long, bool)+0x2e>
	
	const int div_post_pll = 1; // other values: 2,4
	CCM_ANALOG_MISC2 &= ~(CCM_ANALOG_MISC2_DIV_MSB | CCM_ANALOG_MISC2_DIV_LSB);
60001688:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
6000168c:	4a05      	ldr	r2, [pc, #20]	; (600016a4 <set_audioClock(int, long, unsigned long, bool)+0x50>)
6000168e:	400a      	ands	r2, r1
60001690:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	if(div_post_pll>1) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_LSB;
	if(div_post_pll>3) CCM_ANALOG_MISC2 |= CCM_ANALOG_MISC2_DIV_MSB;
	
	CCM_ANALOG_PLL_AUDIO &= ~CCM_ANALOG_PLL_AUDIO_BYPASS;//Disable Bypass
60001694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
60001696:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
6000169a:	671a      	str	r2, [r3, #112]	; 0x70
}
6000169c:	4770      	bx	lr
6000169e:	bf00      	nop
600016a0:	400d8000 	.word	0x400d8000
600016a4:	ff7f7fff 	.word	0xff7f7fff

600016a8 <TwoWire::configSDApin(unsigned char)>:
	sda_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSDApin(uint8_t i)
{
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016a8:	6943      	ldr	r3, [r0, #20]
600016aa:	4a0a      	ldr	r2, [pc, #40]	; (600016d4 <TwoWire::configSDApin(unsigned char)+0x2c>)
600016ac:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
600016b0:	b410      	push	{r4}
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016b2:	7a03      	ldrb	r3, [r0, #8]
600016b4:	4c08      	ldr	r4, [pc, #32]	; (600016d8 <TwoWire::configSDApin(unsigned char)+0x30>)
600016b6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016ba:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.sda_pins[i].pin)) = PINCONFIG;
600016be:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.sda_pins[i].pin)) = hardware.sda_pins[i].mux_val;
600016c0:	68c2      	ldr	r2, [r0, #12]
600016c2:	601a      	str	r2, [r3, #0]
	if (hardware.sda_pins[i].select_input_register) {
600016c4:	6903      	ldr	r3, [r0, #16]
600016c6:	b10b      	cbz	r3, 600016cc <TwoWire::configSDApin(unsigned char)+0x24>
		*(hardware.sda_pins[i].select_input_register) = hardware.sda_pins[i].select_val;
600016c8:	6942      	ldr	r2, [r0, #20]
600016ca:	601a      	str	r2, [r3, #0]
	}
}
600016cc:	f85d 4b04 	ldr.w	r4, [sp], #4
600016d0:	4770      	bx	lr
600016d2:	bf00      	nop
600016d4:	200024c4 	.word	0x200024c4
600016d8:	0001f861 	.word	0x0001f861

600016dc <TwoWire::setSDA(unsigned char)>:
	if (pin == hardware.sda_pins[sda_pin_index_].pin) return;
600016dc:	6943      	ldr	r3, [r0, #20]
600016de:	7e02      	ldrb	r2, [r0, #24]
600016e0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
600016e4:	f892 c008 	ldrb.w	ip, [r2, #8]
600016e8:	458c      	cmp	ip, r1
600016ea:	d01c      	beq.n	60001726 <TwoWire::setSDA(unsigned char)+0x4a>
		uint32_t sda_pin = hardware.sda_pins[newindex].pin;
600016ec:	7a1a      	ldrb	r2, [r3, #8]
		if (sda_pin == 255) return;
600016ee:	2aff      	cmp	r2, #255	; 0xff
600016f0:	d019      	beq.n	60001726 <TwoWire::setSDA(unsigned char)+0x4a>
		if (sda_pin == pin) break;
600016f2:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSDA(uint8_t pin) {
600016f4:	b510      	push	{r4, lr}
600016f6:	4604      	mov	r4, r0
		if (sda_pin == pin) break;
600016f8:	d016      	beq.n	60001728 <TwoWire::setSDA(unsigned char)+0x4c>
		if (sda_pin == 255) return;
600016fa:	7e1a      	ldrb	r2, [r3, #24]
600016fc:	2aff      	cmp	r2, #255	; 0xff
600016fe:	d006      	beq.n	6000170e <TwoWire::setSDA(unsigned char)+0x32>
60001700:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
60001702:	e9d3 2300 	ldrd	r2, r3, [r3]
60001706:	6812      	ldr	r2, [r2, #0]
60001708:	421a      	tst	r2, r3
6000170a:	d101      	bne.n	60001710 <TwoWire::setSDA(unsigned char)+0x34>
	sda_pin_index_ = newindex;
6000170c:	7621      	strb	r1, [r4, #24]
}
6000170e:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001710:	4b06      	ldr	r3, [pc, #24]	; (6000172c <TwoWire::setSDA(unsigned char)+0x50>)
60001712:	2205      	movs	r2, #5
		configSDApin(newindex);
60001714:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = 5;
60001716:	eb03 130c 	add.w	r3, r3, ip, lsl #4
6000171a:	685b      	ldr	r3, [r3, #4]
6000171c:	601a      	str	r2, [r3, #0]
		configSDApin(newindex);
6000171e:	f7ff ffc3 	bl	600016a8 <TwoWire::configSDApin(unsigned char)>
	sda_pin_index_ = newindex;
60001722:	7621      	strb	r1, [r4, #24]
60001724:	e7f3      	b.n	6000170e <TwoWire::setSDA(unsigned char)+0x32>
60001726:	4770      	bx	lr
		if (sda_pin == pin) break;
60001728:	2100      	movs	r1, #0
6000172a:	e7ea      	b.n	60001702 <TwoWire::setSDA(unsigned char)+0x26>
6000172c:	200024c4 	.word	0x200024c4

60001730 <TwoWire::configSCLpin(unsigned char)>:
	scl_pin_index_ = newindex;
}

FLASHMEM void TwoWire::configSCLpin(uint8_t i)
{
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001730:	6943      	ldr	r3, [r0, #20]
60001732:	4a0a      	ldr	r2, [pc, #40]	; (6000175c <TwoWire::configSCLpin(unsigned char)+0x2c>)
60001734:	eb03 1001 	add.w	r0, r3, r1, lsl #4
{
60001738:	b410      	push	{r4}
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
6000173a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
6000173e:	4c08      	ldr	r4, [pc, #32]	; (60001760 <TwoWire::configSCLpin(unsigned char)+0x30>)
60001740:	eb02 1303 	add.w	r3, r2, r3, lsl #4
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
60001744:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
	*(portControlRegister(hardware.scl_pins[i].pin)) = PINCONFIG;
60001748:	6014      	str	r4, [r2, #0]
	*(portConfigRegister(hardware.scl_pins[i].pin)) = hardware.scl_pins[i].mux_val;
6000174a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
6000174c:	601a      	str	r2, [r3, #0]
	if (hardware.scl_pins[i].select_input_register) {
6000174e:	6b03      	ldr	r3, [r0, #48]	; 0x30
60001750:	b10b      	cbz	r3, 60001756 <TwoWire::configSCLpin(unsigned char)+0x26>
		*(hardware.scl_pins[i].select_input_register) = hardware.scl_pins[i].select_val;
60001752:	6b42      	ldr	r2, [r0, #52]	; 0x34
60001754:	601a      	str	r2, [r3, #0]
	}
}
60001756:	f85d 4b04 	ldr.w	r4, [sp], #4
6000175a:	4770      	bx	lr
6000175c:	200024c4 	.word	0x200024c4
60001760:	0001f861 	.word	0x0001f861

60001764 <TwoWire::setSCL(unsigned char)>:
	if (pin == hardware.scl_pins[scl_pin_index_].pin) return;
60001764:	6943      	ldr	r3, [r0, #20]
60001766:	7e42      	ldrb	r2, [r0, #25]
60001768:	eb03 1202 	add.w	r2, r3, r2, lsl #4
6000176c:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
60001770:	458c      	cmp	ip, r1
60001772:	d01e      	beq.n	600017b2 <TwoWire::setSCL(unsigned char)+0x4e>
		uint32_t scl_pin = hardware.scl_pins[newindex].pin;
60001774:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
		if (scl_pin == 255) return;
60001778:	2aff      	cmp	r2, #255	; 0xff
6000177a:	d01a      	beq.n	600017b2 <TwoWire::setSCL(unsigned char)+0x4e>
		if (scl_pin == pin) break;
6000177c:	4291      	cmp	r1, r2
FLASHMEM void TwoWire::setSCL(uint8_t pin) {
6000177e:	b510      	push	{r4, lr}
60001780:	4604      	mov	r4, r0
		if (scl_pin == pin) break;
60001782:	d017      	beq.n	600017b4 <TwoWire::setSCL(unsigned char)+0x50>
		if (scl_pin == 255) return;
60001784:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
60001788:	2aff      	cmp	r2, #255	; 0xff
6000178a:	d006      	beq.n	6000179a <TwoWire::setSCL(unsigned char)+0x36>
6000178c:	2101      	movs	r1, #1
	if ((hardware.clock_gate_register & hardware.clock_gate_mask)) {
6000178e:	e9d3 2300 	ldrd	r2, r3, [r3]
60001792:	6812      	ldr	r2, [r2, #0]
60001794:	421a      	tst	r2, r3
60001796:	d101      	bne.n	6000179c <TwoWire::setSCL(unsigned char)+0x38>
	scl_pin_index_ = newindex;
60001798:	7661      	strb	r1, [r4, #25]
}
6000179a:	bd10      	pop	{r4, pc}
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
6000179c:	4b06      	ldr	r3, [pc, #24]	; (600017b8 <TwoWire::setSCL(unsigned char)+0x54>)
6000179e:	2205      	movs	r2, #5
		configSCLpin(newindex);
600017a0:	4620      	mov	r0, r4
		*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = 5;
600017a2:	eb03 130c 	add.w	r3, r3, ip, lsl #4
600017a6:	685b      	ldr	r3, [r3, #4]
600017a8:	601a      	str	r2, [r3, #0]
		configSCLpin(newindex);
600017aa:	f7ff ffc1 	bl	60001730 <TwoWire::configSCLpin(unsigned char)>
	scl_pin_index_ = newindex;
600017ae:	7661      	strb	r1, [r4, #25]
600017b0:	e7f3      	b.n	6000179a <TwoWire::setSCL(unsigned char)+0x36>
600017b2:	4770      	bx	lr
		if (scl_pin == pin) break;
600017b4:	2100      	movs	r1, #0
600017b6:	e7ea      	b.n	6000178e <TwoWire::setSCL(unsigned char)+0x2a>
600017b8:	200024c4 	.word	0x200024c4

600017bc <TwoWire::begin()>:
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017bc:	4916      	ldr	r1, [pc, #88]	; (60001818 <TwoWire::begin()+0x5c>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017be:	6942      	ldr	r2, [r0, #20]
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
600017c2:	f423 037c 	bic.w	r3, r3, #16515072	; 0xfc0000
600017c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
{
600017ca:	b570      	push	{r4, r5, r6, lr}
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
600017cc:	638b      	str	r3, [r1, #56]	; 0x38
{
600017ce:	4604      	mov	r4, r0
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017d0:	4d12      	ldr	r5, [pc, #72]	; (6000181c <TwoWire::begin()+0x60>)
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017d2:	e9d2 1300 	ldrd	r1, r3, [r2]
600017d6:	680a      	ldr	r2, [r1, #0]
600017d8:	431a      	orrs	r2, r3
	port->MCR = LPI2C_MCR_RST;
600017da:	6903      	ldr	r3, [r0, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
600017dc:	600a      	str	r2, [r1, #0]
	port->MCR = LPI2C_MCR_RST;
600017de:	2202      	movs	r2, #2
	port->MCR = 0;
600017e0:	2100      	movs	r1, #0
	port->MCR = LPI2C_MCR_RST;
600017e2:	611a      	str	r2, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017e4:	4a0e      	ldr	r2, [pc, #56]	; (60001820 <TwoWire::begin()+0x64>)
	port->MCR = 0;
600017e6:	6119      	str	r1, [r3, #16]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
600017e8:	649a      	str	r2, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
600017ea:	2201      	movs	r2, #1
600017ec:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
600017ee:	629d      	str	r5, [r3, #40]	; 0x28
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
600017f0:	f44f 3530 	mov.w	r5, #180224	; 0x2c000
600017f4:	62dd      	str	r5, [r3, #44]	; 0x2c
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
600017f6:	f04f 1501 	mov.w	r5, #65537	; 0x10001
	port->MCCR1 = port->MCCR0;
600017fa:	6c9e      	ldr	r6, [r3, #72]	; 0x48
600017fc:	651e      	str	r6, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
600017fe:	6219      	str	r1, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
60001800:	659d      	str	r5, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
60001802:	611a      	str	r2, [r3, #16]
	configSDApin(sda_pin_index_); // Setup SDA register
60001804:	7e01      	ldrb	r1, [r0, #24]
60001806:	f7ff ff4f 	bl	600016a8 <TwoWire::configSDApin(unsigned char)>
	configSCLpin(scl_pin_index_); // setup SCL register
6000180a:	7e61      	ldrb	r1, [r4, #25]
6000180c:	4620      	mov	r0, r4
}
6000180e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	configSCLpin(scl_pin_index_); // setup SCL register
60001812:	f7ff bf8d 	b.w	60001730 <TwoWire::configSCLpin(unsigned char)>
60001816:	bf00      	nop
60001818:	400fc000 	.word	0x400fc000
6000181c:	05050bb8 	.word	0x05050bb8
60001820:	1928373b 	.word	0x1928373b

60001824 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)>:
	unsigned int i;
	unsigned int maxnum = MAX_AUDIO_MEMORY / AUDIO_BLOCK_SAMPLES / 2;

	//Serial.println("AudioStream initialize_memory");
	//delay(10);
	if (num > maxnum) num = maxnum;
60001824:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
{
60001828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000182a:	460e      	mov	r6, r1
6000182c:	460f      	mov	r7, r1
6000182e:	bf28      	it	cs
60001830:	f44f 7660 	movcs.w	r6, #896	; 0x380
60001834:	4605      	mov	r5, r0
	__disable_irq();
60001836:	b672      	cpsid	i
	memory_pool = data;
60001838:	4b23      	ldr	r3, [pc, #140]	; (600018c8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa4>)
	memory_pool_first_mask = 0;
6000183a:	2400      	movs	r4, #0
	for (i=0; i < NUM_MASKS; i++) {
		memory_pool_available_mask[i] = 0;
6000183c:	2270      	movs	r2, #112	; 0x70
	memory_pool = data;
6000183e:	6018      	str	r0, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001840:	4621      	mov	r1, r4
	memory_pool_first_mask = 0;
60001842:	4b22      	ldr	r3, [pc, #136]	; (600018cc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xa8>)
		memory_pool_available_mask[i] = 0;
60001844:	4822      	ldr	r0, [pc, #136]	; (600018d0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
	memory_pool_first_mask = 0;
60001846:	801c      	strh	r4, [r3, #0]
		memory_pool_available_mask[i] = 0;
60001848:	f000 fc36 	bl	600020b8 <__memset_veneer>
	}
	for (i=0; i < num; i++) {
6000184c:	b1cf      	cbz	r7, 60001882 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x5e>
6000184e:	4621      	mov	r1, r4
60001850:	481f      	ldr	r0, [pc, #124]	; (600018d0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xac>)
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001852:	f04f 0c01 	mov.w	ip, #1
60001856:	094a      	lsrs	r2, r1, #5
60001858:	f001 031f 	and.w	r3, r1, #31
	for (i=0; i < num; i++) {
6000185c:	3101      	adds	r1, #1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
6000185e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
60001862:	fa0c f303 	lsl.w	r3, ip, r3
	for (i=0; i < num; i++) {
60001866:	428e      	cmp	r6, r1
		memory_pool_available_mask[i >> 5] |= (1 << (i & 0x1F));
60001868:	ea43 0304 	orr.w	r3, r3, r4
6000186c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	for (i=0; i < num; i++) {
60001870:	d8f1      	bhi.n	60001856 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x32>
60001872:	4628      	mov	r0, r5
60001874:	2300      	movs	r3, #0
	}
	for (i=0; i < num; i++) {
		data[i].memory_pool_index = i;
60001876:	8043      	strh	r3, [r0, #2]
	for (i=0; i < num; i++) {
60001878:	3301      	adds	r3, #1
6000187a:	f500 7082 	add.w	r0, r0, #260	; 0x104
6000187e:	429e      	cmp	r6, r3
60001880:	d8f9      	bhi.n	60001876 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x52>
	}
	if (update_scheduled == false) {
60001882:	4c14      	ldr	r4, [pc, #80]	; (600018d4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb0>)
60001884:	7825      	ldrb	r5, [r4, #0]
60001886:	b10d      	cbz	r5, 6000188c <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x68>
			float usec = 1e6 * AUDIO_BLOCK_SAMPLES / AUDIO_SAMPLE_RATE_EXACT;
			timer->begin(update_all, usec);
			update_setup();
		}
	}
	__enable_irq();
60001888:	b662      	cpsie	i
}
6000188a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		IntervalTimer *timer = new IntervalTimer();
6000188c:	2008      	movs	r0, #8
6000188e:	f000 fc0f 	bl	600020b0 <___Znwj_veneer>
// some of these 4 possible instances may be in use by libraries.
class IntervalTimer {
private:
	static const uint32_t MAX_PERIOD = UINT32_MAX / (24000000 / 1000000);
public:
	constexpr IntervalTimer() {
60001892:	2280      	movs	r2, #128	; 0x80
	// or false if all hardware timers are already in use.
	bool begin(void (*funct)(), float microseconds) {
		if (microseconds <= 0 || microseconds > MAX_PERIOD) return false;
		uint32_t cycles = (float)(24000000 / 1000000) * microseconds - 0.5f;
		if (cycles < 17) return false;
		return beginCycles(funct, cycles);
60001894:	4910      	ldr	r1, [pc, #64]	; (600018d8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb4>)
	constexpr IntervalTimer() {
60001896:	7102      	strb	r2, [r0, #4]
60001898:	6005      	str	r5, [r0, #0]
		return beginCycles(funct, cycles);
6000189a:	4a10      	ldr	r2, [pc, #64]	; (600018dc <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xb8>)
6000189c:	f000 fc18 	bl	600020d0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>
// their constructors.
bool AudioStream::update_scheduled = false;

bool AudioStream::update_setup(void)
{
	if (update_scheduled) return false;
600018a0:	7823      	ldrb	r3, [r4, #0]
600018a2:	2b00      	cmp	r3, #0
600018a4:	d1f0      	bne.n	60001888 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0x64>


#ifdef __cplusplus
extern "C" void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018a6:	4b0e      	ldr	r3, [pc, #56]	; (600018e0 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xbc>)
600018a8:	4a0e      	ldr	r2, [pc, #56]	; (600018e4 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc0>)
600018aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	attachInterruptVector(IRQ_SOFTWARE, software_isr);
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018ae:	490e      	ldr	r1, [pc, #56]	; (600018e8 <AudioStream::initialize_memory(audio_block_struct*, unsigned int)+0xc4>)
600018b0:	20d0      	movs	r0, #208	; 0xd0
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600018b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018b6:	2240      	movs	r2, #64	; 0x40
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
600018b8:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
600018bc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	update_scheduled = true;
600018c0:	2301      	movs	r3, #1
600018c2:	7023      	strb	r3, [r4, #0]
	__enable_irq();
600018c4:	b662      	cpsie	i
}
600018c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
600018c8:	20005034 	.word	0x20005034
600018cc:	2000c92c 	.word	0x2000c92c
600018d0:	2000503c 	.word	0x2000503c
600018d4:	2000c947 	.word	0x2000c947
600018d8:	00014dbd 	.word	0x00014dbd
600018dc:	0001101b 	.word	0x0001101b
600018e0:	20004000 	.word	0x20004000
600018e4:	00014dc9 	.word	0x00014dc9
600018e8:	e000e400 	.word	0xe000e400

600018ec <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
600018ec:	4770      	bx	lr
600018ee:	bf00      	nop

600018f0 <startup_default_middle_hook>:
600018f0:	4770      	bx	lr
600018f2:	bf00      	nop

600018f4 <startup_default_late_hook>:
600018f4:	4770      	bx	lr
600018f6:	bf00      	nop

600018f8 <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
600018f8:	bf00      	nop
600018fa:	4770      	bx	lr

600018fc <configure_cache>:
{
600018fc:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
600018fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001902:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001904:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001906:	482b      	ldr	r0, [pc, #172]	; (600019b4 <configure_cache+0xb8>)
	SCB_MPU_CTRL = 0; // turn off MPU
60001908:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
6000190c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001910:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001912:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
60001916:	4828      	ldr	r0, [pc, #160]	; (600019b8 <configure_cache+0xbc>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001918:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
6000191c:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
6000191e:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
60001922:	4826      	ldr	r0, [pc, #152]	; (600019bc <configure_cache+0xc0>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
60001924:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001928:	4a25      	ldr	r2, [pc, #148]	; (600019c0 <configure_cache+0xc4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
6000192a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
6000192e:	4c25      	ldr	r4, [pc, #148]	; (600019c4 <configure_cache+0xc8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
60001930:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
60001934:	4824      	ldr	r0, [pc, #144]	; (600019c8 <configure_cache+0xcc>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
60001936:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
6000193a:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
6000193e:	4c23      	ldr	r4, [pc, #140]	; (600019cc <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001940:	4823      	ldr	r0, [pc, #140]	; (600019d0 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
60001942:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
60001946:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
6000194a:	4c22      	ldr	r4, [pc, #136]	; (600019d4 <configure_cache+0xd8>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
6000194c:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001950:	4821      	ldr	r0, [pc, #132]	; (600019d8 <configure_cache+0xdc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
60001952:	4a22      	ldr	r2, [pc, #136]	; (600019dc <configure_cache+0xe0>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
60001954:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
60001958:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
6000195c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001960:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
60001964:	4c1e      	ldr	r4, [pc, #120]	; (600019e0 <configure_cache+0xe4>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
60001966:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001968:	481e      	ldr	r0, [pc, #120]	; (600019e4 <configure_cache+0xe8>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
6000196a:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
6000196e:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001972:	4a1d      	ldr	r2, [pc, #116]	; (600019e8 <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001974:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001978:	4c1c      	ldr	r4, [pc, #112]	; (600019ec <configure_cache+0xf0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
6000197a:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000197e:	2201      	movs	r2, #1
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001980:	481b      	ldr	r0, [pc, #108]	; (600019f0 <configure_cache+0xf4>)
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001982:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001986:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000198a:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000198e:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001992:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001996:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
6000199a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000199e:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600019a2:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
600019a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
600019aa:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
600019ae:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
600019b2:	4770      	bx	lr
600019b4:	1000003f 	.word	0x1000003f
600019b8:	03080025 	.word	0x03080025
600019bc:	00100009 	.word	0x00100009
600019c0:	2000c9a0 	.word	0x2000c9a0
600019c4:	00200013 	.word	0x00200013
600019c8:	07020021 	.word	0x07020021
600019cc:	20000014 	.word	0x20000014
600019d0:	13080025 	.word	0x13080025
600019d4:	10000009 	.word	0x10000009
600019d8:	20200016 	.word	0x20200016
600019dc:	130b0027 	.word	0x130b0027
600019e0:	40000017 	.word	0x40000017
600019e4:	60000018 	.word	0x60000018
600019e8:	070b002f 	.word	0x070b002f
600019ec:	70000019 	.word	0x70000019
600019f0:	130b002f 	.word	0x130b002f

600019f4 <configure_external_ram>:
{
600019f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019f6:	4bb8      	ldr	r3, [pc, #736]	; (60001cd8 <configure_external_ram+0x2e4>)
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
600019f8:	2218      	movs	r2, #24
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
600019fa:	4eb8      	ldr	r6, [pc, #736]	; (60001cdc <configure_external_ram+0x2e8>)
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
600019fc:	2001      	movs	r0, #1
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
600019fe:	4fb8      	ldr	r7, [pc, #736]	; (60001ce0 <configure_external_ram+0x2ec>)
{
60001a00:	b083      	sub	sp, #12
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_22 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a02:	f8c3 625c 	str.w	r6, [r3, #604]	; 0x25c
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a06:	49b7      	ldr	r1, [pc, #732]	; (60001ce4 <configure_external_ram+0x2f0>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_23 = 0x110F9; // keeper, strong drive, max speed, hyst
60001a08:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a0c:	4db6      	ldr	r5, [pc, #728]	; (60001ce8 <configure_external_ram+0x2f4>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_24 = 0x1B0F9; // 100K pullup, strong drive, max speed, hyst
60001a0e:	f8c3 6264 	str.w	r6, [r3, #612]	; 0x264
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a12:	f5a6 4630 	sub.w	r6, r6, #45056	; 0xb000
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a16:	4cb5      	ldr	r4, [pc, #724]	; (60001cec <configure_external_ram+0x2f8>)
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_25 = 0x100F9; // strong drive, max speed, hyst
60001a18:	f8c3 6268 	str.w	r6, [r3, #616]	; 0x268
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_26 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a1c:	f8c3 526c 	str.w	r5, [r3, #620]	; 0x26c
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_27 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a20:	f8c3 5270 	str.w	r5, [r3, #624]	; 0x270
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_28 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a24:	f8c3 5274 	str.w	r5, [r3, #628]	; 0x274
	IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_29 = 0x170F9; // 47K pullup, strong drive, max speed, hyst
60001a28:	f8c3 5278 	str.w	r5, [r3, #632]	; 0x278
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a2c:	f248 750c 	movw	r5, #34572	; 0x870c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_22 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS1_B (Flash)
60001a30:	66da      	str	r2, [r3, #108]	; 0x6c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_23 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DQS
60001a32:	671a      	str	r2, [r3, #112]	; 0x70
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_24 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SS0_B (RAM)
60001a34:	675a      	str	r2, [r3, #116]	; 0x74
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_25 = 8 | 0x10; // ALT1 = FLEXSPI2_A_SCLK
60001a36:	679a      	str	r2, [r3, #120]	; 0x78
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_26 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA0
60001a38:	67da      	str	r2, [r3, #124]	; 0x7c
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_27 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA1
60001a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_28 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA2
60001a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	IOMUXC_SW_MUX_CTL_PAD_GPIO_EMC_29 = 8 | 0x10; // ALT1 = FLEXSPI2_A_DATA3
60001a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	IOMUXC_FLEXSPI2_IPP_IND_DQS_FA_SELECT_INPUT = 1; // GPIO_EMC_23 for Mode: ALT8, pg 986
60001a46:	f8c1 032c 	str.w	r0, [r1, #812]	; 0x32c
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a4a:	4aa9      	ldr	r2, [pc, #676]	; (60001cf0 <configure_external_ram+0x2fc>)
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT0_SELECT_INPUT = 1; // GPIO_EMC_26 for Mode: ALT8
60001a4c:	f8c1 0330 	str.w	r0, [r1, #816]	; 0x330
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT1_SELECT_INPUT = 1; // GPIO_EMC_27 for Mode: ALT8
60001a50:	f8c1 0334 	str.w	r0, [r1, #820]	; 0x334
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT2_SELECT_INPUT = 1; // GPIO_EMC_28 for Mode: ALT8
60001a54:	f8c1 0338 	str.w	r0, [r1, #824]	; 0x338
	IOMUXC_FLEXSPI2_IPP_IND_IO_FA_BIT3_SELECT_INPUT = 1; // GPIO_EMC_29 for Mode: ALT8
60001a58:	f8c1 033c 	str.w	r0, [r1, #828]	; 0x33c
	IOMUXC_FLEXSPI2_IPP_IND_SCK_FA_SELECT_INPUT = 1; // GPIO_EMC_25 for Mode: ALT8
60001a5c:	f8c1 0350 	str.w	r0, [r1, #848]	; 0x350
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a60:	69a1      	ldr	r1, [r4, #24]
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a62:	4ba4      	ldr	r3, [pc, #656]	; (60001cf4 <configure_external_ram+0x300>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a64:	400a      	ands	r2, r1
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a66:	48a4      	ldr	r0, [pc, #656]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a68:	49a4      	ldr	r1, [pc, #656]	; (60001cfc <configure_external_ram+0x308>)
		| CCM_CBCMR_FLEXSPI2_PODF(5) | CCM_CBCMR_FLEXSPI2_CLK_SEL(3); // 88 MHz
60001a6a:	4313      	orrs	r3, r2
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a6c:	4aa4      	ldr	r2, [pc, #656]	; (60001d00 <configure_external_ram+0x30c>)
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_FLEXSPI2_PODF_MASK | CCM_CBCMR_FLEXSPI2_CLK_SEL_MASK))
60001a6e:	61a3      	str	r3, [r4, #24]
	CCM_CCGR7 |= CCM_CCGR7_FLEXSPI2(CCM_CCGR_ON);
60001a70:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
60001a74:	f043 030c 	orr.w	r3, r3, #12
60001a78:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a7c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_MDIS;
60001a80:	6803      	ldr	r3, [r0, #0]
60001a82:	f043 0302 	orr.w	r3, r3, #2
60001a86:	6003      	str	r3, [r0, #0]
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a88:	6803      	ldr	r3, [r0, #0]
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a8a:	402b      	ands	r3, r5
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001a8c:	f44f 5500 	mov.w	r5, #8192	; 0x2000
		| FLEXSPI_MCR0_RXCLKSRC(1) | FLEXSPI_MCR0_MDIS;
60001a90:	431a      	orrs	r2, r3
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a92:	4b9c      	ldr	r3, [pc, #624]	; (60001d04 <configure_external_ram+0x310>)
	FLEXSPI2_MCR0 = (FLEXSPI2_MCR0 & ~(FLEXSPI_MCR0_AHBGRANTWAIT_MASK
60001a94:	6002      	str	r2, [r0, #0]
	FLEXSPI2_MCR1 = FLEXSPI_MCR1_SEQWAIT(0xFFFF) | FLEXSPI_MCR1_AHBBUSWAIT(0xFFFF);
60001a96:	6044      	str	r4, [r0, #4]
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a98:	688a      	ldr	r2, [r1, #8]
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001a9a:	4c9b      	ldr	r4, [pc, #620]	; (60001d08 <configure_external_ram+0x314>)
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001a9c:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001a9e:	4a9b      	ldr	r2, [pc, #620]	; (60001d0c <configure_external_ram+0x318>)
		| FLEXSPI_MCR2_RESUMEWAIT(0x20) /*| FLEXSPI_MCR2_SAMEDEVICEEN*/;
60001aa0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
	FLEXSPI2_MCR2 = (FLEXSPI_MCR2 & ~(FLEXSPI_MCR2_RESUMEWAIT_MASK
60001aa4:	6083      	str	r3, [r0, #8]
	FLEXSPI2_AHBCR = FLEXSPI2_AHBCR & ~(FLEXSPI_AHBCR_READADDROPT | FLEXSPI_AHBCR_PREFETCHEN
60001aa6:	68c3      	ldr	r3, [r0, #12]
60001aa8:	f023 0378 	bic.w	r3, r3, #120	; 0x78
60001aac:	60c3      	str	r3, [r0, #12]
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001aae:	6a03      	ldr	r3, [r0, #32]
60001ab0:	4013      	ands	r3, r2
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001ab2:	4323      	orrs	r3, r4
	FLEXSPI2_AHBRXBUF0CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ab4:	6203      	str	r3, [r0, #32]
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ab6:	6a03      	ldr	r3, [r0, #32]
60001ab8:	4013      	ands	r3, r2
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001aba:	4a95      	ldr	r2, [pc, #596]	; (60001d10 <configure_external_ram+0x31c>)
		| FLEXSPI_AHBRXBUFCR0_PREFETCHEN | FLEXSPI_AHBRXBUFCR0_BUFSZ(64);
60001abc:	4323      	orrs	r3, r4
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001abe:	4c95      	ldr	r4, [pc, #596]	; (60001d14 <configure_external_ram+0x320>)
	FLEXSPI2_AHBRXBUF1CR0 = (FLEXSPI2_AHBRXBUF0CR0 & ~mask)
60001ac0:	6243      	str	r3, [r0, #36]	; 0x24
	FLEXSPI2_AHBRXBUF2CR0 = mask;
60001ac2:	6282      	str	r2, [r0, #40]	; 0x28
	FLEXSPI2_AHBRXBUF3CR0 = mask;
60001ac4:	62c2      	str	r2, [r0, #44]	; 0x2c
	FLEXSPI2_INTEN = 0;
60001ac6:	2200      	movs	r2, #0
	FLEXSPI2_IPRXFCR = (FLEXSPI_IPRXFCR & 0xFFFFFFC0) | FLEXSPI_IPRXFCR_CLRIPRXF;
60001ac8:	f8d1 30b8 	ldr.w	r3, [r1, #184]	; 0xb8
60001acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001ad0:	f043 0301 	orr.w	r3, r3, #1
60001ad4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001ad8:	f8d1 30bc 	ldr.w	r3, [r1, #188]	; 0xbc
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001adc:	498e      	ldr	r1, [pc, #568]	; (60001d18 <configure_external_ram+0x324>)
	FLEXSPI2_IPTXFCR = (FLEXSPI_IPTXFCR & 0xFFFFFFC0) | FLEXSPI_IPTXFCR_CLRIPTXF;
60001ade:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
60001ae2:	f043 0301 	orr.w	r3, r3, #1
60001ae6:	f8c0 30bc 	str.w	r3, [r0, #188]	; 0xbc
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001aea:	f240 6305 	movw	r3, #1541	; 0x605
	FLEXSPI2_INTEN = 0;
60001aee:	6102      	str	r2, [r0, #16]
	FLEXSPI2_FLSHA1CR0 = 0x2000; // 8 MByte
60001af0:	6605      	str	r5, [r0, #96]	; 0x60
	FLEXSPI2_FLSHA1CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001af2:	6704      	str	r4, [r0, #112]	; 0x70
	FLEXSPI2_FLSHA1CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001af4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
	FLEXSPI2_FLSHA2CR0 = 0x2000; // 8 MByte
60001af8:	6645      	str	r5, [r0, #100]	; 0x64
	FLEXSPI2_FLSHA2CR1 = FLEXSPI_FLSHCR1_CSINTERVAL(2)
60001afa:	6744      	str	r4, [r0, #116]	; 0x74
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001afc:	2402      	movs	r4, #2
	FLEXSPI2_FLSHA2CR2 = FLEXSPI_FLSHCR2_AWRSEQID(6) | FLEXSPI_FLSHCR2_AWRSEQNUM(0)
60001afe:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	FLEXSPI2_MCR0 &= ~FLEXSPI_MCR0_MDIS;
60001b02:	6803      	ldr	r3, [r0, #0]
60001b04:	f023 0302 	bic.w	r3, r3, #2
60001b08:	6003      	str	r3, [r0, #0]
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b0a:	6181      	str	r1, [r0, #24]
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b0c:	4b83      	ldr	r3, [pc, #524]	; (60001d1c <configure_external_ram+0x328>)
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b0e:	4984      	ldr	r1, [pc, #528]	; (60001d20 <configure_external_ram+0x32c>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b10:	61c4      	str	r4, [r0, #28]
	for (int i=0; i < 64; i++) luttable[i] = 0;
60001b12:	f843 2b04 	str.w	r2, [r3], #4
60001b16:	428b      	cmp	r3, r1
60001b18:	d1fb      	bne.n	60001b12 <configure_external_ram+0x11e>
	FLEXSPI2_MCR0 |= FLEXSPI_MCR0_SWRESET;
60001b1a:	4a77      	ldr	r2, [pc, #476]	; (60001cf8 <configure_external_ram+0x304>)
60001b1c:	6813      	ldr	r3, [r2, #0]
60001b1e:	f043 0301 	orr.w	r3, r3, #1
60001b22:	6013      	str	r3, [r2, #0]
	while (FLEXSPI2_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
60001b24:	6813      	ldr	r3, [r2, #0]
60001b26:	f013 0301 	ands.w	r3, r3, #1
60001b2a:	d1fb      	bne.n	60001b24 <configure_external_ram+0x130>
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b2c:	487a      	ldr	r0, [pc, #488]	; (60001d18 <configure_external_ram+0x324>)
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b2e:	2102      	movs	r1, #2
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b30:	f240 64f5 	movw	r4, #1781	; 0x6f5
	FLEXSPI2_LUTKEY = FLEXSPI_LUTKEY_VALUE;
60001b34:	6190      	str	r0, [r2, #24]
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b36:	f240 4099 	movw	r0, #1177	; 0x499
	FLEXSPI2_LUTCR = FLEXSPI_LUTCR_UNLOCK;
60001b3a:	61d1      	str	r1, [r2, #28]
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b3c:	f240 4166 	movw	r1, #1126	; 0x466
	FLEXSPI2_LUT0 = LUT0(CMD_SDR, PINS4, 0xF5);
60001b40:	f8c2 4200 	str.w	r4, [r2, #512]	; 0x200
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b44:	f242 4401 	movw	r4, #9217	; 0x2401
	FLEXSPI2_LUT4 = LUT0(CMD_SDR, PINS1, 0x66);
60001b48:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b4c:	4975      	ldr	r1, [pc, #468]	; (60001d24 <configure_external_ram+0x330>)
	FLEXSPI2_LUT8 = LUT0(CMD_SDR, PINS1, 0x99);
60001b4e:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	FLEXSPI2_LUT12 = LUT0(CMD_SDR, PINS1, 0x9F) | LUT1(DUMMY_SDR, PINS1, 24);
60001b52:	f8c2 1230 	str.w	r1, [r2, #560]	; 0x230
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b56:	f240 4135 	movw	r1, #1077	; 0x435
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b5a:	4873      	ldr	r0, [pc, #460]	; (60001d28 <configure_external_ram+0x334>)
	FLEXSPI2_LUT13 = LUT0(READ_SDR, PINS1, 1);
60001b5c:	f8c2 4234 	str.w	r4, [r2, #564]	; 0x234
	FLEXSPI2_LUT16 = LUT0(CMD_SDR, PINS1, 0x35);
60001b60:	f8c2 1240 	str.w	r1, [r2, #576]	; 0x240
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b64:	4c71      	ldr	r4, [pc, #452]	; (60001d2c <configure_external_ram+0x338>)
	FLEXSPI2_LUT20 = LUT0(CMD_SDR, PINS4, 0xEB) | LUT1(ADDR_SDR, PINS4, 24);
60001b66:	f8c2 0250 	str.w	r0, [r2, #592]	; 0x250
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b6a:	f242 2001 	movw	r0, #8705	; 0x2201
	FLEXSPI2_LUT21 = LUT0(DUMMY_SDR, PINS4, 6) | LUT1(READ_SDR, PINS4, 1);
60001b6e:	4970      	ldr	r1, [pc, #448]	; (60001d30 <configure_external_ram+0x33c>)
60001b70:	f8c2 1254 	str.w	r1, [r2, #596]	; 0x254
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b74:	2101      	movs	r1, #1
	FLEXSPI2_LUT24 = LUT0(CMD_SDR, PINS4, 0x38) | LUT1(ADDR_SDR, PINS4, 24);
60001b76:	f8c2 4260 	str.w	r4, [r2, #608]	; 0x260
	FLEXSPI2_LUT25 = LUT0(WRITE_SDR, PINS4, 1);
60001b7a:	f8c2 0264 	str.w	r0, [r2, #612]	; 0x264
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b7e:	485e      	ldr	r0, [pc, #376]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001b80:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b84:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001b88:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b8c:	6943      	ldr	r3, [r0, #20]
60001b8e:	07da      	lsls	r2, r3, #31
60001b90:	d5fc      	bpl.n	60001b8c <configure_external_ram+0x198>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b92:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001b94:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001b9a:	4957      	ldr	r1, [pc, #348]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001b9c:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001b9e:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001ba2:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001ba6:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001baa:	694b      	ldr	r3, [r1, #20]
60001bac:	07db      	lsls	r3, r3, #31
60001bae:	d5fc      	bpl.n	60001baa <configure_external_ram+0x1b6>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bb0:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001bb2:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bb4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bb8:	4a4f      	ldr	r2, [pc, #316]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bba:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001bbc:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bc0:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001bc4:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bc8:	6953      	ldr	r3, [r2, #20]
60001bca:	07df      	lsls	r7, r3, #31
60001bcc:	d5fc      	bpl.n	60001bc8 <configure_external_ram+0x1d4>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bce:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001bd0:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bd2:	4858      	ldr	r0, [pc, #352]	; (60001d34 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001bd4:	4948      	ldr	r1, [pc, #288]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001bd6:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001bd8:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001bdc:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001be0:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001be4:	694b      	ldr	r3, [r1, #20]
60001be6:	07de      	lsls	r6, r3, #31
60001be8:	d5fc      	bpl.n	60001be4 <configure_external_ram+0x1f0>
	uint32_t id = FLEXSPI2_RFDR0;
60001bea:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001bee:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bf2:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001bf4:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001bf6:	6148      	str	r0, [r1, #20]
	if (flexspi2_psram_id(0) == 0x5D0D) {
60001bf8:	4293      	cmp	r3, r2
60001bfa:	d165      	bne.n	60001cc8 <configure_external_ram+0x2d4>
	FLEXSPI2_IPCR0 = addr;
60001bfc:	2400      	movs	r4, #0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001bfe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c02:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c04:	483c      	ldr	r0, [pc, #240]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_IPCR0 = addr;
60001c06:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c0a:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c0e:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c12:	6943      	ldr	r3, [r0, #20]
60001c14:	07dd      	lsls	r5, r3, #31
60001c16:	d5fc      	bpl.n	60001c12 <configure_external_ram+0x21e>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c18:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c1a:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c1e:	2100      	movs	r1, #0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c20:	4a35      	ldr	r2, [pc, #212]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c22:	6143      	str	r3, [r0, #20]
	FLEXSPI2_IPCR0 = addr;
60001c24:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c28:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c2c:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c30:	6953      	ldr	r3, [r2, #20]
60001c32:	07dc      	lsls	r4, r3, #31
60001c34:	d5fc      	bpl.n	60001c30 <configure_external_ram+0x23c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c36:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c38:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c3c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c40:	492d      	ldr	r1, [pc, #180]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c42:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001c44:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c48:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c4c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c50:	694b      	ldr	r3, [r1, #20]
60001c52:	07d8      	lsls	r0, r3, #31
60001c54:	d5fc      	bpl.n	60001c50 <configure_external_ram+0x25c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c56:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c58:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c60:	4a25      	ldr	r2, [pc, #148]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c62:	614b      	str	r3, [r1, #20]
	FLEXSPI2_IPCR0 = addr;
60001c64:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001c68:	f8c1 00a4 	str.w	r0, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c6c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c70:	6953      	ldr	r3, [r2, #20]
60001c72:	07d9      	lsls	r1, r3, #31
60001c74:	d5fc      	bpl.n	60001c70 <configure_external_ram+0x27c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c76:	2301      	movs	r3, #1
	FLEXSPI2_IPCR0 = addr;
60001c78:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001c7c:	482d      	ldr	r0, [pc, #180]	; (60001d34 <configure_external_ram+0x340>)
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c7e:	491e      	ldr	r1, [pc, #120]	; (60001cf8 <configure_external_ram+0x304>)
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001c80:	6153      	str	r3, [r2, #20]
	FLEXSPI2_IPCR0 = addr;
60001c82:	f8c2 40a0 	str.w	r4, [r2, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(3) | FLEXSPI_IPCR1_IDATSZ(4);
60001c86:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001c8a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001c8e:	694b      	ldr	r3, [r1, #20]
60001c90:	07da      	lsls	r2, r3, #31
60001c92:	d5fc      	bpl.n	60001c8e <configure_external_ram+0x29a>
	uint32_t id = FLEXSPI2_RFDR0;
60001c94:	f8d1 3100 	ldr.w	r3, [r1, #256]	; 0x100
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001c98:	f645 520d 	movw	r2, #23821	; 0x5d0d
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001c9c:	2021      	movs	r0, #33	; 0x21
	return id & 0xFFFF;
60001c9e:	b29b      	uxth	r3, r3
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPRXWA;
60001ca0:	6148      	str	r0, [r1, #20]
		if (flexspi2_psram_id(0x800000) == 0x5D0D) {
60001ca2:	4293      	cmp	r3, r2
60001ca4:	d050      	beq.n	60001d48 <configure_external_ram+0x354>
60001ca6:	2508      	movs	r5, #8
60001ca8:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
			external_psram_size * 0x100000 -
60001cac:	4922      	ldr	r1, [pc, #136]	; (60001d38 <configure_external_ram+0x344>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cae:	2000      	movs	r0, #0
			external_psram_size * 0x100000 -
60001cb0:	4b22      	ldr	r3, [pc, #136]	; (60001d3c <configure_external_ram+0x348>)
			external_psram_size = 16;
60001cb2:	4a23      	ldr	r2, [pc, #140]	; (60001d40 <configure_external_ram+0x34c>)
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cb4:	9000      	str	r0, [sp, #0]
			external_psram_size = 16;
60001cb6:	7015      	strb	r5, [r2, #0]
			external_psram_size * 0x100000 -
60001cb8:	1a5a      	subs	r2, r3, r1
		sm_set_pool(&extmem_smalloc_pool, &_extram_end,
60001cba:	2301      	movs	r3, #1
60001cbc:	4821      	ldr	r0, [pc, #132]	; (60001d44 <configure_external_ram+0x350>)
60001cbe:	4422      	add	r2, r4
60001cc0:	f000 f9fe 	bl	600020c0 <__sm_set_pool_veneer>
}
60001cc4:	b003      	add	sp, #12
60001cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset(&extmem_smalloc_pool, 0, sizeof(extmem_smalloc_pool));
60001cc8:	4b1e      	ldr	r3, [pc, #120]	; (60001d44 <configure_external_ram+0x350>)
60001cca:	2200      	movs	r2, #0
60001ccc:	e9c3 2200 	strd	r2, r2, [r3]
60001cd0:	e9c3 2202 	strd	r2, r2, [r3, #8]
}
60001cd4:	b003      	add	sp, #12
60001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001cd8:	401f8000 	.word	0x401f8000
60001cdc:	0001b0f9 	.word	0x0001b0f9
60001ce0:	000110f9 	.word	0x000110f9
60001ce4:	401f8400 	.word	0x401f8400
60001ce8:	000170f9 	.word	0x000170f9
60001cec:	400fc000 	.word	0x400fc000
60001cf0:	1ffffcff 	.word	0x1ffffcff
60001cf4:	a0000300 	.word	0xa0000300
60001cf8:	402a4000 	.word	0x402a4000
60001cfc:	402a8000 	.word	0x402a8000
60001d00:	ffff0012 	.word	0xffff0012
60001d04:	00f737ff 	.word	0x00f737ff
60001d08:	80000040 	.word	0x80000040
60001d0c:	7cf0ff00 	.word	0x7cf0ff00
60001d10:	830f00ff 	.word	0x830f00ff
60001d14:	00020063 	.word	0x00020063
60001d18:	5af05af0 	.word	0x5af05af0
60001d1c:	402a4200 	.word	0x402a4200
60001d20:	402a4300 	.word	0x402a4300
60001d24:	3018049f 	.word	0x3018049f
60001d28:	0a1806eb 	.word	0x0a1806eb
60001d2c:	0a180638 	.word	0x0a180638
60001d30:	26013206 	.word	0x26013206
60001d34:	00030004 	.word	0x00030004
60001d38:	70d8e0e0 	.word	0x70d8e0e0
60001d3c:	70000000 	.word	0x70000000
60001d40:	2000c950 	.word	0x2000c950
60001d44:	20006bb8 	.word	0x20006bb8
	FLEXSPI2_IPCR0 = addr;
60001d48:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d4c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d50:	2301      	movs	r3, #1
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d52:	4808      	ldr	r0, [pc, #32]	; (60001d74 <configure_external_ram+0x380>)
	FLEXSPI2_IPCR0 = addr;
60001d54:	f8c1 40a0 	str.w	r4, [r1, #160]	; 0xa0
	FLEXSPI2_IPCR1 = FLEXSPI_IPCR1_ISEQID(index);
60001d58:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
	FLEXSPI2_IPCMD = FLEXSPI_IPCMD_TRG;
60001d5c:	f8c1 30b0 	str.w	r3, [r1, #176]	; 0xb0
	while (!(FLEXSPI2_INTR & FLEXSPI_INTR_IPCMDDONE)); // wait
60001d60:	6943      	ldr	r3, [r0, #20]
60001d62:	07db      	lsls	r3, r3, #31
60001d64:	d5fc      	bpl.n	60001d60 <configure_external_ram+0x36c>
	FLEXSPI2_INTR = FLEXSPI_INTR_IPCMDDONE;
60001d66:	2301      	movs	r3, #1
60001d68:	2510      	movs	r5, #16
60001d6a:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
60001d6e:	6143      	str	r3, [r0, #20]
			external_psram_size = 16;
60001d70:	e79c      	b.n	60001cac <configure_external_ram+0x2b8>
60001d72:	bf00      	nop
60001d74:	402a4000 	.word	0x402a4000

60001d78 <usb_pll_start>:
{
60001d78:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d7a:	4a15      	ldr	r2, [pc, #84]	; (60001dd0 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001d7c:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001d7e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001d82:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001d86:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001d8a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001d8e:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001d92:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
60001d94:	f013 0f02 	tst.w	r3, #2
60001d98:	d10e      	bne.n	60001db8 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
60001d9a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
60001d9e:	d00f      	beq.n	60001dc0 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
60001da0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
60001da4:	d00e      	beq.n	60001dc4 <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
60001da6:	2b00      	cmp	r3, #0
60001da8:	daf3      	bge.n	60001d92 <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
60001daa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
60001dae:	d10b      	bne.n	60001dc8 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
60001db0:	065b      	lsls	r3, r3, #25
60001db2:	d50b      	bpl.n	60001dcc <usb_pll_start+0x54>
}
60001db4:	bcf0      	pop	{r4, r5, r6, r7}
60001db6:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001db8:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
60001dba:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
60001dbc:	6190      	str	r0, [r2, #24]
			continue;
60001dbe:	e7e8      	b.n	60001d92 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001dc0:	6155      	str	r5, [r2, #20]
			continue;
60001dc2:	e7e6      	b.n	60001d92 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
60001dc4:	6156      	str	r6, [r2, #20]
			continue;
60001dc6:	e7e4      	b.n	60001d92 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001dc8:	6191      	str	r1, [r2, #24]
			continue;
60001dca:	e7e2      	b.n	60001d92 <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001dcc:	6157      	str	r7, [r2, #20]
			continue;
60001dce:	e7e0      	b.n	60001d92 <usb_pll_start+0x1a>
60001dd0:	400d8000 	.word	0x400d8000

60001dd4 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001dd4:	4a3f      	ldr	r2, [pc, #252]	; (60001ed4 <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001dd6:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001dd8:	493f      	ldr	r1, [pc, #252]	; (60001ed8 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001dda:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001dde:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001de2:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001de6:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 60001edc <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001dea:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001dee:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 60001ee0 <tempmon_init+0x10c>
{
60001df2:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001df8:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001dfc:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001e00:	4d38      	ldr	r5, [pc, #224]	; (60001ee4 <tempmon_init+0x110>)
60001e02:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001e04:	4c38      	ldr	r4, [pc, #224]	; (60001ee8 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001e06:	4839      	ldr	r0, [pc, #228]	; (60001eec <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001e08:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001e0a:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001e0e:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001e10:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001e18:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001e1c:	ee07 1a10 	vmov	s14, r1
60001e20:	4b33      	ldr	r3, [pc, #204]	; (60001ef0 <tempmon_init+0x11c>)
60001e22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001e26:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001e28:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e2c:	4931      	ldr	r1, [pc, #196]	; (60001ef4 <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e2e:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e32:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001e36:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001e3a:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e3e:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001e42:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e46:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e4e:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001e52:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e56:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001e5a:	4827      	ldr	r0, [pc, #156]	; (60001ef8 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e5c:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e60:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e64:	ee75 5a87 	vadd.f32	s11, s11, s14
60001e68:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e6c:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e70:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e74:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e78:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e7c:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e84:	ee16 3a10 	vmov	r3, s12
60001e88:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e90:	ea01 4103 	and.w	r1, r1, r3, lsl #16
60001e94:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001e96:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001e9a:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
60001ea2:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
60001ea6:	430b      	orrs	r3, r1
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001ea8:	4914      	ldr	r1, [pc, #80]	; (60001efc <tempmon_init+0x128>)
60001eaa:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
60001eae:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
60001eb2:	f043 0302 	orr.w	r3, r3, #2
60001eb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
60001eba:	4b11      	ldr	r3, [pc, #68]	; (60001f00 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001ebc:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
60001ec0:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ec4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001ec8:	2201      	movs	r2, #1
}
60001eca:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
60001ecc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
60001ed0:	4770      	bx	lr
60001ed2:	bf00      	nop
60001ed4:	400d8100 	.word	0x400d8100
60001ed8:	401f4400 	.word	0x401f4400
60001edc:	42aa0000 	.word	0x42aa0000
60001ee0:	42b40000 	.word	0x42b40000
60001ee4:	2000b9fc 	.word	0x2000b9fc
60001ee8:	2000b9f8 	.word	0x2000b9f8
60001eec:	2000ba00 	.word	0x2000ba00
60001ef0:	2000ba04 	.word	0x2000ba04
60001ef4:	0fff0000 	.word	0x0fff0000
60001ef8:	e000e400 	.word	0xe000e400
60001efc:	20004000 	.word	0x20004000
60001f00:	00016e09 	.word	0x00016e09

60001f04 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001f04:	4b31      	ldr	r3, [pc, #196]	; (60001fcc <usb_init+0xc8>)
60001f06:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001f0a:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001f0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001f10:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
60001f14:	f000 f8e8 	bl	600020e8 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001f18:	4a2d      	ldr	r2, [pc, #180]	; (60001fd0 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001f1a:	492e      	ldr	r1, [pc, #184]	; (60001fd4 <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001f1c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001f20:	482d      	ldr	r0, [pc, #180]	; (60001fd8 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001f22:	f043 0303 	orr.w	r3, r3, #3
60001f26:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001f2a:	4b2c      	ldr	r3, [pc, #176]	; (60001fdc <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001f2c:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001f30:	6802      	ldr	r2, [r0, #0]
60001f32:	421a      	tst	r2, r3
60001f34:	d103      	bne.n	60001f3e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001f36:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001f3a:	079a      	lsls	r2, r3, #30
60001f3c:	d01b      	beq.n	60001f76 <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001f3e:	4a25      	ldr	r2, [pc, #148]	; (60001fd4 <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001f40:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001f44:	4b24      	ldr	r3, [pc, #144]	; (60001fd8 <usb_init+0xd4>)
60001f46:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001f48:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001f4c:	f043 0302 	orr.w	r3, r3, #2
60001f50:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001f54:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001f58:	079b      	lsls	r3, r3, #30
60001f5a:	d4fb      	bmi.n	60001f54 <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001f5c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001f60:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001f64:	4b1c      	ldr	r3, [pc, #112]	; (60001fd8 <usb_init+0xd4>)
60001f66:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001f6a:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001f6e:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001f70:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
60001f72:	f000 f8a9 	bl	600020c8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001f76:	4a18      	ldr	r2, [pc, #96]	; (60001fd8 <usb_init+0xd4>)
60001f78:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001f7c:	4c15      	ldr	r4, [pc, #84]	; (60001fd4 <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001f7e:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001f80:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001f82:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f84:	4b16      	ldr	r3, [pc, #88]	; (60001fe0 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
60001f86:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f88:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001f8c:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f90:	4618      	mov	r0, r3
60001f92:	f000 f891 	bl	600020b8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
60001f96:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001f9a:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001f9c:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001fa0:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001fa4:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
60001fa6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
60001faa:	641a      	str	r2, [r3, #64]	; 0x40
60001fac:	4b0d      	ldr	r3, [pc, #52]	; (60001fe4 <usb_init+0xe0>)
60001fae:	4a0e      	ldr	r2, [pc, #56]	; (60001fe8 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
60001fb0:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
60001fb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001fb8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
60001fbc:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
60001fc0:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
60001fc2:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
60001fc6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
60001fca:	bd10      	pop	{r4, pc}
60001fcc:	400d8000 	.word	0x400d8000
60001fd0:	400fc000 	.word	0x400fc000
60001fd4:	402e0000 	.word	0x402e0000
60001fd8:	400d9000 	.word	0x400d9000
60001fdc:	001e1c00 	.word	0x001e1c00
60001fe0:	20000000 	.word	0x20000000
60001fe4:	20004000 	.word	0x20004000
60001fe8:	00016ff1 	.word	0x00016ff1

60001fec <_reboot_Teensyduino_>:


FLASHMEM void _reboot_Teensyduino_(void)
{
60001fec:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001fee:	4b0e      	ldr	r3, [pc, #56]	; (60002028 <_reboot_Teensyduino_+0x3c>)
60001ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001ff2:	079b      	lsls	r3, r3, #30
60001ff4:	d400      	bmi.n	60001ff8 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001ff6:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001ff8:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001ffa:	4b0c      	ldr	r3, [pc, #48]	; (6000202c <_reboot_Teensyduino_+0x40>)
60001ffc:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001ffe:	4a0c      	ldr	r2, [pc, #48]	; (60002030 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60002000:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002004:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60002008:	490a      	ldr	r1, [pc, #40]	; (60002034 <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
6000200a:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
6000200e:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60002010:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60002012:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002016:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
6000201a:	4807      	ldr	r0, [pc, #28]	; (60002038 <_reboot_Teensyduino_+0x4c>)
6000201c:	4a07      	ldr	r2, [pc, #28]	; (6000203c <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
6000201e:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60002020:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60002022:	689b      	ldr	r3, [r3, #8]
60002024:	4798      	blx	r3
	}
	__builtin_unreachable();
60002026:	bf00      	nop
60002028:	401f4400 	.word	0x401f4400
6000202c:	402e0000 	.word	0x402e0000
60002030:	400ac000 	.word	0x400ac000
60002034:	00200003 	.word	0x00200003
60002038:	20208000 	.word	0x20208000
6000203c:	eb120000 	.word	0xeb120000

60002040 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002040:	4b10      	ldr	r3, [pc, #64]	; (60002084 <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60002042:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002044:	4a10      	ldr	r2, [pc, #64]	; (60002088 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60002046:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002048:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
6000204c:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
6000204e:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60002050:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60002054:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60002056:	f441 7140 	orr.w	r1, r1, #768	; 0x300
6000205a:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000205c:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
6000205e:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60002060:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002062:	061b      	lsls	r3, r3, #24
60002064:	d4fc      	bmi.n	60002060 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60002066:	4a09      	ldr	r2, [pc, #36]	; (6000208c <analog_init+0x4c>)
60002068:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000206c:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
6000206e:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60002070:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60002072:	6c93      	ldr	r3, [r2, #72]	; 0x48
60002074:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60002078:	d1fb      	bne.n	60002072 <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
6000207a:	4a05      	ldr	r2, [pc, #20]	; (60002090 <analog_init+0x50>)
6000207c:	7013      	strb	r3, [r2, #0]
}
6000207e:	f85d 4b04 	ldr.w	r4, [sp], #4
60002082:	4770      	bx	lr
60002084:	400fc000 	.word	0x400fc000
60002088:	400c4000 	.word	0x400c4000
6000208c:	400c8000 	.word	0x400c8000
60002090:	2000c94f 	.word	0x2000c94f

60002094 <_init>:
60002094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60002096:	bf00      	nop
60002098:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000209a:	bc08      	pop	{r3}
6000209c:	469e      	mov	lr, r3
6000209e:	4770      	bx	lr

600020a0 <__pwm_init_veneer>:
600020a0:	f85f f000 	ldr.w	pc, [pc]	; 600020a4 <__pwm_init_veneer+0x4>
600020a4:	00016b11 	.word	0x00016b11

600020a8 <__set_arm_clock_veneer>:
600020a8:	f85f f000 	ldr.w	pc, [pc]	; 600020ac <__set_arm_clock_veneer+0x4>
600020ac:	00015ba5 	.word	0x00015ba5

600020b0 <___Znwj_veneer>:
600020b0:	f85f f000 	ldr.w	pc, [pc]	; 600020b4 <___Znwj_veneer+0x4>
600020b4:	000166d1 	.word	0x000166d1

600020b8 <__memset_veneer>:
600020b8:	f85f f000 	ldr.w	pc, [pc]	; 600020bc <__memset_veneer+0x4>
600020bc:	000224e1 	.word	0x000224e1

600020c0 <__sm_set_pool_veneer>:
600020c0:	f85f f000 	ldr.w	pc, [pc]	; 600020c4 <__sm_set_pool_veneer+0x4>
600020c4:	00018711 	.word	0x00018711

600020c8 <__delay_veneer>:
600020c8:	f85f f000 	ldr.w	pc, [pc]	; 600020cc <__delay_veneer+0x4>
600020cc:	00015e95 	.word	0x00015e95

600020d0 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer>:
600020d0:	f85f f000 	ldr.w	pc, [pc]	; 600020d4 <___ZN13IntervalTimer11beginCyclesEPFvvEm_veneer+0x4>
600020d4:	00015411 	.word	0x00015411

600020d8 <____libc_init_array_veneer>:
600020d8:	f85f f000 	ldr.w	pc, [pc]	; 600020dc <____libc_init_array_veneer+0x4>
600020dc:	00022af9 	.word	0x00022af9

600020e0 <__main_veneer>:
600020e0:	f85f f000 	ldr.w	pc, [pc]	; 600020e4 <__main_veneer+0x4>
600020e4:	0001658d 	.word	0x0001658d

600020e8 <__usb_init_serialnumber_veneer>:
600020e8:	f85f f000 	ldr.w	pc, [pc]	; 600020ec <__usb_init_serialnumber_veneer+0x4>
600020ec:	0001772d 	.word	0x0001772d

600020f0 <__frame_dummy_init_array_entry>:
600020f0:	00000101 00009ad5 0000aff5 0000b4ed     ................
60002100:	0000b541 0000bd01 0000bd19 0000bd31     A...........1...
60002110:	0000bd49 0000bd61 0000bd79 0000bd91     I...a...y.......
60002120:	0000bda9 0000bdc1 0000bdd9 0000bdf1     ................
60002130:	0000c39d 0000c3b5 0000c3cd 0000c3e5     ................
60002140:	0000c3fd 0000c415 0000c42d 0000c445     ........-...E...
60002150:	0000c479 0000c4a9 0000c4c1 0000c4d9     y...............
60002160:	0000c4f1 0000c509 0000d291 00014d79     ............yM..
60002170:	00018da5                                ....

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <irq_gpio6789>:
    } else {
      *hs = highSurrogate(cp);
      *ls = lowSurrogate(cp);
    }
    return ptr;
  }
      20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /** High surrogate for a code point.
   * \param{in} cp code point.
   * \return high surrogate.
   */
  inline uint16_t highSurrogate(uint32_t cp) {
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      22:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
  /** Low surrogate for a code point.
   * \param{in} cp code point.
   * \return low surrogate.
   */
  inline uint16_t lowSurrogate(uint32_t cp) {
    return (cp & 0X3FF) + 0XDC00;
      26:	699d      	ldr	r5, [r3, #24]
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
      28:	695a      	ldr	r2, [r3, #20]
      2a:	4015      	ands	r5, r2
    return (cp & 0X3FF) + 0XDC00;
      2c:	d00d      	beq.n	4a <_teensy_model_identifier+0x25>
      2e:	4f24      	ldr	r7, [pc, #144]	; (c0 <_teensy_model_identifier+0x9b>)
      *hs = highSurrogate(cp);
      30:	2601      	movs	r6, #1
      *ls = lowSurrogate(cp);
      32:	619d      	str	r5, [r3, #24]
  }
      34:	fa95 f4a5 	rbit	r4, r5
		}
		m_nFPS = (br * 1000) / now;
		br = 0;
		lastframe = millis();
	}
}
      38:	fab4 f484 	clz	r4, r4
      3c:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      40:	fa06 f404 	lsl.w	r4, r6, r4
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      44:	4798      	blx	r3
      46:	43a5      	bics	r5, r4
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      48:	d1f4      	bne.n	34 <_teensy_model_identifier+0xf>
}
      4a:	4b1e      	ldr	r3, [pc, #120]	; (c4 <_teensy_model_identifier+0x9f>)
      4c:	699d      	ldr	r5, [r3, #24]
      4e:	695a      	ldr	r2, [r3, #20]
  }
}


CRGB getCol(int g) {
  return col[g] * 10;
      50:	4015      	ands	r5, r2
}
      52:	d00d      	beq.n	70 <_teensy_model_identifier+0x4b>
      54:	4f1c      	ldr	r7, [pc, #112]	; (c8 <_teensy_model_identifier+0xa3>)
      56:	2601      	movs	r6, #1
      58:	619d      	str	r5, [r3, #24]
      5a:	fa95 f4a5 	rbit	r4, r5
  m_vwd = dir;
  return true;

 fail:
  return false;
}
      5e:	fab4 f484 	clz	r4, r4
	if (x == 0) x = 123459876;
	hi = x / 127773;
	lo = x % 127773;
	x = 16807 * lo - 2836 * hi;
	if (x < 0) x += 0x7FFFFFFF;
	seed = x;
      62:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
      66:	fa06 f404 	lsl.w	r4, r6, r4
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
}
      6a:	4798      	blx	r3
      }
    }
  }
  if (r < 0) {
    // read error
    return -1;
      6c:	43a5      	bics	r5, r4
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
      6e:	d1f4      	bne.n	5a <_teensy_model_identifier+0x35>
      70:	4b16      	ldr	r3, [pc, #88]	; (cc <_teensy_model_identifier+0xa7>)
      72:	699d      	ldr	r5, [r3, #24]
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
      74:	695a      	ldr	r2, [r3, #20]
      76:	4015      	ands	r5, r2
      78:	d00d      	beq.n	96 <_teensy_model_identifier+0x71>
	int32_t mult = multiplier;

	if (mult == 0) {
		// zero gain, discard any input and transmit nothing
		block = receiveReadOnly(0);
		if (block) release(block);
      7a:	4f15      	ldr	r7, [pc, #84]	; (d0 <_teensy_model_identifier+0xab>)
			applyGain(block->data, mult);
			transmit(block);
			release(block);
		}
	}
}
      7c:	2601      	movs	r6, #1
  }
  return true;

 fail:
  return false;
}
      7e:	619d      	str	r5, [r3, #24]
  return true;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName7(char* name, size_t count) {
  DirName_t* dn;
  size_t n = 0;
      80:	fa95 f4a5 	rbit	r4, r5
  if (sep) {
    *--str = sep;
  }
  str = fmtBase10(str, n);
  if (n < 10) {
    *--str = '0';
      84:	fab4 f484 	clz	r4, r4
  if (tz & 0X80) {
    if (tz & 0X40) {
      sign = '-';
      tz = -tz;
    } else {
      sign = '+';
      88:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
{
	MillisTimer *timer = listActive;
	while (timer) {
		if (timer->_ms > 0) {
			timer->_ms--;
			break;
      8c:	fa06 f404 	lsl.w	r4, r6, r4
      90:	4798      	blx	r3
      92:	43a5      	bics	r5, r4
    if (untruncated < -32768)
      return -32768;
    if (untruncated > 32767)
      return 32767;
    return untruncated;
}
      94:	d1f4      	bne.n	80 <_teensy_model_identifier+0x5b>
      96:	4b0f      	ldr	r3, [pc, #60]	; (d4 <_teensy_model_identifier+0xaf>)
      98:	699d      	ldr	r5, [r3, #24]
      9a:	695a      	ldr	r2, [r3, #20]
      9c:	4015      	ands	r5, r2
      9e:	d00d      	beq.n	bc <_teensy_model_identifier+0x97>
      a0:	4f0d      	ldr	r7, [pc, #52]	; (d8 <_teensy_model_identifier+0xb3>)
      a2:	2601      	movs	r6, #1
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
}
      a4:	619d      	str	r5, [r3, #24]
      a6:	fa95 f4a5 	rbit	r4, r5
}
      aa:	fab4 f484 	clz	r4, r4
	using Print::write;
private:
	void dec_refcount() {
		if (--(f->refcount) == 0) {
			f->close();
			delete f;
      ae:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FF8000;
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
	flash_wait();
      b2:	fa06 f404 	lsl.w	r4, r6, r4
      b6:	4798      	blx	r3
      b8:	43a5      	bics	r5, r4
      ba:	d1f4      	bne.n	a6 <_teensy_model_identifier+0x81>
{
	irq_anyport(&GPIO6_DR, isr_table_gpio1);
	irq_anyport(&GPIO7_DR, isr_table_gpio2);
	irq_anyport(&GPIO8_DR, isr_table_gpio3);
	irq_anyport(&GPIO9_DR, isr_table_gpio4);
}
      bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      be:	bf00      	nop
      c0:	20003928 	.word	0x20003928
      c4:	42004000 	.word	0x42004000
      c8:	200039a8 	.word	0x200039a8
      cc:	42008000 	.word	0x42008000
      d0:	20003a28 	.word	0x20003a28
      d4:	4200c000 	.word	0x4200c000
      d8:	20003aa8 	.word	0x20003aa8

000000dc <register_tm_clones>:
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
#endif

	update_responsibility = update_setup();
	dma.attachInterrupt(isr);
}
      dc:	4805      	ldr	r0, [pc, #20]	; (f4 <register_tm_clones+0x18>)
      de:	4b06      	ldr	r3, [pc, #24]	; (f8 <register_tm_clones+0x1c>)
  seconds += (tm.mday-1) * SECS_PER_DAY;
  seconds += tm.hour * SECS_PER_HOUR;
  seconds += tm.min * SECS_PER_MIN;
  seconds += tm.sec;
  return /*(time_t)*/ seconds;
}
      e0:	1a1b      	subs	r3, r3, r0
      e2:	0fd9      	lsrs	r1, r3, #31
      e4:	eb01 01a3 	add.w	r1, r1, r3, asr #2
      e8:	1049      	asrs	r1, r1, #1
      ea:	d002      	beq.n	f2 <register_tm_clones+0x16>
      ec:	4b03      	ldr	r3, [pc, #12]	; (fc <register_tm_clones+0x20>)
      ee:	b103      	cbz	r3, f2 <register_tm_clones+0x16>
      f0:	4718      	bx	r3
      f2:	4770      	bx	lr
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
      f4:	200042c0 	.word	0x200042c0
      f8:	200042c0 	.word	0x200042c0
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
      fc:	00000000 	.word	0x00000000

00000100 <frame_dummy>:
     100:	b508      	push	{r3, lr}
     102:	4b05      	ldr	r3, [pc, #20]	; (118 <frame_dummy+0x18>)
     104:	b11b      	cbz	r3, 10e <frame_dummy+0xe>
     106:	4905      	ldr	r1, [pc, #20]	; (11c <frame_dummy+0x1c>)
		table += 256;
		sum += table[data2 >> 24];
		table += 256;
		sum += table[(data2 >> 16) & 255];
		table += 256;
		sum += table[(data2 >> 8) & 255];
     108:	4805      	ldr	r0, [pc, #20]	; (120 <frame_dummy+0x20>)
     10a:	f3af 8000 	nop.w
		table += 256;
		sum += table[data2 & 255];
		table += 256;

	} while (--count > 0);
     10e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift) __attribute__((always_inline, unused));
static inline int32_t signed_saturate_rshift(int32_t val, int bits, int rshift)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
     112:	f7ff bfe3 	b.w	dc <register_tm_clones>
	return signed_saturate_rshift(sum, 16, RSHIFT);
}
     116:	bf00      	nop
     118:	00000000 	.word	0x00000000
	#if IMXRT_CACHE_ENABLED >= 2
	uint32_t *dc = dest;
	#endif
	
	for (i=0; i < 16; i += 2) {
		src1 = block_input[i] ? (uint32_t *)(block_input[i]->data) : zeros;
     11c:	2000b640 	.word	0x2000b640
		dest = tdm_tx_buffer;
	}
	if (update_responsibility) AudioStream::update_all();
	dc = dest;
	for (i=0; i < 16; i += 2) {
		src1 = block_input[i] ? (uint32_t *)(block_input[i]->data) : zeros;
     120:	60030800 	.word	0x60030800

00000124 <Print::availableForWrite()>:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ if (str == nullptr) return 0;
							  return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
     124:	2000      	movs	r0, #0
     126:	4770      	bx	lr

00000128 <Print::flush()>:
	virtual void flush()				{ }
     128:	4770      	bx	lr
		}
		if (transmit_previous_timeout) return;
		if (!usb_configuration) return;
		yield();
	}
	uint32_t *txdata = (uint32_t *)(txbuffer + (tx_head * TX_SIZE) + (tx_packet_size - tx_available));
     12a:	bf00      	nop

0000012c <CLEDController::size()>:
        }
    }

    /// How many LEDs does this controller manage?
    /// @returns CLEDController::m_nLeds
    virtual int size() { return m_nLeds; }
     12c:	6940      	ldr	r0, [r0, #20]
     12e:	4770      	bx	lr

00000130 <CLEDController::getMaxRefreshRate() const>:
      #endif
    }

    /// Gets the maximum possible refresh rate of the strip
    /// @returns the maximum refresh rate, in frames per second (FPS)
    virtual uint16_t getMaxRefreshRate() const { return 0; }
     130:	2000      	movs	r0, #0
     132:	4770      	bx	lr

00000134 <File::write(unsigned char const*, unsigned int)>:
		return (f) ? f->write((void*)buf, size) : 0;
     134:	6900      	ldr	r0, [r0, #16]
     136:	b110      	cbz	r0, 13e <File::write(unsigned char const*, unsigned int)+0xa>
     138:	6803      	ldr	r3, [r0, #0]
     13a:	68db      	ldr	r3, [r3, #12]
     13c:	4718      	bx	r3
	}
     13e:	4770      	bx	lr

00000140 <File::available()>:
		return (f) ? f->available() : 0;
     140:	6900      	ldr	r0, [r0, #16]
     142:	b110      	cbz	r0, 14a <File::available()+0xa>
     144:	6803      	ldr	r3, [r0, #0]
     146:	691b      	ldr	r3, [r3, #16]
     148:	4718      	bx	r3
	}
     14a:	4770      	bx	lr

0000014c <File::peek()>:
		return (f) ? f->peek() : -1;
     14c:	6900      	ldr	r0, [r0, #16]
     14e:	b110      	cbz	r0, 156 <File::peek()+0xa>
     150:	6803      	ldr	r3, [r0, #0]
     152:	695b      	ldr	r3, [r3, #20]
     154:	4718      	bx	r3
	}
     156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     15a:	4770      	bx	lr

0000015c <File::flush()>:
		if (f) f->flush();
     15c:	6900      	ldr	r0, [r0, #16]
     15e:	b110      	cbz	r0, 166 <File::flush()+0xa>
     160:	6803      	ldr	r3, [r0, #0]
     162:	699b      	ldr	r3, [r3, #24]
     164:	4718      	bx	r3
	}
     166:	4770      	bx	lr

00000168 <File::read()>:
		if (!f) return -1;
     168:	6900      	ldr	r0, [r0, #16]
     16a:	b180      	cbz	r0, 18e <File::read()+0x26>
		if (f->read(&b, 1) < 1) return -1;
     16c:	6803      	ldr	r3, [r0, #0]
     16e:	2201      	movs	r2, #1
	int read() {
     170:	b500      	push	{lr}
     172:	b083      	sub	sp, #12
		if (f->read(&b, 1) < 1) return -1;
     174:	689b      	ldr	r3, [r3, #8]
     176:	f10d 0107 	add.w	r1, sp, #7
     17a:	4798      	blx	r3
     17c:	b120      	cbz	r0, 188 <File::read()+0x20>
		return b;
     17e:	f89d 0007 	ldrb.w	r0, [sp, #7]
	}
     182:	b003      	add	sp, #12
     184:	f85d fb04 	ldr.w	pc, [sp], #4
		if (!f) return -1;
     188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     18c:	e7f9      	b.n	182 <File::read()+0x1a>
     18e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
     192:	4770      	bx	lr

00000194 <File::write(unsigned char)>:
	size_t write(uint8_t b) {
     194:	b500      	push	{lr}
		return (f) ? f->write(&b, 1) : 0;
     196:	6900      	ldr	r0, [r0, #16]
	size_t write(uint8_t b) {
     198:	b083      	sub	sp, #12
     19a:	f88d 1007 	strb.w	r1, [sp, #7]
		return (f) ? f->write(&b, 1) : 0;
     19e:	b128      	cbz	r0, 1ac <File::write(unsigned char)+0x18>
     1a0:	6803      	ldr	r3, [r0, #0]
     1a2:	2201      	movs	r2, #1
     1a4:	f10d 0107 	add.w	r1, sp, #7
     1a8:	68db      	ldr	r3, [r3, #12]
     1aa:	4798      	blx	r3
	}
     1ac:	b003      	add	sp, #12
     1ae:	f85d fb04 	ldr.w	pc, [sp], #4
		// The DMA didn't fill blocks, and we could not allocate
		// memory... the system is likely starving for memory!
		// Sadly, there's nothing we can do.
		__enable_irq();
	}
}
     1b2:	bf00      	nop

000001b4 <SDFile::isOpen()>:
  bool isHidden() const {
    return m_fFile ? m_fFile->isHidden() :
           m_xFile ? m_xFile->isHidden() : false;
  }
  /** \return True if this is an open file/directory else false. */
  bool isOpen() const {return m_fFile || m_xFile;}
     1b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     1b6:	b10b      	cbz	r3, 1bc <SDFile::isOpen()+0x8>
     1b8:	2001      	movs	r0, #1
			sdfatfile.close();
		}
	}
	virtual bool isOpen() {
		return sdfatfile.isOpen();
	}
     1ba:	4770      	bx	lr
     1bc:	6d40      	ldr	r0, [r0, #84]	; 0x54
     1be:	3800      	subs	r0, #0
     1c0:	bf18      	it	ne
     1c2:	2001      	movne	r0, #1
     1c4:	4770      	bx	lr
	if (priority(ch2) < priority(ch3)) swap(ch2, ch3);
	if (priority(ch1) < priority(ch2)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
	if (priority(ch2) < priority(ch3)) swap(ch1, ch2);
	if (priority(ch3) < priority(ch4)) swap(ch2, ch3);
}
     1c6:	bf00      	nop

000001c8 <newdigate::ResamplingArrayReader::~ResamplingArrayReader()>:
    ResamplingArrayReader() :
        ResamplingReader() {
    }    
    
    virtual ~ResamplingArrayReader() {
    }
     1c8:	4770      	bx	lr
     1ca:	bf00      	nop

000001cc <newdigate::ResamplingArrayReader::getSourceBufferValue(long)>:

    int16_t getSourceBufferValue(long index) override {
        return _sourceBuffer[index];
     1cc:	6d43      	ldr	r3, [r0, #84]	; 0x54
    }
     1ce:	f933 0011 	ldrsh.w	r0, [r3, r1, lsl #1]
     1d2:	4770      	bx	lr

000001d4 <newdigate::ResamplingArrayReader::createSourceBuffer()>:
        return _playing;
    }

    int16_t* createSourceBuffer() override {
        return _sourceBuffer;
    }
     1d4:	6d40      	ldr	r0, [r0, #84]	; 0x54
     1d6:	4770      	bx	lr

000001d8 <newdigate::ResamplingArrayReader::open(char*)>:
	constexpr Print() : write_error(0) {}
     1d8:	2200      	movs	r2, #0
	constexpr File() : f(nullptr) { }
     1da:	4906      	ldr	r1, [pc, #24]	; (1f4 <newdigate::ResamplingArrayReader::open(char*)+0x1c>)
            stop();
            deleteInterpolationPoints();
        }
    }

    File open(char *filename) override {
     1dc:	b410      	push	{r4}
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
     1de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
     1e2:	7302      	strb	r2, [r0, #12]
     1e4:	6001      	str	r1, [r0, #0]
     1e6:	6102      	str	r2, [r0, #16]
     1e8:	e9c0 2401 	strd	r2, r4, [r0, #4]
        return File();
    }
     1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
     1f0:	4770      	bx	lr
     1f2:	bf00      	nop
     1f4:	200014d4 	.word	0x200014d4

000001f8 <CWS2812SerialController<17, (EOrder)129>::init()>:
    }

public:
    CWS2812SerialController() { pserial = NULL; }

    virtual void init() { /* do nothing yet */ }
     1f8:	4770      	bx	lr
	event_responder.clearEvent();	// Make sure it is not set yet
	if (count < 2) {
		// Use non-async version to simplify cases...
		transfer(buf, retbuf, count);
		event_responder.triggerEvent();
		return true;
     1fa:	bf00      	nop

000001fc <CPixelLEDController<(EOrder)129, 8, 255ul>::lanes()>:
public:
    CPixelLEDController() : CLEDController() {}

    /// Get the number of lanes of the Controller
    /// @returns LANES from template
    int lanes() { return LANES; }
     1fc:	2008      	movs	r0, #8
     1fe:	4770      	bx	lr

00000200 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)>:
    virtual void show(const struct CRGB *data, int nLeds, CRGB scale) {
     200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     204:	b090      	sub	sp, #64	; 0x40
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     206:	e9cd 3101 	strd	r3, r1, [sp, #4]
        PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds < 0 ? -nLeds : nLeds, scale, getDither());
     20a:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
    inline uint8_t getDither() { return m_DitherMode; }
     20e:	7c81      	ldrb	r1, [r0, #18]
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     210:	f8bd c004 	ldrh.w	ip, [sp, #4]
        PixelController<RGB_ORDER, LANES, MASK> pixels(data, nLeds < 0 ? -nLeds : nLeds, scale, getDither());
     214:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     218:	f89d 4006 	ldrb.w	r4, [sp, #6]
            switch(dither) {
     21c:	2901      	cmp	r1, #1
        PixelController(const CRGB *d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)d), mLen(len), mLenRemaining(len), mScale(s) {
     21e:	f8ad c01a 	strh.w	ip, [sp, #26]
     222:	f88d 401c 	strb.w	r4, [sp, #28]
     226:	e9cd 3303 	strd	r3, r3, [sp, #12]
            switch(dither) {
     22a:	d01d      	beq.n	268 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0x68>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     22c:	2100      	movs	r1, #0
     22e:	9105      	str	r1, [sp, #20]
     230:	f8ad 1018 	strh.w	r1, [sp, #24]
            mAdvance = 3;
     234:	2403      	movs	r4, #3
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     236:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
     23a:	a907      	add	r1, sp, #28
     23c:	f10d 0e3c 	add.w	lr, sp, #60	; 0x3c
          int nOffset = 0;
     240:	2300      	movs	r3, #0
            mAdvance = 3;
     242:	f88d 401d 	strb.w	r4, [sp, #29]
            mOffsets[i] = nOffset;
     246:	f841 3f04 	str.w	r3, [r1, #4]!
          for(int i = 0; i < LANES; ++i) {
     24a:	4571      	cmp	r1, lr
            if((1<<i) & MASK) { nOffset += (len * mAdvance); }
     24c:	4463      	add	r3, ip
          for(int i = 0; i < LANES; ++i) {
     24e:	d1fa      	bne.n	246 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0x46>
        if(nLeds < 0) {
     250:	2a00      	cmp	r2, #0
     252:	da02      	bge.n	25a <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0x5a>
            pixels.mAdvance = -pixels.mAdvance;
     254:	23fd      	movs	r3, #253	; 0xfd
     256:	f88d 301d 	strb.w	r3, [sp, #29]
        showPixels(pixels);
     25a:	6803      	ldr	r3, [r0, #0]
     25c:	a902      	add	r1, sp, #8
     25e:	69db      	ldr	r3, [r3, #28]
     260:	4798      	blx	r3
    }
     262:	b010      	add	sp, #64	; 0x40
     264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ++R;
     268:	4c1d      	ldr	r4, [pc, #116]	; (2e0 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0xe0>)
     26a:	f10d 0617 	add.w	r6, sp, #23
                    e[i] = s ? (256/s) + 1 : 0;
     26e:	f44f 7780 	mov.w	r7, #256	; 0x100
            ++R;
     272:	7821      	ldrb	r1, [r4, #0]
     274:	3101      	adds	r1, #1
            R &= (0x01 << ditherBits) - 1;
     276:	f001 0107 	and.w	r1, r1, #7
     27a:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
     27e:	7021      	strb	r1, [r4, #0]
                if(R & 0x02) { Q |= 0x40; }
     280:	078c      	lsls	r4, r1, #30
     282:	fa5f fc8c 	uxtb.w	ip, ip
     286:	bf48      	it	mi
     288:	f04c 0c40 	orrmi.w	ip, ip, #64	; 0x40
                if(R & 0x04) { Q |= 0x20; }
     28c:	0749      	lsls	r1, r1, #29
     28e:	a905      	add	r1, sp, #20
     290:	bf48      	it	mi
     292:	f04c 0c20 	orrmi.w	ip, ip, #32
                    uint8_t s = mScale.raw[i];
     296:	798c      	ldrb	r4, [r1, #6]
                Q += 0x01 << (7 - ditherBits);
     298:	f10c 0c10 	add.w	ip, ip, #16
     29c:	fa5f fc8c 	uxtb.w	ip, ip
                    e[i] = s ? (256/s) + 1 : 0;
     2a0:	b1d4      	cbz	r4, 2d8 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0xd8>
     2a2:	fbb7 f4f4 	udiv	r4, r7, r4
     2a6:	b2e4      	uxtb	r4, r4
     2a8:	1c65      	adds	r5, r4, #1
     2aa:	b2ed      	uxtb	r5, r5
/// @note Takes 4 clocks on AVR with MUL, 2 clocks on ARM
LIB8STATIC_ALWAYS_INLINE uint8_t scale8( uint8_t i, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    return (((uint16_t)i) * (1+(uint16_t)(scale))) >> 8;
     2ac:	fb05 ce0c 	mla	lr, r5, ip, ip
     2b0:	70cd      	strb	r5, [r1, #3]
     2b2:	f3ce 2807 	ubfx	r8, lr, #8, #8
                    if(d[i]) (--d[i]);
     2b6:	ea5f 2e2e 	movs.w	lr, lr, asr #8
     2ba:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
                    d[i] = scale8(Q, e[i]);
     2be:	bf0c      	ite	eq
     2c0:	f881 e000 	strbeq.w	lr, [r1]
                    if(d[i]) (--d[i]);
     2c4:	f881 8000 	strbne.w	r8, [r1]
                    if(e[i]) --e[i];
     2c8:	b105      	cbz	r5, 2cc <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0xcc>
     2ca:	70cc      	strb	r4, [r1, #3]
            for(int i = 0; i < 3; ++i) {
     2cc:	3101      	adds	r1, #1
     2ce:	428e      	cmp	r6, r1
     2d0:	d0b0      	beq.n	234 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0x34>
                    uint8_t s = mScale.raw[i];
     2d2:	798c      	ldrb	r4, [r1, #6]
                    e[i] = s ? (256/s) + 1 : 0;
     2d4:	2c00      	cmp	r4, #0
     2d6:	d1e4      	bne.n	2a2 <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0xa2>
     2d8:	70cc      	strb	r4, [r1, #3]
                    d[i] = scale8(Q, e[i]);
     2da:	700c      	strb	r4, [r1, #0]
     2dc:	e7f6      	b.n	2cc <CPixelLEDController<(EOrder)129, 8, 255ul>::show(CRGB const*, int, CRGB)+0xcc>
     2de:	bf00      	nop
     2e0:	2000c94c 	.word	0x2000c94c

000002e4 <newdigate::ResamplingArrayReader::~ResamplingArrayReader()>:
    virtual ~ResamplingArrayReader() {
     2e4:	b510      	push	{r4, lr}
     2e6:	4604      	mov	r4, r0
    }
     2e8:	2168      	movs	r1, #104	; 0x68
     2ea:	f016 f9f9 	bl	166e0 <operator delete(void*, unsigned int)>
     2ee:	4620      	mov	r0, r4
     2f0:	bd10      	pop	{r4, pc}
		digitalWriteFast(SPIRAM_CS_PIN, LOW);
		SPI.transfer16((0x02 << 8) | (addr >> 16));
		SPI.transfer16(addr & 0xFFFF);
		while (count) {
			int16_t w = 0;
			if (data) w = *data++;
     2f2:	bf00      	nop

000002f4 <SDFile::close()>:
	virtual void close() {
     2f4:	b510      	push	{r4, lr}
     2f6:	4604      	mov	r4, r0
		if (filename) {
     2f8:	6d80      	ldr	r0, [r0, #88]	; 0x58
     2fa:	b118      	cbz	r0, 304 <SDFile::close()+0x10>
			free(filename);
     2fc:	f020 ff38 	bl	21170 <free>
			filename = nullptr;
     300:	2300      	movs	r3, #0
     302:	65a3      	str	r3, [r4, #88]	; 0x58
     304:	6d23      	ldr	r3, [r4, #80]	; 0x50
     306:	b12b      	cbz	r3, 314 <SDFile::close()+0x20>
			sdfatfile.close();
     308:	f104 0018 	add.w	r0, r4, #24
	}
     30c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			sdfatfile.close();
     310:	f011 bc42 	b.w	11b98 <FsBaseFile::close()>
     314:	6d63      	ldr	r3, [r4, #84]	; 0x54
     316:	2b00      	cmp	r3, #0
     318:	d1f6      	bne.n	308 <SDFile::close()+0x14>
	}
     31a:	bd10      	pop	{r4, pc}

0000031c <Mode::~Mode()>:
struct Mode {
     31c:	b510      	push	{r4, lr}
     31e:	4604      	mov	r4, r0
     320:	f015 fae6 	bl	158f0 <String::~String()>
     324:	4620      	mov	r0, r4
     326:	bd10      	pop	{r4, pc}

00000328 <__tcf_0>:

String usedFiles[13] = {"samples/_1.wav",
     328:	b538      	push	{r3, r4, r5, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__tcf_0+0x18>)
     32c:	f1a4 05d0 	sub.w	r5, r4, #208	; 0xd0
     330:	3c10      	subs	r4, #16
     332:	4620      	mov	r0, r4
     334:	f015 fadc 	bl	158f0 <String::~String()>
     338:	42ac      	cmp	r4, r5
     33a:	d1f9      	bne.n	330 <__tcf_0+0x8>
     33c:	bd38      	pop	{r3, r4, r5, pc}
     33e:	bf00      	nop
     340:	2000c794 	.word	0x2000c794

00000344 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)>:

    virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (pserial == NULL) {
     348:	6985      	ldr	r5, [r0, #24]
    virtual void showPixels(PixelController<RGB_ORDER, 8, 0xFF> & pixels) {
     34a:	4604      	mov	r4, r0
     34c:	468a      	mov	sl, r1
        if (pserial == NULL) {
     34e:	2d00      	cmp	r5, #0
     350:	d067      	beq.n	422 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xde>
        _init(pixels.size());

        uint8_t *p = drawbuffer;

        while(pixels.has(1)) {
     352:	f8da 3008 	ldr.w	r3, [sl, #8]
        uint8_t *p = drawbuffer;
     356:	69e2      	ldr	r2, [r4, #28]
        while(pixels.has(1)) {
     358:	2b00      	cmp	r3, #0
     35a:	dd5d      	ble.n	418 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xd4>
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     35c:	f8da 3000 	ldr.w	r3, [sl]
     360:	3203      	adds	r2, #3
     362:	7898      	ldrb	r0, [r3, #2]
LIB8STATIC_ALWAYS_INLINE uint8_t qadd8( uint8_t i, uint8_t j)
{
#if QADD8_C == 1
    unsigned int t = i + j;
    if( t > 255) t = 255;
    return t;
     364:	4603      	mov	r3, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     366:	b128      	cbz	r0, 374 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x30>
    unsigned int t = i + j;
     368:	f89a 300e 	ldrb.w	r3, [sl, #14]
     36c:	4403      	add	r3, r0
     36e:	2bff      	cmp	r3, #255	; 0xff
     370:	bf28      	it	cs
     372:	23ff      	movcs	r3, #255	; 0xff
     374:	f89a 0014 	ldrb.w	r0, [sl, #20]
     378:	fb00 3303 	mla	r3, r0, r3, r3
     37c:	121b      	asrs	r3, r3, #8
     37e:	f802 3c03 	strb.w	r3, [r2, #-3]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     382:	f8da 3000 	ldr.w	r3, [sl]
     386:	7818      	ldrb	r0, [r3, #0]
    return t;
     388:	4603      	mov	r3, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     38a:	b128      	cbz	r0, 398 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x54>
    unsigned int t = i + j;
     38c:	f89a 300c 	ldrb.w	r3, [sl, #12]
     390:	4403      	add	r3, r0
     392:	2bff      	cmp	r3, #255	; 0xff
     394:	bf28      	it	cs
     396:	23ff      	movcs	r3, #255	; 0xff
     398:	f89a 0012 	ldrb.w	r0, [sl, #18]
     39c:	fb00 3303 	mla	r3, r0, r3, r3
     3a0:	121b      	asrs	r3, r3, #8
     3a2:	f802 3c02 	strb.w	r3, [r2, #-2]
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t loadByte(PixelController & pc) { return pc.mData[RO(SLOT)]; }
     3a6:	f8da 3000 	ldr.w	r3, [sl]
     3aa:	7858      	ldrb	r0, [r3, #1]
    return t;
     3ac:	4603      	mov	r3, r0
        template<int SLOT>  __attribute__((always_inline)) inline static uint8_t dither(PixelController & pc, uint8_t b) { return b ? qadd8(b, pc.d[RO(SLOT)]) : 0; }
     3ae:	b128      	cbz	r0, 3bc <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x78>
    unsigned int t = i + j;
     3b0:	f89a 300d 	ldrb.w	r3, [sl, #13]
     3b4:	4403      	add	r3, r0
     3b6:	2bff      	cmp	r3, #255	; 0xff
     3b8:	bf28      	it	cs
     3ba:	23ff      	movcs	r3, #255	; 0xff
     3bc:	f89a 0013 	ldrb.w	r0, [sl, #19]
     3c0:	3203      	adds	r2, #3
     3c2:	fb00 3303 	mla	r3, r0, r3, r3
     3c6:	121b      	asrs	r3, r3, #8
     3c8:	f802 3c04 	strb.w	r3, [r2, #-4]
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRemaining;}
     3cc:	f8da 0008 	ldr.w	r0, [sl, #8]
                d[0] = e[0] - d[0];
     3d0:	f89a 900c 	ldrb.w	r9, [sl, #12]
                d[1] = e[1] - d[1];
     3d4:	f89a 800d 	ldrb.w	r8, [sl, #13]
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRemaining;}
     3d8:	3801      	subs	r0, #1
                d[2] = e[2] - d[2];
     3da:	f89a 700e 	ldrb.w	r7, [sl, #14]
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRemaining;}
     3de:	f8da 3000 	ldr.w	r3, [sl]
     3e2:	2800      	cmp	r0, #0
                d[0] = e[0] - d[0];
     3e4:	f89a 500f 	ldrb.w	r5, [sl, #15]
                d[1] = e[1] - d[1];
     3e8:	f89a e010 	ldrb.w	lr, [sl, #16]
                d[2] = e[2] - d[2];
     3ec:	f89a c011 	ldrb.w	ip, [sl, #17]
                d[0] = e[0] - d[0];
     3f0:	eba5 0509 	sub.w	r5, r5, r9
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRemaining;}
     3f4:	f99a 6015 	ldrsb.w	r6, [sl, #21]
                d[1] = e[1] - d[1];
     3f8:	ebae 0e08 	sub.w	lr, lr, r8
                d[2] = e[2] - d[2];
     3fc:	ebac 0c07 	sub.w	ip, ip, r7
                d[0] = e[0] - d[0];
     400:	f88a 500c 	strb.w	r5, [sl, #12]
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRemaining;}
     404:	4433      	add	r3, r6
                d[1] = e[1] - d[1];
     406:	f88a e00d 	strb.w	lr, [sl, #13]
                d[2] = e[2] - d[2];
     40a:	f88a c00e 	strb.w	ip, [sl, #14]
         __attribute__((always_inline)) inline void advanceData() { mData += mAdvance; --mLenRemaining;}
     40e:	f8ca 3000 	str.w	r3, [sl]
     412:	f8ca 0008 	str.w	r0, [sl, #8]
     416:	dca4      	bgt.n	362 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0x1e>
            *p++ = pixels.loadAndScale1();
            *p++ = pixels.loadAndScale2();
            pixels.stepDithering();
            pixels.advanceData();
        }
        pserial->show();
     418:	69a0      	ldr	r0, [r4, #24]
    }
     41a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        pserial->show();
     41e:	f00a ba25 	b.w	a86c <WS2812Serial::show()>
        __attribute__((always_inline)) inline int size() { return mLen; }
     422:	684e      	ldr	r6, [r1, #4]
            drawbuffer = (uint8_t*)malloc(nLeds * 3);
     424:	eb06 0746 	add.w	r7, r6, r6, lsl #1
     428:	4638      	mov	r0, r7
     42a:	f020 fe99 	bl	21160 <malloc>
     42e:	61e0      	str	r0, [r4, #28]
            framebuffer = (uint8_t*)malloc(nLeds * 12);
     430:	00b8      	lsls	r0, r7, #2
     432:	f020 fe95 	bl	21160 <malloc>
     436:	6220      	str	r0, [r4, #32]
            pserial = new WS2812Serial(nLeds, framebuffer, drawbuffer, DATA_PIN, WS2812_RGB);
     438:	201c      	movs	r0, #28
     43a:	f016 f949 	bl	166d0 <operator new(unsigned int)>
     43e:	6a22      	ldr	r2, [r4, #32]
     440:	8006      	strh	r6, [r0, #0]

class WS2812Serial {
public:
	constexpr WS2812Serial(uint16_t num, void *fb, void *db, uint8_t pin, uint8_t cfg) :
		numled(num), pin(pin), config(cfg),
		frameBuffer((uint8_t *)fb), drawBuffer((uint8_t *)db) {
     442:	6042      	str	r2, [r0, #4]
     444:	22ff      	movs	r2, #255	; 0xff
     446:	61a0      	str	r0, [r4, #24]
     448:	7502      	strb	r2, [r0, #20]
     44a:	69e2      	ldr	r2, [r4, #28]
     44c:	6185      	str	r5, [r0, #24]
     44e:	6082      	str	r2, [r0, #8]
		numled(num), pin(pin), config(cfg),
     450:	2211      	movs	r2, #17
		frameBuffer((uint8_t *)fb), drawBuffer((uint8_t *)db) {
     452:	e9c0 5503 	strd	r5, r5, [r0, #12]
		numled(num), pin(pin), config(cfg),
     456:	8042      	strh	r2, [r0, #2]
            pserial->begin();
     458:	f00a f918 	bl	a68c <WS2812Serial::begin()>
     45c:	e779      	b.n	352 <CWS2812SerialController<17, (EOrder)129>::showPixels(PixelController<(EOrder)129, 8, 255ul>&)+0xe>
					*bp++ = ((n >> 16) * magnitude) >> 16;
				} else if (ph < 0xFFFFFFFF - halfwidth) {
					n = 0x7FFFFFFF - (((ph - halfwidth) >> 16) * fall);
					*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
				} else {
					n = ((ph + halfwidth) >> 16) * rise + 0x80000000;
     45e:	bf00      	nop

00000460 <buttonCallbackFunction(void*)>:
  if (s == (char*)"a") buttons[1] = 9;
     460:	4b3a      	ldr	r3, [pc, #232]	; (54c <buttonCallbackFunction(void*)+0xec>)
     462:	4298      	cmp	r0, r3
void buttonCallbackFunction(void* s) {
     464:	b410      	push	{r4}
  if (s == (char*)"a") buttons[1] = 9;
     466:	d044      	beq.n	4f2 <buttonCallbackFunction(void*)+0x92>
  if (s == (char*)"1") buttons[1] = 1;
     468:	4b39      	ldr	r3, [pc, #228]	; (550 <buttonCallbackFunction(void*)+0xf0>)
     46a:	4298      	cmp	r0, r3
     46c:	d021      	beq.n	4b2 <buttonCallbackFunction(void*)+0x52>
  if (s == (char*)"2") buttons[1] = 2;
     46e:	4b39      	ldr	r3, [pc, #228]	; (554 <buttonCallbackFunction(void*)+0xf4>)
     470:	4298      	cmp	r0, r3
     472:	d142      	bne.n	4fa <buttonCallbackFunction(void*)+0x9a>
     474:	4b38      	ldr	r3, [pc, #224]	; (558 <buttonCallbackFunction(void*)+0xf8>)
     476:	2202      	movs	r2, #2
     478:	605a      	str	r2, [r3, #4]
  if (s == (char*)"4") buttons[2] = 1;
     47a:	4a38      	ldr	r2, [pc, #224]	; (55c <buttonCallbackFunction(void*)+0xfc>)
     47c:	4290      	cmp	r0, r2
     47e:	d142      	bne.n	506 <buttonCallbackFunction(void*)+0xa6>
     480:	2201      	movs	r2, #1
     482:	609a      	str	r2, [r3, #8]
  if (s == (char*)"8") buttons[3] = 2;
     484:	4a36      	ldr	r2, [pc, #216]	; (560 <buttonCallbackFunction(void*)+0x100>)
     486:	4290      	cmp	r0, r2
     488:	d142      	bne.n	510 <buttonCallbackFunction(void*)+0xb0>
     48a:	2202      	movs	r2, #2
     48c:	60da      	str	r2, [r3, #12]
  if (memcmp(buttons, oldButtons, sizeof(buttons)) != 0) {
     48e:	4c35      	ldr	r4, [pc, #212]	; (564 <buttonCallbackFunction(void*)+0x104>)
     490:	6819      	ldr	r1, [r3, #0]
     492:	6822      	ldr	r2, [r4, #0]
     494:	4291      	cmp	r1, r2
     496:	d01e      	beq.n	4d6 <buttonCallbackFunction(void*)+0x76>
    memcpy(oldButtons, buttons, sizeof(buttons));  // Update oldButtons
     498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     49a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
     49e:	4a32      	ldr	r2, [pc, #200]	; (568 <buttonCallbackFunction(void*)+0x108>)
    lastButtonPressTime = millis();
     4a0:	4932      	ldr	r1, [pc, #200]	; (56c <buttonCallbackFunction(void*)+0x10c>)
     4a2:	6810      	ldr	r0, [r2, #0]
    resetTimerActive = true;
     4a4:	2201      	movs	r2, #1
     4a6:	4b32      	ldr	r3, [pc, #200]	; (570 <buttonCallbackFunction(void*)+0x110>)
    lastButtonPressTime = millis();
     4a8:	6008      	str	r0, [r1, #0]
    resetTimerActive = true;
     4aa:	701a      	strb	r2, [r3, #0]
}
     4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
     4b0:	4770      	bx	lr
  if (s == (char*)"1") buttons[1] = 1;
     4b2:	4b29      	ldr	r3, [pc, #164]	; (558 <buttonCallbackFunction(void*)+0xf8>)
     4b4:	2201      	movs	r2, #1
     4b6:	605a      	str	r2, [r3, #4]
  if (s == (char*)"b") buttons[2] = 9;
     4b8:	4a2e      	ldr	r2, [pc, #184]	; (574 <buttonCallbackFunction(void*)+0x114>)
     4ba:	4290      	cmp	r0, r2
     4bc:	d1dd      	bne.n	47a <buttonCallbackFunction(void*)+0x1a>
     4be:	2209      	movs	r2, #9
     4c0:	609a      	str	r2, [r3, #8]
  if (s == (char*)"7") buttons[3] = 1;
     4c2:	4a2d      	ldr	r2, [pc, #180]	; (578 <buttonCallbackFunction(void*)+0x118>)
     4c4:	4290      	cmp	r0, r2
     4c6:	d1dd      	bne.n	484 <buttonCallbackFunction(void*)+0x24>
     4c8:	2201      	movs	r2, #1
  if (memcmp(buttons, oldButtons, sizeof(buttons)) != 0) {
     4ca:	4c26      	ldr	r4, [pc, #152]	; (564 <buttonCallbackFunction(void*)+0x104>)
     4cc:	6819      	ldr	r1, [r3, #0]
  if (s == (char*)"7") buttons[3] = 1;
     4ce:	60da      	str	r2, [r3, #12]
  if (memcmp(buttons, oldButtons, sizeof(buttons)) != 0) {
     4d0:	6822      	ldr	r2, [r4, #0]
     4d2:	4291      	cmp	r1, r2
     4d4:	d1e0      	bne.n	498 <buttonCallbackFunction(void*)+0x38>
     4d6:	6859      	ldr	r1, [r3, #4]
     4d8:	6862      	ldr	r2, [r4, #4]
     4da:	4291      	cmp	r1, r2
     4dc:	d1dc      	bne.n	498 <buttonCallbackFunction(void*)+0x38>
     4de:	4a27      	ldr	r2, [pc, #156]	; (57c <buttonCallbackFunction(void*)+0x11c>)
     4e0:	68a1      	ldr	r1, [r4, #8]
     4e2:	6810      	ldr	r0, [r2, #0]
     4e4:	4288      	cmp	r0, r1
     4e6:	d1d7      	bne.n	498 <buttonCallbackFunction(void*)+0x38>
     4e8:	6851      	ldr	r1, [r2, #4]
     4ea:	68e2      	ldr	r2, [r4, #12]
     4ec:	4291      	cmp	r1, r2
     4ee:	d1d3      	bne.n	498 <buttonCallbackFunction(void*)+0x38>
     4f0:	e7dc      	b.n	4ac <buttonCallbackFunction(void*)+0x4c>
  if (s == (char*)"a") buttons[1] = 9;
     4f2:	4b19      	ldr	r3, [pc, #100]	; (558 <buttonCallbackFunction(void*)+0xf8>)
     4f4:	2209      	movs	r2, #9
     4f6:	605a      	str	r2, [r3, #4]
  if (s == (char*)"3") buttons[1] = 3;
     4f8:	e7de      	b.n	4b8 <buttonCallbackFunction(void*)+0x58>
  if (s == (char*)"y") buttons[1] = 5;
     4fa:	4b21      	ldr	r3, [pc, #132]	; (580 <buttonCallbackFunction(void*)+0x120>)
     4fc:	4298      	cmp	r0, r3
     4fe:	d118      	bne.n	532 <buttonCallbackFunction(void*)+0xd2>
     500:	4b15      	ldr	r3, [pc, #84]	; (558 <buttonCallbackFunction(void*)+0xf8>)
     502:	2205      	movs	r2, #5
     504:	605a      	str	r2, [r3, #4]
  if (s == (char*)"5") buttons[2] = 2;
     506:	4a1f      	ldr	r2, [pc, #124]	; (584 <buttonCallbackFunction(void*)+0x124>)
     508:	4290      	cmp	r0, r2
     50a:	d107      	bne.n	51c <buttonCallbackFunction(void*)+0xbc>
     50c:	2202      	movs	r2, #2
     50e:	609a      	str	r2, [r3, #8]
  if (s == (char*)"x") buttons[3] = 5;
     510:	4a1d      	ldr	r2, [pc, #116]	; (588 <buttonCallbackFunction(void*)+0x128>)
     512:	4290      	cmp	r0, r2
     514:	d107      	bne.n	526 <buttonCallbackFunction(void*)+0xc6>
     516:	2205      	movs	r2, #5
     518:	60da      	str	r2, [r3, #12]
  if (s == (char*)"9") buttons[3] = 3;
     51a:	e7b8      	b.n	48e <buttonCallbackFunction(void*)+0x2e>
  if (s == (char*)"6") buttons[2] = 3;
     51c:	4a1b      	ldr	r2, [pc, #108]	; (58c <buttonCallbackFunction(void*)+0x12c>)
     51e:	4290      	cmp	r0, r2
     520:	d10d      	bne.n	53e <buttonCallbackFunction(void*)+0xde>
     522:	2203      	movs	r2, #3
     524:	609a      	str	r2, [r3, #8]
  if (s == (char*)"9") buttons[3] = 3;
     526:	4a1a      	ldr	r2, [pc, #104]	; (590 <buttonCallbackFunction(void*)+0x130>)
     528:	4290      	cmp	r0, r2
     52a:	d1b0      	bne.n	48e <buttonCallbackFunction(void*)+0x2e>
     52c:	2203      	movs	r2, #3
     52e:	60da      	str	r2, [r3, #12]
     530:	e7ad      	b.n	48e <buttonCallbackFunction(void*)+0x2e>
  if (s == (char*)"3") buttons[1] = 3;
     532:	4b18      	ldr	r3, [pc, #96]	; (594 <buttonCallbackFunction(void*)+0x134>)
     534:	4298      	cmp	r0, r3
     536:	4b08      	ldr	r3, [pc, #32]	; (558 <buttonCallbackFunction(void*)+0xf8>)
     538:	d1be      	bne.n	4b8 <buttonCallbackFunction(void*)+0x58>
     53a:	2203      	movs	r2, #3
     53c:	605a      	str	r2, [r3, #4]
  if (s == (char*)"c") buttons[3] = 9;
     53e:	4a16      	ldr	r2, [pc, #88]	; (598 <buttonCallbackFunction(void*)+0x138>)
     540:	4290      	cmp	r0, r2
     542:	d1be      	bne.n	4c2 <buttonCallbackFunction(void*)+0x62>
     544:	2209      	movs	r2, #9
     546:	60da      	str	r2, [r3, #12]
  if (s == (char*)"9") buttons[3] = 3;
     548:	e7a1      	b.n	48e <buttonCallbackFunction(void*)+0x2e>
     54a:	bf00      	nop
     54c:	20000a00 	.word	0x20000a00
     550:	20000a04 	.word	0x20000a04
     554:	20003050 	.word	0x20003050
     558:	200067bc 	.word	0x200067bc
     55c:	2000305c 	.word	0x2000305c
     560:	20002ffc 	.word	0x20002ffc
     564:	2000b668 	.word	0x2000b668
     568:	2000bc24 	.word	0x2000bc24
     56c:	20006be8 	.word	0x20006be8
     570:	2000c955 	.word	0x2000c955
     574:	20000a10 	.word	0x20000a10
     578:	20000a1c 	.word	0x20000a1c
     57c:	200067c4 	.word	0x200067c4
     580:	20000a08 	.word	0x20000a08
     584:	20000a14 	.word	0x20000a14
     588:	20002468 	.word	0x20002468
     58c:	20000a18 	.word	0x20000a18
     590:	20000a20 	.word	0x20000a20
     594:	20000a0c 	.word	0x20000a0c
     598:	20001800 	.word	0x20001800

0000059c <IntervalTimer::~IntervalTimer()>:
	~IntervalTimer() {
     59c:	b510      	push	{r4, lr}
     59e:	4604      	mov	r4, r0
		end();
     5a0:	f014 ff9a 	bl	154d8 <IntervalTimer::end()>
	}
     5a4:	4620      	mov	r0, r4
     5a6:	bd10      	pop	{r4, pc}

000005a8 <SDFile::name()>:
	virtual const char * name() {
     5a8:	b510      	push	{r4, lr}
     5aa:	4604      	mov	r4, r0
		if (!filename) {
     5ac:	6d80      	ldr	r0, [r0, #88]	; 0x58
     5ae:	b100      	cbz	r0, 5b2 <SDFile::name()+0xa>
				static char zeroterm = 0;
				filename = &zeroterm;
			}
		}
		return filename;
	}
     5b0:	bd10      	pop	{r4, pc}
			filename = (char *)malloc(MAX_FILENAME_LEN);
     5b2:	f44f 7080 	mov.w	r0, #256	; 0x100
     5b6:	f020 fdd3 	bl	21160 <malloc>
     5ba:	65a0      	str	r0, [r4, #88]	; 0x58
			if (filename) {
     5bc:	b1b0      	cbz	r0, 5ec <SDFile::name()+0x44>
    *name = 0;
     5be:	2200      	movs	r2, #0
    return m_fFile ? m_fFile->getName(name, len) :
     5c0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    *name = 0;
     5c2:	7002      	strb	r2, [r0, #0]
    return m_fFile ? m_fFile->getName(name, len) :
     5c4:	b13b      	cbz	r3, 5d6 <SDFile::name()+0x2e>
     5c6:	4601      	mov	r1, r0
     5c8:	f44f 7280 	mov.w	r2, #256	; 0x100
     5cc:	4618      	mov	r0, r3
     5ce:	f010 ff33 	bl	11438 <FatFile::getName(char*, unsigned int)>
		return filename;
     5d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     5d4:	bd10      	pop	{r4, pc}
     5d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
           m_xFile ? m_xFile->getName(name, len) : 0;
     5d8:	2b00      	cmp	r3, #0
     5da:	d0e9      	beq.n	5b0 <SDFile::name()+0x8>
   * \param[in] size The size of the array in characters.
   * \return the name length.
   */
  size_t getName(char* name, size_t size) {
#if USE_UTF8_LONG_NAMES
    return getName8(name, size);
     5dc:	4601      	mov	r1, r0
     5de:	f44f 7280 	mov.w	r2, #256	; 0x100
     5e2:	4618      	mov	r0, r3
     5e4:	f00e fbd6 	bl	ed94 <ExFatFile::getName8(char*, unsigned int)>
		return filename;
     5e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
	}
     5ea:	bd10      	pop	{r4, pc}
				filename = &zeroterm;
     5ec:	4b01      	ldr	r3, [pc, #4]	; (5f4 <SDFile::name()+0x4c>)
     5ee:	4618      	mov	r0, r3
     5f0:	65a3      	str	r3, [r4, #88]	; 0x58
	}
     5f2:	bd10      	pop	{r4, pc}
     5f4:	2000c94d 	.word	0x2000c94d

000005f8 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     5f8:	b500      	push	{lr}
   *
   * \return For success write() returns the number of bytes written, always
   * \a nbyte.  If an error occurs, write() returns zero and writeError is set.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
     5fa:	6c83      	ldr	r3, [r0, #72]	; 0x48
     5fc:	b083      	sub	sp, #12
     5fe:	f88d 1007 	strb.w	r1, [sp, #7]
     602:	b143      	cbz	r3, 616 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x1e>
     604:	2201      	movs	r2, #1
     606:	f10d 0107 	add.w	r1, sp, #7
     60a:	4618      	mov	r0, r3
     60c:	f00f fe2c 	bl	10268 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     610:	b003      	add	sp, #12
     612:	f85d fb04 	ldr.w	pc, [sp], #4
     616:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     618:	2800      	cmp	r0, #0
     61a:	d0f9      	beq.n	610 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)+0x18>
     61c:	2201      	movs	r2, #1
     61e:	f10d 0107 	add.w	r1, sp, #7
     622:	f00d fef5 	bl	e410 <ExFatFile::write(void const*, unsigned int)>
     626:	b003      	add	sp, #12
     628:	f85d fb04 	ldr.w	pc, [sp], #4

0000062c <SDFile::truncate(unsigned long long)>:
	virtual bool truncate(uint64_t size=0) {
     62c:	b538      	push	{r3, r4, r5, lr}
    return m_fFile ? length < (1ULL << 32) && m_fFile->truncate(length) :
     62e:	6d05      	ldr	r5, [r0, #80]	; 0x50
     630:	b16d      	cbz	r5, 64e <SDFile::truncate(unsigned long long)+0x22>
     632:	b10b      	cbz	r3, 638 <SDFile::truncate(unsigned long long)+0xc>
	}
     634:	2000      	movs	r0, #0
     636:	bd38      	pop	{r3, r4, r5, pc}
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint32_t length) {
    return seekSet(length) && truncate();
     638:	4611      	mov	r1, r2
     63a:	4628      	mov	r0, r5
     63c:	f00f fc38 	bl	feb0 <FatFile::seekSet(unsigned long)>
     640:	2800      	cmp	r0, #0
     642:	d0f7      	beq.n	634 <SDFile::truncate(unsigned long long)+0x8>
     644:	4628      	mov	r0, r5
     646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     64a:	f00f bdd3 	b.w	101f4 <FatFile::truncate()>
     64e:	6d44      	ldr	r4, [r0, #84]	; 0x54
           m_xFile ? m_xFile->truncate(length) : false;
     650:	2c00      	cmp	r4, #0
     652:	d0ef      	beq.n	634 <SDFile::truncate(unsigned long long)+0x8>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
     654:	4620      	mov	r0, r4
     656:	f00c ffef 	bl	d638 <ExFatFile::seekSet(unsigned long long)>
     65a:	2800      	cmp	r0, #0
     65c:	d0ea      	beq.n	634 <SDFile::truncate(unsigned long long)+0x8>
     65e:	4620      	mov	r0, r4
     660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     664:	f00d be62 	b.w	e32c <ExFatFile::truncate()>

00000668 <SDFile::setCreateTime(DateTimeFields const&)>:
		tm.mon = FS_MONTH(fat_date) - 1;
		tm.year = FS_YEAR(fat_date) - 1900;
		return true;
	}
	virtual bool setCreateTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     668:	798a      	ldrb	r2, [r1, #6]
     66a:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     66e:	061b      	lsls	r3, r3, #24
     670:	d422      	bmi.n	6b8 <SDFile::setCreateTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     672:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setCreateTime(const DateTimeFields &tm) {
     676:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     678:	794b      	ldrb	r3, [r1, #5]
	virtual bool setCreateTime(const DateTimeFields &tm) {
     67a:	b085      	sub	sp, #20
    return m_fFile ?
     67c:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     67e:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     680:	790d      	ldrb	r5, [r1, #4]
     682:	788e      	ldrb	r6, [r1, #2]
     684:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_CREATE, tm.year + 1900, tm.mon + 1,
     686:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     688:	7809      	ldrb	r1, [r1, #0]
     68a:	b14c      	cbz	r4, 6a0 <SDFile::setCreateTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     68c:	4620      	mov	r0, r4
     68e:	9601      	str	r6, [sp, #4]
     690:	9500      	str	r5, [sp, #0]
     692:	e9cd 7102 	strd	r7, r1, [sp, #8]
     696:	2102      	movs	r1, #2
     698:	f00f fd40 	bl	1011c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     69c:	b005      	add	sp, #20
     69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a0:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     6a2:	2800      	cmp	r0, #0
     6a4:	d0fa      	beq.n	69c <SDFile::setCreateTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     6a6:	9601      	str	r6, [sp, #4]
     6a8:	9500      	str	r5, [sp, #0]
     6aa:	e9cd 7102 	strd	r7, r1, [sp, #8]
     6ae:	2102      	movs	r1, #2
     6b0:	f00d fd80 	bl	e1b4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     6b4:	b005      	add	sp, #20
     6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     6b8:	2000      	movs	r0, #0
	}
     6ba:	4770      	bx	lr

000006bc <StreamFile<FsBaseFile, unsigned long long>::flush()>:
    return m_fFile ? m_fFile->sync() :
     6bc:	6c83      	ldr	r3, [r0, #72]	; 0x48
     6be:	b113      	cbz	r3, 6c6 <StreamFile<FsBaseFile, unsigned long long>::flush()+0xa>
     6c0:	4618      	mov	r0, r3
     6c2:	f00f bd25 	b.w	10110 <FatFile::sync()>
     6c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->sync() : false;
     6c8:	b108      	cbz	r0, 6ce <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     6ca:	f00d bbfd 	b.w	dec8 <ExFatFile::sync()>
  }
     6ce:	4770      	bx	lr

000006d0 <StreamFile<FsBaseFile, unsigned long long>::read()>:
    return m_fFile ? m_fFile->read(buf, count) :
     6d0:	6c83      	ldr	r3, [r0, #72]	; 0x48
  int read() {
     6d2:	b500      	push	{lr}
     6d4:	b083      	sub	sp, #12
     6d6:	b163      	cbz	r3, 6f2 <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     6d8:	2201      	movs	r2, #1
     6da:	f10d 0107 	add.w	r1, sp, #7
     6de:	4618      	mov	r0, r3
     6e0:	f00f f99e 	bl	fa20 <FatFile::read(void*, unsigned int)>
    return read(&b, 1) == 1 ? b : -1;
     6e4:	2801      	cmp	r0, #1
     6e6:	d10c      	bne.n	702 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
  }
     6ec:	b003      	add	sp, #12
     6ee:	f85d fb04 	ldr.w	pc, [sp], #4
     6f2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->read(buf, count) : -1;
     6f4:	b128      	cbz	r0, 702 <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     6f6:	2201      	movs	r2, #1
     6f8:	f10d 0107 	add.w	r1, sp, #7
     6fc:	f00c feb6 	bl	d46c <ExFatFile::read(void*, unsigned int)>
     700:	e7f0      	b.n	6e4 <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
    return read(&b, 1) == 1 ? b : -1;
     702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     706:	e7f1      	b.n	6ec <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000708 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
    return m_fFile ? m_fFile->peek() :
     708:	6c83      	ldr	r3, [r0, #72]	; 0x48
     70a:	b113      	cbz	r3, 712 <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     70c:	4618      	mov	r0, r3
     70e:	f00f ba5b 	b.w	fbc8 <FatFile::peek()>
     712:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->peek() : -1;
     714:	b108      	cbz	r0, 71a <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     716:	f00c bf79 	b.w	d60c <ExFatFile::peek()>
  }
     71a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     71e:	4770      	bx	lr

00000720 <SDFile::rewindDirectory()>:
	virtual void rewindDirectory(void) {
     720:	b510      	push	{r4, lr}
     722:	4604      	mov	r4, r0
    return m_fFile ? m_fFile->isDir() :
     724:	6d00      	ldr	r0, [r0, #80]	; 0x50
     726:	b180      	cbz	r0, 74a <SDFile::rewindDirectory()+0x2a>
    if (BaseFile::isDir()) {
     728:	7803      	ldrb	r3, [r0, #0]
     72a:	f013 0f70 	tst.w	r3, #112	; 0x70
     72e:	d100      	bne.n	732 <SDFile::rewindDirectory()+0x12>
	}
     730:	bd10      	pop	{r4, pc}
    seekSet(0);
     732:	2100      	movs	r1, #0
     734:	f00f fbbc 	bl	feb0 <FatFile::seekSet(unsigned long)>
    if (m_xFile) m_xFile->rewind();
     738:	6d60      	ldr	r0, [r4, #84]	; 0x54
     73a:	2800      	cmp	r0, #0
     73c:	d0f8      	beq.n	730 <SDFile::rewindDirectory()+0x10>
    seekSet(0);
     73e:	2200      	movs	r2, #0
     740:	2300      	movs	r3, #0
     742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     746:	f00c bf77 	b.w	d638 <ExFatFile::seekSet(unsigned long long)>
     74a:	6d60      	ldr	r0, [r4, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     74c:	2800      	cmp	r0, #0
     74e:	d0ef      	beq.n	730 <SDFile::rewindDirectory()+0x10>
     750:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     754:	f013 0f50 	tst.w	r3, #80	; 0x50
     758:	d0ea      	beq.n	730 <SDFile::rewindDirectory()+0x10>
     75a:	2200      	movs	r2, #0
     75c:	2300      	movs	r3, #0
     75e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     762:	f00c bf69 	b.w	d638 <ExFatFile::seekSet(unsigned long long)>
     766:	bf00      	nop

00000768 <SDFile::getModifyTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getModifyDateTime(pdate, ptime) :
     768:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getModifyTime(DateTimeFields &tm) {
     76a:	b510      	push	{r4, lr}
     76c:	460c      	mov	r4, r1
     76e:	b082      	sub	sp, #8
     770:	b32b      	cbz	r3, 7be <SDFile::getModifyTime(DateTimeFields&)+0x56>
     772:	f10d 0206 	add.w	r2, sp, #6
     776:	a901      	add	r1, sp, #4
     778:	4618      	mov	r0, r3
     77a:	f00e ff3f 	bl	f5fc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     77e:	b338      	cbz	r0, 7d0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     780:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     784:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     788:	ea53 0102 	orrs.w	r1, r3, r2
     78c:	d020      	beq.n	7d0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted minute [0,59]
 */
static inline uint8_t FS_MINUTE(uint16_t fatTime) {
  return (fatTime >> 5) & 0X3F;
     78e:	f3c2 1c45 	ubfx	ip, r2, #5, #6
 * \param[in] fatTime Time in packed dir format.
 *
 * \return Extracted second [0,58]
 */
static inline uint8_t FS_SECOND(uint16_t fatTime) {
  return 2*(fatTime & 0X1F);
     792:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     796:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     798:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     79c:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     79e:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     7a2:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     7a4:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     7a6:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     7a8:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     7ac:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     7b0:	7020      	strb	r0, [r4, #0]
		return true;
     7b2:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     7b4:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     7b6:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     7b8:	71a2      	strb	r2, [r4, #6]
	}
     7ba:	b002      	add	sp, #8
     7bc:	bd10      	pop	{r4, pc}
     7be:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getModifyDateTime(pdate, ptime) : false;
     7c0:	b130      	cbz	r0, 7d0 <SDFile::getModifyTime(DateTimeFields&)+0x68>
     7c2:	f10d 0206 	add.w	r2, sp, #6
     7c6:	a901      	add	r1, sp, #4
     7c8:	f00c fddc 	bl	d384 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>
     7cc:	2800      	cmp	r0, #0
     7ce:	d1d7      	bne.n	780 <SDFile::getModifyTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getModifyDateTime(&fat_date, &fat_time)) return false;
     7d0:	2000      	movs	r0, #0
	}
     7d2:	b002      	add	sp, #8
     7d4:	bd10      	pop	{r4, pc}
     7d6:	bf00      	nop

000007d8 <SDFile::getCreateTime(DateTimeFields&)>:
    return m_fFile ? m_fFile->getCreateDateTime(pdate, ptime) :
     7d8:	6d03      	ldr	r3, [r0, #80]	; 0x50
	virtual bool getCreateTime(DateTimeFields &tm) {
     7da:	b510      	push	{r4, lr}
     7dc:	460c      	mov	r4, r1
     7de:	b082      	sub	sp, #8
     7e0:	b32b      	cbz	r3, 82e <SDFile::getCreateTime(DateTimeFields&)+0x56>
     7e2:	f10d 0206 	add.w	r2, sp, #6
     7e6:	a901      	add	r1, sp, #4
     7e8:	4618      	mov	r0, r3
     7ea:	f00e fef7 	bl	f5dc <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     7ee:	b338      	cbz	r0, 840 <SDFile::getCreateTime(DateTimeFields&)+0x68>
		if ((fat_date == 0) && (fat_time == 0)) return false;
     7f0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
     7f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     7f8:	ea53 0102 	orrs.w	r1, r3, r2
     7fc:	d020      	beq.n	840 <SDFile::getCreateTime(DateTimeFields&)+0x68>
  return (fatTime >> 5) & 0X3F;
     7fe:	f3c2 1c45 	ubfx	ip, r2, #5, #6
  return 2*(fatTime & 0X1F);
     802:	f002 001f 	and.w	r0, r2, #31
  return fatTime >> 11;
     806:	0ad2      	lsrs	r2, r2, #11
  return (fatDate >> 5) & 0XF;
     808:	f3c3 1143 	ubfx	r1, r3, #5, #4
  return 2*(fatTime & 0X1F);
     80c:	0040      	lsls	r0, r0, #1
		tm.min = FS_MINUTE(fat_time);
     80e:	f884 c001 	strb.w	ip, [r4, #1]
  return fatTime >> 11;
     812:	70a2      	strb	r2, [r4, #2]
  return 1980 + (fatDate >> 9);
     814:	0a5a      	lsrs	r2, r3, #9
		tm.mon = FS_MONTH(fat_date) - 1;
     816:	3901      	subs	r1, #1
  return fatDate & 0X1F;
     818:	f003 031f 	and.w	r3, r3, #31
		tm.year = FS_YEAR(fat_date) - 1900;
     81c:	f502 62ea 	add.w	r2, r2, #1872	; 0x750
		tm.sec = FS_SECOND(fat_time);
     820:	7020      	strb	r0, [r4, #0]
		return true;
     822:	2001      	movs	r0, #1
		tm.mon = FS_MONTH(fat_date) - 1;
     824:	7161      	strb	r1, [r4, #5]
		tm.mday = FS_DAY(fat_date);
     826:	7123      	strb	r3, [r4, #4]
		tm.year = FS_YEAR(fat_date) - 1900;
     828:	71a2      	strb	r2, [r4, #6]
	}
     82a:	b002      	add	sp, #8
     82c:	bd10      	pop	{r4, pc}
     82e:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->getCreateDateTime(pdate, ptime) : false;
     830:	b130      	cbz	r0, 840 <SDFile::getCreateTime(DateTimeFields&)+0x68>
     832:	f10d 0206 	add.w	r2, sp, #6
     836:	a901      	add	r1, sp, #4
     838:	f00c fd92 	bl	d360 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>
     83c:	2800      	cmp	r0, #0
     83e:	d1d7      	bne.n	7f0 <SDFile::getCreateTime(DateTimeFields&)+0x18>
		if (!sdfatfile.getCreateDateTime(&fat_date, &fat_time)) return false;
     840:	2000      	movs	r0, #0
	}
     842:	b002      	add	sp, #8
     844:	bd10      	pop	{r4, pc}
     846:	bf00      	nop

00000848 <SDFile::available()>:
    return m_fFile ? m_fFile->available() :
     848:	6d03      	ldr	r3, [r0, #80]	; 0x50
     84a:	b153      	cbz	r3, 862 <SDFile::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     84c:	7818      	ldrb	r0, [r3, #0]
     84e:	f010 0008 	ands.w	r0, r0, #8
     852:	d00d      	beq.n	870 <SDFile::available()+0x28>
     854:	69d8      	ldr	r0, [r3, #28]
     856:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     858:	1ac0      	subs	r0, r0, r3
     85a:	bf48      	it	mi
     85c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     860:	4770      	bx	lr
     862:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->available() : 0;
     864:	b1a3      	cbz	r3, 890 <SDFile::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     866:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     86a:	f010 0008 	ands.w	r0, r0, #8
     86e:	d100      	bne.n	872 <SDFile::available()+0x2a>
	}
     870:	4770      	bx	lr
     872:	6918      	ldr	r0, [r3, #16]
     874:	6819      	ldr	r1, [r3, #0]
     876:	695a      	ldr	r2, [r3, #20]
     878:	1a40      	subs	r0, r0, r1
     87a:	685b      	ldr	r3, [r3, #4]
     87c:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     880:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     884:	f173 0300 	sbcs.w	r3, r3, #0
     888:	d3f2      	bcc.n	870 <SDFile::available()+0x28>
     88a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     88e:	4770      	bx	lr
     890:	4618      	mov	r0, r3
		return sdfatfile.available();
     892:	e7ed      	b.n	870 <SDFile::available()+0x28>

00000894 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
     894:	2a01      	cmp	r2, #1
     896:	d102      	bne.n	89e <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
     898:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
     89a:	2000      	movs	r0, #0
     89c:	4770      	bx	lr
	  switch (__op)
     89e:	2a02      	cmp	r2, #2
     8a0:	d005      	beq.n	8ae <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x1a>
     8a2:	2a03      	cmp	r2, #3
     8a4:	d0f9      	beq.n	89a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>
     8a6:	2a00      	cmp	r2, #0
     8a8:	d1f7      	bne.n	89a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>
	      __dest._M_access<const type_info*>() = nullptr;
     8aa:	6002      	str	r2, [r0, #0]
	      break;
     8ac:	e7f5      	b.n	89a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
     8ae:	680b      	ldr	r3, [r1, #0]
     8b0:	6003      	str	r3, [r0, #0]
	  }
     8b2:	e7f2      	b.n	89a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)+0x6>

000008b4 <SDFile::position()>:
    return m_fFile ? m_fFile->curPosition() :
     8b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     8b6:	b113      	cbz	r3, 8be <SDFile::position()+0xa>
     8b8:	6958      	ldr	r0, [r3, #20]
     8ba:	2100      	movs	r1, #0
     8bc:	4770      	bx	lr
     8be:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     8c0:	b113      	cbz	r3, 8c8 <SDFile::position()+0x14>
  uint64_t curPosition() const {return m_curPosition;}
     8c2:	e9d3 0100 	ldrd	r0, r1, [r3]
     8c6:	4770      	bx	lr
     8c8:	4618      	mov	r0, r3
     8ca:	4619      	mov	r1, r3
	}
     8cc:	4770      	bx	lr
     8ce:	bf00      	nop

000008d0 <SDFile::size()>:
    return m_fFile ? m_fFile->fileSize() :
     8d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
     8d2:	b113      	cbz	r3, 8da <SDFile::size()+0xa>
     8d4:	69d8      	ldr	r0, [r3, #28]
     8d6:	2100      	movs	r1, #0
     8d8:	4770      	bx	lr
     8da:	6d43      	ldr	r3, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     8dc:	b113      	cbz	r3, 8e4 <SDFile::size()+0x14>
  uint64_t fileSize() const {return m_validLength;}
     8de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
     8e2:	4770      	bx	lr
     8e4:	4618      	mov	r0, r3
     8e6:	4619      	mov	r1, r3
	}
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <AudioPlayArrayResmp::~AudioPlayArrayResmp()>:
    {
        reader = new newdigate::ResamplingArrayReader();
        begin();
    }

    virtual ~AudioPlayArrayResmp() {
     8ec:	b510      	push	{r4, lr}
     8ee:	4b09      	ldr	r3, [pc, #36]	; (914 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x28>)
     8f0:	4604      	mov	r4, r0
        delete reader;
     8f2:	6980      	ldr	r0, [r0, #24]
    virtual ~AudioPlayArrayResmp() {
     8f4:	6023      	str	r3, [r4, #0]
        delete reader;
     8f6:	b138      	cbz	r0, 908 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x1c>
     8f8:	6803      	ldr	r3, [r0, #0]
     8fa:	4a07      	ldr	r2, [pc, #28]	; (918 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x2c>)
     8fc:	685b      	ldr	r3, [r3, #4]
     8fe:	4293      	cmp	r3, r2
     900:	d104      	bne.n	90c <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x20>
     902:	2168      	movs	r1, #104	; 0x68
     904:	f015 feec 	bl	166e0 <operator delete(void*, unsigned int)>
    }
     908:	4620      	mov	r0, r4
     90a:	bd10      	pop	{r4, pc}
        delete reader;
     90c:	4798      	blx	r3
    }
     90e:	4620      	mov	r0, r4
     910:	bd10      	pop	{r4, pc}
     912:	bf00      	nop
     914:	2000147c 	.word	0x2000147c
     918:	000002e5 	.word	0x000002e5

0000091c <SDFile::openNextFile(unsigned char)>:
	virtual File openNextFile(uint8_t mode=0) {
     91c:	b5f0      	push	{r4, r5, r6, r7, lr}
     91e:	b095      	sub	sp, #84	; 0x54
     920:	2200      	movs	r2, #0
     922:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     926:	4f24      	ldr	r7, [pc, #144]	; (9b8 <SDFile::openNextFile(unsigned char)+0x9c>)
   * \param[in] oflag open flags.
   * \return a FatStream object.
   */
  FsFile openNextFile(oflag_t oflag = O_RDONLY) {
    FsFile tmpFile;
    tmpFile.openNext(this, oflag);
     928:	3118      	adds	r1, #24
     92a:	4605      	mov	r5, r0
     92c:	a804      	add	r0, sp, #16
     92e:	f88d 200c 	strb.w	r2, [sp, #12]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     932:	9700      	str	r7, [sp, #0]
     934:	e9cd 2401 	strd	r2, r4, [sp, #4]
  FsBaseFile() {}
     938:	e9cd 2212 	strd	r2, r2, [sp, #72]	; 0x48
    tmpFile.openNext(this, oflag);
     93c:	f011 f998 	bl	11c70 <FsBaseFile::openNext(FsBaseFile*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
     940:	9b12      	ldr	r3, [sp, #72]	; 0x48
     942:	2b00      	cmp	r3, #0
     944:	d02d      	beq.n	9a2 <SDFile::openNextFile(unsigned char)+0x86>
		if (file) return File(new SDFile(file));
     946:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
     948:	2600      	movs	r6, #0
     94a:	f015 fec1 	bl	166d0 <operator new(unsigned int)>
class Print
     94e:	9b01      	ldr	r3, [sp, #4]
     950:	4604      	mov	r4, r0
     952:	6046      	str	r6, [r0, #4]
     954:	60c3      	str	r3, [r0, #12]
class StreamFile : public stream_t, public BaseFile {
     956:	a904      	add	r1, sp, #16
class Stream : public Print
     958:	9b02      	ldr	r3, [sp, #8]
     95a:	3018      	adds	r0, #24
     95c:	f840 3c08 	str.w	r3, [r0, #-8]
     960:	f89d 300c 	ldrb.w	r3, [sp, #12]
     964:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
     968:	4b14      	ldr	r3, [pc, #80]	; (9bc <SDFile::openNextFile(unsigned char)+0xa0>)
     96a:	f840 3c18 	str.w	r3, [r0, #-24]
     96e:	4b14      	ldr	r3, [pc, #80]	; (9c0 <SDFile::openNextFile(unsigned char)+0xa4>)
     970:	f840 3c10 	str.w	r3, [r0, #-16]
     974:	f011 f8ce 	bl	11b14 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
	File(FileImpl *file) {
     978:	4b12      	ldr	r3, [pc, #72]	; (9c4 <SDFile::openNextFile(unsigned char)+0xa8>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
     97a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     97e:	60a7      	str	r7, [r4, #8]
     980:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
     982:	6863      	ldr	r3, [r4, #4]
     984:	65a6      	str	r6, [r4, #88]	; 0x58
     986:	3301      	adds	r3, #1
	constexpr Print() : write_error(0) {}
     988:	606e      	str	r6, [r5, #4]
     98a:	732e      	strb	r6, [r5, #12]
     98c:	60aa      	str	r2, [r5, #8]
		f = file;
     98e:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
     990:	6063      	str	r3, [r4, #4]
     992:	4b0d      	ldr	r3, [pc, #52]	; (9c8 <SDFile::openNextFile(unsigned char)+0xac>)
  ~FsBaseFile() {close();}
     994:	a804      	add	r0, sp, #16
     996:	9300      	str	r3, [sp, #0]
     998:	f011 f8fe 	bl	11b98 <FsBaseFile::close()>
	}
     99c:	4628      	mov	r0, r5
     99e:	b015      	add	sp, #84	; 0x54
     9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     9a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
     9a4:	2b00      	cmp	r3, #0
     9a6:	d1ce      	bne.n	946 <SDFile::openNextFile(unsigned char)+0x2a>
	constexpr File() : f(nullptr) { }
     9a8:	4a06      	ldr	r2, [pc, #24]	; (9c4 <SDFile::openNextFile(unsigned char)+0xa8>)
     9aa:	732b      	strb	r3, [r5, #12]
     9ac:	602a      	str	r2, [r5, #0]
     9ae:	612b      	str	r3, [r5, #16]
     9b0:	e9c5 3401 	strd	r3, r4, [r5, #4]
     9b4:	e7ed      	b.n	992 <SDFile::openNextFile(unsigned char)+0x76>
     9b6:	bf00      	nop
     9b8:	20001500 	.word	0x20001500
     9bc:	20001524 	.word	0x20001524
     9c0:	20001580 	.word	0x20001580
     9c4:	200014d4 	.word	0x200014d4
     9c8:	20001378 	.word	0x20001378

000009cc <SDFile::peek()>:
    return m_fFile ? m_fFile->peek() :
     9cc:	6d03      	ldr	r3, [r0, #80]	; 0x50
     9ce:	b113      	cbz	r3, 9d6 <SDFile::peek()+0xa>
     9d0:	4618      	mov	r0, r3
     9d2:	f00f b8f9 	b.w	fbc8 <FatFile::peek()>
     9d6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->peek() : -1;
     9d8:	b108      	cbz	r0, 9de <SDFile::peek()+0x12>
     9da:	f00c be17 	b.w	d60c <ExFatFile::peek()>
	}
     9de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9e2:	4770      	bx	lr

000009e4 <SDFile::isDirectory()>:
    return m_fFile ? m_fFile->isDir() :
     9e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
     9e6:	b133      	cbz	r3, 9f6 <SDFile::isDirectory()+0x12>
  bool isDir() const {return m_attributes & FILE_ATTR_DIR;}
     9e8:	781b      	ldrb	r3, [r3, #0]
     9ea:	f013 0f70 	tst.w	r3, #112	; 0x70
     9ee:	bf14      	ite	ne
     9f0:	2001      	movne	r0, #1
     9f2:	2000      	moveq	r0, #0
     9f4:	4770      	bx	lr
     9f6:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->isDir() : false;
     9f8:	b130      	cbz	r0, a08 <SDFile::isDirectory()+0x24>
     9fa:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
     9fe:	f013 0f50 	tst.w	r3, #80	; 0x50
     a02:	bf14      	ite	ne
     a04:	2001      	movne	r0, #1
     a06:	2000      	moveq	r0, #0
	}
     a08:	4770      	bx	lr
     a0a:	bf00      	nop

00000a0c <SDFile::read(void*, unsigned int)>:
    return m_fFile ? m_fFile->read(buf, count) :
     a0c:	6d03      	ldr	r3, [r0, #80]	; 0x50
     a0e:	b113      	cbz	r3, a16 <SDFile::read(void*, unsigned int)+0xa>
     a10:	4618      	mov	r0, r3
     a12:	f00f b805 	b.w	fa20 <FatFile::read(void*, unsigned int)>
     a16:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->read(buf, count) : -1;
     a18:	b108      	cbz	r0, a1e <SDFile::read(void*, unsigned int)+0x12>
     a1a:	f00c bd27 	b.w	d46c <ExFatFile::read(void*, unsigned int)>
	}
     a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a22:	4770      	bx	lr

00000a24 <__tcf_1>:
AudioConnection          patchCord39(mix2, dac);

// GUItool: end automatically generated code


arraysampler _samplers[14];
     a24:	b538      	push	{r3, r4, r5, lr}
     a26:	4c10      	ldr	r4, [pc, #64]	; (a68 <__tcf_1+0x44>)
     a28:	f5a4 5582 	sub.w	r5, r4, #4160	; 0x1040
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      {
	_M_deallocate(_M_impl._M_start,
     a2c:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
     a30:	4618      	mov	r0, r3

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
     a32:	b123      	cbz	r3, a3e <__tcf_1+0x1a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
     a34:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
     a38:	1ac9      	subs	r1, r1, r3
     a3a:	f015 fe51 	bl	166e0 <operator delete(void*, unsigned int)>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     a3e:	f104 0110 	add.w	r1, r4, #16
      if (_M_manager)
     a42:	69a3      	ldr	r3, [r4, #24]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     a44:	2203      	movs	r2, #3
     a46:	4608      	mov	r0, r1
      if (_M_manager)
     a48:	b103      	cbz	r3, a4c <__tcf_1+0x28>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
     a4a:	4798      	blx	r3
	_M_deallocate(_M_impl._M_start,
     a4c:	6863      	ldr	r3, [r4, #4]
     a4e:	4618      	mov	r0, r3
	if (__p)
     a50:	b11b      	cbz	r3, a5a <__tcf_1+0x36>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
     a52:	68e1      	ldr	r1, [r4, #12]
     a54:	1ac9      	subs	r1, r1, r3
     a56:	f015 fe43 	bl	166e0 <operator delete(void*, unsigned int)>
     a5a:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
     a5e:	42ac      	cmp	r4, r5
     a60:	461c      	mov	r4, r3
     a62:	d1e3      	bne.n	a2c <__tcf_1+0x8>
     a64:	bd38      	pop	{r3, r4, r5, pc}
     a66:	bf00      	nop
     a68:	2000665c 	.word	0x2000665c

00000a6c <SDFile::flush()>:
    return m_fFile ? m_fFile->sync() :
     a6c:	6d03      	ldr	r3, [r0, #80]	; 0x50
     a6e:	b113      	cbz	r3, a76 <SDFile::flush()+0xa>
     a70:	4618      	mov	r0, r3
     a72:	f00f bb4d 	b.w	10110 <FatFile::sync()>
     a76:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->sync() : false;
     a78:	b108      	cbz	r0, a7e <SDFile::flush()+0x12>
     a7a:	f00d ba25 	b.w	dec8 <ExFatFile::sync()>
	}
     a7e:	4770      	bx	lr

00000a80 <AudioPlayArrayResmp::~AudioPlayArrayResmp()>:
    virtual ~AudioPlayArrayResmp() {
     a80:	b510      	push	{r4, lr}
     a82:	4b0d      	ldr	r3, [pc, #52]	; (ab8 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x38>)
     a84:	4604      	mov	r4, r0
        delete reader;
     a86:	6980      	ldr	r0, [r0, #24]
    virtual ~AudioPlayArrayResmp() {
     a88:	6023      	str	r3, [r4, #0]
        delete reader;
     a8a:	b138      	cbz	r0, a9c <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x1c>
     a8c:	6803      	ldr	r3, [r0, #0]
     a8e:	4a0b      	ldr	r2, [pc, #44]	; (abc <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x3c>)
     a90:	685b      	ldr	r3, [r3, #4]
     a92:	4293      	cmp	r3, r2
     a94:	d108      	bne.n	aa8 <AudioPlayArrayResmp::~AudioPlayArrayResmp()+0x28>
     a96:	2168      	movs	r1, #104	; 0x68
     a98:	f015 fe22 	bl	166e0 <operator delete(void*, unsigned int)>
    }
     a9c:	4620      	mov	r0, r4
     a9e:	211c      	movs	r1, #28
     aa0:	f015 fe1e 	bl	166e0 <operator delete(void*, unsigned int)>
     aa4:	4620      	mov	r0, r4
     aa6:	bd10      	pop	{r4, pc}
        delete reader;
     aa8:	4798      	blx	r3
    }
     aaa:	4620      	mov	r0, r4
     aac:	211c      	movs	r1, #28
     aae:	f015 fe17 	bl	166e0 <operator delete(void*, unsigned int)>
     ab2:	4620      	mov	r0, r4
     ab4:	bd10      	pop	{r4, pc}
     ab6:	bf00      	nop
     ab8:	2000147c 	.word	0x2000147c
     abc:	000002e5 	.word	0x000002e5

00000ac0 <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     ac0:	b538      	push	{r3, r4, r5, lr}
     ac2:	4604      	mov	r4, r0
     ac4:	4b0c      	ldr	r3, [pc, #48]	; (af8 <SDFile::~SDFile()+0x38>)
		if (filename) {
     ac6:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     ac8:	6023      	str	r3, [r4, #0]
		if (filename) {
     aca:	b118      	cbz	r0, ad4 <SDFile::~SDFile()+0x14>
			free(filename);
     acc:	f020 fb50 	bl	21170 <free>
			filename = nullptr;
     ad0:	2300      	movs	r3, #0
     ad2:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     ad4:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     ad6:	f104 0518 	add.w	r5, r4, #24
     ada:	b14b      	cbz	r3, af0 <SDFile::~SDFile()+0x30>
     adc:	4628      	mov	r0, r5
     ade:	f011 f85b 	bl	11b98 <FsBaseFile::close()>
     ae2:	4b06      	ldr	r3, [pc, #24]	; (afc <SDFile::~SDFile()+0x3c>)
  ~FsBaseFile() {close();}
     ae4:	4628      	mov	r0, r5
     ae6:	60a3      	str	r3, [r4, #8]
     ae8:	f011 f856 	bl	11b98 <FsBaseFile::close()>
	}
     aec:	4620      	mov	r0, r4
     aee:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     af0:	6d63      	ldr	r3, [r4, #84]	; 0x54
     af2:	2b00      	cmp	r3, #0
     af4:	d1f2      	bne.n	adc <SDFile::~SDFile()+0x1c>
     af6:	e7f4      	b.n	ae2 <SDFile::~SDFile()+0x22>
     af8:	20001524 	.word	0x20001524
     afc:	20001378 	.word	0x20001378

00000b00 <SDFile::write(void const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     b00:	6d03      	ldr	r3, [r0, #80]	; 0x50
     b02:	b113      	cbz	r3, b0a <SDFile::write(void const*, unsigned int)+0xa>
     b04:	4618      	mov	r0, r3
     b06:	f00f bbaf 	b.w	10268 <FatFile::write(void const*, unsigned int)>
     b0a:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->write(buf, count) : 0;
     b0c:	b108      	cbz	r0, b12 <SDFile::write(void const*, unsigned int)+0x12>
     b0e:	f00d bc7f 	b.w	e410 <ExFatFile::write(void const*, unsigned int)>
	}
     b12:	4770      	bx	lr

00000b14 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
    return m_fFile ? m_fFile->write(buf, count) :
     b14:	6c83      	ldr	r3, [r0, #72]	; 0x48
     b16:	b113      	cbz	r3, b1e <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0xa>
     b18:	4618      	mov	r0, r3
     b1a:	f00f bba5 	b.w	10268 <FatFile::write(void const*, unsigned int)>
     b1e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->write(buf, count) : 0;
     b20:	b108      	cbz	r0, b26 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     b22:	f00d bc75 	b.w	e410 <ExFatFile::write(void const*, unsigned int)>
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
    return BaseFile::write(buffer, size);
  }
     b26:	4770      	bx	lr

00000b28 <SDFile::setModifyTime(DateTimeFields const&)>:
	virtual bool setModifyTime(const DateTimeFields &tm) {
		if (tm.year < 80 || tm.year > 207) return false;
     b28:	798a      	ldrb	r2, [r1, #6]
     b2a:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
     b2e:	061b      	lsls	r3, r3, #24
     b30:	d422      	bmi.n	b78 <SDFile::setModifyTime(DateTimeFields const&)+0x50>
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     b32:	f202 726c 	addw	r2, r2, #1900	; 0x76c
	virtual bool setModifyTime(const DateTimeFields &tm) {
     b36:	b5f0      	push	{r4, r5, r6, r7, lr}
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     b38:	794b      	ldrb	r3, [r1, #5]
	virtual bool setModifyTime(const DateTimeFields &tm) {
     b3a:	b085      	sub	sp, #20
    return m_fFile ?
     b3c:	6d04      	ldr	r4, [r0, #80]	; 0x50
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     b3e:	3301      	adds	r3, #1
			tm.mday, tm.hour, tm.min, tm.sec);
     b40:	790d      	ldrb	r5, [r1, #4]
     b42:	788e      	ldrb	r6, [r1, #2]
     b44:	784f      	ldrb	r7, [r1, #1]
		return sdfatfile.timestamp(T_WRITE, tm.year + 1900, tm.mon + 1,
     b46:	b2db      	uxtb	r3, r3
			tm.mday, tm.hour, tm.min, tm.sec);
     b48:	7809      	ldrb	r1, [r1, #0]
     b4a:	b14c      	cbz	r4, b60 <SDFile::setModifyTime(DateTimeFields const&)+0x38>
           m_fFile->timestamp(flags, year, month, day, hour, minute, second) :
     b4c:	4620      	mov	r0, r4
     b4e:	9601      	str	r6, [sp, #4]
     b50:	9500      	str	r5, [sp, #0]
     b52:	e9cd 7102 	strd	r7, r1, [sp, #8]
     b56:	2104      	movs	r1, #4
     b58:	f00f fae0 	bl	1011c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
	}
     b5c:	b005      	add	sp, #20
     b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b60:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ?
     b62:	2800      	cmp	r0, #0
     b64:	d0fa      	beq.n	b5c <SDFile::setModifyTime(DateTimeFields const&)+0x34>
           m_xFile->timestamp(flags, year, month, day, hour, minute, second) :
     b66:	9601      	str	r6, [sp, #4]
     b68:	9500      	str	r5, [sp, #0]
     b6a:	e9cd 7102 	strd	r7, r1, [sp, #8]
     b6e:	2104      	movs	r1, #4
     b70:	f00d fb20 	bl	e1b4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     b74:	b005      	add	sp, #20
     b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (tm.year < 80 || tm.year > 207) return false;
     b78:	2000      	movs	r0, #0
	}
     b7a:	4770      	bx	lr

00000b7c <SDFile::~SDFile()>:
	virtual ~SDFile(void) {
     b7c:	b538      	push	{r3, r4, r5, lr}
     b7e:	4604      	mov	r4, r0
     b80:	4b0e      	ldr	r3, [pc, #56]	; (bbc <SDFile::~SDFile()+0x40>)
		if (filename) {
     b82:	6d80      	ldr	r0, [r0, #88]	; 0x58
	virtual ~SDFile(void) {
     b84:	6023      	str	r3, [r4, #0]
		if (filename) {
     b86:	b118      	cbz	r0, b90 <SDFile::~SDFile()+0x14>
			free(filename);
     b88:	f020 faf2 	bl	21170 <free>
			filename = nullptr;
     b8c:	2300      	movs	r3, #0
     b8e:	65a3      	str	r3, [r4, #88]	; 0x58
  bool isOpen() const {return m_fFile || m_xFile;}
     b90:	6d23      	ldr	r3, [r4, #80]	; 0x50
			sdfatfile.close();
     b92:	f104 0518 	add.w	r5, r4, #24
     b96:	b16b      	cbz	r3, bb4 <SDFile::~SDFile()+0x38>
     b98:	4628      	mov	r0, r5
     b9a:	f010 fffd 	bl	11b98 <FsBaseFile::close()>
class StreamFile : public stream_t, public BaseFile {
     b9e:	4b08      	ldr	r3, [pc, #32]	; (bc0 <SDFile::~SDFile()+0x44>)
  ~FsBaseFile() {close();}
     ba0:	4628      	mov	r0, r5
     ba2:	60a3      	str	r3, [r4, #8]
     ba4:	f010 fff8 	bl	11b98 <FsBaseFile::close()>
	}
     ba8:	4620      	mov	r0, r4
     baa:	215c      	movs	r1, #92	; 0x5c
     bac:	f015 fd98 	bl	166e0 <operator delete(void*, unsigned int)>
     bb0:	4620      	mov	r0, r4
     bb2:	bd38      	pop	{r3, r4, r5, pc}
  bool isOpen() const {return m_fFile || m_xFile;}
     bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
     bb6:	2b00      	cmp	r3, #0
     bb8:	d1ee      	bne.n	b98 <SDFile::~SDFile()+0x1c>
     bba:	e7f0      	b.n	b9e <SDFile::~SDFile()+0x22>
     bbc:	20001524 	.word	0x20001524
     bc0:	20001378 	.word	0x20001378

00000bc4 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)>:
    virtual void showColor(const struct CRGB & data, int nLeds, CRGB scale) {
     bc4:	b570      	push	{r4, r5, r6, lr}
     bc6:	4604      	mov	r4, r0
     bc8:	b090      	sub	sp, #64	; 0x40
     bca:	9301      	str	r3, [sp, #4]
    inline uint8_t getDither() { return m_DitherMode; }
     bcc:	7ca3      	ldrb	r3, [r4, #18]
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     bce:	f8bd c004 	ldrh.w	ip, [sp, #4]
     bd2:	f89d 0006 	ldrb.w	r0, [sp, #6]
            switch(dither) {
     bd6:	2b01      	cmp	r3, #1
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     bd8:	9204      	str	r2, [sp, #16]
     bda:	f8ad c01a 	strh.w	ip, [sp, #26]
     bde:	f88d 001c 	strb.w	r0, [sp, #28]
     be2:	e9cd 1202 	strd	r1, r2, [sp, #8]
            switch(dither) {
     be6:	d012      	beq.n	c0e <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x4a>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     be8:	2300      	movs	r3, #0
     bea:	9305      	str	r3, [sp, #20]
     bec:	f8ad 3018 	strh.w	r3, [sp, #24]
            mOffsets[i] = nOffset;
     bf0:	2220      	movs	r2, #32
            mAdvance = 0;
     bf2:	2100      	movs	r1, #0
            mOffsets[i] = nOffset;
     bf4:	eb0d 0002 	add.w	r0, sp, r2
            mAdvance = 0;
     bf8:	f88d 101d 	strb.w	r1, [sp, #29]
            mOffsets[i] = nOffset;
     bfc:	f021 fc70 	bl	224e0 <memset>
        showPixels(pixels);
     c00:	6823      	ldr	r3, [r4, #0]
     c02:	a902      	add	r1, sp, #8
     c04:	4620      	mov	r0, r4
     c06:	69db      	ldr	r3, [r3, #28]
     c08:	4798      	blx	r3
    }
     c0a:	b010      	add	sp, #64	; 0x40
     c0c:	bd70      	pop	{r4, r5, r6, pc}
            ++R;
     c0e:	4a1b      	ldr	r2, [pc, #108]	; (c7c <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb8>)
     c10:	f10d 0517 	add.w	r5, sp, #23
                    e[i] = s ? (256/s) + 1 : 0;
     c14:	f44f 7680 	mov.w	r6, #256	; 0x100
            ++R;
     c18:	7813      	ldrb	r3, [r2, #0]
     c1a:	3301      	adds	r3, #1
            R &= (0x01 << ditherBits) - 1;
     c1c:	f003 0307 	and.w	r3, r3, #7
     c20:	01d9      	lsls	r1, r3, #7
     c22:	7013      	strb	r3, [r2, #0]
                if(R & 0x02) { Q |= 0x40; }
     c24:	079a      	lsls	r2, r3, #30
     c26:	b2c9      	uxtb	r1, r1
     c28:	bf48      	it	mi
     c2a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
                if(R & 0x04) { Q |= 0x20; }
     c2e:	075b      	lsls	r3, r3, #29
     c30:	ab05      	add	r3, sp, #20
     c32:	bf48      	it	mi
     c34:	f041 0120 	orrmi.w	r1, r1, #32
                    uint8_t s = mScale.raw[i];
     c38:	799a      	ldrb	r2, [r3, #6]
                Q += 0x01 << (7 - ditherBits);
     c3a:	3110      	adds	r1, #16
     c3c:	b2c9      	uxtb	r1, r1
                    e[i] = s ? (256/s) + 1 : 0;
     c3e:	b1d2      	cbz	r2, c76 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xb2>
     c40:	fbb6 f2f2 	udiv	r2, r6, r2
     c44:	b2d2      	uxtb	r2, r2
     c46:	1c50      	adds	r0, r2, #1
     c48:	b2c0      	uxtb	r0, r0
     c4a:	fb00 1c01 	mla	ip, r0, r1, r1
     c4e:	70d8      	strb	r0, [r3, #3]
     c50:	f3cc 2e07 	ubfx	lr, ip, #8, #8
                    if(d[i]) (--d[i]);
     c54:	ea5f 2c2c 	movs.w	ip, ip, asr #8
     c58:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
                    d[i] = scale8(Q, e[i]);
     c5c:	bf0c      	ite	eq
     c5e:	f883 c000 	strbeq.w	ip, [r3]
                    if(d[i]) (--d[i]);
     c62:	f883 e000 	strbne.w	lr, [r3]
                    if(e[i]) --e[i];
     c66:	b100      	cbz	r0, c6a <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xa6>
     c68:	70da      	strb	r2, [r3, #3]
            for(int i = 0; i < 3; ++i) {
     c6a:	3301      	adds	r3, #1
     c6c:	429d      	cmp	r5, r3
     c6e:	d0bf      	beq.n	bf0 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x2c>
                    uint8_t s = mScale.raw[i];
     c70:	799a      	ldrb	r2, [r3, #6]
                    e[i] = s ? (256/s) + 1 : 0;
     c72:	2a00      	cmp	r2, #0
     c74:	d1e4      	bne.n	c40 <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0x7c>
     c76:	70da      	strb	r2, [r3, #3]
                    d[i] = scale8(Q, e[i]);
     c78:	701a      	strb	r2, [r3, #0]
     c7a:	e7f6      	b.n	c6a <CPixelLEDController<(EOrder)129, 8, 255ul>::showColor(CRGB const&, int, CRGB)+0xa6>
     c7c:	2000c94c 	.word	0x2000c94c

00000c80 <newdigate::ResamplingArrayReader::close()>:
    void close(void) override {
     c80:	b538      	push	{r3, r4, r5, lr}
        if (_playing) {
     c82:	7903      	ldrb	r3, [r0, #4]
     c84:	b1c3      	cbz	r3, cb8 <newdigate::ResamplingArrayReader::close()+0x38>
        return true;
    }

    void stop(void)
    {
        if (_playing) {   
     c86:	7903      	ldrb	r3, [r0, #4]
     c88:	4605      	mov	r5, r0
     c8a:	b9b3      	cbnz	r3, cba <newdigate::ResamplingArrayReader::close()+0x3a>
        _numInterpolationPointsChannels = _numChannels;
    }

    void deleteInterpolationPoints(void)
    {
        if (!_interpolationPoints) return;
     c8c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
     c8e:	b19b      	cbz	r3, cb8 <newdigate::ResamplingArrayReader::close()+0x38>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
     c90:	f8b5 204e 	ldrh.w	r2, [r5, #78]	; 0x4e
     c94:	b1a2      	cbz	r2, cc0 <newdigate::ResamplingArrayReader::close()+0x40>
     c96:	2400      	movs	r4, #0
            delete [] _interpolationPoints[i];
     c98:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
     c9c:	3401      	adds	r4, #1
            delete [] _interpolationPoints[i];
     c9e:	b120      	cbz	r0, caa <newdigate::ResamplingArrayReader::close()+0x2a>
     ca0:	f015 fd1c 	bl	166dc <operator delete[](void*)>
     ca4:	f8b5 204e 	ldrh.w	r2, [r5, #78]	; 0x4e
        }
        delete [] _interpolationPoints;
     ca8:	6e2b      	ldr	r3, [r5, #96]	; 0x60
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
     caa:	4294      	cmp	r4, r2
     cac:	dbf4      	blt.n	c98 <newdigate::ResamplingArrayReader::close()+0x18>
        delete [] _interpolationPoints;
     cae:	b93b      	cbnz	r3, cc0 <newdigate::ResamplingArrayReader::close()+0x40>
        _interpolationPoints = nullptr;
     cb0:	2300      	movs	r3, #0
     cb2:	662b      	str	r3, [r5, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
     cb4:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    }
     cb8:	bd38      	pop	{r3, r4, r5, pc}
            _playing = false;
     cba:	2300      	movs	r3, #0
     cbc:	7103      	strb	r3, [r0, #4]
     cbe:	e7e5      	b.n	c8c <newdigate::ResamplingArrayReader::close()+0xc>
        delete [] _interpolationPoints;
     cc0:	4618      	mov	r0, r3
     cc2:	f015 fd0b 	bl	166dc <operator delete[](void*)>
        _interpolationPoints = nullptr;
     cc6:	2300      	movs	r3, #0
     cc8:	662b      	str	r3, [r5, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
     cca:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
     cce:	e7f3      	b.n	cb8 <newdigate::ResamplingArrayReader::close()+0x38>

00000cd0 <StreamFile<FsBaseFile, unsigned long long>::available()>:
    return m_fFile ? m_fFile->available() :
     cd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
     cd2:	b153      	cbz	r3, cea <StreamFile<FsBaseFile, unsigned long long>::available()+0x1a>
    return isFile() ? fileSize() - curPosition() : 0;
     cd4:	7818      	ldrb	r0, [r3, #0]
     cd6:	f010 0008 	ands.w	r0, r0, #8
     cda:	d00d      	beq.n	cf8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     cdc:	69d8      	ldr	r0, [r3, #28]
     cde:	695b      	ldr	r3, [r3, #20]
    return n > INT_MAX ? INT_MAX : n;
     ce0:	1ac0      	subs	r0, r0, r3
     ce2:	bf48      	it	mi
     ce4:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
     ce8:	4770      	bx	lr
     cea:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
           m_xFile ? m_xFile->available() : 0;
     cec:	b1a3      	cbz	r3, d18 <StreamFile<FsBaseFile, unsigned long long>::available()+0x48>
    return isFile() ? fileSize() - curPosition() : 0;
     cee:	f893 0031 	ldrb.w	r0, [r3, #49]	; 0x31
     cf2:	f010 0008 	ands.w	r0, r0, #8
     cf6:	d100      	bne.n	cfa <StreamFile<FsBaseFile, unsigned long long>::available()+0x2a>
  }
     cf8:	4770      	bx	lr
     cfa:	6918      	ldr	r0, [r3, #16]
     cfc:	6819      	ldr	r1, [r3, #0]
     cfe:	695a      	ldr	r2, [r3, #20]
     d00:	1a40      	subs	r0, r0, r1
     d02:	685b      	ldr	r3, [r3, #4]
     d04:	eb62 0303 	sbc.w	r3, r2, r3
    return n > INT_MAX ? INT_MAX : n;
     d08:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
     d0c:	f173 0300 	sbcs.w	r3, r3, #0
     d10:	d3f2      	bcc.n	cf8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>
     d12:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
     d16:	4770      	bx	lr
     d18:	4618      	mov	r0, r3
    return BaseFile::available();
     d1a:	e7ed      	b.n	cf8 <StreamFile<FsBaseFile, unsigned long long>::available()+0x28>

00000d1c <handleNoteOff(unsigned char, unsigned char, unsigned char)>:
	// Discard all received data which has not been read.
        virtual void clear(void) { usb_serial_flush_input(); }
	// Transmit a single byte to your PC
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
	// Transmit a buffer containing any number of bytes to your PC
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     d1c:	210d      	movs	r1, #13
     d1e:	4801      	ldr	r0, [pc, #4]	; (d24 <handleNoteOff(unsigned char, unsigned char, unsigned char)+0x8>)
     d20:	f017 bbd8 	b.w	184d4 <usb_serial_write>
     d24:	20000994 	.word	0x20000994

00000d28 <handleSongPosition(unsigned int)>:
void handleSongPosition(unsigned int beats) {
     d28:	b538      	push	{r3, r4, r5, lr}
     d2a:	4604      	mov	r4, r0
	// Print an unsigned number
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	// Print a signed number
	size_t print(int n)				{ return print((long)n); }
	// Print an unsigned number
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     d2c:	4d07      	ldr	r5, [pc, #28]	; (d4c <handleSongPosition(unsigned int)+0x24>)
     d2e:	2120      	movs	r1, #32
     d30:	4807      	ldr	r0, [pc, #28]	; (d50 <handleSongPosition(unsigned int)+0x28>)
     d32:	f017 fbcf 	bl	184d4 <usb_serial_write>
     d36:	2300      	movs	r3, #0
     d38:	4621      	mov	r1, r4
     d3a:	4628      	mov	r0, r5
     d3c:	220a      	movs	r2, #10
     d3e:	f014 fcc3 	bl	156c8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	// Print an unsigned number and newline
	size_t println(uint8_t b)			{ return print(b) + println(); }
	// Print a signed number and newline
	size_t println(int n)				{ return print(n) + println(); }
	// Print an unsigned number and newline
	size_t println(unsigned int n)			{ return print(n) + println(); }
     d42:	4628      	mov	r0, r5
}
     d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     d48:	f014 bc94 	b.w	15674 <Print::println()>
     d4c:	20003314 	.word	0x20003314
     d50:	200009dc 	.word	0x200009dc

00000d54 <handleTimeCodeQuarterFrame()>:
void handleTimeCodeQuarterFrame() {
     d54:	b508      	push	{r3, lr}
     d56:	2122      	movs	r1, #34	; 0x22
     d58:	4803      	ldr	r0, [pc, #12]	; (d68 <handleTimeCodeQuarterFrame()+0x14>)
     d5a:	f017 fbbb 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     d5e:	4803      	ldr	r0, [pc, #12]	; (d6c <handleTimeCodeQuarterFrame()+0x18>)
}
     d60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     d64:	f014 bc86 	b.w	15674 <Print::println()>
     d68:	20000a24 	.word	0x20000a24
     d6c:	20003314 	.word	0x20003314

00000d70 <handleStart()>:
  waitForFourBars = true;
     d70:	4808      	ldr	r0, [pc, #32]	; (d94 <handleStart()+0x24>)
     d72:	f04f 0c01 	mov.w	ip, #1
  pulseCount = 0;  // Reset pulse count on start
     d76:	2200      	movs	r2, #0
     d78:	2113      	movs	r1, #19
void handleStart() {
     d7a:	b508      	push	{r3, lr}
  pulseCount = 0;  // Reset pulse count on start
     d7c:	4b06      	ldr	r3, [pc, #24]	; (d98 <handleStart()+0x28>)
  waitForFourBars = true;
     d7e:	f880 c000 	strb.w	ip, [r0]
     d82:	4806      	ldr	r0, [pc, #24]	; (d9c <handleStart()+0x2c>)
  pulseCount = 0;  // Reset pulse count on start
     d84:	601a      	str	r2, [r3, #0]
     d86:	f017 fba5 	bl	184d4 <usb_serial_write>
     d8a:	4805      	ldr	r0, [pc, #20]	; (da0 <handleStart()+0x30>)
}
     d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     d90:	f014 bc70 	b.w	15674 <Print::println()>
     d94:	2000c96b 	.word	0x2000c96b
     d98:	2000b998 	.word	0x2000b998
     d9c:	20000940 	.word	0x20000940
     da0:	20003314 	.word	0x20003314

00000da4 <CLEDController::clearLeds(int)>:
    virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     da4:	b570      	push	{r4, r5, r6, lr}
    }

    /// Allow construction from 32-bit (really 24-bit) bit 0xRRGGBB color code
    /// @param colorcode a packed 24 bit color code
    inline CRGB( uint32_t colorcode)  __attribute__((always_inline))
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
     da6:	2300      	movs	r3, #0
     da8:	b090      	sub	sp, #64	; 0x40
        showColor(data, nLeds, getAdjustment(brightness));
     daa:	6805      	ldr	r5, [r0, #0]
     dac:	4a34      	ldr	r2, [pc, #208]	; (e80 <CLEDController::clearLeds(int)+0xdc>)
     dae:	f8ad 3004 	strh.w	r3, [sp, #4]
     db2:	f88d 3006 	strb.w	r3, [sp, #6]
     db6:	682e      	ldr	r6, [r5, #0]
              return adj;
     db8:	4296      	cmp	r6, r2
     dba:	d11c      	bne.n	df6 <CLEDController::clearLeds(int)+0x52>
    inline uint8_t getDither() { return m_DitherMode; }
     dbc:	7c82      	ldrb	r2, [r0, #18]
     dbe:	4604      	mov	r4, r0
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     dc0:	f8ad 301a 	strh.w	r3, [sp, #26]
            switch(dither) {
     dc4:	2a01      	cmp	r2, #1
        PixelController(const CRGB &d, int len, CRGB & s, EDitherMode dither = BINARY_DITHER) : mData((const uint8_t*)&d), mLen(len), mLenRemaining(len), mScale(s) {
     dc6:	f88d 301c 	strb.w	r3, [sp, #28]
     dca:	e9cd 1103 	strd	r1, r1, [sp, #12]
     dce:	a901      	add	r1, sp, #4
     dd0:	9102      	str	r1, [sp, #8]
            switch(dither) {
     dd2:	d01a      	beq.n	e0a <CLEDController::clearLeds(int)+0x66>
                default: d[0]=d[1]=d[2]=e[0]=e[1]=e[2]=0; break;
     dd4:	9305      	str	r3, [sp, #20]
     dd6:	f8ad 3018 	strh.w	r3, [sp, #24]
            mOffsets[i] = nOffset;
     dda:	2220      	movs	r2, #32
            mAdvance = 0;
     ddc:	2100      	movs	r1, #0
            mOffsets[i] = nOffset;
     dde:	eb0d 0002 	add.w	r0, sp, r2
            mAdvance = 0;
     de2:	f88d 101d 	strb.w	r1, [sp, #29]
            mOffsets[i] = nOffset;
     de6:	f021 fb7b 	bl	224e0 <memset>
        showPixels(pixels);
     dea:	69eb      	ldr	r3, [r5, #28]
     dec:	a902      	add	r1, sp, #8
     dee:	4620      	mov	r0, r4
     df0:	4798      	blx	r3
    virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     df2:	b010      	add	sp, #64	; 0x40
     df4:	bd70      	pop	{r4, r5, r6, pc}
        showColor(data, nLeds, getAdjustment(brightness));
     df6:	f8ad 3008 	strh.w	r3, [sp, #8]
     dfa:	460a      	mov	r2, r1
     dfc:	f88d 300a 	strb.w	r3, [sp, #10]
     e00:	a901      	add	r1, sp, #4
     e02:	9b02      	ldr	r3, [sp, #8]
     e04:	47b0      	blx	r6
    virtual void clearLeds(int nLeds) { showColor(CRGB::Black, nLeds, CRGB::Black); }
     e06:	b010      	add	sp, #64	; 0x40
     e08:	bd70      	pop	{r4, r5, r6, pc}
            ++R;
     e0a:	4a1e      	ldr	r2, [pc, #120]	; (e84 <CLEDController::clearLeds(int)+0xe0>)
     e0c:	f10d 0c17 	add.w	ip, sp, #23
                    e[i] = s ? (256/s) + 1 : 0;
     e10:	f44f 7e80 	mov.w	lr, #256	; 0x100
            ++R;
     e14:	7813      	ldrb	r3, [r2, #0]
     e16:	3301      	adds	r3, #1
            R &= (0x01 << ditherBits) - 1;
     e18:	f003 0307 	and.w	r3, r3, #7
     e1c:	01d9      	lsls	r1, r3, #7
     e1e:	7013      	strb	r3, [r2, #0]
                if(R & 0x02) { Q |= 0x40; }
     e20:	079a      	lsls	r2, r3, #30
                Q += 0x01 << (7 - ditherBits);
     e22:	f04f 0200 	mov.w	r2, #0
     e26:	b2c9      	uxtb	r1, r1
                if(R & 0x02) { Q |= 0x40; }
     e28:	bf48      	it	mi
     e2a:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
                if(R & 0x04) { Q |= 0x20; }
     e2e:	075b      	lsls	r3, r3, #29
     e30:	ab05      	add	r3, sp, #20
     e32:	bf48      	it	mi
     e34:	f041 0120 	orrmi.w	r1, r1, #32
                Q += 0x01 << (7 - ditherBits);
     e38:	3110      	adds	r1, #16
     e3a:	b2c9      	uxtb	r1, r1
                    e[i] = s ? (256/s) + 1 : 0;
     e3c:	b1ba      	cbz	r2, e6e <CLEDController::clearLeds(int)+0xca>
     e3e:	fbbe f2f2 	udiv	r2, lr, r2
     e42:	b2d2      	uxtb	r2, r2
     e44:	1c50      	adds	r0, r2, #1
     e46:	b2c0      	uxtb	r0, r0
     e48:	fb00 1501 	mla	r5, r0, r1, r1
     e4c:	70d8      	strb	r0, [r3, #3]
     e4e:	f3c5 2607 	ubfx	r6, r5, #8, #8
                    if(d[i]) (--d[i]);
     e52:	122d      	asrs	r5, r5, #8
     e54:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
                    d[i] = scale8(Q, e[i]);
     e58:	bf0c      	ite	eq
     e5a:	701d      	strbeq	r5, [r3, #0]
                    if(d[i]) (--d[i]);
     e5c:	701e      	strbne	r6, [r3, #0]
                    if(e[i]) --e[i];
     e5e:	b100      	cbz	r0, e62 <CLEDController::clearLeds(int)+0xbe>
     e60:	70da      	strb	r2, [r3, #3]
            for(int i = 0; i < 3; ++i) {
     e62:	3301      	adds	r3, #1
     e64:	459c      	cmp	ip, r3
     e66:	d008      	beq.n	e7a <CLEDController::clearLeds(int)+0xd6>
                    uint8_t s = mScale.raw[i];
     e68:	799a      	ldrb	r2, [r3, #6]
                    e[i] = s ? (256/s) + 1 : 0;
     e6a:	2a00      	cmp	r2, #0
     e6c:	d1e7      	bne.n	e3e <CLEDController::clearLeds(int)+0x9a>
     e6e:	70da      	strb	r2, [r3, #3]
            for(int i = 0; i < 3; ++i) {
     e70:	3301      	adds	r3, #1
                    d[i] = scale8(Q, e[i]);
     e72:	f803 2c01 	strb.w	r2, [r3, #-1]
            for(int i = 0; i < 3; ++i) {
     e76:	459c      	cmp	ip, r3
     e78:	d1f6      	bne.n	e68 <CLEDController::clearLeds(int)+0xc4>
        showPixels(pixels);
     e7a:	6825      	ldr	r5, [r4, #0]
     e7c:	e7ad      	b.n	dda <CLEDController::clearLeds(int)+0x36>
     e7e:	bf00      	nop
     e80:	00000bc5 	.word	0x00000bc5
     e84:	2000c94c 	.word	0x2000c94c

00000e88 <myClock()>:
  if (waitForFourBars) pulseCount++;  
     e88:	4b2f      	ldr	r3, [pc, #188]	; (f48 <myClock()+0xc0>)
     e8a:	781b      	ldrb	r3, [r3, #0]
void myClock() {
     e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (waitForFourBars) pulseCount++;  
     e90:	b11b      	cbz	r3, e9a <myClock()+0x12>
     e92:	4a2e      	ldr	r2, [pc, #184]	; (f4c <myClock()+0xc4>)
     e94:	6813      	ldr	r3, [r2, #0]
     e96:	3301      	adds	r3, #1
     e98:	6013      	str	r3, [r2, #0]
     e9a:	4b2d      	ldr	r3, [pc, #180]	; (f50 <myClock()+0xc8>)
  if (lastClockTime > 0) {
     e9c:	4c2d      	ldr	r4, [pc, #180]	; (f54 <myClock()+0xcc>)
     e9e:	681d      	ldr	r5, [r3, #0]
     ea0:	6823      	ldr	r3, [r4, #0]
     ea2:	b163      	cbz	r3, ebe <myClock()+0x36>
    totalInterval += now - lastClockTime;
     ea4:	4e2c      	ldr	r6, [pc, #176]	; (f58 <myClock()+0xd0>)
     ea6:	6822      	ldr	r2, [r4, #0]
     ea8:	6833      	ldr	r3, [r6, #0]
    clockCount++;
     eaa:	4f2c      	ldr	r7, [pc, #176]	; (f5c <myClock()+0xd4>)
    totalInterval += now - lastClockTime;
     eac:	442b      	add	r3, r5
     eae:	1a9b      	subs	r3, r3, r2
     eb0:	6033      	str	r3, [r6, #0]
    clockCount++;
     eb2:	683b      	ldr	r3, [r7, #0]
     eb4:	3301      	adds	r3, #1
     eb6:	603b      	str	r3, [r7, #0]
    if (clockCount >= numPulsesForAverage) {
     eb8:	683b      	ldr	r3, [r7, #0]
     eba:	2b17      	cmp	r3, #23
     ebc:	dc02      	bgt.n	ec4 <myClock()+0x3c>
  lastClockTime = now;
     ebe:	6025      	str	r5, [r4, #0]
}
     ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      float averageInterval = totalInterval / (float)numPulsesForAverage;
     ec4:	ed96 7a00 	vldr	s14, [r6]
     ec8:	eef3 6a08 	vmov.f32	s13, #56	; 0x41c00000  24.0
      float bpm = 60000.0 / (averageInterval * 24);
     ecc:	ed9f 6a24 	vldr	s12, [pc, #144]	; f60 <myClock()+0xd8>
      float averageInterval = totalInterval / (float)numPulsesForAverage;
     ed0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
      SMP.bpm = round(bpm);
     ed4:	f8df 8098 	ldr.w	r8, [pc, #152]	; f70 <myClock()+0xe8>
	size_t print(int n)				{ return print((long)n); }
     ed8:	4822      	ldr	r0, [pc, #136]	; (f64 <myClock()+0xdc>)
      float averageInterval = totalInterval / (float)numPulsesForAverage;
     eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
      float bpm = 60000.0 / (averageInterval * 24);
     ede:	ee67 7aa6 	vmul.f32	s15, s15, s13
     ee2:	ee86 7a27 	vdiv.f32	s14, s12, s15
      SMP.bpm = round(bpm);
     ee6:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     eea:	feb8 7b47 	vrinta.f64	d7, d7
     eee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     ef2:	ee17 1a90 	vmov	r1, s15
     ef6:	edc8 7a03 	vstr	s15, [r8, #12]
     efa:	f014 fbaf 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
     efe:	4819      	ldr	r0, [pc, #100]	; (f64 <myClock()+0xdc>)
     f00:	f014 fbb8 	bl	15674 <Print::println()>
      thisTimer.update(((60 * 1000 / SMP.bpm) / 4) * 1000);
     f04:	f8d8 200c 	ldr.w	r2, [r8, #12]
     f08:	f64e 2360 	movw	r3, #60000	; 0xea60
     f0c:	fb93 f3f2 	sdiv	r3, r3, r2
     f10:	2b00      	cmp	r3, #0
     f12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     f16:	bfb8      	it	lt
     f18:	3303      	addlt	r3, #3
     f1a:	109b      	asrs	r3, r3, #2
     f1c:	fb02 f303 	mul.w	r3, r2, r3
	}
	// Change the timer's interval.  The current interval is completed
	// as previously configured, and then the next interval begins with
	// with this new setting.
	void update(int microseconds) {
		if (microseconds < 0) return;
     f20:	2b00      	cmp	r3, #0
     f22:	db0b      	blt.n	f3c <myClock()+0xb4>
		if (microseconds == 0 || microseconds > MAX_PERIOD) return;
     f24:	1e59      	subs	r1, r3, #1
     f26:	4a10      	ldr	r2, [pc, #64]	; (f68 <myClock()+0xe0>)
     f28:	4291      	cmp	r1, r2
     f2a:	d207      	bcs.n	f3c <myClock()+0xb4>
     f2c:	4a0f      	ldr	r2, [pc, #60]	; (f6c <myClock()+0xe4>)
     f2e:	6812      	ldr	r2, [r2, #0]
		if (channel) channel->LDVAL = cycles;
     f30:	b122      	cbz	r2, f3c <myClock()+0xb4>
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
     f32:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     f36:	00db      	lsls	r3, r3, #3
     f38:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
     f3a:	6013      	str	r3, [r2, #0]
      clockCount = 0;
     f3c:	2300      	movs	r3, #0
     f3e:	603b      	str	r3, [r7, #0]
      totalInterval = 0;
     f40:	6033      	str	r3, [r6, #0]
  lastClockTime = now;
     f42:	6025      	str	r5, [r4, #0]
}
     f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     f48:	2000c96b 	.word	0x2000c96b
     f4c:	2000b998 	.word	0x2000b998
     f50:	2000bc24 	.word	0x2000bc24
     f54:	20006bec 	.word	0x20006bec
     f58:	2000c534 	.word	0x2000c534
     f5c:	200067cc 	.word	0x200067cc
     f60:	476a6000 	.word	0x476a6000
     f64:	20003314 	.word	0x20003314
     f68:	0aaaaaaa 	.word	0x0aaaaaaa
     f6c:	20003c90 	.word	0x20003c90
     f70:	20003294 	.word	0x20003294

00000f74 <SDFile::seek(unsigned long long, int)>:
	virtual bool seek(uint64_t pos, int mode = SeekSet) {
     f74:	b430      	push	{r4, r5}
     f76:	9c02      	ldr	r4, [sp, #8]
     f78:	4611      	mov	r1, r2
     f7a:	469c      	mov	ip, r3
		if (mode == SeekSet) return sdfatfile.seekSet(pos);
     f7c:	b134      	cbz	r4, f8c <SDFile::seek(unsigned long long, int)+0x18>
		if (mode == SeekCur) return sdfatfile.seekCur(pos);
     f7e:	2c01      	cmp	r4, #1
     f80:	d01c      	beq.n	fbc <SDFile::seek(unsigned long long, int)+0x48>
		if (mode == SeekEnd) return sdfatfile.seekEnd(pos);
     f82:	2c02      	cmp	r4, #2
     f84:	d00e      	beq.n	fa4 <SDFile::seek(unsigned long long, int)+0x30>
	}
     f86:	2000      	movs	r0, #0
     f88:	bc30      	pop	{r4, r5}
     f8a:	4770      	bx	lr
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     f8c:	6d05      	ldr	r5, [r0, #80]	; 0x50
     f8e:	b1f5      	cbz	r5, fce <SDFile::seek(unsigned long long, int)+0x5a>
     f90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     f94:	4293      	cmp	r3, r2
     f96:	eb74 040c 	sbcs.w	r4, r4, ip
     f9a:	d3f4      	bcc.n	f86 <SDFile::seek(unsigned long long, int)+0x12>
     f9c:	4628      	mov	r0, r5
     f9e:	bc30      	pop	{r4, r5}
     fa0:	f00e bf86 	b.w	feb0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->fileSize() :
     fa4:	6d02      	ldr	r2, [r0, #80]	; 0x50
     fa6:	b30a      	cbz	r2, fec <SDFile::seek(unsigned long long, int)+0x78>
     fa8:	69d3      	ldr	r3, [r2, #28]
    return seekSet(fileSize() + offset);
     faa:	1859      	adds	r1, r3, r1
     fac:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     fb0:	2b00      	cmp	r3, #0
     fb2:	d1e8      	bne.n	f86 <SDFile::seek(unsigned long long, int)+0x12>
     fb4:	4610      	mov	r0, r2
     fb6:	bc30      	pop	{r4, r5}
     fb8:	f00e bf7a 	b.w	feb0 <FatFile::seekSet(unsigned long)>
    return m_fFile ? m_fFile->curPosition() :
     fbc:	6d02      	ldr	r2, [r0, #80]	; 0x50
     fbe:	b162      	cbz	r2, fda <SDFile::seek(unsigned long long, int)+0x66>
     fc0:	6953      	ldr	r3, [r2, #20]
    return seekSet(curPosition() + offset);
     fc2:	1859      	adds	r1, r3, r1
     fc4:	f14c 0300 	adc.w	r3, ip, #0
    return m_fFile ? pos < (1ULL << 32) && m_fFile->seekSet(pos) :
     fc8:	2b00      	cmp	r3, #0
     fca:	d1dc      	bne.n	f86 <SDFile::seek(unsigned long long, int)+0x12>
     fcc:	e7f2      	b.n	fb4 <SDFile::seek(unsigned long long, int)+0x40>
     fce:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->seekSet(pos) : false;
     fd0:	2800      	cmp	r0, #0
     fd2:	d0d8      	beq.n	f86 <SDFile::seek(unsigned long long, int)+0x12>
     fd4:	bc30      	pop	{r4, r5}
     fd6:	f00c bb2f 	b.w	d638 <ExFatFile::seekSet(unsigned long long)>
     fda:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->curPosition() : 0;
     fdc:	2800      	cmp	r0, #0
     fde:	d0d2      	beq.n	f86 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(curPosition() + offset);
     fe0:	e9d0 2300 	ldrd	r2, r3, [r0]
     fe4:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     fe6:	eb4c 0303 	adc.w	r3, ip, r3
     fea:	e7f3      	b.n	fd4 <SDFile::seek(unsigned long long, int)+0x60>
     fec:	6d40      	ldr	r0, [r0, #84]	; 0x54
           m_xFile ? m_xFile->fileSize() : 0;
     fee:	2800      	cmp	r0, #0
     ff0:	d0c9      	beq.n	f86 <SDFile::seek(unsigned long long, int)+0x12>
    return seekSet(fileSize() + offset);
     ff2:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
     ff6:	bc30      	pop	{r4, r5}
     ff8:	188a      	adds	r2, r1, r2
           m_xFile ? m_xFile->seekSet(pos) : false;
     ffa:	eb4c 0303 	adc.w	r3, ip, r3
     ffe:	f00c bb1b 	b.w	d638 <ExFatFile::seekSet(unsigned long long)>
    1002:	bf00      	nop

00001004 <switchMode(Mode*) [clone .part.0]>:
void switchMode(Mode* newMode) {
    1004:	b5f0      	push	{r4, r5, r6, r7, lr}
    1006:	b095      	sub	sp, #84	; 0x54
    currentMode = newMode;
    1008:	4e51      	ldr	r6, [pc, #324]	; (1150 <switchMode(Mode*) [clone .part.0]+0x14c>)
void switchMode(Mode* newMode) {
    100a:	4603      	mov	r3, r0

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
    100c:	4951      	ldr	r1, [pc, #324]	; (1154 <switchMode(Mode*) [clone .part.0]+0x150>)
    100e:	a810      	add	r0, sp, #64	; 0x40
    1010:	4d51      	ldr	r5, [pc, #324]	; (1158 <switchMode(Mode*) [clone .part.0]+0x154>)
    currentMode = newMode;
    1012:	6033      	str	r3, [r6, #0]
    1014:	f014 fca8 	bl	15968 <String::String(char const*)>
    String savedpos = "" + String(currentMode->pos[0]) + " " + String(currentMode->pos[1]) + " " + String(currentMode->pos[2]);
    1018:	6833      	ldr	r3, [r6, #0]
    101a:	220a      	movs	r2, #10
    101c:	a80c      	add	r0, sp, #48	; 0x30
  if (currentMode != &set_Wav) {
    101e:	4f4f      	ldr	r7, [pc, #316]	; (115c <switchMode(Mode*) [clone .part.0]+0x158>)
    String savedpos = "" + String(currentMode->pos[0]) + " " + String(currentMode->pos[1]) + " " + String(currentMode->pos[2]);
    1020:	6b19      	ldr	r1, [r3, #48]	; 0x30
    1022:	f014 fcb5 	bl	15990 <String::String(int, unsigned char)>
    1026:	a90c      	add	r1, sp, #48	; 0x30
    1028:	a810      	add	r0, sp, #64	; 0x40
    102a:	f014 fd57 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    102e:	494c      	ldr	r1, [pc, #304]	; (1160 <switchMode(Mode*) [clone .part.0]+0x15c>)
    1030:	f014 fd5c 	bl	15aec <operator+(StringSumHelper const&, char const*)>
    1034:	6833      	ldr	r3, [r6, #0]
    1036:	4604      	mov	r4, r0
    1038:	220a      	movs	r2, #10
    103a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    103c:	a808      	add	r0, sp, #32
    103e:	f014 fca7 	bl	15990 <String::String(int, unsigned char)>
    1042:	a908      	add	r1, sp, #32
    1044:	4620      	mov	r0, r4
    1046:	f014 fd49 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    104a:	4945      	ldr	r1, [pc, #276]	; (1160 <switchMode(Mode*) [clone .part.0]+0x15c>)
    104c:	f014 fd4e 	bl	15aec <operator+(StringSumHelper const&, char const*)>
    1050:	6833      	ldr	r3, [r6, #0]
    1052:	4604      	mov	r4, r0
    1054:	220a      	movs	r2, #10
    1056:	6b99      	ldr	r1, [r3, #56]	; 0x38
    1058:	a804      	add	r0, sp, #16
    105a:	f014 fc99 	bl	15990 <String::String(int, unsigned char)>
    105e:	a904      	add	r1, sp, #16
    1060:	4620      	mov	r0, r4
    for (int i = 0; i < 4; i++) {  // Assuming 3 encoders
    1062:	2400      	movs	r4, #0
    String savedpos = "" + String(currentMode->pos[0]) + " " + String(currentMode->pos[1]) + " " + String(currentMode->pos[2]);
    1064:	f014 fd3a 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    1068:	4601      	mov	r1, r0
    106a:	4668      	mov	r0, sp
    106c:	f014 fc22 	bl	158b4 <String::String(String const&)>
    1070:	a804      	add	r0, sp, #16
    1072:	f014 fc3d 	bl	158f0 <String::~String()>
    1076:	a808      	add	r0, sp, #32
    1078:	f014 fc3a 	bl	158f0 <String::~String()>
    107c:	a80c      	add	r0, sp, #48	; 0x30
    107e:	f014 fc37 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    1082:	a810      	add	r0, sp, #64	; 0x40
    1084:	f014 fc34 	bl	158f0 <String::~String()>
    1088:	210e      	movs	r1, #14
    108a:	4836      	ldr	r0, [pc, #216]	; (1164 <switchMode(Mode*) [clone .part.0]+0x160>)
    108c:	f017 fa22 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1090:	4835      	ldr	r0, [pc, #212]	; (1168 <switchMode(Mode*) [clone .part.0]+0x164>)
    1092:	f014 faef 	bl	15674 <Print::println()>
	StringSumHelper(const String &s) : String(s) {}
    1096:	6831      	ldr	r1, [r6, #0]
    1098:	a810      	add	r0, sp, #64	; 0x40
    109a:	f014 fc0b 	bl	158b4 <String::String(String const&)>
    Serial.println(currentMode->name + " > " + savedpos);
    109e:	4933      	ldr	r1, [pc, #204]	; (116c <switchMode(Mode*) [clone .part.0]+0x168>)
    10a0:	a810      	add	r0, sp, #64	; 0x40
    10a2:	f014 fd23 	bl	15aec <operator+(StringSumHelper const&, char const*)>
    10a6:	4669      	mov	r1, sp
    10a8:	f014 fd18 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    10ac:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    10ae:	482e      	ldr	r0, [pc, #184]	; (1168 <switchMode(Mode*) [clone .part.0]+0x164>)
    10b0:	f014 faae 	bl	15610 <Print::print(String const&)>
    10b4:	482c      	ldr	r0, [pc, #176]	; (1168 <switchMode(Mode*) [clone .part.0]+0x164>)
    10b6:	f014 fadd 	bl	15674 <Print::println()>
class StringSumHelper : public String
    10ba:	a810      	add	r0, sp, #64	; 0x40
    10bc:	f014 fc18 	bl	158f0 <String::~String()>
      float newval = round(mapf(currentMode->pos[i], 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    10c0:	6833      	ldr	r3, [r6, #0]
    10c2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    10c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    10ca:	eeb0 1b43 	vmov.f64	d1, d3
    10ce:	6a1a      	ldr	r2, [r3, #32]
    10d0:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
    10d4:	0093      	lsls	r3, r2, #2
    10d6:	ee07 2a90 	vmov	s15, r2
    10da:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    10de:	ee04 3a10 	vmov	s8, r3
    10e2:	eeb8 2be7 	vcvt.f64.s32	d2, s15
    10e6:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
    10ea:	f009 fac1 	bl	a670 <mapf(double, double, double, double, double)>
      if (i == 0) {  //reverse KnobDirection for Left
    10ee:	b9cc      	cbnz	r4, 1124 <switchMode(Mode*) [clone .part.0]+0x120>
        newval = round(mapf(reverseMapEncoderValue(currentMode->pos[i], 1, 16), 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    10f0:	6833      	ldr	r3, [r6, #0]
    10f2:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    10f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  if (currentMode != &set_Wav) {
    10f8:	42bb      	cmp	r3, r7
        newval = round(mapf(reverseMapEncoderValue(currentMode->pos[i], 1, 16), 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    10fa:	6a1b      	ldr	r3, [r3, #32]
    10fc:	eeb0 1b43 	vmov.f64	d1, d3
    return maxValue - (encoderValue - minValue);
    1100:	bf18      	it	ne
    1102:	f1c2 0211 	rsbne	r2, r2, #17
        newval = round(mapf(reverseMapEncoderValue(currentMode->pos[i], 1, 16), 1, currentMode->maxValues[i], 1, currentMode->maxValues[i] * 4));
    1106:	ee07 2a90 	vmov	s15, r2
    110a:	009a      	lsls	r2, r3, #2
    110c:	eeb8 0be7 	vcvt.f64.s32	d0, s15
    1110:	ee04 2a10 	vmov	s8, r2
    1114:	ee07 3a90 	vmov	s15, r3
    1118:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
    111c:	eeb8 2be7 	vcvt.f64.s32	d2, s15
    1120:	f009 faa6 	bl	a670 <mapf(double, double, double, double, double)>
    1124:	feb8 0b40 	vrinta.f64	d0, d0
    1128:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    112c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
		encoder.position = 0;
		interrupts();
		return ret;
	}
	inline void write(int32_t p) {
		noInterrupts();
    1130:	b672      	cpsid	i
      encoders[i].write(newval);
    1132:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    1136:	ed85 0a05 	vstr	s0, [r5, #20]
		encoder.position = p;
		interrupts();
    113a:	b662      	cpsie	i
    for (int i = 0; i < 4; i++) {  // Assuming 3 encoders
    113c:	3401      	adds	r4, #1
    113e:	351c      	adds	r5, #28
    1140:	2c04      	cmp	r4, #4
    1142:	d1bd      	bne.n	10c0 <switchMode(Mode*) [clone .part.0]+0xbc>
  }
    1144:	4668      	mov	r0, sp
    1146:	f014 fbd3 	bl	158f0 <String::~String()>
}
    114a:	b015      	add	sp, #84	; 0x54
    114c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    114e:	bf00      	nop
    1150:	200038c8 	.word	0x200038c8
    1154:	20000ec0 	.word	0x20000ec0
    1158:	200067ec 	.word	0x200067ec
    115c:	20003c10 	.word	0x20003c10
    1160:	20002158 	.word	0x20002158
    1164:	20000918 	.word	0x20000918
    1168:	20003314 	.word	0x20003314
    116c:	20000928 	.word	0x20000928

00001170 <File::~File()>:
	virtual ~File() {
    1170:	b510      	push	{r4, lr}
    1172:	4b09      	ldr	r3, [pc, #36]	; (1198 <File::~File()+0x28>)
    1174:	4604      	mov	r4, r0
		if (f) dec_refcount();
    1176:	6900      	ldr	r0, [r0, #16]
	virtual ~File() {
    1178:	6023      	str	r3, [r4, #0]
		if (f) dec_refcount();
    117a:	b158      	cbz	r0, 1194 <File::~File()+0x24>
		if (--(f->refcount) == 0) {
    117c:	6843      	ldr	r3, [r0, #4]
    117e:	3b01      	subs	r3, #1
    1180:	6043      	str	r3, [r0, #4]
    1182:	b93b      	cbnz	r3, 1194 <File::~File()+0x24>
			f->close();
    1184:	6803      	ldr	r3, [r0, #0]
    1186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1188:	4798      	blx	r3
			delete f;
    118a:	6920      	ldr	r0, [r4, #16]
    118c:	b110      	cbz	r0, 1194 <File::~File()+0x24>
    118e:	6803      	ldr	r3, [r0, #0]
    1190:	685b      	ldr	r3, [r3, #4]
    1192:	4798      	blx	r3
	}
    1194:	4620      	mov	r0, r4
    1196:	bd10      	pop	{r4, pc}
    1198:	200014d4 	.word	0x200014d4

0000119c <File::~File()>:
	virtual ~File() {
    119c:	b510      	push	{r4, lr}
    119e:	4b0b      	ldr	r3, [pc, #44]	; (11cc <File::~File()+0x30>)
    11a0:	4604      	mov	r4, r0
		if (f) dec_refcount();
    11a2:	6900      	ldr	r0, [r0, #16]
	virtual ~File() {
    11a4:	6023      	str	r3, [r4, #0]
		if (f) dec_refcount();
    11a6:	b158      	cbz	r0, 11c0 <File::~File()+0x24>
		if (--(f->refcount) == 0) {
    11a8:	6843      	ldr	r3, [r0, #4]
    11aa:	3b01      	subs	r3, #1
    11ac:	6043      	str	r3, [r0, #4]
    11ae:	b93b      	cbnz	r3, 11c0 <File::~File()+0x24>
			f->close();
    11b0:	6803      	ldr	r3, [r0, #0]
    11b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    11b4:	4798      	blx	r3
			delete f;
    11b6:	6920      	ldr	r0, [r4, #16]
    11b8:	b110      	cbz	r0, 11c0 <File::~File()+0x24>
    11ba:	6803      	ldr	r3, [r0, #0]
    11bc:	685b      	ldr	r3, [r3, #4]
    11be:	4798      	blx	r3
	}
    11c0:	4620      	mov	r0, r4
    11c2:	2114      	movs	r1, #20
    11c4:	f015 fa8c 	bl	166e0 <operator delete(void*, unsigned int)>
    11c8:	4620      	mov	r0, r4
    11ca:	bd10      	pop	{r4, pc}
    11cc:	200014d4 	.word	0x200014d4

000011d0 <playNote()>:
  if (isPlaying) {
    11d0:	4bbb      	ldr	r3, [pc, #748]	; (14c0 <playNote()+0x2f0>)
    11d2:	781b      	ldrb	r3, [r3, #0]
void playNote() {
    11d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    beat++;
    11d8:	f8df 933c 	ldr.w	r9, [pc, #828]	; 1518 <playNote()+0x348>
void playNote() {
    11dc:	ed2d 8b04 	vpush	{d8-d9}
    11e0:	b093      	sub	sp, #76	; 0x4c
  if (isPlaying) {
    11e2:	b1b3      	cbz	r3, 1212 <playNote()+0x42>
    pagebeat++;
    11e4:	49b7      	ldr	r1, [pc, #732]	; (14c4 <playNote()+0x2f4>)
    beat++;
    11e6:	f8d9 3000 	ldr.w	r3, [r9]
    pagebeat++;
    11ea:	680a      	ldr	r2, [r1, #0]
    if (beat > SMP.page * maxX) {
    11ec:	4cb6      	ldr	r4, [pc, #728]	; (14c8 <playNote()+0x2f8>)
    beat++;
    11ee:	3301      	adds	r3, #1
    pagebeat++;
    11f0:	3201      	adds	r2, #1
    beat++;
    11f2:	f8c9 3000 	str.w	r3, [r9]
    pagebeat++;
    11f6:	600a      	str	r2, [r1, #0]
    if (beat > SMP.page * maxX) {
    11f8:	6962      	ldr	r2, [r4, #20]
    11fa:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
    11fe:	f300 818f 	bgt.w	1520 <playNote()+0x350>
    1202:	4db2      	ldr	r5, [pc, #712]	; (14cc <playNote()+0x2fc>)
    if (beat > maxX * lastPage) beat = 1;
    1204:	682a      	ldr	r2, [r5, #0]
    1206:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
    120a:	d902      	bls.n	1212 <playNote()+0x42>
    120c:	2301      	movs	r3, #1
    120e:	f8c9 3000 	str.w	r3, [r9]
      if (SMP.page > lastPage) SMP.page = 1;
    1212:	f04f 080a 	mov.w	r8, #10
    1216:	f04f 0a01 	mov.w	sl, #1
    121a:	4fad      	ldr	r7, [pc, #692]	; (14d0 <playNote()+0x300>)
    121c:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 14e0 <playNote()+0x310>
        float nvel = (float)note[beat][b][1] / 200.0;
    1220:	ed9f 8aac 	vldr	s16, [pc, #688]	; 14d4 <playNote()+0x304>
	}

	void frequency(float freq) {
		if (freq < 0.0f) {
			freq = 0.0;
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    1224:	eddf 8aac 	vldr	s17, [pc, #688]	; 14d8 <playNote()+0x308>
			freq = AUDIO_SAMPLE_RATE_EXACT / 2.0f;
		}
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    1228:	ed9f 9aac 	vldr	s18, [pc, #688]	; 14dc <playNote()+0x30c>
    122c:	e012      	b.n	1254 <playNote()+0x84>
    if (note[beat][b][0] > 0 && !mute[note[beat][b][0]]) {
    122e:	f8d9 3000 	ldr.w	r3, [r9]
    1232:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    1236:	4453      	add	r3, sl
    1238:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    123c:	b11b      	cbz	r3, 1246 <playNote()+0x76>
    123e:	4aa8      	ldr	r2, [pc, #672]	; (14e0 <playNote()+0x310>)
    1240:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
    1244:	b184      	cbz	r4, 1268 <playNote()+0x98>
  for (int b = 1; b < 15 + 1; b++) {
    1246:	4ba7      	ldr	r3, [pc, #668]	; (14e4 <playNote()+0x314>)
    1248:	f10a 0a01 	add.w	sl, sl, #1
    124c:	f108 080a 	add.w	r8, r8, #10
    1250:	459b      	cmp	fp, r3
    1252:	d05a      	beq.n	130a <playNote()+0x13a>
    if (mute[b]) envelopes[b]->noteOff();
    1254:	f85b 3f04 	ldr.w	r3, [fp, #4]!
    1258:	2b00      	cmp	r3, #0
    125a:	d0e8      	beq.n	122e <playNote()+0x5e>
    125c:	4ba2      	ldr	r3, [pc, #648]	; (14e8 <playNote()+0x318>)
    125e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
    1262:	f00a fd3d 	bl	bce0 <AudioEffectEnvelope::noteOff()>
    1266:	e7e2      	b.n	122e <playNote()+0x5e>
    1268:	2107      	movs	r1, #7
    126a:	48a0      	ldr	r0, [pc, #640]	; (14ec <playNote()+0x31c>)
    126c:	f017 f932 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1270:	489f      	ldr	r0, [pc, #636]	; (14f0 <playNote()+0x320>)
    1272:	f014 f9ff 	bl	15674 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    1276:	4651      	mov	r1, sl
    1278:	489d      	ldr	r0, [pc, #628]	; (14f0 <playNote()+0x320>)
    127a:	f014 f9ef 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    127e:	489c      	ldr	r0, [pc, #624]	; (14f0 <playNote()+0x320>)
    1280:	f014 f9f8 	bl	15674 <Print::println()>
      if (note[beat][b][0] != 14) {
    1284:	f8d9 2000 	ldr.w	r2, [r9]
    1288:	eb02 1302 	add.w	r3, r2, r2, lsl #4
    128c:	0111      	lsls	r1, r2, #4
    128e:	4453      	add	r3, sl
    1290:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    1294:	2b0e      	cmp	r3, #14
    1296:	d13d      	bne.n	1314 <playNote()+0x144>
        waveform1.frequency(b * 10);
    1298:	ee07 8a90 	vmov	s15, r8
    129c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (freq < 0.0f) {
    12a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    12a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12a8:	f100 8105 	bmi.w	14b6 <playNote()+0x2e6>
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    12ac:	eef4 7ae8 	vcmpe.f32	s15, s17
    12b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12b4:	f340 81d7 	ble.w	1666 <playNote()+0x496>
    12b8:	488e      	ldr	r0, [pc, #568]	; (14f4 <playNote()+0x324>)
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    12ba:	4b8f      	ldr	r3, [pc, #572]	; (14f8 <playNote()+0x328>)
    12bc:	61c3      	str	r3, [r0, #28]
        float nvel = (float)note[beat][b][1] / 200.0;
    12be:	188b      	adds	r3, r1, r2
		phase_offset = angle * (float)(4294967296.0 / 360.0);
	}
	void amplitude(float n) {	// 0 to 1.0
		if (n < 0) {
			n = 0;
		} else if (n > 1.0f) {
    12c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    12c4:	4453      	add	r3, sl
    12c6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    12ca:	ed93 7a01 	vldr	s14, [r3, #4]
    12ce:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    12d2:	eec7 7a08 	vdiv.f32	s15, s14, s16
    12d6:	eef4 7ae6 	vcmpe.f32	s15, s13
    12da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12de:	f340 81bb 	ble.w	1658 <playNote()+0x488>
    12e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
			n = 1.0;
		}
		magnitude = n * 65536.0f;
    12e6:	6243      	str	r3, [r0, #36]	; 0x24
  for (int b = 1; b < 15 + 1; b++) {
    12e8:	f10a 0a01 	add.w	sl, sl, #1
        envelope14.noteOn();
    12ec:	4883      	ldr	r0, [pc, #524]	; (14fc <playNote()+0x32c>)
  for (int b = 1; b < 15 + 1; b++) {
    12ee:	f108 080a 	add.w	r8, r8, #10
        envelope14.noteOn();
    12f2:	f00a fccd 	bl	bc90 <AudioEffectEnvelope::noteOn()>
    12f6:	4b82      	ldr	r3, [pc, #520]	; (1500 <playNote()+0x330>)
    12f8:	681a      	ldr	r2, [r3, #0]
        startTime = millis();    // Record the start time
    12fa:	4b82      	ldr	r3, [pc, #520]	; (1504 <playNote()+0x334>)
    12fc:	601a      	str	r2, [r3, #0]
        noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    12fe:	2201      	movs	r2, #1
    1300:	4b81      	ldr	r3, [pc, #516]	; (1508 <playNote()+0x338>)
    1302:	701a      	strb	r2, [r3, #0]
  for (int b = 1; b < 15 + 1; b++) {
    1304:	4b77      	ldr	r3, [pc, #476]	; (14e4 <playNote()+0x314>)
    1306:	459b      	cmp	fp, r3
    1308:	d1a4      	bne.n	1254 <playNote()+0x84>
}
    130a:	b013      	add	sp, #76	; 0x4c
    130c:	ecbd 8b04 	vpop	{d8-d9}
    1310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1314:	210c      	movs	r1, #12
    1316:	487d      	ldr	r0, [pc, #500]	; (150c <playNote()+0x33c>)
    1318:	f017 f8dc 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    131c:	4874      	ldr	r0, [pc, #464]	; (14f0 <playNote()+0x320>)
    131e:	f014 f9a9 	bl	15674 <Print::println()>
        Serial.println(note[beat][b][0]);
    1322:	f8d9 3000 	ldr.w	r3, [r9]
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
    1326:	220a      	movs	r2, #10
    1328:	4871      	ldr	r0, [pc, #452]	; (14f0 <playNote()+0x320>)
    132a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    132e:	4453      	add	r3, sl
    1330:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    1334:	4623      	mov	r3, r4
    1336:	f014 f9c7 	bl	156c8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned int n)			{ return print(n) + println(); }
    133a:	486d      	ldr	r0, [pc, #436]	; (14f0 <playNote()+0x320>)
    133c:	f014 f99a 	bl	15674 <Print::println()>
        _samplers[note[beat][b][0]].noteEvent(12 * SampleRate[note[beat][b][0]] + b - (note[beat][b][0] + 1), note[beat][b][1], true, false);
    1340:	f8d9 2000 	ldr.w	r2, [r9]
    1344:	f8df c1d4 	ldr.w	ip, [pc, #468]	; 151c <playNote()+0x34c>
    1348:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    134c:	eb02 1502 	add.w	r5, r2, r2, lsl #4
    1350:	0111      	lsls	r1, r2, #4
    1352:	4455      	add	r5, sl
    1354:	f857 3035 	ldr.w	r3, [r7, r5, lsl #3]
    1358:	eb07 06c5 	add.w	r6, r7, r5, lsl #3
    135c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
    1360:	1ac0      	subs	r0, r0, r3
    1362:	7936      	ldrb	r6, [r6, #4]
    1364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    1368:	9603      	str	r6, [sp, #12]
    136a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    136e:	b2c0      	uxtb	r0, r0
    1370:	9002      	str	r0, [sp, #8]
public:
    basesampler() : _polysampler() {
    }

    void noteEvent(uint8_t noteNumber, uint8_t velocity, bool isNoteOn, bool retrigger) {
        if (isNoteOn && velocity > 0)
    1372:	2e00      	cmp	r6, #0
    1374:	d056      	beq.n	1424 <playNote()+0x254>
    }

    void noteOn(uint8_t noteNumber, uint8_t velocity) {
        int indexOfVoice = 255;
        bool isretrigger = false;
        if (activeNotes[noteNumber] == 255) {
    1376:	009e      	lsls	r6, r3, #2
    1378:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    137c:	9605      	str	r6, [sp, #20]
    137e:	4e64      	ldr	r6, [pc, #400]	; (1510 <playNote()+0x340>)
    1380:	ea4f 1e85 	mov.w	lr, r5, lsl #6
    1384:	eb06 1085 	add.w	r0, r6, r5, lsl #6
    1388:	9d02      	ldr	r5, [sp, #8]
    138a:	1945      	adds	r5, r0, r5
    138c:	f895 5020 	ldrb.w	r5, [r5, #32]
    1390:	2dff      	cmp	r5, #255	; 0xff
    1392:	9504      	str	r5, [sp, #16]
    1394:	f000 8122 	beq.w	15dc <playNote()+0x40c>
                Serial.printf("Note dropped: %i \n", noteNumber);
            }
        } else {
            // note is already active, just re-trigger it...
            indexOfVoice = activeNotes[noteNumber];
            isretrigger = true;
    1398:	2501      	movs	r5, #1
            _polysampler.noteOn(noteNumber, velocity);
    139a:	9e05      	ldr	r6, [sp, #20]
    139c:	2201      	movs	r2, #1
    139e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
    13a2:	441e      	add	r6, r3
    13a4:	9b04      	ldr	r3, [sp, #16]
    13a6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    13aa:	f88d 3020 	strb.w	r3, [sp, #32]
    13ae:	9b02      	ldr	r3, [sp, #8]
    13b0:	4a57      	ldr	r2, [pc, #348]	; (1510 <playNote()+0x340>)
    13b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    13b6:	9b03      	ldr	r3, [sp, #12]
    13b8:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
    13bc:	01b3      	lsls	r3, r6, #6
    13be:	f103 0010 	add.w	r0, r3, #16
    13c2:	4410      	add	r0, r2
       *  stored by @c this.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
    13c4:	6882      	ldr	r2, [r0, #8]
    13c6:	2a00      	cmp	r2, #0
    13c8:	f000 8179 	beq.w	16be <playNote()+0x4ee>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    13cc:	4a50      	ldr	r2, [pc, #320]	; (1510 <playNote()+0x340>)
    13ce:	a908      	add	r1, sp, #32
    13d0:	4413      	add	r3, r2
    13d2:	f10d 0221 	add.w	r2, sp, #33	; 0x21
    13d6:	69dc      	ldr	r4, [r3, #28]
    13d8:	ab09      	add	r3, sp, #36	; 0x24
    13da:	9301      	str	r3, [sp, #4]
    13dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
    13e0:	9300      	str	r3, [sp, #0]
    13e2:	f10d 0322 	add.w	r3, sp, #34	; 0x22
    13e6:	47a0      	blx	r4
        }
        if (indexOfVoice != 255) {            
            _noteEventFunction(indexOfVoice, noteNumber, velocity, true, isretrigger);
            voice_noteOn[indexOfVoice] = millis();
    13e8:	9a04      	ldr	r2, [sp, #16]
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    13ea:	9903      	ldr	r1, [sp, #12]
            voice_noteOn[indexOfVoice] = millis();
    13ec:	4b48      	ldr	r3, [pc, #288]	; (1510 <playNote()+0x340>)
    13ee:	eb02 1606 	add.w	r6, r2, r6, lsl #4
    13f2:	4843      	ldr	r0, [pc, #268]	; (1500 <playNote()+0x330>)
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    13f4:	9100      	str	r1, [sp, #0]
            voice_noteOn[indexOfVoice] = millis();
    13f6:	eb03 0186 	add.w	r1, r3, r6, lsl #2
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    13fa:	9501      	str	r5, [sp, #4]
    13fc:	6800      	ldr	r0, [r0, #0]
    13fe:	9b02      	ldr	r3, [sp, #8]
            voice_noteOn[indexOfVoice] = millis();
    1400:	f8c1 00f4 	str.w	r0, [r1, #244]	; 0xf4
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    1404:	4943      	ldr	r1, [pc, #268]	; (1514 <playNote()+0x344>)
    1406:	483a      	ldr	r0, [pc, #232]	; (14f0 <playNote()+0x320>)
    1408:	f014 f950 	bl	156ac <Print::printf(char const*, ...)>
      if (note[beat][b][0] == 14) {
    140c:	f8d9 2000 	ldr.w	r2, [r9]
    1410:	eb02 1302 	add.w	r3, r2, r2, lsl #4
    1414:	0111      	lsls	r1, r2, #4
    1416:	4453      	add	r3, sl
    1418:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    141c:	2b0e      	cmp	r3, #14
    141e:	f47f af12 	bne.w	1246 <playNote()+0x76>
    1422:	e739      	b.n	1298 <playNote()+0xc8>
        }
    }

    void noteOff(uint8_t noteNumber) {
        uint8_t index = activeNotes[noteNumber];
    1424:	eb03 0483 	add.w	r4, r3, r3, lsl #2
    1428:	4839      	ldr	r0, [pc, #228]	; (1510 <playNote()+0x340>)
    142a:	9404      	str	r4, [sp, #16]
    142c:	eb00 1684 	add.w	r6, r0, r4, lsl #6
    1430:	01a0      	lsls	r0, r4, #6
    1432:	9c02      	ldr	r4, [sp, #8]
    1434:	1935      	adds	r5, r6, r4
    1436:	9502      	str	r5, [sp, #8]
    1438:	f895 5020 	ldrb.w	r5, [r5, #32]
        if (index == 255) {
    143c:	2dff      	cmp	r5, #255	; 0xff
    143e:	d0ed      	beq.n	141c <playNote()+0x24c>
        else 
            _polysampler.noteOff(noteNumber);
    1440:	4b33      	ldr	r3, [pc, #204]	; (1510 <playNote()+0x340>)
    1442:	3010      	adds	r0, #16
    1444:	9a03      	ldr	r2, [sp, #12]
    1446:	4418      	add	r0, r3
            // note is not active, ignore
            return;
        }

        _noteEventFunction(index, noteNumber, 0, false, false);
    1448:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
    144c:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
	if (_M_empty())
    1450:	6883      	ldr	r3, [r0, #8]
    1452:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    1456:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    145a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    145e:	2b00      	cmp	r3, #0
    1460:	f000 812d 	beq.w	16be <playNote()+0x4ee>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    1464:	ab0e      	add	r3, sp, #56	; 0x38
    1466:	f10d 0226 	add.w	r2, sp, #38	; 0x26
    146a:	f10d 0125 	add.w	r1, sp, #37	; 0x25
    146e:	9301      	str	r3, [sp, #4]
    1470:	ab0a      	add	r3, sp, #40	; 0x28
    1472:	9300      	str	r3, [sp, #0]
    1474:	f10d 0327 	add.w	r3, sp, #39	; 0x27
    1478:	69f4      	ldr	r4, [r6, #28]
    147a:	47a0      	blx	r4
        activeNotes[noteNumber] = 255;
        activeVoices[index] = 255; // free the voice
        voice_noteOff[index] = millis();
    147c:	9c04      	ldr	r4, [sp, #16]
    147e:	4824      	ldr	r0, [pc, #144]	; (1510 <playNote()+0x340>)
    1480:	eb05 1304 	add.w	r3, r5, r4, lsl #4
    1484:	491e      	ldr	r1, [pc, #120]	; (1500 <playNote()+0x330>)
    1486:	f8d9 2000 	ldr.w	r2, [r9]
        activeVoices[index] = 255; // free the voice
    148a:	4435      	add	r5, r6
        voice_noteOff[index] = millis();
    148c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    1490:	6809      	ldr	r1, [r1, #0]
        activeNotes[noteNumber] = 255;
    1492:	9802      	ldr	r0, [sp, #8]
        voice_noteOff[index] = millis();
    1494:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
    1498:	eb02 1302 	add.w	r3, r2, r2, lsl #4
        activeNotes[noteNumber] = 255;
    149c:	21ff      	movs	r1, #255	; 0xff
    149e:	4453      	add	r3, sl
    14a0:	f880 1020 	strb.w	r1, [r0, #32]
    14a4:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
        activeVoices[index] = 255; // free the voice
    14a8:	f885 10a0 	strb.w	r1, [r5, #160]	; 0xa0
    14ac:	0111      	lsls	r1, r2, #4
    14ae:	2b0e      	cmp	r3, #14
    14b0:	f47f aec9 	bne.w	1246 <playNote()+0x76>
    14b4:	e6f0      	b.n	1298 <playNote()+0xc8>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    14b6:	480f      	ldr	r0, [pc, #60]	; (14f4 <playNote()+0x324>)
    14b8:	2300      	movs	r3, #0
    14ba:	61c3      	str	r3, [r0, #28]
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    14bc:	e6ff      	b.n	12be <playNote()+0xee>
    14be:	bf00      	nop
    14c0:	2000c953 	.word	0x2000c953
    14c4:	2000b688 	.word	0x2000b688
    14c8:	20003294 	.word	0x20003294
    14cc:	20003b28 	.word	0x20003b28
    14d0:	200071b8 	.word	0x200071b8
    14d4:	43480000 	.word	0x43480000
    14d8:	46ac4400 	.word	0x46ac4400
    14dc:	47be37c6 	.word	0x47be37c6
    14e0:	20007178 	.word	0x20007178
    14e4:	200071b4 	.word	0x200071b4
    14e8:	20000e64 	.word	0x20000e64
    14ec:	20000ae0 	.word	0x20000ae0
    14f0:	20003314 	.word	0x20003314
    14f4:	2000c794 	.word	0x2000c794
    14f8:	7ffe0000 	.word	0x7ffe0000
    14fc:	200069bc 	.word	0x200069bc
    1500:	2000bc24 	.word	0x2000bc24
    1504:	2000bc1c 	.word	0x2000bc1c
    1508:	2000c954 	.word	0x2000c954
    150c:	20000ae8 	.word	0x20000ae8
    1510:	2000561c 	.word	0x2000561c
    1514:	20000b0c 	.word	0x20000b0c
    1518:	200067a8 	.word	0x200067a8
    151c:	200032d4 	.word	0x200032d4
      pagebeat = 1;
    1520:	2001      	movs	r0, #1
      if (SMP.page > lastPage) SMP.page = 1;
    1522:	4d68      	ldr	r5, [pc, #416]	; (16c4 <playNote()+0x4f4>)
      SMP.page = SMP.page + 1;
    1524:	4402      	add	r2, r0
      if (SMP.page > lastPage) SMP.page = 1;
    1526:	682b      	ldr	r3, [r5, #0]
      pagebeat = 1;
    1528:	6008      	str	r0, [r1, #0]
      if (SMP.page > maxPages) SMP.page = 1;
    152a:	2a08      	cmp	r2, #8
	StringSumHelper(const char *p) : String(p) {}
    152c:	4966      	ldr	r1, [pc, #408]	; (16c8 <playNote()+0x4f8>)
      if (SMP.page > lastPage) SMP.page = 1;
    152e:	bfd4      	ite	le
    1530:	4610      	movle	r0, r2
      if (SMP.page > maxPages) SMP.page = 1;
    1532:	4602      	movgt	r2, r0
      if (SMP.page > lastPage) SMP.page = 1;
    1534:	4283      	cmp	r3, r0
    1536:	bf38      	it	cc
    1538:	2201      	movcc	r2, #1
    153a:	a80e      	add	r0, sp, #56	; 0x38
    153c:	6162      	str	r2, [r4, #20]
    153e:	f014 fa13 	bl	15968 <String::String(char const*)>
      Serial.println(" -->page: " + String(SMP.page));
    1542:	220a      	movs	r2, #10
    1544:	6961      	ldr	r1, [r4, #20]
    1546:	a80a      	add	r0, sp, #40	; 0x28
    1548:	f014 fa22 	bl	15990 <String::String(int, unsigned char)>
    154c:	a90a      	add	r1, sp, #40	; 0x28
    154e:	a80e      	add	r0, sp, #56	; 0x38
    1550:	f014 fac4 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    1554:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    1556:	485d      	ldr	r0, [pc, #372]	; (16cc <playNote()+0x4fc>)
    1558:	f014 f85a 	bl	15610 <Print::print(String const&)>
    155c:	485b      	ldr	r0, [pc, #364]	; (16cc <playNote()+0x4fc>)
    155e:	f014 f889 	bl	15674 <Print::println()>
    1562:	a80a      	add	r0, sp, #40	; 0x28
    1564:	f014 f9c4 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    1568:	a80e      	add	r0, sp, #56	; 0x38
    156a:	f014 f9c1 	bl	158f0 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    156e:	4958      	ldr	r1, [pc, #352]	; (16d0 <playNote()+0x500>)
    1570:	a80e      	add	r0, sp, #56	; 0x38
    1572:	f014 f9f9 	bl	15968 <String::String(char const*)>
      Serial.println(" -->lastpage: " + String(lastPage));
    1576:	220a      	movs	r2, #10
    1578:	6829      	ldr	r1, [r5, #0]
    157a:	a80a      	add	r0, sp, #40	; 0x28
    157c:	f014 fa20 	bl	159c0 <String::String(unsigned int, unsigned char)>
    1580:	a90a      	add	r1, sp, #40	; 0x28
    1582:	a80e      	add	r0, sp, #56	; 0x38
    1584:	f014 faaa 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    1588:	4601      	mov	r1, r0
    158a:	4850      	ldr	r0, [pc, #320]	; (16cc <playNote()+0x4fc>)
    158c:	f014 f840 	bl	15610 <Print::print(String const&)>
    1590:	484e      	ldr	r0, [pc, #312]	; (16cc <playNote()+0x4fc>)
    1592:	f014 f86f 	bl	15674 <Print::println()>
    1596:	a80a      	add	r0, sp, #40	; 0x28
    1598:	f014 f9aa 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    159c:	a80e      	add	r0, sp, #56	; 0x38
    159e:	f014 f9a7 	bl	158f0 <String::~String()>
	StringSumHelper(const char *p) : String(p) {}
    15a2:	494c      	ldr	r1, [pc, #304]	; (16d4 <playNote()+0x504>)
    15a4:	a80e      	add	r0, sp, #56	; 0x38
    15a6:	f014 f9df 	bl	15968 <String::String(char const*)>
      Serial.println(" -->edit: " + String(SMP.edit));
    15aa:	220a      	movs	r2, #10
    15ac:	69a1      	ldr	r1, [r4, #24]
    15ae:	a80a      	add	r0, sp, #40	; 0x28
    15b0:	f014 f9ee 	bl	15990 <String::String(int, unsigned char)>
    15b4:	a90a      	add	r1, sp, #40	; 0x28
    15b6:	a80e      	add	r0, sp, #56	; 0x38
    15b8:	f014 fa90 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    15bc:	4601      	mov	r1, r0
    15be:	4843      	ldr	r0, [pc, #268]	; (16cc <playNote()+0x4fc>)
    15c0:	f014 f826 	bl	15610 <Print::print(String const&)>
    15c4:	4841      	ldr	r0, [pc, #260]	; (16cc <playNote()+0x4fc>)
    15c6:	f014 f855 	bl	15674 <Print::println()>
    15ca:	a80a      	add	r0, sp, #40	; 0x28
    15cc:	f014 f990 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    15d0:	a80e      	add	r0, sp, #56	; 0x38
    15d2:	f014 f98d 	bl	158f0 <String::~String()>
    if (beat > maxX * lastPage) beat = 1;
    15d6:	f8d9 3000 	ldr.w	r3, [r9]
    15da:	e613      	b.n	1204 <playNote()+0x34>
    unsigned long voice_noteOn[MAX_VOICES] {0};

    uint8_t getFirstFreeVoice() {
        unsigned long leastRecentNoteOffEvent = UINT32_MAX;
        uint8_t indexOfVoiceWithLeastRecentNoteOff = 255;
        for (int i=0; i < _numVoices; i++) {
    15dc:	f890 00b0 	ldrb.w	r0, [r0, #176]	; 0xb0
    15e0:	2800      	cmp	r0, #0
    15e2:	d04e      	beq.n	1682 <playNote()+0x4b2>
    15e4:	4d3c      	ldr	r5, [pc, #240]	; (16d8 <playNote()+0x508>)
    15e6:	f10e 069f 	add.w	r6, lr, #159	; 0x9f
    15ea:	9407      	str	r4, [sp, #28]
        unsigned long leastRecentNoteOffEvent = UINT32_MAX;
    15ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    15f0:	462c      	mov	r4, r5
    15f2:	442e      	add	r6, r5
    15f4:	f10e 05b4 	add.w	r5, lr, #180	; 0xb4
    15f8:	442c      	add	r4, r5
    15fa:	9406      	str	r4, [sp, #24]
    15fc:	9c07      	ldr	r4, [sp, #28]
    15fe:	e003      	b.n	1608 <playNote()+0x438>
        for (int i=0; i < _numVoices; i++) {
    1600:	1c65      	adds	r5, r4, #1
    1602:	42a8      	cmp	r0, r5
    1604:	d00f      	beq.n	1626 <playNote()+0x456>
    1606:	462c      	mov	r4, r5
            if (activeVoices[i] == 255) {
    1608:	f816 5f01 	ldrb.w	r5, [r6, #1]!
    160c:	2dff      	cmp	r5, #255	; 0xff
    160e:	d1f7      	bne.n	1600 <playNote()+0x430>
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    1610:	9d06      	ldr	r5, [sp, #24]
    1612:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    1616:	45ac      	cmp	ip, r5
    1618:	d9f2      	bls.n	1600 <playNote()+0x430>
                    leastRecentNoteOffEvent = voice_noteOff[i];
                    indexOfVoiceWithLeastRecentNoteOff = i;
    161a:	46ac      	mov	ip, r5
    161c:	b2e5      	uxtb	r5, r4
    161e:	9504      	str	r5, [sp, #16]
        for (int i=0; i < _numVoices; i++) {
    1620:	1c65      	adds	r5, r4, #1
    1622:	42a8      	cmp	r0, r5
    1624:	d1ef      	bne.n	1606 <playNote()+0x436>
                }
            }
        }
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    1626:	9407      	str	r4, [sp, #28]
    1628:	9c04      	ldr	r4, [sp, #16]
    162a:	2cff      	cmp	r4, #255	; 0xff
    162c:	d02f      	beq.n	168e <playNote()+0x4be>
            if (indexOfVoice < _numVoices) {
    162e:	9d04      	ldr	r5, [sp, #16]
    1630:	42a8      	cmp	r0, r5
    1632:	d926      	bls.n	1682 <playNote()+0x4b2>
                activeVoices[indexOfVoice] = noteNumber;
    1634:	9805      	ldr	r0, [sp, #20]
        if (indexOfVoice != 255) {            
    1636:	2dff      	cmp	r5, #255	; 0xff
                activeVoices[indexOfVoice] = noteNumber;
    1638:	4c27      	ldr	r4, [pc, #156]	; (16d8 <playNote()+0x508>)
    163a:	4418      	add	r0, r3
    163c:	9e02      	ldr	r6, [sp, #8]
    163e:	eb04 1080 	add.w	r0, r4, r0, lsl #6
    1642:	eb00 0405 	add.w	r4, r0, r5
                activeNotes[noteNumber] = indexOfVoice;                
    1646:	4430      	add	r0, r6
                activeVoices[indexOfVoice] = noteNumber;
    1648:	f884 60a0 	strb.w	r6, [r4, #160]	; 0xa0
                activeNotes[noteNumber] = indexOfVoice;                
    164c:	f880 5020 	strb.w	r5, [r0, #32]
        if (indexOfVoice != 255) {            
    1650:	f43f aee4 	beq.w	141c <playNote()+0x24c>
        bool isretrigger = false;
    1654:	2500      	movs	r5, #0
    1656:	e6a0      	b.n	139a <playNote()+0x1ca>
		magnitude = n * 65536.0f;
    1658:	eeb0 7a67 	vmov.f32	s14, s15
    165c:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
    1660:	ee17 3a10 	vmov	r3, s14
    1664:	e63f      	b.n	12e6 <playNote()+0x116>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    1666:	ee67 7a89 	vmul.f32	s15, s15, s18
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    166a:	4c1c      	ldr	r4, [pc, #112]	; (16dc <playNote()+0x50c>)
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    166c:	481c      	ldr	r0, [pc, #112]	; (16e0 <playNote()+0x510>)
    166e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1672:	ee17 3a90 	vmov	r3, s15
    1676:	edc0 7a07 	vstr	s15, [r0, #28]
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    167a:	42a3      	cmp	r3, r4
    167c:	f63f ae1d 	bhi.w	12ba <playNote()+0xea>
    1680:	e61d      	b.n	12be <playNote()+0xee>
                Serial.printf("Note dropped: %i \n", noteNumber);
    1682:	9a02      	ldr	r2, [sp, #8]
    1684:	4917      	ldr	r1, [pc, #92]	; (16e4 <playNote()+0x514>)
    1686:	4811      	ldr	r0, [pc, #68]	; (16cc <playNote()+0x4fc>)
    1688:	f014 f810 	bl	156ac <Print::printf(char const*, ...)>
        if (indexOfVoice != 255) {            
    168c:	e6be      	b.n	140c <playNote()+0x23c>
    168e:	f10e 05f0 	add.w	r5, lr, #240	; 0xf0
    1692:	4c11      	ldr	r4, [pc, #68]	; (16d8 <playNote()+0x508>)
    1694:	9306      	str	r3, [sp, #24]
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    1696:	2600      	movs	r6, #0
    1698:	4425      	add	r5, r4
    169a:	f8dd e01c 	ldr.w	lr, [sp, #28]
    169e:	9b04      	ldr	r3, [sp, #16]
    16a0:	e000      	b.n	16a4 <playNote()+0x4d4>
    16a2:	4626      	mov	r6, r4
            // all voices are in use... return the voice with least recent note off
            unsigned long leastRecentNoteOnEvent = UINT32_MAX;
            for (int i=0; i < _numVoices; i++) {
                if (voice_noteOn[i] < leastRecentNoteOffEvent) {
    16a4:	f855 4f04 	ldr.w	r4, [r5, #4]!
    16a8:	45a4      	cmp	ip, r4
    16aa:	d901      	bls.n	16b0 <playNote()+0x4e0>
                    leastRecentNoteOffEvent = voice_noteOn[i];
                    indexOfVoiceWithLeastRecentNoteOff = i;
    16ac:	46a4      	mov	ip, r4
    16ae:	b2f3      	uxtb	r3, r6
            for (int i=0; i < _numVoices; i++) {
    16b0:	45b6      	cmp	lr, r6
    16b2:	f106 0401 	add.w	r4, r6, #1
    16b6:	d1f4      	bne.n	16a2 <playNote()+0x4d2>
    16b8:	9304      	str	r3, [sp, #16]
    16ba:	9b06      	ldr	r3, [sp, #24]
    16bc:	e7b7      	b.n	162e <playNote()+0x45e>
	  __throw_bad_function_call();
    16be:	f017 faad 	bl	18c1c <std::__throw_bad_function_call()>
    16c2:	bf00      	nop
    16c4:	20003b28 	.word	0x20003b28
    16c8:	20000ab8 	.word	0x20000ab8
    16cc:	20003314 	.word	0x20003314
    16d0:	20000ac4 	.word	0x20000ac4
    16d4:	20000ad4 	.word	0x20000ad4
    16d8:	2000561c 	.word	0x2000561c
    16dc:	7ffe0000 	.word	0x7ffe0000
    16e0:	2000c794 	.word	0x2000c794
    16e4:	20000af8 	.word	0x20000af8

000016e8 <Encoder::isr1()>:
#if defined(ENCODER_USE_INTERRUPTS) && !defined(ENCODER_OPTIMIZE_INTERRUPTS)
	#ifdef CORE_INT0_PIN
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
	#endif
	#ifdef CORE_INT1_PIN
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    16e8:	4b21      	ldr	r3, [pc, #132]	; (1770 <Encoder::isr1()+0x88>)
    16ea:	685a      	ldr	r2, [r3, #4]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16ec:	e9d2 1000 	ldrd	r1, r0, [r2]
    16f0:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16f2:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16f4:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    16f6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    16f8:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    16fa:	6894      	ldr	r4, [r2, #8]
    16fc:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1700:	d02e      	beq.n	1760 <Encoder::isr1()+0x78>
		uint8_t state = arg->state & 3;
    1702:	7c13      	ldrb	r3, [r2, #16]
    1704:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1708:	b9d9      	cbnz	r1, 1742 <Encoder::isr1()+0x5a>
		if (p2val) state |= 8;
    170a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    170e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1710:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1712:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1714:	2b0d      	cmp	r3, #13
    1716:	d80b      	bhi.n	1730 <Encoder::isr1()+0x48>
    1718:	e8df f003 	tbb	[pc, r3]
    171c:	071c070d 	.word	0x071c070d
    1720:	0d0d160a 	.word	0x0d0d160a
    1724:	1c070a16 	.word	0x1c070a16
    1728:	0d07      	.short	0x0d07
				arg->position--;
    172a:	6953      	ldr	r3, [r2, #20]
    172c:	3b01      	subs	r3, #1
    172e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    1730:	f85d 4b04 	ldr.w	r4, [sp], #4
    1734:	4770      	bx	lr
				arg->position++;
    1736:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    1738:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    173c:	3301      	adds	r3, #1
    173e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    1740:	4770      	bx	lr
		if (p1val) state |= 4;
    1742:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1746:	e7e0      	b.n	170a <Encoder::isr1()+0x22>
				arg->position -= 2;
    1748:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    174a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    174e:	3b02      	subs	r3, #2
    1750:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    1752:	4770      	bx	lr
				arg->position += 2;
    1754:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    1756:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    175a:	3302      	adds	r3, #2
    175c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr1(void) { update(interruptArgs[1]); }
    175e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1760:	7c13      	ldrb	r3, [r2, #16]
    1762:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1766:	2900      	cmp	r1, #0
    1768:	d0d1      	beq.n	170e <Encoder::isr1()+0x26>
    176a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    176e:	e7ce      	b.n	170e <Encoder::isr1()+0x26>
    1770:	200051ec 	.word	0x200051ec

00001774 <Encoder::isr2()>:
	#endif
	#ifdef CORE_INT2_PIN
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    1774:	4b21      	ldr	r3, [pc, #132]	; (17fc <Encoder::isr2()+0x88>)
    1776:	689a      	ldr	r2, [r3, #8]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1778:	e9d2 1000 	ldrd	r1, r0, [r2]
    177c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    177e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1780:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    1782:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1784:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1786:	6894      	ldr	r4, [r2, #8]
    1788:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    178c:	d02e      	beq.n	17ec <Encoder::isr2()+0x78>
		uint8_t state = arg->state & 3;
    178e:	7c13      	ldrb	r3, [r2, #16]
    1790:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1794:	b9d9      	cbnz	r1, 17ce <Encoder::isr2()+0x5a>
		if (p2val) state |= 8;
    1796:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    179a:	0899      	lsrs	r1, r3, #2
		switch (state) {
    179c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    179e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    17a0:	2b0d      	cmp	r3, #13
    17a2:	d80b      	bhi.n	17bc <Encoder::isr2()+0x48>
    17a4:	e8df f003 	tbb	[pc, r3]
    17a8:	071c070d 	.word	0x071c070d
    17ac:	0d0d160a 	.word	0x0d0d160a
    17b0:	1c070a16 	.word	0x1c070a16
    17b4:	0d07      	.short	0x0d07
				arg->position--;
    17b6:	6953      	ldr	r3, [r2, #20]
    17b8:	3b01      	subs	r3, #1
    17ba:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17bc:	f85d 4b04 	ldr.w	r4, [sp], #4
    17c0:	4770      	bx	lr
				arg->position++;
    17c2:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17c4:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    17c8:	3301      	adds	r3, #1
    17ca:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17cc:	4770      	bx	lr
		if (p1val) state |= 4;
    17ce:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    17d2:	e7e0      	b.n	1796 <Encoder::isr2()+0x22>
				arg->position -= 2;
    17d4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17d6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    17da:	3b02      	subs	r3, #2
    17dc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17de:	4770      	bx	lr
				arg->position += 2;
    17e0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17e2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    17e6:	3302      	adds	r3, #2
    17e8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr2(void) { update(interruptArgs[2]); }
    17ea:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    17ec:	7c13      	ldrb	r3, [r2, #16]
    17ee:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    17f2:	2900      	cmp	r1, #0
    17f4:	d0d1      	beq.n	179a <Encoder::isr2()+0x26>
    17f6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    17fa:	e7ce      	b.n	179a <Encoder::isr2()+0x26>
    17fc:	200051ec 	.word	0x200051ec

00001800 <Encoder::isr3()>:
	#endif
	#ifdef CORE_INT3_PIN
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1800:	4b21      	ldr	r3, [pc, #132]	; (1888 <Encoder::isr3()+0x88>)
    1802:	68da      	ldr	r2, [r3, #12]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1804:	e9d2 1000 	ldrd	r1, r0, [r2]
    1808:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    180a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    180c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    180e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1810:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1812:	6894      	ldr	r4, [r2, #8]
    1814:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1818:	d02e      	beq.n	1878 <Encoder::isr3()+0x78>
		uint8_t state = arg->state & 3;
    181a:	7c13      	ldrb	r3, [r2, #16]
    181c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1820:	b9d9      	cbnz	r1, 185a <Encoder::isr3()+0x5a>
		if (p2val) state |= 8;
    1822:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1826:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1828:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    182a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    182c:	2b0d      	cmp	r3, #13
    182e:	d80b      	bhi.n	1848 <Encoder::isr3()+0x48>
    1830:	e8df f003 	tbb	[pc, r3]
    1834:	071c070d 	.word	0x071c070d
    1838:	0d0d160a 	.word	0x0d0d160a
    183c:	1c070a16 	.word	0x1c070a16
    1840:	0d07      	.short	0x0d07
				arg->position--;
    1842:	6953      	ldr	r3, [r2, #20]
    1844:	3b01      	subs	r3, #1
    1846:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1848:	f85d 4b04 	ldr.w	r4, [sp], #4
    184c:	4770      	bx	lr
				arg->position++;
    184e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1850:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1854:	3301      	adds	r3, #1
    1856:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1858:	4770      	bx	lr
		if (p1val) state |= 4;
    185a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    185e:	e7e0      	b.n	1822 <Encoder::isr3()+0x22>
				arg->position -= 2;
    1860:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1862:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1866:	3b02      	subs	r3, #2
    1868:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    186a:	4770      	bx	lr
				arg->position += 2;
    186c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    186e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1872:	3302      	adds	r3, #2
    1874:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr3(void) { update(interruptArgs[3]); }
    1876:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1878:	7c13      	ldrb	r3, [r2, #16]
    187a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    187e:	2900      	cmp	r1, #0
    1880:	d0d1      	beq.n	1826 <Encoder::isr3()+0x26>
    1882:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1886:	e7ce      	b.n	1826 <Encoder::isr3()+0x26>
    1888:	200051ec 	.word	0x200051ec

0000188c <Encoder::isr4()>:
	#endif
	#ifdef CORE_INT4_PIN
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    188c:	4b21      	ldr	r3, [pc, #132]	; (1914 <Encoder::isr4()+0x88>)
    188e:	691a      	ldr	r2, [r3, #16]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1890:	e9d2 1000 	ldrd	r1, r0, [r2]
    1894:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1896:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1898:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    189a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    189c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    189e:	6894      	ldr	r4, [r2, #8]
    18a0:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    18a4:	d02e      	beq.n	1904 <Encoder::isr4()+0x78>
		uint8_t state = arg->state & 3;
    18a6:	7c13      	ldrb	r3, [r2, #16]
    18a8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    18ac:	b9d9      	cbnz	r1, 18e6 <Encoder::isr4()+0x5a>
		if (p2val) state |= 8;
    18ae:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    18b2:	0899      	lsrs	r1, r3, #2
		switch (state) {
    18b4:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    18b6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    18b8:	2b0d      	cmp	r3, #13
    18ba:	d80b      	bhi.n	18d4 <Encoder::isr4()+0x48>
    18bc:	e8df f003 	tbb	[pc, r3]
    18c0:	071c070d 	.word	0x071c070d
    18c4:	0d0d160a 	.word	0x0d0d160a
    18c8:	1c070a16 	.word	0x1c070a16
    18cc:	0d07      	.short	0x0d07
				arg->position--;
    18ce:	6953      	ldr	r3, [r2, #20]
    18d0:	3b01      	subs	r3, #1
    18d2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    18d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    18d8:	4770      	bx	lr
				arg->position++;
    18da:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    18dc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    18e0:	3301      	adds	r3, #1
    18e2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    18e4:	4770      	bx	lr
		if (p1val) state |= 4;
    18e6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    18ea:	e7e0      	b.n	18ae <Encoder::isr4()+0x22>
				arg->position -= 2;
    18ec:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    18ee:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    18f2:	3b02      	subs	r3, #2
    18f4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    18f6:	4770      	bx	lr
				arg->position += 2;
    18f8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    18fa:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    18fe:	3302      	adds	r3, #2
    1900:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr4(void) { update(interruptArgs[4]); }
    1902:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1904:	7c13      	ldrb	r3, [r2, #16]
    1906:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    190a:	2900      	cmp	r1, #0
    190c:	d0d1      	beq.n	18b2 <Encoder::isr4()+0x26>
    190e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1912:	e7ce      	b.n	18b2 <Encoder::isr4()+0x26>
    1914:	200051ec 	.word	0x200051ec

00001918 <Encoder::isr5()>:
	#endif
	#ifdef CORE_INT5_PIN
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1918:	4b21      	ldr	r3, [pc, #132]	; (19a0 <Encoder::isr5()+0x88>)
    191a:	695a      	ldr	r2, [r3, #20]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    191c:	e9d2 1000 	ldrd	r1, r0, [r2]
    1920:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1922:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1924:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1926:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1928:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    192a:	6894      	ldr	r4, [r2, #8]
    192c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1930:	d02e      	beq.n	1990 <Encoder::isr5()+0x78>
		uint8_t state = arg->state & 3;
    1932:	7c13      	ldrb	r3, [r2, #16]
    1934:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1938:	b9d9      	cbnz	r1, 1972 <Encoder::isr5()+0x5a>
		if (p2val) state |= 8;
    193a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    193e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1940:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1942:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1944:	2b0d      	cmp	r3, #13
    1946:	d80b      	bhi.n	1960 <Encoder::isr5()+0x48>
    1948:	e8df f003 	tbb	[pc, r3]
    194c:	071c070d 	.word	0x071c070d
    1950:	0d0d160a 	.word	0x0d0d160a
    1954:	1c070a16 	.word	0x1c070a16
    1958:	0d07      	.short	0x0d07
				arg->position--;
    195a:	6953      	ldr	r3, [r2, #20]
    195c:	3b01      	subs	r3, #1
    195e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1960:	f85d 4b04 	ldr.w	r4, [sp], #4
    1964:	4770      	bx	lr
				arg->position++;
    1966:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1968:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    196c:	3301      	adds	r3, #1
    196e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1970:	4770      	bx	lr
		if (p1val) state |= 4;
    1972:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1976:	e7e0      	b.n	193a <Encoder::isr5()+0x22>
				arg->position -= 2;
    1978:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    197a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    197e:	3b02      	subs	r3, #2
    1980:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1982:	4770      	bx	lr
				arg->position += 2;
    1984:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    1986:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    198a:	3302      	adds	r3, #2
    198c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr5(void) { update(interruptArgs[5]); }
    198e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1990:	7c13      	ldrb	r3, [r2, #16]
    1992:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1996:	2900      	cmp	r1, #0
    1998:	d0d1      	beq.n	193e <Encoder::isr5()+0x26>
    199a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    199e:	e7ce      	b.n	193e <Encoder::isr5()+0x26>
    19a0:	200051ec 	.word	0x200051ec

000019a4 <Encoder::isr6()>:
	#endif
	#ifdef CORE_INT6_PIN
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    19a4:	4b21      	ldr	r3, [pc, #132]	; (1a2c <Encoder::isr6()+0x88>)
    19a6:	699a      	ldr	r2, [r3, #24]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19a8:	e9d2 1000 	ldrd	r1, r0, [r2]
    19ac:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    19ae:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19b0:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    19b2:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19b4:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    19b6:	6894      	ldr	r4, [r2, #8]
    19b8:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    19bc:	d02e      	beq.n	1a1c <Encoder::isr6()+0x78>
		uint8_t state = arg->state & 3;
    19be:	7c13      	ldrb	r3, [r2, #16]
    19c0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    19c4:	b9d9      	cbnz	r1, 19fe <Encoder::isr6()+0x5a>
		if (p2val) state |= 8;
    19c6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    19ca:	0899      	lsrs	r1, r3, #2
		switch (state) {
    19cc:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    19ce:	7411      	strb	r1, [r2, #16]
		switch (state) {
    19d0:	2b0d      	cmp	r3, #13
    19d2:	d80b      	bhi.n	19ec <Encoder::isr6()+0x48>
    19d4:	e8df f003 	tbb	[pc, r3]
    19d8:	071c070d 	.word	0x071c070d
    19dc:	0d0d160a 	.word	0x0d0d160a
    19e0:	1c070a16 	.word	0x1c070a16
    19e4:	0d07      	.short	0x0d07
				arg->position--;
    19e6:	6953      	ldr	r3, [r2, #20]
    19e8:	3b01      	subs	r3, #1
    19ea:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    19ec:	f85d 4b04 	ldr.w	r4, [sp], #4
    19f0:	4770      	bx	lr
				arg->position++;
    19f2:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    19f4:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    19f8:	3301      	adds	r3, #1
    19fa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    19fc:	4770      	bx	lr
		if (p1val) state |= 4;
    19fe:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1a02:	e7e0      	b.n	19c6 <Encoder::isr6()+0x22>
				arg->position -= 2;
    1a04:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    1a06:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1a0a:	3b02      	subs	r3, #2
    1a0c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    1a0e:	4770      	bx	lr
				arg->position += 2;
    1a10:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    1a12:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1a16:	3302      	adds	r3, #2
    1a18:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr6(void) { update(interruptArgs[6]); }
    1a1a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1a1c:	7c13      	ldrb	r3, [r2, #16]
    1a1e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1a22:	2900      	cmp	r1, #0
    1a24:	d0d1      	beq.n	19ca <Encoder::isr6()+0x26>
    1a26:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1a2a:	e7ce      	b.n	19ca <Encoder::isr6()+0x26>
    1a2c:	200051ec 	.word	0x200051ec

00001a30 <Encoder::isr7()>:
	#endif
	#ifdef CORE_INT7_PIN
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a30:	4b21      	ldr	r3, [pc, #132]	; (1ab8 <Encoder::isr7()+0x88>)
    1a32:	69da      	ldr	r2, [r3, #28]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a34:	e9d2 1000 	ldrd	r1, r0, [r2]
    1a38:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a3a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a3c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a3e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a40:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1a42:	6894      	ldr	r4, [r2, #8]
    1a44:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1a48:	d02e      	beq.n	1aa8 <Encoder::isr7()+0x78>
		uint8_t state = arg->state & 3;
    1a4a:	7c13      	ldrb	r3, [r2, #16]
    1a4c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1a50:	b9d9      	cbnz	r1, 1a8a <Encoder::isr7()+0x5a>
		if (p2val) state |= 8;
    1a52:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1a56:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1a58:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1a5a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1a5c:	2b0d      	cmp	r3, #13
    1a5e:	d80b      	bhi.n	1a78 <Encoder::isr7()+0x48>
    1a60:	e8df f003 	tbb	[pc, r3]
    1a64:	071c070d 	.word	0x071c070d
    1a68:	0d0d160a 	.word	0x0d0d160a
    1a6c:	1c070a16 	.word	0x1c070a16
    1a70:	0d07      	.short	0x0d07
				arg->position--;
    1a72:	6953      	ldr	r3, [r2, #20]
    1a74:	3b01      	subs	r3, #1
    1a76:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a78:	f85d 4b04 	ldr.w	r4, [sp], #4
    1a7c:	4770      	bx	lr
				arg->position++;
    1a7e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a80:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1a84:	3301      	adds	r3, #1
    1a86:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a88:	4770      	bx	lr
		if (p1val) state |= 4;
    1a8a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1a8e:	e7e0      	b.n	1a52 <Encoder::isr7()+0x22>
				arg->position -= 2;
    1a90:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a92:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1a96:	3b02      	subs	r3, #2
    1a98:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a9a:	4770      	bx	lr
				arg->position += 2;
    1a9c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1a9e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1aa2:	3302      	adds	r3, #2
    1aa4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr7(void) { update(interruptArgs[7]); }
    1aa6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1aa8:	7c13      	ldrb	r3, [r2, #16]
    1aaa:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1aae:	2900      	cmp	r1, #0
    1ab0:	d0d1      	beq.n	1a56 <Encoder::isr7()+0x26>
    1ab2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1ab6:	e7ce      	b.n	1a56 <Encoder::isr7()+0x26>
    1ab8:	200051ec 	.word	0x200051ec

00001abc <Encoder::isr8()>:
	#endif
	#ifdef CORE_INT8_PIN
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1abc:	4b21      	ldr	r3, [pc, #132]	; (1b44 <Encoder::isr8()+0x88>)
    1abe:	6a1a      	ldr	r2, [r3, #32]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ac0:	e9d2 1000 	ldrd	r1, r0, [r2]
    1ac4:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ac6:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ac8:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1aca:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1acc:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ace:	6894      	ldr	r4, [r2, #8]
    1ad0:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ad4:	d02e      	beq.n	1b34 <Encoder::isr8()+0x78>
		uint8_t state = arg->state & 3;
    1ad6:	7c13      	ldrb	r3, [r2, #16]
    1ad8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1adc:	b9d9      	cbnz	r1, 1b16 <Encoder::isr8()+0x5a>
		if (p2val) state |= 8;
    1ade:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1ae2:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1ae4:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1ae6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1ae8:	2b0d      	cmp	r3, #13
    1aea:	d80b      	bhi.n	1b04 <Encoder::isr8()+0x48>
    1aec:	e8df f003 	tbb	[pc, r3]
    1af0:	071c070d 	.word	0x071c070d
    1af4:	0d0d160a 	.word	0x0d0d160a
    1af8:	1c070a16 	.word	0x1c070a16
    1afc:	0d07      	.short	0x0d07
				arg->position--;
    1afe:	6953      	ldr	r3, [r2, #20]
    1b00:	3b01      	subs	r3, #1
    1b02:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b04:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b08:	4770      	bx	lr
				arg->position++;
    1b0a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b0c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1b10:	3301      	adds	r3, #1
    1b12:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b14:	4770      	bx	lr
		if (p1val) state |= 4;
    1b16:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1b1a:	e7e0      	b.n	1ade <Encoder::isr8()+0x22>
				arg->position -= 2;
    1b1c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b1e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1b22:	3b02      	subs	r3, #2
    1b24:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b26:	4770      	bx	lr
				arg->position += 2;
    1b28:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b2a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1b2e:	3302      	adds	r3, #2
    1b30:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr8(void) { update(interruptArgs[8]); }
    1b32:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1b34:	7c13      	ldrb	r3, [r2, #16]
    1b36:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1b3a:	2900      	cmp	r1, #0
    1b3c:	d0d1      	beq.n	1ae2 <Encoder::isr8()+0x26>
    1b3e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1b42:	e7ce      	b.n	1ae2 <Encoder::isr8()+0x26>
    1b44:	200051ec 	.word	0x200051ec

00001b48 <Encoder::isr9()>:
	#endif
	#ifdef CORE_INT9_PIN
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1b48:	4b21      	ldr	r3, [pc, #132]	; (1bd0 <Encoder::isr9()+0x88>)
    1b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b4c:	e9d2 1000 	ldrd	r1, r0, [r2]
    1b50:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b52:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b54:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1b56:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b58:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1b5a:	6894      	ldr	r4, [r2, #8]
    1b5c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1b60:	d02e      	beq.n	1bc0 <Encoder::isr9()+0x78>
		uint8_t state = arg->state & 3;
    1b62:	7c13      	ldrb	r3, [r2, #16]
    1b64:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1b68:	b9d9      	cbnz	r1, 1ba2 <Encoder::isr9()+0x5a>
		if (p2val) state |= 8;
    1b6a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1b6e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1b70:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1b72:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1b74:	2b0d      	cmp	r3, #13
    1b76:	d80b      	bhi.n	1b90 <Encoder::isr9()+0x48>
    1b78:	e8df f003 	tbb	[pc, r3]
    1b7c:	071c070d 	.word	0x071c070d
    1b80:	0d0d160a 	.word	0x0d0d160a
    1b84:	1c070a16 	.word	0x1c070a16
    1b88:	0d07      	.short	0x0d07
				arg->position--;
    1b8a:	6953      	ldr	r3, [r2, #20]
    1b8c:	3b01      	subs	r3, #1
    1b8e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1b90:	f85d 4b04 	ldr.w	r4, [sp], #4
    1b94:	4770      	bx	lr
				arg->position++;
    1b96:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1b98:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1b9c:	3301      	adds	r3, #1
    1b9e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1ba0:	4770      	bx	lr
		if (p1val) state |= 4;
    1ba2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1ba6:	e7e0      	b.n	1b6a <Encoder::isr9()+0x22>
				arg->position -= 2;
    1ba8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1baa:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1bae:	3b02      	subs	r3, #2
    1bb0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1bb2:	4770      	bx	lr
				arg->position += 2;
    1bb4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1bb6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1bba:	3302      	adds	r3, #2
    1bbc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr9(void) { update(interruptArgs[9]); }
    1bbe:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1bc0:	7c13      	ldrb	r3, [r2, #16]
    1bc2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1bc6:	2900      	cmp	r1, #0
    1bc8:	d0d1      	beq.n	1b6e <Encoder::isr9()+0x26>
    1bca:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1bce:	e7ce      	b.n	1b6e <Encoder::isr9()+0x26>
    1bd0:	200051ec 	.word	0x200051ec

00001bd4 <Encoder::isr10()>:
	#endif
	#ifdef CORE_INT10_PIN
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1bd4:	4b21      	ldr	r3, [pc, #132]	; (1c5c <Encoder::isr10()+0x88>)
    1bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1bd8:	e9d2 1000 	ldrd	r1, r0, [r2]
    1bdc:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1bde:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1be0:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1be2:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1be4:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1be6:	6894      	ldr	r4, [r2, #8]
    1be8:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1bec:	d02e      	beq.n	1c4c <Encoder::isr10()+0x78>
		uint8_t state = arg->state & 3;
    1bee:	7c13      	ldrb	r3, [r2, #16]
    1bf0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1bf4:	b9d9      	cbnz	r1, 1c2e <Encoder::isr10()+0x5a>
		if (p2val) state |= 8;
    1bf6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1bfa:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1bfc:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1bfe:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1c00:	2b0d      	cmp	r3, #13
    1c02:	d80b      	bhi.n	1c1c <Encoder::isr10()+0x48>
    1c04:	e8df f003 	tbb	[pc, r3]
    1c08:	071c070d 	.word	0x071c070d
    1c0c:	0d0d160a 	.word	0x0d0d160a
    1c10:	1c070a16 	.word	0x1c070a16
    1c14:	0d07      	.short	0x0d07
				arg->position--;
    1c16:	6953      	ldr	r3, [r2, #20]
    1c18:	3b01      	subs	r3, #1
    1c1a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c1c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1c20:	4770      	bx	lr
				arg->position++;
    1c22:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c24:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1c28:	3301      	adds	r3, #1
    1c2a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c2c:	4770      	bx	lr
		if (p1val) state |= 4;
    1c2e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1c32:	e7e0      	b.n	1bf6 <Encoder::isr10()+0x22>
				arg->position -= 2;
    1c34:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c36:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1c3a:	3b02      	subs	r3, #2
    1c3c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c3e:	4770      	bx	lr
				arg->position += 2;
    1c40:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c42:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1c46:	3302      	adds	r3, #2
    1c48:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr10(void) { update(interruptArgs[10]); }
    1c4a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1c4c:	7c13      	ldrb	r3, [r2, #16]
    1c4e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1c52:	2900      	cmp	r1, #0
    1c54:	d0d1      	beq.n	1bfa <Encoder::isr10()+0x26>
    1c56:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1c5a:	e7ce      	b.n	1bfa <Encoder::isr10()+0x26>
    1c5c:	200051ec 	.word	0x200051ec

00001c60 <Encoder::isr11()>:
	#endif
	#ifdef CORE_INT11_PIN
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1c60:	4b21      	ldr	r3, [pc, #132]	; (1ce8 <Encoder::isr11()+0x88>)
    1c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1c64:	e9d2 1000 	ldrd	r1, r0, [r2]
    1c68:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1c6a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1c6c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1c6e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1c70:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1c72:	6894      	ldr	r4, [r2, #8]
    1c74:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1c78:	d02e      	beq.n	1cd8 <Encoder::isr11()+0x78>
		uint8_t state = arg->state & 3;
    1c7a:	7c13      	ldrb	r3, [r2, #16]
    1c7c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1c80:	b9d9      	cbnz	r1, 1cba <Encoder::isr11()+0x5a>
		if (p2val) state |= 8;
    1c82:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1c86:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1c88:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1c8a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1c8c:	2b0d      	cmp	r3, #13
    1c8e:	d80b      	bhi.n	1ca8 <Encoder::isr11()+0x48>
    1c90:	e8df f003 	tbb	[pc, r3]
    1c94:	071c070d 	.word	0x071c070d
    1c98:	0d0d160a 	.word	0x0d0d160a
    1c9c:	1c070a16 	.word	0x1c070a16
    1ca0:	0d07      	.short	0x0d07
				arg->position--;
    1ca2:	6953      	ldr	r3, [r2, #20]
    1ca4:	3b01      	subs	r3, #1
    1ca6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
    1cac:	4770      	bx	lr
				arg->position++;
    1cae:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1cb4:	3301      	adds	r3, #1
    1cb6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1cb8:	4770      	bx	lr
		if (p1val) state |= 4;
    1cba:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1cbe:	e7e0      	b.n	1c82 <Encoder::isr11()+0x22>
				arg->position -= 2;
    1cc0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1cc6:	3b02      	subs	r3, #2
    1cc8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1cca:	4770      	bx	lr
				arg->position += 2;
    1ccc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1cce:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1cd2:	3302      	adds	r3, #2
    1cd4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr11(void) { update(interruptArgs[11]); }
    1cd6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1cd8:	7c13      	ldrb	r3, [r2, #16]
    1cda:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1cde:	2900      	cmp	r1, #0
    1ce0:	d0d1      	beq.n	1c86 <Encoder::isr11()+0x26>
    1ce2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1ce6:	e7ce      	b.n	1c86 <Encoder::isr11()+0x26>
    1ce8:	200051ec 	.word	0x200051ec

00001cec <Encoder::isr12()>:
	#endif
	#ifdef CORE_INT12_PIN
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1cec:	4b21      	ldr	r3, [pc, #132]	; (1d74 <Encoder::isr12()+0x88>)
    1cee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1cf0:	e9d2 1000 	ldrd	r1, r0, [r2]
    1cf4:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1cf6:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1cf8:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1cfa:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1cfc:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1cfe:	6894      	ldr	r4, [r2, #8]
    1d00:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d04:	d02e      	beq.n	1d64 <Encoder::isr12()+0x78>
		uint8_t state = arg->state & 3;
    1d06:	7c13      	ldrb	r3, [r2, #16]
    1d08:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1d0c:	b9d9      	cbnz	r1, 1d46 <Encoder::isr12()+0x5a>
		if (p2val) state |= 8;
    1d0e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1d12:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1d14:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1d16:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1d18:	2b0d      	cmp	r3, #13
    1d1a:	d80b      	bhi.n	1d34 <Encoder::isr12()+0x48>
    1d1c:	e8df f003 	tbb	[pc, r3]
    1d20:	071c070d 	.word	0x071c070d
    1d24:	0d0d160a 	.word	0x0d0d160a
    1d28:	1c070a16 	.word	0x1c070a16
    1d2c:	0d07      	.short	0x0d07
				arg->position--;
    1d2e:	6953      	ldr	r3, [r2, #20]
    1d30:	3b01      	subs	r3, #1
    1d32:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d34:	f85d 4b04 	ldr.w	r4, [sp], #4
    1d38:	4770      	bx	lr
				arg->position++;
    1d3a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1d40:	3301      	adds	r3, #1
    1d42:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d44:	4770      	bx	lr
		if (p1val) state |= 4;
    1d46:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1d4a:	e7e0      	b.n	1d0e <Encoder::isr12()+0x22>
				arg->position -= 2;
    1d4c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1d52:	3b02      	subs	r3, #2
    1d54:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d56:	4770      	bx	lr
				arg->position += 2;
    1d58:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1d5e:	3302      	adds	r3, #2
    1d60:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr12(void) { update(interruptArgs[12]); }
    1d62:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1d64:	7c13      	ldrb	r3, [r2, #16]
    1d66:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1d6a:	2900      	cmp	r1, #0
    1d6c:	d0d1      	beq.n	1d12 <Encoder::isr12()+0x26>
    1d6e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1d72:	e7ce      	b.n	1d12 <Encoder::isr12()+0x26>
    1d74:	200051ec 	.word	0x200051ec

00001d78 <Encoder::isr13()>:
	#endif
	#ifdef CORE_INT13_PIN
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1d78:	4b21      	ldr	r3, [pc, #132]	; (1e00 <Encoder::isr13()+0x88>)
    1d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d7c:	e9d2 1000 	ldrd	r1, r0, [r2]
    1d80:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1d82:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d84:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1d86:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d88:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1d8a:	6894      	ldr	r4, [r2, #8]
    1d8c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1d90:	d02e      	beq.n	1df0 <Encoder::isr13()+0x78>
		uint8_t state = arg->state & 3;
    1d92:	7c13      	ldrb	r3, [r2, #16]
    1d94:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1d98:	b9d9      	cbnz	r1, 1dd2 <Encoder::isr13()+0x5a>
		if (p2val) state |= 8;
    1d9a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1d9e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1da0:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1da2:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1da4:	2b0d      	cmp	r3, #13
    1da6:	d80b      	bhi.n	1dc0 <Encoder::isr13()+0x48>
    1da8:	e8df f003 	tbb	[pc, r3]
    1dac:	071c070d 	.word	0x071c070d
    1db0:	0d0d160a 	.word	0x0d0d160a
    1db4:	1c070a16 	.word	0x1c070a16
    1db8:	0d07      	.short	0x0d07
				arg->position--;
    1dba:	6953      	ldr	r3, [r2, #20]
    1dbc:	3b01      	subs	r3, #1
    1dbe:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    1dc4:	4770      	bx	lr
				arg->position++;
    1dc6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1dc8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1dcc:	3301      	adds	r3, #1
    1dce:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1dd0:	4770      	bx	lr
		if (p1val) state |= 4;
    1dd2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1dd6:	e7e0      	b.n	1d9a <Encoder::isr13()+0x22>
				arg->position -= 2;
    1dd8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1dda:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1dde:	3b02      	subs	r3, #2
    1de0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1de2:	4770      	bx	lr
				arg->position += 2;
    1de4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1de6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1dea:	3302      	adds	r3, #2
    1dec:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr13(void) { update(interruptArgs[13]); }
    1dee:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1df0:	7c13      	ldrb	r3, [r2, #16]
    1df2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1df6:	2900      	cmp	r1, #0
    1df8:	d0d1      	beq.n	1d9e <Encoder::isr13()+0x26>
    1dfa:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1dfe:	e7ce      	b.n	1d9e <Encoder::isr13()+0x26>
    1e00:	200051ec 	.word	0x200051ec

00001e04 <Encoder::isr14()>:
	#endif
	#ifdef CORE_INT14_PIN
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e04:	4b21      	ldr	r3, [pc, #132]	; (1e8c <Encoder::isr14()+0x88>)
    1e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e08:	e9d2 1000 	ldrd	r1, r0, [r2]
    1e0c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1e0e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e10:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e12:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e14:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1e16:	6894      	ldr	r4, [r2, #8]
    1e18:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e1c:	d02e      	beq.n	1e7c <Encoder::isr14()+0x78>
		uint8_t state = arg->state & 3;
    1e1e:	7c13      	ldrb	r3, [r2, #16]
    1e20:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1e24:	b9d9      	cbnz	r1, 1e5e <Encoder::isr14()+0x5a>
		if (p2val) state |= 8;
    1e26:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1e2a:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1e2c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1e2e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1e30:	2b0d      	cmp	r3, #13
    1e32:	d80b      	bhi.n	1e4c <Encoder::isr14()+0x48>
    1e34:	e8df f003 	tbb	[pc, r3]
    1e38:	071c070d 	.word	0x071c070d
    1e3c:	0d0d160a 	.word	0x0d0d160a
    1e40:	1c070a16 	.word	0x1c070a16
    1e44:	0d07      	.short	0x0d07
				arg->position--;
    1e46:	6953      	ldr	r3, [r2, #20]
    1e48:	3b01      	subs	r3, #1
    1e4a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e4c:	f85d 4b04 	ldr.w	r4, [sp], #4
    1e50:	4770      	bx	lr
				arg->position++;
    1e52:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e54:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1e58:	3301      	adds	r3, #1
    1e5a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e5c:	4770      	bx	lr
		if (p1val) state |= 4;
    1e5e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1e62:	e7e0      	b.n	1e26 <Encoder::isr14()+0x22>
				arg->position -= 2;
    1e64:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e66:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1e6a:	3b02      	subs	r3, #2
    1e6c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e6e:	4770      	bx	lr
				arg->position += 2;
    1e70:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e72:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1e76:	3302      	adds	r3, #2
    1e78:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr14(void) { update(interruptArgs[14]); }
    1e7a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1e7c:	7c13      	ldrb	r3, [r2, #16]
    1e7e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1e82:	2900      	cmp	r1, #0
    1e84:	d0d1      	beq.n	1e2a <Encoder::isr14()+0x26>
    1e86:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1e8a:	e7ce      	b.n	1e2a <Encoder::isr14()+0x26>
    1e8c:	200051ec 	.word	0x200051ec

00001e90 <Encoder::isr15()>:
	#endif
	#ifdef CORE_INT15_PIN
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1e90:	4b21      	ldr	r3, [pc, #132]	; (1f18 <Encoder::isr15()+0x88>)
    1e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e94:	e9d2 1000 	ldrd	r1, r0, [r2]
    1e98:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1e9a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1e9c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1e9e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ea0:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1ea2:	6894      	ldr	r4, [r2, #8]
    1ea4:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1ea8:	d02e      	beq.n	1f08 <Encoder::isr15()+0x78>
		uint8_t state = arg->state & 3;
    1eaa:	7c13      	ldrb	r3, [r2, #16]
    1eac:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1eb0:	b9d9      	cbnz	r1, 1eea <Encoder::isr15()+0x5a>
		if (p2val) state |= 8;
    1eb2:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1eb6:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1eb8:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1eba:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1ebc:	2b0d      	cmp	r3, #13
    1ebe:	d80b      	bhi.n	1ed8 <Encoder::isr15()+0x48>
    1ec0:	e8df f003 	tbb	[pc, r3]
    1ec4:	071c070d 	.word	0x071c070d
    1ec8:	0d0d160a 	.word	0x0d0d160a
    1ecc:	1c070a16 	.word	0x1c070a16
    1ed0:	0d07      	.short	0x0d07
				arg->position--;
    1ed2:	6953      	ldr	r3, [r2, #20]
    1ed4:	3b01      	subs	r3, #1
    1ed6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
    1edc:	4770      	bx	lr
				arg->position++;
    1ede:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1ee4:	3301      	adds	r3, #1
    1ee6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1ee8:	4770      	bx	lr
		if (p1val) state |= 4;
    1eea:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1eee:	e7e0      	b.n	1eb2 <Encoder::isr15()+0x22>
				arg->position -= 2;
    1ef0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1ef2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1ef6:	3b02      	subs	r3, #2
    1ef8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1efa:	4770      	bx	lr
				arg->position += 2;
    1efc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1efe:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1f02:	3302      	adds	r3, #2
    1f04:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr15(void) { update(interruptArgs[15]); }
    1f06:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1f08:	7c13      	ldrb	r3, [r2, #16]
    1f0a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1f0e:	2900      	cmp	r1, #0
    1f10:	d0d1      	beq.n	1eb6 <Encoder::isr15()+0x26>
    1f12:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1f16:	e7ce      	b.n	1eb6 <Encoder::isr15()+0x26>
    1f18:	200051ec 	.word	0x200051ec

00001f1c <Encoder::isr16()>:
	#endif
	#ifdef CORE_INT16_PIN
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f1c:	4b21      	ldr	r3, [pc, #132]	; (1fa4 <Encoder::isr16()+0x88>)
    1f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1f20:	e9d2 1000 	ldrd	r1, r0, [r2]
    1f24:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1f26:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1f28:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f2a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1f2c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1f2e:	6894      	ldr	r4, [r2, #8]
    1f30:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1f34:	d02e      	beq.n	1f94 <Encoder::isr16()+0x78>
		uint8_t state = arg->state & 3;
    1f36:	7c13      	ldrb	r3, [r2, #16]
    1f38:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1f3c:	b9d9      	cbnz	r1, 1f76 <Encoder::isr16()+0x5a>
		if (p2val) state |= 8;
    1f3e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1f42:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1f44:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1f46:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1f48:	2b0d      	cmp	r3, #13
    1f4a:	d80b      	bhi.n	1f64 <Encoder::isr16()+0x48>
    1f4c:	e8df f003 	tbb	[pc, r3]
    1f50:	071c070d 	.word	0x071c070d
    1f54:	0d0d160a 	.word	0x0d0d160a
    1f58:	1c070a16 	.word	0x1c070a16
    1f5c:	0d07      	.short	0x0d07
				arg->position--;
    1f5e:	6953      	ldr	r3, [r2, #20]
    1f60:	3b01      	subs	r3, #1
    1f62:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f64:	f85d 4b04 	ldr.w	r4, [sp], #4
    1f68:	4770      	bx	lr
				arg->position++;
    1f6a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1f70:	3301      	adds	r3, #1
    1f72:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f74:	4770      	bx	lr
		if (p1val) state |= 4;
    1f76:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1f7a:	e7e0      	b.n	1f3e <Encoder::isr16()+0x22>
				arg->position -= 2;
    1f7c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f7e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    1f82:	3b02      	subs	r3, #2
    1f84:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f86:	4770      	bx	lr
				arg->position += 2;
    1f88:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    1f8e:	3302      	adds	r3, #2
    1f90:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr16(void) { update(interruptArgs[16]); }
    1f92:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    1f94:	7c13      	ldrb	r3, [r2, #16]
    1f96:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1f9a:	2900      	cmp	r1, #0
    1f9c:	d0d1      	beq.n	1f42 <Encoder::isr16()+0x26>
    1f9e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    1fa2:	e7ce      	b.n	1f42 <Encoder::isr16()+0x26>
    1fa4:	200051ec 	.word	0x200051ec

00001fa8 <Encoder::isr53()>:
	#endif
	#ifdef CORE_INT52_PIN
	static ENCODER_ISR_ATTR void isr52(void) { update(interruptArgs[52]); }
	#endif
	#ifdef CORE_INT53_PIN
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    1fa8:	4b22      	ldr	r3, [pc, #136]	; (2034 <Encoder::isr53()+0x8c>)
    1faa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1fae:	e9d2 1000 	ldrd	r1, r0, [r2]
    1fb2:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1fb4:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1fb6:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    1fb8:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1fba:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    1fbc:	6894      	ldr	r4, [r2, #8]
    1fbe:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    1fc2:	d02e      	beq.n	2022 <Encoder::isr53()+0x7a>
		uint8_t state = arg->state & 3;
    1fc4:	7c13      	ldrb	r3, [r2, #16]
    1fc6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    1fca:	b9d9      	cbnz	r1, 2004 <Encoder::isr53()+0x5c>
		if (p2val) state |= 8;
    1fcc:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    1fd0:	0899      	lsrs	r1, r3, #2
		switch (state) {
    1fd2:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    1fd4:	7411      	strb	r1, [r2, #16]
		switch (state) {
    1fd6:	2b0d      	cmp	r3, #13
    1fd8:	d80b      	bhi.n	1ff2 <Encoder::isr53()+0x4a>
    1fda:	e8df f003 	tbb	[pc, r3]
    1fde:	070d      	.short	0x070d
    1fe0:	160a071c 	.word	0x160a071c
    1fe4:	0a160d0d 	.word	0x0a160d0d
    1fe8:	0d071c07 	.word	0x0d071c07
				arg->position--;
    1fec:	6953      	ldr	r3, [r2, #20]
    1fee:	3b01      	subs	r3, #1
    1ff0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    1ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
    1ff6:	4770      	bx	lr
				arg->position++;
    1ff8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    1ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    1ffe:	3301      	adds	r3, #1
    2000:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    2002:	4770      	bx	lr
		if (p1val) state |= 4;
    2004:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2008:	e7e0      	b.n	1fcc <Encoder::isr53()+0x24>
				arg->position -= 2;
    200a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    200c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2010:	3b02      	subs	r3, #2
    2012:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    2014:	4770      	bx	lr
				arg->position += 2;
    2016:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    2018:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    201c:	3302      	adds	r3, #2
    201e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr53(void) { update(interruptArgs[53]); }
    2020:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2022:	7c13      	ldrb	r3, [r2, #16]
    2024:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2028:	2900      	cmp	r1, #0
    202a:	d0d1      	beq.n	1fd0 <Encoder::isr53()+0x28>
    202c:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2030:	e7ce      	b.n	1fd0 <Encoder::isr53()+0x28>
    2032:	bf00      	nop
    2034:	200051ec 	.word	0x200051ec

00002038 <Encoder::isr54()>:
	#endif
	#ifdef CORE_INT54_PIN
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    2038:	4b22      	ldr	r3, [pc, #136]	; (20c4 <Encoder::isr54()+0x8c>)
    203a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    203e:	e9d2 1000 	ldrd	r1, r0, [r2]
    2042:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2044:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2046:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    2048:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    204a:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    204c:	6894      	ldr	r4, [r2, #8]
    204e:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2052:	d02e      	beq.n	20b2 <Encoder::isr54()+0x7a>
		uint8_t state = arg->state & 3;
    2054:	7c13      	ldrb	r3, [r2, #16]
    2056:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    205a:	b9d9      	cbnz	r1, 2094 <Encoder::isr54()+0x5c>
		if (p2val) state |= 8;
    205c:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2060:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2062:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2064:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2066:	2b0d      	cmp	r3, #13
    2068:	d80b      	bhi.n	2082 <Encoder::isr54()+0x4a>
    206a:	e8df f003 	tbb	[pc, r3]
    206e:	070d      	.short	0x070d
    2070:	160a071c 	.word	0x160a071c
    2074:	0a160d0d 	.word	0x0a160d0d
    2078:	0d071c07 	.word	0x0d071c07
				arg->position--;
    207c:	6953      	ldr	r3, [r2, #20]
    207e:	3b01      	subs	r3, #1
    2080:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    2082:	f85d 4b04 	ldr.w	r4, [sp], #4
    2086:	4770      	bx	lr
				arg->position++;
    2088:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    208a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    208e:	3301      	adds	r3, #1
    2090:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    2092:	4770      	bx	lr
		if (p1val) state |= 4;
    2094:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2098:	e7e0      	b.n	205c <Encoder::isr54()+0x24>
				arg->position -= 2;
    209a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    209c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    20a0:	3b02      	subs	r3, #2
    20a2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    20a4:	4770      	bx	lr
				arg->position += 2;
    20a6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    20a8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    20ac:	3302      	adds	r3, #2
    20ae:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr54(void) { update(interruptArgs[54]); }
    20b0:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    20b2:	7c13      	ldrb	r3, [r2, #16]
    20b4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    20b8:	2900      	cmp	r1, #0
    20ba:	d0d1      	beq.n	2060 <Encoder::isr54()+0x28>
    20bc:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    20c0:	e7ce      	b.n	2060 <Encoder::isr54()+0x28>
    20c2:	bf00      	nop
    20c4:	200051ec 	.word	0x200051ec

000020c8 <Encoder::isr17()>:
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    20c8:	4b21      	ldr	r3, [pc, #132]	; (2150 <Encoder::isr17()+0x88>)
    20ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    20cc:	e9d2 1000 	ldrd	r1, r0, [r2]
    20d0:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    20d2:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    20d4:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    20d6:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    20d8:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    20da:	6894      	ldr	r4, [r2, #8]
    20dc:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    20e0:	d02e      	beq.n	2140 <Encoder::isr17()+0x78>
		uint8_t state = arg->state & 3;
    20e2:	7c13      	ldrb	r3, [r2, #16]
    20e4:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    20e8:	b9d9      	cbnz	r1, 2122 <Encoder::isr17()+0x5a>
		if (p2val) state |= 8;
    20ea:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    20ee:	0899      	lsrs	r1, r3, #2
		switch (state) {
    20f0:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    20f2:	7411      	strb	r1, [r2, #16]
		switch (state) {
    20f4:	2b0d      	cmp	r3, #13
    20f6:	d80b      	bhi.n	2110 <Encoder::isr17()+0x48>
    20f8:	e8df f003 	tbb	[pc, r3]
    20fc:	071c070d 	.word	0x071c070d
    2100:	0d0d160a 	.word	0x0d0d160a
    2104:	1c070a16 	.word	0x1c070a16
    2108:	0d07      	.short	0x0d07
				arg->position--;
    210a:	6953      	ldr	r3, [r2, #20]
    210c:	3b01      	subs	r3, #1
    210e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    2110:	f85d 4b04 	ldr.w	r4, [sp], #4
    2114:	4770      	bx	lr
				arg->position++;
    2116:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    2118:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    211c:	3301      	adds	r3, #1
    211e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    2120:	4770      	bx	lr
		if (p1val) state |= 4;
    2122:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2126:	e7e0      	b.n	20ea <Encoder::isr17()+0x22>
				arg->position -= 2;
    2128:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    212a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    212e:	3b02      	subs	r3, #2
    2130:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    2132:	4770      	bx	lr
				arg->position += 2;
    2134:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    2136:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    213a:	3302      	adds	r3, #2
    213c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr17(void) { update(interruptArgs[17]); }
    213e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2140:	7c13      	ldrb	r3, [r2, #16]
    2142:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2146:	2900      	cmp	r1, #0
    2148:	d0d1      	beq.n	20ee <Encoder::isr17()+0x26>
    214a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    214e:	e7ce      	b.n	20ee <Encoder::isr17()+0x26>
    2150:	200051ec 	.word	0x200051ec

00002154 <Encoder::isr18()>:
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    2154:	4b21      	ldr	r3, [pc, #132]	; (21dc <Encoder::isr18()+0x88>)
    2156:	6c9a      	ldr	r2, [r3, #72]	; 0x48
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2158:	e9d2 1000 	ldrd	r1, r0, [r2]
    215c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    215e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2160:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    2162:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2164:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2166:	6894      	ldr	r4, [r2, #8]
    2168:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    216c:	d02e      	beq.n	21cc <Encoder::isr18()+0x78>
		uint8_t state = arg->state & 3;
    216e:	7c13      	ldrb	r3, [r2, #16]
    2170:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2174:	b9d9      	cbnz	r1, 21ae <Encoder::isr18()+0x5a>
		if (p2val) state |= 8;
    2176:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    217a:	0899      	lsrs	r1, r3, #2
		switch (state) {
    217c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    217e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2180:	2b0d      	cmp	r3, #13
    2182:	d80b      	bhi.n	219c <Encoder::isr18()+0x48>
    2184:	e8df f003 	tbb	[pc, r3]
    2188:	071c070d 	.word	0x071c070d
    218c:	0d0d160a 	.word	0x0d0d160a
    2190:	1c070a16 	.word	0x1c070a16
    2194:	0d07      	.short	0x0d07
				arg->position--;
    2196:	6953      	ldr	r3, [r2, #20]
    2198:	3b01      	subs	r3, #1
    219a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    219c:	f85d 4b04 	ldr.w	r4, [sp], #4
    21a0:	4770      	bx	lr
				arg->position++;
    21a2:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    21a4:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    21a8:	3301      	adds	r3, #1
    21aa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    21ac:	4770      	bx	lr
		if (p1val) state |= 4;
    21ae:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    21b2:	e7e0      	b.n	2176 <Encoder::isr18()+0x22>
				arg->position -= 2;
    21b4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    21b6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    21ba:	3b02      	subs	r3, #2
    21bc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    21be:	4770      	bx	lr
				arg->position += 2;
    21c0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    21c2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    21c6:	3302      	adds	r3, #2
    21c8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr18(void) { update(interruptArgs[18]); }
    21ca:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    21cc:	7c13      	ldrb	r3, [r2, #16]
    21ce:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    21d2:	2900      	cmp	r1, #0
    21d4:	d0d1      	beq.n	217a <Encoder::isr18()+0x26>
    21d6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    21da:	e7ce      	b.n	217a <Encoder::isr18()+0x26>
    21dc:	200051ec 	.word	0x200051ec

000021e0 <Encoder::isr19()>:
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    21e0:	4b21      	ldr	r3, [pc, #132]	; (2268 <Encoder::isr19()+0x88>)
    21e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    21e4:	e9d2 1000 	ldrd	r1, r0, [r2]
    21e8:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    21ea:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    21ec:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    21ee:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    21f0:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    21f2:	6894      	ldr	r4, [r2, #8]
    21f4:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    21f8:	d02e      	beq.n	2258 <Encoder::isr19()+0x78>
		uint8_t state = arg->state & 3;
    21fa:	7c13      	ldrb	r3, [r2, #16]
    21fc:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2200:	b9d9      	cbnz	r1, 223a <Encoder::isr19()+0x5a>
		if (p2val) state |= 8;
    2202:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2206:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2208:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    220a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    220c:	2b0d      	cmp	r3, #13
    220e:	d80b      	bhi.n	2228 <Encoder::isr19()+0x48>
    2210:	e8df f003 	tbb	[pc, r3]
    2214:	071c070d 	.word	0x071c070d
    2218:	0d0d160a 	.word	0x0d0d160a
    221c:	1c070a16 	.word	0x1c070a16
    2220:	0d07      	.short	0x0d07
				arg->position--;
    2222:	6953      	ldr	r3, [r2, #20]
    2224:	3b01      	subs	r3, #1
    2226:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    2228:	f85d 4b04 	ldr.w	r4, [sp], #4
    222c:	4770      	bx	lr
				arg->position++;
    222e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    2230:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2234:	3301      	adds	r3, #1
    2236:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    2238:	4770      	bx	lr
		if (p1val) state |= 4;
    223a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    223e:	e7e0      	b.n	2202 <Encoder::isr19()+0x22>
				arg->position -= 2;
    2240:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    2242:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2246:	3b02      	subs	r3, #2
    2248:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    224a:	4770      	bx	lr
				arg->position += 2;
    224c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    224e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2252:	3302      	adds	r3, #2
    2254:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr19(void) { update(interruptArgs[19]); }
    2256:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2258:	7c13      	ldrb	r3, [r2, #16]
    225a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    225e:	2900      	cmp	r1, #0
    2260:	d0d1      	beq.n	2206 <Encoder::isr19()+0x26>
    2262:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2266:	e7ce      	b.n	2206 <Encoder::isr19()+0x26>
    2268:	200051ec 	.word	0x200051ec

0000226c <Encoder::isr20()>:
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    226c:	4b21      	ldr	r3, [pc, #132]	; (22f4 <Encoder::isr20()+0x88>)
    226e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2270:	e9d2 1000 	ldrd	r1, r0, [r2]
    2274:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2276:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2278:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    227a:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    227c:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    227e:	6894      	ldr	r4, [r2, #8]
    2280:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2284:	d02e      	beq.n	22e4 <Encoder::isr20()+0x78>
		uint8_t state = arg->state & 3;
    2286:	7c13      	ldrb	r3, [r2, #16]
    2288:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    228c:	b9d9      	cbnz	r1, 22c6 <Encoder::isr20()+0x5a>
		if (p2val) state |= 8;
    228e:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2292:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2294:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2296:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2298:	2b0d      	cmp	r3, #13
    229a:	d80b      	bhi.n	22b4 <Encoder::isr20()+0x48>
    229c:	e8df f003 	tbb	[pc, r3]
    22a0:	071c070d 	.word	0x071c070d
    22a4:	0d0d160a 	.word	0x0d0d160a
    22a8:	1c070a16 	.word	0x1c070a16
    22ac:	0d07      	.short	0x0d07
				arg->position--;
    22ae:	6953      	ldr	r3, [r2, #20]
    22b0:	3b01      	subs	r3, #1
    22b2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    22b8:	4770      	bx	lr
				arg->position++;
    22ba:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22bc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    22c0:	3301      	adds	r3, #1
    22c2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22c4:	4770      	bx	lr
		if (p1val) state |= 4;
    22c6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    22ca:	e7e0      	b.n	228e <Encoder::isr20()+0x22>
				arg->position -= 2;
    22cc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22ce:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    22d2:	3b02      	subs	r3, #2
    22d4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22d6:	4770      	bx	lr
				arg->position += 2;
    22d8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22da:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    22de:	3302      	adds	r3, #2
    22e0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr20(void) { update(interruptArgs[20]); }
    22e2:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    22e4:	7c13      	ldrb	r3, [r2, #16]
    22e6:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    22ea:	2900      	cmp	r1, #0
    22ec:	d0d1      	beq.n	2292 <Encoder::isr20()+0x26>
    22ee:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    22f2:	e7ce      	b.n	2292 <Encoder::isr20()+0x26>
    22f4:	200051ec 	.word	0x200051ec

000022f8 <Encoder::isr21()>:
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    22f8:	4b21      	ldr	r3, [pc, #132]	; (2380 <Encoder::isr21()+0x88>)
    22fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    22fc:	e9d2 1000 	ldrd	r1, r0, [r2]
    2300:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2302:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2304:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2306:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2308:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    230a:	6894      	ldr	r4, [r2, #8]
    230c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2310:	d02e      	beq.n	2370 <Encoder::isr21()+0x78>
		uint8_t state = arg->state & 3;
    2312:	7c13      	ldrb	r3, [r2, #16]
    2314:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2318:	b9d9      	cbnz	r1, 2352 <Encoder::isr21()+0x5a>
		if (p2val) state |= 8;
    231a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    231e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2320:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2322:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2324:	2b0d      	cmp	r3, #13
    2326:	d80b      	bhi.n	2340 <Encoder::isr21()+0x48>
    2328:	e8df f003 	tbb	[pc, r3]
    232c:	071c070d 	.word	0x071c070d
    2330:	0d0d160a 	.word	0x0d0d160a
    2334:	1c070a16 	.word	0x1c070a16
    2338:	0d07      	.short	0x0d07
				arg->position--;
    233a:	6953      	ldr	r3, [r2, #20]
    233c:	3b01      	subs	r3, #1
    233e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2340:	f85d 4b04 	ldr.w	r4, [sp], #4
    2344:	4770      	bx	lr
				arg->position++;
    2346:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2348:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    234c:	3301      	adds	r3, #1
    234e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2350:	4770      	bx	lr
		if (p1val) state |= 4;
    2352:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2356:	e7e0      	b.n	231a <Encoder::isr21()+0x22>
				arg->position -= 2;
    2358:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    235a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    235e:	3b02      	subs	r3, #2
    2360:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2362:	4770      	bx	lr
				arg->position += 2;
    2364:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    2366:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    236a:	3302      	adds	r3, #2
    236c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr21(void) { update(interruptArgs[21]); }
    236e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2370:	7c13      	ldrb	r3, [r2, #16]
    2372:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2376:	2900      	cmp	r1, #0
    2378:	d0d1      	beq.n	231e <Encoder::isr21()+0x26>
    237a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    237e:	e7ce      	b.n	231e <Encoder::isr21()+0x26>
    2380:	200051ec 	.word	0x200051ec

00002384 <Encoder::isr22()>:
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    2384:	4b21      	ldr	r3, [pc, #132]	; (240c <Encoder::isr22()+0x88>)
    2386:	6d9a      	ldr	r2, [r3, #88]	; 0x58
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2388:	e9d2 1000 	ldrd	r1, r0, [r2]
    238c:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    238e:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2390:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    2392:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2394:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2396:	6894      	ldr	r4, [r2, #8]
    2398:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    239c:	d02e      	beq.n	23fc <Encoder::isr22()+0x78>
		uint8_t state = arg->state & 3;
    239e:	7c13      	ldrb	r3, [r2, #16]
    23a0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    23a4:	b9d9      	cbnz	r1, 23de <Encoder::isr22()+0x5a>
		if (p2val) state |= 8;
    23a6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    23aa:	0899      	lsrs	r1, r3, #2
		switch (state) {
    23ac:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    23ae:	7411      	strb	r1, [r2, #16]
		switch (state) {
    23b0:	2b0d      	cmp	r3, #13
    23b2:	d80b      	bhi.n	23cc <Encoder::isr22()+0x48>
    23b4:	e8df f003 	tbb	[pc, r3]
    23b8:	071c070d 	.word	0x071c070d
    23bc:	0d0d160a 	.word	0x0d0d160a
    23c0:	1c070a16 	.word	0x1c070a16
    23c4:	0d07      	.short	0x0d07
				arg->position--;
    23c6:	6953      	ldr	r3, [r2, #20]
    23c8:	3b01      	subs	r3, #1
    23ca:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    23d0:	4770      	bx	lr
				arg->position++;
    23d2:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23d4:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    23d8:	3301      	adds	r3, #1
    23da:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23dc:	4770      	bx	lr
		if (p1val) state |= 4;
    23de:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    23e2:	e7e0      	b.n	23a6 <Encoder::isr22()+0x22>
				arg->position -= 2;
    23e4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23e6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    23ea:	3b02      	subs	r3, #2
    23ec:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23ee:	4770      	bx	lr
				arg->position += 2;
    23f0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23f2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    23f6:	3302      	adds	r3, #2
    23f8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr22(void) { update(interruptArgs[22]); }
    23fa:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    23fc:	7c13      	ldrb	r3, [r2, #16]
    23fe:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2402:	2900      	cmp	r1, #0
    2404:	d0d1      	beq.n	23aa <Encoder::isr22()+0x26>
    2406:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    240a:	e7ce      	b.n	23aa <Encoder::isr22()+0x26>
    240c:	200051ec 	.word	0x200051ec

00002410 <Encoder::isr23()>:
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    2410:	4b21      	ldr	r3, [pc, #132]	; (2498 <Encoder::isr23()+0x88>)
    2412:	6dda      	ldr	r2, [r3, #92]	; 0x5c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2414:	e9d2 1000 	ldrd	r1, r0, [r2]
    2418:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    241a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    241c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    241e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2420:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2422:	6894      	ldr	r4, [r2, #8]
    2424:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2428:	d02e      	beq.n	2488 <Encoder::isr23()+0x78>
		uint8_t state = arg->state & 3;
    242a:	7c13      	ldrb	r3, [r2, #16]
    242c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2430:	b9d9      	cbnz	r1, 246a <Encoder::isr23()+0x5a>
		if (p2val) state |= 8;
    2432:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2436:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2438:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    243a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    243c:	2b0d      	cmp	r3, #13
    243e:	d80b      	bhi.n	2458 <Encoder::isr23()+0x48>
    2440:	e8df f003 	tbb	[pc, r3]
    2444:	071c070d 	.word	0x071c070d
    2448:	0d0d160a 	.word	0x0d0d160a
    244c:	1c070a16 	.word	0x1c070a16
    2450:	0d07      	.short	0x0d07
				arg->position--;
    2452:	6953      	ldr	r3, [r2, #20]
    2454:	3b01      	subs	r3, #1
    2456:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    2458:	f85d 4b04 	ldr.w	r4, [sp], #4
    245c:	4770      	bx	lr
				arg->position++;
    245e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    2460:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2464:	3301      	adds	r3, #1
    2466:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    2468:	4770      	bx	lr
		if (p1val) state |= 4;
    246a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    246e:	e7e0      	b.n	2432 <Encoder::isr23()+0x22>
				arg->position -= 2;
    2470:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    2472:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2476:	3b02      	subs	r3, #2
    2478:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    247a:	4770      	bx	lr
				arg->position += 2;
    247c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    247e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2482:	3302      	adds	r3, #2
    2484:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr23(void) { update(interruptArgs[23]); }
    2486:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2488:	7c13      	ldrb	r3, [r2, #16]
    248a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    248e:	2900      	cmp	r1, #0
    2490:	d0d1      	beq.n	2436 <Encoder::isr23()+0x26>
    2492:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2496:	e7ce      	b.n	2436 <Encoder::isr23()+0x26>
    2498:	200051ec 	.word	0x200051ec

0000249c <Encoder::isr24()>:
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    249c:	4b21      	ldr	r3, [pc, #132]	; (2524 <Encoder::isr24()+0x88>)
    249e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    24a0:	e9d2 1000 	ldrd	r1, r0, [r2]
    24a4:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    24a6:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    24a8:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    24aa:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    24ac:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    24ae:	6894      	ldr	r4, [r2, #8]
    24b0:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    24b4:	d02e      	beq.n	2514 <Encoder::isr24()+0x78>
		uint8_t state = arg->state & 3;
    24b6:	7c13      	ldrb	r3, [r2, #16]
    24b8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    24bc:	b9d9      	cbnz	r1, 24f6 <Encoder::isr24()+0x5a>
		if (p2val) state |= 8;
    24be:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    24c2:	0899      	lsrs	r1, r3, #2
		switch (state) {
    24c4:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    24c6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    24c8:	2b0d      	cmp	r3, #13
    24ca:	d80b      	bhi.n	24e4 <Encoder::isr24()+0x48>
    24cc:	e8df f003 	tbb	[pc, r3]
    24d0:	071c070d 	.word	0x071c070d
    24d4:	0d0d160a 	.word	0x0d0d160a
    24d8:	1c070a16 	.word	0x1c070a16
    24dc:	0d07      	.short	0x0d07
				arg->position--;
    24de:	6953      	ldr	r3, [r2, #20]
    24e0:	3b01      	subs	r3, #1
    24e2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    24e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    24e8:	4770      	bx	lr
				arg->position++;
    24ea:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    24ec:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    24f0:	3301      	adds	r3, #1
    24f2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    24f4:	4770      	bx	lr
		if (p1val) state |= 4;
    24f6:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    24fa:	e7e0      	b.n	24be <Encoder::isr24()+0x22>
				arg->position -= 2;
    24fc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    24fe:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2502:	3b02      	subs	r3, #2
    2504:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    2506:	4770      	bx	lr
				arg->position += 2;
    2508:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    250a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    250e:	3302      	adds	r3, #2
    2510:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr24(void) { update(interruptArgs[24]); }
    2512:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2514:	7c13      	ldrb	r3, [r2, #16]
    2516:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    251a:	2900      	cmp	r1, #0
    251c:	d0d1      	beq.n	24c2 <Encoder::isr24()+0x26>
    251e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2522:	e7ce      	b.n	24c2 <Encoder::isr24()+0x26>
    2524:	200051ec 	.word	0x200051ec

00002528 <Encoder::isr25()>:
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2528:	4b21      	ldr	r3, [pc, #132]	; (25b0 <Encoder::isr25()+0x88>)
    252a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    252c:	e9d2 1000 	ldrd	r1, r0, [r2]
    2530:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2532:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2534:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2536:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2538:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    253a:	6894      	ldr	r4, [r2, #8]
    253c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2540:	d02e      	beq.n	25a0 <Encoder::isr25()+0x78>
		uint8_t state = arg->state & 3;
    2542:	7c13      	ldrb	r3, [r2, #16]
    2544:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2548:	b9d9      	cbnz	r1, 2582 <Encoder::isr25()+0x5a>
		if (p2val) state |= 8;
    254a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    254e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2550:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2552:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2554:	2b0d      	cmp	r3, #13
    2556:	d80b      	bhi.n	2570 <Encoder::isr25()+0x48>
    2558:	e8df f003 	tbb	[pc, r3]
    255c:	071c070d 	.word	0x071c070d
    2560:	0d0d160a 	.word	0x0d0d160a
    2564:	1c070a16 	.word	0x1c070a16
    2568:	0d07      	.short	0x0d07
				arg->position--;
    256a:	6953      	ldr	r3, [r2, #20]
    256c:	3b01      	subs	r3, #1
    256e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2570:	f85d 4b04 	ldr.w	r4, [sp], #4
    2574:	4770      	bx	lr
				arg->position++;
    2576:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2578:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    257c:	3301      	adds	r3, #1
    257e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2580:	4770      	bx	lr
		if (p1val) state |= 4;
    2582:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2586:	e7e0      	b.n	254a <Encoder::isr25()+0x22>
				arg->position -= 2;
    2588:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    258a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    258e:	3b02      	subs	r3, #2
    2590:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2592:	4770      	bx	lr
				arg->position += 2;
    2594:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    2596:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    259a:	3302      	adds	r3, #2
    259c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr25(void) { update(interruptArgs[25]); }
    259e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    25a0:	7c13      	ldrb	r3, [r2, #16]
    25a2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    25a6:	2900      	cmp	r1, #0
    25a8:	d0d1      	beq.n	254e <Encoder::isr25()+0x26>
    25aa:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    25ae:	e7ce      	b.n	254e <Encoder::isr25()+0x26>
    25b0:	200051ec 	.word	0x200051ec

000025b4 <Encoder::isr26()>:
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    25b4:	4b21      	ldr	r3, [pc, #132]	; (263c <Encoder::isr26()+0x88>)
    25b6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    25b8:	e9d2 1000 	ldrd	r1, r0, [r2]
    25bc:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    25be:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    25c0:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    25c2:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    25c4:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    25c6:	6894      	ldr	r4, [r2, #8]
    25c8:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    25cc:	d02e      	beq.n	262c <Encoder::isr26()+0x78>
		uint8_t state = arg->state & 3;
    25ce:	7c13      	ldrb	r3, [r2, #16]
    25d0:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    25d4:	b9d9      	cbnz	r1, 260e <Encoder::isr26()+0x5a>
		if (p2val) state |= 8;
    25d6:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    25da:	0899      	lsrs	r1, r3, #2
		switch (state) {
    25dc:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    25de:	7411      	strb	r1, [r2, #16]
		switch (state) {
    25e0:	2b0d      	cmp	r3, #13
    25e2:	d80b      	bhi.n	25fc <Encoder::isr26()+0x48>
    25e4:	e8df f003 	tbb	[pc, r3]
    25e8:	071c070d 	.word	0x071c070d
    25ec:	0d0d160a 	.word	0x0d0d160a
    25f0:	1c070a16 	.word	0x1c070a16
    25f4:	0d07      	.short	0x0d07
				arg->position--;
    25f6:	6953      	ldr	r3, [r2, #20]
    25f8:	3b01      	subs	r3, #1
    25fa:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    25fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    2600:	4770      	bx	lr
				arg->position++;
    2602:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    2604:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2608:	3301      	adds	r3, #1
    260a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    260c:	4770      	bx	lr
		if (p1val) state |= 4;
    260e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2612:	e7e0      	b.n	25d6 <Encoder::isr26()+0x22>
				arg->position -= 2;
    2614:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    2616:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    261a:	3b02      	subs	r3, #2
    261c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    261e:	4770      	bx	lr
				arg->position += 2;
    2620:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    2622:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2626:	3302      	adds	r3, #2
    2628:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr26(void) { update(interruptArgs[26]); }
    262a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    262c:	7c13      	ldrb	r3, [r2, #16]
    262e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2632:	2900      	cmp	r1, #0
    2634:	d0d1      	beq.n	25da <Encoder::isr26()+0x26>
    2636:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    263a:	e7ce      	b.n	25da <Encoder::isr26()+0x26>
    263c:	200051ec 	.word	0x200051ec

00002640 <Encoder::isr27()>:
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    2640:	4b21      	ldr	r3, [pc, #132]	; (26c8 <Encoder::isr27()+0x88>)
    2642:	6eda      	ldr	r2, [r3, #108]	; 0x6c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2644:	e9d2 1000 	ldrd	r1, r0, [r2]
    2648:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    264a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    264c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    264e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2650:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2652:	6894      	ldr	r4, [r2, #8]
    2654:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2658:	d02e      	beq.n	26b8 <Encoder::isr27()+0x78>
		uint8_t state = arg->state & 3;
    265a:	7c13      	ldrb	r3, [r2, #16]
    265c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2660:	b9d9      	cbnz	r1, 269a <Encoder::isr27()+0x5a>
		if (p2val) state |= 8;
    2662:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2666:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2668:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    266a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    266c:	2b0d      	cmp	r3, #13
    266e:	d80b      	bhi.n	2688 <Encoder::isr27()+0x48>
    2670:	e8df f003 	tbb	[pc, r3]
    2674:	071c070d 	.word	0x071c070d
    2678:	0d0d160a 	.word	0x0d0d160a
    267c:	1c070a16 	.word	0x1c070a16
    2680:	0d07      	.short	0x0d07
				arg->position--;
    2682:	6953      	ldr	r3, [r2, #20]
    2684:	3b01      	subs	r3, #1
    2686:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    2688:	f85d 4b04 	ldr.w	r4, [sp], #4
    268c:	4770      	bx	lr
				arg->position++;
    268e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    2690:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2694:	3301      	adds	r3, #1
    2696:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    2698:	4770      	bx	lr
		if (p1val) state |= 4;
    269a:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    269e:	e7e0      	b.n	2662 <Encoder::isr27()+0x22>
				arg->position -= 2;
    26a0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    26a2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    26a6:	3b02      	subs	r3, #2
    26a8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    26aa:	4770      	bx	lr
				arg->position += 2;
    26ac:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    26ae:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    26b2:	3302      	adds	r3, #2
    26b4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr27(void) { update(interruptArgs[27]); }
    26b6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    26b8:	7c13      	ldrb	r3, [r2, #16]
    26ba:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    26be:	2900      	cmp	r1, #0
    26c0:	d0d1      	beq.n	2666 <Encoder::isr27()+0x26>
    26c2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    26c6:	e7ce      	b.n	2666 <Encoder::isr27()+0x26>
    26c8:	200051ec 	.word	0x200051ec

000026cc <Encoder::isr28()>:
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    26cc:	4b21      	ldr	r3, [pc, #132]	; (2754 <Encoder::isr28()+0x88>)
    26ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    26d0:	e9d2 1000 	ldrd	r1, r0, [r2]
    26d4:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    26d6:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    26d8:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    26da:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    26dc:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    26de:	6894      	ldr	r4, [r2, #8]
    26e0:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    26e4:	d02e      	beq.n	2744 <Encoder::isr28()+0x78>
		uint8_t state = arg->state & 3;
    26e6:	7c13      	ldrb	r3, [r2, #16]
    26e8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    26ec:	b9d9      	cbnz	r1, 2726 <Encoder::isr28()+0x5a>
		if (p2val) state |= 8;
    26ee:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    26f2:	0899      	lsrs	r1, r3, #2
		switch (state) {
    26f4:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    26f6:	7411      	strb	r1, [r2, #16]
		switch (state) {
    26f8:	2b0d      	cmp	r3, #13
    26fa:	d80b      	bhi.n	2714 <Encoder::isr28()+0x48>
    26fc:	e8df f003 	tbb	[pc, r3]
    2700:	071c070d 	.word	0x071c070d
    2704:	0d0d160a 	.word	0x0d0d160a
    2708:	1c070a16 	.word	0x1c070a16
    270c:	0d07      	.short	0x0d07
				arg->position--;
    270e:	6953      	ldr	r3, [r2, #20]
    2710:	3b01      	subs	r3, #1
    2712:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    2714:	f85d 4b04 	ldr.w	r4, [sp], #4
    2718:	4770      	bx	lr
				arg->position++;
    271a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    271c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2720:	3301      	adds	r3, #1
    2722:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    2724:	4770      	bx	lr
		if (p1val) state |= 4;
    2726:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    272a:	e7e0      	b.n	26ee <Encoder::isr28()+0x22>
				arg->position -= 2;
    272c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    272e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2732:	3b02      	subs	r3, #2
    2734:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    2736:	4770      	bx	lr
				arg->position += 2;
    2738:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    273a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    273e:	3302      	adds	r3, #2
    2740:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr28(void) { update(interruptArgs[28]); }
    2742:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2744:	7c13      	ldrb	r3, [r2, #16]
    2746:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    274a:	2900      	cmp	r1, #0
    274c:	d0d1      	beq.n	26f2 <Encoder::isr28()+0x26>
    274e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2752:	e7ce      	b.n	26f2 <Encoder::isr28()+0x26>
    2754:	200051ec 	.word	0x200051ec

00002758 <Encoder::isr29()>:
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    2758:	4b21      	ldr	r3, [pc, #132]	; (27e0 <Encoder::isr29()+0x88>)
    275a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    275c:	e9d2 1000 	ldrd	r1, r0, [r2]
    2760:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2762:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2764:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    2766:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2768:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    276a:	6894      	ldr	r4, [r2, #8]
    276c:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2770:	d02e      	beq.n	27d0 <Encoder::isr29()+0x78>
		uint8_t state = arg->state & 3;
    2772:	7c13      	ldrb	r3, [r2, #16]
    2774:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2778:	b9d9      	cbnz	r1, 27b2 <Encoder::isr29()+0x5a>
		if (p2val) state |= 8;
    277a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    277e:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2780:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2782:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2784:	2b0d      	cmp	r3, #13
    2786:	d80b      	bhi.n	27a0 <Encoder::isr29()+0x48>
    2788:	e8df f003 	tbb	[pc, r3]
    278c:	071c070d 	.word	0x071c070d
    2790:	0d0d160a 	.word	0x0d0d160a
    2794:	1c070a16 	.word	0x1c070a16
    2798:	0d07      	.short	0x0d07
				arg->position--;
    279a:	6953      	ldr	r3, [r2, #20]
    279c:	3b01      	subs	r3, #1
    279e:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    27a4:	4770      	bx	lr
				arg->position++;
    27a6:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27a8:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    27ac:	3301      	adds	r3, #1
    27ae:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27b0:	4770      	bx	lr
		if (p1val) state |= 4;
    27b2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    27b6:	e7e0      	b.n	277a <Encoder::isr29()+0x22>
				arg->position -= 2;
    27b8:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27ba:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    27be:	3b02      	subs	r3, #2
    27c0:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27c2:	4770      	bx	lr
				arg->position += 2;
    27c4:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27c6:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    27ca:	3302      	adds	r3, #2
    27cc:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr29(void) { update(interruptArgs[29]); }
    27ce:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    27d0:	7c13      	ldrb	r3, [r2, #16]
    27d2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    27d6:	2900      	cmp	r1, #0
    27d8:	d0d1      	beq.n	277e <Encoder::isr29()+0x26>
    27da:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    27de:	e7ce      	b.n	277e <Encoder::isr29()+0x26>
    27e0:	200051ec 	.word	0x200051ec

000027e4 <Encoder::isr30()>:
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    27e4:	4b21      	ldr	r3, [pc, #132]	; (286c <Encoder::isr30()+0x88>)
    27e6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    27e8:	e9d2 1000 	ldrd	r1, r0, [r2]
    27ec:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    27ee:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    27f0:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    27f2:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    27f4:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    27f6:	6894      	ldr	r4, [r2, #8]
    27f8:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    27fc:	d02e      	beq.n	285c <Encoder::isr30()+0x78>
		uint8_t state = arg->state & 3;
    27fe:	7c13      	ldrb	r3, [r2, #16]
    2800:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2804:	b9d9      	cbnz	r1, 283e <Encoder::isr30()+0x5a>
		if (p2val) state |= 8;
    2806:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    280a:	0899      	lsrs	r1, r3, #2
		switch (state) {
    280c:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    280e:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2810:	2b0d      	cmp	r3, #13
    2812:	d80b      	bhi.n	282c <Encoder::isr30()+0x48>
    2814:	e8df f003 	tbb	[pc, r3]
    2818:	071c070d 	.word	0x071c070d
    281c:	0d0d160a 	.word	0x0d0d160a
    2820:	1c070a16 	.word	0x1c070a16
    2824:	0d07      	.short	0x0d07
				arg->position--;
    2826:	6953      	ldr	r3, [r2, #20]
    2828:	3b01      	subs	r3, #1
    282a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    282c:	f85d 4b04 	ldr.w	r4, [sp], #4
    2830:	4770      	bx	lr
				arg->position++;
    2832:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    2834:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2838:	3301      	adds	r3, #1
    283a:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    283c:	4770      	bx	lr
		if (p1val) state |= 4;
    283e:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2842:	e7e0      	b.n	2806 <Encoder::isr30()+0x22>
				arg->position -= 2;
    2844:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    2846:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    284a:	3b02      	subs	r3, #2
    284c:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    284e:	4770      	bx	lr
				arg->position += 2;
    2850:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    2852:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2856:	3302      	adds	r3, #2
    2858:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr30(void) { update(interruptArgs[30]); }
    285a:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    285c:	7c13      	ldrb	r3, [r2, #16]
    285e:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2862:	2900      	cmp	r1, #0
    2864:	d0d1      	beq.n	280a <Encoder::isr30()+0x26>
    2866:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    286a:	e7ce      	b.n	280a <Encoder::isr30()+0x26>
    286c:	200051ec 	.word	0x200051ec

00002870 <Encoder::isr31()>:
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    2870:	4b21      	ldr	r3, [pc, #132]	; (28f8 <Encoder::isr31()+0x88>)
    2872:	6fda      	ldr	r2, [r3, #124]	; 0x7c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2874:	e9d2 1000 	ldrd	r1, r0, [r2]
    2878:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    287a:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    287c:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    287e:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2880:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2882:	6894      	ldr	r4, [r2, #8]
    2884:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2888:	d02e      	beq.n	28e8 <Encoder::isr31()+0x78>
		uint8_t state = arg->state & 3;
    288a:	7c13      	ldrb	r3, [r2, #16]
    288c:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2890:	b9d9      	cbnz	r1, 28ca <Encoder::isr31()+0x5a>
		if (p2val) state |= 8;
    2892:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2896:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2898:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    289a:	7411      	strb	r1, [r2, #16]
		switch (state) {
    289c:	2b0d      	cmp	r3, #13
    289e:	d80b      	bhi.n	28b8 <Encoder::isr31()+0x48>
    28a0:	e8df f003 	tbb	[pc, r3]
    28a4:	071c070d 	.word	0x071c070d
    28a8:	0d0d160a 	.word	0x0d0d160a
    28ac:	1c070a16 	.word	0x1c070a16
    28b0:	0d07      	.short	0x0d07
				arg->position--;
    28b2:	6953      	ldr	r3, [r2, #20]
    28b4:	3b01      	subs	r3, #1
    28b6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28b8:	f85d 4b04 	ldr.w	r4, [sp], #4
    28bc:	4770      	bx	lr
				arg->position++;
    28be:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28c0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    28c4:	3301      	adds	r3, #1
    28c6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28c8:	4770      	bx	lr
		if (p1val) state |= 4;
    28ca:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    28ce:	e7e0      	b.n	2892 <Encoder::isr31()+0x22>
				arg->position -= 2;
    28d0:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28d2:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    28d6:	3b02      	subs	r3, #2
    28d8:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28da:	4770      	bx	lr
				arg->position += 2;
    28dc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28de:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    28e2:	3302      	adds	r3, #2
    28e4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr31(void) { update(interruptArgs[31]); }
    28e6:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    28e8:	7c13      	ldrb	r3, [r2, #16]
    28ea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    28ee:	2900      	cmp	r1, #0
    28f0:	d0d1      	beq.n	2896 <Encoder::isr31()+0x26>
    28f2:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    28f6:	e7ce      	b.n	2896 <Encoder::isr31()+0x26>
    28f8:	200051ec 	.word	0x200051ec

000028fc <Encoder::isr32()>:
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    28fc:	4b22      	ldr	r3, [pc, #136]	; (2988 <Encoder::isr32()+0x8c>)
    28fe:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2902:	e9d2 1000 	ldrd	r1, r0, [r2]
    2906:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2908:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    290a:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    290c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    290e:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2910:	6894      	ldr	r4, [r2, #8]
    2912:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2916:	d02e      	beq.n	2976 <Encoder::isr32()+0x7a>
		uint8_t state = arg->state & 3;
    2918:	7c13      	ldrb	r3, [r2, #16]
    291a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    291e:	b9d9      	cbnz	r1, 2958 <Encoder::isr32()+0x5c>
		if (p2val) state |= 8;
    2920:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2924:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2926:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2928:	7411      	strb	r1, [r2, #16]
		switch (state) {
    292a:	2b0d      	cmp	r3, #13
    292c:	d80b      	bhi.n	2946 <Encoder::isr32()+0x4a>
    292e:	e8df f003 	tbb	[pc, r3]
    2932:	070d      	.short	0x070d
    2934:	160a071c 	.word	0x160a071c
    2938:	0a160d0d 	.word	0x0a160d0d
    293c:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2940:	6953      	ldr	r3, [r2, #20]
    2942:	3b01      	subs	r3, #1
    2944:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    2946:	f85d 4b04 	ldr.w	r4, [sp], #4
    294a:	4770      	bx	lr
				arg->position++;
    294c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    294e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2952:	3301      	adds	r3, #1
    2954:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    2956:	4770      	bx	lr
		if (p1val) state |= 4;
    2958:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    295c:	e7e0      	b.n	2920 <Encoder::isr32()+0x24>
				arg->position -= 2;
    295e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    2960:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2964:	3b02      	subs	r3, #2
    2966:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    2968:	4770      	bx	lr
				arg->position += 2;
    296a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    296c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2970:	3302      	adds	r3, #2
    2972:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr32(void) { update(interruptArgs[32]); }
    2974:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2976:	7c13      	ldrb	r3, [r2, #16]
    2978:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    297c:	2900      	cmp	r1, #0
    297e:	d0d1      	beq.n	2924 <Encoder::isr32()+0x28>
    2980:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2984:	e7ce      	b.n	2924 <Encoder::isr32()+0x28>
    2986:	bf00      	nop
    2988:	200051ec 	.word	0x200051ec

0000298c <Encoder::isr33()>:
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    298c:	4b22      	ldr	r3, [pc, #136]	; (2a18 <Encoder::isr33()+0x8c>)
    298e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2992:	e9d2 1000 	ldrd	r1, r0, [r2]
    2996:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2998:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    299a:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    299c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    299e:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    29a0:	6894      	ldr	r4, [r2, #8]
    29a2:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    29a6:	d02e      	beq.n	2a06 <Encoder::isr33()+0x7a>
		uint8_t state = arg->state & 3;
    29a8:	7c13      	ldrb	r3, [r2, #16]
    29aa:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    29ae:	b9d9      	cbnz	r1, 29e8 <Encoder::isr33()+0x5c>
		if (p2val) state |= 8;
    29b0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    29b4:	0899      	lsrs	r1, r3, #2
		switch (state) {
    29b6:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    29b8:	7411      	strb	r1, [r2, #16]
		switch (state) {
    29ba:	2b0d      	cmp	r3, #13
    29bc:	d80b      	bhi.n	29d6 <Encoder::isr33()+0x4a>
    29be:	e8df f003 	tbb	[pc, r3]
    29c2:	070d      	.short	0x070d
    29c4:	160a071c 	.word	0x160a071c
    29c8:	0a160d0d 	.word	0x0a160d0d
    29cc:	0d071c07 	.word	0x0d071c07
				arg->position--;
    29d0:	6953      	ldr	r3, [r2, #20]
    29d2:	3b01      	subs	r3, #1
    29d4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    29d6:	f85d 4b04 	ldr.w	r4, [sp], #4
    29da:	4770      	bx	lr
				arg->position++;
    29dc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    29de:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    29e2:	3301      	adds	r3, #1
    29e4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    29e6:	4770      	bx	lr
		if (p1val) state |= 4;
    29e8:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    29ec:	e7e0      	b.n	29b0 <Encoder::isr33()+0x24>
				arg->position -= 2;
    29ee:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    29f0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    29f4:	3b02      	subs	r3, #2
    29f6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    29f8:	4770      	bx	lr
				arg->position += 2;
    29fa:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    29fc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2a00:	3302      	adds	r3, #2
    2a02:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr33(void) { update(interruptArgs[33]); }
    2a04:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2a06:	7c13      	ldrb	r3, [r2, #16]
    2a08:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2a0c:	2900      	cmp	r1, #0
    2a0e:	d0d1      	beq.n	29b4 <Encoder::isr33()+0x28>
    2a10:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2a14:	e7ce      	b.n	29b4 <Encoder::isr33()+0x28>
    2a16:	bf00      	nop
    2a18:	200051ec 	.word	0x200051ec

00002a1c <Encoder::isr34()>:
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a1c:	4b22      	ldr	r3, [pc, #136]	; (2aa8 <Encoder::isr34()+0x8c>)
    2a1e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2a22:	e9d2 1000 	ldrd	r1, r0, [r2]
    2a26:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2a28:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2a2a:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a2c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2a2e:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2a30:	6894      	ldr	r4, [r2, #8]
    2a32:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2a36:	d02e      	beq.n	2a96 <Encoder::isr34()+0x7a>
		uint8_t state = arg->state & 3;
    2a38:	7c13      	ldrb	r3, [r2, #16]
    2a3a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2a3e:	b9d9      	cbnz	r1, 2a78 <Encoder::isr34()+0x5c>
		if (p2val) state |= 8;
    2a40:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2a44:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2a46:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2a48:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2a4a:	2b0d      	cmp	r3, #13
    2a4c:	d80b      	bhi.n	2a66 <Encoder::isr34()+0x4a>
    2a4e:	e8df f003 	tbb	[pc, r3]
    2a52:	070d      	.short	0x070d
    2a54:	160a071c 	.word	0x160a071c
    2a58:	0a160d0d 	.word	0x0a160d0d
    2a5c:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2a60:	6953      	ldr	r3, [r2, #20]
    2a62:	3b01      	subs	r3, #1
    2a64:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a66:	f85d 4b04 	ldr.w	r4, [sp], #4
    2a6a:	4770      	bx	lr
				arg->position++;
    2a6c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2a72:	3301      	adds	r3, #1
    2a74:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a76:	4770      	bx	lr
		if (p1val) state |= 4;
    2a78:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2a7c:	e7e0      	b.n	2a40 <Encoder::isr34()+0x24>
				arg->position -= 2;
    2a7e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a80:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2a84:	3b02      	subs	r3, #2
    2a86:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a88:	4770      	bx	lr
				arg->position += 2;
    2a8a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2a90:	3302      	adds	r3, #2
    2a92:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr34(void) { update(interruptArgs[34]); }
    2a94:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2a96:	7c13      	ldrb	r3, [r2, #16]
    2a98:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2a9c:	2900      	cmp	r1, #0
    2a9e:	d0d1      	beq.n	2a44 <Encoder::isr34()+0x28>
    2aa0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2aa4:	e7ce      	b.n	2a44 <Encoder::isr34()+0x28>
    2aa6:	bf00      	nop
    2aa8:	200051ec 	.word	0x200051ec

00002aac <Encoder::isr35()>:
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2aac:	4b22      	ldr	r3, [pc, #136]	; (2b38 <Encoder::isr35()+0x8c>)
    2aae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2ab2:	e9d2 1000 	ldrd	r1, r0, [r2]
    2ab6:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2ab8:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2aba:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2abc:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2abe:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2ac0:	6894      	ldr	r4, [r2, #8]
    2ac2:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2ac6:	d02e      	beq.n	2b26 <Encoder::isr35()+0x7a>
		uint8_t state = arg->state & 3;
    2ac8:	7c13      	ldrb	r3, [r2, #16]
    2aca:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2ace:	b9d9      	cbnz	r1, 2b08 <Encoder::isr35()+0x5c>
		if (p2val) state |= 8;
    2ad0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2ad4:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2ad6:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2ad8:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2ada:	2b0d      	cmp	r3, #13
    2adc:	d80b      	bhi.n	2af6 <Encoder::isr35()+0x4a>
    2ade:	e8df f003 	tbb	[pc, r3]
    2ae2:	070d      	.short	0x070d
    2ae4:	160a071c 	.word	0x160a071c
    2ae8:	0a160d0d 	.word	0x0a160d0d
    2aec:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2af0:	6953      	ldr	r3, [r2, #20]
    2af2:	3b01      	subs	r3, #1
    2af4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2af6:	f85d 4b04 	ldr.w	r4, [sp], #4
    2afa:	4770      	bx	lr
				arg->position++;
    2afc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2afe:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2b02:	3301      	adds	r3, #1
    2b04:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2b06:	4770      	bx	lr
		if (p1val) state |= 4;
    2b08:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2b0c:	e7e0      	b.n	2ad0 <Encoder::isr35()+0x24>
				arg->position -= 2;
    2b0e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2b10:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2b14:	3b02      	subs	r3, #2
    2b16:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2b18:	4770      	bx	lr
				arg->position += 2;
    2b1a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2b1c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2b20:	3302      	adds	r3, #2
    2b22:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr35(void) { update(interruptArgs[35]); }
    2b24:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2b26:	7c13      	ldrb	r3, [r2, #16]
    2b28:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2b2c:	2900      	cmp	r1, #0
    2b2e:	d0d1      	beq.n	2ad4 <Encoder::isr35()+0x28>
    2b30:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2b34:	e7ce      	b.n	2ad4 <Encoder::isr35()+0x28>
    2b36:	bf00      	nop
    2b38:	200051ec 	.word	0x200051ec

00002b3c <Encoder::isr36()>:
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2b3c:	4b22      	ldr	r3, [pc, #136]	; (2bc8 <Encoder::isr36()+0x8c>)
    2b3e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2b42:	e9d2 1000 	ldrd	r1, r0, [r2]
    2b46:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2b48:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2b4a:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2b4c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2b4e:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2b50:	6894      	ldr	r4, [r2, #8]
    2b52:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2b56:	d02e      	beq.n	2bb6 <Encoder::isr36()+0x7a>
		uint8_t state = arg->state & 3;
    2b58:	7c13      	ldrb	r3, [r2, #16]
    2b5a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2b5e:	b9d9      	cbnz	r1, 2b98 <Encoder::isr36()+0x5c>
		if (p2val) state |= 8;
    2b60:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2b64:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2b66:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2b68:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2b6a:	2b0d      	cmp	r3, #13
    2b6c:	d80b      	bhi.n	2b86 <Encoder::isr36()+0x4a>
    2b6e:	e8df f003 	tbb	[pc, r3]
    2b72:	070d      	.short	0x070d
    2b74:	160a071c 	.word	0x160a071c
    2b78:	0a160d0d 	.word	0x0a160d0d
    2b7c:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2b80:	6953      	ldr	r3, [r2, #20]
    2b82:	3b01      	subs	r3, #1
    2b84:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2b86:	f85d 4b04 	ldr.w	r4, [sp], #4
    2b8a:	4770      	bx	lr
				arg->position++;
    2b8c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2b92:	3301      	adds	r3, #1
    2b94:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2b96:	4770      	bx	lr
		if (p1val) state |= 4;
    2b98:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2b9c:	e7e0      	b.n	2b60 <Encoder::isr36()+0x24>
				arg->position -= 2;
    2b9e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2ba4:	3b02      	subs	r3, #2
    2ba6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2ba8:	4770      	bx	lr
				arg->position += 2;
    2baa:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2bac:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2bb0:	3302      	adds	r3, #2
    2bb2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr36(void) { update(interruptArgs[36]); }
    2bb4:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2bb6:	7c13      	ldrb	r3, [r2, #16]
    2bb8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2bbc:	2900      	cmp	r1, #0
    2bbe:	d0d1      	beq.n	2b64 <Encoder::isr36()+0x28>
    2bc0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2bc4:	e7ce      	b.n	2b64 <Encoder::isr36()+0x28>
    2bc6:	bf00      	nop
    2bc8:	200051ec 	.word	0x200051ec

00002bcc <Encoder::isr37()>:
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2bcc:	4b22      	ldr	r3, [pc, #136]	; (2c58 <Encoder::isr37()+0x8c>)
    2bce:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2bd2:	e9d2 1000 	ldrd	r1, r0, [r2]
    2bd6:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2bd8:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2bda:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2bdc:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2bde:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2be0:	6894      	ldr	r4, [r2, #8]
    2be2:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2be6:	d02e      	beq.n	2c46 <Encoder::isr37()+0x7a>
		uint8_t state = arg->state & 3;
    2be8:	7c13      	ldrb	r3, [r2, #16]
    2bea:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2bee:	b9d9      	cbnz	r1, 2c28 <Encoder::isr37()+0x5c>
		if (p2val) state |= 8;
    2bf0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2bf4:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2bf6:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2bf8:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2bfa:	2b0d      	cmp	r3, #13
    2bfc:	d80b      	bhi.n	2c16 <Encoder::isr37()+0x4a>
    2bfe:	e8df f003 	tbb	[pc, r3]
    2c02:	070d      	.short	0x070d
    2c04:	160a071c 	.word	0x160a071c
    2c08:	0a160d0d 	.word	0x0a160d0d
    2c0c:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2c10:	6953      	ldr	r3, [r2, #20]
    2c12:	3b01      	subs	r3, #1
    2c14:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c16:	f85d 4b04 	ldr.w	r4, [sp], #4
    2c1a:	4770      	bx	lr
				arg->position++;
    2c1c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2c22:	3301      	adds	r3, #1
    2c24:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c26:	4770      	bx	lr
		if (p1val) state |= 4;
    2c28:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2c2c:	e7e0      	b.n	2bf0 <Encoder::isr37()+0x24>
				arg->position -= 2;
    2c2e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c30:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2c34:	3b02      	subs	r3, #2
    2c36:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c38:	4770      	bx	lr
				arg->position += 2;
    2c3a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2c40:	3302      	adds	r3, #2
    2c42:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr37(void) { update(interruptArgs[37]); }
    2c44:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2c46:	7c13      	ldrb	r3, [r2, #16]
    2c48:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2c4c:	2900      	cmp	r1, #0
    2c4e:	d0d1      	beq.n	2bf4 <Encoder::isr37()+0x28>
    2c50:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2c54:	e7ce      	b.n	2bf4 <Encoder::isr37()+0x28>
    2c56:	bf00      	nop
    2c58:	200051ec 	.word	0x200051ec

00002c5c <Encoder::isr38()>:
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2c5c:	4b22      	ldr	r3, [pc, #136]	; (2ce8 <Encoder::isr38()+0x8c>)
    2c5e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2c62:	e9d2 1000 	ldrd	r1, r0, [r2]
    2c66:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2c68:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2c6a:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2c6c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2c6e:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2c70:	6894      	ldr	r4, [r2, #8]
    2c72:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2c76:	d02e      	beq.n	2cd6 <Encoder::isr38()+0x7a>
		uint8_t state = arg->state & 3;
    2c78:	7c13      	ldrb	r3, [r2, #16]
    2c7a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2c7e:	b9d9      	cbnz	r1, 2cb8 <Encoder::isr38()+0x5c>
		if (p2val) state |= 8;
    2c80:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2c84:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2c86:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2c88:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2c8a:	2b0d      	cmp	r3, #13
    2c8c:	d80b      	bhi.n	2ca6 <Encoder::isr38()+0x4a>
    2c8e:	e8df f003 	tbb	[pc, r3]
    2c92:	070d      	.short	0x070d
    2c94:	160a071c 	.word	0x160a071c
    2c98:	0a160d0d 	.word	0x0a160d0d
    2c9c:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2ca0:	6953      	ldr	r3, [r2, #20]
    2ca2:	3b01      	subs	r3, #1
    2ca4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
    2caa:	4770      	bx	lr
				arg->position++;
    2cac:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2cae:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2cb2:	3301      	adds	r3, #1
    2cb4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2cb6:	4770      	bx	lr
		if (p1val) state |= 4;
    2cb8:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2cbc:	e7e0      	b.n	2c80 <Encoder::isr38()+0x24>
				arg->position -= 2;
    2cbe:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2cc4:	3b02      	subs	r3, #2
    2cc6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2cc8:	4770      	bx	lr
				arg->position += 2;
    2cca:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2cd0:	3302      	adds	r3, #2
    2cd2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr38(void) { update(interruptArgs[38]); }
    2cd4:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2cd6:	7c13      	ldrb	r3, [r2, #16]
    2cd8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2cdc:	2900      	cmp	r1, #0
    2cde:	d0d1      	beq.n	2c84 <Encoder::isr38()+0x28>
    2ce0:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2ce4:	e7ce      	b.n	2c84 <Encoder::isr38()+0x28>
    2ce6:	bf00      	nop
    2ce8:	200051ec 	.word	0x200051ec

00002cec <Encoder::isr39()>:
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2cec:	4b22      	ldr	r3, [pc, #136]	; (2d78 <Encoder::isr39()+0x8c>)
    2cee:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2cf2:	e9d2 1000 	ldrd	r1, r0, [r2]
    2cf6:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2cf8:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2cfa:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2cfc:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2cfe:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2d00:	6894      	ldr	r4, [r2, #8]
    2d02:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2d06:	d02e      	beq.n	2d66 <Encoder::isr39()+0x7a>
		uint8_t state = arg->state & 3;
    2d08:	7c13      	ldrb	r3, [r2, #16]
    2d0a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2d0e:	b9d9      	cbnz	r1, 2d48 <Encoder::isr39()+0x5c>
		if (p2val) state |= 8;
    2d10:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2d14:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2d16:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2d18:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2d1a:	2b0d      	cmp	r3, #13
    2d1c:	d80b      	bhi.n	2d36 <Encoder::isr39()+0x4a>
    2d1e:	e8df f003 	tbb	[pc, r3]
    2d22:	070d      	.short	0x070d
    2d24:	160a071c 	.word	0x160a071c
    2d28:	0a160d0d 	.word	0x0a160d0d
    2d2c:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2d30:	6953      	ldr	r3, [r2, #20]
    2d32:	3b01      	subs	r3, #1
    2d34:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d36:	f85d 4b04 	ldr.w	r4, [sp], #4
    2d3a:	4770      	bx	lr
				arg->position++;
    2d3c:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2d42:	3301      	adds	r3, #1
    2d44:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d46:	4770      	bx	lr
		if (p1val) state |= 4;
    2d48:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2d4c:	e7e0      	b.n	2d10 <Encoder::isr39()+0x24>
				arg->position -= 2;
    2d4e:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d50:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2d54:	3b02      	subs	r3, #2
    2d56:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d58:	4770      	bx	lr
				arg->position += 2;
    2d5a:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2d60:	3302      	adds	r3, #2
    2d62:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr39(void) { update(interruptArgs[39]); }
    2d64:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2d66:	7c13      	ldrb	r3, [r2, #16]
    2d68:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2d6c:	2900      	cmp	r1, #0
    2d6e:	d0d1      	beq.n	2d14 <Encoder::isr39()+0x28>
    2d70:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2d74:	e7ce      	b.n	2d14 <Encoder::isr39()+0x28>
    2d76:	bf00      	nop
    2d78:	200051ec 	.word	0x200051ec

00002d7c <Encoder::isr40()>:
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2d7c:	4b22      	ldr	r3, [pc, #136]	; (2e08 <Encoder::isr40()+0x8c>)
    2d7e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2d82:	e9d2 1000 	ldrd	r1, r0, [r2]
    2d86:	68d3      	ldr	r3, [r2, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2d88:	6809      	ldr	r1, [r1, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2d8a:	6800      	ldr	r0, [r0, #0]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2d8c:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2d8e:	4218      	tst	r0, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    2d90:	6894      	ldr	r4, [r2, #8]
    2d92:	ea01 0104 	and.w	r1, r1, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    2d96:	d02e      	beq.n	2df6 <Encoder::isr40()+0x7a>
		uint8_t state = arg->state & 3;
    2d98:	7c13      	ldrb	r3, [r2, #16]
    2d9a:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2d9e:	b9d9      	cbnz	r1, 2dd8 <Encoder::isr40()+0x5c>
		if (p2val) state |= 8;
    2da0:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    2da4:	0899      	lsrs	r1, r3, #2
		switch (state) {
    2da6:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    2da8:	7411      	strb	r1, [r2, #16]
		switch (state) {
    2daa:	2b0d      	cmp	r3, #13
    2dac:	d80b      	bhi.n	2dc6 <Encoder::isr40()+0x4a>
    2dae:	e8df f003 	tbb	[pc, r3]
    2db2:	070d      	.short	0x070d
    2db4:	160a071c 	.word	0x160a071c
    2db8:	0a160d0d 	.word	0x0a160d0d
    2dbc:	0d071c07 	.word	0x0d071c07
				arg->position--;
    2dc0:	6953      	ldr	r3, [r2, #20]
    2dc2:	3b01      	subs	r3, #1
    2dc4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2dc6:	f85d 4b04 	ldr.w	r4, [sp], #4
    2dca:	4770      	bx	lr
				arg->position++;
    2dcc:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2dce:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    2dd2:	3301      	adds	r3, #1
    2dd4:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2dd6:	4770      	bx	lr
		if (p1val) state |= 4;
    2dd8:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2ddc:	e7e0      	b.n	2da0 <Encoder::isr40()+0x24>
				arg->position -= 2;
    2dde:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2de0:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    2de4:	3b02      	subs	r3, #2
    2de6:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2de8:	4770      	bx	lr
				arg->position += 2;
    2dea:	6953      	ldr	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2dec:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    2df0:	3302      	adds	r3, #2
    2df2:	6153      	str	r3, [r2, #20]
	static ENCODER_ISR_ATTR void isr40(void) { update(interruptArgs[40]); }
    2df4:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    2df6:	7c13      	ldrb	r3, [r2, #16]
    2df8:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    2dfc:	2900      	cmp	r1, #0
    2dfe:	d0d1      	beq.n	2da4 <Encoder::isr40()+0x28>
    2e00:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    2e04:	e7ce      	b.n	2da4 <Encoder::isr40()+0x28>
    2e06:	bf00      	nop
    2e08:	200051ec 	.word	0x200051ec

00002e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>:

class AudioConnection
{
public:
	AudioConnection();
	AudioConnection(AudioStream &source, AudioStream &destination)
    2e0c:	b510      	push	{r4, lr}
    2e0e:	b084      	sub	sp, #16
    2e10:	4604      	mov	r4, r0
    2e12:	9103      	str	r1, [sp, #12]
    2e14:	9202      	str	r2, [sp, #8]
		: AudioConnection() { connect(source,destination); }
    2e16:	f012 f8db 	bl	14fd0 <AudioConnection::AudioConnection()>
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
	friend class AudioStream;
	~AudioConnection(); 
	int disconnect(void);
	int connect(void);
	int connect(AudioStream &source, AudioStream &destination) {return connect(source,0,destination,0);};
    2e1a:	2200      	movs	r2, #0
    2e1c:	4620      	mov	r0, r4
    2e1e:	e9dd 3102 	ldrd	r3, r1, [sp, #8]
    2e22:	9200      	str	r2, [sp, #0]
    2e24:	f012 f948 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
		: AudioConnection() { connect(source,destination); }
    2e28:	4620      	mov	r0, r4
    2e2a:	b004      	add	sp, #16
    2e2c:	bd10      	pop	{r4, pc}
    2e2e:	bf00      	nop

00002e30 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>:
#define AudioMemoryUsageMaxReset() (AudioStream::memory_used_max = AudioStream::memory_used)

class AudioStream
{
public:
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    2e30:	b510      	push	{r4, lr}
		num_inputs(ninput), inputQueue(iqueue) {
			active = false;
    2e32:	2300      	movs	r3, #0
	AudioStream(unsigned char ninput, audio_block_t **iqueue) :
    2e34:	4604      	mov	r4, r0
    2e36:	4610      	mov	r0, r2
		num_inputs(ninput), inputQueue(iqueue) {
    2e38:	4a0d      	ldr	r2, [pc, #52]	; (2e70 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x40>)
    2e3a:	7261      	strb	r1, [r4, #9]
			active = false;
    2e3c:	7223      	strb	r3, [r4, #8]
		num_inputs(ninput), inputQueue(iqueue) {
    2e3e:	6022      	str	r2, [r4, #0]
			destination_list = NULL;
    2e40:	e9c4 3003 	strd	r3, r0, [r4, #12]
			for (int i=0; i < num_inputs; i++) {
    2e44:	b119      	cbz	r1, 2e4e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x1e>
				inputQueue[i] = NULL;
    2e46:	008a      	lsls	r2, r1, #2
    2e48:	4619      	mov	r1, r3
    2e4a:	f01f fb49 	bl	224e0 <memset>
			}
			// add to a simple list, for update_all
			// TODO: replace with a proper data flow analysis in update_all
			if (first_update == NULL) {
    2e4e:	4a09      	ldr	r2, [pc, #36]	; (2e74 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x44>)
    2e50:	6813      	ldr	r3, [r2, #0]
    2e52:	b153      	cbz	r3, 2e6a <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x3a>
				first_update = this;
			} else {
				AudioStream *p;
				for (p=first_update; p->next_update; p = p->next_update) ;
    2e54:	461a      	mov	r2, r3
    2e56:	695b      	ldr	r3, [r3, #20]
    2e58:	2b00      	cmp	r3, #0
    2e5a:	d1fb      	bne.n	2e54 <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x24>
				p->next_update = this;
    2e5c:	6154      	str	r4, [r2, #20]
			}
			next_update = NULL;
    2e5e:	2300      	movs	r3, #0
			cpu_cycles = 0;
			cpu_cycles_max = 0;
			numConnections = 0;
		}
    2e60:	4620      	mov	r0, r4
			next_update = NULL;
    2e62:	6163      	str	r3, [r4, #20]
			cpu_cycles = 0;
    2e64:	6063      	str	r3, [r4, #4]
			numConnections = 0;
    2e66:	72a3      	strb	r3, [r4, #10]
		}
    2e68:	bd10      	pop	{r4, pc}
				first_update = this;
    2e6a:	6014      	str	r4, [r2, #0]
    2e6c:	e7f7      	b.n	2e5e <AudioStream::AudioStream(unsigned char, audio_block_struct**)+0x2e>
    2e6e:	bf00      	nop
    2e70:	200013a8 	.word	0x200013a8
    2e74:	20005038 	.word	0x20005038

00002e78 <AudioEffectEnvelope::AudioEffectEnvelope()>:
		num_inputs(ninput), inputQueue(iqueue) {
    2e78:	4603      	mov	r3, r0
			destination_list = NULL;
    2e7a:	2200      	movs	r2, #0
			if (first_update == NULL) {
    2e7c:	4913      	ldr	r1, [pc, #76]	; (2ecc <AudioEffectEnvelope::AudioEffectEnvelope()+0x54>)
#define SAMPLES_PER_MSEC (AUDIO_SAMPLE_RATE_EXACT/1000.0f)

class AudioEffectEnvelope : public AudioStream
{
public:
	AudioEffectEnvelope() : AudioStream(1, inputQueueArray) {
    2e7e:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    2e80:	4c13      	ldr	r4, [pc, #76]	; (2ed0 <AudioEffectEnvelope::AudioEffectEnvelope()+0x58>)
    2e82:	f843 4b18 	str.w	r4, [r3], #24
			active = false;
    2e86:	f44f 7480 	mov.w	r4, #256	; 0x100
				inputQueue[i] = NULL;
    2e8a:	6182      	str	r2, [r0, #24]
			active = false;
    2e8c:	8104      	strh	r4, [r0, #8]
			destination_list = NULL;
    2e8e:	e9c0 2303 	strd	r2, r3, [r0, #12]
			if (first_update == NULL) {
    2e92:	680b      	ldr	r3, [r1, #0]
    2e94:	b1c3      	cbz	r3, 2ec8 <AudioEffectEnvelope::AudioEffectEnvelope()+0x50>
				for (p=first_update; p->next_update; p = p->next_update) ;
    2e96:	461a      	mov	r2, r3
    2e98:	695b      	ldr	r3, [r3, #20]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d1fb      	bne.n	2e96 <AudioEffectEnvelope::AudioEffectEnvelope()+0x1e>
				p->next_update = this;
    2e9e:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    2ea0:	2300      	movs	r3, #0
    2ea2:	4a0c      	ldr	r2, [pc, #48]	; (2ed4 <AudioEffectEnvelope::AudioEffectEnvelope()+0x5c>)
		releaseNoteOn(5.0f);
	}
	void noteOn();
	void noteOff();
	void delay(float milliseconds) {
		delay_count = milliseconds2count(milliseconds);
    2ea4:	f44f 1468 	mov.w	r4, #3801088	; 0x3a0000
	void attack(float milliseconds) {
		attack_count = milliseconds2count(milliseconds);
		if (attack_count == 0) attack_count = 1;
	}
	void hold(float milliseconds) {
		hold_count = milliseconds2count(milliseconds);
    2ea8:	490b      	ldr	r1, [pc, #44]	; (2ed8 <AudioEffectEnvelope::AudioEffectEnvelope()+0x60>)
    2eaa:	6143      	str	r3, [r0, #20]
			cpu_cycles = 0;
    2eac:	6043      	str	r3, [r0, #4]
			numConnections = 0;
    2eae:	7283      	strb	r3, [r0, #10]
	AudioEffectEnvelope() : AudioStream(1, inputQueueArray) {
    2eb0:	6002      	str	r2, [r0, #0]
		if (decay_count == 0) decay_count = 1;
	}
	void sustain(float level) {
		if (level < 0.0f) level = 0;
		else if (level > 1.0f) level = 1.0f;
		sustain_mult = level * 1073741824.0f;
    2eb2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
		state = 0;
    2eb6:	7703      	strb	r3, [r0, #28]
	}
	void release(float milliseconds) {
		release_count = milliseconds2count(milliseconds);
    2eb8:	4b08      	ldr	r3, [pc, #32]	; (2edc <AudioEffectEnvelope::AudioEffectEnvelope()+0x64>)
		hold_count = milliseconds2count(milliseconds);
    2eba:	e9c0 410a 	strd	r4, r1, [r0, #40]	; 0x28
		release_count = milliseconds2count(milliseconds);
    2ebe:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30
	}
    2ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
    2ec6:	4770      	bx	lr
				first_update = this;
    2ec8:	6008      	str	r0, [r1, #0]
    2eca:	e7e9      	b.n	2ea0 <AudioEffectEnvelope::AudioEffectEnvelope()+0x28>
    2ecc:	20005038 	.word	0x20005038
    2ed0:	200013a8 	.word	0x200013a8
    2ed4:	20001470 	.word	0x20001470
    2ed8:	00c1000e 	.word	0x00c1000e
    2edc:	001c0676 	.word	0x001c0676

00002ee0 <AudioMixer4::AudioMixer4()>:
			destination_list = NULL;
    2ee0:	2200      	movs	r2, #0
		num_inputs(ninput), inputQueue(iqueue) {
    2ee2:	4603      	mov	r3, r0
			if (first_update == NULL) {
    2ee4:	4913      	ldr	r1, [pc, #76]	; (2f34 <AudioMixer4::AudioMixer4()+0x54>)
			active = false;
    2ee6:	f44f 6c80 	mov.w	ip, #1024	; 0x400

class AudioMixer4 : public AudioStream
{
#if defined(__ARM_ARCH_7EM__)
public:
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    2eea:	b410      	push	{r4}
		num_inputs(ninput), inputQueue(iqueue) {
    2eec:	4c12      	ldr	r4, [pc, #72]	; (2f38 <AudioMixer4::AudioMixer4()+0x58>)
    2eee:	f843 4b28 	str.w	r4, [r3], #40
			active = false;
    2ef2:	f8a0 c008 	strh.w	ip, [r0, #8]
			destination_list = NULL;
    2ef6:	e9c0 2303 	strd	r2, r3, [r0, #12]
			if (first_update == NULL) {
    2efa:	680b      	ldr	r3, [r1, #0]
				inputQueue[i] = NULL;
    2efc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
    2f00:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
			if (first_update == NULL) {
    2f04:	b19b      	cbz	r3, 2f2e <AudioMixer4::AudioMixer4()+0x4e>
				for (p=first_update; p->next_update; p = p->next_update) ;
    2f06:	461a      	mov	r2, r3
    2f08:	695b      	ldr	r3, [r3, #20]
    2f0a:	2b00      	cmp	r3, #0
    2f0c:	d1fb      	bne.n	2f06 <AudioMixer4::AudioMixer4()+0x26>
				p->next_update = this;
    2f0e:	6150      	str	r0, [r2, #20]
			next_update = NULL;
    2f10:	2200      	movs	r2, #0
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    2f12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    2f16:	4909      	ldr	r1, [pc, #36]	; (2f3c <AudioMixer4::AudioMixer4()+0x5c>)
	}
    2f18:	f85d 4b04 	ldr.w	r4, [sp], #4
    2f1c:	6142      	str	r2, [r0, #20]
			cpu_cycles = 0;
    2f1e:	6042      	str	r2, [r0, #4]
			numConnections = 0;
    2f20:	7282      	strb	r2, [r0, #10]
	AudioMixer4(void) : AudioStream(4, inputQueueArray) {
    2f22:	6001      	str	r1, [r0, #0]
		for (int i=0; i<4; i++) multiplier[i] = 65536;
    2f24:	e9c0 3306 	strd	r3, r3, [r0, #24]
    2f28:	e9c0 3308 	strd	r3, r3, [r0, #32]
	}
    2f2c:	4770      	bx	lr
				first_update = this;
    2f2e:	6008      	str	r0, [r1, #0]
    2f30:	e7ee      	b.n	2f10 <AudioMixer4::AudioMixer4()+0x30>
    2f32:	bf00      	nop
    2f34:	20005038 	.word	0x20005038
    2f38:	200013a8 	.word	0x200013a8
    2f3c:	2000139c 	.word	0x2000139c

00002f40 <File::dec_refcount()>:
	void dec_refcount() {
    2f40:	b510      	push	{r4, lr}
    2f42:	4604      	mov	r4, r0
		if (--(f->refcount) == 0) {
    2f44:	6900      	ldr	r0, [r0, #16]
    2f46:	6843      	ldr	r3, [r0, #4]
    2f48:	3b01      	subs	r3, #1
    2f4a:	6043      	str	r3, [r0, #4]
    2f4c:	b93b      	cbnz	r3, 2f5e <File::dec_refcount()+0x1e>
			f->close();
    2f4e:	6803      	ldr	r3, [r0, #0]
    2f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2f52:	4798      	blx	r3
			delete f;
    2f54:	6920      	ldr	r0, [r4, #16]
    2f56:	b110      	cbz	r0, 2f5e <File::dec_refcount()+0x1e>
    2f58:	6803      	ldr	r3, [r0, #0]
    2f5a:	685b      	ldr	r3, [r3, #4]
    2f5c:	4798      	blx	r3
		}
		f = nullptr;
    2f5e:	2300      	movs	r3, #0
    2f60:	6123      	str	r3, [r4, #16]
	}
    2f62:	bd10      	pop	{r4, pc}

00002f64 <SDClass::open(char const*, unsigned char)>:
public:
	SDClass() { }
	bool begin(uint8_t csPin = 10);
	File open(const char *filepath, uint8_t mode = FILE_READ) {
		oflag_t flags = O_READ;
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2f64:	2b01      	cmp	r3, #1
	File open(const char *filepath, uint8_t mode = FILE_READ) {
    2f66:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f68:	4605      	mov	r5, r0
    2f6a:	b095      	sub	sp, #84	; 0x54
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2f6c:	d03d      	beq.n	2fea <SDClass::open(char const*, unsigned char)+0x86>
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2f6e:	2b02      	cmp	r3, #2
    2f70:	f240 2002 	movw	r0, #514	; 0x202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2f74:	f101 0104 	add.w	r1, r1, #4
		else if (mode == FILE_WRITE_BEGIN) flags = O_RDWR | O_CREAT;
    2f78:	bf0c      	ite	eq
    2f7a:	4603      	moveq	r3, r0
    2f7c:	2300      	movne	r3, #0
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2f7e:	4668      	mov	r0, sp
    2f80:	f00e ff24 	bl	11dcc <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2f84:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2f86:	2b00      	cmp	r3, #0
    2f88:	d038      	beq.n	2ffc <SDClass::open(char const*, unsigned char)+0x98>
		if (file) return File(new SDFile(file));
    2f8a:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    2f8c:	2600      	movs	r6, #0
    2f8e:	f013 fb9f 	bl	166d0 <operator new(unsigned int)>
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2f92:	4b21      	ldr	r3, [pc, #132]	; (3018 <SDClass::open(char const*, unsigned char)+0xb4>)
class StreamFile : public stream_t, public BaseFile {
    2f94:	af04      	add	r7, sp, #16
		if (file) return File(new SDFile(file));
    2f96:	4604      	mov	r4, r0
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    2f98:	e9c0 3600 	strd	r3, r6, [r0]
class Print
    2f9c:	9b01      	ldr	r3, [sp, #4]
    2f9e:	4639      	mov	r1, r7
    2fa0:	3018      	adds	r0, #24
    2fa2:	f840 3c0c 	str.w	r3, [r0, #-12]
class Stream : public Print
    2fa6:	4b1d      	ldr	r3, [pc, #116]	; (301c <SDClass::open(char const*, unsigned char)+0xb8>)
    2fa8:	f840 3c10 	str.w	r3, [r0, #-16]
    2fac:	9b02      	ldr	r3, [sp, #8]
    2fae:	f840 3c08 	str.w	r3, [r0, #-8]
    2fb2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    2fb6:	f800 3c04 	strb.w	r3, [r0, #-4]
    2fba:	f00e fdab 	bl	11b14 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2fbe:	4b18      	ldr	r3, [pc, #96]	; (3020 <SDClass::open(char const*, unsigned char)+0xbc>)
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2fc4:	65a6      	str	r6, [r4, #88]	; 0x58
    2fc6:	60a3      	str	r3, [r4, #8]
	File(FileImpl *file) {
    2fc8:	4b16      	ldr	r3, [pc, #88]	; (3024 <SDClass::open(char const*, unsigned char)+0xc0>)
	constexpr Print() : write_error(0) {}
    2fca:	606e      	str	r6, [r5, #4]
    2fcc:	602b      	str	r3, [r5, #0]
		if (f) f->refcount++;
    2fce:	6863      	ldr	r3, [r4, #4]
    2fd0:	732e      	strb	r6, [r5, #12]
    2fd2:	3301      	adds	r3, #1
    2fd4:	60aa      	str	r2, [r5, #8]
		f = file;
    2fd6:	612c      	str	r4, [r5, #16]
		if (f) f->refcount++;
    2fd8:	6063      	str	r3, [r4, #4]
    2fda:	4b13      	ldr	r3, [pc, #76]	; (3028 <SDClass::open(char const*, unsigned char)+0xc4>)
  ~FsBaseFile() {close();}
    2fdc:	4638      	mov	r0, r7
    2fde:	9300      	str	r3, [sp, #0]
    2fe0:	f00e fdda 	bl	11b98 <FsBaseFile::close()>
		return File();
	}
    2fe4:	4628      	mov	r0, r5
    2fe6:	b015      	add	sp, #84	; 0x54
    2fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (mode == FILE_WRITE) flags = O_RDWR | O_CREAT | O_AT_END;
    2fea:	f244 2302 	movw	r3, #16898	; 0x4202
		SDFAT_FILE file = sdfs.open(filepath, flags);
    2fee:	3104      	adds	r1, #4
    2ff0:	4668      	mov	r0, sp
    2ff2:	f00e feeb 	bl	11dcc <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    2ff6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    2ff8:	2b00      	cmp	r3, #0
    2ffa:	d1c6      	bne.n	2f8a <SDClass::open(char const*, unsigned char)+0x26>
    2ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2ffe:	2b00      	cmp	r3, #0
    3000:	d1c3      	bne.n	2f8a <SDClass::open(char const*, unsigned char)+0x26>
    3002:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	constexpr File() : f(nullptr) { }
    3006:	4a07      	ldr	r2, [pc, #28]	; (3024 <SDClass::open(char const*, unsigned char)+0xc0>)
    3008:	af04      	add	r7, sp, #16
    300a:	732b      	strb	r3, [r5, #12]
    300c:	602a      	str	r2, [r5, #0]
    300e:	612b      	str	r3, [r5, #16]
    3010:	e9c5 3101 	strd	r3, r1, [r5, #4]
    3014:	e7e1      	b.n	2fda <SDClass::open(char const*, unsigned char)+0x76>
    3016:	bf00      	nop
    3018:	20001524 	.word	0x20001524
    301c:	20001580 	.word	0x20001580
    3020:	20001500 	.word	0x20001500
    3024:	200014d4 	.word	0x200014d4
    3028:	20001378 	.word	0x20001378

0000302c <Encoder::update(Encoder_internal_state_t*)>:
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    302c:	e9d0 2100 	ldrd	r2, r1, [r0]
    3030:	68c3      	ldr	r3, [r0, #12]
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    3032:	6812      	ldr	r2, [r2, #0]
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    3034:	6809      	ldr	r1, [r1, #0]
	static void update(Encoder_internal_state_t *arg) {
    3036:	b410      	push	{r4}
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    3038:	4219      	tst	r1, r3
		uint8_t p1val = DIRECT_PIN_READ(arg->pin1_register, arg->pin1_bitmask);
    303a:	6884      	ldr	r4, [r0, #8]
    303c:	ea02 0204 	and.w	r2, r2, r4
		uint8_t p2val = DIRECT_PIN_READ(arg->pin2_register, arg->pin2_bitmask);
    3040:	d02e      	beq.n	30a0 <Encoder::update(Encoder_internal_state_t*)+0x74>
		uint8_t state = arg->state & 3;
    3042:	7c03      	ldrb	r3, [r0, #16]
    3044:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    3048:	b9da      	cbnz	r2, 3082 <Encoder::update(Encoder_internal_state_t*)+0x56>
		if (p2val) state |= 8;
    304a:	f043 0308 	orr.w	r3, r3, #8
		arg->state = (state >> 2);
    304e:	089a      	lsrs	r2, r3, #2
		switch (state) {
    3050:	3b01      	subs	r3, #1
		arg->state = (state >> 2);
    3052:	7402      	strb	r2, [r0, #16]
		switch (state) {
    3054:	2b0d      	cmp	r3, #13
    3056:	d80b      	bhi.n	3070 <Encoder::update(Encoder_internal_state_t*)+0x44>
    3058:	e8df f003 	tbb	[pc, r3]
    305c:	071c070d 	.word	0x071c070d
    3060:	0d0d160a 	.word	0x0d0d160a
    3064:	1c070a16 	.word	0x1c070a16
    3068:	0d07      	.short	0x0d07
				arg->position--;
    306a:	6943      	ldr	r3, [r0, #20]
    306c:	3b01      	subs	r3, #1
    306e:	6143      	str	r3, [r0, #20]
	}
    3070:	f85d 4b04 	ldr.w	r4, [sp], #4
    3074:	4770      	bx	lr
				arg->position++;
    3076:	6943      	ldr	r3, [r0, #20]
	}
    3078:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position++;
    307c:	3301      	adds	r3, #1
    307e:	6143      	str	r3, [r0, #20]
	}
    3080:	4770      	bx	lr
		if (p1val) state |= 4;
    3082:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    3086:	e7e0      	b.n	304a <Encoder::update(Encoder_internal_state_t*)+0x1e>
				arg->position -= 2;
    3088:	6943      	ldr	r3, [r0, #20]
	}
    308a:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position -= 2;
    308e:	3b02      	subs	r3, #2
    3090:	6143      	str	r3, [r0, #20]
	}
    3092:	4770      	bx	lr
				arg->position += 2;
    3094:	6943      	ldr	r3, [r0, #20]
	}
    3096:	f85d 4b04 	ldr.w	r4, [sp], #4
				arg->position += 2;
    309a:	3302      	adds	r3, #2
    309c:	6143      	str	r3, [r0, #20]
	}
    309e:	4770      	bx	lr
		uint8_t state = arg->state & 3;
    30a0:	7c03      	ldrb	r3, [r0, #16]
    30a2:	f003 0303 	and.w	r3, r3, #3
		if (p1val) state |= 4;
    30a6:	2a00      	cmp	r2, #0
    30a8:	d0d1      	beq.n	304e <Encoder::update(Encoder_internal_state_t*)+0x22>
    30aa:	f043 0304 	orr.w	r3, r3, #4
		if (p2val) state |= 8;
    30ae:	e7ce      	b.n	304e <Encoder::update(Encoder_internal_state_t*)+0x22>

000030b0 <Encoder::isr52()>:
	static ENCODER_ISR_ATTR void isr52(void) { update(interruptArgs[52]); }
    30b0:	b508      	push	{r3, lr}
    30b2:	4b03      	ldr	r3, [pc, #12]	; (30c0 <Encoder::isr52()+0x10>)
    30b4:	f8d3 00d0 	ldr.w	r0, [r3, #208]	; 0xd0
    30b8:	f7ff ffb8 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    30bc:	bd08      	pop	{r3, pc}
    30be:	bf00      	nop
    30c0:	200051ec 	.word	0x200051ec

000030c4 <Encoder::isr51()>:
	static ENCODER_ISR_ATTR void isr51(void) { update(interruptArgs[51]); }
    30c4:	b508      	push	{r3, lr}
    30c6:	4b03      	ldr	r3, [pc, #12]	; (30d4 <Encoder::isr51()+0x10>)
    30c8:	f8d3 00cc 	ldr.w	r0, [r3, #204]	; 0xcc
    30cc:	f7ff ffae 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    30d0:	bd08      	pop	{r3, pc}
    30d2:	bf00      	nop
    30d4:	200051ec 	.word	0x200051ec

000030d8 <Encoder::isr50()>:
	static ENCODER_ISR_ATTR void isr50(void) { update(interruptArgs[50]); }
    30d8:	b508      	push	{r3, lr}
    30da:	4b03      	ldr	r3, [pc, #12]	; (30e8 <Encoder::isr50()+0x10>)
    30dc:	f8d3 00c8 	ldr.w	r0, [r3, #200]	; 0xc8
    30e0:	f7ff ffa4 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    30e4:	bd08      	pop	{r3, pc}
    30e6:	bf00      	nop
    30e8:	200051ec 	.word	0x200051ec

000030ec <Encoder::isr49()>:
	static ENCODER_ISR_ATTR void isr49(void) { update(interruptArgs[49]); }
    30ec:	b508      	push	{r3, lr}
    30ee:	4b03      	ldr	r3, [pc, #12]	; (30fc <Encoder::isr49()+0x10>)
    30f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
    30f4:	f7ff ff9a 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    30f8:	bd08      	pop	{r3, pc}
    30fa:	bf00      	nop
    30fc:	200051ec 	.word	0x200051ec

00003100 <Encoder::isr48()>:
	static ENCODER_ISR_ATTR void isr48(void) { update(interruptArgs[48]); }
    3100:	b508      	push	{r3, lr}
    3102:	4b03      	ldr	r3, [pc, #12]	; (3110 <Encoder::isr48()+0x10>)
    3104:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
    3108:	f7ff ff90 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    310c:	bd08      	pop	{r3, pc}
    310e:	bf00      	nop
    3110:	200051ec 	.word	0x200051ec

00003114 <Encoder::isr47()>:
	static ENCODER_ISR_ATTR void isr47(void) { update(interruptArgs[47]); }
    3114:	b508      	push	{r3, lr}
    3116:	4b03      	ldr	r3, [pc, #12]	; (3124 <Encoder::isr47()+0x10>)
    3118:	f8d3 00bc 	ldr.w	r0, [r3, #188]	; 0xbc
    311c:	f7ff ff86 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    3120:	bd08      	pop	{r3, pc}
    3122:	bf00      	nop
    3124:	200051ec 	.word	0x200051ec

00003128 <Encoder::isr46()>:
	static ENCODER_ISR_ATTR void isr46(void) { update(interruptArgs[46]); }
    3128:	b508      	push	{r3, lr}
    312a:	4b03      	ldr	r3, [pc, #12]	; (3138 <Encoder::isr46()+0x10>)
    312c:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
    3130:	f7ff ff7c 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    3134:	bd08      	pop	{r3, pc}
    3136:	bf00      	nop
    3138:	200051ec 	.word	0x200051ec

0000313c <Encoder::isr45()>:
	static ENCODER_ISR_ATTR void isr45(void) { update(interruptArgs[45]); }
    313c:	b508      	push	{r3, lr}
    313e:	4b03      	ldr	r3, [pc, #12]	; (314c <Encoder::isr45()+0x10>)
    3140:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    3144:	f7ff ff72 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    3148:	bd08      	pop	{r3, pc}
    314a:	bf00      	nop
    314c:	200051ec 	.word	0x200051ec

00003150 <Encoder::isr44()>:
	static ENCODER_ISR_ATTR void isr44(void) { update(interruptArgs[44]); }
    3150:	b508      	push	{r3, lr}
    3152:	4b03      	ldr	r3, [pc, #12]	; (3160 <Encoder::isr44()+0x10>)
    3154:	f8d3 00b0 	ldr.w	r0, [r3, #176]	; 0xb0
    3158:	f7ff ff68 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    315c:	bd08      	pop	{r3, pc}
    315e:	bf00      	nop
    3160:	200051ec 	.word	0x200051ec

00003164 <Encoder::isr43()>:
	static ENCODER_ISR_ATTR void isr43(void) { update(interruptArgs[43]); }
    3164:	b508      	push	{r3, lr}
    3166:	4b03      	ldr	r3, [pc, #12]	; (3174 <Encoder::isr43()+0x10>)
    3168:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    316c:	f7ff ff5e 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    3170:	bd08      	pop	{r3, pc}
    3172:	bf00      	nop
    3174:	200051ec 	.word	0x200051ec

00003178 <Encoder::isr42()>:
	static ENCODER_ISR_ATTR void isr42(void) { update(interruptArgs[42]); }
    3178:	b508      	push	{r3, lr}
    317a:	4b03      	ldr	r3, [pc, #12]	; (3188 <Encoder::isr42()+0x10>)
    317c:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
    3180:	f7ff ff54 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    3184:	bd08      	pop	{r3, pc}
    3186:	bf00      	nop
    3188:	200051ec 	.word	0x200051ec

0000318c <Encoder::isr41()>:
	static ENCODER_ISR_ATTR void isr41(void) { update(interruptArgs[41]); }
    318c:	b508      	push	{r3, lr}
    318e:	4b03      	ldr	r3, [pc, #12]	; (319c <Encoder::isr41()+0x10>)
    3190:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
    3194:	f7ff ff4a 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    3198:	bd08      	pop	{r3, pc}
    319a:	bf00      	nop
    319c:	200051ec 	.word	0x200051ec

000031a0 <Encoder::isr0()>:
	static ENCODER_ISR_ATTR void isr0(void) { update(interruptArgs[0]); }
    31a0:	b508      	push	{r3, lr}
    31a2:	4b02      	ldr	r3, [pc, #8]	; (31ac <Encoder::isr0()+0xc>)
    31a4:	6818      	ldr	r0, [r3, #0]
    31a6:	f7ff ff41 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    31aa:	bd08      	pop	{r3, pc}
    31ac:	200051ec 	.word	0x200051ec

000031b0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>:
	static uint8_t attach_interrupt(uint8_t pin, Encoder_internal_state_t *state) {
    31b0:	460b      	mov	r3, r1
    31b2:	b510      	push	{r4, lr}
		switch (pin) {
    31b4:	2836      	cmp	r0, #54	; 0x36
    31b6:	f200 8297 	bhi.w	36e8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x538>
    31ba:	e8df f010 	tbh	[pc, r0, lsl #1]
    31be:	028c      	.short	0x028c
    31c0:	02790282 	.word	0x02790282
    31c4:	02670270 	.word	0x02670270
    31c8:	0255025e 	.word	0x0255025e
    31cc:	0243024c 	.word	0x0243024c
    31d0:	0231023a 	.word	0x0231023a
    31d4:	021f0228 	.word	0x021f0228
    31d8:	01b601bf 	.word	0x01b601bf
    31dc:	01a401ad 	.word	0x01a401ad
    31e0:	0192019b 	.word	0x0192019b
    31e4:	01800189 	.word	0x01800189
    31e8:	016e0177 	.word	0x016e0177
    31ec:	015c0165 	.word	0x015c0165
    31f0:	014a0153 	.word	0x014a0153
    31f4:	01380141 	.word	0x01380141
    31f8:	0126012f 	.word	0x0126012f
    31fc:	0113011d 	.word	0x0113011d
    3200:	00ff0109 	.word	0x00ff0109
    3204:	00eb00f5 	.word	0x00eb00f5
    3208:	00d700e1 	.word	0x00d700e1
    320c:	00c300cd 	.word	0x00c300cd
    3210:	00af00b9 	.word	0x00af00b9
    3214:	009b00a5 	.word	0x009b00a5
    3218:	00870091 	.word	0x00870091
    321c:	0073007d 	.word	0x0073007d
    3220:	005f0069 	.word	0x005f0069
    3224:	004b0055 	.word	0x004b0055
    3228:	00370041 	.word	0x00370041
				interruptArgs[54] = state;
    322c:	4cc8      	ldr	r4, [pc, #800]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(54, isr54, CHANGE);
    322e:	2204      	movs	r2, #4
    3230:	49c8      	ldr	r1, [pc, #800]	; (3554 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a4>)
    3232:	2036      	movs	r0, #54	; 0x36
				interruptArgs[54] = state;
    3234:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
				attachInterrupt(54, isr54, CHANGE);
    3238:	f013 f92c 	bl	16494 <attachInterrupt>
		return 1;
    323c:	2001      	movs	r0, #1
	}
    323e:	bd10      	pop	{r4, pc}
				interruptArgs[53] = state;
    3240:	4cc3      	ldr	r4, [pc, #780]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(53, isr53, CHANGE);
    3242:	2204      	movs	r2, #4
    3244:	49c4      	ldr	r1, [pc, #784]	; (3558 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a8>)
    3246:	2035      	movs	r0, #53	; 0x35
				interruptArgs[53] = state;
    3248:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
				attachInterrupt(53, isr53, CHANGE);
    324c:	f013 f922 	bl	16494 <attachInterrupt>
		return 1;
    3250:	2001      	movs	r0, #1
	}
    3252:	bd10      	pop	{r4, pc}
				interruptArgs[52] = state;
    3254:	4cbe      	ldr	r4, [pc, #760]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(52, isr52, CHANGE);
    3256:	2204      	movs	r2, #4
    3258:	49c0      	ldr	r1, [pc, #768]	; (355c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3ac>)
    325a:	2034      	movs	r0, #52	; 0x34
				interruptArgs[52] = state;
    325c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
				attachInterrupt(52, isr52, CHANGE);
    3260:	f013 f918 	bl	16494 <attachInterrupt>
		return 1;
    3264:	2001      	movs	r0, #1
	}
    3266:	bd10      	pop	{r4, pc}
				interruptArgs[51] = state;
    3268:	4cb9      	ldr	r4, [pc, #740]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(51, isr51, CHANGE);
    326a:	2204      	movs	r2, #4
    326c:	49bc      	ldr	r1, [pc, #752]	; (3560 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b0>)
    326e:	2033      	movs	r0, #51	; 0x33
				interruptArgs[51] = state;
    3270:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
				attachInterrupt(51, isr51, CHANGE);
    3274:	f013 f90e 	bl	16494 <attachInterrupt>
		return 1;
    3278:	2001      	movs	r0, #1
	}
    327a:	bd10      	pop	{r4, pc}
				interruptArgs[50] = state;
    327c:	4cb4      	ldr	r4, [pc, #720]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(50, isr50, CHANGE);
    327e:	2204      	movs	r2, #4
    3280:	49b8      	ldr	r1, [pc, #736]	; (3564 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b4>)
    3282:	2032      	movs	r0, #50	; 0x32
				interruptArgs[50] = state;
    3284:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
				attachInterrupt(50, isr50, CHANGE);
    3288:	f013 f904 	bl	16494 <attachInterrupt>
		return 1;
    328c:	2001      	movs	r0, #1
	}
    328e:	bd10      	pop	{r4, pc}
				interruptArgs[49] = state;
    3290:	4caf      	ldr	r4, [pc, #700]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(49, isr49, CHANGE);
    3292:	2204      	movs	r2, #4
    3294:	49b4      	ldr	r1, [pc, #720]	; (3568 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3b8>)
    3296:	2031      	movs	r0, #49	; 0x31
				interruptArgs[49] = state;
    3298:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
				attachInterrupt(49, isr49, CHANGE);
    329c:	f013 f8fa 	bl	16494 <attachInterrupt>
		return 1;
    32a0:	2001      	movs	r0, #1
	}
    32a2:	bd10      	pop	{r4, pc}
				interruptArgs[48] = state;
    32a4:	4caa      	ldr	r4, [pc, #680]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(48, isr48, CHANGE);
    32a6:	2204      	movs	r2, #4
    32a8:	49b0      	ldr	r1, [pc, #704]	; (356c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3bc>)
    32aa:	2030      	movs	r0, #48	; 0x30
				interruptArgs[48] = state;
    32ac:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
				attachInterrupt(48, isr48, CHANGE);
    32b0:	f013 f8f0 	bl	16494 <attachInterrupt>
		return 1;
    32b4:	2001      	movs	r0, #1
	}
    32b6:	bd10      	pop	{r4, pc}
				interruptArgs[47] = state;
    32b8:	4ca5      	ldr	r4, [pc, #660]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(47, isr47, CHANGE);
    32ba:	2204      	movs	r2, #4
    32bc:	49ac      	ldr	r1, [pc, #688]	; (3570 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c0>)
    32be:	202f      	movs	r0, #47	; 0x2f
				interruptArgs[47] = state;
    32c0:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
				attachInterrupt(47, isr47, CHANGE);
    32c4:	f013 f8e6 	bl	16494 <attachInterrupt>
		return 1;
    32c8:	2001      	movs	r0, #1
	}
    32ca:	bd10      	pop	{r4, pc}
				interruptArgs[46] = state;
    32cc:	4ca0      	ldr	r4, [pc, #640]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(46, isr46, CHANGE);
    32ce:	2204      	movs	r2, #4
    32d0:	49a8      	ldr	r1, [pc, #672]	; (3574 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c4>)
    32d2:	202e      	movs	r0, #46	; 0x2e
				interruptArgs[46] = state;
    32d4:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
				attachInterrupt(46, isr46, CHANGE);
    32d8:	f013 f8dc 	bl	16494 <attachInterrupt>
		return 1;
    32dc:	2001      	movs	r0, #1
	}
    32de:	bd10      	pop	{r4, pc}
				interruptArgs[45] = state;
    32e0:	4c9b      	ldr	r4, [pc, #620]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(45, isr45, CHANGE);
    32e2:	2204      	movs	r2, #4
    32e4:	49a4      	ldr	r1, [pc, #656]	; (3578 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3c8>)
    32e6:	202d      	movs	r0, #45	; 0x2d
				interruptArgs[45] = state;
    32e8:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
				attachInterrupt(45, isr45, CHANGE);
    32ec:	f013 f8d2 	bl	16494 <attachInterrupt>
		return 1;
    32f0:	2001      	movs	r0, #1
	}
    32f2:	bd10      	pop	{r4, pc}
				interruptArgs[44] = state;
    32f4:	4c96      	ldr	r4, [pc, #600]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(44, isr44, CHANGE);
    32f6:	2204      	movs	r2, #4
    32f8:	49a0      	ldr	r1, [pc, #640]	; (357c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3cc>)
    32fa:	202c      	movs	r0, #44	; 0x2c
				interruptArgs[44] = state;
    32fc:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
				attachInterrupt(44, isr44, CHANGE);
    3300:	f013 f8c8 	bl	16494 <attachInterrupt>
		return 1;
    3304:	2001      	movs	r0, #1
	}
    3306:	bd10      	pop	{r4, pc}
				interruptArgs[43] = state;
    3308:	4c91      	ldr	r4, [pc, #580]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(43, isr43, CHANGE);
    330a:	2204      	movs	r2, #4
    330c:	499c      	ldr	r1, [pc, #624]	; (3580 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d0>)
    330e:	202b      	movs	r0, #43	; 0x2b
				interruptArgs[43] = state;
    3310:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
				attachInterrupt(43, isr43, CHANGE);
    3314:	f013 f8be 	bl	16494 <attachInterrupt>
		return 1;
    3318:	2001      	movs	r0, #1
	}
    331a:	bd10      	pop	{r4, pc}
				interruptArgs[42] = state;
    331c:	4c8c      	ldr	r4, [pc, #560]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(42, isr42, CHANGE);
    331e:	2204      	movs	r2, #4
    3320:	4998      	ldr	r1, [pc, #608]	; (3584 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d4>)
    3322:	202a      	movs	r0, #42	; 0x2a
				interruptArgs[42] = state;
    3324:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
				attachInterrupt(42, isr42, CHANGE);
    3328:	f013 f8b4 	bl	16494 <attachInterrupt>
		return 1;
    332c:	2001      	movs	r0, #1
	}
    332e:	bd10      	pop	{r4, pc}
				interruptArgs[41] = state;
    3330:	4c87      	ldr	r4, [pc, #540]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(41, isr41, CHANGE);
    3332:	2204      	movs	r2, #4
    3334:	4994      	ldr	r1, [pc, #592]	; (3588 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3d8>)
    3336:	2029      	movs	r0, #41	; 0x29
				interruptArgs[41] = state;
    3338:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
				attachInterrupt(41, isr41, CHANGE);
    333c:	f013 f8aa 	bl	16494 <attachInterrupt>
		return 1;
    3340:	2001      	movs	r0, #1
	}
    3342:	bd10      	pop	{r4, pc}
				interruptArgs[40] = state;
    3344:	4c82      	ldr	r4, [pc, #520]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(40, isr40, CHANGE);
    3346:	2204      	movs	r2, #4
    3348:	4990      	ldr	r1, [pc, #576]	; (358c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3dc>)
    334a:	2028      	movs	r0, #40	; 0x28
				interruptArgs[40] = state;
    334c:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
				attachInterrupt(40, isr40, CHANGE);
    3350:	f013 f8a0 	bl	16494 <attachInterrupt>
		return 1;
    3354:	2001      	movs	r0, #1
	}
    3356:	bd10      	pop	{r4, pc}
				interruptArgs[39] = state;
    3358:	4c7d      	ldr	r4, [pc, #500]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(39, isr39, CHANGE);
    335a:	2204      	movs	r2, #4
    335c:	498c      	ldr	r1, [pc, #560]	; (3590 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e0>)
    335e:	2027      	movs	r0, #39	; 0x27
				interruptArgs[39] = state;
    3360:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
				attachInterrupt(39, isr39, CHANGE);
    3364:	f013 f896 	bl	16494 <attachInterrupt>
		return 1;
    3368:	2001      	movs	r0, #1
	}
    336a:	bd10      	pop	{r4, pc}
				interruptArgs[38] = state;
    336c:	4c78      	ldr	r4, [pc, #480]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(38, isr38, CHANGE);
    336e:	2204      	movs	r2, #4
    3370:	4988      	ldr	r1, [pc, #544]	; (3594 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e4>)
    3372:	2026      	movs	r0, #38	; 0x26
				interruptArgs[38] = state;
    3374:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
				attachInterrupt(38, isr38, CHANGE);
    3378:	f013 f88c 	bl	16494 <attachInterrupt>
		return 1;
    337c:	2001      	movs	r0, #1
	}
    337e:	bd10      	pop	{r4, pc}
				interruptArgs[37] = state;
    3380:	4c73      	ldr	r4, [pc, #460]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(37, isr37, CHANGE);
    3382:	2204      	movs	r2, #4
    3384:	4984      	ldr	r1, [pc, #528]	; (3598 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3e8>)
    3386:	2025      	movs	r0, #37	; 0x25
				interruptArgs[37] = state;
    3388:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
				attachInterrupt(37, isr37, CHANGE);
    338c:	f013 f882 	bl	16494 <attachInterrupt>
		return 1;
    3390:	2001      	movs	r0, #1
	}
    3392:	bd10      	pop	{r4, pc}
				interruptArgs[36] = state;
    3394:	4c6e      	ldr	r4, [pc, #440]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(36, isr36, CHANGE);
    3396:	2204      	movs	r2, #4
    3398:	4980      	ldr	r1, [pc, #512]	; (359c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3ec>)
    339a:	2024      	movs	r0, #36	; 0x24
				interruptArgs[36] = state;
    339c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
				attachInterrupt(36, isr36, CHANGE);
    33a0:	f013 f878 	bl	16494 <attachInterrupt>
		return 1;
    33a4:	2001      	movs	r0, #1
	}
    33a6:	bd10      	pop	{r4, pc}
				interruptArgs[35] = state;
    33a8:	4c69      	ldr	r4, [pc, #420]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(35, isr35, CHANGE);
    33aa:	2204      	movs	r2, #4
    33ac:	497c      	ldr	r1, [pc, #496]	; (35a0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3f0>)
    33ae:	2023      	movs	r0, #35	; 0x23
				interruptArgs[35] = state;
    33b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
				attachInterrupt(35, isr35, CHANGE);
    33b4:	f013 f86e 	bl	16494 <attachInterrupt>
		return 1;
    33b8:	2001      	movs	r0, #1
	}
    33ba:	bd10      	pop	{r4, pc}
				interruptArgs[34] = state;
    33bc:	4c64      	ldr	r4, [pc, #400]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(34, isr34, CHANGE);
    33be:	2204      	movs	r2, #4
    33c0:	4978      	ldr	r1, [pc, #480]	; (35a4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3f4>)
    33c2:	2022      	movs	r0, #34	; 0x22
				interruptArgs[34] = state;
    33c4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
				attachInterrupt(34, isr34, CHANGE);
    33c8:	f013 f864 	bl	16494 <attachInterrupt>
		return 1;
    33cc:	2001      	movs	r0, #1
	}
    33ce:	bd10      	pop	{r4, pc}
				interruptArgs[33] = state;
    33d0:	4c5f      	ldr	r4, [pc, #380]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(33, isr33, CHANGE);
    33d2:	2204      	movs	r2, #4
    33d4:	4974      	ldr	r1, [pc, #464]	; (35a8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3f8>)
    33d6:	2021      	movs	r0, #33	; 0x21
				interruptArgs[33] = state;
    33d8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
				attachInterrupt(33, isr33, CHANGE);
    33dc:	f013 f85a 	bl	16494 <attachInterrupt>
		return 1;
    33e0:	2001      	movs	r0, #1
	}
    33e2:	bd10      	pop	{r4, pc}
				interruptArgs[32] = state;
    33e4:	4c5a      	ldr	r4, [pc, #360]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(32, isr32, CHANGE);
    33e6:	2204      	movs	r2, #4
    33e8:	4970      	ldr	r1, [pc, #448]	; (35ac <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3fc>)
    33ea:	2020      	movs	r0, #32
				interruptArgs[32] = state;
    33ec:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				attachInterrupt(32, isr32, CHANGE);
    33f0:	f013 f850 	bl	16494 <attachInterrupt>
		return 1;
    33f4:	2001      	movs	r0, #1
	}
    33f6:	bd10      	pop	{r4, pc}
				interruptArgs[31] = state;
    33f8:	4c55      	ldr	r4, [pc, #340]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(31, isr31, CHANGE);
    33fa:	2204      	movs	r2, #4
    33fc:	496c      	ldr	r1, [pc, #432]	; (35b0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x400>)
    33fe:	201f      	movs	r0, #31
				interruptArgs[31] = state;
    3400:	67e3      	str	r3, [r4, #124]	; 0x7c
				attachInterrupt(31, isr31, CHANGE);
    3402:	f013 f847 	bl	16494 <attachInterrupt>
		return 1;
    3406:	2001      	movs	r0, #1
	}
    3408:	bd10      	pop	{r4, pc}
				interruptArgs[30] = state;
    340a:	4c51      	ldr	r4, [pc, #324]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(30, isr30, CHANGE);
    340c:	2204      	movs	r2, #4
    340e:	4969      	ldr	r1, [pc, #420]	; (35b4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x404>)
    3410:	201e      	movs	r0, #30
				interruptArgs[30] = state;
    3412:	67a3      	str	r3, [r4, #120]	; 0x78
				attachInterrupt(30, isr30, CHANGE);
    3414:	f013 f83e 	bl	16494 <attachInterrupt>
		return 1;
    3418:	2001      	movs	r0, #1
	}
    341a:	bd10      	pop	{r4, pc}
				interruptArgs[29] = state;
    341c:	4c4c      	ldr	r4, [pc, #304]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(29, isr29, CHANGE);
    341e:	2204      	movs	r2, #4
    3420:	4965      	ldr	r1, [pc, #404]	; (35b8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x408>)
    3422:	201d      	movs	r0, #29
				interruptArgs[29] = state;
    3424:	6763      	str	r3, [r4, #116]	; 0x74
				attachInterrupt(29, isr29, CHANGE);
    3426:	f013 f835 	bl	16494 <attachInterrupt>
		return 1;
    342a:	2001      	movs	r0, #1
	}
    342c:	bd10      	pop	{r4, pc}
				interruptArgs[28] = state;
    342e:	4c48      	ldr	r4, [pc, #288]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(28, isr28, CHANGE);
    3430:	2204      	movs	r2, #4
    3432:	4962      	ldr	r1, [pc, #392]	; (35bc <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x40c>)
    3434:	201c      	movs	r0, #28
				interruptArgs[28] = state;
    3436:	6723      	str	r3, [r4, #112]	; 0x70
				attachInterrupt(28, isr28, CHANGE);
    3438:	f013 f82c 	bl	16494 <attachInterrupt>
		return 1;
    343c:	2001      	movs	r0, #1
	}
    343e:	bd10      	pop	{r4, pc}
				interruptArgs[27] = state;
    3440:	4c43      	ldr	r4, [pc, #268]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(27, isr27, CHANGE);
    3442:	2204      	movs	r2, #4
    3444:	495e      	ldr	r1, [pc, #376]	; (35c0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x410>)
    3446:	201b      	movs	r0, #27
				interruptArgs[27] = state;
    3448:	66e3      	str	r3, [r4, #108]	; 0x6c
				attachInterrupt(27, isr27, CHANGE);
    344a:	f013 f823 	bl	16494 <attachInterrupt>
		return 1;
    344e:	2001      	movs	r0, #1
	}
    3450:	bd10      	pop	{r4, pc}
				interruptArgs[26] = state;
    3452:	4c3f      	ldr	r4, [pc, #252]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(26, isr26, CHANGE);
    3454:	2204      	movs	r2, #4
    3456:	495b      	ldr	r1, [pc, #364]	; (35c4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x414>)
    3458:	201a      	movs	r0, #26
				interruptArgs[26] = state;
    345a:	66a3      	str	r3, [r4, #104]	; 0x68
				attachInterrupt(26, isr26, CHANGE);
    345c:	f013 f81a 	bl	16494 <attachInterrupt>
		return 1;
    3460:	2001      	movs	r0, #1
	}
    3462:	bd10      	pop	{r4, pc}
				interruptArgs[25] = state;
    3464:	4c3a      	ldr	r4, [pc, #232]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(25, isr25, CHANGE);
    3466:	2204      	movs	r2, #4
    3468:	4957      	ldr	r1, [pc, #348]	; (35c8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x418>)
    346a:	2019      	movs	r0, #25
				interruptArgs[25] = state;
    346c:	6663      	str	r3, [r4, #100]	; 0x64
				attachInterrupt(25, isr25, CHANGE);
    346e:	f013 f811 	bl	16494 <attachInterrupt>
		return 1;
    3472:	2001      	movs	r0, #1
	}
    3474:	bd10      	pop	{r4, pc}
				interruptArgs[24] = state;
    3476:	4c36      	ldr	r4, [pc, #216]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(24, isr24, CHANGE);
    3478:	2204      	movs	r2, #4
    347a:	4954      	ldr	r1, [pc, #336]	; (35cc <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x41c>)
    347c:	2018      	movs	r0, #24
				interruptArgs[24] = state;
    347e:	6623      	str	r3, [r4, #96]	; 0x60
				attachInterrupt(24, isr24, CHANGE);
    3480:	f013 f808 	bl	16494 <attachInterrupt>
		return 1;
    3484:	2001      	movs	r0, #1
	}
    3486:	bd10      	pop	{r4, pc}
				interruptArgs[23] = state;
    3488:	4c31      	ldr	r4, [pc, #196]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(23, isr23, CHANGE);
    348a:	2204      	movs	r2, #4
    348c:	4950      	ldr	r1, [pc, #320]	; (35d0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x420>)
    348e:	2017      	movs	r0, #23
				interruptArgs[23] = state;
    3490:	65e3      	str	r3, [r4, #92]	; 0x5c
				attachInterrupt(23, isr23, CHANGE);
    3492:	f012 ffff 	bl	16494 <attachInterrupt>
		return 1;
    3496:	2001      	movs	r0, #1
	}
    3498:	bd10      	pop	{r4, pc}
				interruptArgs[22] = state;
    349a:	4c2d      	ldr	r4, [pc, #180]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(22, isr22, CHANGE);
    349c:	2204      	movs	r2, #4
    349e:	494d      	ldr	r1, [pc, #308]	; (35d4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x424>)
    34a0:	2016      	movs	r0, #22
				interruptArgs[22] = state;
    34a2:	65a3      	str	r3, [r4, #88]	; 0x58
				attachInterrupt(22, isr22, CHANGE);
    34a4:	f012 fff6 	bl	16494 <attachInterrupt>
		return 1;
    34a8:	2001      	movs	r0, #1
	}
    34aa:	bd10      	pop	{r4, pc}
				interruptArgs[21] = state;
    34ac:	4c28      	ldr	r4, [pc, #160]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(21, isr21, CHANGE);
    34ae:	2204      	movs	r2, #4
    34b0:	4949      	ldr	r1, [pc, #292]	; (35d8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x428>)
    34b2:	2015      	movs	r0, #21
				interruptArgs[21] = state;
    34b4:	6563      	str	r3, [r4, #84]	; 0x54
				attachInterrupt(21, isr21, CHANGE);
    34b6:	f012 ffed 	bl	16494 <attachInterrupt>
		return 1;
    34ba:	2001      	movs	r0, #1
	}
    34bc:	bd10      	pop	{r4, pc}
				interruptArgs[20] = state;
    34be:	4c24      	ldr	r4, [pc, #144]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(20, isr20, CHANGE);
    34c0:	2204      	movs	r2, #4
    34c2:	4946      	ldr	r1, [pc, #280]	; (35dc <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x42c>)
    34c4:	2014      	movs	r0, #20
				interruptArgs[20] = state;
    34c6:	6523      	str	r3, [r4, #80]	; 0x50
				attachInterrupt(20, isr20, CHANGE);
    34c8:	f012 ffe4 	bl	16494 <attachInterrupt>
		return 1;
    34cc:	2001      	movs	r0, #1
	}
    34ce:	bd10      	pop	{r4, pc}
				interruptArgs[19] = state;
    34d0:	4c1f      	ldr	r4, [pc, #124]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(19, isr19, CHANGE);
    34d2:	2204      	movs	r2, #4
    34d4:	4942      	ldr	r1, [pc, #264]	; (35e0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x430>)
    34d6:	2013      	movs	r0, #19
				interruptArgs[19] = state;
    34d8:	64e3      	str	r3, [r4, #76]	; 0x4c
				attachInterrupt(19, isr19, CHANGE);
    34da:	f012 ffdb 	bl	16494 <attachInterrupt>
		return 1;
    34de:	2001      	movs	r0, #1
	}
    34e0:	bd10      	pop	{r4, pc}
				interruptArgs[18] = state;
    34e2:	4c1b      	ldr	r4, [pc, #108]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(18, isr18, CHANGE);
    34e4:	2204      	movs	r2, #4
    34e6:	493f      	ldr	r1, [pc, #252]	; (35e4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x434>)
    34e8:	2012      	movs	r0, #18
				interruptArgs[18] = state;
    34ea:	64a3      	str	r3, [r4, #72]	; 0x48
				attachInterrupt(18, isr18, CHANGE);
    34ec:	f012 ffd2 	bl	16494 <attachInterrupt>
		return 1;
    34f0:	2001      	movs	r0, #1
	}
    34f2:	bd10      	pop	{r4, pc}
				interruptArgs[17] = state;
    34f4:	4c16      	ldr	r4, [pc, #88]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(17, isr17, CHANGE);
    34f6:	2204      	movs	r2, #4
    34f8:	493b      	ldr	r1, [pc, #236]	; (35e8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x438>)
    34fa:	2011      	movs	r0, #17
				interruptArgs[17] = state;
    34fc:	6463      	str	r3, [r4, #68]	; 0x44
				attachInterrupt(17, isr17, CHANGE);
    34fe:	f012 ffc9 	bl	16494 <attachInterrupt>
		return 1;
    3502:	2001      	movs	r0, #1
	}
    3504:	bd10      	pop	{r4, pc}
				interruptArgs[16] = state;
    3506:	4c12      	ldr	r4, [pc, #72]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(16, isr16, CHANGE);
    3508:	2204      	movs	r2, #4
    350a:	4938      	ldr	r1, [pc, #224]	; (35ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x43c>)
    350c:	2010      	movs	r0, #16
				interruptArgs[16] = state;
    350e:	6423      	str	r3, [r4, #64]	; 0x40
				attachInterrupt(16, isr16, CHANGE);
    3510:	f012 ffc0 	bl	16494 <attachInterrupt>
		return 1;
    3514:	2001      	movs	r0, #1
	}
    3516:	bd10      	pop	{r4, pc}
				interruptArgs[15] = state;
    3518:	4c0d      	ldr	r4, [pc, #52]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(15, isr15, CHANGE);
    351a:	2204      	movs	r2, #4
    351c:	4934      	ldr	r1, [pc, #208]	; (35f0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x440>)
    351e:	200f      	movs	r0, #15
				interruptArgs[15] = state;
    3520:	63e3      	str	r3, [r4, #60]	; 0x3c
				attachInterrupt(15, isr15, CHANGE);
    3522:	f012 ffb7 	bl	16494 <attachInterrupt>
		return 1;
    3526:	2001      	movs	r0, #1
	}
    3528:	bd10      	pop	{r4, pc}
				interruptArgs[14] = state;
    352a:	4c09      	ldr	r4, [pc, #36]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(14, isr14, CHANGE);
    352c:	2204      	movs	r2, #4
    352e:	4931      	ldr	r1, [pc, #196]	; (35f4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x444>)
    3530:	200e      	movs	r0, #14
				interruptArgs[14] = state;
    3532:	63a3      	str	r3, [r4, #56]	; 0x38
				attachInterrupt(14, isr14, CHANGE);
    3534:	f012 ffae 	bl	16494 <attachInterrupt>
		return 1;
    3538:	2001      	movs	r0, #1
	}
    353a:	bd10      	pop	{r4, pc}
				interruptArgs[13] = state;
    353c:	4c04      	ldr	r4, [pc, #16]	; (3550 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x3a0>)
				attachInterrupt(13, isr13, CHANGE);
    353e:	2204      	movs	r2, #4
    3540:	492d      	ldr	r1, [pc, #180]	; (35f8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x448>)
    3542:	200d      	movs	r0, #13
				interruptArgs[13] = state;
    3544:	6363      	str	r3, [r4, #52]	; 0x34
				attachInterrupt(13, isr13, CHANGE);
    3546:	f012 ffa5 	bl	16494 <attachInterrupt>
		return 1;
    354a:	2001      	movs	r0, #1
	}
    354c:	bd10      	pop	{r4, pc}
    354e:	bf00      	nop
    3550:	200051ec 	.word	0x200051ec
    3554:	00002039 	.word	0x00002039
    3558:	00001fa9 	.word	0x00001fa9
    355c:	000030b1 	.word	0x000030b1
    3560:	000030c5 	.word	0x000030c5
    3564:	000030d9 	.word	0x000030d9
    3568:	000030ed 	.word	0x000030ed
    356c:	00003101 	.word	0x00003101
    3570:	00003115 	.word	0x00003115
    3574:	00003129 	.word	0x00003129
    3578:	0000313d 	.word	0x0000313d
    357c:	00003151 	.word	0x00003151
    3580:	00003165 	.word	0x00003165
    3584:	00003179 	.word	0x00003179
    3588:	0000318d 	.word	0x0000318d
    358c:	00002d7d 	.word	0x00002d7d
    3590:	00002ced 	.word	0x00002ced
    3594:	00002c5d 	.word	0x00002c5d
    3598:	00002bcd 	.word	0x00002bcd
    359c:	00002b3d 	.word	0x00002b3d
    35a0:	00002aad 	.word	0x00002aad
    35a4:	00002a1d 	.word	0x00002a1d
    35a8:	0000298d 	.word	0x0000298d
    35ac:	000028fd 	.word	0x000028fd
    35b0:	00002871 	.word	0x00002871
    35b4:	000027e5 	.word	0x000027e5
    35b8:	00002759 	.word	0x00002759
    35bc:	000026cd 	.word	0x000026cd
    35c0:	00002641 	.word	0x00002641
    35c4:	000025b5 	.word	0x000025b5
    35c8:	00002529 	.word	0x00002529
    35cc:	0000249d 	.word	0x0000249d
    35d0:	00002411 	.word	0x00002411
    35d4:	00002385 	.word	0x00002385
    35d8:	000022f9 	.word	0x000022f9
    35dc:	0000226d 	.word	0x0000226d
    35e0:	000021e1 	.word	0x000021e1
    35e4:	00002155 	.word	0x00002155
    35e8:	000020c9 	.word	0x000020c9
    35ec:	00001f1d 	.word	0x00001f1d
    35f0:	00001e91 	.word	0x00001e91
    35f4:	00001e05 	.word	0x00001e05
    35f8:	00001d79 	.word	0x00001d79
				interruptArgs[12] = state;
    35fc:	4c3b      	ldr	r4, [pc, #236]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(12, isr12, CHANGE);
    35fe:	2204      	movs	r2, #4
    3600:	493b      	ldr	r1, [pc, #236]	; (36f0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x540>)
    3602:	200c      	movs	r0, #12
				interruptArgs[12] = state;
    3604:	6323      	str	r3, [r4, #48]	; 0x30
				attachInterrupt(12, isr12, CHANGE);
    3606:	f012 ff45 	bl	16494 <attachInterrupt>
		return 1;
    360a:	2001      	movs	r0, #1
	}
    360c:	bd10      	pop	{r4, pc}
				interruptArgs[11] = state;
    360e:	4c37      	ldr	r4, [pc, #220]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(11, isr11, CHANGE);
    3610:	2204      	movs	r2, #4
    3612:	4938      	ldr	r1, [pc, #224]	; (36f4 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x544>)
    3614:	200b      	movs	r0, #11
				interruptArgs[11] = state;
    3616:	62e3      	str	r3, [r4, #44]	; 0x2c
				attachInterrupt(11, isr11, CHANGE);
    3618:	f012 ff3c 	bl	16494 <attachInterrupt>
		return 1;
    361c:	2001      	movs	r0, #1
	}
    361e:	bd10      	pop	{r4, pc}
				interruptArgs[10] = state;
    3620:	4c32      	ldr	r4, [pc, #200]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(10, isr10, CHANGE);
    3622:	2204      	movs	r2, #4
    3624:	4934      	ldr	r1, [pc, #208]	; (36f8 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x548>)
    3626:	200a      	movs	r0, #10
				interruptArgs[10] = state;
    3628:	62a3      	str	r3, [r4, #40]	; 0x28
				attachInterrupt(10, isr10, CHANGE);
    362a:	f012 ff33 	bl	16494 <attachInterrupt>
		return 1;
    362e:	2001      	movs	r0, #1
	}
    3630:	bd10      	pop	{r4, pc}
				interruptArgs[9] = state;
    3632:	4c2e      	ldr	r4, [pc, #184]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(9, isr9, CHANGE);
    3634:	2204      	movs	r2, #4
    3636:	4931      	ldr	r1, [pc, #196]	; (36fc <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x54c>)
    3638:	2009      	movs	r0, #9
				interruptArgs[9] = state;
    363a:	6263      	str	r3, [r4, #36]	; 0x24
				attachInterrupt(9, isr9, CHANGE);
    363c:	f012 ff2a 	bl	16494 <attachInterrupt>
		return 1;
    3640:	2001      	movs	r0, #1
	}
    3642:	bd10      	pop	{r4, pc}
				interruptArgs[8] = state;
    3644:	4c29      	ldr	r4, [pc, #164]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(8, isr8, CHANGE);
    3646:	2204      	movs	r2, #4
    3648:	492d      	ldr	r1, [pc, #180]	; (3700 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x550>)
    364a:	2008      	movs	r0, #8
				interruptArgs[8] = state;
    364c:	6223      	str	r3, [r4, #32]
				attachInterrupt(8, isr8, CHANGE);
    364e:	f012 ff21 	bl	16494 <attachInterrupt>
		return 1;
    3652:	2001      	movs	r0, #1
	}
    3654:	bd10      	pop	{r4, pc}
				interruptArgs[7] = state;
    3656:	4c25      	ldr	r4, [pc, #148]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(7, isr7, CHANGE);
    3658:	2204      	movs	r2, #4
    365a:	492a      	ldr	r1, [pc, #168]	; (3704 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x554>)
    365c:	2007      	movs	r0, #7
				interruptArgs[7] = state;
    365e:	61e3      	str	r3, [r4, #28]
				attachInterrupt(7, isr7, CHANGE);
    3660:	f012 ff18 	bl	16494 <attachInterrupt>
		return 1;
    3664:	2001      	movs	r0, #1
	}
    3666:	bd10      	pop	{r4, pc}
				interruptArgs[6] = state;
    3668:	4c20      	ldr	r4, [pc, #128]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(6, isr6, CHANGE);
    366a:	2204      	movs	r2, #4
    366c:	4926      	ldr	r1, [pc, #152]	; (3708 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x558>)
    366e:	2006      	movs	r0, #6
				interruptArgs[6] = state;
    3670:	61a3      	str	r3, [r4, #24]
				attachInterrupt(6, isr6, CHANGE);
    3672:	f012 ff0f 	bl	16494 <attachInterrupt>
		return 1;
    3676:	2001      	movs	r0, #1
	}
    3678:	bd10      	pop	{r4, pc}
				interruptArgs[5] = state;
    367a:	4c1c      	ldr	r4, [pc, #112]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(5, isr5, CHANGE);
    367c:	2204      	movs	r2, #4
    367e:	4923      	ldr	r1, [pc, #140]	; (370c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x55c>)
    3680:	2005      	movs	r0, #5
				interruptArgs[5] = state;
    3682:	6163      	str	r3, [r4, #20]
				attachInterrupt(5, isr5, CHANGE);
    3684:	f012 ff06 	bl	16494 <attachInterrupt>
		return 1;
    3688:	2001      	movs	r0, #1
	}
    368a:	bd10      	pop	{r4, pc}
				attachInterrupt(4, isr4, CHANGE);
    368c:	2204      	movs	r2, #4
				interruptArgs[4] = state;
    368e:	4c17      	ldr	r4, [pc, #92]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(4, isr4, CHANGE);
    3690:	491f      	ldr	r1, [pc, #124]	; (3710 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x560>)
    3692:	4610      	mov	r0, r2
				interruptArgs[4] = state;
    3694:	6123      	str	r3, [r4, #16]
				attachInterrupt(4, isr4, CHANGE);
    3696:	f012 fefd 	bl	16494 <attachInterrupt>
		return 1;
    369a:	2001      	movs	r0, #1
	}
    369c:	bd10      	pop	{r4, pc}
				interruptArgs[3] = state;
    369e:	4c13      	ldr	r4, [pc, #76]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(3, isr3, CHANGE);
    36a0:	2204      	movs	r2, #4
    36a2:	491c      	ldr	r1, [pc, #112]	; (3714 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x564>)
    36a4:	2003      	movs	r0, #3
				interruptArgs[3] = state;
    36a6:	60e3      	str	r3, [r4, #12]
				attachInterrupt(3, isr3, CHANGE);
    36a8:	f012 fef4 	bl	16494 <attachInterrupt>
		return 1;
    36ac:	2001      	movs	r0, #1
	}
    36ae:	bd10      	pop	{r4, pc}
				interruptArgs[2] = state;
    36b0:	4c0e      	ldr	r4, [pc, #56]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(2, isr2, CHANGE);
    36b2:	2204      	movs	r2, #4
    36b4:	4918      	ldr	r1, [pc, #96]	; (3718 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x568>)
    36b6:	2002      	movs	r0, #2
				interruptArgs[2] = state;
    36b8:	60a3      	str	r3, [r4, #8]
				attachInterrupt(2, isr2, CHANGE);
    36ba:	f012 feeb 	bl	16494 <attachInterrupt>
		return 1;
    36be:	2001      	movs	r0, #1
	}
    36c0:	bd10      	pop	{r4, pc}
    36c2:	4604      	mov	r4, r0
				interruptArgs[1] = state;
    36c4:	4809      	ldr	r0, [pc, #36]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(1, isr1, CHANGE);
    36c6:	2204      	movs	r2, #4
    36c8:	4914      	ldr	r1, [pc, #80]	; (371c <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x56c>)
				interruptArgs[1] = state;
    36ca:	6043      	str	r3, [r0, #4]
				attachInterrupt(1, isr1, CHANGE);
    36cc:	2001      	movs	r0, #1
    36ce:	f012 fee1 	bl	16494 <attachInterrupt>
		return 1;
    36d2:	4620      	mov	r0, r4
	}
    36d4:	bd10      	pop	{r4, pc}
				interruptArgs[0] = state;
    36d6:	4c05      	ldr	r4, [pc, #20]	; (36ec <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x53c>)
				attachInterrupt(0, isr0, CHANGE);
    36d8:	2204      	movs	r2, #4
    36da:	4911      	ldr	r1, [pc, #68]	; (3720 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)+0x570>)
    36dc:	2000      	movs	r0, #0
				interruptArgs[0] = state;
    36de:	6023      	str	r3, [r4, #0]
				attachInterrupt(0, isr0, CHANGE);
    36e0:	f012 fed8 	bl	16494 <attachInterrupt>
		return 1;
    36e4:	2001      	movs	r0, #1
	}
    36e6:	bd10      	pop	{r4, pc}
		switch (pin) {
    36e8:	2000      	movs	r0, #0
	}
    36ea:	bd10      	pop	{r4, pc}
    36ec:	200051ec 	.word	0x200051ec
    36f0:	00001ced 	.word	0x00001ced
    36f4:	00001c61 	.word	0x00001c61
    36f8:	00001bd5 	.word	0x00001bd5
    36fc:	00001b49 	.word	0x00001b49
    3700:	00001abd 	.word	0x00001abd
    3704:	00001a31 	.word	0x00001a31
    3708:	000019a5 	.word	0x000019a5
    370c:	00001919 	.word	0x00001919
    3710:	0000188d 	.word	0x0000188d
    3714:	00001801 	.word	0x00001801
    3718:	00001775 	.word	0x00001775
    371c:	000016e9 	.word	0x000016e9
    3720:	000031a1 	.word	0x000031a1

00003724 <Encoder::Encoder(unsigned char, unsigned char)>:
	Encoder(uint8_t pin1, uint8_t pin2) {
    3724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3728:	460f      	mov	r7, r1
    372a:	4616      	mov	r6, r2
    372c:	4604      	mov	r4, r0
		pinMode(pin1, INPUT_PULLUP);
    372e:	2102      	movs	r1, #2
    3730:	4638      	mov	r0, r7
    3732:	f012 fc69 	bl	16008 <pinMode>
		pinMode(pin2, INPUT_PULLUP);
    3736:	2102      	movs	r1, #2
    3738:	4630      	mov	r0, r6
    373a:	f012 fc65 	bl	16008 <pinMode>
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    373e:	4b22      	ldr	r3, [pc, #136]	; (37c8 <Encoder::Encoder(unsigned char, unsigned char)+0xa4>)
    3740:	013a      	lsls	r2, r7, #4
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    3742:	4822      	ldr	r0, [pc, #136]	; (37cc <Encoder::Encoder(unsigned char, unsigned char)+0xa8>)
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    3744:	0131      	lsls	r1, r6, #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3746:	f8df c08c 	ldr.w	ip, [pc, #140]	; 37d4 <Encoder::Encoder(unsigned char, unsigned char)+0xb0>
		encoder.pin1_register = PIN_TO_BASEREG(pin1);
    374a:	f853 8002 	ldr.w	r8, [r3, r2]
    374e:	eb03 1207 	add.w	r2, r3, r7, lsl #4
    3752:	f8c4 8000 	str.w	r8, [r4]
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
    3756:	f8d2 e00c 	ldr.w	lr, [r2, #12]
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    375a:	eb03 1206 	add.w	r2, r3, r6, lsl #4
    375e:	5859      	ldr	r1, [r3, r1]
		encoder.position = 0;
    3760:	2300      	movs	r3, #0
		encoder.pin1_bitmask = PIN_TO_BITMASK(pin1);
    3762:	f8c4 e008 	str.w	lr, [r4, #8]
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
    3766:	68d2      	ldr	r2, [r2, #12]
		encoder.position = 0;
    3768:	6163      	str	r3, [r4, #20]
    376a:	4b19      	ldr	r3, [pc, #100]	; (37d0 <Encoder::Encoder(unsigned char, unsigned char)+0xac>)
		encoder.pin2_bitmask = PIN_TO_BITMASK(pin2);
    376c:	60e2      	str	r2, [r4, #12]
	uint32_t begin = ARM_DWT_CYCCNT;
    376e:	6845      	ldr	r5, [r0, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3770:	681b      	ldr	r3, [r3, #0]
		encoder.pin2_register = PIN_TO_BASEREG(pin2);
    3772:	6061      	str	r1, [r4, #4]
    3774:	fbac 3c03 	umull	r3, ip, ip, r3
    3778:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
    377c:	ea4f 4c9c 	mov.w	ip, ip, lsr #18
    3780:	fb03 fc0c 	mul.w	ip, r3, ip
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    3784:	6843      	ldr	r3, [r0, #4]
    3786:	1b5b      	subs	r3, r3, r5
    3788:	459c      	cmp	ip, r3
    378a:	d8fb      	bhi.n	3784 <Encoder::Encoder(unsigned char, unsigned char)+0x60>
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
    378c:	f8d8 3000 	ldr.w	r3, [r8]
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    3790:	4638      	mov	r0, r7
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    3792:	6809      	ldr	r1, [r1, #0]
		if (DIRECT_PIN_READ(encoder.pin1_register, encoder.pin1_bitmask)) s |= 1;
    3794:	ea1e 0f03 	tst.w	lr, r3
		uint8_t s = 0;
    3798:	bf14      	ite	ne
    379a:	2301      	movne	r3, #1
    379c:	2300      	moveq	r3, #0
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    379e:	420a      	tst	r2, r1
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    37a0:	4621      	mov	r1, r4
		if (DIRECT_PIN_READ(encoder.pin2_register, encoder.pin2_bitmask)) s |= 2;
    37a2:	bf18      	it	ne
    37a4:	f043 0302 	orrne.w	r3, r3, #2
		encoder.state = s;
    37a8:	7423      	strb	r3, [r4, #16]
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    37aa:	f7ff fd01 	bl	31b0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    37ae:	4603      	mov	r3, r0
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    37b0:	4621      	mov	r1, r4
    37b2:	4630      	mov	r0, r6
		interrupts_in_use = attach_interrupt(pin1, &encoder);
    37b4:	7623      	strb	r3, [r4, #24]
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    37b6:	f7ff fcfb 	bl	31b0 <Encoder::attach_interrupt(unsigned char, Encoder_internal_state_t*)>
    37ba:	7e22      	ldrb	r2, [r4, #24]
    37bc:	4603      	mov	r3, r0
	}
    37be:	4620      	mov	r0, r4
		interrupts_in_use += attach_interrupt(pin2, &encoder);
    37c0:	4413      	add	r3, r2
    37c2:	7623      	strb	r3, [r4, #24]
	}
    37c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    37c8:	200024c4 	.word	0x200024c4
    37cc:	e0001000 	.word	0xe0001000
    37d0:	2000328c 	.word	0x2000328c
    37d4:	431bde83 	.word	0x431bde83

000037d8 <polyphonicsampler::noteOn(unsigned char, unsigned char)>:
    void noteOn(uint8_t noteNumber, uint8_t velocity) {
    37d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        if (activeNotes[noteNumber] == 255) {
    37dc:	eb00 0801 	add.w	r8, r0, r1
    void noteOn(uint8_t noteNumber, uint8_t velocity) {
    37e0:	b084      	sub	sp, #16
    37e2:	4604      	mov	r4, r0
    37e4:	460e      	mov	r6, r1
        if (activeNotes[noteNumber] == 255) {
    37e6:	f898 5010 	ldrb.w	r5, [r8, #16]
    void noteOn(uint8_t noteNumber, uint8_t velocity) {
    37ea:	4692      	mov	sl, r2
        if (activeNotes[noteNumber] == 255) {
    37ec:	2dff      	cmp	r5, #255	; 0xff
    37ee:	d030      	beq.n	3852 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x7a>
            isretrigger = true;
    37f0:	f04f 0801 	mov.w	r8, #1
            _noteEventFunction(indexOfVoice, noteNumber, velocity, true, isretrigger);
    37f4:	2301      	movs	r3, #1
    37f6:	f88d 500b 	strb.w	r5, [sp, #11]
    37fa:	f88d 600c 	strb.w	r6, [sp, #12]
    37fe:	f88d 300e 	strb.w	r3, [sp, #14]
	if (_M_empty())
    3802:	68a3      	ldr	r3, [r4, #8]
    3804:	f88d a00d 	strb.w	sl, [sp, #13]
    bool _M_empty() const { return !_M_manager; }
    3808:	f88d 800f 	strb.w	r8, [sp, #15]
	if (_M_empty())
    380c:	2b00      	cmp	r3, #0
    380e:	d066      	beq.n	38de <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x106>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    3810:	f10d 030f 	add.w	r3, sp, #15
    3814:	4620      	mov	r0, r4
    3816:	aa03      	add	r2, sp, #12
    3818:	f10d 010b 	add.w	r1, sp, #11
    381c:	9301      	str	r3, [sp, #4]
    381e:	f10d 030e 	add.w	r3, sp, #14
    3822:	9300      	str	r3, [sp, #0]
    3824:	f10d 030d 	add.w	r3, sp, #13
    3828:	68e7      	ldr	r7, [r4, #12]
            voice_noteOn[indexOfVoice] = millis();
    382a:	eb04 0485 	add.w	r4, r4, r5, lsl #2
    382e:	47b8      	blx	r7
	return systick_millis_count;
    3830:	482c      	ldr	r0, [pc, #176]	; (38e4 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x10c>)
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    3832:	f8cd 8004 	str.w	r8, [sp, #4]
    3836:	4633      	mov	r3, r6
    3838:	f8cd a000 	str.w	sl, [sp]
    383c:	462a      	mov	r2, r5
    383e:	6800      	ldr	r0, [r0, #0]
    3840:	4929      	ldr	r1, [pc, #164]	; (38e8 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x110>)
            voice_noteOn[indexOfVoice] = millis();
    3842:	f8c4 00e4 	str.w	r0, [r4, #228]	; 0xe4
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    3846:	4829      	ldr	r0, [pc, #164]	; (38ec <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x114>)
    3848:	f011 ff30 	bl	156ac <Print::printf(char const*, ...)>
    }
    384c:	b004      	add	sp, #16
    384e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for (int i=0; i < _numVoices; i++) {
    3852:	f890 10a0 	ldrb.w	r1, [r0, #160]	; 0xa0
    3856:	b351      	cbz	r1, 38ae <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xd6>
    3858:	f100 038f 	add.w	r3, r0, #143	; 0x8f
        unsigned long leastRecentNoteOffEvent = UINT32_MAX;
    385c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
        for (int i=0; i < _numVoices; i++) {
    3860:	f04f 0c00 	mov.w	ip, #0
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    3864:	f100 09a4 	add.w	r9, r0, #164	; 0xa4
    3868:	e004      	b.n	3874 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x9c>
        for (int i=0; i < _numVoices; i++) {
    386a:	f10c 0001 	add.w	r0, ip, #1
    386e:	4281      	cmp	r1, r0
    3870:	d00f      	beq.n	3892 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xba>
    3872:	4684      	mov	ip, r0
            if (activeVoices[i] == 255) {
    3874:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3878:	2aff      	cmp	r2, #255	; 0xff
    387a:	d1f6      	bne.n	386a <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x92>
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    387c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
    3880:	4596      	cmp	lr, r2
    3882:	d9f2      	bls.n	386a <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x92>
        for (int i=0; i < _numVoices; i++) {
    3884:	f10c 0001 	add.w	r0, ip, #1
    3888:	4696      	mov	lr, r2
    388a:	fa5f f58c 	uxtb.w	r5, ip
    388e:	4281      	cmp	r1, r0
    3890:	d1ef      	bne.n	3872 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x9a>
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    3892:	2dff      	cmp	r5, #255	; 0xff
    3894:	d013      	beq.n	38be <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xe6>
            if (indexOfVoice < _numVoices) {
    3896:	428d      	cmp	r5, r1
    3898:	d209      	bcs.n	38ae <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xd6>
                activeVoices[indexOfVoice] = noteNumber;
    389a:	1963      	adds	r3, r4, r5
        if (indexOfVoice != 255) {            
    389c:	2dff      	cmp	r5, #255	; 0xff
                activeVoices[indexOfVoice] = noteNumber;
    389e:	f883 6090 	strb.w	r6, [r3, #144]	; 0x90
                activeNotes[noteNumber] = indexOfVoice;                
    38a2:	f888 5010 	strb.w	r5, [r8, #16]
        if (indexOfVoice != 255) {            
    38a6:	d0d1      	beq.n	384c <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x74>
        bool isretrigger = false;
    38a8:	f04f 0800 	mov.w	r8, #0
    38ac:	e7a2      	b.n	37f4 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x1c>
                Serial.printf("Note dropped: %i \n", noteNumber);
    38ae:	4632      	mov	r2, r6
    38b0:	490f      	ldr	r1, [pc, #60]	; (38f0 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x118>)
    38b2:	480e      	ldr	r0, [pc, #56]	; (38ec <polyphonicsampler::noteOn(unsigned char, unsigned char)+0x114>)
    }
    38b4:	b004      	add	sp, #16
    38b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                Serial.printf("Note dropped: %i \n", noteNumber);
    38ba:	f011 bef7 	b.w	156ac <Print::printf(char const*, ...)>
    38be:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    38c2:	2300      	movs	r3, #0
    38c4:	e000      	b.n	38c8 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xf0>
    38c6:	4613      	mov	r3, r2
                if (voice_noteOn[i] < leastRecentNoteOffEvent) {
    38c8:	f850 2f04 	ldr.w	r2, [r0, #4]!
    38cc:	4572      	cmp	r2, lr
    38ce:	d201      	bcs.n	38d4 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xfc>
                    indexOfVoiceWithLeastRecentNoteOff = i;
    38d0:	4696      	mov	lr, r2
    38d2:	b2dd      	uxtb	r5, r3
            for (int i=0; i < _numVoices; i++) {
    38d4:	459c      	cmp	ip, r3
    38d6:	f103 0201 	add.w	r2, r3, #1
    38da:	d1f4      	bne.n	38c6 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xee>
    38dc:	e7db      	b.n	3896 <polyphonicsampler::noteOn(unsigned char, unsigned char)+0xbe>
	  __throw_bad_function_call();
    38de:	f015 f99d 	bl	18c1c <std::__throw_bad_function_call()>
    38e2:	bf00      	nop
    38e4:	2000bc24 	.word	0x2000bc24
    38e8:	20000b0c 	.word	0x20000b0c
    38ec:	20003314 	.word	0x20003314
    38f0:	20000af8 	.word	0x20000af8

000038f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>:
			if (first_update == NULL) {
    38f4:	4922      	ldr	r1, [pc, #136]	; (3980 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x8c>)
		num_inputs(ninput), inputQueue(iqueue) {
    38f6:	2200      	movs	r2, #0
    AudioPlayArrayResmp(void) :
    38f8:	b538      	push	{r3, r4, r5, lr}
    38fa:	4c22      	ldr	r4, [pc, #136]	; (3984 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x90>)
    38fc:	4605      	mov	r5, r0
			if (first_update == NULL) {
    38fe:	680b      	ldr	r3, [r1, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    3900:	6004      	str	r4, [r0, #0]
    3902:	6102      	str	r2, [r0, #16]
			active = false;
    3904:	8102      	strh	r2, [r0, #8]
			destination_list = NULL;
    3906:	60c2      	str	r2, [r0, #12]
			if (first_update == NULL) {
    3908:	2b00      	cmp	r3, #0
    390a:	d037      	beq.n	397c <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x88>
				for (p=first_update; p->next_update; p = p->next_update) ;
    390c:	461a      	mov	r2, r3
    390e:	695b      	ldr	r3, [r3, #20]
    3910:	2b00      	cmp	r3, #0
    3912:	d1fb      	bne.n	390c <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x18>
				p->next_update = this;
    3914:	6155      	str	r5, [r2, #20]
			next_update = NULL;
    3916:	2400      	movs	r4, #0
            AudioPlayResmp<newdigate::ResamplingArrayReader>()
    3918:	4b1b      	ldr	r3, [pc, #108]	; (3988 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x94>)
        reader = new newdigate::ResamplingArrayReader();
    391a:	2068      	movs	r0, #104	; 0x68
    391c:	616c      	str	r4, [r5, #20]
			cpu_cycles = 0;
    391e:	606c      	str	r4, [r5, #4]
			numConnections = 0;
    3920:	72ac      	strb	r4, [r5, #10]

template <class TResamplingReader>
class AudioPlayResmp : public AudioStream
{
    public:
        AudioPlayResmp(): AudioStream(0, NULL), reader(nullptr)
    3922:	61ac      	str	r4, [r5, #24]
            AudioPlayResmp<newdigate::ResamplingArrayReader>()
    3924:	602b      	str	r3, [r5, #0]
        reader = new newdigate::ResamplingArrayReader();
    3926:	f012 fed3 	bl	166d0 <operator new(unsigned int)>
    ResamplingReader() {
    392a:	f44f 7280 	mov.w	r2, #256	; 0x100
    392e:	4603      	mov	r3, r0
    3930:	7104      	strb	r4, [r0, #4]
    3932:	60c4      	str	r4, [r0, #12]
    3934:	2101      	movs	r1, #1
    3936:	8404      	strh	r4, [r0, #32]
    3938:	f880 4038 	strb.w	r4, [r0, #56]	; 0x38
    393c:	6484      	str	r4, [r0, #72]	; 0x48
        _playing = false;
    393e:	7104      	strb	r4, [r0, #4]
        _file_size = 0;
    3940:	6084      	str	r4, [r0, #8]
    3942:	61a8      	str	r0, [r5, #24]
    ResamplingReader() {
    3944:	e9c0 4409 	strd	r4, r4, [r0, #36]	; 0x24
    3948:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
    394c:	e9c0 4414 	strd	r4, r4, [r0, #80]	; 0x50
    3950:	e9c0 4417 	strd	r4, r4, [r0, #92]	; 0x5c
    }
    3954:	4628      	mov	r0, r5
    3956:	2400      	movs	r4, #0
    3958:	4d0c      	ldr	r5, [pc, #48]	; (398c <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x98>)
    395a:	63da      	str	r2, [r3, #60]	; 0x3c
    395c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3960:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
    3964:	64da      	str	r2, [r3, #76]	; 0x4c
        ResamplingReader() {
    3966:	4a0a      	ldr	r2, [pc, #40]	; (3990 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x9c>)
    3968:	e9c3 4504 	strd	r4, r5, [r3, #16]
    396c:	2400      	movs	r4, #0
    396e:	2500      	movs	r5, #0
    3970:	601a      	str	r2, [r3, #0]
    3972:	e9c3 4506 	strd	r4, r5, [r3, #24]
    3976:	e9c3 450c 	strd	r4, r5, [r3, #48]	; 0x30
    397a:	bd38      	pop	{r3, r4, r5, pc}
				first_update = this;
    397c:	6008      	str	r0, [r1, #0]
    397e:	e7ca      	b.n	3916 <AudioPlayArrayResmp::AudioPlayArrayResmp()+0x22>
    3980:	20005038 	.word	0x20005038
    3984:	200013a8 	.word	0x200013a8
    3988:	2000147c 	.word	0x2000147c
    398c:	3ff00000 	.word	0x3ff00000
    3990:	200016c0 	.word	0x200016c0

00003994 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)>:
    }
};

class PitchedArraySamplePlay {
public:
    static void play(uint8_t noteNumber, audiovoice<AudioPlayArrayResmp> *voice, audiosample *sample) {
    3994:	b570      	push	{r4, r5, r6, lr}
        float result = powf(2.0, (note-rootNoteNumber) / 12.0);
    3996:	7813      	ldrb	r3, [r2, #0]
    3998:	eeb2 5b08 	vmov.f64	d5, #40	; 0x41400000  12.0
    static void play(uint8_t noteNumber, audiovoice<AudioPlayArrayResmp> *voice, audiosample *sample) {
    399c:	460c      	mov	r4, r1
        float result = powf(2.0, (note-rootNoteNumber) / 12.0);
    399e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    39a2:	1ac0      	subs	r0, r0, r3
    static void play(uint8_t noteNumber, audiovoice<AudioPlayArrayResmp> *voice, audiosample *sample) {
    39a4:	4615      	mov	r5, r2
        float result = powf(2.0, (note-rootNoteNumber) / 12.0);
    39a6:	ee07 0a90 	vmov	s15, r0
    39aa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    39ae:	ee87 6b05 	vdiv.f64	d6, d7, d5
    39b2:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    39b6:	f014 feef 	bl	18798 <powf>
        bool playWav(const unsigned int *data, uint32_t fileSize) {
            return playWav((int16_t *) data, fileSize);
        }

        void setPlaybackRate(float f) {
            reader->setPlaybackRate(f);
    39ba:	6823      	ldr	r3, [r4, #0]
    39bc:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
    39c0:	699c      	ldr	r4, [r3, #24]
        if (!_useDualPlaybackHead) {
    39c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
        _playbackRate = f;
    39c6:	ed84 7b04 	vstr	d7, [r4, #16]
        if (!_useDualPlaybackHead) {
    39ca:	2b00      	cmp	r3, #0
    39cc:	f040 8086 	bne.w	3adc <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x148>
                if (f >= 0.0 && _bufferPosition1 < _header_offset) {
    39d0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    39d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    39d8:	db09      	blt.n	39ee <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
    39da:	68e3      	ldr	r3, [r4, #12]
    39dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
    39de:	429a      	cmp	r2, r3
    39e0:	da05      	bge.n	39ee <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
                    if (_play_start == play_start::play_start_sample) 
    39e2:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    39e6:	2a00      	cmp	r2, #0
    39e8:	f040 80e5 	bne.w	3bb6 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x222>
                        _bufferPosition1 = _header_offset;
    39ec:	6263      	str	r3, [r4, #36]	; 0x24
        if (_playing) {   
    39ee:	7921      	ldrb	r1, [r4, #4]
        float factor = relativepitchcalculator::calcPitchFactor(noteNumber, sample->_noteNumber);
        voice->_audioplayarray->setPlaybackRate(factor);
        voice->_audioplayarray->playRaw(sample->_data, sample->_sampleLength, sample->_numChannels);
    39f0:	89aa      	ldrh	r2, [r5, #12]
    39f2:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
    39f6:	b109      	cbz	r1, 39fc <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x68>
            _playing = false;
    39f8:	2100      	movs	r1, #0
    39fa:	7121      	strb	r1, [r4, #4]
        if (_playing) {   
    39fc:	7921      	ldrb	r1, [r4, #4]
        _sourceBuffer = array;
    39fe:	6560      	str	r0, [r4, #84]	; 0x54
        if (_playing) {   
    3a00:	b109      	cbz	r1, 3a06 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x72>
            _playing = false;
    3a02:	2100      	movs	r1, #0
    3a04:	7121      	strb	r1, [r4, #4]
        _file_size = length * 2;
    3a06:	0059      	lsls	r1, r3, #1
        _loop_finish = length;
    3a08:	64a3      	str	r3, [r4, #72]	; 0x48
        if (numChannels != _numChannels) {
    3a0a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
        _header_offset = 0;
    3a0e:	2500      	movs	r5, #0
        if (numChannels != _numChannels) {
    3a10:	429a      	cmp	r2, r3
        _loop_start = 0;
    3a12:	6465      	str	r5, [r4, #68]	; 0x44
        _file_size = length * 2;
    3a14:	e9c4 1502 	strd	r1, r5, [r4, #8]
        if (numChannels != _numChannels) {
    3a18:	d173      	bne.n	3b02 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x16e>
        if (_interpolationType != ResampleInterpolationType::resampleinterpolation_none) {
    3a1a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
    3a1e:	2a01      	cmp	r2, #1
    3a20:	d116      	bne.n	3a50 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xbc>
        if (_playbackRate > 0.0) {
    3a22:	ed94 7b04 	vldr	d7, [r4, #16]
    3a26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
        _numInterpolationPoints = 0;
    3a2a:	2300      	movs	r3, #0
    3a2c:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (_playbackRate > 0.0) {
    3a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            if (_play_start == play_start::play_start_sample)
    3a32:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
        if (_playbackRate > 0.0) {
    3a36:	f340 80a3 	ble.w	3b80 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x1ec>
            if (_play_start == play_start::play_start_sample)
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d04c      	beq.n	3ad8 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x144>
                _bufferPosition1 = _loop_start;
    3a3e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        _crossfade = 0.0;
    3a40:	2000      	movs	r0, #0
    3a42:	2100      	movs	r1, #0
        _playing = true;
    3a44:	2201      	movs	r2, #1
                _bufferPosition1 = _header_offset;
    3a46:	6263      	str	r3, [r4, #36]	; 0x24
        _playing = true;
    3a48:	7122      	strb	r2, [r4, #4]
        _crossfade = 0.0;
    3a4a:	e9c4 010c 	strd	r0, r1, [r4, #48]	; 0x30
    }
    3a4e:	bd70      	pop	{r4, r5, r6, pc}
        if (_numChannels < 0)
    3a50:	2b00      	cmp	r3, #0
    3a52:	dbe6      	blt.n	3a22 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x8e>
        if (!_interpolationPoints) return;
    3a54:	6e22      	ldr	r2, [r4, #96]	; 0x60
    3a56:	2a00      	cmp	r2, #0
    3a58:	f000 80a9 	beq.w	3bae <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x21a>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    3a5c:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    3a60:	2b00      	cmp	r3, #0
    3a62:	f000 80a0 	beq.w	3ba6 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x212>
    3a66:	2500      	movs	r5, #0
            delete [] _interpolationPoints[i];
    3a68:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    3a6c:	3501      	adds	r5, #1
            delete [] _interpolationPoints[i];
    3a6e:	b120      	cbz	r0, 3a7a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xe6>
    3a70:	f012 fe34 	bl	166dc <operator delete[](void*)>
    3a74:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        delete [] _interpolationPoints;
    3a78:	6e22      	ldr	r2, [r4, #96]	; 0x60
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    3a7a:	429d      	cmp	r5, r3
    3a7c:	dbf4      	blt.n	3a68 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xd4>
        delete [] _interpolationPoints;
    3a7e:	2a00      	cmp	r2, #0
    3a80:	f040 8091 	bne.w	3ba6 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x212>
        _interpolationPoints = new InterpolationData*[_numChannels];
    3a84:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    3a88:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
        _interpolationPoints = nullptr;
    3a8c:	2200      	movs	r2, #0
        _interpolationPoints = new InterpolationData*[_numChannels];
    3a8e:	428b      	cmp	r3, r1
        _interpolationPoints = nullptr;
    3a90:	6622      	str	r2, [r4, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
    3a92:	f8a4 204e 	strh.w	r2, [r4, #78]	; 0x4e
        _interpolationPoints = new InterpolationData*[_numChannels];
    3a96:	f0c0 808a 	bcc.w	3bae <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x21a>
    3a9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3a9e:	f012 fe19 	bl	166d4 <operator new[](unsigned int)>
        for (int channel=0; channel < _numChannels; channel++) {        
    3aa2:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
        _interpolationPoints = new InterpolationData*[_numChannels];
    3aa6:	6620      	str	r0, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {        
    3aa8:	2b00      	cmp	r3, #0
    3aaa:	dd10      	ble.n	3ace <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x13a>
    3aac:	2500      	movs	r5, #0
            interpolation[0].y = 0.0;
    3aae:	462e      	mov	r6, r5
            InterpolationData *interpolation = new InterpolationData[4];
    3ab0:	2010      	movs	r0, #16
    3ab2:	f012 fe0f 	bl	166d4 <operator new[](unsigned int)>
            _interpolationPoints[channel] = interpolation ;
    3ab6:	6e22      	ldr	r2, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {        
    3ab8:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
            interpolation[0].y = 0.0;
    3abc:	8046      	strh	r6, [r0, #2]
            interpolation[1].y = 0.0;    
    3abe:	80c6      	strh	r6, [r0, #6]
            interpolation[2].y = 0.0;    
    3ac0:	8146      	strh	r6, [r0, #10]
            interpolation[3].y = 0.0;
    3ac2:	81c6      	strh	r6, [r0, #14]
            _interpolationPoints[channel] = interpolation ;
    3ac4:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        for (int channel=0; channel < _numChannels; channel++) {        
    3ac8:	3501      	adds	r5, #1
    3aca:	429d      	cmp	r5, r3
    3acc:	dbf0      	blt.n	3ab0 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x11c>
        _numInterpolationPointsChannels = _numChannels;
    3ace:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        if (_playbackRate > 0.0) {
    3ad2:	ed94 7b04 	vldr	d7, [r4, #16]
    3ad6:	e7a6      	b.n	3a26 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x92>
                _bufferPosition1 = _header_offset;
    3ad8:	68e3      	ldr	r3, [r4, #12]
    3ada:	e7b1      	b.n	3a40 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xac>
            if (_crossfade == 0.0) {
    3adc:	ed94 6b0c 	vldr	d6, [r4, #48]	; 0x30
    3ae0:	eeb5 6b40 	vcmp.f64	d6, #0.0
    3ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ae8:	d181      	bne.n	39ee <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
                    if (f >= 0.0 && _bufferPosition1 < _header_offset) {
    3aea:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    3aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3af2:	f6ff af7c 	blt.w	39ee <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
    3af6:	68e3      	ldr	r3, [r4, #12]
    3af8:	6a62      	ldr	r2, [r4, #36]	; 0x24
    3afa:	429a      	cmp	r2, r3
    3afc:	f6bf af77 	bge.w	39ee <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
    3b00:	e774      	b.n	39ec <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x58>
            _numChannels = numChannels;
    3b02:	b212      	sxth	r2, r2
        if (_numChannels < 0)
    3b04:	42aa      	cmp	r2, r5
            _numChannels = numChannels;
    3b06:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
        if (_numChannels < 0)
    3b0a:	db8c      	blt.n	3a26 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x92>
        if (!_interpolationPoints) return;
    3b0c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    3b0e:	2900      	cmp	r1, #0
    3b10:	d04f      	beq.n	3bb2 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x21e>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    3b12:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
    3b16:	2b00      	cmp	r3, #0
    3b18:	d041      	beq.n	3b9e <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x20a>
            delete [] _interpolationPoints[i];
    3b1a:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    3b1e:	3501      	adds	r5, #1
            delete [] _interpolationPoints[i];
    3b20:	b120      	cbz	r0, 3b2c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x198>
    3b22:	f012 fddb 	bl	166dc <operator delete[](void*)>
    3b26:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
        delete [] _interpolationPoints;
    3b2a:	6e21      	ldr	r1, [r4, #96]	; 0x60
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    3b2c:	429d      	cmp	r5, r3
    3b2e:	dbf4      	blt.n	3b1a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x186>
        delete [] _interpolationPoints;
    3b30:	bba9      	cbnz	r1, 3b9e <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x20a>
        _interpolationPoints = new InterpolationData*[_numChannels];
    3b32:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    3b36:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
        _interpolationPoints = nullptr;
    3b3a:	2300      	movs	r3, #0
        _interpolationPoints = new InterpolationData*[_numChannels];
    3b3c:	428a      	cmp	r2, r1
        _interpolationPoints = nullptr;
    3b3e:	6623      	str	r3, [r4, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
    3b40:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
        _interpolationPoints = new InterpolationData*[_numChannels];
    3b44:	d335      	bcc.n	3bb2 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x21e>
    3b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    3b4a:	f012 fdc3 	bl	166d4 <operator new[](unsigned int)>
        for (int channel=0; channel < _numChannels; channel++) {        
    3b4e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
        _interpolationPoints = new InterpolationData*[_numChannels];
    3b52:	6620      	str	r0, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {        
    3b54:	2b00      	cmp	r3, #0
    3b56:	dd10      	ble.n	3b7a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x1e6>
    3b58:	2500      	movs	r5, #0
            interpolation[0].y = 0.0;
    3b5a:	462e      	mov	r6, r5
            InterpolationData *interpolation = new InterpolationData[4];
    3b5c:	2010      	movs	r0, #16
    3b5e:	f012 fdb9 	bl	166d4 <operator new[](unsigned int)>
            _interpolationPoints[channel] = interpolation ;
    3b62:	6e22      	ldr	r2, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {        
    3b64:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
            interpolation[0].y = 0.0;
    3b68:	8046      	strh	r6, [r0, #2]
            interpolation[1].y = 0.0;    
    3b6a:	80c6      	strh	r6, [r0, #6]
            interpolation[2].y = 0.0;    
    3b6c:	8146      	strh	r6, [r0, #10]
            interpolation[3].y = 0.0;
    3b6e:	81c6      	strh	r6, [r0, #14]
            _interpolationPoints[channel] = interpolation ;
    3b70:	f842 0025 	str.w	r0, [r2, r5, lsl #2]
        for (int channel=0; channel < _numChannels; channel++) {        
    3b74:	3501      	adds	r5, #1
    3b76:	429d      	cmp	r5, r3
    3b78:	dbf0      	blt.n	3b5c <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x1c8>
        _numInterpolationPointsChannels = _numChannels;
    3b7a:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
    3b7e:	e74c      	b.n	3a1a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x86>
            if (_play_start == play_start::play_start_sample)
    3b80:	b943      	cbnz	r3, 3b94 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x200>
                _bufferPosition1 = _file_size/2 - _numChannels;
    3b82:	68a2      	ldr	r2, [r4, #8]
    3b84:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    3b88:	2a00      	cmp	r2, #0
    3b8a:	bfb8      	it	lt
    3b8c:	3201      	addlt	r2, #1
    3b8e:	ebc3 0362 	rsb	r3, r3, r2, asr #1
    3b92:	e755      	b.n	3a40 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xac>
                _bufferPosition1 = _loop_finish - _numChannels;
    3b94:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    3b98:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3b9a:	1a9b      	subs	r3, r3, r2
    3b9c:	e750      	b.n	3a40 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xac>
        delete [] _interpolationPoints;
    3b9e:	4608      	mov	r0, r1
    3ba0:	f012 fd9c 	bl	166dc <operator delete[](void*)>
    3ba4:	e7c5      	b.n	3b32 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x19e>
    3ba6:	4610      	mov	r0, r2
    3ba8:	f012 fd98 	bl	166dc <operator delete[](void*)>
    3bac:	e76a      	b.n	3a84 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0xf0>
        _interpolationPoints = new InterpolationData*[_numChannels];
    3bae:	0098      	lsls	r0, r3, #2
    3bb0:	e775      	b.n	3a9e <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x10a>
    3bb2:	0090      	lsls	r0, r2, #2
    3bb4:	e7c9      	b.n	3b4a <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x1b6>
                        _bufferPosition1 = _loop_start;
    3bb6:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3bb8:	6263      	str	r3, [r4, #36]	; 0x24
    3bba:	e718      	b.n	39ee <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)+0x5a>
    3bbc:	0000      	movs	r0, r0
	...

00003bc0 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
    3bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
class audiosampler : public basesampler<TAudioPlay, audiosample> {
public:
    using __base = basesampler<TAudioPlay, audiosample>;

    audiosampler() : __base() {
        __base::_polysampler.setNoteEventCallback( [&] (uint8_t voice, uint8_t noteNumber, uint8_t velocity, bool isNoteOn, bool retrigger) {
    3bc2:	6804      	ldr	r4, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
    3bc4:	7809      	ldrb	r1, [r1, #0]
    3bc6:	7815      	ldrb	r5, [r2, #0]
    3bc8:	781a      	ldrb	r2, [r3, #0]

 protected:
    void noteEventCallback(uint8_t voice, uint8_t noteNumber, uint8_t velocity, bool isNoteOn, bool retrigger)    
    {
        uint8_t numVoices = __base::_numVoices;
        if (voice < numVoices) {
    3bca:	7823      	ldrb	r3, [r4, #0]
    3bcc:	9806      	ldr	r0, [sp, #24]
    3bce:	428b      	cmp	r3, r1
    3bd0:	7800      	ldrb	r0, [r0, #0]
    3bd2:	d967      	bls.n	3ca4 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xe4>
            audiovoice<TAudioPlay> *audio_voice = __base::_voices[voice];
    3bd4:	6863      	ldr	r3, [r4, #4]
    3bd6:	f853 6021 	ldr.w	r6, [r3, r1, lsl #2]
            if (isNoteOn) {
    3bda:	2800      	cmp	r0, #0
    3bdc:	d063      	beq.n	3ca6 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xe6>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
    3bde:	e9d4 014d 	ldrd	r0, r1, [r4, #308]	; 0x134
    }

    audiosample* findNearestSampleForKey(uint8_t noteNumber) {
        uint8_t smallestDiff = 255;
        audiosample *candidate = nullptr;
        for (auto &&x : __base::_audiosamples) {
    3be2:	4288      	cmp	r0, r1
    3be4:	d05e      	beq.n	3ca4 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xe4>
        audiosample *candidate = nullptr;
    3be6:	2700      	movs	r7, #0
        uint8_t smallestDiff = 255;
    3be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
            uint8_t diff = abs(x->_noteNumber - noteNumber);
    3bec:	f850 4b04 	ldr.w	r4, [r0], #4
    3bf0:	7823      	ldrb	r3, [r4, #0]
    3bf2:	1b5b      	subs	r3, r3, r5
    3bf4:	2b00      	cmp	r3, #0
    3bf6:	bfb8      	it	lt
    3bf8:	425b      	neglt	r3, r3
    3bfa:	b2db      	uxtb	r3, r3
            if (diff < smallestDiff) {
    3bfc:	4563      	cmp	r3, ip
    3bfe:	d201      	bcs.n	3c04 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x44>
    3c00:	4627      	mov	r7, r4
    3c02:	469c      	mov	ip, r3
        for (auto &&x : __base::_audiosamples) {
    3c04:	4288      	cmp	r0, r1
    3c06:	d1f1      	bne.n	3bec <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x2c>
                if (nearestSample != nullptr) {
    3c08:	2f00      	cmp	r7, #0
    3c0a:	d04b      	beq.n	3ca4 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xe4>
                    if (audio_voice->_audiomixer != nullptr) {                        
    3c0c:	68f1      	ldr	r1, [r6, #12]
    3c0e:	2900      	cmp	r1, #0
    3c10:	d054      	beq.n	3cbc <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xfc>
                        audio_voice->_audiomixer->gain( audio_voice->_mixerChannel, velocity / 255.0);
    3c12:	7d33      	ldrb	r3, [r6, #20]
	virtual void update(void);
	void gain(unsigned int channel, float gain) {
		if (channel >= 4) return;
    3c14:	2b03      	cmp	r3, #3
    3c16:	d838      	bhi.n	3c8a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xca>
    3c18:	ee07 2a90 	vmov	s15, r2
		if (gain > 32767.0f) gain = 32767.0f;
    3c1c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 3d08 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x148>
    3c20:	eeb8 4be7 	vcvt.f64.s32	d4, s15
    3c24:	ed9f 5b36 	vldr	d5, [pc, #216]	; 3d00 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x140>
    3c28:	ee84 7b05 	vdiv.f64	d7, d4, d5
    3c2c:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
    3c30:	eeb4 7ae6 	vcmpe.f32	s14, s13
    3c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c38:	dc52      	bgt.n	3ce0 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x120>
		else if (gain < -32767.0f) gain = -32767.0f;
    3c3a:	eddf 7a34 	vldr	s15, [pc, #208]	; 3d0c <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x14c>
    3c3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c46:	d455      	bmi.n	3cf4 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x134>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3c48:	eef0 7a47 	vmov.f32	s15, s14
    3c4c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    3c50:	ee17 0a90 	vmov	r0, s15
    3c54:	1d9a      	adds	r2, r3, #6
    3c56:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
                    if (audio_voice->_audiomixer2 != nullptr) {                        
    3c5a:	6931      	ldr	r1, [r6, #16]
    3c5c:	b1a9      	cbz	r1, 3c8a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xca>
		if (gain > 32767.0f) gain = 32767.0f;
    3c5e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 3d08 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x148>
    3c62:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c6a:	dc45      	bgt.n	3cf8 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x138>
		else if (gain < -32767.0f) gain = -32767.0f;
    3c6c:	eddf 7a27 	vldr	s15, [pc, #156]	; 3d0c <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x14c>
    3c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3c78:	d43a      	bmi.n	3cf0 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x130>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3c7a:	eef0 7a47 	vmov.f32	s15, s14
    3c7e:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
    3c82:	ee17 3a90 	vmov	r3, s15
    3c86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                    if (audio_voice->_audioenvelop != nullptr) {
    3c8a:	6870      	ldr	r0, [r6, #4]
    3c8c:	b108      	cbz	r0, 3c92 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xd2>
                       audio_voice->_audioenvelop->noteOn();
    3c8e:	f007 ffff 	bl	bc90 <AudioEffectEnvelope::noteOn()>
                    if (audio_voice->_audioenvelop2 != nullptr) {
    3c92:	68b0      	ldr	r0, [r6, #8]
    3c94:	b108      	cbz	r0, 3c9a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xda>
                        audio_voice->_audioenvelop2->noteOn();
    3c96:	f007 fffb 	bl	bc90 <AudioEffectEnvelope::noteOn()>
                    TSamplePlay::play(noteNumber, audio_voice, nearestSample);
    3c9a:	463a      	mov	r2, r7
    3c9c:	4631      	mov	r1, r6
    3c9e:	4628      	mov	r0, r5
    3ca0:	f7ff fe78 	bl	3994 <PitchedArraySamplePlay::play(unsigned char, audiovoice<AudioPlayArrayResmp>*, audiosample*)>
      }
    3ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                if (audio_voice->_audioenvelop != nullptr) {
    3ca6:	6870      	ldr	r0, [r6, #4]
    3ca8:	b108      	cbz	r0, 3cae <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xee>
                    audio_voice->_audioenvelop->noteOff();
    3caa:	f008 f819 	bl	bce0 <AudioEffectEnvelope::noteOff()>
                if (audio_voice->_audioenvelop2 != nullptr) {
    3cae:	68b0      	ldr	r0, [r6, #8]
    3cb0:	2800      	cmp	r0, #0
    3cb2:	d0f7      	beq.n	3ca4 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xe4>
    3cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    audio_voice->_audioenvelop2->noteOff();
    3cb8:	f008 b812 	b.w	bce0 <AudioEffectEnvelope::noteOff()>
                    if (audio_voice->_audiomixer2 != nullptr) {                        
    3cbc:	6931      	ldr	r1, [r6, #16]
    3cbe:	2900      	cmp	r1, #0
    3cc0:	d0e3      	beq.n	3c8a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xca>
                        audio_voice->_audiomixer2->gain(audio_voice->_mixerChannel, velocity / 255.0);
    3cc2:	7d33      	ldrb	r3, [r6, #20]
		if (channel >= 4) return;
    3cc4:	2b03      	cmp	r3, #3
    3cc6:	d8e0      	bhi.n	3c8a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xca>
    3cc8:	ee07 2a90 	vmov	s15, r2
    3ccc:	1d9a      	adds	r2, r3, #6
    3cce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    3cd2:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 3d00 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x140>
    3cd6:	ee87 6b05 	vdiv.f64	d6, d7, d5
    3cda:	eeb7 7bc6 	vcvt.f32.f64	s14, d6
    3cde:	e7be      	b.n	3c5e <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x9e>
		multiplier[channel] = gain * 65536.0f; // TODO: proper roundoff?
    3ce0:	1d9a      	adds	r2, r3, #6
    3ce2:	4b0b      	ldr	r3, [pc, #44]	; (3d10 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x150>)
    3ce4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
                    if (audio_voice->_audiomixer2 != nullptr) {                        
    3ce8:	6931      	ldr	r1, [r6, #16]
    3cea:	2900      	cmp	r1, #0
    3cec:	d1cb      	bne.n	3c86 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xc6>
    3cee:	e7cc      	b.n	3c8a <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xca>
    3cf0:	4b08      	ldr	r3, [pc, #32]	; (3d14 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x154>)
    3cf2:	e7c8      	b.n	3c86 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xc6>
    3cf4:	4807      	ldr	r0, [pc, #28]	; (3d14 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x154>)
    3cf6:	e7ad      	b.n	3c54 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x94>
    3cf8:	4b05      	ldr	r3, [pc, #20]	; (3d10 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0x150>)
    3cfa:	e7c4      	b.n	3c86 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_invoke(std::_Any_data const&, unsigned char&&, unsigned char&&, unsigned char&&, bool&&, bool&&)+0xc6>
    3cfc:	f3af 8000 	nop.w
    3d00:	00000000 	.word	0x00000000
    3d04:	406fe000 	.word	0x406fe000
    3d08:	46fffe00 	.word	0x46fffe00
    3d0c:	c6fffe00 	.word	0xc6fffe00
    3d10:	7fff0000 	.word	0x7fff0000
    3d14:	80010000 	.word	0x80010000

00003d18 <allOff()>:

int PrevSampleRate = 1;
int SampleRate[16] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };


void allOff() {
    3d18:	b508      	push	{r3, lr}
  envelope0.noteOff();
    3d1a:	4817      	ldr	r0, [pc, #92]	; (3d78 <allOff()+0x60>)
    3d1c:	f007 ffe0 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope1.noteOff();
    3d20:	4816      	ldr	r0, [pc, #88]	; (3d7c <allOff()+0x64>)
    3d22:	f007 ffdd 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope2.noteOff();
    3d26:	4816      	ldr	r0, [pc, #88]	; (3d80 <allOff()+0x68>)
    3d28:	f007 ffda 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope3.noteOff();
    3d2c:	4815      	ldr	r0, [pc, #84]	; (3d84 <allOff()+0x6c>)
    3d2e:	f007 ffd7 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope4.noteOff();
    3d32:	4815      	ldr	r0, [pc, #84]	; (3d88 <allOff()+0x70>)
    3d34:	f007 ffd4 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope5.noteOff();
    3d38:	4814      	ldr	r0, [pc, #80]	; (3d8c <allOff()+0x74>)
    3d3a:	f007 ffd1 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope6.noteOff();
    3d3e:	4814      	ldr	r0, [pc, #80]	; (3d90 <allOff()+0x78>)
    3d40:	f007 ffce 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope7.noteOff();
    3d44:	4813      	ldr	r0, [pc, #76]	; (3d94 <allOff()+0x7c>)
    3d46:	f007 ffcb 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope8.noteOff();
    3d4a:	4813      	ldr	r0, [pc, #76]	; (3d98 <allOff()+0x80>)
    3d4c:	f007 ffc8 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope9.noteOff();
    3d50:	4812      	ldr	r0, [pc, #72]	; (3d9c <allOff()+0x84>)
    3d52:	f007 ffc5 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope10.noteOff();
    3d56:	4812      	ldr	r0, [pc, #72]	; (3da0 <allOff()+0x88>)
    3d58:	f007 ffc2 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope11.noteOff();
    3d5c:	4811      	ldr	r0, [pc, #68]	; (3da4 <allOff()+0x8c>)
    3d5e:	f007 ffbf 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope12.noteOff();
    3d62:	4811      	ldr	r0, [pc, #68]	; (3da8 <allOff()+0x90>)
    3d64:	f007 ffbc 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope13.noteOff();
    3d68:	4810      	ldr	r0, [pc, #64]	; (3dac <allOff()+0x94>)
    3d6a:	f007 ffb9 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  envelope14.noteOff();
    3d6e:	4810      	ldr	r0, [pc, #64]	; (3db0 <allOff()+0x98>)
}
    3d70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  envelope14.noteOff();
    3d74:	f007 bfb4 	b.w	bce0 <AudioEffectEnvelope::noteOff()>
    3d78:	2000686c 	.word	0x2000686c
    3d7c:	200068a4 	.word	0x200068a4
    3d80:	200069f4 	.word	0x200069f4
    3d84:	20006a2c 	.word	0x20006a2c
    3d88:	20006a64 	.word	0x20006a64
    3d8c:	20006a9c 	.word	0x20006a9c
    3d90:	20006ad4 	.word	0x20006ad4
    3d94:	20006b0c 	.word	0x20006b0c
    3d98:	20006b44 	.word	0x20006b44
    3d9c:	20006b7c 	.word	0x20006b7c
    3da0:	200068dc 	.word	0x200068dc
    3da4:	20006914 	.word	0x20006914
    3da8:	2000694c 	.word	0x2000694c
    3dac:	20006984 	.word	0x20006984
    3db0:	200069bc 	.word	0x200069bc

00003db4 <drawNoSD()>:
void drawNoSD() {
    3db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  while (!SD.begin(10)) {
    3db8:	4d27      	ldr	r5, [pc, #156]	; (3e58 <drawNoSD()+0xa4>)
    3dba:	210a      	movs	r1, #10
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3dbc:	4e27      	ldr	r6, [pc, #156]	; (3e5c <drawNoSD()+0xa8>)
  while (!SD.begin(10)) {
    3dbe:	4628      	mov	r0, r5
    3dc0:	f009 f9fc 	bl	d1bc <SDClass::begin(unsigned char)>
    3dc4:	4607      	mov	r7, r0
    3dc6:	2800      	cmp	r0, #0
    3dc8:	d144      	bne.n	3e54 <drawNoSD()+0xa0>
  FastLED.clear();
    3dca:	4639      	mov	r1, r7
    3dcc:	4824      	ldr	r0, [pc, #144]	; (3e60 <drawNoSD()+0xac>)
    3dce:	f007 f8dd 	bl	af8c <CFastLED::clear(bool)>
    for (int gx = 0; gx < 48; gx++) {
    3dd2:	4b24      	ldr	r3, [pc, #144]	; (3e64 <drawNoSD()+0xb0>)
  FastLED.clear();
    3dd4:	2404      	movs	r4, #4
    3dd6:	2202      	movs	r2, #2
    3dd8:	f503 71c0 	add.w	r1, r3, #384	; 0x180
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3ddc:	2032      	movs	r0, #50	; 0x32
    3dde:	e00d      	b.n	3dfc <drawNoSD()+0x48>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    3de0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3de4:	eb06 0c02 	add.w	ip, r6, r2
    3de8:	54b0      	strb	r0, [r6, r2]
    3dea:	f88c 4001 	strb.w	r4, [ip, #1]
    3dee:	f88c 4002 	strb.w	r4, [ip, #2]
    for (int gx = 0; gx < 48; gx++) {
    3df2:	3308      	adds	r3, #8
    3df4:	428b      	cmp	r3, r1
    3df6:	d01e      	beq.n	3e36 <drawNoSD()+0x82>
      light(noSD[gx][0], maxY - noSD[gx][1], CRGB(50, 0, 0));
    3df8:	e953 2402 	ldrd	r2, r4, [r3, #-8]
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    3dfc:	2c0f      	cmp	r4, #15
    3dfe:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
    3e02:	d8f6      	bhi.n	3df2 <drawNoSD()+0x3e>
    3e04:	f1bc 0f0f 	cmp.w	ip, #15
    3e08:	d8f3      	bhi.n	3df2 <drawNoSD()+0x3e>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    3e0a:	f1c4 080f 	rsb	r8, r4, #15
    3e0e:	f1c2 0210 	rsb	r2, r2, #16
    if (y % 2 == 0) {
    3e12:	f014 0401 	ands.w	r4, r4, #1
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    3e16:	eb02 1208 	add.w	r2, r2, r8, lsl #4
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3e1a:	eb0c 1c08 	add.w	ip, ip, r8, lsl #4
    if (y % 2 == 0) {
    3e1e:	d0df      	beq.n	3de0 <drawNoSD()+0x2c>
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3e20:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    for (int gx = 0; gx < 48; gx++) {
    3e24:	3308      	adds	r3, #8
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3e26:	eb06 020c 	add.w	r2, r6, ip
    for (int gx = 0; gx < 48; gx++) {
    3e2a:	428b      	cmp	r3, r1
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3e2c:	f806 000c 	strb.w	r0, [r6, ip]
    3e30:	7057      	strb	r7, [r2, #1]
    3e32:	7097      	strb	r7, [r2, #2]
    for (int gx = 0; gx < 48; gx++) {
    3e34:	d1e0      	bne.n	3df8 <drawNoSD()+0x44>
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale the brightness value to use in place of the stored value
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    3e36:	480a      	ldr	r0, [pc, #40]	; (3e60 <drawNoSD()+0xac>)
    3e38:	7801      	ldrb	r1, [r0, #0]
    3e3a:	f006 ff7d 	bl	ad38 <CFastLED::show(unsigned char)>
    delay(1000);
    3e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3e42:	f012 f827 	bl	15e94 <delay>
  while (!SD.begin(10)) {
    3e46:	210a      	movs	r1, #10
    3e48:	4628      	mov	r0, r5
    3e4a:	f009 f9b7 	bl	d1bc <SDClass::begin(unsigned char)>
    3e4e:	4607      	mov	r7, r0
    3e50:	2800      	cmp	r0, #0
    3e52:	d0ba      	beq.n	3dca <drawNoSD()+0x16>
}
    3e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e58:	200045f8 	.word	0x200045f8
    3e5c:	20006bf0 	.word	0x20006bf0
    3e60:	200045e8 	.word	0x200045e8
    3e64:	6000217c 	.word	0x6000217c

00003e68 <toggleMute()>:
  if (mute[SMP.y - 1]) {
    3e68:	4b0f      	ldr	r3, [pc, #60]	; (3ea8 <toggleMute()+0x40>)
    3e6a:	4a10      	ldr	r2, [pc, #64]	; (3eac <toggleMute()+0x44>)
    3e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3e6e:	3b01      	subs	r3, #1
    3e70:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
void toggleMute() {
    3e74:	b410      	push	{r4}
  if (mute[SMP.y - 1]) {
    3e76:	b159      	cbz	r1, 3e90 <toggleMute()+0x28>
    envelopes[SMP.y - 1]->release(11880 / 2);
    3e78:	490d      	ldr	r1, [pc, #52]	; (3eb0 <toggleMute()+0x48>)
    mute[SMP.y - 1] = false;
    3e7a:	2400      	movs	r4, #0
		release_count = milliseconds2count(milliseconds);
    3e7c:	f647 70e9 	movw	r0, #32745	; 0x7fe9
    3e80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    3e84:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
}
    3e88:	f85d 4b04 	ldr.w	r4, [sp], #4
    3e8c:	8688      	strh	r0, [r1, #52]	; 0x34
    3e8e:	4770      	bx	lr
    envelopes[SMP.y - 1]->release(120);
    3e90:	4907      	ldr	r1, [pc, #28]	; (3eb0 <toggleMute()+0x48>)
    mute[SMP.y - 1] = true;
    3e92:	2401      	movs	r4, #1
    3e94:	f240 2096 	movw	r0, #662	; 0x296
    3e98:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    3e9c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
}
    3ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
    3ea4:	8688      	strh	r0, [r1, #52]	; 0x34
    3ea6:	4770      	bx	lr
    3ea8:	20003294 	.word	0x20003294
    3eac:	20007178 	.word	0x20007178
    3eb0:	20000e64 	.word	0x20000e64

00003eb4 <unpaint()>:
void unpaint() {
    3eb4:	b570      	push	{r4, r5, r6, lr}
    3eb6:	2107      	movs	r1, #7
    3eb8:	b088      	sub	sp, #32
    3eba:	4820      	ldr	r0, [pc, #128]	; (3f3c <unpaint()+0x88>)
    3ebc:	f014 fb0a 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3ec0:	481f      	ldr	r0, [pc, #124]	; (3f40 <unpaint()+0x8c>)
    3ec2:	f011 fbd7 	bl	15674 <Print::println()>
  int y = SMP.y;
    3ec6:	4b1f      	ldr	r3, [pc, #124]	; (3f44 <unpaint()+0x90>)
  paintMode = false;
    3ec8:	481f      	ldr	r0, [pc, #124]	; (3f48 <unpaint()+0x94>)
    3eca:	2100      	movs	r1, #0
  int x = (SMP.edit - 1) * maxX + SMP.x;
    3ecc:	699a      	ldr	r2, [r3, #24]
  if (!SMP.singleMode) {
    3ece:	681d      	ldr	r5, [r3, #0]
  int x = (SMP.edit - 1) * maxX + SMP.x;
    3ed0:	3a01      	subs	r2, #1
  paintMode = false;
    3ed2:	6001      	str	r1, [r0, #0]
  int y = SMP.y;
    3ed4:	e9d3 460c 	ldrd	r4, r6, [r3, #48]	; 0x30
  int x = (SMP.edit - 1) * maxX + SMP.x;
    3ed8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
  if (!SMP.singleMode) {
    3edc:	b165      	cbz	r5, 3ef8 <unpaint()+0x44>
    if (note[x][y][0] == SMP.currentChannel) note[x][y][0] = 0;
    3ede:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    3ee2:	4a1a      	ldr	r2, [pc, #104]	; (3f4c <unpaint()+0x98>)
    3ee4:	685b      	ldr	r3, [r3, #4]
    3ee6:	4434      	add	r4, r6
    3ee8:	f852 0034 	ldr.w	r0, [r2, r4, lsl #3]
    3eec:	4298      	cmp	r0, r3
    3eee:	bf08      	it	eq
    3ef0:	f842 1034 	streq.w	r1, [r2, r4, lsl #3]
}
    3ef4:	b008      	add	sp, #32
    3ef6:	bd70      	pop	{r4, r5, r6, pc}
	StringSumHelper(const char *p) : String(p) {}
    3ef8:	4915      	ldr	r1, [pc, #84]	; (3f50 <unpaint()+0x9c>)
    3efa:	a804      	add	r0, sp, #16
    3efc:	f011 fd34 	bl	15968 <String::String(char const*)>
    Serial.println("deleting" + String(x));
    3f00:	220a      	movs	r2, #10
    3f02:	4621      	mov	r1, r4
    3f04:	4668      	mov	r0, sp
    3f06:	f011 fd43 	bl	15990 <String::String(int, unsigned char)>
    3f0a:	4669      	mov	r1, sp
    3f0c:	a804      	add	r0, sp, #16
    note[x][y][0] = 0;
    3f0e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
    Serial.println("deleting" + String(x));
    3f12:	f011 fde3 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    3f16:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    3f18:	4809      	ldr	r0, [pc, #36]	; (3f40 <unpaint()+0x8c>)
    note[x][y][0] = 0;
    3f1a:	4434      	add	r4, r6
    3f1c:	f011 fb78 	bl	15610 <Print::print(String const&)>
    3f20:	4807      	ldr	r0, [pc, #28]	; (3f40 <unpaint()+0x8c>)
    3f22:	f011 fba7 	bl	15674 <Print::println()>
    Serial.println("deleting" + String(x));
    3f26:	4668      	mov	r0, sp
    3f28:	f011 fce2 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    3f2c:	a804      	add	r0, sp, #16
    3f2e:	f011 fcdf 	bl	158f0 <String::~String()>
    note[x][y][0] = 0;
    3f32:	4b06      	ldr	r3, [pc, #24]	; (3f4c <unpaint()+0x98>)
    3f34:	f843 5034 	str.w	r5, [r3, r4, lsl #3]
}
    3f38:	b008      	add	sp, #32
    3f3a:	bd70      	pop	{r4, r5, r6, pc}
    3f3c:	20000a7c 	.word	0x20000a7c
    3f40:	20003314 	.word	0x20003314
    3f44:	20003294 	.word	0x20003294
    3f48:	2000b68c 	.word	0x2000b68c
    3f4c:	200071b8 	.word	0x200071b8
    3f50:	20000a84 	.word	0x20000a84

00003f54 <light(int, int, CRGB)>:
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    3f54:	1e4b      	subs	r3, r1, #1
void light(int x, int y, CRGB color) {
    3f56:	b082      	sub	sp, #8
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    3f58:	2b0f      	cmp	r3, #15
void light(int x, int y, CRGB color) {
    3f5a:	9201      	str	r2, [sp, #4]
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    3f5c:	d813      	bhi.n	3f86 <light(int, int, CRGB)+0x32>
    3f5e:	1e42      	subs	r2, r0, #1
    3f60:	2a0f      	cmp	r2, #15
    3f62:	d810      	bhi.n	3f86 <light(int, int, CRGB)+0x32>
    if (y % 2 == 0) {
    3f64:	07c9      	lsls	r1, r1, #31
    3f66:	d410      	bmi.n	3f8a <light(int, int, CRGB)+0x36>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    3f68:	f1c0 0010 	rsb	r0, r0, #16
    3f6c:	4a0e      	ldr	r2, [pc, #56]	; (3fa8 <light(int, int, CRGB)+0x54>)
    3f6e:	f8bd c004 	ldrh.w	ip, [sp, #4]
    3f72:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    3f76:	f89d 1006 	ldrb.w	r1, [sp, #6]
    3f7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3f7e:	1813      	adds	r3, r2, r0
    3f80:	f822 c000 	strh.w	ip, [r2, r0]
    3f84:	7099      	strb	r1, [r3, #2]
}
    3f86:	b002      	add	sp, #8
    3f88:	4770      	bx	lr
      leds[(x - 1) + (maxX * (y - 1))] = color;
    3f8a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    3f8e:	4b06      	ldr	r3, [pc, #24]	; (3fa8 <light(int, int, CRGB)+0x54>)
    3f90:	f8bd c004 	ldrh.w	ip, [sp, #4]
    3f94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    3f98:	f89d 0006 	ldrb.w	r0, [sp, #6]
    3f9c:	1899      	adds	r1, r3, r2
    3f9e:	f823 c002 	strh.w	ip, [r3, r2]
    3fa2:	7088      	strb	r0, [r1, #2]
}
    3fa4:	b002      	add	sp, #8
    3fa6:	4770      	bx	lr
    3fa8:	20006bf0 	.word	0x20006bf0

00003fac <handleNoteOn(unsigned char, unsigned char, unsigned char)>:
void handleNoteOn(uint8_t channel, uint8_t pitch, uint8_t velocity) {
    3fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (SMP.y - 1 < 1 || SMP.y - 1 > maxFiles) return;
    3fb0:	4e53      	ldr	r6, [pc, #332]	; (4100 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x154>)
void handleNoteOn(uint8_t channel, uint8_t pitch, uint8_t velocity) {
    3fb2:	4614      	mov	r4, r2
    3fb4:	b087      	sub	sp, #28
  if (SMP.y - 1 < 1 || SMP.y - 1 > maxFiles) return;
    3fb6:	6b77      	ldr	r7, [r6, #52]	; 0x34
    3fb8:	1eba      	subs	r2, r7, #2
    3fba:	2a07      	cmp	r2, #7
    3fbc:	d902      	bls.n	3fc4 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x18>
}
    3fbe:	b007      	add	sp, #28
    3fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3fc4:	4689      	mov	r9, r1
  envelopes[SMP.y - 1]->release(11880 / 2);
    3fc6:	4a4f      	ldr	r2, [pc, #316]	; (4104 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x158>)
    3fc8:	1e79      	subs	r1, r7, #1
    3fca:	f647 73e9 	movw	r3, #32745	; 0x7fe9
  int livenote = SMP.y + pitch - 60;  // set Base to C3
    3fce:	444f      	add	r7, r9
	size_t print(int n)				{ return print((long)n); }
    3fd0:	484d      	ldr	r0, [pc, #308]	; (4108 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x15c>)
    3fd2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
    3fd6:	f1a7 053c 	sub.w	r5, r7, #60	; 0x3c
    3fda:	8693      	strh	r3, [r2, #52]	; 0x34
    3fdc:	4629      	mov	r1, r5
    3fde:	f011 fb3d 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3fe2:	4849      	ldr	r0, [pc, #292]	; (4108 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x15c>)
    3fe4:	f011 fb46 	bl	15674 <Print::println()>
  if (livenote > 16) livenote -= 12;
    3fe8:	2d10      	cmp	r5, #16
    3fea:	bfc8      	it	gt
    3fec:	f1a7 0548 	subgt.w	r5, r7, #72	; 0x48
  if (livenote < 1) livenote += 12;
    3ff0:	2d00      	cmp	r5, #0
    3ff2:	bfd8      	it	le
    3ff4:	350c      	addle	r5, #12
  if (livenote >= 1 && livenote <= 16) {
    3ff6:	1e6b      	subs	r3, r5, #1
    3ff8:	2b0f      	cmp	r3, #15
    3ffa:	d8e0      	bhi.n	3fbe <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x12>
        : r(ir), g(ig), b(ib)
    3ffc:	2300      	movs	r3, #0
    3ffe:	f04f 08ff 	mov.w	r8, #255	; 0xff
    light(SMP.x, livenote, CRGB(0 ,0, 255));
    4002:	4629      	mov	r1, r5
    4004:	6b30      	ldr	r0, [r6, #48]	; 0x30
    4006:	f8ad 3014 	strh.w	r3, [sp, #20]
    400a:	f88d 8016 	strb.w	r8, [sp, #22]
    400e:	9a05      	ldr	r2, [sp, #20]
    4010:	f7ff ffa0 	bl	3f54 <light(int, int, CRGB)>
    4014:	483d      	ldr	r0, [pc, #244]	; (410c <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x160>)
    4016:	7801      	ldrb	r1, [r0, #0]
    4018:	f006 fe8e 	bl	ad38 <CFastLED::show(unsigned char)>
    Serial.println(SMP.y - 1);
    401c:	6b71      	ldr	r1, [r6, #52]	; 0x34
	size_t print(int n)				{ return print((long)n); }
    401e:	483a      	ldr	r0, [pc, #232]	; (4108 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x15c>)
    4020:	3901      	subs	r1, #1
    4022:	f011 fb1b 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4026:	4838      	ldr	r0, [pc, #224]	; (4108 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x15c>)
    4028:	f011 fb24 	bl	15674 <Print::println()>
    _samplers[SMP.y - 1].noteEvent(((SampleRate[SMP.y - 1] * 12) + pitch - 60), velocity / 2, true, false);
    402c:	6b77      	ldr	r7, [r6, #52]	; 0x34
    402e:	4b38      	ldr	r3, [pc, #224]	; (4110 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x164>)
    4030:	f1a9 013c 	sub.w	r1, r9, #60	; 0x3c
    4034:	3f01      	subs	r7, #1
        if (isNoteOn && velocity > 0)
    4036:	0862      	lsrs	r2, r4, #1
    4038:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
    403c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4040:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    4044:	b2c9      	uxtb	r1, r1
    4046:	d01d      	beq.n	4084 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0xd8>
            _polysampler.noteOn(noteNumber, velocity);
    4048:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    404c:	4831      	ldr	r0, [pc, #196]	; (4114 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x168>)
    404e:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    4052:	f7ff fbc1 	bl	37d8 <polyphonicsampler::noteOn(unsigned char, unsigned char)>
    if (isPlaying) {
    4056:	4b30      	ldr	r3, [pc, #192]	; (4118 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x16c>)
    4058:	781b      	ldrb	r3, [r3, #0]
    405a:	2b00      	cmp	r3, #0
    405c:	d0af      	beq.n	3fbe <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x12>
      if (!mute[SMP.y - 1]) {
    405e:	6b73      	ldr	r3, [r6, #52]	; 0x34
    4060:	4a2e      	ldr	r2, [pc, #184]	; (411c <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x170>)
    4062:	3b01      	subs	r3, #1
    4064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    4068:	2a00      	cmp	r2, #0
    406a:	d1a8      	bne.n	3fbe <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x12>
        note[beat][livenote][0] = SMP.y - 1;
    406c:	4a2c      	ldr	r2, [pc, #176]	; (4120 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x174>)
    406e:	492d      	ldr	r1, [pc, #180]	; (4124 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x178>)
    4070:	6812      	ldr	r2, [r2, #0]
    4072:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    4076:	442a      	add	r2, r5
        note[beat][livenote][1] = velocity;
    4078:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
        note[beat][livenote][0] = SMP.y - 1;
    407c:	f841 3032 	str.w	r3, [r1, r2, lsl #3]
        note[beat][livenote][1] = velocity;
    4080:	6044      	str	r4, [r0, #4]
    4082:	e79c      	b.n	3fbe <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x12>
        uint8_t index = activeNotes[noteNumber];
    4084:	eb07 0387 	add.w	r3, r7, r7, lsl #2
    4088:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 412c <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x180>
    408c:	eb0b 1983 	add.w	r9, fp, r3, lsl #6
    4090:	9303      	str	r3, [sp, #12]
    4092:	0198      	lsls	r0, r3, #6
    4094:	eb09 0301 	add.w	r3, r9, r1
    4098:	f893 a020 	ldrb.w	sl, [r3, #32]
    409c:	9302      	str	r3, [sp, #8]
        if (index == 255) {
    409e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    40a2:	d0d8      	beq.n	4056 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
            _polysampler.noteOff(noteNumber);
    40a4:	3010      	adds	r0, #16
    40a6:	f88d 1011 	strb.w	r1, [sp, #17]
    40aa:	f88d a010 	strb.w	sl, [sp, #16]
    40ae:	4458      	add	r0, fp
        _noteEventFunction(index, noteNumber, 0, false, false);
    40b0:	f88d 2012 	strb.w	r2, [sp, #18]
    40b4:	f88d 2013 	strb.w	r2, [sp, #19]
	if (_M_empty())
    40b8:	6883      	ldr	r3, [r0, #8]
    40ba:	f88d 2014 	strb.w	r2, [sp, #20]
    40be:	b1e3      	cbz	r3, 40fa <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x14e>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    40c0:	ab05      	add	r3, sp, #20
    40c2:	f10d 0211 	add.w	r2, sp, #17
    40c6:	a904      	add	r1, sp, #16
    40c8:	9301      	str	r3, [sp, #4]
    40ca:	f10d 0313 	add.w	r3, sp, #19
    40ce:	9300      	str	r3, [sp, #0]
    40d0:	f10d 0312 	add.w	r3, sp, #18
    40d4:	f8d9 701c 	ldr.w	r7, [r9, #28]
        activeVoices[index] = 255; // free the voice
    40d8:	44d1      	add	r9, sl
    40da:	47b8      	blx	r7
        activeNotes[noteNumber] = 255;
    40dc:	9b02      	ldr	r3, [sp, #8]
        activeVoices[index] = 255; // free the voice
    40de:	f889 80a0 	strb.w	r8, [r9, #160]	; 0xa0
        activeNotes[noteNumber] = 255;
    40e2:	f883 8020 	strb.w	r8, [r3, #32]
        voice_noteOff[index] = millis();
    40e6:	9b03      	ldr	r3, [sp, #12]
    40e8:	eb0a 1703 	add.w	r7, sl, r3, lsl #4
    40ec:	4b0e      	ldr	r3, [pc, #56]	; (4128 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0x17c>)
    40ee:	eb0b 0b87 	add.w	fp, fp, r7, lsl #2
    40f2:	681b      	ldr	r3, [r3, #0]
    40f4:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
    40f8:	e7ad      	b.n	4056 <handleNoteOn(unsigned char, unsigned char, unsigned char)+0xaa>
	  __throw_bad_function_call();
    40fa:	f014 fd8f 	bl	18c1c <std::__throw_bad_function_call()>
    40fe:	bf00      	nop
    4100:	20003294 	.word	0x20003294
    4104:	20000e64 	.word	0x20000e64
    4108:	20003314 	.word	0x20003314
    410c:	200045e8 	.word	0x200045e8
    4110:	200032d4 	.word	0x200032d4
    4114:	2000562c 	.word	0x2000562c
    4118:	2000c953 	.word	0x2000c953
    411c:	20007178 	.word	0x20007178
    4120:	200067a8 	.word	0x200067a8
    4124:	200071b8 	.word	0x200071b8
    4128:	2000bc24 	.word	0x2000bc24
    412c:	2000561c 	.word	0x2000561c

00004130 <paint()>:
void paint() {
    4130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4134:	2105      	movs	r1, #5
    4136:	b085      	sub	sp, #20
    4138:	489b      	ldr	r0, [pc, #620]	; (43a8 <paint()+0x278>)
    413a:	f014 f9cb 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    413e:	489b      	ldr	r0, [pc, #620]	; (43ac <paint()+0x27c>)
    4140:	f011 fa98 	bl	15674 <Print::println()>
  int x = (SMP.edit - 1) * maxX + SMP.x;
    4144:	4b9a      	ldr	r3, [pc, #616]	; (43b0 <paint()+0x280>)
    4146:	699a      	ldr	r2, [r3, #24]
    4148:	6b1f      	ldr	r7, [r3, #48]	; 0x30
    414a:	3a01      	subs	r2, #1
  if (!SMP.singleMode) {
    414c:	6819      	ldr	r1, [r3, #0]
  int y = SMP.y;
    414e:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
  int x = (SMP.edit - 1) * maxX + SMP.x;
    4152:	eb07 1702 	add.w	r7, r7, r2, lsl #4
  if (!SMP.singleMode) {
    4156:	b999      	cbnz	r1, 4180 <paint()+0x50>
    if (y > 1 && y <= maxFiles + 1 || y == maxY - 1) {
    4158:	f1a8 0302 	sub.w	r3, r8, #2
    415c:	2b07      	cmp	r3, #7
    415e:	f240 80a9 	bls.w	42b4 <paint()+0x184>
    4162:	f1b8 0f0f 	cmp.w	r8, #15
    4166:	f000 80a5 	beq.w	42b4 <paint()+0x184>
      if (note[x][y][0] == 0) {
    416a:	eb07 1307 	add.w	r3, r7, r7, lsl #4
    416e:	4d91      	ldr	r5, [pc, #580]	; (43b4 <paint()+0x284>)
    4170:	ea4f 1a07 	mov.w	sl, r7, lsl #4
    4174:	f8df 9240 	ldr.w	r9, [pc, #576]	; 43b8 <paint()+0x288>
    4178:	4443      	add	r3, r8
    417a:	f855 3033 	ldr.w	r3, [r5, r3, lsl #3]
    417e:	e00a      	b.n	4196 <paint()+0x66>
    note[x][y][0] = SMP.currentChannel;
    4180:	eb07 1207 	add.w	r2, r7, r7, lsl #4
    4184:	685b      	ldr	r3, [r3, #4]
    4186:	4d8b      	ldr	r5, [pc, #556]	; (43b4 <paint()+0x284>)
    4188:	ea4f 1a07 	mov.w	sl, r7, lsl #4
    418c:	4442      	add	r2, r8
    418e:	f8df 9228 	ldr.w	r9, [pc, #552]	; 43b8 <paint()+0x288>
    4192:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
  if (note[x][y][0] > maxY - 2) {
    4196:	2b0e      	cmp	r3, #14
    4198:	d93d      	bls.n	4216 <paint()+0xe6>
    note[x][y][0] = 1;
    419a:	eb0a 0607 	add.w	r6, sl, r7
    419e:	2101      	movs	r1, #1
    41a0:	f8df b248 	ldr.w	fp, [pc, #584]	; 43ec <paint()+0x2bc>
    41a4:	4446      	add	r6, r8
    for (int vx = 1; vx < maxX + 1; vx++) {
    41a6:	460c      	mov	r4, r1
    note[x][y][0] = 1;
    41a8:	f845 1036 	str.w	r1, [r5, r6, lsl #3]
    for (int vx = 1; vx < maxX + 1; vx++) {
    41ac:	e001      	b.n	41b2 <paint()+0x82>
      light(vx, note[x][y][0] + 1, col[note[x][y][0]] * 12);
    41ae:	f855 1036 	ldr.w	r1, [r5, r6, lsl #3]
/// @copydoc CRGB::operator*=
__attribute__((always_inline))
inline CRGB operator*( const CRGB& p1, uint8_t d)
{
    return CRGB( qmul8( p1.r, d),
                 qmul8( p1.g, d),
    41b2:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    41b6:	4620      	mov	r0, r4
    for (int vx = 1; vx < maxX + 1; vx++) {
    41b8:	3401      	adds	r4, #1
      light(vx, note[x][y][0] + 1, col[note[x][y][0]] * 12);
    41ba:	3101      	adds	r1, #1
/// @param j second byte to multiply
/// @returns the product of i * j, capping at 0xFF
LIB8STATIC_ALWAYS_INLINE uint8_t qmul8( uint8_t i, uint8_t j)
{
#if QMUL8_C == 1
    unsigned p = (unsigned)i * (unsigned)j;
    41bc:	f81b c002 	ldrb.w	ip, [fp, r2]
    41c0:	eb0b 0302 	add.w	r3, fp, r2
    41c4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    41c8:	785a      	ldrb	r2, [r3, #1]
    41ca:	789b      	ldrb	r3, [r3, #2]
    41cc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    41d0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if( p > 255) p = 255;
    return p;
    41d4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    41d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    41dc:	ea4f 0282 	mov.w	r2, r2, lsl #2
    41e0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    return p;
    41e4:	bf28      	it	cs
    41e6:	f04f 0cff 	movcs.w	ip, #255	; 0xff
    41ea:	2aff      	cmp	r2, #255	; 0xff
    41ec:	f88d c00c 	strb.w	ip, [sp, #12]
    41f0:	bf28      	it	cs
    41f2:	22ff      	movcs	r2, #255	; 0xff
    41f4:	2bff      	cmp	r3, #255	; 0xff
    41f6:	bf28      	it	cs
    41f8:	23ff      	movcs	r3, #255	; 0xff
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    41fa:	f88d 200d 	strb.w	r2, [sp, #13]
    41fe:	f88d 300e 	strb.w	r3, [sp, #14]
    4202:	9a03      	ldr	r2, [sp, #12]
    4204:	f7ff fea6 	bl	3f54 <light(int, int, CRGB)>
    for (int vx = 1; vx < maxX + 1; vx++) {
    4208:	2c11      	cmp	r4, #17
    420a:	d1d0      	bne.n	41ae <paint()+0x7e>
    420c:	f899 1000 	ldrb.w	r1, [r9]
    4210:	4869      	ldr	r0, [pc, #420]	; (43b8 <paint()+0x288>)
    4212:	f006 fd91 	bl	ad38 <CFastLED::show(unsigned char)>
  if (!isPlaying) {
    4216:	4b69      	ldr	r3, [pc, #420]	; (43bc <paint()+0x28c>)
    4218:	781b      	ldrb	r3, [r3, #0]
    421a:	bb43      	cbnz	r3, 426e <paint()+0x13e>
    if (note[x][y][0] != 14) _samplers[note[x][y][0]].noteEvent(12 * SampleRate[note[x][y][0]] + y - (note[x][y][0] + 1), 50, true, false);
    421c:	44ba      	add	sl, r7
    421e:	44c2      	add	sl, r8
    4220:	f855 003a 	ldr.w	r0, [r5, sl, lsl #3]
    4224:	280e      	cmp	r0, #14
    4226:	d12d      	bne.n	4284 <paint()+0x154>
      waveform1.frequency(y * 10);
    4228:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    422c:	ea4f 0848 	mov.w	r8, r8, lsl #1
    4230:	ee07 8a90 	vmov	s15, r8
    4234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (freq < 0.0f) {
    4238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    423c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4240:	f100 809b 	bmi.w	437a <paint()+0x24a>
		} else if (freq > AUDIO_SAMPLE_RATE_EXACT / 2.0f) {
    4244:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 43c0 <paint()+0x290>
    4248:	eef4 7ac7 	vcmpe.f32	s15, s14
    424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4250:	f340 8099 	ble.w	4386 <paint()+0x256>
    4254:	4a5b      	ldr	r2, [pc, #364]	; (43c4 <paint()+0x294>)
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    4256:	4b5c      	ldr	r3, [pc, #368]	; (43c8 <paint()+0x298>)
    4258:	61d3      	str	r3, [r2, #28]
      envelope14.noteOn();
    425a:	485c      	ldr	r0, [pc, #368]	; (43cc <paint()+0x29c>)
    425c:	f007 fd18 	bl	bc90 <AudioEffectEnvelope::noteOn()>
    4260:	4a5b      	ldr	r2, [pc, #364]	; (43d0 <paint()+0x2a0>)
      startTime = millis();    // Record the start time
    4262:	495c      	ldr	r1, [pc, #368]	; (43d4 <paint()+0x2a4>)
    4264:	6810      	ldr	r0, [r2, #0]
      noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    4266:	2201      	movs	r2, #1
    4268:	4b5b      	ldr	r3, [pc, #364]	; (43d8 <paint()+0x2a8>)
      startTime = millis();    // Record the start time
    426a:	6008      	str	r0, [r1, #0]
      noteOnTriggered = true;  // Set the flag so we don't trigger noteOn again
    426c:	701a      	strb	r2, [r3, #0]
    426e:	f899 1000 	ldrb.w	r1, [r9]
    4272:	4851      	ldr	r0, [pc, #324]	; (43b8 <paint()+0x288>)
    4274:	f006 fd60 	bl	ad38 <CFastLED::show(unsigned char)>
  freshnote = true;
    4278:	4b58      	ldr	r3, [pc, #352]	; (43dc <paint()+0x2ac>)
    427a:	2201      	movs	r2, #1
    427c:	701a      	strb	r2, [r3, #0]
}
    427e:	b005      	add	sp, #20
    4280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (note[x][y][0] != 14) _samplers[note[x][y][0]].noteEvent(12 * SampleRate[note[x][y][0]] + y - (note[x][y][0] + 1), 50, true, false);
    4284:	4b56      	ldr	r3, [pc, #344]	; (43e0 <paint()+0x2b0>)
    4286:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
            _polysampler.noteOn(noteNumber, velocity);
    428a:	2232      	movs	r2, #50	; 0x32
    428c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4290:	1a09      	subs	r1, r1, r0
    4292:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4296:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    429a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    429e:	4b51      	ldr	r3, [pc, #324]	; (43e4 <paint()+0x2b4>)
    42a0:	b2c9      	uxtb	r1, r1
    42a2:	eb03 1080 	add.w	r0, r3, r0, lsl #6
    42a6:	f7ff fa97 	bl	37d8 <polyphonicsampler::noteOn(unsigned char, unsigned char)>
    if (note[x][y][0] == 14) {
    42aa:	f855 303a 	ldr.w	r3, [r5, sl, lsl #3]
    42ae:	2b0e      	cmp	r3, #14
    42b0:	d1dd      	bne.n	426e <paint()+0x13e>
    42b2:	e7b9      	b.n	4228 <paint()+0xf8>
      if (note[x][y][0] == 0) {
    42b4:	eb07 1207 	add.w	r2, r7, r7, lsl #4
    42b8:	4d3e      	ldr	r5, [pc, #248]	; (43b4 <paint()+0x284>)
    42ba:	ea4f 1a07 	mov.w	sl, r7, lsl #4
    42be:	4442      	add	r2, r8
    42c0:	f855 1032 	ldr.w	r1, [r5, r2, lsl #3]
    42c4:	2900      	cmp	r1, #0
    42c6:	d051      	beq.n	436c <paint()+0x23c>
        if ((note[x][y][0] + 1) > 13) note[x][y][0] = 1;
    42c8:	3101      	adds	r1, #1
    42ca:	290d      	cmp	r1, #13
    42cc:	d859      	bhi.n	4382 <paint()+0x252>
        if ((note[x][y][0] + 1) > 8) note[x][y][0] = 13;
    42ce:	2909      	cmp	r1, #9
    42d0:	bf28      	it	cs
    42d2:	210e      	movcs	r1, #14
        note[x][y][0] = note[x][y][0] + sample;
    42d4:	eb0a 0407 	add.w	r4, sl, r7
    42d8:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 43b8 <paint()+0x288>
    42dc:	f8df b10c 	ldr.w	fp, [pc, #268]	; 43ec <paint()+0x2bc>
    42e0:	eb04 0308 	add.w	r3, r4, r8
    42e4:	464e      	mov	r6, r9
        for (int vx = 1; vx < maxX + 1; vx++) {
    42e6:	2401      	movs	r4, #1
        note[x][y][0] = note[x][y][0] + sample;
    42e8:	9301      	str	r3, [sp, #4]
    42ea:	f845 1033 	str.w	r1, [r5, r3, lsl #3]
        for (int vx = 1; vx < maxX + 1; vx++) {
    42ee:	e002      	b.n	42f6 <paint()+0x1c6>
  if (note[x][y][0] > maxY - 2) {
    42f0:	9b01      	ldr	r3, [sp, #4]
    42f2:	f855 1033 	ldr.w	r1, [r5, r3, lsl #3]
                 qmul8( p1.g, d),
    42f6:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
          light(vx, note[x][y][0] + 1, col[note[x][y][0]] * 12);
    42fa:	4620      	mov	r0, r4
    42fc:	3101      	adds	r1, #1
        for (int vx = 1; vx < maxX + 1; vx++) {
    42fe:	3401      	adds	r4, #1
    unsigned p = (unsigned)i * (unsigned)j;
    4300:	f81b e00c 	ldrb.w	lr, [fp, ip]
    4304:	eb0b 020c 	add.w	r2, fp, ip
    4308:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    430c:	f892 c001 	ldrb.w	ip, [r2, #1]
    4310:	7892      	ldrb	r2, [r2, #2]
    4312:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    4316:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    return p;
    431a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    431e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    4322:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    4326:	ea4f 0282 	mov.w	r2, r2, lsl #2
    return p;
    432a:	bf28      	it	cs
    432c:	f04f 0eff 	movcs.w	lr, #255	; 0xff
    4330:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    4334:	f88d e008 	strb.w	lr, [sp, #8]
    4338:	bf28      	it	cs
    433a:	f04f 0cff 	movcs.w	ip, #255	; 0xff
    433e:	2aff      	cmp	r2, #255	; 0xff
    4340:	bf28      	it	cs
    4342:	22ff      	movcs	r2, #255	; 0xff
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    4344:	f88d c009 	strb.w	ip, [sp, #9]
    4348:	f88d 200a 	strb.w	r2, [sp, #10]
          light(vx, note[x][y][0] + 1, col[note[x][y][0]] * 12);
    434c:	9a02      	ldr	r2, [sp, #8]
    434e:	f7ff fe01 	bl	3f54 <light(int, int, CRGB)>
    4352:	f899 1000 	ldrb.w	r1, [r9]
    4356:	4630      	mov	r0, r6
    4358:	f006 fcee 	bl	ad38 <CFastLED::show(unsigned char)>
        for (int vx = 1; vx < maxX + 1; vx++) {
    435c:	2c11      	cmp	r4, #17
    435e:	d1c7      	bne.n	42f0 <paint()+0x1c0>
  if (note[x][y][0] > maxY - 2) {
    4360:	eb0a 0307 	add.w	r3, sl, r7
    4364:	4443      	add	r3, r8
    4366:	f855 3033 	ldr.w	r3, [r5, r3, lsl #3]
    436a:	e714      	b.n	4196 <paint()+0x66>
        note[x][y][0] = (y - 1);
    436c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    4370:	f8df 9044 	ldr.w	r9, [pc, #68]	; 43b8 <paint()+0x288>
    4374:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
    4378:	e70d      	b.n	4196 <paint()+0x66>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    437a:	4b12      	ldr	r3, [pc, #72]	; (43c4 <paint()+0x294>)
    437c:	2200      	movs	r2, #0
    437e:	61da      	str	r2, [r3, #28]
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    4380:	e76b      	b.n	425a <paint()+0x12a>
    4382:	2102      	movs	r1, #2
    4384:	e7a6      	b.n	42d4 <paint()+0x1a4>
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    4386:	ed9f 7a18 	vldr	s14, [pc, #96]	; 43e8 <paint()+0x2b8>
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    438a:	490f      	ldr	r1, [pc, #60]	; (43c8 <paint()+0x298>)
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    438c:	ee67 7a87 	vmul.f32	s15, s15, s14
    4390:	4a0c      	ldr	r2, [pc, #48]	; (43c4 <paint()+0x294>)
    4392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4396:	ee17 3a90 	vmov	r3, s15
    439a:	edc2 7a07 	vstr	s15, [r2, #28]
		if (phase_increment > 0x7FFE0000u) phase_increment = 0x7FFE0000;
    439e:	428b      	cmp	r3, r1
    43a0:	f63f af59 	bhi.w	4256 <paint()+0x126>
    43a4:	e759      	b.n	425a <paint()+0x12a>
    43a6:	bf00      	nop
    43a8:	20000a48 	.word	0x20000a48
    43ac:	20003314 	.word	0x20003314
    43b0:	20003294 	.word	0x20003294
    43b4:	200071b8 	.word	0x200071b8
    43b8:	200045e8 	.word	0x200045e8
    43bc:	2000c953 	.word	0x2000c953
    43c0:	46ac4400 	.word	0x46ac4400
    43c4:	2000c794 	.word	0x2000c794
    43c8:	7ffe0000 	.word	0x7ffe0000
    43cc:	200069bc 	.word	0x200069bc
    43d0:	2000bc24 	.word	0x2000bc24
    43d4:	2000bc1c 	.word	0x2000bc1c
    43d8:	2000c954 	.word	0x2000c954
    43dc:	2000c951 	.word	0x2000c951
    43e0:	200032d4 	.word	0x200032d4
    43e4:	2000562c 	.word	0x2000562c
    43e8:	47be37c6 	.word	0x47be37c6
    43ec:	20004fc4 	.word	0x20004fc4

000043f0 <switchMode(Mode*)>:
void switchMode(Mode* newMode) {
    43f0:	b538      	push	{r3, r4, r5, lr}
  SMP.singleMode = false;
    43f2:	490b      	ldr	r1, [pc, #44]	; (4420 <switchMode(Mode*)+0x30>)
  unpaintMode = false;
    43f4:	2300      	movs	r3, #0
  paintMode = false;
    43f6:	4a0b      	ldr	r2, [pc, #44]	; (4424 <switchMode(Mode*)+0x34>)
void switchMode(Mode* newMode) {
    43f8:	4604      	mov	r4, r0
  unpaintMode = false;
    43fa:	4d0b      	ldr	r5, [pc, #44]	; (4428 <switchMode(Mode*)+0x38>)
  SMP.singleMode = false;
    43fc:	600b      	str	r3, [r1, #0]
  buttonString = "000";
    43fe:	480b      	ldr	r0, [pc, #44]	; (442c <switchMode(Mode*)+0x3c>)
    4400:	490b      	ldr	r1, [pc, #44]	; (4430 <switchMode(Mode*)+0x40>)
  unpaintMode = false;
    4402:	602b      	str	r3, [r5, #0]
  paintMode = false;
    4404:	6013      	str	r3, [r2, #0]
  buttonString = "000";
    4406:	f011 fb17 	bl	15a38 <String::operator=(char const*)>
  if (newMode != currentMode) {
    440a:	4b0a      	ldr	r3, [pc, #40]	; (4434 <switchMode(Mode*)+0x44>)
    440c:	681b      	ldr	r3, [r3, #0]
    440e:	42a3      	cmp	r3, r4
    4410:	d004      	beq.n	441c <switchMode(Mode*)+0x2c>
    4412:	4620      	mov	r0, r4
}
    4414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4418:	f7fc bdf4 	b.w	1004 <switchMode(Mode*) [clone .part.0]>
    441c:	bd38      	pop	{r3, r4, r5, pc}
    441e:	bf00      	nop
    4420:	20003294 	.word	0x20003294
    4424:	2000b68c 	.word	0x2000b68c
    4428:	2000c538 	.word	0x2000c538
    442c:	200067ac 	.word	0x200067ac
    4430:	2000092c 	.word	0x2000092c
    4434:	200038c8 	.word	0x200038c8

00004438 <mapAndClampEncoderValue(Encoder&, int, int, int)>:
float mapAndClampEncoderValue(Encoder& encoder, int min, int max, int id) {
    4438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    443a:	461d      	mov	r5, r3
    443c:	4606      	mov	r6, r0
    443e:	4614      	mov	r4, r2
    4440:	ed2d 8b02 	vpush	{d8}
		if (interrupts_in_use < 2) {
    4444:	7e03      	ldrb	r3, [r0, #24]
    4446:	ee08 1a10 	vmov	s16, r1
    444a:	2b01      	cmp	r3, #1
    444c:	f240 8082 	bls.w	4554 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x11c>
			noInterrupts();
    4450:	b672      	cpsid	i
		int32_t ret = encoder.position;
    4452:	ed96 0a05 	vldr	s0, [r6, #20]
		interrupts();
    4456:	b662      	cpsie	i
  float mappedValue = round(mapf(value, min, max * 4, min, max));
    4458:	ee07 4a90 	vmov	s15, r4
    445c:	00a7      	lsls	r7, r4, #2
    445e:	eeb8 3bc8 	vcvt.f64.s32	d3, s16
  float value = encoder.read();
    4462:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  float mappedValue = round(mapf(value, min, max * 4, min, max));
    4466:	eeb8 4be7 	vcvt.f64.s32	d4, s15
    446a:	ee07 7a90 	vmov	s15, r7
    446e:	eeb0 1b43 	vmov.f64	d1, d3
    4472:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
    4476:	eeb8 2be7 	vcvt.f64.s32	d2, s15
    447a:	f006 f8f9 	bl	a670 <mapf(double, double, double, double, double)>
    447e:	feb8 0b40 	vrinta.f64	d0, d0
    4482:	eebd 0bc0 	vcvt.s32.f64	s0, d0
  if (mappedValue < min) {
    4486:	eef8 8ac8 	vcvt.f32.s32	s17, s16
  float mappedValue = round(mapf(value, min, max * 4, min, max));
    448a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
  if (mappedValue < min) {
    448e:	eef4 8ac0 	vcmpe.f32	s17, s0
    4492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4496:	dd3c      	ble.n	4512 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xda>
		noInterrupts();
    4498:	b672      	cpsid	i
		encoder.position = p;
    449a:	ed86 8a05 	vstr	s16, [r6, #20]
		interrupts();
    449e:	b662      	cpsie	i
    if (id == 2 && (currentMode == &draw || currentMode == &singleMode)) {
    44a0:	2d02      	cmp	r5, #2
    44a2:	d131      	bne.n	4508 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xd0>
    44a4:	4b43      	ldr	r3, [pc, #268]	; (45b4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x17c>)
    44a6:	4a44      	ldr	r2, [pc, #272]	; (45b8 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x180>)
    44a8:	681b      	ldr	r3, [r3, #0]
    44aa:	4293      	cmp	r3, r2
    44ac:	d002      	beq.n	44b4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x7c>
    44ae:	4a43      	ldr	r2, [pc, #268]	; (45bc <mapAndClampEncoderValue(Encoder&, int, int, int)+0x184>)
    44b0:	4293      	cmp	r3, r2
    44b2:	d129      	bne.n	4508 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xd0>
      if (SMP.edit > 1) {
    44b4:	4942      	ldr	r1, [pc, #264]	; (45c0 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x188>)
    44b6:	698a      	ldr	r2, [r1, #24]
    44b8:	2a01      	cmp	r2, #1
    44ba:	dd25      	ble.n	4508 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xd0>
        SMP.edit = SMP.edit - 1;
    44bc:	3a01      	subs	r2, #1
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    44be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    44c0:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    44c4:	ee07 2a90 	vmov	s15, r2
        SMP.edit = SMP.edit - 1;
    44c8:	618a      	str	r2, [r1, #24]
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    44ca:	eeb8 0be7 	vcvt.f64.s32	d0, s15
    44ce:	ee07 3a90 	vmov	s15, r3
    44d2:	009b      	lsls	r3, r3, #2
    44d4:	eeb0 1b43 	vmov.f64	d1, d3
    44d8:	eeb8 2be7 	vcvt.f64.s32	d2, s15
    44dc:	ee04 3a10 	vmov	s8, r3
    44e0:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
    44e4:	f006 f8c4 	bl	a670 <mapf(double, double, double, double, double)>
    44e8:	feb8 0b40 	vrinta.f64	d0, d0
		noInterrupts();
    44ec:	b672      	cpsid	i
    44ee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
		encoder.position = p;
    44f2:	4b34      	ldr	r3, [pc, #208]	; (45c4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18c>)
    44f4:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
		interrupts();
    44f8:	b662      	cpsie	i
		noInterrupts();
    44fa:	b672      	cpsid	i
		encoder.position = p;
    44fc:	6177      	str	r7, [r6, #20]
		interrupts();
    44fe:	b662      	cpsie	i
        return max;
    4500:	ee07 4a90 	vmov	s15, r4
    4504:	eef8 8ae7 	vcvt.f32.s32	s17, s15
}
    4508:	eeb0 0a68 	vmov.f32	s0, s17
    450c:	ecbd 8b02 	vpop	{d8}
    4510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (mappedValue > max) {
    4512:	ee07 4a90 	vmov	s15, r4
    4516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    451a:	eef4 7ac0 	vcmpe.f32	s15, s0
    451e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4522:	d51b      	bpl.n	455c <mapAndClampEncoderValue(Encoder&, int, int, int)+0x124>
		noInterrupts();
    4524:	b672      	cpsid	i
		encoder.position = p;
    4526:	6177      	str	r7, [r6, #20]
		interrupts();
    4528:	b662      	cpsie	i
    if (id == 2 && (currentMode == &draw || currentMode == &singleMode)) {
    452a:	2d02      	cmp	r5, #2
    452c:	d10b      	bne.n	4546 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x10e>
    452e:	4b21      	ldr	r3, [pc, #132]	; (45b4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x17c>)
    4530:	4a22      	ldr	r2, [pc, #136]	; (45bc <mapAndClampEncoderValue(Encoder&, int, int, int)+0x184>)
    4532:	681b      	ldr	r3, [r3, #0]
    4534:	4293      	cmp	r3, r2
    4536:	d002      	beq.n	453e <mapAndClampEncoderValue(Encoder&, int, int, int)+0x106>
    4538:	4a1f      	ldr	r2, [pc, #124]	; (45b8 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x180>)
    453a:	4293      	cmp	r3, r2
    453c:	d103      	bne.n	4546 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x10e>
      if (SMP.edit < maxPages) {
    453e:	4920      	ldr	r1, [pc, #128]	; (45c0 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x188>)
    4540:	698a      	ldr	r2, [r1, #24]
    4542:	2a07      	cmp	r2, #7
    4544:	dd11      	ble.n	456a <mapAndClampEncoderValue(Encoder&, int, int, int)+0x132>
    return max;
    4546:	eef0 8a67 	vmov.f32	s17, s15
}
    454a:	eeb0 0a68 	vmov.f32	s0, s17
    454e:	ecbd 8b02 	vpop	{d8}
    4552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			noInterrupts();
    4554:	b672      	cpsid	i
			update(&encoder);
    4556:	f7fe fd69 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    455a:	e77a      	b.n	4452 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x1a>
    return mappedValue;
    455c:	eef0 8a40 	vmov.f32	s17, s0
}
    4560:	eeb0 0a68 	vmov.f32	s0, s17
    4564:	ecbd 8b02 	vpop	{d8}
    4568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    456a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        SMP.edit = SMP.edit + 1;
    456c:	3201      	adds	r2, #1
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    456e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    4572:	ee07 3a90 	vmov	s15, r3
    4576:	0098      	lsls	r0, r3, #2
        SMP.edit = SMP.edit + 1;
    4578:	618a      	str	r2, [r1, #24]
        encoders[1].write(round(mapf(SMP.edit, 1, currentMode->maxValues[1], 1, currentMode->maxValues[1] * 4)));
    457a:	eeb8 2be7 	vcvt.f64.s32	d2, s15
    457e:	ee04 0a10 	vmov	s8, r0
    4582:	ee07 2a90 	vmov	s15, r2
    4586:	eeb0 1b43 	vmov.f64	d1, d3
    458a:	eeb8 4bc4 	vcvt.f64.s32	d4, s8
    458e:	eeb8 0be7 	vcvt.f64.s32	d0, s15
    4592:	f006 f86d 	bl	a670 <mapf(double, double, double, double, double)>
    4596:	feb8 0b40 	vrinta.f64	d0, d0
		noInterrupts();
    459a:	b672      	cpsid	i
    459c:	eebd 0bc0 	vcvt.s32.f64	s0, d0
		encoder.position = p;
    45a0:	4b08      	ldr	r3, [pc, #32]	; (45c4 <mapAndClampEncoderValue(Encoder&, int, int, int)+0x18c>)
    45a2:	ed83 0a0c 	vstr	s0, [r3, #48]	; 0x30
		interrupts();
    45a6:	b662      	cpsie	i
		noInterrupts();
    45a8:	b672      	cpsid	i
		encoder.position = p;
    45aa:	ed86 8a05 	vstr	s16, [r6, #20]
		interrupts();
    45ae:	b662      	cpsie	i
        return min;
    45b0:	e7aa      	b.n	4508 <mapAndClampEncoderValue(Encoder&, int, int, int)+0xd0>
    45b2:	bf00      	nop
    45b4:	200038c8 	.word	0x200038c8
    45b8:	200038e4 	.word	0x200038e4
    45bc:	20003c50 	.word	0x20003c50
    45c0:	20003294 	.word	0x20003294
    45c4:	200067ec 	.word	0x200067ec

000045c8 <displaySample(int)>:
  int length = mapf(len, 0, 1329920, 1, 16);
    45c8:	ee07 0a90 	vmov	s15, r0
    45cc:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
    45d0:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
void displaySample(int len) {
    45d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45d8:	ed2d 8b02 	vpush	{d8}
  int length = mapf(len, 0, 1329920, 1, 16);
    45dc:	eeb8 8be7 	vcvt.f64.s32	d8, s15
void displaySample(int len) {
    45e0:	b082      	sub	sp, #8
  for (int s = 1; s <= maxX; s++) {
    45e2:	2401      	movs	r4, #1
        : r(ir), g(ig), b(ib)
    45e4:	f240 1601 	movw	r6, #257	; 0x101
  int length = mapf(len, 0, 1329920, 1, 16);
    45e8:	ed9f 2b37 	vldr	d2, [pc, #220]	; 46c8 <displaySample(int)+0x100>
    45ec:	ed9f 1b38 	vldr	d1, [pc, #224]	; 46d0 <displaySample(int)+0x108>
    45f0:	eeb0 0b48 	vmov.f64	d0, d8
    45f4:	4625      	mov	r5, r4
    45f6:	f006 f83b 	bl	a670 <mapf(double, double, double, double, double)>
  int skip = mapf(SMP.seek * 200, 44, len, 1, 16);
    45fa:	4b39      	ldr	r3, [pc, #228]	; (46e0 <displaySample(int)+0x118>)
    45fc:	22c8      	movs	r2, #200	; 0xc8
  int length = mapf(len, 0, 1329920, 1, 16);
    45fe:	eefd 7bc0 	vcvt.s32.f64	s15, d0
  int skip = mapf(SMP.seek * 200, 44, len, 1, 16);
    4602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    4604:	eeb0 2b48 	vmov.f64	d2, d8
    4608:	eeb3 4b00 	vmov.f64	d4, #48	; 0x41800000  16.0
    460c:	fb02 f303 	mul.w	r3, r2, r3
    4610:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
  int length = mapf(len, 0, 1329920, 1, 16);
    4614:	ee17 8a90 	vmov	r8, s15
  int skip = mapf(SMP.seek * 200, 44, len, 1, 16);
    4618:	ee00 3a10 	vmov	s0, r3
    461c:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 46d8 <displaySample(int)+0x110>
    4620:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    4624:	f006 f824 	bl	a670 <mapf(double, double, double, double, double)>
    4628:	eefd 7bc0 	vcvt.s32.f64	s15, d0
    462c:	ee17 7a90 	vmov	r7, s15
    light(s, 5, CRGB(1, 1, 1));
    4630:	4620      	mov	r0, r4
    4632:	f8ad 6004 	strh.w	r6, [sp, #4]
    4636:	f88d 5006 	strb.w	r5, [sp, #6]
  for (int s = 1; s <= maxX; s++) {
    463a:	3401      	adds	r4, #1
    light(s, 5, CRGB(1, 1, 1));
    463c:	9a01      	ldr	r2, [sp, #4]
    463e:	2105      	movs	r1, #5
    4640:	f7ff fc88 	bl	3f54 <light(int, int, CRGB)>
  for (int s = 1; s <= maxX; s++) {
    4644:	2c11      	cmp	r4, #17
    4646:	d1f3      	bne.n	4630 <displaySample(int)+0x68>
  for (int s = 1; s <= length; s++) {
    4648:	f1b8 0f00 	cmp.w	r8, #0
    464c:	dd0f      	ble.n	466e <displaySample(int)+0xa6>
    464e:	2401      	movs	r4, #1
    4650:	f241 4614 	movw	r6, #5140	; 0x1414
    4654:	2514      	movs	r5, #20
    light(s, 5, CRGB(20, 20, 20));
    4656:	4620      	mov	r0, r4
    4658:	f8ad 6004 	strh.w	r6, [sp, #4]
    465c:	f88d 5006 	strb.w	r5, [sp, #6]
  for (int s = 1; s <= length; s++) {
    4660:	3401      	adds	r4, #1
    light(s, 5, CRGB(20, 20, 20));
    4662:	9a01      	ldr	r2, [sp, #4]
    4664:	2105      	movs	r1, #5
    4666:	f7ff fc75 	bl	3f54 <light(int, int, CRGB)>
  for (int s = 1; s <= length; s++) {
    466a:	45a0      	cmp	r8, r4
    466c:	daf3      	bge.n	4656 <displaySample(int)+0x8e>
  for (int s = 1; s <= maxX; s++) {
    466e:	2401      	movs	r4, #1
    4670:	2604      	movs	r6, #4
    4672:	2500      	movs	r5, #0
    light(s, 4, CRGB(4, 0, 0));
    4674:	4620      	mov	r0, r4
    4676:	f8ad 6004 	strh.w	r6, [sp, #4]
    467a:	f88d 5006 	strb.w	r5, [sp, #6]
  for (int s = 1; s <= maxX; s++) {
    467e:	3401      	adds	r4, #1
    light(s, 4, CRGB(4, 0, 0));
    4680:	9a01      	ldr	r2, [sp, #4]
    4682:	2104      	movs	r1, #4
    4684:	f7ff fc66 	bl	3f54 <light(int, int, CRGB)>
  for (int s = 1; s <= maxX; s++) {
    4688:	2c11      	cmp	r4, #17
    468a:	d1f3      	bne.n	4674 <displaySample(int)+0xac>
  for (int s = 1; s <= skip; s++) {
    468c:	2f00      	cmp	r7, #0
    468e:	dd0f      	ble.n	46b0 <displaySample(int)+0xe8>
    4690:	2401      	movs	r4, #1
    4692:	f44f 6680 	mov.w	r6, #1024	; 0x400
    4696:	2500      	movs	r5, #0
    light(s, 4, CRGB(0, 4, 0));
    4698:	4620      	mov	r0, r4
    469a:	f8ad 6004 	strh.w	r6, [sp, #4]
    469e:	f88d 5006 	strb.w	r5, [sp, #6]
  for (int s = 1; s <= skip; s++) {
    46a2:	3401      	adds	r4, #1
    light(s, 4, CRGB(0, 4, 0));
    46a4:	9a01      	ldr	r2, [sp, #4]
    46a6:	2104      	movs	r1, #4
    46a8:	f7ff fc54 	bl	3f54 <light(int, int, CRGB)>
  for (int s = 1; s <= skip; s++) {
    46ac:	42a7      	cmp	r7, r4
    46ae:	daf3      	bge.n	4698 <displaySample(int)+0xd0>
    46b0:	480c      	ldr	r0, [pc, #48]	; (46e4 <displaySample(int)+0x11c>)
    46b2:	7801      	ldrb	r1, [r0, #0]
}
    46b4:	b002      	add	sp, #8
    46b6:	ecbd 8b02 	vpop	{d8}
    46ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    46be:	f006 bb3b 	b.w	ad38 <CFastLED::show(unsigned char)>
    46c2:	bf00      	nop
    46c4:	f3af 8000 	nop.w
    46c8:	00000000 	.word	0x00000000
    46cc:	41344b00 	.word	0x41344b00
	...
    46dc:	40460000 	.word	0x40460000
    46e0:	20003294 	.word	0x20003294
    46e4:	200045e8 	.word	0x200045e8

000046e8 <checkPositions()>:
void checkPositions() {
    46e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46ec:	4c28      	ldr	r4, [pc, #160]	; (4790 <checkPositions()+0xa8>)
    46ee:	4d29      	ldr	r5, [pc, #164]	; (4794 <checkPositions()+0xac>)
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, 16);
    46f0:	4e29      	ldr	r6, [pc, #164]	; (4798 <checkPositions()+0xb0>)
    46f2:	4627      	mov	r7, r4
  if (currentMode != &set_Wav) {
    46f4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 47a8 <checkPositions()+0xc0>
    46f8:	f105 0810 	add.w	r8, r5, #16
		if (interrupts_in_use < 2) {
    46fc:	7e23      	ldrb	r3, [r4, #24]
    46fe:	2b01      	cmp	r3, #1
    4700:	d941      	bls.n	4786 <checkPositions()+0x9e>
			noInterrupts();
    4702:	b672      	cpsid	i
		int32_t ret = encoder.position;
    4704:	6962      	ldr	r2, [r4, #20]
		interrupts();
    4706:	b662      	cpsie	i
    if (currentEncoderValue != previousEncoderValues[i]) {
    4708:	f855 cb04 	ldr.w	ip, [r5], #4
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, 16);
    470c:	2300      	movs	r3, #0
    470e:	2101      	movs	r1, #1
    4710:	4638      	mov	r0, r7
    if (currentEncoderValue != previousEncoderValues[i]) {
    4712:	4594      	cmp	ip, r2
  for (int i = 0; i < 4; i++) {
    4714:	f104 041c 	add.w	r4, r4, #28
    if (currentEncoderValue != previousEncoderValues[i]) {
    4718:	d031      	beq.n	477e <checkPositions()+0x96>
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, 16);
    471a:	6832      	ldr	r2, [r6, #0]
    471c:	6a12      	ldr	r2, [r2, #32]
    471e:	f7ff fe8b 	bl	4438 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    4722:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    4726:	f8d6 c000 	ldr.w	ip, [r6]
      currentMode->pos[1] = mapAndClampEncoderValue(encoders[1], 1, currentMode->maxValues[1], 1);
    472a:	2301      	movs	r3, #1
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, 16);
    472c:	ee17 0a90 	vmov	r0, s15
  if (currentMode != &set_Wav) {
    4730:	45cc      	cmp	ip, r9
      currentMode->pos[1] = mapAndClampEncoderValue(encoders[1], 1, currentMode->maxValues[1], 1);
    4732:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
    4736:	4619      	mov	r1, r3
    return maxValue - (encoderValue - minValue);
    4738:	bf18      	it	ne
    473a:	f1c0 0011 	rsbne	r0, r0, #17
      currentMode->pos[0] = reverseMapEncoderValue(mapAndClampEncoderValue(encoders[0], 1, currentMode->maxValues[0], 0), 1, 16);
    473e:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
      currentMode->pos[1] = mapAndClampEncoderValue(encoders[1], 1, currentMode->maxValues[1], 1);
    4742:	4816      	ldr	r0, [pc, #88]	; (479c <checkPositions()+0xb4>)
    4744:	f7ff fe78 	bl	4438 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    4748:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    474c:	6831      	ldr	r1, [r6, #0]
      currentMode->pos[2] = mapAndClampEncoderValue(encoders[2], 1, currentMode->maxValues[2], 2);
    474e:	2302      	movs	r3, #2
    4750:	4813      	ldr	r0, [pc, #76]	; (47a0 <checkPositions()+0xb8>)
    4752:	6a8a      	ldr	r2, [r1, #40]	; 0x28
      currentMode->pos[1] = mapAndClampEncoderValue(encoders[1], 1, currentMode->maxValues[1], 1);
    4754:	ed81 0a0d 	vstr	s0, [r1, #52]	; 0x34
      currentMode->pos[2] = mapAndClampEncoderValue(encoders[2], 1, currentMode->maxValues[2], 2);
    4758:	2101      	movs	r1, #1
    475a:	f7ff fe6d 	bl	4438 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    475e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    4762:	6831      	ldr	r1, [r6, #0]
      currentMode->pos[3] = mapAndClampEncoderValue(encoders[3], 1, currentMode->maxValues[3], 3); // mitte rechts
    4764:	2303      	movs	r3, #3
    4766:	480f      	ldr	r0, [pc, #60]	; (47a4 <checkPositions()+0xbc>)
    4768:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      currentMode->pos[2] = mapAndClampEncoderValue(encoders[2], 1, currentMode->maxValues[2], 2);
    476a:	ed81 0a0e 	vstr	s0, [r1, #56]	; 0x38
      currentMode->pos[3] = mapAndClampEncoderValue(encoders[3], 1, currentMode->maxValues[3], 3); // mitte rechts
    476e:	2101      	movs	r1, #1
    4770:	f7ff fe62 	bl	4438 <mapAndClampEncoderValue(Encoder&, int, int, int)>
    4774:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    4778:	6833      	ldr	r3, [r6, #0]
    477a:	ed83 0a0f 	vstr	s0, [r3, #60]	; 0x3c
  for (int i = 0; i < 4; i++) {
    477e:	4545      	cmp	r5, r8
    4780:	d1bc      	bne.n	46fc <checkPositions()+0x14>
}
    4782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			noInterrupts();
    4786:	b672      	cpsid	i
			update(&encoder);
    4788:	4620      	mov	r0, r4
    478a:	f7fe fc4f 	bl	302c <Encoder::update(Encoder_internal_state_t*)>
    478e:	e7b9      	b.n	4704 <checkPositions()+0x1c>
    4790:	200067ec 	.word	0x200067ec
    4794:	2000b988 	.word	0x2000b988
    4798:	200038c8 	.word	0x200038c8
    479c:	20006808 	.word	0x20006808
    47a0:	20006824 	.word	0x20006824
    47a4:	20006840 	.word	0x20006840
    47a8:	20003c10 	.word	0x20003c10

000047ac <canvas(bool, int)>:
void canvas(bool singleview, int channel) {
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	b094      	sub	sp, #80	; 0x50
  String posString = "Y:" + String(currentMode->pos[0]) + " X:" + String(currentMode->pos[2]) + " Page:" + String(currentMode->pos[1]);  
    47b0:	4c66      	ldr	r4, [pc, #408]	; (494c <canvas(bool, int)+0x1a0>)
	StringSumHelper(const char *p) : String(p) {}
    47b2:	4967      	ldr	r1, [pc, #412]	; (4950 <canvas(bool, int)+0x1a4>)
    47b4:	a808      	add	r0, sp, #32
    47b6:	f011 f8d7 	bl	15968 <String::String(char const*)>
    47ba:	6823      	ldr	r3, [r4, #0]
    47bc:	220a      	movs	r2, #10
    47be:	a804      	add	r0, sp, #16
    47c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    47c2:	f011 f8e5 	bl	15990 <String::String(int, unsigned char)>
    47c6:	a904      	add	r1, sp, #16
    47c8:	a808      	add	r0, sp, #32
    47ca:	f011 f987 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    47ce:	4961      	ldr	r1, [pc, #388]	; (4954 <canvas(bool, int)+0x1a8>)
    47d0:	f011 f98c 	bl	15aec <operator+(StringSumHelper const&, char const*)>
    47d4:	6823      	ldr	r3, [r4, #0]
    47d6:	4605      	mov	r5, r0
    47d8:	220a      	movs	r2, #10
    47da:	6b99      	ldr	r1, [r3, #56]	; 0x38
    47dc:	a80c      	add	r0, sp, #48	; 0x30
    47de:	f011 f8d7 	bl	15990 <String::String(int, unsigned char)>
    47e2:	a90c      	add	r1, sp, #48	; 0x30
    47e4:	4628      	mov	r0, r5
    47e6:	f011 f979 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    47ea:	495b      	ldr	r1, [pc, #364]	; (4958 <canvas(bool, int)+0x1ac>)
    47ec:	f011 f97e 	bl	15aec <operator+(StringSumHelper const&, char const*)>
    47f0:	6823      	ldr	r3, [r4, #0]
    47f2:	4605      	mov	r5, r0
    47f4:	220a      	movs	r2, #10
    47f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    47f8:	a810      	add	r0, sp, #64	; 0x40
    47fa:	f011 f8c9 	bl	15990 <String::String(int, unsigned char)>
    47fe:	a910      	add	r1, sp, #64	; 0x40
    4800:	4628      	mov	r0, r5
    4802:	f011 f96b 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    4806:	4601      	mov	r1, r0
    4808:	4668      	mov	r0, sp
    480a:	f011 f853 	bl	158b4 <String::String(String const&)>
    480e:	a810      	add	r0, sp, #64	; 0x40
    4810:	f011 f86e 	bl	158f0 <String::~String()>
    4814:	a80c      	add	r0, sp, #48	; 0x30
    4816:	f011 f86b 	bl	158f0 <String::~String()>
    481a:	a804      	add	r0, sp, #16
    481c:	f011 f868 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    4820:	a808      	add	r0, sp, #32
    4822:	f011 f865 	bl	158f0 <String::~String()>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    4826:	494d      	ldr	r1, [pc, #308]	; (495c <canvas(bool, int)+0x1b0>)
    4828:	4668      	mov	r0, sp
    482a:	f011 f96d 	bl	15b08 <String::equals(String const&) const>
  if (posString != oldPos) {
    482e:	b120      	cbz	r0, 483a <canvas(bool, int)+0x8e>
}
    4830:	4668      	mov	r0, sp
    4832:	f011 f85d 	bl	158f0 <String::~String()>
    4836:	b014      	add	sp, #80	; 0x50
    4838:	bd70      	pop	{r4, r5, r6, pc}
    oldPos = posString;
    483a:	4669      	mov	r1, sp
    483c:	4847      	ldr	r0, [pc, #284]	; (495c <canvas(bool, int)+0x1b0>)
    483e:	f011 f8f3 	bl	15a28 <String::operator=(String const&)>
    SMP.x = currentMode->pos[2];
    4842:	6823      	ldr	r3, [r4, #0]
    4844:	4d46      	ldr	r5, [pc, #280]	; (4960 <canvas(bool, int)+0x1b4>)
	StringSumHelper(const char *p) : String(p) {}
    4846:	a810      	add	r0, sp, #64	; 0x40
    4848:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    SMP.y = currentMode->pos[0];
    484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    484c:	4945      	ldr	r1, [pc, #276]	; (4964 <canvas(bool, int)+0x1b8>)
    SMP.x = currentMode->pos[2];
    484e:	632a      	str	r2, [r5, #48]	; 0x30
    SMP.y = currentMode->pos[0];
    4850:	636b      	str	r3, [r5, #52]	; 0x34
    4852:	f011 f889 	bl	15968 <String::String(char const*)>
    Serial.println("vel: " + String(note[SMP.x][SMP.y][1]));
    4856:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    4858:	a80c      	add	r0, sp, #48	; 0x30
    485a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    485c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    4860:	4e41      	ldr	r6, [pc, #260]	; (4968 <canvas(bool, int)+0x1bc>)
    4862:	4413      	add	r3, r2
    4864:	220a      	movs	r2, #10
    4866:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
    486a:	6859      	ldr	r1, [r3, #4]
    486c:	f011 f8a8 	bl	159c0 <String::String(unsigned int, unsigned char)>
    4870:	a90c      	add	r1, sp, #48	; 0x30
    4872:	a810      	add	r0, sp, #64	; 0x40
    4874:	f011 f932 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    4878:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    487a:	483c      	ldr	r0, [pc, #240]	; (496c <canvas(bool, int)+0x1c0>)
    487c:	f010 fec8 	bl	15610 <Print::print(String const&)>
    4880:	483a      	ldr	r0, [pc, #232]	; (496c <canvas(bool, int)+0x1c0>)
    4882:	f010 fef7 	bl	15674 <Print::println()>
    4886:	a80c      	add	r0, sp, #48	; 0x30
    4888:	f011 f832 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    488c:	a810      	add	r0, sp, #64	; 0x40
    488e:	f011 f82f 	bl	158f0 <String::~String()>
    if (paintMode) { note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.y - 1; }
    4892:	4b37      	ldr	r3, [pc, #220]	; (4970 <canvas(bool, int)+0x1c4>)
    if (paintMode && currentMode == &singleMode) { note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.currentChannel; }
    4894:	6821      	ldr	r1, [r4, #0]
    if (paintMode) { note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.y - 1; }
    4896:	681b      	ldr	r3, [r3, #0]
    4898:	69aa      	ldr	r2, [r5, #24]
    489a:	b16b      	cbz	r3, 48b8 <canvas(bool, int)+0x10c>
    489c:	1e54      	subs	r4, r2, #1
    489e:	e9d5 300c 	ldrd	r3, r0, [r5, #48]	; 0x30
    48a2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    48a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    48aa:	4403      	add	r3, r0
    48ac:	3801      	subs	r0, #1
    48ae:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
    if (paintMode && currentMode == &singleMode) { note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.currentChannel; }
    48b2:	4830      	ldr	r0, [pc, #192]	; (4974 <canvas(bool, int)+0x1c8>)
    48b4:	4281      	cmp	r1, r0
    48b6:	d040      	beq.n	493a <canvas(bool, int)+0x18e>
    if (unpaintMode) {
    48b8:	4b2f      	ldr	r3, [pc, #188]	; (4978 <canvas(bool, int)+0x1cc>)
    48ba:	681b      	ldr	r3, [r3, #0]
    48bc:	b17b      	cbz	r3, 48de <canvas(bool, int)+0x132>
      if (SMP.singleMode) {
    48be:	6828      	ldr	r0, [r5, #0]
    48c0:	2800      	cmp	r0, #0
    48c2:	d02f      	beq.n	4924 <canvas(bool, int)+0x178>
        if (note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] == SMP.currentChannel) note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = 0;
    48c4:	1e50      	subs	r0, r2, #1
    48c6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    48c8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
    48cc:	6b68      	ldr	r0, [r5, #52]	; 0x34
    48ce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    48d2:	4403      	add	r3, r0
    48d4:	6868      	ldr	r0, [r5, #4]
    48d6:	f856 4033 	ldr.w	r4, [r6, r3, lsl #3]
    48da:	4284      	cmp	r4, r0
    48dc:	d031      	beq.n	4942 <canvas(bool, int)+0x196>
    int editpage = currentMode->pos[1];
    48de:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    if (editpage != SMP.edit && editpage <= lastPage) {
    48e0:	429a      	cmp	r2, r3
    48e2:	d0a5      	beq.n	4830 <canvas(bool, int)+0x84>
    48e4:	4a25      	ldr	r2, [pc, #148]	; (497c <canvas(bool, int)+0x1d0>)
    48e6:	6812      	ldr	r2, [r2, #0]
    48e8:	4293      	cmp	r3, r2
    48ea:	d8a1      	bhi.n	4830 <canvas(bool, int)+0x84>
	StringSumHelper(const char *p) : String(p) {}
    48ec:	4924      	ldr	r1, [pc, #144]	; (4980 <canvas(bool, int)+0x1d4>)
    48ee:	a810      	add	r0, sp, #64	; 0x40
      SMP.edit = editpage;
    48f0:	61ab      	str	r3, [r5, #24]
    48f2:	f011 f839 	bl	15968 <String::String(char const*)>
      Serial.println("p:" + String(SMP.edit));
    48f6:	220a      	movs	r2, #10
    48f8:	69a9      	ldr	r1, [r5, #24]
    48fa:	a80c      	add	r0, sp, #48	; 0x30
    48fc:	f011 f848 	bl	15990 <String::String(int, unsigned char)>
    4900:	a90c      	add	r1, sp, #48	; 0x30
    4902:	a810      	add	r0, sp, #64	; 0x40
    4904:	f011 f8ea 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    4908:	4601      	mov	r1, r0
    490a:	4818      	ldr	r0, [pc, #96]	; (496c <canvas(bool, int)+0x1c0>)
    490c:	f010 fe80 	bl	15610 <Print::print(String const&)>
    4910:	4816      	ldr	r0, [pc, #88]	; (496c <canvas(bool, int)+0x1c0>)
    4912:	f010 feaf 	bl	15674 <Print::println()>
    4916:	a80c      	add	r0, sp, #48	; 0x30
    4918:	f010 ffea 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    491c:	a810      	add	r0, sp, #64	; 0x40
    491e:	f010 ffe7 	bl	158f0 <String::~String()>
    4922:	e785      	b.n	4830 <canvas(bool, int)+0x84>
        note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = 0;
    4924:	1e54      	subs	r4, r2, #1
    4926:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    4928:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    492c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
    492e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    4932:	4423      	add	r3, r4
    4934:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
    4938:	e7d1      	b.n	48de <canvas(bool, int)+0x132>
    if (paintMode && currentMode == &singleMode) { note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = SMP.currentChannel; }
    493a:	6868      	ldr	r0, [r5, #4]
    493c:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
    4940:	e7ba      	b.n	48b8 <canvas(bool, int)+0x10c>
        if (note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] == SMP.currentChannel) note[(SMP.edit - 1) * maxX + SMP.x][SMP.y][0] = 0;
    4942:	2000      	movs	r0, #0
    4944:	f846 0033 	str.w	r0, [r6, r3, lsl #3]
    4948:	e7c9      	b.n	48de <canvas(bool, int)+0x132>
    494a:	bf00      	nop
    494c:	200038c8 	.word	0x200038c8
    4950:	20000a50 	.word	0x20000a50
    4954:	20000a54 	.word	0x20000a54
    4958:	20000a58 	.word	0x20000a58
    495c:	2000b678 	.word	0x2000b678
    4960:	20003294 	.word	0x20003294
    4964:	20000a60 	.word	0x20000a60
    4968:	200071b8 	.word	0x200071b8
    496c:	20003314 	.word	0x20003314
    4970:	2000b68c 	.word	0x2000b68c
    4974:	20003c50 	.word	0x20003c50
    4978:	2000c538 	.word	0x2000c538
    497c:	20003b28 	.word	0x20003b28
    4980:	20000a68 	.word	0x20000a68

00004984 <toggleCopyPaste()>:
void toggleCopyPaste() {
    4984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!SMP.activeCopy) {
    4988:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 4a78 <toggleCopyPaste()+0xf4>
void toggleCopyPaste() {
    498c:	b083      	sub	sp, #12
  if (!SMP.activeCopy) {
    498e:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
    4992:	2b00      	cmp	r3, #0
    4994:	d143      	bne.n	4a1e <toggleCopyPaste()+0x9a>
    4996:	2108      	movs	r1, #8
    4998:	4831      	ldr	r0, [pc, #196]	; (4a60 <toggleCopyPaste()+0xdc>)
    499a:	f013 fd9b 	bl	184d4 <usb_serial_write>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {  //maxy?
    499e:	f8d9 3018 	ldr.w	r3, [r9, #24]
    49a2:	4a30      	ldr	r2, [pc, #192]	; (4a64 <toggleCopyPaste()+0xe0>)
    49a4:	011b      	lsls	r3, r3, #4
    49a6:	4930      	ldr	r1, [pc, #192]	; (4a68 <toggleCopyPaste()+0xe4>)
	size_t print(int n)				{ return print((long)n); }
    49a8:	4e30      	ldr	r6, [pc, #192]	; (4a6c <toggleCopyPaste()+0xe8>)
    49aa:	f1a3 070f 	sub.w	r7, r3, #15
    49ae:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 4a7c <toggleCopyPaste()+0xf8>
    49b2:	9101      	str	r1, [sp, #4]
    49b4:	eb07 1307 	add.w	r3, r7, r7, lsl #4
    49b8:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
void toggleCopyPaste() {
    49bc:	f8dd b004 	ldr.w	fp, [sp, #4]
    49c0:	4655      	mov	r5, sl
      for (int y = 1; y < maxY + 1; y++) {
    49c2:	2401      	movs	r4, #1
    49c4:	4639      	mov	r1, r7
    49c6:	4630      	mov	r0, r6
    49c8:	f010 fe48 	bl	1565c <Print::print(long)>
    49cc:	2101      	movs	r1, #1
    49ce:	4640      	mov	r0, r8
    49d0:	3508      	adds	r5, #8
    49d2:	f013 fd7f 	bl	184d4 <usb_serial_write>
    49d6:	4621      	mov	r1, r4
    49d8:	4630      	mov	r0, r6
    49da:	3401      	adds	r4, #1
    49dc:	f010 fe3e 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    49e0:	4630      	mov	r0, r6
    49e2:	f010 fe47 	bl	15674 <Print::println()>
    49e6:	f10b 0b08 	add.w	fp, fp, #8
    49ea:	2c11      	cmp	r4, #17
          tmp[src][y][b] = note[c][y][b];
    49ec:	e9d5 1200 	ldrd	r1, r2, [r5]
    49f0:	e9cb 1200 	strd	r1, r2, [fp]
      for (int y = 1; y < maxY + 1; y++) {
    49f4:	d1e6      	bne.n	49c4 <toggleCopyPaste()+0x40>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {  //maxy?
    49f6:	9a01      	ldr	r2, [sp, #4]
    49f8:	3701      	adds	r7, #1
    49fa:	f8d9 3018 	ldr.w	r3, [r9, #24]
    49fe:	f10a 0a88 	add.w	sl, sl, #136	; 0x88
    4a02:	3288      	adds	r2, #136	; 0x88
    4a04:	ebb7 1f03 	cmp.w	r7, r3, lsl #4
    4a08:	9201      	str	r2, [sp, #4]
    4a0a:	ddd7      	ble.n	49bc <toggleCopyPaste()+0x38>
  SMP.activeCopy = !SMP.activeCopy;  // Toggle the boolean value
    4a0c:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
    4a10:	f083 0301 	eor.w	r3, r3, #1
    4a14:	f889 302c 	strb.w	r3, [r9, #44]	; 0x2c
}
    4a18:	b003      	add	sp, #12
    4a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4a1e:	210b      	movs	r1, #11
    4a20:	4813      	ldr	r0, [pc, #76]	; (4a70 <toggleCopyPaste()+0xec>)
    4a22:	f013 fd57 	bl	184d4 <usb_serial_write>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4a26:	f8d9 3018 	ldr.w	r3, [r9, #24]
    4a2a:	4d0e      	ldr	r5, [pc, #56]	; (4a64 <toggleCopyPaste()+0xe0>)
    4a2c:	011b      	lsls	r3, r3, #4
    4a2e:	4c11      	ldr	r4, [pc, #68]	; (4a74 <toggleCopyPaste()+0xf0>)
    4a30:	3b0f      	subs	r3, #15
    4a32:	f504 6608 	add.w	r6, r4, #2176	; 0x880
    4a36:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    4a3a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
      for (int y = 1; y < maxY + 1; y++) {
    4a3e:	f1a4 0380 	sub.w	r3, r4, #128	; 0x80
      for (int y = 1; y < maxY + 1; y++) {
    4a42:	462a      	mov	r2, r5
      for (int y = 1; y < maxY + 1; y++) {
    4a44:	3208      	adds	r2, #8
          note[c][y][b] = tmp[src][y][b];
    4a46:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
      for (int y = 1; y < maxY + 1; y++) {
    4a4a:	3308      	adds	r3, #8
    4a4c:	42a3      	cmp	r3, r4
          note[c][y][b] = tmp[src][y][b];
    4a4e:	e9c2 0100 	strd	r0, r1, [r2]
      for (int y = 1; y < maxY + 1; y++) {
    4a52:	d1f7      	bne.n	4a44 <toggleCopyPaste()+0xc0>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4a54:	3488      	adds	r4, #136	; 0x88
    4a56:	3588      	adds	r5, #136	; 0x88
    4a58:	42b4      	cmp	r4, r6
    4a5a:	d1f0      	bne.n	4a3e <toggleCopyPaste()+0xba>
    4a5c:	e7d6      	b.n	4a0c <toggleCopyPaste()+0x88>
    4a5e:	bf00      	nop
    4a60:	200009c0 	.word	0x200009c0
    4a64:	200071b8 	.word	0x200071b8
    4a68:	2000bcb4 	.word	0x2000bcb4
    4a6c:	20003314 	.word	0x20003314
    4a70:	200009d0 	.word	0x200009d0
    4a74:	2000bd34 	.word	0x2000bd34
    4a78:	20003294 	.word	0x20003294
    4a7c:	200009cc 	.word	0x200009cc

00004a80 <clearPage()>:
  if (SMP.singleMode) {
    4a80:	4823      	ldr	r0, [pc, #140]	; (4b10 <clearPage()+0x90>)
    4a82:	6801      	ldr	r1, [r0, #0]
void clearPage() {
    4a84:	b430      	push	{r4, r5}
  if (SMP.singleMode) {
    4a86:	b331      	cbz	r1, 4ad6 <clearPage()+0x56>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4a88:	6982      	ldr	r2, [r0, #24]
        if (note[c][y][0] == SMP.currentChannel) note[c][y][0] = 0;
    4a8a:	2500      	movs	r5, #0
    4a8c:	6841      	ldr	r1, [r0, #4]
        if (note[c][y][0] == SMP.currentChannel) note[c][y][1] = 63;
    4a8e:	243f      	movs	r4, #63	; 0x3f
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4a90:	3a01      	subs	r2, #1
    4a92:	4b20      	ldr	r3, [pc, #128]	; (4b14 <clearPage()+0x94>)
    4a94:	0112      	lsls	r2, r2, #4
    4a96:	1c50      	adds	r0, r2, #1
    4a98:	3210      	adds	r2, #16
    4a9a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    4a9e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    4aa2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    4aa6:	3388      	adds	r3, #136	; 0x88
    4aa8:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
    4aac:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
    4ab0:	e002      	b.n	4ab8 <clearPage()+0x38>
      for (int y = 1; y < maxY + 1; y++) {
    4ab2:	3308      	adds	r3, #8
    4ab4:	4283      	cmp	r3, r0
    4ab6:	d009      	beq.n	4acc <clearPage()+0x4c>
        if (note[c][y][0] == SMP.currentChannel) note[c][y][0] = 0;
    4ab8:	689a      	ldr	r2, [r3, #8]
    4aba:	428a      	cmp	r2, r1
    4abc:	d1f9      	bne.n	4ab2 <clearPage()+0x32>
    4abe:	609d      	str	r5, [r3, #8]
        if (note[c][y][0] == SMP.currentChannel) note[c][y][1] = 63;
    4ac0:	2900      	cmp	r1, #0
    4ac2:	d1f6      	bne.n	4ab2 <clearPage()+0x32>
    4ac4:	60dc      	str	r4, [r3, #12]
      for (int y = 1; y < maxY + 1; y++) {
    4ac6:	3308      	adds	r3, #8
    4ac8:	4283      	cmp	r3, r0
    4aca:	d1f5      	bne.n	4ab8 <clearPage()+0x38>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4acc:	3088      	adds	r0, #136	; 0x88
    4ace:	4560      	cmp	r0, ip
    4ad0:	d1ec      	bne.n	4aac <clearPage()+0x2c>
}
    4ad2:	bc30      	pop	{r4, r5}
    4ad4:	4770      	bx	lr
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4ad6:	6980      	ldr	r0, [r0, #24]
    4ad8:	4b0e      	ldr	r3, [pc, #56]	; (4b14 <clearPage()+0x94>)
    4ada:	3801      	subs	r0, #1
    4adc:	0100      	lsls	r0, r0, #4
    4ade:	1c42      	adds	r2, r0, #1
    4ae0:	3010      	adds	r0, #16
    4ae2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
    4ae6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
    4aea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    4aee:	3388      	adds	r3, #136	; 0x88
    4af0:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
        note[c][y][1] = 63;
    4af4:	203f      	movs	r0, #63	; 0x3f
    4af6:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
    4afa:	e9c3 1002 	strd	r1, r0, [r3, #8]
      for (int y = 1; y < maxY + 1; y++) {
    4afe:	3308      	adds	r3, #8
    4b00:	4293      	cmp	r3, r2
    4b02:	d1fa      	bne.n	4afa <clearPage()+0x7a>
    for (int c = ((SMP.edit - 1) * maxX) + 1; c < ((SMP.edit - 1) * maxX) + (maxX + 1); c++) {
    4b04:	3288      	adds	r2, #136	; 0x88
    4b06:	42a2      	cmp	r2, r4
    4b08:	d1f5      	bne.n	4af6 <clearPage()+0x76>
}
    4b0a:	bc30      	pop	{r4, r5}
    4b0c:	4770      	bx	lr
    4b0e:	bf00      	nop
    4b10:	20003294 	.word	0x20003294
    4b14:	20007238 	.word	0x20007238

00004b18 <drawVolume(int)>:




void drawVolume(int vol) {
    4b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b1c:	4603      	mov	r3, r0
    4b1e:	b085      	sub	sp, #20
  FastLED.clear();
    4b20:	2100      	movs	r1, #0
    4b22:	483f      	ldr	r0, [pc, #252]	; (4c20 <drawVolume(int)+0x108>)
void drawVolume(int vol) {
    4b24:	9301      	str	r3, [sp, #4]
  FastLED.clear();
    4b26:	f006 fa31 	bl	af8c <CFastLED::clear(bool)>
    4b2a:	f04f 0c01 	mov.w	ip, #1
    4b2e:	4e3d      	ldr	r6, [pc, #244]	; (4c24 <drawVolume(int)+0x10c>)
    4b30:	f04f 0e03 	mov.w	lr, #3
      leds[(x - 1) + (maxX * (y - 1))] = color;
    4b34:	f04f 0900 	mov.w	r9, #0
  FastLEDclear();

  for (int y = 1; y < 15; y++) {
    4b38:	4667      	mov	r7, ip
      leds[(x - 1) + (maxX * (y - 1))] = color;
    4b3a:	f04f 0802 	mov.w	r8, #2
  for (int y = 1; y < 15; y++) {
    4b3e:	3701      	adds	r7, #1
    4b40:	2f0f      	cmp	r7, #15
    4b42:	d02c      	beq.n	4b9e <drawVolume(int)+0x86>
    4b44:	2302      	movs	r3, #2
    4b46:	4634      	mov	r4, r6
    4b48:	4630      	mov	r0, r6
    4b4a:	eb0c 0503 	add.w	r5, ip, r3
    4b4e:	f10c 0c01 	add.w	ip, ip, #1
    4b52:	e00a      	b.n	4b6a <drawVolume(int)+0x52>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    4b54:	f800 1c2a 	strb.w	r1, [r0, #-42]
    4b58:	f800 1c29 	strb.w	r1, [r0, #-41]
    4b5c:	f800 8c28 	strb.w	r8, [r0, #-40]
    for (int x = 1; x < y; x++) {
    4b60:	3301      	adds	r3, #1
    4b62:	382d      	subs	r0, #45	; 0x2d
    4b64:	3c33      	subs	r4, #51	; 0x33
    4b66:	4573      	cmp	r3, lr
    4b68:	d013      	beq.n	4b92 <drawVolume(int)+0x7a>
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    4b6a:	ebac 0203 	sub.w	r2, ip, r3
    4b6e:	1ae9      	subs	r1, r5, r3
    4b70:	2a0f      	cmp	r2, #15
    4b72:	d8f5      	bhi.n	4b60 <drawVolume(int)+0x48>
    if (y % 2 == 0) {
    4b74:	f011 0101 	ands.w	r1, r1, #1
    4b78:	d0ec      	beq.n	4b54 <drawVolume(int)+0x3c>
    for (int x = 1; x < y; x++) {
    4b7a:	3301      	adds	r3, #1
      leds[(x - 1) + (maxX * (y - 1))] = color;
    4b7c:	f804 9c09 	strb.w	r9, [r4, #-9]
    4b80:	f804 9c08 	strb.w	r9, [r4, #-8]
    for (int x = 1; x < y; x++) {
    4b84:	382d      	subs	r0, #45	; 0x2d
    4b86:	4573      	cmp	r3, lr
      leds[(x - 1) + (maxX * (y - 1))] = color;
    4b88:	f804 8c07 	strb.w	r8, [r4, #-7]
    for (int x = 1; x < y; x++) {
    4b8c:	f1a4 0433 	sub.w	r4, r4, #51	; 0x33
    4b90:	d1eb      	bne.n	4b6a <drawVolume(int)+0x52>
  for (int y = 1; y < 15; y++) {
    4b92:	3701      	adds	r7, #1
    4b94:	f10e 0e01 	add.w	lr, lr, #1
    4b98:	3630      	adds	r6, #48	; 0x30
    4b9a:	2f0f      	cmp	r7, #15
    4b9c:	d1d2      	bne.n	4b44 <drawVolume(int)+0x2c>
      light(15 - x, y - x, CRGB(0, 0, 2));
    }
  }

  for (int y = 1; y < int(vol * 1.3) + 2; y++) {
    4b9e:	eddd 7a01 	vldr	s15, [sp, #4]
    4ba2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 4c18 <drawVolume(int)+0x100>
    4ba6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    4baa:	ee27 7b06 	vmul.f64	d7, d7, d6
    4bae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    4bb2:	ee17 9a90 	vmov	r9, s15
    4bb6:	f1b9 0f00 	cmp.w	r9, #0
    4bba:	db24      	blt.n	4c06 <drawVolume(int)+0xee>
    for (int x = 1; x < y; x++) {
      light(int(vol * 1.3) + 2 - x, y - x, CRGB(vol * vol, 20 - vol, 0));
    4bbc:	f89d 3004 	ldrb.w	r3, [sp, #4]
    4bc0:	2401      	movs	r4, #1
    4bc2:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
    4bc6:	f04f 0a00 	mov.w	sl, #0
    4bca:	fb13 f703 	smulbb	r7, r3, r3
  for (int y = 1; y < int(vol * 1.3) + 2; y++) {
    4bce:	454c      	cmp	r4, r9
      light(int(vol * 1.3) + 2 - x, y - x, CRGB(vol * vol, 20 - vol, 0));
    4bd0:	f1c3 0314 	rsb	r3, r3, #20
    4bd4:	b2ff      	uxtb	r7, r7
    4bd6:	b2dd      	uxtb	r5, r3
  for (int y = 1; y < int(vol * 1.3) + 2; y++) {
    4bd8:	dc15      	bgt.n	4c06 <drawVolume(int)+0xee>
    for (int x = 1; x < y; x++) {
    4bda:	f104 0b01 	add.w	fp, r4, #1
    4bde:	f108 0601 	add.w	r6, r8, #1
    4be2:	f88d 700c 	strb.w	r7, [sp, #12]
      light(int(vol * 1.3) + 2 - x, y - x, CRGB(vol * vol, 20 - vol, 0));
    4be6:	4621      	mov	r1, r4
    4be8:	f88d 500d 	strb.w	r5, [sp, #13]
    4bec:	1930      	adds	r0, r6, r4
    4bee:	f88d a00e 	strb.w	sl, [sp, #14]
    4bf2:	9a03      	ldr	r2, [sp, #12]
    4bf4:	f7ff f9ae 	bl	3f54 <light(int, int, CRGB)>
    for (int x = 1; x < y; x++) {
    4bf8:	3c01      	subs	r4, #1
    4bfa:	d1f2      	bne.n	4be2 <drawVolume(int)+0xca>
    4bfc:	465c      	mov	r4, fp
  for (int y = 1; y < int(vol * 1.3) + 2; y++) {
    4bfe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    4c02:	454c      	cmp	r4, r9
    4c04:	dde9      	ble.n	4bda <drawVolume(int)+0xc2>
    4c06:	4806      	ldr	r0, [pc, #24]	; (4c20 <drawVolume(int)+0x108>)
    4c08:	7801      	ldrb	r1, [r0, #0]
    }
  }
  FastLEDshow();
}
    4c0a:	b005      	add	sp, #20
    4c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c10:	f006 b892 	b.w	ad38 <CFastLED::show(unsigned char)>
    4c14:	f3af 8000 	nop.w
    4c18:	cccccccd 	.word	0xcccccccd
    4c1c:	3ff4cccc 	.word	0x3ff4cccc
    4c20:	200045e8 	.word	0x200045e8
    4c24:	20006c20 	.word	0x20006c20

00004c28 <savePack()>:
  }
  FastLEDshow();
  switchMode(&draw);
}

void savePack() {
    4c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c2c:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
  Serial.println("Saving SamplePack in #" + String(SMP.pack));
    4c30:	4c48      	ldr	r4, [pc, #288]	; (4d54 <savePack()+0x12c>)
	StringSumHelper(const char *p) : String(p) {}
    4c32:	4949      	ldr	r1, [pc, #292]	; (4d58 <savePack()+0x130>)
    4c34:	a81c      	add	r0, sp, #112	; 0x70
   * \param[in] pFlag Create missing parent directories if true.
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char *path, bool pFlag = true) {
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    4c36:	f8df b138 	ldr.w	fp, [pc, #312]	; 4d70 <savePack()+0x148>
    4c3a:	f010 fe95 	bl	15968 <String::String(char const*)>
    4c3e:	220a      	movs	r2, #10
    4c40:	6a21      	ldr	r1, [r4, #32]
    4c42:	a80f      	add	r0, sp, #60	; 0x3c
    4c44:	f010 fea4 	bl	15990 <String::String(int, unsigned char)>
    4c48:	a90f      	add	r1, sp, #60	; 0x3c
    4c4a:	a81c      	add	r0, sp, #112	; 0x70
    4c4c:	f010 ff46 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    4c50:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    4c52:	4842      	ldr	r0, [pc, #264]	; (4d5c <savePack()+0x134>)
    4c54:	f010 fcdc 	bl	15610 <Print::print(String const&)>
    4c58:	4840      	ldr	r0, [pc, #256]	; (4d5c <savePack()+0x134>)
    4c5a:	f010 fd0b 	bl	15674 <Print::println()>
    4c5e:	a80f      	add	r0, sp, #60	; 0x3c
    4c60:	f010 fe46 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    4c64:	a81c      	add	r0, sp, #112	; 0x70
    4c66:	f010 fe43 	bl	158f0 <String::~String()>
  FastLED.clear();
    4c6a:	2100      	movs	r1, #0
    4c6c:	483c      	ldr	r0, [pc, #240]	; (4d60 <savePack()+0x138>)
    4c6e:	f006 f98d 	bl	af8c <CFastLED::clear(bool)>
  FastLEDclear();
  char OUTPUTdir[50];
  sprintf(OUTPUTdir, "%d/", SMP.pack);
    4c72:	6a22      	ldr	r2, [r4, #32]
    4c74:	493b      	ldr	r1, [pc, #236]	; (4d64 <savePack()+0x13c>)
    4c76:	a802      	add	r0, sp, #8
    4c78:	f01c ff86 	bl	21b88 <sprintf>
    4c7c:	f8db 3484 	ldr.w	r3, [fp, #1156]	; 0x484
    4c80:	2b00      	cmp	r3, #0
    4c82:	f000 81d5 	beq.w	5030 <savePack()+0x408>
   *
   * \return true for success or false for failure.
   */
  bool mkdir(const char* path, bool pFlag = true) {
    FatFile sub;
    return sub.mkdir(vwd(), path, pFlag);
    4c86:	f503 6189 	add.w	r1, r3, #1096	; 0x448
  FatFile() {}
    4c8a:	2300      	movs	r3, #0
    4c8c:	aa02      	add	r2, sp, #8
    4c8e:	a81c      	add	r0, sp, #112	; 0x70
    4c90:	931c      	str	r3, [sp, #112]	; 0x70
    4c92:	2301      	movs	r3, #1
    4c94:	f00a fd78 	bl	f788 <FatFile::mkdir(FatFile*, char const*, bool)>
  SD.mkdir(OUTPUTdir);
  delay(1000);
    4c98:	4e33      	ldr	r6, [pc, #204]	; (4d68 <savePack()+0x140>)
    4c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4c9e:	f011 f8f9 	bl	15e94 <delay>
  for (int i = 0; i < sizeof(usedFiles) / sizeof(usedFiles[0]); i++) {
    4ca2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 4d74 <savePack()+0x14c>
    4ca6:	0073      	lsls	r3, r6, #1
    4ca8:	2500      	movs	r5, #0
    4caa:	4f2d      	ldr	r7, [pc, #180]	; (4d60 <savePack()+0x138>)
    4cac:	2414      	movs	r4, #20
    4cae:	46b0      	mov	r8, r6
    4cb0:	9300      	str	r3, [sp, #0]

    for (int f = 1; f < (maxY / 2) + 1; f++) {
      light(i + 1, f, CRGB(20, 0, 0));
    4cb2:	3501      	adds	r5, #1
    for (int f = 1; f < (maxY / 2) + 1; f++) {
    4cb4:	f04f 0a01 	mov.w	sl, #1
    4cb8:	2600      	movs	r6, #0
      light(i + 1, f, CRGB(20, 0, 0));
    4cba:	4651      	mov	r1, sl
    4cbc:	f8ad 4070 	strh.w	r4, [sp, #112]	; 0x70
    4cc0:	f88d 6072 	strb.w	r6, [sp, #114]	; 0x72
    for (int f = 1; f < (maxY / 2) + 1; f++) {
    4cc4:	f10a 0a01 	add.w	sl, sl, #1
      light(i + 1, f, CRGB(20, 0, 0));
    4cc8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4cca:	4628      	mov	r0, r5
    4ccc:	f7ff f942 	bl	3f54 <light(int, int, CRGB)>
    for (int f = 1; f < (maxY / 2) + 1; f++) {
    4cd0:	f1ba 0f09 	cmp.w	sl, #9
    4cd4:	d1f1      	bne.n	4cba <savePack()+0x92>
    4cd6:	7839      	ldrb	r1, [r7, #0]
    4cd8:	4638      	mov	r0, r7
    4cda:	f006 f82d 	bl	ad38 <CFastLED::show(unsigned char)>
		if (!buffer) return &zerotermination; // https://forum.pjrc.com/threads/63842
    4cde:	f8d9 2000 	ldr.w	r2, [r9]
    4ce2:	2a00      	cmp	r2, #0
    4ce4:	f000 814c 	beq.w	4f80 <savePack()+0x358>
    return m_fVol ? m_fVol->exists(path) :
    4ce8:	f8db 3484 	ldr.w	r3, [fp, #1156]	; 0x484
    4cec:	2b00      	cmp	r3, #0
    4cee:	d043      	beq.n	4d78 <savePack()+0x150>
    return tmp.open(this, path, O_RDONLY);
    4cf0:	4619      	mov	r1, r3
    4cf2:	2300      	movs	r3, #0
    4cf4:	a81c      	add	r0, sp, #112	; 0x70
    4cf6:	931c      	str	r3, [sp, #112]	; 0x70
    4cf8:	f00a fe3e 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    }
    FastLEDshow();



    if (SD.exists(usedFiles[i].c_str())) {
    4cfc:	2800      	cmp	r0, #0
    4cfe:	d145      	bne.n	4d8c <savePack()+0x164>
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    4d00:	9b00      	ldr	r3, [sp, #0]
    4d02:	4642      	mov	r2, r8
      leds[(x - 1) + (maxX * (y - 1))] = color;
    4d04:	2600      	movs	r6, #0
    4d06:	eba3 0108 	sub.w	r1, r3, r8
    4d0a:	2301      	movs	r3, #1
    if (y % 2 == 0) {
    4d0c:	f013 0001 	ands.w	r0, r3, #1
    4d10:	d11b      	bne.n	4d4a <savePack()+0x122>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    4d12:	f882 002d 	strb.w	r0, [r2, #45]	; 0x2d
    4d16:	f882 402e 	strb.w	r4, [r2, #46]	; 0x2e
    4d1a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
      }
      myDestFile.close();
      myOrigFile.close();
    }

    for (int f = 1; f < (maxY + 1) + 1; f++) {
    4d1e:	3301      	adds	r3, #1
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    4d20:	3230      	adds	r2, #48	; 0x30
    4d22:	3130      	adds	r1, #48	; 0x30
    4d24:	2b11      	cmp	r3, #17
    4d26:	d1f1      	bne.n	4d0c <savePack()+0xe4>
    4d28:	7839      	ldrb	r1, [r7, #0]
    4d2a:	4638      	mov	r0, r7
    4d2c:	f006 f804 	bl	ad38 <CFastLED::show(unsigned char)>
  for (int i = 0; i < sizeof(usedFiles) / sizeof(usedFiles[0]); i++) {
    4d30:	2d0d      	cmp	r5, #13
    4d32:	f1a8 0803 	sub.w	r8, r8, #3
    4d36:	f109 0910 	add.w	r9, r9, #16
    4d3a:	d1ba      	bne.n	4cb2 <savePack()+0x8a>
    FastLEDshow();
  }



  switchMode(&draw);
    4d3c:	480b      	ldr	r0, [pc, #44]	; (4d6c <savePack()+0x144>)
    4d3e:	f7ff fb57 	bl	43f0 <switchMode(Mode*)>
}
    4d42:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
    4d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      leds[(x - 1) + (maxX * (y - 1))] = color;
    4d4a:	700e      	strb	r6, [r1, #0]
    4d4c:	704c      	strb	r4, [r1, #1]
    4d4e:	708e      	strb	r6, [r1, #2]
    4d50:	e7e5      	b.n	4d1e <savePack()+0xf6>
    4d52:	bf00      	nop
    4d54:	20003294 	.word	0x20003294
    4d58:	20000b30 	.word	0x20000b30
    4d5c:	20003314 	.word	0x20003314
    4d60:	200045e8 	.word	0x200045e8
    4d64:	20000b48 	.word	0x20000b48
    4d68:	20006bf0 	.word	0x20006bf0
    4d6c:	200038e4 	.word	0x200038e4
    4d70:	200045f8 	.word	0x200045f8
    4d74:	2000c6c4 	.word	0x2000c6c4
    4d78:	f8db 1488 	ldr.w	r1, [fp, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    4d7c:	2900      	cmp	r1, #0
    4d7e:	d0bf      	beq.n	4d00 <savePack()+0xd8>
   *
   * \return true if the file exists else false.
   */
  bool exists(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_RDONLY);
    4d80:	a81c      	add	r0, sp, #112	; 0x70
  ExFatFile() {}
    4d82:	9328      	str	r3, [sp, #160]	; 0xa0
    4d84:	f008 ff16 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4d88:	2800      	cmp	r0, #0
    4d8a:	d0b9      	beq.n	4d00 <savePack()+0xd8>
    4d8c:	f8d9 2000 	ldr.w	r2, [r9]
    4d90:	2a00      	cmp	r2, #0
    4d92:	f000 811f 	beq.w	4fd4 <savePack()+0x3ac>
    4d96:	2300      	movs	r3, #0
    4d98:	499b      	ldr	r1, [pc, #620]	; (5008 <savePack()+0x3e0>)
    4d9a:	a81c      	add	r0, sp, #112	; 0x70
    4d9c:	f00d f816 	bl	11dcc <FsVolume::open(char const*, int)>
    4da0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    4da2:	2b00      	cmp	r3, #0
    4da4:	f000 810f 	beq.w	4fc6 <savePack()+0x39e>
		if (file) return File(new SDFile(file));
    4da8:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    4daa:	2600      	movs	r6, #0
    4dac:	f011 fc90 	bl	166d0 <operator new(unsigned int)>
class Print
    4db0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    4db2:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
    4db6:	4603      	mov	r3, r0
    4db8:	60c2      	str	r2, [r0, #12]
    4dba:	3018      	adds	r0, #24
class Stream : public Print
    4dbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    4dbe:	4651      	mov	r1, sl
    4dc0:	f840 6c14 	str.w	r6, [r0, #-20]
    4dc4:	f840 2c08 	str.w	r2, [r0, #-8]
    4dc8:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
    4dcc:	9301      	str	r3, [sp, #4]
    4dce:	f800 2c04 	strb.w	r2, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    4dd2:	4a8e      	ldr	r2, [pc, #568]	; (500c <savePack()+0x3e4>)
    4dd4:	f840 2c18 	str.w	r2, [r0, #-24]
    4dd8:	4a8d      	ldr	r2, [pc, #564]	; (5010 <savePack()+0x3e8>)
    4dda:	f840 2c10 	str.w	r2, [r0, #-16]
    4dde:	f00c fe99 	bl	11b14 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
    4de2:	9b01      	ldr	r3, [sp, #4]
		if (f) f->refcount++;
    4de4:	685a      	ldr	r2, [r3, #4]
    4de6:	659e      	str	r6, [r3, #88]	; 0x58
    4de8:	3201      	adds	r2, #1
    4dea:	605a      	str	r2, [r3, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4dec:	4a89      	ldr	r2, [pc, #548]	; (5014 <savePack()+0x3ec>)
    4dee:	609a      	str	r2, [r3, #8]
    4df0:	9301      	str	r3, [sp, #4]
  ~FsBaseFile() {close();}
    4df2:	4650      	mov	r0, sl
    4df4:	4b88      	ldr	r3, [pc, #544]	; (5018 <savePack()+0x3f0>)
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    4df6:	4e89      	ldr	r6, [pc, #548]	; (501c <savePack()+0x3f4>)
    4df8:	931c      	str	r3, [sp, #112]	; 0x70
    4dfa:	f00c fecd 	bl	11b98 <FsBaseFile::close()>
    4dfe:	6930      	ldr	r0, [r6, #16]
    4e00:	9b01      	ldr	r3, [sp, #4]
    4e02:	b168      	cbz	r0, 4e20 <savePack()+0x1f8>
		if (--(f->refcount) == 0) {
    4e04:	6842      	ldr	r2, [r0, #4]
    4e06:	3a01      	subs	r2, #1
    4e08:	6042      	str	r2, [r0, #4]
    4e0a:	b94a      	cbnz	r2, 4e20 <savePack()+0x1f8>
			f->close();
    4e0c:	6802      	ldr	r2, [r0, #0]
    4e0e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4e10:	4790      	blx	r2
			delete f;
    4e12:	6930      	ldr	r0, [r6, #16]
    4e14:	9b01      	ldr	r3, [sp, #4]
    4e16:	b118      	cbz	r0, 4e20 <savePack()+0x1f8>
    4e18:	6802      	ldr	r2, [r0, #0]
    4e1a:	6852      	ldr	r2, [r2, #4]
    4e1c:	4790      	blx	r2
    4e1e:	9b01      	ldr	r3, [sp, #4]
      sprintf(OUTPUTf, "%d/%d.wav", SMP.pack, i + 1);
    4e20:	4a7f      	ldr	r2, [pc, #508]	; (5020 <savePack()+0x3f8>)
    4e22:	a80f      	add	r0, sp, #60	; 0x3c
		f = file.f;
    4e24:	6133      	str	r3, [r6, #16]
    4e26:	462b      	mov	r3, r5
    4e28:	6a12      	ldr	r2, [r2, #32]
    4e2a:	497e      	ldr	r1, [pc, #504]	; (5024 <savePack()+0x3fc>)
    4e2c:	f01c feac 	bl	21b88 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    4e30:	f8db 3484 	ldr.w	r3, [fp, #1156]	; 0x484
    4e34:	2b00      	cmp	r3, #0
    4e36:	f000 80a5 	beq.w	4f84 <savePack()+0x35c>
    4e3a:	4619      	mov	r1, r3
    4e3c:	2300      	movs	r3, #0
    4e3e:	aa0f      	add	r2, sp, #60	; 0x3c
    4e40:	a81c      	add	r0, sp, #112	; 0x70
    4e42:	931c      	str	r3, [sp, #112]	; 0x70
    4e44:	f00a fd98 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
      if (SD.exists(OUTPUTf)) {
    4e48:	2800      	cmp	r0, #0
    4e4a:	f040 80a8 	bne.w	4f9e <savePack()+0x376>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    4e4e:	f244 2302 	movw	r3, #16898	; 0x4202
    4e52:	aa0f      	add	r2, sp, #60	; 0x3c
    4e54:	496c      	ldr	r1, [pc, #432]	; (5008 <savePack()+0x3e0>)
    4e56:	a81c      	add	r0, sp, #112	; 0x70
    4e58:	f00c ffb8 	bl	11dcc <FsVolume::open(char const*, int)>
  bool isOpen() const {return m_fFile || m_xFile;}
    4e5c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    4e5e:	2b00      	cmp	r3, #0
    4e60:	f000 80ac 	beq.w	4fbc <savePack()+0x394>
		if (file) return File(new SDFile(file));
    4e64:	205c      	movs	r0, #92	; 0x5c
    4e66:	f011 fc33 	bl	166d0 <operator new(unsigned int)>
    4e6a:	991d      	ldr	r1, [sp, #116]	; 0x74
class FileImpl {
    4e6c:	2200      	movs	r2, #0
    4e6e:	4603      	mov	r3, r0
    4e70:	60c1      	str	r1, [r0, #12]
    4e72:	3018      	adds	r0, #24
    4e74:	991e      	ldr	r1, [sp, #120]	; 0x78
    4e76:	f840 2c14 	str.w	r2, [r0, #-20]
    4e7a:	f840 1c08 	str.w	r1, [r0, #-8]
    4e7e:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
    4e82:	9301      	str	r3, [sp, #4]
    4e84:	f800 1c04 	strb.w	r1, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    4e88:	4960      	ldr	r1, [pc, #384]	; (500c <savePack()+0x3e4>)
    4e8a:	f840 1c18 	str.w	r1, [r0, #-24]
    4e8e:	4960      	ldr	r1, [pc, #384]	; (5010 <savePack()+0x3e8>)
    4e90:	f840 1c10 	str.w	r1, [r0, #-16]
    4e94:	4651      	mov	r1, sl
    4e96:	f00c fe3d 	bl	11b14 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
    4e9a:	9b01      	ldr	r3, [sp, #4]
    4e9c:	2200      	movs	r2, #0
    4e9e:	659a      	str	r2, [r3, #88]	; 0x58
		if (f) f->refcount++;
    4ea0:	685a      	ldr	r2, [r3, #4]
    4ea2:	3201      	adds	r2, #1
    4ea4:	605a      	str	r2, [r3, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    4ea6:	4a5b      	ldr	r2, [pc, #364]	; (5014 <savePack()+0x3ec>)
    4ea8:	609a      	str	r2, [r3, #8]
  ~FsBaseFile() {close();}
    4eaa:	4650      	mov	r0, sl
    4eac:	9301      	str	r3, [sp, #4]
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    4eae:	f8df a17c 	ldr.w	sl, [pc, #380]	; 502c <savePack()+0x404>
    4eb2:	4b59      	ldr	r3, [pc, #356]	; (5018 <savePack()+0x3f0>)
    4eb4:	931c      	str	r3, [sp, #112]	; 0x70
    4eb6:	f00c fe6f 	bl	11b98 <FsBaseFile::close()>
    4eba:	f8da 0010 	ldr.w	r0, [sl, #16]
    4ebe:	9b01      	ldr	r3, [sp, #4]
    4ec0:	b170      	cbz	r0, 4ee0 <savePack()+0x2b8>
		if (--(f->refcount) == 0) {
    4ec2:	6842      	ldr	r2, [r0, #4]
    4ec4:	3a01      	subs	r2, #1
    4ec6:	6042      	str	r2, [r0, #4]
    4ec8:	b952      	cbnz	r2, 4ee0 <savePack()+0x2b8>
			f->close();
    4eca:	6802      	ldr	r2, [r0, #0]
    4ecc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4ece:	4790      	blx	r2
			delete f;
    4ed0:	f8da 0010 	ldr.w	r0, [sl, #16]
    4ed4:	9b01      	ldr	r3, [sp, #4]
    4ed6:	b118      	cbz	r0, 4ee0 <savePack()+0x2b8>
    4ed8:	6802      	ldr	r2, [r0, #0]
    4eda:	6852      	ldr	r2, [r2, #4]
    4edc:	4790      	blx	r2
    4ede:	9b01      	ldr	r3, [sp, #4]
		f = file.f;
    4ee0:	f8ca 3010 	str.w	r3, [sl, #16]
      while ((n = myOrigFile.read(buf, sizeof(buf))) > 0) {
    4ee4:	6933      	ldr	r3, [r6, #16]
		return (f) ? f->read(buf, nbyte) : 0;
    4ee6:	f44f 7200 	mov.w	r2, #512	; 0x200
    4eea:	a91c      	add	r1, sp, #112	; 0x70
    4eec:	4618      	mov	r0, r3
    4eee:	b1b3      	cbz	r3, 4f1e <savePack()+0x2f6>
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	689b      	ldr	r3, [r3, #8]
    4ef4:	4798      	blx	r3
		return (f) ? f->write((void*)buf, size) : 0;
    4ef6:	a91c      	add	r1, sp, #112	; 0x70
    4ef8:	4602      	mov	r2, r0
    4efa:	2800      	cmp	r0, #0
    4efc:	f000 80a6 	beq.w	504c <savePack()+0x424>
    4f00:	f8da 3010 	ldr.w	r3, [sl, #16]
    4f04:	4618      	mov	r0, r3
    4f06:	2b00      	cmp	r3, #0
    4f08:	d0ec      	beq.n	4ee4 <savePack()+0x2bc>
    4f0a:	681b      	ldr	r3, [r3, #0]
    4f0c:	68db      	ldr	r3, [r3, #12]
    4f0e:	4798      	blx	r3
    4f10:	6933      	ldr	r3, [r6, #16]
		return (f) ? f->read(buf, nbyte) : 0;
    4f12:	f44f 7200 	mov.w	r2, #512	; 0x200
    4f16:	a91c      	add	r1, sp, #112	; 0x70
    4f18:	4618      	mov	r0, r3
    4f1a:	2b00      	cmp	r3, #0
    4f1c:	d1e8      	bne.n	4ef0 <savePack()+0x2c8>
		if (f) {
    4f1e:	f8da 0010 	ldr.w	r0, [sl, #16]
    4f22:	2800      	cmp	r0, #0
    4f24:	f43f aeec 	beq.w	4d00 <savePack()+0xd8>
			f->close();
    4f28:	6803      	ldr	r3, [r0, #0]
    4f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f2c:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    4f2e:	f8da 0010 	ldr.w	r0, [sl, #16]
    4f32:	6843      	ldr	r3, [r0, #4]
    4f34:	3b01      	subs	r3, #1
    4f36:	6043      	str	r3, [r0, #4]
    4f38:	b943      	cbnz	r3, 4f4c <savePack()+0x324>
			f->close();
    4f3a:	6803      	ldr	r3, [r0, #0]
    4f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f3e:	4798      	blx	r3
			delete f;
    4f40:	f8da 0010 	ldr.w	r0, [sl, #16]
    4f44:	b110      	cbz	r0, 4f4c <savePack()+0x324>
    4f46:	6803      	ldr	r3, [r0, #0]
    4f48:	685b      	ldr	r3, [r3, #4]
    4f4a:	4798      	blx	r3
		f = nullptr;
    4f4c:	2300      	movs	r3, #0
    4f4e:	f8ca 3010 	str.w	r3, [sl, #16]
		if (f) {
    4f52:	6930      	ldr	r0, [r6, #16]
    4f54:	2800      	cmp	r0, #0
    4f56:	f43f aed3 	beq.w	4d00 <savePack()+0xd8>
			f->close();
    4f5a:	6803      	ldr	r3, [r0, #0]
    4f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f5e:	4798      	blx	r3
		if (--(f->refcount) == 0) {
    4f60:	6930      	ldr	r0, [r6, #16]
    4f62:	6843      	ldr	r3, [r0, #4]
    4f64:	3b01      	subs	r3, #1
    4f66:	6043      	str	r3, [r0, #4]
    4f68:	b93b      	cbnz	r3, 4f7a <savePack()+0x352>
			f->close();
    4f6a:	6803      	ldr	r3, [r0, #0]
    4f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4f6e:	4798      	blx	r3
			delete f;
    4f70:	6930      	ldr	r0, [r6, #16]
    4f72:	b110      	cbz	r0, 4f7a <savePack()+0x352>
    4f74:	6803      	ldr	r3, [r0, #0]
    4f76:	685b      	ldr	r3, [r3, #4]
    4f78:	4798      	blx	r3
		f = nullptr;
    4f7a:	2300      	movs	r3, #0
    4f7c:	6133      	str	r3, [r6, #16]
	}
    4f7e:	e6bf      	b.n	4d00 <savePack()+0xd8>
    4f80:	4a29      	ldr	r2, [pc, #164]	; (5028 <savePack()+0x400>)
    4f82:	e6b1      	b.n	4ce8 <savePack()+0xc0>
    4f84:	f8db 1488 	ldr.w	r1, [fp, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    4f88:	2900      	cmp	r1, #0
    4f8a:	f43f af60 	beq.w	4e4e <savePack()+0x226>
    4f8e:	aa0f      	add	r2, sp, #60	; 0x3c
    4f90:	a81c      	add	r0, sp, #112	; 0x70
    4f92:	9328      	str	r3, [sp, #160]	; 0xa0
    4f94:	f008 fe0e 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4f98:	2800      	cmp	r0, #0
    4f9a:	f43f af58 	beq.w	4e4e <savePack()+0x226>
  * \param[in] path A path with a valid 8.3 DOS name for the file.
  *
   * \return true for success or false for failure.
  */
  bool remove(const char *path) {
    return m_fVol ? m_fVol->remove(path) :
    4f9e:	f8db 1484 	ldr.w	r1, [fp, #1156]	; 0x484
    4fa2:	b1c9      	cbz	r1, 4fd8 <savePack()+0x3b0>
    4fa4:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    FatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4fa6:	aa0f      	add	r2, sp, #60	; 0x3c
    4fa8:	a81c      	add	r0, sp, #112	; 0x70
    4faa:	931c      	str	r3, [sp, #112]	; 0x70
    4fac:	2301      	movs	r3, #1
    4fae:	f00a fce3 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    4fb2:	bb10      	cbnz	r0, 4ffa <savePack()+0x3d2>
        delay(100);
    4fb4:	2064      	movs	r0, #100	; 0x64
    4fb6:	f010 ff6d 	bl	15e94 <delay>
    4fba:	e748      	b.n	4e4e <savePack()+0x226>
  bool isOpen() const {return m_fFile || m_xFile;}
    4fbc:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	f47f af50 	bne.w	4e64 <savePack()+0x23c>
    4fc4:	e771      	b.n	4eaa <savePack()+0x282>
    4fc6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    4fc8:	2b00      	cmp	r3, #0
    4fca:	f47f aeed 	bne.w	4da8 <savePack()+0x180>
    4fce:	f10d 0a80 	add.w	sl, sp, #128	; 0x80
    4fd2:	e70d      	b.n	4df0 <savePack()+0x1c8>
    4fd4:	4a14      	ldr	r2, [pc, #80]	; (5028 <savePack()+0x400>)
    4fd6:	e6de      	b.n	4d96 <savePack()+0x16e>
    4fd8:	f8db 3488 	ldr.w	r3, [fp, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    4fdc:	2b00      	cmp	r3, #0
    4fde:	d0e9      	beq.n	4fb4 <savePack()+0x38c>
    4fe0:	9128      	str	r1, [sp, #160]	; 0xa0
   *
   * \return true for success or false for failure.
   */
  bool remove(const char* path) {
    ExFatFile tmp;
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    4fe2:	aa0f      	add	r2, sp, #60	; 0x3c
    4fe4:	4619      	mov	r1, r3
    4fe6:	a81c      	add	r0, sp, #112	; 0x70
    4fe8:	2301      	movs	r3, #1
    4fea:	f008 fde3 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    4fee:	2800      	cmp	r0, #0
    4ff0:	d0e0      	beq.n	4fb4 <savePack()+0x38c>
    4ff2:	a81c      	add	r0, sp, #112	; 0x70
    4ff4:	f008 fe42 	bl	dc7c <ExFatFile::remove()>
    4ff8:	e7dc      	b.n	4fb4 <savePack()+0x38c>
    4ffa:	a81c      	add	r0, sp, #112	; 0x70
    4ffc:	f00b fdc2 	bl	10b84 <FatFile::remove()>
    5000:	2064      	movs	r0, #100	; 0x64
    5002:	f010 ff47 	bl	15e94 <delay>
    5006:	e722      	b.n	4e4e <savePack()+0x226>
    5008:	200045fc 	.word	0x200045fc
    500c:	20001524 	.word	0x20001524
    5010:	20001580 	.word	0x20001580
    5014:	20001500 	.word	0x20001500
    5018:	20001378 	.word	0x20001378
    501c:	20003b94 	.word	0x20003b94
    5020:	20003294 	.word	0x20003294
    5024:	20000b4c 	.word	0x20000b4c
    5028:	20003164 	.word	0x20003164
    502c:	20003b6c 	.word	0x20003b6c
    5030:	f8db 1488 	ldr.w	r1, [fp, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    5034:	2900      	cmp	r1, #0
    5036:	f43f ae2f 	beq.w	4c98 <savePack()+0x70>
    503a:	9328      	str	r3, [sp, #160]	; 0xa0
    return sub.mkdir(vwd(), path, pFlag);
    503c:	aa02      	add	r2, sp, #8
    503e:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    5042:	2301      	movs	r3, #1
    5044:	a81c      	add	r0, sp, #112	; 0x70
    5046:	f009 f849 	bl	e0dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    504a:	e625      	b.n	4c98 <savePack()+0x70>
		if (f) {
    504c:	f8da 0010 	ldr.w	r0, [sl, #16]
    5050:	2800      	cmp	r0, #0
    5052:	f47f af69 	bne.w	4f28 <savePack()+0x300>
    5056:	e77c      	b.n	4f52 <savePack()+0x32a>

00005058 <showNumber(int, CRGB, int)>:
  FastLEDshow();
}



void showNumber(int count, CRGB color, int topY) {
    5058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    505c:	b2cf      	uxtb	r7, r1
    505e:	b087      	sub	sp, #28
    5060:	4616      	mov	r6, r2
    5062:	f3c1 2907 	ubfx	r9, r1, #8, #8
    5066:	4602      	mov	r2, r0
    5068:	f3c1 4807 	ubfx	r8, r1, #16, #8
    506c:	9103      	str	r1, [sp, #12]
        return r || g || b;
    506e:	b917      	cbnz	r7, 5076 <showNumber(int, CRGB, int)+0x1e>
    5070:	f1b9 0f00 	cmp.w	r9, #0
    5074:	d060      	beq.n	5138 <showNumber(int, CRGB, int)+0xe0>
  if (!color) color = CRGB(20, 20, 20);
  char buf[4];
  sprintf(buf, "%03i", count);
    5076:	4934      	ldr	r1, [pc, #208]	; (5148 <showNumber(int, CRGB, int)+0xf0>)
    5078:	a805      	add	r0, sp, #20
    507a:	f01c fd85 	bl	21b88 <sprintf>
  int stelle2 = buf[0] - '0';
    507e:	f89d a014 	ldrb.w	sl, [sp, #20]
  int stelle1 = buf[1] - '0';
    5082:	f89d 3015 	ldrb.w	r3, [sp, #21]
  int stelle0 = buf[2] - '0';

  int ypos = maxY - topY;
    5086:	f1c6 0610 	rsb	r6, r6, #16
  int stelle2 = buf[0] - '0';
    508a:	f1aa 0130 	sub.w	r1, sl, #48	; 0x30
    508e:	4d2f      	ldr	r5, [pc, #188]	; (514c <showNumber(int, CRGB, int)+0xf4>)
  int stelle1 = buf[1] - '0';
    5090:	3b30      	subs	r3, #48	; 0x30
  int stelle0 = buf[2] - '0';
    5092:	f89d 4016 	ldrb.w	r4, [sp, #22]
    5096:	f105 0bc0 	add.w	fp, r5, #192	; 0xc0
  int stelle2 = buf[0] - '0';
    509a:	9101      	str	r1, [sp, #4]
  int stelle1 = buf[1] - '0';
    509c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    50a0:	9302      	str	r3, [sp, #8]
  for (int gx = 0; gx < 24; gx++) {
    50a2:	eb01 0341 	add.w	r3, r1, r1, lsl #1
  int stelle0 = buf[2] - '0';
    50a6:	3c30      	subs	r4, #48	; 0x30
    50a8:	eb0b 1b82 	add.w	fp, fp, r2, lsl #6
    50ac:	eb05 1a83 	add.w	sl, r5, r3, lsl #6
    50b0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    50b4:	4653      	mov	r3, sl
    50b6:	46ba      	mov	sl, r7
    50b8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    50bc:	461f      	mov	r7, r3
    50be:	eb05 1582 	add.w	r5, r5, r2, lsl #6
    50c2:	e014      	b.n	50ee <showNumber(int, CRGB, int)+0x96>
    if (stelle2 > 0) light(1 + number[stelle2][gx][0], ypos - number[stelle2][gx][1], color);
    if ((stelle1 > 0 || stelle2 > 0)) light(6 + number[stelle1][gx][0], ypos - number[stelle1][gx][1], color);
    50c4:	9b02      	ldr	r3, [sp, #8]
    50c6:	2b00      	cmp	r3, #0
    50c8:	dc21      	bgt.n	510e <showNumber(int, CRGB, int)+0xb6>
    light(11 + number[stelle0][gx][0], ypos - number[stelle0][gx][1], color);
    50ca:	f88d a00c 	strb.w	sl, [sp, #12]
  for (int gx = 0; gx < 24; gx++) {
    50ce:	3508      	adds	r5, #8
    light(11 + number[stelle0][gx][0], ypos - number[stelle0][gx][1], color);
    50d0:	f88d 900d 	strb.w	r9, [sp, #13]
  for (int gx = 0; gx < 24; gx++) {
    50d4:	3708      	adds	r7, #8
    light(11 + number[stelle0][gx][0], ypos - number[stelle0][gx][1], color);
    50d6:	f88d 800e 	strb.w	r8, [sp, #14]
    50da:	9a03      	ldr	r2, [sp, #12]
    50dc:	e9d4 0100 	ldrd	r0, r1, [r4]
  for (int gx = 0; gx < 24; gx++) {
    50e0:	3408      	adds	r4, #8
    light(11 + number[stelle0][gx][0], ypos - number[stelle0][gx][1], color);
    50e2:	1a71      	subs	r1, r6, r1
    50e4:	300b      	adds	r0, #11
    50e6:	f7fe ff35 	bl	3f54 <light(int, int, CRGB)>
  for (int gx = 0; gx < 24; gx++) {
    50ea:	455d      	cmp	r5, fp
    50ec:	d01d      	beq.n	512a <showNumber(int, CRGB, int)+0xd2>
    if (stelle2 > 0) light(1 + number[stelle2][gx][0], ypos - number[stelle2][gx][1], color);
    50ee:	9b01      	ldr	r3, [sp, #4]
    50f0:	2b00      	cmp	r3, #0
    50f2:	dde7      	ble.n	50c4 <showNumber(int, CRGB, int)+0x6c>
    50f4:	f88d a00c 	strb.w	sl, [sp, #12]
    50f8:	f88d 900d 	strb.w	r9, [sp, #13]
    50fc:	f88d 800e 	strb.w	r8, [sp, #14]
    5100:	9a03      	ldr	r2, [sp, #12]
    5102:	e9d7 0100 	ldrd	r0, r1, [r7]
    5106:	1a71      	subs	r1, r6, r1
    5108:	3001      	adds	r0, #1
    510a:	f7fe ff23 	bl	3f54 <light(int, int, CRGB)>
    if ((stelle1 > 0 || stelle2 > 0)) light(6 + number[stelle1][gx][0], ypos - number[stelle1][gx][1], color);
    510e:	f88d a00c 	strb.w	sl, [sp, #12]
    5112:	f88d 900d 	strb.w	r9, [sp, #13]
    5116:	f88d 800e 	strb.w	r8, [sp, #14]
    511a:	9a03      	ldr	r2, [sp, #12]
    511c:	e9d5 0100 	ldrd	r0, r1, [r5]
    5120:	1a71      	subs	r1, r6, r1
    5122:	3006      	adds	r0, #6
    5124:	f7fe ff16 	bl	3f54 <light(int, int, CRGB)>
    5128:	e7cf      	b.n	50ca <showNumber(int, CRGB, int)+0x72>
    512a:	4809      	ldr	r0, [pc, #36]	; (5150 <showNumber(int, CRGB, int)+0xf8>)
    512c:	7801      	ldrb	r1, [r0, #0]
    512e:	f005 fe03 	bl	ad38 <CFastLED::show(unsigned char)>
  }
  FastLEDshow();
}
    5132:	b007      	add	sp, #28
    5134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5138:	f1b8 0f00 	cmp.w	r8, #0
    513c:	d19b      	bne.n	5076 <showNumber(int, CRGB, int)+0x1e>
  if (!color) color = CRGB(20, 20, 20);
    513e:	f04f 0814 	mov.w	r8, #20
    5142:	46c1      	mov	r9, r8
    5144:	4647      	mov	r7, r8
    5146:	e796      	b.n	5076 <showNumber(int, CRGB, int)+0x1e>
    5148:	20000910 	.word	0x20000910
    514c:	600022f4 	.word	0x600022f4
    5150:	200045e8 	.word	0x200045e8

00005154 <showIntro()>:
void showIntro() {
    5154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  FastLED.clear();
    5158:	4c4e      	ldr	r4, [pc, #312]	; (5294 <showIntro()+0x140>)
void showIntro() {
    515a:	b082      	sub	sp, #8
  FastLED.clear();
    515c:	2100      	movs	r1, #0
    515e:	4d4e      	ldr	r5, [pc, #312]	; (5298 <showIntro()+0x144>)
    5160:	4620      	mov	r0, r4
        : r(ir), g(ig), b(ib)
    5162:	f243 2732 	movw	r7, #12850	; 0x3232
    5166:	f005 ff11 	bl	af8c <CFastLED::clear(bool)>
    516a:	7821      	ldrb	r1, [r4, #0]
    516c:	4620      	mov	r0, r4
    516e:	f505 7810 	add.w	r8, r5, #576	; 0x240
    5172:	f005 fde1 	bl	ad38 <CFastLED::show(unsigned char)>
    5176:	2102      	movs	r1, #2
    5178:	2632      	movs	r6, #50	; 0x32
    517a:	4608      	mov	r0, r1
    517c:	e001      	b.n	5182 <showIntro()+0x2e>
    light(logo[gx][0], maxY - logo[gx][1], CRGB(50, 50, 50));
    517e:	e955 0102 	ldrd	r0, r1, [r5, #-8]
    5182:	f8ad 7004 	strh.w	r7, [sp, #4]
    5186:	f1c1 0110 	rsb	r1, r1, #16
    518a:	f88d 6006 	strb.w	r6, [sp, #6]
  for (int gx = 0; gx < 72; gx++) {
    518e:	3508      	adds	r5, #8
    light(logo[gx][0], maxY - logo[gx][1], CRGB(50, 50, 50));
    5190:	9a01      	ldr	r2, [sp, #4]
    5192:	f7fe fedf 	bl	3f54 <light(int, int, CRGB)>
    5196:	7821      	ldrb	r1, [r4, #0]
    5198:	4620      	mov	r0, r4
    519a:	f005 fdcd 	bl	ad38 <CFastLED::show(unsigned char)>
    delay(10);
    519e:	200a      	movs	r0, #10
    51a0:	f010 fe78 	bl	15e94 <delay>
  for (int gx = 0; gx < 72; gx++) {
    51a4:	45a8      	cmp	r8, r5
    51a6:	d1ea      	bne.n	517e <showIntro()+0x2a>
  delay(200);
    51a8:	20c8      	movs	r0, #200	; 0xc8
    51aa:	f44f 7680 	mov.w	r6, #256	; 0x100
    51ae:	4f3b      	ldr	r7, [pc, #236]	; (529c <showIntro()+0x148>)
    51b0:	4d38      	ldr	r5, [pc, #224]	; (5294 <showIntro()+0x140>)
    51b2:	f010 fe6f 	bl	15e94 <delay>
    for (int u = 0; u < NUM_LEDS; u++) {
    51b6:	4b3a      	ldr	r3, [pc, #232]	; (52a0 <showIntro()+0x14c>)
LIB8STATIC void nscale8x3( uint8_t& r, uint8_t& g, uint8_t& b, fract8 scale)
{
#if SCALE8_C == 1
#if (FASTLED_SCALE8_FIXED == 1)
    uint16_t scale_fixed = scale + 1;
    r = (((uint16_t)r) * scale_fixed) >> 8;
    51b8:	7818      	ldrb	r0, [r3, #0]
    51ba:	3303      	adds	r3, #3
    g = (((uint16_t)g) * scale_fixed) >> 8;
    51bc:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    51c0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    r = (((uint16_t)r) * scale_fixed) >> 8;
    51c4:	fb06 f000 	mul.w	r0, r6, r0
    g = (((uint16_t)g) * scale_fixed) >> 8;
    51c8:	fb06 f101 	mul.w	r1, r6, r1
    51cc:	429f      	cmp	r7, r3
    b = (((uint16_t)b) * scale_fixed) >> 8;
    51ce:	fb06 f202 	mul.w	r2, r6, r2
    r = (((uint16_t)r) * scale_fixed) >> 8;
    51d2:	ea4f 2020 	mov.w	r0, r0, asr #8
    g = (((uint16_t)g) * scale_fixed) >> 8;
    51d6:	ea4f 2121 	mov.w	r1, r1, asr #8
    b = (((uint16_t)b) * scale_fixed) >> 8;
    51da:	ea4f 2222 	mov.w	r2, r2, asr #8
    r = (((uint16_t)r) * scale_fixed) >> 8;
    51de:	f803 0c03 	strb.w	r0, [r3, #-3]
    g = (((uint16_t)g) * scale_fixed) >> 8;
    51e2:	f803 1c02 	strb.w	r1, [r3, #-2]
    b = (((uint16_t)b) * scale_fixed) >> 8;
    51e6:	f803 2c01 	strb.w	r2, [r3, #-1]
    51ea:	d1e5      	bne.n	51b8 <showIntro()+0x64>
    51ec:	7821      	ldrb	r1, [r4, #0]
    51ee:	4628      	mov	r0, r5
  for (int fade = 0; fade < 10 + 1; fade++) {
    51f0:	3e0a      	subs	r6, #10
    51f2:	f005 fda1 	bl	ad38 <CFastLED::show(unsigned char)>
    delay(50);
    51f6:	2032      	movs	r0, #50	; 0x32
    51f8:	f010 fe4c 	bl	15e94 <delay>
  for (int fade = 0; fade < 10 + 1; fade++) {
    51fc:	2e92      	cmp	r6, #146	; 0x92
    51fe:	d1da      	bne.n	51b6 <showIntro()+0x62>
  for (int y = -15; y < 3; y++) {
    5200:	f06f 050e 	mvn.w	r5, #14
  FastLED.clear();
    5204:	4e23      	ldr	r6, [pc, #140]	; (5294 <showIntro()+0x140>)
    5206:	f246 4764 	movw	r7, #25700	; 0x6464
    520a:	2100      	movs	r1, #0
    520c:	4630      	mov	r0, r6
    520e:	f005 febd 	bl	af8c <CFastLED::clear(bool)>
    5212:	2364      	movs	r3, #100	; 0x64
    5214:	f8ad 7004 	strh.w	r7, [sp, #4]
    showNumber(404, CRGB(100, 100, 100), y);
    5218:	462a      	mov	r2, r5
    521a:	f88d 3006 	strb.w	r3, [sp, #6]
    521e:	f44f 70ca 	mov.w	r0, #404	; 0x194
    5222:	9901      	ldr	r1, [sp, #4]
  for (int y = -15; y < 3; y++) {
    5224:	3501      	adds	r5, #1
    showNumber(404, CRGB(100, 100, 100), y);
    5226:	f7ff ff17 	bl	5058 <showNumber(int, CRGB, int)>
    522a:	7821      	ldrb	r1, [r4, #0]
    522c:	4630      	mov	r0, r6
    522e:	f005 fd83 	bl	ad38 <CFastLED::show(unsigned char)>
    delay(50);
    5232:	2032      	movs	r0, #50	; 0x32
    5234:	f010 fe2e 	bl	15e94 <delay>
  for (int y = -15; y < 3; y++) {
    5238:	2d03      	cmp	r5, #3
    523a:	d1e6      	bne.n	520a <showIntro()+0xb6>
  delay(800);
    523c:	f44f 7048 	mov.w	r0, #800	; 0x320
  FastLED.clear();
    5240:	4e14      	ldr	r6, [pc, #80]	; (5294 <showIntro()+0x140>)
    5242:	f246 4764 	movw	r7, #25700	; 0x6464
  delay(800);
    5246:	f010 fe25 	bl	15e94 <delay>
  FastLED.clear();
    524a:	2100      	movs	r1, #0
    524c:	4630      	mov	r0, r6
    524e:	f005 fe9d 	bl	af8c <CFastLED::clear(bool)>
    5252:	2364      	movs	r3, #100	; 0x64
    5254:	f8ad 7004 	strh.w	r7, [sp, #4]
    showNumber(404, CRGB(100, 100, 100), y);
    5258:	462a      	mov	r2, r5
    525a:	f88d 3006 	strb.w	r3, [sp, #6]
    525e:	f44f 70ca 	mov.w	r0, #404	; 0x194
    5262:	9901      	ldr	r1, [sp, #4]
  for (int y = 3; y < 16; y++) {
    5264:	3501      	adds	r5, #1
    showNumber(404, CRGB(100, 100, 100), y);
    5266:	f7ff fef7 	bl	5058 <showNumber(int, CRGB, int)>
    526a:	7821      	ldrb	r1, [r4, #0]
    526c:	4630      	mov	r0, r6
    526e:	f005 fd63 	bl	ad38 <CFastLED::show(unsigned char)>
    delay(50);
    5272:	2032      	movs	r0, #50	; 0x32
    5274:	f010 fe0e 	bl	15e94 <delay>
  for (int y = 3; y < 16; y++) {
    5278:	2d10      	cmp	r5, #16
    527a:	d1e6      	bne.n	524a <showIntro()+0xf6>
  FastLED.clear();
    527c:	2100      	movs	r1, #0
    527e:	4805      	ldr	r0, [pc, #20]	; (5294 <showIntro()+0x140>)
    5280:	f005 fe84 	bl	af8c <CFastLED::clear(bool)>
    5284:	7821      	ldrb	r1, [r4, #0]
    5286:	4803      	ldr	r0, [pc, #12]	; (5294 <showIntro()+0x140>)
}
    5288:	b002      	add	sp, #8
    528a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    528e:	f005 bd53 	b.w	ad38 <CFastLED::show(unsigned char)>
    5292:	bf00      	nop
    5294:	200045e8 	.word	0x200045e8
    5298:	60002a7c 	.word	0x60002a7c
    529c:	20006ef0 	.word	0x20006ef0
    52a0:	20006bf0 	.word	0x20006bf0

000052a4 <drawVelocity(CRGB)>:





void drawVelocity(CRGB color) {
    52a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    52a8:	b085      	sub	sp, #20
  FastLED.clear();
    52aa:	2100      	movs	r1, #0
  FastLEDclear();
  int vy = currentMode->pos[2];
  if (!SMP.singleMode) {
    52ac:	4f32      	ldr	r7, [pc, #200]	; (5378 <drawVelocity(CRGB)+0xd4>)
void drawVelocity(CRGB color) {
    52ae:	9001      	str	r0, [sp, #4]
  FastLED.clear();
    52b0:	4832      	ldr	r0, [pc, #200]	; (537c <drawVelocity(CRGB)+0xd8>)
    52b2:	f005 fe6b 	bl	af8c <CFastLED::clear(bool)>
  int vy = currentMode->pos[2];
    52b6:	4b32      	ldr	r3, [pc, #200]	; (5380 <drawVelocity(CRGB)+0xdc>)
  if (!SMP.singleMode) {
    52b8:	683e      	ldr	r6, [r7, #0]
  int vy = currentMode->pos[2];
    52ba:	681b      	ldr	r3, [r3, #0]
    52bc:	6b9c      	ldr	r4, [r3, #56]	; 0x38
  if (!SMP.singleMode) {
    52be:	b9c6      	cbnz	r6, 52f2 <drawVelocity(CRGB)+0x4e>
    for (int y = 1; y < vy + 1; y++) {
    52c0:	2c00      	cmp	r4, #0
    52c2:	dd13      	ble.n	52ec <drawVelocity(CRGB)+0x48>
    52c4:	2501      	movs	r5, #1
      light(SMP.x, y, CRGB(y * y, 20 - y, 0));
    52c6:	b2eb      	uxtb	r3, r5
    52c8:	4629      	mov	r1, r5
    52ca:	f88d 600e 	strb.w	r6, [sp, #14]
    for (int y = 1; y < vy + 1; y++) {
    52ce:	3501      	adds	r5, #1
      light(SMP.x, y, CRGB(y * y, 20 - y, 0));
    52d0:	fb13 f203 	smulbb	r2, r3, r3
    52d4:	f1c3 0314 	rsb	r3, r3, #20
    52d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
    52da:	f88d 200c 	strb.w	r2, [sp, #12]
    52de:	f88d 300d 	strb.w	r3, [sp, #13]
    52e2:	9a03      	ldr	r2, [sp, #12]
    52e4:	f7fe fe36 	bl	3f54 <light(int, int, CRGB)>
    for (int y = 1; y < vy + 1; y++) {
    52e8:	42ac      	cmp	r4, r5
    52ea:	daec      	bge.n	52c6 <drawVelocity(CRGB)+0x22>
      for (int y = 1; y < vy + 1; y++) {
        light(x, y, CRGB(y * y, 20 - y, 0));
      }
    }
  }
}
    52ec:	b005      	add	sp, #20
    52ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    52f2:	2106      	movs	r1, #6
    52f4:	4f23      	ldr	r7, [pc, #140]	; (5384 <drawVelocity(CRGB)+0xe0>)
    52f6:	4824      	ldr	r0, [pc, #144]	; (5388 <drawVelocity(CRGB)+0xe4>)
	size_t println(const char s[])			{ return print(s) + println(); }
    52f8:	2600      	movs	r6, #0
    52fa:	f013 f8eb 	bl	184d4 <usb_serial_write>
    52fe:	4823      	ldr	r0, [pc, #140]	; (538c <drawVelocity(CRGB)+0xe8>)
    5300:	1cfd      	adds	r5, r7, #3
    5302:	f010 f9b7 	bl	15674 <Print::println()>
    for (int x = 1; x < maxX + 1; x++) {
    5306:	007f      	lsls	r7, r7, #1
    5308:	f104 0e01 	add.w	lr, r4, #1
      leds[(x - 1) + (maxX * (y - 1))] = color;
    530c:	46b0      	mov	r8, r6
      for (int y = 1; y < vy + 1; y++) {
    530e:	2c00      	cmp	r4, #0
    5310:	dd2b      	ble.n	536a <drawVelocity(CRGB)+0xc6>
    5312:	eba7 0c05 	sub.w	ip, r7, r5
    5316:	4628      	mov	r0, r5
    5318:	2201      	movs	r2, #1
    531a:	e00b      	b.n	5334 <drawVelocity(CRGB)+0x90>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    531c:	f88c 9030 	strb.w	r9, [ip, #48]	; 0x30
    5320:	f88c 3031 	strb.w	r3, [ip, #49]	; 0x31
    5324:	f88c 1032 	strb.w	r1, [ip, #50]	; 0x32
      for (int y = 1; y < vy + 1; y++) {
    5328:	3201      	adds	r2, #1
    532a:	3030      	adds	r0, #48	; 0x30
    532c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    5330:	4572      	cmp	r2, lr
    5332:	d01a      	beq.n	536a <drawVelocity(CRGB)+0xc6>
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    5334:	b2d3      	uxtb	r3, r2
    5336:	1e51      	subs	r1, r2, #1
        light(x, y, CRGB(y * y, 20 - y, 0));
    5338:	fb13 f903 	smulbb	r9, r3, r3
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    533c:	290f      	cmp	r1, #15
        light(x, y, CRGB(y * y, 20 - y, 0));
    533e:	f1c3 0314 	rsb	r3, r3, #20
    5342:	fa5f f989 	uxtb.w	r9, r9
    5346:	b2db      	uxtb	r3, r3
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    5348:	d8ee      	bhi.n	5328 <drawVelocity(CRGB)+0x84>
    if (y % 2 == 0) {
    534a:	f012 0101 	ands.w	r1, r2, #1
    534e:	d0e5      	beq.n	531c <drawVelocity(CRGB)+0x78>
      for (int y = 1; y < vy + 1; y++) {
    5350:	3201      	adds	r2, #1
      leds[(x - 1) + (maxX * (y - 1))] = color;
    5352:	f800 9c03 	strb.w	r9, [r0, #-3]
    5356:	f800 3c02 	strb.w	r3, [r0, #-2]
      for (int y = 1; y < vy + 1; y++) {
    535a:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
    535e:	4572      	cmp	r2, lr
      leds[(x - 1) + (maxX * (y - 1))] = color;
    5360:	f800 8c01 	strb.w	r8, [r0, #-1]
      for (int y = 1; y < vy + 1; y++) {
    5364:	f100 0030 	add.w	r0, r0, #48	; 0x30
    5368:	d1e4      	bne.n	5334 <drawVelocity(CRGB)+0x90>
    for (int x = 1; x < maxX + 1; x++) {
    536a:	3601      	adds	r6, #1
    536c:	3503      	adds	r5, #3
    536e:	2e10      	cmp	r6, #16
    5370:	d1cd      	bne.n	530e <drawVelocity(CRGB)+0x6a>
}
    5372:	b005      	add	sp, #20
    5374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5378:	20003294 	.word	0x20003294
    537c:	200045e8 	.word	0x200045e8
    5380:	200038c8 	.word	0x200038c8
    5384:	20006bf0 	.word	0x20006bf0
    5388:	2000098c 	.word	0x2000098c
    538c:	20003314 	.word	0x20003314

00005390 <setVelocity()>:
void setVelocity() {
    5390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (currentMode->pos[2] != SMP.velocity) {
    5394:	f8df 8124 	ldr.w	r8, [pc, #292]	; 54bc <setVelocity()+0x12c>
    5398:	4e43      	ldr	r6, [pc, #268]	; (54a8 <setVelocity()+0x118>)
    539a:	f8d8 3000 	ldr.w	r3, [r8]
    539e:	6932      	ldr	r2, [r6, #16]
    53a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    53a2:	4293      	cmp	r3, r2
void setVelocity() {
    53a4:	ed2d 8b02 	vpush	{d8}
    53a8:	b088      	sub	sp, #32
  if (currentMode->pos[2] != SMP.velocity) {
    53aa:	d049      	beq.n	5440 <setVelocity()+0xb0>
    if (!SMP.singleMode) {
    53ac:	6832      	ldr	r2, [r6, #0]
    53ae:	2a00      	cmp	r2, #0
    53b0:	d055      	beq.n	545e <setVelocity()+0xce>
	StringSumHelper(const char *p) : String(p) {}
    53b2:	493e      	ldr	r1, [pc, #248]	; (54ac <setVelocity()+0x11c>)
    53b4:	a804      	add	r0, sp, #16
    53b6:	f010 fad7 	bl	15968 <String::String(char const*)>
      Serial.println("Overal Velocity: " + String(currentMode->pos[2]));
    53ba:	f8d8 3000 	ldr.w	r3, [r8]
    53be:	220a      	movs	r2, #10
    53c0:	4668      	mov	r0, sp
    53c2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    53c4:	f010 fae4 	bl	15990 <String::String(int, unsigned char)>
    53c8:	4669      	mov	r1, sp
    53ca:	a804      	add	r0, sp, #16
    53cc:	4d38      	ldr	r5, [pc, #224]	; (54b0 <setVelocity()+0x120>)
    53ce:	f010 fb85 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    53d2:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    53d4:	4837      	ldr	r0, [pc, #220]	; (54b4 <setVelocity()+0x124>)
    53d6:	f505 4788 	add.w	r7, r5, #17408	; 0x4400
    53da:	f010 f919 	bl	15610 <Print::print(String const&)>
    53de:	4835      	ldr	r0, [pc, #212]	; (54b4 <setVelocity()+0x124>)
    53e0:	f010 f948 	bl	15674 <Print::println()>
    53e4:	4668      	mov	r0, sp
    53e6:	f010 fa83 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    53ea:	a804      	add	r0, sp, #16
    53ec:	f010 fa80 	bl	158f0 <String::~String()>
          if (note[nx][ny][0] == SMP.currentChannel) note[nx][ny][1] = round(mapf(currentMode->pos[2], 1, 16, 1, 100));
    53f0:	ed9f 8b29 	vldr	d8, [pc, #164]	; 5498 <setVelocity()+0x108>
        for (int ny = 1; ny < maxY + 1; ny++) {
    53f4:	f1a5 0480 	sub.w	r4, r5, #128	; 0x80
    53f8:	e002      	b.n	5400 <setVelocity()+0x70>
    53fa:	3408      	adds	r4, #8
    53fc:	42ac      	cmp	r4, r5
    53fe:	d01c      	beq.n	543a <setVelocity()+0xaa>
          if (note[nx][ny][0] == SMP.currentChannel) note[nx][ny][1] = round(mapf(currentMode->pos[2], 1, 16, 1, 100));
    5400:	68a2      	ldr	r2, [r4, #8]
    5402:	6873      	ldr	r3, [r6, #4]
    5404:	429a      	cmp	r2, r3
    5406:	d1f8      	bne.n	53fa <setVelocity()+0x6a>
    5408:	f8d8 3000 	ldr.w	r3, [r8]
    540c:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    5410:	eeb3 2b00 	vmov.f64	d2, #48	; 0x41800000  16.0
        for (int ny = 1; ny < maxY + 1; ny++) {
    5414:	3408      	adds	r4, #8
          if (note[nx][ny][0] == SMP.currentChannel) note[nx][ny][1] = round(mapf(currentMode->pos[2], 1, 16, 1, 100));
    5416:	ed93 0a0e 	vldr	s0, [r3, #56]	; 0x38
    541a:	eeb0 4b48 	vmov.f64	d4, d8
    541e:	eeb0 1b43 	vmov.f64	d1, d3
    5422:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
    5426:	f005 f923 	bl	a670 <mapf(double, double, double, double, double)>
    542a:	feb8 0b40 	vrinta.f64	d0, d0
    542e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    5432:	ed84 0a01 	vstr	s0, [r4, #4]
        for (int ny = 1; ny < maxY + 1; ny++) {
    5436:	42ac      	cmp	r4, r5
    5438:	d1e2      	bne.n	5400 <setVelocity()+0x70>
      for (int nx = 1; nx < maxlen; nx++) {
    543a:	3588      	adds	r5, #136	; 0x88
    543c:	42bd      	cmp	r5, r7
    543e:	d1d9      	bne.n	53f4 <setVelocity()+0x64>
    5440:	f44f 5220 	mov.w	r2, #10240	; 0x2800
    5444:	2300      	movs	r3, #0
    5446:	f8ad 2010 	strh.w	r2, [sp, #16]
    544a:	f88d 3012 	strb.w	r3, [sp, #18]
  drawVelocity(CRGB(0, 40, 0));
    544e:	9804      	ldr	r0, [sp, #16]
}
    5450:	b008      	add	sp, #32
    5452:	ecbd 8b02 	vpop	{d8}
    5456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  drawVelocity(CRGB(0, 40, 0));
    545a:	f7ff bf23 	b.w	52a4 <drawVelocity(CRGB)>
      note[SMP.x][SMP.y][1] = round(mapf(currentMode->pos[2], 1, 16, 1, 127));
    545e:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    5462:	ee07 3a90 	vmov	s15, r3
    5466:	eeb3 2b00 	vmov.f64	d2, #48	; 0x41800000  16.0
    546a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
    546e:	eeb0 1b43 	vmov.f64	d1, d3
    5472:	ed9f 4b0b 	vldr	d4, [pc, #44]	; 54a0 <setVelocity()+0x110>
    5476:	f005 f8fb 	bl	a670 <mapf(double, double, double, double, double)>
    547a:	4a0f      	ldr	r2, [pc, #60]	; (54b8 <setVelocity()+0x128>)
    547c:	feb8 0b40 	vrinta.f64	d0, d0
    5480:	eebd 0bc0 	vcvt.s32.f64	s0, d0
    5484:	e9d6 310c 	ldrd	r3, r1, [r6, #48]	; 0x30
    5488:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    548c:	440b      	add	r3, r1
    548e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5492:	ed83 0a01 	vstr	s0, [r3, #4]
    5496:	e7d3      	b.n	5440 <setVelocity()+0xb0>
    5498:	00000000 	.word	0x00000000
    549c:	40590000 	.word	0x40590000
    54a0:	00000000 	.word	0x00000000
    54a4:	405fc000 	.word	0x405fc000
    54a8:	20003294 	.word	0x20003294
    54ac:	20000978 	.word	0x20000978
    54b0:	200072c0 	.word	0x200072c0
    54b4:	20003314 	.word	0x20003314
    54b8:	200071b8 	.word	0x200071b8
    54bc:	200038c8 	.word	0x200038c8

000054c0 <drawStatus()>:
  drawStatus();
}

void drawStatus() {
  CRGB ledColor = CRGB(0, 0, 0);
  if (SMP.activeCopy) ledColor = CRGB(20, 20, 0);
    54c0:	4a0b      	ldr	r2, [pc, #44]	; (54f0 <drawStatus()+0x30>)
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    54c2:	2000      	movs	r0, #0
    54c4:	4b0b      	ldr	r3, [pc, #44]	; (54f4 <drawStatus()+0x34>)
  if (SMP.activeCopy) ledColor = CRGB(20, 20, 0);
    54c6:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
    54ca:	f1a3 0118 	sub.w	r1, r3, #24
    54ce:	4282      	cmp	r2, r0
    54d0:	bf0c      	ite	eq
    54d2:	4602      	moveq	r2, r0
    54d4:	2214      	movne	r2, #20
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    54d6:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  for (int s = 9; s <= maxX; s++) {
    54da:	3b03      	subs	r3, #3
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    54dc:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
    54e0:	f883 02ea 	strb.w	r0, [r3, #746]	; 0x2ea
  for (int s = 9; s <= maxX; s++) {
    54e4:	4299      	cmp	r1, r3
    54e6:	d1f6      	bne.n	54d6 <drawStatus()+0x16>
    54e8:	4803      	ldr	r0, [pc, #12]	; (54f8 <drawStatus()+0x38>)
    54ea:	7801      	ldrb	r1, [r0, #0]
    54ec:	f005 bc24 	b.w	ad38 <CFastLED::show(unsigned char)>
    54f0:	20003294 	.word	0x20003294
    54f4:	20006bf0 	.word	0x20006bf0
    54f8:	200045e8 	.word	0x200045e8

000054fc <drawPages()>:
    light(s, maxY, ledColor);
  }
  FastLEDshow();
}
void drawPages() {
    54fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    54fe:	4c23      	ldr	r4, [pc, #140]	; (558c <drawPages()+0x90>)
    5500:	b083      	sub	sp, #12


  for (int p = 1; p <= maxPages; p++) {  // Assuming maxPages is 8
    5502:	2501      	movs	r5, #1
    5504:	4f22      	ldr	r7, [pc, #136]	; (5590 <drawPages()+0x94>)
      }
    }

    // Update lastPage if this page has notes
    if (hasNotes) {
      lastPage = p;
    5506:	4e23      	ldr	r6, [pc, #140]	; (5594 <drawPages()+0x98>)
    for (int ix = 1; ix < maxX + 1; ix++) {
    5508:	f5a4 6008 	sub.w	r0, r4, #2176	; 0x880
    bool hasNotes = false;
    550c:	2200      	movs	r2, #0
      for (int iy = 1; iy < maxY + 1; iy++) {
    550e:	f1a0 0380 	sub.w	r3, r0, #128	; 0x80
        if (note[((p - 1) * maxX) + ix][iy][0] > 0) {
    5512:	f853 1f08 	ldr.w	r1, [r3, #8]!
          hasNotes = true;
    5516:	2900      	cmp	r1, #0
    5518:	bf18      	it	ne
    551a:	2201      	movne	r2, #1
      for (int iy = 1; iy < maxY + 1; iy++) {
    551c:	4298      	cmp	r0, r3
    551e:	d1f8      	bne.n	5512 <drawPages()+0x16>
    for (int ix = 1; ix < maxX + 1; ix++) {
    5520:	3088      	adds	r0, #136	; 0x88
    5522:	4284      	cmp	r4, r0
    5524:	d1f3      	bne.n	550e <drawPages()+0x12>
    if (hasNotes) {
    5526:	b102      	cbz	r2, 552a <drawPages()+0x2e>
      lastPage = p;
    5528:	6035      	str	r5, [r6, #0]

    // Determine LED color based on the state
    CRGB ledColor;

    // If the page is the current one, set the LED to white
    if (SMP.page == p && SMP.edit == p) {
    552a:	697b      	ldr	r3, [r7, #20]
    552c:	42ab      	cmp	r3, r5
    552e:	69bb      	ldr	r3, [r7, #24]
    5530:	d016      	beq.n	5560 <drawPages()+0x64>
      } else {
        ledColor = CRGB(0, 0, 35);  // White green for current page
      }
    } else {
      // Determine color for non-current pages
      if (SMP.edit == p) {
    5532:	42ab      	cmp	r3, r5
    5534:	d022      	beq.n	557c <drawPages()+0x80>
        ledColor = SMP.page == p ? CRGB(50, 50, 50) : CRGB(50, 50, 50);  // Bright violett if active pattern is the same as edit, Dark vilett otherwise
      } else {
        ledColor = hasNotes ? CRGB(0, 0, 35) : CRGB(1, 0, 0);  // blue if has notes, Dark red otherwise
    5536:	b9e2      	cbnz	r2, 5572 <drawPages()+0x76>
    5538:	2301      	movs	r3, #1
    553a:	4611      	mov	r1, r2
        ledColor = CRGB(50, 50, 50);  // Bright red if active page is same as edit page and stopped
    553c:	f88d 1006 	strb.w	r1, [sp, #6]
      }
    }

    // Set the LED color
    light(p, maxY, ledColor);
    5540:	4628      	mov	r0, r5
        ledColor = CRGB(50, 50, 50);  // Bright red if active page is same as edit page and stopped
    5542:	f88d 3004 	strb.w	r3, [sp, #4]
  for (int p = 1; p <= maxPages; p++) {  // Assuming maxPages is 8
    5546:	3501      	adds	r5, #1
        ledColor = CRGB(50, 50, 50);  // Bright red if active page is same as edit page and stopped
    5548:	f88d 2005 	strb.w	r2, [sp, #5]
    light(p, maxY, ledColor);
    554c:	2110      	movs	r1, #16
    554e:	9a01      	ldr	r2, [sp, #4]
  for (int p = 1; p <= maxPages; p++) {  // Assuming maxPages is 8
    5550:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    light(p, maxY, ledColor);
    5554:	f7fe fcfe 	bl	3f54 <light(int, int, CRGB)>
  for (int p = 1; p <= maxPages; p++) {  // Assuming maxPages is 8
    5558:	2d09      	cmp	r5, #9
    555a:	d1d5      	bne.n	5508 <drawPages()+0xc>
  }

  // Additional logic can be added here if you need to do something with lastPage
}
    555c:	b003      	add	sp, #12
    555e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SMP.page == p && SMP.edit == p) {
    5560:	42ab      	cmp	r3, r5
      if (isPlaying) {
    5562:	4b0d      	ldr	r3, [pc, #52]	; (5598 <drawPages()+0x9c>)
    5564:	781b      	ldrb	r3, [r3, #0]
    if (SMP.page == p && SMP.edit == p) {
    5566:	d008      	beq.n	557a <drawPages()+0x7e>
      if (isPlaying) {
    5568:	b123      	cbz	r3, 5574 <drawPages()+0x78>
    556a:	2300      	movs	r3, #0
    556c:	220f      	movs	r2, #15
    556e:	4619      	mov	r1, r3
    5570:	e7e4      	b.n	553c <drawPages()+0x40>
    5572:	2300      	movs	r3, #0
    5574:	2123      	movs	r1, #35	; 0x23
    5576:	461a      	mov	r2, r3
    5578:	e7e0      	b.n	553c <drawPages()+0x40>
      if (isPlaying) {
    557a:	b91b      	cbnz	r3, 5584 <drawPages()+0x88>
    557c:	2332      	movs	r3, #50	; 0x32
    557e:	461a      	mov	r2, r3
    5580:	4619      	mov	r1, r3
    5582:	e7db      	b.n	553c <drawPages()+0x40>
    5584:	2314      	movs	r3, #20
    5586:	22ff      	movs	r2, #255	; 0xff
    5588:	4619      	mov	r1, r3
    558a:	e7d7      	b.n	553c <drawPages()+0x40>
    558c:	20007b40 	.word	0x20007b40
    5590:	20003294 	.word	0x20003294
    5594:	20003b28 	.word	0x20003b28
    5598:	2000c953 	.word	0x2000c953

0000559c <drawBase()>:
void drawBase() {
    559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!SMP.singleMode) {
    55a0:	4e84      	ldr	r6, [pc, #528]	; (57b4 <drawBase()+0x218>)
void drawBase() {
    55a2:	b084      	sub	sp, #16
  if (!SMP.singleMode) {
    55a4:	6837      	ldr	r7, [r6, #0]
    55a6:	2f00      	cmp	r7, #0
    55a8:	d173      	bne.n	5692 <drawBase()+0xf6>
    55aa:	4c83      	ldr	r4, [pc, #524]	; (57b8 <drawBase()+0x21c>)
    for (int y = 1; y < maxY; y++) {
    55ac:	f04f 0801 	mov.w	r8, #1
    55b0:	4e82      	ldr	r6, [pc, #520]	; (57bc <drawBase()+0x220>)

/// @copydoc CRGB::operator/=
__attribute__((always_inline))
inline CRGB operator/( const CRGB& p1, uint8_t d)
{
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    55b2:	4d83      	ldr	r5, [pc, #524]	; (57c0 <drawBase()+0x224>)
      for (int x = 1; x < maxX + 1; x++) {
    55b4:	f04f 0901 	mov.w	r9, #1
    55b8:	e00d      	b.n	55d6 <drawBase()+0x3a>
        if (mute[y - 1]) light(x, y, CRGB(0, 0, 0));
    55ba:	4648      	mov	r0, r9
        : r(ir), g(ig), b(ib)
    55bc:	f8ad 700c 	strh.w	r7, [sp, #12]
    55c0:	f88d 700e 	strb.w	r7, [sp, #14]
      for (int x = 1; x < maxX + 1; x++) {
    55c4:	f109 0901 	add.w	r9, r9, #1
        if (mute[y - 1]) light(x, y, CRGB(0, 0, 0));
    55c8:	9a03      	ldr	r2, [sp, #12]
    55ca:	4641      	mov	r1, r8
    55cc:	f7fe fcc2 	bl	3f54 <light(int, int, CRGB)>
      for (int x = 1; x < maxX + 1; x++) {
    55d0:	f1b9 0f11 	cmp.w	r9, #17
    55d4:	d028      	beq.n	5628 <drawBase()+0x8c>
        if (!mute[y - 1]) light(x, y, col[colors] / 14);
    55d6:	6833      	ldr	r3, [r6, #0]
    55d8:	2b00      	cmp	r3, #0
    55da:	d1ee      	bne.n	55ba <drawBase()+0x1e>
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    55dc:	f894 c001 	ldrb.w	ip, [r4, #1]
    55e0:	4648      	mov	r0, r9
    55e2:	78a2      	ldrb	r2, [r4, #2]
    55e4:	4641      	mov	r1, r8
    55e6:	7823      	ldrb	r3, [r4, #0]
    55e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    55ec:	0852      	lsrs	r2, r2, #1
    55ee:	085b      	lsrs	r3, r3, #1
    55f0:	fba5 ce0c 	umull	ip, lr, r5, ip
    55f4:	fba5 2c02 	umull	r2, ip, r5, r2
    55f8:	fba5 2303 	umull	r2, r3, r5, r3
    55fc:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    5600:	ea4f 029c 	mov.w	r2, ip, lsr #2
    5604:	089b      	lsrs	r3, r3, #2
    5606:	f88d e005 	strb.w	lr, [sp, #5]
    560a:	f88d 2006 	strb.w	r2, [sp, #6]
    560e:	f88d 3004 	strb.w	r3, [sp, #4]
    5612:	9a01      	ldr	r2, [sp, #4]
    5614:	f7fe fc9e 	bl	3f54 <light(int, int, CRGB)>
        if (mute[y - 1]) light(x, y, CRGB(0, 0, 0));
    5618:	6833      	ldr	r3, [r6, #0]
    561a:	2b00      	cmp	r3, #0
    561c:	d1cd      	bne.n	55ba <drawBase()+0x1e>
      for (int x = 1; x < maxX + 1; x++) {
    561e:	f109 0901 	add.w	r9, r9, #1
    5622:	f1b9 0f11 	cmp.w	r9, #17
    5626:	d1d6      	bne.n	55d6 <drawBase()+0x3a>
    for (int y = 1; y < maxY; y++) {
    5628:	f108 0801 	add.w	r8, r8, #1
    562c:	3403      	adds	r4, #3
    562e:	3604      	adds	r6, #4
    5630:	f1b8 0f10 	cmp.w	r8, #16
    5634:	d1be      	bne.n	55b4 <drawBase()+0x18>
        : r(ir), g(ig), b(ib)
    5636:	f240 1501 	movw	r5, #257	; 0x101
    563a:	2400      	movs	r4, #0
    light(1, 1, CRGB(1, 1, 0));   //gelb
    563c:	2101      	movs	r1, #1
    563e:	f8ad 500c 	strh.w	r5, [sp, #12]
    5642:	f88d 400e 	strb.w	r4, [sp, #14]
    5646:	4608      	mov	r0, r1
    5648:	9a03      	ldr	r2, [sp, #12]
    564a:	f7fe fc83 	bl	3f54 <light(int, int, CRGB)>
    564e:	f8ad 500c 	strh.w	r5, [sp, #12]
    5652:	f88d 400e 	strb.w	r4, [sp, #14]
    light(5, 1, CRGB(1, 1, 0));   //gelb
    5656:	2101      	movs	r1, #1
    5658:	9a03      	ldr	r2, [sp, #12]
    565a:	2005      	movs	r0, #5
    565c:	f7fe fc7a 	bl	3f54 <light(int, int, CRGB)>
    5660:	f8ad 500c 	strh.w	r5, [sp, #12]
    5664:	f88d 400e 	strb.w	r4, [sp, #14]
    light(9, 1, CRGB(1, 1, 0));   //gelb
    5668:	2101      	movs	r1, #1
    566a:	9a03      	ldr	r2, [sp, #12]
    566c:	2009      	movs	r0, #9
    566e:	f7fe fc71 	bl	3f54 <light(int, int, CRGB)>
    5672:	f8ad 500c 	strh.w	r5, [sp, #12]
    5676:	f88d 400e 	strb.w	r4, [sp, #14]
    light(13, 1, CRGB(1, 1, 0));  //gelb
    567a:	2101      	movs	r1, #1
    567c:	9a03      	ldr	r2, [sp, #12]
    567e:	200d      	movs	r0, #13
    5680:	f7fe fc68 	bl	3f54 <light(int, int, CRGB)>
  drawPages();
    5684:	f7ff ff3a 	bl	54fc <drawPages()>
}
    5688:	b004      	add	sp, #16
    568a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawStatus();
    568e:	f7ff bf17 	b.w	54c0 <drawStatus()>
    for (int y = 1; y < maxY; y++) {
    5692:	f04f 0901 	mov.w	r9, #1
    5696:	4d48      	ldr	r5, [pc, #288]	; (57b8 <drawBase()+0x21c>)
    5698:	4f48      	ldr	r7, [pc, #288]	; (57bc <drawBase()+0x220>)
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    569a:	f8df 8128 	ldr.w	r8, [pc, #296]	; 57c4 <drawBase()+0x228>
    569e:	4c48      	ldr	r4, [pc, #288]	; (57c0 <drawBase()+0x224>)
      for (int x = 1; x < maxX + 1; x++) {
    56a0:	f04f 0a01 	mov.w	sl, #1
    56a4:	e020      	b.n	56e8 <drawBase()+0x14c>
    56a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        if (mute[SMP.currentChannel]) light(x, y, col[SMP.currentChannel] / 28);
    56aa:	4650      	mov	r0, sl
      for (int x = 1; x < maxX + 1; x++) {
    56ac:	f10a 0a01 	add.w	sl, sl, #1
        if (mute[SMP.currentChannel]) light(x, y, col[SMP.currentChannel] / 28);
    56b0:	4649      	mov	r1, r9
    56b2:	18ea      	adds	r2, r5, r3
    56b4:	5ceb      	ldrb	r3, [r5, r3]
    56b6:	f892 c001 	ldrb.w	ip, [r2, #1]
    56ba:	089b      	lsrs	r3, r3, #2
    56bc:	7892      	ldrb	r2, [r2, #2]
    56be:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
    56c2:	fba8 3e03 	umull	r3, lr, r8, r3
    56c6:	0892      	lsrs	r2, r2, #2
    56c8:	fba8 3c0c 	umull	r3, ip, r8, ip
    56cc:	fba8 2302 	umull	r2, r3, r8, r2
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    56d0:	f88d e00c 	strb.w	lr, [sp, #12]
    56d4:	f88d c00d 	strb.w	ip, [sp, #13]
    56d8:	f88d 300e 	strb.w	r3, [sp, #14]
    56dc:	9a03      	ldr	r2, [sp, #12]
    56de:	f7fe fc39 	bl	3f54 <light(int, int, CRGB)>
      for (int x = 1; x < maxX + 1; x++) {
    56e2:	f1ba 0f11 	cmp.w	sl, #17
    56e6:	d031      	beq.n	574c <drawBase()+0x1b0>
        if (!mute[SMP.currentChannel]) light(x, y, col[SMP.currentChannel] / 14);
    56e8:	6873      	ldr	r3, [r6, #4]
    56ea:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
    56ee:	2a00      	cmp	r2, #0
    56f0:	d1d9      	bne.n	56a6 <drawBase()+0x10a>
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    56f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    56f6:	4650      	mov	r0, sl
    56f8:	4649      	mov	r1, r9
    56fa:	eb05 0e03 	add.w	lr, r5, r3
    56fe:	5ceb      	ldrb	r3, [r5, r3]
    5700:	f89e c001 	ldrb.w	ip, [lr, #1]
    5704:	085b      	lsrs	r3, r3, #1
    5706:	f89e 2002 	ldrb.w	r2, [lr, #2]
    570a:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    570e:	fba4 3e03 	umull	r3, lr, r4, r3
    5712:	0852      	lsrs	r2, r2, #1
    5714:	fba4 3c0c 	umull	r3, ip, r4, ip
    5718:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
    571c:	fba4 2302 	umull	r2, r3, r4, r2
    5720:	ea4f 029c 	mov.w	r2, ip, lsr #2
    5724:	f88d e008 	strb.w	lr, [sp, #8]
    5728:	089b      	lsrs	r3, r3, #2
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    572a:	f88d 2009 	strb.w	r2, [sp, #9]
    572e:	f88d 300a 	strb.w	r3, [sp, #10]
    5732:	9a02      	ldr	r2, [sp, #8]
    5734:	f7fe fc0e 	bl	3f54 <light(int, int, CRGB)>
        if (mute[SMP.currentChannel]) light(x, y, col[SMP.currentChannel] / 28);
    5738:	6873      	ldr	r3, [r6, #4]
    573a:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
    573e:	2a00      	cmp	r2, #0
    5740:	d1b1      	bne.n	56a6 <drawBase()+0x10a>
      for (int x = 1; x < maxX + 1; x++) {
    5742:	f10a 0a01 	add.w	sl, sl, #1
    5746:	f1ba 0f11 	cmp.w	sl, #17
    574a:	d1cd      	bne.n	56e8 <drawBase()+0x14c>
    for (int y = 1; y < maxY; y++) {
    574c:	f109 0901 	add.w	r9, r9, #1
    5750:	f1b9 0f10 	cmp.w	r9, #16
    5754:	d1a4      	bne.n	56a0 <drawBase()+0x104>
        : r(ir), g(ig), b(ib)
    5756:	2401      	movs	r4, #1
    5758:	f44f 7580 	mov.w	r5, #256	; 0x100
    575c:	f88d 4006 	strb.w	r4, [sp, #6]
    light(1, 1, CRGB(0, 1, 1));   //türkis
    5760:	4621      	mov	r1, r4
    5762:	f8ad 5004 	strh.w	r5, [sp, #4]
    5766:	4620      	mov	r0, r4
    5768:	9a01      	ldr	r2, [sp, #4]
    576a:	f7fe fbf3 	bl	3f54 <light(int, int, CRGB)>
    576e:	f8ad 5004 	strh.w	r5, [sp, #4]
    5772:	f88d 4006 	strb.w	r4, [sp, #6]
    light(5, 1, CRGB(0, 1, 1));   //türkis
    5776:	4621      	mov	r1, r4
    5778:	9a01      	ldr	r2, [sp, #4]
    577a:	2005      	movs	r0, #5
    577c:	f7fe fbea 	bl	3f54 <light(int, int, CRGB)>
    5780:	f8ad 5004 	strh.w	r5, [sp, #4]
    5784:	f88d 4006 	strb.w	r4, [sp, #6]
    light(9, 1, CRGB(0, 1, 1));   //türkis
    5788:	4621      	mov	r1, r4
    578a:	9a01      	ldr	r2, [sp, #4]
    578c:	2009      	movs	r0, #9
    578e:	f7fe fbe1 	bl	3f54 <light(int, int, CRGB)>
    5792:	f8ad 5004 	strh.w	r5, [sp, #4]
    5796:	f88d 4006 	strb.w	r4, [sp, #6]
    light(13, 1, CRGB(0, 1, 1));  //türkis
    579a:	4621      	mov	r1, r4
    579c:	9a01      	ldr	r2, [sp, #4]
    579e:	200d      	movs	r0, #13
    57a0:	f7fe fbd8 	bl	3f54 <light(int, int, CRGB)>
  drawPages();
    57a4:	f7ff feaa 	bl	54fc <drawPages()>
}
    57a8:	b004      	add	sp, #16
    57aa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  drawStatus();
    57ae:	f7ff be87 	b.w	54c0 <drawStatus()>
    57b2:	bf00      	nop
    57b4:	20003294 	.word	0x20003294
    57b8:	20004fc4 	.word	0x20004fc4
    57bc:	20007178 	.word	0x20007178
    57c0:	92492493 	.word	0x92492493
    57c4:	24924925 	.word	0x24924925

000057c8 <drawSamples()>:


/************************************************
    DRAW SAMPLES
 *************************************************/
void drawSamples() {
    57c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}



  for (int ix = 1; ix < maxX + 1; ix++) {
    57cc:	f04f 0b01 	mov.w	fp, #1
void drawSamples() {
    57d0:	b085      	sub	sp, #20
    57d2:	4e65      	ldr	r6, [pc, #404]	; (5968 <drawSamples()+0x1a0>)
    57d4:	4f65      	ldr	r7, [pc, #404]	; (596c <drawSamples()+0x1a4>)
    for (int iy = 1; iy < maxY + 1; iy++) {
      if (note[((SMP.edit - 1) * maxX) + ix][iy][0] > 0) {
        if (!mute[note[((SMP.edit - 1) * maxX) + ix][iy][0]]) {
    57d6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 5970 <drawSamples()+0x1a8>
                 qmul8( p1.g, d),
    57da:	f8df a198 	ldr.w	sl, [pc, #408]	; 5974 <drawSamples()+0x1ac>
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    57de:	f8df 8198 	ldr.w	r8, [pc, #408]	; 5978 <drawSamples()+0x1b0>
    for (int iy = 1; iy < maxY + 1; iy++) {
    57e2:	2501      	movs	r5, #1
    57e4:	e035      	b.n	5852 <drawSamples()+0x8a>
                 qmul8( p1.g, d),
    57e6:	eb0a 0203 	add.w	r2, sl, r3
    unsigned p = (unsigned)i * (unsigned)j;
    57ea:	f81a 3003 	ldrb.w	r3, [sl, r3]
            }
            }
          

        } else {
          light(ix, iy, getCol(note[((SMP.edit - 1) * maxX) + ix][iy][0]) / 24);
    57ee:	4629      	mov	r1, r5
    57f0:	4658      	mov	r0, fp
    57f2:	7854      	ldrb	r4, [r2, #1]
    57f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    57f8:	7892      	ldrb	r2, [r2, #2]
    57fa:	005b      	lsls	r3, r3, #1
    57fc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    return p;
    5800:	2bff      	cmp	r3, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    5802:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5806:	ea4f 0444 	mov.w	r4, r4, lsl #1
    580a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    return p;
    580e:	bf28      	it	cs
    5810:	23ff      	movcs	r3, #255	; 0xff
    5812:	2cff      	cmp	r4, #255	; 0xff
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    5814:	b2db      	uxtb	r3, r3
    5816:	bf28      	it	cs
    5818:	24ff      	movcs	r4, #255	; 0xff
    581a:	2aff      	cmp	r2, #255	; 0xff
    581c:	fba8 3c03 	umull	r3, ip, r8, r3
    5820:	bf28      	it	cs
    5822:	22ff      	movcs	r2, #255	; 0xff
    5824:	b2e4      	uxtb	r4, r4
    5826:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
    582a:	b2d2      	uxtb	r2, r2
    582c:	fba8 3404 	umull	r3, r4, r8, r4
    5830:	f88d c00c 	strb.w	ip, [sp, #12]
    5834:	fba8 3202 	umull	r3, r2, r8, r2
    5838:	0924      	lsrs	r4, r4, #4
    583a:	0912      	lsrs	r2, r2, #4
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    583c:	f88d 400d 	strb.w	r4, [sp, #13]
    5840:	f88d 200e 	strb.w	r2, [sp, #14]
    5844:	9a03      	ldr	r2, [sp, #12]
    5846:	f7fe fb85 	bl	3f54 <light(int, int, CRGB)>
    for (int iy = 1; iy < maxY + 1; iy++) {
    584a:	3501      	adds	r5, #1
    584c:	2d11      	cmp	r5, #17
    584e:	f000 8082 	beq.w	5956 <drawSamples()+0x18e>
      if (note[((SMP.edit - 1) * maxX) + ix][iy][0] > 0) {
    5852:	69bb      	ldr	r3, [r7, #24]
    5854:	3b01      	subs	r3, #1
    5856:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
    585a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    585e:	442b      	add	r3, r5
    5860:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    5864:	2b00      	cmp	r3, #0
    5866:	d0f0      	beq.n	584a <drawSamples()+0x82>
        if (!mute[note[((SMP.edit - 1) * maxX) + ix][iy][0]]) {
    5868:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
                 qmul8( p1.g, d),
    586c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5870:	2a00      	cmp	r2, #0
    5872:	d1b8      	bne.n	57e6 <drawSamples()+0x1e>
    5874:	eb0a 0c03 	add.w	ip, sl, r3
    unsigned p = (unsigned)i * (unsigned)j;
    5878:	f81a 2003 	ldrb.w	r2, [sl, r3]
          for (int iy2 = 1; iy2 < maxY + 1; iy2++) {
    587c:	2401      	movs	r4, #1
          light(ix, iy, getCol(note[((SMP.edit - 1) * maxX) + ix][iy][0]));
    587e:	4629      	mov	r1, r5
    5880:	f89c 3001 	ldrb.w	r3, [ip, #1]
    5884:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    5888:	f89c c002 	ldrb.w	ip, [ip, #2]
    588c:	4658      	mov	r0, fp
    588e:	fa02 fe04 	lsl.w	lr, r2, r4
    5892:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5896:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    589a:	40a3      	lsls	r3, r4
    return p;
    589c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    58a0:	fa0c f204 	lsl.w	r2, ip, r4
    return p;
    58a4:	bf28      	it	cs
    58a6:	f04f 0eff 	movcs.w	lr, #255	; 0xff
    58aa:	2bff      	cmp	r3, #255	; 0xff
    58ac:	bf28      	it	cs
    58ae:	23ff      	movcs	r3, #255	; 0xff
    58b0:	2aff      	cmp	r2, #255	; 0xff
    58b2:	f88d e004 	strb.w	lr, [sp, #4]
    58b6:	bf28      	it	cs
    58b8:	22ff      	movcs	r2, #255	; 0xff
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    58ba:	f88d 3005 	strb.w	r3, [sp, #5]
    58be:	f88d 2006 	strb.w	r2, [sp, #6]
    58c2:	9a01      	ldr	r2, [sp, #4]
    58c4:	f7fe fb46 	bl	3f54 <light(int, int, CRGB)>
          for (int iy2 = 1; iy2 < maxY + 1; iy2++) {
    58c8:	e002      	b.n	58d0 <drawSamples()+0x108>
    58ca:	3401      	adds	r4, #1
    58cc:	2c11      	cmp	r4, #17
    58ce:	d0bc      	beq.n	584a <drawSamples()+0x82>
            if (iy2 != iy && note[((SMP.edit - 1) * maxX) + ix][iy2][0] == note[((SMP.edit - 1) * maxX) + ix][iy][0]) {
    58d0:	42a5      	cmp	r5, r4
    58d2:	d0fa      	beq.n	58ca <drawSamples()+0x102>
    58d4:	69bb      	ldr	r3, [r7, #24]
    58d6:	3b01      	subs	r3, #1
    58d8:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
    58dc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    58e0:	191a      	adds	r2, r3, r4
    58e2:	442b      	add	r3, r5
    58e4:	f856 2032 	ldr.w	r2, [r6, r2, lsl #3]
    58e8:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
    58ec:	429a      	cmp	r2, r3
    58ee:	d1ec      	bne.n	58ca <drawSamples()+0x102>
                 qmul8( p1.g, d),
    58f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
              light(ix, iy2, getCol(note[((SMP.edit - 1) * maxX) + ix][iy][0]) / 8);
    58f4:	4621      	mov	r1, r4
    58f6:	4658      	mov	r0, fp
    58f8:	eb0a 0e02 	add.w	lr, sl, r2
    unsigned p = (unsigned)i * (unsigned)j;
    58fc:	f81a c002 	ldrb.w	ip, [sl, r2]
    5900:	f89e 3001 	ldrb.w	r3, [lr, #1]
    5904:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
    5908:	f89e 2002 	ldrb.w	r2, [lr, #2]
    590c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    5910:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    return p;
    5914:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    unsigned p = (unsigned)i * (unsigned)j;
    5918:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    591c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    5920:	ea4f 0242 	mov.w	r2, r2, lsl #1
    return p;
    5924:	bf28      	it	cs
    5926:	f04f 0cff 	movcs.w	ip, #255	; 0xff
    592a:	2bff      	cmp	r3, #255	; 0xff
    return CRGB( p1.r/d, p1.g/d, p1.b/d);
    592c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    5930:	bf28      	it	cs
    5932:	23ff      	movcs	r3, #255	; 0xff
    5934:	2aff      	cmp	r2, #255	; 0xff
    5936:	f88d c008 	strb.w	ip, [sp, #8]
    593a:	bf28      	it	cs
    593c:	22ff      	movcs	r2, #255	; 0xff
    593e:	f3c3 03c4 	ubfx	r3, r3, #3, #5
    5942:	f3c2 02c4 	ubfx	r2, r2, #3, #5
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
    5946:	f88d 3009 	strb.w	r3, [sp, #9]
    594a:	f88d 200a 	strb.w	r2, [sp, #10]
    594e:	9a02      	ldr	r2, [sp, #8]
    5950:	f7fe fb00 	bl	3f54 <light(int, int, CRGB)>
    5954:	e7b9      	b.n	58ca <drawSamples()+0x102>
  for (int ix = 1; ix < maxX + 1; ix++) {
    5956:	f10b 0b01 	add.w	fp, fp, #1
    595a:	f1bb 0f11 	cmp.w	fp, #17
    595e:	f47f af40 	bne.w	57e2 <drawSamples()+0x1a>
        }
      }
    }
  }
}
    5962:	b005      	add	sp, #20
    5964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5968:	200071b8 	.word	0x200071b8
    596c:	20003294 	.word	0x20003294
    5970:	20007178 	.word	0x20007178
    5974:	20004fc4 	.word	0x20004fc4
    5978:	aaaaaaab 	.word	0xaaaaaaab

0000597c <drawTimer(int)>:

/************************************************
    TIMER
 *************************************************/

void drawTimer(int timer) {
    597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (SMP.page == SMP.edit) {
    5980:	4f2c      	ldr	r7, [pc, #176]	; (5a34 <drawTimer(int)+0xb8>)
void drawTimer(int timer) {
    5982:	b083      	sub	sp, #12
  if (SMP.page == SMP.edit) {
    5984:	e9d7 2305 	ldrd	r2, r3, [r7, #20]
    5988:	429a      	cmp	r2, r3
    598a:	d002      	beq.n	5992 <drawTimer(int)+0x16>
          light(timer, y, CRGB(00, 00, 00));
        }
      }
    }
  }
}
    598c:	b003      	add	sp, #12
    598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5992:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    5996:	4d28      	ldr	r5, [pc, #160]	; (5a38 <drawTimer(int)+0xbc>)
    5998:	4682      	mov	sl, r0
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    599a:	f100 3bff 	add.w	fp, r0, #4294967295	; 0xffffffff
    599e:	186e      	adds	r6, r5, r1
    for (int y = 1; y < maxY; y++) {
    59a0:	2401      	movs	r4, #1
    59a2:	1a6d      	subs	r5, r5, r1
    59a4:	f8df 8098 	ldr.w	r8, [pc, #152]	; 5a40 <drawTimer(int)+0xc4>
      leds[(x - 1) + (maxX * (y - 1))] = color;
    59a8:	f04f 0900 	mov.w	r9, #0
        if (mute[note[((SMP.page - 1) * maxX) + timer][y][0]] == 0) {
    59ac:	4613      	mov	r3, r2
    59ae:	e00e      	b.n	59ce <drawTimer(int)+0x52>
        : r(ir), g(ig), b(ib)
    59b0:	23c8      	movs	r3, #200	; 0xc8
    59b2:	f8ad 2004 	strh.w	r2, [sp, #4]
          light(timer, y, CRGB(200, 200, 200));
    59b6:	4650      	mov	r0, sl
    59b8:	f88d 3006 	strb.w	r3, [sp, #6]
    59bc:	9a01      	ldr	r2, [sp, #4]
    59be:	f7fe fac9 	bl	3f54 <light(int, int, CRGB)>
    for (int y = 1; y < maxY; y++) {
    59c2:	3401      	adds	r4, #1
    59c4:	3630      	adds	r6, #48	; 0x30
    59c6:	3530      	adds	r5, #48	; 0x30
    59c8:	2c10      	cmp	r4, #16
    59ca:	d0df      	beq.n	598c <drawTimer(int)+0x10>
      if (note[((SMP.page - 1) * maxX) + timer][y][0] > 0) {
    59cc:	697b      	ldr	r3, [r7, #20]
  if (y > 0 && y < 17 && x > 0 && x < 17) {
    59ce:	f1bb 0f0f 	cmp.w	fp, #15
    59d2:	d80a      	bhi.n	59ea <drawTimer(int)+0x6e>
    if (y % 2 == 0) {
    59d4:	f014 0201 	ands.w	r2, r4, #1
    59d8:	d122      	bne.n	5a20 <drawTimer(int)+0xa4>
      leds[(maxX - x) + (maxX * (y - 1))] = color;
    59da:	f04f 010a 	mov.w	r1, #10
    59de:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
    59e2:	f885 2032 	strb.w	r2, [r5, #50]	; 0x32
    59e6:	f885 1030 	strb.w	r1, [r5, #48]	; 0x30
      if (note[((SMP.page - 1) * maxX) + timer][y][0] > 0) {
    59ea:	3b01      	subs	r3, #1
    59ec:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    59f0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    59f4:	4423      	add	r3, r4
    59f6:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
    59fa:	2b00      	cmp	r3, #0
    59fc:	d0e1      	beq.n	59c2 <drawTimer(int)+0x46>
        if (mute[note[((SMP.page - 1) * maxX) + timer][y][0]] == 0) {
    59fe:	490f      	ldr	r1, [pc, #60]	; (5a3c <drawTimer(int)+0xc0>)
    5a00:	f64c 02c8 	movw	r2, #51400	; 0xc8c8
    5a04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
          light(timer, y, CRGB(00, 00, 00));
    5a08:	4621      	mov	r1, r4
        if (mute[note[((SMP.page - 1) * maxX) + timer][y][0]] == 0) {
    5a0a:	2b00      	cmp	r3, #0
    5a0c:	d0d0      	beq.n	59b0 <drawTimer(int)+0x34>
    5a0e:	f8ad 9004 	strh.w	r9, [sp, #4]
          light(timer, y, CRGB(00, 00, 00));
    5a12:	4650      	mov	r0, sl
    5a14:	f88d 9006 	strb.w	r9, [sp, #6]
    5a18:	9a01      	ldr	r2, [sp, #4]
    5a1a:	f7fe fa9b 	bl	3f54 <light(int, int, CRGB)>
    5a1e:	e7d0      	b.n	59c2 <drawTimer(int)+0x46>
      leds[(x - 1) + (maxX * (y - 1))] = color;
    5a20:	f04f 020a 	mov.w	r2, #10
    5a24:	f806 9c02 	strb.w	r9, [r6, #-2]
    5a28:	f806 9c01 	strb.w	r9, [r6, #-1]
    5a2c:	f806 2c03 	strb.w	r2, [r6, #-3]
    5a30:	e7db      	b.n	59ea <drawTimer(int)+0x6e>
    5a32:	bf00      	nop
    5a34:	20003294 	.word	0x20003294
    5a38:	20006bf0 	.word	0x20006bf0
    5a3c:	20007178 	.word	0x20007178
    5a40:	200071b8 	.word	0x200071b8

00005a44 <drawCursor()>:
  freshnote = false;
  int x = SMP.x;
  int y = SMP.y;

  if (!freshnote) {
    if (dir == 1) pulse = pulse + 20 - (SMP.bpm / 30);
    5a44:	4a2b      	ldr	r2, [pc, #172]	; (5af4 <drawCursor()+0xb0>)
  freshnote = false;
    5a46:	f04f 0c00 	mov.w	ip, #0
  int x = SMP.x;
    5a4a:	4b2b      	ldr	r3, [pc, #172]	; (5af8 <drawCursor()+0xb4>)
  freshnote = false;
    5a4c:	492b      	ldr	r1, [pc, #172]	; (5afc <drawCursor()+0xb8>)
  int x = SMP.x;
    5a4e:	6b18      	ldr	r0, [r3, #48]	; 0x30
void drawCursor() {
    5a50:	b430      	push	{r4, r5}
    if (dir == 1) pulse = pulse + 20 - (SMP.bpm / 30);
    5a52:	6814      	ldr	r4, [r2, #0]
void drawCursor() {
    5a54:	b082      	sub	sp, #8
  freshnote = false;
    5a56:	f881 c000 	strb.w	ip, [r1]
    if (dir == 1) pulse = pulse + 20 - (SMP.bpm / 30);
    5a5a:	2c01      	cmp	r4, #1
  int y = SMP.y;
    5a5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    if (dir == 1) pulse = pulse + 20 - (SMP.bpm / 30);
    5a5e:	d03f      	beq.n	5ae0 <drawCursor()+0x9c>
    if (dir == -1) pulse = pulse - 20 - (SMP.bpm / 30);
    5a60:	3401      	adds	r4, #1
    5a62:	d139      	bne.n	5ad8 <drawCursor()+0x94>
    5a64:	4d26      	ldr	r5, [pc, #152]	; (5b00 <drawCursor()+0xbc>)
    5a66:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
    5a6a:	68db      	ldr	r3, [r3, #12]
    5a6c:	edd5 7a00 	vldr	s15, [r5]
    5a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5a74:	4c23      	ldr	r4, [pc, #140]	; (5b04 <drawCursor()+0xc0>)
    5a76:	fb84 c403 	smull	ip, r4, r4, r3
    5a7a:	441c      	add	r4, r3
    5a7c:	17db      	asrs	r3, r3, #31
    5a7e:	ebc3 1324 	rsb	r3, r3, r4, asr #4
    5a82:	ee07 3a10 	vmov	s14, r3
    5a86:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    5a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    5a8e:	edc5 7a00 	vstr	s15, [r5]
    if (pulse > 160) {
    5a92:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 5b08 <drawCursor()+0xc4>
    5a96:	eef4 7ac7 	vcmpe.f32	s15, s14
    5a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a9e:	dd02      	ble.n	5aa6 <drawCursor()+0x62>
      dir = -1;
    5aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aa4:	6013      	str	r3, [r2, #0]
    }
    if (pulse < 0) {
    5aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    5aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5aae:	d501      	bpl.n	5ab4 <drawCursor()+0x70>
      dir = 1;
    5ab0:	2301      	movs	r3, #1
    5ab2:	6013      	str	r3, [r2, #0]
    }
    light(x, y, CRGB(200 - (int)pulse, 200 - (int)pulse, 200 - (int)pulse));
    5ab4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    5ab8:	ee17 3a90 	vmov	r3, s15
    5abc:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
    5ac0:	b2db      	uxtb	r3, r3
    5ac2:	f88d 3004 	strb.w	r3, [sp, #4]
    5ac6:	f88d 3005 	strb.w	r3, [sp, #5]
    5aca:	f88d 3006 	strb.w	r3, [sp, #6]
    5ace:	9a01      	ldr	r2, [sp, #4]
  }
}
    5ad0:	b002      	add	sp, #8
    5ad2:	bc30      	pop	{r4, r5}
    light(x, y, CRGB(200 - (int)pulse, 200 - (int)pulse, 200 - (int)pulse));
    5ad4:	f7fe ba3e 	b.w	3f54 <light(int, int, CRGB)>
    if (dir == 1) pulse = pulse + 20 - (SMP.bpm / 30);
    5ad8:	4b09      	ldr	r3, [pc, #36]	; (5b00 <drawCursor()+0xbc>)
    5ada:	edd3 7a00 	vldr	s15, [r3]
    5ade:	e7d8      	b.n	5a92 <drawCursor()+0x4e>
    5ae0:	4d07      	ldr	r5, [pc, #28]	; (5b00 <drawCursor()+0xbc>)
    5ae2:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
    5ae6:	68db      	ldr	r3, [r3, #12]
    5ae8:	edd5 7a00 	vldr	s15, [r5]
    5aec:	ee77 7a87 	vadd.f32	s15, s15, s14
    5af0:	e7c0      	b.n	5a74 <drawCursor()+0x30>
    5af2:	bf00      	nop
    5af4:	200038e0 	.word	0x200038e0
    5af8:	20003294 	.word	0x20003294
    5afc:	2000c951 	.word	0x2000c951
    5b00:	2000b994 	.word	0x2000b994
    5b04:	88888889 	.word	0x88888889
    5b08:	43200000 	.word	0x43200000

00005b0c <showIcons(String, CRGB)>:


void showIcons(String ico, CRGB colors) {
    5b0c:	b570      	push	{r4, r5, r6, lr}
    5b0e:	b082      	sub	sp, #8
    5b10:	4605      	mov	r5, r0
    5b12:	9101      	str	r1, [sp, #4]
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    5b14:	4952      	ldr	r1, [pc, #328]	; (5c60 <showIcons(String, CRGB)+0x154>)
    5b16:	f010 f813 	bl	15b40 <String::equals(char const*) const>
  if (ico == "samplepack") {
    5b1a:	b178      	cbz	r0, 5b3c <showIcons(String, CRGB)+0x30>
    5b1c:	4c51      	ldr	r4, [pc, #324]	; (5c64 <showIcons(String, CRGB)+0x158>)
    5b1e:	2101      	movs	r1, #1
    5b20:	2002      	movs	r0, #2
    5b22:	f104 0690 	add.w	r6, r4, #144	; 0x90
    5b26:	e001      	b.n	5b2c <showIcons(String, CRGB)+0x20>
    for (int gx = 0; gx < 18; gx++) {
      light(icon_samplepack[gx][0], maxY - icon_samplepack[gx][1], colors);
    5b28:	e954 0102 	ldrd	r0, r1, [r4, #-8]
    for (int gx = 0; gx < 18; gx++) {
    5b2c:	3408      	adds	r4, #8
      light(icon_samplepack[gx][0], maxY - icon_samplepack[gx][1], colors);
    5b2e:	f1c1 0110 	rsb	r1, r1, #16
    5b32:	9a01      	ldr	r2, [sp, #4]
    5b34:	f7fe fa0e 	bl	3f54 <light(int, int, CRGB)>
    for (int gx = 0; gx < 18; gx++) {
    5b38:	42a6      	cmp	r6, r4
    5b3a:	d1f5      	bne.n	5b28 <showIcons(String, CRGB)+0x1c>
    5b3c:	494a      	ldr	r1, [pc, #296]	; (5c68 <showIcons(String, CRGB)+0x15c>)
    5b3e:	4628      	mov	r0, r5
    5b40:	f00f fffe 	bl	15b40 <String::equals(char const*) const>
    }
  }

  if (ico == "sample") {
    5b44:	b178      	cbz	r0, 5b66 <showIcons(String, CRGB)+0x5a>
    5b46:	4c49      	ldr	r4, [pc, #292]	; (5c6c <showIcons(String, CRGB)+0x160>)
    5b48:	2101      	movs	r1, #1
    5b4a:	2003      	movs	r0, #3
    5b4c:	f104 0698 	add.w	r6, r4, #152	; 0x98
    5b50:	e001      	b.n	5b56 <showIcons(String, CRGB)+0x4a>
    for (int gx = 0; gx < 19; gx++) {
      light(icon_sample[gx][0], maxY - icon_sample[gx][1], colors);
    5b52:	e954 0102 	ldrd	r0, r1, [r4, #-8]
    for (int gx = 0; gx < 19; gx++) {
    5b56:	3408      	adds	r4, #8
      light(icon_sample[gx][0], maxY - icon_sample[gx][1], colors);
    5b58:	f1c1 0110 	rsb	r1, r1, #16
    5b5c:	9a01      	ldr	r2, [sp, #4]
    5b5e:	f7fe f9f9 	bl	3f54 <light(int, int, CRGB)>
    for (int gx = 0; gx < 19; gx++) {
    5b62:	42b4      	cmp	r4, r6
    5b64:	d1f5      	bne.n	5b52 <showIcons(String, CRGB)+0x46>
    5b66:	4942      	ldr	r1, [pc, #264]	; (5c70 <showIcons(String, CRGB)+0x164>)
    5b68:	4628      	mov	r0, r5
    5b6a:	f00f ffe9 	bl	15b40 <String::equals(char const*) const>
    }
  }

  if (ico == "loadsave") {
    5b6e:	b178      	cbz	r0, 5b90 <showIcons(String, CRGB)+0x84>
    5b70:	4c40      	ldr	r4, [pc, #256]	; (5c74 <showIcons(String, CRGB)+0x168>)
    5b72:	2101      	movs	r1, #1
    5b74:	2003      	movs	r0, #3
    5b76:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
    5b7a:	e001      	b.n	5b80 <showIcons(String, CRGB)+0x74>
    for (int gx = 0; gx < 20; gx++) {
      light(icon_loadsave[gx][0], maxY - icon_loadsave[gx][1], colors);
    5b7c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
    for (int gx = 0; gx < 20; gx++) {
    5b80:	3408      	adds	r4, #8
      light(icon_loadsave[gx][0], maxY - icon_loadsave[gx][1], colors);
    5b82:	f1c1 0110 	rsb	r1, r1, #16
    5b86:	9a01      	ldr	r2, [sp, #4]
    5b88:	f7fe f9e4 	bl	3f54 <light(int, int, CRGB)>
    for (int gx = 0; gx < 20; gx++) {
    5b8c:	42b4      	cmp	r4, r6
    5b8e:	d1f5      	bne.n	5b7c <showIcons(String, CRGB)+0x70>
    5b90:	4939      	ldr	r1, [pc, #228]	; (5c78 <showIcons(String, CRGB)+0x16c>)
    5b92:	4628      	mov	r0, r5
    5b94:	f00f ffd4 	bl	15b40 <String::equals(char const*) const>
    }
  }

  if (ico == "helper_load") {
    5b98:	b170      	cbz	r0, 5bb8 <showIcons(String, CRGB)+0xac>
    for (int gx = 0; gx < 3; gx++) {
      light(helper_load[gx][0], maxY - helper_load[gx][1], colors);
    5b9a:	2101      	movs	r1, #1
    5b9c:	9a01      	ldr	r2, [sp, #4]
    5b9e:	4608      	mov	r0, r1
    5ba0:	f7fe f9d8 	bl	3f54 <light(int, int, CRGB)>
    5ba4:	9a01      	ldr	r2, [sp, #4]
    5ba6:	2101      	movs	r1, #1
    5ba8:	2002      	movs	r0, #2
    5baa:	f7fe f9d3 	bl	3f54 <light(int, int, CRGB)>
    5bae:	9a01      	ldr	r2, [sp, #4]
    5bb0:	2101      	movs	r1, #1
    5bb2:	2003      	movs	r0, #3
    5bb4:	f7fe f9ce 	bl	3f54 <light(int, int, CRGB)>
    5bb8:	4930      	ldr	r1, [pc, #192]	; (5c7c <showIcons(String, CRGB)+0x170>)
    5bba:	4628      	mov	r0, r5
    5bbc:	f00f ffc0 	bl	15b40 <String::equals(char const*) const>
    }
  }


  if (ico == "helper_folder") {
    5bc0:	b170      	cbz	r0, 5be0 <showIcons(String, CRGB)+0xd4>

    for (int gx = 0; gx < 3; gx++) {

      light(helper_folder[gx][0], maxY - helper_folder[gx][1], colors);
    5bc2:	9a01      	ldr	r2, [sp, #4]
    5bc4:	2103      	movs	r1, #3
    5bc6:	2006      	movs	r0, #6
    5bc8:	f7fe f9c4 	bl	3f54 <light(int, int, CRGB)>
    5bcc:	9a01      	ldr	r2, [sp, #4]
    5bce:	2102      	movs	r1, #2
    5bd0:	2006      	movs	r0, #6
    5bd2:	f7fe f9bf 	bl	3f54 <light(int, int, CRGB)>
    5bd6:	9a01      	ldr	r2, [sp, #4]
    5bd8:	2101      	movs	r1, #1
    5bda:	2006      	movs	r0, #6
    5bdc:	f7fe f9ba 	bl	3f54 <light(int, int, CRGB)>
    5be0:	4927      	ldr	r1, [pc, #156]	; (5c80 <showIcons(String, CRGB)+0x174>)
    5be2:	4628      	mov	r0, r5
    5be4:	f00f ffac 	bl	15b40 <String::equals(char const*) const>
    }
  }

  if (ico == "helper_save") {
    5be8:	b170      	cbz	r0, 5c08 <showIcons(String, CRGB)+0xfc>
    for (int gx = 0; gx < 3; gx++) {
      light(helper_save[gx][0], maxY - helper_save[gx][1], colors);
    5bea:	9a01      	ldr	r2, [sp, #4]
    5bec:	2101      	movs	r1, #1
    5bee:	2005      	movs	r0, #5
    5bf0:	f7fe f9b0 	bl	3f54 <light(int, int, CRGB)>
    5bf4:	9a01      	ldr	r2, [sp, #4]
    5bf6:	2101      	movs	r1, #1
    5bf8:	2006      	movs	r0, #6
    5bfa:	f7fe f9ab 	bl	3f54 <light(int, int, CRGB)>
    5bfe:	9a01      	ldr	r2, [sp, #4]
    5c00:	2101      	movs	r1, #1
    5c02:	2007      	movs	r0, #7
    5c04:	f7fe f9a6 	bl	3f54 <light(int, int, CRGB)>
    5c08:	491e      	ldr	r1, [pc, #120]	; (5c84 <showIcons(String, CRGB)+0x178>)
    5c0a:	4628      	mov	r0, r5
    5c0c:	f00f ff98 	bl	15b40 <String::equals(char const*) const>
    }
  }

  if (ico == "helper_select") {
    5c10:	b170      	cbz	r0, 5c30 <showIcons(String, CRGB)+0x124>
    for (int gx = 0; gx < 3; gx++) {
      light(helper_select[gx][0], maxY - helper_select[gx][1], colors);
    5c12:	9a01      	ldr	r2, [sp, #4]
    5c14:	2101      	movs	r1, #1
    5c16:	200d      	movs	r0, #13
    5c18:	f7fe f99c 	bl	3f54 <light(int, int, CRGB)>
    5c1c:	9a01      	ldr	r2, [sp, #4]
    5c1e:	2101      	movs	r1, #1
    5c20:	200e      	movs	r0, #14
    5c22:	f7fe f997 	bl	3f54 <light(int, int, CRGB)>
    5c26:	9a01      	ldr	r2, [sp, #4]
    5c28:	2101      	movs	r1, #1
    5c2a:	200f      	movs	r0, #15
    5c2c:	f7fe f992 	bl	3f54 <light(int, int, CRGB)>
    5c30:	4915      	ldr	r1, [pc, #84]	; (5c88 <showIcons(String, CRGB)+0x17c>)
    5c32:	4628      	mov	r0, r5
    5c34:	f00f ff84 	bl	15b40 <String::equals(char const*) const>
    }
  }

  if (ico == "bpm") {
    5c38:	b178      	cbz	r0, 5c5a <showIcons(String, CRGB)+0x14e>
    5c3a:	4c14      	ldr	r4, [pc, #80]	; (5c8c <showIcons(String, CRGB)+0x180>)
    5c3c:	210b      	movs	r1, #11
    5c3e:	2002      	movs	r0, #2
    5c40:	f504 7598 	add.w	r5, r4, #304	; 0x130
    5c44:	e001      	b.n	5c4a <showIcons(String, CRGB)+0x13e>
    for (int gx = 0; gx < 38; gx++) {
      light(icon_bpm[gx][0], maxY - icon_bpm[gx][1], colors);
    5c46:	e954 0102 	ldrd	r0, r1, [r4, #-8]
    for (int gx = 0; gx < 38; gx++) {
    5c4a:	3408      	adds	r4, #8
      light(icon_bpm[gx][0], maxY - icon_bpm[gx][1], colors);
    5c4c:	f1c1 0110 	rsb	r1, r1, #16
    5c50:	9a01      	ldr	r2, [sp, #4]
    5c52:	f7fe f97f 	bl	3f54 <light(int, int, CRGB)>
    for (int gx = 0; gx < 38; gx++) {
    5c56:	42ac      	cmp	r4, r5
    5c58:	d1f5      	bne.n	5c46 <showIcons(String, CRGB)+0x13a>
    }
  }
}
    5c5a:	b002      	add	sp, #8
    5c5c:	bd70      	pop	{r4, r5, r6, pc}
    5c5e:	bf00      	nop
    5c60:	20000bd0 	.word	0x20000bd0
    5c64:	60002cbc 	.word	0x60002cbc
    5c68:	20000bdc 	.word	0x20000bdc
    5c6c:	60002d4c 	.word	0x60002d4c
    5c70:	20000be4 	.word	0x20000be4
    5c74:	60002de4 	.word	0x60002de4
    5c78:	20000bf0 	.word	0x20000bf0
    5c7c:	20000bfc 	.word	0x20000bfc
    5c80:	20000c0c 	.word	0x20000c0c
    5c84:	20000c18 	.word	0x20000c18
    5c88:	20000c28 	.word	0x20000c28
    5c8c:	60002e84 	.word	0x60002e84

00005c90 <setVolume()>:
void setVolume() {
    5c90:	b570      	push	{r4, r5, r6, lr}
  if (setvol) {
    5c92:	4e6d      	ldr	r6, [pc, #436]	; (5e48 <setVolume()+0x1b8>)
    5c94:	7835      	ldrb	r5, [r6, #0]
void setVolume() {
    5c96:	ed2d 8b02 	vpush	{d8}
    5c9a:	b088      	sub	sp, #32
  if (setvol) {
    5c9c:	b195      	cbz	r5, 5cc4 <setVolume()+0x34>
    drawVolume(SMP.vol);
    5c9e:	4c6b      	ldr	r4, [pc, #428]	; (5e4c <setVolume()+0x1bc>)
    5ca0:	68a0      	ldr	r0, [r4, #8]
    5ca2:	f7fe ff39 	bl	4b18 <drawVolume(int)>
  if (currentMode->pos[3] != SMP.vol) {
    5ca6:	4d6a      	ldr	r5, [pc, #424]	; (5e50 <setVolume()+0x1c0>)
    5ca8:	68a1      	ldr	r1, [r4, #8]
    5caa:	682b      	ldr	r3, [r5, #0]
    5cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
    5cae:	428a      	cmp	r2, r1
    5cb0:	f040 808b 	bne.w	5dca <setVolume()+0x13a>
  if (currentMode->pos[2] != SMP.bpm) {
    5cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    5cb6:	68e3      	ldr	r3, [r4, #12]
    5cb8:	429a      	cmp	r2, r3
    5cba:	d124      	bne.n	5d06 <setVolume()+0x76>
}
    5cbc:	b008      	add	sp, #32
    5cbe:	ecbd 8b02 	vpop	{d8}
    5cc2:	bd70      	pop	{r4, r5, r6, pc}
  FastLED.clear();
    5cc4:	4629      	mov	r1, r5
    5cc6:	4863      	ldr	r0, [pc, #396]	; (5e54 <setVolume()+0x1c4>)
    5cc8:	f005 f960 	bl	af8c <CFastLED::clear(bool)>
    showIcons("bpm", CRGB(0, 10, 10));
    5ccc:	4962      	ldr	r1, [pc, #392]	; (5e58 <setVolume()+0x1c8>)
    5cce:	a804      	add	r0, sp, #16
    showNumber(SMP.bpm, false, 0);
    5cd0:	4c5e      	ldr	r4, [pc, #376]	; (5e4c <setVolume()+0x1bc>)
    showIcons("bpm", CRGB(0, 10, 10));
    5cd2:	f00f fe49 	bl	15968 <String::String(char const*)>
    5cd6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    5cda:	230a      	movs	r3, #10
    5cdc:	a804      	add	r0, sp, #16
    5cde:	f8ad 2000 	strh.w	r2, [sp]
    5ce2:	f88d 3002 	strb.w	r3, [sp, #2]
    5ce6:	9900      	ldr	r1, [sp, #0]
    5ce8:	f7ff ff10 	bl	5b0c <showIcons(String, CRGB)>
    5cec:	a804      	add	r0, sp, #16
    5cee:	f00f fdff 	bl	158f0 <String::~String()>
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5cf2:	f8ad 5010 	strh.w	r5, [sp, #16]
    5cf6:	f88d 5012 	strb.w	r5, [sp, #18]
    showNumber(SMP.bpm, false, 0);
    5cfa:	462a      	mov	r2, r5
    5cfc:	9904      	ldr	r1, [sp, #16]
    5cfe:	68e0      	ldr	r0, [r4, #12]
    5d00:	f7ff f9aa 	bl	5058 <showNumber(int, CRGB, int)>
    5d04:	e7cf      	b.n	5ca6 <setVolume()+0x16>
  FastLED.clear();
    5d06:	2100      	movs	r1, #0
    5d08:	4852      	ldr	r0, [pc, #328]	; (5e54 <setVolume()+0x1c4>)
    5d0a:	f005 f93f 	bl	af8c <CFastLED::clear(bool)>
    setvol = false;
    5d0e:	2300      	movs	r3, #0
	StringSumHelper(const char *p) : String(p) {}
    5d10:	4952      	ldr	r1, [pc, #328]	; (5e5c <setVolume()+0x1cc>)
    5d12:	a804      	add	r0, sp, #16
    5d14:	7033      	strb	r3, [r6, #0]
    5d16:	f00f fe27 	bl	15968 <String::String(char const*)>
    Serial.println("BPM: " + String(currentMode->pos[2]));
    5d1a:	682b      	ldr	r3, [r5, #0]
    5d1c:	220a      	movs	r2, #10
    5d1e:	4668      	mov	r0, sp
    5d20:	6b99      	ldr	r1, [r3, #56]	; 0x38
    5d22:	f00f fe35 	bl	15990 <String::String(int, unsigned char)>
    5d26:	4669      	mov	r1, sp
    5d28:	a804      	add	r0, sp, #16
    5d2a:	f00f fed7 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    5d2e:	4601      	mov	r1, r0
    5d30:	484b      	ldr	r0, [pc, #300]	; (5e60 <setVolume()+0x1d0>)
    5d32:	f00f fc6d 	bl	15610 <Print::print(String const&)>
    5d36:	484a      	ldr	r0, [pc, #296]	; (5e60 <setVolume()+0x1d0>)
    5d38:	f00f fc9c 	bl	15674 <Print::println()>
    5d3c:	4668      	mov	r0, sp
    5d3e:	f00f fdd7 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    5d42:	a804      	add	r0, sp, #16
    5d44:	f00f fdd4 	bl	158f0 <String::~String()>
    SMP.bpm = currentMode->pos[2];
    5d48:	682a      	ldr	r2, [r5, #0]
    thisTimer.update(((60 * 1000 / SMP.bpm) / 4) * 1000);
    5d4a:	f64e 2360 	movw	r3, #60000	; 0xea60
    SMP.bpm = currentMode->pos[2];
    5d4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
    thisTimer.update(((60 * 1000 / SMP.bpm) / 4) * 1000);
    5d50:	fb93 f3f2 	sdiv	r3, r3, r2
    5d54:	2b00      	cmp	r3, #0
    SMP.bpm = currentMode->pos[2];
    5d56:	60e2      	str	r2, [r4, #12]
    thisTimer.update(((60 * 1000 / SMP.bpm) / 4) * 1000);
    5d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d5c:	bfb8      	it	lt
    5d5e:	3303      	addlt	r3, #3
    5d60:	109b      	asrs	r3, r3, #2
    5d62:	fb02 f303 	mul.w	r3, r2, r3
		if (microseconds < 0) return;
    5d66:	2b00      	cmp	r3, #0
    5d68:	db0b      	blt.n	5d82 <setVolume()+0xf2>
		if (microseconds == 0 || microseconds > MAX_PERIOD) return;
    5d6a:	1e59      	subs	r1, r3, #1
    5d6c:	4a3d      	ldr	r2, [pc, #244]	; (5e64 <setVolume()+0x1d4>)
    5d6e:	4291      	cmp	r1, r2
    5d70:	d207      	bcs.n	5d82 <setVolume()+0xf2>
    5d72:	4a3d      	ldr	r2, [pc, #244]	; (5e68 <setVolume()+0x1d8>)
    5d74:	6812      	ldr	r2, [r2, #0]
		if (channel) channel->LDVAL = cycles;
    5d76:	b122      	cbz	r2, 5d82 <setVolume()+0xf2>
		uint32_t cycles = (24000000 / 1000000) * microseconds - 1;
    5d78:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5d7c:	00db      	lsls	r3, r3, #3
    5d7e:	3b01      	subs	r3, #1
		if (channel) channel->LDVAL = cycles;
    5d80:	6013      	str	r3, [r2, #0]
  FastLED.clear();
    5d82:	2100      	movs	r1, #0
    5d84:	4833      	ldr	r0, [pc, #204]	; (5e54 <setVolume()+0x1c4>)
    5d86:	f005 f901 	bl	af8c <CFastLED::clear(bool)>
    showIcons("bpm", CRGB(0, 10, 10));
    5d8a:	4933      	ldr	r1, [pc, #204]	; (5e58 <setVolume()+0x1c8>)
    5d8c:	a804      	add	r0, sp, #16
    5d8e:	f00f fdeb 	bl	15968 <String::String(char const*)>
        : r(ir), g(ig), b(ib)
    5d92:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    5d96:	230a      	movs	r3, #10
    5d98:	a804      	add	r0, sp, #16
    5d9a:	f8ad 2000 	strh.w	r2, [sp]
    5d9e:	f88d 3002 	strb.w	r3, [sp, #2]
    5da2:	9900      	ldr	r1, [sp, #0]
    5da4:	f7ff feb2 	bl	5b0c <showIcons(String, CRGB)>
    5da8:	a804      	add	r0, sp, #16
    5daa:	f00f fda1 	bl	158f0 <String::~String()>
    : r((colorcode >> 16) & 0xFF), g((colorcode >> 8) & 0xFF), b((colorcode >> 0) & 0xFF)
    5dae:	2200      	movs	r2, #0
    showNumber(SMP.bpm, false, 0);
    5db0:	68e0      	ldr	r0, [r4, #12]
    5db2:	f8ad 2010 	strh.w	r2, [sp, #16]
    5db6:	f88d 2012 	strb.w	r2, [sp, #18]
    5dba:	9904      	ldr	r1, [sp, #16]
}
    5dbc:	b008      	add	sp, #32
    5dbe:	ecbd 8b02 	vpop	{d8}
    5dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    showNumber(SMP.bpm, false, 0);
    5dc6:	f7ff b947 	b.w	5058 <showNumber(int, CRGB, int)>
    float vol = float(SMP.vol / 10.0);
    5dca:	ee07 2a90 	vmov	s15, r2
	StringSumHelper(const char *p) : String(p) {}
    5dce:	4927      	ldr	r1, [pc, #156]	; (5e6c <setVolume()+0x1dc>)
    5dd0:	a804      	add	r0, sp, #16
    SMP.vol = currentMode->pos[3];
    5dd2:	60a2      	str	r2, [r4, #8]
    float vol = float(SMP.vol / 10.0);
    5dd4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    5dd8:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
    5ddc:	ee86 8b07 	vdiv.f64	d8, d6, d7
    5de0:	f00f fdc2 	bl	15968 <String::String(char const*)>
    Serial.println("Vol: " + String(vol));
    5de4:	2102      	movs	r1, #2
    5de6:	4668      	mov	r0, sp
    float vol = float(SMP.vol / 10.0);
    5de8:	eeb7 8bc8 	vcvt.f32.f64	s16, d8
    Serial.println("Vol: " + String(vol));
    5dec:	eeb0 0a48 	vmov.f32	s0, s16
    5df0:	f00f fdfe 	bl	159f0 <String::String(float, unsigned char)>
    5df4:	4669      	mov	r1, sp
    5df6:	a804      	add	r0, sp, #16
    5df8:	f00f fe70 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    5dfc:	4601      	mov	r1, r0
    5dfe:	4818      	ldr	r0, [pc, #96]	; (5e60 <setVolume()+0x1d0>)
    5e00:	f00f fc06 	bl	15610 <Print::print(String const&)>
    5e04:	4816      	ldr	r0, [pc, #88]	; (5e60 <setVolume()+0x1d0>)
    5e06:	f00f fc35 	bl	15674 <Print::println()>
    5e0a:	4668      	mov	r0, sp
    5e0c:	f00f fd70 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    5e10:	a804      	add	r0, sp, #16
    5e12:	f00f fd6d 	bl	158f0 <String::~String()>
    if (vol < 1.0) audioShield.volume(vol);
    5e16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    5e1a:	eeb4 8ae7 	vcmpe.f32	s16, s15
    5e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5e22:	d403      	bmi.n	5e2c <setVolume()+0x19c>
    setvol = true;
    5e24:	2201      	movs	r2, #1
  if (currentMode->pos[2] != SMP.bpm) {
    5e26:	682b      	ldr	r3, [r5, #0]
    setvol = true;
    5e28:	7032      	strb	r2, [r6, #0]
    5e2a:	e743      	b.n	5cb4 <setVolume()+0x24>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
	void setAddress(uint8_t level);
	bool enable(void);//For Teensy LC the SGTL acts as master, for all other Teensys as slave.
	bool enable(const unsigned extMCLK, const uint32_t pllFreq = (4096.0l * AUDIO_SAMPLE_RATE_EXACT) ); //With extMCLK > 0, the SGTL acts as Master
	bool disable(void) { return false; }
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    5e2c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 5e70 <setVolume()+0x1e0>
    5e30:	eddf 7a10 	vldr	s15, [pc, #64]	; 5e74 <setVolume()+0x1e4>
    5e34:	4810      	ldr	r0, [pc, #64]	; (5e78 <setVolume()+0x1e8>)
    5e36:	eee8 7a07 	vfma.f32	s15, s16, s14
    5e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    5e3e:	ee17 1a90 	vmov	r1, s15
    5e42:	f005 fd05 	bl	b850 <AudioControlSGTL5000::volumeInteger(unsigned int)>
    5e46:	e7ed      	b.n	5e24 <setVolume()+0x194>
    5e48:	2000c95a 	.word	0x2000c95a
    5e4c:	20003294 	.word	0x20003294
    5e50:	200038c8 	.word	0x200038c8
    5e54:	200045e8 	.word	0x200045e8
    5e58:	20000c28 	.word	0x20000c28
    5e5c:	20000bc8 	.word	0x20000bc8
    5e60:	20003314 	.word	0x20003314
    5e64:	0aaaaaaa 	.word	0x0aaaaaaa
    5e68:	20003c90 	.word	0x20003c90
    5e6c:	20000bc0 	.word	0x20000bc0
    5e70:	43010000 	.word	0x43010000
    5e74:	3eff7cee 	.word	0x3eff7cee
    5e78:	2000679c 	.word	0x2000679c

00005e7c <showMenu()>:
void showMenu() {
    5e7c:	b530      	push	{r4, r5, lr}
    5e7e:	b0a1      	sub	sp, #132	; 0x84
        : r(ir), g(ig), b(ib)
    5e80:	2500      	movs	r5, #0
  drawNoSD();
    5e82:	f7fd ff97 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    5e86:	2100      	movs	r1, #0
    5e88:	4861      	ldr	r0, [pc, #388]	; (6010 <showMenu()+0x194>)
    5e8a:	f005 f87f 	bl	af8c <CFastLED::clear(bool)>
  showIcons("loadsave", CRGB(10, 5, 0));
    5e8e:	4961      	ldr	r1, [pc, #388]	; (6014 <showMenu()+0x198>)
    5e90:	a812      	add	r0, sp, #72	; 0x48
  sprintf(OUTPUTf, "%d.txt", SMP.file);
    5e92:	4c61      	ldr	r4, [pc, #388]	; (6018 <showMenu()+0x19c>)
  showIcons("loadsave", CRGB(10, 5, 0));
    5e94:	f00f fd68 	bl	15968 <String::String(char const*)>
    5e98:	f240 530a 	movw	r3, #1290	; 0x50a
    5e9c:	f88d 5016 	strb.w	r5, [sp, #22]
    5ea0:	a812      	add	r0, sp, #72	; 0x48
    5ea2:	f8ad 3014 	strh.w	r3, [sp, #20]
    5ea6:	9905      	ldr	r1, [sp, #20]
    5ea8:	f7ff fe30 	bl	5b0c <showIcons(String, CRGB)>
    5eac:	a812      	add	r0, sp, #72	; 0x48
    5eae:	f00f fd1f 	bl	158f0 <String::~String()>
  showIcons("helper_select", CRGB(0, 0, 5));
    5eb2:	495a      	ldr	r1, [pc, #360]	; (601c <showMenu()+0x1a0>)
    5eb4:	a812      	add	r0, sp, #72	; 0x48
    5eb6:	f00f fd57 	bl	15968 <String::String(char const*)>
    5eba:	2305      	movs	r3, #5
    5ebc:	f8ad 5014 	strh.w	r5, [sp, #20]
    5ec0:	a812      	add	r0, sp, #72	; 0x48
    5ec2:	f88d 3016 	strb.w	r3, [sp, #22]
    5ec6:	9905      	ldr	r1, [sp, #20]
    5ec8:	f7ff fe20 	bl	5b0c <showIcons(String, CRGB)>
    5ecc:	a812      	add	r0, sp, #72	; 0x48
    5ece:	f00f fd0f 	bl	158f0 <String::~String()>
  sprintf(OUTPUTf, "%d.txt", SMP.file);
    5ed2:	69e2      	ldr	r2, [r4, #28]
    5ed4:	4952      	ldr	r1, [pc, #328]	; (6020 <showMenu()+0x1a4>)
    5ed6:	a805      	add	r0, sp, #20
    5ed8:	f01b fe56 	bl	21b88 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    5edc:	4a51      	ldr	r2, [pc, #324]	; (6024 <showMenu()+0x1a8>)
    5ede:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d05a      	beq.n	5f9c <showMenu()+0x120>
    return tmp.open(this, path, O_RDONLY);
    5ee6:	4619      	mov	r1, r3
    5ee8:	aa05      	add	r2, sp, #20
    5eea:	462b      	mov	r3, r5
    5eec:	a812      	add	r0, sp, #72	; 0x48
    5eee:	9512      	str	r5, [sp, #72]	; 0x48
    5ef0:	f009 fd42 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    5ef4:	2800      	cmp	r0, #0
    5ef6:	d05b      	beq.n	5fb0 <showMenu()+0x134>
    showIcons("helper_save", CRGB(1, 0, 0));
    5ef8:	494b      	ldr	r1, [pc, #300]	; (6028 <showMenu()+0x1ac>)
    5efa:	a812      	add	r0, sp, #72	; 0x48
    5efc:	f00f fd34 	bl	15968 <String::String(char const*)>
    5f00:	2500      	movs	r5, #0
    5f02:	2301      	movs	r3, #1
    5f04:	a812      	add	r0, sp, #72	; 0x48
    5f06:	f88d 5006 	strb.w	r5, [sp, #6]
    5f0a:	f8ad 3004 	strh.w	r3, [sp, #4]
    5f0e:	9901      	ldr	r1, [sp, #4]
    5f10:	f7ff fdfc 	bl	5b0c <showIcons(String, CRGB)>
    5f14:	a812      	add	r0, sp, #72	; 0x48
    5f16:	f00f fceb 	bl	158f0 <String::~String()>
    showIcons("helper_load", CRGB(0, 20, 0));
    5f1a:	4944      	ldr	r1, [pc, #272]	; (602c <showMenu()+0x1b0>)
    5f1c:	a812      	add	r0, sp, #72	; 0x48
    5f1e:	f00f fd23 	bl	15968 <String::String(char const*)>
    5f22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    5f26:	f88d 5006 	strb.w	r5, [sp, #6]
    5f2a:	a812      	add	r0, sp, #72	; 0x48
    5f2c:	f8ad 3004 	strh.w	r3, [sp, #4]
    5f30:	9901      	ldr	r1, [sp, #4]
    5f32:	f7ff fdeb 	bl	5b0c <showIcons(String, CRGB)>
    5f36:	a812      	add	r0, sp, #72	; 0x48
    5f38:	f00f fcda 	bl	158f0 <String::~String()>
    5f3c:	2314      	movs	r3, #20
    5f3e:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
    showNumber(SMP.file, CRGB(0, 0, 20), 0);
    5f42:	462a      	mov	r2, r5
    5f44:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    5f48:	69e0      	ldr	r0, [r4, #28]
    5f4a:	9912      	ldr	r1, [sp, #72]	; 0x48
    5f4c:	f7ff f884 	bl	5058 <showNumber(int, CRGB, int)>
  if (currentMode->pos[knopf] != SMP.file) {
    5f50:	4d37      	ldr	r5, [pc, #220]	; (6030 <showMenu()+0x1b4>)
    5f52:	69e3      	ldr	r3, [r4, #28]
    5f54:	682a      	ldr	r2, [r5, #0]
    5f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
    5f58:	429a      	cmp	r2, r3
    5f5a:	d01d      	beq.n	5f98 <showMenu()+0x11c>
	StringSumHelper(const char *p) : String(p) {}
    5f5c:	4935      	ldr	r1, [pc, #212]	; (6034 <showMenu()+0x1b8>)
    5f5e:	a812      	add	r0, sp, #72	; 0x48
    5f60:	f00f fd02 	bl	15968 <String::String(char const*)>
    Serial.print("File: " + String(currentMode->pos[knopf]));
    5f64:	682b      	ldr	r3, [r5, #0]
    5f66:	220a      	movs	r2, #10
    5f68:	a801      	add	r0, sp, #4
    5f6a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    5f6c:	f00f fd10 	bl	15990 <String::String(int, unsigned char)>
    5f70:	a901      	add	r1, sp, #4
    5f72:	a812      	add	r0, sp, #72	; 0x48
    5f74:	f00f fdb2 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    5f78:	4601      	mov	r1, r0
    5f7a:	482f      	ldr	r0, [pc, #188]	; (6038 <showMenu()+0x1bc>)
    5f7c:	f00f fb48 	bl	15610 <Print::print(String const&)>
    5f80:	a801      	add	r0, sp, #4
    5f82:	f00f fcb5 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    5f86:	a812      	add	r0, sp, #72	; 0x48
    5f88:	f00f fcb2 	bl	158f0 <String::~String()>
    Serial.println();
    5f8c:	482a      	ldr	r0, [pc, #168]	; (6038 <showMenu()+0x1bc>)
    5f8e:	f00f fb71 	bl	15674 <Print::println()>
    SMP.file = currentMode->pos[knopf];
    5f92:	682b      	ldr	r3, [r5, #0]
    5f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    5f96:	61e3      	str	r3, [r4, #28]
}
    5f98:	b021      	add	sp, #132	; 0x84
    5f9a:	bd30      	pop	{r4, r5, pc}
    5f9c:	f8d2 1488 	ldr.w	r1, [r2, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    5fa0:	b131      	cbz	r1, 5fb0 <showMenu()+0x134>
    return tmp.open(this, path, O_RDONLY);
    5fa2:	aa05      	add	r2, sp, #20
    5fa4:	a812      	add	r0, sp, #72	; 0x48
    5fa6:	931e      	str	r3, [sp, #120]	; 0x78
    5fa8:	f007 fe04 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    5fac:	2800      	cmp	r0, #0
    5fae:	d1a3      	bne.n	5ef8 <showMenu()+0x7c>
    showIcons("helper_save", CRGB(20, 0, 0));
    5fb0:	491d      	ldr	r1, [pc, #116]	; (6028 <showMenu()+0x1ac>)
    5fb2:	a812      	add	r0, sp, #72	; 0x48
    5fb4:	f00f fcd8 	bl	15968 <String::String(char const*)>
    5fb8:	2500      	movs	r5, #0
    5fba:	2314      	movs	r3, #20
    5fbc:	a812      	add	r0, sp, #72	; 0x48
    5fbe:	f88d 5006 	strb.w	r5, [sp, #6]
    5fc2:	f8ad 3004 	strh.w	r3, [sp, #4]
    5fc6:	9901      	ldr	r1, [sp, #4]
    5fc8:	f7ff fda0 	bl	5b0c <showIcons(String, CRGB)>
    5fcc:	a812      	add	r0, sp, #72	; 0x48
    5fce:	f00f fc8f 	bl	158f0 <String::~String()>
    showIcons("helper_load", CRGB(0, 1, 0));
    5fd2:	4916      	ldr	r1, [pc, #88]	; (602c <showMenu()+0x1b0>)
    5fd4:	a812      	add	r0, sp, #72	; 0x48
    5fd6:	f00f fcc7 	bl	15968 <String::String(char const*)>
    5fda:	f44f 7380 	mov.w	r3, #256	; 0x100
    5fde:	f88d 5006 	strb.w	r5, [sp, #6]
    5fe2:	a812      	add	r0, sp, #72	; 0x48
    5fe4:	f8ad 3004 	strh.w	r3, [sp, #4]
    5fe8:	9901      	ldr	r1, [sp, #4]
    5fea:	f7ff fd8f 	bl	5b0c <showIcons(String, CRGB)>
    5fee:	a812      	add	r0, sp, #72	; 0x48
    5ff0:	f00f fc7e 	bl	158f0 <String::~String()>
    5ff4:	f241 4114 	movw	r1, #5140	; 0x1414
    5ff8:	2328      	movs	r3, #40	; 0x28
    showNumber(SMP.file, CRGB(20, 20, 40), 0);
    5ffa:	462a      	mov	r2, r5
    5ffc:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
    6000:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
    6004:	69e0      	ldr	r0, [r4, #28]
    6006:	9912      	ldr	r1, [sp, #72]	; 0x48
    6008:	f7ff f826 	bl	5058 <showNumber(int, CRGB, int)>
    600c:	e7a0      	b.n	5f50 <showMenu()+0xd4>
    600e:	bf00      	nop
    6010:	200045e8 	.word	0x200045e8
    6014:	20000be4 	.word	0x20000be4
    6018:	20003294 	.word	0x20003294
    601c:	20000c18 	.word	0x20000c18
    6020:	20000b58 	.word	0x20000b58
    6024:	200045f8 	.word	0x200045f8
    6028:	20000c0c 	.word	0x20000c0c
    602c:	20000bf0 	.word	0x20000bf0
    6030:	200038c8 	.word	0x200038c8
    6034:	20000b60 	.word	0x20000b60
    6038:	20003314 	.word	0x20003314

0000603c <showSamplePack()>:
void showSamplePack() {
    603c:	b570      	push	{r4, r5, r6, lr}
    603e:	b0a0      	sub	sp, #128	; 0x80
    6040:	2400      	movs	r4, #0
  drawNoSD();
    6042:	f7fd feb7 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    6046:	2100      	movs	r1, #0
    6048:	485c      	ldr	r0, [pc, #368]	; (61bc <showSamplePack()+0x180>)
    604a:	f004 ff9f 	bl	af8c <CFastLED::clear(bool)>
  showIcons("samplepack", CRGB(10, 10, 0));
    604e:	495c      	ldr	r1, [pc, #368]	; (61c0 <showSamplePack()+0x184>)
    6050:	a812      	add	r0, sp, #72	; 0x48
  showNumber(SMP.pack, CRGB(20, 0, 0), 0);
    6052:	4d5c      	ldr	r5, [pc, #368]	; (61c4 <showSamplePack()+0x188>)
  showIcons("samplepack", CRGB(10, 10, 0));
    6054:	f00f fc88 	bl	15968 <String::String(char const*)>
    6058:	f640 230a 	movw	r3, #2570	; 0xa0a
    605c:	f88d 4016 	strb.w	r4, [sp, #22]
    6060:	a812      	add	r0, sp, #72	; 0x48
    6062:	f8ad 3014 	strh.w	r3, [sp, #20]
    6066:	9905      	ldr	r1, [sp, #20]
    6068:	f7ff fd50 	bl	5b0c <showIcons(String, CRGB)>
    606c:	a812      	add	r0, sp, #72	; 0x48
    606e:	f00f fc3f 	bl	158f0 <String::~String()>
  showIcons("helper_select", CRGB(0, 0, 5));
    6072:	4955      	ldr	r1, [pc, #340]	; (61c8 <showSamplePack()+0x18c>)
    6074:	a812      	add	r0, sp, #72	; 0x48
    6076:	f00f fc77 	bl	15968 <String::String(char const*)>
    607a:	2305      	movs	r3, #5
    607c:	f8ad 4014 	strh.w	r4, [sp, #20]
    6080:	a812      	add	r0, sp, #72	; 0x48
    6082:	f88d 3016 	strb.w	r3, [sp, #22]
    6086:	9905      	ldr	r1, [sp, #20]
    6088:	f7ff fd40 	bl	5b0c <showIcons(String, CRGB)>
    608c:	a812      	add	r0, sp, #72	; 0x48
    608e:	f00f fc2f 	bl	158f0 <String::~String()>
    6092:	2314      	movs	r3, #20
    6094:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
  showNumber(SMP.pack, CRGB(20, 0, 0), 0);
    6098:	4622      	mov	r2, r4
    609a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    609e:	9912      	ldr	r1, [sp, #72]	; 0x48
    60a0:	6a28      	ldr	r0, [r5, #32]
    60a2:	f7fe ffd9 	bl	5058 <showNumber(int, CRGB, int)>
  sprintf(OUTPUTf, "%d/%d.wav", SMP.pack, 1);
    60a6:	2301      	movs	r3, #1
    60a8:	6a2a      	ldr	r2, [r5, #32]
    60aa:	a805      	add	r0, sp, #20
    60ac:	4947      	ldr	r1, [pc, #284]	; (61cc <showSamplePack()+0x190>)
    60ae:	f01b fd6b 	bl	21b88 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    60b2:	4a47      	ldr	r2, [pc, #284]	; (61d0 <showSamplePack()+0x194>)
    60b4:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    60b8:	2b00      	cmp	r3, #0
    60ba:	d059      	beq.n	6170 <showSamplePack()+0x134>
    60bc:	4619      	mov	r1, r3
    60be:	aa05      	add	r2, sp, #20
    60c0:	4623      	mov	r3, r4
    60c2:	a812      	add	r0, sp, #72	; 0x48
    60c4:	9412      	str	r4, [sp, #72]	; 0x48
    60c6:	f009 fc57 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    60ca:	2800      	cmp	r0, #0
    60cc:	d05a      	beq.n	6184 <showSamplePack()+0x148>
    60ce:	2400      	movs	r4, #0
    60d0:	f44f 56a0 	mov.w	r6, #5120	; 0x1400
    showIcons("helper_load", CRGB(0, 20, 0));
    60d4:	493f      	ldr	r1, [pc, #252]	; (61d4 <showSamplePack()+0x198>)
    60d6:	a812      	add	r0, sp, #72	; 0x48
    60d8:	f00f fc46 	bl	15968 <String::String(char const*)>
    60dc:	f8ad 6004 	strh.w	r6, [sp, #4]
    60e0:	f88d 4006 	strb.w	r4, [sp, #6]
    60e4:	a812      	add	r0, sp, #72	; 0x48
    60e6:	9901      	ldr	r1, [sp, #4]
    60e8:	f7ff fd10 	bl	5b0c <showIcons(String, CRGB)>
    60ec:	a812      	add	r0, sp, #72	; 0x48
    60ee:	f00f fbff 	bl	158f0 <String::~String()>
    showIcons("helper_save", CRGB(3, 0, 0));
    60f2:	4939      	ldr	r1, [pc, #228]	; (61d8 <showSamplePack()+0x19c>)
    60f4:	a812      	add	r0, sp, #72	; 0x48
    60f6:	f00f fc37 	bl	15968 <String::String(char const*)>
    60fa:	2303      	movs	r3, #3
    60fc:	f88d 4006 	strb.w	r4, [sp, #6]
    6100:	f8ad 3004 	strh.w	r3, [sp, #4]
    showIcons("helper_save", CRGB(20, 0, 0));
    6104:	9901      	ldr	r1, [sp, #4]
    6106:	a812      	add	r0, sp, #72	; 0x48
    6108:	f7ff fd00 	bl	5b0c <showIcons(String, CRGB)>
    610c:	a812      	add	r0, sp, #72	; 0x48
    610e:	f00f fbef 	bl	158f0 <String::~String()>
    showNumber(SMP.pack, CRGB(20, 0, 0), 0);
    6112:	4622      	mov	r2, r4
    6114:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
    6118:	f8ad 6048 	strh.w	r6, [sp, #72]	; 0x48
  if (currentMode->pos[knopf] != SMP.pack) {
    611c:	4c2f      	ldr	r4, [pc, #188]	; (61dc <showSamplePack()+0x1a0>)
    showNumber(SMP.pack, CRGB(20, 0, 0), 0);
    611e:	9912      	ldr	r1, [sp, #72]	; 0x48
    6120:	6a28      	ldr	r0, [r5, #32]
    6122:	f7fe ff99 	bl	5058 <showNumber(int, CRGB, int)>
  if (currentMode->pos[knopf] != SMP.pack) {
    6126:	6822      	ldr	r2, [r4, #0]
    6128:	6a2b      	ldr	r3, [r5, #32]
    612a:	6b92      	ldr	r2, [r2, #56]	; 0x38
    612c:	429a      	cmp	r2, r3
    612e:	d01d      	beq.n	616c <showSamplePack()+0x130>
	StringSumHelper(const char *p) : String(p) {}
    6130:	492b      	ldr	r1, [pc, #172]	; (61e0 <showSamplePack()+0x1a4>)
    6132:	a812      	add	r0, sp, #72	; 0x48
    6134:	f00f fc18 	bl	15968 <String::String(char const*)>
    Serial.print("File: " + String(currentMode->pos[knopf]));
    6138:	6823      	ldr	r3, [r4, #0]
    613a:	220a      	movs	r2, #10
    613c:	a801      	add	r0, sp, #4
    613e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    6140:	f00f fc26 	bl	15990 <String::String(int, unsigned char)>
    6144:	a901      	add	r1, sp, #4
    6146:	a812      	add	r0, sp, #72	; 0x48
    6148:	f00f fcc8 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    614c:	4601      	mov	r1, r0
    614e:	4825      	ldr	r0, [pc, #148]	; (61e4 <showSamplePack()+0x1a8>)
    6150:	f00f fa5e 	bl	15610 <Print::print(String const&)>
    6154:	a801      	add	r0, sp, #4
    6156:	f00f fbcb 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    615a:	a812      	add	r0, sp, #72	; 0x48
    615c:	f00f fbc8 	bl	158f0 <String::~String()>
    Serial.println();
    6160:	4820      	ldr	r0, [pc, #128]	; (61e4 <showSamplePack()+0x1a8>)
    6162:	f00f fa87 	bl	15674 <Print::println()>
    SMP.pack = currentMode->pos[knopf];
    6166:	6823      	ldr	r3, [r4, #0]
    6168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    616a:	622b      	str	r3, [r5, #32]
}
    616c:	b020      	add	sp, #128	; 0x80
    616e:	bd70      	pop	{r4, r5, r6, pc}
    6170:	f8d2 1488 	ldr.w	r1, [r2, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    6174:	b131      	cbz	r1, 6184 <showSamplePack()+0x148>
    6176:	aa05      	add	r2, sp, #20
    6178:	a812      	add	r0, sp, #72	; 0x48
    617a:	931e      	str	r3, [sp, #120]	; 0x78
    617c:	f007 fd1a 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6180:	2800      	cmp	r0, #0
    6182:	d1a4      	bne.n	60ce <showSamplePack()+0x92>
    showIcons("helper_load", CRGB(0, 3, 0));
    6184:	4913      	ldr	r1, [pc, #76]	; (61d4 <showSamplePack()+0x198>)
    6186:	a812      	add	r0, sp, #72	; 0x48
    6188:	f00f fbee 	bl	15968 <String::String(char const*)>
    618c:	2400      	movs	r4, #0
    618e:	f44f 7340 	mov.w	r3, #768	; 0x300
    6192:	a812      	add	r0, sp, #72	; 0x48
    6194:	f88d 4006 	strb.w	r4, [sp, #6]
    6198:	2614      	movs	r6, #20
    619a:	f8ad 3004 	strh.w	r3, [sp, #4]
    619e:	9901      	ldr	r1, [sp, #4]
    61a0:	f7ff fcb4 	bl	5b0c <showIcons(String, CRGB)>
    61a4:	a812      	add	r0, sp, #72	; 0x48
    61a6:	f00f fba3 	bl	158f0 <String::~String()>
    showIcons("helper_save", CRGB(20, 0, 0));
    61aa:	490b      	ldr	r1, [pc, #44]	; (61d8 <showSamplePack()+0x19c>)
    61ac:	a812      	add	r0, sp, #72	; 0x48
    61ae:	f00f fbdb 	bl	15968 <String::String(char const*)>
    61b2:	f88d 4006 	strb.w	r4, [sp, #6]
    61b6:	f8ad 6004 	strh.w	r6, [sp, #4]
    61ba:	e7a3      	b.n	6104 <showSamplePack()+0xc8>
    61bc:	200045e8 	.word	0x200045e8
    61c0:	20000bd0 	.word	0x20000bd0
    61c4:	20003294 	.word	0x20003294
    61c8:	20000c18 	.word	0x20000c18
    61cc:	20000b4c 	.word	0x20000b4c
    61d0:	200045f8 	.word	0x200045f8
    61d4:	20000bf0 	.word	0x20000bf0
    61d8:	20000c0c 	.word	0x20000c0c
    61dc:	200038c8 	.word	0x200038c8
    61e0:	20000b60 	.word	0x20000b60
    61e4:	20003314 	.word	0x20003314

000061e8 <savePattern()>:


/************************************************
    SAVE
 *************************************************/
void savePattern() {
    61e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    61ec:	b09d      	sub	sp, #116	; 0x74
  Serial.println("Saving in slot #" + String(SMP.file));
    61ee:	4d73      	ldr	r5, [pc, #460]	; (63bc <savePattern()+0x1d4>)
	StringSumHelper(const char *p) : String(p) {}
    61f0:	4973      	ldr	r1, [pc, #460]	; (63c0 <savePattern()+0x1d8>)
    61f2:	2400      	movs	r4, #0
    61f4:	a80e      	add	r0, sp, #56	; 0x38
    61f6:	4e73      	ldr	r6, [pc, #460]	; (63c4 <savePattern()+0x1dc>)
    61f8:	f00f fbb6 	bl	15968 <String::String(char const*)>
    61fc:	220a      	movs	r2, #10
    61fe:	69e9      	ldr	r1, [r5, #28]
    6200:	a801      	add	r0, sp, #4
    6202:	f00f fbc5 	bl	15990 <String::String(int, unsigned char)>
    6206:	a901      	add	r1, sp, #4
    6208:	a80e      	add	r0, sp, #56	; 0x38
    return m_fVol ? m_fVol->exists(path) :
    620a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 63d4 <savePattern()+0x1ec>
    620e:	f00f fc65 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    6212:	4601      	mov	r1, r0
    6214:	486c      	ldr	r0, [pc, #432]	; (63c8 <savePattern()+0x1e0>)
    6216:	f00f f9fb 	bl	15610 <Print::print(String const&)>
    621a:	486b      	ldr	r0, [pc, #428]	; (63c8 <savePattern()+0x1e0>)
    621c:	f00f fa2a 	bl	15674 <Print::println()>
    6220:	a801      	add	r0, sp, #4
    6222:	f00f fb65 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    6226:	a80e      	add	r0, sp, #56	; 0x38
    6228:	f00f fb62 	bl	158f0 <String::~String()>
    622c:	2332      	movs	r3, #50	; 0x32
    622e:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a

  showNumber(SMP.file, CRGB(50, 0, 0), 0);
    6232:	4622      	mov	r2, r4
    6234:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    6238:	990e      	ldr	r1, [sp, #56]	; 0x38
    623a:	69e8      	ldr	r0, [r5, #28]
    623c:	f7fe ff0c 	bl	5058 <showNumber(int, CRGB, int)>
    6240:	7831      	ldrb	r1, [r6, #0]
    6242:	4630      	mov	r0, r6
    6244:	f004 fd78 	bl	ad38 <CFastLED::show(unsigned char)>
  FastLEDshow();

  drawNoSD();
    6248:	f7fd fdb4 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    624c:	4621      	mov	r1, r4
    624e:	4630      	mov	r0, r6
    6250:	f004 fe9c 	bl	af8c <CFastLED::clear(bool)>
  FastLEDclear();
  long maxdata = 0;

  char OUTPUTf[50];
  sprintf(OUTPUTf, "%d.txt", SMP.file);
    6254:	69ea      	ldr	r2, [r5, #28]
    6256:	495d      	ldr	r1, [pc, #372]	; (63cc <savePattern()+0x1e4>)
    6258:	a801      	add	r0, sp, #4
    625a:	f01b fc95 	bl	21b88 <sprintf>
    625e:	f8d9 3484 	ldr.w	r3, [r9, #1156]	; 0x484
    6262:	2b00      	cmp	r3, #0
    6264:	d06c      	beq.n	6340 <savePattern()+0x158>
    6266:	4619      	mov	r1, r3
    6268:	aa01      	add	r2, sp, #4
    626a:	4623      	mov	r3, r4
    626c:	a80e      	add	r0, sp, #56	; 0x38
    626e:	940e      	str	r4, [sp, #56]	; 0x38
    6270:	f009 fb82 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    6274:	2800      	cmp	r0, #0
    6276:	d16e      	bne.n	6356 <savePattern()+0x16e>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    6278:	4e55      	ldr	r6, [pc, #340]	; (63d0 <savePattern()+0x1e8>)
    SD.remove(OUTPUTf);
  }
  myFile = SD.open(OUTPUTf, FILE_WRITE);
    627a:	2301      	movs	r3, #1
    627c:	aa01      	add	r2, sp, #4
    627e:	4955      	ldr	r1, [pc, #340]	; (63d4 <savePattern()+0x1ec>)
    6280:	a80e      	add	r0, sp, #56	; 0x38
    6282:	f7fc fe6f 	bl	2f64 <SDClass::open(char const*, unsigned char)>
    6286:	6933      	ldr	r3, [r6, #16]
    6288:	b113      	cbz	r3, 6290 <savePattern()+0xa8>
    628a:	4630      	mov	r0, r6
    628c:	f7fc fe58 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    6290:	9812      	ldr	r0, [sp, #72]	; 0x48
    6292:	6130      	str	r0, [r6, #16]
		return (f) ? f->isOpen() : false;
    6294:	2800      	cmp	r0, #0
    6296:	d041      	beq.n	631c <savePattern()+0x134>
    6298:	6803      	ldr	r3, [r0, #0]
    629a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    629c:	4798      	blx	r3
		if (f) {
    629e:	6933      	ldr	r3, [r6, #16]
		return (f) ? f->isOpen() : false;
    62a0:	b388      	cbz	r0, 6306 <savePattern()+0x11e>
    62a2:	4f4d      	ldr	r7, [pc, #308]	; (63d8 <savePattern()+0x1f0>)
  long maxdata = 0;
    62a4:	2500      	movs	r5, #0
    62a6:	f507 4888 	add.w	r8, r7, #17408	; 0x4400
  if (myFile) {
    for (int sdx = 1; sdx < maxlen; sdx++) {
      for (int sdy = 1; sdy < maxY + 1; sdy++) {
    62aa:	f1a7 0480 	sub.w	r4, r7, #128	; 0x80
        maxdata = maxdata + note[sdx][sdy][0];
    62ae:	f8d4 c008 	ldr.w	ip, [r4, #8]
		return (f) ? f->write(&b, 1) : 0;
    62b2:	2201      	movs	r2, #1
    62b4:	a90e      	add	r1, sp, #56	; 0x38
    62b6:	4618      	mov	r0, r3
    62b8:	4465      	add	r5, ip
	size_t write(unsigned int n) { return write((uint8_t)n); }
    62ba:	f88d c038 	strb.w	ip, [sp, #56]	; 0x38
		return (f) ? f->write(&b, 1) : 0;
    62be:	b17b      	cbz	r3, 62e0 <savePattern()+0xf8>
    62c0:	681b      	ldr	r3, [r3, #0]
    62c2:	68db      	ldr	r3, [r3, #12]
    62c4:	4798      	blx	r3
    62c6:	6933      	ldr	r3, [r6, #16]
	size_t write(unsigned int n) { return write((uint8_t)n); }
    62c8:	f8d4 c00c 	ldr.w	ip, [r4, #12]
		return (f) ? f->write(&b, 1) : 0;
    62cc:	2201      	movs	r2, #1
    62ce:	a90e      	add	r1, sp, #56	; 0x38
    62d0:	4618      	mov	r0, r3
	size_t write(unsigned int n) { return write((uint8_t)n); }
    62d2:	f88d c038 	strb.w	ip, [sp, #56]	; 0x38
		return (f) ? f->write(&b, 1) : 0;
    62d6:	b11b      	cbz	r3, 62e0 <savePattern()+0xf8>
    62d8:	681b      	ldr	r3, [r3, #0]
    62da:	68db      	ldr	r3, [r3, #12]
    62dc:	4798      	blx	r3
		if (f) {
    62de:	6933      	ldr	r3, [r6, #16]
      for (int sdy = 1; sdy < maxY + 1; sdy++) {
    62e0:	3408      	adds	r4, #8
    62e2:	42bc      	cmp	r4, r7
    62e4:	d1e3      	bne.n	62ae <savePattern()+0xc6>
    for (int sdx = 1; sdx < maxlen; sdx++) {
    62e6:	f104 0788 	add.w	r7, r4, #136	; 0x88
    62ea:	4547      	cmp	r7, r8
    62ec:	d1dd      	bne.n	62aa <savePattern()+0xc2>
    62ee:	b963      	cbnz	r3, 630a <savePattern()+0x122>
      }
    }
  }

  myFile.close();
  if (maxdata == 0) {
    62f0:	b1a5      	cbz	r5, 631c <savePattern()+0x134>
    SD.remove(OUTPUTf);
  }
  delay(500);
    62f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    62f6:	f00f fdcd 	bl	15e94 <delay>
  switchMode(&draw);
    62fa:	4838      	ldr	r0, [pc, #224]	; (63dc <savePattern()+0x1f4>)
    62fc:	f7fe f878 	bl	43f0 <switchMode(Mode*)>
}
    6300:	b01d      	add	sp, #116	; 0x74
    6302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6306:	b14b      	cbz	r3, 631c <savePattern()+0x134>
    6308:	4605      	mov	r5, r0
			f->close();
    630a:	681a      	ldr	r2, [r3, #0]
    630c:	4618      	mov	r0, r3
    630e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    6310:	4798      	blx	r3
			dec_refcount();
    6312:	482f      	ldr	r0, [pc, #188]	; (63d0 <savePattern()+0x1e8>)
    6314:	f7fc fe14 	bl	2f40 <File::dec_refcount()>
  if (maxdata == 0) {
    6318:	2d00      	cmp	r5, #0
    631a:	d1ea      	bne.n	62f2 <savePattern()+0x10a>
    return m_fVol ? m_fVol->remove(path) :
    631c:	f8d9 0484 	ldr.w	r0, [r9, #1156]	; 0x484
    6320:	2800      	cmp	r0, #0
    6322:	d03b      	beq.n	639c <savePattern()+0x1b4>
    6324:	2400      	movs	r4, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6326:	4601      	mov	r1, r0
    6328:	2301      	movs	r3, #1
    632a:	aa01      	add	r2, sp, #4
    632c:	a80e      	add	r0, sp, #56	; 0x38
    632e:	940e      	str	r4, [sp, #56]	; 0x38
    6330:	f009 fb22 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    6334:	2800      	cmp	r0, #0
    6336:	d0dc      	beq.n	62f2 <savePattern()+0x10a>
    6338:	a80e      	add	r0, sp, #56	; 0x38
    633a:	f00a fc23 	bl	10b84 <FatFile::remove()>
    633e:	e7d8      	b.n	62f2 <savePattern()+0x10a>
    6340:	f8d9 1488 	ldr.w	r1, [r9, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    6344:	2900      	cmp	r1, #0
    6346:	d097      	beq.n	6278 <savePattern()+0x90>
    6348:	aa01      	add	r2, sp, #4
    634a:	a80e      	add	r0, sp, #56	; 0x38
    634c:	931a      	str	r3, [sp, #104]	; 0x68
    634e:	f007 fc31 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6352:	2800      	cmp	r0, #0
    6354:	d090      	beq.n	6278 <savePattern()+0x90>
    return m_fVol ? m_fVol->remove(path) :
    6356:	f8d9 3484 	ldr.w	r3, [r9, #1156]	; 0x484
    635a:	b16b      	cbz	r3, 6378 <savePattern()+0x190>
    635c:	2200      	movs	r2, #0
    635e:	4619      	mov	r1, r3
    6360:	a80e      	add	r0, sp, #56	; 0x38
    6362:	2301      	movs	r3, #1
    6364:	920e      	str	r2, [sp, #56]	; 0x38
    6366:	aa01      	add	r2, sp, #4
    6368:	f009 fb06 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    636c:	2800      	cmp	r0, #0
    636e:	d083      	beq.n	6278 <savePattern()+0x90>
    6370:	a80e      	add	r0, sp, #56	; 0x38
    6372:	f00a fc07 	bl	10b84 <FatFile::remove()>
    6376:	e77f      	b.n	6278 <savePattern()+0x90>
    6378:	f8d9 1488 	ldr.w	r1, [r9, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    637c:	2900      	cmp	r1, #0
    637e:	f43f af7b 	beq.w	6278 <savePattern()+0x90>
    6382:	931a      	str	r3, [sp, #104]	; 0x68
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    6384:	aa01      	add	r2, sp, #4
    6386:	2301      	movs	r3, #1
    6388:	a80e      	add	r0, sp, #56	; 0x38
    638a:	f007 fc13 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    638e:	2800      	cmp	r0, #0
    6390:	f43f af72 	beq.w	6278 <savePattern()+0x90>
    6394:	a80e      	add	r0, sp, #56	; 0x38
    6396:	f007 fc71 	bl	dc7c <ExFatFile::remove()>
    639a:	e76d      	b.n	6278 <savePattern()+0x90>
    639c:	f8d9 1488 	ldr.w	r1, [r9, #1160]	; 0x488
    63a0:	2900      	cmp	r1, #0
    63a2:	d0a6      	beq.n	62f2 <savePattern()+0x10a>
    63a4:	901a      	str	r0, [sp, #104]	; 0x68
    63a6:	2301      	movs	r3, #1
    63a8:	aa01      	add	r2, sp, #4
    63aa:	a80e      	add	r0, sp, #56	; 0x38
    63ac:	f007 fc02 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    63b0:	2800      	cmp	r0, #0
    63b2:	d09e      	beq.n	62f2 <savePattern()+0x10a>
    63b4:	a80e      	add	r0, sp, #56	; 0x38
    63b6:	f007 fc61 	bl	dc7c <ExFatFile::remove()>
    63ba:	e79a      	b.n	62f2 <savePattern()+0x10a>
    63bc:	20003294 	.word	0x20003294
    63c0:	20000964 	.word	0x20000964
    63c4:	200045e8 	.word	0x200045e8
    63c8:	20003314 	.word	0x20003314
    63cc:	20000b58 	.word	0x20000b58
    63d0:	20003b80 	.word	0x20003b80
    63d4:	200045f8 	.word	0x200045f8
    63d8:	200072c0 	.word	0x200072c0
    63dc:	200038e4 	.word	0x200038e4

000063e0 <autoSave()>:

void autoSave() {
    63e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63e4:	b0a2      	sub	sp, #136	; 0x88
    return m_fVol ? m_fVol->exists(path) :
    63e6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 65f8 <autoSave()+0x218>
  drawNoSD();
    63ea:	f7fd fce3 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    63ee:	2100      	movs	r1, #0
    63f0:	4878      	ldr	r0, [pc, #480]	; (65d4 <autoSave()+0x1f4>)
  FastLEDclear();
  long maxdata = 0;

  char OUTPUTf[50];
  sprintf(OUTPUTf, "autosave.txt");
    63f2:	ac01      	add	r4, sp, #4
  FastLED.clear();
    63f4:	f004 fdca 	bl	af8c <CFastLED::clear(bool)>
  sprintf(OUTPUTf, "autosave.txt");
    63f8:	4b77      	ldr	r3, [pc, #476]	; (65d8 <autoSave()+0x1f8>)
    63fa:	f8d9 6484 	ldr.w	r6, [r9, #1156]	; 0x484
    63fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6400:	c407      	stmia	r4!, {r0, r1, r2}
    6402:	7023      	strb	r3, [r4, #0]
    6404:	2e00      	cmp	r6, #0
    6406:	d07d      	beq.n	6504 <autoSave()+0x124>
    return tmp.open(this, path, O_RDONLY);
    6408:	ad0e      	add	r5, sp, #56	; 0x38
    640a:	2300      	movs	r3, #0
    640c:	4631      	mov	r1, r6
    640e:	aa01      	add	r2, sp, #4
    6410:	4628      	mov	r0, r5
    6412:	930e      	str	r3, [sp, #56]	; 0x38
    6414:	f009 fab0 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    6418:	2800      	cmp	r0, #0
    641a:	f040 8081 	bne.w	6520 <autoSave()+0x140>
		SDFAT_FILE file = sdfs.open(filepath, flags);
    641e:	f244 2302 	movw	r3, #16898	; 0x4202
    6422:	aa01      	add	r2, sp, #4
    6424:	496d      	ldr	r1, [pc, #436]	; (65dc <autoSave()+0x1fc>)
    6426:	4628      	mov	r0, r5
    6428:	f00b fcd0 	bl	11dcc <FsVolume::open(char const*, int)>
    642c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    642e:	2b00      	cmp	r3, #0
    6430:	f000 8089 	beq.w	6546 <autoSave()+0x166>
		if (file) return File(new SDFile(file));
    6434:	205c      	movs	r0, #92	; 0x5c
class FileImpl {
    6436:	2600      	movs	r6, #0
    6438:	f010 f94a 	bl	166d0 <operator new(unsigned int)>
class Print
    643c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    643e:	4604      	mov	r4, r0
    6440:	6046      	str	r6, [r0, #4]
    6442:	60c3      	str	r3, [r0, #12]
    6444:	a912      	add	r1, sp, #72	; 0x48
    6446:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6448:	3018      	adds	r0, #24
    644a:	f840 3c08 	str.w	r3, [r0, #-8]
    644e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
    6452:	f800 3c04 	strb.w	r3, [r0, #-4]
	SDFile(const SDFAT_FILE &file) : sdfatfile(file), filename(nullptr) { }
    6456:	4b62      	ldr	r3, [pc, #392]	; (65e0 <autoSave()+0x200>)
    6458:	f840 3c18 	str.w	r3, [r0, #-24]
    645c:	4b61      	ldr	r3, [pc, #388]	; (65e4 <autoSave()+0x204>)
    645e:	f840 3c10 	str.w	r3, [r0, #-16]
    6462:	f00b fb57 	bl	11b14 <FsBaseFile::FsBaseFile(FsBaseFile const&)>
		if (f) f->refcount++;
    6466:	6863      	ldr	r3, [r4, #4]
    6468:	65a6      	str	r6, [r4, #88]	; 0x58
  ~FsBaseFile() {close();}
    646a:	a812      	add	r0, sp, #72	; 0x48
    646c:	3301      	adds	r3, #1
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    646e:	4e5e      	ldr	r6, [pc, #376]	; (65e8 <autoSave()+0x208>)
		if (f) f->refcount++;
    6470:	6063      	str	r3, [r4, #4]
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    6472:	4b5e      	ldr	r3, [pc, #376]	; (65ec <autoSave()+0x20c>)
    6474:	60a3      	str	r3, [r4, #8]
    6476:	4b5e      	ldr	r3, [pc, #376]	; (65f0 <autoSave()+0x210>)
    6478:	930e      	str	r3, [sp, #56]	; 0x38
  ~FsBaseFile() {close();}
    647a:	f00b fb8d 	bl	11b98 <FsBaseFile::close()>
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    647e:	6933      	ldr	r3, [r6, #16]
    6480:	2b00      	cmp	r3, #0
    6482:	d03d      	beq.n	6500 <autoSave()+0x120>
    6484:	4630      	mov	r0, r6
    6486:	f7fc fd5b 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    648a:	6134      	str	r4, [r6, #16]
		return (f) ? f->isOpen() : false;
    648c:	6823      	ldr	r3, [r4, #0]
    648e:	4620      	mov	r0, r4
    6490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6492:	4798      	blx	r3
		if (f) {
    6494:	6933      	ldr	r3, [r6, #16]
		return (f) ? f->isOpen() : false;
    6496:	2800      	cmp	r0, #0
    6498:	d076      	beq.n	6588 <autoSave()+0x1a8>
    649a:	4f56      	ldr	r7, [pc, #344]	; (65f4 <autoSave()+0x214>)
  long maxdata = 0;
    649c:	2400      	movs	r4, #0
    649e:	f507 4888 	add.w	r8, r7, #17408	; 0x4400
    SD.remove(OUTPUTf);
  }
  myFile = SD.open(OUTPUTf, FILE_WRITE);
  if (myFile) {
    for (int sdx = 1; sdx < maxlen; sdx++) {
      for (int sdy = 1; sdy < maxY + 1; sdy++) {
    64a2:	f1a7 0a80 	sub.w	sl, r7, #128	; 0x80
        maxdata = maxdata + note[sdx][sdy][0];
    64a6:	f8da c008 	ldr.w	ip, [sl, #8]
		return (f) ? f->write(&b, 1) : 0;
    64aa:	2201      	movs	r2, #1
    64ac:	4629      	mov	r1, r5
    64ae:	4618      	mov	r0, r3
    64b0:	4464      	add	r4, ip
	size_t write(unsigned int n) { return write((uint8_t)n); }
    64b2:	f88d c038 	strb.w	ip, [sp, #56]	; 0x38
		return (f) ? f->write(&b, 1) : 0;
    64b6:	b17b      	cbz	r3, 64d8 <autoSave()+0xf8>
    64b8:	681b      	ldr	r3, [r3, #0]
    64ba:	68db      	ldr	r3, [r3, #12]
    64bc:	4798      	blx	r3
    64be:	6933      	ldr	r3, [r6, #16]
	size_t write(unsigned int n) { return write((uint8_t)n); }
    64c0:	f8da c00c 	ldr.w	ip, [sl, #12]
		return (f) ? f->write(&b, 1) : 0;
    64c4:	2201      	movs	r2, #1
    64c6:	4629      	mov	r1, r5
    64c8:	4618      	mov	r0, r3
	size_t write(unsigned int n) { return write((uint8_t)n); }
    64ca:	f88d c038 	strb.w	ip, [sp, #56]	; 0x38
		return (f) ? f->write(&b, 1) : 0;
    64ce:	b11b      	cbz	r3, 64d8 <autoSave()+0xf8>
    64d0:	681b      	ldr	r3, [r3, #0]
    64d2:	68db      	ldr	r3, [r3, #12]
    64d4:	4798      	blx	r3
		if (f) {
    64d6:	6933      	ldr	r3, [r6, #16]
      for (int sdy = 1; sdy < maxY + 1; sdy++) {
    64d8:	f10a 0a08 	add.w	sl, sl, #8
    64dc:	4557      	cmp	r7, sl
    64de:	d1e2      	bne.n	64a6 <autoSave()+0xc6>
    for (int sdx = 1; sdx < maxlen; sdx++) {
    64e0:	3788      	adds	r7, #136	; 0x88
    64e2:	45b8      	cmp	r8, r7
    64e4:	d1dd      	bne.n	64a2 <autoSave()+0xc2>
    64e6:	b133      	cbz	r3, 64f6 <autoSave()+0x116>
			f->close();
    64e8:	681a      	ldr	r2, [r3, #0]
    64ea:	4618      	mov	r0, r3
    64ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    64ee:	4798      	blx	r3
			dec_refcount();
    64f0:	483d      	ldr	r0, [pc, #244]	; (65e8 <autoSave()+0x208>)
    64f2:	f7fc fd25 	bl	2f40 <File::dec_refcount()>
      }
    }
  }

  myFile.close();
  if (maxdata == 0) {
    64f6:	2c00      	cmp	r4, #0
    64f8:	d035      	beq.n	6566 <autoSave()+0x186>
    SD.remove(OUTPUTf);
  }
}
    64fa:	b022      	add	sp, #136	; 0x88
    64fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		f = file.f;
    6500:	6134      	str	r4, [r6, #16]
		return (f) ? f->isOpen() : false;
    6502:	e7c3      	b.n	648c <autoSave()+0xac>
    6504:	f8d9 1488 	ldr.w	r1, [r9, #1160]	; 0x488
    return tmp.open(this, path, O_RDONLY);
    6508:	ad0e      	add	r5, sp, #56	; 0x38
           m_xVol ? m_xVol->exists(path) : false;
    650a:	2900      	cmp	r1, #0
    650c:	d087      	beq.n	641e <autoSave()+0x3e>
    650e:	4633      	mov	r3, r6
    6510:	aa01      	add	r2, sp, #4
    6512:	4628      	mov	r0, r5
    6514:	961a      	str	r6, [sp, #104]	; 0x68
    6516:	f007 fb4d 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    651a:	2800      	cmp	r0, #0
    651c:	f43f af7f 	beq.w	641e <autoSave()+0x3e>
    return m_fVol ? m_fVol->remove(path) :
    6520:	f8d9 3484 	ldr.w	r3, [r9, #1156]	; 0x484
    6524:	2b00      	cmp	r3, #0
    6526:	d033      	beq.n	6590 <autoSave()+0x1b0>
    6528:	2200      	movs	r2, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    652a:	4619      	mov	r1, r3
    652c:	4628      	mov	r0, r5
    652e:	2301      	movs	r3, #1
    6530:	920e      	str	r2, [sp, #56]	; 0x38
    6532:	aa01      	add	r2, sp, #4
    6534:	f009 fa20 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    6538:	2800      	cmp	r0, #0
    653a:	f43f af70 	beq.w	641e <autoSave()+0x3e>
    653e:	4628      	mov	r0, r5
    6540:	f00a fb20 	bl	10b84 <FatFile::remove()>
    6544:	e76b      	b.n	641e <autoSave()+0x3e>
  bool isOpen() const {return m_fFile || m_xFile;}
    6546:	9e21      	ldr	r6, [sp, #132]	; 0x84
    6548:	2e00      	cmp	r6, #0
    654a:	f47f af73 	bne.w	6434 <autoSave()+0x54>
    654e:	4b28      	ldr	r3, [pc, #160]	; (65f0 <autoSave()+0x210>)
  ~FsBaseFile() {close();}
    6550:	a812      	add	r0, sp, #72	; 0x48
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    6552:	4c25      	ldr	r4, [pc, #148]	; (65e8 <autoSave()+0x208>)
    6554:	930e      	str	r3, [sp, #56]	; 0x38
    6556:	f00b fb1f 	bl	11b98 <FsBaseFile::close()>
    655a:	6923      	ldr	r3, [r4, #16]
    655c:	b11b      	cbz	r3, 6566 <autoSave()+0x186>
    655e:	4620      	mov	r0, r4
    6560:	f7fc fcee 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    6564:	6126      	str	r6, [r4, #16]
    6566:	f8d9 0484 	ldr.w	r0, [r9, #1156]	; 0x484
    656a:	b318      	cbz	r0, 65b4 <autoSave()+0x1d4>
    656c:	2400      	movs	r4, #0
    656e:	4601      	mov	r1, r0
    6570:	2301      	movs	r3, #1
    6572:	aa01      	add	r2, sp, #4
    6574:	4628      	mov	r0, r5
    6576:	940e      	str	r4, [sp, #56]	; 0x38
    6578:	f009 f9fe 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    657c:	2800      	cmp	r0, #0
    657e:	d0bc      	beq.n	64fa <autoSave()+0x11a>
    6580:	4628      	mov	r0, r5
    6582:	f00a faff 	bl	10b84 <FatFile::remove()>
    6586:	e7b8      	b.n	64fa <autoSave()+0x11a>
		if (f) {
    6588:	2b00      	cmp	r3, #0
    658a:	d0ec      	beq.n	6566 <autoSave()+0x186>
    658c:	4604      	mov	r4, r0
    658e:	e7ab      	b.n	64e8 <autoSave()+0x108>
    6590:	f8d9 1488 	ldr.w	r1, [r9, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    6594:	2900      	cmp	r1, #0
    6596:	f43f af42 	beq.w	641e <autoSave()+0x3e>
    659a:	931a      	str	r3, [sp, #104]	; 0x68
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    659c:	aa01      	add	r2, sp, #4
    659e:	2301      	movs	r3, #1
    65a0:	4628      	mov	r0, r5
    65a2:	f007 fb07 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    65a6:	2800      	cmp	r0, #0
    65a8:	f43f af39 	beq.w	641e <autoSave()+0x3e>
    65ac:	4628      	mov	r0, r5
    65ae:	f007 fb65 	bl	dc7c <ExFatFile::remove()>
    65b2:	e734      	b.n	641e <autoSave()+0x3e>
    65b4:	f8d9 1488 	ldr.w	r1, [r9, #1160]	; 0x488
    65b8:	2900      	cmp	r1, #0
    65ba:	d09e      	beq.n	64fa <autoSave()+0x11a>
    65bc:	901a      	str	r0, [sp, #104]	; 0x68
    65be:	2301      	movs	r3, #1
    65c0:	aa01      	add	r2, sp, #4
    65c2:	4628      	mov	r0, r5
    65c4:	f007 faf6 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    65c8:	2800      	cmp	r0, #0
    65ca:	d096      	beq.n	64fa <autoSave()+0x11a>
    65cc:	4628      	mov	r0, r5
    65ce:	f007 fb55 	bl	dc7c <ExFatFile::remove()>
    65d2:	e792      	b.n	64fa <autoSave()+0x11a>
    65d4:	200045e8 	.word	0x200045e8
    65d8:	20000a90 	.word	0x20000a90
    65dc:	200045fc 	.word	0x200045fc
    65e0:	20001524 	.word	0x20001524
    65e4:	20001580 	.word	0x20001580
    65e8:	20003b80 	.word	0x20003b80
    65ec:	20001500 	.word	0x20001500
    65f0:	20001378 	.word	0x20001378
    65f4:	200072c0 	.word	0x200072c0
    65f8:	200045f8 	.word	0x200045f8

000065fc <togglePlay(bool&)>:
  AudioMemoryUsageMaxReset();
    65fc:	4a13      	ldr	r2, [pc, #76]	; (664c <togglePlay(bool&)+0x50>)
void togglePlay(bool& value) {
    65fe:	b538      	push	{r3, r4, r5, lr}
  AudioMemoryUsageMaxReset();
    6600:	8812      	ldrh	r2, [r2, #0]
  SMP.activeCopy = false;
    6602:	2400      	movs	r4, #0
    6604:	4d12      	ldr	r5, [pc, #72]	; (6650 <togglePlay(bool&)+0x54>)
  AudioMemoryUsageMaxReset();
    6606:	4b13      	ldr	r3, [pc, #76]	; (6654 <togglePlay(bool&)+0x58>)
  SMP.activeCopy = false;
    6608:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  AudioMemoryUsageMaxReset();
    660c:	801a      	strh	r2, [r3, #0]
  value = !value;  // Toggle the boolean value
    660e:	7803      	ldrb	r3, [r0, #0]
  Serial.println(value ? "Playing" : "Paused");
    6610:	4a11      	ldr	r2, [pc, #68]	; (6658 <togglePlay(bool&)+0x5c>)
  value = !value;  // Toggle the boolean value
    6612:	f083 0301 	eor.w	r3, r3, #1
  Serial.println(value ? "Playing" : "Paused");
    6616:	42a3      	cmp	r3, r4
  value = !value;  // Toggle the boolean value
    6618:	7003      	strb	r3, [r0, #0]
  Serial.println(value ? "Playing" : "Paused");
    661a:	4810      	ldr	r0, [pc, #64]	; (665c <togglePlay(bool&)+0x60>)
    661c:	bf16      	itet	ne
    661e:	2107      	movne	r1, #7
    6620:	2106      	moveq	r1, #6
    6622:	4610      	movne	r0, r2
    6624:	f011 ff56 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6628:	480d      	ldr	r0, [pc, #52]	; (6660 <togglePlay(bool&)+0x64>)
    662a:	f00f f823 	bl	15674 <Print::println()>
  envelope0.noteOff();
    662e:	480d      	ldr	r0, [pc, #52]	; (6664 <togglePlay(bool&)+0x68>)
    6630:	f005 fb56 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  allOff();
    6634:	f7fd fb70 	bl	3d18 <allOff()>
  autoSave();
    6638:	f7ff fed2 	bl	63e0 <autoSave()>
  beat = 0;
    663c:	490a      	ldr	r1, [pc, #40]	; (6668 <togglePlay(bool&)+0x6c>)
  pagebeat = 0;
    663e:	4a0b      	ldr	r2, [pc, #44]	; (666c <togglePlay(bool&)+0x70>)
  SMP.page = 1;
    6640:	2301      	movs	r3, #1
  beat = 0;
    6642:	600c      	str	r4, [r1, #0]
  pagebeat = 0;
    6644:	6014      	str	r4, [r2, #0]
  SMP.page = 1;
    6646:	616b      	str	r3, [r5, #20]
}
    6648:	bd38      	pop	{r3, r4, r5, pc}
    664a:	bf00      	nop
    664c:	2000c924 	.word	0x2000c924
    6650:	20003294 	.word	0x20003294
    6654:	2000c926 	.word	0x2000c926
    6658:	20000938 	.word	0x20000938
    665c:	20000930 	.word	0x20000930
    6660:	20003314 	.word	0x20003314
    6664:	2000686c 	.word	0x2000686c
    6668:	200067a8 	.word	0x200067a8
    666c:	2000b688 	.word	0x2000b688

00006670 <handleStop()>:
void handleStop() {
    6670:	b538      	push	{r3, r4, r5, lr}
  AudioMemoryUsageMaxReset();
    6672:	4b0e      	ldr	r3, [pc, #56]	; (66ac <handleStop()+0x3c>)
  isPlaying = false;
    6674:	2400      	movs	r4, #0
    6676:	490e      	ldr	r1, [pc, #56]	; (66b0 <handleStop()+0x40>)
  AudioMemoryUsageMaxReset();
    6678:	881a      	ldrh	r2, [r3, #0]
  pulseCount = 0;
    667a:	4b0e      	ldr	r3, [pc, #56]	; (66b4 <handleStop()+0x44>)
  SMP.activeCopy = false;
    667c:	4d0e      	ldr	r5, [pc, #56]	; (66b8 <handleStop()+0x48>)
  pulseCount = 0;
    667e:	601c      	str	r4, [r3, #0]
  AudioMemoryUsageMaxReset();
    6680:	4b0e      	ldr	r3, [pc, #56]	; (66bc <handleStop()+0x4c>)
  envelope0.noteOff();
    6682:	480f      	ldr	r0, [pc, #60]	; (66c0 <handleStop()+0x50>)
  AudioMemoryUsageMaxReset();
    6684:	801a      	strh	r2, [r3, #0]
  isPlaying = false;
    6686:	700c      	strb	r4, [r1, #0]
  SMP.activeCopy = false;
    6688:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  envelope0.noteOff();
    668c:	f005 fb28 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  allOff();
    6690:	f7fd fb42 	bl	3d18 <allOff()>
  autoSave();
    6694:	f7ff fea4 	bl	63e0 <autoSave()>
  pagebeat = 0;
    6698:	4b0a      	ldr	r3, [pc, #40]	; (66c4 <handleStop()+0x54>)
  beat = 0;
    669a:	490b      	ldr	r1, [pc, #44]	; (66c8 <handleStop()+0x58>)
  SMP.page = 1;
    669c:	2201      	movs	r2, #1
  pagebeat = 0;
    669e:	601c      	str	r4, [r3, #0]
  waitForFourBars = false;
    66a0:	4b0a      	ldr	r3, [pc, #40]	; (66cc <handleStop()+0x5c>)
  beat = 0;
    66a2:	600c      	str	r4, [r1, #0]
  SMP.page = 1;
    66a4:	616a      	str	r2, [r5, #20]
  waitForFourBars = false;
    66a6:	701c      	strb	r4, [r3, #0]
}
    66a8:	bd38      	pop	{r3, r4, r5, pc}
    66aa:	bf00      	nop
    66ac:	2000c924 	.word	0x2000c924
    66b0:	2000c953 	.word	0x2000c953
    66b4:	2000b998 	.word	0x2000b998
    66b8:	20003294 	.word	0x20003294
    66bc:	2000c926 	.word	0x2000c926
    66c0:	2000686c 	.word	0x2000686c
    66c4:	2000b688 	.word	0x2000b688
    66c8:	200067a8 	.word	0x200067a8
    66cc:	2000c96b 	.word	0x2000c96b

000066d0 <loadPattern()>:



void loadPattern() {
    66d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    66d4:	b09c      	sub	sp, #112	; 0x70

  Serial.println("Loading slot #" + String(SMP.file));
    66d6:	4c6d      	ldr	r4, [pc, #436]	; (688c <loadPattern()+0x1bc>)
	StringSumHelper(const char *p) : String(p) {}
    66d8:	496d      	ldr	r1, [pc, #436]	; (6890 <loadPattern()+0x1c0>)
    66da:	a80e      	add	r0, sp, #56	; 0x38
    66dc:	f00f f944 	bl	15968 <String::String(char const*)>
    66e0:	220a      	movs	r2, #10
    66e2:	69e1      	ldr	r1, [r4, #28]
    66e4:	a801      	add	r0, sp, #4
    66e6:	f00f f953 	bl	15990 <String::String(int, unsigned char)>
    66ea:	a901      	add	r1, sp, #4
    66ec:	a80e      	add	r0, sp, #56	; 0x38
    66ee:	f00f f9f5 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    66f2:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    66f4:	4867      	ldr	r0, [pc, #412]	; (6894 <loadPattern()+0x1c4>)
    66f6:	f00e ff8b 	bl	15610 <Print::print(String const&)>
    66fa:	4866      	ldr	r0, [pc, #408]	; (6894 <loadPattern()+0x1c4>)
    66fc:	f00e ffba 	bl	15674 <Print::println()>
    6700:	a801      	add	r0, sp, #4
    6702:	f00f f8f5 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    6706:	a80e      	add	r0, sp, #56	; 0x38
    6708:	f00f f8f2 	bl	158f0 <String::~String()>


  drawNoSD();
    670c:	f7fd fb52 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    6710:	2100      	movs	r1, #0
    6712:	4861      	ldr	r0, [pc, #388]	; (6898 <loadPattern()+0x1c8>)
    6714:	f004 fc3a 	bl	af8c <CFastLED::clear(bool)>

  FastLEDclear();

  char OUTPUTf[50];
  sprintf(OUTPUTf, "%d.txt", SMP.file);
    6718:	69e2      	ldr	r2, [r4, #28]
    671a:	4960      	ldr	r1, [pc, #384]	; (689c <loadPattern()+0x1cc>)
    671c:	a801      	add	r0, sp, #4
    671e:	f01b fa33 	bl	21b88 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    6722:	4a5f      	ldr	r2, [pc, #380]	; (68a0 <loadPattern()+0x1d0>)
    6724:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    6728:	2b00      	cmp	r3, #0
    672a:	d033      	beq.n	6794 <loadPattern()+0xc4>
    672c:	2200      	movs	r2, #0
    return tmp.open(this, path, O_RDONLY);
    672e:	4619      	mov	r1, r3
    6730:	a80e      	add	r0, sp, #56	; 0x38
    6732:	4613      	mov	r3, r2
    6734:	920e      	str	r2, [sp, #56]	; 0x38
    6736:	aa01      	add	r2, sp, #4
    6738:	f009 f91e 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    673c:	2800      	cmp	r0, #0
    673e:	d134      	bne.n	67aa <loadPattern()+0xda>
    6740:	4a58      	ldr	r2, [pc, #352]	; (68a4 <loadPattern()+0x1d4>)

  } else {

    for (int nx = 1; nx < maxlen; nx++) {
      for (int ny = 1; ny < maxY + 1; ny++) {
        note[nx][ny][0] = 0;
    6742:	2000      	movs	r0, #0
        note[nx][ny][1] = 30;
    6744:	211e      	movs	r1, #30
    6746:	f502 4c88 	add.w	ip, r2, #17408	; 0x4400
      for (int ny = 1; ny < maxY + 1; ny++) {
    674a:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
        note[nx][ny][1] = 30;
    674e:	e9c3 0102 	strd	r0, r1, [r3, #8]
      for (int ny = 1; ny < maxY + 1; ny++) {
    6752:	3308      	adds	r3, #8
    6754:	429a      	cmp	r2, r3
    6756:	d1fa      	bne.n	674e <loadPattern()+0x7e>
    for (int nx = 1; nx < maxlen; nx++) {
    6758:	3288      	adds	r2, #136	; 0x88
    675a:	4594      	cmp	ip, r2
    675c:	d1f5      	bne.n	674a <loadPattern()+0x7a>
    675e:	f243 2032 	movw	r0, #12850	; 0x3232
    6762:	2132      	movs	r1, #50	; 0x32
      }
    }
    showNumber(fileID, CRGB(50, 50, 50), 0);
    6764:	4b50      	ldr	r3, [pc, #320]	; (68a8 <loadPattern()+0x1d8>)
    6766:	2200      	movs	r2, #0
    6768:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
    676c:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
    6770:	990e      	ldr	r1, [sp, #56]	; 0x38
    6772:	6818      	ldr	r0, [r3, #0]
    6774:	f7fe fc70 	bl	5058 <showNumber(int, CRGB, int)>
    6778:	4847      	ldr	r0, [pc, #284]	; (6898 <loadPattern()+0x1c8>)
    677a:	7801      	ldrb	r1, [r0, #0]
    677c:	f004 fadc 	bl	ad38 <CFastLED::show(unsigned char)>
    FastLEDshow();
  }
  delay(500);
    6780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    6784:	f00f fb86 	bl	15e94 <delay>
  switchMode(&draw);
    6788:	4848      	ldr	r0, [pc, #288]	; (68ac <loadPattern()+0x1dc>)
    678a:	f7fd fe31 	bl	43f0 <switchMode(Mode*)>
}
    678e:	b01c      	add	sp, #112	; 0x70
    6790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6794:	f8d2 1488 	ldr.w	r1, [r2, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    6798:	2900      	cmp	r1, #0
    679a:	d0d1      	beq.n	6740 <loadPattern()+0x70>
    return tmp.open(this, path, O_RDONLY);
    679c:	aa01      	add	r2, sp, #4
    679e:	a80e      	add	r0, sp, #56	; 0x38
    67a0:	931a      	str	r3, [sp, #104]	; 0x68
    67a2:	f007 fa07 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    67a6:	2800      	cmp	r0, #0
    67a8:	d0ca      	beq.n	6740 <loadPattern()+0x70>
    67aa:	2300      	movs	r3, #0
    67ac:	2232      	movs	r2, #50	; 0x32
    showNumber(SMP.file, CRGB(0, 0, 50), 0);
    67ae:	69e0      	ldr	r0, [r4, #28]
    67b0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    67b4:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    67b8:	461a      	mov	r2, r3
    67ba:	990e      	ldr	r1, [sp, #56]	; 0x38
    67bc:	f7fe fc4c 	bl	5058 <showNumber(int, CRGB, int)>
    67c0:	4835      	ldr	r0, [pc, #212]	; (6898 <loadPattern()+0x1c8>)
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    67c2:	4c3b      	ldr	r4, [pc, #236]	; (68b0 <loadPattern()+0x1e0>)
    67c4:	7801      	ldrb	r1, [r0, #0]
    67c6:	f004 fab7 	bl	ad38 <CFastLED::show(unsigned char)>
    myFile = SD.open(OUTPUTf);
    67ca:	2300      	movs	r3, #0
    67cc:	aa01      	add	r2, sp, #4
    67ce:	4934      	ldr	r1, [pc, #208]	; (68a0 <loadPattern()+0x1d0>)
    67d0:	a80e      	add	r0, sp, #56	; 0x38
    67d2:	f7fc fbc7 	bl	2f64 <SDClass::open(char const*, unsigned char)>
    67d6:	6923      	ldr	r3, [r4, #16]
    67d8:	b113      	cbz	r3, 67e0 <loadPattern()+0x110>
    67da:	4620      	mov	r0, r4
    67dc:	f7fc fbb0 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    67e0:	9812      	ldr	r0, [sp, #72]	; 0x48
    67e2:	6120      	str	r0, [r4, #16]
		return (f) ? f->isOpen() : false;
    67e4:	2800      	cmp	r0, #0
    67e6:	d0cb      	beq.n	6780 <loadPattern()+0xb0>
    67e8:	6803      	ldr	r3, [r0, #0]
    67ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    67ec:	4798      	blx	r3
    67ee:	2800      	cmp	r0, #0
    67f0:	d033      	beq.n	685a <loadPattern()+0x18a>
		return (f) ? f->available() : 0;
    67f2:	6920      	ldr	r0, [r4, #16]
    67f4:	2800      	cmp	r0, #0
    67f6:	d0c3      	beq.n	6780 <loadPattern()+0xb0>
      int sdrx = 1;
    67f8:	2501      	movs	r5, #1
        note[sdrx][sdry][0] = b;
    67fa:	4f2e      	ldr	r7, [pc, #184]	; (68b4 <loadPattern()+0x1e4>)
      int sdry = 1;
    67fc:	462e      	mov	r6, r5
    67fe:	6803      	ldr	r3, [r0, #0]
    6800:	691b      	ldr	r3, [r3, #16]
    6802:	4798      	blx	r3
      while (myFile.available()) {
    6804:	b348      	cbz	r0, 685a <loadPattern()+0x18a>
		if (!f) return -1;
    6806:	6920      	ldr	r0, [r4, #16]
    6808:	2800      	cmp	r0, #0
    680a:	d030      	beq.n	686e <loadPattern()+0x19e>
		if (f->read(&b, 1) < 1) return -1;
    680c:	6803      	ldr	r3, [r0, #0]
    680e:	2201      	movs	r2, #1
    6810:	a90e      	add	r1, sp, #56	; 0x38
    6812:	689b      	ldr	r3, [r3, #8]
    6814:	4798      	blx	r3
    6816:	2800      	cmp	r0, #0
    6818:	d034      	beq.n	6884 <loadPattern()+0x1b4>
        note[sdrx][sdry][0] = b;
    681a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
		if (!f) return -1;
    681e:	6920      	ldr	r0, [r4, #16]
    6820:	b368      	cbz	r0, 687e <loadPattern()+0x1ae>
		if (f->read(&b, 1) < 1) return -1;
    6822:	6803      	ldr	r3, [r0, #0]
    6824:	2201      	movs	r2, #1
    6826:	a90e      	add	r1, sp, #56	; 0x38
    6828:	689b      	ldr	r3, [r3, #8]
    682a:	4798      	blx	r3
    682c:	b318      	cbz	r0, 6876 <loadPattern()+0x1a6>
        note[sdrx][sdry][1] = v;
    682e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
		return (f) ? f->available() : 0;
    6832:	6920      	ldr	r0, [r4, #16]
        note[sdrx][sdry][0] = b;
    6834:	eb05 1305 	add.w	r3, r5, r5, lsl #4
    6838:	4433      	add	r3, r6
        sdry++;
    683a:	3601      	adds	r6, #1
        note[sdrx][sdry][0] = b;
    683c:	f847 8033 	str.w	r8, [r7, r3, lsl #3]
        if (sdry > maxY) {
    6840:	2e11      	cmp	r6, #17
        note[sdrx][sdry][1] = v;
    6842:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    6846:	605a      	str	r2, [r3, #4]
        if (sdry > maxY) {
    6848:	d101      	bne.n	684e <loadPattern()+0x17e>
          sdrx++;
    684a:	3501      	adds	r5, #1
          sdry = 1;
    684c:	2601      	movs	r6, #1
        if (sdrx > maxlen) sdrx = 1;
    684e:	2d82      	cmp	r5, #130	; 0x82
    6850:	bf08      	it	eq
    6852:	2501      	moveq	r5, #1
    6854:	2800      	cmp	r0, #0
    6856:	d1d2      	bne.n	67fe <loadPattern()+0x12e>
    6858:	e792      	b.n	6780 <loadPattern()+0xb0>
		if (f) {
    685a:	6920      	ldr	r0, [r4, #16]
    685c:	2800      	cmp	r0, #0
    685e:	d08f      	beq.n	6780 <loadPattern()+0xb0>
			f->close();
    6860:	6803      	ldr	r3, [r0, #0]
    6862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6864:	4798      	blx	r3
			dec_refcount();
    6866:	4812      	ldr	r0, [pc, #72]	; (68b0 <loadPattern()+0x1e0>)
    6868:	f7fc fb6a 	bl	2f40 <File::dec_refcount()>
    686c:	e788      	b.n	6780 <loadPattern()+0xb0>
		if (!f) return -1;
    686e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    6872:	4642      	mov	r2, r8
    6874:	e7de      	b.n	6834 <loadPattern()+0x164>
		return (f) ? f->available() : 0;
    6876:	6920      	ldr	r0, [r4, #16]
    6878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    687c:	e7da      	b.n	6834 <loadPattern()+0x164>
    687e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6882:	e7d7      	b.n	6834 <loadPattern()+0x164>
		if (!f) return -1;
    6884:	6920      	ldr	r0, [r4, #16]
    6886:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    688a:	e7c9      	b.n	6820 <loadPattern()+0x150>
    688c:	20003294 	.word	0x20003294
    6890:	20000954 	.word	0x20000954
    6894:	20003314 	.word	0x20003314
    6898:	200045e8 	.word	0x200045e8
    689c:	20000b58 	.word	0x20000b58
    68a0:	200045f8 	.word	0x200045f8
    68a4:	200072c0 	.word	0x200072c0
    68a8:	20003924 	.word	0x20003924
    68ac:	200038e4 	.word	0x200038e4
    68b0:	20003b80 	.word	0x20003b80
    68b4:	200071b8 	.word	0x200071b8

000068b8 <autoLoad()>:



void autoLoad() {
    68b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    68bc:	b09d      	sub	sp, #116	; 0x74
    return m_fVol ? m_fVol->exists(path) :
    68be:	4e59      	ldr	r6, [pc, #356]	; (6a24 <autoLoad()+0x16c>)
  drawNoSD();
    68c0:	f7fd fa78 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    68c4:	2100      	movs	r1, #0
    68c6:	4858      	ldr	r0, [pc, #352]	; (6a28 <autoLoad()+0x170>)

  FastLEDclear();
  char OUTPUTf[50];
  sprintf(OUTPUTf, "autosave.txt");
    68c8:	ac01      	add	r4, sp, #4
  FastLED.clear();
    68ca:	f004 fb5f 	bl	af8c <CFastLED::clear(bool)>
  sprintf(OUTPUTf, "autosave.txt");
    68ce:	4b57      	ldr	r3, [pc, #348]	; (6a2c <autoLoad()+0x174>)
    68d0:	f8d6 5484 	ldr.w	r5, [r6, #1156]	; 0x484
    68d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    68d6:	c407      	stmia	r4!, {r0, r1, r2}
    68d8:	7023      	strb	r3, [r4, #0]
    68da:	b1d5      	cbz	r5, 6912 <autoLoad()+0x5a>
    68dc:	ae0e      	add	r6, sp, #56	; 0x38
    68de:	2300      	movs	r3, #0
    68e0:	4629      	mov	r1, r5
    68e2:	aa01      	add	r2, sp, #4
    68e4:	4630      	mov	r0, r6
    68e6:	930e      	str	r3, [sp, #56]	; 0x38
    68e8:	f009 f846 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    68ec:	b9f0      	cbnz	r0, 692c <autoLoad()+0x74>
    68ee:	4a50      	ldr	r2, [pc, #320]	; (6a30 <autoLoad()+0x178>)
    myFile.close();

  } else {
    for (int nx = 1; nx < maxlen; nx++) {
      for (int ny = 1; ny < maxY; ny++) {
        note[nx][ny][0] = 0;
    68f0:	2000      	movs	r0, #0
        note[nx][ny][1] = 30;
    68f2:	211e      	movs	r1, #30
    68f4:	f502 4c88 	add.w	ip, r2, #17408	; 0x4400
      for (int ny = 1; ny < maxY; ny++) {
    68f8:	f1a2 0378 	sub.w	r3, r2, #120	; 0x78
        note[nx][ny][1] = 30;
    68fc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      for (int ny = 1; ny < maxY; ny++) {
    6900:	3308      	adds	r3, #8
    6902:	4293      	cmp	r3, r2
    6904:	d1fa      	bne.n	68fc <autoLoad()+0x44>
    for (int nx = 1; nx < maxlen; nx++) {
    6906:	3288      	adds	r2, #136	; 0x88
    6908:	4562      	cmp	r2, ip
    690a:	d1f5      	bne.n	68f8 <autoLoad()+0x40>
      }
    }
  }
}
    690c:	b01d      	add	sp, #116	; 0x74
    690e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    6912:	f8d6 1488 	ldr.w	r1, [r6, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    6916:	2900      	cmp	r1, #0
    6918:	d0e9      	beq.n	68ee <autoLoad()+0x36>
    691a:	ae0e      	add	r6, sp, #56	; 0x38
    691c:	462b      	mov	r3, r5
    691e:	aa01      	add	r2, sp, #4
    6920:	951a      	str	r5, [sp, #104]	; 0x68
    6922:	4630      	mov	r0, r6
    6924:	f007 f946 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6928:	2800      	cmp	r0, #0
    692a:	d0e0      	beq.n	68ee <autoLoad()+0x36>
    692c:	2300      	movs	r3, #0
    692e:	2232      	movs	r2, #50	; 0x32
    showNumber(fileID, CRGB(0, 0, 50), 0);
    6930:	4940      	ldr	r1, [pc, #256]	; (6a34 <autoLoad()+0x17c>)
    6932:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
    6936:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    693a:	461a      	mov	r2, r3
    693c:	6808      	ldr	r0, [r1, #0]
    693e:	990e      	ldr	r1, [sp, #56]	; 0x38
    6940:	f7fe fb8a 	bl	5058 <showNumber(int, CRGB, int)>
    6944:	4838      	ldr	r0, [pc, #224]	; (6a28 <autoLoad()+0x170>)
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    6946:	4c3c      	ldr	r4, [pc, #240]	; (6a38 <autoLoad()+0x180>)
    6948:	7801      	ldrb	r1, [r0, #0]
    694a:	f004 f9f5 	bl	ad38 <CFastLED::show(unsigned char)>
    myFile = SD.open(OUTPUTf);
    694e:	2300      	movs	r3, #0
    6950:	aa01      	add	r2, sp, #4
    6952:	4934      	ldr	r1, [pc, #208]	; (6a24 <autoLoad()+0x16c>)
    6954:	4630      	mov	r0, r6
    6956:	f7fc fb05 	bl	2f64 <SDClass::open(char const*, unsigned char)>
    695a:	6923      	ldr	r3, [r4, #16]
    695c:	b113      	cbz	r3, 6964 <autoLoad()+0xac>
    695e:	4620      	mov	r0, r4
    6960:	f7fc faee 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    6964:	9812      	ldr	r0, [sp, #72]	; 0x48
    6966:	6120      	str	r0, [r4, #16]
		return (f) ? f->isOpen() : false;
    6968:	2800      	cmp	r0, #0
    696a:	d0cf      	beq.n	690c <autoLoad()+0x54>
    696c:	6803      	ldr	r3, [r0, #0]
    696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6970:	4798      	blx	r3
    6972:	2800      	cmp	r0, #0
    6974:	d03a      	beq.n	69ec <autoLoad()+0x134>
		return (f) ? f->available() : 0;
    6976:	6920      	ldr	r0, [r4, #16]
    6978:	2800      	cmp	r0, #0
    697a:	d0c7      	beq.n	690c <autoLoad()+0x54>
      int sdrx = 1;
    697c:	2501      	movs	r5, #1
        note[sdrx][sdry][0] = b;
    697e:	4f2f      	ldr	r7, [pc, #188]	; (6a3c <autoLoad()+0x184>)
      int sdry = 1;
    6980:	46a8      	mov	r8, r5
    6982:	6803      	ldr	r3, [r0, #0]
    6984:	691b      	ldr	r3, [r3, #16]
    6986:	4798      	blx	r3
      while (myFile.available()) {
    6988:	2800      	cmp	r0, #0
    698a:	d02f      	beq.n	69ec <autoLoad()+0x134>
		if (!f) return -1;
    698c:	6920      	ldr	r0, [r4, #16]
    698e:	2800      	cmp	r0, #0
    6990:	d038      	beq.n	6a04 <autoLoad()+0x14c>
		if (f->read(&b, 1) < 1) return -1;
    6992:	6803      	ldr	r3, [r0, #0]
    6994:	2201      	movs	r2, #1
    6996:	4631      	mov	r1, r6
    6998:	689b      	ldr	r3, [r3, #8]
    699a:	4798      	blx	r3
    699c:	2800      	cmp	r0, #0
    699e:	d03c      	beq.n	6a1a <autoLoad()+0x162>
        note[sdrx][sdry][0] = b;
    69a0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
		if (!f) return -1;
    69a4:	6920      	ldr	r0, [r4, #16]
    69a6:	2800      	cmp	r0, #0
    69a8:	d034      	beq.n	6a14 <autoLoad()+0x15c>
		if (f->read(&b, 1) < 1) return -1;
    69aa:	6803      	ldr	r3, [r0, #0]
    69ac:	2201      	movs	r2, #1
    69ae:	4631      	mov	r1, r6
    69b0:	689b      	ldr	r3, [r3, #8]
    69b2:	4798      	blx	r3
    69b4:	b350      	cbz	r0, 6a0c <autoLoad()+0x154>
        note[sdrx][sdry][1] = v;
    69b6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
		return (f) ? f->available() : 0;
    69ba:	6920      	ldr	r0, [r4, #16]
        note[sdrx][sdry][0] = b;
    69bc:	eb05 1305 	add.w	r3, r5, r5, lsl #4
    69c0:	4443      	add	r3, r8
        sdry++;
    69c2:	f108 0801 	add.w	r8, r8, #1
        note[sdrx][sdry][0] = b;
    69c6:	f847 9033 	str.w	r9, [r7, r3, lsl #3]
        if (sdry > maxY) {
    69ca:	f1b8 0f11 	cmp.w	r8, #17
        note[sdrx][sdry][1] = v;
    69ce:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
    69d2:	605a      	str	r2, [r3, #4]
        if (sdry > maxY) {
    69d4:	d102      	bne.n	69dc <autoLoad()+0x124>
          sdrx++;
    69d6:	3501      	adds	r5, #1
          sdry = 1;
    69d8:	f04f 0801 	mov.w	r8, #1
        if (sdrx > maxlen) sdrx = 1;
    69dc:	2d82      	cmp	r5, #130	; 0x82
    69de:	bf08      	it	eq
    69e0:	2501      	moveq	r5, #1
    69e2:	2800      	cmp	r0, #0
    69e4:	d1cd      	bne.n	6982 <autoLoad()+0xca>
}
    69e6:	b01d      	add	sp, #116	; 0x74
    69e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (f) {
    69ec:	6920      	ldr	r0, [r4, #16]
    69ee:	2800      	cmp	r0, #0
    69f0:	d08c      	beq.n	690c <autoLoad()+0x54>
			f->close();
    69f2:	6803      	ldr	r3, [r0, #0]
    69f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    69f6:	4798      	blx	r3
			dec_refcount();
    69f8:	480f      	ldr	r0, [pc, #60]	; (6a38 <autoLoad()+0x180>)
    69fa:	f7fc faa1 	bl	2f40 <File::dec_refcount()>
    69fe:	b01d      	add	sp, #116	; 0x74
    6a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (!f) return -1;
    6a04:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    6a08:	464a      	mov	r2, r9
    6a0a:	e7d7      	b.n	69bc <autoLoad()+0x104>
		return (f) ? f->available() : 0;
    6a0c:	6920      	ldr	r0, [r4, #16]
    6a0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a12:	e7d3      	b.n	69bc <autoLoad()+0x104>
    6a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6a18:	e7d0      	b.n	69bc <autoLoad()+0x104>
		if (!f) return -1;
    6a1a:	6920      	ldr	r0, [r4, #16]
    6a1c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    6a20:	e7c1      	b.n	69a6 <autoLoad()+0xee>
    6a22:	bf00      	nop
    6a24:	200045f8 	.word	0x200045f8
    6a28:	200045e8 	.word	0x200045e8
    6a2c:	20000a90 	.word	0x20000a90
    6a30:	200072b8 	.word	0x200072b8
    6a34:	20003924 	.word	0x20003924
    6a38:	20003b80 	.word	0x20003b80
    6a3c:	200071b8 	.word	0x200071b8

00006a40 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()>:
    audiosampler() : __base() {
    6a40:	b5f0      	push	{r4, r5, r6, r7, lr}
    basesampler() : _polysampler() {
    6a42:	2500      	movs	r5, #0
    audiosampler() : __base() {
    6a44:	4604      	mov	r4, r0
    6a46:	b08b      	sub	sp, #44	; 0x2c
      : _Function_base() { }
    6a48:	f100 0610 	add.w	r6, r0, #16
    polyphonicsampler() : _numVoices(0) {
    6a4c:	4629      	mov	r1, r5
    basesampler() : _polysampler() {
    6a4e:	7005      	strb	r5, [r0, #0]
    6a50:	f880 50b0 	strb.w	r5, [r0, #176]	; 0xb0
    6a54:	2240      	movs	r2, #64	; 0x40
	      _M_invoker = &_My_handler::_M_invoke;
    6a56:	4f1a      	ldr	r7, [pc, #104]	; (6ac0 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()+0x80>)
	: _M_start(), _M_finish(), _M_end_of_storage()
    6a58:	e9c0 5501 	strd	r5, r5, [r0, #4]
      : _Function_base() { }
    6a5c:	e9c0 5503 	strd	r5, r5, [r0, #12]
    6a60:	e9c0 5505 	strd	r5, r5, [r0, #20]
    6a64:	30b4      	adds	r0, #180	; 0xb4
    6a66:	f01b fd3b 	bl	224e0 <memset>
    6a6a:	4629      	mov	r1, r5
    6a6c:	2240      	movs	r2, #64	; 0x40
    6a6e:	f104 00f4 	add.w	r0, r4, #244	; 0xf4
    6a72:	f01b fd35 	bl	224e0 <memset>
          activeNotes[i] = 255;
    6a76:	2280      	movs	r2, #128	; 0x80
    6a78:	21ff      	movs	r1, #255	; 0xff
    6a7a:	f104 0020 	add.w	r0, r4, #32
    6a7e:	f01b fd2f 	bl	224e0 <memset>
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
    6a82:	a906      	add	r1, sp, #24
    6a84:	466b      	mov	r3, sp
	      _M_manager = &_My_handler::_M_manager;
    6a86:	f8df c03c 	ldr.w	ip, [pc, #60]	; 6ac4 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()+0x84>
    6a8a:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    6a8e:	2203      	movs	r2, #3
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
    6a90:	e9cd 4506 	strd	r4, r5, [sp, #24]
    6a94:	c903      	ldmia	r1, {r0, r1}
    6a96:	e9c4 554d 	strd	r5, r5, [r4, #308]	; 0x134
    6a9a:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
    6a9e:	e886 0003 	stmia.w	r6, {r0, r1}
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    6aa2:	a902      	add	r1, sp, #8
    6aa4:	f8c4 c018 	str.w	ip, [r4, #24]
    6aa8:	61e7      	str	r7, [r4, #28]
    6aaa:	4608      	mov	r0, r1
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
    6aac:	e9cd 4502 	strd	r4, r5, [sp, #8]
	      _M_manager = &_My_handler::_M_manager;
    6ab0:	e9cd c704 	strd	ip, r7, [sp, #16]
	_M_manager(_M_functor, _M_functor, __destroy_functor);
    6ab4:	f7f9 feee 	bl	894 <std::_Function_handler<void (unsigned char, unsigned char, unsigned char, bool, bool), audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()::{lambda(unsigned char, unsigned char, unsigned char, bool, bool)#1}>::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)>
    }
    6ab8:	4620      	mov	r0, r4
    6aba:	b00b      	add	sp, #44	; 0x2c
    6abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6abe:	bf00      	nop
    6ac0:	00003bc1 	.word	0x00003bc1
    6ac4:	00000895 	.word	0x00000895

00006ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
    6ac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6acc:	e9d0 8900 	ldrd	r8, r9, [r0]
    6ad0:	460f      	mov	r7, r1
    6ad2:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
    6ad4:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    6ad8:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
    6adc:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    6ae0:	d054      	beq.n	6b8c <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xc4>
    6ae2:	1093      	asrs	r3, r2, #2
    6ae4:	4606      	mov	r6, r0
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
    6ae6:	eba7 0508 	sub.w	r5, r7, r8
    6aea:	2b01      	cmp	r3, #1
    6aec:	461a      	mov	r2, r3
    6aee:	bf38      	it	cc
    6af0:	2201      	movcc	r2, #1
    6af2:	189c      	adds	r4, r3, r2
    6af4:	d248      	bcs.n	6b88 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    6af6:	2c00      	cmp	r4, #0
    6af8:	d13c      	bne.n	6b74 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xac>
    6afa:	46a3      	mov	fp, r4
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    6afc:	f8da 3000 	ldr.w	r3, [sl]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
    6b00:	2d00      	cmp	r5, #0
    6b02:	f84b 3005 	str.w	r3, [fp, r5]
    6b06:	dc24      	bgt.n	6b52 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x8a>
      ptrdiff_t __count = __last - __first;
    6b08:	eba9 0907 	sub.w	r9, r9, r7
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
    6b0c:	3504      	adds	r5, #4
      if (__count > 0)
    6b0e:	f1b9 0f00 	cmp.w	r9, #0
    6b12:	445d      	add	r5, fp
    6b14:	dc13      	bgt.n	6b3e <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x76>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
      return __result + __count;
    6b16:	444d      	add	r5, r9
	if (__p)
    6b18:	f1b8 0f00 	cmp.w	r8, #0
    6b1c:	d104      	bne.n	6b28 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x60>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
    6b1e:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    6b20:	e9c6 b500 	strd	fp, r5, [r6]
    }
    6b24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
    6b28:	68b1      	ldr	r1, [r6, #8]
    6b2a:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    6b2e:	4640      	mov	r0, r8
    6b30:	f00f fdd6 	bl	166e0 <operator delete(void*, unsigned int)>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    6b34:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    6b36:	e9c6 b500 	strd	fp, r5, [r6]
    }
    6b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    6b3e:	4628      	mov	r0, r5
    6b40:	4639      	mov	r1, r7
    6b42:	464a      	mov	r2, r9
      return __result + __count;
    6b44:	444d      	add	r5, r9
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    6b46:	f00f fd29 	bl	1659c <memcpy>
    6b4a:	f1b8 0f00 	cmp.w	r8, #0
    6b4e:	d0e6      	beq.n	6b1e <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x56>
    6b50:	e7ea      	b.n	6b28 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x60>
      ptrdiff_t __count = __last - __first;
    6b52:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    6b56:	462a      	mov	r2, r5
    6b58:	4641      	mov	r1, r8
    6b5a:	4658      	mov	r0, fp
	      ++__new_finish;
    6b5c:	3504      	adds	r5, #4
    6b5e:	f01b fc43 	bl	223e8 <memmove>
      if (__count > 0)
    6b62:	f1b9 0f00 	cmp.w	r9, #0
    6b66:	445d      	add	r5, fp
    6b68:	dce9      	bgt.n	6b3e <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
    6b6a:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
    6b6c:	444d      	add	r5, r9
    6b6e:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    6b72:	e7dc      	b.n	6b2e <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    6b74:	428c      	cmp	r4, r1
    6b76:	bf28      	it	cs
    6b78:	460c      	movcs	r4, r1
    6b7a:	00a4      	lsls	r4, r4, #2
    6b7c:	4620      	mov	r0, r4
    6b7e:	f00f fda7 	bl	166d0 <operator new(unsigned int)>
    6b82:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
    6b84:	4404      	add	r4, r0
    6b86:	e7b9      	b.n	6afc <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0x34>
    6b88:	4c02      	ldr	r4, [pc, #8]	; (6b94 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xcc>)
    6b8a:	e7f7      	b.n	6b7c <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xb4>
	  __throw_length_error(__N(__s));
    6b8c:	4802      	ldr	r0, [pc, #8]	; (6b98 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)+0xd0>)
    6b8e:	f012 f811 	bl	18bb4 <std::__throw_length_error(char const*)>
    6b92:	bf00      	nop
    6b94:	7ffffffc 	.word	0x7ffffffc
    6b98:	200011d0 	.word	0x200011d0

00006b9c <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)>:
    void addVoice(TAudioPlay &audioplayarrayresmp, AudioMixer4 &mixer, uint8_t mixerChannel, AudioEffectEnvelope &envelope) {
    6b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ba0:	b082      	sub	sp, #8
    6ba2:	4604      	mov	r4, r0
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    6ba4:	2018      	movs	r0, #24
    void addVoice(TAudioPlay &audioplayarrayresmp, AudioMixer4 &mixer, uint8_t mixerChannel, AudioEffectEnvelope &envelope) {
    6ba6:	460d      	mov	r5, r1
    6ba8:	461e      	mov	r6, r3
    6baa:	4617      	mov	r7, r2
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    6bac:	f00f fd90 	bl	166d0 <operator new(unsigned int)>
        _audioenvelop(audioenvelop),
    6bb0:	9b08      	ldr	r3, [sp, #32]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    6bb2:	68a1      	ldr	r1, [r4, #8]
    6bb4:	6043      	str	r3, [r0, #4]
    6bb6:	68e3      	ldr	r3, [r4, #12]
        _audioplayarray(audioplayarray), 
    6bb8:	6005      	str	r5, [r0, #0]
        _mixerChannel(mixerChannel)
    6bba:	2500      	movs	r5, #0
    6bbc:	4299      	cmp	r1, r3
        _audiomixer(audiomixer),
    6bbe:	60c7      	str	r7, [r0, #12]
        _mixerChannel(mixerChannel)
    6bc0:	7506      	strb	r6, [r0, #20]
    6bc2:	6085      	str	r5, [r0, #8]
    6bc4:	6105      	str	r5, [r0, #16]
    6bc6:	7585      	strb	r5, [r0, #22]
    6bc8:	9001      	str	r0, [sp, #4]
    6bca:	d035      	beq.n	6c38 <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)+0x9c>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    6bcc:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    6bd0:	60a1      	str	r1, [r4, #8]
        _numVoices++;
    6bd2:	7825      	ldrb	r5, [r4, #0]
        if (numVoices > _numVoices)
    6bd4:	f894 60b0 	ldrb.w	r6, [r4, #176]	; 0xb0
    6bd8:	3501      	adds	r5, #1
    6bda:	b2ed      	uxtb	r5, r5
    6bdc:	42b5      	cmp	r5, r6
    6bde:	7025      	strb	r5, [r4, #0]
    6be0:	d914      	bls.n	6c0c <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)+0x70>
              activeVoices[i] = 255;
    6be2:	1baf      	subs	r7, r5, r6
    6be4:	f106 00a0 	add.w	r0, r6, #160	; 0xa0
    6be8:	21ff      	movs	r1, #255	; 0xff
    6bea:	463a      	mov	r2, r7
    6bec:	4420      	add	r0, r4
    6bee:	f01b fc77 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    6bf2:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    6bf6:	00ba      	lsls	r2, r7, #2
    6bf8:	2100      	movs	r1, #0
    6bfa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6bfe:	f01b fc6f 	bl	224e0 <memset>
        _numVoices = numVoices;
    6c02:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
    }
    6c06:	b002      	add	sp, #8
    6c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        else if (numVoices < _numVoices) {
    6c0c:	d2f9      	bcs.n	6c02 <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)+0x66>
              activeVoices[i] = 255;
    6c0e:	eba6 0805 	sub.w	r8, r6, r5
    6c12:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
    6c16:	1baf      	subs	r7, r5, r6
    6c18:	21ff      	movs	r1, #255	; 0xff
    6c1a:	4642      	mov	r2, r8
    6c1c:	4420      	add	r0, r4
    6c1e:	f01b fc5f 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    6c22:	f107 002e 	add.w	r0, r7, #46	; 0x2e
    6c26:	ea4f 0288 	mov.w	r2, r8, lsl #2
    6c2a:	2100      	movs	r1, #0
    6c2c:	4430      	add	r0, r6
    6c2e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    6c32:	f01b fc55 	bl	224e0 <memset>
    6c36:	e7e4      	b.n	6c02 <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)+0x66>
	  _M_realloc_insert(end(), __x);
    6c38:	aa01      	add	r2, sp, #4
    6c3a:	1d20      	adds	r0, r4, #4
    6c3c:	f7ff ff44 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    6c40:	e7c7      	b.n	6bd2 <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)+0x36>
    6c42:	bf00      	nop

00006c44 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)>:
      vector<_Tp, _Alloc>::
    6c44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6c48:	e9d0 8900 	ldrd	r8, r9, [r0]
    6c4c:	460f      	mov	r7, r1
    6c4e:	4692      	mov	sl, r2
	if (max_size() - size() < __n)
    6c50:	f06f 4160 	mvn.w	r1, #3758096384	; 0xe0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    6c54:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
    6c58:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
    6c5c:	d054      	beq.n	6d08 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xc4>
    6c5e:	1093      	asrs	r3, r2, #2
    6c60:	4606      	mov	r6, r0
    6c62:	eba7 0508 	sub.w	r5, r7, r8
    6c66:	2b01      	cmp	r3, #1
    6c68:	461a      	mov	r2, r3
    6c6a:	bf38      	it	cc
    6c6c:	2201      	movcc	r2, #1
    6c6e:	189c      	adds	r4, r3, r2
    6c70:	d248      	bcs.n	6d04 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xc0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    6c72:	2c00      	cmp	r4, #0
    6c74:	d13c      	bne.n	6cf0 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xac>
    6c76:	46a3      	mov	fp, r4
    6c78:	f8da 3000 	ldr.w	r3, [sl]
      if (__count > 0)
    6c7c:	2d00      	cmp	r5, #0
    6c7e:	f84b 3005 	str.w	r3, [fp, r5]
    6c82:	dc24      	bgt.n	6cce <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x8a>
      ptrdiff_t __count = __last - __first;
    6c84:	eba9 0907 	sub.w	r9, r9, r7
	      ++__new_finish;
    6c88:	3504      	adds	r5, #4
      if (__count > 0)
    6c8a:	f1b9 0f00 	cmp.w	r9, #0
    6c8e:	445d      	add	r5, fp
    6c90:	dc13      	bgt.n	6cba <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x76>
      return __result + __count;
    6c92:	444d      	add	r5, r9
	if (__p)
    6c94:	f1b8 0f00 	cmp.w	r8, #0
    6c98:	d104      	bne.n	6ca4 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x60>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    6c9a:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    6c9c:	e9c6 b500 	strd	fp, r5, [r6]
    }
    6ca0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    this->_M_impl._M_end_of_storage - __old_start);
    6ca4:	68b1      	ldr	r1, [r6, #8]
    6ca6:	eba1 0108 	sub.w	r1, r1, r8
	::operator delete(__p
    6caa:	4640      	mov	r0, r8
    6cac:	f00f fd18 	bl	166e0 <operator delete(void*, unsigned int)>
      this->_M_impl._M_end_of_storage = __new_start + __len;
    6cb0:	60b4      	str	r4, [r6, #8]
      this->_M_impl._M_finish = __new_finish;
    6cb2:	e9c6 b500 	strd	fp, r5, [r6]
    }
    6cb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    6cba:	4628      	mov	r0, r5
    6cbc:	4639      	mov	r1, r7
    6cbe:	464a      	mov	r2, r9
      return __result + __count;
    6cc0:	444d      	add	r5, r9
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    6cc2:	f00f fc6b 	bl	1659c <memcpy>
    6cc6:	f1b8 0f00 	cmp.w	r8, #0
    6cca:	d0e6      	beq.n	6c9a <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x56>
    6ccc:	e7ea      	b.n	6ca4 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x60>
      ptrdiff_t __count = __last - __first;
    6cce:	eba9 0907 	sub.w	r9, r9, r7
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
    6cd2:	462a      	mov	r2, r5
    6cd4:	4641      	mov	r1, r8
    6cd6:	4658      	mov	r0, fp
	      ++__new_finish;
    6cd8:	3504      	adds	r5, #4
    6cda:	f01b fb85 	bl	223e8 <memmove>
      if (__count > 0)
    6cde:	f1b9 0f00 	cmp.w	r9, #0
    6ce2:	445d      	add	r5, fp
    6ce4:	dce9      	bgt.n	6cba <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x76>
		    this->_M_impl._M_end_of_storage - __old_start);
    6ce6:	68b1      	ldr	r1, [r6, #8]
      return __result + __count;
    6ce8:	444d      	add	r5, r9
    6cea:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
    6cee:	e7dc      	b.n	6caa <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x66>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    6cf0:	428c      	cmp	r4, r1
    6cf2:	bf28      	it	cs
    6cf4:	460c      	movcs	r4, r1
    6cf6:	00a4      	lsls	r4, r4, #2
    6cf8:	4620      	mov	r0, r4
    6cfa:	f00f fce9 	bl	166d0 <operator new(unsigned int)>
    6cfe:	4683      	mov	fp, r0
      this->_M_impl._M_end_of_storage = __new_start + __len;
    6d00:	4404      	add	r4, r0
    6d02:	e7b9      	b.n	6c78 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0x34>
    6d04:	4c02      	ldr	r4, [pc, #8]	; (6d10 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xcc>)
    6d06:	e7f7      	b.n	6cf8 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xb4>
	  __throw_length_error(__N(__s));
    6d08:	4802      	ldr	r0, [pc, #8]	; (6d14 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)+0xd0>)
    6d0a:	f011 ff53 	bl	18bb4 <std::__throw_length_error(char const*)>
    6d0e:	bf00      	nop
    6d10:	7ffffffc 	.word	0x7ffffffc
    6d14:	200011d0 	.word	0x200011d0

00006d18 <previewSample(int, int)>:
void previewSample(int folder, int sampleID) {
    6d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      : _M_current(__i) { }
    6d1c:	4db3      	ldr	r5, [pc, #716]	; (6fec <previewSample(int, int)+0x2d4>)
		if (release_count == 0) release_count = 1;
    6d1e:	2201      	movs	r2, #1
    6d20:	4bb3      	ldr	r3, [pc, #716]	; (6ff0 <previewSample(int, int)+0x2d8>)
    6d22:	b096      	sub	sp, #88	; 0x58
    6d24:	4607      	mov	r7, r0
    6d26:	4688      	mov	r8, r1
    6d28:	869a      	strh	r2, [r3, #52]	; 0x34
    6d2a:	e9d5 464d 	ldrd	r4, r6, [r5, #308]	; 0x134
        for (auto && sample : _audiosamples) {
    6d2e:	42b4      	cmp	r4, r6
    6d30:	d00d      	beq.n	6d4e <previewSample(int, int)+0x36>
            delete sample;
    6d32:	f854 0b04 	ldr.w	r0, [r4], #4
    6d36:	b110      	cbz	r0, 6d3e <previewSample(int, int)+0x26>
    6d38:	2114      	movs	r1, #20
    6d3a:	f00f fcd1 	bl	166e0 <operator delete(void*, unsigned int)>
        for (auto && sample : _audiosamples) {
    6d3e:	42a6      	cmp	r6, r4
    6d40:	d1f7      	bne.n	6d32 <previewSample(int, int)+0x1a>
      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
    6d42:	e9d5 324d 	ldrd	r3, r2, [r5, #308]	; 0x134
    6d46:	4293      	cmp	r3, r2
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
			  _M_get_Tp_allocator());
	    this->_M_impl._M_finish = __pos;
    6d48:	bf18      	it	ne
    6d4a:	f8c5 3138 	strne.w	r3, [r5, #312]	; 0x138
  envelope0.noteOff();
    6d4e:	48a8      	ldr	r0, [pc, #672]	; (6ff0 <previewSample(int, int)+0x2d8>)
    6d50:	f004 ffc6 	bl	bce0 <AudioEffectEnvelope::noteOff()>
  int previewsample = ((folder)*100) + sampleID;
    6d54:	2364      	movs	r3, #100	; 0x64
  sprintf(OUTPUTf, "samples/%d/_%d.wav", folder, previewsample);
    6d56:	463a      	mov	r2, r7
    6d58:	49a6      	ldr	r1, [pc, #664]	; (6ff4 <previewSample(int, int)+0x2dc>)
    6d5a:	fb03 8307 	mla	r3, r3, r7, r8
    6d5e:	a809      	add	r0, sp, #36	; 0x24
    6d60:	f01a ff12 	bl	21b88 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6d64:	a809      	add	r0, sp, #36	; 0x24
    6d66:	f01b ff4b 	bl	22c00 <strlen>
    6d6a:	4601      	mov	r1, r0
    6d6c:	a809      	add	r0, sp, #36	; 0x24
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    6d6e:	4ea2      	ldr	r6, [pc, #648]	; (6ff8 <previewSample(int, int)+0x2e0>)
    6d70:	f011 fbb0 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6d74:	48a1      	ldr	r0, [pc, #644]	; (6ffc <previewSample(int, int)+0x2e4>)
    6d76:	f00e fc7d 	bl	15674 <Print::println()>
  sampleFile = SD.open(OUTPUTf);
    6d7a:	2300      	movs	r3, #0
    6d7c:	aa09      	add	r2, sp, #36	; 0x24
    6d7e:	49a0      	ldr	r1, [pc, #640]	; (7000 <previewSample(int, int)+0x2e8>)
    6d80:	a804      	add	r0, sp, #16
    6d82:	f7fc f8ef 	bl	2f64 <SDClass::open(char const*, unsigned char)>
    6d86:	6933      	ldr	r3, [r6, #16]
    6d88:	b113      	cbz	r3, 6d90 <previewSample(int, int)+0x78>
    6d8a:	4630      	mov	r0, r6
    6d8c:	f7fc f8d8 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    6d90:	9808      	ldr	r0, [sp, #32]
  SMP.smplen = 0;
    6d92:	2400      	movs	r4, #0
    6d94:	f8df 8290 	ldr.w	r8, [pc, #656]	; 7028 <previewSample(int, int)+0x310>
    6d98:	6130      	str	r0, [r6, #16]
    6d9a:	f8c8 403c 	str.w	r4, [r8, #60]	; 0x3c
		return (f) ? f->isOpen() : false;
    6d9e:	2800      	cmp	r0, #0
    6da0:	d03a      	beq.n	6e18 <previewSample(int, int)+0x100>
    6da2:	6803      	ldr	r3, [r0, #0]
    6da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    6da6:	4798      	blx	r3
    6da8:	4607      	mov	r7, r0
    6daa:	2800      	cmp	r0, #0
    6dac:	d034      	beq.n	6e18 <previewSample(int, int)+0x100>
		return seek(pos, SeekSet);
    6dae:	6930      	ldr	r0, [r6, #16]
		return (f) ? f->seek(pos, mode) : false;
    6db0:	2800      	cmp	r0, #0
    6db2:	f000 8111 	beq.w	6fd8 <previewSample(int, int)+0x2c0>
    6db6:	6803      	ldr	r3, [r0, #0]
    6db8:	2218      	movs	r2, #24
    6dba:	9400      	str	r4, [sp, #0]
    6dbc:	6a19      	ldr	r1, [r3, #32]
    6dbe:	2300      	movs	r3, #0
    6dc0:	4788      	blx	r1
		if (!f) return -1;
    6dc2:	6930      	ldr	r0, [r6, #16]
    6dc4:	2800      	cmp	r0, #0
    6dc6:	f000 8107 	beq.w	6fd8 <previewSample(int, int)+0x2c0>
		if (f->read(&b, 1) < 1) return -1;
    6dca:	6803      	ldr	r3, [r0, #0]
    6dcc:	2201      	movs	r2, #1
    6dce:	a904      	add	r1, sp, #16
    6dd0:	689b      	ldr	r3, [r3, #8]
    6dd2:	4798      	blx	r3
    6dd4:	2800      	cmp	r0, #0
    6dd6:	f000 8107 	beq.w	6fe8 <previewSample(int, int)+0x2d0>
		return b;
    6dda:	f89d 3010 	ldrb.w	r3, [sp, #16]
      if (g == 72) PrevSampleRate = 4;
    6dde:	2b48      	cmp	r3, #72	; 0x48
    6de0:	d020      	beq.n	6e24 <previewSample(int, int)+0x10c>
      if (g == 68) PrevSampleRate = 3;
    6de2:	2b44      	cmp	r3, #68	; 0x44
    6de4:	f040 80bb 	bne.w	6f5e <previewSample(int, int)+0x246>
    6de8:	4c86      	ldr	r4, [pc, #536]	; (7004 <previewSample(int, int)+0x2ec>)
    6dea:	2303      	movs	r3, #3
    6dec:	6023      	str	r3, [r4, #0]
    int startOffsetBytes = startOffset * PrevSampleRate * 2;  // Convert to bytes (assuming 16-bit samples)
    6dee:	6823      	ldr	r3, [r4, #0]
    6df0:	e01b      	b.n	6e2a <previewSample(int, int)+0x112>
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    6df2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6df6:	f000 8127 	beq.w	7048 <previewSample(int, int)+0x330>
            if (indexOfVoice < _numVoices) {
    6dfa:	4580      	cmp	r8, r0
    6dfc:	f080 811b 	bcs.w	7036 <previewSample(int, int)+0x31e>
                activeVoices[indexOfVoice] = noteNumber;
    6e00:	eb05 0308 	add.w	r3, r5, r8
        if (indexOfVoice != 255) {            
    6e04:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
                activeVoices[indexOfVoice] = noteNumber;
    6e08:	f883 40a0 	strb.w	r4, [r3, #160]	; 0xa0
                activeNotes[noteNumber] = indexOfVoice;                
    6e0c:	eb05 0304 	add.w	r3, r5, r4
    6e10:	f883 8020 	strb.w	r8, [r3, #32]
        if (indexOfVoice != 255) {            
    6e14:	f040 812e 	bne.w	7074 <previewSample(int, int)+0x35c>
}
    6e18:	b016      	add	sp, #88	; 0x58
    6e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (g == 0) PrevSampleRate = 4;
    6e1e:	2b00      	cmp	r3, #0
    6e20:	f040 80e2 	bne.w	6fe8 <previewSample(int, int)+0x2d0>
    6e24:	2304      	movs	r3, #4
    6e26:	4c77      	ldr	r4, [pc, #476]	; (7004 <previewSample(int, int)+0x2ec>)
    6e28:	6023      	str	r3, [r4, #0]
    int startOffsetBytes = startOffset * PrevSampleRate * 2;  // Convert to bytes (assuming 16-bit samples)
    6e2a:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
    6e2e:	6930      	ldr	r0, [r6, #16]
    6e30:	fb03 f202 	mul.w	r2, r3, r2
    6e34:	f44f 73c8 	mov.w	r3, #400	; 0x190
    6e38:	fb03 f202 	mul.w	r2, r3, r2
    sampleFile.seek(44 + startOffsetBytes);
    6e3c:	322c      	adds	r2, #44	; 0x2c
    6e3e:	17d3      	asrs	r3, r2, #31
		return (f) ? f->seek(pos, mode) : false;
    6e40:	2800      	cmp	r0, #0
    6e42:	f000 80ca 	beq.w	6fda <previewSample(int, int)+0x2c2>
    6e46:	6801      	ldr	r1, [r0, #0]
    6e48:	f04f 0900 	mov.w	r9, #0
    6e4c:	f8cd 9000 	str.w	r9, [sp]
    6e50:	6a09      	ldr	r1, [r1, #32]
    6e52:	4788      	blx	r1
    memset(sampled[0], 0, sizeof(sample_len[0]));
    6e54:	4b6c      	ldr	r3, [pc, #432]	; (7008 <previewSample(int, int)+0x2f0>)
		return (f) ? f->available() : 0;
    6e56:	6930      	ldr	r0, [r6, #16]
    6e58:	f8c3 9000 	str.w	r9, [r3]
    6e5c:	2800      	cmp	r0, #0
    6e5e:	f000 810d 	beq.w	707c <previewSample(int, int)+0x364>
    6e62:	469a      	mov	sl, r3
    6e64:	6803      	ldr	r3, [r0, #0]
    6e66:	691b      	ldr	r3, [r3, #16]
    6e68:	4798      	blx	r3
    while (sampleFile.available()) {
    6e6a:	2800      	cmp	r0, #0
    6e6c:	f000 8083 	beq.w	6f76 <previewSample(int, int)+0x25e>
		if (!f) return -1;
    6e70:	6930      	ldr	r0, [r6, #16]
    6e72:	2800      	cmp	r0, #0
    6e74:	f000 80f8 	beq.w	7068 <previewSample(int, int)+0x350>
		if (f->read(&b, 1) < 1) return -1;
    6e78:	6803      	ldr	r3, [r0, #0]
    6e7a:	2201      	movs	r2, #1
    6e7c:	a904      	add	r1, sp, #16
    6e7e:	689b      	ldr	r3, [r3, #8]
    6e80:	4798      	blx	r3
    6e82:	2800      	cmp	r0, #0
    6e84:	f000 80dd 	beq.w	7042 <previewSample(int, int)+0x32a>
		return b;
    6e88:	f89d 3010 	ldrb.w	r3, [sp, #16]
		return (f) ? f->available() : 0;
    6e8c:	6930      	ldr	r0, [r6, #16]
      plen++;
    6e8e:	f109 0901 	add.w	r9, r9, #1
      sampled[0][plen] = b;
    6e92:	f80a 3b01 	strb.w	r3, [sl], #1
    6e96:	2800      	cmp	r0, #0
    6e98:	d1e4      	bne.n	6e64 <previewSample(int, int)+0x14c>
    _samplers[0].addSample(36, (int16_t*)sampled[0] + 2, (int)(plen / 2) - 120, 1);
    6e9a:	ea4f 0369 	mov.w	r3, r9, asr #1
    6e9e:	f1a3 0678 	sub.w	r6, r3, #120	; 0x78
    sampleIsLoaded = true;
    6ea2:	4b5a      	ldr	r3, [pc, #360]	; (700c <previewSample(int, int)+0x2f4>)
    6ea4:	2201      	movs	r2, #1
    SMP.smplen = plen;
    6ea6:	f8c8 903c 	str.w	r9, [r8, #60]	; 0x3c
    sampleIsLoaded = true;
    6eaa:	601a      	str	r2, [r3, #0]
    displaySample(SMP.smplen);
    6eac:	4648      	mov	r0, r9
    6eae:	f7fd fb8b 	bl	45c8 <displaySample(int)>
        audiosample *newSample = new audiosample(noteNumber, data, sampleLength, numChannels);
    6eb2:	2014      	movs	r0, #20
    6eb4:	f00f fc0c 	bl	166d0 <operator new(unsigned int)>
        _noteNumber(noteNumber), 
    6eb8:	2324      	movs	r3, #36	; 0x24
        _sampleLength(sampleLength), 
    6eba:	6086      	str	r6, [r0, #8]
        _noteNumber(noteNumber), 
    6ebc:	7003      	strb	r3, [r0, #0]
        _data(data), 
    6ebe:	4b54      	ldr	r3, [pc, #336]	; (7010 <previewSample(int, int)+0x2f8>)
    6ec0:	9004      	str	r0, [sp, #16]
    6ec2:	6043      	str	r3, [r0, #4]
        _numChannels(numChannels) {
    6ec4:	2301      	movs	r3, #1
    6ec6:	60c3      	str	r3, [r0, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    6ec8:	e9d5 134e 	ldrd	r1, r3, [r5, #312]	; 0x138
    6ecc:	4299      	cmp	r1, r3
    6ece:	f000 80ad 	beq.w	702c <previewSample(int, int)+0x314>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    6ed2:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    6ed6:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
    6eda:	2104      	movs	r1, #4
    6edc:	484d      	ldr	r0, [pc, #308]	; (7014 <previewSample(int, int)+0x2fc>)
    6ede:	f011 faf9 	bl	184d4 <usb_serial_write>
    6ee2:	4846      	ldr	r0, [pc, #280]	; (6ffc <previewSample(int, int)+0x2e4>)
    6ee4:	f00e fbc6 	bl	15674 <Print::println()>
    _samplers[0].noteEvent(12 * PrevSampleRate, 80, true, false);
    6ee8:	6824      	ldr	r4, [r4, #0]
    6eea:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6eee:	00a4      	lsls	r4, r4, #2
    6ef0:	b2e4      	uxtb	r4, r4
        if (activeNotes[noteNumber] == 255) {
    6ef2:	192b      	adds	r3, r5, r4
    6ef4:	f893 8020 	ldrb.w	r8, [r3, #32]
    6ef8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
    6efc:	d050      	beq.n	6fa0 <previewSample(int, int)+0x288>
            _noteEventFunction(indexOfVoice, noteNumber, velocity, true, isretrigger);
    6efe:	2301      	movs	r3, #1
    6f00:	f04f 0950 	mov.w	r9, #80	; 0x50
    6f04:	f88d 800c 	strb.w	r8, [sp, #12]
    6f08:	f88d 300f 	strb.w	r3, [sp, #15]
	if (_M_empty())
    6f0c:	69ab      	ldr	r3, [r5, #24]
    6f0e:	f88d 400d 	strb.w	r4, [sp, #13]
    6f12:	f88d 7010 	strb.w	r7, [sp, #16]
    6f16:	f88d 900e 	strb.w	r9, [sp, #14]
    6f1a:	2b00      	cmp	r3, #0
    6f1c:	f000 80ac 	beq.w	7078 <previewSample(int, int)+0x360>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
    6f20:	ab04      	add	r3, sp, #16
    6f22:	f10d 020d 	add.w	r2, sp, #13
    6f26:	a903      	add	r1, sp, #12
    6f28:	483b      	ldr	r0, [pc, #236]	; (7018 <previewSample(int, int)+0x300>)
    6f2a:	9301      	str	r3, [sp, #4]
    6f2c:	f10d 030f 	add.w	r3, sp, #15
    6f30:	9300      	str	r3, [sp, #0]
    6f32:	f10d 030e 	add.w	r3, sp, #14
    6f36:	69ee      	ldr	r6, [r5, #28]
            voice_noteOn[indexOfVoice] = millis();
    6f38:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    6f3c:	47b0      	blx	r6
    6f3e:	4837      	ldr	r0, [pc, #220]	; (701c <previewSample(int, int)+0x304>)
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    6f40:	9701      	str	r7, [sp, #4]
    6f42:	4623      	mov	r3, r4
    6f44:	f8cd 9000 	str.w	r9, [sp]
    6f48:	4642      	mov	r2, r8
    6f4a:	6800      	ldr	r0, [r0, #0]
    6f4c:	4934      	ldr	r1, [pc, #208]	; (7020 <previewSample(int, int)+0x308>)
            voice_noteOn[indexOfVoice] = millis();
    6f4e:	f8c5 00f4 	str.w	r0, [r5, #244]	; 0xf4
            Serial.printf("Voice %i plays note %i (%i, %i)\n", indexOfVoice, noteNumber, velocity, isretrigger);
    6f52:	482a      	ldr	r0, [pc, #168]	; (6ffc <previewSample(int, int)+0x2e4>)
    6f54:	f00e fbaa 	bl	156ac <Print::printf(char const*, ...)>
}
    6f58:	b016      	add	sp, #88	; 0x58
    6f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (g == 34) PrevSampleRate = 2;
    6f5e:	2b22      	cmp	r3, #34	; 0x22
    6f60:	d101      	bne.n	6f66 <previewSample(int, int)+0x24e>
    6f62:	2302      	movs	r3, #2
    6f64:	e75f      	b.n	6e26 <previewSample(int, int)+0x10e>
      if (g == 17) PrevSampleRate = 1;
    6f66:	2b11      	cmp	r3, #17
    6f68:	f47f af59 	bne.w	6e1e <previewSample(int, int)+0x106>
    6f6c:	2201      	movs	r2, #1
    6f6e:	4c25      	ldr	r4, [pc, #148]	; (7004 <previewSample(int, int)+0x2ec>)
    6f70:	4613      	mov	r3, r2
    6f72:	6022      	str	r2, [r4, #0]
      if (g == 0) PrevSampleRate = 4;
    6f74:	e759      	b.n	6e2a <previewSample(int, int)+0x112>
    _samplers[0].addSample(36, (int16_t*)sampled[0] + 2, (int)(plen / 2) - 120, 1);
    6f76:	ea4f 0369 	mov.w	r3, r9, asr #1
		if (!f) return -1;
    6f7a:	6930      	ldr	r0, [r6, #16]
    sampleIsLoaded = true;
    6f7c:	2201      	movs	r2, #1
    SMP.smplen = plen;
    6f7e:	f8c8 903c 	str.w	r9, [r8, #60]	; 0x3c
    _samplers[0].addSample(36, (int16_t*)sampled[0] + 2, (int)(plen / 2) - 120, 1);
    6f82:	f1a3 0678 	sub.w	r6, r3, #120	; 0x78
    sampleIsLoaded = true;
    6f86:	4b21      	ldr	r3, [pc, #132]	; (700c <previewSample(int, int)+0x2f4>)
    6f88:	601a      	str	r2, [r3, #0]
		if (f) {
    6f8a:	2800      	cmp	r0, #0
    6f8c:	d08e      	beq.n	6eac <previewSample(int, int)+0x194>
			f->close();
    6f8e:	6803      	ldr	r3, [r0, #0]
    6f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6f92:	4798      	blx	r3
			dec_refcount();
    6f94:	4818      	ldr	r0, [pc, #96]	; (6ff8 <previewSample(int, int)+0x2e0>)
    6f96:	f7fb ffd3 	bl	2f40 <File::dec_refcount()>
    displaySample(SMP.smplen);
    6f9a:	f8d8 903c 	ldr.w	r9, [r8, #60]	; 0x3c
    6f9e:	e785      	b.n	6eac <previewSample(int, int)+0x194>
        for (int i=0; i < _numVoices; i++) {
    6fa0:	f895 00b0 	ldrb.w	r0, [r5, #176]	; 0xb0
    6fa4:	2800      	cmp	r0, #0
    6fa6:	d046      	beq.n	7036 <previewSample(int, int)+0x31e>
    6fa8:	491e      	ldr	r1, [pc, #120]	; (7024 <previewSample(int, int)+0x30c>)
        unsigned long leastRecentNoteOffEvent = UINT32_MAX;
    6faa:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
        for (int i=0; i < _numVoices; i++) {
    6fae:	2200      	movs	r2, #0
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    6fb0:	f101 0715 	add.w	r7, r1, #21
    6fb4:	e004      	b.n	6fc0 <previewSample(int, int)+0x2a8>
        for (int i=0; i < _numVoices; i++) {
    6fb6:	1c53      	adds	r3, r2, #1
    6fb8:	4298      	cmp	r0, r3
    6fba:	f43f af1a 	beq.w	6df2 <previewSample(int, int)+0xda>
    6fbe:	461a      	mov	r2, r3
            if (activeVoices[i] == 255) {
    6fc0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    6fc4:	2bff      	cmp	r3, #255	; 0xff
    6fc6:	d1f6      	bne.n	6fb6 <previewSample(int, int)+0x29e>
                if (voice_noteOff[i] < leastRecentNoteOffEvent) {
    6fc8:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
    6fcc:	429e      	cmp	r6, r3
    6fce:	d9f2      	bls.n	6fb6 <previewSample(int, int)+0x29e>
                    indexOfVoiceWithLeastRecentNoteOff = i;
    6fd0:	461e      	mov	r6, r3
    6fd2:	fa5f f882 	uxtb.w	r8, r2
    6fd6:	e7ee      	b.n	6fb6 <previewSample(int, int)+0x29e>
    6fd8:	4c0a      	ldr	r4, [pc, #40]	; (7004 <previewSample(int, int)+0x2ec>)
    memset(sampled[0], 0, sizeof(sample_len[0]));
    6fda:	2300      	movs	r3, #0
    6fdc:	4a0a      	ldr	r2, [pc, #40]	; (7008 <previewSample(int, int)+0x2f0>)
    6fde:	f06f 0677 	mvn.w	r6, #119	; 0x77
    plen = 0;
    6fe2:	4699      	mov	r9, r3
    memset(sampled[0], 0, sizeof(sample_len[0]));
    6fe4:	6013      	str	r3, [r2, #0]
		return (f) ? f->available() : 0;
    6fe6:	e75c      	b.n	6ea2 <previewSample(int, int)+0x18a>
    6fe8:	4c06      	ldr	r4, [pc, #24]	; (7004 <previewSample(int, int)+0x2ec>)
    6fea:	e700      	b.n	6dee <previewSample(int, int)+0xd6>
    6fec:	2000561c 	.word	0x2000561c
    6ff0:	2000686c 	.word	0x2000686c
    6ff4:	200009a4 	.word	0x200009a4
    6ff8:	20003bbc 	.word	0x20003bbc
    6ffc:	20003314 	.word	0x20003314
    7000:	200045f8 	.word	0x200045f8
    7004:	20003290 	.word	0x20003290
    7008:	70000000 	.word	0x70000000
    700c:	2000ba08 	.word	0x2000ba08
    7010:	70000004 	.word	0x70000004
    7014:	200009b8 	.word	0x200009b8
    7018:	2000562c 	.word	0x2000562c
    701c:	2000bc24 	.word	0x2000bc24
    7020:	20000b0c 	.word	0x20000b0c
    7024:	200056bb 	.word	0x200056bb
    7028:	20003294 	.word	0x20003294
	  _M_realloc_insert(end(), __x);
    702c:	aa04      	add	r2, sp, #16
    702e:	4815      	ldr	r0, [pc, #84]	; (7084 <previewSample(int, int)+0x36c>)
    7030:	f7ff fe08 	bl	6c44 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)>
    7034:	e751      	b.n	6eda <previewSample(int, int)+0x1c2>
                Serial.printf("Note dropped: %i \n", noteNumber);
    7036:	4622      	mov	r2, r4
    7038:	4913      	ldr	r1, [pc, #76]	; (7088 <previewSample(int, int)+0x370>)
    703a:	4814      	ldr	r0, [pc, #80]	; (708c <previewSample(int, int)+0x374>)
    703c:	f00e fb36 	bl	156ac <Print::printf(char const*, ...)>
        if (indexOfVoice != 255) {            
    7040:	e6ea      	b.n	6e18 <previewSample(int, int)+0x100>
    7042:	6930      	ldr	r0, [r6, #16]
    7044:	23ff      	movs	r3, #255	; 0xff
    7046:	e722      	b.n	6e8e <previewSample(int, int)+0x176>
    7048:	4f11      	ldr	r7, [pc, #68]	; (7090 <previewSample(int, int)+0x378>)
        if (indexOfVoiceWithLeastRecentNoteOff == 0xff) {
    704a:	2300      	movs	r3, #0
    704c:	e000      	b.n	7050 <previewSample(int, int)+0x338>
    704e:	460b      	mov	r3, r1
                if (voice_noteOn[i] < leastRecentNoteOffEvent) {
    7050:	f857 1f04 	ldr.w	r1, [r7, #4]!
    7054:	428e      	cmp	r6, r1
    7056:	d902      	bls.n	705e <previewSample(int, int)+0x346>
                    indexOfVoiceWithLeastRecentNoteOff = i;
    7058:	460e      	mov	r6, r1
    705a:	fa5f f883 	uxtb.w	r8, r3
            for (int i=0; i < _numVoices; i++) {
    705e:	4293      	cmp	r3, r2
    7060:	f103 0101 	add.w	r1, r3, #1
    7064:	d1f3      	bne.n	704e <previewSample(int, int)+0x336>
    7066:	e6c8      	b.n	6dfa <previewSample(int, int)+0xe2>
      sampled[0][plen] = b;
    7068:	23ff      	movs	r3, #255	; 0xff
      plen++;
    706a:	f109 0901 	add.w	r9, r9, #1
      sampled[0][plen] = b;
    706e:	f88a 3000 	strb.w	r3, [sl]
    7072:	e712      	b.n	6e9a <previewSample(int, int)+0x182>
        bool isretrigger = false;
    7074:	2700      	movs	r7, #0
    7076:	e742      	b.n	6efe <previewSample(int, int)+0x1e6>
	  __throw_bad_function_call();
    7078:	f011 fdd0 	bl	18c1c <std::__throw_bad_function_call()>
    plen = 0;
    707c:	4681      	mov	r9, r0
    707e:	f06f 0677 	mvn.w	r6, #119	; 0x77
    7082:	e70e      	b.n	6ea2 <previewSample(int, int)+0x18a>
    7084:	20005750 	.word	0x20005750
    7088:	20000af8 	.word	0x20000af8
    708c:	20003314 	.word	0x20003314
    7090:	2000570c 	.word	0x2000570c

00007094 <showWave()>:
void showWave() {
    7094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (((SMP.folder - 1) * 100) + SMP.wav < 100) showIcons("sample", col[SMP.y - 1]);
    7098:	4d4d      	ldr	r5, [pc, #308]	; (71d0 <showWave()+0x13c>)
void showWave() {
    709a:	b09f      	sub	sp, #124	; 0x7c
  drawNoSD();
    709c:	f7fc fe8a 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    70a0:	2100      	movs	r1, #0
    70a2:	484c      	ldr	r0, [pc, #304]	; (71d4 <showWave()+0x140>)
  if (((SMP.folder - 1) * 100) + SMP.wav < 100) showIcons("sample", col[SMP.y - 1]);
    70a4:	ac10      	add	r4, sp, #64	; 0x40
  FastLED.clear();
    70a6:	f003 ff71 	bl	af8c <CFastLED::clear(bool)>
  if (((SMP.folder - 1) * 100) + SMP.wav < 100) showIcons("sample", col[SMP.y - 1]);
    70aa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    70ac:	2164      	movs	r1, #100	; 0x64
    70ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    70b0:	3a01      	subs	r2, #1
    70b2:	fb01 3302 	mla	r3, r1, r2, r3
    70b6:	2b63      	cmp	r3, #99	; 0x63
    70b8:	f340 8238 	ble.w	752c <showWave()+0x498>
    70bc:	4f46      	ldr	r7, [pc, #280]	; (71d8 <showWave()+0x144>)
  showIcons("helper_select", col[SMP.y - 1]);
    70be:	4947      	ldr	r1, [pc, #284]	; (71dc <showWave()+0x148>)
    70c0:	4620      	mov	r0, r4
    70c2:	f00e fc51 	bl	15968 <String::String(char const*)>
    70c6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    70c8:	4620      	mov	r0, r4
    70ca:	2600      	movs	r6, #0
    70cc:	3b01      	subs	r3, #1
  showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    70ce:	f8df 8128 	ldr.w	r8, [pc, #296]	; 71f8 <showWave()+0x164>
  showIcons("helper_select", col[SMP.y - 1]);
    70d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    70d6:	18fa      	adds	r2, r7, r3
    70d8:	5cfb      	ldrb	r3, [r7, r3]
    70da:	7851      	ldrb	r1, [r2, #1]
    70dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    70e0:	7891      	ldrb	r1, [r2, #2]
    70e2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    70e6:	f7fe fd11 	bl	5b0c <showIcons(String, CRGB)>
    70ea:	4620      	mov	r0, r4
    70ec:	f00e fc00 	bl	158f0 <String::~String()>
  showIcons("helper_load", CRGB(0, 20, 0));
    70f0:	493b      	ldr	r1, [pc, #236]	; (71e0 <showWave()+0x14c>)
    70f2:	4620      	mov	r0, r4
    70f4:	f00e fc38 	bl	15968 <String::String(char const*)>
    70f8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    70fc:	f88d 600e 	strb.w	r6, [sp, #14]
    7100:	4620      	mov	r0, r4
    7102:	f8ad 300c 	strh.w	r3, [sp, #12]
    7106:	9903      	ldr	r1, [sp, #12]
    7108:	f7fe fd00 	bl	5b0c <showIcons(String, CRGB)>
    710c:	4620      	mov	r0, r4
    710e:	f00e fbef 	bl	158f0 <String::~String()>
  showIcons("helper_folder", CRGB(10, 10, 0));
    7112:	4934      	ldr	r1, [pc, #208]	; (71e4 <showWave()+0x150>)
    7114:	4620      	mov	r0, r4
    7116:	f00e fc27 	bl	15968 <String::String(char const*)>
    711a:	f640 230a 	movw	r3, #2570	; 0xa0a
    711e:	f88d 600e 	strb.w	r6, [sp, #14]
    7122:	4620      	mov	r0, r4
    7124:	f8ad 300c 	strh.w	r3, [sp, #12]
    7128:	9903      	ldr	r1, [sp, #12]
    712a:	f7fe fcef 	bl	5b0c <showIcons(String, CRGB)>
    712e:	4620      	mov	r0, r4
    7130:	f00e fbde 	bl	158f0 <String::~String()>
  showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    7134:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7136:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7138:	2064      	movs	r0, #100	; 0x64
    713a:	3b01      	subs	r3, #1
    713c:	4632      	mov	r2, r6
  if (currentMode->pos[1] != SMP.folder) {
    713e:	4e2a      	ldr	r6, [pc, #168]	; (71e8 <showWave()+0x154>)
  showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    7140:	fb00 1003 	mla	r0, r0, r3, r1
    7144:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7148:	eb08 0103 	add.w	r1, r8, r3
    714c:	f818 3003 	ldrb.w	r3, [r8, r3]
    7150:	f891 c001 	ldrb.w	ip, [r1, #1]
    7154:	7889      	ldrb	r1, [r1, #2]
    7156:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    715a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    715e:	f7fd ff7b 	bl	5058 <showNumber(int, CRGB, int)>
  displaySample(SMP.smplen);
    7162:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    7164:	f7fd fa30 	bl	45c8 <displaySample(int)>
  if (currentMode->pos[1] != SMP.folder) {
    7168:	6833      	ldr	r3, [r6, #0]
    716a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    716c:	6b59      	ldr	r1, [r3, #52]	; 0x34
    716e:	4291      	cmp	r1, r2
    7170:	d01e      	beq.n	71b0 <showWave()+0x11c>
    Serial.println();
    7172:	481e      	ldr	r0, [pc, #120]	; (71ec <showWave()+0x158>)
    7174:	f00e fa7e 	bl	15674 <Print::println()>
    SMP.folder = currentMode->pos[1];
    7178:	6833      	ldr	r3, [r6, #0]
	StringSumHelper(const char *p) : String(p) {}
    717a:	491d      	ldr	r1, [pc, #116]	; (71f0 <showWave()+0x15c>)
    717c:	4620      	mov	r0, r4
    717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    7180:	62ab      	str	r3, [r5, #40]	; 0x28
    7182:	f00e fbf1 	bl	15968 <String::String(char const*)>
    Serial.print("Folder: " + String(SMP.folder - 1));
    7186:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7188:	220a      	movs	r2, #10
    718a:	a803      	add	r0, sp, #12
    718c:	3901      	subs	r1, #1
    718e:	f00e fbff 	bl	15990 <String::String(int, unsigned char)>
    7192:	a903      	add	r1, sp, #12
    7194:	4620      	mov	r0, r4
    7196:	f00e fca1 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    719a:	4601      	mov	r1, r0
    719c:	4813      	ldr	r0, [pc, #76]	; (71ec <showWave()+0x158>)
    719e:	f00e fa37 	bl	15610 <Print::print(String const&)>
    71a2:	a803      	add	r0, sp, #12
    71a4:	f00e fba4 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    71a8:	4620      	mov	r0, r4
    71aa:	f00e fba1 	bl	158f0 <String::~String()>
  if ((currentMode->pos[0]) - 1 != SMP.seek && sampleIsLoaded) {
    71ae:	6833      	ldr	r3, [r6, #0]
    71b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
    71b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
    71b4:	3901      	subs	r1, #1
    71b6:	4291      	cmp	r1, r2
    71b8:	d002      	beq.n	71c0 <showWave()+0x12c>
    71ba:	4a0e      	ldr	r2, [pc, #56]	; (71f4 <showWave()+0x160>)
    71bc:	6812      	ldr	r2, [r2, #0]
    71be:	b9ea      	cbnz	r2, 71fc <showWave()+0x168>
  if (currentMode->pos[2] != SMP.wav) {
    71c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    71c2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    71c4:	4293      	cmp	r3, r2
    71c6:	f040 80c0 	bne.w	734a <showWave()+0x2b6>
}
    71ca:	b01f      	add	sp, #124	; 0x7c
    71cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    71d0:	20003294 	.word	0x20003294
    71d4:	200045e8 	.word	0x200045e8
    71d8:	20004fc4 	.word	0x20004fc4
    71dc:	20000c18 	.word	0x20000c18
    71e0:	20000bf0 	.word	0x20000bf0
    71e4:	20000bfc 	.word	0x20000bfc
    71e8:	200038c8 	.word	0x200038c8
    71ec:	20003314 	.word	0x20003314
    71f0:	20000b68 	.word	0x20000b68
    71f4:	2000ba08 	.word	0x2000ba08
    71f8:	20004f80 	.word	0x20004f80
    71fc:	f8df 9324 	ldr.w	r9, [pc, #804]	; 7524 <showWave()+0x490>
	size_t print(int n)				{ return print((long)n); }
    7200:	48bc      	ldr	r0, [pc, #752]	; (74f4 <showWave()+0x460>)
    SMP.seek = currentMode->pos[0] - 1;
    7202:	63a9      	str	r1, [r5, #56]	; 0x38
    7204:	f00e fa2a 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    7208:	48ba      	ldr	r0, [pc, #744]	; (74f4 <showWave()+0x460>)
    720a:	f00e fa33 	bl	15674 <Print::println()>
    720e:	e9d9 3b4d 	ldrd	r3, fp, [r9, #308]	; 0x134
        for (auto && sample : _audiosamples) {
    7212:	455b      	cmp	r3, fp
    7214:	d00e      	beq.n	7234 <showWave()+0x1a0>
    7216:	469a      	mov	sl, r3
            delete sample;
    7218:	f85a 0b04 	ldr.w	r0, [sl], #4
    721c:	2114      	movs	r1, #20
    721e:	b108      	cbz	r0, 7224 <showWave()+0x190>
    7220:	f00f fa5e 	bl	166e0 <operator delete(void*, unsigned int)>
        for (auto && sample : _audiosamples) {
    7224:	45d3      	cmp	fp, sl
    7226:	d1f7      	bne.n	7218 <showWave()+0x184>
	if (size_type __n = this->_M_impl._M_finish - __pos)
    7228:	e9d9 324d 	ldrd	r3, r2, [r9, #308]	; 0x134
    722c:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
    722e:	bf18      	it	ne
    7230:	f8c9 3138 	strne.w	r3, [r9, #312]	; 0x138
    envelope0.noteOff();
    7234:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 7518 <showWave()+0x484>
    7238:	48af      	ldr	r0, [pc, #700]	; (74f8 <showWave()+0x464>)
    723a:	f004 fd51 	bl	bce0 <AudioEffectEnvelope::noteOff()>
    if (sampleFile) {
    723e:	f8d9 0010 	ldr.w	r0, [r9, #16]
		return (f) ? f->isOpen() : false;
    7242:	b168      	cbz	r0, 7260 <showWave()+0x1cc>
    7244:	6803      	ldr	r3, [r0, #0]
    7246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7248:	4798      	blx	r3
    724a:	b148      	cbz	r0, 7260 <showWave()+0x1cc>
		return seek(pos, SeekSet);
    724c:	f8d9 0010 	ldr.w	r0, [r9, #16]
		return (f) ? f->seek(pos, mode) : false;
    7250:	b130      	cbz	r0, 7260 <showWave()+0x1cc>
    7252:	6803      	ldr	r3, [r0, #0]
    7254:	2200      	movs	r2, #0
    7256:	9200      	str	r2, [sp, #0]
    7258:	2200      	movs	r2, #0
    725a:	6a19      	ldr	r1, [r3, #32]
    725c:	2300      	movs	r3, #0
    725e:	4788      	blx	r1
    sprintf(OUTPUTf, "samples/%d/_%d.wav", SMP.folder - 1, ((SMP.folder - 1) * 100) + SMP.wav);
    7260:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    7262:	2164      	movs	r1, #100	; 0x64
    7264:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7266:	a803      	add	r0, sp, #12
    7268:	3a01      	subs	r2, #1
    726a:	fb01 3302 	mla	r3, r1, r2, r3
    726e:	49a3      	ldr	r1, [pc, #652]	; (74fc <showWave()+0x468>)
    7270:	f01a fc8a 	bl	21b88 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    7274:	4aa2      	ldr	r2, [pc, #648]	; (7500 <showWave()+0x46c>)
    7276:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    727a:	2b00      	cmp	r3, #0
    727c:	f000 81d6 	beq.w	762c <showWave()+0x598>
    7280:	4619      	mov	r1, r3
    7282:	2300      	movs	r3, #0
    7284:	aa03      	add	r2, sp, #12
    7286:	4620      	mov	r0, r4
    7288:	9310      	str	r3, [sp, #64]	; 0x40
    728a:	f008 fb75 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    if (SD.exists(OUTPUTf)) {
    728e:	2800      	cmp	r0, #0
    7290:	f000 81d7 	beq.w	7642 <showWave()+0x5ae>
      showIcons("helper_select", col[SMP.y - 1]);
    7294:	499b      	ldr	r1, [pc, #620]	; (7504 <showWave()+0x470>)
    7296:	4620      	mov	r0, r4
    7298:	f00e fb66 	bl	15968 <String::String(char const*)>
    729c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    729e:	4620      	mov	r0, r4
    72a0:	f04f 0900 	mov.w	r9, #0
    72a4:	3b01      	subs	r3, #1
    72a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    72aa:	18fa      	adds	r2, r7, r3
    72ac:	5cfb      	ldrb	r3, [r7, r3]
    72ae:	7851      	ldrb	r1, [r2, #1]
    72b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    72b4:	7891      	ldrb	r1, [r2, #2]
    72b6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    72ba:	f7fe fc27 	bl	5b0c <showIcons(String, CRGB)>
    72be:	4620      	mov	r0, r4
    72c0:	f00e fb16 	bl	158f0 <String::~String()>
      showIcons("helper_load", CRGB(0, 20, 0));
    72c4:	4990      	ldr	r1, [pc, #576]	; (7508 <showWave()+0x474>)
    72c6:	4620      	mov	r0, r4
    72c8:	f00e fb4e 	bl	15968 <String::String(char const*)>
    72cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    72d0:	f88d 900a 	strb.w	r9, [sp, #10]
    72d4:	4620      	mov	r0, r4
    72d6:	f8ad 3008 	strh.w	r3, [sp, #8]
    72da:	9902      	ldr	r1, [sp, #8]
    72dc:	f7fe fc16 	bl	5b0c <showIcons(String, CRGB)>
    72e0:	4620      	mov	r0, r4
    72e2:	f00e fb05 	bl	158f0 <String::~String()>
      showIcons("helper_folder", CRGB(10, 30, 0));
    72e6:	4989      	ldr	r1, [pc, #548]	; (750c <showWave()+0x478>)
    72e8:	4620      	mov	r0, r4
    72ea:	f00e fb3d 	bl	15968 <String::String(char const*)>
    72ee:	f641 630a 	movw	r3, #7690	; 0x1e0a
    72f2:	f88d 900a 	strb.w	r9, [sp, #10]
    72f6:	4620      	mov	r0, r4
    72f8:	f8ad 3008 	strh.w	r3, [sp, #8]
    72fc:	9902      	ldr	r1, [sp, #8]
    72fe:	f7fe fc05 	bl	5b0c <showIcons(String, CRGB)>
    7302:	4620      	mov	r0, r4
    7304:	f00e faf4 	bl	158f0 <String::~String()>
      showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    7308:	6aab      	ldr	r3, [r5, #40]	; 0x28
    730a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    730c:	2064      	movs	r0, #100	; 0x64
    730e:	3b01      	subs	r3, #1
    7310:	464a      	mov	r2, r9
    7312:	fb00 1003 	mla	r0, r0, r3, r1
    7316:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    731a:	eb08 0103 	add.w	r1, r8, r3
    731e:	f818 3003 	ldrb.w	r3, [r8, r3]
    7322:	f891 c001 	ldrb.w	ip, [r1, #1]
    7326:	7889      	ldrb	r1, [r1, #2]
    7328:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    732c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7330:	f7fd fe92 	bl	5058 <showNumber(int, CRGB, int)>
      previewSample(SMP.folder - 1, SMP.wav);
    7334:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    7336:	6a69      	ldr	r1, [r5, #36]	; 0x24
    7338:	3801      	subs	r0, #1
    733a:	f7ff fced 	bl	6d18 <previewSample(int, int)>
  if (currentMode->pos[2] != SMP.wav) {
    733e:	6833      	ldr	r3, [r6, #0]
    7340:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    7342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    7344:	4293      	cmp	r3, r2
    7346:	f43f af40 	beq.w	71ca <showWave()+0x136>
    sampleIsLoaded = false;
    734a:	f04f 0900 	mov.w	r9, #0
    734e:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 7528 <showWave()+0x494>
	StringSumHelper(const char *p) : String(p) {}
    7352:	496f      	ldr	r1, [pc, #444]	; (7510 <showWave()+0x47c>)
    7354:	4620      	mov	r0, r4
    SMP.wav = currentMode->pos[2];
    7356:	626b      	str	r3, [r5, #36]	; 0x24
    sampleIsLoaded = false;
    7358:	f8ca 9000 	str.w	r9, [sl]
    735c:	f00e fb04 	bl	15968 <String::String(char const*)>
    Serial.print("File: " + String(currentMode->pos[2]));
    7360:	6833      	ldr	r3, [r6, #0]
    7362:	220a      	movs	r2, #10
    7364:	a803      	add	r0, sp, #12
    7366:	6b99      	ldr	r1, [r3, #56]	; 0x38
    7368:	f00e fb12 	bl	15990 <String::String(int, unsigned char)>
    736c:	a903      	add	r1, sp, #12
    736e:	4620      	mov	r0, r4
    7370:	f00e fbb4 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    7374:	4601      	mov	r1, r0
    7376:	485f      	ldr	r0, [pc, #380]	; (74f4 <showWave()+0x460>)
    7378:	f00e f94a 	bl	15610 <Print::print(String const&)>
    737c:	a803      	add	r0, sp, #12
    737e:	f00e fab7 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    7382:	4620      	mov	r0, r4
    7384:	f00e fab4 	bl	158f0 <String::~String()>
    currentMode->pos[0] = 1;
    7388:	6832      	ldr	r2, [r6, #0]
    738a:	2301      	movs	r3, #1
    SMP.smplen = 0;
    738c:	f8c5 903c 	str.w	r9, [r5, #60]	; 0x3c
    currentMode->pos[0] = 1;
    7390:	6313      	str	r3, [r2, #48]	; 0x30
		noInterrupts();
    7392:	b672      	cpsid	i
		encoder.position = p;
    7394:	4a5f      	ldr	r2, [pc, #380]	; (7514 <showWave()+0x480>)
    7396:	6153      	str	r3, [r2, #20]
		interrupts();
    7398:	b662      	cpsie	i
    SMP.seek = 0;
    739a:	f8c5 9038 	str.w	r9, [r5, #56]	; 0x38
    739e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 7524 <showWave()+0x490>
    73a2:	e9d9 6b4d 	ldrd	r6, fp, [r9, #308]	; 0x134
    73a6:	455e      	cmp	r6, fp
    73a8:	d00d      	beq.n	73c6 <showWave()+0x332>
            delete sample;
    73aa:	f856 0b04 	ldr.w	r0, [r6], #4
    73ae:	2114      	movs	r1, #20
    73b0:	b108      	cbz	r0, 73b6 <showWave()+0x322>
    73b2:	f00f f995 	bl	166e0 <operator delete(void*, unsigned int)>
        for (auto && sample : _audiosamples) {
    73b6:	45b3      	cmp	fp, r6
    73b8:	d1f7      	bne.n	73aa <showWave()+0x316>
	if (size_type __n = this->_M_impl._M_finish - __pos)
    73ba:	e9d9 324d 	ldrd	r3, r2, [r9, #308]	; 0x134
    73be:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
    73c0:	bf18      	it	ne
    73c2:	f8c9 3138 	strne.w	r3, [r9, #312]	; 0x138
    envelope0.noteOff();
    73c6:	4e54      	ldr	r6, [pc, #336]	; (7518 <showWave()+0x484>)
    73c8:	484b      	ldr	r0, [pc, #300]	; (74f8 <showWave()+0x464>)
    73ca:	f004 fc89 	bl	bce0 <AudioEffectEnvelope::noteOff()>
    if (sampleFile) {
    73ce:	6930      	ldr	r0, [r6, #16]
		return (f) ? f->isOpen() : false;
    73d0:	b128      	cbz	r0, 73de <showWave()+0x34a>
    73d2:	6803      	ldr	r3, [r0, #0]
    73d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    73d6:	4798      	blx	r3
    73d8:	2800      	cmp	r0, #0
    73da:	f040 8112 	bne.w	7602 <showWave()+0x56e>
  FastLED.clear();
    73de:	2100      	movs	r1, #0
    73e0:	484e      	ldr	r0, [pc, #312]	; (751c <showWave()+0x488>)
    73e2:	f003 fdd3 	bl	af8c <CFastLED::clear(bool)>
    if (((SMP.folder - 1) * 100) + SMP.wav < 100) showIcons("sample", col[SMP.y - 1]);
    73e6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    73e8:	2664      	movs	r6, #100	; 0x64
    73ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    73ec:	3a01      	subs	r2, #1
    73ee:	fb06 3302 	mla	r3, r6, r2, r3
    73f2:	2b63      	cmp	r3, #99	; 0x63
    73f4:	f340 8174 	ble.w	76e0 <showWave()+0x64c>
    sprintf(OUTPUTf, "samples/%d/_%d.wav", SMP.folder - 1, ((SMP.folder - 1) * 100) + SMP.wav);
    73f8:	4940      	ldr	r1, [pc, #256]	; (74fc <showWave()+0x468>)
    73fa:	a803      	add	r0, sp, #12
    73fc:	f01a fbc4 	bl	21b88 <sprintf>
    7400:	2106      	movs	r1, #6
    7402:	4847      	ldr	r0, [pc, #284]	; (7520 <showWave()+0x48c>)
    7404:	f011 f866 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7408:	483a      	ldr	r0, [pc, #232]	; (74f4 <showWave()+0x460>)
    740a:	f00e f933 	bl	15674 <Print::println()>
							  return write((const uint8_t *)str, strlen(str)); }
    740e:	a803      	add	r0, sp, #12
    7410:	f01b fbf6 	bl	22c00 <strlen>
    7414:	4601      	mov	r1, r0
    7416:	a803      	add	r0, sp, #12
    7418:	f011 f85c 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    741c:	4835      	ldr	r0, [pc, #212]	; (74f4 <showWave()+0x460>)
    741e:	f00e f929 	bl	15674 <Print::println()>
    7422:	4a37      	ldr	r2, [pc, #220]	; (7500 <showWave()+0x46c>)
    7424:	f8d2 3484 	ldr.w	r3, [r2, #1156]	; 0x484
    7428:	2b00      	cmp	r3, #0
    742a:	f000 8097 	beq.w	755c <showWave()+0x4c8>
    742e:	4619      	mov	r1, r3
    7430:	2300      	movs	r3, #0
    7432:	aa03      	add	r2, sp, #12
    7434:	4620      	mov	r0, r4
    7436:	9310      	str	r3, [sp, #64]	; 0x40
    7438:	f008 fa9e 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    if (SD.exists(OUTPUTf)) {
    743c:	2800      	cmp	r0, #0
    743e:	f000 8091 	beq.w	7564 <showWave()+0x4d0>
      showIcons("helper_select", col[SMP.y - 1]);
    7442:	4930      	ldr	r1, [pc, #192]	; (7504 <showWave()+0x470>)
    7444:	4620      	mov	r0, r4
    7446:	f00e fa8f 	bl	15968 <String::String(char const*)>
    744a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    744c:	4620      	mov	r0, r4
    744e:	2600      	movs	r6, #0
    7450:	3b01      	subs	r3, #1
    7452:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7456:	18fa      	adds	r2, r7, r3
    7458:	5cfb      	ldrb	r3, [r7, r3]
    745a:	7851      	ldrb	r1, [r2, #1]
    745c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    7460:	7891      	ldrb	r1, [r2, #2]
    7462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7466:	f7fe fb51 	bl	5b0c <showIcons(String, CRGB)>
    746a:	4620      	mov	r0, r4
    746c:	f00e fa40 	bl	158f0 <String::~String()>
      showIcons("helper_load", CRGB(0, 20, 0));
    7470:	4925      	ldr	r1, [pc, #148]	; (7508 <showWave()+0x474>)
    7472:	4620      	mov	r0, r4
    7474:	f00e fa78 	bl	15968 <String::String(char const*)>
    7478:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    747c:	f88d 600a 	strb.w	r6, [sp, #10]
    7480:	4620      	mov	r0, r4
    7482:	f8ad 3008 	strh.w	r3, [sp, #8]
    7486:	9902      	ldr	r1, [sp, #8]
    7488:	f7fe fb40 	bl	5b0c <showIcons(String, CRGB)>
    748c:	4620      	mov	r0, r4
    748e:	f00e fa2f 	bl	158f0 <String::~String()>
      showIcons("helper_folder", CRGB(10, 30, 0));
    7492:	491e      	ldr	r1, [pc, #120]	; (750c <showWave()+0x478>)
    7494:	4620      	mov	r0, r4
    7496:	f00e fa67 	bl	15968 <String::String(char const*)>
    749a:	f641 630a 	movw	r3, #7690	; 0x1e0a
    749e:	f88d 600a 	strb.w	r6, [sp, #10]
    74a2:	4620      	mov	r0, r4
    74a4:	f8ad 3008 	strh.w	r3, [sp, #8]
    74a8:	9902      	ldr	r1, [sp, #8]
    74aa:	f7fe fb2f 	bl	5b0c <showIcons(String, CRGB)>
    74ae:	4620      	mov	r0, r4
    74b0:	f00e fa1e 	bl	158f0 <String::~String()>
      showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    74b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    74b6:	6a69      	ldr	r1, [r5, #36]	; 0x24
    74b8:	2064      	movs	r0, #100	; 0x64
    74ba:	3b01      	subs	r3, #1
    74bc:	4632      	mov	r2, r6
    74be:	fb00 1003 	mla	r0, r0, r3, r1
    74c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    74c6:	eb08 0103 	add.w	r1, r8, r3
    74ca:	f818 3003 	ldrb.w	r3, [r8, r3]
    74ce:	784c      	ldrb	r4, [r1, #1]
    74d0:	7889      	ldrb	r1, [r1, #2]
    74d2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    74d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    74da:	f7fd fdbd 	bl	5058 <showNumber(int, CRGB, int)>
      previewSample(SMP.folder - 1, SMP.wav);
    74de:	e9d5 1009 	ldrd	r1, r0, [r5, #36]	; 0x24
    74e2:	3801      	subs	r0, #1
    74e4:	f7ff fc18 	bl	6d18 <previewSample(int, int)>
      sampleIsLoaded = true;
    74e8:	2301      	movs	r3, #1
    74ea:	f8ca 3000 	str.w	r3, [sl]
}
    74ee:	b01f      	add	sp, #124	; 0x7c
    74f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74f4:	20003314 	.word	0x20003314
    74f8:	2000686c 	.word	0x2000686c
    74fc:	200009a4 	.word	0x200009a4
    7500:	200045f8 	.word	0x200045f8
    7504:	20000c18 	.word	0x20000c18
    7508:	20000bf0 	.word	0x20000bf0
    750c:	20000bfc 	.word	0x20000bfc
    7510:	20000b60 	.word	0x20000b60
    7514:	200067ec 	.word	0x200067ec
    7518:	20003bbc 	.word	0x20003bbc
    751c:	200045e8 	.word	0x200045e8
    7520:	20000920 	.word	0x20000920
    7524:	2000561c 	.word	0x2000561c
    7528:	2000ba08 	.word	0x2000ba08
  if (((SMP.folder - 1) * 100) + SMP.wav < 100) showIcons("sample", col[SMP.y - 1]);
    752c:	497a      	ldr	r1, [pc, #488]	; (7718 <showWave()+0x684>)
    752e:	4620      	mov	r0, r4
    7530:	f00e fa1a 	bl	15968 <String::String(char const*)>
    7534:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    7536:	4f79      	ldr	r7, [pc, #484]	; (771c <showWave()+0x688>)
    7538:	4620      	mov	r0, r4
    753a:	3b01      	subs	r3, #1
    753c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7540:	18fa      	adds	r2, r7, r3
    7542:	5cfb      	ldrb	r3, [r7, r3]
    7544:	7851      	ldrb	r1, [r2, #1]
    7546:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    754a:	7891      	ldrb	r1, [r2, #2]
    754c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7550:	f7fe fadc 	bl	5b0c <showIcons(String, CRGB)>
    7554:	4620      	mov	r0, r4
    7556:	f00e f9cb 	bl	158f0 <String::~String()>
    755a:	e5b0      	b.n	70be <showWave()+0x2a>
    755c:	f8d2 1488 	ldr.w	r1, [r2, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    7560:	2900      	cmp	r1, #0
    7562:	d15a      	bne.n	761a <showWave()+0x586>
      showIcons("helper_select", col[SMP.y - 1]);
    7564:	496e      	ldr	r1, [pc, #440]	; (7720 <showWave()+0x68c>)
    7566:	4620      	mov	r0, r4
    7568:	f00e f9fe 	bl	15968 <String::String(char const*)>
    756c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    756e:	4620      	mov	r0, r4
    7570:	2600      	movs	r6, #0
    7572:	3b01      	subs	r3, #1
    7574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7578:	18fa      	adds	r2, r7, r3
    757a:	5cfb      	ldrb	r3, [r7, r3]
    757c:	7851      	ldrb	r1, [r2, #1]
    757e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    7582:	7891      	ldrb	r1, [r2, #2]
    7584:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7588:	f7fe fac0 	bl	5b0c <showIcons(String, CRGB)>
    758c:	4620      	mov	r0, r4
    758e:	f00e f9af 	bl	158f0 <String::~String()>
      showIcons("helper_load", CRGB(0, 0, 0));
    7592:	4964      	ldr	r1, [pc, #400]	; (7724 <showWave()+0x690>)
    7594:	4620      	mov	r0, r4
    7596:	f00e f9e7 	bl	15968 <String::String(char const*)>
    759a:	f8ad 6008 	strh.w	r6, [sp, #8]
    759e:	f88d 600a 	strb.w	r6, [sp, #10]
    75a2:	4620      	mov	r0, r4
    75a4:	9902      	ldr	r1, [sp, #8]
    75a6:	f7fe fab1 	bl	5b0c <showIcons(String, CRGB)>
    75aa:	4620      	mov	r0, r4
    75ac:	f00e f9a0 	bl	158f0 <String::~String()>
      showIcons("helper_folder", CRGB(10, 10, 0));
    75b0:	495d      	ldr	r1, [pc, #372]	; (7728 <showWave()+0x694>)
    75b2:	4620      	mov	r0, r4
    75b4:	f00e f9d8 	bl	15968 <String::String(char const*)>
    75b8:	f640 230a 	movw	r3, #2570	; 0xa0a
    75bc:	f88d 600a 	strb.w	r6, [sp, #10]
    75c0:	4620      	mov	r0, r4
    75c2:	f8ad 3008 	strh.w	r3, [sp, #8]
    75c6:	9902      	ldr	r1, [sp, #8]
    75c8:	f7fe faa0 	bl	5b0c <showIcons(String, CRGB)>
    75cc:	4620      	mov	r0, r4
    75ce:	f00e f98f 	bl	158f0 <String::~String()>
      showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    75d2:	2064      	movs	r0, #100	; 0x64
    75d4:	4632      	mov	r2, r6
    75d6:	e9d5 1309 	ldrd	r1, r3, [r5, #36]	; 0x24
    75da:	3b01      	subs	r3, #1
    75dc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    75e0:	fb00 1003 	mla	r0, r0, r3, r1
    75e4:	eb08 0104 	add.w	r1, r8, r4
    75e8:	f818 3004 	ldrb.w	r3, [r8, r4]
    75ec:	784c      	ldrb	r4, [r1, #1]
    75ee:	7889      	ldrb	r1, [r1, #2]
    75f0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    75f4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    75f8:	f7fd fd2e 	bl	5058 <showNumber(int, CRGB, int)>
}
    75fc:	b01f      	add	sp, #124	; 0x7c
    75fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return seek(pos, SeekSet);
    7602:	6930      	ldr	r0, [r6, #16]
		return (f) ? f->seek(pos, mode) : false;
    7604:	2800      	cmp	r0, #0
    7606:	f43f aeea 	beq.w	73de <showWave()+0x34a>
    760a:	6803      	ldr	r3, [r0, #0]
    760c:	2200      	movs	r2, #0
    760e:	9200      	str	r2, [sp, #0]
    7610:	2200      	movs	r2, #0
    7612:	6a19      	ldr	r1, [r3, #32]
    7614:	2300      	movs	r3, #0
    7616:	4788      	blx	r1
    7618:	e6e1      	b.n	73de <showWave()+0x34a>
    761a:	aa03      	add	r2, sp, #12
    761c:	4620      	mov	r0, r4
    761e:	931c      	str	r3, [sp, #112]	; 0x70
    7620:	f006 fac8 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    7624:	2800      	cmp	r0, #0
    7626:	f47f af0c 	bne.w	7442 <showWave()+0x3ae>
    762a:	e79b      	b.n	7564 <showWave()+0x4d0>
    762c:	f8d2 1488 	ldr.w	r1, [r2, #1160]	; 0x488
    7630:	b139      	cbz	r1, 7642 <showWave()+0x5ae>
    7632:	aa03      	add	r2, sp, #12
    7634:	4620      	mov	r0, r4
    7636:	931c      	str	r3, [sp, #112]	; 0x70
    7638:	f006 fabc 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    763c:	2800      	cmp	r0, #0
    763e:	f47f ae29 	bne.w	7294 <showWave()+0x200>
      showIcons("helper_select", col[SMP.y - 1]);
    7642:	4937      	ldr	r1, [pc, #220]	; (7720 <showWave()+0x68c>)
    7644:	4620      	mov	r0, r4
    7646:	f00e f98f 	bl	15968 <String::String(char const*)>
    764a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    764c:	4620      	mov	r0, r4
    764e:	f04f 0900 	mov.w	r9, #0
    7652:	3b01      	subs	r3, #1
    7654:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    7658:	18fa      	adds	r2, r7, r3
    765a:	5cfb      	ldrb	r3, [r7, r3]
    765c:	7851      	ldrb	r1, [r2, #1]
    765e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    7662:	7891      	ldrb	r1, [r2, #2]
    7664:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7668:	f7fe fa50 	bl	5b0c <showIcons(String, CRGB)>
    766c:	4620      	mov	r0, r4
    766e:	f00e f93f 	bl	158f0 <String::~String()>
      showIcons("helper_load", CRGB(0, 0, 0));
    7672:	492c      	ldr	r1, [pc, #176]	; (7724 <showWave()+0x690>)
    7674:	4620      	mov	r0, r4
    7676:	f00e f977 	bl	15968 <String::String(char const*)>
    767a:	f8ad 9008 	strh.w	r9, [sp, #8]
    767e:	f88d 900a 	strb.w	r9, [sp, #10]
    7682:	4620      	mov	r0, r4
    7684:	9902      	ldr	r1, [sp, #8]
    7686:	f7fe fa41 	bl	5b0c <showIcons(String, CRGB)>
    768a:	4620      	mov	r0, r4
    768c:	f00e f930 	bl	158f0 <String::~String()>
      showIcons("helper_folder", CRGB(10, 10, 0));
    7690:	4925      	ldr	r1, [pc, #148]	; (7728 <showWave()+0x694>)
    7692:	4620      	mov	r0, r4
    7694:	f00e f968 	bl	15968 <String::String(char const*)>
    7698:	f640 230a 	movw	r3, #2570	; 0xa0a
    769c:	f88d 900a 	strb.w	r9, [sp, #10]
    76a0:	4620      	mov	r0, r4
    76a2:	f8ad 3008 	strh.w	r3, [sp, #8]
    76a6:	9902      	ldr	r1, [sp, #8]
    76a8:	f7fe fa30 	bl	5b0c <showIcons(String, CRGB)>
    76ac:	4620      	mov	r0, r4
    76ae:	f00e f91f 	bl	158f0 <String::~String()>
      showNumber(((SMP.folder - 1) * 100) + SMP.wav, col_Folder[SMP.folder - 1], 0);
    76b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    76b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
    76b6:	2064      	movs	r0, #100	; 0x64
    76b8:	3b01      	subs	r3, #1
    76ba:	464a      	mov	r2, r9
    76bc:	fb00 1003 	mla	r0, r0, r3, r1
    76c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    76c4:	eb08 0103 	add.w	r1, r8, r3
    76c8:	f818 3003 	ldrb.w	r3, [r8, r3]
    76cc:	f891 c001 	ldrb.w	ip, [r1, #1]
    76d0:	7889      	ldrb	r1, [r1, #2]
    76d2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    76d6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    76da:	f7fd fcbd 	bl	5058 <showNumber(int, CRGB, int)>
    76de:	e62e      	b.n	733e <showWave()+0x2aa>
    if (((SMP.folder - 1) * 100) + SMP.wav < 100) showIcons("sample", col[SMP.y - 1]);
    76e0:	490d      	ldr	r1, [pc, #52]	; (7718 <showWave()+0x684>)
    76e2:	4620      	mov	r0, r4
    76e4:	f00e f940 	bl	15968 <String::String(char const*)>
    76e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    76ea:	4620      	mov	r0, r4
    76ec:	3b01      	subs	r3, #1
    76ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    76f2:	18fa      	adds	r2, r7, r3
    76f4:	5cfb      	ldrb	r3, [r7, r3]
    76f6:	7851      	ldrb	r1, [r2, #1]
    76f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    76fc:	7891      	ldrb	r1, [r2, #2]
    76fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
    7702:	f7fe fa03 	bl	5b0c <showIcons(String, CRGB)>
    7706:	4620      	mov	r0, r4
    7708:	f00e f8f2 	bl	158f0 <String::~String()>
    sprintf(OUTPUTf, "samples/%d/_%d.wav", SMP.folder - 1, ((SMP.folder - 1) * 100) + SMP.wav);
    770c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    770e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    7710:	3a01      	subs	r2, #1
    7712:	fb06 3302 	mla	r3, r6, r2, r3
    7716:	e66f      	b.n	73f8 <showWave()+0x364>
    7718:	20000bdc 	.word	0x20000bdc
    771c:	20004fc4 	.word	0x20004fc4
    7720:	20000c18 	.word	0x20000c18
    7724:	20000bf0 	.word	0x20000bf0
    7728:	20000bfc 	.word	0x20000bfc

0000772c <loadSample(int, int)>:
void loadSample(int packID, int sampleID) {
    772c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7730:	4681      	mov	r9, r0
    7732:	b097      	sub	sp, #92	; 0x5c
    7734:	4688      	mov	r8, r1
    7736:	48a9      	ldr	r0, [pc, #676]	; (79dc <loadSample(int, int)+0x2b0>)
    7738:	2107      	movs	r1, #7
  for (int f = 1; f < (maxX / 2) + 1; f++) {
    773a:	2401      	movs	r4, #1
    773c:	f010 feca 	bl	184d4 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    7740:	4649      	mov	r1, r9
    7742:	48a7      	ldr	r0, [pc, #668]	; (79e0 <loadSample(int, int)+0x2b4>)
    7744:	f241 4714 	movw	r7, #5140	; 0x1414
    7748:	f00d ff88 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    774c:	48a4      	ldr	r0, [pc, #656]	; (79e0 <loadSample(int, int)+0x2b4>)
    774e:	f00d ff91 	bl	15674 <Print::println()>
    7752:	2500      	movs	r5, #0
  drawNoSD();
    7754:	f7fc fb2e 	bl	3db4 <drawNoSD()>
  if (sampleID > maxY) yposLoader = 2;
    7758:	f1b8 0f10 	cmp.w	r8, #16
  int yposLoader = sampleID + 1;
    775c:	bfd4      	ite	le
    775e:	f108 0601 	addle.w	r6, r8, #1
  if (sampleID > maxY) yposLoader = 2;
    7762:	2602      	movgt	r6, #2
    light(f, yposLoader, CRGB(20, 20, 0));
    7764:	4620      	mov	r0, r4
    7766:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
    776a:	f88d 5026 	strb.w	r5, [sp, #38]	; 0x26
  for (int f = 1; f < (maxX / 2) + 1; f++) {
    776e:	3401      	adds	r4, #1
    light(f, yposLoader, CRGB(20, 20, 0));
    7770:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7772:	4631      	mov	r1, r6
    7774:	f7fc fbee 	bl	3f54 <light(int, int, CRGB)>
  for (int f = 1; f < (maxX / 2) + 1; f++) {
    7778:	2c09      	cmp	r4, #9
    777a:	d1f3      	bne.n	7764 <loadSample(int, int)+0x38>
    777c:	4f99      	ldr	r7, [pc, #612]	; (79e4 <loadSample(int, int)+0x2b8>)
    777e:	7839      	ldrb	r1, [r7, #0]
    7780:	4638      	mov	r0, r7
    7782:	f003 fad9 	bl	ad38 <CFastLED::show(unsigned char)>
  sprintf(OUTPUTf, "%d/%d.wav", packID, sampleID);
    7786:	4643      	mov	r3, r8
    7788:	464a      	mov	r2, r9
    778a:	4997      	ldr	r1, [pc, #604]	; (79e8 <loadSample(int, int)+0x2bc>)
    778c:	a809      	add	r0, sp, #36	; 0x24
    778e:	f01a f9fb 	bl	21b88 <sprintf>
  if (packID == 0) {
    7792:	f1b9 0f00 	cmp.w	r9, #0
    7796:	f000 80ef 	beq.w	7978 <loadSample(int, int)+0x24c>
  usedFiles[sampleID - 1] = OUTPUTf;
    779a:	4b94      	ldr	r3, [pc, #592]	; (79ec <loadSample(int, int)+0x2c0>)
    779c:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    77a0:	a909      	add	r1, sp, #36	; 0x24
		if (f) { dec_refcount(); /*Serial.println("File move assignment autoclose");*/ }
    77a2:	4d93      	ldr	r5, [pc, #588]	; (79f0 <loadSample(int, int)+0x2c4>)
    77a4:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    77a8:	f00e f946 	bl	15a38 <String::operator=(char const*)>
  sampleFile = SD.open(OUTPUTf);
    77ac:	2300      	movs	r3, #0
    77ae:	aa09      	add	r2, sp, #36	; 0x24
    77b0:	4990      	ldr	r1, [pc, #576]	; (79f4 <loadSample(int, int)+0x2c8>)
    77b2:	a804      	add	r0, sp, #16
    77b4:	f7fb fbd6 	bl	2f64 <SDClass::open(char const*, unsigned char)>
    77b8:	692b      	ldr	r3, [r5, #16]
    77ba:	b113      	cbz	r3, 77c2 <loadSample(int, int)+0x96>
    77bc:	4628      	mov	r0, r5
    77be:	f7fb fbbf 	bl	2f40 <File::dec_refcount()>
		f = file.f;
    77c2:	9808      	ldr	r0, [sp, #32]
    77c4:	6128      	str	r0, [r5, #16]
		return (f) ? f->isOpen() : false;
    77c6:	2800      	cmp	r0, #0
    77c8:	f000 80e1 	beq.w	798e <loadSample(int, int)+0x262>
    77cc:	6803      	ldr	r3, [r0, #0]
    77ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    77d0:	4798      	blx	r3
    77d2:	2800      	cmp	r0, #0
    77d4:	d061      	beq.n	789a <loadSample(int, int)+0x16e>
		return seek(pos, SeekSet);
    77d6:	6928      	ldr	r0, [r5, #16]
		return (f) ? f->seek(pos, mode) : false;
    77d8:	2800      	cmp	r0, #0
    77da:	f000 80e8 	beq.w	79ae <loadSample(int, int)+0x282>
    77de:	6803      	ldr	r3, [r0, #0]
    77e0:	2200      	movs	r2, #0
    77e2:	9200      	str	r2, [sp, #0]
    77e4:	2218      	movs	r2, #24
    77e6:	6a19      	ldr	r1, [r3, #32]
    77e8:	2300      	movs	r3, #0
    77ea:	4788      	blx	r1
		if (!f) return -1;
    77ec:	6928      	ldr	r0, [r5, #16]
    77ee:	2800      	cmp	r0, #0
    77f0:	f000 80dd 	beq.w	79ae <loadSample(int, int)+0x282>
		if (f->read(&b, 1) < 1) return -1;
    77f4:	6803      	ldr	r3, [r0, #0]
    77f6:	2201      	movs	r2, #1
    77f8:	a904      	add	r1, sp, #16
    77fa:	689b      	ldr	r3, [r3, #8]
    77fc:	4798      	blx	r3
    77fe:	b158      	cbz	r0, 7818 <loadSample(int, int)+0xec>
		return b;
    7800:	f89d 3010 	ldrb.w	r3, [sp, #16]
      if (g == 0) SampleRate[sampleID] = 4;
    7804:	2b00      	cmp	r3, #0
    7806:	f000 80a4 	beq.w	7952 <loadSample(int, int)+0x226>
      if (g == 17) SampleRate[sampleID] = 1;
    780a:	2b11      	cmp	r3, #17
    780c:	f040 80a6 	bne.w	795c <loadSample(int, int)+0x230>
    7810:	4b79      	ldr	r3, [pc, #484]	; (79f8 <loadSample(int, int)+0x2cc>)
    7812:	2201      	movs	r2, #1
    7814:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    int startOffset = 200 * SMP.seek;                         // Start offset in milliseconds
    7818:	4b78      	ldr	r3, [pc, #480]	; (79fc <loadSample(int, int)+0x2d0>)
    781a:	6928      	ldr	r0, [r5, #16]
    int startOffsetBytes = startOffset * PrevSampleRate * 2;  // Convert to bytes (assuming 16-bit samples)
    781c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    781e:	4b78      	ldr	r3, [pc, #480]	; (7a00 <loadSample(int, int)+0x2d4>)
    7820:	681b      	ldr	r3, [r3, #0]
    7822:	fb03 f202 	mul.w	r2, r3, r2
    7826:	f44f 73c8 	mov.w	r3, #400	; 0x190
    782a:	fb03 f202 	mul.w	r2, r3, r2
    sampleFile.seek(44 + startOffsetBytes);
    782e:	322c      	adds	r2, #44	; 0x2c
    7830:	17d3      	asrs	r3, r2, #31
		return (f) ? f->seek(pos, mode) : false;
    7832:	2800      	cmp	r0, #0
    7834:	f000 80bb 	beq.w	79ae <loadSample(int, int)+0x282>
    7838:	6801      	ldr	r1, [r0, #0]
    783a:	2400      	movs	r4, #0
    783c:	9400      	str	r4, [sp, #0]
    783e:	6a09      	ldr	r1, [r1, #32]
    7840:	4788      	blx	r1
    7842:	4b70      	ldr	r3, [pc, #448]	; (7a04 <loadSample(int, int)+0x2d8>)
    memset(sampled[sampleID], 0, sizeof(sample_len[sampleID]));
    7844:	4a70      	ldr	r2, [pc, #448]	; (7a08 <loadSample(int, int)+0x2dc>)
    7846:	fb03 f308 	mul.w	r3, r3, r8
		return (f) ? f->available() : 0;
    784a:	6928      	ldr	r0, [r5, #16]
    784c:	1899      	adds	r1, r3, r2
    784e:	50d4      	str	r4, [r2, r3]
    7850:	9102      	str	r1, [sp, #8]
    7852:	2800      	cmp	r0, #0
    7854:	f000 80a0 	beq.w	7998 <loadSample(int, int)+0x26c>
    7858:	3b01      	subs	r3, #1
    785a:	eb03 0902 	add.w	r9, r3, r2
    785e:	6803      	ldr	r3, [r0, #0]
    7860:	691b      	ldr	r3, [r3, #16]
    7862:	4798      	blx	r3
		if (f->read(&b, 1) < 1) return -1;
    7864:	2201      	movs	r2, #1
    7866:	a904      	add	r1, sp, #16
    while (sampleFile.available()) {
    7868:	2800      	cmp	r0, #0
    786a:	f000 80ac 	beq.w	79c6 <loadSample(int, int)+0x29a>
		if (!f) return -1;
    786e:	692b      	ldr	r3, [r5, #16]
		if (f->read(&b, 1) < 1) return -1;
    7870:	4618      	mov	r0, r3
		if (!f) return -1;
    7872:	2b00      	cmp	r3, #0
    7874:	f000 80ad 	beq.w	79d2 <loadSample(int, int)+0x2a6>
		if (f->read(&b, 1) < 1) return -1;
    7878:	681b      	ldr	r3, [r3, #0]
    787a:	689b      	ldr	r3, [r3, #8]
    787c:	4798      	blx	r3
    787e:	2800      	cmp	r0, #0
    7880:	f000 80a4 	beq.w	79cc <loadSample(int, int)+0x2a0>
		return b;
    7884:	f89d 3010 	ldrb.w	r3, [sp, #16]
		return (f) ? f->available() : 0;
    7888:	6928      	ldr	r0, [r5, #16]
      i++;
    788a:	3401      	adds	r4, #1
      sampled[sampleID][i] = b;
    788c:	f809 3f01 	strb.w	r3, [r9, #1]!
    7890:	2800      	cmp	r0, #0
    7892:	d1e4      	bne.n	785e <loadSample(int, int)+0x132>
  i = i / 2;
    7894:	1064      	asrs	r4, r4, #1
  _samplers[sampleID].addSample(36, (int16_t*)sampled[sampleID] + 2, (int)i - 120, 1);
    7896:	3c78      	subs	r4, #120	; 0x78
    7898:	e00e      	b.n	78b8 <loadSample(int, int)+0x18c>
    memset(sampled[sampleID], 0, sizeof(sample_len[sampleID]));
    789a:	4a5a      	ldr	r2, [pc, #360]	; (7a04 <loadSample(int, int)+0x2d8>)
    789c:	f06f 0477 	mvn.w	r4, #119	; 0x77
    78a0:	4b59      	ldr	r3, [pc, #356]	; (7a08 <loadSample(int, int)+0x2dc>)
    78a2:	fb02 3308 	mla	r3, r2, r8, r3
    78a6:	9302      	str	r3, [sp, #8]
		if (f) {
    78a8:	6928      	ldr	r0, [r5, #16]
    78aa:	b128      	cbz	r0, 78b8 <loadSample(int, int)+0x18c>
			f->close();
    78ac:	6803      	ldr	r3, [r0, #0]
    78ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    78b0:	4798      	blx	r3
			dec_refcount();
    78b2:	484f      	ldr	r0, [pc, #316]	; (79f0 <loadSample(int, int)+0x2c4>)
    78b4:	f7fb fb44 	bl	2f40 <File::dec_refcount()>
  _samplers[sampleID].removeAllSamples();
    78b8:	eb08 0988 	add.w	r9, r8, r8, lsl #2
    78bc:	f8df b154 	ldr.w	fp, [pc, #340]	; 7a14 <loadSample(int, int)+0x2e8>
    78c0:	ea4f 1389 	mov.w	r3, r9, lsl #6
    78c4:	eb0b 1589 	add.w	r5, fp, r9, lsl #6
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
    78c8:	9303      	str	r3, [sp, #12]
      : _M_current(__i) { }
    78ca:	e9d5 3a4d 	ldrd	r3, sl, [r5, #308]	; 0x134
    78ce:	4553      	cmp	r3, sl
    78d0:	d00e      	beq.n	78f0 <loadSample(int, int)+0x1c4>
    78d2:	4699      	mov	r9, r3
            delete sample;
    78d4:	f859 0b04 	ldr.w	r0, [r9], #4
    78d8:	2114      	movs	r1, #20
    78da:	b108      	cbz	r0, 78e0 <loadSample(int, int)+0x1b4>
    78dc:	f00e ff00 	bl	166e0 <operator delete(void*, unsigned int)>
        for (auto && sample : _audiosamples) {
    78e0:	45ca      	cmp	sl, r9
    78e2:	d1f7      	bne.n	78d4 <loadSample(int, int)+0x1a8>
	if (size_type __n = this->_M_impl._M_finish - __pos)
    78e4:	e9d5 324d 	ldrd	r3, r2, [r5, #308]	; 0x134
    78e8:	4293      	cmp	r3, r2
	    this->_M_impl._M_finish = __pos;
    78ea:	bf18      	it	ne
    78ec:	f8c5 3138 	strne.w	r3, [r5, #312]	; 0x138
        audiosample *newSample = new audiosample(noteNumber, data, sampleLength, numChannels);
    78f0:	2014      	movs	r0, #20
    78f2:	f00e feed 	bl	166d0 <operator new(unsigned int)>
  _samplers[sampleID].addSample(36, (int16_t*)sampled[sampleID] + 2, (int)i - 120, 1);
    78f6:	9b02      	ldr	r3, [sp, #8]
    78f8:	9004      	str	r0, [sp, #16]
    78fa:	3304      	adds	r3, #4
        _sampleLength(sampleLength), 
    78fc:	e9c0 3401 	strd	r3, r4, [r0, #4]
        _noteNumber(noteNumber), 
    7900:	2324      	movs	r3, #36	; 0x24
    7902:	7003      	strb	r3, [r0, #0]
        _numChannels(numChannels) {
    7904:	2301      	movs	r3, #1
    7906:	60c3      	str	r3, [r0, #12]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7908:	e9d5 134e 	ldrd	r1, r3, [r5, #312]	; 0x138
    790c:	4299      	cmp	r1, r3
    790e:	d046      	beq.n	799e <loadSample(int, int)+0x272>
    7910:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7914:	f8c5 1138 	str.w	r1, [r5, #312]	; 0x138
  for (int f = 1; f < maxX + 1; f++) {
    7918:	4d3c      	ldr	r5, [pc, #240]	; (7a0c <loadSample(int, int)+0x2e0>)
    light(f, yposLoader, col[sampleID]);
    791a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
  for (int f = 1; f < maxX + 1; f++) {
    791e:	2401      	movs	r4, #1
    light(f, yposLoader, col[sampleID]);
    7920:	4445      	add	r5, r8
    7922:	7869      	ldrb	r1, [r5, #1]
    7924:	4620      	mov	r0, r4
    7926:	782b      	ldrb	r3, [r5, #0]
  for (int f = 1; f < maxX + 1; f++) {
    7928:	3401      	adds	r4, #1
    light(f, yposLoader, col[sampleID]);
    792a:	78aa      	ldrb	r2, [r5, #2]
    792c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    7930:	4631      	mov	r1, r6
    7932:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    7936:	f7fc fb0d 	bl	3f54 <light(int, int, CRGB)>
  for (int f = 1; f < maxX + 1; f++) {
    793a:	2c11      	cmp	r4, #17
    793c:	d1f1      	bne.n	7922 <loadSample(int, int)+0x1f6>
    793e:	7839      	ldrb	r1, [r7, #0]
    7940:	4828      	ldr	r0, [pc, #160]	; (79e4 <loadSample(int, int)+0x2b8>)
    7942:	f003 f9f9 	bl	ad38 <CFastLED::show(unsigned char)>
}
    7946:	b017      	add	sp, #92	; 0x5c
    7948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (g == 72) SampleRate[sampleID] = 4;
    794c:	2b48      	cmp	r3, #72	; 0x48
    794e:	f47f af63 	bne.w	7818 <loadSample(int, int)+0xec>
    7952:	4b29      	ldr	r3, [pc, #164]	; (79f8 <loadSample(int, int)+0x2cc>)
    7954:	2204      	movs	r2, #4
    7956:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
    for (uint8_t i = 24; i < 25; i++) {
    795a:	e75d      	b.n	7818 <loadSample(int, int)+0xec>
      if (g == 34) SampleRate[sampleID] = 2;
    795c:	2b22      	cmp	r3, #34	; 0x22
    795e:	d006      	beq.n	796e <loadSample(int, int)+0x242>
      if (g == 68) SampleRate[sampleID] = 3;
    7960:	2b44      	cmp	r3, #68	; 0x44
    7962:	d1f3      	bne.n	794c <loadSample(int, int)+0x220>
    7964:	4b24      	ldr	r3, [pc, #144]	; (79f8 <loadSample(int, int)+0x2cc>)
    7966:	2203      	movs	r2, #3
    7968:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
      if (g == 72) SampleRate[sampleID] = 4;
    796c:	e754      	b.n	7818 <loadSample(int, int)+0xec>
      if (g == 34) SampleRate[sampleID] = 2;
    796e:	4b22      	ldr	r3, [pc, #136]	; (79f8 <loadSample(int, int)+0x2cc>)
    7970:	2202      	movs	r2, #2
    7972:	f843 2028 	str.w	r2, [r3, r8, lsl #2]
      if (g == 72) SampleRate[sampleID] = 4;
    7976:	e74f      	b.n	7818 <loadSample(int, int)+0xec>
    sprintf(OUTPUTf, "samples/%d/_%d.wav", SMP.folder - 1, sampleID);
    7978:	4c20      	ldr	r4, [pc, #128]	; (79fc <loadSample(int, int)+0x2d0>)
    797a:	4643      	mov	r3, r8
    797c:	4924      	ldr	r1, [pc, #144]	; (7a10 <loadSample(int, int)+0x2e4>)
    797e:	a809      	add	r0, sp, #36	; 0x24
    7980:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7982:	3a01      	subs	r2, #1
    7984:	f01a f900 	bl	21b88 <sprintf>
    sampleID = SMP.currentChannel;
    7988:	f8d4 8004 	ldr.w	r8, [r4, #4]
    798c:	e705      	b.n	779a <loadSample(int, int)+0x6e>
    memset(sampled[sampleID], 0, sizeof(sample_len[sampleID]));
    798e:	4a1d      	ldr	r2, [pc, #116]	; (7a04 <loadSample(int, int)+0x2d8>)
    7990:	4b1d      	ldr	r3, [pc, #116]	; (7a08 <loadSample(int, int)+0x2dc>)
    7992:	fb02 3308 	mla	r3, r2, r8, r3
    7996:	9302      	str	r3, [sp, #8]
    7998:	f06f 0477 	mvn.w	r4, #119	; 0x77
		if (f) {
    799c:	e78c      	b.n	78b8 <loadSample(int, int)+0x18c>
        _audiosamples.push_back(sample);
    799e:	9b03      	ldr	r3, [sp, #12]
	  _M_realloc_insert(end(), __x);
    79a0:	aa04      	add	r2, sp, #16
    79a2:	f503 709a 	add.w	r0, r3, #308	; 0x134
    79a6:	4458      	add	r0, fp
    79a8:	f7ff f94c 	bl	6c44 <void std::vector<audiosample*, std::allocator<audiosample*> >::_M_realloc_insert<audiosample* const&>(__gnu_cxx::__normal_iterator<audiosample**, std::vector<audiosample*, std::allocator<audiosample*> > >, audiosample* const&)>
    79ac:	e7b4      	b.n	7918 <loadSample(int, int)+0x1ec>
    79ae:	4b15      	ldr	r3, [pc, #84]	; (7a04 <loadSample(int, int)+0x2d8>)
    79b0:	2200      	movs	r2, #0
    79b2:	f06f 0477 	mvn.w	r4, #119	; 0x77
    79b6:	fb03 fa08 	mul.w	sl, r3, r8
    79ba:	4b13      	ldr	r3, [pc, #76]	; (7a08 <loadSample(int, int)+0x2dc>)
    79bc:	f843 200a 	str.w	r2, [r3, sl]
    79c0:	4453      	add	r3, sl
    79c2:	9302      	str	r3, [sp, #8]
    79c4:	e778      	b.n	78b8 <loadSample(int, int)+0x18c>
  i = i / 2;
    79c6:	4114      	asrs	r4, r2
  _samplers[sampleID].addSample(36, (int16_t*)sampled[sampleID] + 2, (int)i - 120, 1);
    79c8:	3c78      	subs	r4, #120	; 0x78
    79ca:	e76d      	b.n	78a8 <loadSample(int, int)+0x17c>
		return (f) ? f->available() : 0;
    79cc:	6928      	ldr	r0, [r5, #16]
    79ce:	23ff      	movs	r3, #255	; 0xff
    79d0:	e75b      	b.n	788a <loadSample(int, int)+0x15e>
      sampled[sampleID][i] = b;
    79d2:	23ff      	movs	r3, #255	; 0xff
      i++;
    79d4:	3401      	adds	r4, #1
      sampled[sampleID][i] = b;
    79d6:	f889 3001 	strb.w	r3, [r9, #1]
    79da:	e75b      	b.n	7894 <loadSample(int, int)+0x168>
    79dc:	20000908 	.word	0x20000908
    79e0:	20003314 	.word	0x20003314
    79e4:	200045e8 	.word	0x200045e8
    79e8:	20000b4c 	.word	0x20000b4c
    79ec:	2000c6c4 	.word	0x2000c6c4
    79f0:	20003bbc 	.word	0x20003bbc
    79f4:	200045f8 	.word	0x200045f8
    79f8:	200032d4 	.word	0x200032d4
    79fc:	20003294 	.word	0x20003294
    7a00:	20003290 	.word	0x20003290
    7a04:	001b1c19 	.word	0x001b1c19
    7a08:	70000000 	.word	0x70000000
    7a0c:	20004fc4 	.word	0x20004fc4
    7a10:	200009a4 	.word	0x200009a4
    7a14:	2000561c 	.word	0x2000561c

00007a18 <setup>:
void setup() {
    7a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t millis_begin = systick_millis_count;
    7a1c:	4d6f      	ldr	r5, [pc, #444]	; (7bdc <setup+0x1c4>)
    7a1e:	b085      	sub	sp, #20
  delay(2000);
    7a20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    7a24:	4c6e      	ldr	r4, [pc, #440]	; (7be0 <setup+0x1c8>)
    7a26:	f00e fa35 	bl	15e94 <delay>
	// Testing Serial as a boolean indicates whether USB is active and a program
	// running on your PC has raised the DTR signal, which typically means it has
	// opened the port and is ready to communicate.
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7a2a:	f8df 8218 	ldr.w	r8, [pc, #536]	; 7c44 <setup+0x22c>
		uint32_t millis_begin = systick_millis_count;
    7a2e:	682e      	ldr	r6, [r5, #0]
				if (elapsed > 750) break;
    7a30:	f240 27ee 	movw	r7, #750	; 0x2ee
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7a34:	f8df 9210 	ldr.w	r9, [pc, #528]	; 7c48 <setup+0x230>
		yield();
    7a38:	f010 fdca 	bl	185d0 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7a3c:	7823      	ldrb	r3, [r4, #0]
    7a3e:	2b00      	cmp	r3, #0
    7a40:	f000 80bc 	beq.w	7bbc <setup+0x1a4>
    7a44:	f898 3000 	ldrb.w	r3, [r8]
    7a48:	07db      	lsls	r3, r3, #31
    7a4a:	f140 80b7 	bpl.w	7bbc <setup+0x1a4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7a4e:	682b      	ldr	r3, [r5, #0]
    7a50:	f8d9 2000 	ldr.w	r2, [r9]
    7a54:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7a56:	2b0e      	cmp	r3, #14
    7a58:	f240 80b0 	bls.w	7bbc <setup+0x1a4>
		// type: 0xF8  Clock
		usb_midi_handleClock = fptr;
	}
	void setHandleStart(void (*fptr)(void)) {
		// type: 0xFA  Start
		usb_midi_handleStart = fptr;
    7a5c:	4b61      	ldr	r3, [pc, #388]	; (7be4 <setup+0x1cc>)
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
    7a5e:	2400      	movs	r4, #0
    7a60:	4a61      	ldr	r2, [pc, #388]	; (7be8 <setup+0x1d0>)
		usb_midi_handleClock = fptr;
    7a62:	4962      	ldr	r1, [pc, #392]	; (7bec <setup+0x1d4>)
		usb_midi_handleStart = fptr;
    7a64:	601a      	str	r2, [r3, #0]
		usb_midi_handleClock = fptr;
    7a66:	4862      	ldr	r0, [pc, #392]	; (7bf0 <setup+0x1d8>)
		usb_midi_handleSongPosition = fptr;
    7a68:	4b62      	ldr	r3, [pc, #392]	; (7bf4 <setup+0x1dc>)
    7a6a:	4a63      	ldr	r2, [pc, #396]	; (7bf8 <setup+0x1e0>)
		usb_midi_handleClock = fptr;
    7a6c:	6008      	str	r0, [r1, #0]
		usb_midi_handleSongPosition = fptr;
    7a6e:	601a      	str	r2, [r3, #0]
		// type: 0xFB  Continue
		usb_midi_handleContinue = fptr;
	}
	void setHandleStop(void (*fptr)(void)) {
		// type: 0xFC  Stop
		usb_midi_handleStop = fptr;
    7a70:	4962      	ldr	r1, [pc, #392]	; (7bfc <setup+0x1e4>)
    7a72:	4863      	ldr	r0, [pc, #396]	; (7c00 <setup+0x1e8>)
                usb_midi_handleNoteOn = fptr;
    7a74:	4b63      	ldr	r3, [pc, #396]	; (7c04 <setup+0x1ec>)
    7a76:	4a64      	ldr	r2, [pc, #400]	; (7c08 <setup+0x1f0>)
    7a78:	4e64      	ldr	r6, [pc, #400]	; (7c0c <setup+0x1f4>)
		usb_midi_handleStop = fptr;
    7a7a:	6008      	str	r0, [r1, #0]
                usb_midi_handleNoteOn = fptr;
    7a7c:	601a      	str	r2, [r3, #0]
    7a7e:	4635      	mov	r5, r6
                usb_midi_handleTimeCodeQuarterFrame = fptr;
    7a80:	4963      	ldr	r1, [pc, #396]	; (7c10 <setup+0x1f8>)
    7a82:	4864      	ldr	r0, [pc, #400]	; (7c14 <setup+0x1fc>)
                usb_midi_handleNoteOff = fptr;
    7a84:	4b64      	ldr	r3, [pc, #400]	; (7c18 <setup+0x200>)
    7a86:	4a65      	ldr	r2, [pc, #404]	; (7c1c <setup+0x204>)
                usb_midi_handleTimeCodeQuarterFrame = fptr;
    7a88:	6008      	str	r0, [r1, #0]
                usb_midi_handleNoteOff = fptr;
    7a8a:	601a      	str	r2, [r3, #0]
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7a8c:	4620      	mov	r0, r4
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }

    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    7a8e:	3401      	adds	r4, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7a90:	f00e fb44 	bl	1611c <eeprom_read_byte>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value,"You can not use this type with EEPROM.get" ); // the code below only makes sense if you can "memcpy" T
        #endif
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7a94:	f805 0b01 	strb.w	r0, [r5], #1
    7a98:	2c04      	cmp	r4, #4
    7a9a:	d1f7      	bne.n	7a8c <setup+0x74>
  pinMode(0, INPUT_PULLDOWN);
    7a9c:	2103      	movs	r1, #3
    7a9e:	2000      	movs	r0, #0
    7aa0:	f00e fab2 	bl	16008 <pinMode>
  pinMode(3, INPUT_PULLDOWN);
    7aa4:	2103      	movs	r1, #3
    7aa6:	4608      	mov	r0, r1
    7aa8:	f00e faae 	bl	16008 <pinMode>
  pinMode(16, INPUT_PULLDOWN);
    7aac:	2103      	movs	r1, #3
    7aae:	2010      	movs	r0, #16
    7ab0:	f00e faaa 	bl	16008 <pinMode>
		static CWS2812SerialController<DATA_PIN,RGB_ORDER> controller;
    7ab4:	495a      	ldr	r1, [pc, #360]	; (7c20 <setup+0x208>)
    7ab6:	680a      	ldr	r2, [r1, #0]
    7ab8:	f012 0201 	ands.w	r2, r2, #1
    7abc:	f000 8532 	beq.w	8524 <setup+0xb0c>
		return addLeds(&controller, data, nLedsOrOffset, nLedsIfOffset);
    7ac0:	2300      	movs	r3, #0
    7ac2:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ac6:	4957      	ldr	r1, [pc, #348]	; (7c24 <setup+0x20c>)
  for (int z = 1; z <= maxFiles; z++) {
    7ac8:	2401      	movs	r4, #1
    7aca:	4857      	ldr	r0, [pc, #348]	; (7c28 <setup+0x210>)
    7acc:	f003 f908 	bl	ace0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
  FastLED.setMaxRefreshRate(0);
    7ad0:	2200      	movs	r2, #0
    7ad2:	4856      	ldr	r0, [pc, #344]	; (7c2c <setup+0x214>)
    7ad4:	4611      	mov	r1, r2
    7ad6:	f003 fa77 	bl	afc8 <CFastLED::setMaxRefreshRate(unsigned short, bool)>
  showIntro();
    7ada:	f7fd fb3b 	bl	5154 <showIntro()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7ade:	2117      	movs	r1, #23
    7ae0:	4853      	ldr	r0, [pc, #332]	; (7c30 <setup+0x218>)
    7ae2:	f010 fcf7 	bl	184d4 <usb_serial_write>
  drawNoSD();
    7ae6:	f7fc f965 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    7aea:	2100      	movs	r1, #0
    7aec:	484f      	ldr	r0, [pc, #316]	; (7c2c <setup+0x214>)
    7aee:	f003 fa4d 	bl	af8c <CFastLED::clear(bool)>
    loadSample(samplePackID, z);
    7af2:	4621      	mov	r1, r4
  for (int z = 1; z <= maxFiles; z++) {
    7af4:	3401      	adds	r4, #1
    loadSample(samplePackID, z);
    7af6:	6830      	ldr	r0, [r6, #0]
    7af8:	f7ff fe18 	bl	772c <loadSample(int, int)>
  for (int z = 1; z <= maxFiles; z++) {
    7afc:	2c09      	cmp	r4, #9
    7afe:	d1f8      	bne.n	7af2 <setup+0xda>
  AudioMemory(16);
    7b00:	4e4c      	ldr	r6, [pc, #304]	; (7c34 <setup+0x21c>)
    7b02:	2110      	movs	r1, #16
    7b04:	484c      	ldr	r0, [pc, #304]	; (7c38 <setup+0x220>)
            _interpolationType = interpolationType;
    7b06:	f04f 0903 	mov.w	r9, #3
    7b0a:	f020 f8c1 	bl	27c90 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>
  for (int i = 0; i <= maxFiles; i++) {
    7b0e:	4f4b      	ldr	r7, [pc, #300]	; (7c3c <setup+0x224>)
    7b10:	f106 0820 	add.w	r8, r6, #32
  AudioMemory(16);
    7b14:	4b4a      	ldr	r3, [pc, #296]	; (7c40 <setup+0x228>)
            interpolation[0].y = 0.0;
    7b16:	2500      	movs	r5, #0

        void setPlayStart(play_start start) {
            reader->setPlayStart(start);
        }

        void enableInterpolation(bool enable) {
    7b18:	699c      	ldr	r4, [r3, #24]
        if (interpolationType != _interpolationType) {
    7b1a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    7b1e:	2b03      	cmp	r3, #3
    7b20:	d043      	beq.n	7baa <setup+0x192>
        if (_numChannels < 0)
    7b22:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
            _interpolationType = interpolationType;
    7b26:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
        if (_numChannels < 0)
    7b2a:	2a00      	cmp	r2, #0
    7b2c:	db3d      	blt.n	7baa <setup+0x192>
        if (!_interpolationPoints) return;
    7b2e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    7b30:	2b00      	cmp	r3, #0
    7b32:	d051      	beq.n	7bd8 <setup+0x1c0>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    7b34:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
    7b38:	b172      	cbz	r2, 7b58 <setup+0x140>
    7b3a:	f04f 0a00 	mov.w	sl, #0
            delete [] _interpolationPoints[i];
    7b3e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    7b42:	f10a 0a01 	add.w	sl, sl, #1
            delete [] _interpolationPoints[i];
    7b46:	b120      	cbz	r0, 7b52 <setup+0x13a>
    7b48:	f00e fdc8 	bl	166dc <operator delete[](void*)>
    7b4c:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
        delete [] _interpolationPoints;
    7b50:	6e23      	ldr	r3, [r4, #96]	; 0x60
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    7b52:	4592      	cmp	sl, r2
    7b54:	dbf3      	blt.n	7b3e <setup+0x126>
        delete [] _interpolationPoints;
    7b56:	b113      	cbz	r3, 7b5e <setup+0x146>
    7b58:	4618      	mov	r0, r3
    7b5a:	f00e fdbf 	bl	166dc <operator delete[](void*)>
        _interpolationPoints = new InterpolationData*[_numChannels];
    7b5e:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    7b62:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
        _interpolationPoints = nullptr;
    7b66:	6625      	str	r5, [r4, #96]	; 0x60
        _interpolationPoints = new InterpolationData*[_numChannels];
    7b68:	429a      	cmp	r2, r3
        _numInterpolationPointsChannels = 0;
    7b6a:	f8a4 504e 	strh.w	r5, [r4, #78]	; 0x4e
        _interpolationPoints = new InterpolationData*[_numChannels];
    7b6e:	d333      	bcc.n	7bd8 <setup+0x1c0>
    7b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    7b74:	f00e fdae 	bl	166d4 <operator new[](unsigned int)>
        for (int channel=0; channel < _numChannels; channel++) {        
    7b78:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
        _interpolationPoints = new InterpolationData*[_numChannels];
    7b7c:	6620      	str	r0, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {        
    7b7e:	2b00      	cmp	r3, #0
    7b80:	dd11      	ble.n	7ba6 <setup+0x18e>
    7b82:	f04f 0a00 	mov.w	sl, #0
            InterpolationData *interpolation = new InterpolationData[4];
    7b86:	2010      	movs	r0, #16
    7b88:	f00e fda4 	bl	166d4 <operator new[](unsigned int)>
            _interpolationPoints[channel] = interpolation ;
    7b8c:	6e22      	ldr	r2, [r4, #96]	; 0x60
        for (int channel=0; channel < _numChannels; channel++) {        
    7b8e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
            interpolation[0].y = 0.0;
    7b92:	8045      	strh	r5, [r0, #2]
            interpolation[1].y = 0.0;    
    7b94:	80c5      	strh	r5, [r0, #6]
            interpolation[2].y = 0.0;    
    7b96:	8145      	strh	r5, [r0, #10]
            interpolation[3].y = 0.0;
    7b98:	81c5      	strh	r5, [r0, #14]
            _interpolationPoints[channel] = interpolation ;
    7b9a:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
        for (int channel=0; channel < _numChannels; channel++) {        
    7b9e:	f10a 0a01 	add.w	sl, sl, #1
    7ba2:	459a      	cmp	sl, r3
    7ba4:	dbef      	blt.n	7b86 <setup+0x16e>
        _numInterpolationPointsChannels = _numChannels;
    7ba6:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
		attack_count = milliseconds2count(milliseconds);
    7baa:	f857 3f04 	ldr.w	r3, [r7, #4]!
    7bae:	2206      	movs	r2, #6
  for (int i = 0; i <= maxFiles; i++) {
    7bb0:	45b0      	cmp	r8, r6
    7bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    7bb4:	d04a      	beq.n	7c4c <setup+0x234>
    voices[i]->enableInterpolation(true);
    7bb6:	f856 3f04 	ldr.w	r3, [r6, #4]!
    7bba:	e7ad      	b.n	7b18 <setup+0x100>
			uint32_t elapsed = systick_millis_count - millis_begin;
    7bbc:	682b      	ldr	r3, [r5, #0]
			if (usb_configuration) {
    7bbe:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    7bc0:	1b9b      	subs	r3, r3, r6
			if (usb_configuration) {
    7bc2:	b132      	cbz	r2, 7bd2 <setup+0x1ba>
				if (elapsed > 2000) break;
    7bc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    7bc8:	f63f af48 	bhi.w	7a5c <setup+0x44>
			yield();
    7bcc:	f010 fd00 	bl	185d0 <yield>
    7bd0:	e732      	b.n	7a38 <setup+0x20>
				if (elapsed > 750) break;
    7bd2:	42bb      	cmp	r3, r7
    7bd4:	d9fa      	bls.n	7bcc <setup+0x1b4>
    7bd6:	e741      	b.n	7a5c <setup+0x44>
        _interpolationPoints = new InterpolationData*[_numChannels];
    7bd8:	0090      	lsls	r0, r2, #2
    7bda:	e7cb      	b.n	7b74 <setup+0x15c>
    7bdc:	2000bc24 	.word	0x2000bc24
    7be0:	2000c963 	.word	0x2000c963
    7be4:	2000c578 	.word	0x2000c578
    7be8:	00000d71 	.word	0x00000d71
    7bec:	2000c550 	.word	0x2000c550
    7bf0:	00000e89 	.word	0x00000e89
    7bf4:	2000c570 	.word	0x2000c570
    7bf8:	00000d29 	.word	0x00000d29
    7bfc:	2000c57c 	.word	0x2000c57c
    7c00:	00006671 	.word	0x00006671
    7c04:	2000c560 	.word	0x2000c560
    7c08:	00003fad 	.word	0x00003fad
    7c0c:	2000ba0c 	.word	0x2000ba0c
    7c10:	2000c58c 	.word	0x2000c58c
    7c14:	00000d55 	.word	0x00000d55
    7c18:	2000c55c 	.word	0x2000c55c
    7c1c:	00000d1d 	.word	0x00000d1d
    7c20:	20004f7c 	.word	0x20004f7c
    7c24:	20006bf0 	.word	0x20006bf0
    7c28:	200052e0 	.word	0x200052e0
    7c2c:	200045e8 	.word	0x200045e8
    7c30:	20002898 	.word	0x20002898
    7c34:	20000d58 	.word	0x20000d58
    7c38:	20200000 	.word	0x20200000
    7c3c:	20000e60 	.word	0x20000e60
    7c40:	2000ba94 	.word	0x2000ba94
    7c44:	2000c962 	.word	0x2000c962
    7c48:	2000c544 	.word	0x2000c544
    7c4c:	4ad4      	ldr	r2, [pc, #848]	; (7fa0 <setup+0x588>)
      note[vx][vy][1] = 30;
    7c4e:	211e      	movs	r1, #30
    7c50:	f502 4088 	add.w	r0, r2, #17408	; 0x4400
    for (int vy = 1; vy < maxY + 1; vy++) {
    7c54:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
      note[vx][vy][1] = 30;
    7c58:	60d9      	str	r1, [r3, #12]
    for (int vy = 1; vy < maxY + 1; vy++) {
    7c5a:	3308      	adds	r3, #8
    7c5c:	4293      	cmp	r3, r2
    7c5e:	d1fb      	bne.n	7c58 <setup+0x240>
  for (int vx = 1; vx < SONG_LEN + 1; vx++) {
    7c60:	f103 0288 	add.w	r2, r3, #136	; 0x88
    7c64:	4282      	cmp	r2, r0
    7c66:	d1f5      	bne.n	7c54 <setup+0x23c>
  audioShield.enable();
    7c68:	48ce      	ldr	r0, [pc, #824]	; (7fa4 <setup+0x58c>)
    7c6a:	f003 fdab 	bl	b7c4 <AudioControlSGTL5000::enable()>
    7c6e:	2174      	movs	r1, #116	; 0x74
    7c70:	48cc      	ldr	r0, [pc, #816]	; (7fa4 <setup+0x58c>)
    7c72:	f003 fded 	bl	b850 <AudioControlSGTL5000::volumeInteger(unsigned int)>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7c76:	2018      	movs	r0, #24
    7c78:	f00e fd2a 	bl	166d0 <operator new(unsigned int)>
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7c7c:	4cca      	ldr	r4, [pc, #808]	; (7fa8 <setup+0x590>)
        _mixerChannel(mixerChannel)
    7c7e:	2300      	movs	r3, #0
        _audiomixer(audiomixer),
    7c80:	4fca      	ldr	r7, [pc, #808]	; (7fac <setup+0x594>)
        _audioplayarray(audioplayarray), 
    7c82:	4acb      	ldr	r2, [pc, #812]	; (7fb0 <setup+0x598>)
    7c84:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
        _mixerChannel(mixerChannel)
    7c88:	6103      	str	r3, [r0, #16]
    7c8a:	7503      	strb	r3, [r0, #20]
    7c8c:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    7c8e:	6002      	str	r2, [r0, #0]
        _audioenvelop(audioenvelop),
    7c90:	4ac8      	ldr	r2, [pc, #800]	; (7fb4 <setup+0x59c>)
    7c92:	9003      	str	r0, [sp, #12]
    7c94:	6042      	str	r2, [r0, #4]
        _audiomixer(audiomixer),
    7c96:	e9c0 3702 	strd	r3, r7, [r0, #8]
    7c9a:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    7c9e:	4299      	cmp	r1, r3
    7ca0:	f000 847b 	beq.w	859a <setup+0xb82>
    7ca4:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7ca8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
        _numVoices++;
    7cac:	f894 6140 	ldrb.w	r6, [r4, #320]	; 0x140
        if (numVoices > _numVoices)
    7cb0:	f894 81f0 	ldrb.w	r8, [r4, #496]	; 0x1f0
    7cb4:	3601      	adds	r6, #1
    7cb6:	b2f6      	uxtb	r6, r6
    7cb8:	4546      	cmp	r6, r8
    7cba:	f884 6140 	strb.w	r6, [r4, #320]	; 0x140
    7cbe:	f240 82e9 	bls.w	8294 <setup+0x87c>
              activeVoices[i] = 255;
    7cc2:	eba6 0508 	sub.w	r5, r6, r8
    7cc6:	f508 70f0 	add.w	r0, r8, #480	; 0x1e0
    7cca:	21ff      	movs	r1, #255	; 0xff
    7ccc:	462a      	mov	r2, r5
    7cce:	4420      	add	r0, r4
    7cd0:	f01a fc06 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7cd4:	f108 007d 	add.w	r0, r8, #125	; 0x7d
    7cd8:	00aa      	lsls	r2, r5, #2
    7cda:	2100      	movs	r1, #0
    7cdc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7ce0:	f01a fbfe 	bl	224e0 <memset>
  _samplers[2].addVoice(sound2, mix1_a, 1, envelope2);
    7ce4:	4ab4      	ldr	r2, [pc, #720]	; (7fb8 <setup+0x5a0>)
    7ce6:	2301      	movs	r3, #1
    7ce8:	49b4      	ldr	r1, [pc, #720]	; (7fbc <setup+0x5a4>)
    7cea:	48b5      	ldr	r0, [pc, #724]	; (7fc0 <setup+0x5a8>)
        _numVoices = numVoices;
    7cec:	f884 61f0 	strb.w	r6, [r4, #496]	; 0x1f0
    7cf0:	9200      	str	r2, [sp, #0]
    7cf2:	4aae      	ldr	r2, [pc, #696]	; (7fac <setup+0x594>)
    7cf4:	f7fe ff52 	bl	6b9c <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7cf8:	2018      	movs	r0, #24
    7cfa:	f00e fce9 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    7cfe:	2300      	movs	r3, #0
        _audioplayarray(audioplayarray), 
    7d00:	4ab0      	ldr	r2, [pc, #704]	; (7fc4 <setup+0x5ac>)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7d02:	f8d4 13c8 	ldr.w	r1, [r4, #968]	; 0x3c8
    7d06:	6002      	str	r2, [r0, #0]
        _mixerChannel(mixerChannel)
    7d08:	6103      	str	r3, [r0, #16]
        _audioenvelop(audioenvelop),
    7d0a:	4aaf      	ldr	r2, [pc, #700]	; (7fc8 <setup+0x5b0>)
        _mixerChannel(mixerChannel)
    7d0c:	7583      	strb	r3, [r0, #22]
        _audioenvelop(audioenvelop),
    7d0e:	6042      	str	r2, [r0, #4]
        _mixerChannel(mixerChannel)
    7d10:	2202      	movs	r2, #2
    7d12:	9003      	str	r0, [sp, #12]
    7d14:	7502      	strb	r2, [r0, #20]
        _audiomixer(audiomixer),
    7d16:	e9c0 3702 	strd	r3, r7, [r0, #8]
    7d1a:	f8d4 33cc 	ldr.w	r3, [r4, #972]	; 0x3cc
    7d1e:	4299      	cmp	r1, r3
    7d20:	f000 8430 	beq.w	8584 <setup+0xb6c>
    7d24:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7d28:	f8c4 13c8 	str.w	r1, [r4, #968]	; 0x3c8
        _numVoices++;
    7d2c:	f894 53c0 	ldrb.w	r5, [r4, #960]	; 0x3c0
        if (numVoices > _numVoices)
    7d30:	f894 8470 	ldrb.w	r8, [r4, #1136]	; 0x470
    7d34:	3501      	adds	r5, #1
    7d36:	b2ed      	uxtb	r5, r5
    7d38:	4545      	cmp	r5, r8
    7d3a:	f884 53c0 	strb.w	r5, [r4, #960]	; 0x3c0
    7d3e:	f240 83d9 	bls.w	84f4 <setup+0xadc>
              activeVoices[i] = 255;
    7d42:	eba5 0608 	sub.w	r6, r5, r8
    7d46:	f508 608c 	add.w	r0, r8, #1120	; 0x460
    7d4a:	21ff      	movs	r1, #255	; 0xff
    7d4c:	4632      	mov	r2, r6
    7d4e:	4420      	add	r0, r4
    7d50:	f01a fbc6 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7d54:	f208 101d 	addw	r0, r8, #285	; 0x11d
    7d58:	00b2      	lsls	r2, r6, #2
    7d5a:	2100      	movs	r1, #0
    7d5c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7d60:	f01a fbbe 	bl	224e0 <memset>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7d64:	2018      	movs	r0, #24
        _numVoices = numVoices;
    7d66:	f884 5470 	strb.w	r5, [r4, #1136]	; 0x470
    7d6a:	f00e fcb1 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    7d6e:	2300      	movs	r3, #0
        _audioplayarray(audioplayarray), 
    7d70:	4a96      	ldr	r2, [pc, #600]	; (7fcc <setup+0x5b4>)
        _audioenvelop(audioenvelop),
    7d72:	4997      	ldr	r1, [pc, #604]	; (7fd0 <setup+0x5b8>)
        _mixerChannel(mixerChannel)
    7d74:	6103      	str	r3, [r0, #16]
    7d76:	7583      	strb	r3, [r0, #22]
    7d78:	9003      	str	r0, [sp, #12]
        _audioplayarray(audioplayarray), 
    7d7a:	e9c0 2100 	strd	r2, r1, [r0]
        _audiomixer(audiomixer),
    7d7e:	e9c0 3702 	strd	r3, r7, [r0, #8]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7d82:	f8d4 1508 	ldr.w	r1, [r4, #1288]	; 0x508
        _mixerChannel(mixerChannel)
    7d86:	2203      	movs	r2, #3
    7d88:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
    7d8c:	7502      	strb	r2, [r0, #20]
    7d8e:	4299      	cmp	r1, r3
    7d90:	f000 83fe 	beq.w	8590 <setup+0xb78>
    7d94:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7d98:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
        _numVoices++;
    7d9c:	f894 5500 	ldrb.w	r5, [r4, #1280]	; 0x500
        if (numVoices > _numVoices)
    7da0:	f894 85b0 	ldrb.w	r8, [r4, #1456]	; 0x5b0
    7da4:	3501      	adds	r5, #1
    7da6:	b2ed      	uxtb	r5, r5
    7da8:	4545      	cmp	r5, r8
    7daa:	f884 5500 	strb.w	r5, [r4, #1280]	; 0x500
    7dae:	f240 8389 	bls.w	84c4 <setup+0xaac>
              activeVoices[i] = 255;
    7db2:	eba5 0608 	sub.w	r6, r5, r8
    7db6:	f508 60b4 	add.w	r0, r8, #1440	; 0x5a0
    7dba:	21ff      	movs	r1, #255	; 0xff
    7dbc:	4632      	mov	r2, r6
    7dbe:	4420      	add	r0, r4
    7dc0:	f01a fb8e 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7dc4:	f208 106d 	addw	r0, r8, #365	; 0x16d
    7dc8:	00b2      	lsls	r2, r6, #2
    7dca:	2100      	movs	r1, #0
    7dcc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7dd0:	f01a fb86 	bl	224e0 <memset>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7dd4:	2018      	movs	r0, #24
        _numVoices = numVoices;
    7dd6:	f884 55b0 	strb.w	r5, [r4, #1456]	; 0x5b0
    7dda:	f00e fc79 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    7dde:	2300      	movs	r3, #0
        _audioenvelop(audioenvelop),
    7de0:	497c      	ldr	r1, [pc, #496]	; (7fd4 <setup+0x5bc>)
        _audioplayarray(audioplayarray), 
    7de2:	4a7d      	ldr	r2, [pc, #500]	; (7fd8 <setup+0x5c0>)
        _mixerChannel(mixerChannel)
    7de4:	6083      	str	r3, [r0, #8]
    7de6:	6103      	str	r3, [r0, #16]
    7de8:	7503      	strb	r3, [r0, #20]
    7dea:	7583      	strb	r3, [r0, #22]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7dec:	f8d4 364c 	ldr.w	r3, [r4, #1612]	; 0x64c
        _audiomixer(audiomixer),
    7df0:	4e7a      	ldr	r6, [pc, #488]	; (7fdc <setup+0x5c4>)
    7df2:	9003      	str	r0, [sp, #12]
    7df4:	60c6      	str	r6, [r0, #12]
        _audioplayarray(audioplayarray), 
    7df6:	e9c0 2100 	strd	r2, r1, [r0]
    7dfa:	f8d4 1648 	ldr.w	r1, [r4, #1608]	; 0x648
    7dfe:	4299      	cmp	r1, r3
    7e00:	f000 83ac 	beq.w	855c <setup+0xb44>
    7e04:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7e08:	f8c4 1648 	str.w	r1, [r4, #1608]	; 0x648
        _numVoices++;
    7e0c:	f894 5640 	ldrb.w	r5, [r4, #1600]	; 0x640
        if (numVoices > _numVoices)
    7e10:	f894 96f0 	ldrb.w	r9, [r4, #1776]	; 0x6f0
    7e14:	3501      	adds	r5, #1
    7e16:	b2ed      	uxtb	r5, r5
    7e18:	454d      	cmp	r5, r9
    7e1a:	f884 5640 	strb.w	r5, [r4, #1600]	; 0x640
    7e1e:	f240 8339 	bls.w	8494 <setup+0xa7c>
              activeVoices[i] = 255;
    7e22:	eba5 0809 	sub.w	r8, r5, r9
    7e26:	f509 60dc 	add.w	r0, r9, #1760	; 0x6e0
    7e2a:	21ff      	movs	r1, #255	; 0xff
    7e2c:	4642      	mov	r2, r8
    7e2e:	4420      	add	r0, r4
    7e30:	f01a fb56 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7e34:	f209 10bd 	addw	r0, r9, #445	; 0x1bd
    7e38:	ea4f 0288 	mov.w	r2, r8, lsl #2
    7e3c:	2100      	movs	r1, #0
    7e3e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7e42:	f01a fb4d 	bl	224e0 <memset>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7e46:	2018      	movs	r0, #24
        _numVoices = numVoices;
    7e48:	f884 56f0 	strb.w	r5, [r4, #1776]	; 0x6f0
    7e4c:	f00e fc40 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    7e50:	2300      	movs	r3, #0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7e52:	f8d4 1788 	ldr.w	r1, [r4, #1928]	; 0x788
    7e56:	6083      	str	r3, [r0, #8]
    7e58:	6103      	str	r3, [r0, #16]
    7e5a:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    7e5c:	4b60      	ldr	r3, [pc, #384]	; (7fe0 <setup+0x5c8>)
        _audiomixer(audiomixer),
    7e5e:	60c6      	str	r6, [r0, #12]
        _audioplayarray(audioplayarray), 
    7e60:	6003      	str	r3, [r0, #0]
        _audioenvelop(audioenvelop),
    7e62:	4b60      	ldr	r3, [pc, #384]	; (7fe4 <setup+0x5cc>)
    7e64:	9003      	str	r0, [sp, #12]
    7e66:	6043      	str	r3, [r0, #4]
        _mixerChannel(mixerChannel)
    7e68:	2301      	movs	r3, #1
    7e6a:	7503      	strb	r3, [r0, #20]
    7e6c:	f8d4 378c 	ldr.w	r3, [r4, #1932]	; 0x78c
    7e70:	4299      	cmp	r1, r3
    7e72:	f000 8378 	beq.w	8566 <setup+0xb4e>
    7e76:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7e7a:	f8c4 1788 	str.w	r1, [r4, #1928]	; 0x788
        _numVoices++;
    7e7e:	f894 5780 	ldrb.w	r5, [r4, #1920]	; 0x780
        if (numVoices > _numVoices)
    7e82:	f894 9830 	ldrb.w	r9, [r4, #2096]	; 0x830
    7e86:	3501      	adds	r5, #1
    7e88:	b2ed      	uxtb	r5, r5
    7e8a:	454d      	cmp	r5, r9
    7e8c:	f884 5780 	strb.w	r5, [r4, #1920]	; 0x780
    7e90:	f240 82e8 	bls.w	8464 <setup+0xa4c>
              activeVoices[i] = 255;
    7e94:	eba5 0809 	sub.w	r8, r5, r9
    7e98:	f509 6002 	add.w	r0, r9, #2080	; 0x820
    7e9c:	21ff      	movs	r1, #255	; 0xff
    7e9e:	4642      	mov	r2, r8
    7ea0:	4420      	add	r0, r4
    7ea2:	f01a fb1d 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7ea6:	f209 200d 	addw	r0, r9, #525	; 0x20d
    7eaa:	ea4f 0288 	mov.w	r2, r8, lsl #2
    7eae:	2100      	movs	r1, #0
    7eb0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7eb4:	f01a fb14 	bl	224e0 <memset>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7eb8:	2018      	movs	r0, #24
        _numVoices = numVoices;
    7eba:	f884 5830 	strb.w	r5, [r4, #2096]	; 0x830
    7ebe:	f00e fc07 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    7ec2:	2300      	movs	r3, #0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7ec4:	f8d4 18c8 	ldr.w	r1, [r4, #2248]	; 0x8c8
    7ec8:	6083      	str	r3, [r0, #8]
    7eca:	6103      	str	r3, [r0, #16]
    7ecc:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    7ece:	4b46      	ldr	r3, [pc, #280]	; (7fe8 <setup+0x5d0>)
        _audiomixer(audiomixer),
    7ed0:	60c6      	str	r6, [r0, #12]
        _audioplayarray(audioplayarray), 
    7ed2:	6003      	str	r3, [r0, #0]
        _audioenvelop(audioenvelop),
    7ed4:	4b45      	ldr	r3, [pc, #276]	; (7fec <setup+0x5d4>)
    7ed6:	9003      	str	r0, [sp, #12]
    7ed8:	6043      	str	r3, [r0, #4]
        _mixerChannel(mixerChannel)
    7eda:	2302      	movs	r3, #2
    7edc:	7503      	strb	r3, [r0, #20]
    7ede:	f8d4 38cc 	ldr.w	r3, [r4, #2252]	; 0x8cc
    7ee2:	4299      	cmp	r1, r3
    7ee4:	f000 8344 	beq.w	8570 <setup+0xb58>
    7ee8:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7eec:	f8c4 18c8 	str.w	r1, [r4, #2248]	; 0x8c8
        _numVoices++;
    7ef0:	f894 58c0 	ldrb.w	r5, [r4, #2240]	; 0x8c0
        if (numVoices > _numVoices)
    7ef4:	f894 9970 	ldrb.w	r9, [r4, #2416]	; 0x970
    7ef8:	3501      	adds	r5, #1
    7efa:	b2ed      	uxtb	r5, r5
    7efc:	454d      	cmp	r5, r9
    7efe:	f884 58c0 	strb.w	r5, [r4, #2240]	; 0x8c0
    7f02:	f240 8297 	bls.w	8434 <setup+0xa1c>
              activeVoices[i] = 255;
    7f06:	eba5 0809 	sub.w	r8, r5, r9
    7f0a:	f509 6016 	add.w	r0, r9, #2400	; 0x960
    7f0e:	21ff      	movs	r1, #255	; 0xff
    7f10:	4642      	mov	r2, r8
    7f12:	4420      	add	r0, r4
    7f14:	f01a fae4 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7f18:	f209 205d 	addw	r0, r9, #605	; 0x25d
    7f1c:	ea4f 0288 	mov.w	r2, r8, lsl #2
    7f20:	2100      	movs	r1, #0
    7f22:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7f26:	f01a fadb 	bl	224e0 <memset>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7f2a:	2018      	movs	r0, #24
        _numVoices = numVoices;
    7f2c:	f884 5970 	strb.w	r5, [r4, #2416]	; 0x970
    7f30:	f00e fbce 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    7f34:	2300      	movs	r3, #0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    7f36:	f8d4 1a08 	ldr.w	r1, [r4, #2568]	; 0xa08
    7f3a:	6083      	str	r3, [r0, #8]
    7f3c:	6103      	str	r3, [r0, #16]
    7f3e:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    7f40:	4b2b      	ldr	r3, [pc, #172]	; (7ff0 <setup+0x5d8>)
        _audiomixer(audiomixer),
    7f42:	60c6      	str	r6, [r0, #12]
        _audioplayarray(audioplayarray), 
    7f44:	6003      	str	r3, [r0, #0]
        _audioenvelop(audioenvelop),
    7f46:	4b2b      	ldr	r3, [pc, #172]	; (7ff4 <setup+0x5dc>)
    7f48:	9003      	str	r0, [sp, #12]
    7f4a:	6043      	str	r3, [r0, #4]
        _mixerChannel(mixerChannel)
    7f4c:	2303      	movs	r3, #3
    7f4e:	7503      	strb	r3, [r0, #20]
    7f50:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
    7f54:	4299      	cmp	r1, r3
    7f56:	f000 8310 	beq.w	857a <setup+0xb62>
    7f5a:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    7f5e:	f8c4 1a08 	str.w	r1, [r4, #2568]	; 0xa08
        _numVoices++;
    7f62:	f894 5a00 	ldrb.w	r5, [r4, #2560]	; 0xa00
        if (numVoices > _numVoices)
    7f66:	f894 9ab0 	ldrb.w	r9, [r4, #2736]	; 0xab0
    7f6a:	3501      	adds	r5, #1
    7f6c:	b2ed      	uxtb	r5, r5
    7f6e:	454d      	cmp	r5, r9
    7f70:	f884 5a00 	strb.w	r5, [r4, #2560]	; 0xa00
    7f74:	f240 8246 	bls.w	8404 <setup+0x9ec>
              activeVoices[i] = 255;
    7f78:	eba5 0809 	sub.w	r8, r5, r9
    7f7c:	f509 602a 	add.w	r0, r9, #2720	; 0xaa0
    7f80:	21ff      	movs	r1, #255	; 0xff
    7f82:	4642      	mov	r2, r8
    7f84:	4420      	add	r0, r4
    7f86:	f01a faab 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    7f8a:	f209 20ad 	addw	r0, r9, #685	; 0x2ad
    7f8e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    7f92:	2100      	movs	r1, #0
    7f94:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    7f98:	f01a faa2 	bl	224e0 <memset>
    7f9c:	e02c      	b.n	7ff8 <setup+0x5e0>
    7f9e:	bf00      	nop
    7fa0:	200072c0 	.word	0x200072c0
    7fa4:	2000679c 	.word	0x2000679c
    7fa8:	2000561c 	.word	0x2000561c
    7fac:	20006ef0 	.word	0x20006ef0
    7fb0:	2000bab0 	.word	0x2000bab0
    7fb4:	200068a4 	.word	0x200068a4
    7fb8:	200069f4 	.word	0x200069f4
    7fbc:	2000bb3c 	.word	0x2000bb3c
    7fc0:	2000589c 	.word	0x2000589c
    7fc4:	2000bb58 	.word	0x2000bb58
    7fc8:	20006a2c 	.word	0x20006a2c
    7fcc:	2000bb74 	.word	0x2000bb74
    7fd0:	20006a64 	.word	0x20006a64
    7fd4:	20006a9c 	.word	0x20006a9c
    7fd8:	2000bb90 	.word	0x2000bb90
    7fdc:	20006f28 	.word	0x20006f28
    7fe0:	2000bbac 	.word	0x2000bbac
    7fe4:	20006ad4 	.word	0x20006ad4
    7fe8:	2000bbc8 	.word	0x2000bbc8
    7fec:	20006b0c 	.word	0x20006b0c
    7ff0:	2000bbe4 	.word	0x2000bbe4
    7ff4:	20006b44 	.word	0x20006b44
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    7ff8:	2018      	movs	r0, #24
        _numVoices = numVoices;
    7ffa:	f884 5ab0 	strb.w	r5, [r4, #2736]	; 0xab0
    7ffe:	f00e fb67 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    8002:	2300      	movs	r3, #0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    8004:	f8d4 1b48 	ldr.w	r1, [r4, #2888]	; 0xb48
    8008:	6083      	str	r3, [r0, #8]
    800a:	6103      	str	r3, [r0, #16]
    800c:	7503      	strb	r3, [r0, #20]
    800e:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    8010:	4bc4      	ldr	r3, [pc, #784]	; (8324 <setup+0x90c>)
        _audiomixer(audiomixer),
    8012:	f8df 8328 	ldr.w	r8, [pc, #808]	; 833c <setup+0x924>
        _audioplayarray(audioplayarray), 
    8016:	6003      	str	r3, [r0, #0]
        _audioenvelop(audioenvelop),
    8018:	4bc3      	ldr	r3, [pc, #780]	; (8328 <setup+0x910>)
    801a:	9003      	str	r0, [sp, #12]
    801c:	6043      	str	r3, [r0, #4]
    801e:	f8d4 3b4c 	ldr.w	r3, [r4, #2892]	; 0xb4c
        _audiomixer(audiomixer),
    8022:	f8c0 800c 	str.w	r8, [r0, #12]
    8026:	4299      	cmp	r1, r3
    8028:	f000 82c3 	beq.w	85b2 <setup+0xb9a>
    802c:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    8030:	f8c4 1b48 	str.w	r1, [r4, #2888]	; 0xb48
        _numVoices++;
    8034:	f894 5b40 	ldrb.w	r5, [r4, #2880]	; 0xb40
        if (numVoices > _numVoices)
    8038:	f894 abf0 	ldrb.w	sl, [r4, #3056]	; 0xbf0
    803c:	3501      	adds	r5, #1
    803e:	b2ed      	uxtb	r5, r5
    8040:	4555      	cmp	r5, sl
    8042:	f884 5b40 	strb.w	r5, [r4, #2880]	; 0xb40
    8046:	f240 81c5 	bls.w	83d4 <setup+0x9bc>
              activeVoices[i] = 255;
    804a:	eba5 090a 	sub.w	r9, r5, sl
    804e:	f50a 603e 	add.w	r0, sl, #3040	; 0xbe0
    8052:	21ff      	movs	r1, #255	; 0xff
    8054:	464a      	mov	r2, r9
    8056:	4420      	add	r0, r4
    8058:	f01a fa42 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    805c:	f20a 20fd 	addw	r0, sl, #765	; 0x2fd
    8060:	ea4f 0289 	mov.w	r2, r9, lsl #2
    8064:	2100      	movs	r1, #0
    8066:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    806a:	f01a fa39 	bl	224e0 <memset>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    806e:	2018      	movs	r0, #24
        _numVoices = numVoices;
    8070:	f884 5bf0 	strb.w	r5, [r4, #3056]	; 0xbf0
    8074:	f00e fb2c 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    8078:	2300      	movs	r3, #0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    807a:	f8d4 1c88 	ldr.w	r1, [r4, #3208]	; 0xc88
    807e:	6083      	str	r3, [r0, #8]
    8080:	6103      	str	r3, [r0, #16]
    8082:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    8084:	4ba9      	ldr	r3, [pc, #676]	; (832c <setup+0x914>)
        _audiomixer(audiomixer),
    8086:	f8c0 800c 	str.w	r8, [r0, #12]
        _audioplayarray(audioplayarray), 
    808a:	6003      	str	r3, [r0, #0]
        _audioenvelop(audioenvelop),
    808c:	4ba8      	ldr	r3, [pc, #672]	; (8330 <setup+0x918>)
    808e:	9003      	str	r0, [sp, #12]
    8090:	6043      	str	r3, [r0, #4]
        _mixerChannel(mixerChannel)
    8092:	2301      	movs	r3, #1
    8094:	7503      	strb	r3, [r0, #20]
    8096:	f8d4 3c8c 	ldr.w	r3, [r4, #3212]	; 0xc8c
    809a:	4299      	cmp	r1, r3
    809c:	f000 828e 	beq.w	85bc <setup+0xba4>
    80a0:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    80a4:	f8c4 1c88 	str.w	r1, [r4, #3208]	; 0xc88
        _numVoices++;
    80a8:	f894 5c80 	ldrb.w	r5, [r4, #3200]	; 0xc80
        if (numVoices > _numVoices)
    80ac:	f894 ad30 	ldrb.w	sl, [r4, #3376]	; 0xd30
    80b0:	3501      	adds	r5, #1
    80b2:	b2ed      	uxtb	r5, r5
    80b4:	4555      	cmp	r5, sl
    80b6:	f884 5c80 	strb.w	r5, [r4, #3200]	; 0xc80
    80ba:	f240 811b 	bls.w	82f4 <setup+0x8dc>
              activeVoices[i] = 255;
    80be:	eba5 090a 	sub.w	r9, r5, sl
    80c2:	f50a 6052 	add.w	r0, sl, #3360	; 0xd20
    80c6:	21ff      	movs	r1, #255	; 0xff
    80c8:	464a      	mov	r2, r9
    80ca:	4420      	add	r0, r4
    80cc:	f01a fa08 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    80d0:	f20a 304d 	addw	r0, sl, #845	; 0x34d
    80d4:	ea4f 0289 	mov.w	r2, r9, lsl #2
    80d8:	2100      	movs	r1, #0
    80da:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    80de:	f01a f9ff 	bl	224e0 <memset>
  _samplers[11].addVoice(sound11, mix1_c, 2, envelope11);
    80e2:	4b94      	ldr	r3, [pc, #592]	; (8334 <setup+0x91c>)
    80e4:	4994      	ldr	r1, [pc, #592]	; (8338 <setup+0x920>)
    80e6:	4a95      	ldr	r2, [pc, #596]	; (833c <setup+0x924>)
    80e8:	4895      	ldr	r0, [pc, #596]	; (8340 <setup+0x928>)
        _numVoices = numVoices;
    80ea:	f884 5d30 	strb.w	r5, [r4, #3376]	; 0xd30
    80ee:	9300      	str	r3, [sp, #0]
    80f0:	2302      	movs	r3, #2
    80f2:	f7fe fd53 	bl	6b9c <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)>
        audiovoice<TAudioPlay> *voice = new audiovoice<TAudioPlay>(&audioplayarrayresmp, &envelope, &mixer, mixerChannel);
    80f6:	2018      	movs	r0, #24
    80f8:	f00e faea 	bl	166d0 <operator new(unsigned int)>
        _mixerChannel(mixerChannel)
    80fc:	2300      	movs	r3, #0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
    80fe:	f8d4 1f08 	ldr.w	r1, [r4, #3848]	; 0xf08
    8102:	6083      	str	r3, [r0, #8]
    8104:	6103      	str	r3, [r0, #16]
    8106:	7583      	strb	r3, [r0, #22]
        _audioplayarray(audioplayarray), 
    8108:	4b8e      	ldr	r3, [pc, #568]	; (8344 <setup+0x92c>)
        _audiomixer(audiomixer),
    810a:	f8c0 800c 	str.w	r8, [r0, #12]
        _audioplayarray(audioplayarray), 
    810e:	6003      	str	r3, [r0, #0]
        _audioenvelop(audioenvelop),
    8110:	4b8d      	ldr	r3, [pc, #564]	; (8348 <setup+0x930>)
    8112:	9003      	str	r0, [sp, #12]
    8114:	6043      	str	r3, [r0, #4]
        _mixerChannel(mixerChannel)
    8116:	2303      	movs	r3, #3
    8118:	7503      	strb	r3, [r0, #20]
    811a:	f8d4 3f0c 	ldr.w	r3, [r4, #3852]	; 0xf0c
    811e:	4299      	cmp	r1, r3
    8120:	f000 8242 	beq.w	85a8 <setup+0xb90>
    8124:	f841 0b04 	str.w	r0, [r1], #4
	    ++this->_M_impl._M_finish;
    8128:	f8c4 1f08 	str.w	r1, [r4, #3848]	; 0xf08
        _numVoices++;
    812c:	f894 5f00 	ldrb.w	r5, [r4, #3840]	; 0xf00
        if (numVoices > _numVoices)
    8130:	f894 afb0 	ldrb.w	sl, [r4, #4016]	; 0xfb0
    8134:	3501      	adds	r5, #1
    8136:	b2ed      	uxtb	r5, r5
    8138:	4555      	cmp	r5, sl
    813a:	f884 5f00 	strb.w	r5, [r4, #3840]	; 0xf00
    813e:	f240 80c1 	bls.w	82c4 <setup+0x8ac>
              activeVoices[i] = 255;
    8142:	eba5 090a 	sub.w	r9, r5, sl
    8146:	f50a 607a 	add.w	r0, sl, #4000	; 0xfa0
    814a:	21ff      	movs	r1, #255	; 0xff
    814c:	464a      	mov	r2, r9
    814e:	4420      	add	r0, r4
    8150:	f01a f9c6 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    8154:	f20a 30ed 	addw	r0, sl, #1005	; 0x3ed
    8158:	ea4f 0289 	mov.w	r2, r9, lsl #2
    815c:	2100      	movs	r1, #0
    815e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    8162:	f01a f9bd 	bl	224e0 <memset>
        _numVoices = numVoices;
    8166:	f884 5fb0 	strb.w	r5, [r4, #4016]	; 0xfb0
  _samplers[13].addVoice(sound13, mix1_d, 0, envelope13);
    816a:	4b78      	ldr	r3, [pc, #480]	; (834c <setup+0x934>)
    816c:	4c78      	ldr	r4, [pc, #480]	; (8350 <setup+0x938>)
    816e:	9300      	str	r3, [sp, #0]
    8170:	2300      	movs	r3, #0
    8172:	4622      	mov	r2, r4
    8174:	4977      	ldr	r1, [pc, #476]	; (8354 <setup+0x93c>)
    8176:	4878      	ldr	r0, [pc, #480]	; (8358 <setup+0x940>)
    8178:	f7fe fd10 	bl	6b9c <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)>
  _samplers[0].addVoice(sound0, mix1_d, 2, envelope0);  //prev
    817c:	4b77      	ldr	r3, [pc, #476]	; (835c <setup+0x944>)
    817e:	4622      	mov	r2, r4
    8180:	4977      	ldr	r1, [pc, #476]	; (8360 <setup+0x948>)
    8182:	9300      	str	r3, [sp, #0]
    8184:	2302      	movs	r3, #2
    8186:	4877      	ldr	r0, [pc, #476]	; (8364 <setup+0x94c>)
    8188:	f7fe fd08 	bl	6b9c <basesampler<AudioPlayArrayResmp, audiosample>::addVoice(AudioPlayArrayResmp&, AudioMixer4&, unsigned char, AudioEffectEnvelope&)>
    818c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    8190:	4875      	ldr	r0, [pc, #468]	; (8368 <setup+0x950>)
		}
		pulse_width = n * 4294967296.0f;
	}
	void begin(short t_type) {
		phase_offset = 0;
		tone_type = t_type;
    8192:	2201      	movs	r2, #1
    8194:	4975      	ldr	r1, [pc, #468]	; (836c <setup+0x954>)
    8196:	e9c7 3306 	strd	r3, r3, [r7, #24]
    819a:	e9c7 3308 	strd	r3, r3, [r7, #32]
    819e:	e9c6 3306 	strd	r3, r3, [r6, #24]
    81a2:	e9c6 3308 	strd	r3, r3, [r6, #32]
    81a6:	e9c8 3306 	strd	r3, r3, [r8, #24]
    81aa:	e9c8 3308 	strd	r3, r3, [r8, #32]
    81ae:	e9c4 3306 	strd	r3, r3, [r4, #24]
    81b2:	e9c4 3308 	strd	r3, r3, [r4, #32]
    81b6:	e9c0 3306 	strd	r3, r3, [r0, #24]
    81ba:	e9c0 3308 	strd	r3, r3, [r0, #32]
  AudioInterrupts();
    81be:	2440      	movs	r4, #64	; 0x40
		if (attack_count == 0) attack_count = 1;
    81c0:	4b6b      	ldr	r3, [pc, #428]	; (8370 <setup+0x958>)
    81c2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    81c6:	f8c0 4108 	str.w	r4, [r0, #264]	; 0x108
		magnitude = n * 65536.0f;
    81ca:	f644 44cc 	movw	r4, #19660	; 0x4ccc
		tone_type = t_type;
    81ce:	864a      	strh	r2, [r1, #50]	; 0x32
    81d0:	855a      	strh	r2, [r3, #42]	; 0x2a
		sustain_mult = level * 1073741824.0f;
    81d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    81d6:	4867      	ldr	r0, [pc, #412]	; (8374 <setup+0x95c>)
		magnitude = n * 65536.0f;
    81d8:	624c      	str	r4, [r1, #36]	; 0x24
		decay_count = milliseconds2count(milliseconds);
    81da:	f44f 740a 	mov.w	r4, #552	; 0x228
		phase_increment = freq * (4294967296.0f / AUDIO_SAMPLE_RATE_EXACT);
    81de:	61c8      	str	r0, [r1, #28]
		sustain_mult = level * 1073741824.0f;
    81e0:	631a      	str	r2, [r3, #48]	; 0x30
		release_count = milliseconds2count(milliseconds);
    81e2:	f240 424f 	movw	r2, #1103	; 0x44f
		phase_offset = angle * (float)(4294967296.0 / 360.0);
    81e6:	4864      	ldr	r0, [pc, #400]	; (8378 <setup+0x960>)
		decay_count = milliseconds2count(milliseconds);
    81e8:	85dc      	strh	r4, [r3, #46]	; 0x2e
  SMP.bpm = 100;
    81ea:	2464      	movs	r4, #100	; 0x64
    81ec:	6208      	str	r0, [r1, #32]
		release_count = milliseconds2count(milliseconds);
    81ee:	869a      	strh	r2, [r3, #52]	; 0x34
  autoLoad();
    81f0:	f7fe fb62 	bl	68b8 <autoLoad()>
  SMP.bpm = 100;
    81f4:	4b61      	ldr	r3, [pc, #388]	; (837c <setup+0x964>)
		return beginCycles(funct, cycles);
    81f6:	4a62      	ldr	r2, [pc, #392]	; (8380 <setup+0x968>)
    81f8:	4962      	ldr	r1, [pc, #392]	; (8384 <setup+0x96c>)
    81fa:	4863      	ldr	r0, [pc, #396]	; (8388 <setup+0x970>)
    81fc:	60dc      	str	r4, [r3, #12]
    81fe:	f00d f907 	bl	15410 <IntervalTimer::beginCycles(void (*)(), unsigned long)>
  multiresponseButton1.setSingleClickCallback(&buttonCallbackFunction, (void*)"1");
    8202:	4a62      	ldr	r2, [pc, #392]	; (838c <setup+0x974>)
    8204:	4962      	ldr	r1, [pc, #392]	; (8390 <setup+0x978>)
    8206:	4863      	ldr	r0, [pc, #396]	; (8394 <setup+0x97c>)
    8208:	f00c fa78 	bl	146fc <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton1.setLongPressCallback(&buttonCallbackFunction, (void*)"2");
    820c:	4a62      	ldr	r2, [pc, #392]	; (8398 <setup+0x980>)
    820e:	4960      	ldr	r1, [pc, #384]	; (8390 <setup+0x978>)
    8210:	4860      	ldr	r0, [pc, #384]	; (8394 <setup+0x97c>)
    8212:	f00c fa6b 	bl	146ec <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton1.setDoubleClickCallback(&buttonCallbackFunction, (void*)"3");
    8216:	4a61      	ldr	r2, [pc, #388]	; (839c <setup+0x984>)
    8218:	495d      	ldr	r1, [pc, #372]	; (8390 <setup+0x978>)
    821a:	485e      	ldr	r0, [pc, #376]	; (8394 <setup+0x97c>)
    821c:	f00c fa6a 	bl	146f4 <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton1.setReleasedCallback(&buttonCallbackFunction, (void*)"a");
    8220:	4a5f      	ldr	r2, [pc, #380]	; (83a0 <setup+0x988>)
    8222:	495b      	ldr	r1, [pc, #364]	; (8390 <setup+0x978>)
    8224:	485b      	ldr	r0, [pc, #364]	; (8394 <setup+0x97c>)
    8226:	f00c fa5d 	bl	146e4 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton1.setPushedCallback(&buttonCallbackFunction, (void*)"y");
    822a:	4a5e      	ldr	r2, [pc, #376]	; (83a4 <setup+0x98c>)
    822c:	4958      	ldr	r1, [pc, #352]	; (8390 <setup+0x978>)
    822e:	4859      	ldr	r0, [pc, #356]	; (8394 <setup+0x97c>)
    8230:	f00c fa54 	bl	146dc <Switch::setPushedCallback(void (*)(void*), void*)>
  multiresponseButton2.setSingleClickCallback(&buttonCallbackFunction, (void*)"4");
    8234:	4a5c      	ldr	r2, [pc, #368]	; (83a8 <setup+0x990>)
    8236:	4956      	ldr	r1, [pc, #344]	; (8390 <setup+0x978>)
    8238:	485c      	ldr	r0, [pc, #368]	; (83ac <setup+0x994>)
    823a:	f00c fa5f 	bl	146fc <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton2.setLongPressCallback(&buttonCallbackFunction, (void*)"5");
    823e:	4a5c      	ldr	r2, [pc, #368]	; (83b0 <setup+0x998>)
    8240:	4953      	ldr	r1, [pc, #332]	; (8390 <setup+0x978>)
    8242:	485a      	ldr	r0, [pc, #360]	; (83ac <setup+0x994>)
    8244:	f00c fa52 	bl	146ec <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton2.setDoubleClickCallback(&buttonCallbackFunction, (void*)"6");
    8248:	4a5a      	ldr	r2, [pc, #360]	; (83b4 <setup+0x99c>)
    824a:	4951      	ldr	r1, [pc, #324]	; (8390 <setup+0x978>)
    824c:	4857      	ldr	r0, [pc, #348]	; (83ac <setup+0x994>)
    824e:	f00c fa51 	bl	146f4 <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton2.setReleasedCallback(&buttonCallbackFunction, (void*)"b");
    8252:	4a59      	ldr	r2, [pc, #356]	; (83b8 <setup+0x9a0>)
    8254:	494e      	ldr	r1, [pc, #312]	; (8390 <setup+0x978>)
    8256:	4855      	ldr	r0, [pc, #340]	; (83ac <setup+0x994>)
    8258:	f00c fa44 	bl	146e4 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton3.setSingleClickCallback(&buttonCallbackFunction, (void*)"7");
    825c:	4a57      	ldr	r2, [pc, #348]	; (83bc <setup+0x9a4>)
    825e:	494c      	ldr	r1, [pc, #304]	; (8390 <setup+0x978>)
    8260:	4857      	ldr	r0, [pc, #348]	; (83c0 <setup+0x9a8>)
    8262:	f00c fa4b 	bl	146fc <Switch::setSingleClickCallback(void (*)(void*), void*)>
  multiresponseButton3.setLongPressCallback(&buttonCallbackFunction, (void*)"8");
    8266:	4a57      	ldr	r2, [pc, #348]	; (83c4 <setup+0x9ac>)
    8268:	4949      	ldr	r1, [pc, #292]	; (8390 <setup+0x978>)
    826a:	4855      	ldr	r0, [pc, #340]	; (83c0 <setup+0x9a8>)
    826c:	f00c fa3e 	bl	146ec <Switch::setLongPressCallback(void (*)(void*), void*)>
  multiresponseButton3.setDoubleClickCallback(&buttonCallbackFunction, (void*)"9");
    8270:	4a55      	ldr	r2, [pc, #340]	; (83c8 <setup+0x9b0>)
    8272:	4947      	ldr	r1, [pc, #284]	; (8390 <setup+0x978>)
    8274:	4852      	ldr	r0, [pc, #328]	; (83c0 <setup+0x9a8>)
    8276:	f00c fa3d 	bl	146f4 <Switch::setDoubleClickCallback(void (*)(void*), void*)>
  multiresponseButton3.setReleasedCallback(&buttonCallbackFunction, (void*)"c");
    827a:	4a54      	ldr	r2, [pc, #336]	; (83cc <setup+0x9b4>)
    827c:	4944      	ldr	r1, [pc, #272]	; (8390 <setup+0x978>)
    827e:	4850      	ldr	r0, [pc, #320]	; (83c0 <setup+0x9a8>)
    8280:	f00c fa30 	bl	146e4 <Switch::setReleasedCallback(void (*)(void*), void*)>
  multiresponseButton3.setPushedCallback(&buttonCallbackFunction, (void*)"x");
    8284:	4a52      	ldr	r2, [pc, #328]	; (83d0 <setup+0x9b8>)
    8286:	4942      	ldr	r1, [pc, #264]	; (8390 <setup+0x978>)
    8288:	484d      	ldr	r0, [pc, #308]	; (83c0 <setup+0x9a8>)
}
    828a:	b005      	add	sp, #20
    828c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  multiresponseButton3.setPushedCallback(&buttonCallbackFunction, (void*)"x");
    8290:	f00c ba24 	b.w	146dc <Switch::setPushedCallback(void (*)(void*), void*)>
        else if (numVoices < _numVoices) {
    8294:	f4bf ad26 	bcs.w	7ce4 <setup+0x2cc>
              activeVoices[i] = 255;
    8298:	eba8 0906 	sub.w	r9, r8, r6
    829c:	f206 10e1 	addw	r0, r6, #481	; 0x1e1
    82a0:	eba6 0508 	sub.w	r5, r6, r8
    82a4:	21ff      	movs	r1, #255	; 0xff
    82a6:	464a      	mov	r2, r9
    82a8:	4420      	add	r0, r4
    82aa:	f01a f919 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    82ae:	f105 007e 	add.w	r0, r5, #126	; 0x7e
    82b2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    82b6:	2100      	movs	r1, #0
    82b8:	4440      	add	r0, r8
    82ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    82be:	f01a f90f 	bl	224e0 <memset>
    82c2:	e50f      	b.n	7ce4 <setup+0x2cc>
        else if (numVoices < _numVoices) {
    82c4:	f4bf af4f 	bcs.w	8166 <setup+0x74e>
              activeVoices[i] = 255;
    82c8:	ebaa 0b05 	sub.w	fp, sl, r5
    82cc:	f605 70a1 	addw	r0, r5, #4001	; 0xfa1
    82d0:	eba5 090a 	sub.w	r9, r5, sl
    82d4:	21ff      	movs	r1, #255	; 0xff
    82d6:	465a      	mov	r2, fp
    82d8:	4420      	add	r0, r4
    82da:	f01a f901 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    82de:	f209 30ee 	addw	r0, r9, #1006	; 0x3ee
    82e2:	ea4f 028b 	mov.w	r2, fp, lsl #2
    82e6:	2100      	movs	r1, #0
    82e8:	4450      	add	r0, sl
    82ea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    82ee:	f01a f8f7 	bl	224e0 <memset>
    82f2:	e738      	b.n	8166 <setup+0x74e>
        else if (numVoices < _numVoices) {
    82f4:	f4bf aef5 	bcs.w	80e2 <setup+0x6ca>
              activeVoices[i] = 255;
    82f8:	ebaa 0b05 	sub.w	fp, sl, r5
    82fc:	f605 5021 	addw	r0, r5, #3361	; 0xd21
    8300:	eba5 090a 	sub.w	r9, r5, sl
    8304:	21ff      	movs	r1, #255	; 0xff
    8306:	465a      	mov	r2, fp
    8308:	4420      	add	r0, r4
    830a:	f01a f8e9 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    830e:	f209 304e 	addw	r0, r9, #846	; 0x34e
    8312:	ea4f 028b 	mov.w	r2, fp, lsl #2
    8316:	2100      	movs	r1, #0
    8318:	4450      	add	r0, sl
    831a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    831e:	f01a f8df 	bl	224e0 <memset>
    8322:	e6de      	b.n	80e2 <setup+0x6ca>
    8324:	2000bc00 	.word	0x2000bc00
    8328:	20006b7c 	.word	0x20006b7c
    832c:	2000bacc 	.word	0x2000bacc
    8330:	200068dc 	.word	0x200068dc
    8334:	20006914 	.word	0x20006914
    8338:	2000bae8 	.word	0x2000bae8
    833c:	20006f60 	.word	0x20006f60
    8340:	200063dc 	.word	0x200063dc
    8344:	2000bb04 	.word	0x2000bb04
    8348:	2000694c 	.word	0x2000694c
    834c:	20006984 	.word	0x20006984
    8350:	20006f98 	.word	0x20006f98
    8354:	2000bb20 	.word	0x2000bb20
    8358:	2000665c 	.word	0x2000665c
    835c:	2000686c 	.word	0x2000686c
    8360:	2000ba94 	.word	0x2000ba94
    8364:	2000561c 	.word	0x2000561c
    8368:	20006fd0 	.word	0x20006fd0
    836c:	2000c794 	.word	0x2000c794
    8370:	200069bc 	.word	0x200069bc
    8374:	00d00d01 	.word	0x00d00d01
    8378:	471c7200 	.word	0x471c7200
    837c:	20003294 	.word	0x20003294
    8380:	0036ee7f 	.word	0x0036ee7f
    8384:	000011d1 	.word	0x000011d1
    8388:	20003c90 	.word	0x20003c90
    838c:	20000a04 	.word	0x20000a04
    8390:	00000461 	.word	0x00000461
    8394:	20007008 	.word	0x20007008
    8398:	20003050 	.word	0x20003050
    839c:	20000a0c 	.word	0x20000a0c
    83a0:	20000a00 	.word	0x20000a00
    83a4:	20000a08 	.word	0x20000a08
    83a8:	2000305c 	.word	0x2000305c
    83ac:	20007064 	.word	0x20007064
    83b0:	20000a14 	.word	0x20000a14
    83b4:	20000a18 	.word	0x20000a18
    83b8:	20000a10 	.word	0x20000a10
    83bc:	20000a1c 	.word	0x20000a1c
    83c0:	200070c0 	.word	0x200070c0
    83c4:	20002ffc 	.word	0x20002ffc
    83c8:	20000a20 	.word	0x20000a20
    83cc:	20001800 	.word	0x20001800
    83d0:	20002468 	.word	0x20002468
        else if (numVoices < _numVoices) {
    83d4:	f4bf ae4b 	bcs.w	806e <setup+0x656>
              activeVoices[i] = 255;
    83d8:	ebaa 0b05 	sub.w	fp, sl, r5
    83dc:	f605 30e1 	addw	r0, r5, #3041	; 0xbe1
    83e0:	eba5 090a 	sub.w	r9, r5, sl
    83e4:	21ff      	movs	r1, #255	; 0xff
    83e6:	465a      	mov	r2, fp
    83e8:	4420      	add	r0, r4
    83ea:	f01a f879 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    83ee:	f209 20fe 	addw	r0, r9, #766	; 0x2fe
    83f2:	ea4f 028b 	mov.w	r2, fp, lsl #2
    83f6:	2100      	movs	r1, #0
    83f8:	4450      	add	r0, sl
    83fa:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    83fe:	f01a f86f 	bl	224e0 <memset>
    8402:	e634      	b.n	806e <setup+0x656>
        else if (numVoices < _numVoices) {
    8404:	f4bf adf8 	bcs.w	7ff8 <setup+0x5e0>
              activeVoices[i] = 255;
    8408:	eba9 0a05 	sub.w	sl, r9, r5
    840c:	f605 20a1 	addw	r0, r5, #2721	; 0xaa1
    8410:	eba5 0809 	sub.w	r8, r5, r9
    8414:	21ff      	movs	r1, #255	; 0xff
    8416:	4652      	mov	r2, sl
    8418:	4420      	add	r0, r4
    841a:	f01a f861 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    841e:	f208 20ae 	addw	r0, r8, #686	; 0x2ae
    8422:	ea4f 028a 	mov.w	r2, sl, lsl #2
    8426:	2100      	movs	r1, #0
    8428:	4448      	add	r0, r9
    842a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    842e:	f01a f857 	bl	224e0 <memset>
    8432:	e5e1      	b.n	7ff8 <setup+0x5e0>
        else if (numVoices < _numVoices) {
    8434:	f4bf ad79 	bcs.w	7f2a <setup+0x512>
              activeVoices[i] = 255;
    8438:	eba9 0a05 	sub.w	sl, r9, r5
    843c:	f605 1061 	addw	r0, r5, #2401	; 0x961
    8440:	eba5 0809 	sub.w	r8, r5, r9
    8444:	21ff      	movs	r1, #255	; 0xff
    8446:	4652      	mov	r2, sl
    8448:	4420      	add	r0, r4
    844a:	f01a f849 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    844e:	f208 205e 	addw	r0, r8, #606	; 0x25e
    8452:	ea4f 028a 	mov.w	r2, sl, lsl #2
    8456:	2100      	movs	r1, #0
    8458:	4448      	add	r0, r9
    845a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    845e:	f01a f83f 	bl	224e0 <memset>
    8462:	e562      	b.n	7f2a <setup+0x512>
        else if (numVoices < _numVoices) {
    8464:	f4bf ad28 	bcs.w	7eb8 <setup+0x4a0>
              activeVoices[i] = 255;
    8468:	eba9 0a05 	sub.w	sl, r9, r5
    846c:	f605 0021 	addw	r0, r5, #2081	; 0x821
    8470:	eba5 0809 	sub.w	r8, r5, r9
    8474:	21ff      	movs	r1, #255	; 0xff
    8476:	4652      	mov	r2, sl
    8478:	4420      	add	r0, r4
    847a:	f01a f831 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    847e:	f208 200e 	addw	r0, r8, #526	; 0x20e
    8482:	ea4f 028a 	mov.w	r2, sl, lsl #2
    8486:	2100      	movs	r1, #0
    8488:	4448      	add	r0, r9
    848a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    848e:	f01a f827 	bl	224e0 <memset>
    8492:	e511      	b.n	7eb8 <setup+0x4a0>
        else if (numVoices < _numVoices) {
    8494:	f4bf acd7 	bcs.w	7e46 <setup+0x42e>
              activeVoices[i] = 255;
    8498:	eba9 0a05 	sub.w	sl, r9, r5
    849c:	f205 60e1 	addw	r0, r5, #1761	; 0x6e1
    84a0:	eba5 0809 	sub.w	r8, r5, r9
    84a4:	21ff      	movs	r1, #255	; 0xff
    84a6:	4652      	mov	r2, sl
    84a8:	4420      	add	r0, r4
    84aa:	f01a f819 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    84ae:	f508 70df 	add.w	r0, r8, #446	; 0x1be
    84b2:	ea4f 028a 	mov.w	r2, sl, lsl #2
    84b6:	2100      	movs	r1, #0
    84b8:	4448      	add	r0, r9
    84ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    84be:	f01a f80f 	bl	224e0 <memset>
    84c2:	e4c0      	b.n	7e46 <setup+0x42e>
        else if (numVoices < _numVoices) {
    84c4:	f4bf ac86 	bcs.w	7dd4 <setup+0x3bc>
              activeVoices[i] = 255;
    84c8:	eba8 0905 	sub.w	r9, r8, r5
    84cc:	f205 50a1 	addw	r0, r5, #1441	; 0x5a1
    84d0:	eba5 0608 	sub.w	r6, r5, r8
    84d4:	21ff      	movs	r1, #255	; 0xff
    84d6:	464a      	mov	r2, r9
    84d8:	4420      	add	r0, r4
    84da:	f01a f801 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    84de:	f506 70b7 	add.w	r0, r6, #366	; 0x16e
    84e2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    84e6:	2100      	movs	r1, #0
    84e8:	4440      	add	r0, r8
    84ea:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    84ee:	f019 fff7 	bl	224e0 <memset>
    84f2:	e46f      	b.n	7dd4 <setup+0x3bc>
        else if (numVoices < _numVoices) {
    84f4:	f4bf ac36 	bcs.w	7d64 <setup+0x34c>
              activeVoices[i] = 255;
    84f8:	eba8 0905 	sub.w	r9, r8, r5
    84fc:	f205 4061 	addw	r0, r5, #1121	; 0x461
    8500:	eba5 0608 	sub.w	r6, r5, r8
    8504:	21ff      	movs	r1, #255	; 0xff
    8506:	464a      	mov	r2, r9
    8508:	4420      	add	r0, r4
    850a:	f019 ffe9 	bl	224e0 <memset>
              voice_noteOff[i] = 0;
    850e:	f506 708f 	add.w	r0, r6, #286	; 0x11e
    8512:	ea4f 0289 	mov.w	r2, r9, lsl #2
    8516:	2100      	movs	r1, #0
    8518:	4440      	add	r0, r8
    851a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    851e:	f019 ffdf 	bl	224e0 <memset>
    8522:	e41f      	b.n	7d64 <setup+0x34c>
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    8524:	4b28      	ldr	r3, [pc, #160]	; (85c8 <setup+0xbb0>)
    CWS2812SerialController() { pserial = NULL; }
    8526:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        m_pNext = NULL;
    852a:	e9c3 2201 	strd	r2, r2, [r3, #4]
    852e:	60d8      	str	r0, [r3, #12]
    8530:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
    CLEDController() : m_Data(NULL), m_ColorCorrection(UncorrectedColor), m_ColorTemperature(UncorrectedTemperature), m_DitherMode(BINARY_DITHER), m_nLeds(0) {
    8534:	615a      	str	r2, [r3, #20]
        if(m_pHead==NULL) { m_pHead = this; }
    8536:	4a25      	ldr	r2, [pc, #148]	; (85cc <setup+0xbb4>)
    8538:	6118      	str	r0, [r3, #16]
    853a:	6810      	ldr	r0, [r2, #0]
    853c:	b160      	cbz	r0, 8558 <setup+0xb40>
        if(m_pTail != NULL) { m_pTail->m_pNext = this; }
    853e:	4a24      	ldr	r2, [pc, #144]	; (85d0 <setup+0xbb8>)
    8540:	6810      	ldr	r0, [r2, #0]
    8542:	b100      	cbz	r0, 8546 <setup+0xb2e>
    8544:	6083      	str	r3, [r0, #8]
    8546:	4823      	ldr	r0, [pc, #140]	; (85d4 <setup+0xbbc>)
        m_pTail = this;
    8548:	6013      	str	r3, [r2, #0]
		static CWS2812SerialController<DATA_PIN,RGB_ORDER> controller;
    854a:	2201      	movs	r2, #1
    854c:	6018      	str	r0, [r3, #0]
    854e:	2000      	movs	r0, #0
    8550:	600a      	str	r2, [r1, #0]
    8552:	6198      	str	r0, [r3, #24]
    8554:	f7ff bab4 	b.w	7ac0 <setup+0xa8>
        if(m_pHead==NULL) { m_pHead = this; }
    8558:	6013      	str	r3, [r2, #0]
    855a:	e7f0      	b.n	853e <setup+0xb26>
	  _M_realloc_insert(end(), __x);
    855c:	aa03      	add	r2, sp, #12
    855e:	481e      	ldr	r0, [pc, #120]	; (85d8 <setup+0xbc0>)
    8560:	f7fe fab2 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8564:	e452      	b.n	7e0c <setup+0x3f4>
    8566:	aa03      	add	r2, sp, #12
    8568:	481c      	ldr	r0, [pc, #112]	; (85dc <setup+0xbc4>)
    856a:	f7fe faad 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    856e:	e486      	b.n	7e7e <setup+0x466>
    8570:	aa03      	add	r2, sp, #12
    8572:	481b      	ldr	r0, [pc, #108]	; (85e0 <setup+0xbc8>)
    8574:	f7fe faa8 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8578:	e4ba      	b.n	7ef0 <setup+0x4d8>
    857a:	aa03      	add	r2, sp, #12
    857c:	4819      	ldr	r0, [pc, #100]	; (85e4 <setup+0xbcc>)
    857e:	f7fe faa3 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8582:	e4ee      	b.n	7f62 <setup+0x54a>
    8584:	aa03      	add	r2, sp, #12
    8586:	4818      	ldr	r0, [pc, #96]	; (85e8 <setup+0xbd0>)
    8588:	f7fe fa9e 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    858c:	f7ff bbce 	b.w	7d2c <setup+0x314>
    8590:	aa03      	add	r2, sp, #12
    8592:	4816      	ldr	r0, [pc, #88]	; (85ec <setup+0xbd4>)
    8594:	f7fe fa98 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    8598:	e400      	b.n	7d9c <setup+0x384>
    859a:	aa03      	add	r2, sp, #12
    859c:	f504 70a2 	add.w	r0, r4, #324	; 0x144
    85a0:	f7fe fa92 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    85a4:	f7ff bb82 	b.w	7cac <setup+0x294>
    85a8:	aa03      	add	r2, sp, #12
    85aa:	4811      	ldr	r0, [pc, #68]	; (85f0 <setup+0xbd8>)
    85ac:	f7fe fa8c 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    85b0:	e5bc      	b.n	812c <setup+0x714>
    85b2:	aa03      	add	r2, sp, #12
    85b4:	480f      	ldr	r0, [pc, #60]	; (85f4 <setup+0xbdc>)
    85b6:	f7fe fa87 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    85ba:	e53b      	b.n	8034 <setup+0x61c>
    85bc:	aa03      	add	r2, sp, #12
    85be:	480e      	ldr	r0, [pc, #56]	; (85f8 <setup+0xbe0>)
    85c0:	f7fe fa82 	bl	6ac8 <void std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> >::_M_realloc_insert<audiovoice<AudioPlayArrayResmp>* const&>(__gnu_cxx::__normal_iterator<audiovoice<AudioPlayArrayResmp>**, std::vector<audiovoice<AudioPlayArrayResmp>*, std::allocator<audiovoice<AudioPlayArrayResmp>*> > >, audiovoice<AudioPlayArrayResmp>* const&)>
    85c4:	e570      	b.n	80a8 <setup+0x690>
    85c6:	bf00      	nop
    85c8:	200052e0 	.word	0x200052e0
    85cc:	2000512c 	.word	0x2000512c
    85d0:	20005130 	.word	0x20005130
    85d4:	200014ac 	.word	0x200014ac
    85d8:	20005c60 	.word	0x20005c60
    85dc:	20005da0 	.word	0x20005da0
    85e0:	20005ee0 	.word	0x20005ee0
    85e4:	20006020 	.word	0x20006020
    85e8:	200059e0 	.word	0x200059e0
    85ec:	20005b20 	.word	0x20005b20
    85f0:	20006520 	.word	0x20006520
    85f4:	20006160 	.word	0x20006160
    85f8:	200062a0 	.word	0x200062a0

000085fc <loadPack()>:
void loadPack() {
    85fc:	b530      	push	{r4, r5, lr}
    85fe:	b09d      	sub	sp, #116	; 0x74
  Serial.println("Loading SamplePack #" + String(SMP.pack));
    8600:	4d3e      	ldr	r5, [pc, #248]	; (86fc <loadPack()+0x100>)
	StringSumHelper(const char *p) : String(p) {}
    8602:	493f      	ldr	r1, [pc, #252]	; (8700 <loadPack()+0x104>)
  for (int z = 1; z <= maxFiles; z++) {
    8604:	2401      	movs	r4, #1
    8606:	a80e      	add	r0, sp, #56	; 0x38
    8608:	f00d f9ae 	bl	15968 <String::String(char const*)>
  Serial.println("Loading SamplePack #" + String(SMP.pack));
    860c:	220a      	movs	r2, #10
    860e:	6a29      	ldr	r1, [r5, #32]
    8610:	a801      	add	r0, sp, #4
    8612:	f00d f9bd 	bl	15990 <String::String(int, unsigned char)>
    8616:	a901      	add	r1, sp, #4
    8618:	a80e      	add	r0, sp, #56	; 0x38
    861a:	f00d fa5f 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    861e:	4601      	mov	r1, r0
	size_t println(const String &s)			{ return print(s) + println(); }
    8620:	4838      	ldr	r0, [pc, #224]	; (8704 <loadPack()+0x108>)
    8622:	f00c fff5 	bl	15610 <Print::print(String const&)>
    8626:	4837      	ldr	r0, [pc, #220]	; (8704 <loadPack()+0x108>)
    8628:	f00d f824 	bl	15674 <Print::println()>
    862c:	a801      	add	r0, sp, #4
    862e:	f00d f95f 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    8632:	a80e      	add	r0, sp, #56	; 0x38
    8634:	f00d f95c 	bl	158f0 <String::~String()>
  drawNoSD();
    8638:	f7fb fbbc 	bl	3db4 <drawNoSD()>
  FastLED.clear();
    863c:	2100      	movs	r1, #0
    863e:	4832      	ldr	r0, [pc, #200]	; (8708 <loadPack()+0x10c>)
    8640:	f002 fca4 	bl	af8c <CFastLED::clear(bool)>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    8644:	2204      	movs	r2, #4
    8646:	2100      	movs	r1, #0
    8648:	f105 0020 	add.w	r0, r5, #32
    864c:	f00d ff10 	bl	16470 <eeprom_write_block>
    loadSample(SMP.pack, z);
    8650:	4621      	mov	r1, r4
  for (int z = 1; z <= maxFiles; z++) {
    8652:	3401      	adds	r4, #1
    loadSample(SMP.pack, z);
    8654:	6a28      	ldr	r0, [r5, #32]
    8656:	f7ff f869 	bl	772c <loadSample(int, int)>
  for (int z = 1; z <= maxFiles; z++) {
    865a:	2c09      	cmp	r4, #9
    865c:	d1f8      	bne.n	8650 <loadPack()+0x54>
  sprintf(OUTPUTf, "%d/%d.wav", SMP.pack, 1);
    865e:	2301      	movs	r3, #1
    8660:	6a2a      	ldr	r2, [r5, #32]
    8662:	492a      	ldr	r1, [pc, #168]	; (870c <loadPack()+0x110>)
    8664:	a801      	add	r0, sp, #4
    8666:	f019 fa8f 	bl	21b88 <sprintf>
    return m_fVol ? m_fVol->exists(path) :
    866a:	4b29      	ldr	r3, [pc, #164]	; (8710 <loadPack()+0x114>)
    866c:	f8d3 0484 	ldr.w	r0, [r3, #1156]	; 0x484
    8670:	b1f0      	cbz	r0, 86b0 <loadPack()+0xb4>
    8672:	2300      	movs	r3, #0
    8674:	4601      	mov	r1, r0
    8676:	aa01      	add	r2, sp, #4
    8678:	a80e      	add	r0, sp, #56	; 0x38
    867a:	930e      	str	r3, [sp, #56]	; 0x38
    867c:	f007 f97c 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
  if (SD.exists(OUTPUTf)) {
    8680:	bb10      	cbnz	r0, 86c8 <loadPack()+0xcc>
	void show() { show(m_Scale); }
    8682:	4821      	ldr	r0, [pc, #132]	; (8708 <loadPack()+0x10c>)
    8684:	7801      	ldrb	r1, [r0, #0]
    8686:	f002 fb57 	bl	ad38 <CFastLED::show(unsigned char)>
  unpaintMode = false;
    868a:	2300      	movs	r3, #0
    868c:	4821      	ldr	r0, [pc, #132]	; (8714 <loadPack()+0x118>)
  paintMode = false;
    868e:	4a22      	ldr	r2, [pc, #136]	; (8718 <loadPack()+0x11c>)
  unpaintMode = false;
    8690:	6003      	str	r3, [r0, #0]
  buttonString = "000";
    8692:	4922      	ldr	r1, [pc, #136]	; (871c <loadPack()+0x120>)
    8694:	4822      	ldr	r0, [pc, #136]	; (8720 <loadPack()+0x124>)
  SMP.singleMode = false;
    8696:	602b      	str	r3, [r5, #0]
  paintMode = false;
    8698:	6013      	str	r3, [r2, #0]
  buttonString = "000";
    869a:	f00d f9cd 	bl	15a38 <String::operator=(char const*)>
  if (newMode != currentMode) {
    869e:	4b21      	ldr	r3, [pc, #132]	; (8724 <loadPack()+0x128>)
    86a0:	4821      	ldr	r0, [pc, #132]	; (8728 <loadPack()+0x12c>)
    86a2:	681b      	ldr	r3, [r3, #0]
    86a4:	4283      	cmp	r3, r0
    86a6:	d001      	beq.n	86ac <loadPack()+0xb0>
    86a8:	f7f8 fcac 	bl	1004 <switchMode(Mode*) [clone .part.0]>
}
    86ac:	b01d      	add	sp, #116	; 0x74
    86ae:	bd30      	pop	{r4, r5, pc}
    86b0:	f8d3 1488 	ldr.w	r1, [r3, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    86b4:	2900      	cmp	r1, #0
    86b6:	d0e4      	beq.n	8682 <loadPack()+0x86>
    86b8:	4603      	mov	r3, r0
    86ba:	901a      	str	r0, [sp, #104]	; 0x68
    86bc:	aa01      	add	r2, sp, #4
    86be:	a80e      	add	r0, sp, #56	; 0x38
    86c0:	f005 fa78 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    86c4:	2800      	cmp	r0, #0
    86c6:	d0dc      	beq.n	8682 <loadPack()+0x86>
    86c8:	2464      	movs	r4, #100	; 0x64
    showIcons("samplepack", CRGB(100, 0, 100));
    86ca:	4918      	ldr	r1, [pc, #96]	; (872c <loadPack()+0x130>)
    86cc:	a80e      	add	r0, sp, #56	; 0x38
    86ce:	f00d f94b 	bl	15968 <String::String(char const*)>
    86d2:	f8ad 4000 	strh.w	r4, [sp]
    86d6:	f88d 4002 	strb.w	r4, [sp, #2]
    86da:	a80e      	add	r0, sp, #56	; 0x38
    86dc:	9900      	ldr	r1, [sp, #0]
    86de:	f7fd fa15 	bl	5b0c <showIcons(String, CRGB)>
    86e2:	a80e      	add	r0, sp, #56	; 0x38
    86e4:	f00d f904 	bl	158f0 <String::~String()>
    86e8:	f8ad 4038 	strh.w	r4, [sp, #56]	; 0x38
    86ec:	f88d 403a 	strb.w	r4, [sp, #58]	; 0x3a
    showNumber(SMP.pack, CRGB(100, 0, 100), 0);
    86f0:	2200      	movs	r2, #0
    86f2:	990e      	ldr	r1, [sp, #56]	; 0x38
    86f4:	6a28      	ldr	r0, [r5, #32]
    86f6:	f7fc fcaf 	bl	5058 <showNumber(int, CRGB, int)>
    86fa:	e7c2      	b.n	8682 <loadPack()+0x86>
    86fc:	20003294 	.word	0x20003294
    8700:	20000aa0 	.word	0x20000aa0
    8704:	20003314 	.word	0x20003314
    8708:	200045e8 	.word	0x200045e8
    870c:	20000b4c 	.word	0x20000b4c
    8710:	200045f8 	.word	0x200045f8
    8714:	2000c538 	.word	0x2000c538
    8718:	2000b68c 	.word	0x2000b68c
    871c:	2000092c 	.word	0x2000092c
    8720:	200067ac 	.word	0x200067ac
    8724:	200038c8 	.word	0x200038c8
    8728:	200038e4 	.word	0x200038e4
    872c:	20000bd0 	.word	0x20000bd0

00008730 <loadWav()>:
void loadWav() {
    8730:	b530      	push	{r4, r5, lr}
    8732:	b089      	sub	sp, #36	; 0x24
  Serial.println("Loading Wave :" + String(((SMP.folder - 1) * 100) + SMP.wav));
    8734:	4c1e      	ldr	r4, [pc, #120]	; (87b0 <loadWav()+0x80>)
	StringSumHelper(const char *p) : String(p) {}
    8736:	491f      	ldr	r1, [pc, #124]	; (87b4 <loadWav()+0x84>)
    8738:	2564      	movs	r5, #100	; 0x64
    873a:	a804      	add	r0, sp, #16
    873c:	f00d f914 	bl	15968 <String::String(char const*)>
    8740:	220a      	movs	r2, #10
    8742:	4668      	mov	r0, sp
    8744:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
    8748:	3b01      	subs	r3, #1
    874a:	fb05 1103 	mla	r1, r5, r3, r1
    874e:	f00d f91f 	bl	15990 <String::String(int, unsigned char)>
    8752:	4669      	mov	r1, sp
    8754:	a804      	add	r0, sp, #16
    8756:	f00d f9c1 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    875a:	4601      	mov	r1, r0
    875c:	4816      	ldr	r0, [pc, #88]	; (87b8 <loadWav()+0x88>)
    875e:	f00c ff57 	bl	15610 <Print::print(String const&)>
    8762:	4815      	ldr	r0, [pc, #84]	; (87b8 <loadWav()+0x88>)
    8764:	f00c ff86 	bl	15674 <Print::println()>
    8768:	4668      	mov	r0, sp
    876a:	f00d f8c1 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    876e:	a804      	add	r0, sp, #16
    8770:	f00d f8be 	bl	158f0 <String::~String()>
  loadSample(0, ((SMP.folder - 1) * 100) + SMP.wav);
    8774:	2000      	movs	r0, #0
    8776:	e9d4 1309 	ldrd	r1, r3, [r4, #36]	; 0x24
    877a:	3b01      	subs	r3, #1
    877c:	fb05 1103 	mla	r1, r5, r3, r1
    8780:	f7fe ffd4 	bl	772c <loadSample(int, int)>
  unpaintMode = false;
    8784:	2300      	movs	r3, #0
    8786:	480d      	ldr	r0, [pc, #52]	; (87bc <loadWav()+0x8c>)
  paintMode = false;
    8788:	4a0d      	ldr	r2, [pc, #52]	; (87c0 <loadWav()+0x90>)
  unpaintMode = false;
    878a:	6003      	str	r3, [r0, #0]
  buttonString = "000";
    878c:	490d      	ldr	r1, [pc, #52]	; (87c4 <loadWav()+0x94>)
    878e:	480e      	ldr	r0, [pc, #56]	; (87c8 <loadWav()+0x98>)
  SMP.singleMode = false;
    8790:	6023      	str	r3, [r4, #0]
  paintMode = false;
    8792:	6013      	str	r3, [r2, #0]
  buttonString = "000";
    8794:	f00d f950 	bl	15a38 <String::operator=(char const*)>
  if (newMode != currentMode) {
    8798:	4b0c      	ldr	r3, [pc, #48]	; (87cc <loadWav()+0x9c>)
    879a:	480d      	ldr	r0, [pc, #52]	; (87d0 <loadWav()+0xa0>)
    879c:	681b      	ldr	r3, [r3, #0]
    879e:	4283      	cmp	r3, r0
    87a0:	d001      	beq.n	87a6 <loadWav()+0x76>
    87a2:	f7f8 fc2f 	bl	1004 <switchMode(Mode*) [clone .part.0]>
  SMP.singleMode = true;
    87a6:	2301      	movs	r3, #1
    87a8:	6023      	str	r3, [r4, #0]
}
    87aa:	b009      	add	sp, #36	; 0x24
    87ac:	bd30      	pop	{r4, r5, pc}
    87ae:	bf00      	nop
    87b0:	20003294 	.word	0x20003294
    87b4:	20000a6c 	.word	0x20000a6c
    87b8:	20003314 	.word	0x20003314
    87bc:	2000c538 	.word	0x2000c538
    87c0:	2000b68c 	.word	0x2000b68c
    87c4:	2000092c 	.word	0x2000092c
    87c8:	200067ac 	.word	0x200067ac
    87cc:	200038c8 	.word	0x200038c8
    87d0:	20003c50 	.word	0x20003c50
    87d4:	00000000 	.word	0x00000000

000087d8 <checkMode()>:
void checkMode() {
    87d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  buttonString = String(buttons[1]) + String(buttons[2]) + String(buttons[3]);
    87dc:	4ca6      	ldr	r4, [pc, #664]	; (8a78 <checkMode()+0x2a0>)
void checkMode() {
    87de:	b090      	sub	sp, #64	; 0x40
  buttonString = String(buttons[1]) + String(buttons[2]) + String(buttons[3]);
    87e0:	220a      	movs	r2, #10
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "101") { togglePlay(isPlaying); }
    87e2:	4ea6      	ldr	r6, [pc, #664]	; (8a7c <checkMode()+0x2a4>)
  buttonString = String(buttons[1]) + String(buttons[2]) + String(buttons[3]);
    87e4:	6861      	ldr	r1, [r4, #4]
    87e6:	4668      	mov	r0, sp
    87e8:	f00d f8d2 	bl	15990 <String::String(int, unsigned char)>
	StringSumHelper(const String &s) : String(s) {}
    87ec:	4669      	mov	r1, sp
    87ee:	a808      	add	r0, sp, #32
    87f0:	f00d f860 	bl	158b4 <String::String(String const&)>
    87f4:	220a      	movs	r2, #10
    87f6:	68a1      	ldr	r1, [r4, #8]
    87f8:	a804      	add	r0, sp, #16
    87fa:	f00d f8c9 	bl	15990 <String::String(int, unsigned char)>
    87fe:	a904      	add	r1, sp, #16
    8800:	a808      	add	r0, sp, #32
    8802:	f00d f96b 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    8806:	4605      	mov	r5, r0
    8808:	220a      	movs	r2, #10
    880a:	68e1      	ldr	r1, [r4, #12]
    880c:	a80c      	add	r0, sp, #48	; 0x30
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "101") { togglePlay(isPlaying); }
    880e:	4c9c      	ldr	r4, [pc, #624]	; (8a80 <checkMode()+0x2a8>)
  buttonString = String(buttons[1]) + String(buttons[2]) + String(buttons[3]);
    8810:	f00d f8be 	bl	15990 <String::String(int, unsigned char)>
    8814:	a90c      	add	r1, sp, #48	; 0x30
    8816:	4628      	mov	r0, r5
    8818:	4d9a      	ldr	r5, [pc, #616]	; (8a84 <checkMode()+0x2ac>)
    881a:	f00d f95f 	bl	15adc <operator+(StringSumHelper const&, String const&)>
    881e:	4601      	mov	r1, r0
    8820:	4899      	ldr	r0, [pc, #612]	; (8a88 <checkMode()+0x2b0>)
    8822:	f00d f901 	bl	15a28 <String::operator=(String const&)>
    8826:	a80c      	add	r0, sp, #48	; 0x30
    8828:	f00d f862 	bl	158f0 <String::~String()>
    882c:	a804      	add	r0, sp, #16
    882e:	f00d f85f 	bl	158f0 <String::~String()>
class StringSumHelper : public String
    8832:	a808      	add	r0, sp, #32
    8834:	f00d f85c 	bl	158f0 <String::~String()>
    8838:	4668      	mov	r0, sp
    883a:	f00d f859 	bl	158f0 <String::~String()>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "101") { togglePlay(isPlaying); }
    883e:	6823      	ldr	r3, [r4, #0]
    8840:	42b3      	cmp	r3, r6
    8842:	d036      	beq.n	88b2 <checkMode()+0xda>
    8844:	42ab      	cmp	r3, r5
    8846:	d034      	beq.n	88b2 <checkMode()+0xda>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
    8848:	498f      	ldr	r1, [pc, #572]	; (8a88 <checkMode()+0x2b0>)
    884a:	4890      	ldr	r0, [pc, #576]	; (8a8c <checkMode()+0x2b4>)
    884c:	f00d f95c 	bl	15b08 <String::equals(String const&) const>
  if (oldButtonString != buttonString) {
    8850:	2800      	cmp	r0, #0
    8852:	f000 820b 	beq.w	8c6c <checkMode()+0x494>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "202") clearPage();
    8856:	6823      	ldr	r3, [r4, #0]
    8858:	42b3      	cmp	r3, r6
    885a:	f000 81ed 	beq.w	8c38 <checkMode()+0x460>
    885e:	42ab      	cmp	r3, r5
    8860:	f000 81ea 	beq.w	8c38 <checkMode()+0x460>
  if (currentMode == &velocity && SMP.singleMode && buttonString == "090") {
    8864:	4f8a      	ldr	r7, [pc, #552]	; (8a90 <checkMode()+0x2b8>)
    8866:	42bb      	cmp	r3, r7
    8868:	f000 81f1 	beq.w	8c4e <checkMode()+0x476>
  if (currentMode == &volume && buttonString == "090") {
    886c:	4a89      	ldr	r2, [pc, #548]	; (8a94 <checkMode()+0x2bc>)
    886e:	4293      	cmp	r3, r2
    8870:	f000 821c 	beq.w	8cac <checkMode()+0x4d4>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "099") {
    8874:	42b3      	cmp	r3, r6
    8876:	f000 8137 	beq.w	8ae8 <checkMode()+0x310>
    887a:	42ab      	cmp	r3, r5
    887c:	f000 8134 	beq.w	8ae8 <checkMode()+0x310>
  } else if ((currentMode == &menu) && buttonString == "001") {
    8880:	4f85      	ldr	r7, [pc, #532]	; (8a98 <checkMode()+0x2c0>)
    8882:	42bb      	cmp	r3, r7
    8884:	f000 816a 	beq.w	8b5c <checkMode()+0x384>
  if ((currentMode == &singleMode) && buttonString == "220") {
    8888:	42b3      	cmp	r3, r6
    888a:	f000 8188 	beq.w	8b9e <checkMode()+0x3c6>
  } else if ((currentMode == &set_Wav) && buttonString == "100") {
    888e:	4f83      	ldr	r7, [pc, #524]	; (8a9c <checkMode()+0x2c4>)
    8890:	42bb      	cmp	r3, r7
    8892:	f000 8190 	beq.w	8bb6 <checkMode()+0x3de>
  if ((currentMode == &draw) && buttonString == "220") {
    8896:	42ab      	cmp	r3, r5
    8898:	f000 81a3 	beq.w	8be2 <checkMode()+0x40a>
  } else if ((currentMode == &set_SamplePack) && buttonString == "010") {
    889c:	4f80      	ldr	r7, [pc, #512]	; (8aa0 <checkMode()+0x2c8>)
    889e:	42bb      	cmp	r3, r7
    88a0:	f000 81ab 	beq.w	8bfa <checkMode()+0x422>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    88a4:	42b3      	cmp	r3, r6
    88a6:	d062      	beq.n	896e <checkMode()+0x196>
    88a8:	42ab      	cmp	r3, r5
    88aa:	d060      	beq.n	896e <checkMode()+0x196>
}
    88ac:	b010      	add	sp, #64	; 0x40
    88ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
    88b2:	497c      	ldr	r1, [pc, #496]	; (8aa4 <checkMode()+0x2cc>)
    88b4:	4874      	ldr	r0, [pc, #464]	; (8a88 <checkMode()+0x2b0>)
    88b6:	f00d f943 	bl	15b40 <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "101") { togglePlay(isPlaying); }
    88ba:	2800      	cmp	r0, #0
    88bc:	f040 821d 	bne.w	8cfa <checkMode()+0x522>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "020") { switchMode(&volume); }
    88c0:	6823      	ldr	r3, [r4, #0]
    88c2:	42b3      	cmp	r3, r6
    88c4:	d001      	beq.n	88ca <checkMode()+0xf2>
    88c6:	42ab      	cmp	r3, r5
    88c8:	d1be      	bne.n	8848 <checkMode()+0x70>
    88ca:	4977      	ldr	r1, [pc, #476]	; (8aa8 <checkMode()+0x2d0>)
    88cc:	486e      	ldr	r0, [pc, #440]	; (8a88 <checkMode()+0x2b0>)
    88ce:	f00d f937 	bl	15b40 <String::equals(char const*) const>
    88d2:	2800      	cmp	r0, #0
    88d4:	f040 820d 	bne.w	8cf2 <checkMode()+0x51a>
  if (currentMode == &draw && buttonString == "110") { toggleCopyPaste(); }
    88d8:	6823      	ldr	r3, [r4, #0]
    88da:	42ab      	cmp	r3, r5
    88dc:	f000 81d2 	beq.w	8c84 <checkMode()+0x4ac>
  if ((currentMode == &singleMode) && buttonString == "030") {
    88e0:	42b3      	cmp	r3, r6
    88e2:	d1b1      	bne.n	8848 <checkMode()+0x70>
    88e4:	4971      	ldr	r1, [pc, #452]	; (8aac <checkMode()+0x2d4>)
    88e6:	4868      	ldr	r0, [pc, #416]	; (8a88 <checkMode()+0x2b0>)
    88e8:	f00d f92a 	bl	15b40 <String::equals(char const*) const>
    88ec:	2800      	cmp	r0, #0
    88ee:	f040 8261 	bne.w	8db4 <checkMode()+0x5dc>
  if ((currentMode == &draw) && buttonString == "030") {
    88f2:	6823      	ldr	r3, [r4, #0]
    88f4:	42ab      	cmp	r3, r5
    88f6:	d1a7      	bne.n	8848 <checkMode()+0x70>
    88f8:	496c      	ldr	r1, [pc, #432]	; (8aac <checkMode()+0x2d4>)
    88fa:	4863      	ldr	r0, [pc, #396]	; (8a88 <checkMode()+0x2b0>)
    88fc:	f00d f920 	bl	15b40 <String::equals(char const*) const>
    8900:	2800      	cmp	r0, #0
    8902:	d0a1      	beq.n	8848 <checkMode()+0x70>
    int velo = round(mapf(note[SMP.x][SMP.y][1], 1, 100, 1, 16 * 4));
    8904:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8ae4 <checkMode()+0x30c>
    8908:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    890c:	4a68      	ldr	r2, [pc, #416]	; (8ab0 <checkMode()+0x2d8>)
    890e:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    8912:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    8916:	eeb0 1b43 	vmov.f64	d1, d3
    891a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    891e:	440b      	add	r3, r1
    8920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8924:	ed93 0a01 	vldr	s0, [r3, #4]
    8928:	ed9f 4b4f 	vldr	d4, [pc, #316]	; 8a68 <checkMode()+0x290>
    892c:	ed9f 2b50 	vldr	d2, [pc, #320]	; 8a70 <checkMode()+0x298>
    8930:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    8934:	f001 fe9c 	bl	a670 <mapf(double, double, double, double, double)>
    8938:	feb8 0b40 	vrinta.f64	d0, d0
    893c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
	size_t print(int n)				{ return print((long)n); }
    8940:	485c      	ldr	r0, [pc, #368]	; (8ab4 <checkMode()+0x2dc>)
    8942:	ee17 1a90 	vmov	r1, s15
    8946:	ee17 7a90 	vmov	r7, s15
    894a:	f00c fe87 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    894e:	4859      	ldr	r0, [pc, #356]	; (8ab4 <checkMode()+0x2dc>)
    8950:	f00c fe90 	bl	15674 <Print::println()>
    SMP.singleMode = false;
    8954:	2300      	movs	r3, #0
    switchMode(&velocity);
    8956:	484e      	ldr	r0, [pc, #312]	; (8a90 <checkMode()+0x2b8>)
    SMP.velocity = velo;
    8958:	f8c8 7010 	str.w	r7, [r8, #16]
    SMP.singleMode = false;
    895c:	f8c8 3000 	str.w	r3, [r8]
    switchMode(&velocity);
    8960:	f7fb fd46 	bl	43f0 <switchMode(Mode*)>
		noInterrupts();
    8964:	b672      	cpsid	i
		encoder.position = p;
    8966:	4b54      	ldr	r3, [pc, #336]	; (8ab8 <checkMode()+0x2e0>)
    8968:	64df      	str	r7, [r3, #76]	; 0x4c
		interrupts();
    896a:	b662      	cpsie	i
	}
    896c:	e76c      	b.n	8848 <checkMode()+0x70>
    896e:	4953      	ldr	r1, [pc, #332]	; (8abc <checkMode()+0x2e4>)
    8970:	4845      	ldr	r0, [pc, #276]	; (8a88 <checkMode()+0x2b0>)
    8972:	f00d f8e5 	bl	15b40 <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    8976:	2800      	cmp	r0, #0
    8978:	f040 81b8 	bne.w	8cec <checkMode()+0x514>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "002") { paintMode = true; }
    897c:	6823      	ldr	r3, [r4, #0]
    897e:	42ab      	cmp	r3, r5
    8980:	d001      	beq.n	8986 <checkMode()+0x1ae>
    8982:	42b3      	cmp	r3, r6
    8984:	d149      	bne.n	8a1a <checkMode()+0x242>
    8986:	494e      	ldr	r1, [pc, #312]	; (8ac0 <checkMode()+0x2e8>)
    8988:	483f      	ldr	r0, [pc, #252]	; (8a88 <checkMode()+0x2b0>)
    898a:	f00d f8d9 	bl	15b40 <String::equals(char const*) const>
    898e:	b110      	cbz	r0, 8996 <checkMode()+0x1be>
    8990:	4b4c      	ldr	r3, [pc, #304]	; (8ac4 <checkMode()+0x2ec>)
    8992:	2201      	movs	r2, #1
    8994:	601a      	str	r2, [r3, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "200") {
    8996:	6823      	ldr	r3, [r4, #0]
    8998:	42ab      	cmp	r3, r5
    899a:	d001      	beq.n	89a0 <checkMode()+0x1c8>
    899c:	42b3      	cmp	r3, r6
    899e:	d13c      	bne.n	8a1a <checkMode()+0x242>
    89a0:	4949      	ldr	r1, [pc, #292]	; (8ac8 <checkMode()+0x2f0>)
    89a2:	4839      	ldr	r0, [pc, #228]	; (8a88 <checkMode()+0x2b0>)
    89a4:	f00d f8cc 	bl	15b40 <String::equals(char const*) const>
    89a8:	2800      	cmp	r0, #0
    89aa:	f040 8195 	bne.w	8cd8 <checkMode()+0x500>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "001") { 
    89ae:	6823      	ldr	r3, [r4, #0]
    89b0:	42ab      	cmp	r3, r5
    89b2:	d001      	beq.n	89b8 <checkMode()+0x1e0>
    89b4:	42b3      	cmp	r3, r6
    89b6:	d130      	bne.n	8a1a <checkMode()+0x242>
    89b8:	4944      	ldr	r1, [pc, #272]	; (8acc <checkMode()+0x2f4>)
    89ba:	4833      	ldr	r0, [pc, #204]	; (8a88 <checkMode()+0x2b0>)
    89bc:	f00d f8c0 	bl	15b40 <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "005") {
    89c0:	6823      	ldr	r3, [r4, #0]
    89c2:	42ab      	cmp	r3, r5
    89c4:	d001      	beq.n	89ca <checkMode()+0x1f2>
    89c6:	42b3      	cmp	r3, r6
    89c8:	d127      	bne.n	8a1a <checkMode()+0x242>
    89ca:	4941      	ldr	r1, [pc, #260]	; (8ad0 <checkMode()+0x2f8>)
    89cc:	482e      	ldr	r0, [pc, #184]	; (8a88 <checkMode()+0x2b0>)
    89ce:	f00d f8b7 	bl	15b40 <String::equals(char const*) const>
    89d2:	2800      	cmp	r0, #0
    89d4:	f040 8175 	bne.w	8cc2 <checkMode()+0x4ea>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "500") {
    89d8:	6823      	ldr	r3, [r4, #0]
    89da:	42ab      	cmp	r3, r5
    89dc:	d002      	beq.n	89e4 <checkMode()+0x20c>
    89de:	42b3      	cmp	r3, r6
    89e0:	f47f af64 	bne.w	88ac <checkMode()+0xd4>
    89e4:	493b      	ldr	r1, [pc, #236]	; (8ad4 <checkMode()+0x2fc>)
    89e6:	4828      	ldr	r0, [pc, #160]	; (8a88 <checkMode()+0x2b0>)
    89e8:	f00d f8aa 	bl	15b40 <String::equals(char const*) const>
    89ec:	b120      	cbz	r0, 89f8 <checkMode()+0x220>
    paintMode = false;
    89ee:	2300      	movs	r3, #0
    89f0:	4a34      	ldr	r2, [pc, #208]	; (8ac4 <checkMode()+0x2ec>)
    89f2:	6013      	str	r3, [r2, #0]
    unpaintMode = false;
    89f4:	4a38      	ldr	r2, [pc, #224]	; (8ad8 <checkMode()+0x300>)
    89f6:	6013      	str	r3, [r2, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "100") { 
    89f8:	6823      	ldr	r3, [r4, #0]
    89fa:	42b3      	cmp	r3, r6
    89fc:	d002      	beq.n	8a04 <checkMode()+0x22c>
    89fe:	42ab      	cmp	r3, r5
    8a00:	f47f af54 	bne.w	88ac <checkMode()+0xd4>
    8a04:	4935      	ldr	r1, [pc, #212]	; (8adc <checkMode()+0x304>)
    8a06:	4820      	ldr	r0, [pc, #128]	; (8a88 <checkMode()+0x2b0>)
    8a08:	f00d f89a 	bl	15b40 <String::equals(char const*) const>
    8a0c:	2800      	cmp	r0, #0
    8a0e:	f040 8155 	bne.w	8cbc <checkMode()+0x4e4>
  if (currentMode == &singleMode && buttonString == "300") {
    8a12:	6823      	ldr	r3, [r4, #0]
    8a14:	42b3      	cmp	r3, r6
    8a16:	f000 8141 	beq.w	8c9c <checkMode()+0x4c4>
  } else if (currentMode == &draw && buttonString == "300" && (SMP.y - 1 >= 1 && SMP.y - 1 <= maxFiles || SMP.y - 1 == 14)) {
    8a1a:	42ab      	cmp	r3, r5
    8a1c:	f47f af46 	bne.w	88ac <checkMode()+0xd4>
    8a20:	492f      	ldr	r1, [pc, #188]	; (8ae0 <checkMode()+0x308>)
    8a22:	4819      	ldr	r0, [pc, #100]	; (8a88 <checkMode()+0x2b0>)
    8a24:	f00d f88c 	bl	15b40 <String::equals(char const*) const>
    8a28:	2800      	cmp	r0, #0
    8a2a:	f43f af3f 	beq.w	88ac <checkMode()+0xd4>
    8a2e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8ae4 <checkMode()+0x30c>
    8a32:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
    8a36:	1e9a      	subs	r2, r3, #2
    8a38:	2a07      	cmp	r2, #7
    8a3a:	d902      	bls.n	8a42 <checkMode()+0x26a>
    8a3c:	2b0f      	cmp	r3, #15
    8a3e:	f47f af35 	bne.w	88ac <checkMode()+0xd4>
    destination->pos[i] = source->pos[i];
    8a42:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    SMP.currentChannel = SMP.y - 1;
    8a44:	3b01      	subs	r3, #1
    switchMode(&singleMode);
    8a46:	480d      	ldr	r0, [pc, #52]	; (8a7c <checkMode()+0x2a4>)
    SMP.currentChannel = SMP.y - 1;
    8a48:	f8c8 3004 	str.w	r3, [r8, #4]
    destination->pos[i] = source->pos[i];
    8a4c:	6332      	str	r2, [r6, #48]	; 0x30
    8a4e:	e9d5 230d 	ldrd	r2, r3, [r5, #52]	; 0x34
    8a52:	e9c6 230d 	strd	r2, r3, [r6, #52]	; 0x34
    switchMode(&singleMode);
    8a56:	f7fb fccb 	bl	43f0 <switchMode(Mode*)>
    SMP.singleMode = true;
    8a5a:	2301      	movs	r3, #1
    8a5c:	f8c8 3000 	str.w	r3, [r8]
}
    8a60:	e724      	b.n	88ac <checkMode()+0xd4>
    8a62:	bf00      	nop
    8a64:	f3af 8000 	nop.w
    8a68:	00000000 	.word	0x00000000
    8a6c:	40500000 	.word	0x40500000
    8a70:	00000000 	.word	0x00000000
    8a74:	40590000 	.word	0x40590000
    8a78:	200067bc 	.word	0x200067bc
    8a7c:	20003c50 	.word	0x20003c50
    8a80:	200038c8 	.word	0x200038c8
    8a84:	200038e4 	.word	0x200038e4
    8a88:	200067ac 	.word	0x200067ac
    8a8c:	2000b658 	.word	0x2000b658
    8a90:	20003cb0 	.word	0x20003cb0
    8a94:	20003cf0 	.word	0x20003cf0
    8a98:	20003b2c 	.word	0x20003b2c
    8a9c:	20003c10 	.word	0x20003c10
    8aa0:	20003bd0 	.word	0x20003bd0
    8aa4:	20000b74 	.word	0x20000b74
    8aa8:	20000b78 	.word	0x20000b78
    8aac:	20000b80 	.word	0x20000b80
    8ab0:	200071b8 	.word	0x200071b8
    8ab4:	20003314 	.word	0x20003314
    8ab8:	200067ec 	.word	0x200067ec
    8abc:	20000ba0 	.word	0x20000ba0
    8ac0:	20000bac 	.word	0x20000bac
    8ac4:	2000b68c 	.word	0x2000b68c
    8ac8:	20000bb0 	.word	0x20000bb0
    8acc:	20000b9c 	.word	0x20000b9c
    8ad0:	20000bb4 	.word	0x20000bb4
    8ad4:	20000bb8 	.word	0x20000bb8
    8ad8:	2000c538 	.word	0x2000c538
    8adc:	20000ba4 	.word	0x20000ba4
    8ae0:	20000bbc 	.word	0x20000bbc
    8ae4:	20003294 	.word	0x20003294
    8ae8:	4998      	ldr	r1, [pc, #608]	; (8d4c <checkMode()+0x574>)
    8aea:	4899      	ldr	r0, [pc, #612]	; (8d50 <checkMode()+0x578>)
    8aec:	f00d f828 	bl	15b40 <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "099") {
    8af0:	b120      	cbz	r0, 8afc <checkMode()+0x324>
    paintMode = false;
    8af2:	2300      	movs	r3, #0
    8af4:	4a97      	ldr	r2, [pc, #604]	; (8d54 <checkMode()+0x57c>)
    8af6:	6013      	str	r3, [r2, #0]
    unpaintMode = false;
    8af8:	4a97      	ldr	r2, [pc, #604]	; (8d58 <checkMode()+0x580>)
    8afa:	6013      	str	r3, [r2, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "009") {
    8afc:	6823      	ldr	r3, [r4, #0]
    8afe:	42b3      	cmp	r3, r6
    8b00:	d002      	beq.n	8b08 <checkMode()+0x330>
    8b02:	42ab      	cmp	r3, r5
    8b04:	f47f aebc 	bne.w	8880 <checkMode()+0xa8>
    8b08:	4994      	ldr	r1, [pc, #592]	; (8d5c <checkMode()+0x584>)
    8b0a:	4891      	ldr	r0, [pc, #580]	; (8d50 <checkMode()+0x578>)
    8b0c:	f00d f818 	bl	15b40 <String::equals(char const*) const>
    8b10:	b120      	cbz	r0, 8b1c <checkMode()+0x344>
    paintMode = false;
    8b12:	2300      	movs	r3, #0
    8b14:	4a8f      	ldr	r2, [pc, #572]	; (8d54 <checkMode()+0x57c>)
    8b16:	6013      	str	r3, [r2, #0]
    unpaintMode = false;
    8b18:	4a8f      	ldr	r2, [pc, #572]	; (8d58 <checkMode()+0x580>)
    8b1a:	6013      	str	r3, [r2, #0]
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "900") {
    8b1c:	6823      	ldr	r3, [r4, #0]
    8b1e:	42b3      	cmp	r3, r6
    8b20:	d002      	beq.n	8b28 <checkMode()+0x350>
    8b22:	42ab      	cmp	r3, r5
    8b24:	f47f aeac 	bne.w	8880 <checkMode()+0xa8>
    8b28:	498d      	ldr	r1, [pc, #564]	; (8d60 <checkMode()+0x588>)
    8b2a:	4889      	ldr	r0, [pc, #548]	; (8d50 <checkMode()+0x578>)
    8b2c:	f00d f808 	bl	15b40 <String::equals(char const*) const>
    8b30:	b120      	cbz	r0, 8b3c <checkMode()+0x364>
    unpaintMode = false;
    8b32:	2300      	movs	r3, #0
    8b34:	4a88      	ldr	r2, [pc, #544]	; (8d58 <checkMode()+0x580>)
    8b36:	6013      	str	r3, [r2, #0]
    paintMode = false;
    8b38:	4a86      	ldr	r2, [pc, #536]	; (8d54 <checkMode()+0x57c>)
    8b3a:	6013      	str	r3, [r2, #0]
  if ((currentMode == &draw) && buttonString == "011") {
    8b3c:	6823      	ldr	r3, [r4, #0]
    8b3e:	42ab      	cmp	r3, r5
    8b40:	f47f ae9e 	bne.w	8880 <checkMode()+0xa8>
    8b44:	4987      	ldr	r1, [pc, #540]	; (8d64 <checkMode()+0x58c>)
    8b46:	4882      	ldr	r0, [pc, #520]	; (8d50 <checkMode()+0x578>)
    8b48:	f00c fffa 	bl	15b40 <String::equals(char const*) const>
    8b4c:	2800      	cmp	r0, #0
    8b4e:	f040 8170 	bne.w	8e32 <checkMode()+0x65a>
  } else if ((currentMode == &menu) && buttonString == "001") {
    8b52:	6823      	ldr	r3, [r4, #0]
    8b54:	4f84      	ldr	r7, [pc, #528]	; (8d68 <checkMode()+0x590>)
    8b56:	42bb      	cmp	r3, r7
    8b58:	f47f ae96 	bne.w	8888 <checkMode()+0xb0>
    8b5c:	4983      	ldr	r1, [pc, #524]	; (8d6c <checkMode()+0x594>)
    8b5e:	487c      	ldr	r0, [pc, #496]	; (8d50 <checkMode()+0x578>)
    8b60:	f00c ffee 	bl	15b40 <String::equals(char const*) const>
    8b64:	2800      	cmp	r0, #0
    8b66:	f040 816c 	bne.w	8e42 <checkMode()+0x66a>
  } else if ((currentMode == &menu) && buttonString == "010") {
    8b6a:	6823      	ldr	r3, [r4, #0]
    8b6c:	42bb      	cmp	r3, r7
    8b6e:	f47f ae8b 	bne.w	8888 <checkMode()+0xb0>
    8b72:	497f      	ldr	r1, [pc, #508]	; (8d70 <checkMode()+0x598>)
    8b74:	4876      	ldr	r0, [pc, #472]	; (8d50 <checkMode()+0x578>)
    8b76:	f00c ffe3 	bl	15b40 <String::equals(char const*) const>
    8b7a:	2800      	cmp	r0, #0
    8b7c:	f040 8177 	bne.w	8e6e <checkMode()+0x696>
  } else if ((currentMode == &menu) && buttonString == "100") {
    8b80:	6823      	ldr	r3, [r4, #0]
    8b82:	42bb      	cmp	r3, r7
    8b84:	f47f ae80 	bne.w	8888 <checkMode()+0xb0>
    8b88:	497a      	ldr	r1, [pc, #488]	; (8d74 <checkMode()+0x59c>)
    8b8a:	4871      	ldr	r0, [pc, #452]	; (8d50 <checkMode()+0x578>)
    8b8c:	f00c ffd8 	bl	15b40 <String::equals(char const*) const>
    8b90:	2800      	cmp	r0, #0
    8b92:	f040 817b 	bne.w	8e8c <checkMode()+0x6b4>
  if ((currentMode == &singleMode) && buttonString == "220") {
    8b96:	6823      	ldr	r3, [r4, #0]
    8b98:	42b3      	cmp	r3, r6
    8b9a:	f47f ae78 	bne.w	888e <checkMode()+0xb6>
    8b9e:	4976      	ldr	r1, [pc, #472]	; (8d78 <checkMode()+0x5a0>)
    8ba0:	486b      	ldr	r0, [pc, #428]	; (8d50 <checkMode()+0x578>)
    8ba2:	f00c ffcd 	bl	15b40 <String::equals(char const*) const>
    8ba6:	2800      	cmp	r0, #0
    8ba8:	f040 8139 	bne.w	8e1e <checkMode()+0x646>
  } else if ((currentMode == &set_Wav) && buttonString == "100") {
    8bac:	6823      	ldr	r3, [r4, #0]
    8bae:	4f73      	ldr	r7, [pc, #460]	; (8d7c <checkMode()+0x5a4>)
    8bb0:	42bb      	cmp	r3, r7
    8bb2:	f47f ae70 	bne.w	8896 <checkMode()+0xbe>
    8bb6:	496f      	ldr	r1, [pc, #444]	; (8d74 <checkMode()+0x59c>)
    8bb8:	4865      	ldr	r0, [pc, #404]	; (8d50 <checkMode()+0x578>)
    8bba:	f00c ffc1 	bl	15b40 <String::equals(char const*) const>
    8bbe:	2800      	cmp	r0, #0
    8bc0:	f040 8149 	bne.w	8e56 <checkMode()+0x67e>
  } else if ((currentMode == &set_Wav) && buttonString == "001") {
    8bc4:	6823      	ldr	r3, [r4, #0]
    8bc6:	42bb      	cmp	r3, r7
    8bc8:	f47f ae65 	bne.w	8896 <checkMode()+0xbe>
    8bcc:	4967      	ldr	r1, [pc, #412]	; (8d6c <checkMode()+0x594>)
    8bce:	4860      	ldr	r0, [pc, #384]	; (8d50 <checkMode()+0x578>)
    8bd0:	f00c ffb6 	bl	15b40 <String::equals(char const*) const>
    8bd4:	2800      	cmp	r0, #0
    8bd6:	f040 814e 	bne.w	8e76 <checkMode()+0x69e>
  if ((currentMode == &draw) && buttonString == "220") {
    8bda:	6823      	ldr	r3, [r4, #0]
    8bdc:	42ab      	cmp	r3, r5
    8bde:	f47f ae5d 	bne.w	889c <checkMode()+0xc4>
    8be2:	4965      	ldr	r1, [pc, #404]	; (8d78 <checkMode()+0x5a0>)
    8be4:	485a      	ldr	r0, [pc, #360]	; (8d50 <checkMode()+0x578>)
    8be6:	f00c ffab 	bl	15b40 <String::equals(char const*) const>
    8bea:	2800      	cmp	r0, #0
    8bec:	f040 811c 	bne.w	8e28 <checkMode()+0x650>
  } else if ((currentMode == &set_SamplePack) && buttonString == "010") {
    8bf0:	6823      	ldr	r3, [r4, #0]
    8bf2:	4f63      	ldr	r7, [pc, #396]	; (8d80 <checkMode()+0x5a8>)
    8bf4:	42bb      	cmp	r3, r7
    8bf6:	f47f ae55 	bne.w	88a4 <checkMode()+0xcc>
    8bfa:	495d      	ldr	r1, [pc, #372]	; (8d70 <checkMode()+0x598>)
    8bfc:	4854      	ldr	r0, [pc, #336]	; (8d50 <checkMode()+0x578>)
    8bfe:	f00c ff9f 	bl	15b40 <String::equals(char const*) const>
    8c02:	2800      	cmp	r0, #0
    8c04:	f040 812b 	bne.w	8e5e <checkMode()+0x686>
  } else if ((currentMode == &set_SamplePack) && buttonString == "100") {
    8c08:	6823      	ldr	r3, [r4, #0]
    8c0a:	42bb      	cmp	r3, r7
    8c0c:	f47f ae4a 	bne.w	88a4 <checkMode()+0xcc>
    8c10:	4958      	ldr	r1, [pc, #352]	; (8d74 <checkMode()+0x59c>)
    8c12:	484f      	ldr	r0, [pc, #316]	; (8d50 <checkMode()+0x578>)
    8c14:	f00c ff94 	bl	15b40 <String::equals(char const*) const>
    8c18:	2800      	cmp	r0, #0
    8c1a:	f040 8124 	bne.w	8e66 <checkMode()+0x68e>
  } else if ((currentMode == &set_SamplePack) && buttonString == "001") {
    8c1e:	6823      	ldr	r3, [r4, #0]
    8c20:	42bb      	cmp	r3, r7
    8c22:	f47f ae3f 	bne.w	88a4 <checkMode()+0xcc>
    8c26:	4951      	ldr	r1, [pc, #324]	; (8d6c <checkMode()+0x594>)
    8c28:	4849      	ldr	r0, [pc, #292]	; (8d50 <checkMode()+0x578>)
    8c2a:	f00c ff89 	bl	15b40 <String::equals(char const*) const>
    8c2e:	2800      	cmp	r0, #0
    8c30:	f040 812f 	bne.w	8e92 <checkMode()+0x6ba>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    8c34:	6823      	ldr	r3, [r4, #0]
    8c36:	e635      	b.n	88a4 <checkMode()+0xcc>
    8c38:	4952      	ldr	r1, [pc, #328]	; (8d84 <checkMode()+0x5ac>)
    8c3a:	4845      	ldr	r0, [pc, #276]	; (8d50 <checkMode()+0x578>)
    8c3c:	f00c ff80 	bl	15b40 <String::equals(char const*) const>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "202") clearPage();
    8c40:	2800      	cmp	r0, #0
    8c42:	d146      	bne.n	8cd2 <checkMode()+0x4fa>
  if (currentMode == &velocity && SMP.singleMode && buttonString == "090") {
    8c44:	6823      	ldr	r3, [r4, #0]
    8c46:	4f50      	ldr	r7, [pc, #320]	; (8d88 <checkMode()+0x5b0>)
    8c48:	42bb      	cmp	r3, r7
    8c4a:	f47f ae0f 	bne.w	886c <checkMode()+0x94>
    8c4e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8da0 <checkMode()+0x5c8>
    8c52:	f8d8 3000 	ldr.w	r3, [r8]
    8c56:	2b00      	cmp	r3, #0
    8c58:	d153      	bne.n	8d02 <checkMode()+0x52a>
    8c5a:	494c      	ldr	r1, [pc, #304]	; (8d8c <checkMode()+0x5b4>)
    8c5c:	483c      	ldr	r0, [pc, #240]	; (8d50 <checkMode()+0x578>)
    8c5e:	f00c ff6f 	bl	15b40 <String::equals(char const*) const>
  if (currentMode == &velocity && !SMP.singleMode && buttonString == "090") { switchMode(&draw); }
    8c62:	2800      	cmp	r0, #0
    8c64:	f040 810e 	bne.w	8e84 <checkMode()+0x6ac>
  if (currentMode == &volume && buttonString == "090") {
    8c68:	6823      	ldr	r3, [r4, #0]
    8c6a:	e5ff      	b.n	886c <checkMode()+0x94>
	size_t println(const String &s)			{ return print(s) + println(); }
    8c6c:	4938      	ldr	r1, [pc, #224]	; (8d50 <checkMode()+0x578>)
    8c6e:	4848      	ldr	r0, [pc, #288]	; (8d90 <checkMode()+0x5b8>)
    8c70:	f00c fcce 	bl	15610 <Print::print(String const&)>
    8c74:	4846      	ldr	r0, [pc, #280]	; (8d90 <checkMode()+0x5b8>)
    8c76:	f00c fcfd 	bl	15674 <Print::println()>
    oldButtonString = buttonString;
    8c7a:	4935      	ldr	r1, [pc, #212]	; (8d50 <checkMode()+0x578>)
    8c7c:	4845      	ldr	r0, [pc, #276]	; (8d94 <checkMode()+0x5bc>)
    8c7e:	f00c fed3 	bl	15a28 <String::operator=(String const&)>
    8c82:	e5e8      	b.n	8856 <checkMode()+0x7e>
    8c84:	4944      	ldr	r1, [pc, #272]	; (8d98 <checkMode()+0x5c0>)
    8c86:	4832      	ldr	r0, [pc, #200]	; (8d50 <checkMode()+0x578>)
    8c88:	f00c ff5a 	bl	15b40 <String::equals(char const*) const>
  if (currentMode == &draw && buttonString == "110") { toggleCopyPaste(); }
    8c8c:	2800      	cmp	r0, #0
    8c8e:	f040 80d5 	bne.w	8e3c <checkMode()+0x664>
  if ((currentMode == &singleMode) && buttonString == "030") {
    8c92:	6823      	ldr	r3, [r4, #0]
    8c94:	42b3      	cmp	r3, r6
    8c96:	f47f ae2d 	bne.w	88f4 <checkMode()+0x11c>
    8c9a:	e623      	b.n	88e4 <checkMode()+0x10c>
    8c9c:	493f      	ldr	r1, [pc, #252]	; (8d9c <checkMode()+0x5c4>)
    8c9e:	482c      	ldr	r0, [pc, #176]	; (8d50 <checkMode()+0x578>)
    8ca0:	f00c ff4e 	bl	15b40 <String::equals(char const*) const>
  if (currentMode == &singleMode && buttonString == "300") {
    8ca4:	2800      	cmp	r0, #0
    8ca6:	d13d      	bne.n	8d24 <checkMode()+0x54c>
  } else if (currentMode == &draw && buttonString == "300" && (SMP.y - 1 >= 1 && SMP.y - 1 <= maxFiles || SMP.y - 1 == 14)) {
    8ca8:	6823      	ldr	r3, [r4, #0]
    8caa:	e6b6      	b.n	8a1a <checkMode()+0x242>
    8cac:	4937      	ldr	r1, [pc, #220]	; (8d8c <checkMode()+0x5b4>)
    8cae:	4828      	ldr	r0, [pc, #160]	; (8d50 <checkMode()+0x578>)
    8cb0:	f00c ff46 	bl	15b40 <String::equals(char const*) const>
  if (currentMode == &volume && buttonString == "090") {
    8cb4:	2800      	cmp	r0, #0
    8cb6:	d141      	bne.n	8d3c <checkMode()+0x564>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "099") {
    8cb8:	6823      	ldr	r3, [r4, #0]
    8cba:	e5db      	b.n	8874 <checkMode()+0x9c>
    unpaint(); 
    8cbc:	f7fb f8fa 	bl	3eb4 <unpaint()>
    8cc0:	e6a7      	b.n	8a12 <checkMode()+0x23a>
    paintMode = false;
    8cc2:	2300      	movs	r3, #0
    8cc4:	4a23      	ldr	r2, [pc, #140]	; (8d54 <checkMode()+0x57c>)
    8cc6:	6013      	str	r3, [r2, #0]
    unpaintMode = false;
    8cc8:	4a23      	ldr	r2, [pc, #140]	; (8d58 <checkMode()+0x580>)
    8cca:	6013      	str	r3, [r2, #0]
    paint();
    8ccc:	f7fb fa30 	bl	4130 <paint()>
    8cd0:	e682      	b.n	89d8 <checkMode()+0x200>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "202") clearPage();
    8cd2:	f7fb fed5 	bl	4a80 <clearPage()>
    8cd6:	e7b5      	b.n	8c44 <checkMode()+0x46c>
    unpaint();
    8cd8:	f7fb f8ec 	bl	3eb4 <unpaint()>
    unpaintMode = true;
    8cdc:	4b1e      	ldr	r3, [pc, #120]	; (8d58 <checkMode()+0x580>)
    8cde:	2201      	movs	r2, #1
    8ce0:	601a      	str	r2, [r3, #0]
  SMP.activeCopy = false;
    8ce2:	2200      	movs	r2, #0
    8ce4:	4b2e      	ldr	r3, [pc, #184]	; (8da0 <checkMode()+0x5c8>)
    8ce6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    8cea:	e660      	b.n	89ae <checkMode()+0x1d6>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    8cec:	f7fb f8bc 	bl	3e68 <toggleMute()>
    8cf0:	e644      	b.n	897c <checkMode()+0x1a4>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "020") { switchMode(&volume); }
    8cf2:	482c      	ldr	r0, [pc, #176]	; (8da4 <checkMode()+0x5cc>)
    8cf4:	f7fb fb7c 	bl	43f0 <switchMode(Mode*)>
    8cf8:	e5ee      	b.n	88d8 <checkMode()+0x100>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "101") { togglePlay(isPlaying); }
    8cfa:	482b      	ldr	r0, [pc, #172]	; (8da8 <checkMode()+0x5d0>)
    8cfc:	f7fd fc7e 	bl	65fc <togglePlay(bool&)>
    8d00:	e5de      	b.n	88c0 <checkMode()+0xe8>
    8d02:	4922      	ldr	r1, [pc, #136]	; (8d8c <checkMode()+0x5b4>)
    8d04:	4812      	ldr	r0, [pc, #72]	; (8d50 <checkMode()+0x578>)
    8d06:	f00c ff1b 	bl	15b40 <String::equals(char const*) const>
  if (currentMode == &velocity && SMP.singleMode && buttonString == "090") {
    8d0a:	2800      	cmp	r0, #0
    8d0c:	f040 80c5 	bne.w	8e9a <checkMode()+0x6c2>
  if (currentMode == &velocity && !SMP.singleMode && buttonString == "090") { switchMode(&draw); }
    8d10:	6823      	ldr	r3, [r4, #0]
    8d12:	42bb      	cmp	r3, r7
    8d14:	f47f adaa 	bne.w	886c <checkMode()+0x94>
    8d18:	f8d8 2000 	ldr.w	r2, [r8]
    8d1c:	2a00      	cmp	r2, #0
    8d1e:	f47f ada9 	bne.w	8874 <checkMode()+0x9c>
    8d22:	e79a      	b.n	8c5a <checkMode()+0x482>
    destination->pos[i] = source->pos[i];
    8d24:	e9d6 120c 	ldrd	r1, r2, [r6, #48]	; 0x30
    8d28:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    switchMode(&draw);
    8d2a:	4820      	ldr	r0, [pc, #128]	; (8dac <checkMode()+0x5d4>)
    destination->pos[i] = source->pos[i];
    8d2c:	63ab      	str	r3, [r5, #56]	; 0x38
    8d2e:	e9c5 120c 	strd	r1, r2, [r5, #48]	; 0x30
}
    8d32:	b010      	add	sp, #64	; 0x40
    8d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    switchMode(&draw);
    8d38:	f7fb bb5a 	b.w	43f0 <switchMode(Mode*)>
    switchMode(&draw);
    8d3c:	481b      	ldr	r0, [pc, #108]	; (8dac <checkMode()+0x5d4>)
    8d3e:	f7fb fb57 	bl	43f0 <switchMode(Mode*)>
    setvol = false;
    8d42:	4b1b      	ldr	r3, [pc, #108]	; (8db0 <checkMode()+0x5d8>)
    8d44:	2200      	movs	r2, #0
    8d46:	701a      	strb	r2, [r3, #0]
    8d48:	e7b6      	b.n	8cb8 <checkMode()+0x4e0>
    8d4a:	bf00      	nop
    8d4c:	20000b8c 	.word	0x20000b8c
    8d50:	200067ac 	.word	0x200067ac
    8d54:	2000b68c 	.word	0x2000b68c
    8d58:	2000c538 	.word	0x2000c538
    8d5c:	20000b90 	.word	0x20000b90
    8d60:	20000b94 	.word	0x20000b94
    8d64:	20000b98 	.word	0x20000b98
    8d68:	20003b2c 	.word	0x20003b2c
    8d6c:	20000b9c 	.word	0x20000b9c
    8d70:	20000ba0 	.word	0x20000ba0
    8d74:	20000ba4 	.word	0x20000ba4
    8d78:	20000ba8 	.word	0x20000ba8
    8d7c:	20003c10 	.word	0x20003c10
    8d80:	20003bd0 	.word	0x20003bd0
    8d84:	20000b84 	.word	0x20000b84
    8d88:	20003cb0 	.word	0x20003cb0
    8d8c:	20000b88 	.word	0x20000b88
    8d90:	20003314 	.word	0x20003314
    8d94:	2000b658 	.word	0x2000b658
    8d98:	20000b7c 	.word	0x20000b7c
    8d9c:	20000bbc 	.word	0x20000bbc
    8da0:	20003294 	.word	0x20003294
    8da4:	20003cf0 	.word	0x20003cf0
    8da8:	2000c953 	.word	0x2000c953
    8dac:	200038e4 	.word	0x200038e4
    8db0:	2000c95a 	.word	0x2000c95a
    int velo = round(mapf(note[SMP.x][SMP.y][1], 1, 100, 1, 16 * 4));
    8db4:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8ee4 <checkMode()+0x70c>
    8db8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    8dbc:	4a3e      	ldr	r2, [pc, #248]	; (8eb8 <checkMode()+0x6e0>)
    8dbe:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
    8dc2:	f8d8 1034 	ldr.w	r1, [r8, #52]	; 0x34
    8dc6:	eeb0 1b43 	vmov.f64	d1, d3
    8dca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
    8dce:	440b      	add	r3, r1
    8dd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8dd4:	ed93 0a01 	vldr	s0, [r3, #4]
    8dd8:	ed9f 4b33 	vldr	d4, [pc, #204]	; 8ea8 <checkMode()+0x6d0>
    8ddc:	ed9f 2b34 	vldr	d2, [pc, #208]	; 8eb0 <checkMode()+0x6d8>
    8de0:	eeb8 0b40 	vcvt.f64.u32	d0, s0
    8de4:	f001 fc44 	bl	a670 <mapf(double, double, double, double, double)>
    8de8:	feb8 0b40 	vrinta.f64	d0, d0
    8dec:	eefd 7bc0 	vcvt.s32.f64	s15, d0
	size_t print(int n)				{ return print((long)n); }
    8df0:	4832      	ldr	r0, [pc, #200]	; (8ebc <checkMode()+0x6e4>)
    8df2:	ee17 1a90 	vmov	r1, s15
    8df6:	ee17 7a90 	vmov	r7, s15
    8dfa:	f00c fc2f 	bl	1565c <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    8dfe:	482f      	ldr	r0, [pc, #188]	; (8ebc <checkMode()+0x6e4>)
    8e00:	f00c fc38 	bl	15674 <Print::println()>
    switchMode(&velocity);
    8e04:	482e      	ldr	r0, [pc, #184]	; (8ec0 <checkMode()+0x6e8>)
    SMP.velocity = velo;
    8e06:	f8c8 7010 	str.w	r7, [r8, #16]
    switchMode(&velocity);
    8e0a:	f7fb faf1 	bl	43f0 <switchMode(Mode*)>
    SMP.singleMode = true;
    8e0e:	2301      	movs	r3, #1
    8e10:	f8c8 3000 	str.w	r3, [r8]
		noInterrupts();
    8e14:	b672      	cpsid	i
		encoder.position = p;
    8e16:	4b2b      	ldr	r3, [pc, #172]	; (8ec4 <checkMode()+0x6ec>)
    8e18:	64df      	str	r7, [r3, #76]	; 0x4c
		interrupts();
    8e1a:	b662      	cpsie	i
    8e1c:	e569      	b.n	88f2 <checkMode()+0x11a>
    switchMode(&set_Wav);
    8e1e:	482a      	ldr	r0, [pc, #168]	; (8ec8 <checkMode()+0x6f0>)
    8e20:	f7fb fae6 	bl	43f0 <switchMode(Mode*)>
  if ((currentMode == &draw) && buttonString == "220") {
    8e24:	6823      	ldr	r3, [r4, #0]
    8e26:	e536      	b.n	8896 <checkMode()+0xbe>
    switchMode(&set_SamplePack);
    8e28:	4828      	ldr	r0, [pc, #160]	; (8ecc <checkMode()+0x6f4>)
    8e2a:	f7fb fae1 	bl	43f0 <switchMode(Mode*)>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    8e2e:	6823      	ldr	r3, [r4, #0]
    8e30:	e538      	b.n	88a4 <checkMode()+0xcc>
    switchMode(&menu);
    8e32:	4827      	ldr	r0, [pc, #156]	; (8ed0 <checkMode()+0x6f8>)
    8e34:	f7fb fadc 	bl	43f0 <switchMode(Mode*)>
  if ((currentMode == &singleMode) && buttonString == "220") {
    8e38:	6823      	ldr	r3, [r4, #0]
    8e3a:	e525      	b.n	8888 <checkMode()+0xb0>
  if (currentMode == &draw && buttonString == "110") { toggleCopyPaste(); }
    8e3c:	f7fb fda2 	bl	4984 <toggleCopyPaste()>
    8e40:	e727      	b.n	8c92 <checkMode()+0x4ba>
    paintMode = false;
    8e42:	2300      	movs	r3, #0
    8e44:	4a23      	ldr	r2, [pc, #140]	; (8ed4 <checkMode()+0x6fc>)
    switchMode(&draw);
    8e46:	4824      	ldr	r0, [pc, #144]	; (8ed8 <checkMode()+0x700>)
    paintMode = false;
    8e48:	6013      	str	r3, [r2, #0]
    unpaintMode = false;
    8e4a:	4a24      	ldr	r2, [pc, #144]	; (8edc <checkMode()+0x704>)
    8e4c:	6013      	str	r3, [r2, #0]
    switchMode(&draw);
    8e4e:	f7fb facf 	bl	43f0 <switchMode(Mode*)>
  if ((currentMode == &singleMode) && buttonString == "220") {
    8e52:	6823      	ldr	r3, [r4, #0]
    8e54:	e518      	b.n	8888 <checkMode()+0xb0>
    loadWav();
    8e56:	f7ff fc6b 	bl	8730 <loadWav()>
  if ((currentMode == &draw) && buttonString == "220") {
    8e5a:	6823      	ldr	r3, [r4, #0]
    8e5c:	e51b      	b.n	8896 <checkMode()+0xbe>
    savePack();
    8e5e:	f7fb fee3 	bl	4c28 <savePack()>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    8e62:	6823      	ldr	r3, [r4, #0]
    8e64:	e51e      	b.n	88a4 <checkMode()+0xcc>
    loadPack();
    8e66:	f7ff fbc9 	bl	85fc <loadPack()>
  if ((currentMode == &draw || currentMode == &singleMode) && buttonString == "010") { toggleMute(); }
    8e6a:	6823      	ldr	r3, [r4, #0]
    8e6c:	e51a      	b.n	88a4 <checkMode()+0xcc>
    savePattern();
    8e6e:	f7fd f9bb 	bl	61e8 <savePattern()>
  if ((currentMode == &singleMode) && buttonString == "220") {
    8e72:	6823      	ldr	r3, [r4, #0]
    8e74:	e508      	b.n	8888 <checkMode()+0xb0>
    switchMode(&singleMode);
    8e76:	481a      	ldr	r0, [pc, #104]	; (8ee0 <checkMode()+0x708>)
    8e78:	f7fb faba 	bl	43f0 <switchMode(Mode*)>
    SMP.singleMode = true;
    8e7c:	4b19      	ldr	r3, [pc, #100]	; (8ee4 <checkMode()+0x70c>)
    8e7e:	2201      	movs	r2, #1
    8e80:	601a      	str	r2, [r3, #0]
    8e82:	e6aa      	b.n	8bda <checkMode()+0x402>
  if (currentMode == &velocity && !SMP.singleMode && buttonString == "090") { switchMode(&draw); }
    8e84:	4814      	ldr	r0, [pc, #80]	; (8ed8 <checkMode()+0x700>)
    8e86:	f7fb fab3 	bl	43f0 <switchMode(Mode*)>
    8e8a:	e6ed      	b.n	8c68 <checkMode()+0x490>
    loadPattern();
    8e8c:	f7fd fc20 	bl	66d0 <loadPattern()>
    8e90:	e681      	b.n	8b96 <checkMode()+0x3be>
    switchMode(&draw);
    8e92:	4811      	ldr	r0, [pc, #68]	; (8ed8 <checkMode()+0x700>)
    8e94:	f7fb faac 	bl	43f0 <switchMode(Mode*)>
    8e98:	e6cc      	b.n	8c34 <checkMode()+0x45c>
    switchMode(&singleMode);
    8e9a:	4811      	ldr	r0, [pc, #68]	; (8ee0 <checkMode()+0x708>)
    8e9c:	f7fb faa8 	bl	43f0 <switchMode(Mode*)>
    SMP.singleMode = true;
    8ea0:	2301      	movs	r3, #1
    8ea2:	f8c8 3000 	str.w	r3, [r8]
    8ea6:	e733      	b.n	8d10 <checkMode()+0x538>
    8ea8:	00000000 	.word	0x00000000
    8eac:	40500000 	.word	0x40500000
    8eb0:	00000000 	.word	0x00000000
    8eb4:	40590000 	.word	0x40590000
    8eb8:	200071b8 	.word	0x200071b8
    8ebc:	20003314 	.word	0x20003314
    8ec0:	20003cb0 	.word	0x20003cb0
    8ec4:	200067ec 	.word	0x200067ec
    8ec8:	20003c10 	.word	0x20003c10
    8ecc:	20003bd0 	.word	0x20003bd0
    8ed0:	20003b2c 	.word	0x20003b2c
    8ed4:	2000b68c 	.word	0x2000b68c
    8ed8:	200038e4 	.word	0x200038e4
    8edc:	2000c538 	.word	0x2000c538
    8ee0:	20003c50 	.word	0x20003c50
    8ee4:	20003294 	.word	0x20003294

00008ee8 <loop>:
void loop() {
    8ee8:	b538      	push	{r3, r4, r5, lr}
  if (waitForFourBars && pulseCount >= totalPulsesToWait) {
    8eea:	4c5b      	ldr	r4, [pc, #364]	; (9058 <loop+0x170>)
    8eec:	7823      	ldrb	r3, [r4, #0]
    8eee:	b11b      	cbz	r3, 8ef8 <loop+0x10>
    8ef0:	4b5a      	ldr	r3, [pc, #360]	; (905c <loop+0x174>)
    8ef2:	681b      	ldr	r3, [r3, #0]
    8ef4:	2bbf      	cmp	r3, #191	; 0xbf
    8ef6:	dc6f      	bgt.n	8fd8 <loop+0xf0>
		return usb_midi_read(channel);
    8ef8:	2000      	movs	r0, #0
  if (currentMode->name == "DRAW") {
    8efa:	4c59      	ldr	r4, [pc, #356]	; (9060 <loop+0x178>)
    8efc:	f00e fddc 	bl	17ab8 <usb_midi_read>
  multiresponseButton1.poll();
    8f00:	4858      	ldr	r0, [pc, #352]	; (9064 <loop+0x17c>)
    8f02:	f00b fb95 	bl	14630 <Switch::poll()>
  multiresponseButton2.poll();
    8f06:	4858      	ldr	r0, [pc, #352]	; (9068 <loop+0x180>)
    8f08:	f00b fb92 	bl	14630 <Switch::poll()>
  multiresponseButton3.poll();
    8f0c:	4857      	ldr	r0, [pc, #348]	; (906c <loop+0x184>)
    8f0e:	f00b fb8f 	bl	14630 <Switch::poll()>
  checkPositions();
    8f12:	f7fb fbe9 	bl	46e8 <checkPositions()>
    8f16:	4956      	ldr	r1, [pc, #344]	; (9070 <loop+0x188>)
    8f18:	6820      	ldr	r0, [r4, #0]
    8f1a:	f00c fe11 	bl	15b40 <String::equals(char const*) const>
  if (currentMode->name == "DRAW") {
    8f1e:	b320      	cbz	r0, 8f6a <loop+0x82>
    canvas(false, 0);
    8f20:	2100      	movs	r1, #0
    8f22:	4608      	mov	r0, r1
    8f24:	f7fb fc42 	bl	47ac <canvas(bool, int)>
  if (resetTimerActive && millis() - lastButtonPressTime > 80) {
    8f28:	4d52      	ldr	r5, [pc, #328]	; (9074 <loop+0x18c>)
    8f2a:	782b      	ldrb	r3, [r5, #0]
    8f2c:	b133      	cbz	r3, 8f3c <loop+0x54>
    8f2e:	4b52      	ldr	r3, [pc, #328]	; (9078 <loop+0x190>)
    8f30:	4a52      	ldr	r2, [pc, #328]	; (907c <loop+0x194>)
    8f32:	681b      	ldr	r3, [r3, #0]
    8f34:	6812      	ldr	r2, [r2, #0]
    8f36:	1a9b      	subs	r3, r3, r2
    8f38:	2b50      	cmp	r3, #80	; 0x50
    8f3a:	d860      	bhi.n	8ffe <loop+0x116>
  if (currentMode == &draw || currentMode == &singleMode) {
    8f3c:	6823      	ldr	r3, [r4, #0]
    8f3e:	4a50      	ldr	r2, [pc, #320]	; (9080 <loop+0x198>)
    8f40:	4293      	cmp	r3, r2
    8f42:	d02b      	beq.n	8f9c <loop+0xb4>
    8f44:	4a4f      	ldr	r2, [pc, #316]	; (9084 <loop+0x19c>)
    8f46:	4293      	cmp	r3, r2
    8f48:	d028      	beq.n	8f9c <loop+0xb4>
  if (noteOnTriggered && millis() - startTime >= 200) {
    8f4a:	4c4f      	ldr	r4, [pc, #316]	; (9088 <loop+0x1a0>)
    8f4c:	7823      	ldrb	r3, [r4, #0]
    8f4e:	b133      	cbz	r3, 8f5e <loop+0x76>
    8f50:	4b49      	ldr	r3, [pc, #292]	; (9078 <loop+0x190>)
    8f52:	4a4e      	ldr	r2, [pc, #312]	; (908c <loop+0x1a4>)
    8f54:	681b      	ldr	r3, [r3, #0]
    8f56:	6812      	ldr	r2, [r2, #0]
    8f58:	1a9b      	subs	r3, r3, r2
    8f5a:	2bc7      	cmp	r3, #199	; 0xc7
    8f5c:	d831      	bhi.n	8fc2 <loop+0xda>
    8f5e:	484c      	ldr	r0, [pc, #304]	; (9090 <loop+0x1a8>)
}
    8f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f64:	7801      	ldrb	r1, [r0, #0]
    8f66:	f001 bee7 	b.w	ad38 <CFastLED::show(unsigned char)>
    8f6a:	494a      	ldr	r1, [pc, #296]	; (9094 <loop+0x1ac>)
    8f6c:	6820      	ldr	r0, [r4, #0]
    8f6e:	f00c fde7 	bl	15b40 <String::equals(char const*) const>
  } else if (currentMode->name == "VOLUME") {
    8f72:	b110      	cbz	r0, 8f7a <loop+0x92>
    setVolume();
    8f74:	f7fc fe8c 	bl	5c90 <setVolume()>
    8f78:	e7d6      	b.n	8f28 <loop+0x40>
    8f7a:	4947      	ldr	r1, [pc, #284]	; (9098 <loop+0x1b0>)
    8f7c:	6820      	ldr	r0, [r4, #0]
    8f7e:	f00c fddf 	bl	15b40 <String::equals(char const*) const>
  } else if (currentMode->name == "VELOCITY") {
    8f82:	2800      	cmp	r0, #0
    8f84:	d14a      	bne.n	901c <loop+0x134>
    8f86:	4945      	ldr	r1, [pc, #276]	; (909c <loop+0x1b4>)
    8f88:	6820      	ldr	r0, [r4, #0]
    8f8a:	f00c fdd9 	bl	15b40 <String::equals(char const*) const>
  } else if (currentMode->name == "SINGLE") {
    8f8e:	2800      	cmp	r0, #0
    8f90:	d047      	beq.n	9022 <loop+0x13a>
    canvas(true, 22);
    8f92:	2116      	movs	r1, #22
    8f94:	2001      	movs	r0, #1
    8f96:	f7fb fc09 	bl	47ac <canvas(bool, int)>
    8f9a:	e7c5      	b.n	8f28 <loop+0x40>
    drawBase();
    8f9c:	f7fc fafe 	bl	559c <drawBase()>
    drawSamples();
    8fa0:	f7fc fc12 	bl	57c8 <drawSamples()>
    if (currentMode != &velocity) drawCursor();
    8fa4:	4b3e      	ldr	r3, [pc, #248]	; (90a0 <loop+0x1b8>)
    8fa6:	6822      	ldr	r2, [r4, #0]
    8fa8:	429a      	cmp	r2, r3
    8faa:	d001      	beq.n	8fb0 <loop+0xc8>
    8fac:	f7fc fd4a 	bl	5a44 <drawCursor()>
    if (isPlaying) {
    8fb0:	4b3c      	ldr	r3, [pc, #240]	; (90a4 <loop+0x1bc>)
    8fb2:	781b      	ldrb	r3, [r3, #0]
    8fb4:	2b00      	cmp	r3, #0
    8fb6:	d0c8      	beq.n	8f4a <loop+0x62>
      drawTimer(pagebeat);
    8fb8:	4b3b      	ldr	r3, [pc, #236]	; (90a8 <loop+0x1c0>)
    8fba:	6818      	ldr	r0, [r3, #0]
    8fbc:	f7fc fcde 	bl	597c <drawTimer(int)>
    8fc0:	e7c3      	b.n	8f4a <loop+0x62>
    envelope14.noteOff();
    8fc2:	483a      	ldr	r0, [pc, #232]	; (90ac <loop+0x1c4>)
    8fc4:	f002 fe8c 	bl	bce0 <AudioEffectEnvelope::noteOff()>
    noteOnTriggered = false;
    8fc8:	2300      	movs	r3, #0
    8fca:	4831      	ldr	r0, [pc, #196]	; (9090 <loop+0x1a8>)
    8fcc:	7023      	strb	r3, [r4, #0]
    8fce:	7801      	ldrb	r1, [r0, #0]
}
    8fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8fd4:	f001 beb0 	b.w	ad38 <CFastLED::show(unsigned char)>
    beat = 0;
    8fd8:	2500      	movs	r5, #0
    8fda:	4935      	ldr	r1, [pc, #212]	; (90b0 <loop+0x1c8>)
    pagebeat = 0;
    8fdc:	4a32      	ldr	r2, [pc, #200]	; (90a8 <loop+0x1c0>)
    SMP.page = 1;
    8fde:	2301      	movs	r3, #1
    beat = 0;
    8fe0:	600d      	str	r5, [r1, #0]
    SMP.page = 1;
    8fe2:	4934      	ldr	r1, [pc, #208]	; (90b4 <loop+0x1cc>)
    pagebeat = 0;
    8fe4:	6015      	str	r5, [r2, #0]
    isPlaying = true;
    8fe6:	4a2f      	ldr	r2, [pc, #188]	; (90a4 <loop+0x1bc>)
    SMP.page = 1;
    8fe8:	614b      	str	r3, [r1, #20]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    8fea:	210e      	movs	r1, #14
    8fec:	4832      	ldr	r0, [pc, #200]	; (90b8 <loop+0x1d0>)
    isPlaying = true;
    8fee:	7013      	strb	r3, [r2, #0]
    8ff0:	f00f fa70 	bl	184d4 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    8ff4:	4831      	ldr	r0, [pc, #196]	; (90bc <loop+0x1d4>)
    8ff6:	f00c fb3d 	bl	15674 <Print::println()>
    waitForFourBars = false;  // Reset for the next start message
    8ffa:	7025      	strb	r5, [r4, #0]
    8ffc:	e77c      	b.n	8ef8 <loop+0x10>
    checkMode();
    8ffe:	f7ff fbeb 	bl	87d8 <checkMode()>
    memset(buttons, 0, sizeof(buttons));
    9002:	2300      	movs	r3, #0
    9004:	492e      	ldr	r1, [pc, #184]	; (90c0 <loop+0x1d8>)
    memset(oldButtons, 0, sizeof(oldButtons));
    9006:	4a2f      	ldr	r2, [pc, #188]	; (90c4 <loop+0x1dc>)
    resetTimerActive = false;  // Stop the timer
    9008:	702b      	strb	r3, [r5, #0]
    memset(buttons, 0, sizeof(buttons));
    900a:	e9c1 3300 	strd	r3, r3, [r1]
    900e:	e9c1 3302 	strd	r3, r3, [r1, #8]
    memset(oldButtons, 0, sizeof(oldButtons));
    9012:	e9c2 3300 	strd	r3, r3, [r2]
    9016:	e9c2 3302 	strd	r3, r3, [r2, #8]
    resetTimerActive = false;  // Stop the timer
    901a:	e78f      	b.n	8f3c <loop+0x54>
    setVelocity();
    901c:	f7fc f9b8 	bl	5390 <setVelocity()>
    9020:	e782      	b.n	8f28 <loop+0x40>
    9022:	4929      	ldr	r1, [pc, #164]	; (90c8 <loop+0x1e0>)
    9024:	6820      	ldr	r0, [r4, #0]
    9026:	f00c fd8b 	bl	15b40 <String::equals(char const*) const>
  } else if (currentMode->name == "MENU") {
    902a:	b938      	cbnz	r0, 903c <loop+0x154>
    902c:	4927      	ldr	r1, [pc, #156]	; (90cc <loop+0x1e4>)
    902e:	6820      	ldr	r0, [r4, #0]
    9030:	f00c fd86 	bl	15b40 <String::equals(char const*) const>
  } else if (currentMode->name == "SET_SAMPLEPACK") {
    9034:	b128      	cbz	r0, 9042 <loop+0x15a>
    showSamplePack();
    9036:	f7fd f801 	bl	603c <showSamplePack()>
    903a:	e775      	b.n	8f28 <loop+0x40>
    showMenu();
    903c:	f7fc ff1e 	bl	5e7c <showMenu()>
    9040:	e772      	b.n	8f28 <loop+0x40>
    9042:	4923      	ldr	r1, [pc, #140]	; (90d0 <loop+0x1e8>)
    9044:	6820      	ldr	r0, [r4, #0]
    9046:	f00c fd7b 	bl	15b40 <String::equals(char const*) const>
  } else if (currentMode->name == "SET_WAV") {
    904a:	2800      	cmp	r0, #0
    904c:	f43f af6c 	beq.w	8f28 <loop+0x40>
    showWave();
    9050:	f7fe f820 	bl	7094 <showWave()>
    9054:	e768      	b.n	8f28 <loop+0x40>
    9056:	bf00      	nop
    9058:	2000c96b 	.word	0x2000c96b
    905c:	2000b998 	.word	0x2000b998
    9060:	200038c8 	.word	0x200038c8
    9064:	20007008 	.word	0x20007008
    9068:	20007064 	.word	0x20007064
    906c:	200070c0 	.word	0x200070c0
    9070:	20002848 	.word	0x20002848
    9074:	2000c955 	.word	0x2000c955
    9078:	2000bc24 	.word	0x2000bc24
    907c:	20006be8 	.word	0x20006be8
    9080:	20003c50 	.word	0x20003c50
    9084:	200038e4 	.word	0x200038e4
    9088:	2000c954 	.word	0x2000c954
    908c:	2000bc1c 	.word	0x2000bc1c
    9090:	200045e8 	.word	0x200045e8
    9094:	20002850 	.word	0x20002850
    9098:	20002858 	.word	0x20002858
    909c:	20002864 	.word	0x20002864
    90a0:	20003cb0 	.word	0x20003cb0
    90a4:	2000c953 	.word	0x2000c953
    90a8:	2000b688 	.word	0x2000b688
    90ac:	200069bc 	.word	0x200069bc
    90b0:	200067a8 	.word	0x200067a8
    90b4:	20003294 	.word	0x20003294
    90b8:	20002838 	.word	0x20002838
    90bc:	20003314 	.word	0x20003314
    90c0:	200067bc 	.word	0x200067bc
    90c4:	2000b668 	.word	0x2000b668
    90c8:	2000286c 	.word	0x2000286c
    90cc:	20002874 	.word	0x20002874
    90d0:	20002884 	.word	0x20002884

000090d4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)>:
    bool readNextValue(int16_t *value, uint16_t channel) {
    90d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90d8:	4604      	mov	r4, r0
        if (!_useDualPlaybackHead) {
    90da:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
    bool readNextValue(int16_t *value, uint16_t channel) {
    90de:	460e      	mov	r6, r1
    90e0:	4615      	mov	r5, r2
            if (_playbackRate >= 0 ) {
    90e2:	ed94 7b04 	vldr	d7, [r4, #16]
    bool readNextValue(int16_t *value, uint16_t channel) {
    90e6:	ed2d 8b02 	vpush	{d8}
            if (_playbackRate >= 0 ) {
    90ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
        if (!_useDualPlaybackHead) {
    90ee:	bb48      	cbnz	r0, 9144 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x70>
            if (_playbackRate >= 0 ) {
    90f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90f4:	db22      	blt.n	913c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x68>
                if (_bufferPosition1 >=  _loop_finish )
    90f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    90f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    90fa:	4299      	cmp	r1, r3
    90fc:	da1a      	bge.n	9134 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x60>
            result =  getSourceBufferValue(_bufferPosition1 + channel);
    90fe:	6823      	ldr	r3, [r4, #0]
    9100:	4429      	add	r1, r5
    9102:	f8df 9688 	ldr.w	r9, [pc, #1672]	; 978c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6b8>
    9106:	691b      	ldr	r3, [r3, #16]
    9108:	454b      	cmp	r3, r9
    910a:	f040 81de 	bne.w	94ca <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3f6>
        return _sourceBuffer[index];
    910e:	6d63      	ldr	r3, [r4, #84]	; 0x54
    9110:	f933 8011 	ldrsh.w	r8, [r3, r1, lsl #1]
        if (_interpolationType == ResampleInterpolationType::resampleinterpolation_linear) {
    9114:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    9118:	2b02      	cmp	r3, #2
    911a:	d075      	beq.n	9208 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x134>
        else if (_interpolationType == ResampleInterpolationType::resampleinterpolation_quadratic) {
    911c:	2b03      	cmp	r3, #3
    911e:	f000 8187 	beq.w	9430 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x35c>
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    9122:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
        if (channel == _numChannels - 1) {
    9126:	1e5a      	subs	r2, r3, #1
    9128:	42aa      	cmp	r2, r5
    912a:	f000 80ae 	beq.w	928a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x1b6>
        return true;
    912e:	2001      	movs	r0, #1
        *value = result;
    9130:	f8a6 8000 	strh.w	r8, [r6]
    }
    9134:	ecbd 8b02 	vpop	{d8}
    9138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            } else if (_playbackRate < 0) {
    913c:	f100 816d 	bmi.w	941a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x346>
                if (_bufferPosition1 >=  _loop_finish )
    9140:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9142:	e7dc      	b.n	90fe <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2a>
            if (_playbackRate >= 0.0) {
    9144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
                if (_crossfade == 0.0 && _bufferPosition1 > (_loop_finish - _numChannels) - _crossfadeDurationInSamples) {
    9148:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    914c:	eeb5 7b40 	vcmp.f64	d7, #0.0
            if (_playbackRate >= 0.0) {
    9150:	f2c0 80eb 	blt.w	932a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x256>
                if (_crossfade == 0.0 && _bufferPosition1 > (_loop_finish - _numChannels) - _crossfadeDurationInSamples) {
    9154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9158:	f040 80c5 	bne.w	92e6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x212>
    915c:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    9160:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9162:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9164:	1a9b      	subs	r3, r3, r2
    9166:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9168:	1a98      	subs	r0, r3, r2
    916a:	4281      	cmp	r1, r0
    916c:	f240 80bb 	bls.w	92e6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x212>
                    _crossfade = 1.0 - (( (_loop_finish-_numChannels) - _bufferPosition1 ) / static_cast<double>(_crossfadeDurationInSamples));
    9170:	1a5b      	subs	r3, r3, r1
    9172:	ee07 2a90 	vmov	s15, r2
                    _crossfadeState = 1;
    9176:	2201      	movs	r2, #1
                    _crossfade = 1.0 - (( (_loop_finish-_numChannels) - _bufferPosition1 ) / static_cast<double>(_crossfadeDurationInSamples));
    9178:	ee06 3a90 	vmov	s13, r3
    917c:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    9180:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
                    _bufferPosition2 = _loop_start;
    9184:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    _crossfade = 1.0 - (( (_loop_finish-_numChannels) - _bufferPosition1 ) / static_cast<double>(_crossfadeDurationInSamples));
    9186:	eeb8 6be6 	vcvt.f64.s32	d6, s13
                    _crossfadeState = 1;
    918a:	6422      	str	r2, [r4, #64]	; 0x40
                    _bufferPosition2 = _loop_start;
    918c:	62a3      	str	r3, [r4, #40]	; 0x28
                    _crossfade = 1.0 - (( (_loop_finish-_numChannels) - _bufferPosition1 ) / static_cast<double>(_crossfadeDurationInSamples));
    918e:	ee86 4b05 	vdiv.f64	d4, d6, d5
    9192:	ee37 7b44 	vsub.f64	d7, d7, d4
    9196:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
        if (!_useDualPlaybackHead || _crossfade == 0.0) {
    919a:	eeb5 7b40 	vcmp.f64	d7, #0.0
    919e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91a2:	d0cd      	beq.n	9140 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6c>
        } else if (_crossfade == 1.0){
    91a4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    91a8:	eeb4 7b46 	vcmp.f64	d7, d6
    91ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    91b0:	f000 8182 	beq.w	94b8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3e4>
            int result1 =  getSourceBufferValue(_bufferPosition1 + channel);
    91b4:	6823      	ldr	r3, [r4, #0]
    91b6:	f8df 95d4 	ldr.w	r9, [pc, #1492]	; 978c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6b8>
    91ba:	691b      	ldr	r3, [r3, #16]
    91bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
    91be:	454b      	cmp	r3, r9
    91c0:	4429      	add	r1, r5
    91c2:	f040 82a7 	bne.w	9714 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x640>
    91c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    91c8:	f933 2011 	ldrsh.w	r2, [r3, r1, lsl #1]
            int result2 =  getSourceBufferValue(_bufferPosition2 + channel);
    91cc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    91ce:	ee08 2a10 	vmov	s16, r2
    91d2:	4429      	add	r1, r5
    91d4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
    91d8:	ee06 3a10 	vmov	s12, r3
            result = ((1.0 - _crossfade ) * result1) + ((_crossfade) * result2);
    91dc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    91e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    91e4:	eeb8 8bc8 	vcvt.f64.s32	d8, s16
    91e8:	ee26 6b07 	vmul.f64	d6, d6, d7
    91ec:	ee34 4b47 	vsub.f64	d4, d4, d7
    91f0:	eea4 6b08 	vfma.f64	d6, d4, d8
    91f4:	eebd 7bc6 	vcvt.s32.f64	s14, d6
    91f8:	ee17 3a10 	vmov	r3, s14
    91fc:	fa0f f883 	sxth.w	r8, r3
        if (_interpolationType == ResampleInterpolationType::resampleinterpolation_linear) {
    9200:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
    9204:	2b02      	cmp	r3, #2
    9206:	d189      	bne.n	911c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x48>
            double abs_remainder = abs(_remainder);
    9208:	ed94 7b06 	vldr	d7, [r4, #24]
    920c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9214:	f340 80b2 	ble.w	937c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2a8>
    9218:	eeb0 8b47 	vmov.f64	d8, d7
                if (_playbackRate > 0) {
    921c:	ed94 6b04 	vldr	d6, [r4, #16]
    9220:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    9224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9228:	f340 816c 	ble.w	9504 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x430>
                    if (_remainder - _playbackRate < 0.0){
    922c:	ee37 7b46 	vsub.f64	d7, d7, d6
    9230:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9238:	f100 821d 	bmi.w	9676 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a2>
                if (_numInterpolationPoints < 2)
    923c:	6de7      	ldr	r7, [r4, #92]	; 0x5c
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    923e:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                if (_numInterpolationPoints > 1) {
    9242:	2f01      	cmp	r7, #1
    9244:	f67f af6f 	bls.w	9126 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x52>
                    result = abs_remainder * _interpolationPoints[channel][1].y + (1.0 - abs_remainder) * _interpolationPoints[channel][0].y;
    9248:	6e22      	ldr	r2, [r4, #96]	; 0x60
    924a:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    924e:	f9b2 8006 	ldrsh.w	r8, [r2, #6]
    9252:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
    9256:	ee07 2a90 	vmov	s15, r2
    925a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    925e:	ee07 8a90 	vmov	s15, r8
    9262:	eeb8 5be7 	vcvt.f64.s32	d5, s15
    9266:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    926a:	ee37 7b48 	vsub.f64	d7, d7, d8
    926e:	ee27 7b06 	vmul.f64	d7, d7, d6
    9272:	eea5 7b08 	vfma.f64	d7, d5, d8
    9276:	eebd 7bc7 	vcvt.s32.f64	s14, d7
    927a:	ee17 2a10 	vmov	r2, s14
    927e:	fa0f f882 	sxth.w	r8, r2
        if (channel == _numChannels - 1) {
    9282:	1e5a      	subs	r2, r3, #1
    9284:	42aa      	cmp	r2, r5
    9286:	f47f af52 	bne.w	912e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
            if (!_useDualPlaybackHead) {
    928a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
            _remainder += _playbackRate;
    928e:	ed94 7b06 	vldr	d7, [r4, #24]
    9292:	ed94 6b04 	vldr	d6, [r4, #16]
    9296:	ee37 7b06 	vadd.f64	d7, d7, d6
            auto delta = static_cast<signed int>(_remainder);
    929a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
            _remainder -= static_cast<double>(delta);
    929e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
    92a2:	ee37 7b45 	vsub.f64	d7, d7, d5
    92a6:	ed84 7b06 	vstr	d7, [r4, #24]
            if (!_useDualPlaybackHead) {
    92aa:	2a00      	cmp	r2, #0
    92ac:	d05f      	beq.n	936e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x29a>
                if (_crossfade < 1.0)
    92ae:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    92b2:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    92b6:	eeb4 7bc5 	vcmpe.f64	d7, d5
    92ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    92be:	d505      	bpl.n	92cc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x1f8>
                    _bufferPosition1 += (delta * _numChannels);
    92c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
    92c2:	ee16 1a90 	vmov	r1, s13
    92c6:	fb03 2201 	mla	r2, r3, r1, r2
    92ca:	6262      	str	r2, [r4, #36]	; 0x24
                if (_crossfade > 0.0)
    92cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    92d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    92d4:	f77f af2b 	ble.w	912e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                    _bufferPosition2 += (delta * _numChannels);
    92d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    92da:	ee16 1a90 	vmov	r1, s13
    92de:	fb03 2201 	mla	r2, r3, r1, r2
    92e2:	62a2      	str	r2, [r4, #40]	; 0x28
    92e4:	e723      	b.n	912e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
                } else if (_crossfade == 1.0 && _bufferPosition2 > (_loop_finish - _numChannels)- _crossfadeDurationInSamples) {
    92e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    92ea:	eeb4 7b46 	vcmp.f64	d7, d6
    92ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    92f2:	d155      	bne.n	93a0 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2cc>
    92f4:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    92f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    92fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    92fc:	1a9b      	subs	r3, r3, r2
    92fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9300:	1a98      	subs	r0, r3, r2
    9302:	4281      	cmp	r1, r0
    9304:	d94c      	bls.n	93a0 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2cc>
                    _crossfade = ((_loop_finish - _numChannels) - _bufferPosition2) / static_cast<double>(_crossfadeDurationInSamples);
    9306:	ee07 2a90 	vmov	s15, r2
    930a:	1a5b      	subs	r3, r3, r1
                    _crossfadeState = 2;
    930c:	2202      	movs	r2, #2
                    _crossfade = ((_loop_finish - _numChannels) - _bufferPosition2) / static_cast<double>(_crossfadeDurationInSamples);
    930e:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    9312:	ee07 3a90 	vmov	s15, r3
                    _bufferPosition1 = _loop_start;
    9316:	6c63      	ldr	r3, [r4, #68]	; 0x44
                    _crossfade = ((_loop_finish - _numChannels) - _bufferPosition2) / static_cast<double>(_crossfadeDurationInSamples);
    9318:	eeb8 6be7 	vcvt.f64.s32	d6, s15
                    _crossfadeState = 2;
    931c:	6422      	str	r2, [r4, #64]	; 0x40
                    _bufferPosition1 = _loop_start;
    931e:	6263      	str	r3, [r4, #36]	; 0x24
                    _crossfade = ((_loop_finish - _numChannels) - _bufferPosition2) / static_cast<double>(_crossfadeDurationInSamples);
    9320:	ee86 7b05 	vdiv.f64	d7, d6, d5
    9324:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    _crossfadeState = 2;
    9328:	e737      	b.n	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                if (_crossfade == 0.0 && _bufferPosition1 < _crossfadeDurationInSamples + _header_offset) {
    932a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    932e:	d15c      	bne.n	93ea <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x316>
    9330:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    9332:	68e1      	ldr	r1, [r4, #12]
    9334:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9336:	1888      	adds	r0, r1, r2
    9338:	4283      	cmp	r3, r0
    933a:	d256      	bcs.n	93ea <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x316>
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    933c:	1a5b      	subs	r3, r3, r1
    933e:	ee07 2a90 	vmov	s15, r2
                    _crossfadeState = 1;
    9342:	2201      	movs	r2, #1
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    9344:	ee06 3a90 	vmov	s13, r3
    9348:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    934c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
                    _bufferPosition2 = _loop_finish - _numChannels;
    9350:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    9352:	eeb8 6be6 	vcvt.f64.s32	d6, s13
                    _crossfadeState = 1;
    9356:	6422      	str	r2, [r4, #64]	; 0x40
                    _bufferPosition2 = _loop_finish - _numChannels;
    9358:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    935c:	ee86 4b05 	vdiv.f64	d4, d6, d5
                    _bufferPosition2 = _loop_finish - _numChannels;
    9360:	1a9b      	subs	r3, r3, r2
    9362:	62a3      	str	r3, [r4, #40]	; 0x28
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    9364:	ee37 7b44 	vsub.f64	d7, d7, d4
    9368:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    _crossfadeState = 1;
    936c:	e715      	b.n	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                _bufferPosition1 += (delta * _numChannels);
    936e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9370:	ee16 1a90 	vmov	r1, s13
    9374:	fb03 2201 	mla	r2, r3, r1, r2
    9378:	6262      	str	r2, [r4, #36]	; 0x24
    937a:	e6d8      	b.n	912e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5a>
            if (abs_remainder > 0.0) {
    937c:	f100 822f 	bmi.w	97de <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x70a>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9380:	6e23      	ldr	r3, [r4, #96]	; 0x60
                if (_numInterpolationPoints < 2)
    9382:	6de2      	ldr	r2, [r4, #92]	; 0x5c
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9384:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
                if (_numInterpolationPoints < 2)
    9388:	2a01      	cmp	r2, #1
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    938a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
                _interpolationPoints[channel][1].y = result;
    938e:	f8a3 8006 	strh.w	r8, [r3, #6]
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9392:	8059      	strh	r1, [r3, #2]
                if (_numInterpolationPoints < 2)
    9394:	f240 8128 	bls.w	95e8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x514>
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    9398:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                    result = _interpolationPoints[channel][1].y;
    939c:	4688      	mov	r8, r1
    939e:	e6c2      	b.n	9126 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x52>
                } else if (_crossfadeState == 1) {
    93a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    93a2:	2b01      	cmp	r3, #1
    93a4:	d066      	beq.n	9474 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a0>
                } else if (_crossfadeState == 2) {
    93a6:	2b02      	cmp	r3, #2
    93a8:	f47f aef7 	bne.w	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                    _crossfade = ( (_loop_finish - _numChannels) - _bufferPosition2 ) / static_cast<double>(_crossfadeDurationInSamples);
    93ac:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    93b0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    93b2:	1a9b      	subs	r3, r3, r2
    93b4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    93b6:	1a9b      	subs	r3, r3, r2
    93b8:	ee07 3a90 	vmov	s15, r3
    93bc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    93c0:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    93c4:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    93c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
                    if (_crossfade <= 0.0) {
    93cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
                    _crossfade = ( (_loop_finish - _numChannels) - _bufferPosition2 ) / static_cast<double>(_crossfadeDurationInSamples);
    93d0:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    if (_crossfade <= 0.0) {
    93d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93d8:	f63f aedf 	bhi.w	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                        _crossfadeState = 0;
    93dc:	2300      	movs	r3, #0
                        _crossfade = 0.0;
    93de:	2200      	movs	r2, #0
                        _crossfadeState = 0;
    93e0:	6423      	str	r3, [r4, #64]	; 0x40
                        _crossfade = 0.0;
    93e2:	2300      	movs	r3, #0
    93e4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    93e8:	e6aa      	b.n	9140 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6c>
                } else if (_crossfade == 1.0 && _bufferPosition2 < _crossfadeDurationInSamples + _header_offset) {
    93ea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    93ee:	eeb4 7b46 	vcmp.f64	d7, d6
    93f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93f6:	d106      	bne.n	9406 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x332>
    93f8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    93fa:	68e1      	ldr	r1, [r4, #12]
    93fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    93fe:	1888      	adds	r0, r1, r2
    9400:	4283      	cmp	r3, r0
    9402:	f0c0 80a2 	bcc.w	954a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x476>
                } else if (_crossfadeState == 1) {
    9406:	6c23      	ldr	r3, [r4, #64]	; 0x40
    9408:	2b01      	cmp	r3, #1
    940a:	f000 8155 	beq.w	96b8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5e4>
                } else if (_crossfadeState == 2) {
    940e:	2b02      	cmp	r3, #2
    9410:	f47f aec3 	bne.w	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    9414:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    9416:	68e2      	ldr	r2, [r4, #12]
    9418:	e7cd      	b.n	93b6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2e2>
                if (_play_start == play_start::play_start_sample) {
    941a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
                    if (_bufferPosition1 < _header_offset)
    941e:	6a61      	ldr	r1, [r4, #36]	; 0x24
                if (_play_start == play_start::play_start_sample) {
    9420:	2b00      	cmp	r3, #0
    9422:	f040 808d 	bne.w	9540 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x46c>
                    if (_bufferPosition1 < _header_offset)
    9426:	68e3      	ldr	r3, [r4, #12]
    9428:	4299      	cmp	r1, r3
    942a:	f6bf ae68 	bge.w	90fe <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2a>
    942e:	e681      	b.n	9134 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x60>
            double abs_remainder = abs(_remainder);
    9430:	ed94 7b06 	vldr	d7, [r4, #24]
    9434:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    943c:	dd49      	ble.n	94d2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3fe>
    943e:	eeb0 8b47 	vmov.f64	d8, d7
                if (_playbackRate > 0) {                
    9442:	ed94 6b04 	vldr	d6, [r4, #16]
    9446:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
    944a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    944e:	f340 80d1 	ble.w	95f4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x520>
                    if (_remainder - _playbackRate < 0.0){
    9452:	ee37 7b46 	vsub.f64	d7, d7, d6
    9456:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    945e:	f100 8089 	bmi.w	9574 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4a0>
                if (_numInterpolationPoints >= 4) {
    9462:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    9464:	2b03      	cmp	r3, #3
    9466:	f200 812c 	bhi.w	96c2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5ee>
        if (channel == _numChannels - 1) {
    946a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                    result = 0;
    946e:	f04f 0800 	mov.w	r8, #0
    9472:	e658      	b.n	9126 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x52>
                    _crossfade = 1.0 - (((_loop_finish - _numChannels) - _bufferPosition1) / static_cast<double>(_crossfadeDurationInSamples));
    9474:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    9478:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    947c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    947e:	1a9b      	subs	r3, r3, r2
    9480:	6a62      	ldr	r2, [r4, #36]	; 0x24
    9482:	1a9b      	subs	r3, r3, r2
    9484:	ee07 3a90 	vmov	s15, r3
    9488:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    948c:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    9490:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    9494:	ee86 7b05 	vdiv.f64	d7, d6, d5
    9498:	ee34 7b47 	vsub.f64	d7, d4, d7
                    if (_crossfade >= 1.0) {
    949c:	eeb4 7bc4 	vcmpe.f64	d7, d4
                    _crossfade = 1.0 - (((_loop_finish - _numChannels) - _bufferPosition1) / static_cast<double>(_crossfadeDurationInSamples));
    94a0:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    if (_crossfade >= 1.0) {
    94a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    94a8:	f6ff ae77 	blt.w	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                        _crossfadeState = 0;
    94ac:	2300      	movs	r3, #0
                        _crossfade = 1.0;
    94ae:	2200      	movs	r2, #0
                        _crossfadeState = 0;
    94b0:	6423      	str	r3, [r4, #64]	; 0x40
                        _crossfade = 1.0;
    94b2:	4bb5      	ldr	r3, [pc, #724]	; (9788 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6b4>)
    94b4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            result =  getSourceBufferValue(_bufferPosition2 + channel);
    94b8:	6823      	ldr	r3, [r4, #0]
    94ba:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 978c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6b8>
    94be:	691b      	ldr	r3, [r3, #16]
    94c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    94c2:	454b      	cmp	r3, r9
    94c4:	4429      	add	r1, r5
    94c6:	f43f ae22 	beq.w	910e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3a>
    94ca:	4620      	mov	r0, r4
    94cc:	4798      	blx	r3
    94ce:	4680      	mov	r8, r0
    94d0:	e620      	b.n	9114 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x40>
            if (abs_remainder > 0.0) {
    94d2:	f100 8181 	bmi.w	97d8 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x704>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    94d6:	6e23      	ldr	r3, [r4, #96]	; 0x60
                if (_numInterpolationPoints < 4) {
    94d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    94da:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
                if (_numInterpolationPoints < 4) {
    94de:	2a03      	cmp	r2, #3
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    94e0:	88d9      	ldrh	r1, [r3, #6]
                _interpolationPoints[channel][2].y = _interpolationPoints[channel][3].y;
    94e2:	89d8      	ldrh	r0, [r3, #14]
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    94e4:	8059      	strh	r1, [r3, #2]
                _interpolationPoints[channel][1].y = _interpolationPoints[channel][2].y;
    94e6:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
                _interpolationPoints[channel][3].y = result;
    94ea:	f8a3 800e 	strh.w	r8, [r3, #14]
                _interpolationPoints[channel][1].y = _interpolationPoints[channel][2].y;
    94ee:	80d9      	strh	r1, [r3, #6]
                _interpolationPoints[channel][2].y = _interpolationPoints[channel][3].y;
    94f0:	8158      	strh	r0, [r3, #10]
                if (_numInterpolationPoints < 4) {
    94f2:	f63f af51 	bhi.w	9398 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2c4>
                    _numInterpolationPoints++;
    94f6:	3201      	adds	r2, #1
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    94f8:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                    result = 0;
    94fc:	f04f 0800 	mov.w	r8, #0
                    _numInterpolationPoints++;
    9500:	65e2      	str	r2, [r4, #92]	; 0x5c
    9502:	e610      	b.n	9126 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x52>
                else if (_playbackRate < 0) {
    9504:	f57f ae9a 	bpl.w	923c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x168>
                    if (_remainder - _playbackRate > 0.0){
    9508:	ee37 7b46 	vsub.f64	d7, d7, d6
    950c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9514:	f77f ae92 	ble.w	923c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x168>
                        if (!_useDualPlaybackHead) {
    9518:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    951c:	2b00      	cmp	r3, #0
    951e:	f040 80e7 	bne.w	96f0 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x61c>
                            if (_numInterpolationPoints < 2  && _playbackRate < -1.0) {
    9522:	6de7      	ldr	r7, [r4, #92]	; 0x5c
    9524:	2f01      	cmp	r7, #1
    9526:	f240 810f 	bls.w	9748 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x674>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    952a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    952c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    9530:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9534:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
                        _interpolationPoints[channel][1].y = result;
    9538:	f8a1 8006 	strh.w	r8, [r1, #6]
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    953c:	804a      	strh	r2, [r1, #2]
    953e:	e68a      	b.n	9256 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x182>
                    if (_bufferPosition1 < _loop_start)
    9540:	6c63      	ldr	r3, [r4, #68]	; 0x44
    9542:	4299      	cmp	r1, r3
    9544:	f6bf addb 	bge.w	90fe <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x2a>
    9548:	e5f4      	b.n	9134 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x60>
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    954a:	ee07 2a90 	vmov	s15, r2
    954e:	1a5b      	subs	r3, r3, r1
                    _crossfadeState = 2;
    9550:	2202      	movs	r2, #2
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    9552:	eeb8 5b67 	vcvt.f64.u32	d5, s15
    9556:	ee07 3a90 	vmov	s15, r3
                    _crossfadeState = 2;
    955a:	6422      	str	r2, [r4, #64]	; 0x40
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    955c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
                    _bufferPosition1 = _loop_finish - _numChannels;
    9560:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    9564:	6ca3      	ldr	r3, [r4, #72]	; 0x48
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    9566:	ee86 7b05 	vdiv.f64	d7, d6, d5
                    _bufferPosition1 = _loop_finish - _numChannels;
    956a:	1a9b      	subs	r3, r3, r2
    956c:	6263      	str	r3, [r4, #36]	; 0x24
                    _crossfade = (_bufferPosition2 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    956e:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
                    _crossfadeState = 2;
    9572:	e612      	b.n	919a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0xc6>
                        int numberOfSamplesToUpdate = - floor(_remainder - _playbackRate);
    9574:	febb 7b47 	vrintm.f64	d7, d7
    9578:	eeb1 7b47 	vneg.f64	d7, d7
    957c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    9580:	ee17 3a90 	vmov	r3, s15
    9584:	ee17 aa90 	vmov	sl, s15
    9588:	2b04      	cmp	r3, #4
    958a:	bfa8      	it	ge
    958c:	f04f 0a04 	movge.w	sl, #4
                        for (int i=numberOfSamplesToUpdate; i > 0; i--) {
    9590:	2b00      	cmp	r3, #0
    9592:	f77f af66 	ble.w	9462 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x38e>
                            _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9596:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    959a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    959c:	4640      	mov	r0, r8
    959e:	f853 700b 	ldr.w	r7, [r3, fp]
                            if (!_useDualPlaybackHead) {
    95a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                            _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    95a6:	88fa      	ldrh	r2, [r7, #6]
    95a8:	807a      	strh	r2, [r7, #2]
                            _interpolationPoints[channel][1].y = _interpolationPoints[channel][2].y;
    95aa:	897a      	ldrh	r2, [r7, #10]
    95ac:	80fa      	strh	r2, [r7, #6]
                            _interpolationPoints[channel][2].y = _interpolationPoints[channel][3].y;
    95ae:	89fa      	ldrh	r2, [r7, #14]
    95b0:	817a      	strh	r2, [r7, #10]
                            if (!_useDualPlaybackHead) {
    95b2:	b973      	cbnz	r3, 95d2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4fe>
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1-(i*_numChannels)+1+channel);
    95b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    95b6:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    95ba:	fb0a 3112 	mls	r1, sl, r2, r3
    95be:	6823      	ldr	r3, [r4, #0]
    95c0:	691b      	ldr	r3, [r3, #16]
    95c2:	3101      	adds	r1, #1
    95c4:	454b      	cmp	r3, r9
    95c6:	4429      	add	r1, r5
    95c8:	f040 80a1 	bne.w	970e <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x63a>
    95cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    95ce:	f933 0011 	ldrsh.w	r0, [r3, r1, lsl #1]
                            if (_numInterpolationPoints < 4) _numInterpolationPoints++;
    95d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1-(i*_numChannels)+1+channel);
    95d4:	81f8      	strh	r0, [r7, #14]
                            if (_numInterpolationPoints < 4) _numInterpolationPoints++;
    95d6:	2b03      	cmp	r3, #3
    95d8:	f103 0301 	add.w	r3, r3, #1
    95dc:	bf98      	it	ls
    95de:	65e3      	strls	r3, [r4, #92]	; 0x5c
                        for (int i=numberOfSamplesToUpdate; i > 0; i--) {
    95e0:	f1ba 0a01 	subs.w	sl, sl, #1
    95e4:	d1d9      	bne.n	959a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4c6>
    95e6:	e73c      	b.n	9462 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x38e>
                    _numInterpolationPoints++;
    95e8:	3201      	adds	r2, #1
                result =_interpolationPoints[channel][0].y;
    95ea:	4688      	mov	r8, r1
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    95ec:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                    _numInterpolationPoints++;
    95f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    95f2:	e598      	b.n	9126 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x52>
                else if (_playbackRate < 0) {                
    95f4:	f57f af35 	bpl.w	9462 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x38e>
                    if (_remainder - _playbackRate > 0.0){
    95f8:	ee37 7b46 	vsub.f64	d7, d7, d6
    95fc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9604:	f77f af2d 	ble.w	9462 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x38e>
                        int numberOfSamplesToUpdate =  ceil(_remainder - _playbackRate);
    9608:	feba 7b47 	vrintp.f64	d7, d7
    960c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    9610:	ee17 3a90 	vmov	r3, s15
    9614:	ee17 aa90 	vmov	sl, s15
    9618:	2b04      	cmp	r3, #4
    961a:	bfa8      	it	ge
    961c:	f04f 0a04 	movge.w	sl, #4
                        for (int i=numberOfSamplesToUpdate; i > 0; i--) {
    9620:	2b00      	cmp	r3, #0
    9622:	f77f af1e 	ble.w	9462 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x38e>
                            _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9626:	ea4f 0b85 	mov.w	fp, r5, lsl #2
    962a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    962c:	4640      	mov	r0, r8
    962e:	f853 700b 	ldr.w	r7, [r3, fp]
                            if (!_useDualPlaybackHead) {
    9632:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                            _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9636:	88fa      	ldrh	r2, [r7, #6]
    9638:	807a      	strh	r2, [r7, #2]
                            _interpolationPoints[channel][1].y = _interpolationPoints[channel][2].y;
    963a:	897a      	ldrh	r2, [r7, #10]
    963c:	80fa      	strh	r2, [r7, #6]
                            _interpolationPoints[channel][2].y = _interpolationPoints[channel][3].y;
    963e:	89fa      	ldrh	r2, [r7, #14]
    9640:	817a      	strh	r2, [r7, #10]
                            if (!_useDualPlaybackHead) {
    9642:	b96b      	cbnz	r3, 9660 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x58c>
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1+(i*_numChannels)-1+channel);
    9644:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9646:	f9b4 204c 	ldrsh.w	r2, [r4, #76]	; 0x4c
    964a:	fb0a 3102 	mla	r1, sl, r2, r3
    964e:	6823      	ldr	r3, [r4, #0]
    9650:	691b      	ldr	r3, [r3, #16]
    9652:	3901      	subs	r1, #1
    9654:	454b      	cmp	r3, r9
    9656:	4429      	add	r1, r5
    9658:	d16d      	bne.n	9736 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x662>
    965a:	6d63      	ldr	r3, [r4, #84]	; 0x54
    965c:	f933 0011 	ldrsh.w	r0, [r3, r1, lsl #1]
                            if (_numInterpolationPoints < 4) _numInterpolationPoints++;
    9660:	6de3      	ldr	r3, [r4, #92]	; 0x5c
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1+(i*_numChannels)-1+channel);
    9662:	81f8      	strh	r0, [r7, #14]
                            if (_numInterpolationPoints < 4) _numInterpolationPoints++;
    9664:	2b03      	cmp	r3, #3
    9666:	f103 0301 	add.w	r3, r3, #1
    966a:	bf98      	it	ls
    966c:	65e3      	strls	r3, [r4, #92]	; 0x5c
                        for (int i=numberOfSamplesToUpdate; i > 0; i--) {
    966e:	f1ba 0a01 	subs.w	sl, sl, #1
    9672:	d1da      	bne.n	962a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x556>
    9674:	e6f5      	b.n	9462 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x38e>
                        if (!_useDualPlaybackHead) {
    9676:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    967a:	2b00      	cmp	r3, #0
    967c:	d138      	bne.n	96f0 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x61c>
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    967e:	6de7      	ldr	r7, [r4, #92]	; 0x5c
    9680:	2f01      	cmp	r7, #1
    9682:	f63f af52 	bhi.w	952a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x456>
    9686:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    968a:	eeb4 6bc7 	vcmpe.f64	d6, d7
    968e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9692:	dd53      	ble.n	973c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x668>
    9694:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    9698:	6a61      	ldr	r1, [r4, #36]	; 0x24
    969a:	68e2      	ldr	r2, [r4, #12]
    969c:	1ac9      	subs	r1, r1, r3
    969e:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
    96a2:	dc62      	bgt.n	976a <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x696>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    96a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
    96a6:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    96aa:	88d1      	ldrh	r1, [r2, #6]
                        _interpolationPoints[channel][1].y = result;
    96ac:	f8a2 8006 	strh.w	r8, [r2, #6]
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    96b0:	8051      	strh	r1, [r2, #2]
                            _numInterpolationPoints++;
    96b2:	3701      	adds	r7, #1
    96b4:	65e7      	str	r7, [r4, #92]	; 0x5c
    96b6:	e5c4      	b.n	9242 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x16e>
                    _crossfade = 1.0 - (_bufferPosition1 - _header_offset) / static_cast<double>(_crossfadeDurationInSamples);
    96b8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
    96bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    96be:	68e2      	ldr	r2, [r4, #12]
    96c0:	e6df      	b.n	9482 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x3ae>
                            1.0 + abs_remainder); 
    96c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
                            _interpolationPoints[channel][0].y, 
    96c6:	6e23      	ldr	r3, [r4, #96]	; 0x60
    96c8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
                            1.0 + abs_remainder); 
    96cc:	ee38 0b00 	vadd.f64	d0, d8, d0
                        = fastinterpolate(
    96d0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
    96d4:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    96d8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    96dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    96e0:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
    96e4:	f00b f80e 	bl	14704 <fastinterpolate(short, short, short, short, float)>
        if (channel == _numChannels - 1) {
    96e8:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                        = fastinterpolate(
    96ec:	4680      	mov	r8, r0
    96ee:	e51a      	b.n	9126 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x52>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    96f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
                if (_numInterpolationPoints < 2)
    96f2:	6de7      	ldr	r7, [r4, #92]	; 0x5c
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    96f4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    96f8:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    96fc:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
                        if (_numInterpolationPoints < 2)
    9700:	2f01      	cmp	r7, #1
                        _interpolationPoints[channel][1].y = result;
    9702:	f8a1 8006 	strh.w	r8, [r1, #6]
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9706:	804a      	strh	r2, [r1, #2]
                        if (_numInterpolationPoints < 2)
    9708:	f63f ada5 	bhi.w	9256 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x182>
    970c:	e7d1      	b.n	96b2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5de>
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1-(i*_numChannels)+1+channel);
    970e:	4620      	mov	r0, r4
    9710:	4798      	blx	r3
    9712:	e75e      	b.n	95d2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x4fe>
            int result1 =  getSourceBufferValue(_bufferPosition1 + channel);
    9714:	4620      	mov	r0, r4
    9716:	4798      	blx	r3
            int result2 =  getSourceBufferValue(_bufferPosition2 + channel);
    9718:	6823      	ldr	r3, [r4, #0]
    971a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
            int result1 =  getSourceBufferValue(_bufferPosition1 + channel);
    971c:	ee08 0a10 	vmov	s16, r0
            int result2 =  getSourceBufferValue(_bufferPosition2 + channel);
    9720:	691b      	ldr	r3, [r3, #16]
    9722:	4429      	add	r1, r5
    9724:	454b      	cmp	r3, r9
    9726:	d05d      	beq.n	97e4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x710>
    9728:	4620      	mov	r0, r4
    972a:	4798      	blx	r3
    972c:	ee06 0a10 	vmov	s12, r0
            result = ((1.0 - _crossfade ) * result1) + ((_crossfade) * result2);
    9730:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    9734:	e552      	b.n	91dc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x108>
                                _interpolationPoints[channel][3].y = getSourceBufferValue(_bufferPosition1+(i*_numChannels)-1+channel);
    9736:	4620      	mov	r0, r4
    9738:	4798      	blx	r3
    973a:	e791      	b.n	9660 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x58c>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    973c:	6e23      	ldr	r3, [r4, #96]	; 0x60
    973e:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    9742:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    9746:	e7b0      	b.n	96aa <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5d6>
                            if (_numInterpolationPoints < 2  && _playbackRate < -1.0) {
    9748:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
    974c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    9750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9754:	d41c      	bmi.n	9790 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6bc>
                _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9756:	6e23      	ldr	r3, [r4, #96]	; 0x60
    9758:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
                            if ( _numInterpolationPoints < 2 &&_playbackRate > 1.0 && _bufferPosition1 - _numChannels > _header_offset * 2 ) {
    975c:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9760:	88d1      	ldrh	r1, [r2, #6]
                        _interpolationPoints[channel][1].y = result;
    9762:	f8a2 8006 	strh.w	r8, [r2, #6]
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    9766:	8051      	strh	r1, [r2, #2]
    9768:	e7a3      	b.n	96b2 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x5de>
                                _interpolationPoints[channel][1].y = getSourceBufferValue(_bufferPosition1 - _numChannels);
    976a:	6822      	ldr	r2, [r4, #0]
    976c:	6e20      	ldr	r0, [r4, #96]	; 0x60
    976e:	6912      	ldr	r2, [r2, #16]
    9770:	f850 a025 	ldr.w	sl, [r0, r5, lsl #2]
    9774:	454a      	cmp	r2, r9
    9776:	d11d      	bne.n	97b4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6e0>
    9778:	6d62      	ldr	r2, [r4, #84]	; 0x54
    977a:	f932 0011 	ldrsh.w	r0, [r2, r1, lsl #1]
    977e:	4651      	mov	r1, sl
    9780:	f8aa 0006 	strh.w	r0, [sl, #6]
    9784:	e7ba      	b.n	96fc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x628>
    9786:	bf00      	nop
    9788:	3ff00000 	.word	0x3ff00000
    978c:	000001cd 	.word	0x000001cd
                                _interpolationPoints[channel][1].y = getSourceBufferValue(_bufferPosition1 + _numChannels);
    9790:	6823      	ldr	r3, [r4, #0]
    9792:	6a61      	ldr	r1, [r4, #36]	; 0x24
    9794:	691a      	ldr	r2, [r3, #16]
    9796:	6e20      	ldr	r0, [r4, #96]	; 0x60
    9798:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    979c:	454a      	cmp	r2, r9
    979e:	f850 b025 	ldr.w	fp, [r0, r5, lsl #2]
    97a2:	4419      	add	r1, r3
    97a4:	d10f      	bne.n	97c6 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6f2>
    97a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
    97a8:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    97ac:	4659      	mov	r1, fp
    97ae:	f8ab 0006 	strh.w	r0, [fp, #6]
    97b2:	e7a3      	b.n	96fc <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x628>
                                _interpolationPoints[channel][1].y = getSourceBufferValue(_bufferPosition1 - _numChannels);
    97b4:	4620      	mov	r0, r4
    97b6:	4790      	blx	r2
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    97b8:	6e23      	ldr	r3, [r4, #96]	; 0x60
                        if (_numInterpolationPoints < 2)
    97ba:	6de7      	ldr	r7, [r4, #92]	; 0x5c
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    97bc:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        if (channel == _numChannels - 1) {
    97c0:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    97c4:	e7dc      	b.n	9780 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6ac>
                                _interpolationPoints[channel][1].y = getSourceBufferValue(_bufferPosition1 + _numChannels);
    97c6:	4620      	mov	r0, r4
    97c8:	4790      	blx	r2
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    97ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
                        if (_numInterpolationPoints < 2)
    97cc:	6de7      	ldr	r7, [r4, #92]	; 0x5c
                        _interpolationPoints[channel][0].y = _interpolationPoints[channel][1].y;
    97ce:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
        if (channel == _numChannels - 1) {
    97d2:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
    97d6:	e7ea      	b.n	97ae <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x6da>
            double abs_remainder = abs(_remainder);
    97d8:	eeb1 8b47 	vneg.f64	d8, d7
    97dc:	e631      	b.n	9442 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x36e>
            double abs_remainder = abs(_remainder);
    97de:	eeb1 8b47 	vneg.f64	d8, d7
    97e2:	e51b      	b.n	921c <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x148>
            result = ((1.0 - _crossfade ) * result1) + ((_crossfade) * result2);
    97e4:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
    97e8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    97ea:	e4f3      	b.n	91d4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)+0x100>
    97ec:	0000      	movs	r0, r0
	...

000097f0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()>:

        void stop() {
            reader->stop();
        }

        void update()
    97f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97f4:	ed2d 8b04 	vpush	{d8-d9}
    97f8:	b085      	sub	sp, #20
        {
            int _numChannels = reader->getNumChannels();
    97fa:	6986      	ldr	r6, [r0, #24]
        void update()
    97fc:	af00      	add	r7, sp, #0
                reader->close();
            }
            for (int channel=0; channel < _numChannels; channel++) {
                release(blocks[channel]);
            }
        }
    97fe:	46e9      	mov	r9, sp
        return _numChannels;
    9800:	f9b6 404c 	ldrsh.w	r4, [r6, #76]	; 0x4c
            if (_numChannels == -1)
    9804:	1c63      	adds	r3, r4, #1
    9806:	d023      	beq.n	9850 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x60>
            audio_block_t *blocks[_numChannels];
    9808:	00a3      	lsls	r3, r4, #2
    980a:	3307      	adds	r3, #7
    980c:	f023 0307 	bic.w	r3, r3, #7
    9810:	ebad 0d03 	sub.w	sp, sp, r3
    9814:	466a      	mov	r2, sp
            int16_t *data[_numChannels];
    9816:	ebad 0d03 	sub.w	sp, sp, r3
    bool isPlaying(void) { return _playing; }
    981a:	7933      	ldrb	r3, [r6, #4]
    981c:	46e8      	mov	r8, sp
            audio_block_t *blocks[_numChannels];
    981e:	60fa      	str	r2, [r7, #12]
            if (!reader->isPlaying()) return;
    9820:	b1b3      	cbz	r3, 9850 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x60>
            for (int i=0; i < _numChannels; i++) {
    9822:	2c00      	cmp	r4, #0
    9824:	4605      	mov	r5, r0
    9826:	dd1b      	ble.n	9860 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x70>
    9828:	f1a2 0b04 	sub.w	fp, r2, #4
    982c:	f1a8 0604 	sub.w	r6, r8, #4
    9830:	f04f 0a00 	mov.w	sl, #0
    9834:	e003      	b.n	983e <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x4e>
    9836:	4554      	cmp	r4, sl
                data[i] = blocks[i]->data;
    9838:	f846 3f04 	str.w	r3, [r6, #4]!
            for (int i=0; i < _numChannels; i++) {
    983c:	d00f      	beq.n	985e <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x6e>
                blocks[i] = allocate();
    983e:	f00b faf5 	bl	14e2c <AudioStream::allocate()>
            for (int i=0; i < _numChannels; i++) {
    9842:	f10a 0a01 	add.w	sl, sl, #1
                data[i] = blocks[i]->data;
    9846:	1d03      	adds	r3, r0, #4
                blocks[i] = allocate();
    9848:	f84b 0f04 	str.w	r0, [fp, #4]!
                if (blocks[i] == nullptr) return;
    984c:	2800      	cmp	r0, #0
    984e:	d1f2      	bne.n	9836 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x46>
        }
    9850:	3714      	adds	r7, #20
                return;
    9852:	46cd      	mov	sp, r9
        }
    9854:	46bd      	mov	sp, r7
    9856:	ecbd 8b04 	vpop	{d8-d9}
    985a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if (reader->available()) {
    985e:	69ae      	ldr	r6, [r5, #24]
        return _playing;
    9860:	7933      	ldrb	r3, [r6, #4]
    9862:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    9866:	2b00      	cmp	r3, #0
    9868:	d13c      	bne.n	98e4 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xf4>
                reader->close();
    986a:	6833      	ldr	r3, [r6, #0]
    986c:	4a98      	ldr	r2, [pc, #608]	; (9ad0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2e0>)
    986e:	695b      	ldr	r3, [r3, #20]
    9870:	4293      	cmp	r3, r2
    9872:	f040 8118 	bne.w	9aa6 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2b6>
        if (_playing) {
    9876:	7933      	ldrb	r3, [r6, #4]
    9878:	b1eb      	cbz	r3, 98b6 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xc6>
        if (_playing) {   
    987a:	7933      	ldrb	r3, [r6, #4]
    987c:	2b00      	cmp	r3, #0
    987e:	f040 80fe 	bne.w	9a7e <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x28e>
        if (!_interpolationPoints) return;
    9882:	6e33      	ldr	r3, [r6, #96]	; 0x60
    9884:	b1bb      	cbz	r3, 98b6 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xc6>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    9886:	f8b6 204e 	ldrh.w	r2, [r6, #78]	; 0x4e
    988a:	2a00      	cmp	r2, #0
    988c:	f000 80f9 	beq.w	9a82 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x292>
    9890:	2500      	movs	r5, #0
            delete [] _interpolationPoints[i];
    9892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    9896:	3501      	adds	r5, #1
            delete [] _interpolationPoints[i];
    9898:	b120      	cbz	r0, 98a4 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xb4>
    989a:	f00c ff1f 	bl	166dc <operator delete[](void*)>
    989e:	f8b6 204e 	ldrh.w	r2, [r6, #78]	; 0x4e
        delete [] _interpolationPoints;
    98a2:	6e33      	ldr	r3, [r6, #96]	; 0x60
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    98a4:	4295      	cmp	r5, r2
    98a6:	dbf4      	blt.n	9892 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xa2>
        delete [] _interpolationPoints;
    98a8:	2b00      	cmp	r3, #0
    98aa:	f040 80ea 	bne.w	9a82 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x292>
        _interpolationPoints = nullptr;
    98ae:	2300      	movs	r3, #0
    98b0:	6633      	str	r3, [r6, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
    98b2:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
            for (int channel=0; channel < _numChannels; channel++) {
    98b6:	2c00      	cmp	r4, #0
    98b8:	ddca      	ble.n	9850 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x60>
                release(blocks[channel]);
    98ba:	68fb      	ldr	r3, [r7, #12]
    98bc:	681e      	ldr	r6, [r3, #0]
    98be:	f8d7 800c 	ldr.w	r8, [r7, #12]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    98c2:	2500      	movs	r5, #0
    98c4:	4630      	mov	r0, r6
    98c6:	e001      	b.n	98cc <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xdc>
    98c8:	f858 0f04 	ldr.w	r0, [r8, #4]!
            for (int channel=0; channel < _numChannels; channel++) {
    98cc:	3501      	adds	r5, #1
                release(blocks[channel]);
    98ce:	f00b fb03 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
            for (int channel=0; channel < _numChannels; channel++) {
    98d2:	42ac      	cmp	r4, r5
    98d4:	dcf8      	bgt.n	98c8 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xd8>
        }
    98d6:	3714      	adds	r7, #20
                return;
    98d8:	46cd      	mov	sp, r9
        }
    98da:	46bd      	mov	sp, r7
    98dc:	ecbd 8b04 	vpop	{d8-d9}
    98e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }
    98e4:	466a      	mov	r2, sp
        if (!_playing) return 0;
    98e6:	7933      	ldrb	r3, [r6, #4]
    }
    98e8:	ee09 2a10 	vmov	s18, r2
        if (!_playing) return 0;
    98ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    98f0:	2b00      	cmp	r3, #0
    98f2:	f000 80db 	beq.w	9aac <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2bc>
        int16_t *index[_numChannels];
    98f6:	f9b6 a04c 	ldrsh.w	sl, [r6, #76]	; 0x4c
    98fa:	ea4f 028a 	mov.w	r2, sl, lsl #2
        for (int channel=0; channel < _numChannels; channel++) {
    98fe:	f1ba 0f00 	cmp.w	sl, #0
        int16_t *index[_numChannels];
    9902:	f102 0307 	add.w	r3, r2, #7
    9906:	f023 0307 	bic.w	r3, r3, #7
    990a:	ebad 0d03 	sub.w	sp, sp, r3
    990e:	466b      	mov	r3, sp
        for (int channel=0; channel < _numChannels; channel++) {
    9910:	dd04      	ble.n	991c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x12c>
            index[channel] = (int16_t*)buf[channel];
    9912:	4618      	mov	r0, r3
    9914:	4641      	mov	r1, r8
    9916:	f00c fe41 	bl	1659c <memcpy>
    991a:	4603      	mov	r3, r0
    991c:	3b04      	subs	r3, #4
    991e:	46a3      	mov	fp, r4
    9920:	607b      	str	r3, [r7, #4]
        unsigned int count = 0;
    9922:	2300      	movs	r3, #0
                            _crossfade = 0.0;
    9924:	ed9f 8b68 	vldr	d8, [pc, #416]	; 9ac8 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2d8>
        unsigned int count = 0;
    9928:	60bb      	str	r3, [r7, #8]
    992a:	4653      	mov	r3, sl
            for (int channel=0; channel < _numChannels; channel++) {
    992c:	2b00      	cmp	r3, #0
    992e:	f340 80c7 	ble.w	9ac0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2d0>
    9932:	f8d7 a004 	ldr.w	sl, [r7, #4]
    9936:	f04f 0800 	mov.w	r8, #0
                if (readNextValue(index[channel], channel)) {
    993a:	f85a 4f04 	ldr.w	r4, [sl, #4]!
    993e:	fa1f f288 	uxth.w	r2, r8
    9942:	4630      	mov	r0, r6
    9944:	4621      	mov	r1, r4
    9946:	f7ff fbc5 	bl	90d4 <newdigate::ResamplingReader<short, File>::readNextValue(short*, unsigned short)>
    994a:	2800      	cmp	r0, #0
    994c:	d049      	beq.n	99e2 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1f2>
                    if (channel == _numChannels - 1)
    994e:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9952:	1e5a      	subs	r2, r3, #1
    9954:	4542      	cmp	r2, r8
    9956:	d102      	bne.n	995e <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x16e>
                        count++;
    9958:	68ba      	ldr	r2, [r7, #8]
    995a:	3201      	adds	r2, #1
    995c:	60ba      	str	r2, [r7, #8]
                    index[channel]++;
    995e:	3402      	adds	r4, #2
    9960:	f8ca 4000 	str.w	r4, [sl]
            for (int channel=0; channel < _numChannels; channel++) {
    9964:	f108 0801 	add.w	r8, r8, #1
    9968:	4598      	cmp	r8, r3
    996a:	dbe6      	blt.n	993a <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x14a>
        while (count < nsamples) {
    996c:	68ba      	ldr	r2, [r7, #8]
    996e:	2a7f      	cmp	r2, #127	; 0x7f
    9970:	d9dc      	bls.n	992c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x13c>
    9972:	465c      	mov	r4, fp
    9974:	ee19 3a10 	vmov	r3, s18
                for (int channel=0; channel < _numChannels; channel++) {
    9978:	2c00      	cmp	r4, #0
    997a:	469d      	mov	sp, r3
    997c:	f77f af68 	ble.w	9850 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x60>
    9980:	68bb      	ldr	r3, [r7, #8]
    9982:	ee08 9a10 	vmov	s16, r9
    9986:	68fa      	ldr	r2, [r7, #12]
    9988:	46a9      	mov	r9, r5
    998a:	f103 0b02 	add.w	fp, r3, #2
                    memset( &blocks[channel]->data[n], 0, (AUDIO_BLOCK_SAMPLES - n) * 2);
    998e:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
                for (int channel=0; channel < _numChannels; channel++) {
    9992:	2600      	movs	r6, #0
    9994:	4625      	mov	r5, r4
    9996:	ea4f 034b 	mov.w	r3, fp, lsl #1
    999a:	f1a2 0b04 	sub.w	fp, r2, #4
                    memset( &blocks[channel]->data[n], 0, (AUDIO_BLOCK_SAMPLES - n) * 2);
    999e:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
                for (int channel=0; channel < _numChannels; channel++) {
    99a2:	4698      	mov	r8, r3
                    memset( &blocks[channel]->data[n], 0, (AUDIO_BLOCK_SAMPLES - n) * 2);
    99a4:	f85b 4f04 	ldr.w	r4, [fp, #4]!
    99a8:	4652      	mov	r2, sl
    99aa:	2100      	movs	r1, #0
    99ac:	eb04 0008 	add.w	r0, r4, r8
    99b0:	f018 fd96 	bl	224e0 <memset>
                    transmit(blocks[channel], channel);
    99b4:	4621      	mov	r1, r4
    99b6:	b2f2      	uxtb	r2, r6
                for (int channel=0; channel < _numChannels; channel++) {
    99b8:	3601      	adds	r6, #1
                    transmit(blocks[channel], channel);
    99ba:	4648      	mov	r0, r9
    99bc:	f00b fab4 	bl	14f28 <AudioStream::transmit(audio_block_struct*, unsigned char)>
                for (int channel=0; channel < _numChannels; channel++) {
    99c0:	42b5      	cmp	r5, r6
    99c2:	d1ef      	bne.n	99a4 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x1b4>
    99c4:	462c      	mov	r4, r5
    99c6:	464d      	mov	r5, r9
    99c8:	ee18 9a10 	vmov	r9, s16
                if(_numChannels == 1) {
    99cc:	2c01      	cmp	r4, #1
    99ce:	f47f af74 	bne.w	98ba <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xca>
                    transmit(blocks[0], 1);
    99d2:	68fb      	ldr	r3, [r7, #12]
    99d4:	4622      	mov	r2, r4
    99d6:	4628      	mov	r0, r5
    99d8:	681e      	ldr	r6, [r3, #0]
    99da:	4631      	mov	r1, r6
    99dc:	f00b faa4 	bl	14f28 <AudioStream::transmit(audio_block_struct*, unsigned char)>
            for (int channel=0; channel < _numChannels; channel++) {
    99e0:	e76d      	b.n	98be <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xce>
                    switch (_loopType) {
    99e2:	f896 3020 	ldrb.w	r3, [r6, #32]
    99e6:	2b01      	cmp	r3, #1
    99e8:	d03b      	beq.n	9a62 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x272>
    99ea:	2b02      	cmp	r3, #2
    99ec:	d110      	bne.n	9a10 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x220>
                            if (_playbackRate >= 0.0) {
    99ee:	ed96 7b04 	vldr	d7, [r6, #16]
    99f2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    99f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    99fa:	db4c      	blt.n	9a96 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2a6>
                                _bufferPosition1 = _loop_finish - _numChannels;
    99fc:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9a00:	6cb2      	ldr	r2, [r6, #72]	; 0x48
    9a02:	1ad2      	subs	r2, r2, r3
    9a04:	6272      	str	r2, [r6, #36]	; 0x24
                            _playbackRate = -_playbackRate;
    9a06:	eeb1 7b47 	vneg.f64	d7, d7
    9a0a:	ed86 7b04 	vstr	d7, [r6, #16]
                            break;
    9a0e:	e7a9      	b.n	9964 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x174>
                            close();
    9a10:	6833      	ldr	r3, [r6, #0]
    9a12:	465c      	mov	r4, fp
    9a14:	4a2e      	ldr	r2, [pc, #184]	; (9ad0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2e0>)
    9a16:	695b      	ldr	r3, [r3, #20]
    9a18:	4293      	cmp	r3, r2
    9a1a:	d14e      	bne.n	9aba <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2ca>
    9a1c:	7933      	ldrb	r3, [r6, #4]
    9a1e:	2b00      	cmp	r3, #0
    9a20:	d0a8      	beq.n	9974 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x184>
        if (_playing) {   
    9a22:	7933      	ldrb	r3, [r6, #4]
    9a24:	b103      	cbz	r3, 9a28 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x238>
            _playing = false;
    9a26:	7130      	strb	r0, [r6, #4]
        if (!_interpolationPoints) return;
    9a28:	6e33      	ldr	r3, [r6, #96]	; 0x60
    9a2a:	2b00      	cmp	r3, #0
    9a2c:	d0a2      	beq.n	9974 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x184>
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    9a2e:	f8b6 204e 	ldrh.w	r2, [r6, #78]	; 0x4e
    9a32:	b172      	cbz	r2, 9a52 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x262>
    9a34:	f04f 0800 	mov.w	r8, #0
            delete [] _interpolationPoints[i];
    9a38:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    9a3c:	f108 0801 	add.w	r8, r8, #1
            delete [] _interpolationPoints[i];
    9a40:	b120      	cbz	r0, 9a4c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x25c>
    9a42:	f00c fe4b 	bl	166dc <operator delete[](void*)>
    9a46:	f8b6 204e 	ldrh.w	r2, [r6, #78]	; 0x4e
        delete [] _interpolationPoints;
    9a4a:	6e33      	ldr	r3, [r6, #96]	; 0x60
        for (int i=0; i<_numInterpolationPointsChannels; i++) {
    9a4c:	4590      	cmp	r8, r2
    9a4e:	dbf3      	blt.n	9a38 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x248>
        delete [] _interpolationPoints;
    9a50:	b113      	cbz	r3, 9a58 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x268>
    9a52:	4618      	mov	r0, r3
    9a54:	f00c fe42 	bl	166dc <operator delete[](void*)>
        _interpolationPoints = nullptr;
    9a58:	2300      	movs	r3, #0
    9a5a:	6633      	str	r3, [r6, #96]	; 0x60
        _numInterpolationPointsChannels = 0;
    9a5c:	f8a6 304e 	strh.w	r3, [r6, #78]	; 0x4e
    9a60:	e788      	b.n	9974 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x184>
                            if (_playbackRate >= 0.0) 
    9a62:	ed96 7b04 	vldr	d7, [r6, #16]
                            _crossfade = 0.0;
    9a66:	ed86 8b0c 	vstr	d8, [r6, #48]	; 0x30
                            if (_playbackRate >= 0.0) 
    9a6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    9a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9a72:	db0a      	blt.n	9a8a <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x29a>
                                _bufferPosition1 = _loop_start;
    9a74:	6c73      	ldr	r3, [r6, #68]	; 0x44
    9a76:	6273      	str	r3, [r6, #36]	; 0x24
                    if (channel == _numChannels - 1)
    9a78:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9a7c:	e772      	b.n	9964 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x174>
            _playing = false;
    9a7e:	7131      	strb	r1, [r6, #4]
    9a80:	e6ff      	b.n	9882 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x92>
        delete [] _interpolationPoints;
    9a82:	4618      	mov	r0, r3
    9a84:	f00c fe2a 	bl	166dc <operator delete[](void*)>
    9a88:	e711      	b.n	98ae <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xbe>
                                _bufferPosition1 = _loop_finish - _numChannels;
    9a8a:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9a8e:	6cb2      	ldr	r2, [r6, #72]	; 0x48
    9a90:	1ad2      	subs	r2, r2, r3
    9a92:	6272      	str	r2, [r6, #36]	; 0x24
    9a94:	e766      	b.n	9964 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x174>
                                if (_play_start == play_start::play_start_sample)
    9a96:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
    9a9a:	b94b      	cbnz	r3, 9ab0 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x2c0>
                                    _bufferPosition1 = _header_offset;
    9a9c:	68f3      	ldr	r3, [r6, #12]
    9a9e:	6273      	str	r3, [r6, #36]	; 0x24
                    if (channel == _numChannels - 1)
    9aa0:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9aa4:	e7af      	b.n	9a06 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x216>
                reader->close();
    9aa6:	4630      	mov	r0, r6
    9aa8:	4798      	blx	r3
    9aaa:	e704      	b.n	98b6 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0xc6>
        if (!_playing) return 0;
    9aac:	60ba      	str	r2, [r7, #8]
    9aae:	e761      	b.n	9974 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x184>
                                    _bufferPosition1 = _loop_start;
    9ab0:	6c73      	ldr	r3, [r6, #68]	; 0x44
    9ab2:	6273      	str	r3, [r6, #36]	; 0x24
                    if (channel == _numChannels - 1)
    9ab4:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9ab8:	e7a5      	b.n	9a06 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x216>
                            close();
    9aba:	4630      	mov	r0, r6
    9abc:	4798      	blx	r3
    9abe:	e759      	b.n	9974 <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x184>
    9ac0:	f9b6 304c 	ldrsh.w	r3, [r6, #76]	; 0x4c
    9ac4:	e732      	b.n	992c <AudioPlayResmp<newdigate::ResamplingArrayReader>::update()+0x13c>
    9ac6:	bf00      	nop
	...
    9ad0:	00000c81 	.word	0x00000c81

00009ad4 <_GLOBAL__sub_I_usedFiles>:
}
    9ad4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9ad8:	b085      	sub	sp, #20
    9ada:	4dad      	ldr	r5, [pc, #692]	; (9d90 <_GLOBAL__sub_I_usedFiles+0x2bc>)
    EEPROMClass()                        { eeprom_initialize(); }
    9adc:	f00c fafa 	bl	160d4 <eeprom_initialize>
    9ae0:	4aac      	ldr	r2, [pc, #688]	; (9d94 <_GLOBAL__sub_I_usedFiles+0x2c0>)
    9ae2:	48ad      	ldr	r0, [pc, #692]	; (9d98 <_GLOBAL__sub_I_usedFiles+0x2c4>)
    9ae4:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
    9ae8:	4eac      	ldr	r6, [pc, #688]	; (9d9c <_GLOBAL__sub_I_usedFiles+0x2c8>)
    9aea:	210a      	movs	r1, #10
    9aec:	6010      	str	r0, [r2, #0]
    9aee:	f1a0 606e 	sub.w	r0, r0, #249561088	; 0xee00000
    9af2:	4bab      	ldr	r3, [pc, #684]	; (9da0 <_GLOBAL__sub_I_usedFiles+0x2cc>)
    9af4:	2400      	movs	r4, #0
    9af6:	f5a0 203e 	sub.w	r0, r0, #778240	; 0xbe000
    9afa:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    9afe:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
    9b02:	f6a0 30e2 	subw	r0, r0, #3042	; 0xbe2
    9b06:	605c      	str	r4, [r3, #4]
    9b08:	61dc      	str	r4, [r3, #28]
    9b0a:	6050      	str	r0, [r2, #4]
    9b0c:	48a5      	ldr	r0, [pc, #660]	; (9da4 <_GLOBAL__sub_I_usedFiles+0x2d0>)
    9b0e:	621c      	str	r4, [r3, #32]
    9b10:	6090      	str	r0, [r2, #8]
    9b12:	48a5      	ldr	r0, [pc, #660]	; (9da8 <_GLOBAL__sub_I_usedFiles+0x2d4>)
    9b14:	625c      	str	r4, [r3, #36]	; 0x24
                        "samples/_9.wav",
                        "samples/_10.wav",
                        "samples/_11.wav",
                        "samples/_12.wav",
                        "samples/_13.wav"
                       };
    9b16:	49a5      	ldr	r1, [pc, #660]	; (9dac <_GLOBAL__sub_I_usedFiles+0x2d8>)
    9b18:	e9c2 5003 	strd	r5, r0, [r2, #12]
    9b1c:	f6a0 200f 	subw	r0, r0, #2575	; 0xa0f
    9b20:	6150      	str	r0, [r2, #20]
    9b22:	48a3      	ldr	r0, [pc, #652]	; (9db0 <_GLOBAL__sub_I_usedFiles+0x2dc>)
    9b24:	e9c2 6006 	strd	r6, r0, [r2, #24]
    9b28:	48a2      	ldr	r0, [pc, #648]	; (9db4 <_GLOBAL__sub_I_usedFiles+0x2e0>)
    9b2a:	e9c2 7008 	strd	r7, r0, [r2, #32]
    9b2e:	2014      	movs	r0, #20
    9b30:	6290      	str	r0, [r2, #40]	; 0x28
    9b32:	f04f 5020 	mov.w	r0, #671088640	; 0x28000000
    9b36:	4aa0      	ldr	r2, [pc, #640]	; (9db8 <_GLOBAL__sub_I_usedFiles+0x2e4>)
    9b38:	6018      	str	r0, [r3, #0]
    9b3a:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
    9b3e:	609a      	str	r2, [r3, #8]
    9b40:	4a9e      	ldr	r2, [pc, #632]	; (9dbc <_GLOBAL__sub_I_usedFiles+0x2e8>)
    9b42:	e9c3 0203 	strd	r0, r2, [r3, #12]
    9b46:	489e      	ldr	r0, [pc, #632]	; (9dc0 <_GLOBAL__sub_I_usedFiles+0x2ec>)
    9b48:	4a9e      	ldr	r2, [pc, #632]	; (9dc4 <_GLOBAL__sub_I_usedFiles+0x2f0>)
    9b4a:	e9c3 0205 	strd	r0, r2, [r3, #20]
    9b4e:	4a9e      	ldr	r2, [pc, #632]	; (9dc8 <_GLOBAL__sub_I_usedFiles+0x2f4>)
    9b50:	489e      	ldr	r0, [pc, #632]	; (9dcc <_GLOBAL__sub_I_usedFiles+0x2f8>)
    9b52:	629a      	str	r2, [r3, #40]	; 0x28
    9b54:	f00b ff08 	bl	15968 <String::String(char const*)>
    9b58:	499d      	ldr	r1, [pc, #628]	; (9dd0 <_GLOBAL__sub_I_usedFiles+0x2fc>)
    9b5a:	489e      	ldr	r0, [pc, #632]	; (9dd4 <_GLOBAL__sub_I_usedFiles+0x300>)
    9b5c:	f00b ff04 	bl	15968 <String::String(char const*)>
    9b60:	499d      	ldr	r1, [pc, #628]	; (9dd8 <_GLOBAL__sub_I_usedFiles+0x304>)
    9b62:	489e      	ldr	r0, [pc, #632]	; (9ddc <_GLOBAL__sub_I_usedFiles+0x308>)
    9b64:	f00b ff00 	bl	15968 <String::String(char const*)>
    9b68:	499d      	ldr	r1, [pc, #628]	; (9de0 <_GLOBAL__sub_I_usedFiles+0x30c>)
    9b6a:	489e      	ldr	r0, [pc, #632]	; (9de4 <_GLOBAL__sub_I_usedFiles+0x310>)
    9b6c:	f00b fefc 	bl	15968 <String::String(char const*)>
    9b70:	499d      	ldr	r1, [pc, #628]	; (9de8 <_GLOBAL__sub_I_usedFiles+0x314>)
    9b72:	489e      	ldr	r0, [pc, #632]	; (9dec <_GLOBAL__sub_I_usedFiles+0x318>)
    9b74:	f00b fef8 	bl	15968 <String::String(char const*)>
    9b78:	499d      	ldr	r1, [pc, #628]	; (9df0 <_GLOBAL__sub_I_usedFiles+0x31c>)
    9b7a:	489e      	ldr	r0, [pc, #632]	; (9df4 <_GLOBAL__sub_I_usedFiles+0x320>)
    9b7c:	f00b fef4 	bl	15968 <String::String(char const*)>
    9b80:	499d      	ldr	r1, [pc, #628]	; (9df8 <_GLOBAL__sub_I_usedFiles+0x324>)
    9b82:	489e      	ldr	r0, [pc, #632]	; (9dfc <_GLOBAL__sub_I_usedFiles+0x328>)
    9b84:	f00b fef0 	bl	15968 <String::String(char const*)>
    9b88:	499d      	ldr	r1, [pc, #628]	; (9e00 <_GLOBAL__sub_I_usedFiles+0x32c>)
    9b8a:	489e      	ldr	r0, [pc, #632]	; (9e04 <_GLOBAL__sub_I_usedFiles+0x330>)
    9b8c:	f00b feec 	bl	15968 <String::String(char const*)>
    9b90:	499d      	ldr	r1, [pc, #628]	; (9e08 <_GLOBAL__sub_I_usedFiles+0x334>)
    9b92:	489e      	ldr	r0, [pc, #632]	; (9e0c <_GLOBAL__sub_I_usedFiles+0x338>)
    9b94:	f00b fee8 	bl	15968 <String::String(char const*)>
    9b98:	499d      	ldr	r1, [pc, #628]	; (9e10 <_GLOBAL__sub_I_usedFiles+0x33c>)
    9b9a:	489e      	ldr	r0, [pc, #632]	; (9e14 <_GLOBAL__sub_I_usedFiles+0x340>)
    9b9c:	f00b fee4 	bl	15968 <String::String(char const*)>
    9ba0:	499d      	ldr	r1, [pc, #628]	; (9e18 <_GLOBAL__sub_I_usedFiles+0x344>)
    9ba2:	489e      	ldr	r0, [pc, #632]	; (9e1c <_GLOBAL__sub_I_usedFiles+0x348>)
    9ba4:	f00b fee0 	bl	15968 <String::String(char const*)>
    9ba8:	499d      	ldr	r1, [pc, #628]	; (9e20 <_GLOBAL__sub_I_usedFiles+0x34c>)
    9baa:	489e      	ldr	r0, [pc, #632]	; (9e24 <_GLOBAL__sub_I_usedFiles+0x350>)
    9bac:	f00b fedc 	bl	15968 <String::String(char const*)>
    9bb0:	499d      	ldr	r1, [pc, #628]	; (9e28 <_GLOBAL__sub_I_usedFiles+0x354>)
    9bb2:	489e      	ldr	r0, [pc, #632]	; (9e2c <_GLOBAL__sub_I_usedFiles+0x358>)
    9bb4:	f00b fed8 	bl	15968 <String::String(char const*)>
String usedFiles[13] = {"samples/_1.wav",
    9bb8:	4a9d      	ldr	r2, [pc, #628]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9bba:	499e      	ldr	r1, [pc, #632]	; (9e34 <_GLOBAL__sub_I_usedFiles+0x360>)
    9bbc:	4620      	mov	r0, r4
    9bbe:	f00e ffcb 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound0;  // PREV
    9bc2:	489d      	ldr	r0, [pc, #628]	; (9e38 <_GLOBAL__sub_I_usedFiles+0x364>)
    9bc4:	f7f9 fe96 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9bc8:	4a99      	ldr	r2, [pc, #612]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9bca:	499c      	ldr	r1, [pc, #624]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9bcc:	489a      	ldr	r0, [pc, #616]	; (9e38 <_GLOBAL__sub_I_usedFiles+0x364>)
    9bce:	f00e ffc3 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound1;
    9bd2:	489b      	ldr	r0, [pc, #620]	; (9e40 <_GLOBAL__sub_I_usedFiles+0x36c>)
    9bd4:	f7f9 fe8e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9bd8:	4a95      	ldr	r2, [pc, #596]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9bda:	4998      	ldr	r1, [pc, #608]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9bdc:	4898      	ldr	r0, [pc, #608]	; (9e40 <_GLOBAL__sub_I_usedFiles+0x36c>)
    9bde:	f00e ffbb 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound2;
    9be2:	4898      	ldr	r0, [pc, #608]	; (9e44 <_GLOBAL__sub_I_usedFiles+0x370>)
    9be4:	f7f9 fe86 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9be8:	4a91      	ldr	r2, [pc, #580]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9bea:	4994      	ldr	r1, [pc, #592]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9bec:	4895      	ldr	r0, [pc, #596]	; (9e44 <_GLOBAL__sub_I_usedFiles+0x370>)
    9bee:	f00e ffb3 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound3;
    9bf2:	4895      	ldr	r0, [pc, #596]	; (9e48 <_GLOBAL__sub_I_usedFiles+0x374>)
    9bf4:	f7f9 fe7e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9bf8:	4a8d      	ldr	r2, [pc, #564]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9bfa:	4990      	ldr	r1, [pc, #576]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9bfc:	4892      	ldr	r0, [pc, #584]	; (9e48 <_GLOBAL__sub_I_usedFiles+0x374>)
    9bfe:	f00e ffab 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound4;
    9c02:	4892      	ldr	r0, [pc, #584]	; (9e4c <_GLOBAL__sub_I_usedFiles+0x378>)
    9c04:	f7f9 fe76 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c08:	4a89      	ldr	r2, [pc, #548]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c0a:	498c      	ldr	r1, [pc, #560]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c0c:	488f      	ldr	r0, [pc, #572]	; (9e4c <_GLOBAL__sub_I_usedFiles+0x378>)
    9c0e:	f00e ffa3 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound5;
    9c12:	488f      	ldr	r0, [pc, #572]	; (9e50 <_GLOBAL__sub_I_usedFiles+0x37c>)
    9c14:	f7f9 fe6e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c18:	4a85      	ldr	r2, [pc, #532]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c1a:	4988      	ldr	r1, [pc, #544]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c1c:	488c      	ldr	r0, [pc, #560]	; (9e50 <_GLOBAL__sub_I_usedFiles+0x37c>)
    9c1e:	f00e ff9b 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound6;
    9c22:	488c      	ldr	r0, [pc, #560]	; (9e54 <_GLOBAL__sub_I_usedFiles+0x380>)
    9c24:	f7f9 fe66 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c28:	4a81      	ldr	r2, [pc, #516]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c2a:	4984      	ldr	r1, [pc, #528]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c2c:	4889      	ldr	r0, [pc, #548]	; (9e54 <_GLOBAL__sub_I_usedFiles+0x380>)
    9c2e:	f00e ff93 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound7;
    9c32:	4889      	ldr	r0, [pc, #548]	; (9e58 <_GLOBAL__sub_I_usedFiles+0x384>)
    9c34:	f7f9 fe5e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c38:	4a7d      	ldr	r2, [pc, #500]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c3a:	4980      	ldr	r1, [pc, #512]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c3c:	4886      	ldr	r0, [pc, #536]	; (9e58 <_GLOBAL__sub_I_usedFiles+0x384>)
    9c3e:	f00e ff8b 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound8;
    9c42:	4886      	ldr	r0, [pc, #536]	; (9e5c <_GLOBAL__sub_I_usedFiles+0x388>)
    9c44:	f7f9 fe56 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c48:	4a79      	ldr	r2, [pc, #484]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c4a:	497c      	ldr	r1, [pc, #496]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c4c:	4883      	ldr	r0, [pc, #524]	; (9e5c <_GLOBAL__sub_I_usedFiles+0x388>)
    9c4e:	f00e ff83 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound9;
    9c52:	4883      	ldr	r0, [pc, #524]	; (9e60 <_GLOBAL__sub_I_usedFiles+0x38c>)
    9c54:	f7f9 fe4e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c58:	4a75      	ldr	r2, [pc, #468]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c5a:	4978      	ldr	r1, [pc, #480]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c5c:	4880      	ldr	r0, [pc, #512]	; (9e60 <_GLOBAL__sub_I_usedFiles+0x38c>)
    9c5e:	f00e ff7b 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound10;
    9c62:	4880      	ldr	r0, [pc, #512]	; (9e64 <_GLOBAL__sub_I_usedFiles+0x390>)
    9c64:	f7f9 fe46 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c68:	4a71      	ldr	r2, [pc, #452]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c6a:	4974      	ldr	r1, [pc, #464]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c6c:	487d      	ldr	r0, [pc, #500]	; (9e64 <_GLOBAL__sub_I_usedFiles+0x390>)
    9c6e:	f00e ff73 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound11;
    9c72:	487d      	ldr	r0, [pc, #500]	; (9e68 <_GLOBAL__sub_I_usedFiles+0x394>)
    9c74:	f7f9 fe3e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c78:	4a6d      	ldr	r2, [pc, #436]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c7a:	4970      	ldr	r1, [pc, #448]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c7c:	487a      	ldr	r0, [pc, #488]	; (9e68 <_GLOBAL__sub_I_usedFiles+0x394>)
    9c7e:	f00e ff6b 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound12;
    9c82:	487a      	ldr	r0, [pc, #488]	; (9e6c <_GLOBAL__sub_I_usedFiles+0x398>)
    9c84:	f7f9 fe36 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c88:	4a69      	ldr	r2, [pc, #420]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c8a:	496c      	ldr	r1, [pc, #432]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c8c:	4877      	ldr	r0, [pc, #476]	; (9e6c <_GLOBAL__sub_I_usedFiles+0x398>)
    9c8e:	f00e ff63 	bl	18b58 <__aeabi_atexit>
AudioPlayArrayResmp sound13;
    9c92:	4877      	ldr	r0, [pc, #476]	; (9e70 <_GLOBAL__sub_I_usedFiles+0x39c>)
    9c94:	f7f9 fe2e 	bl	38f4 <AudioPlayArrayResmp::AudioPlayArrayResmp()>
    9c98:	4a65      	ldr	r2, [pc, #404]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9c9a:	4968      	ldr	r1, [pc, #416]	; (9e3c <_GLOBAL__sub_I_usedFiles+0x368>)
    9c9c:	4874      	ldr	r0, [pc, #464]	; (9e70 <_GLOBAL__sub_I_usedFiles+0x39c>)
    9c9e:	f00e ff5b 	bl	18b58 <__aeabi_atexit>
			if (first_update == NULL) {
    9ca2:	4974      	ldr	r1, [pc, #464]	; (9e74 <_GLOBAL__sub_I_usedFiles+0x3a0>)
		num_inputs(ninput), inputQueue(iqueue) {
    9ca4:	4a74      	ldr	r2, [pc, #464]	; (9e78 <_GLOBAL__sub_I_usedFiles+0x3a4>)
    9ca6:	4875      	ldr	r0, [pc, #468]	; (9e7c <_GLOBAL__sub_I_usedFiles+0x3a8>)
			if (first_update == NULL) {
    9ca8:	680b      	ldr	r3, [r1, #0]
		num_inputs(ninput), inputQueue(iqueue) {
    9caa:	6010      	str	r0, [r2, #0]
    9cac:	6114      	str	r4, [r2, #16]
			active = false;
    9cae:	8114      	strh	r4, [r2, #8]
			destination_list = NULL;
    9cb0:	60d4      	str	r4, [r2, #12]
			if (first_update == NULL) {
    9cb2:	2b00      	cmp	r3, #0
    9cb4:	f000 84ce 	beq.w	a654 <_GLOBAL__sub_I_usedFiles+0xb80>
				for (p=first_update; p->next_update; p = p->next_update) ;
    9cb8:	4619      	mov	r1, r3
    9cba:	695b      	ldr	r3, [r3, #20]
    9cbc:	2b00      	cmp	r3, #0
    9cbe:	d1fb      	bne.n	9cb8 <_GLOBAL__sub_I_usedFiles+0x1e4>
				p->next_update = this;
    9cc0:	614a      	str	r2, [r1, #20]
			cpu_cycles = 0;
    9cc2:	2400      	movs	r4, #0
		magnitude(0), pulse_width(0x40000000),
    9cc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
		tone_offset(0) {
    9cc8:	496d      	ldr	r1, [pc, #436]	; (9e80 <_GLOBAL__sub_I_usedFiles+0x3ac>)
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    9cca:	2501      	movs	r5, #1
			cpu_cycles = 0;
    9ccc:	6054      	str	r4, [r2, #4]
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    9cce:	f04f 0802 	mov.w	r8, #2
			numConnections = 0;
    9cd2:	7294      	strb	r4, [r2, #10]
		: AudioConnection() { connect(source,sourceOutput, destination,destinationInput); }
    9cd4:	f04f 0903 	mov.w	r9, #3
    9cd8:	6011      	str	r1, [r2, #0]
    9cda:	8694      	strh	r4, [r2, #52]	; 0x34
    9cdc:	4869      	ldr	r0, [pc, #420]	; (9e84 <_GLOBAL__sub_I_usedFiles+0x3b0>)
#include "DMAChannel.h"

class AudioOutputAnalog : public AudioStream
{
public:
	AudioOutputAnalog(void) : AudioStream(1, inputQueueArray) { begin(); }
    9cde:	4f6a      	ldr	r7, [pc, #424]	; (9e88 <_GLOBAL__sub_I_usedFiles+0x3b4>)
#if !defined(KINETISL)

class AudioOutputI2S : public AudioStream
{
public:
	AudioOutputI2S(void) : AudioStream(2, inputQueueArray) { begin(); }
    9ce0:	4e6a      	ldr	r6, [pc, #424]	; (9e8c <_GLOBAL__sub_I_usedFiles+0x3b8>)
		magnitude(0), pulse_width(0x40000000),
    9ce2:	e9c2 4309 	strd	r4, r3, [r2, #36]	; 0x24
		phase_accumulator(0), phase_increment(0), phase_offset(0),
    9ce6:	e9c2 4405 	strd	r4, r4, [r2, #20]
    9cea:	e9c2 4407 	strd	r4, r4, [r2, #28]
		arbdata(NULL), sample(0), tone_type(WAVEFORM_SINE),
    9cee:	e9c2 440b 	strd	r4, r4, [r2, #44]	; 0x2c
		tone_offset(0) {
    9cf2:	f002 ffcb 	bl	cc8c <BandLimitedWaveform::BandLimitedWaveform()>
AudioEffectEnvelope      envelope11;     //xy=136.0555877685547,740.8890571594238
    9cf6:	4866      	ldr	r0, [pc, #408]	; (9e90 <_GLOBAL__sub_I_usedFiles+0x3bc>)
    9cf8:	f7f9 f8be 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope1;      //xy=140.3888931274414,127.77785396575928
    9cfc:	4865      	ldr	r0, [pc, #404]	; (9e94 <_GLOBAL__sub_I_usedFiles+0x3c0>)
    9cfe:	f7f9 f8bb 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope2;      //xy=141.38890075683594,180.11119842529297
    9d02:	4865      	ldr	r0, [pc, #404]	; (9e98 <_GLOBAL__sub_I_usedFiles+0x3c4>)
    9d04:	f7f9 f8b8 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope8;      //xy=140.1666717529297,615.5556931495667
    9d08:	4864      	ldr	r0, [pc, #400]	; (9e9c <_GLOBAL__sub_I_usedFiles+0x3c8>)
    9d0a:	f7f9 f8b5 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope12;     //xy=139.2777862548828,890.3334560394287
    9d0e:	4864      	ldr	r0, [pc, #400]	; (9ea0 <_GLOBAL__sub_I_usedFiles+0x3cc>)
    9d10:	f7f9 f8b2 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope10;     //xy=140.1666717529297,700.222384929657
    9d14:	4863      	ldr	r0, [pc, #396]	; (9ea4 <_GLOBAL__sub_I_usedFiles+0x3d0>)
    9d16:	f7f9 f8af 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope3;      //xy=142.66670989990234,241.66674041748047
    9d1a:	4863      	ldr	r0, [pc, #396]	; (9ea8 <_GLOBAL__sub_I_usedFiles+0x3d4>)
    9d1c:	f7f9 f8ac 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope0;      //xy=143.50000762939453,63.55563163757324
    9d20:	4862      	ldr	r0, [pc, #392]	; (9eac <_GLOBAL__sub_I_usedFiles+0x3d8>)
    9d22:	f7f9 f8a9 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope9;      //xy=141.3888931274414,659.000123500824
    9d26:	4862      	ldr	r0, [pc, #392]	; (9eb0 <_GLOBAL__sub_I_usedFiles+0x3dc>)
    9d28:	f7f9 f8a6 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope14;     //xy=142.55548858642578,990.8889307975769
    9d2c:	4861      	ldr	r0, [pc, #388]	; (9eb4 <_GLOBAL__sub_I_usedFiles+0x3e0>)
    9d2e:	f7f9 f8a3 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope13;     //xy=143.0555648803711,933.777853012085
    9d32:	4861      	ldr	r0, [pc, #388]	; (9eb8 <_GLOBAL__sub_I_usedFiles+0x3e4>)
    9d34:	f7f9 f8a0 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope7;      //xy=147.1666717529297,538.1111869812012
    9d38:	4860      	ldr	r0, [pc, #384]	; (9ebc <_GLOBAL__sub_I_usedFiles+0x3e8>)
    9d3a:	f7f9 f89d 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope6;      //xy=148.16667938232422,479.1111869812012
    9d3e:	4860      	ldr	r0, [pc, #384]	; (9ec0 <_GLOBAL__sub_I_usedFiles+0x3ec>)
    9d40:	f7f9 f89a 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope5;      //xy=154.1666717529297,412.11118602752686
    9d44:	485f      	ldr	r0, [pc, #380]	; (9ec4 <_GLOBAL__sub_I_usedFiles+0x3f0>)
    9d46:	f7f9 f897 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioEffectEnvelope      envelope4;      //xy=156.1666717529297,346.11118507385254
    9d4a:	485f      	ldr	r0, [pc, #380]	; (9ec8 <_GLOBAL__sub_I_usedFiles+0x3f4>)
    9d4c:	f7f9 f894 	bl	2e78 <AudioEffectEnvelope::AudioEffectEnvelope()>
AudioConnection pc0(sound0, envelope0);  //prev
    9d50:	4a56      	ldr	r2, [pc, #344]	; (9eac <_GLOBAL__sub_I_usedFiles+0x3d8>)
    9d52:	4939      	ldr	r1, [pc, #228]	; (9e38 <_GLOBAL__sub_I_usedFiles+0x364>)
    9d54:	485d      	ldr	r0, [pc, #372]	; (9ecc <_GLOBAL__sub_I_usedFiles+0x3f8>)
    9d56:	f7f9 f859 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9d5a:	4a35      	ldr	r2, [pc, #212]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9d5c:	495c      	ldr	r1, [pc, #368]	; (9ed0 <_GLOBAL__sub_I_usedFiles+0x3fc>)
    9d5e:	485b      	ldr	r0, [pc, #364]	; (9ecc <_GLOBAL__sub_I_usedFiles+0x3f8>)
    9d60:	f00e fefa 	bl	18b58 <__aeabi_atexit>
AudioConnection pc1(sound1, envelope1);
    9d64:	4a4b      	ldr	r2, [pc, #300]	; (9e94 <_GLOBAL__sub_I_usedFiles+0x3c0>)
    9d66:	4936      	ldr	r1, [pc, #216]	; (9e40 <_GLOBAL__sub_I_usedFiles+0x36c>)
    9d68:	485a      	ldr	r0, [pc, #360]	; (9ed4 <_GLOBAL__sub_I_usedFiles+0x400>)
    9d6a:	f7f9 f84f 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9d6e:	4a30      	ldr	r2, [pc, #192]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9d70:	4957      	ldr	r1, [pc, #348]	; (9ed0 <_GLOBAL__sub_I_usedFiles+0x3fc>)
    9d72:	4858      	ldr	r0, [pc, #352]	; (9ed4 <_GLOBAL__sub_I_usedFiles+0x400>)
    9d74:	f00e fef0 	bl	18b58 <__aeabi_atexit>
AudioConnection pc2(sound2, envelope2);
    9d78:	4a47      	ldr	r2, [pc, #284]	; (9e98 <_GLOBAL__sub_I_usedFiles+0x3c4>)
    9d7a:	4932      	ldr	r1, [pc, #200]	; (9e44 <_GLOBAL__sub_I_usedFiles+0x370>)
    9d7c:	4856      	ldr	r0, [pc, #344]	; (9ed8 <_GLOBAL__sub_I_usedFiles+0x404>)
    9d7e:	f7f9 f845 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9d82:	4a2b      	ldr	r2, [pc, #172]	; (9e30 <_GLOBAL__sub_I_usedFiles+0x35c>)
    9d84:	4952      	ldr	r1, [pc, #328]	; (9ed0 <_GLOBAL__sub_I_usedFiles+0x3fc>)
    9d86:	4854      	ldr	r0, [pc, #336]	; (9ed8 <_GLOBAL__sub_I_usedFiles+0x404>)
    9d88:	f00e fee6 	bl	18b58 <__aeabi_atexit>
    9d8c:	e0a6      	b.n	9edc <_GLOBAL__sub_I_usedFiles+0x408>
    9d8e:	bf00      	nop
    9d90:	03001400 	.word	0x03001400
    9d94:	20004f80 	.word	0x20004f80
    9d98:	2800001e 	.word	0x2800001e
    9d9c:	1414000a 	.word	0x1414000a
    9da0:	20004fc4 	.word	0x20004fc4
    9da4:	011e0304 	.word	0x011e0304
    9da8:	14000a1e 	.word	0x14000a1e
    9dac:	20000838 	.word	0x20000838
    9db0:	00321400 	.word	0x00321400
    9db4:	14000a28 	.word	0x14000a28
    9db8:	00282828 	.word	0x00282828
    9dbc:	140a1400 	.word	0x140a1400
    9dc0:	000a3c00 	.word	0x000a3c00
    9dc4:	001e2800 	.word	0x001e2800
    9dc8:	0a0a0000 	.word	0x0a0a0000
    9dcc:	2000c6c4 	.word	0x2000c6c4
    9dd0:	20000848 	.word	0x20000848
    9dd4:	2000c6d4 	.word	0x2000c6d4
    9dd8:	20000858 	.word	0x20000858
    9ddc:	2000c6e4 	.word	0x2000c6e4
    9de0:	20000868 	.word	0x20000868
    9de4:	2000c6f4 	.word	0x2000c6f4
    9de8:	20000878 	.word	0x20000878
    9dec:	2000c704 	.word	0x2000c704
    9df0:	20000888 	.word	0x20000888
    9df4:	2000c714 	.word	0x2000c714
    9df8:	20000898 	.word	0x20000898
    9dfc:	2000c724 	.word	0x2000c724
    9e00:	200008a8 	.word	0x200008a8
    9e04:	2000c734 	.word	0x2000c734
    9e08:	200008b8 	.word	0x200008b8
    9e0c:	2000c744 	.word	0x2000c744
    9e10:	200008c8 	.word	0x200008c8
    9e14:	2000c754 	.word	0x2000c754
    9e18:	200008d8 	.word	0x200008d8
    9e1c:	2000c764 	.word	0x2000c764
    9e20:	200008e8 	.word	0x200008e8
    9e24:	2000c774 	.word	0x2000c774
    9e28:	200008f8 	.word	0x200008f8
    9e2c:	2000c784 	.word	0x2000c784
    9e30:	20003338 	.word	0x20003338
    9e34:	00000329 	.word	0x00000329
    9e38:	2000ba94 	.word	0x2000ba94
    9e3c:	000008ed 	.word	0x000008ed
    9e40:	2000bab0 	.word	0x2000bab0
    9e44:	2000bb3c 	.word	0x2000bb3c
    9e48:	2000bb58 	.word	0x2000bb58
    9e4c:	2000bb74 	.word	0x2000bb74
    9e50:	2000bb90 	.word	0x2000bb90
    9e54:	2000bbac 	.word	0x2000bbac
    9e58:	2000bbc8 	.word	0x2000bbc8
    9e5c:	2000bbe4 	.word	0x2000bbe4
    9e60:	2000bc00 	.word	0x2000bc00
    9e64:	2000bacc 	.word	0x2000bacc
    9e68:	2000bae8 	.word	0x2000bae8
    9e6c:	2000bb04 	.word	0x2000bb04
    9e70:	2000bb20 	.word	0x2000bb20
    9e74:	20005038 	.word	0x20005038
    9e78:	2000c794 	.word	0x2000c794
    9e7c:	200013a8 	.word	0x200013a8
    9e80:	20001464 	.word	0x20001464
    9e84:	2000c7cc 	.word	0x2000c7cc
    9e88:	200067d0 	.word	0x200067d0
    9e8c:	20006bc8 	.word	0x20006bc8
    9e90:	20006914 	.word	0x20006914
    9e94:	200068a4 	.word	0x200068a4
    9e98:	200069f4 	.word	0x200069f4
    9e9c:	20006b44 	.word	0x20006b44
    9ea0:	2000694c 	.word	0x2000694c
    9ea4:	200068dc 	.word	0x200068dc
    9ea8:	20006a2c 	.word	0x20006a2c
    9eac:	2000686c 	.word	0x2000686c
    9eb0:	20006b7c 	.word	0x20006b7c
    9eb4:	200069bc 	.word	0x200069bc
    9eb8:	20006984 	.word	0x20006984
    9ebc:	20006b0c 	.word	0x20006b0c
    9ec0:	20006ad4 	.word	0x20006ad4
    9ec4:	20006a9c 	.word	0x20006a9c
    9ec8:	20006a64 	.word	0x20006a64
    9ecc:	2000b85c 	.word	0x2000b85c
    9ed0:	0001516d 	.word	0x0001516d
    9ed4:	2000b870 	.word	0x2000b870
    9ed8:	2000b8e8 	.word	0x2000b8e8
AudioConnection pc3(sound3, envelope3);
    9edc:	4aa8      	ldr	r2, [pc, #672]	; (a180 <_GLOBAL__sub_I_usedFiles+0x6ac>)
    9ede:	49a9      	ldr	r1, [pc, #676]	; (a184 <_GLOBAL__sub_I_usedFiles+0x6b0>)
    9ee0:	48a9      	ldr	r0, [pc, #676]	; (a188 <_GLOBAL__sub_I_usedFiles+0x6b4>)
    9ee2:	f7f8 ff93 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9ee6:	4aa9      	ldr	r2, [pc, #676]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9ee8:	49a9      	ldr	r1, [pc, #676]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9eea:	48a7      	ldr	r0, [pc, #668]	; (a188 <_GLOBAL__sub_I_usedFiles+0x6b4>)
    9eec:	f00e fe34 	bl	18b58 <__aeabi_atexit>
AudioConnection pc4(sound4, envelope4);
    9ef0:	4aa8      	ldr	r2, [pc, #672]	; (a194 <_GLOBAL__sub_I_usedFiles+0x6c0>)
    9ef2:	49a9      	ldr	r1, [pc, #676]	; (a198 <_GLOBAL__sub_I_usedFiles+0x6c4>)
    9ef4:	48a9      	ldr	r0, [pc, #676]	; (a19c <_GLOBAL__sub_I_usedFiles+0x6c8>)
    9ef6:	f7f8 ff89 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9efa:	4aa4      	ldr	r2, [pc, #656]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9efc:	49a4      	ldr	r1, [pc, #656]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9efe:	48a7      	ldr	r0, [pc, #668]	; (a19c <_GLOBAL__sub_I_usedFiles+0x6c8>)
    9f00:	f00e fe2a 	bl	18b58 <__aeabi_atexit>
AudioConnection pc5(sound5, envelope5);
    9f04:	4aa6      	ldr	r2, [pc, #664]	; (a1a0 <_GLOBAL__sub_I_usedFiles+0x6cc>)
    9f06:	49a7      	ldr	r1, [pc, #668]	; (a1a4 <_GLOBAL__sub_I_usedFiles+0x6d0>)
    9f08:	48a7      	ldr	r0, [pc, #668]	; (a1a8 <_GLOBAL__sub_I_usedFiles+0x6d4>)
    9f0a:	f7f8 ff7f 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f0e:	4a9f      	ldr	r2, [pc, #636]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f10:	499f      	ldr	r1, [pc, #636]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f12:	48a5      	ldr	r0, [pc, #660]	; (a1a8 <_GLOBAL__sub_I_usedFiles+0x6d4>)
    9f14:	f00e fe20 	bl	18b58 <__aeabi_atexit>
AudioConnection pc6(sound6, envelope6);
    9f18:	4aa4      	ldr	r2, [pc, #656]	; (a1ac <_GLOBAL__sub_I_usedFiles+0x6d8>)
    9f1a:	49a5      	ldr	r1, [pc, #660]	; (a1b0 <_GLOBAL__sub_I_usedFiles+0x6dc>)
    9f1c:	48a5      	ldr	r0, [pc, #660]	; (a1b4 <_GLOBAL__sub_I_usedFiles+0x6e0>)
    9f1e:	f7f8 ff75 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f22:	4a9a      	ldr	r2, [pc, #616]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f24:	499a      	ldr	r1, [pc, #616]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f26:	48a3      	ldr	r0, [pc, #652]	; (a1b4 <_GLOBAL__sub_I_usedFiles+0x6e0>)
    9f28:	f00e fe16 	bl	18b58 <__aeabi_atexit>
AudioConnection pc7(sound7, envelope7);
    9f2c:	4aa2      	ldr	r2, [pc, #648]	; (a1b8 <_GLOBAL__sub_I_usedFiles+0x6e4>)
    9f2e:	49a3      	ldr	r1, [pc, #652]	; (a1bc <_GLOBAL__sub_I_usedFiles+0x6e8>)
    9f30:	48a3      	ldr	r0, [pc, #652]	; (a1c0 <_GLOBAL__sub_I_usedFiles+0x6ec>)
    9f32:	f7f8 ff6b 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f36:	4a95      	ldr	r2, [pc, #596]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f38:	4995      	ldr	r1, [pc, #596]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f3a:	48a1      	ldr	r0, [pc, #644]	; (a1c0 <_GLOBAL__sub_I_usedFiles+0x6ec>)
    9f3c:	f00e fe0c 	bl	18b58 <__aeabi_atexit>
AudioConnection pc8(sound8, envelope8);
    9f40:	4aa0      	ldr	r2, [pc, #640]	; (a1c4 <_GLOBAL__sub_I_usedFiles+0x6f0>)
    9f42:	49a1      	ldr	r1, [pc, #644]	; (a1c8 <_GLOBAL__sub_I_usedFiles+0x6f4>)
    9f44:	48a1      	ldr	r0, [pc, #644]	; (a1cc <_GLOBAL__sub_I_usedFiles+0x6f8>)
    9f46:	f7f8 ff61 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f4a:	4a90      	ldr	r2, [pc, #576]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f4c:	4990      	ldr	r1, [pc, #576]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f4e:	489f      	ldr	r0, [pc, #636]	; (a1cc <_GLOBAL__sub_I_usedFiles+0x6f8>)
    9f50:	f00e fe02 	bl	18b58 <__aeabi_atexit>
AudioConnection pc9(sound9, envelope9);
    9f54:	4a9e      	ldr	r2, [pc, #632]	; (a1d0 <_GLOBAL__sub_I_usedFiles+0x6fc>)
    9f56:	499f      	ldr	r1, [pc, #636]	; (a1d4 <_GLOBAL__sub_I_usedFiles+0x700>)
    9f58:	489f      	ldr	r0, [pc, #636]	; (a1d8 <_GLOBAL__sub_I_usedFiles+0x704>)
    9f5a:	f7f8 ff57 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f5e:	4a8b      	ldr	r2, [pc, #556]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f60:	498b      	ldr	r1, [pc, #556]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f62:	489d      	ldr	r0, [pc, #628]	; (a1d8 <_GLOBAL__sub_I_usedFiles+0x704>)
    9f64:	f00e fdf8 	bl	18b58 <__aeabi_atexit>
AudioConnection pc10(sound10, envelope10);
    9f68:	4a9c      	ldr	r2, [pc, #624]	; (a1dc <_GLOBAL__sub_I_usedFiles+0x708>)
    9f6a:	499d      	ldr	r1, [pc, #628]	; (a1e0 <_GLOBAL__sub_I_usedFiles+0x70c>)
    9f6c:	489d      	ldr	r0, [pc, #628]	; (a1e4 <_GLOBAL__sub_I_usedFiles+0x710>)
    9f6e:	f7f8 ff4d 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f72:	4a86      	ldr	r2, [pc, #536]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f74:	4986      	ldr	r1, [pc, #536]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f76:	489b      	ldr	r0, [pc, #620]	; (a1e4 <_GLOBAL__sub_I_usedFiles+0x710>)
    9f78:	f00e fdee 	bl	18b58 <__aeabi_atexit>
AudioConnection pc11(sound11, envelope11);
    9f7c:	4a9a      	ldr	r2, [pc, #616]	; (a1e8 <_GLOBAL__sub_I_usedFiles+0x714>)
    9f7e:	499b      	ldr	r1, [pc, #620]	; (a1ec <_GLOBAL__sub_I_usedFiles+0x718>)
    9f80:	489b      	ldr	r0, [pc, #620]	; (a1f0 <_GLOBAL__sub_I_usedFiles+0x71c>)
    9f82:	f7f8 ff43 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f86:	4a81      	ldr	r2, [pc, #516]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f88:	4981      	ldr	r1, [pc, #516]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f8a:	4899      	ldr	r0, [pc, #612]	; (a1f0 <_GLOBAL__sub_I_usedFiles+0x71c>)
    9f8c:	f00e fde4 	bl	18b58 <__aeabi_atexit>
AudioConnection pc12(sound12, envelope12);
    9f90:	4a98      	ldr	r2, [pc, #608]	; (a1f4 <_GLOBAL__sub_I_usedFiles+0x720>)
    9f92:	4999      	ldr	r1, [pc, #612]	; (a1f8 <_GLOBAL__sub_I_usedFiles+0x724>)
    9f94:	4899      	ldr	r0, [pc, #612]	; (a1fc <_GLOBAL__sub_I_usedFiles+0x728>)
    9f96:	f7f8 ff39 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9f9a:	4a7c      	ldr	r2, [pc, #496]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9f9c:	497c      	ldr	r1, [pc, #496]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9f9e:	4897      	ldr	r0, [pc, #604]	; (a1fc <_GLOBAL__sub_I_usedFiles+0x728>)
    9fa0:	f00e fdda 	bl	18b58 <__aeabi_atexit>
AudioConnection pc13(sound13, envelope13);
    9fa4:	4a96      	ldr	r2, [pc, #600]	; (a200 <_GLOBAL__sub_I_usedFiles+0x72c>)
    9fa6:	4997      	ldr	r1, [pc, #604]	; (a204 <_GLOBAL__sub_I_usedFiles+0x730>)
    9fa8:	4897      	ldr	r0, [pc, #604]	; (a208 <_GLOBAL__sub_I_usedFiles+0x734>)
    9faa:	f7f8 ff2f 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9fae:	4a77      	ldr	r2, [pc, #476]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9fb0:	4977      	ldr	r1, [pc, #476]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9fb2:	4895      	ldr	r0, [pc, #596]	; (a208 <_GLOBAL__sub_I_usedFiles+0x734>)
    9fb4:	f00e fdd0 	bl	18b58 <__aeabi_atexit>
AudioConnection pc14(waveform1, envelope14);
    9fb8:	4a94      	ldr	r2, [pc, #592]	; (a20c <_GLOBAL__sub_I_usedFiles+0x738>)
    9fba:	4995      	ldr	r1, [pc, #596]	; (a210 <_GLOBAL__sub_I_usedFiles+0x73c>)
    9fbc:	4895      	ldr	r0, [pc, #596]	; (a214 <_GLOBAL__sub_I_usedFiles+0x740>)
    9fbe:	f7f8 ff25 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    9fc2:	4a72      	ldr	r2, [pc, #456]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    9fc4:	4972      	ldr	r1, [pc, #456]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    9fc6:	4893      	ldr	r0, [pc, #588]	; (a214 <_GLOBAL__sub_I_usedFiles+0x740>)
    9fc8:	f00e fdc6 	bl	18b58 <__aeabi_atexit>
AudioMixer4              mix1_a;         //xy=778.1111164093018,143.77784156799316
    9fcc:	4892      	ldr	r0, [pc, #584]	; (a218 <_GLOBAL__sub_I_usedFiles+0x744>)
    9fce:	f7f8 ff87 	bl	2ee0 <AudioMixer4::AudioMixer4()>
AudioMixer4              mix1_b;         //xy=777.1111164093018,461.7777671813965
    9fd2:	4892      	ldr	r0, [pc, #584]	; (a21c <_GLOBAL__sub_I_usedFiles+0x748>)
    9fd4:	f7f8 ff84 	bl	2ee0 <AudioMixer4::AudioMixer4()>
AudioMixer4              mix1_c;         //xy=780.1111145019531,661.7777786254883
    9fd8:	4891      	ldr	r0, [pc, #580]	; (a220 <_GLOBAL__sub_I_usedFiles+0x74c>)
    9fda:	f7f8 ff81 	bl	2ee0 <AudioMixer4::AudioMixer4()>
AudioMixer4              mix1_d;         //xy=790.1110954284668,861.7777919769287
    9fde:	4891      	ldr	r0, [pc, #580]	; (a224 <_GLOBAL__sub_I_usedFiles+0x750>)
    9fe0:	f7f8 ff7e 	bl	2ee0 <AudioMixer4::AudioMixer4()>
AudioMixer4              mix2;           //xy=1020.3333511352539,563.2221755981445
    9fe4:	4890      	ldr	r0, [pc, #576]	; (a228 <_GLOBAL__sub_I_usedFiles+0x754>)
    9fe6:	f7f8 ff7b 	bl	2ee0 <AudioMixer4::AudioMixer4()>
    9fea:	f107 0218 	add.w	r2, r7, #24
    9fee:	2101      	movs	r1, #1
    9ff0:	4638      	mov	r0, r7
    9ff2:	f7f8 ff1d 	bl	2e30 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    9ff6:	4b8d      	ldr	r3, [pc, #564]	; (a22c <_GLOBAL__sub_I_usedFiles+0x758>)
    9ff8:	4638      	mov	r0, r7
    9ffa:	603b      	str	r3, [r7, #0]
    9ffc:	f002 f802 	bl	c004 <AudioOutputAnalog::begin()>
    a000:	2102      	movs	r1, #2
    a002:	f106 0218 	add.w	r2, r6, #24
    a006:	4630      	mov	r0, r6
    a008:	f7f8 ff12 	bl	2e30 <AudioStream::AudioStream(unsigned char, audio_block_struct**)>
    a00c:	4b88      	ldr	r3, [pc, #544]	; (a230 <_GLOBAL__sub_I_usedFiles+0x75c>)
    a00e:	4630      	mov	r0, r6
    a010:	6033      	str	r3, [r6, #0]
    a012:	f002 f955 	bl	c2c0 <AudioOutputI2S::begin()>
	AudioControlSGTL5000(void) : i2c_addr(0x0A) { }
    a016:	4b87      	ldr	r3, [pc, #540]	; (a234 <_GLOBAL__sub_I_usedFiles+0x760>)
    a018:	4a87      	ldr	r2, [pc, #540]	; (a238 <_GLOBAL__sub_I_usedFiles+0x764>)
    a01a:	4888      	ldr	r0, [pc, #544]	; (a23c <_GLOBAL__sub_I_usedFiles+0x768>)
    a01c:	601a      	str	r2, [r3, #0]
    a01e:	220a      	movs	r2, #10
    a020:	721a      	strb	r2, [r3, #8]
    a022:	f00a ffd5 	bl	14fd0 <AudioConnection::AudioConnection()>
    a026:	4b7c      	ldr	r3, [pc, #496]	; (a218 <_GLOBAL__sub_I_usedFiles+0x744>)
    a028:	4622      	mov	r2, r4
    a02a:	4985      	ldr	r1, [pc, #532]	; (a240 <_GLOBAL__sub_I_usedFiles+0x76c>)
    a02c:	9400      	str	r4, [sp, #0]
    a02e:	4883      	ldr	r0, [pc, #524]	; (a23c <_GLOBAL__sub_I_usedFiles+0x768>)
    a030:	f00b f842 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord0(envelope0, 0, mix1_a, 0);
    a034:	4a55      	ldr	r2, [pc, #340]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a036:	4956      	ldr	r1, [pc, #344]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a038:	4880      	ldr	r0, [pc, #512]	; (a23c <_GLOBAL__sub_I_usedFiles+0x768>)
    a03a:	f00e fd8d 	bl	18b58 <__aeabi_atexit>
    a03e:	4881      	ldr	r0, [pc, #516]	; (a244 <_GLOBAL__sub_I_usedFiles+0x770>)
    a040:	f00a ffc6 	bl	14fd0 <AudioConnection::AudioConnection()>
    a044:	4b74      	ldr	r3, [pc, #464]	; (a218 <_GLOBAL__sub_I_usedFiles+0x744>)
    a046:	4622      	mov	r2, r4
    a048:	497f      	ldr	r1, [pc, #508]	; (a248 <_GLOBAL__sub_I_usedFiles+0x774>)
    a04a:	9500      	str	r5, [sp, #0]
    a04c:	487d      	ldr	r0, [pc, #500]	; (a244 <_GLOBAL__sub_I_usedFiles+0x770>)
    a04e:	f00b f833 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord1(envelope1, 0, mix1_a, 1);
    a052:	4a4e      	ldr	r2, [pc, #312]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a054:	494e      	ldr	r1, [pc, #312]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a056:	487b      	ldr	r0, [pc, #492]	; (a244 <_GLOBAL__sub_I_usedFiles+0x770>)
    a058:	f00e fd7e 	bl	18b58 <__aeabi_atexit>
    a05c:	487b      	ldr	r0, [pc, #492]	; (a24c <_GLOBAL__sub_I_usedFiles+0x778>)
    a05e:	f00a ffb7 	bl	14fd0 <AudioConnection::AudioConnection()>
    a062:	4b6d      	ldr	r3, [pc, #436]	; (a218 <_GLOBAL__sub_I_usedFiles+0x744>)
    a064:	4622      	mov	r2, r4
    a066:	497a      	ldr	r1, [pc, #488]	; (a250 <_GLOBAL__sub_I_usedFiles+0x77c>)
    a068:	4878      	ldr	r0, [pc, #480]	; (a24c <_GLOBAL__sub_I_usedFiles+0x778>)
    a06a:	f8cd 8000 	str.w	r8, [sp]
    a06e:	f00b f823 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord2(envelope2, 0, mix1_a, 2);
    a072:	4a46      	ldr	r2, [pc, #280]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a074:	4946      	ldr	r1, [pc, #280]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a076:	4875      	ldr	r0, [pc, #468]	; (a24c <_GLOBAL__sub_I_usedFiles+0x778>)
    a078:	f00e fd6e 	bl	18b58 <__aeabi_atexit>
    a07c:	4875      	ldr	r0, [pc, #468]	; (a254 <_GLOBAL__sub_I_usedFiles+0x780>)
    a07e:	f00a ffa7 	bl	14fd0 <AudioConnection::AudioConnection()>
    a082:	4b65      	ldr	r3, [pc, #404]	; (a218 <_GLOBAL__sub_I_usedFiles+0x744>)
    a084:	4622      	mov	r2, r4
    a086:	493e      	ldr	r1, [pc, #248]	; (a180 <_GLOBAL__sub_I_usedFiles+0x6ac>)
    a088:	4872      	ldr	r0, [pc, #456]	; (a254 <_GLOBAL__sub_I_usedFiles+0x780>)
    a08a:	f8cd 9000 	str.w	r9, [sp]
    a08e:	f00b f813 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord3(envelope3, 0, mix1_a, 3);
    a092:	4a3e      	ldr	r2, [pc, #248]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a094:	493e      	ldr	r1, [pc, #248]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a096:	486f      	ldr	r0, [pc, #444]	; (a254 <_GLOBAL__sub_I_usedFiles+0x780>)
    a098:	f00e fd5e 	bl	18b58 <__aeabi_atexit>
    a09c:	486e      	ldr	r0, [pc, #440]	; (a258 <_GLOBAL__sub_I_usedFiles+0x784>)
    a09e:	f00a ff97 	bl	14fd0 <AudioConnection::AudioConnection()>
    a0a2:	4b5e      	ldr	r3, [pc, #376]	; (a21c <_GLOBAL__sub_I_usedFiles+0x748>)
    a0a4:	4622      	mov	r2, r4
    a0a6:	493b      	ldr	r1, [pc, #236]	; (a194 <_GLOBAL__sub_I_usedFiles+0x6c0>)
    a0a8:	9400      	str	r4, [sp, #0]
    a0aa:	486b      	ldr	r0, [pc, #428]	; (a258 <_GLOBAL__sub_I_usedFiles+0x784>)
    a0ac:	f00b f804 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord4(envelope4, 0, mix1_b, 0);
    a0b0:	4a36      	ldr	r2, [pc, #216]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a0b2:	4937      	ldr	r1, [pc, #220]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a0b4:	4868      	ldr	r0, [pc, #416]	; (a258 <_GLOBAL__sub_I_usedFiles+0x784>)
    a0b6:	f00e fd4f 	bl	18b58 <__aeabi_atexit>
    a0ba:	4868      	ldr	r0, [pc, #416]	; (a25c <_GLOBAL__sub_I_usedFiles+0x788>)
    a0bc:	f00a ff88 	bl	14fd0 <AudioConnection::AudioConnection()>
    a0c0:	4b56      	ldr	r3, [pc, #344]	; (a21c <_GLOBAL__sub_I_usedFiles+0x748>)
    a0c2:	4622      	mov	r2, r4
    a0c4:	4936      	ldr	r1, [pc, #216]	; (a1a0 <_GLOBAL__sub_I_usedFiles+0x6cc>)
    a0c6:	9500      	str	r5, [sp, #0]
    a0c8:	4864      	ldr	r0, [pc, #400]	; (a25c <_GLOBAL__sub_I_usedFiles+0x788>)
    a0ca:	f00a fff5 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord5(envelope5, 0, mix1_b, 1);
    a0ce:	4a2f      	ldr	r2, [pc, #188]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a0d0:	492f      	ldr	r1, [pc, #188]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a0d2:	4862      	ldr	r0, [pc, #392]	; (a25c <_GLOBAL__sub_I_usedFiles+0x788>)
    a0d4:	f00e fd40 	bl	18b58 <__aeabi_atexit>
    a0d8:	4861      	ldr	r0, [pc, #388]	; (a260 <_GLOBAL__sub_I_usedFiles+0x78c>)
    a0da:	f00a ff79 	bl	14fd0 <AudioConnection::AudioConnection()>
    a0de:	4b4f      	ldr	r3, [pc, #316]	; (a21c <_GLOBAL__sub_I_usedFiles+0x748>)
    a0e0:	4622      	mov	r2, r4
    a0e2:	4932      	ldr	r1, [pc, #200]	; (a1ac <_GLOBAL__sub_I_usedFiles+0x6d8>)
    a0e4:	485e      	ldr	r0, [pc, #376]	; (a260 <_GLOBAL__sub_I_usedFiles+0x78c>)
    a0e6:	f8cd 8000 	str.w	r8, [sp]
    a0ea:	f00a ffe5 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord6(envelope6, 0, mix1_b, 2);
    a0ee:	4a27      	ldr	r2, [pc, #156]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a0f0:	4927      	ldr	r1, [pc, #156]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a0f2:	485b      	ldr	r0, [pc, #364]	; (a260 <_GLOBAL__sub_I_usedFiles+0x78c>)
    a0f4:	f00e fd30 	bl	18b58 <__aeabi_atexit>
    a0f8:	485a      	ldr	r0, [pc, #360]	; (a264 <_GLOBAL__sub_I_usedFiles+0x790>)
    a0fa:	f00a ff69 	bl	14fd0 <AudioConnection::AudioConnection()>
    a0fe:	4b47      	ldr	r3, [pc, #284]	; (a21c <_GLOBAL__sub_I_usedFiles+0x748>)
    a100:	4622      	mov	r2, r4
    a102:	492d      	ldr	r1, [pc, #180]	; (a1b8 <_GLOBAL__sub_I_usedFiles+0x6e4>)
    a104:	4857      	ldr	r0, [pc, #348]	; (a264 <_GLOBAL__sub_I_usedFiles+0x790>)
    a106:	f8cd 9000 	str.w	r9, [sp]
    a10a:	f00a ffd5 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord7(envelope7, 0, mix1_b, 3);
    a10e:	4a1f      	ldr	r2, [pc, #124]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a110:	491f      	ldr	r1, [pc, #124]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a112:	4854      	ldr	r0, [pc, #336]	; (a264 <_GLOBAL__sub_I_usedFiles+0x790>)
    a114:	f00e fd20 	bl	18b58 <__aeabi_atexit>
    a118:	4853      	ldr	r0, [pc, #332]	; (a268 <_GLOBAL__sub_I_usedFiles+0x794>)
    a11a:	f00a ff59 	bl	14fd0 <AudioConnection::AudioConnection()>
    a11e:	4b40      	ldr	r3, [pc, #256]	; (a220 <_GLOBAL__sub_I_usedFiles+0x74c>)
    a120:	4622      	mov	r2, r4
    a122:	4928      	ldr	r1, [pc, #160]	; (a1c4 <_GLOBAL__sub_I_usedFiles+0x6f0>)
    a124:	9400      	str	r4, [sp, #0]
    a126:	4850      	ldr	r0, [pc, #320]	; (a268 <_GLOBAL__sub_I_usedFiles+0x794>)
    a128:	f00a ffc6 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord8(envelope8, 0, mix1_c, 0);
    a12c:	4a17      	ldr	r2, [pc, #92]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a12e:	4918      	ldr	r1, [pc, #96]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a130:	484d      	ldr	r0, [pc, #308]	; (a268 <_GLOBAL__sub_I_usedFiles+0x794>)
    a132:	f00e fd11 	bl	18b58 <__aeabi_atexit>
    a136:	484d      	ldr	r0, [pc, #308]	; (a26c <_GLOBAL__sub_I_usedFiles+0x798>)
    a138:	f00a ff4a 	bl	14fd0 <AudioConnection::AudioConnection()>
    a13c:	4b38      	ldr	r3, [pc, #224]	; (a220 <_GLOBAL__sub_I_usedFiles+0x74c>)
    a13e:	4622      	mov	r2, r4
    a140:	4923      	ldr	r1, [pc, #140]	; (a1d0 <_GLOBAL__sub_I_usedFiles+0x6fc>)
    a142:	9500      	str	r5, [sp, #0]
    a144:	4849      	ldr	r0, [pc, #292]	; (a26c <_GLOBAL__sub_I_usedFiles+0x798>)
    a146:	f00a ffb7 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord9(envelope9, 0, mix1_c, 1);
    a14a:	4a10      	ldr	r2, [pc, #64]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a14c:	4910      	ldr	r1, [pc, #64]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a14e:	4847      	ldr	r0, [pc, #284]	; (a26c <_GLOBAL__sub_I_usedFiles+0x798>)
    a150:	f00e fd02 	bl	18b58 <__aeabi_atexit>
    a154:	4846      	ldr	r0, [pc, #280]	; (a270 <_GLOBAL__sub_I_usedFiles+0x79c>)
    a156:	f00a ff3b 	bl	14fd0 <AudioConnection::AudioConnection()>
    a15a:	4b31      	ldr	r3, [pc, #196]	; (a220 <_GLOBAL__sub_I_usedFiles+0x74c>)
    a15c:	4622      	mov	r2, r4
    a15e:	491f      	ldr	r1, [pc, #124]	; (a1dc <_GLOBAL__sub_I_usedFiles+0x708>)
    a160:	4843      	ldr	r0, [pc, #268]	; (a270 <_GLOBAL__sub_I_usedFiles+0x79c>)
    a162:	f8cd 8000 	str.w	r8, [sp]
    a166:	f00a ffa7 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord10(envelope10, 0, mix1_c, 2);
    a16a:	4a08      	ldr	r2, [pc, #32]	; (a18c <_GLOBAL__sub_I_usedFiles+0x6b8>)
    a16c:	4908      	ldr	r1, [pc, #32]	; (a190 <_GLOBAL__sub_I_usedFiles+0x6bc>)
    a16e:	4840      	ldr	r0, [pc, #256]	; (a270 <_GLOBAL__sub_I_usedFiles+0x79c>)
    a170:	f00e fcf2 	bl	18b58 <__aeabi_atexit>
    a174:	483f      	ldr	r0, [pc, #252]	; (a274 <_GLOBAL__sub_I_usedFiles+0x7a0>)
    a176:	f00a ff2b 	bl	14fd0 <AudioConnection::AudioConnection()>
    a17a:	4b29      	ldr	r3, [pc, #164]	; (a220 <_GLOBAL__sub_I_usedFiles+0x74c>)
    a17c:	4622      	mov	r2, r4
    a17e:	e07b      	b.n	a278 <_GLOBAL__sub_I_usedFiles+0x7a4>
    a180:	20006a2c 	.word	0x20006a2c
    a184:	2000bb58 	.word	0x2000bb58
    a188:	2000b8fc 	.word	0x2000b8fc
    a18c:	20003338 	.word	0x20003338
    a190:	0001516d 	.word	0x0001516d
    a194:	20006a64 	.word	0x20006a64
    a198:	2000bb74 	.word	0x2000bb74
    a19c:	2000b910 	.word	0x2000b910
    a1a0:	20006a9c 	.word	0x20006a9c
    a1a4:	2000bb90 	.word	0x2000bb90
    a1a8:	2000b924 	.word	0x2000b924
    a1ac:	20006ad4 	.word	0x20006ad4
    a1b0:	2000bbac 	.word	0x2000bbac
    a1b4:	2000b938 	.word	0x2000b938
    a1b8:	20006b0c 	.word	0x20006b0c
    a1bc:	2000bbc8 	.word	0x2000bbc8
    a1c0:	2000b94c 	.word	0x2000b94c
    a1c4:	20006b44 	.word	0x20006b44
    a1c8:	2000bbe4 	.word	0x2000bbe4
    a1cc:	2000b960 	.word	0x2000b960
    a1d0:	20006b7c 	.word	0x20006b7c
    a1d4:	2000bc00 	.word	0x2000bc00
    a1d8:	2000b974 	.word	0x2000b974
    a1dc:	200068dc 	.word	0x200068dc
    a1e0:	2000bacc 	.word	0x2000bacc
    a1e4:	2000b884 	.word	0x2000b884
    a1e8:	20006914 	.word	0x20006914
    a1ec:	2000bae8 	.word	0x2000bae8
    a1f0:	2000b898 	.word	0x2000b898
    a1f4:	2000694c 	.word	0x2000694c
    a1f8:	2000bb04 	.word	0x2000bb04
    a1fc:	2000b8ac 	.word	0x2000b8ac
    a200:	20006984 	.word	0x20006984
    a204:	2000bb20 	.word	0x2000bb20
    a208:	2000b8c0 	.word	0x2000b8c0
    a20c:	200069bc 	.word	0x200069bc
    a210:	2000c794 	.word	0x2000c794
    a214:	2000b8d4 	.word	0x2000b8d4
    a218:	20006ef0 	.word	0x20006ef0
    a21c:	20006f28 	.word	0x20006f28
    a220:	20006f60 	.word	0x20006f60
    a224:	20006f98 	.word	0x20006f98
    a228:	20006fd0 	.word	0x20006fd0
    a22c:	20001458 	.word	0x20001458
    a230:	200013b4 	.word	0x200013b4
    a234:	2000679c 	.word	0x2000679c
    a238:	20001490 	.word	0x20001490
    a23c:	2000b690 	.word	0x2000b690
    a240:	2000686c 	.word	0x2000686c
    a244:	2000b6a4 	.word	0x2000b6a4
    a248:	200068a4 	.word	0x200068a4
    a24c:	2000b71c 	.word	0x2000b71c
    a250:	200069f4 	.word	0x200069f4
    a254:	2000b730 	.word	0x2000b730
    a258:	2000b7d0 	.word	0x2000b7d0
    a25c:	2000b7e4 	.word	0x2000b7e4
    a260:	2000b7f8 	.word	0x2000b7f8
    a264:	2000b80c 	.word	0x2000b80c
    a268:	2000b820 	.word	0x2000b820
    a26c:	2000b834 	.word	0x2000b834
    a270:	2000b6b8 	.word	0x2000b6b8
    a274:	2000b6cc 	.word	0x2000b6cc
    a278:	49af      	ldr	r1, [pc, #700]	; (a538 <_GLOBAL__sub_I_usedFiles+0xa64>)
    a27a:	48b0      	ldr	r0, [pc, #704]	; (a53c <_GLOBAL__sub_I_usedFiles+0xa68>)
    a27c:	f8cd 9000 	str.w	r9, [sp]
    a280:	f00a ff1a 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord11(envelope11, 0, mix1_c, 3);
    a284:	4aae      	ldr	r2, [pc, #696]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a286:	49af      	ldr	r1, [pc, #700]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a288:	48ac      	ldr	r0, [pc, #688]	; (a53c <_GLOBAL__sub_I_usedFiles+0xa68>)
    a28a:	f00e fc65 	bl	18b58 <__aeabi_atexit>
    a28e:	48ae      	ldr	r0, [pc, #696]	; (a548 <_GLOBAL__sub_I_usedFiles+0xa74>)
    a290:	f00a fe9e 	bl	14fd0 <AudioConnection::AudioConnection()>
    a294:	4bad      	ldr	r3, [pc, #692]	; (a54c <_GLOBAL__sub_I_usedFiles+0xa78>)
    a296:	4622      	mov	r2, r4
    a298:	49ad      	ldr	r1, [pc, #692]	; (a550 <_GLOBAL__sub_I_usedFiles+0xa7c>)
    a29a:	9400      	str	r4, [sp, #0]
    a29c:	48aa      	ldr	r0, [pc, #680]	; (a548 <_GLOBAL__sub_I_usedFiles+0xa74>)
    a29e:	f00a ff0b 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord12(envelope12, 0, mix1_d, 0);
    a2a2:	4aa7      	ldr	r2, [pc, #668]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a2a4:	49a7      	ldr	r1, [pc, #668]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a2a6:	48a8      	ldr	r0, [pc, #672]	; (a548 <_GLOBAL__sub_I_usedFiles+0xa74>)
    a2a8:	f00e fc56 	bl	18b58 <__aeabi_atexit>
    a2ac:	48a9      	ldr	r0, [pc, #676]	; (a554 <_GLOBAL__sub_I_usedFiles+0xa80>)
    a2ae:	f00a fe8f 	bl	14fd0 <AudioConnection::AudioConnection()>
    a2b2:	4ba6      	ldr	r3, [pc, #664]	; (a54c <_GLOBAL__sub_I_usedFiles+0xa78>)
    a2b4:	4622      	mov	r2, r4
    a2b6:	49a8      	ldr	r1, [pc, #672]	; (a558 <_GLOBAL__sub_I_usedFiles+0xa84>)
    a2b8:	9500      	str	r5, [sp, #0]
    a2ba:	48a6      	ldr	r0, [pc, #664]	; (a554 <_GLOBAL__sub_I_usedFiles+0xa80>)
    a2bc:	f00a fefc 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord13(envelope13, 0, mix1_d, 1);
    a2c0:	4a9f      	ldr	r2, [pc, #636]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a2c2:	49a0      	ldr	r1, [pc, #640]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a2c4:	48a3      	ldr	r0, [pc, #652]	; (a554 <_GLOBAL__sub_I_usedFiles+0xa80>)
    a2c6:	f00e fc47 	bl	18b58 <__aeabi_atexit>
AudioConnection          patchCordw1(waveform1, envelope14);
    a2ca:	4aa4      	ldr	r2, [pc, #656]	; (a55c <_GLOBAL__sub_I_usedFiles+0xa88>)
    a2cc:	49a4      	ldr	r1, [pc, #656]	; (a560 <_GLOBAL__sub_I_usedFiles+0xa8c>)
    a2ce:	48a5      	ldr	r0, [pc, #660]	; (a564 <_GLOBAL__sub_I_usedFiles+0xa90>)
    a2d0:	f7f8 fd9c 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    a2d4:	4a9a      	ldr	r2, [pc, #616]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a2d6:	499b      	ldr	r1, [pc, #620]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a2d8:	48a2      	ldr	r0, [pc, #648]	; (a564 <_GLOBAL__sub_I_usedFiles+0xa90>)
    a2da:	f00e fc3d 	bl	18b58 <__aeabi_atexit>
    a2de:	48a2      	ldr	r0, [pc, #648]	; (a568 <_GLOBAL__sub_I_usedFiles+0xa94>)
    a2e0:	f00a fe76 	bl	14fd0 <AudioConnection::AudioConnection()>
    a2e4:	4b99      	ldr	r3, [pc, #612]	; (a54c <_GLOBAL__sub_I_usedFiles+0xa78>)
    a2e6:	4622      	mov	r2, r4
    a2e8:	499c      	ldr	r1, [pc, #624]	; (a55c <_GLOBAL__sub_I_usedFiles+0xa88>)
    a2ea:	489f      	ldr	r0, [pc, #636]	; (a568 <_GLOBAL__sub_I_usedFiles+0xa94>)
    a2ec:	f8cd 8000 	str.w	r8, [sp]
    a2f0:	f00a fee2 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord14(envelope14, 0, mix1_d, 2);
    a2f4:	4a92      	ldr	r2, [pc, #584]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a2f6:	4993      	ldr	r1, [pc, #588]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a2f8:	489b      	ldr	r0, [pc, #620]	; (a568 <_GLOBAL__sub_I_usedFiles+0xa94>)
    a2fa:	f00e fc2d 	bl	18b58 <__aeabi_atexit>
    a2fe:	489b      	ldr	r0, [pc, #620]	; (a56c <_GLOBAL__sub_I_usedFiles+0xa98>)
    a300:	f00a fe66 	bl	14fd0 <AudioConnection::AudioConnection()>
    a304:	4b9a      	ldr	r3, [pc, #616]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a306:	4622      	mov	r2, r4
    a308:	499a      	ldr	r1, [pc, #616]	; (a574 <_GLOBAL__sub_I_usedFiles+0xaa0>)
    a30a:	9400      	str	r4, [sp, #0]
    a30c:	4897      	ldr	r0, [pc, #604]	; (a56c <_GLOBAL__sub_I_usedFiles+0xa98>)
    a30e:	f00a fed3 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord32(mix1_a, 0, mix2, 0);
    a312:	4a8b      	ldr	r2, [pc, #556]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a314:	498b      	ldr	r1, [pc, #556]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a316:	4895      	ldr	r0, [pc, #596]	; (a56c <_GLOBAL__sub_I_usedFiles+0xa98>)
    a318:	f00e fc1e 	bl	18b58 <__aeabi_atexit>
    a31c:	4896      	ldr	r0, [pc, #600]	; (a578 <_GLOBAL__sub_I_usedFiles+0xaa4>)
    a31e:	f00a fe57 	bl	14fd0 <AudioConnection::AudioConnection()>
    a322:	4b93      	ldr	r3, [pc, #588]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a324:	4622      	mov	r2, r4
    a326:	4995      	ldr	r1, [pc, #596]	; (a57c <_GLOBAL__sub_I_usedFiles+0xaa8>)
    a328:	9500      	str	r5, [sp, #0]
    a32a:	4893      	ldr	r0, [pc, #588]	; (a578 <_GLOBAL__sub_I_usedFiles+0xaa4>)
    a32c:	f00a fec4 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord33(mix1_b, 0, mix2, 1);
    a330:	4a83      	ldr	r2, [pc, #524]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a332:	4984      	ldr	r1, [pc, #528]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a334:	4890      	ldr	r0, [pc, #576]	; (a578 <_GLOBAL__sub_I_usedFiles+0xaa4>)
    a336:	f00e fc0f 	bl	18b58 <__aeabi_atexit>
    a33a:	4891      	ldr	r0, [pc, #580]	; (a580 <_GLOBAL__sub_I_usedFiles+0xaac>)
    a33c:	f00a fe48 	bl	14fd0 <AudioConnection::AudioConnection()>
    a340:	4b8b      	ldr	r3, [pc, #556]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a342:	4622      	mov	r2, r4
    a344:	498f      	ldr	r1, [pc, #572]	; (a584 <_GLOBAL__sub_I_usedFiles+0xab0>)
    a346:	488e      	ldr	r0, [pc, #568]	; (a580 <_GLOBAL__sub_I_usedFiles+0xaac>)
    a348:	f8cd 8000 	str.w	r8, [sp]
    a34c:	f00a feb4 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord34(mix1_c, 0, mix2, 2);
    a350:	4a7b      	ldr	r2, [pc, #492]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a352:	497c      	ldr	r1, [pc, #496]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a354:	488a      	ldr	r0, [pc, #552]	; (a580 <_GLOBAL__sub_I_usedFiles+0xaac>)
    a356:	f00e fbff 	bl	18b58 <__aeabi_atexit>
    a35a:	488b      	ldr	r0, [pc, #556]	; (a588 <_GLOBAL__sub_I_usedFiles+0xab4>)
    a35c:	f00a fe38 	bl	14fd0 <AudioConnection::AudioConnection()>
    a360:	4b83      	ldr	r3, [pc, #524]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a362:	4622      	mov	r2, r4
    a364:	4979      	ldr	r1, [pc, #484]	; (a54c <_GLOBAL__sub_I_usedFiles+0xa78>)
    a366:	4888      	ldr	r0, [pc, #544]	; (a588 <_GLOBAL__sub_I_usedFiles+0xab4>)
    a368:	f8cd 9000 	str.w	r9, [sp]
    a36c:	f00a fea4 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord35(mix1_d, 0, mix2, 3);
    a370:	4a73      	ldr	r2, [pc, #460]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a372:	4974      	ldr	r1, [pc, #464]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a374:	4884      	ldr	r0, [pc, #528]	; (a588 <_GLOBAL__sub_I_usedFiles+0xab4>)
    a376:	f00e fbef 	bl	18b58 <__aeabi_atexit>
    a37a:	4884      	ldr	r0, [pc, #528]	; (a58c <_GLOBAL__sub_I_usedFiles+0xab8>)
    a37c:	f00a fe28 	bl	14fd0 <AudioConnection::AudioConnection()>
    a380:	4633      	mov	r3, r6
    a382:	4622      	mov	r2, r4
    a384:	497a      	ldr	r1, [pc, #488]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a386:	9400      	str	r4, [sp, #0]
    a388:	4880      	ldr	r0, [pc, #512]	; (a58c <_GLOBAL__sub_I_usedFiles+0xab8>)
    a38a:	f00a fe95 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord37(mix2, 0, headphones, 0);
    a38e:	4a6c      	ldr	r2, [pc, #432]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a390:	496c      	ldr	r1, [pc, #432]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a392:	487e      	ldr	r0, [pc, #504]	; (a58c <_GLOBAL__sub_I_usedFiles+0xab8>)
    a394:	f00e fbe0 	bl	18b58 <__aeabi_atexit>
    a398:	487d      	ldr	r0, [pc, #500]	; (a590 <_GLOBAL__sub_I_usedFiles+0xabc>)
    a39a:	f00a fe19 	bl	14fd0 <AudioConnection::AudioConnection()>
    a39e:	4633      	mov	r3, r6
    a3a0:	4622      	mov	r2, r4
    a3a2:	4973      	ldr	r1, [pc, #460]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a3a4:	9500      	str	r5, [sp, #0]
    a3a6:	487a      	ldr	r0, [pc, #488]	; (a590 <_GLOBAL__sub_I_usedFiles+0xabc>)
    a3a8:	f00a fe86 	bl	150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>
AudioConnection          patchCord38(mix2, 0, headphones, 1);
    a3ac:	4965      	ldr	r1, [pc, #404]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a3ae:	4a64      	ldr	r2, [pc, #400]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a3b0:	4877      	ldr	r0, [pc, #476]	; (a590 <_GLOBAL__sub_I_usedFiles+0xabc>)
    a3b2:	f00e fbd1 	bl	18b58 <__aeabi_atexit>
    a3b6:	4c77      	ldr	r4, [pc, #476]	; (a594 <_GLOBAL__sub_I_usedFiles+0xac0>)
AudioConnection          patchCord39(mix2, dac);
    a3b8:	463a      	mov	r2, r7
    a3ba:	496d      	ldr	r1, [pc, #436]	; (a570 <_GLOBAL__sub_I_usedFiles+0xa9c>)
    a3bc:	4876      	ldr	r0, [pc, #472]	; (a598 <_GLOBAL__sub_I_usedFiles+0xac4>)
    a3be:	f504 558c 	add.w	r5, r4, #4480	; 0x1180
    a3c2:	f7f8 fd23 	bl	2e0c <AudioConnection::AudioConnection(AudioStream&, AudioStream&)>
    a3c6:	4a5e      	ldr	r2, [pc, #376]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a3c8:	495e      	ldr	r1, [pc, #376]	; (a544 <_GLOBAL__sub_I_usedFiles+0xa70>)
    a3ca:	4873      	ldr	r0, [pc, #460]	; (a598 <_GLOBAL__sub_I_usedFiles+0xac4>)
    a3cc:	f00e fbc4 	bl	18b58 <__aeabi_atexit>
        }
        return candidate;
    }
};

class arraysampler : public audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay> {
    a3d0:	4620      	mov	r0, r4
arraysampler _samplers[14];
    a3d2:	f504 74a0 	add.w	r4, r4, #320	; 0x140
    a3d6:	f7fc fb33 	bl	6a40 <audiosampler<AudioPlayArrayResmp, PitchedArraySamplePlay>::audiosampler()>
    a3da:	42ac      	cmp	r4, r5
    a3dc:	d1f8      	bne.n	a3d0 <_GLOBAL__sub_I_usedFiles+0x8fc>
    a3de:	4a58      	ldr	r2, [pc, #352]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a3e0:	2000      	movs	r0, #0
    a3e2:	496e      	ldr	r1, [pc, #440]	; (a59c <_GLOBAL__sub_I_usedFiles+0xac8>)
Switch multiresponseButton1 = Switch(3);
    a3e4:	270a      	movs	r7, #10
    a3e6:	f00e fbb7 	bl	18b58 <__aeabi_atexit>
File myFile;
    a3ea:	4a55      	ldr	r2, [pc, #340]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a3ec:	496c      	ldr	r1, [pc, #432]	; (a5a0 <_GLOBAL__sub_I_usedFiles+0xacc>)
    a3ee:	26fa      	movs	r6, #250	; 0xfa
    a3f0:	486c      	ldr	r0, [pc, #432]	; (a5a4 <_GLOBAL__sub_I_usedFiles+0xad0>)
    a3f2:	f44f 7596 	mov.w	r5, #300	; 0x12c
    a3f6:	f00e fbaf 	bl	18b58 <__aeabi_atexit>
File myOrigFile;
    a3fa:	4a51      	ldr	r2, [pc, #324]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a3fc:	4968      	ldr	r1, [pc, #416]	; (a5a0 <_GLOBAL__sub_I_usedFiles+0xacc>)
    a3fe:	2432      	movs	r4, #50	; 0x32
    a400:	4869      	ldr	r0, [pc, #420]	; (a5a8 <_GLOBAL__sub_I_usedFiles+0xad4>)
    a402:	f00e fba9 	bl	18b58 <__aeabi_atexit>
File myDestFile;
    a406:	4a4e      	ldr	r2, [pc, #312]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a408:	4965      	ldr	r1, [pc, #404]	; (a5a0 <_GLOBAL__sub_I_usedFiles+0xacc>)
    a40a:	4868      	ldr	r0, [pc, #416]	; (a5ac <_GLOBAL__sub_I_usedFiles+0xad8>)
    a40c:	f00e fba4 	bl	18b58 <__aeabi_atexit>
File newSamplePack;
    a410:	4a4b      	ldr	r2, [pc, #300]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a412:	4963      	ldr	r1, [pc, #396]	; (a5a0 <_GLOBAL__sub_I_usedFiles+0xacc>)
    a414:	4866      	ldr	r0, [pc, #408]	; (a5b0 <_GLOBAL__sub_I_usedFiles+0xadc>)
    a416:	f00e fb9f 	bl	18b58 <__aeabi_atexit>
File sampleFile;
    a41a:	4a49      	ldr	r2, [pc, #292]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a41c:	4960      	ldr	r1, [pc, #384]	; (a5a0 <_GLOBAL__sub_I_usedFiles+0xacc>)
    a41e:	4865      	ldr	r0, [pc, #404]	; (a5b4 <_GLOBAL__sub_I_usedFiles+0xae0>)
    a420:	f00e fb9a 	bl	18b58 <__aeabi_atexit>
String oldButtonString = "";
    a424:	4964      	ldr	r1, [pc, #400]	; (a5b8 <_GLOBAL__sub_I_usedFiles+0xae4>)
    a426:	4865      	ldr	r0, [pc, #404]	; (a5bc <_GLOBAL__sub_I_usedFiles+0xae8>)
    a428:	f00b fa9e 	bl	15968 <String::String(char const*)>
    a42c:	4a44      	ldr	r2, [pc, #272]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a42e:	4964      	ldr	r1, [pc, #400]	; (a5c0 <_GLOBAL__sub_I_usedFiles+0xaec>)
    a430:	4862      	ldr	r0, [pc, #392]	; (a5bc <_GLOBAL__sub_I_usedFiles+0xae8>)
    a432:	f00e fb91 	bl	18b58 <__aeabi_atexit>
String buttonString = "";
    a436:	4960      	ldr	r1, [pc, #384]	; (a5b8 <_GLOBAL__sub_I_usedFiles+0xae4>)
    a438:	4862      	ldr	r0, [pc, #392]	; (a5c4 <_GLOBAL__sub_I_usedFiles+0xaf0>)
    a43a:	f00b fa95 	bl	15968 <String::String(char const*)>
    a43e:	4a40      	ldr	r2, [pc, #256]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a440:	495f      	ldr	r1, [pc, #380]	; (a5c0 <_GLOBAL__sub_I_usedFiles+0xaec>)
    a442:	4860      	ldr	r0, [pc, #384]	; (a5c4 <_GLOBAL__sub_I_usedFiles+0xaf0>)
    a444:	f00e fb88 	bl	18b58 <__aeabi_atexit>
IntervalTimer thisTimer;
    a448:	4a3d      	ldr	r2, [pc, #244]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a44a:	495f      	ldr	r1, [pc, #380]	; (a5c8 <_GLOBAL__sub_I_usedFiles+0xaf4>)
    a44c:	485f      	ldr	r0, [pc, #380]	; (a5cc <_GLOBAL__sub_I_usedFiles+0xaf8>)
    a44e:	f00e fb83 	bl	18b58 <__aeabi_atexit>
Mode draw = { "DRAW", { 1, 1, 1 ,1}, { 16, 16, 16,16 }, { 1, 1, 1 ,1} };
    a452:	495f      	ldr	r1, [pc, #380]	; (a5d0 <_GLOBAL__sub_I_usedFiles+0xafc>)
    a454:	485f      	ldr	r0, [pc, #380]	; (a5d4 <_GLOBAL__sub_I_usedFiles+0xb00>)
    a456:	f00b fa87 	bl	15968 <String::String(char const*)>
    a45a:	4a39      	ldr	r2, [pc, #228]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a45c:	495e      	ldr	r1, [pc, #376]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a45e:	485d      	ldr	r0, [pc, #372]	; (a5d4 <_GLOBAL__sub_I_usedFiles+0xb00>)
    a460:	f00e fb7a 	bl	18b58 <__aeabi_atexit>
Mode singleMode = { "SINGLE", { 1, 1, 1,1 }, { 16, 16, 16 }, { 1, 1, 1 ,1} };
    a464:	495d      	ldr	r1, [pc, #372]	; (a5dc <_GLOBAL__sub_I_usedFiles+0xb08>)
    a466:	485e      	ldr	r0, [pc, #376]	; (a5e0 <_GLOBAL__sub_I_usedFiles+0xb0c>)
    a468:	f00b fa7e 	bl	15968 <String::String(char const*)>
    a46c:	4a34      	ldr	r2, [pc, #208]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a46e:	495a      	ldr	r1, [pc, #360]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a470:	485b      	ldr	r0, [pc, #364]	; (a5e0 <_GLOBAL__sub_I_usedFiles+0xb0c>)
    a472:	f00e fb71 	bl	18b58 <__aeabi_atexit>
Mode volume = { "VOLUME", { 1, 1, 1 ,1}, { 1, 10, 200, 10 }, { 1, 9, 100 ,9} };
    a476:	495b      	ldr	r1, [pc, #364]	; (a5e4 <_GLOBAL__sub_I_usedFiles+0xb10>)
    a478:	485b      	ldr	r0, [pc, #364]	; (a5e8 <_GLOBAL__sub_I_usedFiles+0xb14>)
    a47a:	f00b fa75 	bl	15968 <String::String(char const*)>
    a47e:	4a30      	ldr	r2, [pc, #192]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a480:	4955      	ldr	r1, [pc, #340]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a482:	4859      	ldr	r0, [pc, #356]	; (a5e8 <_GLOBAL__sub_I_usedFiles+0xb14>)
    a484:	f00e fb68 	bl	18b58 <__aeabi_atexit>
Mode velocity = { "VELOCITY", { 1, 1, 1 ,1}, { 1, 1, 16,16 }, { 1, 1, 10 ,10} };
    a488:	4958      	ldr	r1, [pc, #352]	; (a5ec <_GLOBAL__sub_I_usedFiles+0xb18>)
    a48a:	4859      	ldr	r0, [pc, #356]	; (a5f0 <_GLOBAL__sub_I_usedFiles+0xb1c>)
    a48c:	f00b fa6c 	bl	15968 <String::String(char const*)>
    a490:	4a2b      	ldr	r2, [pc, #172]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a492:	4951      	ldr	r1, [pc, #324]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a494:	4856      	ldr	r0, [pc, #344]	; (a5f0 <_GLOBAL__sub_I_usedFiles+0xb1c>)
    a496:	f00e fb5f 	bl	18b58 <__aeabi_atexit>
Mode set_Wav = { "SET_WAV", { 1, 1, 1 ,1}, { 999, 999, 999, 999 }, { 1, 0, 1 ,1} };
    a49a:	4956      	ldr	r1, [pc, #344]	; (a5f4 <_GLOBAL__sub_I_usedFiles+0xb20>)
    a49c:	4856      	ldr	r0, [pc, #344]	; (a5f8 <_GLOBAL__sub_I_usedFiles+0xb24>)
    a49e:	f00b fa63 	bl	15968 <String::String(char const*)>
    a4a2:	4a27      	ldr	r2, [pc, #156]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a4a4:	494c      	ldr	r1, [pc, #304]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a4a6:	4854      	ldr	r0, [pc, #336]	; (a5f8 <_GLOBAL__sub_I_usedFiles+0xb24>)
    a4a8:	f00e fb56 	bl	18b58 <__aeabi_atexit>
Mode set_SamplePack = { "SET_SAMPLEPACK", { 1, 1, 1 ,1}, { 1, 1, 99,99 }, { 1, 1, 1,1 } };
    a4ac:	4953      	ldr	r1, [pc, #332]	; (a5fc <_GLOBAL__sub_I_usedFiles+0xb28>)
    a4ae:	4854      	ldr	r0, [pc, #336]	; (a600 <_GLOBAL__sub_I_usedFiles+0xb2c>)
    a4b0:	f00b fa5a 	bl	15968 <String::String(char const*)>
    a4b4:	4a22      	ldr	r2, [pc, #136]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a4b6:	4948      	ldr	r1, [pc, #288]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a4b8:	4851      	ldr	r0, [pc, #324]	; (a600 <_GLOBAL__sub_I_usedFiles+0xb2c>)
    a4ba:	f00e fb4d 	bl	18b58 <__aeabi_atexit>
Mode menu = { "MENU", { 1, 1, 1 ,1}, { 1, 1, 12,12 }, { 1, 1, 1,1 } };
    a4be:	4951      	ldr	r1, [pc, #324]	; (a604 <_GLOBAL__sub_I_usedFiles+0xb30>)
    a4c0:	4851      	ldr	r0, [pc, #324]	; (a608 <_GLOBAL__sub_I_usedFiles+0xb34>)
    a4c2:	f00b fa51 	bl	15968 <String::String(char const*)>
    a4c6:	4a1e      	ldr	r2, [pc, #120]	; (a540 <_GLOBAL__sub_I_usedFiles+0xa6c>)
    a4c8:	4943      	ldr	r1, [pc, #268]	; (a5d8 <_GLOBAL__sub_I_usedFiles+0xb04>)
    a4ca:	484f      	ldr	r0, [pc, #316]	; (a608 <_GLOBAL__sub_I_usedFiles+0xb34>)
    a4cc:	f00e fb44 	bl	18b58 <__aeabi_atexit>
};
    a4d0:	2204      	movs	r2, #4
    a4d2:	2102      	movs	r1, #2
    a4d4:	484d      	ldr	r0, [pc, #308]	; (a60c <_GLOBAL__sub_I_usedFiles+0xb38>)
    a4d6:	f7f9 f925 	bl	3724 <Encoder::Encoder(unsigned char, unsigned char)>
    a4da:	2209      	movs	r2, #9
    a4dc:	210e      	movs	r1, #14
    a4de:	484c      	ldr	r0, [pc, #304]	; (a610 <_GLOBAL__sub_I_usedFiles+0xb3c>)
    a4e0:	f7f9 f920 	bl	3724 <Encoder::Encoder(unsigned char, unsigned char)>
    a4e4:	2205      	movs	r2, #5
    a4e6:	2116      	movs	r1, #22
    a4e8:	484a      	ldr	r0, [pc, #296]	; (a614 <_GLOBAL__sub_I_usedFiles+0xb40>)
    a4ea:	f7f9 f91b 	bl	3724 <Encoder::Encoder(unsigned char, unsigned char)>
    a4ee:	2220      	movs	r2, #32
    a4f0:	2121      	movs	r1, #33	; 0x21
    a4f2:	4849      	ldr	r0, [pc, #292]	; (a618 <_GLOBAL__sub_I_usedFiles+0xb44>)
    a4f4:	f7f9 f916 	bl	3724 <Encoder::Encoder(unsigned char, unsigned char)>
Switch multiresponseButton1 = Switch(3);
    a4f8:	2300      	movs	r3, #0
    a4fa:	2202      	movs	r2, #2
    a4fc:	2103      	movs	r1, #3
    a4fe:	4847      	ldr	r0, [pc, #284]	; (a61c <_GLOBAL__sub_I_usedFiles+0xb48>)
    a500:	e9cd 6702 	strd	r6, r7, [sp, #8]
    a504:	e9cd 4500 	strd	r4, r5, [sp]
    a508:	f00a f8a8 	bl	1465c <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
Switch multiresponseButton2 = Switch(16);
    a50c:	2300      	movs	r3, #0
    a50e:	2202      	movs	r2, #2
    a510:	2110      	movs	r1, #16
    a512:	4843      	ldr	r0, [pc, #268]	; (a620 <_GLOBAL__sub_I_usedFiles+0xb4c>)
    a514:	e9cd 6702 	strd	r6, r7, [sp, #8]
    a518:	e9cd 4500 	strd	r4, r5, [sp]
    a51c:	f00a f89e 	bl	1465c <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
Switch multiresponseButton3 = Switch(15);
    a520:	2300      	movs	r3, #0
    a522:	2202      	movs	r2, #2
    a524:	210f      	movs	r1, #15
    a526:	483f      	ldr	r0, [pc, #252]	; (a624 <_GLOBAL__sub_I_usedFiles+0xb50>)
    a528:	e9cd 6702 	strd	r6, r7, [sp, #8]
    a52c:	e9cd 4500 	strd	r4, r5, [sp]
    a530:	f00a f894 	bl	1465c <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
    a534:	e078      	b.n	a628 <_GLOBAL__sub_I_usedFiles+0xb54>
    a536:	bf00      	nop
    a538:	20006914 	.word	0x20006914
    a53c:	2000b6cc 	.word	0x2000b6cc
    a540:	20003338 	.word	0x20003338
    a544:	0001516d 	.word	0x0001516d
    a548:	2000b6e0 	.word	0x2000b6e0
    a54c:	20006f98 	.word	0x20006f98
    a550:	2000694c 	.word	0x2000694c
    a554:	2000b6f4 	.word	0x2000b6f4
    a558:	20006984 	.word	0x20006984
    a55c:	200069bc 	.word	0x200069bc
    a560:	2000c794 	.word	0x2000c794
    a564:	2000b848 	.word	0x2000b848
    a568:	2000b708 	.word	0x2000b708
    a56c:	2000b744 	.word	0x2000b744
    a570:	20006fd0 	.word	0x20006fd0
    a574:	20006ef0 	.word	0x20006ef0
    a578:	2000b758 	.word	0x2000b758
    a57c:	20006f28 	.word	0x20006f28
    a580:	2000b76c 	.word	0x2000b76c
    a584:	20006f60 	.word	0x20006f60
    a588:	2000b780 	.word	0x2000b780
    a58c:	2000b794 	.word	0x2000b794
    a590:	2000b7a8 	.word	0x2000b7a8
    a594:	2000561c 	.word	0x2000561c
    a598:	2000b7bc 	.word	0x2000b7bc
    a59c:	00000a25 	.word	0x00000a25
    a5a0:	00001171 	.word	0x00001171
    a5a4:	20003b80 	.word	0x20003b80
    a5a8:	20003b94 	.word	0x20003b94
    a5ac:	20003b6c 	.word	0x20003b6c
    a5b0:	20003ba8 	.word	0x20003ba8
    a5b4:	20003bbc 	.word	0x20003bbc
    a5b8:	20000ec0 	.word	0x20000ec0
    a5bc:	2000b658 	.word	0x2000b658
    a5c0:	000158f1 	.word	0x000158f1
    a5c4:	200067ac 	.word	0x200067ac
    a5c8:	0000059d 	.word	0x0000059d
    a5cc:	20003c90 	.word	0x20003c90
    a5d0:	20002848 	.word	0x20002848
    a5d4:	200038e4 	.word	0x200038e4
    a5d8:	0000031d 	.word	0x0000031d
    a5dc:	20002864 	.word	0x20002864
    a5e0:	20003c50 	.word	0x20003c50
    a5e4:	20002850 	.word	0x20002850
    a5e8:	20003cf0 	.word	0x20003cf0
    a5ec:	20002858 	.word	0x20002858
    a5f0:	20003cb0 	.word	0x20003cb0
    a5f4:	20002884 	.word	0x20002884
    a5f8:	20003c10 	.word	0x20003c10
    a5fc:	20002874 	.word	0x20002874
    a600:	20003bd0 	.word	0x20003bd0
    a604:	2000286c 	.word	0x2000286c
    a608:	20003b2c 	.word	0x20003b2c
    a60c:	200067ec 	.word	0x200067ec
    a610:	20006808 	.word	0x20006808
    a614:	20006824 	.word	0x20006824
    a618:	20006840 	.word	0x20006840
    a61c:	20007008 	.word	0x20007008
    a620:	20007064 	.word	0x20007064
    a624:	200070c0 	.word	0x200070c0
Switch multiresponseButton4 = Switch(41);
    a628:	2202      	movs	r2, #2
    a62a:	2300      	movs	r3, #0
    a62c:	2129      	movs	r1, #41	; 0x29
    a62e:	480b      	ldr	r0, [pc, #44]	; (a65c <_GLOBAL__sub_I_usedFiles+0xb88>)
    a630:	e9cd 6702 	strd	r6, r7, [sp, #8]
    a634:	e9cd 4500 	strd	r4, r5, [sp]
    a638:	f00a f810 	bl	1465c <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>
String oldPos = "";
    a63c:	4908      	ldr	r1, [pc, #32]	; (a660 <_GLOBAL__sub_I_usedFiles+0xb8c>)
    a63e:	4809      	ldr	r0, [pc, #36]	; (a664 <_GLOBAL__sub_I_usedFiles+0xb90>)
    a640:	f00b f992 	bl	15968 <String::String(char const*)>
    a644:	4a08      	ldr	r2, [pc, #32]	; (a668 <_GLOBAL__sub_I_usedFiles+0xb94>)
    a646:	4909      	ldr	r1, [pc, #36]	; (a66c <_GLOBAL__sub_I_usedFiles+0xb98>)
    a648:	4806      	ldr	r0, [pc, #24]	; (a664 <_GLOBAL__sub_I_usedFiles+0xb90>)
}
    a64a:	b005      	add	sp, #20
    a64c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
String oldPos = "";
    a650:	f00e ba82 	b.w	18b58 <__aeabi_atexit>
				first_update = this;
    a654:	600a      	str	r2, [r1, #0]
    a656:	f7ff bb34 	b.w	9cc2 <_GLOBAL__sub_I_usedFiles+0x1ee>
    a65a:	bf00      	nop
    a65c:	2000711c 	.word	0x2000711c
    a660:	20000ec0 	.word	0x20000ec0
    a664:	2000b678 	.word	0x2000b678
    a668:	20003338 	.word	0x20003338
    a66c:	000158f1 	.word	0x000158f1

0000a670 <mapf(double, double, double, double, double)>:
#include "Mapf.h"

double mapf(double x, double in_min, double in_max, double out_min, double out_max)
{

    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    a670:	ee30 7b41 	vsub.f64	d7, d0, d1
    a674:	ee34 4b43 	vsub.f64	d4, d4, d3
    a678:	ee32 2b41 	vsub.f64	d2, d2, d1
    a67c:	ee27 7b04 	vmul.f64	d7, d7, d4
    a680:	ee87 0b02 	vdiv.f64	d0, d7, d2
}
    a684:	ee30 0b03 	vadd.f64	d0, d0, d3
    a688:	4770      	bx	lr
    a68a:	bf00      	nop

0000a68c <WS2812Serial::begin()>:
*/

#include "WS2812Serial.h"

bool WS2812Serial::begin()
{
    a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t hwtrigger;
#else	
	uint32_t divisor, portconfig, hwtrigger;
	KINETISK_UART_t *uart;
#endif
	switch (pin) {
    a68e:	7881      	ldrb	r1, [r0, #2]
{
    a690:	4604      	mov	r4, r0
	switch (pin) {
    a692:	1e4b      	subs	r3, r1, #1
    a694:	2b34      	cmp	r3, #52	; 0x34
    a696:	d81c      	bhi.n	a6d2 <WS2812Serial::begin()+0x46>
    a698:	e8df f003 	tbb	[pc, r3]
    a69c:	1b1b1b70 	.word	0x1b1b1b70
    a6a0:	971b1b1b 	.word	0x971b1b1b
    a6a4:	1b1b1b1b 	.word	0x1b1b1b1b
    a6a8:	1b1b851b 	.word	0x1b1b851b
    a6ac:	1d1b1b8e 	.word	0x1d1b1b8e
    a6b0:	a91b1b1b 	.word	0xa91b1b1b
    a6b4:	1b1b1b1b 	.word	0x1b1b1b1b
    a6b8:	1b1b1ba0 	.word	0x1b1b1ba0
    a6bc:	1bb21b1b 	.word	0x1bb21b1b
    a6c0:	1b1b1b1b 	.word	0x1b1b1b1b
    a6c4:	1b1b1b1b 	.word	0x1b1b1b1b
    a6c8:	1b1d1b1b 	.word	0x1b1d1b1b
    a6cc:	1b1b1b1b 	.word	0x1b1b1b1b
    a6d0:	70          	.byte	0x70
    a6d1:	00          	.byte	0x00
    a6d2:	2000      	movs	r0, #0
#endif 

	dma->triggerAtHardwareEvent(hwtrigger);
	memset(drawBuffer, 0, numled * 3);
	return true;
}
    a6d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    a6d6:	4a50      	ldr	r2, [pc, #320]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART8; 
    a6d8:	4850      	ldr	r0, [pc, #320]	; (a81c <WS2812Serial::begin()+0x190>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    a6da:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
		break;
    a6de:	4e50      	ldr	r6, [pc, #320]	; (a820 <WS2812Serial::begin()+0x194>)
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    a6e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
		uart = &IMXRT_LPUART8; 
    a6e4:	61a0      	str	r0, [r4, #24]
		CCM_CCGR6 |= CCM_CCGR6_LPUART8(CCM_CCGR_ON);
    a6e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if (!dma) {
    a6ea:	68e5      	ldr	r5, [r4, #12]
    a6ec:	2d00      	cmp	r5, #0
    a6ee:	d050      	beq.n	a792 <WS2812Serial::begin()+0x106>
	uart->CTRL = 0;	// clear everything
    a6f0:	69a3      	ldr	r3, [r4, #24]
    a6f2:	2200      	movs	r2, #0
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    a6f4:	484b      	ldr	r0, [pc, #300]	; (a824 <WS2812Serial::begin()+0x198>)
	uart->CTRL = 0;	// clear everything
    a6f6:	619a      	str	r2, [r3, #24]
	uart->BAUD = LPUART_BAUD_OSR(5) | LPUART_BAUD_SBR(1) | LPUART_BAUD_TDMAE;  // set baud configure for transfer DMA
    a6f8:	6118      	str	r0, [r3, #16]
	uart->PINCFG = 0;
    a6fa:	60da      	str	r2, [r3, #12]
	uint16_t tx_fifo_size = (((uart->FIFO >> 4) & 0x7) << 2);
    a6fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    a6fe:	0892      	lsrs	r2, r2, #2
    a700:	f002 021c 	and.w	r2, r2, #28
	uint8_t tx_water = (tx_fifo_size < 16) ? tx_fifo_size >> 1 : 7;
    a704:	2a0f      	cmp	r2, #15
    a706:	f200 8084 	bhi.w	a812 <WS2812Serial::begin()+0x186>
    a70a:	0852      	lsrs	r2, r2, #1
	uart->WATER = LPUART_WATER_TXWATER(tx_water);
    a70c:	f002 0202 	and.w	r2, r2, #2
    a710:	62da      	str	r2, [r3, #44]	; 0x2c
	if (pin == 35) pinmuxval = 1;
    a712:	2923      	cmp	r1, #35	; 0x23
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    a714:	4a44      	ldr	r2, [pc, #272]	; (a828 <WS2812Serial::begin()+0x19c>)
	dma->destination((volatile uint8_t&)uart->DATA);
    a716:	f103 031c 	add.w	r3, r3, #28
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    a71a:	f8df c14c 	ldr.w	ip, [pc, #332]	; a868 <WS2812Serial::begin()+0x1dc>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    a71e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
	uart->FIFO |= LPUART_FIFO_TXFE;
    a722:	68d9      	ldr	r1, [r3, #12]
    a724:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	*(portConfigRegister(pin)) = pinmuxval;
    a728:	e9d2 0701 	ldrd	r0, r7, [r2, #4]
	uart->FIFO |= LPUART_FIFO_TXFE;
    a72c:	60d9      	str	r1, [r3, #12]
	// Use a single variable as the data destination.  Typically a register
	// for transmitting data to one of the hardware peripherals is used.
	void destination(volatile signed char &p) { destination(*(volatile uint8_t *)&p); }
	void destination(volatile unsigned char &p) {
		TCD->DADDR = &p;
		TCD->DOFF = 0;
    a72e:	f04f 0100 	mov.w	r1, #0
    a732:	682a      	ldr	r2, [r5, #0]
	uart->CTRL = (LPUART_CTRL_TE /*| LPUART_CTRL_TIE */ | LPUART_CTRL_TXINV); // enable transmitter and invert
    a734:	f843 cc04 	str.w	ip, [r3, #-4]
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    a738:	f04f 0cd9 	mov.w	ip, #217	; 0xd9
    a73c:	f8c7 c000 	str.w	ip, [r7]
	if (pin == 35) pinmuxval = 1;
    a740:	bf14      	ite	ne
    a742:	2702      	movne	r7, #2
    a744:	2701      	moveq	r7, #1
		TCD->ATTR_DST = 0;
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    a746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
	*(portConfigRegister(pin)) = pinmuxval;
    a74a:	6007      	str	r7, [r0, #0]
		TCD->DADDR = &p;
    a74c:	6113      	str	r3, [r2, #16]
		TCD->DOFF = 0;
    a74e:	8291      	strh	r1, [r2, #20]
		TCD->ATTR_DST = 0;
    a750:	7191      	strb	r1, [r2, #6]
		if ((uint32_t)&p < 0x40000000 || TCD->NBYTES == 0) TCD->NBYTES = 1;
    a752:	d301      	bcc.n	a758 <WS2812Serial::begin()+0xcc>
    a754:	6893      	ldr	r3, [r2, #8]
    a756:	b90b      	cbnz	r3, a75c <WS2812Serial::begin()+0xd0>
    a758:	2301      	movs	r3, #1
    a75a:	6093      	str	r3, [r2, #8]
		TCD->DLASTSGA = 0;
    a75c:	2100      	movs	r1, #0
	// trigger moves a single data unit, which is typically 8, 16 or
	// 32 bits.  If a channel is configured for 200 transfers

	// Use a hardware trigger to make the DMA channel run
	void triggerAtHardwareEvent(uint8_t source) {
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    a75e:	4b33      	ldr	r3, [pc, #204]	; (a82c <WS2812Serial::begin()+0x1a0>)
	memset(drawBuffer, 0, numled * 3);
    a760:	68a0      	ldr	r0, [r4, #8]
		TCD->DLASTSGA = 0;
    a762:	6191      	str	r1, [r2, #24]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    a764:	792a      	ldrb	r2, [r5, #4]
		//mux = (volatile uint32_t *)&(DMAMUX_CHCFG0) + channel;
		*mux = 0;
    a766:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    a76a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    a76e:	8822      	ldrh	r2, [r4, #0]
    a770:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    a774:	f017 feb4 	bl	224e0 <memset>
	return true;
    a778:	2001      	movs	r0, #1
}
    a77a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    a77c:	4a26      	ldr	r2, [pc, #152]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART6; 
    a77e:	482c      	ldr	r0, [pc, #176]	; (a830 <WS2812Serial::begin()+0x1a4>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    a780:	6f53      	ldr	r3, [r2, #116]	; 0x74
	if (!dma) {
    a782:	68e5      	ldr	r5, [r4, #12]
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    a784:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
		uart = &IMXRT_LPUART6; 
    a788:	61a0      	str	r0, [r4, #24]
		break;
    a78a:	4e2a      	ldr	r6, [pc, #168]	; (a834 <WS2812Serial::begin()+0x1a8>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART6(CCM_CCGR_ON);
    a78c:	6753      	str	r3, [r2, #116]	; 0x74
	if (!dma) {
    a78e:	2d00      	cmp	r5, #0
    a790:	d1ae      	bne.n	a6f0 <WS2812Serial::begin()+0x64>
		dma = new DMAChannel;
    a792:	2008      	movs	r0, #8
    a794:	f00b ff9c 	bl	166d0 <operator new(unsigned int)>
    a798:	4605      	mov	r5, r0
		begin();
    a79a:	2100      	movs	r1, #0
    a79c:	f00a fd22 	bl	151e4 <DMAChannel::begin(bool)>
	*(portControlRegister(pin)) =  IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(3) | IOMUXC_PAD_SPEED(3);
    a7a0:	78a1      	ldrb	r1, [r4, #2]
		dma = new DMAChannel;
    a7a2:	60e5      	str	r5, [r4, #12]
		if (!dma) return false; // unable to allocate DMA channel
    a7a4:	e7a4      	b.n	a6f0 <WS2812Serial::begin()+0x64>
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    a7a6:	4a1c      	ldr	r2, [pc, #112]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART2; 
    a7a8:	4823      	ldr	r0, [pc, #140]	; (a838 <WS2812Serial::begin()+0x1ac>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    a7aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
    a7ac:	4e23      	ldr	r6, [pc, #140]	; (a83c <WS2812Serial::begin()+0x1b0>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    a7ae:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
		uart = &IMXRT_LPUART2; 
    a7b2:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART2(CCM_CCGR_ON);
    a7b4:	6693      	str	r3, [r2, #104]	; 0x68
		break;
    a7b6:	e798      	b.n	a6ea <WS2812Serial::begin()+0x5e>
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    a7b8:	4a17      	ldr	r2, [pc, #92]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART3; 
    a7ba:	4821      	ldr	r0, [pc, #132]	; (a840 <WS2812Serial::begin()+0x1b4>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    a7bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
		break;
    a7be:	4e21      	ldr	r6, [pc, #132]	; (a844 <WS2812Serial::begin()+0x1b8>)
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    a7c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
		uart = &IMXRT_LPUART3; 
    a7c4:	61a0      	str	r0, [r4, #24]
		CCM_CCGR0 |= CCM_CCGR0_LPUART3(CCM_CCGR_ON);
    a7c6:	6693      	str	r3, [r2, #104]	; 0x68
		break;
    a7c8:	e78f      	b.n	a6ea <WS2812Serial::begin()+0x5e>
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    a7ca:	4a13      	ldr	r2, [pc, #76]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART4; 
    a7cc:	481e      	ldr	r0, [pc, #120]	; (a848 <WS2812Serial::begin()+0x1bc>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    a7ce:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
		break;
    a7d0:	4e1e      	ldr	r6, [pc, #120]	; (a84c <WS2812Serial::begin()+0x1c0>)
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    a7d2:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART4; 
    a7d6:	61a0      	str	r0, [r4, #24]
		CCM_CCGR1 |= CCM_CCGR1_LPUART4(CCM_CCGR_ON);
    a7d8:	66d3      	str	r3, [r2, #108]	; 0x6c
		break;
    a7da:	e786      	b.n	a6ea <WS2812Serial::begin()+0x5e>
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    a7dc:	4a0e      	ldr	r2, [pc, #56]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART7; 
    a7de:	481c      	ldr	r0, [pc, #112]	; (a850 <WS2812Serial::begin()+0x1c4>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    a7e0:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
    a7e2:	4e1c      	ldr	r6, [pc, #112]	; (a854 <WS2812Serial::begin()+0x1c8>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    a7e4:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
		uart = &IMXRT_LPUART7; 
    a7e8:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART7(CCM_CCGR_ON);
    a7ea:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
    a7ec:	e77d      	b.n	a6ea <WS2812Serial::begin()+0x5e>
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    a7ee:	4a0a      	ldr	r2, [pc, #40]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART1; 
    a7f0:	4819      	ldr	r0, [pc, #100]	; (a858 <WS2812Serial::begin()+0x1cc>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    a7f2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
		break;
    a7f4:	4e19      	ldr	r6, [pc, #100]	; (a85c <WS2812Serial::begin()+0x1d0>)
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    a7f6:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
		uart = &IMXRT_LPUART1; 
    a7fa:	61a0      	str	r0, [r4, #24]
		CCM_CCGR5 |= CCM_CCGR5_LPUART1(CCM_CCGR_ON);
    a7fc:	67d3      	str	r3, [r2, #124]	; 0x7c
		break;
    a7fe:	e774      	b.n	a6ea <WS2812Serial::begin()+0x5e>
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
    a800:	4a05      	ldr	r2, [pc, #20]	; (a818 <WS2812Serial::begin()+0x18c>)
		uart = &IMXRT_LPUART5; 
    a802:	4817      	ldr	r0, [pc, #92]	; (a860 <WS2812Serial::begin()+0x1d4>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
    a804:	6f53      	ldr	r3, [r2, #116]	; 0x74
		break;
    a806:	4e17      	ldr	r6, [pc, #92]	; (a864 <WS2812Serial::begin()+0x1d8>)
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
    a808:	f043 030c 	orr.w	r3, r3, #12
		uart = &IMXRT_LPUART5; 
    a80c:	61a0      	str	r0, [r4, #24]
		CCM_CCGR3 |= CCM_CCGR3_LPUART5(CCM_CCGR_ON);
    a80e:	6753      	str	r3, [r2, #116]	; 0x74
		break;
    a810:	e76b      	b.n	a6ea <WS2812Serial::begin()+0x5e>
    a812:	2203      	movs	r2, #3
    a814:	e77c      	b.n	a710 <WS2812Serial::begin()+0x84>
    a816:	bf00      	nop
    a818:	400fc000 	.word	0x400fc000
    a81c:	401a0000 	.word	0x401a0000
    a820:	80000048 	.word	0x80000048
    a824:	05800001 	.word	0x05800001
    a828:	200024c4 	.word	0x200024c4
    a82c:	400ec000 	.word	0x400ec000
    a830:	40198000 	.word	0x40198000
    a834:	80000046 	.word	0x80000046
    a838:	40188000 	.word	0x40188000
    a83c:	80000042 	.word	0x80000042
    a840:	4018c000 	.word	0x4018c000
    a844:	80000004 	.word	0x80000004
    a848:	40190000 	.word	0x40190000
    a84c:	80000044 	.word	0x80000044
    a850:	4019c000 	.word	0x4019c000
    a854:	80000008 	.word	0x80000008
    a858:	40184000 	.word	0x40184000
    a85c:	80000002 	.word	0x80000002
    a860:	40194000 	.word	0x40194000
    a864:	80000006 	.word	0x80000006
    a868:	10080000 	.word	0x10080000

0000a86c <WS2812Serial::show()>:
	while ((dma->CFG->DCR & DMA_DCR_ERQ)) {
		yield();
	}
#elif defined(__IMXRT1062__)
	//Serial.println("Show called");
	while ((DMA_ERQ & (1 << dma->channel))) {
    a86c:	68c3      	ldr	r3, [r0, #12]
{
    a86e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while ((DMA_ERQ & (1 << dma->channel))) {
    a872:	4eb1      	ldr	r6, [pc, #708]	; (ab38 <WS2812Serial::show()+0x2cc>)
    a874:	2501      	movs	r5, #1
    a876:	791b      	ldrb	r3, [r3, #4]
{
    a878:	b083      	sub	sp, #12
	while ((DMA_ERQ & (1 << dma->channel))) {
    a87a:	68f2      	ldr	r2, [r6, #12]
{
    a87c:	4604      	mov	r4, r0
	while ((DMA_ERQ & (1 << dma->channel))) {
    a87e:	fa05 f303 	lsl.w	r3, r5, r3
    a882:	4213      	tst	r3, r2
    a884:	d008      	beq.n	a898 <WS2812Serial::show()+0x2c>
		yield();
    a886:	f00d fea3 	bl	185d0 <yield>
	while ((DMA_ERQ & (1 << dma->channel))) {
    a88a:	68e3      	ldr	r3, [r4, #12]
    a88c:	68f2      	ldr	r2, [r6, #12]
    a88e:	791b      	ldrb	r3, [r3, #4]
    a890:	fa05 f303 	lsl.w	r3, r5, r3
    a894:	4213      	tst	r3, r2
    a896:	d1f6      	bne.n	a886 <WS2812Serial::show()+0x1a>
	}
	//Serial.println("After Yield");
#endif
	// copy drawing buffer to frame buffer
	if (config < 6) {
    a898:	78e0      	ldrb	r0, [r4, #3]
    a89a:	2805      	cmp	r0, #5
    a89c:	d826      	bhi.n	a8ec <WS2812Serial::show()+0x80>
		// RGB
		const uint8_t *p = drawBuffer;
		const uint8_t *end = p + (numled * 3);
    a89e:	8823      	ldrh	r3, [r4, #0]
		const uint8_t *p = drawBuffer;
    a8a0:	68a6      	ldr	r6, [r4, #8]
		const uint8_t *end = p + (numled * 3);
    a8a2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
		uint8_t *fb = frameBuffer;
    a8a6:	6865      	ldr	r5, [r4, #4]
		const uint8_t *end = p + (numled * 3);
    a8a8:	4437      	add	r7, r6
		while (p < end) {
    a8aa:	42be      	cmp	r6, r7
    a8ac:	f080 820d 	bcs.w	acca <WS2812Serial::show()+0x45e>
    a8b0:	3603      	adds	r6, #3
    a8b2:	350c      	adds	r5, #12
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint32_t mult = brightness + 1;
    a8b4:	7d21      	ldrb	r1, [r4, #20]
    a8b6:	f1a5 020c 	sub.w	r2, r5, #12
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
    a8ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
			b = (b * mult) >> 8;
    a8be:	f816 ec03 	ldrb.w	lr, [r6, #-3]
			g = (g * mult) >> 8;
    a8c2:	f816 cc02 	ldrb.w	ip, [r6, #-2]
			b = (b * mult) >> 8;
    a8c6:	fb01 ee0e 	mla	lr, r1, lr, lr
			g = (g * mult) >> 8;
    a8ca:	fb01 cc0c 	mla	ip, r1, ip, ip
			r = (r * mult) >> 8;
    a8ce:	fb01 3103 	mla	r1, r1, r3, r3
			b = (b * mult) >> 8;
    a8d2:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
    a8d6:	ea4f 291c 	mov.w	r9, ip, lsr #8
			r = (r * mult) >> 8;
    a8da:	0a0b      	lsrs	r3, r1, #8
			uint32_t n=0;
			switch (config) {
    a8dc:	2805      	cmp	r0, #5
    a8de:	f200 81fb 	bhi.w	acd8 <WS2812Serial::show()+0x46c>
    a8e2:	e8df f000 	tbb	[pc, r0]
    a8e6:	767d      	.short	0x767d
    a8e8:	4662696f 	.word	0x4662696f
		}
		microseconds_per_led = 30;
		bytes_per_led = 12;
	} else {
		// RGBW
		const uint8_t *p = drawBuffer;
    a8ec:	68a2      	ldr	r2, [r4, #8]
		const uint8_t *end = p + (numled * 4);
    a8ee:	8823      	ldrh	r3, [r4, #0]
		uint8_t *fb = frameBuffer;
    a8f0:	6861      	ldr	r1, [r4, #4]
		const uint8_t *end = p + (numled * 4);
    a8f2:	eb02 0b83 	add.w	fp, r2, r3, lsl #2
		while (p < end) {
    a8f6:	455a      	cmp	r2, fp
    a8f8:	f080 81e4 	bcs.w	acc4 <WS2812Serial::show()+0x458>
    a8fc:	f102 0c04 	add.w	ip, r2, #4
    a900:	3110      	adds	r1, #16
			uint8_t b = *p++;
			uint8_t g = *p++;
			uint8_t r = *p++;
			uint8_t w = *p++;
			uint32_t mult = brightness + 1;
    a902:	7d23      	ldrb	r3, [r4, #20]
			b = (b * mult) >> 8;
			g = (g * mult) >> 8;
			r = (r * mult) >> 8;
			w = (w * mult) >> 8;
			uint32_t n=0;
			switch (config) {
    a904:	3806      	subs	r0, #6
			g = (g * mult) >> 8;
    a906:	f81c 6c03 	ldrb.w	r6, [ip, #-3]
    a90a:	f1a1 0210 	sub.w	r2, r1, #16
			b = (b * mult) >> 8;
    a90e:	f81c ec04 	ldrb.w	lr, [ip, #-4]
			r = (r * mult) >> 8;
    a912:	f81c 7c02 	ldrb.w	r7, [ip, #-2]
			g = (g * mult) >> 8;
    a916:	fb03 6606 	mla	r6, r3, r6, r6
			w = (w * mult) >> 8;
    a91a:	f81c 5c01 	ldrb.w	r5, [ip, #-1]
			b = (b * mult) >> 8;
    a91e:	fb03 ee0e 	mla	lr, r3, lr, lr
			r = (r * mult) >> 8;
    a922:	fb03 7707 	mla	r7, r3, r7, r7
			w = (w * mult) >> 8;
    a926:	fb03 5505 	mla	r5, r3, r5, r5
			g = (g * mult) >> 8;
    a92a:	0a33      	lsrs	r3, r6, #8
			b = (b * mult) >> 8;
    a92c:	ea4f 281e 	mov.w	r8, lr, lsr #8
			g = (g * mult) >> 8;
    a930:	9301      	str	r3, [sp, #4]
			w = (w * mult) >> 8;
    a932:	ea4f 2915 	mov.w	r9, r5, lsr #8
			r = (r * mult) >> 8;
    a936:	0a3b      	lsrs	r3, r7, #8
			switch (config) {
    a938:	2817      	cmp	r0, #23
    a93a:	f200 81cf 	bhi.w	acdc <WS2812Serial::show()+0x470>
    a93e:	e8df f010 	tbh	[pc, r0, lsl #1]
    a942:	01b5      	.short	0x01b5
    a944:	01a001ab 	.word	0x01a001ab
    a948:	018c0195 	.word	0x018c0195
    a94c:	01790182 	.word	0x01790182
    a950:	0165016f 	.word	0x0165016f
    a954:	0151015b 	.word	0x0151015b
    a958:	013e0148 	.word	0x013e0148
    a95c:	01280133 	.word	0x01280133
    a960:	0113011d 	.word	0x0113011d
    a964:	00ff010a 	.word	0x00ff010a
    a968:	00e700f1 	.word	0x00e700f1
    a96c:	00d400dd 	.word	0x00d400dd
    a970:	00b3      	.short	0x00b3
			  case WS2812_BGR: n = (b << 16) | (g << 8) | r; break;
    a972:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    a976:	ea4c 4108 	orr.w	r1, ip, r8, lsl #16
    a97a:	430b      	orrs	r3, r1
				if (!(n & 0x00800000)) x |= 0x07;
    a97c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
    a980:	bf0c      	ite	eq
    a982:	210f      	moveq	r1, #15
    a984:	2108      	movne	r1, #8
				if (!(n & 0x00400000)) x |= 0xE0;
    a986:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
				n <<= 2;
    a98a:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x00400000)) x |= 0xE0;
    a98e:	bf08      	it	eq
    a990:	f041 01e0 	orreq.w	r1, r1, #224	; 0xe0
				*fb++ = x;
    a994:	f802 1b01 	strb.w	r1, [r2], #1
			} while (fb < stop);
    a998:	42aa      	cmp	r2, r5
    a99a:	d1ef      	bne.n	a97c <WS2812Serial::show()+0x110>
		while (p < end) {
    a99c:	42b7      	cmp	r7, r6
    a99e:	f102 050c 	add.w	r5, r2, #12
    a9a2:	d924      	bls.n	a9ee <WS2812Serial::show()+0x182>
			switch (config) {
    a9a4:	78e0      	ldrb	r0, [r4, #3]
    a9a6:	3603      	adds	r6, #3
    a9a8:	e784      	b.n	a8b4 <WS2812Serial::show()+0x48>
			  case WS2812_BRG: n = (b << 16) | (r << 8) | g; break;
    a9aa:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
    a9ae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    a9b2:	ea43 0309 	orr.w	r3, r3, r9
    a9b6:	e7e1      	b.n	a97c <WS2812Serial::show()+0x110>
			  case WS2812_GBR: n = (g << 16) | (b << 8) | r; break;
    a9b8:	f40e 417f 	and.w	r1, lr, #65280	; 0xff00
    a9bc:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
    a9c0:	430b      	orrs	r3, r1
    a9c2:	e7db      	b.n	a97c <WS2812Serial::show()+0x110>
			  case WS2812_GRB: n = (g << 16) | (r << 8) | b; break;
    a9c4:	f401 437f 	and.w	r3, r1, #65280	; 0xff00
    a9c8:	ea43 4309 	orr.w	r3, r3, r9, lsl #16
    a9cc:	ea43 0308 	orr.w	r3, r3, r8
    a9d0:	e7d4      	b.n	a97c <WS2812Serial::show()+0x110>
			  case WS2812_RBG: n = (r << 16) | (b << 8) | g; break;
    a9d2:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    a9d6:	ea4e 4303 	orr.w	r3, lr, r3, lsl #16
    a9da:	ea43 0309 	orr.w	r3, r3, r9
    a9de:	e7cd      	b.n	a97c <WS2812Serial::show()+0x110>
			  case WS2812_RGB: n = (r << 16) | (g << 8) | b; break;
    a9e0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
    a9e4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
    a9e8:	ea43 0308 	orr.w	r3, r3, r8
    a9ec:	e7c6      	b.n	a97c <WS2812Serial::show()+0x110>
		}
		microseconds_per_led = 40;
		bytes_per_led = 16;
	}
	// wait 300us WS2812 reset time
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    a9ee:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 12;
    a9f0:	260c      	movs	r6, #12
		microseconds_per_led = 30;
    a9f2:	221e      	movs	r2, #30
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    a9f4:	fb02 f303 	mul.w	r3, r2, r3
    a9f8:	f503 7596 	add.w	r5, r3, #300	; 0x12c
    a9fc:	e001      	b.n	aa02 <WS2812Serial::show()+0x196>
	//if (min_elapsed < 2500) min_elapsed = 2500; // limit refresh to 400 Hz
	uint32_t m;
	while (1) {
		m = micros();
		if ((m - prior_micros) > min_elapsed) break;
		yield();
    a9fe:	f00d fde7 	bl	185d0 <yield>
		m = micros();
    aa02:	f00b fa9b 	bl	15f3c <micros>
		if ((m - prior_micros) > min_elapsed) break;
    aa06:	6923      	ldr	r3, [r4, #16]
    aa08:	1ac3      	subs	r3, r0, r3
    aa0a:	42ab      	cmp	r3, r5
    aa0c:	d9f7      	bls.n	a9fe <WS2812Serial::show()+0x192>
	dma->CFG->DSR_BCR = numled * bytes_per_led;
	dma->CFG->DCR = DMA_DCR_ERQ | DMA_DCR_CS | DMA_DCR_SSIZE(1) |
		DMA_DCR_SINC | DMA_DCR_DSIZE(1) | DMA_DCR_D_REQ;
#elif defined(__IMXRT1062__)
	// See if we need to muck with DMA cache...
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    aa0e:	6862      	ldr	r2, [r4, #4]
    aa10:	4b4a      	ldr	r3, [pc, #296]	; (ab3c <WS2812Serial::show()+0x2d0>)
	prior_micros = m;
    aa12:	6120      	str	r0, [r4, #16]
	if ((uint32_t)frameBuffer >= 0x20200000u)  arm_dcache_flush(frameBuffer, numled * bytes_per_led);
    aa14:	429a      	cmp	r2, r3
    aa16:	d912      	bls.n	aa3e <WS2812Serial::show()+0x1d2>
    aa18:	8821      	ldrh	r1, [r4, #0]
// typically used with special fields you will want to quickly access
// in the future.  For data transmission, use arm_dcache_flush_delete().
__attribute__((always_inline, unused))
static inline void arm_dcache_flush(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    aa1a:	f022 031f 	bic.w	r3, r2, #31
	uint32_t end_addr = (uint32_t)addr + size;
    aa1e:	fb06 2201 	mla	r2, r6, r1, r2
	asm volatile("": : :"memory");
	asm("dsb");
    aa22:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCMVAC = location;
    aa26:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    aa2a:	f8c1 3f68 	str.w	r3, [r1, #3944]	; 0xf68
		location += 32;
    aa2e:	3320      	adds	r3, #32
	} while (location < end_addr);
    aa30:	429a      	cmp	r2, r3
    aa32:	d8fa      	bhi.n	aa2a <WS2812Serial::show()+0x1be>
	asm("dsb");
    aa34:	f3bf 8f4f 	dsb	sy
	asm("isb");
    aa38:	f3bf 8f6f 	isb	sy
	
	dma->sourceBuffer(frameBuffer, numled * bytes_per_led);
    aa3c:	6862      	ldr	r2, [r4, #4]
    aa3e:	68e0      	ldr	r0, [r4, #12]
    aa40:	8821      	ldrh	r1, [r4, #0]
		TCD->SADDR = p;
    aa42:	6803      	ldr	r3, [r0, #0]
    aa44:	fb06 f101 	mul.w	r1, r6, r1
		TCD->ATTR_SRC = 0;
    aa48:	2600      	movs	r6, #0
		TCD->SADDR = p;
    aa4a:	601a      	str	r2, [r3, #0]
		TCD->SOFF = 1;
    aa4c:	2201      	movs	r2, #1
    aa4e:	6805      	ldr	r5, [r0, #0]
    aa50:	809a      	strh	r2, [r3, #4]
		TCD->NBYTES = 1;
    aa52:	609a      	str	r2, [r3, #8]
		TCD->SLAST = -len;
    aa54:	424a      	negs	r2, r1
		TCD->ATTR_SRC = 0;
    aa56:	71de      	strb	r6, [r3, #7]
		TCD->SLAST = -len;
    aa58:	60da      	str	r2, [r3, #12]
		TCD->BITER = len;
    aa5a:	b28a      	uxth	r2, r1
    aa5c:	83da      	strh	r2, [r3, #30]
		TCD->CITER = len;
    aa5e:	82da      	strh	r2, [r3, #22]
		if (!(TCD->BITER & DMA_TCD_BITER_ELINK)) {
    aa60:	8bee      	ldrh	r6, [r5, #30]
    aa62:	0436      	lsls	r6, r6, #16
    aa64:	d412      	bmi.n	aa8c <WS2812Serial::show()+0x220>
			if (len > 32767) return;
    aa66:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    aa6a:	d201      	bcs.n	aa70 <WS2812Serial::show()+0x204>
			TCD->BITER = len;
    aa6c:	83ea      	strh	r2, [r5, #30]
			TCD->CITER = len;
    aa6e:	82ea      	strh	r2, [r5, #22]
		TCD->CSR |= DMA_TCD_CSR_DREQ;
    aa70:	8b9a      	ldrh	r2, [r3, #28]

	Serial.printf("SA:%x SO:%d AT:%x NB:%x SL:%d DA:%x DO: %d CI:%x DL:%x CS:%x BI:%x\n", (uint32_t)dma->TCD->SADDR,
	dma->TCD->SOFF, dma->TCD->ATTR, dma->TCD->NBYTES, dma->TCD->SLAST, (uint32_t)dma->TCD->DADDR, 
	dma->TCD->DOFF, dma->TCD->CITER, dma->TCD->DLASTSGA, dma->TCD->CSR, dma->TCD->BITER);
*/
	uart->STAT = 0;	// try clearing out the status
    aa72:	69a1      	ldr	r1, [r4, #24]
    aa74:	2400      	movs	r4, #0
    aa76:	b292      	uxth	r2, r2
    aa78:	f042 0208 	orr.w	r2, r2, #8
    aa7c:	839a      	strh	r2, [r3, #28]
    aa7e:	614c      	str	r4, [r1, #20]
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    aa80:	4b2d      	ldr	r3, [pc, #180]	; (ab38 <WS2812Serial::show()+0x2cc>)
    aa82:	7902      	ldrb	r2, [r0, #4]
    aa84:	76da      	strb	r2, [r3, #27]
	dma->enable();

#endif
}
    aa86:	b003      	add	sp, #12
    aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > 511) return;
    aa8c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    aa90:	d2ee      	bcs.n	aa70 <WS2812Serial::show()+0x204>
			TCD->BITER = (TCD->BITER & 0xFE00) | len;
    aa92:	8be9      	ldrh	r1, [r5, #30]
    aa94:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    aa98:	4311      	orrs	r1, r2
    aa9a:	83e9      	strh	r1, [r5, #30]
			TCD->CITER = (TCD->CITER & 0xFE00) | len;
    aa9c:	8ae9      	ldrh	r1, [r5, #22]
    aa9e:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    aaa2:	430a      	orrs	r2, r1
    aaa4:	82ea      	strh	r2, [r5, #22]
    aaa6:	e7e3      	b.n	aa70 <WS2812Serial::show()+0x204>
			  case WS2812_BGWR: n = (b << 24) | (g << 16) | (w << 8) | r; break;
    aaa8:	ea4f 6008 	mov.w	r0, r8, lsl #24
    aaac:	9e01      	ldr	r6, [sp, #4]
    aaae:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    aab2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
    aab6:	4328      	orrs	r0, r5
    aab8:	4303      	orrs	r3, r0
				if (!(n & 0x80000000)) x |= 0x07;
    aaba:	2b00      	cmp	r3, #0
    aabc:	bfb4      	ite	lt
    aabe:	2008      	movlt	r0, #8
    aac0:	200f      	movge	r0, #15
				if (!(n & 0x40000000)) x |= 0xE0;
    aac2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
				n <<= 2;
    aac6:	ea4f 0383 	mov.w	r3, r3, lsl #2
				if (!(n & 0x40000000)) x |= 0xE0;
    aaca:	bf08      	it	eq
    aacc:	f040 00e0 	orreq.w	r0, r0, #224	; 0xe0
				*fb++ = x;
    aad0:	f802 0b01 	strb.w	r0, [r2], #1
			} while (fb < stop);
    aad4:	428a      	cmp	r2, r1
    aad6:	d1f0      	bne.n	aaba <WS2812Serial::show()+0x24e>
		while (p < end) {
    aad8:	45e3      	cmp	fp, ip
    aada:	f102 0110 	add.w	r1, r2, #16
    aade:	f240 80f7 	bls.w	acd0 <WS2812Serial::show()+0x464>
			switch (config) {
    aae2:	78e0      	ldrb	r0, [r4, #3]
    aae4:	f10c 0c04 	add.w	ip, ip, #4
    aae8:	e70b      	b.n	a902 <WS2812Serial::show()+0x96>
			  case WS2812_BRWG: n = (b << 24) | (r << 16) | (w << 8) | g; break;
    aaea:	041b      	lsls	r3, r3, #16
    aaec:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    aaf0:	9801      	ldr	r0, [sp, #4]
    aaf2:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    aaf6:	432b      	orrs	r3, r5
    aaf8:	4303      	orrs	r3, r0
    aafa:	e7de      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_GBWR: n = (g << 24) | (b << 16) | (w << 8) | r; break;
    aafc:	ea4f 4008 	mov.w	r0, r8, lsl #16
    ab00:	9e01      	ldr	r6, [sp, #4]
    ab02:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    ab06:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
    ab0a:	4328      	orrs	r0, r5
    ab0c:	4303      	orrs	r3, r0
    ab0e:	e7d4      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_GRWB: n = (g << 24) | (r << 16) | (w << 8) | b; break;
    ab10:	041b      	lsls	r3, r3, #16
    ab12:	9801      	ldr	r0, [sp, #4]
    ab14:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    ab18:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ab1c:	432b      	orrs	r3, r5
    ab1e:	ea43 0308 	orr.w	r3, r3, r8
    ab22:	e7ca      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_RBWG: n = (r << 24) | (b << 16) | (w << 8) | g; break;
    ab24:	ea4f 4808 	mov.w	r8, r8, lsl #16
    ab28:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    ab2c:	9801      	ldr	r0, [sp, #4]
    ab2e:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
    ab32:	432b      	orrs	r3, r5
    ab34:	4303      	orrs	r3, r0
    ab36:	e7c0      	b.n	aaba <WS2812Serial::show()+0x24e>
    ab38:	400e8000 	.word	0x400e8000
    ab3c:	201fffff 	.word	0x201fffff
			  case WS2812_RGWB: n = (r << 24) | (g << 16) | (w << 8) | b; break;
    ab40:	9801      	ldr	r0, [sp, #4]
    ab42:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
    ab46:	ea4f 4a00 	mov.w	sl, r0, lsl #16
    ab4a:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
    ab4e:	432b      	orrs	r3, r5
    ab50:	ea43 0308 	orr.w	r3, r3, r8
    ab54:	e7b1      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_BWGR: n = (b << 24) | (w << 16) | (g << 8) | r; break;
    ab56:	ea4f 4009 	mov.w	r0, r9, lsl #16
    ab5a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    ab5e:	ea40 6008 	orr.w	r0, r0, r8, lsl #24
    ab62:	4330      	orrs	r0, r6
    ab64:	4303      	orrs	r3, r0
    ab66:	e7a8      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_BWRG: n = (b << 24) | (w << 16) | (r << 8) | g; break;
    ab68:	ea4f 4309 	mov.w	r3, r9, lsl #16
    ab6c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    ab70:	9801      	ldr	r0, [sp, #4]
    ab72:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    ab76:	433b      	orrs	r3, r7
    ab78:	4303      	orrs	r3, r0
    ab7a:	e79e      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_GWBR: n = (g << 24) | (w << 16) | (b << 8) | r; break;
    ab7c:	ea4f 4009 	mov.w	r0, r9, lsl #16
    ab80:	9d01      	ldr	r5, [sp, #4]
    ab82:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    ab86:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
    ab8a:	ea40 000e 	orr.w	r0, r0, lr
    ab8e:	4303      	orrs	r3, r0
    ab90:	e793      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_GWRB: n = (g << 24) | (w << 16) | (r << 8) | b; break;
    ab92:	ea4f 4309 	mov.w	r3, r9, lsl #16
    ab96:	9801      	ldr	r0, [sp, #4]
    ab98:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    ab9c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    aba0:	433b      	orrs	r3, r7
    aba2:	ea43 0308 	orr.w	r3, r3, r8
    aba6:	e788      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_RWBG: n = (r << 24) | (w << 16) | (b << 8) | g; break;
    aba8:	ea4f 4909 	mov.w	r9, r9, lsl #16
    abac:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    abb0:	9801      	ldr	r0, [sp, #4]
    abb2:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    abb6:	ea43 030e 	orr.w	r3, r3, lr
    abba:	4303      	orrs	r3, r0
    abbc:	e77d      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_RWGB: n = (r << 24) | (w << 16) | (g << 8) | b; break;
    abbe:	ea4f 4909 	mov.w	r9, r9, lsl #16
    abc2:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    abc6:	ea49 6303 	orr.w	r3, r9, r3, lsl #24
    abca:	4333      	orrs	r3, r6
    abcc:	ea43 0308 	orr.w	r3, r3, r8
    abd0:	e773      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_WBGR: n = (w << 24) | (b << 16) | (g << 8) | r; break;
    abd2:	ea4f 4008 	mov.w	r0, r8, lsl #16
    abd6:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    abda:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
    abde:	4330      	orrs	r0, r6
    abe0:	4303      	orrs	r3, r0
    abe2:	e76a      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_WBRG: n = (w << 24) | (b << 16) | (r << 8) | g; break;
    abe4:	ea4f 4308 	mov.w	r3, r8, lsl #16
    abe8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    abec:	9801      	ldr	r0, [sp, #4]
    abee:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    abf2:	433b      	orrs	r3, r7
    abf4:	4303      	orrs	r3, r0
    abf6:	e760      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_WGBR: n = (w << 24) | (g << 16) | (b << 8) | r; break;
    abf8:	9801      	ldr	r0, [sp, #4]
    abfa:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    abfe:	0400      	lsls	r0, r0, #16
    ac00:	ea40 6009 	orr.w	r0, r0, r9, lsl #24
    ac04:	ea40 000e 	orr.w	r0, r0, lr
    ac08:	4303      	orrs	r3, r0
    ac0a:	e756      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_WGRB: n = (w << 24) | (g << 16) | (r << 8) | b; break;
    ac0c:	9b01      	ldr	r3, [sp, #4]
    ac0e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    ac12:	041b      	lsls	r3, r3, #16
    ac14:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    ac18:	433b      	orrs	r3, r7
    ac1a:	ea43 0308 	orr.w	r3, r3, r8
    ac1e:	e74c      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_WRBG: n = (w << 24) | (r << 16) | (b << 8) | g; break;
    ac20:	041b      	lsls	r3, r3, #16
    ac22:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    ac26:	9801      	ldr	r0, [sp, #4]
    ac28:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    ac2c:	ea43 030e 	orr.w	r3, r3, lr
    ac30:	4303      	orrs	r3, r0
    ac32:	e742      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_WRGB: n = (w << 24) | (r << 16) | (g << 8) | b; break;
    ac34:	041b      	lsls	r3, r3, #16
    ac36:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    ac3a:	ea43 6309 	orr.w	r3, r3, r9, lsl #24
    ac3e:	4333      	orrs	r3, r6
    ac40:	ea43 0308 	orr.w	r3, r3, r8
    ac44:	e739      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_BGRW: n = (b << 24) | (b << 16) | (r << 8) | w; break;
    ac46:	ea4f 4308 	mov.w	r3, r8, lsl #16
    ac4a:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    ac4e:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    ac52:	433b      	orrs	r3, r7
    ac54:	ea43 0309 	orr.w	r3, r3, r9
    ac58:	e72f      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_BRGW: n = (b << 24) | (r << 16) | (g << 8) | w; break;
    ac5a:	041b      	lsls	r3, r3, #16
    ac5c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    ac60:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    ac64:	4333      	orrs	r3, r6
    ac66:	ea43 0309 	orr.w	r3, r3, r9
    ac6a:	e726      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_GBRW: n = (g << 24) | (b << 16) | (r << 8) | w; break;
    ac6c:	ea4f 4308 	mov.w	r3, r8, lsl #16
    ac70:	9801      	ldr	r0, [sp, #4]
    ac72:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
    ac76:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ac7a:	433b      	orrs	r3, r7
    ac7c:	ea43 0309 	orr.w	r3, r3, r9
    ac80:	e71b      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_GRBW: n = (g << 24) | (r << 16) | (b << 8) | w; break;
    ac82:	041b      	lsls	r3, r3, #16
    ac84:	9801      	ldr	r0, [sp, #4]
    ac86:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    ac8a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
    ac8e:	ea43 030e 	orr.w	r3, r3, lr
    ac92:	ea43 0309 	orr.w	r3, r3, r9
    ac96:	e710      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_RBGW: n = (r << 24) | (b << 16) | (g << 8) | w; break;
    ac98:	ea4f 4808 	mov.w	r8, r8, lsl #16
    ac9c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
    aca0:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
    aca4:	4333      	orrs	r3, r6
    aca6:	ea43 0309 	orr.w	r3, r3, r9
    acaa:	e706      	b.n	aaba <WS2812Serial::show()+0x24e>
			  case WS2812_RGBW: n = (r << 24) | (g << 16) | (b << 8) | w; break;
    acac:	9801      	ldr	r0, [sp, #4]
    acae:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
    acb2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
    acb6:	ea4a 6303 	orr.w	r3, sl, r3, lsl #24
    acba:	ea43 030e 	orr.w	r3, r3, lr
    acbe:	ea43 0309 	orr.w	r3, r3, r9
    acc2:	e6fa      	b.n	aaba <WS2812Serial::show()+0x24e>
		bytes_per_led = 16;
    acc4:	2610      	movs	r6, #16
		microseconds_per_led = 40;
    acc6:	2228      	movs	r2, #40	; 0x28
    acc8:	e694      	b.n	a9f4 <WS2812Serial::show()+0x188>
		bytes_per_led = 12;
    acca:	260c      	movs	r6, #12
		microseconds_per_led = 30;
    accc:	221e      	movs	r2, #30
    acce:	e691      	b.n	a9f4 <WS2812Serial::show()+0x188>
	uint32_t min_elapsed = (numled * microseconds_per_led) + 300;
    acd0:	8823      	ldrh	r3, [r4, #0]
		bytes_per_led = 16;
    acd2:	2610      	movs	r6, #16
		microseconds_per_led = 40;
    acd4:	2228      	movs	r2, #40	; 0x28
    acd6:	e68d      	b.n	a9f4 <WS2812Serial::show()+0x188>
			switch (config) {
    acd8:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 12;
    acda:	e64f      	b.n	a97c <WS2812Serial::show()+0x110>
			switch (config) {
    acdc:	2300      	movs	r3, #0
			const uint8_t *stop = fb + 16;
    acde:	e6ec      	b.n	aaba <WS2812Serial::show()+0x24e>

0000ace0 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    ace0:	2b00      	cmp	r3, #0
								  int nLedsOrOffset, int nLedsIfOffset) {
    ace2:	b570      	push	{r4, r5, r6, lr}
    ace4:	4604      	mov	r4, r0
    ace6:	460e      	mov	r6, r1
    ace8:	4615      	mov	r5, r2
	int nOffset = (nLedsIfOffset > 0) ? nLedsOrOffset : 0;
    acea:	dd03      	ble.n	acf4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x14>
	pLed->setLeds(data + nOffset, nLeds);
    acec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    acf0:	461d      	mov	r5, r3
    acf2:	4416      	add	r6, r2
	pLed->init();
    acf4:	6823      	ldr	r3, [r4, #0]
    acf6:	4620      	mov	r0, r4
    acf8:	689b      	ldr	r3, [r3, #8]
    acfa:	4798      	blx	r3
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    acfc:	6823      	ldr	r3, [r4, #0]
    acfe:	4a0b      	ldr	r2, [pc, #44]	; (ad2c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x4c>)
    ad00:	699b      	ldr	r3, [r3, #24]
        m_Data = data;
    ad02:	6066      	str	r6, [r4, #4]
        m_nLeds = nLeds;
    ad04:	4293      	cmp	r3, r2
    ad06:	6165      	str	r5, [r4, #20]
    ad08:	d101      	bne.n	ad0e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2e>
}
    ad0a:	4620      	mov	r0, r4
    ad0c:	bd70      	pop	{r4, r5, r6, pc}
	FastLED.setMaxRefreshRate(pLed->getMaxRefreshRate(),true);
    ad0e:	4620      	mov	r0, r4
    ad10:	4798      	blx	r3

void CFastLED::setMaxRefreshRate(uint16_t refresh, bool constrain) {
	if(constrain) {
		// if we're constraining, the new value of m_nMinMicros _must_ be higher than previously (because we're only
		// allowed to slow things down if constraining)
		if(refresh > 0) {
    ad12:	2800      	cmp	r0, #0
    ad14:	d0f9      	beq.n	ad0a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x2a>
			m_nMinMicros = ((1000000 / refresh) > m_nMinMicros) ? (1000000 / refresh) : m_nMinMicros;
    ad16:	4b06      	ldr	r3, [pc, #24]	; (ad30 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x50>)
    ad18:	4a06      	ldr	r2, [pc, #24]	; (ad34 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x54>)
    ad1a:	fbb3 f0f0 	udiv	r0, r3, r0
    ad1e:	6853      	ldr	r3, [r2, #4]
    ad20:	4283      	cmp	r3, r0
    ad22:	bf38      	it	cc
    ad24:	4603      	movcc	r3, r0
}
    ad26:	4620      	mov	r0, r4
			m_nMinMicros = ((1000000 / refresh) > m_nMinMicros) ? (1000000 / refresh) : m_nMinMicros;
    ad28:	6053      	str	r3, [r2, #4]
}
    ad2a:	bd70      	pop	{r4, r5, r6, pc}
    ad2c:	00000131 	.word	0x00000131
    ad30:	000f4240 	.word	0x000f4240
    ad34:	200045e8 	.word	0x200045e8

0000ad38 <CFastLED::show(unsigned char)>:
void CFastLED::show(uint8_t scale) {
    ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ad3c:	6843      	ldr	r3, [r0, #4]
void CFastLED::show(uint8_t scale) {
    ad3e:	b087      	sub	sp, #28
    ad40:	4c43      	ldr	r4, [pc, #268]	; (ae50 <CFastLED::show(unsigned char)+0x118>)
    ad42:	4605      	mov	r5, r0
    ad44:	460f      	mov	r7, r1
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ad46:	b133      	cbz	r3, ad56 <CFastLED::show(unsigned char)+0x1e>
    ad48:	f00b f8f8 	bl	15f3c <micros>
    ad4c:	6822      	ldr	r2, [r4, #0]
    ad4e:	686b      	ldr	r3, [r5, #4]
    ad50:	1a80      	subs	r0, r0, r2
    ad52:	4298      	cmp	r0, r3
    ad54:	d3f7      	bcc.n	ad46 <CFastLED::show(unsigned char)+0xe>
	lastshow = micros();
    ad56:	f00b f8f1 	bl	15f3c <micros>
	if(m_pPowerFunc) {
    ad5a:	68eb      	ldr	r3, [r5, #12]
	lastshow = micros();
    ad5c:	6020      	str	r0, [r4, #0]
	if(m_pPowerFunc) {
    ad5e:	b11b      	cbz	r3, ad68 <CFastLED::show(unsigned char)+0x30>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    ad60:	4638      	mov	r0, r7
    ad62:	68a9      	ldr	r1, [r5, #8]
    ad64:	4798      	blx	r3
    ad66:	4607      	mov	r7, r0
    static CLEDController *head() { return m_pHead; }
    ad68:	4b3a      	ldr	r3, [pc, #232]	; (ae54 <CFastLED::show(unsigned char)+0x11c>)
    ad6a:	681c      	ldr	r4, [r3, #0]
	while(pCur) {
    ad6c:	2c00      	cmp	r4, #0
    ad6e:	d052      	beq.n	ae16 <CFastLED::show(unsigned char)+0xde>
    ad70:	f10d 0814 	add.w	r8, sp, #20
    ad74:	f10d 0908 	add.w	r9, sp, #8
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    ad78:	2600      	movs	r6, #0
    ad7a:	e9cd 7500 	strd	r7, r5, [sp]
		if(m_nFPS < 100) { pCur->setDither(0); }
    ad7e:	9b01      	ldr	r3, [sp, #4]
    inline uint8_t getDither() { return m_DitherMode; }
    ad80:	7ca5      	ldrb	r5, [r4, #18]
    ad82:	885b      	ldrh	r3, [r3, #2]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    ad84:	6861      	ldr	r1, [r4, #4]
    ad86:	2b63      	cmp	r3, #99	; 0x63
    ad88:	6823      	ldr	r3, [r4, #0]
    ad8a:	6962      	ldr	r2, [r4, #20]
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    ad8c:	bf98      	it	ls
    ad8e:	74a6      	strbls	r6, [r4, #18]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    ad90:	685f      	ldr	r7, [r3, #4]
              if(scale > 0) {
    ad92:	9b00      	ldr	r3, [sp, #0]
    ad94:	f8ad 6010 	strh.w	r6, [sp, #16]
    ad98:	f88d 6012 	strb.w	r6, [sp, #18]
    ad9c:	b1eb      	cbz	r3, adda <CFastLED::show(unsigned char)+0xa2>
    ad9e:	f104 000b 	add.w	r0, r4, #11
    ada2:	f10d 0c10 	add.w	ip, sp, #16
    ada6:	f104 0b0e 	add.w	fp, r4, #14
    adaa:	46a6      	mov	lr, r4
                      uint8_t cc = colorCorrection.raw[i];
    adac:	f810 4f01 	ldrb.w	r4, [r0, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    adb0:	f890 a003 	ldrb.w	sl, [r0, #3]
                      if(cc > 0 && ct > 0) {
    adb4:	b164      	cbz	r4, add0 <CFastLED::show(unsigned char)+0x98>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    adb6:	f10a 0301 	add.w	r3, sl, #1
                      if(cc > 0 && ct > 0) {
    adba:	f1ba 0f00 	cmp.w	sl, #0
    adbe:	d007      	beq.n	add0 <CFastLED::show(unsigned char)+0x98>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    adc0:	fb04 3303 	mla	r3, r4, r3, r3
    adc4:	9c00      	ldr	r4, [sp, #0]
    adc6:	fb04 f303 	mul.w	r3, r4, r3
                          work /= 0x10000L;
    adca:	0c1b      	lsrs	r3, r3, #16
                          adj.raw[i] = work & 0xFF;
    adcc:	f88c 3000 	strb.w	r3, [ip]
                  for(uint8_t i = 0; i < 3; ++i) {
    add0:	4583      	cmp	fp, r0
    add2:	f10c 0c01 	add.w	ip, ip, #1
    add6:	d1e9      	bne.n	adac <CFastLED::show(unsigned char)+0x74>
    add8:	4674      	mov	r4, lr
              return adj;
    adda:	9b04      	ldr	r3, [sp, #16]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    addc:	4620      	mov	r0, r4
              return adj;
    adde:	f8a8 3000 	strh.w	r3, [r8]
    ade2:	0c1b      	lsrs	r3, r3, #16
    ade4:	f10d 0814 	add.w	r8, sp, #20
    ade8:	f88d 3016 	strb.w	r3, [sp, #22]
    adec:	9b05      	ldr	r3, [sp, #20]
    adee:	f8a9 3000 	strh.w	r3, [r9]
    adf2:	0c1b      	lsrs	r3, r3, #16
    adf4:	f10d 0908 	add.w	r9, sp, #8
    adf8:	f88d 300a 	strb.w	r3, [sp, #10]
    adfc:	9b02      	ldr	r3, [sp, #8]
    adfe:	f8ad 300c 	strh.w	r3, [sp, #12]
    ae02:	0c1b      	lsrs	r3, r3, #16
    ae04:	f88d 300e 	strb.w	r3, [sp, #14]
        show(m_Data, m_nLeds, getAdjustment(brightness));
    ae08:	9b03      	ldr	r3, [sp, #12]
    ae0a:	47b8      	blx	r7
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    ae0c:	74a5      	strb	r5, [r4, #18]
    CLEDController *next() { return m_pNext; }
    ae0e:	68a4      	ldr	r4, [r4, #8]
	while(pCur) {
    ae10:	2c00      	cmp	r4, #0
    ae12:	d1b4      	bne.n	ad7e <CFastLED::show(unsigned char)+0x46>
    ae14:	9d01      	ldr	r5, [sp, #4]
	if(br++ >= nFrames) {
    ae16:	4a10      	ldr	r2, [pc, #64]	; (ae58 <CFastLED::show(unsigned char)+0x120>)
    ae18:	6811      	ldr	r1, [r2, #0]
    ae1a:	1c4b      	adds	r3, r1, #1
    ae1c:	2918      	cmp	r1, #24
    ae1e:	6013      	str	r3, [r2, #0]
    ae20:	dd12      	ble.n	ae48 <CFastLED::show(unsigned char)+0x110>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
    ae22:	480e      	ldr	r0, [pc, #56]	; (ae5c <CFastLED::show(unsigned char)+0x124>)
		m_nFPS = (br * 1000) / now;
    ae24:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    ae28:	6801      	ldr	r1, [r0, #0]
    ae2a:	fb04 f303 	mul.w	r3, r4, r3
    ae2e:	6806      	ldr	r6, [r0, #0]
		now -= lastframe;
    ae30:	480b      	ldr	r0, [pc, #44]	; (ae60 <CFastLED::show(unsigned char)+0x128>)
    ae32:	6804      	ldr	r4, [r0, #0]
		lastframe = millis();
    ae34:	6006      	str	r6, [r0, #0]
		br = 0;
    ae36:	2000      	movs	r0, #0
		now -= lastframe;
    ae38:	1b09      	subs	r1, r1, r4
		br = 0;
    ae3a:	6010      	str	r0, [r2, #0]
		m_nFPS = (br * 1000) / now;
    ae3c:	2901      	cmp	r1, #1
    ae3e:	bf38      	it	cc
    ae40:	2101      	movcc	r1, #1
    ae42:	fbb3 f3f1 	udiv	r3, r3, r1
    ae46:	806b      	strh	r3, [r5, #2]
}
    ae48:	b007      	add	sp, #28
    ae4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae4e:	bf00      	nop
    ae50:	20005020 	.word	0x20005020
    ae54:	2000512c 	.word	0x2000512c
    ae58:	20005304 	.word	0x20005304
    ae5c:	2000bc24 	.word	0x2000bc24
    ae60:	20005308 	.word	0x20005308

0000ae64 <CFastLED::showColor(CRGB const&, unsigned char)>:
void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ae68:	6843      	ldr	r3, [r0, #4]
void CFastLED::showColor(const struct CRGB & color, uint8_t scale) {
    ae6a:	b087      	sub	sp, #28
    ae6c:	4c42      	ldr	r4, [pc, #264]	; (af78 <CFastLED::showColor(CRGB const&, unsigned char)+0x114>)
    ae6e:	4605      	mov	r5, r0
    ae70:	4689      	mov	r9, r1
    ae72:	4617      	mov	r7, r2
	while(m_nMinMicros && ((micros()-lastshow) < m_nMinMicros));
    ae74:	b133      	cbz	r3, ae84 <CFastLED::showColor(CRGB const&, unsigned char)+0x20>
    ae76:	f00b f861 	bl	15f3c <micros>
    ae7a:	6822      	ldr	r2, [r4, #0]
    ae7c:	686b      	ldr	r3, [r5, #4]
    ae7e:	1a80      	subs	r0, r0, r2
    ae80:	4298      	cmp	r0, r3
    ae82:	d3f7      	bcc.n	ae74 <CFastLED::showColor(CRGB const&, unsigned char)+0x10>
	lastshow = micros();
    ae84:	f00b f85a 	bl	15f3c <micros>
	if(m_pPowerFunc) {
    ae88:	68eb      	ldr	r3, [r5, #12]
	lastshow = micros();
    ae8a:	6020      	str	r0, [r4, #0]
	if(m_pPowerFunc) {
    ae8c:	b11b      	cbz	r3, ae96 <CFastLED::showColor(CRGB const&, unsigned char)+0x32>
		scale = (*m_pPowerFunc)(scale, m_nPowerData);
    ae8e:	4638      	mov	r0, r7
    ae90:	68a9      	ldr	r1, [r5, #8]
    ae92:	4798      	blx	r3
    ae94:	4607      	mov	r7, r0
    static CLEDController *head() { return m_pHead; }
    ae96:	4b39      	ldr	r3, [pc, #228]	; (af7c <CFastLED::showColor(CRGB const&, unsigned char)+0x118>)
    ae98:	681c      	ldr	r4, [r3, #0]
	while(pCur) {
    ae9a:	2c00      	cmp	r4, #0
    ae9c:	d050      	beq.n	af40 <CFastLED::showColor(CRGB const&, unsigned char)+0xdc>
    ae9e:	f10d 0814 	add.w	r8, sp, #20
    aea2:	f10d 0a08 	add.w	sl, sp, #8
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    aea6:	2600      	movs	r6, #0
    aea8:	e9cd 7500 	strd	r7, r5, [sp]
		if(m_nFPS < 100) { pCur->setDither(0); }
    aeac:	9b01      	ldr	r3, [sp, #4]
    inline uint8_t getDither() { return m_DitherMode; }
    aeae:	7ca5      	ldrb	r5, [r4, #18]
    aeb0:	885b      	ldrh	r3, [r3, #2]
        showColor(data, m_nLeds, getAdjustment(brightness));
    aeb2:	6962      	ldr	r2, [r4, #20]
    aeb4:	2b63      	cmp	r3, #99	; 0x63
    aeb6:	6823      	ldr	r3, [r4, #0]
    aeb8:	f8ad 6010 	strh.w	r6, [sp, #16]
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    aebc:	bf98      	it	ls
    aebe:	74a6      	strbls	r6, [r4, #18]
        showColor(data, m_nLeds, getAdjustment(brightness));
    aec0:	681f      	ldr	r7, [r3, #0]
              if(scale > 0) {
    aec2:	9b00      	ldr	r3, [sp, #0]
    aec4:	f88d 6012 	strb.w	r6, [sp, #18]
    aec8:	b1db      	cbz	r3, af02 <CFastLED::showColor(CRGB const&, unsigned char)+0x9e>
    aeca:	f104 010b 	add.w	r1, r4, #11
    aece:	a804      	add	r0, sp, #16
    aed0:	f104 0b0e 	add.w	fp, r4, #14
    aed4:	46a4      	mov	ip, r4
                      uint8_t cc = colorCorrection.raw[i];
    aed6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
                      uint8_t ct = colorTemperature.raw[i];
    aeda:	f891 e003 	ldrb.w	lr, [r1, #3]
                      if(cc > 0 && ct > 0) {
    aede:	b15c      	cbz	r4, aef8 <CFastLED::showColor(CRGB const&, unsigned char)+0x94>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    aee0:	f10e 0301 	add.w	r3, lr, #1
                      if(cc > 0 && ct > 0) {
    aee4:	f1be 0f00 	cmp.w	lr, #0
    aee8:	d006      	beq.n	aef8 <CFastLED::showColor(CRGB const&, unsigned char)+0x94>
                          uint32_t work = (((uint32_t)cc)+1) * (((uint32_t)ct)+1) * scale;
    aeea:	fb04 3303 	mla	r3, r4, r3, r3
    aeee:	9c00      	ldr	r4, [sp, #0]
    aef0:	fb04 f303 	mul.w	r3, r4, r3
                          work /= 0x10000L;
    aef4:	0c1b      	lsrs	r3, r3, #16
                          adj.raw[i] = work & 0xFF;
    aef6:	7003      	strb	r3, [r0, #0]
                  for(uint8_t i = 0; i < 3; ++i) {
    aef8:	458b      	cmp	fp, r1
    aefa:	f100 0001 	add.w	r0, r0, #1
    aefe:	d1ea      	bne.n	aed6 <CFastLED::showColor(CRGB const&, unsigned char)+0x72>
    af00:	4664      	mov	r4, ip
              return adj;
    af02:	9b04      	ldr	r3, [sp, #16]
        showColor(data, m_nLeds, getAdjustment(brightness));
    af04:	4620      	mov	r0, r4
    af06:	4649      	mov	r1, r9
              return adj;
    af08:	f8a8 3000 	strh.w	r3, [r8]
    af0c:	0c1b      	lsrs	r3, r3, #16
    af0e:	f10d 0814 	add.w	r8, sp, #20
    af12:	f88d 3016 	strb.w	r3, [sp, #22]
    af16:	9b05      	ldr	r3, [sp, #20]
    af18:	f8aa 3000 	strh.w	r3, [sl]
    af1c:	0c1b      	lsrs	r3, r3, #16
    af1e:	f10d 0a08 	add.w	sl, sp, #8
    af22:	f88d 300a 	strb.w	r3, [sp, #10]
    af26:	9b02      	ldr	r3, [sp, #8]
    af28:	f8ad 300c 	strh.w	r3, [sp, #12]
    af2c:	0c1b      	lsrs	r3, r3, #16
    af2e:	f88d 300e 	strb.w	r3, [sp, #14]
        showColor(data, m_nLeds, getAdjustment(brightness));
    af32:	9b03      	ldr	r3, [sp, #12]
    af34:	47b8      	blx	r7
    inline CLEDController & setDither(uint8_t ditherMode = BINARY_DITHER) { m_DitherMode = ditherMode; return *this; }
    af36:	74a5      	strb	r5, [r4, #18]
    CLEDController *next() { return m_pNext; }
    af38:	68a4      	ldr	r4, [r4, #8]
	while(pCur) {
    af3a:	2c00      	cmp	r4, #0
    af3c:	d1b6      	bne.n	aeac <CFastLED::showColor(CRGB const&, unsigned char)+0x48>
    af3e:	9d01      	ldr	r5, [sp, #4]
	if(br++ >= nFrames) {
    af40:	4a0f      	ldr	r2, [pc, #60]	; (af80 <CFastLED::showColor(CRGB const&, unsigned char)+0x11c>)
    af42:	6811      	ldr	r1, [r2, #0]
    af44:	1c4b      	adds	r3, r1, #1
    af46:	2918      	cmp	r1, #24
    af48:	6013      	str	r3, [r2, #0]
    af4a:	dd12      	ble.n	af72 <CFastLED::showColor(CRGB const&, unsigned char)+0x10e>
    af4c:	480d      	ldr	r0, [pc, #52]	; (af84 <CFastLED::showColor(CRGB const&, unsigned char)+0x120>)
		m_nFPS = (br * 1000) / now;
    af4e:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    af52:	6801      	ldr	r1, [r0, #0]
    af54:	fb04 f303 	mul.w	r3, r4, r3
    af58:	6806      	ldr	r6, [r0, #0]
		now -= lastframe;
    af5a:	480b      	ldr	r0, [pc, #44]	; (af88 <CFastLED::showColor(CRGB const&, unsigned char)+0x124>)
    af5c:	6804      	ldr	r4, [r0, #0]
		lastframe = millis();
    af5e:	6006      	str	r6, [r0, #0]
		br = 0;
    af60:	2000      	movs	r0, #0
		now -= lastframe;
    af62:	1b09      	subs	r1, r1, r4
		br = 0;
    af64:	6010      	str	r0, [r2, #0]
		m_nFPS = (br * 1000) / now;
    af66:	2901      	cmp	r1, #1
    af68:	bf38      	it	cc
    af6a:	2101      	movcc	r1, #1
    af6c:	fbb3 f3f1 	udiv	r3, r3, r1
    af70:	806b      	strh	r3, [r5, #2]
}
    af72:	b007      	add	sp, #28
    af74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af78:	20005020 	.word	0x20005020
    af7c:	2000512c 	.word	0x2000512c
    af80:	20005304 	.word	0x20005304
    af84:	2000bc24 	.word	0x2000bc24
    af88:	20005308 	.word	0x20005308

0000af8c <CFastLED::clear(bool)>:
void CFastLED::clear(bool writeData) {
    af8c:	b510      	push	{r4, lr}
    af8e:	b082      	sub	sp, #8
	if(writeData) {
    af90:	b979      	cbnz	r1, afb2 <CFastLED::clear(bool)+0x26>
    static CLEDController *head() { return m_pHead; }
    af92:	4b0c      	ldr	r3, [pc, #48]	; (afc4 <CFastLED::clear(bool)+0x38>)
    af94:	681c      	ldr	r4, [r3, #0]
	while(pCur) {
    af96:	b154      	cbz	r4, afae <CFastLED::clear(bool)+0x22>
        if(m_Data) {
    af98:	6860      	ldr	r0, [r4, #4]
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    af9a:	2100      	movs	r1, #0
        if(m_Data) {
    af9c:	b120      	cbz	r0, afa8 <CFastLED::clear(bool)+0x1c>
            memset8((void*)m_Data, 0, sizeof(struct CRGB) * m_nLeds);
    af9e:	6962      	ldr	r2, [r4, #20]
    afa0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    afa4:	f017 fa9c 	bl	224e0 <memset>
    CLEDController *next() { return m_pNext; }
    afa8:	68a4      	ldr	r4, [r4, #8]
    afaa:	2c00      	cmp	r4, #0
    afac:	d1f4      	bne.n	af98 <CFastLED::clear(bool)+0xc>
}
    afae:	b002      	add	sp, #8
    afb0:	bd10      	pop	{r4, pc}
    afb2:	2200      	movs	r2, #0
		showColor(CRGB(0,0,0), 0);
    afb4:	a901      	add	r1, sp, #4
    afb6:	f8ad 2004 	strh.w	r2, [sp, #4]
    afba:	f88d 2006 	strb.w	r2, [sp, #6]
    afbe:	f7ff ff51 	bl	ae64 <CFastLED::showColor(CRGB const&, unsigned char)>
    afc2:	e7e6      	b.n	af92 <CFastLED::clear(bool)+0x6>
    afc4:	2000512c 	.word	0x2000512c

0000afc8 <CFastLED::setMaxRefreshRate(unsigned short, bool)>:
	if(constrain) {
    afc8:	b14a      	cbz	r2, afde <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x16>
		if(refresh > 0) {
    afca:	b151      	cbz	r1, afe2 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x1a>
			m_nMinMicros = ((1000000 / refresh) > m_nMinMicros) ? (1000000 / refresh) : m_nMinMicros;
    afcc:	4a08      	ldr	r2, [pc, #32]	; (aff0 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x28>)
    afce:	6843      	ldr	r3, [r0, #4]
    afd0:	fbb2 f2f1 	udiv	r2, r2, r1
    afd4:	4293      	cmp	r3, r2
    afd6:	bf38      	it	cc
    afd8:	4613      	movcc	r3, r2
    afda:	6043      	str	r3, [r0, #4]
    afdc:	4770      	bx	lr
		}
	} else if(refresh > 0) {
    afde:	b909      	cbnz	r1, afe4 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x1c>
		m_nMinMicros = 1000000 / refresh;
	} else {
		m_nMinMicros = 0;
    afe0:	6041      	str	r1, [r0, #4]
	}
}
    afe2:	4770      	bx	lr
		m_nMinMicros = 1000000 / refresh;
    afe4:	4b02      	ldr	r3, [pc, #8]	; (aff0 <CFastLED::setMaxRefreshRate(unsigned short, bool)+0x28>)
    afe6:	fbb3 f3f1 	udiv	r3, r3, r1
    afea:	6043      	str	r3, [r0, #4]
    afec:	4770      	bx	lr
    afee:	bf00      	nop
    aff0:	000f4240 	.word	0x000f4240

0000aff4 <_GLOBAL__sub_I_pSmartMatrix>:
CFastLED::CFastLED() {
    aff4:	4b04      	ldr	r3, [pc, #16]	; (b008 <_GLOBAL__sub_I_pSmartMatrix+0x14>)
    aff6:	20ff      	movs	r0, #255	; 0xff
	m_nPowerData = 0xFFFFFFFF;
    aff8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	m_pPowerFunc = NULL;
    affc:	2200      	movs	r2, #0
CFastLED::CFastLED() {
    affe:	6018      	str	r0, [r3, #0]
	m_pPowerFunc = NULL;
    b000:	e9c3 1202 	strd	r1, r2, [r3, #8]

/// Called at program exit when run in a desktop environment. 
/// Extra C definition that some environments may need. 
/// @returns 0 to indicate success
extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    b004:	4770      	bx	lr
    b006:	bf00      	nop
    b008:	200045e8 	.word	0x200045e8

0000b00c <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    b00c:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    b010:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    b012:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    b016:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    b018:	d101      	bne.n	b01e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    b01a:	6883      	ldr	r3, [r0, #8]
    b01c:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    b01e:	f00a b955 	b.w	152cc <EventResponder::triggerEventNotImmediate()>
    b022:	bf00      	nop

0000b024 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>:
void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    b024:	b4f0      	push	{r4, r5, r6, r7}
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b026:	6804      	ldr	r4, [r0, #0]
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    b028:	f240 2501 	movw	r5, #513	; 0x201
	while (count > 0) {
    b02c:	461e      	mov	r6, r3
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    b02e:	6125      	str	r5, [r4, #16]
	while (count > 0) {
    b030:	b1a3      	cbz	r3, b05c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    b032:	b321      	cbz	r1, b07e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x5a>
    b034:	f811 5b01 	ldrb.w	r5, [r1], #1
		count--; // how many bytes left to output.
    b038:	3b01      	subs	r3, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    b03a:	6665      	str	r5, [r4, #100]	; 0x64
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    b03c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    b03e:	07af      	lsls	r7, r5, #30
    b040:	d407      	bmi.n	b052 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				if (p_read) *p_read++ = b; 
    b042:	4615      	mov	r5, r2
				count_read--;
    b044:	3e01      	subs	r6, #1
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    b046:	6f67      	ldr	r7, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
    b048:	b11a      	cbz	r2, b052 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x2e>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    b04a:	f805 7b01 	strb.w	r7, [r5], #1
				if (p_read) *p_read++ = b; 
    b04e:	462a      	mov	r2, r5
    b050:	6804      	ldr	r4, [r0, #0]
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    b052:	6965      	ldr	r5, [r4, #20]
    b054:	07ed      	lsls	r5, r5, #31
    b056:	d5f1      	bpl.n	b03c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x18>
	while (count > 0) {
    b058:	2b00      	cmp	r3, #0
    b05a:	d1ea      	bne.n	b032 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0xe>
	while (count_read) {
    b05c:	b16e      	cbz	r6, b07a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x56>
    b05e:	6803      	ldr	r3, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    b060:	6f19      	ldr	r1, [r3, #112]	; 0x70
    b062:	0789      	lsls	r1, r1, #30
    b064:	d4fa      	bmi.n	b05c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			if (p_read) *p_read++ = b; 
    b066:	4611      	mov	r1, r2
			count_read--;
    b068:	3e01      	subs	r6, #1
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    b06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
			if (p_read) *p_read++ = b; 
    b06c:	2a00      	cmp	r2, #0
    b06e:	d0f5      	beq.n	b05c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x38>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    b070:	f801 3b01 	strb.w	r3, [r1], #1
			if (p_read) *p_read++ = b; 
    b074:	460a      	mov	r2, r1
	while (count_read) {
    b076:	2e00      	cmp	r6, #0
    b078:	d1f1      	bne.n	b05e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x3a>
}
    b07a:	bcf0      	pop	{r4, r5, r6, r7}
    b07c:	4770      	bx	lr
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    b07e:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    b082:	e7d9      	b.n	b038 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]+0x14>

0000b084 <_spi_dma_rxISR1()>:

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    b084:	4b32      	ldr	r3, [pc, #200]	; (b150 <_spi_dma_rxISR1()+0xcc>)
		DMA_CINT = channel;
    b086:	4933      	ldr	r1, [pc, #204]	; (b154 <_spi_dma_rxISR1()+0xd0>)
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    b088:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    b08a:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    b08e:	7920      	ldrb	r0, [r4, #4]
    b090:	77c8      	strb	r0, [r1, #31]
	_dmaRX->clearComplete();

	if (_dma_count_remaining) {
    b092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    b094:	f895 c004 	ldrb.w	ip, [r5, #4]
    b098:	f881 c01c 	strb.w	ip, [r1, #28]
    b09c:	7708      	strb	r0, [r1, #28]
    b09e:	b152      	cbz	r2, b0b6 <_spi_dma_rxISR1()+0x32>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    b0a0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b0a4:	d323      	bcc.n	b0ee <_spi_dma_rxISR1()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    b0a6:	492c      	ldr	r1, [pc, #176]	; (b158 <_spi_dma_rxISR1()+0xd4>)
    b0a8:	4411      	add	r1, r2
		DMA_SERQ = channel;
    b0aa:	4a2a      	ldr	r2, [pc, #168]	; (b154 <_spi_dma_rxISR1()+0xd0>)
    b0ac:	6419      	str	r1, [r3, #64]	; 0x40
    b0ae:	76d0      	strb	r0, [r2, #27]
    b0b0:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    b0b4:	bd30      	pop	{r4, r5, pc}
    b0b6:	6819      	ldr	r1, [r3, #0]
		}
		_dmaRX->enable();
		_dmaTX->enable();
	} else {

		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    b0b8:	240f      	movs	r4, #15

		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
		port().SR = 0x3f00;	// clear out all of the other status...

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    b0ba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    b0bc:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    b0be:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    b0c2:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    b0c4:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    b0c6:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    b0ca:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    b0cc:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    b0ce:	6804      	ldr	r4, [r0, #0]
    b0d0:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    b0d2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    b0d6:	4b21      	ldr	r3, [pc, #132]	; (b15c <_spi_dma_rxISR1()+0xd8>)
    b0d8:	429c      	cmp	r4, r3
    b0da:	d126      	bne.n	b12a <_spi_dma_rxISR1()+0xa6>
		if (_type == EventTypeImmediate) {
    b0dc:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    b0de:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    b0e0:	2b02      	cmp	r3, #2
		_data = data;
    b0e2:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    b0e4:	d126      	bne.n	b134 <_spi_dma_rxISR1()+0xb0>
			(*_function)(*this);
    b0e6:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    b0e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    b0ec:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    b0ee:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    b0f0:	8be9      	ldrh	r1, [r5, #30]
    b0f2:	0409      	lsls	r1, r1, #16
    b0f4:	d422      	bmi.n	b13c <_spi_dma_rxISR1()+0xb8>
		tcd->BITER = len & 0x7fff;
    b0f6:	b292      	uxth	r2, r2
    b0f8:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    b0fa:	6821      	ldr	r1, [r4, #0]
    b0fc:	8bec      	ldrh	r4, [r5, #30]
    b0fe:	b2a4      	uxth	r4, r4
    b100:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    b102:	8bcc      	ldrh	r4, [r1, #30]
    b104:	0424      	lsls	r4, r4, #16
    b106:	d505      	bpl.n	b114 <_spi_dma_rxISR1()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    b108:	8bcc      	ldrh	r4, [r1, #30]
    b10a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    b10e:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    b112:	4322      	orrs	r2, r4
    b114:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    b116:	8bca      	ldrh	r2, [r1, #30]
    b118:	b292      	uxth	r2, r2
    b11a:	82ca      	strh	r2, [r1, #22]
    b11c:	2100      	movs	r1, #0
    b11e:	4a0d      	ldr	r2, [pc, #52]	; (b154 <_spi_dma_rxISR1()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    b120:	6419      	str	r1, [r3, #64]	; 0x40
    b122:	76d0      	strb	r0, [r2, #27]
    b124:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    b128:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    b12a:	4623      	mov	r3, r4
    b12c:	4611      	mov	r1, r2
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    b12e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    b132:	4718      	bx	r3
void _spi_dma_rxISR1(void) {SPI1.dma_rxisr();}
    b134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    b138:	f00a b8c8 	b.w	152cc <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    b13c:	8be9      	ldrh	r1, [r5, #30]
    b13e:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    b142:	b292      	uxth	r2, r2
    b144:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    b148:	ea41 010e 	orr.w	r1, r1, lr
    b14c:	83e9      	strh	r1, [r5, #30]
    b14e:	e7d4      	b.n	b0fa <_spi_dma_rxISR1()+0x76>
    b150:	20004b1c 	.word	0x20004b1c
    b154:	400e8000 	.word	0x400e8000
    b158:	ffff8001 	.word	0xffff8001
    b15c:	0000b00d 	.word	0x0000b00d

0000b160 <_spi_dma_rxISR0()>:
	_dmaRX->clearInterrupt();
    b160:	4b32      	ldr	r3, [pc, #200]	; (b22c <_spi_dma_rxISR0()+0xcc>)
		DMA_CINT = channel;
    b162:	4933      	ldr	r1, [pc, #204]	; (b230 <_spi_dma_rxISR0()+0xd0>)
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    b164:	b530      	push	{r4, r5, lr}
	_dmaTX->clearComplete();
    b166:	e9d3 5411 	ldrd	r5, r4, [r3, #68]	; 0x44
    b16a:	7920      	ldrb	r0, [r4, #4]
    b16c:	77c8      	strb	r0, [r1, #31]
	if (_dma_count_remaining) {
    b16e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		DMA_CDNE = channel;
    b170:	f895 c004 	ldrb.w	ip, [r5, #4]
    b174:	f881 c01c 	strb.w	ip, [r1, #28]
    b178:	7708      	strb	r0, [r1, #28]
    b17a:	b152      	cbz	r2, b192 <_spi_dma_rxISR0()+0x32>
		if (_dma_count_remaining > MAX_DMA_COUNT) {
    b17c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    b180:	d323      	bcc.n	b1ca <_spi_dma_rxISR0()+0x6a>
			_dma_count_remaining -= MAX_DMA_COUNT;
    b182:	492c      	ldr	r1, [pc, #176]	; (b234 <_spi_dma_rxISR0()+0xd4>)
    b184:	4411      	add	r1, r2
		DMA_SERQ = channel;
    b186:	4a2a      	ldr	r2, [pc, #168]	; (b230 <_spi_dma_rxISR0()+0xd0>)
    b188:	6419      	str	r1, [r3, #64]	; 0x40
    b18a:	76d0      	strb	r0, [r2, #27]
    b18c:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    b190:	bd30      	pop	{r4, r5, pc}
    b192:	6819      	ldr	r1, [r3, #0]
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    b194:	240f      	movs	r4, #15
		_dma_event_responder->triggerEvent();
    b196:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
		port().FCR = LPSPI_FCR_TXWATER(15); // _spi_fcr_save;	// restore the FSR status... 
    b198:	658c      	str	r4, [r1, #88]	; 0x58
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    b19a:	f240 3401 	movw	r4, #769	; 0x301
 		port().DER = 0;		// DMA no longer doing TX (or RX)
    b19e:	61ca      	str	r2, [r1, #28]
		port().CR = LPSPI_CR_MEN | LPSPI_CR_RRF | LPSPI_CR_RTF;   // actually clear both...
    b1a0:	610c      	str	r4, [r1, #16]
		port().SR = 0x3f00;	// clear out all of the other status...
    b1a2:	f44f 547c 	mov.w	r4, #16128	; 0x3f00
    b1a6:	614c      	str	r4, [r1, #20]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    b1a8:	2103      	movs	r1, #3
		_dma_event_responder->triggerEvent();
    b1aa:	6804      	ldr	r4, [r0, #0]
    b1ac:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    b1ae:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
		_dma_event_responder->triggerEvent();
    b1b2:	4b21      	ldr	r3, [pc, #132]	; (b238 <_spi_dma_rxISR0()+0xd8>)
    b1b4:	429c      	cmp	r4, r3
    b1b6:	d126      	bne.n	b206 <_spi_dma_rxISR0()+0xa6>
		if (_type == EventTypeImmediate) {
    b1b8:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    b1ba:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    b1bc:	2b02      	cmp	r3, #2
		_data = data;
    b1be:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    b1c0:	d126      	bne.n	b210 <_spi_dma_rxISR0()+0xb0>
			(*_function)(*this);
    b1c2:	6883      	ldr	r3, [r0, #8]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    b1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    b1c8:	4718      	bx	r3
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining);
    b1ca:	682d      	ldr	r5, [r5, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    b1cc:	8be9      	ldrh	r1, [r5, #30]
    b1ce:	0409      	lsls	r1, r1, #16
    b1d0:	d422      	bmi.n	b218 <_spi_dma_rxISR0()+0xb8>
		tcd->BITER = len & 0x7fff;
    b1d2:	b292      	uxth	r2, r2
    b1d4:	83ea      	strh	r2, [r5, #30]
	tcd->CITER = tcd->BITER; 
    b1d6:	6821      	ldr	r1, [r4, #0]
    b1d8:	8bec      	ldrh	r4, [r5, #30]
    b1da:	b2a4      	uxth	r4, r4
    b1dc:	82ec      	strh	r4, [r5, #22]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    b1de:	8bcc      	ldrh	r4, [r1, #30]
    b1e0:	0424      	lsls	r4, r4, #16
    b1e2:	d505      	bpl.n	b1f0 <_spi_dma_rxISR0()+0x90>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    b1e4:	8bcc      	ldrh	r4, [r1, #30]
    b1e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
    b1ea:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    b1ee:	4322      	orrs	r2, r4
    b1f0:	83ca      	strh	r2, [r1, #30]
	tcd->CITER = tcd->BITER; 
    b1f2:	8bca      	ldrh	r2, [r1, #30]
    b1f4:	b292      	uxth	r2, r2
    b1f6:	82ca      	strh	r2, [r1, #22]
    b1f8:	2100      	movs	r1, #0
    b1fa:	4a0d      	ldr	r2, [pc, #52]	; (b230 <_spi_dma_rxISR0()+0xd0>)
			_dma_count_remaining -= MAX_DMA_COUNT;
    b1fc:	6419      	str	r1, [r3, #64]	; 0x40
    b1fe:	76d0      	strb	r0, [r2, #27]
    b200:	f882 c01b 	strb.w	ip, [r2, #27]
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    b204:	bd30      	pop	{r4, r5, pc}
		_dma_event_responder->triggerEvent();
    b206:	4623      	mov	r3, r4
    b208:	4611      	mov	r1, r2
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    b20a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		_dma_event_responder->triggerEvent();
    b20e:	4718      	bx	r3
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    b210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			triggerEventNotImmediate();
    b214:	f00a b85a 	b.w	152cc <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    b218:	8be9      	ldrh	r1, [r5, #30]
    b21a:	f3c2 0e08 	ubfx	lr, r2, #0, #9
    b21e:	b292      	uxth	r2, r2
    b220:	f401 417e 	and.w	r1, r1, #65024	; 0xfe00
    b224:	ea41 010e 	orr.w	r1, r1, lr
    b228:	83e9      	strh	r1, [r5, #30]
    b22a:	e7d4      	b.n	b1d6 <_spi_dma_rxISR0()+0x76>
    b22c:	20004acc 	.word	0x20004acc
    b230:	400e8000 	.word	0x400e8000
    b234:	ffff8001 	.word	0xffff8001
    b238:	0000b00d 	.word	0x0000b00d

0000b23c <SPIClass::SPIClass(unsigned int, unsigned int)>:
		: port_addr(myport), hardware_addr(myhardware) {
    b23c:	2300      	movs	r3, #0
    b23e:	e9c0 1200 	strd	r1, r2, [r0]
    b242:	e9c0 3302 	strd	r3, r3, [r0, #8]
    b246:	e9c0 3304 	strd	r3, r3, [r0, #16]
    b24a:	e9c0 3306 	strd	r3, r3, [r0, #24]
    b24e:	e9c0 3308 	strd	r3, r3, [r0, #32]
    b252:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
    b256:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
    b25a:	6383      	str	r3, [r0, #56]	; 0x38
    b25c:	8783      	strh	r3, [r0, #60]	; 0x3c
    b25e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    b262:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
	}
    b266:	4770      	bx	lr

0000b268 <SPIClass::begin()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    b268:	6843      	ldr	r3, [r0, #4]
{
    b26a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    b26e:	e9d3 4100 	ldrd	r4, r1, [r3]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    b272:	4d81      	ldr	r5, [pc, #516]	; (b478 <SPIClass::begin()+0x210>)
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    b274:	f04f 0ab8 	mov.w	sl, #184	; 0xb8
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    b278:	6822      	ldr	r2, [r4, #0]
	port().CR = LPSPI_CR_RST;
    b27a:	f04f 0802 	mov.w	r8, #2
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    b27e:	ea22 0201 	bic.w	r2, r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    b282:	497e      	ldr	r1, [pc, #504]	; (b47c <SPIClass::begin()+0x214>)
	hardware().clock_gate_register &= ~hardware().clock_gate_mask;
    b284:	6022      	str	r2, [r4, #0]
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    b286:	69aa      	ldr	r2, [r5, #24]
    b288:	4011      	ands	r1, r2
		CCM_CBCMR_LPSPI_PODF(2) | CCM_CBCMR_LPSPI_CLK_SEL(1); // pg 714
    b28a:	4a7d      	ldr	r2, [pc, #500]	; (b480 <SPIClass::begin()+0x218>)
    b28c:	430a      	orrs	r2, r1
	CCM_CBCMR = (CCM_CBCMR & ~(CCM_CBCMR_LPSPI_PODF_MASK | CCM_CBCMR_LPSPI_CLK_SEL_MASK)) |
    b28e:	61aa      	str	r2, [r5, #24]
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    b290:	f890 e010 	ldrb.w	lr, [r0, #16]
    b294:	4a7b      	ldr	r2, [pc, #492]	; (b484 <SPIClass::begin()+0x21c>)
    b296:	eb03 060e 	add.w	r6, r3, lr
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    b29a:	eb03 0e8e 	add.w	lr, r3, lr, lsl #2
	*(portControlRegister(hardware().miso_pin[miso_pin_index])) = fastio;
    b29e:	7c31      	ldrb	r1, [r6, #16]
    b2a0:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    b2a4:	6889      	ldr	r1, [r1, #8]
    b2a6:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    b2aa:	f890 c011 	ldrb.w	ip, [r0, #17]
    b2ae:	eb03 050c 	add.w	r5, r3, ip
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    b2b2:	f10c 0c0a 	add.w	ip, ip, #10
	*(portControlRegister(hardware().mosi_pin[mosi_pin_index])) = fastio;
    b2b6:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
    b2ba:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    b2be:	6889      	ldr	r1, [r1, #8]
    b2c0:	f8c1 a000 	str.w	sl, [r1]
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    b2c4:	7c81      	ldrb	r1, [r0, #18]
    b2c6:	eb03 0901 	add.w	r9, r3, r1
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    b2ca:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	*(portControlRegister(hardware().sck_pin[sck_pin_index])) = fastio;
    b2ce:	f899 b038 	ldrb.w	fp, [r9, #56]	; 0x38
    b2d2:	eb02 1b0b 	add.w	fp, r2, fp, lsl #4
    b2d6:	f8db b008 	ldr.w	fp, [fp, #8]
    b2da:	f8cb a000 	str.w	sl, [fp]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
    b2de:	f8d4 a000 	ldr.w	sl, [r4]
    b2e2:	685f      	ldr	r7, [r3, #4]
    b2e4:	ea4a 0a07 	orr.w	sl, sl, r7
    b2e8:	f8c4 a000 	str.w	sl, [r4]
	*(portConfigRegister(hardware().miso_pin[miso_pin_index])) = hardware().miso_mux[miso_pin_index];
    b2ec:	7c34      	ldrb	r4, [r6, #16]
    b2ee:	f8de e014 	ldr.w	lr, [lr, #20]
    b2f2:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    b2f6:	6864      	ldr	r4, [r4, #4]
    b2f8:	f8c4 e000 	str.w	lr, [r4]
	*(portConfigRegister(hardware().mosi_pin [mosi_pin_index])) = hardware().mosi_mux[mosi_pin_index];
    b2fc:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    b300:	f853 c02c 	ldr.w	ip, [r3, ip, lsl #2]
    b304:	eb02 1404 	add.w	r4, r2, r4, lsl #4
    b308:	6864      	ldr	r4, [r4, #4]
    b30a:	f8c4 c000 	str.w	ip, [r4]
	*(portConfigRegister(hardware().sck_pin [sck_pin_index])) = hardware().sck_mux[sck_pin_index];
    b30e:	f899 4038 	ldrb.w	r4, [r9, #56]	; 0x38
    b312:	eb02 1204 	add.w	r2, r2, r4, lsl #4
    b316:	6852      	ldr	r2, [r2, #4]
    b318:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
    b31a:	6011      	str	r1, [r2, #0]
	hardware().sck_select_input_register = hardware().sck_select_val[sck_pin_index];
    b31c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b31e:	f899 1044 	ldrb.w	r1, [r9, #68]	; 0x44
    b322:	6011      	str	r1, [r2, #0]
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    b324:	6a1a      	ldr	r2, [r3, #32]
    b326:	7f31      	ldrb	r1, [r6, #28]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    b328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	hardware().miso_select_input_register = hardware().miso_select_val[miso_pin_index];
    b32a:	6011      	str	r1, [r2, #0]
	hardware().mosi_select_input_register = hardware().mosi_select_val[mosi_pin_index];
    b32c:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
    b330:	601a      	str	r2, [r3, #0]
	port().FCR = LPSPI_FCR_TXWATER(15);
    b332:	220f      	movs	r2, #15
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b334:	6803      	ldr	r3, [r0, #0]
	port().CR = LPSPI_CR_RST;
    b336:	f8c3 8010 	str.w	r8, [r3, #16]
	port().FCR = LPSPI_FCR_TXWATER(15);
    b33a:	659a      	str	r2, [r3, #88]	; 0x58
		if (interruptMasksUsed) {
    b33c:	7cc2      	ldrb	r2, [r0, #19]
    b33e:	2a00      	cmp	r2, #0
    b340:	d031      	beq.n	b3a6 <SPIClass::begin()+0x13e>
			__disable_irq();
    b342:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    b344:	7cc3      	ldrb	r3, [r0, #19]
    b346:	07dc      	lsls	r4, r3, #31
    b348:	d508      	bpl.n	b35c <SPIClass::begin()+0xf4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    b34a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b34e:	6944      	ldr	r4, [r0, #20]
    b350:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    b354:	4022      	ands	r2, r4
    b356:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    b358:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    b35c:	0799      	lsls	r1, r3, #30
    b35e:	d508      	bpl.n	b372 <SPIClass::begin()+0x10a>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    b360:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b364:	6984      	ldr	r4, [r0, #24]
    b366:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    b36a:	4022      	ands	r2, r4
    b36c:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    b36e:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    b372:	075a      	lsls	r2, r3, #29
    b374:	d508      	bpl.n	b388 <SPIClass::begin()+0x120>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    b376:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b37a:	69c4      	ldr	r4, [r0, #28]
    b37c:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    b380:	4022      	ands	r2, r4
    b382:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    b384:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    b388:	071f      	lsls	r7, r3, #28
    b38a:	d508      	bpl.n	b39e <SPIClass::begin()+0x136>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    b38c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b390:	6a04      	ldr	r4, [r0, #32]
    b392:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    b396:	4022      	ands	r2, r4
    b398:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    b39a:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    b39e:	06de      	lsls	r6, r3, #27
    b3a0:	d455      	bmi.n	b44e <SPIClass::begin()+0x1e6>
			__enable_irq();
    b3a2:	b662      	cpsie	i
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b3a4:	6803      	ldr	r3, [r0, #0]
		if (settings.clock() != _clock) {
    b3a6:	4c38      	ldr	r4, [pc, #224]	; (b488 <SPIClass::begin()+0x220>)
    b3a8:	6882      	ldr	r2, [r0, #8]
    b3aa:	42a2      	cmp	r2, r4
    b3ac:	d059      	beq.n	b462 <SPIClass::begin()+0x1fa>
			uint32_t cbcmr = CCM_CBCMR;
    b3ae:	4a32      	ldr	r2, [pc, #200]	; (b478 <SPIClass::begin()+0x210>)
		    _clock = settings.clock();
    b3b0:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    b3b2:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b3b4:	4935      	ldr	r1, [pc, #212]	; (b48c <SPIClass::begin()+0x224>)
    b3b6:	f3c2 1601 	ubfx	r6, r2, #4, #2
    b3ba:	f3c2 6282 	ubfx	r2, r2, #26, #3
			if (d && clkhz/d > _clock) d++;
    b3be:	4d34      	ldr	r5, [pc, #208]	; (b490 <SPIClass::begin()+0x228>)
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b3c0:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
    b3c4:	3201      	adds	r2, #1
    b3c6:	fbb1 f2f2 	udiv	r2, r1, r2
			if (d && clkhz/d > _clock) d++;
    b3ca:	42aa      	cmp	r2, r5
    b3cc:	d831      	bhi.n	b432 <SPIClass::begin()+0x1ca>
    b3ce:	2200      	movs	r2, #0
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b3d0:	60c2      	str	r2, [r0, #12]
		port().CR = 0;
    b3d2:	2400      	movs	r4, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b3d4:	2103      	movs	r1, #3
		port().CR = 0;
    b3d6:	611c      	str	r4, [r3, #16]
		port().TCR = settings.tcr;
    b3d8:	2407      	movs	r4, #7
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b3da:	6259      	str	r1, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    b3dc:	2101      	movs	r1, #1
		port().CCR = _ccr;
    b3de:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    b3e0:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    b3e2:	6119      	str	r1, [r3, #16]
		if (interruptMasksUsed) {
    b3e4:	7cc3      	ldrb	r3, [r0, #19]
    b3e6:	b313      	cbz	r3, b42e <SPIClass::begin()+0x1c6>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    b3e8:	07dd      	lsls	r5, r3, #31
    b3ea:	d504      	bpl.n	b3f6 <SPIClass::begin()+0x18e>
    b3ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b3ee:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b3f2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    b3f6:	079c      	lsls	r4, r3, #30
    b3f8:	d504      	bpl.n	b404 <SPIClass::begin()+0x19c>
    b3fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    b3fc:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b400:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    b404:	0759      	lsls	r1, r3, #29
    b406:	d504      	bpl.n	b412 <SPIClass::begin()+0x1aa>
    b408:	6b01      	ldr	r1, [r0, #48]	; 0x30
    b40a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b40e:	f8c2 1108 	str.w	r1, [r2, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    b412:	071a      	lsls	r2, r3, #28
    b414:	d504      	bpl.n	b420 <SPIClass::begin()+0x1b8>
    b416:	6b41      	ldr	r1, [r0, #52]	; 0x34
    b418:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b41c:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    b420:	06db      	lsls	r3, r3, #27
    b422:	d504      	bpl.n	b42e <SPIClass::begin()+0x1c6>
    b424:	6b82      	ldr	r2, [r0, #56]	; 0x38
    b426:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    b42a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
    b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = _clock ? clkhz/_clock : clkhz;
    b432:	4918      	ldr	r1, [pc, #96]	; (b494 <SPIClass::begin()+0x22c>)
    b434:	fba1 5102 	umull	r5, r1, r1, r2
    b438:	0d09      	lsrs	r1, r1, #20
			if (d && clkhz/d > _clock) d++;
    b43a:	fbb2 f2f1 	udiv	r2, r2, r1
    b43e:	42a2      	cmp	r2, r4
    b440:	bf88      	it	hi
    b442:	3101      	addhi	r1, #1
			if (d > 257) d= 257;  // max div
    b444:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    b448:	d30d      	bcc.n	b466 <SPIClass::begin()+0x1fe>
    b44a:	4a13      	ldr	r2, [pc, #76]	; (b498 <SPIClass::begin()+0x230>)
				div = d-2;
    b44c:	e7c0      	b.n	b3d0 <SPIClass::begin()+0x168>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    b44e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    b452:	6a41      	ldr	r1, [r0, #36]	; 0x24
    b454:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    b458:	400b      	ands	r3, r1
    b45a:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    b45c:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    b460:	e79f      	b.n	b3a2 <SPIClass::begin()+0x13a>
		port().CCR = _ccr;
    b462:	68c2      	ldr	r2, [r0, #12]
    b464:	e7b5      	b.n	b3d2 <SPIClass::begin()+0x16a>
			if (d > 2) {
    b466:	2902      	cmp	r1, #2
    b468:	d9b1      	bls.n	b3ce <SPIClass::begin()+0x166>
				div = d-2;
    b46a:	3902      	subs	r1, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b46c:	084c      	lsrs	r4, r1, #1
    b46e:	0222      	lsls	r2, r4, #8
    b470:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    b474:	430a      	orrs	r2, r1
    b476:	e7ab      	b.n	b3d0 <SPIClass::begin()+0x168>
    b478:	400fc000 	.word	0x400fc000
    b47c:	e3ffffcf 	.word	0xe3ffffcf
    b480:	08000010 	.word	0x08000010
    b484:	200024c4 	.word	0x200024c4
    b488:	003d0900 	.word	0x003d0900
    b48c:	2000173c 	.word	0x2000173c
    b490:	003d08ff 	.word	0x003d08ff
    b494:	431bde83 	.word	0x431bde83
    b498:	007f7fff 	.word	0x007f7fff

0000b49c <SPIClass::transfer(void const*, void*, unsigned int)>:
	if (count == 0) return;
    b49c:	b10b      	cbz	r3, b4a2 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    b49e:	f7ff bdc1 	b.w	b024 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.0]>
}
    b4a2:	4770      	bx	lr

0000b4a4 <SPIClass::end()>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    b4a4:	6843      	ldr	r3, [r0, #4]
	if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    b4a6:	e9d3 1200 	ldrd	r1, r2, [r3]
    b4aa:	6809      	ldr	r1, [r1, #0]
    b4ac:	4211      	tst	r1, r2
    b4ae:	d100      	bne.n	b4b2 <SPIClass::end()+0xe>
    b4b0:	4770      	bx	lr
void SPIClass::end() {
    b4b2:	b510      	push	{r4, lr}
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b4b4:	6802      	ldr	r2, [r0, #0]
    b4b6:	4604      	mov	r4, r0
		port().CR = 0;  // turn off the enable
    b4b8:	2000      	movs	r0, #0
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    b4ba:	2105      	movs	r1, #5
		port().CR = 0;  // turn off the enable
    b4bc:	6110      	str	r0, [r2, #16]
		pinMode(hardware().miso_pin[miso_pin_index], INPUT_DISABLE);
    b4be:	7c22      	ldrb	r2, [r4, #16]
    b4c0:	4413      	add	r3, r2
    b4c2:	7c18      	ldrb	r0, [r3, #16]
    b4c4:	f00a fda0 	bl	16008 <pinMode>
		pinMode(hardware().mosi_pin[mosi_pin_index], INPUT_DISABLE);
    b4c8:	7c62      	ldrb	r2, [r4, #17]
    b4ca:	6863      	ldr	r3, [r4, #4]
    b4cc:	2105      	movs	r1, #5
    b4ce:	4413      	add	r3, r2
    b4d0:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
    b4d4:	f00a fd98 	bl	16008 <pinMode>
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    b4d8:	6863      	ldr	r3, [r4, #4]
    b4da:	7ca2      	ldrb	r2, [r4, #18]
    b4dc:	2105      	movs	r1, #5
    b4de:	4413      	add	r3, r2
}
    b4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pinMode(hardware().sck_pin[sck_pin_index], INPUT_DISABLE);
    b4e4:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
    b4e8:	f00a bd8e 	b.w	16008 <pinMode>

0000b4ec <_GLOBAL__sub_I__ZN8SPIClass5beginEv>:

	}
}
    b4ec:	b508      	push	{r3, lr}
SPIClass SPI((uintptr_t)&IMXRT_LPSPI4_S, (uintptr_t)&SPIClass::spiclass_lpspi4_hardware);
    b4ee:	4a08      	ldr	r2, [pc, #32]	; (b510 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x24>)
    b4f0:	4908      	ldr	r1, [pc, #32]	; (b514 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x28>)
    b4f2:	4809      	ldr	r0, [pc, #36]	; (b518 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x2c>)
    b4f4:	f7ff fea2 	bl	b23c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI1((uintptr_t)&IMXRT_LPSPI3_S, (uintptr_t)&SPIClass::spiclass_lpspi3_hardware);
    b4f8:	4a08      	ldr	r2, [pc, #32]	; (b51c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x30>)
    b4fa:	4909      	ldr	r1, [pc, #36]	; (b520 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x34>)
    b4fc:	4809      	ldr	r0, [pc, #36]	; (b524 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x38>)
    b4fe:	f7ff fe9d 	bl	b23c <SPIClass::SPIClass(unsigned int, unsigned int)>
SPIClass SPI2((uintptr_t)&IMXRT_LPSPI1_S, (uintptr_t)&SPIClass::spiclass_lpspi1_hardware);
    b502:	4a09      	ldr	r2, [pc, #36]	; (b528 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x3c>)
    b504:	4909      	ldr	r1, [pc, #36]	; (b52c <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x40>)
    b506:	480a      	ldr	r0, [pc, #40]	; (b530 <_GLOBAL__sub_I__ZN8SPIClass5beginEv+0x44>)
    b508:	f7ff fe98 	bl	b23c <SPIClass::SPIClass(unsigned int, unsigned int)>
}
    b50c:	bd08      	pop	{r3, pc}
    b50e:	bf00      	nop
    b510:	20001050 	.word	0x20001050
    b514:	403a0000 	.word	0x403a0000
    b518:	20004acc 	.word	0x20004acc
    b51c:	20000fe0 	.word	0x20000fe0
    b520:	4039c000 	.word	0x4039c000
    b524:	20004b1c 	.word	0x20004b1c
    b528:	20000f70 	.word	0x20000f70
    b52c:	40394000 	.word	0x40394000
    b530:	20004b6c 	.word	0x20004b6c

0000b534 <DMAChannel::~DMAChannel()>:
	~DMAChannel() {
    b534:	b510      	push	{r4, lr}
    b536:	4604      	mov	r4, r0
		release();
    b538:	f009 feae 	bl	15298 <DMAChannel::release()>
	}
    b53c:	4620      	mov	r0, r4
    b53e:	bd10      	pop	{r4, pc}

0000b540 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE>:
static float bufferL[bufferLength];

volatile int32_t AsyncAudioInputSPDIF3::buffer_offset = 0;	// read by resample/ written in spdif input isr -> copied at the beginning of 'resmaple' protected by __disable_irq() in resample
int32_t AsyncAudioInputSPDIF3::resample_offset = 0; // read/written by resample/ read in spdif input isr -> no protection needed?

DMAChannel AsyncAudioInputSPDIF3::dma(false);
    b540:	4a02      	ldr	r2, [pc, #8]	; (b54c <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0xc>)
    b542:	4903      	ldr	r1, [pc, #12]	; (b550 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x10>)
    b544:	4803      	ldr	r0, [pc, #12]	; (b554 <_GLOBAL__sub_I__ZN21AsyncAudioInputSPDIF310microsLastE+0x14>)
    b546:	f00d bb07 	b.w	18b58 <__aeabi_atexit>
    b54a:	bf00      	nop
    b54c:	20003338 	.word	0x20003338
    b550:	0000b535 	.word	0x0000b535
    b554:	200051dc 	.word	0x200051dc

0000b558 <AudioControlSGTL5000::disable()>:
	bool disable(void) { return false; }
    b558:	2000      	movs	r0, #0
    b55a:	4770      	bx	lr

0000b55c <AudioControlSGTL5000::inputLevel(float)>:
	bool inputLevel(float n) {return false;}
    b55c:	2000      	movs	r0, #0
    b55e:	4770      	bx	lr

0000b560 <AudioControlSGTL5000::read(unsigned int)>:
	return true;
}


unsigned int AudioControlSGTL5000::read(unsigned int reg)
{
    b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    b562:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    b564:	7a02      	ldrb	r2, [r0, #8]
    b566:	4c1e      	ldr	r4, [pc, #120]	; (b5e0 <AudioControlSGTL5000::read(unsigned int)+0x80>)
    b568:	460d      	mov	r5, r1
    b56a:	40ba      	lsls	r2, r7
	}
	size_t write(long n) {
		return write((uint8_t)n);
	}
	size_t write(unsigned int n) {
		return write((uint8_t)n);
    b56c:	f3c1 2107 	ubfx	r1, r1, #8, #8
    b570:	4606      	mov	r6, r0
    b572:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    b574:	f884 20a5 	strb.w	r2, [r4, #165]	; 0xa5
		transmitting = 1;
    b578:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    b57c:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    b580:	f009 f966 	bl	14850 <TwoWire::write(unsigned char)>
    b584:	b2e9      	uxtb	r1, r5
    b586:	4620      	mov	r0, r4
    b588:	f009 f962 	bl	14850 <TwoWire::write(unsigned char)>
	unsigned int val;
	Wire.beginTransmission(i2c_addr);
	Wire.write(reg >> 8);
	Wire.write(reg);
	if (Wire.endTransmission(false) != 0) return 0;
    b58c:	2100      	movs	r1, #0
    b58e:	4620      	mov	r0, r4
    b590:	f009 fa6c 	bl	14a6c <TwoWire::endTransmission(unsigned char)>
    b594:	b108      	cbz	r0, b59a <AudioControlSGTL5000::read(unsigned int)+0x3a>
    b596:	2000      	movs	r0, #0
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
	val = Wire.read() << 8;
	val |= Wire.read();
	return val;
}
    b598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    b59a:	463b      	mov	r3, r7
    b59c:	2202      	movs	r2, #2
    b59e:	7a31      	ldrb	r1, [r6, #8]
    b5a0:	4620      	mov	r0, r4
    b5a2:	f009 fae1 	bl	14b68 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	if (Wire.requestFrom((int)i2c_addr, 2) < 2) return 0;
    b5a6:	2801      	cmp	r0, #1
    b5a8:	d9f5      	bls.n	b596 <AudioControlSGTL5000::read(unsigned int)+0x36>
		if (rxBufferIndex >= rxBufferLength) return -1;
    b5aa:	f894 20a2 	ldrb.w	r2, [r4, #162]	; 0xa2
    b5ae:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
    b5b2:	4282      	cmp	r2, r0
    b5b4:	d210      	bcs.n	b5d8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    b5b6:	1c53      	adds	r3, r2, #1
    b5b8:	18a1      	adds	r1, r4, r2
    b5ba:	b2db      	uxtb	r3, r3
    b5bc:	7e89      	ldrb	r1, [r1, #26]
		if (rxBufferIndex >= rxBufferLength) return -1;
    b5be:	4298      	cmp	r0, r3
	val = Wire.read() << 8;
    b5c0:	ea4f 2101 	mov.w	r1, r1, lsl #8
		return rxBuffer[rxBufferIndex++];
    b5c4:	f884 30a2 	strb.w	r3, [r4, #162]	; 0xa2
		if (rxBufferIndex >= rxBufferLength) return -1;
    b5c8:	d906      	bls.n	b5d8 <AudioControlSGTL5000::read(unsigned int)+0x78>
		return rxBuffer[rxBufferIndex++];
    b5ca:	4423      	add	r3, r4
    b5cc:	3202      	adds	r2, #2
    b5ce:	7e98      	ldrb	r0, [r3, #26]
    b5d0:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
	val |= Wire.read();
    b5d4:	4308      	orrs	r0, r1
}
    b5d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5de:	bf00      	nop
    b5e0:	20004bbc 	.word	0x20004bbc

0000b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>:

bool AudioControlSGTL5000::write(unsigned int reg, unsigned int val)
{
    b5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		transmitting = 1;
    b5e6:	2701      	movs	r7, #1
		txBuffer[0] = (address << 1);
    b5e8:	7a03      	ldrb	r3, [r0, #8]
    b5ea:	4c14      	ldr	r4, [pc, #80]	; (b63c <AudioControlSGTL5000::write(unsigned int, unsigned int)+0x58>)
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    b5ec:	2924      	cmp	r1, #36	; 0x24
    b5ee:	fa03 f307 	lsl.w	r3, r3, r7
{
    b5f2:	460d      	mov	r5, r1
	if (reg == CHIP_ANA_CTRL) ana_ctrl = val;
    b5f4:	bf08      	it	eq
    b5f6:	80c2      	strheq	r2, [r0, #6]
{
    b5f8:	4616      	mov	r6, r2
		return write((uint8_t)n);
    b5fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
    b5fe:	4620      	mov	r0, r4
		txBuffer[0] = (address << 1);
    b600:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		transmitting = 1;
    b604:	f884 7130 	strb.w	r7, [r4, #304]	; 0x130
		txBufferLength = 1;
    b608:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		return write((uint8_t)n);
    b60c:	f009 f920 	bl	14850 <TwoWire::write(unsigned char)>
    b610:	b2e9      	uxtb	r1, r5
    b612:	4620      	mov	r0, r4
    b614:	f009 f91c 	bl	14850 <TwoWire::write(unsigned char)>
    b618:	f3c6 2107 	ubfx	r1, r6, #8, #8
    b61c:	4620      	mov	r0, r4
    b61e:	f009 f917 	bl	14850 <TwoWire::write(unsigned char)>
    b622:	4620      	mov	r0, r4
    b624:	b2f1      	uxtb	r1, r6
    b626:	f009 f913 	bl	14850 <TwoWire::write(unsigned char)>
		return endTransmission(1);
    b62a:	4639      	mov	r1, r7
    b62c:	4620      	mov	r0, r4
    b62e:	f009 fa1d 	bl	14a6c <TwoWire::endTransmission(unsigned char)>
	Wire.write(reg);
	Wire.write(val >> 8);
	Wire.write(val);
	if (Wire.endTransmission() == 0) return true;
	return false;
}
    b632:	fab0 f080 	clz	r0, r0
    b636:	0940      	lsrs	r0, r0, #5
    b638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b63a:	bf00      	nop
    b63c:	20004bbc 	.word	0x20004bbc

0000b640 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>:
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        muted = true;
    b644:	f04f 0801 	mov.w	r8, #1
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    b648:	460f      	mov	r7, r1
    b64a:	4615      	mov	r5, r2
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    b64c:	2130      	movs	r1, #48	; 0x30
    b64e:	f244 0260 	movw	r2, #16480	; 0x4060
        muted = true;
    b652:	f880 8004 	strb.w	r8, [r0, #4]
bool AudioControlSGTL5000::enable(const unsigned extMCLK, const uint32_t pllFreq)
    b656:	4604      	mov	r4, r0
	int r = write(CHIP_ANA_POWER, 0x4060);  // VDDD is externally driven with 1.8V
    b658:	f7ff ffc4 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (!r) return false;
    b65c:	4606      	mov	r6, r0
    b65e:	b910      	cbnz	r0, b666 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x26>
}
    b660:	4630      	mov	r0, r6
    b662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	write(CHIP_LINREG_CTRL, 0x006C);  // VDDA & VDDIO both over 3.1V
    b666:	226c      	movs	r2, #108	; 0x6c
    b668:	2126      	movs	r1, #38	; 0x26
    b66a:	4620      	mov	r0, r4
    b66c:	f7ff ffba 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_REF_CTRL, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
    b670:	f44f 72f9 	mov.w	r2, #498	; 0x1f2
    b674:	2128      	movs	r1, #40	; 0x28
    b676:	4620      	mov	r0, r4
    b678:	f7ff ffb4 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_LINE_OUT_CTRL, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
    b67c:	f640 7222 	movw	r2, #3874	; 0xf22
    b680:	212c      	movs	r1, #44	; 0x2c
    b682:	4620      	mov	r0, r4
    b684:	f7ff ffae 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SHORT_CTRL, 0x4446);  // allow up to 125mA
    b688:	f244 4246 	movw	r2, #17478	; 0x4446
    b68c:	213c      	movs	r1, #60	; 0x3c
    b68e:	4620      	mov	r0, r4
    b690:	f7ff ffa8 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0137);  // enable zero cross detectors
    b694:	f240 1237 	movw	r2, #311	; 0x137
    b698:	2124      	movs	r1, #36	; 0x24
    b69a:	4620      	mov	r0, r4
    b69c:	f7ff ffa2 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (extMCLK > 0) {
    b6a0:	2f00      	cmp	r7, #0
    b6a2:	d06b      	beq.n	b77c <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x13c>
		if (extMCLK > 17000000) {
    b6a4:	4b45      	ldr	r3, [pc, #276]	; (b7bc <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x17c>)
			write(CHIP_CLK_TOP_CTRL, 0);
    b6a6:	2134      	movs	r1, #52	; 0x34
    b6a8:	4620      	mov	r0, r4
		if (extMCLK > 17000000) {
    b6aa:	429f      	cmp	r7, r3
			write(CHIP_CLK_TOP_CTRL, 1);
    b6ac:	bf8c      	ite	hi
    b6ae:	4642      	movhi	r2, r8
			write(CHIP_CLK_TOP_CTRL, 0);
    b6b0:	2200      	movls	r2, #0
    b6b2:	f7ff ff97 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    b6b6:	ee07 5a90 	vmov	s15, r5
    b6ba:	ed9f 7a41 	vldr	s14, [pc, #260]	; b7c0 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0x180>
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    b6be:	2132      	movs	r1, #50	; 0x32
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    b6c0:	eeb8 6a67 	vcvt.f32.u32	s12, s15
    b6c4:	ee07 7a90 	vmov	s15, r7
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    b6c8:	4620      	mov	r0, r4
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    b6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    b6ce:	fbb5 f2f7 	udiv	r2, r5, r7
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    b6d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
		uint32_t int_divisor = (pllFreq / extMCLK) & 0x1f;
    b6d6:	f002 021f 	and.w	r2, r2, #31
		uint32_t frac_divisor = (uint32_t)((((float)pllFreq / extMCLK) - int_divisor) * 2048.0f) & 0x7ff;
    b6da:	ee06 2a90 	vmov	s13, r2
    b6de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    b6e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
    b6e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    b6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    b6ee:	ee17 3a90 	vmov	r3, s15
    b6f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
		write(CHIP_PLL_CTRL, (int_divisor << 11) | frac_divisor);		
    b6f6:	ea43 22c2 	orr.w	r2, r3, r2, lsl #11
    b6fa:	f7ff ff73 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_ANA_POWER, 0x40FF | (1<<10) | (1<<8) ); // power up: lineout, hp, adc, dac, PLL_POWERUP, VCOAMP_POWERUP
    b6fe:	f244 52ff 	movw	r2, #17919	; 0x45ff
    b702:	2130      	movs	r1, #48	; 0x30
    b704:	4620      	mov	r0, r4
    b706:	f7ff ff6d 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    b70a:	2273      	movs	r2, #115	; 0x73
    b70c:	2102      	movs	r1, #2
    b70e:	4620      	mov	r0, r4
    b710:	f7ff ff68 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    b714:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b718:	f00a fbbc 	bl	15e94 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    b71c:	f641 521d 	movw	r2, #7453	; 0x1d1d
    b720:	212e      	movs	r1, #46	; 0x2e
    b722:	4620      	mov	r0, r4
    b724:	f7ff ff5e 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004 | 0x03);  // 44.1 kHz, 256*Fs, use PLL
    b728:	2207      	movs	r2, #7
    b72a:	2104      	movs	r1, #4
    b72c:	4620      	mov	r0, r4
    b72e:	f7ff ff59 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030 | (1<<7)); // SCLK=64*Fs, 16bit, I2S format
    b732:	22b0      	movs	r2, #176	; 0xb0
    b734:	2106      	movs	r1, #6
    b736:	4620      	mov	r0, r4
    b738:	f7ff ff54 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_SSS_CTRL, 0x0010); // ADC->I2S, I2S->DAC
    b73c:	2210      	movs	r2, #16
    b73e:	210a      	movs	r1, #10
    b740:	4620      	mov	r0, r4
    b742:	f7ff ff4f 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ADCDAC_CTRL, 0x0000); // disable dac mute
    b746:	2200      	movs	r2, #0
    b748:	210e      	movs	r1, #14
    b74a:	4620      	mov	r0, r4
    b74c:	f7ff ff4a 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DAC_VOL, 0x3C3C); // digital gain, 0dB
    b750:	f643 423c 	movw	r2, #15420	; 0x3c3c
    b754:	2110      	movs	r1, #16
    b756:	4620      	mov	r0, r4
    b758:	f7ff ff44 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_HP_CTRL, 0x7F7F); // set volume (lowest level)
    b75c:	f647 727f 	movw	r2, #32639	; 0x7f7f
    b760:	2122      	movs	r1, #34	; 0x22
    b762:	4620      	mov	r0, r4
    b764:	f7ff ff3e 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_ANA_CTRL, 0x0036);  // enable zero cross detectors
    b768:	2236      	movs	r2, #54	; 0x36
    b76a:	2124      	movs	r1, #36	; 0x24
    b76c:	4620      	mov	r0, r4
    b76e:	f7ff ff39 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	semi_automated = true;
    b772:	2301      	movs	r3, #1
}
    b774:	4630      	mov	r0, r6
	semi_automated = true;
    b776:	7263      	strb	r3, [r4, #9]
}
    b778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		write(CHIP_ANA_POWER, 0x40FF); // power up: lineout, hp, adc, dac
    b77c:	f244 02ff 	movw	r2, #16639	; 0x40ff
    b780:	2130      	movs	r1, #48	; 0x30
    b782:	4620      	mov	r0, r4
    b784:	f7ff ff2e 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	write(CHIP_DIG_POWER, 0x0073); // power up all digital stuff
    b788:	2273      	movs	r2, #115	; 0x73
    b78a:	2102      	movs	r1, #2
    b78c:	4620      	mov	r0, r4
    b78e:	f7ff ff29 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	delay(400);
    b792:	f44f 70c8 	mov.w	r0, #400	; 0x190
    b796:	f00a fb7d 	bl	15e94 <delay>
	write(CHIP_LINE_OUT_VOL, 0x1D1D); // default approx 1.3 volts peak-to-peak
    b79a:	f641 521d 	movw	r2, #7453	; 0x1d1d
    b79e:	212e      	movs	r1, #46	; 0x2e
    b7a0:	4620      	mov	r0, r4
    b7a2:	f7ff ff1f 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_CLK_CTRL, 0x0004);  // 44.1 kHz, 256*Fs
    b7a6:	2204      	movs	r2, #4
    b7a8:	4620      	mov	r0, r4
    b7aa:	4611      	mov	r1, r2
    b7ac:	f7ff ff1a 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		write(CHIP_I2S_CTRL, 0x0030); // SCLK=64*Fs, 16bit, I2S format
    b7b0:	2230      	movs	r2, #48	; 0x30
    b7b2:	2106      	movs	r1, #6
    b7b4:	4620      	mov	r0, r4
    b7b6:	f7ff ff15 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    b7ba:	e7bf      	b.n	b73c <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]+0xfc>
    b7bc:	01036640 	.word	0x01036640
    b7c0:	45000000 	.word	0x45000000

0000b7c4 <AudioControlSGTL5000::enable()>:
bool AudioControlSGTL5000::enable(void) {
    b7c4:	b510      	push	{r4, lr}
    b7c6:	4604      	mov	r4, r0
	Wire.begin();
    b7c8:	4808      	ldr	r0, [pc, #32]	; (b7ec <AudioControlSGTL5000::enable()+0x28>)
    b7ca:	f01c fa69 	bl	27ca0 <___ZN7TwoWire5beginEv_veneer>
	delay(5);
    b7ce:	2005      	movs	r0, #5
    b7d0:	f00a fb60 	bl	15e94 <delay>
	unsigned int n = read(CHIP_I2S_CTRL);
    b7d4:	2106      	movs	r1, #6
    b7d6:	4620      	mov	r0, r4
    b7d8:	f7ff fec2 	bl	b560 <AudioControlSGTL5000::read(unsigned int)>
	if ( (extMCLK > 0) && (n == (0x0030 | (1<<7))) ) {
    b7dc:	4620      	mov	r0, r4
    b7de:	4a04      	ldr	r2, [pc, #16]	; (b7f0 <AudioControlSGTL5000::enable()+0x2c>)
    b7e0:	2100      	movs	r1, #0
}
    b7e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b7e6:	f7ff bf2b 	b.w	b640 <AudioControlSGTL5000::enable(unsigned int, unsigned long) [clone .part.0]>
    b7ea:	bf00      	nop
    b7ec:	20004bbc 	.word	0x20004bbc
    b7f0:	0ac44000 	.word	0x0ac44000

0000b7f4 <AudioControlSGTL5000::inputSelect(int)>:
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
	bool muteLineout(void) { return write(0x0024, ana_ctrl | (1<<8)); }
	bool unmuteLineout(void) { return write(0x0024, ana_ctrl & ~(1<<8)); }
	bool inputSelect(int n) {
    b7f4:	b510      	push	{r4, lr}
    b7f6:	4604      	mov	r4, r0
		if (n == AUDIO_INPUT_LINEIN) {
    b7f8:	b1d1      	cbz	r1, b830 <AudioControlSGTL5000::inputSelect(int)+0x3c>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
		} else if (n == AUDIO_INPUT_MIC) {
    b7fa:	2901      	cmp	r1, #1
    b7fc:	d001      	beq.n	b802 <AudioControlSGTL5000::inputSelect(int)+0xe>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
		} else {
			return false;
		}
	}
    b7fe:	2000      	movs	r0, #0
    b800:	bd10      	pop	{r4, pc}
			return write(0x002A, 0x0173) // mic preamp gain = +40dB
    b802:	f240 1273 	movw	r2, #371	; 0x173
    b806:	212a      	movs	r1, #42	; 0x2a
    b808:	f7ff feec 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    b80c:	2800      	cmp	r0, #0
    b80e:	d0f6      	beq.n	b7fe <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0020, 0x088)     // input gain +12dB (is this enough?)
    b810:	2288      	movs	r2, #136	; 0x88
    b812:	2120      	movs	r1, #32
    b814:	4620      	mov	r0, r4
    b816:	f7ff fee5 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    b81a:	2800      	cmp	r0, #0
    b81c:	d0ef      	beq.n	b7fe <AudioControlSGTL5000::inputSelect(int)+0xa>
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    b81e:	88e2      	ldrh	r2, [r4, #6]
    b820:	4620      	mov	r0, r4
    b822:	2124      	movs	r1, #36	; 0x24
    b824:	f022 0204 	bic.w	r2, r2, #4
	}
    b828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl & ~(1<<2)); // enable mic
    b82c:	f7ff beda 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			return write(0x0020, 0x055) // +7.5dB gain (1.3Vp-p full scale)
    b830:	2255      	movs	r2, #85	; 0x55
    b832:	2120      	movs	r1, #32
    b834:	f7ff fed6 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    b838:	2800      	cmp	r0, #0
    b83a:	d0e0      	beq.n	b7fe <AudioControlSGTL5000::inputSelect(int)+0xa>
    b83c:	88e2      	ldrh	r2, [r4, #6]
    b83e:	4620      	mov	r0, r4
    b840:	2124      	movs	r1, #36	; 0x24
    b842:	f042 0204 	orr.w	r2, r2, #4
	}
    b846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			 && write(0x0024, ana_ctrl | (1<<2)); // enable linein
    b84a:	f7ff becb 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    b84e:	bf00      	nop

0000b850 <AudioControlSGTL5000::volumeInteger(unsigned int)>:
	if(!write(reg,val1)) return 0;
	return val1;
}

bool AudioControlSGTL5000::volumeInteger(unsigned int n)
{
    b850:	b538      	push	{r3, r4, r5, lr}
    b852:	4605      	mov	r5, r0
	if (n == 0) {
    b854:	b311      	cbz	r1, b89c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x4c>
		muted = true;
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
		return muteHeadphone();
	} else if (n > 0x80) {
    b856:	2980      	cmp	r1, #128	; 0x80
    b858:	d80c      	bhi.n	b874 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x24>
		n = 0;
	} else {
		n = 0x80 - n;
    b85a:	f1c1 0480 	rsb	r4, r1, #128	; 0x80
	}
	if (muted) {
    b85e:	792b      	ldrb	r3, [r5, #4]
		muted = false;
		unmuteHeadphone();
	}
	n = n | (n << 8);
    b860:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    b864:	b953      	cbnz	r3, b87c <AudioControlSGTL5000::volumeInteger(unsigned int)+0x2c>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b866:	4622      	mov	r2, r4
    b868:	4628      	mov	r0, r5
    b86a:	2122      	movs	r1, #34	; 0x22
}
    b86c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b870:	f7ff beb8 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    b874:	792b      	ldrb	r3, [r5, #4]
    b876:	2400      	movs	r4, #0
    b878:	2b00      	cmp	r3, #0
    b87a:	d0f4      	beq.n	b866 <AudioControlSGTL5000::volumeInteger(unsigned int)+0x16>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    b87c:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    b87e:	2300      	movs	r3, #0
    b880:	2124      	movs	r1, #36	; 0x24
    b882:	4628      	mov	r0, r5
    b884:	f022 0210 	bic.w	r2, r2, #16
    b888:	712b      	strb	r3, [r5, #4]
    b88a:	f7ff feab 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b88e:	4622      	mov	r2, r4
    b890:	4628      	mov	r0, r5
    b892:	2122      	movs	r1, #34	; 0x22
}
    b894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b898:	f7ff bea4 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    b89c:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b89e:	f647 727f 	movw	r2, #32639	; 0x7f7f
    b8a2:	2122      	movs	r1, #34	; 0x22
		muted = true;
    b8a4:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b8a6:	f7ff fe9d 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    b8aa:	88ea      	ldrh	r2, [r5, #6]
    b8ac:	4628      	mov	r0, r5
    b8ae:	2124      	movs	r1, #36	; 0x24
    b8b0:	f042 0210 	orr.w	r2, r2, #16
}
    b8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b8b8:	f7ff be94 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>

0000b8bc <AudioControlSGTL5000::volume(float)>:
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    b8bc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; b93c <AudioControlSGTL5000::volume(float)+0x80>
    b8c0:	eddf 7a1f 	vldr	s15, [pc, #124]	; b940 <AudioControlSGTL5000::volume(float)+0x84>
    b8c4:	eee0 7a07 	vfma.f32	s15, s0, s14
    b8c8:	b538      	push	{r3, r4, r5, lr}
    b8ca:	4605      	mov	r5, r0
    b8cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    b8d0:	ee17 4a90 	vmov	r4, s15
	if (n == 0) {
    b8d4:	b314      	cbz	r4, b91c <AudioControlSGTL5000::volume(float)+0x60>
	} else if (n > 0x80) {
    b8d6:	2c80      	cmp	r4, #128	; 0x80
    b8d8:	d80c      	bhi.n	b8f4 <AudioControlSGTL5000::volume(float)+0x38>
		n = 0x80 - n;
    b8da:	f1c4 0480 	rsb	r4, r4, #128	; 0x80
	if (muted) {
    b8de:	792b      	ldrb	r3, [r5, #4]
	n = n | (n << 8);
    b8e0:	ea44 2404 	orr.w	r4, r4, r4, lsl #8
	if (muted) {
    b8e4:	b953      	cbnz	r3, b8fc <AudioControlSGTL5000::volume(float)+0x40>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b8e6:	4622      	mov	r2, r4
    b8e8:	4628      	mov	r0, r5
    b8ea:	2122      	movs	r1, #34	; 0x22
    b8ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b8f0:	f7ff be78 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	if (muted) {
    b8f4:	792b      	ldrb	r3, [r5, #4]
    b8f6:	2400      	movs	r4, #0
    b8f8:	2b00      	cmp	r3, #0
    b8fa:	d0f4      	beq.n	b8e6 <AudioControlSGTL5000::volume(float)+0x2a>
	bool unmuteHeadphone(void) { return write(0x0024, ana_ctrl & ~(1<<4)); }
    b8fc:	88ea      	ldrh	r2, [r5, #6]
		muted = false;
    b8fe:	2300      	movs	r3, #0
    b900:	2124      	movs	r1, #36	; 0x24
    b902:	4628      	mov	r0, r5
    b904:	f022 0210 	bic.w	r2, r2, #16
    b908:	712b      	strb	r3, [r5, #4]
    b90a:	f7ff fe6b 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	return write(CHIP_ANA_HP_CTRL, n);  // set volume
    b90e:	4622      	mov	r2, r4
    b910:	4628      	mov	r0, r5
    b912:	2122      	movs	r1, #34	; 0x22
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    b914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b918:	f7ff be64 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
		muted = true;
    b91c:	2301      	movs	r3, #1
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b91e:	f647 727f 	movw	r2, #32639	; 0x7f7f
    b922:	2122      	movs	r1, #34	; 0x22
		muted = true;
    b924:	7103      	strb	r3, [r0, #4]
		write(CHIP_ANA_HP_CTRL, 0x7F7F);
    b926:	f7ff fe5d 	bl	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    b92a:	88ea      	ldrh	r2, [r5, #6]
    b92c:	4628      	mov	r0, r5
    b92e:	2124      	movs	r1, #36	; 0x24
    b930:	f042 0210 	orr.w	r2, r2, #16
	bool volume(float n) { return volumeInteger(n * 129 + 0.499f); }
    b934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bool muteHeadphone(void) { return write(0x0024, ana_ctrl | (1<<4)); }
    b938:	f7ff be54 	b.w	b5e4 <AudioControlSGTL5000::write(unsigned int, unsigned int)>
    b93c:	43010000 	.word	0x43010000
    b940:	3eff7cee 	.word	0x3eff7cee

0000b944 <SPIClass::beginTransaction(SPISettings)>:
	void beginTransaction(SPISettings settings) {
    b944:	b430      	push	{r4, r5}
    b946:	b082      	sub	sp, #8
    b948:	460c      	mov	r4, r1
    b94a:	ab02      	add	r3, sp, #8
    b94c:	e903 0006 	stmdb	r3, {r1, r2}
		if (interruptMasksUsed) {
    b950:	7cc3      	ldrb	r3, [r0, #19]
    b952:	2b00      	cmp	r3, #0
    b954:	d030      	beq.n	b9b8 <SPIClass::beginTransaction(SPISettings)+0x74>
			__disable_irq();
    b956:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    b958:	7cc3      	ldrb	r3, [r0, #19]
    b95a:	07da      	lsls	r2, r3, #31
    b95c:	d508      	bpl.n	b970 <SPIClass::beginTransaction(SPISettings)+0x2c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    b95e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b962:	6945      	ldr	r5, [r0, #20]
    b964:	f8d1 2180 	ldr.w	r2, [r1, #384]	; 0x180
    b968:	402a      	ands	r2, r5
    b96a:	6282      	str	r2, [r0, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    b96c:	f8c1 2180 	str.w	r2, [r1, #384]	; 0x180
			if (interruptMasksUsed & 0x02) {
    b970:	079d      	lsls	r5, r3, #30
    b972:	d508      	bpl.n	b986 <SPIClass::beginTransaction(SPISettings)+0x42>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    b974:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b978:	6985      	ldr	r5, [r0, #24]
    b97a:	f8d1 2184 	ldr.w	r2, [r1, #388]	; 0x184
    b97e:	402a      	ands	r2, r5
    b980:	62c2      	str	r2, [r0, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    b982:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			if (interruptMasksUsed & 0x04) {
    b986:	0759      	lsls	r1, r3, #29
    b988:	d508      	bpl.n	b99c <SPIClass::beginTransaction(SPISettings)+0x58>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    b98a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b98e:	69c5      	ldr	r5, [r0, #28]
    b990:	f8d1 2188 	ldr.w	r2, [r1, #392]	; 0x188
    b994:	402a      	ands	r2, r5
    b996:	6302      	str	r2, [r0, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    b998:	f8c1 2188 	str.w	r2, [r1, #392]	; 0x188
			if (interruptMasksUsed & 0x08) {
    b99c:	071a      	lsls	r2, r3, #28
    b99e:	d508      	bpl.n	b9b2 <SPIClass::beginTransaction(SPISettings)+0x6e>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    b9a0:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    b9a4:	6a05      	ldr	r5, [r0, #32]
    b9a6:	f8d1 218c 	ldr.w	r2, [r1, #396]	; 0x18c
    b9aa:	402a      	ands	r2, r5
    b9ac:	6342      	str	r2, [r0, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    b9ae:	f8c1 218c 	str.w	r2, [r1, #396]	; 0x18c
			if (interruptMasksUsed & 0x10) {
    b9b2:	06db      	lsls	r3, r3, #27
    b9b4:	d42f      	bmi.n	ba16 <SPIClass::beginTransaction(SPISettings)+0xd2>
			__enable_irq();
    b9b6:	b662      	cpsie	i
		if (settings.clock() != _clock) {
    b9b8:	6883      	ldr	r3, [r0, #8]
    b9ba:	429c      	cmp	r4, r3
    b9bc:	d035      	beq.n	ba2a <SPIClass::beginTransaction(SPISettings)+0xe6>
			uint32_t cbcmr = CCM_CBCMR;
    b9be:	4b22      	ldr	r3, [pc, #136]	; (ba48 <SPIClass::beginTransaction(SPISettings)+0x104>)
		    _clock = settings.clock();
    b9c0:	6084      	str	r4, [r0, #8]
			uint32_t cbcmr = CCM_CBCMR;
    b9c2:	699b      	ldr	r3, [r3, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    b9c4:	4a21      	ldr	r2, [pc, #132]	; (ba4c <SPIClass::beginTransaction(SPISettings)+0x108>)
    b9c6:	f3c3 1101 	ubfx	r1, r3, #4, #2
    b9ca:	f3c3 6382 	ubfx	r3, r3, #26, #3
    b9ce:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    b9d2:	3301      	adds	r3, #1
    b9d4:	fbb1 f2f3 	udiv	r2, r1, r3
			d = _clock ? clkhz/_clock : clkhz;
    b9d8:	b1cc      	cbz	r4, ba0e <SPIClass::beginTransaction(SPISettings)+0xca>
			if (d && clkhz/d > _clock) d++;
    b9da:	4294      	cmp	r4, r2
    b9dc:	d827      	bhi.n	ba2e <SPIClass::beginTransaction(SPISettings)+0xea>
			d = _clock ? clkhz/_clock : clkhz;
    b9de:	fbb2 f3f4 	udiv	r3, r2, r4
			if (d && clkhz/d > _clock) d++;
    b9e2:	fbb2 f2f3 	udiv	r2, r2, r3
    b9e6:	4294      	cmp	r4, r2
    b9e8:	d32c      	bcc.n	ba44 <SPIClass::beginTransaction(SPISettings)+0x100>
			if (d > 257) d= 257;  // max div
    b9ea:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b9ee:	d320      	bcc.n	ba32 <SPIClass::beginTransaction(SPISettings)+0xee>
    b9f0:	4c17      	ldr	r4, [pc, #92]	; (ba50 <SPIClass::beginTransaction(SPISettings)+0x10c>)
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    b9f2:	60c4      	str	r4, [r0, #12]
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    b9f4:	6803      	ldr	r3, [r0, #0]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b9f6:	2203      	movs	r2, #3
		port().CR = 0;
    b9f8:	2000      	movs	r0, #0
		port().TCR = settings.tcr;
    b9fa:	9901      	ldr	r1, [sp, #4]
		port().CR = 0;
    b9fc:	6118      	str	r0, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    b9fe:	625a      	str	r2, [r3, #36]	; 0x24
		port().CR = LPSPI_CR_MEN;
    ba00:	2201      	movs	r2, #1
		port().CCR = _ccr;
    ba02:	641c      	str	r4, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    ba04:	6619      	str	r1, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    ba06:	611a      	str	r2, [r3, #16]
	}
    ba08:	b002      	add	sp, #8
    ba0a:	bc30      	pop	{r4, r5}
    ba0c:	4770      	bx	lr
			if (d && clkhz/d > _clock) d++;
    ba0e:	4299      	cmp	r1, r3
    ba10:	d3ef      	bcc.n	b9f2 <SPIClass::beginTransaction(SPISettings)+0xae>
    ba12:	1c53      	adds	r3, r2, #1
    ba14:	e7e9      	b.n	b9ea <SPIClass::beginTransaction(SPISettings)+0xa6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    ba16:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    ba1a:	6a41      	ldr	r1, [r0, #36]	; 0x24
    ba1c:	f8d2 3190 	ldr.w	r3, [r2, #400]	; 0x190
    ba20:	400b      	ands	r3, r1
    ba22:	6383      	str	r3, [r0, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    ba24:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    ba28:	e7c5      	b.n	b9b6 <SPIClass::beginTransaction(SPISettings)+0x72>
		port().CCR = _ccr;
    ba2a:	68c4      	ldr	r4, [r0, #12]
    ba2c:	e7e2      	b.n	b9f4 <SPIClass::beginTransaction(SPISettings)+0xb0>
    ba2e:	2400      	movs	r4, #0
    ba30:	e7df      	b.n	b9f2 <SPIClass::beginTransaction(SPISettings)+0xae>
			if (d > 2) {
    ba32:	2b02      	cmp	r3, #2
    ba34:	d9fb      	bls.n	ba2e <SPIClass::beginTransaction(SPISettings)+0xea>
				div = d-2;
    ba36:	3b02      	subs	r3, #2
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    ba38:	085a      	lsrs	r2, r3, #1
    ba3a:	0214      	lsls	r4, r2, #8
    ba3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    ba40:	431c      	orrs	r4, r3
    ba42:	e7d6      	b.n	b9f2 <SPIClass::beginTransaction(SPISettings)+0xae>
			d = _clock ? clkhz/_clock : clkhz;
    ba44:	461a      	mov	r2, r3
    ba46:	e7e4      	b.n	ba12 <SPIClass::beginTransaction(SPISettings)+0xce>
    ba48:	400fc000 	.word	0x400fc000
    ba4c:	2000173c 	.word	0x2000173c
    ba50:	007f7fff 	.word	0x007f7fff

0000ba54 <AudioEffectEnvelope::update()>:
	}
	__enable_irq();
}

void AudioEffectEnvelope::update(void)
{
    ba54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	audio_block_t *block;
	uint32_t *p, *end;
	uint32_t sample12, sample34, sample56, sample78, tmp1, tmp2;

	block = receiveWritable();
    ba58:	2100      	movs	r1, #0
{
    ba5a:	b083      	sub	sp, #12
    ba5c:	4681      	mov	r9, r0
	block = receiveWritable();
    ba5e:	f009 fa93 	bl	14f88 <AudioStream::receiveWritable(unsigned int)>
	if (!block) return;
    ba62:	2800      	cmp	r0, #0
    ba64:	f000 8111 	beq.w	bc8a <AudioEffectEnvelope::update()+0x236>
	if (state == STATE_IDLE) {
    ba68:	f899 301c 	ldrb.w	r3, [r9, #28]
    ba6c:	b3b3      	cbz	r3, badc <AudioEffectEnvelope::update()+0x88>
		AudioStream::release(block);
		return;
	}
	p = (uint32_t *)(block->data);
	end = p + AUDIO_BLOCK_SAMPLES/2;
    ba6e:	f500 7a82 	add.w	sl, r0, #260	; 0x104
	p = (uint32_t *)(block->data);
    ba72:	1d03      	adds	r3, r0, #4
					count = decay_count;
					inc_hires = (sustain_mult - 0x40000000) / (int32_t)count;
				}
				continue;
			} else if (state == STATE_HOLD) {
				state = STATE_DECAY;
    ba74:	9001      	str	r0, [sp, #4]
    ba76:	46d6      	mov	lr, sl
		if (count == 0) {
    ba78:	f8b9 201e 	ldrh.w	r2, [r9, #30]
    ba7c:	bb9a      	cbnz	r2, bae6 <AudioEffectEnvelope::update()+0x92>
			if (state == STATE_ATTACK) {
    ba7e:	f899 101c 	ldrb.w	r1, [r9, #28]
    ba82:	2902      	cmp	r1, #2
    ba84:	d009      	beq.n	ba9a <AudioEffectEnvelope::update()+0x46>
			} else if (state == STATE_HOLD) {
    ba86:	3901      	subs	r1, #1
    ba88:	2906      	cmp	r1, #6
    ba8a:	f200 80d9 	bhi.w	bc40 <AudioEffectEnvelope::update()+0x1ec>
    ba8e:	e8df f001 	tbb	[pc, r1]
    ba92:	d7be      	.short	0xd7be
    ba94:	869ea80b 	.word	0x869ea80b
    ba98:	6b          	.byte	0x6b
    ba99:	00          	.byte	0x00
				count = hold_count;
    ba9a:	f8b9 102c 	ldrh.w	r1, [r9, #44]	; 0x2c
    ba9e:	f8a9 101e 	strh.w	r1, [r9, #30]
				if (count > 0) {
    baa2:	2900      	cmp	r1, #0
    baa4:	f040 80c2 	bne.w	bc2c <AudioEffectEnvelope::update()+0x1d8>
				state = STATE_DECAY;
    baa8:	f04f 0204 	mov.w	r2, #4
				count = decay_count;
    baac:	f8b9 102e 	ldrh.w	r1, [r9, #46]	; 0x2e
				state = STATE_DECAY;
    bab0:	f889 201c 	strb.w	r2, [r9, #28]
				inc_hires = (sustain_mult - 0x40000000) / (int32_t)count;
    bab4:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
				count = decay_count;
    bab8:	f8a9 101e 	strh.w	r1, [r9, #30]
				inc_hires = (sustain_mult - 0x40000000) / (int32_t)count;
    babc:	f102 4240 	add.w	r2, r2, #3221225472	; 0xc0000000
    bac0:	fb92 f2f1 	sdiv	r2, r2, r1
    bac4:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
	while (p < end) {
    bac8:	4573      	cmp	r3, lr
    baca:	d3d5      	bcc.n	ba78 <AudioEffectEnvelope::update()+0x24>
    bacc:	f8dd 8004 	ldr.w	r8, [sp, #4]
		// adjust the long-term gain using 30 bit resolution (fix #102)
		// https://github.com/PaulStoffregen/Audio/issues/102
		mult_hires += inc_hires;
		count--;
	}
	transmit(block);
    bad0:	4648      	mov	r0, r9
    bad2:	2200      	movs	r2, #0
    bad4:	4641      	mov	r1, r8
    bad6:	f009 fa27 	bl	14f28 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	AudioStream::release(block);
    bada:	4640      	mov	r0, r8
}
    badc:	b003      	add	sp, #12
    bade:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	AudioStream::release(block);
    bae2:	f009 b9f9 	b.w	14ed8 <AudioStream::release(audio_block_struct*)>
		count--;
    bae6:	3a01      	subs	r2, #1
		int32_t mult = mult_hires >> 14;
    bae8:	f8d9 1020 	ldr.w	r1, [r9, #32]
		count--;
    baec:	fa1f f882 	uxth.w	r8, r2
		int32_t inc = inc_hires >> 17;
    baf0:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
		int32_t mult = mult_hires >> 14;
    baf4:	1389      	asrs	r1, r1, #14
		mult += inc;
    baf6:	eb01 4162 	add.w	r1, r1, r2, asr #17
		mult += inc;
    bafa:	eb01 4662 	add.w	r6, r1, r2, asr #17
		mult += inc;
    bafe:	eb06 4c62 	add.w	ip, r6, r2, asr #17
		mult += inc;
    bb02:	eb0c 4562 	add.w	r5, ip, r2, asr #17
		mult += inc;
    bb06:	eb05 4062 	add.w	r0, r5, r2, asr #17
		mult += inc;
    bb0a:	eb00 4762 	add.w	r7, r0, r2, asr #17
		mult += inc;
    bb0e:	eb07 4462 	add.w	r4, r7, r2, asr #17
		mult += inc;
    bb12:	eb04 4262 	add.w	r2, r4, r2, asr #17
		sample34 = *p++;
    bb16:	e9d3 ba00 	ldrd	fp, sl, [r3]
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16b(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb1a:	fb31 f10b 	smulwb	r1, r1, fp
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline int32_t signed_multiply_32x16t(int32_t a, uint32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb1e:	fb36 f61b 	smulwt	r6, r6, fp
static inline uint32_t pack_16b_16b(int32_t a, int32_t b) __attribute__((always_inline, unused));
static inline uint32_t pack_16b_16b(int32_t a, int32_t b)
{
#if defined (__ARM_ARCH_7EM__)
	int32_t out;
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    bb22:	eac1 4606 	pkhbt	r6, r1, r6, lsl #16
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb26:	fb3c fc0a 	smulwb	ip, ip, sl
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb2a:	fb35 f51a 	smulwt	r5, r5, sl
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    bb2e:	eacc 4505 	pkhbt	r5, ip, r5, lsl #16
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb32:	6899      	ldr	r1, [r3, #8]
    bb34:	fb30 f001 	smulwb	r0, r0, r1
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb38:	fb37 f711 	smulwt	r7, r7, r1
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    bb3c:	eac0 4007 	pkhbt	r0, r0, r7, lsl #16
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb40:	68d9      	ldr	r1, [r3, #12]
    bb42:	fb34 f401 	smulwb	r4, r4, r1
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bb46:	fb32 f211 	smulwt	r2, r2, r1
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    bb4a:	eac4 4402 	pkhbt	r4, r4, r2, lsl #16
		*p++ = sample34;
    bb4e:	e9c3 6500 	strd	r6, r5, [r3]
		*p++ = sample78;
    bb52:	e9c3 0402 	strd	r0, r4, [r3, #8]
		mult_hires += inc_hires;
    bb56:	e9d9 2108 	ldrd	r2, r1, [r9, #32]
		*p++ = sample78;
    bb5a:	3310      	adds	r3, #16
		count--;
    bb5c:	f8a9 801e 	strh.w	r8, [r9, #30]
		mult_hires += inc_hires;
    bb60:	440a      	add	r2, r1
    bb62:	f8c9 2020 	str.w	r2, [r9, #32]
		count--;
    bb66:	e7af      	b.n	bac8 <AudioEffectEnvelope::update()+0x74>
				mult_hires = 0;
    bb68:	2200      	movs	r2, #0
    bb6a:	f8c9 2020 	str.w	r2, [r9, #32]
				count = delay_count;
    bb6e:	f8b9 2028 	ldrh.w	r2, [r9, #40]	; 0x28
    bb72:	f8a9 201e 	strh.w	r2, [r9, #30]
				if (count > 0) {
    bb76:	2a00      	cmp	r2, #0
    bb78:	d06c      	beq.n	bc54 <AudioEffectEnvelope::update()+0x200>
					state = STATE_DELAY;
    bb7a:	f04f 0101 	mov.w	r1, #1
		count--;
    bb7e:	3a01      	subs	r2, #1
					state = STATE_DELAY;
    bb80:	f889 101c 	strb.w	r1, [r9, #28]
					inc_hires = 0;
    bb84:	2100      	movs	r1, #0
		count--;
    bb86:	fa1f f882 	uxth.w	r8, r2
    bb8a:	460c      	mov	r4, r1
    bb8c:	460a      	mov	r2, r1
    bb8e:	460f      	mov	r7, r1
    bb90:	4608      	mov	r0, r1
    bb92:	460d      	mov	r5, r1
    bb94:	468c      	mov	ip, r1
    bb96:	460e      	mov	r6, r1
					inc_hires = 0;
    bb98:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
    bb9c:	e7bb      	b.n	bb16 <AudioEffectEnvelope::update()+0xc2>
				state = STATE_IDLE;
    bb9e:	2100      	movs	r1, #0
				while (p < end) {
    bba0:	459e      	cmp	lr, r3
				state = STATE_IDLE;
    bba2:	f8dd 8004 	ldr.w	r8, [sp, #4]
    bba6:	f889 101c 	strb.w	r1, [r9, #28]
				while (p < end) {
    bbaa:	d991      	bls.n	bad0 <AudioEffectEnvelope::update()+0x7c>
    bbac:	f208 1003 	addw	r0, r8, #259	; 0x103
    bbb0:	f103 0210 	add.w	r2, r3, #16
    bbb4:	1ac0      	subs	r0, r0, r3
    bbb6:	3320      	adds	r3, #32
    bbb8:	f020 000f 	bic.w	r0, r0, #15
    bbbc:	4403      	add	r3, r0
					*p++ = 0;
    bbbe:	e942 1104 	strd	r1, r1, [r2, #-16]
					*p++ = 0;
    bbc2:	e942 1102 	strd	r1, r1, [r2, #-8]
				while (p < end) {
    bbc6:	3210      	adds	r2, #16
    bbc8:	4293      	cmp	r3, r2
    bbca:	d1f8      	bne.n	bbbe <AudioEffectEnvelope::update()+0x16a>
    bbcc:	e780      	b.n	bad0 <AudioEffectEnvelope::update()+0x7c>
		int32_t mult = mult_hires >> 14;
    bbce:	f8d9 1020 	ldr.w	r1, [r9, #32]
    bbd2:	f64f 78fe 	movw	r8, #65534	; 0xfffe
		int32_t inc = inc_hires >> 17;
    bbd6:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
		int32_t mult = mult_hires >> 14;
    bbda:	1389      	asrs	r1, r1, #14
		mult += inc;
    bbdc:	eb01 4162 	add.w	r1, r1, r2, asr #17
    bbe0:	e78b      	b.n	bafa <AudioEffectEnvelope::update()+0xa6>
				state = STATE_SUSTAIN;
    bbe2:	f04f 0205 	mov.w	r2, #5
				mult_hires = sustain_mult;
    bbe6:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
    bbea:	f64f 78fe 	movw	r8, #65534	; 0xfffe
				state = STATE_SUSTAIN;
    bbee:	f889 201c 	strb.w	r2, [r9, #28]
				inc_hires = 0;
    bbf2:	2200      	movs	r2, #0
				mult_hires = sustain_mult;
    bbf4:	f8c9 1020 	str.w	r1, [r9, #32]
		int32_t mult = mult_hires >> 14;
    bbf8:	1389      	asrs	r1, r1, #14
				inc_hires = 0;
    bbfa:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
    bbfe:	460c      	mov	r4, r1
    bc00:	460a      	mov	r2, r1
    bc02:	460f      	mov	r7, r1
    bc04:	4608      	mov	r0, r1
    bc06:	460d      	mov	r5, r1
    bc08:	468c      	mov	ip, r1
    bc0a:	460e      	mov	r6, r1
    bc0c:	e783      	b.n	bb16 <AudioEffectEnvelope::update()+0xc2>
				state = STATE_ATTACK;
    bc0e:	f04f 0202 	mov.w	r2, #2
				inc_hires = 0x40000000 / count;
    bc12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
				state = STATE_ATTACK;
    bc16:	f889 201c 	strb.w	r2, [r9, #28]
				count = attack_count;
    bc1a:	f8b9 202a 	ldrh.w	r2, [r9, #42]	; 0x2a
    bc1e:	f8a9 201e 	strh.w	r2, [r9, #30]
				inc_hires = 0x40000000 / count;
    bc22:	fbb1 f2f2 	udiv	r2, r1, r2
    bc26:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
				continue;
    bc2a:	e74d      	b.n	bac8 <AudioEffectEnvelope::update()+0x74>
					inc_hires = 0;
    bc2c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
					mult_hires = 0x40000000;
    bc30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    bc34:	f8c9 2020 	str.w	r2, [r9, #32]
					state = STATE_HOLD;
    bc38:	2203      	movs	r2, #3
    bc3a:	f889 201c 	strb.w	r2, [r9, #28]
					inc_hires = 0;
    bc3e:	e743      	b.n	bac8 <AudioEffectEnvelope::update()+0x74>
		int32_t mult = mult_hires >> 14;
    bc40:	f8d9 1020 	ldr.w	r1, [r9, #32]
		mult += inc;
    bc44:	f64f 78ff 	movw	r8, #65535	; 0xffff
		int32_t inc = inc_hires >> 17;
    bc48:	f8d9 2024 	ldr.w	r2, [r9, #36]	; 0x24
		int32_t mult = mult_hires >> 14;
    bc4c:	1389      	asrs	r1, r1, #14
		mult += inc;
    bc4e:	eb01 4162 	add.w	r1, r1, r2, asr #17
    bc52:	e752      	b.n	bafa <AudioEffectEnvelope::update()+0xa6>
					state = STATE_ATTACK;
    bc54:	f04f 0202 	mov.w	r2, #2
					inc_hires = 0x40000000 / (int32_t)count;
    bc58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
					state = STATE_ATTACK;
    bc5c:	f889 201c 	strb.w	r2, [r9, #28]
					count = attack_count;
    bc60:	f8b9 202a 	ldrh.w	r2, [r9, #42]	; 0x2a
					inc_hires = 0x40000000 / (int32_t)count;
    bc64:	fbb1 f1f2 	udiv	r1, r1, r2
    bc68:	f8c9 1024 	str.w	r1, [r9, #36]	; 0x24
		int32_t inc = inc_hires >> 17;
    bc6c:	1449      	asrs	r1, r1, #17
		count--;
    bc6e:	3a01      	subs	r2, #1
		mult += inc;
    bc70:	eb01 0081 	add.w	r0, r1, r1, lsl #2
		count--;
    bc74:	fa1f f882 	uxth.w	r8, r2
		mult += inc;
    bc78:	eb00 0441 	add.w	r4, r0, r1, lsl #1
		mult += inc;
    bc7c:	180f      	adds	r7, r1, r0
    bc7e:	004e      	lsls	r6, r1, #1
		mult += inc;
    bc80:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
		mult += inc;
    bc84:	190a      	adds	r2, r1, r4
		mult += inc;
    bc86:	008d      	lsls	r5, r1, #2
    bc88:	e745      	b.n	bb16 <AudioEffectEnvelope::update()+0xc2>
}
    bc8a:	b003      	add	sp, #12
    bc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bc90 <AudioEffectEnvelope::noteOn()>:
	__disable_irq();
    bc90:	b672      	cpsid	i
	if (state == STATE_IDLE || state == STATE_DELAY || release_forced_count == 0) {
    bc92:	7f03      	ldrb	r3, [r0, #28]
    bc94:	2b01      	cmp	r3, #1
    bc96:	d901      	bls.n	bc9c <AudioEffectEnvelope::noteOn()+0xc>
    bc98:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    bc9a:	b9a2      	cbnz	r2, bcc6 <AudioEffectEnvelope::noteOn()+0x36>
		mult_hires = 0;
    bc9c:	2200      	movs	r2, #0
		count = delay_count;
    bc9e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
		mult_hires = 0;
    bca0:	6202      	str	r2, [r0, #32]
		count = delay_count;
    bca2:	83c3      	strh	r3, [r0, #30]
		if (count > 0) {
    bca4:	b953      	cbnz	r3, bcbc <AudioEffectEnvelope::noteOn()+0x2c>
			count = attack_count;
    bca6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
			inc_hires = 0x40000000 / (int32_t)count;
    bca8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
			state = STATE_ATTACK;
    bcac:	2102      	movs	r1, #2
			count = attack_count;
    bcae:	83c2      	strh	r2, [r0, #30]
			state = STATE_ATTACK;
    bcb0:	7701      	strb	r1, [r0, #28]
			inc_hires = 0x40000000 / (int32_t)count;
    bcb2:	fbb3 f3f2 	udiv	r3, r3, r2
    bcb6:	6243      	str	r3, [r0, #36]	; 0x24
	__enable_irq();
    bcb8:	b662      	cpsie	i
}
    bcba:	4770      	bx	lr
			state = STATE_DELAY;
    bcbc:	2301      	movs	r3, #1
			inc_hires = 0;
    bcbe:	6242      	str	r2, [r0, #36]	; 0x24
			state = STATE_DELAY;
    bcc0:	7703      	strb	r3, [r0, #28]
	__enable_irq();
    bcc2:	b662      	cpsie	i
}
    bcc4:	4770      	bx	lr
	} else if (state != STATE_FORCED) {
    bcc6:	2b07      	cmp	r3, #7
    bcc8:	d0f6      	beq.n	bcb8 <AudioEffectEnvelope::noteOn()+0x28>
		inc_hires = (-mult_hires) / (int32_t)count;
    bcca:	6a03      	ldr	r3, [r0, #32]
		state = STATE_FORCED;
    bccc:	2107      	movs	r1, #7
		count = release_forced_count;
    bcce:	83c2      	strh	r2, [r0, #30]
		inc_hires = (-mult_hires) / (int32_t)count;
    bcd0:	425b      	negs	r3, r3
		state = STATE_FORCED;
    bcd2:	7701      	strb	r1, [r0, #28]
		inc_hires = (-mult_hires) / (int32_t)count;
    bcd4:	fb93 f3f2 	sdiv	r3, r3, r2
    bcd8:	6243      	str	r3, [r0, #36]	; 0x24
	__enable_irq();
    bcda:	b662      	cpsie	i
}
    bcdc:	4770      	bx	lr
    bcde:	bf00      	nop

0000bce0 <AudioEffectEnvelope::noteOff()>:
	__disable_irq();
    bce0:	b672      	cpsid	i
	if (state != STATE_IDLE && state != STATE_FORCED) {
    bce2:	7f03      	ldrb	r3, [r0, #28]
    bce4:	b153      	cbz	r3, bcfc <AudioEffectEnvelope::noteOff()+0x1c>
    bce6:	2b07      	cmp	r3, #7
    bce8:	d008      	beq.n	bcfc <AudioEffectEnvelope::noteOff()+0x1c>
		inc_hires = (-mult_hires) / (int32_t)count;
    bcea:	6a03      	ldr	r3, [r0, #32]
		state = STATE_RELEASE;
    bcec:	2106      	movs	r1, #6
		count = release_count;
    bcee:	8e82      	ldrh	r2, [r0, #52]	; 0x34
		inc_hires = (-mult_hires) / (int32_t)count;
    bcf0:	425b      	negs	r3, r3
		state = STATE_RELEASE;
    bcf2:	7701      	strb	r1, [r0, #28]
		count = release_count;
    bcf4:	83c2      	strh	r2, [r0, #30]
		inc_hires = (-mult_hires) / (int32_t)count;
    bcf6:	fb93 f3f2 	sdiv	r3, r3, r2
    bcfa:	6243      	str	r3, [r0, #36]	; 0x24
	__enable_irq();
    bcfc:	b662      	cpsie	i
}
    bcfe:	4770      	bx	lr

0000bd00 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE>:
#include <Arduino.h>
#include "input_adc.h"

extern "C" void xbar_connect(unsigned int input, unsigned int output);

DMAChannel AudioInputAnalog::dma(false);
    bd00:	4a02      	ldr	r2, [pc, #8]	; (bd0c <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0xc>)
    bd02:	4903      	ldr	r1, [pc, #12]	; (bd10 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x10>)
    bd04:	4803      	ldr	r0, [pc, #12]	; (bd14 <_GLOBAL__sub_I__ZN16AudioInputAnalog3dmaE+0x14>)
    bd06:	f00c bf27 	b.w	18b58 <__aeabi_atexit>
    bd0a:	bf00      	nop
    bd0c:	20003338 	.word	0x20003338
    bd10:	0000b535 	.word	0x0000b535
    bd14:	20005174 	.word	0x20005174

0000bd18 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S::block_left = NULL;
audio_block_t * AudioInputI2S::block_right = NULL;
uint16_t AudioInputI2S::block_offset = 0;
bool AudioInputI2S::update_responsibility = false;
DMAChannel AudioInputI2S::dma(false);
    bd18:	4a02      	ldr	r2, [pc, #8]	; (bd24 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0xc>)
    bd1a:	4903      	ldr	r1, [pc, #12]	; (bd28 <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x10>)
    bd1c:	4803      	ldr	r0, [pc, #12]	; (bd2c <_GLOBAL__sub_I__ZN13AudioInputI2S10block_leftE+0x14>)
    bd1e:	f00c bf1b 	b.w	18b58 <__aeabi_atexit>
    bd22:	bf00      	nop
    bd24:	20003338 	.word	0x20003338
    bd28:	0000b535 	.word	0x0000b535
    bd2c:	200050c4 	.word	0x200050c4

0000bd30 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE>:
DMAMEM __attribute__((aligned(32))) static uint32_t i2s2_rx_buffer[AUDIO_BLOCK_SAMPLES];
audio_block_t * AudioInputI2S2::block_left = NULL;
audio_block_t * AudioInputI2S2::block_right = NULL;
uint16_t AudioInputI2S2::block_offset = 0;
bool AudioInputI2S2::update_responsibility = false;
DMAChannel AudioInputI2S2::dma(false);
    bd30:	4a02      	ldr	r2, [pc, #8]	; (bd3c <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0xc>)
    bd32:	4903      	ldr	r1, [pc, #12]	; (bd40 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x10>)
    bd34:	4803      	ldr	r0, [pc, #12]	; (bd44 <_GLOBAL__sub_I__ZN14AudioInputI2S210block_leftE+0x14>)
    bd36:	f00c bf0f 	b.w	18b58 <__aeabi_atexit>
    bd3a:	bf00      	nop
    bd3c:	20003338 	.word	0x20003338
    bd40:	0000b535 	.word	0x0000b535
    bd44:	200050dc 	.word	0x200050dc

0000bd48 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E>:
DMAChannel AudioInputI2SHex::dma(false);
    bd48:	4a02      	ldr	r2, [pc, #8]	; (bd54 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0xc>)
    bd4a:	4903      	ldr	r1, [pc, #12]	; (bd58 <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x10>)
    bd4c:	4803      	ldr	r0, [pc, #12]	; (bd5c <_GLOBAL__sub_I__ZN16AudioInputI2SHex9block_ch1E+0x14>)
    bd4e:	f00c bf03 	b.w	18b58 <__aeabi_atexit>
    bd52:	bf00      	nop
    bd54:	20003338 	.word	0x20003338
    bd58:	0000b535 	.word	0x0000b535
    bd5c:	2000517c 	.word	0x2000517c

0000bd60 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E>:
audio_block_t * AudioInputI2SOct::block_ch6 = NULL;
audio_block_t * AudioInputI2SOct::block_ch7 = NULL;
audio_block_t * AudioInputI2SOct::block_ch8 = NULL;
uint16_t AudioInputI2SOct::block_offset = 0;
bool AudioInputI2SOct::update_responsibility = false;
DMAChannel AudioInputI2SOct::dma(false);
    bd60:	4a02      	ldr	r2, [pc, #8]	; (bd6c <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0xc>)
    bd62:	4903      	ldr	r1, [pc, #12]	; (bd70 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x10>)
    bd64:	4803      	ldr	r0, [pc, #12]	; (bd74 <_GLOBAL__sub_I__ZN16AudioInputI2SOct9block_ch1E+0x14>)
    bd66:	f00c bef7 	b.w	18b58 <__aeabi_atexit>
    bd6a:	bf00      	nop
    bd6c:	20003338 	.word	0x20003338
    bd70:	0000b535 	.word	0x0000b535
    bd74:	20005184 	.word	0x20005184

0000bd78 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E>:
audio_block_t * AudioInputI2SQuad::block_ch2 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch3 = NULL;
audio_block_t * AudioInputI2SQuad::block_ch4 = NULL;
uint16_t AudioInputI2SQuad::block_offset = 0;
bool AudioInputI2SQuad::update_responsibility = false;
DMAChannel AudioInputI2SQuad::dma(false);
    bd78:	4a02      	ldr	r2, [pc, #8]	; (bd84 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0xc>)
    bd7a:	4903      	ldr	r1, [pc, #12]	; (bd88 <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x10>)
    bd7c:	4803      	ldr	r0, [pc, #12]	; (bd8c <_GLOBAL__sub_I__ZN17AudioInputI2SQuad9block_ch1E+0x14>)
    bd7e:	f00c beeb 	b.w	18b58 <__aeabi_atexit>
    bd82:	bf00      	nop
    bd84:	20003338 	.word	0x20003338
    bd88:	0000b535 	.word	0x0000b535
    bd8c:	2000519c 	.word	0x2000519c

0000bd90 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE>:
DMAChannel AudioInputPDM::dma(false);
    bd90:	4a02      	ldr	r2, [pc, #8]	; (bd9c <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0xc>)
    bd92:	4903      	ldr	r1, [pc, #12]	; (bda0 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x10>)
    bd94:	4803      	ldr	r0, [pc, #12]	; (bda4 <_GLOBAL__sub_I__ZN13AudioInputPDM10block_leftE+0x14>)
    bd96:	f00c bedf 	b.w	18b58 <__aeabi_atexit>
    bd9a:	bf00      	nop
    bd9c:	20003338 	.word	0x20003338
    bda0:	0000b535 	.word	0x0000b535
    bda4:	200050cc 	.word	0x200050cc

0000bda8 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE>:

DMAMEM __attribute__((aligned(32))) static uint32_t pdm_buffer[AUDIO_BLOCK_SAMPLES*4];
static uint32_t leftover[14];
audio_block_t * AudioInputPDM2::block_left = NULL;
bool AudioInputPDM2::update_responsibility = false;
DMAChannel AudioInputPDM2::dma(false);
    bda8:	4a02      	ldr	r2, [pc, #8]	; (bdb4 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0xc>)
    bdaa:	4903      	ldr	r1, [pc, #12]	; (bdb8 <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x10>)
    bdac:	4803      	ldr	r0, [pc, #12]	; (bdbc <_GLOBAL__sub_I__ZN14AudioInputPDM210block_leftE+0x14>)
    bdae:	f00c bed3 	b.w	18b58 <__aeabi_atexit>
    bdb2:	bf00      	nop
    bdb4:	20003338 	.word	0x20003338
    bdb8:	0000b535 	.word	0x0000b535
    bdbc:	200050e4 	.word	0x200050e4

0000bdc0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE>:
static uint32_t spdif_rx_buffer[AUDIO_BLOCK_SAMPLES * 4];
audio_block_t * AudioInputSPDIF3::block_left = NULL;
audio_block_t * AudioInputSPDIF3::block_right = NULL;
uint16_t AudioInputSPDIF3::block_offset = 0;
bool AudioInputSPDIF3::update_responsibility = false;
DMAChannel AudioInputSPDIF3::dma(false);
    bdc0:	4a02      	ldr	r2, [pc, #8]	; (bdcc <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0xc>)
    bdc2:	4903      	ldr	r1, [pc, #12]	; (bdd0 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x10>)
    bdc4:	4803      	ldr	r0, [pc, #12]	; (bdd4 <_GLOBAL__sub_I__ZN16AudioInputSPDIF310block_leftE+0x14>)
    bdc6:	f00c bec7 	b.w	18b58 <__aeabi_atexit>
    bdca:	bf00      	nop
    bdcc:	20003338 	.word	0x20003338
    bdd0:	0000b535 	.word	0x0000b535
    bdd4:	2000518c 	.word	0x2000518c

0000bdd8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE>:
audio_block_t * AudioInputTDM::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM::update_responsibility = false;
DMAChannel AudioInputTDM::dma(false);
    bdd8:	4a02      	ldr	r2, [pc, #8]	; (bde4 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0xc>)
    bdda:	4903      	ldr	r1, [pc, #12]	; (bde8 <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x10>)
    bddc:	4803      	ldr	r0, [pc, #12]	; (bdec <_GLOBAL__sub_I__ZN13AudioInputTDM14block_incomingE+0x14>)
    bdde:	f00c bebb 	b.w	18b58 <__aeabi_atexit>
    bde2:	bf00      	nop
    bde4:	20003338 	.word	0x20003338
    bde8:	0000b535 	.word	0x0000b535
    bdec:	200050d4 	.word	0x200050d4

0000bdf0 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE>:
audio_block_t * AudioInputTDM2::block_incoming[16] = {
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
	nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
};
bool AudioInputTDM2::update_responsibility = false;
DMAChannel AudioInputTDM2::dma(false);
    bdf0:	4a02      	ldr	r2, [pc, #8]	; (bdfc <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0xc>)
    bdf2:	4903      	ldr	r1, [pc, #12]	; (be00 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x10>)
    bdf4:	4803      	ldr	r0, [pc, #12]	; (be04 <_GLOBAL__sub_I__ZN14AudioInputTDM214block_incomingE+0x14>)
    bdf6:	f00c beaf 	b.w	18b58 <__aeabi_atexit>
    bdfa:	bf00      	nop
    bdfc:	20003338 	.word	0x20003338
    be00:	0000b535 	.word	0x0000b535
    be04:	200050ec 	.word	0x200050ec

0000be08 <memcpy_tointerleaveLR>:
	@ r0: dst
	@ r1: srcL
	@ r2: srcR

#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11,r14}
    be08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	add r14,r0,#(AUDIO_BLOCK_SAMPLES*2)
    be0c:	f500 7e80 	add.w	lr, r0, #256	; 0x100

0000be10 <.loopLR>:
	.align 2
.loopLR:
	//Load 2*4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    be10:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}
	ldmia r2!, {r6,r8,r10,r12} //1+4	
    be14:	e8b2 1540 	ldmia.w	r2!, {r6, r8, sl, ip}

	pkhbt r3,r5,r6,LSL #16	//1
    be18:	eac5 4306 	pkhbt	r3, r5, r6, lsl #16
	pkhtb r4,r6,r5,ASR #16	//1
    be1c:	eac6 4425 	pkhtb	r4, r6, r5, asr #16

	pkhbt r5,r7,r8,LSL #16	//1
    be20:	eac7 4508 	pkhbt	r5, r7, r8, lsl #16
	pkhtb r6,r8,r7,ASR #16	//1
    be24:	eac8 4627 	pkhtb	r6, r8, r7, asr #16

	pkhbt r7,r9,r10,LSL #16	//1
    be28:	eac9 470a 	pkhbt	r7, r9, sl, lsl #16
	pkhtb r8,r10,r9,ASR #16	//1
    be2c:	eaca 4829 	pkhtb	r8, sl, r9, asr #16

	pkhbt r9,r11,r12,LSL #16	//1
    be30:	eacb 490c 	pkhbt	r9, fp, ip, lsl #16
	pkhtb r10,r12,r11,ASR #16	//1
    be34:	eacc 4a2b 	pkhtb	sl, ip, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8 -> 5+5+8+9 = 27 Cycles to interleave 32 bytes. 
    be38:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
	
	cmp r14, r0
    be3c:	4586      	cmp	lr, r0
	bne .loopLR
    be3e:	d1e7      	bne.n	be10 <.loopLR>

	pop	{r4-r11,r14}	
    be40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	pkhtb r6,r8,r7,ASR #16

	stmia r0!, {r3,r4,r5,r6}
	pop	{r4-r8}
#endif
	BX lr
    be44:	4770      	bx	lr

0000be46 <memcpy_tointerleaveL>:
	memcpy_tointerleaveL:

	@ r0: dst
	@ r1: srcL
	
	mov r2, #0
    be46:	f04f 0200 	mov.w	r2, #0
	
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    be4a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    be4e:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    be52:	bf00      	nop

0000be54 <.loopL>:
	.align 2
.loopL:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}  //1+4
    be54:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r5,r2	//1
    be58:	eac5 0302 	pkhbt	r3, r5, r2
	pkhtb r4,r2,r5,ASR #16	//1
    be5c:	eac2 4425 	pkhtb	r4, r2, r5, asr #16

	pkhbt r5,r7,r2	//1
    be60:	eac7 0502 	pkhbt	r5, r7, r2
	pkhtb r6,r2,r7,ASR #16	//1
    be64:	eac2 4627 	pkhtb	r6, r2, r7, asr #16

	pkhbt r7,r9,r2	//1
    be68:	eac9 0702 	pkhbt	r7, r9, r2
	pkhtb r8,r2,r9,ASR #16	//1
    be6c:	eac2 4829 	pkhtb	r8, r2, r9, asr #16

	pkhbt r9,r11,r2	//1
    be70:	eacb 0902 	pkhbt	r9, fp, r2
	pkhtb r10,r2,r11,ASR #16	//1
    be74:	eac2 4a2b 	pkhtb	sl, r2, fp, asr #16

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}	//1+8
    be78:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    be7c:	4584      	cmp	ip, r0
	bne .loopL
    be7e:	d1e9      	bne.n	be54 <.loopL>

	pop	{r4-r11}
    be80:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	stmia r0!, {r3,r4,r5,r6}
	
	pop	{r4-r7}
#endif	
	BX lr
    be84:	4770      	bx	lr

0000be86 <memcpy_tointerleaveR>:
	memcpy_tointerleaveR:

	@ r0: dst
	@ r1: srcR

	mov r2, #0
    be86:	f04f 0200 	mov.w	r2, #0
#if AUDIO_BLOCK_SAMPLES > 8
	push	{r4-r11}
    be8a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	add r12,r0,#(AUDIO_BLOCK_SAMPLES*2)
    be8e:	f500 7c80 	add.w	ip, r0, #256	; 0x100
    be92:	bf00      	nop

0000be94 <.loopR>:
	.align 2
.loopR:

	//Load 4 words
	ldmia r1!, {r5,r7,r9,r11}
    be94:	e8b1 0aa0 	ldmia.w	r1!, {r5, r7, r9, fp}

	pkhbt r3,r2,r5,LSL #16
    be98:	eac2 4305 	pkhbt	r3, r2, r5, lsl #16
	pkhtb r4,r5,r2
    be9c:	eac2 0405 	pkhbt	r4, r2, r5

	pkhbt r5,r2,r7,LSL #16
    bea0:	eac2 4507 	pkhbt	r5, r2, r7, lsl #16
	pkhtb r6,r7,r2
    bea4:	eac2 0607 	pkhbt	r6, r2, r7

	pkhbt r7,r2,r9,LSL #16
    bea8:	eac2 4709 	pkhbt	r7, r2, r9, lsl #16
	pkhtb r8,r9,r2
    beac:	eac2 0809 	pkhbt	r8, r2, r9

	pkhbt r9,r2,r11,LSL #16
    beb0:	eac2 490b 	pkhbt	r9, r2, fp, lsl #16
	pkhtb r10,r11,r2
    beb4:	eac2 0a0b 	pkhbt	sl, r2, fp

	//Write 8 Words
	stmia r0!, {r3,r4,r5,r6,r7,r8,r9,r10}
    beb8:	e8a0 07f8 	stmia.w	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}

	cmp r12, r0
    bebc:	4584      	cmp	ip, r0
	bne .loopR
    bebe:	d1e9      	bne.n	be94 <.loopR>

	pop	{r4-r11}
    bec0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	stmia r0!, {r3,r4,r5,r6}

	pop	{r4-r7}

#endif	
	BX lr
    bec4:	4770      	bx	lr

0000bec6 <memcpy_tointerleaveQuad>:
	@ r1: src1
	@ r2: src2
	@ r3: src3
	@ r4: src4

	push	{r4-r11}
    bec6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	ldr r4, [sp, #(0+32)] //5th parameter is saved on the stack
    beca:	9c08      	ldr	r4, [sp, #32]
	add r11,r0,#(AUDIO_BLOCK_SAMPLES*4)
    becc:	f500 7b00 	add.w	fp, r0, #512	; 0x200

0000bed0 <.loopQuad>:
	.align 2
.loopQuad:

	ldr r5, [r1],4
    bed0:	f851 5b04 	ldr.w	r5, [r1], #4
	ldr r6, [r3],4
    bed4:	f853 6b04 	ldr.w	r6, [r3], #4
	pkhbt r7,r5,r6,LSL #16
    bed8:	eac5 4706 	pkhbt	r7, r5, r6, lsl #16
	pkhtb r9,r6,r5,ASR #16
    bedc:	eac6 4925 	pkhtb	r9, r6, r5, asr #16
	ldr r5, [r2],4
    bee0:	f852 5b04 	ldr.w	r5, [r2], #4
	ldr r6, [r4],4
    bee4:	f854 6b04 	ldr.w	r6, [r4], #4
	pkhbt r8,r5,r6,LSL #16
    bee8:	eac5 4806 	pkhbt	r8, r5, r6, lsl #16
	pkhtb r10,r6,r5,ASR #16
    beec:	eac6 4a25 	pkhtb	sl, r6, r5, asr #16

	stmia r0!, {r7-r10}
    bef0:	e8a0 0780 	stmia.w	r0!, {r7, r8, r9, sl}

	cmp r11, r0
    bef4:	4583      	cmp	fp, r0
	bne .loopQuad
    bef6:	d1eb      	bne.n	bed0 <.loopQuad>

	pop	{r4-r11}
    bef8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	BX lr
    befc:	4770      	bx	lr
    befe:	bf00      	nop

0000bf00 <AudioMixer4::update()>:
{
    bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for (channel=0; channel < 4; channel++) {
    bf02:	2700      	movs	r7, #0
{
    bf04:	4605      	mov	r5, r0
	audio_block_t *in, *out=NULL;
    bf06:	463c      	mov	r4, r7
		if (!out) {
    bf08:	b3b4      	cbz	r4, bf78 <AudioMixer4::update()+0x78>
			in = receiveReadOnly(channel);
    bf0a:	4639      	mov	r1, r7
    bf0c:	4628      	mov	r0, r5
    bf0e:	f009 f82f 	bl	14f70 <AudioStream::receiveReadOnly(unsigned int)>
			if (in) {
    bf12:	b308      	cbz	r0, bf58 <AudioMixer4::update()+0x58>
				applyGainThenAdd(out->data, in->data, multiplier[channel]);
    bf14:	1dbb      	adds	r3, r7, #6
    bf16:	f104 0e04 	add.w	lr, r4, #4
    bf1a:	f100 0c04 	add.w	ip, r0, #4
    bf1e:	f855 6023 	ldr.w	r6, [r5, r3, lsl #2]
	if (mult == MULTI_UNITYGAIN) {
    bf22:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
    bf26:	d047      	beq.n	bfb8 <AudioMixer4::update()+0xb8>
    bf28:	f500 7182 	add.w	r1, r0, #260	; 0x104
			uint32_t tmp32 = *src++; // read 2 samples from *data
    bf2c:	f85c 2b04 	ldr.w	r2, [ip], #4
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bf30:	fb36 f302 	smulwb	r3, r6, r2
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bf34:	fb36 f212 	smulwt	r2, r6, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    bf38:	f303 030f 	ssat	r3, #16, r3
    bf3c:	f302 020f 	ssat	r2, #16, r2
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    bf40:	eac3 4302 	pkhbt	r3, r3, r2, lsl #16
			uint32_t tmp32b = *dst;
    bf44:	f8de 2000 	ldr.w	r2, [lr]
// computes (((a[31:16] + b[31:16]) << 16) | (a[15:0 + b[15:0]))  (saturates)
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b) __attribute__((always_inline, unused));
static inline uint32_t signed_add_16_and_16(uint32_t a, uint32_t b)
{
	int32_t out;
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bf48:	fa93 f312 	qadd16	r3, r3, r2
		} while (dst < end);
    bf4c:	458c      	cmp	ip, r1
			*dst++ = signed_add_16_and_16(tmp32, tmp32b);
    bf4e:	f84e 3b04 	str.w	r3, [lr], #4
		} while (dst < end);
    bf52:	d1eb      	bne.n	bf2c <AudioMixer4::update()+0x2c>
				release(in);
    bf54:	f008 ffc0 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    bf58:	3701      	adds	r7, #1
    bf5a:	2f04      	cmp	r7, #4
    bf5c:	d1d4      	bne.n	bf08 <AudioMixer4::update()+0x8>
		transmit(out);
    bf5e:	4628      	mov	r0, r5
    bf60:	4621      	mov	r1, r4
    bf62:	2200      	movs	r2, #0
    bf64:	f008 ffe0 	bl	14f28 <AudioStream::transmit(audio_block_struct*, unsigned char)>
		release(out);
    bf68:	4620      	mov	r0, r4
}
    bf6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		release(out);
    bf6e:	f008 bfb3 	b.w	14ed8 <AudioStream::release(audio_block_struct*)>
	for (channel=0; channel < 4; channel++) {
    bf72:	3701      	adds	r7, #1
    bf74:	2f04      	cmp	r7, #4
    bf76:	d03a      	beq.n	bfee <AudioMixer4::update()+0xee>
			out = receiveWritable(channel);
    bf78:	4639      	mov	r1, r7
    bf7a:	4628      	mov	r0, r5
    bf7c:	f009 f804 	bl	14f88 <AudioStream::receiveWritable(unsigned int)>
			if (out) {
    bf80:	4604      	mov	r4, r0
    bf82:	2800      	cmp	r0, #0
    bf84:	d0f5      	beq.n	bf72 <AudioMixer4::update()+0x72>
				int32_t mult = multiplier[channel];
    bf86:	1dbb      	adds	r3, r7, #6
    bf88:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
				if (mult != MULTI_UNITYGAIN) applyGain(out->data, mult);
    bf8c:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    bf90:	d0e2      	beq.n	bf58 <AudioMixer4::update()+0x58>
    bf92:	1d21      	adds	r1, r4, #4
	const uint32_t *end = (uint32_t *)(data + AUDIO_BLOCK_SAMPLES);
    bf94:	f504 7682 	add.w	r6, r4, #260	; 0x104
		uint32_t tmp32 = *p; // read 2 samples from *data
    bf98:	680b      	ldr	r3, [r1, #0]
	asm volatile("smulwb %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bf9a:	fb30 f203 	smulwb	r2, r0, r3
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bf9e:	fb30 f313 	smulwt	r3, r0, r3
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    bfa2:	f302 020f 	ssat	r2, #16, r2
    bfa6:	f303 030f 	ssat	r3, #16, r3
	asm volatile("pkhbt %0, %1, %2, lsl #16" : "=r" (out) : "r" (b), "r" (a));
    bfaa:	eac2 4303 	pkhbt	r3, r2, r3, lsl #16
		*p++ = pack_16b_16b(val2, val1);
    bfae:	f841 3b04 	str.w	r3, [r1], #4
	} while (p < end);
    bfb2:	42b1      	cmp	r1, r6
    bfb4:	d1f0      	bne.n	bf98 <AudioMixer4::update()+0x98>
    bfb6:	e7cf      	b.n	bf58 <AudioMixer4::update()+0x58>
    bfb8:	f100 020c 	add.w	r2, r0, #12
    bfbc:	f104 030c 	add.w	r3, r4, #12
    bfc0:	f500 7c86 	add.w	ip, r0, #268	; 0x10c
	asm volatile("qadd16 %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    bfc4:	f853 1c08 	ldr.w	r1, [r3, #-8]
    bfc8:	f852 6c08 	ldr.w	r6, [r2, #-8]
    bfcc:	fa91 f116 	qadd16	r1, r1, r6
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    bfd0:	f843 1c08 	str.w	r1, [r3, #-8]
    bfd4:	f853 1c04 	ldr.w	r1, [r3, #-4]
    bfd8:	f852 6c04 	ldr.w	r6, [r2, #-4]
    bfdc:	fa91 f116 	qadd16	r1, r1, r6
		} while (dst < end);
    bfe0:	3208      	adds	r2, #8
			*dst++ = signed_add_16_and_16(tmp32, *src++);
    bfe2:	f843 1c04 	str.w	r1, [r3, #-4]
		} while (dst < end);
    bfe6:	3308      	adds	r3, #8
    bfe8:	4594      	cmp	ip, r2
    bfea:	d1eb      	bne.n	bfc4 <AudioMixer4::update()+0xc4>
    bfec:	e7b2      	b.n	bf54 <AudioMixer4::update()+0x54>
}
    bfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bff0 <AudioOutputAnalog::update()>:
void AudioOutputAnalog::begin(void)
{
}

void AudioOutputAnalog::update(void)
{
    bff0:	b508      	push	{r3, lr}
	audio_block_t *block;
	block = receiveReadOnly(0); // input 0
    bff2:	2100      	movs	r1, #0
    bff4:	f008 ffbc 	bl	14f70 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) release(block);
    bff8:	b118      	cbz	r0, c002 <AudioOutputAnalog::update()+0x12>
}
    bffa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	if (block) release(block);
    bffe:	f008 bf6b 	b.w	14ed8 <AudioStream::release(audio_block_struct*)>
}
    c002:	bd08      	pop	{r3, pc}

0000c004 <AudioOutputAnalog::begin()>:
}
    c004:	4770      	bx	lr
    c006:	bf00      	nop

0000c008 <AudioOutputI2S::isr()>:
{
    c008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	saddr = (uint32_t)(dma.TCD->SADDR);
    c00c:	4b45      	ldr	r3, [pc, #276]	; (c124 <AudioOutputI2S::isr()+0x11c>)
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    c00e:	4c46      	ldr	r4, [pc, #280]	; (c128 <AudioOutputI2S::isr()+0x120>)
	saddr = (uint32_t)(dma.TCD->SADDR);
    c010:	6818      	ldr	r0, [r3, #0]
		DMA_CINT = channel;
    c012:	7919      	ldrb	r1, [r3, #4]
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    c014:	f504 7580 	add.w	r5, r4, #256	; 0x100
	saddr = (uint32_t)(dma.TCD->SADDR);
    c018:	6803      	ldr	r3, [r0, #0]
    c01a:	4a44      	ldr	r2, [pc, #272]	; (c12c <AudioOutputI2S::isr()+0x124>)
	if (saddr < (uint32_t)i2s_tx_buffer + sizeof(i2s_tx_buffer) / 2) {
    c01c:	42ab      	cmp	r3, r5
    c01e:	77d1      	strb	r1, [r2, #31]
    c020:	d20b      	bcs.n	c03a <AudioOutputI2S::isr()+0x32>
		if (AudioOutputI2S::update_responsibility) AudioStream::update_all();
    c022:	4b43      	ldr	r3, [pc, #268]	; (c130 <AudioOutputI2S::isr()+0x128>)
    c024:	781b      	ldrb	r3, [r3, #0]
    c026:	2b00      	cmp	r3, #0
    c028:	d04b      	beq.n	c0c2 <AudioOutputI2S::isr()+0xba>
	void transmit(audio_block_t *block, unsigned char index = 0);
	audio_block_t * receiveReadOnly(unsigned int index = 0);
	audio_block_t * receiveWritable(unsigned int index = 0);
	static bool update_setup(void);
	static void update_stop(void);
	static void update_all(void) { NVIC_SET_PENDING(IRQ_SOFTWARE); }
    c02a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    c02e:	2240      	movs	r2, #64	; 0x40
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c030:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    c032:	f505 7580 	add.w	r5, r5, #256	; 0x100
    c036:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	blockL = AudioOutputI2S::block_left_1st;
    c03a:	4b3e      	ldr	r3, [pc, #248]	; (c134 <AudioOutputI2S::isr()+0x12c>)
	offsetL = AudioOutputI2S::block_left_offset;
    c03c:	f8df a104 	ldr.w	sl, [pc, #260]	; c144 <AudioOutputI2S::isr()+0x13c>
	blockL = AudioOutputI2S::block_left_1st;
    c040:	f8d3 8000 	ldr.w	r8, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    c044:	f8df 9100 	ldr.w	r9, [pc, #256]	; c148 <AudioOutputI2S::isr()+0x140>
	blockR = AudioOutputI2S::block_right_1st;
    c048:	4b3b      	ldr	r3, [pc, #236]	; (c138 <AudioOutputI2S::isr()+0x130>)
	offsetL = AudioOutputI2S::block_left_offset;
    c04a:	f8ba 6000 	ldrh.w	r6, [sl]
	blockR = AudioOutputI2S::block_right_1st;
    c04e:	f8d3 b000 	ldr.w	fp, [r3]
	offsetR = AudioOutputI2S::block_right_offset;
    c052:	f8b9 7000 	ldrh.w	r7, [r9]
	if (blockL && blockR) {
    c056:	f1b8 0f00 	cmp.w	r8, #0
    c05a:	d04f      	beq.n	c0fc <AudioOutputI2S::isr()+0xf4>
    c05c:	f1bb 0f00 	cmp.w	fp, #0
    c060:	d121      	bne.n	c0a6 <AudioOutputI2S::isr()+0x9e>
	} else if (blockL) {
    c062:	f1b8 0f00 	cmp.w	r8, #0
    c066:	d049      	beq.n	c0fc <AudioOutputI2S::isr()+0xf4>
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    c068:	f108 0104 	add.w	r1, r8, #4
    c06c:	4620      	mov	r0, r4
    c06e:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    c072:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveL(dest, blockL->data + offsetL);
    c074:	f7ff fee7 	bl	be46 <memcpy_tointerleaveL>
	asm volatile("": : :"memory");
	asm("dsb");
    c078:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    c07c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    c080:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
    c084:	3420      	adds	r4, #32
	} while (location < end_addr);
    c086:	42ac      	cmp	r4, r5
    c088:	d3fa      	bcc.n	c080 <AudioOutputI2S::isr()+0x78>
	asm("dsb");
    c08a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    c08e:	f3bf 8f6f 	isb	sy
	if (offsetL < AUDIO_BLOCK_SAMPLES) {
    c092:	2e7f      	cmp	r6, #127	; 0x7f
    c094:	d826      	bhi.n	c0e4 <AudioOutputI2S::isr()+0xdc>
		AudioOutputI2S::block_left_offset = offsetL;
    c096:	f8aa 6000 	strh.w	r6, [sl]
	if (offsetR < AUDIO_BLOCK_SAMPLES) {
    c09a:	2f7f      	cmp	r7, #127	; 0x7f
    c09c:	d815      	bhi.n	c0ca <AudioOutputI2S::isr()+0xc2>
		AudioOutputI2S::block_right_offset = offsetR;
    c09e:	f8a9 7000 	strh.w	r7, [r9]
}
    c0a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    c0a6:	f10b 0204 	add.w	r2, fp, #4
    c0aa:	f108 0104 	add.w	r1, r8, #4
    c0ae:	4620      	mov	r0, r4
    c0b0:	eb02 0247 	add.w	r2, r2, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    c0b4:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    c0b6:	eb01 0146 	add.w	r1, r1, r6, lsl #1
		offsetL += AUDIO_BLOCK_SAMPLES / 2;
    c0ba:	3640      	adds	r6, #64	; 0x40
		memcpy_tointerleaveLR(dest, blockL->data + offsetL, blockR->data + offsetR);
    c0bc:	f7ff fea4 	bl	be08 <memcpy_tointerleaveLR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    c0c0:	e7da      	b.n	c078 <AudioOutputI2S::isr()+0x70>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    c0c2:	462c      	mov	r4, r5
	uint32_t end_addr = (uint32_t)addr + size;
    c0c4:	f505 7580 	add.w	r5, r5, #256	; 0x100
    c0c8:	e7b7      	b.n	c03a <AudioOutputI2S::isr()+0x32>
		AudioOutputI2S::block_right_offset = 0;
    c0ca:	2400      	movs	r4, #0
		AudioStream::release(blockR);
    c0cc:	4658      	mov	r0, fp
		AudioOutputI2S::block_right_offset = 0;
    c0ce:	f8a9 4000 	strh.w	r4, [r9]
		AudioStream::release(blockR);
    c0d2:	f008 ff01 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    c0d6:	4b19      	ldr	r3, [pc, #100]	; (c13c <AudioOutputI2S::isr()+0x134>)
    c0d8:	681a      	ldr	r2, [r3, #0]
		AudioOutputI2S::block_right_2nd = NULL;
    c0da:	601c      	str	r4, [r3, #0]
		AudioOutputI2S::block_right_1st = AudioOutputI2S::block_right_2nd;
    c0dc:	4b16      	ldr	r3, [pc, #88]	; (c138 <AudioOutputI2S::isr()+0x130>)
    c0de:	601a      	str	r2, [r3, #0]
}
    c0e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		AudioOutputI2S::block_left_offset = 0;
    c0e4:	2400      	movs	r4, #0
		AudioStream::release(blockL);
    c0e6:	4640      	mov	r0, r8
		AudioOutputI2S::block_left_offset = 0;
    c0e8:	f8aa 4000 	strh.w	r4, [sl]
		AudioStream::release(blockL);
    c0ec:	f008 fef4 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    c0f0:	4a13      	ldr	r2, [pc, #76]	; (c140 <AudioOutputI2S::isr()+0x138>)
    c0f2:	4b10      	ldr	r3, [pc, #64]	; (c134 <AudioOutputI2S::isr()+0x12c>)
    c0f4:	6811      	ldr	r1, [r2, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    c0f6:	6014      	str	r4, [r2, #0]
		AudioOutputI2S::block_left_1st = AudioOutputI2S::block_left_2nd;
    c0f8:	6019      	str	r1, [r3, #0]
		AudioOutputI2S::block_left_2nd = NULL;
    c0fa:	e7ce      	b.n	c09a <AudioOutputI2S::isr()+0x92>
	} else if (blockR) {
    c0fc:	f1bb 0f00 	cmp.w	fp, #0
    c100:	d008      	beq.n	c114 <AudioOutputI2S::isr()+0x10c>
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    c102:	f10b 0104 	add.w	r1, fp, #4
    c106:	4620      	mov	r0, r4
    c108:	eb01 0147 	add.w	r1, r1, r7, lsl #1
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    c10c:	3740      	adds	r7, #64	; 0x40
		memcpy_tointerleaveR(dest, blockR->data + offsetR);
    c10e:	f7ff feba 	bl	be86 <memcpy_tointerleaveR>
		offsetR += AUDIO_BLOCK_SAMPLES / 2;
    c112:	e7b1      	b.n	c078 <AudioOutputI2S::isr()+0x70>
		memset(dest,0,AUDIO_BLOCK_SAMPLES * 2);
    c114:	f44f 7280 	mov.w	r2, #256	; 0x100
    c118:	4659      	mov	r1, fp
    c11a:	4620      	mov	r0, r4
    c11c:	f016 f9e0 	bl	224e0 <memset>
    c120:	e7aa      	b.n	c078 <AudioOutputI2S::isr()+0x70>
    c122:	bf00      	nop
    c124:	20005104 	.word	0x20005104
    c128:	20201040 	.word	0x20201040
    c12c:	400e8000 	.word	0x400e8000
    c130:	2000c948 	.word	0x2000c948
    c134:	200050f4 	.word	0x200050f4
    c138:	200050fc 	.word	0x200050fc
    c13c:	20005100 	.word	0x20005100
    c140:	200050f8 	.word	0x200050f8
    c144:	2000c92e 	.word	0x2000c92e
    c148:	2000c930 	.word	0x2000c930

0000c14c <AudioOutputI2S::update()>:
{
    c14c:	b538      	push	{r3, r4, r5, lr}
	block = receiveReadOnly(0); // input 0 = left channel
    c14e:	2100      	movs	r1, #0
{
    c150:	4604      	mov	r4, r0
	block = receiveReadOnly(0); // input 0 = left channel
    c152:	f008 ff0d 	bl	14f70 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    c156:	b188      	cbz	r0, c17c <AudioOutputI2S::update()+0x30>
		__disable_irq();
    c158:	b672      	cpsid	i
		if (block_left_1st == NULL) {
    c15a:	4a1c      	ldr	r2, [pc, #112]	; (c1cc <AudioOutputI2S::update()+0x80>)
    c15c:	6813      	ldr	r3, [r2, #0]
    c15e:	2b00      	cmp	r3, #0
    c160:	d02b      	beq.n	c1ba <AudioOutputI2S::update()+0x6e>
		} else if (block_left_2nd == NULL) {
    c162:	491b      	ldr	r1, [pc, #108]	; (c1d0 <AudioOutputI2S::update()+0x84>)
    c164:	680d      	ldr	r5, [r1, #0]
    c166:	2d00      	cmp	r5, #0
    c168:	d02c      	beq.n	c1c4 <AudioOutputI2S::update()+0x78>
			block_left_1st = block_left_2nd;
    c16a:	6015      	str	r5, [r2, #0]
			block_left_2nd = block;
    c16c:	6008      	str	r0, [r1, #0]
			block_left_offset = 0;
    c16e:	2100      	movs	r1, #0
    c170:	4a18      	ldr	r2, [pc, #96]	; (c1d4 <AudioOutputI2S::update()+0x88>)
    c172:	8011      	strh	r1, [r2, #0]
			__enable_irq();
    c174:	b662      	cpsie	i
			release(tmp);
    c176:	4618      	mov	r0, r3
    c178:	f008 feae 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
	block = receiveReadOnly(1); // input 1 = right channel
    c17c:	2101      	movs	r1, #1
    c17e:	4620      	mov	r0, r4
    c180:	f008 fef6 	bl	14f70 <AudioStream::receiveReadOnly(unsigned int)>
	if (block) {
    c184:	b198      	cbz	r0, c1ae <AudioOutputI2S::update()+0x62>
		__disable_irq();
    c186:	b672      	cpsid	i
		if (block_right_1st == NULL) {
    c188:	4a13      	ldr	r2, [pc, #76]	; (c1d8 <AudioOutputI2S::update()+0x8c>)
    c18a:	6813      	ldr	r3, [r2, #0]
    c18c:	b183      	cbz	r3, c1b0 <AudioOutputI2S::update()+0x64>
		} else if (block_right_2nd == NULL) {
    c18e:	4913      	ldr	r1, [pc, #76]	; (c1dc <AudioOutputI2S::update()+0x90>)
    c190:	680c      	ldr	r4, [r1, #0]
    c192:	b154      	cbz	r4, c1aa <AudioOutputI2S::update()+0x5e>
			block_right_1st = block_right_2nd;
    c194:	6014      	str	r4, [r2, #0]
			block_right_offset = 0;
    c196:	2400      	movs	r4, #0
    c198:	4a11      	ldr	r2, [pc, #68]	; (c1e0 <AudioOutputI2S::update()+0x94>)
			block_right_2nd = block;
    c19a:	6008      	str	r0, [r1, #0]
			block_right_offset = 0;
    c19c:	8014      	strh	r4, [r2, #0]
			__enable_irq();
    c19e:	b662      	cpsie	i
			release(tmp);
    c1a0:	4618      	mov	r0, r3
}
    c1a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			release(tmp);
    c1a6:	f008 be97 	b.w	14ed8 <AudioStream::release(audio_block_struct*)>
			block_right_2nd = block;
    c1aa:	6008      	str	r0, [r1, #0]
			__enable_irq();
    c1ac:	b662      	cpsie	i
}
    c1ae:	bd38      	pop	{r3, r4, r5, pc}
			block_right_offset = 0;
    c1b0:	490b      	ldr	r1, [pc, #44]	; (c1e0 <AudioOutputI2S::update()+0x94>)
			block_right_1st = block;
    c1b2:	6010      	str	r0, [r2, #0]
			block_right_offset = 0;
    c1b4:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    c1b6:	b662      	cpsie	i
}
    c1b8:	bd38      	pop	{r3, r4, r5, pc}
			block_left_offset = 0;
    c1ba:	4906      	ldr	r1, [pc, #24]	; (c1d4 <AudioOutputI2S::update()+0x88>)
			block_left_1st = block;
    c1bc:	6010      	str	r0, [r2, #0]
			block_left_offset = 0;
    c1be:	800b      	strh	r3, [r1, #0]
			__enable_irq();
    c1c0:	b662      	cpsie	i
    c1c2:	e7db      	b.n	c17c <AudioOutputI2S::update()+0x30>
			block_left_2nd = block;
    c1c4:	6008      	str	r0, [r1, #0]
			__enable_irq();
    c1c6:	b662      	cpsie	i
    c1c8:	e7d8      	b.n	c17c <AudioOutputI2S::update()+0x30>
    c1ca:	bf00      	nop
    c1cc:	200050f4 	.word	0x200050f4
    c1d0:	200050f8 	.word	0x200050f8
    c1d4:	2000c92e 	.word	0x2000c92e
    c1d8:	200050fc 	.word	0x200050fc
    c1dc:	20005100 	.word	0x20005100
    c1e0:	2000c930 	.word	0x2000c930

0000c1e4 <AudioOutputI2S::config_i2s(bool)>:
{
    c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    c1e6:	4c2d      	ldr	r4, [pc, #180]	; (c29c <AudioOutputI2S::config_i2s(bool)+0xb8>)
{
    c1e8:	4605      	mov	r5, r0
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    c1ea:	4a2d      	ldr	r2, [pc, #180]	; (c2a0 <AudioOutputI2S::config_i2s(bool)+0xbc>)
	CCM_CCGR5 |= CCM_CCGR5_SAI1(CCM_CCGR_ON);
    c1ec:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    c1ee:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
    c1f2:	67e3      	str	r3, [r4, #124]	; 0x7c
	if ((I2S1_TCSR & I2S_TCSR_TE) != 0 || (I2S1_RCSR & I2S_RCSR_RE) != 0)
    c1f4:	6893      	ldr	r3, [r2, #8]
    c1f6:	2b00      	cmp	r3, #0
    c1f8:	db46      	blt.n	c288 <AudioOutputI2S::config_i2s(bool)+0xa4>
    c1fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    c1fe:	2b00      	cmp	r3, #0
    c200:	db42      	blt.n	c288 <AudioOutputI2S::config_i2s(bool)+0xa4>
	set_audioClock(c0, c1, c2);
    c202:	2300      	movs	r3, #0
    c204:	f242 7210 	movw	r2, #10000	; 0x2710
    c208:	f44f 610c 	mov.w	r1, #2240	; 0x8c0
    c20c:	201c      	movs	r0, #28
    c20e:	f01b fd43 	bl	27c98 <___Z14set_audioClockilmb_veneer>
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    c212:	69e3      	ldr	r3, [r4, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    c214:	4a23      	ldr	r2, [pc, #140]	; (c2a4 <AudioOutputI2S::config_i2s(bool)+0xc0>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    c216:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    c21a:	4923      	ldr	r1, [pc, #140]	; (c2a8 <AudioOutputI2S::config_i2s(bool)+0xc4>)
		   | CCM_CSCMR1_SAI1_CLK_SEL(2); // &0x03 // (0,1,2): PLL3PFD0, PLL5, PLL4
    c21c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	CCM_CSCMR1 = (CCM_CSCMR1 & ~(CCM_CSCMR1_SAI1_CLK_SEL_MASK))
    c220:	61e3      	str	r3, [r4, #28]
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    c222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c224:	401a      	ands	r2, r3
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    c226:	4b21      	ldr	r3, [pc, #132]	; (c2ac <AudioOutputI2S::config_i2s(bool)+0xc8>)
		   | CCM_CS1CDR_SAI1_CLK_PODF(n2-1); // &0x3f
    c228:	f042 02ce 	orr.w	r2, r2, #206	; 0xce
	CCM_CS1CDR = (CCM_CS1CDR & ~(CCM_CS1CDR_SAI1_CLK_PRED_MASK | CCM_CS1CDR_SAI1_CLK_PODF_MASK))
    c22c:	62a2      	str	r2, [r4, #40]	; 0x28
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    c22e:	684a      	ldr	r2, [r1, #4]
		| (IOMUXC_GPR_GPR1_SAI1_MCLK_DIR | IOMUXC_GPR_GPR1_SAI1_MCLK1_SEL(0));
    c230:	4013      	ands	r3, r2
    c232:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
	IOMUXC_GPR_GPR1 = (IOMUXC_GPR_GPR1
    c236:	604b      	str	r3, [r1, #4]
	if (!only_bclk)
    c238:	b92d      	cbnz	r5, c246 <AudioOutputI2S::config_i2s(bool)+0x62>
	  CORE_PIN23_CONFIG = 3;  //1:MCLK
    c23a:	4b1d      	ldr	r3, [pc, #116]	; (c2b0 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    c23c:	2203      	movs	r2, #3
    c23e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	  CORE_PIN20_CONFIG = 3;  //1:RX_SYNC  (LRCLK)
    c242:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    c246:	4e1a      	ldr	r6, [pc, #104]	; (c2b0 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    c248:	2703      	movs	r7, #3
	I2S1_TMR = 0;
    c24a:	4b15      	ldr	r3, [pc, #84]	; (c2a0 <AudioOutputI2S::config_i2s(bool)+0xbc>)
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    c24c:	2401      	movs	r4, #1
	CORE_PIN21_CONFIG = 3;  //1:RX_BCLK
    c24e:	f8c6 7128 	str.w	r7, [r6, #296]	; 0x128
	I2S1_TMR = 0;
    c252:	2500      	movs	r5, #0
	I2S1_TCR3 = I2S_TCR3_TCE;
    c254:	f44f 3080 	mov.w	r0, #65536	; 0x10000
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    c258:	4916      	ldr	r1, [pc, #88]	; (c2b4 <AudioOutputI2S::config_i2s(bool)+0xd0>)
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    c25a:	4a17      	ldr	r2, [pc, #92]	; (c2b8 <AudioOutputI2S::config_i2s(bool)+0xd4>)
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    c25c:	4e17      	ldr	r6, [pc, #92]	; (c2bc <AudioOutputI2S::config_i2s(bool)+0xd8>)
	I2S1_TMR = 0;
    c25e:	661d      	str	r5, [r3, #96]	; 0x60
	I2S1_TCR1 = I2S_TCR1_RFW(1);
    c260:	60dc      	str	r4, [r3, #12]
	I2S1_TCR2 = I2S_TCR2_SYNC(tsync) | I2S_TCR2_BCP // sync=0; tx is async;
    c262:	611e      	str	r6, [r3, #16]
	I2S1_TCR3 = I2S_TCR3_TCE;
    c264:	6158      	str	r0, [r3, #20]
	I2S1_TCR4 = I2S_TCR4_FRSZ((2-1)) | I2S_TCR4_SYWD((32-1)) | I2S_TCR4_MF
    c266:	6199      	str	r1, [r3, #24]
	I2S1_TCR5 = I2S_TCR5_WNW((32-1)) | I2S_TCR5_W0W((32-1)) | I2S_TCR5_FBT((32-1));
    c268:	61da      	str	r2, [r3, #28]
	I2S1_RMR = 0;
    c26a:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
	I2S1_RCR1 = I2S_RCR1_RFW(1);
    c26e:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
	I2S1_RCR2 = I2S_RCR2_SYNC(rsync) | I2S_RCR2_BCP  // sync=0; rx is async;
    c272:	f104 64e0 	add.w	r4, r4, #117440512	; 0x7000000
    c276:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	I2S1_RCR3 = I2S_RCR3_RCE;
    c27a:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
	I2S1_RCR4 = I2S_RCR4_FRSZ((2-1)) | I2S_RCR4_SYWD((32-1)) | I2S_RCR4_MF
    c27e:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
	I2S1_RCR5 = I2S_RCR5_WNW((32-1)) | I2S_RCR5_W0W((32-1)) | I2S_RCR5_FBT((32-1));
    c282:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    c286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  if (!only_bclk) // if previous transmitter/receiver only activated BCLK, activate the other clock pins now
    c288:	2d00      	cmp	r5, #0
    c28a:	d1fc      	bne.n	c286 <AudioOutputI2S::config_i2s(bool)+0xa2>
	    CORE_PIN23_CONFIG = 3;  //1:MCLK
    c28c:	4b08      	ldr	r3, [pc, #32]	; (c2b0 <AudioOutputI2S::config_i2s(bool)+0xcc>)
    c28e:	2203      	movs	r2, #3
    c290:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	    CORE_PIN20_CONFIG = 3;  //1:RX_SYNC (LRCLK)
    c294:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
    c298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c29a:	bf00      	nop
    c29c:	400fc000 	.word	0x400fc000
    c2a0:	40384000 	.word	0x40384000
    c2a4:	fffffe00 	.word	0xfffffe00
    c2a8:	400ac000 	.word	0x400ac000
    c2ac:	fff7fff8 	.word	0xfff7fff8
    c2b0:	401f8000 	.word	0x401f8000
    c2b4:	00011f1b 	.word	0x00011f1b
    c2b8:	1f1f1f00 	.word	0x1f1f1f00
    c2bc:	47000001 	.word	0x47000001

0000c2c0 <AudioOutputI2S::begin()>:
{
    c2c0:	b570      	push	{r4, r5, r6, lr}
	dma.begin(true); // Allocate the DMA channel first
    c2c2:	4d26      	ldr	r5, [pc, #152]	; (c35c <AudioOutputI2S::begin()+0x9c>)
	block_left_1st = NULL;
    c2c4:	2400      	movs	r4, #0
	dma.begin(true); // Allocate the DMA channel first
    c2c6:	2101      	movs	r1, #1
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    c2c8:	4e25      	ldr	r6, [pc, #148]	; (c360 <AudioOutputI2S::begin()+0xa0>)
	dma.begin(true); // Allocate the DMA channel first
    c2ca:	4628      	mov	r0, r5
    c2cc:	f008 ff8a 	bl	151e4 <DMAChannel::begin(bool)>
	block_left_1st = NULL;
    c2d0:	4a24      	ldr	r2, [pc, #144]	; (c364 <AudioOutputI2S::begin()+0xa4>)
	block_right_1st = NULL;
    c2d2:	4b25      	ldr	r3, [pc, #148]	; (c368 <AudioOutputI2S::begin()+0xa8>)
	config_i2s();
    c2d4:	4620      	mov	r0, r4
	block_left_1st = NULL;
    c2d6:	6014      	str	r4, [r2, #0]
	block_right_1st = NULL;
    c2d8:	601c      	str	r4, [r3, #0]
	config_i2s();
    c2da:	f7ff ff83 	bl	c1e4 <AudioOutputI2S::config_i2s(bool)>
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    c2de:	4b23      	ldr	r3, [pc, #140]	; (c36c <AudioOutputI2S::begin()+0xac>)
    c2e0:	2103      	movs	r1, #3
	dma.TCD->SADDR = i2s_tx_buffer;
    c2e2:	4a23      	ldr	r2, [pc, #140]	; (c370 <AudioOutputI2S::begin()+0xb0>)
	dma.TCD->NBYTES_MLNO = 2;
    c2e4:	2002      	movs	r0, #2
	CORE_PIN7_CONFIG  = 3;  //1:TX_DATA0
    c2e6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
	dma.TCD->SADDR = i2s_tx_buffer;
    c2ea:	682b      	ldr	r3, [r5, #0]
	dma.TCD->SOFF = 2;
    c2ec:	4921      	ldr	r1, [pc, #132]	; (c374 <AudioOutputI2S::begin()+0xb4>)
	dma.TCD->SADDR = i2s_tx_buffer;
    c2ee:	601a      	str	r2, [r3, #0]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    c2f0:	f44f 7280 	mov.w	r2, #256	; 0x100
	dma.TCD->DLASTSGA = 0;
    c2f4:	619c      	str	r4, [r3, #24]
	dma.TCD->CITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    c2f6:	82da      	strh	r2, [r3, #22]
	dma.TCD->BITER_ELINKNO = sizeof(i2s_tx_buffer) / 2;
    c2f8:	83da      	strh	r2, [r3, #30]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    c2fa:	2206      	movs	r2, #6
	dma.TCD->DOFF = 0;
    c2fc:	829c      	strh	r4, [r3, #20]
	dma.TCD->CSR = DMA_TCD_CSR_INTHALF | DMA_TCD_CSR_INTMAJOR;
    c2fe:	839a      	strh	r2, [r3, #28]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    c300:	4a1d      	ldr	r2, [pc, #116]	; (c378 <AudioOutputI2S::begin()+0xb8>)
	dma.TCD->SLAST = -sizeof(i2s_tx_buffer);
    c302:	60de      	str	r6, [r3, #12]
	dma.TCD->DADDR = (void *)((uint32_t)&I2S1_TDR0 + 2);
    c304:	611a      	str	r2, [r3, #16]
	dma.TCD->SOFF = 2;
    c306:	e9c3 1001 	strd	r1, r0, [r3, #4]
		volatile uint32_t *mux = &DMAMUX_CHCFG0 + channel;
    c30a:	7929      	ldrb	r1, [r5, #4]
    c30c:	481b      	ldr	r0, [pc, #108]	; (c37c <AudioOutputI2S::begin()+0xbc>)
    c30e:	fa0f fc81 	sxth.w	ip, r1
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    c312:	4b1b      	ldr	r3, [pc, #108]	; (c380 <AudioOutputI2S::begin()+0xc0>)
		*mux = 0;
    c314:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
		*mux = (source & 0x7F) | DMAMUX_CHCFG_ENBL;
    c318:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
		DMA_SERQ = channel;
    c31c:	4b19      	ldr	r3, [pc, #100]	; (c384 <AudioOutputI2S::begin()+0xc4>)
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    c31e:	481a      	ldr	r0, [pc, #104]	; (c388 <AudioOutputI2S::begin()+0xc8>)
    c320:	76d9      	strb	r1, [r3, #27]
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    c322:	f8d2 3066 	ldr.w	r3, [r2, #102]	; 0x66
	update_responsibility = update_setup();
    c326:	4c19      	ldr	r4, [pc, #100]	; (c38c <AudioOutputI2S::begin()+0xcc>)
	I2S1_RCSR |= I2S_RCSR_RE | I2S_RCSR_BCE;
    c328:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    c32c:	f8c2 3066 	str.w	r3, [r2, #102]	; 0x66
	I2S1_TCSR = I2S_TCSR_TE | I2S_TCSR_BCE | I2S_TCSR_FRDE;
    c330:	f842 0c1a 	str.w	r0, [r2, #-26]
	update_responsibility = update_setup();
    c334:	f008 ff34 	bl	151a0 <AudioStream::update_setup()>
    c338:	792a      	ldrb	r2, [r5, #4]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    c33a:	4b15      	ldr	r3, [pc, #84]	; (c390 <AudioOutputI2S::begin()+0xd0>)
    c33c:	2101      	movs	r1, #1
    c33e:	7020      	strb	r0, [r4, #0]
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    c340:	f102 0010 	add.w	r0, r2, #16
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    c344:	eb03 1352 	add.w	r3, r3, r2, lsr #5
    c348:	f002 021f 	and.w	r2, r2, #31
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    c34c:	4c11      	ldr	r4, [pc, #68]	; (c394 <AudioOutputI2S::begin()+0xd4>)
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    c34e:	4091      	lsls	r1, r2
    c350:	009b      	lsls	r3, r3, #2
		_VectorsRam[channel + IRQ_DMA_CH0 + 16] = isr;
    c352:	4a11      	ldr	r2, [pc, #68]	; (c398 <AudioOutputI2S::begin()+0xd8>)
    c354:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
		NVIC_ENABLE_IRQ(IRQ_DMA_CH0 + channel);
    c358:	6019      	str	r1, [r3, #0]
}
    c35a:	bd70      	pop	{r4, r5, r6, pc}
    c35c:	20005104 	.word	0x20005104
    c360:	fffffe00 	.word	0xfffffe00
    c364:	200050f4 	.word	0x200050f4
    c368:	200050fc 	.word	0x200050fc
    c36c:	401f8000 	.word	0x401f8000
    c370:	20201040 	.word	0x20201040
    c374:	01010002 	.word	0x01010002
    c378:	40384022 	.word	0x40384022
    c37c:	400ec000 	.word	0x400ec000
    c380:	80000014 	.word	0x80000014
    c384:	400e8000 	.word	0x400e8000
    c388:	90000001 	.word	0x90000001
    c38c:	2000c948 	.word	0x2000c948
    c390:	38003840 	.word	0x38003840
    c394:	0000c009 	.word	0x0000c009
    c398:	20004000 	.word	0x20004000

0000c39c <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE>:
DMAChannel AudioOutputI2S::dma(false);
    c39c:	4a02      	ldr	r2, [pc, #8]	; (c3a8 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0xc>)
    c39e:	4903      	ldr	r1, [pc, #12]	; (c3ac <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x10>)
    c3a0:	4803      	ldr	r0, [pc, #12]	; (c3b0 <_GLOBAL__sub_I__ZN14AudioOutputI2S14block_left_1stE+0x14>)
    c3a2:	f00c bbd9 	b.w	18b58 <__aeabi_atexit>
    c3a6:	bf00      	nop
    c3a8:	20003338 	.word	0x20003338
    c3ac:	0000b535 	.word	0x0000b535
    c3b0:	20005104 	.word	0x20005104

0000c3b4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE>:
audio_block_t * AudioOutputI2S2::block_left_2nd = NULL;
audio_block_t * AudioOutputI2S2::block_right_2nd = NULL;
uint16_t  AudioOutputI2S2::block_left_offset = 0;
uint16_t  AudioOutputI2S2::block_right_offset = 0;
bool AudioOutputI2S2::update_responsibility = false;
DMAChannel AudioOutputI2S2::dma(false);
    c3b4:	4a02      	ldr	r2, [pc, #8]	; (c3c0 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0xc>)
    c3b6:	4903      	ldr	r1, [pc, #12]	; (c3c4 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x10>)
    c3b8:	4803      	ldr	r0, [pc, #12]	; (c3c8 <_GLOBAL__sub_I__ZN15AudioOutputI2S214block_left_1stE+0x14>)
    c3ba:	f00c bbcd 	b.w	18b58 <__aeabi_atexit>
    c3be:	bf00      	nop
    c3c0:	20003338 	.word	0x20003338
    c3c4:	0000b535 	.word	0x0000b535
    c3c8:	20005164 	.word	0x20005164

0000c3cc <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE>:
uint16_t  AudioOutputI2SHex::ch4_offset = 0;
uint16_t  AudioOutputI2SHex::ch5_offset = 0;
uint16_t  AudioOutputI2SHex::ch6_offset = 0;
bool AudioOutputI2SHex::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*3];
DMAChannel AudioOutputI2SHex::dma(false);
    c3cc:	4a02      	ldr	r2, [pc, #8]	; (c3d8 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0xc>)
    c3ce:	4903      	ldr	r1, [pc, #12]	; (c3dc <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x10>)
    c3d0:	4803      	ldr	r0, [pc, #12]	; (c3e0 <_GLOBAL__sub_I__ZN17AudioOutputI2SHex13block_ch1_1stE+0x14>)
    c3d2:	f00c bbc1 	b.w	18b58 <__aeabi_atexit>
    c3d6:	bf00      	nop
    c3d8:	20003338 	.word	0x20003338
    c3dc:	0000b535 	.word	0x0000b535
    c3e0:	200051a4 	.word	0x200051a4

0000c3e4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE>:
uint16_t  AudioOutputI2SOct::ch6_offset = 0;
uint16_t  AudioOutputI2SOct::ch7_offset = 0;
uint16_t  AudioOutputI2SOct::ch8_offset = 0;
bool AudioOutputI2SOct::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
DMAChannel AudioOutputI2SOct::dma(false);
    c3e4:	4a02      	ldr	r2, [pc, #8]	; (c3f0 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0xc>)
    c3e6:	4903      	ldr	r1, [pc, #12]	; (c3f4 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x10>)
    c3e8:	4803      	ldr	r0, [pc, #12]	; (c3f8 <_GLOBAL__sub_I__ZN17AudioOutputI2SOct13block_ch1_1stE+0x14>)
    c3ea:	f00c bbb5 	b.w	18b58 <__aeabi_atexit>
    c3ee:	bf00      	nop
    c3f0:	20003338 	.word	0x20003338
    c3f4:	0000b535 	.word	0x0000b535
    c3f8:	200051ac 	.word	0x200051ac

0000c3fc <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE>:
uint16_t  AudioOutputI2SQuad::ch2_offset = 0;
uint16_t  AudioOutputI2SQuad::ch3_offset = 0;
uint16_t  AudioOutputI2SQuad::ch4_offset = 0;
bool AudioOutputI2SQuad::update_responsibility = false;
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*2];
DMAChannel AudioOutputI2SQuad::dma(false);
    c3fc:	4a02      	ldr	r2, [pc, #8]	; (c408 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0xc>)
    c3fe:	4903      	ldr	r1, [pc, #12]	; (c40c <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x10>)
    c400:	4803      	ldr	r0, [pc, #12]	; (c410 <_GLOBAL__sub_I__ZN18AudioOutputI2SQuad13block_ch1_1stE+0x14>)
    c402:	f00c bba9 	b.w	18b58 <__aeabi_atexit>
    c406:	bf00      	nop
    c408:	20003338 	.word	0x20003338
    c40c:	0000b535 	.word	0x0000b535
    c410:	200051cc 	.word	0x200051cc

0000c414 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE>:
audio_block_t * AudioOutputMQS::block_left_2nd = NULL;
audio_block_t * AudioOutputMQS::block_right_2nd = NULL;
uint16_t  AudioOutputMQS::block_left_offset = 0;
uint16_t  AudioOutputMQS::block_right_offset = 0;
bool AudioOutputMQS::update_responsibility = false;
DMAChannel AudioOutputMQS::dma(false);
    c414:	4a02      	ldr	r2, [pc, #8]	; (c420 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0xc>)
    c416:	4903      	ldr	r1, [pc, #12]	; (c424 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x10>)
    c418:	4803      	ldr	r0, [pc, #12]	; (c428 <_GLOBAL__sub_I__ZN14AudioOutputMQS14block_left_1stE+0x14>)
    c41a:	f00c bb9d 	b.w	18b58 <__aeabi_atexit>
    c41e:	bf00      	nop
    c420:	20003338 	.word	0x20003338
    c424:	0000b535 	.word	0x0000b535
    c428:	2000510c 	.word	0x2000510c

0000c42c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211::dma(false);
    c42c:	4a02      	ldr	r2, [pc, #8]	; (c438 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0xc>)
    c42e:	4903      	ldr	r1, [pc, #12]	; (c43c <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x10>)
    c430:	4803      	ldr	r0, [pc, #12]	; (c440 <_GLOBAL__sub_I__ZN17AudioOutputPT821114block_left_1stE+0x14>)
    c432:	f00c bb91 	b.w	18b58 <__aeabi_atexit>
    c436:	bf00      	nop
    c438:	20003338 	.word	0x20003338
    c43c:	0000b535 	.word	0x0000b535
    c440:	200051b4 	.word	0x200051b4

0000c444 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE>:
#if defined(AUDIO_PT8211_OVERSAMPLING)
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES*4];
#else
DMAMEM __attribute__((aligned(32))) static uint32_t i2s_tx_buffer[AUDIO_BLOCK_SAMPLES];
#endif
DMAChannel AudioOutputPT8211_2::dma(false);
    c444:	4a02      	ldr	r2, [pc, #8]	; (c450 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0xc>)
    c446:	4903      	ldr	r1, [pc, #12]	; (c454 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x10>)
    c448:	4803      	ldr	r0, [pc, #12]	; (c458 <_GLOBAL__sub_I__ZN19AudioOutputPT8211_214block_left_1stE+0x14>)
    c44a:	f00c bb85 	b.w	18b58 <__aeabi_atexit>
    c44e:	bf00      	nop
    c450:	20003338 	.word	0x20003338
    c454:	0000b535 	.word	0x0000b535
    c458:	200051d4 	.word	0x200051d4

0000c45c <__tcf_0>:

extern uint8_t analog_write_res;
extern const struct _pwm_pin_info_struct pwm_pin_info[];
volatile audio_block_t * AudioOutputPWM::block = NULL;
DMAMEM __attribute__((aligned(32))) static uint16_t pwm_tx_buffer[2][AUDIO_BLOCK_SAMPLES * 2];
DMAChannel AudioOutputPWM::dma[2];
    c45c:	b510      	push	{r4, lr}
		release();
    c45e:	4c05      	ldr	r4, [pc, #20]	; (c474 <__tcf_0+0x18>)
    c460:	f104 0008 	add.w	r0, r4, #8
    c464:	f008 ff18 	bl	15298 <DMAChannel::release()>
    c468:	4620      	mov	r0, r4
    c46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c46e:	f008 bf13 	b.w	15298 <DMAChannel::release()>
    c472:	bf00      	nop
    c474:	20005114 	.word	0x20005114

0000c478 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE>:
	old_block = (audio_block_t*)block ;  // block is defined as volatile
	block = new_block ;
	__enable_irq();
	if (old_block)
		release (old_block);
}
    c478:	b510      	push	{r4, lr}
		begin();
    c47a:	4c08      	ldr	r4, [pc, #32]	; (c49c <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x24>)
    c47c:	2100      	movs	r1, #0
    c47e:	4620      	mov	r0, r4
    c480:	f008 feb0 	bl	151e4 <DMAChannel::begin(bool)>
    c484:	f104 0008 	add.w	r0, r4, #8
    c488:	2100      	movs	r1, #0
    c48a:	f008 feab 	bl	151e4 <DMAChannel::begin(bool)>
DMAChannel AudioOutputPWM::dma[2];
    c48e:	4a04      	ldr	r2, [pc, #16]	; (c4a0 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x28>)
    c490:	4904      	ldr	r1, [pc, #16]	; (c4a4 <_GLOBAL__sub_I__ZN14AudioOutputPWM21update_responsibilityE+0x2c>)
    c492:	2000      	movs	r0, #0
}
    c494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
DMAChannel AudioOutputPWM::dma[2];
    c498:	f00c bb5e 	b.w	18b58 <__aeabi_atexit>
    c49c:	20005114 	.word	0x20005114
    c4a0:	20003338 	.word	0x20003338
    c4a4:	0000c45d 	.word	0x0000c45d

0000c4a8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE>:
audio_block_t * AudioOutputSPDIF::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF::block_left_offset = 0;
uint16_t  AudioOutputSPDIF::block_right_offset = 0;
bool AudioOutputSPDIF::update_responsibility = false;
DMAChannel AudioOutputSPDIF::dma(false);
    c4a8:	4a02      	ldr	r2, [pc, #8]	; (c4b4 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0xc>)
    c4aa:	4903      	ldr	r1, [pc, #12]	; (c4b8 <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x10>)
    c4ac:	4803      	ldr	r0, [pc, #12]	; (c4bc <_GLOBAL__sub_I__ZN16AudioOutputSPDIF14block_left_1stE+0x14>)
    c4ae:	f00c bb53 	b.w	18b58 <__aeabi_atexit>
    c4b2:	bf00      	nop
    c4b4:	20003338 	.word	0x20003338
    c4b8:	0000b535 	.word	0x0000b535
    c4bc:	20005194 	.word	0x20005194

0000c4c0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE>:
audio_block_t * AudioOutputSPDIF2::block_left_2nd = NULL;
audio_block_t * AudioOutputSPDIF2::block_right_2nd = NULL;
uint16_t  AudioOutputSPDIF2::block_left_offset = 0;
uint16_t  AudioOutputSPDIF2::block_right_offset = 0;
bool AudioOutputSPDIF2::update_responsibility = false;
DMAChannel AudioOutputSPDIF2::dma(false);
    c4c0:	4a02      	ldr	r2, [pc, #8]	; (c4cc <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0xc>)
    c4c2:	4903      	ldr	r1, [pc, #12]	; (c4d0 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x10>)
    c4c4:	4803      	ldr	r0, [pc, #12]	; (c4d4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF214block_left_1stE+0x14>)
    c4c6:	f00c bb47 	b.w	18b58 <__aeabi_atexit>
    c4ca:	bf00      	nop
    c4cc:	20003338 	.word	0x20003338
    c4d0:	0000b535 	.word	0x0000b535
    c4d4:	200051bc 	.word	0x200051bc

0000c4d8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE>:
audio_block_t * AudioOutputSPDIF3::block_left_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_1st = nullptr;
audio_block_t * AudioOutputSPDIF3::block_left_2nd = nullptr;
audio_block_t * AudioOutputSPDIF3::block_right_2nd = nullptr;
bool AudioOutputSPDIF3::update_responsibility = false;
DMAChannel AudioOutputSPDIF3::dma(false);
    c4d8:	4a02      	ldr	r2, [pc, #8]	; (c4e4 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0xc>)
    c4da:	4903      	ldr	r1, [pc, #12]	; (c4e8 <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x10>)
    c4dc:	4803      	ldr	r0, [pc, #12]	; (c4ec <_GLOBAL__sub_I__ZN17AudioOutputSPDIF314block_left_1stE+0x14>)
    c4de:	f00c bb3b 	b.w	18b58 <__aeabi_atexit>
    c4e2:	bf00      	nop
    c4e4:	20003338 	.word	0x20003338
    c4e8:	0000b535 	.word	0x0000b535
    c4ec:	200051c4 	.word	0x200051c4

0000c4f0 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE>:
DMAChannel AudioOutputTDM::dma(false);
    c4f0:	4a02      	ldr	r2, [pc, #8]	; (c4fc <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0xc>)
    c4f2:	4903      	ldr	r1, [pc, #12]	; (c500 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x10>)
    c4f4:	4803      	ldr	r0, [pc, #12]	; (c504 <_GLOBAL__sub_I__ZN14AudioOutputTDM11block_inputE+0x14>)
    c4f6:	f00c bb2f 	b.w	18b58 <__aeabi_atexit>
    c4fa:	bf00      	nop
    c4fc:	20003338 	.word	0x20003338
    c500:	0000b535 	.word	0x0000b535
    c504:	20005124 	.word	0x20005124

0000c508 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE>:
DMAChannel AudioOutputTDM2::dma(false);
    c508:	4a02      	ldr	r2, [pc, #8]	; (c514 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0xc>)
    c50a:	4903      	ldr	r1, [pc, #12]	; (c518 <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x10>)
    c50c:	4803      	ldr	r0, [pc, #12]	; (c51c <_GLOBAL__sub_I__ZN15AudioOutputTDM211block_inputE+0x14>)
    c50e:	f00c bb23 	b.w	18b58 <__aeabi_atexit>
    c512:	bf00      	nop
    c514:	20003338 	.word	0x20003338
    c518:	0000b535 	.word	0x0000b535
    c51c:	2000516c 	.word	0x2000516c

0000c520 <BandLimitedWaveform::lookup(int)>:
{
  int off = offset >> GUARD_BITS ;
  int frac = offset & (GUARD-1) ;

  int32_t a, b ;
  if (off < N/2)   // handle odd symmetry by reflecting table
    c520:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
  int off = offset >> GUARD_BITS ;
    c524:	ea4f 2321 	mov.w	r3, r1, asr #8
  int frac = offset & (GUARD-1) ;
    c528:	fa5f fc81 	uxtb.w	ip, r1
  if (off < N/2)   // handle odd symmetry by reflecting table
    c52c:	da11      	bge.n	c552 <BandLimitedWaveform::lookup(int)+0x32>
  {
    a = step_table [off+1] ;
    c52e:	490f      	ldr	r1, [pc, #60]	; (c56c <BandLimitedWaveform::lookup(int)+0x4c>)
    c530:	1c5a      	adds	r2, r3, #1
    b = step_table [off+2] ;
    c532:	3302      	adds	r3, #2
    a = step_table [off+1] ;
    c534:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
    b = step_table [off+2] ;
    c538:	f931 0013 	ldrsh.w	r0, [r1, r3, lsl #1]
  else
  {
    a = - step_table [N-off] ;
    b = - step_table [N-off-1] ;
  }
  return  BASE_AMPLITUDE + ((frac * b + (GUARD - frac) * a + HALF_GUARD) >> GUARD_BITS) ; // interpolated
    c53c:	f5cc 7380 	rsb	r3, ip, #256	; 0x100
    c540:	fb0c f000 	mul.w	r0, ip, r0
    c544:	fb02 0003 	mla	r0, r2, r3, r0
    c548:	3080      	adds	r0, #128	; 0x80
    c54a:	1200      	asrs	r0, r0, #8
}
    c54c:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    c550:	4770      	bx	lr
    b = - step_table [N-off-1] ;
    c552:	f240 11ff 	movw	r1, #511	; 0x1ff
    a = - step_table [N-off] ;
    c556:	4805      	ldr	r0, [pc, #20]	; (c56c <BandLimitedWaveform::lookup(int)+0x4c>)
    c558:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
    b = - step_table [N-off-1] ;
    c55c:	1ac9      	subs	r1, r1, r3
    a = - step_table [N-off] ;
    c55e:	f930 2012 	ldrsh.w	r2, [r0, r2, lsl #1]
    b = - step_table [N-off-1] ;
    c562:	f930 0011 	ldrsh.w	r0, [r0, r1, lsl #1]
    a = - step_table [N-off] ;
    c566:	4252      	negs	r2, r2
    b = - step_table [N-off-1] ;
    c568:	4240      	negs	r0, r0
    c56a:	e7e7      	b.n	c53c <BandLimitedWaveform::lookup(int)+0x1c>
    c56c:	20002974 	.word	0x20002974

0000c570 <BandLimitedWaveform::insert_step(int, bool, int)>:

// create a new step, apply its past waveform into the cyclic sample buffer
// and add a step_state object into active list so it can be added for the future samples
void BandLimitedWaveform::insert_step (int offset, bool rising, int i)
{
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    c570:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
{
    c574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c578:	460f      	mov	r7, r1
    c57a:	4606      	mov	r6, r0
    c57c:	4690      	mov	r8, r2
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    c57e:	dc27      	bgt.n	c5d0 <BandLimitedWaveform::insert_step(int, bool, int)+0x60>
    c580:	461d      	mov	r5, r3
    c582:	460c      	mov	r4, r1
    c584:	e005      	b.n	c592 <BandLimitedWaveform::insert_step(int, bool, int)+0x22>
  {
    if (offset >= 0)
      cyclic [i & 15] += rising ? lookup (offset) : -lookup (offset) ;
    offset += SCALE<<GUARD_BITS ;
    c586:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    i ++ ;
    c58a:	3501      	adds	r5, #1
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    c58c:	f5b4 4f70 	cmp.w	r4, #61440	; 0xf000
    c590:	dc17      	bgt.n	c5c2 <BandLimitedWaveform::insert_step(int, bool, int)+0x52>
    if (offset >= 0)
    c592:	2c00      	cmp	r4, #0
    c594:	dbf7      	blt.n	c586 <BandLimitedWaveform::insert_step(int, bool, int)+0x16>
      cyclic [i & 15] += rising ? lookup (offset) : -lookup (offset) ;
    c596:	4621      	mov	r1, r4
    c598:	4630      	mov	r0, r6
    c59a:	f1b8 0f00 	cmp.w	r8, #0
    c59e:	d025      	beq.n	c5ec <BandLimitedWaveform::insert_step(int, bool, int)+0x7c>
    c5a0:	f7ff ffbe 	bl	c520 <BandLimitedWaveform::lookup(int)>
    c5a4:	f005 030f 	and.w	r3, r5, #15
    offset += SCALE<<GUARD_BITS ;
    c5a8:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
    i ++ ;
    c5ac:	3501      	adds	r5, #1
    c5ae:	eb06 0383 	add.w	r3, r6, r3, lsl #2
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    c5b2:	f5b4 4f70 	cmp.w	r4, #61440	; 0xf000
      cyclic [i & 15] += rising ? lookup (offset) : -lookup (offset) ;
    c5b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    c5ba:	4410      	add	r0, r2
    c5bc:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
  while (offset <= (N/2-SCALE)<<GUARD_BITS)
    c5c0:	dde7      	ble.n	c592 <BandLimitedWaveform::insert_step(int, bool, int)+0x22>
    c5c2:	f5c7 4270 	rsb	r2, r7, #61440	; 0xf000
    c5c6:	4b0b      	ldr	r3, [pc, #44]	; (c5f4 <BandLimitedWaveform::insert_step(int, bool, int)+0x84>)
    c5c8:	f507 5780 	add.w	r7, r7, #4096	; 0x1000
    c5cc:	4013      	ands	r3, r2
    offset += SCALE<<GUARD_BITS ;
    c5ce:	441f      	add	r7, r3
  }

  states[newptr].offset = offset ;
    c5d0:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    c5d4:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
  states[newptr].positive = rising ;
  newptr = (newptr+1) & PTRMASK ;
    c5d8:	3301      	adds	r3, #1
    c5da:	f003 031f 	and.w	r3, r3, #31
  states[newptr].offset = offset ;
    c5de:	6097      	str	r7, [r2, #8]
  states[newptr].positive = rising ;
    c5e0:	f882 800c 	strb.w	r8, [r2, #12]
  newptr = (newptr+1) & PTRMASK ;
    c5e4:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
}
    c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      cyclic [i & 15] += rising ? lookup (offset) : -lookup (offset) ;
    c5ec:	f7ff ff98 	bl	c520 <BandLimitedWaveform::lookup(int)>
    c5f0:	4240      	negs	r0, r0
    c5f2:	e7d7      	b.n	c5a4 <BandLimitedWaveform::insert_step(int, bool, int)+0x34>
    c5f4:	fffff000 	.word	0xfffff000

0000c5f8 <BandLimitedWaveform::process_active_steps(unsigned long)>:

// process all active steps for current sample, basically generating the waveform portion
// due only to steps
// square waves use this directly.
int32_t BandLimitedWaveform::process_active_steps (uint32_t new_phase)
{
    c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t sample = dc_offset ;
  
  int step_count = (newptr - delptr) & PTRMASK ;
    c5fc:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
    c600:	b083      	sub	sp, #12
  int step_count = (newptr - delptr) & PTRMASK ;
    c602:	f8d0 810c 	ldr.w	r8, [r0, #268]	; 0x10c
  int32_t sample = dc_offset ;
    c606:	f8d0 a004 	ldr.w	sl, [r0, #4]
  int step_count = (newptr - delptr) & PTRMASK ;
    c60a:	eba4 0208 	sub.w	r2, r4, r8
    c60e:	9401      	str	r4, [sp, #4]
  if (step_count > 0)        // for any steps in-flight we sum in table entry and update its state
    c610:	06d3      	lsls	r3, r2, #27
    c612:	d03d      	beq.n	c690 <BandLimitedWaveform::process_active_steps(unsigned long)+0x98>
    c614:	4606      	mov	r6, r0
    dc_offset += positive ? 2*BASE_AMPLITUDE : -2*BASE_AMPLITUDE ;
    c616:	f8df 9080 	ldr.w	r9, [pc, #128]	; c698 <BandLimitedWaveform::process_active_steps(unsigned long)+0xa0>
  {
    int i = newptr ;
    do
    {
      i = (i-1) & PTRMASK ;
    c61a:	3c01      	subs	r4, #1
  int32_t entry = lookup (off) ;
    c61c:	4630      	mov	r0, r6
      i = (i-1) & PTRMASK ;
    c61e:	f004 041f 	and.w	r4, r4, #31
  int off = states[i].offset ;
    c622:	eb06 07c4 	add.w	r7, r6, r4, lsl #3
    c626:	68bd      	ldr	r5, [r7, #8]
  bool positive = states[i].positive ;
    c628:	f897 b00c 	ldrb.w	fp, [r7, #12]
  int32_t entry = lookup (off) ;
    c62c:	4629      	mov	r1, r5
  off += SCALE<<GUARD_BITS ;
    c62e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
  int32_t entry = lookup (off) ;
    c632:	f7ff ff75 	bl	c520 <BandLimitedWaveform::lookup(int)>
  if (off >= N<<GUARD_BITS)             // at end of step table we alter dc_offset to extend the step into future
    c636:	f5b5 3f00 	cmp.w	r5, #131072	; 0x20000
  states[i].offset = off ;  // update offset in table for next sample
    c63a:	60bd      	str	r5, [r7, #8]
  if (off >= N<<GUARD_BITS)             // at end of step table we alter dc_offset to extend the step into future
    c63c:	db08      	blt.n	c650 <BandLimitedWaveform::process_active_steps(unsigned long)+0x58>
    dc_offset += positive ? 2*BASE_AMPLITUDE : -2*BASE_AMPLITUDE ;
    c63e:	f1bb 0f00 	cmp.w	fp, #0
    c642:	6872      	ldr	r2, [r6, #4]
    c644:	bf14      	ite	ne
    c646:	f44f 4140 	movne.w	r1, #49152	; 0xc000
    c64a:	4649      	moveq	r1, r9
    c64c:	440a      	add	r2, r1
    c64e:	6072      	str	r2, [r6, #4]
  return positive ? entry : -entry ;
    c650:	f1bb 0f00 	cmp.w	fp, #0
    c654:	d100      	bne.n	c658 <BandLimitedWaveform::process_active_steps(unsigned long)+0x60>
    c656:	4240      	negs	r0, r0
      sample += process_step (i) ;
    } while (i != delptr) ;
    c658:	45a0      	cmp	r8, r4
      sample += process_step (i) ;
    c65a:	4482      	add	sl, r0
    } while (i != delptr) ;
    c65c:	d1dd      	bne.n	c61a <BandLimitedWaveform::process_active_steps(unsigned long)+0x22>
    if (states[delptr].offset >= N<<GUARD_BITS)  // remove any finished entries from the buffer.
    c65e:	f108 0801 	add.w	r8, r8, #1
    c662:	f856 2038 	ldr.w	r2, [r6, r8, lsl #3]
    c666:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
    c66a:	db11      	blt.n	c690 <BandLimitedWaveform::process_active_steps(unsigned long)+0x98>
    {
      delptr = (delptr+1) & PTRMASK ;
    c66c:	f008 021f 	and.w	r2, r8, #31
      // can be upto two steps per sample now for pulses
      if (newptr != delptr && states[delptr].offset >= N<<GUARD_BITS)
    c670:	9b01      	ldr	r3, [sp, #4]
    c672:	4293      	cmp	r3, r2
      delptr = (delptr+1) & PTRMASK ;
    c674:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
      if (newptr != delptr && states[delptr].offset >= N<<GUARD_BITS)
    c678:	d00a      	beq.n	c690 <BandLimitedWaveform::process_active_steps(unsigned long)+0x98>
    c67a:	f102 0801 	add.w	r8, r2, #1
    c67e:	f856 2038 	ldr.w	r2, [r6, r8, lsl #3]
    c682:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
    c686:	db03      	blt.n	c690 <BandLimitedWaveform::process_active_steps(unsigned long)+0x98>
	delptr = (delptr+1) & PTRMASK ;
    c688:	f008 021f 	and.w	r2, r8, #31
    c68c:	f8c6 210c 	str.w	r2, [r6, #268]	; 0x10c
    }
  }
  return sample ;
}
    c690:	4650      	mov	r0, sl
    c692:	b003      	add	sp, #12
    c694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c698:	ffff4000 	.word	0xffff4000

0000c69c <BandLimitedWaveform::new_step_check_square(unsigned long, int)>:
}

// Check for new steps using the phase update for the current sample for a square wave
void BandLimitedWaveform::new_step_check_square (uint32_t new_phase, int i)
{
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    c69c:	2900      	cmp	r1, #0
{
    c69e:	b538      	push	{r3, r4, r5, lr}
    c6a0:	4604      	mov	r4, r0
    c6a2:	4615      	mov	r5, r2
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    c6a4:	db03      	blt.n	c6ae <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x12>
    {
      insert_step (- offset, false, i) ;
      pulse_state = false ;
    }
  }
  else if (new_phase < DEG180 && phase_word >= DEG180) // detect wrap around, rising step
    c6a6:	6802      	ldr	r2, [r0, #0]
    c6a8:	2a00      	cmp	r2, #0
    c6aa:	db20      	blt.n	c6ee <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x52>
    {
      insert_step (- offset, true, i) ;
      pulse_state = true ;
    }
  }
}
    c6ac:	bd38      	pop	{r3, r4, r5, pc}
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    c6ae:	6803      	ldr	r3, [r0, #0]
    c6b0:	2b00      	cmp	r3, #0
    c6b2:	dbfb      	blt.n	c6ac <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (sampled_width - phase_word) / (new_phase - phase_word)) ;
    c6b4:	f8d0 0154 	ldr.w	r0, [r0, #340]	; 0x154
    c6b8:	1aca      	subs	r2, r1, r3
    c6ba:	1ac1      	subs	r1, r0, r3
    c6bc:	2300      	movs	r3, #0
    c6be:	0308      	lsls	r0, r1, #12
    c6c0:	0d09      	lsrs	r1, r1, #20
    c6c2:	f013 fc05 	bl	1fed0 <__aeabi_uldivmod>
      offset -- ;
    c6c6:	f640 71ff 	movw	r1, #4095	; 0xfff
    if (pulse_state) // guard against two falling steps in a row (if pulse width changing for instance)
    c6ca:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
      offset -- ;
    c6ce:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    c6d2:	bf18      	it	ne
    c6d4:	4601      	movne	r1, r0
    if (pulse_state) // guard against two falling steps in a row (if pulse width changing for instance)
    c6d6:	2b00      	cmp	r3, #0
    c6d8:	d0e8      	beq.n	c6ac <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
      insert_step (- offset, false, i) ;
    c6da:	462b      	mov	r3, r5
    c6dc:	2200      	movs	r2, #0
    c6de:	4249      	negs	r1, r1
    c6e0:	4620      	mov	r0, r4
    c6e2:	f7ff ff45 	bl	c570 <BandLimitedWaveform::insert_step(int, bool, int)>
      pulse_state = false ;
    c6e6:	2300      	movs	r3, #0
    c6e8:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
    c6ec:	bd38      	pop	{r3, r4, r5, pc}
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (- phase_word) / (new_phase - phase_word)) ;
    c6ee:	f1c2 0c00 	rsb	ip, r2, #0
    c6f2:	2300      	movs	r3, #0
    c6f4:	1a8a      	subs	r2, r1, r2
    c6f6:	ea4f 300c 	mov.w	r0, ip, lsl #12
    c6fa:	ea4f 511c 	mov.w	r1, ip, lsr #20
    c6fe:	f013 fbe7 	bl	1fed0 <__aeabi_uldivmod>
      offset -- ;
    c702:	f640 71ff 	movw	r1, #4095	; 0xfff
    if (!pulse_state) // guard against two rising steps in a row (if pulse width changing for instance)
    c706:	f894 3150 	ldrb.w	r3, [r4, #336]	; 0x150
      offset -- ;
    c70a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    c70e:	bf18      	it	ne
    c710:	4601      	movne	r1, r0
    if (!pulse_state) // guard against two rising steps in a row (if pulse width changing for instance)
    c712:	2b00      	cmp	r3, #0
    c714:	d1ca      	bne.n	c6ac <BandLimitedWaveform::new_step_check_square(unsigned long, int)+0x10>
      insert_step (- offset, true, i) ;
    c716:	462b      	mov	r3, r5
    c718:	2201      	movs	r2, #1
    c71a:	4249      	negs	r1, r1
    c71c:	4620      	mov	r0, r4
    c71e:	f7ff ff27 	bl	c570 <BandLimitedWaveform::insert_step(int, bool, int)>
      pulse_state = true ;
    c722:	2301      	movs	r3, #1
    c724:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
}
    c728:	bd38      	pop	{r3, r4, r5, pc}
    c72a:	bf00      	nop

0000c72c <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)>:
// Checking for new steps for pulse waveform has to deal with changing frequency and pulse width and
// not letting a pulse glitch out of existence as these change across a single period of the waveform
// now we detect the rising edge just like for a square wave and use that to sample the pulse width
// parameter, which then has to be checked against the instantaneous frequency every sample.
void BandLimitedWaveform::new_step_check_pulse (uint32_t new_phase, uint32_t pulse_width, int i)
{
    c72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c730:	460d      	mov	r5, r1
  if (pulse_state && phase_word < sampled_width && (new_phase >= sampled_width || new_phase < phase_word))  // falling edge
    c732:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
{
    c736:	4604      	mov	r4, r0
    c738:	4617      	mov	r7, r2
    c73a:	461e      	mov	r6, r3
  if (pulse_state && phase_word < sampled_width && (new_phase >= sampled_width || new_phase < phase_word))  // falling edge
    c73c:	b1e9      	cbz	r1, c77a <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x4e>
    c73e:	6802      	ldr	r2, [r0, #0]
    c740:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    c744:	428a      	cmp	r2, r1
    c746:	d251      	bcs.n	c7ec <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc0>
    c748:	42aa      	cmp	r2, r5
    c74a:	d801      	bhi.n	c750 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0x24>
    c74c:	42a9      	cmp	r1, r5
    c74e:	d84d      	bhi.n	c7ec <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc0>
  {
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (sampled_width - phase_word) / (new_phase - phase_word)) ;
    c750:	1a89      	subs	r1, r1, r2
    c752:	2300      	movs	r3, #0
    c754:	1aaa      	subs	r2, r5, r2
    c756:	0308      	lsls	r0, r1, #12
    c758:	0d09      	lsrs	r1, r1, #20
    c75a:	f013 fbb9 	bl	1fed0 <__aeabi_uldivmod>
    if (offset == SCALE<<GUARD_BITS)
    c75e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
      offset -- ;
    insert_step (- offset, false, i) ;
    c762:	4633      	mov	r3, r6
    c764:	f04f 0200 	mov.w	r2, #0
    c768:	bf14      	ite	ne
    c76a:	4241      	negne	r1, r0
    c76c:	4920      	ldreq	r1, [pc, #128]	; (c7f0 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc4>)
    c76e:	4620      	mov	r0, r4
    c770:	f7ff fefe 	bl	c570 <BandLimitedWaveform::insert_step(int, bool, int)>
    pulse_state = false ;
    c774:	2300      	movs	r3, #0
    c776:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
  }
  if ((!pulse_state) && phase_word >= DEG180 && new_phase < DEG180) // detect wrap around, rising step
    c77a:	f8d4 8000 	ldr.w	r8, [r4]
    c77e:	f1b8 0f00 	cmp.w	r8, #0
    c782:	da33      	bge.n	c7ec <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc0>
    c784:	2d00      	cmp	r5, #0
    c786:	db31      	blt.n	c7ec <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc0>
  {
    // sample the pulse width value so its not changing under our feet later in cycle due to modulation
    sampled_width = pulse_width ;

    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (- phase_word) / (new_phase - phase_word)) ;
    c788:	f1c8 0100 	rsb	r1, r8, #0
    c78c:	eba5 0908 	sub.w	r9, r5, r8
    c790:	2300      	movs	r3, #0
    sampled_width = pulse_width ;
    c792:	f8c4 7154 	str.w	r7, [r4, #340]	; 0x154
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (- phase_word) / (new_phase - phase_word)) ;
    c796:	0308      	lsls	r0, r1, #12
    c798:	464a      	mov	r2, r9
    c79a:	0d09      	lsrs	r1, r1, #20
    c79c:	f013 fb98 	bl	1fed0 <__aeabi_uldivmod>
    if (offset == SCALE<<GUARD_BITS)
    c7a0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
      offset -- ;
    insert_step (- offset, true, i) ;
    c7a4:	4633      	mov	r3, r6
    c7a6:	f04f 0201 	mov.w	r2, #1
    c7aa:	bf14      	ite	ne
    c7ac:	4241      	negne	r1, r0
    c7ae:	4910      	ldreq	r1, [pc, #64]	; (c7f0 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc4>)
    c7b0:	4620      	mov	r0, r4
    c7b2:	f7ff fedd 	bl	c570 <BandLimitedWaveform::insert_step(int, bool, int)>
    pulse_state = true ;
    c7b6:	2301      	movs	r3, #1
    
    if (pulse_state && new_phase >= sampled_width) // detect falling step directly after a rising edge
    c7b8:	42bd      	cmp	r5, r7
    pulse_state = true ;
    c7ba:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
    if (pulse_state && new_phase >= sampled_width) // detect falling step directly after a rising edge
    c7be:	d315      	bcc.n	c7ec <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc0>
    //if (new_phase - sampled_width < DEG180) // detect falling step directly after a rising edge
    {
      int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (sampled_width - phase_word) / (new_phase - phase_word)) ;
    c7c0:	eba7 0108 	sub.w	r1, r7, r8
    c7c4:	464a      	mov	r2, r9
    c7c6:	2300      	movs	r3, #0
    c7c8:	0308      	lsls	r0, r1, #12
    c7ca:	0d09      	lsrs	r1, r1, #20
    c7cc:	f013 fb80 	bl	1fed0 <__aeabi_uldivmod>
      if (offset == SCALE<<GUARD_BITS)
    c7d0:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
	offset -- ;
      insert_step (- offset, false, i) ;
    c7d4:	4633      	mov	r3, r6
    c7d6:	f04f 0200 	mov.w	r2, #0
    c7da:	bf14      	ite	ne
    c7dc:	4241      	negne	r1, r0
    c7de:	4904      	ldreq	r1, [pc, #16]	; (c7f0 <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)+0xc4>)
    c7e0:	4620      	mov	r0, r4
    c7e2:	f7ff fec5 	bl	c570 <BandLimitedWaveform::insert_step(int, bool, int)>
      pulse_state = false ;
    c7e6:	2300      	movs	r3, #0
    c7e8:	f884 3150 	strb.w	r3, [r4, #336]	; 0x150
    }
  }
}
    c7ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c7f0:	fffff001 	.word	0xfffff001

0000c7f4 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)>:
  
// the generation function pushd new sample into cyclic buffer, having taken out the oldest entry
// to return.  The output is thus 16 samples behind, which allows the non-casual step function to
// work in real time.
int16_t BandLimitedWaveform::generate_sawtooth (uint32_t new_phase, int i)
{
    c7f4:	b570      	push	{r4, r5, r6, lr}
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    c7f6:	1e0e      	subs	r6, r1, #0
{
    c7f8:	4605      	mov	r5, r0
    c7fa:	4614      	mov	r4, r2
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    c7fc:	db1b      	blt.n	c836 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)+0x42>
  int32_t sample = process_active_steps (new_phase) ;
    c7fe:	f7ff fefb 	bl	c5f8 <BandLimitedWaveform::process_active_steps(unsigned long)>
  sample += (int16_t) ((((uint64_t)phase_word * (2*BASE_AMPLITUDE)) >> 32) - BASE_AMPLITUDE) ;  // generate the sloped part of the wave
    c802:	682a      	ldr	r2, [r5, #0]
    c804:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  if (new_phase < DEG180 && phase_word >= DEG180) // detect wrap around, correct dc offset
    c808:	2a00      	cmp	r2, #0
  sample += (int16_t) ((((uint64_t)phase_word * (2*BASE_AMPLITUDE)) >> 32) - BASE_AMPLITUDE) ;  // generate the sloped part of the wave
    c80a:	fba2 1303 	umull	r1, r3, r2, r3
    c80e:	f5a3 43c0 	sub.w	r3, r3, #24576	; 0x6000
    c812:	fa00 f383 	sxtah	r3, r0, r3
  if (new_phase < DEG180 && phase_word >= DEG180) // detect wrap around, correct dc offset
    c816:	db09      	blt.n	c82c <BandLimitedWaveform::generate_sawtooth(unsigned long, int)+0x38>
  new_step_check_saw (new_phase, i) ;
  int32_t val = process_active_steps_saw (new_phase) ;
  int16_t sample = (int16_t) cyclic [i&15] ;
    c818:	f004 040f 	and.w	r4, r4, #15
    c81c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    c820:	f9b4 0110 	ldrsh.w	r0, [r4, #272]	; 0x110
  cyclic [i&15] = val ;
    c824:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  phase_word = new_phase ;
    c828:	602e      	str	r6, [r5, #0]
  return sample ;
}
    c82a:	bd70      	pop	{r4, r5, r6, pc}
    dc_offset += 2*BASE_AMPLITUDE ;
    c82c:	686a      	ldr	r2, [r5, #4]
    c82e:	f502 4240 	add.w	r2, r2, #49152	; 0xc000
    c832:	606a      	str	r2, [r5, #4]
    c834:	e7f0      	b.n	c818 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)+0x24>
  if (new_phase >= DEG180 && phase_word < DEG180) // detect falling step
    c836:	6802      	ldr	r2, [r0, #0]
    c838:	2a00      	cmp	r2, #0
    c83a:	db12      	blt.n	c862 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)+0x6e>
    int32_t offset = (int32_t) ((uint64_t) (SCALE<<GUARD_BITS) * (DEG180 - phase_word) / (new_phase - phase_word)) ;
    c83c:	f1c2 4100 	rsb	r1, r2, #2147483648	; 0x80000000
    c840:	2300      	movs	r3, #0
    c842:	1ab2      	subs	r2, r6, r2
    c844:	0308      	lsls	r0, r1, #12
    c846:	0d09      	lsrs	r1, r1, #20
    c848:	f013 fb42 	bl	1fed0 <__aeabi_uldivmod>
    if (offset == SCALE<<GUARD_BITS)
    c84c:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    insert_step (- offset, false, i) ;
    c850:	4623      	mov	r3, r4
    c852:	f04f 0200 	mov.w	r2, #0
    c856:	bf14      	ite	ne
    c858:	4241      	negne	r1, r0
    c85a:	4909      	ldreq	r1, [pc, #36]	; (c880 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)+0x8c>)
    c85c:	4628      	mov	r0, r5
    c85e:	f7ff fe87 	bl	c570 <BandLimitedWaveform::insert_step(int, bool, int)>
  int32_t sample = process_active_steps (new_phase) ;
    c862:	4631      	mov	r1, r6
    c864:	4628      	mov	r0, r5
    c866:	f7ff fec7 	bl	c5f8 <BandLimitedWaveform::process_active_steps(unsigned long)>
  sample += (int16_t) ((((uint64_t)phase_word * (2*BASE_AMPLITUDE)) >> 32) - BASE_AMPLITUDE) ;  // generate the sloped part of the wave
    c86a:	682a      	ldr	r2, [r5, #0]
    c86c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
    c870:	fba2 2303 	umull	r2, r3, r2, r3
    c874:	f5a3 43c0 	sub.w	r3, r3, #24576	; 0x6000
    c878:	fa00 f383 	sxtah	r3, r0, r3
  if (new_phase < DEG180 && phase_word >= DEG180) // detect wrap around, correct dc offset
    c87c:	e7cc      	b.n	c818 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)+0x24>
    c87e:	bf00      	nop
    c880:	fffff001 	.word	0xfffff001

0000c884 <AudioSynthWaveform::update()>:
	if (magnitude == 0) {
    c884:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
    c886:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c88a:	4605      	mov	r5, r0
    c88c:	b085      	sub	sp, #20
	ph = phase_accumulator + phase_offset;
    c88e:	6a07      	ldr	r7, [r0, #32]
    c890:	e9d0 4606 	ldrd	r4, r6, [r0, #24]
	if (magnitude == 0) {
    c894:	b92b      	cbnz	r3, c8a2 <AudioSynthWaveform::update()+0x1e>
		phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    c896:	eb04 14c6 	add.w	r4, r4, r6, lsl #7
    c89a:	6184      	str	r4, [r0, #24]
}
    c89c:	b005      	add	sp, #20
    c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	block = allocate();
    c8a2:	f008 fac3 	bl	14e2c <AudioStream::allocate()>
	if (!block) {
    c8a6:	9000      	str	r0, [sp, #0]
    c8a8:	2800      	cmp	r0, #0
    c8aa:	d058      	beq.n	c95e <AudioSynthWaveform::update()+0xda>
	ph = phase_accumulator + phase_offset;
    c8ac:	19e3      	adds	r3, r4, r7
    c8ae:	9301      	str	r3, [sp, #4]
	bp = block->data;
    c8b0:	9b00      	ldr	r3, [sp, #0]
    c8b2:	1d1c      	adds	r4, r3, #4
	switch(tone_type) {
    c8b4:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
    c8b8:	2b0c      	cmp	r3, #12
    c8ba:	d82a      	bhi.n	c912 <AudioSynthWaveform::update()+0x8e>
    c8bc:	e8df f013 	tbh	[pc, r3, lsl #1]
    c8c0:	007a0088 	.word	0x007a0088
    c8c4:	00a6000d 	.word	0x00a6000d
    c8c8:	00eb00c6 	.word	0x00eb00c6
    c8cc:	01140105 	.word	0x01140105
    c8d0:	0054012d 	.word	0x0054012d
    c8d4:	016d0054 	.word	0x016d0054
    c8d8:	0193      	.short	0x0193
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    c8da:	6a68      	ldr	r0, [r5, #36]	; 0x24
    c8dc:	f320 004f 	ssat	r0, #16, r0, asr #1
	return out;
    c8e0:	9a00      	ldr	r2, [sp, #0]
				*bp++ = -magnitude15;
    c8e2:	f1c0 0c00 	rsb	ip, r0, #0
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
    c8e6:	b200      	sxth	r0, r0
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c8e8:	1d93      	adds	r3, r2, #6
    c8ea:	f502 7e83 	add.w	lr, r2, #262	; 0x106
				*bp++ = -magnitude15;
    c8ee:	fa0f fc8c 	sxth.w	ip, ip
	ph = phase_accumulator + phase_offset;
    c8f2:	9a01      	ldr	r2, [sp, #4]
				*bp++ = -magnitude15;
    c8f4:	2a00      	cmp	r2, #0
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c8f6:	f103 0302 	add.w	r3, r3, #2
			ph += inc;
    c8fa:	4432      	add	r2, r6
				*bp++ = -magnitude15;
    c8fc:	bfac      	ite	ge
    c8fe:	4601      	movge	r1, r0
    c900:	4661      	movlt	r1, ip
    c902:	f823 1c04 	strh.w	r1, [r3, #-4]
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c906:	459e      	cmp	lr, r3
    c908:	d1f4      	bne.n	c8f4 <AudioSynthWaveform::update()+0x70>
			ph += inc;
    c90a:	9b01      	ldr	r3, [sp, #4]
    c90c:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    c910:	9301      	str	r3, [sp, #4]
	phase_accumulator = ph - phase_offset;
    c912:	6a2b      	ldr	r3, [r5, #32]
    c914:	9a01      	ldr	r2, [sp, #4]
    c916:	1ad2      	subs	r2, r2, r3
	if (tone_offset) {
    c918:	f9b5 3034 	ldrsh.w	r3, [r5, #52]	; 0x34
	phase_accumulator = ph - phase_offset;
    c91c:	61aa      	str	r2, [r5, #24]
	if (tone_offset) {
    c91e:	b17b      	cbz	r3, c940 <AudioSynthWaveform::update()+0xbc>
		end = bp + AUDIO_BLOCK_SAMPLES;
    c920:	9a00      	ldr	r2, [sp, #0]
    c922:	f502 7182 	add.w	r1, r2, #260	; 0x104
    c926:	461a      	mov	r2, r3
    c928:	e001      	b.n	c92e <AudioSynthWaveform::update()+0xaa>
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
    c92a:	f9b5 2034 	ldrsh.w	r2, [r5, #52]	; 0x34
			val1 = *bp;
    c92e:	f9b4 3000 	ldrsh.w	r3, [r4]
			*bp++ = signed_saturate_rshift(val1 + tone_offset, 16, 0);
    c932:	4413      	add	r3, r2
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    c934:	f303 030f 	ssat	r3, #16, r3
    c938:	f824 3b02 	strh.w	r3, [r4], #2
		} while (bp < end);
    c93c:	42a1      	cmp	r1, r4
    c93e:	d1f4      	bne.n	c92a <AudioSynthWaveform::update()+0xa6>
	transmit(block, 0);
    c940:	9c00      	ldr	r4, [sp, #0]
    c942:	4628      	mov	r0, r5
    c944:	2200      	movs	r2, #0
    c946:	4621      	mov	r1, r4
    c948:	f008 faee 	bl	14f28 <AudioStream::transmit(audio_block_struct*, unsigned char)>
	release(block);
    c94c:	4620      	mov	r0, r4
}
    c94e:	b005      	add	sp, #20
    c950:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	release(block);
    c954:	f008 bac0 	b.w	14ed8 <AudioStream::release(audio_block_struct*)>
			release(block);
    c958:	9800      	ldr	r0, [sp, #0]
    c95a:	f008 fabd 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
			phase_accumulator += inc * AUDIO_BLOCK_SAMPLES;
    c95e:	69ab      	ldr	r3, [r5, #24]
    c960:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    c964:	61ab      	str	r3, [r5, #24]
			return;
    c966:	e799      	b.n	c89c <AudioSynthWaveform::update()+0x18>
    c968:	9b00      	ldr	r3, [sp, #0]
		  int16_t val = band_limit_waveform.generate_sawtooth (new_ph, i) ;
    c96a:	f105 0938 	add.w	r9, r5, #56	; 0x38
	ph = phase_accumulator + phase_offset;
    c96e:	f8dd b004 	ldr.w	fp, [sp, #4]
		for (i = 0 ; i < AUDIO_BLOCK_SAMPLES; i++)
    c972:	f04f 0800 	mov.w	r8, #0
    c976:	f103 0a06 	add.w	sl, r3, #6
    c97a:	e00b      	b.n	c994 <AudioSynthWaveform::update()+0x110>
		    *bp++ = (val * magnitude) >> 16 ;
    c97c:	fb02 f000 	mul.w	r0, r2, r0
    c980:	1403      	asrs	r3, r0, #16
		for (i = 0 ; i < AUDIO_BLOCK_SAMPLES; i++)
    c982:	f108 0801 	add.w	r8, r8, #1
    c986:	f10a 0a02 	add.w	sl, sl, #2
    c98a:	f82a 3c04 	strh.w	r3, [sl, #-4]
    c98e:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    c992:	d0ba      	beq.n	c90a <AudioSynthWaveform::update()+0x86>
		  uint32_t new_ph = ph + inc ;
    c994:	44b3      	add	fp, r6
		  int16_t val = band_limit_waveform.generate_sawtooth (new_ph, i) ;
    c996:	4642      	mov	r2, r8
    c998:	4648      	mov	r0, r9
    c99a:	4659      	mov	r1, fp
    c99c:	f7ff ff2a 	bl	c7f4 <BandLimitedWaveform::generate_sawtooth(unsigned long, int)>
		  if (tone_type == WAVEFORM_BANDLIMIT_SAWTOOTH_REVERSE)
    c9a0:	f9b5 3032 	ldrsh.w	r3, [r5, #50]	; 0x32
		    *bp++ = (val * -magnitude) >> 16 ;
    c9a4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
		  if (tone_type == WAVEFORM_BANDLIMIT_SAWTOOTH_REVERSE)
    c9a6:	2b0a      	cmp	r3, #10
    c9a8:	d1e8      	bne.n	c97c <AudioSynthWaveform::update()+0xf8>
		    *bp++ = (val * -magnitude) >> 16 ;
    c9aa:	4252      	negs	r2, r2
    c9ac:	fb00 f202 	mul.w	r2, r0, r2
    c9b0:	1413      	asrs	r3, r2, #16
    c9b2:	e7e6      	b.n	c982 <AudioSynthWaveform::update()+0xfe>
    c9b4:	9b00      	ldr	r3, [sp, #0]
			*bp++ = signed_multiply_32x16t(magnitude, ph);
    c9b6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    c9b8:	f503 7082 	add.w	r0, r3, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    c9bc:	9a01      	ldr	r2, [sp, #4]
	bp = block->data;
    c9be:	4623      	mov	r3, r4
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    c9c0:	fb37 f112 	smulwt	r1, r7, r2
			*bp++ = signed_multiply_32x16t(magnitude, ph);
    c9c4:	f823 1b02 	strh.w	r1, [r3], #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c9c8:	4298      	cmp	r0, r3
			ph += inc;
    c9ca:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    c9cc:	d1f8      	bne.n	c9c0 <AudioSynthWaveform::update()+0x13c>
    c9ce:	e79c      	b.n	c90a <AudioSynthWaveform::update()+0x86>
    c9d0:	9b00      	ldr	r3, [sp, #0]
	bp = block->data;
    c9d2:	4621      	mov	r1, r4
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    c9d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    c9d6:	f503 7c82 	add.w	ip, r3, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    c9da:	9a01      	ldr	r2, [sp, #4]
    c9dc:	48a9      	ldr	r0, [pc, #676]	; (cc84 <AudioSynthWaveform::update()+0x400>)
			index = ph >> 24;
    c9de:	0e13      	lsrs	r3, r2, #24
			scale = (ph >> 8) & 0xFFFF;
    c9e0:	f3c2 2e0f 	ubfx	lr, r2, #8, #16
			val1 *= 0x10000 - scale;
    c9e4:	f930 9013 	ldrsh.w	r9, [r0, r3, lsl #1]
			val2 = AudioWaveformSine[index+1];
    c9e8:	f103 0801 	add.w	r8, r3, #1
			val1 *= 0x10000 - scale;
    c9ec:	f5ce 3380 	rsb	r3, lr, #65536	; 0x10000
			val2 *= scale;
    c9f0:	f930 8018 	ldrsh.w	r8, [r0, r8, lsl #1]
			val1 *= 0x10000 - scale;
    c9f4:	fb09 f303 	mul.w	r3, r9, r3
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    c9f8:	fb0e 3308 	mla	r3, lr, r8, r3
	asm volatile("smmul %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    c9fc:	fb53 f307 	smmul	r3, r3, r7
    ca00:	f821 3b02 	strh.w	r3, [r1], #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca04:	458c      	cmp	ip, r1
			ph += inc;
    ca06:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca08:	d1e9      	bne.n	c9de <AudioSynthWaveform::update()+0x15a>
    ca0a:	e77e      	b.n	c90a <AudioSynthWaveform::update()+0x86>
    ca0c:	9b00      	ldr	r3, [sp, #0]
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    ca0e:	f64f 78ff 	movw	r8, #65535	; 0xffff
	ph = phase_accumulator + phase_offset;
    ca12:	9801      	ldr	r0, [sp, #4]
    ca14:	f103 0e06 	add.w	lr, r3, #6
    ca18:	f503 7983 	add.w	r9, r3, #262	; 0x106
    ca1c:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
			uint32_t phtop = ph >> 30;
    ca20:	0f82      	lsrs	r2, r0, #30
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca22:	f10e 0e02 	add.w	lr, lr, #2
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
    ca26:	13c3      	asrs	r3, r0, #15
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    ca28:	eba8 31d0 	sub.w	r1, r8, r0, lsr #15
			if (phtop == 1 || phtop == 2) {
    ca2c:	3a01      	subs	r2, #1
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
    ca2e:	fb0c f303 	mul.w	r3, ip, r3
			ph += inc;
    ca32:	4430      	add	r0, r6
			if (phtop == 1 || phtop == 2) {
    ca34:	2a01      	cmp	r2, #1
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    ca36:	fb0c f101 	mul.w	r1, ip, r1
				*bp++ = (((int32_t)ph >> 15) * magnitude) >> 16;
    ca3a:	ea4f 4323 	mov.w	r3, r3, asr #16
				*bp++ = ((0xFFFF - (ph >> 15)) * magnitude) >> 16;
    ca3e:	bf98      	it	ls
    ca40:	140b      	asrls	r3, r1, #16
    ca42:	f82e 3c04 	strh.w	r3, [lr, #-4]
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca46:	45f1      	cmp	r9, lr
    ca48:	d1ea      	bne.n	ca20 <AudioSynthWaveform::update()+0x19c>
    ca4a:	e75e      	b.n	c90a <AudioSynthWaveform::update()+0x86>
		if (!arbdata) {
    ca4c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    ca4e:	2800      	cmp	r0, #0
    ca50:	d082      	beq.n	c958 <AudioSynthWaveform::update()+0xd4>
    ca52:	9b00      	ldr	r3, [sp, #0]
	bp = block->data;
    ca54:	4621      	mov	r1, r4
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    ca56:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    ca58:	f503 7c82 	add.w	ip, r3, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    ca5c:	9a01      	ldr	r2, [sp, #4]
			index = ph >> 24;
    ca5e:	0e13      	lsrs	r3, r2, #24
			scale = (ph >> 8) & 0xFFFF;
    ca60:	f3c2 280f 	ubfx	r8, r2, #8, #16
			index2 = index + 1;
    ca64:	f103 0e01 	add.w	lr, r3, #1
			if (index2 >= 256) index2 = 0;
    ca68:	2bff      	cmp	r3, #255	; 0xff
			val1 *= 0x10000 - scale;
    ca6a:	f930 9013 	ldrsh.w	r9, [r0, r3, lsl #1]
			val2 = *(arbdata + index2);
    ca6e:	bf14      	ite	ne
    ca70:	eb00 0e4e 	addne.w	lr, r0, lr, lsl #1
    ca74:	4686      	moveq	lr, r0
			val2 *= scale;
    ca76:	f9be 3000 	ldrsh.w	r3, [lr]
			val1 *= 0x10000 - scale;
    ca7a:	f5c8 3e80 	rsb	lr, r8, #65536	; 0x10000
			val2 *= scale;
    ca7e:	fb08 f303 	mul.w	r3, r8, r3
			*bp++ = multiply_32x32_rshift32(val1 + val2, magnitude);
    ca82:	fb0e 3309 	mla	r3, lr, r9, r3
    ca86:	fb53 f307 	smmul	r3, r3, r7
    ca8a:	f821 3b02 	strh.w	r3, [r1], #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca8e:	458c      	cmp	ip, r1
			ph += inc;
    ca90:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    ca92:	d1e4      	bne.n	ca5e <AudioSynthWaveform::update()+0x1da>
    ca94:	e739      	b.n	c90a <AudioSynthWaveform::update()+0x86>
	asm volatile("ssat %0, %1, %2, asr %3" : "=r" (out) : "I" (bits), "r" (val), "I" (rshift));
    ca96:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ca98:	f320 004f 	ssat	r0, #16, r0, asr #1
	return out;
    ca9c:	9a00      	ldr	r2, [sp, #0]
				*bp++ = -magnitude15;
    ca9e:	f1c0 0c00 	rsb	ip, r0, #0
			if (ph < pulse_width) {
    caa2:	6aaf      	ldr	r7, [r5, #40]	; 0x28
		magnitude15 = signed_saturate_rshift(magnitude, 16, 1);
    caa4:	b200      	sxth	r0, r0
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    caa6:	1d93      	adds	r3, r2, #6
    caa8:	f502 7e83 	add.w	lr, r2, #262	; 0x106
				*bp++ = -magnitude15;
    caac:	fa0f fc8c 	sxth.w	ip, ip
	ph = phase_accumulator + phase_offset;
    cab0:	9a01      	ldr	r2, [sp, #4]
				*bp++ = magnitude15;
    cab2:	4297      	cmp	r7, r2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    cab4:	f103 0302 	add.w	r3, r3, #2
			ph += inc;
    cab8:	4432      	add	r2, r6
				*bp++ = magnitude15;
    caba:	bf94      	ite	ls
    cabc:	4661      	movls	r1, ip
    cabe:	4601      	movhi	r1, r0
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    cac0:	459e      	cmp	lr, r3
    cac2:	f823 1c04 	strh.w	r1, [r3, #-4]
    cac6:	d1f4      	bne.n	cab2 <AudioSynthWaveform::update()+0x22e>
    cac8:	e71f      	b.n	c90a <AudioSynthWaveform::update()+0x86>
    caca:	9b00      	ldr	r3, [sp, #0]
			*bp++ = signed_multiply_32x16t(0xFFFFFFFFu - magnitude, ph);
    cacc:	6a68      	ldr	r0, [r5, #36]	; 0x24
    cace:	f503 7c82 	add.w	ip, r3, #260	; 0x104
	ph = phase_accumulator + phase_offset;
    cad2:	9a01      	ldr	r2, [sp, #4]
			*bp++ = signed_multiply_32x16t(0xFFFFFFFFu - magnitude, ph);
    cad4:	43c0      	mvns	r0, r0
	bp = block->data;
    cad6:	4623      	mov	r3, r4
	asm volatile("smulwt %0, %1, %2" : "=r" (out) : "r" (a), "r" (b));
    cad8:	fb30 f112 	smulwt	r1, r0, r2
			*bp++ = signed_multiply_32x16t(0xFFFFFFFFu - magnitude, ph);
    cadc:	f823 1b02 	strh.w	r1, [r3], #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    cae0:	459c      	cmp	ip, r3
			ph += inc;
    cae2:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    cae4:	d1f8      	bne.n	cad8 <AudioSynthWaveform::update()+0x254>
    cae6:	e710      	b.n	c90a <AudioSynthWaveform::update()+0x86>
    cae8:	9b00      	ldr	r3, [sp, #0]
	bp = block->data;
    caea:	46a1      	mov	r9, r4
	switch(tone_type) {
    caec:	f8dd 8004 	ldr.w	r8, [sp, #4]
    caf0:	f503 7a82 	add.w	sl, r3, #260	; 0x104
    caf4:	e002      	b.n	cafc <AudioSynthWaveform::update()+0x278>
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    caf6:	45ca      	cmp	sl, r9
    caf8:	f43f af07 	beq.w	c90a <AudioSynthWaveform::update()+0x86>
			*bp++ = sample;
    cafc:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
    cb00:	eb18 0806 	adds.w	r8, r8, r6
    cb04:	f829 3b02 	strh.w	r3, [r9], #2
			if (newph < ph) {
    cb08:	d3f5      	bcc.n	caf6 <AudioSynthWaveform::update()+0x272>
				sample = random(magnitude) - (magnitude >> 1);
    cb0a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    cb0c:	f008 fe9c 	bl	15848 <random(unsigned long)>
    cb10:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    cb12:	eba0 0063 	sub.w	r0, r0, r3, asr #1
    cb16:	8628      	strh	r0, [r5, #48]	; 0x30
    cb18:	e7ed      	b.n	caf6 <AudioSynthWaveform::update()+0x272>
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    cb1a:	6aab      	ldr	r3, [r5, #40]	; 0x28
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
    cb1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    cb20:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
    cb24:	9800      	ldr	r0, [sp, #0]
    cb26:	ea4f 4913 	mov.w	r9, r3, lsr #16
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    cb2a:	9403      	str	r4, [sp, #12]
    cb2c:	1d81      	adds	r1, r0, #6
			if (ph < pulse_width/2) {
    cb2e:	ea4f 0853 	mov.w	r8, r3, lsr #1
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
    cb32:	eba2 0209 	sub.w	r2, r2, r9
    cb36:	f500 7a83 	add.w	sl, r0, #262	; 0x106
    cb3a:	f8d5 c024 	ldr.w	ip, [r5, #36]	; 0x24
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    cb3e:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
		uint32_t rise = 0xFFFFFFFF / (pulse_width >> 16);
    cb42:	fbbb f9f9 	udiv	r9, fp, r9
		uint32_t fall = 0xFFFFFFFF / (0xFFFF - (pulse_width >> 16));
    cb46:	fbbb fbf2 	udiv	fp, fp, r2
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    cb4a:	ea6f 0253 	mvn.w	r2, r3, lsr #1
    cb4e:	9202      	str	r2, [sp, #8]
    cb50:	9a01      	ldr	r2, [sp, #4]
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    cb52:	9c02      	ldr	r4, [sp, #8]
    cb54:	eba2 0e53 	sub.w	lr, r2, r3, lsr #1
    cb58:	e00b      	b.n	cb72 <AudioSynthWaveform::update()+0x2ee>
				*bp++ = ((n >> 16) * magnitude) >> 16;
    cb5a:	0c1b      	lsrs	r3, r3, #16
    cb5c:	fb0c f303 	mul.w	r3, ip, r3
    cb60:	141b      	asrs	r3, r3, #16
    cb62:	f821 3c02 	strh.w	r3, [r1, #-2]
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    cb66:	3102      	adds	r1, #2
			ph += inc;
    cb68:	4432      	add	r2, r6
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++) {
    cb6a:	44b6      	add	lr, r6
    cb6c:	4551      	cmp	r1, sl
    cb6e:	f000 8082 	beq.w	cc76 <AudioSynthWaveform::update()+0x3f2>
				uint32_t n = (ph >> 16) * rise;
    cb72:	0c13      	lsrs	r3, r2, #16
			if (ph < pulse_width/2) {
    cb74:	4590      	cmp	r8, r2
				uint32_t n = (ph >> 16) * rise;
    cb76:	fb09 f303 	mul.w	r3, r9, r3
			if (ph < pulse_width/2) {
    cb7a:	d8ee      	bhi.n	cb5a <AudioSynthWaveform::update()+0x2d6>
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
    cb7c:	eb08 0302 	add.w	r3, r8, r2
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    cb80:	ea4f 401e 	mov.w	r0, lr, lsr #16
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    cb84:	4294      	cmp	r4, r2
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
    cb86:	ea4f 4313 	mov.w	r3, r3, lsr #16
				uint32_t n = 0x7FFFFFFF - (((ph - pulse_width/2) >> 16) * fall);
    cb8a:	fb0b 7010 	mls	r0, fp, r0, r7
			} else if (ph < 0xFFFFFFFF - pulse_width/2) {
    cb8e:	d969      	bls.n	cc64 <AudioSynthWaveform::update()+0x3e0>
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    cb90:	1400      	asrs	r0, r0, #16
    cb92:	fb0c f000 	mul.w	r0, ip, r0
    cb96:	1403      	asrs	r3, r0, #16
    cb98:	e7e3      	b.n	cb62 <AudioSynthWaveform::update()+0x2de>
		  int16_t val = band_limit_waveform.generate_sawtooth (new_ph, i) ;
    cb9a:	f105 0a38 	add.w	sl, r5, #56	; 0x38
	ph = phase_accumulator + phase_offset;
    cb9e:	9f01      	ldr	r7, [sp, #4]
	bp = block->data;
    cba0:	46a3      	mov	fp, r4
		for (int i = 0 ; i < AUDIO_BLOCK_SAMPLES ; i++)
    cba2:	f04f 0800 	mov.w	r8, #0
		  uint32_t new_ph = ph + inc ;
    cba6:	4437      	add	r7, r6

int16_t BandLimitedWaveform::generate_square (uint32_t new_phase, int i)
{
  new_step_check_square (new_phase, i) ;
    cba8:	4642      	mov	r2, r8
    cbaa:	4650      	mov	r0, sl
    cbac:	4639      	mov	r1, r7
    cbae:	f7ff fd75 	bl	c69c <BandLimitedWaveform::new_step_check_square(unsigned long, int)>
  int32_t val = process_active_steps (new_phase) ;
    cbb2:	4639      	mov	r1, r7
    cbb4:	4650      	mov	r0, sl
    cbb6:	f7ff fd1f 	bl	c5f8 <BandLimitedWaveform::process_active_steps(unsigned long)>
  int16_t sample = (int16_t) cyclic [i&15] ;
    cbba:	f008 020f 	and.w	r2, r8, #15
		for (int i = 0 ; i < AUDIO_BLOCK_SAMPLES ; i++)
    cbbe:	f108 0801 	add.w	r8, r8, #1
    cbc2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    cbc6:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
  int16_t sample = (int16_t) cyclic [i&15] ;
    cbca:	f9b2 3148 	ldrsh.w	r3, [r2, #328]	; 0x148
  cyclic [i&15] = val ;
    cbce:	f8c2 0148 	str.w	r0, [r2, #328]	; 0x148
		  *bp++ = (val * magnitude) >> 16 ;
    cbd2:	6a69      	ldr	r1, [r5, #36]	; 0x24
  phase_word = new_phase ;
    cbd4:	63af      	str	r7, [r5, #56]	; 0x38
		  *bp++ = (val * magnitude) >> 16 ;
    cbd6:	fb01 f303 	mul.w	r3, r1, r3
    cbda:	ea4f 4323 	mov.w	r3, r3, asr #16
    cbde:	f82b 3b02 	strh.w	r3, [fp], #2
		for (int i = 0 ; i < AUDIO_BLOCK_SAMPLES ; i++)
    cbe2:	d1e0      	bne.n	cba6 <AudioSynthWaveform::update()+0x322>
    cbe4:	e691      	b.n	c90a <AudioSynthWaveform::update()+0x86>
		  int16_t val = band_limit_waveform.generate_sawtooth (new_ph, i) ;
    cbe6:	f105 0938 	add.w	r9, r5, #56	; 0x38
	ph = phase_accumulator + phase_offset;
    cbea:	9f01      	ldr	r7, [sp, #4]
	bp = block->data;
    cbec:	46a0      	mov	r8, r4
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    cbee:	f04f 0b00 	mov.w	fp, #0
  return sample + BASE_AMPLITUDE/2 - pulse_width / (0x80000000u / BASE_AMPLITUDE) ; // correct DC offset for duty cycle
    cbf2:	9402      	str	r4, [sp, #8]
		  int32_t val = band_limit_waveform.generate_pulse (new_ph, pulse_width, i) ;
    cbf4:	6aac      	ldr	r4, [r5, #40]	; 0x28
		  int32_t new_ph = ph + inc ;
    cbf6:	4437      	add	r7, r6
  return sample ;
}

int16_t BandLimitedWaveform::generate_pulse (uint32_t new_phase, uint32_t pulse_width, int i)
{
  new_step_check_pulse (new_phase, pulse_width, i) ;
    cbf8:	465b      	mov	r3, fp
    cbfa:	4648      	mov	r0, r9
    cbfc:	4622      	mov	r2, r4
    cbfe:	4639      	mov	r1, r7
    cc00:	f7ff fd94 	bl	c72c <BandLimitedWaveform::new_step_check_pulse(unsigned long, unsigned long, int)>
  int32_t sample = process_active_steps (new_phase) ;
    cc04:	4639      	mov	r1, r7
    cc06:	4648      	mov	r0, r9
    cc08:	f7ff fcf6 	bl	c5f8 <BandLimitedWaveform::process_active_steps(unsigned long)>
  return sample + BASE_AMPLITUDE/2 - pulse_width / (0x80000000u / BASE_AMPLITUDE) ; // correct DC offset for duty cycle
    cc0c:	4b1e      	ldr	r3, [pc, #120]	; (cc88 <AudioSynthWaveform::update()+0x404>)
    cc0e:	fba3 3c04 	umull	r3, ip, r3, r4
  int32_t val = process_active_steps_pulse (new_phase, pulse_width) ;
  int32_t sample = cyclic [i&15] ;
    cc12:	f00b 030f 	and.w	r3, fp, #15
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    cc16:	f10b 0b01 	add.w	fp, fp, #1
  return sample + BASE_AMPLITUDE/2 - pulse_width / (0x80000000u / BASE_AMPLITUDE) ; // correct DC offset for duty cycle
    cc1a:	eba4 0a0c 	sub.w	sl, r4, ip
    cc1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    cc22:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
  return sample + BASE_AMPLITUDE/2 - pulse_width / (0x80000000u / BASE_AMPLITUDE) ; // correct DC offset for duty cycle
    cc26:	eb0c 0c5a 	add.w	ip, ip, sl, lsr #1
  int32_t sample = cyclic [i&15] ;
    cc2a:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
  return sample + BASE_AMPLITUDE/2 - pulse_width / (0x80000000u / BASE_AMPLITUDE) ; // correct DC offset for duty cycle
    cc2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
    cc32:	f5cc 5c40 	rsb	ip, ip, #12288	; 0x3000
    cc36:	4460      	add	r0, ip
  cyclic [i&15] = val ;
    cc38:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
  phase_word = new_phase ;
  return (int16_t) ((sample >> 1) - (sample >> 5)) ; // scale down to avoid overflow on narrow pulses, where the DC shift is big
    cc3c:	ea4f 1361 	mov.w	r3, r1, asr #5
		  *bp++ = (int16_t) ((val * magnitude) >> 16) ;
    cc40:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  return (int16_t) ((sample >> 1) - (sample >> 5)) ; // scale down to avoid overflow on narrow pulses, where the DC shift is big
    cc42:	ebc3 0361 	rsb	r3, r3, r1, asr #1
  phase_word = new_phase ;
    cc46:	63af      	str	r7, [r5, #56]	; 0x38
		  int32_t val = band_limit_waveform.generate_pulse (new_ph, pulse_width, i) ;
    cc48:	b21b      	sxth	r3, r3
		  *bp++ = (int16_t) ((val * magnitude) >> 16) ;
    cc4a:	fb02 f303 	mul.w	r3, r2, r3
    cc4e:	ea4f 4323 	mov.w	r3, r3, asr #16
    cc52:	f828 3b02 	strh.w	r3, [r8], #2
		for (i=0; i < AUDIO_BLOCK_SAMPLES; i++)
    cc56:	d1cd      	bne.n	cbf4 <AudioSynthWaveform::update()+0x370>
		  ph = new_ph ;
    cc58:	e9dd 3401 	ldrd	r3, r4, [sp, #4]
    cc5c:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    cc60:	9301      	str	r3, [sp, #4]
    cc62:	e656      	b.n	c912 <AudioSynthWaveform::update()+0x8e>
				uint32_t n = ((ph + pulse_width/2) >> 16) * rise + 0x80000000;
    cc64:	fb09 f303 	mul.w	r3, r9, r3
    cc68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
				*bp++ = (((int32_t)n >> 16) * magnitude) >> 16;
    cc6c:	141b      	asrs	r3, r3, #16
    cc6e:	fb0c f303 	mul.w	r3, ip, r3
    cc72:	141b      	asrs	r3, r3, #16
    cc74:	e775      	b.n	cb62 <AudioSynthWaveform::update()+0x2de>
			ph += inc;
    cc76:	9b01      	ldr	r3, [sp, #4]
    cc78:	9c03      	ldr	r4, [sp, #12]
    cc7a:	eb03 13c6 	add.w	r3, r3, r6, lsl #7
    cc7e:	9301      	str	r3, [sp, #4]
    cc80:	e647      	b.n	c912 <AudioSynthWaveform::update()+0x8e>
    cc82:	bf00      	nop
    cc84:	200005e0 	.word	0x200005e0
    cc88:	80006001 	.word	0x80006001

0000cc8c <BandLimitedWaveform::BandLimitedWaveform()>:
  }
}

BandLimitedWaveform::BandLimitedWaveform()
{
  newptr = 0 ;
    cc8c:	2200      	movs	r2, #0
  delptr = 0 ;
  dc_offset = BASE_AMPLITUDE ;
    cc8e:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
  delptr = 0 ;
    cc92:	e9c0 2242 	strd	r2, r2, [r0, #264]	; 0x108
  phase_word = 0 ;
    cc96:	e9c0 2100 	strd	r2, r1, [r0]
}
    cc9a:	4770      	bx	lr

0000cc9c <SDClass::~SDClass()>:
class SDClass : public FS
    cc9c:	4770      	bx	lr
    cc9e:	bf00      	nop

0000cca0 <SDClass::dateTime(unsigned short*, unsigned short*)>:
// #define _SD_DAT3 62  // currently not doing on 3.5/6...
#endif

#ifdef __arm__
void SDClass::dateTime(uint16_t *date, uint16_t *time)
{
    cca0:	b530      	push	{r4, r5, lr}
    cca2:	b083      	sub	sp, #12
    cca4:	4605      	mov	r5, r0
    cca6:	460c      	mov	r4, r1
uint32_t makeTime(const DateTimeFields &tm); // convert DateTimeFields to 32 bit time

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
    cca8:	f009 ffac 	bl	16c04 <rtc_get>
	uint32_t now = Teensy3Clock.get();
	if (now < 315532800) { // before 1980
    ccac:	4b1c      	ldr	r3, [pc, #112]	; (cd20 <SDClass::dateTime(unsigned short*, unsigned short*)+0x80>)
    ccae:	4298      	cmp	r0, r3
    ccb0:	d804      	bhi.n	ccbc <SDClass::dateTime(unsigned short*, unsigned short*)+0x1c>
		*date = 0;
    ccb2:	2300      	movs	r3, #0
    ccb4:	802b      	strh	r3, [r5, #0]
		*time = 0;
    ccb6:	8023      	strh	r3, [r4, #0]
		DateTimeFields datetime;
		breakTime(now, datetime);
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
	}
}
    ccb8:	b003      	add	sp, #12
    ccba:	bd30      	pop	{r4, r5, pc}
		breakTime(now, datetime);
    ccbc:	4669      	mov	r1, sp
    ccbe:	f008 fd17 	bl	156f0 <breakTime(unsigned long, DateTimeFields&)>
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    ccc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
    ccc6:	f89d 2006 	ldrb.w	r2, [sp, #6]
    ccca:	3301      	adds	r3, #1
    cccc:	f89d 1004 	ldrb.w	r1, [sp, #4]
  year -= 1980;
    ccd0:	3a50      	subs	r2, #80	; 0x50
    ccd2:	b2db      	uxtb	r3, r3
    ccd4:	b292      	uxth	r2, r2
  return year > 127 || month > 12 || day > 31 ? 0 :
    ccd6:	291f      	cmp	r1, #31
    ccd8:	bf98      	it	ls
    ccda:	2b0c      	cmpls	r3, #12
    ccdc:	d801      	bhi.n	cce2 <SDClass::dateTime(unsigned short*, unsigned short*)+0x42>
    ccde:	2a7f      	cmp	r2, #127	; 0x7f
    cce0:	d918      	bls.n	cd14 <SDClass::dateTime(unsigned short*, unsigned short*)+0x74>
         year << 9 | month << 5 | day;
    cce2:	2100      	movs	r1, #0
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    cce4:	f89d 2002 	ldrb.w	r2, [sp, #2]
    cce8:	f89d 3001 	ldrb.w	r3, [sp, #1]
		*date = FS_DATE(datetime.year + 1900, datetime.mon + 1, datetime.mday);
    ccec:	8029      	strh	r1, [r5, #0]
  return hour > 23 || minute > 59 || second > 59 ? 0 :
    ccee:	2a17      	cmp	r2, #23
    ccf0:	bf98      	it	ls
    ccf2:	2b3b      	cmpls	r3, #59	; 0x3b
		*time = FS_TIME(datetime.hour, datetime.min, datetime.sec);
    ccf4:	f89d 1000 	ldrb.w	r1, [sp]
    ccf8:	d801      	bhi.n	ccfe <SDClass::dateTime(unsigned short*, unsigned short*)+0x5e>
    ccfa:	293b      	cmp	r1, #59	; 0x3b
    ccfc:	d903      	bls.n	cd06 <SDClass::dateTime(unsigned short*, unsigned short*)+0x66>
         hour << 11 | minute << 5 | second >> 1;
    ccfe:	2300      	movs	r3, #0
    cd00:	8023      	strh	r3, [r4, #0]
}
    cd02:	b003      	add	sp, #12
    cd04:	bd30      	pop	{r4, r5, pc}
    cd06:	015b      	lsls	r3, r3, #5
    cd08:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    cd0c:	ea43 0351 	orr.w	r3, r3, r1, lsr #1
    cd10:	b29b      	uxth	r3, r3
    cd12:	e7f5      	b.n	cd00 <SDClass::dateTime(unsigned short*, unsigned short*)+0x60>
         year << 9 | month << 5 | day;
    cd14:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
    cd18:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
    cd1c:	b289      	uxth	r1, r1
    cd1e:	e7e1      	b.n	cce4 <SDClass::dateTime(unsigned short*, unsigned short*)+0x44>
    cd20:	12cea5ff 	.word	0x12cea5ff

0000cd24 <SDClass::rmdir(char const*)>:
		return sdfs.rename(oldfilepath, newfilepath);
	}
	bool remove(const char *filepath) {
		return sdfs.remove(filepath);
	}
	bool rmdir(const char *filepath) {
    cd24:	b510      	push	{r4, lr}
   * The subdirectory file will be removed only if it is empty.
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char *path) {
    return m_fVol ? m_fVol->rmdir(path) :
    cd26:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    cd2a:	b08e      	sub	sp, #56	; 0x38
    cd2c:	460a      	mov	r2, r1
    cd2e:	b144      	cbz	r4, cd42 <SDClass::rmdir(char const*)+0x1e>
    cd30:	2300      	movs	r3, #0
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    FatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    cd32:	4621      	mov	r1, r4
    cd34:	4668      	mov	r0, sp
    cd36:	9300      	str	r3, [sp, #0]
    cd38:	f002 fe1e 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    cd3c:	b980      	cbnz	r0, cd60 <SDClass::rmdir(char const*)+0x3c>
		return sdfs.rmdir(filepath);
	}
    cd3e:	b00e      	add	sp, #56	; 0x38
    cd40:	bd10      	pop	{r4, pc}
    cd42:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rmdir(path) : false;
    cd46:	b141      	cbz	r1, cd5a <SDClass::rmdir(char const*)+0x36>
   *
   * \return true for success or false for failure.
   */
  bool rmdir(const char* path) {
    ExFatFile sub;
    return sub.open(this, path, O_RDONLY) && sub.rmdir();
    cd48:	4623      	mov	r3, r4
    cd4a:	4668      	mov	r0, sp
    cd4c:	940c      	str	r4, [sp, #48]	; 0x30
    cd4e:	f000 ff31 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    cd52:	b950      	cbnz	r0, cd6a <SDClass::rmdir(char const*)+0x46>
    cd54:	2000      	movs	r0, #0
    cd56:	b00e      	add	sp, #56	; 0x38
    cd58:	bd10      	pop	{r4, pc}
    cd5a:	4608      	mov	r0, r1
    cd5c:	b00e      	add	sp, #56	; 0x38
    cd5e:	bd10      	pop	{r4, pc}
    cd60:	4668      	mov	r0, sp
    cd62:	f003 f85d 	bl	fe20 <FatFile::rmdir()>
    cd66:	b00e      	add	sp, #56	; 0x38
    cd68:	bd10      	pop	{r4, pc}
    cd6a:	4668      	mov	r0, sp
    cd6c:	f000 ffe0 	bl	dd30 <ExFatFile::rmdir()>
    cd70:	2800      	cmp	r0, #0
    cd72:	d0ef      	beq.n	cd54 <SDClass::rmdir(char const*)+0x30>
    cd74:	e7e3      	b.n	cd3e <SDClass::rmdir(char const*)+0x1a>
    cd76:	bf00      	nop

0000cd78 <SDClass::rename(char const*, char const*)>:
	bool rename(const char *oldfilepath, const char *newfilepath) {
    cd78:	b570      	push	{r4, r5, r6, lr}
    return m_fVol ? m_fVol->rename(oldPath, newPath) :
    cd7a:	f8d0 5484 	ldr.w	r5, [r0, #1156]	; 0x484
    cd7e:	b08e      	sub	sp, #56	; 0x38
    cd80:	4616      	mov	r6, r2
    cd82:	b15d      	cbz	r5, cd9c <SDClass::rename(char const*, char const*)+0x24>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend FatFile;
  static FatVolume* cwv() {return m_cwv;}
  FatFile* vwd() {return &m_vwd;}
    cd84:	f505 6589 	add.w	r5, r5, #1096	; 0x448
    cd88:	2300      	movs	r3, #0
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    cd8a:	460a      	mov	r2, r1
    cd8c:	4668      	mov	r0, sp
    cd8e:	4629      	mov	r1, r5
    cd90:	9300      	str	r3, [sp, #0]
    cd92:	f002 fd6f 	bl	f874 <FatFile::open(FatFile*, char const*, int)>
    cd96:	b990      	cbnz	r0, cdbe <SDClass::rename(char const*, char const*)+0x46>
	}
    cd98:	b00e      	add	sp, #56	; 0x38
    cd9a:	bd70      	pop	{r4, r5, r6, pc}
    cd9c:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->rename(oldPath, newPath) : false;
    cda0:	2800      	cmp	r0, #0
    cda2:	d0f9      	beq.n	cd98 <SDClass::rename(char const*, char const*)+0x20>
#endif  // ENABLE_ARDUINO_STRING

 private:
  friend ExFatFile;
  static ExFatVolume* cwv() {return m_cwv;}
  ExFatFile* vwd() {return &m_vwd;}
    cda4:	f500 6489 	add.w	r4, r0, #1096	; 0x448
    return file.open(vwd(), oldPath, O_RDONLY) && file.rename(vwd(), newPath);
    cda8:	460a      	mov	r2, r1
    cdaa:	462b      	mov	r3, r5
    cdac:	4668      	mov	r0, sp
    cdae:	4621      	mov	r1, r4
    cdb0:	950c      	str	r5, [sp, #48]	; 0x30
    cdb2:	f000 fe83 	bl	dabc <ExFatFile::open(ExFatFile*, char const*, int)>
    cdb6:	b948      	cbnz	r0, cdcc <SDClass::rename(char const*, char const*)+0x54>
    cdb8:	2000      	movs	r0, #0
    cdba:	b00e      	add	sp, #56	; 0x38
    cdbc:	bd70      	pop	{r4, r5, r6, pc}
    cdbe:	4632      	mov	r2, r6
    cdc0:	4629      	mov	r1, r5
    cdc2:	4668      	mov	r0, sp
    cdc4:	f002 ff36 	bl	fc34 <FatFile::rename(FatFile*, char const*)>
    cdc8:	b00e      	add	sp, #56	; 0x38
    cdca:	bd70      	pop	{r4, r5, r6, pc}
    cdcc:	4632      	mov	r2, r6
    cdce:	4621      	mov	r1, r4
    cdd0:	4668      	mov	r0, sp
    cdd2:	f001 f901 	bl	dfd8 <ExFatFile::rename(ExFatFile*, char const*)>
    cdd6:	2800      	cmp	r0, #0
    cdd8:	d0ee      	beq.n	cdb8 <SDClass::rename(char const*, char const*)+0x40>
    cdda:	e7dd      	b.n	cd98 <SDClass::rename(char const*, char const*)+0x20>

0000cddc <SDClass::remove(char const*)>:
	bool remove(const char *filepath) {
    cddc:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->remove(path) :
    cdde:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    cde2:	b08e      	sub	sp, #56	; 0x38
    cde4:	460a      	mov	r2, r1
    cde6:	b14c      	cbz	r4, cdfc <SDClass::remove(char const*)+0x20>
    cde8:	2000      	movs	r0, #0
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    cdea:	2301      	movs	r3, #1
    cdec:	4621      	mov	r1, r4
    cdee:	9000      	str	r0, [sp, #0]
    cdf0:	4668      	mov	r0, sp
    cdf2:	f002 fdc1 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
    cdf6:	b980      	cbnz	r0, ce1a <SDClass::remove(char const*)+0x3e>
	}
    cdf8:	b00e      	add	sp, #56	; 0x38
    cdfa:	bd10      	pop	{r4, pc}
    cdfc:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->remove(path) : false;
    ce00:	b141      	cbz	r1, ce14 <SDClass::remove(char const*)+0x38>
    return tmp.open(this, path, O_WRONLY) && tmp.remove();
    ce02:	2301      	movs	r3, #1
    ce04:	4668      	mov	r0, sp
    ce06:	940c      	str	r4, [sp, #48]	; 0x30
    ce08:	f000 fed4 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    ce0c:	b950      	cbnz	r0, ce24 <SDClass::remove(char const*)+0x48>
    ce0e:	2000      	movs	r0, #0
    ce10:	b00e      	add	sp, #56	; 0x38
    ce12:	bd10      	pop	{r4, pc}
    ce14:	4608      	mov	r0, r1
    ce16:	b00e      	add	sp, #56	; 0x38
    ce18:	bd10      	pop	{r4, pc}
    ce1a:	4668      	mov	r0, sp
    ce1c:	f003 feb2 	bl	10b84 <FatFile::remove()>
    ce20:	b00e      	add	sp, #56	; 0x38
    ce22:	bd10      	pop	{r4, pc}
    ce24:	4668      	mov	r0, sp
    ce26:	f000 ff29 	bl	dc7c <ExFatFile::remove()>
    ce2a:	2800      	cmp	r0, #0
    ce2c:	d0ef      	beq.n	ce0e <SDClass::remove(char const*)+0x32>
    ce2e:	e7e3      	b.n	cdf8 <SDClass::remove(char const*)+0x1c>

0000ce30 <SDClass::mkdir(char const*)>:
	bool mkdir(const char *filepath) {
    ce30:	b530      	push	{r4, r5, lr}
    return m_fVol ? m_fVol->mkdir(path, pFlag) :
    ce32:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    ce36:	b08f      	sub	sp, #60	; 0x3c
    ce38:	460a      	mov	r2, r1
    ce3a:	b14c      	cbz	r4, ce50 <SDClass::mkdir(char const*)+0x20>
    ce3c:	2500      	movs	r5, #0
    return sub.mkdir(vwd(), path, pFlag);
    ce3e:	2301      	movs	r3, #1
    ce40:	f504 6189 	add.w	r1, r4, #1096	; 0x448
    ce44:	4668      	mov	r0, sp
    ce46:	9500      	str	r5, [sp, #0]
    ce48:	f002 fc9e 	bl	f788 <FatFile::mkdir(FatFile*, char const*, bool)>
	}
    ce4c:	b00f      	add	sp, #60	; 0x3c
    ce4e:	bd30      	pop	{r4, r5, pc}
    ce50:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->mkdir(path, pFlag) : false;
    ce54:	2800      	cmp	r0, #0
    ce56:	d0f9      	beq.n	ce4c <SDClass::mkdir(char const*)+0x1c>
    return sub.mkdir(vwd(), path, pFlag);
    ce58:	f500 6189 	add.w	r1, r0, #1096	; 0x448
    ce5c:	2301      	movs	r3, #1
    ce5e:	4668      	mov	r0, sp
    ce60:	940c      	str	r4, [sp, #48]	; 0x30
    ce62:	f001 f93b 	bl	e0dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>
    ce66:	b00f      	add	sp, #60	; 0x3c
    ce68:	bd30      	pop	{r4, r5, pc}
    ce6a:	bf00      	nop

0000ce6c <SDClass::exists(char const*)>:
	bool exists(const char *filepath) {
    ce6c:	b510      	push	{r4, lr}
    return m_fVol ? m_fVol->exists(path) :
    ce6e:	f8d0 4484 	ldr.w	r4, [r0, #1156]	; 0x484
    ce72:	b08e      	sub	sp, #56	; 0x38
    ce74:	460a      	mov	r2, r1
    ce76:	b13c      	cbz	r4, ce88 <SDClass::exists(char const*)+0x1c>
    ce78:	2300      	movs	r3, #0
    return tmp.open(this, path, O_RDONLY);
    ce7a:	4621      	mov	r1, r4
    ce7c:	4668      	mov	r0, sp
    ce7e:	9300      	str	r3, [sp, #0]
    ce80:	f002 fd7a 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
	}
    ce84:	b00e      	add	sp, #56	; 0x38
    ce86:	bd10      	pop	{r4, pc}
    ce88:	f8d0 1488 	ldr.w	r1, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->exists(path) : false;
    ce8c:	b131      	cbz	r1, ce9c <SDClass::exists(char const*)+0x30>
    return tmp.open(this, path, O_RDONLY);
    ce8e:	4623      	mov	r3, r4
    ce90:	4668      	mov	r0, sp
    ce92:	940c      	str	r4, [sp, #48]	; 0x30
    ce94:	f000 fe8e 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
    ce98:	b00e      	add	sp, #56	; 0x38
    ce9a:	bd10      	pop	{r4, pc}
    ce9c:	4608      	mov	r0, r1
    ce9e:	b00e      	add	sp, #56	; 0x38
    cea0:	bd10      	pop	{r4, pc}
    cea2:	bf00      	nop

0000cea4 <SDClass::usedSize()>:
	uint64_t usedSize() {
    cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cea6:	4605      	mov	r5, r0
		if (!cardPreviouslyPresent) return (uint64_t)0;
    cea8:	f890 04d0 	ldrb.w	r0, [r0, #1232]	; 0x4d0
    ceac:	b908      	cbnz	r0, ceb2 <SDClass::usedSize()+0xe>
    ceae:	4601      	mov	r1, r0
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
		  * (uint64_t)sdfs.bytesPerCluster();
	}
    ceb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return m_fVol ? m_fVol->clusterCount() :
    ceb2:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    ceb6:	2b00      	cmp	r3, #0
    ceb8:	d04c      	beq.n	cf54 <SDClass::usedSize()+0xb0>
  uint8_t* cacheClear() {
    return m_cache.clear();
  }
  /** \return The total number of clusters in the volume. */
  uint32_t clusterCount() const {
    return m_lastCluster - 1;
    ceba:	69dc      	ldr	r4, [r3, #28]
    cebc:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    cec0:	3c01      	subs	r4, #1
    }
    return rtn;
  }
  //----------------------------------------------------------------------------
  /** \return true if can be in dedicated SPI state */
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    cec2:	2800      	cmp	r0, #0
    cec4:	d054      	beq.n	cf70 <SDClass::usedSize()+0xcc>
    cec6:	6803      	ldr	r3, [r0, #0]
    cec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    ceca:	4798      	blx	r3
    cecc:	b1e0      	cbz	r0, cf08 <SDClass::usedSize()+0x64>
    cece:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    }
    errorPrint(pr);
  }
  //----------------------------------------------------------------------------
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_card ? m_card->isDedicatedSpi() : false;}
    ced2:	b378      	cbz	r0, cf34 <SDClass::usedSize()+0x90>
    ced4:	6803      	ldr	r3, [r0, #0]
    ced6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    ced8:	4798      	blx	r3
    ceda:	b9a8      	cbnz	r0, cf08 <SDClass::usedSize()+0x64>
    cedc:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
  /** Set SPI sharing state
   * \param[in] value desired state.
   * \return true for success else false;
   */
  bool setDedicatedSpi(bool value) {
    if (m_card) {
    cee0:	b340      	cbz	r0, cf34 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    cee2:	6803      	ldr	r3, [r0, #0]
    cee4:	2101      	movs	r1, #1
    cee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cee8:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(true)) {
    ceea:	4607      	mov	r7, r0
    ceec:	b310      	cbz	r0, cf34 <SDClass::usedSize()+0x90>
    return m_fVol ? m_fVol->freeClusterCount() :
    ceee:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    cef2:	bb58      	cbnz	r0, cf4c <SDClass::usedSize()+0xa8>
    cef4:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
    cef8:	4633      	mov	r3, r6
           m_xVol ? m_xVol->freeClusterCount() : 0;
    cefa:	b96e      	cbnz	r6, cf18 <SDClass::usedSize()+0x74>
    cefc:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    cf00:	b990      	cbnz	r0, cf28 <SDClass::usedSize()+0x84>
  uint32_t bytesPerCluster() const {
    cf02:	2000      	movs	r0, #0
    cf04:	4601      	mov	r1, r0
    cf06:	e7d3      	b.n	ceb0 <SDClass::usedSize()+0xc>
    return m_fVol ? m_fVol->freeClusterCount() :
    cf08:	f8d5 0484 	ldr.w	r0, [r5, #1156]	; 0x484
    cf0c:	b9e8      	cbnz	r0, cf4a <SDClass::usedSize()+0xa6>
    cf0e:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->freeClusterCount() : 0;
    cf12:	2b00      	cmp	r3, #0
    cf14:	d0f5      	beq.n	cf02 <SDClass::usedSize()+0x5e>
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    cf16:	4607      	mov	r7, r0
    cf18:	4618      	mov	r0, r3
    cf1a:	f002 f9b3 	bl	f284 <ExFatPartition::freeClusterCount()>
    cf1e:	4606      	mov	r6, r0
    if (switchSpi && !setDedicatedSpi(false)) {
    cf20:	b13f      	cbz	r7, cf32 <SDClass::usedSize()+0x8e>
    cf22:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
    if (m_card) {
    cf26:	b128      	cbz	r0, cf34 <SDClass::usedSize()+0x90>
      return m_card->setDedicatedSpi(value);
    cf28:	6803      	ldr	r3, [r0, #0]
    cf2a:	2100      	movs	r1, #0
    cf2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    cf2e:	4798      	blx	r3
    if (switchSpi && !setDedicatedSpi(false)) {
    cf30:	b100      	cbz	r0, cf34 <SDClass::usedSize()+0x90>
		return (uint64_t)(sdfs.clusterCount() - sdfs.freeClusterCount())
    cf32:	1ba4      	subs	r4, r4, r6
    return m_fVol ? m_fVol->bytesPerCluster() :
    cf34:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    cf38:	b1fb      	cbz	r3, cf7a <SDClass::usedSize()+0xd6>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    cf3a:	799b      	ldrb	r3, [r3, #6]
    cf3c:	f44f 7100 	mov.w	r1, #512	; 0x200
    cf40:	4099      	lsls	r1, r3
		  * (uint64_t)sdfs.bytesPerCluster();
    cf42:	b289      	uxth	r1, r1
    cf44:	fba1 0104 	umull	r0, r1, r1, r4
	}
    cf48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bool switchSpi = hasDedicatedSpi() && !isDedicatedSpi();
    cf4a:	2700      	movs	r7, #0
    return m_fVol ? m_fVol->freeClusterCount() :
    cf4c:	f004 fc6c 	bl	11828 <FatPartition::freeClusterCount()>
    cf50:	4606      	mov	r6, r0
    cf52:	e7e5      	b.n	cf20 <SDClass::usedSize()+0x7c>
    cf54:	f8d5 3488 	ldr.w	r3, [r5, #1160]	; 0x488
  uint32_t clusterCount() const {
    cf58:	f8d5 0490 	ldr.w	r0, [r5, #1168]	; 0x490
           m_xVol ? m_xVol->clusterCount() : 0;
    cf5c:	b1b3      	cbz	r3, cf8c <SDClass::usedSize()+0xe8>
   */
  uint8_t* cacheClear() {
    return m_dataCache.clear();
  }
  /** \return the cluster count for the partition. */
  uint32_t clusterCount() const {return m_clusterCount;}
    cf5e:	f8d3 4430 	ldr.w	r4, [r3, #1072]	; 0x430
  bool hasDedicatedSpi() {return m_card ? m_card->hasDedicatedSpi() : false;}
    cf62:	2800      	cmp	r0, #0
    cf64:	d1af      	bne.n	cec6 <SDClass::usedSize()+0x22>
           m_xVol ? m_xVol->freeClusterCount() : 0;
    cf66:	4618      	mov	r0, r3
    cf68:	f002 f98c 	bl	f284 <ExFatPartition::freeClusterCount()>
    cf6c:	4606      	mov	r6, r0
    cf6e:	e7e0      	b.n	cf32 <SDClass::usedSize()+0x8e>
    return m_fVol ? m_fVol->freeClusterCount() :
    cf70:	4618      	mov	r0, r3
    cf72:	f004 fc59 	bl	11828 <FatPartition::freeClusterCount()>
    cf76:	4606      	mov	r6, r0
    cf78:	e7db      	b.n	cf32 <SDClass::usedSize()+0x8e>
    cf7a:	f8d5 6488 	ldr.w	r6, [r5, #1160]	; 0x488
           m_xVol ? m_xVol->bytesPerCluster() : 0;
    cf7e:	2e00      	cmp	r6, #0
    cf80:	d0bf      	beq.n	cf02 <SDClass::usedSize()+0x5e>
		  * (uint64_t)sdfs.bytesPerCluster();
    cf82:	f8d6 143c 	ldr.w	r1, [r6, #1084]	; 0x43c
    cf86:	fba1 0104 	umull	r0, r1, r1, r4
	}
    cf8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf8c:	2800      	cmp	r0, #0
    cf8e:	d0b8      	beq.n	cf02 <SDClass::usedSize()+0x5e>
           m_xVol ? m_xVol->clusterCount() : 0;
    cf90:	461c      	mov	r4, r3
    cf92:	e798      	b.n	cec6 <SDClass::usedSize()+0x22>

0000cf94 <SDClass::totalSize()>:
	uint64_t totalSize() {
		if (!cardPreviouslyPresent) return (uint64_t)0;
    cf94:	f890 34d0 	ldrb.w	r3, [r0, #1232]	; 0x4d0
    cf98:	b163      	cbz	r3, cfb4 <SDClass::totalSize()+0x20>
    return m_fVol ? m_fVol->clusterCount() :
    cf9a:	f8d0 3484 	ldr.w	r3, [r0, #1156]	; 0x484
    cf9e:	b163      	cbz	r3, cfba <SDClass::totalSize()+0x26>
    cfa0:	799a      	ldrb	r2, [r3, #6]
    cfa2:	f44f 7000 	mov.w	r0, #512	; 0x200
    return m_lastCluster - 1;
    cfa6:	69d9      	ldr	r1, [r3, #28]
    return m_bytesPerSector << m_sectorsPerClusterShift;
    cfa8:	4090      	lsls	r0, r2
    return m_lastCluster - 1;
    cfaa:	3901      	subs	r1, #1
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    cfac:	b280      	uxth	r0, r0
    cfae:	fba0 0101 	umull	r0, r1, r0, r1
    cfb2:	4770      	bx	lr
		if (!cardPreviouslyPresent) return (uint64_t)0;
    cfb4:	4618      	mov	r0, r3
    cfb6:	4601      	mov	r1, r0
	}
    cfb8:	4770      	bx	lr
    cfba:	f8d0 0488 	ldr.w	r0, [r0, #1160]	; 0x488
           m_xVol ? m_xVol->clusterCount() : 0;
    cfbe:	2800      	cmp	r0, #0
    cfc0:	d0f9      	beq.n	cfb6 <SDClass::totalSize()+0x22>
		return (uint64_t)sdfs.clusterCount() * (uint64_t)sdfs.bytesPerCluster();
    cfc2:	f8d0 143c 	ldr.w	r1, [r0, #1084]	; 0x43c
    cfc6:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
    cfca:	fba1 0100 	umull	r0, r1, r1, r0
    cfce:	4770      	bx	lr

0000cfd0 <SDClass::format(int, char, Print&)>:
#endif

bool SDClass::format(int type, char progressChar, Print& pr)
{
    cfd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SdCard* card() {return m_card;}
    cfd4:	f8d0 5490 	ldr.w	r5, [r0, #1168]	; 0x490
    cfd8:	b08d      	sub	sp, #52	; 0x34
	SdCard *card = sdfs.card();
	if (!card) return false; // no SD card
    cfda:	b14d      	cbz	r5, cff0 <SDClass::format(int, char, Print&)+0x20>
    cfdc:	4698      	mov	r8, r3
	uint32_t sectors = card->sectorCount();
    cfde:	682b      	ldr	r3, [r5, #0]
    cfe0:	4604      	mov	r4, r0
    cfe2:	4628      	mov	r0, r5
    cfe4:	69db      	ldr	r3, [r3, #28]
    cfe6:	4798      	blx	r3
	if (sectors <= 12288) return false; // card too small
    cfe8:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
	uint32_t sectors = card->sectorCount();
    cfec:	4606      	mov	r6, r0
	if (sectors <= 12288) return false; // card too small
    cfee:	d804      	bhi.n	cffa <SDClass::format(int, char, Print&)+0x2a>
	if (!card) return false; // no SD card
    cff0:	2600      	movs	r6, #0
		// TODO: Is begin() really necessary?  Is a quicker way possible?
		card->syncDevice();
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
	}
	return ret;
}
    cff2:	4630      	mov	r0, r6
    cff4:	b00d      	add	sp, #52	; 0x34
    cff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t *buf = (uint8_t *)malloc(512);
    cffa:	f44f 7000 	mov.w	r0, #512	; 0x200
    cffe:	f014 f8af 	bl	21160 <malloc>
	if (!buf) return false; // unable to allocate memory
    d002:	4607      	mov	r7, r0
    d004:	2800      	cmp	r0, #0
    d006:	d0f3      	beq.n	cff0 <SDClass::format(int, char, Print&)+0x20>
		ret = exFatFormatter.format(card, buf, &pr);
    d008:	f10d 0904 	add.w	r9, sp, #4
	if (sectors > 67108864) {
    d00c:	f1b6 6f80 	cmp.w	r6, #67108864	; 0x4000000
		ret = exFatFormatter.format(card, buf, &pr);
    d010:	4602      	mov	r2, r0
    d012:	4643      	mov	r3, r8
    d014:	4629      	mov	r1, r5
    d016:	4648      	mov	r0, r9
	if (sectors > 67108864) {
    d018:	d92e      	bls.n	d078 <SDClass::format(int, char, Print&)+0xa8>
		ret = exFatFormatter.format(card, buf, &pr);
    d01a:	f001 fbff 	bl	e81c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    d01e:	4606      	mov	r6, r0
	free(buf);
    d020:	4638      	mov	r0, r7
    d022:	f014 f8a5 	bl	21170 <free>
	if (ret) {
    d026:	2e00      	cmp	r6, #0
    d028:	d0e2      	beq.n	cff0 <SDClass::format(int, char, Print&)+0x20>
		card->syncDevice();
    d02a:	682b      	ldr	r3, [r5, #0]
    d02c:	4628      	mov	r0, r5
		sdfs.restart(); // TODO: is sdfs.volumeBegin() enough??
    d02e:	1d27      	adds	r7, r4, #4
		card->syncDevice();
    d030:	6a1b      	ldr	r3, [r3, #32]
    d032:	4798      	blx	r3
    if (spiConfigBackupPin == 255) {
    d034:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
    d038:	2bff      	cmp	r3, #255	; 0xff
    d03a:	d021      	beq.n	d080 <SDClass::format(int, char, Print&)+0xb0>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    d03c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
   *
   * \param[in] config SPI configuration.
   * \return generic card pointer.
   */
  SdCard* newCard(SdSpiConfig config) {
    m_spiCard.begin(config);
    d040:	f504 6594 	add.w	r5, r4, #1184	; 0x4a0
    d044:	9302      	str	r3, [sp, #8]
    d046:	4628      	mov	r0, r5
    d048:	f8d4 34c8 	ldr.w	r3, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    d04c:	9303      	str	r3, [sp, #12]
    d04e:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    d052:	f8ad 3004 	strh.w	r3, [sp, #4]
    d056:	e899 000e 	ldmia.w	r9, {r1, r2, r3}
    d05a:	f005 fd7d 	bl	12b58 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    d05e:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    d062:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d066:	2b00      	cmp	r3, #0
    d068:	d1c3      	bne.n	cff2 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d06a:	2301      	movs	r3, #1
    d06c:	4629      	mov	r1, r5
    d06e:	4638      	mov	r0, r7
    d070:	461a      	mov	r2, r3
    d072:	f004 fe39 	bl	11ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d076:	e7bc      	b.n	cff2 <SDClass::format(int, char, Print&)+0x22>
		ret = fatFormatter.format(card, buf, &pr);
    d078:	f004 f89c 	bl	111b4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>
    d07c:	4606      	mov	r6, r0
    d07e:	e7cf      	b.n	d020 <SDClass::format(int, char, Print&)+0x50>
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    d080:	f204 4594 	addw	r5, r4, #1172	; 0x494
    d084:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    d088:	4628      	mov	r0, r5
    d08a:	f006 fb19 	bl	136c0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    d08e:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    d090:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d094:	f005 fe0a 	bl	12cac <SdioCard::errorCode() const>
    d098:	2800      	cmp	r0, #0
    d09a:	d1aa      	bne.n	cff2 <SDClass::format(int, char, Print&)+0x22>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d09c:	2301      	movs	r3, #1
    d09e:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    d0a2:	4638      	mov	r0, r7
    d0a4:	461a      	mov	r2, r3
    d0a6:	f004 fe1f 	bl	11ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d0aa:	e7a2      	b.n	cff2 <SDClass::format(int, char, Print&)+0x22>

0000d0ac <SDClass::mediaPresent()>:
	}
	return false;
}

bool SDClass::mediaPresent()
{
    d0ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  SdCard* card() {return m_card;}
    d0ae:	f8d0 6490 	ldr.w	r6, [r0, #1168]	; 0x490
    d0b2:	b085      	sub	sp, #20
    d0b4:	4604      	mov	r4, r0
	//Serial.print("mediaPresent: ");
	bool ret;
	SdCard *card = sdfs.card();
//	Serial.printf("mediaPresent: card:%x cs:%u cd:%u\n", (uint32_t)card, csPin_, cdPin_);
	if (card) {
    d0b6:	2e00      	cmp	r6, #0
    d0b8:	d042      	beq.n	d140 <SDClass::mediaPresent()+0x94>
		if (cardPreviouslyPresent) {
    d0ba:	f890 54d0 	ldrb.w	r5, [r0, #1232]	; 0x4d0
			#ifdef BUILTIN_SDCARD
			uint32_t s;
			if (csPin_ == BUILTIN_SDCARD) {
    d0be:	f890 34d1 	ldrb.w	r3, [r0, #1233]	; 0x4d1
		if (cardPreviouslyPresent) {
    d0c2:	b185      	cbz	r5, d0e6 <SDClass::mediaPresent()+0x3a>
			if (csPin_ == BUILTIN_SDCARD) {
    d0c4:	2bfe      	cmp	r3, #254	; 0xfe
    d0c6:	d063      	beq.n	d190 <SDClass::mediaPresent()+0xe4>
			#else
			const uint32_t s = 0xFFFFFFFF;
			#endif
			if (s == 0xFFFFFFFF) {
				// see if we have digital pin to bypass...
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d0c8:	f894 04d2 	ldrb.w	r0, [r4, #1234]	; 0x4d2
    d0cc:	2836      	cmp	r0, #54	; 0x36
    d0ce:	d93d      	bls.n	d14c <SDClass::mediaPresent()+0xa0>
				else {
					// SPI doesn't have 32 bit status, read CID register
					cid_t cid;
					ret = card->readCID(&cid);
    d0d0:	6833      	ldr	r3, [r6, #0]
    d0d2:	4669      	mov	r1, sp
    d0d4:	4630      	mov	r0, r6
    d0d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    d0d8:	4798      	blx	r3
    d0da:	4605      	mov	r5, r0
		ret = false;
	}
	//Serial.println();
	cardPreviouslyPresent = ret;
	return ret;
}
    d0dc:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    d0de:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    d0e2:	b005      	add	sp, #20
    d0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (csPin_ == BUILTIN_SDCARD) ret = digitalReadFast(_SD_DAT3);
    d0e6:	2bfe      	cmp	r3, #254	; 0xfe
    d0e8:	d026      	beq.n	d138 <SDClass::mediaPresent()+0x8c>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d0ea:	f890 04d2 	ldrb.w	r0, [r0, #1234]	; 0x4d2
    d0ee:	2836      	cmp	r0, #54	; 0x36
    d0f0:	d949      	bls.n	d186 <SDClass::mediaPresent()+0xda>
    if (spiConfigBackupPin == 255) {
    d0f2:	f894 34c0 	ldrb.w	r3, [r4, #1216]	; 0x4c0
				ret = sdfs.restart();
    d0f6:	1d27      	adds	r7, r4, #4
    d0f8:	2bff      	cmp	r3, #255	; 0xff
    d0fa:	d02d      	beq.n	d158 <SDClass::mediaPresent()+0xac>
      SdSpiConfig spiConfig(spiConfigBackupPin, spiConfigBackupOptions,
    d0fc:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    m_spiCard.begin(config);
    d100:	f504 6694 	add.w	r6, r4, #1184	; 0x4a0
    d104:	f8d4 24c8 	ldr.w	r2, [r4, #1224]	; 0x4c8
  bool cardBegin(SdSpiConfig spiConfig) {
    d108:	9301      	str	r3, [sp, #4]
    d10a:	4630      	mov	r0, r6
    d10c:	f8b4 34c0 	ldrh.w	r3, [r4, #1216]	; 0x4c0
    d110:	9202      	str	r2, [sp, #8]
    d112:	f8ad 3000 	strh.w	r3, [sp]
    d116:	466b      	mov	r3, sp
    d118:	cb0e      	ldmia	r3, {r1, r2, r3}
    d11a:	f005 fd1d 	bl	12b58 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    d11e:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    d122:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d126:	b963      	cbnz	r3, d142 <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d128:	2301      	movs	r3, #1
    d12a:	4631      	mov	r1, r6
    d12c:	4638      	mov	r0, r7
    d12e:	461a      	mov	r2, r3
    d130:	f004 fdda 	bl	11ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d134:	4605      	mov	r5, r0
    d136:	e004      	b.n	d142 <SDClass::mediaPresent()+0x96>
			return (CORE_PIN46_PINREG & CORE_PIN46_BITMASK) ? 1 : 0;
    d138:	4b1f      	ldr	r3, [pc, #124]	; (d1b8 <SDClass::mediaPresent()+0x10c>)
    d13a:	689b      	ldr	r3, [r3, #8]
			if (ret)
    d13c:	039b      	lsls	r3, r3, #14
    d13e:	d4d8      	bmi.n	d0f2 <SDClass::mediaPresent()+0x46>
		ret = false;
    d140:	2500      	movs	r5, #0
}
    d142:	4628      	mov	r0, r5
	cardPreviouslyPresent = ret;
    d144:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
}
    d148:	b005      	add	sp, #20
    d14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d14c:	f008 ff4a 	bl	15fe4 <digitalRead>
    d150:	1e05      	subs	r5, r0, #0
    d152:	bf18      	it	ne
    d154:	2501      	movne	r5, #1
    d156:	e7f4      	b.n	d142 <SDClass::mediaPresent()+0x96>
    m_sdioCard.begin(config);
    d158:	f204 4694 	addw	r6, r4, #1172	; 0x494
    d15c:	f894 14cc 	ldrb.w	r1, [r4, #1228]	; 0x4cc
    d160:	4630      	mov	r0, r6
    d162:	f006 faad 	bl	136c0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    d166:	4630      	mov	r0, r6
    m_card = m_cardFactory.newCard(sdioConfig);
    d168:	f8c4 6490 	str.w	r6, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d16c:	f005 fd9e 	bl	12cac <SdioCard::errorCode() const>
    d170:	2800      	cmp	r0, #0
    d172:	d1e6      	bne.n	d142 <SDClass::mediaPresent()+0x96>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d174:	2301      	movs	r3, #1
    d176:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    d17a:	4638      	mov	r0, r7
    d17c:	461a      	mov	r2, r3
    d17e:	f004 fdb3 	bl	11ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d182:	4605      	mov	r5, r0
    d184:	e7dd      	b.n	d142 <SDClass::mediaPresent()+0x96>
				if (cdPin_ < NUM_DIGITAL_PINS) ret = digitalRead(cdPin_);
    d186:	f008 ff2d 	bl	15fe4 <digitalRead>
			if (ret)
    d18a:	2800      	cmp	r0, #0
    d18c:	d1b1      	bne.n	d0f2 <SDClass::mediaPresent()+0x46>
    d18e:	e7d7      	b.n	d140 <SDClass::mediaPresent()+0x94>
				s = card->status();
    d190:	6833      	ldr	r3, [r6, #0]
    d192:	4630      	mov	r0, r6
    d194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    d196:	4798      	blx	r3
			if (s == 0xFFFFFFFF) {
    d198:	1c42      	adds	r2, r0, #1
				s = card->status();
    d19a:	4603      	mov	r3, r0
			if (s == 0xFFFFFFFF) {
    d19c:	d094      	beq.n	d0c8 <SDClass::mediaPresent()+0x1c>
			} else if (s == 0) {
    d19e:	2800      	cmp	r0, #0
    d1a0:	d1cf      	bne.n	d142 <SDClass::mediaPresent()+0x96>
				if (csPin_ == BUILTIN_SDCARD) 
    d1a2:	f894 24d1 	ldrb.w	r2, [r4, #1233]	; 0x4d1
    d1a6:	2afe      	cmp	r2, #254	; 0xfe
    d1a8:	d1ca      	bne.n	d140 <SDClass::mediaPresent()+0x94>
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d1aa:	2103      	movs	r1, #3
    d1ac:	202e      	movs	r0, #46	; 0x2e
				ret = false;
    d1ae:	461d      	mov	r5, r3
					pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d1b0:	f008 ff2a 	bl	16008 <pinMode>
    d1b4:	e7c5      	b.n	d142 <SDClass::mediaPresent()+0x96>
    d1b6:	bf00      	nop
    d1b8:	42008000 	.word	0x42008000

0000d1bc <SDClass::begin(unsigned char)>:
bool SDClass::begin(uint8_t csPin) {
    d1bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1be:	460d      	mov	r5, r1
    d1c0:	4604      	mov	r4, r0
    d1c2:	b085      	sub	sp, #20
	FsDateTime::setCallback(dateTime);
    d1c4:	4830      	ldr	r0, [pc, #192]	; (d288 <SDClass::begin(unsigned char)+0xcc>)
    d1c6:	f006 ffb7 	bl	14138 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>
	if (csPin == BUILTIN_SDCARD) {
    d1ca:	2dfe      	cmp	r5, #254	; 0xfe
	csPin_ = csPin; // remember which one passed in. 
    d1cc:	f884 54d1 	strb.w	r5, [r4, #1233]	; 0x4d1
	if (csPin == BUILTIN_SDCARD) {
    d1d0:	d026      	beq.n	d220 <SDClass::begin(unsigned char)+0x64>
	if (csPin < NUM_DIGITAL_PINS) {
    d1d2:	2d36      	cmp	r5, #54	; 0x36
    d1d4:	d902      	bls.n	d1dc <SDClass::begin(unsigned char)+0x20>
	return false;
    d1d6:	2000      	movs	r0, #0
}
    d1d8:	b005      	add	sp, #20
    d1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    spiConfigBackupOptions = spiConfig.options;
    d1dc:	2600      	movs	r6, #0
    spiConfigBackupClock = spiConfig.maxSck;
    d1de:	4b2b      	ldr	r3, [pc, #172]	; (d28c <SDClass::begin(unsigned char)+0xd0>)
    m_spiCard.begin(config);
    d1e0:	f504 6794 	add.w	r7, r4, #1184	; 0x4a0
    d1e4:	f88d 5004 	strb.w	r5, [sp, #4]
    d1e8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    d1ec:	f88d 6005 	strb.w	r6, [sp, #5]
    d1f0:	4638      	mov	r0, r7
    spiConfigBackupPin = spiConfig.csPin;
    d1f2:	f884 54c0 	strb.w	r5, [r4, #1216]	; 0x4c0
    spiConfigBackupOptions = spiConfig.options;
    d1f6:	f884 64c1 	strb.w	r6, [r4, #1217]	; 0x4c1
    spiConfigBackupPort = spiConfig.spiPort;
    d1fa:	f8c4 64c8 	str.w	r6, [r4, #1224]	; 0x4c8
    d1fe:	e9cd 3602 	strd	r3, r6, [sp, #8]
    d202:	ab04      	add	r3, sp, #16
    d204:	e913 000e 	ldmdb	r3, {r1, r2, r3}
    d208:	f005 fca6 	bl	12b58 <DedicatedSpiCard::begin(SdSpiConfig)>
    return m_card && !m_card->errorCode();
    d20c:	f894 34b1 	ldrb.w	r3, [r4, #1201]	; 0x4b1
    m_card = m_cardFactory.newCard(spiConfig);
    d210:	f8c4 7490 	str.w	r7, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d214:	b383      	cbz	r3, d278 <SDClass::begin(unsigned char)+0xbc>
    return cardBegin(spiConfig) && Vol::begin(m_card);
    d216:	4630      	mov	r0, r6
		cardPreviouslyPresent = ret;
    d218:	f884 04d0 	strb.w	r0, [r4, #1232]	; 0x4d0
}
    d21c:	b005      	add	sp, #20
    d21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_sdioCard.begin(config);
    d220:	f204 4594 	addw	r5, r4, #1172	; 0x494
    sdioConfigBackup = sdioConfig;
    d224:	2300      	movs	r3, #0
    spiConfigBackupPin = 255;
    d226:	22ff      	movs	r2, #255	; 0xff
    d228:	4619      	mov	r1, r3
    d22a:	4628      	mov	r0, r5
    sdioConfigBackup = sdioConfig;
    d22c:	f884 34cc 	strb.w	r3, [r4, #1228]	; 0x4cc
    spiConfigBackupPin = 255;
    d230:	f884 24c0 	strb.w	r2, [r4, #1216]	; 0x4c0
    d234:	f006 fa44 	bl	136c0 <SdioCard::begin(SdioConfig)>
    return m_card && !m_card->errorCode();
    d238:	4628      	mov	r0, r5
    m_card = m_cardFactory.newCard(sdioConfig);
    d23a:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
    return m_card && !m_card->errorCode();
    d23e:	f005 fd35 	bl	12cac <SdioCard::errorCode() const>
    d242:	b970      	cbnz	r0, d262 <SDClass::begin(unsigned char)+0xa6>
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    d244:	2301      	movs	r3, #1
    d246:	f8d4 1490 	ldr.w	r1, [r4, #1168]	; 0x490
    d24a:	1d20      	adds	r0, r4, #4
    d24c:	461a      	mov	r2, r3
    d24e:	f004 fd4b 	bl	11ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d252:	b130      	cbz	r0, d262 <SDClass::begin(unsigned char)+0xa6>
		cardPreviouslyPresent = ret;
    d254:	2201      	movs	r2, #1
		cdPin_ = _SD_DAT3;
    d256:	232e      	movs	r3, #46	; 0x2e
		cardPreviouslyPresent = ret;
    d258:	f884 24d0 	strb.w	r2, [r4, #1232]	; 0x4d0
		cdPin_ = _SD_DAT3;
    d25c:	f884 34d2 	strb.w	r3, [r4, #1234]	; 0x4d2
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d260:	e7ba      	b.n	d1d8 <SDClass::begin(unsigned char)+0x1c>
		cdPin_ = _SD_DAT3;
    d262:	202e      	movs	r0, #46	; 0x2e
		cardPreviouslyPresent = ret;
    d264:	2500      	movs	r5, #0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d266:	2103      	movs	r1, #3
		cdPin_ = _SD_DAT3;
    d268:	f884 04d2 	strb.w	r0, [r4, #1234]	; 0x4d2
		cardPreviouslyPresent = ret;
    d26c:	f884 54d0 	strb.w	r5, [r4, #1232]	; 0x4d0
		if (!ret) pinMode(_SD_DAT3, INPUT_PULLDOWN);
    d270:	f008 feca 	bl	16008 <pinMode>
    d274:	4628      	mov	r0, r5
    d276:	e7af      	b.n	d1d8 <SDClass::begin(unsigned char)+0x1c>
    d278:	2301      	movs	r3, #1
    d27a:	4639      	mov	r1, r7
    d27c:	1d20      	adds	r0, r4, #4
    d27e:	461a      	mov	r2, r3
    d280:	f004 fd32 	bl	11ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>
    d284:	e7c8      	b.n	d218 <SDClass::begin(unsigned char)+0x5c>
    d286:	bf00      	nop
    d288:	0000cca1 	.word	0x0000cca1
    d28c:	017d7840 	.word	0x017d7840

0000d290 <_GLOBAL__sub_I_SD>:
	SDClass() { }
    d290:	4818      	ldr	r0, [pc, #96]	; (d2f4 <_GLOBAL__sub_I_SD+0x64>)
  /** SD is in multi-sector read state. */
  static const uint8_t READ_STATE = 1;
  /** SD is in multi-sector write state. */
  static const uint8_t WRITE_STATE = 2;
  /** Construct an instance of SharedSpiCard. */
  SharedSpiCard() {}
    d292:	f04f 0c29 	mov.w	ip, #41	; 0x29
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    d296:	4a18      	ldr	r2, [pc, #96]	; (d2f8 <_GLOBAL__sub_I_SD+0x68>)
  FsVolume() {}
    d298:	2300      	movs	r3, #0
	SPISettings() : _clock(4000000) {
    d29a:	4918      	ldr	r1, [pc, #96]	; (d2fc <_GLOBAL__sub_I_SD+0x6c>)
	} else {
		cdPin_ = 0xff;
		return false;
	}
	return true;
}
    d29c:	b410      	push	{r4}
    d29e:	f8c0 2494 	str.w	r2, [r0, #1172]	; 0x494
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    d2a2:	2207      	movs	r2, #7
    d2a4:	f880 c4b1 	strb.w	ip, [r0, #1201]	; 0x4b1
    d2a8:	f04f 0cff 	mov.w	ip, #255	; 0xff
	SPISettings() : _clock(4000000) {
    d2ac:	f8c0 14a8 	str.w	r1, [r0, #1192]	; 0x4a8
    d2b0:	f44f 417f 	mov.w	r1, #65280	; 0xff00
    d2b4:	4c12      	ldr	r4, [pc, #72]	; (d300 <_GLOBAL__sub_I_SD+0x70>)
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    d2b6:	f8c0 24ac 	str.w	r2, [r0, #1196]	; 0x4ac
 * \brief Raw access to SD and SDHC flash memory cards via dedicate SPI port.
 */
class DedicatedSpiCard : public SharedSpiCard {
 public:
  /** Construct an instance of DedicatedSpiCard. */
  DedicatedSpiCard() {}
    d2ba:	4a12      	ldr	r2, [pc, #72]	; (d304 <_GLOBAL__sub_I_SD+0x74>)
    d2bc:	f8a0 14d0 	strh.w	r1, [r0, #1232]	; 0x4d0
  SdioConfig() {}
    d2c0:	f8a0 349c 	strh.w	r3, [r0, #1180]	; 0x49c
  SharedSpiCard() {}
    d2c4:	f880 34b5 	strb.w	r3, [r0, #1205]	; 0x4b5
    d2c8:	f880 34cc 	strb.w	r3, [r0, #1228]	; 0x4cc
    d2cc:	f880 c4d2 	strb.w	ip, [r0, #1234]	; 0x4d2
    d2d0:	6004      	str	r4, [r0, #0]
  DedicatedSpiCard() {}
    d2d2:	f8c0 24a0 	str.w	r2, [r0, #1184]	; 0x4a0
SDClass SD;
    d2d6:	490c      	ldr	r1, [pc, #48]	; (d308 <_GLOBAL__sub_I_SD+0x78>)
    d2d8:	4a0c      	ldr	r2, [pc, #48]	; (d30c <_GLOBAL__sub_I_SD+0x7c>)
}
    d2da:	f85d 4b04 	ldr.w	r4, [sp], #4
    d2de:	f8c0 3484 	str.w	r3, [r0, #1156]	; 0x484
    d2e2:	f8c0 3488 	str.w	r3, [r0, #1160]	; 0x488
class SdBase : public Vol {
    d2e6:	f8c0 3490 	str.w	r3, [r0, #1168]	; 0x490
    d2ea:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
SDClass SD;
    d2ee:	f00b bc33 	b.w	18b58 <__aeabi_atexit>
    d2f2:	bf00      	nop
    d2f4:	200045f8 	.word	0x200045f8
    d2f8:	200015f8 	.word	0x200015f8
    d2fc:	003d0900 	.word	0x003d0900
    d300:	200015a4 	.word	0x200015a4
    d304:	200013c0 	.word	0x200013c0
    d308:	0000cc9d 	.word	0x0000cc9d
    d30c:	20003338 	.word	0x20003338

0000d310 <ExFatFile::dirCache(unsigned char, unsigned char)>:
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    d310:	b570      	push	{r4, r5, r6, lr}
  DirPos_t pos = m_dirPos;
    d312:	f100 0324 	add.w	r3, r0, #36	; 0x24
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    d316:	b084      	sub	sp, #16
    d318:	468c      	mov	ip, r1
    d31a:	4604      	mov	r4, r0
  DirPos_t pos = m_dirPos;
    d31c:	ad01      	add	r5, sp, #4
uint8_t* ExFatFile::dirCache(uint8_t set, uint8_t options) {
    d31e:	4616      	mov	r6, r2
  DirPos_t pos = m_dirPos;
    d320:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    d324:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  if (m_vol->dirSeek(&pos, FS_DIR_SIZE*set) != 1) {
    d328:	ea4f 124c 	mov.w	r2, ip, lsl #5
    d32c:	4629      	mov	r1, r5
    d32e:	6a20      	ldr	r0, [r4, #32]
    d330:	f001 fec4 	bl	f0bc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    d334:	2801      	cmp	r0, #1
    d336:	d106      	bne.n	d346 <ExFatFile::dirCache(unsigned char, unsigned char)+0x36>
  return m_vol->dirCache(&pos, options);
    d338:	4632      	mov	r2, r6
    d33a:	4629      	mov	r1, r5
    d33c:	6a20      	ldr	r0, [r4, #32]
    d33e:	f001 fea1 	bl	f084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
}
    d342:	b004      	add	sp, #16
    d344:	bd70      	pop	{r4, r5, r6, pc}
    return nullptr;
    d346:	2000      	movs	r0, #0
}
    d348:	b004      	add	sp, #16
    d34a:	bd70      	pop	{r4, r5, r6, pc}

0000d34c <ExFatFile::close()>:
bool ExFatFile::close() {
    d34c:	b510      	push	{r4, lr}
    d34e:	4604      	mov	r4, r0
  bool rtn = sync();
    d350:	f000 fdba 	bl	dec8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    d354:	2300      	movs	r3, #0
    d356:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    d35a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    d35e:	bd10      	pop	{r4, pc}

0000d360 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    d360:	b538      	push	{r3, r4, r5, lr}
    d362:	4614      	mov	r4, r2
    d364:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    d366:	2200      	movs	r2, #0
    d368:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d36c:	6a00      	ldr	r0, [r0, #32]
    d36e:	f001 fe89 	bl	f084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    d372:	4603      	mov	r3, r0
    d374:	b120      	cbz	r0, d380 <ExFatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x20>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    d376:	8942      	ldrh	r2, [r0, #10]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->createDate);
  *ptime = getLe16(df->createTime);
  return true;
    d378:	2001      	movs	r0, #1
  *pdate = getLe16(df->createDate);
    d37a:	802a      	strh	r2, [r5, #0]
    d37c:	891b      	ldrh	r3, [r3, #8]
  *ptime = getLe16(df->createTime);
    d37e:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    d380:	bd38      	pop	{r3, r4, r5, pc}
    d382:	bf00      	nop

0000d384 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
//------------------------------------------------------------------------------
bool ExFatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    d384:	b538      	push	{r3, r4, r5, lr}
    d386:	4614      	mov	r4, r2
    d388:	460d      	mov	r5, r1
  DirFile_t* df = reinterpret_cast<DirFile_t*>
                 (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_READ));
    d38a:	2200      	movs	r2, #0
    d38c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d390:	6a00      	ldr	r0, [r0, #32]
    d392:	f001 fe77 	bl	f084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    d396:	4603      	mov	r3, r0
    d398:	b120      	cbz	r0, d3a4 <ExFatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x20>
    d39a:	89c2      	ldrh	r2, [r0, #14]
    DBG_FAIL_MACRO;
    goto fail;
  }
  *pdate = getLe16(df->modifyDate);
  *ptime = getLe16(df->modifyTime);
  return true;
    d39c:	2001      	movs	r0, #1
  *pdate = getLe16(df->modifyDate);
    d39e:	802a      	strh	r2, [r5, #0]
    d3a0:	899b      	ldrh	r3, [r3, #12]
  *ptime = getLe16(df->modifyTime);
    d3a2:	8023      	strh	r3, [r4, #0]

 fail:
  return false;
}
    d3a4:	bd38      	pop	{r3, r4, r5, pc}
    d3a6:	bf00      	nop

0000d3a8 <ExFatFile::openRoot(ExFatVolume*)>:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    d3a8:	b538      	push	{r3, r4, r5, lr}
    d3aa:	460d      	mov	r5, r1
  if (isOpen()) {
    d3ac:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
    d3b0:	b109      	cbz	r1, d3b6 <ExFatFile::openRoot(ExFatVolume*)+0xe>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    d3b2:	2000      	movs	r0, #0
}
    d3b4:	bd38      	pop	{r3, r4, r5, pc}
  memset(this, 0, sizeof(ExFatFile));
    d3b6:	2238      	movs	r2, #56	; 0x38
    d3b8:	4604      	mov	r4, r0
    d3ba:	f015 f891 	bl	224e0 <memset>
  m_flags = FILE_FLAG_READ;
    d3be:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    d3c0:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    d3c2:	6225      	str	r5, [r4, #32]
  m_flags = FILE_FLAG_READ;
    d3c4:	4618      	mov	r0, r3
    d3c6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    d3ca:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
}
    d3ce:	bd38      	pop	{r3, r4, r5, pc}

0000d3d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const char* path,
                            ExName_t* fname, const char** ptr) {
    d3d0:	b4f0      	push	{r4, r5, r6, r7}
    d3d2:	460d      	mov	r5, r1
  // Skip leading spaces.
  while (*path == ' ') {
    d3d4:	7809      	ldrb	r1, [r1, #0]
    d3d6:	2920      	cmp	r1, #32
    d3d8:	d103      	bne.n	d3e2 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    d3da:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    d3de:	2c20      	cmp	r4, #32
    d3e0:	d0fb      	beq.n	d3da <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->begin = path;
    d3e2:	6015      	str	r5, [r2, #0]
  fname->end = path;
    d3e4:	6095      	str	r5, [r2, #8]
  while (*path && !isDirSeparator(*path)) {
    d3e6:	782c      	ldrb	r4, [r5, #0]
    d3e8:	2c2f      	cmp	r4, #47	; 0x2f
    d3ea:	d011      	beq.n	d410 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    d3ec:	b184      	cbz	r4, d410 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    d3ee:	1c6e      	adds	r6, r5, #1
    d3f0:	2c3c      	cmp	r4, #60	; 0x3c
    d3f2:	4f1d      	ldr	r7, [pc, #116]	; (d468 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x98>)
    uint8_t c = *path++;
    d3f4:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    d3f6:	d82a      	bhi.n	d44e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x7e>
    d3f8:	2c21      	cmp	r4, #33	; 0x21
    d3fa:	d812      	bhi.n	d422 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x52>
    d3fc:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
    d400:	f1bc 0f1e 	cmp.w	ip, #30
    d404:	d816      	bhi.n	d434 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x64>
  *ptr = path;
  return hashName(fname);

 fail:
  return false;
}
    d406:	2000      	movs	r0, #0
    d408:	bcf0      	pop	{r4, r5, r6, r7}
    d40a:	4770      	bx	lr
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
    d40c:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    d410:	2c20      	cmp	r4, #32
    d412:	d0fb      	beq.n	d40c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
    d414:	2c2f      	cmp	r4, #47	; 0x2f
    d416:	d0f9      	beq.n	d40c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3c>
  *ptr = path;
    d418:	601d      	str	r5, [r3, #0]
  return hashName(fname);
    d41a:	4611      	mov	r1, r2
}
    d41c:	bcf0      	pop	{r4, r5, r6, r7}
  return hashName(fname);
    d41e:	f001 bd1f 	b.w	ee60 <ExFatFile::hashName(ExName_t*)>
    d422:	f1a4 0c22 	sub.w	ip, r4, #34	; 0x22
    d426:	fa5f fc8c 	uxtb.w	ip, ip
    d42a:	fa27 fc0c 	lsr.w	ip, r7, ip
    d42e:	f01c 0f01 	tst.w	ip, #1
    d432:	d1e8      	bne.n	d406 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    if (c != '.' && c != ' ') {
    d434:	2c2e      	cmp	r4, #46	; 0x2e
    d436:	d001      	beq.n	d43c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    d438:	2c20      	cmp	r4, #32
    d43a:	d10d      	bne.n	d458 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
  while (*path && !isDirSeparator(*path)) {
    d43c:	f816 4b01 	ldrb.w	r4, [r6], #1
    d440:	2c00      	cmp	r4, #0
    d442:	d0e5      	beq.n	d410 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    d444:	2c2f      	cmp	r4, #47	; 0x2f
    d446:	d0e3      	beq.n	d410 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x40>
    uint8_t c = *path++;
    d448:	2c3c      	cmp	r4, #60	; 0x3c
    d44a:	4635      	mov	r5, r6
    if (!lfnLegalChar(c)) {
    d44c:	d9d4      	bls.n	d3f8 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x28>
    d44e:	2c5c      	cmp	r4, #92	; 0x5c
    d450:	d0d9      	beq.n	d406 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
    d452:	d903      	bls.n	d45c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8c>
    d454:	2c7c      	cmp	r4, #124	; 0x7c
    d456:	d0d6      	beq.n	d406 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      fname->end = path;
    d458:	6096      	str	r6, [r2, #8]
    d45a:	e7ef      	b.n	d43c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6c>
    d45c:	3c3e      	subs	r4, #62	; 0x3e
    d45e:	2c01      	cmp	r4, #1
    d460:	d8fa      	bhi.n	d458 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x88>
}
    d462:	2000      	movs	r0, #0
    d464:	bcf0      	pop	{r4, r5, r6, r7}
    d466:	4770      	bx	lr
    d468:	05002101 	.word	0x05002101

0000d46c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    d470:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    d474:	b083      	sub	sp, #12
    d476:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    d478:	07dc      	lsls	r4, r3, #31
    d47a:	d574      	bpl.n	d566 <ExFatFile::read(void*, unsigned int)+0xfa>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    d47c:	0658      	lsls	r0, r3, #25
    d47e:	460f      	mov	r7, r1
    d480:	4690      	mov	r8, r2
    d482:	f140 80b0 	bpl.w	d5e6 <ExFatFile::read(void*, unsigned int)+0x17a>
    if ((m_curPosition + count) > m_validLength) {
    d486:	e9d5 2300 	ldrd	r2, r3, [r5]
    d48a:	e9d5 1004 	ldrd	r1, r0, [r5, #16]
    d48e:	eb18 0402 	adds.w	r4, r8, r2
    d492:	f143 0300 	adc.w	r3, r3, #0
    d496:	42a1      	cmp	r1, r4
    d498:	eb70 0303 	sbcs.w	r3, r0, r3
    d49c:	f0c0 80a9 	bcc.w	d5f2 <ExFatFile::read(void*, unsigned int)+0x186>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    d4a0:	f1b8 0f00 	cmp.w	r8, #0
    d4a4:	d05b      	beq.n	d55e <ExFatFile::read(void*, unsigned int)+0xf2>
    if ((m_curPosition + count) > m_validLength) {
    d4a6:	4646      	mov	r6, r8
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    d4a8:	f105 0918 	add.w	r9, r5, #24
    if ((m_curPosition + count) > m_validLength) {
    d4ac:	e9d5 3200 	ldrd	r3, r2, [r5]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    d4b0:	f8d5 a020 	ldr.w	sl, [r5, #32]
    d4b4:	f8da 4438 	ldr.w	r4, [sl, #1080]	; 0x438
    d4b8:	401c      	ands	r4, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    d4ba:	f3c4 0b08 	ubfx	fp, r4, #0, #9
    if (clusterOffset == 0) {
    d4be:	2c00      	cmp	r4, #0
    d4c0:	d170      	bne.n	d5a4 <ExFatFile::read(void*, unsigned int)+0x138>
      if (m_curPosition == 0) {
    d4c2:	4313      	orrs	r3, r2
    d4c4:	d170      	bne.n	d5a8 <ExFatFile::read(void*, unsigned int)+0x13c>
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    d4c6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d4ca:	065a      	lsls	r2, r3, #25
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
  /** \return the root directory start cluster number. */
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    d4cc:	bf4c      	ite	mi
    d4ce:	f8da 2434 	ldrmi.w	r2, [sl, #1076]	; 0x434
    d4d2:	69ea      	ldrpl	r2, [r5, #28]
        m_curCluster++;
    d4d4:	61aa      	str	r2, [r5, #24]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    d4d6:	f89a 0445 	ldrb.w	r0, [sl, #1093]	; 0x445
    d4da:	3a02      	subs	r2, #2
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
    d4dc:	f8da 142c 	ldr.w	r1, [sl, #1068]	; 0x42c
             (clusterOffset >> m_vol->bytesPerSectorShift());
    d4e0:	0a63      	lsrs	r3, r4, #9
    d4e2:	4082      	lsls	r2, r0
    sector = m_vol->clusterStartSector(m_curCluster) +
    d4e4:	eb01 2154 	add.w	r1, r1, r4, lsr #9
    d4e8:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    d4ea:	f1bb 0f00 	cmp.w	fp, #0
    d4ee:	d145      	bne.n	d57c <ExFatFile::read(void*, unsigned int)+0x110>
    d4f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    d4f4:	d342      	bcc.n	d57c <ExFatFile::read(void*, unsigned int)+0x110>
   * \return Address of cached sector.
   */
  uint8_t* prepare(uint32_t sector, uint8_t option);
  /** \return Logical sector number for cached sector. */
  uint32_t sector() {
    return m_sector;
    d4f6:	f8da 221c 	ldr.w	r2, [sl, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    d4fa:	4291      	cmp	r1, r2
    d4fc:	d03e      	beq.n	d57c <ExFatFile::read(void*, unsigned int)+0x110>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    d4fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    d502:	d358      	bcc.n	d5b6 <ExFatFile::read(void*, unsigned int)+0x14a>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    d504:	f04f 0b01 	mov.w	fp, #1
    d508:	fa0b fb00 	lsl.w	fp, fp, r0
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    d50c:	ebab 0b03 	sub.w	fp, fp, r3
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    d510:	0a73      	lsrs	r3, r6, #9
    d512:	459b      	cmp	fp, r3
    d514:	bf28      	it	cs
    d516:	469b      	movcs	fp, r3
    return sector <= m_sector && m_sector < (sector + count);
    d518:	4291      	cmp	r1, r2
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    d51a:	ea4f 244b 	mov.w	r4, fp, lsl #9
    d51e:	d80a      	bhi.n	d536 <ExFatFile::read(void*, unsigned int)+0xca>
    d520:	eb01 030b 	add.w	r3, r1, fp
    d524:	429a      	cmp	r2, r3
    d526:	d206      	bcs.n	d536 <ExFatFile::read(void*, unsigned int)+0xca>
    if (isCached(sector, count) && !sync()) {
    d528:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    d52c:	9101      	str	r1, [sp, #4]
    d52e:	f006 fda5 	bl	1407c <FsCache::sync()>
    d532:	9901      	ldr	r1, [sp, #4]
    d534:	b1b8      	cbz	r0, d566 <ExFatFile::read(void*, unsigned int)+0xfa>
    return m_blockDev->readSectors(sector, dst, count);
    d536:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    d53a:	465b      	mov	r3, fp
    d53c:	6802      	ldr	r2, [r0, #0]
    d53e:	f8d2 a014 	ldr.w	sl, [r2, #20]
    d542:	463a      	mov	r2, r7
    d544:	47d0      	blx	sl
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    d546:	b170      	cbz	r0, d566 <ExFatFile::read(void*, unsigned int)+0xfa>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    d548:	4623      	mov	r3, r4
    dst += n;
    d54a:	4427      	add	r7, r4
    m_curPosition += n;
    d54c:	e9d5 1200 	ldrd	r1, r2, [r5]
    d550:	185b      	adds	r3, r3, r1
    d552:	f142 0200 	adc.w	r2, r2, #0
  while (toRead) {
    d556:	1b36      	subs	r6, r6, r4
    m_curPosition += n;
    d558:	e9c5 3200 	strd	r3, r2, [r5]
  while (toRead) {
    d55c:	d1a8      	bne.n	d4b0 <ExFatFile::read(void*, unsigned int)+0x44>
    toRead -= n;
  }
  return count - toRead;
    d55e:	4640      	mov	r0, r8

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    d560:	b003      	add	sp, #12
    d562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_error |= READ_ERROR;
    d566:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    d56a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    d56e:	f043 0302 	orr.w	r3, r3, #2
    d572:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
}
    d576:	b003      	add	sp, #12
    d578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
    d57c:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    d580:	2200      	movs	r2, #0
    d582:	f50a 7004 	add.w	r0, sl, #528	; 0x210
    d586:	42b4      	cmp	r4, r6
    d588:	bf28      	it	cs
    d58a:	4634      	movcs	r4, r6
    d58c:	f006 fda2 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    d590:	2800      	cmp	r0, #0
    d592:	d0e8      	beq.n	d566 <ExFatFile::read(void*, unsigned int)+0xfa>
      memcpy(dst, src, n);
    d594:	eb00 010b 	add.w	r1, r0, fp
    d598:	4622      	mov	r2, r4
    d59a:	4638      	mov	r0, r7
    d59c:	f008 fffe 	bl	1659c <memcpy>
    m_curPosition += n;
    d5a0:	4623      	mov	r3, r4
    d5a2:	e7d2      	b.n	d54a <ExFatFile::read(void*, unsigned int)+0xde>
        m_curCluster++;
    d5a4:	69aa      	ldr	r2, [r5, #24]
    d5a6:	e796      	b.n	d4d6 <ExFatFile::read(void*, unsigned int)+0x6a>
      } else if (isContiguous()) {
    d5a8:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    d5ac:	065b      	lsls	r3, r3, #25
    d5ae:	d50e      	bpl.n	d5ce <ExFatFile::read(void*, unsigned int)+0x162>
        m_curCluster++;
    d5b0:	69aa      	ldr	r2, [r5, #24]
    d5b2:	3201      	adds	r2, #1
    d5b4:	e78e      	b.n	d4d4 <ExFatFile::read(void*, unsigned int)+0x68>
    return m_blockDev->readSector(sector, dst);
    d5b6:	f8da 0214 	ldr.w	r0, [sl, #532]	; 0x214
    d5ba:	463a      	mov	r2, r7
    d5bc:	6803      	ldr	r3, [r0, #0]
    d5be:	691b      	ldr	r3, [r3, #16]
    d5c0:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    d5c2:	2800      	cmp	r0, #0
    d5c4:	d0cf      	beq.n	d566 <ExFatFile::read(void*, unsigned int)+0xfa>
    d5c6:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    d5ca:	461c      	mov	r4, r3
    d5cc:	e7bd      	b.n	d54a <ExFatFile::read(void*, unsigned int)+0xde>
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    d5ce:	464a      	mov	r2, r9
    d5d0:	4650      	mov	r0, sl
    d5d2:	69a9      	ldr	r1, [r5, #24]
    d5d4:	f001 fdb4 	bl	f140 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
        if (fg < 0) {
    d5d8:	2800      	cmp	r0, #0
    d5da:	dbc4      	blt.n	d566 <ExFatFile::read(void*, unsigned int)+0xfa>
        if (fg == 0) {
    d5dc:	d00c      	beq.n	d5f8 <ExFatFile::read(void*, unsigned int)+0x18c>
    sector = m_vol->clusterStartSector(m_curCluster) +
    d5de:	f8d5 a020 	ldr.w	sl, [r5, #32]
    d5e2:	69aa      	ldr	r2, [r5, #24]
    d5e4:	e777      	b.n	d4d6 <ExFatFile::read(void*, unsigned int)+0x6a>
  if (isContiguous() || isFile()) {
    d5e6:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d5ea:	0719      	lsls	r1, r3, #28
    d5ec:	f57f af58 	bpl.w	d4a0 <ExFatFile::read(void*, unsigned int)+0x34>
    d5f0:	e749      	b.n	d486 <ExFatFile::read(void*, unsigned int)+0x1a>
      count = toRead = m_validLength - m_curPosition;
    d5f2:	eba1 0802 	sub.w	r8, r1, r2
    d5f6:	e753      	b.n	d4a0 <ExFatFile::read(void*, unsigned int)+0x34>
          if (isDir()) {
    d5f8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    d5fc:	f013 0f50 	tst.w	r3, #80	; 0x50
    d600:	d0b1      	beq.n	d566 <ExFatFile::read(void*, unsigned int)+0xfa>
  return count - toRead;
    d602:	eba8 0806 	sub.w	r8, r8, r6
    d606:	4640      	mov	r0, r8
    d608:	e7aa      	b.n	d560 <ExFatFile::read(void*, unsigned int)+0xf4>
    d60a:	bf00      	nop

0000d60c <ExFatFile::peek()>:
int ExFatFile::peek() {
    d60c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d60e:	b083      	sub	sp, #12
    return read(&b, 1) == 1 ? b : -1;
    d610:	2201      	movs	r2, #1
    d612:	4604      	mov	r4, r0
  uint32_t curCluster = m_curCluster;
    d614:	6985      	ldr	r5, [r0, #24]
    d616:	f10d 0107 	add.w	r1, sp, #7
  uint64_t curPosition = m_curPosition;
    d61a:	e9d0 6700 	ldrd	r6, r7, [r0]
    d61e:	f7ff ff25 	bl	d46c <ExFatFile::read(void*, unsigned int)>
    d622:	2801      	cmp	r0, #1
  m_curCluster = curCluster;
    d624:	61a5      	str	r5, [r4, #24]
    d626:	bf0c      	ite	eq
    d628:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    d62c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curPosition = curPosition;
    d630:	e9c4 6700 	strd	r6, r7, [r4]
}
    d634:	b003      	add	sp, #12
    d636:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d638 <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    d638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d63c:	461f      	mov	r7, r3
  bool isOpen() const {return m_attributes;}
    d63e:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    d642:	b083      	sub	sp, #12
    d644:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    d646:	f8d0 8018 	ldr.w	r8, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    d64a:	2b00      	cmp	r3, #0
    d64c:	d051      	beq.n	d6f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    d64e:	4616      	mov	r6, r2
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    d650:	e9d0 1c00 	ldrd	r1, ip, [r0]
    d654:	45bc      	cmp	ip, r7
    d656:	bf08      	it	eq
    d658:	4291      	cmpeq	r1, r2
    d65a:	d05c      	beq.n	d716 <ExFatFile::seekSet(unsigned long long)+0xde>
    return true;
  }
  if (pos == 0) {
    d65c:	ea56 0207 	orrs.w	r2, r6, r7
    d660:	d04d      	beq.n	d6fe <ExFatFile::seekSet(unsigned long long)+0xc6>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    d662:	071d      	lsls	r5, r3, #28
    d664:	d504      	bpl.n	d670 <ExFatFile::seekSet(unsigned long long)+0x38>
    if (pos > m_validLength) {
    d666:	e9d0 0204 	ldrd	r0, r2, [r0, #16]
    d66a:	42b0      	cmp	r0, r6
    d66c:	41ba      	sbcs	r2, r7
    d66e:	d340      	bcc.n	d6f2 <ExFatFile::seekSet(unsigned long long)+0xba>
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
  if (isContiguous()) {
    d670:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    d674:	1e75      	subs	r5, r6, #1
    d676:	f8d4 a020 	ldr.w	sl, [r4, #32]
  if (isContiguous()) {
    d67a:	9201      	str	r2, [sp, #4]
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    d67c:	f147 30ff 	adc.w	r0, r7, #4294967295	; 0xffffffff
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    d680:	f89a 2445 	ldrb.w	r2, [sl, #1093]	; 0x445
    d684:	3209      	adds	r2, #9
    d686:	b2d2      	uxtb	r2, r2
    d688:	f1c2 0e20 	rsb	lr, r2, #32
    d68c:	40d5      	lsrs	r5, r2
    d68e:	f1a2 0920 	sub.w	r9, r2, #32
    d692:	fa00 fb0e 	lsl.w	fp, r0, lr
    d696:	fa20 f009 	lsr.w	r0, r0, r9
    d69a:	ea45 050b 	orr.w	r5, r5, fp
    d69e:	4305      	orrs	r5, r0
  if (isContiguous()) {
    d6a0:	9801      	ldr	r0, [sp, #4]
    d6a2:	0640      	lsls	r0, r0, #25
    d6a4:	d433      	bmi.n	d70e <ExFatFile::seekSet(unsigned long long)+0xd6>
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    d6a6:	1e48      	subs	r0, r1, #1
    d6a8:	fa20 f202 	lsr.w	r2, r0, r2
    d6ac:	f14c 30ff 	adc.w	r0, ip, #4294967295	; 0xffffffff
  if (nNew < nCur || m_curPosition == 0) {
    d6b0:	ea51 0c0c 	orrs.w	ip, r1, ip
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    d6b4:	fa00 fe0e 	lsl.w	lr, r0, lr
    d6b8:	fa20 f009 	lsr.w	r0, r0, r9
    d6bc:	ea42 020e 	orr.w	r2, r2, lr
    d6c0:	ea42 0200 	orr.w	r2, r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    d6c4:	d001      	beq.n	d6ca <ExFatFile::seekSet(unsigned long long)+0x92>
    d6c6:	4295      	cmp	r5, r2
    d6c8:	d229      	bcs.n	d71e <ExFatFile::seekSet(unsigned long long)+0xe6>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    d6ca:	065b      	lsls	r3, r3, #25
  uint32_t rootDirectoryCluster() const {return m_rootDirectoryCluster;}
    d6cc:	bf4c      	ite	mi
    d6ce:	f8da 3434 	ldrmi.w	r3, [sl, #1076]	; 0x434
    d6d2:	69e3      	ldrpl	r3, [r4, #28]
    d6d4:	61a3      	str	r3, [r4, #24]
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    d6d6:	f104 0918 	add.w	r9, r4, #24
    d6da:	e006      	b.n	d6ea <ExFatFile::seekSet(unsigned long long)+0xb2>
    d6dc:	69a1      	ldr	r1, [r4, #24]
    d6de:	3d01      	subs	r5, #1
    d6e0:	6a20      	ldr	r0, [r4, #32]
    d6e2:	f001 fd2d 	bl	f140 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    d6e6:	2800      	cmp	r0, #0
    d6e8:	dd03      	ble.n	d6f2 <ExFatFile::seekSet(unsigned long long)+0xba>
    d6ea:	464a      	mov	r2, r9
  while (nNew--) {
    d6ec:	2d00      	cmp	r5, #0
    d6ee:	d1f5      	bne.n	d6dc <ExFatFile::seekSet(unsigned long long)+0xa4>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

 done:
    d6f0:	e007      	b.n	d702 <ExFatFile::seekSet(unsigned long long)+0xca>
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    d6f2:	2000      	movs	r0, #0
  m_curCluster = tmp;
    d6f4:	f8c4 8018 	str.w	r8, [r4, #24]
}
    d6f8:	b003      	add	sp, #12
    d6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = 0;
    d6fe:	2300      	movs	r3, #0
    d700:	6183      	str	r3, [r0, #24]
  return true;
    d702:	2001      	movs	r0, #1
  m_curPosition = pos;
    d704:	e9c4 6700 	strd	r6, r7, [r4]
}
    d708:	b003      	add	sp, #12
    d70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_curCluster = m_firstCluster + nNew;
    d70e:	69e3      	ldr	r3, [r4, #28]
    d710:	442b      	add	r3, r5
    d712:	61a3      	str	r3, [r4, #24]
    goto done;
    d714:	e7f5      	b.n	d702 <ExFatFile::seekSet(unsigned long long)+0xca>
    return true;
    d716:	2001      	movs	r0, #1
}
    d718:	b003      	add	sp, #12
    d71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nNew -= nCur;
    d71e:	1aad      	subs	r5, r5, r2
    d720:	e7d9      	b.n	d6d6 <ExFatFile::seekSet(unsigned long long)+0x9e>
    d722:	bf00      	nop

0000d724 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>:
bool ExFatFile::openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag) {
    d724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d728:	4617      	mov	r7, r2
    d72a:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    d72e:	b08f      	sub	sp, #60	; 0x3c
    d730:	4605      	mov	r5, r0
  if (isOpen() || !dir->isDir()) {
    d732:	2a00      	cmp	r2, #0
    d734:	f040 80d7 	bne.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  bool isDir() const  {return m_attributes & FILE_ATTR_DIR;}
    d738:	468b      	mov	fp, r1
    d73a:	f891 1031 	ldrb.w	r1, [r1, #49]	; 0x31
    d73e:	f011 0f50 	tst.w	r1, #80	; 0x50
    d742:	f000 80d0 	beq.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  switch (oflag & O_ACCMODE) {
    d746:	f003 0103 	and.w	r1, r3, #3
    d74a:	469a      	mov	sl, r3
    d74c:	2903      	cmp	r1, #3
    d74e:	f000 80ca 	beq.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    d752:	3101      	adds	r1, #1
    d754:	f003 0008 	and.w	r0, r3, #8
    d758:	ea41 0300 	orr.w	r3, r1, r0
    d75c:	9302      	str	r3, [sp, #8]
  if (fname) {
    d75e:	2f00      	cmp	r7, #0
    d760:	f000 80cb 	beq.w	d8fa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1d6>
    freeNeed = 2 + (fname->nameLength + 14)/15;
    d764:	6939      	ldr	r1, [r7, #16]
    d766:	f101 080e 	add.w	r8, r1, #14
    d76a:	49b6      	ldr	r1, [pc, #728]	; (da44 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x320>)
    d76c:	fba1 1808 	umull	r1, r8, r1, r8
  if (pos == m_curPosition) {
    d770:	e9db 1000 	ldrd	r1, r0, [fp]
    freeNeed = 2 + (fname->nameLength + 14)/15;
    d774:	ea4f 08d8 	mov.w	r8, r8, lsr #3
  if (pos == m_curPosition) {
    d778:	4301      	orrs	r1, r0
    freeNeed = 2 + (fname->nameLength + 14)/15;
    d77a:	f108 0802 	add.w	r8, r8, #2
    d77e:	fa5f f888 	uxtb.w	r8, r8
  if (pos == m_curPosition) {
    d782:	d005      	beq.n	d790 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
  m_curPosition = pos;
    d784:	2000      	movs	r0, #0
    d786:	2100      	movs	r1, #0
    m_curCluster = 0;
    d788:	f8cb 2018 	str.w	r2, [fp, #24]
  m_curPosition = pos;
    d78c:	e9cb 0100 	strd	r0, r1, [fp]
        inSet = false;
    d790:	2400      	movs	r4, #0
        m_flags |= FILE_FLAG_CONTIGUOUS;
    d792:	9b02      	ldr	r3, [sp, #8]
        inSet = false;
    d794:	4626      	mov	r6, r4
        m_flags |= FILE_FLAG_CONTIGUOUS;
    d796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d79a:	9303      	str	r3, [sp, #12]
    n = dir->read(buf, FS_DIR_SIZE);
    d79c:	2220      	movs	r2, #32
    d79e:	a906      	add	r1, sp, #24
    d7a0:	4658      	mov	r0, fp
    d7a2:	f7ff fe63 	bl	d46c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    d7a6:	b300      	cbz	r0, d7ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    if (n != FS_DIR_SIZE) {
    d7a8:	2820      	cmp	r0, #32
    d7aa:	f040 809c 	bne.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (!(buf[0] & 0x80)) {
    d7ae:	f99d 2018 	ldrsb.w	r2, [sp, #24]
    d7b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    d7b6:	2a00      	cmp	r2, #0
    d7b8:	f2c0 80a2 	blt.w	d900 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1dc>
      if (freeCount == 0) {
    d7bc:	b934      	cbnz	r4, d7cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xa8>
        freePos.position = dir->curPosition() - FS_DIR_SIZE;
    d7be:	f8db 2000 	ldr.w	r2, [fp]
    d7c2:	f1a2 0920 	sub.w	r9, r2, #32
  bool mkdir(ExFatFile* parent, ExName_t* fname);

  bool openPrivate(ExFatFile* dir, ExName_t* fname, oflag_t oflag);
  bool parsePathName(const char* path,
                            ExName_t* fname, const char** ptr);
  uint32_t curCluster() const {return m_curCluster;}
    d7c6:	f8db 2018 	ldr.w	r2, [fp, #24]
    d7ca:	9201      	str	r2, [sp, #4]
      if (freeCount < freeNeed) {
    d7cc:	4544      	cmp	r4, r8
    d7ce:	d201      	bcs.n	d7d4 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb0>
        freeCount++;
    d7d0:	3401      	adds	r4, #1
    d7d2:	b2e4      	uxtb	r4, r4
      if (!buf[0]) {
    d7d4:	2b00      	cmp	r3, #0
    d7d6:	f000 8113 	beq.w	da00 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2dc>
    n = dir->read(buf, FS_DIR_SIZE);
    d7da:	2220      	movs	r2, #32
    d7dc:	a906      	add	r1, sp, #24
    d7de:	4658      	mov	r0, fp
      inSet = false;
    d7e0:	2600      	movs	r6, #0
    n = dir->read(buf, FS_DIR_SIZE);
    d7e2:	f7ff fe43 	bl	d46c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    d7e6:	2800      	cmp	r0, #0
    d7e8:	d1de      	bne.n	d7a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x84>
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !fname) {
    d7ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
    d7ee:	d07a      	beq.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    d7f0:	9b02      	ldr	r3, [sp, #8]
    d7f2:	079b      	lsls	r3, r3, #30
    d7f4:	d577      	bpl.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    d7f6:	2f00      	cmp	r7, #0
    d7f8:	d075      	beq.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  while (freeCount < freeNeed) {
    d7fa:	4544      	cmp	r4, r8
    d7fc:	d217      	bcs.n	d82e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x10a>
    d7fe:	f8dd a004 	ldr.w	sl, [sp, #4]
    n = dir->read(buf, FS_DIR_SIZE);
    d802:	2220      	movs	r2, #32
    d804:	a906      	add	r1, sp, #24
    d806:	4658      	mov	r0, fp
    d808:	f7ff fe30 	bl	d46c <ExFatFile::read(void*, unsigned int)>
    freeCount++;
    d80c:	1c63      	adds	r3, r4, #1
    if (n == 0) {
    d80e:	2800      	cmp	r0, #0
    d810:	d061      	beq.n	d8d6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1b2>
    if (n != FS_DIR_SIZE) {
    d812:	2820      	cmp	r0, #32
    d814:	d167      	bne.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    if (freeCount == 0) {
    d816:	b92c      	cbnz	r4, d824 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x100>
      freePos.position = dir->curPosition() - FS_DIR_SIZE;
    d818:	f8db 2000 	ldr.w	r2, [fp]
    d81c:	f8db a018 	ldr.w	sl, [fp, #24]
    d820:	f1a2 0920 	sub.w	r9, r2, #32
    freeCount++;
    d824:	b2dc      	uxtb	r4, r3
  while (freeCount < freeNeed) {
    d826:	45a0      	cmp	r8, r4
    d828:	d8eb      	bhi.n	d802 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xde>
    d82a:	f8cd a004 	str.w	sl, [sp, #4]
  memset(this, 0, sizeof(ExFatFile));
    d82e:	2238      	movs	r2, #56	; 0x38
    d830:	2100      	movs	r1, #0
    d832:	4628      	mov	r0, r5
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    d834:	f89b 4033 	ldrb.w	r4, [fp, #51]	; 0x33
    d838:	f014 fe52 	bl	224e0 <memset>
  ExFatVolume* volume() const {return m_vol;}
    d83c:	f8db 3020 	ldr.w	r3, [fp, #32]
  freePos.isContiguous = dir->isContiguous();
    d840:	f3c4 1480 	ubfx	r4, r4, #6, #1
  m_dirPos = freePos;
    d844:	9a01      	ldr	r2, [sp, #4]
  m_vol = dir->volume();
    d846:	622b      	str	r3, [r5, #32]
  m_attributes = FILE_ATTR_FILE;
    d848:	2308      	movs	r3, #8
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
    ls = 0;  // lowSurrogate
    d84a:	2600      	movs	r6, #0
  m_dirPos = freePos;
    d84c:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
  m_attributes = FILE_ATTR_FILE;
    d850:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    next = begin;
    d854:	683b      	ldr	r3, [r7, #0]
  m_dirPos = freePos;
    d856:	e9c5 2909 	strd	r2, r9, [r5, #36]	; 0x24
    d85a:	607b      	str	r3, [r7, #4]
    ls = 0;  // lowSurrogate
    d85c:	81be      	strh	r6, [r7, #12]
  for (uint8_t i = 0; i < freeNeed; i++) {
    d85e:	f1b8 0f00 	cmp.w	r8, #0
    d862:	d033      	beq.n	d8cc <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1a8>
      m_setCount = freeNeed - 1;
    d864:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
    d868:	46b3      	mov	fp, r6
      if (FsDateTime::callback) {
    d86a:	f8df a1dc 	ldr.w	sl, [pc, #476]	; da48 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x324>
      m_setCount = freeNeed - 1;
    d86e:	fa5f f989 	uxtb.w	r9, r9
    cache = dirCache(i, FsCache::CACHE_FOR_WRITE);
    d872:	2201      	movs	r2, #1
    d874:	4659      	mov	r1, fp
    d876:	4628      	mov	r0, r5
    d878:	f7ff fd4a 	bl	d310 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    d87c:	4604      	mov	r4, r0
    d87e:	b390      	cbz	r0, d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    d880:	f990 2000 	ldrsb.w	r2, [r0]
    d884:	2a00      	cmp	r2, #0
    d886:	db2e      	blt.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    memset(cache, 0 , FS_DIR_SIZE);
    d888:	2220      	movs	r2, #32
    d88a:	2100      	movs	r1, #0
    d88c:	f014 fe28 	bl	224e0 <memset>
    if (i == 0) {
    d890:	2e00      	cmp	r6, #0
    d892:	f000 80bc 	beq.w	da0e <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2ea>
    } else if (i == 1) {
    d896:	f1bb 0f01 	cmp.w	fp, #1
    d89a:	f000 80d7 	beq.w	da4c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x328>
      dirName->type = EXFAT_TYPE_NAME;
    d89e:	23c1      	movs	r3, #193	; 0xc1
    d8a0:	46a3      	mov	fp, r4
    d8a2:	341e      	adds	r4, #30
    d8a4:	f804 3c1e 	strb.w	r3, [r4, #-30]
    return !ls && next == end;
    d8a8:	89bb      	ldrh	r3, [r7, #12]
        uint16_t u = fname->get16();
    d8aa:	4638      	mov	r0, r7
    d8ac:	b91b      	cbnz	r3, d8b6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x192>
    d8ae:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
    d8b2:	429a      	cmp	r2, r3
    d8b4:	d005      	beq.n	d8c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    d8b6:	f006 fc4b 	bl	14150 <FsName::get16()>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    d8ba:	f82b 0f02 	strh.w	r0, [fp, #2]!
      for (size_t k = 0; k < 15; k++) {
    d8be:	45a3      	cmp	fp, r4
    d8c0:	d1f2      	bne.n	d8a8 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x184>
  for (uint8_t i = 0; i < freeNeed; i++) {
    d8c2:	3601      	adds	r6, #1
    d8c4:	fa5f fb86 	uxtb.w	fp, r6
    d8c8:	45d8      	cmp	r8, fp
    d8ca:	d8d2      	bhi.n	d872 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x14e>
  return sync();
    d8cc:	4628      	mov	r0, r5
    d8ce:	f000 fafb 	bl	dec8 <ExFatFile::sync()>
    d8d2:	4606      	mov	r6, r0
    d8d4:	e00d      	b.n	d8f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
      if (!dir->addDirCluster()) {
    d8d6:	4658      	mov	r0, fp
      curCluster = dir->m_curCluster;
    d8d8:	f8db 6018 	ldr.w	r6, [fp, #24]
      if (!dir->addDirCluster()) {
    d8dc:	f000 fb24 	bl	df28 <ExFatFile::addDirCluster()>
    d8e0:	2800      	cmp	r0, #0
    d8e2:	f040 8091 	bne.w	da08 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x2e4>
  m_attributes = FILE_ATTR_CLOSED;
    d8e6:	2300      	movs	r3, #0
  return false;
    d8e8:	461e      	mov	r6, r3
  m_attributes = FILE_ATTR_CLOSED;
    d8ea:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    d8ee:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
}
    d8f2:	4630      	mov	r0, r6
    d8f4:	b00f      	add	sp, #60	; 0x3c
    d8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t freeNeed = 3;
    d8fa:	f04f 0803 	mov.w	r8, #3
    d8fe:	e747      	b.n	d790 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x6c>
    } else if (!inSet) {
    d900:	bb56      	cbnz	r6, d958 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x234>
        freeCount = 0;
    d902:	4544      	cmp	r4, r8
    d904:	bf38      	it	cc
    d906:	2400      	movcc	r4, #0
      if (buf[0] != EXFAT_TYPE_FILE) {
    d908:	2b85      	cmp	r3, #133	; 0x85
    d90a:	f47f af47 	bne.w	d79c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      memset(this, 0, sizeof(ExFatFile));
    d90e:	4631      	mov	r1, r6
    d910:	2238      	movs	r2, #56	; 0x38
    d912:	4628      	mov	r0, r5
      inSet = true;
    d914:	2601      	movs	r6, #1
      memset(this, 0, sizeof(ExFatFile));
    d916:	f014 fde3 	bl	224e0 <memset>
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    d91a:	f89d 201c 	ldrb.w	r2, [sp, #28]
      m_setCount = dirFile->setCount;
    d91e:	f89d 3019 	ldrb.w	r3, [sp, #25]
    d922:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
      m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    d926:	f002 0337 	and.w	r3, r2, #55	; 0x37
      if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    d92a:	06d2      	lsls	r2, r2, #27
        m_attributes |= FILE_ATTR_FILE;
    d92c:	bf58      	it	pl
    d92e:	f043 0308 	orrpl.w	r3, r3, #8
    d932:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
      m_dirPos.position = dir->curPosition() - FS_DIR_SIZE;
    d936:	f8db 3000 	ldr.w	r3, [fp]
    d93a:	f8db 2020 	ldr.w	r2, [fp, #32]
    d93e:	3b20      	subs	r3, #32
      m_vol = dir->volume();
    d940:	622a      	str	r2, [r5, #32]
      m_dirPos.cluster = dir->curCluster();
    d942:	f8db 2018 	ldr.w	r2, [fp, #24]
    d946:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    d94a:	f89b 3033 	ldrb.w	r3, [fp, #51]	; 0x33
    d94e:	f3c3 1380 	ubfx	r3, r3, #6, #1
      m_dirPos.isContiguous = dir->isContiguous();
    d952:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    d956:	e721      	b.n	d79c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
    } else if (buf[0] == EXFAT_TYPE_STREAM) {
    d958:	2bc0      	cmp	r3, #192	; 0xc0
    d95a:	d028      	beq.n	d9ae <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x28a>
    } else if (buf[0] == EXFAT_TYPE_NAME) {
    d95c:	2bc1      	cmp	r3, #193	; 0xc1
    d95e:	f47f af3c 	bne.w	d7da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
      if (!cmpName(dirName, fname)) {
    d962:	463a      	mov	r2, r7
    d964:	a906      	add	r1, sp, #24
    d966:	4628      	mov	r0, r5
    d968:	f001 f9ee 	bl	ed48 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>
    d96c:	b1e8      	cbz	r0, d9aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    d96e:	89bb      	ldrh	r3, [r7, #12]
    d970:	b9db      	cbnz	r3, d9aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
    d972:	e9d7 3201 	ldrd	r3, r2, [r7, #4]
    d976:	429a      	cmp	r2, r3
    d978:	d117      	bne.n	d9aa <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x286>
  if (oflag & O_EXCL) {
    d97a:	f41a 6f00 	tst.w	sl, #2048	; 0x800
    d97e:	d1b2      	bne.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    d980:	f41a 4f88 	tst.w	sl, #17408	; 0x4400
    d984:	d170      	bne.n	da68 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
    d986:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    d98a:	0798      	lsls	r0, r3, #30
    d98c:	d46c      	bmi.n	da68 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x344>
  if (oflag & O_TRUNC) {
    d98e:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    d992:	d1a8      	bne.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    d994:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
    d998:	d0ab      	beq.n	d8f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    d99a:	4628      	mov	r0, r5
    d99c:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    d9a0:	f7ff fe4a 	bl	d638 <ExFatFile::seekSet(unsigned long long)>
    d9a4:	2800      	cmp	r0, #0
    d9a6:	d1a4      	bne.n	d8f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
    d9a8:	e79d      	b.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    d9aa:	4606      	mov	r6, r0
    d9ac:	e6f6      	b.n	d79c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
      m_flags = modeFlags;
    d9ae:	9b02      	ldr	r3, [sp, #8]
    d9b0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    d9b4:	f89d 3019 	ldrb.w	r3, [sp, #25]
    d9b8:	079b      	lsls	r3, r3, #30
    d9ba:	d502      	bpl.n	d9c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x29e>
        m_flags |= FILE_FLAG_CONTIGUOUS;
    d9bc:	9b03      	ldr	r3, [sp, #12]
    d9be:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      m_firstCluster = getLe32(dirStream->firstCluster);
    d9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d9c4:	61eb      	str	r3, [r5, #28]
      m_validLength = getLe64(dirStream->validLength);
    d9c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
    d9ca:	e9c5 2304 	strd	r2, r3, [r5, #16]
      m_dataLength = getLe64(dirStream->dataLength);
    d9ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    d9d2:	e9c5 2302 	strd	r2, r3, [r5, #8]
      if (!fname) {
    d9d6:	2f00      	cmp	r7, #0
    d9d8:	d0cf      	beq.n	d97a <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x256>
    ls = 0;  // lowSurrogate
    d9da:	f04f 0300 	mov.w	r3, #0
      if (fname->nameLength != dirStream->nameLength ||
    d9de:	693a      	ldr	r2, [r7, #16]
    d9e0:	81bb      	strh	r3, [r7, #12]
    next = begin;
    d9e2:	683b      	ldr	r3, [r7, #0]
    d9e4:	607b      	str	r3, [r7, #4]
    d9e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
    d9ea:	429a      	cmp	r2, r3
    d9ec:	f47f aef5 	bne.w	d7da <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xb6>
    d9f0:	8abe      	ldrh	r6, [r7, #20]
    d9f2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    d9f6:	1af6      	subs	r6, r6, r3
    d9f8:	fab6 f686 	clz	r6, r6
    d9fc:	0976      	lsrs	r6, r6, #5
    d9fe:	e6cd      	b.n	d79c <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x78>
        if (fname) {
    da00:	2f00      	cmp	r7, #0
    da02:	f47f aef2 	bne.w	d7ea <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0xc6>
    da06:	e76e      	b.n	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
      dir->m_curCluster = curCluster;
    da08:	f8cb 6018 	str.w	r6, [fp, #24]
      continue;
    da0c:	e70b      	b.n	d826 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x102>
      dirFile->type = EXFAT_TYPE_FILE;
    da0e:	2385      	movs	r3, #133	; 0x85
    da10:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
    da12:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    da16:	f884 9001 	strb.w	r9, [r4, #1]
      if (FsDateTime::callback) {
    da1a:	f8da 3000 	ldr.w	r3, [sl]
    da1e:	2b00      	cmp	r3, #0
    da20:	d046      	beq.n	dab0 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x38c>
        FsDateTime::callback(&date, &time, &ms10);
    da22:	f10d 0213 	add.w	r2, sp, #19
    da26:	f10d 0116 	add.w	r1, sp, #22
    da2a:	a805      	add	r0, sp, #20
    da2c:	4798      	blx	r3
    da2e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    da32:	8163      	strh	r3, [r4, #10]
    da34:	f8bd 3016 	ldrh.w	r3, [sp, #22]
    da38:	8123      	strh	r3, [r4, #8]
        dirFile->createTimeMs = ms10;
    da3a:	f89d 3013 	ldrb.w	r3, [sp, #19]
    da3e:	7523      	strb	r3, [r4, #20]
    da40:	e73f      	b.n	d8c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
    da42:	bf00      	nop
    da44:	88888889 	.word	0x88888889
    da48:	2000502c 	.word	0x2000502c
      dirStream->type = EXFAT_TYPE_STREAM;
    da4c:	23c0      	movs	r3, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1;
    da4e:	f884 b001 	strb.w	fp, [r4, #1]
      dirStream->type = EXFAT_TYPE_STREAM;
    da52:	7023      	strb	r3, [r4, #0]
      m_flags = modeFlags | FILE_FLAG_DIR_DIRTY;
    da54:	9b02      	ldr	r3, [sp, #8]
    da56:	f063 037f 	orn	r3, r3, #127	; 0x7f
    da5a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
      dirStream->nameLength = fname->nameLength;
    da5e:	693b      	ldr	r3, [r7, #16]
    da60:	70e3      	strb	r3, [r4, #3]
      setLe16(dirStream->nameHash, fname->nameHash);
    da62:	8abb      	ldrh	r3, [r7, #20]
    da64:	80a3      	strh	r3, [r4, #4]
}
    da66:	e72c      	b.n	d8c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    da68:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    if (isSubDir() || isReadOnly() || EXFAT_READ_ONLY) {
    da6c:	06d9      	lsls	r1, r3, #27
    da6e:	f53f af3a 	bmi.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    da72:	f013 0101 	ands.w	r1, r3, #1
    da76:	f47f af36 	bne.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (oflag & O_TRUNC) {
    da7a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
    da7e:	d089      	beq.n	d994 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x270>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    da80:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    da84:	0792      	lsls	r2, r2, #30
    da86:	f57f af2e 	bpl.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (!isOpen()) {
    da8a:	2b00      	cmp	r3, #0
    da8c:	f43f af2b 	beq.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
  if (pos == m_curPosition) {
    da90:	e9d5 3200 	ldrd	r3, r2, [r5]
    da94:	4313      	orrs	r3, r2
    da96:	d004      	beq.n	daa2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x37e>
  m_curPosition = pos;
    da98:	2200      	movs	r2, #0
    da9a:	2300      	movs	r3, #0
    m_curCluster = 0;
    da9c:	61a9      	str	r1, [r5, #24]
  m_curPosition = pos;
    da9e:	e9c5 2300 	strd	r2, r3, [r5]
    return seekSet(length) && truncate();
    daa2:	4628      	mov	r0, r5
    daa4:	f000 fc42 	bl	e32c <ExFatFile::truncate()>
    daa8:	2800      	cmp	r0, #0
    daaa:	f43f af1c 	beq.w	d8e6 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1c2>
    daae:	e720      	b.n	d8f2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x1ce>
  *reinterpret_cast<uint16_t*>(dst) = src;
    dab0:	f645 0321 	movw	r3, #22561	; 0x5821
    dab4:	8163      	strh	r3, [r4, #10]
    dab6:	81e3      	strh	r3, [r4, #14]
    dab8:	8263      	strh	r3, [r4, #18]
       if (FS_DEFAULT_TIME) {
    daba:	e702      	b.n	d8c2 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)+0x19e>

0000dabc <ExFatFile::open(ExFatFile*, char const*, int)>:
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    dabc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  ExFatFile() {}
    dac0:	2500      	movs	r5, #0
    dac2:	b097      	sub	sp, #92	; 0x5c
    dac4:	4699      	mov	r9, r3
  if (isOpen() || !dirFile->isDir()) {
    dac6:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::open(ExFatFile* dirFile, const char* path, oflag_t oflag) {
    daca:	9201      	str	r2, [sp, #4]
    dacc:	9514      	str	r5, [sp, #80]	; 0x50
class FsName {
    dace:	f8ad 5014 	strh.w	r5, [sp, #20]
  if (isOpen() || !dirFile->isDir()) {
    dad2:	2b00      	cmp	r3, #0
    dad4:	d13e      	bne.n	db54 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    dad6:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    dada:	460f      	mov	r7, r1
    dadc:	f013 0f50 	tst.w	r3, #80	; 0x50
    dae0:	d038      	beq.n	db54 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
  if (isDirSeparator(*path)) {
    dae2:	7813      	ldrb	r3, [r2, #0]
    dae4:	4604      	mov	r4, r0
    dae6:	4616      	mov	r6, r2
    dae8:	2b2f      	cmp	r3, #47	; 0x2f
    daea:	d037      	beq.n	db5c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    daec:	f04f 0800 	mov.w	r8, #0
    if (!parsePathName(path, &fname, &path)) {
    daf0:	ab01      	add	r3, sp, #4
    daf2:	aa02      	add	r2, sp, #8
    daf4:	4631      	mov	r1, r6
    daf6:	4620      	mov	r0, r4
    daf8:	f7ff fc6a 	bl	d3d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    dafc:	b350      	cbz	r0, db54 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    if (*path == 0) {
    dafe:	9e01      	ldr	r6, [sp, #4]
    db00:	7833      	ldrb	r3, [r6, #0]
    db02:	2b00      	cmp	r3, #0
    db04:	d03e      	beq.n	db84 <ExFatFile::open(ExFatFile*, char const*, int)+0xc8>
    if (!openPrivate(dirFile, &fname, O_RDONLY)) {
    db06:	2300      	movs	r3, #0
    db08:	aa02      	add	r2, sp, #8
    db0a:	4639      	mov	r1, r7
    db0c:	4620      	mov	r0, r4
    db0e:	f7ff fe09 	bl	d724 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    db12:	b1f8      	cbz	r0, db54 <ExFatFile::open(ExFatFile*, char const*, int)+0x98>
    tmpDir = *this;
    db14:	46a4      	mov	ip, r4
    db16:	ad08      	add	r5, sp, #32
    db18:	f104 0730 	add.w	r7, r4, #48	; 0x30
    db1c:	f8dc 0000 	ldr.w	r0, [ip]
    db20:	f10c 0c10 	add.w	ip, ip, #16
    db24:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    db28:	46ae      	mov	lr, r5
    db2a:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    db2e:	3510      	adds	r5, #16
    db30:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    db34:	45bc      	cmp	ip, r7
    db36:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    db3a:	d1ef      	bne.n	db1c <ExFatFile::open(ExFatFile*, char const*, int)+0x60>
    db3c:	f8dc 0000 	ldr.w	r0, [ip]
    dirFile = &tmpDir;
    db40:	af08      	add	r7, sp, #32
    tmpDir = *this;
    db42:	6028      	str	r0, [r5, #0]
  bool rtn = sync();
    db44:	4620      	mov	r0, r4
    db46:	f000 f9bf 	bl	dec8 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    db4a:	f884 8031 	strb.w	r8, [r4, #49]	; 0x31
  m_flags = 0;
    db4e:	f884 8033 	strb.w	r8, [r4, #51]	; 0x33
  return rtn;
    db52:	e7cd      	b.n	daf0 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
  return false;
    db54:	2000      	movs	r0, #0
}
    db56:	b017      	add	sp, #92	; 0x5c
    db58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    while (isDirSeparator(*path)) {
    db5c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    db60:	292f      	cmp	r1, #47	; 0x2f
    db62:	d0fb      	beq.n	db5c <ExFatFile::open(ExFatFile*, char const*, int)+0xa0>
    db64:	9601      	str	r6, [sp, #4]
    if (*path == 0) {
    db66:	b9b1      	cbnz	r1, db96 <ExFatFile::open(ExFatFile*, char const*, int)+0xda>
  memset(this, 0, sizeof(ExFatFile));
    db68:	2238      	movs	r2, #56	; 0x38
    db6a:	4620      	mov	r0, r4
      return openRoot(dirFile->m_vol);
    db6c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    db6e:	f014 fcb7 	bl	224e0 <memset>
  m_flags = FILE_FLAG_READ;
    db72:	2301      	movs	r3, #1
  m_attributes = FILE_ATTR_ROOT;
    db74:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
    db76:	6225      	str	r5, [r4, #32]
      return openRoot(dirFile->m_vol);
    db78:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    db7a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_ROOT;
    db7e:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
      return openRoot(dirFile->m_vol);
    db82:	e7e8      	b.n	db56 <ExFatFile::open(ExFatFile*, char const*, int)+0x9a>
  return openPrivate(dirFile, &fname, oflag);
    db84:	464b      	mov	r3, r9
    db86:	aa02      	add	r2, sp, #8
    db88:	4639      	mov	r1, r7
    db8a:	4620      	mov	r0, r4
    db8c:	f7ff fdca 	bl	d724 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    db90:	b017      	add	sp, #92	; 0x5c
    db92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  memset(this, 0, sizeof(ExFatFile));
    db96:	2238      	movs	r2, #56	; 0x38
    db98:	2100      	movs	r1, #0
    db9a:	a808      	add	r0, sp, #32
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    db9c:	6a3d      	ldr	r5, [r7, #32]
  memset(this, 0, sizeof(ExFatFile));
    db9e:	f014 fc9f 	bl	224e0 <memset>
  m_flags = FILE_FLAG_READ;
    dba2:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    dba4:	af08      	add	r7, sp, #32
  m_vol = vol;
    dba6:	9510      	str	r5, [sp, #64]	; 0x40
  m_flags = FILE_FLAG_READ;
    dba8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
  m_attributes = FILE_ATTR_ROOT;
    dbac:	2340      	movs	r3, #64	; 0x40
    dbae:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
  return true;
    dbb2:	e79b      	b.n	daec <ExFatFile::open(ExFatFile*, char const*, int)+0x30>

0000dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    dbb4:	b119      	cbz	r1, dbbe <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    dbb6:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    dbba:	f7ff bf7f 	b.w	dabc <ExFatFile::open(ExFatFile*, char const*, int)>
}
    dbbe:	4608      	mov	r0, r1
    dbc0:	4770      	bx	lr
    dbc2:	bf00      	nop

0000dbc4 <ExFatFile::openNext(ExFatFile*, int)>:
  if (isOpen() || !dir->isDir() || (dir->curPosition() & 0X1F)) {
    dbc4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    dbc8:	b963      	cbnz	r3, dbe4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    dbca:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    dbce:	f013 0f50 	tst.w	r3, #80	; 0x50
    dbd2:	d007      	beq.n	dbe4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
    dbd4:	680b      	ldr	r3, [r1, #0]
    dbd6:	f013 0c1f 	ands.w	ip, r3, #31
    dbda:	d103      	bne.n	dbe4 <ExFatFile::openNext(ExFatFile*, int)+0x20>
  return openPrivate(dir, nullptr, oflag);
    dbdc:	4613      	mov	r3, r2
    dbde:	4662      	mov	r2, ip
    dbe0:	f7ff bda0 	b.w	d724 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
}
    dbe4:	2000      	movs	r0, #0
    dbe6:	4770      	bx	lr

0000dbe8 <ExFatFile::addCluster()>:
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    dbe8:	6981      	ldr	r1, [r0, #24]
bool ExFatFile::addCluster() {
    dbea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dbec:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    dbee:	6a00      	ldr	r0, [r0, #32]
    dbf0:	b101      	cbz	r1, dbf4 <ExFatFile::addCluster()+0xc>
    dbf2:	3101      	adds	r1, #1
    dbf4:	2201      	movs	r2, #1
    dbf6:	f001 f969 	bl	eecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    dbfa:	2801      	cmp	r0, #1
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    dbfc:	4605      	mov	r5, r0
  if (find < 2) {
    dbfe:	d932      	bls.n	dc66 <ExFatFile::addCluster()+0x7e>
  if (!m_vol->bitmapModify(find, 1, 1)) {
    dc00:	2301      	movs	r3, #1
    dc02:	4601      	mov	r1, r0
    dc04:	6a20      	ldr	r0, [r4, #32]
    dc06:	461a      	mov	r2, r3
    dc08:	f001 f9c0 	bl	ef8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    dc0c:	4606      	mov	r6, r0
    dc0e:	b350      	cbz	r0, dc66 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster == 0) {
    dc10:	69a3      	ldr	r3, [r4, #24]
    dc12:	b35b      	cbz	r3, dc6c <ExFatFile::addCluster()+0x84>
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    dc14:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
  if (isContiguous()) {
    dc18:	0651      	lsls	r1, r2, #25
    dc1a:	d512      	bpl.n	dc42 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    dc1c:	1c59      	adds	r1, r3, #1
    dc1e:	42a9      	cmp	r1, r5
    dc20:	d018      	beq.n	dc54 <ExFatFile::addCluster()+0x6c>
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    dc22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    dc26:	69e1      	ldr	r1, [r4, #28]
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    dc28:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    dc2c:	e005      	b.n	dc3a <ExFatFile::addCluster()+0x52>
      if (!m_vol->fatPut(c, c + 1)) {
    dc2e:	6a20      	ldr	r0, [r4, #32]
    dc30:	f001 faa8 	bl	f184 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    dc34:	4639      	mov	r1, r7
      if (!m_vol->fatPut(c, c + 1)) {
    dc36:	b1b0      	cbz	r0, dc66 <ExFatFile::addCluster()+0x7e>
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    dc38:	69a3      	ldr	r3, [r4, #24]
      if (!m_vol->fatPut(c, c + 1)) {
    dc3a:	1c4f      	adds	r7, r1, #1
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    dc3c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    dc3e:	463a      	mov	r2, r7
    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    dc40:	d3f5      	bcc.n	dc2e <ExFatFile::addCluster()+0x46>
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    dc42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dc46:	4629      	mov	r1, r5
    dc48:	6a20      	ldr	r0, [r4, #32]
    dc4a:	f001 fa9b 	bl	f184 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    dc4e:	b150      	cbz	r0, dc66 <ExFatFile::addCluster()+0x7e>
  if (m_curCluster) {
    dc50:	69a1      	ldr	r1, [r4, #24]
    dc52:	b911      	cbnz	r1, dc5a <ExFatFile::addCluster()+0x72>
}
    dc54:	4630      	mov	r0, r6
  m_curCluster = find;
    dc56:	61a5      	str	r5, [r4, #24]
}
    dc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!m_vol->fatPut(m_curCluster, find)) {
    dc5a:	462a      	mov	r2, r5
    dc5c:	6a20      	ldr	r0, [r4, #32]
    dc5e:	f001 fa91 	bl	f184 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    dc62:	2800      	cmp	r0, #0
    dc64:	d1f6      	bne.n	dc54 <ExFatFile::addCluster()+0x6c>
  return false;
    dc66:	2600      	movs	r6, #0
}
    dc68:	4630      	mov	r0, r6
    dc6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    dc6c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    dc70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    dc74:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    goto done;
    dc78:	e7ec      	b.n	dc54 <ExFatFile::addCluster()+0x6c>
    dc7a:	bf00      	nop

0000dc7c <ExFatFile::remove()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    dc7c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::remove() {
  uint8_t* cache;
  if (!isWritable()) {
    dc80:	079a      	lsls	r2, r3, #30
    dc82:	d536      	bpl.n	dcf2 <ExFatFile::remove()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster) {
    dc84:	69c1      	ldr	r1, [r0, #28]
bool ExFatFile::remove() {
    dc86:	b570      	push	{r4, r5, r6, lr}
    dc88:	4605      	mov	r5, r0
  if (m_firstCluster) {
    dc8a:	b9a1      	cbnz	r1, dcb6 <ExFatFile::remove()+0x3a>
bool ExFatFile::remove() {
    dc8c:	2400      	movs	r4, #0
    dc8e:	4621      	mov	r1, r4
    dc90:	e007      	b.n	dca2 <ExFatFile::remove()+0x26>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Mark entry not used.
    cache[0] &= 0x7F;
    dc92:	7803      	ldrb	r3, [r0, #0]
    dc94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    dc98:	7003      	strb	r3, [r0, #0]
  for (uint8_t is = 0; is <= m_setCount; is++) {
    dc9a:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    dc9e:	428b      	cmp	r3, r1
    dca0:	d329      	bcc.n	dcf6 <ExFatFile::remove()+0x7a>
    dca2:	3401      	adds	r4, #1
    cache = dirCache(is, FsCache::CACHE_FOR_WRITE);
    dca4:	2201      	movs	r2, #1
    dca6:	4628      	mov	r0, r5
    dca8:	f7ff fb32 	bl	d310 <ExFatFile::dirCache(unsigned char, unsigned char)>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    dcac:	b2e1      	uxtb	r1, r4
    if (!cache) {
    dcae:	2800      	cmp	r0, #0
    dcb0:	d1ef      	bne.n	dc92 <ExFatFile::remove()+0x16>
  // Write entry to device.
  return m_vol->cacheSync();

 fail:
  return false;
}
    dcb2:	2000      	movs	r0, #0
    dcb4:	bd70      	pop	{r4, r5, r6, pc}
    if (isContiguous()) {
    dcb6:	065b      	lsls	r3, r3, #25
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    dcb8:	6a00      	ldr	r0, [r0, #32]
    if (isContiguous()) {
    dcba:	d534      	bpl.n	dd26 <ExFatFile::remove()+0xaa>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    dcbc:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
      uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    dcc0:	e9d5 2402 	ldrd	r2, r4, [r5, #8]
    dcc4:	3309      	adds	r3, #9
    dcc6:	3a01      	subs	r2, #1
    dcc8:	b2db      	uxtb	r3, r3
    dcca:	f144 34ff 	adc.w	r4, r4, #4294967295	; 0xffffffff
    dcce:	f1c3 0c20 	rsb	ip, r3, #32
    dcd2:	40da      	lsrs	r2, r3
    dcd4:	3b20      	subs	r3, #32
    dcd6:	fa04 fc0c 	lsl.w	ip, r4, ip
    dcda:	fa24 f303 	lsr.w	r3, r4, r3
    dcde:	ea42 020c 	orr.w	r2, r2, ip
    dce2:	431a      	orrs	r2, r3
      if (!m_vol->bitmapModify(m_firstCluster, nc, 0)) {
    dce4:	2300      	movs	r3, #0
    dce6:	3201      	adds	r2, #1
    dce8:	f001 f950 	bl	ef8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    dcec:	2800      	cmp	r0, #0
    dcee:	d1cd      	bne.n	dc8c <ExFatFile::remove()+0x10>
    dcf0:	e7df      	b.n	dcb2 <ExFatFile::remove()+0x36>
}
    dcf2:	2000      	movs	r0, #0
    dcf4:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
    dcf6:	2300      	movs	r3, #0
  return m_vol->cacheSync();
    dcf8:	6a2c      	ldr	r4, [r5, #32]
  m_attributes = FILE_ATTR_CLOSED;
    dcfa:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    dcfe:	4620      	mov	r0, r4
  m_flags = 0;
    dd00:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    dd04:	f006 f9ba 	bl	1407c <FsCache::sync()>
    dd08:	2800      	cmp	r0, #0
    dd0a:	d0d2      	beq.n	dcb2 <ExFatFile::remove()+0x36>
    dd0c:	f504 7004 	add.w	r0, r4, #528	; 0x210
    dd10:	f006 f9b4 	bl	1407c <FsCache::sync()>
    dd14:	2800      	cmp	r0, #0
    dd16:	d0cc      	beq.n	dcb2 <ExFatFile::remove()+0x36>
    dd18:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    dd1c:	6803      	ldr	r3, [r0, #0]
}
    dd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dd22:	6a1b      	ldr	r3, [r3, #32]
    dd24:	4718      	bx	r3
      if (!m_vol->freeChain(m_firstCluster)) {
    dd26:	f001 fa4d 	bl	f1c4 <ExFatPartition::freeChain(unsigned long)>
    dd2a:	2800      	cmp	r0, #0
    dd2c:	d1ae      	bne.n	dc8c <ExFatFile::remove()+0x10>
    dd2e:	e7c0      	b.n	dcb2 <ExFatFile::remove()+0x36>

0000dd30 <ExFatFile::rmdir()>:
//------------------------------------------------------------------------------
bool ExFatFile::rmdir() {
  int n;
  uint8_t dir[FS_DIR_SIZE];
  // must be open subdirectory
  if (!isSubDir()) {
    dd30:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    dd34:	06db      	lsls	r3, r3, #27
    dd36:	d401      	bmi.n	dd3c <ExFatFile::rmdir()+0xc>
  m_attributes = FILE_ATTR_FILE;
  m_flags |= FILE_FLAG_WRITE;
  return remove();

 fail:
  return false;
    dd38:	2000      	movs	r0, #0
}
    dd3a:	4770      	bx	lr
bool ExFatFile::rmdir() {
    dd3c:	b510      	push	{r4, lr}
    seekSet(0);
    dd3e:	2200      	movs	r2, #0
    dd40:	b088      	sub	sp, #32
    dd42:	2300      	movs	r3, #0
    dd44:	4604      	mov	r4, r0
    dd46:	f7ff fc77 	bl	d638 <ExFatFile::seekSet(unsigned long long)>
  }
    dd4a:	e008      	b.n	dd5e <ExFatFile::rmdir()+0x2e>
    if (n != FS_DIR_SIZE || dir[0] & 0X80) {
    dd4c:	2820      	cmp	r0, #32
    dd4e:	d11b      	bne.n	dd88 <ExFatFile::rmdir()+0x58>
    dd50:	f99d 3000 	ldrsb.w	r3, [sp]
    dd54:	f89d 2000 	ldrb.w	r2, [sp]
    dd58:	2b00      	cmp	r3, #0
    dd5a:	db15      	blt.n	dd88 <ExFatFile::rmdir()+0x58>
    if (dir[0] == 0) {
    dd5c:	b132      	cbz	r2, dd6c <ExFatFile::rmdir()+0x3c>
    n = read(dir, FS_DIR_SIZE);
    dd5e:	2220      	movs	r2, #32
    dd60:	4669      	mov	r1, sp
    dd62:	4620      	mov	r0, r4
    dd64:	f7ff fb82 	bl	d46c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    dd68:	2800      	cmp	r0, #0
    dd6a:	d1ef      	bne.n	dd4c <ExFatFile::rmdir()+0x1c>
  m_flags |= FILE_FLAG_WRITE;
    dd6c:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  m_attributes = FILE_ATTR_FILE;
    dd70:	2208      	movs	r2, #8
  return remove();
    dd72:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    dd74:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    dd78:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
  m_flags |= FILE_FLAG_WRITE;
    dd7c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return remove();
    dd80:	f7ff ff7c 	bl	dc7c <ExFatFile::remove()>
}
    dd84:	b008      	add	sp, #32
    dd86:	bd10      	pop	{r4, pc}
  return false;
    dd88:	2000      	movs	r0, #0
}
    dd8a:	b008      	add	sp, #32
    dd8c:	bd10      	pop	{r4, pc}
    dd8e:	bf00      	nop

0000dd90 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    dd90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dd94:	f04f 0800 	mov.w	r8, #0
    dd98:	b082      	sub	sp, #8
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    dd9a:	4f4a      	ldr	r7, [pc, #296]	; (dec4 <ExFatFile::syncDir()+0x134>)
bool ExFatFile::syncDir() {
    dd9c:	4606      	mov	r6, r0
  uint16_t checksum = 0;
    dd9e:	4644      	mov	r4, r8
    dda0:	4641      	mov	r1, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    dda2:	2200      	movs	r2, #0
    dda4:	4630      	mov	r0, r6
    dda6:	f7ff fab3 	bl	d310 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    ddaa:	4605      	mov	r5, r0
    ddac:	b130      	cbz	r0, ddbc <ExFatFile::syncDir()+0x2c>
    switch (cache[0]) {
    ddae:	7801      	ldrb	r1, [r0, #0]
    ddb0:	29c0      	cmp	r1, #192	; 0xc0
    ddb2:	d069      	beq.n	de88 <ExFatFile::syncDir()+0xf8>
    ddb4:	29c1      	cmp	r1, #193	; 0xc1
    ddb6:	d02b      	beq.n	de10 <ExFatFile::syncDir()+0x80>
    ddb8:	2985      	cmp	r1, #133	; 0x85
    ddba:	d009      	beq.n	ddd0 <ExFatFile::syncDir()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    ddbc:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    ddc0:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    ddc2:	f043 0301 	orr.w	r3, r3, #1
    ddc6:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
}
    ddca:	b002      	add	sp, #8
    ddcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    ddd0:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
    ddd4:	f003 0337 	and.w	r3, r3, #55	; 0x37
    ddd8:	8083      	strh	r3, [r0, #4]
        if (FsDateTime::callback) {
    ddda:	683b      	ldr	r3, [r7, #0]
    dddc:	b183      	cbz	r3, de00 <ExFatFile::syncDir()+0x70>
          FsDateTime::callback(&date, &time, &ms10);
    ddde:	f10d 0203 	add.w	r2, sp, #3
    dde2:	f10d 0106 	add.w	r1, sp, #6
    dde6:	a801      	add	r0, sp, #4
    dde8:	4798      	blx	r3
          setLe16(df->modifyTime, time);
    ddea:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    ddee:	81ab      	strh	r3, [r5, #12]
    ddf0:	822b      	strh	r3, [r5, #16]
          setLe16(df->modifyDate, date);
    ddf2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    ddf6:	81eb      	strh	r3, [r5, #14]
    ddf8:	826b      	strh	r3, [r5, #18]
          df->modifyTimeMs = ms10;
    ddfa:	f89d 3003 	ldrb.w	r3, [sp, #3]
    ddfe:	756b      	strb	r3, [r5, #21]
        m_vol->dataCacheDirty();
    de00:	6a32      	ldr	r2, [r6, #32]
    m_status |= CACHE_STATUS_DIRTY;
    de02:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    de06:	f043 0301 	orr.w	r3, r3, #1
    de0a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    de0e:	7829      	ldrb	r1, [r5, #0]
    de10:	f1a1 0085 	sub.w	r0, r1, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    de14:	2200      	movs	r2, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    de16:	fab0 f080 	clz	r0, r0
    de1a:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    de1c:	e001      	b.n	de22 <ExFatFile::syncDir()+0x92>
    de1e:	2204      	movs	r2, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    de20:	5ca9      	ldrb	r1, [r5, r2]
    de22:	03e3      	lsls	r3, r4, #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    de24:	2a01      	cmp	r2, #1
    de26:	f102 0201 	add.w	r2, r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    de2a:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    de2e:	fa11 f383 	uxtah	r3, r1, r3
    de32:	b29c      	uxth	r4, r3
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    de34:	d101      	bne.n	de3a <ExFatFile::syncDir()+0xaa>
    de36:	2800      	cmp	r0, #0
    de38:	d1f1      	bne.n	de1e <ExFatFile::syncDir()+0x8e>
    de3a:	2a1f      	cmp	r2, #31
    de3c:	d9f0      	bls.n	de20 <ExFatFile::syncDir()+0x90>
  for (uint8_t is = 0; is <= m_setCount ; is++) {
    de3e:	f108 0801 	add.w	r8, r8, #1
    de42:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
    de46:	fa5f f188 	uxtb.w	r1, r8
    de4a:	428b      	cmp	r3, r1
    de4c:	d2a9      	bcs.n	dda2 <ExFatFile::syncDir()+0x12>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    de4e:	2201      	movs	r2, #1
    de50:	f106 0124 	add.w	r1, r6, #36	; 0x24
    de54:	6a30      	ldr	r0, [r6, #32]
    de56:	f001 f915 	bl	f084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    de5a:	2800      	cmp	r0, #0
    de5c:	d0ae      	beq.n	ddbc <ExFatFile::syncDir()+0x2c>
  if (!m_vol->cacheSync()) {
    de5e:	6a35      	ldr	r5, [r6, #32]
    de60:	8044      	strh	r4, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    de62:	4628      	mov	r0, r5
    de64:	f006 f90a 	bl	1407c <FsCache::sync()>
    de68:	2800      	cmp	r0, #0
    de6a:	d0a7      	beq.n	ddbc <ExFatFile::syncDir()+0x2c>
    de6c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    de70:	f006 f904 	bl	1407c <FsCache::sync()>
    de74:	2800      	cmp	r0, #0
    de76:	d0a1      	beq.n	ddbc <ExFatFile::syncDir()+0x2c>
    de78:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    de7c:	6803      	ldr	r3, [r0, #0]
    de7e:	6a1b      	ldr	r3, [r3, #32]
    de80:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    de82:	2800      	cmp	r0, #0
    de84:	d1a1      	bne.n	ddca <ExFatFile::syncDir()+0x3a>
    de86:	e799      	b.n	ddbc <ExFatFile::syncDir()+0x2c>
        if (isContiguous()) {
    de88:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    de8c:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    de90:	7843      	ldrb	r3, [r0, #1]
    de92:	bf14      	ite	ne
    de94:	f043 0302 	orrne.w	r3, r3, #2
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    de98:	f003 03fd 	andeq.w	r3, r3, #253	; 0xfd
    de9c:	7043      	strb	r3, [r0, #1]
        setLe64(ds->validLength, m_validLength);
    de9e:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
        m_vol->dataCacheDirty();
    dea2:	e9d6 3207 	ldrd	r3, r2, [r6, #28]
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    dea6:	e9c5 0102 	strd	r0, r1, [r5, #8]
        setLe64(ds->dataLength, m_dataLength);
    deaa:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
  *reinterpret_cast<uint32_t*>(dst) = src;
    deae:	616b      	str	r3, [r5, #20]
  *reinterpret_cast<uint64_t*>(dst) = src;
    deb0:	e9c5 0106 	strd	r0, r1, [r5, #24]
    deb4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    deb8:	f043 0301 	orr.w	r3, r3, #1
    debc:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
  bool skip = data[0] == EXFAT_TYPE_FILE;
    dec0:	7829      	ldrb	r1, [r5, #0]
  void dataCacheDirty() {m_dataCache.dirty();}
    dec2:	e7a5      	b.n	de10 <ExFatFile::syncDir()+0x80>
    dec4:	2000502c 	.word	0x2000502c

0000dec8 <ExFatFile::sync()>:
bool ExFatFile::sync() {
    dec8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    deca:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    dece:	b343      	cbz	r3, df22 <ExFatFile::sync()+0x5a>
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    ded0:	f990 2033 	ldrsb.w	r2, [r0, #51]	; 0x33
    ded4:	4604      	mov	r4, r0
    ded6:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    deda:	2a00      	cmp	r2, #0
    dedc:	db0c      	blt.n	def8 <ExFatFile::sync()+0x30>
  if (!m_vol->cacheSync()) {
    dede:	6a05      	ldr	r5, [r0, #32]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    dee0:	4628      	mov	r0, r5
    dee2:	f006 f8cb 	bl	1407c <FsCache::sync()>
    dee6:	b978      	cbnz	r0, df08 <ExFatFile::sync()+0x40>
  m_error |= WRITE_ERROR;
    dee8:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    deec:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    deee:	f043 0301 	orr.w	r3, r3, #1
    def2:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    def6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    def8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    defc:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
}
    df00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    df04:	f7ff bf44 	b.w	dd90 <ExFatFile::syncDir()>
    df08:	f505 7004 	add.w	r0, r5, #528	; 0x210
    df0c:	f006 f8b6 	bl	1407c <FsCache::sync()>
    df10:	2800      	cmp	r0, #0
    df12:	d0e9      	beq.n	dee8 <ExFatFile::sync()+0x20>
    df14:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
    return m_blockDev->syncDevice();
    df18:	6803      	ldr	r3, [r0, #0]
    df1a:	6a1b      	ldr	r3, [r3, #32]
    df1c:	4798      	blx	r3
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    df1e:	2800      	cmp	r0, #0
    df20:	d0e2      	beq.n	dee8 <ExFatFile::sync()+0x20>
    return true;
    df22:	2001      	movs	r0, #1
}
    df24:	bd38      	pop	{r3, r4, r5, pc}
    df26:	bf00      	nop

0000df28 <ExFatFile::addDirCluster()>:
bool ExFatFile::addDirCluster() {
    df28:	b570      	push	{r4, r5, r6, lr}
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    df2a:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::addDirCluster() {
    df2e:	4605      	mov	r5, r0
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    df30:	065a      	lsls	r2, r3, #25
    df32:	d44c      	bmi.n	dfce <ExFatFile::addDirCluster()+0xa6>
    df34:	6880      	ldr	r0, [r0, #8]
  uint32_t bytesPerCluster() const {return m_bytesPerCluster;}
    df36:	6a2b      	ldr	r3, [r5, #32]
  dl += m_vol->bytesPerCluster();
    df38:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    df3c:	4418      	add	r0, r3
  if (dl >= 0X4000000) {
    df3e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    df42:	d301      	bcc.n	df48 <ExFatFile::addDirCluster()+0x20>
}
    df44:	2000      	movs	r0, #0
    df46:	bd70      	pop	{r4, r5, r6, pc}
  if (!addCluster()) {
    df48:	4628      	mov	r0, r5
    df4a:	f7ff fe4d 	bl	dbe8 <ExFatFile::addCluster()>
    df4e:	2800      	cmp	r0, #0
    df50:	d0f8      	beq.n	df44 <ExFatFile::addDirCluster()+0x1c>
  sector = m_vol->clusterStartSector(m_curCluster);
    df52:	6a28      	ldr	r0, [r5, #32]
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    df54:	2400      	movs	r4, #0
           ((cluster - 2) << m_sectorsPerClusterShift);
    df56:	69ae      	ldr	r6, [r5, #24]
    df58:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    df5c:	3e02      	subs	r6, #2
    df5e:	409e      	lsls	r6, r3
    df60:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    df64:	441e      	add	r6, r3
    return m_dataCache.prepare(sector, option);
    df66:	1931      	adds	r1, r6, r4
    df68:	2205      	movs	r2, #5
    df6a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    df6e:	3401      	adds	r4, #1
    df70:	f006 f8b0 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    memset(cache, 0, m_vol->bytesPerSector());
    df74:	f44f 7200 	mov.w	r2, #512	; 0x200
    df78:	2100      	movs	r1, #0
    if (!cache) {
    df7a:	2800      	cmp	r0, #0
    df7c:	d0e2      	beq.n	df44 <ExFatFile::addDirCluster()+0x1c>
    memset(cache, 0, m_vol->bytesPerSector());
    df7e:	f014 faaf 	bl	224e0 <memset>
  for (uint32_t i = 0; i  < m_vol->sectorsPerCluster(); i++) {
    df82:	6a28      	ldr	r0, [r5, #32]
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    df84:	2301      	movs	r3, #1
    df86:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    df8a:	4093      	lsls	r3, r2
    df8c:	429c      	cmp	r4, r3
    df8e:	d3ea      	bcc.n	df66 <ExFatFile::addDirCluster()+0x3e>
  if (!isRoot()) {
    df90:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    df94:	065b      	lsls	r3, r3, #25
    df96:	d415      	bmi.n	dfc4 <ExFatFile::addDirCluster()+0x9c>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    df98:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    df9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    m_dataLength  += m_vol->bytesPerCluster();
    dfa0:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    dfa4:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    dfa8:	f8d0 243c 	ldr.w	r2, [r0, #1084]	; 0x43c
    dfac:	189b      	adds	r3, r3, r2
    dfae:	f141 0000 	adc.w	r0, r1, #0
    dfb2:	60ab      	str	r3, [r5, #8]
    m_validLength += m_vol->bytesPerCluster();
    dfb4:	e9d5 3104 	ldrd	r3, r1, [r5, #16]
    m_dataLength  += m_vol->bytesPerCluster();
    dfb8:	60e8      	str	r0, [r5, #12]
    m_validLength += m_vol->bytesPerCluster();
    dfba:	189b      	adds	r3, r3, r2
    dfbc:	f141 0100 	adc.w	r1, r1, #0
    dfc0:	e9c5 3104 	strd	r3, r1, [r5, #16]
  return sync();
    dfc4:	4628      	mov	r0, r5
}
    dfc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return sync();
    dfca:	f7ff bf7d 	b.w	dec8 <ExFatFile::sync()>
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    dfce:	6a00      	ldr	r0, [r0, #32]
    dfd0:	f001 f9fe 	bl	f3d0 <ExFatPartition::rootLength()>
    dfd4:	e7af      	b.n	df36 <ExFatFile::addDirCluster()+0xe>
    dfd6:	bf00      	nop

0000dfd8 <ExFatFile::rename(ExFatFile*, char const*)>:
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    dfd8:	b570      	push	{r4, r5, r6, lr}
    dfda:	4604      	mov	r4, r0
  if (!(isFile() || isSubDir())) {
    dfdc:	f890 0031 	ldrb.w	r0, [r0, #49]	; 0x31
bool ExFatFile::rename(ExFatFile* dirFile, const char* newPath) {
    dfe0:	b09c      	sub	sp, #112	; 0x70
  ExFatFile() {}
    dfe2:	2300      	movs	r3, #0
  if (!(isFile() || isSubDir())) {
    dfe4:	f010 0f18 	tst.w	r0, #24
    dfe8:	930c      	str	r3, [sp, #48]	; 0x30
    dfea:	931a      	str	r3, [sp, #104]	; 0x68
    dfec:	d003      	beq.n	dff6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  if (m_vol != dirFile->m_vol) {
    dfee:	6a20      	ldr	r0, [r4, #32]
    dff0:	6a0b      	ldr	r3, [r1, #32]
    dff2:	4298      	cmp	r0, r3
    dff4:	d002      	beq.n	dffc <ExFatFile::rename(ExFatFile*, char const*)+0x24>
  return false;
    dff6:	2000      	movs	r0, #0
}
    dff8:	b01c      	add	sp, #112	; 0x70
    dffa:	bd70      	pop	{r4, r5, r6, pc}
  if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    dffc:	f640 2301 	movw	r3, #2561	; 0xa01
    e000:	4668      	mov	r0, sp
    e002:	f7ff fd5b 	bl	dabc <ExFatFile::open(ExFatFile*, char const*, int)>
    e006:	2800      	cmp	r0, #0
    e008:	d0f5      	beq.n	dff6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile = *this;
    e00a:	46a4      	mov	ip, r4
    e00c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    e010:	ad0e      	add	r5, sp, #56	; 0x38
    e012:	f8dc 0000 	ldr.w	r0, [ip]
    e016:	f10c 0c10 	add.w	ip, ip, #16
    e01a:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    e01e:	46ae      	mov	lr, r5
    e020:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    e024:	3510      	adds	r5, #16
    e026:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    e02a:	45b4      	cmp	ip, r6
    e02c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    e030:	d1ef      	bne.n	e012 <ExFatFile::rename(ExFatFile*, char const*)+0x3a>
    e032:	f8dc 0000 	ldr.w	r0, [ip]
  m_dirPos = file.m_dirPos;
    e036:	aa09      	add	r2, sp, #36	; 0x24
    e038:	f104 0324 	add.w	r3, r4, #36	; 0x24
  oldFile = *this;
    e03c:	6028      	str	r0, [r5, #0]
  m_setCount = file.m_setCount;
    e03e:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
  m_dirPos = file.m_dirPos;
    e042:	ca07      	ldmia	r2, {r0, r1, r2}
    e044:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e048:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    e04c:	4620      	mov	r0, r4
  m_setCount = file.m_setCount;
    e04e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e052:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e056:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  if (!sync()) {
    e05a:	f7ff ff35 	bl	dec8 <ExFatFile::sync()>
    e05e:	2800      	cmp	r0, #0
    e060:	d0c9      	beq.n	dff6 <ExFatFile::rename(ExFatFile*, char const*)+0x1e>
  oldFile.m_firstCluster = 0;
    e062:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    e064:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    e066:	2308      	movs	r3, #8
  return oldFile.remove();
    e068:	a80e      	add	r0, sp, #56	; 0x38
  oldFile.m_firstCluster = 0;
    e06a:	9115      	str	r1, [sp, #84]	; 0x54
  oldFile.m_flags = FILE_FLAG_WRITE;
    e06c:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
  oldFile.m_attributes = FILE_ATTR_FILE;
    e070:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
  return oldFile.remove();
    e074:	f7ff fe02 	bl	dc7c <ExFatFile::remove()>
    e078:	e7be      	b.n	dff8 <ExFatFile::rename(ExFatFile*, char const*)+0x20>
    e07a:	bf00      	nop

0000e07c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>:
bool ExFatFile::mkdir(ExFatFile* parent, ExName_t* fname) {
    e07c:	b538      	push	{r3, r4, r5, lr}
  if (!parent->isDir()) {
    e07e:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    e082:	f013 0f50 	tst.w	r3, #80	; 0x50
    e086:	d102      	bne.n	e08e <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0x12>
  return false;
    e088:	2500      	movs	r5, #0
}
    e08a:	4628      	mov	r0, r5
    e08c:	bd38      	pop	{r3, r4, r5, pc}
  if (!openPrivate(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    e08e:	f640 2302 	movw	r3, #2562	; 0xa02
    e092:	4604      	mov	r4, r0
    e094:	f7ff fb46 	bl	d724 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    e098:	2800      	cmp	r0, #0
    e09a:	d0f5      	beq.n	e088 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_attributes = FILE_ATTR_SUBDIR;
    e09c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    e09e:	4620      	mov	r0, r4
  m_attributes = FILE_ATTR_SUBDIR;
    e0a0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  if (!addDirCluster()) {
    e0a4:	f7ff ff40 	bl	df28 <ExFatFile::addDirCluster()>
    e0a8:	4605      	mov	r5, r0
    e0aa:	2800      	cmp	r0, #0
    e0ac:	d0ec      	beq.n	e088 <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xc>
  m_firstCluster = m_curCluster;
    e0ae:	69a1      	ldr	r1, [r4, #24]
    seekSet(0);
    e0b0:	2200      	movs	r2, #0
    e0b2:	2300      	movs	r3, #0
    e0b4:	4620      	mov	r0, r4
    e0b6:	61e1      	str	r1, [r4, #28]
    e0b8:	f7ff fabe 	bl	d638 <ExFatFile::seekSet(unsigned long long)>
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    e0bc:	22c1      	movs	r2, #193	; 0xc1
  if (!isOpen()) {
    e0be:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
  m_flags = FILE_FLAG_READ | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    e0c2:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
  if (!isOpen()) {
    e0c6:	2b00      	cmp	r3, #0
    e0c8:	d0df      	beq.n	e08a <ExFatFile::mkdir(ExFatFile*, ExName_t*)+0xe>
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    e0ca:	2341      	movs	r3, #65	; 0x41
    return syncDir();
    e0cc:	4620      	mov	r0, r4
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    e0ce:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    e0d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return syncDir();
    e0d6:	f7ff be5b 	b.w	dd90 <ExFatFile::syncDir()>
    e0da:	bf00      	nop

0000e0dc <ExFatFile::mkdir(ExFatFile*, char const*, bool)>:
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    e0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0de:	2500      	movs	r5, #0
    e0e0:	b097      	sub	sp, #92	; 0x5c
    e0e2:	461f      	mov	r7, r3
  if (isOpen() || !parent->isDir()) {
    e0e4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
bool ExFatFile::mkdir(ExFatFile* parent, const char* path, bool pFlag) {
    e0e8:	9201      	str	r2, [sp, #4]
    e0ea:	f8ad 5014 	strh.w	r5, [sp, #20]
  ExFatFile() {}
    e0ee:	9514      	str	r5, [sp, #80]	; 0x50
  if (isOpen() || !parent->isDir()) {
    e0f0:	2b00      	cmp	r3, #0
    e0f2:	d146      	bne.n	e182 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    e0f4:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    e0f8:	460e      	mov	r6, r1
    e0fa:	f013 0f50 	tst.w	r3, #80	; 0x50
    e0fe:	d040      	beq.n	e182 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
  if (isDirSeparator(*path)) {
    e100:	7813      	ldrb	r3, [r2, #0]
    e102:	4604      	mov	r4, r0
    e104:	4611      	mov	r1, r2
    e106:	2b2f      	cmp	r3, #47	; 0x2f
    e108:	d03e      	beq.n	e188 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!parsePathName(path, &fname, &path)) {
    e10a:	ab01      	add	r3, sp, #4
    e10c:	aa02      	add	r2, sp, #8
    e10e:	4620      	mov	r0, r4
    e110:	f7ff f95e 	bl	d3d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    e114:	2800      	cmp	r0, #0
    e116:	d034      	beq.n	e182 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!*path) {
    e118:	9b01      	ldr	r3, [sp, #4]
    e11a:	781b      	ldrb	r3, [r3, #0]
    e11c:	2b00      	cmp	r3, #0
    e11e:	d041      	beq.n	e1a4 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xc8>
    if (!openPrivate(parent, &fname, O_RDONLY)) {
    e120:	2300      	movs	r3, #0
    e122:	aa02      	add	r2, sp, #8
    e124:	4631      	mov	r1, r6
    e126:	4620      	mov	r0, r4
    e128:	f7ff fafc 	bl	d724 <ExFatFile::openPrivate(ExFatFile*, ExName_t*, int)>
    e12c:	b930      	cbnz	r0, e13c <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x60>
      if (!pFlag || !mkdir(parent, &fname)) {
    e12e:	b347      	cbz	r7, e182 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    e130:	aa02      	add	r2, sp, #8
    e132:	4631      	mov	r1, r6
    e134:	4620      	mov	r0, r4
    e136:	f7ff ffa1 	bl	e07c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
    e13a:	b310      	cbz	r0, e182 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    tmpDir = *this;
    e13c:	46a4      	mov	ip, r4
    e13e:	ad08      	add	r5, sp, #32
    e140:	f104 0630 	add.w	r6, r4, #48	; 0x30
    e144:	f8dc 0000 	ldr.w	r0, [ip]
    e148:	f10c 0c10 	add.w	ip, ip, #16
    e14c:	f85c 1c0c 	ldr.w	r1, [ip, #-12]
    e150:	46ae      	mov	lr, r5
    e152:	f85c 2c08 	ldr.w	r2, [ip, #-8]
    e156:	3510      	adds	r5, #16
    e158:	f85c 3c04 	ldr.w	r3, [ip, #-4]
    e15c:	45b4      	cmp	ip, r6
    e15e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    e162:	d1ef      	bne.n	e144 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x68>
    e164:	f8dc 0000 	ldr.w	r0, [ip]
    parent = &tmpDir;
    e168:	ae08      	add	r6, sp, #32
    tmpDir = *this;
    e16a:	6028      	str	r0, [r5, #0]
    close();
    e16c:	4620      	mov	r0, r4
    e16e:	f7ff f8ed 	bl	d34c <ExFatFile::close()>
    if (!parsePathName(path, &fname, &path)) {
    e172:	9901      	ldr	r1, [sp, #4]
    e174:	ab01      	add	r3, sp, #4
    e176:	aa02      	add	r2, sp, #8
    e178:	4620      	mov	r0, r4
    e17a:	f7ff f929 	bl	d3d0 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    e17e:	2800      	cmp	r0, #0
    e180:	d1ca      	bne.n	e118 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x3c>
  return false;
    e182:	2000      	movs	r0, #0
}
    e184:	b017      	add	sp, #92	; 0x5c
    e186:	bdf0      	pop	{r4, r5, r6, r7, pc}
      path++;
    e188:	3101      	adds	r1, #1
    e18a:	9101      	str	r1, [sp, #4]
    while (isDirSeparator(*path)) {
    e18c:	780b      	ldrb	r3, [r1, #0]
    e18e:	2b2f      	cmp	r3, #47	; 0x2f
    e190:	d0fa      	beq.n	e188 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xac>
    if (!tmpDir.openRoot(parent->m_vol)) {
    e192:	6a31      	ldr	r1, [r6, #32]
    e194:	a808      	add	r0, sp, #32
    e196:	f7ff f907 	bl	d3a8 <ExFatFile::openRoot(ExFatVolume*)>
    e19a:	2800      	cmp	r0, #0
    e19c:	d0f1      	beq.n	e182 <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0xa6>
    if (!parsePathName(path, &fname, &path)) {
    e19e:	9901      	ldr	r1, [sp, #4]
    parent = &tmpDir;
    e1a0:	ae08      	add	r6, sp, #32
    e1a2:	e7b2      	b.n	e10a <ExFatFile::mkdir(ExFatFile*, char const*, bool)+0x2e>
  return mkdir(parent, &fname);
    e1a4:	aa02      	add	r2, sp, #8
    e1a6:	4631      	mov	r1, r6
    e1a8:	4620      	mov	r0, r4
    e1aa:	f7ff ff67 	bl	e07c <ExFatFile::mkdir(ExFatFile*, ExName_t*)>
}
    e1ae:	b017      	add	sp, #92	; 0x5c
    e1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e1b2:	bf00      	nop

0000e1b4 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    e1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1b8:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
    e1ba:	f890 1031 	ldrb.w	r1, [r0, #49]	; 0x31
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    e1be:	b083      	sub	sp, #12
      || second > 59) {
    e1c0:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
    e1c2:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
    e1c6:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
    e1ca:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    e1ce:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
      || second > 59) {
    e1d2:	f140 8085 	bpl.w	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || year > 2107
    e1d6:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
    e1da:	b294      	uxth	r4, r2
    e1dc:	2c7f      	cmp	r4, #127	; 0x7f
    e1de:	d87f      	bhi.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || month > 12
    e1e0:	1e5a      	subs	r2, r3, #1
    e1e2:	2a0b      	cmp	r2, #11
    e1e4:	d87c      	bhi.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || day > 31
    e1e6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
    e1ea:	2a1e      	cmp	r2, #30
    e1ec:	d878      	bhi.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
      || minute > 59
    e1ee:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
    e1f2:	bf98      	it	ls
    e1f4:	f1b9 0f17 	cmpls.w	r9, #23
    e1f8:	bf8c      	ite	hi
    e1fa:	f04f 0a01 	movhi.w	sl, #1
    e1fe:	f04f 0a00 	movls.w	sl, #0
    e202:	2f3b      	cmp	r7, #59	; 0x3b
    e204:	bf88      	it	hi
    e206:	f04a 0a01 	orrhi.w	sl, sl, #1
      || second > 59) {
    e20a:	f1ba 0f00 	cmp.w	sl, #0
    e20e:	d167      	bne.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
    e210:	4605      	mov	r5, r0
    e212:	9301      	str	r3, [sp, #4]
    e214:	f7ff fe58 	bl	dec8 <ExFatFile::sync()>
    e218:	2800      	cmp	r0, #0
    e21a:	d061      	beq.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    e21c:	9b01      	ldr	r3, [sp, #4]
    e21e:	4651      	mov	r1, sl
    e220:	ea4b 1b43 	orr.w	fp, fp, r3, lsl #5
         hour << 11 | minute << 5 | second >> 1;
    e224:	087b      	lsrs	r3, r7, #1
    goto fail;
  }

  date = FS_DATE(year, month, day);
  time = FS_TIME(hour, minute, second);
  ms10 = second & 1 ? 100 : 0;
    e226:	f017 0701 	ands.w	r7, r7, #1
         year << 9 | month << 5 | day;
    e22a:	ea4b 2444 	orr.w	r4, fp, r4, lsl #9
  uint16_t checksum = 0;
    e22e:	46d3      	mov	fp, sl
         hour << 11 | minute << 5 | second >> 1;
    e230:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
  ms10 = second & 1 ? 100 : 0;
    e234:	bf18      	it	ne
    e236:	2764      	movne	r7, #100	; 0x64
         year << 9 | month << 5 | day;
    e238:	b2a4      	uxth	r4, r4
         hour << 11 | minute << 5 | second >> 1;
    e23a:	ea48 28c9 	orr.w	r8, r8, r9, lsl #11
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        m_vol->dataCacheDirty();
        if (flags & T_ACCESS) {
    e23e:	f006 0901 	and.w	r9, r6, #1
    e242:	fa1f f888 	uxth.w	r8, r8
    cache = dirCache(is, FsCache::CACHE_FOR_READ);
    e246:	2200      	movs	r2, #0
    e248:	4628      	mov	r0, r5
    e24a:	f7ff f861 	bl	d310 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!cache) {
    e24e:	2800      	cmp	r0, #0
    e250:	d046      	beq.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    switch (cache[0]) {
    e252:	f890 c000 	ldrb.w	ip, [r0]
    e256:	f1bc 0f85 	cmp.w	ip, #133	; 0x85
    e25a:	d045      	beq.n	e2e8 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x134>
    e25c:	f10c 0340 	add.w	r3, ip, #64	; 0x40
    e260:	b2db      	uxtb	r3, r3
    e262:	2b01      	cmp	r3, #1
    e264:	d83c      	bhi.n	e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e266:	f1ac 0185 	sub.w	r1, ip, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e26a:	2300      	movs	r3, #0
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e26c:	fab1 f181 	clz	r1, r1
    e270:	0949      	lsrs	r1, r1, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e272:	e002      	b.n	e27a <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc6>
    e274:	2304      	movs	r3, #4
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    e276:	f810 c003 	ldrb.w	ip, [r0, r3]
    e27a:	ea4f 32cb 	mov.w	r2, fp, lsl #15
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e27e:	2b01      	cmp	r3, #1
    e280:	f103 0301 	add.w	r3, r3, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    e284:	ea42 025b 	orr.w	r2, r2, fp, lsr #1
    e288:	fa1c f282 	uxtah	r2, ip, r2
    e28c:	fa1f fb82 	uxth.w	fp, r2
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    e290:	d101      	bne.n	e296 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe2>
    e292:	2900      	cmp	r1, #0
    e294:	d1ee      	bne.n	e274 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc0>
    e296:	2b1f      	cmp	r3, #31
    e298:	d9ed      	bls.n	e276 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xc2>
  for (uint8_t is = 0; is <= m_setCount; is++) {
    e29a:	f10a 0a01 	add.w	sl, sl, #1
    e29e:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
    e2a2:	fa5f f18a 	uxtb.w	r1, sl
    e2a6:	428b      	cmp	r3, r1
    e2a8:	d2cd      	bcs.n	e246 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x92>
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    e2aa:	2201      	movs	r2, #1
    e2ac:	f105 0124 	add.w	r1, r5, #36	; 0x24
    e2b0:	6a28      	ldr	r0, [r5, #32]
    e2b2:	f000 fee7 	bl	f084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    e2b6:	b198      	cbz	r0, e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    e2b8:	6a2c      	ldr	r4, [r5, #32]
  *reinterpret_cast<uint16_t*>(dst) = src;
    e2ba:	f8a0 b002 	strh.w	fp, [r0, #2]
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    e2be:	4620      	mov	r0, r4
    e2c0:	f005 fedc 	bl	1407c <FsCache::sync()>
    e2c4:	b160      	cbz	r0, e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    e2c6:	f504 7004 	add.w	r0, r4, #528	; 0x210
    e2ca:	f005 fed7 	bl	1407c <FsCache::sync()>
    e2ce:	b138      	cbz	r0, e2e0 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x12c>
    e2d0:	f8d4 0440 	ldr.w	r0, [r4, #1088]	; 0x440
    return m_blockDev->syncDevice();
    e2d4:	6803      	ldr	r3, [r0, #0]
    e2d6:	6a1b      	ldr	r3, [r3, #32]
  }
  return true;

 fail:
  return false;
}
    e2d8:	b003      	add	sp, #12
    e2da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2de:	4718      	bx	r3
    e2e0:	2000      	movs	r0, #0
    e2e2:	b003      	add	sp, #12
    e2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    e2e8:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
        m_vol->dataCacheDirty();
    e2ec:	6a2a      	ldr	r2, [r5, #32]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
    e2ee:	f003 0337 	and.w	r3, r3, #55	; 0x37
    e2f2:	8083      	strh	r3, [r0, #4]
    e2f4:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    e2f8:	f043 0301 	orr.w	r3, r3, #1
    e2fc:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
        if (flags & T_ACCESS) {
    e300:	f1b9 0f00 	cmp.w	r9, #0
    e304:	d002      	beq.n	e30c <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x158>
    e306:	f8a0 8010 	strh.w	r8, [r0, #16]
    e30a:	8244      	strh	r4, [r0, #18]
        if (flags & T_CREATE) {
    e30c:	07b2      	lsls	r2, r6, #30
    e30e:	d503      	bpl.n	e318 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x164>
          df->createTimeMs = ms10;
    e310:	7507      	strb	r7, [r0, #20]
    e312:	f8a0 8008 	strh.w	r8, [r0, #8]
    e316:	8144      	strh	r4, [r0, #10]
        if (flags & T_WRITE) {
    e318:	0773      	lsls	r3, r6, #29
    e31a:	d503      	bpl.n	e324 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x170>
          df->modifyTimeMs = ms10;
    e31c:	7547      	strb	r7, [r0, #21]
    e31e:	f8a0 800c 	strh.w	r8, [r0, #12]
    e322:	81c4      	strh	r4, [r0, #14]
  bool skip = data[0] == EXFAT_TYPE_FILE;
    e324:	f890 c000 	ldrb.w	ip, [r0]
}
    e328:	e79d      	b.n	e266 <ExFatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb2>
    e32a:	bf00      	nop

0000e32c <ExFatFile::truncate()>:
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
    e32c:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    e330:	079a      	lsls	r2, r3, #30
    e332:	d562      	bpl.n	e3fa <ExFatFile::truncate()+0xce>
bool ExFatFile::truncate() {
    e334:	b570      	push	{r4, r5, r6, lr}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    e336:	69c5      	ldr	r5, [r0, #28]
bool ExFatFile::truncate() {
    e338:	b082      	sub	sp, #8
    e33a:	4604      	mov	r4, r0
  if (m_firstCluster == 0) {
    e33c:	b3a5      	cbz	r5, e3a8 <ExFatFile::truncate()+0x7c>
      return true;
  }
  if (isContiguous()) {
    e33e:	f013 0640 	ands.w	r6, r3, #64	; 0x40
    e342:	d034      	beq.n	e3ae <ExFatFile::truncate()+0x82>
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    e344:	6a00      	ldr	r0, [r0, #32]
    e346:	68a2      	ldr	r2, [r4, #8]
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    e348:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    e34c:	3a01      	subs	r2, #1
    e34e:	68e1      	ldr	r1, [r4, #12]
    e350:	f10c 0c09 	add.w	ip, ip, #9
    e354:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
    e358:	fa5f fc8c 	uxtb.w	ip, ip
    e35c:	f1cc 0e20 	rsb	lr, ip, #32
    e360:	fa22 f20c 	lsr.w	r2, r2, ip
    e364:	f1ac 0c20 	sub.w	ip, ip, #32
    e368:	fa01 fe0e 	lsl.w	lr, r1, lr
    e36c:	fa21 fc0c 	lsr.w	ip, r1, ip
    if (m_curCluster) {
    e370:	69a1      	ldr	r1, [r4, #24]
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    e372:	ea42 020e 	orr.w	r2, r2, lr
    e376:	ea42 020c 	orr.w	r2, r2, ip
    e37a:	3201      	adds	r2, #1
    if (m_curCluster) {
    e37c:	b319      	cbz	r1, e3c6 <ExFatFile::truncate()+0x9a>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    e37e:	3d01      	subs	r5, #1
    e380:	1a6d      	subs	r5, r5, r1
      toFree = m_curCluster + 1;
    e382:	3101      	adds	r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    e384:	442a      	add	r2, r5
      toFree = m_curCluster + 1;
    e386:	9101      	str	r1, [sp, #4]
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    e388:	bb72      	cbnz	r2, e3e8 <ExFatFile::truncate()+0xbc>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e38a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  return sync();
    e38e:	4620      	mov	r0, r4
  m_dataLength = m_curPosition;
    e390:	ed94 7b00 	vldr	d7, [r4]
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e394:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  m_dataLength = m_curPosition;
    e398:	ed84 7b02 	vstr	d7, [r4, #8]
  m_validLength = m_curPosition;
    e39c:	ed84 7b04 	vstr	d7, [r4, #16]
  return sync();
    e3a0:	f7ff fd92 	bl	dec8 <ExFatFile::sync()>

 fail:
  return false;
}
    e3a4:	b002      	add	sp, #8
    e3a6:	bd70      	pop	{r4, r5, r6, pc}
      return true;
    e3a8:	2001      	movs	r0, #1
}
    e3aa:	b002      	add	sp, #8
    e3ac:	bd70      	pop	{r4, r5, r6, pc}
    if (m_curCluster) {
    e3ae:	6981      	ldr	r1, [r0, #24]
    e3b0:	b961      	cbnz	r1, e3cc <ExFatFile::truncate()+0xa0>
      toFree = m_firstCluster;
    e3b2:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    e3b4:	61c1      	str	r1, [r0, #28]
      if (!m_vol->freeChain(toFree)) {
    e3b6:	4629      	mov	r1, r5
    e3b8:	6a20      	ldr	r0, [r4, #32]
    e3ba:	f000 ff03 	bl	f1c4 <ExFatPartition::freeChain(unsigned long)>
    e3be:	b1c8      	cbz	r0, e3f4 <ExFatFile::truncate()+0xc8>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e3c0:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e3c4:	e7e1      	b.n	e38a <ExFatFile::truncate()+0x5e>
      toFree = m_firstCluster;
    e3c6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    e3c8:	61e1      	str	r1, [r4, #28]
    e3ca:	e7dd      	b.n	e388 <ExFatFile::truncate()+0x5c>
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    e3cc:	aa01      	add	r2, sp, #4
    e3ce:	6a00      	ldr	r0, [r0, #32]
      toFree = 0;
    e3d0:	9601      	str	r6, [sp, #4]
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    e3d2:	f000 feb5 	bl	f140 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
      if (fg < 0) {
    e3d6:	2800      	cmp	r0, #0
    e3d8:	db0c      	blt.n	e3f4 <ExFatFile::truncate()+0xc8>
      if (fg) {
    e3da:	d110      	bne.n	e3fe <ExFatFile::truncate()+0xd2>
    if (toFree) {
    e3dc:	9d01      	ldr	r5, [sp, #4]
    e3de:	2d00      	cmp	r5, #0
    e3e0:	d1e9      	bne.n	e3b6 <ExFatFile::truncate()+0x8a>
  m_flags |= FILE_FLAG_DIR_DIRTY;
    e3e2:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e3e6:	e7d0      	b.n	e38a <ExFatFile::truncate()+0x5e>
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    e3e8:	2300      	movs	r3, #0
    e3ea:	9901      	ldr	r1, [sp, #4]
    e3ec:	f000 fdce 	bl	ef8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    e3f0:	2800      	cmp	r0, #0
    e3f2:	d1e5      	bne.n	e3c0 <ExFatFile::truncate()+0x94>
  return false;
    e3f4:	2000      	movs	r0, #0
}
    e3f6:	b002      	add	sp, #8
    e3f8:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    e3fa:	2000      	movs	r0, #0
}
    e3fc:	4770      	bx	lr
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    e3fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e402:	69a1      	ldr	r1, [r4, #24]
    e404:	6a20      	ldr	r0, [r4, #32]
    e406:	f000 febd 	bl	f184 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    e40a:	2800      	cmp	r0, #0
    e40c:	d1e6      	bne.n	e3dc <ExFatFile::truncate()+0xb0>
    e40e:	e7f1      	b.n	e3f4 <ExFatFile::truncate()+0xc8>

0000e410 <ExFatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    e410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e414:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    e418:	b083      	sub	sp, #12
    e41a:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    e41c:	079d      	lsls	r5, r3, #30
    e41e:	f140 80a1 	bpl.w	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    e422:	4691      	mov	r9, r2
    e424:	071a      	lsls	r2, r3, #28
    e426:	460e      	mov	r6, r1
    e428:	f100 8095 	bmi.w	e556 <ExFatFile::write(void const*, unsigned int)+0x146>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    e42c:	f1b9 0f00 	cmp.w	r9, #0
    e430:	f000 8128 	beq.w	e684 <ExFatFile::write(void const*, unsigned int)+0x274>
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    e434:	6823      	ldr	r3, [r4, #0]
    e436:	464d      	mov	r5, r9
    clusterOffset = m_curPosition & m_vol->clusterMask();
    e438:	6a20      	ldr	r0, [r4, #32]
      if (m_curCluster != 0) {
    e43a:	69a1      	ldr	r1, [r4, #24]
    clusterOffset = m_curPosition & m_vol->clusterMask();
    e43c:	f8d0 2438 	ldr.w	r2, [r0, #1080]	; 0x438
    e440:	ea02 0803 	and.w	r8, r2, r3
    sectorOffset = clusterOffset & m_vol->sectorMask();
    e444:	f3c8 0708 	ubfx	r7, r8, #0, #9
    if (clusterOffset == 0) {
    e448:	f1b8 0f00 	cmp.w	r8, #0
    e44c:	f040 8094 	bne.w	e578 <ExFatFile::write(void const*, unsigned int)+0x168>
      if (m_curCluster != 0) {
    e450:	2900      	cmp	r1, #0
    e452:	f000 80d4 	beq.w	e5fe <ExFatFile::write(void const*, unsigned int)+0x1ee>
        if (isContiguous()) {
    e456:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e45a:	065b      	lsls	r3, r3, #25
    e45c:	f140 80ec 	bpl.w	e638 <ExFatFile::write(void const*, unsigned int)+0x228>
    e460:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
    e464:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    e468:	f10c 0c09 	add.w	ip, ip, #9
    e46c:	3b01      	subs	r3, #1
    e46e:	fa5f fc8c 	uxtb.w	ip, ip
    e472:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
    e476:	f1cc 0e20 	rsb	lr, ip, #32
    e47a:	fa23 f30c 	lsr.w	r3, r3, ip
    e47e:	f1ac 0c20 	sub.w	ip, ip, #32
    e482:	fa02 fe0e 	lsl.w	lr, r2, lr
    e486:	fa22 fc0c 	lsr.w	ip, r2, ip
    e48a:	69e2      	ldr	r2, [r4, #28]
    e48c:	ea43 030e 	orr.w	r3, r3, lr
    e490:	ea43 030c 	orr.w	r3, r3, ip
    e494:	4413      	add	r3, r2
          if (m_curCluster < lc) {
    e496:	4299      	cmp	r1, r3
    e498:	f080 80d5 	bcs.w	e646 <ExFatFile::write(void const*, unsigned int)+0x236>
            m_curCluster++;
    e49c:	3101      	adds	r1, #1
    e49e:	61a1      	str	r1, [r4, #24]
           ((cluster - 2) << m_sectorsPerClusterShift);
    e4a0:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    e4a4:	3902      	subs	r1, #2
    sector = m_vol->clusterStartSector(m_curCluster) +
    e4a6:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    e4aa:	4091      	lsls	r1, r2
    e4ac:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    e4ae:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    e4b2:	f0c0 808a 	bcc.w	e5ca <ExFatFile::write(void const*, unsigned int)+0x1ba>
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    e4b6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    e4ba:	f0c0 80a6 	bcc.w	e60a <ExFatFile::write(void const*, unsigned int)+0x1fa>
  uint32_t sectorsPerCluster() const {return 1UL << m_sectorsPerClusterShift;}
    e4be:	2301      	movs	r3, #1
    e4c0:	4093      	lsls	r3, r2
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    e4c2:	0a6a      	lsrs	r2, r5, #9
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    e4c4:	eba3 0308 	sub.w	r3, r3, r8
    e4c8:	4293      	cmp	r3, r2
    e4ca:	bf28      	it	cs
    e4cc:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
    e4ce:	f8d0 221c 	ldr.w	r2, [r0, #540]	; 0x21c
    e4d2:	428a      	cmp	r2, r1
      n = ns << m_vol->bytesPerSectorShift();
    e4d4:	ea4f 2843 	mov.w	r8, r3, lsl #9
    e4d8:	d309      	bcc.n	e4ee <ExFatFile::write(void const*, unsigned int)+0xde>
    e4da:	185f      	adds	r7, r3, r1
    e4dc:	42ba      	cmp	r2, r7
    e4de:	d206      	bcs.n	e4ee <ExFatFile::write(void const*, unsigned int)+0xde>
    m_status = 0;
    e4e0:	2200      	movs	r2, #0
    e4e2:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    e4e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e4ea:	f8c0 221c 	str.w	r2, [r0, #540]	; 0x21c
    return m_blockDev->writeSectors(sector, src, count);
    e4ee:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    e4f2:	4632      	mov	r2, r6
    e4f4:	6807      	ldr	r7, [r0, #0]
    e4f6:	6abf      	ldr	r7, [r7, #40]	; 0x28
    e4f8:	47b8      	blx	r7
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    e4fa:	b398      	cbz	r0, e564 <ExFatFile::write(void const*, unsigned int)+0x154>
    m_curPosition += n;
    e4fc:	4643      	mov	r3, r8
    src += n;
    e4fe:	4446      	add	r6, r8
    toWrite -= n;
    e500:	eba5 0508 	sub.w	r5, r5, r8
    m_curPosition += n;
    e504:	e9d4 7200 	ldrd	r7, r2, [r4]
    if (m_curPosition > m_validLength) {
    e508:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    m_curPosition += n;
    e50c:	19db      	adds	r3, r3, r7
    e50e:	f142 0200 	adc.w	r2, r2, #0
    if (m_curPosition > m_validLength) {
    e512:	4298      	cmp	r0, r3
    e514:	4191      	sbcs	r1, r2
    m_curPosition += n;
    e516:	e9c4 3200 	strd	r3, r2, [r4]
    if (m_curPosition > m_validLength) {
    e51a:	d207      	bcs.n	e52c <ExFatFile::write(void const*, unsigned int)+0x11c>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    e51c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    e520:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    e524:	e9c4 3204 	strd	r3, r2, [r4, #16]
      m_flags |= FILE_FLAG_DIR_DIRTY;
    e528:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
  while (toWrite) {
    e52c:	2d00      	cmp	r5, #0
    e52e:	d183      	bne.n	e438 <ExFatFile::write(void const*, unsigned int)+0x28>
  if (m_curPosition > m_dataLength) {
    e530:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    e534:	4298      	cmp	r0, r3
    e536:	4191      	sbcs	r1, r2
    e538:	f0c0 8096 	bcc.w	e668 <ExFatFile::write(void const*, unsigned int)+0x258>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    e53c:	4b53      	ldr	r3, [pc, #332]	; (e68c <ExFatFile::write(void const*, unsigned int)+0x27c>)
    e53e:	681b      	ldr	r3, [r3, #0]
    e540:	2b00      	cmp	r3, #0
    e542:	f000 809d 	beq.w	e680 <ExFatFile::write(void const*, unsigned int)+0x270>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    e546:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    e54a:	4648      	mov	r0, r9
    e54c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e550:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    e554:	e00d      	b.n	e572 <ExFatFile::write(void const*, unsigned int)+0x162>
    if (!seekSet(m_validLength)) {
    e556:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    e55a:	f7ff f86d 	bl	d638 <ExFatFile::seekSet(unsigned long long)>
    e55e:	2800      	cmp	r0, #0
    e560:	f47f af64 	bne.w	e42c <ExFatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    e564:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return 0;
    e568:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    e56a:	f043 0301 	orr.w	r3, r3, #1
    e56e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
}
    e572:	b003      	add	sp, #12
    e574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           ((cluster - 2) << m_sectorsPerClusterShift);
    e578:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    e57c:	3902      	subs	r1, #2
             (clusterOffset >> m_vol->bytesPerSectorShift());
    e57e:	ea4f 2858 	mov.w	r8, r8, lsr #9
    sector = m_vol->clusterStartSector(m_curCluster) +
    e582:	f8d0 342c 	ldr.w	r3, [r0, #1068]	; 0x42c
    e586:	4091      	lsls	r1, r2
    e588:	4441      	add	r1, r8
    e58a:	4419      	add	r1, r3
    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    e58c:	2f00      	cmp	r7, #0
    e58e:	d08e      	beq.n	e4ae <ExFatFile::write(void const*, unsigned int)+0x9e>
      n = m_vol->bytesPerSector() - sectorOffset;
    e590:	f5c7 7800 	rsb	r8, r7, #512	; 0x200
    return m_dataCache.prepare(sector, option);
    e594:	2201      	movs	r2, #1
    e596:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e59a:	45a8      	cmp	r8, r5
    e59c:	bf28      	it	cs
    e59e:	46a8      	movcs	r8, r5
    e5a0:	f005 fd98 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    e5a4:	2800      	cmp	r0, #0
    e5a6:	d0dd      	beq.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    e5a8:	4438      	add	r0, r7
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    e5aa:	4447      	add	r7, r8
      memcpy(dst, src, n);
    e5ac:	4642      	mov	r2, r8
    e5ae:	4631      	mov	r1, r6
    e5b0:	f007 fff4 	bl	1659c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    e5b4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    e5b8:	6a20      	ldr	r0, [r4, #32]
    e5ba:	d19f      	bne.n	e4fc <ExFatFile::write(void const*, unsigned int)+0xec>
  bool dataCacheSync() {return m_dataCache.sync();}
    e5bc:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e5c0:	f005 fd5c 	bl	1407c <FsCache::sync()>
        if (!m_vol->dataCacheSync()) {
    e5c4:	2800      	cmp	r0, #0
    e5c6:	d199      	bne.n	e4fc <ExFatFile::write(void const*, unsigned int)+0xec>
    e5c8:	e7cc      	b.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    e5ca:	6862      	ldr	r2, [r4, #4]
    e5cc:	6963      	ldr	r3, [r4, #20]
    e5ce:	9200      	str	r2, [sp, #0]
    e5d0:	9301      	str	r3, [sp, #4]
    e5d2:	6922      	ldr	r2, [r4, #16]
    e5d4:	6823      	ldr	r3, [r4, #0]
    e5d6:	4293      	cmp	r3, r2
    e5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
    e5dc:	419a      	sbcs	r2, r3
    e5de:	d212      	bcs.n	e606 <ExFatFile::write(void const*, unsigned int)+0x1f6>
        cacheOption = FsCache::CACHE_FOR_WRITE;
    e5e0:	2201      	movs	r2, #1
    return m_dataCache.prepare(sector, option);
    e5e2:	f500 7004 	add.w	r0, r0, #528	; 0x210
    e5e6:	f005 fd75 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!cache) {
    e5ea:	2800      	cmp	r0, #0
    e5ec:	d0ba      	beq.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
      memcpy(dst, src, n);
    e5ee:	462a      	mov	r2, r5
    e5f0:	4631      	mov	r1, r6
    e5f2:	4438      	add	r0, r7
    m_curPosition += n;
    e5f4:	46a8      	mov	r8, r5
      memcpy(dst, src, n);
    e5f6:	f007 ffd1 	bl	1659c <memcpy>
    m_curPosition += n;
    e5fa:	462b      	mov	r3, r5
    e5fc:	e77f      	b.n	e4fe <ExFatFile::write(void const*, unsigned int)+0xee>
        if (m_firstCluster == 0) {
    e5fe:	69e1      	ldr	r1, [r4, #28]
    e600:	b349      	cbz	r1, e656 <ExFatFile::write(void const*, unsigned int)+0x246>
          m_curCluster = m_firstCluster;
    e602:	61a1      	str	r1, [r4, #24]
    e604:	e74c      	b.n	e4a0 <ExFatFile::write(void const*, unsigned int)+0x90>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    e606:	2205      	movs	r2, #5
    e608:	e7eb      	b.n	e5e2 <ExFatFile::write(void const*, unsigned int)+0x1d2>
    if (isCached(sector)) {
    e60a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    e60e:	428b      	cmp	r3, r1
    e610:	d106      	bne.n	e620 <ExFatFile::write(void const*, unsigned int)+0x210>
    m_status = 0;
    e612:	2300      	movs	r3, #0
    e614:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    e618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e61c:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    return m_blockDev->writeSector(sector, src);
    e620:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    e624:	4632      	mov	r2, r6
    e626:	6803      	ldr	r3, [r0, #0]
    e628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e62a:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
    e62c:	2800      	cmp	r0, #0
    e62e:	d099      	beq.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
    e630:	f44f 7300 	mov.w	r3, #512	; 0x200
      n = m_vol->bytesPerSector();
    e634:	4698      	mov	r8, r3
    e636:	e762      	b.n	e4fe <ExFatFile::write(void const*, unsigned int)+0xee>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    e638:	f104 0218 	add.w	r2, r4, #24
    e63c:	f000 fd80 	bl	f140 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    e640:	2800      	cmp	r0, #0
    e642:	db8f      	blt.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
        if (fg == 0) {
    e644:	d104      	bne.n	e650 <ExFatFile::write(void const*, unsigned int)+0x240>
          if (!addCluster()) {
    e646:	4620      	mov	r0, r4
    e648:	f7ff face 	bl	dbe8 <ExFatFile::addCluster()>
    e64c:	2800      	cmp	r0, #0
    e64e:	d089      	beq.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
    sector = m_vol->clusterStartSector(m_curCluster) +
    e650:	69a1      	ldr	r1, [r4, #24]
    e652:	6a20      	ldr	r0, [r4, #32]
    e654:	e724      	b.n	e4a0 <ExFatFile::write(void const*, unsigned int)+0x90>
          if (!addCluster()) {
    e656:	4620      	mov	r0, r4
    e658:	f7ff fac6 	bl	dbe8 <ExFatFile::addCluster()>
    e65c:	2800      	cmp	r0, #0
    e65e:	d081      	beq.n	e564 <ExFatFile::write(void const*, unsigned int)+0x154>
          m_firstCluster = m_curCluster;
    e660:	69a1      	ldr	r1, [r4, #24]
    sector = m_vol->clusterStartSector(m_curCluster) +
    e662:	6a20      	ldr	r0, [r4, #32]
          m_firstCluster = m_curCluster;
    e664:	61e1      	str	r1, [r4, #28]
    e666:	e71b      	b.n	e4a0 <ExFatFile::write(void const*, unsigned int)+0x90>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    e668:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    e66c:	4648      	mov	r0, r9
    m_dataLength = m_curPosition;
    e66e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    e672:	f061 037f 	orn	r3, r1, #127	; 0x7f
    e676:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
}
    e67a:	b003      	add	sp, #12
    e67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e680:	4648      	mov	r0, r9
    e682:	e776      	b.n	e572 <ExFatFile::write(void const*, unsigned int)+0x162>
  if (m_curPosition > m_dataLength) {
    e684:	e9d4 3200 	ldrd	r3, r2, [r4]
    e688:	e752      	b.n	e530 <ExFatFile::write(void const*, unsigned int)+0x120>
    e68a:	bf00      	nop
    e68c:	2000502c 	.word	0x2000502c

0000e690 <Print::write(char const*) [clone .isra.0]>:
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    e690:	b169      	cbz	r1, e6ae <Print::write(char const*) [clone .isra.0]+0x1e>
    e692:	b570      	push	{r4, r5, r6, lr}
    e694:	4605      	mov	r5, r0
							  return write((const uint8_t *)str, strlen(str)); }
    e696:	4608      	mov	r0, r1
    e698:	460c      	mov	r4, r1
    e69a:	f014 fab1 	bl	22c00 <strlen>
    e69e:	682b      	ldr	r3, [r5, #0]
    e6a0:	4602      	mov	r2, r0
    e6a2:	4621      	mov	r1, r4
    e6a4:	4628      	mov	r0, r5
    e6a6:	685b      	ldr	r3, [r3, #4]
    e6a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e6ac:	4718      	bx	r3
    e6ae:	4770      	bx	lr

0000e6b0 <ExFatFormatter::syncUpcase()>:
  writeMsg(pr, "Format failed\r\n");
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFormatter::syncUpcase() {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    e6b0:	6883      	ldr	r3, [r0, #8]
    e6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
  if (!index) {
    e6b6:	b183      	cbz	r3, e6da <ExFatFormatter::syncUpcase()+0x2a>
    return true;
  }
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    m_secBuf[i] = 0;
    e6b8:	2100      	movs	r1, #0
bool ExFatFormatter::syncUpcase() {
    e6ba:	b410      	push	{r4}
    m_secBuf[i] = 0;
    e6bc:	6902      	ldr	r2, [r0, #16]
    e6be:	54d1      	strb	r1, [r2, r3]
  for (size_t i = index; i < BYTES_PER_SECTOR; i++) {
    e6c0:	3301      	adds	r3, #1
    e6c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    e6c6:	d1f9      	bne.n	e6bc <ExFatFormatter::syncUpcase()+0xc>
  }
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    e6c8:	6801      	ldr	r1, [r0, #0]
    e6ca:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    e6ce:	681c      	ldr	r4, [r3, #0]
    e6d0:	4618      	mov	r0, r3
    e6d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
}
    e6d4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return m_dev->writeSector(m_upcaseSector, m_secBuf);
    e6d8:	4718      	bx	r3
}
    e6da:	2001      	movs	r0, #1
    e6dc:	4770      	bx	lr
    e6de:	bf00      	nop

0000e6e0 <ExFatFormatter::writeUpcaseByte(unsigned char)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    e6e0:	6882      	ldr	r2, [r0, #8]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    e6e2:	4603      	mov	r3, r0
  m_secBuf[index] = b;
    e6e4:	6900      	ldr	r0, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    e6e6:	f240 1cff 	movw	ip, #511	; 0x1ff
    e6ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
  m_secBuf[index] = b;
    e6ee:	5481      	strb	r1, [r0, r2]
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
  m_upcaseSize++;
  if (index == SECTOR_MASK) {
    e6f0:	4562      	cmp	r2, ip
  uint8_t  mustBeZero2[2];
  uint8_t  unicode3[4];
} DirLfn_t;
//=============================================================================
inline uint32_t exFatChecksum(uint32_t sum, uint8_t data) {
  return (sum << 31) + (sum >> 1) + data;
    e6f2:	6858      	ldr	r0, [r3, #4]
    e6f4:	eb01 0170 	add.w	r1, r1, r0, ror #1
  m_upcaseSize++;
    e6f8:	6898      	ldr	r0, [r3, #8]
    e6fa:	f100 0001 	add.w	r0, r0, #1
    e6fe:	e9c3 1001 	strd	r1, r0, [r3, #4]
  if (index == SECTOR_MASK) {
    e702:	d001      	beq.n	e708 <ExFatFormatter::writeUpcaseByte(unsigned char)+0x28>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
  }
  return true;
}
    e704:	2001      	movs	r0, #1
    e706:	4770      	bx	lr
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    e708:	68d8      	ldr	r0, [r3, #12]
    e70a:	6819      	ldr	r1, [r3, #0]
bool ExFatFormatter::writeUpcaseByte(uint8_t b) {
    e70c:	b410      	push	{r4}
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    e70e:	6804      	ldr	r4, [r0, #0]
    e710:	1c4a      	adds	r2, r1, #1
    e712:	6a64      	ldr	r4, [r4, #36]	; 0x24
    e714:	601a      	str	r2, [r3, #0]
    e716:	691a      	ldr	r2, [r3, #16]
    e718:	4623      	mov	r3, r4
}
    e71a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    e71e:	4718      	bx	r3

0000e720 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    e720:	b538      	push	{r3, r4, r5, lr}
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    e722:	6883      	ldr	r3, [r0, #8]
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e724:	b2ca      	uxtb	r2, r1
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    e726:	460d      	mov	r5, r1
  m_secBuf[index] = b;
    e728:	6901      	ldr	r1, [r0, #16]
  uint16_t index = m_upcaseSize & SECTOR_MASK;
    e72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    e72e:	f240 1cff 	movw	ip, #511	; 0x1ff
bool ExFatFormatter::writeUpcaseUnicode(uint16_t unicode) {
    e732:	4604      	mov	r4, r0
  m_secBuf[index] = b;
    e734:	54ca      	strb	r2, [r1, r3]
  if (index == SECTOR_MASK) {
    e736:	4563      	cmp	r3, ip
    e738:	6841      	ldr	r1, [r0, #4]
    e73a:	eb02 0271 	add.w	r2, r2, r1, ror #1
  m_upcaseChecksum = exFatChecksum(m_upcaseChecksum, b);
    e73e:	6042      	str	r2, [r0, #4]
  m_upcaseSize++;
    e740:	6882      	ldr	r2, [r0, #8]
    e742:	f102 0201 	add.w	r2, r2, #1
    e746:	6082      	str	r2, [r0, #8]
  if (index == SECTOR_MASK) {
    e748:	d005      	beq.n	e756 <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x36>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e74a:	0a29      	lsrs	r1, r5, #8
    e74c:	4620      	mov	r0, r4
}
    e74e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e752:	f7ff bfc5 	b.w	e6e0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    return m_dev->writeSector(m_upcaseSector++, m_secBuf);
    e756:	6801      	ldr	r1, [r0, #0]
    e758:	68c0      	ldr	r0, [r0, #12]
    e75a:	1c4a      	adds	r2, r1, #1
    e75c:	6803      	ldr	r3, [r0, #0]
    e75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e760:	6022      	str	r2, [r4, #0]
    e762:	6922      	ldr	r2, [r4, #16]
    e764:	4798      	blx	r3
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e766:	2800      	cmp	r0, #0
    e768:	d1ef      	bne.n	e74a <ExFatFormatter::writeUpcaseUnicode(unsigned short)+0x2a>
}
    e76a:	bd38      	pop	{r3, r4, r5, pc}

0000e76c <ExFatFormatter::writeUpcase(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    e76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t n;
  uint32_t ns;
  uint32_t ch = 0;
  uint16_t uc;

  m_upcaseSize = 0;
    e76e:	2300      	movs	r3, #0
bool ExFatFormatter::writeUpcase(uint32_t sector) {
    e770:	4606      	mov	r6, r0
  m_upcaseChecksum = 0;
  m_upcaseSector = sector;
    e772:	6001      	str	r1, [r0, #0]
  uint32_t ch = 0;
    e774:	461d      	mov	r5, r3
  m_upcaseChecksum = 0;
    e776:	e9c0 3301 	strd	r3, r3, [r0, #4]

  while (ch < 0X10000) {
    uc = toUpcase(ch);
    e77a:	b2a8      	uxth	r0, r5
    e77c:	f005 fdfc 	bl	14378 <toUpcase(unsigned short)>
    if (uc != ch) {
    e780:	42a8      	cmp	r0, r5
    uc = toUpcase(ch);
    e782:	4604      	mov	r4, r0
    if (uc != ch) {
    e784:	d007      	beq.n	e796 <ExFatFormatter::writeUpcase(unsigned long)+0x2a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e786:	b2c1      	uxtb	r1, r0
    e788:	4630      	mov	r0, r6
    e78a:	f7ff ffa9 	bl	e6e0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    e78e:	2800      	cmp	r0, #0
    e790:	d13b      	bne.n	e80a <ExFatFormatter::writeUpcase(unsigned long)+0x9e>
  }
  return true;

 fail:
  return false;
}
    e792:	2000      	movs	r0, #0
    e794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (n = ch + 1; n < 0X10000 && n == toUpcase(n); n++) {}
    e796:	1c6c      	adds	r4, r5, #1
    e798:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e79c:	d104      	bne.n	e7a8 <ExFatFormatter::writeUpcase(unsigned long)+0x3c>
    e79e:	e02a      	b.n	e7f6 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
    e7a0:	3401      	adds	r4, #1
    e7a2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
    e7a6:	d004      	beq.n	e7b2 <ExFatFormatter::writeUpcase(unsigned long)+0x46>
    e7a8:	b2a0      	uxth	r0, r4
    e7aa:	f005 fde5 	bl	14378 <toUpcase(unsigned short)>
    e7ae:	42a0      	cmp	r0, r4
    e7b0:	d0f6      	beq.n	e7a0 <ExFatFormatter::writeUpcase(unsigned long)+0x34>
      ns = n - ch;
    e7b2:	1b67      	subs	r7, r4, r5
      if (ns >= MINIMUM_UPCASE_SKIP) {
    e7b4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
    e7b8:	d31d      	bcc.n	e7f6 <ExFatFormatter::writeUpcase(unsigned long)+0x8a>
        if (!writeUpcaseUnicode(0XFFFF) || !writeUpcaseUnicode(ns)) {
    e7ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e7be:	4630      	mov	r0, r6
    e7c0:	f7ff ffae 	bl	e720 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    e7c4:	2800      	cmp	r0, #0
    e7c6:	d0e4      	beq.n	e792 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    e7c8:	b2b9      	uxth	r1, r7
    e7ca:	4630      	mov	r0, r6
    e7cc:	f7ff ffa8 	bl	e720 <ExFatFormatter::writeUpcaseUnicode(unsigned short)>
    e7d0:	2800      	cmp	r0, #0
    e7d2:	d0de      	beq.n	e792 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
    e7d4:	4625      	mov	r5, r4
  while (ch < 0X10000) {
    e7d6:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
    e7da:	d1ce      	bne.n	e77a <ExFatFormatter::writeUpcase(unsigned long)+0xe>
  if (!syncUpcase()) {
    e7dc:	4630      	mov	r0, r6
}
    e7de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  if (!syncUpcase()) {
    e7e2:	f7ff bf65 	b.w	e6b0 <ExFatFormatter::syncUpcase()>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e7e6:	f3c5 2107 	ubfx	r1, r5, #8, #8
    e7ea:	4630      	mov	r0, r6
    e7ec:	3501      	adds	r5, #1
    e7ee:	f7ff ff77 	bl	e6e0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    e7f2:	2800      	cmp	r0, #0
    e7f4:	d0cd      	beq.n	e792 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
        while (ch < n) {
    e7f6:	42a5      	cmp	r5, r4
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e7f8:	b2e9      	uxtb	r1, r5
    e7fa:	4630      	mov	r0, r6
        while (ch < n) {
    e7fc:	d2eb      	bcs.n	e7d6 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e7fe:	f7ff ff6f 	bl	e6e0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    e802:	2800      	cmp	r0, #0
    e804:	d1ef      	bne.n	e7e6 <ExFatFormatter::writeUpcase(unsigned long)+0x7a>
}
    e806:	2000      	movs	r0, #0
    e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return writeUpcaseByte(unicode) && writeUpcaseByte(unicode >> 8);
    e80a:	f3c4 2107 	ubfx	r1, r4, #8, #8
    e80e:	4630      	mov	r0, r6
    e810:	f7ff ff66 	bl	e6e0 <ExFatFormatter::writeUpcaseByte(unsigned char)>
    e814:	2800      	cmp	r0, #0
    e816:	d0bc      	beq.n	e792 <ExFatFormatter::writeUpcase(unsigned long)+0x26>
      ch++;
    e818:	3501      	adds	r5, #1
    e81a:	e7dc      	b.n	e7d6 <ExFatFormatter::writeUpcase(unsigned long)+0x6a>

0000e81c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    e81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e820:	461f      	mov	r7, r3
    e822:	b089      	sub	sp, #36	; 0x24
  sectorCount = dev->sectorCount();
    e824:	680b      	ldr	r3, [r1, #0]
bool ExFatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
    e826:	460d      	mov	r5, r1
    e828:	9004      	str	r0, [sp, #16]
    e82a:	4614      	mov	r4, r2
  m_dev = dev;
    e82c:	60c1      	str	r1, [r0, #12]
  m_secBuf = secBuf;
    e82e:	6102      	str	r2, [r0, #16]
  sectorCount = dev->sectorCount();
    e830:	4608      	mov	r0, r1
    e832:	69db      	ldr	r3, [r3, #28]
    e834:	4798      	blx	r3
  if (sectorCount < 0X100000) {
    e836:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
  sectorCount = dev->sectorCount();
    e83a:	9000      	str	r0, [sp, #0]
  if (sectorCount < 0X100000) {
    e83c:	f0c0 80d8 	bcc.w	e9f0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1d4>
  for (m = 1, vs = 0; m && sectorCount > m; m <<= 1, vs++) {}
    e840:	2300      	movs	r3, #0
    e842:	2201      	movs	r2, #1
    e844:	9e00      	ldr	r6, [sp, #0]
    e846:	3301      	adds	r3, #1
    e848:	0052      	lsls	r2, r2, #1
    e84a:	b2db      	uxtb	r3, r3
    e84c:	d001      	beq.n	e852 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36>
    e84e:	4296      	cmp	r6, r2
    e850:	d8f9      	bhi.n	e846 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2a>
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    e852:	2b1c      	cmp	r3, #28
    e854:	9600      	str	r6, [sp, #0]
    e856:	f240 80b7 	bls.w	e9c8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1ac>
    e85a:	f1a3 080b 	sub.w	r8, r3, #11
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    e85e:	2201      	movs	r2, #1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    e860:	fa48 f102 	asr.w	r1, r8, r2
    e864:	f3c8 0847 	ubfx	r8, r8, #1, #8
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    e868:	408a      	lsls	r2, r1
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    e86a:	9102      	str	r1, [sp, #8]
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    e86c:	9207      	str	r2, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    e86e:	3301      	adds	r3, #1
    e870:	2201      	movs	r2, #1
    e872:	105b      	asrs	r3, r3, #1
    e874:	409a      	lsls	r2, r3
    e876:	9206      	str	r2, [sp, #24]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    e878:	2204      	movs	r2, #4
    e87a:	409a      	lsls	r2, r3
    e87c:	9203      	str	r2, [sp, #12]
  partitionOffset = 2*fatLength;
    e87e:	2202      	movs	r2, #2
    e880:	fa02 f303 	lsl.w	r3, r2, r3
    e884:	9301      	str	r3, [sp, #4]
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    e886:	9a00      	ldr	r2, [sp, #0]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    e888:	2100      	movs	r1, #0
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    e88a:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    e88c:	4620      	mov	r0, r4
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    e88e:	9e02      	ldr	r6, [sp, #8]
  mbr->part->beginCHS[0] = 1;
    e890:	f04f 0a01 	mov.w	sl, #1
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    e894:	1ad3      	subs	r3, r2, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    e896:	f44f 7200 	mov.w	r2, #512	; 0x200
  *reinterpret_cast<uint16_t*>(dst) = src;
    e89a:	f64a 2b55 	movw	fp, #43605	; 0xaa55
  clusterCount = (sectorCount - 4*fatLength) >> sectorsPerClusterShift;
    e89e:	40f3      	lsrs	r3, r6
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    e8a0:	fa03 f906 	lsl.w	r9, r3, r6
    e8a4:	9305      	str	r3, [sp, #20]
    e8a6:	9e01      	ldr	r6, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    e8a8:	f013 fe1a 	bl	224e0 <memset>
  mbr->part->endCHS[1] = 0XFF;
    e8ac:	23ff      	movs	r3, #255	; 0xff
  mbr->part->beginCHS[0] = 1;
    e8ae:	f884 a1bf 	strb.w	sl, [r4, #447]	; 0x1bf
  mbr->part->beginCHS[1] = 1;
    e8b2:	f884 a1c0 	strb.w	sl, [r4, #448]	; 0x1c0
  volumeLength = clusterHeapOffset + (clusterCount << sectorsPerClusterShift);
    e8b6:	44b1      	add	r9, r6
  mbr->part->endCHS[1] = 0XFF;
    e8b8:	f884 31c4 	strb.w	r3, [r4, #452]	; 0x1c4
  if (!dev->writeSector(0, secBuf)) {
    e8bc:	4622      	mov	r2, r4
  mbr->part->endCHS[2] = 0XFF;
    e8be:	f884 31c5 	strb.w	r3, [r4, #453]	; 0x1c5
  mbr->part->type = 7;
    e8c2:	2307      	movs	r3, #7
  if (!dev->writeSector(0, secBuf)) {
    e8c4:	2100      	movs	r1, #0
    e8c6:	4628      	mov	r0, r5
  mbr->part->type = 7;
    e8c8:	f884 31c2 	strb.w	r3, [r4, #450]	; 0x1c2
  mbr->part->endCHS[0] = 0XFE;
    e8cc:	23fe      	movs	r3, #254	; 0xfe
  *reinterpret_cast<uint32_t*>(dst) = src;
    e8ce:	f8c4 61c6 	str.w	r6, [r4, #454]	; 0x1c6
    e8d2:	f884 31c3 	strb.w	r3, [r4, #451]	; 0x1c3
  if (!dev->writeSector(0, secBuf)) {
    e8d6:	682b      	ldr	r3, [r5, #0]
    e8d8:	f8c4 91ca 	str.w	r9, [r4, #458]	; 0x1ca
    e8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  *reinterpret_cast<uint16_t*>(dst) = src;
    e8de:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    e8e2:	4798      	blx	r3
    e8e4:	2800      	cmp	r0, #0
    e8e6:	d063      	beq.n	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    e8e8:	f44f 7200 	mov.w	r2, #512	; 0x200
    e8ec:	2100      	movs	r1, #0
    e8ee:	4620      	mov	r0, r4
    e8f0:	f013 fdf6 	bl	224e0 <memset>
  *reinterpret_cast<uint32_t*>(dst) = src;
    e8f4:	9b00      	ldr	r3, [sp, #0]
  pbs->bpb.sectorsPerClusterShift = sectorsPerClusterShift;
    e8f6:	f884 806d 	strb.w	r8, [r4, #109]	; 0x6d
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    e8fa:	f04f 0800 	mov.w	r8, #0
    e8fe:	6663      	str	r3, [r4, #100]	; 0x64
    pbs->bootCode[i] = 0XF4;
    e900:	21f4      	movs	r1, #244	; 0xf4
    e902:	9b05      	ldr	r3, [sp, #20]
    e904:	f104 0078 	add.w	r0, r4, #120	; 0x78
    e908:	9a06      	ldr	r2, [sp, #24]
    e90a:	65e3      	str	r3, [r4, #92]	; 0x5c
  pbs->oemName[5] = ' ';
    e90c:	2320      	movs	r3, #32
  setLe64(pbs->bpb.partitionOffset, partitionOffset);
    e90e:	6426      	str	r6, [r4, #64]	; 0x40
  pbs->oemName[5] = ' ';
    e910:	7223      	strb	r3, [r4, #8]
  pbs->oemName[6] = ' ';
    e912:	7263      	strb	r3, [r4, #9]
  pbs->oemName[7] = ' ';
    e914:	72a3      	strb	r3, [r4, #10]
  pbs->jmpInstruction[0] = 0XEB;
    e916:	23eb      	movs	r3, #235	; 0xeb
    e918:	65a6      	str	r6, [r4, #88]	; 0x58
  uint32_t checksum = 0;
    e91a:	4646      	mov	r6, r8
  pbs->jmpInstruction[0] = 0XEB;
    e91c:	7023      	strb	r3, [r4, #0]
  pbs->jmpInstruction[1] = 0X76;
    e91e:	2376      	movs	r3, #118	; 0x76
  setLe64(pbs->bpb.volumeLength, volumeLength);
    e920:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  pbs->jmpInstruction[1] = 0X76;
    e924:	7063      	strb	r3, [r4, #1]
  pbs->jmpInstruction[2] = 0X90;
    e926:	2390      	movs	r3, #144	; 0x90
  pbs->bpb.numberOfFats = 1;
    e928:	f884 a06e 	strb.w	sl, [r4, #110]	; 0x6e
  pbs->jmpInstruction[2] = 0X90;
    e92c:	70a3      	strb	r3, [r4, #2]
  pbs->oemName[0] = 'E';
    e92e:	2345      	movs	r3, #69	; 0x45
    e930:	70e3      	strb	r3, [r4, #3]
  pbs->oemName[1] = 'X';
    e932:	2358      	movs	r3, #88	; 0x58
    e934:	7123      	strb	r3, [r4, #4]
  pbs->oemName[2] = 'F';
    e936:	2346      	movs	r3, #70	; 0x46
    e938:	7163      	strb	r3, [r4, #5]
  pbs->oemName[3] = 'A';
    e93a:	2341      	movs	r3, #65	; 0x41
    e93c:	71a3      	strb	r3, [r4, #6]
  pbs->oemName[4] = 'T';
    e93e:	2354      	movs	r3, #84	; 0x54
    e940:	71e3      	strb	r3, [r4, #7]
    e942:	2304      	movs	r3, #4
    e944:	6623      	str	r3, [r4, #96]	; 0x60
  *reinterpret_cast<uint16_t*>(dst) = src;
    e946:	f44f 7380 	mov.w	r3, #256	; 0x100
    e94a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  pbs->bpb.bytesPerSectorShift = BYTES_PER_SECTOR_SHIFT;
    e94e:	2309      	movs	r3, #9
    e950:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
  pbs->bpb.driveSelect = 0X80;
    e954:	2380      	movs	r3, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
    e956:	e9c4 2214 	strd	r2, r2, [r4, #80]	; 0x50
    e95a:	f884 306f 	strb.w	r3, [r4, #111]	; 0x6f
    pbs->bootCode[i] = 0XF4;
    e95e:	f44f 72c3 	mov.w	r2, #390	; 0x186
    e962:	f013 fdbd 	bl	224e0 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    e966:	f8a4 b1fe 	strh.w	fp, [r4, #510]	; 0x1fe
    if (i == offsetof(ExFatPbs_t, bpb.volumeFlags[0]) ||
    e96a:	f1a8 036a 	sub.w	r3, r8, #106	; 0x6a
    e96e:	2b01      	cmp	r3, #1
    e970:	d906      	bls.n	e980 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
    e972:	f1b8 0f70 	cmp.w	r8, #112	; 0x70
    e976:	d003      	beq.n	e980 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x164>
  return (sum << 31) + (sum >> 1) + data;
    e978:	f814 3008 	ldrb.w	r3, [r4, r8]
    e97c:	eb03 0676 	add.w	r6, r3, r6, ror #1
  for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    e980:	f108 0801 	add.w	r8, r8, #1
    e984:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
    e988:	d1ef      	bne.n	e96a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x14e>
  if (!dev->writeSector(sector, secBuf)  ||
    e98a:	682b      	ldr	r3, [r5, #0]
    e98c:	4622      	mov	r2, r4
    e98e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    e992:	4628      	mov	r0, r5
    e994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e996:	4649      	mov	r1, r9
    e998:	4798      	blx	r3
    e99a:	b148      	cbz	r0, e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    e99c:	682b      	ldr	r3, [r5, #0]
    e99e:	4649      	mov	r1, r9
    e9a0:	4622      	mov	r2, r4
    e9a2:	4628      	mov	r0, r5
    e9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e9a6:	310c      	adds	r1, #12
    e9a8:	f8cd 9004 	str.w	r9, [sp, #4]
    e9ac:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    e9ae:	bb40      	cbnz	r0, ea02 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1e6>
  writeMsg(pr, "Format failed\r\n");
    e9b0:	b12f      	cbz	r7, e9be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    e9b2:	683b      	ldr	r3, [r7, #0]
    e9b4:	220f      	movs	r2, #15
    e9b6:	49b8      	ldr	r1, [pc, #736]	; (ec98 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x47c>)
    e9b8:	4638      	mov	r0, r7
    e9ba:	685b      	ldr	r3, [r3, #4]
    e9bc:	4798      	blx	r3
  return false;
    e9be:	2600      	movs	r6, #0
}
    e9c0:	4630      	mov	r0, r6
    e9c2:	b009      	add	sp, #36	; 0x24
    e9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    e9c8:	2b1a      	cmp	r3, #26
  sectorsPerClusterShift = vs < 29 ? 8 : (vs - 11)/2;
    e9ca:	f04f 0808 	mov.w	r8, #8
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    e9ce:	f200 81a6 	bhi.w	ed1e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x502>
    e9d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    e9d6:	f8cd 8008 	str.w	r8, [sp, #8]
    e9da:	9301      	str	r3, [sp, #4]
    e9dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    e9e0:	9303      	str	r3, [sp, #12]
    e9e2:	f44f 7380 	mov.w	r3, #256	; 0x100
    e9e6:	9307      	str	r3, [sp, #28]
  fatLength = 1UL << (vs < 27 ? 13 : (vs + 1)/2);
    e9e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    e9ec:	9306      	str	r3, [sp, #24]
    e9ee:	e74a      	b.n	e886 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
    writeMsg(pr, "Device is too small\r\n");
    e9f0:	2f00      	cmp	r7, #0
    e9f2:	d0e4      	beq.n	e9be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
    e9f4:	683b      	ldr	r3, [r7, #0]
    e9f6:	2215      	movs	r2, #21
    e9f8:	49a8      	ldr	r1, [pc, #672]	; (ec9c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x480>)
    e9fa:	4638      	mov	r0, r7
    e9fc:	685b      	ldr	r3, [r3, #4]
    e9fe:	4798      	blx	r3
  writeMsg(pr, "Format failed\r\n");
    ea00:	e7d7      	b.n	e9b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ea02:	4642      	mov	r2, r8
    ea04:	2100      	movs	r1, #0
    ea06:	4620      	mov	r0, r4
  sector++;
    ea08:	f109 0a01 	add.w	sl, r9, #1
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ea0c:	f013 fd68 	bl	224e0 <memset>
  *reinterpret_cast<uint16_t*>(dst) = src;
    ea10:	f64a 2355 	movw	r3, #43605	; 0xaa55
    ea14:	f109 0209 	add.w	r2, r9, #9
    ea18:	f204 19ff 	addw	r9, r4, #511	; 0x1ff
    ea1c:	f8a4 31fe 	strh.w	r3, [r4, #510]	; 0x1fe
    ea20:	2300      	movs	r3, #0
    ea22:	4693      	mov	fp, r2
  uint32_t checksum = 0;
    ea24:	46a0      	mov	r8, r4
    ea26:	e001      	b.n	ea2c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x210>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ea28:	f818 3f01 	ldrb.w	r3, [r8, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    ea2c:	45c1      	cmp	r9, r8
  return (sum << 31) + (sum >> 1) + data;
    ea2e:	eb03 0676 	add.w	r6, r3, r6, ror #1
    ea32:	d1f9      	bne.n	ea28 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x20c>
    if (!dev->writeSector(sector, secBuf)  ||
    ea34:	682b      	ldr	r3, [r5, #0]
    ea36:	4622      	mov	r2, r4
    ea38:	4651      	mov	r1, sl
    ea3a:	4628      	mov	r0, r5
    ea3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea3e:	4798      	blx	r3
    ea40:	2800      	cmp	r0, #0
    ea42:	d0b5      	beq.n	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    ea44:	682b      	ldr	r3, [r5, #0]
    ea46:	4622      	mov	r2, r4
    ea48:	f10a 010c 	add.w	r1, sl, #12
    ea4c:	4628      	mov	r0, r5
    ea4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea50:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    ea52:	2800      	cmp	r0, #0
    ea54:	d0ac      	beq.n	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    ea56:	f10a 0301 	add.w	r3, sl, #1
  for (int j = 0; j < 8; j++) {
    ea5a:	459b      	cmp	fp, r3
    ea5c:	d002      	beq.n	ea64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x248>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ea5e:	469a      	mov	sl, r3
    ea60:	7823      	ldrb	r3, [r4, #0]
    ea62:	e7df      	b.n	ea24 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x208>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ea64:	f44f 7200 	mov.w	r2, #512	; 0x200
    ea68:	2100      	movs	r1, #0
    ea6a:	4620      	mov	r0, r4
    ea6c:	469b      	mov	fp, r3
    ea6e:	f013 fd37 	bl	224e0 <memset>
    ea72:	2200      	movs	r2, #0
    ea74:	f10a 0a03 	add.w	sl, sl, #3
    ea78:	4611      	mov	r1, r2
  *reinterpret_cast<uint16_t*>(dst) = src;
    ea7a:	4623      	mov	r3, r4
    ea7c:	e001      	b.n	ea82 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x266>
      checksum = exFatChecksum(checksum, secBuf[i]);
    ea7e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    for (size_t i = 0; i < BYTES_PER_SECTOR; i++) {
    ea82:	4598      	cmp	r8, r3
  return (sum << 31) + (sum >> 1) + data;
    ea84:	eb01 0676 	add.w	r6, r1, r6, ror #1
    ea88:	d1f9      	bne.n	ea7e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x262>
    if (!dev->writeSector(sector, secBuf)  ||
    ea8a:	682b      	ldr	r3, [r5, #0]
    ea8c:	4622      	mov	r2, r4
    ea8e:	4659      	mov	r1, fp
    ea90:	4628      	mov	r0, r5
    ea92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ea94:	4798      	blx	r3
    ea96:	2800      	cmp	r0, #0
    ea98:	d08a      	beq.n	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
        !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    ea9a:	682b      	ldr	r3, [r5, #0]
    ea9c:	4622      	mov	r2, r4
    ea9e:	f10b 010c 	add.w	r1, fp, #12
    eaa2:	4628      	mov	r0, r5
    eaa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eaa6:	4798      	blx	r3
    if (!dev->writeSector(sector, secBuf)  ||
    eaa8:	2800      	cmp	r0, #0
    eaaa:	d081      	beq.n	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    sector++;
    eaac:	f10b 0101 	add.w	r1, fp, #1
  for (int j = 0; j < 2; j++) {
    eab0:	458a      	cmp	sl, r1
    eab2:	d16a      	bne.n	eb8a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x36e>
    eab4:	1f23      	subs	r3, r4, #4
    eab6:	f504 72fe 	add.w	r2, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
    eaba:	f843 6f04 	str.w	r6, [r3, #4]!
  for (size_t i = 0; i < BYTES_PER_SECTOR; i += 4) {
    eabe:	429a      	cmp	r2, r3
    eac0:	d1fb      	bne.n	eaba <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x29e>
  if (!dev->writeSector(sector, secBuf)  ||
    eac2:	682b      	ldr	r3, [r5, #0]
    eac4:	4622      	mov	r2, r4
    eac6:	4628      	mov	r0, r5
    eac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eaca:	4798      	blx	r3
    eacc:	2800      	cmp	r0, #0
    eace:	f43f af6f 	beq.w	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
      !dev->writeSector(sector + BOOT_BACKUP_OFFSET , secBuf)) {
    ead2:	682b      	ldr	r3, [r5, #0]
    ead4:	f10b 010d 	add.w	r1, fp, #13
    ead8:	4622      	mov	r2, r4
    eada:	4628      	mov	r0, r5
    eadc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eade:	4798      	blx	r3
  if (!dev->writeSector(sector, secBuf)  ||
    eae0:	2800      	cmp	r0, #0
    eae2:	f43f af65 	beq.w	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  writeMsg(pr, "Writing FAT ");
    eae6:	b12f      	cbz	r7, eaf4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x2d8>
    eae8:	683b      	ldr	r3, [r7, #0]
    eaea:	220c      	movs	r2, #12
    eaec:	496c      	ldr	r1, [pc, #432]	; (eca0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x484>)
    eaee:	4638      	mov	r0, r7
    eaf0:	685b      	ldr	r3, [r3, #4]
    eaf2:	4798      	blx	r3
  sector = partitionOffset + fatOffset;
    eaf4:	9a06      	ldr	r2, [sp, #24]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eaf6:	2100      	movs	r1, #0
  sector = partitionOffset + fatOffset;
    eaf8:	9b01      	ldr	r3, [sp, #4]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eafa:	4620      	mov	r0, r4
  for (uint32_t i = 0; i < ns; i++) {
    eafc:	2600      	movs	r6, #0
  sector = partitionOffset + fatOffset;
    eafe:	4413      	add	r3, r2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eb00:	f44f 7200 	mov.w	r2, #512	; 0x200
  sector = partitionOffset + fatOffset;
    eb04:	4699      	mov	r9, r3
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    eb06:	9b05      	ldr	r3, [sp, #20]
    eb08:	ea4f 0883 	mov.w	r8, r3, lsl #2
  memset(secBuf, 0, BYTES_PER_SECTOR);
    eb0c:	f013 fce8 	bl	224e0 <memset>
  secBuf[0] = 0XF8;
    eb10:	4623      	mov	r3, r4
    secBuf[i] = 0XFF;
    eb12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    eb16:	f208 2807 	addw	r8, r8, #519	; 0x207
  secBuf[0] = 0XF8;
    eb1a:	21f8      	movs	r1, #248	; 0xf8
      writeMsg(pr, ".");
    eb1c:	f1b7 0b00 	subs.w	fp, r7, #0
  ns = ((clusterCount + 2)*4 + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    eb20:	ea4f 2a58 	mov.w	sl, r8, lsr #9
  secBuf[0] = 0XF8;
    eb24:	f803 1b01 	strb.w	r1, [r3], #1
    if (i%(ns/32) == 0) {
    eb28:	ea4f 3898 	mov.w	r8, r8, lsr #14
    secBuf[i] = 0XFF;
    eb2c:	f8c4 2001 	str.w	r2, [r4, #1]
      writeMsg(pr, ".");
    eb30:	bf18      	it	ne
    eb32:	f04f 0b01 	movne.w	fp, #1
    secBuf[i] = 0XFF;
    eb36:	60da      	str	r2, [r3, #12]
    eb38:	605a      	str	r2, [r3, #4]
    eb3a:	609a      	str	r2, [r3, #8]
    eb3c:	f8c3 200f 	str.w	r2, [r3, #15]
    eb40:	e002      	b.n	eb48 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x32c>
  for (uint32_t i = 0; i < ns; i++) {
    eb42:	3601      	adds	r6, #1
    eb44:	45b2      	cmp	sl, r6
    eb46:	d023      	beq.n	eb90 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x374>
    if (i%(ns/32) == 0) {
    eb48:	fbb6 f3f8 	udiv	r3, r6, r8
    eb4c:	fb08 6313 	mls	r3, r8, r3, r6
      writeMsg(pr, ".");
    eb50:	b943      	cbnz	r3, eb64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    eb52:	f1bb 0f00 	cmp.w	fp, #0
    eb56:	d005      	beq.n	eb64 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x348>
    eb58:	683b      	ldr	r3, [r7, #0]
    eb5a:	2201      	movs	r2, #1
    eb5c:	4951      	ldr	r1, [pc, #324]	; (eca4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x488>)
    eb5e:	4638      	mov	r0, r7
    eb60:	685b      	ldr	r3, [r3, #4]
    eb62:	4798      	blx	r3
    if (!dev->writeSector(sector + i, secBuf)) {
    eb64:	682b      	ldr	r3, [r5, #0]
    eb66:	eb09 0106 	add.w	r1, r9, r6
    eb6a:	4622      	mov	r2, r4
    eb6c:	4628      	mov	r0, r5
    eb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eb70:	4798      	blx	r3
    eb72:	2800      	cmp	r0, #0
    eb74:	f43f af1c 	beq.w	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    eb78:	2e00      	cmp	r6, #0
    eb7a:	d1e2      	bne.n	eb42 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    eb7c:	4631      	mov	r1, r6
    eb7e:	f44f 7200 	mov.w	r2, #512	; 0x200
    eb82:	4620      	mov	r0, r4
    eb84:	f013 fcac 	bl	224e0 <memset>
    eb88:	e7db      	b.n	eb42 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x326>
      checksum = exFatChecksum(checksum, secBuf[i]);
    eb8a:	468b      	mov	fp, r1
    eb8c:	7821      	ldrb	r1, [r4, #0]
    eb8e:	e774      	b.n	ea7a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x25e>
  writeMsg(pr, "\r\n");
    eb90:	2f00      	cmp	r7, #0
    eb92:	d034      	beq.n	ebfe <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3e2>
    eb94:	683b      	ldr	r3, [r7, #0]
    eb96:	2202      	movs	r2, #2
    eb98:	4943      	ldr	r1, [pc, #268]	; (eca8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48c>)
    eb9a:	4638      	mov	r0, r7
    eb9c:	685b      	ldr	r3, [r3, #4]
    eb9e:	4798      	blx	r3
  bitmapSize = (clusterCount + 7)/8;
    eba0:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    eba2:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    eba4:	3607      	adds	r6, #7
    eba6:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    eba8:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    ebac:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ebb0:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    ebb4:	f4ff aefd 	bcc.w	e9b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ebb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    ebbc:	2100      	movs	r1, #0
    ebbe:	4620      	mov	r0, r4
    ebc0:	f013 fc8e 	bl	224e0 <memset>
  secBuf[0] = 0X7;
    ebc4:	2307      	movs	r3, #7
    ebc6:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    ebc8:	f1b9 0f00 	cmp.w	r9, #0
    ebcc:	f000 808a 	beq.w	ece4 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c8>
    ebd0:	f04f 0800 	mov.w	r8, #0
    ebd4:	e008      	b.n	ebe8 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3cc>
    if (i == 0) {
    ebd6:	f1b8 0f00 	cmp.w	r8, #0
    ebda:	d101      	bne.n	ebe0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3c4>
      secBuf[0] = 0;
    ebdc:	f884 8000 	strb.w	r8, [r4]
  for (uint32_t i = 0; i < ns; i++) {
    ebe0:	f108 0801 	add.w	r8, r8, #1
    ebe4:	45c1      	cmp	r9, r8
    ebe6:	d97b      	bls.n	ece0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c4>
    if (!dev->writeSector(sector + i, secBuf)) {
    ebe8:	9a03      	ldr	r2, [sp, #12]
    ebea:	4628      	mov	r0, r5
    ebec:	682b      	ldr	r3, [r5, #0]
    ebee:	eb02 0108 	add.w	r1, r2, r8
    ebf2:	4622      	mov	r2, r4
    ebf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ebf6:	4798      	blx	r3
    ebf8:	2800      	cmp	r0, #0
    ebfa:	d1ec      	bne.n	ebd6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3ba>
    ebfc:	e6d8      	b.n	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
  bitmapSize = (clusterCount + 7)/8;
    ebfe:	9e05      	ldr	r6, [sp, #20]
  if (ns > sectorsPerCluster) {
    ec00:	9a07      	ldr	r2, [sp, #28]
  bitmapSize = (clusterCount + 7)/8;
    ec02:	3607      	adds	r6, #7
    ec04:	08f6      	lsrs	r6, r6, #3
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ec06:	f206 13ff 	addw	r3, r6, #511	; 0x1ff
  if (ns > sectorsPerCluster) {
    ec0a:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
  ns = (bitmapSize + BYTES_PER_SECTOR - 1)/BYTES_PER_SECTOR;
    ec0e:	ea4f 2953 	mov.w	r9, r3, lsr #9
  if (ns > sectorsPerCluster) {
    ec12:	f4ff aed4 	bcc.w	e9be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec16:	f44f 7200 	mov.w	r2, #512	; 0x200
    ec1a:	4639      	mov	r1, r7
    ec1c:	4620      	mov	r0, r4
    ec1e:	f013 fc5f 	bl	224e0 <memset>
  secBuf[0] = 0X7;
    ec22:	2307      	movs	r3, #7
    ec24:	7023      	strb	r3, [r4, #0]
  for (uint32_t i = 0; i < ns; i++) {
    ec26:	f1b9 0f00 	cmp.w	r9, #0
    ec2a:	d1d1      	bne.n	ebd0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x3b4>
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    ec2c:	9b03      	ldr	r3, [sp, #12]
    ec2e:	9a07      	ldr	r2, [sp, #28]
    ec30:	9804      	ldr	r0, [sp, #16]
    ec32:	1899      	adds	r1, r3, r2
    ec34:	f7ff fd9a 	bl	e76c <ExFatFormatter::writeUpcase(unsigned long)>
    ec38:	2800      	cmp	r0, #0
    ec3a:	f43f aec0 	beq.w	e9be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    ec3e:	9a02      	ldr	r2, [sp, #8]
    ec40:	f44f 7300 	mov.w	r3, #512	; 0x200
    ec44:	4093      	lsls	r3, r2
    ec46:	9a04      	ldr	r2, [sp, #16]
    ec48:	6892      	ldr	r2, [r2, #8]
    ec4a:	429a      	cmp	r2, r3
    ec4c:	f63f aeb7 	bhi.w	e9be <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a2>
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    ec50:	f04f 0802 	mov.w	r8, #2
    ec54:	9b02      	ldr	r3, [sp, #8]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec56:	f44f 7200 	mov.w	r2, #512	; 0x200
    ec5a:	2100      	movs	r1, #0
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    ec5c:	fa08 f903 	lsl.w	r9, r8, r3
    ec60:	9b03      	ldr	r3, [sp, #12]
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec62:	4620      	mov	r0, r4
  sector = partitionOffset + clusterHeapOffset + 2*sectorsPerCluster;
    ec64:	4499      	add	r9, r3
  memset(secBuf, 0, BYTES_PER_SECTOR);
    ec66:	f013 fc3b 	bl	224e0 <memset>
  dbm->type = EXFAT_TYPE_BITMAP;
    ec6a:	2281      	movs	r2, #129	; 0x81
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    ec6c:	2303      	movs	r3, #3
  setLe32(dup->checksum, m_upcaseChecksum);
    ec6e:	9904      	ldr	r1, [sp, #16]
    ec70:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
  dbm->type = EXFAT_TYPE_BITMAP;
    ec74:	f884 2020 	strb.w	r2, [r4, #32]
  dup->type = EXFAT_TYPE_UPCASE;
    ec78:	2282      	movs	r2, #130	; 0x82
  label->type = EXFAT_TYPE_LABEL & 0X7F;
    ec7a:	7023      	strb	r3, [r4, #0]
  dup->type = EXFAT_TYPE_UPCASE;
    ec7c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  setLe64(dbm->size, bitmapSize);
    ec80:	e9c4 860d 	strd	r8, r6, [r4, #52]	; 0x34
  setLe32(dup->checksum, m_upcaseChecksum);
    ec84:	684a      	ldr	r2, [r1, #4]
  *reinterpret_cast<uint64_t*>(dst) = src;
    ec86:	f04f 0801 	mov.w	r8, #1
  *reinterpret_cast<uint32_t*>(dst) = src;
    ec8a:	6563      	str	r3, [r4, #84]	; 0x54
    ec8c:	6462      	str	r2, [r4, #68]	; 0x44
  setLe64(dup->size, m_upcaseSize);
    ec8e:	688b      	ldr	r3, [r1, #8]
    ec90:	65a3      	str	r3, [r4, #88]	; 0x58
  setLe64(dbm->size, bitmapSize);
    ec92:	2300      	movs	r3, #0
  setLe64(dup->size, m_upcaseSize);
    ec94:	65e3      	str	r3, [r4, #92]	; 0x5c
  for (uint32_t i = 0; i < ns; i++) {
    ec96:	e00e      	b.n	ecb6 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x49a>
    ec98:	20000f58 	.word	0x20000f58
    ec9c:	20000ef8 	.word	0x20000ef8
    eca0:	20000f10 	.word	0x20000f10
    eca4:	20002f04 	.word	0x20002f04
    eca8:	20000f34 	.word	0x20000f34
    ecac:	9b07      	ldr	r3, [sp, #28]
    ecae:	4598      	cmp	r8, r3
    ecb0:	d23b      	bcs.n	ed2a <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x50e>
    ecb2:	f108 0801 	add.w	r8, r8, #1
    if (!dev->writeSector(sector + i, secBuf)) {
    ecb6:	682b      	ldr	r3, [r5, #0]
    ecb8:	eb09 0108 	add.w	r1, r9, r8
    ecbc:	4622      	mov	r2, r4
    ecbe:	4628      	mov	r0, r5
    ecc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ecc2:	4798      	blx	r3
    ecc4:	4606      	mov	r6, r0
    ecc6:	2800      	cmp	r0, #0
    ecc8:	f43f ae72 	beq.w	e9b0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x194>
    if (i == 0) {
    eccc:	f1b8 0f01 	cmp.w	r8, #1
    ecd0:	d1ec      	bne.n	ecac <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x490>
      memset(secBuf, 0, BYTES_PER_SECTOR);
    ecd2:	f44f 7200 	mov.w	r2, #512	; 0x200
    ecd6:	2100      	movs	r1, #0
    ecd8:	4620      	mov	r0, r4
    ecda:	f013 fc01 	bl	224e0 <memset>
  for (uint32_t i = 0; i < ns; i++) {
    ecde:	e7e8      	b.n	ecb2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x496>
  writeMsg(pr, "Writing upcase table\r\n");
    ece0:	2f00      	cmp	r7, #0
    ece2:	d0a3      	beq.n	ec2c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x410>
    ece4:	683b      	ldr	r3, [r7, #0]
    ece6:	2216      	movs	r2, #22
    ece8:	4914      	ldr	r1, [pc, #80]	; (ed3c <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x520>)
    ecea:	4638      	mov	r0, r7
    ecec:	685b      	ldr	r3, [r3, #4]
    ecee:	4798      	blx	r3
  if (!writeUpcase(partitionOffset + clusterHeapOffset + sectorsPerCluster)) {
    ecf0:	9b03      	ldr	r3, [sp, #12]
    ecf2:	9a07      	ldr	r2, [sp, #28]
    ecf4:	9804      	ldr	r0, [sp, #16]
    ecf6:	1899      	adds	r1, r3, r2
    ecf8:	f7ff fd38 	bl	e76c <ExFatFormatter::writeUpcase(unsigned long)>
    ecfc:	2800      	cmp	r0, #0
    ecfe:	f43f ae58 	beq.w	e9b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  if (m_upcaseSize > BYTES_PER_SECTOR*sectorsPerCluster) {
    ed02:	9a02      	ldr	r2, [sp, #8]
    ed04:	f44f 7300 	mov.w	r3, #512	; 0x200
    ed08:	4093      	lsls	r3, r2
    ed0a:	9a04      	ldr	r2, [sp, #16]
    ed0c:	6892      	ldr	r2, [r2, #8]
    ed0e:	429a      	cmp	r2, r3
    ed10:	f63f ae4f 	bhi.w	e9b2 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x196>
  writeMsg(pr, "Writing root\r\n");
    ed14:	490a      	ldr	r1, [pc, #40]	; (ed40 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x524>)
    ed16:	4638      	mov	r0, r7
    ed18:	f7ff fcba 	bl	e690 <Print::write(char const*) [clone .isra.0]>
    ed1c:	e798      	b.n	ec50 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x434>
  sectorsPerCluster = 1UL << sectorsPerClusterShift;
    ed1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    ed22:	f8cd 8008 	str.w	r8, [sp, #8]
    ed26:	9207      	str	r2, [sp, #28]
    ed28:	e5a1      	b.n	e86e <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x52>
  writeMsg(pr, "Format done\r\n");
    ed2a:	2f00      	cmp	r7, #0
    ed2c:	f43f ae48 	beq.w	e9c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    ed30:	4904      	ldr	r1, [pc, #16]	; (ed44 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x528>)
    ed32:	4638      	mov	r0, r7
    ed34:	f7ff fcac 	bl	e690 <Print::write(char const*) [clone .isra.0]>
    ed38:	e642      	b.n	e9c0 <ExFatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x1a4>
    ed3a:	bf00      	nop
    ed3c:	20000f20 	.word	0x20000f20
    ed40:	20000f38 	.word	0x20000f38
    ed44:	20000f48 	.word	0x20000f48

0000ed48 <ExFatFile::cmpName(DirName_t const*, ExName_t*)>:
bool ExFatFile::cmpName(const DirName_t* dirName, ExName_t* fname) {
    ed48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed4c:	460c      	mov	r4, r1
    ed4e:	4615      	mov	r5, r2
    ed50:	f101 081e 	add.w	r8, r1, #30
    return !ls && next == end;
    ed54:	89ab      	ldrh	r3, [r5, #12]
    uint16_t cp = fname->get16();
    ed56:	4628      	mov	r0, r5
  return *reinterpret_cast<const uint16_t*>(src);
    ed58:	f834 7f02 	ldrh.w	r7, [r4, #2]!
    ed5c:	b91b      	cbnz	r3, ed66 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x1e>
    ed5e:	e9d5 2301 	ldrd	r2, r3, [r5, #4]
    ed62:	429a      	cmp	r2, r3
    ed64:	d00e      	beq.n	ed84 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x3c>
    ed66:	f005 f9f3 	bl	14150 <FsName::get16()>
    if (toUpcase(cp) != toUpcase(u)) {
    ed6a:	f005 fb05 	bl	14378 <toUpcase(unsigned short)>
    ed6e:	4606      	mov	r6, r0
    ed70:	4638      	mov	r0, r7
    ed72:	f005 fb01 	bl	14378 <toUpcase(unsigned short)>
    ed76:	4286      	cmp	r6, r0
    ed78:	d109      	bne.n	ed8e <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0x46>
  for (uint8_t i = 0; i < 15; i++) {
    ed7a:	4544      	cmp	r4, r8
    ed7c:	d1ea      	bne.n	ed54 <ExFatFile::cmpName(DirName_t const*, ExName_t*)+0xc>
  return true;
    ed7e:	2001      	movs	r0, #1
}
    ed80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return u == 0;
    ed84:	fab7 f087 	clz	r0, r7
    ed88:	0940      	lsrs	r0, r0, #5
}
    ed8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       return false;
    ed8e:	2000      	movs	r0, #0
}
    ed90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ed94 <ExFatFile::getName8(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t ExFatFile::getName8(char* name, size_t count) {
    ed94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char* str = name;
  char* ptr;
  DirName_t* dn;
  uint16_t hs = 0;
  uint32_t cp;
  if (!isOpen()) {
    ed98:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
size_t ExFatFile::getName8(char* name, size_t count) {
    ed9c:	b083      	sub	sp, #12
    ed9e:	4688      	mov	r8, r1
  if (!isOpen()) {
    eda0:	2b00      	cmp	r3, #0
    eda2:	d04f      	beq.n	ee44 <ExFatFile::getName8(char*, unsigned int)+0xb0>
      DBG_FAIL_MACRO;
      goto fail;
  }
  for (uint8_t is = 2; is <= m_setCount; is++) {
    eda4:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
    eda8:	4607      	mov	r7, r0
    edaa:	2b01      	cmp	r3, #1
    edac:	d953      	bls.n	ee56 <ExFatFile::getName8(char*, unsigned int)+0xc2>
      } else {
        DBG_FAIL_MACRO;
        goto fail;
      }
      // Save space for zero byte.
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    edae:	3a01      	subs	r2, #1
  char* str = name;
    edb0:	460b      	mov	r3, r1
  for (uint8_t is = 2; is <= m_setCount; is++) {
    edb2:	f04f 0a02 	mov.w	sl, #2
  uint16_t hs = 0;
    edb6:	2400      	movs	r4, #0
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    edb8:	188e      	adds	r6, r1, r2
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    edba:	f8df b0a0 	ldr.w	fp, [pc, #160]	; ee5c <ExFatFile::getName8(char*, unsigned int)+0xc8>
         (dirCache(is, FsCache::CACHE_FOR_READ));
    edbe:	2200      	movs	r2, #0
    edc0:	4651      	mov	r1, sl
    edc2:	4638      	mov	r0, r7
    edc4:	9301      	str	r3, [sp, #4]
    edc6:	f7fe faa3 	bl	d310 <ExFatFile::dirCache(unsigned char, unsigned char)>
    if (!dn || dn->type != EXFAT_TYPE_NAME) {
    edca:	2800      	cmp	r0, #0
    edcc:	d03a      	beq.n	ee44 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    edce:	7802      	ldrb	r2, [r0, #0]
    edd0:	2ac1      	cmp	r2, #193	; 0xc1
    edd2:	d137      	bne.n	ee44 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    edd4:	4605      	mov	r5, r0
    edd6:	f100 091e 	add.w	r9, r0, #30
    edda:	9b01      	ldr	r3, [sp, #4]
    eddc:	f835 0f02 	ldrh.w	r0, [r5, #2]!
      if (hs) {
    ede0:	b324      	cbz	r4, ee2c <ExFatFile::getName8(char*, unsigned int)+0x98>
    return 0XDC00 <= c && c <= 0XDFFF;
    ede2:	f500 5210 	add.w	r2, r0, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
    ede6:	b292      	uxth	r2, r2
    ede8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    edec:	d22a      	bcs.n	ee44 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
    edee:	ea0b 2484 	and.w	r4, fp, r4, lsl #10
    edf2:	f3c0 0009 	ubfx	r0, r0, #0, #10
    edf6:	4320      	orrs	r0, r4
    edf8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
      ptr = FsUtf::cpToMb(cp, str, end - 1);
    edfc:	4619      	mov	r1, r3
    edfe:	4632      	mov	r2, r6
    ee00:	f005 fa1c 	bl	1423c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
    ee04:	4603      	mov	r3, r0
    ee06:	b1e8      	cbz	r0, ee44 <ExFatFile::getName8(char*, unsigned int)+0xb0>
    ee08:	2400      	movs	r4, #0
    for (uint8_t in = 0; in < 15; in++) {
    ee0a:	454d      	cmp	r5, r9
    ee0c:	d1e6      	bne.n	eddc <ExFatFile::getName8(char*, unsigned int)+0x48>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    ee0e:	f10a 0a01 	add.w	sl, sl, #1
    ee12:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
    ee16:	fa5f fa8a 	uxtb.w	sl, sl
    ee1a:	4552      	cmp	r2, sl
    ee1c:	d2cf      	bcs.n	edbe <ExFatFile::getName8(char*, unsigned int)+0x2a>
      str = ptr;
    }
  }
 done:
  *str = '\0';
  return str - name;
    ee1e:	eba3 0008 	sub.w	r0, r3, r8
    ee22:	4698      	mov	r8, r3
  *str = '\0';
    ee24:	2300      	movs	r3, #0
    ee26:	f888 3000 	strb.w	r3, [r8]
  return str - name;
    ee2a:	e00f      	b.n	ee4c <ExFatFile::getName8(char*, unsigned int)+0xb8>
    return 0XD800 <= c && c <= 0XDFFF;
    ee2c:	f500 5220 	add.w	r2, r0, #10240	; 0x2800
    ee30:	b292      	uxth	r2, r2
      } else if (!FsUtf::isSurrogate(c)) {
    ee32:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    ee36:	d302      	bcc.n	ee3e <ExFatFile::getName8(char*, unsigned int)+0xaa>
        if (c == 0) {
    ee38:	2800      	cmp	r0, #0
    ee3a:	d1df      	bne.n	edfc <ExFatFile::getName8(char*, unsigned int)+0x68>
    ee3c:	e7ef      	b.n	ee1e <ExFatFile::getName8(char*, unsigned int)+0x8a>
      } else if (FsUtf::isHighSurrogate(c)) {
    ee3e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    ee42:	d306      	bcc.n	ee52 <ExFatFile::getName8(char*, unsigned int)+0xbe>

 fail:
  *name = 0;
    ee44:	2300      	movs	r3, #0
  return 0;
    ee46:	4618      	mov	r0, r3
  *name = 0;
    ee48:	f888 3000 	strb.w	r3, [r8]
}
    ee4c:	b003      	add	sp, #12
    ee4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ee52:	4604      	mov	r4, r0
    ee54:	e7d9      	b.n	ee0a <ExFatFile::getName8(char*, unsigned int)+0x76>
  for (uint8_t is = 2; is <= m_setCount; is++) {
    ee56:	2000      	movs	r0, #0
    ee58:	e7e4      	b.n	ee24 <ExFatFile::getName8(char*, unsigned int)+0x90>
    ee5a:	bf00      	nop
    ee5c:	000ffc00 	.word	0x000ffc00

0000ee60 <ExFatFile::hashName(ExName_t*)>:
//------------------------------------------------------------------------------
bool ExFatFile::hashName(ExName_t* fname) {
    ee60:	b570      	push	{r4, r5, r6, lr}
    ee62:	460c      	mov	r4, r1
    ls = 0;  // lowSurrogate
    ee64:	2300      	movs	r3, #0
  fname->reset();
#if USE_UTF8_LONG_NAMES
  fname->nameLength = 0;
  while (!fname->atEnd()) {
    uint16_t u = fname->get16();
    if (u == 0XFFFF) {
    ee66:	f64f 75ff 	movw	r5, #65535	; 0xffff
    next = begin;
    ee6a:	6822      	ldr	r2, [r4, #0]
  while (!fname->atEnd()) {
    ee6c:	4619      	mov	r1, r3
  uint16_t hash = 0;
    ee6e:	461e      	mov	r6, r3
    ls = 0;  // lowSurrogate
    ee70:	81a3      	strh	r3, [r4, #12]
  fname->nameLength = 0;
    ee72:	6123      	str	r3, [r4, #16]
    next = begin;
    ee74:	6062      	str	r2, [r4, #4]
  while (!fname->atEnd()) {
    ee76:	e017      	b.n	eea8 <ExFatFile::hashName(ExName_t*)+0x48>
    uint16_t u = fname->get16();
    ee78:	f005 f96a 	bl	14150 <FsName::get16()>
    if (u == 0XFFFF) {
    ee7c:	42a8      	cmp	r0, r5
    ee7e:	d022      	beq.n	eec6 <ExFatFile::hashName(ExName_t*)+0x66>
  uint16_t c = toUpcase(u);
    ee80:	f005 fa7a 	bl	14378 <toUpcase(unsigned short)>
    DBG_FAIL_MACRO;
      goto fail;
    }
    hash = exFatHash(u, hash);
    fname->nameLength++;
    ee84:	6923      	ldr	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    ee86:	03f2      	lsls	r2, r6, #15
    return !ls && next == end;
    ee88:	89a1      	ldrh	r1, [r4, #12]
    fname->nameLength++;
    ee8a:	3301      	adds	r3, #1
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    ee8c:	ea42 0256 	orr.w	r2, r2, r6, lsr #1
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    ee90:	0a06      	lsrs	r6, r0, #8
    fname->nameLength++;
    ee92:	6123      	str	r3, [r4, #16]
  hash = ((hash << 15) | (hash >> 1)) + (c & 0XFF);
    ee94:	fa52 f080 	uxtab	r0, r2, r0
    ee98:	b283      	uxth	r3, r0
  hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
    ee9a:	f3c0 004e 	ubfx	r0, r0, #1, #15
    ee9e:	ea40 30c3 	orr.w	r0, r0, r3, lsl #15
    eea2:	fa16 f080 	uxtah	r0, r6, r0
    eea6:	b286      	uxth	r6, r0
    uint16_t u = fname->get16();
    eea8:	4620      	mov	r0, r4
    eeaa:	2900      	cmp	r1, #0
    eeac:	d1e4      	bne.n	ee78 <ExFatFile::hashName(ExName_t*)+0x18>
    eeae:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    eeb2:	429a      	cmp	r2, r3
    eeb4:	d1e0      	bne.n	ee78 <ExFatFile::hashName(ExName_t*)+0x18>
    hash = exFatHash(c, hash);
  }
  fname->nameLength = fname->end - fname->begin;
#endif  // USE_UTF8_LONG_NAMES
  fname->nameHash = hash;
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    eeb6:	6920      	ldr	r0, [r4, #16]
  fname->nameHash = hash;
    eeb8:	82a6      	strh	r6, [r4, #20]
  if (!fname->nameLength || fname->nameLength > EXFAT_MAX_NAME_LENGTH) {
    eeba:	3801      	subs	r0, #1
    eebc:	28fe      	cmp	r0, #254	; 0xfe
    eebe:	bf8c      	ite	hi
    eec0:	2000      	movhi	r0, #0
    eec2:	2001      	movls	r0, #1
  }
  return true;

 fail:
  return false;
}
    eec4:	bd70      	pop	{r4, r5, r6, pc}
  return false;
    eec6:	2000      	movs	r0, #0
}
    eec8:	bd70      	pop	{r4, r5, r6, pc}
    eeca:	bf00      	nop

0000eecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    eecc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eed0:	4607      	mov	r7, r0
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    eed2:	468a      	mov	sl, r1
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    eed4:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    eed6:	2900      	cmp	r1, #0
    eed8:	d042      	beq.n	ef60 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x94>
    eeda:	f1a1 0802 	sub.w	r8, r1, #2
  if (start >= m_clusterCount) {
    eede:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    eee2:	4543      	cmp	r3, r8
    eee4:	d942      	bls.n	ef6c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xa0>
  uint8_t mask = 1 << (start & 7);
    eee6:	f008 0307 	and.w	r3, r8, #7
    eeea:	2501      	movs	r5, #1
  size_t i = (start >> 3) & (sectorSize - 1);
    eeec:	f3c8 0bc8 	ubfx	fp, r8, #3, #9
  uint8_t mask = 1 << (start & 7);
    eef0:	409d      	lsls	r5, r3
    eef2:	b2ed      	uxtb	r5, r5
  uint32_t bgnAlloc = start;
    eef4:	4646      	mov	r6, r8
  uint32_t endAlloc = start;
    eef6:	4644      	mov	r4, r8
    uint32_t sector = m_clusterHeapStartSector +
    eef8:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
    return m_bitmapCache.prepare(sector, option);
    eefc:	2200      	movs	r2, #0
    eefe:	4638      	mov	r0, r7
    ef00:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    ef04:	f005 f8e6 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    ef08:	b1e8      	cbz	r0, ef46 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7a>
    ef0a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    ef0e:	4483      	add	fp, r0
    ef10:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (!(mask & cache[i])) {
    ef14:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
    ef18:	e00a      	b.n	ef30 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x64>
          if ((endAlloc - bgnAlloc) == count) {
    ef1a:	454a      	cmp	r2, r9
    ef1c:	d02b      	beq.n	ef76 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xaa>
        if (endAlloc == start) {
    ef1e:	45a0      	cmp	r8, r4
    ef20:	d010      	beq.n	ef44 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x78>
        if (endAlloc >= m_clusterCount) {
    ef22:	f8d7 5430 	ldr.w	r5, [r7, #1072]	; 0x430
    ef26:	42a5      	cmp	r5, r4
    ef28:	d914      	bls.n	ef54 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x88>
      for (; mask; mask <<= 1) {
    ef2a:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    ef2e:	d00c      	beq.n	ef4a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x7e>
        endAlloc++;
    ef30:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    ef32:	4229      	tst	r1, r5
      for (; mask; mask <<= 1) {
    ef34:	ea4f 0345 	mov.w	r3, r5, lsl #1
          if ((endAlloc - bgnAlloc) == count) {
    ef38:	eba4 0206 	sub.w	r2, r4, r6
        if (!(mask & cache[i])) {
    ef3c:	d0ed      	beq.n	ef1a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4e>
        if (endAlloc == start) {
    ef3e:	45a0      	cmp	r8, r4
        endAlloc++;
    ef40:	4626      	mov	r6, r4
        if (endAlloc == start) {
    ef42:	d1ee      	bne.n	ef22 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x56>
          return 1;
    ef44:	2001      	movs	r0, #1
}
    ef46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    for (; i < sectorSize; i++) {
    ef4a:	4558      	cmp	r0, fp
      mask = 1;
    ef4c:	f04f 0501 	mov.w	r5, #1
    for (; i < sectorSize; i++) {
    ef50:	d1e0      	bne.n	ef14 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x48>
    ef52:	e001      	b.n	ef58 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8c>
          endAlloc = bgnAlloc = 0;
    ef54:	2600      	movs	r6, #0
    ef56:	4634      	mov	r4, r6
  uint32_t endAlloc = start;
    ef58:	2501      	movs	r5, #1
    i = 0;
    ef5a:	f04f 0b00 	mov.w	fp, #0
    ef5e:	e7cb      	b.n	eef8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    ef60:	f8d0 8420 	ldr.w	r8, [r0, #1056]	; 0x420
  if (start >= m_clusterCount) {
    ef64:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    ef68:	4543      	cmp	r3, r8
    ef6a:	d8bc      	bhi.n	eee6 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x1a>
    ef6c:	f04f 0800 	mov.w	r8, #0
    ef70:	2501      	movs	r5, #1
    start = 0;
    ef72:	46c3      	mov	fp, r8
    ef74:	e7be      	b.n	eef4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
            if (cluster == 0 && count == 1) {
    ef76:	f1ba 0f00 	cmp.w	sl, #0
    ef7a:	d104      	bne.n	ef86 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xba>
    ef7c:	f1b9 0f01 	cmp.w	r9, #1
              m_bitmapStart = bgnAlloc;
    ef80:	bf08      	it	eq
    ef82:	f8c7 6420 	streq.w	r6, [r7, #1056]	; 0x420
            return bgnAlloc + 2;
    ef86:	1cb0      	adds	r0, r6, #2
}
    ef88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000ef8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
                                  uint32_t count, bool value) {
    ef8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ef90:	4680      	mov	r8, r0
  uint32_t start = cluster - 2;
    ef92:	1e88      	subs	r0, r1, #2
                                  uint32_t count, bool value) {
    ef94:	4615      	mov	r5, r2
    ef96:	461e      	mov	r6, r3
  if ((start + count) > m_clusterCount) {
    ef98:	1883      	adds	r3, r0, r2
    ef9a:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    ef9e:	4293      	cmp	r3, r2
    efa0:	d837      	bhi.n	f012 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
  if (value) {
    efa2:	bbce      	cbnz	r6, f018 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start < m_bitmapStart) {
    efa4:	f8d8 3420 	ldr.w	r3, [r8, #1056]	; 0x420
    efa8:	4283      	cmp	r3, r0
      m_bitmapStart = start;
    efaa:	bf88      	it	hi
    efac:	f8c8 0420 	strhi.w	r0, [r8, #1056]	; 0x420
  mask = 1 << (start & 7);
    efb0:	f000 0307 	and.w	r3, r0, #7
    efb4:	2401      	movs	r4, #1
  sector = m_clusterHeapStartSector +
    efb6:	f8d8 742c 	ldr.w	r7, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    efba:	f3c0 09c8 	ubfx	r9, r0, #3, #9
  mask = 1 << (start & 7);
    efbe:	409c      	lsls	r4, r3
  sector = m_clusterHeapStartSector +
    efc0:	eb07 3110 	add.w	r1, r7, r0, lsr #12
  mask = 1 << (start & 7);
    efc4:	b2e4      	uxtb	r4, r4
    efc6:	2201      	movs	r2, #1
    efc8:	4640      	mov	r0, r8
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    efca:	188f      	adds	r7, r1, r2
    efcc:	f005 f882 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    efd0:	b1f8      	cbz	r0, f012 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    efd2:	f109 3eff 	add.w	lr, r9, #4294967295	; 0xffffffff
    efd6:	4486      	add	lr, r0
    efd8:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
        if (value == static_cast<bool>(cache[i] & mask)) {
    efdc:	f81e cf01 	ldrb.w	ip, [lr, #1]!
    efe0:	ea1c 0f04 	tst.w	ip, r4
        cache[i] ^= mask;
    efe4:	ea8c 0c04 	eor.w	ip, ip, r4
      for (; mask; mask <<= 1) {
    efe8:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    efec:	bf14      	ite	ne
    efee:	2201      	movne	r2, #1
    eff0:	2200      	moveq	r2, #0
    eff2:	42b2      	cmp	r2, r6
    eff4:	d00d      	beq.n	f012 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
        if (--count == 0) {
    eff6:	3d01      	subs	r5, #1
        cache[i] ^= mask;
    eff8:	f88e c000 	strb.w	ip, [lr]
        if (--count == 0) {
    effc:	d018      	beq.n	f030 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
      for (; mask; mask <<= 1) {
    effe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    f002:	d1ed      	bne.n	efe0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    for (; i < m_bytesPerSector; i++) {
    f004:	4570      	cmp	r0, lr
    i = 0;
    f006:	46a1      	mov	r9, r4
    f008:	f04f 0401 	mov.w	r4, #1
    for (; i < m_bytesPerSector; i++) {
    f00c:	d1e6      	bne.n	efdc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x50>
    cache = bitmapCachePrepare(sector++, FsCache::CACHE_FOR_WRITE);
    f00e:	4639      	mov	r1, r7
    f010:	e7d9      	b.n	efc6 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x3a>
  return false;
    f012:	2000      	movs	r0, #0
}
    f014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    f018:	f8d8 1420 	ldr.w	r1, [r8, #1056]	; 0x420
    f01c:	428b      	cmp	r3, r1
    f01e:	d9c7      	bls.n	efb0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
    f020:	4281      	cmp	r1, r0
    f022:	d3c5      	bcc.n	efb0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    f024:	4293      	cmp	r3, r2
    f026:	bf28      	it	cs
    f028:	2300      	movcs	r3, #0
    f02a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    f02e:	e7bf      	b.n	efb0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x24>
          return true;
    f030:	2001      	movs	r0, #1
}
    f032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f036:	bf00      	nop

0000f038 <ExFatPartition::chainSize(unsigned long)>:
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    f038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cluster > (m_clusterCount + 1)) {
    f03a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f03e:	3301      	adds	r3, #1
    f040:	428b      	cmp	r3, r1
    f042:	d201      	bcs.n	f048 <ExFatPartition::chainSize(unsigned long)+0x10>
    if (status < 0) return 0;
    f044:	2000      	movs	r0, #0
}
    f046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f048:	4607      	mov	r7, r0
    f04a:	460c      	mov	r4, r1
    return m_dataCache.prepare(sector, option);
    f04c:	f500 7604 	add.w	r6, r0, #528	; 0x210
  uint32_t n = 0;
    f050:	2500      	movs	r5, #0
    f052:	e005      	b.n	f060 <ExFatPartition::chainSize(unsigned long)+0x28>
  if (cluster > (m_clusterCount + 1)) {
    f054:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
    n++;
    f058:	3501      	adds	r5, #1
  if (cluster > (m_clusterCount + 1)) {
    f05a:	3301      	adds	r3, #1
    f05c:	42a3      	cmp	r3, r4
    f05e:	d3f1      	bcc.n	f044 <ExFatPartition::chainSize(unsigned long)+0xc>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f060:	f8d7 1424 	ldr.w	r1, [r7, #1060]	; 0x424
    f064:	2200      	movs	r2, #0
    f066:	4630      	mov	r0, r6
    f068:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f06c:	f005 f832 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f070:	00a4      	lsls	r4, r4, #2
  if (!cache) {
    f072:	2800      	cmp	r0, #0
    f074:	d0e6      	beq.n	f044 <ExFatPartition::chainSize(unsigned long)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f076:	f3c4 0408 	ubfx	r4, r4, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    f07a:	5904      	ldr	r4, [r0, r4]
  if (next == EXFAT_EOC) {
    f07c:	1c63      	adds	r3, r4, #1
    f07e:	d1e9      	bne.n	f054 <ExFatPartition::chainSize(unsigned long)+0x1c>
    n++;
    f080:	1c68      	adds	r0, r5, #1
}
    f082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000f084 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    f084:	b538      	push	{r3, r4, r5, lr}
    f086:	460c      	mov	r4, r1
           ((cluster - 2) << m_sectorsPerClusterShift);
    f088:	680b      	ldr	r3, [r1, #0]
    f08a:	f890 c445 	ldrb.w	ip, [r0, #1093]	; 0x445
    return m_dataCache.prepare(sector, option);
    f08e:	f500 7004 	add.w	r0, r0, #528	; 0x210
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
    f092:	f8d0 1228 	ldr.w	r1, [r0, #552]	; 0x228
           ((cluster - 2) << m_sectorsPerClusterShift);
    f096:	3b02      	subs	r3, #2
    f098:	6865      	ldr	r5, [r4, #4]
    f09a:	fa03 f30c 	lsl.w	r3, r3, ip
    f09e:	4029      	ands	r1, r5
    f0a0:	eb03 2351 	add.w	r3, r3, r1, lsr #9
    f0a4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
    return m_dataCache.prepare(sector, option);
    f0a8:	4419      	add	r1, r3
    f0aa:	f005 f813 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    f0ae:	b118      	cbz	r0, f0b8 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    f0b0:	6863      	ldr	r3, [r4, #4]
    f0b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f0b6:	4418      	add	r0, r3
}
    f0b8:	bd38      	pop	{r3, r4, r5, pc}
    f0ba:	bf00      	nop

0000f0bc <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    f0bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f0c0:	460c      	mov	r4, r1
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    f0c2:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
    f0c6:	6849      	ldr	r1, [r1, #4]
    f0c8:	400b      	ands	r3, r1
  pos->position += offset;
    f0ca:	4411      	add	r1, r2
    f0cc:	6061      	str	r1, [r4, #4]
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    f0ce:	4413      	add	r3, r2
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f0d0:	f890 1445 	ldrb.w	r1, [r0, #1093]	; 0x445
    f0d4:	f101 0209 	add.w	r2, r1, #9
  tmp >>= bytesPerClusterShift();
    f0d8:	b2d2      	uxtb	r2, r2
    f0da:	40d3      	lsrs	r3, r2
  while (tmp--) {
    f0dc:	b32b      	cbz	r3, f12a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    f0de:	4680      	mov	r8, r0
    f0e0:	1e5d      	subs	r5, r3, #1
    return m_dataCache.prepare(sector, option);
    f0e2:	f500 7904 	add.w	r9, r0, #528	; 0x210
    f0e6:	e005      	b.n	f0f4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
      pos->cluster++;
    f0e8:	6823      	ldr	r3, [r4, #0]
  while (tmp--) {
    f0ea:	3d01      	subs	r5, #1
      pos->cluster++;
    f0ec:	f103 0301 	add.w	r3, r3, #1
    f0f0:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    f0f2:	d31a      	bcc.n	f12a <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x6e>
    if (pos->isContiguous) {
    f0f4:	7a26      	ldrb	r6, [r4, #8]
    f0f6:	2e00      	cmp	r6, #0
    f0f8:	d1f6      	bne.n	f0e8 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
  if (cluster > (m_clusterCount + 1)) {
    f0fa:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    f0fe:	4632      	mov	r2, r6
      status = fatGet(pos->cluster, &pos->cluster);
    f100:	6827      	ldr	r7, [r4, #0]
    f102:	4648      	mov	r0, r9
  if (cluster > (m_clusterCount + 1)) {
    f104:	3301      	adds	r3, #1
    f106:	429f      	cmp	r7, r3
    f108:	d812      	bhi.n	f130 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f10a:	f8d8 1424 	ldr.w	r1, [r8, #1060]	; 0x424
    f10e:	eb01 11d7 	add.w	r1, r1, r7, lsr #7
    f112:	f004 ffdf 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f116:	00bf      	lsls	r7, r7, #2
  if (!cache) {
    f118:	b150      	cbz	r0, f130 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x74>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f11a:	f3c7 0708 	ubfx	r7, r7, #0, #9
    f11e:	59c3      	ldr	r3, [r0, r7]
  if (next == EXFAT_EOC) {
    f120:	1c5a      	adds	r2, r3, #1
    f122:	d009      	beq.n	f138 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x7c>
  while (tmp--) {
    f124:	3d01      	subs	r5, #1
  *value = next;
    f126:	6023      	str	r3, [r4, #0]
  while (tmp--) {
    f128:	d2e4      	bcs.n	f0f4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x38>
  return 1;
    f12a:	2001      	movs	r0, #1
}
    f12c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return -1;
    f130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return 0;
    f138:	4630      	mov	r0, r6
}
    f13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f13e:	bf00      	nop

0000f140 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
int8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    f140:	b538      	push	{r3, r4, r5, lr}
  if (cluster > (m_clusterCount + 1)) {
    f142:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f146:	3301      	adds	r3, #1
    f148:	428b      	cmp	r3, r1
    f14a:	d202      	bcs.n	f152 <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x12>
    return -1;
    f14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    f150:	bd38      	pop	{r3, r4, r5, pc}
    f152:	460c      	mov	r4, r1
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f154:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    f158:	4615      	mov	r5, r2
    f15a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    f15e:	2200      	movs	r2, #0
    f160:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f164:	f004 ffb6 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f168:	2800      	cmp	r0, #0
    f16a:	d0ef      	beq.n	f14c <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xc>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f16c:	00a4      	lsls	r4, r4, #2
    f16e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    f172:	5903      	ldr	r3, [r0, r4]
  if (next == EXFAT_EOC) {
    f174:	1c5a      	adds	r2, r3, #1
    f176:	d002      	beq.n	f17e <ExFatPartition::fatGet(unsigned long, unsigned long*)+0x3e>
  return 1;
    f178:	2001      	movs	r0, #1
  *value = next;
    f17a:	602b      	str	r3, [r5, #0]
}
    f17c:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
    f17e:	2000      	movs	r0, #0
}
    f180:	bd38      	pop	{r3, r4, r5, pc}
    f182:	bf00      	nop

0000f184 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    f184:	2901      	cmp	r1, #1
    f186:	d91b      	bls.n	f1c0 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x3c>
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    f188:	b538      	push	{r3, r4, r5, lr}
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    f18a:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f18e:	460c      	mov	r4, r1
    f190:	3301      	adds	r3, #1
    f192:	428b      	cmp	r3, r1
    f194:	d201      	bcs.n	f19a <ExFatPartition::fatPut(unsigned long, unsigned long)+0x16>
  return false;
    f196:	2000      	movs	r0, #0
}
    f198:	bd38      	pop	{r3, r4, r5, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f19a:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    f19e:	4615      	mov	r5, r2
    f1a0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    f1a4:	2201      	movs	r2, #1
    f1a6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f1aa:	f004 ff93 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f1ae:	4603      	mov	r3, r0
    f1b0:	2800      	cmp	r0, #0
    f1b2:	d0f0      	beq.n	f196 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x12>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    f1b4:	00a4      	lsls	r4, r4, #2
  return true;
    f1b6:	2001      	movs	r0, #1
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
    f1b8:	f3c4 0408 	ubfx	r4, r4, #0, #9
  *reinterpret_cast<uint32_t*>(dst) = src;
    f1bc:	511d      	str	r5, [r3, r4]
}
    f1be:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    f1c0:	2000      	movs	r0, #0
}
    f1c2:	4770      	bx	lr

0000f1c4 <ExFatPartition::freeChain(unsigned long)>:
  if (cluster > (m_clusterCount + 1)) {
    f1c4:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    f1c8:	3301      	adds	r3, #1
    f1ca:	4299      	cmp	r1, r3
    f1cc:	d901      	bls.n	f1d2 <ExFatPartition::freeChain(unsigned long)+0xe>
}
    f1ce:	2000      	movs	r0, #0
    f1d0:	4770      	bx	lr
bool ExFatPartition::freeChain(uint32_t cluster) {
    f1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1d6:	4605      	mov	r5, r0
    f1d8:	b083      	sub	sp, #12
    f1da:	460c      	mov	r4, r1
    f1dc:	f500 7904 	add.w	r9, r0, #528	; 0x210
    f1e0:	460f      	mov	r7, r1
    f1e2:	f04f 0800 	mov.w	r8, #0
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f1e6:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    f1ea:	2200      	movs	r2, #0
    f1ec:	4648      	mov	r0, r9
    f1ee:	ea4f 1bd4 	mov.w	fp, r4, lsr #7
    f1f2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    f1f6:	f004 ff6d 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f1fa:	b190      	cbz	r0, f222 <ExFatPartition::freeChain(unsigned long)+0x5e>
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));
    f1fc:	00a3      	lsls	r3, r4, #2
    f1fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
  return *reinterpret_cast<const uint32_t*>(src);
    f202:	58c2      	ldr	r2, [r0, r3]
    f204:	9301      	str	r3, [sp, #4]
  if (next == EXFAT_EOC) {
    f206:	1c53      	adds	r3, r2, #1
    f208:	bf16      	itet	ne
    f20a:	4616      	movne	r6, r2
    f20c:	f04f 0a00 	moveq.w	sl, #0
    f210:	f04f 0a01 	movne.w	sl, #1
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    f214:	2c01      	cmp	r4, #1
    f216:	d904      	bls.n	f222 <ExFatPartition::freeChain(unsigned long)+0x5e>
    f218:	f8d5 2430 	ldr.w	r2, [r5, #1072]	; 0x430
    f21c:	3201      	adds	r2, #1
    f21e:	4294      	cmp	r4, r2
    f220:	d903      	bls.n	f22a <ExFatPartition::freeChain(unsigned long)+0x66>
}
    f222:	2000      	movs	r0, #0
    f224:	b003      	add	sp, #12
    f226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    f22a:	f8d5 1424 	ldr.w	r1, [r5, #1060]	; 0x424
    f22e:	2201      	movs	r2, #1
    f230:	4648      	mov	r0, r9
    f232:	4459      	add	r1, fp
    f234:	f004 ff4e 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!cache) {
    f238:	2800      	cmp	r0, #0
    f23a:	d0f2      	beq.n	f222 <ExFatPartition::freeChain(unsigned long)+0x5e>
  *reinterpret_cast<uint32_t*>(dst) = src;
    f23c:	9b01      	ldr	r3, [sp, #4]
    f23e:	f840 8003 	str.w	r8, [r0, r3]
    if (status == 0 || (cluster + 1) != next) {
    f242:	f1ba 0f00 	cmp.w	sl, #0
    f246:	d012      	beq.n	f26e <ExFatPartition::freeChain(unsigned long)+0xaa>
    f248:	3401      	adds	r4, #1
    f24a:	42b4      	cmp	r4, r6
    f24c:	d008      	beq.n	f260 <ExFatPartition::freeChain(unsigned long)+0x9c>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    f24e:	2300      	movs	r3, #0
    f250:	1be2      	subs	r2, r4, r7
    f252:	4639      	mov	r1, r7
    f254:	4628      	mov	r0, r5
    f256:	f7ff fe99 	bl	ef8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f25a:	2800      	cmp	r0, #0
    f25c:	d0e1      	beq.n	f222 <ExFatPartition::freeChain(unsigned long)+0x5e>
    f25e:	4637      	mov	r7, r6
  if (cluster > (m_clusterCount + 1)) {
    f260:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    f264:	3301      	adds	r3, #1
    f266:	42b3      	cmp	r3, r6
    f268:	d3db      	bcc.n	f222 <ExFatPartition::freeChain(unsigned long)+0x5e>
    f26a:	4634      	mov	r4, r6
    f26c:	e7bb      	b.n	f1e6 <ExFatPartition::freeChain(unsigned long)+0x22>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    f26e:	1c62      	adds	r2, r4, #1
    f270:	4653      	mov	r3, sl
    f272:	4639      	mov	r1, r7
    f274:	4628      	mov	r0, r5
    f276:	1bd2      	subs	r2, r2, r7
}
    f278:	b003      	add	sp, #12
    f27a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    f27e:	f7ff be85 	b.w	ef8c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    f282:	bf00      	nop

0000f284 <ExFatPartition::freeClusterCount()>:
uint32_t ExFatPartition::freeClusterCount() {
    f284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t usedCount = 0;
    f288:	2500      	movs	r5, #0
uint32_t ExFatPartition::freeClusterCount() {
    f28a:	4606      	mov	r6, r0
  uint32_t sector = m_clusterHeapStartSector;
    f28c:	f8d0 142c 	ldr.w	r1, [r0, #1068]	; 0x42c
    f290:	f500 7804 	add.w	r8, r0, #528	; 0x210
  uint32_t nc = 0;
    f294:	462c      	mov	r4, r5
    f296:	2200      	movs	r2, #0
    f298:	4640      	mov	r0, r8
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    f29a:	1c4f      	adds	r7, r1, #1
    f29c:	f004 ff1a 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f2a0:	b1a8      	cbz	r0, f2ce <ExFatPartition::freeClusterCount()+0x4a>
    f2a2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
    f2a6:	f504 5980 	add.w	r9, r4, #4096	; 0x1000
      if (nc >= m_clusterCount) {
    f2aa:	f8d6 0430 	ldr.w	r0, [r6, #1072]	; 0x430
    f2ae:	e005      	b.n	f2bc <ExFatPartition::freeClusterCount()+0x38>
      } else if (cache[i]) {
    f2b0:	b979      	cbnz	r1, f2d2 <ExFatPartition::freeClusterCount()+0x4e>
      nc += 8;
    f2b2:	3408      	adds	r4, #8
      if (nc >= m_clusterCount) {
    f2b4:	4284      	cmp	r4, r0
    f2b6:	d209      	bcs.n	f2cc <ExFatPartition::freeClusterCount()+0x48>
    for (size_t i = 0; i < m_bytesPerSector; i++) {
    f2b8:	454c      	cmp	r4, r9
    f2ba:	d016      	beq.n	f2ea <ExFatPartition::freeClusterCount()+0x66>
      if (cache[i] == 0XFF) {
    f2bc:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    f2c0:	29ff      	cmp	r1, #255	; 0xff
    f2c2:	d1f5      	bne.n	f2b0 <ExFatPartition::freeClusterCount()+0x2c>
      nc += 8;
    f2c4:	3408      	adds	r4, #8
        usedCount+= 8;
    f2c6:	3508      	adds	r5, #8
      if (nc >= m_clusterCount) {
    f2c8:	4284      	cmp	r4, r0
    f2ca:	d3f5      	bcc.n	f2b8 <ExFatPartition::freeClusterCount()+0x34>
        return m_clusterCount - usedCount;
    f2cc:	1b40      	subs	r0, r0, r5
}
    f2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f2d2:	2208      	movs	r2, #8
        for (uint8_t mask = 1; mask ; mask <<=1) {
    f2d4:	2301      	movs	r3, #1
          if ((mask & cache[i])) {
    f2d6:	4219      	tst	r1, r3
        for (uint8_t mask = 1; mask ; mask <<=1) {
    f2d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
            usedCount++;
    f2dc:	bf18      	it	ne
    f2de:	3501      	addne	r5, #1
        for (uint8_t mask = 1; mask ; mask <<=1) {
    f2e0:	3a01      	subs	r2, #1
    f2e2:	fa5f f38c 	uxtb.w	r3, ip
    f2e6:	d1f6      	bne.n	f2d6 <ExFatPartition::freeClusterCount()+0x52>
    f2e8:	e7e3      	b.n	f2b2 <ExFatPartition::freeClusterCount()+0x2e>
    cache = dataCachePrepare(sector++, FsCache::CACHE_FOR_READ);
    f2ea:	4639      	mov	r1, r7
    f2ec:	e7d3      	b.n	f296 <ExFatPartition::freeClusterCount()+0x12>
    f2ee:	bf00      	nop

0000f2f0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>:
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    f2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  m_fatType = 0;
    f2f2:	2300      	movs	r3, #0
    m_sector = 0XFFFFFFFF;
    f2f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    f2f8:	f500 7704 	add.w	r7, r0, #528	; 0x210
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    f2fc:	4615      	mov	r5, r2
  m_blockDev = dev;
    f2fe:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
bool ExFatPartition::init(FsBlockDevice* dev, uint8_t part) {
    f302:	4604      	mov	r4, r0
    m_blockDev = blockDev;
    f304:	6041      	str	r1, [r0, #4]
    f306:	461a      	mov	r2, r3
    f308:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    f30c:	4619      	mov	r1, r3
  m_fatType = 0;
    f30e:	f880 3444 	strb.w	r3, [r0, #1092]	; 0x444
    m_status = 0;
    f312:	7003      	strb	r3, [r0, #0]
    m_sector = 0XFFFFFFFF;
    f314:	60c6      	str	r6, [r0, #12]
    m_status = 0;
    f316:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    f31a:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
    f31e:	4638      	mov	r0, r7
    f320:	f004 fed8 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (part > 4 || !cache) {
    f324:	2d04      	cmp	r5, #4
    f326:	d80d      	bhi.n	f344 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    f328:	4606      	mov	r6, r0
    f32a:	b158      	cbz	r0, f344 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (part >= 1) {
    f32c:	b1bd      	cbz	r5, f35e <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x6e>
    mp = &mbr->part[part - 1];
    f32e:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    f330:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    f334:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    f338:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    f33c:	d102      	bne.n	f344 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
    f33e:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    f342:	b90b      	cbnz	r3, f348 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x58>
  return false;
    f344:	2000      	movs	r0, #0
}
    f346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return *reinterpret_cast<const uint32_t*>(src);
    f348:	eb00 1605 	add.w	r6, r0, r5, lsl #4
    f34c:	4638      	mov	r0, r7
    f34e:	f8d6 51b6 	ldr.w	r5, [r6, #438]	; 0x1b6
    f352:	4629      	mov	r1, r5
    f354:	f004 febe 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!cache) {
    f358:	4606      	mov	r6, r0
    f35a:	2800      	cmp	r0, #0
    f35c:	d0f2      	beq.n	f344 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    f35e:	2205      	movs	r2, #5
    f360:	491a      	ldr	r1, [pc, #104]	; (f3cc <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xdc>)
    f362:	1cf0      	adds	r0, r6, #3
    f364:	f013 f90e 	bl	22584 <strncmp>
    f368:	2800      	cmp	r0, #0
    f36a:	d1eb      	bne.n	f344 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    f36c:	f896 306c 	ldrb.w	r3, [r6, #108]	; 0x6c
    f370:	2b09      	cmp	r3, #9
    f372:	d1e7      	bne.n	f344 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x54>
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    f374:	6d33      	ldr	r3, [r6, #80]	; 0x50
  bitmapFind(0, 1);
    f376:	4601      	mov	r1, r0
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    f378:	442b      	add	r3, r5
    f37a:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
    f37e:	6d73      	ldr	r3, [r6, #84]	; 0x54
  m_fatLength = getLe32(bpb->fatLength);
    f380:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    f384:	6db3      	ldr	r3, [r6, #88]	; 0x58
    f386:	442b      	add	r3, r5
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f388:	2501      	movs	r5, #1
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    f38a:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
    f38e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    f390:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    f394:	6e33      	ldr	r3, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    f396:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    f39a:	f896 206d 	ldrb.w	r2, [r6, #109]	; 0x6d
  m_bitmapStart = 0;
    f39e:	f8c4 0420 	str.w	r0, [r4, #1056]	; 0x420
  bitmapFind(0, 1);
    f3a2:	4620      	mov	r0, r4
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f3a4:	f102 0309 	add.w	r3, r2, #9
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    f3a8:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f3ac:	fa05 f303 	lsl.w	r3, r5, r3
  m_clusterMask = m_bytesPerCluster - 1;
    f3b0:	1e5a      	subs	r2, r3, #1
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    f3b2:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    f3b6:	f8c4 2438 	str.w	r2, [r4, #1080]	; 0x438
  bitmapFind(0, 1);
    f3ba:	462a      	mov	r2, r5
    f3bc:	f7ff fd86 	bl	eecc <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    f3c0:	2340      	movs	r3, #64	; 0x40
  return true;
    f3c2:	4628      	mov	r0, r5
  m_fatType = FAT_TYPE_EXFAT;
    f3c4:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
}
    f3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f3ca:	bf00      	nop
    f3cc:	20000f68 	.word	0x20000f68

0000f3d0 <ExFatPartition::rootLength()>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    f3d0:	b510      	push	{r4, lr}
    f3d2:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    f3d4:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    f3d8:	f7ff fe2e 	bl	f038 <ExFatPartition::chainSize(unsigned long)>
    return m_bytesPerSectorShift + m_sectorsPerClusterShift;
    f3dc:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    f3e0:	3309      	adds	r3, #9
  return nc << bytesPerClusterShift();
    f3e2:	b2db      	uxtb	r3, r3
}
    f3e4:	4098      	lsls	r0, r3
    f3e6:	bd10      	pop	{r4, pc}

0000f3e8 <FatFile::sync() [clone .part.0]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    f3e8:	b570      	push	{r4, r5, r6, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    f3ea:	f990 3002 	ldrsb.w	r3, [r0, #2]
bool FatFile::sync() {
    f3ee:	b082      	sub	sp, #8
    f3f0:	4604      	mov	r4, r0
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    f3f2:	2b00      	cmp	r3, #0
    f3f4:	db0d      	blt.n	f412 <FatFile::sync() [clone .part.0]+0x2a>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    f3f6:	68a5      	ldr	r5, [r4, #8]
  uint8_t* fatCachePrepare(uint32_t sector, uint8_t options) {
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return m_fatCache.prepare(sector, options);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f3f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    f3fc:	f004 fe3e 	bl	1407c <FsCache::sync()>
    f400:	2800      	cmp	r0, #0
    f402:	d13b      	bne.n	f47c <FatFile::sync() [clone .part.0]+0x94>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    f404:	7863      	ldrb	r3, [r4, #1]
  return false;
    f406:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
    f408:	f043 0301 	orr.w	r3, r3, #1
    f40c:	7063      	strb	r3, [r4, #1]
}
    f40e:	b002      	add	sp, #8
    f410:	bd70      	pop	{r4, r5, r6, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  uint8_t* dataCachePrepare(uint32_t sector, uint8_t options) {
    return m_cache.prepare(sector, options);
    f412:	6880      	ldr	r0, [r0, #8]
    f414:	2201      	movs	r2, #1
    f416:	69a1      	ldr	r1, [r4, #24]
    f418:	3028      	adds	r0, #40	; 0x28
    f41a:	f004 fe5b 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f41e:	2800      	cmp	r0, #0
    f420:	d0f0      	beq.n	f404 <FatFile::sync() [clone .part.0]+0x1c>
  return dir + (m_dirIndex & 0XF);
    f422:	88a5      	ldrh	r5, [r4, #4]
    f424:	f005 050f 	and.w	r5, r5, #15
    f428:	016b      	lsls	r3, r5, #5
    f42a:	eb00 1545 	add.w	r5, r0, r5, lsl #5
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    f42e:	5cc3      	ldrb	r3, [r0, r3]
    f430:	2be5      	cmp	r3, #229	; 0xe5
    f432:	d0e7      	beq.n	f404 <FatFile::sync() [clone .part.0]+0x1c>
    if (isFile()) {
    f434:	7823      	ldrb	r3, [r4, #0]
    f436:	071b      	lsls	r3, r3, #28
    f438:	d501      	bpl.n	f43e <FatFile::sync() [clone .part.0]+0x56>
      setLe32(dir->fileSize, m_fileSize);
    f43a:	69e3      	ldr	r3, [r4, #28]
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}
inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    f43c:	61eb      	str	r3, [r5, #28]
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    f43e:	6a23      	ldr	r3, [r4, #32]
    if (FsDateTime::callback) {
    f440:	4915      	ldr	r1, [pc, #84]	; (f498 <FatFile::sync() [clone .part.0]+0xb0>)
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    f442:	0c1a      	lsrs	r2, r3, #16
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    f444:	836b      	strh	r3, [r5, #26]
    if (FsDateTime::callback) {
    f446:	680e      	ldr	r6, [r1, #0]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);
    f448:	82aa      	strh	r2, [r5, #20]
    if (FsDateTime::callback) {
    f44a:	b166      	cbz	r6, f466 <FatFile::sync() [clone .part.0]+0x7e>
      FsDateTime::callback(&date, &time, &ms10);
    f44c:	f10d 0203 	add.w	r2, sp, #3
    f450:	f10d 0106 	add.w	r1, sp, #6
    f454:	a801      	add	r0, sp, #4
    f456:	47b0      	blx	r6
      setLe16(dir->modifyDate, date);
    f458:	f8bd 3004 	ldrh.w	r3, [sp, #4]
  *reinterpret_cast<uint16_t*>(dst) = src;
    f45c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    f460:	832b      	strh	r3, [r5, #24]
    f462:	826b      	strh	r3, [r5, #18]
    f464:	82ea      	strh	r2, [r5, #22]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    f466:	78a3      	ldrb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
    f468:	68a5      	ldr	r5, [r4, #8]
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    f46a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f46e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    f472:	70a3      	strb	r3, [r4, #2]
    f474:	f004 fe02 	bl	1407c <FsCache::sync()>
    f478:	2800      	cmp	r0, #0
    f47a:	d0c3      	beq.n	f404 <FatFile::sync() [clone .part.0]+0x1c>
    f47c:	f505 700e 	add.w	r0, r5, #568	; 0x238
    f480:	f004 fdfc 	bl	1407c <FsCache::sync()>
    f484:	2800      	cmp	r0, #0
    f486:	d0bd      	beq.n	f404 <FatFile::sync() [clone .part.0]+0x1c>
    f488:	6828      	ldr	r0, [r5, #0]
    return m_blockDev->syncDevice();
    f48a:	6803      	ldr	r3, [r0, #0]
    f48c:	6a1b      	ldr	r3, [r3, #32]
    f48e:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f490:	2800      	cmp	r0, #0
    f492:	d0b7      	beq.n	f404 <FatFile::sync() [clone .part.0]+0x1c>
    f494:	e7bb      	b.n	f40e <FatFile::sync() [clone .part.0]+0x26>
    f496:	bf00      	nop
    f498:	2000502c 	.word	0x2000502c

0000f49c <FatFile::addCluster()>:
  uint32_t cc = m_curCluster;
    f49c:	4602      	mov	r2, r0
bool FatFile::addCluster() {
    f49e:	b538      	push	{r3, r4, r5, lr}
  uint32_t cc = m_curCluster;
    f4a0:	f852 5f10 	ldr.w	r5, [r2, #16]!
bool FatFile::addCluster() {
    f4a4:	4604      	mov	r4, r0
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    f4a6:	6880      	ldr	r0, [r0, #8]
    f4a8:	4629      	mov	r1, r5
    f4aa:	f002 f921 	bl	116f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    f4ae:	b150      	cbz	r0, f4c6 <FatFile::addCluster()+0x2a>
  if (cc == 0) {
    f4b0:	b155      	cbz	r5, f4c8 <FatFile::addCluster()+0x2c>
  } else if (m_curCluster != (cc + 1)) {
    f4b2:	6923      	ldr	r3, [r4, #16]
    f4b4:	3501      	adds	r5, #1
    f4b6:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    f4b8:	78a3      	ldrb	r3, [r4, #2]
    f4ba:	bf18      	it	ne
    f4bc:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  m_flags |= FILE_FLAG_DIR_DIRTY;
    f4c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f4c4:	70a3      	strb	r3, [r4, #2]
}
    f4c6:	bd38      	pop	{r3, r4, r5, pc}
    m_flags |= FILE_FLAG_CONTIGUOUS;
    f4c8:	78a3      	ldrb	r3, [r4, #2]
    f4ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f4ce:	e7f7      	b.n	f4c0 <FatFile::addCluster()+0x24>

0000f4d0 <FatFile::addDirCluster()>:
bool FatFile::addDirCluster() {
    f4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isRootFixed()) {
    f4d2:	7804      	ldrb	r4, [r0, #0]
    f4d4:	f014 0420 	ands.w	r4, r4, #32
    f4d8:	d104      	bne.n	f4e4 <FatFile::addDirCluster()+0x14>
  if (m_curPosition >= 512UL*4095) {
    f4da:	4b1a      	ldr	r3, [pc, #104]	; (f544 <FatFile::addDirCluster()+0x74>)
    f4dc:	4605      	mov	r5, r0
    f4de:	6942      	ldr	r2, [r0, #20]
    f4e0:	429a      	cmp	r2, r3
    f4e2:	d302      	bcc.n	f4ea <FatFile::addDirCluster()+0x1a>
  return false;
    f4e4:	2700      	movs	r7, #0
}
    f4e6:	4638      	mov	r0, r7
    f4e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!addCluster()) {
    f4ea:	f7ff ffd7 	bl	f49c <FatFile::addCluster()>
    f4ee:	4607      	mov	r7, r0
    f4f0:	2800      	cmp	r0, #0
    f4f2:	d0f7      	beq.n	f4e4 <FatFile::addDirCluster()+0x14>
  sector = m_vol->clusterStartSector(m_curCluster);
    f4f4:	68a8      	ldr	r0, [r5, #8]
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    f4f6:	692e      	ldr	r6, [r5, #16]
    f4f8:	7982      	ldrb	r2, [r0, #6]
    f4fa:	3e02      	subs	r6, #2
    f4fc:	6941      	ldr	r1, [r0, #20]
    f4fe:	4096      	lsls	r6, r2
    f500:	440e      	add	r6, r1
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    f502:	7901      	ldrb	r1, [r0, #4]
    f504:	b1a9      	cbz	r1, f532 <FatFile::addDirCluster()+0x62>
    f506:	4621      	mov	r1, r4
    f508:	e006      	b.n	f518 <FatFile::addDirCluster()+0x48>
    memset(pc, 0, m_vol->bytesPerSector());
    f50a:	f012 ffe9 	bl	224e0 <memset>
  for (uint8_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    f50e:	68a8      	ldr	r0, [r5, #8]
    f510:	b2e1      	uxtb	r1, r4
    f512:	7902      	ldrb	r2, [r0, #4]
    f514:	428a      	cmp	r2, r1
    f516:	d90b      	bls.n	f530 <FatFile::addDirCluster()+0x60>
    return m_cache.prepare(sector, options);
    f518:	4431      	add	r1, r6
    f51a:	2205      	movs	r2, #5
    f51c:	3028      	adds	r0, #40	; 0x28
    f51e:	3401      	adds	r4, #1
    f520:	f004 fdd8 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    memset(pc, 0, m_vol->bytesPerSector());
    f524:	f44f 7200 	mov.w	r2, #512	; 0x200
    f528:	2100      	movs	r1, #0
    if (!pc) {
    f52a:	2800      	cmp	r0, #0
    f52c:	d1ed      	bne.n	f50a <FatFile::addDirCluster()+0x3a>
    f52e:	e7d9      	b.n	f4e4 <FatFile::addDirCluster()+0x14>
    return m_bytesPerSector << m_sectorsPerClusterShift;
    f530:	7982      	ldrb	r2, [r0, #6]
    f532:	f44f 7300 	mov.w	r3, #512	; 0x200
  m_curPosition += m_vol->bytesPerCluster();
    f536:	6969      	ldr	r1, [r5, #20]
}
    f538:	4638      	mov	r0, r7
    f53a:	4093      	lsls	r3, r2
  m_curPosition += m_vol->bytesPerCluster();
    f53c:	fa11 f383 	uxtah	r3, r1, r3
    f540:	616b      	str	r3, [r5, #20]
}
    f542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f544:	001ffe00 	.word	0x001ffe00

0000f548 <FatFile::cacheDirEntry(unsigned char)>:
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    f548:	b510      	push	{r4, lr}
    f54a:	4604      	mov	r4, r0
    return m_cache.prepare(sector, options);
    f54c:	6880      	ldr	r0, [r0, #8]
    f54e:	460a      	mov	r2, r1
    f550:	3028      	adds	r0, #40	; 0x28
    f552:	69a1      	ldr	r1, [r4, #24]
    f554:	f004 fdbe 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f558:	b120      	cbz	r0, f564 <FatFile::cacheDirEntry(unsigned char)+0x1c>
  return dir + (m_dirIndex & 0XF);
    f55a:	88a3      	ldrh	r3, [r4, #4]
    f55c:	f003 030f 	and.w	r3, r3, #15
    f560:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
    f564:	bd10      	pop	{r4, pc}
    f566:	bf00      	nop

0000f568 <FatFile::close()>:
bool FatFile::close() {
    f568:	b510      	push	{r4, lr}
  if (!isOpen()) {
    f56a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::close() {
    f56c:	4604      	mov	r4, r0
  if (!isOpen()) {
    f56e:	b12b      	cbz	r3, f57c <FatFile::close()+0x14>
    f570:	f7ff ff3a 	bl	f3e8 <FatFile::sync() [clone .part.0]>
  m_attributes = FILE_ATTR_CLOSED;
    f574:	2300      	movs	r3, #0
    f576:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    f578:	70a3      	strb	r3, [r4, #2]
}
    f57a:	bd10      	pop	{r4, pc}
  m_attributes = FILE_ATTR_CLOSED;
    f57c:	2300      	movs	r3, #0
    return true;
    f57e:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_CLOSED;
    f580:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    f582:	70a3      	strb	r3, [r4, #2]
}
    f584:	bd10      	pop	{r4, pc}
    f586:	bf00      	nop

0000f588 <FatFile::dirEntry(DirFat_t*)>:
bool FatFile::dirEntry(DirFat_t* dst) {
    f588:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    f58a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::dirEntry(DirFat_t* dst) {
    f58c:	4605      	mov	r5, r0
    f58e:	460c      	mov	r4, r1
  if (!isOpen()) {
    f590:	b113      	cbz	r3, f598 <FatFile::dirEntry(DirFat_t*)+0x10>
    f592:	f7ff ff29 	bl	f3e8 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    f596:	b1f0      	cbz	r0, f5d6 <FatFile::dirEntry(DirFat_t*)+0x4e>
    f598:	68a8      	ldr	r0, [r5, #8]
    f59a:	2200      	movs	r2, #0
    f59c:	69a9      	ldr	r1, [r5, #24]
    f59e:	3028      	adds	r0, #40	; 0x28
    f5a0:	f004 fd98 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f5a4:	b1b8      	cbz	r0, f5d6 <FatFile::dirEntry(DirFat_t*)+0x4e>
  return dir + (m_dirIndex & 0XF);
    f5a6:	88aa      	ldrh	r2, [r5, #4]
    f5a8:	f002 020f 	and.w	r2, r2, #15
    f5ac:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    f5b0:	0152      	lsls	r2, r2, #5
  memcpy(dst, dir, sizeof(DirFat_t));
    f5b2:	685d      	ldr	r5, [r3, #4]
    f5b4:	5880      	ldr	r0, [r0, r2]
    f5b6:	6899      	ldr	r1, [r3, #8]
    f5b8:	68da      	ldr	r2, [r3, #12]
    f5ba:	6020      	str	r0, [r4, #0]
    f5bc:	6065      	str	r5, [r4, #4]
    f5be:	60a1      	str	r1, [r4, #8]
    f5c0:	60e2      	str	r2, [r4, #12]
    f5c2:	6918      	ldr	r0, [r3, #16]
    f5c4:	695d      	ldr	r5, [r3, #20]
    f5c6:	6999      	ldr	r1, [r3, #24]
    f5c8:	69da      	ldr	r2, [r3, #28]
    f5ca:	6120      	str	r0, [r4, #16]
  return true;
    f5cc:	2001      	movs	r0, #1
  memcpy(dst, dir, sizeof(DirFat_t));
    f5ce:	6165      	str	r5, [r4, #20]
    f5d0:	61a1      	str	r1, [r4, #24]
    f5d2:	61e2      	str	r2, [r4, #28]
}
    f5d4:	bd38      	pop	{r3, r4, r5, pc}
  return false;
    f5d6:	2000      	movs	r0, #0
}
    f5d8:	bd38      	pop	{r3, r4, r5, pc}
    f5da:	bf00      	nop

0000f5dc <FatFile::getCreateDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getCreateDateTime(uint16_t* pdate, uint16_t* ptime) {
    f5dc:	b530      	push	{r4, r5, lr}
    f5de:	b089      	sub	sp, #36	; 0x24
    f5e0:	460d      	mov	r5, r1
    f5e2:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    f5e4:	4669      	mov	r1, sp
    f5e6:	f7ff ffcf 	bl	f588 <FatFile::dirEntry(DirFat_t*)>
    f5ea:	b128      	cbz	r0, f5f8 <FatFile::getCreateDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.createDate);
    f5ec:	f8bd 2010 	ldrh.w	r2, [sp, #16]
  *ptime = getLe16(dir.createTime);
    f5f0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
  *pdate = getLe16(dir.createDate);
    f5f4:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.createTime);
    f5f6:	8023      	strh	r3, [r4, #0]
}
    f5f8:	b009      	add	sp, #36	; 0x24
    f5fa:	bd30      	pop	{r4, r5, pc}

0000f5fc <FatFile::getModifyDateTime(unsigned short*, unsigned short*)>:
bool FatFile::getModifyDateTime(uint16_t* pdate, uint16_t* ptime) {
    f5fc:	b530      	push	{r4, r5, lr}
    f5fe:	b089      	sub	sp, #36	; 0x24
    f600:	460d      	mov	r5, r1
    f602:	4614      	mov	r4, r2
  if (!dirEntry(&dir)) {
    f604:	4669      	mov	r1, sp
    f606:	f7ff ffbf 	bl	f588 <FatFile::dirEntry(DirFat_t*)>
    f60a:	b128      	cbz	r0, f618 <FatFile::getModifyDateTime(unsigned short*, unsigned short*)+0x1c>
  *pdate = getLe16(dir.modifyDate);
    f60c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
  *ptime = getLe16(dir.modifyTime);
    f610:	f8bd 3016 	ldrh.w	r3, [sp, #22]
  *pdate = getLe16(dir.modifyDate);
    f614:	802a      	strh	r2, [r5, #0]
  *ptime = getLe16(dir.modifyTime);
    f616:	8023      	strh	r3, [r4, #0]
}
    f618:	b009      	add	sp, #36	; 0x24
    f61a:	bd30      	pop	{r4, r5, pc}

0000f61c <FatFile::mkdir(FatFile*, FatLfn_t*)>:
  if (!parent->isDir()) {
    f61c:	780b      	ldrb	r3, [r1, #0]
    f61e:	f013 0f70 	tst.w	r3, #112	; 0x70
    f622:	d101      	bne.n	f628 <FatFile::mkdir(FatFile*, FatLfn_t*)+0xc>
}
    f624:	2000      	movs	r0, #0
    f626:	4770      	bx	lr
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    f628:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    f62a:	f640 2302 	movw	r3, #2562	; 0xa02
bool FatFile::mkdir(FatFile* parent, FatName_t* fname) {
    f62e:	b089      	sub	sp, #36	; 0x24
    f630:	460d      	mov	r5, r1
    f632:	4604      	mov	r4, r0
  if (!open(parent, fname, O_CREAT | O_EXCL | O_RDWR)) {
    f634:	f001 f8f0 	bl	10818 <FatFile::open(FatFile*, FatLfn_t*, int)>
    f638:	b138      	cbz	r0, f64a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  m_flags = FILE_FLAG_READ;
    f63a:	2201      	movs	r2, #1
  m_attributes = FILE_ATTR_SUBDIR;
    f63c:	2310      	movs	r3, #16
  if (!addDirCluster()) {
    f63e:	4620      	mov	r0, r4
  m_flags = FILE_FLAG_READ;
    f640:	70a2      	strb	r2, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    f642:	7023      	strb	r3, [r4, #0]
  if (!addDirCluster()) {
    f644:	f7ff ff44 	bl	f4d0 <FatFile::addDirCluster()>
    f648:	b910      	cbnz	r0, f650 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x34>
}
    f64a:	2000      	movs	r0, #0
    f64c:	b009      	add	sp, #36	; 0x24
    f64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_firstCluster = m_curCluster;
    f650:	6922      	ldr	r2, [r4, #16]
  if (!isOpen()) {
    f652:	7823      	ldrb	r3, [r4, #0]
  m_firstCluster = m_curCluster;
    f654:	6222      	str	r2, [r4, #32]
  if (!isOpen()) {
    f656:	b16b      	cbz	r3, f674 <FatFile::mkdir(FatFile*, FatLfn_t*)+0x58>
  if (pos == m_curPosition) {
    f658:	6963      	ldr	r3, [r4, #20]
    f65a:	b133      	cbz	r3, f66a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x4e>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    f65c:	78a3      	ldrb	r3, [r4, #2]
    m_curCluster = 0;
    f65e:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    f660:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    f664:	e9c4 2204 	strd	r2, r2, [r4, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    f668:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
    f66a:	4620      	mov	r0, r4
    f66c:	f7ff febc 	bl	f3e8 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
    f670:	2800      	cmp	r0, #0
    f672:	d0ea      	beq.n	f64a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    f674:	68a0      	ldr	r0, [r4, #8]
    f676:	2201      	movs	r2, #1
    f678:	69a1      	ldr	r1, [r4, #24]
    f67a:	3028      	adds	r0, #40	; 0x28
    f67c:	f004 fd2a 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f680:	2800      	cmp	r0, #0
    f682:	d0e2      	beq.n	f64a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  return dir + (m_dirIndex & 0XF);
    f684:	f8b4 c004 	ldrh.w	ip, [r4, #4]
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    f688:	2210      	movs	r2, #16
  return dir + (m_dirIndex & 0XF);
    f68a:	f00c 0c0f 	and.w	ip, ip, #15
    f68e:	ea4f 134c 	mov.w	r3, ip, lsl #5
    f692:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
  dir->attributes = FAT_ATTRIB_DIRECTORY;
    f696:	f88c 200b 	strb.w	r2, [ip, #11]
  memcpy(&dot, dir, sizeof(dot));
    f69a:	58c0      	ldr	r0, [r0, r3]
  sector = m_vol->clusterStartSector(m_firstCluster);
    f69c:	68a7      	ldr	r7, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    f69e:	6a23      	ldr	r3, [r4, #32]
    f6a0:	f897 e006 	ldrb.w	lr, [r7, #6]
    f6a4:	1e9e      	subs	r6, r3, #2
  memcpy(&dot, dir, sizeof(dot));
    f6a6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    f6aa:	f8dc 2008 	ldr.w	r2, [ip, #8]
    f6ae:	f8dc 300c 	ldr.w	r3, [ip, #12]
    f6b2:	fa06 f60e 	lsl.w	r6, r6, lr
    f6b6:	46ee      	mov	lr, sp
    f6b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    f6bc:	f8dc 0010 	ldr.w	r0, [ip, #16]
    f6c0:	f8dc 1014 	ldr.w	r1, [ip, #20]
    f6c4:	f8dc 2018 	ldr.w	r2, [ip, #24]
    f6c8:	f8dc 301c 	ldr.w	r3, [ip, #28]
    f6cc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    return m_cache.prepare(sector, options);
    f6d0:	697b      	ldr	r3, [r7, #20]
    f6d2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    f6d6:	2201      	movs	r2, #1
    f6d8:	18f1      	adds	r1, r6, r3
    dot.name[i] = ' ';
    f6da:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
    f6de:	f8cd 3001 	str.w	r3, [sp, #1]
    f6e2:	f8cd 3005 	str.w	r3, [sp, #5]
    f6e6:	f8ad 3009 	strh.w	r3, [sp, #9]
    f6ea:	f004 fcf3 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    f6ee:	4684      	mov	ip, r0
    f6f0:	2800      	cmp	r0, #0
    f6f2:	d0aa      	beq.n	f64a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
  memcpy(&dir[0], &dot, sizeof(dot));
    f6f4:	272e      	movs	r7, #46	; 0x2e
    f6f6:	46ee      	mov	lr, sp
    f6f8:	f88d 7000 	strb.w	r7, [sp]
  memcpy(&dir[1], &dot, sizeof(dot));
    f6fc:	4676      	mov	r6, lr
  memcpy(&dir[0], &dot, sizeof(dot));
    f6fe:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f702:	f8cc 0000 	str.w	r0, [ip]
    f706:	f8cc 1004 	str.w	r1, [ip, #4]
    f70a:	f8cc 2008 	str.w	r2, [ip, #8]
    f70e:	f8cc 300c 	str.w	r3, [ip, #12]
  dot.name[1] = '.';
    f712:	f88d 7001 	strb.w	r7, [sp, #1]
  memcpy(&dir[0], &dot, sizeof(dot));
    f716:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f71a:	f8cc 0010 	str.w	r0, [ip, #16]
    f71e:	f8cc 1014 	str.w	r1, [ip, #20]
    f722:	f8cc 2018 	str.w	r2, [ip, #24]
    f726:	f8cc 301c 	str.w	r3, [ip, #28]
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    f72a:	6a2b      	ldr	r3, [r5, #32]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    f72c:	0c1a      	lsrs	r2, r3, #16
  setLe16(dot.firstClusterLow, parent->m_firstCluster & 0XFFFF);
    f72e:	f8ad 301a 	strh.w	r3, [sp, #26]
  setLe16(dot.firstClusterHigh, parent->m_firstCluster >> 16);
    f732:	f8ad 2014 	strh.w	r2, [sp, #20]
  memcpy(&dir[1], &dot, sizeof(dot));
    f736:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    f738:	f8cc 0020 	str.w	r0, [ip, #32]
    f73c:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
    f740:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
    f744:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
    f748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    f74a:	f8cc 0030 	str.w	r0, [ip, #48]	; 0x30
    f74e:	f8cc 1034 	str.w	r1, [ip, #52]	; 0x34
    f752:	f8cc 2038 	str.w	r2, [ip, #56]	; 0x38
    f756:	f8cc 303c 	str.w	r3, [ip, #60]	; 0x3c
  return m_vol->cacheSync();
    f75a:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    f75c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    f760:	f004 fc8c 	bl	1407c <FsCache::sync()>
    f764:	2800      	cmp	r0, #0
    f766:	f43f af70 	beq.w	f64a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    f76a:	f504 700e 	add.w	r0, r4, #568	; 0x238
    f76e:	f004 fc85 	bl	1407c <FsCache::sync()>
    f772:	2800      	cmp	r0, #0
    f774:	f43f af69 	beq.w	f64a <FatFile::mkdir(FatFile*, FatLfn_t*)+0x2e>
    f778:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    f77a:	6803      	ldr	r3, [r0, #0]
    f77c:	6a1b      	ldr	r3, [r3, #32]
}
    f77e:	b009      	add	sp, #36	; 0x24
    f780:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f784:	4718      	bx	r3
    f786:	bf00      	nop

0000f788 <FatFile::mkdir(FatFile*, char const*, bool)>:
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    f788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 */
/**
 * \class FsName
 * \brief Handle UTF-8 file names.
 */
class FsName {
    f78c:	2600      	movs	r6, #0
    f78e:	b094      	sub	sp, #80	; 0x50
    f790:	4698      	mov	r8, r3
  if (isOpen() || !parent->isDir()) {
    f792:	7803      	ldrb	r3, [r0, #0]
bool FatFile::mkdir(FatFile* parent, const char* path, bool pFlag) {
    f794:	9201      	str	r2, [sp, #4]
    f796:	f8ad 6014 	strh.w	r6, [sp, #20]
    f79a:	960b      	str	r6, [sp, #44]	; 0x2c
  if (isOpen() || !parent->isDir()) {
    f79c:	2b00      	cmp	r3, #0
    f79e:	d141      	bne.n	f824 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    f7a0:	780b      	ldrb	r3, [r1, #0]
    f7a2:	460d      	mov	r5, r1
    f7a4:	f013 0f70 	tst.w	r3, #112	; 0x70
    f7a8:	d03c      	beq.n	f824 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
  if (isDirSeparator(*path)) {
    f7aa:	7813      	ldrb	r3, [r2, #0]
    f7ac:	4604      	mov	r4, r0
    f7ae:	4616      	mov	r6, r2
    f7b0:	2b2f      	cmp	r3, #47	; 0x2f
    f7b2:	d03b      	beq.n	f82c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!open(parent, &fname, O_RDONLY)) {
    f7b4:	2700      	movs	r7, #0
    f7b6:	e028      	b.n	f80a <FatFile::mkdir(FatFile*, char const*, bool)+0x82>
    if (!*path) {
    f7b8:	9e01      	ldr	r6, [sp, #4]
    f7ba:	7836      	ldrb	r6, [r6, #0]
    f7bc:	2e00      	cmp	r6, #0
    f7be:	d050      	beq.n	f862 <FatFile::mkdir(FatFile*, char const*, bool)+0xda>
    if (!open(parent, &fname, O_RDONLY)) {
    f7c0:	f001 f82a 	bl	10818 <FatFile::open(FatFile*, FatLfn_t*, int)>
    f7c4:	4603      	mov	r3, r0
      if (!pFlag || !mkdir(parent, &fname)) {
    f7c6:	aa02      	add	r2, sp, #8
    f7c8:	4629      	mov	r1, r5
    f7ca:	4620      	mov	r0, r4
    if (!open(parent, &fname, O_RDONLY)) {
    f7cc:	b92b      	cbnz	r3, f7da <FatFile::mkdir(FatFile*, char const*, bool)+0x52>
      if (!pFlag || !mkdir(parent, &fname)) {
    f7ce:	f1b8 0f00 	cmp.w	r8, #0
    f7d2:	d027      	beq.n	f824 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    f7d4:	f7ff ff22 	bl	f61c <FatFile::mkdir(FatFile*, FatLfn_t*)>
    f7d8:	b320      	cbz	r0, f824 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    tmpDir = *this;
    f7da:	46a6      	mov	lr, r4
    f7dc:	f10d 0c2c 	add.w	ip, sp, #44	; 0x2c
    f7e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f7e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f7e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f7ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f7f0:	f8de 5000 	ldr.w	r5, [lr]
    f7f4:	4620      	mov	r0, r4
  if (!isOpen()) {
    f7f6:	7823      	ldrb	r3, [r4, #0]
    tmpDir = *this;
    f7f8:	f8cc 5000 	str.w	r5, [ip]
  if (!isOpen()) {
    f7fc:	b10b      	cbz	r3, f802 <FatFile::mkdir(FatFile*, char const*, bool)+0x7a>
    f7fe:	f7ff fdf3 	bl	f3e8 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    f802:	9e01      	ldr	r6, [sp, #4]
    parent = &tmpDir;
    f804:	ad0b      	add	r5, sp, #44	; 0x2c
  m_attributes = FILE_ATTR_CLOSED;
    f806:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    f808:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    f80a:	4631      	mov	r1, r6
    f80c:	ab01      	add	r3, sp, #4
    f80e:	aa02      	add	r2, sp, #8
    f810:	4620      	mov	r0, r4
    f812:	f001 f94d 	bl	10ab0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    f816:	4606      	mov	r6, r0
    if (!open(parent, &fname, O_RDONLY)) {
    f818:	aa02      	add	r2, sp, #8
    f81a:	4629      	mov	r1, r5
    f81c:	2300      	movs	r3, #0
    f81e:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    f820:	2e00      	cmp	r6, #0
    f822:	d1c9      	bne.n	f7b8 <FatFile::mkdir(FatFile*, char const*, bool)+0x30>
  switch (vol->fatType()) {
    f824:	2000      	movs	r0, #0
}
    f826:	b014      	add	sp, #80	; 0x50
    f828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    f82c:	3601      	adds	r6, #1
    f82e:	9601      	str	r6, [sp, #4]
    while (isDirSeparator(*path)) {
    f830:	7833      	ldrb	r3, [r6, #0]
    f832:	2b2f      	cmp	r3, #47	; 0x2f
    f834:	d0fa      	beq.n	f82c <FatFile::mkdir(FatFile*, char const*, bool)+0xa4>
    if (!tmpDir.openRoot(parent->m_vol)) {
    f836:	68ad      	ldr	r5, [r5, #8]
  memset(this, 0, sizeof(FatFile));
    f838:	2224      	movs	r2, #36	; 0x24
    f83a:	2100      	movs	r1, #0
    f83c:	a80b      	add	r0, sp, #44	; 0x2c
    f83e:	f012 fe4f 	bl	224e0 <memset>
  m_vol = vol;
    f842:	950d      	str	r5, [sp, #52]	; 0x34
    return m_fatType;
    f844:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    f846:	2b10      	cmp	r3, #16
    f848:	d003      	beq.n	f852 <FatFile::mkdir(FatFile*, char const*, bool)+0xca>
    f84a:	2b20      	cmp	r3, #32
    f84c:	d00f      	beq.n	f86e <FatFile::mkdir(FatFile*, char const*, bool)+0xe6>
    f84e:	2b0c      	cmp	r3, #12
    f850:	d1e8      	bne.n	f824 <FatFile::mkdir(FatFile*, char const*, bool)+0x9c>
    f852:	2320      	movs	r3, #32
    m_attributes = FILE_ATTR_ROOT_FIXED;
    f854:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  m_flags = FILE_FLAG_READ;
    f858:	2301      	movs	r3, #1
    parent = &tmpDir;
    f85a:	ad0b      	add	r5, sp, #44	; 0x2c
  m_flags = FILE_FLAG_READ;
    f85c:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  return true;
    f860:	e7a8      	b.n	f7b4 <FatFile::mkdir(FatFile*, char const*, bool)+0x2c>
  return mkdir(parent, &fname);
    f862:	aa02      	add	r2, sp, #8
    f864:	f7ff feda 	bl	f61c <FatFile::mkdir(FatFile*, FatLfn_t*)>
}
    f868:	b014      	add	sp, #80	; 0x50
    f86a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (vol->fatType()) {
    f86e:	2340      	movs	r3, #64	; 0x40
    f870:	e7f0      	b.n	f854 <FatFile::mkdir(FatFile*, char const*, bool)+0xcc>
    f872:	bf00      	nop

0000f874 <FatFile::open(FatFile*, char const*, int)>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    f874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f878:	2500      	movs	r5, #0
    f87a:	b094      	sub	sp, #80	; 0x50
    f87c:	4698      	mov	r8, r3
  if (isOpen() || !dirFile->isDir()) {
    f87e:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    f880:	9201      	str	r2, [sp, #4]
    f882:	9502      	str	r5, [sp, #8]
    f884:	f8ad 5038 	strh.w	r5, [sp, #56]	; 0x38
  if (isOpen() || !dirFile->isDir()) {
    f888:	2b00      	cmp	r3, #0
    f88a:	d137      	bne.n	f8fc <FatFile::open(FatFile*, char const*, int)+0x88>
    f88c:	780b      	ldrb	r3, [r1, #0]
    f88e:	460e      	mov	r6, r1
    f890:	f013 0f70 	tst.w	r3, #112	; 0x70
    f894:	d032      	beq.n	f8fc <FatFile::open(FatFile*, char const*, int)+0x88>
  if (isDirSeparator(*path)) {
    f896:	7813      	ldrb	r3, [r2, #0]
    f898:	4604      	mov	r4, r0
    f89a:	4615      	mov	r5, r2
    f89c:	2b2f      	cmp	r3, #47	; 0x2f
    f89e:	d031      	beq.n	f904 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (!open(dirFile, &fname, O_RDONLY)) {
    f8a0:	2700      	movs	r7, #0
    f8a2:	e01e      	b.n	f8e2 <FatFile::open(FatFile*, char const*, int)+0x6e>
    if (*path == 0) {
    f8a4:	9d01      	ldr	r5, [sp, #4]
    f8a6:	782d      	ldrb	r5, [r5, #0]
    f8a8:	2d00      	cmp	r5, #0
    f8aa:	d040      	beq.n	f92e <FatFile::open(FatFile*, char const*, int)+0xba>
    if (!open(dirFile, &fname, O_RDONLY)) {
    f8ac:	f000 ffb4 	bl	10818 <FatFile::open(FatFile*, FatLfn_t*, int)>
    tmpDir = *this;
    f8b0:	46a6      	mov	lr, r4
    f8b2:	f10d 0c08 	add.w	ip, sp, #8
    if (!open(dirFile, &fname, O_RDONLY)) {
    f8b6:	b308      	cbz	r0, f8fc <FatFile::open(FatFile*, char const*, int)+0x88>
    dirFile = &tmpDir;
    f8b8:	4666      	mov	r6, ip
  if (!isOpen()) {
    f8ba:	7825      	ldrb	r5, [r4, #0]
    tmpDir = *this;
    f8bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f8c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f8c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    f8c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    f8cc:	f8de 3000 	ldr.w	r3, [lr]
    f8d0:	4620      	mov	r0, r4
    f8d2:	f8cc 3000 	str.w	r3, [ip]
  if (!isOpen()) {
    f8d6:	b10d      	cbz	r5, f8dc <FatFile::open(FatFile*, char const*, int)+0x68>
    f8d8:	f7ff fd86 	bl	f3e8 <FatFile::sync() [clone .part.0]>
    if (!parsePathName(path, &fname, &path)) {
    f8dc:	9d01      	ldr	r5, [sp, #4]
  m_attributes = FILE_ATTR_CLOSED;
    f8de:	7027      	strb	r7, [r4, #0]
  m_flags = 0;
    f8e0:	70a7      	strb	r7, [r4, #2]
    if (!parsePathName(path, &fname, &path)) {
    f8e2:	4629      	mov	r1, r5
    f8e4:	ab01      	add	r3, sp, #4
    f8e6:	aa0b      	add	r2, sp, #44	; 0x2c
    f8e8:	4620      	mov	r0, r4
    f8ea:	f001 f8e1 	bl	10ab0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>
    f8ee:	4605      	mov	r5, r0
    if (!open(dirFile, &fname, O_RDONLY)) {
    f8f0:	aa0b      	add	r2, sp, #44	; 0x2c
    f8f2:	4631      	mov	r1, r6
    f8f4:	2300      	movs	r3, #0
    f8f6:	4620      	mov	r0, r4
    if (!parsePathName(path, &fname, &path)) {
    f8f8:	2d00      	cmp	r5, #0
    f8fa:	d1d3      	bne.n	f8a4 <FatFile::open(FatFile*, char const*, int)+0x30>
  return false;
    f8fc:	2000      	movs	r0, #0
}
    f8fe:	b014      	add	sp, #80	; 0x50
    f900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      path++;
    f904:	3501      	adds	r5, #1
    f906:	9501      	str	r5, [sp, #4]
    while (isDirSeparator(*path)) {
    f908:	7829      	ldrb	r1, [r5, #0]
    f90a:	292f      	cmp	r1, #47	; 0x2f
    f90c:	d0fa      	beq.n	f904 <FatFile::open(FatFile*, char const*, int)+0x90>
    if (*path == 0) {
    f90e:	b9a9      	cbnz	r1, f93c <FatFile::open(FatFile*, char const*, int)+0xc8>
      return openRoot(dirFile->m_vol);
    f910:	68b5      	ldr	r5, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    f912:	2224      	movs	r2, #36	; 0x24
    f914:	4620      	mov	r0, r4
    f916:	f012 fde3 	bl	224e0 <memset>
  m_vol = vol;
    f91a:	60a5      	str	r5, [r4, #8]
    f91c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    f91e:	2b10      	cmp	r3, #16
    f920:	d003      	beq.n	f92a <FatFile::open(FatFile*, char const*, int)+0xb6>
    f922:	2b20      	cmp	r3, #32
    f924:	d022      	beq.n	f96c <FatFile::open(FatFile*, char const*, int)+0xf8>
    f926:	2b0c      	cmp	r3, #12
    f928:	d1e8      	bne.n	f8fc <FatFile::open(FatFile*, char const*, int)+0x88>
    f92a:	2220      	movs	r2, #32
    f92c:	e01f      	b.n	f96e <FatFile::open(FatFile*, char const*, int)+0xfa>
  return open(dirFile, &fname, oflag);
    f92e:	4643      	mov	r3, r8
    f930:	aa0b      	add	r2, sp, #44	; 0x2c
    f932:	f000 ff71 	bl	10818 <FatFile::open(FatFile*, FatLfn_t*, int)>
}
    f936:	b014      	add	sp, #80	; 0x50
    f938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    f93c:	68b6      	ldr	r6, [r6, #8]
  memset(this, 0, sizeof(FatFile));
    f93e:	2224      	movs	r2, #36	; 0x24
    f940:	2100      	movs	r1, #0
    f942:	a802      	add	r0, sp, #8
    f944:	f012 fdcc 	bl	224e0 <memset>
  m_vol = vol;
    f948:	9604      	str	r6, [sp, #16]
    f94a:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    f94c:	2b10      	cmp	r3, #16
    f94e:	d003      	beq.n	f958 <FatFile::open(FatFile*, char const*, int)+0xe4>
    f950:	2b20      	cmp	r3, #32
    f952:	d003      	beq.n	f95c <FatFile::open(FatFile*, char const*, int)+0xe8>
    f954:	2b0c      	cmp	r3, #12
    f956:	d1d1      	bne.n	f8fc <FatFile::open(FatFile*, char const*, int)+0x88>
    f958:	2320      	movs	r3, #32
    f95a:	e000      	b.n	f95e <FatFile::open(FatFile*, char const*, int)+0xea>
    f95c:	2340      	movs	r3, #64	; 0x40
    m_attributes = FILE_ATTR_ROOT_FIXED;
    f95e:	f88d 3008 	strb.w	r3, [sp, #8]
  m_flags = FILE_FLAG_READ;
    f962:	2301      	movs	r3, #1
    dirFile = &tmpDir;
    f964:	ae02      	add	r6, sp, #8
  m_flags = FILE_FLAG_READ;
    f966:	f88d 300a 	strb.w	r3, [sp, #10]
  return true;
    f96a:	e799      	b.n	f8a0 <FatFile::open(FatFile*, char const*, int)+0x2c>
  switch (vol->fatType()) {
    f96c:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    f96e:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    f970:	7022      	strb	r2, [r4, #0]
  return true;
    f972:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    f974:	70a3      	strb	r3, [r4, #2]
  return true;
    f976:	e7c2      	b.n	f8fe <FatFile::open(FatFile*, char const*, int)+0x8a>

0000f978 <FatFile::open(FatVolume*, char const*, int)>:
  return vol && open(vol->vwd(), path, oflag);
    f978:	b119      	cbz	r1, f982 <FatFile::open(FatVolume*, char const*, int)+0xa>
    f97a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    f97e:	f7ff bf79 	b.w	f874 <FatFile::open(FatFile*, char const*, int)>
}
    f982:	4608      	mov	r0, r1
    f984:	4770      	bx	lr
    f986:	bf00      	nop

0000f988 <FatFile::openCluster(FatFile*)>:
  if (file->m_dirCluster == 0) {
    f988:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
    f98a:	b570      	push	{r4, r5, r6, lr}
    f98c:	460d      	mov	r5, r1
    f98e:	4604      	mov	r4, r0
  if (file->m_dirCluster == 0) {
    f990:	b993      	cbnz	r3, f9b8 <FatFile::openCluster(FatFile*)+0x30>
  if (isOpen()) {
    f992:	7806      	ldrb	r6, [r0, #0]
    f994:	b10e      	cbz	r6, f99a <FatFile::openCluster(FatFile*)+0x12>
  return false;
    f996:	4618      	mov	r0, r3
}
    f998:	bd70      	pop	{r4, r5, r6, pc}
    return openRoot(file->m_vol);
    f99a:	688d      	ldr	r5, [r1, #8]
  memset(this, 0, sizeof(FatFile));
    f99c:	2224      	movs	r2, #36	; 0x24
    f99e:	4631      	mov	r1, r6
    f9a0:	f012 fd9e 	bl	224e0 <memset>
  m_vol = vol;
    f9a4:	60a5      	str	r5, [r4, #8]
    f9a6:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
    f9a8:	2b10      	cmp	r3, #16
    f9aa:	d018      	beq.n	f9de <FatFile::openCluster(FatFile*)+0x56>
    f9ac:	2b20      	cmp	r3, #32
    f9ae:	d010      	beq.n	f9d2 <FatFile::openCluster(FatFile*)+0x4a>
    f9b0:	2b0c      	cmp	r3, #12
    f9b2:	d014      	beq.n	f9de <FatFile::openCluster(FatFile*)+0x56>
    f9b4:	4630      	mov	r0, r6
}
    f9b6:	bd70      	pop	{r4, r5, r6, pc}
  memset(this, 0, sizeof(FatFile));
    f9b8:	2224      	movs	r2, #36	; 0x24
    f9ba:	2100      	movs	r1, #0
    f9bc:	f012 fd90 	bl	224e0 <memset>
  m_flags = FILE_FLAG_READ;
    f9c0:	2001      	movs	r0, #1
  m_attributes = FILE_ATTR_SUBDIR;
    f9c2:	2310      	movs	r3, #16
  m_flags = FILE_FLAG_READ;
    f9c4:	70a0      	strb	r0, [r4, #2]
  m_attributes = FILE_ATTR_SUBDIR;
    f9c6:	7023      	strb	r3, [r4, #0]
  m_firstCluster = file->m_dirCluster;
    f9c8:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
  m_vol = file->m_vol;
    f9cc:	60a2      	str	r2, [r4, #8]
  m_firstCluster = file->m_dirCluster;
    f9ce:	6223      	str	r3, [r4, #32]
}
    f9d0:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    f9d2:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    f9d4:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    f9d6:	7022      	strb	r2, [r4, #0]
  return true;
    f9d8:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    f9da:	70a3      	strb	r3, [r4, #2]
}
    f9dc:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    f9de:	2220      	movs	r2, #32
    f9e0:	e7f8      	b.n	f9d4 <FatFile::openCluster(FatFile*)+0x4c>
    f9e2:	bf00      	nop

0000f9e4 <FatFile::openRoot(FatVolume*)>:
bool FatFile::openRoot(FatVolume* vol) {
    f9e4:	b570      	push	{r4, r5, r6, lr}
  if (isOpen()) {
    f9e6:	7805      	ldrb	r5, [r0, #0]
    f9e8:	b10d      	cbz	r5, f9ee <FatFile::openRoot(FatVolume*)+0xa>
  return false;
    f9ea:	2000      	movs	r0, #0
}
    f9ec:	bd70      	pop	{r4, r5, r6, pc}
    f9ee:	460e      	mov	r6, r1
    f9f0:	4604      	mov	r4, r0
  memset(this, 0, sizeof(FatFile));
    f9f2:	2224      	movs	r2, #36	; 0x24
    f9f4:	4629      	mov	r1, r5
    f9f6:	f012 fd73 	bl	224e0 <memset>
  m_vol = vol;
    f9fa:	60a6      	str	r6, [r4, #8]
    f9fc:	79f3      	ldrb	r3, [r6, #7]
  switch (vol->fatType()) {
    f9fe:	2b10      	cmp	r3, #16
    fa00:	d00b      	beq.n	fa1a <FatFile::openRoot(FatVolume*)+0x36>
    fa02:	2b20      	cmp	r3, #32
    fa04:	d003      	beq.n	fa0e <FatFile::openRoot(FatVolume*)+0x2a>
    fa06:	2b0c      	cmp	r3, #12
    fa08:	d007      	beq.n	fa1a <FatFile::openRoot(FatVolume*)+0x36>
    fa0a:	4628      	mov	r0, r5
}
    fa0c:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    fa0e:	2240      	movs	r2, #64	; 0x40
  m_flags = FILE_FLAG_READ;
    fa10:	2301      	movs	r3, #1
    m_attributes = FILE_ATTR_ROOT_FIXED;
    fa12:	7022      	strb	r2, [r4, #0]
  return true;
    fa14:	4618      	mov	r0, r3
  m_flags = FILE_FLAG_READ;
    fa16:	70a3      	strb	r3, [r4, #2]
}
    fa18:	bd70      	pop	{r4, r5, r6, pc}
  switch (vol->fatType()) {
    fa1a:	2220      	movs	r2, #32
    fa1c:	e7f8      	b.n	fa10 <FatFile::openRoot(FatVolume*)+0x2c>
    fa1e:	bf00      	nop

0000fa20 <FatFile::read(void*, unsigned int)>:
int FatFile::read(void* buf, size_t nbyte) {
    fa20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fa24:	ed2d 8b02 	vpush	{d8}
  bool isReadable() const {return m_flags & FILE_FLAG_READ;}
    fa28:	7883      	ldrb	r3, [r0, #2]
    fa2a:	b083      	sub	sp, #12
    fa2c:	4605      	mov	r5, r0
  if (!isReadable()) {
    fa2e:	07df      	lsls	r7, r3, #31
    fa30:	f140 808c 	bpl.w	fb4c <FatFile::read(void*, unsigned int)+0x12c>
  bool isFile() const {return m_attributes & FILE_ATTR_FILE;}
    fa34:	4688      	mov	r8, r1
    fa36:	7801      	ldrb	r1, [r0, #0]
    fa38:	4692      	mov	sl, r2
  if (isFile()) {
    fa3a:	070e      	lsls	r6, r1, #28
    fa3c:	f100 8091 	bmi.w	fb62 <FatFile::read(void*, unsigned int)+0x142>
  } else if (isRootFixed()) {
    fa40:	068c      	lsls	r4, r1, #26
    fa42:	d508      	bpl.n	fa56 <FatFile::read(void*, unsigned int)+0x36>
      FS_DIR_SIZE*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    fa44:	6883      	ldr	r3, [r0, #8]
    fa46:	895a      	ldrh	r2, [r3, #10]
    fa48:	6943      	ldr	r3, [r0, #20]
    uint16_t tmp16 =
    fa4a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
    fa4e:	b29b      	uxth	r3, r3
    fa50:	459a      	cmp	sl, r3
    fa52:	bf28      	it	cs
    fa54:	469a      	movcs	sl, r3
  while (toRead) {
    fa56:	f1ba 0f00 	cmp.w	sl, #0
    fa5a:	f000 80af 	beq.w	fbbc <FatFile::read(void*, unsigned int)+0x19c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    fa5e:	696a      	ldr	r2, [r5, #20]
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    fa60:	f105 0310 	add.w	r3, r5, #16
    if (isRootFixed()) {
    fa64:	0688      	lsls	r0, r1, #26
    uint32_t tmp32 = m_fileSize - m_curPosition;
    fa66:	4656      	mov	r6, sl
  uint8_t sectorOfCluster = 0;
    fa68:	f04f 0900 	mov.w	r9, #0
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    fa6c:	ee08 3a10 	vmov	s16, r3
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    fa70:	68af      	ldr	r7, [r5, #8]
    fa72:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    if (isRootFixed()) {
    fa76:	d53d      	bpl.n	faf4 <FatFile::read(void*, unsigned int)+0xd4>
      sector = m_vol->rootDirStart()
    fa78:	6a39      	ldr	r1, [r7, #32]
    fa7a:	eb01 2152 	add.w	r1, r1, r2, lsr #9
        || sector == m_vol->cacheSectorNumber()) {
    fa7e:	f1bb 0f00 	cmp.w	fp, #0
    fa82:	d151      	bne.n	fb28 <FatFile::read(void*, unsigned int)+0x108>
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    fa84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    fa88:	d34e      	bcc.n	fb28 <FatFile::read(void*, unsigned int)+0x108>
    return m_sector;
    fa8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        || sector == m_vol->cacheSectorNumber()) {
    fa8c:	4291      	cmp	r1, r2
    fa8e:	d04b      	beq.n	fb28 <FatFile::read(void*, unsigned int)+0x108>
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    fa90:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    fa94:	f0c0 8082 	bcc.w	fb9c <FatFile::read(void*, unsigned int)+0x17c>
      if (!isRootFixed()) {
    fa98:	7828      	ldrb	r0, [r5, #0]
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    fa9a:	0a73      	lsrs	r3, r6, #9
      if (!isRootFixed()) {
    fa9c:	0680      	lsls	r0, r0, #26
    fa9e:	d405      	bmi.n	faac <FatFile::read(void*, unsigned int)+0x8c>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    faa0:	7938      	ldrb	r0, [r7, #4]
    faa2:	eba0 0009 	sub.w	r0, r0, r9
    faa6:	4283      	cmp	r3, r0
    faa8:	bf28      	it	cs
    faaa:	4603      	movcs	r3, r0
    return sector <= m_sector && m_sector < (sector + count);
    faac:	4291      	cmp	r1, r2
      n = ns << m_vol->bytesPerSectorShift();
    faae:	ea4f 2443 	mov.w	r4, r3, lsl #9
    fab2:	d80c      	bhi.n	face <FatFile::read(void*, unsigned int)+0xae>
    fab4:	18c8      	adds	r0, r1, r3
    fab6:	4282      	cmp	r2, r0
    fab8:	d209      	bcs.n	face <FatFile::read(void*, unsigned int)+0xae>
    if (isCached(sector, count) && !sync()) {
    faba:	f107 0028 	add.w	r0, r7, #40	; 0x28
    fabe:	e9cd 1300 	strd	r1, r3, [sp]
    fac2:	f004 fadb 	bl	1407c <FsCache::sync()>
    fac6:	e9dd 1300 	ldrd	r1, r3, [sp]
    faca:	2800      	cmp	r0, #0
    facc:	d03e      	beq.n	fb4c <FatFile::read(void*, unsigned int)+0x12c>
    return m_blockDev->readSectors(sector, dst, count);
    face:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fad0:	6802      	ldr	r2, [r0, #0]
    fad2:	6957      	ldr	r7, [r2, #20]
    fad4:	4642      	mov	r2, r8
    fad6:	47b8      	blx	r7
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    fad8:	2800      	cmp	r0, #0
    fada:	d037      	beq.n	fb4c <FatFile::read(void*, unsigned int)+0x12c>
    m_curPosition += n;
    fadc:	696a      	ldr	r2, [r5, #20]
  while (toRead) {
    fade:	1b36      	subs	r6, r6, r4
    dst += n;
    fae0:	44a0      	add	r8, r4
    m_curPosition += n;
    fae2:	4422      	add	r2, r4
    fae4:	616a      	str	r2, [r5, #20]
  while (toRead) {
    fae6:	d069      	beq.n	fbbc <FatFile::read(void*, unsigned int)+0x19c>
  bool isRootFixed() const {return m_attributes & FILE_ATTR_ROOT_FIXED;}
    fae8:	7829      	ldrb	r1, [r5, #0]
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    faea:	f3c2 0b08 	ubfx	fp, r2, #0, #9
    faee:	68af      	ldr	r7, [r5, #8]
    if (isRootFixed()) {
    faf0:	0688      	lsls	r0, r1, #26
    faf2:	d4c1      	bmi.n	fa78 <FatFile::read(void*, unsigned int)+0x58>
    return (position >> 9) & m_clusterSectorMask;
    faf4:	f897 9005 	ldrb.w	r9, [r7, #5]
    faf8:	ea09 2952 	and.w	r9, r9, r2, lsr #9
      if (offset == 0 && sectorOfCluster == 0) {
    fafc:	f1bb 0f00 	cmp.w	fp, #0
    fb00:	d136      	bne.n	fb70 <FatFile::read(void*, unsigned int)+0x150>
    fb02:	f1b9 0f00 	cmp.w	r9, #0
    fb06:	d133      	bne.n	fb70 <FatFile::read(void*, unsigned int)+0x150>
        if (m_curPosition == 0) {
    fb08:	2a00      	cmp	r2, #0
    fb0a:	d133      	bne.n	fb74 <FatFile::read(void*, unsigned int)+0x154>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    fb0c:	064a      	lsls	r2, r1, #25
    return m_rootDirStart;
    fb0e:	bf4c      	ite	mi
    fb10:	6a3a      	ldrmi	r2, [r7, #32]
    fb12:	6a2a      	ldrpl	r2, [r5, #32]
          m_curCluster++;
    fb14:	612a      	str	r2, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fb16:	3a02      	subs	r2, #2
    fb18:	79b8      	ldrb	r0, [r7, #6]
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    fb1a:	6979      	ldr	r1, [r7, #20]
    fb1c:	4082      	lsls	r2, r0
    fb1e:	4449      	add	r1, r9
    fb20:	4411      	add	r1, r2
        || sector == m_vol->cacheSectorNumber()) {
    fb22:	f1bb 0f00 	cmp.w	fp, #0
    fb26:	d0ad      	beq.n	fa84 <FatFile::read(void*, unsigned int)+0x64>
      n = m_vol->bytesPerSector() - offset;
    fb28:	f5cb 7400 	rsb	r4, fp, #512	; 0x200
    return m_cache.prepare(sector, options);
    fb2c:	2200      	movs	r2, #0
    fb2e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    fb32:	42b4      	cmp	r4, r6
    fb34:	bf28      	it	cs
    fb36:	4634      	movcs	r4, r6
    fb38:	f004 facc 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
    fb3c:	b130      	cbz	r0, fb4c <FatFile::read(void*, unsigned int)+0x12c>
      memcpy(dst, src, n);
    fb3e:	eb00 010b 	add.w	r1, r0, fp
    fb42:	4622      	mov	r2, r4
    fb44:	4640      	mov	r0, r8
    fb46:	f006 fd29 	bl	1659c <memcpy>
    fb4a:	e7c7      	b.n	fadc <FatFile::read(void*, unsigned int)+0xbc>
  m_error |= READ_ERROR;
    fb4c:	786b      	ldrb	r3, [r5, #1]
  return -1;
    fb4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  m_error |= READ_ERROR;
    fb52:	f043 0302 	orr.w	r3, r3, #2
    fb56:	706b      	strb	r3, [r5, #1]
}
    fb58:	b003      	add	sp, #12
    fb5a:	ecbd 8b02 	vpop	{d8}
    fb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t tmp32 = m_fileSize - m_curPosition;
    fb62:	69c3      	ldr	r3, [r0, #28]
    fb64:	6942      	ldr	r2, [r0, #20]
    fb66:	1a9b      	subs	r3, r3, r2
    fb68:	459a      	cmp	sl, r3
    fb6a:	bf28      	it	cs
    fb6c:	469a      	movcs	sl, r3
    fb6e:	e772      	b.n	fa56 <FatFile::read(void*, unsigned int)+0x36>
          m_curCluster++;
    fb70:	692a      	ldr	r2, [r5, #16]
    fb72:	e7d0      	b.n	fb16 <FatFile::read(void*, unsigned int)+0xf6>
        } else if (isFile() && isContiguous()) {
    fb74:	070b      	lsls	r3, r1, #28
    fb76:	d505      	bpl.n	fb84 <FatFile::read(void*, unsigned int)+0x164>
    fb78:	78aa      	ldrb	r2, [r5, #2]
    fb7a:	0654      	lsls	r4, r2, #25
    fb7c:	d502      	bpl.n	fb84 <FatFile::read(void*, unsigned int)+0x164>
          m_curCluster++;
    fb7e:	692a      	ldr	r2, [r5, #16]
    fb80:	3201      	adds	r2, #1
    fb82:	e7c7      	b.n	fb14 <FatFile::read(void*, unsigned int)+0xf4>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    fb84:	ee18 2a10 	vmov	r2, s16
    fb88:	4638      	mov	r0, r7
    fb8a:	6929      	ldr	r1, [r5, #16]
    fb8c:	f001 fdfe 	bl	1178c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    fb90:	2800      	cmp	r0, #0
    fb92:	dbdb      	blt.n	fb4c <FatFile::read(void*, unsigned int)+0x12c>
          if (fg == 0) {
    fb94:	d00c      	beq.n	fbb0 <FatFile::read(void*, unsigned int)+0x190>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    fb96:	68af      	ldr	r7, [r5, #8]
    fb98:	692a      	ldr	r2, [r5, #16]
    fb9a:	e7bc      	b.n	fb16 <FatFile::read(void*, unsigned int)+0xf6>
    return m_blockDev->readSector(sector, dst);
    fb9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    fb9e:	4642      	mov	r2, r8
    fba0:	6803      	ldr	r3, [r0, #0]
    fba2:	691b      	ldr	r3, [r3, #16]
    fba4:	4798      	blx	r3
      if (!m_vol->cacheSafeRead(sector, dst)) {
    fba6:	2800      	cmp	r0, #0
    fba8:	d0d0      	beq.n	fb4c <FatFile::read(void*, unsigned int)+0x12c>
      n = m_vol->bytesPerSector();
    fbaa:	f44f 7400 	mov.w	r4, #512	; 0x200
    fbae:	e795      	b.n	fadc <FatFile::read(void*, unsigned int)+0xbc>
            if (isDir()) {
    fbb0:	782b      	ldrb	r3, [r5, #0]
    fbb2:	f013 0f70 	tst.w	r3, #112	; 0x70
    fbb6:	d0c9      	beq.n	fb4c <FatFile::read(void*, unsigned int)+0x12c>
  return nbyte - toRead;
    fbb8:	ebaa 0a06 	sub.w	sl, sl, r6
    fbbc:	4650      	mov	r0, sl
}
    fbbe:	b003      	add	sp, #12
    fbc0:	ecbd 8b02 	vpop	{d8}
    fbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fbc8 <FatFile::peek()>:
int FatFile::peek() {
    fbc8:	b570      	push	{r4, r5, r6, lr}
    fbca:	b082      	sub	sp, #8
    return read(&b, 1) == 1 ? b : -1;
    fbcc:	2201      	movs	r2, #1
    fbce:	4604      	mov	r4, r0
    fbd0:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    fbd4:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
    fbd8:	f7ff ff22 	bl	fa20 <FatFile::read(void*, unsigned int)>
    fbdc:	2801      	cmp	r0, #1
    fbde:	bf0c      	ite	eq
    fbe0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    fbe4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  m_curCluster = curCluster;
    fbe8:	e9c4 5604 	strd	r5, r6, [r4, #16]
}
    fbec:	b002      	add	sp, #8
    fbee:	bd70      	pop	{r4, r5, r6, pc}

0000fbf0 <FatFile::readDirCache(bool)>:
  uint8_t i = (m_curPosition >> 5) & 0XF;
    fbf0:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
    fbf2:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    fbf6:	b530      	push	{r4, r5, lr}
    fbf8:	4604      	mov	r4, r0
    fbfa:	b083      	sub	sp, #12
  uint8_t i = (m_curPosition >> 5) & 0XF;
    fbfc:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
    fc00:	d009      	beq.n	fc16 <FatFile::readDirCache(bool)+0x26>
    fc02:	2901      	cmp	r1, #1
    fc04:	d107      	bne.n	fc16 <FatFile::readDirCache(bool)+0x26>
    m_curPosition += FS_DIR_SIZE;
    fc06:	3320      	adds	r3, #32
    fc08:	6143      	str	r3, [r0, #20]
    return m_buffer;
    fc0a:	68a0      	ldr	r0, [r4, #8]
    fc0c:	3038      	adds	r0, #56	; 0x38
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    fc0e:	eb00 1045 	add.w	r0, r0, r5, lsl #5
}
    fc12:	b003      	add	sp, #12
    fc14:	bd30      	pop	{r4, r5, pc}
    int8_t n = read(&n, 1);
    fc16:	2201      	movs	r2, #1
    fc18:	f10d 0107 	add.w	r1, sp, #7
    fc1c:	4620      	mov	r0, r4
    fc1e:	f7ff feff 	bl	fa20 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    fc22:	b240      	sxtb	r0, r0
    fc24:	2801      	cmp	r0, #1
    fc26:	d103      	bne.n	fc30 <FatFile::readDirCache(bool)+0x40>
    m_curPosition += FS_DIR_SIZE - 1;
    fc28:	6963      	ldr	r3, [r4, #20]
    fc2a:	331f      	adds	r3, #31
    fc2c:	6163      	str	r3, [r4, #20]
    fc2e:	e7ec      	b.n	fc0a <FatFile::readDirCache(bool)+0x1a>
  return nullptr;
    fc30:	2000      	movs	r0, #0
    fc32:	e7ee      	b.n	fc12 <FatFile::readDirCache(bool)+0x22>

0000fc34 <FatFile::rename(FatFile*, char const*)>:
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    fc34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!(isFile() || isSubDir())) {
    fc38:	7803      	ldrb	r3, [r0, #0]
bool FatFile::rename(FatFile* dirFile, const char* newPath) {
    fc3a:	b09a      	sub	sp, #104	; 0x68
  FatFile() {}
    fc3c:	2600      	movs	r6, #0
  if (!(isFile() || isSubDir())) {
    fc3e:	f013 0f18 	tst.w	r3, #24
    fc42:	9608      	str	r6, [sp, #32]
    fc44:	9611      	str	r6, [sp, #68]	; 0x44
    fc46:	d006      	beq.n	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    fc48:	4617      	mov	r7, r2
  if (m_vol != dirFile->m_vol) {
    fc4a:	6883      	ldr	r3, [r0, #8]
    fc4c:	688a      	ldr	r2, [r1, #8]
    fc4e:	4604      	mov	r4, r0
    fc50:	460d      	mov	r5, r1
    fc52:	429a      	cmp	r2, r3
    fc54:	d003      	beq.n	fc5e <FatFile::rename(FatFile*, char const*)+0x2a>
  return false;
    fc56:	2000      	movs	r0, #0
}
    fc58:	b01a      	add	sp, #104	; 0x68
    fc5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc5e:	f7ff fbc3 	bl	f3e8 <FatFile::sync() [clone .part.0]>
  oldFile = *this;
    fc62:	46a6      	mov	lr, r4
    fc64:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
    fc68:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fc6c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fc70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    fc74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fc78:	f8de 3000 	ldr.w	r3, [lr]
    fc7c:	4632      	mov	r2, r6
    fc7e:	69a1      	ldr	r1, [r4, #24]
    fc80:	f8cc 3000 	str.w	r3, [ip]
    fc84:	68a3      	ldr	r3, [r4, #8]
    fc86:	f103 0028 	add.w	r0, r3, #40	; 0x28
    fc8a:	f004 fa23 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    fc8e:	2800      	cmp	r0, #0
    fc90:	d0e1      	beq.n	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    fc92:	88a2      	ldrh	r2, [r4, #4]
  memcpy(&entry, dir, sizeof(entry));
    fc94:	46ec      	mov	ip, sp
  if (isFile()) {
    fc96:	f894 8000 	ldrb.w	r8, [r4]
  return dir + (m_dirIndex & 0XF);
    fc9a:	f002 020f 	and.w	r2, r2, #15
  memcpy(&entry, dir, sizeof(entry));
    fc9e:	eb00 1e42 	add.w	lr, r0, r2, lsl #5
    fca2:	0152      	lsls	r2, r2, #5
    fca4:	f8de 1004 	ldr.w	r1, [lr, #4]
    fca8:	5880      	ldr	r0, [r0, r2]
    fcaa:	f8de 300c 	ldr.w	r3, [lr, #12]
    fcae:	f8de 2008 	ldr.w	r2, [lr, #8]
    fcb2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    fcb6:	f8de 1014 	ldr.w	r1, [lr, #20]
    fcba:	f8de 2018 	ldr.w	r2, [lr, #24]
    fcbe:	f8de 301c 	ldr.w	r3, [lr, #28]
    fcc2:	f8de 0010 	ldr.w	r0, [lr, #16]
    fcc6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
  if (isFile()) {
    fcca:	f018 0308 	ands.w	r3, r8, #8
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    fcce:	463a      	mov	r2, r7
    fcd0:	4629      	mov	r1, r5
  if (isFile()) {
    fcd2:	f040 809b 	bne.w	fe0c <FatFile::rename(FatFile*, char const*)+0x1d8>
    if (!file.mkdir(dirFile, newPath, false)) {
    fcd6:	a808      	add	r0, sp, #32
    fcd8:	f7ff fd56 	bl	f788 <FatFile::mkdir(FatFile*, char const*, bool)>
    fcdc:	2800      	cmp	r0, #0
    fcde:	d0ba      	beq.n	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    dirCluster = file.m_firstCluster;
    fce0:	9e10      	ldr	r6, [sp, #64]	; 0x40
  m_dirIndex = file.m_dirIndex;
    fce2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
  file.m_attributes = FILE_ATTR_CLOSED;
    fce6:	2500      	movs	r5, #0
  m_dirSector = file.m_dirSector;
    fce8:	990e      	ldr	r1, [sp, #56]	; 0x38
    fcea:	2201      	movs	r2, #1
  m_dirIndex = file.m_dirIndex;
    fcec:	80a3      	strh	r3, [r4, #4]
  m_lfnOrd = file.m_lfnOrd;
    fcee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    fcf2:	68a0      	ldr	r0, [r4, #8]
    fcf4:	70e3      	strb	r3, [r4, #3]
  m_dirCluster = file.m_dirCluster;
    fcf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fcf8:	3028      	adds	r0, #40	; 0x28
  m_dirSector = file.m_dirSector;
    fcfa:	61a1      	str	r1, [r4, #24]
  m_dirCluster = file.m_dirCluster;
    fcfc:	60e3      	str	r3, [r4, #12]
  file.m_attributes = FILE_ATTR_CLOSED;
    fcfe:	f88d 5020 	strb.w	r5, [sp, #32]
  file.m_flags = 0;
    fd02:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    fd06:	f004 f9e5 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
    fd0a:	2800      	cmp	r0, #0
    fd0c:	d0a3      	beq.n	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
  return dir + (m_dirIndex & 0XF);
    fd0e:	88a3      	ldrh	r3, [r4, #4]
    fd10:	f003 030f 	and.w	r3, r3, #15
    fd14:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  memcpy(&dir->createTimeMs, &entry.createTimeMs,
    fd18:	f8dd 300d 	ldr.w	r3, [sp, #13]
    fd1c:	f8c0 300d 	str.w	r3, [r0, #13]
    fd20:	f8dd 3011 	ldr.w	r3, [sp, #17]
    fd24:	f8c0 3011 	str.w	r3, [r0, #17]
    fd28:	f8dd 3015 	ldr.w	r3, [sp, #21]
    fd2c:	f8c0 3015 	str.w	r3, [r0, #21]
    fd30:	f8dd 3019 	ldr.w	r3, [sp, #25]
    fd34:	f8c0 3019 	str.w	r3, [r0, #25]
    fd38:	f8bd 301d 	ldrh.w	r3, [sp, #29]
    fd3c:	f8a0 301d 	strh.w	r3, [r0, #29]
    fd40:	f89d 301f 	ldrb.w	r3, [sp, #31]
    fd44:	77c3      	strb	r3, [r0, #31]
  dir->attributes = entry.attributes;
    fd46:	f89d 300b 	ldrb.w	r3, [sp, #11]
    fd4a:	72c3      	strb	r3, [r0, #11]
  if (dirCluster) {
    fd4c:	2e00      	cmp	r6, #0
    fd4e:	d03b      	beq.n	fdc8 <FatFile::rename(FatFile*, char const*)+0x194>
    uint32_t sector = m_vol->clusterStartSector(dirCluster);
    fd50:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fd52:	1eb3      	subs	r3, r6, #2
    return m_cache.prepare(sector, options);
    fd54:	462a      	mov	r2, r5
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fd56:	7981      	ldrb	r1, [r0, #6]
    return m_cache.prepare(sector, options);
    fd58:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fd5a:	408b      	lsls	r3, r1
    fd5c:	f850 1c14 	ldr.w	r1, [r0, #-20]
    return m_cache.prepare(sector, options);
    fd60:	4419      	add	r1, r3
    fd62:	f004 f9b7 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    fd66:	4605      	mov	r5, r0
    fd68:	2800      	cmp	r0, #0
    fd6a:	f43f af74 	beq.w	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&entry, &dir[1], sizeof(entry));
    fd6e:	6a00      	ldr	r0, [r0, #32]
    fd70:	466f      	mov	r7, sp
    fd72:	6a69      	ldr	r1, [r5, #36]	; 0x24
    fd74:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    fd76:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    fd78:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    fd7a:	6b28      	ldr	r0, [r5, #48]	; 0x30
    fd7c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    fd7e:	6baa      	ldr	r2, [r5, #56]	; 0x38
    fd80:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    fd82:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    if (!m_vol->freeChain(dirCluster)) {
    fd84:	4631      	mov	r1, r6
    fd86:	68a0      	ldr	r0, [r4, #8]
    fd88:	f001 fd22 	bl	117d0 <FatPartition::freeChain(unsigned long)>
    fd8c:	2800      	cmp	r0, #0
    fd8e:	f43f af62 	beq.w	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    sector = m_vol->clusterStartSector(m_firstCluster);
    fd92:	68a0      	ldr	r0, [r4, #8]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fd94:	6a23      	ldr	r3, [r4, #32]
    fd96:	7982      	ldrb	r2, [r0, #6]
    return m_cache.prepare(sector, options);
    fd98:	3028      	adds	r0, #40	; 0x28
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    fd9a:	3b02      	subs	r3, #2
    fd9c:	f850 1c14 	ldr.w	r1, [r0, #-20]
    fda0:	4093      	lsls	r3, r2
    return m_cache.prepare(sector, options);
    fda2:	2201      	movs	r2, #1
    fda4:	4419      	add	r1, r3
    fda6:	f004 f995 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!dir) {
    fdaa:	4606      	mov	r6, r0
    fdac:	2800      	cmp	r0, #0
    fdae:	f43f af52 	beq.w	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    memcpy(&dir[1], &entry, sizeof(entry));
    fdb2:	466d      	mov	r5, sp
    fdb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fdb6:	6230      	str	r0, [r6, #32]
    fdb8:	6271      	str	r1, [r6, #36]	; 0x24
    fdba:	62b2      	str	r2, [r6, #40]	; 0x28
    fdbc:	62f3      	str	r3, [r6, #44]	; 0x2c
    fdbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    fdc0:	6330      	str	r0, [r6, #48]	; 0x30
    fdc2:	6371      	str	r1, [r6, #52]	; 0x34
    fdc4:	63b2      	str	r2, [r6, #56]	; 0x38
    fdc6:	63f3      	str	r3, [r6, #60]	; 0x3c
  oldFile.m_firstCluster = 0;
    fdc8:	2100      	movs	r1, #0
  oldFile.m_flags = FILE_FLAG_WRITE;
    fdca:	2202      	movs	r2, #2
  oldFile.m_attributes = FILE_ATTR_FILE;
    fdcc:	2308      	movs	r3, #8
  if (!oldFile.remove()) {
    fdce:	a811      	add	r0, sp, #68	; 0x44
  oldFile.m_firstCluster = 0;
    fdd0:	9119      	str	r1, [sp, #100]	; 0x64
  oldFile.m_flags = FILE_FLAG_WRITE;
    fdd2:	f88d 2046 	strb.w	r2, [sp, #70]	; 0x46
  oldFile.m_attributes = FILE_ATTR_FILE;
    fdd6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
  if (!oldFile.remove()) {
    fdda:	f000 fed3 	bl	10b84 <FatFile::remove()>
    fdde:	2800      	cmp	r0, #0
    fde0:	f43f af39 	beq.w	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
  return m_vol->cacheSync();
    fde4:	68a4      	ldr	r4, [r4, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    fde6:	f104 0028 	add.w	r0, r4, #40	; 0x28
    fdea:	f004 f947 	bl	1407c <FsCache::sync()>
    fdee:	2800      	cmp	r0, #0
    fdf0:	f43f af31 	beq.w	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    fdf4:	f504 700e 	add.w	r0, r4, #568	; 0x238
    fdf8:	f004 f940 	bl	1407c <FsCache::sync()>
    fdfc:	2800      	cmp	r0, #0
    fdfe:	f43f af2a 	beq.w	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    fe02:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
    fe04:	6803      	ldr	r3, [r0, #0]
    fe06:	6a1b      	ldr	r3, [r3, #32]
    fe08:	4798      	blx	r3
    fe0a:	e725      	b.n	fc58 <FatFile::rename(FatFile*, char const*)+0x24>
    if (!file.open(dirFile, newPath, O_CREAT | O_EXCL | O_WRONLY)) {
    fe0c:	f640 2301 	movw	r3, #2561	; 0xa01
    fe10:	4660      	mov	r0, ip
    fe12:	f7ff fd2f 	bl	f874 <FatFile::open(FatFile*, char const*, int)>
    fe16:	2800      	cmp	r0, #0
    fe18:	f47f af63 	bne.w	fce2 <FatFile::rename(FatFile*, char const*)+0xae>
    fe1c:	e71b      	b.n	fc56 <FatFile::rename(FatFile*, char const*)+0x22>
    fe1e:	bf00      	nop

0000fe20 <FatFile::rmdir()>:
  if (!isSubDir() || (!USE_LONG_FILE_NAMES && isLFN())) {
    fe20:	7803      	ldrb	r3, [r0, #0]
    fe22:	06da      	lsls	r2, r3, #27
    fe24:	d401      	bmi.n	fe2a <FatFile::rmdir()+0xa>
}
    fe26:	2000      	movs	r0, #0
    fe28:	4770      	bx	lr
  if (pos == m_curPosition) {
    fe2a:	6943      	ldr	r3, [r0, #20]
bool FatFile::rmdir() {
    fe2c:	b530      	push	{r4, r5, lr}
    fe2e:	4604      	mov	r4, r0
    fe30:	b083      	sub	sp, #12
  if (pos == m_curPosition) {
    fe32:	b133      	cbz	r3, fe42 <FatFile::rmdir()+0x22>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    fe34:	7883      	ldrb	r3, [r0, #2]
    m_curCluster = 0;
    fe36:	2200      	movs	r2, #0
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    fe38:	f023 0320 	bic.w	r3, r3, #32
  m_curPosition = pos;
    fe3c:	e9c0 2204 	strd	r2, r2, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    fe40:	7083      	strb	r3, [r0, #2]
bool FatFile::rmdir() {
    fe42:	2300      	movs	r3, #0
    fe44:	e00f      	b.n	fe66 <FatFile::rmdir()+0x46>
    m_curPosition += FS_DIR_SIZE;
    fe46:	6163      	str	r3, [r4, #20]
    fe48:	68a3      	ldr	r3, [r4, #8]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    fe4a:	016a      	lsls	r2, r5, #5
    fe4c:	3338      	adds	r3, #56	; 0x38
    if (dir->name[0] == FAT_NAME_FREE) {
    fe4e:	5c9a      	ldrb	r2, [r3, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    fe50:	eb03 1345 	add.w	r3, r3, r5, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
    fe54:	b1ea      	cbz	r2, fe92 <FatFile::rmdir()+0x72>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    fe56:	2ae5      	cmp	r2, #229	; 0xe5
    fe58:	d004      	beq.n	fe64 <FatFile::rmdir()+0x44>
    fe5a:	2a2e      	cmp	r2, #46	; 0x2e
    fe5c:	d002      	beq.n	fe64 <FatFile::rmdir()+0x44>
    if (isFileOrSubdir(dir)) {
    fe5e:	7adb      	ldrb	r3, [r3, #11]
    fe60:	071b      	lsls	r3, r3, #28
    fe62:	d522      	bpl.n	feaa <FatFile::rmdir()+0x8a>
  uint8_t i = (m_curPosition >> 5) & 0XF;
    fe64:	6963      	ldr	r3, [r4, #20]
  if (i == 0 || !skipReadOk) {
    fe66:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
  uint8_t i = (m_curPosition >> 5) & 0XF;
    fe6a:	f3c3 1543 	ubfx	r5, r3, #5, #4
    m_curPosition += FS_DIR_SIZE;
    fe6e:	f103 0320 	add.w	r3, r3, #32
  if (i == 0 || !skipReadOk) {
    fe72:	d1e8      	bne.n	fe46 <FatFile::rmdir()+0x26>
    int8_t n = read(&n, 1);
    fe74:	2201      	movs	r2, #1
    fe76:	f10d 0107 	add.w	r1, sp, #7
    fe7a:	4620      	mov	r0, r4
    fe7c:	f7ff fdd0 	bl	fa20 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
    fe80:	b240      	sxtb	r0, r0
    fe82:	2801      	cmp	r0, #1
    fe84:	d103      	bne.n	fe8e <FatFile::rmdir()+0x6e>
    m_curPosition += FS_DIR_SIZE - 1;
    fe86:	6963      	ldr	r3, [r4, #20]
    fe88:	331f      	adds	r3, #31
    fe8a:	6163      	str	r3, [r4, #20]
    fe8c:	e7dc      	b.n	fe48 <FatFile::rmdir()+0x28>
      if (!getError()) {
    fe8e:	7863      	ldrb	r3, [r4, #1]
    fe90:	b95b      	cbnz	r3, feaa <FatFile::rmdir()+0x8a>
  m_flags |= FILE_FLAG_WRITE;
    fe92:	78a3      	ldrb	r3, [r4, #2]
  m_attributes = FILE_ATTR_FILE;
    fe94:	2208      	movs	r2, #8
  return remove();
    fe96:	4620      	mov	r0, r4
  m_flags |= FILE_FLAG_WRITE;
    fe98:	f043 0302 	orr.w	r3, r3, #2
  m_attributes = FILE_ATTR_FILE;
    fe9c:	7022      	strb	r2, [r4, #0]
  m_flags |= FILE_FLAG_WRITE;
    fe9e:	70a3      	strb	r3, [r4, #2]
}
    fea0:	b003      	add	sp, #12
    fea2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  return remove();
    fea6:	f000 be6d 	b.w	10b84 <FatFile::remove()>
}
    feaa:	2000      	movs	r0, #0
    feac:	b003      	add	sp, #12
    feae:	bd30      	pop	{r4, r5, pc}

0000feb0 <FatFile::seekSet(unsigned long)>:
bool FatFile::seekSet(uint32_t pos) {
    feb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  bool isOpen() const {return m_attributes;}
    feb4:	7803      	ldrb	r3, [r0, #0]
    feb6:	4604      	mov	r4, r0
  uint32_t tmp = m_curCluster;
    feb8:	6907      	ldr	r7, [r0, #16]
  if (!isOpen()) {
    feba:	2b00      	cmp	r3, #0
    febc:	d039      	beq.n	ff32 <FatFile::seekSet(unsigned long)+0x82>
    febe:	460d      	mov	r5, r1
  if (pos == m_curPosition) {
    fec0:	6941      	ldr	r1, [r0, #20]
    fec2:	42a9      	cmp	r1, r5
    fec4:	d042      	beq.n	ff4c <FatFile::seekSet(unsigned long)+0x9c>
  if (pos == 0) {
    fec6:	2d00      	cmp	r5, #0
    fec8:	d037      	beq.n	ff3a <FatFile::seekSet(unsigned long)+0x8a>
  if (isFile()) {
    feca:	0718      	lsls	r0, r3, #28
    fecc:	d52a      	bpl.n	ff24 <FatFile::seekSet(unsigned long)+0x74>
    if (pos > m_fileSize) {
    fece:	69e2      	ldr	r2, [r4, #28]
    fed0:	42aa      	cmp	r2, r5
    fed2:	d32e      	bcc.n	ff32 <FatFile::seekSet(unsigned long)+0x82>
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    fed4:	f8d4 c008 	ldr.w	ip, [r4, #8]
    fed8:	1e6e      	subs	r6, r5, #1
  bool isContiguous() const {return m_flags & FILE_FLAG_CONTIGUOUS;}
    feda:	78a2      	ldrb	r2, [r4, #2]
    return m_sectorsPerClusterShift + m_bytesPerSectorShift;
    fedc:	f89c 0006 	ldrb.w	r0, [ip, #6]
  if (isContiguous()) {
    fee0:	f012 0f40 	tst.w	r2, #64	; 0x40
    fee4:	f100 0009 	add.w	r0, r0, #9
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    fee8:	b2c0      	uxtb	r0, r0
    feea:	fa26 f600 	lsr.w	r6, r6, r0
  if (isContiguous()) {
    feee:	d130      	bne.n	ff52 <FatFile::seekSet(unsigned long)+0xa2>
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    fef0:	1e4a      	subs	r2, r1, #1
    fef2:	40c2      	lsrs	r2, r0
  if (nNew < nCur || m_curPosition == 0) {
    fef4:	b109      	cbz	r1, fefa <FatFile::seekSet(unsigned long)+0x4a>
    fef6:	4296      	cmp	r6, r2
    fef8:	d22f      	bcs.n	ff5a <FatFile::seekSet(unsigned long)+0xaa>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    fefa:	065b      	lsls	r3, r3, #25
    return m_rootDirStart;
    fefc:	bf4c      	ite	mi
    fefe:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
    ff02:	6a23      	ldrpl	r3, [r4, #32]
    ff04:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    ff06:	f104 0810 	add.w	r8, r4, #16
    ff0a:	e006      	b.n	ff1a <FatFile::seekSet(unsigned long)+0x6a>
    ff0c:	6921      	ldr	r1, [r4, #16]
    ff0e:	3e01      	subs	r6, #1
    ff10:	68a0      	ldr	r0, [r4, #8]
    ff12:	f001 fc3b 	bl	1178c <FatPartition::fatGet(unsigned long, unsigned long*)>
    ff16:	2800      	cmp	r0, #0
    ff18:	dd0b      	ble.n	ff32 <FatFile::seekSet(unsigned long)+0x82>
    ff1a:	4642      	mov	r2, r8
  while (nNew--) {
    ff1c:	2e00      	cmp	r6, #0
    ff1e:	d1f5      	bne.n	ff0c <FatFile::seekSet(unsigned long)+0x5c>
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    ff20:	78a2      	ldrb	r2, [r4, #2]
    ff22:	e00c      	b.n	ff3e <FatFile::seekSet(unsigned long)+0x8e>
  } else if (isRootFixed()) {
    ff24:	069a      	lsls	r2, r3, #26
    ff26:	d5d5      	bpl.n	fed4 <FatFile::seekSet(unsigned long)+0x24>
    return m_rootDirEntryCount;
    ff28:	68a3      	ldr	r3, [r4, #8]
    if (pos <= FS_DIR_SIZE*m_vol->rootDirEntryCount()) {
    ff2a:	895b      	ldrh	r3, [r3, #10]
    ff2c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    ff30:	d9f6      	bls.n	ff20 <FatFile::seekSet(unsigned long)+0x70>
  return false;
    ff32:	2000      	movs	r0, #0
  m_curCluster = tmp;
    ff34:	6127      	str	r7, [r4, #16]
}
    ff36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ff3a:	7882      	ldrb	r2, [r0, #2]
    m_curCluster = 0;
    ff3c:	6105      	str	r5, [r0, #16]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    ff3e:	f022 0220 	bic.w	r2, r2, #32
  return true;
    ff42:	2001      	movs	r0, #1
  m_curPosition = pos;
    ff44:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    ff46:	70a2      	strb	r2, [r4, #2]
}
    ff48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return true;
    ff4c:	2001      	movs	r0, #1
}
    ff4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    ff52:	6a23      	ldr	r3, [r4, #32]
    ff54:	4433      	add	r3, r6
    ff56:	6123      	str	r3, [r4, #16]
    goto done;
    ff58:	e7f1      	b.n	ff3e <FatFile::seekSet(unsigned long)+0x8e>
    nNew -= nCur;
    ff5a:	1ab6      	subs	r6, r6, r2
    ff5c:	e7d3      	b.n	ff06 <FatFile::seekSet(unsigned long)+0x56>
    ff5e:	bf00      	nop

0000ff60 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
                              oflag_t oflag, uint8_t lfnOrd) {
    ff60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ff64:	460e      	mov	r6, r1
    ff66:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
    ff68:	2100      	movs	r1, #0
    ff6a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
    ff6c:	4604      	mov	r4, r0
    ff6e:	4698      	mov	r8, r3
    ff70:	f89d 7018 	ldrb.w	r7, [sp, #24]
  memset(this, 0, sizeof(FatFile));
    ff74:	f012 fab4 	bl	224e0 <memset>
  m_vol = dirFile->m_vol;
    ff78:	68b0      	ldr	r0, [r6, #8]
  m_dirCluster = dirFile->m_firstCluster;
    ff7a:	6a33      	ldr	r3, [r6, #32]
    ff7c:	f100 0238 	add.w	r2, r0, #56	; 0x38
  m_dirIndex = dirIndex;
    ff80:	80a5      	strh	r5, [r4, #4]
  dir += 0XF & dirIndex;
    ff82:	f005 050f 	and.w	r5, r5, #15
    ff86:	eb02 1245 	add.w	r2, r2, r5, lsl #5
  m_vol = dirFile->m_vol;
    ff8a:	e9c4 0302 	strd	r0, r3, [r4, #8]

static inline bool isFileDir(const DirFat_t* dir) {
  return (dir->attributes & (FAT_ATTRIB_DIRECTORY | FAT_ATTRIB_LABEL)) == 0;
}
static inline bool isFileOrSubdir(const DirFat_t* dir) {
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
    ff8e:	7ad1      	ldrb	r1, [r2, #11]
  if (!isFileOrSubdir(dir)) {
    ff90:	070b      	lsls	r3, r1, #28
    ff92:	d411      	bmi.n	ffb8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    ff94:	f001 0117 	and.w	r1, r1, #23
    ff98:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    ff9a:	7ad3      	ldrb	r3, [r2, #11]
    ff9c:	f013 0f18 	tst.w	r3, #24
    ffa0:	d102      	bne.n	ffa8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x48>
    m_attributes |= FILE_ATTR_FILE;
    ffa2:	f041 0108 	orr.w	r1, r1, #8
    ffa6:	7021      	strb	r1, [r4, #0]
  switch (oflag & O_ACCMODE) {
    ffa8:	f008 0303 	and.w	r3, r8, #3
  m_lfnOrd = lfnOrd;
    ffac:	70e7      	strb	r7, [r4, #3]
  switch (oflag & O_ACCMODE) {
    ffae:	2b01      	cmp	r3, #1
    ffb0:	d038      	beq.n	10024 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc4>
    ffb2:	2b02      	cmp	r3, #2
    ffb4:	d006      	beq.n	ffc4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x64>
    ffb6:	b1f3      	cbz	r3, fff6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x96>
  m_attributes = FILE_ATTR_CLOSED;
    ffb8:	2300      	movs	r3, #0
  return false;
    ffba:	4618      	mov	r0, r3
  m_attributes = FILE_ATTR_CLOSED;
    ffbc:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    ffbe:	70a3      	strb	r3, [r4, #2]
}
    ffc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
    ffc4:	2303      	movs	r3, #3
  bool isSubDir() const {return m_attributes & FILE_ATTR_SUBDIR;}
    ffc6:	7821      	ldrb	r1, [r4, #0]
    if (isSubDir() || isReadOnly()) {
    ffc8:	06cd      	lsls	r5, r1, #27
    ffca:	d4f5      	bmi.n	ffb8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    ffcc:	07ce      	lsls	r6, r1, #31
    ffce:	d4f3      	bmi.n	ffb8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    ffd0:	f008 0108 	and.w	r1, r8, #8
  if (oflag & O_TRUNC) {
    ffd4:	f418 6f80 	tst.w	r8, #1024	; 0x400
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    ffd8:	ea43 0301 	orr.w	r3, r3, r1
    ffdc:	70a3      	strb	r3, [r4, #2]
    return m_sector;
    ffde:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    ffe0:	8a95      	ldrh	r5, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
    ffe2:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
    ffe4:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
    ffe6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
  if (oflag & O_TRUNC) {
    ffea:	d012      	beq.n	10012 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb2>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    ffec:	bb19      	cbnz	r1, 10036 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xd6>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    ffee:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fff2:	70a3      	strb	r3, [r4, #2]
    fff4:	e010      	b.n	10018 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb8>
      if (oflag & O_TRUNC) {
    fff6:	f418 6f80 	tst.w	r8, #1024	; 0x400
    fffa:	d1dd      	bne.n	ffb8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    fffc:	f008 0308 	and.w	r3, r8, #8
   10000:	f043 0301 	orr.w	r3, r3, #1
   10004:	70a3      	strb	r3, [r4, #2]
   10006:	6b41      	ldr	r1, [r0, #52]	; 0x34
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   10008:	8a93      	ldrh	r3, [r2, #20]
  m_dirSector = m_vol->cacheSectorNumber();
   1000a:	61a1      	str	r1, [r4, #24]
                 | getLe16(dir->firstClusterLow);
   1000c:	8b51      	ldrh	r1, [r2, #26]
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
   1000e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    m_firstCluster = firstCluster;
   10012:	6221      	str	r1, [r4, #32]
  return *reinterpret_cast<const uint32_t*>(src);
   10014:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
   10016:	61e3      	str	r3, [r4, #28]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   10018:	f418 4f80 	tst.w	r8, #16384	; 0x4000
   1001c:	d104      	bne.n	10028 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xc8>
  return true;
   1001e:	2001      	movs	r0, #1
}
   10020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  switch (oflag & O_ACCMODE) {
   10024:	2302      	movs	r3, #2
   10026:	e7ce      	b.n	ffc6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   10028:	69e1      	ldr	r1, [r4, #28]
   1002a:	4620      	mov	r0, r4
   1002c:	f7ff ff40 	bl	feb0 <FatFile::seekSet(unsigned long)>
   10030:	2800      	cmp	r0, #0
   10032:	d1f4      	bne.n	1001e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbe>
   10034:	e7c0      	b.n	ffb8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   10036:	f001 fbcb 	bl	117d0 <FatPartition::freeChain(unsigned long)>
   1003a:	2800      	cmp	r0, #0
   1003c:	d0bc      	beq.n	ffb8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x58>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   1003e:	78a3      	ldrb	r3, [r4, #2]
   10040:	e7d5      	b.n	ffee <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x8e>
   10042:	bf00      	nop

00010044 <FatFile::openNext(FatFile*, int)>:
  bool isOpen() const {return m_attributes;}
   10044:	7803      	ldrb	r3, [r0, #0]
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   10046:	2b00      	cmp	r3, #0
   10048:	d145      	bne.n	100d6 <FatFile::openNext(FatFile*, int)+0x92>
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   1004a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   1004e:	780b      	ldrb	r3, [r1, #0]
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
   10050:	b084      	sub	sp, #16
   10052:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
   10054:	f013 0f70 	tst.w	r3, #112	; 0x70
   10058:	d030      	beq.n	100bc <FatFile::openNext(FatFile*, int)+0x78>
  uint32_t curPosition() const {return m_curPosition;}
   1005a:	694b      	ldr	r3, [r1, #20]
   1005c:	f013 051f 	ands.w	r5, r3, #31
   10060:	d12c      	bne.n	100bc <FatFile::openNext(FatFile*, int)+0x78>
   10062:	4606      	mov	r6, r0
   10064:	4690      	mov	r8, r2
   10066:	46a9      	mov	r9, r5
    int8_t n = read(&n, 1);
   10068:	2201      	movs	r2, #1
   1006a:	f10d 010f 	add.w	r1, sp, #15
   1006e:	4620      	mov	r0, r4
  uint8_t i = (m_curPosition >> 5) & 0XF;
   10070:	f3c3 1a43 	ubfx	sl, r3, #5, #4
    index = dirFile->curPosition()/FS_DIR_SIZE;
   10074:	095f      	lsrs	r7, r3, #5
    int8_t n = read(&n, 1);
   10076:	f7ff fcd3 	bl	fa20 <FatFile::read(void*, unsigned int)>
    if  (n != 1) {
   1007a:	b240      	sxtb	r0, r0
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   1007c:	ea4f 124a 	mov.w	r2, sl, lsl #5
    if  (n != 1) {
   10080:	2801      	cmp	r0, #1
   10082:	d11b      	bne.n	100bc <FatFile::openNext(FatFile*, int)+0x78>
    m_curPosition += FS_DIR_SIZE - 1;
   10084:	6963      	ldr	r3, [r4, #20]
    return m_buffer;
   10086:	68a1      	ldr	r1, [r4, #8]
   10088:	331f      	adds	r3, #31
   1008a:	f101 0c38 	add.w	ip, r1, #56	; 0x38
   1008e:	6163      	str	r3, [r4, #20]
    if (dir->name[0] == FAT_NAME_FREE) {
   10090:	f81c 2002 	ldrb.w	r2, [ip, r2]
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
   10094:	eb0c 1c4a 	add.w	ip, ip, sl, lsl #5
    if (dir->name[0] == FAT_NAME_FREE) {
   10098:	b182      	cbz	r2, 100bc <FatFile::openNext(FatFile*, int)+0x78>
    if (dir->name[0] == '.' || dir->name[0] == FAT_NAME_DELETED) {
   1009a:	2a2e      	cmp	r2, #46	; 0x2e
   1009c:	d012      	beq.n	100c4 <FatFile::openNext(FatFile*, int)+0x80>
   1009e:	f1a2 00e5 	sub.w	r0, r2, #229	; 0xe5
   100a2:	fab0 f080 	clz	r0, r0
   100a6:	0940      	lsrs	r0, r0, #5
   100a8:	b960      	cbnz	r0, 100c4 <FatFile::openNext(FatFile*, int)+0x80>
  return (dir->attributes & FAT_ATTRIB_LABEL) == 0;
   100aa:	f89c 100b 	ldrb.w	r1, [ip, #11]
    } else if (isFileOrSubdir(dir)) {
   100ae:	f011 0e08 	ands.w	lr, r1, #8
   100b2:	d012      	beq.n	100da <FatFile::openNext(FatFile*, int)+0x96>
    } else if (isLongName(dir)) {
   100b4:	290f      	cmp	r1, #15
   100b6:	d007      	beq.n	100c8 <FatFile::openNext(FatFile*, int)+0x84>
      lfnOrd = 0;
   100b8:	4605      	mov	r5, r0
   100ba:	e7d5      	b.n	10068 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
   100bc:	2000      	movs	r0, #0
}
   100be:	b004      	add	sp, #16
   100c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      lfnOrd = 0;
   100c4:	2500      	movs	r5, #0
   100c6:	e7cf      	b.n	10068 <FatFile::openNext(FatFile*, int)+0x24>
      if (ldir->order & FAT_ORDER_LAST_LONG_ENTRY) {
   100c8:	0651      	lsls	r1, r2, #25
   100ca:	d5cd      	bpl.n	10068 <FatFile::openNext(FatFile*, int)+0x24>
        lfnOrd = ldir->order & 0X1F;
   100cc:	f002 051f 	and.w	r5, r2, #31
        checksum = ldir->checksum;
   100d0:	f89c 900d 	ldrb.w	r9, [ip, #13]
   100d4:	e7c8      	b.n	10068 <FatFile::openNext(FatFile*, int)+0x24>
  return false;
   100d6:	2000      	movs	r0, #0
}
   100d8:	4770      	bx	lr
      if (lfnOrd && checksum != lfnChecksum(dir->name)) {
   100da:	b185      	cbz	r5, 100fe <FatFile::openNext(FatFile*, int)+0xba>
  bool cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  bool createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd);
  uint16_t getLfnChar(DirLfn_t* ldir, uint8_t i);
  uint8_t lfnChecksum(uint8_t* name) {
    uint8_t sum = 0;
    for (uint8_t i = 0; i < 11; i++) {
   100dc:	f10c 010a 	add.w	r1, ip, #10
   100e0:	e001      	b.n	100e6 <FatFile::openNext(FatFile*, int)+0xa2>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   100e2:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
   100e6:	ea4f 13ce 	mov.w	r3, lr, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
   100ea:	4561      	cmp	r1, ip
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   100ec:	ea43 035e 	orr.w	r3, r3, lr, lsr #1
   100f0:	fa52 f383 	uxtab	r3, r2, r3
   100f4:	fa5f fe83 	uxtb.w	lr, r3
    for (uint8_t i = 0; i < 11; i++) {
   100f8:	d1f3      	bne.n	100e2 <FatFile::openNext(FatFile*, int)+0x9e>
   100fa:	45ce      	cmp	lr, r9
   100fc:	d1de      	bne.n	100bc <FatFile::openNext(FatFile*, int)+0x78>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
   100fe:	4643      	mov	r3, r8
   10100:	b2ba      	uxth	r2, r7
   10102:	4621      	mov	r1, r4
   10104:	4630      	mov	r0, r6
   10106:	9500      	str	r5, [sp, #0]
   10108:	f7ff ff2a 	bl	ff60 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
   1010c:	e7d7      	b.n	100be <FatFile::openNext(FatFile*, int)+0x7a>
   1010e:	bf00      	nop

00010110 <FatFile::sync()>:
  if (!isOpen()) {
   10110:	7803      	ldrb	r3, [r0, #0]
   10112:	b10b      	cbz	r3, 10118 <FatFile::sync()+0x8>
   10114:	f7ff b968 	b.w	f3e8 <FatFile::sync() [clone .part.0]>
}
   10118:	2001      	movs	r0, #1
   1011a:	4770      	bx	lr

0001011c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::timestamp(uint8_t flags, uint16_t year, uint8_t month,
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   1011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10120:	460e      	mov	r6, r1
      || month > 12
      || day < 1
      || day > 31
      || hour > 23
      || minute > 59
      || second > 59) {
   10122:	7801      	ldrb	r1, [r0, #0]
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   10124:	b082      	sub	sp, #8
      || second > 59) {
   10126:	0709      	lsls	r1, r1, #28
                   uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
   10128:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   1012c:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
   10130:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
   10134:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
      || second > 59) {
   10138:	d518      	bpl.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || year > 2107
   1013a:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
   1013e:	b294      	uxth	r4, r2
   10140:	2c7f      	cmp	r4, #127	; 0x7f
   10142:	d813      	bhi.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || month > 12
   10144:	1e5a      	subs	r2, r3, #1
   10146:	9301      	str	r3, [sp, #4]
   10148:	2a0b      	cmp	r2, #11
   1014a:	d80f      	bhi.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || day > 31
   1014c:	1e7a      	subs	r2, r7, #1
   1014e:	2a1e      	cmp	r2, #30
   10150:	d80c      	bhi.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
      || second > 59) {
   10152:	f1ba 0f3b 	cmp.w	sl, #59	; 0x3b
   10156:	bf98      	it	ls
   10158:	f1b9 0f17 	cmpls.w	r9, #23
   1015c:	d806      	bhi.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
   1015e:	f1b8 0f3b 	cmp.w	r8, #59	; 0x3b
   10162:	d803      	bhi.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // update directory entry
  if (!sync()) {
   10164:	4605      	mov	r5, r0
  if (!isOpen()) {
   10166:	f7ff f93f 	bl	f3e8 <FatFile::sync() [clone .part.0]>
  if (!sync()) {
   1016a:	b918      	cbnz	r0, 10174 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x58>
  }
  return m_vol->cacheSync();

 fail:
  return false;
}
   1016c:	2000      	movs	r0, #0
   1016e:	b002      	add	sp, #8
   10170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return m_cache.prepare(sector, options);
   10174:	68a8      	ldr	r0, [r5, #8]
   10176:	2201      	movs	r2, #1
   10178:	69a9      	ldr	r1, [r5, #24]
   1017a:	3028      	adds	r0, #40	; 0x28
   1017c:	f003 ffaa 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!dir) {
   10180:	2800      	cmp	r0, #0
   10182:	d0f3      	beq.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
 * \return Packed date for directory entry.
 */
static inline uint16_t FS_DATE(uint16_t year, uint8_t month, uint8_t day) {
  year -= 1980;
  return year > 127 || month > 12 || day > 31 ? 0 :
         year << 9 | month << 5 | day;
   10184:	9b01      	ldr	r3, [sp, #4]
 *
 * \return Packed time for directory entry.
 */
static inline uint16_t FS_TIME(uint8_t hour, uint8_t minute, uint8_t second) {
  return hour > 23 || minute > 59 || second > 59 ? 0 :
         hour << 11 | minute << 5 | second >> 1;
   10186:	ea4f 0258 	mov.w	r2, r8, lsr #1
  return dir + (m_dirIndex & 0XF);
   1018a:	88a9      	ldrh	r1, [r5, #4]
         year << 9 | month << 5 | day;
   1018c:	ea47 1343 	orr.w	r3, r7, r3, lsl #5
  if (flags & T_ACCESS) {
   10190:	07f7      	lsls	r7, r6, #31
  return dir + (m_dirIndex & 0XF);
   10192:	f001 010f 	and.w	r1, r1, #15
         hour << 11 | minute << 5 | second >> 1;
   10196:	ea42 124a 	orr.w	r2, r2, sl, lsl #5
         year << 9 | month << 5 | day;
   1019a:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
   1019e:	eb00 1041 	add.w	r0, r0, r1, lsl #5
   101a2:	b29b      	uxth	r3, r3
         hour << 11 | minute << 5 | second >> 1;
   101a4:	ea42 22c9 	orr.w	r2, r2, r9, lsl #11
  *reinterpret_cast<uint16_t*>(dst) = src;
   101a8:	bf48      	it	mi
   101aa:	8243      	strhmi	r3, [r0, #18]
  if (flags & T_CREATE) {
   101ac:	07b4      	lsls	r4, r6, #30
   101ae:	b292      	uxth	r2, r2
   101b0:	d508      	bpl.n	101c4 <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xa8>
    dir->createTimeMs = second & 1 ? 100 : 0;
   101b2:	f018 0801 	ands.w	r8, r8, #1
   101b6:	8203      	strh	r3, [r0, #16]
   101b8:	81c2      	strh	r2, [r0, #14]
   101ba:	bf18      	it	ne
   101bc:	f04f 0864 	movne.w	r8, #100	; 0x64
   101c0:	f880 800d 	strb.w	r8, [r0, #13]
  if (flags & T_WRITE) {
   101c4:	0771      	lsls	r1, r6, #29
   101c6:	d501      	bpl.n	101cc <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xb0>
   101c8:	8303      	strh	r3, [r0, #24]
   101ca:	82c2      	strh	r2, [r0, #22]
  return m_vol->cacheSync();
   101cc:	68ac      	ldr	r4, [r5, #8]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   101ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   101d2:	f003 ff53 	bl	1407c <FsCache::sync()>
   101d6:	2800      	cmp	r0, #0
   101d8:	d0c8      	beq.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
   101da:	f504 700e 	add.w	r0, r4, #568	; 0x238
   101de:	f003 ff4d 	bl	1407c <FsCache::sync()>
   101e2:	2800      	cmp	r0, #0
   101e4:	d0c2      	beq.n	1016c <FatFile::timestamp(unsigned char, unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0x50>
   101e6:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
   101e8:	6803      	ldr	r3, [r0, #0]
   101ea:	6a1b      	ldr	r3, [r3, #32]
}
   101ec:	b002      	add	sp, #8
   101ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101f2:	4718      	bx	r3

000101f4 <FatFile::truncate()>:
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
   101f4:	7883      	ldrb	r3, [r0, #2]
   101f6:	079b      	lsls	r3, r3, #30
   101f8:	d527      	bpl.n	1024a <FatFile::truncate()+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
   101fa:	6a03      	ldr	r3, [r0, #32]
bool FatFile::truncate() {
   101fc:	b510      	push	{r4, lr}
   101fe:	4604      	mov	r4, r0
   10200:	b082      	sub	sp, #8
  if (m_firstCluster == 0) {
   10202:	b1ab      	cbz	r3, 10230 <FatFile::truncate()+0x3c>
      return true;
  }
  if (m_curCluster) {
   10204:	6901      	ldr	r1, [r0, #16]
   10206:	bb11      	cbnz	r1, 1024e <FatFile::truncate()+0x5a>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
   10208:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
   1020a:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
   1020c:	4619      	mov	r1, r3
   1020e:	68a0      	ldr	r0, [r4, #8]
   10210:	f001 fade 	bl	117d0 <FatPartition::freeChain(unsigned long)>
   10214:	b1b0      	cbz	r0, 10244 <FatFile::truncate()+0x50>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
   10216:	78a3      	ldrb	r3, [r4, #2]
  m_fileSize = m_curPosition;
   10218:	6961      	ldr	r1, [r4, #20]
  m_flags |= FILE_FLAG_DIR_DIRTY;
   1021a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  if (!isOpen()) {
   1021e:	7822      	ldrb	r2, [r4, #0]
  m_fileSize = m_curPosition;
   10220:	61e1      	str	r1, [r4, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY;
   10222:	70a3      	strb	r3, [r4, #2]
  if (!isOpen()) {
   10224:	b122      	cbz	r2, 10230 <FatFile::truncate()+0x3c>
   10226:	4620      	mov	r0, r4
   10228:	f7ff f8de 	bl	f3e8 <FatFile::sync() [clone .part.0]>
  return sync();

 fail:
  return false;
}
   1022c:	b002      	add	sp, #8
   1022e:	bd10      	pop	{r4, pc}
      return true;
   10230:	2001      	movs	r0, #1
}
   10232:	b002      	add	sp, #8
   10234:	bd10      	pop	{r4, pc}
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   10236:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   1023a:	6921      	ldr	r1, [r4, #16]
   1023c:	68a0      	ldr	r0, [r4, #8]
   1023e:	f001 fab7 	bl	117b0 <FatPartition::fatPut(unsigned long, unsigned long)>
      if (!m_vol->fatPutEOC(m_curCluster)) {
   10242:	b968      	cbnz	r0, 10260 <FatFile::truncate()+0x6c>
  return false;
   10244:	2000      	movs	r0, #0
}
   10246:	b002      	add	sp, #8
   10248:	bd10      	pop	{r4, pc}
  return false;
   1024a:	2000      	movs	r0, #0
}
   1024c:	4770      	bx	lr
    toFree = 0;
   1024e:	2300      	movs	r3, #0
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
   10250:	aa01      	add	r2, sp, #4
   10252:	6880      	ldr	r0, [r0, #8]
    toFree = 0;
   10254:	9301      	str	r3, [sp, #4]
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
   10256:	f001 fa99 	bl	1178c <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
   1025a:	2800      	cmp	r0, #0
   1025c:	dbf2      	blt.n	10244 <FatFile::truncate()+0x50>
    if (fg) {
   1025e:	d1ea      	bne.n	10236 <FatFile::truncate()+0x42>
  if (toFree) {
   10260:	9b01      	ldr	r3, [sp, #4]
   10262:	2b00      	cmp	r3, #0
   10264:	d0d7      	beq.n	10216 <FatFile::truncate()+0x22>
   10266:	e7d1      	b.n	1020c <FatFile::truncate()+0x18>

00010268 <FatFile::write(void const*, unsigned int)>:
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
   10268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  bool isWritable() const {return m_flags & FILE_FLAG_WRITE;}
   1026c:	7883      	ldrb	r3, [r0, #2]
   1026e:	4605      	mov	r5, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
   10270:	079c      	lsls	r4, r3, #30
   10272:	d577      	bpl.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
   10274:	4688      	mov	r8, r1
   10276:	0719      	lsls	r1, r3, #28
   10278:	4691      	mov	r9, r2
   1027a:	f100 80b5 	bmi.w	103e8 <FatFile::write(void const*, unsigned int)+0x180>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   1027e:	696b      	ldr	r3, [r5, #20]
   10280:	eb13 0209 	adds.w	r2, r3, r9
   10284:	d26e      	bcs.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
   10286:	f1b9 0f00 	cmp.w	r9, #0
   1028a:	d040      	beq.n	1030e <FatFile::write(void const*, unsigned int)+0xa6>
   1028c:	464f      	mov	r7, r9
    m_status = 0;
   1028e:	f04f 0a00 	mov.w	sl, #0
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
   10292:	68a8      	ldr	r0, [r5, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
   10294:	f3c3 0608 	ubfx	r6, r3, #0, #9
    if (sectorOfCluster == 0 && sectorOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
   10298:	6929      	ldr	r1, [r5, #16]
    return (position >> 9) & m_clusterSectorMask;
   1029a:	7944      	ldrb	r4, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
   1029c:	ea14 2453 	ands.w	r4, r4, r3, lsr #9
   102a0:	d13f      	bne.n	10322 <FatFile::write(void const*, unsigned int)+0xba>
   102a2:	2e00      	cmp	r6, #0
   102a4:	d13d      	bne.n	10322 <FatFile::write(void const*, unsigned int)+0xba>
      if (m_curCluster != 0) {
   102a6:	2900      	cmp	r1, #0
   102a8:	d06e      	beq.n	10388 <FatFile::write(void const*, unsigned int)+0x120>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
   102aa:	78aa      	ldrb	r2, [r5, #2]
   102ac:	0652      	lsls	r2, r2, #25
   102ae:	d576      	bpl.n	1039e <FatFile::write(void const*, unsigned int)+0x136>
   102b0:	69ea      	ldr	r2, [r5, #28]
   102b2:	429a      	cmp	r2, r3
   102b4:	d973      	bls.n	1039e <FatFile::write(void const*, unsigned int)+0x136>
          m_curCluster++;
   102b6:	3101      	adds	r1, #1
   102b8:	6129      	str	r1, [r5, #16]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
   102ba:	3902      	subs	r1, #2
   102bc:	7982      	ldrb	r2, [r0, #6]
   102be:	6943      	ldr	r3, [r0, #20]
   102c0:	4091      	lsls	r1, r2
   102c2:	4419      	add	r1, r3
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
   102c4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
   102c8:	d353      	bcc.n	10372 <FatFile::write(void const*, unsigned int)+0x10a>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
   102ca:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
   102ce:	d370      	bcc.n	103b2 <FatFile::write(void const*, unsigned int)+0x14a>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
   102d0:	7903      	ldrb	r3, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
   102d2:	0a7a      	lsrs	r2, r7, #9
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
   102d4:	1b1b      	subs	r3, r3, r4
   102d6:	4293      	cmp	r3, r2
   102d8:	bf28      	it	cs
   102da:	4613      	movcs	r3, r2
    return sector <= m_sector && m_sector < (sector + count);
   102dc:	6b42      	ldr	r2, [r0, #52]	; 0x34
   102de:	428a      	cmp	r2, r1
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
   102e0:	ea4f 2443 	mov.w	r4, r3, lsl #9
   102e4:	d307      	bcc.n	102f6 <FatFile::write(void const*, unsigned int)+0x8e>
   102e6:	185e      	adds	r6, r3, r1
   102e8:	42b2      	cmp	r2, r6
   102ea:	d204      	bcs.n	102f6 <FatFile::write(void const*, unsigned int)+0x8e>
    m_sector = 0XFFFFFFFF;
   102ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   102f0:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   102f4:	6342      	str	r2, [r0, #52]	; 0x34
    return m_blockDev->writeSectors(sector, src, count);
   102f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   102f8:	4642      	mov	r2, r8
   102fa:	6806      	ldr	r6, [r0, #0]
   102fc:	6ab6      	ldr	r6, [r6, #40]	; 0x28
   102fe:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
   10300:	b380      	cbz	r0, 10364 <FatFile::write(void const*, unsigned int)+0xfc>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   10302:	696b      	ldr	r3, [r5, #20]
  while (nToWrite) {
   10304:	1b3f      	subs	r7, r7, r4
    src += n;
   10306:	44a0      	add	r8, r4
    m_curPosition += n;
   10308:	4423      	add	r3, r4
   1030a:	616b      	str	r3, [r5, #20]
  while (nToWrite) {
   1030c:	d1c1      	bne.n	10292 <FatFile::write(void const*, unsigned int)+0x2a>
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
   1030e:	69ea      	ldr	r2, [r5, #28]
   10310:	429a      	cmp	r2, r3
   10312:	d276      	bcs.n	10402 <FatFile::write(void const*, unsigned int)+0x19a>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
   10314:	78aa      	ldrb	r2, [r5, #2]
   10316:	4648      	mov	r0, r9
    m_fileSize = m_curPosition;
   10318:	61eb      	str	r3, [r5, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
   1031a:	f062 037f 	orn	r3, r2, #127	; 0x7f
   1031e:	70ab      	strb	r3, [r5, #2]
   10320:	e025      	b.n	1036e <FatFile::write(void const*, unsigned int)+0x106>
   10322:	7982      	ldrb	r2, [r0, #6]
   10324:	3902      	subs	r1, #2
   10326:	6943      	ldr	r3, [r0, #20]
   10328:	4091      	lsls	r1, r2
   1032a:	4419      	add	r1, r3
                      + sectorOfCluster;
   1032c:	4421      	add	r1, r4
    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
   1032e:	2e00      	cmp	r6, #0
   10330:	d0c8      	beq.n	102c4 <FatFile::write(void const*, unsigned int)+0x5c>
      n = m_vol->bytesPerSector() - sectorOffset;
   10332:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
        cacheOption = FsCache::CACHE_FOR_WRITE;
   10336:	2201      	movs	r2, #1
   10338:	42bc      	cmp	r4, r7
   1033a:	bf28      	it	cs
   1033c:	463c      	movcs	r4, r7
    return m_cache.prepare(sector, options);
   1033e:	3028      	adds	r0, #40	; 0x28
   10340:	f003 fec8 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   10344:	b170      	cbz	r0, 10364 <FatFile::write(void const*, unsigned int)+0xfc>
      memcpy(dst, src, n);
   10346:	4430      	add	r0, r6
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
   10348:	4426      	add	r6, r4
      memcpy(dst, src, n);
   1034a:	4622      	mov	r2, r4
   1034c:	4641      	mov	r1, r8
   1034e:	f006 f925 	bl	1659c <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
   10352:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   10356:	68a8      	ldr	r0, [r5, #8]
   10358:	d1d3      	bne.n	10302 <FatFile::write(void const*, unsigned int)+0x9a>
    return m_cache.sync();
   1035a:	3028      	adds	r0, #40	; 0x28
   1035c:	f003 fe8e 	bl	1407c <FsCache::sync()>
        if (!m_vol->cacheSyncData()) {
   10360:	2800      	cmp	r0, #0
   10362:	d1ce      	bne.n	10302 <FatFile::write(void const*, unsigned int)+0x9a>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
   10364:	786b      	ldrb	r3, [r5, #1]
  return 0;
   10366:	2000      	movs	r0, #0
  m_error |= WRITE_ERROR;
   10368:	f043 0301 	orr.w	r3, r3, #1
   1036c:	706b      	strb	r3, [r5, #1]
}
   1036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      n = m_vol->bytesPerSector() - sectorOffset;
   10372:	f5c6 7400 	rsb	r4, r6, #512	; 0x200
      if (sectorOffset == 0 &&
   10376:	696a      	ldr	r2, [r5, #20]
   10378:	69eb      	ldr	r3, [r5, #28]
   1037a:	42bc      	cmp	r4, r7
   1037c:	bf28      	it	cs
   1037e:	463c      	movcs	r4, r7
   10380:	429a      	cmp	r2, r3
   10382:	d305      	bcc.n	10390 <FatFile::write(void const*, unsigned int)+0x128>
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
   10384:	2205      	movs	r2, #5
   10386:	e7da      	b.n	1033e <FatFile::write(void const*, unsigned int)+0xd6>
        if (m_firstCluster == 0) {
   10388:	6a29      	ldr	r1, [r5, #32]
   1038a:	b321      	cbz	r1, 103d6 <FatFile::write(void const*, unsigned int)+0x16e>
          m_curCluster = m_firstCluster;
   1038c:	6129      	str	r1, [r5, #16]
   1038e:	e794      	b.n	102ba <FatFile::write(void const*, unsigned int)+0x52>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
   10390:	78ab      	ldrb	r3, [r5, #2]
        cacheOption = FsCache::CACHE_FOR_WRITE;
   10392:	f013 0f20 	tst.w	r3, #32
   10396:	bf14      	ite	ne
   10398:	2205      	movne	r2, #5
   1039a:	2201      	moveq	r2, #1
   1039c:	e7cf      	b.n	1033e <FatFile::write(void const*, unsigned int)+0xd6>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   1039e:	f105 0210 	add.w	r2, r5, #16
   103a2:	f001 f9f3 	bl	1178c <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
   103a6:	2800      	cmp	r0, #0
   103a8:	dbdc      	blt.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
        if (fg == 0) {
   103aa:	d024      	beq.n	103f6 <FatFile::write(void const*, unsigned int)+0x18e>
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
   103ac:	68a8      	ldr	r0, [r5, #8]
   103ae:	6929      	ldr	r1, [r5, #16]
   103b0:	e783      	b.n	102ba <FatFile::write(void const*, unsigned int)+0x52>
    if (isCached(sector)) {
   103b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   103b4:	428b      	cmp	r3, r1
   103b6:	d104      	bne.n	103c2 <FatFile::write(void const*, unsigned int)+0x15a>
    m_sector = 0XFFFFFFFF;
   103b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   103bc:	f880 a028 	strb.w	sl, [r0, #40]	; 0x28
    m_sector = 0XFFFFFFFF;
   103c0:	6343      	str	r3, [r0, #52]	; 0x34
    return m_blockDev->writeSector(sector, src);
   103c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   103c4:	4642      	mov	r2, r8
   103c6:	6803      	ldr	r3, [r0, #0]
   103c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   103ca:	4798      	blx	r3
      if (!m_vol->cacheSafeWrite(sector, src)) {
   103cc:	2800      	cmp	r0, #0
   103ce:	d0c9      	beq.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
      n = m_vol->bytesPerSector();
   103d0:	f44f 7400 	mov.w	r4, #512	; 0x200
   103d4:	e795      	b.n	10302 <FatFile::write(void const*, unsigned int)+0x9a>
          if (!addCluster()) {
   103d6:	4628      	mov	r0, r5
   103d8:	f7ff f860 	bl	f49c <FatFile::addCluster()>
   103dc:	2800      	cmp	r0, #0
   103de:	d0c1      	beq.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
          m_firstCluster = m_curCluster;
   103e0:	6929      	ldr	r1, [r5, #16]
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
   103e2:	68a8      	ldr	r0, [r5, #8]
          m_firstCluster = m_curCluster;
   103e4:	6229      	str	r1, [r5, #32]
   103e6:	e768      	b.n	102ba <FatFile::write(void const*, unsigned int)+0x52>
    if (!seekSet(m_fileSize)) {
   103e8:	69c1      	ldr	r1, [r0, #28]
   103ea:	f7ff fd61 	bl	feb0 <FatFile::seekSet(unsigned long)>
   103ee:	2800      	cmp	r0, #0
   103f0:	f47f af45 	bne.w	1027e <FatFile::write(void const*, unsigned int)+0x16>
   103f4:	e7b6      	b.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
          if (!addCluster()) {
   103f6:	4628      	mov	r0, r5
   103f8:	f7ff f850 	bl	f49c <FatFile::addCluster()>
   103fc:	2800      	cmp	r0, #0
   103fe:	d1d5      	bne.n	103ac <FatFile::write(void const*, unsigned int)+0x144>
   10400:	e7b0      	b.n	10364 <FatFile::write(void const*, unsigned int)+0xfc>
  } else if (FsDateTime::callback) {
   10402:	4b05      	ldr	r3, [pc, #20]	; (10418 <FatFile::write(void const*, unsigned int)+0x1b0>)
   10404:	681b      	ldr	r3, [r3, #0]
   10406:	b12b      	cbz	r3, 10414 <FatFile::write(void const*, unsigned int)+0x1ac>
    m_flags |= FILE_FLAG_DIR_DIRTY;
   10408:	78ab      	ldrb	r3, [r5, #2]
   1040a:	4648      	mov	r0, r9
   1040c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10410:	70ab      	strb	r3, [r5, #2]
   10412:	e7ac      	b.n	1036e <FatFile::write(void const*, unsigned int)+0x106>
   10414:	4648      	mov	r0, r9
   10416:	e7aa      	b.n	1036e <FatFile::write(void const*, unsigned int)+0x106>
   10418:	2000502c 	.word	0x2000502c

0001041c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>:
    hash = ((hash << 5) + hash) ^ (*bgn++);
  }
  return hash;
}
//==============================================================================
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   1041c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
   10420:	4684      	mov	ip, r0
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   10422:	b08d      	sub	sp, #52	; 0x34
   10424:	4614      	mov	r4, r2
  uint16_t ls = 0;
  bool atEnd() {
    return !ls && next == end;
  }
  void reset() {
    next = begin;
   10426:	6815      	ldr	r5, [r2, #0]
  DirLfn_t* ldir;
  fname->reset();
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   10428:	4698      	mov	r8, r3
bool FatFile::cmpName(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   1042a:	4606      	mov	r6, r0
   1042c:	4689      	mov	r9, r1
  FatFile dir = *this;
   1042e:	af03      	add	r7, sp, #12
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   10430:	9301      	str	r3, [sp, #4]
    ls = 0;  // lowSurrogate
   10432:	f04f 0e00 	mov.w	lr, #0
  FatFile dir = *this;
   10436:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1043a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1043c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   10440:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   10442:	f8dc 3000 	ldr.w	r3, [ip]
    next = begin;
   10446:	6065      	str	r5, [r4, #4]
   10448:	603b      	str	r3, [r7, #0]
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   1044a:	4643      	mov	r3, r8
    ls = 0;  // lowSurrogate
   1044c:	f8a4 e00c 	strh.w	lr, [r4, #12]
   10450:	2b00      	cmp	r3, #0
   10452:	d03f      	beq.n	104d4 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xb8>
   10454:	f04f 0a01 	mov.w	sl, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
   10458:	eba9 010a 	sub.w	r1, r9, sl
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   1045c:	a803      	add	r0, sp, #12
   1045e:	b289      	uxth	r1, r1
   10460:	0149      	lsls	r1, r1, #5
   10462:	f7ff fd25 	bl	feb0 <FatFile::seekSet(unsigned long)>
   10466:	b350      	cbz	r0, 104be <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
   10468:	2100      	movs	r1, #0
   1046a:	a803      	add	r0, sp, #12
   1046c:	f7ff fbc0 	bl	fbf0 <FatFile::readDirCache(bool)>
    if (!ldir) {
   10470:	4607      	mov	r7, r0
   10472:	b320      	cbz	r0, 104be <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
   10474:	2500      	movs	r5, #0
   10476:	e00d      	b.n	10494 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x78>
      uint16_t u = getLfnChar(ldir, i);
      if (fname->atEnd()) {
        return u == 0;
      }
#if USE_UTF8_LONG_NAMES
      uint16_t cp = fname->get16();
   10478:	f003 fe6a 	bl	14150 <FsName::get16()>
   1047c:	4680      	mov	r8, r0
      // Make sure caller checked for valid UTF-8.
      DBG_HALT_IF(cp == 0XFFFF);
      if (toUpcase(u) != toUpcase(cp)) {
   1047e:	4658      	mov	r0, fp
   10480:	f003 ff7a 	bl	14378 <toUpcase(unsigned short)>
   10484:	4683      	mov	fp, r0
   10486:	4640      	mov	r0, r8
   10488:	f003 ff76 	bl	14378 <toUpcase(unsigned short)>
   1048c:	4583      	cmp	fp, r0
   1048e:	d116      	bne.n	104be <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xa2>
    for (uint8_t i = 0; i < 13; i++) {
   10490:	2d0d      	cmp	r5, #13
   10492:	d018      	beq.n	104c6 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0xaa>
      uint16_t u = getLfnChar(ldir, i);
   10494:	b2ea      	uxtb	r2, r5
   10496:	4639      	mov	r1, r7
   10498:	4630      	mov	r0, r6
    for (uint8_t i = 0; i < 13; i++) {
   1049a:	3501      	adds	r5, #1
      uint16_t u = getLfnChar(ldir, i);
   1049c:	f000 fee4 	bl	11268 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>
    return !ls && next == end;
   104a0:	89a3      	ldrh	r3, [r4, #12]
   104a2:	4683      	mov	fp, r0
      uint16_t cp = fname->get16();
   104a4:	4620      	mov	r0, r4
   104a6:	2b00      	cmp	r3, #0
   104a8:	d1e6      	bne.n	10478 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
   104aa:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   104ae:	4293      	cmp	r3, r2
   104b0:	d1e2      	bne.n	10478 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        return u == 0;
   104b2:	fabb f08b 	clz	r0, fp
   104b6:	0940      	lsrs	r0, r0, #5
  }
  return true;

 fail:
  return false;
}
   104b8:	b00d      	add	sp, #52	; 0x34
   104ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return false;
   104be:	2000      	movs	r0, #0
}
   104c0:	b00d      	add	sp, #52	; 0x34
   104c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   104c6:	f10a 0a01 	add.w	sl, sl, #1
   104ca:	9b01      	ldr	r3, [sp, #4]
   104cc:	fa5f fa8a 	uxtb.w	sl, sl
   104d0:	4553      	cmp	r3, sl
   104d2:	d2c1      	bcs.n	10458 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x3c>
  return true;
   104d4:	2001      	movs	r0, #1
   104d6:	e7ef      	b.n	104b8 <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)+0x9c>

000104d8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>:
//------------------------------------------------------------------------------
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   104d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile dir = *this;
   104dc:	4607      	mov	r7, r0
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   104de:	b08d      	sub	sp, #52	; 0x34
   104e0:	4616      	mov	r6, r2
   104e2:	469a      	mov	sl, r3
  FatFile dir = *this;
   104e4:	f10d 0c0c 	add.w	ip, sp, #12
   104e8:	f102 0415 	add.w	r4, r2, #21
   104ec:	f102 0520 	add.w	r5, r2, #32
bool FatFile::createLFN(uint16_t index, FatLfn_t* fname, uint8_t lfnOrd) {
   104f0:	9101      	str	r1, [sp, #4]
    uint8_t sum = 0;
   104f2:	f04f 0900 	mov.w	r9, #0
  FatFile dir = *this;
   104f6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   104f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   104fc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   104fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   10502:	683b      	ldr	r3, [r7, #0]
   10504:	f8cc 3000 	str.w	r3, [ip]
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10508:	ea4f 13c9 	mov.w	r3, r9, lsl #7
   1050c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
   10510:	ea43 0359 	orr.w	r3, r3, r9, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
   10514:	42a5      	cmp	r5, r4
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10516:	fa52 f383 	uxtab	r3, r2, r3
   1051a:	fa5f f983 	uxtb.w	r9, r3
    for (uint8_t i = 0; i < 11; i++) {
   1051e:	d1f3      	bne.n	10508 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x30>
    next = begin;
   10520:	6833      	ldr	r3, [r6, #0]
    ls = 0;  // lowSurrogate
   10522:	f04f 0800 	mov.w	r8, #0
    next = begin;
   10526:	6073      	str	r3, [r6, #4]
    ls = 0;  // lowSurrogate
   10528:	f8a6 800c 	strh.w	r8, [r6, #12]
  DirLfn_t* ldir;
  uint8_t checksum = lfnChecksum(fname->sfn);
  uint8_t fc = 0;
  fname->reset();

  for (uint8_t order = 1; order <= lfnOrd; order++) {
   1052c:	f1ba 0f00 	cmp.w	sl, #0
   10530:	d04e      	beq.n	105d0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xf8>
   10532:	2701      	movs	r7, #1
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(index - order));
   10534:	9b01      	ldr	r3, [sp, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   10536:	a803      	add	r0, sp, #12
   10538:	1bd9      	subs	r1, r3, r7
   1053a:	b289      	uxth	r1, r1
   1053c:	0149      	lsls	r1, r1, #5
   1053e:	f7ff fcb7 	bl	feb0 <FatFile::seekSet(unsigned long)>
   10542:	2800      	cmp	r0, #0
   10544:	d055      	beq.n	105f2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
   10546:	2100      	movs	r1, #0
   10548:	a803      	add	r0, sp, #12
   1054a:	f7ff fb51 	bl	fbf0 <FatFile::readDirCache(bool)>
    if (!ldir) {
   1054e:	2800      	cmp	r0, #0
   10550:	d04f      	beq.n	105f2 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x11a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dir.m_vol->cacheDirty();
   10552:	9a05      	ldr	r2, [sp, #20]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   10554:	4557      	cmp	r7, sl
   10556:	f100 0b01 	add.w	fp, r0, #1
   1055a:	f04f 0401 	mov.w	r4, #1
    m_status |= CACHE_STATUS_DIRTY;
   1055e:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   10562:	f04f 0500 	mov.w	r5, #0
   10566:	f043 0301 	orr.w	r3, r3, #1
   1056a:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
   1056e:	f04f 030f 	mov.w	r3, #15
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   10572:	bf0c      	ite	eq
   10574:	f047 0240 	orreq.w	r2, r7, #64	; 0x40
   10578:	463a      	movne	r2, r7
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
   1057a:	72c3      	strb	r3, [r0, #11]
    ldir->mustBeZero1 = 0;
   1057c:	f04f 0300 	mov.w	r3, #0
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
   10580:	7002      	strb	r2, [r0, #0]
    ldir->mustBeZero1 = 0;
   10582:	7303      	strb	r3, [r0, #12]
   10584:	f04f 0300 	mov.w	r3, #0
    ldir->checksum = checksum;
   10588:	f880 900d 	strb.w	r9, [r0, #13]
   1058c:	8343      	strh	r3, [r0, #26]
    setLe16(ldir->mustBeZero2, 0);
    for (uint8_t i = 0; i < 13; i++) {
   1058e:	e006      	b.n	1059e <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xc6>
   10590:	f8ab 0000 	strh.w	r0, [fp]
   10594:	3401      	adds	r4, #1
   10596:	3501      	adds	r5, #1
   10598:	f10b 0b02 	add.w	fp, fp, #2
   1059c:	b2e4      	uxtb	r4, r4
    return !ls && next == end;
   1059e:	89b0      	ldrh	r0, [r6, #12]
   105a0:	b918      	cbnz	r0, 105aa <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd2>
   105a2:	e9d6 2301 	ldrd	r2, r3, [r6, #4]
   105a6:	429a      	cmp	r2, r3
   105a8:	d016      	beq.n	105d8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x100>
      uint16_t cp;
      if (fname->atEnd()) {
        cp = fc++ ? 0XFFFF : 0;
      } else {
        cp = fname->get16();
   105aa:	4630      	mov	r0, r6
   105ac:	f003 fdd0 	bl	14150 <FsName::get16()>
  if (i < 5) {
   105b0:	2d04      	cmp	r5, #4
   105b2:	b2eb      	uxtb	r3, r5
   105b4:	d9ec      	bls.n	10590 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xb8>
  } else if (i < 11) {
   105b6:	2b0a      	cmp	r3, #10
   105b8:	d802      	bhi.n	105c0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xe8>
   105ba:	f8ab 0003 	strh.w	r0, [fp, #3]
}
   105be:	e7e9      	b.n	10594 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
    for (uint8_t i = 0; i < 13; i++) {
   105c0:	2c0d      	cmp	r4, #13
  *reinterpret_cast<uint16_t*>(dst) = src;
   105c2:	f8ab 0005 	strh.w	r0, [fp, #5]
   105c6:	d1e5      	bne.n	10594 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xbc>
  for (uint8_t order = 1; order <= lfnOrd; order++) {
   105c8:	3701      	adds	r7, #1
   105ca:	b2ff      	uxtb	r7, r7
   105cc:	45ba      	cmp	sl, r7
   105ce:	d2b1      	bcs.n	10534 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x5c>
        DBG_HALT_IF(cp == 0XFFFF);
      }
      putLfnChar(ldir, i, cp);
    }
  }
  return true;
   105d0:	2001      	movs	r0, #1

 fail:
  return false;
}
   105d2:	b00d      	add	sp, #52	; 0x34
   105d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        cp = fc++ ? 0XFFFF : 0;
   105d8:	f1b8 0f00 	cmp.w	r8, #0
   105dc:	d006      	beq.n	105ec <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0x114>
   105de:	f108 0801 	add.w	r8, r8, #1
   105e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   105e6:	fa5f f888 	uxtb.w	r8, r8
   105ea:	e7e1      	b.n	105b0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
   105ec:	f04f 0801 	mov.w	r8, #1
   105f0:	e7de      	b.n	105b0 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)+0xd8>
  return false;
   105f2:	2000      	movs	r0, #0
}
   105f4:	b00d      	add	sp, #52	; 0x34
   105f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   105fa:	bf00      	nop

000105fc <FatFile::makeSFN(FatLfn_t*)>:
  uint8_t uc = 0;
  uint8_t i = 0;
  uint8_t in = 7;
  const char* dot;
  const char* end = fname->end;
  const char* ptr = fname->begin;
   105fc:	4602      	mov	r2, r0
  // Assume blanks removed from start and end.
  DBG_HALT_IF(*ptr == ' ' || *(end - 1) == ' ' || *(end - 1) == '.');

  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
   105fe:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  const char* ptr = fname->begin;
   10602:	f852 3b16 	ldr.w	r3, [r2], #22
bool FatFile::makeSFN(FatLfn_t* fname) {
   10606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fname->sfn[k] = ' ';
   1060a:	f8c0 1016 	str.w	r1, [r0, #22]
bool FatFile::makeSFN(FatLfn_t* fname) {
   1060e:	4686      	mov	lr, r0
  const char* end = fname->end;
   10610:	6884      	ldr	r4, [r0, #8]
    fname->sfn[k] = ' ';
   10612:	6051      	str	r1, [r2, #4]
   10614:	f8c2 1007 	str.w	r1, [r2, #7]
  }
  // Not 8.3 if starts with dot.
  is83 = *ptr == '.' ? false : true;
   10618:	781a      	ldrb	r2, [r3, #0]
   1061a:	2a2e      	cmp	r2, #46	; 0x2e
   1061c:	bf14      	ite	ne
   1061e:	2001      	movne	r0, #1
   10620:	2000      	moveq	r0, #0
  // Skip leading dots.
  for (; *ptr == '.'; ptr++) {}
   10622:	d103      	bne.n	1062c <FatFile::makeSFN(FatLfn_t*)+0x30>
   10624:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10628:	2a2e      	cmp	r2, #46	; 0x2e
   1062a:	d0fb      	beq.n	10624 <FatFile::makeSFN(FatLfn_t*)+0x28>
  // Find last dot.
  for (dot = end - 1; dot > ptr && *dot != '.'; dot--) {}
   1062c:	1e61      	subs	r1, r4, #1
   1062e:	4299      	cmp	r1, r3
   10630:	d90b      	bls.n	1064a <FatFile::makeSFN(FatLfn_t*)+0x4e>
   10632:	460a      	mov	r2, r1
   10634:	e002      	b.n	1063c <FatFile::makeSFN(FatLfn_t*)+0x40>
   10636:	4293      	cmp	r3, r2
   10638:	4611      	mov	r1, r2
   1063a:	d006      	beq.n	1064a <FatFile::makeSFN(FatLfn_t*)+0x4e>
   1063c:	4611      	mov	r1, r2
   1063e:	3a01      	subs	r2, #1
   10640:	f891 c000 	ldrb.w	ip, [r1]
   10644:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
   10648:	d1f5      	bne.n	10636 <FatFile::makeSFN(FatLfn_t*)+0x3a>

  for (; ptr < end; ptr++) {
   1064a:	429c      	cmp	r4, r3
   1064c:	f04f 0500 	mov.w	r5, #0
   10650:	f240 8086 	bls.w	10760 <FatFile::makeSFN(FatLfn_t*)+0x164>
   10654:	2607      	movs	r6, #7
   10656:	2708      	movs	r7, #8
   10658:	46a9      	mov	r9, r5
   1065a:	46a8      	mov	r8, r5
   1065c:	e006      	b.n	1066c <FatFile::makeSFN(FatLfn_t*)+0x70>
   1065e:	3301      	adds	r3, #1
    c = *ptr;
    if (c == '.' && ptr == dot) {
      in = 10;  // Max index for full 8.3 name.
   10660:	260a      	movs	r6, #10
      i = 8;    // Place for extension.
   10662:	f04f 0908 	mov.w	r9, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
   10666:	2710      	movs	r7, #16
  for (; ptr < end; ptr++) {
   10668:	429c      	cmp	r4, r3
   1066a:	d95b      	bls.n	10724 <FatFile::makeSFN(FatLfn_t*)+0x128>
    c = *ptr;
   1066c:	781a      	ldrb	r2, [r3, #0]
    if (c == '.' && ptr == dot) {
   1066e:	2a2e      	cmp	r2, #46	; 0x2e
   10670:	bf08      	it	eq
   10672:	4299      	cmpeq	r1, r3
   10674:	d0f3      	beq.n	1065e <FatFile::makeSFN(FatLfn_t*)+0x62>
  if (c == '"' || c == '|' || c == '[' || c == '\\' || c == ']') {
   10676:	2a22      	cmp	r2, #34	; 0x22
   10678:	d00d      	beq.n	10696 <FatFile::makeSFN(FatLfn_t*)+0x9a>
   1067a:	2a7c      	cmp	r2, #124	; 0x7c
   1067c:	d00b      	beq.n	10696 <FatFile::makeSFN(FatLfn_t*)+0x9a>
   1067e:	f1a2 0c5b 	sub.w	ip, r2, #91	; 0x5b
   10682:	f1bc 0f02 	cmp.w	ip, #2
   10686:	d906      	bls.n	10696 <FatFile::makeSFN(FatLfn_t*)+0x9a>
  if ((0X2A <= c && c <= 0X2F && c != 0X2D) || (0X3A <= c && c <= 0X3F)) {
   10688:	f1a2 0c2a 	sub.w	ip, r2, #42	; 0x2a
   1068c:	f1bc 0f05 	cmp.w	ip, #5
   10690:	d821      	bhi.n	106d6 <FatFile::makeSFN(FatLfn_t*)+0xda>
   10692:	2a2d      	cmp	r2, #45	; 0x2d
   10694:	d01f      	beq.n	106d6 <FatFile::makeSFN(FatLfn_t*)+0xda>
    } else {
      if (sfnReservedChar(c)) {
        is83 = false;
        // Skip UTF-8 trailing characters.
        if ((c & 0XC0) == 0X80) {
   10696:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1069a:	2a80      	cmp	r2, #128	; 0x80
   1069c:	d05d      	beq.n	1075a <FatFile::makeSFN(FatLfn_t*)+0x15e>
          continue;
        }
        c = '_';
      }
      if (i > in) {
   1069e:	454e      	cmp	r6, r9
   106a0:	d22f      	bcs.n	10702 <FatFile::makeSFN(FatLfn_t*)+0x106>
        is83 = false;
        if (in == 10 || ptr > dot) {
   106a2:	4299      	cmp	r1, r3
   106a4:	bf2c      	ite	cs
   106a6:	2000      	movcs	r0, #0
   106a8:	2001      	movcc	r0, #1
   106aa:	2e0a      	cmp	r6, #10
   106ac:	bf08      	it	eq
   106ae:	f040 0001 	orreq.w	r0, r0, #1
   106b2:	2800      	cmp	r0, #0
   106b4:	d047      	beq.n	10746 <FatFile::makeSFN(FatLfn_t*)+0x14a>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
   106b6:	f89e 3016 	ldrb.w	r3, [lr, #22]
   106ba:	2b20      	cmp	r3, #32
   106bc:	d040      	beq.n	10740 <FatFile::makeSFN(FatLfn_t*)+0x144>
  }
  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
   106be:	f89e 3014 	ldrb.w	r3, [lr, #20]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   106c2:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
   106c4:	217e      	movs	r1, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
   106c6:	2231      	movs	r2, #49	; 0x31
    fname->sfn[fname->seqPos] = '~';
   106c8:	4473      	add	r3, lr
    fname->flags = FNAME_FLAG_LOST_CHARS;
   106ca:	f88e 0015 	strb.w	r0, [lr, #21]
    fname->sfn[fname->seqPos] = '~';
   106ce:	7599      	strb	r1, [r3, #22]
    fname->sfn[fname->seqPos + 1] = '1';
   106d0:	75da      	strb	r2, [r3, #23]
  }
  return true;

 fail:
  return false;
}
   106d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   106d6:	f1a2 0c3a 	sub.w	ip, r2, #58	; 0x3a
   106da:	f1bc 0f05 	cmp.w	ip, #5
   106de:	d9da      	bls.n	10696 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (sfnReservedChar(c)) {
   106e0:	f1a2 0c21 	sub.w	ip, r2, #33	; 0x21
   106e4:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   106e8:	d8d5      	bhi.n	10696 <FatFile::makeSFN(FatLfn_t*)+0x9a>
      if (i > in) {
   106ea:	454e      	cmp	r6, r9
   106ec:	d3d9      	bcc.n	106a2 <FatFile::makeSFN(FatLfn_t*)+0xa6>
      if (isLower(c)) {
   106ee:	f1a2 0c61 	sub.w	ip, r2, #97	; 0x61
   106f2:	f1bc 0f19 	cmp.w	ip, #25
   106f6:	d828      	bhi.n	1074a <FatFile::makeSFN(FatLfn_t*)+0x14e>
        c += 'A' - 'a';
   106f8:	3a20      	subs	r2, #32
        lc |= bit;
   106fa:	433d      	orrs	r5, r7
        c += 'A' - 'a';
   106fc:	b2d2      	uxtb	r2, r2
        lc |= bit;
   106fe:	b2ed      	uxtb	r5, r5
   10700:	e001      	b.n	10706 <FatFile::makeSFN(FatLfn_t*)+0x10a>
        is83 = false;
   10702:	2000      	movs	r0, #0
        c = '_';
   10704:	225f      	movs	r2, #95	; 0x5f
      fname->sfn[i++] = c;
   10706:	f109 0c01 	add.w	ip, r9, #1
   1070a:	44f1      	add	r9, lr
  for (; ptr < end; ptr++) {
   1070c:	3301      	adds	r3, #1
      fname->sfn[i++] = c;
   1070e:	f889 2016 	strb.w	r2, [r9, #22]
   10712:	fa5f f28c 	uxtb.w	r2, ip
      if (i < 7) {
   10716:	2a06      	cmp	r2, #6
        fname->seqPos = i;
   10718:	4691      	mov	r9, r2
   1071a:	bf98      	it	ls
   1071c:	f88e 2014 	strbls.w	r2, [lr, #20]
  for (; ptr < end; ptr++) {
   10720:	429c      	cmp	r4, r3
   10722:	d8a3      	bhi.n	1066c <FatFile::makeSFN(FatLfn_t*)+0x70>
  if (fname->sfn[0] == ' ') {
   10724:	f89e 3016 	ldrb.w	r3, [lr, #22]
   10728:	2b20      	cmp	r3, #32
   1072a:	d009      	beq.n	10740 <FatFile::makeSFN(FatLfn_t*)+0x144>
  if (is83) {
   1072c:	2800      	cmp	r0, #0
   1072e:	d0c6      	beq.n	106be <FatFile::makeSFN(FatLfn_t*)+0xc2>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   10730:	ea18 0f05 	tst.w	r8, r5
   10734:	bf18      	it	ne
   10736:	2502      	movne	r5, #2
   10738:	f88e 5015 	strb.w	r5, [lr, #21]
}
   1073c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return false;
   10740:	2000      	movs	r0, #0
}
   10742:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   10746:	460b      	mov	r3, r1
   10748:	e78e      	b.n	10668 <FatFile::makeSFN(FatLfn_t*)+0x6c>
      } else if (isUpper(c)) {
   1074a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
   1074e:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   10752:	bf98      	it	ls
   10754:	ea47 0808 	orrls.w	r8, r7, r8
   10758:	e7d5      	b.n	10706 <FatFile::makeSFN(FatLfn_t*)+0x10a>
  for (; ptr < end; ptr++) {
   1075a:	3301      	adds	r3, #1
        is83 = false;
   1075c:	2000      	movs	r0, #0
   1075e:	e783      	b.n	10668 <FatFile::makeSFN(FatLfn_t*)+0x6c>
  for (; ptr < end; ptr++) {
   10760:	46a8      	mov	r8, r5
   10762:	e7df      	b.n	10724 <FatFile::makeSFN(FatLfn_t*)+0x128>

00010764 <FatFile::makeUniqueSfn(FatLfn_t*)>:
//------------------------------------------------------------------------------
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
   10764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
   10768:	f04f 0962 	mov.w	r9, #98	; 0x62
  DirFat_t* dir;
  uint16_t hex = 0;
   1076c:	2500      	movs	r5, #0
bool FatFile::makeUniqueSfn(FatLfn_t* fname) {
   1076e:	460f      	mov	r7, r1
   10770:	4604      	mov	r4, r0
   10772:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 10814 <FatFile::makeUniqueSfn(FatLfn_t*)+0xb0>
    for (uint8_t i = pos + 4 ; i > pos; i--) {
      uint8_t h = hex & 0XF;
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
      hex >>= 4;
    }
    fname->sfn[pos] = '~';
   10776:	f04f 0a7e 	mov.w	sl, #126	; 0x7e
  uint8_t pos = fname->seqPos;
   1077a:	f891 8014 	ldrb.w	r8, [r1, #20]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   1077e:	f101 0616 	add.w	r6, r1, #22
	return systick_millis_count;
   10782:	f1b8 0f03 	cmp.w	r8, #3
   10786:	f8db 3000 	ldr.w	r3, [fp]
   1078a:	bf28      	it	cs
   1078c:	f04f 0803 	movcs.w	r8, #3
    hex += millis();
   10790:	442b      	add	r3, r5
   10792:	b29d      	uxth	r5, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   10794:	f108 0304 	add.w	r3, r8, #4
   10798:	b2db      	uxtb	r3, r3
      uint8_t h = hex & 0XF;
   1079a:	f005 020f 	and.w	r2, r5, #15
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   1079e:	1e58      	subs	r0, r3, #1
      hex >>= 4;
   107a0:	092d      	lsrs	r5, r5, #4
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   107a2:	2a09      	cmp	r2, #9
   107a4:	f102 0137 	add.w	r1, r2, #55	; 0x37
   107a8:	bf98      	it	ls
   107aa:	f102 0130 	addls.w	r1, r2, #48	; 0x30
   107ae:	18fa      	adds	r2, r7, r3
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   107b0:	b2c3      	uxtb	r3, r0
      fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   107b2:	7591      	strb	r1, [r2, #22]
    for (uint8_t i = pos + 4 ; i > pos; i--) {
   107b4:	4598      	cmp	r8, r3
   107b6:	d1f0      	bne.n	1079a <FatFile::makeUniqueSfn(FatLfn_t*)+0x36>
    fname->sfn[pos] = '~';
   107b8:	eb07 0308 	add.w	r3, r7, r8
    seekSet(0);
   107bc:	2100      	movs	r1, #0
   107be:	4620      	mov	r0, r4
   107c0:	f883 a016 	strb.w	sl, [r3, #22]
   107c4:	f7ff fb74 	bl	feb0 <FatFile::seekSet(unsigned long)>
      dir = readDirCache(true);
   107c8:	2101      	movs	r1, #1
   107ca:	4620      	mov	r0, r4
   107cc:	f7ff fa10 	bl	fbf0 <FatFile::readDirCache(bool)>
   107d0:	4603      	mov	r3, r0
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   107d2:	220b      	movs	r2, #11
   107d4:	4630      	mov	r0, r6
      if (!dir) {
   107d6:	b19b      	cbz	r3, 10800 <FatFile::makeUniqueSfn(FatLfn_t*)+0x9c>
      if (dir->name[0] == FAT_NAME_FREE) {
   107d8:	f893 c000 	ldrb.w	ip, [r3]
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   107dc:	4619      	mov	r1, r3
      if (dir->name[0] == FAT_NAME_FREE) {
   107de:	f1bc 0f00 	cmp.w	ip, #0
   107e2:	d013      	beq.n	1080c <FatFile::makeUniqueSfn(FatLfn_t*)+0xa8>
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   107e4:	7adb      	ldrb	r3, [r3, #11]
   107e6:	071b      	lsls	r3, r3, #28
   107e8:	d4ee      	bmi.n	107c8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
   107ea:	f011 fdcd 	bl	22388 <memcmp>
   107ee:	2800      	cmp	r0, #0
   107f0:	d1ea      	bne.n	107c8 <FatFile::makeUniqueSfn(FatLfn_t*)+0x64>
  for (uint8_t seq = FIRST_HASH_SEQ; seq < 100; seq++) {
   107f2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   107f6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
   107fa:	d1c2      	bne.n	10782 <FatFile::makeUniqueSfn(FatLfn_t*)+0x1e>
  }
  // fall inti fail - too many tries.
  DBG_FAIL_MACRO;

 fail:
  return false;
   107fc:	4648      	mov	r0, r9
 fail:
   107fe:	e003      	b.n	10808 <FatFile::makeUniqueSfn(FatLfn_t*)+0xa4>
        if (!getError()) {
   10800:	7860      	ldrb	r0, [r4, #1]
   10802:	fab0 f080 	clz	r0, r0
   10806:	0940      	lsrs	r0, r0, #5

 done:
  return true;
}
   10808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return true;
   1080c:	2001      	movs	r0, #1
}
   1080e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10812:	bf00      	nop
   10814:	2000bc24 	.word	0x2000bc24

00010818 <FatFile::open(FatFile*, FatLfn_t*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, FatLfn_t* fname, oflag_t oflag) {
   10818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1081c:	ed2d 8b02 	vpush	{d8}
   10820:	b08b      	sub	sp, #44	; 0x2c
   10822:	e9cd 0302 	strd	r0, r3, [sp, #8]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  auto vol = dirFile->m_vol;
   10826:	688b      	ldr	r3, [r1, #8]
   10828:	9307      	str	r3, [sp, #28]

  if (!dirFile->isDir() || isOpen()) {
   1082a:	780b      	ldrb	r3, [r1, #0]
   1082c:	f013 0f70 	tst.w	r3, #112	; 0x70
   10830:	d053      	beq.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  bool isOpen() const {return m_attributes;}
   10832:	9b02      	ldr	r3, [sp, #8]
   10834:	781b      	ldrb	r3, [r3, #0]
   10836:	2b00      	cmp	r3, #0
   10838:	d14f      	bne.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  nameOrd = (fname->len + 12)/13;
   1083a:	6913      	ldr	r3, [r2, #16]
   1083c:	4690      	mov	r8, r2
   1083e:	4a9a      	ldr	r2, [pc, #616]	; (10aa8 <FatFile::open(FatFile*, FatLfn_t*, int)+0x290>)
   10840:	460e      	mov	r6, r1
   10842:	330c      	adds	r3, #12
   10844:	fba2 2303 	umull	r2, r3, r2, r3
   10848:	f3c3 0287 	ubfx	r2, r3, #2, #8
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   1084c:	f898 3015 	ldrb.w	r3, [r8, #21]
   10850:	0798      	lsls	r0, r3, #30
  nameOrd = (fname->len + 12)/13;
   10852:	9204      	str	r2, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   10854:	f000 80a7 	beq.w	109a6 <FatFile::open(FatFile*, FatLfn_t*, int)+0x18e>
   10858:	1c57      	adds	r7, r2, #1
   1085a:	b2ff      	uxtb	r7, r7
  uint8_t checksum = 0;
   1085c:	2300      	movs	r3, #0
    seekSet(0);
   1085e:	4630      	mov	r0, r6
   10860:	4619      	mov	r1, r3
   10862:	461c      	mov	r4, r3
   10864:	9306      	str	r3, [sp, #24]
   10866:	f7ff fb23 	bl	feb0 <FatFile::seekSet(unsigned long)>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   1086a:	f108 0316 	add.w	r3, r8, #22
  uint8_t order = 0;
   1086e:	46a3      	mov	fp, r4
  uint8_t lfnOrd = 0;
   10870:	46a1      	mov	r9, r4
  uint16_t freeIndex = 0;
   10872:	46a2      	mov	sl, r4
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   10874:	ee08 3a10 	vmov	s16, r3
  bool fnameFound = false;
   10878:	9405      	str	r4, [sp, #20]
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   1087a:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache();
   1087c:	2100      	movs	r1, #0
   1087e:	4630      	mov	r0, r6
   10880:	f7ff f9b6 	bl	fbf0 <FatFile::readDirCache(bool)>
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   10884:	f3c5 154f 	ubfx	r5, r5, #5, #16
    if (!dir) {
   10888:	4603      	mov	r3, r0
   1088a:	b320      	cbz	r0, 108d6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xbe>
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
   1088c:	7802      	ldrb	r2, [r0, #0]
   1088e:	2ae5      	cmp	r2, #229	; 0xe5
   10890:	d029      	beq.n	108e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
   10892:	b342      	cbz	r2, 108e6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xce>
        freeFound = 0;
   10894:	42bc      	cmp	r4, r7
   10896:	bf38      	it	cc
   10898:	2400      	movcc	r4, #0
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
   1089a:	2a2e      	cmp	r2, #46	; 0x2e
   1089c:	d02b      	beq.n	108f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
}
static inline uint8_t isLongName(const DirFat_t* dir) {
  return dir->attributes == FAT_ATTRIB_LONG_NAME;
   1089e:	f890 c00b 	ldrb.w	ip, [r0, #11]
    } else if (isLongName(dir)) {
   108a2:	f1bc 0f0f 	cmp.w	ip, #15
   108a6:	d054      	beq.n	10952 <FatFile::open(FatFile*, FatLfn_t*, int)+0x13a>
    } else if (isFileOrSubdir(dir)) {
   108a8:	f01c 0c08 	ands.w	ip, ip, #8
   108ac:	d123      	bne.n	108f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
      if (lfnOrd) {
   108ae:	f1b9 0f00 	cmp.w	r9, #0
   108b2:	f040 80d5 	bne.w	10a60 <FatFile::open(FatFile*, FatLfn_t*, int)+0x248>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   108b6:	220b      	movs	r2, #11
   108b8:	ee18 1a10 	vmov	r1, s16
   108bc:	f011 fd64 	bl	22388 <memcmp>
   108c0:	2800      	cmp	r0, #0
   108c2:	d1da      	bne.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   108c4:	f898 3015 	ldrb.w	r3, [r8, #21]
   108c8:	f013 0301 	ands.w	r3, r3, #1
   108cc:	f000 80e4 	beq.w	10a98 <FatFile::open(FatFile*, FatLfn_t*, int)+0x280>
          goto found;
        }
        fnameFound = true;
   108d0:	2301      	movs	r3, #1
   108d2:	9305      	str	r3, [sp, #20]
   108d4:	e7d1      	b.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      if (dirFile->getError()) {
   108d6:	7873      	ldrb	r3, [r6, #1]
   108d8:	b183      	cbz	r3, 108fc <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
    goto fail;
  }
  return true;

 fail:
  return false;
   108da:	2000      	movs	r0, #0
}
   108dc:	b00b      	add	sp, #44	; 0x2c
   108de:	ecbd 8b02 	vpop	{d8}
   108e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    curIndex = dirFile->m_curPosition/FS_DIR_SIZE;
   108e6:	2c00      	cmp	r4, #0
   108e8:	bf08      	it	eq
   108ea:	46aa      	moveq	sl, r5
      if (freeFound < freeNeed) {
   108ec:	42bc      	cmp	r4, r7
   108ee:	d201      	bcs.n	108f4 <FatFile::open(FatFile*, FatLfn_t*, int)+0xdc>
        freeFound++;
   108f0:	3401      	adds	r4, #1
   108f2:	b2e4      	uxtb	r4, r4
      if (dir->name[0] == FAT_NAME_FREE) {
   108f4:	b112      	cbz	r2, 108fc <FatFile::open(FatFile*, FatLfn_t*, int)+0xe4>
      lfnOrd = 0;
   108f6:	f04f 0900 	mov.w	r9, #0
   108fa:	e7be      	b.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   108fc:	9b03      	ldr	r3, [sp, #12]
   108fe:	059a      	lsls	r2, r3, #22
   10900:	d5eb      	bpl.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   10902:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   10906:	3b01      	subs	r3, #1
   10908:	2b01      	cmp	r3, #1
   1090a:	d8e6      	bhi.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  if (freeFound == 0) {
   1090c:	2c00      	cmp	r4, #0
   1090e:	bf08      	it	eq
   10910:	46aa      	moveq	sl, r5
  while (freeFound < freeNeed) {
   10912:	42bc      	cmp	r4, r7
   10914:	d303      	bcc.n	1091e <FatFile::open(FatFile*, FatLfn_t*, int)+0x106>
   10916:	e048      	b.n	109aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    freeFound++;
   10918:	b2dc      	uxtb	r4, r3
  while (freeFound < freeNeed) {
   1091a:	42a7      	cmp	r7, r4
   1091c:	d045      	beq.n	109aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    dir = dirFile->readDirCache();
   1091e:	2100      	movs	r1, #0
   10920:	4630      	mov	r0, r6
   10922:	f7ff f965 	bl	fbf0 <FatFile::readDirCache(bool)>
    freeFound++;
   10926:	1c63      	adds	r3, r4, #1
    if (!dir) {
   10928:	2800      	cmp	r0, #0
   1092a:	d1f5      	bne.n	10918 <FatFile::open(FatFile*, FatLfn_t*, int)+0x100>
      if (dirFile->getError()) {
   1092c:	7873      	ldrb	r3, [r6, #1]
   1092e:	2b00      	cmp	r3, #0
   10930:	d1d3      	bne.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  while (freeFound < freeNeed) {
   10932:	42a7      	cmp	r7, r4
   10934:	d939      	bls.n	109aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
   10936:	9d07      	ldr	r5, [sp, #28]
   10938:	e005      	b.n	10946 <FatFile::open(FatFile*, FatLfn_t*, int)+0x12e>
    return m_sectorsPerCluster*(m_bytesPerSector/FS_DIR_SIZE);
   1093a:	792b      	ldrb	r3, [r5, #4]
    freeFound += vol->dirEntriesPerCluster();
   1093c:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   10940:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   10942:	42a7      	cmp	r7, r4
   10944:	d931      	bls.n	109aa <FatFile::open(FatFile*, FatLfn_t*, int)+0x192>
    if (!dirFile->addDirCluster()) {
   10946:	4630      	mov	r0, r6
   10948:	f7fe fdc2 	bl	f4d0 <FatFile::addDirCluster()>
   1094c:	2800      	cmp	r0, #0
   1094e:	d1f4      	bne.n	1093a <FatFile::open(FatFile*, FatLfn_t*, int)+0x122>
   10950:	e7c3      	b.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
      if (!lfnOrd) {
   10952:	f1b9 0f00 	cmp.w	r9, #0
   10956:	d119      	bne.n	1098c <FatFile::open(FatFile*, FatLfn_t*, int)+0x174>
        order = ldir->order & 0X1F;
   10958:	f002 0b1f 	and.w	fp, r2, #31
        if (order != nameOrd ||
   1095c:	9904      	ldr	r1, [sp, #16]
   1095e:	4559      	cmp	r1, fp
   10960:	d18b      	bne.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
   10962:	f012 0940 	ands.w	r9, r2, #64	; 0x40
   10966:	d088      	beq.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        checksum = ldir->checksum;
   10968:	7b43      	ldrb	r3, [r0, #13]
   1096a:	4689      	mov	r9, r1
   1096c:	9306      	str	r3, [sp, #24]
      if (order == 1) {
   1096e:	f1bb 0f01 	cmp.w	fp, #1
   10972:	d182      	bne.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
        if (!dirFile->cmpName(curIndex + 1, fname, lfnOrd)) {
   10974:	1c69      	adds	r1, r5, #1
   10976:	464b      	mov	r3, r9
   10978:	4642      	mov	r2, r8
   1097a:	4630      	mov	r0, r6
   1097c:	b289      	uxth	r1, r1
   1097e:	f7ff fd4d 	bl	1041c <FatFile::cmpName(unsigned short, FatLfn_t*, unsigned char)>
          lfnOrd = 0;
   10982:	2800      	cmp	r0, #0
   10984:	bf08      	it	eq
   10986:	f04f 0900 	moveq.w	r9, #0
   1098a:	e776      	b.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
      } else if (ldir->order != --order || checksum != ldir->checksum) {
   1098c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   10990:	fa5f fb8b 	uxtb.w	fp, fp
   10994:	455a      	cmp	r2, fp
   10996:	d1ae      	bne.n	108f6 <FatFile::open(FatFile*, FatLfn_t*, int)+0xde>
   10998:	7b43      	ldrb	r3, [r0, #13]
   1099a:	9a06      	ldr	r2, [sp, #24]
   1099c:	4293      	cmp	r3, r2
   1099e:	d0e6      	beq.n	1096e <FatFile::open(FatFile*, FatLfn_t*, int)+0x156>
      lfnOrd = 0;
   109a0:	f04f 0900 	mov.w	r9, #0
   109a4:	e769      	b.n	1087a <FatFile::open(FatFile*, FatLfn_t*, int)+0x62>
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + nameOrd : 1;
   109a6:	2701      	movs	r7, #1
   109a8:	e758      	b.n	1085c <FatFile::open(FatFile*, FatLfn_t*, int)+0x44>
  if (fnameFound) {
   109aa:	9b05      	ldr	r3, [sp, #20]
   109ac:	b12b      	cbz	r3, 109ba <FatFile::open(FatFile*, FatLfn_t*, int)+0x1a2>
    if (!dirFile->makeUniqueSfn(fname)) {
   109ae:	4641      	mov	r1, r8
   109b0:	4630      	mov	r0, r6
   109b2:	f7ff fed7 	bl	10764 <FatFile::makeUniqueSfn(FatLfn_t*)>
   109b6:	2800      	cmp	r0, #0
   109b8:	d08f      	beq.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  lfnOrd = freeNeed - 1;
   109ba:	3f01      	subs	r7, #1
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
   109bc:	4642      	mov	r2, r8
   109be:	4630      	mov	r0, r6
  lfnOrd = freeNeed - 1;
   109c0:	b2fb      	uxtb	r3, r7
  curIndex = freeIndex + lfnOrd;
   109c2:	eb0a 0503 	add.w	r5, sl, r3
  lfnOrd = freeNeed - 1;
   109c6:	461f      	mov	r7, r3
  curIndex = freeIndex + lfnOrd;
   109c8:	b2ad      	uxth	r5, r5
  if (!dirFile->createLFN(curIndex, fname, lfnOrd)) {
   109ca:	4629      	mov	r1, r5
   109cc:	f7ff fd84 	bl	104d8 <FatFile::createLFN(unsigned short, FatLfn_t*, unsigned char)>
   109d0:	2800      	cmp	r0, #0
   109d2:	d082      	beq.n	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   109d4:	0169      	lsls	r1, r5, #5
   109d6:	4630      	mov	r0, r6
   109d8:	f7ff fa6a 	bl	feb0 <FatFile::seekSet(unsigned long)>
   109dc:	2800      	cmp	r0, #0
   109de:	f43f af7c 	beq.w	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
   109e2:	2100      	movs	r1, #0
   109e4:	4630      	mov	r0, r6
   109e6:	f7ff f903 	bl	fbf0 <FatFile::readDirCache(bool)>
  if (!dir) {
   109ea:	4604      	mov	r4, r0
   109ec:	2800      	cmp	r0, #0
   109ee:	f43f af74 	beq.w	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
  memset(dir, 0, sizeof(DirFat_t));
   109f2:	2220      	movs	r2, #32
   109f4:	2100      	movs	r1, #0
   109f6:	f011 fd73 	bl	224e0 <memset>
  memcpy(dir->name, fname->sfn, 11);
   109fa:	f8d8 2016 	ldr.w	r2, [r8, #22]
   109fe:	f8d8 301a 	ldr.w	r3, [r8, #26]
   10a02:	6022      	str	r2, [r4, #0]
   10a04:	6063      	str	r3, [r4, #4]
   10a06:	f898 3020 	ldrb.w	r3, [r8, #32]
   10a0a:	f8b8 201e 	ldrh.w	r2, [r8, #30]
   10a0e:	72a3      	strb	r3, [r4, #10]
   10a10:	8122      	strh	r2, [r4, #8]
  dir->caseFlags = (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
   10a12:	f898 3015 	ldrb.w	r3, [r8, #21]
   10a16:	f003 0318 	and.w	r3, r3, #24
   10a1a:	7323      	strb	r3, [r4, #12]
  if (FsDateTime::callback) {
   10a1c:	4b23      	ldr	r3, [pc, #140]	; (10aac <FatFile::open(FatFile*, FatLfn_t*, int)+0x294>)
   10a1e:	681b      	ldr	r3, [r3, #0]
   10a20:	2b00      	cmp	r3, #0
   10a22:	d03b      	beq.n	10a9c <FatFile::open(FatFile*, FatLfn_t*, int)+0x284>
    FsDateTime::callback(&date, &time, &ms10);
   10a24:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   10a28:	f10d 0126 	add.w	r1, sp, #38	; 0x26
   10a2c:	a809      	add	r0, sp, #36	; 0x24
   10a2e:	4798      	blx	r3
  *reinterpret_cast<uint16_t*>(dst) = src;
   10a30:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10a34:	8223      	strh	r3, [r4, #16]
   10a36:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   10a3a:	81e3      	strh	r3, [r4, #14]
    dir->createTimeMs = ms10;
   10a3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   10a40:	7363      	strb	r3, [r4, #13]
   10a42:	9a07      	ldr	r2, [sp, #28]
   10a44:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
   10a48:	f043 0301 	orr.w	r3, r3, #1
   10a4c:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   10a50:	9b03      	ldr	r3, [sp, #12]
   10a52:	462a      	mov	r2, r5
   10a54:	4631      	mov	r1, r6
   10a56:	9802      	ldr	r0, [sp, #8]
   10a58:	9700      	str	r7, [sp, #0]
   10a5a:	f7ff fa81 	bl	ff60 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
   10a5e:	e73d      	b.n	108dc <FatFile::open(FatFile*, FatLfn_t*, int)+0xc4>
        if (1 == order && lfnChecksum(dir->name) == checksum) {
   10a60:	f1bb 0f01 	cmp.w	fp, #1
   10a64:	f47f af39 	bne.w	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
    for (uint8_t i = 0; i < 11; i++) {
   10a68:	300a      	adds	r0, #10
   10a6a:	e001      	b.n	10a70 <FatFile::open(FatFile*, FatLfn_t*, int)+0x258>
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10a6c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   10a70:	ea4f 11cc 	mov.w	r1, ip, lsl #7
    for (uint8_t i = 0; i < 11; i++) {
   10a74:	4298      	cmp	r0, r3
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10a76:	ea41 015c 	orr.w	r1, r1, ip, lsr #1
   10a7a:	fa52 f281 	uxtab	r2, r2, r1
   10a7e:	fa5f fc82 	uxtb.w	ip, r2
    for (uint8_t i = 0; i < 11; i++) {
   10a82:	d1f3      	bne.n	10a6c <FatFile::open(FatFile*, FatLfn_t*, int)+0x254>
   10a84:	9b06      	ldr	r3, [sp, #24]
   10a86:	4563      	cmp	r3, ip
   10a88:	f47f af27 	bne.w	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
   10a8c:	464f      	mov	r7, r9
  if (oflag & O_EXCL) {
   10a8e:	9b03      	ldr	r3, [sp, #12]
   10a90:	0519      	lsls	r1, r3, #20
   10a92:	f53f af22 	bmi.w	108da <FatFile::open(FatFile*, FatLfn_t*, int)+0xc2>
   10a96:	e7db      	b.n	10a50 <FatFile::open(FatFile*, FatLfn_t*, int)+0x238>
   10a98:	461f      	mov	r7, r3
   10a9a:	e7f8      	b.n	10a8e <FatFile::open(FatFile*, FatLfn_t*, int)+0x276>
   10a9c:	f645 0321 	movw	r3, #22561	; 0x5821
   10aa0:	8223      	strh	r3, [r4, #16]
   10aa2:	8323      	strh	r3, [r4, #24]
   10aa4:	8263      	strh	r3, [r4, #18]
    if (FS_DEFAULT_TIME) {
   10aa6:	e7cc      	b.n	10a42 <FatFile::open(FatFile*, FatLfn_t*, int)+0x22a>
   10aa8:	4ec4ec4f 	.word	0x4ec4ec4f
   10aac:	2000502c 	.word	0x2000502c

00010ab0 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            FatLfn_t* fname, const char** ptr) {
   10ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ab4:	461f      	mov	r7, r3
  size_t len = 0;
  // Skip leading spaces.
  while (*path == ' ') {
   10ab6:	780b      	ldrb	r3, [r1, #0]
                            FatLfn_t* fname, const char** ptr) {
   10ab8:	b082      	sub	sp, #8
   10aba:	460c      	mov	r4, r1
  while (*path == ' ') {
   10abc:	2b20      	cmp	r3, #32
                            FatLfn_t* fname, const char** ptr) {
   10abe:	4615      	mov	r5, r2
  while (*path == ' ') {
   10ac0:	d103      	bne.n	10aca <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x1a>
   10ac2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   10ac6:	2b20      	cmp	r3, #32
   10ac8:	d0fb      	beq.n	10ac2 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x12>
    path++;
  }
  fname->begin = path;
   10aca:	602c      	str	r4, [r5, #0]
  while (*path && !isDirSeparator(*path)) {
   10acc:	7823      	ldrb	r3, [r4, #0]
   10ace:	b363      	cbz	r3, 10b2a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
   10ad0:	2b2f      	cmp	r3, #47	; 0x2f
   10ad2:	d02a      	beq.n	10b2a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
  size_t len = 0;
   10ad4:	f04f 0800 	mov.w	r8, #0
   10ad8:	4e29      	ldr	r6, [pc, #164]	; (10b80 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xd0>)
#if USE_UTF8_LONG_NAMES
    uint32_t cp;
    // Allow end = path + 4 since path is zero terminated.
    path = FsUtf::mbToCp(path, path + 4, &cp);
   10ada:	1d21      	adds	r1, r4, #4
   10adc:	4620      	mov	r0, r4
   10ade:	aa01      	add	r2, sp, #4
   10ae0:	f003 fbfe 	bl	142e0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!path) {
   10ae4:	4604      	mov	r4, r0
   10ae6:	b170      	cbz	r0, 10b06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      DBG_FAIL_MACRO;
      goto fail;
    }
    len += cp <= 0XFFFF ? 1 : 2;
   10ae8:	9b01      	ldr	r3, [sp, #4]
   10aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   10aee:	d240      	bcs.n	10b72 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xc2>
    if (cp < 0X80 && lfnReservedChar(cp)) {
   10af0:	2b7f      	cmp	r3, #127	; 0x7f
    len += cp <= 0XFFFF ? 1 : 2;
   10af2:	f108 0801 	add.w	r8, r8, #1
    if (cp < 0X80 && lfnReservedChar(cp)) {
   10af6:	d831      	bhi.n	10b5c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
   10af8:	2b3c      	cmp	r3, #60	; 0x3c
   10afa:	b2d9      	uxtb	r1, r3
   10afc:	d829      	bhi.n	10b52 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xa2>
   10afe:	2921      	cmp	r1, #33	; 0x21
   10b00:	d805      	bhi.n	10b0e <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x5e>
   10b02:	291f      	cmp	r1, #31
   10b04:	d809      	bhi.n	10b1a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x6a>
  *ptr = path;
  return makeSFN(fname);

 fail:
  return false;
}
   10b06:	2000      	movs	r0, #0
   10b08:	b002      	add	sp, #8
   10b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10b0e:	3922      	subs	r1, #34	; 0x22
   10b10:	b2c9      	uxtb	r1, r1
   10b12:	fa26 f101 	lsr.w	r1, r6, r1
   10b16:	07ca      	lsls	r2, r1, #31
   10b18:	d4f5      	bmi.n	10b06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
    if (cp != '.' && cp != ' ') {
   10b1a:	2b2e      	cmp	r3, #46	; 0x2e
   10b1c:	d001      	beq.n	10b22 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   10b1e:	2b20      	cmp	r3, #32
   10b20:	d11c      	bne.n	10b5c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
  while (*path && !isDirSeparator(*path)) {
   10b22:	7823      	ldrb	r3, [r4, #0]
   10b24:	b10b      	cbz	r3, 10b2a <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x7a>
   10b26:	2b2f      	cmp	r3, #47	; 0x2f
   10b28:	d1d7      	bne.n	10ada <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x2a>
  if (!fname->len || fname->len > FAT_MAX_LFN_LENGTH) {
   10b2a:	692b      	ldr	r3, [r5, #16]
   10b2c:	3b01      	subs	r3, #1
   10b2e:	2bfe      	cmp	r3, #254	; 0xfe
   10b30:	d8e9      	bhi.n	10b06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
  for (; *path == ' ' || isDirSeparator(*path); path++) {}
   10b32:	7823      	ldrb	r3, [r4, #0]
   10b34:	2b20      	cmp	r3, #32
   10b36:	d103      	bne.n	10b40 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x90>
   10b38:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   10b3c:	2b20      	cmp	r3, #32
   10b3e:	d0fb      	beq.n	10b38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
   10b40:	2b2f      	cmp	r3, #47	; 0x2f
   10b42:	d0f9      	beq.n	10b38 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x88>
  return makeSFN(fname);
   10b44:	4628      	mov	r0, r5
  *ptr = path;
   10b46:	603c      	str	r4, [r7, #0]
}
   10b48:	b002      	add	sp, #8
   10b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return makeSFN(fname);
   10b4e:	f7ff bd55 	b.w	105fc <FatFile::makeSFN(FatLfn_t*)>
   10b52:	295c      	cmp	r1, #92	; 0x5c
   10b54:	d0d7      	beq.n	10b06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
   10b56:	d905      	bls.n	10b64 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xb4>
   10b58:	297c      	cmp	r1, #124	; 0x7c
   10b5a:	d0d4      	beq.n	10b06 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x56>
      fname->len = len;
   10b5c:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
   10b60:	60ac      	str	r4, [r5, #8]
   10b62:	e7de      	b.n	10b22 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   10b64:	393e      	subs	r1, #62	; 0x3e
   10b66:	2901      	cmp	r1, #1
   10b68:	d8f8      	bhi.n	10b5c <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0xac>
}
   10b6a:	2000      	movs	r0, #0
   10b6c:	b002      	add	sp, #8
   10b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    len += cp <= 0XFFFF ? 1 : 2;
   10b72:	f108 0802 	add.w	r8, r8, #2
      fname->end = path;
   10b76:	60ac      	str	r4, [r5, #8]
      fname->len = len;
   10b78:	f8c5 8010 	str.w	r8, [r5, #16]
      fname->end = path;
   10b7c:	e7d1      	b.n	10b22 <FatFile::parsePathName(char const*, FatLfn_t*, char const**)+0x72>
   10b7e:	bf00      	nop
   10b80:	05002101 	.word	0x05002101

00010b84 <FatFile::remove()>:
//------------------------------------------------------------------------------
bool FatFile::remove() {
   10b84:	b5f0      	push	{r4, r5, r6, r7, lr}
  FatFile() {}
   10b86:	2300      	movs	r3, #0
   10b88:	b08b      	sub	sp, #44	; 0x2c
   10b8a:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  DirFat_t* dir;
  DirLfn_t* ldir;

  // Cant' remove not open for write.
  if (!isWritable()) {
   10b8c:	7883      	ldrb	r3, [r0, #2]
   10b8e:	079a      	lsls	r2, r3, #30
   10b90:	d524      	bpl.n	10bdc <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   10b92:	6a01      	ldr	r1, [r0, #32]
   10b94:	4605      	mov	r5, r0
   10b96:	b119      	cbz	r1, 10ba0 <FatFile::remove()+0x1c>
   10b98:	6880      	ldr	r0, [r0, #8]
   10b9a:	f000 fe19 	bl	117d0 <FatPartition::freeChain(unsigned long)>
   10b9e:	b1e8      	cbz	r0, 10bdc <FatFile::remove()+0x58>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
   10ba0:	2101      	movs	r1, #1
   10ba2:	4628      	mov	r0, r5
   10ba4:	f7fe fcd0 	bl	f548 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   10ba8:	b1c0      	cbz	r0, 10bdc <FatFile::remove()+0x58>
    for (uint8_t i = 0; i < 11; i++) {
   10baa:	1e42      	subs	r2, r0, #1
   10bac:	f100 0c0a 	add.w	ip, r0, #10
    uint8_t sum = 0;
   10bb0:	2400      	movs	r4, #0
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10bb2:	01e3      	lsls	r3, r4, #7
   10bb4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   10bb8:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    for (uint8_t i = 0; i < 11; i++) {
   10bbc:	4594      	cmp	ip, r2
        sum = (((sum & 1) << 7) | (sum >> 1)) + name[i];
   10bbe:	fa51 f383 	uxtab	r3, r1, r3
   10bc2:	b2dc      	uxtb	r4, r3
    for (uint8_t i = 0; i < 11; i++) {
   10bc4:	d1f5      	bne.n	10bb2 <FatFile::remove()+0x2e>
    goto fail;
  }
  checksum = lfnChecksum(dir->name);

  // Mark entry deleted.
  dir->name[0] = FAT_NAME_DELETED;
   10bc6:	26e5      	movs	r6, #229	; 0xe5

  // Set this file closed.
  m_attributes = FILE_ATTR_CLOSED;
   10bc8:	2300      	movs	r3, #0
  dir->name[0] = FAT_NAME_DELETED;
   10bca:	7006      	strb	r6, [r0, #0]
  m_flags = 0;

  // Write entry to device.
  if (!m_vol->cacheSync()) {
   10bcc:	68af      	ldr	r7, [r5, #8]
  m_attributes = FILE_ATTR_CLOSED;
   10bce:	702b      	strb	r3, [r5, #0]
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   10bd0:	f107 0028 	add.w	r0, r7, #40	; 0x28
  m_flags = 0;
   10bd4:	70ab      	strb	r3, [r5, #2]
   10bd6:	f003 fa51 	bl	1407c <FsCache::sync()>
   10bda:	b910      	cbnz	r0, 10be2 <FatFile::remove()+0x5e>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

 fail:
  return false;
   10bdc:	2000      	movs	r0, #0
}
   10bde:	b00b      	add	sp, #44	; 0x2c
   10be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10be2:	f507 700e 	add.w	r0, r7, #568	; 0x238
   10be6:	f003 fa49 	bl	1407c <FsCache::sync()>
   10bea:	2800      	cmp	r0, #0
   10bec:	d0f6      	beq.n	10bdc <FatFile::remove()+0x58>
   10bee:	6838      	ldr	r0, [r7, #0]
    return m_blockDev->syncDevice();
   10bf0:	6803      	ldr	r3, [r0, #0]
   10bf2:	6a1b      	ldr	r3, [r3, #32]
   10bf4:	4798      	blx	r3
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
   10bf6:	2800      	cmp	r0, #0
   10bf8:	d0f0      	beq.n	10bdc <FatFile::remove()+0x58>
  if (!isLFN()) {
   10bfa:	78eb      	ldrb	r3, [r5, #3]
   10bfc:	2b00      	cmp	r3, #0
   10bfe:	d0ee      	beq.n	10bde <FatFile::remove()+0x5a>
  if (!dirFile.openCluster(this)) {
   10c00:	4629      	mov	r1, r5
   10c02:	a801      	add	r0, sp, #4
   10c04:	f7fe fec0 	bl	f988 <FatFile::openCluster(FatFile*)>
   10c08:	2800      	cmp	r0, #0
   10c0a:	d0e7      	beq.n	10bdc <FatFile::remove()+0x58>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   10c0c:	78eb      	ldrb	r3, [r5, #3]
   10c0e:	2b00      	cmp	r3, #0
   10c10:	d0e4      	beq.n	10bdc <FatFile::remove()+0x58>
   10c12:	2701      	movs	r7, #1
   10c14:	e021      	b.n	10c5a <FatFile::remove()+0xd6>
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   10c16:	a801      	add	r0, sp, #4
   10c18:	f7fe ffea 	bl	fbf0 <FatFile::readDirCache(bool)>
   10c1c:	1c7b      	adds	r3, r7, #1
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   10c1e:	b2f9      	uxtb	r1, r7
    if (!ldir) {
   10c20:	2800      	cmp	r0, #0
   10c22:	d0db      	beq.n	10bdc <FatFile::remove()+0x58>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   10c24:	7ac2      	ldrb	r2, [r0, #11]
   10c26:	2a0f      	cmp	r2, #15
   10c28:	d1d8      	bne.n	10bdc <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
   10c2a:	7802      	ldrb	r2, [r0, #0]
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   10c2c:	fa5f fc83 	uxtb.w	ip, r3
   10c30:	b29f      	uxth	r7, r3
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   10c32:	f002 031f 	and.w	r3, r2, #31
   10c36:	428b      	cmp	r3, r1
   10c38:	d1d0      	bne.n	10bdc <FatFile::remove()+0x58>
        order != (ldir->order & 0X1F) ||
   10c3a:	7b43      	ldrb	r3, [r0, #13]
   10c3c:	42a3      	cmp	r3, r4
   10c3e:	d1cd      	bne.n	10bdc <FatFile::remove()+0x58>
    ldir->order = FAT_NAME_DELETED;
   10c40:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
   10c42:	68a9      	ldr	r1, [r5, #8]
   10c44:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
   10c48:	f043 0301 	orr.w	r3, r3, #1
   10c4c:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
    if (last) {
   10c50:	0653      	lsls	r3, r2, #25
   10c52:	d40d      	bmi.n	10c70 <FatFile::remove()+0xec>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   10c54:	78eb      	ldrb	r3, [r5, #3]
   10c56:	4563      	cmp	r3, ip
   10c58:	d3c0      	bcc.n	10bdc <FatFile::remove()+0x58>
    ldir = reinterpret_cast<DirLfn_t*>(dirFile.cacheDir(m_dirIndex - order));
   10c5a:	88a9      	ldrh	r1, [r5, #4]
   10c5c:	a801      	add	r0, sp, #4
   10c5e:	1bc9      	subs	r1, r1, r7
   10c60:	b289      	uxth	r1, r1
   10c62:	0149      	lsls	r1, r1, #5
   10c64:	f7ff f924 	bl	feb0 <FatFile::seekSet(unsigned long)>
   10c68:	2100      	movs	r1, #0
   10c6a:	2800      	cmp	r0, #0
   10c6c:	d1d3      	bne.n	10c16 <FatFile::remove()+0x92>
   10c6e:	e7b5      	b.n	10bdc <FatFile::remove()+0x58>
      if (!m_vol->cacheSync()) {
   10c70:	68ac      	ldr	r4, [r5, #8]
   10c72:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10c76:	f003 fa01 	bl	1407c <FsCache::sync()>
   10c7a:	2800      	cmp	r0, #0
   10c7c:	d0ae      	beq.n	10bdc <FatFile::remove()+0x58>
   10c7e:	f504 700e 	add.w	r0, r4, #568	; 0x238
   10c82:	f003 f9fb 	bl	1407c <FsCache::sync()>
   10c86:	2800      	cmp	r0, #0
   10c88:	d0a8      	beq.n	10bdc <FatFile::remove()+0x58>
   10c8a:	6820      	ldr	r0, [r4, #0]
    return m_blockDev->syncDevice();
   10c8c:	6803      	ldr	r3, [r0, #0]
   10c8e:	6a1b      	ldr	r3, [r3, #32]
   10c90:	4798      	blx	r3
   10c92:	e7a4      	b.n	10bde <FatFile::remove()+0x5a>

00010c94 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
   * \param[in] ns Number of sectors to be written.
   * \param[in] callback Function to be called for each sector's data
   * \param[in] context Context to pass to callback function
   * \return true for success or false for failure.
   */
  virtual bool writeSectorsCallback(uint32_t sector, size_t ns,
   10c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10c98:	f8dd 9020 	ldr.w	r9, [sp, #32]
   const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
     for (size_t i = 0; i < ns; i++) {
   10c9c:	b1a2      	cbz	r2, 10cc8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
   10c9e:	4605      	mov	r5, r0
   10ca0:	460c      	mov	r4, r1
   10ca2:	4698      	mov	r8, r3
   10ca4:	1857      	adds	r7, r2, r1
   10ca6:	e001      	b.n	10cac <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x18>
   10ca8:	42bc      	cmp	r4, r7
   10caa:	d00d      	beq.n	10cc8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x34>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   10cac:	682b      	ldr	r3, [r5, #0]
   10cae:	4620      	mov	r0, r4
   10cb0:	4649      	mov	r1, r9
   10cb2:	6a5e      	ldr	r6, [r3, #36]	; 0x24
   10cb4:	47c0      	blx	r8
   10cb6:	4621      	mov	r1, r4
   10cb8:	4602      	mov	r2, r0
   10cba:	4628      	mov	r0, r5
     for (size_t i = 0; i < ns; i++) {
   10cbc:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   10cbe:	47b0      	blx	r6
   10cc0:	2800      	cmp	r0, #0
   10cc2:	d1f1      	bne.n	10ca8 <FsBlockDeviceInterface::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
     }
    return true;
  }
   10cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return true;
   10cc8:	2001      	movs	r0, #1
  }
   10cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10cce:	bf00      	nop

00010cd0 <initFatDirCallback(unsigned long, void*)>:
  uint16_t count;
  uint16_t dotcount;
};
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
  struct initFatDirState * state = (struct initFatDirState *)context;
  if (state->pr && ++state->count >= state->dotcount) {
   10cd0:	6848      	ldr	r0, [r1, #4]
static const uint8_t * initFatDirCallback(uint32_t sector, void *context) {
   10cd2:	b510      	push	{r4, lr}
   10cd4:	460c      	mov	r4, r1
  if (state->pr && ++state->count >= state->dotcount) {
   10cd6:	b130      	cbz	r0, 10ce6 <initFatDirCallback(unsigned long, void*)+0x16>
   10cd8:	890b      	ldrh	r3, [r1, #8]
   10cda:	894a      	ldrh	r2, [r1, #10]
   10cdc:	3301      	adds	r3, #1
   10cde:	b29b      	uxth	r3, r3
   10ce0:	429a      	cmp	r2, r3
   10ce2:	810b      	strh	r3, [r1, #8]
   10ce4:	d901      	bls.n	10cea <initFatDirCallback(unsigned long, void*)+0x1a>
    state->pr->write(".");
    state->count = 0;
  }
  return state->buffer;
}
   10ce6:	6820      	ldr	r0, [r4, #0]
   10ce8:	bd10      	pop	{r4, pc}
   10cea:	6803      	ldr	r3, [r0, #0]
   10cec:	2201      	movs	r2, #1
   10cee:	4903      	ldr	r1, [pc, #12]	; (10cfc <initFatDirCallback(unsigned long, void*)+0x2c>)
   10cf0:	685b      	ldr	r3, [r3, #4]
   10cf2:	4798      	blx	r3
    state->count = 0;
   10cf4:	2300      	movs	r3, #0
}
   10cf6:	6820      	ldr	r0, [r4, #0]
    state->count = 0;
   10cf8:	8123      	strh	r3, [r4, #8]
}
   10cfa:	bd10      	pop	{r4, pc}
   10cfc:	20002f04 	.word	0x20002f04

00010d00 <FatFormatter::initFatDir(unsigned char, unsigned long)>:
bool FatFormatter::initFatDir(uint8_t fatType, uint32_t sectorCount) {
   10d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d04:	4605      	mov	r5, r0
   10d06:	b087      	sub	sp, #28
   10d08:	4688      	mov	r8, r1
   10d0a:	4692      	mov	sl, r2
  size_t n;
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   10d0c:	2100      	movs	r1, #0
   10d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
   10d12:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10d14:	f011 fbe4 	bl	224e0 <memset>
  writeMsg("Writing FAT ");
   10d18:	6a28      	ldr	r0, [r5, #32]
   10d1a:	b128      	cbz	r0, 10d28 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x28>
   10d1c:	6803      	ldr	r3, [r0, #0]
   10d1e:	220c      	movs	r2, #12
   10d20:	493a      	ldr	r1, [pc, #232]	; (10e0c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x10c>)
   10d22:	685b      	ldr	r3, [r3, #4]
   10d24:	4798      	blx	r3
  struct initFatDirState state;
  state.buffer = m_secBuf;
  state.pr = m_pr;
   10d26:	6a28      	ldr	r0, [r5, #32]
  state.buffer = m_secBuf;
   10d28:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  state.count = 0;
   10d2a:	f04f 0900 	mov.w	r9, #0
  state.dotcount = sectorCount/32;
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   10d2e:	69ee      	ldr	r6, [r5, #28]
   10d30:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
   10d34:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 10e18 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x118>
   10d38:	68e9      	ldr	r1, [r5, #12]
  state.count = 0;
   10d3a:	f8ad 9014 	strh.w	r9, [sp, #20]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   10d3e:	1c4c      	adds	r4, r1, #1
  state.buffer = m_secBuf;
   10d40:	e9cd 3003 	strd	r3, r0, [sp, #12]
  state.dotcount = sectorCount/32;
   10d44:	ea4f 135a 	mov.w	r3, sl, lsr #5
   10d48:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   10d4c:	6833      	ldr	r3, [r6, #0]
   10d4e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
   10d50:	4567      	cmp	r7, ip
   10d52:	d126      	bne.n	10da2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xa2>
     for (size_t i = 0; i < ns; i++) {
   10d54:	b36a      	cbz	r2, 10db2 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb2>
   10d56:	eb01 070a 	add.w	r7, r1, sl
   10d5a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 10e1c <FatFormatter::initFatDir(unsigned char, unsigned long)+0x11c>
   10d5e:	e00a      	b.n	10d76 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x76>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   10d60:	4621      	mov	r1, r4
   10d62:	9a03      	ldr	r2, [sp, #12]
   10d64:	4630      	mov	r0, r6
     for (size_t i = 0; i < ns; i++) {
   10d66:	3401      	adds	r4, #1
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   10d68:	47d8      	blx	fp
   10d6a:	2800      	cmp	r0, #0
   10d6c:	d03f      	beq.n	10dee <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     for (size_t i = 0; i < ns; i++) {
   10d6e:	42a7      	cmp	r7, r4
   10d70:	d01e      	beq.n	10db0 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xb0>
       if (!writeSector(sector + i, callback(sector + i, context))) return false;
   10d72:	6833      	ldr	r3, [r6, #0]
  if (state->pr && ++state->count >= state->dotcount) {
   10d74:	9804      	ldr	r0, [sp, #16]
   10d76:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
   10d7a:	2800      	cmp	r0, #0
   10d7c:	d0f0      	beq.n	10d60 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
   10d7e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   10d82:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10d86:	3301      	adds	r3, #1
   10d88:	b29b      	uxth	r3, r3
   10d8a:	429a      	cmp	r2, r3
   10d8c:	f8ad 3014 	strh.w	r3, [sp, #20]
   10d90:	d8e6      	bhi.n	10d60 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
   10d92:	6803      	ldr	r3, [r0, #0]
   10d94:	4651      	mov	r1, sl
   10d96:	2201      	movs	r2, #1
   10d98:	685b      	ldr	r3, [r3, #4]
   10d9a:	4798      	blx	r3
    state->count = 0;
   10d9c:	f8ad 9014 	strh.w	r9, [sp, #20]
   10da0:	e7de      	b.n	10d60 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x60>
  if (!m_dev->writeSectorsCallback(m_fatStart + 1, sectorCount - 1, initFatDirCallback, &state)) {
   10da2:	ab03      	add	r3, sp, #12
   10da4:	4621      	mov	r1, r4
   10da6:	4630      	mov	r0, r6
   10da8:	9300      	str	r3, [sp, #0]
   10daa:	4b19      	ldr	r3, [pc, #100]	; (10e10 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x110>)
   10dac:	47b8      	blx	r7
   10dae:	b1f0      	cbz	r0, 10dee <FatFormatter::initFatDir(unsigned char, unsigned long)+0xee>
     return false;
  }
  writeMsg("\r\n");
   10db0:	6a28      	ldr	r0, [r5, #32]
   10db2:	b120      	cbz	r0, 10dbe <FatFormatter::initFatDir(unsigned char, unsigned long)+0xbe>
   10db4:	6803      	ldr	r3, [r0, #0]
   10db6:	2202      	movs	r2, #2
   10db8:	4916      	ldr	r1, [pc, #88]	; (10e14 <FatFormatter::initFatDir(unsigned char, unsigned long)+0x114>)
   10dba:	685b      	ldr	r3, [r3, #4]
   10dbc:	4798      	blx	r3
  // Allocate reserved clusters and root for FAT32.
  m_secBuf[0] = 0XF8;
  n = fatType == 16 ? 4 : 12;
   10dbe:	f1b8 0f10 	cmp.w	r8, #16
  m_secBuf[0] = 0XF8;
   10dc2:	f04f 01f8 	mov.w	r1, #248	; 0xf8
   10dc6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  for (size_t i = 1; i < n; i++) {
   10dc8:	f04f 0301 	mov.w	r3, #1
  n = fatType == 16 ? 4 : 12;
   10dcc:	bf0c      	ite	eq
   10dce:	2004      	moveq	r0, #4
   10dd0:	200c      	movne	r0, #12
  m_secBuf[0] = 0XF8;
   10dd2:	7011      	strb	r1, [r2, #0]
    m_secBuf[i] = 0XFF;
   10dd4:	21ff      	movs	r1, #255	; 0xff
   10dd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10dd8:	54d1      	strb	r1, [r2, r3]
  for (size_t i = 1; i < n; i++) {
   10dda:	3301      	adds	r3, #1
   10ddc:	4298      	cmp	r0, r3
   10dde:	d1fa      	bne.n	10dd6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xd6>
  }
  return m_dev->writeSector(m_fatStart, m_secBuf) &&
   10de0:	69e8      	ldr	r0, [r5, #28]
   10de2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10de4:	6803      	ldr	r3, [r0, #0]
   10de6:	68e9      	ldr	r1, [r5, #12]
   10de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10dea:	4798      	blx	r3
   10dec:	b918      	cbnz	r0, 10df6 <FatFormatter::initFatDir(unsigned char, unsigned long)+0xf6>
     return false;
   10dee:	2000      	movs	r0, #0
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
}
   10df0:	b007      	add	sp, #28
   10df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         m_dev->writeSector(m_fatStart + m_fatSize, m_secBuf);
   10df6:	e9d5 3102 	ldrd	r3, r1, [r5, #8]
   10dfa:	69e8      	ldr	r0, [r5, #28]
   10dfc:	4419      	add	r1, r3
   10dfe:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10e00:	6803      	ldr	r3, [r0, #0]
   10e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10e04:	4798      	blx	r3
}
   10e06:	b007      	add	sp, #28
   10e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e0c:	20000f10 	.word	0x20000f10
   10e10:	00010cd1 	.word	0x00010cd1
   10e14:	20000f34 	.word	0x20000f34
   10e18:	00010c95 	.word	0x00010c95
   10e1c:	20002f04 	.word	0x20002f04

00010e20 <FatFormatter::initPbs()>:
//------------------------------------------------------------------------------
void FatFormatter::initPbs() {
   10e20:	b538      	push	{r3, r4, r5, lr}
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   10e22:	6a43      	ldr	r3, [r0, #36]	; 0x24
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   10e24:	f44f 7500 	mov.w	r5, #512	; 0x200
void FatFormatter::initPbs() {
   10e28:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   10e2a:	2100      	movs	r1, #0
   10e2c:	462a      	mov	r2, r5
   10e2e:	4618      	mov	r0, r3
   10e30:	f011 fb56 	bl	224e0 <memset>
  pbs->jmpInstruction[0] = 0XEB;
  pbs->jmpInstruction[1] = 0X76;
  pbs->jmpInstruction[2] = 0X90;
  for (uint8_t i = 0; i < sizeof(pbs->oemName); i++) {
    pbs->oemName[i] = ' ';
   10e34:	f04f 3120 	mov.w	r1, #538976288	; 0x20202020
  pbs->jmpInstruction[0] = 0XEB;
   10e38:	22eb      	movs	r2, #235	; 0xeb
   10e3a:	f8a0 500b 	strh.w	r5, [r0, #11]
    pbs->oemName[i] = ' ';
   10e3e:	f8c0 1003 	str.w	r1, [r0, #3]
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   10e42:	4603      	mov	r3, r0
    pbs->oemName[i] = ' ';
   10e44:	f8c0 1007 	str.w	r1, [r0, #7]
  pbs->jmpInstruction[2] = 0X90;
   10e48:	2190      	movs	r1, #144	; 0x90
  pbs->jmpInstruction[0] = 0XEB;
   10e4a:	7002      	strb	r2, [r0, #0]
  pbs->jmpInstruction[1] = 0X76;
   10e4c:	2076      	movs	r0, #118	; 0x76
  pbs->jmpInstruction[2] = 0X90;
   10e4e:	7099      	strb	r1, [r3, #2]
  }
  setLe16(pbs->bpb.bpb16.bytesPerSector, BYTES_PER_SECTOR);
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
  pbs->bpb.bpb16.fatCount = 2;
   10e50:	2202      	movs	r2, #2
  pbs->jmpInstruction[1] = 0X76;
   10e52:	7058      	strb	r0, [r3, #1]
  pbs->bpb.bpb16.sectorsPerCluster = m_sectorsPerCluster;
   10e54:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
   10e58:	7359      	strb	r1, [r3, #13]
   10e5a:	f64a 2155 	movw	r1, #43605	; 0xaa55
  setLe16(pbs->bpb.bpb16.reservedSectorCount, m_reservedSectorCount);
   10e5e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
  pbs->bpb.bpb16.fatCount = 2;
   10e60:	741a      	strb	r2, [r3, #16]
  // skip rootDirEntryCount
  // skip totalSectors16
  pbs->bpb.bpb16.mediaType = 0XF8;
   10e62:	22f8      	movs	r2, #248	; 0xf8
   10e64:	81d8      	strh	r0, [r3, #14]
   10e66:	755a      	strb	r2, [r3, #21]
  // skip sectorsPerFat16
  // skip sectorsPerTrack
  // skip headCount
  setLe32(pbs->bpb.bpb16.hidddenSectors, m_relativeSectors);
   10e68:	6922      	ldr	r2, [r4, #16]
  *reinterpret_cast<uint32_t*>(dst) = src;
   10e6a:	61da      	str	r2, [r3, #28]
  setLe32(pbs->bpb.bpb16.totalSectors32, m_totalSectors);
   10e6c:	69a2      	ldr	r2, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
   10e6e:	f8a3 11fe 	strh.w	r1, [r3, #510]	; 0x1fe
  *reinterpret_cast<uint32_t*>(dst) = src;
   10e72:	621a      	str	r2, [r3, #32]
  // skip rest of bpb
  setLe16(pbs->signature, PBR_SIGNATURE);
}
   10e74:	bd38      	pop	{r3, r4, r5, pc}
   10e76:	bf00      	nop

00010e78 <FatFormatter::writeMbr()>:
    return false;
  }
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
}
//------------------------------------------------------------------------------
bool FatFormatter::writeMbr() {
   10e78:	b570      	push	{r4, r5, r6, lr}
   10e7a:	4604      	mov	r4, r0
  memset(m_secBuf, 0, BYTES_PER_SECTOR);
   10e7c:	f44f 7200 	mov.w	r2, #512	; 0x200
   10e80:	2100      	movs	r1, #0
   10e82:	6a40      	ldr	r0, [r0, #36]	; 0x24
   10e84:	f011 fb2c 	bl	224e0 <memset>
  MbrSector_t* mbr = reinterpret_cast<MbrSector_t*>(m_secBuf);
   10e88:	6a65      	ldr	r5, [r4, #36]	; 0x24

#if USE_LBA_TO_CHS
  lbaToMbrChs(mbr->part->beginCHS, m_capacityMB, m_relativeSectors);
   10e8a:	6922      	ldr	r2, [r4, #16]
   10e8c:	6821      	ldr	r1, [r4, #0]
   10e8e:	f205 10bf 	addw	r0, r5, #447	; 0x1bf
   10e92:	f003 f983 	bl	1419c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
              m_relativeSectors + m_totalSectors -1);
   10e96:	69a3      	ldr	r3, [r4, #24]
   10e98:	6922      	ldr	r2, [r4, #16]
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
   10e9a:	f205 10c3 	addw	r0, r5, #451	; 0x1c3
   10e9e:	6821      	ldr	r1, [r4, #0]
              m_relativeSectors + m_totalSectors -1);
   10ea0:	441a      	add	r2, r3
  lbaToMbrChs(mbr->part->endCHS, m_capacityMB,
   10ea2:	3a01      	subs	r2, #1
   10ea4:	f003 f97a 	bl	1419c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>
  mbr->part->endCHS[0] = 0XFE;
  mbr->part->endCHS[1] = 0XFF;
  mbr->part->endCHS[2] = 0XFF;
#endif  // USE_LBA_TO_CHS

  mbr->part->type = m_partType;
   10ea8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  *reinterpret_cast<uint16_t*>(dst) = src;
   10eac:	f64a 2355 	movw	r3, #43605	; 0xaa55
   10eb0:	f885 21c2 	strb.w	r2, [r5, #450]	; 0x1c2
  setLe32(mbr->part->relativeSectors, m_relativeSectors);
   10eb4:	6922      	ldr	r2, [r4, #16]
  setLe32(mbr->part->totalSectors, m_totalSectors);
  setLe16(mbr->signature, MBR_SIGNATURE);
  return m_dev->writeSector(0, m_secBuf);
   10eb6:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint32_t*>(dst) = src;
   10eb8:	f8c5 21c6 	str.w	r2, [r5, #454]	; 0x1c6
   10ebc:	6a62      	ldr	r2, [r4, #36]	; 0x24
  setLe32(mbr->part->totalSectors, m_totalSectors);
   10ebe:	69a1      	ldr	r1, [r4, #24]
  *reinterpret_cast<uint16_t*>(dst) = src;
   10ec0:	f8a5 31fe 	strh.w	r3, [r5, #510]	; 0x1fe
  return m_dev->writeSector(0, m_secBuf);
   10ec4:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
   10ec6:	f8c5 11ca 	str.w	r1, [r5, #458]	; 0x1ca
   10eca:	2100      	movs	r1, #0
   10ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
   10ece:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return m_dev->writeSector(0, m_secBuf);
   10ed2:	4718      	bx	r3

00010ed4 <FatFormatter::makeFat16()>:
bool FatFormatter::makeFat16() {
   10ed4:	b570      	push	{r4, r5, r6, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10ed6:	6946      	ldr	r6, [r0, #20]
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   10ed8:	f44f 7380 	mov.w	r3, #256	; 0x100
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10edc:	f890 e02b 	ldrb.w	lr, [r0, #43]	; 0x2b
bool FatFormatter::makeFat16() {
   10ee0:	4604      	mov	r4, r0
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10ee2:	f5a6 7280 	sub.w	r2, r6, #256	; 0x100
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   10ee6:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   10ee8:	6043      	str	r3, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10eea:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   10eee:	f202 1c01 	addw	ip, r2, #257	; 0x101
   10ef2:	ea4f 211c 	mov.w	r1, ip, lsr #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   10ef6:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   10efa:	6081      	str	r1, [r0, #8]
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   10efc:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
   10f00:	4298      	cmp	r0, r3
   10f02:	d90e      	bls.n	10f22 <FatFormatter::makeFat16()+0x4e>
  for (m_dataStart = 2*BU16; ; m_dataStart += BU16) {
   10f04:	3380      	adds	r3, #128	; 0x80
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10f06:	1af2      	subs	r2, r6, r3
   10f08:	fbb2 f2fe 	udiv	r2, r2, lr
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/2) - 1)/(BYTES_PER_SECTOR/2);
   10f0c:	f202 1101 	addw	r1, r2, #257	; 0x101
   10f10:	0a09      	lsrs	r1, r1, #8
    r = BU16 + 1 + 2*m_fatSize + FAT16_ROOT_SECTOR_COUNT;
   10f12:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   10f16:	f10c 00a1 	add.w	r0, ip, #161	; 0xa1
    if (m_dataStart >= r) {
   10f1a:	4283      	cmp	r3, r0
   10f1c:	d3f2      	bcc.n	10f04 <FatFormatter::makeFat16()+0x30>
   10f1e:	e9c4 3101 	strd	r3, r1, [r4, #4]
      m_relativeSectors = m_dataStart - r + BU16;
   10f22:	1a1b      	subs	r3, r3, r0
  if (nc < 4085 || nc >= 65525) {
   10f24:	f6a2 71f5 	subw	r1, r2, #4085	; 0xff5
      m_relativeSectors = m_dataStart - r + BU16;
   10f28:	f103 0080 	add.w	r0, r3, #128	; 0x80
  if (nc < 4085 || nc >= 65525) {
   10f2c:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
      m_relativeSectors = m_dataStart - r + BU16;
   10f30:	6120      	str	r0, [r4, #16]
  if (nc < 4085 || nc >= 65525) {
   10f32:	d24f      	bcs.n	10fd4 <FatFormatter::makeFat16()+0x100>
                   + 2*m_fatSize + m_reservedSectorCount + 32;
   10f34:	f10c 0c21 	add.w	ip, ip, #33	; 0x21
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   10f38:	3381      	adds	r3, #129	; 0x81
  if (!writeMbr()) {
   10f3a:	4620      	mov	r0, r4
                   + 2*m_fatSize + m_reservedSectorCount + 32;
   10f3c:	fb02 c20e 	mla	r2, r2, lr, ip
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   10f40:	60e3      	str	r3, [r4, #12]
    m_partType = 0X06;
   10f42:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  m_totalSectors = nc*m_sectorsPerCluster
   10f46:	61a2      	str	r2, [r4, #24]
    m_partType = 0X06;
   10f48:	bf34      	ite	cc
   10f4a:	2304      	movcc	r3, #4
   10f4c:	2306      	movcs	r3, #6
   10f4e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
  m_reservedSectorCount = 1;
   10f52:	2301      	movs	r3, #1
   10f54:	8523      	strh	r3, [r4, #40]	; 0x28
  if (!writeMbr()) {
   10f56:	f7ff ff8f 	bl	10e78 <FatFormatter::writeMbr()>
   10f5a:	b908      	cbnz	r0, 10f60 <FatFormatter::makeFat16()+0x8c>
}
   10f5c:	2000      	movs	r0, #0
   10f5e:	bd70      	pop	{r4, r5, r6, pc}
  initPbs();
   10f60:	4620      	mov	r0, r4
   10f62:	f7ff ff5d 	bl	10e20 <FatFormatter::initPbs()>
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
   10f66:	2229      	movs	r2, #41	; 0x29
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
   10f68:	68a1      	ldr	r1, [r4, #8]
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   10f6a:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb16.extSignature = EXTENDED_BOOT_SIGNATURE;
   10f6e:	f885 2026 	strb.w	r2, [r5, #38]	; 0x26
  pbs->bpb.bpb16.volumeType[0] = 'F';
   10f72:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   10f74:	f8c5 302f 	str.w	r3, [r5, #47]	; 0x2f
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
   10f78:	2080      	movs	r0, #128	; 0x80
  pbs->bpb.bpb16.volumeType[0] = 'F';
   10f7a:	f885 2036 	strb.w	r2, [r5, #54]	; 0x36
  pbs->bpb.bpb16.volumeType[2] = 'T';
   10f7e:	2254      	movs	r2, #84	; 0x54
    pbs->bpb.bpb16.volumeLabel[i] = ' ';
   10f80:	f8c5 302b 	str.w	r3, [r5, #43]	; 0x2b
   10f84:	f8c5 3032 	str.w	r3, [r5, #50]	; 0x32
  pbs->bpb.bpb16.volumeType[3] = '1';
   10f88:	2331      	movs	r3, #49	; 0x31
  pbs->bpb.bpb16.volumeType[2] = 'T';
   10f8a:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
  pbs->bpb.bpb16.volumeType[4] = '6';
   10f8e:	2236      	movs	r2, #54	; 0x36
  setLe16(pbs->bpb.bpb16.sectorsPerFat16, m_fatSize);
   10f90:	82e9      	strh	r1, [r5, #22]
  pbs->bpb.bpb16.volumeType[1] = 'A';
   10f92:	2141      	movs	r1, #65	; 0x41
  pbs->bpb.bpb16.volumeType[3] = '1';
   10f94:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
  pbs->bpb.bpb16.volumeType[1] = 'A';
   10f98:	f885 1037 	strb.w	r1, [r5, #55]	; 0x37
  *reinterpret_cast<uint16_t*>(dst) = src;
   10f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
  pbs->bpb.bpb16.physicalDriveNumber = 0X80;
   10fa0:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
  pbs->bpb.bpb16.volumeType[4] = '6';
   10fa4:	f885 203a 	strb.w	r2, [r5, #58]	; 0x3a
  *reinterpret_cast<uint32_t*>(dst) = src;
   10fa8:	4b0f      	ldr	r3, [pc, #60]	; (10fe8 <FatFormatter::makeFat16()+0x114>)
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)) {
   10faa:	69e0      	ldr	r0, [r4, #28]
   10fac:	f8c5 3027 	str.w	r3, [r5, #39]	; 0x27
   10fb0:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint16_t*>(dst) = src;
   10fb2:	f8a5 1011 	strh.w	r1, [r5, #17]
   10fb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10fb8:	6921      	ldr	r1, [r4, #16]
   10fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10fbc:	4798      	blx	r3
   10fbe:	2800      	cmp	r0, #0
   10fc0:	d0cc      	beq.n	10f5c <FatFormatter::makeFat16()+0x88>
  return initFatDir(16, m_dataStart - m_fatStart);
   10fc2:	6862      	ldr	r2, [r4, #4]
   10fc4:	4620      	mov	r0, r4
   10fc6:	68e3      	ldr	r3, [r4, #12]
   10fc8:	2110      	movs	r1, #16
   10fca:	1ad2      	subs	r2, r2, r3
}
   10fcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return initFatDir(16, m_dataStart - m_fatStart);
   10fd0:	f7ff be96 	b.w	10d00 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
   10fd4:	6a20      	ldr	r0, [r4, #32]
   10fd6:	2800      	cmp	r0, #0
   10fd8:	d0c0      	beq.n	10f5c <FatFormatter::makeFat16()+0x88>
   10fda:	6803      	ldr	r3, [r0, #0]
   10fdc:	2213      	movs	r2, #19
   10fde:	4903      	ldr	r1, [pc, #12]	; (10fec <FatFormatter::makeFat16()+0x118>)
   10fe0:	685b      	ldr	r3, [r3, #4]
   10fe2:	4798      	blx	r3
}
   10fe4:	2000      	movs	r0, #0
   10fe6:	bd70      	pop	{r4, r5, r6, pc}
   10fe8:	0012d687 	.word	0x0012d687
   10fec:	20000ee4 	.word	0x20000ee4

00010ff0 <FatFormatter::makeFat32()>:
bool FatFormatter::makeFat32() {
   10ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10ff2:	6946      	ldr	r6, [r0, #20]
  m_relativeSectors = BU32;
   10ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   10ff8:	f890 c02b 	ldrb.w	ip, [r0, #43]	; 0x2b
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   10ffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   11000:	f5a6 4180 	sub.w	r1, r6, #16384	; 0x4000
  m_relativeSectors = BU32;
   11004:	6103      	str	r3, [r0, #16]
    r = m_relativeSectors + 9 + 2*m_fatSize;
   11006:	f242 0e09 	movw	lr, #8201	; 0x2009
bool FatFormatter::makeFat32() {
   1100a:	4604      	mov	r4, r0
  PbsFat_t* pbs = reinterpret_cast<PbsFat_t*>(m_secBuf);
   1100c:	6a45      	ldr	r5, [r0, #36]	; 0x24
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   1100e:	6042      	str	r2, [r0, #4]
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   11010:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
   11014:	f101 0381 	add.w	r3, r1, #129	; 0x81
   11018:	09db      	lsrs	r3, r3, #7
   1101a:	6083      	str	r3, [r0, #8]
    r = m_relativeSectors + 9 + 2*m_fatSize;
   1101c:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
    if (m_dataStart >= r) {
   11020:	4290      	cmp	r0, r2
   11022:	f240 80b6 	bls.w	11192 <FatFormatter::makeFat32()+0x1a2>
  for (m_dataStart = 2*BU32; ; m_dataStart += BU32) {
   11026:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
    nc = (m_sectorCount - m_dataStart)/m_sectorsPerCluster;
   1102a:	1ab1      	subs	r1, r6, r2
   1102c:	fbb1 f1fc 	udiv	r1, r1, ip
    m_fatSize = (nc + 2 + (BYTES_PER_SECTOR/4) - 1)/(BYTES_PER_SECTOR/4);
   11030:	f101 0381 	add.w	r3, r1, #129	; 0x81
   11034:	09db      	lsrs	r3, r3, #7
    r = m_relativeSectors + 9 + 2*m_fatSize;
   11036:	eb0e 0043 	add.w	r0, lr, r3, lsl #1
   1103a:	005f      	lsls	r7, r3, #1
    if (m_dataStart >= r) {
   1103c:	4282      	cmp	r2, r0
   1103e:	d3f2      	bcc.n	11026 <FatFormatter::makeFat32()+0x36>
   11040:	e9c4 2301 	strd	r2, r3, [r4, #4]
  if (nc < 65525) {
   11044:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   11048:	4299      	cmp	r1, r3
   1104a:	f240 8097 	bls.w	1117c <FatFormatter::makeFat32()+0x18c>
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   1104e:	fb01 2c0c 	mla	ip, r1, ip, r2
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   11052:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  if (!writeMbr()) {
   11056:	4620      	mov	r0, r4
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   11058:	1bd2      	subs	r2, r2, r7
   1105a:	b292      	uxth	r2, r2
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   1105c:	f502 5300 	add.w	r3, r2, #8192	; 0x2000
  m_reservedSectorCount = m_dataStart - m_relativeSectors - 2*m_fatSize;
   11060:	8522      	strh	r2, [r4, #40]	; 0x28
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
   11062:	4a4d      	ldr	r2, [pc, #308]	; (11198 <FatFormatter::makeFat32()+0x1a8>)
  m_fatStart = m_relativeSectors + m_reservedSectorCount;
   11064:	60e3      	str	r3, [r4, #12]
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   11066:	f5ac 5300 	sub.w	r3, ip, #8192	; 0x2000
    m_partType = 0X0C;
   1106a:	4594      	cmp	ip, r2
   1106c:	bf94      	ite	ls
   1106e:	f04f 0c0b 	movls.w	ip, #11
   11072:	f04f 0c0c 	movhi.w	ip, #12
  m_totalSectors = nc*m_sectorsPerCluster + m_dataStart - m_relativeSectors;
   11076:	61a3      	str	r3, [r4, #24]
  if ((m_relativeSectors + m_totalSectors) <= 16450560) {
   11078:	f884 c02a 	strb.w	ip, [r4, #42]	; 0x2a
  if (!writeMbr()) {
   1107c:	f7ff fefc 	bl	10e78 <FatFormatter::writeMbr()>
   11080:	b908      	cbnz	r0, 11086 <FatFormatter::makeFat32()+0x96>
}
   11082:	2000      	movs	r0, #0
   11084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  initPbs();
   11086:	4620      	mov	r0, r4
   11088:	f7ff feca 	bl	10e20 <FatFormatter::initPbs()>
  setLe32(pbs->bpb.bpb32.sectorsPerFat32, m_fatSize);
   1108c:	68a1      	ldr	r1, [r4, #8]
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
   1108e:	2229      	movs	r2, #41	; 0x29
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   11090:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
   11094:	2080      	movs	r0, #128	; 0x80
  *reinterpret_cast<uint32_t*>(dst) = src;
   11096:	6269      	str	r1, [r5, #36]	; 0x24
  pbs->bpb.bpb32.extSignature = EXTENDED_BOOT_SIGNATURE;
   11098:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
  pbs->bpb.bpb32.volumeType[2] = 'T';
   1109c:	2154      	movs	r1, #84	; 0x54
  pbs->bpb.bpb32.volumeType[0] = 'F';
   1109e:	2246      	movs	r2, #70	; 0x46
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   110a0:	f8c5 304b 	str.w	r3, [r5, #75]	; 0x4b
  pbs->bpb.bpb32.physicalDriveNumber = 0X80;
   110a4:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  pbs->bpb.bpb32.volumeType[1] = 'A';
   110a8:	2041      	movs	r0, #65	; 0x41
    pbs->bpb.bpb32.volumeLabel[i] = ' ';
   110aa:	f8c5 3047 	str.w	r3, [r5, #71]	; 0x47
   110ae:	f8c5 304e 	str.w	r3, [r5, #78]	; 0x4e
   110b2:	2302      	movs	r3, #2
  pbs->bpb.bpb32.volumeType[0] = 'F';
   110b4:	f885 2052 	strb.w	r2, [r5, #82]	; 0x52
  pbs->bpb.bpb32.volumeType[3] = '3';
   110b8:	2233      	movs	r2, #51	; 0x33
  pbs->bpb.bpb32.volumeType[2] = 'T';
   110ba:	f885 1054 	strb.w	r1, [r5, #84]	; 0x54
  pbs->bpb.bpb32.volumeType[4] = '2';
   110be:	2132      	movs	r1, #50	; 0x32
  pbs->bpb.bpb32.volumeType[3] = '3';
   110c0:	f885 2055 	strb.w	r2, [r5, #85]	; 0x55
  pbs->bpb.bpb32.volumeType[1] = 'A';
   110c4:	f885 0053 	strb.w	r0, [r5, #83]	; 0x53
  pbs->bpb.bpb32.volumeType[4] = '2';
   110c8:	f885 1056 	strb.w	r1, [r5, #86]	; 0x56
   110cc:	62eb      	str	r3, [r5, #44]	; 0x2c
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
   110ce:	69e0      	ldr	r0, [r4, #28]
  *reinterpret_cast<uint16_t*>(dst) = src;
   110d0:	4b32      	ldr	r3, [pc, #200]	; (1119c <FatFormatter::makeFat32()+0x1ac>)
  *reinterpret_cast<uint32_t*>(dst) = src;
   110d2:	4a33      	ldr	r2, [pc, #204]	; (111a0 <FatFormatter::makeFat32()+0x1b0>)
  *reinterpret_cast<uint16_t*>(dst) = src;
   110d4:	632b      	str	r3, [r5, #48]	; 0x30
   110d6:	6803      	ldr	r3, [r0, #0]
  *reinterpret_cast<uint32_t*>(dst) = src;
   110d8:	f8c5 2043 	str.w	r2, [r5, #67]	; 0x43
   110dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110de:	6a62      	ldr	r2, [r4, #36]	; 0x24
   110e0:	6921      	ldr	r1, [r4, #16]
   110e2:	4798      	blx	r3
   110e4:	2800      	cmp	r0, #0
   110e6:	d0cc      	beq.n	11082 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 6, m_secBuf)) {
   110e8:	69e0      	ldr	r0, [r4, #28]
   110ea:	6921      	ldr	r1, [r4, #16]
   110ec:	6803      	ldr	r3, [r0, #0]
   110ee:	3106      	adds	r1, #6
   110f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   110f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   110f4:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors, m_secBuf)  ||
   110f6:	2800      	cmp	r0, #0
   110f8:	d0c3      	beq.n	11082 <FatFormatter::makeFat32()+0x92>
  memset(m_secBuf, 0 , BYTES_PER_SECTOR);
   110fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   110fe:	2100      	movs	r1, #0
   11100:	6a60      	ldr	r0, [r4, #36]	; 0x24
   11102:	f011 f9ed 	bl	224e0 <memset>
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
   11106:	69e0      	ldr	r0, [r4, #28]
   11108:	4a26      	ldr	r2, [pc, #152]	; (111a4 <FatFormatter::makeFat32()+0x1b4>)
   1110a:	6803      	ldr	r3, [r0, #0]
   1110c:	f8c5 21fc 	str.w	r2, [r5, #508]	; 0x1fc
   11110:	6921      	ldr	r1, [r4, #16]
   11112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11114:	3102      	adds	r1, #2
   11116:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11118:	4798      	blx	r3
   1111a:	2800      	cmp	r0, #0
   1111c:	d0b1      	beq.n	11082 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 8, m_secBuf)) {
   1111e:	69e0      	ldr	r0, [r4, #28]
   11120:	6921      	ldr	r1, [r4, #16]
   11122:	6803      	ldr	r3, [r0, #0]
   11124:	3108      	adds	r1, #8
   11126:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1112a:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 2, m_secBuf)  ||
   1112c:	2800      	cmp	r0, #0
   1112e:	d0a8      	beq.n	11082 <FatFormatter::makeFat32()+0x92>
   11130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
   11134:	69e0      	ldr	r0, [r4, #28]
   11136:	4a1c      	ldr	r2, [pc, #112]	; (111a8 <FatFormatter::makeFat32()+0x1b8>)
   11138:	e9c5 337a 	strd	r3, r3, [r5, #488]	; 0x1e8
   1113c:	4b1b      	ldr	r3, [pc, #108]	; (111ac <FatFormatter::makeFat32()+0x1bc>)
   1113e:	602a      	str	r2, [r5, #0]
   11140:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
   11144:	6803      	ldr	r3, [r0, #0]
   11146:	6921      	ldr	r1, [r4, #16]
   11148:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1114c:	3101      	adds	r1, #1
   1114e:	4798      	blx	r3
   11150:	2800      	cmp	r0, #0
   11152:	d096      	beq.n	11082 <FatFormatter::makeFat32()+0x92>
      !m_dev->writeSector(m_relativeSectors + 7, m_secBuf)) {
   11154:	69e0      	ldr	r0, [r4, #28]
   11156:	6921      	ldr	r1, [r4, #16]
   11158:	6803      	ldr	r3, [r0, #0]
   1115a:	6a62      	ldr	r2, [r4, #36]	; 0x24
   1115c:	3107      	adds	r1, #7
   1115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11160:	4798      	blx	r3
  if (!m_dev->writeSector(m_relativeSectors + 1, m_secBuf)  ||
   11162:	2800      	cmp	r0, #0
   11164:	d08d      	beq.n	11082 <FatFormatter::makeFat32()+0x92>
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
   11166:	68a2      	ldr	r2, [r4, #8]
   11168:	4620      	mov	r0, r4
   1116a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
   1116e:	2120      	movs	r1, #32
   11170:	eb03 0242 	add.w	r2, r3, r2, lsl #1
}
   11174:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return initFatDir(32, 2*m_fatSize + m_sectorsPerCluster);
   11178:	f7ff bdc2 	b.w	10d00 <FatFormatter::initFatDir(unsigned char, unsigned long)>
    writeMsg("Bad cluster count\r\n");
   1117c:	6a20      	ldr	r0, [r4, #32]
   1117e:	2800      	cmp	r0, #0
   11180:	f43f af7f 	beq.w	11082 <FatFormatter::makeFat32()+0x92>
   11184:	6803      	ldr	r3, [r0, #0]
   11186:	2213      	movs	r2, #19
   11188:	4909      	ldr	r1, [pc, #36]	; (111b0 <FatFormatter::makeFat32()+0x1c0>)
   1118a:	685b      	ldr	r3, [r3, #4]
   1118c:	4798      	blx	r3
}
   1118e:	2000      	movs	r0, #0
   11190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11192:	005f      	lsls	r7, r3, #1
   11194:	e756      	b.n	11044 <FatFormatter::makeFat32()+0x54>
   11196:	bf00      	nop
   11198:	00fb0400 	.word	0x00fb0400
   1119c:	00060001 	.word	0x00060001
   111a0:	0012d687 	.word	0x0012d687
   111a4:	aa550000 	.word	0xaa550000
   111a8:	41615252 	.word	0x41615252
   111ac:	61417272 	.word	0x61417272
   111b0:	20000ee4 	.word	0x20000ee4

000111b4 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)>:
bool FatFormatter::format(FsBlockDevice* dev, uint8_t* secBuf, print_t* pr) {
   111b4:	b538      	push	{r3, r4, r5, lr}
   111b6:	4604      	mov	r4, r0
  m_sectorCount = m_dev->sectorCount();
   111b8:	680d      	ldr	r5, [r1, #0]
  m_dev = dev;
   111ba:	61c1      	str	r1, [r0, #28]
  m_sectorCount = m_dev->sectorCount();
   111bc:	4608      	mov	r0, r1
  m_secBuf = secBuf;
   111be:	6262      	str	r2, [r4, #36]	; 0x24
  m_sectorCount = m_dev->sectorCount();
   111c0:	69ea      	ldr	r2, [r5, #28]
  m_pr = pr;
   111c2:	6223      	str	r3, [r4, #32]
  m_sectorCount = m_dev->sectorCount();
   111c4:	4790      	blx	r2
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   111c6:	f200 73ff 	addw	r3, r0, #2047	; 0x7ff
  m_sectorCount = m_dev->sectorCount();
   111ca:	6160      	str	r0, [r4, #20]
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   111cc:	0adb      	lsrs	r3, r3, #11
  if (m_capacityMB <= 6) {
   111ce:	2b06      	cmp	r3, #6
  m_capacityMB = (m_sectorCount + SECTORS_PER_MB - 1)/SECTORS_PER_MB;
   111d0:	6023      	str	r3, [r4, #0]
  if (m_capacityMB <= 6) {
   111d2:	d924      	bls.n	1121e <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x6a>
  } else if (m_capacityMB <= 16) {
   111d4:	2b10      	cmp	r3, #16
   111d6:	d813      	bhi.n	11200 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x4c>
   111d8:	2302      	movs	r3, #2
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   111da:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    m_sectorsPerCluster = 2;
   111de:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   111e2:	4620      	mov	r0, r4
   111e4:	d22e      	bcs.n	11244 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x90>
   111e6:	f7ff fe75 	bl	10ed4 <FatFormatter::makeFat16()>
   111ea:	4605      	mov	r5, r0
    writeMsg("Format Done\r\n");
   111ec:	6a20      	ldr	r0, [r4, #32]
  if (rtn) {
   111ee:	b305      	cbz	r5, 11232 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x7e>
    writeMsg("Format Done\r\n");
   111f0:	b120      	cbz	r0, 111fc <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x48>
   111f2:	6803      	ldr	r3, [r0, #0]
   111f4:	220d      	movs	r2, #13
   111f6:	4919      	ldr	r1, [pc, #100]	; (1125c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa8>)
   111f8:	685b      	ldr	r3, [r3, #4]
   111fa:	4798      	blx	r3
}
   111fc:	4628      	mov	r0, r5
   111fe:	bd38      	pop	{r3, r4, r5, pc}
  } else if (m_capacityMB <= 32) {
   11200:	2b20      	cmp	r3, #32
   11202:	d923      	bls.n	1124c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x98>
  } else if (m_capacityMB <= 64) {
   11204:	2b40      	cmp	r3, #64	; 0x40
   11206:	d923      	bls.n	11250 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x9c>
  } else if (m_capacityMB <= 128) {
   11208:	2b80      	cmp	r3, #128	; 0x80
   1120a:	d923      	bls.n	11254 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa0>
  } else if (m_capacityMB <= 1024) {
   1120c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   11210:	d922      	bls.n	11258 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xa4>
  } else if (m_capacityMB <= 32768) {
   11212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11216:	bf8c      	ite	hi
   11218:	2380      	movhi	r3, #128	; 0x80
   1121a:	2340      	movls	r3, #64	; 0x40
   1121c:	e7dd      	b.n	111da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
    writeMsg("Card is too small.\r\n");
   1121e:	6a20      	ldr	r0, [r4, #32]
   11220:	b120      	cbz	r0, 1122c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
   11222:	6803      	ldr	r3, [r0, #0]
   11224:	2214      	movs	r2, #20
   11226:	490e      	ldr	r1, [pc, #56]	; (11260 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xac>)
   11228:	685b      	ldr	r3, [r3, #4]
   1122a:	4798      	blx	r3
    return false;
   1122c:	2500      	movs	r5, #0
}
   1122e:	4628      	mov	r0, r5
   11230:	bd38      	pop	{r3, r4, r5, pc}
    writeMsg("Format Failed\r\n");
   11232:	2800      	cmp	r0, #0
   11234:	d0fa      	beq.n	1122c <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x78>
   11236:	6803      	ldr	r3, [r0, #0]
   11238:	220f      	movs	r2, #15
   1123a:	490a      	ldr	r1, [pc, #40]	; (11264 <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0xb0>)
   1123c:	685b      	ldr	r3, [r3, #4]
   1123e:	4798      	blx	r3
}
   11240:	4628      	mov	r0, r5
   11242:	bd38      	pop	{r3, r4, r5, pc}
  rtn = m_sectorCount < 0X400000 ? makeFat16() : makeFat32();
   11244:	f7ff fed4 	bl	10ff0 <FatFormatter::makeFat32()>
   11248:	4605      	mov	r5, r0
   1124a:	e7cf      	b.n	111ec <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x38>
   1124c:	2304      	movs	r3, #4
   1124e:	e7c4      	b.n	111da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   11250:	2308      	movs	r3, #8
   11252:	e7c2      	b.n	111da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   11254:	2310      	movs	r3, #16
   11256:	e7c0      	b.n	111da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   11258:	2320      	movs	r3, #32
   1125a:	e7be      	b.n	111da <FatFormatter::format(FsBlockDeviceInterface*, unsigned char*, Print*)+0x26>
   1125c:	20000ec4 	.word	0x20000ec4
   11260:	20000eac 	.word	0x20000eac
   11264:	20000ed4 	.word	0x20000ed4

00011268 <FatFile::getLfnChar(DirLfn_t*, unsigned char)>:
#include "../common/DebugMacros.h"
#include "../common/FsUtf.h"
#include "FatLib.h"
//------------------------------------------------------------------------------
uint16_t FatFile::getLfnChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
   11268:	2a04      	cmp	r2, #4
   1126a:	d804      	bhi.n	11276 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0xe>
  return *reinterpret_cast<const uint16_t*>(src);
   1126c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   11270:	f8b2 0001 	ldrh.w	r0, [r2, #1]
    return getLe16(ldir->unicode1 + 2*i);
   11274:	4770      	bx	lr
  } else if (i < 11) {
   11276:	2a0a      	cmp	r2, #10
   11278:	d803      	bhi.n	11282 <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x1a>
    return getLe16(ldir->unicode2 + 2*i - 10);
   1127a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
   1127e:	8890      	ldrh	r0, [r2, #4]
   11280:	4770      	bx	lr
  } else if (i < 13) {
   11282:	2a0c      	cmp	r2, #12
   11284:	d803      	bhi.n	1128e <FatFile::getLfnChar(DirLfn_t*, unsigned char)+0x26>
    return getLe16(ldir->unicode3 + 2*i - 22);
   11286:	eb01 0142 	add.w	r1, r1, r2, lsl #1
   1128a:	88c8      	ldrh	r0, [r1, #6]
   1128c:	4770      	bx	lr
  }
  DBG_HALT_IF(i >= 13);
  return 0;
   1128e:	2000      	movs	r0, #0
}
   11290:	4770      	bx	lr
   11292:	bf00      	nop

00011294 <FatFile::getSFN(char*, unsigned int)>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
size_t FatFile::getSFN(char* name, size_t size) {
   11294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool isOpen() const {return m_attributes;}
   11296:	7804      	ldrb	r4, [r0, #0]
   11298:	460e      	mov	r6, r1
  char c;
  uint8_t j = 0;
  uint8_t lcBit = FAT_CASE_LC_BASE;
  uint8_t* ptr;
  DirFat_t* dir;
  if (!isOpen()) {
   1129a:	b17c      	cbz	r4, 112bc <FatFile::getSFN(char*, unsigned int)+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
   1129c:	f014 0460 	ands.w	r4, r4, #96	; 0x60
   112a0:	4617      	mov	r7, r2
   112a2:	d007      	beq.n	112b4 <FatFile::getSFN(char*, unsigned int)+0x20>
    if (size < 2) {
   112a4:	2a01      	cmp	r2, #1
   112a6:	d909      	bls.n	112bc <FatFile::getSFN(char*, unsigned int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    name[0] = '/';
   112a8:	222f      	movs	r2, #47	; 0x2f
    name[1] = '\0';
   112aa:	2300      	movs	r3, #0
    return 1;
   112ac:	2001      	movs	r0, #1
    name[0] = '/';
   112ae:	700a      	strb	r2, [r1, #0]
    name[1] = '\0';
   112b0:	704b      	strb	r3, [r1, #1]
  return j;

 fail:
  name[0] = '\0';
  return 0;
}
   112b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  dir = cacheDirEntry(FsCache::CACHE_FOR_READ);
   112b4:	4621      	mov	r1, r4
   112b6:	f7fe f947 	bl	f548 <FatFile::cacheDirEntry(unsigned char)>
  if (!dir) {
   112ba:	b918      	cbnz	r0, 112c4 <FatFile::getSFN(char*, unsigned int)+0x30>
  name[0] = '\0';
   112bc:	2300      	movs	r3, #0
  return 0;
   112be:	4618      	mov	r0, r3
  name[0] = '\0';
   112c0:	7033      	strb	r3, [r6, #0]
}
   112c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ptr = dir->name;
   112c4:	4603      	mov	r3, r0
   112c6:	46a4      	mov	ip, r4
  uint8_t lcBit = FAT_CASE_LC_BASE;
   112c8:	2108      	movs	r1, #8
   112ca:	e011      	b.n	112f0 <FatFile::getSFN(char*, unsigned int)+0x5c>
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
   112cc:	7b02      	ldrb	r2, [r0, #12]
   112ce:	4211      	tst	r1, r2
   112d0:	d003      	beq.n	112da <FatFile::getSFN(char*, unsigned int)+0x46>
        c += 'a' - 'A';
   112d2:	f10e 0e20 	add.w	lr, lr, #32
   112d6:	fa5f fe8e 	uxtb.w	lr, lr
    if ((j + 1u) >= size) {
   112da:	1c65      	adds	r5, r4, #1
   112dc:	42bd      	cmp	r5, r7
   112de:	d2ed      	bcs.n	112bc <FatFile::getSFN(char*, unsigned int)+0x28>
  for (uint8_t i = 0; i < 12; i++) {
   112e0:	f10c 0c01 	add.w	ip, ip, #1
    name[j++] = c;
   112e4:	f806 e004 	strb.w	lr, [r6, r4]
   112e8:	b2ec      	uxtb	r4, r5
  for (uint8_t i = 0; i < 12; i++) {
   112ea:	f1bc 0f0c 	cmp.w	ip, #12
   112ee:	d010      	beq.n	11312 <FatFile::getSFN(char*, unsigned int)+0x7e>
    if (i == 8) {
   112f0:	f1bc 0f08 	cmp.w	ip, #8
   112f4:	d011      	beq.n	1131a <FatFile::getSFN(char*, unsigned int)+0x86>
      c = *ptr++;
   112f6:	f813 eb01 	ldrb.w	lr, [r3], #1
      if ('A' <= c && c <= 'Z' && (lcBit & dir->caseFlags)) {
   112fa:	f1ae 0241 	sub.w	r2, lr, #65	; 0x41
   112fe:	2a19      	cmp	r2, #25
   11300:	d9e4      	bls.n	112cc <FatFile::getSFN(char*, unsigned int)+0x38>
      if (c == ' ') {
   11302:	f1be 0f20 	cmp.w	lr, #32
   11306:	d1e8      	bne.n	112da <FatFile::getSFN(char*, unsigned int)+0x46>
  for (uint8_t i = 0; i < 12; i++) {
   11308:	f10c 0c01 	add.w	ip, ip, #1
   1130c:	f1bc 0f0c 	cmp.w	ip, #12
   11310:	d1ee      	bne.n	112f0 <FatFile::getSFN(char*, unsigned int)+0x5c>
  name[j] = '\0';
   11312:	2300      	movs	r3, #0
   11314:	4620      	mov	r0, r4
   11316:	5533      	strb	r3, [r6, r4]
}
   11318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (*ptr == ' ') {
   1131a:	781a      	ldrb	r2, [r3, #0]
   1131c:	2a20      	cmp	r2, #32
   1131e:	d0f8      	beq.n	11312 <FatFile::getSFN(char*, unsigned int)+0x7e>
      lcBit = FAT_CASE_LC_EXT;
   11320:	2110      	movs	r1, #16
      c = '.';
   11322:	f04f 0e2e 	mov.w	lr, #46	; 0x2e
   11326:	e7d8      	b.n	112da <FatFile::getSFN(char*, unsigned int)+0x46>

00011328 <FatFile::getName8(char*, unsigned int)>:
size_t FatFile::getName8(char* name, size_t size) {
   11328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  FatFile() {}
   1132c:	2400      	movs	r4, #0
   1132e:	b08b      	sub	sp, #44	; 0x2c
  if (!isOpen()) {
   11330:	7803      	ldrb	r3, [r0, #0]
size_t FatFile::getName8(char* name, size_t size) {
   11332:	4689      	mov	r9, r1
   11334:	9401      	str	r4, [sp, #4]
  if (!isOpen()) {
   11336:	2b00      	cmp	r3, #0
   11338:	d055      	beq.n	113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
  if (!isLFN()) {
   1133a:	78c3      	ldrb	r3, [r0, #3]
   1133c:	4606      	mov	r6, r0
   1133e:	2b00      	cmp	r3, #0
   11340:	d058      	beq.n	113f4 <FatFile::getName8(char*, unsigned int)+0xcc>
  if (!dir.openCluster(this)) {
   11342:	4601      	mov	r1, r0
   11344:	a801      	add	r0, sp, #4
   11346:	4690      	mov	r8, r2
   11348:	f7fe fb1e 	bl	f988 <FatFile::openCluster(FatFile*)>
   1134c:	2800      	cmp	r0, #0
   1134e:	d04a      	beq.n	113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   11350:	78f0      	ldrb	r0, [r6, #3]
   11352:	2800      	cmp	r0, #0
   11354:	d043      	beq.n	113de <FatFile::getName8(char*, unsigned int)+0xb6>
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   11356:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
  char* str = name;
   1135a:	46cb      	mov	fp, r9
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   1135c:	f04f 0a01 	mov.w	sl, #1
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   11360:	44c8      	add	r8, r9
    ldir = reinterpret_cast<DirLfn_t*>(dir.cacheDir(m_dirIndex - order));
   11362:	88b1      	ldrh	r1, [r6, #4]
    return seekSet(32UL*index) ? readDirCache() : nullptr;
   11364:	a801      	add	r0, sp, #4
   11366:	eba1 010a 	sub.w	r1, r1, sl
   1136a:	b289      	uxth	r1, r1
   1136c:	0149      	lsls	r1, r1, #5
   1136e:	f7fe fd9f 	bl	feb0 <FatFile::seekSet(unsigned long)>
   11372:	b3c0      	cbz	r0, 113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
   11374:	2100      	movs	r1, #0
   11376:	a801      	add	r0, sp, #4
   11378:	f7fe fc3a 	bl	fbf0 <FatFile::readDirCache(bool)>
    if (!ldir) {
   1137c:	b398      	cbz	r0, 113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
    if (ldir->attributes != FAT_ATTRIB_LONG_NAME ||
   1137e:	7ac3      	ldrb	r3, [r0, #11]
   11380:	2b0f      	cmp	r3, #15
   11382:	d130      	bne.n	113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
   11384:	7803      	ldrb	r3, [r0, #0]
   11386:	fa5f f18a 	uxtb.w	r1, sl
   1138a:	f003 031f 	and.w	r3, r3, #31
   1138e:	428b      	cmp	r3, r1
   11390:	d129      	bne.n	113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
   11392:	1c47      	adds	r7, r0, #1
   11394:	2500      	movs	r5, #0
  if (i < 5) {
   11396:	2d04      	cmp	r5, #4
   11398:	b2eb      	uxtb	r3, r5
   1139a:	d83f      	bhi.n	1141c <FatFile::getName8(char*, unsigned int)+0xf4>
   1139c:	883b      	ldrh	r3, [r7, #0]
      if (hs) {
   1139e:	bb74      	cbnz	r4, 113fe <FatFile::getName8(char*, unsigned int)+0xd6>
  /** Check for UTF-16 surrogate.
   * \param[in] c UTF-16 unit.
   * \return true if c is a surrogate else false.
   */
  inline bool isSurrogate(uint16_t c) {
    return 0XD800 <= c && c <= 0XDFFF;
   113a0:	f503 5120 	add.w	r1, r3, #10240	; 0x2800
   113a4:	b289      	uxth	r1, r1
      } else if (!FsUtf::isSurrogate(c)) {
   113a6:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
   113aa:	d33e      	bcc.n	1142a <FatFile::getName8(char*, unsigned int)+0x102>
        if (c == 0) {
   113ac:	b1a3      	cbz	r3, 113d8 <FatFile::getName8(char*, unsigned int)+0xb0>
        cp = c;
   113ae:	4618      	mov	r0, r3
      ptr = FsUtf::cpToMb(cp, str, end - 1);
   113b0:	4659      	mov	r1, fp
   113b2:	4642      	mov	r2, r8
   113b4:	f002 ff42 	bl	1423c <FsUtf::cpToMb(unsigned long, char*, char*)>
      if (!ptr) {
   113b8:	4683      	mov	fp, r0
   113ba:	b1a0      	cbz	r0, 113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
   113bc:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < 13; i++) {
   113be:	3501      	adds	r5, #1
   113c0:	3702      	adds	r7, #2
   113c2:	2d0d      	cmp	r5, #13
   113c4:	d1e7      	bne.n	11396 <FatFile::getName8(char*, unsigned int)+0x6e>
  for (uint8_t order = 1; order <= m_lfnOrd; order++) {
   113c6:	f10a 0a01 	add.w	sl, sl, #1
   113ca:	78f1      	ldrb	r1, [r6, #3]
   113cc:	fa5f f38a 	uxtb.w	r3, sl
   113d0:	fa1f fa8a 	uxth.w	sl, sl
   113d4:	4299      	cmp	r1, r3
   113d6:	d2c4      	bcs.n	11362 <FatFile::getName8(char*, unsigned int)+0x3a>
  return str - name;
   113d8:	ebab 0009 	sub.w	r0, fp, r9
   113dc:	46d9      	mov	r9, fp
  *str = '\0';
   113de:	2300      	movs	r3, #0
   113e0:	f889 3000 	strb.w	r3, [r9]
  return str - name;
   113e4:	e003      	b.n	113ee <FatFile::getName8(char*, unsigned int)+0xc6>
  *name = 0;
   113e6:	2300      	movs	r3, #0
  return 0;
   113e8:	4618      	mov	r0, r3
  *name = 0;
   113ea:	f889 3000 	strb.w	r3, [r9]
}
   113ee:	b00b      	add	sp, #44	; 0x2c
   113f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return getSFN(name, size);
   113f4:	f7ff ff4e 	bl	11294 <FatFile::getSFN(char*, unsigned int)>
}
   113f8:	b00b      	add	sp, #44	; 0x2c
   113fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   /** Check for UTF-16 low surrogate.
   * \param[in] c UTF-16 unit..
   * \return true if c is a low surrogate else false.
   */
  inline bool isLowSurrogate(uint16_t c) {
    return 0XDC00 <= c && c <= 0XDFFF;
   113fe:	f503 5110 	add.w	r1, r3, #9216	; 0x2400
        if (!FsUtf::isLowSurrogate(c)) {
   11402:	b289      	uxth	r1, r1
   11404:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   11408:	d2ed      	bcs.n	113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
   * \param[in] hs high surrogate.
   * \param[in] ls low surrogate.
   * \return code point.
   */
  inline uint32_t u16ToCp(uint16_t hs, uint16_t ls) {
    return 0X10000 + (((hs & 0X3FF) << 10) | (ls & 0X3FF));
   1140a:	4a0a      	ldr	r2, [pc, #40]	; (11434 <FatFile::getName8(char*, unsigned int)+0x10c>)
   1140c:	f3c3 0309 	ubfx	r3, r3, #0, #10
   11410:	ea02 2084 	and.w	r0, r2, r4, lsl #10
   11414:	4318      	orrs	r0, r3
   11416:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
        hs = 0;
   1141a:	e7c9      	b.n	113b0 <FatFile::getName8(char*, unsigned int)+0x88>
  } else if (i < 11) {
   1141c:	2b0a      	cmp	r3, #10
   1141e:	bf94      	ite	ls
   11420:	f8b7 3003 	ldrhls.w	r3, [r7, #3]
   11424:	f8b7 3005 	ldrhhi.w	r3, [r7, #5]
    return getLe16(ldir->unicode3 + 2*i - 22);
   11428:	e7b9      	b.n	1139e <FatFile::getName8(char*, unsigned int)+0x76>
      } else if (FsUtf::isHighSurrogate(c)) {
   1142a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1142e:	d2da      	bcs.n	113e6 <FatFile::getName8(char*, unsigned int)+0xbe>
   11430:	461c      	mov	r4, r3
   11432:	e7c4      	b.n	113be <FatFile::getName8(char*, unsigned int)+0x96>
   11434:	000ffc00 	.word	0x000ffc00

00011438 <FatFile::getName(char*, unsigned int)>:
  return getName8(name, size);
   11438:	f7ff bf76 	b.w	11328 <FatFile::getName8(char*, unsigned int)>

0001143c <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
  virtual bool readSectorsCallback(uint32_t sector, uint8_t* dst, size_t ns,
   1143c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11440:	e9dd 8708 	ldrd	r8, r7, [sp, #32]
     for (size_t i = 0; i < ns; i++) {
   11444:	b1c3      	cbz	r3, 11478 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
   11446:	4681      	mov	r9, r0
   11448:	460c      	mov	r4, r1
   1144a:	4615      	mov	r5, r2
   1144c:	185e      	adds	r6, r3, r1
   1144e:	e002      	b.n	11456 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x1a>
       callback(sector + i, dst, context);
   11450:	47c0      	blx	r8
     for (size_t i = 0; i < ns; i++) {
   11452:	42b4      	cmp	r4, r6
   11454:	d010      	beq.n	11478 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3c>
       if (!readSector(sector + i, dst)) return false;
   11456:	f8d9 3000 	ldr.w	r3, [r9]
   1145a:	4621      	mov	r1, r4
   1145c:	462a      	mov	r2, r5
   1145e:	4648      	mov	r0, r9
   11460:	691b      	ldr	r3, [r3, #16]
   11462:	4798      	blx	r3
   11464:	4603      	mov	r3, r0
       callback(sector + i, dst, context);
   11466:	463a      	mov	r2, r7
   11468:	4620      	mov	r0, r4
   1146a:	4629      	mov	r1, r5
     for (size_t i = 0; i < ns; i++) {
   1146c:	3401      	adds	r4, #1
       if (!readSector(sector + i, dst)) return false;
   1146e:	2b00      	cmp	r3, #0
   11470:	d1ee      	bne.n	11450 <FsBlockDeviceInterface::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x14>
  }
   11472:	4618      	mov	r0, r3
   11474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     return true;
   11478:	2301      	movs	r3, #1
  }
   1147a:	4618      	mov	r0, r3
   1147c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00011480 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)>:
  uint32_t clusters_to_do;
  uint32_t free_count;
};

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat16(uint32_t sector, uint8_t *buf, void *context) {
   11480:	b410      	push	{r4}
   struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint16_t *p = (uint16_t *)buf;
  unsigned int n = state->clusters_to_do;
   11482:	6814      	ldr	r4, [r2, #0]
  if (n > 256) n = 256;
   11484:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
   11488:	46a4      	mov	ip, r4
   1148a:	bf28      	it	cs
   1148c:	f44f 7c80 	movcs.w	ip, #256	; 0x100
  uint16_t *e = p + n;
   11490:	eb01 004c 	add.w	r0, r1, ip, lsl #1
  while (p < e) {
   11494:	4281      	cmp	r1, r0
   11496:	d207      	bcs.n	114a8 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x28>
    if (*p++ == 0) state->free_count++;
   11498:	f831 3b02 	ldrh.w	r3, [r1], #2
   1149c:	b913      	cbnz	r3, 114a4 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x24>
   1149e:	6853      	ldr	r3, [r2, #4]
   114a0:	3301      	adds	r3, #1
   114a2:	6053      	str	r3, [r2, #4]
  while (p < e) {
   114a4:	4288      	cmp	r0, r1
   114a6:	d8f7      	bhi.n	11498 <FatPartition::freeClusterCount_cb_fat16(unsigned long, unsigned char*, void*)+0x18>
  }
  state->clusters_to_do -= n;
   114a8:	eba4 040c 	sub.w	r4, r4, ip
   114ac:	6014      	str	r4, [r2, #0]
}
   114ae:	f85d 4b04 	ldr.w	r4, [sp], #4
   114b2:	4770      	bx	lr

000114b4 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)>:

//------------------------------------------------------------------------------
void FatPartition::freeClusterCount_cb_fat32(uint32_t sector, uint8_t *buf, void *context) {
   114b4:	b410      	push	{r4}
  struct FreeClusterCountStruct *state = (struct FreeClusterCountStruct *)context;
  uint32_t *p = (uint32_t *)buf;
  unsigned int n = state->clusters_to_do;
   114b6:	6814      	ldr	r4, [r2, #0]
  if (n > 128) n = 128;
   114b8:	2c80      	cmp	r4, #128	; 0x80
   114ba:	46a4      	mov	ip, r4
   114bc:	bf28      	it	cs
   114be:	f04f 0c80 	movcs.w	ip, #128	; 0x80
  uint32_t *e = p + n;
   114c2:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  while (p < e) {
   114c6:	4281      	cmp	r1, r0
   114c8:	d207      	bcs.n	114da <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x26>
    if (*p++ == 0) state->free_count++;
   114ca:	f851 3b04 	ldr.w	r3, [r1], #4
   114ce:	b913      	cbnz	r3, 114d6 <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x22>
   114d0:	6853      	ldr	r3, [r2, #4]
   114d2:	3301      	adds	r3, #1
   114d4:	6053      	str	r3, [r2, #4]
  while (p < e) {
   114d6:	4288      	cmp	r0, r1
   114d8:	d8f7      	bhi.n	114ca <FatPartition::freeClusterCount_cb_fat32(unsigned long, unsigned char*, void*)+0x16>
  }
  state->clusters_to_do -= n;
   114da:	eba4 040c 	sub.w	r4, r4, ip
   114de:	6014      	str	r4, [r2, #0]
}
   114e0:	f85d 4b04 	ldr.w	r4, [sp], #4
   114e4:	4770      	bx	lr
   114e6:	bf00      	nop

000114e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>:
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
   114e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
   114ec:	79c3      	ldrb	r3, [r0, #7]
   114ee:	4604      	mov	r4, r0
   114f0:	460d      	mov	r5, r1
   114f2:	4617      	mov	r7, r2
  if (fatType() == 32) {
   114f4:	2b20      	cmp	r3, #32
   114f6:	d059      	beq.n	115ac <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xc4>
  } else if (fatType() == 16) {
   114f8:	2b10      	cmp	r3, #16
   114fa:	d030      	beq.n	1155e <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x76>
  } else if (FAT12_SUPPORT && fatType() == 12) {
   114fc:	2b0c      	cmp	r3, #12
   114fe:	d151      	bne.n	115a4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11500:	7a02      	ldrb	r2, [r0, #8]
    index += index >> 1;
   11502:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   11506:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   11508:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
   1150c:	fa11 f185 	uxtah	r1, r1, r5
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11510:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
   11514:	4648      	mov	r0, r9
   11516:	b28e      	uxth	r6, r1
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11518:	fab2 f282 	clz	r2, r2
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   1151c:	f3c1 2146 	ubfx	r1, r1, #9, #7
   11520:	0952      	lsrs	r2, r2, #5
   11522:	eb01 0803 	add.w	r8, r1, r3
    return m_fatCache.prepare(sector, options);
   11526:	0052      	lsls	r2, r2, #1
   11528:	4641      	mov	r1, r8
   1152a:	f002 fdd3 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   1152e:	2800      	cmp	r0, #0
   11530:	d038      	beq.n	115a4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    index &= m_sectorMask;
   11532:	f3c6 0608 	ubfx	r6, r6, #0, #9
    index++;
   11536:	1c73      	adds	r3, r6, #1
    uint16_t tmp = pc[index];
   11538:	5d86      	ldrb	r6, [r0, r6]
    if (index == m_bytesPerSector) {
   1153a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   1153e:	d023      	beq.n	11588 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xa0>
    tmp |= pc[index] << 8;
   11540:	4418      	add	r0, r3
   11542:	7803      	ldrb	r3, [r0, #0]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
   11544:	07ea      	lsls	r2, r5, #31
  if (isEOC(next)) {
   11546:	69e2      	ldr	r2, [r4, #28]
    tmp |= pc[index] << 8;
   11548:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
   1154c:	bf4c      	ite	mi
   1154e:	091b      	lsrmi	r3, r3, #4
   11550:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
  if (isEOC(next)) {
   11554:	429a      	cmp	r2, r3
   11556:	d240      	bcs.n	115da <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xf2>
    return 0;
   11558:	2000      	movs	r0, #0
}
   1155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1155e:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
   11560:	f3c1 2107 	ubfx	r1, r1, #8, #8
   11564:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   11566:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1156a:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
   1156e:	4419      	add	r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11570:	fab2 f282 	clz	r2, r2
   11574:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
   11576:	0052      	lsls	r2, r2, #1
   11578:	f002 fdac 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   1157c:	b190      	cbz	r0, 115a4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 1) & m_sectorMask;
   1157e:	006d      	lsls	r5, r5, #1
    next = getLe16(pc + offset);
   11580:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
   11584:	5b43      	ldrh	r3, [r0, r5]
   11586:	e025      	b.n	115d4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xec>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11588:	7a22      	ldrb	r2, [r4, #8]
    return m_fatCache.prepare(sector, options);
   1158a:	f108 0101 	add.w	r1, r8, #1
   1158e:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11590:	f1a2 0202 	sub.w	r2, r2, #2
   11594:	fab2 f282 	clz	r2, r2
   11598:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
   1159a:	0052      	lsls	r2, r2, #1
   1159c:	f002 fd9a 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   115a0:	2800      	cmp	r0, #0
   115a2:	d1ce      	bne.n	11542 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x5a>
  return -1;
   115a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   115a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   115ac:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   115ae:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
   115b0:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   115b4:	f1a2 0202 	sub.w	r2, r2, #2
    return m_fatCache.prepare(sector, options);
   115b8:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   115bc:	fab2 f282 	clz	r2, r2
   115c0:	0952      	lsrs	r2, r2, #5
    return m_fatCache.prepare(sector, options);
   115c2:	0052      	lsls	r2, r2, #1
   115c4:	f002 fd86 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   115c8:	2800      	cmp	r0, #0
   115ca:	d0eb      	beq.n	115a4 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0xbc>
    uint16_t offset = (cluster << 2) & m_sectorMask;
   115cc:	00ad      	lsls	r5, r5, #2
    next = getLe32(pc + offset);
   115ce:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
  return *reinterpret_cast<const uint32_t*>(src);
   115d2:	5943      	ldr	r3, [r0, r5]
  if (isEOC(next)) {
   115d4:	69e2      	ldr	r2, [r4, #28]
   115d6:	429a      	cmp	r2, r3
   115d8:	d3be      	bcc.n	11558 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]+0x70>
  return 1;
   115da:	2001      	movs	r0, #1
  *value = next;
   115dc:	603b      	str	r3, [r7, #0]
}
   115de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   115e2:	bf00      	nop

000115e4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
   115e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return m_fatType;
   115e8:	79c3      	ldrb	r3, [r0, #7]
   115ea:	4605      	mov	r5, r0
   115ec:	460c      	mov	r4, r1
   115ee:	4616      	mov	r6, r2
  if (fatType() == 32) {
   115f0:	2b20      	cmp	r3, #32
   115f2:	d048      	beq.n	11686 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xa2>
  if (fatType() == 16) {
   115f4:	2b10      	cmp	r3, #16
   115f6:	d02d      	beq.n	11654 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x70>
  if (FAT12_SUPPORT && fatType() == 12) {
   115f8:	2b0c      	cmp	r3, #12
   115fa:	d141      	bne.n	11680 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    index += index >> 1;
   115fc:	f3c1 014e 	ubfx	r1, r1, #1, #15
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   11600:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   11602:	f500 790e 	add.w	r9, r0, #568	; 0x238
    index += index >> 1;
   11606:	fa11 f184 	uxtah	r1, r1, r4
   1160a:	fa1f f881 	uxth.w	r8, r1
    sector = m_fatStartSector + (index >> m_bytesPerSectorShift);
   1160e:	f3c1 2146 	ubfx	r1, r1, #9, #7
   11612:	18cf      	adds	r7, r1, r3
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11614:	7a03      	ldrb	r3, [r0, #8]
    return m_fatCache.prepare(sector, options);
   11616:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11618:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   1161a:	4639      	mov	r1, r7
   1161c:	bf14      	ite	ne
   1161e:	2201      	movne	r2, #1
   11620:	2203      	moveq	r2, #3
   11622:	f002 fd57 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   11626:	b358      	cbz	r0, 11680 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    if (cluster & 1) {
   11628:	f014 0401 	ands.w	r4, r4, #1
    index &= m_sectorMask;
   1162c:	f3c8 0308 	ubfx	r3, r8, #0, #9
    if (cluster & 1) {
   11630:	d03f      	beq.n	116b2 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xce>
      tmp = (pc[index] & 0XF) | tmp << 4;
   11632:	5cc2      	ldrb	r2, [r0, r3]
   11634:	f002 020f 	and.w	r2, r2, #15
   11638:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    pc[index] = tmp;
   1163c:	54c2      	strb	r2, [r0, r3]
    index++;
   1163e:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   11640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11644:	d03a      	beq.n	116bc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xd8>
    tmp = value >> 4;
   11646:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
   1164a:	4403      	add	r3, r0
    return true;
   1164c:	2001      	movs	r0, #1
    pc[index] = tmp;
   1164e:	701a      	strb	r2, [r3, #0]
}
   11650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11654:	7a02      	ldrb	r2, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
   11656:	f3c1 2107 	ubfx	r1, r1, #8, #8
   1165a:	6983      	ldr	r3, [r0, #24]
    return m_fatCache.prepare(sector, options);
   1165c:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11660:	2a02      	cmp	r2, #2
    return m_fatCache.prepare(sector, options);
   11662:	4419      	add	r1, r3
   11664:	bf14      	ite	ne
   11666:	2201      	movne	r2, #1
   11668:	2203      	moveq	r2, #3
   1166a:	f002 fd33 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   1166e:	4603      	mov	r3, r0
   11670:	b130      	cbz	r0, 11680 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 1) & m_sectorMask;
   11672:	0064      	lsls	r4, r4, #1
    return true;
   11674:	2001      	movs	r0, #1
    setLe16(pc + offset, value);
   11676:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
   1167a:	531e      	strh	r6, [r3, r4]
}
   1167c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return false;
   11680:	2000      	movs	r0, #0
}
   11682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   11686:	7a03      	ldrb	r3, [r0, #8]
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
   11688:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.prepare(sector, options);
   1168a:	f500 700e 	add.w	r0, r0, #568	; 0x238
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   1168e:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   11690:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   11694:	bf14      	ite	ne
   11696:	2201      	movne	r2, #1
   11698:	2203      	moveq	r2, #3
   1169a:	f002 fd1b 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    if (!pc) {
   1169e:	4603      	mov	r3, r0
   116a0:	2800      	cmp	r0, #0
   116a2:	d0ed      	beq.n	11680 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    uint16_t offset = (cluster << 2) & m_sectorMask;
   116a4:	00a4      	lsls	r4, r4, #2
    return true;
   116a6:	2001      	movs	r0, #1
    setLe32(pc + offset, value);
   116a8:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
  *reinterpret_cast<uint32_t*>(dst) = src;
   116ac:	511e      	str	r6, [r3, r4]
}
   116ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    uint8_t tmp = value;
   116b2:	54c6      	strb	r6, [r0, r3]
    index++;
   116b4:	3301      	adds	r3, #1
    if (index == m_bytesPerSector) {
   116b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   116ba:	d115      	bne.n	116e8 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x104>
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   116bc:	7a2b      	ldrb	r3, [r5, #8]
    return m_fatCache.prepare(sector, options);
   116be:	1c79      	adds	r1, r7, #1
   116c0:	4648      	mov	r0, r9
    if (m_fatCount == 2) options |= FsCache::CACHE_STATUS_MIRROR_FAT;
   116c2:	2b02      	cmp	r3, #2
    return m_fatCache.prepare(sector, options);
   116c4:	bf14      	ite	ne
   116c6:	2201      	movne	r2, #1
   116c8:	2203      	moveq	r2, #3
   116ca:	f002 fd03 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
      if (!pc) {
   116ce:	4603      	mov	r3, r0
   116d0:	2800      	cmp	r0, #0
   116d2:	d0d5      	beq.n	11680 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x9c>
    tmp = value >> 4;
   116d4:	f3c6 1207 	ubfx	r2, r6, #4, #8
    if (!(cluster & 1)) {
   116d8:	2c00      	cmp	r4, #0
   116da:	d1b7      	bne.n	1164c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
      tmp = ((pc[index] & 0XF0)) | tmp >> 4;
   116dc:	7819      	ldrb	r1, [r3, #0]
   116de:	f021 010f 	bic.w	r1, r1, #15
   116e2:	ea41 1212 	orr.w	r2, r1, r2, lsr #4
   116e6:	e7b1      	b.n	1164c <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0x68>
    tmp = value >> 4;
   116e8:	f3c6 1207 	ubfx	r2, r6, #4, #8
    pc[index] = tmp;
   116ec:	4403      	add	r3, r0
   116ee:	e7f5      	b.n	116dc <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]+0xf8>

000116f0 <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   116f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   116f4:	68c4      	ldr	r4, [r0, #12]
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   116f6:	b082      	sub	sp, #8
   116f8:	4605      	mov	r5, r0
   116fa:	460e      	mov	r6, r1
  if (m_allocSearchStart < current) {
   116fc:	428c      	cmp	r4, r1
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
   116fe:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   11700:	d340      	bcc.n	11784 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x94>
    setStart = true;
   11702:	2701      	movs	r7, #1
    find++;
   11704:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   11706:	69eb      	ldr	r3, [r5, #28]
   11708:	aa01      	add	r2, sp, #4
   1170a:	4628      	mov	r0, r5
   1170c:	42a3      	cmp	r3, r4
   1170e:	d205      	bcs.n	1171c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x2c>
      if (setStart) {
   11710:	bb9f      	cbnz	r7, 1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
      find = m_allocSearchStart;
   11712:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
   11714:	2701      	movs	r7, #1
    find++;
   11716:	443c      	add	r4, r7
    if (find > m_lastCluster) {
   11718:	42a3      	cmp	r3, r4
   1171a:	d32e      	bcc.n	1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (cluster < 2 || cluster > m_lastCluster) {
   1171c:	42a6      	cmp	r6, r4
   1171e:	bf18      	it	ne
   11720:	2c01      	cmpne	r4, #1
   11722:	4621      	mov	r1, r4
   11724:	d929      	bls.n	1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11726:	f7ff fedf 	bl	114e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
    if (fg < 0) {
   1172a:	2800      	cmp	r0, #0
   1172c:	db25      	blt.n	1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
    if (fg && f == 0) {
   1172e:	d0e9      	beq.n	11704 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
   11730:	9b01      	ldr	r3, [sp, #4]
   11732:	2b00      	cmp	r3, #0
   11734:	d1e6      	bne.n	11704 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
  if (setStart) {
   11736:	b107      	cbz	r7, 1173a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4a>
    m_allocSearchStart = find;
   11738:	60ec      	str	r4, [r5, #12]
  if (cluster < 2 || cluster > m_lastCluster) {
   1173a:	69eb      	ldr	r3, [r5, #28]
   1173c:	42a3      	cmp	r3, r4
   1173e:	d31c      	bcc.n	1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11740:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   11744:	4621      	mov	r1, r4
   11746:	4628      	mov	r0, r5
   11748:	f7ff ff4c 	bl	115e4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
  if (!fatPutEOC(find)) {
   1174c:	4607      	mov	r7, r0
   1174e:	b1a0      	cbz	r0, 1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
  if (current) {
   11750:	b93e      	cbnz	r6, 11762 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x72>
    if (m_freeClusterCount >= 0) {
   11752:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11754:	2b00      	cmp	r3, #0
   11756:	db01      	blt.n	1175c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x6c>
      m_freeClusterCount += change;
   11758:	3b01      	subs	r3, #1
   1175a:	626b      	str	r3, [r5, #36]	; 0x24
  *next = find;
   1175c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   11760:	e00c      	b.n	1177c <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8c>
  if (cluster < 2 || cluster > m_lastCluster) {
   11762:	2e01      	cmp	r6, #1
   11764:	d009      	beq.n	1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   11766:	69eb      	ldr	r3, [r5, #28]
   11768:	429e      	cmp	r6, r3
   1176a:	d806      	bhi.n	1177a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x8a>
   1176c:	4631      	mov	r1, r6
   1176e:	4622      	mov	r2, r4
   11770:	4628      	mov	r0, r5
   11772:	f7ff ff37 	bl	115e4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
    if (!fatPut(current, find)) {
   11776:	2800      	cmp	r0, #0
   11778:	d1eb      	bne.n	11752 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x62>
  return false;
   1177a:	2700      	movs	r7, #0
}
   1177c:	4638      	mov	r0, r7
   1177e:	b002      	add	sp, #8
   11780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11784:	460c      	mov	r4, r1
    setStart = false;
   11786:	2700      	movs	r7, #0
   11788:	e7bc      	b.n	11704 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x14>
   1178a:	bf00      	nop

0001178c <FatPartition::fatGet(unsigned long, unsigned long*)>:
  if (cluster < 2 || cluster > m_lastCluster) {
   1178c:	2901      	cmp	r1, #1
   1178e:	d90c      	bls.n	117aa <FatPartition::fatGet(unsigned long, unsigned long*)+0x1e>
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
   11790:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
   11792:	69c4      	ldr	r4, [r0, #28]
   11794:	428c      	cmp	r4, r1
   11796:	d303      	bcc.n	117a0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x14>
}
   11798:	f85d 4b04 	ldr.w	r4, [sp], #4
   1179c:	f7ff bea4 	b.w	114e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
   117a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   117a4:	f85d 4b04 	ldr.w	r4, [sp], #4
   117a8:	4770      	bx	lr
   117aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   117ae:	4770      	bx	lr

000117b0 <FatPartition::fatPut(unsigned long, unsigned long)>:
  if (cluster < 2 || cluster > m_lastCluster) {
   117b0:	2901      	cmp	r1, #1
   117b2:	d90b      	bls.n	117cc <FatPartition::fatPut(unsigned long, unsigned long)+0x1c>
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
   117b4:	b410      	push	{r4}
  if (cluster < 2 || cluster > m_lastCluster) {
   117b6:	69c4      	ldr	r4, [r0, #28]
   117b8:	428c      	cmp	r4, r1
   117ba:	d303      	bcc.n	117c4 <FatPartition::fatPut(unsigned long, unsigned long)+0x14>
}
   117bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   117c0:	f7ff bf10 	b.w	115e4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
   117c4:	2000      	movs	r0, #0
   117c6:	f85d 4b04 	ldr.w	r4, [sp], #4
   117ca:	4770      	bx	lr
   117cc:	2000      	movs	r0, #0
   117ce:	4770      	bx	lr

000117d0 <FatPartition::freeChain(unsigned long)>:
bool FatPartition::freeChain(uint32_t cluster) {
   117d0:	b570      	push	{r4, r5, r6, lr}
   117d2:	4605      	mov	r5, r0
   117d4:	b082      	sub	sp, #8
   117d6:	460c      	mov	r4, r1
   117d8:	e01d      	b.n	11816 <FatPartition::freeChain(unsigned long)+0x46>
  if (cluster < 2 || cluster > m_lastCluster) {
   117da:	69eb      	ldr	r3, [r5, #28]
   117dc:	429c      	cmp	r4, r3
   117de:	d81f      	bhi.n	11820 <FatPartition::freeChain(unsigned long)+0x50>
   117e0:	f7ff fe82 	bl	114e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
  if (cluster < 2 || cluster > m_lastCluster) {
   117e4:	4606      	mov	r6, r0
    if (fg < 0) {
   117e6:	4621      	mov	r1, r4
   117e8:	2200      	movs	r2, #0
   117ea:	2e00      	cmp	r6, #0
   117ec:	4628      	mov	r0, r5
   117ee:	db17      	blt.n	11820 <FatPartition::freeChain(unsigned long)+0x50>
  if (cluster < 2 || cluster > m_lastCluster) {
   117f0:	69eb      	ldr	r3, [r5, #28]
   117f2:	429c      	cmp	r4, r3
   117f4:	d814      	bhi.n	11820 <FatPartition::freeChain(unsigned long)+0x50>
   117f6:	f7ff fef5 	bl	115e4 <FatPartition::fatPut(unsigned long, unsigned long) [clone .part.0]>
      m_allocSearchStart = cluster - 1;
   117fa:	1e62      	subs	r2, r4, #1
    if (!fatPut(cluster, 0)) {
   117fc:	b180      	cbz	r0, 11820 <FatPartition::freeChain(unsigned long)+0x50>
    if (m_freeClusterCount >= 0) {
   117fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11800:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
   11802:	f103 0301 	add.w	r3, r3, #1
   11806:	bfa8      	it	ge
   11808:	626b      	strge	r3, [r5, #36]	; 0x24
    if (cluster < m_allocSearchStart) {
   1180a:	68eb      	ldr	r3, [r5, #12]
   1180c:	42a3      	cmp	r3, r4
    cluster = next;
   1180e:	9c01      	ldr	r4, [sp, #4]
      m_allocSearchStart = cluster - 1;
   11810:	bf88      	it	hi
   11812:	60ea      	strhi	r2, [r5, #12]
  } while (fg);
   11814:	b12e      	cbz	r6, 11822 <FatPartition::freeChain(unsigned long)+0x52>
  if (cluster < 2 || cluster > m_lastCluster) {
   11816:	2c01      	cmp	r4, #1
   11818:	4621      	mov	r1, r4
   1181a:	aa01      	add	r2, sp, #4
   1181c:	4628      	mov	r0, r5
   1181e:	d8dc      	bhi.n	117da <FatPartition::freeChain(unsigned long)+0xa>
  return false;
   11820:	2000      	movs	r0, #0
}
   11822:	b002      	add	sp, #8
   11824:	bd70      	pop	{r4, r5, r6, pc}
   11826:	bf00      	nop

00011828 <FatPartition::freeClusterCount()>:

//------------------------------------------------------------------------------
int32_t FatPartition::freeClusterCount() {
   11828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1182c:	4606      	mov	r6, r0
#if MAINTAIN_FREE_CLUSTER_COUNT
  if (m_freeClusterCount >= 0) {
   1182e:	6a40      	ldr	r0, [r0, #36]	; 0x24
int32_t FatPartition::freeClusterCount() {
   11830:	b084      	sub	sp, #16
  if (m_freeClusterCount >= 0) {
   11832:	2800      	cmp	r0, #0
   11834:	da1b      	bge.n	1186e <FatPartition::freeClusterCount()+0x46>
    return m_fatType;
   11836:	79f2      	ldrb	r2, [r6, #7]
    return m_freeClusterCount;
  }
#endif  // MAINTAIN_FREE_CLUSTER_COUNT
 if (FAT12_SUPPORT && fatType() == 12) {
   11838:	2a0c      	cmp	r2, #12
   1183a:	d11b      	bne.n	11874 <FatPartition::freeClusterCount()+0x4c>
    uint32_t free = 0;
    uint32_t todo = m_lastCluster + 1;
   1183c:	69f7      	ldr	r7, [r6, #28]
   1183e:	1c7b      	adds	r3, r7, #1
    for (unsigned i = 2; i < todo; i++) {
   11840:	2b02      	cmp	r3, #2
   11842:	f240 80cd 	bls.w	119e0 <FatPartition::freeClusterCount()+0x1b8>
   11846:	2402      	movs	r4, #2
    uint32_t free = 0;
   11848:	2500      	movs	r5, #0
   1184a:	4621      	mov	r1, r4
   1184c:	aa02      	add	r2, sp, #8
   1184e:	4630      	mov	r0, r6
   11850:	f7ff fe4a 	bl	114e8 <FatPartition::fatGet(unsigned long, unsigned long*) [clone .part.0]>
      uint32_t c;
      int8_t fg = fatGet(i, &c);
      if (fg < 0) {
   11854:	2800      	cmp	r0, #0
    for (unsigned i = 2; i < todo; i++) {
   11856:	f104 0301 	add.w	r3, r4, #1
      if (fg < 0) {
   1185a:	db06      	blt.n	1186a <FatPartition::freeClusterCount()+0x42>
        DBG_FAIL_MACRO;
        return -1;
      }
      if (fg && c == 0) {
   1185c:	d157      	bne.n	1190e <FatPartition::freeClusterCount()+0xe6>
    for (unsigned i = 2; i < todo; i++) {
   1185e:	42a7      	cmp	r7, r4
   11860:	461c      	mov	r4, r3
   11862:	d05c      	beq.n	1191e <FatPartition::freeClusterCount()+0xf6>
  if (cluster < 2 || cluster > m_lastCluster) {
   11864:	69f2      	ldr	r2, [r6, #28]
   11866:	4293      	cmp	r3, r2
   11868:	d9ef      	bls.n	1184a <FatPartition::freeClusterCount()+0x22>
#if USE_SEPARATE_FAT_CACHE
  uint8_t *buf = m_fatCache.clear();  // will clear out anything and return buffer 
#else  
  uint8_t *buf = m_cache.clear();  // will clear out anything and return buffer 
#endif  // USE_SEPARATE_FAT_CACHE
  if (buf == nullptr) return -1;
   1186a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
  }

  setFreeClusterCount(state.free_count);
  return state.free_count;
}
   1186e:	b004      	add	sp, #16
   11870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  state.clusters_to_do = m_lastCluster + 1;
   11874:	69f1      	ldr	r1, [r6, #28]
  state.free_count = 0;
   11876:	2000      	movs	r0, #0
    return m_status & CACHE_STATUS_DIRTY;
   11878:	f896 3238 	ldrb.w	r3, [r6, #568]	; 0x238
  state.clusters_to_do = m_lastCluster + 1;
   1187c:	3101      	adds	r1, #1
  num_sectors = m_sectorsPerFat;
   1187e:	6934      	ldr	r4, [r6, #16]
    if (isDirty() && !sync()) {
   11880:	07db      	lsls	r3, r3, #31
  state.clusters_to_do = m_lastCluster + 1;
   11882:	e9cd 1002 	strd	r1, r0, [sp, #8]
   11886:	f100 8085 	bmi.w	11994 <FatPartition::freeClusterCount()+0x16c>
    m_status = 0;
   1188a:	2100      	movs	r1, #0
    m_sector = 0XFFFFFFFF;
   1188c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  if (fatType() == FAT_TYPE_FAT32) {
   11890:	2a20      	cmp	r2, #32
    return m_buffer;
   11892:	f506 7712 	add.w	r7, r6, #584	; 0x248
    m_status = 0;
   11896:	f886 1238 	strb.w	r1, [r6, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
   1189a:	f8c6 3244 	str.w	r3, [r6, #580]	; 0x244
   1189e:	d042      	beq.n	11926 <FatPartition::freeClusterCount()+0xfe>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
   118a0:	f8d6 8000 	ldr.w	r8, [r6]
   118a4:	4b4f      	ldr	r3, [pc, #316]	; (119e4 <FatPartition::freeClusterCount()+0x1bc>)
   118a6:	f8d8 2000 	ldr.w	r2, [r8]
   118aa:	f8d6 a018 	ldr.w	sl, [r6, #24]
   118ae:	6995      	ldr	r5, [r2, #24]
   118b0:	429d      	cmp	r5, r3
   118b2:	d178      	bne.n	119a6 <FatPartition::freeClusterCount()+0x17e>
     for (size_t i = 0; i < ns; i++) {
   118b4:	2c00      	cmp	r4, #0
   118b6:	f000 8082 	beq.w	119be <FatPartition::freeClusterCount()+0x196>
   118ba:	eb0a 0904 	add.w	r9, sl, r4
       if (!readSector(sector + i, dst)) return false;
   118be:	6913      	ldr	r3, [r2, #16]
   118c0:	4651      	mov	r1, sl
   118c2:	463a      	mov	r2, r7
   118c4:	4640      	mov	r0, r8
   118c6:	4798      	blx	r3
   118c8:	2800      	cmp	r0, #0
   118ca:	d0ce      	beq.n	1186a <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
   118cc:	9902      	ldr	r1, [sp, #8]
  if (n > 256) n = 256;
   118ce:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   118d2:	468e      	mov	lr, r1
   118d4:	bf28      	it	cs
   118d6:	f44f 7e80 	movcs.w	lr, #256	; 0x100
  uint16_t *e = p + n;
   118da:	eb07 0c4e 	add.w	ip, r7, lr, lsl #1
  while (p < e) {
   118de:	45bc      	cmp	ip, r7
   118e0:	d90b      	bls.n	118fa <FatPartition::freeClusterCount()+0xd2>
   118e2:	9d03      	ldr	r5, [sp, #12]
   118e4:	463b      	mov	r3, r7
   118e6:	2200      	movs	r2, #0
    if (*p++ == 0) state->free_count++;
   118e8:	f833 4b02 	ldrh.w	r4, [r3], #2
   118ec:	b90c      	cbnz	r4, 118f2 <FatPartition::freeClusterCount()+0xca>
   118ee:	3501      	adds	r5, #1
   118f0:	4602      	mov	r2, r0
  while (p < e) {
   118f2:	459c      	cmp	ip, r3
   118f4:	d8f8      	bhi.n	118e8 <FatPartition::freeClusterCount()+0xc0>
   118f6:	b102      	cbz	r2, 118fa <FatPartition::freeClusterCount()+0xd2>
   118f8:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
   118fa:	f10a 0a01 	add.w	sl, sl, #1
  state->clusters_to_do -= n;
   118fe:	eba1 010e 	sub.w	r1, r1, lr
   11902:	45d1      	cmp	r9, sl
   11904:	9102      	str	r1, [sp, #8]
   11906:	d05a      	beq.n	119be <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
   11908:	f8d8 2000 	ldr.w	r2, [r8]
   1190c:	e7d7      	b.n	118be <FatPartition::freeClusterCount()+0x96>
      if (fg && c == 0) {
   1190e:	9a02      	ldr	r2, [sp, #8]
   11910:	2a00      	cmp	r2, #0
   11912:	d1a4      	bne.n	1185e <FatPartition::freeClusterCount()+0x36>
    for (unsigned i = 2; i < todo; i++) {
   11914:	42a7      	cmp	r7, r4
        free++;
   11916:	f105 0501 	add.w	r5, r5, #1
    for (unsigned i = 2; i < todo; i++) {
   1191a:	461c      	mov	r4, r3
   1191c:	d1a2      	bne.n	11864 <FatPartition::freeClusterCount()+0x3c>
    return free;
   1191e:	4628      	mov	r0, r5
}
   11920:	b004      	add	sp, #16
   11922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
   11926:	f8d6 a000 	ldr.w	sl, [r6]
   1192a:	4b2e      	ldr	r3, [pc, #184]	; (119e4 <FatPartition::freeClusterCount()+0x1bc>)
   1192c:	f8da 2000 	ldr.w	r2, [sl]
   11930:	f8d6 9018 	ldr.w	r9, [r6, #24]
   11934:	6995      	ldr	r5, [r2, #24]
   11936:	429d      	cmp	r5, r3
   11938:	d146      	bne.n	119c8 <FatPartition::freeClusterCount()+0x1a0>
     for (size_t i = 0; i < ns; i++) {
   1193a:	2c00      	cmp	r4, #0
   1193c:	d03f      	beq.n	119be <FatPartition::freeClusterCount()+0x196>
   1193e:	eb09 0804 	add.w	r8, r9, r4
       if (!readSector(sector + i, dst)) return false;
   11942:	6913      	ldr	r3, [r2, #16]
   11944:	4649      	mov	r1, r9
   11946:	463a      	mov	r2, r7
   11948:	4650      	mov	r0, sl
   1194a:	4798      	blx	r3
   1194c:	2800      	cmp	r0, #0
   1194e:	d08c      	beq.n	1186a <FatPartition::freeClusterCount()+0x42>
  unsigned int n = state->clusters_to_do;
   11950:	f8dd c008 	ldr.w	ip, [sp, #8]
  if (n > 128) n = 128;
   11954:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   11958:	46e6      	mov	lr, ip
   1195a:	bf28      	it	cs
   1195c:	f04f 0e80 	movcs.w	lr, #128	; 0x80
  uint32_t *e = p + n;
   11960:	eb07 028e 	add.w	r2, r7, lr, lsl #2
  while (p < e) {
   11964:	42ba      	cmp	r2, r7
   11966:	d90b      	bls.n	11980 <FatPartition::freeClusterCount()+0x158>
   11968:	9d03      	ldr	r5, [sp, #12]
   1196a:	463b      	mov	r3, r7
   1196c:	2100      	movs	r1, #0
    if (*p++ == 0) state->free_count++;
   1196e:	f853 4b04 	ldr.w	r4, [r3], #4
   11972:	b90c      	cbnz	r4, 11978 <FatPartition::freeClusterCount()+0x150>
   11974:	3501      	adds	r5, #1
   11976:	4601      	mov	r1, r0
  while (p < e) {
   11978:	429a      	cmp	r2, r3
   1197a:	d8f8      	bhi.n	1196e <FatPartition::freeClusterCount()+0x146>
   1197c:	b101      	cbz	r1, 11980 <FatPartition::freeClusterCount()+0x158>
   1197e:	9503      	str	r5, [sp, #12]
     for (size_t i = 0; i < ns; i++) {
   11980:	f109 0901 	add.w	r9, r9, #1
  state->clusters_to_do -= n;
   11984:	ebac 030e 	sub.w	r3, ip, lr
   11988:	45c8      	cmp	r8, r9
   1198a:	9302      	str	r3, [sp, #8]
   1198c:	d017      	beq.n	119be <FatPartition::freeClusterCount()+0x196>
       if (!readSector(sector + i, dst)) return false;
   1198e:	f8da 2000 	ldr.w	r2, [sl]
   11992:	e7d6      	b.n	11942 <FatPartition::freeClusterCount()+0x11a>
    if (isDirty() && !sync()) {
   11994:	f506 700e 	add.w	r0, r6, #568	; 0x238
   11998:	f002 fb70 	bl	1407c <FsCache::sync()>
   1199c:	2800      	cmp	r0, #0
   1199e:	f43f af64 	beq.w	1186a <FatPartition::freeClusterCount()+0x42>
   119a2:	79f2      	ldrb	r2, [r6, #7]
   119a4:	e771      	b.n	1188a <FatPartition::freeClusterCount()+0x62>
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat16, &state)) return -1;
   119a6:	4623      	mov	r3, r4
   119a8:	ac02      	add	r4, sp, #8
   119aa:	463a      	mov	r2, r7
   119ac:	4651      	mov	r1, sl
   119ae:	9401      	str	r4, [sp, #4]
   119b0:	4640      	mov	r0, r8
   119b2:	4c0d      	ldr	r4, [pc, #52]	; (119e8 <FatPartition::freeClusterCount()+0x1c0>)
   119b4:	9400      	str	r4, [sp, #0]
   119b6:	47a8      	blx	r5
   119b8:	2800      	cmp	r0, #0
   119ba:	f43f af56 	beq.w	1186a <FatPartition::freeClusterCount()+0x42>
  setFreeClusterCount(state.free_count);
   119be:	9803      	ldr	r0, [sp, #12]
    m_freeClusterCount = value;
   119c0:	6270      	str	r0, [r6, #36]	; 0x24
}
   119c2:	b004      	add	sp, #16
   119c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!m_blockDev->readSectorsCallback(m_fatStartSector, buf, num_sectors, freeClusterCount_cb_fat32, &state)) return -1;
   119c8:	4623      	mov	r3, r4
   119ca:	ac02      	add	r4, sp, #8
   119cc:	463a      	mov	r2, r7
   119ce:	4649      	mov	r1, r9
   119d0:	9401      	str	r4, [sp, #4]
   119d2:	4650      	mov	r0, sl
   119d4:	4c05      	ldr	r4, [pc, #20]	; (119ec <FatPartition::freeClusterCount()+0x1c4>)
   119d6:	9400      	str	r4, [sp, #0]
   119d8:	47a8      	blx	r5
   119da:	2800      	cmp	r0, #0
   119dc:	d1ef      	bne.n	119be <FatPartition::freeClusterCount()+0x196>
   119de:	e744      	b.n	1186a <FatPartition::freeClusterCount()+0x42>
    for (unsigned i = 2; i < todo; i++) {
   119e0:	2000      	movs	r0, #0
   119e2:	e744      	b.n	1186e <FatPartition::freeClusterCount()+0x46>
   119e4:	0001143d 	.word	0x0001143d
   119e8:	00011481 	.word	0x00011481
   119ec:	000114b5 	.word	0x000114b5

000119f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>:


//------------------------------------------------------------------------------
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
   119f0:	b570      	push	{r4, r5, r6, lr}
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
   119f2:	2300      	movs	r3, #0
bool FatPartition::init(FsBlockDevice* dev, uint8_t part) {
   119f4:	4604      	mov	r4, r0
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   119f6:	4615      	mov	r5, r2
  m_allocSearchStart = 1;
   119f8:	2001      	movs	r0, #1
    m_sector = 0XFFFFFFFF;
   119fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  m_cache.init(dev);
   119fe:	f104 0628 	add.w	r6, r4, #40	; 0x28
  m_blockDev = dev;
   11a02:	6021      	str	r1, [r4, #0]
  m_fatType = 0;
   11a04:	71e3      	strb	r3, [r4, #7]
  m_allocSearchStart = 1;
   11a06:	60e0      	str	r0, [r4, #12]
    m_blockDev = blockDev;
   11a08:	62e1      	str	r1, [r4, #44]	; 0x2c
   11a0a:	f8c4 123c 	str.w	r1, [r4, #572]	; 0x23c
    m_status = 0;
   11a0e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   11a12:	f884 3238 	strb.w	r3, [r4, #568]	; 0x238
    m_sector = 0XFFFFFFFF;
   11a16:	6362      	str	r2, [r4, #52]	; 0x34
   11a18:	f8c4 2244 	str.w	r2, [r4, #580]	; 0x244
  if (part) {
   11a1c:	b1cd      	cbz	r5, 11a52 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
   11a1e:	2d04      	cmp	r5, #4
   11a20:	d901      	bls.n	11a26 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x36>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
   11a22:	2000      	movs	r0, #0
}
   11a24:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.prepare(sector, options);
   11a26:	461a      	mov	r2, r3
   11a28:	4619      	mov	r1, r3
   11a2a:	4630      	mov	r0, r6
   11a2c:	f002 fb52 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
    MbrPart_t* mp = mbr->part + part - 1;
   11a30:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
   11a34:	f500 72df 	add.w	r2, r0, #446	; 0x1be
   11a38:	442b      	add	r3, r5
   11a3a:	011d      	lsls	r5, r3, #4
   11a3c:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
   11a40:	2800      	cmp	r0, #0
   11a42:	d0ee      	beq.n	11a22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
   11a44:	7919      	ldrb	r1, [r3, #4]
   11a46:	2900      	cmp	r1, #0
   11a48:	d0eb      	beq.n	11a22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
   11a4a:	5d52      	ldrb	r2, [r2, r5]
   11a4c:	0652      	lsls	r2, r2, #25
   11a4e:	d1e8      	bne.n	11a22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  return *reinterpret_cast<const uint32_t*>(src);
   11a50:	689d      	ldr	r5, [r3, #8]
   11a52:	2200      	movs	r2, #0
   11a54:	4629      	mov	r1, r5
   11a56:	4630      	mov	r0, r6
   11a58:	f002 fb3c 	bl	140d4 <FsCache::prepare(unsigned long, unsigned char)>
  if (!pbs || getLe16(bpb->bytesPerSector) != m_bytesPerSector) {
   11a5c:	2800      	cmp	r0, #0
   11a5e:	d0e0      	beq.n	11a22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
   11a60:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   11a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   11a68:	d1db      	bne.n	11a22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_fatCount = bpb->fatCount;
   11a6a:	7c03      	ldrb	r3, [r0, #16]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
   11a6c:	1e5a      	subs	r2, r3, #1
  m_fatCount = bpb->fatCount;
   11a6e:	7223      	strb	r3, [r4, #8]
  if ((m_fatCount != 1) && (m_fatCount != 2)) {
   11a70:	2a01      	cmp	r2, #1
   11a72:	d8d6      	bhi.n	11a22 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x32>
  m_sectorsPerCluster = bpb->sectorsPerCluster;
   11a74:	7b41      	ldrb	r1, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
   11a76:	1e4b      	subs	r3, r1, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11a78:	2901      	cmp	r1, #1
  m_sectorsPerCluster = bpb->sectorsPerCluster;
   11a7a:	7121      	strb	r1, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
   11a7c:	7163      	strb	r3, [r4, #5]
  m_sectorsPerClusterShift = 0;
   11a7e:	f04f 0300 	mov.w	r3, #0
   11a82:	71a3      	strb	r3, [r4, #6]
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11a84:	d044      	beq.n	11b10 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x120>
   11a86:	2201      	movs	r2, #1
   11a88:	0052      	lsls	r2, r2, #1
    m_sectorsPerClusterShift++;
   11a8a:	3301      	adds	r3, #1
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11a8c:	b2d2      	uxtb	r2, r2
    m_sectorsPerClusterShift++;
   11a8e:	b2db      	uxtb	r3, r3
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11a90:	4291      	cmp	r1, r2
   11a92:	d004      	beq.n	11a9e <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xae>
    if (tmp == 0) {
   11a94:	2b08      	cmp	r3, #8
   11a96:	d1f7      	bne.n	11a88 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x98>
  return false;
   11a98:	2000      	movs	r0, #0
   11a9a:	71a3      	strb	r3, [r4, #6]
}
   11a9c:	bd70      	pop	{r4, r5, r6, pc}
  clusterCount >>= m_sectorsPerClusterShift;
   11a9e:	461e      	mov	r6, r3
   11aa0:	71a3      	strb	r3, [r4, #6]
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
   11aa2:	8ac1      	ldrh	r1, [r0, #22]
   11aa4:	6121      	str	r1, [r4, #16]
  if (m_sectorsPerFat == 0) {
   11aa6:	b909      	cbnz	r1, 11aac <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xbc>
   11aa8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
   11aaa:	6121      	str	r1, [r4, #16]
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
   11aac:	89c2      	ldrh	r2, [r0, #14]
  return *reinterpret_cast<const uint16_t*>(src);
   11aae:	f8b0 3011 	ldrh.w	r3, [r0, #17]
   11ab2:	442a      	add	r2, r5
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
   11ab4:	8163      	strh	r3, [r4, #10]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
   11ab6:	015b      	lsls	r3, r3, #5
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
   11ab8:	61a2      	str	r2, [r4, #24]
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   11aba:	f890 c010 	ldrb.w	ip, [r0, #16]
    ((FS_DIR_SIZE*m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
   11abe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   11ac2:	fb01 220c 	mla	r2, r1, ip, r2
  m_dataStartSector = m_rootDirStart +
   11ac6:	eb02 2353 	add.w	r3, r2, r3, lsr #9
  m_rootDirStart = m_fatStartSector + bpb->fatCount * m_sectorsPerFat;
   11aca:	6222      	str	r2, [r4, #32]
  totalSectors = getLe16(bpb->totalSectors16);
   11acc:	f8b0 2013 	ldrh.w	r2, [r0, #19]
  m_dataStartSector = m_rootDirStart +
   11ad0:	6163      	str	r3, [r4, #20]
  if (totalSectors == 0) {
   11ad2:	b902      	cbnz	r2, 11ad6 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xe6>
  return *reinterpret_cast<const uint32_t*>(src);
   11ad4:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
   11ad6:	1aed      	subs	r5, r5, r3
   11ad8:	18ab      	adds	r3, r5, r2
  clusterCount >>= m_sectorsPerClusterShift;
   11ada:	40f3      	lsrs	r3, r6
  m_lastCluster = clusterCount + 1;
   11adc:	1c5a      	adds	r2, r3, #1
   11ade:	61e2      	str	r2, [r4, #28]
    m_freeClusterCount = value;
   11ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ae4:	6262      	str	r2, [r4, #36]	; 0x24
  if (clusterCount < 4085) {
   11ae6:	f640 72f4 	movw	r2, #4084	; 0xff4
   11aea:	4293      	cmp	r3, r2
   11aec:	d90c      	bls.n	11b08 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x118>
  } else if (clusterCount < 65525) {
   11aee:	f64f 72f4 	movw	r2, #65524	; 0xfff4
   11af2:	4293      	cmp	r3, r2
   11af4:	d90a      	bls.n	11b0c <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x11c>
   11af6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
   11af8:	2320      	movs	r3, #32
   11afa:	6222      	str	r2, [r4, #32]
  return true;
   11afc:	2001      	movs	r0, #1
    m_fatType = 12;
   11afe:	71e3      	strb	r3, [r4, #7]
    m_mirrorOffset = offset;
   11b00:	6321      	str	r1, [r4, #48]	; 0x30
   11b02:	f8c4 1240 	str.w	r1, [r4, #576]	; 0x240
}
   11b06:	bd70      	pop	{r4, r5, r6, pc}
   11b08:	230c      	movs	r3, #12
   11b0a:	e7f7      	b.n	11afc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
   11b0c:	2310      	movs	r3, #16
   11b0e:	e7f5      	b.n	11afc <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0x10c>
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
   11b10:	461e      	mov	r6, r3
   11b12:	e7c6      	b.n	11aa2 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)+0xb2>

00011b14 <FsBaseFile::FsBaseFile(FsBaseFile const&)>:
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
//------------------------------------------------------------------------------
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
   11b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b16:	2600      	movs	r6, #0
  m_fFile = nullptr;
  m_xFile = nullptr;
  if (from.m_fFile) {
   11b18:	6b8f      	ldr	r7, [r1, #56]	; 0x38
FsBaseFile::FsBaseFile(const FsBaseFile& from) {
   11b1a:	460d      	mov	r5, r1
   11b1c:	4604      	mov	r4, r0
   11b1e:	e9c0 660e 	strd	r6, r6, [r0, #56]	; 0x38
  if (from.m_fFile) {
   11b22:	b19f      	cbz	r7, 11b4c <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x38>
    m_fFile = new (m_fileMem) FatFile;
   11b24:	4601      	mov	r1, r0
   11b26:	2024      	movs	r0, #36	; 0x24
   11b28:	f000 f8dc 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
   11b2c:	8006      	strh	r6, [r0, #0]
   11b2e:	7086      	strb	r6, [r0, #2]
    *m_fFile = *from.m_fFile;
   11b30:	4684      	mov	ip, r0
   11b32:	6bad      	ldr	r5, [r5, #56]	; 0x38
    m_fFile = new (m_fileMem) FatFile;
   11b34:	63a0      	str	r0, [r4, #56]	; 0x38
    *m_fFile = *from.m_fFile;
   11b36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11b38:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11b3e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   11b42:	682b      	ldr	r3, [r5, #0]
   11b44:	f8cc 3000 	str.w	r3, [ip]
  } else if (from.m_xFile) {
    m_xFile = new (m_fileMem) ExFatFile;
    *m_xFile = *from.m_xFile;
  }
}
   11b48:	4620      	mov	r0, r4
   11b4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (from.m_xFile) {
   11b4c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   11b4e:	2b00      	cmp	r3, #0
   11b50:	d0fa      	beq.n	11b48 <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x34>
    m_xFile = new (m_fileMem) ExFatFile;
   11b52:	4601      	mov	r1, r0
   11b54:	2038      	movs	r0, #56	; 0x38
   11b56:	f000 f8c5 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
   11b5a:	f880 7031 	strb.w	r7, [r0, #49]	; 0x31
   11b5e:	8647      	strh	r7, [r0, #50]	; 0x32
    *m_xFile = *from.m_xFile;
   11b60:	4602      	mov	r2, r0
   11b62:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    m_xFile = new (m_fileMem) ExFatFile;
   11b64:	63e0      	str	r0, [r4, #60]	; 0x3c
    *m_xFile = *from.m_xFile;
   11b66:	f103 0730 	add.w	r7, r3, #48	; 0x30
   11b6a:	681e      	ldr	r6, [r3, #0]
   11b6c:	3310      	adds	r3, #16
   11b6e:	f853 5c0c 	ldr.w	r5, [r3, #-12]
   11b72:	3210      	adds	r2, #16
   11b74:	f853 0c08 	ldr.w	r0, [r3, #-8]
   11b78:	f853 1c04 	ldr.w	r1, [r3, #-4]
   11b7c:	42bb      	cmp	r3, r7
   11b7e:	f842 6c10 	str.w	r6, [r2, #-16]
   11b82:	f842 5c0c 	str.w	r5, [r2, #-12]
   11b86:	f842 0c08 	str.w	r0, [r2, #-8]
   11b8a:	f842 1c04 	str.w	r1, [r2, #-4]
   11b8e:	d1ec      	bne.n	11b6a <FsBaseFile::FsBaseFile(FsBaseFile const&)+0x56>
   11b90:	681b      	ldr	r3, [r3, #0]
}
   11b92:	4620      	mov	r0, r4
    *m_xFile = *from.m_xFile;
   11b94:	6013      	str	r3, [r2, #0]
}
   11b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011b98 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
   11b98:	b510      	push	{r4, lr}
   11b9a:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   11b9c:	6b80      	ldr	r0, [r0, #56]	; 0x38
   11b9e:	b110      	cbz	r0, 11ba6 <FsBaseFile::close()+0xe>
   11ba0:	f7fd fce2 	bl	f568 <FatFile::close()>
   11ba4:	b930      	cbnz	r0, 11bb4 <FsBaseFile::close()+0x1c>
    m_fFile = nullptr;
    return true;
  }
  if (m_xFile && m_xFile->close()) {
   11ba6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   11ba8:	b110      	cbz	r0, 11bb0 <FsBaseFile::close()+0x18>
   11baa:	f7fb fbcf 	bl	d34c <ExFatFile::close()>
   11bae:	b920      	cbnz	r0, 11bba <FsBaseFile::close()+0x22>
    m_xFile = nullptr;
    return true;
  }
  return false;
   11bb0:	2000      	movs	r0, #0
}
   11bb2:	bd10      	pop	{r4, pc}
    m_fFile = nullptr;
   11bb4:	2300      	movs	r3, #0
   11bb6:	63a3      	str	r3, [r4, #56]	; 0x38
}
   11bb8:	bd10      	pop	{r4, pc}
    m_xFile = nullptr;
   11bba:	2300      	movs	r3, #0
   11bbc:	63e3      	str	r3, [r4, #60]	; 0x3c
}
   11bbe:	bd10      	pop	{r4, pc}

00011bc0 <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
   11bc0:	2900      	cmp	r1, #0
   11bc2:	d052      	beq.n	11c6a <FsBaseFile::open(FsVolume*, char const*, int)+0xaa>
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
   11bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11bc8:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   11bca:	6b80      	ldr	r0, [r0, #56]	; 0x38
   11bcc:	460d      	mov	r5, r1
   11bce:	4617      	mov	r7, r2
   11bd0:	461e      	mov	r6, r3
   11bd2:	b110      	cbz	r0, 11bda <FsBaseFile::open(FsVolume*, char const*, int)+0x1a>
   11bd4:	f7fd fcc8 	bl	f568 <FatFile::close()>
   11bd8:	bba0      	cbnz	r0, 11c44 <FsBaseFile::open(FsVolume*, char const*, int)+0x84>
  if (m_xFile && m_xFile->close()) {
   11bda:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   11bdc:	b110      	cbz	r0, 11be4 <FsBaseFile::open(FsVolume*, char const*, int)+0x24>
   11bde:	f7fb fbb5 	bl	d34c <ExFatFile::close()>
   11be2:	bbb8      	cbnz	r0, 11c54 <FsBaseFile::open(FsVolume*, char const*, int)+0x94>
    return false;
  }
  close();
  if (vol->m_fVol) {
   11be4:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
   11be8:	f1b8 0f00 	cmp.w	r8, #0
   11bec:	d011      	beq.n	11c12 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_fFile = new (m_fileMem) FatFile;
   11bee:	4621      	mov	r1, r4
   11bf0:	2024      	movs	r0, #36	; 0x24
   11bf2:	f000 f877 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
   11bf6:	4633      	mov	r3, r6
   11bf8:	2600      	movs	r6, #0
   11bfa:	463a      	mov	r2, r7
   11bfc:	8006      	strh	r6, [r0, #0]
   11bfe:	7086      	strb	r6, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
   11c00:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
   11c02:	f8d5 1480 	ldr.w	r1, [r5, #1152]	; 0x480
   11c06:	f7fd feb7 	bl	f978 <FatFile::open(FatVolume*, char const*, int)>
   11c0a:	bb58      	cbnz	r0, 11c64 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
      return true;
    }
    m_fFile = nullptr;
   11c0c:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
   11c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
   11c12:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
   11c16:	b193      	cbz	r3, 11c3e <FsBaseFile::open(FsVolume*, char const*, int)+0x7e>
    m_xFile = new (m_fileMem) ExFatFile;
   11c18:	4621      	mov	r1, r4
   11c1a:	2038      	movs	r0, #56	; 0x38
   11c1c:	f000 f862 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
   11c20:	4633      	mov	r3, r6
   11c22:	f880 8031 	strb.w	r8, [r0, #49]	; 0x31
   11c26:	463a      	mov	r2, r7
   11c28:	f8a0 8032 	strh.w	r8, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
   11c2c:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
   11c2e:	f8d5 1484 	ldr.w	r1, [r5, #1156]	; 0x484
   11c32:	f7fb ffbf 	bl	dbb4 <ExFatFile::open(ExFatVolume*, char const*, int)>
   11c36:	b9a8      	cbnz	r0, 11c64 <FsBaseFile::open(FsVolume*, char const*, int)+0xa4>
    m_xFile = nullptr;
   11c38:	63e0      	str	r0, [r4, #60]	; 0x3c
}
   11c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   11c3e:	2000      	movs	r0, #0
}
   11c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_fFile = nullptr;
   11c44:	2300      	movs	r3, #0
  if (vol->m_fVol) {
   11c46:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_fFile = nullptr;
   11c4a:	63a3      	str	r3, [r4, #56]	; 0x38
  if (vol->m_fVol) {
   11c4c:	f1b8 0f00 	cmp.w	r8, #0
   11c50:	d1cd      	bne.n	11bee <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
   11c52:	e7de      	b.n	11c12 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
    m_xFile = nullptr;
   11c54:	2300      	movs	r3, #0
  if (vol->m_fVol) {
   11c56:	f8d5 8480 	ldr.w	r8, [r5, #1152]	; 0x480
    m_xFile = nullptr;
   11c5a:	63e3      	str	r3, [r4, #60]	; 0x3c
  if (vol->m_fVol) {
   11c5c:	f1b8 0f00 	cmp.w	r8, #0
   11c60:	d1c5      	bne.n	11bee <FsBaseFile::open(FsVolume*, char const*, int)+0x2e>
   11c62:	e7d6      	b.n	11c12 <FsBaseFile::open(FsVolume*, char const*, int)+0x52>
      return true;
   11c64:	2001      	movs	r0, #1
}
   11c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   11c6a:	2000      	movs	r0, #0
}
   11c6c:	4770      	bx	lr
   11c6e:	bf00      	nop

00011c70 <FsBaseFile::openNext(FsBaseFile*, int)>:
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
   11c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11c72:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
   11c74:	6b80      	ldr	r0, [r0, #56]	; 0x38
bool FsBaseFile::openNext(FsBaseFile* dir, oflag_t oflag) {
   11c76:	460d      	mov	r5, r1
   11c78:	4617      	mov	r7, r2
  if (m_fFile && m_fFile->close()) {
   11c7a:	b110      	cbz	r0, 11c82 <FsBaseFile::openNext(FsBaseFile*, int)+0x12>
   11c7c:	f7fd fc74 	bl	f568 <FatFile::close()>
   11c80:	bb38      	cbnz	r0, 11cd2 <FsBaseFile::openNext(FsBaseFile*, int)+0x62>
  if (m_xFile && m_xFile->close()) {
   11c82:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   11c84:	b110      	cbz	r0, 11c8c <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
   11c86:	f7fb fb61 	bl	d34c <ExFatFile::close()>
   11c8a:	bb38      	cbnz	r0, 11cdc <FsBaseFile::openNext(FsBaseFile*, int)+0x6c>
  close();
  if (dir->m_fFile) {
   11c8c:	6bae      	ldr	r6, [r5, #56]	; 0x38
   11c8e:	b176      	cbz	r6, 11cae <FsBaseFile::openNext(FsBaseFile*, int)+0x3e>
    m_fFile = new (m_fileMem) FatFile;
   11c90:	4621      	mov	r1, r4
   11c92:	2024      	movs	r0, #36	; 0x24
   11c94:	f000 f826 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
   11c98:	2100      	movs	r1, #0
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
   11c9a:	463a      	mov	r2, r7
   11c9c:	8001      	strh	r1, [r0, #0]
   11c9e:	7081      	strb	r1, [r0, #2]
    m_fFile = new (m_fileMem) FatFile;
   11ca0:	63a0      	str	r0, [r4, #56]	; 0x38
    if (m_fFile->openNext(dir->m_fFile, oflag)) {
   11ca2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   11ca4:	f7fe f9ce 	bl	10044 <FatFile::openNext(FatFile*, int)>
   11ca8:	b988      	cbnz	r0, 11cce <FsBaseFile::openNext(FsBaseFile*, int)+0x5e>
      return true;
    }
    m_fFile = nullptr;
   11caa:	63a0      	str	r0, [r4, #56]	; 0x38
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
   11cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if (dir->m_xFile) {
   11cae:	6be8      	ldr	r0, [r5, #60]	; 0x3c
   11cb0:	2800      	cmp	r0, #0
   11cb2:	d0fb      	beq.n	11cac <FsBaseFile::openNext(FsBaseFile*, int)+0x3c>
    m_xFile = new (m_fileMem) ExFatFile;
   11cb4:	4621      	mov	r1, r4
   11cb6:	2038      	movs	r0, #56	; 0x38
   11cb8:	f000 f814 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
   11cbc:	463a      	mov	r2, r7
   11cbe:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
   11cc2:	8646      	strh	r6, [r0, #50]	; 0x32
    m_xFile = new (m_fileMem) ExFatFile;
   11cc4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (m_xFile->openNext(dir->m_xFile, oflag)) {
   11cc6:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   11cc8:	f7fb ff7c 	bl	dbc4 <ExFatFile::openNext(ExFatFile*, int)>
   11ccc:	b120      	cbz	r0, 11cd8 <FsBaseFile::openNext(FsBaseFile*, int)+0x68>
      return true;
   11cce:	2001      	movs	r0, #1
}
   11cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_fFile = nullptr;
   11cd2:	2300      	movs	r3, #0
   11cd4:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
   11cd6:	e7d9      	b.n	11c8c <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
    m_xFile = nullptr;
   11cd8:	63e0      	str	r0, [r4, #60]	; 0x3c
}
   11cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_xFile = nullptr;
   11cdc:	2300      	movs	r3, #0
   11cde:	63e3      	str	r3, [r4, #60]	; 0x3c
    return true;
   11ce0:	e7d4      	b.n	11c8c <FsBaseFile::openNext(FsBaseFile*, int)+0x1c>
   11ce2:	bf00      	nop

00011ce4 <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
   11ce4:	4608      	mov	r0, r1
   11ce6:	4770      	bx	lr

00011ce8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   11ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_blockDev = blockDev;
  m_fVol = nullptr;
   11cec:	2600      	movs	r6, #0
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   11cee:	4604      	mov	r4, r0
   11cf0:	4698      	mov	r8, r3
  m_blockDev = blockDev;
   11cf2:	f8c0 1488 	str.w	r1, [r0, #1160]	; 0x488
  m_fVol = nullptr;
   11cf6:	f8c0 6480 	str.w	r6, [r0, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
   11cfa:	4601      	mov	r1, r0
   11cfc:	f44f 6090 	mov.w	r0, #1152	; 0x480
bool FsVolume::begin(FsBlockDevice* blockDev, bool setCwv, uint8_t part) {
   11d00:	4617      	mov	r7, r2
  m_xVol = new (m_volMem) ExFatVolume;
   11d02:	f7ff ffef 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
   11d06:	4642      	mov	r2, r8
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
   11d08:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
   11d0c:	4605      	mov	r5, r0
   11d0e:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
   11d12:	f8a0 647a 	strh.w	r6, [r0, #1146]	; 0x47a
   11d16:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
   11d1a:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
   11d1e:	f7fd fae7 	bl	f2f0 <ExFatPartition::init(FsBlockDeviceInterface*, unsigned char)>
   11d22:	bba0      	cbnz	r0, 11d8e <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xa6>
  if (m_xVol && m_xVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_xVol = nullptr;
   11d24:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
   11d26:	4621      	mov	r1, r4
   11d28:	f240 406c 	movw	r0, #1132	; 0x46c
  m_xVol = nullptr;
   11d2c:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
   11d30:	f7ff ffd8 	bl	11ce4 <operator new(unsigned int, unsigned long*)>
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
   11d34:	2302      	movs	r3, #2
   11d36:	71c6      	strb	r6, [r0, #7]
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(FsBlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
   11d38:	4642      	mov	r2, r8
   11d3a:	f8a0 6448 	strh.w	r6, [r0, #1096]	; 0x448
   11d3e:	4605      	mov	r5, r0
   11d40:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
   11d44:	7203      	strb	r3, [r0, #8]
   11d46:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
   11d4a:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
   11d4e:	f7ff fe4f 	bl	119f0 <FatPartition::init(FsBlockDeviceInterface*, unsigned char)>
   11d52:	b938      	cbnz	r0, 11d64 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x7c>
  if (m_fVol && m_fVol->begin(m_blockDev, false, part)) {
    goto done;
  }
  m_cwv = nullptr;
   11d54:	2300      	movs	r3, #0
   11d56:	4a1a      	ldr	r2, [pc, #104]	; (11dc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
  m_fVol = nullptr;
  return false;
   11d58:	4618      	mov	r0, r3
  m_cwv = nullptr;
   11d5a:	6013      	str	r3, [r2, #0]
  m_fVol = nullptr;
   11d5c:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
 done:
  if (setCwv || !m_cwv) {
    m_cwv = this;
  }
  return true;
}
   11d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
   11d64:	f505 6689 	add.w	r6, r5, #1096	; 0x448
   11d68:	4630      	mov	r0, r6
   11d6a:	f7fd fbfd 	bl	f568 <FatFile::close()>
    return m_vwd.openRoot(this);
   11d6e:	4629      	mov	r1, r5
   11d70:	4630      	mov	r0, r6
   11d72:	f7fd fe37 	bl	f9e4 <FatFile::openRoot(FatVolume*)>
    if (!chdir()) {
   11d76:	2800      	cmp	r0, #0
   11d78:	d0ec      	beq.n	11d54 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x6c>
    if (setCwv || !m_cwv) {
   11d7a:	4b12      	ldr	r3, [pc, #72]	; (11dc4 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xdc>)
   11d7c:	681a      	ldr	r2, [r3, #0]
   11d7e:	b9aa      	cbnz	r2, 11dac <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xc4>
      m_cwv = this;
   11d80:	601d      	str	r5, [r3, #0]
  if (setCwv || !m_cwv) {
   11d82:	4b0f      	ldr	r3, [pc, #60]	; (11dc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
   11d84:	b1af      	cbz	r7, 11db2 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xca>
  return true;
   11d86:	2001      	movs	r0, #1
    m_cwv = this;
   11d88:	601c      	str	r4, [r3, #0]
}
   11d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
   11d8e:	f505 6689 	add.w	r6, r5, #1096	; 0x448
   11d92:	4630      	mov	r0, r6
   11d94:	f7fb fada 	bl	d34c <ExFatFile::close()>
    return m_vwd.openRoot(this);
   11d98:	4629      	mov	r1, r5
   11d9a:	4630      	mov	r0, r6
   11d9c:	f7fb fb04 	bl	d3a8 <ExFatFile::openRoot(ExFatVolume*)>
    if (!chdir()) {
   11da0:	2800      	cmp	r0, #0
   11da2:	d0bf      	beq.n	11d24 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x3c>
    if (setCwv || !m_cwv) {
   11da4:	4b08      	ldr	r3, [pc, #32]	; (11dc8 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xe0>)
   11da6:	681a      	ldr	r2, [r3, #0]
   11da8:	2a00      	cmp	r2, #0
   11daa:	d0e9      	beq.n	11d80 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x98>
  if (setCwv || !m_cwv) {
   11dac:	4b04      	ldr	r3, [pc, #16]	; (11dc0 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0xd8>)
   11dae:	2f00      	cmp	r7, #0
   11db0:	d1e9      	bne.n	11d86 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
   11db2:	681a      	ldr	r2, [r3, #0]
   11db4:	2a00      	cmp	r2, #0
   11db6:	d0e6      	beq.n	11d86 <FsVolume::begin(FsBlockDeviceInterface*, bool, unsigned char)+0x9e>
  return true;
   11db8:	2001      	movs	r0, #1
}
   11dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11dbe:	bf00      	nop
   11dc0:	200052c8 	.word	0x200052c8
   11dc4:	200052cc 	.word	0x200052cc
   11dc8:	200050b0 	.word	0x200050b0

00011dcc <FsVolume::open(char const*, int)>:
bool FsVolume::ls(print_t* pr, const char* path, uint8_t flags) {
  FsBaseFile dir;
  return dir.open(this, path, O_RDONLY) && dir.ls(pr, flags);
}
//------------------------------------------------------------------------------
FsFile FsVolume::open(const char *path, oflag_t oflag) {
   11dcc:	b570      	push	{r4, r5, r6, lr}
	constexpr Print() : write_error(0) {}
   11dce:	2500      	movs	r5, #0
	constexpr Stream() : _timeout(1000), read_error(0) {}
   11dd0:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   11dd4:	4604      	mov	r4, r0
   11dd6:	6045      	str	r5, [r0, #4]
   11dd8:	7305      	strb	r5, [r0, #12]
   11dda:	6086      	str	r6, [r0, #8]
  FsBaseFile() {}
   11ddc:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
   11de0:	4d03      	ldr	r5, [pc, #12]	; (11df0 <FsVolume::open(char const*, int)+0x24>)
   11de2:	f840 5b10 	str.w	r5, [r0], #16
  FsFile tmpFile;
  tmpFile.open(this, path, oflag);
   11de6:	f7ff feeb 	bl	11bc0 <FsBaseFile::open(FsVolume*, char const*, int)>
  return tmpFile;
}
   11dea:	4620      	mov	r0, r4
   11dec:	bd70      	pop	{r4, r5, r6, pc}
   11dee:	bf00      	nop
   11df0:	20001500 	.word	0x20001500

00011df4 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
   11df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11df8:	4770      	bx	lr
   11dfa:	bf00      	nop

00011dfc <SharedSpiCard::errorCode() const>:
  }
   11dfc:	7c40      	ldrb	r0, [r0, #17]
   11dfe:	4770      	bx	lr

00011e00 <SharedSpiCard::errorData() const>:
  }
   11e00:	7d00      	ldrb	r0, [r0, #20]
   11e02:	4770      	bx	lr

00011e04 <SharedSpiCard::type() const>:
  }
   11e04:	7d40      	ldrb	r0, [r0, #21]
   11e06:	4770      	bx	lr

00011e08 <DedicatedSpiCard::hasDedicatedSpi()>:
   * \param[in] spiConfig SPI card configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdSpiConfig spiConfig);
  /** \return true, can be in dedicaded state. */
  bool hasDedicatedSpi() {return true;}
   11e08:	2001      	movs	r0, #1
   11e0a:	4770      	bx	lr

00011e0c <DedicatedSpiCard::isDedicatedSpi()>:
  /** \return true if in dedicated SPI state. */
  bool isDedicatedSpi() {return m_dedicatedSpi;}
   11e0c:	7f00      	ldrb	r0, [r0, #28]
   11e0e:	4770      	bx	lr

00011e10 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)>:
fail:
  return false;
}
//------------------------------------------------------------------------------
bool DedicatedSpiCard::writeSectorsCallback(uint32_t sector, size_t ns,
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   11e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11e14:	461e      	mov	r6, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11e16:	7cc3      	ldrb	r3, [r0, #19]
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   11e18:	4605      	mov	r5, r0
   11e1a:	460c      	mov	r4, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11e1c:	2b02      	cmp	r3, #2
 const uint8_t * (*callback)(uint32_t sector, void *context), void *context) {
   11e1e:	4691      	mov	r9, r2
   11e20:	9f08      	ldr	r7, [sp, #32]
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11e22:	d028      	beq.n	11e76 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x66>
    if (!writeStart(sector)) {
   11e24:	682b      	ldr	r3, [r5, #0]
   11e26:	4621      	mov	r1, r4
   11e28:	4628      	mov	r0, r5
   11e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11e2c:	4798      	blx	r3
   11e2e:	b198      	cbz	r0, 11e58 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x48>
      goto fail;
    }
    m_curSector = sector;
   11e30:	61ac      	str	r4, [r5, #24]
  }
  for (size_t i = 0; i < ns; i++) {
   11e32:	f1b9 0f00 	cmp.w	r9, #0
   11e36:	d012      	beq.n	11e5e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
   11e38:	eb04 0809 	add.w	r8, r4, r9
   11e3c:	e001      	b.n	11e42 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x32>
   11e3e:	45a0      	cmp	r8, r4
   11e40:	d00d      	beq.n	11e5e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4e>
    const uint8_t *src = callback(sector + i, context);
   11e42:	4639      	mov	r1, r7
   11e44:	4620      	mov	r0, r4
   11e46:	47b0      	blx	r6
    if (!writeData(src)) {
   11e48:	682b      	ldr	r3, [r5, #0]
    const uint8_t *src = callback(sector + i, context);
   11e4a:	4601      	mov	r1, r0
    if (!writeData(src)) {
   11e4c:	4628      	mov	r0, r5
   11e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++) {
   11e50:	3401      	adds	r4, #1
    if (!writeData(src)) {
   11e52:	4798      	blx	r3
   11e54:	2800      	cmp	r0, #0
   11e56:	d1f2      	bne.n	11e3e <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x2e>
  }
  m_curSector += ns;
  return m_dedicatedSpi ? true : writeStop();

 fail:
  return false;
   11e58:	2000      	movs	r0, #0
}
   11e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_curSector += ns;
   11e5e:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   11e60:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
   11e62:	444b      	add	r3, r9
   11e64:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   11e66:	2800      	cmp	r0, #0
   11e68:	d1f7      	bne.n	11e5a <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x4a>
   11e6a:	682b      	ldr	r3, [r5, #0]
   11e6c:	4628      	mov	r0, r5
   11e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
   11e70:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  return m_dedicatedSpi ? true : writeStop();
   11e74:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11e76:	6983      	ldr	r3, [r0, #24]
   11e78:	428b      	cmp	r3, r1
   11e7a:	d1d3      	bne.n	11e24 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x14>
   11e7c:	e7d9      	b.n	11e32 <DedicatedSpiCard::writeSectorsCallback(unsigned long, unsigned int, unsigned char const* (*)(unsigned long, void*), void*)+0x22>
   11e7e:	bf00      	nop

00011e80 <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
   11e80:	4770      	bx	lr
   11e82:	bf00      	nop

00011e84 <SharedSpiCard::end()>:
    m_spiDriver.end();
   11e84:	3004      	adds	r0, #4
   11e86:	f002 b8a5 	b.w	13fd4 <SdSpiArduinoDriver::end()>
   11e8a:	bf00      	nop

00011e8c <DedicatedSpiCard::~DedicatedSpiCard()>:
class DedicatedSpiCard : public SharedSpiCard {
   11e8c:	b510      	push	{r4, lr}
   11e8e:	4604      	mov	r4, r0
   11e90:	2120      	movs	r1, #32
   11e92:	f004 fc25 	bl	166e0 <operator delete(void*, unsigned int)>
   11e96:	4620      	mov	r0, r4
   11e98:	bd10      	pop	{r4, pc}
   11e9a:	bf00      	nop

00011e9c <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
    uint32_t sector, const uint8_t* src, size_t ns) {
   11e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ea0:	461f      	mov	r7, r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11ea2:	7cc3      	ldrb	r3, [r0, #19]
    uint32_t sector, const uint8_t* src, size_t ns) {
   11ea4:	4605      	mov	r5, r0
   11ea6:	460e      	mov	r6, r1
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11ea8:	2b02      	cmp	r3, #2
    uint32_t sector, const uint8_t* src, size_t ns) {
   11eaa:	4614      	mov	r4, r2
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11eac:	d024      	beq.n	11ef8 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x5c>
    if (!writeStart(sector)) {
   11eae:	682b      	ldr	r3, [r5, #0]
   11eb0:	4631      	mov	r1, r6
   11eb2:	4628      	mov	r0, r5
   11eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   11eb6:	4798      	blx	r3
   11eb8:	b178      	cbz	r0, 11eda <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x3e>
    m_curSector = sector;
   11eba:	61ae      	str	r6, [r5, #24]
  for (size_t i = 0; i < ns; i++, src += 512) {
   11ebc:	b187      	cbz	r7, 11ee0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeStart(sector)) {
   11ebe:	2600      	movs	r6, #0
   11ec0:	e001      	b.n	11ec6 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2a>
  for (size_t i = 0; i < ns; i++, src += 512) {
   11ec2:	42b7      	cmp	r7, r6
   11ec4:	d00c      	beq.n	11ee0 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
    if (!writeData(src)) {
   11ec6:	682a      	ldr	r2, [r5, #0]
   11ec8:	4621      	mov	r1, r4
   11eca:	4628      	mov	r0, r5
  for (size_t i = 0; i < ns; i++, src += 512) {
   11ecc:	3601      	adds	r6, #1
    if (!writeData(src)) {
   11ece:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
  for (size_t i = 0; i < ns; i++, src += 512) {
   11ed0:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
   11ed4:	4790      	blx	r2
   11ed6:	2800      	cmp	r0, #0
   11ed8:	d1f3      	bne.n	11ec2 <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
  return false;
   11eda:	2000      	movs	r0, #0
}
   11edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_curSector += ns;
   11ee0:	69ab      	ldr	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   11ee2:	7f28      	ldrb	r0, [r5, #28]
  m_curSector += ns;
   11ee4:	443b      	add	r3, r7
   11ee6:	61ab      	str	r3, [r5, #24]
  return m_dedicatedSpi ? true : writeStop();
   11ee8:	2800      	cmp	r0, #0
   11eea:	d1f7      	bne.n	11edc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x40>
   11eec:	682b      	ldr	r3, [r5, #0]
   11eee:	4628      	mov	r0, r5
   11ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
   11ef2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : writeStop();
   11ef6:	4718      	bx	r3
  if (sdState() != WRITE_STATE || m_curSector != sector) {
   11ef8:	6983      	ldr	r3, [r0, #24]
   11efa:	428b      	cmp	r3, r1
   11efc:	d1d7      	bne.n	11eae <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
   11efe:	e7dd      	b.n	11ebc <DedicatedSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x20>

00011f00 <SharedSpiCard::writeStop()>:
bool SharedSpiCard::writeStop() {
   11f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f04:	4e20      	ldr	r6, [pc, #128]	; (11f88 <SharedSpiCard::writeStop()+0x88>)
   11f06:	4607      	mov	r7, r0
    return m_spiDriver.receive();
   11f08:	f100 0804 	add.w	r8, r0, #4
   11f0c:	6835      	ldr	r5, [r6, #0]
    m_endTime = ms + millis16();
   11f0e:	f505 7516 	add.w	r5, r5, #600	; 0x258
   11f12:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
   11f14:	e003      	b.n	11f1e <SharedSpiCard::writeStop()+0x1e>
   11f16:	6833      	ldr	r3, [r6, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   11f18:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
   11f1a:	041b      	lsls	r3, r3, #16
   11f1c:	d410      	bmi.n	11f40 <SharedSpiCard::writeStop()+0x40>
   11f1e:	4640      	mov	r0, r8
   11f20:	f002 f85c 	bl	13fdc <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   11f24:	28ff      	cmp	r0, #255	; 0xff
   11f26:	4604      	mov	r4, r0
   11f28:	d1f5      	bne.n	11f16 <SharedSpiCard::writeStop()+0x16>
    m_spiDriver.send(data);
   11f2a:	21fd      	movs	r1, #253	; 0xfd
   11f2c:	4640      	mov	r0, r8
   11f2e:	f002 f873 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
  if (m_spiActive) {
   11f32:	7cbb      	ldrb	r3, [r7, #18]
   11f34:	b9cb      	cbnz	r3, 11f6a <SharedSpiCard::writeStop()+0x6a>
  m_state = IDLE_STATE;
   11f36:	2300      	movs	r3, #0
   11f38:	2001      	movs	r0, #1
   11f3a:	74fb      	strb	r3, [r7, #19]
}
   11f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
   11f40:	231e      	movs	r3, #30
  if (m_spiActive) {
   11f42:	7cb8      	ldrb	r0, [r7, #18]
   11f44:	747b      	strb	r3, [r7, #17]
   11f46:	2800      	cmp	r0, #0
   11f48:	d0f8      	beq.n	11f3c <SharedSpiCard::writeStop()+0x3c>
    sdCsWrite(m_csPin, true);
   11f4a:	7c38      	ldrb	r0, [r7, #16]
   11f4c:	2101      	movs	r1, #1
   11f4e:	f001 fff9 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   11f52:	21ff      	movs	r1, #255	; 0xff
   11f54:	4640      	mov	r0, r8
   11f56:	f002 f85f 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   11f5a:	4640      	mov	r0, r8
   11f5c:	f002 f812 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   11f60:	2300      	movs	r3, #0
  return false;
   11f62:	4618      	mov	r0, r3
    m_spiActive = false;
   11f64:	74bb      	strb	r3, [r7, #18]
}
   11f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdCsWrite(m_csPin, true);
   11f6a:	2101      	movs	r1, #1
   11f6c:	7c38      	ldrb	r0, [r7, #16]
   11f6e:	f001 ffe9 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   11f72:	4621      	mov	r1, r4
   11f74:	4640      	mov	r0, r8
   11f76:	f002 f84f 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   11f7a:	4640      	mov	r0, r8
   11f7c:	f002 f802 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   11f80:	2300      	movs	r3, #0
   11f82:	74bb      	strb	r3, [r7, #18]
}
   11f84:	e7d7      	b.n	11f36 <SharedSpiCard::writeStop()+0x36>
   11f86:	bf00      	nop
   11f88:	2000bc24 	.word	0x2000bc24

00011f8c <SharedSpiCard::isBusy()>:
bool SharedSpiCard::isBusy() {
   11f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (m_state == READ_STATE) {
   11f90:	7cc3      	ldrb	r3, [r0, #19]
   11f92:	2b01      	cmp	r3, #1
   11f94:	d035      	beq.n	12002 <SharedSpiCard::isBusy()+0x76>
  if (!spiActive) {
   11f96:	7c86      	ldrb	r6, [r0, #18]
   11f98:	4604      	mov	r4, r0
   11f9a:	b14e      	cbz	r6, 11fb0 <SharedSpiCard::isBusy()+0x24>
    return m_spiDriver.receive();
   11f9c:	3004      	adds	r0, #4
   11f9e:	f002 f81d 	bl	13fdc <SdSpiArduinoDriver::receive()>
  bool rtn = 0XFF != spiReceive();
   11fa2:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
   11fa6:	bf18      	it	ne
   11fa8:	2501      	movne	r5, #1
}
   11faa:	4628      	mov	r0, r5
   11fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_spiDriver.activate();
   11fb0:	1d07      	adds	r7, r0, #4
    m_spiActive = true;
   11fb2:	f04f 0801 	mov.w	r8, #1
   11fb6:	4638      	mov	r0, r7
   11fb8:	f001 ffc6 	bl	13f48 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   11fbc:	4631      	mov	r1, r6
   11fbe:	7c20      	ldrb	r0, [r4, #16]
   11fc0:	f001 ffc0 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   11fc4:	21ff      	movs	r1, #255	; 0xff
   11fc6:	4638      	mov	r0, r7
   11fc8:	f002 f826 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   11fcc:	4638      	mov	r0, r7
   11fce:	f884 8012 	strb.w	r8, [r4, #18]
   11fd2:	f002 f803 	bl	13fdc <SdSpiArduinoDriver::receive()>
  if (m_spiActive) {
   11fd6:	7ca3      	ldrb	r3, [r4, #18]
  bool rtn = 0XFF != spiReceive();
   11fd8:	f1b0 05ff 	subs.w	r5, r0, #255	; 0xff
   11fdc:	bf18      	it	ne
   11fde:	2501      	movne	r5, #1
  if (m_spiActive) {
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	d0e2      	beq.n	11faa <SharedSpiCard::isBusy()+0x1e>
    sdCsWrite(m_csPin, true);
   11fe4:	4641      	mov	r1, r8
   11fe6:	7c20      	ldrb	r0, [r4, #16]
   11fe8:	f001 ffac 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   11fec:	21ff      	movs	r1, #255	; 0xff
   11fee:	4638      	mov	r0, r7
   11ff0:	f002 f812 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   11ff4:	4638      	mov	r0, r7
   11ff6:	f001 ffc5 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
}
   11ffa:	4628      	mov	r0, r5
    m_spiActive = false;
   11ffc:	74a6      	strb	r6, [r4, #18]
}
   11ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return false;
   12002:	2500      	movs	r5, #0
}
   12004:	4628      	mov	r0, r5
   12006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1200a:	bf00      	nop

0001200c <SharedSpiCard::readData(unsigned char*, unsigned int)>:
bool SharedSpiCard::readData(uint8_t* dst, size_t count) {
   1200c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12010:	4f20      	ldr	r7, [pc, #128]	; (12094 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x88>)
   12012:	4604      	mov	r4, r0
   12014:	4688      	mov	r8, r1
   12016:	4691      	mov	r9, r2
   12018:	683d      	ldr	r5, [r7, #0]
    return m_spiDriver.receive();
   1201a:	1d06      	adds	r6, r0, #4
    m_endTime = ms + millis16();
   1201c:	f505 7596 	add.w	r5, r5, #300	; 0x12c
   12020:	b2ad      	uxth	r5, r5
  explicit Timeout(uint16_t ms) {set(ms);}
   12022:	e003      	b.n	1202c <SharedSpiCard::readData(unsigned char*, unsigned int)+0x20>
   12024:	683b      	ldr	r3, [r7, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   12026:	1aeb      	subs	r3, r5, r3
    if (timeout.timedOut()) {
   12028:	041b      	lsls	r3, r3, #16
   1202a:	d40d      	bmi.n	12048 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x3c>
   1202c:	4630      	mov	r0, r6
   1202e:	f001 ffd5 	bl	13fdc <SdSpiArduinoDriver::receive()>
  while ((m_status = spiReceive()) == 0XFF) {
   12032:	28ff      	cmp	r0, #255	; 0xff
   12034:	7520      	strb	r0, [r4, #20]
   12036:	d0f5      	beq.n	12024 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x18>
  if (m_status != DATA_START_SECTOR) {
   12038:	28fe      	cmp	r0, #254	; 0xfe
   1203a:	d01a      	beq.n	12072 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x66>
   1203c:	2318      	movs	r3, #24
  if (m_spiActive) {
   1203e:	7ca0      	ldrb	r0, [r4, #18]
    m_errorCode = code;
   12040:	7463      	strb	r3, [r4, #17]
   12042:	b930      	cbnz	r0, 12052 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x46>
}
   12044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12048:	231d      	movs	r3, #29
  if (m_spiActive) {
   1204a:	7ca0      	ldrb	r0, [r4, #18]
   1204c:	7463      	strb	r3, [r4, #17]
   1204e:	2800      	cmp	r0, #0
   12050:	d0f8      	beq.n	12044 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
    sdCsWrite(m_csPin, true);
   12052:	7c20      	ldrb	r0, [r4, #16]
   12054:	2101      	movs	r1, #1
   12056:	f001 ff75 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1205a:	21ff      	movs	r1, #255	; 0xff
   1205c:	4630      	mov	r0, r6
   1205e:	f001 ffdb 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12062:	4630      	mov	r0, r6
   12064:	f001 ff8e 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12068:	2300      	movs	r3, #0
  return false;
   1206a:	4618      	mov	r0, r3
    m_spiActive = false;
   1206c:	74a3      	strb	r3, [r4, #18]
}
   1206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return m_spiDriver.receive(buf, n);
   12072:	464a      	mov	r2, r9
   12074:	4641      	mov	r1, r8
   12076:	4630      	mov	r0, r6
   12078:	f001 ffbc 	bl	13ff4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if ((m_status = spiReceive(dst, count))) {
   1207c:	7520      	strb	r0, [r4, #20]
   1207e:	b938      	cbnz	r0, 12090 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x84>
    return m_spiDriver.receive();
   12080:	4630      	mov	r0, r6
   12082:	f001 ffab 	bl	13fdc <SdSpiArduinoDriver::receive()>
   12086:	4630      	mov	r0, r6
   12088:	f001 ffa8 	bl	13fdc <SdSpiArduinoDriver::receive()>
  return true;
   1208c:	2001      	movs	r0, #1
   1208e:	e7d9      	b.n	12044 <SharedSpiCard::readData(unsigned char*, unsigned int)+0x38>
   12090:	2325      	movs	r3, #37	; 0x25
   12092:	e7d4      	b.n	1203e <SharedSpiCard::readData(unsigned char*, unsigned int)+0x32>
   12094:	2000bc24 	.word	0x2000bc24

00012098 <SharedSpiCard::readStop()>:
bool SharedSpiCard::readStop() {
   12098:	b5f0      	push	{r4, r5, r6, r7, lr}
  m_state = IDLE_STATE;
   1209a:	2700      	movs	r7, #0
bool SharedSpiCard::readStop() {
   1209c:	b083      	sub	sp, #12
  if (cardCommand(CMD12, 0)) {
   1209e:	210c      	movs	r1, #12
bool SharedSpiCard::readStop() {
   120a0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   120a2:	463a      	mov	r2, r7
  m_state = IDLE_STATE;
   120a4:	74c7      	strb	r7, [r0, #19]
  if (cardCommand(CMD12, 0)) {
   120a6:	f000 f85b 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   120aa:	b9b0      	cbnz	r0, 120da <SharedSpiCard::readStop()+0x42>
  if (m_spiActive) {
   120ac:	7ca6      	ldrb	r6, [r4, #18]
   120ae:	b91e      	cbnz	r6, 120b8 <SharedSpiCard::readStop()+0x20>
  return true;
   120b0:	2601      	movs	r6, #1
}
   120b2:	4630      	mov	r0, r6
   120b4:	b003      	add	sp, #12
   120b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
   120b8:	4605      	mov	r5, r0
   120ba:	2101      	movs	r1, #1
   120bc:	7c20      	ldrb	r0, [r4, #16]
   120be:	f001 ff41 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   120c2:	1d20      	adds	r0, r4, #4
   120c4:	21ff      	movs	r1, #255	; 0xff
   120c6:	9001      	str	r0, [sp, #4]
   120c8:	f001 ffa6 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   120cc:	9801      	ldr	r0, [sp, #4]
   120ce:	f001 ff59 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
   120d2:	4630      	mov	r0, r6
    m_spiActive = false;
   120d4:	74a5      	strb	r5, [r4, #18]
}
   120d6:	b003      	add	sp, #12
   120d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    m_errorCode = code;
   120da:	2309      	movs	r3, #9
  if (m_spiActive) {
   120dc:	7ca6      	ldrb	r6, [r4, #18]
   120de:	7463      	strb	r3, [r4, #17]
   120e0:	2e00      	cmp	r6, #0
   120e2:	d0e6      	beq.n	120b2 <SharedSpiCard::readStop()+0x1a>
    m_spiDriver.send(data);
   120e4:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   120e6:	7c20      	ldrb	r0, [r4, #16]
   120e8:	2101      	movs	r1, #1
}
   120ea:	463e      	mov	r6, r7
   120ec:	f001 ff2a 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   120f0:	21ff      	movs	r1, #255	; 0xff
   120f2:	4628      	mov	r0, r5
   120f4:	f001 ff90 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   120f8:	4628      	mov	r0, r5
   120fa:	f001 ff43 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
}
   120fe:	4630      	mov	r0, r6
    m_spiActive = false;
   12100:	74a7      	strb	r7, [r4, #18]
}
   12102:	b003      	add	sp, #12
   12104:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12106:	bf00      	nop

00012108 <SharedSpiCard::syncDevice()>:
  if (m_state == WRITE_STATE) {
   12108:	7cc2      	ldrb	r2, [r0, #19]
   1210a:	2a02      	cmp	r2, #2
   1210c:	d003      	beq.n	12116 <SharedSpiCard::syncDevice()+0xe>
  if (m_state == READ_STATE) {
   1210e:	2a01      	cmp	r2, #1
   12110:	d004      	beq.n	1211c <SharedSpiCard::syncDevice()+0x14>
}
   12112:	2001      	movs	r0, #1
   12114:	4770      	bx	lr
    return writeStop();
   12116:	6803      	ldr	r3, [r0, #0]
   12118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1211a:	4718      	bx	r3
    return readStop();
   1211c:	f7ff bfbc 	b.w	12098 <SharedSpiCard::readStop()>

00012120 <DedicatedSpiCard::setDedicatedSpi(bool)>:
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
   12120:	b538      	push	{r3, r4, r5, lr}
  if (!syncDevice()) {
   12122:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::setDedicatedSpi(bool value) {
   12124:	460d      	mov	r5, r1
   12126:	490d      	ldr	r1, [pc, #52]	; (1215c <DedicatedSpiCard::setDedicatedSpi(bool)+0x3c>)
   12128:	4604      	mov	r4, r0
  if (!syncDevice()) {
   1212a:	6a1a      	ldr	r2, [r3, #32]
   1212c:	428a      	cmp	r2, r1
   1212e:	d10c      	bne.n	1214a <DedicatedSpiCard::setDedicatedSpi(bool)+0x2a>
  if (m_state == WRITE_STATE) {
   12130:	7cc2      	ldrb	r2, [r0, #19]
   12132:	2a02      	cmp	r2, #2
   12134:	d004      	beq.n	12140 <DedicatedSpiCard::setDedicatedSpi(bool)+0x20>
  if (m_state == READ_STATE) {
   12136:	2a01      	cmp	r2, #1
   12138:	d00b      	beq.n	12152 <DedicatedSpiCard::setDedicatedSpi(bool)+0x32>
  return true;
   1213a:	2001      	movs	r0, #1
  m_dedicatedSpi = value;
   1213c:	7725      	strb	r5, [r4, #28]
}
   1213e:	bd38      	pop	{r3, r4, r5, pc}
    return writeStop();
   12140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12142:	4798      	blx	r3
  if (!syncDevice()) {
   12144:	2800      	cmp	r0, #0
   12146:	d1f8      	bne.n	1213a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
}
   12148:	bd38      	pop	{r3, r4, r5, pc}
  if (!syncDevice()) {
   1214a:	4790      	blx	r2
   1214c:	2800      	cmp	r0, #0
   1214e:	d0fb      	beq.n	12148 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
   12150:	e7f3      	b.n	1213a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
    return readStop();
   12152:	f7ff ffa1 	bl	12098 <SharedSpiCard::readStop()>
  if (!syncDevice()) {
   12156:	2800      	cmp	r0, #0
   12158:	d0f6      	beq.n	12148 <DedicatedSpiCard::setDedicatedSpi(bool)+0x28>
   1215a:	e7ee      	b.n	1213a <DedicatedSpiCard::setDedicatedSpi(bool)+0x1a>
   1215c:	00012109 	.word	0x00012109

00012160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>:
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   12160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!syncDevice()) {
   12164:	6803      	ldr	r3, [r0, #0]
uint8_t SharedSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   12166:	b082      	sub	sp, #8
   12168:	460f      	mov	r7, r1
   1216a:	4935      	ldr	r1, [pc, #212]	; (12240 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe0>)
   1216c:	9201      	str	r2, [sp, #4]
   1216e:	4606      	mov	r6, r0
  if (!syncDevice()) {
   12170:	6a1a      	ldr	r2, [r3, #32]
   12172:	428a      	cmp	r2, r1
   12174:	d15e      	bne.n	12234 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd4>
  if (m_state == WRITE_STATE) {
   12176:	7cc2      	ldrb	r2, [r0, #19]
   12178:	2a02      	cmp	r2, #2
   1217a:	d041      	beq.n	12200 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa0>
  if (m_state == READ_STATE) {
   1217c:	2a01      	cmp	r2, #1
   1217e:	d05b      	beq.n	12238 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xd8>
  if (!m_spiActive) {
   12180:	7cb4      	ldrb	r4, [r6, #18]
   12182:	2c00      	cmp	r4, #0
   12184:	d047      	beq.n	12216 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb6>
    m_spiDriver.activate();
   12186:	1d35      	adds	r5, r6, #4
  if (cmd != CMD12) {
   12188:	2f0c      	cmp	r7, #12
   1218a:	d011      	beq.n	121b0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
   1218c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 12244 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xe4>
   12190:	f8d8 4000 	ldr.w	r4, [r8]
    m_endTime = ms + millis16();
   12194:	f504 7496 	add.w	r4, r4, #300	; 0x12c
   12198:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
   1219a:	e004      	b.n	121a6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x46>
   1219c:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
   121a0:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
   121a2:	041a      	lsls	r2, r3, #16
   121a4:	d434      	bmi.n	12210 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xb0>
    return m_spiDriver.receive();
   121a6:	4628      	mov	r0, r5
   121a8:	f001 ff18 	bl	13fdc <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   121ac:	28ff      	cmp	r0, #255	; 0xff
   121ae:	d1f5      	bne.n	1219c <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x3c>
    m_spiDriver.send(data);
   121b0:	f10d 0804 	add.w	r8, sp, #4
   121b4:	ac02      	add	r4, sp, #8
   121b6:	f047 0140 	orr.w	r1, r7, #64	; 0x40
   121ba:	4628      	mov	r0, r5
   121bc:	f001 ff2c 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
   121c0:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
   121c4:	4628      	mov	r0, r5
   121c6:	f001 ff27 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
  for (int8_t i = 3; i >= 0; i--) {
   121ca:	45a0      	cmp	r8, r4
   121cc:	d1f8      	bne.n	121c0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x60>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   121ce:	2f00      	cmp	r7, #0
   121d0:	4628      	mov	r0, r5
    return m_spiDriver.receive();
   121d2:	f04f 040a 	mov.w	r4, #10
    m_spiDriver.send(data);
   121d6:	bf0c      	ite	eq
   121d8:	2195      	moveq	r1, #149	; 0x95
   121da:	2187      	movne	r1, #135	; 0x87
   121dc:	f001 ff1c 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   121e0:	4628      	mov	r0, r5
   121e2:	f001 fefb 	bl	13fdc <SdSpiArduinoDriver::receive()>
   121e6:	4628      	mov	r0, r5
  } while (m_status & 0X80 && ++n < 10);
   121e8:	3c01      	subs	r4, #1
   121ea:	f001 fef7 	bl	13fdc <SdSpiArduinoDriver::receive()>
   121ee:	0603      	lsls	r3, r0, #24
   121f0:	b2a4      	uxth	r4, r4
    m_status = spiReceive();
   121f2:	7530      	strb	r0, [r6, #20]
  } while (m_status & 0X80 && ++n < 10);
   121f4:	d501      	bpl.n	121fa <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x9a>
   121f6:	2c00      	cmp	r4, #0
   121f8:	d1f5      	bne.n	121e6 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x86>
}
   121fa:	b002      	add	sp, #8
   121fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return writeStop();
   12200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12202:	4798      	blx	r3
  if (!syncDevice()) {
   12204:	2800      	cmp	r0, #0
   12206:	d1bb      	bne.n	12180 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x20>
    return 0XFF;
   12208:	20ff      	movs	r0, #255	; 0xff
}
   1220a:	b002      	add	sp, #8
   1220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!waitReady(SD_CMD_TIMEOUT) && cmd != CMD0) {
   12210:	2f00      	cmp	r7, #0
   12212:	d0cd      	beq.n	121b0 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x50>
   12214:	e7f8      	b.n	12208 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa8>
    m_spiDriver.activate();
   12216:	1d35      	adds	r5, r6, #4
   12218:	4628      	mov	r0, r5
   1221a:	f001 fe95 	bl	13f48 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   1221e:	4621      	mov	r1, r4
   12220:	7c30      	ldrb	r0, [r6, #16]
   12222:	f001 fe8f 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12226:	21ff      	movs	r1, #255	; 0xff
   12228:	4628      	mov	r0, r5
   1222a:	f001 fef5 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
   1222e:	2301      	movs	r3, #1
   12230:	74b3      	strb	r3, [r6, #18]
}
   12232:	e7a9      	b.n	12188 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0x28>
  if (!syncDevice()) {
   12234:	4790      	blx	r2
   12236:	e7e5      	b.n	12204 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
    return readStop();
   12238:	f7ff ff2e 	bl	12098 <SharedSpiCard::readStop()>
   1223c:	e7e2      	b.n	12204 <SharedSpiCard::cardCommand(unsigned char, unsigned long)+0xa4>
   1223e:	bf00      	nop
   12240:	00012109 	.word	0x00012109
   12244:	2000bc24 	.word	0x2000bc24

00012248 <SharedSpiCard::begin(SdSpiConfig)>:
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   12248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1224c:	b088      	sub	sp, #32
   1224e:	4605      	mov	r5, r0
  m_spiActive = false;
   12250:	f04f 0800 	mov.w	r8, #0
   12254:	4617      	mov	r7, r2
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   12256:	ac01      	add	r4, sp, #4
    m_spiDriver.begin(spiConfig);
   12258:	1d2e      	adds	r6, r5, #4
  m_spiActive = false;
   1225a:	f885 8012 	strb.w	r8, [r5, #18]
  m_errorCode = SD_CARD_ERROR_NONE;
   1225e:	f885 8011 	strb.w	r8, [r5, #17]
  m_type = 0;
   12262:	f885 8015 	strb.w	r8, [r5, #21]
bool SharedSpiCard::begin(SdSpiConfig spiConfig) {
   12266:	e884 000e 	stmia.w	r4, {r1, r2, r3}
   1226a:	f89d 0004 	ldrb.w	r0, [sp, #4]
  m_csPin = spiConfig.csPin;
   1226e:	7428      	strb	r0, [r5, #16]
  sdCsInit(m_csPin);
   12270:	f001 fe64 	bl	13f3c <sdCsInit(unsigned char)>
    sdCsWrite(m_csPin, true);
   12274:	2101      	movs	r1, #1
   12276:	7c28      	ldrb	r0, [r5, #16]
   12278:	f001 fe64 	bl	13f44 <sdCsWrite(unsigned char, bool)>
  /** Save high speed SPISettings after SD initialization.
   *
   * \param[in] maxSck Maximum SCK frequency.
   */
  void setSckSpeed(uint32_t maxSck) {
    m_spiSettings = SPISettings(maxSck, MSBFIRST, SPI_MODE0);
   1227c:	496c      	ldr	r1, [pc, #432]	; (12430 <SharedSpiCard::begin(SdSpiConfig)+0x1e8>)
   1227e:	2307      	movs	r3, #7
   12280:	e9c5 1302 	strd	r1, r3, [r5, #8]
  spiBegin(spiConfig);
   12284:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   12288:	ab05      	add	r3, sp, #20
   1228a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    m_spiDriver.begin(spiConfig);
   1228e:	4630      	mov	r0, r6
   12290:	cb0e      	ldmia	r3, {r1, r2, r3}
   12292:	f001 fe63 	bl	13f5c <SdSpiArduinoDriver::begin(SdSpiConfig)>
  if (!m_spiActive) {
   12296:	7cac      	ldrb	r4, [r5, #18]
  m_state = IDLE_STATE;
   12298:	f885 8013 	strb.w	r8, [r5, #19]
  if (!m_spiActive) {
   1229c:	2c00      	cmp	r4, #0
   1229e:	d067      	beq.n	12370 <SharedSpiCard::begin(SdSpiConfig)+0x128>
    sdCsWrite(m_csPin, true);
   122a0:	240a      	movs	r4, #10
   122a2:	2101      	movs	r1, #1
   122a4:	7c28      	ldrb	r0, [r5, #16]
   122a6:	f001 fe4d 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   122aa:	21ff      	movs	r1, #255	; 0xff
   122ac:	4630      	mov	r0, r6
   122ae:	f001 feb3 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
  for (uint8_t i = 0; i < 10; i++) {
   122b2:	1e61      	subs	r1, r4, #1
   122b4:	f011 04ff 	ands.w	r4, r1, #255	; 0xff
   122b8:	d1f7      	bne.n	122aa <SharedSpiCard::begin(SdSpiConfig)+0x62>
    sdCsWrite(m_csPin, false);
   122ba:	4621      	mov	r1, r4
   122bc:	240a      	movs	r4, #10
   122be:	7c28      	ldrb	r0, [r5, #16]
   122c0:	f001 fe40 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   122c4:	2200      	movs	r2, #0
   122c6:	4628      	mov	r0, r5
   122c8:	4611      	mov	r1, r2
   122ca:	f7ff ff49 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   122ce:	2801      	cmp	r0, #1
    if (i == SD_CMD0_RETRY) {
   122d0:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   122d4:	4604      	mov	r4, r0
   122d6:	d00a      	beq.n	122ee <SharedSpiCard::begin(SdSpiConfig)+0xa6>
    if (i == SD_CMD0_RETRY) {
   122d8:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   122dc:	d1f2      	bne.n	122c4 <SharedSpiCard::begin(SdSpiConfig)+0x7c>
   122de:	2301      	movs	r3, #1
  if (m_spiActive) {
   122e0:	7ca8      	ldrb	r0, [r5, #18]
    m_errorCode = code;
   122e2:	746b      	strb	r3, [r5, #17]
   122e4:	2800      	cmp	r0, #0
   122e6:	d151      	bne.n	1238c <SharedSpiCard::begin(SdSpiConfig)+0x144>
}
   122e8:	b008      	add	sp, #32
   122ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!(cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
   122ee:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   122f2:	2108      	movs	r1, #8
   122f4:	4628      	mov	r0, r5
   122f6:	f7ff ff33 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   122fa:	0742      	lsls	r2, r0, #29
   122fc:	d557      	bpl.n	123ae <SharedSpiCard::begin(SdSpiConfig)+0x166>
    m_type = value;
   122fe:	756c      	strb	r4, [r5, #21]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   12300:	682b      	ldr	r3, [r5, #0]
   12302:	f8df a130 	ldr.w	sl, [pc, #304]	; 12434 <SharedSpiCard::begin(SdSpiConfig)+0x1ec>
   12306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   12308:	4553      	cmp	r3, sl
   1230a:	d161      	bne.n	123d0 <SharedSpiCard::begin(SdSpiConfig)+0x188>
    return m_type;
   1230c:	7d68      	ldrb	r0, [r5, #21]
   1230e:	f1a0 0402 	sub.w	r4, r0, #2
   12312:	f8df 9124 	ldr.w	r9, [pc, #292]	; 12438 <SharedSpiCard::begin(SdSpiConfig)+0x1f0>
   12316:	fab4 f484 	clz	r4, r4
   1231a:	f8d9 3000 	ldr.w	r3, [r9]
   1231e:	0964      	lsrs	r4, r4, #5
    m_endTime = ms + millis16();
   12320:	f503 68fa 	add.w	r8, r3, #2000	; 0x7d0
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   12324:	07a4      	lsls	r4, r4, #30
    m_endTime = ms + millis16();
   12326:	fa1f f888 	uxth.w	r8, r8
  }
   1232a:	e005      	b.n	12338 <SharedSpiCard::begin(SdSpiConfig)+0xf0>
   1232c:	f8d9 3000 	ldr.w	r3, [r9]
    return (int16_t)(m_endTime - millis16()) < 0;
   12330:	eba8 0303 	sub.w	r3, r8, r3
    if (timeout.timedOut()) {
   12334:	041b      	lsls	r3, r3, #16
   12336:	d449      	bmi.n	123cc <SharedSpiCard::begin(SdSpiConfig)+0x184>
    cardCommand(CMD55, 0);
   12338:	2137      	movs	r1, #55	; 0x37
   1233a:	2200      	movs	r2, #0
   1233c:	4628      	mov	r0, r5
   1233e:	f7ff ff0f 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
    return cardCommand(cmd, arg);
   12342:	4622      	mov	r2, r4
   12344:	2129      	movs	r1, #41	; 0x29
   12346:	4628      	mov	r0, r5
   12348:	f7ff ff0a 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   1234c:	2800      	cmp	r0, #0
   1234e:	d1ed      	bne.n	1232c <SharedSpiCard::begin(SdSpiConfig)+0xe4>
  if (type() == SD_CARD_TYPE_SD2) {
   12350:	682b      	ldr	r3, [r5, #0]
   12352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   12354:	4553      	cmp	r3, sl
   12356:	d165      	bne.n	12424 <SharedSpiCard::begin(SdSpiConfig)+0x1dc>
    return m_type;
   12358:	7d68      	ldrb	r0, [r5, #21]
   1235a:	2802      	cmp	r0, #2
   1235c:	d049      	beq.n	123f2 <SharedSpiCard::begin(SdSpiConfig)+0x1aa>
  if (m_spiActive) {
   1235e:	7cab      	ldrb	r3, [r5, #18]
   12360:	bbcb      	cbnz	r3, 123d6 <SharedSpiCard::begin(SdSpiConfig)+0x18e>
   12362:	2307      	movs	r3, #7
  return true;
   12364:	2001      	movs	r0, #1
   12366:	e9c5 7302 	strd	r7, r3, [r5, #8]
}
   1236a:	b008      	add	sp, #32
   1236c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_spiDriver.activate();
   12370:	4630      	mov	r0, r6
   12372:	f001 fde9 	bl	13f48 <SdSpiArduinoDriver::activate()>
    sdCsWrite(m_csPin, false);
   12376:	4621      	mov	r1, r4
   12378:	7c28      	ldrb	r0, [r5, #16]
   1237a:	f001 fde3 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1237e:	21ff      	movs	r1, #255	; 0xff
   12380:	4630      	mov	r0, r6
   12382:	f001 fe49 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
   12386:	2301      	movs	r3, #1
   12388:	74ab      	strb	r3, [r5, #18]
}
   1238a:	e789      	b.n	122a0 <SharedSpiCard::begin(SdSpiConfig)+0x58>
    sdCsWrite(m_csPin, true);
   1238c:	7c28      	ldrb	r0, [r5, #16]
   1238e:	2101      	movs	r1, #1
   12390:	f001 fdd8 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12394:	21ff      	movs	r1, #255	; 0xff
   12396:	4630      	mov	r0, r6
   12398:	f001 fe3e 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1239c:	4630      	mov	r0, r6
   1239e:	f001 fdf1 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   123a2:	2300      	movs	r3, #0
  return false;
   123a4:	4618      	mov	r0, r3
    m_spiActive = false;
   123a6:	74ab      	strb	r3, [r5, #18]
}
   123a8:	b008      	add	sp, #32
   123aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    m_type = value;
   123ae:	2302      	movs	r3, #2
   123b0:	2404      	movs	r4, #4
   123b2:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
   123b4:	4630      	mov	r0, r6
   123b6:	f001 fe11 	bl	13fdc <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 4; i++) {
   123ba:	1e63      	subs	r3, r4, #1
      m_status = spiReceive();
   123bc:	7528      	strb	r0, [r5, #20]
    for (uint8_t i = 0; i < 4; i++) {
   123be:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
   123c2:	d1f7      	bne.n	123b4 <SharedSpiCard::begin(SdSpiConfig)+0x16c>
    if (m_status != 0XAA) {
   123c4:	28aa      	cmp	r0, #170	; 0xaa
   123c6:	d09b      	beq.n	12300 <SharedSpiCard::begin(SdSpiConfig)+0xb8>
   123c8:	2306      	movs	r3, #6
   123ca:	e789      	b.n	122e0 <SharedSpiCard::begin(SdSpiConfig)+0x98>
   123cc:	2317      	movs	r3, #23
   123ce:	e787      	b.n	122e0 <SharedSpiCard::begin(SdSpiConfig)+0x98>
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   123d0:	4628      	mov	r0, r5
   123d2:	4798      	blx	r3
   123d4:	e79b      	b.n	1230e <SharedSpiCard::begin(SdSpiConfig)+0xc6>
    sdCsWrite(m_csPin, true);
   123d6:	2101      	movs	r1, #1
   123d8:	7c28      	ldrb	r0, [r5, #16]
   123da:	f001 fdb3 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   123de:	21ff      	movs	r1, #255	; 0xff
   123e0:	4630      	mov	r0, r6
   123e2:	f001 fe19 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   123e6:	4630      	mov	r0, r6
   123e8:	f001 fdcc 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   123ec:	2300      	movs	r3, #0
   123ee:	74ab      	strb	r3, [r5, #18]
}
   123f0:	e7b7      	b.n	12362 <SharedSpiCard::begin(SdSpiConfig)+0x11a>
    if (cardCommand(CMD58, 0)) {
   123f2:	2200      	movs	r2, #0
   123f4:	213a      	movs	r1, #58	; 0x3a
   123f6:	4628      	mov	r0, r5
   123f8:	f7ff feb2 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   123fc:	b9a8      	cbnz	r0, 1242a <SharedSpiCard::begin(SdSpiConfig)+0x1e2>
    return m_spiDriver.receive();
   123fe:	4630      	mov	r0, r6
   12400:	f001 fdec 	bl	13fdc <SdSpiArduinoDriver::receive()>
    if ((spiReceive() & 0XC0) == 0XC0) {
   12404:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   12408:	28c0      	cmp	r0, #192	; 0xc0
   1240a:	d101      	bne.n	12410 <SharedSpiCard::begin(SdSpiConfig)+0x1c8>
    m_type = value;
   1240c:	2303      	movs	r3, #3
   1240e:	756b      	strb	r3, [r5, #21]
    return m_spiDriver.receive();
   12410:	4630      	mov	r0, r6
   12412:	f001 fde3 	bl	13fdc <SdSpiArduinoDriver::receive()>
   12416:	4630      	mov	r0, r6
   12418:	f001 fde0 	bl	13fdc <SdSpiArduinoDriver::receive()>
   1241c:	4630      	mov	r0, r6
   1241e:	f001 fddd 	bl	13fdc <SdSpiArduinoDriver::receive()>
    for (uint8_t i = 0; i < 3; i++) {
   12422:	e79c      	b.n	1235e <SharedSpiCard::begin(SdSpiConfig)+0x116>
  if (type() == SD_CARD_TYPE_SD2) {
   12424:	4628      	mov	r0, r5
   12426:	4798      	blx	r3
   12428:	e797      	b.n	1235a <SharedSpiCard::begin(SdSpiConfig)+0x112>
   1242a:	2312      	movs	r3, #18
   1242c:	e758      	b.n	122e0 <SharedSpiCard::begin(SdSpiConfig)+0x98>
   1242e:	bf00      	nop
   12430:	00061a80 	.word	0x00061a80
   12434:	00011e05 	.word	0x00011e05
   12438:	2000bc24 	.word	0x2000bc24

0001243c <SharedSpiCard::readOCR(unsigned long*)>:
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   1243c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (cardCommand(CMD58, 0)) {
   1243e:	2200      	movs	r2, #0
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   12440:	460d      	mov	r5, r1
  if (cardCommand(CMD58, 0)) {
   12442:	213a      	movs	r1, #58	; 0x3a
bool SharedSpiCard::readOCR(uint32_t* ocr) {
   12444:	4606      	mov	r6, r0
  if (cardCommand(CMD58, 0)) {
   12446:	f7ff fe8b 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   1244a:	b9e0      	cbnz	r0, 12486 <SharedSpiCard::readOCR(unsigned long*)+0x4a>
    m_spiDriver.send(data);
   1244c:	1d37      	adds	r7, r6, #4
   1244e:	1d2c      	adds	r4, r5, #4
    return m_spiDriver.receive();
   12450:	4638      	mov	r0, r7
   12452:	f001 fdc3 	bl	13fdc <SdSpiArduinoDriver::receive()>
    p[3 - i] = spiReceive();
   12456:	f804 0d01 	strb.w	r0, [r4, #-1]!
  for (uint8_t i = 0; i < 4; i++) {
   1245a:	42a5      	cmp	r5, r4
   1245c:	d1f8      	bne.n	12450 <SharedSpiCard::readOCR(unsigned long*)+0x14>
  if (m_spiActive) {
   1245e:	7cb4      	ldrb	r4, [r6, #18]
   12460:	b914      	cbnz	r4, 12468 <SharedSpiCard::readOCR(unsigned long*)+0x2c>
   12462:	2401      	movs	r4, #1
}
   12464:	4620      	mov	r0, r4
   12466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sdCsWrite(m_csPin, true);
   12468:	7c30      	ldrb	r0, [r6, #16]
   1246a:	2101      	movs	r1, #1
   1246c:	f001 fd6a 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12470:	21ff      	movs	r1, #255	; 0xff
   12472:	4638      	mov	r0, r7
   12474:	f001 fdd0 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12478:	4638      	mov	r0, r7
   1247a:	f001 fd83 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   1247e:	2300      	movs	r3, #0
}
   12480:	4620      	mov	r0, r4
    m_spiActive = false;
   12482:	74b3      	strb	r3, [r6, #18]
}
   12484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    m_errorCode = code;
   12486:	2312      	movs	r3, #18
  if (m_spiActive) {
   12488:	7cb4      	ldrb	r4, [r6, #18]
   1248a:	7473      	strb	r3, [r6, #17]
   1248c:	2c00      	cmp	r4, #0
   1248e:	d0e9      	beq.n	12464 <SharedSpiCard::readOCR(unsigned long*)+0x28>
    m_spiDriver.send(data);
   12490:	1d34      	adds	r4, r6, #4
    sdCsWrite(m_csPin, true);
   12492:	7c30      	ldrb	r0, [r6, #16]
   12494:	2101      	movs	r1, #1
   12496:	f001 fd55 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1249a:	21ff      	movs	r1, #255	; 0xff
   1249c:	4620      	mov	r0, r4
   1249e:	f001 fdbb 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   124a2:	4620      	mov	r0, r4
   124a4:	f001 fd6e 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   124a8:	2300      	movs	r3, #0
  return false;
   124aa:	461c      	mov	r4, r3
    m_spiActive = false;
   124ac:	74b3      	strb	r3, [r6, #18]
}
   124ae:	4620      	mov	r0, r4
   124b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124b2:	bf00      	nop

000124b4 <SharedSpiCard::readRegister(unsigned char, void*)>:
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
   124b4:	b570      	push	{r4, r5, r6, lr}
   124b6:	4616      	mov	r6, r2
   124b8:	b082      	sub	sp, #8
  if (cardCommand(cmd, 0)) {
   124ba:	2200      	movs	r2, #0
bool SharedSpiCard::readRegister(uint8_t cmd, void* buf) {
   124bc:	4604      	mov	r4, r0
  if (cardCommand(cmd, 0)) {
   124be:	f7ff fe4f 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   124c2:	b1b0      	cbz	r0, 124f2 <SharedSpiCard::readRegister(unsigned char, void*)+0x3e>
    m_errorCode = code;
   124c4:	231b      	movs	r3, #27
   124c6:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   124c8:	7ca0      	ldrb	r0, [r4, #18]
   124ca:	b908      	cbnz	r0, 124d0 <SharedSpiCard::readRegister(unsigned char, void*)+0x1c>
}
   124cc:	b002      	add	sp, #8
   124ce:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   124d0:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   124d2:	7c20      	ldrb	r0, [r4, #16]
   124d4:	2101      	movs	r1, #1
   124d6:	f001 fd35 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   124da:	21ff      	movs	r1, #255	; 0xff
   124dc:	4628      	mov	r0, r5
   124de:	f001 fd9b 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   124e2:	4628      	mov	r0, r5
   124e4:	f001 fd4e 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   124e8:	2300      	movs	r3, #0
  return false;
   124ea:	4618      	mov	r0, r3
    m_spiActive = false;
   124ec:	74a3      	strb	r3, [r4, #18]
}
   124ee:	b002      	add	sp, #8
   124f0:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
   124f2:	4605      	mov	r5, r0
   124f4:	2210      	movs	r2, #16
   124f6:	4631      	mov	r1, r6
   124f8:	4620      	mov	r0, r4
   124fa:	f7ff fd87 	bl	1200c <SharedSpiCard::readData(unsigned char*, unsigned int)>
   124fe:	2800      	cmp	r0, #0
   12500:	d0e2      	beq.n	124c8 <SharedSpiCard::readRegister(unsigned char, void*)+0x14>
  if (m_spiActive) {
   12502:	7ca6      	ldrb	r6, [r4, #18]
   12504:	2e00      	cmp	r6, #0
   12506:	d0e1      	beq.n	124cc <SharedSpiCard::readRegister(unsigned char, void*)+0x18>
    sdCsWrite(m_csPin, true);
   12508:	7c20      	ldrb	r0, [r4, #16]
   1250a:	2101      	movs	r1, #1
   1250c:	f001 fd1a 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12510:	1d20      	adds	r0, r4, #4
   12512:	21ff      	movs	r1, #255	; 0xff
   12514:	9001      	str	r0, [sp, #4]
   12516:	f001 fd7f 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1251a:	9801      	ldr	r0, [sp, #4]
   1251c:	f001 fd32 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
}
   12520:	4630      	mov	r0, r6
    m_spiActive = false;
   12522:	74a5      	strb	r5, [r4, #18]
}
   12524:	b002      	add	sp, #8
   12526:	bd70      	pop	{r4, r5, r6, pc}

00012528 <SharedSpiCard::sectorCount()>:
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   12528:	6803      	ldr	r3, [r0, #0]
   1252a:	4a25      	ldr	r2, [pc, #148]	; (125c0 <SharedSpiCard::sectorCount()+0x98>)
   1252c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1252e:	4293      	cmp	r3, r2
uint32_t SharedSpiCard::sectorCount() {
   12530:	b500      	push	{lr}
   12532:	b085      	sub	sp, #20
   12534:	d10f      	bne.n	12556 <SharedSpiCard::sectorCount()+0x2e>
    return readRegister(CMD9, csd);
   12536:	466a      	mov	r2, sp
   12538:	2109      	movs	r1, #9
   1253a:	f7ff ffbb 	bl	124b4 <SharedSpiCard::readRegister(unsigned char, void*)>
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   1253e:	b138      	cbz	r0, 12550 <SharedSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
   12540:	f89d 3000 	ldrb.w	r3, [sp]
   12544:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   12548:	d008      	beq.n	1255c <SharedSpiCard::sectorCount()+0x34>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
   1254a:	2b40      	cmp	r3, #64	; 0x40
   1254c:	d027      	beq.n	1259e <SharedSpiCard::sectorCount()+0x76>
   1254e:	2000      	movs	r0, #0
}
   12550:	b005      	add	sp, #20
   12552:	f85d fb04 	ldr.w	pc, [sp], #4
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
   12556:	4669      	mov	r1, sp
   12558:	4798      	blx	r3
   1255a:	e7f0      	b.n	1253e <SharedSpiCard::sectorCount()+0x16>
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   1255c:	f89d 3009 	ldrb.w	r3, [sp, #9]
                          | csd->v1.c_size_mult_low;
   12560:	f89d 200a 	ldrb.w	r2, [sp, #10]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   12564:	f003 0303 	and.w	r3, r3, #3
    uint16_t c_size = (csd->v1.c_size_high << 10)
   12568:	f89d 1006 	ldrb.w	r1, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   1256c:	f89d 0007 	ldrb.w	r0, [sp, #7]
                          | csd->v1.c_size_mult_low;
   12570:	005b      	lsls	r3, r3, #1
    uint16_t c_size = (csd->v1.c_size_high << 10)
   12572:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12576:	0080      	lsls	r0, r0, #2
   12578:	f89d c008 	ldrb.w	ip, [sp, #8]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   1257c:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
    uint8_t read_bl_len = csd->v1.read_bl_len;
   12580:	f89d 2005 	ldrb.w	r2, [sp, #5]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12584:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   12588:	f002 020f 	and.w	r2, r2, #15
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   1258c:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   12590:	4413      	add	r3, r2
   12592:	3001      	adds	r0, #1
   12594:	3b07      	subs	r3, #7
   12596:	4098      	lsls	r0, r3
}
   12598:	b005      	add	sp, #20
   1259a:	f85d fb04 	ldr.w	pc, [sp], #4
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   1259e:	f89d 0009 	ldrb.w	r0, [sp, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
   125a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   125a6:	3001      	adds	r0, #1
   125a8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    return (((uint32_t)csd->v2.c_size_high << 16) +
   125ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   125b0:	eb00 4003 	add.w	r0, r0, r3, lsl #16
   125b4:	eb00 2002 	add.w	r0, r0, r2, lsl #8
   125b8:	0280      	lsls	r0, r0, #10
   125ba:	b005      	add	sp, #20
   125bc:	f85d fb04 	ldr.w	pc, [sp], #4
   125c0:	000128e5 	.word	0x000128e5

000125c4 <SharedSpiCard::readStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
   125c4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::readStart(uint32_t sector) {
   125c6:	460a      	mov	r2, r1
   125c8:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   125ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::readStart(uint32_t sector) {
   125cc:	b083      	sub	sp, #12
   125ce:	4d16      	ldr	r5, [pc, #88]	; (12628 <SharedSpiCard::readStart(unsigned long)+0x64>)
   125d0:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
   125d2:	42ab      	cmp	r3, r5
   125d4:	d124      	bne.n	12620 <SharedSpiCard::readStart(unsigned long)+0x5c>
    return m_type;
   125d6:	7d40      	ldrb	r0, [r0, #21]
   125d8:	2803      	cmp	r0, #3
  if (cardCommand(CMD18, sector)) {
   125da:	f04f 0112 	mov.w	r1, #18
   125de:	4620      	mov	r0, r4
    sector <<= 9;
   125e0:	bf18      	it	ne
   125e2:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD18, sector)) {
   125e4:	f7ff fdbc 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   125e8:	b920      	cbnz	r0, 125f4 <SharedSpiCard::readStart(unsigned long)+0x30>
  m_state = READ_STATE;
   125ea:	2301      	movs	r3, #1
  return true;
   125ec:	4618      	mov	r0, r3
  m_state = READ_STATE;
   125ee:	74e3      	strb	r3, [r4, #19]
}
   125f0:	b003      	add	sp, #12
   125f2:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
   125f4:	230c      	movs	r3, #12
  if (m_spiActive) {
   125f6:	7ca0      	ldrb	r0, [r4, #18]
   125f8:	7463      	strb	r3, [r4, #17]
   125fa:	2800      	cmp	r0, #0
   125fc:	d0f8      	beq.n	125f0 <SharedSpiCard::readStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
   125fe:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12600:	7c20      	ldrb	r0, [r4, #16]
   12602:	2101      	movs	r1, #1
   12604:	f001 fc9e 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12608:	21ff      	movs	r1, #255	; 0xff
   1260a:	4628      	mov	r0, r5
   1260c:	f001 fd04 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12610:	4628      	mov	r0, r5
   12612:	f001 fcb7 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12616:	2300      	movs	r3, #0
}
   12618:	4618      	mov	r0, r3
    m_spiActive = false;
   1261a:	74a3      	strb	r3, [r4, #18]
}
   1261c:	b003      	add	sp, #12
   1261e:	bd30      	pop	{r4, r5, pc}
   12620:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
   12622:	4798      	blx	r3
   12624:	9a01      	ldr	r2, [sp, #4]
   12626:	e7d7      	b.n	125d8 <SharedSpiCard::readStart(unsigned long)+0x14>
   12628:	00011e05 	.word	0x00011e05

0001262c <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    uint32_t sector, uint8_t* dst, size_t ns) {
   1262c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1262e:	4614      	mov	r4, r2
  if (sdState() != READ_STATE || sector != m_curSector) {
   12630:	7cc2      	ldrb	r2, [r0, #19]
    uint32_t sector, uint8_t* dst, size_t ns) {
   12632:	4606      	mov	r6, r0
   12634:	460d      	mov	r5, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
   12636:	2a01      	cmp	r2, #1
    uint32_t sector, uint8_t* dst, size_t ns) {
   12638:	461f      	mov	r7, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
   1263a:	d102      	bne.n	12642 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
   1263c:	6983      	ldr	r3, [r0, #24]
   1263e:	428b      	cmp	r3, r1
   12640:	d005      	beq.n	1264e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
    if (!readStart(sector)) {
   12642:	4629      	mov	r1, r5
   12644:	4630      	mov	r0, r6
   12646:	f7ff ffbd 	bl	125c4 <SharedSpiCard::readStart(unsigned long)>
   1264a:	b180      	cbz	r0, 1266e <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x42>
    m_curSector = sector;
   1264c:	61b5      	str	r5, [r6, #24]
  for (size_t i = 0; i < ns; i++, dst += 512) {
   1264e:	b187      	cbz	r7, 12672 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
   12650:	2500      	movs	r5, #0
   12652:	e001      	b.n	12658 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, dst += 512) {
   12654:	42af      	cmp	r7, r5
   12656:	d00c      	beq.n	12672 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
  return readData(dst, 512);
   12658:	4621      	mov	r1, r4
   1265a:	f44f 7200 	mov.w	r2, #512	; 0x200
   1265e:	4630      	mov	r0, r6
  for (size_t i = 0; i < ns; i++, dst += 512) {
   12660:	3501      	adds	r5, #1
   12662:	f504 7400 	add.w	r4, r4, #512	; 0x200
  return readData(dst, 512);
   12666:	f7ff fcd1 	bl	1200c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
   1266a:	2800      	cmp	r0, #0
   1266c:	d1f2      	bne.n	12654 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
  return false;
   1266e:	2000      	movs	r0, #0
}
   12670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_curSector += ns;
   12672:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   12674:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
   12676:	443b      	add	r3, r7
   12678:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   1267a:	2800      	cmp	r0, #0
   1267c:	d1f8      	bne.n	12670 <DedicatedSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
   1267e:	4630      	mov	r0, r6
}
   12680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return m_dedicatedSpi ? true : readStop();
   12684:	f7ff bd08 	b.w	12098 <SharedSpiCard::readStop()>

00012688 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)>:
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   12688:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1268c:	469b      	mov	fp, r3
  if (sdState() != READ_STATE || sector != m_curSector) {
   1268e:	7cc3      	ldrb	r3, [r0, #19]
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   12690:	4606      	mov	r6, r0
   12692:	460c      	mov	r4, r1
  if (sdState() != READ_STATE || sector != m_curSector) {
   12694:	2b01      	cmp	r3, #1
 void (*callback)(uint32_t sector, uint8_t *buf, void *context), void *context) {
   12696:	4615      	mov	r5, r2
   12698:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   1269c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
  if (sdState() != READ_STATE || sector != m_curSector) {
   126a0:	d102      	bne.n	126a8 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x20>
   126a2:	6983      	ldr	r3, [r0, #24]
   126a4:	428b      	cmp	r3, r1
   126a6:	d005      	beq.n	126b4 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x2c>
    if (!readStart(sector)) {
   126a8:	4621      	mov	r1, r4
   126aa:	4630      	mov	r0, r6
   126ac:	f7ff ff8a 	bl	125c4 <SharedSpiCard::readStart(unsigned long)>
   126b0:	b1b0      	cbz	r0, 126e0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x58>
    m_curSector = sector;
   126b2:	61b4      	str	r4, [r6, #24]
  for (size_t i = 0; i < ns; i++) {
   126b4:	f1bb 0f00 	cmp.w	fp, #0
   126b8:	d015      	beq.n	126e6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
   126ba:	eb04 0a0b 	add.w	sl, r4, fp
   126be:	e002      	b.n	126c6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x3e>
      callback(sector + i, dst, context);
   126c0:	47c8      	blx	r9
  for (size_t i = 0; i < ns; i++) {
   126c2:	45a2      	cmp	sl, r4
   126c4:	d00f      	beq.n	126e6 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5e>
  return readData(dst, 512);
   126c6:	f44f 7200 	mov.w	r2, #512	; 0x200
   126ca:	4629      	mov	r1, r5
   126cc:	4630      	mov	r0, r6
   126ce:	f7ff fc9d 	bl	1200c <SharedSpiCard::readData(unsigned char*, unsigned int)>
   126d2:	4607      	mov	r7, r0
      callback(sector + i, dst, context);
   126d4:	4642      	mov	r2, r8
   126d6:	4620      	mov	r0, r4
   126d8:	4629      	mov	r1, r5
  for (size_t i = 0; i < ns; i++) {
   126da:	3401      	adds	r4, #1
    if (readData(dst)) {
   126dc:	2f00      	cmp	r7, #0
   126de:	d1ef      	bne.n	126c0 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x38>
  return false;
   126e0:	2000      	movs	r0, #0
}
   126e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_curSector += ns;
   126e6:	69b3      	ldr	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   126e8:	7f30      	ldrb	r0, [r6, #28]
  m_curSector += ns;
   126ea:	445b      	add	r3, fp
   126ec:	61b3      	str	r3, [r6, #24]
  return m_dedicatedSpi ? true : readStop();
   126ee:	2800      	cmp	r0, #0
   126f0:	d1f7      	bne.n	126e2 <DedicatedSpiCard::readSectorsCallback(unsigned long, unsigned char*, unsigned int, void (*)(unsigned long, unsigned char*, void*), void*)+0x5a>
   126f2:	4630      	mov	r0, r6
}
   126f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return m_dedicatedSpi ? true : readStop();
   126f8:	f7ff bcce 	b.w	12098 <SharedSpiCard::readStop()>

000126fc <DedicatedSpiCard::readSector(unsigned long, unsigned char*)>:
  return readSectors(sector, dst, 1);
   126fc:	6803      	ldr	r3, [r0, #0]
bool DedicatedSpiCard::readSector(uint32_t sector, uint8_t* dst) {
   126fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
   12702:	695f      	ldr	r7, [r3, #20]
   12704:	4b16      	ldr	r3, [pc, #88]	; (12760 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x64>)
   12706:	429f      	cmp	r7, r3
   12708:	d11f      	bne.n	1274a <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x4e>
  if (sdState() != READ_STATE || sector != m_curSector) {
   1270a:	7cc3      	ldrb	r3, [r0, #19]
   1270c:	4604      	mov	r4, r0
   1270e:	460d      	mov	r5, r1
   12710:	4616      	mov	r6, r2
   12712:	2b01      	cmp	r3, #1
   12714:	d102      	bne.n	1271c <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x20>
   12716:	6983      	ldr	r3, [r0, #24]
   12718:	4299      	cmp	r1, r3
   1271a:	d005      	beq.n	12728 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x2c>
    if (!readStart(sector)) {
   1271c:	4629      	mov	r1, r5
   1271e:	4620      	mov	r0, r4
   12720:	f7ff ff50 	bl	125c4 <SharedSpiCard::readStart(unsigned long)>
   12724:	b170      	cbz	r0, 12744 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
    m_curSector = sector;
   12726:	61a5      	str	r5, [r4, #24]
  return readData(dst, 512);
   12728:	f44f 7200 	mov.w	r2, #512	; 0x200
   1272c:	4631      	mov	r1, r6
   1272e:	4620      	mov	r0, r4
   12730:	f7ff fc6c 	bl	1200c <SharedSpiCard::readData(unsigned char*, unsigned int)>
    if (!readData(dst)) {
   12734:	b130      	cbz	r0, 12744 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x48>
  m_curSector += ns;
   12736:	69a3      	ldr	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
   12738:	7f20      	ldrb	r0, [r4, #28]
  m_curSector += ns;
   1273a:	3301      	adds	r3, #1
   1273c:	61a3      	str	r3, [r4, #24]
  return m_dedicatedSpi ? true : readStop();
   1273e:	b148      	cbz	r0, 12754 <DedicatedSpiCard::readSector(unsigned long, unsigned char*)+0x58>
}
   12740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
   12744:	2000      	movs	r0, #0
}
   12746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return readSectors(sector, dst, 1);
   1274a:	46bc      	mov	ip, r7
   1274c:	2301      	movs	r3, #1
}
   1274e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return readSectors(sector, dst, 1);
   12752:	4760      	bx	ip
  return m_dedicatedSpi ? true : readStop();
   12754:	4620      	mov	r0, r4
}
   12756:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return m_dedicatedSpi ? true : readStop();
   1275a:	f7ff bc9d 	b.w	12098 <SharedSpiCard::readStop()>
   1275e:	bf00      	nop
   12760:	0001262d 	.word	0x0001262d

00012764 <SharedSpiCard::writeStart(unsigned long)>:
  if (type() != SD_CARD_TYPE_SDHC) {
   12764:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeStart(uint32_t sector) {
   12766:	460a      	mov	r2, r1
   12768:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   1276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeStart(uint32_t sector) {
   1276c:	b083      	sub	sp, #12
   1276e:	4d16      	ldr	r5, [pc, #88]	; (127c8 <SharedSpiCard::writeStart(unsigned long)+0x64>)
   12770:	4604      	mov	r4, r0
  if (type() != SD_CARD_TYPE_SDHC) {
   12772:	42ab      	cmp	r3, r5
   12774:	d124      	bne.n	127c0 <SharedSpiCard::writeStart(unsigned long)+0x5c>
    return m_type;
   12776:	7d40      	ldrb	r0, [r0, #21]
   12778:	2803      	cmp	r0, #3
  if (cardCommand(CMD25, sector)) {
   1277a:	f04f 0119 	mov.w	r1, #25
   1277e:	4620      	mov	r0, r4
    sector <<= 9;
   12780:	bf18      	it	ne
   12782:	0252      	lslne	r2, r2, #9
  if (cardCommand(CMD25, sector)) {
   12784:	f7ff fcec 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12788:	b920      	cbnz	r0, 12794 <SharedSpiCard::writeStart(unsigned long)+0x30>
  m_state = WRITE_STATE;
   1278a:	2302      	movs	r3, #2
  return true;
   1278c:	2001      	movs	r0, #1
  m_state = WRITE_STATE;
   1278e:	74e3      	strb	r3, [r4, #19]
}
   12790:	b003      	add	sp, #12
   12792:	bd30      	pop	{r4, r5, pc}
    m_errorCode = code;
   12794:	230e      	movs	r3, #14
  if (m_spiActive) {
   12796:	7ca0      	ldrb	r0, [r4, #18]
   12798:	7463      	strb	r3, [r4, #17]
   1279a:	2800      	cmp	r0, #0
   1279c:	d0f8      	beq.n	12790 <SharedSpiCard::writeStart(unsigned long)+0x2c>
    m_spiDriver.send(data);
   1279e:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   127a0:	7c20      	ldrb	r0, [r4, #16]
   127a2:	2101      	movs	r1, #1
   127a4:	f001 fbce 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   127a8:	21ff      	movs	r1, #255	; 0xff
   127aa:	4628      	mov	r0, r5
   127ac:	f001 fc34 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   127b0:	4628      	mov	r0, r5
   127b2:	f001 fbe7 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   127b6:	2300      	movs	r3, #0
}
   127b8:	4618      	mov	r0, r3
    m_spiActive = false;
   127ba:	74a3      	strb	r3, [r4, #18]
}
   127bc:	b003      	add	sp, #12
   127be:	bd30      	pop	{r4, r5, pc}
   127c0:	9101      	str	r1, [sp, #4]
  if (type() != SD_CARD_TYPE_SDHC) {
   127c2:	4798      	blx	r3
   127c4:	9a01      	ldr	r2, [sp, #4]
   127c6:	e7d7      	b.n	12778 <SharedSpiCard::writeStart(unsigned long)+0x14>
   127c8:	00011e05 	.word	0x00011e05

000127cc <SharedSpiCard::erase(unsigned long, unsigned long)>:
  if (!readCSD(&csd)) {
   127cc:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
   127ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (!readCSD(&csd)) {
   127d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
bool SharedSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
   127d4:	4617      	mov	r7, r2
   127d6:	4a41      	ldr	r2, [pc, #260]	; (128dc <SharedSpiCard::erase(unsigned long, unsigned long)+0x110>)
   127d8:	b085      	sub	sp, #20
   127da:	4604      	mov	r4, r0
   127dc:	460e      	mov	r6, r1
   127de:	4293      	cmp	r3, r2
   127e0:	d145      	bne.n	1286e <SharedSpiCard::erase(unsigned long, unsigned long)+0xa2>
    return readRegister(CMD9, csd);
   127e2:	466a      	mov	r2, sp
   127e4:	2109      	movs	r1, #9
   127e6:	f7ff fe65 	bl	124b4 <SharedSpiCard::readRegister(unsigned char, void*)>
   127ea:	4605      	mov	r5, r0
  if (!readCSD(&csd)) {
   127ec:	b1b5      	cbz	r5, 1281c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
  if (!csd.v1.erase_blk_en) {
   127ee:	f89d 300a 	ldrb.w	r3, [sp, #10]
   127f2:	065a      	lsls	r2, r3, #25
   127f4:	d518      	bpl.n	12828 <SharedSpiCard::erase(unsigned long, unsigned long)+0x5c>
  if (m_type != SD_CARD_TYPE_SDHC) {
   127f6:	7d63      	ldrb	r3, [r4, #21]
   127f8:	2b03      	cmp	r3, #3
   127fa:	d001      	beq.n	12800 <SharedSpiCard::erase(unsigned long, unsigned long)+0x34>
    firstSector <<= 9;
   127fc:	0276      	lsls	r6, r6, #9
    lastSector <<= 9;
   127fe:	027f      	lsls	r7, r7, #9
  if (cardCommand(CMD32, firstSector)
   12800:	4632      	mov	r2, r6
   12802:	2120      	movs	r1, #32
   12804:	4620      	mov	r0, r4
   12806:	f7ff fcab 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD38, 0)) {
   1280a:	b928      	cbnz	r0, 12818 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
      || cardCommand(CMD33, lastSector)
   1280c:	463a      	mov	r2, r7
   1280e:	2121      	movs	r1, #33	; 0x21
   12810:	4620      	mov	r0, r4
   12812:	f7ff fca5 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12816:	b370      	cbz	r0, 12876 <SharedSpiCard::erase(unsigned long, unsigned long)+0xaa>
    m_errorCode = code;
   12818:	2326      	movs	r3, #38	; 0x26
   1281a:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   1281c:	7ca5      	ldrb	r5, [r4, #18]
   1281e:	b99d      	cbnz	r5, 12848 <SharedSpiCard::erase(unsigned long, unsigned long)+0x7c>
}
   12820:	4628      	mov	r0, r5
   12822:	b005      	add	sp, #20
   12824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
   12828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1282c:	f89d 200b 	ldrb.w	r2, [sp, #11]
   12830:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
   12832:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
   12836:	1c7a      	adds	r2, r7, #1
   12838:	4332      	orrs	r2, r6
   1283a:	4213      	tst	r3, r2
   1283c:	d0db      	beq.n	127f6 <SharedSpiCard::erase(unsigned long, unsigned long)+0x2a>
   1283e:	2327      	movs	r3, #39	; 0x27
  if (m_spiActive) {
   12840:	7ca5      	ldrb	r5, [r4, #18]
   12842:	7463      	strb	r3, [r4, #17]
   12844:	2d00      	cmp	r5, #0
   12846:	d0eb      	beq.n	12820 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_spiDriver.send(data);
   12848:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   1284a:	7c20      	ldrb	r0, [r4, #16]
   1284c:	2101      	movs	r1, #1
   1284e:	f001 fb79 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12852:	21ff      	movs	r1, #255	; 0xff
   12854:	4628      	mov	r0, r5
   12856:	f001 fbdf 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1285a:	4628      	mov	r0, r5
   1285c:	f001 fb92 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12860:	2300      	movs	r3, #0
  return false;
   12862:	461d      	mov	r5, r3
    m_spiActive = false;
   12864:	74a3      	strb	r3, [r4, #18]
}
   12866:	4628      	mov	r0, r5
   12868:	b005      	add	sp, #20
   1286a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (!readCSD(&csd)) {
   1286e:	4669      	mov	r1, sp
   12870:	4798      	blx	r3
   12872:	4605      	mov	r5, r0
   12874:	e7ba      	b.n	127ec <SharedSpiCard::erase(unsigned long, unsigned long)+0x20>
      || cardCommand(CMD38, 0)) {
   12876:	4602      	mov	r2, r0
   12878:	2126      	movs	r1, #38	; 0x26
   1287a:	4620      	mov	r0, r4
   1287c:	f7ff fc70 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12880:	2800      	cmp	r0, #0
   12882:	d1c9      	bne.n	12818 <SharedSpiCard::erase(unsigned long, unsigned long)+0x4c>
   12884:	f8df 8058 	ldr.w	r8, [pc, #88]	; 128e0 <SharedSpiCard::erase(unsigned long, unsigned long)+0x114>
    m_endTime = ms + millis16();
   12888:	f242 7710 	movw	r7, #10000	; 0x2710
    return m_spiDriver.receive();
   1288c:	f104 0904 	add.w	r9, r4, #4
   12890:	f8d8 3000 	ldr.w	r3, [r8]
   12894:	441f      	add	r7, r3
   12896:	b2bf      	uxth	r7, r7
  explicit Timeout(uint16_t ms) {set(ms);}
   12898:	e004      	b.n	128a4 <SharedSpiCard::erase(unsigned long, unsigned long)+0xd8>
   1289a:	f8d8 3000 	ldr.w	r3, [r8]
    return (int16_t)(m_endTime - millis16()) < 0;
   1289e:	1afb      	subs	r3, r7, r3
    if (timeout.timedOut()) {
   128a0:	041b      	lsls	r3, r3, #16
   128a2:	d417      	bmi.n	128d4 <SharedSpiCard::erase(unsigned long, unsigned long)+0x108>
   128a4:	4648      	mov	r0, r9
   128a6:	f001 fb99 	bl	13fdc <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   128aa:	28ff      	cmp	r0, #255	; 0xff
   128ac:	4606      	mov	r6, r0
   128ae:	d1f4      	bne.n	1289a <SharedSpiCard::erase(unsigned long, unsigned long)+0xce>
  if (m_spiActive) {
   128b0:	7ca3      	ldrb	r3, [r4, #18]
   128b2:	2b00      	cmp	r3, #0
   128b4:	d0b4      	beq.n	12820 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    sdCsWrite(m_csPin, true);
   128b6:	2101      	movs	r1, #1
   128b8:	7c20      	ldrb	r0, [r4, #16]
  return true;
   128ba:	461d      	mov	r5, r3
   128bc:	f001 fb42 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   128c0:	4631      	mov	r1, r6
   128c2:	4648      	mov	r0, r9
   128c4:	f001 fba8 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   128c8:	4648      	mov	r0, r9
   128ca:	f001 fb5b 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   128ce:	2300      	movs	r3, #0
   128d0:	74a3      	strb	r3, [r4, #18]
}
   128d2:	e7a5      	b.n	12820 <SharedSpiCard::erase(unsigned long, unsigned long)+0x54>
    m_errorCode = code;
   128d4:	2328      	movs	r3, #40	; 0x28
   128d6:	7463      	strb	r3, [r4, #17]
    goto fail;
   128d8:	e7a0      	b.n	1281c <SharedSpiCard::erase(unsigned long, unsigned long)+0x50>
   128da:	bf00      	nop
   128dc:	000128e5 	.word	0x000128e5
   128e0:	2000bc24 	.word	0x2000bc24

000128e4 <SharedSpiCard::readCSD(csd_t*)>:
  bool readCSD(csd_t* csd) {
   128e4:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
   128e6:	2200      	movs	r2, #0
   128e8:	b082      	sub	sp, #8
   128ea:	460e      	mov	r6, r1
   128ec:	2109      	movs	r1, #9
   128ee:	4604      	mov	r4, r0
   128f0:	f7ff fc36 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   128f4:	b1b0      	cbz	r0, 12924 <SharedSpiCard::readCSD(csd_t*)+0x40>
    m_errorCode = code;
   128f6:	231b      	movs	r3, #27
   128f8:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   128fa:	7ca0      	ldrb	r0, [r4, #18]
   128fc:	b908      	cbnz	r0, 12902 <SharedSpiCard::readCSD(csd_t*)+0x1e>
  }
   128fe:	b002      	add	sp, #8
   12900:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   12902:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12904:	7c20      	ldrb	r0, [r4, #16]
   12906:	2101      	movs	r1, #1
   12908:	f001 fb1c 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   1290c:	21ff      	movs	r1, #255	; 0xff
   1290e:	4628      	mov	r0, r5
   12910:	f001 fb82 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12914:	4628      	mov	r0, r5
   12916:	f001 fb35 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   1291a:	2300      	movs	r3, #0
  return false;
   1291c:	4618      	mov	r0, r3
    m_spiActive = false;
   1291e:	74a3      	strb	r3, [r4, #18]
  }
   12920:	b002      	add	sp, #8
   12922:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
   12924:	4605      	mov	r5, r0
   12926:	2210      	movs	r2, #16
   12928:	4631      	mov	r1, r6
   1292a:	4620      	mov	r0, r4
   1292c:	f7ff fb6e 	bl	1200c <SharedSpiCard::readData(unsigned char*, unsigned int)>
   12930:	2800      	cmp	r0, #0
   12932:	d0e2      	beq.n	128fa <SharedSpiCard::readCSD(csd_t*)+0x16>
  if (m_spiActive) {
   12934:	7ca6      	ldrb	r6, [r4, #18]
   12936:	2e00      	cmp	r6, #0
   12938:	d0e1      	beq.n	128fe <SharedSpiCard::readCSD(csd_t*)+0x1a>
    sdCsWrite(m_csPin, true);
   1293a:	7c20      	ldrb	r0, [r4, #16]
   1293c:	2101      	movs	r1, #1
   1293e:	f001 fb01 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12942:	1d20      	adds	r0, r4, #4
   12944:	21ff      	movs	r1, #255	; 0xff
   12946:	9001      	str	r0, [sp, #4]
   12948:	f001 fb66 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1294c:	9801      	ldr	r0, [sp, #4]
   1294e:	f001 fb19 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
}
   12952:	4630      	mov	r0, r6
    m_spiActive = false;
   12954:	74a5      	strb	r5, [r4, #18]
  }
   12956:	b002      	add	sp, #8
   12958:	bd70      	pop	{r4, r5, r6, pc}
   1295a:	bf00      	nop

0001295c <SharedSpiCard::readCID(CID*)>:
  bool readCID(cid_t* cid) {
   1295c:	b570      	push	{r4, r5, r6, lr}
  if (cardCommand(cmd, 0)) {
   1295e:	2200      	movs	r2, #0
   12960:	b082      	sub	sp, #8
   12962:	460e      	mov	r6, r1
   12964:	210a      	movs	r1, #10
   12966:	4604      	mov	r4, r0
   12968:	f7ff fbfa 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   1296c:	b1b0      	cbz	r0, 1299c <SharedSpiCard::readCID(CID*)+0x40>
    m_errorCode = code;
   1296e:	231b      	movs	r3, #27
   12970:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   12972:	7ca0      	ldrb	r0, [r4, #18]
   12974:	b908      	cbnz	r0, 1297a <SharedSpiCard::readCID(CID*)+0x1e>
  }
   12976:	b002      	add	sp, #8
   12978:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   1297a:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   1297c:	7c20      	ldrb	r0, [r4, #16]
   1297e:	2101      	movs	r1, #1
   12980:	f001 fae0 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12984:	21ff      	movs	r1, #255	; 0xff
   12986:	4628      	mov	r0, r5
   12988:	f001 fb46 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   1298c:	4628      	mov	r0, r5
   1298e:	f001 faf9 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12992:	2300      	movs	r3, #0
  return false;
   12994:	4618      	mov	r0, r3
    m_spiActive = false;
   12996:	74a3      	strb	r3, [r4, #18]
  }
   12998:	b002      	add	sp, #8
   1299a:	bd70      	pop	{r4, r5, r6, pc}
  if (!readData(dst, 16)) {
   1299c:	4605      	mov	r5, r0
   1299e:	2210      	movs	r2, #16
   129a0:	4631      	mov	r1, r6
   129a2:	4620      	mov	r0, r4
   129a4:	f7ff fb32 	bl	1200c <SharedSpiCard::readData(unsigned char*, unsigned int)>
   129a8:	2800      	cmp	r0, #0
   129aa:	d0e2      	beq.n	12972 <SharedSpiCard::readCID(CID*)+0x16>
  if (m_spiActive) {
   129ac:	7ca6      	ldrb	r6, [r4, #18]
   129ae:	2e00      	cmp	r6, #0
   129b0:	d0e1      	beq.n	12976 <SharedSpiCard::readCID(CID*)+0x1a>
    sdCsWrite(m_csPin, true);
   129b2:	7c20      	ldrb	r0, [r4, #16]
   129b4:	2101      	movs	r1, #1
   129b6:	f001 fac5 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   129ba:	1d20      	adds	r0, r4, #4
   129bc:	21ff      	movs	r1, #255	; 0xff
   129be:	9001      	str	r0, [sp, #4]
   129c0:	f001 fb2a 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   129c4:	9801      	ldr	r0, [sp, #4]
   129c6:	f001 fadd 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
}
   129ca:	4630      	mov	r0, r6
    m_spiActive = false;
   129cc:	74a5      	strb	r5, [r4, #18]
  }
   129ce:	b002      	add	sp, #8
   129d0:	bd70      	pop	{r4, r5, r6, pc}
   129d2:	bf00      	nop

000129d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>:
bool SharedSpiCard::writeData(uint8_t token, const uint8_t* src) {
   129d4:	b570      	push	{r4, r5, r6, lr}
    m_spiDriver.send(data);
   129d6:	1d05      	adds	r5, r0, #4
   129d8:	4616      	mov	r6, r2
   129da:	4604      	mov	r4, r0
   129dc:	4628      	mov	r0, r5
   129de:	f001 fb1b 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.send(buf, n);
   129e2:	f44f 7200 	mov.w	r2, #512	; 0x200
   129e6:	4631      	mov	r1, r6
   129e8:	4628      	mov	r0, r5
   129ea:	f001 fb1f 	bl	1402c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
    m_spiDriver.send(data);
   129ee:	21ff      	movs	r1, #255	; 0xff
   129f0:	4628      	mov	r0, r5
   129f2:	f001 fb11 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
   129f6:	21ff      	movs	r1, #255	; 0xff
   129f8:	4628      	mov	r0, r5
   129fa:	f001 fb0d 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    return m_spiDriver.receive();
   129fe:	4628      	mov	r0, r5
   12a00:	f001 faec 	bl	13fdc <SdSpiArduinoDriver::receive()>
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   12a04:	f000 031f 	and.w	r3, r0, #31
  m_status = spiReceive();
   12a08:	7520      	strb	r0, [r4, #20]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   12a0a:	2b05      	cmp	r3, #5
   12a0c:	d004      	beq.n	12a18 <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
    m_errorCode = code;
   12a0e:	2320      	movs	r3, #32
  if (m_spiActive) {
   12a10:	7ca0      	ldrb	r0, [r4, #18]
   12a12:	7463      	strb	r3, [r4, #17]
   12a14:	b910      	cbnz	r0, 12a1c <SharedSpiCard::writeData(unsigned char, unsigned char const*)+0x48>
}
   12a16:	bd70      	pop	{r4, r5, r6, pc}
  return true;
   12a18:	2001      	movs	r0, #1
}
   12a1a:	bd70      	pop	{r4, r5, r6, pc}
    sdCsWrite(m_csPin, true);
   12a1c:	7c20      	ldrb	r0, [r4, #16]
   12a1e:	2101      	movs	r1, #1
   12a20:	f001 fa90 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12a24:	21ff      	movs	r1, #255	; 0xff
   12a26:	4628      	mov	r0, r5
   12a28:	f001 faf6 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12a2c:	4628      	mov	r0, r5
   12a2e:	f001 faa9 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12a32:	2300      	movs	r3, #0
}
   12a34:	4618      	mov	r0, r3
    m_spiActive = false;
   12a36:	74a3      	strb	r3, [r4, #18]
}
   12a38:	bd70      	pop	{r4, r5, r6, pc}
   12a3a:	bf00      	nop

00012a3c <SharedSpiCard::writeData(unsigned char const*)>:
bool SharedSpiCard::writeData(const uint8_t* src) {
   12a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12a40:	4d17      	ldr	r5, [pc, #92]	; (12aa0 <SharedSpiCard::writeData(unsigned char const*)+0x64>)
   12a42:	4606      	mov	r6, r0
   12a44:	460f      	mov	r7, r1
    return m_spiDriver.receive();
   12a46:	f100 0804 	add.w	r8, r0, #4
   12a4a:	682c      	ldr	r4, [r5, #0]
    m_endTime = ms + millis16();
   12a4c:	f504 7416 	add.w	r4, r4, #600	; 0x258
   12a50:	b2a4      	uxth	r4, r4
  explicit Timeout(uint16_t ms) {set(ms);}
   12a52:	e003      	b.n	12a5c <SharedSpiCard::writeData(unsigned char const*)+0x20>
   12a54:	682b      	ldr	r3, [r5, #0]
    return (int16_t)(m_endTime - millis16()) < 0;
   12a56:	1ae3      	subs	r3, r4, r3
    if (timeout.timedOut()) {
   12a58:	041b      	lsls	r3, r3, #16
   12a5a:	d40c      	bmi.n	12a76 <SharedSpiCard::writeData(unsigned char const*)+0x3a>
   12a5c:	4640      	mov	r0, r8
   12a5e:	f001 fabd 	bl	13fdc <SdSpiArduinoDriver::receive()>
  while (spiReceive() != 0XFF) {
   12a62:	28ff      	cmp	r0, #255	; 0xff
   12a64:	d1f6      	bne.n	12a54 <SharedSpiCard::writeData(unsigned char const*)+0x18>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   12a66:	463a      	mov	r2, r7
   12a68:	21fc      	movs	r1, #252	; 0xfc
   12a6a:	4630      	mov	r0, r6
   12a6c:	f7ff ffb2 	bl	129d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
   12a70:	b118      	cbz	r0, 12a7a <SharedSpiCard::writeData(unsigned char const*)+0x3e>
}
   12a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_errorCode = code;
   12a76:	2324      	movs	r3, #36	; 0x24
   12a78:	7473      	strb	r3, [r6, #17]
  if (m_spiActive) {
   12a7a:	7cb0      	ldrb	r0, [r6, #18]
   12a7c:	2800      	cmp	r0, #0
   12a7e:	d0f8      	beq.n	12a72 <SharedSpiCard::writeData(unsigned char const*)+0x36>
    sdCsWrite(m_csPin, true);
   12a80:	7c30      	ldrb	r0, [r6, #16]
   12a82:	2101      	movs	r1, #1
   12a84:	f001 fa5e 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12a88:	21ff      	movs	r1, #255	; 0xff
   12a8a:	4640      	mov	r0, r8
   12a8c:	f001 fac4 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12a90:	4640      	mov	r0, r8
   12a92:	f001 fa77 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12a96:	2300      	movs	r3, #0
}
   12a98:	4618      	mov	r0, r3
    m_spiActive = false;
   12a9a:	74b3      	strb	r3, [r6, #18]
}
   12a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12aa0:	2000bc24 	.word	0x2000bc24

00012aa4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>:
  if (type() != SD_CARD_TYPE_SDHC) {
   12aa4:	6803      	ldr	r3, [r0, #0]
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   12aa6:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   12aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
bool SharedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   12aaa:	4616      	mov	r6, r2
   12aac:	4a22      	ldr	r2, [pc, #136]	; (12b38 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x94>)
   12aae:	b082      	sub	sp, #8
   12ab0:	4604      	mov	r4, r0
   12ab2:	460d      	mov	r5, r1
   12ab4:	4293      	cmp	r3, r2
   12ab6:	d13c      	bne.n	12b32 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x8e>
    return m_type;
   12ab8:	7d40      	ldrb	r0, [r0, #21]
  if (type() != SD_CARD_TYPE_SDHC) {
   12aba:	2803      	cmp	r0, #3
  if (cardCommand(CMD24, sector)) {
   12abc:	f04f 0118 	mov.w	r1, #24
   12ac0:	4620      	mov	r0, r4
    sector <<= 9;
   12ac2:	bf18      	it	ne
   12ac4:	026d      	lslne	r5, r5, #9
  if (cardCommand(CMD24, sector)) {
   12ac6:	462a      	mov	r2, r5
   12ac8:	f7ff fb4a 	bl	12160 <SharedSpiCard::cardCommand(unsigned char, unsigned long)>
   12acc:	4605      	mov	r5, r0
   12ace:	b1b0      	cbz	r0, 12afe <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x5a>
    m_errorCode = code;
   12ad0:	230d      	movs	r3, #13
   12ad2:	7463      	strb	r3, [r4, #17]
  if (m_spiActive) {
   12ad4:	7ca0      	ldrb	r0, [r4, #18]
   12ad6:	b908      	cbnz	r0, 12adc <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x38>
}
   12ad8:	b002      	add	sp, #8
   12ada:	bd70      	pop	{r4, r5, r6, pc}
    m_spiDriver.send(data);
   12adc:	1d25      	adds	r5, r4, #4
    sdCsWrite(m_csPin, true);
   12ade:	7c20      	ldrb	r0, [r4, #16]
   12ae0:	2101      	movs	r1, #1
   12ae2:	f001 fa2f 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12ae6:	21ff      	movs	r1, #255	; 0xff
   12ae8:	4628      	mov	r0, r5
   12aea:	f001 fa95 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12aee:	4628      	mov	r0, r5
   12af0:	f001 fa48 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
    m_spiActive = false;
   12af4:	2300      	movs	r3, #0
  return false;
   12af6:	4618      	mov	r0, r3
    m_spiActive = false;
   12af8:	74a3      	strb	r3, [r4, #18]
}
   12afa:	b002      	add	sp, #8
   12afc:	bd70      	pop	{r4, r5, r6, pc}
  if (!writeData(DATA_START_SECTOR, src)) {
   12afe:	4632      	mov	r2, r6
   12b00:	21fe      	movs	r1, #254	; 0xfe
   12b02:	4620      	mov	r0, r4
   12b04:	f7ff ff66 	bl	129d4 <SharedSpiCard::writeData(unsigned char, unsigned char const*)>
   12b08:	2800      	cmp	r0, #0
   12b0a:	d0e3      	beq.n	12ad4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x30>
  if (m_spiActive) {
   12b0c:	7ca6      	ldrb	r6, [r4, #18]
   12b0e:	2e00      	cmp	r6, #0
   12b10:	d0e2      	beq.n	12ad8 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x34>
    sdCsWrite(m_csPin, true);
   12b12:	7c20      	ldrb	r0, [r4, #16]
   12b14:	2101      	movs	r1, #1
   12b16:	f001 fa15 	bl	13f44 <sdCsWrite(unsigned char, bool)>
    m_spiDriver.send(data);
   12b1a:	1d20      	adds	r0, r4, #4
   12b1c:	21ff      	movs	r1, #255	; 0xff
   12b1e:	9001      	str	r0, [sp, #4]
   12b20:	f001 fa7a 	bl	14018 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiDriver.deactivate();
   12b24:	9801      	ldr	r0, [sp, #4]
   12b26:	f001 fa2d 	bl	13f84 <SdSpiArduinoDriver::deactivate()>
  return true;
   12b2a:	4630      	mov	r0, r6
    m_spiActive = false;
   12b2c:	74a5      	strb	r5, [r4, #18]
}
   12b2e:	b002      	add	sp, #8
   12b30:	bd70      	pop	{r4, r5, r6, pc}
  if (type() != SD_CARD_TYPE_SDHC) {
   12b32:	4798      	blx	r3
   12b34:	e7c1      	b.n	12aba <SharedSpiCard::writeSector(unsigned long, unsigned char const*)+0x16>
   12b36:	bf00      	nop
   12b38:	00011e05 	.word	0x00011e05

00012b3c <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)>:
bool DedicatedSpiCard::writeSector(uint32_t sector, const uint8_t* src) {
   12b3c:	b410      	push	{r4}
  if (m_dedicatedSpi) {
   12b3e:	7f04      	ldrb	r4, [r0, #28]
   12b40:	b134      	cbz	r4, 12b50 <DedicatedSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
    return writeSectors(sector, src, 1);
   12b42:	6804      	ldr	r4, [r0, #0]
   12b44:	2301      	movs	r3, #1
   12b46:	6aa4      	ldr	r4, [r4, #40]	; 0x28
   12b48:	46a4      	mov	ip, r4
}
   12b4a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return writeSectors(sector, src, 1);
   12b4e:	4760      	bx	ip
}
   12b50:	f85d 4b04 	ldr.w	r4, [sp], #4
  return SharedSpiCard::writeSector(sector, src);
   12b54:	f7ff bfa6 	b.w	12aa4 <SharedSpiCard::writeSector(unsigned long, unsigned char const*)>

00012b58 <DedicatedSpiCard::begin(SdSpiConfig)>:
bool DedicatedSpiCard::begin(SdSpiConfig spiConfig) {
   12b58:	b510      	push	{r4, lr}
   12b5a:	b084      	sub	sp, #16
   12b5c:	4604      	mov	r4, r0
   12b5e:	f10d 0c04 	add.w	ip, sp, #4
   12b62:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (!SharedSpiCard::begin(spiConfig)) {
   12b66:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
   12b6a:	f7ff fb6d 	bl	12248 <SharedSpiCard::begin(SdSpiConfig)>
   12b6e:	b120      	cbz	r0, 12b7a <DedicatedSpiCard::begin(SdSpiConfig)+0x22>
const uint8_t DEDICATED_SPI = 1;
/**
 * \param[in] opt option field of SdSpiConfig.
 * \return true for dedicated SPI.
 */
inline bool spiOptionDedicated(uint8_t opt) {return opt & DEDICATED_SPI;}
   12b70:	f89d 3005 	ldrb.w	r3, [sp, #5]
   12b74:	f003 0301 	and.w	r3, r3, #1
   12b78:	7723      	strb	r3, [r4, #28]
}
   12b7a:	b004      	add	sp, #16
   12b7c:	bd10      	pop	{r4, pc}
   12b7e:	bf00      	nop

00012b80 <SdCardInterface::hasDedicatedSpi()>:
  virtual bool hasDedicatedSpi() {return false;}
   12b80:	2000      	movs	r0, #0
   12b82:	4770      	bx	lr

00012b84 <SdCardInterface::isDedicatedSpi()>:
  bool virtual isDedicatedSpi() {return false;}
   12b84:	2000      	movs	r0, #0
   12b86:	4770      	bx	lr

00012b88 <SdCardInterface::setDedicatedSpi(bool)>:
  }
   12b88:	2000      	movs	r0, #0
   12b8a:	4770      	bx	lr

00012b8c <SdioCard::end()>:
   */
  bool begin(SdioConfig sdioConfig);
  /** Disable an SDIO card.
   * not implemented.
   */
  void end() {}
   12b8c:	4770      	bx	lr
   12b8e:	bf00      	nop

00012b90 <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
   12b90:	4b08      	ldr	r3, [pc, #32]	; (12bb4 <sdIrs()+0x24>)
   12b92:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
   12b94:	4a08      	ldr	r2, [pc, #32]	; (12bb8 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
   12b96:	4809      	ldr	r0, [pc, #36]	; (12bbc <sdIrs()+0x2c>)
static void sdIrs() {
   12b98:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
   12b9a:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
   12b9c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   12b9e:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
   12ba0:	6812      	ldr	r2, [r2, #0]
}
   12ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SDHC_IRQSTAT = m_irqstat;
   12ba6:	631a      	str	r2, [r3, #48]	; 0x30
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
   12ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   12baa:	f022 0281 	bic.w	r2, r2, #129	; 0x81
   12bae:	649a      	str	r2, [r3, #72]	; 0x48
  m_dmaBusy = false;
   12bb0:	7001      	strb	r1, [r0, #0]
}
   12bb2:	4770      	bx	lr
   12bb4:	402c0000 	.word	0x402c0000
   12bb8:	20005028 	.word	0x20005028
   12bbc:	2000c946 	.word	0x2000c946

00012bc0 <isBusyDat()>:
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
}
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   12bc0:	4b03      	ldr	r3, [pc, #12]	; (12bd0 <isBusyDat()+0x10>)
   12bc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
   12bc4:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
   12bc8:	f3c0 6000 	ubfx	r0, r0, #24, #1
   12bcc:	4770      	bx	lr
   12bce:	bf00      	nop
   12bd0:	402c0000 	.word	0x402c0000

00012bd4 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
   12bd4:	4b01      	ldr	r3, [pc, #4]	; (12bdc <isBusyDMA()+0x8>)
   12bd6:	7818      	ldrb	r0, [r3, #0]
}
   12bd8:	4770      	bx	lr
   12bda:	bf00      	nop
   12bdc:	2000c946 	.word	0x2000c946

00012be0 <setSdclk(unsigned long)>:
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12be0:	4a2b      	ldr	r2, [pc, #172]	; (12c90 <setSdclk(unsigned long)+0xb0>)
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12be2:	4b2c      	ldr	r3, [pc, #176]	; (12c94 <setSdclk(unsigned long)+0xb4>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12be6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   12bea:	492b      	ldr	r1, [pc, #172]	; (12c98 <setSdclk(unsigned long)+0xb8>)
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12bec:	f3c2 22c2 	ubfx	r2, r2, #11, #3
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
   12bf4:	3201      	adds	r2, #1
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
   12bf6:	b570      	push	{r4, r5, r6, lr}
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12bf8:	4c28      	ldr	r4, [pc, #160]	; (12c9c <setSdclk(unsigned long)+0xbc>)
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
   12bfa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12bfe:	fba4 4303 	umull	r4, r3, r4, r3
  uint32_t maxSdclk = 1000*kHzMax;
   12c02:	fb05 f000 	mul.w	r0, r5, r0
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
   12c06:	089b      	lsrs	r3, r3, #2
   12c08:	fbb1 fef3 	udiv	lr, r1, r3
   12c0c:	fbbe fef2 	udiv	lr, lr, r2
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   12c10:	ebb0 1f1e 	cmp.w	r0, lr, lsr #4
   12c14:	d235      	bcs.n	12c82 <setSdclk(unsigned long)+0xa2>
  uint32_t sdclkfs = 1;
   12c16:	2301      	movs	r3, #1
    sdclkfs <<= 1;
   12c18:	461e      	mov	r6, r3
   12c1a:	005b      	lsls	r3, r3, #1
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   12c1c:	011a      	lsls	r2, r3, #4
   12c1e:	fbbe f2f2 	udiv	r2, lr, r2
   12c22:	4282      	cmp	r2, r0
   12c24:	d901      	bls.n	12c2a <setSdclk(unsigned long)+0x4a>
   12c26:	2bff      	cmp	r3, #255	; 0xff
   12c28:	d9f6      	bls.n	12c18 <setSdclk(unsigned long)+0x38>
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   12c2a:	fbbe f2f3 	udiv	r2, lr, r3
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
   12c2e:	0236      	lsls	r6, r6, #8
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   12c30:	4290      	cmp	r0, r2
   12c32:	d22a      	bcs.n	12c8a <setSdclk(unsigned long)+0xaa>
   12c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   12c38:	2201      	movs	r2, #1
   12c3a:	e000      	b.n	12c3e <setSdclk(unsigned long)+0x5e>
   12c3c:	46a4      	mov	ip, r4
    dvs++;
   12c3e:	4615      	mov	r5, r2
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   12c40:	eb03 040c 	add.w	r4, r3, ip
    dvs++;
   12c44:	3201      	adds	r2, #1
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   12c46:	fbbe f1fc 	udiv	r1, lr, ip
   12c4a:	4281      	cmp	r1, r0
   12c4c:	d917      	bls.n	12c7e <setSdclk(unsigned long)+0x9e>
   12c4e:	2a10      	cmp	r2, #16
   12c50:	d1f4      	bne.n	12c3c <setSdclk(unsigned long)+0x5c>
   12c52:	25f0      	movs	r5, #240	; 0xf0
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
   12c54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   12c58:	4911      	ldr	r1, [pc, #68]	; (12ca0 <setSdclk(unsigned long)+0xc0>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
   12c5a:	4a12      	ldr	r2, [pc, #72]	; (12ca4 <setSdclk(unsigned long)+0xc4>)
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
   12c5c:	fb03 fc0c 	mul.w	ip, r3, ip
   12c60:	fbbe f3fc 	udiv	r3, lr, ip
   12c64:	600b      	str	r3, [r1, #0]
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
   12c66:	4b10      	ldr	r3, [pc, #64]	; (12ca8 <setSdclk(unsigned long)+0xc8>)
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
   12c68:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);
   12c6a:	400b      	ands	r3, r1
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   12c6c:	432b      	orrs	r3, r5
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
   12c6e:	4333      	orrs	r3, r6
   12c70:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   12c74:	62d3      	str	r3, [r2, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
   12c76:	6a53      	ldr	r3, [r2, #36]	; 0x24
   12c78:	071b      	lsls	r3, r3, #28
   12c7a:	d5fc      	bpl.n	12c76 <setSdclk(unsigned long)+0x96>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
   12c7c:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
   12c7e:	012d      	lsls	r5, r5, #4
   12c80:	e7e8      	b.n	12c54 <setSdclk(unsigned long)+0x74>
  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
   12c82:	4672      	mov	r2, lr
   12c84:	2600      	movs	r6, #0
  uint32_t sdclkfs = 1;
   12c86:	2301      	movs	r3, #1
   12c88:	e7d2      	b.n	12c30 <setSdclk(unsigned long)+0x50>
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
   12c8a:	469c      	mov	ip, r3
   12c8c:	2500      	movs	r5, #0
   12c8e:	e7e1      	b.n	12c54 <setSdclk(unsigned long)+0x74>
   12c90:	400fc000 	.word	0x400fc000
   12c94:	400d8000 	.word	0x400d8000
   12c98:	5e69ec00 	.word	0x5e69ec00
   12c9c:	aaaaaaab 	.word	0xaaaaaaab
   12ca0:	20004fbc 	.word	0x20004fbc
   12ca4:	402c0000 	.word	0x402c0000
   12ca8:	fff0000f 	.word	0xfff0000f

00012cac <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
   12cac:	4b01      	ldr	r3, [pc, #4]	; (12cb4 <SdioCard::errorCode() const+0x8>)
}
   12cae:	7818      	ldrb	r0, [r3, #0]
   12cb0:	4770      	bx	lr
   12cb2:	bf00      	nop
   12cb4:	20003d30 	.word	0x20003d30

00012cb8 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
   12cb8:	4b01      	ldr	r3, [pc, #4]	; (12cc0 <SdioCard::errorData() const+0x8>)
   12cba:	6818      	ldr	r0, [r3, #0]
}
   12cbc:	4770      	bx	lr
   12cbe:	bf00      	nop
   12cc0:	20005028 	.word	0x20005028

00012cc4 <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
   12cc4:	b410      	push	{r4}
  memcpy(cid, &m_cid, 16);
   12cc6:	4c07      	ldr	r4, [pc, #28]	; (12ce4 <SdioCard::readCID(CID*)+0x20>)
bool SdioCard::readCID(cid_t* cid) {
   12cc8:	468c      	mov	ip, r1
  memcpy(cid, &m_cid, 16);
   12cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12ccc:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
   12cd0:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
   12cd2:	f8cc 1004 	str.w	r1, [ip, #4]
   12cd6:	f8cc 2008 	str.w	r2, [ip, #8]
   12cda:	f8cc 300c 	str.w	r3, [ip, #12]
}
   12cde:	f85d 4b04 	ldr.w	r4, [sp], #4
   12ce2:	4770      	bx	lr
   12ce4:	20004ff8 	.word	0x20004ff8

00012ce8 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
   12ce8:	b410      	push	{r4}
  memcpy(csd, &m_csd, 16);
   12cea:	4c07      	ldr	r4, [pc, #28]	; (12d08 <SdioCard::readCSD(csd_t*)+0x20>)
bool SdioCard::readCSD(csd_t* csd) {
   12cec:	468c      	mov	ip, r1
  memcpy(csd, &m_csd, 16);
   12cee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   12cf0:	f8cc 0000 	str.w	r0, [ip]
  return true;
}
   12cf4:	2001      	movs	r0, #1
  memcpy(csd, &m_csd, 16);
   12cf6:	f8cc 1004 	str.w	r1, [ip, #4]
   12cfa:	f8cc 2008 	str.w	r2, [ip, #8]
   12cfe:	f8cc 300c 	str.w	r3, [ip, #12]
}
   12d02:	f85d 4b04 	ldr.w	r4, [sp], #4
   12d06:	4770      	bx	lr
   12d08:	20005008 	.word	0x20005008

00012d0c <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
   12d0c:	4b02      	ldr	r3, [pc, #8]	; (12d18 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
   12d0e:	2001      	movs	r0, #1
  *ocr = m_ocr;
   12d10:	681b      	ldr	r3, [r3, #0]
   12d12:	600b      	str	r3, [r1, #0]
}
   12d14:	4770      	bx	lr
   12d16:	bf00      	nop
   12d18:	20005018 	.word	0x20005018

00012d1c <SdioCard::~SdioCard()>:
class SdioCard : public SdCardInterface {
   12d1c:	4770      	bx	lr
   12d1e:	bf00      	nop

00012d20 <SdioCard::~SdioCard()>:
   12d20:	b510      	push	{r4, lr}
   12d22:	4604      	mov	r4, r0
   12d24:	210c      	movs	r1, #12
   12d26:	f003 fcdb 	bl	166e0 <operator delete(void*, unsigned int)>
   12d2a:	4620      	mov	r0, r4
   12d2c:	bd10      	pop	{r4, pc}
   12d2e:	bf00      	nop

00012d30 <SdioCard::type() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
   12d30:	4b04      	ldr	r3, [pc, #16]	; (12d44 <SdioCard::type() const+0x14>)
   12d32:	781b      	ldrb	r3, [r3, #0]
   12d34:	b123      	cbz	r3, 12d40 <SdioCard::type() const+0x10>
   12d36:	4b04      	ldr	r3, [pc, #16]	; (12d48 <SdioCard::type() const+0x18>)
   12d38:	7818      	ldrb	r0, [r3, #0]
   12d3a:	3002      	adds	r0, #2
   12d3c:	b2c0      	uxtb	r0, r0
   12d3e:	4770      	bx	lr
   12d40:	2001      	movs	r0, #1
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
   12d42:	4770      	bx	lr
   12d44:	2000c943 	.word	0x2000c943
   12d48:	2000c944 	.word	0x2000c944

00012d4c <SdioCard::sectorCount()>:
  if (csd->v1.csd_ver == 0) {
   12d4c:	4b18      	ldr	r3, [pc, #96]	; (12db0 <SdioCard::sectorCount()+0x64>)
   12d4e:	781a      	ldrb	r2, [r3, #0]
   12d50:	f012 02c0 	ands.w	r2, r2, #192	; 0xc0
   12d54:	d00f      	beq.n	12d76 <SdioCard::sectorCount()+0x2a>
  } else if (csd->v2.csd_ver == 1) {
   12d56:	2a40      	cmp	r2, #64	; 0x40
   12d58:	d001      	beq.n	12d5e <SdioCard::sectorCount()+0x12>
  } else {
    return 0;
   12d5a:	2000      	movs	r0, #0
}
   12d5c:	4770      	bx	lr
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   12d5e:	7a58      	ldrb	r0, [r3, #9]
    return (((uint32_t)csd->v2.c_size_high << 16) +
   12d60:	79da      	ldrb	r2, [r3, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   12d62:	7a19      	ldrb	r1, [r3, #8]
   12d64:	3001      	adds	r0, #1
    return (((uint32_t)csd->v2.c_size_high << 16) +
   12d66:	f002 033f 	and.w	r3, r2, #63	; 0x3f
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
   12d6a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
   12d6e:	eb00 2001 	add.w	r0, r0, r1, lsl #8
   12d72:	0280      	lsls	r0, r0, #10
   12d74:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   12d76:	7a5a      	ldrb	r2, [r3, #9]
    uint16_t c_size = (csd->v1.c_size_high << 10)
   12d78:	7999      	ldrb	r1, [r3, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12d7a:	79d8      	ldrb	r0, [r3, #7]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
   12d7c:	f002 0203 	and.w	r2, r2, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12d80:	f893 c008 	ldrb.w	ip, [r3, #8]
    uint16_t c_size = (csd->v1.c_size_high << 10)
   12d84:	f001 0103 	and.w	r1, r1, #3
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12d88:	0080      	lsls	r0, r0, #2
                          | csd->v1.c_size_mult_low;
   12d8a:	0052      	lsls	r2, r2, #1
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12d8c:	ea40 2081 	orr.w	r0, r0, r1, lsl #10
uint32_t SdioCard::sectorCount() {
   12d90:	b500      	push	{lr}
                          | csd->v1.c_size_mult_low;
   12d92:	f893 e00a 	ldrb.w	lr, [r3, #10]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
   12d96:	ea40 109c 	orr.w	r0, r0, ip, lsr #6
    uint8_t read_bl_len = csd->v1.read_bl_len;
   12d9a:	795b      	ldrb	r3, [r3, #5]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
   12d9c:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
   12da0:	3001      	adds	r0, #1
   12da2:	f003 030f 	and.w	r3, r3, #15
   12da6:	4413      	add	r3, r2
   12da8:	3b07      	subs	r3, #7
   12daa:	4098      	lsls	r0, r3
}
   12dac:	f85d fb04 	ldr.w	pc, [sp], #4
   12db0:	20005008 	.word	0x20005008

00012db4 <waitTransferComplete() [clone .part.0]>:
static bool waitTransferComplete() {
   12db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t m = micros();
   12db8:	f003 f8c0 	bl	15f3c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   12dbc:	4e17      	ldr	r6, [pc, #92]	; (12e1c <waitTransferComplete() [clone .part.0]+0x68>)
   12dbe:	4d18      	ldr	r5, [pc, #96]	; (12e20 <waitTransferComplete() [clone .part.0]+0x6c>)
  uint32_t m = micros();
   12dc0:	4607      	mov	r7, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12dc2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 12e38 <waitTransferComplete() [clone .part.0]+0x84>
  while (fcn()) {
   12dc6:	e004      	b.n	12dd2 <waitTransferComplete() [clone .part.0]+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12dc8:	f003 f8b8 	bl	15f3c <micros>
   12dcc:	1bc0      	subs	r0, r0, r7
   12dce:	4540      	cmp	r0, r8
   12dd0:	d81b      	bhi.n	12e0a <waitTransferComplete() [clone .part.0]+0x56>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   12dd2:	6b34      	ldr	r4, [r6, #48]	; 0x30
  while (fcn()) {
   12dd4:	402c      	ands	r4, r5
   12dd6:	d0f7      	beq.n	12dc8 <waitTransferComplete() [clone .part.0]+0x14>
  m_transferActive = false;
   12dd8:	4a12      	ldr	r2, [pc, #72]	; (12e24 <waitTransferComplete() [clone .part.0]+0x70>)
   12dda:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
   12ddc:	4b12      	ldr	r3, [pc, #72]	; (12e28 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
   12dde:	7011      	strb	r1, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
   12de0:	6b32      	ldr	r2, [r6, #48]	; 0x30
   12de2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   12de4:	6819      	ldr	r1, [r3, #0]
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   12de6:	4a11      	ldr	r2, [pc, #68]	; (12e2c <waitTransferComplete() [clone .part.0]+0x78>)
  SDHC_IRQSTAT = m_irqstat;
   12de8:	6331      	str	r1, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   12dea:	681b      	ldr	r3, [r3, #0]
   12dec:	4213      	tst	r3, r2
   12dee:	d009      	beq.n	12e04 <waitTransferComplete() [clone .part.0]+0x50>
  m_errorCode = code;
   12df0:	490f      	ldr	r1, [pc, #60]	; (12e30 <waitTransferComplete() [clone .part.0]+0x7c>)
   12df2:	241f      	movs	r4, #31
  m_errorLine = line;
   12df4:	4b0f      	ldr	r3, [pc, #60]	; (12e34 <waitTransferComplete() [clone .part.0]+0x80>)
   12df6:	f240 227a 	movw	r2, #634	; 0x27a
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
   12dfa:	2000      	movs	r0, #0
  m_errorCode = code;
   12dfc:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   12dfe:	601a      	str	r2, [r3, #0]
}
   12e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return true;
   12e04:	2001      	movs	r0, #1
}
   12e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_transferActive = false;
   12e0a:	4a06      	ldr	r2, [pc, #24]	; (12e24 <waitTransferComplete() [clone .part.0]+0x70>)
  m_irqstat = SDHC_IRQSTAT;
   12e0c:	4b06      	ldr	r3, [pc, #24]	; (12e28 <waitTransferComplete() [clone .part.0]+0x74>)
  m_transferActive = false;
   12e0e:	7014      	strb	r4, [r2, #0]
  m_irqstat = SDHC_IRQSTAT;
   12e10:	6b32      	ldr	r2, [r6, #48]	; 0x30
   12e12:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   12e14:	681b      	ldr	r3, [r3, #0]
   12e16:	6333      	str	r3, [r6, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
   12e18:	e7ea      	b.n	12df0 <waitTransferComplete() [clone .part.0]+0x3c>
   12e1a:	bf00      	nop
   12e1c:	402c0000 	.word	0x402c0000
   12e20:	117f0002 	.word	0x117f0002
   12e24:	2000c945 	.word	0x2000c945
   12e28:	20005028 	.word	0x20005028
   12e2c:	117f0000 	.word	0x117f0000
   12e30:	20003d30 	.word	0x20003d30
   12e34:	20004fc0 	.word	0x20004fc0
   12e38:	000f4240 	.word	0x000f4240

00012e3c <SdioCard::writeData(unsigned char const*)>:
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
   12e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!m_transferActive) {
   12e40:	4c26      	ldr	r4, [pc, #152]	; (12edc <SdioCard::writeData(unsigned char const*)+0xa0>)
bool SdioCard::writeData(const uint8_t* src) {
   12e42:	460f      	mov	r7, r1
  if (!m_transferActive) {
   12e44:	7823      	ldrb	r3, [r4, #0]
   12e46:	2b00      	cmp	r3, #0
   12e48:	d138      	bne.n	12ebc <SdioCard::writeData(unsigned char const*)+0x80>
  DBG_IRQSTAT();
  if (!waitTransferComplete()) {
    return false;
  }
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
   12e4a:	4b25      	ldr	r3, [pc, #148]	; (12ee0 <SdioCard::writeData(unsigned char const*)+0xa4>)
   12e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   12e4e:	05d2      	lsls	r2, r2, #23
   12e50:	d52b      	bpl.n	12eaa <SdioCard::writeData(unsigned char const*)+0x6e>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   12e52:	4d23      	ldr	r5, [pc, #140]	; (12ee0 <SdioCard::writeData(unsigned char const*)+0xa4>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12e54:	f8df 8094 	ldr.w	r8, [pc, #148]	; 12eec <SdioCard::writeData(unsigned char const*)+0xb0>
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   12e58:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   12e5e:	62ab      	str	r3, [r5, #40]	; 0x28
  uint32_t m = micros();
   12e60:	f003 f86c 	bl	15f3c <micros>
   12e64:	4606      	mov	r6, r0
  while (fcn()) {
   12e66:	e004      	b.n	12e72 <SdioCard::writeData(unsigned char const*)+0x36>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12e68:	f003 f868 	bl	15f3c <micros>
   12e6c:	1b80      	subs	r0, r0, r6
   12e6e:	4540      	cmp	r0, r8
   12e70:	d82a      	bhi.n	12ec8 <SdioCard::writeData(unsigned char const*)+0x8c>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
   12e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  while (fcn()) {
   12e74:	f413 6980 	ands.w	r9, r3, #1024	; 0x400
   12e78:	d0f6      	beq.n	12e68 <SdioCard::writeData(unsigned char const*)+0x2c>
   12e7a:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
   12e7e:	4818      	ldr	r0, [pc, #96]	; (12ee0 <SdioCard::writeData(unsigned char const*)+0xa4>)
   12e80:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   12e84:	6a43      	ldr	r3, [r0, #36]	; 0x24
   12e86:	055b      	lsls	r3, r3, #21
   12e88:	d5fc      	bpl.n	12e84 <SdioCard::writeData(unsigned char const*)+0x48>
   12e8a:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
   12e8e:	f853 2f04 	ldr.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   12e92:	459c      	cmp	ip, r3
      SDHC_DATPORT = p32[i];
   12e94:	6202      	str	r2, [r0, #32]
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   12e96:	d1fa      	bne.n	12e8e <SdioCard::writeData(unsigned char const*)+0x52>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
   12e98:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
   12e9c:	45bc      	cmp	ip, r7
   12e9e:	d1f1      	bne.n	12e84 <SdioCard::writeData(unsigned char const*)+0x48>
    }
    p32 += FIFO_WML;
  }
  m_transferActive = true;
   12ea0:	2301      	movs	r3, #1
  return true;
   12ea2:	4618      	mov	r0, r3
  m_transferActive = true;
   12ea4:	7023      	strb	r3, [r4, #0]
}
   12ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   12eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12eac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   12eb0:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
   12eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12eb4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   12eb8:	629a      	str	r2, [r3, #40]	; 0x28
   12eba:	e7ca      	b.n	12e52 <SdioCard::writeData(unsigned char const*)+0x16>
   12ebc:	f7ff ff7a 	bl	12db4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   12ec0:	2800      	cmp	r0, #0
   12ec2:	d1c2      	bne.n	12e4a <SdioCard::writeData(unsigned char const*)+0xe>
}
   12ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  m_errorCode = code;
   12ec8:	4906      	ldr	r1, [pc, #24]	; (12ee4 <SdioCard::writeData(unsigned char const*)+0xa8>)
   12eca:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
   12ecc:	4b06      	ldr	r3, [pc, #24]	; (12ee8 <SdioCard::writeData(unsigned char const*)+0xac>)
   12ece:	f240 32d9 	movw	r2, #985	; 0x3d9
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
   12ed2:	4648      	mov	r0, r9
  m_errorCode = code;
   12ed4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   12ed6:	601a      	str	r2, [r3, #0]
}
   12ed8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12edc:	2000c945 	.word	0x2000c945
   12ee0:	402c0000 	.word	0x402c0000
   12ee4:	20003d30 	.word	0x20003d30
   12ee8:	20004fc0 	.word	0x20004fc0
   12eec:	000f4240 	.word	0x000f4240

00012ef0 <cardCommand(unsigned long, unsigned long)>:
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
   12ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ef4:	4607      	mov	r7, r0
   12ef6:	4688      	mov	r8, r1
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
   12ef8:	4c1f      	ldr	r4, [pc, #124]	; (12f78 <cardCommand(unsigned long, unsigned long)+0x88>)
  uint32_t m = micros();
   12efa:	f003 f81f 	bl	15f3c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12efe:	4e1f      	ldr	r6, [pc, #124]	; (12f7c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
   12f00:	4605      	mov	r5, r0
  while (fcn()) {
   12f02:	e004      	b.n	12f0e <cardCommand(unsigned long, unsigned long)+0x1e>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12f04:	f003 f81a 	bl	15f3c <micros>
   12f08:	1b43      	subs	r3, r0, r5
   12f0a:	42b3      	cmp	r3, r6
   12f0c:	d824      	bhi.n	12f58 <cardCommand(unsigned long, unsigned long)+0x68>
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
   12f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
   12f10:	07d9      	lsls	r1, r3, #31
   12f12:	d4f7      	bmi.n	12f04 <cardCommand(unsigned long, unsigned long)+0x14>
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
   12f14:	02bb      	lsls	r3, r7, #10
  SDHC_CMDARG = arg;
   12f16:	f8c4 8008 	str.w	r8, [r4, #8]
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
   12f1a:	d420      	bmi.n	12f5e <cardCommand(unsigned long, unsigned long)+0x6e>
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
   12f1c:	f027 03ff 	bic.w	r3, r7, #255	; 0xff
  SDHC_XFERTYP = xfertyp;
   12f20:	4c15      	ldr	r4, [pc, #84]	; (12f78 <cardCommand(unsigned long, unsigned long)+0x88>)
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
   12f22:	4e17      	ldr	r6, [pc, #92]	; (12f80 <cardCommand(unsigned long, unsigned long)+0x90>)
  SDHC_XFERTYP = xfertyp;
   12f24:	60e3      	str	r3, [r4, #12]
  uint32_t m = micros();
   12f26:	f003 f809 	bl	15f3c <micros>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12f2a:	4f14      	ldr	r7, [pc, #80]	; (12f7c <cardCommand(unsigned long, unsigned long)+0x8c>)
  uint32_t m = micros();
   12f2c:	4605      	mov	r5, r0
  while (fcn()) {
   12f2e:	e004      	b.n	12f3a <cardCommand(unsigned long, unsigned long)+0x4a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   12f30:	f003 f804 	bl	15f3c <micros>
   12f34:	1b40      	subs	r0, r0, r5
   12f36:	42b8      	cmp	r0, r7
   12f38:	d80e      	bhi.n	12f58 <cardCommand(unsigned long, unsigned long)+0x68>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
   12f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  while (fcn()) {
   12f3c:	4233      	tst	r3, r6
   12f3e:	d0f7      	beq.n	12f30 <cardCommand(unsigned long, unsigned long)+0x40>
  m_irqstat = SDHC_IRQSTAT;
   12f40:	6b22      	ldr	r2, [r4, #48]	; 0x30
   12f42:	4b10      	ldr	r3, [pc, #64]	; (12f84 <cardCommand(unsigned long, unsigned long)+0x94>)
   12f44:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
   12f46:	681a      	ldr	r2, [r3, #0]
   12f48:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   12f4a:	681a      	ldr	r2, [r3, #0]
   12f4c:	07d2      	lsls	r2, r2, #31
   12f4e:	d503      	bpl.n	12f58 <cardCommand(unsigned long, unsigned long)+0x68>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
   12f50:	681b      	ldr	r3, [r3, #0]
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   12f52:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
   12f56:	d00b      	beq.n	12f70 <cardCommand(unsigned long, unsigned long)+0x80>
   12f58:	2000      	movs	r0, #0
}
   12f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
   12f5e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
   12f60:	b2fb      	uxtb	r3, r7
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
   12f62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
   12f66:	64a2      	str	r2, [r4, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
   12f68:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   12f6a:	4313      	orrs	r3, r2
   12f6c:	64a3      	str	r3, [r4, #72]	; 0x48
   12f6e:	e7d5      	b.n	12f1c <cardCommand(unsigned long, unsigned long)+0x2c>
  return (m_irqstat & SDHC_IRQSTAT_CC) &&
   12f70:	2001      	movs	r0, #1
}
   12f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12f76:	bf00      	nop
   12f78:	402c0000 	.word	0x402c0000
   12f7c:	000f4240 	.word	0x000f4240
   12f80:	000f0001 	.word	0x000f0001
   12f84:	20005028 	.word	0x20005028

00012f88 <readReg16(unsigned long, void*)>:
  if (!cardCommand(xfertyp, m_rca)) {
   12f88:	4b15      	ldr	r3, [pc, #84]	; (12fe0 <readReg16(unsigned long, void*)+0x58>)
static bool readReg16(uint32_t xfertyp, void* data) {
   12f8a:	b530      	push	{r4, r5, lr}
   12f8c:	460d      	mov	r5, r1
   12f8e:	b085      	sub	sp, #20
  if (!cardCommand(xfertyp, m_rca)) {
   12f90:	6819      	ldr	r1, [r3, #0]
   12f92:	f7ff ffad 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   12f96:	b308      	cbz	r0, 12fdc <readReg16(unsigned long, void*)+0x54>
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
   12f98:	4b12      	ldr	r3, [pc, #72]	; (12fe4 <readReg16(unsigned long, void*)+0x5c>)
   12f9a:	f105 040f 	add.w	r4, r5, #15
   12f9e:	691a      	ldr	r2, [r3, #16]
   12fa0:	9200      	str	r2, [sp, #0]
   12fa2:	6959      	ldr	r1, [r3, #20]
   12fa4:	9101      	str	r1, [sp, #4]
   12fa6:	6999      	ldr	r1, [r3, #24]
   12fa8:	9102      	str	r1, [sp, #8]
   12faa:	69db      	ldr	r3, [r3, #28]
   12fac:	9303      	str	r3, [sp, #12]
  for (int i = 0; i < 15; i++) {
   12fae:	2300      	movs	r3, #0
   12fb0:	e001      	b.n	12fb6 <readReg16(unsigned long, void*)+0x2e>
    d[14 - i] = sr[i/4] >> 8*(i%4);
   12fb2:	f85e 2c10 	ldr.w	r2, [lr, #-16]
   12fb6:	f003 0c03 	and.w	ip, r3, #3
  for (int i = 0; i < 15; i++) {
   12fba:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
   12fbc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   12fc0:	f023 0e03 	bic.w	lr, r3, #3
  for (int i = 0; i < 15; i++) {
   12fc4:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
   12fc6:	fa22 f20c 	lsr.w	r2, r2, ip
   12fca:	f10e 0110 	add.w	r1, lr, #16
   12fce:	f804 2d01 	strb.w	r2, [r4, #-1]!
   12fd2:	eb0d 0e01 	add.w	lr, sp, r1
  for (int i = 0; i < 15; i++) {
   12fd6:	d1ec      	bne.n	12fb2 <readReg16(unsigned long, void*)+0x2a>
  d[15] = 0;
   12fd8:	2300      	movs	r3, #0
   12fda:	73eb      	strb	r3, [r5, #15]
}
   12fdc:	b005      	add	sp, #20
   12fde:	bd30      	pop	{r4, r5, pc}
   12fe0:	2000501c 	.word	0x2000501c
   12fe4:	402c0000 	.word	0x402c0000

00012fe8 <SdioCard::isBusy()>:
bool SdioCard::isBusy() {
   12fe8:	b510      	push	{r4, lr}
  bool useDma() {return m_options & DMA_SDIO;}
   12fea:	7a03      	ldrb	r3, [r0, #8]
  if (m_sdioConfig.useDma()) {
   12fec:	07db      	lsls	r3, r3, #31
   12fee:	d505      	bpl.n	12ffc <SdioCard::isBusy()+0x14>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   12ff0:	4b15      	ldr	r3, [pc, #84]	; (13048 <SdioCard::isBusy()+0x60>)
   12ff2:	681b      	ldr	r3, [r3, #0]
   12ff4:	b1b3      	cbz	r3, 13024 <SdioCard::isBusy()+0x3c>
}
   12ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   12ffa:	4718      	bx	r3
    if (m_transferActive) {
   12ffc:	4b13      	ldr	r3, [pc, #76]	; (1304c <SdioCard::isBusy()+0x64>)
   12ffe:	781b      	ldrb	r3, [r3, #0]
   13000:	b93b      	cbnz	r3, 13012 <SdioCard::isBusy()+0x2a>
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
   13002:	4b13      	ldr	r3, [pc, #76]	; (13050 <SdioCard::isBusy()+0x68>)
   13004:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   13006:	f084 7480 	eor.w	r4, r4, #16777216	; 0x1000000
   1300a:	f3c4 6400 	ubfx	r4, r4, #24, #1
}
   1300e:	4620      	mov	r0, r4
   13010:	bd10      	pop	{r4, pc}
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   13012:	4b0f      	ldr	r3, [pc, #60]	; (13050 <SdioCard::isBusy()+0x68>)
   13014:	4c0f      	ldr	r4, [pc, #60]	; (13054 <SdioCard::isBusy()+0x6c>)
   13016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13018:	401c      	ands	r4, r3
      if (isBusyTransferComplete()) {
   1301a:	fab4 f484 	clz	r4, r4
   1301e:	0964      	lsrs	r4, r4, #5
}
   13020:	4620      	mov	r0, r4
   13022:	bd10      	pop	{r4, pc}
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   13024:	4b0c      	ldr	r3, [pc, #48]	; (13058 <SdioCard::isBusy()+0x70>)
   13026:	781c      	ldrb	r4, [r3, #0]
   13028:	2c00      	cmp	r4, #0
   1302a:	d0f0      	beq.n	1300e <SdioCard::isBusy()+0x26>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1302c:	4b0b      	ldr	r3, [pc, #44]	; (1305c <SdioCard::isBusy()+0x74>)
   1302e:	480c      	ldr	r0, [pc, #48]	; (13060 <SdioCard::isBusy()+0x78>)
   13030:	6819      	ldr	r1, [r3, #0]
   13032:	f7ff ff5d 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13036:	2800      	cmp	r0, #0
   13038:	d0e9      	beq.n	1300e <SdioCard::isBusy()+0x26>
   1303a:	4b05      	ldr	r3, [pc, #20]	; (13050 <SdioCard::isBusy()+0x68>)
   1303c:	691c      	ldr	r4, [r3, #16]
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
   1303e:	f484 7480 	eor.w	r4, r4, #256	; 0x100
   13042:	f3c4 2400 	ubfx	r4, r4, #8, #1
   13046:	e7e2      	b.n	1300e <SdioCard::isBusy()+0x26>
   13048:	20005024 	.word	0x20005024
   1304c:	2000c945 	.word	0x2000c945
   13050:	402c0000 	.word	0x402c0000
   13054:	117f0002 	.word	0x117f0002
   13058:	2000c942 	.word	0x2000c942
   1305c:	2000501c 	.word	0x2000501c
   13060:	0d1a0000 	.word	0x0d1a0000

00013064 <SdioCard::status()>:
uint32_t SdioCard::status() {
   13064:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13066:	4b04      	ldr	r3, [pc, #16]	; (13078 <SdioCard::status()+0x14>)
   13068:	4804      	ldr	r0, [pc, #16]	; (1307c <SdioCard::status()+0x18>)
   1306a:	6819      	ldr	r1, [r3, #0]
   1306c:	f7ff ff40 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13070:	b108      	cbz	r0, 13076 <SdioCard::status()+0x12>
   13072:	4b03      	ldr	r3, [pc, #12]	; (13080 <SdioCard::status()+0x1c>)
   13074:	6918      	ldr	r0, [r3, #16]
}
   13076:	bd08      	pop	{r3, pc}
   13078:	2000501c 	.word	0x2000501c
   1307c:	0d1a0000 	.word	0x0d1a0000
   13080:	402c0000 	.word	0x402c0000

00013084 <isBusyCMD13()>:
static bool isBusyCMD13() {
   13084:	b508      	push	{r3, lr}
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13086:	4b07      	ldr	r3, [pc, #28]	; (130a4 <isBusyCMD13()+0x20>)
   13088:	4807      	ldr	r0, [pc, #28]	; (130a8 <isBusyCMD13()+0x24>)
   1308a:	6819      	ldr	r1, [r3, #0]
   1308c:	f7ff ff30 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13090:	b130      	cbz	r0, 130a0 <isBusyCMD13()+0x1c>
   13092:	4b06      	ldr	r3, [pc, #24]	; (130ac <isBusyCMD13()+0x28>)
   13094:	6918      	ldr	r0, [r3, #16]
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
   13096:	f480 7080 	eor.w	r0, r0, #256	; 0x100
   1309a:	f3c0 2000 	ubfx	r0, r0, #8, #1
}
   1309e:	bd08      	pop	{r3, pc}
   130a0:	2001      	movs	r0, #1
   130a2:	bd08      	pop	{r3, pc}
   130a4:	2000501c 	.word	0x2000501c
   130a8:	0d1a0000 	.word	0x0d1a0000
   130ac:	402c0000 	.word	0x402c0000

000130b0 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
   130b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
   130b4:	4b29      	ldr	r3, [pc, #164]	; (1315c <SdioCard::writeStart(unsigned long)+0xac>)
bool SdioCard::writeStart(uint32_t sector) {
   130b6:	4689      	mov	r9, r1
  m_busyFcn = fcn;
   130b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 1317c <SdioCard::writeStart(unsigned long)+0xcc>
   130bc:	4e28      	ldr	r6, [pc, #160]	; (13160 <SdioCard::writeStart(unsigned long)+0xb0>)
   130be:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
   130c2:	f002 ff3b 	bl	15f3c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   130c6:	4d27      	ldr	r5, [pc, #156]	; (13164 <SdioCard::writeStart(unsigned long)+0xb4>)
  uint32_t m = micros();
   130c8:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   130ca:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 13180 <SdioCard::writeStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   130ce:	4f26      	ldr	r7, [pc, #152]	; (13168 <SdioCard::writeStart(unsigned long)+0xb8>)
  while (fcn()) {
   130d0:	e006      	b.n	130e0 <SdioCard::writeStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   130d2:	f002 ff33 	bl	15f3c <micros>
   130d6:	1b00      	subs	r0, r0, r4
   130d8:	42b8      	cmp	r0, r7
   130da:	d829      	bhi.n	13130 <SdioCard::writeStart(unsigned long)+0x80>
    yield();
   130dc:	f005 fa78 	bl	185d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   130e0:	6831      	ldr	r1, [r6, #0]
   130e2:	4628      	mov	r0, r5
   130e4:	f7ff ff04 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   130e8:	2800      	cmp	r0, #0
   130ea:	d0f2      	beq.n	130d2 <SdioCard::writeStart(unsigned long)+0x22>
   130ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   130f0:	05db      	lsls	r3, r3, #23
   130f2:	d5ee      	bpl.n	130d2 <SdioCard::writeStart(unsigned long)+0x22>
  m_busyFcn = 0;
   130f4:	2300      	movs	r3, #0
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   130f6:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
   130fa:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   130fe:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   13102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13106:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   1310a:	4b18      	ldr	r3, [pc, #96]	; (1316c <SdioCard::writeStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   1310c:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13110:	781b      	ldrb	r3, [r3, #0]
   13112:	b1cb      	cbz	r3, 13148 <SdioCard::writeStart(unsigned long)+0x98>
   13114:	4649      	mov	r1, r9
   13116:	4816      	ldr	r0, [pc, #88]	; (13170 <SdioCard::writeStart(unsigned long)+0xc0>)
   13118:	f7ff feea 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   1311c:	b930      	cbnz	r0, 1312c <SdioCard::writeStart(unsigned long)+0x7c>
  m_errorCode = code;
   1311e:	4915      	ldr	r1, [pc, #84]	; (13174 <SdioCard::writeStart(unsigned long)+0xc4>)
   13120:	240e      	movs	r4, #14
  m_errorLine = line;
   13122:	4b15      	ldr	r3, [pc, #84]	; (13178 <SdioCard::writeStart(unsigned long)+0xc8>)
   13124:	f44f 6287 	mov.w	r2, #1080	; 0x438
  m_errorCode = code;
   13128:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   1312a:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
   1312c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
   13130:	4a10      	ldr	r2, [pc, #64]	; (13174 <SdioCard::writeStart(unsigned long)+0xc4>)
   13132:	210a      	movs	r1, #10
      m_busyFcn = 0;
   13134:	2000      	movs	r0, #0
  m_errorLine = line;
   13136:	4b10      	ldr	r3, [pc, #64]	; (13178 <SdioCard::writeStart(unsigned long)+0xc8>)
  m_errorCode = code;
   13138:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   1313a:	f240 422c 	movw	r2, #1068	; 0x42c
      m_busyFcn = 0;
   1313e:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
   13142:	601a      	str	r2, [r3, #0]
}
   13144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13148:	ea4f 2949 	mov.w	r9, r9, lsl #9
   1314c:	4808      	ldr	r0, [pc, #32]	; (13170 <SdioCard::writeStart(unsigned long)+0xc0>)
   1314e:	4649      	mov	r1, r9
   13150:	f7ff fece 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13154:	2800      	cmp	r0, #0
   13156:	d1e9      	bne.n	1312c <SdioCard::writeStart(unsigned long)+0x7c>
   13158:	e7e1      	b.n	1311e <SdioCard::writeStart(unsigned long)+0x6e>
   1315a:	bf00      	nop
   1315c:	00013085 	.word	0x00013085
   13160:	2000501c 	.word	0x2000501c
   13164:	0d1a0000 	.word	0x0d1a0000
   13168:	000f4240 	.word	0x000f4240
   1316c:	2000c944 	.word	0x2000c944
   13170:	193a0020 	.word	0x193a0020
   13174:	20003d30 	.word	0x20003d30
   13178:	20004fc0 	.word	0x20004fc0
   1317c:	20005024 	.word	0x20005024
   13180:	402c0000 	.word	0x402c0000

00013184 <SdioCard::readStop()>:
bool SdioCard::readStop() {
   13184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13188:	4c25      	ldr	r4, [pc, #148]	; (13220 <SdioCard::readStop()+0x9c>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   1318a:	2100      	movs	r1, #0
   1318c:	4825      	ldr	r0, [pc, #148]	; (13224 <SdioCard::readStop()+0xa0>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   1318e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13194:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   13196:	f7ff feab 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   1319a:	4605      	mov	r5, r0
   1319c:	b948      	cbnz	r0, 131b2 <SdioCard::readStop()+0x2e>
  m_errorCode = code;
   1319e:	4922      	ldr	r1, [pc, #136]	; (13228 <SdioCard::readStop()+0xa4>)
   131a0:	2009      	movs	r0, #9
  m_errorLine = line;
   131a2:	4b22      	ldr	r3, [pc, #136]	; (1322c <SdioCard::readStop()+0xa8>)
   131a4:	f240 223d 	movw	r2, #573	; 0x23d
  m_errorCode = code;
   131a8:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   131aa:	601a      	str	r2, [r3, #0]
}
   131ac:	4628      	mov	r0, r5
   131ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = fcn;
   131b2:	4b1f      	ldr	r3, [pc, #124]	; (13230 <SdioCard::readStop()+0xac>)
   131b4:	f8df 8080 	ldr.w	r8, [pc, #128]	; 13238 <SdioCard::readStop()+0xb4>
   131b8:	f8c8 3000 	str.w	r3, [r8]
  uint32_t m = micros();
   131bc:	f002 febe 	bl	15f3c <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   131c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
   131c2:	4606      	mov	r6, r0
  while (fcn()) {
   131c4:	01d8      	lsls	r0, r3, #7
   131c6:	d418      	bmi.n	131fa <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   131c8:	4f1a      	ldr	r7, [pc, #104]	; (13234 <SdioCard::readStop()+0xb0>)
   131ca:	e004      	b.n	131d6 <SdioCard::readStop()+0x52>
    yield();
   131cc:	f005 fa00 	bl	185d0 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   131d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
   131d2:	01d9      	lsls	r1, r3, #7
   131d4:	d411      	bmi.n	131fa <SdioCard::readStop()+0x76>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   131d6:	f002 feb1 	bl	15f3c <micros>
   131da:	1b83      	subs	r3, r0, r6
   131dc:	42bb      	cmp	r3, r7
   131de:	d9f5      	bls.n	131cc <SdioCard::readStop()+0x48>
  m_errorCode = code;
   131e0:	4a11      	ldr	r2, [pc, #68]	; (13228 <SdioCard::readStop()+0xa4>)
   131e2:	210a      	movs	r1, #10
      m_busyFcn = 0;
   131e4:	2500      	movs	r5, #0
  m_errorLine = line;
   131e6:	4b11      	ldr	r3, [pc, #68]	; (1322c <SdioCard::readStop()+0xa8>)
  m_errorCode = code;
   131e8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   131ea:	f44f 7210 	mov.w	r2, #576	; 0x240
}
   131ee:	4628      	mov	r0, r5
      m_busyFcn = 0;
   131f0:	f8c8 5000 	str.w	r5, [r8]
  m_errorLine = line;
   131f4:	601a      	str	r2, [r3, #0]
}
   131f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_busyFcn = 0;
   131fa:	2200      	movs	r2, #0
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
   131fc:	4b08      	ldr	r3, [pc, #32]	; (13220 <SdioCard::readStop()+0x9c>)
  m_busyFcn = 0;
   131fe:	f8c8 2000 	str.w	r2, [r8]
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
   13202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13204:	0792      	lsls	r2, r2, #30
   13206:	d5d1      	bpl.n	131ac <SdioCard::readStop()+0x28>
    uint32_t irqsststen = SDHC_IRQSTATEN;
   13208:	6b58      	ldr	r0, [r3, #52]	; 0x34
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
   1320a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
   1320c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
   1320e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
   13212:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
   13216:	62d9      	str	r1, [r3, #44]	; 0x2c
    SDHC_IRQSTATEN = irqsststen;
   13218:	6358      	str	r0, [r3, #52]	; 0x34
    SDHC_PROCTL = proctl;
   1321a:	629a      	str	r2, [r3, #40]	; 0x28
   1321c:	e7c6      	b.n	131ac <SdioCard::readStop()+0x28>
   1321e:	bf00      	nop
   13220:	402c0000 	.word	0x402c0000
   13224:	0cdb0000 	.word	0x0cdb0000
   13228:	20003d30 	.word	0x20003d30
   1322c:	20004fc0 	.word	0x20004fc0
   13230:	00012bc1 	.word	0x00012bc1
   13234:	000f4240 	.word	0x000f4240
   13238:	20005024 	.word	0x20005024

0001323c <cardCMD6(unsigned long, unsigned char*)>:
static bool cardCMD6(uint32_t arg, uint8_t* status) {
   1323c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13240:	4682      	mov	sl, r0
   13242:	4689      	mov	r9, r1
   13244:	4e36      	ldr	r6, [pc, #216]	; (13320 <cardCMD6(unsigned long, unsigned char*)+0xe4>)
  uint32_t m = micros();
   13246:	f002 fe79 	bl	15f3c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1324a:	4d36      	ldr	r5, [pc, #216]	; (13324 <cardCMD6(unsigned long, unsigned char*)+0xe8>)
  uint32_t m = micros();
   1324c:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1324e:	f8df 8100 	ldr.w	r8, [pc, #256]	; 13350 <cardCMD6(unsigned long, unsigned char*)+0x114>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13252:	4f35      	ldr	r7, [pc, #212]	; (13328 <cardCMD6(unsigned long, unsigned char*)+0xec>)
  while (fcn()) {
   13254:	e004      	b.n	13260 <cardCMD6(unsigned long, unsigned char*)+0x24>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13256:	f002 fe71 	bl	15f3c <micros>
   1325a:	1b03      	subs	r3, r0, r4
   1325c:	42bb      	cmp	r3, r7
   1325e:	d827      	bhi.n	132b0 <cardCMD6(unsigned long, unsigned char*)+0x74>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13260:	6831      	ldr	r1, [r6, #0]
   13262:	4628      	mov	r0, r5
   13264:	f7ff fe44 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13268:	2800      	cmp	r0, #0
   1326a:	d0f4      	beq.n	13256 <cardCMD6(unsigned long, unsigned char*)+0x1a>
   1326c:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13270:	05da      	lsls	r2, r3, #23
   13272:	d5f0      	bpl.n	13256 <cardCMD6(unsigned long, unsigned char*)+0x1a>
  m_dmaBusy = true;
   13274:	2301      	movs	r3, #1
   13276:	4d2d      	ldr	r5, [pc, #180]	; (1332c <cardCMD6(unsigned long, unsigned char*)+0xf0>)
  m_irqstat = 0;
   13278:	4f2d      	ldr	r7, [pc, #180]	; (13330 <cardCMD6(unsigned long, unsigned char*)+0xf4>)
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   1327a:	4651      	mov	r1, sl
  m_dmaBusy = true;
   1327c:	702b      	strb	r3, [r5, #0]
  m_irqstat = 0;
   1327e:	2300      	movs	r3, #0
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   13280:	482c      	ldr	r0, [pc, #176]	; (13334 <cardCMD6(unsigned long, unsigned char*)+0xf8>)
  m_irqstat = 0;
   13282:	603b      	str	r3, [r7, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
   13284:	4b2c      	ldr	r3, [pc, #176]	; (13338 <cardCMD6(unsigned long, unsigned char*)+0xfc>)
  SDHC_DSADDR  = (uint32_t)status;
   13286:	f8c8 9000 	str.w	r9, [r8]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
   1328a:	f8c8 3004 	str.w	r3, [r8, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
   1328e:	4b2b      	ldr	r3, [pc, #172]	; (1333c <cardCMD6(unsigned long, unsigned char*)+0x100>)
   13290:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
   13294:	f7ff fe2c 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13298:	4604      	mov	r4, r0
   1329a:	b9a0      	cbnz	r0, 132c6 <cardCMD6(unsigned long, unsigned char*)+0x8a>
  m_errorCode = code;
   1329c:	4928      	ldr	r1, [pc, #160]	; (13340 <cardCMD6(unsigned long, unsigned char*)+0x104>)
   1329e:	2004      	movs	r0, #4
  m_errorLine = line;
   132a0:	4b28      	ldr	r3, [pc, #160]	; (13344 <cardCMD6(unsigned long, unsigned char*)+0x108>)
   132a2:	f240 129f 	movw	r2, #415	; 0x19f
  m_errorCode = code;
   132a6:	7008      	strb	r0, [r1, #0]
}
   132a8:	4620      	mov	r0, r4
  m_errorLine = line;
   132aa:	601a      	str	r2, [r3, #0]
}
   132ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
   132b0:	4923      	ldr	r1, [pc, #140]	; (13340 <cardCMD6(unsigned long, unsigned char*)+0x104>)
   132b2:	200a      	movs	r0, #10
  m_errorLine = line;
   132b4:	4b23      	ldr	r3, [pc, #140]	; (13344 <cardCMD6(unsigned long, unsigned char*)+0x108>)
   132b6:	f44f 72cc 	mov.w	r2, #408	; 0x198
    return sdError(SD_CARD_ERROR_CMD13);
   132ba:	2400      	movs	r4, #0
  m_errorCode = code;
   132bc:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   132be:	601a      	str	r2, [r3, #0]
}
   132c0:	4620      	mov	r0, r4
   132c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_busyFcn = fcn;
   132c6:	4b20      	ldr	r3, [pc, #128]	; (13348 <cardCMD6(unsigned long, unsigned char*)+0x10c>)
   132c8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 13354 <cardCMD6(unsigned long, unsigned char*)+0x118>
   132cc:	f8c9 3000 	str.w	r3, [r9]
  uint32_t m = micros();
   132d0:	f002 fe34 	bl	15f3c <micros>
  return m_dmaBusy;
   132d4:	782b      	ldrb	r3, [r5, #0]
  uint32_t m = micros();
   132d6:	4606      	mov	r6, r0
  while (fcn()) {
   132d8:	b1bb      	cbz	r3, 1330a <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   132da:	f8df 804c 	ldr.w	r8, [pc, #76]	; 13328 <cardCMD6(unsigned long, unsigned char*)+0xec>
   132de:	e003      	b.n	132e8 <cardCMD6(unsigned long, unsigned char*)+0xac>
    yield();
   132e0:	f005 f976 	bl	185d0 <yield>
  return m_dmaBusy;
   132e4:	782b      	ldrb	r3, [r5, #0]
  while (fcn()) {
   132e6:	b183      	cbz	r3, 1330a <cardCMD6(unsigned long, unsigned char*)+0xce>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   132e8:	f002 fe28 	bl	15f3c <micros>
   132ec:	1b83      	subs	r3, r0, r6
   132ee:	4543      	cmp	r3, r8
   132f0:	d9f6      	bls.n	132e0 <cardCMD6(unsigned long, unsigned char*)+0xa4>
      m_busyFcn = 0;
   132f2:	2300      	movs	r3, #0
   132f4:	f8c9 3000 	str.w	r3, [r9]
  m_errorCode = code;
   132f8:	4911      	ldr	r1, [pc, #68]	; (13340 <cardCMD6(unsigned long, unsigned char*)+0x104>)
   132fa:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
   132fc:	4b11      	ldr	r3, [pc, #68]	; (13344 <cardCMD6(unsigned long, unsigned char*)+0x108>)
   132fe:	f44f 72d1 	mov.w	r2, #418	; 0x1a2
    return sdError(SD_CARD_ERROR_DMA);
   13302:	2400      	movs	r4, #0
  m_errorCode = code;
   13304:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   13306:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_DMA);
   13308:	e7da      	b.n	132c0 <cardCMD6(unsigned long, unsigned char*)+0x84>
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   1330a:	683b      	ldr	r3, [r7, #0]
  m_busyFcn = 0;
   1330c:	2200      	movs	r2, #0
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   1330e:	079b      	lsls	r3, r3, #30
  m_busyFcn = 0;
   13310:	f8c9 2000 	str.w	r2, [r9]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13314:	d5f0      	bpl.n	132f8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
   13316:	683a      	ldr	r2, [r7, #0]
   13318:	4b0c      	ldr	r3, [pc, #48]	; (1334c <cardCMD6(unsigned long, unsigned char*)+0x110>)
   1331a:	421a      	tst	r2, r3
   1331c:	d0d0      	beq.n	132c0 <cardCMD6(unsigned long, unsigned char*)+0x84>
   1331e:	e7eb      	b.n	132f8 <cardCMD6(unsigned long, unsigned char*)+0xbc>
   13320:	2000501c 	.word	0x2000501c
   13324:	0d1a0000 	.word	0x0d1a0000
   13328:	000f4240 	.word	0x000f4240
   1332c:	2000c946 	.word	0x2000c946
   13330:	20005028 	.word	0x20005028
   13334:	063a0011 	.word	0x063a0011
   13338:	00010040 	.word	0x00010040
   1333c:	117f0002 	.word	0x117f0002
   13340:	20003d30 	.word	0x20003d30
   13344:	20004fc0 	.word	0x20004fc0
   13348:	00012bd5 	.word	0x00012bd5
   1334c:	117f0000 	.word	0x117f0000
   13350:	402c0000 	.word	0x402c0000
   13354:	20005024 	.word	0x20005024

00013358 <SdioCard::erase(unsigned long, unsigned long)>:
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
   13358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!m_csd.v1.erase_blk_en) {
   1335c:	4d32      	ldr	r5, [pc, #200]	; (13428 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
   1335e:	4614      	mov	r4, r2
  if (!m_csd.v1.erase_blk_en) {
   13360:	7aab      	ldrb	r3, [r5, #10]
   13362:	f013 0040 	ands.w	r0, r3, #64	; 0x40
   13366:	d112      	bne.n	1338e <SdioCard::erase(unsigned long, unsigned long)+0x36>
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
   13368:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1336c:	7aea      	ldrb	r2, [r5, #11]
   1336e:	005b      	lsls	r3, r3, #1
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
   13370:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
   13374:	1c62      	adds	r2, r4, #1
   13376:	430a      	orrs	r2, r1
   13378:	4213      	tst	r3, r2
   1337a:	d008      	beq.n	1338e <SdioCard::erase(unsigned long, unsigned long)+0x36>
  m_errorCode = code;
   1337c:	492b      	ldr	r1, [pc, #172]	; (1342c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   1337e:	2427      	movs	r4, #39	; 0x27
  m_errorLine = line;
   13380:	4b2b      	ldr	r3, [pc, #172]	; (13430 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   13382:	f240 22e3 	movw	r2, #739	; 0x2e3
  m_errorCode = code;
   13386:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13388:	601a      	str	r2, [r3, #0]
}
   1338a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_highCapacity) {
   1338e:	4b29      	ldr	r3, [pc, #164]	; (13434 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
   13390:	781b      	ldrb	r3, [r3, #0]
   13392:	b90b      	cbnz	r3, 13398 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    firstSector <<= 9;
   13394:	0249      	lsls	r1, r1, #9
    lastSector <<= 9;
   13396:	0264      	lsls	r4, r4, #9
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
   13398:	4827      	ldr	r0, [pc, #156]	; (13438 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
   1339a:	f7ff fda9 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   1339e:	b940      	cbnz	r0, 133b2 <SdioCard::erase(unsigned long, unsigned long)+0x5a>
  m_errorCode = code;
   133a0:	4922      	ldr	r1, [pc, #136]	; (1342c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   133a2:	240f      	movs	r4, #15
  m_errorLine = line;
   133a4:	4b22      	ldr	r3, [pc, #136]	; (13430 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   133a6:	f240 22eb 	movw	r2, #747	; 0x2eb
  m_errorCode = code;
   133aa:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   133ac:	601a      	str	r2, [r3, #0]
}
   133ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
   133b2:	4621      	mov	r1, r4
   133b4:	4821      	ldr	r0, [pc, #132]	; (1343c <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
   133b6:	f7ff fd9b 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   133ba:	b940      	cbnz	r0, 133ce <SdioCard::erase(unsigned long, unsigned long)+0x76>
  m_errorCode = code;
   133bc:	491b      	ldr	r1, [pc, #108]	; (1342c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   133be:	2410      	movs	r4, #16
  m_errorLine = line;
   133c0:	4b1b      	ldr	r3, [pc, #108]	; (13430 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   133c2:	f240 22ee 	movw	r2, #750	; 0x2ee
  m_errorCode = code;
   133c6:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   133c8:	601a      	str	r2, [r3, #0]
}
   133ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!cardCommand(CMD38_XFERTYP, 0)) {
   133ce:	2100      	movs	r1, #0
   133d0:	481b      	ldr	r0, [pc, #108]	; (13440 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
   133d2:	f7ff fd8d 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   133d6:	b938      	cbnz	r0, 133e8 <SdioCard::erase(unsigned long, unsigned long)+0x90>
  m_errorCode = code;
   133d8:	4914      	ldr	r1, [pc, #80]	; (1342c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   133da:	2411      	movs	r4, #17
  m_errorLine = line;
   133dc:	4b14      	ldr	r3, [pc, #80]	; (13430 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   133de:	f240 22f1 	movw	r2, #753	; 0x2f1
  m_errorCode = code;
   133e2:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   133e4:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD38);
   133e6:	e7e2      	b.n	133ae <SdioCard::erase(unsigned long, unsigned long)+0x56>
  uint32_t m = micros();
   133e8:	f002 fda8 	bl	15f3c <micros>
   133ec:	4e15      	ldr	r6, [pc, #84]	; (13444 <SdioCard::erase(unsigned long, unsigned long)+0xec>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   133ee:	4d16      	ldr	r5, [pc, #88]	; (13448 <SdioCard::erase(unsigned long, unsigned long)+0xf0>)
  uint32_t m = micros();
   133f0:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   133f2:	f8df 805c 	ldr.w	r8, [pc, #92]	; 13450 <SdioCard::erase(unsigned long, unsigned long)+0xf8>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   133f6:	4f15      	ldr	r7, [pc, #84]	; (1344c <SdioCard::erase(unsigned long, unsigned long)+0xf4>)
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   133f8:	6831      	ldr	r1, [r6, #0]
   133fa:	4628      	mov	r0, r5
   133fc:	f7ff fd78 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13400:	b118      	cbz	r0, 1340a <SdioCard::erase(unsigned long, unsigned long)+0xb2>
   13402:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13406:	05db      	lsls	r3, r3, #23
   13408:	d4d1      	bmi.n	133ae <SdioCard::erase(unsigned long, unsigned long)+0x56>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   1340a:	f002 fd97 	bl	15f3c <micros>
   1340e:	1b00      	subs	r0, r0, r4
   13410:	42b8      	cmp	r0, r7
   13412:	d9f1      	bls.n	133f8 <SdioCard::erase(unsigned long, unsigned long)+0xa0>
  m_errorCode = code;
   13414:	4905      	ldr	r1, [pc, #20]	; (1342c <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
   13416:	2428      	movs	r4, #40	; 0x28
  m_errorLine = line;
   13418:	4b05      	ldr	r3, [pc, #20]	; (13430 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
   1341a:	f44f 723d 	mov.w	r2, #756	; 0x2f4
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
   1341e:	2000      	movs	r0, #0
  m_errorCode = code;
   13420:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13422:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
   13424:	e7c3      	b.n	133ae <SdioCard::erase(unsigned long, unsigned long)+0x56>
   13426:	bf00      	nop
   13428:	20005008 	.word	0x20005008
   1342c:	20003d30 	.word	0x20003d30
   13430:	20004fc0 	.word	0x20004fc0
   13434:	2000c944 	.word	0x2000c944
   13438:	201a0000 	.word	0x201a0000
   1343c:	211a0000 	.word	0x211a0000
   13440:	261b0000 	.word	0x261b0000
   13444:	2000501c 	.word	0x2000501c
   13448:	0d1a0000 	.word	0x0d1a0000
   1344c:	000f4240 	.word	0x000f4240
   13450:	402c0000 	.word	0x402c0000

00013454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
                       uint32_t sector, uint8_t* buf, size_t n) {
   13454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((3 & (uint32_t)buf) || n == 0) {
   13458:	f012 0403 	ands.w	r4, r2, #3
                       uint32_t sector, uint8_t* buf, size_t n) {
   1345c:	b083      	sub	sp, #12
  if ((3 & (uint32_t)buf) || n == 0) {
   1345e:	bf18      	it	ne
   13460:	2401      	movne	r4, #1
                       uint32_t sector, uint8_t* buf, size_t n) {
   13462:	9001      	str	r0, [sp, #4]
  if ((3 & (uint32_t)buf) || n == 0) {
   13464:	9300      	str	r3, [sp, #0]
   13466:	2b00      	cmp	r3, #0
   13468:	bf08      	it	eq
   1346a:	f044 0401 	orreq.w	r4, r4, #1
   1346e:	b15c      	cbz	r4, 13488 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
   13470:	4940      	ldr	r1, [pc, #256]	; (13574 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
   13472:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
   13474:	4b40      	ldr	r3, [pc, #256]	; (13578 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
   13476:	f240 12f5 	movw	r2, #501	; 0x1f5
    return sdError(SD_CARD_ERROR_DMA);
   1347a:	2400      	movs	r4, #0
  m_errorCode = code;
   1347c:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   1347e:	601a      	str	r2, [r3, #0]
}
   13480:	4620      	mov	r0, r4
   13482:	b003      	add	sp, #12
   13484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  m_busyFcn = fcn;
   13488:	4b3c      	ldr	r3, [pc, #240]	; (1357c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x128>)
   1348a:	4615      	mov	r5, r2
   1348c:	4a3c      	ldr	r2, [pc, #240]	; (13580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   1348e:	460e      	mov	r6, r1
   13490:	f8df 910c 	ldr.w	r9, [pc, #268]	; 135a0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x14c>
   13494:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
   13496:	f002 fd51 	bl	15f3c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   1349a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 135a4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x150>
  uint32_t m = micros();
   1349e:	4607      	mov	r7, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   134a0:	f8df b104 	ldr.w	fp, [pc, #260]	; 135a8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x154>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   134a4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 13598 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>
  while (fcn()) {
   134a8:	e006      	b.n	134b8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x64>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   134aa:	f002 fd47 	bl	15f3c <micros>
   134ae:	1bc0      	subs	r0, r0, r7
   134b0:	4550      	cmp	r0, sl
   134b2:	d844      	bhi.n	1353e <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xea>
    yield();
   134b4:	f005 f88c 	bl	185d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   134b8:	f8d9 1000 	ldr.w	r1, [r9]
   134bc:	4640      	mov	r0, r8
   134be:	f7ff fd17 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   134c2:	2800      	cmp	r0, #0
   134c4:	d0f1      	beq.n	134aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
   134c6:	f8db 3010 	ldr.w	r3, [fp, #16]
  while (fcn()) {
   134ca:	05da      	lsls	r2, r3, #23
   134cc:	d5ed      	bpl.n	134aa <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x56>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   134ce:	9a00      	ldr	r2, [sp, #0]
   134d0:	4b2c      	ldr	r3, [pc, #176]	; (13584 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x130>)
  m_busyFcn = 0;
   134d2:	492b      	ldr	r1, [pc, #172]	; (13580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   134d4:	ea03 4302 	and.w	r3, r3, r2, lsl #16
  m_busyFcn = 0;
   134d8:	2200      	movs	r2, #0
  m_dmaBusy = true;
   134da:	4f2b      	ldr	r7, [pc, #172]	; (13588 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x134>)
  m_busyFcn = 0;
   134dc:	600a      	str	r2, [r1, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   134de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  m_dmaBusy = true;
   134e2:	2101      	movs	r1, #1
  m_irqstat = 0;
   134e4:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 135ac <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x158>
  m_dmaBusy = true;
   134e8:	7039      	strb	r1, [r7, #0]
  m_irqstat = 0;
   134ea:	f8c8 2000 	str.w	r2, [r8]
  SDHC_DSADDR  = (uint32_t)buf;
   134ee:	f8cb 5000 	str.w	r5, [fp]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
   134f2:	f8cb 3004 	str.w	r3, [fp, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
   134f6:	4b25      	ldr	r3, [pc, #148]	; (1358c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x138>)
   134f8:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
   134fc:	4b24      	ldr	r3, [pc, #144]	; (13590 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x13c>)
   134fe:	781b      	ldrb	r3, [r3, #0]
   13500:	b343      	cbz	r3, 13554 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x100>
   13502:	4631      	mov	r1, r6
   13504:	9801      	ldr	r0, [sp, #4]
   13506:	f7ff fcf3 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   1350a:	4681      	mov	r9, r0
   1350c:	2800      	cmp	r0, #0
   1350e:	d0b7      	beq.n	13480 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_busyFcn = fcn;
   13510:	4b20      	ldr	r3, [pc, #128]	; (13594 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x140>)
   13512:	4a1b      	ldr	r2, [pc, #108]	; (13580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   13514:	6013      	str	r3, [r2, #0]
  uint32_t m = micros();
   13516:	f002 fd11 	bl	15f3c <micros>
  return m_dmaBusy;
   1351a:	783b      	ldrb	r3, [r7, #0]
  uint32_t m = micros();
   1351c:	4605      	mov	r5, r0
  while (fcn()) {
   1351e:	b1db      	cbz	r3, 13558 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13520:	4e1d      	ldr	r6, [pc, #116]	; (13598 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x144>)
   13522:	e003      	b.n	1352c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd8>
    yield();
   13524:	f005 f854 	bl	185d0 <yield>
  return m_dmaBusy;
   13528:	783b      	ldrb	r3, [r7, #0]
  while (fcn()) {
   1352a:	b1ab      	cbz	r3, 13558 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x104>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   1352c:	f002 fd06 	bl	15f3c <micros>
   13530:	1b40      	subs	r0, r0, r5
   13532:	42b0      	cmp	r0, r6
   13534:	d9f6      	bls.n	13524 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xd0>
      m_busyFcn = 0;
   13536:	2300      	movs	r3, #0
   13538:	4a11      	ldr	r2, [pc, #68]	; (13580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   1353a:	6013      	str	r3, [r2, #0]
      return true;
   1353c:	e7a0      	b.n	13480 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  m_errorCode = code;
   1353e:	4b0d      	ldr	r3, [pc, #52]	; (13574 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x120>)
   13540:	220a      	movs	r2, #10
      m_busyFcn = 0;
   13542:	2100      	movs	r1, #0
   13544:	480e      	ldr	r0, [pc, #56]	; (13580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
  m_errorCode = code;
   13546:	701a      	strb	r2, [r3, #0]
  m_errorLine = line;
   13548:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
   1354c:	4b0a      	ldr	r3, [pc, #40]	; (13578 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x124>)
      m_busyFcn = 0;
   1354e:	6001      	str	r1, [r0, #0]
  m_errorLine = line;
   13550:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD13);
   13552:	e795      	b.n	13480 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
   13554:	0276      	lsls	r6, r6, #9
   13556:	e7d4      	b.n	13502 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xae>
  m_busyFcn = 0;
   13558:	2300      	movs	r3, #0
   1355a:	4a09      	ldr	r2, [pc, #36]	; (13580 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x12c>)
   1355c:	6013      	str	r3, [r2, #0]
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   1355e:	f8d8 3000 	ldr.w	r3, [r8]
   13562:	079b      	lsls	r3, r3, #30
   13564:	d58c      	bpl.n	13480 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
   13566:	f8d8 2000 	ldr.w	r2, [r8]
   1356a:	4b0c      	ldr	r3, [pc, #48]	; (1359c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x148>)
   1356c:	421a      	tst	r2, r3
   1356e:	bf08      	it	eq
   13570:	464c      	moveq	r4, r9
   13572:	e785      	b.n	13480 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x2c>
   13574:	20003d30 	.word	0x20003d30
   13578:	20004fc0 	.word	0x20004fc0
   1357c:	00013085 	.word	0x00013085
   13580:	20005024 	.word	0x20005024
   13584:	1fff0000 	.word	0x1fff0000
   13588:	2000c946 	.word	0x2000c946
   1358c:	117f0002 	.word	0x117f0002
   13590:	2000c944 	.word	0x2000c944
   13594:	00012bd5 	.word	0x00012bd5
   13598:	000f4240 	.word	0x000f4240
   1359c:	117f0000 	.word	0x117f0000
   135a0:	2000501c 	.word	0x2000501c
   135a4:	0d1a0000 	.word	0x0d1a0000
   135a8:	402c0000 	.word	0x402c0000
   135ac:	20005028 	.word	0x20005028

000135b0 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
   135b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   135b2:	4606      	mov	r6, r0
   135b4:	7a00      	ldrb	r0, [r0, #8]
   135b6:	460c      	mov	r4, r1
   135b8:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   135ba:	07c0      	lsls	r0, r0, #31
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
   135bc:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
   135be:	d413      	bmi.n	135e8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
   135c0:	b183      	cbz	r3, 135e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
   135c2:	440f      	add	r7, r1
   135c4:	e001      	b.n	135ca <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
   135c6:	42bc      	cmp	r4, r7
   135c8:	d00c      	beq.n	135e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
   135ca:	6833      	ldr	r3, [r6, #0]
   135cc:	462a      	mov	r2, r5
   135ce:	4621      	mov	r1, r4
   135d0:	4630      	mov	r0, r6
   135d2:	691b      	ldr	r3, [r3, #16]
    for (size_t i = 0; i < n; i++) {
   135d4:	3401      	adds	r4, #1
   135d6:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!readSector(sector + i, dst + i*512UL)) {
   135da:	4798      	blx	r3
   135dc:	2800      	cmp	r0, #0
   135de:	d1f2      	bne.n	135c6 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
          return false;  // readSector will set errorCode.
   135e0:	2000      	movs	r0, #0
}
   135e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   135e4:	2001      	movs	r0, #1
}
   135e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((uint32_t)dst & 3) {
   135e8:	0790      	lsls	r0, r2, #30
   135ea:	d012      	beq.n	13612 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
   135ec:	2b00      	cmp	r3, #0
   135ee:	d0f9      	beq.n	135e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
   135f0:	440f      	add	r7, r1
   135f2:	e001      	b.n	135f8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
   135f4:	42bc      	cmp	r4, r7
   135f6:	d0f5      	beq.n	135e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
   135f8:	6833      	ldr	r3, [r6, #0]
   135fa:	462a      	mov	r2, r5
   135fc:	4621      	mov	r1, r4
   135fe:	4630      	mov	r0, r6
   13600:	691b      	ldr	r3, [r3, #16]
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
   13602:	3401      	adds	r4, #1
   13604:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!readSector(sector, dst)) {
   13608:	4798      	blx	r3
   1360a:	2800      	cmp	r0, #0
   1360c:	d1f2      	bne.n	135f4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
   1360e:	2000      	movs	r0, #0
   13610:	e7e7      	b.n	135e2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x32>
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
   13612:	4806      	ldr	r0, [pc, #24]	; (1362c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
   13614:	f7ff ff1e 	bl	13454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   13618:	2800      	cmp	r0, #0
   1361a:	d1e3      	bne.n	135e4 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
  m_errorCode = code;
   1361c:	4904      	ldr	r1, [pc, #16]	; (13630 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
   1361e:	240c      	movs	r4, #12
  m_errorLine = line;
   13620:	4b04      	ldr	r3, [pc, #16]	; (13634 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
   13622:	f240 3282 	movw	r2, #898	; 0x382
  m_errorCode = code;
   13626:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13628:	601a      	str	r2, [r3, #0]
}
   1362a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1362c:	123a0037 	.word	0x123a0037
   13630:	20003d30 	.word	0x20003d30
   13634:	20004fc0 	.word	0x20004fc0

00013638 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
   13638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1363a:	4606      	mov	r6, r0
   1363c:	7a00      	ldrb	r0, [r0, #8]
   1363e:	460c      	mov	r4, r1
   13640:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
   13642:	07c0      	lsls	r0, r0, #31
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
   13644:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
   13646:	d413      	bmi.n	13670 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    for (size_t i = 0; i < n; i++) {
   13648:	b183      	cbz	r3, 1366c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
   1364a:	440f      	add	r7, r1
   1364c:	e001      	b.n	13652 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
   1364e:	42bc      	cmp	r4, r7
   13650:	d00c      	beq.n	1366c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
   13652:	6833      	ldr	r3, [r6, #0]
   13654:	462a      	mov	r2, r5
   13656:	4621      	mov	r1, r4
   13658:	4630      	mov	r0, r6
   1365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    for (size_t i = 0; i < n; i++) {
   1365c:	3401      	adds	r4, #1
   1365e:	f505 7500 	add.w	r5, r5, #512	; 0x200
      if (!writeSector(sector + i, src + i*512UL)) {
   13662:	4798      	blx	r3
   13664:	2800      	cmp	r0, #0
   13666:	d1f2      	bne.n	1364e <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
          return false;  // writeSector will set errorCode.
   13668:	2000      	movs	r0, #0
}
   1366a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
   1366c:	2001      	movs	r0, #1
}
   1366e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (3 & (uint32_t)ptr) {
   13670:	0790      	lsls	r0, r2, #30
   13672:	d012      	beq.n	1369a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
   13674:	2b00      	cmp	r3, #0
   13676:	d0f9      	beq.n	1366c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
   13678:	440f      	add	r7, r1
   1367a:	e001      	b.n	13680 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
   1367c:	42bc      	cmp	r4, r7
   1367e:	d0f5      	beq.n	1366c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
   13680:	6833      	ldr	r3, [r6, #0]
   13682:	462a      	mov	r2, r5
   13684:	4621      	mov	r1, r4
   13686:	4630      	mov	r0, r6
   13688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
   1368a:	3401      	adds	r4, #1
   1368c:	f505 7500 	add.w	r5, r5, #512	; 0x200
        if (!writeSector(sector, ptr)) {
   13690:	4798      	blx	r3
   13692:	2800      	cmp	r0, #0
   13694:	d1f2      	bne.n	1367c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
   13696:	2000      	movs	r0, #0
   13698:	e7e7      	b.n	1366a <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
   1369a:	4806      	ldr	r0, [pc, #24]	; (136b4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
   1369c:	f7ff feda 	bl	13454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   136a0:	2800      	cmp	r0, #0
   136a2:	d1e3      	bne.n	1366c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
  m_errorCode = code;
   136a4:	4904      	ldr	r1, [pc, #16]	; (136b8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
   136a6:	240e      	movs	r4, #14
  m_errorLine = line;
   136a8:	4b04      	ldr	r3, [pc, #16]	; (136bc <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
   136aa:	f240 421e 	movw	r2, #1054	; 0x41e
  m_errorCode = code;
   136ae:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   136b0:	601a      	str	r2, [r3, #0]
}
   136b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   136b4:	193a0027 	.word	0x193a0027
   136b8:	20003d30 	.word	0x20003d30
   136bc:	20004fc0 	.word	0x20004fc0

000136c0 <SdioCard::begin(SdioConfig)>:
bool SdioCard::begin(SdioConfig sdioConfig) {
   136c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CCM_ANALOG_PFD_528 |= (1 << 7);
   136c4:	4ba8      	ldr	r3, [pc, #672]	; (13968 <SdioCard::begin(SdioConfig)+0x2a8>)
  m_curState = IDLE_STATE;
   136c6:	2200      	movs	r2, #0
  m_initDone = false;
   136c8:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 139c8 <SdioCard::begin(SdioConfig)+0x308>
bool SdioCard::begin(SdioConfig sdioConfig) {
   136cc:	b091      	sub	sp, #68	; 0x44
  m_errorCode = SD_CARD_ERROR_NONE;
   136ce:	4da7      	ldr	r5, [pc, #668]	; (1396c <SdioCard::begin(SdioConfig)+0x2ac>)
  m_highCapacity = false;
   136d0:	4fa7      	ldr	r7, [pc, #668]	; (13970 <SdioCard::begin(SdioConfig)+0x2b0>)
  m_version2 = false;
   136d2:	4ea8      	ldr	r6, [pc, #672]	; (13974 <SdioCard::begin(SdioConfig)+0x2b4>)
  m_errorCode = SD_CARD_ERROR_NONE;
   136d4:	702a      	strb	r2, [r5, #0]
  m_curState = IDLE_STATE;
   136d6:	7242      	strb	r2, [r0, #9]
  m_initDone = false;
   136d8:	f888 2000 	strb.w	r2, [r8]
  m_highCapacity = false;
   136dc:	703a      	strb	r2, [r7, #0]
  m_version2 = false;
   136de:	7032      	strb	r2, [r6, #0]
  CCM_ANALOG_PFD_528 |= (1 << 7);
   136e0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
  m_sdioConfig = sdioConfig;
   136e4:	7201      	strb	r1, [r0, #8]
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   136e6:	2105      	movs	r1, #5
  CCM_ANALOG_PFD_528 |= (1 << 7);
   136e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  SDHC_MIX_CTRL |= 0x80000000;
   136ec:	f8df 92a0 	ldr.w	r9, [pc, #672]	; 13990 <SdioCard::begin(SdioConfig)+0x2d0>
  CCM_ANALOG_PFD_528 |= (1 << 7);
   136f0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
   136f4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   136f8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
   136fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
   13700:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   13704:	f042 0218 	orr.w	r2, r2, #24
   13708:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
   1370c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   13710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   13714:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
   13718:	f503 3310 	add.w	r3, r3, #147456	; 0x24000
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   1371c:	4a96      	ldr	r2, [pc, #600]	; (13978 <SdioCard::begin(SdioConfig)+0x2b8>)
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
   1371e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
   13722:	f040 000c 	orr.w	r0, r0, #12
   13726:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
   1372a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1372c:	f420 5060 	bic.w	r0, r0, #14336	; 0x3800
   13730:	6258      	str	r0, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
   13732:	69d8      	ldr	r0, [r3, #28]
   13734:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
   13738:	61d8      	str	r0, [r3, #28]
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
   1373a:	6a58      	ldr	r0, [r3, #36]	; 0x24
   1373c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
   13740:	6258      	str	r0, [r3, #36]	; 0x24
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13742:	f8c2 11cc 	str.w	r1, [r2, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13746:	f8c2 11d0 	str.w	r1, [r2, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   1374a:	f8c2 11bc 	str.w	r1, [r2, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   1374e:	f8c2 11c0 	str.w	r1, [r2, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   13752:	f8c2 11c4 	str.w	r1, [r2, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13756:	f8c2 11c8 	str.w	r1, [r2, #456]	; 0x1c8
  SDHC_MIX_CTRL |= 0x80000000;
   1375a:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
   1375e:	4b87      	ldr	r3, [pc, #540]	; (1397c <SdioCard::begin(SdioConfig)+0x2bc>)
  SDHC_MIX_CTRL |= 0x80000000;
   13760:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
   13764:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
   13768:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
   1376c:	4313      	orrs	r3, r2
   1376e:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
   13772:	f8d9 402c 	ldr.w	r4, [r9, #44]	; 0x2c
   13776:	f014 7480 	ands.w	r4, r4, #16777216	; 0x1000000
   1377a:	d1fa      	bne.n	13772 <SdioCard::begin(SdioConfig)+0xb2>
  setSdclk(SD_MAX_INIT_RATE_KHZ);
   1377c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   13780:	f7ff fa2e 	bl	12be0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13784:	4b7c      	ldr	r3, [pc, #496]	; (13978 <SdioCard::begin(SdioConfig)+0x2b8>)
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13786:	f247 02b8 	movw	r2, #28856	; 0x70b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   1378a:	f241 01b8 	movw	r1, #4280	; 0x10b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   1378e:	f8c3 41cc 	str.w	r4, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13792:	f8c3 41d0 	str.w	r4, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13796:	f8c3 41bc 	str.w	r4, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   1379a:	f8c3 41c0 	str.w	r4, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   1379e:	f8c3 41c4 	str.w	r4, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   137a2:	f8c3 41c8 	str.w	r4, [r3, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   137a6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
   137aa:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
   137ae:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   137b2:	f8c3 13b0 	str.w	r1, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
   137b6:	f8c3 23b4 	str.w	r2, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
   137ba:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
   137be:	4b70      	ldr	r3, [pc, #448]	; (13980 <SdioCard::begin(SdioConfig)+0x2c0>)
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   137c0:	4a70      	ldr	r2, [pc, #448]	; (13984 <SdioCard::begin(SdioConfig)+0x2c4>)
   137c2:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
   137c6:	4b70      	ldr	r3, [pc, #448]	; (13988 <SdioCard::begin(SdioConfig)+0x2c8>)
   137c8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
   137cc:	4b6f      	ldr	r3, [pc, #444]	; (1398c <SdioCard::begin(SdioConfig)+0x2cc>)
   137ce:	2260      	movs	r2, #96	; 0x60
   137d0:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  NVIC_ENABLE_IRQ(IRQ_SDHC);
   137d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   137d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   137dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
   137e0:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
   137e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
   137e8:	f8c9 302c 	str.w	r3, [r9, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
   137ec:	4b68      	ldr	r3, [pc, #416]	; (13990 <SdioCard::begin(SdioConfig)+0x2d0>)
   137ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   137f0:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
   137f4:	d1fb      	bne.n	137ee <SdioCard::begin(SdioConfig)+0x12e>
  if (!cardCommand(CMD0_XFERTYP, 0)) {
   137f6:	4608      	mov	r0, r1
   137f8:	f7ff fb7a 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   137fc:	4604      	mov	r4, r0
   137fe:	b948      	cbnz	r0, 13814 <SdioCard::begin(SdioConfig)+0x154>
  m_errorCode = code;
   13800:	2101      	movs	r1, #1
  m_errorLine = line;
   13802:	4b64      	ldr	r3, [pc, #400]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   13804:	f240 228e 	movw	r2, #654	; 0x28e
  m_errorCode = code;
   13808:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   1380a:	601a      	str	r2, [r3, #0]
}
   1380c:	4620      	mov	r0, r4
   1380e:	b011      	add	sp, #68	; 0x44
   13810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13814:	2403      	movs	r4, #3
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
   13816:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 139cc <SdioCard::begin(SdioConfig)+0x30c>
   1381a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   1381e:	4648      	mov	r0, r9
   13820:	f7ff fb66 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13824:	2800      	cmp	r0, #0
   13826:	d144      	bne.n	138b2 <SdioCard::begin(SdioConfig)+0x1f2>
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
   13828:	3c01      	subs	r4, #1
   1382a:	d1f6      	bne.n	1381a <SdioCard::begin(SdioConfig)+0x15a>
  arg = m_version2 ? 0X40300000 : 0x00300000;
   1382c:	7832      	ldrb	r2, [r6, #0]
   1382e:	4b5a      	ldr	r3, [pc, #360]	; (13998 <SdioCard::begin(SdioConfig)+0x2d8>)
   13830:	2a00      	cmp	r2, #0
   13832:	bf14      	ite	ne
   13834:	469a      	movne	sl, r3
   13836:	f44f 1a40 	moveq.w	sl, #3145728	; 0x300000
  int m = micros();
   1383a:	f002 fb7f 	bl	15f3c <micros>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   1383e:	4e57      	ldr	r6, [pc, #348]	; (1399c <SdioCard::begin(SdioConfig)+0x2dc>)
  int m = micros();
   13840:	4604      	mov	r4, r0
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   13842:	f8df b18c 	ldr.w	fp, [pc, #396]	; 139d0 <SdioCard::begin(SdioConfig)+0x310>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   13846:	f8df 918c 	ldr.w	r9, [pc, #396]	; 139d4 <SdioCard::begin(SdioConfig)+0x314>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   1384a:	2100      	movs	r1, #0
   1384c:	4630      	mov	r0, r6
   1384e:	f7ff fb4f 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13852:	b950      	cbnz	r0, 1386a <SdioCard::begin(SdioConfig)+0x1aa>
      return sdError(SD_CARD_ERROR_ACMD41);
   13854:	2400      	movs	r4, #0
  m_errorCode = code;
   13856:	2117      	movs	r1, #23
  m_errorLine = line;
   13858:	4b4e      	ldr	r3, [pc, #312]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   1385a:	f240 229f 	movw	r2, #671	; 0x29f
}
   1385e:	4620      	mov	r0, r4
  m_errorCode = code;
   13860:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   13862:	601a      	str	r2, [r3, #0]
}
   13864:	b011      	add	sp, #68	; 0x44
   13866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   1386a:	4651      	mov	r1, sl
   1386c:	4658      	mov	r0, fp
   1386e:	f7ff fb3f 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13872:	2800      	cmp	r0, #0
   13874:	d0ee      	beq.n	13854 <SdioCard::begin(SdioConfig)+0x194>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
   13876:	f002 fb61 	bl	15f3c <micros>
   1387a:	1b00      	subs	r0, r0, r4
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
   1387c:	4b44      	ldr	r3, [pc, #272]	; (13990 <SdioCard::begin(SdioConfig)+0x2d0>)
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
   1387e:	4548      	cmp	r0, r9
   13880:	d8e8      	bhi.n	13854 <SdioCard::begin(SdioConfig)+0x194>
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
   13882:	691a      	ldr	r2, [r3, #16]
   13884:	2a00      	cmp	r2, #0
   13886:	dae0      	bge.n	1384a <SdioCard::begin(SdioConfig)+0x18a>
  m_ocr = SDHC_CMDRSP0;
   13888:	6919      	ldr	r1, [r3, #16]
   1388a:	4a45      	ldr	r2, [pc, #276]	; (139a0 <SdioCard::begin(SdioConfig)+0x2e0>)
   1388c:	6011      	str	r1, [r2, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
   1388e:	691b      	ldr	r3, [r3, #16]
   13890:	005a      	lsls	r2, r3, #1
   13892:	d501      	bpl.n	13898 <SdioCard::begin(SdioConfig)+0x1d8>
    m_highCapacity = true;
   13894:	2301      	movs	r3, #1
   13896:	703b      	strb	r3, [r7, #0]
  if (!cardCommand(CMD2_XFERTYP, 0)) {
   13898:	2100      	movs	r1, #0
   1389a:	4842      	ldr	r0, [pc, #264]	; (139a4 <SdioCard::begin(SdioConfig)+0x2e4>)
   1389c:	f7ff fb28 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   138a0:	4604      	mov	r4, r0
   138a2:	b9c0      	cbnz	r0, 138d6 <SdioCard::begin(SdioConfig)+0x216>
  m_errorCode = code;
   138a4:	2102      	movs	r1, #2
  m_errorLine = line;
   138a6:	4b3b      	ldr	r3, [pc, #236]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   138a8:	f44f 722a 	mov.w	r2, #680	; 0x2a8
  m_errorCode = code;
   138ac:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   138ae:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD2);
   138b0:	e7ac      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
      if (SDHC_CMDRSP0 != 0X1AA) {
   138b2:	4b37      	ldr	r3, [pc, #220]	; (13990 <SdioCard::begin(SdioConfig)+0x2d0>)
   138b4:	691b      	ldr	r3, [r3, #16]
   138b6:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
   138ba:	d007      	beq.n	138cc <SdioCard::begin(SdioConfig)+0x20c>
  m_errorCode = code;
   138bc:	2106      	movs	r1, #6
  m_errorLine = line;
   138be:	4b35      	ldr	r3, [pc, #212]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   138c0:	f44f 7225 	mov.w	r2, #660	; 0x294
        return sdError(SD_CARD_ERROR_CMD8);
   138c4:	2400      	movs	r4, #0
  m_errorCode = code;
   138c6:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   138c8:	601a      	str	r2, [r3, #0]
        return sdError(SD_CARD_ERROR_CMD8);
   138ca:	e79f      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
      m_version2 = true;
   138cc:	2301      	movs	r3, #1
  arg = m_version2 ? 0X40300000 : 0x00300000;
   138ce:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 13998 <SdioCard::begin(SdioConfig)+0x2d8>
      m_version2 = true;
   138d2:	7033      	strb	r3, [r6, #0]
  arg = m_version2 ? 0X40300000 : 0x00300000;
   138d4:	e7b1      	b.n	1383a <SdioCard::begin(SdioConfig)+0x17a>
  if (!cardCommand(CMD3_XFERTYP, 0)) {
   138d6:	2100      	movs	r1, #0
   138d8:	4833      	ldr	r0, [pc, #204]	; (139a8 <SdioCard::begin(SdioConfig)+0x2e8>)
   138da:	f7ff fb09 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   138de:	4604      	mov	r4, r0
   138e0:	b930      	cbnz	r0, 138f0 <SdioCard::begin(SdioConfig)+0x230>
  m_errorCode = code;
   138e2:	2103      	movs	r1, #3
  m_errorLine = line;
   138e4:	4b2b      	ldr	r3, [pc, #172]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   138e6:	f240 22ab 	movw	r2, #683	; 0x2ab
  m_errorCode = code;
   138ea:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   138ec:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
   138ee:	e78d      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
   138f0:	4e27      	ldr	r6, [pc, #156]	; (13990 <SdioCard::begin(SdioConfig)+0x2d0>)
   138f2:	4b2e      	ldr	r3, [pc, #184]	; (139ac <SdioCard::begin(SdioConfig)+0x2ec>)
   138f4:	6932      	ldr	r2, [r6, #16]
   138f6:	4f2e      	ldr	r7, [pc, #184]	; (139b0 <SdioCard::begin(SdioConfig)+0x2f0>)
   138f8:	4013      	ands	r3, r2
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
   138fa:	492e      	ldr	r1, [pc, #184]	; (139b4 <SdioCard::begin(SdioConfig)+0x2f4>)
   138fc:	482e      	ldr	r0, [pc, #184]	; (139b8 <SdioCard::begin(SdioConfig)+0x2f8>)
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
   138fe:	603b      	str	r3, [r7, #0]
  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
   13900:	f7ff fb42 	bl	12f88 <readReg16(unsigned long, void*)>
   13904:	4604      	mov	r4, r0
   13906:	b930      	cbnz	r0, 13916 <SdioCard::begin(SdioConfig)+0x256>
  m_errorCode = code;
   13908:	2107      	movs	r1, #7
  m_errorLine = line;
   1390a:	4b22      	ldr	r3, [pc, #136]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   1390c:	f44f 722c 	mov.w	r2, #688	; 0x2b0
  m_errorCode = code;
   13910:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   13912:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD9);
   13914:	e77a      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
   13916:	4929      	ldr	r1, [pc, #164]	; (139bc <SdioCard::begin(SdioConfig)+0x2fc>)
   13918:	4829      	ldr	r0, [pc, #164]	; (139c0 <SdioCard::begin(SdioConfig)+0x300>)
   1391a:	f7ff fb35 	bl	12f88 <readReg16(unsigned long, void*)>
   1391e:	4604      	mov	r4, r0
   13920:	b930      	cbnz	r0, 13930 <SdioCard::begin(SdioConfig)+0x270>
  m_errorCode = code;
   13922:	2108      	movs	r1, #8
  m_errorLine = line;
   13924:	4b1b      	ldr	r3, [pc, #108]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   13926:	f240 22b3 	movw	r2, #691	; 0x2b3
  m_errorCode = code;
   1392a:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   1392c:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD10);
   1392e:	e76d      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
   13930:	6839      	ldr	r1, [r7, #0]
   13932:	4824      	ldr	r0, [pc, #144]	; (139c4 <SdioCard::begin(SdioConfig)+0x304>)
   13934:	f7ff fadc 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13938:	4604      	mov	r4, r0
   1393a:	b930      	cbnz	r0, 1394a <SdioCard::begin(SdioConfig)+0x28a>
  m_errorCode = code;
   1393c:	2105      	movs	r1, #5
  m_errorLine = line;
   1393e:	4b15      	ldr	r3, [pc, #84]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   13940:	f240 22b6 	movw	r2, #694	; 0x2b6
  m_errorCode = code;
   13944:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   13946:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD7);
   13948:	e760      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   1394a:	6839      	ldr	r1, [r7, #0]
   1394c:	4813      	ldr	r0, [pc, #76]	; (1399c <SdioCard::begin(SdioConfig)+0x2dc>)
   1394e:	f7ff facf 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13952:	2800      	cmp	r0, #0
   13954:	d140      	bne.n	139d8 <SdioCard::begin(SdioConfig)+0x318>
  m_errorCode = code;
   13956:	2114      	movs	r1, #20
  m_errorLine = line;
   13958:	4b0e      	ldr	r3, [pc, #56]	; (13994 <SdioCard::begin(SdioConfig)+0x2d4>)
   1395a:	f240 22ba 	movw	r2, #698	; 0x2ba
    return sdError(SD_CARD_ERROR_ACMD6);
   1395e:	2400      	movs	r4, #0
  m_errorCode = code;
   13960:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
   13962:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_ACMD6);
   13964:	e752      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
   13966:	bf00      	nop
   13968:	400d8000 	.word	0x400d8000
   1396c:	20003d30 	.word	0x20003d30
   13970:	2000c944 	.word	0x2000c944
   13974:	2000c943 	.word	0x2000c943
   13978:	401f8000 	.word	0x401f8000
   1397c:	01008000 	.word	0x01008000
   13980:	117f000b 	.word	0x117f000b
   13984:	00012b91 	.word	0x00012b91
   13988:	20004000 	.word	0x20004000
   1398c:	e000e400 	.word	0xe000e400
   13990:	402c0000 	.word	0x402c0000
   13994:	20004fc0 	.word	0x20004fc0
   13998:	40300000 	.word	0x40300000
   1399c:	371a0000 	.word	0x371a0000
   139a0:	20005018 	.word	0x20005018
   139a4:	02090000 	.word	0x02090000
   139a8:	031a0000 	.word	0x031a0000
   139ac:	ffff0000 	.word	0xffff0000
   139b0:	2000501c 	.word	0x2000501c
   139b4:	20005008 	.word	0x20005008
   139b8:	09090000 	.word	0x09090000
   139bc:	20004ff8 	.word	0x20004ff8
   139c0:	0a090000 	.word	0x0a090000
   139c4:	071b0000 	.word	0x071b0000
   139c8:	2000c942 	.word	0x2000c942
   139cc:	081a0000 	.word	0x081a0000
   139d0:	29020000 	.word	0x29020000
   139d4:	000f4240 	.word	0x000f4240
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
   139d8:	2102      	movs	r1, #2
   139da:	482e      	ldr	r0, [pc, #184]	; (13a94 <SdioCard::begin(SdioConfig)+0x3d4>)
   139dc:	f7ff fa88 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   139e0:	4604      	mov	r4, r0
   139e2:	2800      	cmp	r0, #0
   139e4:	d0b7      	beq.n	13956 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
   139e6:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
   139e8:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
   139ec:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
   139f0:	4669      	mov	r1, sp
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
   139f2:	f023 0306 	bic.w	r3, r3, #6
   139f6:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
   139f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   139fa:	f043 0302 	orr.w	r3, r3, #2
   139fe:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
   13a00:	6472      	str	r2, [r6, #68]	; 0x44
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
   13a02:	f7ff fc1b 	bl	1323c <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
   13a06:	b118      	cbz	r0, 13a10 <SdioCard::begin(SdioConfig)+0x350>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
   13a08:	f89d 300d 	ldrb.w	r3, [sp, #13]
   13a0c:	079b      	lsls	r3, r3, #30
   13a0e:	d432      	bmi.n	13a76 <SdioCard::begin(SdioConfig)+0x3b6>
    kHzSdClk = 25000;
   13a10:	f246 10a8 	movw	r0, #25000	; 0x61a8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13a14:	4d20      	ldr	r5, [pc, #128]	; (13a98 <SdioCard::begin(SdioConfig)+0x3d8>)
   13a16:	2305      	movs	r3, #5
   13a18:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13a1c:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13a20:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   13a24:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   13a28:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13a2c:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
  setSdclk(kHzSdClk);
   13a30:	f7ff f8d6 	bl	12be0 <setSdclk(unsigned long)>
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13a34:	2300      	movs	r3, #0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13a36:	f247 02b8 	movw	r2, #28856	; 0x70b8
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
   13a3a:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
   13a3e:	f8c5 31d0 	str.w	r3, [r5, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
   13a42:	f8c5 31bc 	str.w	r3, [r5, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
   13a46:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
   13a4a:	f8c5 31c4 	str.w	r3, [r5, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
   13a4e:	f8c5 31c8 	str.w	r3, [r5, #456]	; 0x1c8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   13a52:	f241 03b8 	movw	r3, #4280	; 0x10b8
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
   13a56:	f8c5 23bc 	str.w	r2, [r5, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
   13a5a:	f8c5 23c0 	str.w	r2, [r5, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
   13a5e:	f8c5 23ac 	str.w	r2, [r5, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
   13a62:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
  m_initDone = true;
   13a66:	2301      	movs	r3, #1
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
   13a68:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
   13a6c:	f8c5 23b8 	str.w	r2, [r5, #952]	; 0x3b8
  m_initDone = true;
   13a70:	f888 3000 	strb.w	r3, [r8]
  return true;
   13a74:	e6ca      	b.n	1380c <SdioCard::begin(SdioConfig)+0x14c>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
   13a76:	4669      	mov	r1, sp
   13a78:	4808      	ldr	r0, [pc, #32]	; (13a9c <SdioCard::begin(SdioConfig)+0x3dc>)
   13a7a:	f7ff fbdf 	bl	1323c <cardCMD6(unsigned long, unsigned char*)>
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
   13a7e:	2800      	cmp	r0, #0
   13a80:	d0c6      	beq.n	13a10 <SdioCard::begin(SdioConfig)+0x350>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
   13a82:	f89d 3010 	ldrb.w	r3, [sp, #16]
   13a86:	f003 030f 	and.w	r3, r3, #15
   13a8a:	2b01      	cmp	r3, #1
   13a8c:	d1c0      	bne.n	13a10 <SdioCard::begin(SdioConfig)+0x350>
    kHzSdClk = 50000;
   13a8e:	f24c 3050 	movw	r0, #50000	; 0xc350
   13a92:	e7bf      	b.n	13a14 <SdioCard::begin(SdioConfig)+0x354>
   13a94:	061a0000 	.word	0x061a0000
   13a98:	401f8000 	.word	0x401f8000
   13a9c:	80fffff1 	.word	0x80fffff1

00013aa0 <SdioCard::readData(unsigned char*)>:
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
   13aa0:	4b37      	ldr	r3, [pc, #220]	; (13b80 <SdioCard::readData(unsigned char*)+0xe0>)
   13aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   13aa4:	0592      	lsls	r2, r2, #22
bool SdioCard::readData(uint8_t* dst) {
   13aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aaa:	460f      	mov	r7, r1
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
   13aac:	d40d      	bmi.n	13aca <SdioCard::readData(unsigned char*)+0x2a>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13aae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13ab0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
   13ab4:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
   13ab6:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
   13ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13aba:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
   13abe:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   13ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13ac2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   13ac6:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
   13ac8:	b662      	cpsie	i
  uint32_t m = micros();
   13aca:	f002 fa37 	bl	15f3c <micros>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
   13ace:	4e2c      	ldr	r6, [pc, #176]	; (13b80 <SdioCard::readData(unsigned char*)+0xe0>)
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13ad0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13b98 <SdioCard::readData(unsigned char*)+0xf8>
  uint32_t m = micros();
   13ad4:	4605      	mov	r5, r0
  while (fcn()) {
   13ad6:	e004      	b.n	13ae2 <SdioCard::readData(unsigned char*)+0x42>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13ad8:	f002 fa30 	bl	15f3c <micros>
   13adc:	1b43      	subs	r3, r0, r5
   13ade:	4543      	cmp	r3, r8
   13ae0:	d837      	bhi.n	13b52 <SdioCard::readData(unsigned char*)+0xb2>
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
   13ae2:	6a74      	ldr	r4, [r6, #36]	; 0x24
  while (fcn()) {
   13ae4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
   13ae8:	d0f6      	beq.n	13ad8 <SdioCard::readData(unsigned char*)+0x38>
   13aea:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
   13aee:	4824      	ldr	r0, [pc, #144]	; (13b80 <SdioCard::readData(unsigned char*)+0xe0>)
   13af0:	f507 770f 	add.w	r7, r7, #572	; 0x23c
   13af4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   13af6:	051b      	lsls	r3, r3, #20
   13af8:	d5fc      	bpl.n	13af4 <SdioCard::readData(unsigned char*)+0x54>
   13afa:	f1ac 0340 	sub.w	r3, ip, #64	; 0x40
      p32[i] = SDHC_DATPORT;
   13afe:	6a02      	ldr	r2, [r0, #32]
   13b00:	f843 2f04 	str.w	r2, [r3, #4]!
    for (uint32_t i = 0; i < FIFO_WML; i++) {
   13b04:	459c      	cmp	ip, r3
   13b06:	d1fa      	bne.n	13afe <SdioCard::readData(unsigned char*)+0x5e>
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
   13b08:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
   13b0c:	4567      	cmp	r7, ip
   13b0e:	d1f1      	bne.n	13af4 <SdioCard::readData(unsigned char*)+0x54>
  uint32_t m = micros();
   13b10:	f002 fa14 	bl	15f3c <micros>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   13b14:	4f1a      	ldr	r7, [pc, #104]	; (13b80 <SdioCard::readData(unsigned char*)+0xe0>)
   13b16:	4d1b      	ldr	r5, [pc, #108]	; (13b84 <SdioCard::readData(unsigned char*)+0xe4>)
  uint32_t m = micros();
   13b18:	4606      	mov	r6, r0
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13b1a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 13b98 <SdioCard::readData(unsigned char*)+0xf8>
  while (fcn()) {
   13b1e:	e004      	b.n	13b2a <SdioCard::readData(unsigned char*)+0x8a>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13b20:	f002 fa0c 	bl	15f3c <micros>
   13b24:	1b83      	subs	r3, r0, r6
   13b26:	4543      	cmp	r3, r8
   13b28:	d81d      	bhi.n	13b66 <SdioCard::readData(unsigned char*)+0xc6>
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
   13b2a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
  while (fcn()) {
   13b2c:	402c      	ands	r4, r5
   13b2e:	d0f7      	beq.n	13b20 <SdioCard::readData(unsigned char*)+0x80>
  m_irqstat = SDHC_IRQSTAT;
   13b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   13b32:	4a15      	ldr	r2, [pc, #84]	; (13b88 <SdioCard::readData(unsigned char*)+0xe8>)
   13b34:	6013      	str	r3, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
   13b36:	6813      	ldr	r3, [r2, #0]
   13b38:	633b      	str	r3, [r7, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13b3a:	6813      	ldr	r3, [r2, #0]
   13b3c:	f013 0302 	ands.w	r3, r3, #2
   13b40:	d01b      	beq.n	13b7a <SdioCard::readData(unsigned char*)+0xda>
   13b42:	6812      	ldr	r2, [r2, #0]
   13b44:	4b11      	ldr	r3, [pc, #68]	; (13b8c <SdioCard::readData(unsigned char*)+0xec>)
   13b46:	421a      	tst	r2, r3
   13b48:	bf0c      	ite	eq
   13b4a:	2001      	moveq	r0, #1
   13b4c:	2000      	movne	r0, #0
}
   13b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
   13b52:	490f      	ldr	r1, [pc, #60]	; (13b90 <SdioCard::readData(unsigned char*)+0xf0>)
   13b54:	251a      	movs	r5, #26
  m_errorLine = line;
   13b56:	4b0f      	ldr	r3, [pc, #60]	; (13b94 <SdioCard::readData(unsigned char*)+0xf4>)
   13b58:	f240 3237 	movw	r2, #823	; 0x337
    return sdError(SD_CARD_ERROR_READ_FIFO);
   13b5c:	4620      	mov	r0, r4
  m_errorCode = code;
   13b5e:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
   13b60:	601a      	str	r2, [r3, #0]
}
   13b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  m_errorCode = code;
   13b66:	490a      	ldr	r1, [pc, #40]	; (13b90 <SdioCard::readData(unsigned char*)+0xf0>)
   13b68:	251d      	movs	r5, #29
  m_errorLine = line;
   13b6a:	4b0a      	ldr	r3, [pc, #40]	; (13b94 <SdioCard::readData(unsigned char*)+0xf4>)
   13b6c:	f240 3242 	movw	r2, #834	; 0x342
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
   13b70:	4620      	mov	r0, r4
  m_errorCode = code;
   13b72:	700d      	strb	r5, [r1, #0]
  m_errorLine = line;
   13b74:	601a      	str	r2, [r3, #0]
}
   13b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
   13b7a:	4618      	mov	r0, r3
}
   13b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b80:	402c0000 	.word	0x402c0000
   13b84:	117f0002 	.word	0x117f0002
   13b88:	20005028 	.word	0x20005028
   13b8c:	117f0000 	.word	0x117f0000
   13b90:	20003d30 	.word	0x20003d30
   13b94:	20004fc0 	.word	0x20004fc0
   13b98:	000f4240 	.word	0x000f4240

00013b9c <SdioCard::readStart(unsigned long)>:
bool SdioCard::readStart(uint32_t sector) {
   13b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  m_busyFcn = fcn;
   13ba0:	4b29      	ldr	r3, [pc, #164]	; (13c48 <SdioCard::readStart(unsigned long)+0xac>)
bool SdioCard::readStart(uint32_t sector) {
   13ba2:	4689      	mov	r9, r1
  m_busyFcn = fcn;
   13ba4:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 13c68 <SdioCard::readStart(unsigned long)+0xcc>
   13ba8:	4e28      	ldr	r6, [pc, #160]	; (13c4c <SdioCard::readStart(unsigned long)+0xb0>)
   13baa:	f8ca 3000 	str.w	r3, [sl]
  uint32_t m = micros();
   13bae:	f002 f9c5 	bl	15f3c <micros>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13bb2:	4d27      	ldr	r5, [pc, #156]	; (13c50 <SdioCard::readStart(unsigned long)+0xb4>)
  uint32_t m = micros();
   13bb4:	4604      	mov	r4, r0
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13bb6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 13c6c <SdioCard::readStart(unsigned long)+0xd0>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13bba:	4f26      	ldr	r7, [pc, #152]	; (13c54 <SdioCard::readStart(unsigned long)+0xb8>)
  while (fcn()) {
   13bbc:	e006      	b.n	13bcc <SdioCard::readStart(unsigned long)+0x30>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13bbe:	f002 f9bd 	bl	15f3c <micros>
   13bc2:	1b00      	subs	r0, r0, r4
   13bc4:	42b8      	cmp	r0, r7
   13bc6:	d829      	bhi.n	13c1c <SdioCard::readStart(unsigned long)+0x80>
    yield();
   13bc8:	f004 fd02 	bl	185d0 <yield>
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
   13bcc:	6831      	ldr	r1, [r6, #0]
   13bce:	4628      	mov	r0, r5
   13bd0:	f7ff f98e 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13bd4:	2800      	cmp	r0, #0
   13bd6:	d0f2      	beq.n	13bbe <SdioCard::readStart(unsigned long)+0x22>
   13bd8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (fcn()) {
   13bdc:	05db      	lsls	r3, r3, #23
   13bde:	d5ee      	bpl.n	13bbe <SdioCard::readStart(unsigned long)+0x22>
  m_busyFcn = 0;
   13be0:	2300      	movs	r3, #0
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   13be2:	f44f 7200 	mov.w	r2, #512	; 0x200
  m_busyFcn = 0;
   13be6:	f8ca 3000 	str.w	r3, [sl]
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
   13bea:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   13bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   13bf2:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13bf6:	4b18      	ldr	r3, [pc, #96]	; (13c58 <SdioCard::readStart(unsigned long)+0xbc>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
   13bf8:	f8c8 2004 	str.w	r2, [r8, #4]
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13bfc:	781b      	ldrb	r3, [r3, #0]
   13bfe:	b1cb      	cbz	r3, 13c34 <SdioCard::readStart(unsigned long)+0x98>
   13c00:	4649      	mov	r1, r9
   13c02:	4816      	ldr	r0, [pc, #88]	; (13c5c <SdioCard::readStart(unsigned long)+0xc0>)
   13c04:	f7ff f974 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13c08:	b930      	cbnz	r0, 13c18 <SdioCard::readStart(unsigned long)+0x7c>
  m_errorCode = code;
   13c0a:	4915      	ldr	r1, [pc, #84]	; (13c60 <SdioCard::readStart(unsigned long)+0xc4>)
   13c0c:	240c      	movs	r4, #12
  m_errorLine = line;
   13c0e:	4b15      	ldr	r3, [pc, #84]	; (13c64 <SdioCard::readStart(unsigned long)+0xc8>)
   13c10:	f240 329e 	movw	r2, #926	; 0x39e
  m_errorCode = code;
   13c14:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13c16:	601a      	str	r2, [r3, #0]
}
   13c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  m_errorCode = code;
   13c1c:	4a10      	ldr	r2, [pc, #64]	; (13c60 <SdioCard::readStart(unsigned long)+0xc4>)
   13c1e:	210a      	movs	r1, #10
      m_busyFcn = 0;
   13c20:	2000      	movs	r0, #0
  m_errorLine = line;
   13c22:	4b10      	ldr	r3, [pc, #64]	; (13c64 <SdioCard::readStart(unsigned long)+0xc8>)
  m_errorCode = code;
   13c24:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   13c26:	f240 3292 	movw	r2, #914	; 0x392
      m_busyFcn = 0;
   13c2a:	f8ca 0000 	str.w	r0, [sl]
  m_errorLine = line;
   13c2e:	601a      	str	r2, [r3, #0]
}
   13c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
   13c34:	ea4f 2949 	mov.w	r9, r9, lsl #9
   13c38:	4808      	ldr	r0, [pc, #32]	; (13c5c <SdioCard::readStart(unsigned long)+0xc0>)
   13c3a:	4649      	mov	r1, r9
   13c3c:	f7ff f958 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13c40:	2800      	cmp	r0, #0
   13c42:	d1e9      	bne.n	13c18 <SdioCard::readStart(unsigned long)+0x7c>
   13c44:	e7e1      	b.n	13c0a <SdioCard::readStart(unsigned long)+0x6e>
   13c46:	bf00      	nop
   13c48:	00013085 	.word	0x00013085
   13c4c:	2000501c 	.word	0x2000501c
   13c50:	0d1a0000 	.word	0x0d1a0000
   13c54:	000f4240 	.word	0x000f4240
   13c58:	2000c944 	.word	0x2000c944
   13c5c:	123a0030 	.word	0x123a0030
   13c60:	20003d30 	.word	0x20003d30
   13c64:	20004fc0 	.word	0x20004fc0
   13c68:	20005024 	.word	0x20005024
   13c6c:	402c0000 	.word	0x402c0000

00013c70 <SdioCard::stopTransmission(bool)>:
bool SdioCard::stopTransmission(bool blocking) {
   13c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_curState = IDLE_STATE;
   13c74:	2200      	movs	r2, #0
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13c76:	4c1d      	ldr	r4, [pc, #116]	; (13cec <SdioCard::stopTransmission(bool)+0x7c>)
bool SdioCard::stopTransmission(bool blocking) {
   13c78:	460d      	mov	r5, r1
  m_curState = IDLE_STATE;
   13c7a:	7242      	strb	r2, [r0, #9]
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   13c7c:	4611      	mov	r1, r2
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13c7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   13c80:	481b      	ldr	r0, [pc, #108]	; (13cf0 <SdioCard::stopTransmission(bool)+0x80>)
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
   13c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   13c86:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
   13c88:	f7ff f932 	bl	12ef0 <cardCommand(unsigned long, unsigned long)>
   13c8c:	b940      	cbnz	r0, 13ca0 <SdioCard::stopTransmission(bool)+0x30>
  m_errorCode = code;
   13c8e:	4919      	ldr	r1, [pc, #100]	; (13cf4 <SdioCard::stopTransmission(bool)+0x84>)
   13c90:	2409      	movs	r4, #9
  m_errorLine = line;
   13c92:	4b19      	ldr	r3, [pc, #100]	; (13cf8 <SdioCard::stopTransmission(bool)+0x88>)
   13c94:	f44f 726d 	mov.w	r2, #948	; 0x3b4
  m_errorCode = code;
   13c98:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
   13c9a:	601a      	str	r2, [r3, #0]
}
   13c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (blocking) {
   13ca0:	2d00      	cmp	r5, #0
   13ca2:	d0fb      	beq.n	13c9c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = fcn;
   13ca4:	4b15      	ldr	r3, [pc, #84]	; (13cfc <SdioCard::stopTransmission(bool)+0x8c>)
   13ca6:	4e16      	ldr	r6, [pc, #88]	; (13d00 <SdioCard::stopTransmission(bool)+0x90>)
   13ca8:	6033      	str	r3, [r6, #0]
  uint32_t m = micros();
   13caa:	f002 f947 	bl	15f3c <micros>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   13cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
  uint32_t m = micros();
   13cb0:	4607      	mov	r7, r0
  while (fcn()) {
   13cb2:	01da      	lsls	r2, r3, #7
   13cb4:	d416      	bmi.n	13ce4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13cb6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 13d04 <SdioCard::stopTransmission(bool)+0x94>
   13cba:	e004      	b.n	13cc6 <SdioCard::stopTransmission(bool)+0x56>
    yield();
   13cbc:	f004 fc88 	bl	185d0 <yield>
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
   13cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
  while (fcn()) {
   13cc2:	01db      	lsls	r3, r3, #7
   13cc4:	d40e      	bmi.n	13ce4 <SdioCard::stopTransmission(bool)+0x74>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
   13cc6:	f002 f939 	bl	15f3c <micros>
   13cca:	1bc0      	subs	r0, r0, r7
   13ccc:	4540      	cmp	r0, r8
   13cce:	d9f5      	bls.n	13cbc <SdioCard::stopTransmission(bool)+0x4c>
  m_errorCode = code;
   13cd0:	4a08      	ldr	r2, [pc, #32]	; (13cf4 <SdioCard::stopTransmission(bool)+0x84>)
   13cd2:	210a      	movs	r1, #10
      m_busyFcn = 0;
   13cd4:	2000      	movs	r0, #0
  m_errorLine = line;
   13cd6:	4b08      	ldr	r3, [pc, #32]	; (13cf8 <SdioCard::stopTransmission(bool)+0x88>)
  m_errorCode = code;
   13cd8:	7011      	strb	r1, [r2, #0]
  m_errorLine = line;
   13cda:	f44f 726e 	mov.w	r2, #952	; 0x3b8
      m_busyFcn = 0;
   13cde:	6030      	str	r0, [r6, #0]
  m_errorLine = line;
   13ce0:	601a      	str	r2, [r3, #0]
      return sdError(SD_CARD_ERROR_CMD13);
   13ce2:	e7db      	b.n	13c9c <SdioCard::stopTransmission(bool)+0x2c>
  m_busyFcn = 0;
   13ce4:	2300      	movs	r3, #0
  return true;
   13ce6:	4628      	mov	r0, r5
  m_busyFcn = 0;
   13ce8:	6033      	str	r3, [r6, #0]
  return false;  // Caller will set errorCode.
   13cea:	e7d7      	b.n	13c9c <SdioCard::stopTransmission(bool)+0x2c>
   13cec:	402c0000 	.word	0x402c0000
   13cf0:	0cdb0000 	.word	0x0cdb0000
   13cf4:	20003d30 	.word	0x20003d30
   13cf8:	20004fc0 	.word	0x20004fc0
   13cfc:	00012bc1 	.word	0x00012bc1
   13d00:	20005024 	.word	0x20005024
   13d04:	000f4240 	.word	0x000f4240

00013d08 <SdioCard::syncDevice()>:
  if (!m_transferActive) {
   13d08:	4b0a      	ldr	r3, [pc, #40]	; (13d34 <SdioCard::syncDevice()+0x2c>)
   13d0a:	781b      	ldrb	r3, [r3, #0]
bool SdioCard::syncDevice() {
   13d0c:	b510      	push	{r4, lr}
   13d0e:	4604      	mov	r4, r0
  if (!m_transferActive) {
   13d10:	b91b      	cbnz	r3, 13d1a <SdioCard::syncDevice()+0x12>
  if (m_curState != IDLE_STATE) {
   13d12:	7a63      	ldrb	r3, [r4, #9]
   13d14:	b943      	cbnz	r3, 13d28 <SdioCard::syncDevice()+0x20>
  return true;
   13d16:	2001      	movs	r0, #1
}
   13d18:	bd10      	pop	{r4, pc}
   13d1a:	f7ff f84b 	bl	12db4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   13d1e:	2800      	cmp	r0, #0
   13d20:	d0fa      	beq.n	13d18 <SdioCard::syncDevice()+0x10>
  if (m_curState != IDLE_STATE) {
   13d22:	7a63      	ldrb	r3, [r4, #9]
   13d24:	2b00      	cmp	r3, #0
   13d26:	d0f6      	beq.n	13d16 <SdioCard::syncDevice()+0xe>
    return stopTransmission(true);
   13d28:	4620      	mov	r0, r4
   13d2a:	2101      	movs	r1, #1
}
   13d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return stopTransmission(true);
   13d30:	f7ff bf9e 	b.w	13c70 <SdioCard::stopTransmission(bool)>
   13d34:	2000c945 	.word	0x2000c945

00013d38 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
   13d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13d3c:	4604      	mov	r4, r0
   13d3e:	7a00      	ldrb	r0, [r0, #8]
   13d40:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   13d44:	4616      	mov	r6, r2
  if (m_sdioConfig.useDma()) {
   13d46:	f010 0501 	ands.w	r5, r0, #1
   13d4a:	d013      	beq.n	13d74 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
   13d4c:	0793      	lsls	r3, r2, #30
   13d4e:	d03c      	beq.n	13dca <SdioCard::readSector(unsigned long, unsigned char*)+0x92>
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
   13d50:	2301      	movs	r3, #1
   13d52:	4838      	ldr	r0, [pc, #224]	; (13e34 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
   13d54:	466a      	mov	r2, sp
   13d56:	f7ff fb7d 	bl	13454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   13d5a:	2800      	cmp	r0, #0
   13d5c:	d03a      	beq.n	13dd4 <SdioCard::readSector(unsigned long, unsigned char*)+0x9c>
      memcpy(dst, aligned, 512);
   13d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   13d62:	4669      	mov	r1, sp
   13d64:	4630      	mov	r0, r6
   13d66:	f002 fc19 	bl	1659c <memcpy>
}
   13d6a:	4628      	mov	r0, r5
   13d6c:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
   13d74:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 13e44 <SdioCard::readSector(unsigned long, unsigned char*)+0x10c>
   13d78:	460f      	mov	r7, r1
   13d7a:	f898 3000 	ldrb.w	r3, [r8]
   13d7e:	2b00      	cmp	r3, #0
   13d80:	d135      	bne.n	13dee <SdioCard::readSector(unsigned long, unsigned char*)+0xb6>
    if (m_curState != READ_STATE || sector != m_curSector) {
   13d82:	7a63      	ldrb	r3, [r4, #9]
   13d84:	2b01      	cmp	r3, #1
   13d86:	d039      	beq.n	13dfc <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>
      if (!syncDevice()) {
   13d88:	6822      	ldr	r2, [r4, #0]
   13d8a:	492b      	ldr	r1, [pc, #172]	; (13e38 <SdioCard::readSector(unsigned long, unsigned char*)+0x100>)
   13d8c:	6a12      	ldr	r2, [r2, #32]
   13d8e:	428a      	cmp	r2, r1
   13d90:	d14a      	bne.n	13e28 <SdioCard::readSector(unsigned long, unsigned char*)+0xf0>
  if (!m_transferActive) {
   13d92:	f898 2000 	ldrb.w	r2, [r8]
   13d96:	2a00      	cmp	r2, #0
   13d98:	d134      	bne.n	13e04 <SdioCard::readSector(unsigned long, unsigned char*)+0xcc>
  if (m_curState != IDLE_STATE) {
   13d9a:	2b00      	cmp	r3, #0
   13d9c:	d139      	bne.n	13e12 <SdioCard::readSector(unsigned long, unsigned char*)+0xda>
      if (!readStart(sector)) {
   13d9e:	4639      	mov	r1, r7
   13da0:	4620      	mov	r0, r4
   13da2:	f7ff fefb 	bl	13b9c <SdioCard::readStart(unsigned long)>
   13da6:	b1e8      	cbz	r0, 13de4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
      m_curState = READ_STATE;
   13da8:	2301      	movs	r3, #1
      m_curSector = sector;
   13daa:	6067      	str	r7, [r4, #4]
      m_curState = READ_STATE;
   13dac:	7263      	strb	r3, [r4, #9]
    if (!readData(dst)) {
   13dae:	4631      	mov	r1, r6
   13db0:	4620      	mov	r0, r4
   13db2:	f7ff fe75 	bl	13aa0 <SdioCard::readData(unsigned char*)>
   13db6:	b1a8      	cbz	r0, 13de4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    m_curSector++;
   13db8:	6863      	ldr	r3, [r4, #4]
  return true;
   13dba:	4605      	mov	r5, r0
    m_curSector++;
   13dbc:	3301      	adds	r3, #1
}
   13dbe:	4628      	mov	r0, r5
    m_curSector++;
   13dc0:	6063      	str	r3, [r4, #4]
}
   13dc2:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
   13dca:	2301      	movs	r3, #1
   13dcc:	4819      	ldr	r0, [pc, #100]	; (13e34 <SdioCard::readSector(unsigned long, unsigned char*)+0xfc>)
   13dce:	f7ff fb41 	bl	13454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   13dd2:	b938      	cbnz	r0, 13de4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  m_errorCode = code;
   13dd4:	4919      	ldr	r1, [pc, #100]	; (13e3c <SdioCard::readSector(unsigned long, unsigned char*)+0x104>)
   13dd6:	200b      	movs	r0, #11
  m_errorLine = line;
   13dd8:	4b19      	ldr	r3, [pc, #100]	; (13e40 <SdioCard::readSector(unsigned long, unsigned char*)+0x108>)
   13dda:	f240 3255 	movw	r2, #853	; 0x355
      return sdError(SD_CARD_ERROR_CMD17);
   13dde:	2500      	movs	r5, #0
  m_errorCode = code;
   13de0:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   13de2:	601a      	str	r2, [r3, #0]
}
   13de4:	4628      	mov	r0, r5
   13de6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13dea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13dee:	f7fe ffe1 	bl	12db4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
   13df2:	2800      	cmp	r0, #0
   13df4:	d0f6      	beq.n	13de4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
    if (m_curState != READ_STATE || sector != m_curSector) {
   13df6:	7a63      	ldrb	r3, [r4, #9]
   13df8:	2b01      	cmp	r3, #1
   13dfa:	d1c5      	bne.n	13d88 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
   13dfc:	6862      	ldr	r2, [r4, #4]
   13dfe:	42ba      	cmp	r2, r7
   13e00:	d1c2      	bne.n	13d88 <SdioCard::readSector(unsigned long, unsigned char*)+0x50>
   13e02:	e7d4      	b.n	13dae <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
   13e04:	f7fe ffd6 	bl	12db4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   13e08:	2800      	cmp	r0, #0
   13e0a:	d0eb      	beq.n	13de4 <SdioCard::readSector(unsigned long, unsigned char*)+0xac>
  if (m_curState != IDLE_STATE) {
   13e0c:	7a63      	ldrb	r3, [r4, #9]
   13e0e:	2b00      	cmp	r3, #0
   13e10:	d0c5      	beq.n	13d9e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
    return stopTransmission(true);
   13e12:	2101      	movs	r1, #1
   13e14:	4620      	mov	r0, r4
   13e16:	f7ff ff2b 	bl	13c70 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
   13e1a:	2800      	cmp	r0, #0
   13e1c:	d1bf      	bne.n	13d9e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
}
   13e1e:	4628      	mov	r0, r5
   13e20:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!syncDevice()) {
   13e28:	4620      	mov	r0, r4
   13e2a:	4790      	blx	r2
   13e2c:	2800      	cmp	r0, #0
   13e2e:	d0f6      	beq.n	13e1e <SdioCard::readSector(unsigned long, unsigned char*)+0xe6>
   13e30:	e7b5      	b.n	13d9e <SdioCard::readSector(unsigned long, unsigned char*)+0x66>
   13e32:	bf00      	nop
   13e34:	113a0011 	.word	0x113a0011
   13e38:	00013d09 	.word	0x00013d09
   13e3c:	20003d30 	.word	0x20003d30
   13e40:	20004fc0 	.word	0x20004fc0
   13e44:	2000c945 	.word	0x2000c945

00013e48 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
   13e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e4c:	7a04      	ldrb	r4, [r0, #8]
   13e4e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
   13e52:	460f      	mov	r7, r1
   13e54:	4690      	mov	r8, r2
  if (m_sdioConfig.useDma()) {
   13e56:	f014 0401 	ands.w	r4, r4, #1
   13e5a:	d01d      	beq.n	13e98 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x50>
    if (3 & (uint32_t)src) {
   13e5c:	f012 0f03 	tst.w	r2, #3
   13e60:	d006      	beq.n	13e70 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x28>
      memcpy(aligned, src, 512);
   13e62:	4668      	mov	r0, sp
   13e64:	4611      	mov	r1, r2
   13e66:	f44f 7200 	mov.w	r2, #512	; 0x200
      ptr = aligned;
   13e6a:	4680      	mov	r8, r0
      memcpy(aligned, src, 512);
   13e6c:	f002 fb96 	bl	1659c <memcpy>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
   13e70:	2301      	movs	r3, #1
   13e72:	4642      	mov	r2, r8
   13e74:	4639      	mov	r1, r7
   13e76:	482c      	ldr	r0, [pc, #176]	; (13f28 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe0>)
   13e78:	f7ff faec 	bl	13454 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
   13e7c:	4604      	mov	r4, r0
   13e7e:	b930      	cbnz	r0, 13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  m_errorCode = code;
   13e80:	492a      	ldr	r1, [pc, #168]	; (13f2c <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe4>)
   13e82:	200d      	movs	r0, #13
  m_errorLine = line;
   13e84:	4b2a      	ldr	r3, [pc, #168]	; (13f30 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xe8>)
   13e86:	f240 32f2 	movw	r2, #1010	; 0x3f2
  m_errorCode = code;
   13e8a:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
   13e8c:	601a      	str	r2, [r3, #0]
}
   13e8e:	4620      	mov	r0, r4
   13e90:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (!m_transferActive) {
   13e98:	4d26      	ldr	r5, [pc, #152]	; (13f34 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xec>)
   13e9a:	4606      	mov	r6, r0
   13e9c:	782b      	ldrb	r3, [r5, #0]
   13e9e:	bb2b      	cbnz	r3, 13eec <SdioCard::writeSector(unsigned long, unsigned char const*)+0xa4>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
   13ea0:	7a73      	ldrb	r3, [r6, #9]
   13ea2:	2b02      	cmp	r3, #2
   13ea4:	d029      	beq.n	13efa <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb2>
      if (!syncDevice()) {
   13ea6:	6832      	ldr	r2, [r6, #0]
   13ea8:	4923      	ldr	r1, [pc, #140]	; (13f38 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xf0>)
   13eaa:	6a12      	ldr	r2, [r2, #32]
   13eac:	428a      	cmp	r2, r1
   13eae:	d136      	bne.n	13f1e <SdioCard::writeSector(unsigned long, unsigned char const*)+0xd6>
  if (!m_transferActive) {
   13eb0:	782a      	ldrb	r2, [r5, #0]
   13eb2:	bb32      	cbnz	r2, 13f02 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xba>
  if (m_curState != IDLE_STATE) {
   13eb4:	2b00      	cmp	r3, #0
   13eb6:	d12b      	bne.n	13f10 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xc8>
      if (!writeStart(sector )) {
   13eb8:	6833      	ldr	r3, [r6, #0]
   13eba:	4639      	mov	r1, r7
   13ebc:	4630      	mov	r0, r6
   13ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   13ec0:	4798      	blx	r3
   13ec2:	2800      	cmp	r0, #0
   13ec4:	d0e3      	beq.n	13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
      m_curState = WRITE_STATE;
   13ec6:	2302      	movs	r3, #2
      m_curSector = sector;
   13ec8:	6077      	str	r7, [r6, #4]
      m_curState = WRITE_STATE;
   13eca:	7273      	strb	r3, [r6, #9]
    if (!writeData(src)) {
   13ecc:	6833      	ldr	r3, [r6, #0]
   13ece:	4641      	mov	r1, r8
   13ed0:	4630      	mov	r0, r6
   13ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13ed4:	4798      	blx	r3
   13ed6:	2800      	cmp	r0, #0
   13ed8:	d0d9      	beq.n	13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    m_curSector++;
   13eda:	6873      	ldr	r3, [r6, #4]
  return true;
   13edc:	4604      	mov	r4, r0
    m_curSector++;
   13ede:	3301      	adds	r3, #1
}
   13ee0:	4620      	mov	r0, r4
    m_curSector++;
   13ee2:	6073      	str	r3, [r6, #4]
}
   13ee4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
   13ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13eec:	f7fe ff62 	bl	12db4 <waitTransferComplete() [clone .part.0]>
    if (!waitTransferComplete()) {
   13ef0:	2800      	cmp	r0, #0
   13ef2:	d0cc      	beq.n	13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
    if (m_curState != WRITE_STATE || m_curSector != sector) {
   13ef4:	7a73      	ldrb	r3, [r6, #9]
   13ef6:	2b02      	cmp	r3, #2
   13ef8:	d1d5      	bne.n	13ea6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
   13efa:	6872      	ldr	r2, [r6, #4]
   13efc:	42ba      	cmp	r2, r7
   13efe:	d1d2      	bne.n	13ea6 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
   13f00:	e7e4      	b.n	13ecc <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
   13f02:	f7fe ff57 	bl	12db4 <waitTransferComplete() [clone .part.0]>
  if (!waitTransferComplete()) {
   13f06:	2800      	cmp	r0, #0
   13f08:	d0c1      	beq.n	13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
  if (m_curState != IDLE_STATE) {
   13f0a:	7a73      	ldrb	r3, [r6, #9]
   13f0c:	2b00      	cmp	r3, #0
   13f0e:	d0d3      	beq.n	13eb8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
    return stopTransmission(true);
   13f10:	2101      	movs	r1, #1
   13f12:	4630      	mov	r0, r6
   13f14:	f7ff feac 	bl	13c70 <SdioCard::stopTransmission(bool)>
      if (!syncDevice()) {
   13f18:	2800      	cmp	r0, #0
   13f1a:	d0b8      	beq.n	13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
   13f1c:	e7cc      	b.n	13eb8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
   13f1e:	4630      	mov	r0, r6
   13f20:	4790      	blx	r2
   13f22:	2800      	cmp	r0, #0
   13f24:	d0b3      	beq.n	13e8e <SdioCard::writeSector(unsigned long, unsigned char const*)+0x46>
   13f26:	e7c7      	b.n	13eb8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x70>
   13f28:	183a0001 	.word	0x183a0001
   13f2c:	20003d30 	.word	0x20003d30
   13f30:	20004fc0 	.word	0x20004fc0
   13f34:	2000c945 	.word	0x2000c945
   13f38:	00013d09 	.word	0x00013d09

00013f3c <sdCsInit(unsigned char)>:
#include "SdSpiDriver.h"
#if ENABLE_ARDUINO_FEATURES
#if SD_CHIP_SELECT_MODE == 0
//------------------------------------------------------------------------------
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
   13f3c:	2101      	movs	r1, #1
   13f3e:	f002 b863 	b.w	16008 <pinMode>
   13f42:	bf00      	nop

00013f44 <sdCsWrite(unsigned char, bool)>:
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
   13f44:	f002 b824 	b.w	15f90 <digitalWrite>

00013f48 <SdSpiArduinoDriver::activate()>:
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
   13f48:	b508      	push	{r3, lr}
  m_spi->beginTransaction(m_spiSettings);
   13f4a:	4603      	mov	r3, r0
   13f4c:	f853 0b04 	ldr.w	r0, [r3], #4
   13f50:	e893 0006 	ldmia.w	r3, {r1, r2}
   13f54:	f7f7 fcf6 	bl	b944 <SPIClass::beginTransaction(SPISettings)>
}
   13f58:	bd08      	pop	{r3, pc}
   13f5a:	bf00      	nop

00013f5c <SdSpiArduinoDriver::begin(SdSpiConfig)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::begin(SdSpiConfig spiConfig) {
   13f5c:	b084      	sub	sp, #16
   13f5e:	f10d 0c10 	add.w	ip, sp, #16
   13f62:	e90c 000e 	stmdb	ip, {r1, r2, r3}
   13f66:	4602      	mov	r2, r0
  if (spiConfig.spiPort) {
   13f68:	b123      	cbz	r3, 13f74 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x18>
    m_spi->setSCK(SDFAT_SDCARD_SCK_PIN);
#endif  // defined(SDFAT_SDCARD_SPI) && defined(SDFAT_SDCARD_SS_PIN)
  } else {
    m_spi = &SPI;
  }
  m_spi->begin();
   13f6a:	4618      	mov	r0, r3
   13f6c:	6013      	str	r3, [r2, #0]
}
   13f6e:	b004      	add	sp, #16
  m_spi->begin();
   13f70:	f7f7 b97a 	b.w	b268 <SPIClass::begin()>
    m_spi = &SPI;
   13f74:	4b02      	ldr	r3, [pc, #8]	; (13f80 <SdSpiArduinoDriver::begin(SdSpiConfig)+0x24>)
  m_spi->begin();
   13f76:	4618      	mov	r0, r3
   13f78:	6013      	str	r3, [r2, #0]
}
   13f7a:	b004      	add	sp, #16
  m_spi->begin();
   13f7c:	f7f7 b974 	b.w	b268 <SPIClass::begin()>
   13f80:	20004acc 	.word	0x20004acc

00013f84 <SdSpiArduinoDriver::deactivate()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
   13f84:	6802      	ldr	r2, [r0, #0]
		if (interruptMasksUsed) {
   13f86:	7cd3      	ldrb	r3, [r2, #19]
   13f88:	b313      	cbz	r3, 13fd0 <SdSpiArduinoDriver::deactivate()+0x4c>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
   13f8a:	07d8      	lsls	r0, r3, #31
   13f8c:	d504      	bpl.n	13f98 <SdSpiArduinoDriver::deactivate()+0x14>
   13f8e:	6a90      	ldr	r0, [r2, #40]	; 0x28
   13f90:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   13f94:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
   13f98:	0799      	lsls	r1, r3, #30
   13f9a:	d504      	bpl.n	13fa6 <SdSpiArduinoDriver::deactivate()+0x22>
   13f9c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   13f9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   13fa2:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
   13fa6:	0758      	lsls	r0, r3, #29
   13fa8:	d504      	bpl.n	13fb4 <SdSpiArduinoDriver::deactivate()+0x30>
   13faa:	6b10      	ldr	r0, [r2, #48]	; 0x30
   13fac:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   13fb0:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
   13fb4:	0719      	lsls	r1, r3, #28
   13fb6:	d504      	bpl.n	13fc2 <SdSpiArduinoDriver::deactivate()+0x3e>
   13fb8:	6b50      	ldr	r0, [r2, #52]	; 0x34
   13fba:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   13fbe:	f8c1 010c 	str.w	r0, [r1, #268]	; 0x10c
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
   13fc2:	06db      	lsls	r3, r3, #27
   13fc4:	d504      	bpl.n	13fd0 <SdSpiArduinoDriver::deactivate()+0x4c>
   13fc6:	6b92      	ldr	r2, [r2, #56]	; 0x38
   13fc8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   13fcc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   13fd0:	4770      	bx	lr
   13fd2:	bf00      	nop

00013fd4 <SdSpiArduinoDriver::end()>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::end() {
  m_spi->end();
   13fd4:	6800      	ldr	r0, [r0, #0]
   13fd6:	f7f7 ba65 	b.w	b4a4 <SPIClass::end()>
   13fda:	bf00      	nop

00013fdc <SdSpiArduinoDriver::receive()>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   13fdc:	6802      	ldr	r2, [r0, #0]
		port().TDR = data;
   13fde:	23ff      	movs	r3, #255	; 0xff
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   13fe0:	6812      	ldr	r2, [r2, #0]
		port().TDR = data;
   13fe2:	6653      	str	r3, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   13fe4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   13fe6:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   13fea:	d0fb      	beq.n	13fe4 <SdSpiArduinoDriver::receive()+0x8>
   13fec:	6f50      	ldr	r0, [r2, #116]	; 0x74
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
  return m_spi->transfer(0XFF);
}
   13fee:	b2c0      	uxtb	r0, r0
   13ff0:	4770      	bx	lr
   13ff2:	bf00      	nop

00013ff4 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
   13ff4:	b530      	push	{r4, r5, lr}
   13ff6:	460c      	mov	r4, r1
   13ff8:	b083      	sub	sp, #12
   13ffa:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
   13ffc:	21ff      	movs	r1, #255	; 0xff
   13ffe:	4620      	mov	r0, r4
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
   14000:	9201      	str	r2, [sp, #4]
  memset(buf, 0XFF, count);
   14002:	f00e fa6d 	bl	224e0 <memset>
		transfer(buf, buf, count);
   14006:	6828      	ldr	r0, [r5, #0]
   14008:	9b01      	ldr	r3, [sp, #4]
   1400a:	4622      	mov	r2, r4
   1400c:	4621      	mov	r1, r4
   1400e:	f7f7 fa45 	bl	b49c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
   14012:	2000      	movs	r0, #0
   14014:	b003      	add	sp, #12
   14016:	bd30      	pop	{r4, r5, pc}

00014018 <SdSpiArduinoDriver::send(unsigned char)>:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14018:	6803      	ldr	r3, [r0, #0]
   1401a:	681a      	ldr	r2, [r3, #0]
		port().TDR = data;
   1401c:	6651      	str	r1, [r2, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1401e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   14020:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14024:	d0fb      	beq.n	1401e <SdSpiArduinoDriver::send(unsigned char)+0x6>
   14026:	6f53      	ldr	r3, [r2, #116]	; 0x74
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
   14028:	4770      	bx	lr
   1402a:	bf00      	nop

0001402c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
   1402c:	1e53      	subs	r3, r2, #1
   1402e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
   14032:	b530      	push	{r4, r5, lr}
   14034:	4614      	mov	r4, r2
   14036:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
   1403a:	4605      	mov	r5, r0
  if (0 < count && count <= 512) {
   1403c:	d311      	bcc.n	14062 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x36>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
   1403e:	b16a      	cbz	r2, 1405c <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x30>
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
   14040:	6803      	ldr	r3, [r0, #0]
   14042:	1e48      	subs	r0, r1, #1
   14044:	6819      	ldr	r1, [r3, #0]
   14046:	1882      	adds	r2, r0, r2
		port().TDR = data;
   14048:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   1404c:	664b      	str	r3, [r1, #100]	; 0x64
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
   1404e:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
   14050:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
   14054:	d0fb      	beq.n	1404e <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x22>
   14056:	4290      	cmp	r0, r2
   14058:	6f4b      	ldr	r3, [r1, #116]	; 0x74
   1405a:	d1f5      	bne.n	14048 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1c>
    m_spi->transfer(buf[i]);
  }
}
   1405c:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   14060:	bd30      	pop	{r4, r5, pc}
    memcpy(tmp, buf, count);
   14062:	4668      	mov	r0, sp
   14064:	f002 fa9a 	bl	1659c <memcpy>
		transfer(buf, buf, count);
   14068:	466a      	mov	r2, sp
   1406a:	4623      	mov	r3, r4
   1406c:	6828      	ldr	r0, [r5, #0]
   1406e:	4611      	mov	r1, r2
   14070:	f7f7 fa14 	bl	b49c <SPIClass::transfer(void const*, void*, unsigned int)>
}
   14074:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
   14078:	bd30      	pop	{r4, r5, pc}
   1407a:	bf00      	nop

0001407c <FsCache::sync()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
   1407c:	b530      	push	{r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   1407e:	7803      	ldrb	r3, [r0, #0]
bool FsCache::sync() {
   14080:	b083      	sub	sp, #12
  if (m_status & CACHE_STATUS_DIRTY) {
   14082:	07dc      	lsls	r4, r3, #31
   14084:	d51d      	bpl.n	140c2 <FsCache::sync()+0x46>
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
   14086:	4604      	mov	r4, r0
   14088:	6840      	ldr	r0, [r0, #4]
   1408a:	f104 0210 	add.w	r2, r4, #16
   1408e:	6803      	ldr	r3, [r0, #0]
   14090:	68e1      	ldr	r1, [r4, #12]
   14092:	9201      	str	r2, [sp, #4]
   14094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   14096:	4798      	blx	r3
   14098:	9a01      	ldr	r2, [sp, #4]
   1409a:	4605      	mov	r5, r0
   1409c:	b1a8      	cbz	r0, 140ca <FsCache::sync()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   1409e:	7823      	ldrb	r3, [r4, #0]
   140a0:	0799      	lsls	r1, r3, #30
   140a2:	d508      	bpl.n	140b6 <FsCache::sync()+0x3a>
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
   140a4:	6860      	ldr	r0, [r4, #4]
      uint32_t sector = m_sector + m_mirrorOffset;
   140a6:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
      if (!m_blockDev->writeSector(sector, m_buffer)) {
   140aa:	4419      	add	r1, r3
   140ac:	6803      	ldr	r3, [r0, #0]
   140ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   140b0:	4798      	blx	r3
   140b2:	b150      	cbz	r0, 140ca <FsCache::sync()+0x4e>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
   140b4:	7823      	ldrb	r3, [r4, #0]
   140b6:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
   140ba:	4628      	mov	r0, r5
    m_status &= ~CACHE_STATUS_DIRTY;
   140bc:	7023      	strb	r3, [r4, #0]
}
   140be:	b003      	add	sp, #12
   140c0:	bd30      	pop	{r4, r5, pc}
  return true;
   140c2:	2501      	movs	r5, #1
}
   140c4:	4628      	mov	r0, r5
   140c6:	b003      	add	sp, #12
   140c8:	bd30      	pop	{r4, r5, pc}
  return false;
   140ca:	2500      	movs	r5, #0
}
   140cc:	4628      	mov	r0, r5
   140ce:	b003      	add	sp, #12
   140d0:	bd30      	pop	{r4, r5, pc}
   140d2:	bf00      	nop

000140d4 <FsCache::prepare(unsigned long, unsigned char)>:
uint8_t* FsCache::prepare(uint32_t sector, uint8_t option) {
   140d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
   140d6:	6843      	ldr	r3, [r0, #4]
   140d8:	b30b      	cbz	r3, 1411e <FsCache::prepare(unsigned long, unsigned char)+0x4a>
  if (m_sector != sector) {
   140da:	68c3      	ldr	r3, [r0, #12]
   140dc:	4604      	mov	r4, r0
   140de:	460f      	mov	r7, r1
   140e0:	4615      	mov	r5, r2
   140e2:	428b      	cmp	r3, r1
   140e4:	d106      	bne.n	140f4 <FsCache::prepare(unsigned long, unsigned char)+0x20>
  m_status |= option & CACHE_STATUS_MASK;
   140e6:	f810 3b10 	ldrb.w	r3, [r0], #16
   140ea:	f005 0503 	and.w	r5, r5, #3
   140ee:	432b      	orrs	r3, r5
   140f0:	7023      	strb	r3, [r4, #0]
}
   140f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
   140f4:	f7ff ffc2 	bl	1407c <FsCache::sync()>
   140f8:	b188      	cbz	r0, 1411e <FsCache::prepare(unsigned long, unsigned char)+0x4a>
    if (!(option & CACHE_OPTION_NO_READ)) {
   140fa:	076b      	lsls	r3, r5, #29
   140fc:	d505      	bpl.n	1410a <FsCache::prepare(unsigned long, unsigned char)+0x36>
   140fe:	f104 0610 	add.w	r6, r4, #16
      if (!m_blockDev->readSector(sector, m_buffer)) {
   14102:	4630      	mov	r0, r6
    m_sector = sector;
   14104:	2300      	movs	r3, #0
   14106:	60e7      	str	r7, [r4, #12]
   14108:	e7ef      	b.n	140ea <FsCache::prepare(unsigned long, unsigned char)+0x16>
      if (!m_blockDev->readSector(sector, m_buffer)) {
   1410a:	6860      	ldr	r0, [r4, #4]
   1410c:	f104 0610 	add.w	r6, r4, #16
   14110:	4639      	mov	r1, r7
   14112:	6803      	ldr	r3, [r0, #0]
   14114:	4632      	mov	r2, r6
   14116:	691b      	ldr	r3, [r3, #16]
   14118:	4798      	blx	r3
   1411a:	2800      	cmp	r0, #0
   1411c:	d1f1      	bne.n	14102 <FsCache::prepare(unsigned long, unsigned char)+0x2e>
  return nullptr;
   1411e:	2000      	movs	r0, #0
}
   14120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14122:	bf00      	nop

00014124 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)>:
  *ms10 = 0;
   14124:	f04f 0c00 	mov.w	ip, #0
  FsDateTime::callback2(date, time);
   14128:	4b02      	ldr	r3, [pc, #8]	; (14134 <dateTimeMs10(unsigned short*, unsigned short*, unsigned char*)+0x10>)
  *ms10 = 0;
   1412a:	f882 c000 	strb.w	ip, [r2]
  FsDateTime::callback2(date, time);
   1412e:	681b      	ldr	r3, [r3, #0]
   14130:	4718      	bx	r3
   14132:	bf00      	nop
   14134:	20005030 	.word	0x20005030

00014138 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))>:
    callback = dateTimeMs10;
   14138:	4a02      	ldr	r2, [pc, #8]	; (14144 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0xc>)
   1413a:	4903      	ldr	r1, [pc, #12]	; (14148 <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x10>)
    callback2 = dateTime;
   1413c:	4b03      	ldr	r3, [pc, #12]	; (1414c <FsDateTime::setCallback(void (*)(unsigned short*, unsigned short*))+0x14>)
    callback = dateTimeMs10;
   1413e:	6011      	str	r1, [r2, #0]
    callback2 = dateTime;
   14140:	6018      	str	r0, [r3, #0]
  }
   14142:	4770      	bx	lr
   14144:	2000502c 	.word	0x2000502c
   14148:	00014125 	.word	0x00014125
   1414c:	20005030 	.word	0x20005030

00014150 <FsName::get16()>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsName.h"
#include "FsUtf.h"
#if USE_UTF8_LONG_NAMES
uint16_t FsName::get16() {
   14150:	b510      	push	{r4, lr}
   14152:	4604      	mov	r4, r0
  uint16_t rtn;
  if (ls) {
   14154:	8980      	ldrh	r0, [r0, #12]
uint16_t FsName::get16() {
   14156:	b082      	sub	sp, #8
  if (ls) {
   14158:	b118      	cbz	r0, 14162 <FsName::get16()+0x12>
    rtn = ls;
    ls = 0;
   1415a:	2300      	movs	r3, #0
   1415c:	81a3      	strh	r3, [r4, #12]
  }
  return rtn;

 fail:
  return 0XFFFF;
}
   1415e:	b002      	add	sp, #8
   14160:	bd10      	pop	{r4, pc}
  } else if (next >= end) {
   14162:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
   14166:	428b      	cmp	r3, r1
   14168:	d2f9      	bcs.n	1415e <FsName::get16()+0xe>
    const char* ptr = FsUtf::mbToCp(next, end, &cp);
   1416a:	aa01      	add	r2, sp, #4
   1416c:	4618      	mov	r0, r3
   1416e:	f000 f8b7 	bl	142e0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>
    if (!ptr) {
   14172:	b180      	cbz	r0, 14196 <FsName::get16()+0x46>
    if (cp <= 0XFFFF) {
   14174:	9b01      	ldr	r3, [sp, #4]
    next = ptr;
   14176:	6060      	str	r0, [r4, #4]
    if (cp <= 0XFFFF) {
   14178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   1417c:	d201      	bcs.n	14182 <FsName::get16()+0x32>
      rtn = cp;
   1417e:	b298      	uxth	r0, r3
   14180:	e7ed      	b.n	1415e <FsName::get16()+0xe>
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14182:	0a98      	lsrs	r0, r3, #10
    return (cp & 0X3FF) + 0XDC00;
   14184:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14188:	f5a0 5021 	sub.w	r0, r0, #10304	; 0x2840
    return (cp & 0X3FF) + 0XDC00;
   1418c:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
    return (cp >> 10) + (0XD800 - (0X10000 >> 10));
   14190:	b280      	uxth	r0, r0
      ls = FsUtf::lowSurrogate(cp);
   14192:	81a3      	strh	r3, [r4, #12]
   14194:	e7e3      	b.n	1415e <FsName::get16()+0xe>
  return 0XFFFF;
   14196:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1419a:	e7e0      	b.n	1415e <FsName::get16()+0xe>

0001419c <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)>:
  uint32_t c;
  uint8_t h;
  uint8_t s;

  uint8_t numberOfHeads;
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   1419c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   141a0:	d821      	bhi.n	141e6 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4a>
  if (capacityMB <= 16) {
   141a2:	2910      	cmp	r1, #16
   141a4:	d82e      	bhi.n	14204 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x68>
   141a6:	2340      	movs	r3, #64	; 0x40
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   141a8:	f04f 0c20 	mov.w	ip, #32
  } else if (capacityMB <= 4032) {
    numberOfHeads = 128;
  } else {
    numberOfHeads = 255;
  }
  c = lba / (numberOfHeads * sectorsPerTrack);
   141ac:	fbb2 f1f3 	udiv	r1, r2, r3
  if (c <= 1023) {
   141b0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   141b4:	d220      	bcs.n	141f8 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x5c>
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   141b6:	fb03 2311 	mls	r3, r3, r1, r2
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba) {
   141ba:	b500      	push	{lr}
    s = (lba % sectorsPerTrack) + 1;
   141bc:	fbb2 fefc 	udiv	lr, r2, ip
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   141c0:	fbb3 f3fc 	udiv	r3, r3, ip
    s = (lba % sectorsPerTrack) + 1;
   141c4:	fb0c 221e 	mls	r2, ip, lr, r2
    c = 1023;
    h = 254;
    s = 63;
  }
  chs[0] = h;
  chs[1] = ((c >> 2) & 0XC0) | s;
   141c8:	ea4f 0c91 	mov.w	ip, r1, lsr #2
    h = (lba % (numberOfHeads * sectorsPerTrack)) / sectorsPerTrack;
   141cc:	b2db      	uxtb	r3, r3
    s = (lba % sectorsPerTrack) + 1;
   141ce:	3201      	adds	r2, #1
  chs[1] = ((c >> 2) & 0XC0) | s;
   141d0:	f02c 0c3f 	bic.w	ip, ip, #63	; 0x3f
  chs[2] = c;
   141d4:	b2c9      	uxtb	r1, r1
  chs[0] = h;
   141d6:	7003      	strb	r3, [r0, #0]
  chs[1] = ((c >> 2) & 0XC0) | s;
   141d8:	ea42 020c 	orr.w	r2, r2, ip
  chs[2] = c;
   141dc:	7081      	strb	r1, [r0, #2]
  chs[1] = ((c >> 2) & 0XC0) | s;
   141de:	b2d2      	uxtb	r2, r2
   141e0:	7042      	strb	r2, [r0, #1]
}
   141e2:	f85d fb04 	ldr.w	pc, [sp], #4
   141e6:	233f      	movs	r3, #63	; 0x3f
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   141e8:	469c      	mov	ip, r3
  } else if (capacityMB <= 128) {
   141ea:	2980      	cmp	r1, #128	; 0x80
   141ec:	d910      	bls.n	14210 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x74>
  } else if (capacityMB <= 504) {
   141ee:	f5b1 7ffc 	cmp.w	r1, #504	; 0x1f8
   141f2:	d80f      	bhi.n	14214 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x78>
  c = lba / (numberOfHeads * sectorsPerTrack);
   141f4:	011b      	lsls	r3, r3, #4
   141f6:	e7d9      	b.n	141ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
   141f8:	21ff      	movs	r1, #255	; 0xff
    h = 254;
   141fa:	23fe      	movs	r3, #254	; 0xfe
  chs[1] = ((c >> 2) & 0XC0) | s;
   141fc:	7041      	strb	r1, [r0, #1]
  chs[0] = h;
   141fe:	7003      	strb	r3, [r0, #0]
  chs[2] = c;
   14200:	7081      	strb	r1, [r0, #2]
   14202:	4770      	bx	lr
  } else if (capacityMB <= 32) {
   14204:	2920      	cmp	r1, #32
   14206:	d816      	bhi.n	14236 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x9a>
   14208:	2380      	movs	r3, #128	; 0x80
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   1420a:	f04f 0c20 	mov.w	ip, #32
   1420e:	e7cd      	b.n	141ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  c = lba / (numberOfHeads * sectorsPerTrack);
   14210:	00db      	lsls	r3, r3, #3
   14212:	e7cb      	b.n	141ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 1008) {
   14214:	f5b1 7f7c 	cmp.w	r1, #1008	; 0x3f0
   14218:	d904      	bls.n	14224 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x88>
  } else if (capacityMB <= 2016) {
   1421a:	f5b1 6ffc 	cmp.w	r1, #2016	; 0x7e0
   1421e:	d803      	bhi.n	14228 <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x8c>
  c = lba / (numberOfHeads * sectorsPerTrack);
   14220:	019b      	lsls	r3, r3, #6
   14222:	e7c3      	b.n	141ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
   14224:	015b      	lsls	r3, r3, #5
   14226:	e7c1      	b.n	141ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
  } else if (capacityMB <= 4032) {
   14228:	f5b1 6f7c 	cmp.w	r1, #4032	; 0xfc0
  c = lba / (numberOfHeads * sectorsPerTrack);
   1422c:	bf94      	ite	ls
   1422e:	01db      	lslls	r3, r3, #7
   14230:	ebc3 2303 	rsbhi	r3, r3, r3, lsl #8
   14234:	e7ba      	b.n	141ac <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x10>
   14236:	2320      	movs	r3, #32
  uint8_t sectorsPerTrack = capacityMB <= 256 ? 32 : 63;
   14238:	469c      	mov	ip, r3
   1423a:	e7d6      	b.n	141ea <lbaToMbrChs(unsigned char*, unsigned long, unsigned long)+0x4e>

0001423c <FsUtf::cpToMb(unsigned long, char*, char*)>:
    if (cp < 0X80) {
   1423c:	287f      	cmp	r0, #127	; 0x7f
    size_t n = end - str;
   1423e:	eba2 0201 	sub.w	r2, r2, r1
    if (cp < 0X80) {
   14242:	d805      	bhi.n	14250 <FsUtf::cpToMb(unsigned long, char*, char*)+0x14>
      if (n < 1) goto fail;
   14244:	b112      	cbz	r2, 1424c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
      *(str++) = static_cast<uint8_t>(cp);
   14246:	460a      	mov	r2, r1
   14248:	f802 0b01 	strb.w	r0, [r2], #1
  }
   1424c:	4610      	mov	r0, r2
   1424e:	4770      	bx	lr
    } else if (cp < 0X800) {
   14250:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   14254:	d20f      	bcs.n	14276 <FsUtf::cpToMb(unsigned long, char*, char*)+0x3a>
      if (n < 2) goto fail;
   14256:	2a01      	cmp	r2, #1
   14258:	d940      	bls.n	142dc <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   1425a:	ea4f 1c90 	mov.w	ip, r0, lsr #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   1425e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   14262:	460a      	mov	r2, r1
   14264:	f06c 003f 	orn	r0, ip, #63	; 0x3f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14268:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 6)          | 0XC0);
   1426c:	f802 0b02 	strb.w	r0, [r2], #2
  }
   14270:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14272:	704b      	strb	r3, [r1, #1]
  }
   14274:	4770      	bx	lr
    } else if (cp < 0X10000) {
   14276:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   1427a:	d216      	bcs.n	142aa <FsUtf::cpToMb(unsigned long, char*, char*)+0x6e>
      if (n < 3) goto fail;
   1427c:	2a02      	cmp	r2, #2
   1427e:	d92d      	bls.n	142dc <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14280:	f3c0 1c85 	ubfx	ip, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14284:	f000 033f 	and.w	r3, r0, #63	; 0x3f
   14288:	1cca      	adds	r2, r1, #3
   1428a:	f063 037f 	orn	r3, r3, #127	; 0x7f
  char* cpToMb(uint32_t cp, char* str, char* end) {
   1428e:	b500      	push	{lr}
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   14290:	ea4f 3e10 	mov.w	lr, r0, lsr #12
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   14294:	f06c 007f 	orn	r0, ip, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   14298:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   1429a:	f06e 0e1f 	orn	lr, lr, #31
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   1429e:	7048      	strb	r0, [r1, #1]
  }
   142a0:	4610      	mov	r0, r2
      *(str++) = static_cast<uint8_t>((cp >> 12)         | 0XE0);
   142a2:	f881 e000 	strb.w	lr, [r1]
  }
   142a6:	f85d fb04 	ldr.w	pc, [sp], #4
       if (n < 4) goto fail;
   142aa:	2a03      	cmp	r2, #3
   142ac:	d916      	bls.n	142dc <FsUtf::cpToMb(unsigned long, char*, char*)+0xa0>
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   142ae:	ea4f 4c90 	mov.w	ip, r0, lsr #18
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   142b2:	f3c0 3205 	ubfx	r2, r0, #12, #6
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   142b6:	f3c0 1385 	ubfx	r3, r0, #6, #6
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   142ba:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   142be:	f062 027f 	orn	r2, r2, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   142c2:	f06c 0c0f 	orn	ip, ip, #15
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   142c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   142ca:	f060 007f 	orn	r0, r0, #127	; 0x7f
      *(str++) = static_cast<uint8_t>(((cp >> 12) & 0X3F)| 0X80);
   142ce:	704a      	strb	r2, [r1, #1]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   142d0:	1d0a      	adds	r2, r1, #4
   142d2:	70c8      	strb	r0, [r1, #3]
      *(str++) = static_cast<uint8_t>((cp >> 18)         | 0XF0);
   142d4:	f881 c000 	strb.w	ip, [r1]
      *(str++) = static_cast<uint8_t>(((cp >> 6) & 0X3F) | 0X80);
   142d8:	708b      	strb	r3, [r1, #2]
      *(str++) = static_cast<uint8_t>((cp & 0X3F)        | 0X80);
   142da:	e7b7      	b.n	1424c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>
    return nullptr;
   142dc:	2200      	movs	r2, #0
   142de:	e7b5      	b.n	1424c <FsUtf::cpToMb(unsigned long, char*, char*)+0x10>

000142e0 <FsUtf::mbToCp(char const*, char const*, unsigned long*)>:
    if (str >= end) {
   142e0:	4288      	cmp	r0, r1
   142e2:	d23d      	bcs.n	14360 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x80>
   142e4:	4603      	mov	r3, r0
  const char* mbToCp(const char* str, const char* end, uint32_t* rtn) {
   142e6:	b410      	push	{r4}
    if ((ch & 0X80) == 0) {
   142e8:	f990 0000 	ldrsb.w	r0, [r0]
    uint8_t ch = str[0];
   142ec:	781c      	ldrb	r4, [r3, #0]
    if ((ch & 0X80) == 0) {
   142ee:	2800      	cmp	r0, #0
   142f0:	da2d      	bge.n	1434e <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x6e>
    if ((ch & 0XE0) == 0XC0) {
   142f2:	f004 00e0 	and.w	r0, r4, #224	; 0xe0
   142f6:	28c0      	cmp	r0, #192	; 0xc0
   142f8:	d034      	beq.n	14364 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x84>
    } else if ((ch & 0XF0) == 0XE0) {
   142fa:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
   142fe:	28e0      	cmp	r0, #224	; 0xe0
   14300:	d034      	beq.n	1436c <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x8c>
    } else if ((ch & 0XF8) == 0XF0) {
   14302:	f004 00f8 	and.w	r0, r4, #248	; 0xf8
   14306:	28f0      	cmp	r0, #240	; 0xf0
   14308:	d126      	bne.n	14358 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
      cp = ch & 0X07;
   1430a:	f004 0407 	and.w	r4, r4, #7
      n = 4;
   1430e:	2004      	movs	r0, #4
    if ((str + n) > end) {
   14310:	4418      	add	r0, r3
   14312:	4288      	cmp	r0, r1
   14314:	d820      	bhi.n	14358 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
   14316:	3301      	adds	r3, #1
      ch = str[i];
   14318:	f813 1b01 	ldrb.w	r1, [r3], #1
      if ((ch & 0XC0) != 0X80) {
   1431c:	f001 0cc0 	and.w	ip, r1, #192	; 0xc0
      cp |= ch & 0X3F;
   14320:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      if ((ch & 0XC0) != 0X80) {
   14324:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
      cp |= ch & 0X3F;
   14328:	ea41 1484 	orr.w	r4, r1, r4, lsl #6
      if ((ch & 0XC0) != 0X80) {
   1432c:	d114      	bne.n	14358 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    for (size_t i = 1; i < n; i++) {
   1432e:	4283      	cmp	r3, r0
   14330:	d1f2      	bne.n	14318 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x38>
    if (cp < 0X80 || !isValidCp(cp)) {
   14332:	f1a4 0180 	sub.w	r1, r4, #128	; 0x80
   14336:	4b0f      	ldr	r3, [pc, #60]	; (14374 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x94>)
   14338:	4299      	cmp	r1, r3
   1433a:	d80d      	bhi.n	14358 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
  /** Check for a valid code point.
   * \param[in] cp code point.
   * \return true if valid else false.
   */
  inline bool isValidCp(uint32_t cp) {
    return cp <= 0x10FFFF && (cp < 0XD800 || cp > 0XDFFF);
   1433c:	f5a4 4358 	sub.w	r3, r4, #55296	; 0xd800
   14340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   14344:	d308      	bcc.n	14358 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x78>
    *rtn = cp;
   14346:	6014      	str	r4, [r2, #0]
  }
   14348:	f85d 4b04 	ldr.w	r4, [sp], #4
   1434c:	4770      	bx	lr
      return str + 1;
   1434e:	1c58      	adds	r0, r3, #1
      *rtn = ch;
   14350:	6014      	str	r4, [r2, #0]
  }
   14352:	f85d 4b04 	ldr.w	r4, [sp], #4
   14356:	4770      	bx	lr
      return nullptr;
   14358:	2000      	movs	r0, #0
  }
   1435a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1435e:	4770      	bx	lr
      return nullptr;
   14360:	2000      	movs	r0, #0
  }
   14362:	4770      	bx	lr
      cp = ch & 0X1F;
   14364:	f004 041f 	and.w	r4, r4, #31
      n = 2;
   14368:	2002      	movs	r0, #2
   1436a:	e7d1      	b.n	14310 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
      cp = ch & 0X0F;
   1436c:	f004 040f 	and.w	r4, r4, #15
      n = 3;
   14370:	2003      	movs	r0, #3
   14372:	e7cd      	b.n	14310 <FsUtf::mbToCp(char const*, char const*, unsigned long*)+0x30>
   14374:	0010ff7f 	.word	0x0010ff7f

00014378 <toUpcase(unsigned short)>:
}
//------------------------------------------------------------------------------
uint16_t toUpcase(uint16_t chr) {
  uint16_t i, first;
  // Optimize for simple ASCII.
  if (chr < 127) {
   14378:	287e      	cmp	r0, #126	; 0x7e
   1437a:	d93e      	bls.n	143fa <toUpcase(unsigned short)+0x82>
  size_t right = size;
   1437c:	f04f 0c35 	mov.w	ip, #53	; 0x35
  size_t left = 0;
   14380:	2300      	movs	r3, #0
uint16_t toUpcase(uint16_t chr) {
   14382:	b430      	push	{r4, r5}
   14384:	4c28      	ldr	r4, [pc, #160]	; (14428 <toUpcase(unsigned short)+0xb0>)
   14386:	e004      	b.n	14392 <toUpcase(unsigned short)+0x1a>
    if (readTable16(table[mid].key) <= key) {
   14388:	f834 2021 	ldrh.w	r2, [r4, r1, lsl #2]
   1438c:	4282      	cmp	r2, r0
   1438e:	d820      	bhi.n	143d2 <toUpcase(unsigned short)+0x5a>
    mid = left + (right - left)/2;
   14390:	460b      	mov	r3, r1
  while (right - left > 1) {
   14392:	ebac 0203 	sub.w	r2, ip, r3
   14396:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
   14398:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
   1439c:	d8f4      	bhi.n	14388 <toUpcase(unsigned short)+0x10>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
  }
  i = searchPair16(reinterpret_cast<const pair16_t*>(mapTable), MAP_DIM, chr);
  first = readTable16(mapTable[i].base);
   1439e:	b29b      	uxth	r3, r3
   143a0:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
   143a4:	4290      	cmp	r0, r2
   143a6:	d216      	bcs.n	143d6 <toUpcase(unsigned short)+0x5e>
   143a8:	244b      	movs	r4, #75	; 0x4b
   143aa:	2300      	movs	r3, #0
   143ac:	4d1f      	ldr	r5, [pc, #124]	; (1442c <toUpcase(unsigned short)+0xb4>)
   143ae:	e004      	b.n	143ba <toUpcase(unsigned short)+0x42>
    if (readTable16(table[mid].key) <= key) {
   143b0:	f835 2021 	ldrh.w	r2, [r5, r1, lsl #2]
   143b4:	4282      	cmp	r2, r0
   143b6:	d81e      	bhi.n	143f6 <toUpcase(unsigned short)+0x7e>
    mid = left + (right - left)/2;
   143b8:	460b      	mov	r3, r1
  while (right - left > 1) {
   143ba:	1ae2      	subs	r2, r4, r3
   143bc:	2a01      	cmp	r2, #1
    mid = left + (right - left)/2;
   143be:	eb03 0152 	add.w	r1, r3, r2, lsr #1
  while (right - left > 1) {
   143c2:	d8f5      	bhi.n	143b0 <toUpcase(unsigned short)+0x38>
      return chr - ((chr - first) & 1);
    }
    return chr + (off ? off : -0x1C60);
  }
  i = searchPair16(lookupTable, LOOKUP_DIM, chr);
  if (readTable16(lookupTable[i].key) == chr) {
   143c4:	b29b      	uxth	r3, r3
   143c6:	f835 2023 	ldrh.w	r2, [r5, r3, lsl #2]
   143ca:	4282      	cmp	r2, r0
   143cc:	d01f      	beq.n	1440e <toUpcase(unsigned short)+0x96>
    return readTable16(lookupTable[i].val);
  }
  return chr;
}
   143ce:	bc30      	pop	{r4, r5}
   143d0:	4770      	bx	lr
    mid = left + (right - left)/2;
   143d2:	468c      	mov	ip, r1
   143d4:	e7dd      	b.n	14392 <toUpcase(unsigned short)+0x1a>
  if (first <= chr && (chr - first)  < readTable8(mapTable[i].count)) {
   143d6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   143da:	1a82      	subs	r2, r0, r2
   143dc:	78e3      	ldrb	r3, [r4, #3]
   143de:	429a      	cmp	r2, r3
   143e0:	dae2      	bge.n	143a8 <toUpcase(unsigned short)+0x30>
    int8_t off = readTable8(mapTable[i].off);
   143e2:	f994 3002 	ldrsb.w	r3, [r4, #2]
    if (off == 1) {
   143e6:	2b01      	cmp	r3, #1
   143e8:	d016      	beq.n	14418 <toUpcase(unsigned short)+0xa0>
    return chr + (off ? off : -0x1C60);
   143ea:	b1d3      	cbz	r3, 14422 <toUpcase(unsigned short)+0xaa>
   143ec:	b29b      	uxth	r3, r3
   143ee:	4403      	add	r3, r0
}
   143f0:	bc30      	pop	{r4, r5}
    return chr + (off ? off : -0x1C60);
   143f2:	b298      	uxth	r0, r3
}
   143f4:	4770      	bx	lr
    mid = left + (right - left)/2;
   143f6:	460c      	mov	r4, r1
   143f8:	e7df      	b.n	143ba <toUpcase(unsigned short)+0x42>
    return chr - ('a' <= chr && chr <= 'z' ? 'a' - 'A' : 0);
   143fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   143fe:	2b19      	cmp	r3, #25
   14400:	bf8c      	ite	hi
   14402:	2300      	movhi	r3, #0
   14404:	2301      	movls	r3, #1
   14406:	eba0 1343 	sub.w	r3, r0, r3, lsl #5
   1440a:	b298      	uxth	r0, r3
}
   1440c:	4770      	bx	lr
    return readTable16(lookupTable[i].val);
   1440e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   14412:	8868      	ldrh	r0, [r5, #2]
}
   14414:	bc30      	pop	{r4, r5}
   14416:	4770      	bx	lr
      return chr - ((chr - first) & 1);
   14418:	f002 0201 	and.w	r2, r2, #1
   1441c:	1a83      	subs	r3, r0, r2
   1441e:	b298      	uxth	r0, r3
   14420:	e7d5      	b.n	143ce <toUpcase(unsigned short)+0x56>
    return chr + (off ? off : -0x1C60);
   14422:	f24e 33a0 	movw	r3, #58272	; 0xe3a0
   14426:	e7e2      	b.n	143ee <toUpcase(unsigned short)+0x76>
   14428:	20000d90 	.word	0x20000d90
   1442c:	20000c2c 	.word	0x20000c2c

00014430 <Switch::triggerCallbacks()>:
bool Switch::singleClick()
{ return _singleClick;
}

void Switch::triggerCallbacks()
{ if(_pushedCallback && pushed())
   14430:	6b43      	ldr	r3, [r0, #52]	; 0x34
   14432:	b510      	push	{r4, lr}
   14434:	4604      	mov	r4, r0
   14436:	b333      	cbz	r3, 14486 <Switch::triggerCallbacks()+0x56>
{ return _switched && !(debounced^polarity);
   14438:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   1443c:	b14a      	cbz	r2, 14452 <Switch::triggerCallbacks()+0x22>
   1443e:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
   14442:	f890 202a 	ldrb.w	r2, [r0, #42]	; 0x2a
   14446:	4291      	cmp	r1, r2
   14448:	d02b      	beq.n	144a2 <Switch::triggerCallbacks()+0x72>
  { _pushedCallback(_pushedCallbackParam);
  }
    else if(_releasedCallback && released())
   1444a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1444c:	b10b      	cbz	r3, 14452 <Switch::triggerCallbacks()+0x22>
  { _releasedCallback(_releasedCallbackParam);
   1444e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14450:	4798      	blx	r3
  }

  if(_longPressCallback && longPress())
   14452:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14454:	b113      	cbz	r3, 1445c <Switch::triggerCallbacks()+0x2c>
   14456:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1445a:	b98a      	cbnz	r2, 14480 <Switch::triggerCallbacks()+0x50>
  { _longPressCallback(_longPressCallbackParam);
  }

  if(_doubleClickCallback && doubleClick())
   1445c:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1445e:	b113      	cbz	r3, 14466 <Switch::triggerCallbacks()+0x36>
   14460:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
   14464:	b94a      	cbnz	r2, 1447a <Switch::triggerCallbacks()+0x4a>
  { _doubleClickCallback(_doubleClickCallbackParam);
  }

  if(_singleClickCallback && singleClick())
   14466:	6c63      	ldr	r3, [r4, #68]	; 0x44
   14468:	b133      	cbz	r3, 14478 <Switch::triggerCallbacks()+0x48>
   1446a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
   1446e:	b11a      	cbz	r2, 14478 <Switch::triggerCallbacks()+0x48>
  { _singleClickCallback(_singleClickCallbackParam);
   14470:	6da0      	ldr	r0, [r4, #88]	; 0x58
  }
}
   14472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  { _singleClickCallback(_singleClickCallbackParam);
   14476:	4718      	bx	r3
}
   14478:	bd10      	pop	{r4, pc}
  { _doubleClickCallback(_doubleClickCallbackParam);
   1447a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   1447c:	4798      	blx	r3
   1447e:	e7f2      	b.n	14466 <Switch::triggerCallbacks()+0x36>
  { _longPressCallback(_longPressCallbackParam);
   14480:	6d20      	ldr	r0, [r4, #80]	; 0x50
   14482:	4798      	blx	r3
   14484:	e7ea      	b.n	1445c <Switch::triggerCallbacks()+0x2c>
    else if(_releasedCallback && released())
   14486:	6b83      	ldr	r3, [r0, #56]	; 0x38
   14488:	2b00      	cmp	r3, #0
   1448a:	d0e2      	beq.n	14452 <Switch::triggerCallbacks()+0x22>
{ return _switched && (debounced^polarity);
   1448c:	f890 202b 	ldrb.w	r2, [r0, #43]	; 0x2b
   14490:	2a00      	cmp	r2, #0
   14492:	d0de      	beq.n	14452 <Switch::triggerCallbacks()+0x22>
   14494:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
   14498:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
   1449c:	4291      	cmp	r1, r2
   1449e:	d0d8      	beq.n	14452 <Switch::triggerCallbacks()+0x22>
   144a0:	e7d5      	b.n	1444e <Switch::triggerCallbacks()+0x1e>
  { _pushedCallback(_pushedCallbackParam);
   144a2:	6c80      	ldr	r0, [r0, #72]	; 0x48
   144a4:	4798      	blx	r3
   144a6:	e7d4      	b.n	14452 <Switch::triggerCallbacks()+0x22>

000144a8 <Switch::process()>:
{ deglitch();
   144a8:	b538      	push	{r3, r4, r5, lr}
{ if(input == lastInput) equal = 1;
   144aa:	f890 1026 	ldrb.w	r1, [r0, #38]	; 0x26
{ deglitch();
   144ae:	4604      	mov	r4, r0
{ if(input == lastInput) equal = 1;
   144b0:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   144b4:	428b      	cmp	r3, r1
   144b6:	d060      	beq.n	1457a <Switch::process()+0xd2>
  { equal = 0;
   144b8:	2000      	movs	r0, #0
    deglitchTime = ms;
   144ba:	6a23      	ldr	r3, [r4, #32]
  if((deglitched != debounced) && ((ms - switchedTime) > debouncePeriod))
   144bc:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
  { equal = 0;
   144c0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    deglitchTime = ms;
   144c4:	6123      	str	r3, [r4, #16]
  if((deglitched != debounced) && ((ms - switchedTime) > debouncePeriod))
   144c6:	f894 c02a 	ldrb.w	ip, [r4, #42]	; 0x2a
{ _switched = 0;
   144ca:	2000      	movs	r0, #0
  lastInput = input;
   144cc:	f884 1027 	strb.w	r1, [r4, #39]	; 0x27
  if((deglitched != debounced) && ((ms - switchedTime) > debouncePeriod))
   144d0:	4594      	cmp	ip, r2
{ _switched = 0;
   144d2:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
  if((deglitched != debounced) && ((ms - switchedTime) > debouncePeriod))
   144d6:	d020      	beq.n	1451a <Switch::process()+0x72>
   144d8:	6961      	ldr	r1, [r4, #20]
   144da:	6865      	ldr	r5, [r4, #4]
   144dc:	1a59      	subs	r1, r3, r1
   144de:	42a9      	cmp	r1, r5
   144e0:	d91b      	bls.n	1451a <Switch::process()+0x72>
{ return _switched && !(debounced^polarity);
   144e2:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
    _switched = 1;
   144e6:	f04f 0c01 	mov.w	ip, #1
  { debounced = deglitched;
   144ea:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
{ return _switched && !(debounced^polarity);
   144ee:	4291      	cmp	r1, r2
{ _singleClick = false;
   144f0:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    _switched = 1;
   144f4:	f884 c02b 	strb.w	ip, [r4, #43]	; 0x2b
{ return _switched && !(debounced^polarity);
   144f8:	d05c      	beq.n	145b4 <Switch::process()+0x10c>
  if(!singleClickDisable)
   144fa:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
   144fe:	2a00      	cmp	r2, #0
   14500:	d04c      	beq.n	1459c <Switch::process()+0xf4>
{ _longPress = false;
   14502:	2200      	movs	r2, #0
  { switchedTime = ms; //stores last times for future rounds
   14504:	6163      	str	r3, [r4, #20]
{ _longPress = false;
   14506:	85a2      	strh	r2, [r4, #44]	; 0x2c
{ _doubleClick = pushed() && ((ms - pushedTime) < doubleClickPeriod);
   14508:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
    } else { releasedTime = ms;
   1450c:	61e3      	str	r3, [r4, #28]
  triggerCallbacks();
   1450e:	4620      	mov	r0, r4
   14510:	f7ff ff8e 	bl	14430 <Switch::triggerCallbacks()>
  return _switched;
   14514:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
}
   14518:	bd38      	pop	{r3, r4, r5, pc}
  if(!singleClickDisable)
   1451a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
{ _singleClick = false;
   1451e:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  if(!singleClickDisable)
   14522:	b99a      	cbnz	r2, 1454c <Switch::process()+0xa4>
  { _singleClick = !switched() && !on() && ((releasedTime - pushedTime) <= longPressPeriod) && ((ms - pushedTime) >= doubleClickPeriod); // true just one time between polls
   14524:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   14528:	4561      	cmp	r1, ip
   1452a:	d00b      	beq.n	14544 <Switch::process()+0x9c>
   1452c:	68a5      	ldr	r5, [r4, #8]
   1452e:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   14532:	1a09      	subs	r1, r1, r0
   14534:	42a9      	cmp	r1, r5
   14536:	d805      	bhi.n	14544 <Switch::process()+0x9c>
   14538:	68e2      	ldr	r2, [r4, #12]
   1453a:	1a18      	subs	r0, r3, r0
   1453c:	4290      	cmp	r0, r2
   1453e:	bf34      	ite	cc
   14540:	2200      	movcc	r2, #0
   14542:	2201      	movcs	r2, #1
   14544:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
    singleClickDisable = _singleClick; // will be reset at next push
   14548:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
{ _doubleClick = pushed() && ((ms - pushedTime) < doubleClickPeriod);
   1454c:	2100      	movs	r1, #0
  if(!longPressDisable)
   1454e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
{ _doubleClick = pushed() && ((ms - pushedTime) < doubleClickPeriod);
   14552:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
{ _longPress = false;
   14556:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
  if(!longPressDisable)
   1455a:	2a00      	cmp	r2, #0
   1455c:	d1d7      	bne.n	1450e <Switch::process()+0x66>
  { _longPress = !switched() && on() && ((ms - pushedTime) > longPressPeriod); // true just one time between polls
   1455e:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
   14562:	458c      	cmp	ip, r1
   14564:	d04a      	beq.n	145fc <Switch::process()+0x154>
  triggerCallbacks();
   14566:	4620      	mov	r0, r4
  { _longPress = !switched() && on() && ((ms - pushedTime) > longPressPeriod); // true just one time between polls
   14568:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
    longPressDisable = _longPress; // will be reset at next release
   1456c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  triggerCallbacks();
   14570:	f7ff ff5e 	bl	14430 <Switch::triggerCallbacks()>
  return _switched;
   14574:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
}
   14578:	bd38      	pop	{r3, r4, r5, pc}
  if(equal && ((ms - deglitchTime) > deglitchPeriod)) // max 50ms, disable deglitch: 0ms
   1457a:	6a03      	ldr	r3, [r0, #32]
   1457c:	6902      	ldr	r2, [r0, #16]
{ if(input == lastInput) equal = 1;
   1457e:	2001      	movs	r0, #1
  if(equal && ((ms - deglitchTime) > deglitchPeriod)) // max 50ms, disable deglitch: 0ms
   14580:	1a9a      	subs	r2, r3, r2
{ if(input == lastInput) equal = 1;
   14582:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
  if(equal && ((ms - deglitchTime) > deglitchPeriod)) // max 50ms, disable deglitch: 0ms
   14586:	6820      	ldr	r0, [r4, #0]
   14588:	4282      	cmp	r2, r0
   1458a:	d904      	bls.n	14596 <Switch::process()+0xee>
  { deglitched = input;
   1458c:	460a      	mov	r2, r1
   1458e:	f884 1029 	strb.w	r1, [r4, #41]	; 0x29
    deglitchTime = ms;
   14592:	6123      	str	r3, [r4, #16]
   14594:	e797      	b.n	144c6 <Switch::process()+0x1e>
  if((deglitched != debounced) && ((ms - switchedTime) > debouncePeriod))
   14596:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
   1459a:	e794      	b.n	144c6 <Switch::process()+0x1e>
{ return _switched && !(debounced^polarity);
   1459c:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  { _singleClick = !switched() && !on() && ((releasedTime - pushedTime) <= longPressPeriod) && ((ms - pushedTime) >= doubleClickPeriod); // true just one time between polls
   145a0:	2000      	movs	r0, #0
{ return _switched && !(debounced^polarity);
   145a2:	4291      	cmp	r1, r2
  { _singleClick = !switched() && !on() && ((releasedTime - pushedTime) <= longPressPeriod) && ((ms - pushedTime) >= doubleClickPeriod); // true just one time between polls
   145a4:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    singleClickDisable = _singleClick; // will be reset at next push
   145a8:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
{ return _switched && !(debounced^polarity);
   145ac:	d1a9      	bne.n	14502 <Switch::process()+0x5a>
   145ae:	69a0      	ldr	r0, [r4, #24]
   145b0:	68e5      	ldr	r5, [r4, #12]
   145b2:	e007      	b.n	145c4 <Switch::process()+0x11c>
  { if((ms - pushedTime) >= doubleClickPeriod)
   145b4:	69a0      	ldr	r0, [r4, #24]
   145b6:	68e5      	ldr	r5, [r4, #12]
   145b8:	eba3 0e00 	sub.w	lr, r3, r0
   145bc:	45ae      	cmp	lr, r5
   145be:	d2ed      	bcs.n	1459c <Switch::process()+0xf4>
    } else { singleClickDisable = true; //silence single click in second cl. doublecl.
   145c0:	f884 c030 	strb.w	ip, [r4, #48]	; 0x30
{ _doubleClick = pushed() && ((ms - pushedTime) < doubleClickPeriod);
   145c4:	1a18      	subs	r0, r3, r0
   145c6:	42a8      	cmp	r0, r5
   145c8:	d220      	bcs.n	1460c <Switch::process()+0x164>
   145ca:	2001      	movs	r0, #1
   145cc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
{ _longPress = false;
   145d0:	2000      	movs	r0, #0
   145d2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  if(!longPressDisable)
   145d6:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
   145da:	b1e8      	cbz	r0, 14618 <Switch::process()+0x170>
  { switchedTime = ms; //stores last times for future rounds
   145dc:	4618      	mov	r0, r3
   145de:	6163      	str	r3, [r4, #20]
    { if(_beepAllCallback) _beepAllCallback(_beepAllCallbackParam);
   145e0:	4b11      	ldr	r3, [pc, #68]	; (14628 <Switch::process()+0x180>)
   145e2:	681b      	ldr	r3, [r3, #0]
   145e4:	b11b      	cbz	r3, 145ee <Switch::process()+0x146>
   145e6:	4a11      	ldr	r2, [pc, #68]	; (1462c <Switch::process()+0x184>)
   145e8:	6810      	ldr	r0, [r2, #0]
   145ea:	4798      	blx	r3
      pushedTime = ms;
   145ec:	6a20      	ldr	r0, [r4, #32]
   145ee:	61a0      	str	r0, [r4, #24]
  triggerCallbacks();
   145f0:	4620      	mov	r0, r4
   145f2:	f7ff ff1d 	bl	14430 <Switch::triggerCallbacks()>
  return _switched;
   145f6:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
}
   145fa:	bd38      	pop	{r3, r4, r5, pc}
  { _longPress = !switched() && on() && ((ms - pushedTime) > longPressPeriod); // true just one time between polls
   145fc:	69a2      	ldr	r2, [r4, #24]
   145fe:	68a1      	ldr	r1, [r4, #8]
   14600:	1a9a      	subs	r2, r3, r2
   14602:	428a      	cmp	r2, r1
   14604:	bf94      	ite	ls
   14606:	2200      	movls	r2, #0
   14608:	2201      	movhi	r2, #1
   1460a:	e7ac      	b.n	14566 <Switch::process()+0xbe>
{ _doubleClick = pushed() && ((ms - pushedTime) < doubleClickPeriod);
   1460c:	2000      	movs	r0, #0
   1460e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
{ _longPress = false;
   14612:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
  if(released()) longPressDisable = false; //resets when released
   14616:	e7de      	b.n	145d6 <Switch::process()+0x12e>
{ return _switched && !(debounced^polarity);
   14618:	428a      	cmp	r2, r1
  { _longPress = !switched() && on() && ((ms - pushedTime) > longPressPeriod); // true just one time between polls
   1461a:	85a0      	strh	r0, [r4, #44]	; 0x2c
  { switchedTime = ms; //stores last times for future rounds
   1461c:	6163      	str	r3, [r4, #20]
   1461e:	4618      	mov	r0, r3
{ return _switched && !(debounced^polarity);
   14620:	f47f af74 	bne.w	1450c <Switch::process()+0x64>
   14624:	e7dc      	b.n	145e0 <Switch::process()+0x138>
   14626:	bf00      	nop
   14628:	200051e4 	.word	0x200051e4
   1462c:	200051e8 	.word	0x200051e8

00014630 <Switch::poll()>:
{ input = digitalRead(pin);
   14630:	b510      	push	{r4, lr}
   14632:	4604      	mov	r4, r0
   14634:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
   14638:	f001 fcd4 	bl	15fe4 <digitalRead>
   1463c:	4603      	mov	r3, r0
   1463e:	4a06      	ldr	r2, [pc, #24]	; (14658 <Switch::poll()+0x28>)
  return process();
   14640:	4620      	mov	r0, r4
{ input = digitalRead(pin);
   14642:	3b00      	subs	r3, #0
   14644:	6812      	ldr	r2, [r2, #0]
   14646:	bf18      	it	ne
   14648:	2301      	movne	r3, #1
  ms = millis();
   1464a:	6222      	str	r2, [r4, #32]
{ input = digitalRead(pin);
   1464c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
}
   14650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return process();
   14654:	f7ff bf28 	b.w	144a8 <Switch::process()>
   14658:	2000bc24 	.word	0x2000bc24

0001465c <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)>:
Switch::Switch(byte _pin, byte PinMode, bool polarity, unsigned long debouncePeriod, unsigned long longPressPeriod, unsigned long doubleClickPeriod, unsigned long deglitchPeriod):
   1465c:	b538      	push	{r3, r4, r5, lr}
   1465e:	4604      	mov	r4, r0
deglitchPeriod(deglitchPeriod), debouncePeriod(debouncePeriod), longPressPeriod(longPressPeriod), doubleClickPeriod(doubleClickPeriod), pin(_pin), polarity(polarity)
   14660:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
   14664:	2300      	movs	r3, #0
Switch::Switch(byte _pin, byte PinMode, bool polarity, unsigned long debouncePeriod, unsigned long longPressPeriod, unsigned long doubleClickPeriod, unsigned long deglitchPeriod):
   14666:	4608      	mov	r0, r1
   14668:	9904      	ldr	r1, [sp, #16]
   1466a:	4d1b      	ldr	r5, [pc, #108]	; (146d8 <Switch::Switch(unsigned char, unsigned char, bool, unsigned long, unsigned long, unsigned long, unsigned long)+0x7c>)
deglitchPeriod(deglitchPeriod), debouncePeriod(debouncePeriod), longPressPeriod(longPressPeriod), doubleClickPeriod(doubleClickPeriod), pin(_pin), polarity(polarity)
   1466c:	6061      	str	r1, [r4, #4]
{ pinMode(pin, PinMode);
   1466e:	4611      	mov	r1, r2
deglitchPeriod(deglitchPeriod), debouncePeriod(debouncePeriod), longPressPeriod(longPressPeriod), doubleClickPeriod(doubleClickPeriod), pin(_pin), polarity(polarity)
   14670:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
   14674:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
   14678:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
   1467c:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
   14680:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
   14684:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
Switch::Switch(byte _pin, byte PinMode, bool polarity, unsigned long debouncePeriod, unsigned long longPressPeriod, unsigned long doubleClickPeriod, unsigned long deglitchPeriod):
   14688:	9b05      	ldr	r3, [sp, #20]
deglitchPeriod(deglitchPeriod), debouncePeriod(debouncePeriod), longPressPeriod(longPressPeriod), doubleClickPeriod(doubleClickPeriod), pin(_pin), polarity(polarity)
   1468a:	60a3      	str	r3, [r4, #8]
Switch::Switch(byte _pin, byte PinMode, bool polarity, unsigned long debouncePeriod, unsigned long longPressPeriod, unsigned long doubleClickPeriod, unsigned long deglitchPeriod):
   1468c:	9b06      	ldr	r3, [sp, #24]
deglitchPeriod(deglitchPeriod), debouncePeriod(debouncePeriod), longPressPeriod(longPressPeriod), doubleClickPeriod(doubleClickPeriod), pin(_pin), polarity(polarity)
   1468e:	60e3      	str	r3, [r4, #12]
Switch::Switch(byte _pin, byte PinMode, bool polarity, unsigned long debouncePeriod, unsigned long longPressPeriod, unsigned long doubleClickPeriod, unsigned long deglitchPeriod):
   14690:	9b07      	ldr	r3, [sp, #28]
deglitchPeriod(deglitchPeriod), debouncePeriod(debouncePeriod), longPressPeriod(longPressPeriod), doubleClickPeriod(doubleClickPeriod), pin(_pin), polarity(polarity)
   14692:	6023      	str	r3, [r4, #0]
{ pinMode(pin, PinMode);
   14694:	f001 fcb8 	bl	16008 <pinMode>
   14698:	682b      	ldr	r3, [r5, #0]
  debounced = digitalRead(pin);
   1469a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  switchedTime = millis();
   1469e:	6163      	str	r3, [r4, #20]
  debounced = digitalRead(pin);
   146a0:	f001 fca0 	bl	15fe4 <digitalRead>
   146a4:	4603      	mov	r3, r0
  singleClickDisable = true;
   146a6:	2201      	movs	r2, #1
{ input = digitalRead(pin);
   146a8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  debounced = digitalRead(pin);
   146ac:	3b00      	subs	r3, #0
  singleClickDisable = true;
   146ae:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  debounced = digitalRead(pin);
   146b2:	bf18      	it	ne
   146b4:	2301      	movne	r3, #1
   146b6:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
{ input = digitalRead(pin);
   146ba:	f001 fc93 	bl	15fe4 <digitalRead>
   146be:	1e03      	subs	r3, r0, #0
   146c0:	682a      	ldr	r2, [r5, #0]
  return process();
   146c2:	4620      	mov	r0, r4
{ input = digitalRead(pin);
   146c4:	bf18      	it	ne
   146c6:	2301      	movne	r3, #1
  ms = millis();
   146c8:	6222      	str	r2, [r4, #32]
{ input = digitalRead(pin);
   146ca:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  return process();
   146ce:	f7ff feeb 	bl	144a8 <Switch::process()>
}
   146d2:	4620      	mov	r0, r4
   146d4:	bd38      	pop	{r3, r4, r5, pc}
   146d6:	bf00      	nop
   146d8:	2000bc24 	.word	0x2000bc24

000146dc <Switch::setPushedCallback(void (*)(void*), void*)>:

void Switch::setPushedCallback(switchCallback_t cb, void* param)
{ _pushedCallback = cb; // Store the "pushed" callback function
   146dc:	6341      	str	r1, [r0, #52]	; 0x34
  _pushedCallbackParam = param;
   146de:	6482      	str	r2, [r0, #72]	; 0x48
}
   146e0:	4770      	bx	lr
   146e2:	bf00      	nop

000146e4 <Switch::setReleasedCallback(void (*)(void*), void*)>:

void Switch::setReleasedCallback(switchCallback_t cb, void* param)
{ _releasedCallback = cb; // Store the "released" callback function
   146e4:	6381      	str	r1, [r0, #56]	; 0x38
  _releasedCallbackParam = param;
   146e6:	64c2      	str	r2, [r0, #76]	; 0x4c
}
   146e8:	4770      	bx	lr
   146ea:	bf00      	nop

000146ec <Switch::setLongPressCallback(void (*)(void*), void*)>:

void Switch::setLongPressCallback(switchCallback_t cb, void* param)
{ _longPressCallback = cb; // Store the "long press" callback function
   146ec:	63c1      	str	r1, [r0, #60]	; 0x3c
  _longPressCallbackParam = param;
   146ee:	6502      	str	r2, [r0, #80]	; 0x50
}
   146f0:	4770      	bx	lr
   146f2:	bf00      	nop

000146f4 <Switch::setDoubleClickCallback(void (*)(void*), void*)>:

void Switch::setDoubleClickCallback(switchCallback_t cb, void* param)
{ _doubleClickCallback = cb; // Store the "double click" callback function
   146f4:	6401      	str	r1, [r0, #64]	; 0x40
  _doubleClickCallbackParam = param;
   146f6:	6542      	str	r2, [r0, #84]	; 0x54
}
   146f8:	4770      	bx	lr
   146fa:	bf00      	nop

000146fc <Switch::setSingleClickCallback(void (*)(void*), void*)>:

void Switch::setSingleClickCallback(switchCallback_t cb, void* param)
{ _singleClickCallback = cb; // Store the "double click" callback function
   146fc:	6441      	str	r1, [r0, #68]	; 0x44
  _singleClickCallbackParam = param;
   146fe:	6582      	str	r2, [r0, #88]	; 0x58
}
   14700:	4770      	bx	lr
   14702:	bf00      	nop

00014704 <fastinterpolate(short, short, short, short, float)>:


int16_t fastinterpolate(int16_t d1, int16_t d2, int16_t d3, int16_t d4, float x) {
    float x_1 = x * 1000.0;
   14704:	ed9f 7a33 	vldr	s14, [pc, #204]	; 147d4 <fastinterpolate(short, short, short, short, float)+0xd0>
    float x_2 = x_1 * x_1;
    float x_3 = x_2 * x_1;

    //Serial.printf("%i,%i,%i,%i @ x=%f \n", d1,d2,d3,d4,x);

    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14708:	ee05 0a10 	vmov	s10, r0
   1470c:	eddf 7a32 	vldr	s15, [pc, #200]	; 147d8 <fastinterpolate(short, short, short, short, float)+0xd4>
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14710:	ee04 1a90 	vmov	s9, r1
    float x_1 = x * 1000.0;
   14714:	ee20 0a07 	vmul.f32	s0, s0, s14
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14718:	ed9f 6a30 	vldr	s12, [pc, #192]	; 147dc <fastinterpolate(short, short, short, short, float)+0xd8>
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   1471c:	eddf 6a30 	vldr	s13, [pc, #192]	; 147e0 <fastinterpolate(short, short, short, short, float)+0xdc>
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14720:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
   14724:	eddf 0a2f 	vldr	s1, [pc, #188]	; 147e4 <fastinterpolate(short, short, short, short, float)+0xe0>
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14728:	eef8 4ae4 	vcvt.f32.s32	s9, s9
    float x_2 = x_1 * x_1;
   1472c:	ee20 7a00 	vmul.f32	s14, s0, s0
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   14730:	eddf 5a2d 	vldr	s11, [pc, #180]	; 147e8 <fastinterpolate(short, short, short, short, float)+0xe4>
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14734:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 147ec <fastinterpolate(short, short, short, short, float)+0xe8>
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   14738:	ee04 3a10 	vmov	s8, r3
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   1473c:	eddf 1a2c 	vldr	s3, [pc, #176]	; 147f0 <fastinterpolate(short, short, short, short, float)+0xec>
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14740:	ee67 7ac7 	vnmul.f32	s15, s15, s14
   14744:	eddf 3a2b 	vldr	s7, [pc, #172]	; 147f4 <fastinterpolate(short, short, short, short, float)+0xf0>
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14748:	ee26 6a47 	vnmul.f32	s12, s12, s14
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   1474c:	ed9f 3a2a 	vldr	s6, [pc, #168]	; 147f8 <fastinterpolate(short, short, short, short, float)+0xf4>
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   14750:	ee66 6ac7 	vnmul.f32	s13, s13, s14
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14754:	ed9f 2a29 	vldr	s4, [pc, #164]	; 147fc <fastinterpolate(short, short, short, short, float)+0xf8>
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14758:	eee0 7a07 	vfma.f32	s15, s0, s14
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   1475c:	eddf 2a28 	vldr	s5, [pc, #160]	; 14800 <fastinterpolate(short, short, short, short, float)+0xfc>
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   14760:	eea0 6a07 	vfma.f32	s12, s0, s14
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   14764:	eee0 6a07 	vfma.f32	s13, s0, s14
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   14768:	ee65 5ac7 	vnmul.f32	s11, s11, s14
   1476c:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14770:	eee0 7a20 	vfma.f32	s15, s0, s1
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   14774:	eee0 5a07 	vfma.f32	s11, s0, s14
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   14778:	ee07 2a10 	vmov	s14, r2
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   1477c:	eea0 6a01 	vfma.f32	s12, s0, s2
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   14780:	eee0 6a21 	vfma.f32	s13, s0, s3
   14784:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14788:	ee77 7ae3 	vsub.f32	s15, s15, s7
int16_t fastinterpolate(int16_t d1, int16_t d2, int16_t d3, int16_t d4, float x) {
   1478c:	ed2d 8b02 	vpush	{d8}
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   14790:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 14804 <fastinterpolate(short, short, short, short, float)+0x100>
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   14794:	ee27 7a26 	vmul.f32	s14, s14, s13
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   14798:	ee25 5a27 	vmul.f32	s10, s10, s15
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   1479c:	eee0 5a08 	vfma.f32	s11, s0, s16
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   147a0:	ee64 4a86 	vmul.f32	s9, s9, s12
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   147a4:	eec7 6a22 	vdiv.f32	s13, s14, s5
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   147a8:	ee84 6a82 	vdiv.f32	s12, s9, s4
    return d1 * (x_3  - 6000 * x_2   + 11000000  * x_1  - 6000000000 ) / - 6000000000
   147ac:	ee85 7a03 	vdiv.f32	s14, s10, s6
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   147b0:	ee64 5a25 	vmul.f32	s11, s8, s11
      return -32768;
    if (untruncated > 32767)
      return 32767;
    return result;
    */
   147b4:	ecbd 8b02 	vpop	{d8}
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   147b8:	eec5 7aa3 	vdiv.f32	s15, s11, s7
         + d2 * (x_3  - 5000 * x_2   +  6000000  * x_1        )     /   2000000000
   147bc:	ee37 7a06 	vadd.f32	s14, s14, s12
         + d3 * (x_3  - 4000 * x_2   +  3000000  * x_1        )     / - 2000000000
   147c0:	ee36 7a87 	vadd.f32	s14, s13, s14
         + d4 * (x_3  - 3000 * x_2   +  2000000  * x_1        )     /   6000000000;
   147c4:	ee77 7a87 	vadd.f32	s15, s15, s14
   147c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   147cc:	ee17 3a90 	vmov	r3, s15
   147d0:	b218      	sxth	r0, r3
   147d2:	4770      	bx	lr
   147d4:	447a0000 	.word	0x447a0000
   147d8:	45bb8000 	.word	0x45bb8000
   147dc:	459c4000 	.word	0x459c4000
   147e0:	457a0000 	.word	0x457a0000
   147e4:	4b27d8c0 	.word	0x4b27d8c0
   147e8:	453b8000 	.word	0x453b8000
   147ec:	4ab71b00 	.word	0x4ab71b00
   147f0:	4a371b00 	.word	0x4a371b00
   147f4:	4fb2d05e 	.word	0x4fb2d05e
   147f8:	cfb2d05e 	.word	0xcfb2d05e
   147fc:	4eee6b28 	.word	0x4eee6b28
   14800:	ceee6b28 	.word	0xceee6b28
   14804:	49f42400 	.word	0x49f42400

00014808 <TwoWire::available()>:
		return rxBufferLength - rxBufferIndex;
   14808:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   1480c:	f890 00a2 	ldrb.w	r0, [r0, #162]	; 0xa2
	}
   14810:	1a10      	subs	r0, r2, r0
   14812:	4770      	bx	lr

00014814 <TwoWire::read()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   14814:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   14818:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   1481c:	429a      	cmp	r2, r3
   1481e:	d905      	bls.n	1482c <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
   14820:	1c5a      	adds	r2, r3, #1
   14822:	4403      	add	r3, r0
   14824:	f880 20a2 	strb.w	r2, [r0, #162]	; 0xa2
   14828:	7e98      	ldrb	r0, [r3, #26]
   1482a:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   1482c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   14830:	4770      	bx	lr
   14832:	bf00      	nop

00014834 <TwoWire::peek()>:
		if (rxBufferIndex >= rxBufferLength) return -1;
   14834:	f890 30a2 	ldrb.w	r3, [r0, #162]	; 0xa2
   14838:	f890 20a3 	ldrb.w	r2, [r0, #163]	; 0xa3
   1483c:	429a      	cmp	r2, r3
   1483e:	d902      	bls.n	14846 <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
   14840:	4418      	add	r0, r3
   14842:	7e80      	ldrb	r0, [r0, #26]
   14844:	4770      	bx	lr
		if (rxBufferIndex >= rxBufferLength) return -1;
   14846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}
   1484a:	4770      	bx	lr

0001484c <TwoWire::flush()>:
	}
   1484c:	4770      	bx	lr
   1484e:	bf00      	nop

00014850 <TwoWire::write(unsigned char)>:
{
   14850:	4603      	mov	r3, r0
	if (transmitting || slave_mode) {
   14852:	f8b0 0130 	ldrh.w	r0, [r0, #304]	; 0x130
   14856:	b178      	cbz	r0, 14878 <TwoWire::write(unsigned char)+0x28>
		if (txBufferLength >= BUFFER_LENGTH+1) {
   14858:	f893 212f 	ldrb.w	r2, [r3, #303]	; 0x12f
   1485c:	2a88      	cmp	r2, #136	; 0x88
   1485e:	d903      	bls.n	14868 <TwoWire::write(unsigned char)+0x18>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	// int printf(const char *format, ...) __attribute__ ((format (printf, 2, 3)));

  protected:
	void setWriteError(int err = 1) { write_error = err; }
   14860:	2201      	movs	r2, #1
			return 0;
   14862:	2000      	movs	r0, #0
   14864:	605a      	str	r2, [r3, #4]
   14866:	4770      	bx	lr
		txBuffer[txBufferLength++] = data;
   14868:	f102 0c01 	add.w	ip, r2, #1
		return 1;
   1486c:	2001      	movs	r0, #1
		txBuffer[txBufferLength++] = data;
   1486e:	441a      	add	r2, r3
   14870:	f883 c12f 	strb.w	ip, [r3, #303]	; 0x12f
   14874:	f882 10a5 	strb.w	r1, [r2, #165]	; 0xa5
}
   14878:	4770      	bx	lr
   1487a:	bf00      	nop

0001487c <TwoWire::write(unsigned char const*, unsigned int)>:
{
   1487c:	b538      	push	{r3, r4, r5, lr}
	if (transmitting || slave_mode) {
   1487e:	f8b0 4130 	ldrh.w	r4, [r0, #304]	; 0x130
   14882:	b90c      	cbnz	r4, 14888 <TwoWire::write(unsigned char const*, unsigned int)+0xc>
}
   14884:	4620      	mov	r0, r4
   14886:	bd38      	pop	{r3, r4, r5, pc}
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
   14888:	f890 312f 	ldrb.w	r3, [r0, #303]	; 0x12f
   1488c:	4605      	mov	r5, r0
   1488e:	f1c3 0489 	rsb	r4, r3, #137	; 0x89
		if (quantity > avail) {
   14892:	42a2      	cmp	r2, r4
   14894:	d80d      	bhi.n	148b2 <TwoWire::write(unsigned char const*, unsigned int)+0x36>
   14896:	4614      	mov	r4, r2
		memcpy(txBuffer + txBufferLength, data, quantity);
   14898:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
   1489c:	4622      	mov	r2, r4
   1489e:	4418      	add	r0, r3
   148a0:	f001 fe7c 	bl	1659c <memcpy>
		txBufferLength += quantity;
   148a4:	f895 312f 	ldrb.w	r3, [r5, #303]	; 0x12f
}
   148a8:	4620      	mov	r0, r4
		txBufferLength += quantity;
   148aa:	4423      	add	r3, r4
   148ac:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
}
   148b0:	bd38      	pop	{r3, r4, r5, pc}
   148b2:	2201      	movs	r2, #1
   148b4:	6042      	str	r2, [r0, #4]
   148b6:	e7ef      	b.n	14898 <TwoWire::write(unsigned char const*, unsigned int)+0x1c>

000148b8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>:
	constexpr TwoWire(IMXRT_LPI2C_t *myport, const I2C_Hardware_t &myhardware)
   148b8:	b538      	push	{r3, r4, r5, lr}
	constexpr Print() : write_error(0) {}
   148ba:	2500      	movs	r5, #0
   148bc:	4613      	mov	r3, r2
   148be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   148c2:	4604      	mov	r4, r0
   148c4:	e9c0 5201 	strd	r5, r2, [r0, #4]
		: port(myport), hardware(myhardware) {
   148c8:	4815      	ldr	r0, [pc, #84]	; (14920 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)+0x68>)
   148ca:	2288      	movs	r2, #136	; 0x88
   148cc:	6121      	str	r1, [r4, #16]
   148ce:	4629      	mov	r1, r5
   148d0:	6020      	str	r0, [r4, #0]
   148d2:	f104 001a 	add.w	r0, r4, #26
   148d6:	6163      	str	r3, [r4, #20]
   148d8:	7325      	strb	r5, [r4, #12]
   148da:	7625      	strb	r5, [r4, #24]
   148dc:	7665      	strb	r5, [r4, #25]
   148de:	f00d fdff 	bl	224e0 <memset>
   148e2:	2289      	movs	r2, #137	; 0x89
   148e4:	4629      	mov	r1, r5
   148e6:	f104 00a5 	add.w	r0, r4, #165	; 0xa5
   148ea:	f884 50a2 	strb.w	r5, [r4, #162]	; 0xa2
   148ee:	f884 50a3 	strb.w	r5, [r4, #163]	; 0xa3
   148f2:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
   148f6:	f00d fdf3 	bl	224e0 <memset>
	}
   148fa:	4620      	mov	r0, r4
		: port(myport), hardware(myhardware) {
   148fc:	f884 512e 	strb.w	r5, [r4, #302]	; 0x12e
   14900:	f884 512f 	strb.w	r5, [r4, #303]	; 0x12f
   14904:	f884 5130 	strb.w	r5, [r4, #304]	; 0x130
   14908:	f884 5131 	strb.w	r5, [r4, #305]	; 0x131
   1490c:	f884 5132 	strb.w	r5, [r4, #306]	; 0x132
   14910:	f884 5133 	strb.w	r5, [r4, #307]	; 0x133
   14914:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
   14918:	e9c4 554e 	strd	r5, r5, [r4, #312]	; 0x138
	}
   1491c:	bd38      	pop	{r3, r4, r5, pc}
   1491e:	bf00      	nop
   14920:	200015d4 	.word	0x200015d4

00014924 <TwoWire::force_clock()>:
{
   14924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14928:	f8d0 a014 	ldr.w	sl, [r0, #20]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   1492c:	2415      	movs	r4, #21
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   1492e:	7e01      	ldrb	r1, [r0, #24]
{
   14930:	4681      	mov	r9, r0
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   14932:	7e43      	ldrb	r3, [r0, #25]
{
   14934:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14936:	eb0a 1101 	add.w	r1, sl, r1, lsl #4
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   1493a:	4a38      	ldr	r2, [pc, #224]	; (14a1c <TwoWire::force_clock()+0xf8>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   1493c:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14940:	4f37      	ldr	r7, [pc, #220]	; (14a20 <TwoWire::force_clock()+0xfc>)
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
   14942:	7a09      	ldrb	r1, [r1, #8]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
   14944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
   14948:	eb02 1501 	add.w	r5, r2, r1, lsl #4
   1494c:	0109      	lsls	r1, r1, #4
   1494e:	68e8      	ldr	r0, [r5, #12]
	*portSetRegister(sda_pin) = sda_mask;
   14950:	f852 8001 	ldr.w	r8, [r2, r1]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   14954:	eb02 1103 	add.w	r1, r2, r3, lsl #4
	*portConfigRegister(sda_pin) = 5 | 0x10;
   14958:	f8d5 b004 	ldr.w	fp, [r5, #4]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
   1495c:	011b      	lsls	r3, r3, #4
   1495e:	68ce      	ldr	r6, [r1, #12]
	*portSetRegister(scl_pin) = scl_mask;
   14960:	58d5      	ldr	r5, [r2, r3]
	*portConfigRegister(sda_pin) = 5 | 0x10;
   14962:	f8cb 4000 	str.w	r4, [fp]
	*portSetRegister(sda_pin) = sda_mask;
   14966:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
   1496a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   1496e:	684a      	ldr	r2, [r1, #4]
	*portModeRegister(sda_pin) |= sda_mask;
   14970:	4303      	orrs	r3, r0
	uint32_t begin = ARM_DWT_CYCCNT;
   14972:	492c      	ldr	r1, [pc, #176]	; (14a24 <TwoWire::force_clock()+0x100>)
	*portConfigRegister(scl_pin) = 5 | 0x10;
   14974:	9201      	str	r2, [sp, #4]
	*portModeRegister(sda_pin) |= sda_mask;
   14976:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
   1497a:	6014      	str	r4, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
   1497c:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
   14980:	686b      	ldr	r3, [r5, #4]
   14982:	4333      	orrs	r3, r6
   14984:	606b      	str	r3, [r5, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   14986:	4b28      	ldr	r3, [pc, #160]	; (14a28 <TwoWire::force_clock()+0x104>)
	uint32_t begin = ARM_DWT_CYCCNT;
   14988:	684c      	ldr	r4, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   1498a:	683a      	ldr	r2, [r7, #0]
   1498c:	fba3 3202 	umull	r3, r2, r3, r2
   14990:	0c92      	lsrs	r2, r2, #18
   14992:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   14996:	0052      	lsls	r2, r2, #1
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   14998:	684b      	ldr	r3, [r1, #4]
   1499a:	1b1b      	subs	r3, r3, r4
   1499c:	429a      	cmp	r2, r3
   1499e:	d8fb      	bhi.n	14998 <TwoWire::force_clock()+0x74>
   149a0:	f04f 0c09 	mov.w	ip, #9
	uint32_t begin = ARM_DWT_CYCCNT;
   149a4:	4a1f      	ldr	r2, [pc, #124]	; (14a24 <TwoWire::force_clock()+0x100>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   149a6:	f8df e080 	ldr.w	lr, [pc, #128]	; 14a28 <TwoWire::force_clock()+0x104>
		if ((*portInputRegister(sda_pin) & sda_mask)
   149aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
   149ae:	4203      	tst	r3, r0
   149b0:	d002      	beq.n	149b8 <TwoWire::force_clock()+0x94>
   149b2:	68ab      	ldr	r3, [r5, #8]
   149b4:	4233      	tst	r3, r6
   149b6:	d12f      	bne.n	14a18 <TwoWire::force_clock()+0xf4>
		*portClearRegister(scl_pin) = scl_mask;
   149b8:	f8c5 6088 	str.w	r6, [r5, #136]	; 0x88
	uint32_t begin = ARM_DWT_CYCCNT;
   149bc:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   149be:	6839      	ldr	r1, [r7, #0]
   149c0:	fbae 3101 	umull	r3, r1, lr, r1
   149c4:	0c89      	lsrs	r1, r1, #18
   149c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   149ca:	6853      	ldr	r3, [r2, #4]
   149cc:	1b1b      	subs	r3, r3, r4
   149ce:	4299      	cmp	r1, r3
   149d0:	d8fb      	bhi.n	149ca <TwoWire::force_clock()+0xa6>
		*portSetRegister(scl_pin) = scl_mask;
   149d2:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84
	uint32_t begin = ARM_DWT_CYCCNT;
   149d6:	6854      	ldr	r4, [r2, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
   149d8:	6839      	ldr	r1, [r7, #0]
   149da:	fbae 3101 	umull	r3, r1, lr, r1
   149de:	0c89      	lsrs	r1, r1, #18
   149e0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
   149e4:	6853      	ldr	r3, [r2, #4]
   149e6:	1b1b      	subs	r3, r3, r4
   149e8:	4299      	cmp	r1, r3
   149ea:	d8fb      	bhi.n	149e4 <TwoWire::force_clock()+0xc0>
	for (int i=0; i < 9; i++) {
   149ec:	f1bc 0c01 	subs.w	ip, ip, #1
   149f0:	d1db      	bne.n	149aa <TwoWire::force_clock()+0x86>
	bool ret = false;
   149f2:	4660      	mov	r0, ip
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   149f4:	f899 3018 	ldrb.w	r3, [r9, #24]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   149f8:	9a01      	ldr	r2, [sp, #4]
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
   149fa:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
   149fe:	68db      	ldr	r3, [r3, #12]
   14a00:	f8cb 3000 	str.w	r3, [fp]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
   14a04:	f899 3019 	ldrb.w	r3, [r9, #25]
   14a08:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
   14a0c:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
   14a10:	6013      	str	r3, [r2, #0]
}
   14a12:	b003      	add	sp, #12
   14a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = true;
   14a18:	2001      	movs	r0, #1
   14a1a:	e7eb      	b.n	149f4 <TwoWire::force_clock()+0xd0>
   14a1c:	200024c4 	.word	0x200024c4
   14a20:	2000328c 	.word	0x2000328c
   14a24:	e0001000 	.word	0xe0001000
   14a28:	431bde83 	.word	0x431bde83

00014a2c <TwoWire::wait_idle()>:
	return systick_millis_count;
   14a2c:	4a0e      	ldr	r2, [pc, #56]	; (14a68 <TwoWire::wait_idle()+0x3c>)
{
   14a2e:	b510      	push	{r4, lr}
   14a30:	6811      	ldr	r1, [r2, #0]
		uint32_t status = port->MSR; // pg 2899 & 2892
   14a32:	6904      	ldr	r4, [r0, #16]
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   14a34:	e005      	b.n	14a42 <TwoWire::wait_idle()+0x16>
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
   14a36:	01db      	lsls	r3, r3, #7
   14a38:	d407      	bmi.n	14a4a <TwoWire::wait_idle()+0x1e>
   14a3a:	6813      	ldr	r3, [r2, #0]
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
   14a3c:	1a5b      	subs	r3, r3, r1
		if (timeout > 16) {
   14a3e:	2b10      	cmp	r3, #16
   14a40:	d808      	bhi.n	14a54 <TwoWire::wait_idle()+0x28>
		uint32_t status = port->MSR; // pg 2899 & 2892
   14a42:	6963      	ldr	r3, [r4, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
   14a44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   14a48:	d1f5      	bne.n	14a36 <TwoWire::wait_idle()+0xa>
	port->MSR = 0x00007F00; // clear all prior flags
   14a4a:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
   14a4e:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
   14a50:	6163      	str	r3, [r4, #20]
}
   14a52:	bd10      	pop	{r4, pc}
			if (force_clock()) break;
   14a54:	f7ff ff66 	bl	14924 <TwoWire::force_clock()>
   14a58:	2800      	cmp	r0, #0
   14a5a:	d0fa      	beq.n	14a52 <TwoWire::wait_idle()+0x26>
	port->MSR = 0x00007F00; // clear all prior flags
   14a5c:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
   14a60:	2001      	movs	r0, #1
	port->MSR = 0x00007F00; // clear all prior flags
   14a62:	6163      	str	r3, [r4, #20]
	return true;
   14a64:	e7f5      	b.n	14a52 <TwoWire::wait_idle()+0x26>
   14a66:	bf00      	nop
   14a68:	2000bc24 	.word	0x2000bc24

00014a6c <TwoWire::endTransmission(unsigned char)>:
{
   14a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
   14a70:	f890 a12f 	ldrb.w	sl, [r0, #303]	; 0x12f
	if (!tx_len) return 4; // no address for transmit
   14a74:	f1ba 0f00 	cmp.w	sl, #0
   14a78:	d058      	beq.n	14b2c <TwoWire::endTransmission(unsigned char)+0xc0>
	if (!wait_idle()) return 4;
   14a7a:	4681      	mov	r9, r0
   14a7c:	4688      	mov	r8, r1
   14a7e:	f7ff ffd5 	bl	14a2c <TwoWire::wait_idle()>
   14a82:	2800      	cmp	r0, #0
   14a84:	d052      	beq.n	14b2c <TwoWire::endTransmission(unsigned char)+0xc0>
   14a86:	4e37      	ldr	r6, [pc, #220]	; (14b64 <TwoWire::endTransmission(unsigned char)+0xf8>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
   14a88:	2400      	movs	r4, #0
   14a8a:	6837      	ldr	r7, [r6, #0]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   14a8c:	e016      	b.n	14abc <TwoWire::endTransmission(unsigned char)+0x50>
		uint32_t status = port->MSR; // pg 2884 & 2891
   14a8e:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
   14a90:	051a      	lsls	r2, r3, #20
   14a92:	d444      	bmi.n	14b1e <TwoWire::endTransmission(unsigned char)+0xb2>
		if (status & LPI2C_MSR_NDF) {
   14a94:	0558      	lsls	r0, r3, #21
   14a96:	d458      	bmi.n	14b4a <TwoWire::endTransmission(unsigned char)+0xde>
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
   14a98:	0499      	lsls	r1, r3, #18
   14a9a:	d44c      	bmi.n	14b36 <TwoWire::endTransmission(unsigned char)+0xca>
   14a9c:	6832      	ldr	r2, [r6, #0]
	operator unsigned long () const { return millis() - ms; }
   14a9e:	1bd2      	subs	r2, r2, r7
   14aa0:	2a32      	cmp	r2, #50	; 0x32
   14aa2:	d848      	bhi.n	14b36 <TwoWire::endTransmission(unsigned char)+0xca>
		if (tx_index > tx_len) {
   14aa4:	4554      	cmp	r4, sl
   14aa6:	d907      	bls.n	14ab8 <TwoWire::endTransmission(unsigned char)+0x4c>
			uint32_t tx_fifo = port->MFSR & 0x07;
   14aa8:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   14aaa:	0752      	lsls	r2, r2, #29
   14aac:	d104      	bne.n	14ab8 <TwoWire::endTransmission(unsigned char)+0x4c>
   14aae:	059b      	lsls	r3, r3, #22
   14ab0:	d455      	bmi.n	14b5e <TwoWire::endTransmission(unsigned char)+0xf2>
   14ab2:	f1b8 0f00 	cmp.w	r8, #0
   14ab6:	d052      	beq.n	14b5e <TwoWire::endTransmission(unsigned char)+0xf2>
		yield();
   14ab8:	f003 fd8a 	bl	185d0 <yield>
		if (tx_index <= tx_len) {
   14abc:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   14abe:	f8d9 5010 	ldr.w	r5, [r9, #16]
		if (tx_index <= tx_len) {
   14ac2:	d8e4      	bhi.n	14a8e <TwoWire::endTransmission(unsigned char)+0x22>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   14ac4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
			while (fifo_used < 4) {
   14ac6:	0751      	lsls	r1, r2, #29
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
   14ac8:	f002 0307 	and.w	r3, r2, #7
			while (fifo_used < 4) {
   14acc:	d4df      	bmi.n	14a8e <TwoWire::endTransmission(unsigned char)+0x22>
   14ace:	e013      	b.n	14af8 <TwoWire::endTransmission(unsigned char)+0x8c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   14ad0:	f899 20a5 	ldrb.w	r2, [r9, #165]	; 0xa5
				fifo_used++;
   14ad4:	3301      	adds	r3, #1
			while (fifo_used < 4) {
   14ad6:	2402      	movs	r4, #2
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   14ad8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
			while (fifo_used < 4) {
   14adc:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
   14ade:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
   14ae0:	d027      	beq.n	14b32 <TwoWire::endTransmission(unsigned char)+0xc6>
				} else if (tx_index < tx_len) {
   14ae2:	458a      	cmp	sl, r1
				fifo_used++;
   14ae4:	f103 0301 	add.w	r3, r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14ae8:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
   14aec:	d90e      	bls.n	14b0c <TwoWire::endTransmission(unsigned char)+0xa0>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14aee:	f892 20a5 	ldrb.w	r2, [r2, #165]	; 0xa5
			while (fifo_used < 4) {
   14af2:	2b04      	cmp	r3, #4
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14af4:	662a      	str	r2, [r5, #96]	; 0x60
			while (fifo_used < 4) {
   14af6:	d0ca      	beq.n	14a8e <TwoWire::endTransmission(unsigned char)+0x22>
					tx_index = 1;
   14af8:	2101      	movs	r1, #1
				if (tx_index == 0) {
   14afa:	2c00      	cmp	r4, #0
   14afc:	d0e8      	beq.n	14ad0 <TwoWire::endTransmission(unsigned char)+0x64>
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14afe:	4621      	mov	r1, r4
				fifo_used++;
   14b00:	3301      	adds	r3, #1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14b02:	3401      	adds	r4, #1
				} else if (tx_index < tx_len) {
   14b04:	458a      	cmp	sl, r1
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
   14b06:	eb09 0201 	add.w	r2, r9, r1
				} else if (tx_index < tx_len) {
   14b0a:	d8f0      	bhi.n	14aee <TwoWire::endTransmission(unsigned char)+0x82>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   14b0c:	f1b8 0f00 	cmp.w	r8, #0
   14b10:	d0bd      	beq.n	14a8e <TwoWire::endTransmission(unsigned char)+0x22>
   14b12:	f44f 7300 	mov.w	r3, #512	; 0x200
   14b16:	662b      	str	r3, [r5, #96]	; 0x60
		uint32_t status = port->MSR; // pg 2884 & 2891
   14b18:	696b      	ldr	r3, [r5, #20]
		if (status & LPI2C_MSR_ALF) {
   14b1a:	051a      	lsls	r2, r3, #20
   14b1c:	d5ba      	bpl.n	14a94 <TwoWire::endTransmission(unsigned char)+0x28>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14b1e:	692b      	ldr	r3, [r5, #16]
			return 4; // we lost bus arbitration to another master
   14b20:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14b22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14b26:	612b      	str	r3, [r5, #16]
}
   14b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!tx_len) return 4; // no address for transmit
   14b2c:	2004      	movs	r0, #4
}
   14b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					tx_index = 1;
   14b32:	2401      	movs	r4, #1
   14b34:	e7ab      	b.n	14a8e <TwoWire::endTransmission(unsigned char)+0x22>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14b36:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14b38:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
   14b3c:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14b3e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14b42:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14b44:	662a      	str	r2, [r5, #96]	; 0x60
}
   14b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14b4a:	692b      	ldr	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   14b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
   14b50:	2002      	movs	r0, #2
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14b52:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14b56:	612b      	str	r3, [r5, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
   14b58:	662a      	str	r2, [r5, #96]	; 0x60
}
   14b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				return 0;
   14b5e:	2000      	movs	r0, #0
   14b60:	e7e5      	b.n	14b2e <TwoWire::endTransmission(unsigned char)+0xc2>
   14b62:	bf00      	nop
   14b64:	2000bc24 	.word	0x2000bc24

00014b68 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
{
   14b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14b6c:	4682      	mov	sl, r0
   14b6e:	460c      	mov	r4, r1
   14b70:	4615      	mov	r5, r2
   14b72:	461f      	mov	r7, r3
	if (!wait_idle()) return 4;
   14b74:	f7ff ff5a 	bl	14a2c <TwoWire::wait_idle()>
   14b78:	2800      	cmp	r0, #0
   14b7a:	f000 808f 	beq.w	14c9c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x134>
	address = (address & 0x7F) << 1;
   14b7e:	0063      	lsls	r3, r4, #1
	rxBufferIndex = 0;
   14b80:	2100      	movs	r1, #0
   14b82:	2d01      	cmp	r5, #1
   14b84:	f8df 811c 	ldr.w	r8, [pc, #284]	; 14ca4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x13c>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   14b88:	b2db      	uxtb	r3, r3
   14b8a:	f240 4601 	movw	r6, #1025	; 0x401
   14b8e:	bf38      	it	cc
   14b90:	2501      	movcc	r5, #1
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
   14b92:	460c      	mov	r4, r1
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   14b94:	431e      	orrs	r6, r3
   14b96:	f8d8 9000 	ldr.w	r9, [r8]
	rxBufferIndex = 0;
   14b9a:	f8aa 10a2 	strh.w	r1, [sl, #162]	; 0xa2
	elapsedMillis(unsigned long val) { ms = millis() - val; }
   14b9e:	e01e      	b.n	14bde <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x76>
		if (rxBufferLength < sizeof(rxBuffer)) {
   14ba0:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
   14ba4:	2b87      	cmp	r3, #135	; 0x87
   14ba6:	d93d      	bls.n	14c24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		uint32_t status = port->MSR; // pg 2884 & 2891
   14ba8:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
   14baa:	050b      	lsls	r3, r1, #20
   14bac:	d457      	bmi.n	14c5e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf6>
		if ((status & LPI2C_MSR_NDF) || (status & LPI2C_MSR_PLTF) || timeout > 50) {
   14bae:	f411 5f10 	tst.w	r1, #9216	; 0x2400
   14bb2:	d167      	bne.n	14c84 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
   14bb4:	f8d8 3000 	ldr.w	r3, [r8]
	operator unsigned long () const { return millis() - ms; }
   14bb8:	eba3 0309 	sub.w	r3, r3, r9
   14bbc:	2b32      	cmp	r3, #50	; 0x32
   14bbe:	d861      	bhi.n	14c84 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
		if (rxBufferLength >= length && tx_state >= 3) {
   14bc0:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
   14bc4:	42ab      	cmp	r3, r5
   14bc6:	d308      	bcc.n	14bda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
   14bc8:	2c02      	cmp	r4, #2
   14bca:	d906      	bls.n	14bda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
			uint32_t tx_fifo = port->MFSR & 0x07;
   14bcc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
   14bce:	0758      	lsls	r0, r3, #29
   14bd0:	d103      	bne.n	14bda <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x72>
   14bd2:	058b      	lsls	r3, r1, #22
   14bd4:	d447      	bmi.n	14c66 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
   14bd6:	2f00      	cmp	r7, #0
   14bd8:	d045      	beq.n	14c66 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xfe>
		yield();
   14bda:	f003 fcf9 	bl	185d0 <yield>
		if (tx_state < 3) {
   14bde:	2c02      	cmp	r4, #2
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
   14be0:	f8da 2010 	ldr.w	r2, [sl, #16]
		if (tx_state < 3) {
   14be4:	d8dc      	bhi.n	14ba0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
   14be6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			while (tx_fifo < 4 && tx_state < 3) {
   14be8:	0759      	lsls	r1, r3, #29
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
   14bea:	f003 0007 	and.w	r0, r3, #7
			while (tx_fifo < 4 && tx_state < 3) {
   14bee:	d4d7      	bmi.n	14ba0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
   14bf0:	4621      	mov	r1, r4
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   14bf2:	1e6c      	subs	r4, r5, #1
   14bf4:	4408      	add	r0, r1
   14bf6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
				if (tx_state == 0) {
   14bfa:	b941      	cbnz	r1, 14c0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa6>
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
   14bfc:	6616      	str	r6, [r2, #96]	; 0x60
				tx_state++;
   14bfe:	3101      	adds	r1, #1
			while (tx_fifo < 4 && tx_state < 3) {
   14c00:	1a43      	subs	r3, r0, r1
   14c02:	2b03      	cmp	r3, #3
   14c04:	d801      	bhi.n	14c0a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xa2>
   14c06:	2902      	cmp	r1, #2
   14c08:	d9f7      	bls.n	14bfa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x92>
				tx_state++;
   14c0a:	460c      	mov	r4, r1
   14c0c:	e7c8      	b.n	14ba0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x38>
				} else if (tx_state == 1) {
   14c0e:	2901      	cmp	r1, #1
   14c10:	d031      	beq.n	14c76 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x10e>
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
   14c12:	b117      	cbz	r7, 14c1a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb2>
   14c14:	f44f 7300 	mov.w	r3, #512	; 0x200
   14c18:	6613      	str	r3, [r2, #96]	; 0x60
		if (rxBufferLength < sizeof(rxBuffer)) {
   14c1a:	f89a 30a3 	ldrb.w	r3, [sl, #163]	; 0xa3
				tx_state++;
   14c1e:	2403      	movs	r4, #3
		if (rxBufferLength < sizeof(rxBuffer)) {
   14c20:	2b87      	cmp	r3, #135	; 0x87
   14c22:	d8c1      	bhi.n	14ba8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14c24:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14c26:	f411 2fe0 	tst.w	r1, #458752	; 0x70000
			uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14c2a:	f3c1 4e02 	ubfx	lr, r1, #16, #3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14c2e:	d0bb      	beq.n	14ba8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
   14c30:	1c59      	adds	r1, r3, #1
   14c32:	449e      	add	lr, r3
   14c34:	3319      	adds	r3, #25
   14c36:	b2c9      	uxtb	r1, r1
   14c38:	fa5f fe8e 	uxtb.w	lr, lr
   14c3c:	fa5a f383 	uxtab	r3, sl, r3
				rxBuffer[rxBufferLength++] = port->MRDR;
   14c40:	f8d2 c070 	ldr.w	ip, [r2, #112]	; 0x70
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14c44:	1c48      	adds	r0, r1, #1
   14c46:	4571      	cmp	r1, lr
				rxBuffer[rxBufferLength++] = port->MRDR;
   14c48:	f88a 10a3 	strb.w	r1, [sl, #163]	; 0xa3
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14c4c:	b2c1      	uxtb	r1, r0
				rxBuffer[rxBufferLength++] = port->MRDR;
   14c4e:	f803 cf01 	strb.w	ip, [r3, #1]!
			while (rx_fifo > 0 && rxBufferLength < sizeof(rxBuffer)) {
   14c52:	d0a9      	beq.n	14ba8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x40>
   14c54:	2989      	cmp	r1, #137	; 0x89
   14c56:	d1f3      	bne.n	14c40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xd8>
		uint32_t status = port->MSR; // pg 2884 & 2891
   14c58:	6951      	ldr	r1, [r2, #20]
		if (status & LPI2C_MSR_ALF) {
   14c5a:	050b      	lsls	r3, r1, #20
   14c5c:	d5a7      	bpl.n	14bae <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x46>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14c5e:	6913      	ldr	r3, [r2, #16]
   14c60:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14c64:	6113      	str	r3, [r2, #16]
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14c66:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   14c68:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   14c6c:	d105      	bne.n	14c7a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	return rxBufferLength;
   14c6e:	f89a 00a3 	ldrb.w	r0, [sl, #163]	; 0xa3
}
   14c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
   14c76:	6614      	str	r4, [r2, #96]	; 0x60
   14c78:	e7c1      	b.n	14bfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x96>
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   14c7a:	6913      	ldr	r3, [r2, #16]
   14c7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   14c80:	6113      	str	r3, [r2, #16]
   14c82:	e7f4      	b.n	14c6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14c84:	6913      	ldr	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14c86:	f44f 7100 	mov.w	r1, #512	; 0x200
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
   14c8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
   14c8e:	6113      	str	r3, [r2, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
   14c90:	6611      	str	r1, [r2, #96]	; 0x60
	uint32_t rx_fifo = (port->MFSR >> 16) & 0x07;
   14c92:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
	if (rx_fifo > 0) port->MCR |= LPI2C_MCR_RRF;
   14c94:	f413 2fe0 	tst.w	r3, #458752	; 0x70000
   14c98:	d0e9      	beq.n	14c6e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x106>
   14c9a:	e7ee      	b.n	14c7a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x112>
	if (!wait_idle()) return 4;
   14c9c:	2004      	movs	r0, #4
}
   14c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14ca2:	bf00      	nop
   14ca4:	2000bc24 	.word	0x2000bc24

00014ca8 <TwoWire::isr()>:
	uint32_t status = port->SSR;
   14ca8:	6903      	ldr	r3, [r0, #16]
{
   14caa:	b570      	push	{r4, r5, r6, lr}
	uint32_t status = port->SSR;
   14cac:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
{
   14cb0:	4604      	mov	r4, r0
	if (w1c_bits) port->SSR = w1c_bits;
   14cb2:	f415 6270 	ands.w	r2, r5, #3840	; 0xf00
   14cb6:	d001      	beq.n	14cbc <TwoWire::isr()+0x14>
   14cb8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	if (status & LPI2C_SSR_RDF) { // Receive Data Flag
   14cbc:	07ae      	lsls	r6, r5, #30
   14cbe:	d50b      	bpl.n	14cd8 <TwoWire::isr()+0x30>
		int rx = port->SRDR;
   14cc0:	f8d3 1170 	ldr.w	r1, [r3, #368]	; 0x170
		if (rx & 0x8000) {
   14cc4:	0408      	lsls	r0, r1, #16
   14cc6:	d53e      	bpl.n	14d46 <TwoWire::isr()+0x9e>
			rxBufferIndex = 0;
   14cc8:	2200      	movs	r2, #0
   14cca:	2001      	movs	r0, #1
   14ccc:	f884 20a2 	strb.w	r2, [r4, #162]	; 0xa2
			rxBuffer[rxBufferLength++] = rx & 255;
   14cd0:	4422      	add	r2, r4
   14cd2:	f884 00a3 	strb.w	r0, [r4, #163]	; 0xa3
   14cd6:	7691      	strb	r1, [r2, #26]
	if (status & LPI2C_SSR_TDF) { // Transmit Data Flag
   14cd8:	07ea      	lsls	r2, r5, #31
   14cda:	d510      	bpl.n	14cfe <TwoWire::isr()+0x56>
		if (!transmitting) {
   14cdc:	f894 6130 	ldrb.w	r6, [r4, #304]	; 0x130
   14ce0:	b1f6      	cbz	r6, 14d20 <TwoWire::isr()+0x78>
		if (txBufferIndex < txBufferLength) {
   14ce2:	f894 612e 	ldrb.w	r6, [r4, #302]	; 0x12e
   14ce6:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
   14cea:	42b2      	cmp	r2, r6
   14cec:	d927      	bls.n	14d3e <TwoWire::isr()+0x96>
			port->STDR = txBuffer[txBufferIndex++];
   14cee:	1c72      	adds	r2, r6, #1
   14cf0:	4426      	add	r6, r4
   14cf2:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
   14cf6:	f896 20a5 	ldrb.w	r2, [r6, #165]	; 0xa5
   14cfa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	if (status & LPI2C_SSR_SDF) { // Stop
   14cfe:	05ab      	lsls	r3, r5, #22
   14d00:	d50d      	bpl.n	14d1e <TwoWire::isr()+0x76>
		if (rxBufferLength > 0 && user_onReceive != nullptr) {
   14d02:	f894 00a3 	ldrb.w	r0, [r4, #163]	; 0xa3
   14d06:	b118      	cbz	r0, 14d10 <TwoWire::isr()+0x68>
   14d08:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   14d0c:	b103      	cbz	r3, 14d10 <TwoWire::isr()+0x68>
			(*user_onReceive)(rxBufferLength);
   14d0e:	4798      	blx	r3
		rxBufferIndex = 0;
   14d10:	2300      	movs	r3, #0
   14d12:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
		txBufferIndex = 0;
   14d16:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
		transmitting = 0;
   14d1a:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
}
   14d1e:	bd70      	pop	{r4, r5, r6, pc}
			if (user_onRequest != nullptr) {
   14d20:	f8d4 2138 	ldr.w	r2, [r4, #312]	; 0x138
   14d24:	b10a      	cbz	r2, 14d2a <TwoWire::isr()+0x82>
				(*user_onRequest)();
   14d26:	4790      	blx	r2
			port->STDR = txBuffer[txBufferIndex++];
   14d28:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 0;
   14d2a:	2200      	movs	r2, #0
   14d2c:	f884 212e 	strb.w	r2, [r4, #302]	; 0x12e
			transmitting = 1;
   14d30:	2201      	movs	r2, #1
   14d32:	f884 2130 	strb.w	r2, [r4, #304]	; 0x130
		if (txBufferIndex < txBufferLength) {
   14d36:	f894 212f 	ldrb.w	r2, [r4, #303]	; 0x12f
   14d3a:	42b2      	cmp	r2, r6
   14d3c:	d8d7      	bhi.n	14cee <TwoWire::isr()+0x46>
			port->STDR = 0;
   14d3e:	2200      	movs	r2, #0
   14d40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
   14d44:	e7db      	b.n	14cfe <TwoWire::isr()+0x56>
		if (rxBufferLength < BUFFER_LENGTH) {
   14d46:	f894 20a3 	ldrb.w	r2, [r4, #163]	; 0xa3
   14d4a:	2a87      	cmp	r2, #135	; 0x87
   14d4c:	d8c4      	bhi.n	14cd8 <TwoWire::isr()+0x30>
			rxBuffer[rxBufferLength++] = rx & 255;
   14d4e:	1c50      	adds	r0, r2, #1
   14d50:	b2c0      	uxtb	r0, r0
   14d52:	e7bd      	b.n	14cd0 <TwoWire::isr()+0x28>

00014d54 <lpi2c1_isr()>:
void lpi2c1_isr(void) { Wire.isr(); }
   14d54:	4801      	ldr	r0, [pc, #4]	; (14d5c <lpi2c1_isr()+0x8>)
   14d56:	f7ff bfa7 	b.w	14ca8 <TwoWire::isr()>
   14d5a:	bf00      	nop
   14d5c:	20004bbc 	.word	0x20004bbc

00014d60 <lpi2c3_isr()>:
void lpi2c3_isr(void) { Wire1.isr(); }
   14d60:	4801      	ldr	r0, [pc, #4]	; (14d68 <lpi2c3_isr()+0x8>)
   14d62:	f7ff bfa1 	b.w	14ca8 <TwoWire::isr()>
   14d66:	bf00      	nop
   14d68:	20004cfc 	.word	0x20004cfc

00014d6c <lpi2c4_isr()>:
void lpi2c4_isr(void) { Wire2.isr(); }
   14d6c:	4801      	ldr	r0, [pc, #4]	; (14d74 <lpi2c4_isr()+0x8>)
   14d6e:	f7ff bf9b 	b.w	14ca8 <TwoWire::isr()>
   14d72:	bf00      	nop
   14d74:	20004e3c 	.word	0x20004e3c

00014d78 <_GLOBAL__sub_I__ZN7TwoWire5beginEv>:
}
   14d78:	b510      	push	{r4, lr}
TwoWire Wire(&IMXRT_LPI2C1, TwoWire::i2c1_hardware);
   14d7a:	4c09      	ldr	r4, [pc, #36]	; (14da0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x28>)
   14d7c:	4909      	ldr	r1, [pc, #36]	; (14da4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x2c>)
   14d7e:	4622      	mov	r2, r4
   14d80:	4809      	ldr	r0, [pc, #36]	; (14da8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x30>)
   14d82:	f7ff fd99 	bl	148b8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire1(&IMXRT_LPI2C3, TwoWire::i2c3_hardware);
   14d86:	f104 0250 	add.w	r2, r4, #80	; 0x50
   14d8a:	4908      	ldr	r1, [pc, #32]	; (14dac <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x34>)
   14d8c:	4808      	ldr	r0, [pc, #32]	; (14db0 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x38>)
   14d8e:	f7ff fd93 	bl	148b8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
	TwoWire Wire2(&IMXRT_LPI2C4, TwoWire::i2c4_hardware);
   14d92:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
   14d96:	4907      	ldr	r1, [pc, #28]	; (14db4 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x3c>)
   14d98:	4807      	ldr	r0, [pc, #28]	; (14db8 <_GLOBAL__sub_I__ZN7TwoWire5beginEv+0x40>)
   14d9a:	f7ff fd8d 	bl	148b8 <TwoWire::TwoWire(IMXRT_LPI2C_t*, TwoWire::I2C_Hardware_t const&)>
}
   14d9e:	bd10      	pop	{r4, pc}
   14da0:	60002fac 	.word	0x60002fac
   14da4:	403f0000 	.word	0x403f0000
   14da8:	20004bbc 	.word	0x20004bbc
   14dac:	403f8000 	.word	0x403f8000
   14db0:	20004cfc 	.word	0x20004cfc
   14db4:	403fc000 	.word	0x403fc000
   14db8:	20004e3c 	.word	0x20004e3c

00014dbc <AudioStream::update_all()>:
   14dbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   14dc0:	2240      	movs	r2, #64	; 0x40
   14dc2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
   14dc6:	4770      	bx	lr

00014dc8 <software_isr()>:
}

AudioStream * AudioStream::first_update = NULL;

void software_isr(void) // AudioStream::update_all()
{
   14dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	AudioStream *p;

	uint32_t totalcycles = ARM_DWT_CYCCNT;
	//digitalWriteFast(2, HIGH);
	for (p = AudioStream::first_update; p; p = p->next_update) {
   14dca:	4b14      	ldr	r3, [pc, #80]	; (14e1c <software_isr()+0x54>)
	uint32_t totalcycles = ARM_DWT_CYCCNT;
   14dcc:	4d14      	ldr	r5, [pc, #80]	; (14e20 <software_isr()+0x58>)
	for (p = AudioStream::first_update; p; p = p->next_update) {
   14dce:	681c      	ldr	r4, [r3, #0]
	uint32_t totalcycles = ARM_DWT_CYCCNT;
   14dd0:	686e      	ldr	r6, [r5, #4]
	for (p = AudioStream::first_update; p; p = p->next_update) {
   14dd2:	b19c      	cbz	r4, 14dfc <software_isr()+0x34>
		if (p->active) {
   14dd4:	7a23      	ldrb	r3, [r4, #8]
			uint32_t cycles = ARM_DWT_CYCCNT;
			p->update();
   14dd6:	4620      	mov	r0, r4
		if (p->active) {
   14dd8:	b16b      	cbz	r3, 14df6 <software_isr()+0x2e>
			p->update();
   14dda:	6823      	ldr	r3, [r4, #0]
			uint32_t cycles = ARM_DWT_CYCCNT;
   14ddc:	686f      	ldr	r7, [r5, #4]
			p->update();
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	4798      	blx	r3
			// TODO: traverse inputQueueArray and release
			// any input blocks that weren't consumed?
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   14de2:	686b      	ldr	r3, [r5, #4]
			p->cpu_cycles = cycles;
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   14de4:	88e1      	ldrh	r1, [r4, #6]
			cycles = (ARM_DWT_CYCCNT - cycles) >> 6;
   14de6:	1bdb      	subs	r3, r3, r7
			p->cpu_cycles = cycles;
   14de8:	f3c3 128f 	ubfx	r2, r3, #6, #16
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   14dec:	ebb1 1f93 	cmp.w	r1, r3, lsr #6
			p->cpu_cycles = cycles;
   14df0:	80a2      	strh	r2, [r4, #4]
			if (cycles > p->cpu_cycles_max) p->cpu_cycles_max = cycles;
   14df2:	bf38      	it	cc
   14df4:	80e2      	strhcc	r2, [r4, #6]
	for (p = AudioStream::first_update; p; p = p->next_update) {
   14df6:	6964      	ldr	r4, [r4, #20]
   14df8:	2c00      	cmp	r4, #0
   14dfa:	d1eb      	bne.n	14dd4 <software_isr()+0xc>
		}
	}
	//digitalWriteFast(2, LOW);
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   14dfc:	4b08      	ldr	r3, [pc, #32]	; (14e20 <software_isr()+0x58>)
	AudioStream::cpu_cycles_total = totalcycles;
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   14dfe:	4a09      	ldr	r2, [pc, #36]	; (14e24 <software_isr()+0x5c>)
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   14e00:	685b      	ldr	r3, [r3, #4]
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   14e02:	8810      	ldrh	r0, [r2, #0]
	totalcycles = (ARM_DWT_CYCCNT - totalcycles) >> 6;
   14e04:	1b9b      	subs	r3, r3, r6
	AudioStream::cpu_cycles_total = totalcycles;
   14e06:	4c08      	ldr	r4, [pc, #32]	; (14e28 <software_isr()+0x60>)
   14e08:	f3c3 118f 	ubfx	r1, r3, #6, #16
	if (totalcycles > AudioStream::cpu_cycles_total_max)
   14e0c:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
	AudioStream::cpu_cycles_total = totalcycles;
   14e10:	8021      	strh	r1, [r4, #0]
		AudioStream::cpu_cycles_total_max = totalcycles;
   14e12:	bf38      	it	cc
   14e14:	8011      	strhcc	r1, [r2, #0]

	asm("DSB");
   14e16:	f3bf 8f4f 	dsb	sy
}
   14e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14e1c:	20005038 	.word	0x20005038
   14e20:	e0001000 	.word	0xe0001000
   14e24:	2000c92a 	.word	0x2000c92a
   14e28:	2000c928 	.word	0x2000c928

00014e2c <AudioStream::allocate()>:
{
   14e2c:	b430      	push	{r4, r5}
	__disable_irq();
   14e2e:	b672      	cpsid	i
	index = memory_pool_first_mask;
   14e30:	4d24      	ldr	r5, [pc, #144]	; (14ec4 <AudioStream::allocate()+0x98>)
	p += index;
   14e32:	4c25      	ldr	r4, [pc, #148]	; (14ec8 <AudioStream::allocate()+0x9c>)
	index = memory_pool_first_mask;
   14e34:	882a      	ldrh	r2, [r5, #0]
		if (p >= end) {
   14e36:	f104 0170 	add.w	r1, r4, #112	; 0x70
	p += index;
   14e3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
		if (p >= end) {
   14e3e:	428b      	cmp	r3, r1
   14e40:	d23c      	bcs.n	14ebc <AudioStream::allocate()+0x90>
   14e42:	f104 016f 	add.w	r1, r4, #111	; 0x6f
   14e46:	1c50      	adds	r0, r2, #1
   14e48:	1ac9      	subs	r1, r1, r3
   14e4a:	eb00 0091 	add.w	r0, r0, r1, lsr #2
   14e4e:	e002      	b.n	14e56 <AudioStream::allocate()+0x2a>
		index++;
   14e50:	3201      	adds	r2, #1
		if (p >= end) {
   14e52:	4282      	cmp	r2, r0
   14e54:	d032      	beq.n	14ebc <AudioStream::allocate()+0x90>
		index++;
   14e56:	469c      	mov	ip, r3
		avail = *p;
   14e58:	f853 1b04 	ldr.w	r1, [r3], #4
		if (avail) break;
   14e5c:	2900      	cmp	r1, #0
   14e5e:	d0f7      	beq.n	14e50 <AudioStream::allocate()+0x24>
	n = __builtin_clz(avail);
   14e60:	fab1 f081 	clz	r0, r1
	avail &= ~(0x80000000 >> n);
   14e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   14e68:	40c3      	lsrs	r3, r0
   14e6a:	ea21 0103 	bic.w	r1, r1, r3
	*p = avail;
   14e6e:	f8cc 1000 	str.w	r1, [ip]
	if (!avail) index++;
   14e72:	b901      	cbnz	r1, 14e76 <AudioStream::allocate()+0x4a>
   14e74:	3201      	adds	r2, #1
	used = memory_used + 1;
   14e76:	4b15      	ldr	r3, [pc, #84]	; (14ecc <AudioStream::allocate()+0xa0>)
	memory_pool_first_mask = index;
   14e78:	802a      	strh	r2, [r5, #0]
	used = memory_used + 1;
   14e7a:	881a      	ldrh	r2, [r3, #0]
	memory_used = used;
   14e7c:	3201      	adds	r2, #1
   14e7e:	b291      	uxth	r1, r2
   14e80:	8019      	strh	r1, [r3, #0]
	__enable_irq();
   14e82:	b662      	cpsie	i
	index = p - memory_pool_available_mask;
   14e84:	ebac 0c04 	sub.w	ip, ip, r4
	block = memory_pool + ((index << 5) + (31 - n));
   14e88:	f641 737c 	movw	r3, #8060	; 0x1f7c
   14e8c:	ebc0 6400 	rsb	r4, r0, r0, lsl #24
	index = p - memory_pool_available_mask;
   14e90:	ea4f 0cac 	mov.w	ip, ip, asr #2
	block = memory_pool + ((index << 5) + (31 - n));
   14e94:	ebc0 1084 	rsb	r0, r0, r4, lsl #6
	block->ref_count = 1;
   14e98:	2401      	movs	r4, #1
	block = memory_pool + ((index << 5) + (31 - n));
   14e9a:	eb0c 1c8c 	add.w	ip, ip, ip, lsl #6
   14e9e:	eb03 13cc 	add.w	r3, r3, ip, lsl #7
   14ea2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   14ea6:	480a      	ldr	r0, [pc, #40]	; (14ed0 <AudioStream::allocate()+0xa4>)
   14ea8:	6800      	ldr	r0, [r0, #0]
	block->ref_count = 1;
   14eaa:	54c4      	strb	r4, [r0, r3]
	block = memory_pool + ((index << 5) + (31 - n));
   14eac:	4418      	add	r0, r3
	if (used > memory_used_max) memory_used_max = used;
   14eae:	4b09      	ldr	r3, [pc, #36]	; (14ed4 <AudioStream::allocate()+0xa8>)
   14eb0:	881c      	ldrh	r4, [r3, #0]
   14eb2:	4294      	cmp	r4, r2
}
   14eb4:	bc30      	pop	{r4, r5}
	if (used > memory_used_max) memory_used_max = used;
   14eb6:	bf38      	it	cc
   14eb8:	8019      	strhcc	r1, [r3, #0]
}
   14eba:	4770      	bx	lr
			__enable_irq();
   14ebc:	b662      	cpsie	i
			return NULL;
   14ebe:	2000      	movs	r0, #0
}
   14ec0:	bc30      	pop	{r4, r5}
   14ec2:	4770      	bx	lr
   14ec4:	2000c92c 	.word	0x2000c92c
   14ec8:	2000503c 	.word	0x2000503c
   14ecc:	2000c924 	.word	0x2000c924
   14ed0:	20005034 	.word	0x20005034
   14ed4:	2000c926 	.word	0x2000c926

00014ed8 <AudioStream::release(audio_block_struct*)>:
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   14ed8:	8842      	ldrh	r2, [r0, #2]
	__disable_irq();
   14eda:	b672      	cpsid	i
	if (block->ref_count > 1) {
   14edc:	7803      	ldrb	r3, [r0, #0]
   14ede:	2b01      	cmp	r3, #1
   14ee0:	d903      	bls.n	14eea <AudioStream::release(audio_block_struct*)+0x12>
		block->ref_count--;
   14ee2:	3b01      	subs	r3, #1
   14ee4:	7003      	strb	r3, [r0, #0]
	__enable_irq();
   14ee6:	b662      	cpsie	i
}
   14ee8:	4770      	bx	lr
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   14eea:	43d1      	mvns	r1, r2
	uint32_t index = block->memory_pool_index >> 5;
   14eec:	0953      	lsrs	r3, r2, #5
		memory_pool_available_mask[index] |= mask;
   14eee:	480b      	ldr	r0, [pc, #44]	; (14f1c <AudioStream::release(audio_block_struct*)+0x44>)
	uint32_t mask = (0x80000000 >> (31 - (block->memory_pool_index & 0x1F)));
   14ef0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   14ef4:	f001 011f 	and.w	r1, r1, #31
   14ef8:	40ca      	lsrs	r2, r1
		memory_pool_available_mask[index] |= mask;
   14efa:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
   14efe:	430a      	orrs	r2, r1
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   14f00:	4907      	ldr	r1, [pc, #28]	; (14f20 <AudioStream::release(audio_block_struct*)+0x48>)
   14f02:	f8b1 c000 	ldrh.w	ip, [r1]
		memory_pool_available_mask[index] |= mask;
   14f06:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   14f0a:	459c      	cmp	ip, r3
		memory_used--;
   14f0c:	4a05      	ldr	r2, [pc, #20]	; (14f24 <AudioStream::release(audio_block_struct*)+0x4c>)
		if (index < memory_pool_first_mask) memory_pool_first_mask = index;
   14f0e:	bf88      	it	hi
   14f10:	800b      	strhhi	r3, [r1, #0]
		memory_used--;
   14f12:	8813      	ldrh	r3, [r2, #0]
   14f14:	3b01      	subs	r3, #1
   14f16:	8013      	strh	r3, [r2, #0]
	__enable_irq();
   14f18:	b662      	cpsie	i
}
   14f1a:	4770      	bx	lr
   14f1c:	2000503c 	.word	0x2000503c
   14f20:	2000c92c 	.word	0x2000c92c
   14f24:	2000c924 	.word	0x2000c924

00014f28 <AudioStream::transmit(audio_block_struct*, unsigned char)>:
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   14f28:	68c3      	ldr	r3, [r0, #12]
   14f2a:	b913      	cbnz	r3, 14f32 <AudioStream::transmit(audio_block_struct*, unsigned char)+0xa>
   14f2c:	e01d      	b.n	14f6a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x42>
   14f2e:	68db      	ldr	r3, [r3, #12]
   14f30:	b1e3      	cbz	r3, 14f6c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x44>
		if (c->src_index == index) {
   14f32:	7a18      	ldrb	r0, [r3, #8]
   14f34:	4290      	cmp	r0, r2
   14f36:	d1fa      	bne.n	14f2e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x6>
{
   14f38:	b410      	push	{r4}
			if (c->dst->inputQueue[c->dest_index] == NULL) {
   14f3a:	6858      	ldr	r0, [r3, #4]
   14f3c:	f893 c009 	ldrb.w	ip, [r3, #9]
   14f40:	6900      	ldr	r0, [r0, #16]
   14f42:	f850 402c 	ldr.w	r4, [r0, ip, lsl #2]
   14f46:	b154      	cbz	r4, 14f5e <AudioStream::transmit(audio_block_struct*, unsigned char)+0x36>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   14f48:	68db      	ldr	r3, [r3, #12]
   14f4a:	b12b      	cbz	r3, 14f58 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x30>
		if (c->src_index == index) {
   14f4c:	7a18      	ldrb	r0, [r3, #8]
   14f4e:	4290      	cmp	r0, r2
   14f50:	d0f3      	beq.n	14f3a <AudioStream::transmit(audio_block_struct*, unsigned char)+0x12>
	for (AudioConnection *c = destination_list; c != NULL; c = c->next_dest) {
   14f52:	68db      	ldr	r3, [r3, #12]
   14f54:	2b00      	cmp	r3, #0
   14f56:	d1f9      	bne.n	14f4c <AudioStream::transmit(audio_block_struct*, unsigned char)+0x24>
}
   14f58:	f85d 4b04 	ldr.w	r4, [sp], #4
   14f5c:	4770      	bx	lr
				c->dst->inputQueue[c->dest_index] = block;
   14f5e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
				block->ref_count++;
   14f62:	7808      	ldrb	r0, [r1, #0]
   14f64:	3001      	adds	r0, #1
   14f66:	7008      	strb	r0, [r1, #0]
   14f68:	e7ee      	b.n	14f48 <AudioStream::transmit(audio_block_struct*, unsigned char)+0x20>
   14f6a:	4770      	bx	lr
   14f6c:	4770      	bx	lr
   14f6e:	bf00      	nop

00014f70 <AudioStream::receiveReadOnly(unsigned int)>:
	if (index >= num_inputs) return NULL;
   14f70:	7a43      	ldrb	r3, [r0, #9]
   14f72:	428b      	cmp	r3, r1
   14f74:	d906      	bls.n	14f84 <AudioStream::receiveReadOnly(unsigned int)+0x14>
	in = inputQueue[index];
   14f76:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   14f78:	2200      	movs	r2, #0
	in = inputQueue[index];
   14f7a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   14f7e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	return in;
   14f82:	4770      	bx	lr
	if (index >= num_inputs) return NULL;
   14f84:	2000      	movs	r0, #0
}
   14f86:	4770      	bx	lr

00014f88 <AudioStream::receiveWritable(unsigned int)>:
{
   14f88:	b538      	push	{r3, r4, r5, lr}
	if (index >= num_inputs) return NULL;
   14f8a:	7a43      	ldrb	r3, [r0, #9]
   14f8c:	428b      	cmp	r3, r1
   14f8e:	d91b      	bls.n	14fc8 <AudioStream::receiveWritable(unsigned int)+0x40>
	in = inputQueue[index];
   14f90:	6903      	ldr	r3, [r0, #16]
	inputQueue[index] = NULL;
   14f92:	2200      	movs	r2, #0
	in = inputQueue[index];
   14f94:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
	inputQueue[index] = NULL;
   14f98:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
	if (in && in->ref_count > 1) {
   14f9c:	b1a4      	cbz	r4, 14fc8 <AudioStream::receiveWritable(unsigned int)+0x40>
   14f9e:	7823      	ldrb	r3, [r4, #0]
   14fa0:	2b01      	cmp	r3, #1
   14fa2:	d801      	bhi.n	14fa8 <AudioStream::receiveWritable(unsigned int)+0x20>
}
   14fa4:	4620      	mov	r0, r4
   14fa6:	bd38      	pop	{r3, r4, r5, pc}
		p = allocate();
   14fa8:	f7ff ff40 	bl	14e2c <AudioStream::allocate()>
		if (p) memcpy(p->data, in->data, sizeof(p->data));
   14fac:	4605      	mov	r5, r0
   14fae:	b128      	cbz	r0, 14fbc <AudioStream::receiveWritable(unsigned int)+0x34>
   14fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
   14fb4:	1d21      	adds	r1, r4, #4
   14fb6:	3004      	adds	r0, #4
   14fb8:	f001 faf0 	bl	1659c <memcpy>
		in->ref_count--;
   14fbc:	7823      	ldrb	r3, [r4, #0]
   14fbe:	3b01      	subs	r3, #1
   14fc0:	7023      	strb	r3, [r4, #0]
		p = allocate();
   14fc2:	462c      	mov	r4, r5
}
   14fc4:	4620      	mov	r0, r4
   14fc6:	bd38      	pop	{r3, r4, r5, pc}
	if (index >= num_inputs) return NULL;
   14fc8:	2400      	movs	r4, #0
}
   14fca:	4620      	mov	r0, r4
   14fcc:	bd38      	pop	{r3, r4, r5, pc}
   14fce:	bf00      	nop

00014fd0 <AudioConnection::AudioConnection()>:
	: src(NULL), dst(NULL),
   14fd0:	2200      	movs	r2, #0
	next_dest = AudioStream::unused;
   14fd2:	4904      	ldr	r1, [pc, #16]	; (14fe4 <AudioConnection::AudioConnection()+0x14>)
	: src(NULL), dst(NULL),
   14fd4:	e9c0 2200 	strd	r2, r2, [r0]
	  src_index(0), dest_index(0),
   14fd8:	8102      	strh	r2, [r0, #8]
	  isConnected(false)
   14fda:	7402      	strb	r2, [r0, #16]
	next_dest = AudioStream::unused;
   14fdc:	680a      	ldr	r2, [r1, #0]
	AudioStream::unused = this;
   14fde:	6008      	str	r0, [r1, #0]
	next_dest = AudioStream::unused;
   14fe0:	60c2      	str	r2, [r0, #12]
}
   14fe2:	4770      	bx	lr
   14fe4:	200050ac 	.word	0x200050ac

00014fe8 <AudioConnection::connect()>:
		if (isConnected) // already connected
   14fe8:	7c03      	ldrb	r3, [r0, #16]
   14fea:	b9fb      	cbnz	r3, 1502c <AudioConnection::connect()+0x44>
		if (!src || !dst) // NULL src or dst - [old] Stream object destroyed
   14fec:	6803      	ldr	r3, [r0, #0]
   14fee:	4601      	mov	r1, r0
   14ff0:	b1fb      	cbz	r3, 15032 <AudioConnection::connect()+0x4a>
   14ff2:	6843      	ldr	r3, [r0, #4]
   14ff4:	b1eb      	cbz	r3, 15032 <AudioConnection::connect()+0x4a>
		if (dest_index >= dst->num_inputs) // input number too high
   14ff6:	7a42      	ldrb	r2, [r0, #9]
   14ff8:	7a5b      	ldrb	r3, [r3, #9]
   14ffa:	429a      	cmp	r2, r3
   14ffc:	d21c      	bcs.n	15038 <AudioConnection::connect()+0x50>
{
   14ffe:	b430      	push	{r4, r5}
		__disable_irq();
   15000:	b672      	cpsid	i
		s = AudioStream::first_update; // first AudioStream in the stream list
   15002:	4b2b      	ldr	r3, [pc, #172]	; (150b0 <AudioConnection::connect()+0xc8>)
   15004:	681c      	ldr	r4, [r3, #0]
		while (s) // go through all AudioStream objects
   15006:	b1ec      	cbz	r4, 15044 <AudioConnection::connect()+0x5c>
			p = s->destination_list;	// first patchCord in this stream's list
   15008:	68e3      	ldr	r3, [r4, #12]
			while (p)
   1500a:	b1c3      	cbz	r3, 1503e <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
   1500c:	6848      	ldr	r0, [r1, #4]
   1500e:	e001      	b.n	15014 <AudioConnection::connect()+0x2c>
				p = p->next_dest;
   15010:	68db      	ldr	r3, [r3, #12]
			while (p)
   15012:	b1a3      	cbz	r3, 1503e <AudioConnection::connect()+0x56>
				if (p->dst == dst && p->dest_index == dest_index) // same destination - it's in use!
   15014:	685a      	ldr	r2, [r3, #4]
   15016:	4282      	cmp	r2, r0
   15018:	d1fa      	bne.n	15010 <AudioConnection::connect()+0x28>
   1501a:	f893 c009 	ldrb.w	ip, [r3, #9]
   1501e:	7a4a      	ldrb	r2, [r1, #9]
   15020:	4594      	cmp	ip, r2
   15022:	d1f5      	bne.n	15010 <AudioConnection::connect()+0x28>
					__enable_irq();
   15024:	b662      	cpsie	i
					return 4;
   15026:	2004      	movs	r0, #4
}
   15028:	bc30      	pop	{r4, r5}
   1502a:	4770      	bx	lr
	int result = 1;
   1502c:	2001      	movs	r0, #1
	__enable_irq();
   1502e:	b662      	cpsie	i
}
   15030:	4770      	bx	lr
			result = 3;
   15032:	2003      	movs	r0, #3
	__enable_irq();
   15034:	b662      	cpsie	i
}
   15036:	4770      	bx	lr
			result = 2;
   15038:	2002      	movs	r0, #2
	__enable_irq();
   1503a:	b662      	cpsie	i
}
   1503c:	4770      	bx	lr
			s = s->next_update;
   1503e:	6964      	ldr	r4, [r4, #20]
		while (s) // go through all AudioStream objects
   15040:	2c00      	cmp	r4, #0
   15042:	d1e1      	bne.n	15008 <AudioConnection::connect()+0x20>
		pp = &AudioStream::unused;
   15044:	4c1b      	ldr	r4, [pc, #108]	; (150b4 <AudioConnection::connect()+0xcc>)
   15046:	6823      	ldr	r3, [r4, #0]
		while (*pp && *pp != this)
   15048:	b143      	cbz	r3, 1505c <AudioConnection::connect()+0x74>
   1504a:	4299      	cmp	r1, r3
   1504c:	d102      	bne.n	15054 <AudioConnection::connect()+0x6c>
   1504e:	e00b      	b.n	15068 <AudioConnection::connect()+0x80>
   15050:	4299      	cmp	r1, r3
   15052:	d007      	beq.n	15064 <AudioConnection::connect()+0x7c>
			pp = &((*pp)->next_dest);
   15054:	461a      	mov	r2, r3
   15056:	68db      	ldr	r3, [r3, #12]
		while (*pp && *pp != this)
   15058:	2b00      	cmp	r3, #0
   1505a:	d1f9      	bne.n	15050 <AudioConnection::connect()+0x68>
			result = 5;
   1505c:	2005      	movs	r0, #5
	__enable_irq();
   1505e:	b662      	cpsie	i
}
   15060:	bc30      	pop	{r4, r5}
   15062:	4770      	bx	lr
			pp = &((*pp)->next_dest);
   15064:	f102 040c 	add.w	r4, r2, #12
		p = src->destination_list; // first AudioConnection
   15068:	680d      	ldr	r5, [r1, #0]
   1506a:	68e8      	ldr	r0, [r5, #12]
		if (p == NULL) 
   1506c:	b1e8      	cbz	r0, 150aa <AudioConnection::connect()+0xc2>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
   1506e:	68c3      	ldr	r3, [r0, #12]
   15070:	b91b      	cbnz	r3, 1507a <AudioConnection::connect()+0x92>
   15072:	e008      	b.n	15086 <AudioConnection::connect()+0x9e>
   15074:	68da      	ldr	r2, [r3, #12]
   15076:	b13a      	cbz	r2, 15088 <AudioConnection::connect()+0xa0>
   15078:	4613      	mov	r3, r2
				if (&p->src == &this->src && &p->dst == &this->dst
   1507a:	4281      	cmp	r1, r0
   1507c:	4618      	mov	r0, r3
   1507e:	d1f9      	bne.n	15074 <AudioConnection::connect()+0x8c>
					__enable_irq();
   15080:	b662      	cpsie	i
					return 6;
   15082:	2006      	movs	r0, #6
   15084:	e7d0      	b.n	15028 <AudioConnection::connect()+0x40>
			while (p->next_dest)  // scan source Stream's connection list for duplicates
   15086:	4603      	mov	r3, r0
			p->next_dest = this; // end of list, can link ourselves in
   15088:	60d9      	str	r1, [r3, #12]
		*pp = next_dest;  // remove ourselves from the unused list
   1508a:	68cb      	ldr	r3, [r1, #12]
		next_dest = NULL; // we're last in the source's destination list
   1508c:	2000      	movs	r0, #0
		*pp = next_dest;  // remove ourselves from the unused list
   1508e:	6023      	str	r3, [r4, #0]
		src->active = true;
   15090:	2301      	movs	r3, #1
		next_dest = NULL; // we're last in the source's destination list
   15092:	60c8      	str	r0, [r1, #12]
		src->numConnections++;
   15094:	7aaa      	ldrb	r2, [r5, #10]
		src->active = true;
   15096:	722b      	strb	r3, [r5, #8]
		src->numConnections++;
   15098:	441a      	add	r2, r3
   1509a:	72aa      	strb	r2, [r5, #10]
		dst->numConnections++;
   1509c:	684a      	ldr	r2, [r1, #4]
   1509e:	7a94      	ldrb	r4, [r2, #10]
		dst->active = true;
   150a0:	7213      	strb	r3, [r2, #8]
		dst->numConnections++;
   150a2:	441c      	add	r4, r3
   150a4:	7294      	strb	r4, [r2, #10]
		isConnected = true;
   150a6:	740b      	strb	r3, [r1, #16]
		result = 0;
   150a8:	e7d9      	b.n	1505e <AudioConnection::connect()+0x76>
			src->destination_list = this;
   150aa:	60e9      	str	r1, [r5, #12]
   150ac:	e7ed      	b.n	1508a <AudioConnection::connect()+0xa2>
   150ae:	bf00      	nop
   150b0:	20005038 	.word	0x20005038
   150b4:	200050ac 	.word	0x200050ac

000150b8 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)>:
{
   150b8:	b510      	push	{r4, lr}
	if (!isConnected)
   150ba:	7c04      	ldrb	r4, [r0, #16]
{
   150bc:	f89d e008 	ldrb.w	lr, [sp, #8]
	if (!isConnected)
   150c0:	b10c      	cbz	r4, 150c6 <AudioConnection::connect(AudioStream&, unsigned char, AudioStream&, unsigned char)+0xe>
}
   150c2:	2001      	movs	r0, #1
   150c4:	bd10      	pop	{r4, pc}
		src_index = sourceOutput;
   150c6:	7202      	strb	r2, [r0, #8]
		dest_index = destinationInput;
   150c8:	f880 e009 	strb.w	lr, [r0, #9]
		dst = &destination;
   150cc:	e9c0 1300 	strd	r1, r3, [r0]
}
   150d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		result = connect();
   150d4:	f7ff bf88 	b.w	14fe8 <AudioConnection::connect()>

000150d8 <AudioConnection::disconnect()>:
{
   150d8:	b538      	push	{r3, r4, r5, lr}
	if (!isConnected) return 1;
   150da:	7c03      	ldrb	r3, [r0, #16]
   150dc:	2b00      	cmp	r3, #0
   150de:	d036      	beq.n	1514e <AudioConnection::disconnect()+0x76>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
   150e0:	6843      	ldr	r3, [r0, #4]
   150e2:	4604      	mov	r4, r0
   150e4:	7a42      	ldrb	r2, [r0, #9]
   150e6:	7a5b      	ldrb	r3, [r3, #9]
   150e8:	429a      	cmp	r2, r3
   150ea:	d238      	bcs.n	1515e <AudioConnection::disconnect()+0x86>
	__disable_irq();
   150ec:	b672      	cpsid	i
	p = src->destination_list;
   150ee:	6801      	ldr	r1, [r0, #0]
   150f0:	68cb      	ldr	r3, [r1, #12]
	if (p == NULL) {
   150f2:	2b00      	cmp	r3, #0
   150f4:	d02d      	beq.n	15152 <AudioConnection::disconnect()+0x7a>
	} else if (p == this) {
   150f6:	4298      	cmp	r0, r3
   150f8:	d033      	beq.n	15162 <AudioConnection::disconnect()+0x8a>
			if (p->next_dest == this) // found the parent of the disconnecting object
   150fa:	461a      	mov	r2, r3
   150fc:	68db      	ldr	r3, [r3, #12]
   150fe:	429c      	cmp	r4, r3
   15100:	d02a      	beq.n	15158 <AudioConnection::disconnect()+0x80>
		while (p)
   15102:	2b00      	cmp	r3, #0
   15104:	d1f9      	bne.n	150fa <AudioConnection::disconnect()+0x22>
	if(dst->inputQueue[dest_index] != NULL) {
   15106:	6862      	ldr	r2, [r4, #4]
   15108:	7a60      	ldrb	r0, [r4, #9]
   1510a:	6913      	ldr	r3, [r2, #16]
   1510c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   15110:	b148      	cbz	r0, 15126 <AudioConnection::disconnect()+0x4e>
		AudioStream::release(dst->inputQueue[dest_index]);
   15112:	f7ff fee1 	bl	14ed8 <AudioStream::release(audio_block_struct*)>
		__disable_irq();
   15116:	b672      	cpsid	i
		dst->inputQueue[dest_index] = NULL;
   15118:	6862      	ldr	r2, [r4, #4]
   1511a:	2500      	movs	r5, #0
   1511c:	7a60      	ldrb	r0, [r4, #9]
   1511e:	6913      	ldr	r3, [r2, #16]
	src->numConnections--;
   15120:	6821      	ldr	r1, [r4, #0]
		dst->inputQueue[dest_index] = NULL;
   15122:	f843 5020 	str.w	r5, [r3, r0, lsl #2]
	src->numConnections--;
   15126:	7a8b      	ldrb	r3, [r1, #10]
   15128:	3b01      	subs	r3, #1
   1512a:	b2db      	uxtb	r3, r3
   1512c:	728b      	strb	r3, [r1, #10]
	if (src->numConnections == 0) {
   1512e:	b903      	cbnz	r3, 15132 <AudioConnection::disconnect()+0x5a>
		src->active = false;
   15130:	720b      	strb	r3, [r1, #8]
	dst->numConnections--;
   15132:	7a93      	ldrb	r3, [r2, #10]
   15134:	3b01      	subs	r3, #1
   15136:	b2db      	uxtb	r3, r3
   15138:	7293      	strb	r3, [r2, #10]
	if (dst->numConnections == 0) {
   1513a:	b903      	cbnz	r3, 1513e <AudioConnection::disconnect()+0x66>
		dst->active = false;
   1513c:	7213      	strb	r3, [r2, #8]
	next_dest = dst->unused;
   1513e:	4b0a      	ldr	r3, [pc, #40]	; (15168 <AudioConnection::disconnect()+0x90>)
	isConnected = false;
   15140:	2000      	movs	r0, #0
	next_dest = dst->unused;
   15142:	681a      	ldr	r2, [r3, #0]
	isConnected = false;
   15144:	7420      	strb	r0, [r4, #16]
	dst->unused = this;
   15146:	601c      	str	r4, [r3, #0]
	next_dest = dst->unused;
   15148:	60e2      	str	r2, [r4, #12]
	__enable_irq();
   1514a:	b662      	cpsie	i
}
   1514c:	bd38      	pop	{r3, r4, r5, pc}
	if (!isConnected) return 1;
   1514e:	2001      	movs	r0, #1
}
   15150:	bd38      	pop	{r3, r4, r5, pc}
		__enable_irq();
   15152:	b662      	cpsie	i
		return 3;
   15154:	2003      	movs	r0, #3
}
   15156:	bd38      	pop	{r3, r4, r5, pc}
				p-> next_dest = this->next_dest; // skip parent's link past us
   15158:	68e3      	ldr	r3, [r4, #12]
   1515a:	60d3      	str	r3, [r2, #12]
				break;
   1515c:	e7d3      	b.n	15106 <AudioConnection::disconnect()+0x2e>
	if (dest_index >= dst->num_inputs) return 2; // should never happen!
   1515e:	2002      	movs	r0, #2
}
   15160:	bd38      	pop	{r3, r4, r5, pc}
		if (p->next_dest) {
   15162:	68c3      	ldr	r3, [r0, #12]
			src->destination_list = NULL;
   15164:	60cb      	str	r3, [r1, #12]
   15166:	e7ce      	b.n	15106 <AudioConnection::disconnect()+0x2e>
   15168:	200050ac 	.word	0x200050ac

0001516c <AudioConnection::~AudioConnection()>:
AudioConnection::~AudioConnection()
   1516c:	b510      	push	{r4, lr}
   1516e:	4604      	mov	r4, r0
	disconnect(); // disconnect ourselves: puts us on the unused list
   15170:	f7ff ffb2 	bl	150d8 <AudioConnection::disconnect()>
	pp = &AudioStream::unused;
   15174:	4a09      	ldr	r2, [pc, #36]	; (1519c <AudioConnection::~AudioConnection()+0x30>)
   15176:	6813      	ldr	r3, [r2, #0]
	while (*pp && *pp != this)
   15178:	b143      	cbz	r3, 1518c <AudioConnection::~AudioConnection()+0x20>
   1517a:	429c      	cmp	r4, r3
   1517c:	d102      	bne.n	15184 <AudioConnection::~AudioConnection()+0x18>
   1517e:	e008      	b.n	15192 <AudioConnection::~AudioConnection()+0x26>
   15180:	429c      	cmp	r4, r3
   15182:	d005      	beq.n	15190 <AudioConnection::~AudioConnection()+0x24>
		pp = &((*pp)->next_dest);
   15184:	461a      	mov	r2, r3
   15186:	68db      	ldr	r3, [r3, #12]
	while (*pp && *pp != this)
   15188:	2b00      	cmp	r3, #0
   1518a:	d1f9      	bne.n	15180 <AudioConnection::~AudioConnection()+0x14>
}
   1518c:	4620      	mov	r0, r4
   1518e:	bd10      	pop	{r4, pc}
		pp = &((*pp)->next_dest);
   15190:	320c      	adds	r2, #12
		*pp = next_dest; // remove ourselves from the unused list
   15192:	68e3      	ldr	r3, [r4, #12]
}
   15194:	4620      	mov	r0, r4
		*pp = next_dest; // remove ourselves from the unused list
   15196:	6013      	str	r3, [r2, #0]
}
   15198:	bd10      	pop	{r4, pc}
   1519a:	bf00      	nop
   1519c:	200050ac 	.word	0x200050ac

000151a0 <AudioStream::update_setup()>:
	if (update_scheduled) return false;
   151a0:	4b0c      	ldr	r3, [pc, #48]	; (151d4 <AudioStream::update_setup()+0x34>)
   151a2:	781a      	ldrb	r2, [r3, #0]
   151a4:	b99a      	cbnz	r2, 151ce <AudioStream::update_setup()+0x2e>
   151a6:	4a0c      	ldr	r2, [pc, #48]	; (151d8 <AudioStream::update_setup()+0x38>)
   151a8:	490c      	ldr	r1, [pc, #48]	; (151dc <AudioStream::update_setup()+0x3c>)
{
   151aa:	b410      	push	{r4}
   151ac:	f8c2 1158 	str.w	r1, [r2, #344]	; 0x158
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   151b0:	480b      	ldr	r0, [pc, #44]	; (151e0 <AudioStream::update_setup()+0x40>)
   151b2:	24d0      	movs	r4, #208	; 0xd0
	update_scheduled = true;
   151b4:	2201      	movs	r2, #1
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   151b6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	NVIC_SET_PRIORITY(IRQ_SOFTWARE, 208); // 255 = lowest priority
   151ba:	f880 4046 	strb.w	r4, [r0, #70]	; 0x46
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   151be:	2440      	movs	r4, #64	; 0x40
	update_scheduled = true;
   151c0:	4610      	mov	r0, r2
	NVIC_ENABLE_IRQ(IRQ_SOFTWARE);
   151c2:	f8c1 4108 	str.w	r4, [r1, #264]	; 0x108
}
   151c6:	f85d 4b04 	ldr.w	r4, [sp], #4
	update_scheduled = true;
   151ca:	701a      	strb	r2, [r3, #0]
}
   151cc:	4770      	bx	lr
	if (update_scheduled) return false;
   151ce:	2000      	movs	r0, #0
}
   151d0:	4770      	bx	lr
   151d2:	bf00      	nop
   151d4:	2000c947 	.word	0x2000c947
   151d8:	20004000 	.word	0x20004000
   151dc:	00014dc9 	.word	0x00014dc9
   151e0:	e000e400 	.word	0xe000e400

000151e4 <DMAChannel::begin(bool)>:
{
   151e4:	b430      	push	{r4, r5}
	__disable_irq();
   151e6:	b672      	cpsid	i
	if (!force_initialization && TCD && channel < DMA_MAX_CHANNELS
   151e8:	b921      	cbnz	r1, 151f4 <DMAChannel::begin(bool)+0x10>
   151ea:	6803      	ldr	r3, [r0, #0]
   151ec:	b113      	cbz	r3, 151f4 <DMAChannel::begin(bool)+0x10>
   151ee:	7902      	ldrb	r2, [r0, #4]
   151f0:	2a0f      	cmp	r2, #15
   151f2:	d93b      	bls.n	1526c <DMAChannel::begin(bool)+0x88>
	  && (dma_channel_allocated_mask & (1 << channel))
   151f4:	4c24      	ldr	r4, [pc, #144]	; (15288 <DMAChannel::begin(bool)+0xa4>)
   151f6:	8821      	ldrh	r1, [r4, #0]
{
   151f8:	2300      	movs	r3, #0
		if (!(dma_channel_allocated_mask & (1 << ch))) {
   151fa:	fa41 f203 	asr.w	r2, r1, r3
   151fe:	f012 0201 	ands.w	r2, r2, #1
   15202:	d008      	beq.n	15216 <DMAChannel::begin(bool)+0x32>
		if (++ch >= DMA_MAX_CHANNELS) {
   15204:	3301      	adds	r3, #1
   15206:	2b10      	cmp	r3, #16
   15208:	d1f7      	bne.n	151fa <DMAChannel::begin(bool)+0x16>
			__enable_irq();
   1520a:	b662      	cpsie	i
			TCD = (TCD_t *)0;
   1520c:	2200      	movs	r2, #0
			channel = DMA_MAX_CHANNELS;
   1520e:	7103      	strb	r3, [r0, #4]
			TCD = (TCD_t *)0;
   15210:	6002      	str	r2, [r0, #0]
}
   15212:	bc30      	pop	{r4, r5}
   15214:	4770      	bx	lr
			dma_channel_allocated_mask |= (1 << ch);
   15216:	f04f 0c01 	mov.w	ip, #1
   1521a:	fa0c fc03 	lsl.w	ip, ip, r3
   1521e:	ea41 010c 	orr.w	r1, r1, ip
   15222:	8021      	strh	r1, [r4, #0]
			__enable_irq();
   15224:	b662      	cpsie	i
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   15226:	4919      	ldr	r1, [pc, #100]	; (1528c <DMAChannel::begin(bool)+0xa8>)
	channel = ch;
   15228:	fa5f fc83 	uxtb.w	ip, r3
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   1522c:	4c18      	ldr	r4, [pc, #96]	; (15290 <DMAChannel::begin(bool)+0xac>)
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   1522e:	4419      	add	r1, r3
	channel = ch;
   15230:	f880 c004 	strb.w	ip, [r0, #4]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   15234:	014b      	lsls	r3, r1, #5
	CCM_CCGR5 |= CCM_CCGR5_DMA(CCM_CCGR_ON);
   15236:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   15238:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
   1523c:	67e1      	str	r1, [r4, #124]	; 0x7c
	DMA_CR = DMA_CR_GRP1PRI | DMA_CR_EMLM | DMA_CR_EDBG;
   1523e:	f240 4482 	movw	r4, #1154	; 0x482
   15242:	4914      	ldr	r1, [pc, #80]	; (15294 <DMAChannel::begin(bool)+0xb0>)
   15244:	600c      	str	r4, [r1, #0]
	DMA_CERQ = ch;
   15246:	f881 c01a 	strb.w	ip, [r1, #26]
	DMA_CERR = ch;
   1524a:	f881 c01e 	strb.w	ip, [r1, #30]
	DMA_CEEI = ch;
   1524e:	f881 c018 	strb.w	ip, [r1, #24]
	DMA_CINT = ch;
   15252:	f881 c01f 	strb.w	ip, [r1, #31]
	TCD = (TCD_t *)(0x400E9000 + ch * 32);
   15256:	6003      	str	r3, [r0, #0]
}
   15258:	bc30      	pop	{r4, r5}
	*p++ = 0;
   1525a:	e9c3 2200 	strd	r2, r2, [r3]
	*p++ = 0;
   1525e:	e9c3 2202 	strd	r2, r2, [r3, #8]
	*p++ = 0;
   15262:	e9c3 2204 	strd	r2, r2, [r3, #16]
	*p++ = 0;
   15266:	e9c3 2206 	strd	r2, r2, [r3, #24]
}
   1526a:	4770      	bx	lr
	  && (dma_channel_allocated_mask & (1 << channel))
   1526c:	4c06      	ldr	r4, [pc, #24]	; (15288 <DMAChannel::begin(bool)+0xa4>)
   1526e:	8821      	ldrh	r1, [r4, #0]
   15270:	fa41 f502 	asr.w	r5, r1, r2
   15274:	07ed      	lsls	r5, r5, #31
   15276:	d5bf      	bpl.n	151f8 <DMAChannel::begin(bool)+0x14>
	  && (uint32_t)TCD == (uint32_t)(0x400E9000 + channel * 32)) {
   15278:	4d04      	ldr	r5, [pc, #16]	; (1528c <DMAChannel::begin(bool)+0xa8>)
   1527a:	4415      	add	r5, r2
   1527c:	ebb3 1f45 	cmp.w	r3, r5, lsl #5
   15280:	d1ba      	bne.n	151f8 <DMAChannel::begin(bool)+0x14>
		__enable_irq();
   15282:	b662      	cpsie	i
		return;
   15284:	e7c5      	b.n	15212 <DMAChannel::begin(bool)+0x2e>
   15286:	bf00      	nop
   15288:	2000c932 	.word	0x2000c932
   1528c:	02007480 	.word	0x02007480
   15290:	400fc000 	.word	0x400fc000
   15294:	400e8000 	.word	0x400e8000

00015298 <DMAChannel::release()>:
	if (channel >= DMA_MAX_CHANNELS) return;
   15298:	7903      	ldrb	r3, [r0, #4]
   1529a:	2b0f      	cmp	r3, #15
   1529c:	d811      	bhi.n	152c2 <DMAChannel::release()+0x2a>
	DMA_CERQ = channel;
   1529e:	4a09      	ldr	r2, [pc, #36]	; (152c4 <DMAChannel::release()+0x2c>)
   152a0:	7693      	strb	r3, [r2, #26]
	__disable_irq();
   152a2:	b672      	cpsid	i
	dma_channel_allocated_mask &= ~(1 << channel);
   152a4:	4908      	ldr	r1, [pc, #32]	; (152c8 <DMAChannel::release()+0x30>)
   152a6:	2201      	movs	r2, #1
   152a8:	f890 c004 	ldrb.w	ip, [r0, #4]
   152ac:	880b      	ldrh	r3, [r1, #0]
   152ae:	fa02 f20c 	lsl.w	r2, r2, ip
   152b2:	ea23 0302 	bic.w	r3, r3, r2
   152b6:	800b      	strh	r3, [r1, #0]
	__enable_irq();
   152b8:	b662      	cpsie	i
	channel = DMA_MAX_CHANNELS;
   152ba:	2210      	movs	r2, #16
	TCD = (TCD_t *)0;
   152bc:	2300      	movs	r3, #0
	channel = DMA_MAX_CHANNELS;
   152be:	7102      	strb	r2, [r0, #4]
	TCD = (TCD_t *)0;
   152c0:	6003      	str	r3, [r0, #0]
}
   152c2:	4770      	bx	lr
   152c4:	400e8000 	.word	0x400e8000
   152c8:	2000c932 	.word	0x2000c932

000152cc <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   152cc:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   152d0:	b672      	cpsid	i
	if (_triggered == false) {
   152d2:	7f43      	ldrb	r3, [r0, #29]
   152d4:	b95b      	cbnz	r3, 152ee <EventResponder::triggerEventNotImmediate()+0x22>
		if (_type == EventTypeYield) {
   152d6:	7f01      	ldrb	r1, [r0, #28]
   152d8:	2901      	cmp	r1, #1
{
   152da:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
   152dc:	d00b      	beq.n	152f6 <EventResponder::triggerEventNotImmediate()+0x2a>
		} else if (_type == EventTypeInterrupt) {
   152de:	2903      	cmp	r1, #3
   152e0:	d013      	beq.n	1530a <EventResponder::triggerEventNotImmediate()+0x3e>
		_triggered = true;
   152e2:	2301      	movs	r3, #1
   152e4:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
   152e6:	b902      	cbnz	r2, 152ea <EventResponder::triggerEventNotImmediate()+0x1e>
   152e8:	b662      	cpsie	i
}
   152ea:	bc30      	pop	{r4, r5}
   152ec:	4770      	bx	lr
   152ee:	b90a      	cbnz	r2, 152f4 <EventResponder::triggerEventNotImmediate()+0x28>
   152f0:	b662      	cpsie	i
   152f2:	4770      	bx	lr
   152f4:	4770      	bx	lr
			if (firstYield == nullptr) {
   152f6:	4c12      	ldr	r4, [pc, #72]	; (15340 <EventResponder::triggerEventNotImmediate()+0x74>)
   152f8:	6821      	ldr	r1, [r4, #0]
   152fa:	b1b1      	cbz	r1, 1532a <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
   152fc:	4911      	ldr	r1, [pc, #68]	; (15344 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
   152fe:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
   15300:	680b      	ldr	r3, [r1, #0]
				lastYield = this;
   15302:	6008      	str	r0, [r1, #0]
				_prev = lastYield;
   15304:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   15306:	6158      	str	r0, [r3, #20]
				lastYield = this;
   15308:	e7eb      	b.n	152e2 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
   1530a:	4d0f      	ldr	r5, [pc, #60]	; (15348 <EventResponder::triggerEventNotImmediate()+0x7c>)
   1530c:	490f      	ldr	r1, [pc, #60]	; (1534c <EventResponder::triggerEventNotImmediate()+0x80>)
   1530e:	682c      	ldr	r4, [r5, #0]
   15310:	b18c      	cbz	r4, 15336 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
   15312:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
   15314:	680b      	ldr	r3, [r1, #0]
   15316:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
   15318:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   1531a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   1531e:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
   15322:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
   15324:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
   15328:	e7db      	b.n	152e2 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
   1532a:	4b06      	ldr	r3, [pc, #24]	; (15344 <EventResponder::triggerEventNotImmediate()+0x78>)
				firstYield = this;
   1532c:	6020      	str	r0, [r4, #0]
				lastYield = this;
   1532e:	6018      	str	r0, [r3, #0]
				_prev = nullptr;
   15330:	e9c0 1105 	strd	r1, r1, [r0, #20]
				lastYield = this;
   15334:	e7d5      	b.n	152e2 <EventResponder::triggerEventNotImmediate()+0x16>
				_prev = nullptr;
   15336:	e9c0 4405 	strd	r4, r4, [r0, #20]
				firstInterrupt = this;
   1533a:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
   1533c:	e7ed      	b.n	1531a <EventResponder::triggerEventNotImmediate()+0x4e>
   1533e:	bf00      	nop
   15340:	20005134 	.word	0x20005134
   15344:	20005140 	.word	0x20005140
   15348:	2000513c 	.word	0x2000513c
   1534c:	20005138 	.word	0x20005138

00015350 <EventResponder::runFromInterrupt()>:
{
   15350:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   15352:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   15356:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   15358:	4c0c      	ldr	r4, [pc, #48]	; (1538c <EventResponder::runFromInterrupt()+0x3c>)
   1535a:	6820      	ldr	r0, [r4, #0]
		if (first) {
   1535c:	b180      	cbz	r0, 15380 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
   1535e:	4e0c      	ldr	r6, [pc, #48]	; (15390 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
   15360:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
   15362:	6943      	ldr	r3, [r0, #20]
   15364:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
   15366:	b173      	cbz	r3, 15386 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
   15368:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
   1536a:	b902      	cbnz	r2, 1536e <EventResponder::runFromInterrupt()+0x1e>
   1536c:	b662      	cpsie	i
			(*(first->_function))(*first);
   1536e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
   15370:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
   15372:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   15374:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
   15378:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
   1537a:	6820      	ldr	r0, [r4, #0]
		if (first) {
   1537c:	2800      	cmp	r0, #0
   1537e:	d1f0      	bne.n	15362 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
   15380:	b902      	cbnz	r2, 15384 <EventResponder::runFromInterrupt()+0x34>
   15382:	b662      	cpsie	i
}
   15384:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
   15386:	6033      	str	r3, [r6, #0]
   15388:	e7ef      	b.n	1536a <EventResponder::runFromInterrupt()+0x1a>
   1538a:	bf00      	nop
   1538c:	2000513c 	.word	0x2000513c
   15390:	20005138 	.word	0x20005138

00015394 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
   15394:	f7ff bfdc 	b.w	15350 <EventResponder::runFromInterrupt()>

00015398 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
   15398:	4904      	ldr	r1, [pc, #16]	; (153ac <systick_isr+0x14>)
	systick_millis_count++;
   1539a:	4a05      	ldr	r2, [pc, #20]	; (153b0 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
   1539c:	6849      	ldr	r1, [r1, #4]
   1539e:	4b05      	ldr	r3, [pc, #20]	; (153b4 <systick_isr+0x1c>)
   153a0:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
   153a2:	6813      	ldr	r3, [r2, #0]
   153a4:	3301      	adds	r3, #1
   153a6:	6013      	str	r3, [r2, #0]
}
   153a8:	4770      	bx	lr
   153aa:	bf00      	nop
   153ac:	e0001000 	.word	0xe0001000
   153b0:	2000bc24 	.word	0x2000bc24
   153b4:	2000bc20 	.word	0x2000bc20

000153b8 <pit_isr()>:
#endif
}

//FASTRUN
static void pit_isr()
{
   153b8:	b510      	push	{r4, lr}

		}
	}
#else
	IMXRT_PIT_CHANNEL_t *channel= IMXRT_PIT_CHANNELS;
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   153ba:	4c13      	ldr	r4, [pc, #76]	; (15408 <pit_isr()+0x50>)
   153bc:	6823      	ldr	r3, [r4, #0]
   153be:	b113      	cbz	r3, 153c6 <pit_isr()+0xe>
   153c0:	4a12      	ldr	r2, [pc, #72]	; (1540c <pit_isr()+0x54>)
   153c2:	68d1      	ldr	r1, [r2, #12]
   153c4:	b9e1      	cbnz	r1, 15400 <pit_isr()+0x48>
	channel++;
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   153c6:	6863      	ldr	r3, [r4, #4]
   153c8:	b113      	cbz	r3, 153d0 <pit_isr()+0x18>
   153ca:	4a10      	ldr	r2, [pc, #64]	; (1540c <pit_isr()+0x54>)
   153cc:	69d1      	ldr	r1, [r2, #28]
   153ce:	b999      	cbnz	r1, 153f8 <pit_isr()+0x40>
	channel++;
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   153d0:	68a3      	ldr	r3, [r4, #8]
   153d2:	b113      	cbz	r3, 153da <pit_isr()+0x22>
   153d4:	4a0d      	ldr	r2, [pc, #52]	; (1540c <pit_isr()+0x54>)
   153d6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   153d8:	b951      	cbnz	r1, 153f0 <pit_isr()+0x38>
	channel++;
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   153da:	68e3      	ldr	r3, [r4, #12]
   153dc:	b13b      	cbz	r3, 153ee <pit_isr()+0x36>
   153de:	4a0b      	ldr	r2, [pc, #44]	; (1540c <pit_isr()+0x54>)
   153e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
   153e2:	b121      	cbz	r1, 153ee <pit_isr()+0x36>
   153e4:	2101      	movs	r1, #1
#endif
}
   153e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (funct_table[3] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[3]();}
   153ea:	63d1      	str	r1, [r2, #60]	; 0x3c
   153ec:	4718      	bx	r3
}
   153ee:	bd10      	pop	{r4, pc}
	if (funct_table[2] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[2]();}
   153f0:	2101      	movs	r1, #1
   153f2:	62d1      	str	r1, [r2, #44]	; 0x2c
   153f4:	4798      	blx	r3
   153f6:	e7f0      	b.n	153da <pit_isr()+0x22>
	if (funct_table[1] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[1]();}
   153f8:	2101      	movs	r1, #1
   153fa:	61d1      	str	r1, [r2, #28]
   153fc:	4798      	blx	r3
   153fe:	e7e7      	b.n	153d0 <pit_isr()+0x18>
	if (funct_table[0] != nullptr && channel->TFLG) {channel->TFLG = 1;funct_table[0]();}
   15400:	2101      	movs	r1, #1
   15402:	60d1      	str	r1, [r2, #12]
   15404:	4798      	blx	r3
   15406:	e7de      	b.n	153c6 <pit_isr()+0xe>
   15408:	200042c0 	.word	0x200042c0
   1540c:	40084100 	.word	0x40084100

00015410 <IntervalTimer::beginCycles(void (*)(), unsigned long)>:
	if (channel) {
   15410:	6803      	ldr	r3, [r0, #0]
{
   15412:	4684      	mov	ip, r0
   15414:	b410      	push	{r4}
	if (channel) {
   15416:	b373      	cbz	r3, 15476 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x66>
		channel->TCTRL = 0;
   15418:	2000      	movs	r0, #0
   1541a:	6098      	str	r0, [r3, #8]
		channel->TFLG = 1;
   1541c:	2001      	movs	r0, #1
   1541e:	60d8      	str	r0, [r3, #12]
	channel->LDVAL = cycles;
   15420:	601a      	str	r2, [r3, #0]
	int index = channel - IMXRT_PIT_CHANNELS;
   15422:	4a23      	ldr	r2, [pc, #140]	; (154b0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa0>)
	funct_table[index] = funct;
   15424:	4823      	ldr	r0, [pc, #140]	; (154b4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa4>)
	int index = channel - IMXRT_PIT_CHANNELS;
   15426:	441a      	add	r2, r3
   15428:	4c23      	ldr	r4, [pc, #140]	; (154b8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xa8>)
   1542a:	1112      	asrs	r2, r2, #4
	funct_table[index] = funct;
   1542c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	channel->TCTRL = 3;
   15430:	2003      	movs	r0, #3
	nvic_priorites[index] = nvic_priority;
   15432:	4922      	ldr	r1, [pc, #136]	; (154bc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xac>)
	channel->TCTRL = 3;
   15434:	6098      	str	r0, [r3, #8]
	nvic_priorites[index] = nvic_priority;
   15436:	f89c 3004 	ldrb.w	r3, [ip, #4]
   1543a:	4821      	ldr	r0, [pc, #132]	; (154c0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb0>)
   1543c:	548b      	strb	r3, [r1, r2]
		if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   1543e:	780b      	ldrb	r3, [r1, #0]
   15440:	784a      	ldrb	r2, [r1, #1]
   15442:	f8c0 4228 	str.w	r4, [r0, #552]	; 0x228
   15446:	4293      	cmp	r3, r2
   15448:	7888      	ldrb	r0, [r1, #2]
   1544a:	bf28      	it	cs
   1544c:	4613      	movcs	r3, r2
   1544e:	78ca      	ldrb	r2, [r1, #3]
   15450:	4283      	cmp	r3, r0
   15452:	bf28      	it	cs
   15454:	4603      	movcs	r3, r0
   15456:	4293      	cmp	r3, r2
   15458:	bf28      	it	cs
   1545a:	4613      	movcs	r3, r2
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   1545c:	4c19      	ldr	r4, [pc, #100]	; (154c4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb4>)
	NVIC_ENABLE_IRQ(IRQ_PIT);
   1545e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   15462:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
	return true;
   15466:	2001      	movs	r0, #1
	NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   15468:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
}
   1546c:	f85d 4b04 	ldr.w	r4, [sp], #4
	NVIC_ENABLE_IRQ(IRQ_PIT);
   15470:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
}
   15474:	4770      	bx	lr
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   15476:	4814      	ldr	r0, [pc, #80]	; (154c8 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xb8>)
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   15478:	4c14      	ldr	r4, [pc, #80]	; (154cc <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xbc>)
		CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   1547a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   1547c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   15480:	66c3      	str	r3, [r0, #108]	; 0x6c
		PIT_MCR = 1;
   15482:	2001      	movs	r0, #1
   15484:	4b12      	ldr	r3, [pc, #72]	; (154d0 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc0>)
   15486:	6018      	str	r0, [r3, #0]
		channel = IMXRT_PIT_CHANNELS;
   15488:	4812      	ldr	r0, [pc, #72]	; (154d4 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0xc4>)
   1548a:	4603      	mov	r3, r0
   1548c:	f8cc 0000 	str.w	r0, [ip]
			if (channel->TCTRL == 0) break;
   15490:	6898      	ldr	r0, [r3, #8]
   15492:	2800      	cmp	r0, #0
   15494:	d0c4      	beq.n	15420 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x10>
			if (++channel >= IMXRT_PIT_CHANNELS + NUM_CHANNELS) {
   15496:	3310      	adds	r3, #16
   15498:	42a3      	cmp	r3, r4
   1549a:	f8cc 3000 	str.w	r3, [ip]
   1549e:	d1f7      	bne.n	15490 <IntervalTimer::beginCycles(void (*)(), unsigned long)+0x80>
				channel = NULL;
   154a0:	2300      	movs	r3, #0
}
   154a2:	f85d 4b04 	ldr.w	r4, [sp], #4
				return false;
   154a6:	4618      	mov	r0, r3
				channel = NULL;
   154a8:	f8cc 3000 	str.w	r3, [ip]
}
   154ac:	4770      	bx	lr
   154ae:	bf00      	nop
   154b0:	bff7bf00 	.word	0xbff7bf00
   154b4:	200042c0 	.word	0x200042c0
   154b8:	000153b9 	.word	0x000153b9
   154bc:	2000332c 	.word	0x2000332c
   154c0:	20004000 	.word	0x20004000
   154c4:	e000e400 	.word	0xe000e400
   154c8:	400fc000 	.word	0x400fc000
   154cc:	40084140 	.word	0x40084140
   154d0:	40084000 	.word	0x40084000
   154d4:	40084100 	.word	0x40084100

000154d8 <IntervalTimer::end()>:
	if (channel) {
   154d8:	6802      	ldr	r2, [r0, #0]
   154da:	b322      	cbz	r2, 15526 <IntervalTimer::end()+0x4e>
		int index = channel - IMXRT_PIT_CHANNELS;
   154dc:	4b12      	ldr	r3, [pc, #72]	; (15528 <IntervalTimer::end()+0x50>)
		funct_table[index] = nullptr;
   154de:	2100      	movs	r1, #0
		nvic_priorites[index] = 255;
   154e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
		int index = channel - IMXRT_PIT_CHANNELS;
   154e4:	4413      	add	r3, r2
void IntervalTimer::end() {
   154e6:	b510      	push	{r4, lr}
		int index = channel - IMXRT_PIT_CHANNELS;
   154e8:	111b      	asrs	r3, r3, #4
		funct_table[index] = nullptr;
   154ea:	4c10      	ldr	r4, [pc, #64]	; (1552c <IntervalTimer::end()+0x54>)
		channel->TCTRL = 0;
   154ec:	6091      	str	r1, [r2, #8]
		funct_table[index] = nullptr;
   154ee:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
		channel->TFLG = 1;
   154f2:	2401      	movs	r4, #1
   154f4:	60d4      	str	r4, [r2, #12]
		nvic_priorites[index] = 255;
   154f6:	4a0e      	ldr	r2, [pc, #56]	; (15530 <IntervalTimer::end()+0x58>)
   154f8:	f802 c003 	strb.w	ip, [r2, r3]
			if (top_priority > nvic_priorites[i]) top_priority = nvic_priorites[i];
   154fc:	7813      	ldrb	r3, [r2, #0]
   154fe:	f892 c001 	ldrb.w	ip, [r2, #1]
   15502:	f892 e002 	ldrb.w	lr, [r2, #2]
   15506:	4563      	cmp	r3, ip
   15508:	bf28      	it	cs
   1550a:	4663      	movcs	r3, ip
   1550c:	f892 c003 	ldrb.w	ip, [r2, #3]
		NVIC_SET_PRIORITY(IRQ_PIT, top_priority);
   15510:	4a08      	ldr	r2, [pc, #32]	; (15534 <IntervalTimer::end()+0x5c>)
   15512:	4573      	cmp	r3, lr
   15514:	bf28      	it	cs
   15516:	4673      	movcs	r3, lr
   15518:	4563      	cmp	r3, ip
   1551a:	bf28      	it	cs
   1551c:	4663      	movcs	r3, ip
   1551e:	f882 307a 	strb.w	r3, [r2, #122]	; 0x7a
		channel = 0;
   15522:	6001      	str	r1, [r0, #0]
}
   15524:	bd10      	pop	{r4, pc}
   15526:	4770      	bx	lr
   15528:	bff7bf00 	.word	0xbff7bf00
   1552c:	200042c0 	.word	0x200042c0
   15530:	2000332c 	.word	0x2000332c
   15534:	e000e400 	.word	0xe000e400

00015538 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
   15538:	4608      	mov	r0, r1
   1553a:	f002 bfb5 	b.w	184a8 <usb_serial_putchar>
   1553e:	bf00      	nop

00015540 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
   15540:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
   15542:	b570      	push	{r4, r5, r6, lr}
		base = 10;
   15544:	bf08      	it	eq
   15546:	220a      	moveq	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
   15548:	b08a      	sub	sp, #40	; 0x28
	}


	if (n == 0) {
   1554a:	b391      	cbz	r1, 155b2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x72>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
   1554c:	f04f 0e21 	mov.w	lr, #33	; 0x21
   15550:	e001      	b.n	15556 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x16>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
   15552:	fa5f fe86 	uxtb.w	lr, r6
   15556:	f10e 36ff 	add.w	r6, lr, #4294967295	; 0xffffffff
			digit = n % base;
   1555a:	fbb1 f5f2 	udiv	r5, r1, r2
   1555e:	fb02 1415 	mls	r4, r2, r5, r1
   15562:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   15566:	2c09      	cmp	r4, #9
   15568:	f10c 0437 	add.w	r4, ip, #55	; 0x37
   1556c:	f10c 0c30 	add.w	ip, ip, #48	; 0x30
   15570:	bf98      	it	ls
   15572:	fa5f f48c 	uxtbls.w	r4, ip
   15576:	f10e 0c28 	add.w	ip, lr, #40	; 0x28
   1557a:	bf88      	it	hi
   1557c:	b2e4      	uxtbhi	r4, r4
			if (n == 0) break;
   1557e:	4291      	cmp	r1, r2
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   15580:	44ec      	add	ip, sp
			n /= base;
   15582:	4629      	mov	r1, r5
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   15584:	f80c 4c24 	strb.w	r4, [ip, #-36]
			if (n == 0) break;
   15588:	d2e3      	bcs.n	15552 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
   1558a:	b14b      	cbz	r3, 155a0 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x60>
		i--;
   1558c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
		buf[i] = '-';
   15590:	222d      	movs	r2, #45	; 0x2d
		i--;
   15592:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
   15596:	f10e 0328 	add.w	r3, lr, #40	; 0x28
   1559a:	446b      	add	r3, sp
   1559c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
   155a0:	6803      	ldr	r3, [r0, #0]
   155a2:	a901      	add	r1, sp, #4
   155a4:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
   155a8:	685b      	ldr	r3, [r3, #4]
   155aa:	4471      	add	r1, lr
   155ac:	4798      	blx	r3
}
   155ae:	b00a      	add	sp, #40	; 0x28
   155b0:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
   155b2:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
   155b4:	f04f 0e21 	mov.w	lr, #33	; 0x21
		buf[sizeof(buf) - 1] = '0';
   155b8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
   155bc:	e7e5      	b.n	1558a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4a>
   155be:	bf00      	nop

000155c0 <Print::write(unsigned char const*, unsigned int)>:
{
   155c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (buffer == nullptr) return 0;
   155c4:	460c      	mov	r4, r1
   155c6:	b1d1      	cbz	r1, 155fe <Print::write(unsigned char const*, unsigned int)+0x3e>
	while (size--) count += write(*buffer++);
   155c8:	b1ea      	cbz	r2, 15606 <Print::write(unsigned char const*, unsigned int)+0x46>
   155ca:	4680      	mov	r8, r0
   155cc:	188e      	adds	r6, r1, r2
	size_t count = 0;
   155ce:	2500      	movs	r5, #0
   155d0:	4f0e      	ldr	r7, [pc, #56]	; (1560c <Print::write(unsigned char const*, unsigned int)+0x4c>)
   155d2:	e004      	b.n	155de <Print::write(unsigned char const*, unsigned int)+0x1e>
   155d4:	f002 ff68 	bl	184a8 <usb_serial_putchar>
	while (size--) count += write(*buffer++);
   155d8:	42b4      	cmp	r4, r6
   155da:	4405      	add	r5, r0
   155dc:	d00c      	beq.n	155f8 <Print::write(unsigned char const*, unsigned int)+0x38>
   155de:	f8d8 3000 	ldr.w	r3, [r8]
   155e2:	f814 0b01 	ldrb.w	r0, [r4], #1
   155e6:	681b      	ldr	r3, [r3, #0]
   155e8:	42bb      	cmp	r3, r7
   155ea:	d0f3      	beq.n	155d4 <Print::write(unsigned char const*, unsigned int)+0x14>
   155ec:	4601      	mov	r1, r0
   155ee:	4640      	mov	r0, r8
   155f0:	4798      	blx	r3
   155f2:	42b4      	cmp	r4, r6
   155f4:	4405      	add	r5, r0
   155f6:	d1f2      	bne.n	155de <Print::write(unsigned char const*, unsigned int)+0x1e>
}
   155f8:	4628      	mov	r0, r5
   155fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   155fe:	460d      	mov	r5, r1
}
   15600:	4628      	mov	r0, r5
   15602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (buffer == nullptr) return 0;
   15606:	4615      	mov	r5, r2
   15608:	e7f6      	b.n	155f8 <Print::write(unsigned char const*, unsigned int)+0x38>
   1560a:	bf00      	nop
   1560c:	00015539 	.word	0x00015539

00015610 <Print::print(String const&)>:
{
   15610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	inline unsigned int length(void) const {return len;}
   15614:	688c      	ldr	r4, [r1, #8]
   15616:	b08a      	sub	sp, #40	; 0x28
	while (len > 0) {
   15618:	b1dc      	cbz	r4, 15652 <Print::print(String const&)+0x42>
	unsigned int index = 0;
   1561a:	2500      	movs	r5, #0
   1561c:	4688      	mov	r8, r1
   1561e:	4606      	mov	r6, r0
	size_t count = 0;
   15620:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
   15622:	462b      	mov	r3, r5
   15624:	2221      	movs	r2, #33	; 0x21
   15626:	a901      	add	r1, sp, #4
   15628:	4640      	mov	r0, r8
   1562a:	f000 fa9f 	bl	15b6c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
   1562e:	2c20      	cmp	r4, #32
   15630:	4622      	mov	r2, r4
		count += write(buffer, nbytes);
   15632:	6833      	ldr	r3, [r6, #0]
   15634:	bf28      	it	cs
   15636:	2220      	movcs	r2, #32
   15638:	a901      	add	r1, sp, #4
   1563a:	4630      	mov	r0, r6
   1563c:	685b      	ldr	r3, [r3, #4]
		len -= nbytes;
   1563e:	1aa4      	subs	r4, r4, r2
		index += nbytes;
   15640:	4415      	add	r5, r2
		count += write(buffer, nbytes);
   15642:	4798      	blx	r3
   15644:	4407      	add	r7, r0
	while (len > 0) {
   15646:	2c00      	cmp	r4, #0
   15648:	d1eb      	bne.n	15622 <Print::print(String const&)+0x12>
}
   1564a:	4638      	mov	r0, r7
   1564c:	b00a      	add	sp, #40	; 0x28
   1564e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	size_t count = 0;
   15652:	4627      	mov	r7, r4
}
   15654:	4638      	mov	r0, r7
   15656:	b00a      	add	sp, #40	; 0x28
   15658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001565c <Print::print(long)>:
	if (n < 0) {
   1565c:	2900      	cmp	r1, #0
   1565e:	db03      	blt.n	15668 <Print::print(long)+0xc>
	uint8_t sign=0;
   15660:	2300      	movs	r3, #0
	if (base == 0) {
   15662:	220a      	movs	r2, #10
   15664:	f7ff bf6c 	b.w	15540 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
		n = -n;
   15668:	4249      	negs	r1, r1
		sign = '-';
   1566a:	232d      	movs	r3, #45	; 0x2d
	if (base == 0) {
   1566c:	220a      	movs	r2, #10
   1566e:	f7ff bf67 	b.w	15540 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
   15672:	bf00      	nop

00015674 <Print::println()>:
{
   15674:	b500      	push	{lr}
	return write(buf, 2);
   15676:	6803      	ldr	r3, [r0, #0]
{
   15678:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
   1567a:	f640 2c0d 	movw	ip, #2573	; 0xa0d
	return write(buf, 2);
   1567e:	2202      	movs	r2, #2
   15680:	a901      	add	r1, sp, #4
   15682:	685b      	ldr	r3, [r3, #4]
	uint8_t buf[2]={'\r', '\n'};
   15684:	f8ad c004 	strh.w	ip, [sp, #4]
	return write(buf, 2);
   15688:	4798      	blx	r3
}
   1568a:	b003      	add	sp, #12
   1568c:	f85d fb04 	ldr.w	pc, [sp], #4

00015690 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   15690:	4b05      	ldr	r3, [pc, #20]	; (156a8 <_write+0x18>)
   15692:	2802      	cmp	r0, #2
   15694:	bf88      	it	hi
   15696:	4603      	movhi	r3, r0
{
   15698:	b410      	push	{r4}
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   1569a:	681c      	ldr	r4, [r3, #0]
   1569c:	4618      	mov	r0, r3
   1569e:	6863      	ldr	r3, [r4, #4]
}
   156a0:	f85d 4b04 	ldr.w	r4, [sp], #4
	return ((class Print *)file)->write((uint8_t *)ptr, len);
   156a4:	4718      	bx	r3
   156a6:	bf00      	nop
   156a8:	20003314 	.word	0x20003314

000156ac <Print::printf(char const*, ...)>:
{
   156ac:	b40e      	push	{r1, r2, r3}
   156ae:	b500      	push	{lr}
   156b0:	b082      	sub	sp, #8
   156b2:	aa03      	add	r2, sp, #12
   156b4:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(ap, format);
   156b8:	9201      	str	r2, [sp, #4]
	int retval = vdprintf((int)this, format, ap);
   156ba:	f00c fbed 	bl	21e98 <vdprintf>
}
   156be:	b002      	add	sp, #8
   156c0:	f85d eb04 	ldr.w	lr, [sp], #4
   156c4:	b003      	add	sp, #12
   156c6:	4770      	bx	lr

000156c8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
   156c8:	b95a      	cbnz	r2, 156e2 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1a>
		return write((uint8_t)n);
   156ca:	6803      	ldr	r3, [r0, #0]
   156cc:	b2c9      	uxtb	r1, r1
   156ce:	4a07      	ldr	r2, [pc, #28]	; (156ec <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x24>)
   156d0:	681b      	ldr	r3, [r3, #0]
   156d2:	4293      	cmp	r3, r2
{
   156d4:	b500      	push	{lr}
   156d6:	d106      	bne.n	156e6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x1e>
   156d8:	4608      	mov	r0, r1
}
   156da:	f85d eb04 	ldr.w	lr, [sp], #4
   156de:	f002 bee3 	b.w	184a8 <usb_serial_putchar>
   156e2:	f7ff bf2d 	b.w	15540 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
   156e6:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
   156ea:	4718      	bx	r3
   156ec:	00015539 	.word	0x00015539

000156f0 <breakTime(unsigned long, DateTimeFields&)>:
  tm.sec = time % 60;
   156f0:	4a4d      	ldr	r2, [pc, #308]	; (15828 <breakTime(unsigned long, DateTimeFields&)+0x138>)
{
   156f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tm.sec = time % 60;
   156f6:	fba2 4300 	umull	r4, r3, r2, r0
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   156fa:	f240 1a6d 	movw	sl, #365	; 0x16d
   156fe:	4f4b      	ldr	r7, [pc, #300]	; (1582c <breakTime(unsigned long, DateTimeFields&)+0x13c>)
  tm.sec = time % 60;
   15700:	095b      	lsrs	r3, r3, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   15702:	f8df 8138 	ldr.w	r8, [pc, #312]	; 1583c <breakTime(unsigned long, DateTimeFields&)+0x14c>
   15706:	f8df 9138 	ldr.w	r9, [pc, #312]	; 15840 <breakTime(unsigned long, DateTimeFields&)+0x150>
  tm.min = time % 60;
   1570a:	fba2 4203 	umull	r4, r2, r2, r3
  tm.sec = time % 60;
   1570e:	ebc3 1403 	rsb	r4, r3, r3, lsl #4
  tm.min = time % 60;
   15712:	0952      	lsrs	r2, r2, #5
  tm.sec = time % 60;
   15714:	eba0 0084 	sub.w	r0, r0, r4, lsl #2
  tm.hour = time % 24;
   15718:	4c45      	ldr	r4, [pc, #276]	; (15830 <breakTime(unsigned long, DateTimeFields&)+0x140>)
  tm.min = time % 60;
   1571a:	ebc2 1502 	rsb	r5, r2, r2, lsl #4
  tm.sec = time % 60;
   1571e:	7008      	strb	r0, [r1, #0]
  tm.min = time % 60;
   15720:	eba3 0385 	sub.w	r3, r3, r5, lsl #2
  tm.hour = time % 24;
   15724:	fba4 5402 	umull	r5, r4, r4, r2
   15728:	0924      	lsrs	r4, r4, #4
  tm.min = time % 60;
   1572a:	704b      	strb	r3, [r1, #1]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
   1572c:	4b41      	ldr	r3, [pc, #260]	; (15834 <breakTime(unsigned long, DateTimeFields&)+0x144>)
   1572e:	1d25      	adds	r5, r4, #4
  tm.hour = time % 24;
   15730:	eb04 0044 	add.w	r0, r4, r4, lsl #1
   15734:	eba2 02c0 	sub.w	r2, r2, r0, lsl #3
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
   15738:	fba3 0305 	umull	r0, r3, r3, r5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   1573c:	2000      	movs	r0, #0
  tm.hour = time % 24;
   1573e:	708a      	strb	r2, [r1, #2]
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
   15740:	1aea      	subs	r2, r5, r3
   15742:	eb03 0352 	add.w	r3, r3, r2, lsr #1
  days = 0;
   15746:	4602      	mov	r2, r0
  tm.wday = ((time + 4) % 7);  // Sunday is day 0
   15748:	089b      	lsrs	r3, r3, #2
   1574a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1574e:	1aed      	subs	r5, r5, r3
   15750:	70cd      	strb	r5, [r1, #3]
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   15752:	fa5f fe80 	uxtb.w	lr, r0
   15756:	f240 1c6d 	movw	ip, #365	; 0x16d
   1575a:	f20e 73b2 	addw	r3, lr, #1970	; 0x7b2
   1575e:	f013 0503 	ands.w	r5, r3, #3
   15762:	fb07 f603 	mul.w	r6, r7, r3
   15766:	d108      	bne.n	1577a <breakTime(unsigned long, DateTimeFields&)+0x8a>
   15768:	ebb8 0fb6 	cmp.w	r8, r6, ror #2
   1576c:	f44f 7cb7 	mov.w	ip, #366	; 0x16e
   15770:	d303      	bcc.n	1577a <breakTime(unsigned long, DateTimeFields&)+0x8a>
   15772:	ebb9 1f36 	cmp.w	r9, r6, ror #4
   15776:	bf38      	it	cc
   15778:	46d4      	movcc	ip, sl
   1577a:	4462      	add	r2, ip
   1577c:	3001      	adds	r0, #1
   1577e:	4294      	cmp	r4, r2
   15780:	d2e7      	bcs.n	15752 <breakTime(unsigned long, DateTimeFields&)+0x62>
  tm.year = year + 70; // year is offset from 1970
   15782:	f10e 0e46 	add.w	lr, lr, #70	; 0x46
  days -= LEAP_YEAR(year) ? 366 : 365;
   15786:	4e2c      	ldr	r6, [pc, #176]	; (15838 <breakTime(unsigned long, DateTimeFields&)+0x148>)
  tm.year = year + 70; // year is offset from 1970
   15788:	f881 e006 	strb.w	lr, [r1, #6]
  days -= LEAP_YEAR(year) ? 366 : 365;
   1578c:	fba6 0603 	umull	r0, r6, r6, r3
   15790:	b385      	cbz	r5, 157f4 <breakTime(unsigned long, DateTimeFields&)+0x104>
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   15792:	0977      	lsrs	r7, r6, #5
   15794:	f04f 0c64 	mov.w	ip, #100	; 0x64
   15798:	f44f 70c8 	mov.w	r0, #400	; 0x190
   1579c:	09f6      	lsrs	r6, r6, #7
   1579e:	fb0c 3717 	mls	r7, ip, r7, r3
   157a2:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
   157a6:	f240 106d 	movw	r0, #365	; 0x16d
  time  -= days; // now it is days in this year, starting at 0
   157aa:	1aa4      	subs	r4, r4, r2
   157ac:	2300      	movs	r3, #0
   157ae:	2201      	movs	r2, #1
      monthLength = monthDays[month];
   157b0:	f8df e090 	ldr.w	lr, [pc, #144]	; 15844 <breakTime(unsigned long, DateTimeFields&)+0x154>
  time  -= days; // now it is days in this year, starting at 0
   157b4:	4420      	add	r0, r4
  for (month=0; month<12; month++) {
   157b6:	e00a      	b.n	157ce <breakTime(unsigned long, DateTimeFields&)+0xde>
    if (time >= monthLength) {
   157b8:	f813 400e 	ldrb.w	r4, [r3, lr]
   157bc:	4284      	cmp	r4, r0
   157be:	d80e      	bhi.n	157de <breakTime(unsigned long, DateTimeFields&)+0xee>
  for (month=0; month<12; month++) {
   157c0:	2a0c      	cmp	r2, #12
      time -= monthLength;
   157c2:	eba0 0004 	sub.w	r0, r0, r4
  for (month=0; month<12; month++) {
   157c6:	d00b      	beq.n	157e0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
   157c8:	3201      	adds	r2, #1
   157ca:	3301      	adds	r3, #1
   157cc:	b2d2      	uxtb	r2, r2
    if (month==1) { // february
   157ce:	2b01      	cmp	r3, #1
   157d0:	fa5f fc83 	uxtb.w	ip, r3
   157d4:	d1f0      	bne.n	157b8 <breakTime(unsigned long, DateTimeFields&)+0xc8>
      if (LEAP_YEAR(year)) {
   157d6:	b945      	cbnz	r5, 157ea <breakTime(unsigned long, DateTimeFields&)+0xfa>
   157d8:	b1cf      	cbz	r7, 1580e <breakTime(unsigned long, DateTimeFields&)+0x11e>
   157da:	241d      	movs	r4, #29
   157dc:	e006      	b.n	157ec <breakTime(unsigned long, DateTimeFields&)+0xfc>
   157de:	4662      	mov	r2, ip
  tm.mday = time + 1;     // day of month
   157e0:	3001      	adds	r0, #1
  tm.mon = month;  // jan is month 0
   157e2:	714a      	strb	r2, [r1, #5]
  tm.mday = time + 1;     // day of month
   157e4:	7108      	strb	r0, [r1, #4]
}
   157e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   157ea:	241c      	movs	r4, #28
    if (time >= monthLength) {
   157ec:	42a0      	cmp	r0, r4
   157ee:	d318      	bcc.n	15822 <breakTime(unsigned long, DateTimeFields&)+0x132>
      time -= monthLength;
   157f0:	1b00      	subs	r0, r0, r4
  for (month=0; month<12; month++) {
   157f2:	e7e9      	b.n	157c8 <breakTime(unsigned long, DateTimeFields&)+0xd8>
  days -= LEAP_YEAR(year) ? 366 : 365;
   157f4:	2064      	movs	r0, #100	; 0x64
   157f6:	0977      	lsrs	r7, r6, #5
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   157f8:	09f6      	lsrs	r6, r6, #7
  days -= LEAP_YEAR(year) ? 366 : 365;
   157fa:	fb00 3717 	mls	r7, r0, r7, r3
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
   157fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
   15802:	fb00 3616 	mls	r6, r0, r6, r3
  days -= LEAP_YEAR(year) ? 366 : 365;
   15806:	b13f      	cbz	r7, 15818 <breakTime(unsigned long, DateTimeFields&)+0x128>
   15808:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   1580c:	e7cd      	b.n	157aa <breakTime(unsigned long, DateTimeFields&)+0xba>
      if (LEAP_YEAR(year)) {
   1580e:	2e00      	cmp	r6, #0
   15810:	bf14      	ite	ne
   15812:	241c      	movne	r4, #28
   15814:	241d      	moveq	r4, #29
   15816:	e7e9      	b.n	157ec <breakTime(unsigned long, DateTimeFields&)+0xfc>
  days -= LEAP_YEAR(year) ? 366 : 365;
   15818:	2e00      	cmp	r6, #0
   1581a:	d1c4      	bne.n	157a6 <breakTime(unsigned long, DateTimeFields&)+0xb6>
   1581c:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   15820:	e7c3      	b.n	157aa <breakTime(unsigned long, DateTimeFields&)+0xba>
    if (time >= monthLength) {
   15822:	2201      	movs	r2, #1
   15824:	e7dc      	b.n	157e0 <breakTime(unsigned long, DateTimeFields&)+0xf0>
   15826:	bf00      	nop
   15828:	88888889 	.word	0x88888889
   1582c:	c28f5c29 	.word	0xc28f5c29
   15830:	aaaaaaab 	.word	0xaaaaaaab
   15834:	24924925 	.word	0x24924925
   15838:	51eb851f 	.word	0x51eb851f
   1583c:	028f5c28 	.word	0x028f5c28
   15840:	00a3d70a 	.word	0x00a3d70a
   15844:	20000ea0 	.word	0x20000ea0

00015848 <random(unsigned long)>:
	return x;
}

uint32_t random(uint32_t howbig)
{
	if (howbig == 0) return 0;
   15848:	b900      	cbnz	r0, 1584c <random(unsigned long)+0x4>
	return random() % howbig;
}
   1584a:	4770      	bx	lr
	x = seed;
   1584c:	4914      	ldr	r1, [pc, #80]	; (158a0 <random(unsigned long)+0x58>)
   1584e:	680a      	ldr	r2, [r1, #0]
	if (x == 0) x = 123459876;
   15850:	b1ea      	cbz	r2, 1588e <random(unsigned long)+0x46>
	lo = x % 127773;
   15852:	17d3      	asrs	r3, r2, #31
{
   15854:	b430      	push	{r4, r5}
	lo = x % 127773;
   15856:	4c13      	ldr	r4, [pc, #76]	; (158a4 <random(unsigned long)+0x5c>)
	x = 16807 * lo - 2836 * hi;
   15858:	4d13      	ldr	r5, [pc, #76]	; (158a8 <random(unsigned long)+0x60>)
	lo = x % 127773;
   1585a:	fb84 4c02 	smull	r4, ip, r4, r2
   1585e:	4c13      	ldr	r4, [pc, #76]	; (158ac <random(unsigned long)+0x64>)
   15860:	4494      	add	ip, r2
   15862:	ebc3 432c 	rsb	r3, r3, ip, asr #16
   15866:	fb04 2213 	mls	r2, r4, r3, r2
	x = 16807 * lo - 2836 * hi;
   1586a:	f244 14a7 	movw	r4, #16807	; 0x41a7
   1586e:	fb05 f303 	mul.w	r3, r5, r3
   15872:	fb04 3302 	mla	r3, r4, r2, r3
	if (x < 0) x += 0x7FFFFFFF;
   15876:	2b00      	cmp	r3, #0
   15878:	da10      	bge.n	1589c <random(unsigned long)+0x54>
   1587a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1587e:	441a      	add	r2, r3
	seed = x;
   15880:	600a      	str	r2, [r1, #0]
	return random() % howbig;
   15882:	fbb2 f3f0 	udiv	r3, r2, r0
}
   15886:	bc30      	pop	{r4, r5}
	return random() % howbig;
   15888:	fb00 2013 	mls	r0, r0, r3, r2
}
   1588c:	4770      	bx	lr
   1588e:	4a08      	ldr	r2, [pc, #32]	; (158b0 <random(unsigned long)+0x68>)
	return random() % howbig;
   15890:	fbb2 f3f0 	udiv	r3, r2, r0
	seed = x;
   15894:	600a      	str	r2, [r1, #0]
	return random() % howbig;
   15896:	fb00 2013 	mls	r0, r0, r3, r2
   1589a:	4770      	bx	lr
	seed = x;
   1589c:	461a      	mov	r2, r3
   1589e:	e7ef      	b.n	15880 <random(unsigned long)+0x38>
   158a0:	20004ff4 	.word	0x20004ff4
   158a4:	834e0b5f 	.word	0x834e0b5f
   158a8:	fffff4ec 	.word	0xfffff4ec
   158ac:	0001f31d 	.word	0x0001f31d
   158b0:	1f0cce42 	.word	0x1f0cce42

000158b4 <String::String(String const&)>:
{
	init();
	*this = pgmstr;
}

String::String(const String &value)
   158b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rhs.len = 0;
}

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   158b6:	4288      	cmp	r0, r1
	buffer = NULL;
   158b8:	f04f 0500 	mov.w	r5, #0
String::String(const String &value)
   158bc:	4604      	mov	r4, r0
	len = 0;
   158be:	6085      	str	r5, [r0, #8]
	flags = 0;
   158c0:	7305      	strb	r5, [r0, #12]
	capacity = 0;
   158c2:	e9c0 5500 	strd	r5, r5, [r0]
	if (this == &rhs) return *this;
   158c6:	d002      	beq.n	158ce <String::String(String const&)+0x1a>
   158c8:	688e      	ldr	r6, [r1, #8]
	return copy(rhs.buffer, rhs.len);
   158ca:	680f      	ldr	r7, [r1, #0]
	if (length == 0) {
   158cc:	b90e      	cbnz	r6, 158d2 <String::String(String const&)+0x1e>
}
   158ce:	4620      	mov	r0, r4
   158d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   158d2:	1c70      	adds	r0, r6, #1
   158d4:	f00b fc44 	bl	21160 <malloc>
	if (newbuffer) {
   158d8:	2800      	cmp	r0, #0
   158da:	d0f8      	beq.n	158ce <String::String(String const&)+0x1a>
	strcpy(buffer, cstr);
   158dc:	4639      	mov	r1, r7
		if (len == 0) buffer[0] = 0;
   158de:	7005      	strb	r5, [r0, #0]
		buffer = newbuffer;
   158e0:	6020      	str	r0, [r4, #0]
	len = length;
   158e2:	e9c4 6601 	strd	r6, r6, [r4, #4]
	strcpy(buffer, cstr);
   158e6:	f00d f8a9 	bl	22a3c <strcpy>
}
   158ea:	4620      	mov	r0, r4
   158ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   158ee:	bf00      	nop

000158f0 <String::~String()>:
String::~String()
   158f0:	b510      	push	{r4, lr}
   158f2:	4604      	mov	r4, r0
	free(buffer);
   158f4:	6800      	ldr	r0, [r0, #0]
   158f6:	f00b fc3b 	bl	21170 <free>
}
   158fa:	4620      	mov	r0, r4
   158fc:	bd10      	pop	{r4, pc}
   158fe:	bf00      	nop

00015900 <String::copy(char const*, unsigned int)>:
{
   15900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15902:	4604      	mov	r4, r0
	if (length == 0) {
   15904:	4615      	mov	r5, r2
   15906:	b932      	cbnz	r2, 15916 <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
   15908:	6803      	ldr	r3, [r0, #0]
   1590a:	b103      	cbz	r3, 1590e <String::copy(char const*, unsigned int)+0xe>
   1590c:	701a      	strb	r2, [r3, #0]
		len = 0;
   1590e:	2300      	movs	r3, #0
}
   15910:	4620      	mov	r0, r4
		len = 0;
   15912:	60a3      	str	r3, [r4, #8]
}
   15914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (capacity >= size) return 1;
   15916:	6843      	ldr	r3, [r0, #4]
   15918:	460e      	mov	r6, r1
   1591a:	429a      	cmp	r2, r3
   1591c:	d91c      	bls.n	15958 <String::copy(char const*, unsigned int)+0x58>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   1591e:	1c51      	adds	r1, r2, #1
   15920:	6800      	ldr	r0, [r0, #0]
   15922:	f00b fee9 	bl	216f8 <realloc>
	if (newbuffer) {
   15926:	4607      	mov	r7, r0
   15928:	b160      	cbz	r0, 15944 <String::copy(char const*, unsigned int)+0x44>
		if (len == 0) buffer[0] = 0;
   1592a:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
   1592c:	e9c4 0500 	strd	r0, r5, [r4]
		if (len == 0) buffer[0] = 0;
   15930:	b90b      	cbnz	r3, 15936 <String::copy(char const*, unsigned int)+0x36>
   15932:	7003      	strb	r3, [r0, #0]
	strcpy(buffer, cstr);
   15934:	6827      	ldr	r7, [r4, #0]
   15936:	4631      	mov	r1, r6
   15938:	4638      	mov	r0, r7
	len = length;
   1593a:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
   1593c:	f00d f87e 	bl	22a3c <strcpy>
}
   15940:	4620      	mov	r0, r4
   15942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) {
   15944:	6820      	ldr	r0, [r4, #0]
   15946:	b110      	cbz	r0, 1594e <String::copy(char const*, unsigned int)+0x4e>
			free(buffer);
   15948:	f00b fc12 	bl	21170 <free>
			buffer = NULL;
   1594c:	6027      	str	r7, [r4, #0]
		len = capacity = 0;
   1594e:	2300      	movs	r3, #0
}
   15950:	4620      	mov	r0, r4
		len = capacity = 0;
   15952:	e9c4 3301 	strd	r3, r3, [r4, #4]
}
   15956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (buffer) buffer[0] = 0;
   15958:	6807      	ldr	r7, [r0, #0]
	strcpy(buffer, cstr);
   1595a:	4631      	mov	r1, r6
	len = length;
   1595c:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
   1595e:	4638      	mov	r0, r7
   15960:	f00d f86c 	bl	22a3c <strcpy>
	return *this;
   15964:	e7ec      	b.n	15940 <String::copy(char const*, unsigned int)+0x40>
   15966:	bf00      	nop

00015968 <String::String(char const*)>:
String::String(const char *cstr)
   15968:	b538      	push	{r3, r4, r5, lr}
	buffer = NULL;
   1596a:	2300      	movs	r3, #0
String::String(const char *cstr)
   1596c:	4604      	mov	r4, r0
	capacity = 0;
   1596e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   15972:	6083      	str	r3, [r0, #8]
	flags = 0;
   15974:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   15976:	b141      	cbz	r1, 1598a <String::String(char const*)+0x22>
   15978:	460d      	mov	r5, r1
   1597a:	4608      	mov	r0, r1
   1597c:	f00d f940 	bl	22c00 <strlen>
   15980:	4602      	mov	r2, r0
   15982:	4629      	mov	r1, r5
   15984:	4620      	mov	r0, r4
   15986:	f7ff ffbb 	bl	15900 <String::copy(char const*, unsigned int)>
}
   1598a:	4620      	mov	r0, r4
   1598c:	bd38      	pop	{r3, r4, r5, pc}
   1598e:	bf00      	nop

00015990 <String::String(int, unsigned char)>:
String::String(const int value, unsigned char base)
   15990:	b510      	push	{r4, lr}
	buffer = NULL;
   15992:	2300      	movs	r3, #0
String::String(const int value, unsigned char base)
   15994:	b08a      	sub	sp, #40	; 0x28
   15996:	4604      	mov	r4, r0
	itoa(value, buf, base);
   15998:	4608      	mov	r0, r1
   1599a:	a901      	add	r1, sp, #4
	len = 0;
   1599c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   1599e:	7323      	strb	r3, [r4, #12]
	capacity = 0;
   159a0:	e9c4 3300 	strd	r3, r3, [r4]
	itoa(value, buf, base);
   159a4:	f00b fbc6 	bl	21134 <itoa>
#endif

String & String::operator = (const char *cstr)
{
	if (cstr) {
		copy(cstr, strlen(cstr));
   159a8:	a801      	add	r0, sp, #4
   159aa:	f00d f929 	bl	22c00 <strlen>
   159ae:	a901      	add	r1, sp, #4
   159b0:	4602      	mov	r2, r0
   159b2:	4620      	mov	r0, r4
   159b4:	f7ff ffa4 	bl	15900 <String::copy(char const*, unsigned int)>
}
   159b8:	4620      	mov	r0, r4
   159ba:	b00a      	add	sp, #40	; 0x28
   159bc:	bd10      	pop	{r4, pc}
   159be:	bf00      	nop

000159c0 <String::String(unsigned int, unsigned char)>:
String::String(unsigned int value, unsigned char base)
   159c0:	b510      	push	{r4, lr}
	buffer = NULL;
   159c2:	2300      	movs	r3, #0
String::String(unsigned int value, unsigned char base)
   159c4:	b08a      	sub	sp, #40	; 0x28
   159c6:	4604      	mov	r4, r0
  	utoa(value, buf, base);
   159c8:	4608      	mov	r0, r1
   159ca:	a901      	add	r1, sp, #4
	len = 0;
   159cc:	60a3      	str	r3, [r4, #8]
	flags = 0;
   159ce:	7323      	strb	r3, [r4, #12]
	capacity = 0;
   159d0:	e9c4 3300 	strd	r3, r3, [r4]
  	utoa(value, buf, base);
   159d4:	f00c f8d6 	bl	21b84 <utoa>
		copy(cstr, strlen(cstr));
   159d8:	a801      	add	r0, sp, #4
   159da:	f00d f911 	bl	22c00 <strlen>
   159de:	a901      	add	r1, sp, #4
   159e0:	4602      	mov	r2, r0
   159e2:	4620      	mov	r0, r4
   159e4:	f7ff ff8c 	bl	15900 <String::copy(char const*, unsigned int)>
}
   159e8:	4620      	mov	r0, r4
   159ea:	b00a      	add	sp, #40	; 0x28
   159ec:	bd10      	pop	{r4, pc}
   159ee:	bf00      	nop

000159f0 <String::String(float, unsigned char)>:
String::String(float num, unsigned char digits)
   159f0:	b530      	push	{r4, r5, lr}
	buffer = NULL;
   159f2:	2300      	movs	r3, #0
String::String(float num, unsigned char digits)
   159f4:	4604      	mov	r4, r0
   159f6:	b08b      	sub	sp, #44	; 0x2c
	*this = dtostrf(num, digits + 2, digits, buf);
   159f8:	1c88      	adds	r0, r1, #2
	len = 0;
   159fa:	60a3      	str	r3, [r4, #8]
	*this = dtostrf(num, digits + 2, digits, buf);
   159fc:	466a      	mov	r2, sp
	flags = 0;
   159fe:	7323      	strb	r3, [r4, #12]
	capacity = 0;
   15a00:	e9c4 3300 	strd	r3, r3, [r4]
	*this = dtostrf(num, digits + 2, digits, buf);
   15a04:	f000 fea0 	bl	16748 <dtostrf>
	if (cstr) {
   15a08:	4605      	mov	r5, r0
   15a0a:	b148      	cbz	r0, 15a20 <String::String(float, unsigned char)+0x30>
		copy(cstr, strlen(cstr));
   15a0c:	f00d f8f8 	bl	22c00 <strlen>
   15a10:	4629      	mov	r1, r5
   15a12:	4602      	mov	r2, r0
   15a14:	4620      	mov	r0, r4
   15a16:	f7ff ff73 	bl	15900 <String::copy(char const*, unsigned int)>
}
   15a1a:	4620      	mov	r0, r4
   15a1c:	b00b      	add	sp, #44	; 0x2c
   15a1e:	bd30      	pop	{r4, r5, pc}
	} else {
		len = 0;
   15a20:	60a0      	str	r0, [r4, #8]
}
   15a22:	4620      	mov	r0, r4
   15a24:	b00b      	add	sp, #44	; 0x2c
   15a26:	bd30      	pop	{r4, r5, pc}

00015a28 <String::operator=(String const&)>:
	if (this == &rhs) return *this;
   15a28:	4281      	cmp	r1, r0
   15a2a:	d003      	beq.n	15a34 <String::operator=(String const&)+0xc>
	return copy(rhs.buffer, rhs.len);
   15a2c:	688a      	ldr	r2, [r1, #8]
   15a2e:	6809      	ldr	r1, [r1, #0]
   15a30:	f7ff bf66 	b.w	15900 <String::copy(char const*, unsigned int)>
}
   15a34:	4770      	bx	lr
   15a36:	bf00      	nop

00015a38 <String::operator=(char const*)>:
{
   15a38:	b538      	push	{r3, r4, r5, lr}
   15a3a:	4605      	mov	r5, r0
	if (cstr) {
   15a3c:	460c      	mov	r4, r1
   15a3e:	b149      	cbz	r1, 15a54 <String::operator=(char const*)+0x1c>
		copy(cstr, strlen(cstr));
   15a40:	4608      	mov	r0, r1
   15a42:	f00d f8dd 	bl	22c00 <strlen>
   15a46:	4621      	mov	r1, r4
   15a48:	4602      	mov	r2, r0
   15a4a:	4628      	mov	r0, r5
   15a4c:	f7ff ff58 	bl	15900 <String::copy(char const*, unsigned int)>
	}
	return *this;
}
   15a50:	4628      	mov	r0, r5
   15a52:	bd38      	pop	{r3, r4, r5, pc}
   15a54:	4628      	mov	r0, r5
		len = 0;
   15a56:	60a9      	str	r1, [r5, #8]
}
   15a58:	bd38      	pop	{r3, r4, r5, pc}
   15a5a:	bf00      	nop

00015a5c <String::append(char const*, unsigned int)>:
{
	return append(s.buffer, s.len);
}

String & String::append(const char *cstr, unsigned int length)
{
   15a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15a60:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	bool self = false;
	unsigned int buffer_offset; 
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   15a62:	6800      	ldr	r0, [r0, #0]
{
   15a64:	460d      	mov	r5, r1
   15a66:	4616      	mov	r6, r2
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   15a68:	4288      	cmp	r0, r1
	unsigned int newlen = len + length;
   15a6a:	68a3      	ldr	r3, [r4, #8]
	if ( (cstr >= buffer) && (cstr < (buffer+len) ) ) {
   15a6c:	d809      	bhi.n	15a82 <String::append(char const*, unsigned int)+0x26>
   15a6e:	18c2      	adds	r2, r0, r3
   15a70:	4291      	cmp	r1, r2
   15a72:	d206      	bcs.n	15a82 <String::append(char const*, unsigned int)+0x26>
		self = true;
		buffer_offset = (unsigned int)(cstr-buffer);
   15a74:	1a0f      	subs	r7, r1, r0
		self = true;
   15a76:	f04f 0901 	mov.w	r9, #1
	}
	if (length == 0 || !reserve(newlen)) return *this;
   15a7a:	b936      	cbnz	r6, 15a8a <String::append(char const*, unsigned int)+0x2e>
		}
	else
		strcpy(buffer + len, cstr);
	len = newlen;
	return *this;
}
   15a7c:	4620      	mov	r0, r4
   15a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	bool self = false;
   15a82:	f04f 0900 	mov.w	r9, #0
	if (length == 0 || !reserve(newlen)) return *this;
   15a86:	2e00      	cmp	r6, #0
   15a88:	d0f8      	beq.n	15a7c <String::append(char const*, unsigned int)+0x20>
	unsigned int newlen = len + length;
   15a8a:	eb03 0806 	add.w	r8, r3, r6
	if (capacity >= size) return 1;
   15a8e:	6862      	ldr	r2, [r4, #4]
   15a90:	4590      	cmp	r8, r2
   15a92:	d90c      	bls.n	15aae <String::append(char const*, unsigned int)+0x52>
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   15a94:	f108 0101 	add.w	r1, r8, #1
   15a98:	f00b fe2e 	bl	216f8 <realloc>
	if (newbuffer) {
   15a9c:	2800      	cmp	r0, #0
   15a9e:	d0ed      	beq.n	15a7c <String::append(char const*, unsigned int)+0x20>
		buffer = newbuffer;
   15aa0:	68a3      	ldr	r3, [r4, #8]
		capacity = maxStrLen;
   15aa2:	e9c4 0800 	strd	r0, r8, [r4]
		if (len == 0) buffer[0] = 0;
   15aa6:	b913      	cbnz	r3, 15aae <String::append(char const*, unsigned int)+0x52>
   15aa8:	7003      	strb	r3, [r0, #0]
		memcpy(buffer + len, buffer+buffer_offset, length);
   15aaa:	6820      	ldr	r0, [r4, #0]
   15aac:	68a3      	ldr	r3, [r4, #8]
	if ( self ) {
   15aae:	f1b9 0f00 	cmp.w	r9, #0
   15ab2:	d108      	bne.n	15ac6 <String::append(char const*, unsigned int)+0x6a>
		strcpy(buffer + len, cstr);
   15ab4:	4629      	mov	r1, r5
   15ab6:	4418      	add	r0, r3
   15ab8:	f00c ffc0 	bl	22a3c <strcpy>
}
   15abc:	4620      	mov	r0, r4
	len = newlen;
   15abe:	f8c4 8008 	str.w	r8, [r4, #8]
}
   15ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		memcpy(buffer + len, buffer+buffer_offset, length);
   15ac6:	4632      	mov	r2, r6
   15ac8:	19c1      	adds	r1, r0, r7
   15aca:	4418      	add	r0, r3
   15acc:	f000 fd66 	bl	1659c <memcpy>
		buffer[newlen] = 0;
   15ad0:	6823      	ldr	r3, [r4, #0]
   15ad2:	2200      	movs	r2, #0
   15ad4:	f803 2008 	strb.w	r2, [r3, r8]
   15ad8:	e7f0      	b.n	15abc <String::append(char const*, unsigned int)+0x60>
   15ada:	bf00      	nop

00015adc <operator+(StringSumHelper const&, String const&)>:
/*  Concatenate                              */
/*********************************************/


StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   15adc:	b510      	push	{r4, lr}
   15ade:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	a.append(rhs.buffer, rhs.len);
   15ae0:	688a      	ldr	r2, [r1, #8]
   15ae2:	6809      	ldr	r1, [r1, #0]
   15ae4:	f7ff ffba 	bl	15a5c <String::append(char const*, unsigned int)>
	return a;
}
   15ae8:	4620      	mov	r0, r4
   15aea:	bd10      	pop	{r4, pc}

00015aec <operator+(StringSumHelper const&, char const*)>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   15aec:	b538      	push	{r3, r4, r5, lr}
   15aee:	4605      	mov	r5, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (cstr) a.append(cstr, strlen(cstr));
   15af0:	b141      	cbz	r1, 15b04 <operator+(StringSumHelper const&, char const*)+0x18>
   15af2:	460c      	mov	r4, r1
   15af4:	4608      	mov	r0, r1
   15af6:	f00d f883 	bl	22c00 <strlen>
   15afa:	4602      	mov	r2, r0
   15afc:	4621      	mov	r1, r4
   15afe:	4628      	mov	r0, r5
   15b00:	f7ff ffac 	bl	15a5c <String::append(char const*, unsigned int)>
	return a;
}
   15b04:	4628      	mov	r0, r5
   15b06:	bd38      	pop	{r3, r4, r5, pc}

00015b08 <String::equals(String const&) const>:
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
   15b08:	688a      	ldr	r2, [r1, #8]
{
   15b0a:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   15b0c:	6883      	ldr	r3, [r0, #8]
   15b0e:	4293      	cmp	r3, r2
   15b10:	d001      	beq.n	15b16 <String::equals(String const&) const+0xe>
   15b12:	2000      	movs	r0, #0
}
   15b14:	bd08      	pop	{r3, pc}
	if (!buffer || !s.buffer) {
   15b16:	6800      	ldr	r0, [r0, #0]
   15b18:	b150      	cbz	r0, 15b30 <String::equals(String const&) const+0x28>
   15b1a:	6809      	ldr	r1, [r1, #0]
   15b1c:	b129      	cbz	r1, 15b2a <String::equals(String const&) const+0x22>
	return strcmp(buffer, s.buffer);
   15b1e:	f00c fe23 	bl	22768 <strcmp>
	return (len == s2.len && compareTo(s2) == 0);
   15b22:	fab0 f080 	clz	r0, r0
   15b26:	0940      	lsrs	r0, r0, #5
}
   15b28:	bd08      	pop	{r3, pc}
		if (buffer && len > 0) return *(unsigned char *)buffer;
   15b2a:	b13b      	cbz	r3, 15b3c <String::equals(String const&) const+0x34>
   15b2c:	7800      	ldrb	r0, [r0, #0]
   15b2e:	e7f8      	b.n	15b22 <String::equals(String const&) const+0x1a>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   15b30:	680a      	ldr	r2, [r1, #0]
   15b32:	b11a      	cbz	r2, 15b3c <String::equals(String const&) const+0x34>
   15b34:	b113      	cbz	r3, 15b3c <String::equals(String const&) const+0x34>
   15b36:	7810      	ldrb	r0, [r2, #0]
   15b38:	4240      	negs	r0, r0
   15b3a:	e7f2      	b.n	15b22 <String::equals(String const&) const+0x1a>
   15b3c:	2001      	movs	r0, #1
}
   15b3e:	bd08      	pop	{r3, pc}

00015b40 <String::equals(char const*) const>:

unsigned char String::equals(const char *cstr) const
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
   15b40:	6882      	ldr	r2, [r0, #8]
{
   15b42:	b508      	push	{r3, lr}
   15b44:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
   15b46:	b13a      	cbz	r2, 15b58 <String::equals(char const*) const+0x18>
	if (cstr == NULL) return buffer[0] == 0;
   15b48:	b161      	cbz	r1, 15b64 <String::equals(char const*) const+0x24>
	return strcmp(buffer, cstr) == 0;
   15b4a:	6800      	ldr	r0, [r0, #0]
   15b4c:	f00c fe0c 	bl	22768 <strcmp>
   15b50:	fab0 f080 	clz	r0, r0
   15b54:	0940      	lsrs	r0, r0, #5
}
   15b56:	bd08      	pop	{r3, pc}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   15b58:	b131      	cbz	r1, 15b68 <String::equals(char const*) const+0x28>
	if (cstr == NULL) return buffer[0] == 0;
   15b5a:	7818      	ldrb	r0, [r3, #0]
   15b5c:	fab0 f080 	clz	r0, r0
   15b60:	0940      	lsrs	r0, r0, #5
}
   15b62:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   15b64:	6803      	ldr	r3, [r0, #0]
   15b66:	e7f8      	b.n	15b5a <String::equals(char const*) const+0x1a>
   15b68:	2001      	movs	r0, #1
}
   15b6a:	bd08      	pop	{r3, pc}

00015b6c <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
   15b6c:	b1c2      	cbz	r2, 15ba0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x34>
{
   15b6e:	b570      	push	{r4, r5, r6, lr}
	if (!bufsize || !buf) return;
   15b70:	fab1 f681 	clz	r6, r1
   15b74:	460c      	mov	r4, r1
   15b76:	0976      	lsrs	r6, r6, #5
   15b78:	b119      	cbz	r1, 15b82 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x16>
	if (index >= len) {
   15b7a:	6885      	ldr	r5, [r0, #8]
   15b7c:	429d      	cmp	r5, r3
   15b7e:	d801      	bhi.n	15b84 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x18>
		buf[0] = 0;
   15b80:	700e      	strb	r6, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   15b82:	bd70      	pop	{r4, r5, r6, pc}
	if (n > len - index) n = len - index;
   15b84:	1aed      	subs	r5, r5, r3
	unsigned int n = bufsize - 1;
   15b86:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	strncpy((char *)buf, buffer + index, n);
   15b8a:	6801      	ldr	r1, [r0, #0]
   15b8c:	4620      	mov	r0, r4
   15b8e:	4565      	cmp	r5, ip
   15b90:	4419      	add	r1, r3
   15b92:	bf28      	it	cs
   15b94:	4665      	movcs	r5, ip
   15b96:	462a      	mov	r2, r5
   15b98:	f00c fd3a 	bl	22610 <strncpy>
	buf[n] = 0;
   15b9c:	5566      	strb	r6, [r4, r5]
}
   15b9e:	bd70      	pop	{r4, r5, r6, pc}
   15ba0:	4770      	bx	lr
   15ba2:	bf00      	nop

00015ba4 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
   15ba4:	49a2      	ldr	r1, [pc, #648]	; (15e30 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   15ba6:	4ba3      	ldr	r3, [pc, #652]	; (15e34 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
   15ba8:	4288      	cmp	r0, r1
{
   15baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
   15bae:	4ca2      	ldr	r4, [pc, #648]	; (15e38 <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
   15bb0:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
   15bb2:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
   15bb4:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
   15bb8:	d91b      	bls.n	15bf2 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
   15bba:	4ba0      	ldr	r3, [pc, #640]	; (15e3c <set_arm_clock+0x298>)
   15bbc:	4298      	cmp	r0, r3
   15bbe:	f240 8102 	bls.w	15dc6 <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   15bc2:	1ac3      	subs	r3, r0, r3
   15bc4:	499e      	ldr	r1, [pc, #632]	; (15e40 <set_arm_clock+0x29c>)
   15bc6:	0a1b      	lsrs	r3, r3, #8
   15bc8:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15bcc:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
   15bd0:	09db      	lsrs	r3, r3, #7
   15bd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15bd6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   15bda:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15bde:	428b      	cmp	r3, r1
   15be0:	bf28      	it	cs
   15be2:	460b      	movcs	r3, r1
   15be4:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
   15be8:	4b96      	ldr	r3, [pc, #600]	; (15e44 <set_arm_clock+0x2a0>)
   15bea:	fba3 3707 	umull	r3, r7, r3, r7
   15bee:	08ff      	lsrs	r7, r7, #3
   15bf0:	e004      	b.n	15bfc <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
   15bf2:	4f95      	ldr	r7, [pc, #596]	; (15e48 <set_arm_clock+0x2a4>)
   15bf4:	42b8      	cmp	r0, r7
   15bf6:	bf8c      	ite	hi
   15bf8:	270e      	movhi	r7, #14
   15bfa:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15bfc:	498d      	ldr	r1, [pc, #564]	; (15e34 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15bfe:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15c02:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c06:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
   15c08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
   15c0c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c10:	d20c      	bcs.n	15c2c <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   15c12:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   15c16:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   15c1a:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
   15c1e:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   15c22:	680b      	ldr	r3, [r1, #0]
   15c24:	2b00      	cmp	r3, #0
   15c26:	dafc      	bge.n	15c22 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15c28:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
   15c2c:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
   15c30:	d124      	bne.n	15c7c <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
   15c32:	4986      	ldr	r1, [pc, #536]	; (15e4c <set_arm_clock+0x2a8>)
   15c34:	690c      	ldr	r4, [r1, #16]
   15c36:	4986      	ldr	r1, [pc, #536]	; (15e50 <set_arm_clock+0x2ac>)
   15c38:	43a1      	bics	r1, r4
   15c3a:	f000 80ea 	beq.w	15e12 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   15c3e:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
   15c42:	4634      	mov	r4, r6
   15c44:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   15c48:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
   15c4c:	d004      	beq.n	15c58 <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
   15c4e:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
   15c52:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
   15c54:	4b77      	ldr	r3, [pc, #476]	; (15e34 <set_arm_clock+0x290>)
   15c56:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
   15c58:	f411 5f40 	tst.w	r1, #12288	; 0x3000
   15c5c:	d007      	beq.n	15c6e <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
   15c5e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
   15c62:	4974      	ldr	r1, [pc, #464]	; (15e34 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
   15c64:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
   15c66:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
   15c68:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   15c6a:	071a      	lsls	r2, r3, #28
   15c6c:	d4fc      	bmi.n	15c68 <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
   15c6e:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
   15c72:	4a70      	ldr	r2, [pc, #448]	; (15e34 <set_arm_clock+0x290>)
   15c74:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   15c76:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15c78:	069b      	lsls	r3, r3, #26
   15c7a:	d4fc      	bmi.n	15c76 <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
   15c7c:	4c75      	ldr	r4, [pc, #468]	; (15e54 <set_arm_clock+0x2b0>)
   15c7e:	42a0      	cmp	r0, r4
   15c80:	f200 80ce 	bhi.w	15e20 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
   15c84:	f04f 0c01 	mov.w	ip, #1
   15c88:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
   15c8a:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
   15c8c:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
   15c90:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
   15c94:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15c98:	42a2      	cmp	r2, r4
   15c9a:	d818      	bhi.n	15cce <set_arm_clock+0x12a>
		if (div_arm < 8) {
   15c9c:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
   15ca0:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
   15ca4:	f040 808d 	bne.w	15dc2 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
   15ca8:	f1bc 0f04 	cmp.w	ip, #4
   15cac:	f200 8091 	bhi.w	15dd2 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
   15cb0:	180a      	adds	r2, r1, r0
   15cb2:	42a2      	cmp	r2, r4
   15cb4:	f200 80a4 	bhi.w	15e00 <set_arm_clock+0x25c>
   15cb8:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
   15cbc:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
   15cbe:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15cc2:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
   15cc6:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15cca:	42a2      	cmp	r2, r4
   15ccc:	d9e6      	bls.n	15c9c <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15cce:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   15cd2:	028c      	lsls	r4, r1, #10
   15cd4:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15cd8:	485f      	ldr	r0, [pc, #380]	; (15e58 <set_arm_clock+0x2b4>)
   15cda:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
   15cdc:	4a5f      	ldr	r2, [pc, #380]	; (15e5c <set_arm_clock+0x2b8>)
   15cde:	4290      	cmp	r0, r2
   15ce0:	d97f      	bls.n	15de2 <set_arm_clock+0x23e>
   15ce2:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 15e88 <set_arm_clock+0x2e4>
   15ce6:	226c      	movs	r2, #108	; 0x6c
   15ce8:	485d      	ldr	r0, [pc, #372]	; (15e60 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15cea:	4d58      	ldr	r5, [pc, #352]	; (15e4c <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
   15cec:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15cf0:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
   15cf4:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
   15cf8:	f8df c190 	ldr.w	ip, [pc, #400]	; 15e8c <set_arm_clock+0x2e8>
   15cfc:	ea0e 0c0c 	and.w	ip, lr, ip
   15d00:	45d4      	cmp	ip, sl
   15d02:	d009      	beq.n	15d18 <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
   15d04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
   15d08:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
   15d0c:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
   15d10:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
   15d12:	682a      	ldr	r2, [r5, #0]
   15d14:	2a00      	cmp	r2, #0
   15d16:	dafc      	bge.n	15d12 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
   15d18:	4a46      	ldr	r2, [pc, #280]	; (15e34 <set_arm_clock+0x290>)
   15d1a:	6915      	ldr	r5, [r2, #16]
   15d1c:	f005 0507 	and.w	r5, r5, #7
   15d20:	429d      	cmp	r5, r3
   15d22:	d003      	beq.n	15d2c <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
   15d24:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
   15d26:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15d28:	03dd      	lsls	r5, r3, #15
   15d2a:	d4fc      	bmi.n	15d26 <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15d2c:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
   15d30:	d009      	beq.n	15d46 <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
   15d32:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   15d36:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
   15d3a:	4a3e      	ldr	r2, [pc, #248]	; (15e34 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
   15d3c:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
   15d3e:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
   15d40:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15d42:	0799      	lsls	r1, r3, #30
   15d44:	d4fc      	bmi.n	15d40 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15d46:	4947      	ldr	r1, [pc, #284]	; (15e64 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
   15d48:	4a47      	ldr	r2, [pc, #284]	; (15e68 <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15d4a:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
   15d4c:	4291      	cmp	r1, r2
   15d4e:	d83c      	bhi.n	15dca <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
   15d50:	4b46      	ldr	r3, [pc, #280]	; (15e6c <set_arm_clock+0x2c8>)
   15d52:	09c9      	lsrs	r1, r1, #7
   15d54:	fba3 3101 	umull	r3, r1, r3, r1
   15d58:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
   15d5a:	1e4b      	subs	r3, r1, #1
   15d5c:	021b      	lsls	r3, r3, #8
   15d5e:	ea86 0203 	eor.w	r2, r6, r3
   15d62:	f412 7f40 	tst.w	r2, #768	; 0x300
   15d66:	d006      	beq.n	15d76 <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
   15d68:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   15d6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
   15d70:	4a30      	ldr	r2, [pc, #192]	; (15e34 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
   15d72:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
   15d74:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
   15d76:	4a2f      	ldr	r2, [pc, #188]	; (15e34 <set_arm_clock+0x290>)
   15d78:	6953      	ldr	r3, [r2, #20]
   15d7a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
   15d7e:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
   15d80:	6c93      	ldr	r3, [r2, #72]	; 0x48
   15d82:	069b      	lsls	r3, r3, #26
   15d84:	d4fc      	bmi.n	15d80 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15d86:	4b3a      	ldr	r3, [pc, #232]	; (15e70 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15d88:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15d8a:	fba3 2300 	umull	r2, r3, r3, r0
   15d8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15d92:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
   15d96:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15d9a:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
   15d9e:	4a35      	ldr	r2, [pc, #212]	; (15e74 <set_arm_clock+0x2d0>)
   15da0:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
   15da2:	4a35      	ldr	r2, [pc, #212]	; (15e78 <set_arm_clock+0x2d4>)
   15da4:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
   15da6:	4a35      	ldr	r2, [pc, #212]	; (15e7c <set_arm_clock+0x2d8>)
   15da8:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
   15daa:	d208      	bcs.n	15dbe <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
   15dac:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
   15db0:	4a21      	ldr	r2, [pc, #132]	; (15e38 <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
   15db2:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
   15db6:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
   15db8:	6813      	ldr	r3, [r2, #0]
   15dba:	2b00      	cmp	r3, #0
   15dbc:	dafc      	bge.n	15db8 <set_arm_clock+0x214>
	}

	return frequency;
}
   15dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   15dc2:	4673      	mov	r3, lr
   15dc4:	e762      	b.n	15c8c <set_arm_clock+0xe8>
   15dc6:	2712      	movs	r7, #18
   15dc8:	e718      	b.n	15bfc <set_arm_clock+0x58>
   15dca:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
   15dce:	2104      	movs	r1, #4
   15dd0:	e7c5      	b.n	15d5e <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15dd2:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15dd6:	4820      	ldr	r0, [pc, #128]	; (15e58 <set_arm_clock+0x2b4>)
   15dd8:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15dda:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15ddc:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15dde:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15de2:	4a27      	ldr	r2, [pc, #156]	; (15e80 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   15de4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 15e90 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
   15de8:	fba2 2000 	umull	r2, r0, r2, r0
   15dec:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
   15dee:	4825      	ldr	r0, [pc, #148]	; (15e84 <set_arm_clock+0x2e0>)
   15df0:	2a36      	cmp	r2, #54	; 0x36
   15df2:	bf38      	it	cc
   15df4:	2236      	movcc	r2, #54	; 0x36
   15df6:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
   15dfa:	ea42 0a0a 	orr.w	sl, r2, sl
   15dfe:	e774      	b.n	15cea <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
   15e00:	ea4f 248c 	mov.w	r4, ip, lsl #10
   15e04:	2300      	movs	r3, #0
   15e06:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
   15e0a:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
   15e0e:	46ac      	mov	ip, r5
   15e10:	e762      	b.n	15cd8 <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
   15e12:	461d      	mov	r5, r3
   15e14:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
   15e18:	4611      	mov	r1, r2
   15e1a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   15e1e:	e713      	b.n	15c48 <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
   15e20:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
   15e22:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
   15e26:	4602      	mov	r2, r0
   15e28:	4631      	mov	r1, r6
   15e2a:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
   15e2c:	46e6      	mov	lr, ip
   15e2e:	e753      	b.n	15cd8 <set_arm_clock+0x134>
   15e30:	1f78a400 	.word	0x1f78a400
   15e34:	400fc000 	.word	0x400fc000
   15e38:	40080000 	.word	0x40080000
   15e3c:	23c34600 	.word	0x23c34600
   15e40:	004cb223 	.word	0x004cb223
   15e44:	51eb851f 	.word	0x51eb851f
   15e48:	016e3600 	.word	0x016e3600
   15e4c:	400d8000 	.word	0x400d8000
   15e50:	80003040 	.word	0x80003040
   15e54:	269fb1ff 	.word	0x269fb1ff
   15e58:	005b8d80 	.word	0x005b8d80
   15e5c:	4df67eff 	.word	0x4df67eff
   15e60:	4d3f6400 	.word	0x4d3f6400
   15e64:	08f0d17f 	.word	0x08f0d17f
   15e68:	2cb4177f 	.word	0x2cb4177f
   15e6c:	00e5109f 	.word	0x00e5109f
   15e70:	431bde83 	.word	0x431bde83
   15e74:	2000328c 	.word	0x2000328c
   15e78:	20003288 	.word	0x20003288
   15e7c:	2000ba10 	.word	0x2000ba10
   15e80:	165e9f81 	.word	0x165e9f81
   15e84:	00b71b00 	.word	0x00b71b00
   15e88:	8000206c 	.word	0x8000206c
   15e8c:	8001307f 	.word	0x8001307f
   15e90:	80002000 	.word	0x80002000

00015e94 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
   15e94:	b900      	cbnz	r0, 15e98 <delay+0x4>
   15e96:	4770      	bx	lr
{
   15e98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15e9c:	2101      	movs	r1, #1
   15e9e:	4681      	mov	r9, r0
   15ea0:	4c21      	ldr	r4, [pc, #132]	; (15f28 <delay+0x94>)
   15ea2:	4d22      	ldr	r5, [pc, #136]	; (15f2c <delay+0x98>)
   15ea4:	4e22      	ldr	r6, [pc, #136]	; (15f30 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15ea6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
   15eaa:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   15eac:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15eae:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d1f7      	bne.n	15ea6 <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15eb6:	491f      	ldr	r1, [pc, #124]	; (15f34 <delay+0xa0>)
   15eb8:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
   15eba:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15ebe:	f8df a078 	ldr.w	sl, [pc, #120]	; 15f38 <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
   15ec2:	1a1b      	subs	r3, r3, r0
   15ec4:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
   15ec6:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15eca:	f8da 2000 	ldr.w	r2, [sl]
   15ece:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
   15ed2:	455a      	cmp	r2, fp
   15ed4:	bf94      	ite	ls
   15ed6:	4490      	addls	r8, r2
   15ed8:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15eda:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
   15ede:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
   15ee0:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15ee2:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
   15ee6:	2b00      	cmp	r3, #0
   15ee8:	d1f7      	bne.n	15eda <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15eea:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15eec:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
   15ef0:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
   15ef2:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15ef6:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
   15efa:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
   15efe:	bf94      	ite	ls
   15f00:	4462      	addls	r2, ip
   15f02:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
   15f06:	eba2 0208 	sub.w	r2, r2, r8
   15f0a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
   15f0e:	d306      	bcc.n	15f1e <delay+0x8a>
			if (--msec == 0) return;
   15f10:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
   15f14:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
   15f18:	d1df      	bne.n	15eda <delay+0x46>
}
   15f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
   15f1e:	f002 fb57 	bl	185d0 <yield>
		while ((micros() - start) >= 1000) {
   15f22:	4904      	ldr	r1, [pc, #16]	; (15f34 <delay+0xa0>)
   15f24:	e7d9      	b.n	15eda <delay+0x46>
   15f26:	bf00      	nop
   15f28:	2000bc28 	.word	0x2000bc28
   15f2c:	2000bc24 	.word	0x2000bc24
   15f30:	2000bc20 	.word	0x2000bc20
   15f34:	e0001000 	.word	0xe0001000
   15f38:	2000ba10 	.word	0x2000ba10

00015f3c <micros>:
{
   15f3c:	b430      	push	{r4, r5}
   15f3e:	4b0f      	ldr	r3, [pc, #60]	; (15f7c <micros+0x40>)
   15f40:	f04f 0c01 	mov.w	ip, #1
   15f44:	4d0e      	ldr	r5, [pc, #56]	; (15f80 <micros+0x44>)
   15f46:	4c0f      	ldr	r4, [pc, #60]	; (15f84 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
   15f48:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
   15f4c:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
   15f4e:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
   15f50:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
   15f54:	2a00      	cmp	r2, #0
   15f56:	d1f7      	bne.n	15f48 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
   15f58:	4b0b      	ldr	r3, [pc, #44]	; (15f88 <micros+0x4c>)
   15f5a:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f5c:	4a0b      	ldr	r2, [pc, #44]	; (15f8c <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
   15f5e:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
   15f60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f64:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
   15f66:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
   15f6a:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
   15f6e:	bc30      	pop	{r4, r5}
   15f70:	428a      	cmp	r2, r1
   15f72:	bf94      	ite	ls
   15f74:	1880      	addls	r0, r0, r2
   15f76:	1840      	addhi	r0, r0, r1
   15f78:	4770      	bx	lr
   15f7a:	bf00      	nop
   15f7c:	2000bc28 	.word	0x2000bc28
   15f80:	2000bc24 	.word	0x2000bc24
   15f84:	2000bc20 	.word	0x2000bc20
   15f88:	e0001000 	.word	0xe0001000
   15f8c:	2000ba10 	.word	0x2000ba10

00015f90 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
   15f90:	2836      	cmp	r0, #54	; 0x36
   15f92:	d816      	bhi.n	15fc2 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
   15f94:	0102      	lsls	r2, r0, #4
   15f96:	4b10      	ldr	r3, [pc, #64]	; (15fd8 <digitalWrite+0x48>)
   15f98:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
   15f9c:	589b      	ldr	r3, [r3, r2]
{
   15f9e:	b410      	push	{r4}
	mask = p->mask;
   15fa0:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
   15fa2:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
   15fa4:	4214      	tst	r4, r2
   15fa6:	d005      	beq.n	15fb4 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
   15fa8:	b961      	cbnz	r1, 15fc4 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
   15faa:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
   15fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
   15fb2:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15fb4:	6883      	ldr	r3, [r0, #8]
		if (val) {
   15fb6:	b151      	cbz	r1, 15fce <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15fb8:	4a08      	ldr	r2, [pc, #32]	; (15fdc <digitalWrite+0x4c>)
}
   15fba:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   15fbe:	601a      	str	r2, [r3, #0]
}
   15fc0:	4770      	bx	lr
   15fc2:	4770      	bx	lr
   15fc4:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
   15fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
   15fcc:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   15fce:	4a04      	ldr	r2, [pc, #16]	; (15fe0 <digitalWrite+0x50>)
}
   15fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   15fd4:	601a      	str	r2, [r3, #0]
}
   15fd6:	4770      	bx	lr
   15fd8:	200024c4 	.word	0x200024c4
   15fdc:	0001f038 	.word	0x0001f038
   15fe0:	00013038 	.word	0x00013038

00015fe4 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
   15fe4:	2836      	cmp	r0, #54	; 0x36
   15fe6:	d80b      	bhi.n	16000 <digitalRead+0x1c>
	p = digital_pin_to_info_PGM + pin;
   15fe8:	4b06      	ldr	r3, [pc, #24]	; (16004 <digitalRead+0x20>)
   15fea:	0102      	lsls	r2, r0, #4
   15fec:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
   15ff0:	589a      	ldr	r2, [r3, r2]
   15ff2:	68c3      	ldr	r3, [r0, #12]
   15ff4:	6892      	ldr	r2, [r2, #8]
   15ff6:	421a      	tst	r2, r3
   15ff8:	bf14      	ite	ne
   15ffa:	2001      	movne	r0, #1
   15ffc:	2000      	moveq	r0, #0
   15ffe:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
   16000:	2000      	movs	r0, #0
}
   16002:	4770      	bx	lr
   16004:	200024c4 	.word	0x200024c4

00016008 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
   16008:	2836      	cmp	r0, #54	; 0x36
   1600a:	d829      	bhi.n	16060 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
   1600c:	4b16      	ldr	r3, [pc, #88]	; (16068 <pinMode+0x60>)
   1600e:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   16010:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
   16012:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   16016:	589a      	ldr	r2, [r3, r2]
{
   16018:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   1601a:	6853      	ldr	r3, [r2, #4]
   1601c:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
   1601e:	d00e      	beq.n	1603e <pinMode+0x36>
   16020:	2904      	cmp	r1, #4
   16022:	d00c      	beq.n	1603e <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
   16024:	ea23 0304 	bic.w	r3, r3, r4
   16028:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1602a:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
   1602c:	b1a9      	cbz	r1, 1605a <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
   1602e:	2902      	cmp	r1, #2
   16030:	d017      	beq.n	16062 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
   16032:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
   16034:	bf0c      	ite	eq
   16036:	4a0d      	ldreq	r2, [pc, #52]	; (1606c <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
   16038:	4a0d      	ldrne	r2, [pc, #52]	; (16070 <pinMode+0x68>)
   1603a:	601a      	str	r2, [r3, #0]
   1603c:	e007      	b.n	1604e <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
   1603e:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
   16040:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
   16042:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
   16044:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
   16046:	d008      	beq.n	1605a <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
   16048:	f640 0238 	movw	r2, #2104	; 0x838
   1604c:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
   1604e:	6843      	ldr	r3, [r0, #4]
   16050:	2215      	movs	r2, #21
}
   16052:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
   16056:	601a      	str	r2, [r3, #0]
}
   16058:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
   1605a:	2238      	movs	r2, #56	; 0x38
   1605c:	601a      	str	r2, [r3, #0]
   1605e:	e7f6      	b.n	1604e <pinMode+0x46>
   16060:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
   16062:	4a04      	ldr	r2, [pc, #16]	; (16074 <pinMode+0x6c>)
   16064:	601a      	str	r2, [r3, #0]
   16066:	e7f2      	b.n	1604e <pinMode+0x46>
   16068:	200024c4 	.word	0x200024c4
   1606c:	00013038 	.word	0x00013038
   16070:	00010038 	.word	0x00010038
   16074:	0001f038 	.word	0x0001f038

00016078 <flash_wait>:
{
   16078:	b430      	push	{r4, r5}
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   1607a:	4a12      	ldr	r2, [pc, #72]	; (160c4 <flash_wait+0x4c>)
	FLEXSPI_LUT61 = 0;
   1607c:	2000      	movs	r0, #0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   1607e:	4b12      	ldr	r3, [pc, #72]	; (160c8 <flash_wait+0x50>)
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   16080:	2101      	movs	r1, #1
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   16082:	4d12      	ldr	r5, [pc, #72]	; (160cc <flash_wait+0x54>)
		status = *(uint8_t *)&FLEXSPI_RFDR0;
   16084:	4c12      	ldr	r4, [pc, #72]	; (160d0 <flash_wait+0x58>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x05) | LUT1(READ_SDR, PINS1, 1); // 05 = read status
   16086:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   1608a:	f8c2 02f4 	str.w	r0, [r2, #756]	; 0x2f4
		FLEXSPI_IPRXFCR = FLEXSPI_IPRXFCR_CLRIPRXF; // clear rx fifo
   1608e:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
		FLEXSPI_IPCR0 = 0;
   16092:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
		FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(1);
   16096:	f8c2 50a4 	str.w	r5, [r2, #164]	; 0xa4
		FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   1609a:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
		while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) {;}
   1609e:	6953      	ldr	r3, [r2, #20]
   160a0:	07db      	lsls	r3, r3, #31
   160a2:	d5fc      	bpl.n	1609e <flash_wait+0x26>
		FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   160a4:	6151      	str	r1, [r2, #20]
	} while (status & 1);
   160a6:	7823      	ldrb	r3, [r4, #0]
   160a8:	07db      	lsls	r3, r3, #31
   160aa:	d4f0      	bmi.n	1608e <flash_wait+0x16>
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   160ac:	6813      	ldr	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   160ae:	4905      	ldr	r1, [pc, #20]	; (160c4 <flash_wait+0x4c>)
	FLEXSPI_MCR0 |= FLEXSPI_MCR0_SWRESET; // purge stale data from FlexSPI's AHB FIFO
   160b0:	f043 0301 	orr.w	r3, r3, #1
   160b4:	6013      	str	r3, [r2, #0]
	while (FLEXSPI_MCR0 & FLEXSPI_MCR0_SWRESET) ; // wait
   160b6:	680b      	ldr	r3, [r1, #0]
   160b8:	07db      	lsls	r3, r3, #31
   160ba:	d4fc      	bmi.n	160b6 <flash_wait+0x3e>
	__enable_irq();
   160bc:	b662      	cpsie	i
}
   160be:	bc30      	pop	{r4, r5}
   160c0:	4770      	bx	lr
   160c2:	bf00      	nop
   160c4:	402a8000 	.word	0x402a8000
   160c8:	24010405 	.word	0x24010405
   160cc:	000f0001 	.word	0x000f0001
   160d0:	402a8100 	.word	0x402a8100

000160d4 <eeprom_initialize>:
{
   160d4:	b570      	push	{r4, r5, r6, lr}
   160d6:	4c0e      	ldr	r4, [pc, #56]	; (16110 <eeprom_initialize+0x3c>)
			if (*p++ == 0xFFFF) break;
   160d8:	f64f 7eff 	movw	lr, #65535	; 0xffff
{
   160dc:	4e0d      	ldr	r6, [pc, #52]	; (16114 <eeprom_initialize+0x40>)
   160de:	f104 057e 	add.w	r5, r4, #126	; 0x7e
		const uint16_t *p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   160e2:	f5a6 5380 	sub.w	r3, r6, #4096	; 0x1000
		uint16_t index = 0;
   160e6:	2100      	movs	r1, #0
   160e8:	e002      	b.n	160f0 <eeprom_initialize+0x1c>
		} while (p < end);
   160ea:	42b3      	cmp	r3, r6
			index++;
   160ec:	b281      	uxth	r1, r0
		} while (p < end);
   160ee:	d204      	bcs.n	160fa <eeprom_initialize+0x26>
			if (*p++ == 0xFFFF) break;
   160f0:	881a      	ldrh	r2, [r3, #0]
			index++;
   160f2:	1c48      	adds	r0, r1, #1
			if (*p++ == 0xFFFF) break;
   160f4:	3302      	adds	r3, #2
   160f6:	4572      	cmp	r2, lr
   160f8:	d1f7      	bne.n	160ea <eeprom_initialize+0x16>
		sector_index[sector] = index;
   160fa:	f824 1f02 	strh.w	r1, [r4, #2]!
	for (sector=0; sector < FLASH_SECTORS; sector++) {
   160fe:	42ac      	cmp	r4, r5
   16100:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
   16104:	d1ed      	bne.n	160e2 <eeprom_initialize+0xe>
	initialized = 1;
   16106:	4b04      	ldr	r3, [pc, #16]	; (16118 <eeprom_initialize+0x44>)
   16108:	2201      	movs	r2, #1
   1610a:	701a      	strb	r2, [r3, #0]
}
   1610c:	bd70      	pop	{r4, r5, r6, pc}
   1610e:	bf00      	nop
   16110:	2000ba12 	.word	0x2000ba12
   16114:	607c1000 	.word	0x607c1000
   16118:	2000c952 	.word	0x2000c952

0001611c <eeprom_read_byte>:
	if (addr > E2END) return 0xFF;
   1611c:	f241 03bb 	movw	r3, #4283	; 0x10bb
   16120:	4298      	cmp	r0, r3
   16122:	d82f      	bhi.n	16184 <eeprom_read_byte+0x68>
	if (!initialized) eeprom_initialize();
   16124:	4b18      	ldr	r3, [pc, #96]	; (16188 <eeprom_read_byte+0x6c>)
{
   16126:	b510      	push	{r4, lr}
	if (!initialized) eeprom_initialize();
   16128:	781b      	ldrb	r3, [r3, #0]
   1612a:	4604      	mov	r4, r0
   1612c:	b33b      	cbz	r3, 1617e <eeprom_read_byte+0x62>
	sector = (addr >> 2) % FLASH_SECTORS;
   1612e:	08a0      	lsrs	r0, r4, #2
   16130:	4b16      	ldr	r3, [pc, #88]	; (1618c <eeprom_read_byte+0x70>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   16132:	f004 0103 	and.w	r1, r4, #3
	end = p + sector_index[sector];
   16136:	4c16      	ldr	r4, [pc, #88]	; (16190 <eeprom_read_byte+0x74>)
	sector = (addr >> 2) % FLASH_SECTORS;
   16138:	fba3 2300 	umull	r2, r3, r3, r0
   1613c:	1ac2      	subs	r2, r0, r3
   1613e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16142:	4a14      	ldr	r2, [pc, #80]	; (16194 <eeprom_read_byte+0x78>)
	sector = (addr >> 2) % FLASH_SECTORS;
   16144:	095b      	lsrs	r3, r3, #5
   16146:	ebc3 1e83 	rsb	lr, r3, r3, lsl #6
   1614a:	469c      	mov	ip, r3
   1614c:	eba0 030e 	sub.w	r3, r0, lr
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   16150:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
	uint8_t data=0xFF;
   16154:	20ff      	movs	r0, #255	; 0xff
	end = p + sector_index[sector];
   16156:	f834 c013 	ldrh.w	ip, [r4, r3, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1615a:	441a      	add	r2, r3
	end = p + sector_index[sector];
   1615c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16160:	0313      	lsls	r3, r2, #12
	end = p + sector_index[sector];
   16162:	eb0c 3c02 	add.w	ip, ip, r2, lsl #12
	while (p < end) {
   16166:	ebbc 3f02 	cmp.w	ip, r2, lsl #12
   1616a:	d907      	bls.n	1617c <eeprom_read_byte+0x60>
		uint32_t val = *p++;
   1616c:	881a      	ldrh	r2, [r3, #0]
   1616e:	3302      	adds	r3, #2
		if ((val & 255) == offset) data = val >> 8;
   16170:	b2d4      	uxtb	r4, r2
   16172:	428c      	cmp	r4, r1
   16174:	bf08      	it	eq
   16176:	0a10      	lsreq	r0, r2, #8
	while (p < end) {
   16178:	459c      	cmp	ip, r3
   1617a:	d8f7      	bhi.n	1616c <eeprom_read_byte+0x50>
}
   1617c:	bd10      	pop	{r4, pc}
	if (!initialized) eeprom_initialize();
   1617e:	f7ff ffa9 	bl	160d4 <eeprom_initialize>
   16182:	e7d4      	b.n	1612e <eeprom_read_byte+0x12>
	if (addr > E2END) return 0xFF;
   16184:	20ff      	movs	r0, #255	; 0xff
}
   16186:	4770      	bx	lr
   16188:	2000c952 	.word	0x2000c952
   1618c:	04104105 	.word	0x04104105
   16190:	2000ba14 	.word	0x2000ba14
   16194:	000607c0 	.word	0x000607c0

00016198 <eepromemu_flash_write>:
{
   16198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1619a:	460f      	mov	r7, r1
   1619c:	4616      	mov	r6, r2
	__disable_irq();
   1619e:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   161a0:	4b34      	ldr	r3, [pc, #208]	; (16274 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   161a2:	f240 4106 	movw	r1, #1030	; 0x406
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   161a6:	4a34      	ldr	r2, [pc, #208]	; (16278 <eepromemu_flash_write+0xe0>)
   161a8:	619a      	str	r2, [r3, #24]
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   161aa:	2202      	movs	r2, #2
   161ac:	61da      	str	r2, [r3, #28]
	FLEXSPI_IPCR0 = 0;
   161ae:	2200      	movs	r2, #0
   161b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   161b4:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_LUT61 = 0;
   161b8:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   161bc:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   161c0:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   161c4:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   161c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   161cc:	2201      	movs	r2, #1
   161ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   161d2:	f020 031f 	bic.w	r3, r0, #31
	uint32_t end_addr = (uint32_t)addr + size;
   161d6:	1982      	adds	r2, r0, r6
	asm("dsb");
   161d8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   161dc:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
   161e0:	f8c4 3f5c 	str.w	r3, [r4, #3932]	; 0xf5c
		location += 32;
   161e4:	3320      	adds	r3, #32
	} while (location < end_addr);
   161e6:	429a      	cmp	r2, r3
   161e8:	d8fa      	bhi.n	161e0 <eepromemu_flash_write+0x48>
	asm("dsb");
   161ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
   161ee:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   161f2:	4d20      	ldr	r5, [pc, #128]	; (16274 <eepromemu_flash_write+0xdc>)
   161f4:	696b      	ldr	r3, [r5, #20]
   161f6:	07da      	lsls	r2, r3, #31
   161f8:	d5fc      	bpl.n	161f4 <eepromemu_flash_write+0x5c>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   161fa:	2301      	movs	r3, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   161fc:	491f      	ldr	r1, [pc, #124]	; (1627c <eepromemu_flash_write+0xe4>)
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   161fe:	b2b2      	uxth	r2, r6
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   16200:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16204:	616b      	str	r3, [r5, #20]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   16206:	f442 2270 	orr.w	r2, r2, #983040	; 0xf0000
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x32) | LUT1(ADDR_SDR, PINS1, 24); // 32 = quad write
   1620a:	f8c5 12f0 	str.w	r1, [r5, #752]	; 0x2f0
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   1620e:	f242 2101 	movw	r1, #8705	; 0x2201
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   16212:	4c18      	ldr	r4, [pc, #96]	; (16274 <eepromemu_flash_write+0xdc>)
	FLEXSPI_LUT61 = LUT0(WRITE_SDR, PINS4, 1);
   16214:	f8c5 12f4 	str.w	r1, [r5, #756]	; 0x2f4
	FLEXSPI_IPTXFCR = FLEXSPI_IPTXFCR_CLRIPTXF; // clear tx fifo
   16218:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFFFFF;
   1621c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15) | FLEXSPI_IPCR1_IDATSZ(len);
   16220:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16224:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16228:	4d15      	ldr	r5, [pc, #84]	; (16280 <eepromemu_flash_write+0xe8>)
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   1622a:	e001      	b.n	16230 <eepromemu_flash_write+0x98>
		if (n & FLEXSPI_INTR_IPTXWE) {
   1622c:	065b      	lsls	r3, r3, #25
   1622e:	d409      	bmi.n	16244 <eepromemu_flash_write+0xac>
	while (!((n = FLEXSPI_INTR) & FLEXSPI_INTR_IPCMDDONE)) {
   16230:	6963      	ldr	r3, [r4, #20]
   16232:	f013 0001 	ands.w	r0, r3, #1
   16236:	d0f9      	beq.n	1622c <eepromemu_flash_write+0x94>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE | FLEXSPI_INTR_IPTXWE;
   16238:	2341      	movs	r3, #65	; 0x41
   1623a:	6163      	str	r3, [r4, #20]
}
   1623c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	flash_wait();
   16240:	f7ff bf1a 	b.w	16078 <flash_wait>
			if (wrlen > 8) wrlen = 8;
   16244:	2e08      	cmp	r6, #8
   16246:	d80a      	bhi.n	1625e <eepromemu_flash_write+0xc6>
			if (wrlen > 0) {
   16248:	b136      	cbz	r6, 16258 <eepromemu_flash_write+0xc0>
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1624a:	4632      	mov	r2, r6
   1624c:	4639      	mov	r1, r7
				src += wrlen;
   1624e:	4437      	add	r7, r6
				len -= wrlen;
   16250:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16252:	4628      	mov	r0, r5
   16254:	f000 f9a2 	bl	1659c <memcpy>
			FLEXSPI_INTR = FLEXSPI_INTR_IPTXWE;
   16258:	2340      	movs	r3, #64	; 0x40
   1625a:	6163      	str	r3, [r4, #20]
   1625c:	e7e8      	b.n	16230 <eepromemu_flash_write+0x98>
   1625e:	f1a6 0008 	sub.w	r0, r6, #8
			if (wrlen > 8) wrlen = 8;
   16262:	2608      	movs	r6, #8
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   16264:	4639      	mov	r1, r7
   16266:	4632      	mov	r2, r6
				src += wrlen;
   16268:	4437      	add	r7, r6
				len -= wrlen;
   1626a:	4606      	mov	r6, r0
				memcpy((void *)&FLEXSPI_TFDR0, src, wrlen);
   1626c:	4628      	mov	r0, r5
   1626e:	f000 f995 	bl	1659c <memcpy>
				len -= wrlen;
   16272:	e7f1      	b.n	16258 <eepromemu_flash_write+0xc0>
   16274:	402a8000 	.word	0x402a8000
   16278:	5af05af0 	.word	0x5af05af0
   1627c:	08180432 	.word	0x08180432
   16280:	402a8180 	.word	0x402a8180

00016284 <eepromemu_flash_erase_sector>:
{
   16284:	b410      	push	{r4}
	__disable_irq();
   16286:	b672      	cpsid	i
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16288:	4b28      	ldr	r3, [pc, #160]	; (1632c <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   1628a:	2102      	movs	r1, #2
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   1628c:	4c28      	ldr	r4, [pc, #160]	; (16330 <eepromemu_flash_erase_sector+0xac>)
	FLEXSPI_LUT61 = 0;
   1628e:	2200      	movs	r2, #0
	FLEXSPI_LUTKEY = FLEXSPI_LUTKEY_VALUE;
   16290:	619c      	str	r4, [r3, #24]
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   16292:	f44f 2470 	mov.w	r4, #983040	; 0xf0000
	FLEXSPI_LUTCR = FLEXSPI_LUTCR_UNLOCK;
   16296:	61d9      	str	r1, [r3, #28]
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x06); // 06 = write enable
   16298:	f240 4106 	movw	r1, #1030	; 0x406
   1629c:	f8c3 12f0 	str.w	r1, [r3, #752]	; 0x2f0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   162a0:	2101      	movs	r1, #1
	FLEXSPI_LUT61 = 0;
   162a2:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
	FLEXSPI_LUT62 = 0;
   162a6:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
	FLEXSPI_LUT63 = 0;
   162aa:	f8c3 22fc 	str.w	r2, [r3, #764]	; 0x2fc
	FLEXSPI_IPCR0 = 0;
   162ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   162b2:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   162b6:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
	arm_dcache_delete((void *)((uint32_t)addr & 0xFFFFF000), 4096); // purge data from cache
   162ba:	4002      	ands	r2, r0
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   162bc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
	asm("dsb");
   162c0:	f3bf 8f4f 	dsb	sy
	uint32_t end_addr = (uint32_t)addr + size;
   162c4:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
   162c8:	f102 0320 	add.w	r3, r2, #32
		SCB_CACHE_DCIMVAC = location;
   162cc:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
   162d0:	4299      	cmp	r1, r3
   162d2:	bf34      	ite	cc
   162d4:	2101      	movcc	r1, #1
   162d6:	2180      	movcs	r1, #128	; 0x80
   162d8:	eb02 1141 	add.w	r1, r2, r1, lsl #5
	} while (location < end_addr);
   162dc:	428b      	cmp	r3, r1
		SCB_CACHE_DCIMVAC = location;
   162de:	f8cc 2f5c 	str.w	r2, [ip, #3932]	; 0xf5c
		location += 32;
   162e2:	461a      	mov	r2, r3
	} while (location < end_addr);
   162e4:	f103 0320 	add.w	r3, r3, #32
   162e8:	d1f8      	bne.n	162dc <eepromemu_flash_erase_sector+0x58>
	asm("dsb");
   162ea:	f3bf 8f4f 	dsb	sy
	asm("isb");
   162ee:	f3bf 8f6f 	isb	sy
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   162f2:	4a0e      	ldr	r2, [pc, #56]	; (1632c <eepromemu_flash_erase_sector+0xa8>)
   162f4:	6953      	ldr	r3, [r2, #20]
   162f6:	07d9      	lsls	r1, r3, #31
   162f8:	d5fc      	bpl.n	162f4 <eepromemu_flash_erase_sector+0x70>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   162fa:	2401      	movs	r4, #1
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   162fc:	490d      	ldr	r1, [pc, #52]	; (16334 <eepromemu_flash_erase_sector+0xb0>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   162fe:	4b0e      	ldr	r3, [pc, #56]	; (16338 <eepromemu_flash_erase_sector+0xb4>)
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16300:	6154      	str	r4, [r2, #20]
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   16302:	4003      	ands	r3, r0
	FLEXSPI_LUT60 = LUT0(CMD_SDR, PINS1, 0x20) | LUT1(ADDR_SDR, PINS1, 24); // 20 = sector erase
   16304:	f8c2 12f0 	str.w	r1, [r2, #752]	; 0x2f0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   16308:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1630c:	4907      	ldr	r1, [pc, #28]	; (1632c <eepromemu_flash_erase_sector+0xa8>)
	FLEXSPI_IPCR0 = (uint32_t)addr & 0x00FFF000;
   1630e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	FLEXSPI_IPCR1 = FLEXSPI_IPCR1_ISEQID(15);
   16312:	f8c2 00a4 	str.w	r0, [r2, #164]	; 0xa4
	FLEXSPI_IPCMD = FLEXSPI_IPCMD_TRG;
   16316:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
	while (!(FLEXSPI_INTR & FLEXSPI_INTR_IPCMDDONE)) ; // wait
   1631a:	694b      	ldr	r3, [r1, #20]
   1631c:	07db      	lsls	r3, r3, #31
   1631e:	d5fc      	bpl.n	1631a <eepromemu_flash_erase_sector+0x96>
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16320:	2301      	movs	r3, #1
}
   16322:	f85d 4b04 	ldr.w	r4, [sp], #4
	FLEXSPI_INTR = FLEXSPI_INTR_IPCMDDONE;
   16326:	614b      	str	r3, [r1, #20]
	flash_wait();
   16328:	f7ff bea6 	b.w	16078 <flash_wait>
   1632c:	402a8000 	.word	0x402a8000
   16330:	5af05af0 	.word	0x5af05af0
   16334:	08180420 	.word	0x08180420
   16338:	00fff000 	.word	0x00fff000

0001633c <eeprom_write_byte>:
	if (addr > E2END) return;
   1633c:	f241 03bb 	movw	r3, #4283	; 0x10bb
   16340:	4298      	cmp	r0, r3
   16342:	f200 8089 	bhi.w	16458 <eeprom_write_byte+0x11c>
	if (!initialized) eeprom_initialize();
   16346:	4b46      	ldr	r3, [pc, #280]	; (16460 <eeprom_write_byte+0x124>)
{
   16348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!initialized) eeprom_initialize();
   1634c:	781b      	ldrb	r3, [r3, #0]
{
   1634e:	b0c2      	sub	sp, #264	; 0x108
   16350:	4605      	mov	r5, r0
   16352:	4689      	mov	r9, r1
	if (!initialized) eeprom_initialize();
   16354:	2b00      	cmp	r3, #0
   16356:	d07c      	beq.n	16452 <eeprom_write_byte+0x116>
	sector = (addr >> 2) % FLASH_SECTORS; 
   16358:	08ab      	lsrs	r3, r5, #2
   1635a:	4e42      	ldr	r6, [pc, #264]	; (16464 <eeprom_write_byte+0x128>)
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1635c:	f005 0503 	and.w	r5, r5, #3
	end = p + sector_index[sector];
   16360:	4f41      	ldr	r7, [pc, #260]	; (16468 <eeprom_write_byte+0x12c>)
	sector = (addr >> 2) % FLASH_SECTORS; 
   16362:	fba6 2603 	umull	r2, r6, r6, r3
   16366:	1b9a      	subs	r2, r3, r6
   16368:	eb06 0652 	add.w	r6, r6, r2, lsr #1
   1636c:	0976      	lsrs	r6, r6, #5
	offset = (addr & 3) | (((addr >> 2) / FLASH_SECTORS) << 2);
   1636e:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
	sector = (addr >> 2) % FLASH_SECTORS; 
   16372:	ebc6 1686 	rsb	r6, r6, r6, lsl #6
   16376:	1b9e      	subs	r6, r3, r6
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16378:	4b3c      	ldr	r3, [pc, #240]	; (1646c <eeprom_write_byte+0x130>)
	end = p + sector_index[sector];
   1637a:	f837 4016 	ldrh.w	r4, [r7, r6, lsl #1]
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   1637e:	4433      	add	r3, r6
	end = p + sector_index[sector];
   16380:	0060      	lsls	r0, r4, #1
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   16382:	ea4f 3803 	mov.w	r8, r3, lsl #12
	end = p + sector_index[sector];
   16386:	eb00 3003 	add.w	r0, r0, r3, lsl #12
	while (p < end) {
   1638a:	ebb0 3f03 	cmp.w	r0, r3, lsl #12
   1638e:	d964      	bls.n	1645a <eeprom_write_byte+0x11e>
   16390:	4643      	mov	r3, r8
	uint8_t olddata=0xFF;
   16392:	f04f 0cff 	mov.w	ip, #255	; 0xff
		uint16_t val = *p++;
   16396:	881a      	ldrh	r2, [r3, #0]
   16398:	3302      	adds	r3, #2
		if ((val & 255) == offset) olddata = val >> 8;
   1639a:	b2d1      	uxtb	r1, r2
   1639c:	42a9      	cmp	r1, r5
   1639e:	bf08      	it	eq
   163a0:	ea4f 2c12 	moveq.w	ip, r2, lsr #8
	while (p < end) {
   163a4:	4298      	cmp	r0, r3
   163a6:	d8f6      	bhi.n	16396 <eeprom_write_byte+0x5a>
	if (data == olddata) return;
   163a8:	45e1      	cmp	r9, ip
   163aa:	d041      	beq.n	16430 <eeprom_write_byte+0xf4>
	if (sector_index[sector] < 2048) {
   163ac:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
   163b0:	d341      	bcc.n	16436 <eeprom_write_byte+0xfa>
		memset(buf, 0xFF, sizeof(buf));
   163b2:	ac02      	add	r4, sp, #8
   163b4:	f44f 7280 	mov.w	r2, #256	; 0x100
   163b8:	21ff      	movs	r1, #255	; 0xff
   163ba:	4620      	mov	r0, r4
   163bc:	f00c f890 	bl	224e0 <memset>
		while (p < end) {
   163c0:	f508 5080 	add.w	r0, r8, #4096	; 0x1000
   163c4:	f108 0302 	add.w	r3, r8, #2
	p = (uint16_t *)(FLASH_BASEADDR + sector * 4096);
   163c8:	4642      	mov	r2, r8
   163ca:	4298      	cmp	r0, r3
   163cc:	bf34      	ite	cc
   163ce:	2001      	movcc	r0, #1
   163d0:	f44f 6000 	movcs.w	r0, #2048	; 0x800
   163d4:	eb08 0040 	add.w	r0, r8, r0, lsl #1
			uint16_t val = *p++;
   163d8:	4613      	mov	r3, r2
   163da:	3202      	adds	r2, #2
   163dc:	881b      	ldrh	r3, [r3, #0]
		while (p < end) {
   163de:	4282      	cmp	r2, r0
			buf[val & 255] = val >> 8;
   163e0:	b2d9      	uxtb	r1, r3
   163e2:	ea4f 2313 	mov.w	r3, r3, lsr #8
   163e6:	5463      	strb	r3, [r4, r1]
		while (p < end) {
   163e8:	d1f6      	bne.n	163d8 <eeprom_write_byte+0x9c>
		buf[offset] = data;
   163ea:	f804 9005 	strb.w	r9, [r4, r5]
		eepromemu_flash_erase_sector(p);
   163ee:	f10d 0907 	add.w	r9, sp, #7
   163f2:	f20d 1a07 	addw	sl, sp, #263	; 0x107
		index = 0;
   163f6:	2500      	movs	r5, #0
		eepromemu_flash_erase_sector(p);
   163f8:	464c      	mov	r4, r9
   163fa:	4640      	mov	r0, r8
   163fc:	f7ff ff42 	bl	16284 <eepromemu_flash_erase_sector>
			if (buf[i] != 0xFF) {
   16400:	f814 cf01 	ldrb.w	ip, [r4, #1]!
				eepromemu_flash_write(p + index, &newval, 2);
   16404:	eb08 0045 	add.w	r0, r8, r5, lsl #1
   16408:	2202      	movs	r2, #2
   1640a:	f10d 0106 	add.w	r1, sp, #6
				uint16_t newval = i | (buf[i] << 8);
   1640e:	1e63      	subs	r3, r4, #1
			if (buf[i] != 0xFF) {
   16410:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
				uint16_t newval = i | (buf[i] << 8);
   16414:	eba3 0309 	sub.w	r3, r3, r9
			if (buf[i] != 0xFF) {
   16418:	d006      	beq.n	16428 <eeprom_write_byte+0xec>
				uint16_t newval = i | (buf[i] << 8);
   1641a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
				index = index + 1;
   1641e:	3501      	adds	r5, #1
				uint16_t newval = i | (buf[i] << 8);
   16420:	f8ad 3006 	strh.w	r3, [sp, #6]
				eepromemu_flash_write(p + index, &newval, 2);
   16424:	f7ff feb8 	bl	16198 <eepromemu_flash_write>
		for (i=0; i < 256; i++) {
   16428:	45a2      	cmp	sl, r4
   1642a:	d1e9      	bne.n	16400 <eeprom_write_byte+0xc4>
		sector_index[sector] = index;
   1642c:	f827 5016 	strh.w	r5, [r7, r6, lsl #1]
}
   16430:	b042      	add	sp, #264	; 0x108
   16432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint16_t newdata = offset | (data << 8);
   16436:	ea45 2509 	orr.w	r5, r5, r9, lsl #8
		eepromemu_flash_write(end, &newdata, 2);
   1643a:	a902      	add	r1, sp, #8
   1643c:	2202      	movs	r2, #2
		sector_index[sector] = sector_index[sector] + 1;
   1643e:	3401      	adds	r4, #1
		uint16_t newdata = offset | (data << 8);
   16440:	f8ad 5008 	strh.w	r5, [sp, #8]
		eepromemu_flash_write(end, &newdata, 2);
   16444:	f7ff fea8 	bl	16198 <eepromemu_flash_write>
		sector_index[sector] = sector_index[sector] + 1;
   16448:	f827 4016 	strh.w	r4, [r7, r6, lsl #1]
}
   1644c:	b042      	add	sp, #264	; 0x108
   1644e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!initialized) eeprom_initialize();
   16452:	f7ff fe3f 	bl	160d4 <eeprom_initialize>
   16456:	e77f      	b.n	16358 <eeprom_write_byte+0x1c>
   16458:	4770      	bx	lr
	uint8_t olddata=0xFF;
   1645a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1645e:	e7a3      	b.n	163a8 <eeprom_write_byte+0x6c>
   16460:	2000c952 	.word	0x2000c952
   16464:	04104105 	.word	0x04104105
   16468:	2000ba14 	.word	0x2000ba14
   1646c:	000607c0 	.word	0x000607c0

00016470 <eeprom_write_block>:
	while (len--) {
   16470:	b162      	cbz	r2, 1648c <eeprom_write_block+0x1c>
{
   16472:	b570      	push	{r4, r5, r6, lr}
   16474:	4605      	mov	r5, r0
   16476:	460c      	mov	r4, r1
   16478:	188e      	adds	r6, r1, r2
		eeprom_write_byte(p++, *src++);
   1647a:	4620      	mov	r0, r4
   1647c:	3401      	adds	r4, #1
   1647e:	f815 1b01 	ldrb.w	r1, [r5], #1
   16482:	f7ff ff5b 	bl	1633c <eeprom_write_byte>
	while (len--) {
   16486:	42b4      	cmp	r4, r6
   16488:	d1f7      	bne.n	1647a <eeprom_write_block+0xa>
}
   1648a:	bd70      	pop	{r4, r5, r6, pc}
   1648c:	4770      	bx	lr
   1648e:	bf00      	nop

00016490 <dummy_isr>:
static void dummy_isr() {};
   16490:	4770      	bx	lr
   16492:	bf00      	nop

00016494 <attachInterrupt>:

#endif

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	if (pin >= CORE_NUM_DIGITAL) return;
   16494:	2836      	cmp	r0, #54	; 0x36
   16496:	d852      	bhi.n	1653e <attachInterrupt+0xaa>
	//printf("attachInterrupt, pin=%u\n", pin);
	volatile uint32_t *gpio = portOutputRegister(pin);
   16498:	0100      	lsls	r0, r0, #4
{
   1649a:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *gpio = portOutputRegister(pin);
   1649c:	4c31      	ldr	r4, [pc, #196]	; (16564 <attachInterrupt+0xd0>)

	voidFuncPtr *table;

#if defined(__IMXRT1062__)

	switch((uint32_t)gpio) {
   1649e:	4d32      	ldr	r5, [pc, #200]	; (16568 <attachInterrupt+0xd4>)
	volatile uint32_t *gpio = portOutputRegister(pin);
   164a0:	5823      	ldr	r3, [r4, r0]
	switch((uint32_t)gpio) {
   164a2:	42ab      	cmp	r3, r5
   164a4:	d050      	beq.n	16548 <attachInterrupt+0xb4>
   164a6:	d843      	bhi.n	16530 <attachInterrupt+0x9c>
   164a8:	f1b3 4f84 	cmp.w	r3, #1107296256	; 0x42000000
   164ac:	d045      	beq.n	1653a <attachInterrupt+0xa6>
   164ae:	f5a5 4580 	sub.w	r5, r5, #16384	; 0x4000
   164b2:	42ab      	cmp	r3, r5
   164b4:	d13a      	bne.n	1652c <attachInterrupt+0x98>
   164b6:	4d2d      	ldr	r5, [pc, #180]	; (1656c <attachInterrupt+0xd8>)
	volatile uint32_t *mux = portConfigRegister(pin);
   164b8:	4404      	add	r4, r0
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
   164ba:	4e2d      	ldr	r6, [pc, #180]	; (16570 <attachInterrupt+0xdc>)
   164bc:	482d      	ldr	r0, [pc, #180]	; (16574 <attachInterrupt+0xe0>)
   164be:	6867      	ldr	r7, [r4, #4]
   164c0:	f8c0 62b4 	str.w	r6, [r0, #692]	; 0x2b4
	uint32_t mask = digitalPinToBitMask(pin);
   164c4:	68e0      	ldr	r0, [r4, #12]
		default:
			return;
	}

	attachInterruptVector(IRQ_GPIO6789, &irq_gpio6789);
	NVIC_ENABLE_IRQ(IRQ_GPIO6789);
   164c6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
   164ca:	f04f 5600 	mov.w	r6, #536870912	; 0x20000000
   164ce:	2a04      	cmp	r2, #4
   164d0:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110

#endif

	uint32_t icr;
	switch (mode) {
   164d4:	d82a      	bhi.n	1652c <attachInterrupt+0x98>
		case HIGH:    icr = 1; break;
		default: return;
	}

	// TODO: global interrupt disable to protect these read-modify-write accesses?
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   164d6:	695c      	ldr	r4, [r3, #20]
   164d8:	ea24 0400 	bic.w	r4, r4, r0
   164dc:	615c      	str	r4, [r3, #20]
	*mux = 5;		// pin is GPIO
   164de:	f04f 0405 	mov.w	r4, #5
   164e2:	603c      	str	r4, [r7, #0]
	gpio[GDIR_INDEX] &= ~mask;	// pin to input mode
   164e4:	685c      	ldr	r4, [r3, #4]
   164e6:	ea24 0400 	bic.w	r4, r4, r0
   164ea:	605c      	str	r4, [r3, #4]
   164ec:	4c22      	ldr	r4, [pc, #136]	; (16578 <attachInterrupt+0xe4>)
   164ee:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
	uint32_t index = __builtin_ctz(mask);
   164f2:	fa90 f2a0 	rbit	r2, r0
   164f6:	fab2 f282 	clz	r2, r2
	table[index] = function;
   164fa:	f845 1022 	str.w	r1, [r5, r2, lsl #2]
	gpio[IMR_INDEX] &= ~mask;	// disable interrupt
   164fe:	ea6f 0100 	mvn.w	r1, r0
	if (mode == CHANGE) {
   16502:	d01d      	beq.n	16540 <attachInterrupt+0xac>
		gpio[EDGE_INDEX] |= mask;
	} else {
		gpio[EDGE_INDEX] &= ~mask;
   16504:	69dd      	ldr	r5, [r3, #28]
		if (index < 16) {
   16506:	2a0f      	cmp	r2, #15
		gpio[EDGE_INDEX] &= ~mask;
   16508:	ea01 0105 	and.w	r1, r1, r5
   1650c:	61d9      	str	r1, [r3, #28]
		if (index < 16) {
   1650e:	dc1d      	bgt.n	1654c <attachInterrupt+0xb8>
			uint32_t shift = index * 2;
   16510:	0052      	lsls	r2, r2, #1
			gpio[ICR1_INDEX] = (gpio[ICR1_INDEX] & ~(3 << shift)) | (icr << shift);
   16512:	2503      	movs	r5, #3
   16514:	68d9      	ldr	r1, [r3, #12]
   16516:	4094      	lsls	r4, r2
   16518:	fa05 f202 	lsl.w	r2, r5, r2
   1651c:	ea21 0202 	bic.w	r2, r1, r2
   16520:	4322      	orrs	r2, r4
   16522:	60da      	str	r2, [r3, #12]
		} else {
			uint32_t shift = (index - 16) * 2;
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
		}
	}
	gpio[ISR_INDEX] = mask;  // clear any prior pending interrupt
   16524:	6198      	str	r0, [r3, #24]
	gpio[IMR_INDEX] |= mask; // enable interrupt
   16526:	695a      	ldr	r2, [r3, #20]
   16528:	4302      	orrs	r2, r0
   1652a:	615a      	str	r2, [r3, #20]
}
   1652c:	bcf0      	pop	{r4, r5, r6, r7}
   1652e:	4770      	bx	lr
	switch((uint32_t)gpio) {
   16530:	4d12      	ldr	r5, [pc, #72]	; (1657c <attachInterrupt+0xe8>)
   16532:	42ab      	cmp	r3, r5
   16534:	d1fa      	bne.n	1652c <attachInterrupt+0x98>
			table = isr_table_gpio4;
   16536:	4d12      	ldr	r5, [pc, #72]	; (16580 <attachInterrupt+0xec>)
   16538:	e7be      	b.n	164b8 <attachInterrupt+0x24>
			table = isr_table_gpio1;
   1653a:	4d12      	ldr	r5, [pc, #72]	; (16584 <attachInterrupt+0xf0>)
   1653c:	e7bc      	b.n	164b8 <attachInterrupt+0x24>
   1653e:	4770      	bx	lr
		gpio[EDGE_INDEX] |= mask;
   16540:	69da      	ldr	r2, [r3, #28]
   16542:	4302      	orrs	r2, r0
   16544:	61da      	str	r2, [r3, #28]
   16546:	e7ed      	b.n	16524 <attachInterrupt+0x90>
			table = isr_table_gpio3;
   16548:	4d0f      	ldr	r5, [pc, #60]	; (16588 <attachInterrupt+0xf4>)
   1654a:	e7b5      	b.n	164b8 <attachInterrupt+0x24>
			uint32_t shift = (index - 16) * 2;
   1654c:	3a10      	subs	r2, #16
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   1654e:	2503      	movs	r5, #3
   16550:	6919      	ldr	r1, [r3, #16]
			uint32_t shift = (index - 16) * 2;
   16552:	0052      	lsls	r2, r2, #1
			gpio[ICR2_INDEX] = (gpio[ICR2_INDEX] & ~(3 << shift)) | (icr << shift);
   16554:	4094      	lsls	r4, r2
   16556:	fa05 f202 	lsl.w	r2, r5, r2
   1655a:	ea21 0202 	bic.w	r2, r1, r2
   1655e:	4322      	orrs	r2, r4
   16560:	611a      	str	r2, [r3, #16]
   16562:	e7df      	b.n	16524 <attachInterrupt+0x90>
   16564:	200024c4 	.word	0x200024c4
   16568:	42008000 	.word	0x42008000
   1656c:	200039a8 	.word	0x200039a8
   16570:	00000021 	.word	0x00000021
   16574:	20004000 	.word	0x20004000
   16578:	20000824 	.word	0x20000824
   1657c:	4200c000 	.word	0x4200c000
   16580:	20003aa8 	.word	0x20003aa8
   16584:	20003928 	.word	0x20003928
   16588:	20003a28 	.word	0x20003a28

0001658c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
   1658c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
   1658e:	f7f1 fa43 	bl	7a18 <setup>
	while (1) {
		loop();
   16592:	f7f2 fca9 	bl	8ee8 <loop>
		yield();
   16596:	f002 f81b 	bl	185d0 <yield>
	while (1) {
   1659a:	e7fa      	b.n	16592 <main+0x6>

0001659c <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
   1659c:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
   1659e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
   165a2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
   165a6:	d16d      	bne.n	16684 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
   165a8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
   165aa:	d341      	bcc.n	16630 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   165ac:	f851 3b04 	ldr.w	r3, [r1], #4
   165b0:	f840 3b04 	str.w	r3, [r0], #4
   165b4:	f851 3b04 	ldr.w	r3, [r1], #4
   165b8:	f840 3b04 	str.w	r3, [r0], #4
   165bc:	f851 3b04 	ldr.w	r3, [r1], #4
   165c0:	f840 3b04 	str.w	r3, [r0], #4
   165c4:	f851 3b04 	ldr.w	r3, [r1], #4
   165c8:	f840 3b04 	str.w	r3, [r0], #4
   165cc:	f851 3b04 	ldr.w	r3, [r1], #4
   165d0:	f840 3b04 	str.w	r3, [r0], #4
   165d4:	f851 3b04 	ldr.w	r3, [r1], #4
   165d8:	f840 3b04 	str.w	r3, [r0], #4
   165dc:	f851 3b04 	ldr.w	r3, [r1], #4
   165e0:	f840 3b04 	str.w	r3, [r0], #4
   165e4:	f851 3b04 	ldr.w	r3, [r1], #4
   165e8:	f840 3b04 	str.w	r3, [r0], #4
   165ec:	f851 3b04 	ldr.w	r3, [r1], #4
   165f0:	f840 3b04 	str.w	r3, [r0], #4
   165f4:	f851 3b04 	ldr.w	r3, [r1], #4
   165f8:	f840 3b04 	str.w	r3, [r0], #4
   165fc:	f851 3b04 	ldr.w	r3, [r1], #4
   16600:	f840 3b04 	str.w	r3, [r0], #4
   16604:	f851 3b04 	ldr.w	r3, [r1], #4
   16608:	f840 3b04 	str.w	r3, [r0], #4
   1660c:	f851 3b04 	ldr.w	r3, [r1], #4
   16610:	f840 3b04 	str.w	r3, [r0], #4
   16614:	f851 3b04 	ldr.w	r3, [r1], #4
   16618:	f840 3b04 	str.w	r3, [r0], #4
   1661c:	f851 3b04 	ldr.w	r3, [r1], #4
   16620:	f840 3b04 	str.w	r3, [r0], #4
   16624:	f851 3b04 	ldr.w	r3, [r1], #4
   16628:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
   1662c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
   1662e:	d2bd      	bcs.n	165ac <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
   16630:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
   16632:	d311      	bcc.n	16658 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
   16634:	f851 3b04 	ldr.w	r3, [r1], #4
   16638:	f840 3b04 	str.w	r3, [r0], #4
   1663c:	f851 3b04 	ldr.w	r3, [r1], #4
   16640:	f840 3b04 	str.w	r3, [r0], #4
   16644:	f851 3b04 	ldr.w	r3, [r1], #4
   16648:	f840 3b04 	str.w	r3, [r0], #4
   1664c:	f851 3b04 	ldr.w	r3, [r1], #4
   16650:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
   16654:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
   16656:	d2ed      	bcs.n	16634 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
   16658:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
   1665a:	d305      	bcc.n	16668 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
   1665c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
   16660:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
   16664:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
   16666:	d2f9      	bcs.n	1665c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
   16668:	3204      	adds	r2, #4
	beq	.Ldone
   1666a:	d008      	beq.n	1667e <memcpy+0xe2>

	lsls	r2, r2, #31
   1666c:	07d2      	lsls	r2, r2, #31
	itt ne
   1666e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   16670:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   16674:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
   16678:	d301      	bcc.n	1667e <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
   1667a:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
   1667c:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   1667e:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   16680:	4770      	bx	lr
   16682:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
   16684:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
   16686:	d313      	bcc.n	166b0 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
   16688:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
   1668a:	d08d      	beq.n	165a8 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
   1668c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
   16690:	d08a      	beq.n	165a8 <memcpy+0xc>

	rsb	r3, #4
   16692:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
   16696:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
   16698:	07db      	lsls	r3, r3, #31
	itt ne
   1669a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
   1669c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
   166a0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
   166a4:	d380      	bcc.n	165a8 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
   166a6:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
   166aa:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
   166ae:	e77b      	b.n	165a8 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
   166b0:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
   166b2:	d3d9      	bcc.n	16668 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
   166b4:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
   166b6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
   166ba:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
   166be:	d2f9      	bcs.n	166b4 <memcpy+0x118>

	ldrb	r3, [r1]
   166c0:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
   166c2:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
   166c4:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
   166c6:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
   166c8:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
   166ca:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
   166cc:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
   166ce:	4770      	bx	lr

000166d0 <operator new(unsigned int)>:

#include <stdlib.h>

void * operator new(size_t size)
{
	return malloc(size);
   166d0:	f00a bd46 	b.w	21160 <malloc>

000166d4 <operator new[](unsigned int)>:
   166d4:	f00a bd44 	b.w	21160 <malloc>

000166d8 <operator delete(void*)>:
	return malloc(size);
}

void operator delete(void * ptr)
{
	free(ptr);
   166d8:	f00a bd4a 	b.w	21170 <free>

000166dc <operator delete[](void*)>:
   166dc:	f00a bd48 	b.w	21170 <free>

000166e0 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
   166e0:	f00a bd46 	b.w	21170 <free>

000166e4 <ultoa>:
	int i=0, j;
   166e4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
   166e8:	b570      	push	{r4, r5, r6, lr}
		digit = val % radix;
   166ea:	4666      	mov	r6, ip
	int i=0, j;
   166ec:	2400      	movs	r4, #0
   166ee:	e000      	b.n	166f2 <ultoa+0xe>
		i++;
   166f0:	3401      	adds	r4, #1
		digit = val % radix;
   166f2:	fbb0 f5f2 	udiv	r5, r0, r2
   166f6:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   166fa:	2b09      	cmp	r3, #9
   166fc:	f103 0e37 	add.w	lr, r3, #55	; 0x37
   16700:	f103 0330 	add.w	r3, r3, #48	; 0x30
   16704:	fa5f fe8e 	uxtb.w	lr, lr
   16708:	bf98      	it	ls
   1670a:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
   1670e:	4290      	cmp	r0, r2
		val /= radix;
   16710:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
   16712:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
   16716:	d2eb      	bcs.n	166f0 <ultoa+0xc>
	buf[i + 1] = 0;
   16718:	1c63      	adds	r3, r4, #1
   1671a:	2200      	movs	r2, #0
   1671c:	18c8      	adds	r0, r1, r3
   1671e:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
   16720:	b17c      	cbz	r4, 16742 <ultoa+0x5e>
		t = buf[j];
   16722:	4662      	mov	r2, ip
   16724:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
   16728:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
   1672c:	eba1 030c 	sub.w	r3, r1, ip
   16730:	3202      	adds	r2, #2
		buf[j] = buf[i];
   16732:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
   16736:	3b01      	subs	r3, #1
   16738:	1a52      	subs	r2, r2, r1
		buf[i] = t;
   1673a:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
   1673c:	4423      	add	r3, r4
   1673e:	429a      	cmp	r2, r3
   16740:	dbef      	blt.n	16722 <ultoa+0x3e>
}
   16742:	4608      	mov	r0, r1
   16744:	bd70      	pop	{r4, r5, r6, pc}
   16746:	bf00      	nop

00016748 <dtostrf>:
	int decpt, sign, reqd, pad;
	const char *s, *e;
	char *p;

	int awidth = abs(width);
	if (isnanf(val)) {
   16748:	eeb4 0a40 	vcmp.f32	s0, s0
{
   1674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (isnanf(val)) {
   16750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
   16754:	4616      	mov	r6, r2
	int awidth = abs(width);
   16756:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
{
   1675a:	4607      	mov	r7, r0
   1675c:	ed2d 8b02 	vpush	{d8}
	int awidth = abs(width);
   16760:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
{
   16764:	eeb0 8a40 	vmov.f32	s16, s0
   16768:	b085      	sub	sp, #20
	if (isnanf(val)) {
   1676a:	f180 8148 	bvs.w	169fe <dtostrf+0x2b6>
			awidth--;
		}
		*buf = 0;
		return buf;
	}
	if (isinff(val)) {
   1676e:	eef0 7ac0 	vabs.f32	s15, s0
   16772:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 16a88 <dtostrf+0x340>
   16776:	eef4 7a47 	vcmp.f32	s15, s14
   1677a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1677e:	dd29      	ble.n	167d4 <dtostrf+0x8c>
		int ndigs = (val<0) ? 4 : 3;
   16780:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   16784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16788:	f100 80ed 	bmi.w	16966 <dtostrf+0x21e>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   1678c:	2a03      	cmp	r2, #3
   1678e:	f340 8091 	ble.w	168b4 <dtostrf+0x16c>
   16792:	2303      	movs	r3, #3
		if (width<0) {
   16794:	2f00      	cmp	r7, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   16796:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
   1679a:	f2c0 8085 	blt.w	168a8 <dtostrf+0x160>
			while (awidth) {
				*buf++ = ' ';
				awidth--;
			}
		}
		if (val<0) *buf++ = '-';
   1679e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   167a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   167a6:	f100 816a 	bmi.w	16a7e <dtostrf+0x336>
		if (DTOA_UPPER) {
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   167aa:	2149      	movs	r1, #73	; 0x49
   167ac:	234e      	movs	r3, #78	; 0x4e
   167ae:	2046      	movs	r0, #70	; 0x46
   167b0:	1cf4      	adds	r4, r6, #3
   167b2:	7031      	strb	r1, [r6, #0]
   167b4:	70b0      	strb	r0, [r6, #2]
   167b6:	7073      	strb	r3, [r6, #1]
		} else {
			*buf++ = 'i';  *buf++ = 'n';  *buf++ = 'f';
		}
		while (awidth) {
   167b8:	b122      	cbz	r2, 167c4 <dtostrf+0x7c>
			*buf++ = ' ';
   167ba:	4620      	mov	r0, r4
   167bc:	2120      	movs	r1, #32
   167be:	4414      	add	r4, r2
   167c0:	f00b fe8e 	bl	224e0 <memset>
			awidth--;
		}
		*buf = 0;
   167c4:	2300      	movs	r3, #0

	//char format[20];
	//sprintf(format, "%%%d.%df", width, precision);
	//sprintf(buf, format, val);
	return buf;
}
   167c6:	4620      	mov	r0, r4
		*buf = 0;
   167c8:	7023      	strb	r3, [r4, #0]
}
   167ca:	b005      	add	sp, #20
   167cc:	ecbd 8b02 	vpop	{d8}
   167d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s = fcvtf(val, precision, &decpt, &sign);
   167d4:	4689      	mov	r9, r1
   167d6:	460d      	mov	r5, r1
   167d8:	aa02      	add	r2, sp, #8
   167da:	a901      	add	r1, sp, #4
   167dc:	4648      	mov	r0, r9
   167de:	f00b ff87 	bl	226f0 <fcvtf>
	if (precision == 0 && decpt == 0) {
   167e2:	f8dd a004 	ldr.w	sl, [sp, #4]
	s = fcvtf(val, precision, &decpt, &sign);
   167e6:	4604      	mov	r4, r0
	if (precision == 0 && decpt == 0) {
   167e8:	ea59 030a 	orrs.w	r3, r9, sl
   167ec:	d172      	bne.n	168d4 <dtostrf+0x18c>
		decpt++;
   167ee:	2301      	movs	r3, #1
		s = (*s < '5') ? "0" : "1";
   167f0:	7802      	ldrb	r2, [r0, #0]
   167f2:	4ca6      	ldr	r4, [pc, #664]	; (16a8c <dtostrf+0x344>)
		decpt++;
   167f4:	469a      	mov	sl, r3
   167f6:	9301      	str	r3, [sp, #4]
		s = (*s < '5') ? "0" : "1";
   167f8:	4ba5      	ldr	r3, [pc, #660]	; (16a90 <dtostrf+0x348>)
		decpt++;
   167fa:	46d0      	mov	r8, sl
		s = (*s < '5') ? "0" : "1";
   167fc:	2a34      	cmp	r2, #52	; 0x34
   167fe:	bf88      	it	hi
   16800:	461c      	movhi	r4, r3
	if (sign) reqd++;
   16802:	9b02      	ldr	r3, [sp, #8]
   16804:	2b00      	cmp	r3, #0
   16806:	d07d      	beq.n	16904 <dtostrf+0x1bc>
   16808:	f108 0801 	add.w	r8, r8, #1
	pad = width - reqd;
   1680c:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
   16810:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
   16814:	f1bb 0f00 	cmp.w	fp, #0
   16818:	f340 80a1 	ble.w	1695e <dtostrf+0x216>
		while (pad-- > 0) *p++ = ' ';
   1681c:	465a      	mov	r2, fp
   1681e:	2120      	movs	r1, #32
   16820:	4630      	mov	r0, r6
		e += pad;
   16822:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
   16824:	f00b fe5c 	bl	224e0 <memset>
   16828:	eb06 030b 	add.w	r3, r6, fp
	if (sign) *p++ = '-';
   1682c:	222d      	movs	r2, #45	; 0x2d
   1682e:	f803 2b01 	strb.w	r2, [r3], #1
	if (decpt == 0 && precision > 0) {
   16832:	f1ba 0f00 	cmp.w	sl, #0
   16836:	d177      	bne.n	16928 <dtostrf+0x1e0>
   16838:	f1b9 0f00 	cmp.w	r9, #0
   1683c:	d006      	beq.n	1684c <dtostrf+0x104>
		*p++ = '0';
   1683e:	461a      	mov	r2, r3
   16840:	2130      	movs	r1, #48	; 0x30
   16842:	f802 1b02 	strb.w	r1, [r2], #2
		*p++ = '.';
   16846:	212e      	movs	r1, #46	; 0x2e
   16848:	7059      	strb	r1, [r3, #1]
   1684a:	4613      	mov	r3, r2
	while (p < e) {
   1684c:	42ab      	cmp	r3, r5
   1684e:	d21f      	bcs.n	16890 <dtostrf+0x148>
		*p++ = *s++;
   16850:	46a4      	mov	ip, r4
   16852:	4619      	mov	r1, r3
   16854:	f81c 2b01 	ldrb.w	r2, [ip], #1
   16858:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
   1685c:	42a9      	cmp	r1, r5
   1685e:	d018      	beq.n	16892 <dtostrf+0x14a>
   16860:	9c01      	ldr	r4, [sp, #4]
		if (--decpt == 0) *p++ = '.';
   16862:	202e      	movs	r0, #46	; 0x2e
   16864:	3c01      	subs	r4, #1
   16866:	e00b      	b.n	16880 <dtostrf+0x138>
   16868:	7058      	strb	r0, [r3, #1]
   1686a:	3302      	adds	r3, #2
		if (p == e) break;
   1686c:	3c01      	subs	r4, #1
	while (p < e) {
   1686e:	42ab      	cmp	r3, r5
		*p++ = *s++;
   16870:	4619      	mov	r1, r3
	while (p < e) {
   16872:	d20d      	bcs.n	16890 <dtostrf+0x148>
		*p++ = *s++;
   16874:	f81c 2b01 	ldrb.w	r2, [ip], #1
   16878:	f801 2b01 	strb.w	r2, [r1], #1
		if (p == e) break;
   1687c:	42a9      	cmp	r1, r5
   1687e:	d008      	beq.n	16892 <dtostrf+0x14a>
		if (--decpt == 0) *p++ = '.';
   16880:	9401      	str	r4, [sp, #4]
   16882:	2c00      	cmp	r4, #0
   16884:	d0f0      	beq.n	16868 <dtostrf+0x120>
   16886:	460b      	mov	r3, r1
		if (p == e) break;
   16888:	3c01      	subs	r4, #1
	while (p < e) {
   1688a:	42ab      	cmp	r3, r5
		*p++ = *s++;
   1688c:	4619      	mov	r1, r3
	while (p < e) {
   1688e:	d3f1      	bcc.n	16874 <dtostrf+0x12c>
   16890:	461d      	mov	r5, r3
	if (width < 0) {
   16892:	2f00      	cmp	r7, #0
   16894:	db6b      	blt.n	1696e <dtostrf+0x226>
	return buf;
   16896:	4634      	mov	r4, r6
	*p = 0;
   16898:	2300      	movs	r3, #0
}
   1689a:	4620      	mov	r0, r4
	*p = 0;
   1689c:	702b      	strb	r3, [r5, #0]
}
   1689e:	b005      	add	sp, #20
   168a0:	ecbd 8b02 	vpop	{d8}
   168a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (awidth) {
   168a8:	b122      	cbz	r2, 168b4 <dtostrf+0x16c>
				*buf++ = ' ';
   168aa:	4630      	mov	r0, r6
   168ac:	2120      	movs	r1, #32
   168ae:	4416      	add	r6, r2
   168b0:	f00b fe16 	bl	224e0 <memset>
		if (val<0) *buf++ = '-';
   168b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
   168b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   168bc:	f140 80bd 	bpl.w	16a3a <dtostrf+0x2f2>
   168c0:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   168c2:	2249      	movs	r2, #73	; 0x49
   168c4:	234e      	movs	r3, #78	; 0x4e
   168c6:	2046      	movs	r0, #70	; 0x46
   168c8:	1d34      	adds	r4, r6, #4
		if (val<0) *buf++ = '-';
   168ca:	7031      	strb	r1, [r6, #0]
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   168cc:	70f0      	strb	r0, [r6, #3]
   168ce:	7072      	strb	r2, [r6, #1]
   168d0:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   168d2:	e777      	b.n	167c4 <dtostrf+0x7c>
	if (-decpt  > (int)precision) {
   168d4:	f1ca 0300 	rsb	r3, sl, #0
   168d8:	4599      	cmp	r9, r3
   168da:	da57      	bge.n	1698c <dtostrf+0x244>
		decpt = -precision;
   168dc:	f04f 0801 	mov.w	r8, #1
   168e0:	f1c9 0a00 	rsb	sl, r9, #0
		s = "0";
   168e4:	4c69      	ldr	r4, [pc, #420]	; (16a8c <dtostrf+0x344>)
	if (reqd > decpt) reqd++;
   168e6:	45c2      	cmp	sl, r8
		decpt = -precision;
   168e8:	4640      	mov	r0, r8
   168ea:	f8cd a004 	str.w	sl, [sp, #4]
	if (reqd > decpt) reqd++;
   168ee:	bfb8      	it	lt
   168f0:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
   168f4:	f1ba 0f00 	cmp.w	sl, #0
   168f8:	d152      	bne.n	169a0 <dtostrf+0x258>
	if (sign) reqd++;
   168fa:	9b02      	ldr	r3, [sp, #8]
	if (decpt == 0) reqd++;
   168fc:	f108 0801 	add.w	r8, r8, #1
	if (sign) reqd++;
   16900:	2b00      	cmp	r3, #0
   16902:	d181      	bne.n	16808 <dtostrf+0xc0>
	pad = width - reqd;
   16904:	eba7 0b08 	sub.w	fp, r7, r8
	e = p + reqd;
   16908:	eb06 0508 	add.w	r5, r6, r8
	if (pad > 0) {
   1690c:	f1bb 0f00 	cmp.w	fp, #0
   16910:	dd27      	ble.n	16962 <dtostrf+0x21a>
		while (pad-- > 0) *p++ = ' ';
   16912:	465a      	mov	r2, fp
   16914:	2120      	movs	r1, #32
   16916:	4630      	mov	r0, r6
		e += pad;
   16918:	445d      	add	r5, fp
		while (pad-- > 0) *p++ = ' ';
   1691a:	f00b fde1 	bl	224e0 <memset>
   1691e:	eb06 030b 	add.w	r3, r6, fp
	if (decpt == 0 && precision > 0) {
   16922:	f1ba 0f00 	cmp.w	sl, #0
   16926:	d087      	beq.n	16838 <dtostrf+0xf0>
	else if (decpt < 0 && precision > 0) {
   16928:	f1ba 0f00 	cmp.w	sl, #0
   1692c:	da8e      	bge.n	1684c <dtostrf+0x104>
   1692e:	f1b9 0f00 	cmp.w	r9, #0
   16932:	d08b      	beq.n	1684c <dtostrf+0x104>
		*p++ = '0';
   16934:	4618      	mov	r0, r3
		*p++ = '.';
   16936:	222e      	movs	r2, #46	; 0x2e
		*p++ = '0';
   16938:	2130      	movs	r1, #48	; 0x30
   1693a:	f800 1b02 	strb.w	r1, [r0], #2
		*p++ = '.';
   1693e:	705a      	strb	r2, [r3, #1]
   16940:	4602      	mov	r2, r0
   16942:	4653      	mov	r3, sl
		while ( decpt < 0 ) {
   16944:	3301      	adds	r3, #1
			*p++ = '0';
   16946:	f802 1b01 	strb.w	r1, [r2], #1
		while ( decpt < 0 ) {
   1694a:	d1fb      	bne.n	16944 <dtostrf+0x1fc>
			*p++ = '0';
   1694c:	f1ba 0f00 	cmp.w	sl, #0
   16950:	9301      	str	r3, [sp, #4]
   16952:	f1ca 0300 	rsb	r3, sl, #0
   16956:	bfa8      	it	ge
   16958:	2301      	movge	r3, #1
   1695a:	4403      	add	r3, r0
   1695c:	e776      	b.n	1684c <dtostrf+0x104>
	if (pad > 0) {
   1695e:	4633      	mov	r3, r6
   16960:	e764      	b.n	1682c <dtostrf+0xe4>
   16962:	4633      	mov	r3, r6
   16964:	e765      	b.n	16832 <dtostrf+0xea>
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   16966:	2a04      	cmp	r2, #4
   16968:	ddaa      	ble.n	168c0 <dtostrf+0x178>
   1696a:	2304      	movs	r3, #4
   1696c:	e712      	b.n	16794 <dtostrf+0x4c>
		pad = (reqd + width) * -1;
   1696e:	44b8      	add	r8, r7
		while (pad-- > 0) *p++ = ' ';
   16970:	f1b8 0f00 	cmp.w	r8, #0
   16974:	ea6f 0208 	mvn.w	r2, r8
   16978:	da8d      	bge.n	16896 <dtostrf+0x14e>
   1697a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1697e:	2120      	movs	r1, #32
   16980:	4628      	mov	r0, r5
   16982:	3201      	adds	r2, #1
   16984:	4415      	add	r5, r2
   16986:	f00b fdab 	bl	224e0 <memset>
   1698a:	e784      	b.n	16896 <dtostrf+0x14e>
	reqd = strlen(s);
   1698c:	f00c f938 	bl	22c00 <strlen>
   16990:	4680      	mov	r8, r0
	if (reqd > decpt) reqd++;
   16992:	45c2      	cmp	sl, r8
   16994:	bfb8      	it	lt
   16996:	f108 0801 	addlt.w	r8, r8, #1
	if (decpt == 0) reqd++;
   1699a:	f1ba 0f00 	cmp.w	sl, #0
   1699e:	d0ac      	beq.n	168fa <dtostrf+0x1b2>
	if (decpt < 0 && precision > 0) {
   169a0:	f1ba 0f00 	cmp.w	sl, #0
   169a4:	f6bf af2d 	bge.w	16802 <dtostrf+0xba>
   169a8:	f1b9 0f00 	cmp.w	r9, #0
   169ac:	f43f af29 	beq.w	16802 <dtostrf+0xba>
		if (strlen(s) > precision + decpt) {
   169b0:	eb0a 0309 	add.w	r3, sl, r9
		reqd = precision + 2;
   169b4:	f109 0802 	add.w	r8, r9, #2
		if (strlen(s) > precision + decpt) {
   169b8:	4283      	cmp	r3, r0
   169ba:	f4bf af22 	bcs.w	16802 <dtostrf+0xba>
			while (newPrecision > 0) {
   169be:	f1b9 0f00 	cmp.w	r9, #0
   169c2:	dd05      	ble.n	169d0 <dtostrf+0x288>
				val *= 10.0f;
   169c4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
			while (newPrecision > 0) {
   169c8:	3d01      	subs	r5, #1
				val *= 10.0f;
   169ca:	ee28 8a27 	vmul.f32	s16, s16, s15
			while (newPrecision > 0) {
   169ce:	d1fb      	bne.n	169c8 <dtostrf+0x280>
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   169d0:	aa02      	add	r2, sp, #8
   169d2:	eeb0 0a48 	vmov.f32	s0, s16
   169d6:	4628      	mov	r0, r5
   169d8:	a903      	add	r1, sp, #12
   169da:	f00b fe89 	bl	226f0 <fcvtf>
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   169de:	f8dd a004 	ldr.w	sl, [sp, #4]
   169e2:	9b03      	ldr	r3, [sp, #12]
   169e4:	f109 0201 	add.w	r2, r9, #1
			s = fcvtf(val, newPrecision, &newDecimalPoint, &sign);
   169e8:	4604      	mov	r4, r0
			if (newDecimalPoint - decpt == precision + 1) decpt++;
   169ea:	eba3 030a 	sub.w	r3, r3, sl
   169ee:	4293      	cmp	r3, r2
   169f0:	f47f af07 	bne.w	16802 <dtostrf+0xba>
   169f4:	f10a 0a01 	add.w	sl, sl, #1
   169f8:	f8cd a004 	str.w	sl, [sp, #4]
   169fc:	e701      	b.n	16802 <dtostrf+0xba>
		int ndigs = (val<0) ? 4 : 3;
   169fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
   16a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   16a06:	bf4c      	ite	mi
   16a08:	2304      	movmi	r3, #4
   16a0a:	2303      	movpl	r3, #3
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   16a0c:	4293      	cmp	r3, r2
   16a0e:	da22      	bge.n	16a56 <dtostrf+0x30e>
		if (width<0) {
   16a10:	2800      	cmp	r0, #0
		awidth = (awidth > ndigs) ? awidth - ndigs : 0;
   16a12:	eba2 0203 	sub.w	r2, r2, r3
		if (width<0) {
   16a16:	db18      	blt.n	16a4a <dtostrf+0x302>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   16a18:	ee10 3a10 	vmov	r3, s0
   16a1c:	2b00      	cmp	r3, #0
   16a1e:	da02      	bge.n	16a26 <dtostrf+0x2de>
   16a20:	232d      	movs	r3, #45	; 0x2d
   16a22:	f806 3b01 	strb.w	r3, [r6], #1
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   16a26:	234e      	movs	r3, #78	; 0x4e
   16a28:	2141      	movs	r1, #65	; 0x41
   16a2a:	1cf4      	adds	r4, r6, #3
   16a2c:	7033      	strb	r3, [r6, #0]
   16a2e:	7071      	strb	r1, [r6, #1]
   16a30:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   16a32:	2a00      	cmp	r2, #0
   16a34:	f47f aec1 	bne.w	167ba <dtostrf+0x72>
   16a38:	e6c4      	b.n	167c4 <dtostrf+0x7c>
			*buf++ = 'I';  *buf++ = 'N';  *buf++ = 'F';
   16a3a:	2149      	movs	r1, #73	; 0x49
   16a3c:	224e      	movs	r2, #78	; 0x4e
   16a3e:	2346      	movs	r3, #70	; 0x46
   16a40:	1cf4      	adds	r4, r6, #3
   16a42:	7031      	strb	r1, [r6, #0]
   16a44:	7072      	strb	r2, [r6, #1]
   16a46:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   16a48:	e6bc      	b.n	167c4 <dtostrf+0x7c>
			while (awidth) {
   16a4a:	b122      	cbz	r2, 16a56 <dtostrf+0x30e>
				*buf++ = ' ';
   16a4c:	4630      	mov	r0, r6
   16a4e:	2120      	movs	r1, #32
   16a50:	4416      	add	r6, r2
   16a52:	f00b fd45 	bl	224e0 <memset>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   16a56:	ee18 3a10 	vmov	r3, s16
   16a5a:	2b00      	cmp	r3, #0
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   16a5c:	f04f 034e 	mov.w	r3, #78	; 0x4e
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   16a60:	db05      	blt.n	16a6e <dtostrf+0x326>
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   16a62:	2241      	movs	r2, #65	; 0x41
   16a64:	1cf4      	adds	r4, r6, #3
   16a66:	7033      	strb	r3, [r6, #0]
   16a68:	7072      	strb	r2, [r6, #1]
   16a6a:	70b3      	strb	r3, [r6, #2]
		while (awidth) {
   16a6c:	e6aa      	b.n	167c4 <dtostrf+0x7c>
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   16a6e:	212d      	movs	r1, #45	; 0x2d
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   16a70:	2241      	movs	r2, #65	; 0x41
   16a72:	1d34      	adds	r4, r6, #4
   16a74:	7073      	strb	r3, [r6, #1]
		if (copysignf(1.0f, val)<0) *buf++ = '-';
   16a76:	7031      	strb	r1, [r6, #0]
			*buf++ = 'N';  *buf++ = 'A';  *buf++ = 'N';
   16a78:	70b2      	strb	r2, [r6, #2]
   16a7a:	70f3      	strb	r3, [r6, #3]
		while (awidth) {
   16a7c:	e6a2      	b.n	167c4 <dtostrf+0x7c>
		if (val<0) *buf++ = '-';
   16a7e:	232d      	movs	r3, #45	; 0x2d
   16a80:	f806 3b01 	strb.w	r3, [r6], #1
   16a84:	e691      	b.n	167aa <dtostrf+0x62>
   16a86:	bf00      	nop
   16a88:	7f7fffff 	.word	0x7f7fffff
   16a8c:	20002834 	.word	0x20002834
   16a90:	20000a04 	.word	0x20000a04

00016a94 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
   16a94:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
   16a96:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
   16a98:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
   16a9c:	4619      	mov	r1, r3
{
   16a9e:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   16aa0:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   16aa4:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
   16aa8:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16aac:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
   16ab0:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
   16ab4:	460a      	mov	r2, r1
	p->FFILT0 = 0;
   16ab6:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
   16aba:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16abe:	b29b      	uxth	r3, r3
   16ac0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   16ac4:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16ac8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
   16acc:	3101      	adds	r1, #1
   16ace:	eb00 1343 	add.w	r3, r0, r3, lsl #5
   16ad2:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
   16ad4:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
   16ad6:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
   16ada:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
   16adc:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
   16ade:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
   16ae0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
   16ae2:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
   16ae6:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
   16ae8:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
   16aea:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
   16aec:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
   16aee:	d1eb      	bne.n	16ac8 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
   16af0:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16af4:	b29b      	uxth	r3, r3
   16af6:	f043 030f 	orr.w	r3, r3, #15
   16afa:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
   16afe:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
   16b02:	b29b      	uxth	r3, r3
   16b04:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
   16b08:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
   16b0c:	bd10      	pop	{r4, pc}
   16b0e:	bf00      	nop

00016b10 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16b10:	4b37      	ldr	r3, [pc, #220]	; (16bf0 <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16b12:	4a38      	ldr	r2, [pc, #224]	; (16bf4 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16b14:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
   16b16:	4838      	ldr	r0, [pc, #224]	; (16bf8 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16b18:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
   16b1c:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
   16b1e:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b20:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16b24:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b28:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b2c:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
   16b30:	430a      	orrs	r2, r1
   16b32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
   16b36:	f7ff ffad 	bl	16a94 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
   16b3a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16b3e:	f7ff ffa9 	bl	16a94 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
   16b42:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16b46:	f7ff ffa5 	bl	16a94 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
   16b4a:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
   16b4e:	f7ff ffa1 	bl	16a94 <flexpwm_init>
	for (i=0; i < 4; i++) {
   16b52:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16b54:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b58:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
   16b5c:	4611      	mov	r1, r2
   16b5e:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16b62:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16b66:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16b68:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16b6a:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16b6c:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b6e:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b72:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b74:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16b76:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16b7a:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b7c:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   16b7e:	d1ee      	bne.n	16b5e <pwm_init+0x4e>
   16b80:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16b82:	481e      	ldr	r0, [pc, #120]	; (16bfc <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16b84:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16b88:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   16b8c:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16b8e:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16b92:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   16b96:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16b9a:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16b9e:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16ba0:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16ba2:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16ba4:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16ba6:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16baa:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16bac:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16bae:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16bb2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16bb4:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
   16bb6:	d1ee      	bne.n	16b96 <pwm_init+0x86>
   16bb8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
   16bba:	4811      	ldr	r0, [pc, #68]	; (16c00 <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16bbc:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16bbe:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
   16bc2:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16bc4:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16bc8:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
   16bcc:	eb00 1342 	add.w	r3, r0, r2, lsl #5
   16bd0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
   16bd4:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
   16bd6:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
   16bd8:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
   16bda:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
   16bdc:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
   16bde:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
   16be0:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
   16be2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
   16be6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
   16be8:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
   16bec:	d1ee      	bne.n	16bcc <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
   16bee:	bd70      	pop	{r4, r5, r6, pc}
   16bf0:	400fc000 	.word	0x400fc000
   16bf4:	fc030000 	.word	0xfc030000
   16bf8:	403dc000 	.word	0x403dc000
   16bfc:	401e0000 	.word	0x401e0000
   16c00:	401e4000 	.word	0x401e4000

00016c04 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
   16c04:	4a07      	ldr	r2, [pc, #28]	; (16c24 <rtc_get+0x20>)
   16c06:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
   16c08:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
   16c0a:	4619      	mov	r1, r3
   16c0c:	4684      	mov	ip, r0
   16c0e:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
   16c10:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
   16c12:	4299      	cmp	r1, r3
   16c14:	d1f9      	bne.n	16c0a <rtc_get+0x6>
   16c16:	4584      	cmp	ip, r0
   16c18:	d1f7      	bne.n	16c0a <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
   16c1a:	0bdb      	lsrs	r3, r3, #15
}
   16c1c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   16c20:	4770      	bx	lr
   16c22:	bf00      	nop
   16c24:	400d4000 	.word	0x400d4000

00016c28 <unused_interrupt_vector>:
	__disable_irq();
   16c28:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
   16c2a:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
   16c2e:	4c4f      	ldr	r4, [pc, #316]	; (16d6c <unused_interrupt_vector+0x144>)
   16c30:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("mrs %0, msp\n" : "=r" (stack) :: "memory");
   16c34:	f3ef 8208 	mrs	r2, MSP
	info->cfsr = SCB_CFSR;
   16c38:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
   16c3c:	4e4c      	ldr	r6, [pc, #304]	; (16d70 <unused_interrupt_vector+0x148>)
	while (p < end) {
   16c3e:	4d4d      	ldr	r5, [pc, #308]	; (16d74 <unused_interrupt_vector+0x14c>)
	info->cfsr = SCB_CFSR;
   16c40:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
   16c44:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
   16c48:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
   16c4c:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
   16c50:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
   16c54:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
   16c58:	6993      	ldr	r3, [r2, #24]
   16c5a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
   16c5e:	69d3      	ldr	r3, [r2, #28]
   16c60:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
   16c64:	f000 f8d2 	bl	16e0c <tempmonGetTemp>
   16c68:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
   16c6c:	f7ff ffca 	bl	16c04 <rtc_get>
	info->len = sizeof(*info) / 4;
   16c70:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
   16c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
   16c76:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
   16c7a:	460b      	mov	r3, r1
   16c7c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   16c80:	493d      	ldr	r1, [pc, #244]	; (16d78 <unused_interrupt_vector+0x150>)
		crc ^= *p++;
   16c82:	1d30      	adds	r0, r6, #4
   16c84:	405a      	eors	r2, r3
   16c86:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
   16c88:	f002 0301 	and.w	r3, r2, #1
   16c8c:	3c01      	subs	r4, #1
   16c8e:	fb01 f303 	mul.w	r3, r1, r3
   16c92:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
   16c96:	d1f7      	bne.n	16c88 <unused_interrupt_vector+0x60>
	while (p < end) {
   16c98:	42a8      	cmp	r0, r5
   16c9a:	d002      	beq.n	16ca2 <unused_interrupt_vector+0x7a>
		crc ^= *p++;
   16c9c:	6873      	ldr	r3, [r6, #4]
   16c9e:	4606      	mov	r6, r0
   16ca0:	e7ef      	b.n	16c82 <unused_interrupt_vector+0x5a>
	info->crc = crc;
   16ca2:	4b32      	ldr	r3, [pc, #200]	; (16d6c <unused_interrupt_vector+0x144>)
   16ca4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	asm("dsb");
   16ca8:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   16cac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16cb0:	492f      	ldr	r1, [pc, #188]	; (16d70 <unused_interrupt_vector+0x148>)
   16cb2:	4a32      	ldr	r2, [pc, #200]	; (16d7c <unused_interrupt_vector+0x154>)
   16cb4:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
   16cb8:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
	asm("dsb");
   16cbc:	f3bf 8f4f 	dsb	sy
	asm("isb");
   16cc0:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16cc4:	4a2e      	ldr	r2, [pc, #184]	; (16d80 <unused_interrupt_vector+0x158>)
	PIT_MCR = PIT_MCR_MDIS;
   16cc6:	2502      	movs	r5, #2
   16cc8:	482e      	ldr	r0, [pc, #184]	; (16d84 <unused_interrupt_vector+0x15c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16cca:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16ccc:	492e      	ldr	r1, [pc, #184]	; (16d88 <unused_interrupt_vector+0x160>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
   16cce:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
   16cd2:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
   16cd4:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   16cd6:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16cd8:	482c      	ldr	r0, [pc, #176]	; (16d8c <unused_interrupt_vector+0x164>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
   16cda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   16cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   16ce2:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16ce4:	680b      	ldr	r3, [r1, #0]
   16ce6:	4283      	cmp	r3, r0
   16ce8:	d83d      	bhi.n	16d66 <unused_interrupt_vector+0x13e>
	PIT_MCR = 0;
   16cea:	4d26      	ldr	r5, [pc, #152]	; (16d84 <unused_interrupt_vector+0x15c>)
   16cec:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
   16cee:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16cf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
   16cf6:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   16cf8:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
   16cfa:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
   16cfe:	4924      	ldr	r1, [pc, #144]	; (16d90 <unused_interrupt_vector+0x168>)
   16d00:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
   16d04:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
   16d08:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
   16d0c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
   16d10:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
   16d14:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
   16d18:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
   16d1c:	e001      	b.n	16d22 <unused_interrupt_vector+0xfa>
		usb_isr();
   16d1e:	f000 f967 	bl	16ff0 <usb_isr>
		if (PIT_TFLG0) {
   16d22:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   16d26:	2b00      	cmp	r3, #0
   16d28:	d0f9      	beq.n	16d1e <unused_interrupt_vector+0xf6>
			if (++count >= 80) break;  // reboot after 8 seconds
   16d2a:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
   16d2c:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
   16d30:	2c4f      	cmp	r4, #79	; 0x4f
   16d32:	d9f4      	bls.n	16d1e <unused_interrupt_vector+0xf6>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16d34:	4b17      	ldr	r3, [pc, #92]	; (16d94 <unused_interrupt_vector+0x16c>)
	USB1_USBCMD = USB_USBCMD_RST;
   16d36:	2002      	movs	r0, #2
   16d38:	4917      	ldr	r1, [pc, #92]	; (16d98 <unused_interrupt_vector+0x170>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16d3a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
   16d3e:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
   16d42:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16d44:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
   16d48:	b93b      	cbnz	r3, 16d5a <unused_interrupt_vector+0x132>
	SRC_GPR5 = 0x0BAD00F1;
   16d4a:	4814      	ldr	r0, [pc, #80]	; (16d9c <unused_interrupt_vector+0x174>)
   16d4c:	4914      	ldr	r1, [pc, #80]	; (16da0 <unused_interrupt_vector+0x178>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16d4e:	4a0d      	ldr	r2, [pc, #52]	; (16d84 <unused_interrupt_vector+0x15c>)
	SRC_GPR5 = 0x0BAD00F1;
   16d50:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
   16d52:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
   16d56:	2b00      	cmp	r3, #0
   16d58:	d0fa      	beq.n	16d50 <unused_interrupt_vector+0x128>
	SCB_AIRCR = 0x05FA0004;
   16d5a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   16d5e:	4a11      	ldr	r2, [pc, #68]	; (16da4 <unused_interrupt_vector+0x17c>)
   16d60:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
   16d64:	e7fe      	b.n	16d64 <unused_interrupt_vector+0x13c>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
   16d66:	f7fe ff1d 	bl	15ba4 <set_arm_clock>
   16d6a:	e7be      	b.n	16cea <unused_interrupt_vector+0xc2>
   16d6c:	2027ff00 	.word	0x2027ff00
   16d70:	2027ff80 	.word	0x2027ff80
   16d74:	2027ffa8 	.word	0x2027ffa8
   16d78:	edb88320 	.word	0xedb88320
   16d7c:	2027ffa0 	.word	0x2027ffa0
   16d80:	400fc000 	.word	0x400fc000
   16d84:	40084000 	.word	0x40084000
   16d88:	2000328c 	.word	0x2000328c
   16d8c:	0bcd3d80 	.word	0x0bcd3d80
   16d90:	00249f00 	.word	0x00249f00
   16d94:	400d9000 	.word	0x400d9000
   16d98:	402e0000 	.word	0x402e0000
   16d9c:	400f8000 	.word	0x400f8000
   16da0:	0bad00f1 	.word	0x0bad00f1
   16da4:	05fa0004 	.word	0x05fa0004

00016da8 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
   16da8:	490a      	ldr	r1, [pc, #40]	; (16dd4 <_sbrk+0x2c>)
   16daa:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
   16dac:	b138      	cbz	r0, 16dbe <_sbrk+0x16>
{
   16dae:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
   16db0:	1813      	adds	r3, r2, r0
   16db2:	4809      	ldr	r0, [pc, #36]	; (16dd8 <_sbrk+0x30>)
   16db4:	4283      	cmp	r3, r0
   16db6:	d804      	bhi.n	16dc2 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
   16db8:	4610      	mov	r0, r2
                __brkval = prev + incr;
   16dba:	600b      	str	r3, [r1, #0]
}
   16dbc:	bd08      	pop	{r3, pc}
   16dbe:	4610      	mov	r0, r2
   16dc0:	4770      	bx	lr
                        errno = ENOMEM;
   16dc2:	f00b fcc3 	bl	2274c <__errno>
   16dc6:	230c      	movs	r3, #12
                        return (void *)-1;
   16dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
   16dcc:	6003      	str	r3, [r0, #0]
}
   16dce:	4610      	mov	r0, r2
   16dd0:	bd08      	pop	{r3, pc}
   16dd2:	bf00      	nop
   16dd4:	20003334 	.word	0x20003334
   16dd8:	20280000 	.word	0x20280000

00016ddc <_read>:

__attribute__((weak))
int _read(int file __attribute__((unused)), char *ptr __attribute__((unused)), int len __attribute__((unused)))
{
	return 0;
}
   16ddc:	2000      	movs	r0, #0
   16dde:	4770      	bx	lr

00016de0 <_close>:

__attribute__((weak))
int _close(int fd __attribute__((unused)))
{
	return -1;
}
   16de0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16de4:	4770      	bx	lr
   16de6:	bf00      	nop

00016de8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak))
int _fstat(int fd __attribute__((unused)), struct stat *st)
{
	st->st_mode = S_IFCHR;
   16de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
   16dec:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   16dee:	604b      	str	r3, [r1, #4]
}
   16df0:	4770      	bx	lr
   16df2:	bf00      	nop

00016df4 <_isatty>:

__attribute__((weak))
int _isatty(int fd __attribute__((unused)))
{
	return 1;
}
   16df4:	2001      	movs	r0, #1
   16df6:	4770      	bx	lr

00016df8 <_lseek>:

__attribute__((weak))
int _lseek(int fd __attribute__((unused)), long long offset __attribute__((unused)), int whence __attribute__((unused)))
{
	return -1;
}
   16df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dfc:	4770      	bx	lr
   16dfe:	bf00      	nop

00016e00 <__cxa_pure_virtual>:
}

__attribute__((weak))
void __cxa_pure_virtual()
{
	while (1) asm ("WFI");
   16e00:	bf30      	wfi
   16e02:	e7fd      	b.n	16e00 <__cxa_pure_virtual>

00016e04 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) asm ("WFI");
   16e04:	bf30      	wfi
   16e06:	e7fd      	b.n	16e04 <abort>

00016e08 <Panic_Temp_isr>:
  unused_interrupt_vector();
   16e08:	f7ff bf0e 	b.w	16c28 <unused_interrupt_vector>

00016e0c <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
   16e0c:	4a12      	ldr	r2, [pc, #72]	; (16e58 <tempmonGetTemp+0x4c>)
   16e0e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   16e12:	075b      	lsls	r3, r3, #29
   16e14:	d5fb      	bpl.n	16e0e <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16e16:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16e1a:	4810      	ldr	r0, [pc, #64]	; (16e5c <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16e1c:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16e20:	490f      	ldr	r1, [pc, #60]	; (16e60 <tempmonGetTemp+0x54>)
   16e22:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
   16e26:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
   16e2a:	ed91 6a00 	vldr	s12, [r1]
   16e2e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   16e32:	4a0c      	ldr	r2, [pc, #48]	; (16e64 <tempmonGetTemp+0x58>)
   16e34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   16e38:	4b0b      	ldr	r3, [pc, #44]	; (16e68 <tempmonGetTemp+0x5c>)
   16e3a:	edd2 6a00 	vldr	s13, [r2]
   16e3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
   16e42:	ed93 7a00 	vldr	s14, [r3]
   16e46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   16e4a:	ee67 7a86 	vmul.f32	s15, s15, s12
   16e4e:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
   16e52:	ee37 0a40 	vsub.f32	s0, s14, s0
   16e56:	4770      	bx	lr
   16e58:	400d8100 	.word	0x400d8100
   16e5c:	2000b9f8 	.word	0x2000b9f8
   16e60:	2000ba00 	.word	0x2000ba00
   16e64:	2000ba04 	.word	0x2000ba04
   16e68:	2000b9fc 	.word	0x2000b9fc

00016e6c <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
   16e6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
   16e6e:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
   16e70:	b11b      	cbz	r3, 16e7a <schedule_transfer+0xe>
		transfer->status |= (1<<15);
   16e72:	6853      	ldr	r3, [r2, #4]
   16e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
   16e78:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
   16e7a:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
   16e7c:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
   16e7e:	b33c      	cbz	r4, 16ed0 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
   16e80:	4b1a      	ldr	r3, [pc, #104]	; (16eec <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
   16e82:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
   16e84:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   16e88:	420c      	tst	r4, r1
   16e8a:	d11d      	bne.n	16ec8 <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
   16e8c:	4e18      	ldr	r6, [pc, #96]	; (16ef0 <schedule_transfer+0x84>)
   16e8e:	6877      	ldr	r7, [r6, #4]
   16e90:	e004      	b.n	16e9c <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   16e92:	6874      	ldr	r4, [r6, #4]
   16e94:	1be4      	subs	r4, r4, r7
   16e96:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
   16e9a:	d20b      	bcs.n	16eb4 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
   16e9c:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16ea0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
   16ea4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
   16ea8:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
   16eac:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
   16eb0:	0464      	lsls	r4, r4, #17
   16eb2:	d5ee      	bpl.n	16e92 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
   16eb4:	400d      	ands	r5, r1
   16eb6:	d107      	bne.n	16ec8 <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
   16eb8:	4c0c      	ldr	r4, [pc, #48]	; (16eec <schedule_transfer+0x80>)
		endpoint->status = 0;
   16eba:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
   16ebe:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   16ec2:	430b      	orrs	r3, r1
   16ec4:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
   16ec8:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   16eca:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
   16ecc:	bcf0      	pop	{r4, r5, r6, r7}
   16ece:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
   16ed0:	4d06      	ldr	r5, [pc, #24]	; (16eec <schedule_transfer+0x80>)
	endpoint->status = 0;
   16ed2:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
   16ed6:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
   16eda:	430b      	orrs	r3, r1
   16edc:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
   16ee0:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
   16ee2:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
   16ee4:	b662      	cpsie	i
}
   16ee6:	bcf0      	pop	{r4, r5, r6, r7}
   16ee8:	4770      	bx	lr
   16eea:	bf00      	nop
   16eec:	402e0000 	.word	0x402e0000
   16ef0:	e0001000 	.word	0xe0001000

00016ef4 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
   16ef4:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
   16ef6:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
   16ef8:	b19d      	cbz	r5, 16f22 <run_callbacks+0x2e>
   16efa:	4606      	mov	r6, r0
   16efc:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
   16efe:	2400      	movs	r4, #0
   16f00:	e003      	b.n	16f0a <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
   16f02:	6812      	ldr	r2, [r2, #0]
		count++;
   16f04:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
   16f06:	2a01      	cmp	r2, #1
   16f08:	d00c      	beq.n	16f24 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
   16f0a:	6853      	ldr	r3, [r2, #4]
   16f0c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
   16f10:	d0f7      	beq.n	16f02 <run_callbacks+0xe>
			ep->first_transfer = t;
   16f12:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
   16f14:	b12c      	cbz	r4, 16f22 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
   16f16:	4628      	mov	r0, r5
		ep->callback_function(first);
   16f18:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
   16f1a:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
   16f1c:	4798      	blx	r3
	while (count) {
   16f1e:	3c01      	subs	r4, #1
   16f20:	d1f9      	bne.n	16f16 <run_callbacks+0x22>
		first = next;
		count--;
	}
}
   16f22:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
   16f24:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
   16f28:	e7f4      	b.n	16f14 <run_callbacks+0x20>
   16f2a:	bf00      	nop

00016f2c <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
   16f2c:	b430      	push	{r4, r5}
	if (len > 0) {
   16f2e:	b9d9      	cbnz	r1, 16f68 <endpoint0_transmit.constprop.0+0x3c>
   16f30:	4c1f      	ldr	r4, [pc, #124]	; (16fb0 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
   16f32:	4b20      	ldr	r3, [pc, #128]	; (16fb4 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
   16f34:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   16f36:	4a20      	ldr	r2, [pc, #128]	; (16fb8 <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
   16f38:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   16f3a:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
   16f3e:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   16f40:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
   16f42:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   16f46:	2480      	movs	r4, #128	; 0x80
   16f48:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   16f4a:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
   16f4e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   16f52:	481a      	ldr	r0, [pc, #104]	; (16fbc <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
   16f54:	432b      	orrs	r3, r5
   16f56:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
   16f5a:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
   16f5c:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   16f60:	2b00      	cmp	r3, #0
   16f62:	d1fb      	bne.n	16f5c <endpoint0_transmit.constprop.0+0x30>
}
   16f64:	bc30      	pop	{r4, r5}
   16f66:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   16f68:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
   16f6a:	4b15      	ldr	r3, [pc, #84]	; (16fc0 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   16f6c:	4c10      	ldr	r4, [pc, #64]	; (16fb0 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
   16f6e:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   16f70:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
   16f74:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
   16f76:	4a10      	ldr	r2, [pc, #64]	; (16fb8 <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   16f78:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   16f7a:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   16f7e:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   16f80:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   16f82:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
   16f86:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
   16f88:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
   16f8a:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   16f8e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   16f92:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
   16f94:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
   16f96:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
   16f98:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
   16f9a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   16f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   16fa2:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
   16fa6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
   16faa:	2b00      	cmp	r3, #0
   16fac:	d1fb      	bne.n	16fa6 <endpoint0_transmit.constprop.0+0x7a>
   16fae:	e7c0      	b.n	16f32 <endpoint0_transmit.constprop.0+0x6>
   16fb0:	20000000 	.word	0x20000000
   16fb4:	200042e0 	.word	0x200042e0
   16fb8:	402e0000 	.word	0x402e0000
   16fbc:	20006864 	.word	0x20006864
   16fc0:	20004300 	.word	0x20004300

00016fc4 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
   16fc4:	4908      	ldr	r1, [pc, #32]	; (16fe8 <usb_stop_sof_interrupts+0x24>)
   16fc6:	2201      	movs	r2, #1
   16fc8:	780b      	ldrb	r3, [r1, #0]
   16fca:	fa02 f000 	lsl.w	r0, r2, r0
   16fce:	ea23 0000 	bic.w	r0, r3, r0
   16fd2:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
   16fd4:	b930      	cbnz	r0, 16fe4 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
   16fd6:	4a05      	ldr	r2, [pc, #20]	; (16fec <usb_stop_sof_interrupts+0x28>)
   16fd8:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
   16fdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16fe0:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
   16fe4:	4770      	bx	lr
   16fe6:	bf00      	nop
   16fe8:	2000c95b 	.word	0x2000c95b
   16fec:	402e0000 	.word	0x402e0000

00016ff0 <usb_isr>:
{
   16ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
   16ff4:	4c9c      	ldr	r4, [pc, #624]	; (17268 <usb_isr+0x278>)
{
   16ff6:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
   16ff8:	f8d4 6144 	ldr.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   16ffc:	07f1      	lsls	r1, r6, #31
	USB1_USBSTS = status;
   16ffe:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
   17002:	d56a      	bpl.n	170da <usb_isr+0xea>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
   17004:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
   17008:	2b00      	cmp	r3, #0
   1700a:	d061      	beq.n	170d0 <usb_isr+0xe0>
		uint32_t addr = (uint32_t)data;
   1700c:	f8df 8284 	ldr.w	r8, [pc, #644]	; 17294 <usb_isr+0x2a4>
   17010:	4d96      	ldr	r5, [pc, #600]	; (1726c <usb_isr+0x27c>)
   17012:	f8df b278 	ldr.w	fp, [pc, #632]	; 1728c <usb_isr+0x29c>
		endpoint0_transfer_data.pointer1 = addr + 4096;
   17016:	f508 5a80 	add.w	sl, r8, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
   1701a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 17298 <usb_isr+0x2a8>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   1701e:	4f94      	ldr	r7, [pc, #592]	; (17270 <usb_isr+0x280>)
			USB1_ENDPTSETUPSTAT = setupstatus;
   17020:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
   17024:	e9d5 200a 	ldrd	r2, r0, [r5, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
   17028:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1702c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   17030:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
   17034:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   17038:	049b      	lsls	r3, r3, #18
   1703a:	d5f5      	bpl.n	17028 <usb_isr+0x38>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
   1703c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   17040:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   17044:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
   17048:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1704c:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
   17050:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   17054:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
   17058:	d1fa      	bne.n	17050 <usb_isr+0x60>
			endpoint0_notify_mask = 0;
   1705a:	b291      	uxth	r1, r2
	switch (setup.wRequestAndType) {
   1705c:	f240 6c81 	movw	ip, #1665	; 0x681
			endpoint0_notify_mask = 0;
   17060:	f8cb 3000 	str.w	r3, [fp]
	switch (setup.wRequestAndType) {
   17064:	4561      	cmp	r1, ip
   17066:	f200 80d9 	bhi.w	1721c <usb_isr+0x22c>
   1706a:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
   1706e:	f080 8161 	bcs.w	17334 <usb_isr+0x344>
   17072:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
   17076:	f000 818f 	beq.w	17398 <usb_isr+0x3a8>
   1707a:	f240 80ab 	bls.w	171d4 <usb_isr+0x1e4>
   1707e:	f240 3c02 	movw	ip, #770	; 0x302
   17082:	4561      	cmp	r1, ip
   17084:	f000 81b2 	beq.w	173ec <usb_isr+0x3fc>
   17088:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
   1708c:	f040 80c1 	bne.w	17212 <usb_isr+0x222>
	endpoint0_transfer_ack.next = 1;
   17090:	4978      	ldr	r1, [pc, #480]	; (17274 <usb_isr+0x284>)
	endpoint_queue_head[1].status = 0;
   17092:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   17094:	608b      	str	r3, [r1, #8]
	endpoint0_transfer_ack.next = 1;
   17096:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   17098:	64a9      	str	r1, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1709a:	600b      	str	r3, [r1, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1709c:	2380      	movs	r3, #128	; 0x80
   1709e:	604b      	str	r3, [r1, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   170a0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   170a4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   170a8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   170ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   170b0:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   170b4:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   170b8:	2b00      	cmp	r3, #0
   170ba:	d1fb      	bne.n	170b4 <usb_isr+0xc4>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
   170bc:	0c13      	lsrs	r3, r2, #16
   170be:	065b      	lsls	r3, r3, #25
   170c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   170c4:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
   170c8:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		while (setupstatus) {
   170cc:	2b00      	cmp	r3, #0
   170ce:	d1a7      	bne.n	17020 <usb_isr+0x30>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
   170d0:	4a65      	ldr	r2, [pc, #404]	; (17268 <usb_isr+0x278>)
   170d2:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
   170d6:	2b00      	cmp	r3, #0
   170d8:	d14a      	bne.n	17170 <usb_isr+0x180>
	if (status & USB_USBSTS_URI) { // page 3164
   170da:	0672      	lsls	r2, r6, #25
   170dc:	d516      	bpl.n	1710c <usb_isr+0x11c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
   170de:	4b62      	ldr	r3, [pc, #392]	; (17268 <usb_isr+0x278>)
   170e0:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
   170e4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
   170e8:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   170ec:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
   170f0:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
   170f4:	2c00      	cmp	r4, #0
   170f6:	d1fb      	bne.n	170f0 <usb_isr+0x100>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
   170f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   170fc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
   17100:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
   17104:	f001 f872 	bl	181ec <usb_serial_reset>
		endpointN_notify_mask = 0;
   17108:	4b5b      	ldr	r3, [pc, #364]	; (17278 <usb_isr+0x288>)
   1710a:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
   1710c:	01f4      	lsls	r4, r6, #7
   1710e:	d503      	bpl.n	17118 <usb_isr+0x128>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
   17110:	4b5a      	ldr	r3, [pc, #360]	; (1727c <usb_isr+0x28c>)
   17112:	681b      	ldr	r3, [r3, #0]
   17114:	b103      	cbz	r3, 17118 <usb_isr+0x128>
   17116:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
   17118:	01b0      	lsls	r0, r6, #6
   1711a:	d503      	bpl.n	17124 <usb_isr+0x134>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
   1711c:	4b58      	ldr	r3, [pc, #352]	; (17280 <usb_isr+0x290>)
   1711e:	681b      	ldr	r3, [r3, #0]
   17120:	b103      	cbz	r3, 17124 <usb_isr+0x134>
   17122:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
   17124:	0771      	lsls	r1, r6, #29
   17126:	d508      	bpl.n	1713a <usb_isr+0x14a>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
   17128:	4b4f      	ldr	r3, [pc, #316]	; (17268 <usb_isr+0x278>)
   1712a:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   1712e:	f413 7300 	ands.w	r3, r3, #512	; 0x200
   17132:	d01a      	beq.n	1716a <usb_isr+0x17a>
			usb_high_speed = 1;
   17134:	4b53      	ldr	r3, [pc, #332]	; (17284 <usb_isr+0x294>)
   17136:	2201      	movs	r2, #1
   17138:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
   1713a:	4b4b      	ldr	r3, [pc, #300]	; (17268 <usb_isr+0x278>)
   1713c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
   17140:	061a      	lsls	r2, r3, #24
   17142:	d50f      	bpl.n	17164 <usb_isr+0x174>
   17144:	0633      	lsls	r3, r6, #24
   17146:	d50d      	bpl.n	17164 <usb_isr+0x174>
		if (usb_reboot_timer) {
   17148:	4a4f      	ldr	r2, [pc, #316]	; (17288 <usb_isr+0x298>)
   1714a:	7813      	ldrb	r3, [r2, #0]
   1714c:	b12b      	cbz	r3, 1715a <usb_isr+0x16a>
			if (--usb_reboot_timer == 0) {
   1714e:	3b01      	subs	r3, #1
   17150:	b2db      	uxtb	r3, r3
   17152:	7013      	strb	r3, [r2, #0]
   17154:	2b00      	cmp	r3, #0
   17156:	f000 8242 	beq.w	175de <usb_isr+0x5ee>
}
   1715a:	b003      	add	sp, #12
   1715c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_midi_flush_output();
   17160:	f000 bc04 	b.w	1796c <usb_midi_flush_output>
}
   17164:	b003      	add	sp, #12
   17166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			usb_high_speed = 0;
   1716a:	4a46      	ldr	r2, [pc, #280]	; (17284 <usb_isr+0x294>)
   1716c:	7013      	strb	r3, [r2, #0]
   1716e:	e7e4      	b.n	1713a <usb_isr+0x14a>
			if (completestatus & endpoint0_notify_mask) {
   17170:	4946      	ldr	r1, [pc, #280]	; (1728c <usb_isr+0x29c>)
			USB1_ENDPTCOMPLETE = completestatus;
   17172:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
   17176:	6808      	ldr	r0, [r1, #0]
   17178:	4203      	tst	r3, r0
   1717a:	f040 8161 	bne.w	17440 <usb_isr+0x450>
			completestatus &= endpointN_notify_mask;
   1717e:	4a3e      	ldr	r2, [pc, #248]	; (17278 <usb_isr+0x288>)
   17180:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
   17182:	401c      	ands	r4, r3
   17184:	d0a9      	beq.n	170da <usb_isr+0xea>
				while (tx) {
   17186:	ea5f 4814 	movs.w	r8, r4, lsr #16
   1718a:	d010      	beq.n	171ae <usb_isr+0x1be>
   1718c:	4d37      	ldr	r5, [pc, #220]	; (1726c <usb_isr+0x27c>)
					tx &= ~(1<<p);
   1718e:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
   17192:	fa98 f7a8 	rbit	r7, r8
   17196:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   1719a:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					tx &= ~(1<<p);
   1719e:	fa09 f707 	lsl.w	r7, r9, r7
					run_callbacks(endpoint_queue_head + p * 2 + 1);
   171a2:	3040      	adds	r0, #64	; 0x40
   171a4:	f7ff fea6 	bl	16ef4 <run_callbacks>
				while (tx) {
   171a8:	ea38 0807 	bics.w	r8, r8, r7
   171ac:	d1f1      	bne.n	17192 <usb_isr+0x1a2>
				uint32_t rx = completestatus & 0xffff;
   171ae:	b2a4      	uxth	r4, r4
				while(rx) {
   171b0:	2c00      	cmp	r4, #0
   171b2:	d092      	beq.n	170da <usb_isr+0xea>
   171b4:	4d2d      	ldr	r5, [pc, #180]	; (1726c <usb_isr+0x27c>)
					rx &= ~(1<<p);
   171b6:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
   171ba:	fa94 f7a4 	rbit	r7, r4
   171be:	fab7 f787 	clz	r7, r7
					run_callbacks(endpoint_queue_head + p * 2);
   171c2:	eb05 10c7 	add.w	r0, r5, r7, lsl #7
					rx &= ~(1<<p);
   171c6:	fa08 f707 	lsl.w	r7, r8, r7
					run_callbacks(endpoint_queue_head + p * 2);
   171ca:	f7ff fe93 	bl	16ef4 <run_callbacks>
				while(rx) {
   171ce:	43bc      	bics	r4, r7
   171d0:	d1f3      	bne.n	171ba <usb_isr+0x1ca>
   171d2:	e782      	b.n	170da <usb_isr+0xea>
	switch (setup.wRequestAndType) {
   171d4:	2980      	cmp	r1, #128	; 0x80
   171d6:	f000 80a7 	beq.w	17328 <usb_isr+0x338>
   171da:	2982      	cmp	r1, #130	; 0x82
   171dc:	d119      	bne.n	17212 <usb_isr+0x222>
		endpoint = setup.wIndex & 0x7F;
   171de:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
   171e0:	f010 0078 	ands.w	r0, r0, #120	; 0x78
   171e4:	d115      	bne.n	17212 <usb_isr+0x222>
		endpoint = setup.wIndex & 0x7F;
   171e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
   171ea:	f857 1022 	ldr.w	r1, [r7, r2, lsl #2]
		reply_buffer[0] = 0;
   171ee:	4a28      	ldr	r2, [pc, #160]	; (17290 <usb_isr+0x2a0>)
   171f0:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   171f2:	0618      	lsls	r0, r3, #24
   171f4:	f100 81c0 	bmi.w	17578 <usb_isr+0x588>
   171f8:	07cb      	lsls	r3, r1, #31
   171fa:	d501      	bpl.n	17200 <usb_isr+0x210>
			reply_buffer[0] = 1;
   171fc:	2301      	movs	r3, #1
   171fe:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   17200:	2102      	movs	r1, #2
   17202:	4823      	ldr	r0, [pc, #140]	; (17290 <usb_isr+0x2a0>)
   17204:	f7ff fe92 	bl	16f2c <endpoint0_transmit.constprop.0>
		return;
   17208:	e75e      	b.n	170c8 <usb_isr+0xd8>
		if (setup.wLength != 7) break;
   1720a:	0c01      	lsrs	r1, r0, #16
   1720c:	2907      	cmp	r1, #7
   1720e:	f000 8145 	beq.w	1749c <usb_isr+0x4ac>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
   17212:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   17216:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   1721a:	e755      	b.n	170c8 <usb_isr+0xd8>
	switch (setup.wRequestAndType) {
   1721c:	f242 0c21 	movw	ip, #8225	; 0x2021
   17220:	4561      	cmp	r1, ip
   17222:	d0f2      	beq.n	1720a <usb_isr+0x21a>
   17224:	d93a      	bls.n	1729c <usb_isr+0x2ac>
   17226:	f242 2321 	movw	r3, #8737	; 0x2221
   1722a:	4299      	cmp	r1, r3
   1722c:	d068      	beq.n	17300 <usb_isr+0x310>
   1722e:	f242 3321 	movw	r3, #8993	; 0x2321
   17232:	4299      	cmp	r1, r3
   17234:	d1ed      	bne.n	17212 <usb_isr+0x222>
	endpoint0_transfer_ack.next = 1;
   17236:	4b0f      	ldr	r3, [pc, #60]	; (17274 <usb_isr+0x284>)
	endpoint0_transfer_ack.pointer0 = 0;
   17238:	2200      	movs	r2, #0
   1723a:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
   1723c:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
   1723e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   17240:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   17242:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   17244:	2280      	movs	r2, #128	; 0x80
   17246:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17248:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   1724c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   17250:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17258:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   1725c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17260:	2b00      	cmp	r3, #0
   17262:	d1fb      	bne.n	1725c <usb_isr+0x26c>
   17264:	e730      	b.n	170c8 <usb_isr+0xd8>
   17266:	bf00      	nop
   17268:	402e0000 	.word	0x402e0000
   1726c:	20000000 	.word	0x20000000
   17270:	402e01c0 	.word	0x402e01c0
   17274:	200042e0 	.word	0x200042e0
   17278:	20006868 	.word	0x20006868
   1727c:	2000c6bc 	.word	0x2000c6bc
   17280:	2000c6c0 	.word	0x2000c6c0
   17284:	2000c964 	.word	0x2000c964
   17288:	2000c96a 	.word	0x2000c96a
   1728c:	20006864 	.word	0x20006864
   17290:	2000b99c 	.word	0x2000b99c
   17294:	2000685c 	.word	0x2000685c
   17298:	20004300 	.word	0x20004300
	switch (setup.wRequestAndType) {
   1729c:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
   172a0:	d03a      	beq.n	17318 <usb_isr+0x328>
   172a2:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
   172a6:	d1b4      	bne.n	17212 <usb_isr+0x222>
		usb_configuration = setup.wValue;
   172a8:	48b5      	ldr	r0, [pc, #724]	; (17580 <usb_isr+0x590>)
   172aa:	f3c2 4207 	ubfx	r2, r2, #16, #8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   172ae:	f04f 11c8 	mov.w	r1, #13107400	; 0xc800c8
   172b2:	9300      	str	r3, [sp, #0]
		usb_configuration = setup.wValue;
   172b4:	7002      	strb	r2, [r0, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
   172b6:	4ab3      	ldr	r2, [pc, #716]	; (17584 <usb_isr+0x594>)
   172b8:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
   172bc:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
   172c0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		usb_serial_configure();
   172c4:	f000 ff94 	bl	181f0 <usb_serial_configure>
		usb_midi_configure();
   172c8:	f000 faee 	bl	178a8 <usb_midi_configure>
	endpoint0_transfer_ack.next = 1;
   172cc:	4aae      	ldr	r2, [pc, #696]	; (17588 <usb_isr+0x598>)
   172ce:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
   172d0:	9b00      	ldr	r3, [sp, #0]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   172d2:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   172d4:	6011      	str	r1, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   172d6:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
   172d8:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   172da:	6051      	str	r1, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   172dc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
	endpoint_queue_head[1].status = 0;
   172e0:	64eb      	str	r3, [r5, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   172e2:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   172e6:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
   172ea:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
   172ee:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   172f2:	f8cb 3000 	str.w	r3, [fp]
	while (USB1_ENDPTPRIME) ;
   172f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   172fa:	2b00      	cmp	r3, #0
   172fc:	d1fb      	bne.n	172f6 <usb_isr+0x306>
   172fe:	e6e3      	b.n	170c8 <usb_isr+0xd8>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
   17300:	b280      	uxth	r0, r0
   17302:	2800      	cmp	r0, #0
   17304:	d197      	bne.n	17236 <usb_isr+0x246>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   17306:	4ba1      	ldr	r3, [pc, #644]	; (1758c <usb_isr+0x59c>)
			usb_cdc_line_rtsdtr = setup.wValue;
   17308:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
   1730c:	6819      	ldr	r1, [r3, #0]
   1730e:	4ba0      	ldr	r3, [pc, #640]	; (17590 <usb_isr+0x5a0>)
   17310:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
   17312:	4ba0      	ldr	r3, [pc, #640]	; (17594 <usb_isr+0x5a4>)
   17314:	701a      	strb	r2, [r3, #0]
   17316:	e78e      	b.n	17236 <usb_isr+0x246>
		reply_buffer[0] = usb_configuration;
   17318:	4b99      	ldr	r3, [pc, #612]	; (17580 <usb_isr+0x590>)
		endpoint0_transmit(reply_buffer, 1, 0);
   1731a:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
   1731c:	489e      	ldr	r0, [pc, #632]	; (17598 <usb_isr+0x5a8>)
   1731e:	781b      	ldrb	r3, [r3, #0]
   17320:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
   17322:	f7ff fe03 	bl	16f2c <endpoint0_transmit.constprop.0>
		return;
   17326:	e6cf      	b.n	170c8 <usb_isr+0xd8>
		reply_buffer[0] = 0;
   17328:	489b      	ldr	r0, [pc, #620]	; (17598 <usb_isr+0x5a8>)
		endpoint0_transmit(reply_buffer, 2, 0);
   1732a:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
   1732c:	8003      	strh	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
   1732e:	f7ff fdfd 	bl	16f2c <endpoint0_transmit.constprop.0>
		return;
   17332:	e6c9      	b.n	170c8 <usb_isr+0xd8>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   17334:	4b99      	ldr	r3, [pc, #612]	; (1759c <usb_isr+0x5ac>)
   17336:	6859      	ldr	r1, [r3, #4]
   17338:	2900      	cmp	r1, #0
   1733a:	f43f af6a 	beq.w	17212 <usb_isr+0x222>
   1733e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   17342:	b282      	uxth	r2, r0
   17344:	e004      	b.n	17350 <usb_isr+0x360>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
   17346:	6919      	ldr	r1, [r3, #16]
   17348:	330c      	adds	r3, #12
   1734a:	2900      	cmp	r1, #0
   1734c:	f43f af61 	beq.w	17212 <usb_isr+0x222>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
   17350:	f8b3 c000 	ldrh.w	ip, [r3]
   17354:	45f4      	cmp	ip, lr
   17356:	d1f6      	bne.n	17346 <usb_isr+0x356>
   17358:	f8b3 c002 	ldrh.w	ip, [r3, #2]
   1735c:	4594      	cmp	ip, r2
   1735e:	d1f2      	bne.n	17346 <usb_isr+0x356>
				if ((setup.wValue >> 8) == 3) {
   17360:	ea4f 221e 	mov.w	r2, lr, lsr #8
   17364:	2a03      	cmp	r2, #3
   17366:	f000 80d8 	beq.w	1751a <usb_isr+0x52a>
					datalen = list->length;
   1736a:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
   1736c:	0c00      	lsrs	r0, r0, #16
   1736e:	4282      	cmp	r2, r0
   17370:	bf28      	it	cs
   17372:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
   17374:	f5be 7f00 	cmp.w	lr, #512	; 0x200
   17378:	f040 80d4 	bne.w	17524 <usb_isr+0x534>
					if (usb_high_speed) src = usb_config_descriptor_480;
   1737c:	4b88      	ldr	r3, [pc, #544]	; (175a0 <usb_isr+0x5b0>)
   1737e:	4989      	ldr	r1, [pc, #548]	; (175a4 <usb_isr+0x5b4>)
   17380:	7818      	ldrb	r0, [r3, #0]
   17382:	4b89      	ldr	r3, [pc, #548]	; (175a8 <usb_isr+0x5b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   17384:	9200      	str	r2, [sp, #0]
   17386:	2800      	cmp	r0, #0
   17388:	bf18      	it	ne
   1738a:	4619      	movne	r1, r3
   1738c:	4887      	ldr	r0, [pc, #540]	; (175ac <usb_isr+0x5bc>)
   1738e:	f7ff f905 	bl	1659c <memcpy>
   17392:	4b86      	ldr	r3, [pc, #536]	; (175ac <usb_isr+0x5bc>)
   17394:	9a00      	ldr	r2, [sp, #0]
   17396:	e0da      	b.n	1754e <usb_isr+0x55e>
		if (endpoint > 7) break;
   17398:	f010 0f78 	tst.w	r0, #120	; 0x78
   1739c:	b283      	uxth	r3, r0
   1739e:	f47f af38 	bne.w	17212 <usb_isr+0x222>
		endpoint = setup.wIndex & 0x7F;
   173a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   173a6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
   173aa:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   173ae:	bf14      	ite	ne
   173b0:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
   173b4:	f023 0301 	biceq.w	r3, r3, #1
   173b8:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   173bc:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   173be:	4b72      	ldr	r3, [pc, #456]	; (17588 <usb_isr+0x598>)
	endpoint_queue_head[1].status = 0;
   173c0:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   173c2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   173c4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   173c6:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   173c8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   173ca:	2280      	movs	r2, #128	; 0x80
   173cc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   173ce:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   173d2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   173d6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   173de:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   173e2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   173e6:	2b00      	cmp	r3, #0
   173e8:	d1fb      	bne.n	173e2 <usb_isr+0x3f2>
   173ea:	e66d      	b.n	170c8 <usb_isr+0xd8>
		if (endpoint > 7) break;
   173ec:	f010 0f78 	tst.w	r0, #120	; 0x78
   173f0:	b283      	uxth	r3, r0
   173f2:	f47f af0e 	bne.w	17212 <usb_isr+0x222>
		endpoint = setup.wIndex & 0x7F;
   173f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
   173fa:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
   173fe:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   17402:	bf14      	ite	ne
   17404:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
   17408:	f043 0301 	orreq.w	r3, r3, #1
   1740c:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
   17410:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
   17412:	4b5d      	ldr	r3, [pc, #372]	; (17588 <usb_isr+0x598>)
	endpoint_queue_head[1].status = 0;
   17414:	64ea      	str	r2, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   17416:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
   17418:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   1741a:	64ab      	str	r3, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   1741c:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   1741e:	2280      	movs	r2, #128	; 0x80
   17420:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   17422:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   17426:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   1742a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1742e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17432:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
   17436:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1743a:	2b00      	cmp	r3, #0
   1743c:	d1fb      	bne.n	17436 <usb_isr+0x446>
   1743e:	e643      	b.n	170c8 <usb_isr+0xd8>
				endpoint0_notify_mask = 0;
   17440:	2000      	movs	r0, #0
   17442:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   17444:	495a      	ldr	r1, [pc, #360]	; (175b0 <usb_isr+0x5c0>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   17446:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
   17448:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
   1744a:	f242 0121 	movw	r1, #8225	; 0x2021
   1744e:	428c      	cmp	r4, r1
   17450:	f47f ae95 	bne.w	1717e <usb_isr+0x18e>
   17454:	b280      	uxth	r0, r0
   17456:	2800      	cmp	r0, #0
   17458:	f47f ae91 	bne.w	1717e <usb_isr+0x18e>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   1745c:	4955      	ldr	r1, [pc, #340]	; (175b4 <usb_isr+0x5c4>)
   1745e:	4c56      	ldr	r4, [pc, #344]	; (175b8 <usb_isr+0x5c8>)
   17460:	c903      	ldmia	r1, {r0, r1}
   17462:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
   17464:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
   17466:	ea4f 4111 	mov.w	r1, r1, lsr #16
   1746a:	6020      	str	r0, [r4, #0]
   1746c:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
   1746e:	f47f ae86 	bne.w	1717e <usb_isr+0x18e>
	__disable_irq();
   17472:	b672      	cpsid	i
	sof_usage |= (1 << interface);
   17474:	4851      	ldr	r0, [pc, #324]	; (175bc <usb_isr+0x5cc>)
   17476:	7801      	ldrb	r1, [r0, #0]
   17478:	f041 0108 	orr.w	r1, r1, #8
   1747c:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
   1747e:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
   17482:	060d      	lsls	r5, r1, #24
   17484:	d405      	bmi.n	17492 <usb_isr+0x4a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   17486:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   17488:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
   1748a:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
   1748e:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
   17492:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
   17494:	4a4a      	ldr	r2, [pc, #296]	; (175c0 <usb_isr+0x5d0>)
   17496:	2150      	movs	r1, #80	; 0x50
   17498:	7011      	strb	r1, [r2, #0]
   1749a:	e670      	b.n	1717e <usb_isr+0x18e>
		endpoint_queue_head[0].status = 0;
   1749c:	60eb      	str	r3, [r5, #12]
		endpoint0_transfer_data.next = 1;
   1749e:	2301      	movs	r3, #1
		endpoint0_setupdata.bothwords = setupdata;
   174a0:	4943      	ldr	r1, [pc, #268]	; (175b0 <usb_isr+0x5c0>)
		endpoint0_transfer_data.next = 1;
   174a2:	f8c9 3000 	str.w	r3, [r9]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   174a6:	4b47      	ldr	r3, [pc, #284]	; (175c4 <usb_isr+0x5d4>)
		endpoint0_setupdata.bothwords = setupdata;
   174a8:	600a      	str	r2, [r1, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
   174aa:	f8c9 3004 	str.w	r3, [r9, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   174ae:	4b46      	ldr	r3, [pc, #280]	; (175c8 <usb_isr+0x5d8>)
		endpoint0_setupdata.bothwords = setupdata;
   174b0:	6048      	str	r0, [r1, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
   174b2:	f8c9 3010 	str.w	r3, [r9, #16]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
   174b6:	f8c5 9008 	str.w	r9, [r5, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
   174ba:	e9c9 8a02 	strd	r8, sl, [r9, #8]
		USB1_ENDPTPRIME |= (1<<0);
   174be:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
   174c2:	f042 0201 	orr.w	r2, r2, #1
   174c6:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
   174ca:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
   174ce:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
   174d2:	f8c9 2014 	str.w	r2, [r9, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
   174d6:	f8c9 3018 	str.w	r3, [r9, #24]
		while (USB1_ENDPTPRIME) ;
   174da:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   174de:	2b00      	cmp	r3, #0
   174e0:	d1fb      	bne.n	174da <usb_isr+0x4ea>
	endpoint0_transfer_ack.next = 1;
   174e2:	4a29      	ldr	r2, [pc, #164]	; (17588 <usb_isr+0x598>)
	endpoint_queue_head[1].status = 0;
   174e4:	64eb      	str	r3, [r5, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
   174e6:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
   174e8:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
   174ea:	64aa      	str	r2, [r5, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
   174ec:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
   174ee:	f248 0380 	movw	r3, #32896	; 0x8080
   174f2:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
   174f4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   174f8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
   174fc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   17504:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
   17508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1750c:	f8cb 3000 	str.w	r3, [fp]
	while (USB1_ENDPTPRIME) ;
   17510:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   17514:	2b00      	cmp	r3, #0
   17516:	d1fb      	bne.n	17510 <usb_isr+0x520>
   17518:	e5d6      	b.n	170c8 <usb_isr+0xd8>
				if (datalen > setup.wLength) datalen = setup.wLength;
   1751a:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
   1751c:	780a      	ldrb	r2, [r1, #0]
   1751e:	4282      	cmp	r2, r0
   17520:	bf28      	it	cs
   17522:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
   17524:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
   17528:	d150      	bne.n	175cc <usb_isr+0x5dc>
					if (usb_high_speed) src = usb_config_descriptor_12;
   1752a:	4b1d      	ldr	r3, [pc, #116]	; (175a0 <usb_isr+0x5b0>)
   1752c:	481d      	ldr	r0, [pc, #116]	; (175a4 <usb_isr+0x5b4>)
   1752e:	f893 c000 	ldrb.w	ip, [r3]
   17532:	491d      	ldr	r1, [pc, #116]	; (175a8 <usb_isr+0x5b8>)
					memcpy(usb_descriptor_buffer, src, datalen);
   17534:	4b1d      	ldr	r3, [pc, #116]	; (175ac <usb_isr+0x5bc>)
   17536:	f1bc 0f00 	cmp.w	ip, #0
   1753a:	bf18      	it	ne
   1753c:	4601      	movne	r1, r0
   1753e:	9200      	str	r2, [sp, #0]
   17540:	4618      	mov	r0, r3
   17542:	f7ff f82b 	bl	1659c <memcpy>
					usb_descriptor_buffer[1] = 7;
   17546:	2107      	movs	r1, #7
					memcpy(usb_descriptor_buffer, src, datalen);
   17548:	4603      	mov	r3, r0
					usb_descriptor_buffer[1] = 7;
   1754a:	7041      	strb	r1, [r0, #1]
   1754c:	9a00      	ldr	r2, [sp, #0]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
   1754e:	f023 011f 	bic.w	r1, r3, #31
	uint32_t end_addr = (uint32_t)addr + size;
   17552:	4413      	add	r3, r2
	asm("dsb");
   17554:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17558:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
   1755c:	f8c0 1f70 	str.w	r1, [r0, #3952]	; 0xf70
		location += 32;
   17560:	3120      	adds	r1, #32
	} while (location < end_addr);
   17562:	428b      	cmp	r3, r1
   17564:	d8fa      	bhi.n	1755c <usb_isr+0x56c>
	asm("dsb");
   17566:	f3bf 8f4f 	dsb	sy
	asm("isb");
   1756a:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
   1756e:	480f      	ldr	r0, [pc, #60]	; (175ac <usb_isr+0x5bc>)
   17570:	4611      	mov	r1, r2
   17572:	f7ff fcdb 	bl	16f2c <endpoint0_transmit.constprop.0>
				return;
   17576:	e5a7      	b.n	170c8 <usb_isr+0xd8>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
   17578:	03c9      	lsls	r1, r1, #15
   1757a:	f53f ae3f 	bmi.w	171fc <usb_isr+0x20c>
   1757e:	e63f      	b.n	17200 <usb_isr+0x210>
   17580:	2000c963 	.word	0x2000c963
   17584:	00cc0002 	.word	0x00cc0002
   17588:	200042e0 	.word	0x200042e0
   1758c:	2000bc24 	.word	0x2000bc24
   17590:	2000c544 	.word	0x2000c544
   17594:	2000c962 	.word	0x2000c962
   17598:	2000b99c 	.word	0x2000b99c
   1759c:	200030d8 	.word	0x200030d8
   175a0:	2000c964 	.word	0x2000c964
   175a4:	600030dc 	.word	0x600030dc
   175a8:	60003354 	.word	0x60003354
   175ac:	20201240 	.word	0x20201240
   175b0:	200045e0 	.word	0x200045e0
   175b4:	2000685c 	.word	0x2000685c
   175b8:	2000c53c 	.word	0x2000c53c
   175bc:	2000c95b 	.word	0x2000c95b
   175c0:	2000c96a 	.word	0x2000c96a
   175c4:	00070080 	.word	0x00070080
   175c8:	2000885c 	.word	0x2000885c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
   175cc:	4b06      	ldr	r3, [pc, #24]	; (175e8 <usb_isr+0x5f8>)
   175ce:	4618      	mov	r0, r3
   175d0:	e9cd 2300 	strd	r2, r3, [sp]
   175d4:	f7fe ffe2 	bl	1659c <memcpy>
   175d8:	e9dd 2300 	ldrd	r2, r3, [sp]
   175dc:	e7b7      	b.n	1754e <usb_isr+0x55e>
				usb_stop_sof_interrupts(NUM_INTERFACE);
   175de:	2003      	movs	r0, #3
   175e0:	f7ff fcf0 	bl	16fc4 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
   175e4:	f010 fb50 	bl	27c88 <___reboot_Teensyduino__veneer>
   175e8:	20201240 	.word	0x20201240

000175ec <usb_config_rx>:
{
   175ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   175f0:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   175f2:	1e83      	subs	r3, r0, #2
   175f4:	2b02      	cmp	r3, #2
   175f6:	d901      	bls.n	175fc <usb_config_rx+0x10>
}
   175f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   175fc:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1764c <usb_config_rx+0x60>
   17600:	4615      	mov	r5, r2
   17602:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
   17604:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   17606:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   1760a:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
   1760c:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
   17610:	2100      	movs	r1, #0
   17612:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17616:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
   17618:	f00a ff62 	bl	224e0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   1761c:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
   17620:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17622:	0952      	lsrs	r2, r2, #5
   17624:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
   17628:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
   1762c:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   17630:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
   17634:	2f00      	cmp	r7, #0
   17636:	d0df      	beq.n	175f8 <usb_config_rx+0xc>
   17638:	4a03      	ldr	r2, [pc, #12]	; (17648 <usb_config_rx+0x5c>)
   1763a:	40b3      	lsls	r3, r6
   1763c:	6811      	ldr	r1, [r2, #0]
   1763e:	430b      	orrs	r3, r1
   17640:	6013      	str	r3, [r2, #0]
}
   17642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17646:	bf00      	nop
   17648:	20006868 	.word	0x20006868
   1764c:	20000000 	.word	0x20000000

00017650 <usb_config_tx>:
{
   17650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17654:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
   17656:	1e81      	subs	r1, r0, #2
   17658:	2902      	cmp	r1, #2
   1765a:	d901      	bls.n	17660 <usb_config_tx+0x10>
}
   1765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   17660:	01c7      	lsls	r7, r0, #7
   17662:	f8df 904c 	ldr.w	r9, [pc, #76]	; 176b0 <usb_config_tx+0x60>
   17666:	4692      	mov	sl, r2
   17668:	4604      	mov	r4, r0
   1766a:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
   1766c:	223c      	movs	r2, #60	; 0x3c
   1766e:	2100      	movs	r1, #0
   17670:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
   17672:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17676:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
   17678:	f108 0004 	add.w	r0, r8, #4
   1767c:	f00a ff30 	bl	224e0 <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
   17680:	faba f28a 	clz	r2, sl
   17684:	0952      	lsrs	r2, r2, #5
   17686:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
   1768a:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
   1768e:	2201      	movs	r2, #1
	qh->callback_function = callback;
   17690:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
   17694:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
   17698:	2e00      	cmp	r6, #0
   1769a:	d0df      	beq.n	1765c <usb_config_tx+0xc>
   1769c:	4b03      	ldr	r3, [pc, #12]	; (176ac <usb_config_tx+0x5c>)
   1769e:	3410      	adds	r4, #16
   176a0:	6819      	ldr	r1, [r3, #0]
   176a2:	40a2      	lsls	r2, r4
   176a4:	430a      	orrs	r2, r1
   176a6:	601a      	str	r2, [r3, #0]
}
   176a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   176ac:	20006868 	.word	0x20006868
   176b0:	20000000 	.word	0x20000000

000176b4 <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
   176b4:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
   176b6:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
   176b8:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
   176ba:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
   176be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
   176c2:	b410      	push	{r4}
	transfer->next = 1;
   176c4:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
   176c6:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
   176c8:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
   176cc:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
   176ce:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
   176d2:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
   176d6:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
   176d8:	6181      	str	r1, [r0, #24]
}
   176da:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
   176de:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
   176e2:	4770      	bx	lr

000176e4 <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   176e4:	1e83      	subs	r3, r0, #2
{
   176e6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   176e8:	2b02      	cmp	r3, #2
   176ea:	d900      	bls.n	176ee <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
   176ec:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   176ee:	4b06      	ldr	r3, [pc, #24]	; (17708 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
   176f0:	f100 0110 	add.w	r1, r0, #16
   176f4:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
   176f8:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
   176fc:	fa0c f101 	lsl.w	r1, ip, r1
   17700:	3040      	adds	r0, #64	; 0x40
   17702:	f7ff bbb3 	b.w	16e6c <schedule_transfer>
   17706:	bf00      	nop
   17708:	20000000 	.word	0x20000000

0001770c <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   1770c:	1e83      	subs	r3, r0, #2
{
   1770e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
   17710:	2b02      	cmp	r3, #2
   17712:	d900      	bls.n	17716 <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
   17714:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
   17716:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
   17718:	4b02      	ldr	r3, [pc, #8]	; (17724 <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
   1771a:	4081      	lsls	r1, r0
   1771c:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
   17720:	f7ff bba4 	b.w	16e6c <schedule_transfer>
   17724:	20000000 	.word	0x20000000

00017728 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
   17728:	6840      	ldr	r0, [r0, #4]
#endif
}
   1772a:	4770      	bx	lr

0001772c <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   1772c:	4a12      	ldr	r2, [pc, #72]	; (17778 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
   1772e:	4b13      	ldr	r3, [pc, #76]	; (1777c <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
   17730:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
   17734:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
   17738:	4298      	cmp	r0, r3
{
   1773a:	b510      	push	{r4, lr}
   1773c:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
   1773e:	d202      	bcs.n	17746 <usb_init_serialnumber+0x1a>
   17740:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   17744:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
   17746:	4c0e      	ldr	r4, [pc, #56]	; (17780 <usb_init_serialnumber+0x54>)
   17748:	a901      	add	r1, sp, #4
   1774a:	220a      	movs	r2, #10
   1774c:	f7fe ffca 	bl	166e4 <ultoa>
	for (i=0; i<10; i++) {
   17750:	a901      	add	r1, sp, #4
   17752:	2300      	movs	r3, #0
   17754:	4620      	mov	r0, r4
		char c = buf[i];
   17756:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
   1775a:	3301      	adds	r3, #1
		if (!c) break;
   1775c:	b13a      	cbz	r2, 1776e <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
   1775e:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
   17760:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
   17764:	d1f7      	bne.n	17756 <usb_init_serialnumber+0x2a>
   17766:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   17768:	7023      	strb	r3, [r4, #0]
}
   1776a:	b004      	add	sp, #16
   1776c:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
   1776e:	005b      	lsls	r3, r3, #1
   17770:	b2db      	uxtb	r3, r3
   17772:	7023      	strb	r3, [r4, #0]
}
   17774:	b004      	add	sp, #16
   17776:	bd10      	pop	{r4, pc}
   17778:	401f4400 	.word	0x401f4400
   1777c:	00989680 	.word	0x00989680
   17780:	20003c98 	.word	0x20003c98

00017784 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
   17784:	f000 be48 	b.w	18418 <usb_serial_flush_input>

00017788 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
   17788:	f000 be18 	b.w	183bc <usb_serial_peekchar>

0001778c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
   1778c:	f000 be7c 	b.w	18488 <usb_serial_getchar>

00017790 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
   17790:	f000 be36 	b.w	18400 <usb_serial_available>

00017794 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
   17794:	f000 bed2 	b.w	1853c <usb_serial_flush_output>

00017798 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
   17798:	f000 bea8 	b.w	184ec <usb_serial_write_buffer_free>

0001779c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
   1779c:	4608      	mov	r0, r1
   1779e:	4611      	mov	r1, r2
   177a0:	f000 be98 	b.w	184d4 <usb_serial_write>

000177a4 <sysex_byte>:
                usb_midi_write_packed(0x05 | cable | (0xF7 << 8));
	}
}

static void sysex_byte(uint8_t b)
{
   177a4:	b538      	push	{r3, r4, r5, lr}
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   177a6:	4b0c      	ldr	r3, [pc, #48]	; (177d8 <sysex_byte+0x34>)
{
   177a8:	4604      	mov	r4, r0
	if (usb_midi_handleSysExPartial && usb_midi_msg_sysex_len >= USB_MIDI_SYSEX_MAX) {
   177aa:	4d0c      	ldr	r5, [pc, #48]	; (177dc <sysex_byte+0x38>)
   177ac:	681b      	ldr	r3, [r3, #0]
   177ae:	8829      	ldrh	r1, [r5, #0]
   177b0:	b143      	cbz	r3, 177c4 <sysex_byte+0x20>
   177b2:	f5b1 7f91 	cmp.w	r1, #290	; 0x122
   177b6:	d209      	bcs.n	177cc <sysex_byte+0x28>
		// when buffer is full, send another chunk to partial handler.
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
		usb_midi_msg_sysex_len = 0;
	}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
		usb_midi_msg_sysex[usb_midi_msg_sysex_len++] = b;
   177b8:	1c4b      	adds	r3, r1, #1
   177ba:	b29b      	uxth	r3, r3
   177bc:	4a08      	ldr	r2, [pc, #32]	; (177e0 <sysex_byte+0x3c>)
   177be:	802b      	strh	r3, [r5, #0]
   177c0:	5454      	strb	r4, [r2, r1]
	}
}
   177c2:	bd38      	pop	{r3, r4, r5, pc}
	if (usb_midi_msg_sysex_len < USB_MIDI_SYSEX_MAX) {
   177c4:	f5b1 7f91 	cmp.w	r1, #290	; 0x122
   177c8:	d3f6      	bcc.n	177b8 <sysex_byte+0x14>
}
   177ca:	bd38      	pop	{r3, r4, r5, pc}
		(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, usb_midi_msg_sysex_len, 0);
   177cc:	2200      	movs	r2, #0
   177ce:	4804      	ldr	r0, [pc, #16]	; (177e0 <sysex_byte+0x3c>)
   177d0:	4798      	blx	r3
   177d2:	2100      	movs	r1, #0
   177d4:	2301      	movs	r3, #1
   177d6:	e7f1      	b.n	177bc <sysex_byte+0x18>
   177d8:	2000c584 	.word	0x2000c584
   177dc:	2000c940 	.word	0x2000c940
   177e0:	2000c598 	.word	0x2000c598

000177e4 <rx_queue_transfer>:




static void rx_queue_transfer(int i)
{
   177e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   177e6:	4c14      	ldr	r4, [pc, #80]	; (17838 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   177e8:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   177ec:	4e13      	ldr	r6, [pc, #76]	; (1783c <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   177ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * MIDI_RX_SIZE_480;
   177f2:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   177f6:	4f12      	ldr	r7, [pc, #72]	; (17840 <rx_queue_transfer+0x5c>)
   177f8:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   177fc:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   177fe:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   17802:	4621      	mov	r1, r4
   17804:	883a      	ldrh	r2, [r7, #0]
   17806:	4630      	mov	r0, r6
   17808:	f7ff ff54 	bl	176b4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   1780c:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   1780e:	4423      	add	r3, r4
	asm("dsb");
   17810:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   17814:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   17818:	3420      	adds	r4, #32
	} while (location < end_addr);
   1781a:	42a3      	cmp	r3, r4
   1781c:	d8fa      	bhi.n	17814 <rx_queue_transfer+0x30>
	asm("dsb");
   1781e:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17822:	f3bf 8f6f 	isb	sy
	usb_receive(MIDI_RX_ENDPOINT, rx_transfer + i);
   17826:	2004      	movs	r0, #4
   17828:	4631      	mov	r1, r6
   1782a:	f7ff ff6f 	bl	1770c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   1782e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   17832:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   17836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17838:	202014c0 	.word	0x202014c0
   1783c:	20004320 	.word	0x20004320
   17840:	2000c934 	.word	0x2000c934

00017844 <rx_event>:


// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17844:	6842      	ldr	r2, [r0, #4]
	len &= 0xFFFC; // MIDI packets must be multiple of 4 bytes
   17846:	f64f 71fc 	movw	r1, #65532	; 0xfffc
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   1784a:	4b11      	ldr	r3, [pc, #68]	; (17890 <rx_event+0x4c>)
   1784c:	f3c2 420e 	ubfx	r2, r2, #16, #15
	int i = t->callback_param;
   17850:	69c0      	ldr	r0, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17852:	881b      	ldrh	r3, [r3, #0]
   17854:	1a9b      	subs	r3, r3, r2
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   17856:	400b      	ands	r3, r1
   17858:	d017      	beq.n	1788a <rx_event+0x46>
		uint32_t head = rx_head;
		rx_count[i] = len;
   1785a:	490e      	ldr	r1, [pc, #56]	; (17894 <rx_event+0x50>)
{
   1785c:	b430      	push	{r4, r5}
		uint32_t head = rx_head;
   1785e:	4c0e      	ldr	r4, [pc, #56]	; (17898 <rx_event+0x54>)
		rx_index[i] = 0;
   17860:	4d0e      	ldr	r5, [pc, #56]	; (1789c <rx_event+0x58>)
		uint32_t head = rx_head;
   17862:	7822      	ldrb	r2, [r4, #0]
		rx_count[i] = len;
   17864:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
		rx_index[i] = 0;
   17868:	2100      	movs	r1, #0
		if (++head > RX_NUM) head = 0;
   1786a:	3201      	adds	r2, #1
		rx_index[i] = 0;
   1786c:	f825 1010 	strh.w	r1, [r5, r0, lsl #1]
		if (++head > RX_NUM) head = 0;
   17870:	2a06      	cmp	r2, #6
		rx_list[head] = i;
		rx_head = head;
   17872:	bf94      	ite	ls
   17874:	b2d1      	uxtbls	r1, r2
		if (++head > RX_NUM) head = 0;
   17876:	460a      	movhi	r2, r1
		rx_head = head;
   17878:	7021      	strb	r1, [r4, #0]
		rx_available += len;
   1787a:	4909      	ldr	r1, [pc, #36]	; (178a0 <rx_event+0x5c>)
   1787c:	680c      	ldr	r4, [r1, #0]
   1787e:	4423      	add	r3, r4
   17880:	600b      	str	r3, [r1, #0]
		rx_list[head] = i;
   17882:	4b08      	ldr	r3, [pc, #32]	; (178a4 <rx_event+0x60>)
   17884:	5498      	strb	r0, [r3, r2]
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   17886:	bc30      	pop	{r4, r5}
   17888:	4770      	bx	lr
		rx_queue_transfer(i);
   1788a:	f7ff bfab 	b.w	177e4 <rx_queue_transfer>
   1788e:	bf00      	nop
   17890:	2000c934 	.word	0x2000c934
   17894:	2000b9ac 	.word	0x2000b9ac
   17898:	2000c956 	.word	0x2000c956
   1789c:	2000b9c8 	.word	0x2000b9c8
   178a0:	2000b9a4 	.word	0x2000b9a4
   178a4:	2000b9e4 	.word	0x2000b9e4

000178a8 <usb_midi_configure>:
	if (usb_high_speed) {
   178a8:	4b21      	ldr	r3, [pc, #132]	; (17930 <usb_midi_configure+0x88>)
{
   178aa:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   178ac:	781b      	ldrb	r3, [r3, #0]
   178ae:	2b00      	cmp	r3, #0
   178b0:	d03b      	beq.n	1792a <usb_midi_configure+0x82>
   178b2:	f44f 7300 	mov.w	r3, #512	; 0x200
   178b6:	461e      	mov	r6, r3
		rx_packet_size = MIDI_RX_SIZE_480;
   178b8:	491e      	ldr	r1, [pc, #120]	; (17934 <usb_midi_configure+0x8c>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   178ba:	2280      	movs	r2, #128	; 0x80
		tx_packet_size = MIDI_TX_SIZE_480;
   178bc:	4d1e      	ldr	r5, [pc, #120]	; (17938 <usb_midi_configure+0x90>)
	tx_head = 0;
   178be:	2400      	movs	r4, #0
		rx_packet_size = MIDI_RX_SIZE_480;
   178c0:	800b      	strh	r3, [r1, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   178c2:	2100      	movs	r1, #0
   178c4:	481d      	ldr	r0, [pc, #116]	; (1793c <usb_midi_configure+0x94>)
		tx_packet_size = MIDI_TX_SIZE_480;
   178c6:	802b      	strh	r3, [r5, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   178c8:	f00a fe0a 	bl	224e0 <memset>
	tx_head = 0;
   178cc:	4a1c      	ldr	r2, [pc, #112]	; (17940 <usb_midi_configure+0x98>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   178ce:	4621      	mov	r1, r4
	tx_available = 0;
   178d0:	4b1c      	ldr	r3, [pc, #112]	; (17944 <usb_midi_configure+0x9c>)
	tx_head = 0;
   178d2:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   178d4:	22c0      	movs	r2, #192	; 0xc0
   178d6:	481c      	ldr	r0, [pc, #112]	; (17948 <usb_midi_configure+0xa0>)
	tx_available = 0;
   178d8:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   178da:	f00a fe01 	bl	224e0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   178de:	4a1b      	ldr	r2, [pc, #108]	; (1794c <usb_midi_configure+0xa4>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   178e0:	4631      	mov	r1, r6
	memset(rx_index, 0, sizeof(rx_index));
   178e2:	4b1b      	ldr	r3, [pc, #108]	; (17950 <usb_midi_configure+0xa8>)
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   178e4:	2004      	movs	r0, #4
	memset(rx_count, 0, sizeof(rx_count));
   178e6:	6094      	str	r4, [r2, #8]
	memset(rx_index, 0, sizeof(rx_index));
   178e8:	609c      	str	r4, [r3, #8]
	memset(rx_count, 0, sizeof(rx_count));
   178ea:	e9c2 4400 	strd	r4, r4, [r2]
	rx_head = 0;
   178ee:	4a19      	ldr	r2, [pc, #100]	; (17954 <usb_midi_configure+0xac>)
	memset(rx_index, 0, sizeof(rx_index));
   178f0:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   178f4:	7014      	strb	r4, [r2, #0]
	rx_tail = 0;
   178f6:	4b18      	ldr	r3, [pc, #96]	; (17958 <usb_midi_configure+0xb0>)
	rx_available = 0;
   178f8:	4a18      	ldr	r2, [pc, #96]	; (1795c <usb_midi_configure+0xb4>)
	rx_tail = 0;
   178fa:	701c      	strb	r4, [r3, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   178fc:	4b18      	ldr	r3, [pc, #96]	; (17960 <usb_midi_configure+0xb8>)
	rx_available = 0;
   178fe:	6014      	str	r4, [r2, #0]
	usb_config_rx(MIDI_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   17900:	4622      	mov	r2, r4
   17902:	f7ff fe73 	bl	175ec <usb_config_rx>
	usb_config_tx(MIDI_TX_ENDPOINT, tx_packet_size, 0, NULL); // TODO: is ZLP needed?
   17906:	4623      	mov	r3, r4
   17908:	4622      	mov	r2, r4
   1790a:	8829      	ldrh	r1, [r5, #0]
   1790c:	2004      	movs	r0, #4
   1790e:	f7ff fe9f 	bl	17650 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   17912:	4620      	mov	r0, r4
   17914:	3401      	adds	r4, #1
   17916:	f7ff ff65 	bl	177e4 <rx_queue_transfer>
   1791a:	2c06      	cmp	r4, #6
   1791c:	d1f9      	bne.n	17912 <usb_midi_configure+0x6a>
	transmit_previous_timeout = 0;
   1791e:	2300      	movs	r3, #0
   17920:	4910      	ldr	r1, [pc, #64]	; (17964 <usb_midi_configure+0xbc>)
	tx_noautoflush = 0;
   17922:	4a11      	ldr	r2, [pc, #68]	; (17968 <usb_midi_configure+0xc0>)
	transmit_previous_timeout = 0;
   17924:	700b      	strb	r3, [r1, #0]
	tx_noautoflush = 0;
   17926:	7013      	strb	r3, [r2, #0]
}
   17928:	bd70      	pop	{r4, r5, r6, pc}
   1792a:	2340      	movs	r3, #64	; 0x40
   1792c:	461e      	mov	r6, r3
   1792e:	e7c3      	b.n	178b8 <usb_midi_configure+0x10>
   17930:	2000c964 	.word	0x2000c964
   17934:	2000c934 	.word	0x2000c934
   17938:	2000c93c 	.word	0x2000c93c
   1793c:	200044e0 	.word	0x200044e0
   17940:	2000c95e 	.word	0x2000c95e
   17944:	2000c938 	.word	0x2000c938
   17948:	20004320 	.word	0x20004320
   1794c:	2000b9ac 	.word	0x2000b9ac
   17950:	2000b9c8 	.word	0x2000b9c8
   17954:	2000c956 	.word	0x2000c956
   17958:	2000c958 	.word	0x2000c958
   1795c:	2000b9a4 	.word	0x2000b9a4
   17960:	00017845 	.word	0x00017845
   17964:	2000c95c 	.word	0x2000c95c
   17968:	2000c960 	.word	0x2000c960

0001796c <usb_midi_flush_output>:
{
   1796c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (tx_noautoflush == 0 && tx_available > 0) {
   17970:	4b21      	ldr	r3, [pc, #132]	; (179f8 <usb_midi_flush_output+0x8c>)
   17972:	781d      	ldrb	r5, [r3, #0]
   17974:	b915      	cbnz	r5, 1797c <usb_midi_flush_output+0x10>
   17976:	4e21      	ldr	r6, [pc, #132]	; (179fc <usb_midi_flush_output+0x90>)
   17978:	8833      	ldrh	r3, [r6, #0]
   1797a:	b90b      	cbnz	r3, 17980 <usb_midi_flush_output+0x14>
}
   1797c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint32_t head = tx_head;
   17980:	f8df 8088 	ldr.w	r8, [pc, #136]	; 17a0c <usb_midi_flush_output+0xa0>
		transfer_t *xfer = tx_transfer + head;
   17984:	4a1e      	ldr	r2, [pc, #120]	; (17a00 <usb_midi_flush_output+0x94>)
		uint32_t head = tx_head;
   17986:	f898 7000 	ldrb.w	r7, [r8]
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   1798a:	4c1e      	ldr	r4, [pc, #120]	; (17a04 <usb_midi_flush_output+0x98>)
		transfer_t *xfer = tx_transfer + head;
   1798c:	eb02 1947 	add.w	r9, r2, r7, lsl #5
		uint32_t len = tx_packet_size - tx_available;
   17990:	4a1d      	ldr	r2, [pc, #116]	; (17a08 <usb_midi_flush_output+0x9c>)
		uint8_t *txbuf = txbuffer + (head * TX_SIZE);
   17992:	eb04 2447 	add.w	r4, r4, r7, lsl #9
		uint32_t len = tx_packet_size - tx_available;
   17996:	8812      	ldrh	r2, [r2, #0]
		usb_prepare_transfer(xfer, txbuf, len, 0);
   17998:	4648      	mov	r0, r9
   1799a:	4621      	mov	r1, r4
   1799c:	1ad2      	subs	r2, r2, r3
   1799e:	462b      	mov	r3, r5
   179a0:	f7ff fe88 	bl	176b4 <usb_prepare_transfer>
	asm("dsb");
   179a4:	f3bf 8f4f 	dsb	sy
   179a8:	f104 0220 	add.w	r2, r4, #32
	uint32_t end_addr = (uint32_t)addr + size;
   179ac:	f504 7300 	add.w	r3, r4, #512	; 0x200
   179b0:	4293      	cmp	r3, r2
   179b2:	bf34      	ite	cc
   179b4:	2301      	movcc	r3, #1
   179b6:	2310      	movcs	r3, #16
		SCB_CACHE_DCCIMVAC = location;
   179b8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   179bc:	eb04 1343 	add.w	r3, r4, r3, lsl #5
   179c0:	f8c2 4f70 	str.w	r4, [r2, #3952]	; 0xf70
		location += 32;
   179c4:	3420      	adds	r4, #32
	} while (location < end_addr);
   179c6:	429c      	cmp	r4, r3
   179c8:	d1fa      	bne.n	179c0 <usb_midi_flush_output+0x54>
	asm("dsb");
   179ca:	f3bf 8f4f 	dsb	sy
	asm("isb");
   179ce:	f3bf 8f6f 	isb	sy
		if (++head >= TX_NUM) head = 0;
   179d2:	3701      	adds	r7, #1
		usb_transmit(MIDI_TX_ENDPOINT, xfer);
   179d4:	4649      	mov	r1, r9
   179d6:	2004      	movs	r0, #4
   179d8:	f7ff fe84 	bl	176e4 <usb_transmit>
		if (++head >= TX_NUM) head = 0;
   179dc:	2f03      	cmp	r7, #3
		tx_available = 0;
   179de:	f04f 0300 	mov.w	r3, #0
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   179e2:	f04f 0002 	mov.w	r0, #2
		tx_head = head;
   179e6:	bf98      	it	ls
   179e8:	b2fd      	uxtbls	r5, r7
		tx_available = 0;
   179ea:	8033      	strh	r3, [r6, #0]
		tx_head = head;
   179ec:	f888 5000 	strb.w	r5, [r8]
}
   179f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		usb_stop_sof_interrupts(MIDI_INTERFACE);
   179f4:	f7ff bae6 	b.w	16fc4 <usb_stop_sof_interrupts>
   179f8:	2000c960 	.word	0x2000c960
   179fc:	2000c938 	.word	0x2000c938
   17a00:	200044e0 	.word	0x200044e0
   17a04:	202020c0 	.word	0x202020c0
   17a08:	2000c93c 	.word	0x2000c93c
   17a0c:	2000c95e 	.word	0x2000c95e

00017a10 <usb_midi_read_message>:
{
	return rx_available / 4;
}

uint32_t usb_midi_read_message(void)
{
   17a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t n = 0;
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   17a16:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	uint32_t tail = rx_tail;
   17a1a:	4c20      	ldr	r4, [pc, #128]	; (17a9c <usb_midi_read_message+0x8c>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17a1c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	if (tail != rx_head) {
   17a20:	4b1f      	ldr	r3, [pc, #124]	; (17aa0 <usb_midi_read_message+0x90>)
	uint32_t tail = rx_tail;
   17a22:	7822      	ldrb	r2, [r4, #0]
	if (tail != rx_head) {
   17a24:	7819      	ldrb	r1, [r3, #0]
   17a26:	428a      	cmp	r2, r1
   17a28:	d02e      	beq.n	17a88 <usb_midi_read_message+0x78>
		if (++tail > RX_NUM) tail = 0;
   17a2a:	b2d3      	uxtb	r3, r2
		uint32_t i = rx_list[tail];
   17a2c:	4a1d      	ldr	r2, [pc, #116]	; (17aa4 <usb_midi_read_message+0x94>)
		//uint32_t avail = (rx_count[i] - rx_index[i]) / 4;
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   17a2e:	4f1e      	ldr	r7, [pc, #120]	; (17aa8 <usb_midi_read_message+0x98>)
		if (++tail > RX_NUM) tail = 0;
   17a30:	3301      	adds	r3, #1
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   17a32:	491e      	ldr	r1, [pc, #120]	; (17aac <usb_midi_read_message+0x9c>)
		n = *(uint32_t *)p;
		rx_available -= 4;
   17a34:	4e1e      	ldr	r6, [pc, #120]	; (17ab0 <usb_midi_read_message+0xa0>)
		if (++tail > RX_NUM) tail = 0;
   17a36:	2b07      	cmp	r3, #7
   17a38:	bf28      	it	cs
   17a3a:	2300      	movcs	r3, #0
		uint32_t i = rx_list[tail];
   17a3c:	5cd0      	ldrb	r0, [r2, r3]
		void *p = rx_buffer + i * MIDI_RX_SIZE_480 + rx_index[i];
   17a3e:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
		n = *(uint32_t *)p;
   17a42:	eb01 2140 	add.w	r1, r1, r0, lsl #9
   17a46:	588d      	ldr	r5, [r1, r2]
		rx_index[i] += 4;
   17a48:	3204      	adds	r2, #4
		rx_available -= 4;
   17a4a:	6831      	ldr	r1, [r6, #0]
		rx_index[i] += 4;
   17a4c:	b292      	uxth	r2, r2
		rx_available -= 4;
   17a4e:	3904      	subs	r1, #4
		rx_index[i] += 4;
   17a50:	f827 2010 	strh.w	r2, [r7, r0, lsl #1]
		rx_available -= 4;
   17a54:	6031      	str	r1, [r6, #0]
		if (rx_index[i] >= rx_count[i]) {
   17a56:	4917      	ldr	r1, [pc, #92]	; (17ab4 <usb_midi_read_message+0xa4>)
   17a58:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
   17a5c:	4291      	cmp	r1, r2
   17a5e:	d907      	bls.n	17a70 <usb_midi_read_message+0x60>
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17a60:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17a64:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	return n;
}
   17a68:	4628      	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17a6a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   17a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			rx_tail = tail;
   17a70:	b2db      	uxtb	r3, r3
   17a72:	7023      	strb	r3, [r4, #0]
			rx_queue_transfer(i);
   17a74:	f7ff feb6 	bl	177e4 <rx_queue_transfer>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17a78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17a7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
}
   17a80:	4628      	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17a82:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   17a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t n = 0;
   17a88:	2500      	movs	r5, #0
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17a8a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17a8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
}
   17a92:	4628      	mov	r0, r5
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17a94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   17a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17a9a:	bf00      	nop
   17a9c:	2000c958 	.word	0x2000c958
   17aa0:	2000c956 	.word	0x2000c956
   17aa4:	2000b9e4 	.word	0x2000b9e4
   17aa8:	2000b9c8 	.word	0x2000b9c8
   17aac:	202014c0 	.word	0x202014c0
   17ab0:	2000b9a4 	.word	0x2000b9a4
   17ab4:	2000b9ac 	.word	0x2000b9ac

00017ab8 <usb_midi_read>:

int usb_midi_read(uint32_t channel)
{
   17ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17abc:	4607      	mov	r7, r0
	uint32_t n, ch, type1, type2, b1;
	
	n = usb_midi_read_message();
   17abe:	f7ff ffa7 	bl	17a10 <usb_midi_read_message>
	if (n == 0) return 0;
   17ac2:	b198      	cbz	r0, 17aec <usb_midi_read+0x34>
	type1 = n & 15;
	type2 = (n >> 12) & 15;
	b1 = (n >> 8) & 0xFF;
	ch = (b1 & 15) + 1;
   17ac4:	f3c0 2303 	ubfx	r3, r0, #8, #4
	type1 = n & 15;
   17ac8:	f000 050f 	and.w	r5, r0, #15
	usb_midi_msg_cable = (n >> 4) & 15;
   17acc:	4a9f      	ldr	r2, [pc, #636]	; (17d4c <usb_midi_read+0x294>)
   17ace:	4604      	mov	r4, r0
	ch = (b1 & 15) + 1;
   17ad0:	1c5e      	adds	r6, r3, #1
	usb_midi_msg_cable = (n >> 4) & 15;
   17ad2:	f3c0 1303 	ubfx	r3, r0, #4, #4
	b1 = (n >> 8) & 0xFF;
   17ad6:	ea4f 2810 	mov.w	r8, r0, lsr #8
	usb_midi_msg_cable = (n >> 4) & 15;
   17ada:	7013      	strb	r3, [r2, #0]
	if (type1 >= 0x08 && type1 <= 0x0E) {
   17adc:	f1a5 0308 	sub.w	r3, r5, #8
   17ae0:	2b06      	cmp	r3, #6
   17ae2:	d806      	bhi.n	17af2 <usb_midi_read+0x3a>
		if (channel && channel != ch) {
   17ae4:	2f00      	cmp	r7, #0
   17ae6:	d047      	beq.n	17b78 <usb_midi_read+0xc0>
   17ae8:	42be      	cmp	r6, r7
   17aea:	d045      	beq.n	17b78 <usb_midi_read+0xc0>
			// OSX sometimes uses Single Byte Unparsed to
			// send bytes in the middle of a SYSEX message.
			sysex_byte(b1);
		}
	}
	return 0;
   17aec:	2000      	movs	r0, #0
}
   17aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   17af2:	1eab      	subs	r3, r5, #2
	b1 = (n >> 8) & 0xFF;
   17af4:	fa5f f088 	uxtb.w	r0, r8
	if (type1 == 0x02 || type1 == 0x03 || (type1 == 0x05 && b1 >= 0xF1 && b1 != 0xF7)) {
   17af8:	2b01      	cmp	r3, #1
   17afa:	d919      	bls.n	17b30 <usb_midi_read+0x78>
   17afc:	28f7      	cmp	r0, #247	; 0xf7
   17afe:	bf18      	it	ne
   17b00:	28f0      	cmpne	r0, #240	; 0xf0
   17b02:	d901      	bls.n	17b08 <usb_midi_read+0x50>
   17b04:	2d05      	cmp	r5, #5
   17b06:	d013      	beq.n	17b30 <usb_midi_read+0x78>
	if (type1 == 0x04) {
   17b08:	2d04      	cmp	r5, #4
   17b0a:	f000 8189 	beq.w	17e20 <usb_midi_read+0x368>
	if (type1 >= 0x05 && type1 <= 0x07) {
   17b0e:	1f6b      	subs	r3, r5, #5
   17b10:	2b02      	cmp	r3, #2
   17b12:	f240 8149 	bls.w	17da8 <usb_midi_read+0x2f0>
	if (type1 == 0x0F) {
   17b16:	2d0f      	cmp	r5, #15
   17b18:	d1e8      	bne.n	17aec <usb_midi_read+0x34>
		if (b1 >= 0xF8) {
   17b1a:	28f7      	cmp	r0, #247	; 0xf7
   17b1c:	d808      	bhi.n	17b30 <usb_midi_read+0x78>
		if (b1 == 0xF0 || usb_midi_msg_sysex_len > 0) {
   17b1e:	28f0      	cmp	r0, #240	; 0xf0
   17b20:	d003      	beq.n	17b2a <usb_midi_read+0x72>
   17b22:	4b8b      	ldr	r3, [pc, #556]	; (17d50 <usb_midi_read+0x298>)
   17b24:	881b      	ldrh	r3, [r3, #0]
   17b26:	2b00      	cmp	r3, #0
   17b28:	d0e0      	beq.n	17aec <usb_midi_read+0x34>
			sysex_byte(b1);
   17b2a:	f7ff fe3b 	bl	177a4 <sysex_byte>
   17b2e:	e7dd      	b.n	17aec <usb_midi_read+0x34>
		switch (b1) {
   17b30:	38f1      	subs	r0, #241	; 0xf1
   17b32:	280e      	cmp	r0, #14
   17b34:	d8da      	bhi.n	17aec <usb_midi_read+0x34>
   17b36:	a301      	add	r3, pc, #4	; (adr r3, 17b3c <usb_midi_read+0x84>)
   17b38:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
   17b3c:	00017cbd 	.word	0x00017cbd
   17b40:	00017ccf 	.word	0x00017ccf
   17b44:	00017ceb 	.word	0x00017ceb
   17b48:	00017aed 	.word	0x00017aed
   17b4c:	00017aed 	.word	0x00017aed
   17b50:	00017cf9 	.word	0x00017cf9
   17b54:	00017aed 	.word	0x00017aed
   17b58:	00017d07 	.word	0x00017d07
   17b5c:	00017aed 	.word	0x00017aed
   17b60:	00017c41 	.word	0x00017c41
   17b64:	00017c75 	.word	0x00017c75
   17b68:	00017c5d 	.word	0x00017c5d
   17b6c:	00017aed 	.word	0x00017aed
   17b70:	00017c8d 	.word	0x00017c8d
   17b74:	00017ca5 	.word	0x00017ca5
		if (type1 == 0x08 && type2 == 0x08) {
   17b78:	2d08      	cmp	r5, #8
	type2 = (n >> 12) & 15;
   17b7a:	f3c4 3303 	ubfx	r3, r4, #12, #4
		if (type1 == 0x08 && type2 == 0x08) {
   17b7e:	d118      	bne.n	17bb2 <usb_midi_read+0xfa>
   17b80:	2b08      	cmp	r3, #8
   17b82:	d116      	bne.n	17bb2 <usb_midi_read+0xfa>
			if (usb_midi_handleNoteOff)
   17b84:	4973      	ldr	r1, [pc, #460]	; (17d54 <usb_midi_read+0x29c>)
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   17b86:	2280      	movs	r2, #128	; 0x80
   17b88:	4b73      	ldr	r3, [pc, #460]	; (17d58 <usb_midi_read+0x2a0>)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17b8a:	f3c4 4507 	ubfx	r5, r4, #16, #8
			if (usb_midi_handleNoteOff)
   17b8e:	680f      	ldr	r7, [r1, #0]
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17b90:	b2f6      	uxtb	r6, r6
   17b92:	0e24      	lsrs	r4, r4, #24
			usb_midi_msg_type = 0x80;		// 0x80 = usbMIDI.NoteOff
   17b94:	701a      	strb	r2, [r3, #0]
			if (usb_midi_handleNoteOff)
   17b96:	b11f      	cbz	r7, 17ba0 <usb_midi_read+0xe8>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17b98:	4629      	mov	r1, r5
   17b9a:	4630      	mov	r0, r6
   17b9c:	4622      	mov	r2, r4
   17b9e:	47b8      	blx	r7
		usb_midi_msg_channel = ch;
   17ba0:	496e      	ldr	r1, [pc, #440]	; (17d5c <usb_midi_read+0x2a4>)
		return 1;
   17ba2:	2001      	movs	r0, #1
		usb_midi_msg_data1 = (n >> 16);
   17ba4:	4a6e      	ldr	r2, [pc, #440]	; (17d60 <usb_midi_read+0x2a8>)
		usb_midi_msg_data2 = (n >> 24);
   17ba6:	4b6f      	ldr	r3, [pc, #444]	; (17d64 <usb_midi_read+0x2ac>)
		usb_midi_msg_channel = ch;
   17ba8:	700e      	strb	r6, [r1, #0]
		usb_midi_msg_data1 = (n >> 16);
   17baa:	7015      	strb	r5, [r2, #0]
		usb_midi_msg_data2 = (n >> 24);
   17bac:	701c      	strb	r4, [r3, #0]
}
   17bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (type1 == 0x09 && type2 == 0x09) {
   17bb2:	2d09      	cmp	r5, #9
   17bb4:	d114      	bne.n	17be0 <usb_midi_read+0x128>
   17bb6:	2b09      	cmp	r3, #9
   17bb8:	d112      	bne.n	17be0 <usb_midi_read+0x128>
			if ((n >> 24) > 0) {
   17bba:	0e22      	lsrs	r2, r4, #24
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   17bbc:	4b66      	ldr	r3, [pc, #408]	; (17d58 <usb_midi_read+0x2a0>)
			if ((n >> 24) > 0) {
   17bbe:	f000 80b7 	beq.w	17d30 <usb_midi_read+0x278>
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   17bc2:	2190      	movs	r1, #144	; 0x90
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   17bc4:	f3c4 4507 	ubfx	r5, r4, #16, #8
   17bc8:	b2f6      	uxtb	r6, r6
				usb_midi_msg_type = 0x90;	// 0x90 = usbMIDI.NoteOn
   17bca:	7019      	strb	r1, [r3, #0]
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   17bcc:	b2d4      	uxtb	r4, r2
				if (usb_midi_handleNoteOn)
   17bce:	4b66      	ldr	r3, [pc, #408]	; (17d68 <usb_midi_read+0x2b0>)
   17bd0:	681b      	ldr	r3, [r3, #0]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d0e4      	beq.n	17ba0 <usb_midi_read+0xe8>
					(*usb_midi_handleNoteOn)(ch, (n >> 16), (n >> 24));
   17bd6:	4622      	mov	r2, r4
   17bd8:	4629      	mov	r1, r5
   17bda:	4630      	mov	r0, r6
   17bdc:	4798      	blx	r3
   17bde:	e7df      	b.n	17ba0 <usb_midi_read+0xe8>
		if (type1 == 0x0A && type2 == 0x0A) {
   17be0:	2d0a      	cmp	r5, #10
   17be2:	d105      	bne.n	17bf0 <usb_midi_read+0x138>
   17be4:	2b0a      	cmp	r3, #10
   17be6:	d103      	bne.n	17bf0 <usb_midi_read+0x138>
			if (usb_midi_handleVelocityChange)
   17be8:	4b60      	ldr	r3, [pc, #384]	; (17d6c <usb_midi_read+0x2b4>)
			usb_midi_msg_type = 0xA0;		// 0xA0 = usbMIDI.AfterTouchPoly
   17bea:	21a0      	movs	r1, #160	; 0xa0
   17bec:	4a5a      	ldr	r2, [pc, #360]	; (17d58 <usb_midi_read+0x2a0>)
   17bee:	e006      	b.n	17bfe <usb_midi_read+0x146>
		if (type1 == 0x0B && type2 == 0x0B) {
   17bf0:	2d0b      	cmp	r5, #11
   17bf2:	d111      	bne.n	17c18 <usb_midi_read+0x160>
   17bf4:	2b0b      	cmp	r3, #11
   17bf6:	d10f      	bne.n	17c18 <usb_midi_read+0x160>
			if (usb_midi_handleControlChange)
   17bf8:	4b5d      	ldr	r3, [pc, #372]	; (17d70 <usb_midi_read+0x2b8>)
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   17bfa:	21b0      	movs	r1, #176	; 0xb0
   17bfc:	4a56      	ldr	r2, [pc, #344]	; (17d58 <usb_midi_read+0x2a0>)
			if (usb_midi_handleControlChange)
   17bfe:	681b      	ldr	r3, [r3, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   17c00:	f3c4 4507 	ubfx	r5, r4, #16, #8
   17c04:	b2f6      	uxtb	r6, r6
			usb_midi_msg_type = 0xB0;		// 0xB0 = usbMIDI.ControlChange
   17c06:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   17c08:	0e24      	lsrs	r4, r4, #24
			if (usb_midi_handleControlChange)
   17c0a:	2b00      	cmp	r3, #0
   17c0c:	d0c8      	beq.n	17ba0 <usb_midi_read+0xe8>
				(*usb_midi_handleControlChange)(ch, (n >> 16), (n >> 24));
   17c0e:	4629      	mov	r1, r5
   17c10:	4630      	mov	r0, r6
   17c12:	4622      	mov	r2, r4
   17c14:	4798      	blx	r3
   17c16:	e7c3      	b.n	17ba0 <usb_midi_read+0xe8>
		if (type1 == 0x0C && type2 == 0x0C) {
   17c18:	2d0c      	cmp	r5, #12
   17c1a:	f040 8081 	bne.w	17d20 <usb_midi_read+0x268>
   17c1e:	2b0c      	cmp	r3, #12
   17c20:	d17e      	bne.n	17d20 <usb_midi_read+0x268>
			if (usb_midi_handleProgramChange)
   17c22:	4b54      	ldr	r3, [pc, #336]	; (17d74 <usb_midi_read+0x2bc>)
			usb_midi_msg_type = 0xC0;		// 0xC0 = usbMIDI.ProgramChange
   17c24:	21c0      	movs	r1, #192	; 0xc0
   17c26:	4a4c      	ldr	r2, [pc, #304]	; (17d58 <usb_midi_read+0x2a0>)
			if (usb_midi_handleAfterTouch)
   17c28:	681b      	ldr	r3, [r3, #0]
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   17c2a:	f3c4 4507 	ubfx	r5, r4, #16, #8
   17c2e:	b2f6      	uxtb	r6, r6
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   17c30:	7011      	strb	r1, [r2, #0]
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17c32:	0e24      	lsrs	r4, r4, #24
			if (usb_midi_handleAfterTouch)
   17c34:	2b00      	cmp	r3, #0
   17c36:	d0b3      	beq.n	17ba0 <usb_midi_read+0xe8>
				(*usb_midi_handleAfterTouch)(ch, (n >> 16));
   17c38:	4629      	mov	r1, r5
   17c3a:	4630      	mov	r0, r6
   17c3c:	4798      	blx	r3
   17c3e:	e7af      	b.n	17ba0 <usb_midi_read+0xe8>
			if (usb_midi_handleStart) {
   17c40:	4b4d      	ldr	r3, [pc, #308]	; (17d78 <usb_midi_read+0x2c0>)
   17c42:	681b      	ldr	r3, [r3, #0]
   17c44:	2b00      	cmp	r3, #0
   17c46:	f000 80ff 	beq.w	17e48 <usb_midi_read+0x390>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17c4a:	f3c4 4507 	ubfx	r5, r4, #16, #8
				(*usb_midi_handleSystemReset)();
   17c4e:	4798      	blx	r3
		usb_midi_msg_type = b1;
   17c50:	4a41      	ldr	r2, [pc, #260]	; (17d58 <usb_midi_read+0x2a0>)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17c52:	b2f6      	uxtb	r6, r6
   17c54:	0e24      	lsrs	r4, r4, #24
		usb_midi_msg_type = b1;
   17c56:	f882 8000 	strb.w	r8, [r2]
		goto return_message;
   17c5a:	e7a1      	b.n	17ba0 <usb_midi_read+0xe8>
			if (usb_midi_handleStop) {
   17c5c:	4b47      	ldr	r3, [pc, #284]	; (17d7c <usb_midi_read+0x2c4>)
   17c5e:	681b      	ldr	r3, [r3, #0]
   17c60:	2b00      	cmp	r3, #0
   17c62:	d1f2      	bne.n	17c4a <usb_midi_read+0x192>
			} else if (usb_midi_handleRealTimeSystem) {
   17c64:	4b46      	ldr	r3, [pc, #280]	; (17d80 <usb_midi_read+0x2c8>)
   17c66:	681b      	ldr	r3, [r3, #0]
   17c68:	b32b      	cbz	r3, 17cb6 <usb_midi_read+0x1fe>
				(*usb_midi_handleRealTimeSystem)(0xFC);
   17c6a:	20fc      	movs	r0, #252	; 0xfc
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17c6c:	f3c4 4507 	ubfx	r5, r4, #16, #8
				(*usb_midi_handleRealTimeSystem)(0xFC);
   17c70:	4798      	blx	r3
   17c72:	e7ed      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleContinue) {
   17c74:	4b43      	ldr	r3, [pc, #268]	; (17d84 <usb_midi_read+0x2cc>)
   17c76:	681b      	ldr	r3, [r3, #0]
   17c78:	2b00      	cmp	r3, #0
   17c7a:	d1e6      	bne.n	17c4a <usb_midi_read+0x192>
			} else if (usb_midi_handleRealTimeSystem) {
   17c7c:	4b40      	ldr	r3, [pc, #256]	; (17d80 <usb_midi_read+0x2c8>)
   17c7e:	681b      	ldr	r3, [r3, #0]
   17c80:	b1cb      	cbz	r3, 17cb6 <usb_midi_read+0x1fe>
				(*usb_midi_handleRealTimeSystem)(0xFB);
   17c82:	20fb      	movs	r0, #251	; 0xfb
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17c84:	f3c4 4507 	ubfx	r5, r4, #16, #8
				(*usb_midi_handleRealTimeSystem)(0xFB);
   17c88:	4798      	blx	r3
   17c8a:	e7e1      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleActiveSensing) {
   17c8c:	4b3e      	ldr	r3, [pc, #248]	; (17d88 <usb_midi_read+0x2d0>)
   17c8e:	681b      	ldr	r3, [r3, #0]
   17c90:	2b00      	cmp	r3, #0
   17c92:	d1da      	bne.n	17c4a <usb_midi_read+0x192>
			} else if (usb_midi_handleRealTimeSystem) {
   17c94:	4b3a      	ldr	r3, [pc, #232]	; (17d80 <usb_midi_read+0x2c8>)
   17c96:	681b      	ldr	r3, [r3, #0]
   17c98:	b16b      	cbz	r3, 17cb6 <usb_midi_read+0x1fe>
				(*usb_midi_handleRealTimeSystem)(0xFE);
   17c9a:	20fe      	movs	r0, #254	; 0xfe
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17c9c:	f3c4 4507 	ubfx	r5, r4, #16, #8
				(*usb_midi_handleRealTimeSystem)(0xFE);
   17ca0:	4798      	blx	r3
   17ca2:	e7d5      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleSystemReset) {
   17ca4:	4b39      	ldr	r3, [pc, #228]	; (17d8c <usb_midi_read+0x2d4>)
   17ca6:	681b      	ldr	r3, [r3, #0]
   17ca8:	2b00      	cmp	r3, #0
   17caa:	d1ce      	bne.n	17c4a <usb_midi_read+0x192>
			} else if (usb_midi_handleRealTimeSystem) {
   17cac:	4b34      	ldr	r3, [pc, #208]	; (17d80 <usb_midi_read+0x2c8>)
   17cae:	681b      	ldr	r3, [r3, #0]
   17cb0:	b10b      	cbz	r3, 17cb6 <usb_midi_read+0x1fe>
				(*usb_midi_handleRealTimeSystem)(0xFF);
   17cb2:	20ff      	movs	r0, #255	; 0xff
   17cb4:	4798      	blx	r3
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17cb6:	f3c4 4507 	ubfx	r5, r4, #16, #8
   17cba:	e7c9      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleTimeCodeQuarterFrame) {
   17cbc:	4b34      	ldr	r3, [pc, #208]	; (17d90 <usb_midi_read+0x2d8>)
				(*usb_midi_handleTimeCodeQuarterFrame)(n >> 16);
   17cbe:	f3c4 4507 	ubfx	r5, r4, #16, #8
			if (usb_midi_handleTimeCodeQuarterFrame) {
   17cc2:	681b      	ldr	r3, [r3, #0]
   17cc4:	2b00      	cmp	r3, #0
   17cc6:	d0c3      	beq.n	17c50 <usb_midi_read+0x198>
				(*usb_midi_handleSongSelect)(n >> 16);
   17cc8:	4628      	mov	r0, r5
   17cca:	4798      	blx	r3
   17ccc:	e7c0      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleSongPosition) {
   17cce:	4b31      	ldr	r3, [pc, #196]	; (17d94 <usb_midi_read+0x2dc>)
   17cd0:	681a      	ldr	r2, [r3, #0]
   17cd2:	2a00      	cmp	r2, #0
   17cd4:	d0ef      	beq.n	17cb6 <usb_midi_read+0x1fe>
				  ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80));
   17cd6:	0c63      	lsrs	r3, r4, #17
   17cd8:	f3c4 4006 	ubfx	r0, r4, #16, #7
   17cdc:	0c25      	lsrs	r5, r4, #16
   17cde:	f403 537e 	and.w	r3, r3, #16256	; 0x3f80
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17ce2:	b2ed      	uxtb	r5, r5
				(*usb_midi_handleSongPosition)(
   17ce4:	4318      	orrs	r0, r3
   17ce6:	4790      	blx	r2
   17ce8:	e7b2      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleSongSelect) {
   17cea:	4b2b      	ldr	r3, [pc, #172]	; (17d98 <usb_midi_read+0x2e0>)
				(*usb_midi_handleSongSelect)(n >> 16);
   17cec:	f3c4 4507 	ubfx	r5, r4, #16, #8
			if (usb_midi_handleSongSelect) {
   17cf0:	681b      	ldr	r3, [r3, #0]
   17cf2:	2b00      	cmp	r3, #0
   17cf4:	d1e8      	bne.n	17cc8 <usb_midi_read+0x210>
   17cf6:	e7ab      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleTuneRequest) {
   17cf8:	4b28      	ldr	r3, [pc, #160]	; (17d9c <usb_midi_read+0x2e4>)
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17cfa:	f3c4 4507 	ubfx	r5, r4, #16, #8
			if (usb_midi_handleTuneRequest) {
   17cfe:	681b      	ldr	r3, [r3, #0]
   17d00:	2b00      	cmp	r3, #0
   17d02:	d1a4      	bne.n	17c4e <usb_midi_read+0x196>
   17d04:	e7a4      	b.n	17c50 <usb_midi_read+0x198>
			if (usb_midi_handleClock) {
   17d06:	4b26      	ldr	r3, [pc, #152]	; (17da0 <usb_midi_read+0x2e8>)
   17d08:	681b      	ldr	r3, [r3, #0]
   17d0a:	2b00      	cmp	r3, #0
   17d0c:	d19d      	bne.n	17c4a <usb_midi_read+0x192>
			} else if (usb_midi_handleRealTimeSystem) {
   17d0e:	4b1c      	ldr	r3, [pc, #112]	; (17d80 <usb_midi_read+0x2c8>)
   17d10:	681b      	ldr	r3, [r3, #0]
   17d12:	2b00      	cmp	r3, #0
   17d14:	d0cf      	beq.n	17cb6 <usb_midi_read+0x1fe>
				(*usb_midi_handleRealTimeSystem)(0xF8);
   17d16:	20f8      	movs	r0, #248	; 0xf8
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17d18:	f3c4 4507 	ubfx	r5, r4, #16, #8
				(*usb_midi_handleRealTimeSystem)(0xF8);
   17d1c:	4798      	blx	r3
   17d1e:	e797      	b.n	17c50 <usb_midi_read+0x198>
		if (type1 == 0x0D && type2 == 0x0D) {
   17d20:	2d0d      	cmp	r5, #13
   17d22:	d162      	bne.n	17dea <usb_midi_read+0x332>
   17d24:	2b0d      	cmp	r3, #13
   17d26:	d160      	bne.n	17dea <usb_midi_read+0x332>
			if (usb_midi_handleAfterTouch)
   17d28:	4b1e      	ldr	r3, [pc, #120]	; (17da4 <usb_midi_read+0x2ec>)
			usb_midi_msg_type = 0xD0;		// 0xD0 = usbMIDI.AfterTouchChannel
   17d2a:	21d0      	movs	r1, #208	; 0xd0
   17d2c:	4a0a      	ldr	r2, [pc, #40]	; (17d58 <usb_midi_read+0x2a0>)
   17d2e:	e77b      	b.n	17c28 <usb_midi_read+0x170>
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   17d30:	2180      	movs	r1, #128	; 0x80
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17d32:	b2f6      	uxtb	r6, r6
   17d34:	f3c4 4507 	ubfx	r5, r4, #16, #8
				usb_midi_msg_type = 0x80;	// 0x80 = usbMIDI.NoteOff
   17d38:	7019      	strb	r1, [r3, #0]
				if (usb_midi_handleNoteOff)
   17d3a:	4b06      	ldr	r3, [pc, #24]	; (17d54 <usb_midi_read+0x29c>)
   17d3c:	681b      	ldr	r3, [r3, #0]
   17d3e:	2b00      	cmp	r3, #0
   17d40:	d079      	beq.n	17e36 <usb_midi_read+0x37e>
					(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17d42:	4629      	mov	r1, r5
   17d44:	4630      	mov	r0, r6
   17d46:	4614      	mov	r4, r2
   17d48:	4798      	blx	r3
   17d4a:	e729      	b.n	17ba0 <usb_midi_read+0xe8>
   17d4c:	2000c965 	.word	0x2000c965
   17d50:	2000c940 	.word	0x2000c940
   17d54:	2000c55c 	.word	0x2000c55c
   17d58:	2000c969 	.word	0x2000c969
   17d5c:	2000c966 	.word	0x2000c966
   17d60:	2000c967 	.word	0x2000c967
   17d64:	2000c968 	.word	0x2000c968
   17d68:	2000c560 	.word	0x2000c560
   17d6c:	2000c594 	.word	0x2000c594
   17d70:	2000c558 	.word	0x2000c558
   17d74:	2000c568 	.word	0x2000c568
   17d78:	2000c578 	.word	0x2000c578
   17d7c:	2000c57c 	.word	0x2000c57c
   17d80:	2000c56c 	.word	0x2000c56c
   17d84:	2000c554 	.word	0x2000c554
   17d88:	2000c548 	.word	0x2000c548
   17d8c:	2000c588 	.word	0x2000c588
   17d90:	2000c58c 	.word	0x2000c58c
   17d94:	2000c570 	.word	0x2000c570
   17d98:	2000c574 	.word	0x2000c574
   17d9c:	2000c590 	.word	0x2000c590
   17da0:	2000c550 	.word	0x2000c550
   17da4:	2000c54c 	.word	0x2000c54c
		sysex_byte(b1);
   17da8:	f7ff fcfc 	bl	177a4 <sysex_byte>
		if (type1 >= 0x06) sysex_byte(n >> 16);
   17dac:	2d05      	cmp	r5, #5
   17dae:	d008      	beq.n	17dc2 <usb_midi_read+0x30a>
   17db0:	f3c4 4007 	ubfx	r0, r4, #16, #8
   17db4:	f7ff fcf6 	bl	177a4 <sysex_byte>
		if (type1 == 0x07) sysex_byte(n >> 24);
   17db8:	2d07      	cmp	r5, #7
   17dba:	d102      	bne.n	17dc2 <usb_midi_read+0x30a>
   17dbc:	0e20      	lsrs	r0, r4, #24
   17dbe:	f7ff fcf1 	bl	177a4 <sysex_byte>
		uint16_t len = usb_midi_msg_sysex_len;
   17dc2:	4b2a      	ldr	r3, [pc, #168]	; (17e6c <usb_midi_read+0x3b4>)
		usb_midi_msg_data1 = len;
   17dc4:	482a      	ldr	r0, [pc, #168]	; (17e70 <usb_midi_read+0x3b8>)
		uint16_t len = usb_midi_msg_sysex_len;
   17dc6:	8819      	ldrh	r1, [r3, #0]
		usb_midi_msg_data2 = len >> 8;
   17dc8:	4a2a      	ldr	r2, [pc, #168]	; (17e74 <usb_midi_read+0x3bc>)
		usb_midi_msg_data1 = len;
   17dca:	7001      	strb	r1, [r0, #0]
		usb_midi_msg_data2 = len >> 8;
   17dcc:	0a08      	lsrs	r0, r1, #8
		if (usb_midi_handleSysExPartial) {
   17dce:	4c2a      	ldr	r4, [pc, #168]	; (17e78 <usb_midi_read+0x3c0>)
		usb_midi_msg_data2 = len >> 8;
   17dd0:	7010      	strb	r0, [r2, #0]
		usb_midi_msg_sysex_len = 0;
   17dd2:	2000      	movs	r0, #0
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   17dd4:	4a29      	ldr	r2, [pc, #164]	; (17e7c <usb_midi_read+0x3c4>)
		usb_midi_msg_sysex_len = 0;
   17dd6:	8018      	strh	r0, [r3, #0]
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   17dd8:	23f0      	movs	r3, #240	; 0xf0
		if (usb_midi_handleSysExPartial) {
   17dda:	6824      	ldr	r4, [r4, #0]
		usb_midi_msg_type = 0xF0;			// 0xF0 = usbMIDI.SystemExclusive
   17ddc:	7013      	strb	r3, [r2, #0]
		if (usb_midi_handleSysExPartial) {
   17dde:	b364      	cbz	r4, 17e3a <usb_midi_read+0x382>
			(*usb_midi_handleSysExPartial)(usb_midi_msg_sysex, len, 1);
   17de0:	4827      	ldr	r0, [pc, #156]	; (17e80 <usb_midi_read+0x3c8>)
   17de2:	2201      	movs	r2, #1
   17de4:	47a0      	blx	r4
		return 1;
   17de6:	2001      	movs	r0, #1
   17de8:	e681      	b.n	17aee <usb_midi_read+0x36>
		if (type1 == 0x0E && type2 == 0x0E) {
   17dea:	2d0e      	cmp	r5, #14
   17dec:	f47f ae7e 	bne.w	17aec <usb_midi_read+0x34>
   17df0:	2b0e      	cmp	r3, #14
   17df2:	f47f ae7b 	bne.w	17aec <usb_midi_read+0x34>
			if (usb_midi_handlePitchChange) {
   17df6:	4b23      	ldr	r3, [pc, #140]	; (17e84 <usb_midi_read+0x3cc>)
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   17df8:	21e0      	movs	r1, #224	; 0xe0
   17dfa:	4a20      	ldr	r2, [pc, #128]	; (17e7c <usb_midi_read+0x3c4>)
			if (usb_midi_handlePitchChange) {
   17dfc:	681b      	ldr	r3, [r3, #0]
			usb_midi_msg_type = 0xE0;		// 0xE0 = usbMIDI.PitchBend
   17dfe:	7011      	strb	r1, [r2, #0]
			if (usb_midi_handlePitchChange) {
   17e00:	b363      	cbz	r3, 17e5c <usb_midi_read+0x3a4>
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   17e02:	0c61      	lsrs	r1, r4, #17
   17e04:	f3c4 4206 	ubfx	r2, r4, #16, #7
				(*usb_midi_handlePitchChange)(ch, value);
   17e08:	b2f6      	uxtb	r6, r6
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   17e0a:	f401 517e 	and.w	r1, r1, #16256	; 0x3f80
   17e0e:	0c25      	lsrs	r5, r4, #16
				(*usb_midi_handlePitchChange)(ch, value);
   17e10:	4630      	mov	r0, r6
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17e12:	0e24      	lsrs	r4, r4, #24
				int value = ((n >> 16) & 0x7F) | ((n >> 17) & 0x3F80);
   17e14:	4311      	orrs	r1, r2
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17e16:	b2ed      	uxtb	r5, r5
				(*usb_midi_handlePitchChange)(ch, value);
   17e18:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
   17e1c:	4798      	blx	r3
   17e1e:	e6bf      	b.n	17ba0 <usb_midi_read+0xe8>
		sysex_byte(n >> 8);
   17e20:	f7ff fcc0 	bl	177a4 <sysex_byte>
		sysex_byte(n >> 16);
   17e24:	f3c4 4007 	ubfx	r0, r4, #16, #8
   17e28:	f7ff fcbc 	bl	177a4 <sysex_byte>
		sysex_byte(n >> 24);
   17e2c:	0e20      	lsrs	r0, r4, #24
   17e2e:	f7ff fcb9 	bl	177a4 <sysex_byte>
		return 0;
   17e32:	2000      	movs	r0, #0
   17e34:	e65b      	b.n	17aee <usb_midi_read+0x36>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17e36:	461c      	mov	r4, r3
   17e38:	e6b2      	b.n	17ba0 <usb_midi_read+0xe8>
		} else if (usb_midi_handleSysExComplete) {
   17e3a:	4b13      	ldr	r3, [pc, #76]	; (17e88 <usb_midi_read+0x3d0>)
   17e3c:	681b      	ldr	r3, [r3, #0]
   17e3e:	b193      	cbz	r3, 17e66 <usb_midi_read+0x3ae>
			(*usb_midi_handleSysExComplete)(usb_midi_msg_sysex, len);
   17e40:	480f      	ldr	r0, [pc, #60]	; (17e80 <usb_midi_read+0x3c8>)
   17e42:	4798      	blx	r3
		return 1;
   17e44:	2001      	movs	r0, #1
   17e46:	e652      	b.n	17aee <usb_midi_read+0x36>
			} else if (usb_midi_handleRealTimeSystem) {
   17e48:	4b10      	ldr	r3, [pc, #64]	; (17e8c <usb_midi_read+0x3d4>)
   17e4a:	681b      	ldr	r3, [r3, #0]
   17e4c:	2b00      	cmp	r3, #0
   17e4e:	f43f af32 	beq.w	17cb6 <usb_midi_read+0x1fe>
				(*usb_midi_handleRealTimeSystem)(0xFA);
   17e52:	20fa      	movs	r0, #250	; 0xfa
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17e54:	f3c4 4507 	ubfx	r5, r4, #16, #8
				(*usb_midi_handleRealTimeSystem)(0xFA);
   17e58:	4798      	blx	r3
   17e5a:	e6f9      	b.n	17c50 <usb_midi_read+0x198>
				(*usb_midi_handleNoteOff)(ch, (n >> 16), (n >> 24));
   17e5c:	f3c4 4507 	ubfx	r5, r4, #16, #8
   17e60:	b2f6      	uxtb	r6, r6
   17e62:	0e24      	lsrs	r4, r4, #24
   17e64:	e69c      	b.n	17ba0 <usb_midi_read+0xe8>
		return 1;
   17e66:	2001      	movs	r0, #1
   17e68:	e641      	b.n	17aee <usb_midi_read+0x36>
   17e6a:	bf00      	nop
   17e6c:	2000c940 	.word	0x2000c940
   17e70:	2000c967 	.word	0x2000c967
   17e74:	2000c968 	.word	0x2000c968
   17e78:	2000c584 	.word	0x2000c584
   17e7c:	2000c969 	.word	0x2000c969
   17e80:	2000c598 	.word	0x2000c598
   17e84:	2000c564 	.word	0x2000c564
   17e88:	2000c580 	.word	0x2000c580
   17e8c:	2000c56c 	.word	0x2000c56c

00017e90 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
   17e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   17e92:	4c14      	ldr	r4, [pc, #80]	; (17ee4 <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17e94:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   17e98:	4e13      	ldr	r6, [pc, #76]	; (17ee8 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17e9a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
   17e9e:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   17ea2:	4f12      	ldr	r7, [pc, #72]	; (17eec <rx_queue_transfer+0x5c>)
   17ea4:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
   17ea8:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
   17eaa:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
   17eae:	4621      	mov	r1, r4
   17eb0:	883a      	ldrh	r2, [r7, #0]
   17eb2:	4630      	mov	r0, r6
   17eb4:	f7ff fbfe 	bl	176b4 <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
   17eb8:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
   17eba:	4423      	add	r3, r4
	asm("dsb");
   17ebc:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
   17ec0:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
   17ec4:	3420      	adds	r4, #32
	} while (location < end_addr);
   17ec6:	42a3      	cmp	r3, r4
   17ec8:	d8fa      	bhi.n	17ec0 <rx_queue_transfer+0x30>
	asm("dsb");
   17eca:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17ece:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
   17ed2:	2003      	movs	r0, #3
   17ed4:	4631      	mov	r1, r6
   17ed6:	f7ff fc19 	bl	1770c <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
   17eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
   17ede:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
   17ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17ee4:	202028c0 	.word	0x202028c0
   17ee8:	200043e0 	.word	0x200043e0
   17eec:	2000c936 	.word	0x2000c936

00017ef0 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17ef0:	4b24      	ldr	r3, [pc, #144]	; (17f84 <rx_event+0x94>)
{
   17ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17ef6:	881c      	ldrh	r4, [r3, #0]
   17ef8:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
   17efa:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
   17efc:	f3c3 430e 	ubfx	r3, r3, #16, #15
   17f00:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
   17f02:	2c00      	cmp	r4, #0
   17f04:	dd24      	ble.n	17f50 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
   17f06:	4920      	ldr	r1, [pc, #128]	; (17f88 <rx_event+0x98>)
		if (head != rx_tail) {
   17f08:	4820      	ldr	r0, [pc, #128]	; (17f8c <rx_event+0x9c>)
		uint32_t head = rx_head;
   17f0a:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
   17f0c:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
   17f0e:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
   17f10:	4e1f      	ldr	r6, [pc, #124]	; (17f90 <rx_event+0xa0>)
		if (head != rx_tail) {
   17f12:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
   17f14:	481f      	ldr	r0, [pc, #124]	; (17f94 <rx_event+0xa4>)
		if (head != rx_tail) {
   17f16:	d007      	beq.n	17f28 <rx_event+0x38>
			uint32_t ii = rx_list[head];
   17f18:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
   17f1c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
   17f20:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
   17f24:	4294      	cmp	r4, r2
   17f26:	d918      	bls.n	17f5a <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
   17f28:	3301      	adds	r3, #1
		rx_index[i] = 0;
   17f2a:	2200      	movs	r2, #0
		rx_count[i] = len;
   17f2c:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
   17f30:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
   17f32:	4e19      	ldr	r6, [pc, #100]	; (17f98 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
   17f34:	bf88      	it	hi
   17f36:	4613      	movhi	r3, r2
		rx_index[i] = 0;
   17f38:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
   17f3c:	bf98      	it	ls
   17f3e:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
   17f40:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
   17f42:	4b16      	ldr	r3, [pc, #88]	; (17f9c <rx_event+0xac>)
		rx_head = head;
   17f44:	700a      	strb	r2, [r1, #0]
		rx_available += len;
   17f46:	681a      	ldr	r2, [r3, #0]
   17f48:	4414      	add	r4, r2
   17f4a:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
   17f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
   17f50:	4628      	mov	r0, r5
}
   17f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
   17f56:	f7ff bf9b 	b.w	17e90 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   17f5a:	eb07 2048 	add.w	r0, r7, r8, lsl #9
   17f5e:	4910      	ldr	r1, [pc, #64]	; (17fa0 <rx_event+0xb0>)
   17f60:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
   17f62:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
   17f64:	4408      	add	r0, r1
   17f66:	eb01 2145 	add.w	r1, r1, r5, lsl #9
   17f6a:	f7fe fb17 	bl	1659c <memcpy>
				rx_available += len;
   17f6e:	4a0b      	ldr	r2, [pc, #44]	; (17f9c <rx_event+0xac>)
				rx_queue_transfer(i);
   17f70:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
   17f72:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
   17f76:	6813      	ldr	r3, [r2, #0]
   17f78:	4423      	add	r3, r4
}
   17f7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
   17f7e:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
   17f80:	f7ff bf86 	b.w	17e90 <rx_queue_transfer>
   17f84:	2000c936 	.word	0x2000c936
   17f88:	2000c957 	.word	0x2000c957
   17f8c:	2000c959 	.word	0x2000c959
   17f90:	2000b9b8 	.word	0x2000b9b8
   17f94:	2000b9ec 	.word	0x2000b9ec
   17f98:	2000b9d4 	.word	0x2000b9d4
   17f9c:	2000b9a8 	.word	0x2000b9a8
   17fa0:	202028c0 	.word	0x202028c0

00017fa4 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
   17fa4:	4b1d      	ldr	r3, [pc, #116]	; (1801c <usb_serial_flush_callback+0x78>)
   17fa6:	781a      	ldrb	r2, [r3, #0]
   17fa8:	2a00      	cmp	r2, #0
   17faa:	d136      	bne.n	1801a <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
   17fac:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   17fb0:	4a1b      	ldr	r2, [pc, #108]	; (18020 <usb_serial_flush_callback+0x7c>)
   17fb2:	7812      	ldrb	r2, [r2, #0]
   17fb4:	b38a      	cbz	r2, 1801a <usb_serial_flush_callback+0x76>
{
   17fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
   17fba:	4d1a      	ldr	r5, [pc, #104]	; (18024 <usb_serial_flush_callback+0x80>)
   17fbc:	882a      	ldrh	r2, [r5, #0]
   17fbe:	b352      	cbz	r2, 18016 <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
   17fc0:	4e19      	ldr	r6, [pc, #100]	; (18028 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
   17fc2:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   17fc6:	4f19      	ldr	r7, [pc, #100]	; (1802c <usb_serial_flush_callback+0x88>)
   17fc8:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17fca:	4c19      	ldr	r4, [pc, #100]	; (18030 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   17fcc:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   17fd0:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   17fd4:	4642      	mov	r2, r8
   17fd6:	4638      	mov	r0, r7
   17fd8:	4621      	mov	r1, r4
   17fda:	f7ff fb6b 	bl	176b4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   17fde:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
   17fe2:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   17fe6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   17fea:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   17fee:	3420      	adds	r4, #32
	} while (location < end_addr);
   17ff0:	42a2      	cmp	r2, r4
   17ff2:	d8fa      	bhi.n	17fea <usb_serial_flush_callback+0x46>
	asm("dsb");
   17ff4:	f3bf 8f4f 	dsb	sy
	asm("isb");
   17ff8:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   17ffc:	2003      	movs	r0, #3
   17ffe:	4639      	mov	r1, r7
   18000:	f7ff fb70 	bl	176e4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   18004:	7833      	ldrb	r3, [r6, #0]
   18006:	3301      	adds	r3, #1
   18008:	b2db      	uxtb	r3, r3
   1800a:	2b03      	cmp	r3, #3
   1800c:	bf88      	it	hi
   1800e:	2300      	movhi	r3, #0
   18010:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   18012:	2300      	movs	r3, #0
   18014:	802b      	strh	r3, [r5, #0]
}
   18016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1801a:	4770      	bx	lr
   1801c:	2000c961 	.word	0x2000c961
   18020:	2000c963 	.word	0x2000c963
   18024:	2000c93a 	.word	0x2000c93a
   18028:	2000c95f 	.word	0x2000c95f
   1802c:	20004560 	.word	0x20004560
   18030:	202038c0 	.word	0x202038c0

00018034 <usb_serial_write.part.0>:
int usb_serial_write(const void *buffer, uint32_t size)
   18034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18038:	b085      	sub	sp, #20
	while (size > 0) {
   1803a:	e9cd 1001 	strd	r1, r0, [sp, #4]
   1803e:	2900      	cmp	r1, #0
   18040:	f000 80bf 	beq.w	181c2 <usb_serial_write.part.0+0x18e>
	uint32_t sent=0;
   18044:	2300      	movs	r3, #0
   18046:	4c60      	ldr	r4, [pc, #384]	; (181c8 <usb_serial_write.part.0+0x194>)
   18048:	f8df 8198 	ldr.w	r8, [pc, #408]	; 181e4 <usb_serial_write.part.0+0x1b0>
   1804c:	f8df a198 	ldr.w	sl, [pc, #408]	; 181e8 <usb_serial_write.part.0+0x1b4>
				wait_begin_at = systick_millis_count;
   18050:	4f5e      	ldr	r7, [pc, #376]	; (181cc <usb_serial_write.part.0+0x198>)
	uint32_t sent=0;
   18052:	9300      	str	r3, [sp, #0]
		tx_noautoflush = 1;
   18054:	2301      	movs	r3, #1
		transfer_t *xfer = tx_transfer + tx_head;
   18056:	4a5e      	ldr	r2, [pc, #376]	; (181d0 <usb_serial_write.part.0+0x19c>)
		tx_noautoflush = 1;
   18058:	7023      	strb	r3, [r4, #0]
		transfer_t *xfer = tx_transfer + tx_head;
   1805a:	4b5e      	ldr	r3, [pc, #376]	; (181d4 <usb_serial_write.part.0+0x1a0>)
   1805c:	7819      	ldrb	r1, [r3, #0]
		while (!tx_available) {
   1805e:	f8b8 3000 	ldrh.w	r3, [r8]
		transfer_t *xfer = tx_transfer + tx_head;
   18062:	eb02 1941 	add.w	r9, r2, r1, lsl #5
		while (!tx_available) {
   18066:	2b00      	cmp	r3, #0
   18068:	f040 80a7 	bne.w	181ba <usb_serial_write.part.0+0x186>
		uint32_t wait_begin_at=0;
   1806c:	461e      	mov	r6, r3
		int waiting=0;
   1806e:	461d      	mov	r5, r3
			tx_noautoflush = 0;
   18070:	469b      	mov	fp, r3
			uint32_t status = usb_transfer_status(xfer);
   18072:	4648      	mov	r0, r9
   18074:	f7ff fb58 	bl	17728 <usb_transfer_status>
			if (!(status & 0x80)) {
   18078:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   1807c:	f000 808c 	beq.w	18198 <usb_serial_write.part.0+0x164>
			asm("dsb" ::: "memory");
   18080:	f3bf 8f4f 	dsb	sy
			if (transmit_previous_timeout) return sent;
   18084:	f89a 3000 	ldrb.w	r3, [sl]
			tx_noautoflush = 0;
   18088:	f884 b000 	strb.w	fp, [r4]
			if (!waiting) {
   1808c:	b905      	cbnz	r5, 18090 <usb_serial_write.part.0+0x5c>
				wait_begin_at = systick_millis_count;
   1808e:	683e      	ldr	r6, [r7, #0]
			if (transmit_previous_timeout) return sent;
   18090:	2b00      	cmp	r3, #0
   18092:	d17d      	bne.n	18190 <usb_serial_write.part.0+0x15c>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
   18094:	683b      	ldr	r3, [r7, #0]
   18096:	1b9b      	subs	r3, r3, r6
   18098:	2b78      	cmp	r3, #120	; 0x78
   1809a:	f200 8087 	bhi.w	181ac <usb_serial_write.part.0+0x178>
			if (!usb_configuration) return sent;
   1809e:	4b4e      	ldr	r3, [pc, #312]	; (181d8 <usb_serial_write.part.0+0x1a4>)
   180a0:	781b      	ldrb	r3, [r3, #0]
   180a2:	2b00      	cmp	r3, #0
   180a4:	d074      	beq.n	18190 <usb_serial_write.part.0+0x15c>
			yield();
   180a6:	f000 fa93 	bl	185d0 <yield>
			tx_noautoflush = 1;
   180aa:	2201      	movs	r2, #1
		while (!tx_available) {
   180ac:	f8b8 3000 	ldrh.w	r3, [r8]
   180b0:	4615      	mov	r5, r2
			tx_noautoflush = 1;
   180b2:	7022      	strb	r2, [r4, #0]
		while (!tx_available) {
   180b4:	2b00      	cmp	r3, #0
   180b6:	d0dc      	beq.n	18072 <usb_serial_write.part.0+0x3e>
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   180b8:	4a46      	ldr	r2, [pc, #280]	; (181d4 <usb_serial_write.part.0+0x1a0>)
   180ba:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   180be:	7811      	ldrb	r1, [r2, #0]
   180c0:	461a      	mov	r2, r3
   180c2:	eb00 20c1 	add.w	r0, r0, r1, lsl #11
   180c6:	4d45      	ldr	r5, [pc, #276]	; (181dc <usb_serial_write.part.0+0x1a8>)
   180c8:	02c9      	lsls	r1, r1, #11
   180ca:	4428      	add	r0, r5
		if (size >= tx_available) {
   180cc:	9d01      	ldr	r5, [sp, #4]
   180ce:	4295      	cmp	r5, r2
   180d0:	d217      	bcs.n	18102 <usb_serial_write.part.0+0xce>
			memcpy(txdata, data, size);
   180d2:	9303      	str	r3, [sp, #12]
   180d4:	e9dd 5101 	ldrd	r5, r1, [sp, #4]
   180d8:	462a      	mov	r2, r5
   180da:	f7fe fa5f 	bl	1659c <memcpy>
			tx_available -= size;
   180de:	9b03      	ldr	r3, [sp, #12]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   180e0:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
			tx_available -= size;
   180e4:	1b5b      	subs	r3, r3, r5
   180e6:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
   180ea:	4b3d      	ldr	r3, [pc, #244]	; (181e0 <usb_serial_write.part.0+0x1ac>)
   180ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		asm("dsb" ::: "memory");
   180f0:	f3bf 8f4f 	dsb	sy
			sent += size;
   180f4:	9800      	ldr	r0, [sp, #0]
		tx_noautoflush = 0;
   180f6:	2300      	movs	r3, #0
			sent += size;
   180f8:	4428      	add	r0, r5
		tx_noautoflush = 0;
   180fa:	7023      	strb	r3, [r4, #0]
}
   180fc:	b005      	add	sp, #20
   180fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   18102:	4b36      	ldr	r3, [pc, #216]	; (181dc <usb_serial_write.part.0+0x1a8>)
   18104:	18cd      	adds	r5, r1, r3
			memcpy(txdata, data, tx_available);
   18106:	9902      	ldr	r1, [sp, #8]
   18108:	f7fe fa48 	bl	1659c <memcpy>
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
   1810c:	2300      	movs	r3, #0
   1810e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18112:	4629      	mov	r1, r5
   18114:	4648      	mov	r0, r9
   18116:	f7ff facd 	bl	176b4 <usb_prepare_transfer>
	asm("dsb");
   1811a:	f3bf 8f4f 	dsb	sy
   1811e:	f105 0220 	add.w	r2, r5, #32
	uint32_t end_addr = (uint32_t)addr + size;
   18122:	f505 6300 	add.w	r3, r5, #2048	; 0x800
   18126:	4293      	cmp	r3, r2
   18128:	bf34      	ite	cc
   1812a:	2301      	movcc	r3, #1
   1812c:	2340      	movcs	r3, #64	; 0x40
		SCB_CACHE_DCCIMVAC = location;
   1812e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
   18132:	eb05 1343 	add.w	r3, r5, r3, lsl #5
   18136:	f8c2 5f70 	str.w	r5, [r2, #3952]	; 0xf70
		location += 32;
   1813a:	3520      	adds	r5, #32
	} while (location < end_addr);
   1813c:	42ab      	cmp	r3, r5
   1813e:	d1fa      	bne.n	18136 <usb_serial_write.part.0+0x102>
	asm("dsb");
   18140:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18144:	f3bf 8f6f 	isb	sy
			usb_transmit(CDC_TX_ENDPOINT, xfer);
   18148:	2003      	movs	r0, #3
   1814a:	4649      	mov	r1, r9
   1814c:	f7ff faca 	bl	176e4 <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
   18150:	4a20      	ldr	r2, [pc, #128]	; (181d4 <usb_serial_write.part.0+0x1a0>)
   18152:	7813      	ldrb	r3, [r2, #0]
   18154:	3301      	adds	r3, #1
   18156:	b2db      	uxtb	r3, r3
   18158:	2b03      	cmp	r3, #3
   1815a:	bf84      	itt	hi
   1815c:	2300      	movhi	r3, #0
   1815e:	4a1d      	ldrhi	r2, [pc, #116]	; (181d4 <usb_serial_write.part.0+0x1a0>)
   18160:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
   18162:	f8b8 3000 	ldrh.w	r3, [r8]
   18166:	9a01      	ldr	r2, [sp, #4]
   18168:	1ad1      	subs	r1, r2, r3
			sent += tx_available;
   1816a:	9a00      	ldr	r2, [sp, #0]
   1816c:	441a      	add	r2, r3
			size -= tx_available;
   1816e:	9101      	str	r1, [sp, #4]
			sent += tx_available;
   18170:	9200      	str	r2, [sp, #0]
			data += tx_available;
   18172:	9a02      	ldr	r2, [sp, #8]
   18174:	441a      	add	r2, r3
			tx_available = 0;
   18176:	2300      	movs	r3, #0
			data += tx_available;
   18178:	9202      	str	r2, [sp, #8]
	USB1_GPTIMER0CTRL = 0;
   1817a:	4a19      	ldr	r2, [pc, #100]	; (181e0 <usb_serial_write.part.0+0x1ac>)
			tx_available = 0;
   1817c:	f8a8 3000 	strh.w	r3, [r8]
	USB1_GPTIMER0CTRL = 0;
   18180:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
		asm("dsb" ::: "memory");
   18184:	f3bf 8f4f 	dsb	sy
		tx_noautoflush = 0;
   18188:	7023      	strb	r3, [r4, #0]
	while (size > 0) {
   1818a:	2900      	cmp	r1, #0
   1818c:	f47f af62 	bne.w	18054 <usb_serial_write.part.0+0x20>
	return sent;
   18190:	9800      	ldr	r0, [sp, #0]
}
   18192:	b005      	add	sp, #20
   18194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tx_available = TX_SIZE;
   18198:	f44f 6200 	mov.w	r2, #2048	; 0x800
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   1819c:	4b0d      	ldr	r3, [pc, #52]	; (181d4 <usb_serial_write.part.0+0x1a0>)
				transmit_previous_timeout = 0;
   1819e:	f88a 0000 	strb.w	r0, [sl]
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   181a2:	7819      	ldrb	r1, [r3, #0]
				break;
   181a4:	4613      	mov	r3, r2
				tx_available = TX_SIZE;
   181a6:	f8a8 2000 	strh.w	r2, [r8]
				break;
   181aa:	e78a      	b.n	180c2 <usb_serial_write.part.0+0x8e>
				transmit_previous_timeout = 1;
   181ac:	2301      	movs	r3, #1
				return sent;
   181ae:	9800      	ldr	r0, [sp, #0]
				transmit_previous_timeout = 1;
   181b0:	f88a 3000 	strb.w	r3, [sl]
}
   181b4:	b005      	add	sp, #20
   181b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
   181ba:	461a      	mov	r2, r3
   181bc:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
   181c0:	e77f      	b.n	180c2 <usb_serial_write.part.0+0x8e>
	while (size > 0) {
   181c2:	9801      	ldr	r0, [sp, #4]
	return sent;
   181c4:	e7e5      	b.n	18192 <usb_serial_write.part.0+0x15e>
   181c6:	bf00      	nop
   181c8:	2000c961 	.word	0x2000c961
   181cc:	2000bc24 	.word	0x2000bc24
   181d0:	20004560 	.word	0x20004560
   181d4:	2000c95f 	.word	0x2000c95f
   181d8:	2000c963 	.word	0x2000c963
   181dc:	202038c0 	.word	0x202038c0
   181e0:	402e0000 	.word	0x402e0000
   181e4:	2000c93a 	.word	0x2000c93a
   181e8:	2000c95d 	.word	0x2000c95d

000181ec <usb_serial_reset>:
}
   181ec:	4770      	bx	lr
   181ee:	bf00      	nop

000181f0 <usb_serial_configure>:
	if (usb_high_speed) {
   181f0:	4b2a      	ldr	r3, [pc, #168]	; (1829c <usb_serial_configure+0xac>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
   181f2:	2100      	movs	r1, #0
   181f4:	2280      	movs	r2, #128	; 0x80
   181f6:	482a      	ldr	r0, [pc, #168]	; (182a0 <usb_serial_configure+0xb0>)
{
   181f8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
   181fa:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
   181fc:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
   181fe:	4d29      	ldr	r5, [pc, #164]	; (182a4 <usb_serial_configure+0xb4>)
	if (usb_high_speed) {
   18200:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
   18202:	4e29      	ldr	r6, [pc, #164]	; (182a8 <usb_serial_configure+0xb8>)
	if (usb_high_speed) {
   18204:	bf0c      	ite	eq
   18206:	2340      	moveq	r3, #64	; 0x40
   18208:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
   1820c:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
   1820e:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
   18210:	f00a f966 	bl	224e0 <memset>
	tx_head = 0;
   18214:	4a25      	ldr	r2, [pc, #148]	; (182ac <usb_serial_configure+0xbc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
   18216:	4621      	mov	r1, r4
	tx_available = 0;
   18218:	4b25      	ldr	r3, [pc, #148]	; (182b0 <usb_serial_configure+0xc0>)
	tx_head = 0;
   1821a:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   1821c:	f44f 7280 	mov.w	r2, #256	; 0x100
   18220:	4824      	ldr	r0, [pc, #144]	; (182b4 <usb_serial_configure+0xc4>)
	tx_available = 0;
   18222:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
   18224:	f00a f95c 	bl	224e0 <memset>
	memset(rx_count, 0, sizeof(rx_count));
   18228:	4a23      	ldr	r2, [pc, #140]	; (182b8 <usb_serial_configure+0xc8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1822a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
   1822c:	4b23      	ldr	r3, [pc, #140]	; (182bc <usb_serial_configure+0xcc>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1822e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
   18230:	e9c2 4400 	strd	r4, r4, [r2]
   18234:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
   18238:	4a21      	ldr	r2, [pc, #132]	; (182c0 <usb_serial_configure+0xd0>)
	memset(rx_index, 0, sizeof(rx_index));
   1823a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
   1823e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
   18240:	4a20      	ldr	r2, [pc, #128]	; (182c4 <usb_serial_configure+0xd4>)
	memset(rx_index, 0, sizeof(rx_index));
   18242:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
   18246:	4b20      	ldr	r3, [pc, #128]	; (182c8 <usb_serial_configure+0xd8>)
   18248:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1824a:	4623      	mov	r3, r4
	rx_available = 0;
   1824c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
   1824e:	4622      	mov	r2, r4
   18250:	f7ff f9fe 	bl	17650 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
   18254:	4622      	mov	r2, r4
   18256:	8831      	ldrh	r1, [r6, #0]
   18258:	2003      	movs	r0, #3
   1825a:	4b1c      	ldr	r3, [pc, #112]	; (182cc <usb_serial_configure+0xdc>)
   1825c:	f7ff f9c6 	bl	175ec <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
   18260:	4623      	mov	r3, r4
   18262:	2201      	movs	r2, #1
   18264:	8829      	ldrh	r1, [r5, #0]
   18266:	2003      	movs	r0, #3
   18268:	f7ff f9f2 	bl	17650 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
   1826c:	4620      	mov	r0, r4
   1826e:	3401      	adds	r4, #1
   18270:	f7ff fe0e 	bl	17e90 <rx_queue_transfer>
   18274:	2c08      	cmp	r4, #8
   18276:	d1f9      	bne.n	1826c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
   18278:	4b15      	ldr	r3, [pc, #84]	; (182d0 <usb_serial_configure+0xe0>)
	USB1_GPTIMER0LD = microseconds - 1;
   1827a:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
   1827c:	4815      	ldr	r0, [pc, #84]	; (182d4 <usb_serial_configure+0xe4>)
	USB1_GPTIMER0CTRL = 0;
   1827e:	2100      	movs	r1, #0
	usb_timer0_callback = callback;
   18280:	4c15      	ldr	r4, [pc, #84]	; (182d8 <usb_serial_configure+0xe8>)
   18282:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
   18284:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
   18288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
   1828c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   18290:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
   18294:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
}
   18298:	bd70      	pop	{r4, r5, r6, pc}
   1829a:	bf00      	nop
   1829c:	2000c964 	.word	0x2000c964
   182a0:	20004560 	.word	0x20004560
   182a4:	2000c93e 	.word	0x2000c93e
   182a8:	2000c936 	.word	0x2000c936
   182ac:	2000c95f 	.word	0x2000c95f
   182b0:	2000c93a 	.word	0x2000c93a
   182b4:	200043e0 	.word	0x200043e0
   182b8:	2000b9b8 	.word	0x2000b9b8
   182bc:	2000b9d4 	.word	0x2000b9d4
   182c0:	2000c957 	.word	0x2000c957
   182c4:	2000b9a8 	.word	0x2000b9a8
   182c8:	2000c959 	.word	0x2000c959
   182cc:	00017ef1 	.word	0x00017ef1
   182d0:	402e0000 	.word	0x402e0000
   182d4:	2000c6bc 	.word	0x2000c6bc
   182d8:	00017fa5 	.word	0x00017fa5

000182dc <usb_serial_read>:
{
   182dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
   182e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   182e4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	uint32_t tail = rx_tail;
   182e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 183b4 <usb_serial_read+0xd8>
{
   182ec:	b083      	sub	sp, #12
	NVIC_DISABLE_IRQ(IRQ_USB1);
   182ee:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	while (count < size && tail != rx_head) {
   182f2:	468b      	mov	fp, r1
	uint32_t tail = rx_tail;
   182f4:	f89a 4000 	ldrb.w	r4, [sl]
	while (count < size && tail != rx_head) {
   182f8:	2900      	cmp	r1, #0
   182fa:	d04f      	beq.n	1839c <usb_serial_read+0xc0>
   182fc:	4680      	mov	r8, r0
   182fe:	b2e4      	uxtb	r4, r4
	uint32_t count=0;
   18300:	2700      	movs	r7, #0
		uint32_t avail = rx_count[i] - rx_index[i];
   18302:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 183b8 <usb_serial_read+0xdc>
	while (count < size && tail != rx_head) {
   18306:	4b26      	ldr	r3, [pc, #152]	; (183a0 <usb_serial_read+0xc4>)
		uint32_t len = size - count;
   18308:	ebab 0207 	sub.w	r2, fp, r7
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1830c:	4925      	ldr	r1, [pc, #148]	; (183a4 <usb_serial_read+0xc8>)
	while (count < size && tail != rx_head) {
   1830e:	781b      	ldrb	r3, [r3, #0]
   18310:	42a3      	cmp	r3, r4
		if (++tail > RX_NUM) tail = 0;
   18312:	f104 0401 	add.w	r4, r4, #1
	while (count < size && tail != rx_head) {
   18316:	d03f      	beq.n	18398 <usb_serial_read+0xbc>
		if (++tail > RX_NUM) tail = 0;
   18318:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
   1831a:	4b23      	ldr	r3, [pc, #140]	; (183a8 <usb_serial_read+0xcc>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1831c:	4640      	mov	r0, r8
		if (++tail > RX_NUM) tail = 0;
   1831e:	bf28      	it	cs
   18320:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
   18322:	5d1e      	ldrb	r6, [r3, r4]
		uint32_t avail = rx_count[i] - rx_index[i];
   18324:	f839 c016 	ldrh.w	ip, [r9, r6, lsl #1]
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   18328:	eb0c 2346 	add.w	r3, ip, r6, lsl #9
   1832c:	4419      	add	r1, r3
		uint32_t avail = rx_count[i] - rx_index[i];
   1832e:	4b1f      	ldr	r3, [pc, #124]	; (183ac <usb_serial_read+0xd0>)
   18330:	f833 5016 	ldrh.w	r5, [r3, r6, lsl #1]
   18334:	eba5 050c 	sub.w	r5, r5, ip
		if (avail > len) {
   18338:	42aa      	cmp	r2, r5
   1833a:	d21c      	bcs.n	18376 <usb_serial_read+0x9a>
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   1833c:	eb0c 2c46 	add.w	ip, ip, r6, lsl #9
   18340:	4918      	ldr	r1, [pc, #96]	; (183a4 <usb_serial_read+0xc8>)
			rx_available -= len;
   18342:	4c1b      	ldr	r4, [pc, #108]	; (183b0 <usb_serial_read+0xd4>)
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
   18344:	4461      	add	r1, ip
   18346:	9201      	str	r2, [sp, #4]
   18348:	f7fe f928 	bl	1659c <memcpy>
			rx_available -= len;
   1834c:	6821      	ldr	r1, [r4, #0]
			rx_index[i] += len;
   1834e:	f839 5016 	ldrh.w	r5, [r9, r6, lsl #1]
	return count;
   18352:	4658      	mov	r0, fp
			rx_index[i] += len;
   18354:	9a01      	ldr	r2, [sp, #4]
			rx_available -= len;
   18356:	eba1 010b 	sub.w	r1, r1, fp
			rx_index[i] += len;
   1835a:	442a      	add	r2, r5
			rx_available -= len;
   1835c:	4439      	add	r1, r7
			rx_index[i] += len;
   1835e:	f829 2016 	strh.w	r2, [r9, r6, lsl #1]
			rx_available -= len;
   18362:	6021      	str	r1, [r4, #0]
	NVIC_ENABLE_IRQ(IRQ_USB1);
   18364:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18368:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1836c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   18370:	b003      	add	sp, #12
   18372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   18376:	462a      	mov	r2, r5
			count += avail;
   18378:	442f      	add	r7, r5
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
   1837a:	f7fe f90f 	bl	1659c <memcpy>
			rx_available -= avail;
   1837e:	490c      	ldr	r1, [pc, #48]	; (183b0 <usb_serial_read+0xd4>)
			rx_tail = tail;
   18380:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
   18382:	4630      	mov	r0, r6
			rx_available -= avail;
   18384:	680a      	ldr	r2, [r1, #0]
			p += avail;
   18386:	44a8      	add	r8, r5
			rx_available -= avail;
   18388:	1b52      	subs	r2, r2, r5
   1838a:	600a      	str	r2, [r1, #0]
			rx_tail = tail;
   1838c:	f88a 3000 	strb.w	r3, [sl]
			rx_queue_transfer(i);
   18390:	f7ff fd7e 	bl	17e90 <rx_queue_transfer>
	while (count < size && tail != rx_head) {
   18394:	45bb      	cmp	fp, r7
   18396:	d8b6      	bhi.n	18306 <usb_serial_read+0x2a>
	return count;
   18398:	4638      	mov	r0, r7
   1839a:	e7e3      	b.n	18364 <usb_serial_read+0x88>
	while (count < size && tail != rx_head) {
   1839c:	4608      	mov	r0, r1
   1839e:	e7e1      	b.n	18364 <usb_serial_read+0x88>
   183a0:	2000c957 	.word	0x2000c957
   183a4:	202028c0 	.word	0x202028c0
   183a8:	2000b9ec 	.word	0x2000b9ec
   183ac:	2000b9b8 	.word	0x2000b9b8
   183b0:	2000b9a8 	.word	0x2000b9a8
   183b4:	2000c959 	.word	0x2000c959
   183b8:	2000b9d4 	.word	0x2000b9d4

000183bc <usb_serial_peekchar>:
	if (tail == rx_head) return -1;
   183bc:	4b0b      	ldr	r3, [pc, #44]	; (183ec <usb_serial_peekchar+0x30>)
	uint32_t tail = rx_tail;
   183be:	4a0c      	ldr	r2, [pc, #48]	; (183f0 <usb_serial_peekchar+0x34>)
   183c0:	7812      	ldrb	r2, [r2, #0]
	if (tail == rx_head) return -1;
   183c2:	7819      	ldrb	r1, [r3, #0]
	uint32_t tail = rx_tail;
   183c4:	b2d3      	uxtb	r3, r2
	if (tail == rx_head) return -1;
   183c6:	428a      	cmp	r2, r1
   183c8:	d00d      	beq.n	183e6 <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
   183ca:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
   183cc:	4809      	ldr	r0, [pc, #36]	; (183f4 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   183ce:	4a0a      	ldr	r2, [pc, #40]	; (183f8 <usb_serial_peekchar+0x3c>)
	if (++tail > RX_NUM) tail = 0;
   183d0:	2b09      	cmp	r3, #9
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   183d2:	490a      	ldr	r1, [pc, #40]	; (183fc <usb_serial_peekchar+0x40>)
	if (++tail > RX_NUM) tail = 0;
   183d4:	bf28      	it	cs
   183d6:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
   183d8:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
   183da:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
   183de:	eb02 2343 	add.w	r3, r2, r3, lsl #9
   183e2:	5c58      	ldrb	r0, [r3, r1]
   183e4:	4770      	bx	lr
	if (tail == rx_head) return -1;
   183e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   183ea:	4770      	bx	lr
   183ec:	2000c957 	.word	0x2000c957
   183f0:	2000c959 	.word	0x2000c959
   183f4:	2000b9ec 	.word	0x2000b9ec
   183f8:	202028c0 	.word	0x202028c0
   183fc:	2000b9d4 	.word	0x2000b9d4

00018400 <usb_serial_available>:
	uint32_t n = rx_available;
   18400:	4b04      	ldr	r3, [pc, #16]	; (18414 <usb_serial_available+0x14>)
{
   18402:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
   18404:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
   18406:	b10c      	cbz	r4, 1840c <usb_serial_available+0xc>
}
   18408:	4620      	mov	r0, r4
   1840a:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
   1840c:	f000 f8e0 	bl	185d0 <yield>
}
   18410:	4620      	mov	r0, r4
   18412:	bd10      	pop	{r4, pc}
   18414:	2000b9a8 	.word	0x2000b9a8

00018418 <usb_serial_flush_input>:
{
   18418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
   1841c:	4e14      	ldr	r6, [pc, #80]	; (18470 <usb_serial_flush_input+0x58>)
	while (tail != rx_head) {
   1841e:	4d15      	ldr	r5, [pc, #84]	; (18474 <usb_serial_flush_input+0x5c>)
	uint32_t tail = rx_tail;
   18420:	7833      	ldrb	r3, [r6, #0]
	while (tail != rx_head) {
   18422:	782a      	ldrb	r2, [r5, #0]
   18424:	4293      	cmp	r3, r2
   18426:	d021      	beq.n	1846c <usb_serial_flush_input+0x54>
   18428:	b2dc      	uxtb	r4, r3
   1842a:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1847c <usb_serial_flush_input+0x64>
   1842e:	f8df b050 	ldr.w	fp, [pc, #80]	; 18480 <usb_serial_flush_input+0x68>
   18432:	f8df 8050 	ldr.w	r8, [pc, #80]	; 18484 <usb_serial_flush_input+0x6c>
   18436:	4f10      	ldr	r7, [pc, #64]	; (18478 <usb_serial_flush_input+0x60>)
		if (++tail > RX_NUM) tail = 0;
   18438:	3401      	adds	r4, #1
   1843a:	2c08      	cmp	r4, #8
		rx_tail = tail;
   1843c:	fa5f fa84 	uxtb.w	sl, r4
		if (++tail > RX_NUM) tail = 0;
   18440:	d901      	bls.n	18446 <usb_serial_flush_input+0x2e>
   18442:	2400      	movs	r4, #0
   18444:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
   18446:	f819 0004 	ldrb.w	r0, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
   1844a:	f8db 3000 	ldr.w	r3, [fp]
   1844e:	f838 2010 	ldrh.w	r2, [r8, r0, lsl #1]
   18452:	f837 1010 	ldrh.w	r1, [r7, r0, lsl #1]
   18456:	1a52      	subs	r2, r2, r1
   18458:	1a9b      	subs	r3, r3, r2
   1845a:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
   1845e:	f7ff fd17 	bl	17e90 <rx_queue_transfer>
		rx_tail = tail;
   18462:	f886 a000 	strb.w	sl, [r6]
	while (tail != rx_head) {
   18466:	782b      	ldrb	r3, [r5, #0]
   18468:	42a3      	cmp	r3, r4
   1846a:	d1e5      	bne.n	18438 <usb_serial_flush_input+0x20>
}
   1846c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18470:	2000c959 	.word	0x2000c959
   18474:	2000c957 	.word	0x2000c957
   18478:	2000b9d4 	.word	0x2000b9d4
   1847c:	2000b9ec 	.word	0x2000b9ec
   18480:	2000b9a8 	.word	0x2000b9a8
   18484:	2000b9b8 	.word	0x2000b9b8

00018488 <usb_serial_getchar>:
{
   18488:	b500      	push	{lr}
   1848a:	b083      	sub	sp, #12
	if (usb_serial_read(&c, 1)) return c;
   1848c:	2101      	movs	r1, #1
   1848e:	f10d 0007 	add.w	r0, sp, #7
   18492:	f7ff ff23 	bl	182dc <usb_serial_read>
   18496:	b120      	cbz	r0, 184a2 <usb_serial_getchar+0x1a>
   18498:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   1849c:	b003      	add	sp, #12
   1849e:	f85d fb04 	ldr.w	pc, [sp], #4
	return -1;
   184a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   184a6:	e7f9      	b.n	1849c <usb_serial_getchar+0x14>

000184a8 <usb_serial_putchar>:
	if (!usb_configuration) return 0;
   184a8:	4b09      	ldr	r3, [pc, #36]	; (184d0 <usb_serial_putchar+0x28>)
{
   184aa:	b500      	push	{lr}
   184ac:	b083      	sub	sp, #12
	if (!usb_configuration) return 0;
   184ae:	781b      	ldrb	r3, [r3, #0]
{
   184b0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (!usb_configuration) return 0;
   184b4:	b13b      	cbz	r3, 184c6 <usb_serial_putchar+0x1e>
   184b6:	2101      	movs	r1, #1
   184b8:	f10d 0007 	add.w	r0, sp, #7
   184bc:	f7ff fdba 	bl	18034 <usb_serial_write.part.0>
}
   184c0:	b003      	add	sp, #12
   184c2:	f85d fb04 	ldr.w	pc, [sp], #4
   184c6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   184ca:	b003      	add	sp, #12
   184cc:	f85d fb04 	ldr.w	pc, [sp], #4
   184d0:	2000c963 	.word	0x2000c963

000184d4 <usb_serial_write>:
	if (!usb_configuration) return 0;
   184d4:	4b04      	ldr	r3, [pc, #16]	; (184e8 <usb_serial_write+0x14>)
   184d6:	781b      	ldrb	r3, [r3, #0]
   184d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   184dc:	b10b      	cbz	r3, 184e2 <usb_serial_write+0xe>
   184de:	f7ff bda9 	b.w	18034 <usb_serial_write.part.0>
}
   184e2:	4610      	mov	r0, r2
   184e4:	4770      	bx	lr
   184e6:	bf00      	nop
   184e8:	2000c963 	.word	0x2000c963

000184ec <usb_serial_write_buffer_free>:
{
   184ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (uint32_t i=0; i < TX_NUM; i++) {
   184f0:	2400      	movs	r4, #0
	tx_noautoflush = 1;
   184f2:	f8df 8044 	ldr.w	r8, [pc, #68]	; 18538 <usb_serial_write_buffer_free+0x4c>
   184f6:	2301      	movs	r3, #1
   184f8:	4d0d      	ldr	r5, [pc, #52]	; (18530 <usb_serial_write_buffer_free+0x44>)
	uint32_t sum = 0;
   184fa:	4627      	mov	r7, r4
   184fc:	4e0d      	ldr	r6, [pc, #52]	; (18534 <usb_serial_write_buffer_free+0x48>)
	tx_noautoflush = 1;
   184fe:	f888 3000 	strb.w	r3, [r8]
		if (i == tx_head) continue;
   18502:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   18504:	4628      	mov	r0, r5
	for (uint32_t i=0; i < TX_NUM; i++) {
   18506:	3520      	adds	r5, #32
		if (i == tx_head) continue;
   18508:	42a3      	cmp	r3, r4
	for (uint32_t i=0; i < TX_NUM; i++) {
   1850a:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
   1850e:	d005      	beq.n	1851c <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
   18510:	f7ff f90a 	bl	17728 <usb_transfer_status>
   18514:	0603      	lsls	r3, r0, #24
   18516:	bf58      	it	pl
   18518:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800
	for (uint32_t i=0; i < TX_NUM; i++) {
   1851c:	2c04      	cmp	r4, #4
   1851e:	d1f0      	bne.n	18502 <usb_serial_write_buffer_free+0x16>
	asm("dsb" ::: "memory");
   18520:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   18524:	2300      	movs	r3, #0
}
   18526:	4638      	mov	r0, r7
	tx_noautoflush = 0;
   18528:	f888 3000 	strb.w	r3, [r8]
}
   1852c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18530:	20004560 	.word	0x20004560
   18534:	2000c95f 	.word	0x2000c95f
   18538:	2000c961 	.word	0x2000c961

0001853c <usb_serial_flush_output>:
{
   1853c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!usb_configuration) return;
   18540:	4b1d      	ldr	r3, [pc, #116]	; (185b8 <usb_serial_flush_output+0x7c>)
   18542:	781b      	ldrb	r3, [r3, #0]
   18544:	b113      	cbz	r3, 1854c <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
   18546:	4d1d      	ldr	r5, [pc, #116]	; (185bc <usb_serial_flush_output+0x80>)
   18548:	882a      	ldrh	r2, [r5, #0]
   1854a:	b90a      	cbnz	r2, 18550 <usb_serial_flush_output+0x14>
}
   1854c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	transfer_t *xfer = tx_transfer + tx_head;
   18550:	4e1b      	ldr	r6, [pc, #108]	; (185c0 <usb_serial_flush_output+0x84>)
	uint32_t txnum = TX_SIZE - tx_available;
   18552:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
   18556:	491b      	ldr	r1, [pc, #108]	; (185c4 <usb_serial_flush_output+0x88>)
   18558:	7833      	ldrb	r3, [r6, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1855a:	464a      	mov	r2, r9
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   1855c:	4c1a      	ldr	r4, [pc, #104]	; (185c8 <usb_serial_flush_output+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
   1855e:	eb01 1843 	add.w	r8, r1, r3, lsl #5
	tx_noautoflush = 1;
   18562:	4f1a      	ldr	r7, [pc, #104]	; (185cc <usb_serial_flush_output+0x90>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
   18564:	eb04 24c3 	add.w	r4, r4, r3, lsl #11
	tx_noautoflush = 1;
   18568:	2301      	movs	r3, #1
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1856a:	4640      	mov	r0, r8
	tx_noautoflush = 1;
   1856c:	703b      	strb	r3, [r7, #0]
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
   1856e:	4621      	mov	r1, r4
   18570:	2300      	movs	r3, #0
   18572:	f7ff f89f 	bl	176b4 <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
   18576:	eb04 0209 	add.w	r2, r4, r9
	asm("dsb");
   1857a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
   1857e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
   18582:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
   18586:	3420      	adds	r4, #32
	} while (location < end_addr);
   18588:	42a2      	cmp	r2, r4
   1858a:	d8fa      	bhi.n	18582 <usb_serial_flush_output+0x46>
	asm("dsb");
   1858c:	f3bf 8f4f 	dsb	sy
	asm("isb");
   18590:	f3bf 8f6f 	isb	sy
	usb_transmit(CDC_TX_ENDPOINT, xfer);
   18594:	2003      	movs	r0, #3
   18596:	4641      	mov	r1, r8
   18598:	f7ff f8a4 	bl	176e4 <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
   1859c:	7833      	ldrb	r3, [r6, #0]
   1859e:	3301      	adds	r3, #1
   185a0:	b2db      	uxtb	r3, r3
   185a2:	2b03      	cmp	r3, #3
   185a4:	bf88      	it	hi
   185a6:	2300      	movhi	r3, #0
   185a8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
   185aa:	2300      	movs	r3, #0
   185ac:	802b      	strh	r3, [r5, #0]
	asm("dsb" ::: "memory");
   185ae:	f3bf 8f4f 	dsb	sy
	tx_noautoflush = 0;
   185b2:	703b      	strb	r3, [r7, #0]
}
   185b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   185b8:	2000c963 	.word	0x2000c963
   185bc:	2000c93a 	.word	0x2000c93a
   185c0:	2000c95f 	.word	0x2000c95f
   185c4:	20004560 	.word	0x20004560
   185c8:	202038c0 	.word	0x202038c0
   185cc:	2000c961 	.word	0x2000c961

000185d0 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
   185d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
   185d4:	4e32      	ldr	r6, [pc, #200]	; (186a0 <yield+0xd0>)
   185d6:	7833      	ldrb	r3, [r6, #0]
   185d8:	b163      	cbz	r3, 185f4 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
   185da:	4f32      	ldr	r7, [pc, #200]	; (186a4 <yield+0xd4>)
   185dc:	783a      	ldrb	r2, [r7, #0]
   185de:	b94a      	cbnz	r2, 185f4 <yield+0x24>
	running = 1;
   185e0:	2201      	movs	r2, #1


	// USB Serial - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   185e2:	07d9      	lsls	r1, r3, #31
	running = 1;
   185e4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
   185e6:	d444      	bmi.n	18672 <yield+0xa2>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
   185e8:	079a      	lsls	r2, r3, #30
   185ea:	d426      	bmi.n	1863a <yield+0x6a>

	running = 0;
   185ec:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   185ee:	075b      	lsls	r3, r3, #29
	running = 0;
   185f0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   185f2:	d401      	bmi.n	185f8 <yield+0x28>
	
};
   185f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
   185f8:	4b2b      	ldr	r3, [pc, #172]	; (186a8 <yield+0xd8>)
   185fa:	681a      	ldr	r2, [r3, #0]
   185fc:	2a00      	cmp	r2, #0
   185fe:	d0f9      	beq.n	185f4 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
   18600:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
   18604:	2a00      	cmp	r2, #0
   18606:	d1f5      	bne.n	185f4 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
   18608:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
   1860c:	b672      	cpsid	i
		EventResponder *first = firstYield;
   1860e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
   18610:	2800      	cmp	r0, #0
   18612:	d03b      	beq.n	1868c <yield+0xbc>
		if (runningFromYield) {
   18614:	4c25      	ldr	r4, [pc, #148]	; (186ac <yield+0xdc>)
   18616:	7821      	ldrb	r1, [r4, #0]
   18618:	2900      	cmp	r1, #0
   1861a:	d137      	bne.n	1868c <yield+0xbc>
		runningFromYield = true;
   1861c:	2201      	movs	r2, #1
   1861e:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
   18620:	6942      	ldr	r2, [r0, #20]
   18622:	601a      	str	r2, [r3, #0]
		if (firstYield) {
   18624:	2a00      	cmp	r2, #0
   18626:	d038      	beq.n	1869a <yield+0xca>
			firstYield->_prev = nullptr;
   18628:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
   1862a:	b905      	cbnz	r5, 1862e <yield+0x5e>
   1862c:	b662      	cpsie	i
		first->_triggered = false;
   1862e:	2500      	movs	r5, #0
		(*(first->_function))(*first);
   18630:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
   18632:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
   18634:	4798      	blx	r3
		runningFromYield = false;
   18636:	7025      	strb	r5, [r4, #0]
   18638:	e7dc      	b.n	185f4 <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   1863a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 186b8 <yield+0xe8>
   1863e:	f898 2000 	ldrb.w	r2, [r8]
   18642:	2a00      	cmp	r2, #0
   18644:	d0d2      	beq.n	185ec <yield+0x1c>
   18646:	2500      	movs	r5, #0
   18648:	f8df 9070 	ldr.w	r9, [pc, #112]	; 186bc <yield+0xec>
   1864c:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
   1864e:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   18652:	3501      	adds	r5, #1
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
   18654:	6823      	ldr	r3, [r4, #0]
   18656:	4620      	mov	r0, r4
   18658:	691b      	ldr	r3, [r3, #16]
   1865a:	4798      	blx	r3
   1865c:	b110      	cbz	r0, 18664 <yield+0x94>
   1865e:	6963      	ldr	r3, [r4, #20]
   18660:	689b      	ldr	r3, [r3, #8]
   18662:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
   18664:	f898 2000 	ldrb.w	r2, [r8]
   18668:	b2eb      	uxtb	r3, r5
   1866a:	429a      	cmp	r2, r3
   1866c:	d8ef      	bhi.n	1864e <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
   1866e:	7833      	ldrb	r3, [r6, #0]
   18670:	e7bc      	b.n	185ec <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
   18672:	f7ff fec5 	bl	18400 <usb_serial_available>
		if (Serial.available()) serialEvent();
   18676:	b968      	cbnz	r0, 18694 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
   18678:	4b0d      	ldr	r3, [pc, #52]	; (186b0 <yield+0xe0>)
   1867a:	781b      	ldrb	r3, [r3, #0]
   1867c:	b90b      	cbnz	r3, 18682 <yield+0xb2>
   1867e:	7833      	ldrb	r3, [r6, #0]
   18680:	e7b2      	b.n	185e8 <yield+0x18>
   18682:	7833      	ldrb	r3, [r6, #0]
   18684:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   18688:	7033      	strb	r3, [r6, #0]
   1868a:	e7ad      	b.n	185e8 <yield+0x18>
		if (doit) __enable_irq();
   1868c:	2d00      	cmp	r5, #0
   1868e:	d1b1      	bne.n	185f4 <yield+0x24>
   18690:	b662      	cpsie	i
   18692:	e7af      	b.n	185f4 <yield+0x24>
		if (Serial.available()) serialEvent();
   18694:	f000 f814 	bl	186c0 <serialEvent()>
   18698:	e7ee      	b.n	18678 <yield+0xa8>
			lastYield = nullptr;
   1869a:	4b06      	ldr	r3, [pc, #24]	; (186b4 <yield+0xe4>)
   1869c:	601a      	str	r2, [r3, #0]
   1869e:	e7c4      	b.n	1862a <yield+0x5a>
   186a0:	20003d31 	.word	0x20003d31
   186a4:	2000c94b 	.word	0x2000c94b
   186a8:	20005134 	.word	0x20005134
   186ac:	2000c949 	.word	0x2000c949
   186b0:	6000309e 	.word	0x6000309e
   186b4:	20005140 	.word	0x20005140
   186b8:	2000c94a 	.word	0x2000c94a
   186bc:	20005144 	.word	0x20005144

000186c0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
   186c0:	4770      	bx	lr
   186c2:	bf00      	nop

000186c4 <sm_align_pool>:
	if (spool->pool_size % HEADER_SZ) return 0;
	return 1;
}

int sm_align_pool(struct smalloc_pool *spool)
{
   186c4:	b508      	push	{r3, lr}
	size_t x;

	if (smalloc_verify_pool(spool)) return 1;

	x = spool->pool_size % HEADER_SZ;
   186c6:	e9d0 3200 	ldrd	r3, r2, [r0]
	if (!spool->pool || !spool->pool_size) return 0;
   186ca:	b15b      	cbz	r3, 186e4 <sm_align_pool+0x20>
   186cc:	b1ba      	cbz	r2, 186fe <sm_align_pool+0x3a>
	if (spool->pool_size % HEADER_SZ) return 0;
   186ce:	4b0f      	ldr	r3, [pc, #60]	; (1870c <sm_align_pool+0x48>)
   186d0:	fba3 1302 	umull	r1, r3, r3, r2
   186d4:	08db      	lsrs	r3, r3, #3
   186d6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   186da:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   186de:	d10a      	bne.n	186f6 <sm_align_pool+0x32>
	if (smalloc_verify_pool(spool)) return 1;
   186e0:	2001      	movs	r0, #1
		errno = ENOSPC;
		return 0;
	}

	return 1;
}
   186e2:	bd08      	pop	{r3, pc}
	x = spool->pool_size % HEADER_SZ;
   186e4:	4b09      	ldr	r3, [pc, #36]	; (1870c <sm_align_pool+0x48>)
   186e6:	fba3 1302 	umull	r1, r3, r3, r2
   186ea:	08db      	lsrs	r3, r3, #3
   186ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	if (x) spool->pool_size -= x;
   186f0:	ebb2 0383 	subs.w	r3, r2, r3, lsl #2
   186f4:	d001      	beq.n	186fa <sm_align_pool+0x36>
   186f6:	1ad2      	subs	r2, r2, r3
   186f8:	6042      	str	r2, [r0, #4]
	if (spool->pool_size <= MIN_POOL_SZ) {
   186fa:	2af0      	cmp	r2, #240	; 0xf0
   186fc:	d8f0      	bhi.n	186e0 <sm_align_pool+0x1c>
		errno = ENOSPC;
   186fe:	f00a f825 	bl	2274c <__errno>
   18702:	221c      	movs	r2, #28
   18704:	4603      	mov	r3, r0
   18706:	2000      	movs	r0, #0
   18708:	601a      	str	r2, [r3, #0]
}
   1870a:	bd08      	pop	{r3, pc}
   1870c:	aaaaaaab 	.word	0xaaaaaaab

00018710 <sm_set_pool>:

int sm_set_pool(struct smalloc_pool *spool, void *new_pool, size_t new_pool_size, int do_zero, smalloc_oom_handler oom_handler)
{
   18710:	b570      	push	{r4, r5, r6, lr}
	if (!spool) {
   18712:	4604      	mov	r4, r0
   18714:	b338      	cbz	r0, 18766 <sm_set_pool+0x56>
		errno = EINVAL;
		return 0;
	}

	if (!new_pool || !new_pool_size) {
   18716:	b119      	cbz	r1, 18720 <sm_set_pool+0x10>
   18718:	fab2 f682 	clz	r6, r2
   1871c:	0976      	lsrs	r6, r6, #5
   1871e:	b9a2      	cbnz	r2, 1874a <sm_set_pool+0x3a>
	if (!spool->pool || !spool->pool_size) return 0;
   18720:	6820      	ldr	r0, [r4, #0]
   18722:	b300      	cbz	r0, 18766 <sm_set_pool+0x56>
   18724:	6862      	ldr	r2, [r4, #4]
   18726:	b1f2      	cbz	r2, 18766 <sm_set_pool+0x56>
	if (spool->pool_size % HEADER_SZ) return 0;
   18728:	4b18      	ldr	r3, [pc, #96]	; (1878c <sm_set_pool+0x7c>)
   1872a:	4919      	ldr	r1, [pc, #100]	; (18790 <sm_set_pool+0x80>)
   1872c:	fb02 f303 	mul.w	r3, r2, r3
   18730:	ebb1 0fb3 	cmp.w	r1, r3, ror #2
   18734:	d317      	bcc.n	18766 <sm_set_pool+0x56>
		if (smalloc_verify_pool(spool)) {
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   18736:	68a3      	ldr	r3, [r4, #8]
   18738:	b9e3      	cbnz	r3, 18774 <sm_set_pool+0x64>
			memset(spool, 0, sizeof(struct smalloc_pool));
   1873a:	2200      	movs	r2, #0
			return 1;
   1873c:	2301      	movs	r3, #1
			memset(spool, 0, sizeof(struct smalloc_pool));
   1873e:	6022      	str	r2, [r4, #0]
   18740:	6062      	str	r2, [r4, #4]
   18742:	60a2      	str	r2, [r4, #8]
   18744:	60e2      	str	r2, [r4, #12]
		spool->do_zero = do_zero;
		memset(spool->pool, 0, spool->pool_size);
	}

	return 1;
}
   18746:	4618      	mov	r0, r3
   18748:	bd70      	pop	{r4, r5, r6, pc}
	spool->pool = new_pool;
   1874a:	461d      	mov	r5, r3
	spool->oomfn = oom_handler;
   1874c:	9b04      	ldr	r3, [sp, #16]
	spool->pool_size = new_pool_size;
   1874e:	e9c0 1200 	strd	r1, r2, [r0]
	spool->oomfn = oom_handler;
   18752:	60c3      	str	r3, [r0, #12]
	if (!sm_align_pool(spool)) return 0;
   18754:	f7ff ffb6 	bl	186c4 <sm_align_pool>
   18758:	4603      	mov	r3, r0
   1875a:	2800      	cmp	r0, #0
   1875c:	d0f3      	beq.n	18746 <sm_set_pool+0x36>
	if (do_zero) {
   1875e:	b96d      	cbnz	r5, 1877c <sm_set_pool+0x6c>
	return 1;
   18760:	2301      	movs	r3, #1
}
   18762:	4618      	mov	r0, r3
   18764:	bd70      	pop	{r4, r5, r6, pc}
		errno = EINVAL;
   18766:	f009 fff1 	bl	2274c <__errno>
   1876a:	2216      	movs	r2, #22
		return 0;
   1876c:	2300      	movs	r3, #0
		errno = EINVAL;
   1876e:	6002      	str	r2, [r0, #0]
}
   18770:	4618      	mov	r0, r3
   18772:	bd70      	pop	{r4, r5, r6, pc}
			if (spool->do_zero) memset(spool->pool, 0, spool->pool_size);
   18774:	2100      	movs	r1, #0
   18776:	f009 feb3 	bl	224e0 <memset>
   1877a:	e7de      	b.n	1873a <sm_set_pool+0x2a>
		memset(spool->pool, 0, spool->pool_size);
   1877c:	6862      	ldr	r2, [r4, #4]
   1877e:	4631      	mov	r1, r6
   18780:	6820      	ldr	r0, [r4, #0]
		spool->do_zero = do_zero;
   18782:	60a5      	str	r5, [r4, #8]
		memset(spool->pool, 0, spool->pool_size);
   18784:	f009 feac 	bl	224e0 <memset>
	return 1;
   18788:	2301      	movs	r3, #1
   1878a:	e7dc      	b.n	18746 <sm_set_pool+0x36>
   1878c:	aaaaaaab 	.word	0xaaaaaaab
   18790:	15555555 	.word	0x15555555
   18794:	00000000 	.word	0x00000000

00018798 <powf>:
   18798:	b430      	push	{r4, r5}
   1879a:	ee10 3a10 	vmov	r3, s0
   1879e:	ed2d 8b02 	vpush	{d8}
   187a2:	f5a3 0100 	sub.w	r1, r3, #8388608	; 0x800000
   187a6:	ee10 2a90 	vmov	r2, s1
   187aa:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
   187ae:	ee10 4a10 	vmov	r4, s0
   187b2:	b082      	sub	sp, #8
   187b4:	ea4f 0142 	mov.w	r1, r2, lsl #1
   187b8:	d27c      	bcs.n	188b4 <powf+0x11c>
   187ba:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
   187be:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   187c2:	4584      	cmp	ip, r0
   187c4:	f080 80f7 	bcs.w	189b6 <powf+0x21e>
   187c8:	2000      	movs	r0, #0
   187ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
   187ce:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
   187d2:	f3c3 42c3 	ubfx	r2, r3, #19, #4
   187d6:	0ddb      	lsrs	r3, r3, #23
   187d8:	05db      	lsls	r3, r3, #23
   187da:	1ae1      	subs	r1, r4, r3
   187dc:	15db      	asrs	r3, r3, #23
   187de:	ee07 3a90 	vmov	s15, r3
   187e2:	4bb1      	ldr	r3, [pc, #708]	; (18aa8 <powf+0x310>)
   187e4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   187e8:	ed92 3b00 	vldr	d3, [r2]
   187ec:	ee04 1a10 	vmov	s8, r1
   187f0:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
   187f4:	eeb7 4ac4 	vcvt.f64.f32	d4, s8
   187f8:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
   187fc:	eea3 0b04 	vfma.f64	d0, d3, d4
   18800:	ed93 3b44 	vldr	d3, [r3, #272]	; 0x110
   18804:	ee20 1b00 	vmul.f64	d1, d0, d0
   18808:	ed93 4b46 	vldr	d4, [r3, #280]	; 0x118
   1880c:	ed93 2b40 	vldr	d2, [r3, #256]	; 0x100
   18810:	eea0 4b03 	vfma.f64	d4, d0, d3
   18814:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
   18818:	ed93 3b48 	vldr	d3, [r3, #288]	; 0x120
   1881c:	eea0 5b02 	vfma.f64	d5, d0, d2
   18820:	ee21 2b01 	vmul.f64	d2, d1, d1
   18824:	ed92 8b02 	vldr	d8, [r2, #8]
   18828:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   1882c:	ee37 7b08 	vadd.f64	d7, d7, d8
   18830:	eea0 7b03 	vfma.f64	d7, d0, d3
   18834:	eea1 7b04 	vfma.f64	d7, d1, d4
   18838:	eea5 7b02 	vfma.f64	d7, d5, d2
   1883c:	ee26 7b07 	vmul.f64	d7, d6, d7
   18840:	ee17 3a90 	vmov	r3, s15
   18844:	f248 01bf 	movw	r1, #32959	; 0x80bf
   18848:	f3c3 33cf 	ubfx	r3, r3, #15, #16
   1884c:	428b      	cmp	r3, r1
   1884e:	d250      	bcs.n	188f2 <powf+0x15a>
   18850:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
   18854:	4b95      	ldr	r3, [pc, #596]	; (18aac <powf+0x314>)
   18856:	ed93 2b40 	vldr	d2, [r3, #256]	; 0x100
   1885a:	ee37 3b02 	vadd.f64	d3, d7, d2
   1885e:	ee13 2a10 	vmov	r2, s6
   18862:	ee33 3b42 	vsub.f64	d3, d3, d2
   18866:	f002 011f 	and.w	r1, r2, #31
   1886a:	1882      	adds	r2, r0, r2
   1886c:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
   18870:	ed93 4b42 	vldr	d4, [r3, #264]	; 0x108
   18874:	ee37 7b43 	vsub.f64	d7, d7, d3
   18878:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
   1887c:	6845      	ldr	r5, [r0, #4]
   1887e:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
   18882:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
   18886:	eea7 6b04 	vfma.f64	d6, d7, d4
   1888a:	ee27 4b07 	vmul.f64	d4, d7, d7
   1888e:	2300      	movs	r3, #0
   18890:	1918      	adds	r0, r3, r4
   18892:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
   18896:	eea7 0b05 	vfma.f64	d0, d7, d5
   1889a:	ec41 0b17 	vmov	d7, r0, r1
   1889e:	eea6 0b04 	vfma.f64	d0, d6, d4
   188a2:	ee20 0b07 	vmul.f64	d0, d0, d7
   188a6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
   188aa:	b002      	add	sp, #8
   188ac:	ecbd 8b02 	vpop	{d8}
   188b0:	bc30      	pop	{r4, r5}
   188b2:	4770      	bx	lr
   188b4:	1e4d      	subs	r5, r1, #1
   188b6:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
   188ba:	4285      	cmp	r5, r0
   188bc:	f080 80ce 	bcs.w	18a5c <powf+0x2c4>
   188c0:	0059      	lsls	r1, r3, #1
   188c2:	1e4d      	subs	r5, r1, #1
   188c4:	4285      	cmp	r5, r0
   188c6:	f080 8092 	bcs.w	189ee <powf+0x256>
   188ca:	2b00      	cmp	r3, #0
   188cc:	db55      	blt.n	1897a <powf+0x1e2>
   188ce:	2000      	movs	r0, #0
   188d0:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
   188d4:	f4bf af79 	bcs.w	187ca <powf+0x32>
   188d8:	eddf 7a75 	vldr	s15, [pc, #468]	; 18ab0 <powf+0x318>
   188dc:	ee07 3a10 	vmov	s14, r3
   188e0:	ee67 7a27 	vmul.f32	s15, s14, s15
   188e4:	ee17 4a90 	vmov	r4, s15
   188e8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   188ec:	f1a4 6438 	sub.w	r4, r4, #192937984	; 0xb800000
   188f0:	e76b      	b.n	187ca <powf+0x32>
   188f2:	ed9f 6b65 	vldr	d6, [pc, #404]	; 18a88 <powf+0x2f0>
   188f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
   188fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   188fe:	dc15      	bgt.n	1892c <powf+0x194>
   18900:	ed9f 6b63 	vldr	d6, [pc, #396]	; 18a90 <powf+0x2f8>
   18904:	eeb4 7bc6 	vcmpe.f64	d7, d6
   18908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1890c:	dd20      	ble.n	18950 <powf+0x1b8>
   1890e:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
   18912:	b188      	cbz	r0, 18938 <powf+0x1a0>
   18914:	9301      	str	r3, [sp, #4]
   18916:	eddd 6a01 	vldr	s13, [sp, #4]
   1891a:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
   1891e:	ee76 6a66 	vsub.f32	s13, s12, s13
   18922:	eef4 6a46 	vcmp.f32	s13, s12
   18926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1892a:	d011      	beq.n	18950 <powf+0x1b8>
   1892c:	b002      	add	sp, #8
   1892e:	ecbd 8b02 	vpop	{d8}
   18932:	bc30      	pop	{r4, r5}
   18934:	f000 b8e8 	b.w	18b08 <__math_oflowf>
   18938:	9300      	str	r3, [sp, #0]
   1893a:	eddd 6a00 	vldr	s13, [sp]
   1893e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
   18942:	ee76 6a86 	vadd.f32	s13, s13, s12
   18946:	eef4 6a46 	vcmp.f32	s13, s12
   1894a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1894e:	d1ed      	bne.n	1892c <powf+0x194>
   18950:	ed9f 6b51 	vldr	d6, [pc, #324]	; 18a98 <powf+0x300>
   18954:	eeb4 7bc6 	vcmpe.f64	d7, d6
   18958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1895c:	d957      	bls.n	18a0e <powf+0x276>
   1895e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 18aa0 <powf+0x308>
   18962:	eeb4 7bc6 	vcmpe.f64	d7, d6
   18966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   1896a:	f57f af71 	bpl.w	18850 <powf+0xb8>
   1896e:	b002      	add	sp, #8
   18970:	ecbd 8b02 	vpop	{d8}
   18974:	bc30      	pop	{r4, r5}
   18976:	f000 b8c1 	b.w	18afc <__math_may_uflowf>
   1897a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
   1897e:	297e      	cmp	r1, #126	; 0x7e
   18980:	dd11      	ble.n	189a6 <powf+0x20e>
   18982:	2996      	cmp	r1, #150	; 0x96
   18984:	dc54      	bgt.n	18a30 <powf+0x298>
   18986:	2001      	movs	r0, #1
   18988:	f1c1 0196 	rsb	r1, r1, #150	; 0x96
   1898c:	fa00 f101 	lsl.w	r1, r0, r1
   18990:	1e48      	subs	r0, r1, #1
   18992:	4210      	tst	r0, r2
   18994:	d107      	bne.n	189a6 <powf+0x20e>
   18996:	4211      	tst	r1, r2
   18998:	bf14      	ite	ne
   1899a:	2001      	movne	r0, #1
   1899c:	2000      	moveq	r0, #0
   1899e:	0400      	lsls	r0, r0, #16
   189a0:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   189a4:	e794      	b.n	188d0 <powf+0x138>
   189a6:	ee00 3a10 	vmov	s0, r3
   189aa:	b002      	add	sp, #8
   189ac:	ecbd 8b02 	vpop	{d8}
   189b0:	bc30      	pop	{r4, r5}
   189b2:	f000 b8c1 	b.w	18b38 <__math_invalidf>
   189b6:	2900      	cmp	r1, #0
   189b8:	d052      	beq.n	18a60 <powf+0x2c8>
   189ba:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
   189be:	d02c      	beq.n	18a1a <powf+0x282>
   189c0:	0064      	lsls	r4, r4, #1
   189c2:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
   189c6:	d82e      	bhi.n	18a26 <powf+0x28e>
   189c8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
   189cc:	d12b      	bne.n	18a26 <powf+0x28e>
   189ce:	f1b4 4ffe 	cmp.w	r4, #2130706432	; 0x7f000000
   189d2:	d04b      	beq.n	18a6c <powf+0x2d4>
   189d4:	f1b4 4ffe 	cmp.w	r4, #2130706432	; 0x7f000000
   189d8:	ea6f 0202 	mvn.w	r2, r2
   189dc:	bf34      	ite	cc
   189de:	2400      	movcc	r4, #0
   189e0:	2401      	movcs	r4, #1
   189e2:	0fd2      	lsrs	r2, r2, #31
   189e4:	4294      	cmp	r4, r2
   189e6:	d04c      	beq.n	18a82 <powf+0x2ea>
   189e8:	ed9f 0a32 	vldr	s0, [pc, #200]	; 18ab4 <powf+0x31c>
   189ec:	e75d      	b.n	188aa <powf+0x112>
   189ee:	2b00      	cmp	r3, #0
   189f0:	ee20 0a00 	vmul.f32	s0, s0, s0
   189f4:	db1e      	blt.n	18a34 <powf+0x29c>
   189f6:	2000      	movs	r0, #0
   189f8:	2900      	cmp	r1, #0
   189fa:	d13a      	bne.n	18a72 <powf+0x2da>
   189fc:	2a00      	cmp	r2, #0
   189fe:	f6bf af54 	bge.w	188aa <powf+0x112>
   18a02:	b002      	add	sp, #8
   18a04:	ecbd 8b02 	vpop	{d8}
   18a08:	bc30      	pop	{r4, r5}
   18a0a:	f000 b883 	b.w	18b14 <__math_divzerof>
   18a0e:	b002      	add	sp, #8
   18a10:	ecbd 8b02 	vpop	{d8}
   18a14:	bc30      	pop	{r4, r5}
   18a16:	f000 b86b 	b.w	18af0 <__math_uflowf>
   18a1a:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
   18a1e:	0052      	lsls	r2, r2, #1
   18a20:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
   18a24:	d922      	bls.n	18a6c <powf+0x2d4>
   18a26:	ee07 3a90 	vmov	s15, r3
   18a2a:	ee37 0aa0 	vadd.f32	s0, s15, s1
   18a2e:	e73c      	b.n	188aa <powf+0x112>
   18a30:	2000      	movs	r0, #0
   18a32:	e7b5      	b.n	189a0 <powf+0x208>
   18a34:	f3c2 53c7 	ubfx	r3, r2, #23, #8
   18a38:	f1a3 007f 	sub.w	r0, r3, #127	; 0x7f
   18a3c:	2817      	cmp	r0, #23
   18a3e:	d8da      	bhi.n	189f6 <powf+0x25e>
   18a40:	f1c3 0096 	rsb	r0, r3, #150	; 0x96
   18a44:	2301      	movs	r3, #1
   18a46:	fa03 f000 	lsl.w	r0, r3, r0
   18a4a:	1e44      	subs	r4, r0, #1
   18a4c:	4214      	tst	r4, r2
   18a4e:	d1d2      	bne.n	189f6 <powf+0x25e>
   18a50:	4010      	ands	r0, r2
   18a52:	d0d1      	beq.n	189f8 <powf+0x260>
   18a54:	eeb1 0a40 	vneg.f32	s0, s0
   18a58:	4618      	mov	r0, r3
   18a5a:	e7cd      	b.n	189f8 <powf+0x260>
   18a5c:	2900      	cmp	r1, #0
   18a5e:	d1af      	bne.n	189c0 <powf+0x228>
   18a60:	f484 0280 	eor.w	r2, r4, #4194304	; 0x400000
   18a64:	0052      	lsls	r2, r2, #1
   18a66:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
   18a6a:	d8dc      	bhi.n	18a26 <powf+0x28e>
   18a6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
   18a70:	e71b      	b.n	188aa <powf+0x112>
   18a72:	2a00      	cmp	r2, #0
   18a74:	f6bf af19 	bge.w	188aa <powf+0x112>
   18a78:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
   18a7c:	ee87 0a80 	vdiv.f32	s0, s15, s0
   18a80:	e713      	b.n	188aa <powf+0x112>
   18a82:	ee20 0aa0 	vmul.f32	s0, s1, s1
   18a86:	e710      	b.n	188aa <powf+0x112>
   18a88:	ffd1d571 	.word	0xffd1d571
   18a8c:	405fffff 	.word	0x405fffff
   18a90:	ffa3aae2 	.word	0xffa3aae2
   18a94:	405fffff 	.word	0x405fffff
   18a98:	00000000 	.word	0x00000000
   18a9c:	c062c000 	.word	0xc062c000
   18aa0:	00000000 	.word	0x00000000
   18aa4:	c062a000 	.word	0xc062a000
   18aa8:	200004b8 	.word	0x200004b8
   18aac:	20000280 	.word	0x20000280
   18ab0:	4b000000 	.word	0x4b000000
   18ab4:	00000000 	.word	0x00000000

00018ab8 <with_errnof>:
   18ab8:	b510      	push	{r4, lr}
   18aba:	b082      	sub	sp, #8
   18abc:	ed8d 0a01 	vstr	s0, [sp, #4]
   18ac0:	4604      	mov	r4, r0
   18ac2:	f009 fe43 	bl	2274c <__errno>
   18ac6:	ed9d 0a01 	vldr	s0, [sp, #4]
   18aca:	6004      	str	r4, [r0, #0]
   18acc:	b002      	add	sp, #8
   18ace:	bd10      	pop	{r4, pc}

00018ad0 <xflowf>:
   18ad0:	b130      	cbz	r0, 18ae0 <xflowf+0x10>
   18ad2:	eef1 7a40 	vneg.f32	s15, s0
   18ad6:	ee27 0a80 	vmul.f32	s0, s15, s0
   18ada:	2022      	movs	r0, #34	; 0x22
   18adc:	f7ff bfec 	b.w	18ab8 <with_errnof>
   18ae0:	eef0 7a40 	vmov.f32	s15, s0
   18ae4:	ee27 0a80 	vmul.f32	s0, s15, s0
   18ae8:	2022      	movs	r0, #34	; 0x22
   18aea:	f7ff bfe5 	b.w	18ab8 <with_errnof>
   18aee:	bf00      	nop

00018af0 <__math_uflowf>:
   18af0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18af8 <__math_uflowf+0x8>
   18af4:	f7ff bfec 	b.w	18ad0 <xflowf>
   18af8:	10000000 	.word	0x10000000

00018afc <__math_may_uflowf>:
   18afc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18b04 <__math_may_uflowf+0x8>
   18b00:	f7ff bfe6 	b.w	18ad0 <xflowf>
   18b04:	1a200000 	.word	0x1a200000

00018b08 <__math_oflowf>:
   18b08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 18b10 <__math_oflowf+0x8>
   18b0c:	f7ff bfe0 	b.w	18ad0 <xflowf>
   18b10:	70000000 	.word	0x70000000

00018b14 <__math_divzerof>:
   18b14:	ed9f 0a07 	vldr	s0, [pc, #28]	; 18b34 <__math_divzerof+0x20>
   18b18:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   18b1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
   18b20:	2800      	cmp	r0, #0
   18b22:	f04f 0022 	mov.w	r0, #34	; 0x22
   18b26:	fe47 7a27 	vseleq.f32	s15, s14, s15
   18b2a:	ee87 0a80 	vdiv.f32	s0, s15, s0
   18b2e:	f7ff bfc3 	b.w	18ab8 <with_errnof>
   18b32:	bf00      	nop
   18b34:	00000000 	.word	0x00000000

00018b38 <__math_invalidf>:
   18b38:	ee70 7a40 	vsub.f32	s15, s0, s0
   18b3c:	eeb4 0a40 	vcmp.f32	s0, s0
   18b40:	ee87 7aa7 	vdiv.f32	s14, s15, s15
   18b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   18b48:	eeb0 0a47 	vmov.f32	s0, s14
   18b4c:	d602      	bvs.n	18b54 <__math_invalidf+0x1c>
   18b4e:	2021      	movs	r0, #33	; 0x21
   18b50:	f7ff bfb2 	b.w	18ab8 <with_errnof>
   18b54:	4770      	bx	lr
   18b56:	bf00      	nop

00018b58 <__aeabi_atexit>:
   18b58:	4603      	mov	r3, r0
   18b5a:	4608      	mov	r0, r1
   18b5c:	4619      	mov	r1, r3
   18b5e:	f009 bdc1 	b.w	226e4 <__cxa_atexit>
   18b62:	bf00      	nop

00018b64 <std::__throw_bad_alloc()>:
   18b64:	b508      	push	{r3, lr}
   18b66:	2004      	movs	r0, #4
   18b68:	f000 f8f4 	bl	18d54 <__cxa_allocate_exception>
   18b6c:	4b02      	ldr	r3, [pc, #8]	; (18b78 <std::__throw_bad_alloc()+0x14>)
   18b6e:	4a03      	ldr	r2, [pc, #12]	; (18b7c <std::__throw_bad_alloc()+0x18>)
   18b70:	4903      	ldr	r1, [pc, #12]	; (18b80 <std::__throw_bad_alloc()+0x1c>)
   18b72:	6003      	str	r3, [r0, #0]
   18b74:	f000 fda2 	bl	196bc <__cxa_throw>
   18b78:	20001730 	.word	0x20001730
   18b7c:	00018c45 	.word	0x00018c45
   18b80:	20001244 	.word	0x20001244

00018b84 <std::__throw_logic_error(char const*)>:
   18b84:	b510      	push	{r4, lr}
   18b86:	b082      	sub	sp, #8
   18b88:	9001      	str	r0, [sp, #4]
   18b8a:	2008      	movs	r0, #8
   18b8c:	f000 f8e2 	bl	18d54 <__cxa_allocate_exception>
   18b90:	9901      	ldr	r1, [sp, #4]
   18b92:	4604      	mov	r4, r0
   18b94:	f000 ff9a 	bl	19acc <std::logic_error::logic_error(char const*)>
   18b98:	4a04      	ldr	r2, [pc, #16]	; (18bac <std::__throw_logic_error(char const*)+0x28>)
   18b9a:	4905      	ldr	r1, [pc, #20]	; (18bb0 <std::__throw_logic_error(char const*)+0x2c>)
   18b9c:	4620      	mov	r0, r4
   18b9e:	f000 fd8d 	bl	196bc <__cxa_throw>
   18ba2:	4620      	mov	r0, r4
   18ba4:	f000 f8ee 	bl	18d84 <__cxa_free_exception>
   18ba8:	f000 f910 	bl	18dcc <__cxa_end_cleanup>
   18bac:	000199bd 	.word	0x000199bd
   18bb0:	20001214 	.word	0x20001214

00018bb4 <std::__throw_length_error(char const*)>:
   18bb4:	b510      	push	{r4, lr}
   18bb6:	b082      	sub	sp, #8
   18bb8:	9001      	str	r0, [sp, #4]
   18bba:	2008      	movs	r0, #8
   18bbc:	f000 f8ca 	bl	18d54 <__cxa_allocate_exception>
   18bc0:	9901      	ldr	r1, [sp, #4]
   18bc2:	4604      	mov	r4, r0
   18bc4:	f000 ffc2 	bl	19b4c <std::length_error::length_error(char const*)>
   18bc8:	4a04      	ldr	r2, [pc, #16]	; (18bdc <std::__throw_length_error(char const*)+0x28>)
   18bca:	4905      	ldr	r1, [pc, #20]	; (18be0 <std::__throw_length_error(char const*)+0x2c>)
   18bcc:	4620      	mov	r0, r4
   18bce:	f000 fd75 	bl	196bc <__cxa_throw>
   18bd2:	4620      	mov	r0, r4
   18bd4:	f000 f8d6 	bl	18d84 <__cxa_free_exception>
   18bd8:	f000 f8f8 	bl	18dcc <__cxa_end_cleanup>
   18bdc:	000199fd 	.word	0x000199fd
   18be0:	20001220 	.word	0x20001220

00018be4 <std::bad_function_call::what() const>:
   18be4:	4800      	ldr	r0, [pc, #0]	; (18be8 <std::bad_function_call::what() const+0x4>)
   18be6:	4770      	bx	lr
   18be8:	20001168 	.word	0x20001168

00018bec <std::bad_function_call::~bad_function_call()>:
   18bec:	b510      	push	{r4, lr}
   18bee:	4b03      	ldr	r3, [pc, #12]	; (18bfc <std::bad_function_call::~bad_function_call()+0x10>)
   18bf0:	6003      	str	r3, [r0, #0]
   18bf2:	4604      	mov	r4, r0
   18bf4:	f000 f9b2 	bl	18f5c <std::exception::~exception()>
   18bf8:	4620      	mov	r0, r4
   18bfa:	bd10      	pop	{r4, pc}
   18bfc:	2000171c 	.word	0x2000171c

00018c00 <std::bad_function_call::~bad_function_call()>:
   18c00:	b510      	push	{r4, lr}
   18c02:	4b05      	ldr	r3, [pc, #20]	; (18c18 <std::bad_function_call::~bad_function_call()+0x18>)
   18c04:	6003      	str	r3, [r0, #0]
   18c06:	4604      	mov	r4, r0
   18c08:	f000 f9a8 	bl	18f5c <std::exception::~exception()>
   18c0c:	4620      	mov	r0, r4
   18c0e:	f7fd fd63 	bl	166d8 <operator delete(void*)>
   18c12:	4620      	mov	r0, r4
   18c14:	bd10      	pop	{r4, pc}
   18c16:	bf00      	nop
   18c18:	2000171c 	.word	0x2000171c

00018c1c <std::__throw_bad_function_call()>:
   18c1c:	b508      	push	{r3, lr}
   18c1e:	2004      	movs	r0, #4
   18c20:	f000 f898 	bl	18d54 <__cxa_allocate_exception>
   18c24:	4b02      	ldr	r3, [pc, #8]	; (18c30 <std::__throw_bad_function_call()+0x14>)
   18c26:	4a03      	ldr	r2, [pc, #12]	; (18c34 <std::__throw_bad_function_call()+0x18>)
   18c28:	4903      	ldr	r1, [pc, #12]	; (18c38 <std::__throw_bad_function_call()+0x1c>)
   18c2a:	6003      	str	r3, [r0, #0]
   18c2c:	f000 fd46 	bl	196bc <__cxa_throw>
   18c30:	2000171c 	.word	0x2000171c
   18c34:	00018bed 	.word	0x00018bed
   18c38:	20001238 	.word	0x20001238

00018c3c <std::bad_alloc::what() const>:
   18c3c:	4800      	ldr	r0, [pc, #0]	; (18c40 <std::bad_alloc::what() const+0x4>)
   18c3e:	4770      	bx	lr
   18c40:	2000117c 	.word	0x2000117c

00018c44 <std::bad_alloc::~bad_alloc()>:
   18c44:	b510      	push	{r4, lr}
   18c46:	4b03      	ldr	r3, [pc, #12]	; (18c54 <std::bad_alloc::~bad_alloc()+0x10>)
   18c48:	6003      	str	r3, [r0, #0]
   18c4a:	4604      	mov	r4, r0
   18c4c:	f000 f986 	bl	18f5c <std::exception::~exception()>
   18c50:	4620      	mov	r0, r4
   18c52:	bd10      	pop	{r4, pc}
   18c54:	20001730 	.word	0x20001730

00018c58 <std::bad_alloc::~bad_alloc()>:
   18c58:	b510      	push	{r4, lr}
   18c5a:	4b05      	ldr	r3, [pc, #20]	; (18c70 <std::bad_alloc::~bad_alloc()+0x18>)
   18c5c:	6003      	str	r3, [r0, #0]
   18c5e:	4604      	mov	r4, r0
   18c60:	f000 f97c 	bl	18f5c <std::exception::~exception()>
   18c64:	4620      	mov	r0, r4
   18c66:	2104      	movs	r1, #4
   18c68:	f7fd fd3a 	bl	166e0 <operator delete(void*, unsigned int)>
   18c6c:	4620      	mov	r0, r4
   18c6e:	bd10      	pop	{r4, pc}
   18c70:	20001730 	.word	0x20001730

00018c74 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>:
   18c74:	4920      	ldr	r1, [pc, #128]	; (18cf8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x84>)
   18c76:	684b      	ldr	r3, [r1, #4]
   18c78:	b530      	push	{r4, r5, lr}
   18c7a:	f850 5c08 	ldr.w	r5, [r0, #-8]
   18c7e:	f1a0 0408 	sub.w	r4, r0, #8
   18c82:	b35b      	cbz	r3, 18cdc <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
   18c84:	eb04 0e05 	add.w	lr, r4, r5
   18c88:	4573      	cmp	r3, lr
   18c8a:	d827      	bhi.n	18cdc <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x68>
   18c8c:	d021      	beq.n	18cd2 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x5e>
   18c8e:	685a      	ldr	r2, [r3, #4]
   18c90:	f101 0c04 	add.w	ip, r1, #4
   18c94:	b932      	cbnz	r2, 18ca4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x30>
   18c96:	e00f      	b.n	18cb8 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x44>
   18c98:	6851      	ldr	r1, [r2, #4]
   18c9a:	f103 0c04 	add.w	ip, r3, #4
   18c9e:	b321      	cbz	r1, 18cea <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x76>
   18ca0:	4613      	mov	r3, r2
   18ca2:	460a      	mov	r2, r1
   18ca4:	4596      	cmp	lr, r2
   18ca6:	d3f7      	bcc.n	18c98 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x24>
   18ca8:	bf04      	itt	eq
   18caa:	e9de 2100 	ldrdeq	r2, r1, [lr]
   18cae:	6059      	streq	r1, [r3, #4]
   18cb0:	f8dc 3000 	ldr.w	r3, [ip]
   18cb4:	bf08      	it	eq
   18cb6:	18ad      	addeq	r5, r5, r2
   18cb8:	681a      	ldr	r2, [r3, #0]
   18cba:	1899      	adds	r1, r3, r2
   18cbc:	428c      	cmp	r4, r1
   18cbe:	d011      	beq.n	18ce4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
   18cc0:	685b      	ldr	r3, [r3, #4]
   18cc2:	f840 3c04 	str.w	r3, [r0, #-4]
   18cc6:	f8dc 3000 	ldr.w	r3, [ip]
   18cca:	f840 5c08 	str.w	r5, [r0, #-8]
   18cce:	605c      	str	r4, [r3, #4]
   18cd0:	bd30      	pop	{r4, r5, pc}
   18cd2:	681a      	ldr	r2, [r3, #0]
   18cd4:	685b      	ldr	r3, [r3, #4]
   18cd6:	442a      	add	r2, r5
   18cd8:	f840 2c08 	str.w	r2, [r0, #-8]
   18cdc:	f840 3c04 	str.w	r3, [r0, #-4]
   18ce0:	604c      	str	r4, [r1, #4]
   18ce2:	bd30      	pop	{r4, r5, pc}
   18ce4:	442a      	add	r2, r5
   18ce6:	601a      	str	r2, [r3, #0]
   18ce8:	bd30      	pop	{r4, r5, pc}
   18cea:	685b      	ldr	r3, [r3, #4]
   18cec:	681a      	ldr	r2, [r3, #0]
   18cee:	1899      	adds	r1, r3, r2
   18cf0:	428c      	cmp	r4, r1
   18cf2:	d1e5      	bne.n	18cc0 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x4c>
   18cf4:	e7f6      	b.n	18ce4 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]+0x70>
   18cf6:	bf00      	nop
   18cf8:	200050b4 	.word	0x200050b4

00018cfc <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>:
   18cfc:	4914      	ldr	r1, [pc, #80]	; (18d50 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x54>)
   18cfe:	f100 0308 	add.w	r3, r0, #8
   18d02:	6848      	ldr	r0, [r1, #4]
   18d04:	2b08      	cmp	r3, #8
   18d06:	bf38      	it	cc
   18d08:	2308      	movcc	r3, #8
   18d0a:	b1f8      	cbz	r0, 18d4c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x50>
   18d0c:	3307      	adds	r3, #7
   18d0e:	f023 0307 	bic.w	r3, r3, #7
   18d12:	3104      	adds	r1, #4
   18d14:	e002      	b.n	18d1c <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x20>
   18d16:	1d01      	adds	r1, r0, #4
   18d18:	6840      	ldr	r0, [r0, #4]
   18d1a:	b180      	cbz	r0, 18d3e <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x42>
   18d1c:	6802      	ldr	r2, [r0, #0]
   18d1e:	4293      	cmp	r3, r2
   18d20:	d8f9      	bhi.n	18d16 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x1a>
   18d22:	b430      	push	{r4, r5}
   18d24:	1ad4      	subs	r4, r2, r3
   18d26:	2c07      	cmp	r4, #7
   18d28:	d90a      	bls.n	18d40 <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]+0x44>
   18d2a:	18c5      	adds	r5, r0, r3
   18d2c:	6842      	ldr	r2, [r0, #4]
   18d2e:	606a      	str	r2, [r5, #4]
   18d30:	50c4      	str	r4, [r0, r3]
   18d32:	6808      	ldr	r0, [r1, #0]
   18d34:	6003      	str	r3, [r0, #0]
   18d36:	600d      	str	r5, [r1, #0]
   18d38:	3008      	adds	r0, #8
   18d3a:	bc30      	pop	{r4, r5}
   18d3c:	4770      	bx	lr
   18d3e:	4770      	bx	lr
   18d40:	6845      	ldr	r5, [r0, #4]
   18d42:	6002      	str	r2, [r0, #0]
   18d44:	600d      	str	r5, [r1, #0]
   18d46:	3008      	adds	r0, #8
   18d48:	bc30      	pop	{r4, r5}
   18d4a:	4770      	bx	lr
   18d4c:	4770      	bx	lr
   18d4e:	bf00      	nop
   18d50:	200050b4 	.word	0x200050b4

00018d54 <__cxa_allocate_exception>:
   18d54:	b510      	push	{r4, lr}
   18d56:	f100 0480 	add.w	r4, r0, #128	; 0x80
   18d5a:	4620      	mov	r0, r4
   18d5c:	f008 fa00 	bl	21160 <malloc>
   18d60:	4603      	mov	r3, r0
   18d62:	b130      	cbz	r0, 18d72 <__cxa_allocate_exception+0x1e>
   18d64:	2280      	movs	r2, #128	; 0x80
   18d66:	2100      	movs	r1, #0
   18d68:	4618      	mov	r0, r3
   18d6a:	f009 fbb9 	bl	224e0 <memset>
   18d6e:	3080      	adds	r0, #128	; 0x80
   18d70:	bd10      	pop	{r4, pc}
   18d72:	4620      	mov	r0, r4
   18d74:	f7ff ffc2 	bl	18cfc <(anonymous namespace)::pool::allocate(unsigned int) [clone .constprop.0]>
   18d78:	4603      	mov	r3, r0
   18d7a:	2800      	cmp	r0, #0
   18d7c:	d1f2      	bne.n	18d64 <__cxa_allocate_exception+0x10>
   18d7e:	f000 fc23 	bl	195c8 <std::terminate()>
   18d82:	bf00      	nop

00018d84 <__cxa_free_exception>:
   18d84:	4a06      	ldr	r2, [pc, #24]	; (18da0 <__cxa_free_exception+0x1c>)
   18d86:	6893      	ldr	r3, [r2, #8]
   18d88:	3880      	subs	r0, #128	; 0x80
   18d8a:	4298      	cmp	r0, r3
   18d8c:	d905      	bls.n	18d9a <__cxa_free_exception+0x16>
   18d8e:	68d2      	ldr	r2, [r2, #12]
   18d90:	4413      	add	r3, r2
   18d92:	4298      	cmp	r0, r3
   18d94:	d201      	bcs.n	18d9a <__cxa_free_exception+0x16>
   18d96:	f7ff bf6d 	b.w	18c74 <(anonymous namespace)::pool::free(void*) [clone .constprop.0]>
   18d9a:	f008 b9e9 	b.w	21170 <free>
   18d9e:	bf00      	nop
   18da0:	200050b4 	.word	0x200050b4

00018da4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
   18da4:	b538      	push	{r3, r4, r5, lr}
   18da6:	4c08      	ldr	r4, [pc, #32]	; (18dc8 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
   18da8:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
   18dac:	4628      	mov	r0, r5
   18dae:	60e5      	str	r5, [r4, #12]
   18db0:	f008 f9d6 	bl	21160 <malloc>
   18db4:	60a0      	str	r0, [r4, #8]
   18db6:	b120      	cbz	r0, 18dc2 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
   18db8:	2300      	movs	r3, #0
   18dba:	e9c0 5300 	strd	r5, r3, [r0]
   18dbe:	6060      	str	r0, [r4, #4]
   18dc0:	bd38      	pop	{r3, r4, r5, pc}
   18dc2:	60e0      	str	r0, [r4, #12]
   18dc4:	6060      	str	r0, [r4, #4]
   18dc6:	bd38      	pop	{r3, r4, r5, pc}
   18dc8:	200050b4 	.word	0x200050b4

00018dcc <__cxa_end_cleanup>:
   18dcc:	b41e      	push	{r1, r2, r3, r4}
   18dce:	f000 f88d 	bl	18eec <__gnu_end_cleanup>
   18dd2:	bc1e      	pop	{r1, r2, r3, r4}
   18dd4:	f007 ff8a 	bl	20cec <_Unwind_Resume>

00018dd8 <__cxa_type_match>:
   18dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18dda:	7802      	ldrb	r2, [r0, #0]
   18ddc:	2a47      	cmp	r2, #71	; 0x47
   18dde:	b083      	sub	sp, #12
   18de0:	460c      	mov	r4, r1
   18de2:	461d      	mov	r5, r3
   18de4:	d019      	beq.n	18e1a <__cxa_type_match+0x42>
   18de6:	4e26      	ldr	r6, [pc, #152]	; (18e80 <__cxa_type_match+0xa8>)
   18de8:	2000      	movs	r0, #0
   18dea:	6833      	ldr	r3, [r6, #0]
   18dec:	9001      	str	r0, [sp, #4]
   18dee:	689b      	ldr	r3, [r3, #8]
   18df0:	4630      	mov	r0, r6
   18df2:	4798      	blx	r3
   18df4:	b178      	cbz	r0, 18e16 <__cxa_type_match+0x3e>
   18df6:	9b01      	ldr	r3, [sp, #4]
   18df8:	681b      	ldr	r3, [r3, #0]
   18dfa:	9301      	str	r3, [sp, #4]
   18dfc:	2702      	movs	r7, #2
   18dfe:	6823      	ldr	r3, [r4, #0]
   18e00:	4631      	mov	r1, r6
   18e02:	4620      	mov	r0, r4
   18e04:	691e      	ldr	r6, [r3, #16]
   18e06:	aa01      	add	r2, sp, #4
   18e08:	2301      	movs	r3, #1
   18e0a:	47b0      	blx	r6
   18e0c:	bb10      	cbnz	r0, 18e54 <__cxa_type_match+0x7c>
   18e0e:	4607      	mov	r7, r0
   18e10:	4638      	mov	r0, r7
   18e12:	b003      	add	sp, #12
   18e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e16:	2701      	movs	r7, #1
   18e18:	e7f1      	b.n	18dfe <__cxa_type_match+0x26>
   18e1a:	7843      	ldrb	r3, [r0, #1]
   18e1c:	2b4e      	cmp	r3, #78	; 0x4e
   18e1e:	d1e2      	bne.n	18de6 <__cxa_type_match+0xe>
   18e20:	7883      	ldrb	r3, [r0, #2]
   18e22:	2b55      	cmp	r3, #85	; 0x55
   18e24:	d1df      	bne.n	18de6 <__cxa_type_match+0xe>
   18e26:	78c3      	ldrb	r3, [r0, #3]
   18e28:	2b43      	cmp	r3, #67	; 0x43
   18e2a:	d1dc      	bne.n	18de6 <__cxa_type_match+0xe>
   18e2c:	7903      	ldrb	r3, [r0, #4]
   18e2e:	2b46      	cmp	r3, #70	; 0x46
   18e30:	d01a      	beq.n	18e68 <__cxa_type_match+0x90>
   18e32:	7903      	ldrb	r3, [r0, #4]
   18e34:	2b43      	cmp	r3, #67	; 0x43
   18e36:	d1d6      	bne.n	18de6 <__cxa_type_match+0xe>
   18e38:	7943      	ldrb	r3, [r0, #5]
   18e3a:	2b2b      	cmp	r3, #43	; 0x2b
   18e3c:	d1d3      	bne.n	18de6 <__cxa_type_match+0xe>
   18e3e:	7983      	ldrb	r3, [r0, #6]
   18e40:	2b2b      	cmp	r3, #43	; 0x2b
   18e42:	d1d0      	bne.n	18de6 <__cxa_type_match+0xe>
   18e44:	79c3      	ldrb	r3, [r0, #7]
   18e46:	2b01      	cmp	r3, #1
   18e48:	d8cd      	bhi.n	18de6 <__cxa_type_match+0xe>
   18e4a:	d008      	beq.n	18e5e <__cxa_type_match+0x86>
   18e4c:	f850 6c20 	ldr.w	r6, [r0, #-32]
   18e50:	3058      	adds	r0, #88	; 0x58
   18e52:	e7ca      	b.n	18dea <__cxa_type_match+0x12>
   18e54:	9b01      	ldr	r3, [sp, #4]
   18e56:	602b      	str	r3, [r5, #0]
   18e58:	4638      	mov	r0, r7
   18e5a:	b003      	add	sp, #12
   18e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18e5e:	f850 0c20 	ldr.w	r0, [r0, #-32]
   18e62:	f850 6c78 	ldr.w	r6, [r0, #-120]
   18e66:	e7c0      	b.n	18dea <__cxa_type_match+0x12>
   18e68:	7943      	ldrb	r3, [r0, #5]
   18e6a:	2b4f      	cmp	r3, #79	; 0x4f
   18e6c:	d1e1      	bne.n	18e32 <__cxa_type_match+0x5a>
   18e6e:	7983      	ldrb	r3, [r0, #6]
   18e70:	2b52      	cmp	r3, #82	; 0x52
   18e72:	d1de      	bne.n	18e32 <__cxa_type_match+0x5a>
   18e74:	79c3      	ldrb	r3, [r0, #7]
   18e76:	2b00      	cmp	r3, #0
   18e78:	d1db      	bne.n	18e32 <__cxa_type_match+0x5a>
   18e7a:	4e02      	ldr	r6, [pc, #8]	; (18e84 <__cxa_type_match+0xac>)
   18e7c:	4618      	mov	r0, r3
   18e7e:	e7b4      	b.n	18dea <__cxa_type_match+0x12>
   18e80:	20001200 	.word	0x20001200
   18e84:	200011ec 	.word	0x200011ec

00018e88 <__cxa_begin_cleanup>:
   18e88:	b510      	push	{r4, lr}
   18e8a:	4604      	mov	r4, r0
   18e8c:	f000 f87a 	bl	18f84 <__cxa_get_globals>
   18e90:	4622      	mov	r2, r4
   18e92:	f812 3920 	ldrb.w	r3, [r2], #-32
   18e96:	2b47      	cmp	r3, #71	; 0x47
   18e98:	d004      	beq.n	18ea4 <__cxa_begin_cleanup+0x1c>
   18e9a:	6883      	ldr	r3, [r0, #8]
   18e9c:	bb23      	cbnz	r3, 18ee8 <__cxa_begin_cleanup+0x60>
   18e9e:	6082      	str	r2, [r0, #8]
   18ea0:	2001      	movs	r0, #1
   18ea2:	bd10      	pop	{r4, pc}
   18ea4:	7863      	ldrb	r3, [r4, #1]
   18ea6:	2b4e      	cmp	r3, #78	; 0x4e
   18ea8:	d1f7      	bne.n	18e9a <__cxa_begin_cleanup+0x12>
   18eaa:	78a3      	ldrb	r3, [r4, #2]
   18eac:	2b55      	cmp	r3, #85	; 0x55
   18eae:	d1f4      	bne.n	18e9a <__cxa_begin_cleanup+0x12>
   18eb0:	78e3      	ldrb	r3, [r4, #3]
   18eb2:	2b43      	cmp	r3, #67	; 0x43
   18eb4:	d1f1      	bne.n	18e9a <__cxa_begin_cleanup+0x12>
   18eb6:	7923      	ldrb	r3, [r4, #4]
   18eb8:	2b43      	cmp	r3, #67	; 0x43
   18eba:	d1ee      	bne.n	18e9a <__cxa_begin_cleanup+0x12>
   18ebc:	7963      	ldrb	r3, [r4, #5]
   18ebe:	2b2b      	cmp	r3, #43	; 0x2b
   18ec0:	d1eb      	bne.n	18e9a <__cxa_begin_cleanup+0x12>
   18ec2:	79a3      	ldrb	r3, [r4, #6]
   18ec4:	2b2b      	cmp	r3, #43	; 0x2b
   18ec6:	d1e8      	bne.n	18e9a <__cxa_begin_cleanup+0x12>
   18ec8:	79e3      	ldrb	r3, [r4, #7]
   18eca:	2b01      	cmp	r3, #1
   18ecc:	d8e5      	bhi.n	18e9a <__cxa_begin_cleanup+0x12>
   18ece:	f854 3c04 	ldr.w	r3, [r4, #-4]
   18ed2:	3301      	adds	r3, #1
   18ed4:	2b01      	cmp	r3, #1
   18ed6:	f844 3c04 	str.w	r3, [r4, #-4]
   18eda:	d1e1      	bne.n	18ea0 <__cxa_begin_cleanup+0x18>
   18edc:	6883      	ldr	r3, [r0, #8]
   18ede:	f844 3c08 	str.w	r3, [r4, #-8]
   18ee2:	6082      	str	r2, [r0, #8]
   18ee4:	2001      	movs	r0, #1
   18ee6:	bd10      	pop	{r4, pc}
   18ee8:	f000 fb6e 	bl	195c8 <std::terminate()>

00018eec <__gnu_end_cleanup>:
   18eec:	b508      	push	{r3, lr}
   18eee:	f000 f849 	bl	18f84 <__cxa_get_globals>
   18ef2:	6883      	ldr	r3, [r0, #8]
   18ef4:	b383      	cbz	r3, 18f58 <__gnu_end_cleanup+0x6c>
   18ef6:	f893 2020 	ldrb.w	r2, [r3, #32]
   18efa:	2a47      	cmp	r2, #71	; 0x47
   18efc:	d004      	beq.n	18f08 <__gnu_end_cleanup+0x1c>
   18efe:	2200      	movs	r2, #0
   18f00:	6082      	str	r2, [r0, #8]
   18f02:	f103 0020 	add.w	r0, r3, #32
   18f06:	bd08      	pop	{r3, pc}
   18f08:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   18f0c:	2a4e      	cmp	r2, #78	; 0x4e
   18f0e:	d1f6      	bne.n	18efe <__gnu_end_cleanup+0x12>
   18f10:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   18f14:	2a55      	cmp	r2, #85	; 0x55
   18f16:	d1f2      	bne.n	18efe <__gnu_end_cleanup+0x12>
   18f18:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   18f1c:	2a43      	cmp	r2, #67	; 0x43
   18f1e:	d1ee      	bne.n	18efe <__gnu_end_cleanup+0x12>
   18f20:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18f24:	2a43      	cmp	r2, #67	; 0x43
   18f26:	d1ea      	bne.n	18efe <__gnu_end_cleanup+0x12>
   18f28:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   18f2c:	2a2b      	cmp	r2, #43	; 0x2b
   18f2e:	d1e6      	bne.n	18efe <__gnu_end_cleanup+0x12>
   18f30:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   18f34:	2a2b      	cmp	r2, #43	; 0x2b
   18f36:	d1e2      	bne.n	18efe <__gnu_end_cleanup+0x12>
   18f38:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   18f3c:	2a01      	cmp	r2, #1
   18f3e:	d8de      	bhi.n	18efe <__gnu_end_cleanup+0x12>
   18f40:	69da      	ldr	r2, [r3, #28]
   18f42:	3a01      	subs	r2, #1
   18f44:	61da      	str	r2, [r3, #28]
   18f46:	2a00      	cmp	r2, #0
   18f48:	d1db      	bne.n	18f02 <__gnu_end_cleanup+0x16>
   18f4a:	6999      	ldr	r1, [r3, #24]
   18f4c:	6081      	str	r1, [r0, #8]
   18f4e:	2200      	movs	r2, #0
   18f50:	619a      	str	r2, [r3, #24]
   18f52:	f103 0020 	add.w	r0, r3, #32
   18f56:	bd08      	pop	{r3, pc}
   18f58:	f000 fb36 	bl	195c8 <std::terminate()>

00018f5c <std::exception::~exception()>:
   18f5c:	4770      	bx	lr
   18f5e:	bf00      	nop

00018f60 <std::bad_exception::~bad_exception()>:
   18f60:	4770      	bx	lr
   18f62:	bf00      	nop

00018f64 <transaction clone for std::bad_exception::what() const>:
   18f64:	4800      	ldr	r0, [pc, #0]	; (18f68 <transaction clone for std::bad_exception::what() const+0x4>)
   18f66:	4770      	bx	lr
   18f68:	20001154 	.word	0x20001154

00018f6c <std::bad_exception::~bad_exception()>:
   18f6c:	b510      	push	{r4, lr}
   18f6e:	2104      	movs	r1, #4
   18f70:	4604      	mov	r4, r0
   18f72:	f7fd fbb5 	bl	166e0 <operator delete(void*, unsigned int)>
   18f76:	4620      	mov	r0, r4
   18f78:	bd10      	pop	{r4, pc}
   18f7a:	bf00      	nop

00018f7c <__cxa_get_globals_fast>:
   18f7c:	4800      	ldr	r0, [pc, #0]	; (18f80 <__cxa_get_globals_fast+0x4>)
   18f7e:	4770      	bx	lr
   18f80:	20004fb0 	.word	0x20004fb0

00018f84 <__cxa_get_globals>:
   18f84:	4800      	ldr	r0, [pc, #0]	; (18f88 <__cxa_get_globals+0x4>)
   18f86:	4770      	bx	lr
   18f88:	20004fb0 	.word	0x20004fb0

00018f8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>:
   18f8c:	2850      	cmp	r0, #80	; 0x50
   18f8e:	b570      	push	{r4, r5, r6, lr}
   18f90:	d01d      	beq.n	18fce <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x42>
   18f92:	4684      	mov	ip, r0
   18f94:	f000 000f 	and.w	r0, r0, #15
   18f98:	280c      	cmp	r0, #12
   18f9a:	d855      	bhi.n	19048 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xbc>
   18f9c:	e8df f000 	tbb	[pc, r0]
   18fa0:	07264407 	.word	0x07264407
   18fa4:	5454541e 	.word	0x5454541e
   18fa8:	07222a54 	.word	0x07222a54
   18fac:	1e          	.byte	0x1e
   18fad:	00          	.byte	0x00
   18fae:	4610      	mov	r0, r2
   18fb0:	f850 6b04 	ldr.w	r6, [r0], #4
   18fb4:	b14e      	cbz	r6, 18fca <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x3e>
   18fb6:	f00c 0470 	and.w	r4, ip, #112	; 0x70
   18fba:	2c10      	cmp	r4, #16
   18fbc:	bf08      	it	eq
   18fbe:	4611      	moveq	r1, r2
   18fc0:	440e      	add	r6, r1
   18fc2:	f01c 0f80 	tst.w	ip, #128	; 0x80
   18fc6:	bf18      	it	ne
   18fc8:	6836      	ldrne	r6, [r6, #0]
   18fca:	601e      	str	r6, [r3, #0]
   18fcc:	bd70      	pop	{r4, r5, r6, pc}
   18fce:	1cd0      	adds	r0, r2, #3
   18fd0:	f020 0003 	bic.w	r0, r0, #3
   18fd4:	f850 6b04 	ldr.w	r6, [r0], #4
   18fd8:	601e      	str	r6, [r3, #0]
   18fda:	bd70      	pop	{r4, r5, r6, pc}
   18fdc:	4610      	mov	r0, r2
   18fde:	f850 6b08 	ldr.w	r6, [r0], #8
   18fe2:	e7e7      	b.n	18fb4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   18fe4:	4610      	mov	r0, r2
   18fe6:	f930 6b02 	ldrsh.w	r6, [r0], #2
   18fea:	e7e3      	b.n	18fb4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   18fec:	4610      	mov	r0, r2
   18fee:	f830 6b02 	ldrh.w	r6, [r0], #2
   18ff2:	e7df      	b.n	18fb4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   18ff4:	2600      	movs	r6, #0
   18ff6:	4610      	mov	r0, r2
   18ff8:	4634      	mov	r4, r6
   18ffa:	f810 5b01 	ldrb.w	r5, [r0], #1
   18ffe:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   19002:	fa0e fe04 	lsl.w	lr, lr, r4
   19006:	f015 0f80 	tst.w	r5, #128	; 0x80
   1900a:	ea46 060e 	orr.w	r6, r6, lr
   1900e:	f104 0407 	add.w	r4, r4, #7
   19012:	d1f2      	bne.n	18ffa <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x6e>
   19014:	2c1f      	cmp	r4, #31
   19016:	d8cd      	bhi.n	18fb4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19018:	066d      	lsls	r5, r5, #25
   1901a:	d5cb      	bpl.n	18fb4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   1901c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   19020:	fa05 f404 	lsl.w	r4, r5, r4
   19024:	4326      	orrs	r6, r4
   19026:	e7c6      	b.n	18fb6 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x2a>
   19028:	2600      	movs	r6, #0
   1902a:	4610      	mov	r0, r2
   1902c:	4634      	mov	r4, r6
   1902e:	f810 5b01 	ldrb.w	r5, [r0], #1
   19032:	f005 0e7f 	and.w	lr, r5, #127	; 0x7f
   19036:	fa0e fe04 	lsl.w	lr, lr, r4
   1903a:	062d      	lsls	r5, r5, #24
   1903c:	ea46 060e 	orr.w	r6, r6, lr
   19040:	f104 0407 	add.w	r4, r4, #7
   19044:	d4f3      	bmi.n	1902e <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0xa2>
   19046:	e7b5      	b.n	18fb4 <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)+0x28>
   19048:	f7fd fedc 	bl	16e04 <abort>

0001904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>:
   1904c:	28ff      	cmp	r0, #255	; 0xff
   1904e:	b508      	push	{r3, lr}
   19050:	4603      	mov	r3, r0
   19052:	d019      	beq.n	19088 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
   19054:	f003 0270 	and.w	r2, r3, #112	; 0x70
   19058:	2a30      	cmp	r2, #48	; 0x30
   1905a:	4608      	mov	r0, r1
   1905c:	d016      	beq.n	1908c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x40>
   1905e:	d805      	bhi.n	1906c <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x20>
   19060:	2a20      	cmp	r2, #32
   19062:	d109      	bne.n	19078 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x2c>
   19064:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19068:	f008 b823 	b.w	210b2 <_Unwind_GetTextRelBase>
   1906c:	2a40      	cmp	r2, #64	; 0x40
   1906e:	d109      	bne.n	19084 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x38>
   19070:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19074:	f008 b80a 	b.w	2108c <_Unwind_GetRegionStart>
   19078:	d802      	bhi.n	19080 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
   1907a:	f013 0f60 	tst.w	r3, #96	; 0x60
   1907e:	d003      	beq.n	19088 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x3c>
   19080:	f7fd fec0 	bl	16e04 <abort>
   19084:	2a50      	cmp	r2, #80	; 0x50
   19086:	d1fb      	bne.n	19080 <base_of_encoded_value(unsigned char, _Unwind_Context*)+0x34>
   19088:	2000      	movs	r0, #0
   1908a:	bd08      	pop	{r3, pc}
   1908c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   19090:	f008 b80c 	b.w	210ac <_Unwind_GetDataRelBase>

00019094 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>:
   19094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19096:	460c      	mov	r4, r1
   19098:	4615      	mov	r5, r2
   1909a:	4606      	mov	r6, r0
   1909c:	b108      	cbz	r0, 190a2 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0xe>
   1909e:	f007 fff5 	bl	2108c <_Unwind_GetRegionStart>
   190a2:	6028      	str	r0, [r5, #0]
   190a4:	f814 7b01 	ldrb.w	r7, [r4], #1
   190a8:	2fff      	cmp	r7, #255	; 0xff
   190aa:	d128      	bne.n	190fe <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x6a>
   190ac:	6068      	str	r0, [r5, #4]
   190ae:	4620      	mov	r0, r4
   190b0:	f810 3b01 	ldrb.w	r3, [r0], #1
   190b4:	2bff      	cmp	r3, #255	; 0xff
   190b6:	d032      	beq.n	1911e <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x8a>
   190b8:	2310      	movs	r3, #16
   190ba:	2400      	movs	r4, #0
   190bc:	752b      	strb	r3, [r5, #20]
   190be:	4622      	mov	r2, r4
   190c0:	f810 1b01 	ldrb.w	r1, [r0], #1
   190c4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   190c8:	4093      	lsls	r3, r2
   190ca:	0609      	lsls	r1, r1, #24
   190cc:	ea44 0403 	orr.w	r4, r4, r3
   190d0:	f102 0207 	add.w	r2, r2, #7
   190d4:	d4f4      	bmi.n	190c0 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x2c>
   190d6:	4404      	add	r4, r0
   190d8:	60ec      	str	r4, [r5, #12]
   190da:	f810 3b01 	ldrb.w	r3, [r0], #1
   190de:	756b      	strb	r3, [r5, #21]
   190e0:	2400      	movs	r4, #0
   190e2:	4622      	mov	r2, r4
   190e4:	f810 1b01 	ldrb.w	r1, [r0], #1
   190e8:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   190ec:	4093      	lsls	r3, r2
   190ee:	431c      	orrs	r4, r3
   190f0:	060b      	lsls	r3, r1, #24
   190f2:	f102 0207 	add.w	r2, r2, #7
   190f6:	d4f5      	bmi.n	190e4 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x50>
   190f8:	4404      	add	r4, r0
   190fa:	612c      	str	r4, [r5, #16]
   190fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   190fe:	4631      	mov	r1, r6
   19100:	4638      	mov	r0, r7
   19102:	f7ff ffa3 	bl	1904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   19106:	4622      	mov	r2, r4
   19108:	4601      	mov	r1, r0
   1910a:	1d2b      	adds	r3, r5, #4
   1910c:	4638      	mov	r0, r7
   1910e:	f7ff ff3d 	bl	18f8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   19112:	4604      	mov	r4, r0
   19114:	4620      	mov	r0, r4
   19116:	f810 3b01 	ldrb.w	r3, [r0], #1
   1911a:	2bff      	cmp	r3, #255	; 0xff
   1911c:	d1cc      	bne.n	190b8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x24>
   1911e:	752b      	strb	r3, [r5, #20]
   19120:	2400      	movs	r4, #0
   19122:	e7d9      	b.n	190d8 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)+0x44>

00019124 <__gxx_personality_v0>:
   19124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19128:	f000 0403 	and.w	r4, r0, #3
   1912c:	b093      	sub	sp, #76	; 0x4c
   1912e:	2300      	movs	r3, #0
   19130:	2c01      	cmp	r4, #1
   19132:	9308      	str	r3, [sp, #32]
   19134:	460f      	mov	r7, r1
   19136:	4690      	mov	r8, r2
   19138:	d013      	beq.n	19162 <__gxx_personality_v0+0x3e>
   1913a:	2c02      	cmp	r4, #2
   1913c:	d108      	bne.n	19150 <__gxx_personality_v0+0x2c>
   1913e:	4641      	mov	r1, r8
   19140:	4638      	mov	r0, r7
   19142:	f007 ff8d 	bl	21060 <__gnu_unwind_frame>
   19146:	b940      	cbnz	r0, 1915a <__gxx_personality_v0+0x36>
   19148:	2008      	movs	r0, #8
   1914a:	b013      	add	sp, #76	; 0x4c
   1914c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19150:	2c00      	cmp	r4, #0
   19152:	f000 8093 	beq.w	1927c <__gxx_personality_v0+0x158>
   19156:	f7fd fe55 	bl	16e04 <abort>
   1915a:	2009      	movs	r0, #9
   1915c:	b013      	add	sp, #76	; 0x4c
   1915e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19162:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   19166:	f010 0408 	ands.w	r4, r0, #8
   1916a:	f8cd a000 	str.w	sl, [sp]
   1916e:	f000 809a 	beq.w	192a6 <__gxx_personality_v0+0x182>
   19172:	f044 0202 	orr.w	r2, r4, #2
   19176:	9202      	str	r2, [sp, #8]
   19178:	910c      	str	r1, [sp, #48]	; 0x30
   1917a:	220c      	movs	r2, #12
   1917c:	4619      	mov	r1, r3
   1917e:	4640      	mov	r0, r8
   19180:	f007 fa08 	bl	20594 <_Unwind_VRS_Set>
   19184:	4640      	mov	r0, r8
   19186:	f007 ff87 	bl	21098 <_Unwind_GetLanguageSpecificData>
   1918a:	4683      	mov	fp, r0
   1918c:	2800      	cmp	r0, #0
   1918e:	d0d6      	beq.n	1913e <__gxx_personality_v0+0x1a>
   19190:	4652      	mov	r2, sl
   19192:	4601      	mov	r1, r0
   19194:	4640      	mov	r0, r8
   19196:	f7ff ff7d 	bl	19094 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
   1919a:	4641      	mov	r1, r8
   1919c:	4605      	mov	r5, r0
   1919e:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   191a2:	f7ff ff53 	bl	1904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   191a6:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   191aa:	2300      	movs	r3, #0
   191ac:	900e      	str	r0, [sp, #56]	; 0x38
   191ae:	4619      	mov	r1, r3
   191b0:	f8cd 9000 	str.w	r9, [sp]
   191b4:	220f      	movs	r2, #15
   191b6:	4640      	mov	r0, r8
   191b8:	f007 f9c6 	bl	20548 <_Unwind_VRS_Get>
   191bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   191be:	f023 0301 	bic.w	r3, r3, #1
   191c2:	1e5e      	subs	r6, r3, #1
   191c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   191c6:	429d      	cmp	r5, r3
   191c8:	f080 80bd 	bcs.w	19346 <__gxx_personality_v0+0x222>
   191cc:	f89d 4045 	ldrb.w	r4, [sp, #69]	; 0x45
   191d0:	2100      	movs	r1, #0
   191d2:	4620      	mov	r0, r4
   191d4:	f7ff ff3a 	bl	1904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   191d8:	462a      	mov	r2, r5
   191da:	4601      	mov	r1, r0
   191dc:	ab09      	add	r3, sp, #36	; 0x24
   191de:	4620      	mov	r0, r4
   191e0:	f7ff fed4 	bl	18f8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   191e4:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   191e8:	4604      	mov	r4, r0
   191ea:	2100      	movs	r1, #0
   191ec:	4628      	mov	r0, r5
   191ee:	f7ff ff2d 	bl	1904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   191f2:	4622      	mov	r2, r4
   191f4:	4601      	mov	r1, r0
   191f6:	ab0a      	add	r3, sp, #40	; 0x28
   191f8:	4628      	mov	r0, r5
   191fa:	f7ff fec7 	bl	18f8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   191fe:	f89d 5045 	ldrb.w	r5, [sp, #69]	; 0x45
   19202:	4604      	mov	r4, r0
   19204:	2100      	movs	r1, #0
   19206:	4628      	mov	r0, r5
   19208:	f7ff ff20 	bl	1904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   1920c:	4622      	mov	r2, r4
   1920e:	4601      	mov	r1, r0
   19210:	464b      	mov	r3, r9
   19212:	4628      	mov	r0, r5
   19214:	f7ff feba 	bl	18f8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   19218:	2400      	movs	r4, #0
   1921a:	4605      	mov	r5, r0
   1921c:	4622      	mov	r2, r4
   1921e:	f815 1b01 	ldrb.w	r1, [r5], #1
   19222:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   19226:	4093      	lsls	r3, r2
   19228:	431c      	orrs	r4, r3
   1922a:	060b      	lsls	r3, r1, #24
   1922c:	f102 0207 	add.w	r2, r2, #7
   19230:	d4f5      	bmi.n	1921e <__gxx_personality_v0+0xfa>
   19232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19234:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19236:	4413      	add	r3, r2
   19238:	42b3      	cmp	r3, r6
   1923a:	d917      	bls.n	1926c <__gxx_personality_v0+0x148>
   1923c:	9b02      	ldr	r3, [sp, #8]
   1923e:	07d8      	lsls	r0, r3, #31
   19240:	d52d      	bpl.n	1929e <__gxx_personality_v0+0x17a>
   19242:	2400      	movs	r4, #0
   19244:	9403      	str	r4, [sp, #12]
   19246:	2300      	movs	r3, #0
   19248:	4619      	mov	r1, r3
   1924a:	f8cd 9000 	str.w	r9, [sp]
   1924e:	4640      	mov	r0, r8
   19250:	220d      	movs	r2, #13
   19252:	9d08      	ldr	r5, [sp, #32]
   19254:	f007 f978 	bl	20548 <_Unwind_VRS_Get>
   19258:	9b03      	ldr	r3, [sp, #12]
   1925a:	633b      	str	r3, [r7, #48]	; 0x30
   1925c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1925e:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
   19262:	e9c7 5409 	strd	r5, r4, [r7, #36]	; 0x24
   19266:	2006      	movs	r0, #6
   19268:	623b      	str	r3, [r7, #32]
   1926a:	e76e      	b.n	1914a <__gxx_personality_v0+0x26>
   1926c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1926e:	4413      	add	r3, r2
   19270:	42b3      	cmp	r3, r6
   19272:	d872      	bhi.n	1935a <__gxx_personality_v0+0x236>
   19274:	9b10      	ldr	r3, [sp, #64]	; 0x40
   19276:	42ab      	cmp	r3, r5
   19278:	d8a8      	bhi.n	191cc <__gxx_personality_v0+0xa8>
   1927a:	e7df      	b.n	1923c <__gxx_personality_v0+0x118>
   1927c:	0702      	lsls	r2, r0, #28
   1927e:	f53f af5e 	bmi.w	1913e <__gxx_personality_v0+0x1a>
   19282:	2301      	movs	r3, #1
   19284:	9302      	str	r3, [sp, #8]
   19286:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
   1928a:	2300      	movs	r3, #0
   1928c:	f8cd a000 	str.w	sl, [sp]
   19290:	220c      	movs	r2, #12
   19292:	4619      	mov	r1, r3
   19294:	4640      	mov	r0, r8
   19296:	970c      	str	r7, [sp, #48]	; 0x30
   19298:	f007 f97c 	bl	20594 <_Unwind_VRS_Set>
   1929c:	e772      	b.n	19184 <__gxx_personality_v0+0x60>
   1929e:	0719      	lsls	r1, r3, #28
   192a0:	d558      	bpl.n	19354 <__gxx_personality_v0+0x230>
   192a2:	f000 f991 	bl	195c8 <std::terminate()>
   192a6:	6a0d      	ldr	r5, [r1, #32]
   192a8:	4623      	mov	r3, r4
   192aa:	220d      	movs	r2, #13
   192ac:	4621      	mov	r1, r4
   192ae:	4640      	mov	r0, r8
   192b0:	f007 f94a 	bl	20548 <_Unwind_VRS_Get>
   192b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   192b6:	429d      	cmp	r5, r3
   192b8:	d002      	beq.n	192c0 <__gxx_personality_v0+0x19c>
   192ba:	2302      	movs	r3, #2
   192bc:	9302      	str	r3, [sp, #8]
   192be:	e7e4      	b.n	1928a <__gxx_personality_v0+0x166>
   192c0:	4623      	mov	r3, r4
   192c2:	4621      	mov	r1, r4
   192c4:	220c      	movs	r2, #12
   192c6:	f8cd a000 	str.w	sl, [sp]
   192ca:	4640      	mov	r0, r8
   192cc:	970c      	str	r7, [sp, #48]	; 0x30
   192ce:	f007 f961 	bl	20594 <_Unwind_VRS_Set>
   192d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   192d4:	9203      	str	r2, [sp, #12]
   192d6:	e9d7 430a 	ldrd	r4, r3, [r7, #40]	; 0x28
   192da:	2a00      	cmp	r2, #0
   192dc:	d03a      	beq.n	19354 <__gxx_personality_v0+0x230>
   192de:	469b      	mov	fp, r3
   192e0:	f10d 092c 	add.w	r9, sp, #44	; 0x2c
   192e4:	2c00      	cmp	r4, #0
   192e6:	db54      	blt.n	19392 <__gxx_personality_v0+0x26e>
   192e8:	2503      	movs	r5, #3
   192ea:	2300      	movs	r3, #0
   192ec:	461a      	mov	r2, r3
   192ee:	4619      	mov	r1, r3
   192f0:	f8cd 9000 	str.w	r9, [sp]
   192f4:	4640      	mov	r0, r8
   192f6:	970b      	str	r7, [sp, #44]	; 0x2c
   192f8:	f007 f94c 	bl	20594 <_Unwind_VRS_Set>
   192fc:	2300      	movs	r3, #0
   192fe:	4619      	mov	r1, r3
   19300:	2201      	movs	r2, #1
   19302:	f8cd 9000 	str.w	r9, [sp]
   19306:	4640      	mov	r0, r8
   19308:	940b      	str	r4, [sp, #44]	; 0x2c
   1930a:	f007 f943 	bl	20594 <_Unwind_VRS_Set>
   1930e:	2300      	movs	r3, #0
   19310:	4619      	mov	r1, r3
   19312:	220f      	movs	r2, #15
   19314:	f8cd 9000 	str.w	r9, [sp]
   19318:	4640      	mov	r0, r8
   1931a:	f007 f915 	bl	20548 <_Unwind_VRS_Get>
   1931e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19320:	9903      	ldr	r1, [sp, #12]
   19322:	f8cd 9000 	str.w	r9, [sp]
   19326:	f002 0201 	and.w	r2, r2, #1
   1932a:	430a      	orrs	r2, r1
   1932c:	2300      	movs	r3, #0
   1932e:	920b      	str	r2, [sp, #44]	; 0x2c
   19330:	4640      	mov	r0, r8
   19332:	220f      	movs	r2, #15
   19334:	4619      	mov	r1, r3
   19336:	f007 f92d 	bl	20594 <_Unwind_VRS_Set>
   1933a:	2d02      	cmp	r5, #2
   1933c:	d024      	beq.n	19388 <__gxx_personality_v0+0x264>
   1933e:	2007      	movs	r0, #7
   19340:	b013      	add	sp, #76	; 0x4c
   19342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19346:	9b02      	ldr	r3, [sp, #8]
   19348:	07de      	lsls	r6, r3, #31
   1934a:	f53f af7a 	bmi.w	19242 <__gxx_personality_v0+0x11e>
   1934e:	9b02      	ldr	r3, [sp, #8]
   19350:	071b      	lsls	r3, r3, #28
   19352:	d4a6      	bmi.n	192a2 <__gxx_personality_v0+0x17e>
   19354:	4638      	mov	r0, r7
   19356:	f006 fca7 	bl	1fca8 <__cxa_call_terminate>
   1935a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1935c:	2b00      	cmp	r3, #0
   1935e:	f43f aeee 	beq.w	1913e <__gxx_personality_v0+0x1a>
   19362:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19364:	4413      	add	r3, r2
   19366:	9303      	str	r3, [sp, #12]
   19368:	2c00      	cmp	r4, #0
   1936a:	d136      	bne.n	193da <__gxx_personality_v0+0x2b6>
   1936c:	2b00      	cmp	r3, #0
   1936e:	f43f aee6 	beq.w	1913e <__gxx_personality_v0+0x1a>
   19372:	9b02      	ldr	r3, [sp, #8]
   19374:	07dd      	lsls	r5, r3, #31
   19376:	f53f aee2 	bmi.w	1913e <__gxx_personality_v0+0x1a>
   1937a:	9b02      	ldr	r3, [sp, #8]
   1937c:	071a      	lsls	r2, r3, #28
   1937e:	f140 8116 	bpl.w	195ae <__gxx_personality_v0+0x48a>
   19382:	2400      	movs	r4, #0
   19384:	2502      	movs	r5, #2
   19386:	e7b0      	b.n	192ea <__gxx_personality_v0+0x1c6>
   19388:	4638      	mov	r0, r7
   1938a:	f7ff fd7d 	bl	18e88 <__cxa_begin_cleanup>
   1938e:	2007      	movs	r0, #7
   19390:	e6db      	b.n	1914a <__gxx_personality_v0+0x26>
   19392:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
   19396:	1b1b      	subs	r3, r3, r4
   19398:	461e      	mov	r6, r3
   1939a:	4652      	mov	r2, sl
   1939c:	4659      	mov	r1, fp
   1939e:	4640      	mov	r0, r8
   193a0:	f7ff fe78 	bl	19094 <parse_lsda_header(_Unwind_Context*, unsigned char const*, lsda_header_info*)>
   193a4:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   193a8:	4641      	mov	r1, r8
   193aa:	f7ff fe4f 	bl	1904c <base_of_encoded_value(unsigned char, _Unwind_Context*)>
   193ae:	900e      	str	r0, [sp, #56]	; 0x38
   193b0:	4605      	mov	r5, r0
   193b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   193b4:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
   193b8:	eb00 0086 	add.w	r0, r0, r6, lsl #2
   193bc:	b133      	cbz	r3, 193cc <__gxx_personality_v0+0x2a8>
   193be:	4602      	mov	r2, r0
   193c0:	2300      	movs	r3, #0
   193c2:	f852 1f04 	ldr.w	r1, [r2, #4]!
   193c6:	3301      	adds	r3, #1
   193c8:	2900      	cmp	r1, #0
   193ca:	d1fa      	bne.n	193c2 <__gxx_personality_v0+0x29e>
   193cc:	e9c7 350a 	strd	r3, r5, [r7, #40]	; 0x28
   193d0:	2304      	movs	r3, #4
   193d2:	6378      	str	r0, [r7, #52]	; 0x34
   193d4:	633b      	str	r3, [r7, #48]	; 0x30
   193d6:	2503      	movs	r5, #3
   193d8:	e787      	b.n	192ea <__gxx_personality_v0+0x1c6>
   193da:	9e10      	ldr	r6, [sp, #64]	; 0x40
   193dc:	9b03      	ldr	r3, [sp, #12]
   193de:	3c01      	subs	r4, #1
   193e0:	4426      	add	r6, r4
   193e2:	2b00      	cmp	r3, #0
   193e4:	f43f aeab 	beq.w	1913e <__gxx_personality_v0+0x1a>
   193e8:	9b02      	ldr	r3, [sp, #8]
   193ea:	2e00      	cmp	r6, #0
   193ec:	f000 80d7 	beq.w	1959e <__gxx_personality_v0+0x47a>
   193f0:	f013 0308 	ands.w	r3, r3, #8
   193f4:	9304      	str	r3, [sp, #16]
   193f6:	f000 80c9 	beq.w	1958c <__gxx_personality_v0+0x468>
   193fa:	2347      	movs	r3, #71	; 0x47
   193fc:	703b      	strb	r3, [r7, #0]
   193fe:	234e      	movs	r3, #78	; 0x4e
   19400:	707b      	strb	r3, [r7, #1]
   19402:	2355      	movs	r3, #85	; 0x55
   19404:	70bb      	strb	r3, [r7, #2]
   19406:	2343      	movs	r3, #67	; 0x43
   19408:	70fb      	strb	r3, [r7, #3]
   1940a:	2346      	movs	r3, #70	; 0x46
   1940c:	713b      	strb	r3, [r7, #4]
   1940e:	234f      	movs	r3, #79	; 0x4f
   19410:	717b      	strb	r3, [r7, #5]
   19412:	2352      	movs	r3, #82	; 0x52
   19414:	71bb      	strb	r3, [r7, #6]
   19416:	2300      	movs	r3, #0
   19418:	71fb      	strb	r3, [r7, #7]
   1941a:	2300      	movs	r3, #0
   1941c:	f8cd b018 	str.w	fp, [sp, #24]
   19420:	f8cd 8014 	str.w	r8, [sp, #20]
   19424:	469b      	mov	fp, r3
   19426:	f8cd a01c 	str.w	sl, [sp, #28]
   1942a:	2400      	movs	r4, #0
   1942c:	4622      	mov	r2, r4
   1942e:	f816 1b01 	ldrb.w	r1, [r6], #1
   19432:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   19436:	4093      	lsls	r3, r2
   19438:	0608      	lsls	r0, r1, #24
   1943a:	ea44 0403 	orr.w	r4, r4, r3
   1943e:	f102 0207 	add.w	r2, r2, #7
   19442:	d4f4      	bmi.n	1942e <__gxx_personality_v0+0x30a>
   19444:	2a1f      	cmp	r2, #31
   19446:	d805      	bhi.n	19454 <__gxx_personality_v0+0x330>
   19448:	0649      	lsls	r1, r1, #25
   1944a:	d503      	bpl.n	19454 <__gxx_personality_v0+0x330>
   1944c:	2301      	movs	r3, #1
   1944e:	4093      	lsls	r3, r2
   19450:	425b      	negs	r3, r3
   19452:	431c      	orrs	r4, r3
   19454:	2500      	movs	r5, #0
   19456:	4630      	mov	r0, r6
   19458:	462a      	mov	r2, r5
   1945a:	f810 1b01 	ldrb.w	r1, [r0], #1
   1945e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
   19462:	4093      	lsls	r3, r2
   19464:	431d      	orrs	r5, r3
   19466:	060b      	lsls	r3, r1, #24
   19468:	f102 0207 	add.w	r2, r2, #7
   1946c:	d4f5      	bmi.n	1945a <__gxx_personality_v0+0x336>
   1946e:	2a1f      	cmp	r2, #31
   19470:	d805      	bhi.n	1947e <__gxx_personality_v0+0x35a>
   19472:	064b      	lsls	r3, r1, #25
   19474:	d503      	bpl.n	1947e <__gxx_personality_v0+0x35a>
   19476:	2301      	movs	r3, #1
   19478:	4093      	lsls	r3, r2
   1947a:	425b      	negs	r3, r3
   1947c:	431d      	orrs	r5, r3
   1947e:	2c00      	cmp	r4, #0
   19480:	d034      	beq.n	194ec <__gxx_personality_v0+0x3c8>
   19482:	dc36      	bgt.n	194f2 <__gxx_personality_v0+0x3ce>
   19484:	b117      	cbz	r7, 1948c <__gxx_personality_v0+0x368>
   19486:	9b04      	ldr	r3, [sp, #16]
   19488:	2b00      	cmp	r3, #0
   1948a:	d04f      	beq.n	1952c <__gxx_personality_v0+0x408>
   1948c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   19490:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19492:	ebaa 0a04 	sub.w	sl, sl, r4
   19496:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
   1949a:	b1b3      	cbz	r3, 194ca <__gxx_personality_v0+0x3a6>
   1949c:	2d00      	cmp	r5, #0
   1949e:	d06a      	beq.n	19576 <__gxx_personality_v0+0x452>
   194a0:	442e      	add	r6, r5
   194a2:	e7c2      	b.n	1942a <__gxx_personality_v0+0x306>
   194a4:	00a3      	lsls	r3, r4, #2
   194a6:	425b      	negs	r3, r3
   194a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   194aa:	990e      	ldr	r1, [sp, #56]	; 0x38
   194ac:	441a      	add	r2, r3
   194ae:	464b      	mov	r3, r9
   194b0:	f7ff fd6c 	bl	18f8c <read_encoded_value_with_base(unsigned char, unsigned int, unsigned char const*, unsigned int*)>
   194b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   194b6:	b141      	cbz	r1, 194ca <__gxx_personality_v0+0x3a6>
   194b8:	2f00      	cmp	r7, #0
   194ba:	d0ef      	beq.n	1949c <__gxx_personality_v0+0x378>
   194bc:	ab08      	add	r3, sp, #32
   194be:	2200      	movs	r2, #0
   194c0:	4638      	mov	r0, r7
   194c2:	f7ff fc89 	bl	18dd8 <__cxa_type_match>
   194c6:	2800      	cmp	r0, #0
   194c8:	d0e8      	beq.n	1949c <__gxx_personality_v0+0x378>
   194ca:	9b02      	ldr	r3, [sp, #8]
   194cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
   194d0:	07db      	lsls	r3, r3, #31
   194d2:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
   194d6:	f53f aeb6 	bmi.w	19246 <__gxx_personality_v0+0x122>
   194da:	9b04      	ldr	r3, [sp, #16]
   194dc:	2b00      	cmp	r3, #0
   194de:	f43f af01 	beq.w	192e4 <__gxx_personality_v0+0x1c0>
   194e2:	2c00      	cmp	r4, #0
   194e4:	f6bf af00 	bge.w	192e8 <__gxx_personality_v0+0x1c4>
   194e8:	f000 f87c 	bl	195e4 <std::unexpected()>
   194ec:	f04f 0b01 	mov.w	fp, #1
   194f0:	e7d4      	b.n	1949c <__gxx_personality_v0+0x378>
   194f2:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   194f6:	28ff      	cmp	r0, #255	; 0xff
   194f8:	d031      	beq.n	1955e <__gxx_personality_v0+0x43a>
   194fa:	f000 0307 	and.w	r3, r0, #7
   194fe:	2b04      	cmp	r3, #4
   19500:	f63f ae29 	bhi.w	19156 <__gxx_personality_v0+0x32>
   19504:	a201      	add	r2, pc, #4	; (adr r2, 1950c <__gxx_personality_v0+0x3e8>)
   19506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1950a:	bf00      	nop
   1950c:	000194a5 	.word	0x000194a5
   19510:	00019157 	.word	0x00019157
   19514:	00019527 	.word	0x00019527
   19518:	000194a5 	.word	0x000194a5
   1951c:	00019521 	.word	0x00019521
   19520:	00e3      	lsls	r3, r4, #3
   19522:	425b      	negs	r3, r3
   19524:	e7c0      	b.n	194a8 <__gxx_personality_v0+0x384>
   19526:	0063      	lsls	r3, r4, #1
   19528:	425b      	negs	r3, r3
   1952a:	e7bd      	b.n	194a8 <__gxx_personality_v0+0x384>
   1952c:	f06f 4a40 	mvn.w	sl, #3221225472	; 0xc0000000
   19530:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19532:	9a08      	ldr	r2, [sp, #32]
   19534:	920b      	str	r2, [sp, #44]	; 0x2c
   19536:	ebaa 0a04 	sub.w	sl, sl, r4
   1953a:	eb03 088a 	add.w	r8, r3, sl, lsl #2
   1953e:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
   19542:	b919      	cbnz	r1, 1954c <__gxx_personality_v0+0x428>
   19544:	e00d      	b.n	19562 <__gxx_personality_v0+0x43e>
   19546:	f858 1f04 	ldr.w	r1, [r8, #4]!
   1954a:	b151      	cbz	r1, 19562 <__gxx_personality_v0+0x43e>
   1954c:	4441      	add	r1, r8
   1954e:	464b      	mov	r3, r9
   19550:	2200      	movs	r2, #0
   19552:	4638      	mov	r0, r7
   19554:	f7ff fc40 	bl	18dd8 <__cxa_type_match>
   19558:	2800      	cmp	r0, #0
   1955a:	d0f4      	beq.n	19546 <__gxx_personality_v0+0x422>
   1955c:	e79e      	b.n	1949c <__gxx_personality_v0+0x378>
   1955e:	2300      	movs	r3, #0
   19560:	e7a2      	b.n	194a8 <__gxx_personality_v0+0x384>
   19562:	9b02      	ldr	r3, [sp, #8]
   19564:	07d8      	lsls	r0, r3, #31
   19566:	4656      	mov	r6, sl
   19568:	e9dd 8b05 	ldrd	r8, fp, [sp, #20]
   1956c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   19570:	f53f ae69 	bmi.w	19246 <__gxx_personality_v0+0x122>
   19574:	e711      	b.n	1939a <__gxx_personality_v0+0x276>
   19576:	465b      	mov	r3, fp
   19578:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1957c:	2b00      	cmp	r3, #0
   1957e:	f43f adde 	beq.w	1913e <__gxx_personality_v0+0x1a>
   19582:	9b02      	ldr	r3, [sp, #8]
   19584:	07d9      	lsls	r1, r3, #31
   19586:	f53f adda 	bmi.w	1913e <__gxx_personality_v0+0x1a>
   1958a:	e6fa      	b.n	19382 <__gxx_personality_v0+0x25e>
   1958c:	79fb      	ldrb	r3, [r7, #7]
   1958e:	2b01      	cmp	r3, #1
   19590:	bf0c      	ite	eq
   19592:	f857 3c20 	ldreq.w	r3, [r7, #-32]
   19596:	f107 0358 	addne.w	r3, r7, #88	; 0x58
   1959a:	9308      	str	r3, [sp, #32]
   1959c:	e73d      	b.n	1941a <__gxx_personality_v0+0x2f6>
   1959e:	07da      	lsls	r2, r3, #31
   195a0:	f53f adcd 	bmi.w	1913e <__gxx_personality_v0+0x1a>
   195a4:	9b02      	ldr	r3, [sp, #8]
   195a6:	f013 0408 	ands.w	r4, r3, #8
   195aa:	f47f aeea 	bne.w	19382 <__gxx_personality_v0+0x25e>
   195ae:	2502      	movs	r5, #2
   195b0:	e69b      	b.n	192ea <__gxx_personality_v0+0x1c6>
   195b2:	f006 fbfb 	bl	1fdac <__cxa_begin_catch>
   195b6:	e674      	b.n	192a2 <__gxx_personality_v0+0x17e>

000195b8 <__cxxabiv1::__terminate(void (*)())>:
   195b8:	b508      	push	{r3, lr}
   195ba:	4780      	blx	r0
   195bc:	f7fd fc22 	bl	16e04 <abort>
   195c0:	f006 fbf4 	bl	1fdac <__cxa_begin_catch>
   195c4:	f7fd fc1e 	bl	16e04 <abort>

000195c8 <std::terminate()>:
   195c8:	b508      	push	{r3, lr}
   195ca:	4b03      	ldr	r3, [pc, #12]	; (195d8 <std::terminate()+0x10>)
   195cc:	6818      	ldr	r0, [r3, #0]
   195ce:	f3bf 8f5b 	dmb	ish
   195d2:	f7ff fff1 	bl	195b8 <__cxxabiv1::__terminate(void (*)())>
   195d6:	bf00      	nop
   195d8:	20003324 	.word	0x20003324

000195dc <__cxxabiv1::__unexpected(void (*)())>:
   195dc:	b508      	push	{r3, lr}
   195de:	4780      	blx	r0
   195e0:	f7ff fff2 	bl	195c8 <std::terminate()>

000195e4 <std::unexpected()>:
   195e4:	b508      	push	{r3, lr}
   195e6:	4b03      	ldr	r3, [pc, #12]	; (195f4 <std::unexpected()+0x10>)
   195e8:	6818      	ldr	r0, [r3, #0]
   195ea:	f3bf 8f5b 	dmb	ish
   195ee:	f7ff fff5 	bl	195dc <__cxxabiv1::__unexpected(void (*)())>
   195f2:	bf00      	nop
   195f4:	20003328 	.word	0x20003328

000195f8 <std::get_terminate()>:
   195f8:	4b02      	ldr	r3, [pc, #8]	; (19604 <std::get_terminate()+0xc>)
   195fa:	6818      	ldr	r0, [r3, #0]
   195fc:	f3bf 8f5b 	dmb	ish
   19600:	4770      	bx	lr
   19602:	bf00      	nop
   19604:	20003324 	.word	0x20003324

00019608 <std::get_unexpected()>:
   19608:	4b02      	ldr	r3, [pc, #8]	; (19614 <std::get_unexpected()+0xc>)
   1960a:	6818      	ldr	r0, [r3, #0]
   1960c:	f3bf 8f5b 	dmb	ish
   19610:	4770      	bx	lr
   19612:	bf00      	nop
   19614:	20003328 	.word	0x20003328

00019618 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)>:
   19618:	b500      	push	{lr}
   1961a:	2801      	cmp	r0, #1
   1961c:	b083      	sub	sp, #12
   1961e:	d81d      	bhi.n	1965c <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x44>
   19620:	f3bf 8f5b 	dmb	ish
   19624:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
   19628:	e853 2f00 	ldrex	r2, [r3]
   1962c:	3a01      	subs	r2, #1
   1962e:	e843 2000 	strex	r0, r2, [r3]
   19632:	2800      	cmp	r0, #0
   19634:	d1f8      	bne.n	19628 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x10>
   19636:	f3bf 8f5b 	dmb	ish
   1963a:	b962      	cbnz	r2, 19656 <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x3e>
   1963c:	f851 3c1c 	ldr.w	r3, [r1, #-28]
   19640:	f101 0058 	add.w	r0, r1, #88	; 0x58
   19644:	b113      	cbz	r3, 1964c <__gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Control_Block*)+0x34>
   19646:	9001      	str	r0, [sp, #4]
   19648:	4798      	blx	r3
   1964a:	9801      	ldr	r0, [sp, #4]
   1964c:	b003      	add	sp, #12
   1964e:	f85d eb04 	ldr.w	lr, [sp], #4
   19652:	f7ff bb97 	b.w	18d84 <__cxa_free_exception>
   19656:	b003      	add	sp, #12
   19658:	f85d fb04 	ldr.w	pc, [sp], #4
   1965c:	f851 0c14 	ldr.w	r0, [r1, #-20]
   19660:	f7ff ffaa 	bl	195b8 <__cxxabiv1::__terminate(void (*)())>

00019664 <__cxa_init_primary_exception>:
   19664:	b538      	push	{r3, r4, r5, lr}
   19666:	2500      	movs	r5, #0
   19668:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
   1966c:	f840 5c80 	str.w	r5, [r0, #-128]
   19670:	4604      	mov	r4, r0
   19672:	f7ff ffc9 	bl	19608 <std::get_unexpected()>
   19676:	f844 0c70 	str.w	r0, [r4, #-112]
   1967a:	f7ff ffbd 	bl	195f8 <std::get_terminate()>
   1967e:	2243      	movs	r2, #67	; 0x43
   19680:	232b      	movs	r3, #43	; 0x2b
   19682:	2147      	movs	r1, #71	; 0x47
   19684:	f804 2c55 	strb.w	r2, [r4, #-85]
   19688:	f804 2c54 	strb.w	r2, [r4, #-84]
   1968c:	f804 3c53 	strb.w	r3, [r4, #-83]
   19690:	f804 3c52 	strb.w	r3, [r4, #-82]
   19694:	224e      	movs	r2, #78	; 0x4e
   19696:	2355      	movs	r3, #85	; 0x55
   19698:	f804 1c58 	strb.w	r1, [r4, #-88]
   1969c:	f804 5c51 	strb.w	r5, [r4, #-81]
   196a0:	4905      	ldr	r1, [pc, #20]	; (196b8 <__cxa_init_primary_exception+0x54>)
   196a2:	f804 2c57 	strb.w	r2, [r4, #-87]
   196a6:	f804 3c56 	strb.w	r3, [r4, #-86]
   196aa:	f844 0c6c 	str.w	r0, [r4, #-108]
   196ae:	f844 1c50 	str.w	r1, [r4, #-80]
   196b2:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
   196b6:	bd38      	pop	{r3, r4, r5, pc}
   196b8:	00019619 	.word	0x00019619

000196bc <__cxa_throw>:
   196bc:	b510      	push	{r4, lr}
   196be:	b082      	sub	sp, #8
   196c0:	e9cd 2100 	strd	r2, r1, [sp]
   196c4:	4604      	mov	r4, r0
   196c6:	f7ff fc5d 	bl	18f84 <__cxa_get_globals>
   196ca:	4603      	mov	r3, r0
   196cc:	6840      	ldr	r0, [r0, #4]
   196ce:	9a00      	ldr	r2, [sp, #0]
   196d0:	9901      	ldr	r1, [sp, #4]
   196d2:	3001      	adds	r0, #1
   196d4:	6058      	str	r0, [r3, #4]
   196d6:	4620      	mov	r0, r4
   196d8:	f7ff ffc4 	bl	19664 <__cxa_init_primary_exception>
   196dc:	4604      	mov	r4, r0
   196de:	2301      	movs	r3, #1
   196e0:	f844 3b28 	str.w	r3, [r4], #40
   196e4:	4620      	mov	r0, r4
   196e6:	f007 faef 	bl	20cc8 <_Unwind_RaiseException>
   196ea:	4620      	mov	r0, r4
   196ec:	f006 fb5e 	bl	1fdac <__cxa_begin_catch>
   196f0:	f7ff ff6a 	bl	195c8 <std::terminate()>

000196f4 <__cxa_rethrow>:
   196f4:	b510      	push	{r4, lr}
   196f6:	f7ff fc45 	bl	18f84 <__cxa_get_globals>
   196fa:	e9d0 4200 	ldrd	r4, r2, [r0]
   196fe:	3201      	adds	r2, #1
   19700:	6042      	str	r2, [r0, #4]
   19702:	b164      	cbz	r4, 1971e <__cxa_rethrow+0x2a>
   19704:	f894 2020 	ldrb.w	r2, [r4, #32]
   19708:	2a47      	cmp	r2, #71	; 0x47
   1970a:	d00a      	beq.n	19722 <__cxa_rethrow+0x2e>
   1970c:	2200      	movs	r2, #0
   1970e:	6002      	str	r2, [r0, #0]
   19710:	3420      	adds	r4, #32
   19712:	4620      	mov	r0, r4
   19714:	f007 fafc 	bl	20d10 <_Unwind_Resume_or_Rethrow>
   19718:	4620      	mov	r0, r4
   1971a:	f006 fb47 	bl	1fdac <__cxa_begin_catch>
   1971e:	f7ff ff53 	bl	195c8 <std::terminate()>
   19722:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
   19726:	2a4e      	cmp	r2, #78	; 0x4e
   19728:	d1f0      	bne.n	1970c <__cxa_rethrow+0x18>
   1972a:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
   1972e:	2a55      	cmp	r2, #85	; 0x55
   19730:	d1ec      	bne.n	1970c <__cxa_rethrow+0x18>
   19732:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
   19736:	2a43      	cmp	r2, #67	; 0x43
   19738:	d1e8      	bne.n	1970c <__cxa_rethrow+0x18>
   1973a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1973e:	2a43      	cmp	r2, #67	; 0x43
   19740:	d1e4      	bne.n	1970c <__cxa_rethrow+0x18>
   19742:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
   19746:	2a2b      	cmp	r2, #43	; 0x2b
   19748:	d1e0      	bne.n	1970c <__cxa_rethrow+0x18>
   1974a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
   1974e:	2a2b      	cmp	r2, #43	; 0x2b
   19750:	d1dc      	bne.n	1970c <__cxa_rethrow+0x18>
   19752:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
   19756:	2a01      	cmp	r2, #1
   19758:	d8d8      	bhi.n	1970c <__cxa_rethrow+0x18>
   1975a:	6962      	ldr	r2, [r4, #20]
   1975c:	4252      	negs	r2, r2
   1975e:	6162      	str	r2, [r4, #20]
   19760:	e7d6      	b.n	19710 <__cxa_rethrow+0x1c>
   19762:	bf00      	nop

00019764 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   19764:	b510      	push	{r4, lr}
   19766:	4b03      	ldr	r3, [pc, #12]	; (19774 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x10>)
   19768:	6003      	str	r3, [r0, #0]
   1976a:	4604      	mov	r4, r0
   1976c:	f000 fa56 	bl	19c1c <__cxxabiv1::__class_type_info::~__class_type_info()>
   19770:	4620      	mov	r0, r4
   19772:	bd10      	pop	{r4, pc}
   19774:	20001694 	.word	0x20001694

00019778 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()>:
   19778:	b510      	push	{r4, lr}
   1977a:	4b05      	ldr	r3, [pc, #20]	; (19790 <__cxxabiv1::__si_class_type_info::~__si_class_type_info()+0x18>)
   1977c:	6003      	str	r3, [r0, #0]
   1977e:	4604      	mov	r4, r0
   19780:	f000 fa4c 	bl	19c1c <__cxxabiv1::__class_type_info::~__class_type_info()>
   19784:	4620      	mov	r0, r4
   19786:	210c      	movs	r1, #12
   19788:	f7fc ffaa 	bl	166e0 <operator delete(void*, unsigned int)>
   1978c:	4620      	mov	r0, r4
   1978e:	bd10      	pop	{r4, pc}
   19790:	20001694 	.word	0x20001694

00019794 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   19794:	b570      	push	{r4, r5, r6, lr}
   19796:	b082      	sub	sp, #8
   19798:	4604      	mov	r4, r0
   1979a:	9e06      	ldr	r6, [sp, #24]
   1979c:	4296      	cmp	r6, r2
   1979e:	460d      	mov	r5, r1
   197a0:	d009      	beq.n	197b6 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0x22>
   197a2:	68a0      	ldr	r0, [r4, #8]
   197a4:	6804      	ldr	r4, [r0, #0]
   197a6:	9606      	str	r6, [sp, #24]
   197a8:	6a24      	ldr	r4, [r4, #32]
   197aa:	4629      	mov	r1, r5
   197ac:	46a4      	mov	ip, r4
   197ae:	b002      	add	sp, #8
   197b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   197b4:	4760      	bx	ip
   197b6:	4619      	mov	r1, r3
   197b8:	9201      	str	r2, [sp, #4]
   197ba:	9300      	str	r3, [sp, #0]
   197bc:	f000 f860 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   197c0:	e9dd 3200 	ldrd	r3, r2, [sp]
   197c4:	2800      	cmp	r0, #0
   197c6:	d0ec      	beq.n	197a2 <__cxxabiv1::__si_class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const+0xe>
   197c8:	2006      	movs	r0, #6
   197ca:	b002      	add	sp, #8
   197cc:	bd70      	pop	{r4, r5, r6, pc}
   197ce:	bf00      	nop

000197d0 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   197d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197d4:	460c      	mov	r4, r1
   197d6:	b081      	sub	sp, #4
   197d8:	4619      	mov	r1, r3
   197da:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
   197de:	e9dd 870c 	ldrd	r8, r7, [sp, #48]	; 0x30
   197e2:	469b      	mov	fp, r3
   197e4:	4605      	mov	r5, r0
   197e6:	4692      	mov	sl, r2
   197e8:	f000 f84a 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   197ec:	b980      	cbnz	r0, 19810 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x40>
   197ee:	4546      	cmp	r6, r8
   197f0:	d022      	beq.n	19838 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x68>
   197f2:	68a8      	ldr	r0, [r5, #8]
   197f4:	4621      	mov	r1, r4
   197f6:	6804      	ldr	r4, [r0, #0]
   197f8:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
   197fc:	e9cd 690a 	strd	r6, r9, [sp, #40]	; 0x28
   19800:	69e4      	ldr	r4, [r4, #28]
   19802:	465b      	mov	r3, fp
   19804:	4652      	mov	r2, sl
   19806:	46a4      	mov	ip, r4
   19808:	b001      	add	sp, #4
   1980a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1980e:	4760      	bx	ip
   19810:	2c00      	cmp	r4, #0
   19812:	603e      	str	r6, [r7, #0]
   19814:	f887 a004 	strb.w	sl, [r7, #4]
   19818:	db09      	blt.n	1982e <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x5e>
   1981a:	4426      	add	r6, r4
   1981c:	45b0      	cmp	r8, r6
   1981e:	bf0c      	ite	eq
   19820:	2606      	moveq	r6, #6
   19822:	2601      	movne	r6, #1
   19824:	71be      	strb	r6, [r7, #6]
   19826:	2000      	movs	r0, #0
   19828:	b001      	add	sp, #4
   1982a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1982e:	3402      	adds	r4, #2
   19830:	d1f9      	bne.n	19826 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   19832:	2301      	movs	r3, #1
   19834:	71bb      	strb	r3, [r7, #6]
   19836:	e7f6      	b.n	19826 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   19838:	4649      	mov	r1, r9
   1983a:	4628      	mov	r0, r5
   1983c:	f000 f820 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   19840:	2800      	cmp	r0, #0
   19842:	d0d6      	beq.n	197f2 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x22>
   19844:	f887 a005 	strb.w	sl, [r7, #5]
   19848:	e7ed      	b.n	19826 <__cxxabiv1::__si_class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x56>
   1984a:	bf00      	nop

0001984c <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   1984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19850:	4606      	mov	r6, r0
   19852:	460f      	mov	r7, r1
   19854:	4614      	mov	r4, r2
   19856:	461d      	mov	r5, r3
   19858:	f000 fa1a 	bl	19c90 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>
   1985c:	b948      	cbnz	r0, 19872 <__cxxabiv1::__si_class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0x26>
   1985e:	68b0      	ldr	r0, [r6, #8]
   19860:	6801      	ldr	r1, [r0, #0]
   19862:	4622      	mov	r2, r4
   19864:	698c      	ldr	r4, [r1, #24]
   19866:	462b      	mov	r3, r5
   19868:	4639      	mov	r1, r7
   1986a:	46a4      	mov	ip, r4
   1986c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19870:	4760      	bx	ip
   19872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19876:	bf00      	nop

00019878 <std::type_info::~type_info()>:
   19878:	4770      	bx	lr
   1987a:	bf00      	nop

0001987c <std::type_info::__is_pointer_p() const>:
   1987c:	2000      	movs	r0, #0
   1987e:	4770      	bx	lr

00019880 <std::type_info::operator==(std::type_info const&) const>:
   19880:	4281      	cmp	r1, r0
   19882:	d011      	beq.n	198a8 <std::type_info::operator==(std::type_info const&) const+0x28>
   19884:	b508      	push	{r3, lr}
   19886:	6840      	ldr	r0, [r0, #4]
   19888:	7803      	ldrb	r3, [r0, #0]
   1988a:	2b2a      	cmp	r3, #42	; 0x2a
   1988c:	d00a      	beq.n	198a4 <std::type_info::operator==(std::type_info const&) const+0x24>
   1988e:	6849      	ldr	r1, [r1, #4]
   19890:	780b      	ldrb	r3, [r1, #0]
   19892:	2b2a      	cmp	r3, #42	; 0x2a
   19894:	bf08      	it	eq
   19896:	3101      	addeq	r1, #1
   19898:	f008 ff66 	bl	22768 <strcmp>
   1989c:	fab0 f080 	clz	r0, r0
   198a0:	0940      	lsrs	r0, r0, #5
   198a2:	bd08      	pop	{r3, pc}
   198a4:	2000      	movs	r0, #0
   198a6:	bd08      	pop	{r3, pc}
   198a8:	2001      	movs	r0, #1
   198aa:	4770      	bx	lr

000198ac <__gnu_cxx::__verbose_terminate_handler()>:
   198ac:	b570      	push	{r4, r5, r6, lr}
   198ae:	4b3b      	ldr	r3, [pc, #236]	; (1999c <__gnu_cxx::__verbose_terminate_handler()+0xf0>)
   198b0:	781a      	ldrb	r2, [r3, #0]
   198b2:	b082      	sub	sp, #8
   198b4:	2a00      	cmp	r2, #0
   198b6:	d141      	bne.n	1993c <__gnu_cxx::__verbose_terminate_handler()+0x90>
   198b8:	2401      	movs	r4, #1
   198ba:	701c      	strb	r4, [r3, #0]
   198bc:	f006 fafa 	bl	1feb4 <__cxa_current_exception_type>
   198c0:	2800      	cmp	r0, #0
   198c2:	d031      	beq.n	19928 <__gnu_cxx::__verbose_terminate_handler()+0x7c>
   198c4:	6844      	ldr	r4, [r0, #4]
   198c6:	4d36      	ldr	r5, [pc, #216]	; (199a0 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   198c8:	7823      	ldrb	r3, [r4, #0]
   198ca:	2b2a      	cmp	r3, #42	; 0x2a
   198cc:	bf08      	it	eq
   198ce:	3401      	addeq	r4, #1
   198d0:	2200      	movs	r2, #0
   198d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   198d6:	4611      	mov	r1, r2
   198d8:	ab01      	add	r3, sp, #4
   198da:	9001      	str	r0, [sp, #4]
   198dc:	4620      	mov	r0, r4
   198de:	f006 f963 	bl	1fba8 <__cxa_demangle>
   198e2:	682b      	ldr	r3, [r5, #0]
   198e4:	2230      	movs	r2, #48	; 0x30
   198e6:	68db      	ldr	r3, [r3, #12]
   198e8:	4606      	mov	r6, r0
   198ea:	2101      	movs	r1, #1
   198ec:	482d      	ldr	r0, [pc, #180]	; (199a4 <__gnu_cxx::__verbose_terminate_handler()+0xf8>)
   198ee:	f008 fcd5 	bl	2229c <fwrite>
   198f2:	9b01      	ldr	r3, [sp, #4]
   198f4:	b193      	cbz	r3, 1991c <__gnu_cxx::__verbose_terminate_handler()+0x70>
   198f6:	682b      	ldr	r3, [r5, #0]
   198f8:	4620      	mov	r0, r4
   198fa:	68d9      	ldr	r1, [r3, #12]
   198fc:	f008 fa9a 	bl	21e34 <fputs>
   19900:	682b      	ldr	r3, [r5, #0]
   19902:	4829      	ldr	r0, [pc, #164]	; (199a8 <__gnu_cxx::__verbose_terminate_handler()+0xfc>)
   19904:	68db      	ldr	r3, [r3, #12]
   19906:	2202      	movs	r2, #2
   19908:	2101      	movs	r1, #1
   1990a:	f008 fcc7 	bl	2229c <fwrite>
   1990e:	9b01      	ldr	r3, [sp, #4]
   19910:	b913      	cbnz	r3, 19918 <__gnu_cxx::__verbose_terminate_handler()+0x6c>
   19912:	4630      	mov	r0, r6
   19914:	f007 fc2c 	bl	21170 <free>
   19918:	f7ff feec 	bl	196f4 <__cxa_rethrow>
   1991c:	682b      	ldr	r3, [r5, #0]
   1991e:	4630      	mov	r0, r6
   19920:	68d9      	ldr	r1, [r3, #12]
   19922:	f008 fa87 	bl	21e34 <fputs>
   19926:	e7eb      	b.n	19900 <__gnu_cxx::__verbose_terminate_handler()+0x54>
   19928:	4b1d      	ldr	r3, [pc, #116]	; (199a0 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1992a:	4820      	ldr	r0, [pc, #128]	; (199ac <__gnu_cxx::__verbose_terminate_handler()+0x100>)
   1992c:	681b      	ldr	r3, [r3, #0]
   1992e:	222d      	movs	r2, #45	; 0x2d
   19930:	68db      	ldr	r3, [r3, #12]
   19932:	4621      	mov	r1, r4
   19934:	f008 fcb2 	bl	2229c <fwrite>
   19938:	f7fd fa64 	bl	16e04 <abort>
   1993c:	4b18      	ldr	r3, [pc, #96]	; (199a0 <__gnu_cxx::__verbose_terminate_handler()+0xf4>)
   1993e:	481c      	ldr	r0, [pc, #112]	; (199b0 <__gnu_cxx::__verbose_terminate_handler()+0x104>)
   19940:	681b      	ldr	r3, [r3, #0]
   19942:	221d      	movs	r2, #29
   19944:	68db      	ldr	r3, [r3, #12]
   19946:	2101      	movs	r1, #1
   19948:	f008 fca8 	bl	2229c <fwrite>
   1994c:	f7fd fa5a 	bl	16e04 <abort>
   19950:	2901      	cmp	r1, #1
   19952:	460c      	mov	r4, r1
   19954:	d119      	bne.n	1998a <__gnu_cxx::__verbose_terminate_handler()+0xde>
   19956:	f006 fa29 	bl	1fdac <__cxa_begin_catch>
   1995a:	6803      	ldr	r3, [r0, #0]
   1995c:	689b      	ldr	r3, [r3, #8]
   1995e:	4798      	blx	r3
   19960:	682b      	ldr	r3, [r5, #0]
   19962:	4621      	mov	r1, r4
   19964:	68db      	ldr	r3, [r3, #12]
   19966:	4604      	mov	r4, r0
   19968:	220b      	movs	r2, #11
   1996a:	4812      	ldr	r0, [pc, #72]	; (199b4 <__gnu_cxx::__verbose_terminate_handler()+0x108>)
   1996c:	f008 fc96 	bl	2229c <fwrite>
   19970:	682b      	ldr	r3, [r5, #0]
   19972:	4620      	mov	r0, r4
   19974:	68d9      	ldr	r1, [r3, #12]
   19976:	f008 fa5d 	bl	21e34 <fputs>
   1997a:	682b      	ldr	r3, [r5, #0]
   1997c:	200a      	movs	r0, #10
   1997e:	68d9      	ldr	r1, [r3, #12]
   19980:	f008 f9e2 	bl	21d48 <fputc>
   19984:	f006 fa50 	bl	1fe28 <__cxa_end_catch>
   19988:	e7d6      	b.n	19938 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
   1998a:	f006 fa0f 	bl	1fdac <__cxa_begin_catch>
   1998e:	f006 fa4b 	bl	1fe28 <__cxa_end_catch>
   19992:	e7d1      	b.n	19938 <__gnu_cxx::__verbose_terminate_handler()+0x8c>
   19994:	f006 fa48 	bl	1fe28 <__cxa_end_catch>
   19998:	f7ff fa18 	bl	18dcc <__cxa_end_cleanup>
   1999c:	2000c94e 	.word	0x2000c94e
   199a0:	200038c4 	.word	0x200038c4
   199a4:	200010e0 	.word	0x200010e0
   199a8:	20001114 	.word	0x20001114
   199ac:	20001118 	.word	0x20001118
   199b0:	200010c0 	.word	0x200010c0
   199b4:	20001148 	.word	0x20001148

000199b8 <std::logic_error::what() const>:
   199b8:	6840      	ldr	r0, [r0, #4]
   199ba:	4770      	bx	lr

000199bc <std::logic_error::~logic_error()>:
   199bc:	b510      	push	{r4, lr}
   199be:	6843      	ldr	r3, [r0, #4]
   199c0:	4a0c      	ldr	r2, [pc, #48]	; (199f4 <std::logic_error::~logic_error()+0x38>)
   199c2:	490d      	ldr	r1, [pc, #52]	; (199f8 <std::logic_error::~logic_error()+0x3c>)
   199c4:	4604      	mov	r4, r0
   199c6:	f1a3 000c 	sub.w	r0, r3, #12
   199ca:	4290      	cmp	r0, r2
   199cc:	b082      	sub	sp, #8
   199ce:	6021      	str	r1, [r4, #0]
   199d0:	d105      	bne.n	199de <std::logic_error::~logic_error()+0x22>
   199d2:	4620      	mov	r0, r4
   199d4:	f7ff fac2 	bl	18f5c <std::exception::~exception()>
   199d8:	4620      	mov	r0, r4
   199da:	b002      	add	sp, #8
   199dc:	bd10      	pop	{r4, pc}
   199de:	f853 2c04 	ldr.w	r2, [r3, #-4]
   199e2:	1e51      	subs	r1, r2, #1
   199e4:	2a00      	cmp	r2, #0
   199e6:	f843 1c04 	str.w	r1, [r3, #-4]
   199ea:	dcf2      	bgt.n	199d2 <std::logic_error::~logic_error()+0x16>
   199ec:	a901      	add	r1, sp, #4
   199ee:	f000 f8f3 	bl	19bd8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   199f2:	e7ee      	b.n	199d2 <std::logic_error::~logic_error()+0x16>
   199f4:	200052d0 	.word	0x200052d0
   199f8:	200016e0 	.word	0x200016e0

000199fc <std::length_error::~length_error()>:
   199fc:	b510      	push	{r4, lr}
   199fe:	6843      	ldr	r3, [r0, #4]
   19a00:	4a0c      	ldr	r2, [pc, #48]	; (19a34 <std::length_error::~length_error()+0x38>)
   19a02:	490d      	ldr	r1, [pc, #52]	; (19a38 <std::length_error::~length_error()+0x3c>)
   19a04:	4604      	mov	r4, r0
   19a06:	f1a3 000c 	sub.w	r0, r3, #12
   19a0a:	4290      	cmp	r0, r2
   19a0c:	b082      	sub	sp, #8
   19a0e:	6021      	str	r1, [r4, #0]
   19a10:	d105      	bne.n	19a1e <std::length_error::~length_error()+0x22>
   19a12:	4620      	mov	r0, r4
   19a14:	f7ff faa2 	bl	18f5c <std::exception::~exception()>
   19a18:	4620      	mov	r0, r4
   19a1a:	b002      	add	sp, #8
   19a1c:	bd10      	pop	{r4, pc}
   19a1e:	f853 2c04 	ldr.w	r2, [r3, #-4]
   19a22:	1e51      	subs	r1, r2, #1
   19a24:	2a00      	cmp	r2, #0
   19a26:	f843 1c04 	str.w	r1, [r3, #-4]
   19a2a:	dcf2      	bgt.n	19a12 <std::length_error::~length_error()+0x16>
   19a2c:	a901      	add	r1, sp, #4
   19a2e:	f000 f8d3 	bl	19bd8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   19a32:	e7ee      	b.n	19a12 <std::length_error::~length_error()+0x16>
   19a34:	200052d0 	.word	0x200052d0
   19a38:	200016e0 	.word	0x200016e0

00019a3c <std::logic_error::~logic_error()>:
   19a3c:	b510      	push	{r4, lr}
   19a3e:	6843      	ldr	r3, [r0, #4]
   19a40:	4a0e      	ldr	r2, [pc, #56]	; (19a7c <std::logic_error::~logic_error()+0x40>)
   19a42:	490f      	ldr	r1, [pc, #60]	; (19a80 <std::logic_error::~logic_error()+0x44>)
   19a44:	4604      	mov	r4, r0
   19a46:	f1a3 000c 	sub.w	r0, r3, #12
   19a4a:	4290      	cmp	r0, r2
   19a4c:	b082      	sub	sp, #8
   19a4e:	6021      	str	r1, [r4, #0]
   19a50:	d108      	bne.n	19a64 <std::logic_error::~logic_error()+0x28>
   19a52:	4620      	mov	r0, r4
   19a54:	f7ff fa82 	bl	18f5c <std::exception::~exception()>
   19a58:	4620      	mov	r0, r4
   19a5a:	f7fc fe3d 	bl	166d8 <operator delete(void*)>
   19a5e:	4620      	mov	r0, r4
   19a60:	b002      	add	sp, #8
   19a62:	bd10      	pop	{r4, pc}
   19a64:	f853 2c04 	ldr.w	r2, [r3, #-4]
   19a68:	1e51      	subs	r1, r2, #1
   19a6a:	2a00      	cmp	r2, #0
   19a6c:	f843 1c04 	str.w	r1, [r3, #-4]
   19a70:	dcef      	bgt.n	19a52 <std::logic_error::~logic_error()+0x16>
   19a72:	a901      	add	r1, sp, #4
   19a74:	f000 f8b0 	bl	19bd8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   19a78:	e7eb      	b.n	19a52 <std::logic_error::~logic_error()+0x16>
   19a7a:	bf00      	nop
   19a7c:	200052d0 	.word	0x200052d0
   19a80:	200016e0 	.word	0x200016e0

00019a84 <std::length_error::~length_error()>:
   19a84:	b510      	push	{r4, lr}
   19a86:	6843      	ldr	r3, [r0, #4]
   19a88:	4a0e      	ldr	r2, [pc, #56]	; (19ac4 <std::length_error::~length_error()+0x40>)
   19a8a:	490f      	ldr	r1, [pc, #60]	; (19ac8 <std::length_error::~length_error()+0x44>)
   19a8c:	4604      	mov	r4, r0
   19a8e:	f1a3 000c 	sub.w	r0, r3, #12
   19a92:	4290      	cmp	r0, r2
   19a94:	b082      	sub	sp, #8
   19a96:	6021      	str	r1, [r4, #0]
   19a98:	d108      	bne.n	19aac <std::length_error::~length_error()+0x28>
   19a9a:	4620      	mov	r0, r4
   19a9c:	f7ff fa5e 	bl	18f5c <std::exception::~exception()>
   19aa0:	4620      	mov	r0, r4
   19aa2:	f7fc fe19 	bl	166d8 <operator delete(void*)>
   19aa6:	4620      	mov	r0, r4
   19aa8:	b002      	add	sp, #8
   19aaa:	bd10      	pop	{r4, pc}
   19aac:	f853 2c04 	ldr.w	r2, [r3, #-4]
   19ab0:	1e51      	subs	r1, r2, #1
   19ab2:	2a00      	cmp	r2, #0
   19ab4:	f843 1c04 	str.w	r1, [r3, #-4]
   19ab8:	dcef      	bgt.n	19a9a <std::length_error::~length_error()+0x16>
   19aba:	a901      	add	r1, sp, #4
   19abc:	f000 f88c 	bl	19bd8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>
   19ac0:	e7eb      	b.n	19a9a <std::length_error::~length_error()+0x16>
   19ac2:	bf00      	nop
   19ac4:	200052d0 	.word	0x200052d0
   19ac8:	200016e0 	.word	0x200016e0

00019acc <std::logic_error::logic_error(char const*)>:
   19acc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19ace:	4b1b      	ldr	r3, [pc, #108]	; (19b3c <std::logic_error::logic_error(char const*)+0x70>)
   19ad0:	6003      	str	r3, [r0, #0]
   19ad2:	b083      	sub	sp, #12
   19ad4:	4604      	mov	r4, r0
   19ad6:	b349      	cbz	r1, 19b2c <std::logic_error::logic_error(char const*)+0x60>
   19ad8:	4608      	mov	r0, r1
   19ada:	460d      	mov	r5, r1
   19adc:	f009 f890 	bl	22c00 <strlen>
   19ae0:	4607      	mov	r7, r0
   19ae2:	b1a8      	cbz	r0, 19b10 <std::logic_error::logic_error(char const*)+0x44>
   19ae4:	aa01      	add	r2, sp, #4
   19ae6:	2100      	movs	r1, #0
   19ae8:	f000 f83a 	bl	19b60 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>
   19aec:	2f01      	cmp	r7, #1
   19aee:	4606      	mov	r6, r0
   19af0:	f100 030c 	add.w	r3, r0, #12
   19af4:	d011      	beq.n	19b1a <std::logic_error::logic_error(char const*)+0x4e>
   19af6:	4618      	mov	r0, r3
   19af8:	4629      	mov	r1, r5
   19afa:	463a      	mov	r2, r7
   19afc:	f7fc fd4e 	bl	1659c <memcpy>
   19b00:	4603      	mov	r3, r0
   19b02:	4a0f      	ldr	r2, [pc, #60]	; (19b40 <std::logic_error::logic_error(char const*)+0x74>)
   19b04:	4296      	cmp	r6, r2
   19b06:	d10b      	bne.n	19b20 <std::logic_error::logic_error(char const*)+0x54>
   19b08:	4620      	mov	r0, r4
   19b0a:	6063      	str	r3, [r4, #4]
   19b0c:	b003      	add	sp, #12
   19b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b10:	4b0c      	ldr	r3, [pc, #48]	; (19b44 <std::logic_error::logic_error(char const*)+0x78>)
   19b12:	6063      	str	r3, [r4, #4]
   19b14:	4620      	mov	r0, r4
   19b16:	b003      	add	sp, #12
   19b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19b1a:	782a      	ldrb	r2, [r5, #0]
   19b1c:	7302      	strb	r2, [r0, #12]
   19b1e:	e7f0      	b.n	19b02 <std::logic_error::logic_error(char const*)+0x36>
   19b20:	2200      	movs	r2, #0
   19b22:	60b2      	str	r2, [r6, #8]
   19b24:	6037      	str	r7, [r6, #0]
   19b26:	443e      	add	r6, r7
   19b28:	7332      	strb	r2, [r6, #12]
   19b2a:	e7ed      	b.n	19b08 <std::logic_error::logic_error(char const*)+0x3c>
   19b2c:	4806      	ldr	r0, [pc, #24]	; (19b48 <std::logic_error::logic_error(char const*)+0x7c>)
   19b2e:	f7ff f829 	bl	18b84 <std::__throw_logic_error(char const*)>
   19b32:	4620      	mov	r0, r4
   19b34:	f7ff fa12 	bl	18f5c <std::exception::~exception()>
   19b38:	f7ff f948 	bl	18dcc <__cxa_end_cleanup>
   19b3c:	200016e0 	.word	0x200016e0
   19b40:	200052d0 	.word	0x200052d0
   19b44:	200052dc 	.word	0x200052dc
   19b48:	200011a4 	.word	0x200011a4

00019b4c <std::length_error::length_error(char const*)>:
   19b4c:	b510      	push	{r4, lr}
   19b4e:	4604      	mov	r4, r0
   19b50:	f7ff ffbc 	bl	19acc <std::logic_error::logic_error(char const*)>
   19b54:	4b01      	ldr	r3, [pc, #4]	; (19b5c <std::length_error::length_error(char const*)+0x10>)
   19b56:	6023      	str	r3, [r4, #0]
   19b58:	4620      	mov	r0, r4
   19b5a:	bd10      	pop	{r4, pc}
   19b5c:	200016f4 	.word	0x200016f4

00019b60 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)>:
   19b60:	4b1b      	ldr	r3, [pc, #108]	; (19bd0 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x70>)
   19b62:	4298      	cmp	r0, r3
   19b64:	b510      	push	{r4, lr}
   19b66:	d830      	bhi.n	19bca <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x6a>
   19b68:	4288      	cmp	r0, r1
   19b6a:	4604      	mov	r4, r0
   19b6c:	d91c      	bls.n	19ba8 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x48>
   19b6e:	004a      	lsls	r2, r1, #1
   19b70:	4290      	cmp	r0, r2
   19b72:	bf38      	it	cc
   19b74:	4614      	movcc	r4, r2
   19b76:	f104 021d 	add.w	r2, r4, #29
   19b7a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   19b7e:	f104 000d 	add.w	r0, r4, #13
   19b82:	d918      	bls.n	19bb6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x56>
   19b84:	428c      	cmp	r4, r1
   19b86:	d916      	bls.n	19bb6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x56>
   19b88:	f3c2 020b 	ubfx	r2, r2, #0, #12
   19b8c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
   19b90:	1aa4      	subs	r4, r4, r2
   19b92:	429c      	cmp	r4, r3
   19b94:	bf28      	it	cs
   19b96:	461c      	movcs	r4, r3
   19b98:	f104 000d 	add.w	r0, r4, #13
   19b9c:	f7fc fd98 	bl	166d0 <operator new(unsigned int)>
   19ba0:	2200      	movs	r2, #0
   19ba2:	e9c0 4201 	strd	r4, r2, [r0, #4]
   19ba6:	bd10      	pop	{r4, pc}
   19ba8:	f100 031d 	add.w	r3, r0, #29
   19bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   19bb0:	f100 000d 	add.w	r0, r0, #13
   19bb4:	d901      	bls.n	19bba <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x5a>
   19bb6:	2800      	cmp	r0, #0
   19bb8:	db05      	blt.n	19bc6 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x66>
   19bba:	f7fc fd89 	bl	166d0 <operator new(unsigned int)>
   19bbe:	2200      	movs	r2, #0
   19bc0:	e9c0 4201 	strd	r4, r2, [r0, #4]
   19bc4:	bd10      	pop	{r4, pc}
   19bc6:	f7fe ffcd 	bl	18b64 <std::__throw_bad_alloc()>
   19bca:	4802      	ldr	r0, [pc, #8]	; (19bd4 <std::string::_Rep::_S_create(unsigned int, unsigned int, std::allocator<char> const&)+0x74>)
   19bcc:	f7fe fff2 	bl	18bb4 <std::__throw_length_error(char const*)>
   19bd0:	3ffffffc 	.word	0x3ffffffc
   19bd4:	2000118c 	.word	0x2000118c

00019bd8 <std::string::_Rep::_M_destroy(std::allocator<char> const&)>:
   19bd8:	f7fc bd7e 	b.w	166d8 <operator delete(void*)>

00019bdc <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void**) const>:
   19bdc:	b570      	push	{r4, r5, r6, lr}
   19bde:	6803      	ldr	r3, [r0, #0]
   19be0:	b084      	sub	sp, #16
   19be2:	2400      	movs	r4, #0
   19be4:	699e      	ldr	r6, [r3, #24]
   19be6:	9403      	str	r4, [sp, #12]
   19be8:	2310      	movs	r3, #16
   19bea:	4615      	mov	r5, r2
   19bec:	9302      	str	r3, [sp, #8]
   19bee:	e9cd 4400 	strd	r4, r4, [sp]
   19bf2:	466b      	mov	r3, sp
   19bf4:	6812      	ldr	r2, [r2, #0]
   19bf6:	47b0      	blx	r6
   19bf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   19bfc:	f003 0306 	and.w	r3, r3, #6
   19c00:	2b06      	cmp	r3, #6
   19c02:	bf03      	ittte	eq
   19c04:	9b00      	ldreq	r3, [sp, #0]
   19c06:	602b      	streq	r3, [r5, #0]
   19c08:	2001      	moveq	r0, #1
   19c0a:	4620      	movne	r0, r4
   19c0c:	b004      	add	sp, #16
   19c0e:	bd70      	pop	{r4, r5, r6, pc}

00019c10 <__cxxabiv1::__class_type_info::__do_find_public_src(int, void const*, __cxxabiv1::__class_type_info const*, void const*) const>:
   19c10:	9800      	ldr	r0, [sp, #0]
   19c12:	4290      	cmp	r0, r2
   19c14:	bf14      	ite	ne
   19c16:	2001      	movne	r0, #1
   19c18:	2006      	moveq	r0, #6
   19c1a:	4770      	bx	lr

00019c1c <__cxxabiv1::__class_type_info::~__class_type_info()>:
   19c1c:	b510      	push	{r4, lr}
   19c1e:	4b03      	ldr	r3, [pc, #12]	; (19c2c <__cxxabiv1::__class_type_info::~__class_type_info()+0x10>)
   19c20:	6003      	str	r3, [r0, #0]
   19c22:	4604      	mov	r4, r0
   19c24:	f7ff fe28 	bl	19878 <std::type_info::~type_info()>
   19c28:	4620      	mov	r0, r4
   19c2a:	bd10      	pop	{r4, pc}
   19c2c:	20001668 	.word	0x20001668

00019c30 <__cxxabiv1::__class_type_info::~__class_type_info()>:
   19c30:	b510      	push	{r4, lr}
   19c32:	4b05      	ldr	r3, [pc, #20]	; (19c48 <__cxxabiv1::__class_type_info::~__class_type_info()+0x18>)
   19c34:	6003      	str	r3, [r0, #0]
   19c36:	4604      	mov	r4, r0
   19c38:	f7ff fe1e 	bl	19878 <std::type_info::~type_info()>
   19c3c:	4620      	mov	r0, r4
   19c3e:	2108      	movs	r1, #8
   19c40:	f7fc fd4e 	bl	166e0 <operator delete(void*, unsigned int)>
   19c44:	4620      	mov	r0, r4
   19c46:	bd10      	pop	{r4, pc}
   19c48:	20001668 	.word	0x20001668

00019c4c <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const>:
   19c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c50:	9f06      	ldr	r7, [sp, #24]
   19c52:	9908      	ldr	r1, [sp, #32]
   19c54:	9e09      	ldr	r6, [sp, #36]	; 0x24
   19c56:	428f      	cmp	r7, r1
   19c58:	4604      	mov	r4, r0
   19c5a:	4690      	mov	r8, r2
   19c5c:	461d      	mov	r5, r3
   19c5e:	d00c      	beq.n	19c7a <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x2e>
   19c60:	4629      	mov	r1, r5
   19c62:	4620      	mov	r0, r4
   19c64:	f7ff fe0c 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   19c68:	b120      	cbz	r0, 19c74 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x28>
   19c6a:	2301      	movs	r3, #1
   19c6c:	6037      	str	r7, [r6, #0]
   19c6e:	f886 8004 	strb.w	r8, [r6, #4]
   19c72:	71b3      	strb	r3, [r6, #6]
   19c74:	2000      	movs	r0, #0
   19c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c7a:	9907      	ldr	r1, [sp, #28]
   19c7c:	f7ff fe00 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   19c80:	2800      	cmp	r0, #0
   19c82:	d0ed      	beq.n	19c60 <__cxxabiv1::__class_type_info::__do_dyncast(int, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const+0x14>
   19c84:	f886 8005 	strb.w	r8, [r6, #5]
   19c88:	2000      	movs	r0, #0
   19c8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c8e:	bf00      	nop

00019c90 <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const>:
   19c90:	b538      	push	{r3, r4, r5, lr}
   19c92:	4615      	mov	r5, r2
   19c94:	461c      	mov	r4, r3
   19c96:	f7ff fdf3 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   19c9a:	b900      	cbnz	r0, 19c9e <__cxxabiv1::__class_type_info::__do_upcast(__cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__upcast_result&) const+0xe>
   19c9c:	bd38      	pop	{r3, r4, r5, pc}
   19c9e:	2208      	movs	r2, #8
   19ca0:	2306      	movs	r3, #6
   19ca2:	6025      	str	r5, [r4, #0]
   19ca4:	60e2      	str	r2, [r4, #12]
   19ca6:	7123      	strb	r3, [r4, #4]
   19ca8:	bd38      	pop	{r3, r4, r5, pc}
   19caa:	bf00      	nop

00019cac <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const>:
   19cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19cb0:	4606      	mov	r6, r0
   19cb2:	4617      	mov	r7, r2
   19cb4:	461d      	mov	r5, r3
   19cb6:	460c      	mov	r4, r1
   19cb8:	f7ff fde2 	bl	19880 <std::type_info::operator==(std::type_info const&) const>
   19cbc:	b948      	cbnz	r0, 19cd2 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
   19cbe:	2d03      	cmp	r5, #3
   19cc0:	d807      	bhi.n	19cd2 <__cxxabiv1::__class_type_info::__do_catch(std::type_info const*, void**, unsigned int) const+0x26>
   19cc2:	6823      	ldr	r3, [r4, #0]
   19cc4:	463a      	mov	r2, r7
   19cc6:	4631      	mov	r1, r6
   19cc8:	4620      	mov	r0, r4
   19cca:	695b      	ldr	r3, [r3, #20]
   19ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19cd0:	4718      	bx	r3
   19cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19cd6:	bf00      	nop

00019cd8 <d_make_comp>:
   19cd8:	2931      	cmp	r1, #49	; 0x31
   19cda:	b570      	push	{r4, r5, r6, lr}
   19cdc:	4686      	mov	lr, r0
   19cde:	d845      	bhi.n	19d6c <d_make_comp+0x94>
   19ce0:	2928      	cmp	r1, #40	; 0x28
   19ce2:	d82a      	bhi.n	19d3a <d_make_comp+0x62>
   19ce4:	290a      	cmp	r1, #10
   19ce6:	d920      	bls.n	19d2a <d_make_comp+0x52>
   19ce8:	f1a1 0c0b 	sub.w	ip, r1, #11
   19cec:	4c32      	ldr	r4, [pc, #200]	; (19db8 <d_make_comp+0xe0>)
   19cee:	fa5f fc8c 	uxtb.w	ip, ip
   19cf2:	2001      	movs	r0, #1
   19cf4:	fa00 f00c 	lsl.w	r0, r0, ip
   19cf8:	4004      	ands	r4, r0
   19cfa:	2c00      	cmp	r4, #0
   19cfc:	d04d      	beq.n	19d9a <d_make_comp+0xc2>
   19cfe:	b1d2      	cbz	r2, 19d36 <d_make_comp+0x5e>
   19d00:	e9de 4005 	ldrd	r4, r0, [lr, #20]
   19d04:	4284      	cmp	r4, r0
   19d06:	da16      	bge.n	19d36 <d_make_comp+0x5e>
   19d08:	f8de 5010 	ldr.w	r5, [lr, #16]
   19d0c:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
   19d10:	eb05 008c 	add.w	r0, r5, ip, lsl #2
   19d14:	3401      	adds	r4, #1
   19d16:	2600      	movs	r6, #0
   19d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
   19d1c:	f8ce 4014 	str.w	r4, [lr, #20]
   19d20:	f805 102c 	strb.w	r1, [r5, ip, lsl #2]
   19d24:	e9c0 2303 	strd	r2, r3, [r0, #12]
   19d28:	bd70      	pop	{r4, r5, r6, pc}
   19d2a:	2904      	cmp	r1, #4
   19d2c:	d930      	bls.n	19d90 <d_make_comp+0xb8>
   19d2e:	f1a1 0009 	sub.w	r0, r1, #9
   19d32:	2801      	cmp	r0, #1
   19d34:	d9e3      	bls.n	19cfe <d_make_comp+0x26>
   19d36:	2000      	movs	r0, #0
   19d38:	bd70      	pop	{r4, r5, r6, pc}
   19d3a:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
   19d3e:	2808      	cmp	r0, #8
   19d40:	d8f9      	bhi.n	19d36 <d_make_comp+0x5e>
   19d42:	a401      	add	r4, pc, #4	; (adr r4, 19d48 <d_make_comp+0x70>)
   19d44:	f854 f020 	ldr.w	pc, [r4, r0, lsl #2]
   19d48:	00019d01 	.word	0x00019d01
   19d4c:	00019d95 	.word	0x00019d95
   19d50:	00019d91 	.word	0x00019d91
   19d54:	00019d37 	.word	0x00019d37
   19d58:	00019d91 	.word	0x00019d91
   19d5c:	00019d01 	.word	0x00019d01
   19d60:	00019d01 	.word	0x00019d01
   19d64:	00019cff 	.word	0x00019cff
   19d68:	00019d95 	.word	0x00019d95
   19d6c:	f1a1 0034 	sub.w	r0, r1, #52	; 0x34
   19d70:	b2c0      	uxtb	r0, r0
   19d72:	281d      	cmp	r0, #29
   19d74:	d8df      	bhi.n	19d36 <d_make_comp+0x5e>
   19d76:	4c11      	ldr	r4, [pc, #68]	; (19dbc <d_make_comp+0xe4>)
   19d78:	f04f 0c01 	mov.w	ip, #1
   19d7c:	fa0c fc00 	lsl.w	ip, ip, r0
   19d80:	ea0c 0404 	and.w	r4, ip, r4
   19d84:	2c00      	cmp	r4, #0
   19d86:	d1ba      	bne.n	19cfe <d_make_comp+0x26>
   19d88:	480d      	ldr	r0, [pc, #52]	; (19dc0 <d_make_comp+0xe8>)
   19d8a:	ea0c 0000 	and.w	r0, ip, r0
   19d8e:	b170      	cbz	r0, 19dae <d_make_comp+0xd6>
   19d90:	2a00      	cmp	r2, #0
   19d92:	d0d0      	beq.n	19d36 <d_make_comp+0x5e>
   19d94:	2b00      	cmp	r3, #0
   19d96:	d1b3      	bne.n	19d00 <d_make_comp+0x28>
   19d98:	e7cd      	b.n	19d36 <d_make_comp+0x5e>
   19d9a:	f410 1f7f 	tst.w	r0, #4177920	; 0x3fc000
   19d9e:	d1af      	bne.n	19d00 <d_make_comp+0x28>
   19da0:	4c08      	ldr	r4, [pc, #32]	; (19dc4 <d_make_comp+0xec>)
   19da2:	4004      	ands	r4, r0
   19da4:	2c00      	cmp	r4, #0
   19da6:	d0c6      	beq.n	19d36 <d_make_comp+0x5e>
   19da8:	2a00      	cmp	r2, #0
   19daa:	d1f3      	bne.n	19d94 <d_make_comp+0xbc>
   19dac:	e7c3      	b.n	19d36 <d_make_comp+0x5e>
   19dae:	f01c 5c50 	ands.w	ip, ip, #872415232	; 0x34000000
   19db2:	d0c0      	beq.n	19d36 <d_make_comp+0x5e>
   19db4:	e7a4      	b.n	19d00 <d_make_comp+0x28>
   19db6:	bf00      	nop
   19db8:	2f801ffe 	.word	0x2f801ffe
   19dbc:	01c71107 	.word	0x01c71107
   19dc0:	0a002ef8 	.word	0x0a002ef8
   19dc4:	00400001 	.word	0x00400001

00019dc8 <d_number>:
   19dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dca:	68c2      	ldr	r2, [r0, #12]
   19dcc:	7811      	ldrb	r1, [r2, #0]
   19dce:	296e      	cmp	r1, #110	; 0x6e
   19dd0:	4686      	mov	lr, r0
   19dd2:	d025      	beq.n	19e20 <d_number+0x58>
   19dd4:	3930      	subs	r1, #48	; 0x30
   19dd6:	b2cb      	uxtb	r3, r1
   19dd8:	2b09      	cmp	r3, #9
   19dda:	d82b      	bhi.n	19e34 <d_number+0x6c>
   19ddc:	2600      	movs	r6, #0
   19dde:	4d16      	ldr	r5, [pc, #88]	; (19e38 <d_number+0x70>)
   19de0:	2000      	movs	r0, #0
   19de2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
   19de6:	e002      	b.n	19dee <d_number+0x26>
   19de8:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
   19dec:	dc15      	bgt.n	19e1a <d_number+0x52>
   19dee:	3201      	adds	r2, #1
   19df0:	f8ce 200c 	str.w	r2, [lr, #12]
   19df4:	7813      	ldrb	r3, [r2, #0]
   19df6:	3b30      	subs	r3, #48	; 0x30
   19df8:	fa5f fc83 	uxtb.w	ip, r3
   19dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19e00:	eb01 0040 	add.w	r0, r1, r0, lsl #1
   19e04:	f1bc 0f09 	cmp.w	ip, #9
   19e08:	4619      	mov	r1, r3
   19e0a:	eba4 0303 	sub.w	r3, r4, r3
   19e0e:	fba5 7303 	umull	r7, r3, r5, r3
   19e12:	d9e9      	bls.n	19de8 <d_number+0x20>
   19e14:	b106      	cbz	r6, 19e18 <d_number+0x50>
   19e16:	4240      	negs	r0, r0
   19e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e20:	1c53      	adds	r3, r2, #1
   19e22:	60c3      	str	r3, [r0, #12]
   19e24:	7851      	ldrb	r1, [r2, #1]
   19e26:	3930      	subs	r1, #48	; 0x30
   19e28:	b2ca      	uxtb	r2, r1
   19e2a:	2a09      	cmp	r2, #9
   19e2c:	d802      	bhi.n	19e34 <d_number+0x6c>
   19e2e:	461a      	mov	r2, r3
   19e30:	2601      	movs	r6, #1
   19e32:	e7d4      	b.n	19dde <d_number+0x16>
   19e34:	2000      	movs	r0, #0
   19e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e38:	cccccccd 	.word	0xcccccccd

00019e3c <d_call_offset>:
   19e3c:	b510      	push	{r4, lr}
   19e3e:	4604      	mov	r4, r0
   19e40:	b929      	cbnz	r1, 19e4e <d_call_offset+0x12>
   19e42:	68c3      	ldr	r3, [r0, #12]
   19e44:	781a      	ldrb	r2, [r3, #0]
   19e46:	b16a      	cbz	r2, 19e64 <d_call_offset+0x28>
   19e48:	1c5a      	adds	r2, r3, #1
   19e4a:	60c2      	str	r2, [r0, #12]
   19e4c:	7819      	ldrb	r1, [r3, #0]
   19e4e:	2968      	cmp	r1, #104	; 0x68
   19e50:	d00c      	beq.n	19e6c <d_call_offset+0x30>
   19e52:	2976      	cmp	r1, #118	; 0x76
   19e54:	d106      	bne.n	19e64 <d_call_offset+0x28>
   19e56:	4620      	mov	r0, r4
   19e58:	f7ff ffb6 	bl	19dc8 <d_number>
   19e5c:	68e3      	ldr	r3, [r4, #12]
   19e5e:	781a      	ldrb	r2, [r3, #0]
   19e60:	2a5f      	cmp	r2, #95	; 0x5f
   19e62:	d001      	beq.n	19e68 <d_call_offset+0x2c>
   19e64:	2000      	movs	r0, #0
   19e66:	bd10      	pop	{r4, pc}
   19e68:	3301      	adds	r3, #1
   19e6a:	60e3      	str	r3, [r4, #12]
   19e6c:	4620      	mov	r0, r4
   19e6e:	f7ff ffab 	bl	19dc8 <d_number>
   19e72:	68e3      	ldr	r3, [r4, #12]
   19e74:	781a      	ldrb	r2, [r3, #0]
   19e76:	2a5f      	cmp	r2, #95	; 0x5f
   19e78:	d1f4      	bne.n	19e64 <d_call_offset+0x28>
   19e7a:	3301      	adds	r3, #1
   19e7c:	60e3      	str	r3, [r4, #12]
   19e7e:	2001      	movs	r0, #1
   19e80:	bd10      	pop	{r4, pc}
   19e82:	bf00      	nop

00019e84 <d_ref_qualifier>:
   19e84:	b410      	push	{r4}
   19e86:	68c3      	ldr	r3, [r0, #12]
   19e88:	460a      	mov	r2, r1
   19e8a:	7819      	ldrb	r1, [r3, #0]
   19e8c:	2952      	cmp	r1, #82	; 0x52
   19e8e:	d010      	beq.n	19eb2 <d_ref_qualifier+0x2e>
   19e90:	294f      	cmp	r1, #79	; 0x4f
   19e92:	d003      	beq.n	19e9c <d_ref_qualifier+0x18>
   19e94:	4610      	mov	r0, r2
   19e96:	f85d 4b04 	ldr.w	r4, [sp], #4
   19e9a:	4770      	bx	lr
   19e9c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   19e9e:	2120      	movs	r1, #32
   19ea0:	3403      	adds	r4, #3
   19ea2:	3301      	adds	r3, #1
   19ea4:	62c4      	str	r4, [r0, #44]	; 0x2c
   19ea6:	60c3      	str	r3, [r0, #12]
   19ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
   19eac:	2300      	movs	r3, #0
   19eae:	f7ff bf13 	b.w	19cd8 <d_make_comp>
   19eb2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   19eb4:	211f      	movs	r1, #31
   19eb6:	3402      	adds	r4, #2
   19eb8:	e7f3      	b.n	19ea2 <d_ref_qualifier+0x1e>
   19eba:	bf00      	nop

00019ebc <d_count_templates_scopes>:
   19ebc:	2900      	cmp	r1, #0
   19ebe:	d066      	beq.n	19f8e <d_count_templates_scopes+0xd2>
   19ec0:	b538      	push	{r3, r4, r5, lr}
   19ec2:	4605      	mov	r5, r0
   19ec4:	460c      	mov	r4, r1
   19ec6:	68a3      	ldr	r3, [r4, #8]
   19ec8:	2b01      	cmp	r3, #1
   19eca:	dc39      	bgt.n	19f40 <d_count_templates_scopes+0x84>
   19ecc:	f8d5 011c 	ldr.w	r0, [r5, #284]	; 0x11c
   19ed0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   19ed4:	f103 0301 	add.w	r3, r3, #1
   19ed8:	dc32      	bgt.n	19f40 <d_count_templates_scopes+0x84>
   19eda:	7822      	ldrb	r2, [r4, #0]
   19edc:	60a3      	str	r3, [r4, #8]
   19ede:	1e53      	subs	r3, r2, #1
   19ee0:	2b50      	cmp	r3, #80	; 0x50
   19ee2:	d82d      	bhi.n	19f40 <d_count_templates_scopes+0x84>
   19ee4:	e8df f003 	tbb	[pc, r3]
   19ee8:	4c313131 	.word	0x4c313131
   19eec:	2d2d2c2c 	.word	0x2d2d2c2c
   19ef0:	31313131 	.word	0x31313131
   19ef4:	31313131 	.word	0x31313131
   19ef8:	31313131 	.word	0x31313131
   19efc:	2c313131 	.word	0x2c313131
   19f00:	31313131 	.word	0x31313131
   19f04:	31313131 	.word	0x31313131
   19f08:	42423131 	.word	0x42423131
   19f0c:	312c3131 	.word	0x312c3131
   19f10:	29313131 	.word	0x29313131
   19f14:	31313131 	.word	0x31313131
   19f18:	312d2c31 	.word	0x312d2c31
   19f1c:	31313131 	.word	0x31313131
   19f20:	31313131 	.word	0x31313131
   19f24:	31313131 	.word	0x31313131
   19f28:	312c2c31 	.word	0x312c2c31
   19f2c:	29292929 	.word	0x29292929
   19f30:	3131312c 	.word	0x3131312c
   19f34:	31313131 	.word	0x31313131
   19f38:	31          	.byte	0x31
   19f39:	00          	.byte	0x00
   19f3a:	68e4      	ldr	r4, [r4, #12]
   19f3c:	2c00      	cmp	r4, #0
   19f3e:	d1c2      	bne.n	19ec6 <d_count_templates_scopes+0xa>
   19f40:	bd38      	pop	{r3, r4, r5, pc}
   19f42:	6924      	ldr	r4, [r4, #16]
   19f44:	2c00      	cmp	r4, #0
   19f46:	d1be      	bne.n	19ec6 <d_count_templates_scopes+0xa>
   19f48:	e7fa      	b.n	19f40 <d_count_templates_scopes+0x84>
   19f4a:	68e1      	ldr	r1, [r4, #12]
   19f4c:	1c43      	adds	r3, r0, #1
   19f4e:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   19f52:	4628      	mov	r0, r5
   19f54:	f7ff ffb2 	bl	19ebc <d_count_templates_scopes>
   19f58:	6921      	ldr	r1, [r4, #16]
   19f5a:	4628      	mov	r0, r5
   19f5c:	f7ff ffae 	bl	19ebc <d_count_templates_scopes>
   19f60:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   19f64:	3b01      	subs	r3, #1
   19f66:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   19f6a:	bd38      	pop	{r3, r4, r5, pc}
   19f6c:	68e1      	ldr	r1, [r4, #12]
   19f6e:	780b      	ldrb	r3, [r1, #0]
   19f70:	2b05      	cmp	r3, #5
   19f72:	d1eb      	bne.n	19f4c <d_count_templates_scopes+0x90>
   19f74:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   19f78:	3301      	adds	r3, #1
   19f7a:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
   19f7e:	e7e5      	b.n	19f4c <d_count_templates_scopes+0x90>
   19f80:	f8d5 3144 	ldr.w	r3, [r5, #324]	; 0x144
   19f84:	68e1      	ldr	r1, [r4, #12]
   19f86:	3301      	adds	r3, #1
   19f88:	f8c5 3144 	str.w	r3, [r5, #324]	; 0x144
   19f8c:	e7de      	b.n	19f4c <d_count_templates_scopes+0x90>
   19f8e:	4770      	bx	lr

00019f90 <d_pack_length>:
   19f90:	4603      	mov	r3, r0
   19f92:	b148      	cbz	r0, 19fa8 <d_pack_length+0x18>
   19f94:	2300      	movs	r3, #0
   19f96:	e004      	b.n	19fa2 <d_pack_length+0x12>
   19f98:	68c2      	ldr	r2, [r0, #12]
   19f9a:	b12a      	cbz	r2, 19fa8 <d_pack_length+0x18>
   19f9c:	6900      	ldr	r0, [r0, #16]
   19f9e:	3301      	adds	r3, #1
   19fa0:	b110      	cbz	r0, 19fa8 <d_pack_length+0x18>
   19fa2:	7802      	ldrb	r2, [r0, #0]
   19fa4:	2a2f      	cmp	r2, #47	; 0x2f
   19fa6:	d0f7      	beq.n	19f98 <d_pack_length+0x8>
   19fa8:	4618      	mov	r0, r3
   19faa:	4770      	bx	lr

00019fac <d_discriminator>:
   19fac:	68c3      	ldr	r3, [r0, #12]
   19fae:	781a      	ldrb	r2, [r3, #0]
   19fb0:	2a5f      	cmp	r2, #95	; 0x5f
   19fb2:	d001      	beq.n	19fb8 <d_discriminator+0xc>
   19fb4:	2001      	movs	r0, #1
   19fb6:	4770      	bx	lr
   19fb8:	b510      	push	{r4, lr}
   19fba:	1c5a      	adds	r2, r3, #1
   19fbc:	60c2      	str	r2, [r0, #12]
   19fbe:	785a      	ldrb	r2, [r3, #1]
   19fc0:	2a5f      	cmp	r2, #95	; 0x5f
   19fc2:	4604      	mov	r4, r0
   19fc4:	d004      	beq.n	19fd0 <d_discriminator+0x24>
   19fc6:	f7ff feff 	bl	19dc8 <d_number>
   19fca:	43c0      	mvns	r0, r0
   19fcc:	0fc0      	lsrs	r0, r0, #31
   19fce:	bd10      	pop	{r4, pc}
   19fd0:	3302      	adds	r3, #2
   19fd2:	60c3      	str	r3, [r0, #12]
   19fd4:	f7ff fef8 	bl	19dc8 <d_number>
   19fd8:	2800      	cmp	r0, #0
   19fda:	db09      	blt.n	19ff0 <d_discriminator+0x44>
   19fdc:	2809      	cmp	r0, #9
   19fde:	dd05      	ble.n	19fec <d_discriminator+0x40>
   19fe0:	68e3      	ldr	r3, [r4, #12]
   19fe2:	781a      	ldrb	r2, [r3, #0]
   19fe4:	2a5f      	cmp	r2, #95	; 0x5f
   19fe6:	d103      	bne.n	19ff0 <d_discriminator+0x44>
   19fe8:	3301      	adds	r3, #1
   19fea:	60e3      	str	r3, [r4, #12]
   19fec:	2001      	movs	r0, #1
   19fee:	bd10      	pop	{r4, pc}
   19ff0:	2000      	movs	r0, #0
   19ff2:	bd10      	pop	{r4, pc}

00019ff4 <d_index_template_argument.part.0>:
   19ff4:	b920      	cbnz	r0, 1a000 <d_index_template_argument.part.0+0xc>
   19ff6:	e009      	b.n	1a00c <d_index_template_argument.part.0+0x18>
   19ff8:	b139      	cbz	r1, 1a00a <d_index_template_argument.part.0+0x16>
   19ffa:	6900      	ldr	r0, [r0, #16]
   19ffc:	3901      	subs	r1, #1
   19ffe:	b130      	cbz	r0, 1a00e <d_index_template_argument.part.0+0x1a>
   1a000:	7803      	ldrb	r3, [r0, #0]
   1a002:	2b2f      	cmp	r3, #47	; 0x2f
   1a004:	d0f8      	beq.n	19ff8 <d_index_template_argument.part.0+0x4>
   1a006:	2000      	movs	r0, #0
   1a008:	4770      	bx	lr
   1a00a:	68c0      	ldr	r0, [r0, #12]
   1a00c:	4770      	bx	lr
   1a00e:	4770      	bx	lr

0001a010 <d_growable_string_callback_adapter>:
   1a010:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a012:	4614      	mov	r4, r2
   1a014:	6852      	ldr	r2, [r2, #4]
   1a016:	68a5      	ldr	r5, [r4, #8]
   1a018:	1c4b      	adds	r3, r1, #1
   1a01a:	4413      	add	r3, r2
   1a01c:	42ab      	cmp	r3, r5
   1a01e:	b083      	sub	sp, #12
   1a020:	460e      	mov	r6, r1
   1a022:	4607      	mov	r7, r0
   1a024:	d811      	bhi.n	1a04a <d_growable_string_callback_adapter+0x3a>
   1a026:	68e5      	ldr	r5, [r4, #12]
   1a028:	b96d      	cbnz	r5, 1a046 <d_growable_string_callback_adapter+0x36>
   1a02a:	6863      	ldr	r3, [r4, #4]
   1a02c:	6820      	ldr	r0, [r4, #0]
   1a02e:	4632      	mov	r2, r6
   1a030:	4418      	add	r0, r3
   1a032:	4639      	mov	r1, r7
   1a034:	f7fc fab2 	bl	1659c <memcpy>
   1a038:	e9d4 3200 	ldrd	r3, r2, [r4]
   1a03c:	4433      	add	r3, r6
   1a03e:	549d      	strb	r5, [r3, r2]
   1a040:	6863      	ldr	r3, [r4, #4]
   1a042:	4433      	add	r3, r6
   1a044:	6063      	str	r3, [r4, #4]
   1a046:	b003      	add	sp, #12
   1a048:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a04a:	68e2      	ldr	r2, [r4, #12]
   1a04c:	2a00      	cmp	r2, #0
   1a04e:	d1fa      	bne.n	1a046 <d_growable_string_callback_adapter+0x36>
   1a050:	b155      	cbz	r5, 1a068 <d_growable_string_callback_adapter+0x58>
   1a052:	006d      	lsls	r5, r5, #1
   1a054:	42ab      	cmp	r3, r5
   1a056:	d8fc      	bhi.n	1a052 <d_growable_string_callback_adapter+0x42>
   1a058:	6820      	ldr	r0, [r4, #0]
   1a05a:	4629      	mov	r1, r5
   1a05c:	f007 fb4c 	bl	216f8 <realloc>
   1a060:	b138      	cbz	r0, 1a072 <d_growable_string_callback_adapter+0x62>
   1a062:	6020      	str	r0, [r4, #0]
   1a064:	60a5      	str	r5, [r4, #8]
   1a066:	e7de      	b.n	1a026 <d_growable_string_callback_adapter+0x16>
   1a068:	2b02      	cmp	r3, #2
   1a06a:	f04f 0502 	mov.w	r5, #2
   1a06e:	d8f0      	bhi.n	1a052 <d_growable_string_callback_adapter+0x42>
   1a070:	e7f2      	b.n	1a058 <d_growable_string_callback_adapter+0x48>
   1a072:	9001      	str	r0, [sp, #4]
   1a074:	6820      	ldr	r0, [r4, #0]
   1a076:	f007 f87b 	bl	21170 <free>
   1a07a:	9b01      	ldr	r3, [sp, #4]
   1a07c:	2201      	movs	r2, #1
   1a07e:	e9c4 3300 	strd	r3, r3, [r4]
   1a082:	e9c4 3202 	strd	r3, r2, [r4, #8]
   1a086:	e7de      	b.n	1a046 <d_growable_string_callback_adapter+0x36>

0001a088 <next_is_type_qual.isra.0>:
   1a088:	7803      	ldrb	r3, [r0, #0]
   1a08a:	2b72      	cmp	r3, #114	; 0x72
   1a08c:	d007      	beq.n	1a09e <next_is_type_qual.isra.0+0x16>
   1a08e:	2b56      	cmp	r3, #86	; 0x56
   1a090:	d005      	beq.n	1a09e <next_is_type_qual.isra.0+0x16>
   1a092:	2b4b      	cmp	r3, #75	; 0x4b
   1a094:	d003      	beq.n	1a09e <next_is_type_qual.isra.0+0x16>
   1a096:	2b44      	cmp	r3, #68	; 0x44
   1a098:	d003      	beq.n	1a0a2 <next_is_type_qual.isra.0+0x1a>
   1a09a:	2000      	movs	r0, #0
   1a09c:	4770      	bx	lr
   1a09e:	2001      	movs	r0, #1
   1a0a0:	4770      	bx	lr
   1a0a2:	7840      	ldrb	r0, [r0, #1]
   1a0a4:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   1a0a8:	2b4f      	cmp	r3, #79	; 0x4f
   1a0aa:	d0f8      	beq.n	1a09e <next_is_type_qual.isra.0+0x16>
   1a0ac:	3877      	subs	r0, #119	; 0x77
   1a0ae:	2801      	cmp	r0, #1
   1a0b0:	bf8c      	ite	hi
   1a0b2:	2000      	movhi	r0, #0
   1a0b4:	2001      	movls	r0, #1
   1a0b6:	4770      	bx	lr

0001a0b8 <d_append_char>:
   1a0b8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1a0bc:	2bff      	cmp	r3, #255	; 0xff
   1a0be:	b570      	push	{r4, r5, r6, lr}
   1a0c0:	4604      	mov	r4, r0
   1a0c2:	460d      	mov	r5, r1
   1a0c4:	d006      	beq.n	1a0d4 <d_append_char+0x1c>
   1a0c6:	1c5a      	adds	r2, r3, #1
   1a0c8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a0cc:	54e5      	strb	r5, [r4, r3]
   1a0ce:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1a0d2:	bd70      	pop	{r4, r5, r6, pc}
   1a0d4:	2600      	movs	r6, #0
   1a0d6:	4619      	mov	r1, r3
   1a0d8:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1a0dc:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1a0e0:	4798      	blx	r3
   1a0e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a0e6:	2201      	movs	r2, #1
   1a0e8:	4413      	add	r3, r2
   1a0ea:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a0ee:	4633      	mov	r3, r6
   1a0f0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1a0f4:	54e5      	strb	r5, [r4, r3]
   1a0f6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1a0fa:	bd70      	pop	{r4, r5, r6, pc}

0001a0fc <d_lookup_template_argument>:
   1a0fc:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1a100:	b19b      	cbz	r3, 1a12a <d_lookup_template_argument+0x2e>
   1a102:	68ca      	ldr	r2, [r1, #12]
   1a104:	685b      	ldr	r3, [r3, #4]
   1a106:	2a00      	cmp	r2, #0
   1a108:	691b      	ldr	r3, [r3, #16]
   1a10a:	db09      	blt.n	1a120 <d_lookup_template_argument+0x24>
   1a10c:	b923      	cbnz	r3, 1a118 <d_lookup_template_argument+0x1c>
   1a10e:	e007      	b.n	1a120 <d_lookup_template_argument+0x24>
   1a110:	b142      	cbz	r2, 1a124 <d_lookup_template_argument+0x28>
   1a112:	691b      	ldr	r3, [r3, #16]
   1a114:	3a01      	subs	r2, #1
   1a116:	b11b      	cbz	r3, 1a120 <d_lookup_template_argument+0x24>
   1a118:	7819      	ldrb	r1, [r3, #0]
   1a11a:	292f      	cmp	r1, #47	; 0x2f
   1a11c:	d0f8      	beq.n	1a110 <d_lookup_template_argument+0x14>
   1a11e:	2300      	movs	r3, #0
   1a120:	4618      	mov	r0, r3
   1a122:	4770      	bx	lr
   1a124:	68db      	ldr	r3, [r3, #12]
   1a126:	4618      	mov	r0, r3
   1a128:	4770      	bx	lr
   1a12a:	2201      	movs	r2, #1
   1a12c:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
   1a130:	e7f6      	b.n	1a120 <d_lookup_template_argument+0x24>
   1a132:	bf00      	nop

0001a134 <d_find_pack>:
   1a134:	2900      	cmp	r1, #0
   1a136:	d040      	beq.n	1a1ba <d_find_pack+0x86>
   1a138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a13c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1a1c4 <d_find_pack+0x90>
   1a140:	4f1f      	ldr	r7, [pc, #124]	; (1a1c0 <d_find_pack+0x8c>)
   1a142:	4605      	mov	r5, r0
   1a144:	460c      	mov	r4, r1
   1a146:	2601      	movs	r6, #1
   1a148:	7823      	ldrb	r3, [r4, #0]
   1a14a:	2b08      	cmp	r3, #8
   1a14c:	d813      	bhi.n	1a176 <d_find_pack+0x42>
   1a14e:	2b08      	cmp	r3, #8
   1a150:	d81e      	bhi.n	1a190 <d_find_pack+0x5c>
   1a152:	e8df f003 	tbb	[pc, r3]
   1a156:	1d0d      	.short	0x1d0d
   1a158:	271d1d1d 	.word	0x271d1d1d
   1a15c:	230d      	.short	0x230d
   1a15e:	23          	.byte	0x23
   1a15f:	00          	.byte	0x00
   1a160:	2b17      	cmp	r3, #23
   1a162:	d915      	bls.n	1a190 <d_find_pack+0x5c>
   1a164:	3b18      	subs	r3, #24
   1a166:	b2db      	uxtb	r3, r3
   1a168:	fa27 f303 	lsr.w	r3, r7, r3
   1a16c:	07db      	lsls	r3, r3, #31
   1a16e:	d50f      	bpl.n	1a190 <d_find_pack+0x5c>
   1a170:	2000      	movs	r0, #0
   1a172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a176:	2b2c      	cmp	r3, #44	; 0x2c
   1a178:	d9f2      	bls.n	1a160 <d_find_pack+0x2c>
   1a17a:	3b32      	subs	r3, #50	; 0x32
   1a17c:	b2db      	uxtb	r3, r3
   1a17e:	2b1b      	cmp	r3, #27
   1a180:	d806      	bhi.n	1a190 <d_find_pack+0x5c>
   1a182:	fa06 f203 	lsl.w	r2, r6, r3
   1a186:	ea12 0f08 	tst.w	r2, r8
   1a18a:	d1f1      	bne.n	1a170 <d_find_pack+0x3c>
   1a18c:	2b01      	cmp	r3, #1
   1a18e:	d005      	beq.n	1a19c <d_find_pack+0x68>
   1a190:	68e1      	ldr	r1, [r4, #12]
   1a192:	4628      	mov	r0, r5
   1a194:	f7ff ffce 	bl	1a134 <d_find_pack>
   1a198:	2800      	cmp	r0, #0
   1a19a:	d1ea      	bne.n	1a172 <d_find_pack+0x3e>
   1a19c:	6924      	ldr	r4, [r4, #16]
   1a19e:	2c00      	cmp	r4, #0
   1a1a0:	d1d2      	bne.n	1a148 <d_find_pack+0x14>
   1a1a2:	e7e5      	b.n	1a170 <d_find_pack+0x3c>
   1a1a4:	4621      	mov	r1, r4
   1a1a6:	4628      	mov	r0, r5
   1a1a8:	f7ff ffa8 	bl	1a0fc <d_lookup_template_argument>
   1a1ac:	2800      	cmp	r0, #0
   1a1ae:	d0df      	beq.n	1a170 <d_find_pack+0x3c>
   1a1b0:	7803      	ldrb	r3, [r0, #0]
   1a1b2:	2b2f      	cmp	r3, #47	; 0x2f
   1a1b4:	d1dc      	bne.n	1a170 <d_find_pack+0x3c>
   1a1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a1ba:	2000      	movs	r0, #0
   1a1bc:	4770      	bx	lr
   1a1be:	bf00      	nop
   1a1c0:	00108001 	.word	0x00108001
   1a1c4:	0ce30001 	.word	0x0ce30001

0001a1c8 <d_append_string>:
   1a1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1cc:	4604      	mov	r4, r0
   1a1ce:	4608      	mov	r0, r1
   1a1d0:	460d      	mov	r5, r1
   1a1d2:	f008 fd15 	bl	22c00 <strlen>
   1a1d6:	b340      	cbz	r0, 1a22a <d_append_string+0x62>
   1a1d8:	3d01      	subs	r5, #1
   1a1da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a1de:	182f      	adds	r7, r5, r0
   1a1e0:	f04f 0800 	mov.w	r8, #0
   1a1e4:	e009      	b.n	1a1fa <d_append_string+0x32>
   1a1e6:	460b      	mov	r3, r1
   1a1e8:	42bd      	cmp	r5, r7
   1a1ea:	f101 0101 	add.w	r1, r1, #1
   1a1ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a1f2:	54e6      	strb	r6, [r4, r3]
   1a1f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a1f8:	d017      	beq.n	1a22a <d_append_string+0x62>
   1a1fa:	29ff      	cmp	r1, #255	; 0xff
   1a1fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1a200:	d1f1      	bne.n	1a1e6 <d_append_string+0x1e>
   1a202:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1a206:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a20a:	4620      	mov	r0, r4
   1a20c:	4798      	blx	r3
   1a20e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a212:	2101      	movs	r1, #1
   1a214:	440b      	add	r3, r1
   1a216:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a21a:	2300      	movs	r3, #0
   1a21c:	42bd      	cmp	r5, r7
   1a21e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a222:	54e6      	strb	r6, [r4, r3]
   1a224:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a228:	d1e7      	bne.n	1a1fa <d_append_string+0x32>
   1a22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a22e:	bf00      	nop

0001a230 <d_template_param>:
   1a230:	b538      	push	{r3, r4, r5, lr}
   1a232:	68c3      	ldr	r3, [r0, #12]
   1a234:	781a      	ldrb	r2, [r3, #0]
   1a236:	2a54      	cmp	r2, #84	; 0x54
   1a238:	d124      	bne.n	1a284 <d_template_param+0x54>
   1a23a:	1c5a      	adds	r2, r3, #1
   1a23c:	60c2      	str	r2, [r0, #12]
   1a23e:	785a      	ldrb	r2, [r3, #1]
   1a240:	2a5f      	cmp	r2, #95	; 0x5f
   1a242:	4604      	mov	r4, r0
   1a244:	d020      	beq.n	1a288 <d_template_param+0x58>
   1a246:	2a6e      	cmp	r2, #110	; 0x6e
   1a248:	d01c      	beq.n	1a284 <d_template_param+0x54>
   1a24a:	f7ff fdbd 	bl	19dc8 <d_number>
   1a24e:	1c41      	adds	r1, r0, #1
   1a250:	d418      	bmi.n	1a284 <d_template_param+0x54>
   1a252:	68e3      	ldr	r3, [r4, #12]
   1a254:	781a      	ldrb	r2, [r3, #0]
   1a256:	2a5f      	cmp	r2, #95	; 0x5f
   1a258:	d114      	bne.n	1a284 <d_template_param+0x54>
   1a25a:	3301      	adds	r3, #1
   1a25c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1a260:	4282      	cmp	r2, r0
   1a262:	60e3      	str	r3, [r4, #12]
   1a264:	da0e      	bge.n	1a284 <d_template_param+0x54>
   1a266:	6923      	ldr	r3, [r4, #16]
   1a268:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1a26c:	eb03 008c 	add.w	r0, r3, ip, lsl #2
   1a270:	3201      	adds	r2, #1
   1a272:	2500      	movs	r5, #0
   1a274:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1a278:	6162      	str	r2, [r4, #20]
   1a27a:	2205      	movs	r2, #5
   1a27c:	f803 202c 	strb.w	r2, [r3, ip, lsl #2]
   1a280:	60c1      	str	r1, [r0, #12]
   1a282:	bd38      	pop	{r3, r4, r5, pc}
   1a284:	2000      	movs	r0, #0
   1a286:	bd38      	pop	{r3, r4, r5, pc}
   1a288:	3302      	adds	r3, #2
   1a28a:	2100      	movs	r1, #0
   1a28c:	e7e6      	b.n	1a25c <d_template_param+0x2c>
   1a28e:	bf00      	nop

0001a290 <d_append_num>:
   1a290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a294:	b088      	sub	sp, #32
   1a296:	460a      	mov	r2, r1
   1a298:	4604      	mov	r4, r0
   1a29a:	491a      	ldr	r1, [pc, #104]	; (1a304 <d_append_num+0x74>)
   1a29c:	a801      	add	r0, sp, #4
   1a29e:	f007 fc73 	bl	21b88 <sprintf>
   1a2a2:	a801      	add	r0, sp, #4
   1a2a4:	f008 fcac 	bl	22c00 <strlen>
   1a2a8:	b340      	cbz	r0, 1a2fc <d_append_num+0x6c>
   1a2aa:	ad01      	add	r5, sp, #4
   1a2ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1a2b0:	182f      	adds	r7, r5, r0
   1a2b2:	f04f 0800 	mov.w	r8, #0
   1a2b6:	e009      	b.n	1a2cc <d_append_num+0x3c>
   1a2b8:	460b      	mov	r3, r1
   1a2ba:	42bd      	cmp	r5, r7
   1a2bc:	f101 0101 	add.w	r1, r1, #1
   1a2c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2c4:	54e6      	strb	r6, [r4, r3]
   1a2c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a2ca:	d017      	beq.n	1a2fc <d_append_num+0x6c>
   1a2cc:	29ff      	cmp	r1, #255	; 0xff
   1a2ce:	f815 6b01 	ldrb.w	r6, [r5], #1
   1a2d2:	d1f1      	bne.n	1a2b8 <d_append_num+0x28>
   1a2d4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1a2d8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1a2dc:	4620      	mov	r0, r4
   1a2de:	4798      	blx	r3
   1a2e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1a2e4:	2101      	movs	r1, #1
   1a2e6:	440b      	add	r3, r1
   1a2e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1a2ec:	2300      	movs	r3, #0
   1a2ee:	42bd      	cmp	r5, r7
   1a2f0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1a2f4:	54e6      	strb	r6, [r4, r3]
   1a2f6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1a2fa:	d1e7      	bne.n	1a2cc <d_append_num+0x3c>
   1a2fc:	b008      	add	sp, #32
   1a2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a302:	bf00      	nop
   1a304:	2000213c 	.word	0x2000213c

0001a308 <d_source_name>:
   1a308:	b570      	push	{r4, r5, r6, lr}
   1a30a:	4604      	mov	r4, r0
   1a30c:	f7ff fd5c 	bl	19dc8 <d_number>
   1a310:	1e05      	subs	r5, r0, #0
   1a312:	dd46      	ble.n	1a3a2 <d_source_name+0x9a>
   1a314:	68e6      	ldr	r6, [r4, #12]
   1a316:	6863      	ldr	r3, [r4, #4]
   1a318:	1b9b      	subs	r3, r3, r6
   1a31a:	429d      	cmp	r5, r3
   1a31c:	dc3e      	bgt.n	1a39c <d_source_name+0x94>
   1a31e:	68a2      	ldr	r2, [r4, #8]
   1a320:	1973      	adds	r3, r6, r5
   1a322:	0752      	lsls	r2, r2, #29
   1a324:	60e3      	str	r3, [r4, #12]
   1a326:	d504      	bpl.n	1a332 <d_source_name+0x2a>
   1a328:	5d72      	ldrb	r2, [r6, r5]
   1a32a:	2a24      	cmp	r2, #36	; 0x24
   1a32c:	bf04      	itt	eq
   1a32e:	3301      	addeq	r3, #1
   1a330:	60e3      	streq	r3, [r4, #12]
   1a332:	2d09      	cmp	r5, #9
   1a334:	dd22      	ble.n	1a37c <d_source_name+0x74>
   1a336:	492a      	ldr	r1, [pc, #168]	; (1a3e0 <d_source_name+0xd8>)
   1a338:	2208      	movs	r2, #8
   1a33a:	4630      	mov	r0, r6
   1a33c:	f008 f824 	bl	22388 <memcmp>
   1a340:	b930      	cbnz	r0, 1a350 <d_source_name+0x48>
   1a342:	7a33      	ldrb	r3, [r6, #8]
   1a344:	2b2e      	cmp	r3, #46	; 0x2e
   1a346:	d02e      	beq.n	1a3a6 <d_source_name+0x9e>
   1a348:	2b5f      	cmp	r3, #95	; 0x5f
   1a34a:	d02c      	beq.n	1a3a6 <d_source_name+0x9e>
   1a34c:	2b24      	cmp	r3, #36	; 0x24
   1a34e:	d02a      	beq.n	1a3a6 <d_source_name+0x9e>
   1a350:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a354:	4293      	cmp	r3, r2
   1a356:	da21      	bge.n	1a39c <d_source_name+0x94>
   1a358:	6920      	ldr	r0, [r4, #16]
   1a35a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a35e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1a362:	3301      	adds	r3, #1
   1a364:	2200      	movs	r2, #0
   1a366:	e9c0 2201 	strd	r2, r2, [r0, #4]
   1a36a:	6163      	str	r3, [r4, #20]
   1a36c:	2300      	movs	r3, #0
   1a36e:	7003      	strb	r3, [r0, #0]
   1a370:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1a374:	e9c0 6503 	strd	r6, r5, [r0, #12]
   1a378:	62a0      	str	r0, [r4, #40]	; 0x28
   1a37a:	bd70      	pop	{r4, r5, r6, pc}
   1a37c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1a380:	4293      	cmp	r3, r2
   1a382:	da0b      	bge.n	1a39c <d_source_name+0x94>
   1a384:	6920      	ldr	r0, [r4, #16]
   1a386:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a38a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
   1a38e:	3301      	adds	r3, #1
   1a390:	2200      	movs	r2, #0
   1a392:	e9c0 2201 	strd	r2, r2, [r0, #4]
   1a396:	6163      	str	r3, [r4, #20]
   1a398:	2e00      	cmp	r6, #0
   1a39a:	d1e7      	bne.n	1a36c <d_source_name+0x64>
   1a39c:	2000      	movs	r0, #0
   1a39e:	62a0      	str	r0, [r4, #40]	; 0x28
   1a3a0:	bd70      	pop	{r4, r5, r6, pc}
   1a3a2:	2000      	movs	r0, #0
   1a3a4:	bd70      	pop	{r4, r5, r6, pc}
   1a3a6:	7a73      	ldrb	r3, [r6, #9]
   1a3a8:	2b4e      	cmp	r3, #78	; 0x4e
   1a3aa:	d1d1      	bne.n	1a350 <d_source_name+0x48>
   1a3ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1a3ae:	6963      	ldr	r3, [r4, #20]
   1a3b0:	69a1      	ldr	r1, [r4, #24]
   1a3b2:	3216      	adds	r2, #22
   1a3b4:	1b52      	subs	r2, r2, r5
   1a3b6:	428b      	cmp	r3, r1
   1a3b8:	62e2      	str	r2, [r4, #44]	; 0x2c
   1a3ba:	daef      	bge.n	1a39c <d_source_name+0x94>
   1a3bc:	6922      	ldr	r2, [r4, #16]
   1a3be:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1a3c2:	0081      	lsls	r1, r0, #2
   1a3c4:	3301      	adds	r3, #1
   1a3c6:	6163      	str	r3, [r4, #20]
   1a3c8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   1a3cc:	2300      	movs	r3, #0
   1a3ce:	e9c0 3301 	strd	r3, r3, [r0, #4]
   1a3d2:	5453      	strb	r3, [r2, r1]
   1a3d4:	4a03      	ldr	r2, [pc, #12]	; (1a3e4 <d_source_name+0xdc>)
   1a3d6:	2315      	movs	r3, #21
   1a3d8:	e9c0 2303 	strd	r2, r3, [r0, #12]
   1a3dc:	e7df      	b.n	1a39e <d_source_name+0x96>
   1a3de:	bf00      	nop
   1a3e0:	20002488 	.word	0x20002488
   1a3e4:	20002494 	.word	0x20002494

0001a3e8 <d_substitution>:
   1a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3ec:	68c3      	ldr	r3, [r0, #12]
   1a3ee:	781a      	ldrb	r2, [r3, #0]
   1a3f0:	2a53      	cmp	r2, #83	; 0x53
   1a3f2:	d131      	bne.n	1a458 <d_substitution+0x70>
   1a3f4:	1c5a      	adds	r2, r3, #1
   1a3f6:	60c2      	str	r2, [r0, #12]
   1a3f8:	785a      	ldrb	r2, [r3, #1]
   1a3fa:	4604      	mov	r4, r0
   1a3fc:	b3a2      	cbz	r2, 1a468 <d_substitution+0x80>
   1a3fe:	1c9a      	adds	r2, r3, #2
   1a400:	60c2      	str	r2, [r0, #12]
   1a402:	785a      	ldrb	r2, [r3, #1]
   1a404:	2a5f      	cmp	r2, #95	; 0x5f
   1a406:	d044      	beq.n	1a492 <d_substitution+0xaa>
   1a408:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1a40c:	b2d8      	uxtb	r0, r3
   1a40e:	2809      	cmp	r0, #9
   1a410:	d826      	bhi.n	1a460 <d_substitution+0x78>
   1a412:	2100      	movs	r1, #0
   1a414:	e00d      	b.n	1a432 <d_substitution+0x4a>
   1a416:	3b30      	subs	r3, #48	; 0x30
   1a418:	4299      	cmp	r1, r3
   1a41a:	d81d      	bhi.n	1a458 <d_substitution+0x70>
   1a41c:	68e0      	ldr	r0, [r4, #12]
   1a41e:	7802      	ldrb	r2, [r0, #0]
   1a420:	4619      	mov	r1, r3
   1a422:	1c45      	adds	r5, r0, #1
   1a424:	b11a      	cbz	r2, 1a42e <d_substitution+0x46>
   1a426:	60e5      	str	r5, [r4, #12]
   1a428:	7802      	ldrb	r2, [r0, #0]
   1a42a:	2a5f      	cmp	r2, #95	; 0x5f
   1a42c:	d03b      	beq.n	1a4a6 <d_substitution+0xbe>
   1a42e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   1a432:	b2d8      	uxtb	r0, r3
   1a434:	2809      	cmp	r0, #9
   1a436:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1a43a:	f1a2 0c41 	sub.w	ip, r2, #65	; 0x41
   1a43e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a442:	d9e8      	bls.n	1a416 <d_substitution+0x2e>
   1a444:	f1bc 0f19 	cmp.w	ip, #25
   1a448:	d806      	bhi.n	1a458 <d_substitution+0x70>
   1a44a:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   1a44e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1a452:	3b37      	subs	r3, #55	; 0x37
   1a454:	4299      	cmp	r1, r3
   1a456:	d9e1      	bls.n	1a41c <d_substitution+0x34>
   1a458:	2500      	movs	r5, #0
   1a45a:	4628      	mov	r0, r5
   1a45c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a460:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
   1a464:	2819      	cmp	r0, #25
   1a466:	d9d4      	bls.n	1a412 <d_substitution+0x2a>
   1a468:	68a3      	ldr	r3, [r4, #8]
   1a46a:	f003 0308 	and.w	r3, r3, #8
   1a46e:	2b00      	cmp	r3, #0
   1a470:	bf14      	ite	ne
   1a472:	2501      	movne	r5, #1
   1a474:	2500      	moveq	r5, #0
   1a476:	d100      	bne.n	1a47a <d_substitution+0x92>
   1a478:	b9b9      	cbnz	r1, 1a4aa <d_substitution+0xc2>
   1a47a:	4b3f      	ldr	r3, [pc, #252]	; (1a578 <d_substitution+0x190>)
   1a47c:	2174      	movs	r1, #116	; 0x74
   1a47e:	f103 00a8 	add.w	r0, r3, #168	; 0xa8
   1a482:	e001      	b.n	1a488 <d_substitution+0xa0>
   1a484:	f813 1f1c 	ldrb.w	r1, [r3, #28]!
   1a488:	4291      	cmp	r1, r2
   1a48a:	d015      	beq.n	1a4b8 <d_substitution+0xd0>
   1a48c:	4283      	cmp	r3, r0
   1a48e:	d1f9      	bne.n	1a484 <d_substitution+0x9c>
   1a490:	e7e2      	b.n	1a458 <d_substitution+0x70>
   1a492:	2300      	movs	r3, #0
   1a494:	6a22      	ldr	r2, [r4, #32]
   1a496:	429a      	cmp	r2, r3
   1a498:	d9de      	bls.n	1a458 <d_substitution+0x70>
   1a49a:	69e2      	ldr	r2, [r4, #28]
   1a49c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
   1a4a0:	4628      	mov	r0, r5
   1a4a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a4a6:	3301      	adds	r3, #1
   1a4a8:	e7f4      	b.n	1a494 <d_substitution+0xac>
   1a4aa:	68e3      	ldr	r3, [r4, #12]
   1a4ac:	781b      	ldrb	r3, [r3, #0]
   1a4ae:	3b43      	subs	r3, #67	; 0x43
   1a4b0:	2b01      	cmp	r3, #1
   1a4b2:	bf98      	it	ls
   1a4b4:	460d      	movls	r5, r1
   1a4b6:	e7e0      	b.n	1a47a <d_substitution+0x92>
   1a4b8:	695e      	ldr	r6, [r3, #20]
   1a4ba:	2e00      	cmp	r6, #0
   1a4bc:	d054      	beq.n	1a568 <d_substitution+0x180>
   1a4be:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1a4c2:	4282      	cmp	r2, r0
   1a4c4:	f8d3 8018 	ldr.w	r8, [r3, #24]
   1a4c8:	da53      	bge.n	1a572 <d_substitution+0x18a>
   1a4ca:	6927      	ldr	r7, [r4, #16]
   1a4cc:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1a4d0:	eb07 018c 	add.w	r1, r7, ip, lsl #2
   1a4d4:	f04f 0e00 	mov.w	lr, #0
   1a4d8:	e9c1 ee01 	strd	lr, lr, [r1, #4]
   1a4dc:	3201      	adds	r2, #1
   1a4de:	f04f 0e18 	mov.w	lr, #24
   1a4e2:	6162      	str	r2, [r4, #20]
   1a4e4:	f807 e02c 	strb.w	lr, [r7, ip, lsl #2]
   1a4e8:	e9c1 6803 	strd	r6, r8, [r1, #12]
   1a4ec:	62a1      	str	r1, [r4, #40]	; 0x28
   1a4ee:	2d00      	cmp	r5, #0
   1a4f0:	d037      	beq.n	1a562 <d_substitution+0x17a>
   1a4f2:	e9d3 7103 	ldrd	r7, r1, [r3, #12]
   1a4f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a4f8:	4282      	cmp	r2, r0
   1a4fa:	440b      	add	r3, r1
   1a4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a4fe:	da36      	bge.n	1a56e <d_substitution+0x186>
   1a500:	6923      	ldr	r3, [r4, #16]
   1a502:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1a506:	eb03 0580 	add.w	r5, r3, r0, lsl #2
   1a50a:	3201      	adds	r2, #1
   1a50c:	2600      	movs	r6, #0
   1a50e:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1a512:	6162      	str	r2, [r4, #20]
   1a514:	2218      	movs	r2, #24
   1a516:	f803 2020 	strb.w	r2, [r3, r0, lsl #2]
   1a51a:	e9c5 7103 	strd	r7, r1, [r5, #12]
   1a51e:	68e3      	ldr	r3, [r4, #12]
   1a520:	781a      	ldrb	r2, [r3, #0]
   1a522:	2a42      	cmp	r2, #66	; 0x42
   1a524:	d199      	bne.n	1a45a <d_substitution+0x72>
   1a526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a528:	3301      	adds	r3, #1
   1a52a:	60e3      	str	r3, [r4, #12]
   1a52c:	4620      	mov	r0, r4
   1a52e:	f7ff feeb 	bl	1a308 <d_source_name>
   1a532:	462a      	mov	r2, r5
   1a534:	4603      	mov	r3, r0
   1a536:	214d      	movs	r1, #77	; 0x4d
   1a538:	4620      	mov	r0, r4
   1a53a:	f7ff fbcd 	bl	19cd8 <d_make_comp>
   1a53e:	68e3      	ldr	r3, [r4, #12]
   1a540:	781a      	ldrb	r2, [r3, #0]
   1a542:	2a42      	cmp	r2, #66	; 0x42
   1a544:	4605      	mov	r5, r0
   1a546:	d0ef      	beq.n	1a528 <d_substitution+0x140>
   1a548:	62a6      	str	r6, [r4, #40]	; 0x28
   1a54a:	2800      	cmp	r0, #0
   1a54c:	d084      	beq.n	1a458 <d_substitution+0x70>
   1a54e:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1a552:	4293      	cmp	r3, r2
   1a554:	da80      	bge.n	1a458 <d_substitution+0x70>
   1a556:	69e1      	ldr	r1, [r4, #28]
   1a558:	1c5a      	adds	r2, r3, #1
   1a55a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
   1a55e:	6222      	str	r2, [r4, #32]
   1a560:	e77b      	b.n	1a45a <d_substitution+0x72>
   1a562:	e9d3 7101 	ldrd	r7, r1, [r3, #4]
   1a566:	e7c6      	b.n	1a4f6 <d_substitution+0x10e>
   1a568:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1a56c:	e7bf      	b.n	1a4ee <d_substitution+0x106>
   1a56e:	2500      	movs	r5, #0
   1a570:	e7d5      	b.n	1a51e <d_substitution+0x136>
   1a572:	2100      	movs	r1, #0
   1a574:	e7ba      	b.n	1a4ec <d_substitution+0x104>
   1a576:	bf00      	nop
   1a578:	200028b0 	.word	0x200028b0

0001a57c <d_type>:
   1a57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a580:	68c2      	ldr	r2, [r0, #12]
   1a582:	b083      	sub	sp, #12
   1a584:	4604      	mov	r4, r0
   1a586:	4610      	mov	r0, r2
   1a588:	f7ff fd7e 	bl	1a088 <next_is_type_qual.isra.0>
   1a58c:	2800      	cmp	r0, #0
   1a58e:	d166      	bne.n	1a65e <d_type+0xe2>
   1a590:	7813      	ldrb	r3, [r2, #0]
   1a592:	2b5a      	cmp	r3, #90	; 0x5a
   1a594:	d831      	bhi.n	1a5fa <d_type+0x7e>
   1a596:	2b2f      	cmp	r3, #47	; 0x2f
   1a598:	d95c      	bls.n	1a654 <d_type+0xd8>
   1a59a:	3b30      	subs	r3, #48	; 0x30
   1a59c:	2b2a      	cmp	r3, #42	; 0x2a
   1a59e:	d859      	bhi.n	1a654 <d_type+0xd8>
   1a5a0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a5a4:	008c008c 	.word	0x008c008c
   1a5a8:	008c008c 	.word	0x008c008c
   1a5ac:	008c008c 	.word	0x008c008c
   1a5b0:	008c008c 	.word	0x008c008c
   1a5b4:	008c008c 	.word	0x008c008c
   1a5b8:	00580058 	.word	0x00580058
   1a5bc:	00580058 	.word	0x00580058
   1a5c0:	00580058 	.word	0x00580058
   1a5c4:	01d60058 	.word	0x01d60058
   1a5c8:	00d90058 	.word	0x00d90058
   1a5cc:	005800ed 	.word	0x005800ed
   1a5d0:	016000e7 	.word	0x016000e7
   1a5d4:	00580058 	.word	0x00580058
   1a5d8:	00580058 	.word	0x00580058
   1a5dc:	02180058 	.word	0x02180058
   1a5e0:	00cb008c 	.word	0x00cb008c
   1a5e4:	005800bd 	.word	0x005800bd
   1a5e8:	019500af 	.word	0x019500af
   1a5ec:	01be016e 	.word	0x01be016e
   1a5f0:	00580058 	.word	0x00580058
   1a5f4:	00580058 	.word	0x00580058
   1a5f8:	008c      	.short	0x008c
   1a5fa:	3b61      	subs	r3, #97	; 0x61
   1a5fc:	fa5f fc83 	uxtb.w	ip, r3
   1a600:	f1bc 0f19 	cmp.w	ip, #25
   1a604:	d826      	bhi.n	1a654 <d_type+0xd8>
   1a606:	4dc4      	ldr	r5, [pc, #784]	; (1a918 <d_type+0x39c>)
   1a608:	2101      	movs	r1, #1
   1a60a:	fa01 f10c 	lsl.w	r1, r1, ip
   1a60e:	400d      	ands	r5, r1
   1a610:	b1ed      	cbz	r5, 1a64e <d_type+0xd2>
   1a612:	49c2      	ldr	r1, [pc, #776]	; (1a91c <d_type+0x3a0>)
   1a614:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1a618:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   1a61c:	e9d4 3505 	ldrd	r3, r5, [r4, #20]
   1a620:	42ab      	cmp	r3, r5
   1a622:	f280 83c5 	bge.w	1adb0 <d_type+0x834>
   1a626:	6926      	ldr	r6, [r4, #16]
   1a628:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1a62c:	eb06 058c 	add.w	r5, r6, ip, lsl #2
   1a630:	3301      	adds	r3, #1
   1a632:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1a636:	6163      	str	r3, [r4, #20]
   1a638:	2327      	movs	r3, #39	; 0x27
   1a63a:	f806 302c 	strb.w	r3, [r6, ip, lsl #2]
   1a63e:	60e9      	str	r1, [r5, #12]
   1a640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1a642:	6849      	ldr	r1, [r1, #4]
   1a644:	3201      	adds	r2, #1
   1a646:	440b      	add	r3, r1
   1a648:	60e2      	str	r2, [r4, #12]
   1a64a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a64c:	e003      	b.n	1a656 <d_type+0xda>
   1a64e:	f1bc 0f14 	cmp.w	ip, #20
   1a652:	d048      	beq.n	1a6e6 <d_type+0x16a>
   1a654:	2500      	movs	r5, #0
   1a656:	4628      	mov	r0, r5
   1a658:	b003      	add	sp, #12
   1a65a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a65e:	2200      	movs	r2, #0
   1a660:	a901      	add	r1, sp, #4
   1a662:	4620      	mov	r0, r4
   1a664:	f001 fab4 	bl	1bbd0 <d_cv_qualifiers>
   1a668:	4605      	mov	r5, r0
   1a66a:	2800      	cmp	r0, #0
   1a66c:	d0f2      	beq.n	1a654 <d_type+0xd8>
   1a66e:	68e3      	ldr	r3, [r4, #12]
   1a670:	781b      	ldrb	r3, [r3, #0]
   1a672:	2b46      	cmp	r3, #70	; 0x46
   1a674:	4620      	mov	r0, r4
   1a676:	d01e      	beq.n	1a6b6 <d_type+0x13a>
   1a678:	f7ff ff80 	bl	1a57c <d_type>
   1a67c:	6028      	str	r0, [r5, #0]
   1a67e:	2800      	cmp	r0, #0
   1a680:	d0e8      	beq.n	1a654 <d_type+0xd8>
   1a682:	7803      	ldrb	r3, [r0, #0]
   1a684:	3b1f      	subs	r3, #31
   1a686:	2b01      	cmp	r3, #1
   1a688:	d805      	bhi.n	1a696 <d_type+0x11a>
   1a68a:	9a01      	ldr	r2, [sp, #4]
   1a68c:	68c3      	ldr	r3, [r0, #12]
   1a68e:	60c2      	str	r2, [r0, #12]
   1a690:	682a      	ldr	r2, [r5, #0]
   1a692:	9201      	str	r2, [sp, #4]
   1a694:	602b      	str	r3, [r5, #0]
   1a696:	9d01      	ldr	r5, [sp, #4]
   1a698:	2d00      	cmp	r5, #0
   1a69a:	d0db      	beq.n	1a654 <d_type+0xd8>
   1a69c:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1a6a0:	4293      	cmp	r3, r2
   1a6a2:	dad7      	bge.n	1a654 <d_type+0xd8>
   1a6a4:	69e1      	ldr	r1, [r4, #28]
   1a6a6:	1c5a      	adds	r2, r3, #1
   1a6a8:	4628      	mov	r0, r5
   1a6aa:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1a6ae:	6222      	str	r2, [r4, #32]
   1a6b0:	b003      	add	sp, #12
   1a6b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a6b6:	f000 fbfd 	bl	1aeb4 <d_function_type>
   1a6ba:	e7df      	b.n	1a67c <d_type+0x100>
   1a6bc:	4620      	mov	r0, r4
   1a6be:	f001 fd6b 	bl	1c198 <d_name>
   1a6c2:	4605      	mov	r5, r0
   1a6c4:	9001      	str	r0, [sp, #4]
   1a6c6:	2d00      	cmp	r5, #0
   1a6c8:	d0c4      	beq.n	1a654 <d_type+0xd8>
   1a6ca:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
   1a6ce:	4293      	cmp	r3, r2
   1a6d0:	dac0      	bge.n	1a654 <d_type+0xd8>
   1a6d2:	69e1      	ldr	r1, [r4, #28]
   1a6d4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1a6d8:	9d01      	ldr	r5, [sp, #4]
   1a6da:	1c5a      	adds	r2, r3, #1
   1a6dc:	4628      	mov	r0, r5
   1a6de:	6222      	str	r2, [r4, #32]
   1a6e0:	b003      	add	sp, #12
   1a6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a6e6:	3201      	adds	r2, #1
   1a6e8:	60e2      	str	r2, [r4, #12]
   1a6ea:	4620      	mov	r0, r4
   1a6ec:	f7ff fe0c 	bl	1a308 <d_source_name>
   1a6f0:	462b      	mov	r3, r5
   1a6f2:	4602      	mov	r2, r0
   1a6f4:	2128      	movs	r1, #40	; 0x28
   1a6f6:	4620      	mov	r0, r4
   1a6f8:	f7ff faee 	bl	19cd8 <d_make_comp>
   1a6fc:	4605      	mov	r5, r0
   1a6fe:	9001      	str	r0, [sp, #4]
   1a700:	e7e1      	b.n	1a6c6 <d_type+0x14a>
   1a702:	3201      	adds	r2, #1
   1a704:	60e2      	str	r2, [r4, #12]
   1a706:	4620      	mov	r0, r4
   1a708:	f7ff ff38 	bl	1a57c <d_type>
   1a70c:	2300      	movs	r3, #0
   1a70e:	4602      	mov	r2, r0
   1a710:	2123      	movs	r1, #35	; 0x23
   1a712:	4620      	mov	r0, r4
   1a714:	f7ff fae0 	bl	19cd8 <d_make_comp>
   1a718:	4605      	mov	r5, r0
   1a71a:	9001      	str	r0, [sp, #4]
   1a71c:	e7d3      	b.n	1a6c6 <d_type+0x14a>
   1a71e:	3201      	adds	r2, #1
   1a720:	60e2      	str	r2, [r4, #12]
   1a722:	4620      	mov	r0, r4
   1a724:	f7ff ff2a 	bl	1a57c <d_type>
   1a728:	2300      	movs	r3, #0
   1a72a:	4602      	mov	r2, r0
   1a72c:	2122      	movs	r1, #34	; 0x22
   1a72e:	4620      	mov	r0, r4
   1a730:	f7ff fad2 	bl	19cd8 <d_make_comp>
   1a734:	4605      	mov	r5, r0
   1a736:	9001      	str	r0, [sp, #4]
   1a738:	e7c5      	b.n	1a6c6 <d_type+0x14a>
   1a73a:	3201      	adds	r2, #1
   1a73c:	60e2      	str	r2, [r4, #12]
   1a73e:	4620      	mov	r0, r4
   1a740:	f7ff ff1c 	bl	1a57c <d_type>
   1a744:	2300      	movs	r3, #0
   1a746:	4602      	mov	r2, r0
   1a748:	2124      	movs	r1, #36	; 0x24
   1a74a:	4620      	mov	r0, r4
   1a74c:	f7ff fac4 	bl	19cd8 <d_make_comp>
   1a750:	4605      	mov	r5, r0
   1a752:	9001      	str	r0, [sp, #4]
   1a754:	e7b7      	b.n	1a6c6 <d_type+0x14a>
   1a756:	3201      	adds	r2, #1
   1a758:	60e2      	str	r2, [r4, #12]
   1a75a:	4620      	mov	r0, r4
   1a75c:	f7ff ff0e 	bl	1a57c <d_type>
   1a760:	2300      	movs	r3, #0
   1a762:	4602      	mov	r2, r0
   1a764:	2125      	movs	r1, #37	; 0x25
   1a766:	4620      	mov	r0, r4
   1a768:	f7ff fab6 	bl	19cd8 <d_make_comp>
   1a76c:	4605      	mov	r5, r0
   1a76e:	9001      	str	r0, [sp, #4]
   1a770:	e7a9      	b.n	1a6c6 <d_type+0x14a>
   1a772:	4620      	mov	r0, r4
   1a774:	f000 fb9e 	bl	1aeb4 <d_function_type>
   1a778:	4605      	mov	r5, r0
   1a77a:	9001      	str	r0, [sp, #4]
   1a77c:	e7a3      	b.n	1a6c6 <d_type+0x14a>
   1a77e:	1c53      	adds	r3, r2, #1
   1a780:	60e3      	str	r3, [r4, #12]
   1a782:	7853      	ldrb	r3, [r2, #1]
   1a784:	2b00      	cmp	r3, #0
   1a786:	f43f af65 	beq.w	1a654 <d_type+0xd8>
   1a78a:	1c93      	adds	r3, r2, #2
   1a78c:	60e3      	str	r3, [r4, #12]
   1a78e:	7853      	ldrb	r3, [r2, #1]
   1a790:	3b46      	subs	r3, #70	; 0x46
   1a792:	2b30      	cmp	r3, #48	; 0x30
   1a794:	f63f af5e 	bhi.w	1a654 <d_type+0xd8>
   1a798:	a101      	add	r1, pc, #4	; (adr r1, 1a7a0 <d_type+0x224>)
   1a79a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   1a79e:	bf00      	nop
   1a7a0:	0001aa41 	.word	0x0001aa41
   1a7a4:	0001a655 	.word	0x0001a655
   1a7a8:	0001a655 	.word	0x0001a655
   1a7ac:	0001a655 	.word	0x0001a655
   1a7b0:	0001a655 	.word	0x0001a655
   1a7b4:	0001a655 	.word	0x0001a655
   1a7b8:	0001a655 	.word	0x0001a655
   1a7bc:	0001a655 	.word	0x0001a655
   1a7c0:	0001a655 	.word	0x0001a655
   1a7c4:	0001a655 	.word	0x0001a655
   1a7c8:	0001a655 	.word	0x0001a655
   1a7cc:	0001a655 	.word	0x0001a655
   1a7d0:	0001a655 	.word	0x0001a655
   1a7d4:	0001a655 	.word	0x0001a655
   1a7d8:	0001aa05 	.word	0x0001aa05
   1a7dc:	0001a655 	.word	0x0001a655
   1a7e0:	0001a655 	.word	0x0001a655
   1a7e4:	0001a655 	.word	0x0001a655
   1a7e8:	0001a655 	.word	0x0001a655
   1a7ec:	0001a655 	.word	0x0001a655
   1a7f0:	0001a655 	.word	0x0001a655
   1a7f4:	0001a655 	.word	0x0001a655
   1a7f8:	0001a655 	.word	0x0001a655
   1a7fc:	0001a655 	.word	0x0001a655
   1a800:	0001a655 	.word	0x0001a655
   1a804:	0001a655 	.word	0x0001a655
   1a808:	0001a655 	.word	0x0001a655
   1a80c:	0001aad9 	.word	0x0001aad9
   1a810:	0001a655 	.word	0x0001a655
   1a814:	0001aaad 	.word	0x0001aaad
   1a818:	0001acc7 	.word	0x0001acc7
   1a81c:	0001ac97 	.word	0x0001ac97
   1a820:	0001ab35 	.word	0x0001ab35
   1a824:	0001a655 	.word	0x0001a655
   1a828:	0001ab05 	.word	0x0001ab05
   1a82c:	0001ac67 	.word	0x0001ac67
   1a830:	0001a655 	.word	0x0001a655
   1a834:	0001a655 	.word	0x0001a655
   1a838:	0001a655 	.word	0x0001a655
   1a83c:	0001a655 	.word	0x0001a655
   1a840:	0001ac37 	.word	0x0001ac37
   1a844:	0001a655 	.word	0x0001a655
   1a848:	0001ac1f 	.word	0x0001ac1f
   1a84c:	0001a655 	.word	0x0001a655
   1a850:	0001a655 	.word	0x0001a655
   1a854:	0001abef 	.word	0x0001abef
   1a858:	0001aa05 	.word	0x0001aa05
   1a85c:	0001abbf 	.word	0x0001abbf
   1a860:	0001ab65 	.word	0x0001ab65
   1a864:	3201      	adds	r2, #1
   1a866:	60e2      	str	r2, [r4, #12]
   1a868:	4620      	mov	r0, r4
   1a86a:	f7ff fe87 	bl	1a57c <d_type>
   1a86e:	2300      	movs	r3, #0
   1a870:	4602      	mov	r2, r0
   1a872:	2126      	movs	r1, #38	; 0x26
   1a874:	4620      	mov	r0, r4
   1a876:	f7ff fa2f 	bl	19cd8 <d_make_comp>
   1a87a:	4605      	mov	r5, r0
   1a87c:	9001      	str	r0, [sp, #4]
   1a87e:	e722      	b.n	1a6c6 <d_type+0x14a>
   1a880:	4620      	mov	r0, r4
   1a882:	f7ff fcd5 	bl	1a230 <d_template_param>
   1a886:	68e6      	ldr	r6, [r4, #12]
   1a888:	9001      	str	r0, [sp, #4]
   1a88a:	7833      	ldrb	r3, [r6, #0]
   1a88c:	2b49      	cmp	r3, #73	; 0x49
   1a88e:	4605      	mov	r5, r0
   1a890:	f47f af19 	bne.w	1a6c6 <d_type+0x14a>
   1a894:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1a896:	2b00      	cmp	r3, #0
   1a898:	f040 8257 	bne.w	1ad4a <d_type+0x7ce>
   1a89c:	2800      	cmp	r0, #0
   1a89e:	f43f aed9 	beq.w	1a654 <d_type+0xd8>
   1a8a2:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1a8a6:	428a      	cmp	r2, r1
   1a8a8:	f6bf aed4 	bge.w	1a654 <d_type+0xd8>
   1a8ac:	69e1      	ldr	r1, [r4, #28]
   1a8ae:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1a8b2:	3201      	adds	r2, #1
   1a8b4:	6222      	str	r2, [r4, #32]
   1a8b6:	7832      	ldrb	r2, [r6, #0]
   1a8b8:	3a49      	subs	r2, #73	; 0x49
   1a8ba:	2a01      	cmp	r2, #1
   1a8bc:	d805      	bhi.n	1a8ca <d_type+0x34e>
   1a8be:	3601      	adds	r6, #1
   1a8c0:	60e6      	str	r6, [r4, #12]
   1a8c2:	4620      	mov	r0, r4
   1a8c4:	f000 fe0c 	bl	1b4e0 <d_template_args_1>
   1a8c8:	4603      	mov	r3, r0
   1a8ca:	462a      	mov	r2, r5
   1a8cc:	e01c      	b.n	1a908 <d_type+0x38c>
   1a8ce:	7853      	ldrb	r3, [r2, #1]
   1a8d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   1a8d4:	2a09      	cmp	r2, #9
   1a8d6:	d905      	bls.n	1a8e4 <d_type+0x368>
   1a8d8:	2b5f      	cmp	r3, #95	; 0x5f
   1a8da:	d003      	beq.n	1a8e4 <d_type+0x368>
   1a8dc:	3b41      	subs	r3, #65	; 0x41
   1a8de:	2b19      	cmp	r3, #25
   1a8e0:	f200 8226 	bhi.w	1ad30 <d_type+0x7b4>
   1a8e4:	2100      	movs	r1, #0
   1a8e6:	4620      	mov	r0, r4
   1a8e8:	f7ff fd7e 	bl	1a3e8 <d_substitution>
   1a8ec:	68e3      	ldr	r3, [r4, #12]
   1a8ee:	9001      	str	r0, [sp, #4]
   1a8f0:	781a      	ldrb	r2, [r3, #0]
   1a8f2:	2a49      	cmp	r2, #73	; 0x49
   1a8f4:	4605      	mov	r5, r0
   1a8f6:	f47f aeae 	bne.w	1a656 <d_type+0xda>
   1a8fa:	3301      	adds	r3, #1
   1a8fc:	60e3      	str	r3, [r4, #12]
   1a8fe:	4620      	mov	r0, r4
   1a900:	f000 fdee 	bl	1b4e0 <d_template_args_1>
   1a904:	462a      	mov	r2, r5
   1a906:	4603      	mov	r3, r0
   1a908:	2104      	movs	r1, #4
   1a90a:	4620      	mov	r0, r4
   1a90c:	f7ff f9e4 	bl	19cd8 <d_make_comp>
   1a910:	4605      	mov	r5, r0
   1a912:	9001      	str	r0, [sp, #4]
   1a914:	e6d7      	b.n	1a6c6 <d_type+0x14a>
   1a916:	bf00      	nop
   1a918:	03ec7bff 	.word	0x03ec7bff
   1a91c:	20001a04 	.word	0x20001a04
   1a920:	3201      	adds	r2, #1
   1a922:	60e2      	str	r2, [r4, #12]
   1a924:	4620      	mov	r0, r4
   1a926:	f7ff fcef 	bl	1a308 <d_source_name>
   1a92a:	68e3      	ldr	r3, [r4, #12]
   1a92c:	9001      	str	r0, [sp, #4]
   1a92e:	781a      	ldrb	r2, [r3, #0]
   1a930:	2a49      	cmp	r2, #73	; 0x49
   1a932:	4605      	mov	r5, r0
   1a934:	f000 81e1 	beq.w	1acfa <d_type+0x77e>
   1a938:	4620      	mov	r0, r4
   1a93a:	f7ff fe1f 	bl	1a57c <d_type>
   1a93e:	462b      	mov	r3, r5
   1a940:	4602      	mov	r2, r0
   1a942:	2121      	movs	r1, #33	; 0x21
   1a944:	4620      	mov	r0, r4
   1a946:	f7ff f9c7 	bl	19cd8 <d_make_comp>
   1a94a:	4605      	mov	r5, r0
   1a94c:	9001      	str	r0, [sp, #4]
   1a94e:	e6ba      	b.n	1a6c6 <d_type+0x14a>
   1a950:	1c55      	adds	r5, r2, #1
   1a952:	60e5      	str	r5, [r4, #12]
   1a954:	7853      	ldrb	r3, [r2, #1]
   1a956:	2b5f      	cmp	r3, #95	; 0x5f
   1a958:	f000 81cd 	beq.w	1acf6 <d_type+0x77a>
   1a95c:	3b30      	subs	r3, #48	; 0x30
   1a95e:	2b09      	cmp	r3, #9
   1a960:	f200 81d8 	bhi.w	1ad14 <d_type+0x798>
   1a964:	462b      	mov	r3, r5
   1a966:	469c      	mov	ip, r3
   1a968:	3301      	adds	r3, #1
   1a96a:	60e3      	str	r3, [r4, #12]
   1a96c:	7819      	ldrb	r1, [r3, #0]
   1a96e:	3930      	subs	r1, #48	; 0x30
   1a970:	2909      	cmp	r1, #9
   1a972:	d9f8      	bls.n	1a966 <d_type+0x3ea>
   1a974:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
   1a978:	4281      	cmp	r1, r0
   1a97a:	ebac 0202 	sub.w	r2, ip, r2
   1a97e:	f6bf ae69 	bge.w	1a654 <d_type+0xd8>
   1a982:	6927      	ldr	r7, [r4, #16]
   1a984:	eb01 0081 	add.w	r0, r1, r1, lsl #2
   1a988:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   1a98c:	ea4f 0e80 	mov.w	lr, r0, lsl #2
   1a990:	2000      	movs	r0, #0
   1a992:	3101      	adds	r1, #1
   1a994:	4282      	cmp	r2, r0
   1a996:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1a99a:	6161      	str	r1, [r4, #20]
   1a99c:	f77f ae5a 	ble.w	1a654 <d_type+0xd8>
   1a9a0:	e9c6 0001 	strd	r0, r0, [r6, #4]
   1a9a4:	f807 000e 	strb.w	r0, [r7, lr]
   1a9a8:	e9c6 5203 	strd	r5, r2, [r6, #12]
   1a9ac:	f89c 2001 	ldrb.w	r2, [ip, #1]
   1a9b0:	461d      	mov	r5, r3
   1a9b2:	2a5f      	cmp	r2, #95	; 0x5f
   1a9b4:	f47f ae4e 	bne.w	1a654 <d_type+0xd8>
   1a9b8:	3501      	adds	r5, #1
   1a9ba:	60e5      	str	r5, [r4, #12]
   1a9bc:	4620      	mov	r0, r4
   1a9be:	f7ff fddd 	bl	1a57c <d_type>
   1a9c2:	4632      	mov	r2, r6
   1a9c4:	4603      	mov	r3, r0
   1a9c6:	212a      	movs	r1, #42	; 0x2a
   1a9c8:	4620      	mov	r0, r4
   1a9ca:	f7ff f985 	bl	19cd8 <d_make_comp>
   1a9ce:	4605      	mov	r5, r0
   1a9d0:	9001      	str	r0, [sp, #4]
   1a9d2:	e678      	b.n	1a6c6 <d_type+0x14a>
   1a9d4:	3201      	adds	r2, #1
   1a9d6:	60e2      	str	r2, [r4, #12]
   1a9d8:	4620      	mov	r0, r4
   1a9da:	f7ff fdcf 	bl	1a57c <d_type>
   1a9de:	4605      	mov	r5, r0
   1a9e0:	2800      	cmp	r0, #0
   1a9e2:	f43f ae37 	beq.w	1a654 <d_type+0xd8>
   1a9e6:	4620      	mov	r0, r4
   1a9e8:	f7ff fdc8 	bl	1a57c <d_type>
   1a9ec:	4603      	mov	r3, r0
   1a9ee:	2800      	cmp	r0, #0
   1a9f0:	f43f ae30 	beq.w	1a654 <d_type+0xd8>
   1a9f4:	462a      	mov	r2, r5
   1a9f6:	212b      	movs	r1, #43	; 0x2b
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	f7ff f96d 	bl	19cd8 <d_make_comp>
   1a9fe:	4605      	mov	r5, r0
   1aa00:	9001      	str	r0, [sp, #4]
   1aa02:	e660      	b.n	1a6c6 <d_type+0x14a>
   1aa04:	2301      	movs	r3, #1
   1aa06:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1aa08:	6323      	str	r3, [r4, #48]	; 0x30
   1aa0a:	4620      	mov	r0, r4
   1aa0c:	f000 fe30 	bl	1b670 <d_expression_1>
   1aa10:	6325      	str	r5, [r4, #48]	; 0x30
   1aa12:	4602      	mov	r2, r0
   1aa14:	2300      	movs	r3, #0
   1aa16:	2144      	movs	r1, #68	; 0x44
   1aa18:	4620      	mov	r0, r4
   1aa1a:	f7ff f95d 	bl	19cd8 <d_make_comp>
   1aa1e:	4605      	mov	r5, r0
   1aa20:	9001      	str	r0, [sp, #4]
   1aa22:	2800      	cmp	r0, #0
   1aa24:	f43f ae16 	beq.w	1a654 <d_type+0xd8>
   1aa28:	68e3      	ldr	r3, [r4, #12]
   1aa2a:	781a      	ldrb	r2, [r3, #0]
   1aa2c:	2a00      	cmp	r2, #0
   1aa2e:	f43f ae11 	beq.w	1a654 <d_type+0xd8>
   1aa32:	1c5a      	adds	r2, r3, #1
   1aa34:	60e2      	str	r2, [r4, #12]
   1aa36:	781b      	ldrb	r3, [r3, #0]
   1aa38:	2b45      	cmp	r3, #69	; 0x45
   1aa3a:	f47f ae0b 	bne.w	1a654 <d_type+0xd8>
   1aa3e:	e644      	b.n	1a6ca <d_type+0x14e>
   1aa40:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
   1aa44:	428b      	cmp	r3, r1
   1aa46:	f280 81b5 	bge.w	1adb4 <d_type+0x838>
   1aa4a:	6921      	ldr	r1, [r4, #16]
   1aa4c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   1aa50:	eb01 0580 	add.w	r5, r1, r0, lsl #2
   1aa54:	3301      	adds	r3, #1
   1aa56:	2600      	movs	r6, #0
   1aa58:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1aa5c:	6163      	str	r3, [r4, #20]
   1aa5e:	232c      	movs	r3, #44	; 0x2c
   1aa60:	f801 3020 	strb.w	r3, [r1, r0, lsl #2]
   1aa64:	7893      	ldrb	r3, [r2, #2]
   1aa66:	9501      	str	r5, [sp, #4]
   1aa68:	3b30      	subs	r3, #48	; 0x30
   1aa6a:	b2db      	uxtb	r3, r3
   1aa6c:	2b09      	cmp	r3, #9
   1aa6e:	bf94      	ite	ls
   1aa70:	2301      	movls	r3, #1
   1aa72:	4633      	movhi	r3, r6
   1aa74:	822b      	strh	r3, [r5, #16]
   1aa76:	d802      	bhi.n	1aa7e <d_type+0x502>
   1aa78:	4620      	mov	r0, r4
   1aa7a:	f7ff f9a5 	bl	19dc8 <d_number>
   1aa7e:	4620      	mov	r0, r4
   1aa80:	f7ff fd7c 	bl	1a57c <d_type>
   1aa84:	60e8      	str	r0, [r5, #12]
   1aa86:	2800      	cmp	r0, #0
   1aa88:	f43f ade4 	beq.w	1a654 <d_type+0xd8>
   1aa8c:	4620      	mov	r0, r4
   1aa8e:	f7ff f99b 	bl	19dc8 <d_number>
   1aa92:	68e2      	ldr	r2, [r4, #12]
   1aa94:	7813      	ldrb	r3, [r2, #0]
   1aa96:	b113      	cbz	r3, 1aa9e <d_type+0x522>
   1aa98:	1c53      	adds	r3, r2, #1
   1aa9a:	60e3      	str	r3, [r4, #12]
   1aa9c:	7813      	ldrb	r3, [r2, #0]
   1aa9e:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
   1aaa2:	fab3 f383 	clz	r3, r3
   1aaa6:	095b      	lsrs	r3, r3, #5
   1aaa8:	826b      	strh	r3, [r5, #18]
   1aaaa:	e5d4      	b.n	1a656 <d_type+0xda>
   1aaac:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1aab0:	4293      	cmp	r3, r2
   1aab2:	f6bf adcf 	bge.w	1a654 <d_type+0xd8>
   1aab6:	6922      	ldr	r2, [r4, #16]
   1aab8:	49c0      	ldr	r1, [pc, #768]	; (1adbc <d_type+0x840>)
   1aaba:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1aabe:	00a8      	lsls	r0, r5, #2
   1aac0:	3301      	adds	r3, #1
   1aac2:	6163      	str	r3, [r4, #20]
   1aac4:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1aac8:	2300      	movs	r3, #0
   1aaca:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1aace:	5413      	strb	r3, [r2, r0]
   1aad0:	230e      	movs	r3, #14
   1aad2:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1aad6:	e5be      	b.n	1a656 <d_type+0xda>
   1aad8:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1aadc:	4293      	cmp	r3, r2
   1aade:	f6bf adb9 	bge.w	1a654 <d_type+0xd8>
   1aae2:	6922      	ldr	r2, [r4, #16]
   1aae4:	49b6      	ldr	r1, [pc, #728]	; (1adc0 <d_type+0x844>)
   1aae6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1aaea:	00a8      	lsls	r0, r5, #2
   1aaec:	3301      	adds	r3, #1
   1aaee:	6163      	str	r3, [r4, #20]
   1aaf0:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1aaf4:	2300      	movs	r3, #0
   1aaf6:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1aafa:	5413      	strb	r3, [r2, r0]
   1aafc:	2304      	movs	r3, #4
   1aafe:	e9c5 1303 	strd	r1, r3, [r5, #12]
   1ab02:	e5a8      	b.n	1a656 <d_type+0xda>
   1ab04:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ab08:	4293      	cmp	r3, r2
   1ab0a:	f280 816b 	bge.w	1ade4 <d_type+0x868>
   1ab0e:	6922      	ldr	r2, [r4, #16]
   1ab10:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ab14:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ab18:	3301      	adds	r3, #1
   1ab1a:	2000      	movs	r0, #0
   1ab1c:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ab20:	6163      	str	r3, [r4, #20]
   1ab22:	2327      	movs	r3, #39	; 0x27
   1ab24:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1ab28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ab2a:	4aa6      	ldr	r2, [pc, #664]	; (1adc4 <d_type+0x848>)
   1ab2c:	60ea      	str	r2, [r5, #12]
   1ab2e:	3304      	adds	r3, #4
   1ab30:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ab32:	e590      	b.n	1a656 <d_type+0xda>
   1ab34:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ab38:	4293      	cmp	r3, r2
   1ab3a:	f280 8153 	bge.w	1ade4 <d_type+0x868>
   1ab3e:	6922      	ldr	r2, [r4, #16]
   1ab40:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ab44:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ab48:	3301      	adds	r3, #1
   1ab4a:	2000      	movs	r0, #0
   1ab4c:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ab50:	6163      	str	r3, [r4, #20]
   1ab52:	2327      	movs	r3, #39	; 0x27
   1ab54:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1ab58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ab5a:	4a9b      	ldr	r2, [pc, #620]	; (1adc8 <d_type+0x84c>)
   1ab5c:	60ea      	str	r2, [r5, #12]
   1ab5e:	3309      	adds	r3, #9
   1ab60:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ab62:	e578      	b.n	1a656 <d_type+0xda>
   1ab64:	7893      	ldrb	r3, [r2, #2]
   1ab66:	2b5f      	cmp	r3, #95	; 0x5f
   1ab68:	f000 8114 	beq.w	1ad94 <d_type+0x818>
   1ab6c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ab70:	4293      	cmp	r3, r2
   1ab72:	f6bf ad6f 	bge.w	1a654 <d_type+0xd8>
   1ab76:	6922      	ldr	r2, [r4, #16]
   1ab78:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ab7c:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ab80:	3301      	adds	r3, #1
   1ab82:	2000      	movs	r0, #0
   1ab84:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ab88:	6163      	str	r3, [r4, #20]
   1ab8a:	2343      	movs	r3, #67	; 0x43
   1ab8c:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1ab90:	4620      	mov	r0, r4
   1ab92:	f7ff f919 	bl	19dc8 <d_number>
   1ab96:	60e8      	str	r0, [r5, #12]
   1ab98:	68e3      	ldr	r3, [r4, #12]
   1ab9a:	781a      	ldrb	r2, [r3, #0]
   1ab9c:	2a5f      	cmp	r2, #95	; 0x5f
   1ab9e:	f47f ad59 	bne.w	1a654 <d_type+0xd8>
   1aba2:	3301      	adds	r3, #1
   1aba4:	60e3      	str	r3, [r4, #12]
   1aba6:	4620      	mov	r0, r4
   1aba8:	f7ff fce8 	bl	1a57c <d_type>
   1abac:	462a      	mov	r2, r5
   1abae:	4603      	mov	r3, r0
   1abb0:	212d      	movs	r1, #45	; 0x2d
   1abb2:	4620      	mov	r0, r4
   1abb4:	f7ff f890 	bl	19cd8 <d_make_comp>
   1abb8:	4605      	mov	r5, r0
   1abba:	9001      	str	r0, [sp, #4]
   1abbc:	e583      	b.n	1a6c6 <d_type+0x14a>
   1abbe:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1abc2:	4293      	cmp	r3, r2
   1abc4:	f280 810e 	bge.w	1ade4 <d_type+0x868>
   1abc8:	6922      	ldr	r2, [r4, #16]
   1abca:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1abce:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1abd2:	3301      	adds	r3, #1
   1abd4:	2000      	movs	r0, #0
   1abd6:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1abda:	6163      	str	r3, [r4, #20]
   1abdc:	2327      	movs	r3, #39	; 0x27
   1abde:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1abe2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1abe4:	4a79      	ldr	r2, [pc, #484]	; (1adcc <d_type+0x850>)
   1abe6:	60ea      	str	r2, [r5, #12]
   1abe8:	3307      	adds	r3, #7
   1abea:	62e3      	str	r3, [r4, #44]	; 0x2c
   1abec:	e533      	b.n	1a656 <d_type+0xda>
   1abee:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1abf2:	4293      	cmp	r3, r2
   1abf4:	f280 80f6 	bge.w	1ade4 <d_type+0x868>
   1abf8:	6922      	ldr	r2, [r4, #16]
   1abfa:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1abfe:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ac02:	3301      	adds	r3, #1
   1ac04:	2000      	movs	r0, #0
   1ac06:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ac0a:	6163      	str	r3, [r4, #20]
   1ac0c:	2327      	movs	r3, #39	; 0x27
   1ac0e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1ac12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ac14:	4a6e      	ldr	r2, [pc, #440]	; (1add0 <d_type+0x854>)
   1ac16:	60ea      	str	r2, [r5, #12]
   1ac18:	3308      	adds	r3, #8
   1ac1a:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ac1c:	e51b      	b.n	1a656 <d_type+0xda>
   1ac1e:	4620      	mov	r0, r4
   1ac20:	f7ff fcac 	bl	1a57c <d_type>
   1ac24:	2300      	movs	r3, #0
   1ac26:	4602      	mov	r2, r0
   1ac28:	214c      	movs	r1, #76	; 0x4c
   1ac2a:	4620      	mov	r0, r4
   1ac2c:	f7ff f854 	bl	19cd8 <d_make_comp>
   1ac30:	4605      	mov	r5, r0
   1ac32:	9001      	str	r0, [sp, #4]
   1ac34:	e547      	b.n	1a6c6 <d_type+0x14a>
   1ac36:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ac3a:	4293      	cmp	r3, r2
   1ac3c:	f280 80d2 	bge.w	1ade4 <d_type+0x868>
   1ac40:	6922      	ldr	r2, [r4, #16]
   1ac42:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ac46:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ac4a:	3301      	adds	r3, #1
   1ac4c:	2000      	movs	r0, #0
   1ac4e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ac52:	6163      	str	r3, [r4, #20]
   1ac54:	2327      	movs	r3, #39	; 0x27
   1ac56:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1ac5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ac5c:	4a5d      	ldr	r2, [pc, #372]	; (1add4 <d_type+0x858>)
   1ac5e:	60ea      	str	r2, [r5, #12]
   1ac60:	3311      	adds	r3, #17
   1ac62:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ac64:	e4f7      	b.n	1a656 <d_type+0xda>
   1ac66:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ac6a:	4293      	cmp	r3, r2
   1ac6c:	f280 80ba 	bge.w	1ade4 <d_type+0x868>
   1ac70:	6922      	ldr	r2, [r4, #16]
   1ac72:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1ac76:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1ac7a:	3301      	adds	r3, #1
   1ac7c:	2000      	movs	r0, #0
   1ac7e:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ac82:	6163      	str	r3, [r4, #20]
   1ac84:	2327      	movs	r3, #39	; 0x27
   1ac86:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1ac8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1ac8c:	4a52      	ldr	r2, [pc, #328]	; (1add8 <d_type+0x85c>)
   1ac8e:	60ea      	str	r2, [r5, #12]
   1ac90:	3308      	adds	r3, #8
   1ac92:	62e3      	str	r3, [r4, #44]	; 0x2c
   1ac94:	e4df      	b.n	1a656 <d_type+0xda>
   1ac96:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1ac9a:	4293      	cmp	r3, r2
   1ac9c:	f280 80a2 	bge.w	1ade4 <d_type+0x868>
   1aca0:	6922      	ldr	r2, [r4, #16]
   1aca2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1aca6:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1acaa:	3301      	adds	r3, #1
   1acac:	2000      	movs	r0, #0
   1acae:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1acb2:	6163      	str	r3, [r4, #20]
   1acb4:	2327      	movs	r3, #39	; 0x27
   1acb6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1acba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1acbc:	4a47      	ldr	r2, [pc, #284]	; (1addc <d_type+0x860>)
   1acbe:	60ea      	str	r2, [r5, #12]
   1acc0:	330a      	adds	r3, #10
   1acc2:	62e3      	str	r3, [r4, #44]	; 0x2c
   1acc4:	e4c7      	b.n	1a656 <d_type+0xda>
   1acc6:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1acca:	4293      	cmp	r3, r2
   1accc:	f280 808a 	bge.w	1ade4 <d_type+0x868>
   1acd0:	6922      	ldr	r2, [r4, #16]
   1acd2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1acd6:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1acda:	3301      	adds	r3, #1
   1acdc:	2000      	movs	r0, #0
   1acde:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1ace2:	6163      	str	r3, [r4, #20]
   1ace4:	2327      	movs	r3, #39	; 0x27
   1ace6:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1acea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1acec:	4a3c      	ldr	r2, [pc, #240]	; (1ade0 <d_type+0x864>)
   1acee:	60ea      	str	r2, [r5, #12]
   1acf0:	3309      	adds	r3, #9
   1acf2:	62e3      	str	r3, [r4, #44]	; 0x2c
   1acf4:	e4af      	b.n	1a656 <d_type+0xda>
   1acf6:	2600      	movs	r6, #0
   1acf8:	e65e      	b.n	1a9b8 <d_type+0x43c>
   1acfa:	3301      	adds	r3, #1
   1acfc:	60e3      	str	r3, [r4, #12]
   1acfe:	4620      	mov	r0, r4
   1ad00:	f000 fbee 	bl	1b4e0 <d_template_args_1>
   1ad04:	462a      	mov	r2, r5
   1ad06:	4603      	mov	r3, r0
   1ad08:	2104      	movs	r1, #4
   1ad0a:	4620      	mov	r0, r4
   1ad0c:	f7fe ffe4 	bl	19cd8 <d_make_comp>
   1ad10:	4605      	mov	r5, r0
   1ad12:	e611      	b.n	1a938 <d_type+0x3bc>
   1ad14:	2301      	movs	r3, #1
   1ad16:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1ad18:	6323      	str	r3, [r4, #48]	; 0x30
   1ad1a:	4620      	mov	r0, r4
   1ad1c:	f000 fca8 	bl	1b670 <d_expression_1>
   1ad20:	6325      	str	r5, [r4, #48]	; 0x30
   1ad22:	4606      	mov	r6, r0
   1ad24:	2800      	cmp	r0, #0
   1ad26:	f43f ac95 	beq.w	1a654 <d_type+0xd8>
   1ad2a:	68e5      	ldr	r5, [r4, #12]
   1ad2c:	782a      	ldrb	r2, [r5, #0]
   1ad2e:	e640      	b.n	1a9b2 <d_type+0x436>
   1ad30:	4620      	mov	r0, r4
   1ad32:	f001 fa31 	bl	1c198 <d_name>
   1ad36:	4605      	mov	r5, r0
   1ad38:	9001      	str	r0, [sp, #4]
   1ad3a:	2800      	cmp	r0, #0
   1ad3c:	f43f ac8a 	beq.w	1a654 <d_type+0xd8>
   1ad40:	7803      	ldrb	r3, [r0, #0]
   1ad42:	2b18      	cmp	r3, #24
   1ad44:	f47f acc1 	bne.w	1a6ca <d_type+0x14e>
   1ad48:	e485      	b.n	1a656 <d_type+0xda>
   1ad4a:	1c73      	adds	r3, r6, #1
   1ad4c:	60e3      	str	r3, [r4, #12]
   1ad4e:	4620      	mov	r0, r4
   1ad50:	f8d4 9014 	ldr.w	r9, [r4, #20]
   1ad54:	f8d4 8020 	ldr.w	r8, [r4, #32]
   1ad58:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   1ad5a:	f000 fbc1 	bl	1b4e0 <d_template_args_1>
   1ad5e:	68e3      	ldr	r3, [r4, #12]
   1ad60:	781b      	ldrb	r3, [r3, #0]
   1ad62:	2b49      	cmp	r3, #73	; 0x49
   1ad64:	d006      	beq.n	1ad74 <d_type+0x7f8>
   1ad66:	60e6      	str	r6, [r4, #12]
   1ad68:	f8c4 9014 	str.w	r9, [r4, #20]
   1ad6c:	f8c4 8020 	str.w	r8, [r4, #32]
   1ad70:	62e7      	str	r7, [r4, #44]	; 0x2c
   1ad72:	e4a8      	b.n	1a6c6 <d_type+0x14a>
   1ad74:	2d00      	cmp	r5, #0
   1ad76:	f43f ac6d 	beq.w	1a654 <d_type+0xd8>
   1ad7a:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
   1ad7e:	4299      	cmp	r1, r3
   1ad80:	f6bf ac68 	bge.w	1a654 <d_type+0xd8>
   1ad84:	69e2      	ldr	r2, [r4, #28]
   1ad86:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   1ad8a:	3101      	adds	r1, #1
   1ad8c:	4603      	mov	r3, r0
   1ad8e:	462a      	mov	r2, r5
   1ad90:	6221      	str	r1, [r4, #32]
   1ad92:	e5b9      	b.n	1a908 <d_type+0x38c>
   1ad94:	3203      	adds	r2, #3
   1ad96:	2301      	movs	r3, #1
   1ad98:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1ad9a:	60e2      	str	r2, [r4, #12]
   1ad9c:	6323      	str	r3, [r4, #48]	; 0x30
   1ad9e:	4620      	mov	r0, r4
   1ada0:	f000 fc66 	bl	1b670 <d_expression_1>
   1ada4:	6325      	str	r5, [r4, #48]	; 0x30
   1ada6:	4605      	mov	r5, r0
   1ada8:	2800      	cmp	r0, #0
   1adaa:	f47f aef5 	bne.w	1ab98 <d_type+0x61c>
   1adae:	e451      	b.n	1a654 <d_type+0xd8>
   1adb0:	68c3      	ldr	r3, [r0, #12]
   1adb2:	deff      	udf	#255	; 0xff
   1adb4:	2300      	movs	r3, #0
   1adb6:	701b      	strb	r3, [r3, #0]
   1adb8:	deff      	udf	#255	; 0xff
   1adba:	bf00      	nop
   1adbc:	200024b4 	.word	0x200024b4
   1adc0:	200024ac 	.word	0x200024ac
   1adc4:	20001c48 	.word	0x20001c48
   1adc8:	20001c0c 	.word	0x20001c0c
   1adcc:	20001c5c 	.word	0x20001c5c
   1add0:	20001c70 	.word	0x20001c70
   1add4:	20001c98 	.word	0x20001c98
   1add8:	20001c84 	.word	0x20001c84
   1addc:	20001c34 	.word	0x20001c34
   1ade0:	20001c20 	.word	0x20001c20
   1ade4:	2300      	movs	r3, #0
   1ade6:	68db      	ldr	r3, [r3, #12]
   1ade8:	deff      	udf	#255	; 0xff
   1adea:	bf00      	nop

0001adec <d_parmlist>:
   1adec:	b530      	push	{r4, r5, lr}
   1adee:	68c2      	ldr	r2, [r0, #12]
   1adf0:	b083      	sub	sp, #12
   1adf2:	2300      	movs	r3, #0
   1adf4:	9301      	str	r3, [sp, #4]
   1adf6:	7813      	ldrb	r3, [r2, #0]
   1adf8:	2b00      	cmp	r3, #0
   1adfa:	d034      	beq.n	1ae66 <d_parmlist+0x7a>
   1adfc:	4604      	mov	r4, r0
   1adfe:	ad01      	add	r5, sp, #4
   1ae00:	2b4f      	cmp	r3, #79	; 0x4f
   1ae02:	d00c      	beq.n	1ae1e <d_parmlist+0x32>
   1ae04:	d809      	bhi.n	1ae1a <d_parmlist+0x2e>
   1ae06:	2b2e      	cmp	r3, #46	; 0x2e
   1ae08:	d001      	beq.n	1ae0e <d_parmlist+0x22>
   1ae0a:	2b45      	cmp	r3, #69	; 0x45
   1ae0c:	d10a      	bne.n	1ae24 <d_parmlist+0x38>
   1ae0e:	9801      	ldr	r0, [sp, #4]
   1ae10:	b348      	cbz	r0, 1ae66 <d_parmlist+0x7a>
   1ae12:	6903      	ldr	r3, [r0, #16]
   1ae14:	b1cb      	cbz	r3, 1ae4a <d_parmlist+0x5e>
   1ae16:	b003      	add	sp, #12
   1ae18:	bd30      	pop	{r4, r5, pc}
   1ae1a:	2b52      	cmp	r3, #82	; 0x52
   1ae1c:	d102      	bne.n	1ae24 <d_parmlist+0x38>
   1ae1e:	7853      	ldrb	r3, [r2, #1]
   1ae20:	2b45      	cmp	r3, #69	; 0x45
   1ae22:	d0f4      	beq.n	1ae0e <d_parmlist+0x22>
   1ae24:	4620      	mov	r0, r4
   1ae26:	f7ff fba9 	bl	1a57c <d_type>
   1ae2a:	4602      	mov	r2, r0
   1ae2c:	2300      	movs	r3, #0
   1ae2e:	212e      	movs	r1, #46	; 0x2e
   1ae30:	4620      	mov	r0, r4
   1ae32:	b1c2      	cbz	r2, 1ae66 <d_parmlist+0x7a>
   1ae34:	f7fe ff50 	bl	19cd8 <d_make_comp>
   1ae38:	6028      	str	r0, [r5, #0]
   1ae3a:	b1a0      	cbz	r0, 1ae66 <d_parmlist+0x7a>
   1ae3c:	68e2      	ldr	r2, [r4, #12]
   1ae3e:	7813      	ldrb	r3, [r2, #0]
   1ae40:	f100 0510 	add.w	r5, r0, #16
   1ae44:	2b00      	cmp	r3, #0
   1ae46:	d1db      	bne.n	1ae00 <d_parmlist+0x14>
   1ae48:	e7e1      	b.n	1ae0e <d_parmlist+0x22>
   1ae4a:	68c2      	ldr	r2, [r0, #12]
   1ae4c:	7811      	ldrb	r1, [r2, #0]
   1ae4e:	2927      	cmp	r1, #39	; 0x27
   1ae50:	d1e1      	bne.n	1ae16 <d_parmlist+0x2a>
   1ae52:	68d2      	ldr	r2, [r2, #12]
   1ae54:	7c11      	ldrb	r1, [r2, #16]
   1ae56:	2909      	cmp	r1, #9
   1ae58:	d1dd      	bne.n	1ae16 <d_parmlist+0x2a>
   1ae5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1ae5c:	6852      	ldr	r2, [r2, #4]
   1ae5e:	1a89      	subs	r1, r1, r2
   1ae60:	62e1      	str	r1, [r4, #44]	; 0x2c
   1ae62:	60c3      	str	r3, [r0, #12]
   1ae64:	e7d7      	b.n	1ae16 <d_parmlist+0x2a>
   1ae66:	2000      	movs	r0, #0
   1ae68:	b003      	add	sp, #12
   1ae6a:	bd30      	pop	{r4, r5, pc}

0001ae6c <d_bare_function_type>:
   1ae6c:	b570      	push	{r4, r5, r6, lr}
   1ae6e:	68c3      	ldr	r3, [r0, #12]
   1ae70:	781a      	ldrb	r2, [r3, #0]
   1ae72:	2a4a      	cmp	r2, #74	; 0x4a
   1ae74:	4605      	mov	r5, r0
   1ae76:	d01a      	beq.n	1aeae <d_bare_function_type+0x42>
   1ae78:	b181      	cbz	r1, 1ae9c <d_bare_function_type+0x30>
   1ae7a:	4628      	mov	r0, r5
   1ae7c:	f7ff fb7e 	bl	1a57c <d_type>
   1ae80:	4604      	mov	r4, r0
   1ae82:	b190      	cbz	r0, 1aeaa <d_bare_function_type+0x3e>
   1ae84:	4628      	mov	r0, r5
   1ae86:	f7ff ffb1 	bl	1adec <d_parmlist>
   1ae8a:	4603      	mov	r3, r0
   1ae8c:	b168      	cbz	r0, 1aeaa <d_bare_function_type+0x3e>
   1ae8e:	4622      	mov	r2, r4
   1ae90:	4628      	mov	r0, r5
   1ae92:	2129      	movs	r1, #41	; 0x29
   1ae94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1ae98:	f7fe bf1e 	b.w	19cd8 <d_make_comp>
   1ae9c:	4628      	mov	r0, r5
   1ae9e:	460c      	mov	r4, r1
   1aea0:	f7ff ffa4 	bl	1adec <d_parmlist>
   1aea4:	4603      	mov	r3, r0
   1aea6:	2800      	cmp	r0, #0
   1aea8:	d1f1      	bne.n	1ae8e <d_bare_function_type+0x22>
   1aeaa:	2000      	movs	r0, #0
   1aeac:	bd70      	pop	{r4, r5, r6, pc}
   1aeae:	3301      	adds	r3, #1
   1aeb0:	60c3      	str	r3, [r0, #12]
   1aeb2:	e7e2      	b.n	1ae7a <d_bare_function_type+0xe>

0001aeb4 <d_function_type>:
   1aeb4:	b510      	push	{r4, lr}
   1aeb6:	4604      	mov	r4, r0
   1aeb8:	6880      	ldr	r0, [r0, #8]
   1aeba:	f410 2080 	ands.w	r0, r0, #262144	; 0x40000
   1aebe:	d10b      	bne.n	1aed8 <d_function_type+0x24>
   1aec0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1aec2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1aec6:	d806      	bhi.n	1aed6 <d_function_type+0x22>
   1aec8:	1c51      	adds	r1, r2, #1
   1aeca:	68e3      	ldr	r3, [r4, #12]
   1aecc:	63e1      	str	r1, [r4, #60]	; 0x3c
   1aece:	7819      	ldrb	r1, [r3, #0]
   1aed0:	2946      	cmp	r1, #70	; 0x46
   1aed2:	d007      	beq.n	1aee4 <d_function_type+0x30>
   1aed4:	63e2      	str	r2, [r4, #60]	; 0x3c
   1aed6:	bd10      	pop	{r4, pc}
   1aed8:	68e3      	ldr	r3, [r4, #12]
   1aeda:	781a      	ldrb	r2, [r3, #0]
   1aedc:	2a46      	cmp	r2, #70	; 0x46
   1aede:	d001      	beq.n	1aee4 <d_function_type+0x30>
   1aee0:	2000      	movs	r0, #0
   1aee2:	bd10      	pop	{r4, pc}
   1aee4:	1c5a      	adds	r2, r3, #1
   1aee6:	60e2      	str	r2, [r4, #12]
   1aee8:	785a      	ldrb	r2, [r3, #1]
   1aeea:	2a59      	cmp	r2, #89	; 0x59
   1aeec:	bf04      	itt	eq
   1aeee:	3302      	addeq	r3, #2
   1aef0:	60e3      	streq	r3, [r4, #12]
   1aef2:	2101      	movs	r1, #1
   1aef4:	4620      	mov	r0, r4
   1aef6:	f7ff ffb9 	bl	1ae6c <d_bare_function_type>
   1aefa:	4601      	mov	r1, r0
   1aefc:	4620      	mov	r0, r4
   1aefe:	f7fe ffc1 	bl	19e84 <d_ref_qualifier>
   1af02:	68e3      	ldr	r3, [r4, #12]
   1af04:	781a      	ldrb	r2, [r3, #0]
   1af06:	2a45      	cmp	r2, #69	; 0x45
   1af08:	bf04      	itt	eq
   1af0a:	3301      	addeq	r3, #1
   1af0c:	60e3      	streq	r3, [r4, #12]
   1af0e:	68a3      	ldr	r3, [r4, #8]
   1af10:	bf18      	it	ne
   1af12:	2000      	movne	r0, #0
   1af14:	035b      	lsls	r3, r3, #13
   1af16:	d4de      	bmi.n	1aed6 <d_function_type+0x22>
   1af18:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1af1a:	3a01      	subs	r2, #1
   1af1c:	e7da      	b.n	1aed4 <d_function_type+0x20>
   1af1e:	bf00      	nop

0001af20 <d_operator_name>:
   1af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af22:	68c3      	ldr	r3, [r0, #12]
   1af24:	781f      	ldrb	r7, [r3, #0]
   1af26:	4606      	mov	r6, r0
   1af28:	bb77      	cbnz	r7, 1af88 <d_operator_name+0x68>
   1af2a:	f04f 0e00 	mov.w	lr, #0
   1af2e:	4d3d      	ldr	r5, [pc, #244]	; (1b024 <d_operator_name+0x104>)
   1af30:	2148      	movs	r1, #72	; 0x48
   1af32:	2200      	movs	r2, #0
   1af34:	1a8b      	subs	r3, r1, r2
   1af36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   1af3a:	eb02 0363 	add.w	r3, r2, r3, asr #1
   1af3e:	0118      	lsls	r0, r3, #4
   1af40:	eb05 1c03 	add.w	ip, r5, r3, lsl #4
   1af44:	582c      	ldr	r4, [r5, r0]
   1af46:	7820      	ldrb	r0, [r4, #0]
   1af48:	42b8      	cmp	r0, r7
   1af4a:	d006      	beq.n	1af5a <d_operator_name+0x3a>
   1af4c:	bf94      	ite	ls
   1af4e:	1c5a      	addls	r2, r3, #1
   1af50:	4619      	movhi	r1, r3
   1af52:	428a      	cmp	r2, r1
   1af54:	d1ee      	bne.n	1af34 <d_operator_name+0x14>
   1af56:	2000      	movs	r0, #0
   1af58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af5a:	7860      	ldrb	r0, [r4, #1]
   1af5c:	4570      	cmp	r0, lr
   1af5e:	d1f5      	bne.n	1af4c <d_operator_name+0x2c>
   1af60:	e9d6 3205 	ldrd	r3, r2, [r6, #20]
   1af64:	4293      	cmp	r3, r2
   1af66:	daf6      	bge.n	1af56 <d_operator_name+0x36>
   1af68:	6932      	ldr	r2, [r6, #16]
   1af6a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1af6e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
   1af72:	3301      	adds	r3, #1
   1af74:	2400      	movs	r4, #0
   1af76:	e9c0 4401 	strd	r4, r4, [r0, #4]
   1af7a:	6173      	str	r3, [r6, #20]
   1af7c:	2332      	movs	r3, #50	; 0x32
   1af7e:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1af82:	f8c0 c00c 	str.w	ip, [r0, #12]
   1af86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1af88:	1c5a      	adds	r2, r3, #1
   1af8a:	60c2      	str	r2, [r0, #12]
   1af8c:	f893 e001 	ldrb.w	lr, [r3, #1]
   1af90:	781f      	ldrb	r7, [r3, #0]
   1af92:	f1be 0f00 	cmp.w	lr, #0
   1af96:	d102      	bne.n	1af9e <d_operator_name+0x7e>
   1af98:	2f76      	cmp	r7, #118	; 0x76
   1af9a:	d0c8      	beq.n	1af2e <d_operator_name+0xe>
   1af9c:	e7c5      	b.n	1af2a <d_operator_name+0xa>
   1af9e:	1c9a      	adds	r2, r3, #2
   1afa0:	60c2      	str	r2, [r0, #12]
   1afa2:	2f76      	cmp	r7, #118	; 0x76
   1afa4:	f893 e001 	ldrb.w	lr, [r3, #1]
   1afa8:	d11f      	bne.n	1afea <d_operator_name+0xca>
   1afaa:	f1ae 0430 	sub.w	r4, lr, #48	; 0x30
   1afae:	b2e3      	uxtb	r3, r4
   1afb0:	2b09      	cmp	r3, #9
   1afb2:	d8bc      	bhi.n	1af2e <d_operator_name+0xe>
   1afb4:	f7ff f9a8 	bl	1a308 <d_source_name>
   1afb8:	e9d6 3105 	ldrd	r3, r1, [r6, #20]
   1afbc:	428b      	cmp	r3, r1
   1afbe:	4602      	mov	r2, r0
   1afc0:	dac9      	bge.n	1af56 <d_operator_name+0x36>
   1afc2:	6937      	ldr	r7, [r6, #16]
   1afc4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1afc8:	eb07 0081 	add.w	r0, r7, r1, lsl #2
   1afcc:	3301      	adds	r3, #1
   1afce:	2500      	movs	r5, #0
   1afd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1afd4:	0089      	lsls	r1, r1, #2
   1afd6:	6173      	str	r3, [r6, #20]
   1afd8:	2a00      	cmp	r2, #0
   1afda:	d0bc      	beq.n	1af56 <d_operator_name+0x36>
   1afdc:	2333      	movs	r3, #51	; 0x33
   1afde:	e9c0 5501 	strd	r5, r5, [r0, #4]
   1afe2:	547b      	strb	r3, [r7, r1]
   1afe4:	e9c0 4203 	strd	r4, r2, [r0, #12]
   1afe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1afea:	2f63      	cmp	r7, #99	; 0x63
   1afec:	d19f      	bne.n	1af2e <d_operator_name+0xe>
   1afee:	f1be 0f76 	cmp.w	lr, #118	; 0x76
   1aff2:	d19c      	bne.n	1af2e <d_operator_name+0xe>
   1aff4:	e9d0 340c 	ldrd	r3, r4, [r0, #48]	; 0x30
   1aff8:	fab3 f383 	clz	r3, r3
   1affc:	095b      	lsrs	r3, r3, #5
   1affe:	6343      	str	r3, [r0, #52]	; 0x34
   1b000:	f7ff fabc 	bl	1a57c <d_type>
   1b004:	6b73      	ldr	r3, [r6, #52]	; 0x34
   1b006:	4602      	mov	r2, r0
   1b008:	b133      	cbz	r3, 1b018 <d_operator_name+0xf8>
   1b00a:	2300      	movs	r3, #0
   1b00c:	2135      	movs	r1, #53	; 0x35
   1b00e:	4630      	mov	r0, r6
   1b010:	f7fe fe62 	bl	19cd8 <d_make_comp>
   1b014:	6374      	str	r4, [r6, #52]	; 0x34
   1b016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b018:	2134      	movs	r1, #52	; 0x34
   1b01a:	4630      	mov	r0, r6
   1b01c:	f7fe fe5c 	bl	19cd8 <d_make_comp>
   1b020:	e7f8      	b.n	1b014 <d_operator_name+0xf4>
   1b022:	bf00      	nop
   1b024:	20001cac 	.word	0x20001cac

0001b028 <d_unqualified_name>:
   1b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b02a:	68c3      	ldr	r3, [r0, #12]
   1b02c:	781a      	ldrb	r2, [r3, #0]
   1b02e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   1b032:	2909      	cmp	r1, #9
   1b034:	4604      	mov	r4, r0
   1b036:	d965      	bls.n	1b104 <d_unqualified_name+0xdc>
   1b038:	2a55      	cmp	r2, #85	; 0x55
   1b03a:	d06c      	beq.n	1b116 <d_unqualified_name+0xee>
   1b03c:	d838      	bhi.n	1b0b0 <d_unqualified_name+0x88>
   1b03e:	2a44      	cmp	r2, #68	; 0x44
   1b040:	d90f      	bls.n	1b062 <d_unqualified_name+0x3a>
   1b042:	2a4c      	cmp	r2, #76	; 0x4c
   1b044:	d10a      	bne.n	1b05c <d_unqualified_name+0x34>
   1b046:	3301      	adds	r3, #1
   1b048:	60c3      	str	r3, [r0, #12]
   1b04a:	f7ff f95d 	bl	1a308 <d_source_name>
   1b04e:	4605      	mov	r5, r0
   1b050:	b120      	cbz	r0, 1b05c <d_unqualified_name+0x34>
   1b052:	4620      	mov	r0, r4
   1b054:	f7fe ffaa 	bl	19fac <d_discriminator>
   1b058:	2800      	cmp	r0, #0
   1b05a:	d13b      	bne.n	1b0d4 <d_unqualified_name+0xac>
   1b05c:	2500      	movs	r5, #0
   1b05e:	4628      	mov	r0, r5
   1b060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b062:	2a42      	cmp	r2, #66	; 0x42
   1b064:	d9fa      	bls.n	1b05c <d_unqualified_name+0x34>
   1b066:	6a81      	ldr	r1, [r0, #40]	; 0x28
   1b068:	b141      	cbz	r1, 1b07c <d_unqualified_name+0x54>
   1b06a:	7808      	ldrb	r0, [r1, #0]
   1b06c:	2800      	cmp	r0, #0
   1b06e:	f040 8091 	bne.w	1b194 <d_unqualified_name+0x16c>
   1b072:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b074:	6908      	ldr	r0, [r1, #16]
   1b076:	4402      	add	r2, r0
   1b078:	62e2      	str	r2, [r4, #44]	; 0x2c
   1b07a:	781a      	ldrb	r2, [r3, #0]
   1b07c:	2a43      	cmp	r2, #67	; 0x43
   1b07e:	f000 80c8 	beq.w	1b212 <d_unqualified_name+0x1ea>
   1b082:	2a44      	cmp	r2, #68	; 0x44
   1b084:	f040 8084 	bne.w	1b190 <d_unqualified_name+0x168>
   1b088:	785a      	ldrb	r2, [r3, #1]
   1b08a:	3a30      	subs	r2, #48	; 0x30
   1b08c:	2a05      	cmp	r2, #5
   1b08e:	d8e5      	bhi.n	1b05c <d_unqualified_name+0x34>
   1b090:	a001      	add	r0, pc, #4	; (adr r0, 1b098 <d_unqualified_name+0x70>)
   1b092:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
   1b096:	bf00      	nop
   1b098:	0001b1a3 	.word	0x0001b1a3
   1b09c:	0001b1fb 	.word	0x0001b1fb
   1b0a0:	0001b1e9 	.word	0x0001b1e9
   1b0a4:	0001b05d 	.word	0x0001b05d
   1b0a8:	0001b1f5 	.word	0x0001b1f5
   1b0ac:	0001b1ef 	.word	0x0001b1ef
   1b0b0:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   1b0b4:	2919      	cmp	r1, #25
   1b0b6:	d8d1      	bhi.n	1b05c <d_unqualified_name+0x34>
   1b0b8:	2a6f      	cmp	r2, #111	; 0x6f
   1b0ba:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1b0bc:	f000 80a0 	beq.w	1b200 <d_unqualified_name+0x1d8>
   1b0c0:	4620      	mov	r0, r4
   1b0c2:	f7ff ff2d 	bl	1af20 <d_operator_name>
   1b0c6:	6325      	str	r5, [r4, #48]	; 0x30
   1b0c8:	4605      	mov	r5, r0
   1b0ca:	b118      	cbz	r0, 1b0d4 <d_unqualified_name+0xac>
   1b0cc:	7803      	ldrb	r3, [r0, #0]
   1b0ce:	2b32      	cmp	r3, #50	; 0x32
   1b0d0:	f000 80c6 	beq.w	1b260 <d_unqualified_name+0x238>
   1b0d4:	68e3      	ldr	r3, [r4, #12]
   1b0d6:	781a      	ldrb	r2, [r3, #0]
   1b0d8:	2a42      	cmp	r2, #66	; 0x42
   1b0da:	d1c0      	bne.n	1b05e <d_unqualified_name+0x36>
   1b0dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1b0de:	3301      	adds	r3, #1
   1b0e0:	60e3      	str	r3, [r4, #12]
   1b0e2:	4620      	mov	r0, r4
   1b0e4:	f7ff f910 	bl	1a308 <d_source_name>
   1b0e8:	462a      	mov	r2, r5
   1b0ea:	4603      	mov	r3, r0
   1b0ec:	214d      	movs	r1, #77	; 0x4d
   1b0ee:	4620      	mov	r0, r4
   1b0f0:	f7fe fdf2 	bl	19cd8 <d_make_comp>
   1b0f4:	68e3      	ldr	r3, [r4, #12]
   1b0f6:	781a      	ldrb	r2, [r3, #0]
   1b0f8:	2a42      	cmp	r2, #66	; 0x42
   1b0fa:	4605      	mov	r5, r0
   1b0fc:	d0ef      	beq.n	1b0de <d_unqualified_name+0xb6>
   1b0fe:	62a6      	str	r6, [r4, #40]	; 0x28
   1b100:	4628      	mov	r0, r5
   1b102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b104:	f7ff f900 	bl	1a308 <d_source_name>
   1b108:	68e3      	ldr	r3, [r4, #12]
   1b10a:	781a      	ldrb	r2, [r3, #0]
   1b10c:	4605      	mov	r5, r0
   1b10e:	2a42      	cmp	r2, #66	; 0x42
   1b110:	d0e4      	beq.n	1b0dc <d_unqualified_name+0xb4>
   1b112:	4628      	mov	r0, r5
   1b114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b116:	785a      	ldrb	r2, [r3, #1]
   1b118:	2a6c      	cmp	r2, #108	; 0x6c
   1b11a:	f000 80c1 	beq.w	1b2a0 <d_unqualified_name+0x278>
   1b11e:	2a74      	cmp	r2, #116	; 0x74
   1b120:	d19c      	bne.n	1b05c <d_unqualified_name+0x34>
   1b122:	1c59      	adds	r1, r3, #1
   1b124:	60c1      	str	r1, [r0, #12]
   1b126:	785a      	ldrb	r2, [r3, #1]
   1b128:	2a74      	cmp	r2, #116	; 0x74
   1b12a:	d137      	bne.n	1b19c <d_unqualified_name+0x174>
   1b12c:	1c9a      	adds	r2, r3, #2
   1b12e:	60c2      	str	r2, [r0, #12]
   1b130:	789a      	ldrb	r2, [r3, #2]
   1b132:	2a5f      	cmp	r2, #95	; 0x5f
   1b134:	f000 8108 	beq.w	1b348 <d_unqualified_name+0x320>
   1b138:	2a6e      	cmp	r2, #110	; 0x6e
   1b13a:	d08f      	beq.n	1b05c <d_unqualified_name+0x34>
   1b13c:	f7fe fe44 	bl	19dc8 <d_number>
   1b140:	3001      	adds	r0, #1
   1b142:	68e3      	ldr	r3, [r4, #12]
   1b144:	f100 80fd 	bmi.w	1b342 <d_unqualified_name+0x31a>
   1b148:	781a      	ldrb	r2, [r3, #0]
   1b14a:	2a5f      	cmp	r2, #95	; 0x5f
   1b14c:	d120      	bne.n	1b190 <d_unqualified_name+0x168>
   1b14e:	3301      	adds	r3, #1
   1b150:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
   1b154:	428a      	cmp	r2, r1
   1b156:	60e3      	str	r3, [r4, #12]
   1b158:	f280 8100 	bge.w	1b35c <d_unqualified_name+0x334>
   1b15c:	6926      	ldr	r6, [r4, #16]
   1b15e:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   1b162:	eb06 0587 	add.w	r5, r6, r7, lsl #2
   1b166:	3201      	adds	r2, #1
   1b168:	2100      	movs	r1, #0
   1b16a:	e9c5 1101 	strd	r1, r1, [r5, #4]
   1b16e:	6162      	str	r2, [r4, #20]
   1b170:	2249      	movs	r2, #73	; 0x49
   1b172:	f806 2027 	strb.w	r2, [r6, r7, lsl #2]
   1b176:	60e8      	str	r0, [r5, #12]
   1b178:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
   1b17c:	4282      	cmp	r2, r0
   1b17e:	f280 80ea 	bge.w	1b356 <d_unqualified_name+0x32e>
   1b182:	69e1      	ldr	r1, [r4, #28]
   1b184:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
   1b188:	3201      	adds	r2, #1
   1b18a:	6222      	str	r2, [r4, #32]
   1b18c:	781a      	ldrb	r2, [r3, #0]
   1b18e:	e7be      	b.n	1b10e <d_unqualified_name+0xe6>
   1b190:	2500      	movs	r5, #0
   1b192:	e7bc      	b.n	1b10e <d_unqualified_name+0xe6>
   1b194:	2818      	cmp	r0, #24
   1b196:	f47f af71 	bne.w	1b07c <d_unqualified_name+0x54>
   1b19a:	e76a      	b.n	1b072 <d_unqualified_name+0x4a>
   1b19c:	460b      	mov	r3, r1
   1b19e:	2500      	movs	r5, #0
   1b1a0:	e7b5      	b.n	1b10e <d_unqualified_name+0xe6>
   1b1a2:	f04f 0e01 	mov.w	lr, #1
   1b1a6:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
   1b1aa:	1c9f      	adds	r7, r3, #2
   1b1ac:	4282      	cmp	r2, r0
   1b1ae:	60e7      	str	r7, [r4, #12]
   1b1b0:	f280 80c2 	bge.w	1b338 <d_unqualified_name+0x310>
   1b1b4:	f8d4 c010 	ldr.w	ip, [r4, #16]
   1b1b8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1b1bc:	eb0c 0580 	add.w	r5, ip, r0, lsl #2
   1b1c0:	3201      	adds	r2, #1
   1b1c2:	2600      	movs	r6, #0
   1b1c4:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b1c8:	0080      	lsls	r0, r0, #2
   1b1ca:	6162      	str	r2, [r4, #20]
   1b1cc:	2900      	cmp	r1, #0
   1b1ce:	f000 80b3 	beq.w	1b338 <d_unqualified_name+0x310>
   1b1d2:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b1d6:	2208      	movs	r2, #8
   1b1d8:	f80c 2000 	strb.w	r2, [ip, r0]
   1b1dc:	f885 e00c 	strb.w	lr, [r5, #12]
   1b1e0:	6129      	str	r1, [r5, #16]
   1b1e2:	789a      	ldrb	r2, [r3, #2]
   1b1e4:	463b      	mov	r3, r7
   1b1e6:	e792      	b.n	1b10e <d_unqualified_name+0xe6>
   1b1e8:	f04f 0e03 	mov.w	lr, #3
   1b1ec:	e7db      	b.n	1b1a6 <d_unqualified_name+0x17e>
   1b1ee:	f04f 0e05 	mov.w	lr, #5
   1b1f2:	e7d8      	b.n	1b1a6 <d_unqualified_name+0x17e>
   1b1f4:	f04f 0e04 	mov.w	lr, #4
   1b1f8:	e7d5      	b.n	1b1a6 <d_unqualified_name+0x17e>
   1b1fa:	f04f 0e02 	mov.w	lr, #2
   1b1fe:	e7d2      	b.n	1b1a6 <d_unqualified_name+0x17e>
   1b200:	785a      	ldrb	r2, [r3, #1]
   1b202:	2a6e      	cmp	r2, #110	; 0x6e
   1b204:	f47f af5c 	bne.w	1b0c0 <d_unqualified_name+0x98>
   1b208:	3302      	adds	r3, #2
   1b20a:	2200      	movs	r2, #0
   1b20c:	60c3      	str	r3, [r0, #12]
   1b20e:	6302      	str	r2, [r0, #48]	; 0x30
   1b210:	e756      	b.n	1b0c0 <d_unqualified_name+0x98>
   1b212:	785a      	ldrb	r2, [r3, #1]
   1b214:	2a49      	cmp	r2, #73	; 0x49
   1b216:	d07f      	beq.n	1b318 <d_unqualified_name+0x2f0>
   1b218:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
   1b21c:	2804      	cmp	r0, #4
   1b21e:	f63f af1d 	bhi.w	1b05c <d_unqualified_name+0x34>
   1b222:	3a30      	subs	r2, #48	; 0x30
   1b224:	3302      	adds	r3, #2
   1b226:	b2d6      	uxtb	r6, r2
   1b228:	60e3      	str	r3, [r4, #12]
   1b22a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b22e:	4293      	cmp	r3, r2
   1b230:	f280 8086 	bge.w	1b340 <d_unqualified_name+0x318>
   1b234:	6927      	ldr	r7, [r4, #16]
   1b236:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1b23a:	eb07 0582 	add.w	r5, r7, r2, lsl #2
   1b23e:	3301      	adds	r3, #1
   1b240:	2000      	movs	r0, #0
   1b242:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b246:	0092      	lsls	r2, r2, #2
   1b248:	6163      	str	r3, [r4, #20]
   1b24a:	2900      	cmp	r1, #0
   1b24c:	d078      	beq.n	1b340 <d_unqualified_name+0x318>
   1b24e:	2307      	movs	r3, #7
   1b250:	e9c5 0001 	strd	r0, r0, [r5, #4]
   1b254:	54bb      	strb	r3, [r7, r2]
   1b256:	68e3      	ldr	r3, [r4, #12]
   1b258:	732e      	strb	r6, [r5, #12]
   1b25a:	6129      	str	r1, [r5, #16]
   1b25c:	781a      	ldrb	r2, [r3, #0]
   1b25e:	e756      	b.n	1b10e <d_unqualified_name+0xe6>
   1b260:	68c2      	ldr	r2, [r0, #12]
   1b262:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b264:	6891      	ldr	r1, [r2, #8]
   1b266:	6812      	ldr	r2, [r2, #0]
   1b268:	3307      	adds	r3, #7
   1b26a:	440b      	add	r3, r1
   1b26c:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b26e:	7813      	ldrb	r3, [r2, #0]
   1b270:	2b6c      	cmp	r3, #108	; 0x6c
   1b272:	f47f af2f 	bne.w	1b0d4 <d_unqualified_name+0xac>
   1b276:	7853      	ldrb	r3, [r2, #1]
   1b278:	2b69      	cmp	r3, #105	; 0x69
   1b27a:	f47f af2b 	bne.w	1b0d4 <d_unqualified_name+0xac>
   1b27e:	7893      	ldrb	r3, [r2, #2]
   1b280:	2b00      	cmp	r3, #0
   1b282:	f47f af27 	bne.w	1b0d4 <d_unqualified_name+0xac>
   1b286:	4620      	mov	r0, r4
   1b288:	f7ff f83e 	bl	1a308 <d_source_name>
   1b28c:	462a      	mov	r2, r5
   1b28e:	4603      	mov	r3, r0
   1b290:	2137      	movs	r1, #55	; 0x37
   1b292:	4620      	mov	r0, r4
   1b294:	f7fe fd20 	bl	19cd8 <d_make_comp>
   1b298:	68e3      	ldr	r3, [r4, #12]
   1b29a:	4605      	mov	r5, r0
   1b29c:	781a      	ldrb	r2, [r3, #0]
   1b29e:	e736      	b.n	1b10e <d_unqualified_name+0xe6>
   1b2a0:	1c59      	adds	r1, r3, #1
   1b2a2:	60c1      	str	r1, [r0, #12]
   1b2a4:	785a      	ldrb	r2, [r3, #1]
   1b2a6:	2a6c      	cmp	r2, #108	; 0x6c
   1b2a8:	f47f af78 	bne.w	1b19c <d_unqualified_name+0x174>
   1b2ac:	3302      	adds	r3, #2
   1b2ae:	60c3      	str	r3, [r0, #12]
   1b2b0:	f7ff fd9c 	bl	1adec <d_parmlist>
   1b2b4:	68e3      	ldr	r3, [r4, #12]
   1b2b6:	4606      	mov	r6, r0
   1b2b8:	2800      	cmp	r0, #0
   1b2ba:	d042      	beq.n	1b342 <d_unqualified_name+0x31a>
   1b2bc:	781a      	ldrb	r2, [r3, #0]
   1b2be:	2a45      	cmp	r2, #69	; 0x45
   1b2c0:	f47f af66 	bne.w	1b190 <d_unqualified_name+0x168>
   1b2c4:	1c5a      	adds	r2, r3, #1
   1b2c6:	60e2      	str	r2, [r4, #12]
   1b2c8:	785a      	ldrb	r2, [r3, #1]
   1b2ca:	2a5f      	cmp	r2, #95	; 0x5f
   1b2cc:	d049      	beq.n	1b362 <d_unqualified_name+0x33a>
   1b2ce:	2a6e      	cmp	r2, #110	; 0x6e
   1b2d0:	f43f aec4 	beq.w	1b05c <d_unqualified_name+0x34>
   1b2d4:	4620      	mov	r0, r4
   1b2d6:	f7fe fd77 	bl	19dc8 <d_number>
   1b2da:	3001      	adds	r0, #1
   1b2dc:	68e3      	ldr	r3, [r4, #12]
   1b2de:	d430      	bmi.n	1b342 <d_unqualified_name+0x31a>
   1b2e0:	781a      	ldrb	r2, [r3, #0]
   1b2e2:	2a5f      	cmp	r2, #95	; 0x5f
   1b2e4:	f47f af54 	bne.w	1b190 <d_unqualified_name+0x168>
   1b2e8:	3301      	adds	r3, #1
   1b2ea:	6962      	ldr	r2, [r4, #20]
   1b2ec:	69a1      	ldr	r1, [r4, #24]
   1b2ee:	60e3      	str	r3, [r4, #12]
   1b2f0:	428a      	cmp	r2, r1
   1b2f2:	da33      	bge.n	1b35c <d_unqualified_name+0x334>
   1b2f4:	6921      	ldr	r1, [r4, #16]
   1b2f6:	eb02 0782 	add.w	r7, r2, r2, lsl #2
   1b2fa:	eb01 0587 	add.w	r5, r1, r7, lsl #2
   1b2fe:	3201      	adds	r2, #1
   1b300:	f04f 0c00 	mov.w	ip, #0
   1b304:	e9c5 cc01 	strd	ip, ip, [r5, #4]
   1b308:	6162      	str	r2, [r4, #20]
   1b30a:	2247      	movs	r2, #71	; 0x47
   1b30c:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
   1b310:	e9c5 6003 	strd	r6, r0, [r5, #12]
   1b314:	781a      	ldrb	r2, [r3, #0]
   1b316:	e6fa      	b.n	1b10e <d_unqualified_name+0xe6>
   1b318:	1c59      	adds	r1, r3, #1
   1b31a:	60e1      	str	r1, [r4, #12]
   1b31c:	789a      	ldrb	r2, [r3, #2]
   1b31e:	f1a2 0031 	sub.w	r0, r2, #49	; 0x31
   1b322:	2804      	cmp	r0, #4
   1b324:	d813      	bhi.n	1b34e <d_unqualified_name+0x326>
   1b326:	3303      	adds	r3, #3
   1b328:	3a30      	subs	r2, #48	; 0x30
   1b32a:	60e3      	str	r3, [r4, #12]
   1b32c:	4620      	mov	r0, r4
   1b32e:	b2d6      	uxtb	r6, r2
   1b330:	f7ff f924 	bl	1a57c <d_type>
   1b334:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1b336:	e778      	b.n	1b22a <d_unqualified_name+0x202>
   1b338:	789a      	ldrb	r2, [r3, #2]
   1b33a:	2500      	movs	r5, #0
   1b33c:	463b      	mov	r3, r7
   1b33e:	e6e6      	b.n	1b10e <d_unqualified_name+0xe6>
   1b340:	68e3      	ldr	r3, [r4, #12]
   1b342:	781a      	ldrb	r2, [r3, #0]
   1b344:	2500      	movs	r5, #0
   1b346:	e6e2      	b.n	1b10e <d_unqualified_name+0xe6>
   1b348:	3303      	adds	r3, #3
   1b34a:	2000      	movs	r0, #0
   1b34c:	e700      	b.n	1b150 <d_unqualified_name+0x128>
   1b34e:	785a      	ldrb	r2, [r3, #1]
   1b350:	2500      	movs	r5, #0
   1b352:	460b      	mov	r3, r1
   1b354:	e6db      	b.n	1b10e <d_unqualified_name+0xe6>
   1b356:	781a      	ldrb	r2, [r3, #0]
   1b358:	460d      	mov	r5, r1
   1b35a:	e6d8      	b.n	1b10e <d_unqualified_name+0xe6>
   1b35c:	781a      	ldrb	r2, [r3, #0]
   1b35e:	2500      	movs	r5, #0
   1b360:	e6d5      	b.n	1b10e <d_unqualified_name+0xe6>
   1b362:	3302      	adds	r3, #2
   1b364:	2000      	movs	r0, #0
   1b366:	e7c0      	b.n	1b2ea <d_unqualified_name+0x2c2>

0001b368 <d_expr_primary>:
   1b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b36a:	68c2      	ldr	r2, [r0, #12]
   1b36c:	7813      	ldrb	r3, [r2, #0]
   1b36e:	2b4c      	cmp	r3, #76	; 0x4c
   1b370:	d132      	bne.n	1b3d8 <d_expr_primary+0x70>
   1b372:	1c53      	adds	r3, r2, #1
   1b374:	60c3      	str	r3, [r0, #12]
   1b376:	7851      	ldrb	r1, [r2, #1]
   1b378:	295f      	cmp	r1, #95	; 0x5f
   1b37a:	4604      	mov	r4, r0
   1b37c:	d051      	beq.n	1b422 <d_expr_primary+0xba>
   1b37e:	295a      	cmp	r1, #90	; 0x5a
   1b380:	d113      	bne.n	1b3aa <d_expr_primary+0x42>
   1b382:	1c5a      	adds	r2, r3, #1
   1b384:	60e2      	str	r2, [r4, #12]
   1b386:	785b      	ldrb	r3, [r3, #1]
   1b388:	2b47      	cmp	r3, #71	; 0x47
   1b38a:	d043      	beq.n	1b414 <d_expr_primary+0xac>
   1b38c:	2b54      	cmp	r3, #84	; 0x54
   1b38e:	d041      	beq.n	1b414 <d_expr_primary+0xac>
   1b390:	2100      	movs	r1, #0
   1b392:	4620      	mov	r0, r4
   1b394:	f001 f84e 	bl	1c434 <d_encoding.part.0>
   1b398:	68e3      	ldr	r3, [r4, #12]
   1b39a:	781a      	ldrb	r2, [r3, #0]
   1b39c:	4606      	mov	r6, r0
   1b39e:	2a45      	cmp	r2, #69	; 0x45
   1b3a0:	d11a      	bne.n	1b3d8 <d_expr_primary+0x70>
   1b3a2:	3301      	adds	r3, #1
   1b3a4:	60e3      	str	r3, [r4, #12]
   1b3a6:	4630      	mov	r0, r6
   1b3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3aa:	f7ff f8e7 	bl	1a57c <d_type>
   1b3ae:	4606      	mov	r6, r0
   1b3b0:	b190      	cbz	r0, 1b3d8 <d_expr_primary+0x70>
   1b3b2:	7803      	ldrb	r3, [r0, #0]
   1b3b4:	2b27      	cmp	r3, #39	; 0x27
   1b3b6:	d012      	beq.n	1b3de <d_expr_primary+0x76>
   1b3b8:	68e2      	ldr	r2, [r4, #12]
   1b3ba:	7815      	ldrb	r5, [r2, #0]
   1b3bc:	2d6e      	cmp	r5, #110	; 0x6e
   1b3be:	d023      	beq.n	1b408 <d_expr_primary+0xa0>
   1b3c0:	213d      	movs	r1, #61	; 0x3d
   1b3c2:	2d45      	cmp	r5, #69	; 0x45
   1b3c4:	d059      	beq.n	1b47a <d_expr_primary+0x112>
   1b3c6:	4613      	mov	r3, r2
   1b3c8:	e003      	b.n	1b3d2 <d_expr_primary+0x6a>
   1b3ca:	60e3      	str	r3, [r4, #12]
   1b3cc:	781d      	ldrb	r5, [r3, #0]
   1b3ce:	2d45      	cmp	r5, #69	; 0x45
   1b3d0:	d02f      	beq.n	1b432 <d_expr_primary+0xca>
   1b3d2:	3301      	adds	r3, #1
   1b3d4:	2d00      	cmp	r5, #0
   1b3d6:	d1f8      	bne.n	1b3ca <d_expr_primary+0x62>
   1b3d8:	2600      	movs	r6, #0
   1b3da:	4630      	mov	r0, r6
   1b3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b3de:	68c3      	ldr	r3, [r0, #12]
   1b3e0:	7c1a      	ldrb	r2, [r3, #16]
   1b3e2:	b11a      	cbz	r2, 1b3ec <d_expr_primary+0x84>
   1b3e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1b3e6:	6859      	ldr	r1, [r3, #4]
   1b3e8:	1a52      	subs	r2, r2, r1
   1b3ea:	62e2      	str	r2, [r4, #44]	; 0x2c
   1b3ec:	4925      	ldr	r1, [pc, #148]	; (1b484 <d_expr_primary+0x11c>)
   1b3ee:	6818      	ldr	r0, [r3, #0]
   1b3f0:	f007 f9ba 	bl	22768 <strcmp>
   1b3f4:	2800      	cmp	r0, #0
   1b3f6:	d1df      	bne.n	1b3b8 <d_expr_primary+0x50>
   1b3f8:	68e2      	ldr	r2, [r4, #12]
   1b3fa:	7815      	ldrb	r5, [r2, #0]
   1b3fc:	2d45      	cmp	r5, #69	; 0x45
   1b3fe:	d03e      	beq.n	1b47e <d_expr_primary+0x116>
   1b400:	2d6e      	cmp	r5, #110	; 0x6e
   1b402:	d001      	beq.n	1b408 <d_expr_primary+0xa0>
   1b404:	213d      	movs	r1, #61	; 0x3d
   1b406:	e7de      	b.n	1b3c6 <d_expr_primary+0x5e>
   1b408:	1c53      	adds	r3, r2, #1
   1b40a:	60e3      	str	r3, [r4, #12]
   1b40c:	7855      	ldrb	r5, [r2, #1]
   1b40e:	213e      	movs	r1, #62	; 0x3e
   1b410:	461a      	mov	r2, r3
   1b412:	e7d6      	b.n	1b3c2 <d_expr_primary+0x5a>
   1b414:	4620      	mov	r0, r4
   1b416:	f000 fc85 	bl	1bd24 <d_special_name>
   1b41a:	68e3      	ldr	r3, [r4, #12]
   1b41c:	4606      	mov	r6, r0
   1b41e:	781a      	ldrb	r2, [r3, #0]
   1b420:	e7bd      	b.n	1b39e <d_expr_primary+0x36>
   1b422:	1c93      	adds	r3, r2, #2
   1b424:	60c3      	str	r3, [r0, #12]
   1b426:	7892      	ldrb	r2, [r2, #2]
   1b428:	2a5a      	cmp	r2, #90	; 0x5a
   1b42a:	bf18      	it	ne
   1b42c:	2600      	movne	r6, #0
   1b42e:	d1b6      	bne.n	1b39e <d_expr_primary+0x36>
   1b430:	e7a7      	b.n	1b382 <d_expr_primary+0x1a>
   1b432:	1a9d      	subs	r5, r3, r2
   1b434:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1b438:	4298      	cmp	r0, r3
   1b43a:	da1c      	bge.n	1b476 <d_expr_primary+0x10e>
   1b43c:	f8d4 e010 	ldr.w	lr, [r4, #16]
   1b440:	eb00 0780 	add.w	r7, r0, r0, lsl #2
   1b444:	eb0e 0387 	add.w	r3, lr, r7, lsl #2
   1b448:	ea4f 0c87 	mov.w	ip, r7, lsl #2
   1b44c:	2700      	movs	r7, #0
   1b44e:	3001      	adds	r0, #1
   1b450:	42bd      	cmp	r5, r7
   1b452:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1b456:	6160      	str	r0, [r4, #20]
   1b458:	dd0d      	ble.n	1b476 <d_expr_primary+0x10e>
   1b45a:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1b45e:	f80e 700c 	strb.w	r7, [lr, ip]
   1b462:	e9c3 2503 	strd	r2, r5, [r3, #12]
   1b466:	4632      	mov	r2, r6
   1b468:	4620      	mov	r0, r4
   1b46a:	f7fe fc35 	bl	19cd8 <d_make_comp>
   1b46e:	68e3      	ldr	r3, [r4, #12]
   1b470:	4606      	mov	r6, r0
   1b472:	781a      	ldrb	r2, [r3, #0]
   1b474:	e793      	b.n	1b39e <d_expr_primary+0x36>
   1b476:	2300      	movs	r3, #0
   1b478:	e7f5      	b.n	1b466 <d_expr_primary+0xfe>
   1b47a:	2500      	movs	r5, #0
   1b47c:	e7da      	b.n	1b434 <d_expr_primary+0xcc>
   1b47e:	3201      	adds	r2, #1
   1b480:	60e2      	str	r2, [r4, #12]
   1b482:	e7aa      	b.n	1b3da <d_expr_primary+0x72>
   1b484:	20002140 	.word	0x20002140

0001b488 <d_template_arg>:
   1b488:	b538      	push	{r3, r4, r5, lr}
   1b48a:	68c2      	ldr	r2, [r0, #12]
   1b48c:	7813      	ldrb	r3, [r2, #0]
   1b48e:	2b4c      	cmp	r3, #76	; 0x4c
   1b490:	d020      	beq.n	1b4d4 <d_template_arg+0x4c>
   1b492:	4604      	mov	r4, r0
   1b494:	d808      	bhi.n	1b4a8 <d_template_arg+0x20>
   1b496:	3b49      	subs	r3, #73	; 0x49
   1b498:	2b01      	cmp	r3, #1
   1b49a:	d816      	bhi.n	1b4ca <d_template_arg+0x42>
   1b49c:	3201      	adds	r2, #1
   1b49e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b4a2:	60c2      	str	r2, [r0, #12]
   1b4a4:	f000 b81c 	b.w	1b4e0 <d_template_args_1>
   1b4a8:	2b58      	cmp	r3, #88	; 0x58
   1b4aa:	d10e      	bne.n	1b4ca <d_template_arg+0x42>
   1b4ac:	3201      	adds	r2, #1
   1b4ae:	2301      	movs	r3, #1
   1b4b0:	6b05      	ldr	r5, [r0, #48]	; 0x30
   1b4b2:	60c2      	str	r2, [r0, #12]
   1b4b4:	6303      	str	r3, [r0, #48]	; 0x30
   1b4b6:	f000 f8db 	bl	1b670 <d_expression_1>
   1b4ba:	68e3      	ldr	r3, [r4, #12]
   1b4bc:	6325      	str	r5, [r4, #48]	; 0x30
   1b4be:	781a      	ldrb	r2, [r3, #0]
   1b4c0:	2a45      	cmp	r2, #69	; 0x45
   1b4c2:	d10b      	bne.n	1b4dc <d_template_arg+0x54>
   1b4c4:	3301      	adds	r3, #1
   1b4c6:	60e3      	str	r3, [r4, #12]
   1b4c8:	bd38      	pop	{r3, r4, r5, pc}
   1b4ca:	4620      	mov	r0, r4
   1b4cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b4d0:	f7ff b854 	b.w	1a57c <d_type>
   1b4d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1b4d8:	f7ff bf46 	b.w	1b368 <d_expr_primary>
   1b4dc:	2000      	movs	r0, #0
   1b4de:	bd38      	pop	{r3, r4, r5, pc}

0001b4e0 <d_template_args_1>:
   1b4e0:	b570      	push	{r4, r5, r6, lr}
   1b4e2:	68c3      	ldr	r3, [r0, #12]
   1b4e4:	6a86      	ldr	r6, [r0, #40]	; 0x28
   1b4e6:	781a      	ldrb	r2, [r3, #0]
   1b4e8:	2a45      	cmp	r2, #69	; 0x45
   1b4ea:	b082      	sub	sp, #8
   1b4ec:	4604      	mov	r4, r0
   1b4ee:	d01f      	beq.n	1b530 <d_template_args_1+0x50>
   1b4f0:	2300      	movs	r3, #0
   1b4f2:	9301      	str	r3, [sp, #4]
   1b4f4:	ad01      	add	r5, sp, #4
   1b4f6:	e009      	b.n	1b50c <d_template_args_1+0x2c>
   1b4f8:	f7fe fbee 	bl	19cd8 <d_make_comp>
   1b4fc:	6028      	str	r0, [r5, #0]
   1b4fe:	f100 0510 	add.w	r5, r0, #16
   1b502:	b160      	cbz	r0, 1b51e <d_template_args_1+0x3e>
   1b504:	68e3      	ldr	r3, [r4, #12]
   1b506:	781a      	ldrb	r2, [r3, #0]
   1b508:	2a45      	cmp	r2, #69	; 0x45
   1b50a:	d00b      	beq.n	1b524 <d_template_args_1+0x44>
   1b50c:	4620      	mov	r0, r4
   1b50e:	f7ff ffbb 	bl	1b488 <d_template_arg>
   1b512:	4602      	mov	r2, r0
   1b514:	2300      	movs	r3, #0
   1b516:	212f      	movs	r1, #47	; 0x2f
   1b518:	4620      	mov	r0, r4
   1b51a:	2a00      	cmp	r2, #0
   1b51c:	d1ec      	bne.n	1b4f8 <d_template_args_1+0x18>
   1b51e:	2000      	movs	r0, #0
   1b520:	b002      	add	sp, #8
   1b522:	bd70      	pop	{r4, r5, r6, pc}
   1b524:	9801      	ldr	r0, [sp, #4]
   1b526:	62a6      	str	r6, [r4, #40]	; 0x28
   1b528:	3301      	adds	r3, #1
   1b52a:	60e3      	str	r3, [r4, #12]
   1b52c:	b002      	add	sp, #8
   1b52e:	bd70      	pop	{r4, r5, r6, pc}
   1b530:	1c5a      	adds	r2, r3, #1
   1b532:	2300      	movs	r3, #0
   1b534:	60c2      	str	r2, [r0, #12]
   1b536:	212f      	movs	r1, #47	; 0x2f
   1b538:	461a      	mov	r2, r3
   1b53a:	b002      	add	sp, #8
   1b53c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1b540:	f7fe bbca 	b.w	19cd8 <d_make_comp>

0001b544 <d_prefix>:
   1b544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b546:	68c2      	ldr	r2, [r0, #12]
   1b548:	7814      	ldrb	r4, [r2, #0]
   1b54a:	b394      	cbz	r4, 1b5b2 <d_prefix+0x6e>
   1b54c:	4606      	mov	r6, r0
   1b54e:	460f      	mov	r7, r1
   1b550:	2500      	movs	r5, #0
   1b552:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
   1b556:	2b4a      	cmp	r3, #74	; 0x4a
   1b558:	d82b      	bhi.n	1b5b2 <d_prefix+0x6e>
   1b55a:	e8df f003 	tbb	[pc, r3]
   1b55e:	2d2d      	.short	0x2d2d
   1b560:	2d2d2d2d 	.word	0x2d2d2d2d
   1b564:	2d2d2d2d 	.word	0x2d2d2d2d
   1b568:	2a2a2a2a 	.word	0x2a2a2a2a
   1b56c:	2a2a2a2a 	.word	0x2a2a2a2a
   1b570:	2b772d2a 	.word	0x2b772d2a
   1b574:	682a2a2a 	.word	0x682a2a2a
   1b578:	5f2d2a2a 	.word	0x5f2d2a2a
   1b57c:	2a2a2a2a 	.word	0x2a2a2a2a
   1b580:	2d4b532a 	.word	0x2d4b532a
   1b584:	2a2a2a2a 	.word	0x2a2a2a2a
   1b588:	2a2a2a2a 	.word	0x2a2a2a2a
   1b58c:	2d2a2a2a 	.word	0x2d2a2a2a
   1b590:	2d2d2d2d 	.word	0x2d2d2d2d
   1b594:	2d2d2d2d 	.word	0x2d2d2d2d
   1b598:	2d2d2d2d 	.word	0x2d2d2d2d
   1b59c:	2d2d2d2d 	.word	0x2d2d2d2d
   1b5a0:	2d2d2d2d 	.word	0x2d2d2d2d
   1b5a4:	2d2d2d2d 	.word	0x2d2d2d2d
   1b5a8:	2d          	.byte	0x2d
   1b5a9:	00          	.byte	0x00
   1b5aa:	68f2      	ldr	r2, [r6, #12]
   1b5ac:	7814      	ldrb	r4, [r2, #0]
   1b5ae:	2c00      	cmp	r4, #0
   1b5b0:	d1cf      	bne.n	1b552 <d_prefix+0xe>
   1b5b2:	2500      	movs	r5, #0
   1b5b4:	4628      	mov	r0, r5
   1b5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b5b8:	4630      	mov	r0, r6
   1b5ba:	f7ff fd35 	bl	1b028 <d_unqualified_name>
   1b5be:	4603      	mov	r3, r0
   1b5c0:	2d00      	cmp	r5, #0
   1b5c2:	d14e      	bne.n	1b662 <d_prefix+0x11e>
   1b5c4:	4605      	mov	r5, r0
   1b5c6:	2c53      	cmp	r4, #83	; 0x53
   1b5c8:	d0ef      	beq.n	1b5aa <d_prefix+0x66>
   1b5ca:	68f2      	ldr	r2, [r6, #12]
   1b5cc:	7814      	ldrb	r4, [r2, #0]
   1b5ce:	2c45      	cmp	r4, #69	; 0x45
   1b5d0:	d0f0      	beq.n	1b5b4 <d_prefix+0x70>
   1b5d2:	2f00      	cmp	r7, #0
   1b5d4:	d0eb      	beq.n	1b5ae <d_prefix+0x6a>
   1b5d6:	2d00      	cmp	r5, #0
   1b5d8:	d0eb      	beq.n	1b5b2 <d_prefix+0x6e>
   1b5da:	e9d6 3108 	ldrd	r3, r1, [r6, #32]
   1b5de:	428b      	cmp	r3, r1
   1b5e0:	dae7      	bge.n	1b5b2 <d_prefix+0x6e>
   1b5e2:	69f1      	ldr	r1, [r6, #28]
   1b5e4:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
   1b5e8:	3301      	adds	r3, #1
   1b5ea:	6233      	str	r3, [r6, #32]
   1b5ec:	7814      	ldrb	r4, [r2, #0]
   1b5ee:	2c00      	cmp	r4, #0
   1b5f0:	d1af      	bne.n	1b552 <d_prefix+0xe>
   1b5f2:	e7de      	b.n	1b5b2 <d_prefix+0x6e>
   1b5f4:	4630      	mov	r0, r6
   1b5f6:	f7fe fe1b 	bl	1a230 <d_template_param>
   1b5fa:	4603      	mov	r3, r0
   1b5fc:	2d00      	cmp	r5, #0
   1b5fe:	d130      	bne.n	1b662 <d_prefix+0x11e>
   1b600:	461d      	mov	r5, r3
   1b602:	e7e2      	b.n	1b5ca <d_prefix+0x86>
   1b604:	2101      	movs	r1, #1
   1b606:	4630      	mov	r0, r6
   1b608:	f7fe feee 	bl	1a3e8 <d_substitution>
   1b60c:	4603      	mov	r3, r0
   1b60e:	bb45      	cbnz	r5, 1b662 <d_prefix+0x11e>
   1b610:	68f2      	ldr	r2, [r6, #12]
   1b612:	7814      	ldrb	r4, [r2, #0]
   1b614:	461d      	mov	r5, r3
   1b616:	2c00      	cmp	r4, #0
   1b618:	d19b      	bne.n	1b552 <d_prefix+0xe>
   1b61a:	e7ca      	b.n	1b5b2 <d_prefix+0x6e>
   1b61c:	2d00      	cmp	r5, #0
   1b61e:	d0c8      	beq.n	1b5b2 <d_prefix+0x6e>
   1b620:	1c53      	adds	r3, r2, #1
   1b622:	60f3      	str	r3, [r6, #12]
   1b624:	7854      	ldrb	r4, [r2, #1]
   1b626:	461a      	mov	r2, r3
   1b628:	2c00      	cmp	r4, #0
   1b62a:	d192      	bne.n	1b552 <d_prefix+0xe>
   1b62c:	e7c1      	b.n	1b5b2 <d_prefix+0x6e>
   1b62e:	2d00      	cmp	r5, #0
   1b630:	d0bf      	beq.n	1b5b2 <d_prefix+0x6e>
   1b632:	3201      	adds	r2, #1
   1b634:	60f2      	str	r2, [r6, #12]
   1b636:	4630      	mov	r0, r6
   1b638:	f7ff ff52 	bl	1b4e0 <d_template_args_1>
   1b63c:	2104      	movs	r1, #4
   1b63e:	4603      	mov	r3, r0
   1b640:	462a      	mov	r2, r5
   1b642:	4630      	mov	r0, r6
   1b644:	f7fe fb48 	bl	19cd8 <d_make_comp>
   1b648:	4605      	mov	r5, r0
   1b64a:	e7bc      	b.n	1b5c6 <d_prefix+0x82>
   1b64c:	7853      	ldrb	r3, [r2, #1]
   1b64e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b652:	2b54      	cmp	r3, #84	; 0x54
   1b654:	4630      	mov	r0, r6
   1b656:	d006      	beq.n	1b666 <d_prefix+0x122>
   1b658:	f7ff fce6 	bl	1b028 <d_unqualified_name>
   1b65c:	4603      	mov	r3, r0
   1b65e:	2d00      	cmp	r5, #0
   1b660:	d0ce      	beq.n	1b600 <d_prefix+0xbc>
   1b662:	2101      	movs	r1, #1
   1b664:	e7ec      	b.n	1b640 <d_prefix+0xfc>
   1b666:	f7fe ff89 	bl	1a57c <d_type>
   1b66a:	4603      	mov	r3, r0
   1b66c:	e7c6      	b.n	1b5fc <d_prefix+0xb8>
   1b66e:	bf00      	nop

0001b670 <d_expression_1>:
   1b670:	68c2      	ldr	r2, [r0, #12]
   1b672:	7813      	ldrb	r3, [r2, #0]
   1b674:	2b4c      	cmp	r3, #76	; 0x4c
   1b676:	f000 8089 	beq.w	1b78c <d_expression_1+0x11c>
   1b67a:	2b54      	cmp	r3, #84	; 0x54
   1b67c:	f000 8088 	beq.w	1b790 <d_expression_1+0x120>
   1b680:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b682:	2b73      	cmp	r3, #115	; 0x73
   1b684:	b083      	sub	sp, #12
   1b686:	4604      	mov	r4, r0
   1b688:	d05a      	beq.n	1b740 <d_expression_1+0xd0>
   1b68a:	2b66      	cmp	r3, #102	; 0x66
   1b68c:	d028      	beq.n	1b6e0 <d_expression_1+0x70>
   1b68e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1b692:	2909      	cmp	r1, #9
   1b694:	d80c      	bhi.n	1b6b0 <d_expression_1+0x40>
   1b696:	4620      	mov	r0, r4
   1b698:	f7ff fcc6 	bl	1b028 <d_unqualified_name>
   1b69c:	4605      	mov	r5, r0
   1b69e:	2800      	cmp	r0, #0
   1b6a0:	d070      	beq.n	1b784 <d_expression_1+0x114>
   1b6a2:	68e3      	ldr	r3, [r4, #12]
   1b6a4:	781a      	ldrb	r2, [r3, #0]
   1b6a6:	2a49      	cmp	r2, #73	; 0x49
   1b6a8:	d074      	beq.n	1b794 <d_expression_1+0x124>
   1b6aa:	4628      	mov	r0, r5
   1b6ac:	b003      	add	sp, #12
   1b6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b6b0:	2b6f      	cmp	r3, #111	; 0x6f
   1b6b2:	d061      	beq.n	1b778 <d_expression_1+0x108>
   1b6b4:	2b69      	cmp	r3, #105	; 0x69
   1b6b6:	d17b      	bne.n	1b7b0 <d_expression_1+0x140>
   1b6b8:	7853      	ldrb	r3, [r2, #1]
   1b6ba:	2b6c      	cmp	r3, #108	; 0x6c
   1b6bc:	d147      	bne.n	1b74e <d_expression_1+0xde>
   1b6be:	3202      	adds	r2, #2
   1b6c0:	60e2      	str	r2, [r4, #12]
   1b6c2:	2500      	movs	r5, #0
   1b6c4:	7811      	ldrb	r1, [r2, #0]
   1b6c6:	2900      	cmp	r1, #0
   1b6c8:	d05c      	beq.n	1b784 <d_expression_1+0x114>
   1b6ca:	7853      	ldrb	r3, [r2, #1]
   1b6cc:	2b00      	cmp	r3, #0
   1b6ce:	d059      	beq.n	1b784 <d_expression_1+0x114>
   1b6d0:	2145      	movs	r1, #69	; 0x45
   1b6d2:	4620      	mov	r0, r4
   1b6d4:	f000 fa42 	bl	1bb5c <d_exprlist>
   1b6d8:	462a      	mov	r2, r5
   1b6da:	4603      	mov	r3, r0
   1b6dc:	2131      	movs	r1, #49	; 0x31
   1b6de:	e061      	b.n	1b7a4 <d_expression_1+0x134>
   1b6e0:	7853      	ldrb	r3, [r2, #1]
   1b6e2:	2b70      	cmp	r3, #112	; 0x70
   1b6e4:	d133      	bne.n	1b74e <d_expression_1+0xde>
   1b6e6:	1c93      	adds	r3, r2, #2
   1b6e8:	60c3      	str	r3, [r0, #12]
   1b6ea:	7893      	ldrb	r3, [r2, #2]
   1b6ec:	2b54      	cmp	r3, #84	; 0x54
   1b6ee:	f000 8148 	beq.w	1b982 <d_expression_1+0x312>
   1b6f2:	2b5f      	cmp	r3, #95	; 0x5f
   1b6f4:	f000 8086 	beq.w	1b804 <d_expression_1+0x194>
   1b6f8:	2b6e      	cmp	r3, #110	; 0x6e
   1b6fa:	d043      	beq.n	1b784 <d_expression_1+0x114>
   1b6fc:	f7fe fb64 	bl	19dc8 <d_number>
   1b700:	1c41      	adds	r1, r0, #1
   1b702:	d43f      	bmi.n	1b784 <d_expression_1+0x114>
   1b704:	68e3      	ldr	r3, [r4, #12]
   1b706:	781a      	ldrb	r2, [r3, #0]
   1b708:	2a5f      	cmp	r2, #95	; 0x5f
   1b70a:	d13b      	bne.n	1b784 <d_expression_1+0x114>
   1b70c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1b710:	3301      	adds	r3, #1
   1b712:	4291      	cmp	r1, r2
   1b714:	60e3      	str	r3, [r4, #12]
   1b716:	d035      	beq.n	1b784 <d_expression_1+0x114>
   1b718:	3002      	adds	r0, #2
   1b71a:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
   1b71e:	4293      	cmp	r3, r2
   1b720:	da30      	bge.n	1b784 <d_expression_1+0x114>
   1b722:	6922      	ldr	r2, [r4, #16]
   1b724:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1b728:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1b72c:	3301      	adds	r3, #1
   1b72e:	2600      	movs	r6, #0
   1b730:	e9c5 6601 	strd	r6, r6, [r5, #4]
   1b734:	6163      	str	r3, [r4, #20]
   1b736:	2306      	movs	r3, #6
   1b738:	f802 3021 	strb.w	r3, [r2, r1, lsl #2]
   1b73c:	60e8      	str	r0, [r5, #12]
   1b73e:	e7b4      	b.n	1b6aa <d_expression_1+0x3a>
   1b740:	7853      	ldrb	r3, [r2, #1]
   1b742:	2b72      	cmp	r3, #114	; 0x72
   1b744:	f000 80f8 	beq.w	1b938 <d_expression_1+0x2c8>
   1b748:	2b70      	cmp	r3, #112	; 0x70
   1b74a:	f000 8112 	beq.w	1b972 <d_expression_1+0x302>
   1b74e:	4620      	mov	r0, r4
   1b750:	f7ff fbe6 	bl	1af20 <d_operator_name>
   1b754:	4605      	mov	r5, r0
   1b756:	b1a8      	cbz	r0, 1b784 <d_expression_1+0x114>
   1b758:	7803      	ldrb	r3, [r0, #0]
   1b75a:	2b32      	cmp	r3, #50	; 0x32
   1b75c:	d035      	beq.n	1b7ca <d_expression_1+0x15a>
   1b75e:	2b34      	cmp	r3, #52	; 0x34
   1b760:	f000 819b 	beq.w	1ba9a <d_expression_1+0x42a>
   1b764:	d80e      	bhi.n	1b784 <d_expression_1+0x114>
   1b766:	2b33      	cmp	r3, #51	; 0x33
   1b768:	d10c      	bne.n	1b784 <d_expression_1+0x114>
   1b76a:	68c3      	ldr	r3, [r0, #12]
   1b76c:	2b03      	cmp	r3, #3
   1b76e:	d809      	bhi.n	1b784 <d_expression_1+0x114>
   1b770:	e8df f003 	tbb	[pc, r3]
   1b774:	0808ce6d 	.word	0x0808ce6d
   1b778:	7853      	ldrb	r3, [r2, #1]
   1b77a:	2b6e      	cmp	r3, #110	; 0x6e
   1b77c:	d1e7      	bne.n	1b74e <d_expression_1+0xde>
   1b77e:	3202      	adds	r2, #2
   1b780:	60c2      	str	r2, [r0, #12]
   1b782:	e788      	b.n	1b696 <d_expression_1+0x26>
   1b784:	2500      	movs	r5, #0
   1b786:	4628      	mov	r0, r5
   1b788:	b003      	add	sp, #12
   1b78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b78c:	f7ff bdec 	b.w	1b368 <d_expr_primary>
   1b790:	f7fe bd4e 	b.w	1a230 <d_template_param>
   1b794:	3301      	adds	r3, #1
   1b796:	60e3      	str	r3, [r4, #12]
   1b798:	4620      	mov	r0, r4
   1b79a:	f7ff fea1 	bl	1b4e0 <d_template_args_1>
   1b79e:	462a      	mov	r2, r5
   1b7a0:	4603      	mov	r3, r0
   1b7a2:	2104      	movs	r1, #4
   1b7a4:	4620      	mov	r0, r4
   1b7a6:	b003      	add	sp, #12
   1b7a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1b7ac:	f7fe ba94 	b.w	19cd8 <d_make_comp>
   1b7b0:	2b74      	cmp	r3, #116	; 0x74
   1b7b2:	f040 80b2 	bne.w	1b91a <d_expression_1+0x2aa>
   1b7b6:	7853      	ldrb	r3, [r2, #1]
   1b7b8:	2b6c      	cmp	r3, #108	; 0x6c
   1b7ba:	d1c8      	bne.n	1b74e <d_expression_1+0xde>
   1b7bc:	3202      	adds	r2, #2
   1b7be:	60e2      	str	r2, [r4, #12]
   1b7c0:	f7fe fedc 	bl	1a57c <d_type>
   1b7c4:	68e2      	ldr	r2, [r4, #12]
   1b7c6:	4605      	mov	r5, r0
   1b7c8:	e77c      	b.n	1b6c4 <d_expression_1+0x54>
   1b7ca:	68c1      	ldr	r1, [r0, #12]
   1b7cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1b7ce:	688a      	ldr	r2, [r1, #8]
   1b7d0:	680e      	ldr	r6, [r1, #0]
   1b7d2:	3a02      	subs	r2, #2
   1b7d4:	4413      	add	r3, r2
   1b7d6:	62e3      	str	r3, [r4, #44]	; 0x2c
   1b7d8:	7833      	ldrb	r3, [r6, #0]
   1b7da:	2b73      	cmp	r3, #115	; 0x73
   1b7dc:	d10b      	bne.n	1b7f6 <d_expression_1+0x186>
   1b7de:	7872      	ldrb	r2, [r6, #1]
   1b7e0:	2a74      	cmp	r2, #116	; 0x74
   1b7e2:	d108      	bne.n	1b7f6 <d_expression_1+0x186>
   1b7e4:	78b2      	ldrb	r2, [r6, #2]
   1b7e6:	b932      	cbnz	r2, 1b7f6 <d_expression_1+0x186>
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	f7fe fec7 	bl	1a57c <d_type>
   1b7ee:	462a      	mov	r2, r5
   1b7f0:	4603      	mov	r3, r0
   1b7f2:	2137      	movs	r1, #55	; 0x37
   1b7f4:	e7d6      	b.n	1b7a4 <d_expression_1+0x134>
   1b7f6:	68cf      	ldr	r7, [r1, #12]
   1b7f8:	2f03      	cmp	r7, #3
   1b7fa:	d8c3      	bhi.n	1b784 <d_expression_1+0x114>
   1b7fc:	e8df f007 	tbb	[pc, r7]
   1b800:	2b540627 	.word	0x2b540627
   1b804:	3203      	adds	r2, #3
   1b806:	60c2      	str	r2, [r0, #12]
   1b808:	2001      	movs	r0, #1
   1b80a:	e786      	b.n	1b71a <d_expression_1+0xaa>
   1b80c:	7832      	ldrb	r2, [r6, #0]
   1b80e:	2a70      	cmp	r2, #112	; 0x70
   1b810:	f000 80c0 	beq.w	1b994 <d_expression_1+0x324>
   1b814:	2a6d      	cmp	r2, #109	; 0x6d
   1b816:	f000 80bd 	beq.w	1b994 <d_expression_1+0x324>
   1b81a:	2700      	movs	r7, #0
   1b81c:	2b73      	cmp	r3, #115	; 0x73
   1b81e:	f040 80b4 	bne.w	1b98a <d_expression_1+0x31a>
   1b822:	7873      	ldrb	r3, [r6, #1]
   1b824:	2b50      	cmp	r3, #80	; 0x50
   1b826:	f040 80b0 	bne.w	1b98a <d_expression_1+0x31a>
   1b82a:	78b3      	ldrb	r3, [r6, #2]
   1b82c:	2b00      	cmp	r3, #0
   1b82e:	f040 80ac 	bne.w	1b98a <d_expression_1+0x31a>
   1b832:	4620      	mov	r0, r4
   1b834:	f7ff fe54 	bl	1b4e0 <d_template_args_1>
   1b838:	4603      	mov	r3, r0
   1b83a:	b12f      	cbz	r7, 1b848 <d_expression_1+0x1d8>
   1b83c:	461a      	mov	r2, r3
   1b83e:	2139      	movs	r1, #57	; 0x39
   1b840:	4620      	mov	r0, r4
   1b842:	f7fe fa49 	bl	19cd8 <d_make_comp>
   1b846:	4603      	mov	r3, r0
   1b848:	462a      	mov	r2, r5
   1b84a:	2137      	movs	r1, #55	; 0x37
   1b84c:	e7aa      	b.n	1b7a4 <d_expression_1+0x134>
   1b84e:	2300      	movs	r3, #0
   1b850:	462a      	mov	r2, r5
   1b852:	2136      	movs	r1, #54	; 0x36
   1b854:	e7a6      	b.n	1b7a4 <d_expression_1+0x134>
   1b856:	2b71      	cmp	r3, #113	; 0x71
   1b858:	f040 80c4 	bne.w	1b9e4 <d_expression_1+0x374>
   1b85c:	7872      	ldrb	r2, [r6, #1]
   1b85e:	2a75      	cmp	r2, #117	; 0x75
   1b860:	f040 80c0 	bne.w	1b9e4 <d_expression_1+0x374>
   1b864:	78b2      	ldrb	r2, [r6, #2]
   1b866:	2a00      	cmp	r2, #0
   1b868:	f040 80bc 	bne.w	1b9e4 <d_expression_1+0x374>
   1b86c:	4620      	mov	r0, r4
   1b86e:	f7ff feff 	bl	1b670 <d_expression_1>
   1b872:	4606      	mov	r6, r0
   1b874:	4620      	mov	r0, r4
   1b876:	f7ff fefb 	bl	1b670 <d_expression_1>
   1b87a:	4607      	mov	r7, r0
   1b87c:	4620      	mov	r0, r4
   1b87e:	f7ff fef7 	bl	1b670 <d_expression_1>
   1b882:	4603      	mov	r3, r0
   1b884:	2800      	cmp	r0, #0
   1b886:	f43f af7d 	beq.w	1b784 <d_expression_1+0x114>
   1b88a:	463a      	mov	r2, r7
   1b88c:	213c      	movs	r1, #60	; 0x3c
   1b88e:	4620      	mov	r0, r4
   1b890:	f7fe fa22 	bl	19cd8 <d_make_comp>
   1b894:	4632      	mov	r2, r6
   1b896:	4603      	mov	r3, r0
   1b898:	213b      	movs	r1, #59	; 0x3b
   1b89a:	4620      	mov	r0, r4
   1b89c:	f7fe fa1c 	bl	19cd8 <d_make_comp>
   1b8a0:	462a      	mov	r2, r5
   1b8a2:	4603      	mov	r3, r0
   1b8a4:	213a      	movs	r1, #58	; 0x3a
   1b8a6:	e77d      	b.n	1b7a4 <d_expression_1+0x134>
   1b8a8:	68eb      	ldr	r3, [r5, #12]
   1b8aa:	681b      	ldr	r3, [r3, #0]
   1b8ac:	785a      	ldrb	r2, [r3, #1]
   1b8ae:	2a63      	cmp	r2, #99	; 0x63
   1b8b0:	f000 810e 	beq.w	1bad0 <d_expression_1+0x460>
   1b8b4:	7833      	ldrb	r3, [r6, #0]
   1b8b6:	2b66      	cmp	r3, #102	; 0x66
   1b8b8:	f000 8133 	beq.w	1bb22 <d_expression_1+0x4b2>
   1b8bc:	2b64      	cmp	r3, #100	; 0x64
   1b8be:	f040 8127 	bne.w	1bb10 <d_expression_1+0x4a0>
   1b8c2:	7873      	ldrb	r3, [r6, #1]
   1b8c4:	2b69      	cmp	r3, #105	; 0x69
   1b8c6:	f040 8123 	bne.w	1bb10 <d_expression_1+0x4a0>
   1b8ca:	78b3      	ldrb	r3, [r6, #2]
   1b8cc:	2b00      	cmp	r3, #0
   1b8ce:	f040 811f 	bne.w	1bb10 <d_expression_1+0x4a0>
   1b8d2:	4620      	mov	r0, r4
   1b8d4:	f7ff fba8 	bl	1b028 <d_unqualified_name>
   1b8d8:	4607      	mov	r7, r0
   1b8da:	7833      	ldrb	r3, [r6, #0]
   1b8dc:	2b63      	cmp	r3, #99	; 0x63
   1b8de:	f040 80b4 	bne.w	1ba4a <d_expression_1+0x3da>
   1b8e2:	7872      	ldrb	r2, [r6, #1]
   1b8e4:	2a6c      	cmp	r2, #108	; 0x6c
   1b8e6:	f040 80b0 	bne.w	1ba4a <d_expression_1+0x3da>
   1b8ea:	78b2      	ldrb	r2, [r6, #2]
   1b8ec:	2a00      	cmp	r2, #0
   1b8ee:	f040 80ac 	bne.w	1ba4a <d_expression_1+0x3da>
   1b8f2:	2145      	movs	r1, #69	; 0x45
   1b8f4:	4620      	mov	r0, r4
   1b8f6:	f000 f931 	bl	1bb5c <d_exprlist>
   1b8fa:	4602      	mov	r2, r0
   1b8fc:	4613      	mov	r3, r2
   1b8fe:	2139      	movs	r1, #57	; 0x39
   1b900:	463a      	mov	r2, r7
   1b902:	4620      	mov	r0, r4
   1b904:	f7fe f9e8 	bl	19cd8 <d_make_comp>
   1b908:	462a      	mov	r2, r5
   1b90a:	4603      	mov	r3, r0
   1b90c:	2138      	movs	r1, #56	; 0x38
   1b90e:	e749      	b.n	1b7a4 <d_expression_1+0x134>
   1b910:	4620      	mov	r0, r4
   1b912:	f7ff fead 	bl	1b670 <d_expression_1>
   1b916:	4603      	mov	r3, r0
   1b918:	e796      	b.n	1b848 <d_expression_1+0x1d8>
   1b91a:	2b75      	cmp	r3, #117	; 0x75
   1b91c:	f47f af17 	bne.w	1b74e <d_expression_1+0xde>
   1b920:	3201      	adds	r2, #1
   1b922:	60c2      	str	r2, [r0, #12]
   1b924:	f7fe fcf0 	bl	1a308 <d_source_name>
   1b928:	9001      	str	r0, [sp, #4]
   1b92a:	4620      	mov	r0, r4
   1b92c:	f7ff fdd8 	bl	1b4e0 <d_template_args_1>
   1b930:	9a01      	ldr	r2, [sp, #4]
   1b932:	4603      	mov	r3, r0
   1b934:	213f      	movs	r1, #63	; 0x3f
   1b936:	e735      	b.n	1b7a4 <d_expression_1+0x134>
   1b938:	1c93      	adds	r3, r2, #2
   1b93a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1b93c:	60c3      	str	r3, [r0, #12]
   1b93e:	7893      	ldrb	r3, [r2, #2]
   1b940:	b131      	cbz	r1, 1b950 <d_expression_1+0x2e0>
   1b942:	2b55      	cmp	r3, #85	; 0x55
   1b944:	d84a      	bhi.n	1b9dc <d_expression_1+0x36c>
   1b946:	2b42      	cmp	r3, #66	; 0x42
   1b948:	d832      	bhi.n	1b9b0 <d_expression_1+0x340>
   1b94a:	3b30      	subs	r3, #48	; 0x30
   1b94c:	2b09      	cmp	r3, #9
   1b94e:	d936      	bls.n	1b9be <d_expression_1+0x34e>
   1b950:	4620      	mov	r0, r4
   1b952:	f7fe fe13 	bl	1a57c <d_type>
   1b956:	4605      	mov	r5, r0
   1b958:	4620      	mov	r0, r4
   1b95a:	f7ff fb65 	bl	1b028 <d_unqualified_name>
   1b95e:	68e3      	ldr	r3, [r4, #12]
   1b960:	7819      	ldrb	r1, [r3, #0]
   1b962:	2949      	cmp	r1, #73	; 0x49
   1b964:	4602      	mov	r2, r0
   1b966:	f000 80a5 	beq.w	1bab4 <d_expression_1+0x444>
   1b96a:	4613      	mov	r3, r2
   1b96c:	2101      	movs	r1, #1
   1b96e:	462a      	mov	r2, r5
   1b970:	e718      	b.n	1b7a4 <d_expression_1+0x134>
   1b972:	3202      	adds	r2, #2
   1b974:	60c2      	str	r2, [r0, #12]
   1b976:	f7ff fe7b 	bl	1b670 <d_expression_1>
   1b97a:	2300      	movs	r3, #0
   1b97c:	4602      	mov	r2, r0
   1b97e:	214c      	movs	r1, #76	; 0x4c
   1b980:	e710      	b.n	1b7a4 <d_expression_1+0x134>
   1b982:	3203      	adds	r2, #3
   1b984:	60c2      	str	r2, [r0, #12]
   1b986:	2000      	movs	r0, #0
   1b988:	e6c7      	b.n	1b71a <d_expression_1+0xaa>
   1b98a:	4620      	mov	r0, r4
   1b98c:	f7ff fe70 	bl	1b670 <d_expression_1>
   1b990:	4603      	mov	r3, r0
   1b992:	e752      	b.n	1b83a <d_expression_1+0x1ca>
   1b994:	7871      	ldrb	r1, [r6, #1]
   1b996:	4291      	cmp	r1, r2
   1b998:	f47f af3f 	bne.w	1b81a <d_expression_1+0x1aa>
   1b99c:	68e2      	ldr	r2, [r4, #12]
   1b99e:	7811      	ldrb	r1, [r2, #0]
   1b9a0:	295f      	cmp	r1, #95	; 0x5f
   1b9a2:	f47f af3b 	bne.w	1b81c <d_expression_1+0x1ac>
   1b9a6:	3201      	adds	r2, #1
   1b9a8:	60e2      	str	r2, [r4, #12]
   1b9aa:	7833      	ldrb	r3, [r6, #0]
   1b9ac:	2700      	movs	r7, #0
   1b9ae:	e735      	b.n	1b81c <d_expression_1+0x1ac>
   1b9b0:	4a68      	ldr	r2, [pc, #416]	; (1bb54 <d_expression_1+0x4e4>)
   1b9b2:	3b43      	subs	r3, #67	; 0x43
   1b9b4:	b2db      	uxtb	r3, r3
   1b9b6:	fa22 f303 	lsr.w	r3, r2, r3
   1b9ba:	07db      	lsls	r3, r3, #31
   1b9bc:	d5c8      	bpl.n	1b950 <d_expression_1+0x2e0>
   1b9be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9c2:	63a3      	str	r3, [r4, #56]	; 0x38
   1b9c4:	2100      	movs	r1, #0
   1b9c6:	4620      	mov	r0, r4
   1b9c8:	f7ff fdbc 	bl	1b544 <d_prefix>
   1b9cc:	68e3      	ldr	r3, [r4, #12]
   1b9ce:	781a      	ldrb	r2, [r3, #0]
   1b9d0:	2a45      	cmp	r2, #69	; 0x45
   1b9d2:	4605      	mov	r5, r0
   1b9d4:	d1c0      	bne.n	1b958 <d_expression_1+0x2e8>
   1b9d6:	3301      	adds	r3, #1
   1b9d8:	60e3      	str	r3, [r4, #12]
   1b9da:	e7bd      	b.n	1b958 <d_expression_1+0x2e8>
   1b9dc:	3b61      	subs	r3, #97	; 0x61
   1b9de:	2b19      	cmp	r3, #25
   1b9e0:	d8b6      	bhi.n	1b950 <d_expression_1+0x2e0>
   1b9e2:	e7ec      	b.n	1b9be <d_expression_1+0x34e>
   1b9e4:	2b64      	cmp	r3, #100	; 0x64
   1b9e6:	d106      	bne.n	1b9f6 <d_expression_1+0x386>
   1b9e8:	7873      	ldrb	r3, [r6, #1]
   1b9ea:	2b58      	cmp	r3, #88	; 0x58
   1b9ec:	d103      	bne.n	1b9f6 <d_expression_1+0x386>
   1b9ee:	78b3      	ldrb	r3, [r6, #2]
   1b9f0:	2b00      	cmp	r3, #0
   1b9f2:	f43f af3b 	beq.w	1b86c <d_expression_1+0x1fc>
   1b9f6:	7833      	ldrb	r3, [r6, #0]
   1b9f8:	2b66      	cmp	r3, #102	; 0x66
   1b9fa:	f000 8097 	beq.w	1bb2c <d_expression_1+0x4bc>
   1b9fe:	2b6e      	cmp	r3, #110	; 0x6e
   1ba00:	f47f aec0 	bne.w	1b784 <d_expression_1+0x114>
   1ba04:	7873      	ldrb	r3, [r6, #1]
   1ba06:	2b77      	cmp	r3, #119	; 0x77
   1ba08:	d002      	beq.n	1ba10 <d_expression_1+0x3a0>
   1ba0a:	2b61      	cmp	r3, #97	; 0x61
   1ba0c:	f47f aeba 	bne.w	1b784 <d_expression_1+0x114>
   1ba10:	215f      	movs	r1, #95	; 0x5f
   1ba12:	4620      	mov	r0, r4
   1ba14:	f000 f8a2 	bl	1bb5c <d_exprlist>
   1ba18:	4606      	mov	r6, r0
   1ba1a:	4620      	mov	r0, r4
   1ba1c:	f7fe fdae 	bl	1a57c <d_type>
   1ba20:	68e3      	ldr	r3, [r4, #12]
   1ba22:	781a      	ldrb	r2, [r3, #0]
   1ba24:	2a45      	cmp	r2, #69	; 0x45
   1ba26:	4607      	mov	r7, r0
   1ba28:	f000 8090 	beq.w	1bb4c <d_expression_1+0x4dc>
   1ba2c:	2a70      	cmp	r2, #112	; 0x70
   1ba2e:	f000 8081 	beq.w	1bb34 <d_expression_1+0x4c4>
   1ba32:	2a69      	cmp	r2, #105	; 0x69
   1ba34:	f47f aea6 	bne.w	1b784 <d_expression_1+0x114>
   1ba38:	785b      	ldrb	r3, [r3, #1]
   1ba3a:	2b6c      	cmp	r3, #108	; 0x6c
   1ba3c:	f47f aea2 	bne.w	1b784 <d_expression_1+0x114>
   1ba40:	4620      	mov	r0, r4
   1ba42:	f7ff fe15 	bl	1b670 <d_expression_1>
   1ba46:	4603      	mov	r3, r0
   1ba48:	e71f      	b.n	1b88a <d_expression_1+0x21a>
   1ba4a:	2b64      	cmp	r3, #100	; 0x64
   1ba4c:	d153      	bne.n	1baf6 <d_expression_1+0x486>
   1ba4e:	7872      	ldrb	r2, [r6, #1]
   1ba50:	2a74      	cmp	r2, #116	; 0x74
   1ba52:	d150      	bne.n	1baf6 <d_expression_1+0x486>
   1ba54:	78b2      	ldrb	r2, [r6, #2]
   1ba56:	2a00      	cmp	r2, #0
   1ba58:	d14d      	bne.n	1baf6 <d_expression_1+0x486>
   1ba5a:	68e3      	ldr	r3, [r4, #12]
   1ba5c:	781a      	ldrb	r2, [r3, #0]
   1ba5e:	2a67      	cmp	r2, #103	; 0x67
   1ba60:	d05b      	beq.n	1bb1a <d_expression_1+0x4aa>
   1ba62:	2a73      	cmp	r2, #115	; 0x73
   1ba64:	d102      	bne.n	1ba6c <d_expression_1+0x3fc>
   1ba66:	785b      	ldrb	r3, [r3, #1]
   1ba68:	2b72      	cmp	r3, #114	; 0x72
   1ba6a:	d04c      	beq.n	1bb06 <d_expression_1+0x496>
   1ba6c:	4620      	mov	r0, r4
   1ba6e:	f7ff fadb 	bl	1b028 <d_unqualified_name>
   1ba72:	68e3      	ldr	r3, [r4, #12]
   1ba74:	7819      	ldrb	r1, [r3, #0]
   1ba76:	2949      	cmp	r1, #73	; 0x49
   1ba78:	4602      	mov	r2, r0
   1ba7a:	f47f af3f 	bne.w	1b8fc <d_expression_1+0x28c>
   1ba7e:	3301      	adds	r3, #1
   1ba80:	60e3      	str	r3, [r4, #12]
   1ba82:	4620      	mov	r0, r4
   1ba84:	9201      	str	r2, [sp, #4]
   1ba86:	f7ff fd2b 	bl	1b4e0 <d_template_args_1>
   1ba8a:	9a01      	ldr	r2, [sp, #4]
   1ba8c:	4603      	mov	r3, r0
   1ba8e:	2104      	movs	r1, #4
   1ba90:	4620      	mov	r0, r4
   1ba92:	f7fe f921 	bl	19cd8 <d_make_comp>
   1ba96:	4602      	mov	r2, r0
   1ba98:	e730      	b.n	1b8fc <d_expression_1+0x28c>
   1ba9a:	68e3      	ldr	r3, [r4, #12]
   1ba9c:	781a      	ldrb	r2, [r3, #0]
   1ba9e:	2a5f      	cmp	r2, #95	; 0x5f
   1baa0:	f47f af36 	bne.w	1b910 <d_expression_1+0x2a0>
   1baa4:	3301      	adds	r3, #1
   1baa6:	60e3      	str	r3, [r4, #12]
   1baa8:	2145      	movs	r1, #69	; 0x45
   1baaa:	4620      	mov	r0, r4
   1baac:	f000 f856 	bl	1bb5c <d_exprlist>
   1bab0:	4603      	mov	r3, r0
   1bab2:	e6c9      	b.n	1b848 <d_expression_1+0x1d8>
   1bab4:	3301      	adds	r3, #1
   1bab6:	60e3      	str	r3, [r4, #12]
   1bab8:	4620      	mov	r0, r4
   1baba:	9201      	str	r2, [sp, #4]
   1babc:	f7ff fd10 	bl	1b4e0 <d_template_args_1>
   1bac0:	9a01      	ldr	r2, [sp, #4]
   1bac2:	4603      	mov	r3, r0
   1bac4:	2104      	movs	r1, #4
   1bac6:	4620      	mov	r0, r4
   1bac8:	f7fe f906 	bl	19cd8 <d_make_comp>
   1bacc:	4602      	mov	r2, r0
   1bace:	e74c      	b.n	1b96a <d_expression_1+0x2fa>
   1bad0:	781b      	ldrb	r3, [r3, #0]
   1bad2:	2b73      	cmp	r3, #115	; 0x73
   1bad4:	d00a      	beq.n	1baec <d_expression_1+0x47c>
   1bad6:	3b63      	subs	r3, #99	; 0x63
   1bad8:	b2db      	uxtb	r3, r3
   1bada:	2b0f      	cmp	r3, #15
   1badc:	f63f aeea 	bhi.w	1b8b4 <d_expression_1+0x244>
   1bae0:	4a1d      	ldr	r2, [pc, #116]	; (1bb58 <d_expression_1+0x4e8>)
   1bae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1bae6:	2b00      	cmp	r3, #0
   1bae8:	f43f aee4 	beq.w	1b8b4 <d_expression_1+0x244>
   1baec:	4620      	mov	r0, r4
   1baee:	f7fe fd45 	bl	1a57c <d_type>
   1baf2:	4607      	mov	r7, r0
   1baf4:	e6f1      	b.n	1b8da <d_expression_1+0x26a>
   1baf6:	2b70      	cmp	r3, #112	; 0x70
   1baf8:	d105      	bne.n	1bb06 <d_expression_1+0x496>
   1bafa:	7873      	ldrb	r3, [r6, #1]
   1bafc:	2b74      	cmp	r3, #116	; 0x74
   1bafe:	d102      	bne.n	1bb06 <d_expression_1+0x496>
   1bb00:	78b3      	ldrb	r3, [r6, #2]
   1bb02:	2b00      	cmp	r3, #0
   1bb04:	d0a9      	beq.n	1ba5a <d_expression_1+0x3ea>
   1bb06:	4620      	mov	r0, r4
   1bb08:	f7ff fdb2 	bl	1b670 <d_expression_1>
   1bb0c:	4602      	mov	r2, r0
   1bb0e:	e6f5      	b.n	1b8fc <d_expression_1+0x28c>
   1bb10:	4620      	mov	r0, r4
   1bb12:	f7ff fdad 	bl	1b670 <d_expression_1>
   1bb16:	4607      	mov	r7, r0
   1bb18:	e6df      	b.n	1b8da <d_expression_1+0x26a>
   1bb1a:	785b      	ldrb	r3, [r3, #1]
   1bb1c:	2b73      	cmp	r3, #115	; 0x73
   1bb1e:	d1a5      	bne.n	1ba6c <d_expression_1+0x3fc>
   1bb20:	e7f1      	b.n	1bb06 <d_expression_1+0x496>
   1bb22:	4620      	mov	r0, r4
   1bb24:	f7ff f9fc 	bl	1af20 <d_operator_name>
   1bb28:	4607      	mov	r7, r0
   1bb2a:	e6d6      	b.n	1b8da <d_expression_1+0x26a>
   1bb2c:	4620      	mov	r0, r4
   1bb2e:	f7ff f9f7 	bl	1af20 <d_operator_name>
   1bb32:	e69e      	b.n	1b872 <d_expression_1+0x202>
   1bb34:	785a      	ldrb	r2, [r3, #1]
   1bb36:	2a69      	cmp	r2, #105	; 0x69
   1bb38:	f47f ae24 	bne.w	1b784 <d_expression_1+0x114>
   1bb3c:	3302      	adds	r3, #2
   1bb3e:	60e3      	str	r3, [r4, #12]
   1bb40:	2145      	movs	r1, #69	; 0x45
   1bb42:	4620      	mov	r0, r4
   1bb44:	f000 f80a 	bl	1bb5c <d_exprlist>
   1bb48:	4603      	mov	r3, r0
   1bb4a:	e69e      	b.n	1b88a <d_expression_1+0x21a>
   1bb4c:	3301      	adds	r3, #1
   1bb4e:	60e3      	str	r3, [r4, #12]
   1bb50:	2300      	movs	r3, #0
   1bb52:	e69a      	b.n	1b88a <d_expression_1+0x21a>
   1bb54:	00040201 	.word	0x00040201
   1bb58:	200007e4 	.word	0x200007e4

0001bb5c <d_exprlist>:
   1bb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb60:	68c2      	ldr	r2, [r0, #12]
   1bb62:	460e      	mov	r6, r1
   1bb64:	7811      	ldrb	r1, [r2, #0]
   1bb66:	b082      	sub	sp, #8
   1bb68:	2300      	movs	r3, #0
   1bb6a:	42b1      	cmp	r1, r6
   1bb6c:	4604      	mov	r4, r0
   1bb6e:	9301      	str	r3, [sp, #4]
   1bb70:	d024      	beq.n	1bbbc <d_exprlist+0x60>
   1bb72:	f8d0 8030 	ldr.w	r8, [r0, #48]	; 0x30
   1bb76:	ad01      	add	r5, sp, #4
   1bb78:	2701      	movs	r7, #1
   1bb7a:	e009      	b.n	1bb90 <d_exprlist+0x34>
   1bb7c:	f7fe f8ac 	bl	19cd8 <d_make_comp>
   1bb80:	6028      	str	r0, [r5, #0]
   1bb82:	f100 0510 	add.w	r5, r0, #16
   1bb86:	b178      	cbz	r0, 1bba8 <d_exprlist+0x4c>
   1bb88:	68e3      	ldr	r3, [r4, #12]
   1bb8a:	781a      	ldrb	r2, [r3, #0]
   1bb8c:	42b2      	cmp	r2, r6
   1bb8e:	d00f      	beq.n	1bbb0 <d_exprlist+0x54>
   1bb90:	6327      	str	r7, [r4, #48]	; 0x30
   1bb92:	4620      	mov	r0, r4
   1bb94:	f7ff fd6c 	bl	1b670 <d_expression_1>
   1bb98:	4602      	mov	r2, r0
   1bb9a:	2300      	movs	r3, #0
   1bb9c:	212e      	movs	r1, #46	; 0x2e
   1bb9e:	4620      	mov	r0, r4
   1bba0:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
   1bba4:	2a00      	cmp	r2, #0
   1bba6:	d1e9      	bne.n	1bb7c <d_exprlist+0x20>
   1bba8:	2000      	movs	r0, #0
   1bbaa:	b002      	add	sp, #8
   1bbac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbb0:	9801      	ldr	r0, [sp, #4]
   1bbb2:	3301      	adds	r3, #1
   1bbb4:	60e3      	str	r3, [r4, #12]
   1bbb6:	b002      	add	sp, #8
   1bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bbbc:	3201      	adds	r2, #1
   1bbbe:	60c2      	str	r2, [r0, #12]
   1bbc0:	212e      	movs	r1, #46	; 0x2e
   1bbc2:	461a      	mov	r2, r3
   1bbc4:	b002      	add	sp, #8
   1bbc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bbca:	f7fe b885 	b.w	19cd8 <d_make_comp>
   1bbce:	bf00      	nop

0001bbd0 <d_cv_qualifiers>:
   1bbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbd4:	460f      	mov	r7, r1
   1bbd6:	68c1      	ldr	r1, [r0, #12]
   1bbd8:	f1b2 0900 	subs.w	r9, r2, #0
   1bbdc:	b083      	sub	sp, #12
   1bbde:	780a      	ldrb	r2, [r1, #0]
   1bbe0:	4604      	mov	r4, r0
   1bbe2:	bf15      	itete	ne
   1bbe4:	f04f 0a1e 	movne.w	sl, #30
   1bbe8:	f04f 0a1b 	moveq.w	sl, #27
   1bbec:	f04f 081d 	movne.w	r8, #29
   1bbf0:	f04f 081a 	moveq.w	r8, #26
   1bbf4:	bf14      	ite	ne
   1bbf6:	261c      	movne	r6, #28
   1bbf8:	2619      	moveq	r6, #25
   1bbfa:	463d      	mov	r5, r7
   1bbfc:	f04f 0b01 	mov.w	fp, #1
   1bc00:	e01b      	b.n	1bc3a <d_cv_qualifiers+0x6a>
   1bc02:	2a56      	cmp	r2, #86	; 0x56
   1bc04:	d033      	beq.n	1bc6e <d_cv_qualifiers+0x9e>
   1bc06:	2a4b      	cmp	r2, #75	; 0x4b
   1bc08:	d037      	beq.n	1bc7a <d_cv_qualifiers+0xaa>
   1bc0a:	784b      	ldrb	r3, [r1, #1]
   1bc0c:	b353      	cbz	r3, 1bc64 <d_cv_qualifiers+0x94>
   1bc0e:	1c8b      	adds	r3, r1, #2
   1bc10:	60e3      	str	r3, [r4, #12]
   1bc12:	784b      	ldrb	r3, [r1, #1]
   1bc14:	2b78      	cmp	r3, #120	; 0x78
   1bc16:	d04f      	beq.n	1bcb8 <d_cv_qualifiers+0xe8>
   1bc18:	2b6f      	cmp	r3, #111	; 0x6f
   1bc1a:	d134      	bne.n	1bc86 <d_cv_qualifiers+0xb6>
   1bc1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bc1e:	3309      	adds	r3, #9
   1bc20:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc22:	2150      	movs	r1, #80	; 0x50
   1bc24:	2300      	movs	r3, #0
   1bc26:	2200      	movs	r2, #0
   1bc28:	4620      	mov	r0, r4
   1bc2a:	f7fe f855 	bl	19cd8 <d_make_comp>
   1bc2e:	6028      	str	r0, [r5, #0]
   1bc30:	b1c0      	cbz	r0, 1bc64 <d_cv_qualifiers+0x94>
   1bc32:	68e1      	ldr	r1, [r4, #12]
   1bc34:	780a      	ldrb	r2, [r1, #0]
   1bc36:	f100 050c 	add.w	r5, r0, #12
   1bc3a:	4608      	mov	r0, r1
   1bc3c:	f7fe fa24 	bl	1a088 <next_is_type_qual.isra.0>
   1bc40:	2800      	cmp	r0, #0
   1bc42:	d03f      	beq.n	1bcc4 <d_cv_qualifiers+0xf4>
   1bc44:	1c4b      	adds	r3, r1, #1
   1bc46:	2a72      	cmp	r2, #114	; 0x72
   1bc48:	60e3      	str	r3, [r4, #12]
   1bc4a:	d1da      	bne.n	1bc02 <d_cv_qualifiers+0x32>
   1bc4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bc4e:	3309      	adds	r3, #9
   1bc50:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc52:	4631      	mov	r1, r6
   1bc54:	2300      	movs	r3, #0
   1bc56:	2200      	movs	r2, #0
   1bc58:	4620      	mov	r0, r4
   1bc5a:	f7fe f83d 	bl	19cd8 <d_make_comp>
   1bc5e:	6028      	str	r0, [r5, #0]
   1bc60:	2800      	cmp	r0, #0
   1bc62:	d1e6      	bne.n	1bc32 <d_cv_qualifiers+0x62>
   1bc64:	2500      	movs	r5, #0
   1bc66:	4628      	mov	r0, r5
   1bc68:	b003      	add	sp, #12
   1bc6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bc70:	3309      	adds	r3, #9
   1bc72:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc74:	4641      	mov	r1, r8
   1bc76:	2300      	movs	r3, #0
   1bc78:	e7d5      	b.n	1bc26 <d_cv_qualifiers+0x56>
   1bc7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bc7c:	3306      	adds	r3, #6
   1bc7e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc80:	4651      	mov	r1, sl
   1bc82:	2300      	movs	r3, #0
   1bc84:	e7cf      	b.n	1bc26 <d_cv_qualifiers+0x56>
   1bc86:	2b4f      	cmp	r3, #79	; 0x4f
   1bc88:	d138      	bne.n	1bcfc <d_cv_qualifiers+0x12c>
   1bc8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bc8c:	3309      	adds	r3, #9
   1bc8e:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bc90:	4620      	mov	r0, r4
   1bc92:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bc94:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
   1bc98:	9301      	str	r3, [sp, #4]
   1bc9a:	f7ff fce9 	bl	1b670 <d_expression_1>
   1bc9e:	9b01      	ldr	r3, [sp, #4]
   1bca0:	6323      	str	r3, [r4, #48]	; 0x30
   1bca2:	4603      	mov	r3, r0
   1bca4:	2800      	cmp	r0, #0
   1bca6:	d0dd      	beq.n	1bc64 <d_cv_qualifiers+0x94>
   1bca8:	68e2      	ldr	r2, [r4, #12]
   1bcaa:	7811      	ldrb	r1, [r2, #0]
   1bcac:	2945      	cmp	r1, #69	; 0x45
   1bcae:	d1d9      	bne.n	1bc64 <d_cv_qualifiers+0x94>
   1bcb0:	3201      	adds	r2, #1
   1bcb2:	60e2      	str	r2, [r4, #12]
   1bcb4:	2150      	movs	r1, #80	; 0x50
   1bcb6:	e7b6      	b.n	1bc26 <d_cv_qualifiers+0x56>
   1bcb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bcba:	3311      	adds	r3, #17
   1bcbc:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bcbe:	214e      	movs	r1, #78	; 0x4e
   1bcc0:	2300      	movs	r3, #0
   1bcc2:	e7b0      	b.n	1bc26 <d_cv_qualifiers+0x56>
   1bcc4:	f1b9 0f00 	cmp.w	r9, #0
   1bcc8:	d1cd      	bne.n	1bc66 <d_cv_qualifiers+0x96>
   1bcca:	2a46      	cmp	r2, #70	; 0x46
   1bccc:	d1cb      	bne.n	1bc66 <d_cv_qualifiers+0x96>
   1bcce:	42bd      	cmp	r5, r7
   1bcd0:	d0c9      	beq.n	1bc66 <d_cv_qualifiers+0x96>
   1bcd2:	201d      	movs	r0, #29
   1bcd4:	211e      	movs	r1, #30
   1bcd6:	221c      	movs	r2, #28
   1bcd8:	e004      	b.n	1bce4 <d_cv_qualifiers+0x114>
   1bcda:	2b19      	cmp	r3, #25
   1bcdc:	d00c      	beq.n	1bcf8 <d_cv_qualifiers+0x128>
   1bcde:	370c      	adds	r7, #12
   1bce0:	42bd      	cmp	r5, r7
   1bce2:	d0c0      	beq.n	1bc66 <d_cv_qualifiers+0x96>
   1bce4:	683f      	ldr	r7, [r7, #0]
   1bce6:	783b      	ldrb	r3, [r7, #0]
   1bce8:	2b1a      	cmp	r3, #26
   1bcea:	d003      	beq.n	1bcf4 <d_cv_qualifiers+0x124>
   1bcec:	2b1b      	cmp	r3, #27
   1bcee:	d1f4      	bne.n	1bcda <d_cv_qualifiers+0x10a>
   1bcf0:	7039      	strb	r1, [r7, #0]
   1bcf2:	e7f4      	b.n	1bcde <d_cv_qualifiers+0x10e>
   1bcf4:	7038      	strb	r0, [r7, #0]
   1bcf6:	e7f2      	b.n	1bcde <d_cv_qualifiers+0x10e>
   1bcf8:	703a      	strb	r2, [r7, #0]
   1bcfa:	e7f0      	b.n	1bcde <d_cv_qualifiers+0x10e>
   1bcfc:	2b77      	cmp	r3, #119	; 0x77
   1bcfe:	d1b1      	bne.n	1bc64 <d_cv_qualifiers+0x94>
   1bd00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bd02:	3306      	adds	r3, #6
   1bd04:	62e3      	str	r3, [r4, #44]	; 0x2c
   1bd06:	4620      	mov	r0, r4
   1bd08:	f7ff f870 	bl	1adec <d_parmlist>
   1bd0c:	4603      	mov	r3, r0
   1bd0e:	2800      	cmp	r0, #0
   1bd10:	d0a8      	beq.n	1bc64 <d_cv_qualifiers+0x94>
   1bd12:	68e2      	ldr	r2, [r4, #12]
   1bd14:	7811      	ldrb	r1, [r2, #0]
   1bd16:	2945      	cmp	r1, #69	; 0x45
   1bd18:	d1a4      	bne.n	1bc64 <d_cv_qualifiers+0x94>
   1bd1a:	3201      	adds	r2, #1
   1bd1c:	60e2      	str	r2, [r4, #12]
   1bd1e:	2151      	movs	r1, #81	; 0x51
   1bd20:	e781      	b.n	1bc26 <d_cv_qualifiers+0x56>
   1bd22:	bf00      	nop

0001bd24 <d_special_name>:
   1bd24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd28:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   1bd2a:	68c3      	ldr	r3, [r0, #12]
   1bd2c:	f101 0214 	add.w	r2, r1, #20
   1bd30:	62c2      	str	r2, [r0, #44]	; 0x2c
   1bd32:	781a      	ldrb	r2, [r3, #0]
   1bd34:	2a54      	cmp	r2, #84	; 0x54
   1bd36:	b082      	sub	sp, #8
   1bd38:	4604      	mov	r4, r0
   1bd3a:	d075      	beq.n	1be28 <d_special_name+0x104>
   1bd3c:	2a47      	cmp	r2, #71	; 0x47
   1bd3e:	d128      	bne.n	1bd92 <d_special_name+0x6e>
   1bd40:	1c5a      	adds	r2, r3, #1
   1bd42:	60c2      	str	r2, [r0, #12]
   1bd44:	785a      	ldrb	r2, [r3, #1]
   1bd46:	b322      	cbz	r2, 1bd92 <d_special_name+0x6e>
   1bd48:	1c9a      	adds	r2, r3, #2
   1bd4a:	60c2      	str	r2, [r0, #12]
   1bd4c:	785a      	ldrb	r2, [r3, #1]
   1bd4e:	2a56      	cmp	r2, #86	; 0x56
   1bd50:	d823      	bhi.n	1bd9a <d_special_name+0x76>
   1bd52:	2a40      	cmp	r2, #64	; 0x40
   1bd54:	d91d      	bls.n	1bd92 <d_special_name+0x6e>
   1bd56:	3a41      	subs	r2, #65	; 0x41
   1bd58:	2a15      	cmp	r2, #21
   1bd5a:	d81a      	bhi.n	1bd92 <d_special_name+0x6e>
   1bd5c:	e8df f012 	tbh	[pc, r2, lsl #1]
   1bd60:	0019011d 	.word	0x0019011d
   1bd64:	00190019 	.word	0x00190019
   1bd68:	00190019 	.word	0x00190019
   1bd6c:	00190019 	.word	0x00190019
   1bd70:	00190019 	.word	0x00190019
   1bd74:	00190019 	.word	0x00190019
   1bd78:	00190019 	.word	0x00190019
   1bd7c:	00190019 	.word	0x00190019
   1bd80:	00ff0019 	.word	0x00ff0019
   1bd84:	00e90019 	.word	0x00e90019
   1bd88:	00de0019 	.word	0x00de0019
   1bd8c:	68e3      	ldr	r3, [r4, #12]
   1bd8e:	3302      	adds	r3, #2
   1bd90:	60e3      	str	r3, [r4, #12]
   1bd92:	2000      	movs	r0, #0
   1bd94:	b002      	add	sp, #8
   1bd96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd9a:	2a72      	cmp	r2, #114	; 0x72
   1bd9c:	d1f9      	bne.n	1bd92 <d_special_name+0x6e>
   1bd9e:	f7fe f813 	bl	19dc8 <d_number>
   1bda2:	2801      	cmp	r0, #1
   1bda4:	ddf5      	ble.n	1bd92 <d_special_name+0x6e>
   1bda6:	68e3      	ldr	r3, [r4, #12]
   1bda8:	781a      	ldrb	r2, [r3, #0]
   1bdaa:	2a00      	cmp	r2, #0
   1bdac:	d0f1      	beq.n	1bd92 <d_special_name+0x6e>
   1bdae:	1c5e      	adds	r6, r3, #1
   1bdb0:	60e6      	str	r6, [r4, #12]
   1bdb2:	781b      	ldrb	r3, [r3, #0]
   1bdb4:	2b5f      	cmp	r3, #95	; 0x5f
   1bdb6:	d1ec      	bne.n	1bd92 <d_special_name+0x6e>
   1bdb8:	2200      	movs	r2, #0
   1bdba:	1e45      	subs	r5, r0, #1
   1bdbc:	4617      	mov	r7, r2
   1bdbe:	f04f 0842 	mov.w	r8, #66	; 0x42
   1bdc2:	7833      	ldrb	r3, [r6, #0]
   1bdc4:	2b00      	cmp	r3, #0
   1bdc6:	d0e4      	beq.n	1bd92 <d_special_name+0x6e>
   1bdc8:	2b24      	cmp	r3, #36	; 0x24
   1bdca:	f040 819f 	bne.w	1c10c <d_special_name+0x3e8>
   1bdce:	7873      	ldrb	r3, [r6, #1]
   1bdd0:	2b53      	cmp	r3, #83	; 0x53
   1bdd2:	f000 81bf 	beq.w	1c154 <d_special_name+0x430>
   1bdd6:	2b5f      	cmp	r3, #95	; 0x5f
   1bdd8:	f000 81ba 	beq.w	1c150 <d_special_name+0x42c>
   1bddc:	2b24      	cmp	r3, #36	; 0x24
   1bdde:	d1d8      	bne.n	1bd92 <d_special_name+0x6e>
   1bde0:	4619      	mov	r1, r3
   1bde2:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
   1bde6:	4298      	cmp	r0, r3
   1bde8:	dad0      	bge.n	1bd8c <d_special_name+0x68>
   1bdea:	6926      	ldr	r6, [r4, #16]
   1bdec:	eb00 0c80 	add.w	ip, r0, r0, lsl #2
   1bdf0:	eb06 038c 	add.w	r3, r6, ip, lsl #2
   1bdf4:	3001      	adds	r0, #1
   1bdf6:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1bdfa:	6160      	str	r0, [r4, #20]
   1bdfc:	f806 802c 	strb.w	r8, [r6, ip, lsl #2]
   1be00:	68e6      	ldr	r6, [r4, #12]
   1be02:	60d9      	str	r1, [r3, #12]
   1be04:	3d02      	subs	r5, #2
   1be06:	3602      	adds	r6, #2
   1be08:	60e6      	str	r6, [r4, #12]
   1be0a:	2a00      	cmp	r2, #0
   1be0c:	f000 819e 	beq.w	1c14c <d_special_name+0x428>
   1be10:	2141      	movs	r1, #65	; 0x41
   1be12:	4620      	mov	r0, r4
   1be14:	f7fd ff60 	bl	19cd8 <d_make_comp>
   1be18:	4602      	mov	r2, r0
   1be1a:	2800      	cmp	r0, #0
   1be1c:	d0b9      	beq.n	1bd92 <d_special_name+0x6e>
   1be1e:	2d00      	cmp	r5, #0
   1be20:	dccf      	bgt.n	1bdc2 <d_special_name+0x9e>
   1be22:	2300      	movs	r3, #0
   1be24:	2140      	movs	r1, #64	; 0x40
   1be26:	e07e      	b.n	1bf26 <d_special_name+0x202>
   1be28:	1c5a      	adds	r2, r3, #1
   1be2a:	60c2      	str	r2, [r0, #12]
   1be2c:	785a      	ldrb	r2, [r3, #1]
   1be2e:	2a00      	cmp	r2, #0
   1be30:	d0af      	beq.n	1bd92 <d_special_name+0x6e>
   1be32:	1c9a      	adds	r2, r3, #2
   1be34:	60c2      	str	r2, [r0, #12]
   1be36:	785b      	ldrb	r3, [r3, #1]
   1be38:	3b41      	subs	r3, #65	; 0x41
   1be3a:	2b35      	cmp	r3, #53	; 0x35
   1be3c:	d8a9      	bhi.n	1bd92 <d_special_name+0x6e>
   1be3e:	a201      	add	r2, pc, #4	; (adr r2, 1be44 <d_special_name+0x120>)
   1be40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1be44:	0001c00b 	.word	0x0001c00b
   1be48:	0001bd93 	.word	0x0001bd93
   1be4c:	0001bfd7 	.word	0x0001bfd7
   1be50:	0001bd93 	.word	0x0001bd93
   1be54:	0001bd93 	.word	0x0001bd93
   1be58:	0001c017 	.word	0x0001c017
   1be5c:	0001bd93 	.word	0x0001bd93
   1be60:	0001c07b 	.word	0x0001c07b
   1be64:	0001c0f5 	.word	0x0001c0f5
   1be68:	0001c0e9 	.word	0x0001c0e9
   1be6c:	0001bd93 	.word	0x0001bd93
   1be70:	0001bd93 	.word	0x0001bd93
   1be74:	0001bd93 	.word	0x0001bd93
   1be78:	0001bd93 	.word	0x0001bd93
   1be7c:	0001bd93 	.word	0x0001bd93
   1be80:	0001bd93 	.word	0x0001bd93
   1be84:	0001bd93 	.word	0x0001bd93
   1be88:	0001bd93 	.word	0x0001bd93
   1be8c:	0001c101 	.word	0x0001c101
   1be90:	0001c087 	.word	0x0001c087
   1be94:	0001bd93 	.word	0x0001bd93
   1be98:	0001c097 	.word	0x0001c097
   1be9c:	0001c0a7 	.word	0x0001c0a7
   1bea0:	0001bd93 	.word	0x0001bd93
   1bea4:	0001bd93 	.word	0x0001bd93
   1bea8:	0001bd93 	.word	0x0001bd93
   1beac:	0001bd93 	.word	0x0001bd93
   1beb0:	0001bd93 	.word	0x0001bd93
   1beb4:	0001bd93 	.word	0x0001bd93
   1beb8:	0001bd93 	.word	0x0001bd93
   1bebc:	0001bd93 	.word	0x0001bd93
   1bec0:	0001bd93 	.word	0x0001bd93
   1bec4:	0001bd93 	.word	0x0001bd93
   1bec8:	0001bd93 	.word	0x0001bd93
   1becc:	0001c0b3 	.word	0x0001c0b3
   1bed0:	0001bd93 	.word	0x0001bd93
   1bed4:	0001bd93 	.word	0x0001bd93
   1bed8:	0001bd93 	.word	0x0001bd93
   1bedc:	0001bd93 	.word	0x0001bd93
   1bee0:	0001c023 	.word	0x0001c023
   1bee4:	0001bd93 	.word	0x0001bd93
   1bee8:	0001bd93 	.word	0x0001bd93
   1beec:	0001bd93 	.word	0x0001bd93
   1bef0:	0001bd93 	.word	0x0001bd93
   1bef4:	0001bd93 	.word	0x0001bd93
   1bef8:	0001bd93 	.word	0x0001bd93
   1befc:	0001bd93 	.word	0x0001bd93
   1bf00:	0001bd93 	.word	0x0001bd93
   1bf04:	0001bd93 	.word	0x0001bd93
   1bf08:	0001bd93 	.word	0x0001bd93
   1bf0c:	0001bd93 	.word	0x0001bd93
   1bf10:	0001bd93 	.word	0x0001bd93
   1bf14:	0001bd93 	.word	0x0001bd93
   1bf18:	0001c04f 	.word	0x0001c04f
   1bf1c:	f000 f93c 	bl	1c198 <d_name>
   1bf20:	2300      	movs	r3, #0
   1bf22:	4602      	mov	r2, r0
   1bf24:	2113      	movs	r1, #19
   1bf26:	4620      	mov	r0, r4
   1bf28:	b002      	add	sp, #8
   1bf2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bf2e:	f7fd bed3 	b.w	19cd8 <d_make_comp>
   1bf32:	789a      	ldrb	r2, [r3, #2]
   1bf34:	2a00      	cmp	r2, #0
   1bf36:	f000 810f 	beq.w	1c158 <d_special_name+0x434>
   1bf3a:	1cda      	adds	r2, r3, #3
   1bf3c:	60c2      	str	r2, [r0, #12]
   1bf3e:	789a      	ldrb	r2, [r3, #2]
   1bf40:	78db      	ldrb	r3, [r3, #3]
   1bf42:	2a6e      	cmp	r2, #110	; 0x6e
   1bf44:	d03a      	beq.n	1bfbc <d_special_name+0x298>
   1bf46:	2b47      	cmp	r3, #71	; 0x47
   1bf48:	d002      	beq.n	1bf50 <d_special_name+0x22c>
   1bf4a:	2b54      	cmp	r3, #84	; 0x54
   1bf4c:	f040 8104 	bne.w	1c158 <d_special_name+0x434>
   1bf50:	4620      	mov	r0, r4
   1bf52:	f7ff fee7 	bl	1bd24 <d_special_name>
   1bf56:	4602      	mov	r2, r0
   1bf58:	2300      	movs	r3, #0
   1bf5a:	214a      	movs	r1, #74	; 0x4a
   1bf5c:	e7e3      	b.n	1bf26 <d_special_name+0x202>
   1bf5e:	f000 f91b 	bl	1c198 <d_name>
   1bf62:	e9d4 1305 	ldrd	r1, r3, [r4, #20]
   1bf66:	4299      	cmp	r1, r3
   1bf68:	4602      	mov	r2, r0
   1bf6a:	f280 80ff 	bge.w	1c16c <d_special_name+0x448>
   1bf6e:	9001      	str	r0, [sp, #4]
   1bf70:	6920      	ldr	r0, [r4, #16]
   1bf72:	eb01 0681 	add.w	r6, r1, r1, lsl #2
   1bf76:	eb00 0586 	add.w	r5, r0, r6, lsl #2
   1bf7a:	2300      	movs	r3, #0
   1bf7c:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1bf80:	3101      	adds	r1, #1
   1bf82:	2343      	movs	r3, #67	; 0x43
   1bf84:	6161      	str	r1, [r4, #20]
   1bf86:	f800 3026 	strb.w	r3, [r0, r6, lsl #2]
   1bf8a:	4620      	mov	r0, r4
   1bf8c:	f7fd ff1c 	bl	19dc8 <d_number>
   1bf90:	9a01      	ldr	r2, [sp, #4]
   1bf92:	60e8      	str	r0, [r5, #12]
   1bf94:	462b      	mov	r3, r5
   1bf96:	2116      	movs	r1, #22
   1bf98:	e7c5      	b.n	1bf26 <d_special_name+0x202>
   1bf9a:	789b      	ldrb	r3, [r3, #2]
   1bf9c:	2b47      	cmp	r3, #71	; 0x47
   1bf9e:	d001      	beq.n	1bfa4 <d_special_name+0x280>
   1bfa0:	2b54      	cmp	r3, #84	; 0x54
   1bfa2:	d106      	bne.n	1bfb2 <d_special_name+0x28e>
   1bfa4:	4620      	mov	r0, r4
   1bfa6:	f7ff febd 	bl	1bd24 <d_special_name>
   1bfaa:	4602      	mov	r2, r0
   1bfac:	2300      	movs	r3, #0
   1bfae:	2117      	movs	r1, #23
   1bfb0:	e7b9      	b.n	1bf26 <d_special_name+0x202>
   1bfb2:	2100      	movs	r1, #0
   1bfb4:	f000 fa3e 	bl	1c434 <d_encoding.part.0>
   1bfb8:	4602      	mov	r2, r0
   1bfba:	e7f7      	b.n	1bfac <d_special_name+0x288>
   1bfbc:	2b47      	cmp	r3, #71	; 0x47
   1bfbe:	f000 80e1 	beq.w	1c184 <d_special_name+0x460>
   1bfc2:	2b54      	cmp	r3, #84	; 0x54
   1bfc4:	f000 80de 	beq.w	1c184 <d_special_name+0x460>
   1bfc8:	2100      	movs	r1, #0
   1bfca:	f000 fa33 	bl	1c434 <d_encoding.part.0>
   1bfce:	4602      	mov	r2, r0
   1bfd0:	2300      	movs	r3, #0
   1bfd2:	214b      	movs	r1, #75	; 0x4b
   1bfd4:	e7a7      	b.n	1bf26 <d_special_name+0x202>
   1bfd6:	f7fe fad1 	bl	1a57c <d_type>
   1bfda:	4605      	mov	r5, r0
   1bfdc:	4620      	mov	r0, r4
   1bfde:	f7fd fef3 	bl	19dc8 <d_number>
   1bfe2:	2800      	cmp	r0, #0
   1bfe4:	f6ff aed5 	blt.w	1bd92 <d_special_name+0x6e>
   1bfe8:	68e3      	ldr	r3, [r4, #12]
   1bfea:	781a      	ldrb	r2, [r3, #0]
   1bfec:	2a5f      	cmp	r2, #95	; 0x5f
   1bfee:	f47f aed0 	bne.w	1bd92 <d_special_name+0x6e>
   1bff2:	3301      	adds	r3, #1
   1bff4:	60e3      	str	r3, [r4, #12]
   1bff6:	4620      	mov	r0, r4
   1bff8:	f7fe fac0 	bl	1a57c <d_type>
   1bffc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   1bffe:	3105      	adds	r1, #5
   1c000:	62e1      	str	r1, [r4, #44]	; 0x2c
   1c002:	4602      	mov	r2, r0
   1c004:	462b      	mov	r3, r5
   1c006:	210b      	movs	r1, #11
   1c008:	e78d      	b.n	1bf26 <d_special_name+0x202>
   1c00a:	f7ff fa3d 	bl	1b488 <d_template_arg>
   1c00e:	2300      	movs	r3, #0
   1c010:	4602      	mov	r2, r0
   1c012:	2130      	movs	r1, #48	; 0x30
   1c014:	e787      	b.n	1bf26 <d_special_name+0x202>
   1c016:	f7fe fab1 	bl	1a57c <d_type>
   1c01a:	2300      	movs	r3, #0
   1c01c:	4602      	mov	r2, r0
   1c01e:	210e      	movs	r1, #14
   1c020:	e781      	b.n	1bf26 <d_special_name+0x202>
   1c022:	2168      	movs	r1, #104	; 0x68
   1c024:	f7fd ff0a 	bl	19e3c <d_call_offset>
   1c028:	2800      	cmp	r0, #0
   1c02a:	f43f aeb2 	beq.w	1bd92 <d_special_name+0x6e>
   1c02e:	68e3      	ldr	r3, [r4, #12]
   1c030:	781b      	ldrb	r3, [r3, #0]
   1c032:	2b47      	cmp	r3, #71	; 0x47
   1c034:	f000 80a1 	beq.w	1c17a <d_special_name+0x456>
   1c038:	2b54      	cmp	r3, #84	; 0x54
   1c03a:	f000 809e 	beq.w	1c17a <d_special_name+0x456>
   1c03e:	2100      	movs	r1, #0
   1c040:	4620      	mov	r0, r4
   1c042:	f000 f9f7 	bl	1c434 <d_encoding.part.0>
   1c046:	4602      	mov	r2, r0
   1c048:	2300      	movs	r3, #0
   1c04a:	210f      	movs	r1, #15
   1c04c:	e76b      	b.n	1bf26 <d_special_name+0x202>
   1c04e:	2176      	movs	r1, #118	; 0x76
   1c050:	f7fd fef4 	bl	19e3c <d_call_offset>
   1c054:	2800      	cmp	r0, #0
   1c056:	f43f ae9c 	beq.w	1bd92 <d_special_name+0x6e>
   1c05a:	68e3      	ldr	r3, [r4, #12]
   1c05c:	781b      	ldrb	r3, [r3, #0]
   1c05e:	2b47      	cmp	r3, #71	; 0x47
   1c060:	f000 8086 	beq.w	1c170 <d_special_name+0x44c>
   1c064:	2b54      	cmp	r3, #84	; 0x54
   1c066:	f000 8083 	beq.w	1c170 <d_special_name+0x44c>
   1c06a:	2100      	movs	r1, #0
   1c06c:	4620      	mov	r0, r4
   1c06e:	f000 f9e1 	bl	1c434 <d_encoding.part.0>
   1c072:	4602      	mov	r2, r0
   1c074:	2300      	movs	r3, #0
   1c076:	2110      	movs	r1, #16
   1c078:	e755      	b.n	1bf26 <d_special_name+0x202>
   1c07a:	f000 f88d 	bl	1c198 <d_name>
   1c07e:	2300      	movs	r3, #0
   1c080:	4602      	mov	r2, r0
   1c082:	2114      	movs	r1, #20
   1c084:	e74f      	b.n	1bf26 <d_special_name+0x202>
   1c086:	310a      	adds	r1, #10
   1c088:	62c1      	str	r1, [r0, #44]	; 0x2c
   1c08a:	f7fe fa77 	bl	1a57c <d_type>
   1c08e:	2300      	movs	r3, #0
   1c090:	4602      	mov	r2, r0
   1c092:	210a      	movs	r1, #10
   1c094:	e747      	b.n	1bf26 <d_special_name+0x202>
   1c096:	310f      	adds	r1, #15
   1c098:	62c1      	str	r1, [r0, #44]	; 0x2c
   1c09a:	f7fe fa6f 	bl	1a57c <d_type>
   1c09e:	2300      	movs	r3, #0
   1c0a0:	4602      	mov	r2, r0
   1c0a2:	2109      	movs	r1, #9
   1c0a4:	e73f      	b.n	1bf26 <d_special_name+0x202>
   1c0a6:	f000 f877 	bl	1c198 <d_name>
   1c0aa:	2300      	movs	r3, #0
   1c0ac:	4602      	mov	r2, r0
   1c0ae:	2115      	movs	r1, #21
   1c0b0:	e739      	b.n	1bf26 <d_special_name+0x202>
   1c0b2:	2100      	movs	r1, #0
   1c0b4:	f7fd fec2 	bl	19e3c <d_call_offset>
   1c0b8:	2800      	cmp	r0, #0
   1c0ba:	f43f ae6a 	beq.w	1bd92 <d_special_name+0x6e>
   1c0be:	2100      	movs	r1, #0
   1c0c0:	4620      	mov	r0, r4
   1c0c2:	f7fd febb 	bl	19e3c <d_call_offset>
   1c0c6:	2800      	cmp	r0, #0
   1c0c8:	f43f ae63 	beq.w	1bd92 <d_special_name+0x6e>
   1c0cc:	68e3      	ldr	r3, [r4, #12]
   1c0ce:	781b      	ldrb	r3, [r3, #0]
   1c0d0:	2b47      	cmp	r3, #71	; 0x47
   1c0d2:	d05c      	beq.n	1c18e <d_special_name+0x46a>
   1c0d4:	2b54      	cmp	r3, #84	; 0x54
   1c0d6:	d05a      	beq.n	1c18e <d_special_name+0x46a>
   1c0d8:	2100      	movs	r1, #0
   1c0da:	4620      	mov	r0, r4
   1c0dc:	f000 f9aa 	bl	1c434 <d_encoding.part.0>
   1c0e0:	4602      	mov	r2, r0
   1c0e2:	2300      	movs	r3, #0
   1c0e4:	2111      	movs	r1, #17
   1c0e6:	e71e      	b.n	1bf26 <d_special_name+0x202>
   1c0e8:	f7fe fa48 	bl	1a57c <d_type>
   1c0ec:	2300      	movs	r3, #0
   1c0ee:	4602      	mov	r2, r0
   1c0f0:	2112      	movs	r1, #18
   1c0f2:	e718      	b.n	1bf26 <d_special_name+0x202>
   1c0f4:	f7fe fa42 	bl	1a57c <d_type>
   1c0f8:	2300      	movs	r3, #0
   1c0fa:	4602      	mov	r2, r0
   1c0fc:	210c      	movs	r1, #12
   1c0fe:	e712      	b.n	1bf26 <d_special_name+0x202>
   1c100:	f7fe fa3c 	bl	1a57c <d_type>
   1c104:	2300      	movs	r3, #0
   1c106:	4602      	mov	r2, r0
   1c108:	210d      	movs	r1, #13
   1c10a:	e70c      	b.n	1bf26 <d_special_name+0x202>
   1c10c:	46b4      	mov	ip, r6
   1c10e:	2100      	movs	r1, #0
   1c110:	e004      	b.n	1c11c <d_special_name+0x3f8>
   1c112:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
   1c116:	b123      	cbz	r3, 1c122 <d_special_name+0x3fe>
   1c118:	2b24      	cmp	r3, #36	; 0x24
   1c11a:	d002      	beq.n	1c122 <d_special_name+0x3fe>
   1c11c:	3101      	adds	r1, #1
   1c11e:	42a9      	cmp	r1, r5
   1c120:	dbf7      	blt.n	1c112 <d_special_name+0x3ee>
   1c122:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
   1c126:	4283      	cmp	r3, r0
   1c128:	da1c      	bge.n	1c164 <d_special_name+0x440>
   1c12a:	6920      	ldr	r0, [r4, #16]
   1c12c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1c130:	3301      	adds	r3, #1
   1c132:	6163      	str	r3, [r4, #20]
   1c134:	eb00 038c 	add.w	r3, r0, ip, lsl #2
   1c138:	e9c3 7701 	strd	r7, r7, [r3, #4]
   1c13c:	f800 702c 	strb.w	r7, [r0, ip, lsl #2]
   1c140:	e9c3 6103 	strd	r6, r1, [r3, #12]
   1c144:	68e6      	ldr	r6, [r4, #12]
   1c146:	1a6d      	subs	r5, r5, r1
   1c148:	440e      	add	r6, r1
   1c14a:	e65d      	b.n	1be08 <d_special_name+0xe4>
   1c14c:	461a      	mov	r2, r3
   1c14e:	e666      	b.n	1be1e <d_special_name+0xfa>
   1c150:	212e      	movs	r1, #46	; 0x2e
   1c152:	e646      	b.n	1bde2 <d_special_name+0xbe>
   1c154:	212f      	movs	r1, #47	; 0x2f
   1c156:	e644      	b.n	1bde2 <d_special_name+0xbe>
   1c158:	2100      	movs	r1, #0
   1c15a:	4620      	mov	r0, r4
   1c15c:	f000 f96a 	bl	1c434 <d_encoding.part.0>
   1c160:	4602      	mov	r2, r0
   1c162:	e6f9      	b.n	1bf58 <d_special_name+0x234>
   1c164:	68e3      	ldr	r3, [r4, #12]
   1c166:	440b      	add	r3, r1
   1c168:	60e3      	str	r3, [r4, #12]
   1c16a:	e612      	b.n	1bd92 <d_special_name+0x6e>
   1c16c:	2500      	movs	r5, #0
   1c16e:	e711      	b.n	1bf94 <d_special_name+0x270>
   1c170:	4620      	mov	r0, r4
   1c172:	f7ff fdd7 	bl	1bd24 <d_special_name>
   1c176:	4602      	mov	r2, r0
   1c178:	e77c      	b.n	1c074 <d_special_name+0x350>
   1c17a:	4620      	mov	r0, r4
   1c17c:	f7ff fdd2 	bl	1bd24 <d_special_name>
   1c180:	4602      	mov	r2, r0
   1c182:	e761      	b.n	1c048 <d_special_name+0x324>
   1c184:	4620      	mov	r0, r4
   1c186:	f7ff fdcd 	bl	1bd24 <d_special_name>
   1c18a:	4602      	mov	r2, r0
   1c18c:	e720      	b.n	1bfd0 <d_special_name+0x2ac>
   1c18e:	4620      	mov	r0, r4
   1c190:	f7ff fdc8 	bl	1bd24 <d_special_name>
   1c194:	4602      	mov	r2, r0
   1c196:	e7a4      	b.n	1c0e2 <d_special_name+0x3be>

0001c198 <d_name>:
   1c198:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c19a:	68c2      	ldr	r2, [r0, #12]
   1c19c:	7813      	ldrb	r3, [r2, #0]
   1c19e:	3b4e      	subs	r3, #78	; 0x4e
   1c1a0:	b083      	sub	sp, #12
   1c1a2:	4604      	mov	r4, r0
   1c1a4:	2b0c      	cmp	r3, #12
   1c1a6:	d808      	bhi.n	1c1ba <d_name+0x22>
   1c1a8:	e8df f003 	tbb	[pc, r3]
   1c1ac:	07070731 	.word	0x07070731
   1c1b0:	12071707 	.word	0x12071707
   1c1b4:	07070707 	.word	0x07070707
   1c1b8:	55          	.byte	0x55
   1c1b9:	00          	.byte	0x00
   1c1ba:	f7fe ff35 	bl	1b028 <d_unqualified_name>
   1c1be:	68e3      	ldr	r3, [r4, #12]
   1c1c0:	781a      	ldrb	r2, [r3, #0]
   1c1c2:	2a49      	cmp	r2, #73	; 0x49
   1c1c4:	4605      	mov	r5, r0
   1c1c6:	f000 80d2 	beq.w	1c36e <d_name+0x1d6>
   1c1ca:	4628      	mov	r0, r5
   1c1cc:	b003      	add	sp, #12
   1c1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c1d0:	b003      	add	sp, #12
   1c1d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c1d6:	f7fe bf27 	b.w	1b028 <d_unqualified_name>
   1c1da:	7853      	ldrb	r3, [r2, #1]
   1c1dc:	2b74      	cmp	r3, #116	; 0x74
   1c1de:	f000 808e 	beq.w	1c2fe <d_name+0x166>
   1c1e2:	2100      	movs	r1, #0
   1c1e4:	f7fe f900 	bl	1a3e8 <d_substitution>
   1c1e8:	68e3      	ldr	r3, [r4, #12]
   1c1ea:	781a      	ldrb	r2, [r3, #0]
   1c1ec:	2a49      	cmp	r2, #73	; 0x49
   1c1ee:	4605      	mov	r5, r0
   1c1f0:	d1eb      	bne.n	1c1ca <d_name+0x32>
   1c1f2:	3301      	adds	r3, #1
   1c1f4:	60e3      	str	r3, [r4, #12]
   1c1f6:	4620      	mov	r0, r4
   1c1f8:	f7ff f972 	bl	1b4e0 <d_template_args_1>
   1c1fc:	4603      	mov	r3, r0
   1c1fe:	462a      	mov	r2, r5
   1c200:	2104      	movs	r1, #4
   1c202:	4620      	mov	r0, r4
   1c204:	b003      	add	sp, #12
   1c206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1c20a:	f7fd bd65 	b.w	19cd8 <d_make_comp>
   1c20e:	3201      	adds	r2, #1
   1c210:	60c2      	str	r2, [r0, #12]
   1c212:	a901      	add	r1, sp, #4
   1c214:	2201      	movs	r2, #1
   1c216:	f7ff fcdb 	bl	1bbd0 <d_cv_qualifiers>
   1c21a:	4605      	mov	r5, r0
   1c21c:	2800      	cmp	r0, #0
   1c21e:	f000 80b7 	beq.w	1c390 <d_name+0x1f8>
   1c222:	2100      	movs	r1, #0
   1c224:	4620      	mov	r0, r4
   1c226:	f7fd fe2d 	bl	19e84 <d_ref_qualifier>
   1c22a:	2101      	movs	r1, #1
   1c22c:	4606      	mov	r6, r0
   1c22e:	4620      	mov	r0, r4
   1c230:	f7ff f988 	bl	1b544 <d_prefix>
   1c234:	6028      	str	r0, [r5, #0]
   1c236:	2800      	cmp	r0, #0
   1c238:	f000 80aa 	beq.w	1c390 <d_name+0x1f8>
   1c23c:	b116      	cbz	r6, 1c244 <d_name+0xac>
   1c23e:	9b01      	ldr	r3, [sp, #4]
   1c240:	60f3      	str	r3, [r6, #12]
   1c242:	9601      	str	r6, [sp, #4]
   1c244:	68e3      	ldr	r3, [r4, #12]
   1c246:	781a      	ldrb	r2, [r3, #0]
   1c248:	2a45      	cmp	r2, #69	; 0x45
   1c24a:	f040 80a1 	bne.w	1c390 <d_name+0x1f8>
   1c24e:	3301      	adds	r3, #1
   1c250:	9d01      	ldr	r5, [sp, #4]
   1c252:	60e3      	str	r3, [r4, #12]
   1c254:	e7b9      	b.n	1c1ca <d_name+0x32>
   1c256:	1c53      	adds	r3, r2, #1
   1c258:	60c3      	str	r3, [r0, #12]
   1c25a:	7853      	ldrb	r3, [r2, #1]
   1c25c:	2b47      	cmp	r3, #71	; 0x47
   1c25e:	d002      	beq.n	1c266 <d_name+0xce>
   1c260:	2b54      	cmp	r3, #84	; 0x54
   1c262:	f040 8099 	bne.w	1c398 <d_name+0x200>
   1c266:	4620      	mov	r0, r4
   1c268:	f7ff fd5c 	bl	1bd24 <d_special_name>
   1c26c:	4605      	mov	r5, r0
   1c26e:	2d00      	cmp	r5, #0
   1c270:	f000 808e 	beq.w	1c390 <d_name+0x1f8>
   1c274:	68e3      	ldr	r3, [r4, #12]
   1c276:	781a      	ldrb	r2, [r3, #0]
   1c278:	2a45      	cmp	r2, #69	; 0x45
   1c27a:	f040 8089 	bne.w	1c390 <d_name+0x1f8>
   1c27e:	1c5a      	adds	r2, r3, #1
   1c280:	60e2      	str	r2, [r4, #12]
   1c282:	785a      	ldrb	r2, [r3, #1]
   1c284:	2a73      	cmp	r2, #115	; 0x73
   1c286:	f000 80ad 	beq.w	1c3e4 <d_name+0x24c>
   1c28a:	2a64      	cmp	r2, #100	; 0x64
   1c28c:	f000 8089 	beq.w	1c3a2 <d_name+0x20a>
   1c290:	4620      	mov	r0, r4
   1c292:	f7ff ff81 	bl	1c198 <d_name>
   1c296:	4603      	mov	r3, r0
   1c298:	b328      	cbz	r0, 1c2e6 <d_name+0x14e>
   1c29a:	7802      	ldrb	r2, [r0, #0]
   1c29c:	2a47      	cmp	r2, #71	; 0x47
   1c29e:	d022      	beq.n	1c2e6 <d_name+0x14e>
   1c2a0:	2a49      	cmp	r2, #73	; 0x49
   1c2a2:	d020      	beq.n	1c2e6 <d_name+0x14e>
   1c2a4:	461f      	mov	r7, r3
   1c2a6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c2aa:	4620      	mov	r0, r4
   1c2ac:	f7fd fe7e 	bl	19fac <d_discriminator>
   1c2b0:	2800      	cmp	r0, #0
   1c2b2:	d06d      	beq.n	1c390 <d_name+0x1f8>
   1c2b4:	1c73      	adds	r3, r6, #1
   1c2b6:	bf08      	it	eq
   1c2b8:	463b      	moveq	r3, r7
   1c2ba:	d014      	beq.n	1c2e6 <d_name+0x14e>
   1c2bc:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1c2c0:	429a      	cmp	r2, r3
   1c2c2:	f280 80b0 	bge.w	1c426 <d_name+0x28e>
   1c2c6:	6921      	ldr	r1, [r4, #16]
   1c2c8:	eb02 0082 	add.w	r0, r2, r2, lsl #2
   1c2cc:	eb01 0380 	add.w	r3, r1, r0, lsl #2
   1c2d0:	3201      	adds	r2, #1
   1c2d2:	f04f 0c00 	mov.w	ip, #0
   1c2d6:	e9c3 cc01 	strd	ip, ip, [r3, #4]
   1c2da:	6162      	str	r2, [r4, #20]
   1c2dc:	2248      	movs	r2, #72	; 0x48
   1c2de:	f801 2020 	strb.w	r2, [r1, r0, lsl #2]
   1c2e2:	e9c3 7603 	strd	r7, r6, [r3, #12]
   1c2e6:	782a      	ldrb	r2, [r5, #0]
   1c2e8:	2a03      	cmp	r2, #3
   1c2ea:	d105      	bne.n	1c2f8 <d_name+0x160>
   1c2ec:	692a      	ldr	r2, [r5, #16]
   1c2ee:	7811      	ldrb	r1, [r2, #0]
   1c2f0:	2929      	cmp	r1, #41	; 0x29
   1c2f2:	bf04      	itt	eq
   1c2f4:	2100      	moveq	r1, #0
   1c2f6:	60d1      	streq	r1, [r2, #12]
   1c2f8:	462a      	mov	r2, r5
   1c2fa:	2102      	movs	r1, #2
   1c2fc:	e781      	b.n	1c202 <d_name+0x6a>
   1c2fe:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
   1c302:	3202      	adds	r2, #2
   1c304:	428b      	cmp	r3, r1
   1c306:	60c2      	str	r2, [r0, #12]
   1c308:	f280 8088 	bge.w	1c41c <d_name+0x284>
   1c30c:	6902      	ldr	r2, [r0, #16]
   1c30e:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   1c312:	00a9      	lsls	r1, r5, #2
   1c314:	3301      	adds	r3, #1
   1c316:	6143      	str	r3, [r0, #20]
   1c318:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1c31c:	2300      	movs	r3, #0
   1c31e:	e9c5 3301 	strd	r3, r3, [r5, #4]
   1c322:	5453      	strb	r3, [r2, r1]
   1c324:	4a41      	ldr	r2, [pc, #260]	; (1c42c <d_name+0x294>)
   1c326:	2303      	movs	r3, #3
   1c328:	e9c5 2303 	strd	r2, r3, [r5, #12]
   1c32c:	4620      	mov	r0, r4
   1c32e:	f7fe fe7b 	bl	1b028 <d_unqualified_name>
   1c332:	462a      	mov	r2, r5
   1c334:	4603      	mov	r3, r0
   1c336:	2101      	movs	r1, #1
   1c338:	4620      	mov	r0, r4
   1c33a:	f7fd fccd 	bl	19cd8 <d_make_comp>
   1c33e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   1c340:	68e3      	ldr	r3, [r4, #12]
   1c342:	3203      	adds	r2, #3
   1c344:	62e2      	str	r2, [r4, #44]	; 0x2c
   1c346:	781a      	ldrb	r2, [r3, #0]
   1c348:	2a49      	cmp	r2, #73	; 0x49
   1c34a:	4605      	mov	r5, r0
   1c34c:	f47f af3d 	bne.w	1c1ca <d_name+0x32>
   1c350:	b1f0      	cbz	r0, 1c390 <d_name+0x1f8>
   1c352:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1c356:	428a      	cmp	r2, r1
   1c358:	da1a      	bge.n	1c390 <d_name+0x1f8>
   1c35a:	69e1      	ldr	r1, [r4, #28]
   1c35c:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1c360:	3201      	adds	r2, #1
   1c362:	6222      	str	r2, [r4, #32]
   1c364:	781a      	ldrb	r2, [r3, #0]
   1c366:	3a49      	subs	r2, #73	; 0x49
   1c368:	2a01      	cmp	r2, #1
   1c36a:	d80f      	bhi.n	1c38c <d_name+0x1f4>
   1c36c:	e741      	b.n	1c1f2 <d_name+0x5a>
   1c36e:	b178      	cbz	r0, 1c390 <d_name+0x1f8>
   1c370:	e9d4 2108 	ldrd	r2, r1, [r4, #32]
   1c374:	428a      	cmp	r2, r1
   1c376:	da0b      	bge.n	1c390 <d_name+0x1f8>
   1c378:	69e1      	ldr	r1, [r4, #28]
   1c37a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   1c37e:	3201      	adds	r2, #1
   1c380:	6222      	str	r2, [r4, #32]
   1c382:	781a      	ldrb	r2, [r3, #0]
   1c384:	3a49      	subs	r2, #73	; 0x49
   1c386:	2a01      	cmp	r2, #1
   1c388:	f67f af33 	bls.w	1c1f2 <d_name+0x5a>
   1c38c:	2300      	movs	r3, #0
   1c38e:	e736      	b.n	1c1fe <d_name+0x66>
   1c390:	2500      	movs	r5, #0
   1c392:	4628      	mov	r0, r5
   1c394:	b003      	add	sp, #12
   1c396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c398:	2100      	movs	r1, #0
   1c39a:	f000 f84b 	bl	1c434 <d_encoding.part.0>
   1c39e:	4605      	mov	r5, r0
   1c3a0:	e765      	b.n	1c26e <d_name+0xd6>
   1c3a2:	1c9a      	adds	r2, r3, #2
   1c3a4:	60e2      	str	r2, [r4, #12]
   1c3a6:	789a      	ldrb	r2, [r3, #2]
   1c3a8:	2a5f      	cmp	r2, #95	; 0x5f
   1c3aa:	d039      	beq.n	1c420 <d_name+0x288>
   1c3ac:	2a6e      	cmp	r2, #110	; 0x6e
   1c3ae:	d0ef      	beq.n	1c390 <d_name+0x1f8>
   1c3b0:	4620      	mov	r0, r4
   1c3b2:	f7fd fd09 	bl	19dc8 <d_number>
   1c3b6:	1c46      	adds	r6, r0, #1
   1c3b8:	d4ea      	bmi.n	1c390 <d_name+0x1f8>
   1c3ba:	68e3      	ldr	r3, [r4, #12]
   1c3bc:	781a      	ldrb	r2, [r3, #0]
   1c3be:	2a5f      	cmp	r2, #95	; 0x5f
   1c3c0:	d1e6      	bne.n	1c390 <d_name+0x1f8>
   1c3c2:	3301      	adds	r3, #1
   1c3c4:	60e3      	str	r3, [r4, #12]
   1c3c6:	4620      	mov	r0, r4
   1c3c8:	f7ff fee6 	bl	1c198 <d_name>
   1c3cc:	4607      	mov	r7, r0
   1c3ce:	2800      	cmp	r0, #0
   1c3d0:	f43f af74 	beq.w	1c2bc <d_name+0x124>
   1c3d4:	783b      	ldrb	r3, [r7, #0]
   1c3d6:	2b47      	cmp	r3, #71	; 0x47
   1c3d8:	f43f af70 	beq.w	1c2bc <d_name+0x124>
   1c3dc:	2b49      	cmp	r3, #73	; 0x49
   1c3de:	f43f af6d 	beq.w	1c2bc <d_name+0x124>
   1c3e2:	e762      	b.n	1c2aa <d_name+0x112>
   1c3e4:	3302      	adds	r3, #2
   1c3e6:	60e3      	str	r3, [r4, #12]
   1c3e8:	4620      	mov	r0, r4
   1c3ea:	f7fd fddf 	bl	19fac <d_discriminator>
   1c3ee:	2800      	cmp	r0, #0
   1c3f0:	d0ce      	beq.n	1c390 <d_name+0x1f8>
   1c3f2:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
   1c3f6:	429a      	cmp	r2, r3
   1c3f8:	da15      	bge.n	1c426 <d_name+0x28e>
   1c3fa:	6921      	ldr	r1, [r4, #16]
   1c3fc:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1c400:	0098      	lsls	r0, r3, #2
   1c402:	3201      	adds	r2, #1
   1c404:	6162      	str	r2, [r4, #20]
   1c406:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   1c40a:	2200      	movs	r2, #0
   1c40c:	e9c3 2201 	strd	r2, r2, [r3, #4]
   1c410:	540a      	strb	r2, [r1, r0]
   1c412:	4907      	ldr	r1, [pc, #28]	; (1c430 <d_name+0x298>)
   1c414:	220e      	movs	r2, #14
   1c416:	e9c3 1203 	strd	r1, r2, [r3, #12]
   1c41a:	e764      	b.n	1c2e6 <d_name+0x14e>
   1c41c:	2500      	movs	r5, #0
   1c41e:	e785      	b.n	1c32c <d_name+0x194>
   1c420:	3303      	adds	r3, #3
   1c422:	2600      	movs	r6, #0
   1c424:	e7ce      	b.n	1c3c4 <d_name+0x22c>
   1c426:	2300      	movs	r3, #0
   1c428:	e75d      	b.n	1c2e6 <d_name+0x14e>
   1c42a:	bf00      	nop
   1c42c:	2000217c 	.word	0x2000217c
   1c430:	2000216c 	.word	0x2000216c

0001c434 <d_encoding.part.0>:
   1c434:	b570      	push	{r4, r5, r6, lr}
   1c436:	4605      	mov	r5, r0
   1c438:	460e      	mov	r6, r1
   1c43a:	f7ff fead 	bl	1c198 <d_name>
   1c43e:	b300      	cbz	r0, 1c482 <d_encoding.part.0+0x4e>
   1c440:	4604      	mov	r4, r0
   1c442:	b30e      	cbz	r6, 1c488 <d_encoding.part.0+0x54>
   1c444:	68ab      	ldr	r3, [r5, #8]
   1c446:	07db      	lsls	r3, r3, #31
   1c448:	d41e      	bmi.n	1c488 <d_encoding.part.0+0x54>
   1c44a:	7823      	ldrb	r3, [r4, #0]
   1c44c:	2b4e      	cmp	r3, #78	; 0x4e
   1c44e:	f1a3 011c 	sub.w	r1, r3, #28
   1c452:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1c456:	d03a      	beq.n	1c4ce <d_encoding.part.0+0x9a>
   1c458:	d837      	bhi.n	1c4ca <d_encoding.part.0+0x96>
   1c45a:	2904      	cmp	r1, #4
   1c45c:	d937      	bls.n	1c4ce <d_encoding.part.0+0x9a>
   1c45e:	2b02      	cmp	r3, #2
   1c460:	d110      	bne.n	1c484 <d_encoding.part.0+0x50>
   1c462:	6923      	ldr	r3, [r4, #16]
   1c464:	b16b      	cbz	r3, 1c482 <d_encoding.part.0+0x4e>
   1c466:	781a      	ldrb	r2, [r3, #0]
   1c468:	2a4e      	cmp	r2, #78	; 0x4e
   1c46a:	f1a2 001c 	sub.w	r0, r2, #28
   1c46e:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
   1c472:	d002      	beq.n	1c47a <d_encoding.part.0+0x46>
   1c474:	d83d      	bhi.n	1c4f2 <d_encoding.part.0+0xbe>
   1c476:	2804      	cmp	r0, #4
   1c478:	d804      	bhi.n	1c484 <d_encoding.part.0+0x50>
   1c47a:	68db      	ldr	r3, [r3, #12]
   1c47c:	6123      	str	r3, [r4, #16]
   1c47e:	2b00      	cmp	r3, #0
   1c480:	d1f1      	bne.n	1c466 <d_encoding.part.0+0x32>
   1c482:	2400      	movs	r4, #0
   1c484:	4620      	mov	r0, r4
   1c486:	bd70      	pop	{r4, r5, r6, pc}
   1c488:	68eb      	ldr	r3, [r5, #12]
   1c48a:	781b      	ldrb	r3, [r3, #0]
   1c48c:	2b00      	cmp	r3, #0
   1c48e:	d0f9      	beq.n	1c484 <d_encoding.part.0+0x50>
   1c490:	2b45      	cmp	r3, #69	; 0x45
   1c492:	d0f7      	beq.n	1c484 <d_encoding.part.0+0x50>
   1c494:	4621      	mov	r1, r4
   1c496:	780b      	ldrb	r3, [r1, #0]
   1c498:	2b04      	cmp	r3, #4
   1c49a:	d02d      	beq.n	1c4f8 <d_encoding.part.0+0xc4>
   1c49c:	d81e      	bhi.n	1c4dc <d_encoding.part.0+0xa8>
   1c49e:	2b02      	cmp	r3, #2
   1c4a0:	d11a      	bne.n	1c4d8 <d_encoding.part.0+0xa4>
   1c4a2:	6909      	ldr	r1, [r1, #16]
   1c4a4:	2900      	cmp	r1, #0
   1c4a6:	d1f6      	bne.n	1c496 <d_encoding.part.0+0x62>
   1c4a8:	4628      	mov	r0, r5
   1c4aa:	f7fe fcdf 	bl	1ae6c <d_bare_function_type>
   1c4ae:	2800      	cmp	r0, #0
   1c4b0:	d0e7      	beq.n	1c482 <d_encoding.part.0+0x4e>
   1c4b2:	b916      	cbnz	r6, 1c4ba <d_encoding.part.0+0x86>
   1c4b4:	7823      	ldrb	r3, [r4, #0]
   1c4b6:	2b02      	cmp	r3, #2
   1c4b8:	d032      	beq.n	1c520 <d_encoding.part.0+0xec>
   1c4ba:	4603      	mov	r3, r0
   1c4bc:	4622      	mov	r2, r4
   1c4be:	4628      	mov	r0, r5
   1c4c0:	2103      	movs	r1, #3
   1c4c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1c4c6:	f7fd bc07 	b.w	19cd8 <d_make_comp>
   1c4ca:	2a01      	cmp	r2, #1
   1c4cc:	d8da      	bhi.n	1c484 <d_encoding.part.0+0x50>
   1c4ce:	68e4      	ldr	r4, [r4, #12]
   1c4d0:	e7bb      	b.n	1c44a <d_encoding.part.0+0x16>
   1c4d2:	3b1c      	subs	r3, #28
   1c4d4:	2b04      	cmp	r3, #4
   1c4d6:	d908      	bls.n	1c4ea <d_encoding.part.0+0xb6>
   1c4d8:	2100      	movs	r1, #0
   1c4da:	e7e5      	b.n	1c4a8 <d_encoding.part.0+0x74>
   1c4dc:	2b4e      	cmp	r3, #78	; 0x4e
   1c4de:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1c4e2:	d002      	beq.n	1c4ea <d_encoding.part.0+0xb6>
   1c4e4:	d9f5      	bls.n	1c4d2 <d_encoding.part.0+0x9e>
   1c4e6:	2a01      	cmp	r2, #1
   1c4e8:	d8f6      	bhi.n	1c4d8 <d_encoding.part.0+0xa4>
   1c4ea:	68c9      	ldr	r1, [r1, #12]
   1c4ec:	2900      	cmp	r1, #0
   1c4ee:	d1d2      	bne.n	1c496 <d_encoding.part.0+0x62>
   1c4f0:	e7da      	b.n	1c4a8 <d_encoding.part.0+0x74>
   1c4f2:	2901      	cmp	r1, #1
   1c4f4:	d8c6      	bhi.n	1c484 <d_encoding.part.0+0x50>
   1c4f6:	e7c0      	b.n	1c47a <d_encoding.part.0+0x46>
   1c4f8:	68cb      	ldr	r3, [r1, #12]
   1c4fa:	b15b      	cbz	r3, 1c514 <d_encoding.part.0+0xe0>
   1c4fc:	7819      	ldrb	r1, [r3, #0]
   1c4fe:	2908      	cmp	r1, #8
   1c500:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   1c504:	d808      	bhi.n	1c518 <d_encoding.part.0+0xe4>
   1c506:	2906      	cmp	r1, #6
   1c508:	d8e6      	bhi.n	1c4d8 <d_encoding.part.0+0xa4>
   1c50a:	2a01      	cmp	r2, #1
   1c50c:	d802      	bhi.n	1c514 <d_encoding.part.0+0xe0>
   1c50e:	691b      	ldr	r3, [r3, #16]
   1c510:	2b00      	cmp	r3, #0
   1c512:	d1f3      	bne.n	1c4fc <d_encoding.part.0+0xc8>
   1c514:	2101      	movs	r1, #1
   1c516:	e7c7      	b.n	1c4a8 <d_encoding.part.0+0x74>
   1c518:	3935      	subs	r1, #53	; 0x35
   1c51a:	bf18      	it	ne
   1c51c:	2101      	movne	r1, #1
   1c51e:	e7c3      	b.n	1c4a8 <d_encoding.part.0+0x74>
   1c520:	7803      	ldrb	r3, [r0, #0]
   1c522:	2b29      	cmp	r3, #41	; 0x29
   1c524:	bf08      	it	eq
   1c526:	60c6      	streq	r6, [r0, #12]
   1c528:	e7c7      	b.n	1c4ba <d_encoding.part.0+0x86>
   1c52a:	bf00      	nop

0001c52c <d_print_comp_inner>:
   1c52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c530:	4604      	mov	r4, r0
   1c532:	b095      	sub	sp, #84	; 0x54
   1c534:	2a00      	cmp	r2, #0
   1c536:	d066      	beq.n	1c606 <d_print_comp_inner+0xda>
   1c538:	f8d0 5118 	ldr.w	r5, [r0, #280]	; 0x118
   1c53c:	2d00      	cmp	r5, #0
   1c53e:	d165      	bne.n	1c60c <d_print_comp_inner+0xe0>
   1c540:	7817      	ldrb	r7, [r2, #0]
   1c542:	4616      	mov	r6, r2
   1c544:	2f51      	cmp	r7, #81	; 0x51
   1c546:	d85e      	bhi.n	1c606 <d_print_comp_inner+0xda>
   1c548:	e8df f017 	tbh	[pc, r7, lsl #1]
   1c54c:	011b095c 	.word	0x011b095c
   1c550:	04ee011b 	.word	0x04ee011b
   1c554:	02de0898 	.word	0x02de0898
   1c558:	0097044a 	.word	0x0097044a
   1c55c:	08f9008b 	.word	0x08f9008b
   1c560:	03a608d2 	.word	0x03a608d2
   1c564:	019101b8 	.word	0x019101b8
   1c568:	0747016a 	.word	0x0747016a
   1c56c:	06f90720 	.word	0x06f90720
   1c570:	07bc07e3 	.word	0x07bc07e3
   1c574:	076e0795 	.word	0x076e0795
   1c578:	0423037f 	.word	0x0423037f
   1c57c:	009903f8 	.word	0x009903f8
   1c580:	00990099 	.word	0x00990099
   1c584:	00630063 	.word	0x00630063
   1c588:	00630063 	.word	0x00630063
   1c58c:	00630063 	.word	0x00630063
   1c590:	00c50063 	.word	0x00c50063
   1c594:	006300c5 	.word	0x006300c5
   1c598:	09870063 	.word	0x09870063
   1c59c:	04c80083 	.word	0x04c80083
   1c5a0:	00af068d 	.word	0x00af068d
   1c5a4:	00af066b 	.word	0x00af066b
   1c5a8:	00e600e6 	.word	0x00e600e6
   1c5ac:	03340358 	.word	0x03340358
   1c5b0:	0831030a 	.word	0x0831030a
   1c5b4:	080a005d 	.word	0x080a005d
   1c5b8:	06460663 	.word	0x06460663
   1c5bc:	005d05eb 	.word	0x005d05eb
   1c5c0:	005d0920 	.word	0x005d0920
   1c5c4:	012a005d 	.word	0x012a005d
   1c5c8:	0455012a 	.word	0x0455012a
   1c5cc:	0858085e 	.word	0x0858085e
   1c5d0:	047804ba 	.word	0x047804ba
   1c5d4:	05c4054f 	.word	0x05c4054f
   1c5d8:	0576059d 	.word	0x0576059d
   1c5dc:	02a4005d 	.word	0x02a4005d
   1c5e0:	0256027d 	.word	0x0256027d
   1c5e4:	01df020a 	.word	0x01df020a
   1c5e8:	03cd0063 	.word	0x03cd0063
   1c5ec:	00630063 	.word	0x00630063
   1c5f0:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1c5f4:	2900      	cmp	r1, #0
   1c5f6:	f2c1 8425 	blt.w	1de44 <d_print_comp_inner+0x1918>
   1c5fa:	f7fd fcfb 	bl	19ff4 <d_index_template_argument.part.0>
   1c5fe:	4602      	mov	r2, r0
   1c600:	2800      	cmp	r0, #0
   1c602:	f041 841f 	bne.w	1de44 <d_print_comp_inner+0x1918>
   1c606:	2301      	movs	r3, #1
   1c608:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1c60c:	b015      	add	sp, #84	; 0x54
   1c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c612:	2200      	movs	r2, #0
   1c614:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1c618:	9304      	str	r3, [sp, #16]
   1c61a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1c61e:	9307      	str	r3, [sp, #28]
   1c620:	ab04      	add	r3, sp, #16
   1c622:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1c626:	2300      	movs	r3, #0
   1c628:	9605      	str	r6, [sp, #20]
   1c62a:	9306      	str	r3, [sp, #24]
   1c62c:	2a00      	cmp	r2, #0
   1c62e:	f001 87e6 	beq.w	1e5fe <d_print_comp_inner+0x20d2>
   1c632:	2111      	movs	r1, #17
   1c634:	4620      	mov	r0, r4
   1c636:	f001 fff3 	bl	1e620 <d_print_comp>
   1c63a:	9b06      	ldr	r3, [sp, #24]
   1c63c:	2b00      	cmp	r3, #0
   1c63e:	f001 82e9 	beq.w	1dc14 <d_print_comp_inner+0x16e8>
   1c642:	9b04      	ldr	r3, [sp, #16]
   1c644:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1c648:	2d00      	cmp	r5, #0
   1c64a:	d0df      	beq.n	1c60c <d_print_comp_inner+0xe0>
   1c64c:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
   1c650:	e7dc      	b.n	1c60c <d_print_comp_inner+0xe0>
   1c652:	68f2      	ldr	r2, [r6, #12]
   1c654:	2111      	movs	r1, #17
   1c656:	4620      	mov	r0, r4
   1c658:	b015      	add	sp, #84	; 0x54
   1c65a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c65e:	f001 bfdf 	b.w	1e620 <d_print_comp>
   1c662:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c666:	29ff      	cmp	r1, #255	; 0xff
   1c668:	f001 855f 	beq.w	1e12a <d_print_comp_inner+0x1bfe>
   1c66c:	1c4a      	adds	r2, r1, #1
   1c66e:	237e      	movs	r3, #126	; 0x7e
   1c670:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1c674:	5463      	strb	r3, [r4, r1]
   1c676:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c67a:	6932      	ldr	r2, [r6, #16]
   1c67c:	e7ea      	b.n	1c654 <d_print_comp_inner+0x128>
   1c67e:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1c682:	f1bc 0f00 	cmp.w	ip, #0
   1c686:	d00e      	beq.n	1c6a6 <d_print_comp_inner+0x17a>
   1c688:	4663      	mov	r3, ip
   1c68a:	6899      	ldr	r1, [r3, #8]
   1c68c:	b941      	cbnz	r1, 1c6a0 <d_print_comp_inner+0x174>
   1c68e:	685a      	ldr	r2, [r3, #4]
   1c690:	7812      	ldrb	r2, [r2, #0]
   1c692:	f1a2 0019 	sub.w	r0, r2, #25
   1c696:	2802      	cmp	r0, #2
   1c698:	f201 84ef 	bhi.w	1e07a <d_print_comp_inner+0x1b4e>
   1c69c:	4297      	cmp	r7, r2
   1c69e:	d0d8      	beq.n	1c652 <d_print_comp_inner+0x126>
   1c6a0:	681b      	ldr	r3, [r3, #0]
   1c6a2:	2b00      	cmp	r3, #0
   1c6a4:	d1f1      	bne.n	1c68a <d_print_comp_inner+0x15e>
   1c6a6:	68f2      	ldr	r2, [r6, #12]
   1c6a8:	e02b      	b.n	1c702 <d_print_comp_inner+0x1d6>
   1c6aa:	e9d0 3144 	ldrd	r3, r1, [r0, #272]	; 0x110
   1c6ae:	aa04      	add	r2, sp, #16
   1c6b0:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1c6b4:	2200      	movs	r2, #0
   1c6b6:	e9cd 1604 	strd	r1, r6, [sp, #16]
   1c6ba:	9206      	str	r2, [sp, #24]
   1c6bc:	2111      	movs	r1, #17
   1c6be:	6932      	ldr	r2, [r6, #16]
   1c6c0:	9307      	str	r3, [sp, #28]
   1c6c2:	f001 ffad 	bl	1e620 <d_print_comp>
   1c6c6:	9b06      	ldr	r3, [sp, #24]
   1c6c8:	2b00      	cmp	r3, #0
   1c6ca:	f001 84c3 	beq.w	1e054 <d_print_comp_inner+0x1b28>
   1c6ce:	9b04      	ldr	r3, [sp, #16]
   1c6d0:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1c6d4:	e79a      	b.n	1c60c <d_print_comp_inner+0xe0>
   1c6d6:	68d2      	ldr	r2, [r2, #12]
   1c6d8:	f8d0 5120 	ldr.w	r5, [r0, #288]	; 0x120
   1c6dc:	7813      	ldrb	r3, [r2, #0]
   1c6de:	2d00      	cmp	r5, #0
   1c6e0:	f041 8370 	bne.w	1ddc4 <d_print_comp_inner+0x1898>
   1c6e4:	2b05      	cmp	r3, #5
   1c6e6:	f001 85d2 	beq.w	1e28e <d_print_comp_inner+0x1d62>
   1c6ea:	4610      	mov	r0, r2
   1c6ec:	2b23      	cmp	r3, #35	; 0x23
   1c6ee:	f001 82d8 	beq.w	1dca2 <d_print_comp_inner+0x1776>
   1c6f2:	429f      	cmp	r7, r3
   1c6f4:	f001 82d5 	beq.w	1dca2 <d_print_comp_inner+0x1776>
   1c6f8:	2b24      	cmp	r3, #36	; 0x24
   1c6fa:	f001 860a 	beq.w	1e312 <d_print_comp_inner+0x1de6>
   1c6fe:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1c702:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   1c706:	9307      	str	r3, [sp, #28]
   1c708:	ab04      	add	r3, sp, #16
   1c70a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1c70e:	2300      	movs	r3, #0
   1c710:	e9cd c604 	strd	ip, r6, [sp, #16]
   1c714:	9306      	str	r3, [sp, #24]
   1c716:	e78c      	b.n	1c632 <d_print_comp_inner+0x106>
   1c718:	68d2      	ldr	r2, [r2, #12]
   1c71a:	b112      	cbz	r2, 1c722 <d_print_comp_inner+0x1f6>
   1c71c:	2111      	movs	r1, #17
   1c71e:	f001 ff7f 	bl	1e620 <d_print_comp>
   1c722:	6933      	ldr	r3, [r6, #16]
   1c724:	2b00      	cmp	r3, #0
   1c726:	f43f af71 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1c72a:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
   1c72e:	2dfd      	cmp	r5, #253	; 0xfd
   1c730:	f201 84a7 	bhi.w	1e082 <d_print_comp_inner+0x1b56>
   1c734:	f8df 8384 	ldr.w	r8, [pc, #900]	; 1cabc <d_print_comp_inner+0x590>
   1c738:	272c      	movs	r7, #44	; 0x2c
   1c73a:	f108 0a01 	add.w	sl, r8, #1
   1c73e:	f04f 0900 	mov.w	r9, #0
   1c742:	4629      	mov	r1, r5
   1c744:	e00b      	b.n	1c75e <d_print_comp_inner+0x232>
   1c746:	460b      	mov	r3, r1
   1c748:	3101      	adds	r1, #1
   1c74a:	45d0      	cmp	r8, sl
   1c74c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c750:	54e7      	strb	r7, [r4, r3]
   1c752:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1c756:	f001 8264 	beq.w	1dc22 <d_print_comp_inner+0x16f6>
   1c75a:	f818 7f01 	ldrb.w	r7, [r8, #1]!
   1c75e:	29ff      	cmp	r1, #255	; 0xff
   1c760:	d1f1      	bne.n	1c746 <d_print_comp_inner+0x21a>
   1c762:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c766:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c76a:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1c76e:	4620      	mov	r0, r4
   1c770:	4798      	blx	r3
   1c772:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c776:	3301      	adds	r3, #1
   1c778:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c77c:	2101      	movs	r1, #1
   1c77e:	2300      	movs	r3, #0
   1c780:	e7e3      	b.n	1c74a <d_print_comp_inner+0x21e>
   1c782:	68d2      	ldr	r2, [r2, #12]
   1c784:	2111      	movs	r1, #17
   1c786:	f001 ff4b 	bl	1e620 <d_print_comp>
   1c78a:	49c7      	ldr	r1, [pc, #796]	; (1caa8 <d_print_comp_inner+0x57c>)
   1c78c:	4620      	mov	r0, r4
   1c78e:	f7fd fd1b 	bl	1a1c8 <d_append_string>
   1c792:	6937      	ldr	r7, [r6, #16]
   1c794:	783b      	ldrb	r3, [r7, #0]
   1c796:	2b48      	cmp	r3, #72	; 0x48
   1c798:	f001 808b 	beq.w	1d8b2 <d_print_comp_inner+0x1386>
   1c79c:	463a      	mov	r2, r7
   1c79e:	e759      	b.n	1c654 <d_print_comp_inner+0x128>
   1c7a0:	68d2      	ldr	r2, [r2, #12]
   1c7a2:	7813      	ldrb	r3, [r2, #0]
   1c7a4:	2b27      	cmp	r3, #39	; 0x27
   1c7a6:	f041 835a 	bne.w	1de5e <d_print_comp_inner+0x1932>
   1c7aa:	68d3      	ldr	r3, [r2, #12]
   1c7ac:	7c1d      	ldrb	r5, [r3, #16]
   1c7ae:	2d06      	cmp	r5, #6
   1c7b0:	f201 827d 	bhi.w	1dcae <d_print_comp_inner+0x1782>
   1c7b4:	2d00      	cmp	r5, #0
   1c7b6:	f041 851c 	bne.w	1e1f2 <d_print_comp_inner+0x1cc6>
   1c7ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c7be:	29ff      	cmp	r1, #255	; 0xff
   1c7c0:	f001 84f0 	beq.w	1e1a4 <d_print_comp_inner+0x1c78>
   1c7c4:	1c4b      	adds	r3, r1, #1
   1c7c6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1c7ca:	2328      	movs	r3, #40	; 0x28
   1c7cc:	5463      	strb	r3, [r4, r1]
   1c7ce:	4620      	mov	r0, r4
   1c7d0:	2111      	movs	r1, #17
   1c7d2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c7d6:	f001 ff23 	bl	1e620 <d_print_comp>
   1c7da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c7de:	29ff      	cmp	r1, #255	; 0xff
   1c7e0:	f001 84f7 	beq.w	1e1d2 <d_print_comp_inner+0x1ca6>
   1c7e4:	1c4b      	adds	r3, r1, #1
   1c7e6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1c7ea:	2329      	movs	r3, #41	; 0x29
   1c7ec:	5463      	strb	r3, [r4, r1]
   1c7ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1c7f2:	7833      	ldrb	r3, [r6, #0]
   1c7f4:	2b3e      	cmp	r3, #62	; 0x3e
   1c7f6:	f001 84e6 	beq.w	1e1c6 <d_print_comp_inner+0x1c9a>
   1c7fa:	2d08      	cmp	r5, #8
   1c7fc:	f47f af3d 	bne.w	1c67a <d_print_comp_inner+0x14e>
   1c800:	215b      	movs	r1, #91	; 0x5b
   1c802:	4620      	mov	r0, r4
   1c804:	f7fd fc58 	bl	1a0b8 <d_append_char>
   1c808:	2111      	movs	r1, #17
   1c80a:	6932      	ldr	r2, [r6, #16]
   1c80c:	4620      	mov	r0, r4
   1c80e:	f001 ff07 	bl	1e620 <d_print_comp>
   1c812:	215d      	movs	r1, #93	; 0x5d
   1c814:	4620      	mov	r0, r4
   1c816:	b015      	add	sp, #84	; 0x54
   1c818:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c81c:	f7fd bc4c 	b.w	1a0b8 <d_append_char>
   1c820:	4fa2      	ldr	r7, [pc, #648]	; (1caac <d_print_comp_inner+0x580>)
   1c822:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c826:	f107 090f 	add.w	r9, r7, #15
   1c82a:	2574      	movs	r5, #116	; 0x74
   1c82c:	f04f 0800 	mov.w	r8, #0
   1c830:	e00b      	b.n	1c84a <d_print_comp_inner+0x31e>
   1c832:	460b      	mov	r3, r1
   1c834:	3101      	adds	r1, #1
   1c836:	454f      	cmp	r7, r9
   1c838:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c83c:	54e5      	strb	r5, [r4, r3]
   1c83e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c842:	f43f af06 	beq.w	1c652 <d_print_comp_inner+0x126>
   1c846:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c84a:	29ff      	cmp	r1, #255	; 0xff
   1c84c:	d1f1      	bne.n	1c832 <d_print_comp_inner+0x306>
   1c84e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c852:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c856:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c85a:	4620      	mov	r0, r4
   1c85c:	4798      	blx	r3
   1c85e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c862:	3301      	adds	r3, #1
   1c864:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c868:	2101      	movs	r1, #1
   1c86a:	2300      	movs	r3, #0
   1c86c:	e7e3      	b.n	1c836 <d_print_comp_inner+0x30a>
   1c86e:	4f90      	ldr	r7, [pc, #576]	; (1cab0 <d_print_comp_inner+0x584>)
   1c870:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c874:	f107 0911 	add.w	r9, r7, #17
   1c878:	2574      	movs	r5, #116	; 0x74
   1c87a:	f04f 0800 	mov.w	r8, #0
   1c87e:	e00b      	b.n	1c898 <d_print_comp_inner+0x36c>
   1c880:	460b      	mov	r3, r1
   1c882:	3101      	adds	r1, #1
   1c884:	45b9      	cmp	r9, r7
   1c886:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c88a:	54e5      	strb	r5, [r4, r3]
   1c88c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c890:	f43f aedf 	beq.w	1c652 <d_print_comp_inner+0x126>
   1c894:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c898:	29ff      	cmp	r1, #255	; 0xff
   1c89a:	d1f1      	bne.n	1c880 <d_print_comp_inner+0x354>
   1c89c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c8a0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c8a4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c8a8:	4620      	mov	r0, r4
   1c8aa:	4798      	blx	r3
   1c8ac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c8b0:	3301      	adds	r3, #1
   1c8b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c8b6:	2101      	movs	r1, #1
   1c8b8:	2300      	movs	r3, #0
   1c8ba:	e7e3      	b.n	1c884 <d_print_comp_inner+0x358>
   1c8bc:	4f7d      	ldr	r7, [pc, #500]	; (1cab4 <d_print_comp_inner+0x588>)
   1c8be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c8c2:	f107 090c 	add.w	r9, r7, #12
   1c8c6:	2574      	movs	r5, #116	; 0x74
   1c8c8:	f04f 0800 	mov.w	r8, #0
   1c8cc:	e00b      	b.n	1c8e6 <d_print_comp_inner+0x3ba>
   1c8ce:	460b      	mov	r3, r1
   1c8d0:	3101      	adds	r1, #1
   1c8d2:	454f      	cmp	r7, r9
   1c8d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c8d8:	54e5      	strb	r5, [r4, r3]
   1c8da:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c8de:	f43f aeb8 	beq.w	1c652 <d_print_comp_inner+0x126>
   1c8e2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c8e6:	29ff      	cmp	r1, #255	; 0xff
   1c8e8:	d1f1      	bne.n	1c8ce <d_print_comp_inner+0x3a2>
   1c8ea:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c8ee:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c8f2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c8f6:	4620      	mov	r0, r4
   1c8f8:	4798      	blx	r3
   1c8fa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c8fe:	3301      	adds	r3, #1
   1c900:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c904:	2101      	movs	r1, #1
   1c906:	2300      	movs	r3, #0
   1c908:	e7e3      	b.n	1c8d2 <d_print_comp_inner+0x3a6>
   1c90a:	4f6b      	ldr	r7, [pc, #428]	; (1cab8 <d_print_comp_inner+0x58c>)
   1c90c:	68d2      	ldr	r2, [r2, #12]
   1c90e:	2111      	movs	r1, #17
   1c910:	f001 fe86 	bl	1e620 <d_print_comp>
   1c914:	f107 0904 	add.w	r9, r7, #4
   1c918:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c91c:	255b      	movs	r5, #91	; 0x5b
   1c91e:	f04f 0800 	mov.w	r8, #0
   1c922:	e00b      	b.n	1c93c <d_print_comp_inner+0x410>
   1c924:	460b      	mov	r3, r1
   1c926:	3101      	adds	r1, #1
   1c928:	45b9      	cmp	r9, r7
   1c92a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c92e:	54e5      	strb	r5, [r4, r3]
   1c930:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1c934:	f000 87f3 	beq.w	1d91e <d_print_comp_inner+0x13f2>
   1c938:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1c93c:	29ff      	cmp	r1, #255	; 0xff
   1c93e:	d1f1      	bne.n	1c924 <d_print_comp_inner+0x3f8>
   1c940:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c944:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c948:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1c94c:	4620      	mov	r0, r4
   1c94e:	4798      	blx	r3
   1c950:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c954:	3301      	adds	r3, #1
   1c956:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c95a:	2101      	movs	r1, #1
   1c95c:	2300      	movs	r3, #0
   1c95e:	e7e3      	b.n	1c928 <d_print_comp_inner+0x3fc>
   1c960:	f8d2 a00c 	ldr.w	sl, [r2, #12]
   1c964:	4651      	mov	r1, sl
   1c966:	f7fd fbe5 	bl	1a134 <d_find_pack>
   1c96a:	f04f 0800 	mov.w	r8, #0
   1c96e:	b910      	cbnz	r0, 1c976 <d_print_comp_inner+0x44a>
   1c970:	f001 bd20 	b.w	1e3b4 <d_print_comp_inner+0x1e88>
   1c974:	46c8      	mov	r8, r9
   1c976:	7803      	ldrb	r3, [r0, #0]
   1c978:	2b2f      	cmp	r3, #47	; 0x2f
   1c97a:	f108 0901 	add.w	r9, r8, #1
   1c97e:	f041 8187 	bne.w	1dc90 <d_print_comp_inner+0x1764>
   1c982:	68c3      	ldr	r3, [r0, #12]
   1c984:	2b00      	cmp	r3, #0
   1c986:	f001 8183 	beq.w	1dc90 <d_print_comp_inner+0x1764>
   1c98a:	6900      	ldr	r0, [r0, #16]
   1c98c:	2800      	cmp	r0, #0
   1c98e:	d1f1      	bne.n	1c974 <d_print_comp_inner+0x448>
   1c990:	e003      	b.n	1c99a <d_print_comp_inner+0x46e>
   1c992:	3501      	adds	r5, #1
   1c994:	454d      	cmp	r5, r9
   1c996:	f6bf ae39 	bge.w	1c60c <d_print_comp_inner+0xe0>
   1c99a:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
   1c99e:	4652      	mov	r2, sl
   1c9a0:	2111      	movs	r1, #17
   1c9a2:	4620      	mov	r0, r4
   1c9a4:	f001 fe3c 	bl	1e620 <d_print_comp>
   1c9a8:	45a8      	cmp	r8, r5
   1c9aa:	ddf2      	ble.n	1c992 <d_print_comp_inner+0x466>
   1c9ac:	4f43      	ldr	r7, [pc, #268]	; (1cabc <d_print_comp_inner+0x590>)
   1c9ae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1c9b2:	f107 0b01 	add.w	fp, r7, #1
   1c9b6:	262c      	movs	r6, #44	; 0x2c
   1c9b8:	e00a      	b.n	1c9d0 <d_print_comp_inner+0x4a4>
   1c9ba:	460b      	mov	r3, r1
   1c9bc:	3101      	adds	r1, #1
   1c9be:	45bb      	cmp	fp, r7
   1c9c0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1c9c4:	54e6      	strb	r6, [r4, r3]
   1c9c6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1c9ca:	d0e2      	beq.n	1c992 <d_print_comp_inner+0x466>
   1c9cc:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1c9d0:	29ff      	cmp	r1, #255	; 0xff
   1c9d2:	d1f2      	bne.n	1c9ba <d_print_comp_inner+0x48e>
   1c9d4:	f04f 0200 	mov.w	r2, #0
   1c9d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1c9dc:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1c9e0:	4620      	mov	r0, r4
   1c9e2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1c9e6:	4798      	blx	r3
   1c9e8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1c9ec:	3301      	adds	r3, #1
   1c9ee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1c9f2:	2101      	movs	r1, #1
   1c9f4:	2300      	movs	r3, #0
   1c9f6:	e7e2      	b.n	1c9be <d_print_comp_inner+0x492>
   1c9f8:	4f31      	ldr	r7, [pc, #196]	; (1cac0 <d_print_comp_inner+0x594>)
   1c9fa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1c9fe:	f107 0919 	add.w	r9, r7, #25
   1ca02:	256e      	movs	r5, #110	; 0x6e
   1ca04:	f04f 0800 	mov.w	r8, #0
   1ca08:	e00b      	b.n	1ca22 <d_print_comp_inner+0x4f6>
   1ca0a:	460b      	mov	r3, r1
   1ca0c:	3101      	adds	r1, #1
   1ca0e:	45b9      	cmp	r9, r7
   1ca10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ca14:	54e5      	strb	r5, [r4, r3]
   1ca16:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ca1a:	f43f ae1a 	beq.w	1c652 <d_print_comp_inner+0x126>
   1ca1e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ca22:	29ff      	cmp	r1, #255	; 0xff
   1ca24:	d1f1      	bne.n	1ca0a <d_print_comp_inner+0x4de>
   1ca26:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ca2a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ca2e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ca32:	4620      	mov	r0, r4
   1ca34:	4798      	blx	r3
   1ca36:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ca3a:	3301      	adds	r3, #1
   1ca3c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ca40:	2101      	movs	r1, #1
   1ca42:	2300      	movs	r3, #0
   1ca44:	e7e3      	b.n	1ca0e <d_print_comp_inner+0x4e2>
   1ca46:	4f1f      	ldr	r7, [pc, #124]	; (1cac4 <d_print_comp_inner+0x598>)
   1ca48:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ca4c:	f107 0915 	add.w	r9, r7, #21
   1ca50:	2574      	movs	r5, #116	; 0x74
   1ca52:	f04f 0800 	mov.w	r8, #0
   1ca56:	e00b      	b.n	1ca70 <d_print_comp_inner+0x544>
   1ca58:	460b      	mov	r3, r1
   1ca5a:	3101      	adds	r1, #1
   1ca5c:	45b9      	cmp	r9, r7
   1ca5e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ca62:	54e5      	strb	r5, [r4, r3]
   1ca64:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ca68:	f43f adf3 	beq.w	1c652 <d_print_comp_inner+0x126>
   1ca6c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ca70:	29ff      	cmp	r1, #255	; 0xff
   1ca72:	d1f1      	bne.n	1ca58 <d_print_comp_inner+0x52c>
   1ca74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ca78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ca7c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ca80:	4620      	mov	r0, r4
   1ca82:	4798      	blx	r3
   1ca84:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ca88:	3301      	adds	r3, #1
   1ca8a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ca8e:	2101      	movs	r1, #1
   1ca90:	2300      	movs	r3, #0
   1ca92:	e7e3      	b.n	1ca5c <d_print_comp_inner+0x530>
   1ca94:	4f0c      	ldr	r7, [pc, #48]	; (1cac8 <d_print_comp_inner+0x59c>)
   1ca96:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ca9a:	f107 090d 	add.w	r9, r7, #13
   1ca9e:	257b      	movs	r5, #123	; 0x7b
   1caa0:	f04f 0800 	mov.w	r8, #0
   1caa4:	e01e      	b.n	1cae4 <d_print_comp_inner+0x5b8>
   1caa6:	bf00      	nop
   1caa8:	20002188 	.word	0x20002188
   1caac:	20002228 	.word	0x20002228
   1cab0:	20002214 	.word	0x20002214
   1cab4:	20002204 	.word	0x20002204
   1cab8:	20002180 	.word	0x20002180
   1cabc:	20002328 	.word	0x20002328
   1cac0:	200022f4 	.word	0x200022f4
   1cac4:	200022f8 	.word	0x200022f8
   1cac8:	200023f8 	.word	0x200023f8
   1cacc:	460b      	mov	r3, r1
   1cace:	3101      	adds	r1, #1
   1cad0:	454f      	cmp	r7, r9
   1cad2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cad6:	54e5      	strb	r5, [r4, r3]
   1cad8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cadc:	f000 8739 	beq.w	1d952 <d_print_comp_inner+0x1426>
   1cae0:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cae4:	29ff      	cmp	r1, #255	; 0xff
   1cae6:	d1f1      	bne.n	1cacc <d_print_comp_inner+0x5a0>
   1cae8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1caec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1caf0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1caf4:	4620      	mov	r0, r4
   1caf6:	4798      	blx	r3
   1caf8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cafc:	3301      	adds	r3, #1
   1cafe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cb02:	2101      	movs	r1, #1
   1cb04:	2300      	movs	r3, #0
   1cb06:	e7e3      	b.n	1cad0 <d_print_comp_inner+0x5a4>
   1cb08:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
   1cb0c:	2b00      	cmp	r3, #0
   1cb0e:	f001 818e 	beq.w	1de2e <d_print_comp_inner+0x1902>
   1cb12:	4fd3      	ldr	r7, [pc, #844]	; (1ce60 <d_print_comp_inner+0x934>)
   1cb14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cb18:	f107 0904 	add.w	r9, r7, #4
   1cb1c:	2561      	movs	r5, #97	; 0x61
   1cb1e:	f04f 0800 	mov.w	r8, #0
   1cb22:	e00b      	b.n	1cb3c <d_print_comp_inner+0x610>
   1cb24:	460b      	mov	r3, r1
   1cb26:	3101      	adds	r1, #1
   1cb28:	45b9      	cmp	r9, r7
   1cb2a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cb2e:	54e5      	strb	r5, [r4, r3]
   1cb30:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cb34:	f001 814a 	beq.w	1ddcc <d_print_comp_inner+0x18a0>
   1cb38:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cb3c:	29ff      	cmp	r1, #255	; 0xff
   1cb3e:	d1f1      	bne.n	1cb24 <d_print_comp_inner+0x5f8>
   1cb40:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cb44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cb48:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cb4c:	4620      	mov	r0, r4
   1cb4e:	4798      	blx	r3
   1cb50:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cb54:	3301      	adds	r3, #1
   1cb56:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cb5a:	2101      	movs	r1, #1
   1cb5c:	2300      	movs	r3, #0
   1cb5e:	e7e3      	b.n	1cb28 <d_print_comp_inner+0x5fc>
   1cb60:	68d7      	ldr	r7, [r2, #12]
   1cb62:	4ec0      	ldr	r6, [pc, #768]	; (1ce64 <d_print_comp_inner+0x938>)
   1cb64:	f8d7 8008 	ldr.w	r8, [r7, #8]
   1cb68:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cb6c:	f106 0a07 	add.w	sl, r6, #7
   1cb70:	256f      	movs	r5, #111	; 0x6f
   1cb72:	f04f 0900 	mov.w	r9, #0
   1cb76:	e00b      	b.n	1cb90 <d_print_comp_inner+0x664>
   1cb78:	460b      	mov	r3, r1
   1cb7a:	3101      	adds	r1, #1
   1cb7c:	45b2      	cmp	sl, r6
   1cb7e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cb82:	54e5      	strb	r5, [r4, r3]
   1cb84:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cb88:	f000 8726 	beq.w	1d9d8 <d_print_comp_inner+0x14ac>
   1cb8c:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1cb90:	29ff      	cmp	r1, #255	; 0xff
   1cb92:	d1f1      	bne.n	1cb78 <d_print_comp_inner+0x64c>
   1cb94:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cb98:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cb9c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1cba0:	4620      	mov	r0, r4
   1cba2:	4798      	blx	r3
   1cba4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cba8:	3301      	adds	r3, #1
   1cbaa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cbae:	2101      	movs	r1, #1
   1cbb0:	2300      	movs	r3, #0
   1cbb2:	e7e3      	b.n	1cb7c <d_print_comp_inner+0x650>
   1cbb4:	e9d2 2503 	ldrd	r2, r5, [r2, #12]
   1cbb8:	b112      	cbz	r2, 1cbc0 <d_print_comp_inner+0x694>
   1cbba:	2111      	movs	r1, #17
   1cbbc:	f001 fd30 	bl	1e620 <d_print_comp>
   1cbc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1cbc4:	29ff      	cmp	r1, #255	; 0xff
   1cbc6:	f001 826d 	beq.w	1e0a4 <d_print_comp_inner+0x1b78>
   1cbca:	1c4a      	adds	r2, r1, #1
   1cbcc:	237b      	movs	r3, #123	; 0x7b
   1cbce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1cbd2:	4620      	mov	r0, r4
   1cbd4:	5463      	strb	r3, [r4, r1]
   1cbd6:	462a      	mov	r2, r5
   1cbd8:	2111      	movs	r1, #17
   1cbda:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1cbde:	f001 fd1f 	bl	1e620 <d_print_comp>
   1cbe2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1cbe6:	29ff      	cmp	r1, #255	; 0xff
   1cbe8:	f000 86e6 	beq.w	1d9b8 <d_print_comp_inner+0x148c>
   1cbec:	1c4a      	adds	r2, r1, #1
   1cbee:	237d      	movs	r3, #125	; 0x7d
   1cbf0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1cbf4:	5463      	strb	r3, [r4, r1]
   1cbf6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1cbfa:	e507      	b.n	1c60c <d_print_comp_inner+0xe0>
   1cbfc:	4f9a      	ldr	r7, [pc, #616]	; (1ce68 <d_print_comp_inner+0x93c>)
   1cbfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cc02:	f107 091d 	add.w	r9, r7, #29
   1cc06:	2574      	movs	r5, #116	; 0x74
   1cc08:	f04f 0800 	mov.w	r8, #0
   1cc0c:	e00b      	b.n	1cc26 <d_print_comp_inner+0x6fa>
   1cc0e:	460b      	mov	r3, r1
   1cc10:	3101      	adds	r1, #1
   1cc12:	45b9      	cmp	r9, r7
   1cc14:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cc18:	54e5      	strb	r5, [r4, r3]
   1cc1a:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cc1e:	f43f ad18 	beq.w	1c652 <d_print_comp_inner+0x126>
   1cc22:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cc26:	29ff      	cmp	r1, #255	; 0xff
   1cc28:	d1f1      	bne.n	1cc0e <d_print_comp_inner+0x6e2>
   1cc2a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cc2e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cc32:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cc36:	4620      	mov	r0, r4
   1cc38:	4798      	blx	r3
   1cc3a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cc3e:	3301      	adds	r3, #1
   1cc40:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cc44:	2101      	movs	r1, #1
   1cc46:	2300      	movs	r3, #0
   1cc48:	e7e3      	b.n	1cc12 <d_print_comp_inner+0x6e6>
   1cc4a:	4f88      	ldr	r7, [pc, #544]	; (1ce6c <d_print_comp_inner+0x940>)
   1cc4c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cc50:	f107 0914 	add.w	r9, r7, #20
   1cc54:	2572      	movs	r5, #114	; 0x72
   1cc56:	f04f 0800 	mov.w	r8, #0
   1cc5a:	e00b      	b.n	1cc74 <d_print_comp_inner+0x748>
   1cc5c:	460b      	mov	r3, r1
   1cc5e:	3101      	adds	r1, #1
   1cc60:	45b9      	cmp	r9, r7
   1cc62:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cc66:	54e5      	strb	r5, [r4, r3]
   1cc68:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cc6c:	f000 86f4 	beq.w	1da58 <d_print_comp_inner+0x152c>
   1cc70:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cc74:	29ff      	cmp	r1, #255	; 0xff
   1cc76:	d1f1      	bne.n	1cc5c <d_print_comp_inner+0x730>
   1cc78:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cc7c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cc80:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cc84:	4620      	mov	r0, r4
   1cc86:	4798      	blx	r3
   1cc88:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cc8c:	3301      	adds	r3, #1
   1cc8e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cc92:	2101      	movs	r1, #1
   1cc94:	2300      	movs	r3, #0
   1cc96:	e7e3      	b.n	1cc60 <d_print_comp_inner+0x734>
   1cc98:	4f75      	ldr	r7, [pc, #468]	; (1ce70 <d_print_comp_inner+0x944>)
   1cc9a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cc9e:	f107 0917 	add.w	r9, r7, #23
   1cca2:	2563      	movs	r5, #99	; 0x63
   1cca4:	f04f 0800 	mov.w	r8, #0
   1cca8:	e00b      	b.n	1ccc2 <d_print_comp_inner+0x796>
   1ccaa:	460b      	mov	r3, r1
   1ccac:	3101      	adds	r1, #1
   1ccae:	454f      	cmp	r7, r9
   1ccb0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ccb4:	54e5      	strb	r5, [r4, r3]
   1ccb6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ccba:	f000 877c 	beq.w	1dbb6 <d_print_comp_inner+0x168a>
   1ccbe:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1ccc2:	29ff      	cmp	r1, #255	; 0xff
   1ccc4:	d1f1      	bne.n	1ccaa <d_print_comp_inner+0x77e>
   1ccc6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ccca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ccce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ccd2:	4620      	mov	r0, r4
   1ccd4:	4798      	blx	r3
   1ccd6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ccda:	3301      	adds	r3, #1
   1ccdc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cce0:	2101      	movs	r1, #1
   1cce2:	2300      	movs	r3, #0
   1cce4:	e7e3      	b.n	1ccae <d_print_comp_inner+0x782>
   1cce6:	4f63      	ldr	r7, [pc, #396]	; (1ce74 <d_print_comp_inner+0x948>)
   1cce8:	68d2      	ldr	r2, [r2, #12]
   1ccea:	2111      	movs	r1, #17
   1ccec:	f001 fc98 	bl	1e620 <d_print_comp>
   1ccf0:	f107 0907 	add.w	r9, r7, #7
   1ccf4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ccf8:	2520      	movs	r5, #32
   1ccfa:	f04f 0800 	mov.w	r8, #0
   1ccfe:	e00b      	b.n	1cd18 <d_print_comp_inner+0x7ec>
   1cd00:	460b      	mov	r3, r1
   1cd02:	3101      	adds	r1, #1
   1cd04:	45b9      	cmp	r9, r7
   1cd06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cd0a:	54e5      	strb	r5, [r4, r3]
   1cd0c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cd10:	f000 8605 	beq.w	1d91e <d_print_comp_inner+0x13f2>
   1cd14:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cd18:	29ff      	cmp	r1, #255	; 0xff
   1cd1a:	d1f1      	bne.n	1cd00 <d_print_comp_inner+0x7d4>
   1cd1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cd20:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cd24:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cd28:	4620      	mov	r0, r4
   1cd2a:	4798      	blx	r3
   1cd2c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cd30:	3301      	adds	r3, #1
   1cd32:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cd36:	2101      	movs	r1, #1
   1cd38:	2300      	movs	r3, #0
   1cd3a:	e7e3      	b.n	1cd04 <d_print_comp_inner+0x7d8>
   1cd3c:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   1cd40:	2b00      	cmp	r3, #0
   1cd42:	f43f ac63 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1cd46:	442b      	add	r3, r5
   1cd48:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cd4c:	3d01      	subs	r5, #1
   1cd4e:	1e5f      	subs	r7, r3, #1
   1cd50:	f04f 0800 	mov.w	r8, #0
   1cd54:	e009      	b.n	1cd6a <d_print_comp_inner+0x83e>
   1cd56:	460b      	mov	r3, r1
   1cd58:	3101      	adds	r1, #1
   1cd5a:	42af      	cmp	r7, r5
   1cd5c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cd60:	54e6      	strb	r6, [r4, r3]
   1cd62:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1cd66:	f43f ac51 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1cd6a:	29ff      	cmp	r1, #255	; 0xff
   1cd6c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1cd70:	d1f1      	bne.n	1cd56 <d_print_comp_inner+0x82a>
   1cd72:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cd76:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cd7a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cd7e:	4620      	mov	r0, r4
   1cd80:	4798      	blx	r3
   1cd82:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cd86:	3301      	adds	r3, #1
   1cd88:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cd8c:	2101      	movs	r1, #1
   1cd8e:	2300      	movs	r3, #0
   1cd90:	e7e3      	b.n	1cd5a <d_print_comp_inner+0x82e>
   1cd92:	4f39      	ldr	r7, [pc, #228]	; (1ce78 <d_print_comp_inner+0x94c>)
   1cd94:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cd98:	f107 0910 	add.w	r9, r7, #16
   1cd9c:	2568      	movs	r5, #104	; 0x68
   1cd9e:	f04f 0800 	mov.w	r8, #0
   1cda2:	e00b      	b.n	1cdbc <d_print_comp_inner+0x890>
   1cda4:	460b      	mov	r3, r1
   1cda6:	3101      	adds	r1, #1
   1cda8:	45b9      	cmp	r9, r7
   1cdaa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1cdae:	54e5      	strb	r5, [r4, r3]
   1cdb0:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1cdb4:	f43f ac4d 	beq.w	1c652 <d_print_comp_inner+0x126>
   1cdb8:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1cdbc:	29ff      	cmp	r1, #255	; 0xff
   1cdbe:	d1f1      	bne.n	1cda4 <d_print_comp_inner+0x878>
   1cdc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cdc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cdc8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1cdcc:	4620      	mov	r0, r4
   1cdce:	4798      	blx	r3
   1cdd0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1cdd4:	3301      	adds	r3, #1
   1cdd6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1cdda:	2101      	movs	r1, #1
   1cddc:	2300      	movs	r3, #0
   1cdde:	e7e3      	b.n	1cda8 <d_print_comp_inner+0x87c>
   1cde0:	68d5      	ldr	r5, [r2, #12]
   1cde2:	2d00      	cmp	r5, #0
   1cde4:	f040 87a1 	bne.w	1dd2a <d_print_comp_inner+0x17fe>
   1cde8:	4924      	ldr	r1, [pc, #144]	; (1ce7c <d_print_comp_inner+0x950>)
   1cdea:	4620      	mov	r0, r4
   1cdec:	b015      	add	sp, #84	; 0x54
   1cdee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cdf2:	f7fd b9e9 	b.w	1a1c8 <d_append_string>
   1cdf6:	2111      	movs	r1, #17
   1cdf8:	68d2      	ldr	r2, [r2, #12]
   1cdfa:	f001 fc11 	bl	1e620 <d_print_comp>
   1cdfe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ce02:	29ff      	cmp	r1, #255	; 0xff
   1ce04:	f001 816e 	beq.w	1e0e4 <d_print_comp_inner+0x1bb8>
   1ce08:	1c4a      	adds	r2, r1, #1
   1ce0a:	2328      	movs	r3, #40	; 0x28
   1ce0c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ce10:	5463      	strb	r3, [r4, r1]
   1ce12:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ce16:	6932      	ldr	r2, [r6, #16]
   1ce18:	2111      	movs	r1, #17
   1ce1a:	4620      	mov	r0, r4
   1ce1c:	f001 fc00 	bl	1e620 <d_print_comp>
   1ce20:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ce24:	29ff      	cmp	r1, #255	; 0xff
   1ce26:	f001 802c 	beq.w	1de82 <d_print_comp_inner+0x1956>
   1ce2a:	1c4a      	adds	r2, r1, #1
   1ce2c:	2329      	movs	r3, #41	; 0x29
   1ce2e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ce32:	5463      	strb	r3, [r4, r1]
   1ce34:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ce38:	f7ff bbe8 	b.w	1c60c <d_print_comp_inner+0xe0>
   1ce3c:	68d2      	ldr	r2, [r2, #12]
   1ce3e:	4910      	ldr	r1, [pc, #64]	; (1ce80 <d_print_comp_inner+0x954>)
   1ce40:	a804      	add	r0, sp, #16
   1ce42:	f004 fea1 	bl	21b88 <sprintf>
   1ce46:	a804      	add	r0, sp, #16
   1ce48:	f005 feda 	bl	22c00 <strlen>
   1ce4c:	2800      	cmp	r0, #0
   1ce4e:	f43f abdd 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1ce52:	ad04      	add	r5, sp, #16
   1ce54:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ce58:	182f      	adds	r7, r5, r0
   1ce5a:	f04f 0800 	mov.w	r8, #0
   1ce5e:	e01b      	b.n	1ce98 <d_print_comp_inner+0x96c>
   1ce60:	200021a0 	.word	0x200021a0
   1ce64:	2000232c 	.word	0x2000232c
   1ce68:	200021a8 	.word	0x200021a8
   1ce6c:	200022c8 	.word	0x200022c8
   1ce70:	200021e0 	.word	0x200021e0
   1ce74:	20002408 	.word	0x20002408
   1ce78:	200022e0 	.word	0x200022e0
   1ce7c:	20002398 	.word	0x20002398
   1ce80:	2000213c 	.word	0x2000213c
   1ce84:	460b      	mov	r3, r1
   1ce86:	3101      	adds	r1, #1
   1ce88:	42af      	cmp	r7, r5
   1ce8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ce8e:	54e6      	strb	r6, [r4, r3]
   1ce90:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ce94:	f43f abba 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1ce98:	29ff      	cmp	r1, #255	; 0xff
   1ce9a:	f815 6b01 	ldrb.w	r6, [r5], #1
   1ce9e:	d1f1      	bne.n	1ce84 <d_print_comp_inner+0x958>
   1cea0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1cea4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1cea8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ceac:	4620      	mov	r0, r4
   1ceae:	4798      	blx	r3
   1ceb0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ceb4:	3301      	adds	r3, #1
   1ceb6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ceba:	2101      	movs	r1, #1
   1cebc:	2300      	movs	r3, #0
   1cebe:	e7e3      	b.n	1ce88 <d_print_comp_inner+0x95c>
   1cec0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cec4:	7b15      	ldrb	r5, [r2, #12]
   1cec6:	29ff      	cmp	r1, #255	; 0xff
   1cec8:	f001 811e 	beq.w	1e108 <d_print_comp_inner+0x1bdc>
   1cecc:	1c4b      	adds	r3, r1, #1
   1cece:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ced2:	5465      	strb	r5, [r4, r1]
   1ced4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ced8:	f7ff bb98 	b.w	1c60c <d_print_comp_inner+0xe0>
   1cedc:	68d2      	ldr	r2, [r2, #12]
   1cede:	b1ca      	cbz	r2, 1cf14 <d_print_comp_inner+0x9e8>
   1cee0:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   1cee4:	ab04      	add	r3, sp, #16
   1cee6:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1ceea:	2300      	movs	r3, #0
   1ceec:	e9cd 1604 	strd	r1, r6, [sp, #16]
   1cef0:	9306      	str	r3, [sp, #24]
   1cef2:	2111      	movs	r1, #17
   1cef4:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1cef8:	9307      	str	r3, [sp, #28]
   1cefa:	f001 fb91 	bl	1e620 <d_print_comp>
   1cefe:	9b06      	ldr	r3, [sp, #24]
   1cf00:	9a04      	ldr	r2, [sp, #16]
   1cf02:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
   1cf06:	2b00      	cmp	r3, #0
   1cf08:	f47f ab80 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1cf0c:	2120      	movs	r1, #32
   1cf0e:	4620      	mov	r0, r4
   1cf10:	f7fd f8d2 	bl	1a0b8 <d_append_char>
   1cf14:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1cf18:	4632      	mov	r2, r6
   1cf1a:	2111      	movs	r1, #17
   1cf1c:	4620      	mov	r0, r4
   1cf1e:	b015      	add	sp, #84	; 0x54
   1cf20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf24:	f001 bec6 	b.w	1ecb4 <d_print_function_type>
   1cf28:	68d7      	ldr	r7, [r2, #12]
   1cf2a:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
   1cf2e:	2200      	movs	r2, #0
   1cf30:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
   1cf34:	2f00      	cmp	r7, #0
   1cf36:	f43f ab66 	beq.w	1c606 <d_print_comp_inner+0xda>
   1cf3a:	f10d 0810 	add.w	r8, sp, #16
   1cf3e:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
   1cf42:	4643      	mov	r3, r8
   1cf44:	4611      	mov	r1, r2
   1cf46:	4696      	mov	lr, r2
   1cf48:	e9c3 2700 	strd	r2, r7, [r3]
   1cf4c:	e9c3 ec02 	strd	lr, ip, [r3, #8]
   1cf50:	783a      	ldrb	r2, [r7, #0]
   1cf52:	2a4e      	cmp	r2, #78	; 0x4e
   1cf54:	469a      	mov	sl, r3
   1cf56:	f1a2 0b1c 	sub.w	fp, r2, #28
   1cf5a:	f1a2 0050 	sub.w	r0, r2, #80	; 0x50
   1cf5e:	f101 0501 	add.w	r5, r1, #1
   1cf62:	f000 8688 	beq.w	1dc76 <d_print_comp_inner+0x174a>
   1cf66:	f200 84ed 	bhi.w	1d944 <d_print_comp_inner+0x1418>
   1cf6a:	f1bb 0f04 	cmp.w	fp, #4
   1cf6e:	f240 8682 	bls.w	1dc76 <d_print_comp_inner+0x174a>
   1cf72:	2a02      	cmp	r2, #2
   1cf74:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1cf78:	d114      	bne.n	1cfa4 <d_print_comp_inner+0xa78>
   1cf7a:	693f      	ldr	r7, [r7, #16]
   1cf7c:	783a      	ldrb	r2, [r7, #0]
   1cf7e:	2a48      	cmp	r2, #72	; 0x48
   1cf80:	f001 8250 	beq.w	1e424 <d_print_comp_inner+0x1ef8>
   1cf84:	eb08 1101 	add.w	r1, r8, r1, lsl #4
   1cf88:	f04f 0a00 	mov.w	sl, #0
   1cf8c:	2a4e      	cmp	r2, #78	; 0x4e
   1cf8e:	f1a2 0350 	sub.w	r3, r2, #80	; 0x50
   1cf92:	f1a2 001c 	sub.w	r0, r2, #28
   1cf96:	f000 8787 	beq.w	1dea8 <d_print_comp_inner+0x197c>
   1cf9a:	f200 8782 	bhi.w	1dea2 <d_print_comp_inner+0x1976>
   1cf9e:	2804      	cmp	r0, #4
   1cfa0:	f240 8782 	bls.w	1dea8 <d_print_comp_inner+0x197c>
   1cfa4:	2a04      	cmp	r2, #4
   1cfa6:	d104      	bne.n	1cfb2 <d_print_comp_inner+0xa86>
   1cfa8:	e9cd c702 	strd	ip, r7, [sp, #8]
   1cfac:	ab02      	add	r3, sp, #8
   1cfae:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1cfb2:	6932      	ldr	r2, [r6, #16]
   1cfb4:	2111      	movs	r1, #17
   1cfb6:	4620      	mov	r0, r4
   1cfb8:	f001 fb32 	bl	1e620 <d_print_comp>
   1cfbc:	783b      	ldrb	r3, [r7, #0]
   1cfbe:	2b04      	cmp	r3, #4
   1cfc0:	d102      	bne.n	1cfc8 <d_print_comp_inner+0xa9c>
   1cfc2:	9b02      	ldr	r3, [sp, #8]
   1cfc4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1cfc8:	eb08 1805 	add.w	r8, r8, r5, lsl #4
   1cfcc:	2720      	movs	r7, #32
   1cfce:	f858 6c08 	ldr.w	r6, [r8, #-8]
   1cfd2:	3d01      	subs	r5, #1
   1cfd4:	2e00      	cmp	r6, #0
   1cfd6:	f000 863b 	beq.w	1dc50 <d_print_comp_inner+0x1724>
   1cfda:	f1a8 0810 	sub.w	r8, r8, #16
   1cfde:	2d00      	cmp	r5, #0
   1cfe0:	d1f5      	bne.n	1cfce <d_print_comp_inner+0xaa2>
   1cfe2:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1cfe6:	f7ff bb11 	b.w	1c60c <d_print_comp_inner+0xe0>
   1cfea:	4fab      	ldr	r7, [pc, #684]	; (1d298 <d_print_comp_inner+0xd6c>)
   1cfec:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1cff0:	f107 0909 	add.w	r9, r7, #9
   1cff4:	2564      	movs	r5, #100	; 0x64
   1cff6:	f04f 0800 	mov.w	r8, #0
   1cffa:	e00b      	b.n	1d014 <d_print_comp_inner+0xae8>
   1cffc:	460b      	mov	r3, r1
   1cffe:	3101      	adds	r1, #1
   1d000:	454f      	cmp	r7, r9
   1d002:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d006:	54e5      	strb	r5, [r4, r3]
   1d008:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d00c:	f000 85ff 	beq.w	1dc0e <d_print_comp_inner+0x16e2>
   1d010:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d014:	29ff      	cmp	r1, #255	; 0xff
   1d016:	d1f1      	bne.n	1cffc <d_print_comp_inner+0xad0>
   1d018:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d01c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d020:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d024:	4620      	mov	r0, r4
   1d026:	4798      	blx	r3
   1d028:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d02c:	3301      	adds	r3, #1
   1d02e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d032:	2101      	movs	r1, #1
   1d034:	2300      	movs	r3, #0
   1d036:	e7e3      	b.n	1d000 <d_print_comp_inner+0xad4>
   1d038:	4f98      	ldr	r7, [pc, #608]	; (1d29c <d_print_comp_inner+0xd70>)
   1d03a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d03e:	f107 0907 	add.w	r9, r7, #7
   1d042:	257b      	movs	r5, #123	; 0x7b
   1d044:	f04f 0800 	mov.w	r8, #0
   1d048:	e00b      	b.n	1d062 <d_print_comp_inner+0xb36>
   1d04a:	460b      	mov	r3, r1
   1d04c:	3101      	adds	r1, #1
   1d04e:	454f      	cmp	r7, r9
   1d050:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d054:	54e5      	strb	r5, [r4, r3]
   1d056:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d05a:	f000 8546 	beq.w	1daea <d_print_comp_inner+0x15be>
   1d05e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d062:	29ff      	cmp	r1, #255	; 0xff
   1d064:	d1f1      	bne.n	1d04a <d_print_comp_inner+0xb1e>
   1d066:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d06a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d06e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d072:	4620      	mov	r0, r4
   1d074:	4798      	blx	r3
   1d076:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d07a:	3301      	adds	r3, #1
   1d07c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d080:	2101      	movs	r1, #1
   1d082:	2300      	movs	r3, #0
   1d084:	e7e3      	b.n	1d04e <d_print_comp_inner+0xb22>
   1d086:	4f86      	ldr	r7, [pc, #536]	; (1d2a0 <d_print_comp_inner+0xd74>)
   1d088:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d08c:	f107 091b 	add.w	r9, r7, #27
   1d090:	2567      	movs	r5, #103	; 0x67
   1d092:	f04f 0800 	mov.w	r8, #0
   1d096:	e00b      	b.n	1d0b0 <d_print_comp_inner+0xb84>
   1d098:	460b      	mov	r3, r1
   1d09a:	3101      	adds	r1, #1
   1d09c:	45b9      	cmp	r9, r7
   1d09e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d0a2:	54e5      	strb	r5, [r4, r3]
   1d0a4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d0a8:	f43f aad3 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d0ac:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d0b0:	29ff      	cmp	r1, #255	; 0xff
   1d0b2:	d1f1      	bne.n	1d098 <d_print_comp_inner+0xb6c>
   1d0b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d0b8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d0bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	4798      	blx	r3
   1d0c4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d0c8:	3301      	adds	r3, #1
   1d0ca:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d0ce:	2101      	movs	r1, #1
   1d0d0:	2300      	movs	r3, #0
   1d0d2:	e7e3      	b.n	1d09c <d_print_comp_inner+0xb70>
   1d0d4:	4f73      	ldr	r7, [pc, #460]	; (1d2a4 <d_print_comp_inner+0xd78>)
   1d0d6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d0da:	f107 091c 	add.w	r9, r7, #28
   1d0de:	2567      	movs	r5, #103	; 0x67
   1d0e0:	f04f 0800 	mov.w	r8, #0
   1d0e4:	e00b      	b.n	1d0fe <d_print_comp_inner+0xbd2>
   1d0e6:	460b      	mov	r3, r1
   1d0e8:	3101      	adds	r1, #1
   1d0ea:	45b9      	cmp	r9, r7
   1d0ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d0f0:	54e5      	strb	r5, [r4, r3]
   1d0f2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d0f6:	f43f aaac 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d0fa:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d0fe:	29ff      	cmp	r1, #255	; 0xff
   1d100:	d1f1      	bne.n	1d0e6 <d_print_comp_inner+0xbba>
   1d102:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d106:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d10a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d10e:	4620      	mov	r0, r4
   1d110:	4798      	blx	r3
   1d112:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d116:	3301      	adds	r3, #1
   1d118:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d11c:	2101      	movs	r1, #1
   1d11e:	2300      	movs	r3, #0
   1d120:	e7e3      	b.n	1d0ea <d_print_comp_inner+0xbbe>
   1d122:	6913      	ldr	r3, [r2, #16]
   1d124:	781b      	ldrb	r3, [r3, #0]
   1d126:	2b39      	cmp	r3, #57	; 0x39
   1d128:	f47f aa6d 	bne.w	1c606 <d_print_comp_inner+0xda>
   1d12c:	68d2      	ldr	r2, [r2, #12]
   1d12e:	68d3      	ldr	r3, [r2, #12]
   1d130:	681b      	ldr	r3, [r3, #0]
   1d132:	7859      	ldrb	r1, [r3, #1]
   1d134:	2963      	cmp	r1, #99	; 0x63
   1d136:	f001 8081 	beq.w	1e23c <d_print_comp_inner+0x1d10>
   1d13a:	4632      	mov	r2, r6
   1d13c:	2111      	movs	r1, #17
   1d13e:	4620      	mov	r0, r4
   1d140:	f002 fb16 	bl	1f770 <d_maybe_print_fold_expression>
   1d144:	2800      	cmp	r0, #0
   1d146:	f47f aa61 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d14a:	4632      	mov	r2, r6
   1d14c:	2111      	movs	r1, #17
   1d14e:	4620      	mov	r0, r4
   1d150:	f002 fc38 	bl	1f9c4 <d_maybe_print_designated_init>
   1d154:	2800      	cmp	r0, #0
   1d156:	f47f aa59 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d15a:	68f3      	ldr	r3, [r6, #12]
   1d15c:	781a      	ldrb	r2, [r3, #0]
   1d15e:	2a32      	cmp	r2, #50	; 0x32
   1d160:	f001 81dd 	beq.w	1e51e <d_print_comp_inner+0x1ff2>
   1d164:	68db      	ldr	r3, [r3, #12]
   1d166:	4950      	ldr	r1, [pc, #320]	; (1d2a8 <d_print_comp_inner+0xd7c>)
   1d168:	6818      	ldr	r0, [r3, #0]
   1d16a:	f005 fafd 	bl	22768 <strcmp>
   1d16e:	6933      	ldr	r3, [r6, #16]
   1d170:	b920      	cbnz	r0, 1d17c <d_print_comp_inner+0xc50>
   1d172:	68da      	ldr	r2, [r3, #12]
   1d174:	7811      	ldrb	r1, [r2, #0]
   1d176:	2903      	cmp	r1, #3
   1d178:	f001 8200 	beq.w	1e57c <d_print_comp_inner+0x2050>
   1d17c:	68da      	ldr	r2, [r3, #12]
   1d17e:	2111      	movs	r1, #17
   1d180:	4620      	mov	r0, r4
   1d182:	f002 fa87 	bl	1f694 <d_print_subexpr>
   1d186:	68f5      	ldr	r5, [r6, #12]
   1d188:	4948      	ldr	r1, [pc, #288]	; (1d2ac <d_print_comp_inner+0xd80>)
   1d18a:	68eb      	ldr	r3, [r5, #12]
   1d18c:	681f      	ldr	r7, [r3, #0]
   1d18e:	4638      	mov	r0, r7
   1d190:	f005 faea 	bl	22768 <strcmp>
   1d194:	2800      	cmp	r0, #0
   1d196:	f001 81e1 	beq.w	1e55c <d_print_comp_inner+0x2030>
   1d19a:	4943      	ldr	r1, [pc, #268]	; (1d2a8 <d_print_comp_inner+0xd7c>)
   1d19c:	4638      	mov	r0, r7
   1d19e:	f005 fae3 	bl	22768 <strcmp>
   1d1a2:	2800      	cmp	r0, #0
   1d1a4:	f041 81f8 	bne.w	1e598 <d_print_comp_inner+0x206c>
   1d1a8:	6933      	ldr	r3, [r6, #16]
   1d1aa:	2111      	movs	r1, #17
   1d1ac:	691a      	ldr	r2, [r3, #16]
   1d1ae:	4620      	mov	r0, r4
   1d1b0:	f002 fa70 	bl	1f694 <d_print_subexpr>
   1d1b4:	68f3      	ldr	r3, [r6, #12]
   1d1b6:	781a      	ldrb	r2, [r3, #0]
   1d1b8:	2a32      	cmp	r2, #50	; 0x32
   1d1ba:	f47f aa27 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d1be:	68db      	ldr	r3, [r3, #12]
   1d1c0:	689a      	ldr	r2, [r3, #8]
   1d1c2:	2a01      	cmp	r2, #1
   1d1c4:	f47f aa22 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d1c8:	685b      	ldr	r3, [r3, #4]
   1d1ca:	781b      	ldrb	r3, [r3, #0]
   1d1cc:	2b3e      	cmp	r3, #62	; 0x3e
   1d1ce:	f47f aa1d 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d1d2:	2129      	movs	r1, #41	; 0x29
   1d1d4:	f7ff bb1e 	b.w	1c814 <d_print_comp_inner+0x2e8>
   1d1d8:	e9d2 7503 	ldrd	r7, r5, [r2, #12]
   1d1dc:	783b      	ldrb	r3, [r7, #0]
   1d1de:	2b32      	cmp	r3, #50	; 0x32
   1d1e0:	f000 86b1 	beq.w	1df46 <d_print_comp_inner+0x1a1a>
   1d1e4:	2b34      	cmp	r3, #52	; 0x34
   1d1e6:	f041 820d 	bne.w	1e604 <d_print_comp_inner+0x20d8>
   1d1ea:	2128      	movs	r1, #40	; 0x28
   1d1ec:	f7fc ff64 	bl	1a0b8 <d_append_char>
   1d1f0:	4620      	mov	r0, r4
   1d1f2:	2111      	movs	r1, #17
   1d1f4:	68fa      	ldr	r2, [r7, #12]
   1d1f6:	f001 fa13 	bl	1e620 <d_print_comp>
   1d1fa:	2129      	movs	r1, #41	; 0x29
   1d1fc:	4620      	mov	r0, r4
   1d1fe:	f7fc ff5b 	bl	1a0b8 <d_append_char>
   1d202:	462a      	mov	r2, r5
   1d204:	2111      	movs	r1, #17
   1d206:	4620      	mov	r0, r4
   1d208:	b015      	add	sp, #84	; 0x54
   1d20a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d20e:	f002 ba41 	b.w	1f694 <d_print_subexpr>
   1d212:	68d2      	ldr	r2, [r2, #12]
   1d214:	2111      	movs	r1, #17
   1d216:	4620      	mov	r0, r4
   1d218:	b015      	add	sp, #84	; 0x54
   1d21a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d21e:	f002 b83d 	b.w	1f29c <d_print_expr_op>
   1d222:	f9b2 3012 	ldrsh.w	r3, [r2, #18]
   1d226:	2b00      	cmp	r3, #0
   1d228:	f040 871b 	bne.w	1e062 <d_print_comp_inner+0x1b36>
   1d22c:	68f2      	ldr	r2, [r6, #12]
   1d22e:	4b20      	ldr	r3, [pc, #128]	; (1d2b0 <d_print_comp_inner+0xd84>)
   1d230:	68d1      	ldr	r1, [r2, #12]
   1d232:	4299      	cmp	r1, r3
   1d234:	d00f      	beq.n	1d256 <d_print_comp_inner+0xd2a>
   1d236:	2111      	movs	r1, #17
   1d238:	4620      	mov	r0, r4
   1d23a:	f001 f9f1 	bl	1e620 <d_print_comp>
   1d23e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d242:	29ff      	cmp	r1, #255	; 0xff
   1d244:	f001 80be 	beq.w	1e3c4 <d_print_comp_inner+0x1e98>
   1d248:	2320      	movs	r3, #32
   1d24a:	1c4a      	adds	r2, r1, #1
   1d24c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d250:	5463      	strb	r3, [r4, r1]
   1d252:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d256:	f9b6 8010 	ldrsh.w	r8, [r6, #16]
   1d25a:	f1b8 0f00 	cmp.w	r8, #0
   1d25e:	f000 8540 	beq.w	1dce2 <d_print_comp_inner+0x17b6>
   1d262:	4914      	ldr	r1, [pc, #80]	; (1d2b4 <d_print_comp_inner+0xd88>)
   1d264:	e5c1      	b.n	1cdea <d_print_comp_inner+0x8be>
   1d266:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
   1d26a:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
   1d26e:	9307      	str	r3, [sp, #28]
   1d270:	f10d 0810 	add.w	r8, sp, #16
   1d274:	2300      	movs	r3, #0
   1d276:	46e1      	mov	r9, ip
   1d278:	f8cd c010 	str.w	ip, [sp, #16]
   1d27c:	f8c0 8114 	str.w	r8, [r0, #276]	; 0x114
   1d280:	9205      	str	r2, [sp, #20]
   1d282:	9306      	str	r3, [sp, #24]
   1d284:	f1bc 0f00 	cmp.w	ip, #0
   1d288:	f001 813d 	beq.w	1e506 <d_print_comp_inner+0x1fda>
   1d28c:	2701      	movs	r7, #1
   1d28e:	4665      	mov	r5, ip
   1d290:	46be      	mov	lr, r7
   1d292:	4694      	mov	ip, r2
   1d294:	4646      	mov	r6, r8
   1d296:	e028      	b.n	1d2ea <d_print_comp_inner+0xdbe>
   1d298:	2000238c 	.word	0x2000238c
   1d29c:	200023e8 	.word	0x200023e8
   1d2a0:	200023c8 	.word	0x200023c8
   1d2a4:	200023a8 	.word	0x200023a8
   1d2a8:	20002348 	.word	0x20002348
   1d2ac:	2000234c 	.word	0x2000234c
   1d2b0:	20001aa4 	.word	0x20001aa4
   1d2b4:	20002318 	.word	0x20002318
   1d2b8:	68ab      	ldr	r3, [r5, #8]
   1d2ba:	b9a3      	cbnz	r3, 1d2e6 <d_print_comp_inner+0xdba>
   1d2bc:	2f03      	cmp	r7, #3
   1d2be:	f63f a9a2 	bhi.w	1c606 <d_print_comp_inner+0xda>
   1d2c2:	ab14      	add	r3, sp, #80	; 0x50
   1d2c4:	eb03 1b07 	add.w	fp, r3, r7, lsl #4
   1d2c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1d2cc:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
   1d2d0:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
   1d2d4:	f84b 6c40 	str.w	r6, [fp, #-64]
   1d2d8:	eb08 1607 	add.w	r6, r8, r7, lsl #4
   1d2dc:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
   1d2e0:	3701      	adds	r7, #1
   1d2e2:	f8c5 e008 	str.w	lr, [r5, #8]
   1d2e6:	682d      	ldr	r5, [r5, #0]
   1d2e8:	b125      	cbz	r5, 1d2f4 <d_print_comp_inner+0xdc8>
   1d2ea:	686b      	ldr	r3, [r5, #4]
   1d2ec:	781b      	ldrb	r3, [r3, #0]
   1d2ee:	3b19      	subs	r3, #25
   1d2f0:	2b02      	cmp	r3, #2
   1d2f2:	d9e1      	bls.n	1d2b8 <d_print_comp_inner+0xd8c>
   1d2f4:	f8dc 2010 	ldr.w	r2, [ip, #16]
   1d2f8:	2111      	movs	r1, #17
   1d2fa:	4620      	mov	r0, r4
   1d2fc:	4666      	mov	r6, ip
   1d2fe:	f001 f98f 	bl	1e620 <d_print_comp>
   1d302:	9b06      	ldr	r3, [sp, #24]
   1d304:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1d308:	2b00      	cmp	r3, #0
   1d30a:	f47f a97f 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d30e:	2f01      	cmp	r7, #1
   1d310:	d00c      	beq.n	1d32c <d_print_comp_inner+0xe00>
   1d312:	eb08 1807 	add.w	r8, r8, r7, lsl #4
   1d316:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1d31a:	3f01      	subs	r7, #1
   1d31c:	2111      	movs	r1, #17
   1d31e:	4620      	mov	r0, r4
   1d320:	f001 f9ac 	bl	1e67c <d_print_mod>
   1d324:	2f01      	cmp	r7, #1
   1d326:	f1a8 0810 	sub.w	r8, r8, #16
   1d32a:	d1f4      	bne.n	1d316 <d_print_comp_inner+0xdea>
   1d32c:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   1d330:	4632      	mov	r2, r6
   1d332:	2111      	movs	r1, #17
   1d334:	4620      	mov	r0, r4
   1d336:	f001 fecd 	bl	1f0d4 <d_print_array_type>
   1d33a:	f7ff b967 	b.w	1c60c <d_print_comp_inner+0xe0>
   1d33e:	4fc6      	ldr	r7, [pc, #792]	; (1d658 <d_print_comp_inner+0x112c>)
   1d340:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d344:	f107 0919 	add.w	r9, r7, #25
   1d348:	2563      	movs	r5, #99	; 0x63
   1d34a:	f04f 0800 	mov.w	r8, #0
   1d34e:	e00b      	b.n	1d368 <d_print_comp_inner+0xe3c>
   1d350:	460b      	mov	r3, r1
   1d352:	3101      	adds	r1, #1
   1d354:	45b9      	cmp	r9, r7
   1d356:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d35a:	54e5      	strb	r5, [r4, r3]
   1d35c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d360:	f43f a977 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d364:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d368:	29ff      	cmp	r1, #255	; 0xff
   1d36a:	d1f1      	bne.n	1d350 <d_print_comp_inner+0xe24>
   1d36c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d370:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d374:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d378:	4620      	mov	r0, r4
   1d37a:	4798      	blx	r3
   1d37c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d380:	3301      	adds	r3, #1
   1d382:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d386:	2101      	movs	r1, #1
   1d388:	2300      	movs	r3, #0
   1d38a:	e7e3      	b.n	1d354 <d_print_comp_inner+0xe28>
   1d38c:	4fb3      	ldr	r7, [pc, #716]	; (1d65c <d_print_comp_inner+0x1130>)
   1d38e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d392:	f107 0910 	add.w	r9, r7, #16
   1d396:	2576      	movs	r5, #118	; 0x76
   1d398:	f04f 0800 	mov.w	r8, #0
   1d39c:	e00b      	b.n	1d3b6 <d_print_comp_inner+0xe8a>
   1d39e:	460b      	mov	r3, r1
   1d3a0:	3101      	adds	r1, #1
   1d3a2:	45b9      	cmp	r9, r7
   1d3a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d3a8:	54e5      	strb	r5, [r4, r3]
   1d3aa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d3ae:	f43f a950 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d3b2:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d3b6:	29ff      	cmp	r1, #255	; 0xff
   1d3b8:	d1f1      	bne.n	1d39e <d_print_comp_inner+0xe72>
   1d3ba:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d3be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d3c2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d3c6:	4620      	mov	r0, r4
   1d3c8:	4798      	blx	r3
   1d3ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d3ce:	3301      	adds	r3, #1
   1d3d0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d3d4:	2101      	movs	r1, #1
   1d3d6:	2300      	movs	r3, #0
   1d3d8:	e7e3      	b.n	1d3a2 <d_print_comp_inner+0xe76>
   1d3da:	4fa1      	ldr	r7, [pc, #644]	; (1d660 <d_print_comp_inner+0x1134>)
   1d3dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d3e0:	f107 0914 	add.w	r9, r7, #20
   1d3e4:	256e      	movs	r5, #110	; 0x6e
   1d3e6:	f04f 0800 	mov.w	r8, #0
   1d3ea:	e00b      	b.n	1d404 <d_print_comp_inner+0xed8>
   1d3ec:	460b      	mov	r3, r1
   1d3ee:	3101      	adds	r1, #1
   1d3f0:	45b9      	cmp	r9, r7
   1d3f2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d3f6:	54e5      	strb	r5, [r4, r3]
   1d3f8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d3fc:	f43f a929 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d400:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d404:	29ff      	cmp	r1, #255	; 0xff
   1d406:	d1f1      	bne.n	1d3ec <d_print_comp_inner+0xec0>
   1d408:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d40c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d410:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d414:	4620      	mov	r0, r4
   1d416:	4798      	blx	r3
   1d418:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d41c:	3301      	adds	r3, #1
   1d41e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d422:	2101      	movs	r1, #1
   1d424:	2300      	movs	r3, #0
   1d426:	e7e3      	b.n	1d3f0 <d_print_comp_inner+0xec4>
   1d428:	4f8e      	ldr	r7, [pc, #568]	; (1d664 <d_print_comp_inner+0x1138>)
   1d42a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d42e:	f107 0918 	add.w	r9, r7, #24
   1d432:	2554      	movs	r5, #84	; 0x54
   1d434:	f04f 0800 	mov.w	r8, #0
   1d438:	e00b      	b.n	1d452 <d_print_comp_inner+0xf26>
   1d43a:	460b      	mov	r3, r1
   1d43c:	3101      	adds	r1, #1
   1d43e:	45b9      	cmp	r9, r7
   1d440:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d444:	54e5      	strb	r5, [r4, r3]
   1d446:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d44a:	f43f a902 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d44e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d452:	29ff      	cmp	r1, #255	; 0xff
   1d454:	d1f1      	bne.n	1d43a <d_print_comp_inner+0xf0e>
   1d456:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d45a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d45e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d462:	4620      	mov	r0, r4
   1d464:	4798      	blx	r3
   1d466:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d46a:	3301      	adds	r3, #1
   1d46c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d470:	2101      	movs	r1, #1
   1d472:	2300      	movs	r3, #0
   1d474:	e7e3      	b.n	1d43e <d_print_comp_inner+0xf12>
   1d476:	4f7c      	ldr	r7, [pc, #496]	; (1d668 <d_print_comp_inner+0x113c>)
   1d478:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d47c:	f107 0915 	add.w	r9, r7, #21
   1d480:	2554      	movs	r5, #84	; 0x54
   1d482:	f04f 0800 	mov.w	r8, #0
   1d486:	e00b      	b.n	1d4a0 <d_print_comp_inner+0xf74>
   1d488:	460b      	mov	r3, r1
   1d48a:	3101      	adds	r1, #1
   1d48c:	45b9      	cmp	r9, r7
   1d48e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d492:	54e5      	strb	r5, [r4, r3]
   1d494:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d498:	f43f a8db 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d49c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d4a0:	29ff      	cmp	r1, #255	; 0xff
   1d4a2:	d1f1      	bne.n	1d488 <d_print_comp_inner+0xf5c>
   1d4a4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d4a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d4ac:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d4b0:	4620      	mov	r0, r4
   1d4b2:	4798      	blx	r3
   1d4b4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d4b8:	3301      	adds	r3, #1
   1d4ba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d4be:	2101      	movs	r1, #1
   1d4c0:	2300      	movs	r3, #0
   1d4c2:	e7e3      	b.n	1d48c <d_print_comp_inner+0xf60>
   1d4c4:	4f69      	ldr	r7, [pc, #420]	; (1d66c <d_print_comp_inner+0x1140>)
   1d4c6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d4ca:	f107 0912 	add.w	r9, r7, #18
   1d4ce:	2567      	movs	r5, #103	; 0x67
   1d4d0:	f04f 0800 	mov.w	r8, #0
   1d4d4:	e00b      	b.n	1d4ee <d_print_comp_inner+0xfc2>
   1d4d6:	460b      	mov	r3, r1
   1d4d8:	3101      	adds	r1, #1
   1d4da:	45b9      	cmp	r9, r7
   1d4dc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d4e0:	54e5      	strb	r5, [r4, r3]
   1d4e2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d4e6:	f43f a8b4 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d4ea:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d4ee:	29ff      	cmp	r1, #255	; 0xff
   1d4f0:	d1f1      	bne.n	1d4d6 <d_print_comp_inner+0xfaa>
   1d4f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d4f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d4fa:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d4fe:	4620      	mov	r0, r4
   1d500:	4798      	blx	r3
   1d502:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d506:	3301      	adds	r3, #1
   1d508:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d50c:	2101      	movs	r1, #1
   1d50e:	2300      	movs	r3, #0
   1d510:	e7e3      	b.n	1d4da <d_print_comp_inner+0xfae>
   1d512:	4f57      	ldr	r7, [pc, #348]	; (1d670 <d_print_comp_inner+0x1144>)
   1d514:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d518:	f107 090e 	add.w	r9, r7, #14
   1d51c:	256a      	movs	r5, #106	; 0x6a
   1d51e:	f04f 0800 	mov.w	r8, #0
   1d522:	e00b      	b.n	1d53c <d_print_comp_inner+0x1010>
   1d524:	460b      	mov	r3, r1
   1d526:	3101      	adds	r1, #1
   1d528:	45b9      	cmp	r9, r7
   1d52a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d52e:	54e5      	strb	r5, [r4, r3]
   1d530:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d534:	f43f a88d 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d538:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d53c:	29ff      	cmp	r1, #255	; 0xff
   1d53e:	d1f1      	bne.n	1d524 <d_print_comp_inner+0xff8>
   1d540:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d544:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d548:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d54c:	4620      	mov	r0, r4
   1d54e:	4798      	blx	r3
   1d550:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d554:	3301      	adds	r3, #1
   1d556:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d55a:	2101      	movs	r1, #1
   1d55c:	2300      	movs	r3, #0
   1d55e:	e7e3      	b.n	1d528 <d_print_comp_inner+0xffc>
   1d560:	4f44      	ldr	r7, [pc, #272]	; (1d674 <d_print_comp_inner+0x1148>)
   1d562:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d566:	f107 0908 	add.w	r9, r7, #8
   1d56a:	256f      	movs	r5, #111	; 0x6f
   1d56c:	f04f 0800 	mov.w	r8, #0
   1d570:	e00b      	b.n	1d58a <d_print_comp_inner+0x105e>
   1d572:	460b      	mov	r3, r1
   1d574:	3101      	adds	r1, #1
   1d576:	45b9      	cmp	r9, r7
   1d578:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d57c:	54e5      	strb	r5, [r4, r3]
   1d57e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d582:	f000 8295 	beq.w	1dab0 <d_print_comp_inner+0x1584>
   1d586:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d58a:	29ff      	cmp	r1, #255	; 0xff
   1d58c:	d1f1      	bne.n	1d572 <d_print_comp_inner+0x1046>
   1d58e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d592:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d596:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d59a:	4620      	mov	r0, r4
   1d59c:	4798      	blx	r3
   1d59e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d5a2:	3301      	adds	r3, #1
   1d5a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d5a8:	2101      	movs	r1, #1
   1d5aa:	2300      	movs	r3, #0
   1d5ac:	e7e3      	b.n	1d576 <d_print_comp_inner+0x104a>
   1d5ae:	4f31      	ldr	r7, [pc, #196]	; (1d674 <d_print_comp_inner+0x1148>)
   1d5b0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d5b4:	f107 0908 	add.w	r9, r7, #8
   1d5b8:	256f      	movs	r5, #111	; 0x6f
   1d5ba:	f04f 0800 	mov.w	r8, #0
   1d5be:	e00b      	b.n	1d5d8 <d_print_comp_inner+0x10ac>
   1d5c0:	460b      	mov	r3, r1
   1d5c2:	3101      	adds	r1, #1
   1d5c4:	45b9      	cmp	r9, r7
   1d5c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d5ca:	54e5      	strb	r5, [r4, r3]
   1d5cc:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d5d0:	f43f a853 	beq.w	1c67a <d_print_comp_inner+0x14e>
   1d5d4:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d5d8:	29ff      	cmp	r1, #255	; 0xff
   1d5da:	d1f1      	bne.n	1d5c0 <d_print_comp_inner+0x1094>
   1d5dc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d5e0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d5e4:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d5e8:	4620      	mov	r0, r4
   1d5ea:	4798      	blx	r3
   1d5ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d5f0:	3301      	adds	r3, #1
   1d5f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d5f6:	2101      	movs	r1, #1
   1d5f8:	2300      	movs	r3, #0
   1d5fa:	e7e3      	b.n	1d5c4 <d_print_comp_inner+0x1098>
   1d5fc:	68d2      	ldr	r2, [r2, #12]
   1d5fe:	2111      	movs	r1, #17
   1d600:	f001 f80e 	bl	1e620 <d_print_comp>
   1d604:	f7ff b839 	b.w	1c67a <d_print_comp_inner+0x14e>
   1d608:	4f1b      	ldr	r7, [pc, #108]	; (1d678 <d_print_comp_inner+0x114c>)
   1d60a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d60e:	f107 090d 	add.w	r9, r7, #13
   1d612:	256a      	movs	r5, #106	; 0x6a
   1d614:	f04f 0800 	mov.w	r8, #0
   1d618:	e00b      	b.n	1d632 <d_print_comp_inner+0x1106>
   1d61a:	460b      	mov	r3, r1
   1d61c:	3101      	adds	r1, #1
   1d61e:	45b9      	cmp	r9, r7
   1d620:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d624:	54e5      	strb	r5, [r4, r3]
   1d626:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d62a:	f43f a812 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d62e:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d632:	29ff      	cmp	r1, #255	; 0xff
   1d634:	d1f1      	bne.n	1d61a <d_print_comp_inner+0x10ee>
   1d636:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d63a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d63e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d642:	4620      	mov	r0, r4
   1d644:	4798      	blx	r3
   1d646:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d64a:	3301      	adds	r3, #1
   1d64c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d650:	2101      	movs	r1, #1
   1d652:	2300      	movs	r3, #0
   1d654:	e7e3      	b.n	1d61e <d_print_comp_inner+0x10f2>
   1d656:	bf00      	nop
   1d658:	20002254 	.word	0x20002254
   1d65c:	20002240 	.word	0x20002240
   1d660:	2000223c 	.word	0x2000223c
   1d664:	200022ac 	.word	0x200022ac
   1d668:	20002294 	.word	0x20002294
   1d66c:	20002280 	.word	0x20002280
   1d670:	20002270 	.word	0x20002270
   1d674:	20002338 	.word	0x20002338
   1d678:	2000237c 	.word	0x2000237c
   1d67c:	2300      	movs	r3, #0
   1d67e:	f8d0 8114 	ldr.w	r8, [r0, #276]	; 0x114
   1d682:	f8d0 7148 	ldr.w	r7, [r0, #328]	; 0x148
   1d686:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   1d68a:	2111      	movs	r1, #17
   1d68c:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   1d690:	68d2      	ldr	r2, [r2, #12]
   1d692:	f000 ffc5 	bl	1e620 <d_print_comp>
   1d696:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1d69a:	2b3c      	cmp	r3, #60	; 0x3c
   1d69c:	f000 857c 	beq.w	1e198 <d_print_comp_inner+0x1c6c>
   1d6a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d6a4:	29ff      	cmp	r1, #255	; 0xff
   1d6a6:	f000 8567 	beq.w	1e178 <d_print_comp_inner+0x1c4c>
   1d6aa:	1c4b      	adds	r3, r1, #1
   1d6ac:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d6b0:	233c      	movs	r3, #60	; 0x3c
   1d6b2:	5463      	strb	r3, [r4, r1]
   1d6b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d6b8:	6932      	ldr	r2, [r6, #16]
   1d6ba:	2111      	movs	r1, #17
   1d6bc:	4620      	mov	r0, r4
   1d6be:	f000 ffaf 	bl	1e620 <d_print_comp>
   1d6c2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1d6c6:	2b3e      	cmp	r3, #62	; 0x3e
   1d6c8:	f000 8550 	beq.w	1e16c <d_print_comp_inner+0x1c40>
   1d6cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d6d0:	29ff      	cmp	r1, #255	; 0xff
   1d6d2:	f000 853b 	beq.w	1e14c <d_print_comp_inner+0x1c20>
   1d6d6:	1c4b      	adds	r3, r1, #1
   1d6d8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1d6dc:	233e      	movs	r3, #62	; 0x3e
   1d6de:	5463      	strb	r3, [r4, r1]
   1d6e0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d6e4:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
   1d6e8:	f8c4 7148 	str.w	r7, [r4, #328]	; 0x148
   1d6ec:	f7fe bf8e 	b.w	1c60c <d_print_comp_inner+0xe0>
   1d6f0:	4fc4      	ldr	r7, [pc, #784]	; (1da04 <d_print_comp_inner+0x14d8>)
   1d6f2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d6f6:	f107 0907 	add.w	r9, r7, #7
   1d6fa:	2556      	movs	r5, #86	; 0x56
   1d6fc:	f04f 0800 	mov.w	r8, #0
   1d700:	e00b      	b.n	1d71a <d_print_comp_inner+0x11ee>
   1d702:	460b      	mov	r3, r1
   1d704:	3101      	adds	r1, #1
   1d706:	454f      	cmp	r7, r9
   1d708:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d70c:	54e5      	strb	r5, [r4, r3]
   1d70e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d712:	f43e af9e 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d716:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d71a:	29ff      	cmp	r1, #255	; 0xff
   1d71c:	d1f1      	bne.n	1d702 <d_print_comp_inner+0x11d6>
   1d71e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d722:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d726:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d72a:	4620      	mov	r0, r4
   1d72c:	4798      	blx	r3
   1d72e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d732:	3301      	adds	r3, #1
   1d734:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d738:	2101      	movs	r1, #1
   1d73a:	2300      	movs	r3, #0
   1d73c:	e7e3      	b.n	1d706 <d_print_comp_inner+0x11da>
   1d73e:	4fb2      	ldr	r7, [pc, #712]	; (1da08 <d_print_comp_inner+0x14dc>)
   1d740:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d744:	f107 090a 	add.w	r9, r7, #10
   1d748:	2576      	movs	r5, #118	; 0x76
   1d74a:	f04f 0800 	mov.w	r8, #0
   1d74e:	e00b      	b.n	1d768 <d_print_comp_inner+0x123c>
   1d750:	460b      	mov	r3, r1
   1d752:	3101      	adds	r1, #1
   1d754:	45b9      	cmp	r9, r7
   1d756:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d75a:	54e5      	strb	r5, [r4, r3]
   1d75c:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1d760:	f43e af77 	beq.w	1c652 <d_print_comp_inner+0x126>
   1d764:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1d768:	29ff      	cmp	r1, #255	; 0xff
   1d76a:	d1f1      	bne.n	1d750 <d_print_comp_inner+0x1224>
   1d76c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d770:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d774:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d778:	4620      	mov	r0, r4
   1d77a:	4798      	blx	r3
   1d77c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d780:	3301      	adds	r3, #1
   1d782:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d786:	2101      	movs	r1, #1
   1d788:	2300      	movs	r3, #0
   1d78a:	e7e3      	b.n	1d754 <d_print_comp_inner+0x1228>
   1d78c:	6913      	ldr	r3, [r2, #16]
   1d78e:	781a      	ldrb	r2, [r3, #0]
   1d790:	2a3b      	cmp	r2, #59	; 0x3b
   1d792:	f47e af38 	bne.w	1c606 <d_print_comp_inner+0xda>
   1d796:	691b      	ldr	r3, [r3, #16]
   1d798:	781b      	ldrb	r3, [r3, #0]
   1d79a:	2b3c      	cmp	r3, #60	; 0x3c
   1d79c:	f47e af33 	bne.w	1c606 <d_print_comp_inner+0xda>
   1d7a0:	4632      	mov	r2, r6
   1d7a2:	2111      	movs	r1, #17
   1d7a4:	f001 ffe4 	bl	1f770 <d_maybe_print_fold_expression>
   1d7a8:	2800      	cmp	r0, #0
   1d7aa:	f47e af2f 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d7ae:	4632      	mov	r2, r6
   1d7b0:	2111      	movs	r1, #17
   1d7b2:	4620      	mov	r0, r4
   1d7b4:	f002 f906 	bl	1f9c4 <d_maybe_print_designated_init>
   1d7b8:	2800      	cmp	r0, #0
   1d7ba:	f47e af27 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1d7be:	e9d6 8303 	ldrd	r8, r3, [r6, #12]
   1d7c2:	e9d3 6303 	ldrd	r6, r3, [r3, #12]
   1d7c6:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1d7ca:	4990      	ldr	r1, [pc, #576]	; (1da0c <d_print_comp_inner+0x14e0>)
   1d7cc:	6810      	ldr	r0, [r2, #0]
   1d7ce:	e9d3 7503 	ldrd	r7, r5, [r3, #12]
   1d7d2:	f004 ffc9 	bl	22768 <strcmp>
   1d7d6:	2800      	cmp	r0, #0
   1d7d8:	f040 86e5 	bne.w	1e5a6 <d_print_comp_inner+0x207a>
   1d7dc:	4632      	mov	r2, r6
   1d7de:	4620      	mov	r0, r4
   1d7e0:	2111      	movs	r1, #17
   1d7e2:	f001 ff57 	bl	1f694 <d_print_subexpr>
   1d7e6:	4642      	mov	r2, r8
   1d7e8:	4620      	mov	r0, r4
   1d7ea:	2111      	movs	r1, #17
   1d7ec:	f001 fd56 	bl	1f29c <d_print_expr_op>
   1d7f0:	4620      	mov	r0, r4
   1d7f2:	463a      	mov	r2, r7
   1d7f4:	2111      	movs	r1, #17
   1d7f6:	f001 ff4d 	bl	1f694 <d_print_subexpr>
   1d7fa:	4985      	ldr	r1, [pc, #532]	; (1da10 <d_print_comp_inner+0x14e4>)
   1d7fc:	4620      	mov	r0, r4
   1d7fe:	f7fc fce3 	bl	1a1c8 <d_append_string>
   1d802:	e4fe      	b.n	1d202 <d_print_comp_inner+0xcd6>
   1d804:	e9d2 5303 	ldrd	r5, r3, [r2, #12]
   1d808:	2b00      	cmp	r3, #0
   1d80a:	f43e aeff 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1d80e:	442b      	add	r3, r5
   1d810:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d814:	3d01      	subs	r5, #1
   1d816:	1e5f      	subs	r7, r3, #1
   1d818:	f04f 0800 	mov.w	r8, #0
   1d81c:	e009      	b.n	1d832 <d_print_comp_inner+0x1306>
   1d81e:	460b      	mov	r3, r1
   1d820:	3101      	adds	r1, #1
   1d822:	42af      	cmp	r7, r5
   1d824:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d828:	54e6      	strb	r6, [r4, r3]
   1d82a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d82e:	f43e aeed 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1d832:	29ff      	cmp	r1, #255	; 0xff
   1d834:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d838:	d1f1      	bne.n	1d81e <d_print_comp_inner+0x12f2>
   1d83a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d83e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d842:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d846:	4620      	mov	r0, r4
   1d848:	4798      	blx	r3
   1d84a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d84e:	3301      	adds	r3, #1
   1d850:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d854:	2101      	movs	r1, #1
   1d856:	2300      	movs	r3, #0
   1d858:	e7e3      	b.n	1d822 <d_print_comp_inner+0x12f6>
   1d85a:	68d2      	ldr	r2, [r2, #12]
   1d85c:	e9d2 5300 	ldrd	r5, r3, [r2]
   1d860:	2b00      	cmp	r3, #0
   1d862:	f43e aed3 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1d866:	442b      	add	r3, r5
   1d868:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1d86c:	3d01      	subs	r5, #1
   1d86e:	1e5f      	subs	r7, r3, #1
   1d870:	f04f 0800 	mov.w	r8, #0
   1d874:	e009      	b.n	1d88a <d_print_comp_inner+0x135e>
   1d876:	460b      	mov	r3, r1
   1d878:	3101      	adds	r1, #1
   1d87a:	42af      	cmp	r7, r5
   1d87c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d880:	54e6      	strb	r6, [r4, r3]
   1d882:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d886:	f43e aec1 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1d88a:	29ff      	cmp	r1, #255	; 0xff
   1d88c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1d890:	d1f1      	bne.n	1d876 <d_print_comp_inner+0x134a>
   1d892:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d896:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d89a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d89e:	4620      	mov	r0, r4
   1d8a0:	4798      	blx	r3
   1d8a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d8a6:	3301      	adds	r3, #1
   1d8a8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d8ac:	2101      	movs	r1, #1
   1d8ae:	2300      	movs	r3, #0
   1d8b0:	e7e3      	b.n	1d87a <d_print_comp_inner+0x134e>
   1d8b2:	4958      	ldr	r1, [pc, #352]	; (1da14 <d_print_comp_inner+0x14e8>)
   1d8b4:	4620      	mov	r0, r4
   1d8b6:	f7fc fc87 	bl	1a1c8 <d_append_string>
   1d8ba:	693a      	ldr	r2, [r7, #16]
   1d8bc:	4956      	ldr	r1, [pc, #344]	; (1da18 <d_print_comp_inner+0x14ec>)
   1d8be:	3201      	adds	r2, #1
   1d8c0:	a804      	add	r0, sp, #16
   1d8c2:	f004 f961 	bl	21b88 <sprintf>
   1d8c6:	a804      	add	r0, sp, #16
   1d8c8:	f005 f99a 	bl	22c00 <strlen>
   1d8cc:	2800      	cmp	r0, #0
   1d8ce:	f000 83fb 	beq.w	1e0c8 <d_print_comp_inner+0x1b9c>
   1d8d2:	ad04      	add	r5, sp, #16
   1d8d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d8d8:	eb05 0900 	add.w	r9, r5, r0
   1d8dc:	f04f 0800 	mov.w	r8, #0
   1d8e0:	e009      	b.n	1d8f6 <d_print_comp_inner+0x13ca>
   1d8e2:	460b      	mov	r3, r1
   1d8e4:	3101      	adds	r1, #1
   1d8e6:	45a9      	cmp	r9, r5
   1d8e8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d8ec:	54e6      	strb	r6, [r4, r3]
   1d8ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d8f2:	f000 83e9 	beq.w	1e0c8 <d_print_comp_inner+0x1b9c>
   1d8f6:	29ff      	cmp	r1, #255	; 0xff
   1d8f8:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d8fc:	d1f1      	bne.n	1d8e2 <d_print_comp_inner+0x13b6>
   1d8fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d902:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d906:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d90a:	4620      	mov	r0, r4
   1d90c:	4798      	blx	r3
   1d90e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d912:	3301      	adds	r3, #1
   1d914:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d918:	2101      	movs	r1, #1
   1d91a:	2300      	movs	r3, #0
   1d91c:	e7e3      	b.n	1d8e6 <d_print_comp_inner+0x13ba>
   1d91e:	2111      	movs	r1, #17
   1d920:	6932      	ldr	r2, [r6, #16]
   1d922:	4620      	mov	r0, r4
   1d924:	f000 fe7c 	bl	1e620 <d_print_comp>
   1d928:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d92c:	29ff      	cmp	r1, #255	; 0xff
   1d92e:	f000 8299 	beq.w	1de64 <d_print_comp_inner+0x1938>
   1d932:	1c4a      	adds	r2, r1, #1
   1d934:	235d      	movs	r3, #93	; 0x5d
   1d936:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1d93a:	5463      	strb	r3, [r4, r1]
   1d93c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1d940:	f7fe be64 	b.w	1c60c <d_print_comp_inner+0xe0>
   1d944:	2801      	cmp	r0, #1
   1d946:	f240 8196 	bls.w	1dc76 <d_print_comp_inner+0x174a>
   1d94a:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1d94e:	f7ff bb30 	b.w	1cfb2 <d_print_comp_inner+0xa86>
   1d952:	68f2      	ldr	r2, [r6, #12]
   1d954:	4930      	ldr	r1, [pc, #192]	; (1da18 <d_print_comp_inner+0x14ec>)
   1d956:	3201      	adds	r2, #1
   1d958:	a804      	add	r0, sp, #16
   1d95a:	f004 f915 	bl	21b88 <sprintf>
   1d95e:	a804      	add	r0, sp, #16
   1d960:	f005 f94e 	bl	22c00 <strlen>
   1d964:	b318      	cbz	r0, 1d9ae <d_print_comp_inner+0x1482>
   1d966:	ad04      	add	r5, sp, #16
   1d968:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d96c:	182f      	adds	r7, r5, r0
   1d96e:	f04f 0800 	mov.w	r8, #0
   1d972:	e008      	b.n	1d986 <d_print_comp_inner+0x145a>
   1d974:	460b      	mov	r3, r1
   1d976:	3101      	adds	r1, #1
   1d978:	42af      	cmp	r7, r5
   1d97a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1d97e:	54e6      	strb	r6, [r4, r3]
   1d980:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1d984:	d015      	beq.n	1d9b2 <d_print_comp_inner+0x1486>
   1d986:	29ff      	cmp	r1, #255	; 0xff
   1d988:	f815 6b01 	ldrb.w	r6, [r5], #1
   1d98c:	d1f2      	bne.n	1d974 <d_print_comp_inner+0x1448>
   1d98e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1d992:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1d996:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1d99a:	4620      	mov	r0, r4
   1d99c:	4798      	blx	r3
   1d99e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d9a2:	3301      	adds	r3, #1
   1d9a4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d9a8:	2101      	movs	r1, #1
   1d9aa:	2300      	movs	r3, #0
   1d9ac:	e7e4      	b.n	1d978 <d_print_comp_inner+0x144c>
   1d9ae:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d9b2:	29ff      	cmp	r1, #255	; 0xff
   1d9b4:	f47f a91a 	bne.w	1cbec <d_print_comp_inner+0x6c0>
   1d9b8:	2500      	movs	r5, #0
   1d9ba:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1d9be:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1d9c2:	4620      	mov	r0, r4
   1d9c4:	4798      	blx	r3
   1d9c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1d9ca:	2201      	movs	r2, #1
   1d9cc:	4413      	add	r3, r2
   1d9ce:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1d9d2:	4629      	mov	r1, r5
   1d9d4:	f7ff b90b 	b.w	1cbee <d_print_comp_inner+0x6c2>
   1d9d8:	687d      	ldr	r5, [r7, #4]
   1d9da:	782b      	ldrb	r3, [r5, #0]
   1d9dc:	3b61      	subs	r3, #97	; 0x61
   1d9de:	2b19      	cmp	r3, #25
   1d9e0:	f240 832d 	bls.w	1e03e <d_print_comp_inner+0x1b12>
   1d9e4:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
   1d9e8:	5deb      	ldrb	r3, [r5, r7]
   1d9ea:	2b20      	cmp	r3, #32
   1d9ec:	bf18      	it	ne
   1d9ee:	4647      	movne	r7, r8
   1d9f0:	2f00      	cmp	r7, #0
   1d9f2:	f43e ae0b 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1d9f6:	3d01      	subs	r5, #1
   1d9f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1d9fc:	442f      	add	r7, r5
   1d9fe:	f04f 0800 	mov.w	r8, #0
   1da02:	e015      	b.n	1da30 <d_print_comp_inner+0x1504>
   1da04:	200021d4 	.word	0x200021d4
   1da08:	200021c8 	.word	0x200021c8
   1da0c:	20002350 	.word	0x20002350
   1da10:	20002354 	.word	0x20002354
   1da14:	2000218c 	.word	0x2000218c
   1da18:	2000213c 	.word	0x2000213c
   1da1c:	460b      	mov	r3, r1
   1da1e:	3101      	adds	r1, #1
   1da20:	42af      	cmp	r7, r5
   1da22:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1da26:	54e6      	strb	r6, [r4, r3]
   1da28:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1da2c:	f43e adee 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1da30:	29ff      	cmp	r1, #255	; 0xff
   1da32:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1da36:	d1f1      	bne.n	1da1c <d_print_comp_inner+0x14f0>
   1da38:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1da3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1da40:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1da44:	4620      	mov	r0, r4
   1da46:	4798      	blx	r3
   1da48:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1da4c:	3301      	adds	r3, #1
   1da4e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1da52:	2101      	movs	r1, #1
   1da54:	2300      	movs	r3, #0
   1da56:	e7e3      	b.n	1da20 <d_print_comp_inner+0x14f4>
   1da58:	4fcc      	ldr	r7, [pc, #816]	; (1dd8c <d_print_comp_inner+0x1860>)
   1da5a:	6932      	ldr	r2, [r6, #16]
   1da5c:	2111      	movs	r1, #17
   1da5e:	4620      	mov	r0, r4
   1da60:	f000 fdde 	bl	1e620 <d_print_comp>
   1da64:	f107 0904 	add.w	r9, r7, #4
   1da68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1da6c:	2520      	movs	r5, #32
   1da6e:	f04f 0800 	mov.w	r8, #0
   1da72:	e00b      	b.n	1da8c <d_print_comp_inner+0x1560>
   1da74:	460b      	mov	r3, r1
   1da76:	3101      	adds	r1, #1
   1da78:	45b9      	cmp	r9, r7
   1da7a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1da7e:	54e5      	strb	r5, [r4, r3]
   1da80:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1da84:	f43e ade5 	beq.w	1c652 <d_print_comp_inner+0x126>
   1da88:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1da8c:	29ff      	cmp	r1, #255	; 0xff
   1da8e:	d1f1      	bne.n	1da74 <d_print_comp_inner+0x1548>
   1da90:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1da94:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1da98:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1da9c:	4620      	mov	r0, r4
   1da9e:	4798      	blx	r3
   1daa0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1daa4:	3301      	adds	r3, #1
   1daa6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1daaa:	2101      	movs	r1, #1
   1daac:	2300      	movs	r3, #0
   1daae:	e7e3      	b.n	1da78 <d_print_comp_inner+0x154c>
   1dab0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1dab4:	b133      	cbz	r3, 1dac4 <d_print_comp_inner+0x1598>
   1dab6:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
   1daba:	9104      	str	r1, [sp, #16]
   1dabc:	aa04      	add	r2, sp, #16
   1dabe:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
   1dac2:	9305      	str	r3, [sp, #20]
   1dac4:	68f2      	ldr	r2, [r6, #12]
   1dac6:	7813      	ldrb	r3, [r2, #0]
   1dac8:	2b04      	cmp	r3, #4
   1daca:	f000 8207 	beq.w	1dedc <d_print_comp_inner+0x19b0>
   1dace:	2111      	movs	r1, #17
   1dad0:	4620      	mov	r0, r4
   1dad2:	f000 fda5 	bl	1e620 <d_print_comp>
   1dad6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1dada:	2b00      	cmp	r3, #0
   1dadc:	f43e ad96 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1dae0:	9b04      	ldr	r3, [sp, #16]
   1dae2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1dae6:	f7fe bd91 	b.w	1c60c <d_print_comp_inner+0xe0>
   1daea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1daee:	68f2      	ldr	r2, [r6, #12]
   1daf0:	4fa7      	ldr	r7, [pc, #668]	; (1dd90 <d_print_comp_inner+0x1864>)
   1daf2:	3301      	adds	r3, #1
   1daf4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1daf8:	2111      	movs	r1, #17
   1dafa:	4620      	mov	r0, r4
   1dafc:	f000 fd90 	bl	1e620 <d_print_comp>
   1db00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   1db04:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1db08:	3b01      	subs	r3, #1
   1db0a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1db0e:	f107 0901 	add.w	r9, r7, #1
   1db12:	2529      	movs	r5, #41	; 0x29
   1db14:	f04f 0800 	mov.w	r8, #0
   1db18:	e00a      	b.n	1db30 <d_print_comp_inner+0x1604>
   1db1a:	460b      	mov	r3, r1
   1db1c:	3101      	adds	r1, #1
   1db1e:	454f      	cmp	r7, r9
   1db20:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1db24:	54e5      	strb	r5, [r4, r3]
   1db26:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1db2a:	d013      	beq.n	1db54 <d_print_comp_inner+0x1628>
   1db2c:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1db30:	29ff      	cmp	r1, #255	; 0xff
   1db32:	d1f2      	bne.n	1db1a <d_print_comp_inner+0x15ee>
   1db34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1db38:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1db3c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1db40:	4620      	mov	r0, r4
   1db42:	4798      	blx	r3
   1db44:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1db48:	3301      	adds	r3, #1
   1db4a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1db4e:	2101      	movs	r1, #1
   1db50:	2300      	movs	r3, #0
   1db52:	e7e4      	b.n	1db1e <d_print_comp_inner+0x15f2>
   1db54:	6932      	ldr	r2, [r6, #16]
   1db56:	498f      	ldr	r1, [pc, #572]	; (1dd94 <d_print_comp_inner+0x1868>)
   1db58:	3201      	adds	r2, #1
   1db5a:	a804      	add	r0, sp, #16
   1db5c:	f004 f814 	bl	21b88 <sprintf>
   1db60:	a804      	add	r0, sp, #16
   1db62:	f005 f84d 	bl	22c00 <strlen>
   1db66:	2800      	cmp	r0, #0
   1db68:	f43f af21 	beq.w	1d9ae <d_print_comp_inner+0x1482>
   1db6c:	ad04      	add	r5, sp, #16
   1db6e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1db72:	182f      	adds	r7, r5, r0
   1db74:	f04f 0800 	mov.w	r8, #0
   1db78:	e009      	b.n	1db8e <d_print_comp_inner+0x1662>
   1db7a:	460b      	mov	r3, r1
   1db7c:	3101      	adds	r1, #1
   1db7e:	42bd      	cmp	r5, r7
   1db80:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1db84:	54e6      	strb	r6, [r4, r3]
   1db86:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1db8a:	f43f af12 	beq.w	1d9b2 <d_print_comp_inner+0x1486>
   1db8e:	29ff      	cmp	r1, #255	; 0xff
   1db90:	f815 6b01 	ldrb.w	r6, [r5], #1
   1db94:	d1f1      	bne.n	1db7a <d_print_comp_inner+0x164e>
   1db96:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1db9a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1db9e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dba2:	4620      	mov	r0, r4
   1dba4:	4798      	blx	r3
   1dba6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dbaa:	3301      	adds	r3, #1
   1dbac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dbb0:	2101      	movs	r1, #1
   1dbb2:	2300      	movs	r3, #0
   1dbb4:	e7e3      	b.n	1db7e <d_print_comp_inner+0x1652>
   1dbb6:	4f78      	ldr	r7, [pc, #480]	; (1dd98 <d_print_comp_inner+0x186c>)
   1dbb8:	68f2      	ldr	r2, [r6, #12]
   1dbba:	2111      	movs	r1, #17
   1dbbc:	4620      	mov	r0, r4
   1dbbe:	f000 fd2f 	bl	1e620 <d_print_comp>
   1dbc2:	f107 0903 	add.w	r9, r7, #3
   1dbc6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1dbca:	252d      	movs	r5, #45	; 0x2d
   1dbcc:	f04f 0800 	mov.w	r8, #0
   1dbd0:	e00b      	b.n	1dbea <d_print_comp_inner+0x16be>
   1dbd2:	460b      	mov	r3, r1
   1dbd4:	3101      	adds	r1, #1
   1dbd6:	45b9      	cmp	r9, r7
   1dbd8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dbdc:	54e5      	strb	r5, [r4, r3]
   1dbde:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dbe2:	f43e ad4a 	beq.w	1c67a <d_print_comp_inner+0x14e>
   1dbe6:	f817 5f01 	ldrb.w	r5, [r7, #1]!
   1dbea:	29ff      	cmp	r1, #255	; 0xff
   1dbec:	d1f1      	bne.n	1dbd2 <d_print_comp_inner+0x16a6>
   1dbee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dbf2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dbf6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dbfa:	4620      	mov	r0, r4
   1dbfc:	4798      	blx	r3
   1dbfe:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc02:	3301      	adds	r3, #1
   1dc04:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dc08:	2101      	movs	r1, #1
   1dc0a:	2300      	movs	r3, #0
   1dc0c:	e7e3      	b.n	1dbd6 <d_print_comp_inner+0x16aa>
   1dc0e:	68f2      	ldr	r2, [r6, #12]
   1dc10:	f7ff b902 	b.w	1ce18 <d_print_comp_inner+0x8ec>
   1dc14:	4632      	mov	r2, r6
   1dc16:	2111      	movs	r1, #17
   1dc18:	4620      	mov	r0, r4
   1dc1a:	f000 fd2f 	bl	1e67c <d_print_mod>
   1dc1e:	f7fe bd10 	b.w	1c642 <d_print_comp_inner+0x116>
   1dc22:	6932      	ldr	r2, [r6, #16]
   1dc24:	f8d4 6128 	ldr.w	r6, [r4, #296]	; 0x128
   1dc28:	460d      	mov	r5, r1
   1dc2a:	4620      	mov	r0, r4
   1dc2c:	2111      	movs	r1, #17
   1dc2e:	f000 fcf7 	bl	1e620 <d_print_comp>
   1dc32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dc36:	42b3      	cmp	r3, r6
   1dc38:	f47e ace8 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1dc3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1dc40:	429d      	cmp	r5, r3
   1dc42:	f47e ace3 	bne.w	1c60c <d_print_comp_inner+0xe0>
   1dc46:	3d02      	subs	r5, #2
   1dc48:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
   1dc4c:	f7fe bcde 	b.w	1c60c <d_print_comp_inner+0xe0>
   1dc50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1dc54:	29ff      	cmp	r1, #255	; 0xff
   1dc56:	f000 835f 	beq.w	1e318 <d_print_comp_inner+0x1dec>
   1dc5a:	1c4b      	adds	r3, r1, #1
   1dc5c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1dc60:	f858 2c0c 	ldr.w	r2, [r8, #-12]
   1dc64:	5467      	strb	r7, [r4, r1]
   1dc66:	4620      	mov	r0, r4
   1dc68:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
   1dc6c:	2111      	movs	r1, #17
   1dc6e:	f000 fd05 	bl	1e67c <d_print_mod>
   1dc72:	f7ff b9b2 	b.w	1cfda <d_print_comp_inner+0xaae>
   1dc76:	68ff      	ldr	r7, [r7, #12]
   1dc78:	4652      	mov	r2, sl
   1dc7a:	2f00      	cmp	r7, #0
   1dc7c:	f000 84ac 	beq.w	1e5d8 <d_print_comp_inner+0x20ac>
   1dc80:	2d04      	cmp	r5, #4
   1dc82:	f103 0310 	add.w	r3, r3, #16
   1dc86:	f000 81f1 	beq.w	1e06c <d_print_comp_inner+0x1b40>
   1dc8a:	4629      	mov	r1, r5
   1dc8c:	f7ff b95c 	b.w	1cf48 <d_print_comp_inner+0xa1c>
   1dc90:	f1b8 0f00 	cmp.w	r8, #0
   1dc94:	f43e acba 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1dc98:	46c1      	mov	r9, r8
   1dc9a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   1dc9e:	f7fe be7c 	b.w	1c99a <d_print_comp_inner+0x46e>
   1dca2:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
   1dca6:	68c2      	ldr	r2, [r0, #12]
   1dca8:	4606      	mov	r6, r0
   1dcaa:	f7fe bd2a 	b.w	1c702 <d_print_comp_inner+0x1d6>
   1dcae:	2d07      	cmp	r5, #7
   1dcb0:	f47e ad83 	bne.w	1c7ba <d_print_comp_inner+0x28e>
   1dcb4:	6933      	ldr	r3, [r6, #16]
   1dcb6:	7819      	ldrb	r1, [r3, #0]
   1dcb8:	2900      	cmp	r1, #0
   1dcba:	f47e ad7e 	bne.w	1c7ba <d_print_comp_inner+0x28e>
   1dcbe:	6919      	ldr	r1, [r3, #16]
   1dcc0:	2901      	cmp	r1, #1
   1dcc2:	f47e ad7a 	bne.w	1c7ba <d_print_comp_inner+0x28e>
   1dcc6:	2f3d      	cmp	r7, #61	; 0x3d
   1dcc8:	f47e ad77 	bne.w	1c7ba <d_print_comp_inner+0x28e>
   1dccc:	68db      	ldr	r3, [r3, #12]
   1dcce:	781b      	ldrb	r3, [r3, #0]
   1dcd0:	2b30      	cmp	r3, #48	; 0x30
   1dcd2:	f000 849d 	beq.w	1e610 <d_print_comp_inner+0x20e4>
   1dcd6:	2b31      	cmp	r3, #49	; 0x31
   1dcd8:	f47e ad6f 	bne.w	1c7ba <d_print_comp_inner+0x28e>
   1dcdc:	492f      	ldr	r1, [pc, #188]	; (1dd9c <d_print_comp_inner+0x1870>)
   1dcde:	f7ff b884 	b.w	1cdea <d_print_comp_inner+0x8be>
   1dce2:	4e2f      	ldr	r6, [pc, #188]	; (1dda0 <d_print_comp_inner+0x1874>)
   1dce4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1dce8:	1d77      	adds	r7, r6, #5
   1dcea:	255f      	movs	r5, #95	; 0x5f
   1dcec:	e00b      	b.n	1dd06 <d_print_comp_inner+0x17da>
   1dcee:	460b      	mov	r3, r1
   1dcf0:	3101      	adds	r1, #1
   1dcf2:	42b7      	cmp	r7, r6
   1dcf4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dcf8:	54e5      	strb	r5, [r4, r3]
   1dcfa:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1dcfe:	f43e ac85 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1dd02:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1dd06:	29ff      	cmp	r1, #255	; 0xff
   1dd08:	d1f1      	bne.n	1dcee <d_print_comp_inner+0x17c2>
   1dd0a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dd0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dd12:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dd16:	4620      	mov	r0, r4
   1dd18:	4798      	blx	r3
   1dd1a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd1e:	3301      	adds	r3, #1
   1dd20:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd24:	2101      	movs	r1, #1
   1dd26:	2300      	movs	r3, #0
   1dd28:	e7e3      	b.n	1dcf2 <d_print_comp_inner+0x17c6>
   1dd2a:	491e      	ldr	r1, [pc, #120]	; (1dda4 <d_print_comp_inner+0x1878>)
   1dd2c:	f7fc fa4c 	bl	1a1c8 <d_append_string>
   1dd30:	4918      	ldr	r1, [pc, #96]	; (1dd94 <d_print_comp_inner+0x1868>)
   1dd32:	462a      	mov	r2, r5
   1dd34:	a804      	add	r0, sp, #16
   1dd36:	f003 ff27 	bl	21b88 <sprintf>
   1dd3a:	a804      	add	r0, sp, #16
   1dd3c:	f004 ff60 	bl	22c00 <strlen>
   1dd40:	b390      	cbz	r0, 1dda8 <d_print_comp_inner+0x187c>
   1dd42:	ad04      	add	r5, sp, #16
   1dd44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1dd48:	182f      	adds	r7, r5, r0
   1dd4a:	f04f 0800 	mov.w	r8, #0
   1dd4e:	e008      	b.n	1dd62 <d_print_comp_inner+0x1836>
   1dd50:	460b      	mov	r3, r1
   1dd52:	3101      	adds	r1, #1
   1dd54:	42bd      	cmp	r5, r7
   1dd56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1dd5a:	54e6      	strb	r6, [r4, r3]
   1dd5c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1dd60:	d024      	beq.n	1ddac <d_print_comp_inner+0x1880>
   1dd62:	29ff      	cmp	r1, #255	; 0xff
   1dd64:	f815 6b01 	ldrb.w	r6, [r5], #1
   1dd68:	d1f2      	bne.n	1dd50 <d_print_comp_inner+0x1824>
   1dd6a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1dd6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1dd72:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1dd76:	4620      	mov	r0, r4
   1dd78:	4798      	blx	r3
   1dd7a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1dd7e:	3301      	adds	r3, #1
   1dd80:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1dd84:	2101      	movs	r1, #1
   1dd86:	2300      	movs	r3, #0
   1dd88:	e7e4      	b.n	1dd54 <d_print_comp_inner+0x1828>
   1dd8a:	bf00      	nop
   1dd8c:	200022c0 	.word	0x200022c0
   1dd90:	200023f4 	.word	0x200023f4
   1dd94:	2000213c 	.word	0x2000213c
   1dd98:	200021fc 	.word	0x200021fc
   1dd9c:	20002374 	.word	0x20002374
   1dda0:	20002320 	.word	0x20002320
   1dda4:	200023a0 	.word	0x200023a0
   1dda8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ddac:	29ff      	cmp	r1, #255	; 0xff
   1ddae:	f000 82f3 	beq.w	1e398 <d_print_comp_inner+0x1e6c>
   1ddb2:	237d      	movs	r3, #125	; 0x7d
   1ddb4:	1c4a      	adds	r2, r1, #1
   1ddb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ddba:	5463      	strb	r3, [r4, r1]
   1ddbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ddc0:	f7fe bc24 	b.w	1c60c <d_print_comp_inner+0xe0>
   1ddc4:	4610      	mov	r0, r2
   1ddc6:	2500      	movs	r5, #0
   1ddc8:	f7fe bc90 	b.w	1c6ec <d_print_comp_inner+0x1c0>
   1ddcc:	68f2      	ldr	r2, [r6, #12]
   1ddce:	49c2      	ldr	r1, [pc, #776]	; (1e0d8 <d_print_comp_inner+0x1bac>)
   1ddd0:	3201      	adds	r2, #1
   1ddd2:	a804      	add	r0, sp, #16
   1ddd4:	f003 fed8 	bl	21b88 <sprintf>
   1ddd8:	a804      	add	r0, sp, #16
   1ddda:	f004 ff11 	bl	22c00 <strlen>
   1ddde:	2800      	cmp	r0, #0
   1dde0:	f43e ac14 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1dde4:	ad04      	add	r5, sp, #16
   1dde6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ddea:	182f      	adds	r7, r5, r0
   1ddec:	f04f 0800 	mov.w	r8, #0
   1ddf0:	e009      	b.n	1de06 <d_print_comp_inner+0x18da>
   1ddf2:	460b      	mov	r3, r1
   1ddf4:	3101      	adds	r1, #1
   1ddf6:	42bd      	cmp	r5, r7
   1ddf8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ddfc:	54e6      	strb	r6, [r4, r3]
   1ddfe:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1de02:	f43e ac03 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1de06:	29ff      	cmp	r1, #255	; 0xff
   1de08:	f815 6b01 	ldrb.w	r6, [r5], #1
   1de0c:	d1f1      	bne.n	1ddf2 <d_print_comp_inner+0x18c6>
   1de0e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1de12:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1de16:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1de1a:	4620      	mov	r0, r4
   1de1c:	4798      	blx	r3
   1de1e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1de22:	3301      	adds	r3, #1
   1de24:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1de28:	2101      	movs	r1, #1
   1de2a:	2300      	movs	r3, #0
   1de2c:	e7e3      	b.n	1ddf6 <d_print_comp_inner+0x18ca>
   1de2e:	4611      	mov	r1, r2
   1de30:	f7fc f964 	bl	1a0fc <d_lookup_template_argument>
   1de34:	4602      	mov	r2, r0
   1de36:	2800      	cmp	r0, #0
   1de38:	f43e abe5 	beq.w	1c606 <d_print_comp_inner+0xda>
   1de3c:	7803      	ldrb	r3, [r0, #0]
   1de3e:	2b2f      	cmp	r3, #47	; 0x2f
   1de40:	f43e abd6 	beq.w	1c5f0 <d_print_comp_inner+0xc4>
   1de44:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
   1de48:	682b      	ldr	r3, [r5, #0]
   1de4a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1de4e:	2111      	movs	r1, #17
   1de50:	4620      	mov	r0, r4
   1de52:	f000 fbe5 	bl	1e620 <d_print_comp>
   1de56:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
   1de5a:	f7fe bbd7 	b.w	1c60c <d_print_comp_inner+0xe0>
   1de5e:	2500      	movs	r5, #0
   1de60:	f7fe bcab 	b.w	1c7ba <d_print_comp_inner+0x28e>
   1de64:	2500      	movs	r5, #0
   1de66:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1de6a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1de6e:	4620      	mov	r0, r4
   1de70:	4798      	blx	r3
   1de72:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1de76:	2201      	movs	r2, #1
   1de78:	4413      	add	r3, r2
   1de7a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1de7e:	4629      	mov	r1, r5
   1de80:	e558      	b.n	1d934 <d_print_comp_inner+0x1408>
   1de82:	2500      	movs	r5, #0
   1de84:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1de88:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1de8c:	4620      	mov	r0, r4
   1de8e:	4798      	blx	r3
   1de90:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1de94:	2201      	movs	r2, #1
   1de96:	4413      	add	r3, r2
   1de98:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1de9c:	4629      	mov	r1, r5
   1de9e:	f7fe bfc5 	b.w	1ce2c <d_print_comp_inner+0x900>
   1dea2:	2b01      	cmp	r3, #1
   1dea4:	f63f a885 	bhi.w	1cfb2 <d_print_comp_inner+0xa86>
   1dea8:	2d04      	cmp	r5, #4
   1deaa:	f43e abac 	beq.w	1c606 <d_print_comp_inner+0xda>
   1deae:	468e      	mov	lr, r1
   1deb0:	f101 0b10 	add.w	fp, r1, #16
   1deb4:	c90f      	ldmia	r1, {r0, r1, r2, r3}
   1deb6:	e88b 000f 	stmia.w	fp, {r0, r1, r2, r3}
   1deba:	e9ce 7a01 	strd	r7, sl, [lr, #4]
   1debe:	68ff      	ldr	r7, [r7, #12]
   1dec0:	f8ce e010 	str.w	lr, [lr, #16]
   1dec4:	3501      	adds	r5, #1
   1dec6:	f8ce c00c 	str.w	ip, [lr, #12]
   1deca:	4659      	mov	r1, fp
   1decc:	f8c4 b114 	str.w	fp, [r4, #276]	; 0x114
   1ded0:	2f00      	cmp	r7, #0
   1ded2:	f43e ab98 	beq.w	1c606 <d_print_comp_inner+0xda>
   1ded6:	783a      	ldrb	r2, [r7, #0]
   1ded8:	f7ff b858 	b.w	1cf8c <d_print_comp_inner+0xa60>
   1dedc:	68d2      	ldr	r2, [r2, #12]
   1dede:	2111      	movs	r1, #17
   1dee0:	4620      	mov	r0, r4
   1dee2:	f000 fb9d 	bl	1e620 <d_print_comp>
   1dee6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   1deea:	b113      	cbz	r3, 1def2 <d_print_comp_inner+0x19c6>
   1deec:	9b04      	ldr	r3, [sp, #16]
   1deee:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1def2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1def6:	2b3c      	cmp	r3, #60	; 0x3c
   1def8:	f000 82be 	beq.w	1e478 <d_print_comp_inner+0x1f4c>
   1defc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1df00:	29ff      	cmp	r1, #255	; 0xff
   1df02:	f000 82a9 	beq.w	1e458 <d_print_comp_inner+0x1f2c>
   1df06:	1c4a      	adds	r2, r1, #1
   1df08:	233c      	movs	r3, #60	; 0x3c
   1df0a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1df0e:	5463      	strb	r3, [r4, r1]
   1df10:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1df14:	68f3      	ldr	r3, [r6, #12]
   1df16:	2111      	movs	r1, #17
   1df18:	691a      	ldr	r2, [r3, #16]
   1df1a:	4620      	mov	r0, r4
   1df1c:	f000 fb80 	bl	1e620 <d_print_comp>
   1df20:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1df24:	2b3e      	cmp	r3, #62	; 0x3e
   1df26:	f000 8292 	beq.w	1e44e <d_print_comp_inner+0x1f22>
   1df2a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1df2e:	29ff      	cmp	r1, #255	; 0xff
   1df30:	f000 827f 	beq.w	1e432 <d_print_comp_inner+0x1f06>
   1df34:	233e      	movs	r3, #62	; 0x3e
   1df36:	1c4a      	adds	r2, r1, #1
   1df38:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1df3c:	5463      	strb	r3, [r4, r1]
   1df3e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1df42:	f7fe bb63 	b.w	1c60c <d_print_comp_inner+0xe0>
   1df46:	68fb      	ldr	r3, [r7, #12]
   1df48:	681e      	ldr	r6, [r3, #0]
   1df4a:	7833      	ldrb	r3, [r6, #0]
   1df4c:	2b61      	cmp	r3, #97	; 0x61
   1df4e:	f040 8092 	bne.w	1e076 <d_print_comp_inner+0x1b4a>
   1df52:	7872      	ldrb	r2, [r6, #1]
   1df54:	2a64      	cmp	r2, #100	; 0x64
   1df56:	f040 808e 	bne.w	1e076 <d_print_comp_inner+0x1b4a>
   1df5a:	78b2      	ldrb	r2, [r6, #2]
   1df5c:	2a00      	cmp	r2, #0
   1df5e:	f040 808a 	bne.w	1e076 <d_print_comp_inner+0x1b4a>
   1df62:	782a      	ldrb	r2, [r5, #0]
   1df64:	2a03      	cmp	r2, #3
   1df66:	f000 828c 	beq.w	1e482 <d_print_comp_inner+0x1f56>
   1df6a:	2a39      	cmp	r2, #57	; 0x39
   1df6c:	f000 8294 	beq.w	1e498 <d_print_comp_inner+0x1f6c>
   1df70:	2b73      	cmp	r3, #115	; 0x73
   1df72:	d111      	bne.n	1df98 <d_print_comp_inner+0x1a6c>
   1df74:	7872      	ldrb	r2, [r6, #1]
   1df76:	2a5a      	cmp	r2, #90	; 0x5a
   1df78:	d135      	bne.n	1dfe6 <d_print_comp_inner+0x1aba>
   1df7a:	78b2      	ldrb	r2, [r6, #2]
   1df7c:	bb9a      	cbnz	r2, 1dfe6 <d_print_comp_inner+0x1aba>
   1df7e:	4629      	mov	r1, r5
   1df80:	4620      	mov	r0, r4
   1df82:	f7fc f8d7 	bl	1a134 <d_find_pack>
   1df86:	f7fc f803 	bl	19f90 <d_pack_length>
   1df8a:	4601      	mov	r1, r0
   1df8c:	4620      	mov	r0, r4
   1df8e:	b015      	add	sp, #84	; 0x54
   1df90:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df94:	f7fc b97c 	b.w	1a290 <d_append_num>
   1df98:	463a      	mov	r2, r7
   1df9a:	2111      	movs	r1, #17
   1df9c:	4620      	mov	r0, r4
   1df9e:	f001 f97d 	bl	1f29c <d_print_expr_op>
   1dfa2:	7833      	ldrb	r3, [r6, #0]
   1dfa4:	2b67      	cmp	r3, #103	; 0x67
   1dfa6:	d107      	bne.n	1dfb8 <d_print_comp_inner+0x1a8c>
   1dfa8:	7872      	ldrb	r2, [r6, #1]
   1dfaa:	2a73      	cmp	r2, #115	; 0x73
   1dfac:	d104      	bne.n	1dfb8 <d_print_comp_inner+0x1a8c>
   1dfae:	78b2      	ldrb	r2, [r6, #2]
   1dfb0:	b912      	cbnz	r2, 1dfb8 <d_print_comp_inner+0x1a8c>
   1dfb2:	462a      	mov	r2, r5
   1dfb4:	f7fe bb4e 	b.w	1c654 <d_print_comp_inner+0x128>
   1dfb8:	2b73      	cmp	r3, #115	; 0x73
   1dfba:	f47f a922 	bne.w	1d202 <d_print_comp_inner+0xcd6>
   1dfbe:	7873      	ldrb	r3, [r6, #1]
   1dfc0:	2b74      	cmp	r3, #116	; 0x74
   1dfc2:	f47f a91e 	bne.w	1d202 <d_print_comp_inner+0xcd6>
   1dfc6:	78b3      	ldrb	r3, [r6, #2]
   1dfc8:	2b00      	cmp	r3, #0
   1dfca:	f47f a91a 	bne.w	1d202 <d_print_comp_inner+0xcd6>
   1dfce:	2128      	movs	r1, #40	; 0x28
   1dfd0:	4620      	mov	r0, r4
   1dfd2:	f7fc f871 	bl	1a0b8 <d_append_char>
   1dfd6:	2111      	movs	r1, #17
   1dfd8:	462a      	mov	r2, r5
   1dfda:	4620      	mov	r0, r4
   1dfdc:	f000 fb20 	bl	1e620 <d_print_comp>
   1dfe0:	2129      	movs	r1, #41	; 0x29
   1dfe2:	f7fe bc17 	b.w	1c814 <d_print_comp_inner+0x2e8>
   1dfe6:	2b73      	cmp	r3, #115	; 0x73
   1dfe8:	d1d6      	bne.n	1df98 <d_print_comp_inner+0x1a6c>
   1dfea:	7873      	ldrb	r3, [r6, #1]
   1dfec:	2b50      	cmp	r3, #80	; 0x50
   1dfee:	d1d3      	bne.n	1df98 <d_print_comp_inner+0x1a6c>
   1dff0:	78b3      	ldrb	r3, [r6, #2]
   1dff2:	2b00      	cmp	r3, #0
   1dff4:	d1d0      	bne.n	1df98 <d_print_comp_inner+0x1a6c>
   1dff6:	461e      	mov	r6, r3
   1dff8:	e004      	b.n	1e004 <d_print_comp_inner+0x1ad8>
   1dffa:	3601      	adds	r6, #1
   1dffc:	692d      	ldr	r5, [r5, #16]
   1dffe:	2d00      	cmp	r5, #0
   1e000:	f000 819a 	beq.w	1e338 <d_print_comp_inner+0x1e0c>
   1e004:	782b      	ldrb	r3, [r5, #0]
   1e006:	2b2f      	cmp	r3, #47	; 0x2f
   1e008:	f040 8196 	bne.w	1e338 <d_print_comp_inner+0x1e0c>
   1e00c:	68eb      	ldr	r3, [r5, #12]
   1e00e:	2b00      	cmp	r3, #0
   1e010:	f000 8192 	beq.w	1e338 <d_print_comp_inner+0x1e0c>
   1e014:	781a      	ldrb	r2, [r3, #0]
   1e016:	2a4c      	cmp	r2, #76	; 0x4c
   1e018:	d1ef      	bne.n	1dffa <d_print_comp_inner+0x1ace>
   1e01a:	68d9      	ldr	r1, [r3, #12]
   1e01c:	4620      	mov	r0, r4
   1e01e:	f7fc f889 	bl	1a134 <d_find_pack>
   1e022:	4603      	mov	r3, r0
   1e024:	b148      	cbz	r0, 1e03a <d_print_comp_inner+0x1b0e>
   1e026:	2300      	movs	r3, #0
   1e028:	e004      	b.n	1e034 <d_print_comp_inner+0x1b08>
   1e02a:	68c2      	ldr	r2, [r0, #12]
   1e02c:	b12a      	cbz	r2, 1e03a <d_print_comp_inner+0x1b0e>
   1e02e:	6900      	ldr	r0, [r0, #16]
   1e030:	3301      	adds	r3, #1
   1e032:	b110      	cbz	r0, 1e03a <d_print_comp_inner+0x1b0e>
   1e034:	7802      	ldrb	r2, [r0, #0]
   1e036:	2a2f      	cmp	r2, #47	; 0x2f
   1e038:	d0f7      	beq.n	1e02a <d_print_comp_inner+0x1afe>
   1e03a:	441e      	add	r6, r3
   1e03c:	e7de      	b.n	1dffc <d_print_comp_inner+0x1ad0>
   1e03e:	29ff      	cmp	r1, #255	; 0xff
   1e040:	f000 81d1 	beq.w	1e3e6 <d_print_comp_inner+0x1eba>
   1e044:	1c4b      	adds	r3, r1, #1
   1e046:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1e04a:	2320      	movs	r3, #32
   1e04c:	5463      	strb	r3, [r4, r1]
   1e04e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e052:	e4c7      	b.n	1d9e4 <d_print_comp_inner+0x14b8>
   1e054:	4632      	mov	r2, r6
   1e056:	2111      	movs	r1, #17
   1e058:	4620      	mov	r0, r4
   1e05a:	f000 fb0f 	bl	1e67c <d_print_mod>
   1e05e:	f7fe bb36 	b.w	1c6ce <d_print_comp_inner+0x1a2>
   1e062:	491e      	ldr	r1, [pc, #120]	; (1e0dc <d_print_comp_inner+0x1bb0>)
   1e064:	f7fc f8b0 	bl	1a1c8 <d_append_string>
   1e068:	f7ff b8e0 	b.w	1d22c <d_print_comp_inner+0xd00>
   1e06c:	2301      	movs	r3, #1
   1e06e:	e9c4 a345 	strd	sl, r3, [r4, #276]	; 0x114
   1e072:	f7fe bacb 	b.w	1c60c <d_print_comp_inner+0xe0>
   1e076:	782a      	ldrb	r2, [r5, #0]
   1e078:	e777      	b.n	1df6a <d_print_comp_inner+0x1a3e>
   1e07a:	68f2      	ldr	r2, [r6, #12]
   1e07c:	460d      	mov	r5, r1
   1e07e:	f7fe bb40 	b.w	1c702 <d_print_comp_inner+0x1d6>
   1e082:	2700      	movs	r7, #0
   1e084:	5567      	strb	r7, [r4, r5]
   1e086:	4629      	mov	r1, r5
   1e088:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e08c:	4620      	mov	r0, r4
   1e08e:	4798      	blx	r3
   1e090:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e094:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
   1e098:	3301      	adds	r3, #1
   1e09a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e09e:	463d      	mov	r5, r7
   1e0a0:	f7fe bb48 	b.w	1c734 <d_print_comp_inner+0x208>
   1e0a4:	2600      	movs	r6, #0
   1e0a6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e0aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e0ae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1e0b2:	4620      	mov	r0, r4
   1e0b4:	4798      	blx	r3
   1e0b6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e0ba:	2201      	movs	r2, #1
   1e0bc:	4413      	add	r3, r2
   1e0be:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e0c2:	4631      	mov	r1, r6
   1e0c4:	f7fe bd82 	b.w	1cbcc <d_print_comp_inner+0x6a0>
   1e0c8:	4905      	ldr	r1, [pc, #20]	; (1e0e0 <d_print_comp_inner+0x1bb4>)
   1e0ca:	4620      	mov	r0, r4
   1e0cc:	f7fc f87c 	bl	1a1c8 <d_append_string>
   1e0d0:	68ff      	ldr	r7, [r7, #12]
   1e0d2:	463a      	mov	r2, r7
   1e0d4:	f7fe babe 	b.w	1c654 <d_print_comp_inner+0x128>
   1e0d8:	2000213c 	.word	0x2000213c
   1e0dc:	20002310 	.word	0x20002310
   1e0e0:	2000219c 	.word	0x2000219c
   1e0e4:	2500      	movs	r5, #0
   1e0e6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e0ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e0ee:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e0f2:	4620      	mov	r0, r4
   1e0f4:	4798      	blx	r3
   1e0f6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e0fa:	2201      	movs	r2, #1
   1e0fc:	4413      	add	r3, r2
   1e0fe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e102:	4629      	mov	r1, r5
   1e104:	f7fe be81 	b.w	1ce0a <d_print_comp_inner+0x8de>
   1e108:	2600      	movs	r6, #0
   1e10a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1e10e:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1e112:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1e116:	4798      	blx	r3
   1e118:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   1e11c:	2301      	movs	r3, #1
   1e11e:	441a      	add	r2, r3
   1e120:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
   1e124:	4631      	mov	r1, r6
   1e126:	f7fe bed2 	b.w	1cece <d_print_comp_inner+0x9a2>
   1e12a:	2500      	movs	r5, #0
   1e12c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1e130:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1e134:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1e138:	4798      	blx	r3
   1e13a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e13e:	2201      	movs	r2, #1
   1e140:	4413      	add	r3, r2
   1e142:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e146:	4629      	mov	r1, r5
   1e148:	f7fe ba91 	b.w	1c66e <d_print_comp_inner+0x142>
   1e14c:	2500      	movs	r5, #0
   1e14e:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e152:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e156:	4620      	mov	r0, r4
   1e158:	4798      	blx	r3
   1e15a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e15e:	3301      	adds	r3, #1
   1e160:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e164:	4629      	mov	r1, r5
   1e166:	2301      	movs	r3, #1
   1e168:	f7ff bab6 	b.w	1d6d8 <d_print_comp_inner+0x11ac>
   1e16c:	2120      	movs	r1, #32
   1e16e:	4620      	mov	r0, r4
   1e170:	f7fb ffa2 	bl	1a0b8 <d_append_char>
   1e174:	f7ff baaa 	b.w	1d6cc <d_print_comp_inner+0x11a0>
   1e178:	2500      	movs	r5, #0
   1e17a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e17e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e182:	4620      	mov	r0, r4
   1e184:	4798      	blx	r3
   1e186:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e18a:	3301      	adds	r3, #1
   1e18c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e190:	4629      	mov	r1, r5
   1e192:	2301      	movs	r3, #1
   1e194:	f7ff ba8a 	b.w	1d6ac <d_print_comp_inner+0x1180>
   1e198:	2120      	movs	r1, #32
   1e19a:	4620      	mov	r0, r4
   1e19c:	f7fb ff8c 	bl	1a0b8 <d_append_char>
   1e1a0:	f7ff ba7e 	b.w	1d6a0 <d_print_comp_inner+0x1174>
   1e1a4:	2700      	movs	r7, #0
   1e1a6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e1aa:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1e1ae:	4620      	mov	r0, r4
   1e1b0:	4798      	blx	r3
   1e1b2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e1b6:	68f2      	ldr	r2, [r6, #12]
   1e1b8:	3301      	adds	r3, #1
   1e1ba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e1be:	4639      	mov	r1, r7
   1e1c0:	2301      	movs	r3, #1
   1e1c2:	f7fe bb00 	b.w	1c7c6 <d_print_comp_inner+0x29a>
   1e1c6:	212d      	movs	r1, #45	; 0x2d
   1e1c8:	4620      	mov	r0, r4
   1e1ca:	f7fb ff75 	bl	1a0b8 <d_append_char>
   1e1ce:	f7fe bb14 	b.w	1c7fa <d_print_comp_inner+0x2ce>
   1e1d2:	2700      	movs	r7, #0
   1e1d4:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e1d8:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1e1dc:	4620      	mov	r0, r4
   1e1de:	4798      	blx	r3
   1e1e0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e1e4:	3301      	adds	r3, #1
   1e1e6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e1ea:	4639      	mov	r1, r7
   1e1ec:	2301      	movs	r3, #1
   1e1ee:	f7fe bafa 	b.w	1c7e6 <d_print_comp_inner+0x2ba>
   1e1f2:	6933      	ldr	r3, [r6, #16]
   1e1f4:	781b      	ldrb	r3, [r3, #0]
   1e1f6:	2b00      	cmp	r3, #0
   1e1f8:	f47e aadf 	bne.w	1c7ba <d_print_comp_inner+0x28e>
   1e1fc:	2f3e      	cmp	r7, #62	; 0x3e
   1e1fe:	f000 81f6 	beq.w	1e5ee <d_print_comp_inner+0x20c2>
   1e202:	6932      	ldr	r2, [r6, #16]
   1e204:	2111      	movs	r1, #17
   1e206:	4620      	mov	r0, r4
   1e208:	3d02      	subs	r5, #2
   1e20a:	f000 fa09 	bl	1e620 <d_print_comp>
   1e20e:	2d04      	cmp	r5, #4
   1e210:	f63e a9fc 	bhi.w	1c60c <d_print_comp_inner+0xe0>
   1e214:	e8df f005 	tbb	[pc, r5]
   1e218:	06090c0f 	.word	0x06090c0f
   1e21c:	03          	.byte	0x03
   1e21d:	00          	.byte	0x00
   1e21e:	49c8      	ldr	r1, [pc, #800]	; (1e540 <d_print_comp_inner+0x2014>)
   1e220:	f7fe bde3 	b.w	1cdea <d_print_comp_inner+0x8be>
   1e224:	49c7      	ldr	r1, [pc, #796]	; (1e544 <d_print_comp_inner+0x2018>)
   1e226:	f7fe bde0 	b.w	1cdea <d_print_comp_inner+0x8be>
   1e22a:	49c7      	ldr	r1, [pc, #796]	; (1e548 <d_print_comp_inner+0x201c>)
   1e22c:	f7fe bddd 	b.w	1cdea <d_print_comp_inner+0x8be>
   1e230:	216c      	movs	r1, #108	; 0x6c
   1e232:	f7fe baef 	b.w	1c814 <d_print_comp_inner+0x2e8>
   1e236:	2175      	movs	r1, #117	; 0x75
   1e238:	f7fe baec 	b.w	1c814 <d_print_comp_inner+0x2e8>
   1e23c:	781b      	ldrb	r3, [r3, #0]
   1e23e:	2b73      	cmp	r3, #115	; 0x73
   1e240:	d00a      	beq.n	1e258 <d_print_comp_inner+0x1d2c>
   1e242:	3b63      	subs	r3, #99	; 0x63
   1e244:	b2db      	uxtb	r3, r3
   1e246:	2b0f      	cmp	r3, #15
   1e248:	f63e af77 	bhi.w	1d13a <d_print_comp_inner+0xc0e>
   1e24c:	49bf      	ldr	r1, [pc, #764]	; (1e54c <d_print_comp_inner+0x2020>)
   1e24e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   1e252:	2b00      	cmp	r3, #0
   1e254:	f43e af71 	beq.w	1d13a <d_print_comp_inner+0xc0e>
   1e258:	2111      	movs	r1, #17
   1e25a:	4620      	mov	r0, r4
   1e25c:	f001 f81e 	bl	1f29c <d_print_expr_op>
   1e260:	213c      	movs	r1, #60	; 0x3c
   1e262:	4620      	mov	r0, r4
   1e264:	f7fb ff28 	bl	1a0b8 <d_append_char>
   1e268:	6933      	ldr	r3, [r6, #16]
   1e26a:	2111      	movs	r1, #17
   1e26c:	68da      	ldr	r2, [r3, #12]
   1e26e:	4620      	mov	r0, r4
   1e270:	f000 f9d6 	bl	1e620 <d_print_comp>
   1e274:	49b6      	ldr	r1, [pc, #728]	; (1e550 <d_print_comp_inner+0x2024>)
   1e276:	4620      	mov	r0, r4
   1e278:	f7fb ffa6 	bl	1a1c8 <d_append_string>
   1e27c:	6933      	ldr	r3, [r6, #16]
   1e27e:	2111      	movs	r1, #17
   1e280:	691a      	ldr	r2, [r3, #16]
   1e282:	4620      	mov	r0, r4
   1e284:	f000 f9cc 	bl	1e620 <d_print_comp>
   1e288:	2129      	movs	r1, #41	; 0x29
   1e28a:	f7fe bac3 	b.w	1c814 <d_print_comp_inner+0x2e8>
   1e28e:	f8d0 c134 	ldr.w	ip, [r0, #308]	; 0x134
   1e292:	f1bc 0f00 	cmp.w	ip, #0
   1e296:	f340 8107 	ble.w	1e4a8 <d_print_comp_inner+0x1f7c>
   1e29a:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
   1e29e:	462b      	mov	r3, r5
   1e2a0:	4670      	mov	r0, lr
   1e2a2:	e004      	b.n	1e2ae <d_print_comp_inner+0x1d82>
   1e2a4:	4563      	cmp	r3, ip
   1e2a6:	f100 0008 	add.w	r0, r0, #8
   1e2aa:	f000 80fd 	beq.w	1e4a8 <d_print_comp_inner+0x1f7c>
   1e2ae:	f85e 1033 	ldr.w	r1, [lr, r3, lsl #3]
   1e2b2:	428a      	cmp	r2, r1
   1e2b4:	f103 0301 	add.w	r3, r3, #1
   1e2b8:	d1f4      	bne.n	1e2a4 <d_print_comp_inner+0x1d78>
   1e2ba:	f8d4 c12c 	ldr.w	ip, [r4, #300]	; 0x12c
   1e2be:	4663      	mov	r3, ip
   1e2c0:	f1bc 0f00 	cmp.w	ip, #0
   1e2c4:	d104      	bne.n	1e2d0 <d_print_comp_inner+0x1da4>
   1e2c6:	e09d      	b.n	1e404 <d_print_comp_inner+0x1ed8>
   1e2c8:	685b      	ldr	r3, [r3, #4]
   1e2ca:	2b00      	cmp	r3, #0
   1e2cc:	f000 809a 	beq.w	1e404 <d_print_comp_inner+0x1ed8>
   1e2d0:	6819      	ldr	r1, [r3, #0]
   1e2d2:	4291      	cmp	r1, r2
   1e2d4:	d003      	beq.n	1e2de <d_print_comp_inner+0x1db2>
   1e2d6:	42b1      	cmp	r1, r6
   1e2d8:	d1f6      	bne.n	1e2c8 <d_print_comp_inner+0x1d9c>
   1e2da:	459c      	cmp	ip, r3
   1e2dc:	d0f4      	beq.n	1e2c8 <d_print_comp_inner+0x1d9c>
   1e2de:	4611      	mov	r1, r2
   1e2e0:	4620      	mov	r0, r4
   1e2e2:	9201      	str	r2, [sp, #4]
   1e2e4:	f7fb ff0a 	bl	1a0fc <d_lookup_template_argument>
   1e2e8:	9a01      	ldr	r2, [sp, #4]
   1e2ea:	2800      	cmp	r0, #0
   1e2ec:	f43e a98b 	beq.w	1c606 <d_print_comp_inner+0xda>
   1e2f0:	7803      	ldrb	r3, [r0, #0]
   1e2f2:	2b2f      	cmp	r3, #47	; 0x2f
   1e2f4:	f47e a9fa 	bne.w	1c6ec <d_print_comp_inner+0x1c0>
   1e2f8:	f8d4 1124 	ldr.w	r1, [r4, #292]	; 0x124
   1e2fc:	2900      	cmp	r1, #0
   1e2fe:	f6fe a9fe 	blt.w	1c6fe <d_print_comp_inner+0x1d2>
   1e302:	f7fb fe77 	bl	19ff4 <d_index_template_argument.part.0>
   1e306:	2800      	cmp	r0, #0
   1e308:	f000 816a 	beq.w	1e5e0 <d_print_comp_inner+0x20b4>
   1e30c:	7803      	ldrb	r3, [r0, #0]
   1e30e:	f7fe b9ed 	b.w	1c6ec <d_print_comp_inner+0x1c0>
   1e312:	68c2      	ldr	r2, [r0, #12]
   1e314:	f7fe b97e 	b.w	1c614 <d_print_comp_inner+0xe8>
   1e318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e31c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e320:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1e324:	4620      	mov	r0, r4
   1e326:	4798      	blx	r3
   1e328:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e32c:	3301      	adds	r3, #1
   1e32e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e332:	4631      	mov	r1, r6
   1e334:	2301      	movs	r3, #1
   1e336:	e491      	b.n	1dc5c <d_print_comp_inner+0x1730>
   1e338:	4986      	ldr	r1, [pc, #536]	; (1e554 <d_print_comp_inner+0x2028>)
   1e33a:	4632      	mov	r2, r6
   1e33c:	a804      	add	r0, sp, #16
   1e33e:	f003 fc23 	bl	21b88 <sprintf>
   1e342:	a804      	add	r0, sp, #16
   1e344:	f004 fc5c 	bl	22c00 <strlen>
   1e348:	2800      	cmp	r0, #0
   1e34a:	f43e a95f 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1e34e:	ad04      	add	r5, sp, #16
   1e350:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e354:	182f      	adds	r7, r5, r0
   1e356:	f04f 0800 	mov.w	r8, #0
   1e35a:	e009      	b.n	1e370 <d_print_comp_inner+0x1e44>
   1e35c:	460b      	mov	r3, r1
   1e35e:	3101      	adds	r1, #1
   1e360:	42af      	cmp	r7, r5
   1e362:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e366:	54e6      	strb	r6, [r4, r3]
   1e368:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e36c:	f43e a94e 	beq.w	1c60c <d_print_comp_inner+0xe0>
   1e370:	29ff      	cmp	r1, #255	; 0xff
   1e372:	f815 6b01 	ldrb.w	r6, [r5], #1
   1e376:	d1f1      	bne.n	1e35c <d_print_comp_inner+0x1e30>
   1e378:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e37c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e380:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e384:	4620      	mov	r0, r4
   1e386:	4798      	blx	r3
   1e388:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e38c:	3301      	adds	r3, #1
   1e38e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e392:	2101      	movs	r1, #1
   1e394:	2300      	movs	r3, #0
   1e396:	e7e3      	b.n	1e360 <d_print_comp_inner+0x1e34>
   1e398:	2500      	movs	r5, #0
   1e39a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e39e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e3a2:	4620      	mov	r0, r4
   1e3a4:	4798      	blx	r3
   1e3a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e3aa:	3301      	adds	r3, #1
   1e3ac:	4629      	mov	r1, r5
   1e3ae:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e3b2:	e4fe      	b.n	1ddb2 <d_print_comp_inner+0x1886>
   1e3b4:	2111      	movs	r1, #17
   1e3b6:	4620      	mov	r0, r4
   1e3b8:	4652      	mov	r2, sl
   1e3ba:	f001 f96b 	bl	1f694 <d_print_subexpr>
   1e3be:	4966      	ldr	r1, [pc, #408]	; (1e558 <d_print_comp_inner+0x202c>)
   1e3c0:	f7fe bd13 	b.w	1cdea <d_print_comp_inner+0x8be>
   1e3c4:	2500      	movs	r5, #0
   1e3c6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e3ca:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e3ce:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e3d2:	4620      	mov	r0, r4
   1e3d4:	4798      	blx	r3
   1e3d6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e3da:	3301      	adds	r3, #1
   1e3dc:	4629      	mov	r1, r5
   1e3de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e3e2:	f7fe bf31 	b.w	1d248 <d_print_comp_inner+0xd1c>
   1e3e6:	2600      	movs	r6, #0
   1e3e8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e3ec:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1e3f0:	4620      	mov	r0, r4
   1e3f2:	4798      	blx	r3
   1e3f4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e3f8:	687d      	ldr	r5, [r7, #4]
   1e3fa:	3301      	adds	r3, #1
   1e3fc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e400:	4631      	mov	r1, r6
   1e402:	e61f      	b.n	1e044 <d_print_comp_inner+0x1b18>
   1e404:	6843      	ldr	r3, [r0, #4]
   1e406:	f8d4 8110 	ldr.w	r8, [r4, #272]	; 0x110
   1e40a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e40e:	4611      	mov	r1, r2
   1e410:	4620      	mov	r0, r4
   1e412:	9201      	str	r2, [sp, #4]
   1e414:	f7fb fe72 	bl	1a0fc <d_lookup_template_argument>
   1e418:	9a01      	ldr	r2, [sp, #4]
   1e41a:	2800      	cmp	r0, #0
   1e41c:	f000 80e3 	beq.w	1e5e6 <d_print_comp_inner+0x20ba>
   1e420:	2501      	movs	r5, #1
   1e422:	e765      	b.n	1e2f0 <d_print_comp_inner+0x1dc4>
   1e424:	68ff      	ldr	r7, [r7, #12]
   1e426:	2f00      	cmp	r7, #0
   1e428:	f43e a8ed 	beq.w	1c606 <d_print_comp_inner+0xda>
   1e42c:	783a      	ldrb	r2, [r7, #0]
   1e42e:	f7fe bda9 	b.w	1cf84 <d_print_comp_inner+0xa58>
   1e432:	2500      	movs	r5, #0
   1e434:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1e438:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e43c:	4620      	mov	r0, r4
   1e43e:	4798      	blx	r3
   1e440:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e444:	3301      	adds	r3, #1
   1e446:	4629      	mov	r1, r5
   1e448:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e44c:	e572      	b.n	1df34 <d_print_comp_inner+0x1a08>
   1e44e:	2120      	movs	r1, #32
   1e450:	4620      	mov	r0, r4
   1e452:	f7fb fe31 	bl	1a0b8 <d_append_char>
   1e456:	e568      	b.n	1df2a <d_print_comp_inner+0x19fe>
   1e458:	2500      	movs	r5, #0
   1e45a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e45e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e462:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1e466:	4620      	mov	r0, r4
   1e468:	4798      	blx	r3
   1e46a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e46e:	3301      	adds	r3, #1
   1e470:	4629      	mov	r1, r5
   1e472:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e476:	e546      	b.n	1df06 <d_print_comp_inner+0x19da>
   1e478:	2120      	movs	r1, #32
   1e47a:	4620      	mov	r0, r4
   1e47c:	f7fb fe1c 	bl	1a0b8 <d_append_char>
   1e480:	e53c      	b.n	1defc <d_print_comp_inner+0x19d0>
   1e482:	68ea      	ldr	r2, [r5, #12]
   1e484:	7811      	ldrb	r1, [r2, #0]
   1e486:	2901      	cmp	r1, #1
   1e488:	f47f ad72 	bne.w	1df70 <d_print_comp_inner+0x1a44>
   1e48c:	6929      	ldr	r1, [r5, #16]
   1e48e:	7809      	ldrb	r1, [r1, #0]
   1e490:	2929      	cmp	r1, #41	; 0x29
   1e492:	bf08      	it	eq
   1e494:	4615      	moveq	r5, r2
   1e496:	e56b      	b.n	1df70 <d_print_comp_inner+0x1a44>
   1e498:	68ea      	ldr	r2, [r5, #12]
   1e49a:	2111      	movs	r1, #17
   1e49c:	4620      	mov	r0, r4
   1e49e:	f001 f8f9 	bl	1f694 <d_print_subexpr>
   1e4a2:	463a      	mov	r2, r7
   1e4a4:	f7fe beb6 	b.w	1d214 <d_print_comp_inner+0xce8>
   1e4a8:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1e4ac:	4563      	cmp	r3, ip
   1e4ae:	f77e a8aa 	ble.w	1c606 <d_print_comp_inner+0xda>
   1e4b2:	f8d4 1130 	ldr.w	r1, [r4, #304]	; 0x130
   1e4b6:	f8d4 e110 	ldr.w	lr, [r4, #272]	; 0x110
   1e4ba:	eb01 03cc 	add.w	r3, r1, ip, lsl #3
   1e4be:	f10c 0001 	add.w	r0, ip, #1
   1e4c2:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
   1e4c6:	3304      	adds	r3, #4
   1e4c8:	f841 203c 	str.w	r2, [r1, ip, lsl #3]
   1e4cc:	f1be 0f00 	cmp.w	lr, #0
   1e4d0:	f000 8092 	beq.w	1e5f8 <d_print_comp_inner+0x20cc>
   1e4d4:	e9d4 0950 	ldrd	r0, r9, [r4, #320]	; 0x140
   1e4d8:	4694      	mov	ip, r2
   1e4da:	e010      	b.n	1e4fe <d_print_comp_inner+0x1fd2>
   1e4dc:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   1e4e0:	f8de 2004 	ldr.w	r2, [lr, #4]
   1e4e4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   1e4e8:	3001      	adds	r0, #1
   1e4ea:	f8c4 0140 	str.w	r0, [r4, #320]	; 0x140
   1e4ee:	604a      	str	r2, [r1, #4]
   1e4f0:	6019      	str	r1, [r3, #0]
   1e4f2:	f8de e000 	ldr.w	lr, [lr]
   1e4f6:	460b      	mov	r3, r1
   1e4f8:	f1be 0f00 	cmp.w	lr, #0
   1e4fc:	d07b      	beq.n	1e5f6 <d_print_comp_inner+0x20ca>
   1e4fe:	4581      	cmp	r9, r0
   1e500:	dcec      	bgt.n	1e4dc <d_print_comp_inner+0x1fb0>
   1e502:	f7fe b880 	b.w	1c606 <d_print_comp_inner+0xda>
   1e506:	6912      	ldr	r2, [r2, #16]
   1e508:	2111      	movs	r1, #17
   1e50a:	f000 f889 	bl	1e620 <d_print_comp>
   1e50e:	9b06      	ldr	r3, [sp, #24]
   1e510:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1e514:	2b00      	cmp	r3, #0
   1e516:	f43e af09 	beq.w	1d32c <d_print_comp_inner+0xe00>
   1e51a:	f7fe b877 	b.w	1c60c <d_print_comp_inner+0xe0>
   1e51e:	68da      	ldr	r2, [r3, #12]
   1e520:	6891      	ldr	r1, [r2, #8]
   1e522:	2901      	cmp	r1, #1
   1e524:	f47e ae1e 	bne.w	1d164 <d_print_comp_inner+0xc38>
   1e528:	6852      	ldr	r2, [r2, #4]
   1e52a:	7812      	ldrb	r2, [r2, #0]
   1e52c:	2a3e      	cmp	r2, #62	; 0x3e
   1e52e:	f47e ae19 	bne.w	1d164 <d_print_comp_inner+0xc38>
   1e532:	2128      	movs	r1, #40	; 0x28
   1e534:	4620      	mov	r0, r4
   1e536:	f7fb fdbf 	bl	1a0b8 <d_append_char>
   1e53a:	68f3      	ldr	r3, [r6, #12]
   1e53c:	f7fe be12 	b.w	1d164 <d_print_comp_inner+0xc38>
   1e540:	20002368 	.word	0x20002368
   1e544:	20002364 	.word	0x20002364
   1e548:	20002360 	.word	0x20002360
   1e54c:	200007e4 	.word	0x200007e4
   1e550:	20002344 	.word	0x20002344
   1e554:	2000213c 	.word	0x2000213c
   1e558:	200028ac 	.word	0x200028ac
   1e55c:	4620      	mov	r0, r4
   1e55e:	215b      	movs	r1, #91	; 0x5b
   1e560:	f7fb fdaa 	bl	1a0b8 <d_append_char>
   1e564:	6933      	ldr	r3, [r6, #16]
   1e566:	4620      	mov	r0, r4
   1e568:	691a      	ldr	r2, [r3, #16]
   1e56a:	2111      	movs	r1, #17
   1e56c:	f000 f858 	bl	1e620 <d_print_comp>
   1e570:	215d      	movs	r1, #93	; 0x5d
   1e572:	4620      	mov	r0, r4
   1e574:	f7fb fda0 	bl	1a0b8 <d_append_char>
   1e578:	f7fe be1c 	b.w	1d1b4 <d_print_comp_inner+0xc88>
   1e57c:	6913      	ldr	r3, [r2, #16]
   1e57e:	68d2      	ldr	r2, [r2, #12]
   1e580:	781b      	ldrb	r3, [r3, #0]
   1e582:	2b29      	cmp	r3, #41	; 0x29
   1e584:	bf1c      	itt	ne
   1e586:	2301      	movne	r3, #1
   1e588:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
   1e58c:	2111      	movs	r1, #17
   1e58e:	4620      	mov	r0, r4
   1e590:	f001 f880 	bl	1f694 <d_print_subexpr>
   1e594:	f7fe bdf7 	b.w	1d186 <d_print_comp_inner+0xc5a>
   1e598:	462a      	mov	r2, r5
   1e59a:	2111      	movs	r1, #17
   1e59c:	4620      	mov	r0, r4
   1e59e:	f000 fe7d 	bl	1f29c <d_print_expr_op>
   1e5a2:	f7fe be01 	b.w	1d1a8 <d_print_comp_inner+0xc7c>
   1e5a6:	491c      	ldr	r1, [pc, #112]	; (1e618 <d_print_comp_inner+0x20ec>)
   1e5a8:	4620      	mov	r0, r4
   1e5aa:	f7fb fe0d 	bl	1a1c8 <d_append_string>
   1e5ae:	68f3      	ldr	r3, [r6, #12]
   1e5b0:	b143      	cbz	r3, 1e5c4 <d_print_comp_inner+0x2098>
   1e5b2:	2111      	movs	r1, #17
   1e5b4:	4620      	mov	r0, r4
   1e5b6:	4632      	mov	r2, r6
   1e5b8:	f001 f86c 	bl	1f694 <d_print_subexpr>
   1e5bc:	2120      	movs	r1, #32
   1e5be:	4620      	mov	r0, r4
   1e5c0:	f7fb fd7a 	bl	1a0b8 <d_append_char>
   1e5c4:	463a      	mov	r2, r7
   1e5c6:	2111      	movs	r1, #17
   1e5c8:	4620      	mov	r0, r4
   1e5ca:	f000 f829 	bl	1e620 <d_print_comp>
   1e5ce:	2d00      	cmp	r5, #0
   1e5d0:	f47e ae17 	bne.w	1d202 <d_print_comp_inner+0xcd6>
   1e5d4:	f7fe b81a 	b.w	1c60c <d_print_comp_inner+0xe0>
   1e5d8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1e5dc:	f7fe b813 	b.w	1c606 <d_print_comp_inner+0xda>
   1e5e0:	2d00      	cmp	r5, #0
   1e5e2:	f43e a810 	beq.w	1c606 <d_print_comp_inner+0xda>
   1e5e6:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
   1e5ea:	f7fe b80c 	b.w	1c606 <d_print_comp_inner+0xda>
   1e5ee:	212d      	movs	r1, #45	; 0x2d
   1e5f0:	f7fb fd62 	bl	1a0b8 <d_append_char>
   1e5f4:	e605      	b.n	1e202 <d_print_comp_inner+0x1cd6>
   1e5f6:	4662      	mov	r2, ip
   1e5f8:	2100      	movs	r1, #0
   1e5fa:	6019      	str	r1, [r3, #0]
   1e5fc:	e66f      	b.n	1e2de <d_print_comp_inner+0x1db2>
   1e5fe:	68f2      	ldr	r2, [r6, #12]
   1e600:	f7fe b817 	b.w	1c632 <d_print_comp_inner+0x106>
   1e604:	463a      	mov	r2, r7
   1e606:	2111      	movs	r1, #17
   1e608:	f000 fe48 	bl	1f29c <d_print_expr_op>
   1e60c:	f7fe bdf9 	b.w	1d202 <d_print_comp_inner+0xcd6>
   1e610:	4902      	ldr	r1, [pc, #8]	; (1e61c <d_print_comp_inner+0x20f0>)
   1e612:	f7fe bbea 	b.w	1cdea <d_print_comp_inner+0x8be>
   1e616:	bf00      	nop
   1e618:	20002358 	.word	0x20002358
   1e61c:	2000236c 	.word	0x2000236c

0001e620 <d_print_comp>:
   1e620:	b530      	push	{r4, r5, lr}
   1e622:	4605      	mov	r5, r0
   1e624:	b083      	sub	sp, #12
   1e626:	b31a      	cbz	r2, 1e670 <d_print_comp+0x50>
   1e628:	6853      	ldr	r3, [r2, #4]
   1e62a:	2b01      	cmp	r3, #1
   1e62c:	4614      	mov	r4, r2
   1e62e:	dc1f      	bgt.n	1e670 <d_print_comp+0x50>
   1e630:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   1e634:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
   1e638:	dc1a      	bgt.n	1e670 <d_print_comp+0x50>
   1e63a:	3301      	adds	r3, #1
   1e63c:	6053      	str	r3, [r2, #4]
   1e63e:	3101      	adds	r1, #1
   1e640:	f8d0 312c 	ldr.w	r3, [r0, #300]	; 0x12c
   1e644:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
   1e648:	f8c0 d12c 	str.w	sp, [r0, #300]	; 0x12c
   1e64c:	2111      	movs	r1, #17
   1e64e:	e9cd 2300 	strd	r2, r3, [sp]
   1e652:	f7fd ff6b 	bl	1c52c <d_print_comp_inner>
   1e656:	6862      	ldr	r2, [r4, #4]
   1e658:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   1e65c:	9901      	ldr	r1, [sp, #4]
   1e65e:	f8c5 112c 	str.w	r1, [r5, #300]	; 0x12c
   1e662:	3a01      	subs	r2, #1
   1e664:	3b01      	subs	r3, #1
   1e666:	6062      	str	r2, [r4, #4]
   1e668:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
   1e66c:	b003      	add	sp, #12
   1e66e:	bd30      	pop	{r4, r5, pc}
   1e670:	2301      	movs	r3, #1
   1e672:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118
   1e676:	b003      	add	sp, #12
   1e678:	bd30      	pop	{r4, r5, pc}
   1e67a:	bf00      	nop

0001e67c <d_print_mod>:
   1e67c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e680:	7813      	ldrb	r3, [r2, #0]
   1e682:	3b03      	subs	r3, #3
   1e684:	4615      	mov	r5, r2
   1e686:	4604      	mov	r4, r0
   1e688:	2b4e      	cmp	r3, #78	; 0x4e
   1e68a:	d850      	bhi.n	1e72e <d_print_mod+0xb2>
   1e68c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1e690:	004f011c 	.word	0x004f011c
   1e694:	004f004f 	.word	0x004f004f
   1e698:	004f004f 	.word	0x004f004f
   1e69c:	004f004f 	.word	0x004f004f
   1e6a0:	004f004f 	.word	0x004f004f
   1e6a4:	004f004f 	.word	0x004f004f
   1e6a8:	004f004f 	.word	0x004f004f
   1e6ac:	004f004f 	.word	0x004f004f
   1e6b0:	004f004f 	.word	0x004f004f
   1e6b4:	004f004f 	.word	0x004f004f
   1e6b8:	004f004f 	.word	0x004f004f
   1e6bc:	007c0055 	.word	0x007c0055
   1e6c0:	005500a3 	.word	0x005500a3
   1e6c4:	00a3007c 	.word	0x00a3007c
   1e6c8:	00fc00ef 	.word	0x00fc00ef
   1e6cc:	02870109 	.word	0x02870109
   1e6d0:	01300122 	.word	0x01300122
   1e6d4:	017b0155 	.word	0x017b0155
   1e6d8:	004f004f 	.word	0x004f004f
   1e6dc:	004f004f 	.word	0x004f004f
   1e6e0:	004f01a1 	.word	0x004f01a1
   1e6e4:	004f01d1 	.word	0x004f01d1
   1e6e8:	004f004f 	.word	0x004f004f
   1e6ec:	004f004f 	.word	0x004f004f
   1e6f0:	004f004f 	.word	0x004f004f
   1e6f4:	004f004f 	.word	0x004f004f
   1e6f8:	004f004f 	.word	0x004f004f
   1e6fc:	004f004f 	.word	0x004f004f
   1e700:	004f004f 	.word	0x004f004f
   1e704:	004f004f 	.word	0x004f004f
   1e708:	004f004f 	.word	0x004f004f
   1e70c:	004f004f 	.word	0x004f004f
   1e710:	004f004f 	.word	0x004f004f
   1e714:	004f004f 	.word	0x004f004f
   1e718:	004f004f 	.word	0x004f004f
   1e71c:	004f004f 	.word	0x004f004f
   1e720:	004f004f 	.word	0x004f004f
   1e724:	01f8004f 	.word	0x01f8004f
   1e728:	0234004f 	.word	0x0234004f
   1e72c:	00c8      	.short	0x00c8
   1e72e:	462a      	mov	r2, r5
   1e730:	2111      	movs	r1, #17
   1e732:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e736:	f7ff bf73 	b.w	1e620 <d_print_comp>
   1e73a:	4ed6      	ldr	r6, [pc, #856]	; (1ea94 <d_print_mod+0x418>)
   1e73c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e740:	f106 0708 	add.w	r7, r6, #8
   1e744:	2520      	movs	r5, #32
   1e746:	f04f 0800 	mov.w	r8, #0
   1e74a:	e00b      	b.n	1e764 <d_print_mod+0xe8>
   1e74c:	460b      	mov	r3, r1
   1e74e:	3101      	adds	r1, #1
   1e750:	42be      	cmp	r6, r7
   1e752:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e756:	54e5      	strb	r5, [r4, r3]
   1e758:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e75c:	f000 80c6 	beq.w	1e8ec <d_print_mod+0x270>
   1e760:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e764:	29ff      	cmp	r1, #255	; 0xff
   1e766:	d1f1      	bne.n	1e74c <d_print_mod+0xd0>
   1e768:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e76c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e770:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e774:	4620      	mov	r0, r4
   1e776:	4798      	blx	r3
   1e778:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e77c:	3301      	adds	r3, #1
   1e77e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e782:	2101      	movs	r1, #1
   1e784:	2300      	movs	r3, #0
   1e786:	e7e3      	b.n	1e750 <d_print_mod+0xd4>
   1e788:	4ec3      	ldr	r6, [pc, #780]	; (1ea98 <d_print_mod+0x41c>)
   1e78a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e78e:	f106 0708 	add.w	r7, r6, #8
   1e792:	2520      	movs	r5, #32
   1e794:	f04f 0800 	mov.w	r8, #0
   1e798:	e00b      	b.n	1e7b2 <d_print_mod+0x136>
   1e79a:	460b      	mov	r3, r1
   1e79c:	3101      	adds	r1, #1
   1e79e:	42b7      	cmp	r7, r6
   1e7a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e7a4:	54e5      	strb	r5, [r4, r3]
   1e7a6:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e7aa:	f000 809f 	beq.w	1e8ec <d_print_mod+0x270>
   1e7ae:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e7b2:	29ff      	cmp	r1, #255	; 0xff
   1e7b4:	d1f1      	bne.n	1e79a <d_print_mod+0x11e>
   1e7b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e7ba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e7be:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e7c2:	4620      	mov	r0, r4
   1e7c4:	4798      	blx	r3
   1e7c6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e7ca:	3301      	adds	r3, #1
   1e7cc:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e7d0:	2101      	movs	r1, #1
   1e7d2:	2300      	movs	r3, #0
   1e7d4:	e7e3      	b.n	1e79e <d_print_mod+0x122>
   1e7d6:	4eb1      	ldr	r6, [pc, #708]	; (1ea9c <d_print_mod+0x420>)
   1e7d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e7dc:	1d77      	adds	r7, r6, #5
   1e7de:	2520      	movs	r5, #32
   1e7e0:	f04f 0800 	mov.w	r8, #0
   1e7e4:	e00a      	b.n	1e7fc <d_print_mod+0x180>
   1e7e6:	460b      	mov	r3, r1
   1e7e8:	3101      	adds	r1, #1
   1e7ea:	42b7      	cmp	r7, r6
   1e7ec:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e7f0:	54e5      	strb	r5, [r4, r3]
   1e7f2:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e7f6:	d079      	beq.n	1e8ec <d_print_mod+0x270>
   1e7f8:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e7fc:	29ff      	cmp	r1, #255	; 0xff
   1e7fe:	d1f2      	bne.n	1e7e6 <d_print_mod+0x16a>
   1e800:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e804:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e808:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e80c:	4620      	mov	r0, r4
   1e80e:	4798      	blx	r3
   1e810:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e814:	3301      	adds	r3, #1
   1e816:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e81a:	2101      	movs	r1, #1
   1e81c:	2300      	movs	r3, #0
   1e81e:	e7e4      	b.n	1e7ea <d_print_mod+0x16e>
   1e820:	4f9f      	ldr	r7, [pc, #636]	; (1eaa0 <d_print_mod+0x424>)
   1e822:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e826:	f107 0905 	add.w	r9, r7, #5
   1e82a:	2620      	movs	r6, #32
   1e82c:	f04f 0800 	mov.w	r8, #0
   1e830:	e00b      	b.n	1e84a <d_print_mod+0x1ce>
   1e832:	460b      	mov	r3, r1
   1e834:	3101      	adds	r1, #1
   1e836:	45b9      	cmp	r9, r7
   1e838:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e83c:	54e6      	strb	r6, [r4, r3]
   1e83e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e842:	f000 817f 	beq.w	1eb44 <d_print_mod+0x4c8>
   1e846:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1e84a:	29ff      	cmp	r1, #255	; 0xff
   1e84c:	d1f1      	bne.n	1e832 <d_print_mod+0x1b6>
   1e84e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e852:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e856:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e85a:	4620      	mov	r0, r4
   1e85c:	4798      	blx	r3
   1e85e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e862:	3301      	adds	r3, #1
   1e864:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e868:	2101      	movs	r1, #1
   1e86a:	2300      	movs	r3, #0
   1e86c:	e7e3      	b.n	1e836 <d_print_mod+0x1ba>
   1e86e:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1e872:	2bff      	cmp	r3, #255	; 0xff
   1e874:	f000 81d0 	beq.w	1ec18 <d_print_mod+0x59c>
   1e878:	2220      	movs	r2, #32
   1e87a:	1c59      	adds	r1, r3, #1
   1e87c:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
   1e880:	54c2      	strb	r2, [r0, r3]
   1e882:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
   1e886:	e027      	b.n	1e8d8 <d_print_mod+0x25c>
   1e888:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   1e88c:	2bff      	cmp	r3, #255	; 0xff
   1e88e:	f000 81b4 	beq.w	1ebfa <d_print_mod+0x57e>
   1e892:	1c59      	adds	r1, r3, #1
   1e894:	2220      	movs	r2, #32
   1e896:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e89a:	54e2      	strb	r2, [r4, r3]
   1e89c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1e8a0:	e028      	b.n	1e8f4 <d_print_mod+0x278>
   1e8a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e8a6:	29ff      	cmp	r1, #255	; 0xff
   1e8a8:	f000 8197 	beq.w	1ebda <d_print_mod+0x55e>
   1e8ac:	1c4a      	adds	r2, r1, #1
   1e8ae:	2320      	movs	r3, #32
   1e8b0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e8b4:	5463      	strb	r3, [r4, r1]
   1e8b6:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e8ba:	692a      	ldr	r2, [r5, #16]
   1e8bc:	4620      	mov	r0, r4
   1e8be:	2111      	movs	r1, #17
   1e8c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e8c4:	f7ff beac 	b.w	1e620 <d_print_comp>
   1e8c8:	68ea      	ldr	r2, [r5, #12]
   1e8ca:	2111      	movs	r1, #17
   1e8cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e8d0:	f7ff bea6 	b.w	1e620 <d_print_comp>
   1e8d4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e8d8:	29ff      	cmp	r1, #255	; 0xff
   1e8da:	f000 81bc 	beq.w	1ec56 <d_print_mod+0x5da>
   1e8de:	1c4a      	adds	r2, r1, #1
   1e8e0:	2326      	movs	r3, #38	; 0x26
   1e8e2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1e8e6:	5463      	strb	r3, [r4, r1]
   1e8e8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1e8ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8f0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e8f4:	4d6b      	ldr	r5, [pc, #428]	; (1eaa4 <d_print_mod+0x428>)
   1e8f6:	2626      	movs	r6, #38	; 0x26
   1e8f8:	1c6f      	adds	r7, r5, #1
   1e8fa:	f04f 0800 	mov.w	r8, #0
   1e8fe:	e00a      	b.n	1e916 <d_print_mod+0x29a>
   1e900:	460b      	mov	r3, r1
   1e902:	3101      	adds	r1, #1
   1e904:	42bd      	cmp	r5, r7
   1e906:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e90a:	54e6      	strb	r6, [r4, r3]
   1e90c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1e910:	d0ec      	beq.n	1e8ec <d_print_mod+0x270>
   1e912:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1e916:	29ff      	cmp	r1, #255	; 0xff
   1e918:	d1f2      	bne.n	1e900 <d_print_mod+0x284>
   1e91a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e91e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e922:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e926:	4620      	mov	r0, r4
   1e928:	4798      	blx	r3
   1e92a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e92e:	3301      	adds	r3, #1
   1e930:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e934:	2101      	movs	r1, #1
   1e936:	2300      	movs	r3, #0
   1e938:	e7e4      	b.n	1e904 <d_print_mod+0x288>
   1e93a:	4e5b      	ldr	r6, [pc, #364]	; (1eaa8 <d_print_mod+0x42c>)
   1e93c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e940:	f106 0708 	add.w	r7, r6, #8
   1e944:	2520      	movs	r5, #32
   1e946:	f04f 0800 	mov.w	r8, #0
   1e94a:	e00a      	b.n	1e962 <d_print_mod+0x2e6>
   1e94c:	460b      	mov	r3, r1
   1e94e:	3101      	adds	r1, #1
   1e950:	42b7      	cmp	r7, r6
   1e952:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e956:	54e5      	strb	r5, [r4, r3]
   1e958:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e95c:	d0c6      	beq.n	1e8ec <d_print_mod+0x270>
   1e95e:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e962:	29ff      	cmp	r1, #255	; 0xff
   1e964:	d1f2      	bne.n	1e94c <d_print_mod+0x2d0>
   1e966:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e96a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e96e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e972:	4620      	mov	r0, r4
   1e974:	4798      	blx	r3
   1e976:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e97a:	3301      	adds	r3, #1
   1e97c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e980:	2101      	movs	r1, #1
   1e982:	2300      	movs	r3, #0
   1e984:	e7e4      	b.n	1e950 <d_print_mod+0x2d4>
   1e986:	4e49      	ldr	r6, [pc, #292]	; (1eaac <d_print_mod+0x430>)
   1e988:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1e98c:	f106 070a 	add.w	r7, r6, #10
   1e990:	2520      	movs	r5, #32
   1e992:	f04f 0800 	mov.w	r8, #0
   1e996:	e00a      	b.n	1e9ae <d_print_mod+0x332>
   1e998:	460b      	mov	r3, r1
   1e99a:	3101      	adds	r1, #1
   1e99c:	42b7      	cmp	r7, r6
   1e99e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1e9a2:	54e5      	strb	r5, [r4, r3]
   1e9a4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1e9a8:	d0a0      	beq.n	1e8ec <d_print_mod+0x270>
   1e9aa:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1e9ae:	29ff      	cmp	r1, #255	; 0xff
   1e9b0:	d1f2      	bne.n	1e998 <d_print_mod+0x31c>
   1e9b2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1e9b6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1e9ba:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1e9be:	4620      	mov	r0, r4
   1e9c0:	4798      	blx	r3
   1e9c2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1e9c6:	3301      	adds	r3, #1
   1e9c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e9cc:	2101      	movs	r1, #1
   1e9ce:	2300      	movs	r3, #0
   1e9d0:	e7e4      	b.n	1e99c <d_print_mod+0x320>
   1e9d2:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
   1e9d6:	2b28      	cmp	r3, #40	; 0x28
   1e9d8:	f040 80d5 	bne.w	1eb86 <d_print_mod+0x50a>
   1e9dc:	4e34      	ldr	r6, [pc, #208]	; (1eab0 <d_print_mod+0x434>)
   1e9de:	68ea      	ldr	r2, [r5, #12]
   1e9e0:	2111      	movs	r1, #17
   1e9e2:	4620      	mov	r0, r4
   1e9e4:	f7ff fe1c 	bl	1e620 <d_print_comp>
   1e9e8:	1cb7      	adds	r7, r6, #2
   1e9ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1e9ee:	253a      	movs	r5, #58	; 0x3a
   1e9f0:	f04f 0800 	mov.w	r8, #0
   1e9f4:	e00b      	b.n	1ea0e <d_print_mod+0x392>
   1e9f6:	460b      	mov	r3, r1
   1e9f8:	3101      	adds	r1, #1
   1e9fa:	42b7      	cmp	r7, r6
   1e9fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ea00:	54e5      	strb	r5, [r4, r3]
   1ea02:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1ea06:	f43f af71 	beq.w	1e8ec <d_print_mod+0x270>
   1ea0a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1ea0e:	29ff      	cmp	r1, #255	; 0xff
   1ea10:	d1f1      	bne.n	1e9f6 <d_print_mod+0x37a>
   1ea12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ea16:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ea1a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ea1e:	4620      	mov	r0, r4
   1ea20:	4798      	blx	r3
   1ea22:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea26:	3301      	adds	r3, #1
   1ea28:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea2c:	2101      	movs	r1, #1
   1ea2e:	2300      	movs	r3, #0
   1ea30:	e7e3      	b.n	1e9fa <d_print_mod+0x37e>
   1ea32:	4f20      	ldr	r7, [pc, #128]	; (1eab4 <d_print_mod+0x438>)
   1ea34:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ea38:	f107 0909 	add.w	r9, r7, #9
   1ea3c:	2620      	movs	r6, #32
   1ea3e:	f04f 0800 	mov.w	r8, #0
   1ea42:	e00b      	b.n	1ea5c <d_print_mod+0x3e0>
   1ea44:	460b      	mov	r3, r1
   1ea46:	3101      	adds	r1, #1
   1ea48:	454f      	cmp	r7, r9
   1ea4a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ea4e:	54e6      	strb	r6, [r4, r3]
   1ea50:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1ea54:	f000 8085 	beq.w	1eb62 <d_print_mod+0x4e6>
   1ea58:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1ea5c:	29ff      	cmp	r1, #255	; 0xff
   1ea5e:	d1f1      	bne.n	1ea44 <d_print_mod+0x3c8>
   1ea60:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ea64:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ea68:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1ea6c:	4620      	mov	r0, r4
   1ea6e:	4798      	blx	r3
   1ea70:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ea74:	3301      	adds	r3, #1
   1ea76:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ea7a:	2101      	movs	r1, #1
   1ea7c:	2300      	movs	r3, #0
   1ea7e:	e7e3      	b.n	1ea48 <d_print_mod+0x3cc>
   1ea80:	4e0d      	ldr	r6, [pc, #52]	; (1eab8 <d_print_mod+0x43c>)
   1ea82:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1ea86:	f106 0710 	add.w	r7, r6, #16
   1ea8a:	2520      	movs	r5, #32
   1ea8c:	f04f 0800 	mov.w	r8, #0
   1ea90:	e020      	b.n	1ead4 <d_print_mod+0x458>
   1ea92:	bf00      	nop
   1ea94:	20002414 	.word	0x20002414
   1ea98:	20002420 	.word	0x20002420
   1ea9c:	2000242c 	.word	0x2000242c
   1eaa0:	20002454 	.word	0x20002454
   1eaa4:	2000245c 	.word	0x2000245c
   1eaa8:	20002460 	.word	0x20002460
   1eaac:	2000246c 	.word	0x2000246c
   1eab0:	20002478 	.word	0x20002478
   1eab4:	2000247c 	.word	0x2000247c
   1eab8:	20002434 	.word	0x20002434
   1eabc:	460b      	mov	r3, r1
   1eabe:	3101      	adds	r1, #1
   1eac0:	42b7      	cmp	r7, r6
   1eac2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1eac6:	54e5      	strb	r5, [r4, r3]
   1eac8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1eacc:	f43f af0e 	beq.w	1e8ec <d_print_mod+0x270>
   1ead0:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1ead4:	29ff      	cmp	r1, #255	; 0xff
   1ead6:	d1f1      	bne.n	1eabc <d_print_mod+0x440>
   1ead8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eadc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1eae0:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1eae4:	4620      	mov	r0, r4
   1eae6:	4798      	blx	r3
   1eae8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1eaec:	3301      	adds	r3, #1
   1eaee:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1eaf2:	2101      	movs	r1, #1
   1eaf4:	2300      	movs	r3, #0
   1eaf6:	e7e3      	b.n	1eac0 <d_print_mod+0x444>
   1eaf8:	4f6d      	ldr	r7, [pc, #436]	; (1ecb0 <d_print_mod+0x634>)
   1eafa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1eafe:	f107 0908 	add.w	r9, r7, #8
   1eb02:	2620      	movs	r6, #32
   1eb04:	f04f 0800 	mov.w	r8, #0
   1eb08:	e00a      	b.n	1eb20 <d_print_mod+0x4a4>
   1eb0a:	460b      	mov	r3, r1
   1eb0c:	3101      	adds	r1, #1
   1eb0e:	45b9      	cmp	r9, r7
   1eb10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1eb14:	54e6      	strb	r6, [r4, r3]
   1eb16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1eb1a:	d013      	beq.n	1eb44 <d_print_mod+0x4c8>
   1eb1c:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1eb20:	29ff      	cmp	r1, #255	; 0xff
   1eb22:	d1f2      	bne.n	1eb0a <d_print_mod+0x48e>
   1eb24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1eb28:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1eb2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1eb30:	4620      	mov	r0, r4
   1eb32:	4798      	blx	r3
   1eb34:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1eb38:	3301      	adds	r3, #1
   1eb3a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1eb3e:	2101      	movs	r1, #1
   1eb40:	2300      	movs	r3, #0
   1eb42:	e7e4      	b.n	1eb0e <d_print_mod+0x492>
   1eb44:	692a      	ldr	r2, [r5, #16]
   1eb46:	2a00      	cmp	r2, #0
   1eb48:	f43f aed0 	beq.w	1e8ec <d_print_mod+0x270>
   1eb4c:	29ff      	cmp	r1, #255	; 0xff
   1eb4e:	d032      	beq.n	1ebb6 <d_print_mod+0x53a>
   1eb50:	1c48      	adds	r0, r1, #1
   1eb52:	2328      	movs	r3, #40	; 0x28
   1eb54:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
   1eb58:	5463      	strb	r3, [r4, r1]
   1eb5a:	2111      	movs	r1, #17
   1eb5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb60:	e001      	b.n	1eb66 <d_print_mod+0x4ea>
   1eb62:	68ea      	ldr	r2, [r5, #12]
   1eb64:	2111      	movs	r1, #17
   1eb66:	4620      	mov	r0, r4
   1eb68:	f7ff fd5a 	bl	1e620 <d_print_comp>
   1eb6c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1eb70:	29ff      	cmp	r1, #255	; 0xff
   1eb72:	d061      	beq.n	1ec38 <d_print_mod+0x5bc>
   1eb74:	1c4a      	adds	r2, r1, #1
   1eb76:	2329      	movs	r3, #41	; 0x29
   1eb78:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1eb7c:	5463      	strb	r3, [r4, r1]
   1eb7e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1eb86:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1eb8a:	29ff      	cmp	r1, #255	; 0xff
   1eb8c:	d072      	beq.n	1ec74 <d_print_mod+0x5f8>
   1eb8e:	1c4a      	adds	r2, r1, #1
   1eb90:	2320      	movs	r3, #32
   1eb92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1eb96:	5463      	strb	r3, [r4, r1]
   1eb98:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1eb9c:	e71e      	b.n	1e9dc <d_print_mod+0x360>
   1eb9e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1eba2:	29ff      	cmp	r1, #255	; 0xff
   1eba4:	d076      	beq.n	1ec94 <d_print_mod+0x618>
   1eba6:	1c4a      	adds	r2, r1, #1
   1eba8:	232a      	movs	r3, #42	; 0x2a
   1ebaa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1ebae:	5463      	strb	r3, [r4, r1]
   1ebb0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1ebb4:	e69a      	b.n	1e8ec <d_print_mod+0x270>
   1ebb6:	2600      	movs	r6, #0
   1ebb8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1ebbc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ebc0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1ebc4:	4620      	mov	r0, r4
   1ebc6:	4798      	blx	r3
   1ebc8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebcc:	692a      	ldr	r2, [r5, #16]
   1ebce:	3301      	adds	r3, #1
   1ebd0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebd4:	2001      	movs	r0, #1
   1ebd6:	4631      	mov	r1, r6
   1ebd8:	e7bb      	b.n	1eb52 <d_print_mod+0x4d6>
   1ebda:	2600      	movs	r6, #0
   1ebdc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ebe0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1ebe4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1ebe8:	4798      	blx	r3
   1ebea:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ebee:	2201      	movs	r2, #1
   1ebf0:	4413      	add	r3, r2
   1ebf2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ebf6:	4631      	mov	r1, r6
   1ebf8:	e659      	b.n	1e8ae <d_print_mod+0x232>
   1ebfa:	2500      	movs	r5, #0
   1ebfc:	4619      	mov	r1, r3
   1ebfe:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1ec02:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1ec06:	4798      	blx	r3
   1ec08:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec0c:	2101      	movs	r1, #1
   1ec0e:	440b      	add	r3, r1
   1ec10:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec14:	462b      	mov	r3, r5
   1ec16:	e63d      	b.n	1e894 <d_print_mod+0x218>
   1ec18:	2100      	movs	r1, #0
   1ec1a:	e9d0 5242 	ldrd	r5, r2, [r0, #264]	; 0x108
   1ec1e:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
   1ec22:	4619      	mov	r1, r3
   1ec24:	47a8      	blx	r5
   1ec26:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec2a:	2220      	movs	r2, #32
   1ec2c:	3301      	adds	r3, #1
   1ec2e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec32:	7022      	strb	r2, [r4, #0]
   1ec34:	2101      	movs	r1, #1
   1ec36:	e652      	b.n	1e8de <d_print_mod+0x262>
   1ec38:	2500      	movs	r5, #0
   1ec3a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ec3e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ec42:	4620      	mov	r0, r4
   1ec44:	4798      	blx	r3
   1ec46:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec4a:	2201      	movs	r2, #1
   1ec4c:	4413      	add	r3, r2
   1ec4e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec52:	4629      	mov	r1, r5
   1ec54:	e78f      	b.n	1eb76 <d_print_mod+0x4fa>
   1ec56:	2500      	movs	r5, #0
   1ec58:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ec5c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1ec60:	4620      	mov	r0, r4
   1ec62:	4798      	blx	r3
   1ec64:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec68:	2201      	movs	r2, #1
   1ec6a:	4413      	add	r3, r2
   1ec6c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec70:	4629      	mov	r1, r5
   1ec72:	e635      	b.n	1e8e0 <d_print_mod+0x264>
   1ec74:	2600      	movs	r6, #0
   1ec76:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
   1ec7a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
   1ec7e:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1ec82:	4798      	blx	r3
   1ec84:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ec88:	2201      	movs	r2, #1
   1ec8a:	4413      	add	r3, r2
   1ec8c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ec90:	4631      	mov	r1, r6
   1ec92:	e77d      	b.n	1eb90 <d_print_mod+0x514>
   1ec94:	2500      	movs	r5, #0
   1ec96:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1ec9a:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1ec9e:	4798      	blx	r3
   1eca0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1eca4:	2201      	movs	r2, #1
   1eca6:	4413      	add	r3, r2
   1eca8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ecac:	4629      	mov	r1, r5
   1ecae:	e77b      	b.n	1eba8 <d_print_mod+0x52c>
   1ecb0:	20002448 	.word	0x20002448

0001ecb4 <d_print_function_type>:
   1ecb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ecb8:	4604      	mov	r4, r0
   1ecba:	4616      	mov	r6, r2
   1ecbc:	461d      	mov	r5, r3
   1ecbe:	b19b      	cbz	r3, 1ece8 <d_print_function_type+0x34>
   1ecc0:	4f71      	ldr	r7, [pc, #452]	; (1ee88 <d_print_function_type+0x1d4>)
   1ecc2:	2001      	movs	r0, #1
   1ecc4:	689a      	ldr	r2, [r3, #8]
   1ecc6:	b97a      	cbnz	r2, 1ece8 <d_print_function_type+0x34>
   1ecc8:	685a      	ldr	r2, [r3, #4]
   1ecca:	7811      	ldrb	r1, [r2, #0]
   1eccc:	3919      	subs	r1, #25
   1ecce:	b2c9      	uxtb	r1, r1
   1ecd0:	2912      	cmp	r1, #18
   1ecd2:	fa00 f201 	lsl.w	r2, r0, r1
   1ecd6:	d804      	bhi.n	1ece2 <d_print_function_type+0x2e>
   1ecd8:	423a      	tst	r2, r7
   1ecda:	d135      	bne.n	1ed48 <d_print_function_type+0x94>
   1ecdc:	f412 6f60 	tst.w	r2, #3584	; 0xe00
   1ece0:	d174      	bne.n	1edcc <d_print_function_type+0x118>
   1ece2:	681b      	ldr	r3, [r3, #0]
   1ece4:	2b00      	cmp	r3, #0
   1ece6:	d1ed      	bne.n	1ecc4 <d_print_function_type+0x10>
   1ece8:	2300      	movs	r3, #0
   1ecea:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1ecee:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
   1ecf2:	462a      	mov	r2, r5
   1ecf4:	2111      	movs	r1, #17
   1ecf6:	4620      	mov	r0, r4
   1ecf8:	f000 f8c8 	bl	1ee8c <d_print_mod_list>
   1ecfc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ed00:	2bff      	cmp	r3, #255	; 0xff
   1ed02:	d04b      	beq.n	1ed9c <d_print_function_type+0xe8>
   1ed04:	2228      	movs	r2, #40	; 0x28
   1ed06:	1c59      	adds	r1, r3, #1
   1ed08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ed0c:	54e2      	strb	r2, [r4, r3]
   1ed0e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ed12:	6932      	ldr	r2, [r6, #16]
   1ed14:	b12a      	cbz	r2, 1ed22 <d_print_function_type+0x6e>
   1ed16:	2111      	movs	r1, #17
   1ed18:	4620      	mov	r0, r4
   1ed1a:	f7ff fc81 	bl	1e620 <d_print_comp>
   1ed1e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ed22:	29ff      	cmp	r1, #255	; 0xff
   1ed24:	d076      	beq.n	1ee14 <d_print_function_type+0x160>
   1ed26:	1c4b      	adds	r3, r1, #1
   1ed28:	2229      	movs	r2, #41	; 0x29
   1ed2a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ed2e:	4620      	mov	r0, r4
   1ed30:	5462      	strb	r2, [r4, r1]
   1ed32:	2301      	movs	r3, #1
   1ed34:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ed38:	2111      	movs	r1, #17
   1ed3a:	462a      	mov	r2, r5
   1ed3c:	f000 f8a6 	bl	1ee8c <d_print_mod_list>
   1ed40:	f8c4 7114 	str.w	r7, [r4, #276]	; 0x114
   1ed44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ed48:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1ed4c:	2b20      	cmp	r3, #32
   1ed4e:	d145      	bne.n	1eddc <d_print_function_type+0x128>
   1ed50:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ed54:	29ff      	cmp	r1, #255	; 0xff
   1ed56:	d04e      	beq.n	1edf6 <d_print_function_type+0x142>
   1ed58:	1c4b      	adds	r3, r1, #1
   1ed5a:	f04f 0828 	mov.w	r8, #40	; 0x28
   1ed5e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ed62:	f804 8001 	strb.w	r8, [r4, r1]
   1ed66:	f04f 0900 	mov.w	r9, #0
   1ed6a:	f8d4 7114 	ldr.w	r7, [r4, #276]	; 0x114
   1ed6e:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1ed72:	2111      	movs	r1, #17
   1ed74:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
   1ed78:	464b      	mov	r3, r9
   1ed7a:	462a      	mov	r2, r5
   1ed7c:	4620      	mov	r0, r4
   1ed7e:	f000 f885 	bl	1ee8c <d_print_mod_list>
   1ed82:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1ed86:	29ff      	cmp	r1, #255	; 0xff
   1ed88:	d053      	beq.n	1ee32 <d_print_function_type+0x17e>
   1ed8a:	1c4b      	adds	r3, r1, #1
   1ed8c:	2229      	movs	r2, #41	; 0x29
   1ed8e:	2bff      	cmp	r3, #255	; 0xff
   1ed90:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ed94:	5462      	strb	r2, [r4, r1]
   1ed96:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1ed9a:	d1b3      	bne.n	1ed04 <d_print_function_type+0x50>
   1ed9c:	4619      	mov	r1, r3
   1ed9e:	2300      	movs	r3, #0
   1eda0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
   1eda4:	4620      	mov	r0, r4
   1eda6:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1edaa:	4798      	blx	r3
   1edac:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1edb0:	3301      	adds	r3, #1
   1edb2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1edb6:	2328      	movs	r3, #40	; 0x28
   1edb8:	7023      	strb	r3, [r4, #0]
   1edba:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1edbe:	6932      	ldr	r2, [r6, #16]
   1edc0:	2101      	movs	r1, #1
   1edc2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1edc6:	2a00      	cmp	r2, #0
   1edc8:	d1a5      	bne.n	1ed16 <d_print_function_type+0x62>
   1edca:	e7ac      	b.n	1ed26 <d_print_function_type+0x72>
   1edcc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   1edd0:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
   1edd4:	2a28      	cmp	r2, #40	; 0x28
   1edd6:	d0bb      	beq.n	1ed50 <d_print_function_type+0x9c>
   1edd8:	2b20      	cmp	r3, #32
   1edda:	d0b9      	beq.n	1ed50 <d_print_function_type+0x9c>
   1eddc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1ede0:	2bff      	cmp	r3, #255	; 0xff
   1ede2:	d03e      	beq.n	1ee62 <d_print_function_type+0x1ae>
   1ede4:	1c59      	adds	r1, r3, #1
   1ede6:	2220      	movs	r2, #32
   1ede8:	29ff      	cmp	r1, #255	; 0xff
   1edea:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1edee:	54e2      	strb	r2, [r4, r3]
   1edf0:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1edf4:	d1b0      	bne.n	1ed58 <d_print_function_type+0xa4>
   1edf6:	2700      	movs	r7, #0
   1edf8:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1edfc:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
   1ee00:	4620      	mov	r0, r4
   1ee02:	4798      	blx	r3
   1ee04:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ee08:	3301      	adds	r3, #1
   1ee0a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ee0e:	4639      	mov	r1, r7
   1ee10:	2301      	movs	r3, #1
   1ee12:	e7a2      	b.n	1ed5a <d_print_function_type+0xa6>
   1ee14:	2600      	movs	r6, #0
   1ee16:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ee1a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1ee1e:	4620      	mov	r0, r4
   1ee20:	4798      	blx	r3
   1ee22:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ee26:	3301      	adds	r3, #1
   1ee28:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ee2c:	4631      	mov	r1, r6
   1ee2e:	2301      	movs	r3, #1
   1ee30:	e77a      	b.n	1ed28 <d_print_function_type+0x74>
   1ee32:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1ee36:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1ee3a:	4620      	mov	r0, r4
   1ee3c:	4798      	blx	r3
   1ee3e:	f642 0329 	movw	r3, #10281	; 0x2829
   1ee42:	8023      	strh	r3, [r4, #0]
   1ee44:	f884 8104 	strb.w	r8, [r4, #260]	; 0x104
   1ee48:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ee4c:	6932      	ldr	r2, [r6, #16]
   1ee4e:	3301      	adds	r3, #1
   1ee50:	2102      	movs	r1, #2
   1ee52:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ee56:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1ee5a:	2a00      	cmp	r2, #0
   1ee5c:	f47f af5b 	bne.w	1ed16 <d_print_function_type+0x62>
   1ee60:	e761      	b.n	1ed26 <d_print_function_type+0x72>
   1ee62:	2200      	movs	r2, #0
   1ee64:	4619      	mov	r1, r3
   1ee66:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1ee6a:	f8d4 7108 	ldr.w	r7, [r4, #264]	; 0x108
   1ee6e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1ee72:	4620      	mov	r0, r4
   1ee74:	47b8      	blx	r7
   1ee76:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1ee7a:	2220      	movs	r2, #32
   1ee7c:	3301      	adds	r3, #1
   1ee7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1ee82:	7022      	strb	r2, [r4, #0]
   1ee84:	2101      	movs	r1, #1
   1ee86:	e767      	b.n	1ed58 <d_print_function_type+0xa4>
   1ee88:	00043107 	.word	0x00043107

0001ee8c <d_print_mod_list>:
   1ee8c:	2a00      	cmp	r2, #0
   1ee8e:	f000 80c2 	beq.w	1f016 <d_print_mod_list+0x18a>
   1ee92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ee96:	4605      	mov	r5, r0
   1ee98:	b088      	sub	sp, #32
   1ee9a:	461e      	mov	r6, r3
   1ee9c:	4614      	mov	r4, r2
   1ee9e:	2701      	movs	r7, #1
   1eea0:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
   1eea4:	b9ca      	cbnz	r2, 1eeda <d_print_mod_list+0x4e>
   1eea6:	68a2      	ldr	r2, [r4, #8]
   1eea8:	bb0a      	cbnz	r2, 1eeee <d_print_mod_list+0x62>
   1eeaa:	6862      	ldr	r2, [r4, #4]
   1eeac:	7811      	ldrb	r1, [r2, #0]
   1eeae:	b1be      	cbz	r6, 1eee0 <d_print_mod_list+0x54>
   1eeb0:	68e3      	ldr	r3, [r4, #12]
   1eeb2:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1eeb6:	60a7      	str	r7, [r4, #8]
   1eeb8:	2929      	cmp	r1, #41	; 0x29
   1eeba:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1eebe:	d024      	beq.n	1ef0a <d_print_mod_list+0x7e>
   1eec0:	292a      	cmp	r1, #42	; 0x2a
   1eec2:	d02c      	beq.n	1ef1e <d_print_mod_list+0x92>
   1eec4:	2902      	cmp	r1, #2
   1eec6:	d034      	beq.n	1ef32 <d_print_mod_list+0xa6>
   1eec8:	2111      	movs	r1, #17
   1eeca:	4628      	mov	r0, r5
   1eecc:	f7ff fbd6 	bl	1e67c <d_print_mod>
   1eed0:	6824      	ldr	r4, [r4, #0]
   1eed2:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1eed6:	2c00      	cmp	r4, #0
   1eed8:	d1e2      	bne.n	1eea0 <d_print_mod_list+0x14>
   1eeda:	b008      	add	sp, #32
   1eedc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1eee0:	294e      	cmp	r1, #78	; 0x4e
   1eee2:	d004      	beq.n	1eeee <d_print_mod_list+0x62>
   1eee4:	d807      	bhi.n	1eef6 <d_print_mod_list+0x6a>
   1eee6:	f1a1 031c 	sub.w	r3, r1, #28
   1eeea:	2b04      	cmp	r3, #4
   1eeec:	d8e0      	bhi.n	1eeb0 <d_print_mod_list+0x24>
   1eeee:	6824      	ldr	r4, [r4, #0]
   1eef0:	2c00      	cmp	r4, #0
   1eef2:	d1d5      	bne.n	1eea0 <d_print_mod_list+0x14>
   1eef4:	e7f1      	b.n	1eeda <d_print_mod_list+0x4e>
   1eef6:	3950      	subs	r1, #80	; 0x50
   1eef8:	2901      	cmp	r1, #1
   1eefa:	d9f8      	bls.n	1eeee <d_print_mod_list+0x62>
   1eefc:	68e3      	ldr	r3, [r4, #12]
   1eefe:	f8d5 8110 	ldr.w	r8, [r5, #272]	; 0x110
   1ef02:	60a7      	str	r7, [r4, #8]
   1ef04:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
   1ef08:	e7de      	b.n	1eec8 <d_print_mod_list+0x3c>
   1ef0a:	6823      	ldr	r3, [r4, #0]
   1ef0c:	2111      	movs	r1, #17
   1ef0e:	4628      	mov	r0, r5
   1ef10:	f7ff fed0 	bl	1ecb4 <d_print_function_type>
   1ef14:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1ef18:	b008      	add	sp, #32
   1ef1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ef1e:	6823      	ldr	r3, [r4, #0]
   1ef20:	2111      	movs	r1, #17
   1ef22:	4628      	mov	r0, r5
   1ef24:	f000 f8d6 	bl	1f0d4 <d_print_array_type>
   1ef28:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1ef2c:	b008      	add	sp, #32
   1ef2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ef32:	4e64      	ldr	r6, [pc, #400]	; (1f0c4 <d_print_mod_list+0x238>)
   1ef34:	f8d5 7114 	ldr.w	r7, [r5, #276]	; 0x114
   1ef38:	68d2      	ldr	r2, [r2, #12]
   1ef3a:	f04f 0900 	mov.w	r9, #0
   1ef3e:	2111      	movs	r1, #17
   1ef40:	f8c5 9114 	str.w	r9, [r5, #276]	; 0x114
   1ef44:	4628      	mov	r0, r5
   1ef46:	f7ff fb6b 	bl	1e620 <d_print_comp>
   1ef4a:	f106 0a01 	add.w	sl, r6, #1
   1ef4e:	f8c5 7114 	str.w	r7, [r5, #276]	; 0x114
   1ef52:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1ef56:	273a      	movs	r7, #58	; 0x3a
   1ef58:	e00a      	b.n	1ef70 <d_print_mod_list+0xe4>
   1ef5a:	460b      	mov	r3, r1
   1ef5c:	3101      	adds	r1, #1
   1ef5e:	4556      	cmp	r6, sl
   1ef60:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1ef64:	54ef      	strb	r7, [r5, r3]
   1ef66:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1ef6a:	d013      	beq.n	1ef94 <d_print_mod_list+0x108>
   1ef6c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
   1ef70:	29ff      	cmp	r1, #255	; 0xff
   1ef72:	d1f2      	bne.n	1ef5a <d_print_mod_list+0xce>
   1ef74:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1ef78:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1ef7c:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1ef80:	4628      	mov	r0, r5
   1ef82:	4798      	blx	r3
   1ef84:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1ef88:	3301      	adds	r3, #1
   1ef8a:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1ef8e:	2101      	movs	r1, #1
   1ef90:	2300      	movs	r3, #0
   1ef92:	e7e4      	b.n	1ef5e <d_print_mod_list+0xd2>
   1ef94:	6863      	ldr	r3, [r4, #4]
   1ef96:	691c      	ldr	r4, [r3, #16]
   1ef98:	7823      	ldrb	r3, [r4, #0]
   1ef9a:	2b48      	cmp	r3, #72	; 0x48
   1ef9c:	d017      	beq.n	1efce <d_print_mod_list+0x142>
   1ef9e:	2b4e      	cmp	r3, #78	; 0x4e
   1efa0:	f1a3 0250 	sub.w	r2, r3, #80	; 0x50
   1efa4:	f1a3 011c 	sub.w	r1, r3, #28
   1efa8:	d00e      	beq.n	1efc8 <d_print_mod_list+0x13c>
   1efaa:	d80b      	bhi.n	1efc4 <d_print_mod_list+0x138>
   1efac:	2904      	cmp	r1, #4
   1efae:	d90b      	bls.n	1efc8 <d_print_mod_list+0x13c>
   1efb0:	4622      	mov	r2, r4
   1efb2:	2111      	movs	r1, #17
   1efb4:	4628      	mov	r0, r5
   1efb6:	f7ff fb33 	bl	1e620 <d_print_comp>
   1efba:	f8c5 8110 	str.w	r8, [r5, #272]	; 0x110
   1efbe:	b008      	add	sp, #32
   1efc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1efc4:	2a01      	cmp	r2, #1
   1efc6:	d8f3      	bhi.n	1efb0 <d_print_mod_list+0x124>
   1efc8:	68e4      	ldr	r4, [r4, #12]
   1efca:	7823      	ldrb	r3, [r4, #0]
   1efcc:	e7e7      	b.n	1ef9e <d_print_mod_list+0x112>
   1efce:	4f3e      	ldr	r7, [pc, #248]	; (1f0c8 <d_print_mod_list+0x23c>)
   1efd0:	267b      	movs	r6, #123	; 0x7b
   1efd2:	f107 0a0c 	add.w	sl, r7, #12
   1efd6:	f04f 0900 	mov.w	r9, #0
   1efda:	e00a      	b.n	1eff2 <d_print_mod_list+0x166>
   1efdc:	460b      	mov	r3, r1
   1efde:	3101      	adds	r1, #1
   1efe0:	4557      	cmp	r7, sl
   1efe2:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1efe6:	54ee      	strb	r6, [r5, r3]
   1efe8:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1efec:	d014      	beq.n	1f018 <d_print_mod_list+0x18c>
   1efee:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1eff2:	29ff      	cmp	r1, #255	; 0xff
   1eff4:	d1f2      	bne.n	1efdc <d_print_mod_list+0x150>
   1eff6:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1effa:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1effe:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f002:	4628      	mov	r0, r5
   1f004:	4798      	blx	r3
   1f006:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f00a:	3301      	adds	r3, #1
   1f00c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f010:	2101      	movs	r1, #1
   1f012:	2300      	movs	r3, #0
   1f014:	e7e4      	b.n	1efe0 <d_print_mod_list+0x154>
   1f016:	4770      	bx	lr
   1f018:	6922      	ldr	r2, [r4, #16]
   1f01a:	492c      	ldr	r1, [pc, #176]	; (1f0cc <d_print_mod_list+0x240>)
   1f01c:	3201      	adds	r2, #1
   1f01e:	a801      	add	r0, sp, #4
   1f020:	f002 fdb2 	bl	21b88 <sprintf>
   1f024:	a801      	add	r0, sp, #4
   1f026:	f003 fdeb 	bl	22c00 <strlen>
   1f02a:	b320      	cbz	r0, 1f076 <d_print_mod_list+0x1ea>
   1f02c:	ae01      	add	r6, sp, #4
   1f02e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1f032:	eb06 0a00 	add.w	sl, r6, r0
   1f036:	f04f 0900 	mov.w	r9, #0
   1f03a:	e008      	b.n	1f04e <d_print_mod_list+0x1c2>
   1f03c:	460b      	mov	r3, r1
   1f03e:	3101      	adds	r1, #1
   1f040:	4556      	cmp	r6, sl
   1f042:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1f046:	54ef      	strb	r7, [r5, r3]
   1f048:	f885 7104 	strb.w	r7, [r5, #260]	; 0x104
   1f04c:	d015      	beq.n	1f07a <d_print_mod_list+0x1ee>
   1f04e:	29ff      	cmp	r1, #255	; 0xff
   1f050:	f816 7b01 	ldrb.w	r7, [r6], #1
   1f054:	d1f2      	bne.n	1f03c <d_print_mod_list+0x1b0>
   1f056:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f05a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1f05e:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f062:	4628      	mov	r0, r5
   1f064:	4798      	blx	r3
   1f066:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f06a:	3301      	adds	r3, #1
   1f06c:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f070:	2101      	movs	r1, #1
   1f072:	2300      	movs	r3, #0
   1f074:	e7e4      	b.n	1f040 <d_print_mod_list+0x1b4>
   1f076:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
   1f07a:	4f15      	ldr	r7, [pc, #84]	; (1f0d0 <d_print_mod_list+0x244>)
   1f07c:	267d      	movs	r6, #125	; 0x7d
   1f07e:	f107 0a02 	add.w	sl, r7, #2
   1f082:	f04f 0900 	mov.w	r9, #0
   1f086:	e00a      	b.n	1f09e <d_print_mod_list+0x212>
   1f088:	460b      	mov	r3, r1
   1f08a:	3101      	adds	r1, #1
   1f08c:	4557      	cmp	r7, sl
   1f08e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
   1f092:	54ee      	strb	r6, [r5, r3]
   1f094:	f885 6104 	strb.w	r6, [r5, #260]	; 0x104
   1f098:	d096      	beq.n	1efc8 <d_print_mod_list+0x13c>
   1f09a:	f817 6f01 	ldrb.w	r6, [r7, #1]!
   1f09e:	29ff      	cmp	r1, #255	; 0xff
   1f0a0:	d1f2      	bne.n	1f088 <d_print_mod_list+0x1fc>
   1f0a2:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f0a6:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
   1f0aa:	f885 90ff 	strb.w	r9, [r5, #255]	; 0xff
   1f0ae:	4628      	mov	r0, r5
   1f0b0:	4798      	blx	r3
   1f0b2:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
   1f0b6:	3301      	adds	r3, #1
   1f0b8:	f8c5 3128 	str.w	r3, [r5, #296]	; 0x128
   1f0bc:	2101      	movs	r1, #1
   1f0be:	2300      	movs	r3, #0
   1f0c0:	e7e4      	b.n	1f08c <d_print_mod_list+0x200>
   1f0c2:	bf00      	nop
   1f0c4:	20002188 	.word	0x20002188
   1f0c8:	2000218c 	.word	0x2000218c
   1f0cc:	2000213c 	.word	0x2000213c
   1f0d0:	2000219c 	.word	0x2000219c

0001f0d4 <d_print_array_type>:
   1f0d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f0d8:	4604      	mov	r4, r0
   1f0da:	4617      	mov	r7, r2
   1f0dc:	b153      	cbz	r3, 1f0f4 <d_print_array_type+0x20>
   1f0de:	461e      	mov	r6, r3
   1f0e0:	689d      	ldr	r5, [r3, #8]
   1f0e2:	b37d      	cbz	r5, 1f144 <d_print_array_type+0x70>
   1f0e4:	681b      	ldr	r3, [r3, #0]
   1f0e6:	2b00      	cmp	r3, #0
   1f0e8:	d1fa      	bne.n	1f0e0 <d_print_array_type+0xc>
   1f0ea:	4632      	mov	r2, r6
   1f0ec:	2111      	movs	r1, #17
   1f0ee:	4620      	mov	r0, r4
   1f0f0:	f7ff fecc 	bl	1ee8c <d_print_mod_list>
   1f0f4:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f0f8:	2bff      	cmp	r3, #255	; 0xff
   1f0fa:	f000 809d 	beq.w	1f238 <d_print_array_type+0x164>
   1f0fe:	1c59      	adds	r1, r3, #1
   1f100:	2220      	movs	r2, #32
   1f102:	29ff      	cmp	r1, #255	; 0xff
   1f104:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f108:	54e2      	strb	r2, [r4, r3]
   1f10a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f10e:	d027      	beq.n	1f160 <d_print_array_type+0x8c>
   1f110:	225b      	movs	r2, #91	; 0x5b
   1f112:	1c4b      	adds	r3, r1, #1
   1f114:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f118:	5462      	strb	r2, [r4, r1]
   1f11a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f11e:	68fa      	ldr	r2, [r7, #12]
   1f120:	b12a      	cbz	r2, 1f12e <d_print_array_type+0x5a>
   1f122:	2111      	movs	r1, #17
   1f124:	4620      	mov	r0, r4
   1f126:	f7ff fa7b 	bl	1e620 <d_print_comp>
   1f12a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   1f12e:	2bff      	cmp	r3, #255	; 0xff
   1f130:	d02f      	beq.n	1f192 <d_print_array_type+0xbe>
   1f132:	1c59      	adds	r1, r3, #1
   1f134:	225d      	movs	r2, #93	; 0x5d
   1f136:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f13a:	54e2      	strb	r2, [r4, r3]
   1f13c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f144:	685b      	ldr	r3, [r3, #4]
   1f146:	781b      	ldrb	r3, [r3, #0]
   1f148:	2b2a      	cmp	r3, #42	; 0x2a
   1f14a:	d132      	bne.n	1f1b2 <d_print_array_type+0xde>
   1f14c:	2111      	movs	r1, #17
   1f14e:	462b      	mov	r3, r5
   1f150:	4632      	mov	r2, r6
   1f152:	4620      	mov	r0, r4
   1f154:	f7ff fe9a 	bl	1ee8c <d_print_mod_list>
   1f158:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f15c:	29ff      	cmp	r1, #255	; 0xff
   1f15e:	d1d7      	bne.n	1f110 <d_print_array_type+0x3c>
   1f160:	2200      	movs	r2, #0
   1f162:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f166:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1f16a:	4620      	mov	r0, r4
   1f16c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f170:	4798      	blx	r3
   1f172:	225b      	movs	r2, #91	; 0x5b
   1f174:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f178:	7022      	strb	r2, [r4, #0]
   1f17a:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f17e:	68fa      	ldr	r2, [r7, #12]
   1f180:	1c59      	adds	r1, r3, #1
   1f182:	2301      	movs	r3, #1
   1f184:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
   1f188:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f18c:	2a00      	cmp	r2, #0
   1f18e:	d1c8      	bne.n	1f122 <d_print_array_type+0x4e>
   1f190:	e7cf      	b.n	1f132 <d_print_array_type+0x5e>
   1f192:	2500      	movs	r5, #0
   1f194:	4619      	mov	r1, r3
   1f196:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f19a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f19e:	4620      	mov	r0, r4
   1f1a0:	4798      	blx	r3
   1f1a2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f1a6:	2101      	movs	r1, #1
   1f1a8:	440b      	add	r3, r1
   1f1aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f1ae:	462b      	mov	r3, r5
   1f1b0:	e7c0      	b.n	1f134 <d_print_array_type+0x60>
   1f1b2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1f298 <d_print_array_type+0x1c4>
   1f1b6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f1ba:	f04f 0920 	mov.w	r9, #32
   1f1be:	f108 0a01 	add.w	sl, r8, #1
   1f1c2:	e00c      	b.n	1f1de <d_print_array_type+0x10a>
   1f1c4:	460b      	mov	r3, r1
   1f1c6:	45d0      	cmp	r8, sl
   1f1c8:	f101 0101 	add.w	r1, r1, #1
   1f1cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f1d0:	f804 9003 	strb.w	r9, [r4, r3]
   1f1d4:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1f1d8:	d01a      	beq.n	1f210 <d_print_array_type+0x13c>
   1f1da:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1f1de:	29ff      	cmp	r1, #255	; 0xff
   1f1e0:	d1f0      	bne.n	1f1c4 <d_print_array_type+0xf0>
   1f1e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f1e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f1ea:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f1ee:	4620      	mov	r0, r4
   1f1f0:	4798      	blx	r3
   1f1f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f1f6:	3301      	adds	r3, #1
   1f1f8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f1fc:	2300      	movs	r3, #0
   1f1fe:	2101      	movs	r1, #1
   1f200:	45d0      	cmp	r8, sl
   1f202:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f206:	f804 9003 	strb.w	r9, [r4, r3]
   1f20a:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
   1f20e:	d1e4      	bne.n	1f1da <d_print_array_type+0x106>
   1f210:	2111      	movs	r1, #17
   1f212:	2300      	movs	r3, #0
   1f214:	4632      	mov	r2, r6
   1f216:	4620      	mov	r0, r4
   1f218:	f7ff fe38 	bl	1ee8c <d_print_mod_list>
   1f21c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f220:	29ff      	cmp	r1, #255	; 0xff
   1f222:	d026      	beq.n	1f272 <d_print_array_type+0x19e>
   1f224:	1c4b      	adds	r3, r1, #1
   1f226:	2229      	movs	r2, #41	; 0x29
   1f228:	2bff      	cmp	r3, #255	; 0xff
   1f22a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f22e:	5462      	strb	r2, [r4, r1]
   1f230:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f234:	f47f af63 	bne.w	1f0fe <d_print_array_type+0x2a>
   1f238:	2200      	movs	r2, #0
   1f23a:	4619      	mov	r1, r3
   1f23c:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1f240:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
   1f244:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f248:	4620      	mov	r0, r4
   1f24a:	47a8      	blx	r5
   1f24c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f250:	225b      	movs	r2, #91	; 0x5b
   1f252:	f645 3120 	movw	r1, #23328	; 0x5b20
   1f256:	8021      	strh	r1, [r4, #0]
   1f258:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
   1f25c:	68fa      	ldr	r2, [r7, #12]
   1f25e:	3301      	adds	r3, #1
   1f260:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f264:	2302      	movs	r3, #2
   1f266:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f26a:	2a00      	cmp	r2, #0
   1f26c:	f47f af59 	bne.w	1f122 <d_print_array_type+0x4e>
   1f270:	e75f      	b.n	1f132 <d_print_array_type+0x5e>
   1f272:	2200      	movs	r2, #0
   1f274:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f278:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
   1f27c:	4620      	mov	r0, r4
   1f27e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f282:	4798      	blx	r3
   1f284:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f288:	2229      	movs	r2, #41	; 0x29
   1f28a:	3301      	adds	r3, #1
   1f28c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f290:	7022      	strb	r2, [r4, #0]
   1f292:	2301      	movs	r3, #1
   1f294:	e733      	b.n	1f0fe <d_print_array_type+0x2a>
   1f296:	bf00      	nop
   1f298:	20002394 	.word	0x20002394

0001f29c <d_print_expr_op>:
   1f29c:	7811      	ldrb	r1, [r2, #0]
   1f29e:	2932      	cmp	r1, #50	; 0x32
   1f2a0:	d002      	beq.n	1f2a8 <d_print_expr_op+0xc>
   1f2a2:	2111      	movs	r1, #17
   1f2a4:	f7ff b9bc 	b.w	1e620 <d_print_comp>
   1f2a8:	68d3      	ldr	r3, [r2, #12]
   1f2aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f2ae:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
   1f2b2:	b367      	cbz	r7, 1f30e <d_print_expr_op+0x72>
   1f2b4:	442f      	add	r7, r5
   1f2b6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f2ba:	4604      	mov	r4, r0
   1f2bc:	3d01      	subs	r5, #1
   1f2be:	3f01      	subs	r7, #1
   1f2c0:	f04f 0800 	mov.w	r8, #0
   1f2c4:	e009      	b.n	1f2da <d_print_expr_op+0x3e>
   1f2c6:	460b      	mov	r3, r1
   1f2c8:	42bd      	cmp	r5, r7
   1f2ca:	f101 0101 	add.w	r1, r1, #1
   1f2ce:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f2d2:	54e6      	strb	r6, [r4, r3]
   1f2d4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f2d8:	d019      	beq.n	1f30e <d_print_expr_op+0x72>
   1f2da:	29ff      	cmp	r1, #255	; 0xff
   1f2dc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1f2e0:	d1f1      	bne.n	1f2c6 <d_print_expr_op+0x2a>
   1f2e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f2e6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f2ea:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f2ee:	4620      	mov	r0, r4
   1f2f0:	4798      	blx	r3
   1f2f2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f2f6:	3301      	adds	r3, #1
   1f2f8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f2fc:	2300      	movs	r3, #0
   1f2fe:	2101      	movs	r1, #1
   1f300:	42bd      	cmp	r5, r7
   1f302:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f306:	54e6      	strb	r6, [r4, r3]
   1f308:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f30c:	d1e5      	bne.n	1f2da <d_print_expr_op+0x3e>
   1f30e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f312:	bf00      	nop

0001f314 <d_demangle_callback.constprop.0>:
   1f314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f318:	ed2d 8b02 	vpush	{d8}
   1f31c:	b0e7      	sub	sp, #412	; 0x19c
   1f31e:	7803      	ldrb	r3, [r0, #0]
   1f320:	af00      	add	r7, sp, #0
   1f322:	2b5f      	cmp	r3, #95	; 0x5f
   1f324:	e9c7 2100 	strd	r2, r1, [r7]
   1f328:	4605      	mov	r5, r0
   1f32a:	f000 8144 	beq.w	1f5b6 <d_demangle_callback.constprop.0+0x2a2>
   1f32e:	49a9      	ldr	r1, [pc, #676]	; (1f5d4 <d_demangle_callback.constprop.0+0x2c0>)
   1f330:	2208      	movs	r2, #8
   1f332:	4628      	mov	r0, r5
   1f334:	f003 f926 	bl	22584 <strncmp>
   1f338:	2800      	cmp	r0, #0
   1f33a:	f000 8107 	beq.w	1f54c <d_demangle_callback.constprop.0+0x238>
   1f33e:	f04f 0900 	mov.w	r9, #0
   1f342:	2301      	movs	r3, #1
   1f344:	f1b9 0f02 	cmp.w	r9, #2
   1f348:	647b      	str	r3, [r7, #68]	; 0x44
   1f34a:	bf0c      	ite	eq
   1f34c:	2345      	moveq	r3, #69	; 0x45
   1f34e:	2346      	movne	r3, #70	; 0x46
   1f350:	f1a9 0a02 	sub.w	sl, r9, #2
   1f354:	ee08 3a10 	vmov	s16, r3
   1f358:	fa5f fa8a 	uxtb.w	sl, sl
   1f35c:	4628      	mov	r0, r5
   1f35e:	f003 fc4f 	bl	22c00 <strlen>
   1f362:	182b      	adds	r3, r5, r0
   1f364:	0042      	lsls	r2, r0, #1
   1f366:	2100      	movs	r1, #0
   1f368:	e9c7 5303 	strd	r5, r3, [r7, #12]
   1f36c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1f370:	f04f 0311 	mov.w	r3, #17
   1f374:	e9c7 3505 	strd	r3, r5, [r7, #20]
   1f378:	e9c7 1208 	strd	r1, r2, [r7, #32]
   1f37c:	e9c7 100b 	strd	r1, r0, [r7, #44]	; 0x2c
   1f380:	e9c7 110d 	strd	r1, r1, [r7, #52]	; 0x34
   1f384:	e9c7 110f 	strd	r1, r1, [r7, #60]	; 0x3c
   1f388:	64b9      	str	r1, [r7, #72]	; 0x48
   1f38a:	f200 811b 	bhi.w	1f5c4 <d_demangle_callback.constprop.0+0x2b0>
   1f38e:	0083      	lsls	r3, r0, #2
   1f390:	46e8      	mov	r8, sp
   1f392:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1f396:	3307      	adds	r3, #7
   1f398:	eba8 00c0 	sub.w	r0, r8, r0, lsl #3
   1f39c:	4685      	mov	sp, r0
   1f39e:	f023 0307 	bic.w	r3, r3, #7
   1f3a2:	466e      	mov	r6, sp
   1f3a4:	f1b9 0f01 	cmp.w	r9, #1
   1f3a8:	ebad 0d03 	sub.w	sp, sp, r3
   1f3ac:	61fe      	str	r6, [r7, #28]
   1f3ae:	f8c7 d028 	str.w	sp, [r7, #40]	; 0x28
   1f3b2:	d040      	beq.n	1f436 <d_demangle_callback.constprop.0+0x122>
   1f3b4:	f1ba 0f01 	cmp.w	sl, #1
   1f3b8:	d835      	bhi.n	1f426 <d_demangle_callback.constprop.0+0x112>
   1f3ba:	7aeb      	ldrb	r3, [r5, #11]
   1f3bc:	f105 040b 	add.w	r4, r5, #11
   1f3c0:	2b5f      	cmp	r3, #95	; 0x5f
   1f3c2:	61bc      	str	r4, [r7, #24]
   1f3c4:	d103      	bne.n	1f3ce <d_demangle_callback.constprop.0+0xba>
   1f3c6:	7b2b      	ldrb	r3, [r5, #12]
   1f3c8:	2b5a      	cmp	r3, #90	; 0x5a
   1f3ca:	f000 80b0 	beq.w	1f52e <d_demangle_callback.constprop.0+0x21a>
   1f3ce:	2a00      	cmp	r2, #0
   1f3d0:	f340 80ab 	ble.w	1f52a <d_demangle_callback.constprop.0+0x216>
   1f3d4:	4620      	mov	r0, r4
   1f3d6:	f003 fc13 	bl	22c00 <strlen>
   1f3da:	2300      	movs	r3, #0
   1f3dc:	2201      	movs	r2, #1
   1f3de:	e9c6 3301 	strd	r3, r3, [r6, #4]
   1f3e2:	623a      	str	r2, [r7, #32]
   1f3e4:	2800      	cmp	r0, #0
   1f3e6:	f000 80a0 	beq.w	1f52a <d_demangle_callback.constprop.0+0x216>
   1f3ea:	e9c6 4003 	strd	r4, r0, [r6, #12]
   1f3ee:	7033      	strb	r3, [r6, #0]
   1f3f0:	2300      	movs	r3, #0
   1f3f2:	4632      	mov	r2, r6
   1f3f4:	ee18 1a10 	vmov	r1, s16
   1f3f8:	f107 000c 	add.w	r0, r7, #12
   1f3fc:	f7fa fc6c 	bl	19cd8 <d_make_comp>
   1f400:	4606      	mov	r6, r0
   1f402:	4620      	mov	r0, r4
   1f404:	f003 fbfc 	bl	22c00 <strlen>
   1f408:	1823      	adds	r3, r4, r0
   1f40a:	61bb      	str	r3, [r7, #24]
   1f40c:	5c23      	ldrb	r3, [r4, r0]
   1f40e:	b913      	cbnz	r3, 1f416 <d_demangle_callback.constprop.0+0x102>
   1f410:	2e00      	cmp	r6, #0
   1f412:	f040 80e1 	bne.w	1f5d8 <d_demangle_callback.constprop.0+0x2c4>
   1f416:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1f418:	3301      	adds	r3, #1
   1f41a:	f040 80c3 	bne.w	1f5a4 <d_demangle_callback.constprop.0+0x290>
   1f41e:	2300      	movs	r3, #0
   1f420:	647b      	str	r3, [r7, #68]	; 0x44
   1f422:	46c5      	mov	sp, r8
   1f424:	e79a      	b.n	1f35c <d_demangle_callback.constprop.0+0x48>
   1f426:	f107 000c 	add.w	r0, r7, #12
   1f42a:	f7fb f8a7 	bl	1a57c <d_type>
   1f42e:	69bb      	ldr	r3, [r7, #24]
   1f430:	4606      	mov	r6, r0
   1f432:	781b      	ldrb	r3, [r3, #0]
   1f434:	e7eb      	b.n	1f40e <d_demangle_callback.constprop.0+0xfa>
   1f436:	782b      	ldrb	r3, [r5, #0]
   1f438:	2b5f      	cmp	r3, #95	; 0x5f
   1f43a:	d1ec      	bne.n	1f416 <d_demangle_callback.constprop.0+0x102>
   1f43c:	786b      	ldrb	r3, [r5, #1]
   1f43e:	1c6a      	adds	r2, r5, #1
   1f440:	2b5a      	cmp	r3, #90	; 0x5a
   1f442:	61ba      	str	r2, [r7, #24]
   1f444:	d1e7      	bne.n	1f416 <d_demangle_callback.constprop.0+0x102>
   1f446:	78ab      	ldrb	r3, [r5, #2]
   1f448:	1caa      	adds	r2, r5, #2
   1f44a:	2b47      	cmp	r3, #71	; 0x47
   1f44c:	61ba      	str	r2, [r7, #24]
   1f44e:	f000 809b 	beq.w	1f588 <d_demangle_callback.constprop.0+0x274>
   1f452:	2b54      	cmp	r3, #84	; 0x54
   1f454:	f000 8098 	beq.w	1f588 <d_demangle_callback.constprop.0+0x274>
   1f458:	4649      	mov	r1, r9
   1f45a:	f107 000c 	add.w	r0, r7, #12
   1f45e:	f7fc ffe9 	bl	1c434 <d_encoding.part.0>
   1f462:	697b      	ldr	r3, [r7, #20]
   1f464:	07db      	lsls	r3, r3, #31
   1f466:	4606      	mov	r6, r0
   1f468:	f140 8097 	bpl.w	1f59a <d_demangle_callback.constprop.0+0x286>
   1f46c:	69ba      	ldr	r2, [r7, #24]
   1f46e:	7813      	ldrb	r3, [r2, #0]
   1f470:	2b2e      	cmp	r3, #46	; 0x2e
   1f472:	d1cc      	bne.n	1f40e <d_demangle_callback.constprop.0+0xfa>
   1f474:	4633      	mov	r3, r6
   1f476:	4616      	mov	r6, r2
   1f478:	461a      	mov	r2, r3
   1f47a:	7873      	ldrb	r3, [r6, #1]
   1f47c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1f480:	2919      	cmp	r1, #25
   1f482:	f04f 0b00 	mov.w	fp, #0
   1f486:	d945      	bls.n	1f514 <d_demangle_callback.constprop.0+0x200>
   1f488:	2b5f      	cmp	r3, #95	; 0x5f
   1f48a:	d043      	beq.n	1f514 <d_demangle_callback.constprop.0+0x200>
   1f48c:	3b30      	subs	r3, #48	; 0x30
   1f48e:	2b09      	cmp	r3, #9
   1f490:	f200 80fd 	bhi.w	1f68e <d_demangle_callback.constprop.0+0x37a>
   1f494:	7831      	ldrb	r1, [r6, #0]
   1f496:	4634      	mov	r4, r6
   1f498:	292e      	cmp	r1, #46	; 0x2e
   1f49a:	d112      	bne.n	1f4c2 <d_demangle_callback.constprop.0+0x1ae>
   1f49c:	7863      	ldrb	r3, [r4, #1]
   1f49e:	3b30      	subs	r3, #48	; 0x30
   1f4a0:	2b09      	cmp	r3, #9
   1f4a2:	d80e      	bhi.n	1f4c2 <d_demangle_callback.constprop.0+0x1ae>
   1f4a4:	78a3      	ldrb	r3, [r4, #2]
   1f4a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1f4aa:	1ca0      	adds	r0, r4, #2
   1f4ac:	2909      	cmp	r1, #9
   1f4ae:	4604      	mov	r4, r0
   1f4b0:	d805      	bhi.n	1f4be <d_demangle_callback.constprop.0+0x1aa>
   1f4b2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   1f4b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   1f4ba:	2909      	cmp	r1, #9
   1f4bc:	d9f9      	bls.n	1f4b2 <d_demangle_callback.constprop.0+0x19e>
   1f4be:	2b2e      	cmp	r3, #46	; 0x2e
   1f4c0:	d0ec      	beq.n	1f49c <d_demangle_callback.constprop.0+0x188>
   1f4c2:	e9d7 1308 	ldrd	r1, r3, [r7, #32]
   1f4c6:	4299      	cmp	r1, r3
   1f4c8:	61bc      	str	r4, [r7, #24]
   1f4ca:	eba4 0006 	sub.w	r0, r4, r6
   1f4ce:	da67      	bge.n	1f5a0 <d_demangle_callback.constprop.0+0x28c>
   1f4d0:	f8d7 c01c 	ldr.w	ip, [r7, #28]
   1f4d4:	eb01 0e81 	add.w	lr, r1, r1, lsl #2
   1f4d8:	eb0c 038e 	add.w	r3, ip, lr, lsl #2
   1f4dc:	3101      	adds	r1, #1
   1f4de:	2800      	cmp	r0, #0
   1f4e0:	e9c3 bb01 	strd	fp, fp, [r3, #4]
   1f4e4:	6239      	str	r1, [r7, #32]
   1f4e6:	dd5b      	ble.n	1f5a0 <d_demangle_callback.constprop.0+0x28c>
   1f4e8:	e9c3 bb01 	strd	fp, fp, [r3, #4]
   1f4ec:	f80c b02e 	strb.w	fp, [ip, lr, lsl #2]
   1f4f0:	e9c3 6003 	strd	r6, r0, [r3, #12]
   1f4f4:	214f      	movs	r1, #79	; 0x4f
   1f4f6:	f107 000c 	add.w	r0, r7, #12
   1f4fa:	f7fa fbed 	bl	19cd8 <d_make_comp>
   1f4fe:	7823      	ldrb	r3, [r4, #0]
   1f500:	2b2e      	cmp	r3, #46	; 0x2e
   1f502:	4602      	mov	r2, r0
   1f504:	f040 80c1 	bne.w	1f68a <d_demangle_callback.constprop.0+0x376>
   1f508:	4626      	mov	r6, r4
   1f50a:	7873      	ldrb	r3, [r6, #1]
   1f50c:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
   1f510:	2919      	cmp	r1, #25
   1f512:	d8b9      	bhi.n	1f488 <d_demangle_callback.constprop.0+0x174>
   1f514:	1cb3      	adds	r3, r6, #2
   1f516:	461c      	mov	r4, r3
   1f518:	f813 1b01 	ldrb.w	r1, [r3], #1
   1f51c:	f1a1 0061 	sub.w	r0, r1, #97	; 0x61
   1f520:	2819      	cmp	r0, #25
   1f522:	d9f8      	bls.n	1f516 <d_demangle_callback.constprop.0+0x202>
   1f524:	295f      	cmp	r1, #95	; 0x5f
   1f526:	d0f6      	beq.n	1f516 <d_demangle_callback.constprop.0+0x202>
   1f528:	e7b6      	b.n	1f498 <d_demangle_callback.constprop.0+0x184>
   1f52a:	2600      	movs	r6, #0
   1f52c:	e760      	b.n	1f3f0 <d_demangle_callback.constprop.0+0xdc>
   1f52e:	7b6b      	ldrb	r3, [r5, #13]
   1f530:	f105 020d 	add.w	r2, r5, #13
   1f534:	2b47      	cmp	r3, #71	; 0x47
   1f536:	61ba      	str	r2, [r7, #24]
   1f538:	f107 000c 	add.w	r0, r7, #12
   1f53c:	d001      	beq.n	1f542 <d_demangle_callback.constprop.0+0x22e>
   1f53e:	2b54      	cmp	r3, #84	; 0x54
   1f540:	d11d      	bne.n	1f57e <d_demangle_callback.constprop.0+0x26a>
   1f542:	f7fc fbef 	bl	1bd24 <d_special_name>
   1f546:	69bc      	ldr	r4, [r7, #24]
   1f548:	4606      	mov	r6, r0
   1f54a:	e751      	b.n	1f3f0 <d_demangle_callback.constprop.0+0xdc>
   1f54c:	7a2b      	ldrb	r3, [r5, #8]
   1f54e:	2b2e      	cmp	r3, #46	; 0x2e
   1f550:	d004      	beq.n	1f55c <d_demangle_callback.constprop.0+0x248>
   1f552:	2b5f      	cmp	r3, #95	; 0x5f
   1f554:	d002      	beq.n	1f55c <d_demangle_callback.constprop.0+0x248>
   1f556:	2b24      	cmp	r3, #36	; 0x24
   1f558:	f47f aef1 	bne.w	1f33e <d_demangle_callback.constprop.0+0x2a>
   1f55c:	7a6b      	ldrb	r3, [r5, #9]
   1f55e:	2b44      	cmp	r3, #68	; 0x44
   1f560:	d002      	beq.n	1f568 <d_demangle_callback.constprop.0+0x254>
   1f562:	2b49      	cmp	r3, #73	; 0x49
   1f564:	f47f aeeb 	bne.w	1f33e <d_demangle_callback.constprop.0+0x2a>
   1f568:	7aaa      	ldrb	r2, [r5, #10]
   1f56a:	2a5f      	cmp	r2, #95	; 0x5f
   1f56c:	f47f aee7 	bne.w	1f33e <d_demangle_callback.constprop.0+0x2a>
   1f570:	2b49      	cmp	r3, #73	; 0x49
   1f572:	bf0c      	ite	eq
   1f574:	f04f 0902 	moveq.w	r9, #2
   1f578:	f04f 0903 	movne.w	r9, #3
   1f57c:	e6e1      	b.n	1f342 <d_demangle_callback.constprop.0+0x2e>
   1f57e:	f7fc ff59 	bl	1c434 <d_encoding.part.0>
   1f582:	69bc      	ldr	r4, [r7, #24]
   1f584:	4606      	mov	r6, r0
   1f586:	e733      	b.n	1f3f0 <d_demangle_callback.constprop.0+0xdc>
   1f588:	f107 000c 	add.w	r0, r7, #12
   1f58c:	f7fc fbca 	bl	1bd24 <d_special_name>
   1f590:	697b      	ldr	r3, [r7, #20]
   1f592:	07db      	lsls	r3, r3, #31
   1f594:	4606      	mov	r6, r0
   1f596:	f53f af69 	bmi.w	1f46c <d_demangle_callback.constprop.0+0x158>
   1f59a:	69bb      	ldr	r3, [r7, #24]
   1f59c:	781b      	ldrb	r3, [r3, #0]
   1f59e:	e736      	b.n	1f40e <d_demangle_callback.constprop.0+0xfa>
   1f5a0:	2300      	movs	r3, #0
   1f5a2:	e7a7      	b.n	1f4f4 <d_demangle_callback.constprop.0+0x1e0>
   1f5a4:	2000      	movs	r0, #0
   1f5a6:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1f5aa:	46c5      	mov	sp, r8
   1f5ac:	46bd      	mov	sp, r7
   1f5ae:	ecbd 8b02 	vpop	{d8}
   1f5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5b6:	7843      	ldrb	r3, [r0, #1]
   1f5b8:	2b5a      	cmp	r3, #90	; 0x5a
   1f5ba:	f47f aeb8 	bne.w	1f32e <d_demangle_callback.constprop.0+0x1a>
   1f5be:	f04f 0901 	mov.w	r9, #1
   1f5c2:	e6be      	b.n	1f342 <d_demangle_callback.constprop.0+0x2e>
   1f5c4:	4608      	mov	r0, r1
   1f5c6:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
   1f5ca:	46bd      	mov	sp, r7
   1f5cc:	ecbd 8b02 	vpop	{d8}
   1f5d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5d4:	20002488 	.word	0x20002488
   1f5d8:	f107 044c 	add.w	r4, r7, #76	; 0x4c
   1f5dc:	687a      	ldr	r2, [r7, #4]
   1f5de:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
   1f5e2:	4631      	mov	r1, r6
   1f5e4:	683a      	ldr	r2, [r7, #0]
   1f5e6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
   1f5ea:	4620      	mov	r0, r4
   1f5ec:	e9c4 3344 	strd	r3, r3, [r4, #272]	; 0x110
   1f5f0:	e9c4 3349 	strd	r3, r3, [r4, #292]	; 0x124
   1f5f4:	e9c4 3346 	strd	r3, r3, [r4, #280]	; 0x118
   1f5f8:	e9c4 334d 	strd	r3, r3, [r4, #308]	; 0x134
   1f5fc:	e9c4 3350 	strd	r3, r3, [r4, #320]	; 0x140
   1f600:	607b      	str	r3, [r7, #4]
   1f602:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f606:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f60a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   1f60e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1f612:	f7fa fc53 	bl	19ebc <d_count_templates_scopes>
   1f616:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1f61a:	687b      	ldr	r3, [r7, #4]
   1f61c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   1f620:	da01      	bge.n	1f626 <d_demangle_callback.constprop.0+0x312>
   1f622:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1f626:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
   1f62a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1f62e:	2901      	cmp	r1, #1
   1f630:	fb01 f303 	mul.w	r3, r1, r3
   1f634:	4632      	mov	r2, r6
   1f636:	bfb8      	it	lt
   1f638:	2101      	movlt	r1, #1
   1f63a:	466e      	mov	r6, sp
   1f63c:	eba6 01c1 	sub.w	r1, r6, r1, lsl #3
   1f640:	2b01      	cmp	r3, #1
   1f642:	468d      	mov	sp, r1
   1f644:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
   1f648:	4668      	mov	r0, sp
   1f64a:	bfb8      	it	lt
   1f64c:	2301      	movlt	r3, #1
   1f64e:	eba0 03c3 	sub.w	r3, r0, r3, lsl #3
   1f652:	469d      	mov	sp, r3
   1f654:	2500      	movs	r5, #0
   1f656:	f8c4 1130 	str.w	r1, [r4, #304]	; 0x130
   1f65a:	4620      	mov	r0, r4
   1f65c:	2111      	movs	r1, #17
   1f65e:	f8c4 d13c 	str.w	sp, [r4, #316]	; 0x13c
   1f662:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
   1f666:	f7fe ffdb 	bl	1e620 <d_print_comp>
   1f66a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f66e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f672:	5465      	strb	r5, [r4, r1]
   1f674:	4620      	mov	r0, r4
   1f676:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f67a:	46b5      	mov	sp, r6
   1f67c:	4798      	blx	r3
   1f67e:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   1f682:	fab0 f080 	clz	r0, r0
   1f686:	0940      	lsrs	r0, r0, #5
   1f688:	e78d      	b.n	1f5a6 <d_demangle_callback.constprop.0+0x292>
   1f68a:	4606      	mov	r6, r0
   1f68c:	e6bf      	b.n	1f40e <d_demangle_callback.constprop.0+0xfa>
   1f68e:	4616      	mov	r6, r2
   1f690:	e783      	b.n	1f59a <d_demangle_callback.constprop.0+0x286>
   1f692:	bf00      	nop

0001f694 <d_print_subexpr>:
   1f694:	b570      	push	{r4, r5, r6, lr}
   1f696:	7813      	ldrb	r3, [r2, #0]
   1f698:	2b01      	cmp	r3, #1
   1f69a:	b082      	sub	sp, #8
   1f69c:	4615      	mov	r5, r2
   1f69e:	4604      	mov	r4, r0
   1f6a0:	d903      	bls.n	1f6aa <d_print_subexpr+0x16>
   1f6a2:	2b31      	cmp	r3, #49	; 0x31
   1f6a4:	d001      	beq.n	1f6aa <d_print_subexpr+0x16>
   1f6a6:	2b06      	cmp	r3, #6
   1f6a8:	d138      	bne.n	1f71c <d_print_subexpr+0x88>
   1f6aa:	2601      	movs	r6, #1
   1f6ac:	686b      	ldr	r3, [r5, #4]
   1f6ae:	2b01      	cmp	r3, #1
   1f6b0:	dc22      	bgt.n	1f6f8 <d_print_subexpr+0x64>
   1f6b2:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1f6b6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   1f6ba:	dc1d      	bgt.n	1f6f8 <d_print_subexpr+0x64>
   1f6bc:	3301      	adds	r3, #1
   1f6be:	3201      	adds	r2, #1
   1f6c0:	606b      	str	r3, [r5, #4]
   1f6c2:	2111      	movs	r1, #17
   1f6c4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1f6c8:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   1f6cc:	f8c4 d12c 	str.w	sp, [r4, #300]	; 0x12c
   1f6d0:	462a      	mov	r2, r5
   1f6d2:	4620      	mov	r0, r4
   1f6d4:	9301      	str	r3, [sp, #4]
   1f6d6:	9500      	str	r5, [sp, #0]
   1f6d8:	f7fc ff28 	bl	1c52c <d_print_comp_inner>
   1f6dc:	686a      	ldr	r2, [r5, #4]
   1f6de:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1f6e2:	9901      	ldr	r1, [sp, #4]
   1f6e4:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
   1f6e8:	3a01      	subs	r2, #1
   1f6ea:	3b01      	subs	r3, #1
   1f6ec:	606a      	str	r2, [r5, #4]
   1f6ee:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1f6f2:	b136      	cbz	r6, 1f702 <d_print_subexpr+0x6e>
   1f6f4:	b002      	add	sp, #8
   1f6f6:	bd70      	pop	{r4, r5, r6, pc}
   1f6f8:	2301      	movs	r3, #1
   1f6fa:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
   1f6fe:	2e00      	cmp	r6, #0
   1f700:	d1f8      	bne.n	1f6f4 <d_print_subexpr+0x60>
   1f702:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f706:	29ff      	cmp	r1, #255	; 0xff
   1f708:	d015      	beq.n	1f736 <d_print_subexpr+0xa2>
   1f70a:	1c4a      	adds	r2, r1, #1
   1f70c:	2329      	movs	r3, #41	; 0x29
   1f70e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f712:	5463      	strb	r3, [r4, r1]
   1f714:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f718:	b002      	add	sp, #8
   1f71a:	bd70      	pop	{r4, r5, r6, pc}
   1f71c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f720:	29ff      	cmp	r1, #255	; 0xff
   1f722:	d016      	beq.n	1f752 <d_print_subexpr+0xbe>
   1f724:	1c4a      	adds	r2, r1, #1
   1f726:	2328      	movs	r3, #40	; 0x28
   1f728:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f72c:	2600      	movs	r6, #0
   1f72e:	5463      	strb	r3, [r4, r1]
   1f730:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f734:	e7ba      	b.n	1f6ac <d_print_subexpr+0x18>
   1f736:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f73a:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
   1f73e:	4620      	mov	r0, r4
   1f740:	4798      	blx	r3
   1f742:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f746:	2201      	movs	r2, #1
   1f748:	4413      	add	r3, r2
   1f74a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f74e:	4631      	mov	r1, r6
   1f750:	e7dc      	b.n	1f70c <d_print_subexpr+0x78>
   1f752:	2600      	movs	r6, #0
   1f754:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f758:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
   1f75c:	4798      	blx	r3
   1f75e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f762:	2201      	movs	r2, #1
   1f764:	4413      	add	r3, r2
   1f766:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f76a:	4631      	mov	r1, r6
   1f76c:	e7db      	b.n	1f726 <d_print_subexpr+0x92>
   1f76e:	bf00      	nop

0001f770 <d_maybe_print_fold_expression>:
   1f770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f774:	68d3      	ldr	r3, [r2, #12]
   1f776:	68db      	ldr	r3, [r3, #12]
   1f778:	681b      	ldr	r3, [r3, #0]
   1f77a:	7819      	ldrb	r1, [r3, #0]
   1f77c:	2966      	cmp	r1, #102	; 0x66
   1f77e:	d178      	bne.n	1f872 <d_maybe_print_fold_expression+0x102>
   1f780:	6912      	ldr	r2, [r2, #16]
   1f782:	f8d0 7124 	ldr.w	r7, [r0, #292]	; 0x124
   1f786:	e9d2 8a03 	ldrd	r8, sl, [r2, #12]
   1f78a:	f89a 2000 	ldrb.w	r2, [sl]
   1f78e:	2a3c      	cmp	r2, #60	; 0x3c
   1f790:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1f794:	bf08      	it	eq
   1f796:	e9da a903 	ldrdeq	sl, r9, [sl, #12]
   1f79a:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
   1f79e:	785b      	ldrb	r3, [r3, #1]
   1f7a0:	bf18      	it	ne
   1f7a2:	f04f 0900 	movne.w	r9, #0
   1f7a6:	2b6c      	cmp	r3, #108	; 0x6c
   1f7a8:	4604      	mov	r4, r0
   1f7aa:	f000 80a2 	beq.w	1f8f2 <d_maybe_print_fold_expression+0x182>
   1f7ae:	d863      	bhi.n	1f878 <d_maybe_print_fold_expression+0x108>
   1f7b0:	2b4c      	cmp	r3, #76	; 0x4c
   1f7b2:	d001      	beq.n	1f7b8 <d_maybe_print_fold_expression+0x48>
   1f7b4:	2b52      	cmp	r3, #82	; 0x52
   1f7b6:	d157      	bne.n	1f868 <d_maybe_print_fold_expression+0xf8>
   1f7b8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f7bc:	29ff      	cmp	r1, #255	; 0xff
   1f7be:	f000 80eb 	beq.w	1f998 <d_maybe_print_fold_expression+0x228>
   1f7c2:	1c4b      	adds	r3, r1, #1
   1f7c4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f7c8:	2328      	movs	r3, #40	; 0x28
   1f7ca:	5463      	strb	r3, [r4, r1]
   1f7cc:	4652      	mov	r2, sl
   1f7ce:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f7d2:	2111      	movs	r1, #17
   1f7d4:	4620      	mov	r0, r4
   1f7d6:	4e78      	ldr	r6, [pc, #480]	; (1f9b8 <d_maybe_print_fold_expression+0x248>)
   1f7d8:	f7ff ff5c 	bl	1f694 <d_print_subexpr>
   1f7dc:	2111      	movs	r1, #17
   1f7de:	4642      	mov	r2, r8
   1f7e0:	4620      	mov	r0, r4
   1f7e2:	f7ff fd5b 	bl	1f29c <d_print_expr_op>
   1f7e6:	f106 0b02 	add.w	fp, r6, #2
   1f7ea:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f7ee:	252e      	movs	r5, #46	; 0x2e
   1f7f0:	f04f 0a00 	mov.w	sl, #0
   1f7f4:	e00b      	b.n	1f80e <d_maybe_print_fold_expression+0x9e>
   1f7f6:	460b      	mov	r3, r1
   1f7f8:	455e      	cmp	r6, fp
   1f7fa:	f101 0101 	add.w	r1, r1, #1
   1f7fe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f802:	54e5      	strb	r5, [r4, r3]
   1f804:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f808:	d019      	beq.n	1f83e <d_maybe_print_fold_expression+0xce>
   1f80a:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f80e:	29ff      	cmp	r1, #255	; 0xff
   1f810:	d1f1      	bne.n	1f7f6 <d_maybe_print_fold_expression+0x86>
   1f812:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f816:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f81a:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
   1f81e:	4620      	mov	r0, r4
   1f820:	4798      	blx	r3
   1f822:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f826:	3301      	adds	r3, #1
   1f828:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f82c:	2300      	movs	r3, #0
   1f82e:	2101      	movs	r1, #1
   1f830:	455e      	cmp	r6, fp
   1f832:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f836:	54e5      	strb	r5, [r4, r3]
   1f838:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f83c:	d1e5      	bne.n	1f80a <d_maybe_print_fold_expression+0x9a>
   1f83e:	4642      	mov	r2, r8
   1f840:	2111      	movs	r1, #17
   1f842:	4620      	mov	r0, r4
   1f844:	f7ff fd2a 	bl	1f29c <d_print_expr_op>
   1f848:	464a      	mov	r2, r9
   1f84a:	2111      	movs	r1, #17
   1f84c:	4620      	mov	r0, r4
   1f84e:	f7ff ff21 	bl	1f694 <d_print_subexpr>
   1f852:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f856:	29ff      	cmp	r1, #255	; 0xff
   1f858:	d07f      	beq.n	1f95a <d_maybe_print_fold_expression+0x1ea>
   1f85a:	1c4a      	adds	r2, r1, #1
   1f85c:	2329      	movs	r3, #41	; 0x29
   1f85e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1f862:	5463      	strb	r3, [r4, r1]
   1f864:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f868:	f8c4 7124 	str.w	r7, [r4, #292]	; 0x124
   1f86c:	2001      	movs	r0, #1
   1f86e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f872:	2000      	movs	r0, #0
   1f874:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f878:	2b72      	cmp	r3, #114	; 0x72
   1f87a:	d1f5      	bne.n	1f868 <d_maybe_print_fold_expression+0xf8>
   1f87c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f880:	29ff      	cmp	r1, #255	; 0xff
   1f882:	d07b      	beq.n	1f97c <d_maybe_print_fold_expression+0x20c>
   1f884:	1c4b      	adds	r3, r1, #1
   1f886:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1f88a:	2328      	movs	r3, #40	; 0x28
   1f88c:	5463      	strb	r3, [r4, r1]
   1f88e:	4652      	mov	r2, sl
   1f890:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1f894:	2111      	movs	r1, #17
   1f896:	4620      	mov	r0, r4
   1f898:	4e48      	ldr	r6, [pc, #288]	; (1f9bc <d_maybe_print_fold_expression+0x24c>)
   1f89a:	f7ff fefb 	bl	1f694 <d_print_subexpr>
   1f89e:	4642      	mov	r2, r8
   1f8a0:	2111      	movs	r1, #17
   1f8a2:	4620      	mov	r0, r4
   1f8a4:	f7ff fcfa 	bl	1f29c <d_print_expr_op>
   1f8a8:	f106 0903 	add.w	r9, r6, #3
   1f8ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1f8b0:	252e      	movs	r5, #46	; 0x2e
   1f8b2:	f04f 0800 	mov.w	r8, #0
   1f8b6:	e00a      	b.n	1f8ce <d_maybe_print_fold_expression+0x15e>
   1f8b8:	460b      	mov	r3, r1
   1f8ba:	3101      	adds	r1, #1
   1f8bc:	454e      	cmp	r6, r9
   1f8be:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f8c2:	54e5      	strb	r5, [r4, r3]
   1f8c4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1f8c8:	d0ce      	beq.n	1f868 <d_maybe_print_fold_expression+0xf8>
   1f8ca:	f816 5f01 	ldrb.w	r5, [r6, #1]!
   1f8ce:	29ff      	cmp	r1, #255	; 0xff
   1f8d0:	d1f2      	bne.n	1f8b8 <d_maybe_print_fold_expression+0x148>
   1f8d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f8d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f8da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1f8de:	4620      	mov	r0, r4
   1f8e0:	4798      	blx	r3
   1f8e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f8e6:	3301      	adds	r3, #1
   1f8e8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f8ec:	2101      	movs	r1, #1
   1f8ee:	2300      	movs	r3, #0
   1f8f0:	e7e4      	b.n	1f8bc <d_maybe_print_fold_expression+0x14c>
   1f8f2:	4d33      	ldr	r5, [pc, #204]	; (1f9c0 <d_maybe_print_fold_expression+0x250>)
   1f8f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f8f8:	2628      	movs	r6, #40	; 0x28
   1f8fa:	f105 0b03 	add.w	fp, r5, #3
   1f8fe:	f04f 0900 	mov.w	r9, #0
   1f902:	e00b      	b.n	1f91c <d_maybe_print_fold_expression+0x1ac>
   1f904:	460b      	mov	r3, r1
   1f906:	45ab      	cmp	fp, r5
   1f908:	f101 0101 	add.w	r1, r1, #1
   1f90c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f910:	54e6      	strb	r6, [r4, r3]
   1f912:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f916:	d019      	beq.n	1f94c <d_maybe_print_fold_expression+0x1dc>
   1f918:	f815 6f01 	ldrb.w	r6, [r5, #1]!
   1f91c:	29ff      	cmp	r1, #255	; 0xff
   1f91e:	d1f1      	bne.n	1f904 <d_maybe_print_fold_expression+0x194>
   1f920:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f924:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f928:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1f92c:	4620      	mov	r0, r4
   1f92e:	4798      	blx	r3
   1f930:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f934:	3301      	adds	r3, #1
   1f936:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f93a:	2300      	movs	r3, #0
   1f93c:	2101      	movs	r1, #1
   1f93e:	45ab      	cmp	fp, r5
   1f940:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1f944:	54e6      	strb	r6, [r4, r3]
   1f946:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
   1f94a:	d1e5      	bne.n	1f918 <d_maybe_print_fold_expression+0x1a8>
   1f94c:	4642      	mov	r2, r8
   1f94e:	2111      	movs	r1, #17
   1f950:	4620      	mov	r0, r4
   1f952:	f7ff fca3 	bl	1f29c <d_print_expr_op>
   1f956:	4652      	mov	r2, sl
   1f958:	e777      	b.n	1f84a <d_maybe_print_fold_expression+0xda>
   1f95a:	2500      	movs	r5, #0
   1f95c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1f960:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1f964:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f968:	4620      	mov	r0, r4
   1f96a:	4798      	blx	r3
   1f96c:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f970:	2201      	movs	r2, #1
   1f972:	4413      	add	r3, r2
   1f974:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f978:	4629      	mov	r1, r5
   1f97a:	e76f      	b.n	1f85c <d_maybe_print_fold_expression+0xec>
   1f97c:	2500      	movs	r5, #0
   1f97e:	e9d0 3242 	ldrd	r3, r2, [r0, #264]	; 0x108
   1f982:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
   1f986:	4798      	blx	r3
   1f988:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f98c:	3301      	adds	r3, #1
   1f98e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f992:	4629      	mov	r1, r5
   1f994:	2301      	movs	r3, #1
   1f996:	e776      	b.n	1f886 <d_maybe_print_fold_expression+0x116>
   1f998:	2500      	movs	r5, #0
   1f99a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1f99e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1f9a2:	4620      	mov	r0, r4
   1f9a4:	4798      	blx	r3
   1f9a6:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1f9aa:	3301      	adds	r3, #1
   1f9ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1f9b0:	4629      	mov	r1, r5
   1f9b2:	2301      	movs	r3, #1
   1f9b4:	e706      	b.n	1f7c4 <d_maybe_print_fold_expression+0x54>
   1f9b6:	bf00      	nop
   1f9b8:	200028ac 	.word	0x200028ac
   1f9bc:	20002164 	.word	0x20002164
   1f9c0:	2000215c 	.word	0x2000215c

0001f9c4 <d_maybe_print_designated_init>:
   1f9c4:	7813      	ldrb	r3, [r2, #0]
   1f9c6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1f9ca:	2b38      	cmp	r3, #56	; 0x38
   1f9cc:	d001      	beq.n	1f9d2 <d_maybe_print_designated_init+0xe>
   1f9ce:	2000      	movs	r0, #0
   1f9d0:	4770      	bx	lr
   1f9d2:	68d3      	ldr	r3, [r2, #12]
   1f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9d8:	68db      	ldr	r3, [r3, #12]
   1f9da:	681f      	ldr	r7, [r3, #0]
   1f9dc:	783b      	ldrb	r3, [r7, #0]
   1f9de:	2b64      	cmp	r3, #100	; 0x64
   1f9e0:	d002      	beq.n	1f9e8 <d_maybe_print_designated_init+0x24>
   1f9e2:	2000      	movs	r0, #0
   1f9e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1f9e8:	787b      	ldrb	r3, [r7, #1]
   1f9ea:	2b69      	cmp	r3, #105	; 0x69
   1f9ec:	4604      	mov	r4, r0
   1f9ee:	d011      	beq.n	1fa14 <d_maybe_print_designated_init+0x50>
   1f9f0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1f9f4:	2b58      	cmp	r3, #88	; 0x58
   1f9f6:	d1f4      	bne.n	1f9e2 <d_maybe_print_designated_init+0x1e>
   1f9f8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1f9fc:	6913      	ldr	r3, [r2, #16]
   1f9fe:	29ff      	cmp	r1, #255	; 0xff
   1fa00:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
   1fa04:	f000 808e 	beq.w	1fb24 <d_maybe_print_designated_init+0x160>
   1fa08:	1c4b      	adds	r3, r1, #1
   1fa0a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fa0e:	235b      	movs	r3, #91	; 0x5b
   1fa10:	5463      	strb	r3, [r4, r1]
   1fa12:	e00c      	b.n	1fa2e <d_maybe_print_designated_init+0x6a>
   1fa14:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
   1fa18:	6913      	ldr	r3, [r2, #16]
   1fa1a:	29ff      	cmp	r1, #255	; 0xff
   1fa1c:	e9d3 5603 	ldrd	r5, r6, [r3, #12]
   1fa20:	f000 80b1 	beq.w	1fb86 <d_maybe_print_designated_init+0x1c2>
   1fa24:	1c4b      	adds	r3, r1, #1
   1fa26:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1fa2a:	232e      	movs	r3, #46	; 0x2e
   1fa2c:	5463      	strb	r3, [r4, r1]
   1fa2e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1fa32:	462a      	mov	r2, r5
   1fa34:	2111      	movs	r1, #17
   1fa36:	4620      	mov	r0, r4
   1fa38:	f7fe fdf2 	bl	1e620 <d_print_comp>
   1fa3c:	787b      	ldrb	r3, [r7, #1]
   1fa3e:	2b58      	cmp	r3, #88	; 0x58
   1fa40:	d03a      	beq.n	1fab8 <d_maybe_print_designated_init+0xf4>
   1fa42:	2b69      	cmp	r3, #105	; 0x69
   1fa44:	d00b      	beq.n	1fa5e <d_maybe_print_designated_init+0x9a>
   1fa46:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fa4a:	29ff      	cmp	r1, #255	; 0xff
   1fa4c:	f000 808a 	beq.w	1fb64 <d_maybe_print_designated_init+0x1a0>
   1fa50:	1c4a      	adds	r2, r1, #1
   1fa52:	235d      	movs	r3, #93	; 0x5d
   1fa54:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1fa58:	5463      	strb	r3, [r4, r1]
   1fa5a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1fa5e:	7833      	ldrb	r3, [r6, #0]
   1fa60:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1fa64:	2b38      	cmp	r3, #56	; 0x38
   1fa66:	d012      	beq.n	1fa8e <d_maybe_print_designated_init+0xca>
   1fa68:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fa6c:	29ff      	cmp	r1, #255	; 0xff
   1fa6e:	d068      	beq.n	1fb42 <d_maybe_print_designated_init+0x17e>
   1fa70:	1c4a      	adds	r2, r1, #1
   1fa72:	233d      	movs	r3, #61	; 0x3d
   1fa74:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
   1fa78:	4620      	mov	r0, r4
   1fa7a:	5463      	strb	r3, [r4, r1]
   1fa7c:	4632      	mov	r2, r6
   1fa7e:	2111      	movs	r1, #17
   1fa80:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
   1fa84:	f7ff fe06 	bl	1f694 <d_print_subexpr>
   1fa88:	2001      	movs	r0, #1
   1fa8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fa8e:	68f3      	ldr	r3, [r6, #12]
   1fa90:	68db      	ldr	r3, [r3, #12]
   1fa92:	681b      	ldr	r3, [r3, #0]
   1fa94:	781a      	ldrb	r2, [r3, #0]
   1fa96:	2a64      	cmp	r2, #100	; 0x64
   1fa98:	d1e6      	bne.n	1fa68 <d_maybe_print_designated_init+0xa4>
   1fa9a:	785b      	ldrb	r3, [r3, #1]
   1fa9c:	2b69      	cmp	r3, #105	; 0x69
   1fa9e:	d003      	beq.n	1faa8 <d_maybe_print_designated_init+0xe4>
   1faa0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1faa4:	2b58      	cmp	r3, #88	; 0x58
   1faa6:	d1df      	bne.n	1fa68 <d_maybe_print_designated_init+0xa4>
   1faa8:	4620      	mov	r0, r4
   1faaa:	4632      	mov	r2, r6
   1faac:	2111      	movs	r1, #17
   1faae:	f7fe fdb7 	bl	1e620 <d_print_comp>
   1fab2:	2001      	movs	r0, #1
   1fab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1fab8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 1fba4 <d_maybe_print_designated_init+0x1e0>
   1fabc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
   1fac0:	f108 0a04 	add.w	sl, r8, #4
   1fac4:	2520      	movs	r5, #32
   1fac6:	f04f 0900 	mov.w	r9, #0
   1faca:	e00b      	b.n	1fae4 <d_maybe_print_designated_init+0x120>
   1facc:	460b      	mov	r3, r1
   1face:	45c2      	cmp	sl, r8
   1fad0:	f101 0101 	add.w	r1, r1, #1
   1fad4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fad8:	54e5      	strb	r5, [r4, r3]
   1fada:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1fade:	d019      	beq.n	1fb14 <d_maybe_print_designated_init+0x150>
   1fae0:	f818 5f01 	ldrb.w	r5, [r8, #1]!
   1fae4:	29ff      	cmp	r1, #255	; 0xff
   1fae6:	d1f1      	bne.n	1facc <d_maybe_print_designated_init+0x108>
   1fae8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1faec:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1faf0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
   1faf4:	4620      	mov	r0, r4
   1faf6:	4798      	blx	r3
   1faf8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fafc:	3301      	adds	r3, #1
   1fafe:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fb02:	2300      	movs	r3, #0
   1fb04:	2101      	movs	r1, #1
   1fb06:	45c2      	cmp	sl, r8
   1fb08:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
   1fb0c:	54e5      	strb	r5, [r4, r3]
   1fb0e:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
   1fb12:	d1e5      	bne.n	1fae0 <d_maybe_print_designated_init+0x11c>
   1fb14:	68f2      	ldr	r2, [r6, #12]
   1fb16:	2111      	movs	r1, #17
   1fb18:	4620      	mov	r0, r4
   1fb1a:	f7fe fd81 	bl	1e620 <d_print_comp>
   1fb1e:	6936      	ldr	r6, [r6, #16]
   1fb20:	787b      	ldrb	r3, [r7, #1]
   1fb22:	e78e      	b.n	1fa42 <d_maybe_print_designated_init+0x7e>
   1fb24:	f04f 0800 	mov.w	r8, #0
   1fb28:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1fb2c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1fb30:	4798      	blx	r3
   1fb32:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fb36:	3301      	adds	r3, #1
   1fb38:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fb3c:	4641      	mov	r1, r8
   1fb3e:	2301      	movs	r3, #1
   1fb40:	e763      	b.n	1fa0a <d_maybe_print_designated_init+0x46>
   1fb42:	2500      	movs	r5, #0
   1fb44:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fb48:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fb4c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1fb50:	4620      	mov	r0, r4
   1fb52:	4798      	blx	r3
   1fb54:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fb58:	2201      	movs	r2, #1
   1fb5a:	4413      	add	r3, r2
   1fb5c:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fb60:	4629      	mov	r1, r5
   1fb62:	e786      	b.n	1fa72 <d_maybe_print_designated_init+0xae>
   1fb64:	2500      	movs	r5, #0
   1fb66:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1fb6a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1fb6e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
   1fb72:	4620      	mov	r0, r4
   1fb74:	4798      	blx	r3
   1fb76:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fb7a:	2201      	movs	r2, #1
   1fb7c:	4413      	add	r3, r2
   1fb7e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fb82:	4629      	mov	r1, r5
   1fb84:	e765      	b.n	1fa52 <d_maybe_print_designated_init+0x8e>
   1fb86:	f04f 0800 	mov.w	r8, #0
   1fb8a:	e9d4 3242 	ldrd	r3, r2, [r4, #264]	; 0x108
   1fb8e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
   1fb92:	4798      	blx	r3
   1fb94:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
   1fb98:	3301      	adds	r3, #1
   1fb9a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1fb9e:	4641      	mov	r1, r8
   1fba0:	2301      	movs	r3, #1
   1fba2:	e740      	b.n	1fa26 <d_maybe_print_designated_init+0x62>
   1fba4:	20002154 	.word	0x20002154

0001fba8 <__cxa_demangle>:
   1fba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fbac:	461e      	mov	r6, r3
   1fbae:	b084      	sub	sp, #16
   1fbb0:	2800      	cmp	r0, #0
   1fbb2:	d040      	beq.n	1fc36 <__cxa_demangle+0x8e>
   1fbb4:	460c      	mov	r4, r1
   1fbb6:	4615      	mov	r5, r2
   1fbb8:	b109      	cbz	r1, 1fbbe <__cxa_demangle+0x16>
   1fbba:	2a00      	cmp	r2, #0
   1fbbc:	d03b      	beq.n	1fc36 <__cxa_demangle+0x8e>
   1fbbe:	2300      	movs	r3, #0
   1fbc0:	4929      	ldr	r1, [pc, #164]	; (1fc68 <__cxa_demangle+0xc0>)
   1fbc2:	466a      	mov	r2, sp
   1fbc4:	e9cd 3300 	strd	r3, r3, [sp]
   1fbc8:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1fbcc:	f7ff fba2 	bl	1f314 <d_demangle_callback.constprop.0>
   1fbd0:	2800      	cmp	r0, #0
   1fbd2:	d039      	beq.n	1fc48 <__cxa_demangle+0xa0>
   1fbd4:	9b03      	ldr	r3, [sp, #12]
   1fbd6:	9f00      	ldr	r7, [sp, #0]
   1fbd8:	b9d3      	cbnz	r3, 1fc10 <__cxa_demangle+0x68>
   1fbda:	f8dd 8008 	ldr.w	r8, [sp, #8]
   1fbde:	2f00      	cmp	r7, #0
   1fbe0:	d03c      	beq.n	1fc5c <__cxa_demangle+0xb4>
   1fbe2:	b32c      	cbz	r4, 1fc30 <__cxa_demangle+0x88>
   1fbe4:	4638      	mov	r0, r7
   1fbe6:	f003 f80b 	bl	22c00 <strlen>
   1fbea:	682b      	ldr	r3, [r5, #0]
   1fbec:	4298      	cmp	r0, r3
   1fbee:	d219      	bcs.n	1fc24 <__cxa_demangle+0x7c>
   1fbf0:	4639      	mov	r1, r7
   1fbf2:	1c42      	adds	r2, r0, #1
   1fbf4:	4620      	mov	r0, r4
   1fbf6:	f7f6 fcd1 	bl	1659c <memcpy>
   1fbfa:	4638      	mov	r0, r7
   1fbfc:	f001 fab8 	bl	21170 <free>
   1fc00:	4627      	mov	r7, r4
   1fc02:	b10e      	cbz	r6, 1fc08 <__cxa_demangle+0x60>
   1fc04:	2300      	movs	r3, #0
   1fc06:	6033      	str	r3, [r6, #0]
   1fc08:	4638      	mov	r0, r7
   1fc0a:	b004      	add	sp, #16
   1fc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fc10:	f04f 0801 	mov.w	r8, #1
   1fc14:	2f00      	cmp	r7, #0
   1fc16:	d1e4      	bne.n	1fbe2 <__cxa_demangle+0x3a>
   1fc18:	b18e      	cbz	r6, 1fc3e <__cxa_demangle+0x96>
   1fc1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc1e:	6033      	str	r3, [r6, #0]
   1fc20:	2700      	movs	r7, #0
   1fc22:	e7f1      	b.n	1fc08 <__cxa_demangle+0x60>
   1fc24:	4620      	mov	r0, r4
   1fc26:	f001 faa3 	bl	21170 <free>
   1fc2a:	f8c5 8000 	str.w	r8, [r5]
   1fc2e:	e7e8      	b.n	1fc02 <__cxa_demangle+0x5a>
   1fc30:	2d00      	cmp	r5, #0
   1fc32:	d1fa      	bne.n	1fc2a <__cxa_demangle+0x82>
   1fc34:	e7e5      	b.n	1fc02 <__cxa_demangle+0x5a>
   1fc36:	b116      	cbz	r6, 1fc3e <__cxa_demangle+0x96>
   1fc38:	f06f 0302 	mvn.w	r3, #2
   1fc3c:	6033      	str	r3, [r6, #0]
   1fc3e:	2700      	movs	r7, #0
   1fc40:	4638      	mov	r0, r7
   1fc42:	b004      	add	sp, #16
   1fc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1fc48:	9800      	ldr	r0, [sp, #0]
   1fc4a:	f001 fa91 	bl	21170 <free>
   1fc4e:	2e00      	cmp	r6, #0
   1fc50:	d0f5      	beq.n	1fc3e <__cxa_demangle+0x96>
   1fc52:	f06f 0301 	mvn.w	r3, #1
   1fc56:	6033      	str	r3, [r6, #0]
   1fc58:	2700      	movs	r7, #0
   1fc5a:	e7d5      	b.n	1fc08 <__cxa_demangle+0x60>
   1fc5c:	2e00      	cmp	r6, #0
   1fc5e:	d0ee      	beq.n	1fc3e <__cxa_demangle+0x96>
   1fc60:	f1b8 0f01 	cmp.w	r8, #1
   1fc64:	d0d9      	beq.n	1fc1a <__cxa_demangle+0x72>
   1fc66:	e7f4      	b.n	1fc52 <__cxa_demangle+0xaa>
   1fc68:	0001a011 	.word	0x0001a011

0001fc6c <__cxxabiv1::__is_gxx_exception_class(char*)>:
   1fc6c:	7803      	ldrb	r3, [r0, #0]
   1fc6e:	2b47      	cmp	r3, #71	; 0x47
   1fc70:	d001      	beq.n	1fc76 <__cxxabiv1::__is_gxx_exception_class(char*)+0xa>
   1fc72:	2000      	movs	r0, #0
   1fc74:	4770      	bx	lr
   1fc76:	7843      	ldrb	r3, [r0, #1]
   1fc78:	2b4e      	cmp	r3, #78	; 0x4e
   1fc7a:	d1fa      	bne.n	1fc72 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   1fc7c:	7883      	ldrb	r3, [r0, #2]
   1fc7e:	2b55      	cmp	r3, #85	; 0x55
   1fc80:	d1f7      	bne.n	1fc72 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   1fc82:	78c3      	ldrb	r3, [r0, #3]
   1fc84:	2b43      	cmp	r3, #67	; 0x43
   1fc86:	d1f4      	bne.n	1fc72 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   1fc88:	7903      	ldrb	r3, [r0, #4]
   1fc8a:	2b43      	cmp	r3, #67	; 0x43
   1fc8c:	d1f1      	bne.n	1fc72 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   1fc8e:	7943      	ldrb	r3, [r0, #5]
   1fc90:	2b2b      	cmp	r3, #43	; 0x2b
   1fc92:	d1ee      	bne.n	1fc72 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   1fc94:	7983      	ldrb	r3, [r0, #6]
   1fc96:	2b2b      	cmp	r3, #43	; 0x2b
   1fc98:	d1eb      	bne.n	1fc72 <__cxxabiv1::__is_gxx_exception_class(char*)+0x6>
   1fc9a:	79c0      	ldrb	r0, [r0, #7]
   1fc9c:	2801      	cmp	r0, #1
   1fc9e:	bf8c      	ite	hi
   1fca0:	2000      	movhi	r0, #0
   1fca2:	2001      	movls	r0, #1
   1fca4:	4770      	bx	lr
   1fca6:	bf00      	nop

0001fca8 <__cxa_call_terminate>:
   1fca8:	b510      	push	{r4, lr}
   1fcaa:	b130      	cbz	r0, 1fcba <__cxa_call_terminate+0x12>
   1fcac:	4604      	mov	r4, r0
   1fcae:	f000 f87d 	bl	1fdac <__cxa_begin_catch>
   1fcb2:	4620      	mov	r0, r4
   1fcb4:	f7ff ffda 	bl	1fc6c <__cxxabiv1::__is_gxx_exception_class(char*)>
   1fcb8:	b908      	cbnz	r0, 1fcbe <__cxa_call_terminate+0x16>
   1fcba:	f7f9 fc85 	bl	195c8 <std::terminate()>
   1fcbe:	f854 0c14 	ldr.w	r0, [r4, #-20]
   1fcc2:	f7f9 fc79 	bl	195b8 <__cxxabiv1::__terminate(void (*)())>
   1fcc6:	bf00      	nop

0001fcc8 <__cxa_call_unexpected>:
   1fcc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fccc:	b085      	sub	sp, #20
   1fcce:	4602      	mov	r2, r0
   1fcd0:	f7ff ffcc 	bl	1fc6c <__cxxabiv1::__is_gxx_exception_class(char*)>
   1fcd4:	b138      	cbz	r0, 1fce6 <__cxa_call_unexpected+0x1e>
   1fcd6:	e952 7406 	ldrd	r7, r4, [r2, #-24]
   1fcda:	e9d2 850c 	ldrd	r8, r5, [r2, #48]	; 0x30
   1fcde:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
   1fce2:	2600      	movs	r6, #0
   1fce4:	e005      	b.n	1fcf2 <__cxa_call_unexpected+0x2a>
   1fce6:	4604      	mov	r4, r0
   1fce8:	4607      	mov	r7, r0
   1fcea:	2601      	movs	r6, #1
   1fcec:	4605      	mov	r5, r0
   1fcee:	4680      	mov	r8, r0
   1fcf0:	4682      	mov	sl, r0
   1fcf2:	4610      	mov	r0, r2
   1fcf4:	f000 f85a 	bl	1fdac <__cxa_begin_catch>
   1fcf8:	b10e      	cbz	r6, 1fcfe <__cxa_call_unexpected+0x36>
   1fcfa:	f7f9 fc73 	bl	195e4 <std::unexpected()>
   1fcfe:	4638      	mov	r0, r7
   1fd00:	f7f9 fc6c 	bl	195dc <__cxxabiv1::__unexpected(void (*)())>
   1fd04:	f000 f852 	bl	1fdac <__cxa_begin_catch>
   1fd08:	b10e      	cbz	r6, 1fd0e <__cxa_call_unexpected+0x46>
   1fd0a:	f7f9 fc5d 	bl	195c8 <std::terminate()>
   1fd0e:	f7f9 f935 	bl	18f7c <__cxa_get_globals_fast>
   1fd12:	6807      	ldr	r7, [r0, #0]
   1fd14:	f8df b090 	ldr.w	fp, [pc, #144]	; 1fda8 <__cxa_call_unexpected+0xe0>
   1fd18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   1fd1c:	2b01      	cmp	r3, #1
   1fd1e:	bf0c      	ite	eq
   1fd20:	683b      	ldreq	r3, [r7, #0]
   1fd22:	f107 0378 	addne.w	r3, r7, #120	; 0x78
   1fd26:	9302      	str	r3, [sp, #8]
   1fd28:	f028 0303 	bic.w	r3, r8, #3
   1fd2c:	9301      	str	r3, [sp, #4]
   1fd2e:	3720      	adds	r7, #32
   1fd30:	f04f 0900 	mov.w	r9, #0
   1fd34:	45ca      	cmp	sl, r9
   1fd36:	dd20      	ble.n	1fd7a <__cxa_call_unexpected+0xb2>
   1fd38:	f8d5 8000 	ldr.w	r8, [r5]
   1fd3c:	f1b8 0f00 	cmp.w	r8, #0
   1fd40:	d000      	beq.n	1fd44 <__cxa_call_unexpected+0x7c>
   1fd42:	44a8      	add	r8, r5
   1fd44:	ab02      	add	r3, sp, #8
   1fd46:	2200      	movs	r2, #0
   1fd48:	4641      	mov	r1, r8
   1fd4a:	4638      	mov	r0, r7
   1fd4c:	f7f9 f844 	bl	18dd8 <__cxa_type_match>
   1fd50:	b108      	cbz	r0, 1fd56 <__cxa_call_unexpected+0x8e>
   1fd52:	f7f9 fccf 	bl	196f4 <__cxa_rethrow>
   1fd56:	f8d8 3000 	ldr.w	r3, [r8]
   1fd5a:	9003      	str	r0, [sp, #12]
   1fd5c:	aa03      	add	r2, sp, #12
   1fd5e:	4640      	mov	r0, r8
   1fd60:	4659      	mov	r1, fp
   1fd62:	f8d3 8010 	ldr.w	r8, [r3, #16]
   1fd66:	2301      	movs	r3, #1
   1fd68:	47c0      	blx	r8
   1fd6a:	9b01      	ldr	r3, [sp, #4]
   1fd6c:	2800      	cmp	r0, #0
   1fd6e:	bf18      	it	ne
   1fd70:	4606      	movne	r6, r0
   1fd72:	f109 0901 	add.w	r9, r9, #1
   1fd76:	441d      	add	r5, r3
   1fd78:	e7dc      	b.n	1fd34 <__cxa_call_unexpected+0x6c>
   1fd7a:	b146      	cbz	r6, 1fd8e <__cxa_call_unexpected+0xc6>
   1fd7c:	2004      	movs	r0, #4
   1fd7e:	f7f8 ffe9 	bl	18d54 <__cxa_allocate_exception>
   1fd82:	4b07      	ldr	r3, [pc, #28]	; (1fda0 <__cxa_call_unexpected+0xd8>)
   1fd84:	4a07      	ldr	r2, [pc, #28]	; (1fda4 <__cxa_call_unexpected+0xdc>)
   1fd86:	4908      	ldr	r1, [pc, #32]	; (1fda8 <__cxa_call_unexpected+0xe0>)
   1fd88:	6003      	str	r3, [r0, #0]
   1fd8a:	f7f9 fc97 	bl	196bc <__cxa_throw>
   1fd8e:	4620      	mov	r0, r4
   1fd90:	f7f9 fc12 	bl	195b8 <__cxxabiv1::__terminate(void (*)())>
   1fd94:	f000 f848 	bl	1fe28 <__cxa_end_catch>
   1fd98:	f000 f846 	bl	1fe28 <__cxa_end_catch>
   1fd9c:	f7f9 f816 	bl	18dcc <__cxa_end_cleanup>
   1fda0:	20001708 	.word	0x20001708
   1fda4:	00018f61 	.word	0x00018f61
   1fda8:	2000122c 	.word	0x2000122c

0001fdac <__cxa_begin_catch>:
   1fdac:	b538      	push	{r3, r4, r5, lr}
   1fdae:	4604      	mov	r4, r0
   1fdb0:	f7f9 f8e8 	bl	18f84 <__cxa_get_globals>
   1fdb4:	4622      	mov	r2, r4
   1fdb6:	6805      	ldr	r5, [r0, #0]
   1fdb8:	f812 3920 	ldrb.w	r3, [r2], #-32
   1fdbc:	2b47      	cmp	r3, #71	; 0x47
   1fdbe:	d003      	beq.n	1fdc8 <__cxa_begin_catch+0x1c>
   1fdc0:	bb85      	cbnz	r5, 1fe24 <__cxa_begin_catch+0x78>
   1fdc2:	6002      	str	r2, [r0, #0]
   1fdc4:	4628      	mov	r0, r5
   1fdc6:	bd38      	pop	{r3, r4, r5, pc}
   1fdc8:	7863      	ldrb	r3, [r4, #1]
   1fdca:	2b4e      	cmp	r3, #78	; 0x4e
   1fdcc:	d1f8      	bne.n	1fdc0 <__cxa_begin_catch+0x14>
   1fdce:	78a3      	ldrb	r3, [r4, #2]
   1fdd0:	2b55      	cmp	r3, #85	; 0x55
   1fdd2:	d1f5      	bne.n	1fdc0 <__cxa_begin_catch+0x14>
   1fdd4:	78e3      	ldrb	r3, [r4, #3]
   1fdd6:	2b43      	cmp	r3, #67	; 0x43
   1fdd8:	d1f2      	bne.n	1fdc0 <__cxa_begin_catch+0x14>
   1fdda:	7923      	ldrb	r3, [r4, #4]
   1fddc:	2b43      	cmp	r3, #67	; 0x43
   1fdde:	d1ef      	bne.n	1fdc0 <__cxa_begin_catch+0x14>
   1fde0:	7963      	ldrb	r3, [r4, #5]
   1fde2:	2b2b      	cmp	r3, #43	; 0x2b
   1fde4:	d1ec      	bne.n	1fdc0 <__cxa_begin_catch+0x14>
   1fde6:	79a3      	ldrb	r3, [r4, #6]
   1fde8:	2b2b      	cmp	r3, #43	; 0x2b
   1fdea:	d1e9      	bne.n	1fdc0 <__cxa_begin_catch+0x14>
   1fdec:	79e3      	ldrb	r3, [r4, #7]
   1fdee:	2b01      	cmp	r3, #1
   1fdf0:	d8e6      	bhi.n	1fdc0 <__cxa_begin_catch+0x14>
   1fdf2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   1fdf6:	2b00      	cmp	r3, #0
   1fdf8:	db11      	blt.n	1fe1e <__cxa_begin_catch+0x72>
   1fdfa:	3301      	adds	r3, #1
   1fdfc:	f844 3c0c 	str.w	r3, [r4, #-12]
   1fe00:	6843      	ldr	r3, [r0, #4]
   1fe02:	3b01      	subs	r3, #1
   1fe04:	6043      	str	r3, [r0, #4]
   1fe06:	4295      	cmp	r5, r2
   1fe08:	bf18      	it	ne
   1fe0a:	f844 5c10 	strne.w	r5, [r4, #-16]
   1fe0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
   1fe10:	bf18      	it	ne
   1fe12:	6002      	strne	r2, [r0, #0]
   1fe14:	4620      	mov	r0, r4
   1fe16:	f000 fb8f 	bl	20538 <_Unwind_Complete>
   1fe1a:	4628      	mov	r0, r5
   1fe1c:	bd38      	pop	{r3, r4, r5, pc}
   1fe1e:	f1c3 0301 	rsb	r3, r3, #1
   1fe22:	e7eb      	b.n	1fdfc <__cxa_begin_catch+0x50>
   1fe24:	f7f9 fbd0 	bl	195c8 <std::terminate()>

0001fe28 <__cxa_end_catch>:
   1fe28:	b508      	push	{r3, lr}
   1fe2a:	f7f9 f8a7 	bl	18f7c <__cxa_get_globals_fast>
   1fe2e:	6803      	ldr	r3, [r0, #0]
   1fe30:	b37b      	cbz	r3, 1fe92 <__cxa_end_catch+0x6a>
   1fe32:	f893 2020 	ldrb.w	r2, [r3, #32]
   1fe36:	2a47      	cmp	r2, #71	; 0x47
   1fe38:	d007      	beq.n	1fe4a <__cxa_end_catch+0x22>
   1fe3a:	2200      	movs	r2, #0
   1fe3c:	6002      	str	r2, [r0, #0]
   1fe3e:	f103 0020 	add.w	r0, r3, #32
   1fe42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1fe46:	f000 bb79 	b.w	2053c <_Unwind_DeleteException>
   1fe4a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
   1fe4e:	2a4e      	cmp	r2, #78	; 0x4e
   1fe50:	d1f3      	bne.n	1fe3a <__cxa_end_catch+0x12>
   1fe52:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
   1fe56:	2a55      	cmp	r2, #85	; 0x55
   1fe58:	d1ef      	bne.n	1fe3a <__cxa_end_catch+0x12>
   1fe5a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
   1fe5e:	2a43      	cmp	r2, #67	; 0x43
   1fe60:	d1eb      	bne.n	1fe3a <__cxa_end_catch+0x12>
   1fe62:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   1fe66:	2a43      	cmp	r2, #67	; 0x43
   1fe68:	d1e7      	bne.n	1fe3a <__cxa_end_catch+0x12>
   1fe6a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
   1fe6e:	2a2b      	cmp	r2, #43	; 0x2b
   1fe70:	d1e3      	bne.n	1fe3a <__cxa_end_catch+0x12>
   1fe72:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
   1fe76:	2a2b      	cmp	r2, #43	; 0x2b
   1fe78:	d1df      	bne.n	1fe3a <__cxa_end_catch+0x12>
   1fe7a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
   1fe7e:	2a01      	cmp	r2, #1
   1fe80:	d8db      	bhi.n	1fe3a <__cxa_end_catch+0x12>
   1fe82:	695a      	ldr	r2, [r3, #20]
   1fe84:	2a00      	cmp	r2, #0
   1fe86:	db05      	blt.n	1fe94 <__cxa_end_catch+0x6c>
   1fe88:	3a01      	subs	r2, #1
   1fe8a:	d008      	beq.n	1fe9e <__cxa_end_catch+0x76>
   1fe8c:	1c51      	adds	r1, r2, #1
   1fe8e:	d00e      	beq.n	1feae <__cxa_end_catch+0x86>
   1fe90:	615a      	str	r2, [r3, #20]
   1fe92:	bd08      	pop	{r3, pc}
   1fe94:	3201      	adds	r2, #1
   1fe96:	d1fb      	bne.n	1fe90 <__cxa_end_catch+0x68>
   1fe98:	6919      	ldr	r1, [r3, #16]
   1fe9a:	6001      	str	r1, [r0, #0]
   1fe9c:	e7f8      	b.n	1fe90 <__cxa_end_catch+0x68>
   1fe9e:	691a      	ldr	r2, [r3, #16]
   1fea0:	6002      	str	r2, [r0, #0]
   1fea2:	f103 0020 	add.w	r0, r3, #32
   1fea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   1feaa:	f000 bb47 	b.w	2053c <_Unwind_DeleteException>
   1feae:	f7f9 fb8b 	bl	195c8 <std::terminate()>
   1feb2:	bf00      	nop

0001feb4 <__cxa_current_exception_type>:
   1feb4:	b508      	push	{r3, lr}
   1feb6:	f7f9 f865 	bl	18f84 <__cxa_get_globals>
   1feba:	6800      	ldr	r0, [r0, #0]
   1febc:	b130      	cbz	r0, 1fecc <__cxa_current_exception_type+0x18>
   1febe:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1fec2:	2b01      	cmp	r3, #1
   1fec4:	bf04      	itt	eq
   1fec6:	6800      	ldreq	r0, [r0, #0]
   1fec8:	3878      	subeq	r0, #120	; 0x78
   1feca:	6800      	ldr	r0, [r0, #0]
   1fecc:	bd08      	pop	{r3, pc}
   1fece:	bf00      	nop

0001fed0 <__aeabi_uldivmod>:
   1fed0:	b953      	cbnz	r3, 1fee8 <__aeabi_uldivmod+0x18>
   1fed2:	b94a      	cbnz	r2, 1fee8 <__aeabi_uldivmod+0x18>
   1fed4:	2900      	cmp	r1, #0
   1fed6:	bf08      	it	eq
   1fed8:	2800      	cmpeq	r0, #0
   1feda:	bf1c      	itt	ne
   1fedc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1fee0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1fee4:	f001 b8e8 	b.w	210b8 <__aeabi_idiv0>
   1fee8:	f1ad 0c08 	sub.w	ip, sp, #8
   1feec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1fef0:	f000 f806 	bl	1ff00 <__udivmoddi4>
   1fef4:	f8dd e004 	ldr.w	lr, [sp, #4]
   1fef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1fefc:	b004      	add	sp, #16
   1fefe:	4770      	bx	lr

0001ff00 <__udivmoddi4>:
   1ff00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ff04:	9e08      	ldr	r6, [sp, #32]
   1ff06:	460d      	mov	r5, r1
   1ff08:	4604      	mov	r4, r0
   1ff0a:	460f      	mov	r7, r1
   1ff0c:	2b00      	cmp	r3, #0
   1ff0e:	d14a      	bne.n	1ffa6 <__udivmoddi4+0xa6>
   1ff10:	428a      	cmp	r2, r1
   1ff12:	4694      	mov	ip, r2
   1ff14:	d965      	bls.n	1ffe2 <__udivmoddi4+0xe2>
   1ff16:	fab2 f382 	clz	r3, r2
   1ff1a:	b143      	cbz	r3, 1ff2e <__udivmoddi4+0x2e>
   1ff1c:	fa02 fc03 	lsl.w	ip, r2, r3
   1ff20:	f1c3 0220 	rsb	r2, r3, #32
   1ff24:	409f      	lsls	r7, r3
   1ff26:	fa20 f202 	lsr.w	r2, r0, r2
   1ff2a:	4317      	orrs	r7, r2
   1ff2c:	409c      	lsls	r4, r3
   1ff2e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
   1ff32:	fa1f f58c 	uxth.w	r5, ip
   1ff36:	fbb7 f1fe 	udiv	r1, r7, lr
   1ff3a:	0c22      	lsrs	r2, r4, #16
   1ff3c:	fb0e 7711 	mls	r7, lr, r1, r7
   1ff40:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
   1ff44:	fb01 f005 	mul.w	r0, r1, r5
   1ff48:	4290      	cmp	r0, r2
   1ff4a:	d90a      	bls.n	1ff62 <__udivmoddi4+0x62>
   1ff4c:	eb1c 0202 	adds.w	r2, ip, r2
   1ff50:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
   1ff54:	f080 811c 	bcs.w	20190 <__udivmoddi4+0x290>
   1ff58:	4290      	cmp	r0, r2
   1ff5a:	f240 8119 	bls.w	20190 <__udivmoddi4+0x290>
   1ff5e:	3902      	subs	r1, #2
   1ff60:	4462      	add	r2, ip
   1ff62:	1a12      	subs	r2, r2, r0
   1ff64:	b2a4      	uxth	r4, r4
   1ff66:	fbb2 f0fe 	udiv	r0, r2, lr
   1ff6a:	fb0e 2210 	mls	r2, lr, r0, r2
   1ff6e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   1ff72:	fb00 f505 	mul.w	r5, r0, r5
   1ff76:	42a5      	cmp	r5, r4
   1ff78:	d90a      	bls.n	1ff90 <__udivmoddi4+0x90>
   1ff7a:	eb1c 0404 	adds.w	r4, ip, r4
   1ff7e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   1ff82:	f080 8107 	bcs.w	20194 <__udivmoddi4+0x294>
   1ff86:	42a5      	cmp	r5, r4
   1ff88:	f240 8104 	bls.w	20194 <__udivmoddi4+0x294>
   1ff8c:	4464      	add	r4, ip
   1ff8e:	3802      	subs	r0, #2
   1ff90:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
   1ff94:	1b64      	subs	r4, r4, r5
   1ff96:	2100      	movs	r1, #0
   1ff98:	b11e      	cbz	r6, 1ffa2 <__udivmoddi4+0xa2>
   1ff9a:	40dc      	lsrs	r4, r3
   1ff9c:	2300      	movs	r3, #0
   1ff9e:	e9c6 4300 	strd	r4, r3, [r6]
   1ffa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ffa6:	428b      	cmp	r3, r1
   1ffa8:	d908      	bls.n	1ffbc <__udivmoddi4+0xbc>
   1ffaa:	2e00      	cmp	r6, #0
   1ffac:	f000 80ed 	beq.w	2018a <__udivmoddi4+0x28a>
   1ffb0:	2100      	movs	r1, #0
   1ffb2:	e9c6 0500 	strd	r0, r5, [r6]
   1ffb6:	4608      	mov	r0, r1
   1ffb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1ffbc:	fab3 f183 	clz	r1, r3
   1ffc0:	2900      	cmp	r1, #0
   1ffc2:	d149      	bne.n	20058 <__udivmoddi4+0x158>
   1ffc4:	42ab      	cmp	r3, r5
   1ffc6:	d302      	bcc.n	1ffce <__udivmoddi4+0xce>
   1ffc8:	4282      	cmp	r2, r0
   1ffca:	f200 80f8 	bhi.w	201be <__udivmoddi4+0x2be>
   1ffce:	1a84      	subs	r4, r0, r2
   1ffd0:	eb65 0203 	sbc.w	r2, r5, r3
   1ffd4:	2001      	movs	r0, #1
   1ffd6:	4617      	mov	r7, r2
   1ffd8:	2e00      	cmp	r6, #0
   1ffda:	d0e2      	beq.n	1ffa2 <__udivmoddi4+0xa2>
   1ffdc:	e9c6 4700 	strd	r4, r7, [r6]
   1ffe0:	e7df      	b.n	1ffa2 <__udivmoddi4+0xa2>
   1ffe2:	b902      	cbnz	r2, 1ffe6 <__udivmoddi4+0xe6>
   1ffe4:	deff      	udf	#255	; 0xff
   1ffe6:	fab2 f382 	clz	r3, r2
   1ffea:	2b00      	cmp	r3, #0
   1ffec:	f040 8090 	bne.w	20110 <__udivmoddi4+0x210>
   1fff0:	1a8a      	subs	r2, r1, r2
   1fff2:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1fff6:	fa1f fe8c 	uxth.w	lr, ip
   1fffa:	2101      	movs	r1, #1
   1fffc:	fbb2 f5f7 	udiv	r5, r2, r7
   20000:	fb07 2015 	mls	r0, r7, r5, r2
   20004:	0c22      	lsrs	r2, r4, #16
   20006:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   2000a:	fb0e f005 	mul.w	r0, lr, r5
   2000e:	4290      	cmp	r0, r2
   20010:	d908      	bls.n	20024 <__udivmoddi4+0x124>
   20012:	eb1c 0202 	adds.w	r2, ip, r2
   20016:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   2001a:	d202      	bcs.n	20022 <__udivmoddi4+0x122>
   2001c:	4290      	cmp	r0, r2
   2001e:	f200 80cb 	bhi.w	201b8 <__udivmoddi4+0x2b8>
   20022:	4645      	mov	r5, r8
   20024:	1a12      	subs	r2, r2, r0
   20026:	b2a4      	uxth	r4, r4
   20028:	fbb2 f0f7 	udiv	r0, r2, r7
   2002c:	fb07 2210 	mls	r2, r7, r0, r2
   20030:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   20034:	fb0e fe00 	mul.w	lr, lr, r0
   20038:	45a6      	cmp	lr, r4
   2003a:	d908      	bls.n	2004e <__udivmoddi4+0x14e>
   2003c:	eb1c 0404 	adds.w	r4, ip, r4
   20040:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   20044:	d202      	bcs.n	2004c <__udivmoddi4+0x14c>
   20046:	45a6      	cmp	lr, r4
   20048:	f200 80bb 	bhi.w	201c2 <__udivmoddi4+0x2c2>
   2004c:	4610      	mov	r0, r2
   2004e:	eba4 040e 	sub.w	r4, r4, lr
   20052:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   20056:	e79f      	b.n	1ff98 <__udivmoddi4+0x98>
   20058:	f1c1 0720 	rsb	r7, r1, #32
   2005c:	408b      	lsls	r3, r1
   2005e:	fa22 fc07 	lsr.w	ip, r2, r7
   20062:	ea4c 0c03 	orr.w	ip, ip, r3
   20066:	fa05 f401 	lsl.w	r4, r5, r1
   2006a:	fa20 f307 	lsr.w	r3, r0, r7
   2006e:	40fd      	lsrs	r5, r7
   20070:	ea4f 491c 	mov.w	r9, ip, lsr #16
   20074:	4323      	orrs	r3, r4
   20076:	fbb5 f8f9 	udiv	r8, r5, r9
   2007a:	fa1f fe8c 	uxth.w	lr, ip
   2007e:	fb09 5518 	mls	r5, r9, r8, r5
   20082:	0c1c      	lsrs	r4, r3, #16
   20084:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   20088:	fb08 f50e 	mul.w	r5, r8, lr
   2008c:	42a5      	cmp	r5, r4
   2008e:	fa02 f201 	lsl.w	r2, r2, r1
   20092:	fa00 f001 	lsl.w	r0, r0, r1
   20096:	d90b      	bls.n	200b0 <__udivmoddi4+0x1b0>
   20098:	eb1c 0404 	adds.w	r4, ip, r4
   2009c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   200a0:	f080 8088 	bcs.w	201b4 <__udivmoddi4+0x2b4>
   200a4:	42a5      	cmp	r5, r4
   200a6:	f240 8085 	bls.w	201b4 <__udivmoddi4+0x2b4>
   200aa:	f1a8 0802 	sub.w	r8, r8, #2
   200ae:	4464      	add	r4, ip
   200b0:	1b64      	subs	r4, r4, r5
   200b2:	b29d      	uxth	r5, r3
   200b4:	fbb4 f3f9 	udiv	r3, r4, r9
   200b8:	fb09 4413 	mls	r4, r9, r3, r4
   200bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   200c0:	fb03 fe0e 	mul.w	lr, r3, lr
   200c4:	45a6      	cmp	lr, r4
   200c6:	d908      	bls.n	200da <__udivmoddi4+0x1da>
   200c8:	eb1c 0404 	adds.w	r4, ip, r4
   200cc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
   200d0:	d26c      	bcs.n	201ac <__udivmoddi4+0x2ac>
   200d2:	45a6      	cmp	lr, r4
   200d4:	d96a      	bls.n	201ac <__udivmoddi4+0x2ac>
   200d6:	3b02      	subs	r3, #2
   200d8:	4464      	add	r4, ip
   200da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   200de:	fba3 9502 	umull	r9, r5, r3, r2
   200e2:	eba4 040e 	sub.w	r4, r4, lr
   200e6:	42ac      	cmp	r4, r5
   200e8:	46c8      	mov	r8, r9
   200ea:	46ae      	mov	lr, r5
   200ec:	d356      	bcc.n	2019c <__udivmoddi4+0x29c>
   200ee:	d053      	beq.n	20198 <__udivmoddi4+0x298>
   200f0:	b156      	cbz	r6, 20108 <__udivmoddi4+0x208>
   200f2:	ebb0 0208 	subs.w	r2, r0, r8
   200f6:	eb64 040e 	sbc.w	r4, r4, lr
   200fa:	fa04 f707 	lsl.w	r7, r4, r7
   200fe:	40ca      	lsrs	r2, r1
   20100:	40cc      	lsrs	r4, r1
   20102:	4317      	orrs	r7, r2
   20104:	e9c6 7400 	strd	r7, r4, [r6]
   20108:	4618      	mov	r0, r3
   2010a:	2100      	movs	r1, #0
   2010c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20110:	f1c3 0120 	rsb	r1, r3, #32
   20114:	fa02 fc03 	lsl.w	ip, r2, r3
   20118:	fa20 f201 	lsr.w	r2, r0, r1
   2011c:	fa25 f101 	lsr.w	r1, r5, r1
   20120:	409d      	lsls	r5, r3
   20122:	432a      	orrs	r2, r5
   20124:	ea4f 471c 	mov.w	r7, ip, lsr #16
   20128:	fa1f fe8c 	uxth.w	lr, ip
   2012c:	fbb1 f0f7 	udiv	r0, r1, r7
   20130:	fb07 1510 	mls	r5, r7, r0, r1
   20134:	0c11      	lsrs	r1, r2, #16
   20136:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
   2013a:	fb00 f50e 	mul.w	r5, r0, lr
   2013e:	428d      	cmp	r5, r1
   20140:	fa04 f403 	lsl.w	r4, r4, r3
   20144:	d908      	bls.n	20158 <__udivmoddi4+0x258>
   20146:	eb1c 0101 	adds.w	r1, ip, r1
   2014a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   2014e:	d22f      	bcs.n	201b0 <__udivmoddi4+0x2b0>
   20150:	428d      	cmp	r5, r1
   20152:	d92d      	bls.n	201b0 <__udivmoddi4+0x2b0>
   20154:	3802      	subs	r0, #2
   20156:	4461      	add	r1, ip
   20158:	1b49      	subs	r1, r1, r5
   2015a:	b292      	uxth	r2, r2
   2015c:	fbb1 f5f7 	udiv	r5, r1, r7
   20160:	fb07 1115 	mls	r1, r7, r5, r1
   20164:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   20168:	fb05 f10e 	mul.w	r1, r5, lr
   2016c:	4291      	cmp	r1, r2
   2016e:	d908      	bls.n	20182 <__udivmoddi4+0x282>
   20170:	eb1c 0202 	adds.w	r2, ip, r2
   20174:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
   20178:	d216      	bcs.n	201a8 <__udivmoddi4+0x2a8>
   2017a:	4291      	cmp	r1, r2
   2017c:	d914      	bls.n	201a8 <__udivmoddi4+0x2a8>
   2017e:	3d02      	subs	r5, #2
   20180:	4462      	add	r2, ip
   20182:	1a52      	subs	r2, r2, r1
   20184:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
   20188:	e738      	b.n	1fffc <__udivmoddi4+0xfc>
   2018a:	4631      	mov	r1, r6
   2018c:	4630      	mov	r0, r6
   2018e:	e708      	b.n	1ffa2 <__udivmoddi4+0xa2>
   20190:	4639      	mov	r1, r7
   20192:	e6e6      	b.n	1ff62 <__udivmoddi4+0x62>
   20194:	4610      	mov	r0, r2
   20196:	e6fb      	b.n	1ff90 <__udivmoddi4+0x90>
   20198:	4548      	cmp	r0, r9
   2019a:	d2a9      	bcs.n	200f0 <__udivmoddi4+0x1f0>
   2019c:	ebb9 0802 	subs.w	r8, r9, r2
   201a0:	eb65 0e0c 	sbc.w	lr, r5, ip
   201a4:	3b01      	subs	r3, #1
   201a6:	e7a3      	b.n	200f0 <__udivmoddi4+0x1f0>
   201a8:	4645      	mov	r5, r8
   201aa:	e7ea      	b.n	20182 <__udivmoddi4+0x282>
   201ac:	462b      	mov	r3, r5
   201ae:	e794      	b.n	200da <__udivmoddi4+0x1da>
   201b0:	4640      	mov	r0, r8
   201b2:	e7d1      	b.n	20158 <__udivmoddi4+0x258>
   201b4:	46d0      	mov	r8, sl
   201b6:	e77b      	b.n	200b0 <__udivmoddi4+0x1b0>
   201b8:	3d02      	subs	r5, #2
   201ba:	4462      	add	r2, ip
   201bc:	e732      	b.n	20024 <__udivmoddi4+0x124>
   201be:	4608      	mov	r0, r1
   201c0:	e70a      	b.n	1ffd8 <__udivmoddi4+0xd8>
   201c2:	4464      	add	r4, ip
   201c4:	3802      	subs	r0, #2
   201c6:	e742      	b.n	2004e <__udivmoddi4+0x14e>

000201c8 <selfrel_offset31>:
   201c8:	6803      	ldr	r3, [r0, #0]
   201ca:	005a      	lsls	r2, r3, #1
   201cc:	bf4c      	ite	mi
   201ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
   201d2:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
   201d6:	4418      	add	r0, r3
   201d8:	4770      	bx	lr
   201da:	bf00      	nop

000201dc <search_EIT_table>:
   201dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   201e0:	b329      	cbz	r1, 2022e <search_EIT_table+0x52>
   201e2:	1e4f      	subs	r7, r1, #1
   201e4:	4604      	mov	r4, r0
   201e6:	4615      	mov	r5, r2
   201e8:	463e      	mov	r6, r7
   201ea:	f04f 0800 	mov.w	r8, #0
   201ee:	eb08 0106 	add.w	r1, r8, r6
   201f2:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   201f6:	1049      	asrs	r1, r1, #1
   201f8:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
   201fc:	4648      	mov	r0, r9
   201fe:	f7ff ffe3 	bl	201c8 <selfrel_offset31>
   20202:	4603      	mov	r3, r0
   20204:	00c8      	lsls	r0, r1, #3
   20206:	3008      	adds	r0, #8
   20208:	428f      	cmp	r7, r1
   2020a:	4420      	add	r0, r4
   2020c:	d009      	beq.n	20222 <search_EIT_table+0x46>
   2020e:	42ab      	cmp	r3, r5
   20210:	d809      	bhi.n	20226 <search_EIT_table+0x4a>
   20212:	f7ff ffd9 	bl	201c8 <selfrel_offset31>
   20216:	3801      	subs	r0, #1
   20218:	42a8      	cmp	r0, r5
   2021a:	d20a      	bcs.n	20232 <search_EIT_table+0x56>
   2021c:	f101 0801 	add.w	r8, r1, #1
   20220:	e7e5      	b.n	201ee <search_EIT_table+0x12>
   20222:	42ab      	cmp	r3, r5
   20224:	d905      	bls.n	20232 <search_EIT_table+0x56>
   20226:	4588      	cmp	r8, r1
   20228:	d001      	beq.n	2022e <search_EIT_table+0x52>
   2022a:	1e4e      	subs	r6, r1, #1
   2022c:	e7df      	b.n	201ee <search_EIT_table+0x12>
   2022e:	f04f 0900 	mov.w	r9, #0
   20232:	4648      	mov	r0, r9
   20234:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00020238 <__gnu_unwind_get_pr_addr>:
   20238:	2801      	cmp	r0, #1
   2023a:	d007      	beq.n	2024c <__gnu_unwind_get_pr_addr+0x14>
   2023c:	2802      	cmp	r0, #2
   2023e:	d007      	beq.n	20250 <__gnu_unwind_get_pr_addr+0x18>
   20240:	4b04      	ldr	r3, [pc, #16]	; (20254 <__gnu_unwind_get_pr_addr+0x1c>)
   20242:	2800      	cmp	r0, #0
   20244:	bf0c      	ite	eq
   20246:	4618      	moveq	r0, r3
   20248:	2000      	movne	r0, #0
   2024a:	4770      	bx	lr
   2024c:	4802      	ldr	r0, [pc, #8]	; (20258 <__gnu_unwind_get_pr_addr+0x20>)
   2024e:	4770      	bx	lr
   20250:	4802      	ldr	r0, [pc, #8]	; (2025c <__gnu_unwind_get_pr_addr+0x24>)
   20252:	4770      	bx	lr
   20254:	00020909 	.word	0x00020909
   20258:	00020911 	.word	0x00020911
   2025c:	00020919 	.word	0x00020919

00020260 <get_eit_entry>:
   20260:	b530      	push	{r4, r5, lr}
   20262:	4b22      	ldr	r3, [pc, #136]	; (202ec <get_eit_entry+0x8c>)
   20264:	b083      	sub	sp, #12
   20266:	4604      	mov	r4, r0
   20268:	1e8d      	subs	r5, r1, #2
   2026a:	b343      	cbz	r3, 202be <get_eit_entry+0x5e>
   2026c:	a901      	add	r1, sp, #4
   2026e:	4628      	mov	r0, r5
   20270:	f3af 8000 	nop.w
   20274:	b1f0      	cbz	r0, 202b4 <get_eit_entry+0x54>
   20276:	9901      	ldr	r1, [sp, #4]
   20278:	462a      	mov	r2, r5
   2027a:	f7ff ffaf 	bl	201dc <search_EIT_table>
   2027e:	4601      	mov	r1, r0
   20280:	b1c0      	cbz	r0, 202b4 <get_eit_entry+0x54>
   20282:	f7ff ffa1 	bl	201c8 <selfrel_offset31>
   20286:	684b      	ldr	r3, [r1, #4]
   20288:	64a0      	str	r0, [r4, #72]	; 0x48
   2028a:	2b01      	cmp	r3, #1
   2028c:	d02b      	beq.n	202e6 <get_eit_entry+0x86>
   2028e:	2b00      	cmp	r3, #0
   20290:	f101 0004 	add.w	r0, r1, #4
   20294:	db25      	blt.n	202e2 <get_eit_entry+0x82>
   20296:	f7ff ff97 	bl	201c8 <selfrel_offset31>
   2029a:	2300      	movs	r3, #0
   2029c:	6523      	str	r3, [r4, #80]	; 0x50
   2029e:	6803      	ldr	r3, [r0, #0]
   202a0:	64e0      	str	r0, [r4, #76]	; 0x4c
   202a2:	2b00      	cmp	r3, #0
   202a4:	db12      	blt.n	202cc <get_eit_entry+0x6c>
   202a6:	f7ff ff8f 	bl	201c8 <selfrel_offset31>
   202aa:	4603      	mov	r3, r0
   202ac:	2000      	movs	r0, #0
   202ae:	6123      	str	r3, [r4, #16]
   202b0:	b003      	add	sp, #12
   202b2:	bd30      	pop	{r4, r5, pc}
   202b4:	2300      	movs	r3, #0
   202b6:	2009      	movs	r0, #9
   202b8:	6123      	str	r3, [r4, #16]
   202ba:	b003      	add	sp, #12
   202bc:	bd30      	pop	{r4, r5, pc}
   202be:	4b0c      	ldr	r3, [pc, #48]	; (202f0 <get_eit_entry+0x90>)
   202c0:	490c      	ldr	r1, [pc, #48]	; (202f4 <get_eit_entry+0x94>)
   202c2:	1ac9      	subs	r1, r1, r3
   202c4:	10c9      	asrs	r1, r1, #3
   202c6:	4618      	mov	r0, r3
   202c8:	9101      	str	r1, [sp, #4]
   202ca:	e7d5      	b.n	20278 <get_eit_entry+0x18>
   202cc:	f3c3 6003 	ubfx	r0, r3, #24, #4
   202d0:	f7ff ffb2 	bl	20238 <__gnu_unwind_get_pr_addr>
   202d4:	1e03      	subs	r3, r0, #0
   202d6:	bf0c      	ite	eq
   202d8:	2009      	moveq	r0, #9
   202da:	2000      	movne	r0, #0
   202dc:	6123      	str	r3, [r4, #16]
   202de:	b003      	add	sp, #12
   202e0:	bd30      	pop	{r4, r5, pc}
   202e2:	2301      	movs	r3, #1
   202e4:	e7da      	b.n	2029c <get_eit_entry+0x3c>
   202e6:	2300      	movs	r3, #0
   202e8:	2005      	movs	r0, #5
   202ea:	e7e0      	b.n	202ae <get_eit_entry+0x4e>
   202ec:	00000000 	.word	0x00000000
   202f0:	00027cb4 	.word	0x00027cb4
   202f4:	00027fa8 	.word	0x00027fa8

000202f8 <restore_non_core_regs>:
   202f8:	6803      	ldr	r3, [r0, #0]
   202fa:	07da      	lsls	r2, r3, #31
   202fc:	b510      	push	{r4, lr}
   202fe:	4604      	mov	r4, r0
   20300:	d406      	bmi.n	20310 <restore_non_core_regs+0x18>
   20302:	079b      	lsls	r3, r3, #30
   20304:	f100 0048 	add.w	r0, r0, #72	; 0x48
   20308:	d509      	bpl.n	2031e <restore_non_core_regs+0x26>
   2030a:	f000 fc75 	bl	20bf8 <__gnu_Unwind_Restore_VFP_D>
   2030e:	6823      	ldr	r3, [r4, #0]
   20310:	0759      	lsls	r1, r3, #29
   20312:	d509      	bpl.n	20328 <restore_non_core_regs+0x30>
   20314:	071a      	lsls	r2, r3, #28
   20316:	d50e      	bpl.n	20336 <restore_non_core_regs+0x3e>
   20318:	06db      	lsls	r3, r3, #27
   2031a:	d513      	bpl.n	20344 <restore_non_core_regs+0x4c>
   2031c:	bd10      	pop	{r4, pc}
   2031e:	f000 fc63 	bl	20be8 <__gnu_Unwind_Restore_VFP>
   20322:	6823      	ldr	r3, [r4, #0]
   20324:	0759      	lsls	r1, r3, #29
   20326:	d4f5      	bmi.n	20314 <restore_non_core_regs+0x1c>
   20328:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
   2032c:	f000 fc6c 	bl	20c08 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   20330:	6823      	ldr	r3, [r4, #0]
   20332:	071a      	lsls	r2, r3, #28
   20334:	d4f0      	bmi.n	20318 <restore_non_core_regs+0x20>
   20336:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2033a:	f000 fc6d 	bl	20c18 <__gnu_Unwind_Restore_WMMXD>
   2033e:	6823      	ldr	r3, [r4, #0]
   20340:	06db      	lsls	r3, r3, #27
   20342:	d4eb      	bmi.n	2031c <restore_non_core_regs+0x24>
   20344:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
   20348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2034c:	f000 bca8 	b.w	20ca0 <__gnu_Unwind_Restore_WMMXC>

00020350 <_Unwind_decode_typeinfo_ptr.constprop.0>:
   20350:	4603      	mov	r3, r0
   20352:	6800      	ldr	r0, [r0, #0]
   20354:	b100      	cbz	r0, 20358 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
   20356:	4418      	add	r0, r3
   20358:	4770      	bx	lr
   2035a:	bf00      	nop

0002035c <_Unwind_DebugHook>:
   2035c:	4770      	bx	lr
   2035e:	bf00      	nop

00020360 <unwind_phase2>:
   20360:	b570      	push	{r4, r5, r6, lr}
   20362:	4604      	mov	r4, r0
   20364:	460e      	mov	r6, r1
   20366:	6c31      	ldr	r1, [r6, #64]	; 0x40
   20368:	4620      	mov	r0, r4
   2036a:	f7ff ff79 	bl	20260 <get_eit_entry>
   2036e:	4605      	mov	r5, r0
   20370:	b988      	cbnz	r0, 20396 <unwind_phase2+0x36>
   20372:	6c32      	ldr	r2, [r6, #64]	; 0x40
   20374:	6162      	str	r2, [r4, #20]
   20376:	6923      	ldr	r3, [r4, #16]
   20378:	4632      	mov	r2, r6
   2037a:	4621      	mov	r1, r4
   2037c:	2001      	movs	r0, #1
   2037e:	4798      	blx	r3
   20380:	2808      	cmp	r0, #8
   20382:	d0f0      	beq.n	20366 <unwind_phase2+0x6>
   20384:	2807      	cmp	r0, #7
   20386:	d106      	bne.n	20396 <unwind_phase2+0x36>
   20388:	4628      	mov	r0, r5
   2038a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   2038c:	f7ff ffe6 	bl	2035c <_Unwind_DebugHook>
   20390:	1d30      	adds	r0, r6, #4
   20392:	f000 fc1d 	bl	20bd0 <__restore_core_regs>
   20396:	f7f6 fd35 	bl	16e04 <abort>
   2039a:	bf00      	nop

0002039c <unwind_phase2_forced>:
   2039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   203a0:	1d0d      	adds	r5, r1, #4
   203a2:	f8d0 800c 	ldr.w	r8, [r0, #12]
   203a6:	f8d0 9018 	ldr.w	r9, [r0, #24]
   203aa:	4607      	mov	r7, r0
   203ac:	4614      	mov	r4, r2
   203ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   203b0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
   203b4:	f10d 0c0c 	add.w	ip, sp, #12
   203b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   203bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   203be:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   203c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   203c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   203c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   203cc:	ae02      	add	r6, sp, #8
   203ce:	f04f 0e00 	mov.w	lr, #0
   203d2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
   203d6:	f8c6 e000 	str.w	lr, [r6]
   203da:	e020      	b.n	2041e <unwind_phase2_forced+0x82>
   203dc:	6c33      	ldr	r3, [r6, #64]	; 0x40
   203de:	617b      	str	r3, [r7, #20]
   203e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   203e4:	4631      	mov	r1, r6
   203e6:	a87a      	add	r0, sp, #488	; 0x1e8
   203e8:	f7f6 f8d8 	bl	1659c <memcpy>
   203ec:	693b      	ldr	r3, [r7, #16]
   203ee:	aa7a      	add	r2, sp, #488	; 0x1e8
   203f0:	4639      	mov	r1, r7
   203f2:	4650      	mov	r0, sl
   203f4:	4798      	blx	r3
   203f6:	9b88      	ldr	r3, [sp, #544]	; 0x220
   203f8:	6473      	str	r3, [r6, #68]	; 0x44
   203fa:	4621      	mov	r1, r4
   203fc:	e9cd 6900 	strd	r6, r9, [sp]
   20400:	4605      	mov	r5, r0
   20402:	463b      	mov	r3, r7
   20404:	463a      	mov	r2, r7
   20406:	2001      	movs	r0, #1
   20408:	47c0      	blx	r8
   2040a:	4604      	mov	r4, r0
   2040c:	b9e0      	cbnz	r0, 20448 <unwind_phase2_forced+0xac>
   2040e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   20412:	a97a      	add	r1, sp, #488	; 0x1e8
   20414:	4630      	mov	r0, r6
   20416:	f7f6 f8c1 	bl	1659c <memcpy>
   2041a:	2d08      	cmp	r5, #8
   2041c:	d11a      	bne.n	20454 <unwind_phase2_forced+0xb8>
   2041e:	6c31      	ldr	r1, [r6, #64]	; 0x40
   20420:	4638      	mov	r0, r7
   20422:	f7ff ff1d 	bl	20260 <get_eit_entry>
   20426:	3409      	adds	r4, #9
   20428:	fa5f fa84 	uxtb.w	sl, r4
   2042c:	4605      	mov	r5, r0
   2042e:	2800      	cmp	r0, #0
   20430:	d0d4      	beq.n	203dc <unwind_phase2_forced+0x40>
   20432:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   20434:	6473      	str	r3, [r6, #68]	; 0x44
   20436:	463a      	mov	r2, r7
   20438:	e9cd 6900 	strd	r6, r9, [sp]
   2043c:	463b      	mov	r3, r7
   2043e:	f04a 0110 	orr.w	r1, sl, #16
   20442:	2001      	movs	r0, #1
   20444:	47c0      	blx	r8
   20446:	b100      	cbz	r0, 2044a <unwind_phase2_forced+0xae>
   20448:	2509      	movs	r5, #9
   2044a:	4628      	mov	r0, r5
   2044c:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
   20450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20454:	2d07      	cmp	r5, #7
   20456:	d1f7      	bne.n	20448 <unwind_phase2_forced+0xac>
   20458:	4620      	mov	r0, r4
   2045a:	6c31      	ldr	r1, [r6, #64]	; 0x40
   2045c:	f7ff ff7e 	bl	2035c <_Unwind_DebugHook>
   20460:	a803      	add	r0, sp, #12
   20462:	f000 fbb5 	bl	20bd0 <__restore_core_regs>
   20466:	bf00      	nop

00020468 <__gnu_Unwind_RaiseException>:
   20468:	b5f0      	push	{r4, r5, r6, r7, lr}
   2046a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   2046c:	640b      	str	r3, [r1, #64]	; 0x40
   2046e:	f101 0c04 	add.w	ip, r1, #4
   20472:	460e      	mov	r6, r1
   20474:	4605      	mov	r5, r0
   20476:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2047a:	b0f9      	sub	sp, #484	; 0x1e4
   2047c:	ac01      	add	r4, sp, #4
   2047e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20480:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20484:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   20486:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   2048a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   2048c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   20490:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   20494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   20498:	9700      	str	r7, [sp, #0]
   2049a:	e006      	b.n	204aa <__gnu_Unwind_RaiseException+0x42>
   2049c:	692b      	ldr	r3, [r5, #16]
   2049e:	466a      	mov	r2, sp
   204a0:	4629      	mov	r1, r5
   204a2:	4798      	blx	r3
   204a4:	2808      	cmp	r0, #8
   204a6:	4604      	mov	r4, r0
   204a8:	d108      	bne.n	204bc <__gnu_Unwind_RaiseException+0x54>
   204aa:	9910      	ldr	r1, [sp, #64]	; 0x40
   204ac:	4628      	mov	r0, r5
   204ae:	f7ff fed7 	bl	20260 <get_eit_entry>
   204b2:	2800      	cmp	r0, #0
   204b4:	d0f2      	beq.n	2049c <__gnu_Unwind_RaiseException+0x34>
   204b6:	2009      	movs	r0, #9
   204b8:	b079      	add	sp, #484	; 0x1e4
   204ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   204bc:	4668      	mov	r0, sp
   204be:	f7ff ff1b 	bl	202f8 <restore_non_core_regs>
   204c2:	2c06      	cmp	r4, #6
   204c4:	d1f7      	bne.n	204b6 <__gnu_Unwind_RaiseException+0x4e>
   204c6:	4631      	mov	r1, r6
   204c8:	4628      	mov	r0, r5
   204ca:	f7ff ff49 	bl	20360 <unwind_phase2>
   204ce:	bf00      	nop

000204d0 <__gnu_Unwind_ForcedUnwind>:
   204d0:	60c1      	str	r1, [r0, #12]
   204d2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   204d4:	6182      	str	r2, [r0, #24]
   204d6:	6419      	str	r1, [r3, #64]	; 0x40
   204d8:	2200      	movs	r2, #0
   204da:	4619      	mov	r1, r3
   204dc:	f7ff bf5e 	b.w	2039c <unwind_phase2_forced>

000204e0 <__gnu_Unwind_Resume>:
   204e0:	b570      	push	{r4, r5, r6, lr}
   204e2:	68c6      	ldr	r6, [r0, #12]
   204e4:	6943      	ldr	r3, [r0, #20]
   204e6:	640b      	str	r3, [r1, #64]	; 0x40
   204e8:	b9ae      	cbnz	r6, 20516 <__gnu_Unwind_Resume+0x36>
   204ea:	6903      	ldr	r3, [r0, #16]
   204ec:	460a      	mov	r2, r1
   204ee:	4604      	mov	r4, r0
   204f0:	460d      	mov	r5, r1
   204f2:	4601      	mov	r1, r0
   204f4:	2002      	movs	r0, #2
   204f6:	4798      	blx	r3
   204f8:	2807      	cmp	r0, #7
   204fa:	d005      	beq.n	20508 <__gnu_Unwind_Resume+0x28>
   204fc:	2808      	cmp	r0, #8
   204fe:	d10f      	bne.n	20520 <__gnu_Unwind_Resume+0x40>
   20500:	4629      	mov	r1, r5
   20502:	4620      	mov	r0, r4
   20504:	f7ff ff2c 	bl	20360 <unwind_phase2>
   20508:	4630      	mov	r0, r6
   2050a:	6c29      	ldr	r1, [r5, #64]	; 0x40
   2050c:	f7ff ff26 	bl	2035c <_Unwind_DebugHook>
   20510:	1d28      	adds	r0, r5, #4
   20512:	f000 fb5d 	bl	20bd0 <__restore_core_regs>
   20516:	2201      	movs	r2, #1
   20518:	f7ff ff40 	bl	2039c <unwind_phase2_forced>
   2051c:	f7f6 fc72 	bl	16e04 <abort>
   20520:	f7f6 fc70 	bl	16e04 <abort>

00020524 <__gnu_Unwind_Resume_or_Rethrow>:
   20524:	68c2      	ldr	r2, [r0, #12]
   20526:	b122      	cbz	r2, 20532 <__gnu_Unwind_Resume_or_Rethrow+0xe>
   20528:	6bca      	ldr	r2, [r1, #60]	; 0x3c
   2052a:	640a      	str	r2, [r1, #64]	; 0x40
   2052c:	2200      	movs	r2, #0
   2052e:	f7ff bf35 	b.w	2039c <unwind_phase2_forced>
   20532:	f7ff bf99 	b.w	20468 <__gnu_Unwind_RaiseException>
   20536:	bf00      	nop

00020538 <_Unwind_Complete>:
   20538:	4770      	bx	lr
   2053a:	bf00      	nop

0002053c <_Unwind_DeleteException>:
   2053c:	6883      	ldr	r3, [r0, #8]
   2053e:	4601      	mov	r1, r0
   20540:	b10b      	cbz	r3, 20546 <_Unwind_DeleteException+0xa>
   20542:	2001      	movs	r0, #1
   20544:	4718      	bx	r3
   20546:	4770      	bx	lr

00020548 <_Unwind_VRS_Get>:
   20548:	2901      	cmp	r1, #1
   2054a:	d012      	beq.n	20572 <_Unwind_VRS_Get+0x2a>
   2054c:	d809      	bhi.n	20562 <_Unwind_VRS_Get+0x1a>
   2054e:	b973      	cbnz	r3, 2056e <_Unwind_VRS_Get+0x26>
   20550:	2a0f      	cmp	r2, #15
   20552:	d80c      	bhi.n	2056e <_Unwind_VRS_Get+0x26>
   20554:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   20558:	4618      	mov	r0, r3
   2055a:	6853      	ldr	r3, [r2, #4]
   2055c:	9a00      	ldr	r2, [sp, #0]
   2055e:	6013      	str	r3, [r2, #0]
   20560:	4770      	bx	lr
   20562:	3903      	subs	r1, #3
   20564:	2901      	cmp	r1, #1
   20566:	bf94      	ite	ls
   20568:	2001      	movls	r0, #1
   2056a:	2002      	movhi	r0, #2
   2056c:	4770      	bx	lr
   2056e:	2002      	movs	r0, #2
   20570:	4770      	bx	lr
   20572:	4608      	mov	r0, r1
   20574:	4770      	bx	lr
   20576:	bf00      	nop

00020578 <_Unwind_GetGR>:
   20578:	b500      	push	{lr}
   2057a:	b085      	sub	sp, #20
   2057c:	460a      	mov	r2, r1
   2057e:	2300      	movs	r3, #0
   20580:	a903      	add	r1, sp, #12
   20582:	9100      	str	r1, [sp, #0]
   20584:	4619      	mov	r1, r3
   20586:	f7ff ffdf 	bl	20548 <_Unwind_VRS_Get>
   2058a:	9803      	ldr	r0, [sp, #12]
   2058c:	b005      	add	sp, #20
   2058e:	f85d fb04 	ldr.w	pc, [sp], #4
   20592:	bf00      	nop

00020594 <_Unwind_VRS_Set>:
   20594:	2901      	cmp	r1, #1
   20596:	d012      	beq.n	205be <_Unwind_VRS_Set+0x2a>
   20598:	d809      	bhi.n	205ae <_Unwind_VRS_Set+0x1a>
   2059a:	b973      	cbnz	r3, 205ba <_Unwind_VRS_Set+0x26>
   2059c:	2a0f      	cmp	r2, #15
   2059e:	d80c      	bhi.n	205ba <_Unwind_VRS_Set+0x26>
   205a0:	9900      	ldr	r1, [sp, #0]
   205a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   205a6:	6809      	ldr	r1, [r1, #0]
   205a8:	6051      	str	r1, [r2, #4]
   205aa:	4618      	mov	r0, r3
   205ac:	4770      	bx	lr
   205ae:	3903      	subs	r1, #3
   205b0:	2901      	cmp	r1, #1
   205b2:	bf94      	ite	ls
   205b4:	2001      	movls	r0, #1
   205b6:	2002      	movhi	r0, #2
   205b8:	4770      	bx	lr
   205ba:	2002      	movs	r0, #2
   205bc:	4770      	bx	lr
   205be:	4608      	mov	r0, r1
   205c0:	4770      	bx	lr
   205c2:	bf00      	nop

000205c4 <_Unwind_SetGR>:
   205c4:	b510      	push	{r4, lr}
   205c6:	b084      	sub	sp, #16
   205c8:	2300      	movs	r3, #0
   205ca:	ac03      	add	r4, sp, #12
   205cc:	9203      	str	r2, [sp, #12]
   205ce:	9400      	str	r4, [sp, #0]
   205d0:	460a      	mov	r2, r1
   205d2:	4619      	mov	r1, r3
   205d4:	f7ff ffde 	bl	20594 <_Unwind_VRS_Set>
   205d8:	b004      	add	sp, #16
   205da:	bd10      	pop	{r4, pc}

000205dc <__gnu_Unwind_Backtrace>:
   205dc:	b570      	push	{r4, r5, r6, lr}
   205de:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   205e0:	6413      	str	r3, [r2, #64]	; 0x40
   205e2:	f102 0c04 	add.w	ip, r2, #4
   205e6:	4605      	mov	r5, r0
   205e8:	460c      	mov	r4, r1
   205ea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   205ee:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
   205f2:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
   205f6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   205fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   205fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   20602:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   20606:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   2060a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
   2060e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   20612:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
   20616:	9616      	str	r6, [sp, #88]	; 0x58
   20618:	e010      	b.n	2063c <__gnu_Unwind_Backtrace+0x60>
   2061a:	f7ff ffd3 	bl	205c4 <_Unwind_SetGR>
   2061e:	4621      	mov	r1, r4
   20620:	a816      	add	r0, sp, #88	; 0x58
   20622:	47a8      	blx	r5
   20624:	4603      	mov	r3, r0
   20626:	aa16      	add	r2, sp, #88	; 0x58
   20628:	4669      	mov	r1, sp
   2062a:	2008      	movs	r0, #8
   2062c:	b983      	cbnz	r3, 20650 <__gnu_Unwind_Backtrace+0x74>
   2062e:	9b04      	ldr	r3, [sp, #16]
   20630:	4798      	blx	r3
   20632:	2805      	cmp	r0, #5
   20634:	4606      	mov	r6, r0
   20636:	d00c      	beq.n	20652 <__gnu_Unwind_Backtrace+0x76>
   20638:	2809      	cmp	r0, #9
   2063a:	d009      	beq.n	20650 <__gnu_Unwind_Backtrace+0x74>
   2063c:	9926      	ldr	r1, [sp, #152]	; 0x98
   2063e:	4668      	mov	r0, sp
   20640:	f7ff fe0e 	bl	20260 <get_eit_entry>
   20644:	4603      	mov	r3, r0
   20646:	466a      	mov	r2, sp
   20648:	210c      	movs	r1, #12
   2064a:	a816      	add	r0, sp, #88	; 0x58
   2064c:	2b00      	cmp	r3, #0
   2064e:	d0e4      	beq.n	2061a <__gnu_Unwind_Backtrace+0x3e>
   20650:	2609      	movs	r6, #9
   20652:	a816      	add	r0, sp, #88	; 0x58
   20654:	f7ff fe50 	bl	202f8 <restore_non_core_regs>
   20658:	4630      	mov	r0, r6
   2065a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
   2065e:	bd70      	pop	{r4, r5, r6, pc}

00020660 <__gnu_unwind_pr_common>:
   20660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20664:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
   20666:	b089      	sub	sp, #36	; 0x24
   20668:	461e      	mov	r6, r3
   2066a:	f854 3b04 	ldr.w	r3, [r4], #4
   2066e:	9406      	str	r4, [sp, #24]
   20670:	460d      	mov	r5, r1
   20672:	4617      	mov	r7, r2
   20674:	f000 0803 	and.w	r8, r0, #3
   20678:	2e00      	cmp	r6, #0
   2067a:	d079      	beq.n	20770 <__gnu_unwind_pr_common+0x110>
   2067c:	0c1a      	lsrs	r2, r3, #16
   2067e:	f88d 201d 	strb.w	r2, [sp, #29]
   20682:	041b      	lsls	r3, r3, #16
   20684:	b2d2      	uxtb	r2, r2
   20686:	9305      	str	r3, [sp, #20]
   20688:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   2068c:	2302      	movs	r3, #2
   2068e:	f88d 301c 	strb.w	r3, [sp, #28]
   20692:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   20694:	f1b8 0f02 	cmp.w	r8, #2
   20698:	bf08      	it	eq
   2069a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
   2069c:	f013 0301 	ands.w	r3, r3, #1
   206a0:	d00c      	beq.n	206bc <__gnu_unwind_pr_common+0x5c>
   206a2:	a905      	add	r1, sp, #20
   206a4:	4638      	mov	r0, r7
   206a6:	f000 fb95 	bl	20dd4 <__gnu_unwind_execute>
   206aa:	b918      	cbnz	r0, 206b4 <__gnu_unwind_pr_common+0x54>
   206ac:	2008      	movs	r0, #8
   206ae:	b009      	add	sp, #36	; 0x24
   206b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206b4:	2009      	movs	r0, #9
   206b6:	b009      	add	sp, #36	; 0x24
   206b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206bc:	f8d4 a000 	ldr.w	sl, [r4]
   206c0:	f1ba 0f00 	cmp.w	sl, #0
   206c4:	d0ed      	beq.n	206a2 <__gnu_unwind_pr_common+0x42>
   206c6:	9301      	str	r3, [sp, #4]
   206c8:	f000 0308 	and.w	r3, r0, #8
   206cc:	9302      	str	r3, [sp, #8]
   206ce:	2e02      	cmp	r6, #2
   206d0:	d04a      	beq.n	20768 <__gnu_unwind_pr_common+0x108>
   206d2:	f8b4 a000 	ldrh.w	sl, [r4]
   206d6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
   206da:	3404      	adds	r4, #4
   206dc:	6cab      	ldr	r3, [r5, #72]	; 0x48
   206de:	f029 0b01 	bic.w	fp, r9, #1
   206e2:	210f      	movs	r1, #15
   206e4:	4638      	mov	r0, r7
   206e6:	449b      	add	fp, r3
   206e8:	f7ff ff46 	bl	20578 <_Unwind_GetGR>
   206ec:	4583      	cmp	fp, r0
   206ee:	d839      	bhi.n	20764 <__gnu_unwind_pr_common+0x104>
   206f0:	f02a 0201 	bic.w	r2, sl, #1
   206f4:	445a      	add	r2, fp
   206f6:	4282      	cmp	r2, r0
   206f8:	bf94      	ite	ls
   206fa:	2200      	movls	r2, #0
   206fc:	2201      	movhi	r2, #1
   206fe:	ea4f 0349 	mov.w	r3, r9, lsl #1
   20702:	f003 0302 	and.w	r3, r3, #2
   20706:	f00a 0a01 	and.w	sl, sl, #1
   2070a:	ea43 030a 	orr.w	r3, r3, sl
   2070e:	2b01      	cmp	r3, #1
   20710:	d04b      	beq.n	207aa <__gnu_unwind_pr_common+0x14a>
   20712:	2b02      	cmp	r3, #2
   20714:	d032      	beq.n	2077c <__gnu_unwind_pr_common+0x11c>
   20716:	2b00      	cmp	r3, #0
   20718:	d1cc      	bne.n	206b4 <__gnu_unwind_pr_common+0x54>
   2071a:	f1b8 0f00 	cmp.w	r8, #0
   2071e:	d002      	beq.n	20726 <__gnu_unwind_pr_common+0xc6>
   20720:	2a00      	cmp	r2, #0
   20722:	f040 80cd 	bne.w	208c0 <__gnu_unwind_pr_common+0x260>
   20726:	3404      	adds	r4, #4
   20728:	f8d4 a000 	ldr.w	sl, [r4]
   2072c:	f1ba 0f00 	cmp.w	sl, #0
   20730:	d1cd      	bne.n	206ce <__gnu_unwind_pr_common+0x6e>
   20732:	a905      	add	r1, sp, #20
   20734:	4638      	mov	r0, r7
   20736:	f000 fb4d 	bl	20dd4 <__gnu_unwind_execute>
   2073a:	2800      	cmp	r0, #0
   2073c:	d1ba      	bne.n	206b4 <__gnu_unwind_pr_common+0x54>
   2073e:	9b01      	ldr	r3, [sp, #4]
   20740:	2b00      	cmp	r3, #0
   20742:	d0b3      	beq.n	206ac <__gnu_unwind_pr_common+0x4c>
   20744:	210f      	movs	r1, #15
   20746:	4638      	mov	r0, r7
   20748:	f7ff ff16 	bl	20578 <_Unwind_GetGR>
   2074c:	210e      	movs	r1, #14
   2074e:	4602      	mov	r2, r0
   20750:	4638      	mov	r0, r7
   20752:	f7ff ff37 	bl	205c4 <_Unwind_SetGR>
   20756:	4638      	mov	r0, r7
   20758:	4a6a      	ldr	r2, [pc, #424]	; (20904 <__gnu_unwind_pr_common+0x2a4>)
   2075a:	210f      	movs	r1, #15
   2075c:	f7ff ff32 	bl	205c4 <_Unwind_SetGR>
   20760:	2007      	movs	r0, #7
   20762:	e7a8      	b.n	206b6 <__gnu_unwind_pr_common+0x56>
   20764:	2200      	movs	r2, #0
   20766:	e7ca      	b.n	206fe <__gnu_unwind_pr_common+0x9e>
   20768:	f8d4 9004 	ldr.w	r9, [r4, #4]
   2076c:	3408      	adds	r4, #8
   2076e:	e7b5      	b.n	206dc <__gnu_unwind_pr_common+0x7c>
   20770:	021b      	lsls	r3, r3, #8
   20772:	9305      	str	r3, [sp, #20]
   20774:	f88d 601d 	strb.w	r6, [sp, #29]
   20778:	2303      	movs	r3, #3
   2077a:	e788      	b.n	2068e <__gnu_unwind_pr_common+0x2e>
   2077c:	f8d4 9000 	ldr.w	r9, [r4]
   20780:	f029 4b00 	bic.w	fp, r9, #2147483648	; 0x80000000
   20784:	f1b8 0f00 	cmp.w	r8, #0
   20788:	d146      	bne.n	20818 <__gnu_unwind_pr_common+0x1b8>
   2078a:	b12a      	cbz	r2, 20798 <__gnu_unwind_pr_common+0x138>
   2078c:	9b02      	ldr	r3, [sp, #8]
   2078e:	2b00      	cmp	r3, #0
   20790:	d05b      	beq.n	2084a <__gnu_unwind_pr_common+0x1ea>
   20792:	f1bb 0f00 	cmp.w	fp, #0
   20796:	d073      	beq.n	20880 <__gnu_unwind_pr_common+0x220>
   20798:	f1b9 0f00 	cmp.w	r9, #0
   2079c:	da00      	bge.n	207a0 <__gnu_unwind_pr_common+0x140>
   2079e:	3404      	adds	r4, #4
   207a0:	f10b 0b01 	add.w	fp, fp, #1
   207a4:	eb04 048b 	add.w	r4, r4, fp, lsl #2
   207a8:	e7be      	b.n	20728 <__gnu_unwind_pr_common+0xc8>
   207aa:	f1b8 0f00 	cmp.w	r8, #0
   207ae:	d119      	bne.n	207e4 <__gnu_unwind_pr_common+0x184>
   207b0:	b1b2      	cbz	r2, 207e0 <__gnu_unwind_pr_common+0x180>
   207b2:	6861      	ldr	r1, [r4, #4]
   207b4:	6822      	ldr	r2, [r4, #0]
   207b6:	1c88      	adds	r0, r1, #2
   207b8:	ea4f 72d2 	mov.w	r2, r2, lsr #31
   207bc:	f43f af7a 	beq.w	206b4 <__gnu_unwind_pr_common+0x54>
   207c0:	f105 0358 	add.w	r3, r5, #88	; 0x58
   207c4:	3101      	adds	r1, #1
   207c6:	9304      	str	r3, [sp, #16]
   207c8:	f000 808e 	beq.w	208e8 <__gnu_unwind_pr_common+0x288>
   207cc:	1d20      	adds	r0, r4, #4
   207ce:	f7ff fdbf 	bl	20350 <_Unwind_decode_typeinfo_ptr.constprop.0>
   207d2:	ab04      	add	r3, sp, #16
   207d4:	4601      	mov	r1, r0
   207d6:	4628      	mov	r0, r5
   207d8:	f7f8 fafe 	bl	18dd8 <__cxa_type_match>
   207dc:	2800      	cmp	r0, #0
   207de:	d159      	bne.n	20894 <__gnu_unwind_pr_common+0x234>
   207e0:	3408      	adds	r4, #8
   207e2:	e7a1      	b.n	20728 <__gnu_unwind_pr_common+0xc8>
   207e4:	210d      	movs	r1, #13
   207e6:	4638      	mov	r0, r7
   207e8:	f8d5 9020 	ldr.w	r9, [r5, #32]
   207ec:	f7ff fec4 	bl	20578 <_Unwind_GetGR>
   207f0:	4581      	cmp	r9, r0
   207f2:	d1f5      	bne.n	207e0 <__gnu_unwind_pr_common+0x180>
   207f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
   207f6:	429c      	cmp	r4, r3
   207f8:	d1f2      	bne.n	207e0 <__gnu_unwind_pr_common+0x180>
   207fa:	4620      	mov	r0, r4
   207fc:	f7ff fce4 	bl	201c8 <selfrel_offset31>
   20800:	210f      	movs	r1, #15
   20802:	4602      	mov	r2, r0
   20804:	4638      	mov	r0, r7
   20806:	f7ff fedd 	bl	205c4 <_Unwind_SetGR>
   2080a:	4638      	mov	r0, r7
   2080c:	462a      	mov	r2, r5
   2080e:	2100      	movs	r1, #0
   20810:	f7ff fed8 	bl	205c4 <_Unwind_SetGR>
   20814:	2007      	movs	r0, #7
   20816:	e74e      	b.n	206b6 <__gnu_unwind_pr_common+0x56>
   20818:	210d      	movs	r1, #13
   2081a:	4638      	mov	r0, r7
   2081c:	f8d5 a020 	ldr.w	sl, [r5, #32]
   20820:	f7ff feaa 	bl	20578 <_Unwind_GetGR>
   20824:	4582      	cmp	sl, r0
   20826:	d1b7      	bne.n	20798 <__gnu_unwind_pr_common+0x138>
   20828:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2082a:	429c      	cmp	r4, r3
   2082c:	d1b4      	bne.n	20798 <__gnu_unwind_pr_common+0x138>
   2082e:	2304      	movs	r3, #4
   20830:	2200      	movs	r2, #0
   20832:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
   20836:	18e3      	adds	r3, r4, r3
   20838:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
   2083c:	636b      	str	r3, [r5, #52]	; 0x34
   2083e:	6823      	ldr	r3, [r4, #0]
   20840:	2b00      	cmp	r3, #0
   20842:	db59      	blt.n	208f8 <__gnu_unwind_pr_common+0x298>
   20844:	2301      	movs	r3, #1
   20846:	9301      	str	r3, [sp, #4]
   20848:	e7aa      	b.n	207a0 <__gnu_unwind_pr_common+0x140>
   2084a:	4699      	mov	r9, r3
   2084c:	f105 0358 	add.w	r3, r5, #88	; 0x58
   20850:	f8cd 800c 	str.w	r8, [sp, #12]
   20854:	f104 0a04 	add.w	sl, r4, #4
   20858:	46b0      	mov	r8, r6
   2085a:	461e      	mov	r6, r3
   2085c:	e00e      	b.n	2087c <__gnu_unwind_pr_common+0x21c>
   2085e:	4650      	mov	r0, sl
   20860:	9604      	str	r6, [sp, #16]
   20862:	f7ff fd75 	bl	20350 <_Unwind_decode_typeinfo_ptr.constprop.0>
   20866:	2200      	movs	r2, #0
   20868:	4601      	mov	r1, r0
   2086a:	ab04      	add	r3, sp, #16
   2086c:	4628      	mov	r0, r5
   2086e:	f109 0901 	add.w	r9, r9, #1
   20872:	f10a 0a04 	add.w	sl, sl, #4
   20876:	f7f8 faaf 	bl	18dd8 <__cxa_type_match>
   2087a:	b9d8      	cbnz	r0, 208b4 <__gnu_unwind_pr_common+0x254>
   2087c:	45d9      	cmp	r9, fp
   2087e:	d1ee      	bne.n	2085e <__gnu_unwind_pr_common+0x1fe>
   20880:	210d      	movs	r1, #13
   20882:	4638      	mov	r0, r7
   20884:	f7ff fe78 	bl	20578 <_Unwind_GetGR>
   20888:	9b04      	ldr	r3, [sp, #16]
   2088a:	6228      	str	r0, [r5, #32]
   2088c:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
   20890:	2006      	movs	r0, #6
   20892:	e710      	b.n	206b6 <__gnu_unwind_pr_common+0x56>
   20894:	4681      	mov	r9, r0
   20896:	210d      	movs	r1, #13
   20898:	4638      	mov	r0, r7
   2089a:	f7ff fe6d 	bl	20578 <_Unwind_GetGR>
   2089e:	f1b9 0f02 	cmp.w	r9, #2
   208a2:	bf04      	itt	eq
   208a4:	462b      	moveq	r3, r5
   208a6:	9a04      	ldreq	r2, [sp, #16]
   208a8:	6228      	str	r0, [r5, #32]
   208aa:	bf14      	ite	ne
   208ac:	9b04      	ldrne	r3, [sp, #16]
   208ae:	f843 2f2c 	streq.w	r2, [r3, #44]!
   208b2:	e7eb      	b.n	2088c <__gnu_unwind_pr_common+0x22c>
   208b4:	4646      	mov	r6, r8
   208b6:	f8d4 9000 	ldr.w	r9, [r4]
   208ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
   208be:	e76b      	b.n	20798 <__gnu_unwind_pr_common+0x138>
   208c0:	4620      	mov	r0, r4
   208c2:	f7ff fc81 	bl	201c8 <selfrel_offset31>
   208c6:	3404      	adds	r4, #4
   208c8:	4602      	mov	r2, r0
   208ca:	63ac      	str	r4, [r5, #56]	; 0x38
   208cc:	4628      	mov	r0, r5
   208ce:	4614      	mov	r4, r2
   208d0:	f7f8 fada 	bl	18e88 <__cxa_begin_cleanup>
   208d4:	2800      	cmp	r0, #0
   208d6:	f43f aeed 	beq.w	206b4 <__gnu_unwind_pr_common+0x54>
   208da:	4638      	mov	r0, r7
   208dc:	4622      	mov	r2, r4
   208de:	210f      	movs	r1, #15
   208e0:	f7ff fe70 	bl	205c4 <_Unwind_SetGR>
   208e4:	2007      	movs	r0, #7
   208e6:	e6e6      	b.n	206b6 <__gnu_unwind_pr_common+0x56>
   208e8:	210d      	movs	r1, #13
   208ea:	4638      	mov	r0, r7
   208ec:	9301      	str	r3, [sp, #4]
   208ee:	f7ff fe43 	bl	20578 <_Unwind_GetGR>
   208f2:	9b01      	ldr	r3, [sp, #4]
   208f4:	6228      	str	r0, [r5, #32]
   208f6:	e7c9      	b.n	2088c <__gnu_unwind_pr_common+0x22c>
   208f8:	f10b 0001 	add.w	r0, fp, #1
   208fc:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   20900:	e77c      	b.n	207fc <__gnu_unwind_pr_common+0x19c>
   20902:	bf00      	nop
   20904:	0001fcc9 	.word	0x0001fcc9

00020908 <__aeabi_unwind_cpp_pr0>:
   20908:	2300      	movs	r3, #0
   2090a:	f7ff bea9 	b.w	20660 <__gnu_unwind_pr_common>
   2090e:	bf00      	nop

00020910 <__aeabi_unwind_cpp_pr1>:
   20910:	2301      	movs	r3, #1
   20912:	f7ff bea5 	b.w	20660 <__gnu_unwind_pr_common>
   20916:	bf00      	nop

00020918 <__aeabi_unwind_cpp_pr2>:
   20918:	2302      	movs	r3, #2
   2091a:	f7ff bea1 	b.w	20660 <__gnu_unwind_pr_common>
   2091e:	bf00      	nop

00020920 <_Unwind_VRS_Pop>:
   20920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20924:	4606      	mov	r6, r0
   20926:	b0c3      	sub	sp, #268	; 0x10c
   20928:	4691      	mov	r9, r2
   2092a:	461c      	mov	r4, r3
   2092c:	2904      	cmp	r1, #4
   2092e:	f200 809b 	bhi.w	20a68 <_Unwind_VRS_Pop+0x148>
   20932:	e8df f001 	tbb	[pc, r1]
   20936:	567b      	.short	0x567b
   20938:	2e99      	.short	0x2e99
   2093a:	03          	.byte	0x03
   2093b:	00          	.byte	0x00
   2093c:	2c00      	cmp	r4, #0
   2093e:	f040 8093 	bne.w	20a68 <_Unwind_VRS_Pop+0x148>
   20942:	2a10      	cmp	r2, #16
   20944:	f200 8090 	bhi.w	20a68 <_Unwind_VRS_Pop+0x148>
   20948:	6803      	ldr	r3, [r0, #0]
   2094a:	06dc      	lsls	r4, r3, #27
   2094c:	f100 80f3 	bmi.w	20b36 <_Unwind_VRS_Pop+0x216>
   20950:	af20      	add	r7, sp, #128	; 0x80
   20952:	4638      	mov	r0, r7
   20954:	f000 f9ae 	bl	20cb4 <__gnu_Unwind_Save_WMMXC>
   20958:	6bb4      	ldr	r4, [r6, #56]	; 0x38
   2095a:	4639      	mov	r1, r7
   2095c:	2300      	movs	r3, #0
   2095e:	f04f 0c01 	mov.w	ip, #1
   20962:	fa0c f203 	lsl.w	r2, ip, r3
   20966:	ea12 0f09 	tst.w	r2, r9
   2096a:	4620      	mov	r0, r4
   2096c:	f103 0301 	add.w	r3, r3, #1
   20970:	d003      	beq.n	2097a <_Unwind_VRS_Pop+0x5a>
   20972:	f850 2b04 	ldr.w	r2, [r0], #4
   20976:	600a      	str	r2, [r1, #0]
   20978:	4604      	mov	r4, r0
   2097a:	2b04      	cmp	r3, #4
   2097c:	f101 0104 	add.w	r1, r1, #4
   20980:	d1ef      	bne.n	20962 <_Unwind_VRS_Pop+0x42>
   20982:	4638      	mov	r0, r7
   20984:	63b4      	str	r4, [r6, #56]	; 0x38
   20986:	f000 f98b 	bl	20ca0 <__gnu_Unwind_Restore_WMMXC>
   2098a:	2000      	movs	r0, #0
   2098c:	b043      	add	sp, #268	; 0x10c
   2098e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20992:	2c03      	cmp	r4, #3
   20994:	d168      	bne.n	20a68 <_Unwind_VRS_Pop+0x148>
   20996:	b294      	uxth	r4, r2
   20998:	eb04 4312 	add.w	r3, r4, r2, lsr #16
   2099c:	2b10      	cmp	r3, #16
   2099e:	ea4f 4912 	mov.w	r9, r2, lsr #16
   209a2:	d861      	bhi.n	20a68 <_Unwind_VRS_Pop+0x148>
   209a4:	6803      	ldr	r3, [r0, #0]
   209a6:	071d      	lsls	r5, r3, #28
   209a8:	f100 80cd 	bmi.w	20b46 <_Unwind_VRS_Pop+0x226>
   209ac:	af20      	add	r7, sp, #128	; 0x80
   209ae:	4638      	mov	r0, r7
   209b0:	f000 f954 	bl	20c5c <__gnu_Unwind_Save_WMMXD>
   209b4:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   209b6:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
   209ba:	b154      	cbz	r4, 209d2 <_Unwind_VRS_Pop+0xb2>
   209bc:	460b      	mov	r3, r1
   209be:	1ad0      	subs	r0, r2, r3
   209c0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   209c4:	00e4      	lsls	r4, r4, #3
   209c6:	581d      	ldr	r5, [r3, r0]
   209c8:	f843 5b04 	str.w	r5, [r3], #4
   209cc:	428b      	cmp	r3, r1
   209ce:	d1fa      	bne.n	209c6 <_Unwind_VRS_Pop+0xa6>
   209d0:	4422      	add	r2, r4
   209d2:	4638      	mov	r0, r7
   209d4:	63b2      	str	r2, [r6, #56]	; 0x38
   209d6:	f000 f91f 	bl	20c18 <__gnu_Unwind_Restore_WMMXD>
   209da:	2000      	movs	r0, #0
   209dc:	b043      	add	sp, #268	; 0x10c
   209de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   209e2:	2c01      	cmp	r4, #1
   209e4:	ea4f 4812 	mov.w	r8, r2, lsr #16
   209e8:	fa1f f982 	uxth.w	r9, r2
   209ec:	d038      	beq.n	20a60 <_Unwind_VRS_Pop+0x140>
   209ee:	2c05      	cmp	r4, #5
   209f0:	d13a      	bne.n	20a68 <_Unwind_VRS_Pop+0x148>
   209f2:	eb08 0309 	add.w	r3, r8, r9
   209f6:	2b20      	cmp	r3, #32
   209f8:	d836      	bhi.n	20a68 <_Unwind_VRS_Pop+0x148>
   209fa:	f1b8 0f0f 	cmp.w	r8, #15
   209fe:	d976      	bls.n	20aee <_Unwind_VRS_Pop+0x1ce>
   20a00:	f1b9 0f00 	cmp.w	r9, #0
   20a04:	f040 8083 	bne.w	20b0e <_Unwind_VRS_Pop+0x1ee>
   20a08:	2b0f      	cmp	r3, #15
   20a0a:	d80b      	bhi.n	20a24 <_Unwind_VRS_Pop+0x104>
   20a0c:	6833      	ldr	r3, [r6, #0]
   20a0e:	07d8      	lsls	r0, r3, #31
   20a10:	d508      	bpl.n	20a24 <_Unwind_VRS_Pop+0x104>
   20a12:	4630      	mov	r0, r6
   20a14:	f023 0301 	bic.w	r3, r3, #1
   20a18:	f043 0302 	orr.w	r3, r3, #2
   20a1c:	f840 3b48 	str.w	r3, [r0], #72
   20a20:	f000 f8ee 	bl	20c00 <__gnu_Unwind_Save_VFP_D>
   20a24:	2000      	movs	r0, #0
   20a26:	b043      	add	sp, #268	; 0x10c
   20a28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20a2c:	b9e4      	cbnz	r4, 20a68 <_Unwind_VRS_Pop+0x148>
   20a2e:	6b87      	ldr	r7, [r0, #56]	; 0x38
   20a30:	4623      	mov	r3, r4
   20a32:	fa1f fc82 	uxth.w	ip, r2
   20a36:	2001      	movs	r0, #1
   20a38:	1d34      	adds	r4, r6, #4
   20a3a:	fa00 f203 	lsl.w	r2, r0, r3
   20a3e:	ea12 0f0c 	tst.w	r2, ip
   20a42:	4639      	mov	r1, r7
   20a44:	d004      	beq.n	20a50 <_Unwind_VRS_Pop+0x130>
   20a46:	f851 2b04 	ldr.w	r2, [r1], #4
   20a4a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
   20a4e:	460f      	mov	r7, r1
   20a50:	3301      	adds	r3, #1
   20a52:	2b10      	cmp	r3, #16
   20a54:	d1f1      	bne.n	20a3a <_Unwind_VRS_Pop+0x11a>
   20a56:	f419 5000 	ands.w	r0, r9, #8192	; 0x2000
   20a5a:	d1e3      	bne.n	20a24 <_Unwind_VRS_Pop+0x104>
   20a5c:	63b7      	str	r7, [r6, #56]	; 0x38
   20a5e:	e004      	b.n	20a6a <_Unwind_VRS_Pop+0x14a>
   20a60:	eb08 0309 	add.w	r3, r8, r9
   20a64:	2b10      	cmp	r3, #16
   20a66:	d903      	bls.n	20a70 <_Unwind_VRS_Pop+0x150>
   20a68:	2002      	movs	r0, #2
   20a6a:	b043      	add	sp, #268	; 0x10c
   20a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20a70:	f1b8 0f0f 	cmp.w	r8, #15
   20a74:	d8f8      	bhi.n	20a68 <_Unwind_VRS_Pop+0x148>
   20a76:	6833      	ldr	r3, [r6, #0]
   20a78:	07da      	lsls	r2, r3, #31
   20a7a:	d506      	bpl.n	20a8a <_Unwind_VRS_Pop+0x16a>
   20a7c:	4630      	mov	r0, r6
   20a7e:	f023 0303 	bic.w	r3, r3, #3
   20a82:	f840 3b48 	str.w	r3, [r0], #72
   20a86:	f000 f8b3 	bl	20bf0 <__gnu_Unwind_Save_VFP>
   20a8a:	af20      	add	r7, sp, #128	; 0x80
   20a8c:	4638      	mov	r0, r7
   20a8e:	464d      	mov	r5, r9
   20a90:	f000 f8ae 	bl	20bf0 <__gnu_Unwind_Save_VFP>
   20a94:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   20a96:	2d00      	cmp	r5, #0
   20a98:	d05e      	beq.n	20b58 <_Unwind_VRS_Pop+0x238>
   20a9a:	f04f 0900 	mov.w	r9, #0
   20a9e:	eb07 01c8 	add.w	r1, r7, r8, lsl #3
   20aa2:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
   20aa6:	3904      	subs	r1, #4
   20aa8:	f852 0b04 	ldr.w	r0, [r2], #4
   20aac:	f841 0f04 	str.w	r0, [r1, #4]!
   20ab0:	429a      	cmp	r2, r3
   20ab2:	d1f9      	bne.n	20aa8 <_Unwind_VRS_Pop+0x188>
   20ab4:	f1b9 0f00 	cmp.w	r9, #0
   20ab8:	d054      	beq.n	20b64 <_Unwind_VRS_Pop+0x244>
   20aba:	466f      	mov	r7, sp
   20abc:	4641      	mov	r1, r8
   20abe:	2910      	cmp	r1, #16
   20ac0:	bf38      	it	cc
   20ac2:	2110      	movcc	r1, #16
   20ac4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
   20ac8:	3984      	subs	r1, #132	; 0x84
   20aca:	eb03 02c9 	add.w	r2, r3, r9, lsl #3
   20ace:	f853 5b04 	ldr.w	r5, [r3], #4
   20ad2:	f841 5f04 	str.w	r5, [r1, #4]!
   20ad6:	429a      	cmp	r2, r3
   20ad8:	d1f9      	bne.n	20ace <_Unwind_VRS_Pop+0x1ae>
   20ada:	2c01      	cmp	r4, #1
   20adc:	d03b      	beq.n	20b56 <_Unwind_VRS_Pop+0x236>
   20ade:	f1b8 0f0f 	cmp.w	r8, #15
   20ae2:	63b2      	str	r2, [r6, #56]	; 0x38
   20ae4:	d958      	bls.n	20b98 <_Unwind_VRS_Pop+0x278>
   20ae6:	4638      	mov	r0, r7
   20ae8:	f000 f88e 	bl	20c08 <__gnu_Unwind_Restore_VFP_D_16_to_31>
   20aec:	e79a      	b.n	20a24 <_Unwind_VRS_Pop+0x104>
   20aee:	2b10      	cmp	r3, #16
   20af0:	d954      	bls.n	20b9c <_Unwind_VRS_Pop+0x27c>
   20af2:	6832      	ldr	r2, [r6, #0]
   20af4:	07d7      	lsls	r7, r2, #31
   20af6:	f1a3 0910 	sub.w	r9, r3, #16
   20afa:	d509      	bpl.n	20b10 <_Unwind_VRS_Pop+0x1f0>
   20afc:	f022 0301 	bic.w	r3, r2, #1
   20b00:	4630      	mov	r0, r6
   20b02:	f043 0302 	orr.w	r3, r3, #2
   20b06:	f840 3b48 	str.w	r3, [r0], #72
   20b0a:	f000 f879 	bl	20c00 <__gnu_Unwind_Save_VFP_D>
   20b0e:	6832      	ldr	r2, [r6, #0]
   20b10:	0753      	lsls	r3, r2, #29
   20b12:	d439      	bmi.n	20b88 <_Unwind_VRS_Pop+0x268>
   20b14:	f1b8 0f0f 	cmp.w	r8, #15
   20b18:	d802      	bhi.n	20b20 <_Unwind_VRS_Pop+0x200>
   20b1a:	a820      	add	r0, sp, #128	; 0x80
   20b1c:	f000 f870 	bl	20c00 <__gnu_Unwind_Save_VFP_D>
   20b20:	466f      	mov	r7, sp
   20b22:	4638      	mov	r0, r7
   20b24:	f1c8 0510 	rsb	r5, r8, #16
   20b28:	f000 f872 	bl	20c10 <__gnu_Unwind_Save_VFP_D_16_to_31>
   20b2c:	2d00      	cmp	r5, #0
   20b2e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   20b30:	dd28      	ble.n	20b84 <_Unwind_VRS_Pop+0x264>
   20b32:	af20      	add	r7, sp, #128	; 0x80
   20b34:	e7b3      	b.n	20a9e <_Unwind_VRS_Pop+0x17e>
   20b36:	f023 0310 	bic.w	r3, r3, #16
   20b3a:	6003      	str	r3, [r0, #0]
   20b3c:	f500 70e8 	add.w	r0, r0, #464	; 0x1d0
   20b40:	f000 f8b8 	bl	20cb4 <__gnu_Unwind_Save_WMMXC>
   20b44:	e704      	b.n	20950 <_Unwind_VRS_Pop+0x30>
   20b46:	f023 0308 	bic.w	r3, r3, #8
   20b4a:	6003      	str	r3, [r0, #0]
   20b4c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   20b50:	f000 f884 	bl	20c5c <__gnu_Unwind_Save_WMMXD>
   20b54:	e72a      	b.n	209ac <_Unwind_VRS_Pop+0x8c>
   20b56:	af20      	add	r7, sp, #128	; 0x80
   20b58:	3204      	adds	r2, #4
   20b5a:	63b2      	str	r2, [r6, #56]	; 0x38
   20b5c:	4638      	mov	r0, r7
   20b5e:	f000 f843 	bl	20be8 <__gnu_Unwind_Restore_VFP>
   20b62:	e75f      	b.n	20a24 <_Unwind_VRS_Pop+0x104>
   20b64:	2c01      	cmp	r4, #1
   20b66:	d0f7      	beq.n	20b58 <_Unwind_VRS_Pop+0x238>
   20b68:	f1b8 0f0f 	cmp.w	r8, #15
   20b6c:	63b2      	str	r2, [r6, #56]	; 0x38
   20b6e:	f63f af59 	bhi.w	20a24 <_Unwind_VRS_Pop+0x104>
   20b72:	4638      	mov	r0, r7
   20b74:	f000 f840 	bl	20bf8 <__gnu_Unwind_Restore_VFP_D>
   20b78:	f1b9 0f00 	cmp.w	r9, #0
   20b7c:	f43f af52 	beq.w	20a24 <_Unwind_VRS_Pop+0x104>
   20b80:	466f      	mov	r7, sp
   20b82:	e7b0      	b.n	20ae6 <_Unwind_VRS_Pop+0x1c6>
   20b84:	4613      	mov	r3, r2
   20b86:	e799      	b.n	20abc <_Unwind_VRS_Pop+0x19c>
   20b88:	4630      	mov	r0, r6
   20b8a:	f022 0204 	bic.w	r2, r2, #4
   20b8e:	f840 2bd0 	str.w	r2, [r0], #208
   20b92:	f000 f83d 	bl	20c10 <__gnu_Unwind_Save_VFP_D_16_to_31>
   20b96:	e7bd      	b.n	20b14 <_Unwind_VRS_Pop+0x1f4>
   20b98:	af20      	add	r7, sp, #128	; 0x80
   20b9a:	e7ea      	b.n	20b72 <_Unwind_VRS_Pop+0x252>
   20b9c:	6833      	ldr	r3, [r6, #0]
   20b9e:	07d9      	lsls	r1, r3, #31
   20ba0:	d508      	bpl.n	20bb4 <_Unwind_VRS_Pop+0x294>
   20ba2:	f023 0301 	bic.w	r3, r3, #1
   20ba6:	4630      	mov	r0, r6
   20ba8:	f043 0302 	orr.w	r3, r3, #2
   20bac:	f840 3b48 	str.w	r3, [r0], #72
   20bb0:	f000 f826 	bl	20c00 <__gnu_Unwind_Save_VFP_D>
   20bb4:	af20      	add	r7, sp, #128	; 0x80
   20bb6:	4638      	mov	r0, r7
   20bb8:	464d      	mov	r5, r9
   20bba:	f000 f821 	bl	20c00 <__gnu_Unwind_Save_VFP_D>
   20bbe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
   20bc0:	2d00      	cmp	r5, #0
   20bc2:	f47f af6a 	bne.w	20a9a <_Unwind_VRS_Pop+0x17a>
   20bc6:	4638      	mov	r0, r7
   20bc8:	f000 f816 	bl	20bf8 <__gnu_Unwind_Restore_VFP_D>
   20bcc:	e72a      	b.n	20a24 <_Unwind_VRS_Pop+0x104>
   20bce:	bf00      	nop

00020bd0 <__restore_core_regs>:
   20bd0:	f100 0134 	add.w	r1, r0, #52	; 0x34
   20bd4:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
   20bd8:	469c      	mov	ip, r3
   20bda:	46a6      	mov	lr, r4
   20bdc:	f84c 5d04 	str.w	r5, [ip, #-4]!
   20be0:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   20be4:	46e5      	mov	sp, ip
   20be6:	bd00      	pop	{pc}

00020be8 <__gnu_Unwind_Restore_VFP>:
   20be8:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
   20bec:	4770      	bx	lr
   20bee:	bf00      	nop

00020bf0 <__gnu_Unwind_Save_VFP>:
   20bf0:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
   20bf4:	4770      	bx	lr
   20bf6:	bf00      	nop

00020bf8 <__gnu_Unwind_Restore_VFP_D>:
   20bf8:	ec90 0b20 	vldmia	r0, {d0-d15}
   20bfc:	4770      	bx	lr
   20bfe:	bf00      	nop

00020c00 <__gnu_Unwind_Save_VFP_D>:
   20c00:	ec80 0b20 	vstmia	r0, {d0-d15}
   20c04:	4770      	bx	lr
   20c06:	bf00      	nop

00020c08 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
   20c08:	ecd0 0b20 	vldmia	r0, {d16-d31}
   20c0c:	4770      	bx	lr
   20c0e:	bf00      	nop

00020c10 <__gnu_Unwind_Save_VFP_D_16_to_31>:
   20c10:	ecc0 0b20 	vstmia	r0, {d16-d31}
   20c14:	4770      	bx	lr
   20c16:	bf00      	nop

00020c18 <__gnu_Unwind_Restore_WMMXD>:
   20c18:	ecf0 0102 	ldfe	f0, [r0], #8
   20c1c:	ecf0 1102 	ldfe	f1, [r0], #8
   20c20:	ecf0 2102 	ldfe	f2, [r0], #8
   20c24:	ecf0 3102 	ldfe	f3, [r0], #8
   20c28:	ecf0 4102 	ldfe	f4, [r0], #8
   20c2c:	ecf0 5102 	ldfe	f5, [r0], #8
   20c30:	ecf0 6102 	ldfe	f6, [r0], #8
   20c34:	ecf0 7102 	ldfe	f7, [r0], #8
   20c38:	ecf0 8102 	ldfp	f0, [r0], #8
   20c3c:	ecf0 9102 	ldfp	f1, [r0], #8
   20c40:	ecf0 a102 	ldfp	f2, [r0], #8
   20c44:	ecf0 b102 	ldfp	f3, [r0], #8
   20c48:	ecf0 c102 	ldfp	f4, [r0], #8
   20c4c:	ecf0 d102 	ldfp	f5, [r0], #8
   20c50:	ecf0 e102 	ldfp	f6, [r0], #8
   20c54:	ecf0 f102 	ldfp	f7, [r0], #8
   20c58:	4770      	bx	lr
   20c5a:	bf00      	nop

00020c5c <__gnu_Unwind_Save_WMMXD>:
   20c5c:	ece0 0102 	stfe	f0, [r0], #8
   20c60:	ece0 1102 	stfe	f1, [r0], #8
   20c64:	ece0 2102 	stfe	f2, [r0], #8
   20c68:	ece0 3102 	stfe	f3, [r0], #8
   20c6c:	ece0 4102 	stfe	f4, [r0], #8
   20c70:	ece0 5102 	stfe	f5, [r0], #8
   20c74:	ece0 6102 	stfe	f6, [r0], #8
   20c78:	ece0 7102 	stfe	f7, [r0], #8
   20c7c:	ece0 8102 	stfp	f0, [r0], #8
   20c80:	ece0 9102 	stfp	f1, [r0], #8
   20c84:	ece0 a102 	stfp	f2, [r0], #8
   20c88:	ece0 b102 	stfp	f3, [r0], #8
   20c8c:	ece0 c102 	stfp	f4, [r0], #8
   20c90:	ece0 d102 	stfp	f5, [r0], #8
   20c94:	ece0 e102 	stfp	f6, [r0], #8
   20c98:	ece0 f102 	stfp	f7, [r0], #8
   20c9c:	4770      	bx	lr
   20c9e:	bf00      	nop

00020ca0 <__gnu_Unwind_Restore_WMMXC>:
   20ca0:	fcb0 8101 	ldc2	1, cr8, [r0], #4
   20ca4:	fcb0 9101 	ldc2	1, cr9, [r0], #4
   20ca8:	fcb0 a101 	ldc2	1, cr10, [r0], #4
   20cac:	fcb0 b101 	ldc2	1, cr11, [r0], #4
   20cb0:	4770      	bx	lr
   20cb2:	bf00      	nop

00020cb4 <__gnu_Unwind_Save_WMMXC>:
   20cb4:	fca0 8101 	stc2	1, cr8, [r0], #4
   20cb8:	fca0 9101 	stc2	1, cr9, [r0], #4
   20cbc:	fca0 a101 	stc2	1, cr10, [r0], #4
   20cc0:	fca0 b101 	stc2	1, cr11, [r0], #4
   20cc4:	4770      	bx	lr
   20cc6:	bf00      	nop

00020cc8 <_Unwind_RaiseException>:
   20cc8:	46ec      	mov	ip, sp
   20cca:	b500      	push	{lr}
   20ccc:	e92d 5000 	stmdb	sp!, {ip, lr}
   20cd0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   20cd4:	f04f 0300 	mov.w	r3, #0
   20cd8:	e92d 000c 	stmdb	sp!, {r2, r3}
   20cdc:	a901      	add	r1, sp, #4
   20cde:	f7ff fbc3 	bl	20468 <__gnu_Unwind_RaiseException>
   20ce2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   20ce6:	b012      	add	sp, #72	; 0x48
   20ce8:	4770      	bx	lr
   20cea:	bf00      	nop

00020cec <_Unwind_Resume>:
   20cec:	46ec      	mov	ip, sp
   20cee:	b500      	push	{lr}
   20cf0:	e92d 5000 	stmdb	sp!, {ip, lr}
   20cf4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   20cf8:	f04f 0300 	mov.w	r3, #0
   20cfc:	e92d 000c 	stmdb	sp!, {r2, r3}
   20d00:	a901      	add	r1, sp, #4
   20d02:	f7ff fbed 	bl	204e0 <__gnu_Unwind_Resume>
   20d06:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   20d0a:	b012      	add	sp, #72	; 0x48
   20d0c:	4770      	bx	lr
   20d0e:	bf00      	nop

00020d10 <_Unwind_Resume_or_Rethrow>:
   20d10:	46ec      	mov	ip, sp
   20d12:	b500      	push	{lr}
   20d14:	e92d 5000 	stmdb	sp!, {ip, lr}
   20d18:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   20d1c:	f04f 0300 	mov.w	r3, #0
   20d20:	e92d 000c 	stmdb	sp!, {r2, r3}
   20d24:	a901      	add	r1, sp, #4
   20d26:	f7ff fbfd 	bl	20524 <__gnu_Unwind_Resume_or_Rethrow>
   20d2a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   20d2e:	b012      	add	sp, #72	; 0x48
   20d30:	4770      	bx	lr
   20d32:	bf00      	nop

00020d34 <_Unwind_ForcedUnwind>:
   20d34:	46ec      	mov	ip, sp
   20d36:	b500      	push	{lr}
   20d38:	e92d 5000 	stmdb	sp!, {ip, lr}
   20d3c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   20d40:	f04f 0300 	mov.w	r3, #0
   20d44:	e92d 000c 	stmdb	sp!, {r2, r3}
   20d48:	ab01      	add	r3, sp, #4
   20d4a:	f7ff fbc1 	bl	204d0 <__gnu_Unwind_ForcedUnwind>
   20d4e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   20d52:	b012      	add	sp, #72	; 0x48
   20d54:	4770      	bx	lr
   20d56:	bf00      	nop

00020d58 <_Unwind_Backtrace>:
   20d58:	46ec      	mov	ip, sp
   20d5a:	b500      	push	{lr}
   20d5c:	e92d 5000 	stmdb	sp!, {ip, lr}
   20d60:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   20d64:	f04f 0300 	mov.w	r3, #0
   20d68:	e92d 000c 	stmdb	sp!, {r2, r3}
   20d6c:	aa01      	add	r2, sp, #4
   20d6e:	f7ff fc35 	bl	205dc <__gnu_Unwind_Backtrace>
   20d72:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
   20d76:	b012      	add	sp, #72	; 0x48
   20d78:	4770      	bx	lr
   20d7a:	bf00      	nop

00020d7c <next_unwind_byte>:
   20d7c:	7a02      	ldrb	r2, [r0, #8]
   20d7e:	4603      	mov	r3, r0
   20d80:	b97a      	cbnz	r2, 20da2 <next_unwind_byte+0x26>
   20d82:	7a42      	ldrb	r2, [r0, #9]
   20d84:	b1a2      	cbz	r2, 20db0 <next_unwind_byte+0x34>
   20d86:	6841      	ldr	r1, [r0, #4]
   20d88:	3a01      	subs	r2, #1
   20d8a:	b410      	push	{r4}
   20d8c:	7242      	strb	r2, [r0, #9]
   20d8e:	6808      	ldr	r0, [r1, #0]
   20d90:	2203      	movs	r2, #3
   20d92:	1d0c      	adds	r4, r1, #4
   20d94:	721a      	strb	r2, [r3, #8]
   20d96:	0202      	lsls	r2, r0, #8
   20d98:	605c      	str	r4, [r3, #4]
   20d9a:	0e00      	lsrs	r0, r0, #24
   20d9c:	bc10      	pop	{r4}
   20d9e:	601a      	str	r2, [r3, #0]
   20da0:	4770      	bx	lr
   20da2:	6800      	ldr	r0, [r0, #0]
   20da4:	3a01      	subs	r2, #1
   20da6:	721a      	strb	r2, [r3, #8]
   20da8:	0202      	lsls	r2, r0, #8
   20daa:	601a      	str	r2, [r3, #0]
   20dac:	0e00      	lsrs	r0, r0, #24
   20dae:	4770      	bx	lr
   20db0:	20b0      	movs	r0, #176	; 0xb0
   20db2:	4770      	bx	lr

00020db4 <_Unwind_GetGR.constprop.0>:
   20db4:	b500      	push	{lr}
   20db6:	b085      	sub	sp, #20
   20db8:	2300      	movs	r3, #0
   20dba:	aa03      	add	r2, sp, #12
   20dbc:	9200      	str	r2, [sp, #0]
   20dbe:	4619      	mov	r1, r3
   20dc0:	220c      	movs	r2, #12
   20dc2:	f7ff fbc1 	bl	20548 <_Unwind_VRS_Get>
   20dc6:	9803      	ldr	r0, [sp, #12]
   20dc8:	b005      	add	sp, #20
   20dca:	f85d fb04 	ldr.w	pc, [sp], #4
   20dce:	bf00      	nop

00020dd0 <unwind_UCB_from_context>:
   20dd0:	f7ff bff0 	b.w	20db4 <_Unwind_GetGR.constprop.0>

00020dd4 <__gnu_unwind_execute>:
   20dd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20dd8:	b085      	sub	sp, #20
   20dda:	4607      	mov	r7, r0
   20ddc:	460e      	mov	r6, r1
   20dde:	f04f 0800 	mov.w	r8, #0
   20de2:	ad03      	add	r5, sp, #12
   20de4:	4630      	mov	r0, r6
   20de6:	f7ff ffc9 	bl	20d7c <next_unwind_byte>
   20dea:	28b0      	cmp	r0, #176	; 0xb0
   20dec:	4604      	mov	r4, r0
   20dee:	f000 80cb 	beq.w	20f88 <__gnu_unwind_execute+0x1b4>
   20df2:	0603      	lsls	r3, r0, #24
   20df4:	d540      	bpl.n	20e78 <__gnu_unwind_execute+0xa4>
   20df6:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
   20dfa:	2b80      	cmp	r3, #128	; 0x80
   20dfc:	d056      	beq.n	20eac <__gnu_unwind_execute+0xd8>
   20dfe:	2bb0      	cmp	r3, #176	; 0xb0
   20e00:	d07d      	beq.n	20efe <__gnu_unwind_execute+0x12a>
   20e02:	d81c      	bhi.n	20e3e <__gnu_unwind_execute+0x6a>
   20e04:	2b90      	cmp	r3, #144	; 0x90
   20e06:	f000 8093 	beq.w	20f30 <__gnu_unwind_execute+0x15c>
   20e0a:	2ba0      	cmp	r3, #160	; 0xa0
   20e0c:	d113      	bne.n	20e36 <__gnu_unwind_execute+0x62>
   20e0e:	43c3      	mvns	r3, r0
   20e10:	f003 0307 	and.w	r3, r3, #7
   20e14:	f44f 627f 	mov.w	r2, #4080	; 0xff0
   20e18:	411a      	asrs	r2, r3
   20e1a:	0701      	lsls	r1, r0, #28
   20e1c:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
   20e20:	f04f 0300 	mov.w	r3, #0
   20e24:	bf48      	it	mi
   20e26:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
   20e2a:	4619      	mov	r1, r3
   20e2c:	4638      	mov	r0, r7
   20e2e:	f7ff fd77 	bl	20920 <_Unwind_VRS_Pop>
   20e32:	2800      	cmp	r0, #0
   20e34:	d0d6      	beq.n	20de4 <__gnu_unwind_execute+0x10>
   20e36:	2009      	movs	r0, #9
   20e38:	b005      	add	sp, #20
   20e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   20e3e:	2bc0      	cmp	r3, #192	; 0xc0
   20e40:	d14b      	bne.n	20eda <__gnu_unwind_execute+0x106>
   20e42:	28c6      	cmp	r0, #198	; 0xc6
   20e44:	f000 8089 	beq.w	20f5a <__gnu_unwind_execute+0x186>
   20e48:	28c7      	cmp	r0, #199	; 0xc7
   20e4a:	f000 80a2 	beq.w	20f92 <__gnu_unwind_execute+0x1be>
   20e4e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   20e52:	2bc0      	cmp	r3, #192	; 0xc0
   20e54:	f000 80bc 	beq.w	20fd0 <__gnu_unwind_execute+0x1fc>
   20e58:	28c8      	cmp	r0, #200	; 0xc8
   20e5a:	f000 80bf 	beq.w	20fdc <__gnu_unwind_execute+0x208>
   20e5e:	28c9      	cmp	r0, #201	; 0xc9
   20e60:	d1e9      	bne.n	20e36 <__gnu_unwind_execute+0x62>
   20e62:	4630      	mov	r0, r6
   20e64:	f7ff ff8a 	bl	20d7c <next_unwind_byte>
   20e68:	0302      	lsls	r2, r0, #12
   20e6a:	f000 000f 	and.w	r0, r0, #15
   20e6e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   20e72:	3001      	adds	r0, #1
   20e74:	4302      	orrs	r2, r0
   20e76:	e039      	b.n	20eec <__gnu_unwind_execute+0x118>
   20e78:	0083      	lsls	r3, r0, #2
   20e7a:	b2db      	uxtb	r3, r3
   20e7c:	f103 0904 	add.w	r9, r3, #4
   20e80:	2300      	movs	r3, #0
   20e82:	4619      	mov	r1, r3
   20e84:	9500      	str	r5, [sp, #0]
   20e86:	220d      	movs	r2, #13
   20e88:	4638      	mov	r0, r7
   20e8a:	f7ff fb5d 	bl	20548 <_Unwind_VRS_Get>
   20e8e:	9b03      	ldr	r3, [sp, #12]
   20e90:	0660      	lsls	r0, r4, #25
   20e92:	bf4c      	ite	mi
   20e94:	eba3 0309 	submi.w	r3, r3, r9
   20e98:	444b      	addpl	r3, r9
   20e9a:	9303      	str	r3, [sp, #12]
   20e9c:	2300      	movs	r3, #0
   20e9e:	9500      	str	r5, [sp, #0]
   20ea0:	220d      	movs	r2, #13
   20ea2:	4619      	mov	r1, r3
   20ea4:	4638      	mov	r0, r7
   20ea6:	f7ff fb75 	bl	20594 <_Unwind_VRS_Set>
   20eaa:	e79b      	b.n	20de4 <__gnu_unwind_execute+0x10>
   20eac:	0204      	lsls	r4, r0, #8
   20eae:	4630      	mov	r0, r6
   20eb0:	f7ff ff64 	bl	20d7c <next_unwind_byte>
   20eb4:	4320      	orrs	r0, r4
   20eb6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   20eba:	d0bc      	beq.n	20e36 <__gnu_unwind_execute+0x62>
   20ebc:	0104      	lsls	r4, r0, #4
   20ebe:	2300      	movs	r3, #0
   20ec0:	b2a2      	uxth	r2, r4
   20ec2:	4619      	mov	r1, r3
   20ec4:	4638      	mov	r0, r7
   20ec6:	f7ff fd2b 	bl	20920 <_Unwind_VRS_Pop>
   20eca:	2800      	cmp	r0, #0
   20ecc:	d1b3      	bne.n	20e36 <__gnu_unwind_execute+0x62>
   20ece:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   20ed2:	bf18      	it	ne
   20ed4:	f04f 0801 	movne.w	r8, #1
   20ed8:	e784      	b.n	20de4 <__gnu_unwind_execute+0x10>
   20eda:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
   20ede:	2bd0      	cmp	r3, #208	; 0xd0
   20ee0:	d1a9      	bne.n	20e36 <__gnu_unwind_execute+0x62>
   20ee2:	f000 0207 	and.w	r2, r0, #7
   20ee6:	3201      	adds	r2, #1
   20ee8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   20eec:	2305      	movs	r3, #5
   20eee:	2101      	movs	r1, #1
   20ef0:	4638      	mov	r0, r7
   20ef2:	f7ff fd15 	bl	20920 <_Unwind_VRS_Pop>
   20ef6:	2800      	cmp	r0, #0
   20ef8:	f43f af74 	beq.w	20de4 <__gnu_unwind_execute+0x10>
   20efc:	e79b      	b.n	20e36 <__gnu_unwind_execute+0x62>
   20efe:	28b1      	cmp	r0, #177	; 0xb1
   20f00:	d037      	beq.n	20f72 <__gnu_unwind_execute+0x19e>
   20f02:	28b2      	cmp	r0, #178	; 0xb2
   20f04:	f000 8087 	beq.w	21016 <__gnu_unwind_execute+0x242>
   20f08:	28b3      	cmp	r0, #179	; 0xb3
   20f0a:	d056      	beq.n	20fba <__gnu_unwind_execute+0x1e6>
   20f0c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
   20f10:	2bb4      	cmp	r3, #180	; 0xb4
   20f12:	d090      	beq.n	20e36 <__gnu_unwind_execute+0x62>
   20f14:	f000 0207 	and.w	r2, r0, #7
   20f18:	3201      	adds	r2, #1
   20f1a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   20f1e:	2301      	movs	r3, #1
   20f20:	4619      	mov	r1, r3
   20f22:	4638      	mov	r0, r7
   20f24:	f7ff fcfc 	bl	20920 <_Unwind_VRS_Pop>
   20f28:	2800      	cmp	r0, #0
   20f2a:	f43f af5b 	beq.w	20de4 <__gnu_unwind_execute+0x10>
   20f2e:	e782      	b.n	20e36 <__gnu_unwind_execute+0x62>
   20f30:	f000 030d 	and.w	r3, r0, #13
   20f34:	2b0d      	cmp	r3, #13
   20f36:	f43f af7e 	beq.w	20e36 <__gnu_unwind_execute+0x62>
   20f3a:	2300      	movs	r3, #0
   20f3c:	f000 020f 	and.w	r2, r0, #15
   20f40:	4619      	mov	r1, r3
   20f42:	9500      	str	r5, [sp, #0]
   20f44:	4638      	mov	r0, r7
   20f46:	f7ff faff 	bl	20548 <_Unwind_VRS_Get>
   20f4a:	2300      	movs	r3, #0
   20f4c:	9500      	str	r5, [sp, #0]
   20f4e:	220d      	movs	r2, #13
   20f50:	4619      	mov	r1, r3
   20f52:	4638      	mov	r0, r7
   20f54:	f7ff fb1e 	bl	20594 <_Unwind_VRS_Set>
   20f58:	e744      	b.n	20de4 <__gnu_unwind_execute+0x10>
   20f5a:	4630      	mov	r0, r6
   20f5c:	f7ff ff0e 	bl	20d7c <next_unwind_byte>
   20f60:	0302      	lsls	r2, r0, #12
   20f62:	f000 000f 	and.w	r0, r0, #15
   20f66:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   20f6a:	3001      	adds	r0, #1
   20f6c:	4302      	orrs	r2, r0
   20f6e:	2303      	movs	r3, #3
   20f70:	e7d6      	b.n	20f20 <__gnu_unwind_execute+0x14c>
   20f72:	4630      	mov	r0, r6
   20f74:	f7ff ff02 	bl	20d7c <next_unwind_byte>
   20f78:	4602      	mov	r2, r0
   20f7a:	2800      	cmp	r0, #0
   20f7c:	f43f af5b 	beq.w	20e36 <__gnu_unwind_execute+0x62>
   20f80:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
   20f84:	d0cc      	beq.n	20f20 <__gnu_unwind_execute+0x14c>
   20f86:	e756      	b.n	20e36 <__gnu_unwind_execute+0x62>
   20f88:	f1b8 0f00 	cmp.w	r8, #0
   20f8c:	d032      	beq.n	20ff4 <__gnu_unwind_execute+0x220>
   20f8e:	2000      	movs	r0, #0
   20f90:	e752      	b.n	20e38 <__gnu_unwind_execute+0x64>
   20f92:	4630      	mov	r0, r6
   20f94:	f7ff fef2 	bl	20d7c <next_unwind_byte>
   20f98:	4602      	mov	r2, r0
   20f9a:	2800      	cmp	r0, #0
   20f9c:	f43f af4b 	beq.w	20e36 <__gnu_unwind_execute+0x62>
   20fa0:	f010 0ff0 	tst.w	r0, #240	; 0xf0
   20fa4:	f47f af47 	bne.w	20e36 <__gnu_unwind_execute+0x62>
   20fa8:	2300      	movs	r3, #0
   20faa:	2104      	movs	r1, #4
   20fac:	4638      	mov	r0, r7
   20fae:	f7ff fcb7 	bl	20920 <_Unwind_VRS_Pop>
   20fb2:	2800      	cmp	r0, #0
   20fb4:	f43f af16 	beq.w	20de4 <__gnu_unwind_execute+0x10>
   20fb8:	e73d      	b.n	20e36 <__gnu_unwind_execute+0x62>
   20fba:	4630      	mov	r0, r6
   20fbc:	f7ff fede 	bl	20d7c <next_unwind_byte>
   20fc0:	0302      	lsls	r2, r0, #12
   20fc2:	f000 000f 	and.w	r0, r0, #15
   20fc6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   20fca:	3001      	adds	r0, #1
   20fcc:	4302      	orrs	r2, r0
   20fce:	e7a6      	b.n	20f1e <__gnu_unwind_execute+0x14a>
   20fd0:	f000 020f 	and.w	r2, r0, #15
   20fd4:	3201      	adds	r2, #1
   20fd6:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   20fda:	e7c8      	b.n	20f6e <__gnu_unwind_execute+0x19a>
   20fdc:	4630      	mov	r0, r6
   20fde:	f7ff fecd 	bl	20d7c <next_unwind_byte>
   20fe2:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
   20fe6:	f000 030f 	and.w	r3, r0, #15
   20fea:	3210      	adds	r2, #16
   20fec:	3301      	adds	r3, #1
   20fee:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
   20ff2:	e77b      	b.n	20eec <__gnu_unwind_execute+0x118>
   20ff4:	ac03      	add	r4, sp, #12
   20ff6:	4643      	mov	r3, r8
   20ff8:	220e      	movs	r2, #14
   20ffa:	4641      	mov	r1, r8
   20ffc:	9400      	str	r4, [sp, #0]
   20ffe:	4638      	mov	r0, r7
   21000:	f7ff faa2 	bl	20548 <_Unwind_VRS_Get>
   21004:	9400      	str	r4, [sp, #0]
   21006:	4643      	mov	r3, r8
   21008:	220f      	movs	r2, #15
   2100a:	4641      	mov	r1, r8
   2100c:	4638      	mov	r0, r7
   2100e:	f7ff fac1 	bl	20594 <_Unwind_VRS_Set>
   21012:	4640      	mov	r0, r8
   21014:	e710      	b.n	20e38 <__gnu_unwind_execute+0x64>
   21016:	2300      	movs	r3, #0
   21018:	220d      	movs	r2, #13
   2101a:	4619      	mov	r1, r3
   2101c:	9500      	str	r5, [sp, #0]
   2101e:	4638      	mov	r0, r7
   21020:	f7ff fa92 	bl	20548 <_Unwind_VRS_Get>
   21024:	4630      	mov	r0, r6
   21026:	f7ff fea9 	bl	20d7c <next_unwind_byte>
   2102a:	0602      	lsls	r2, r0, #24
   2102c:	9c03      	ldr	r4, [sp, #12]
   2102e:	f04f 0902 	mov.w	r9, #2
   21032:	d50c      	bpl.n	2104e <__gnu_unwind_execute+0x27a>
   21034:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   21038:	fa00 f009 	lsl.w	r0, r0, r9
   2103c:	4404      	add	r4, r0
   2103e:	4630      	mov	r0, r6
   21040:	9403      	str	r4, [sp, #12]
   21042:	f7ff fe9b 	bl	20d7c <next_unwind_byte>
   21046:	0603      	lsls	r3, r0, #24
   21048:	f109 0907 	add.w	r9, r9, #7
   2104c:	d4f2      	bmi.n	21034 <__gnu_unwind_execute+0x260>
   2104e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   21052:	fa03 f309 	lsl.w	r3, r3, r9
   21056:	f504 7401 	add.w	r4, r4, #516	; 0x204
   2105a:	4423      	add	r3, r4
   2105c:	e71d      	b.n	20e9a <__gnu_unwind_execute+0xc6>
   2105e:	bf00      	nop

00021060 <__gnu_unwind_frame>:
   21060:	b510      	push	{r4, lr}
   21062:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   21064:	6853      	ldr	r3, [r2, #4]
   21066:	b084      	sub	sp, #16
   21068:	f04f 0c03 	mov.w	ip, #3
   2106c:	3208      	adds	r2, #8
   2106e:	021c      	lsls	r4, r3, #8
   21070:	4608      	mov	r0, r1
   21072:	0e1b      	lsrs	r3, r3, #24
   21074:	a901      	add	r1, sp, #4
   21076:	9401      	str	r4, [sp, #4]
   21078:	9202      	str	r2, [sp, #8]
   2107a:	f88d c00c 	strb.w	ip, [sp, #12]
   2107e:	f88d 300d 	strb.w	r3, [sp, #13]
   21082:	f7ff fea7 	bl	20dd4 <__gnu_unwind_execute>
   21086:	b004      	add	sp, #16
   21088:	bd10      	pop	{r4, pc}
   2108a:	bf00      	nop

0002108c <_Unwind_GetRegionStart>:
   2108c:	b508      	push	{r3, lr}
   2108e:	f7ff fe9f 	bl	20dd0 <unwind_UCB_from_context>
   21092:	6c80      	ldr	r0, [r0, #72]	; 0x48
   21094:	bd08      	pop	{r3, pc}
   21096:	bf00      	nop

00021098 <_Unwind_GetLanguageSpecificData>:
   21098:	b508      	push	{r3, lr}
   2109a:	f7ff fe99 	bl	20dd0 <unwind_UCB_from_context>
   2109e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   210a0:	79c3      	ldrb	r3, [r0, #7]
   210a2:	3302      	adds	r3, #2
   210a4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   210a8:	bd08      	pop	{r3, pc}
   210aa:	bf00      	nop

000210ac <_Unwind_GetDataRelBase>:
   210ac:	b508      	push	{r3, lr}
   210ae:	f7f5 fea9 	bl	16e04 <abort>

000210b2 <_Unwind_GetTextRelBase>:
   210b2:	b508      	push	{r3, lr}
   210b4:	f7ff fffa 	bl	210ac <_Unwind_GetDataRelBase>

000210b8 <__aeabi_idiv0>:
   210b8:	4770      	bx	lr
   210ba:	bf00      	nop

000210bc <_calloc_r>:
   210bc:	b538      	push	{r3, r4, r5, lr}
   210be:	fba1 1402 	umull	r1, r4, r1, r2
   210c2:	bb8c      	cbnz	r4, 21128 <_calloc_r+0x6c>
   210c4:	f000 f85c 	bl	21180 <_malloc_r>
   210c8:	4605      	mov	r5, r0
   210ca:	b1e0      	cbz	r0, 21106 <_calloc_r+0x4a>
   210cc:	f850 2c04 	ldr.w	r2, [r0, #-4]
   210d0:	f022 0203 	bic.w	r2, r2, #3
   210d4:	3a04      	subs	r2, #4
   210d6:	2a24      	cmp	r2, #36	; 0x24
   210d8:	d817      	bhi.n	2110a <_calloc_r+0x4e>
   210da:	2a13      	cmp	r2, #19
   210dc:	d91a      	bls.n	21114 <_calloc_r+0x58>
   210de:	2a1b      	cmp	r2, #27
   210e0:	e9c0 4400 	strd	r4, r4, [r0]
   210e4:	d91d      	bls.n	21122 <_calloc_r+0x66>
   210e6:	2a24      	cmp	r2, #36	; 0x24
   210e8:	bf14      	ite	ne
   210ea:	f100 0210 	addne.w	r2, r0, #16
   210ee:	f100 0218 	addeq.w	r2, r0, #24
   210f2:	f04f 0300 	mov.w	r3, #0
   210f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
   210fa:	bf04      	itt	eq
   210fc:	6104      	streq	r4, [r0, #16]
   210fe:	6144      	streq	r4, [r0, #20]
   21100:	e9c2 3300 	strd	r3, r3, [r2]
   21104:	6093      	str	r3, [r2, #8]
   21106:	4628      	mov	r0, r5
   21108:	bd38      	pop	{r3, r4, r5, pc}
   2110a:	4621      	mov	r1, r4
   2110c:	f001 f9e8 	bl	224e0 <memset>
   21110:	4628      	mov	r0, r5
   21112:	bd38      	pop	{r3, r4, r5, pc}
   21114:	4602      	mov	r2, r0
   21116:	2300      	movs	r3, #0
   21118:	e9c2 3300 	strd	r3, r3, [r2]
   2111c:	6093      	str	r3, [r2, #8]
   2111e:	4628      	mov	r0, r5
   21120:	bd38      	pop	{r3, r4, r5, pc}
   21122:	f100 0208 	add.w	r2, r0, #8
   21126:	e7f6      	b.n	21116 <_calloc_r+0x5a>
   21128:	f001 fb10 	bl	2274c <__errno>
   2112c:	230c      	movs	r3, #12
   2112e:	2500      	movs	r5, #0
   21130:	6003      	str	r3, [r0, #0]
   21132:	e7e8      	b.n	21106 <_calloc_r+0x4a>

00021134 <itoa>:
   21134:	1e93      	subs	r3, r2, #2
   21136:	2b22      	cmp	r3, #34	; 0x22
   21138:	b510      	push	{r4, lr}
   2113a:	460c      	mov	r4, r1
   2113c:	d80c      	bhi.n	21158 <itoa+0x24>
   2113e:	2a0a      	cmp	r2, #10
   21140:	d003      	beq.n	2114a <itoa+0x16>
   21142:	f000 fcd1 	bl	21ae8 <__utoa>
   21146:	4620      	mov	r0, r4
   21148:	bd10      	pop	{r4, pc}
   2114a:	2800      	cmp	r0, #0
   2114c:	daf9      	bge.n	21142 <itoa+0xe>
   2114e:	232d      	movs	r3, #45	; 0x2d
   21150:	f801 3b01 	strb.w	r3, [r1], #1
   21154:	4240      	negs	r0, r0
   21156:	e7f4      	b.n	21142 <itoa+0xe>
   21158:	2300      	movs	r3, #0
   2115a:	700b      	strb	r3, [r1, #0]
   2115c:	4618      	mov	r0, r3
   2115e:	bd10      	pop	{r4, pc}

00021160 <malloc>:
   21160:	4b02      	ldr	r3, [pc, #8]	; (2116c <malloc+0xc>)
   21162:	4601      	mov	r1, r0
   21164:	6818      	ldr	r0, [r3, #0]
   21166:	f000 b80b 	b.w	21180 <_malloc_r>
   2116a:	bf00      	nop
   2116c:	200038c4 	.word	0x200038c4

00021170 <free>:
   21170:	4b02      	ldr	r3, [pc, #8]	; (2117c <free+0xc>)
   21172:	4601      	mov	r1, r0
   21174:	6818      	ldr	r0, [r3, #0]
   21176:	f001 be45 	b.w	22e04 <_free_r>
   2117a:	bf00      	nop
   2117c:	200038c4 	.word	0x200038c4

00021180 <_malloc_r>:
   21180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21184:	f101 060b 	add.w	r6, r1, #11
   21188:	2e16      	cmp	r6, #22
   2118a:	b083      	sub	sp, #12
   2118c:	4604      	mov	r4, r0
   2118e:	d824      	bhi.n	211da <_malloc_r+0x5a>
   21190:	2910      	cmp	r1, #16
   21192:	f200 80ba 	bhi.w	2130a <_malloc_r+0x18a>
   21196:	f000 faa3 	bl	216e0 <__malloc_lock>
   2119a:	2610      	movs	r6, #16
   2119c:	2218      	movs	r2, #24
   2119e:	2002      	movs	r0, #2
   211a0:	4fb5      	ldr	r7, [pc, #724]	; (21478 <_malloc_r+0x2f8>)
   211a2:	443a      	add	r2, r7
   211a4:	f1a2 0108 	sub.w	r1, r2, #8
   211a8:	6853      	ldr	r3, [r2, #4]
   211aa:	428b      	cmp	r3, r1
   211ac:	f000 80ba 	beq.w	21324 <_malloc_r+0x1a4>
   211b0:	685a      	ldr	r2, [r3, #4]
   211b2:	68d9      	ldr	r1, [r3, #12]
   211b4:	f022 0203 	bic.w	r2, r2, #3
   211b8:	441a      	add	r2, r3
   211ba:	689d      	ldr	r5, [r3, #8]
   211bc:	60e9      	str	r1, [r5, #12]
   211be:	608d      	str	r5, [r1, #8]
   211c0:	6851      	ldr	r1, [r2, #4]
   211c2:	f041 0101 	orr.w	r1, r1, #1
   211c6:	4620      	mov	r0, r4
   211c8:	6051      	str	r1, [r2, #4]
   211ca:	f103 0508 	add.w	r5, r3, #8
   211ce:	f000 fa8d 	bl	216ec <__malloc_unlock>
   211d2:	4628      	mov	r0, r5
   211d4:	b003      	add	sp, #12
   211d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211da:	f036 0607 	bics.w	r6, r6, #7
   211de:	f100 8094 	bmi.w	2130a <_malloc_r+0x18a>
   211e2:	42b1      	cmp	r1, r6
   211e4:	f200 8091 	bhi.w	2130a <_malloc_r+0x18a>
   211e8:	f000 fa7a 	bl	216e0 <__malloc_lock>
   211ec:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   211f0:	f0c0 819a 	bcc.w	21528 <_malloc_r+0x3a8>
   211f4:	0a73      	lsrs	r3, r6, #9
   211f6:	f000 808f 	beq.w	21318 <_malloc_r+0x198>
   211fa:	2b04      	cmp	r3, #4
   211fc:	f200 816f 	bhi.w	214de <_malloc_r+0x35e>
   21200:	09b3      	lsrs	r3, r6, #6
   21202:	f103 0039 	add.w	r0, r3, #57	; 0x39
   21206:	f103 0c38 	add.w	ip, r3, #56	; 0x38
   2120a:	00c3      	lsls	r3, r0, #3
   2120c:	4f9a      	ldr	r7, [pc, #616]	; (21478 <_malloc_r+0x2f8>)
   2120e:	443b      	add	r3, r7
   21210:	f1a3 0508 	sub.w	r5, r3, #8
   21214:	685b      	ldr	r3, [r3, #4]
   21216:	429d      	cmp	r5, r3
   21218:	d106      	bne.n	21228 <_malloc_r+0xa8>
   2121a:	e00c      	b.n	21236 <_malloc_r+0xb6>
   2121c:	2900      	cmp	r1, #0
   2121e:	f280 8127 	bge.w	21470 <_malloc_r+0x2f0>
   21222:	68db      	ldr	r3, [r3, #12]
   21224:	429d      	cmp	r5, r3
   21226:	d006      	beq.n	21236 <_malloc_r+0xb6>
   21228:	685a      	ldr	r2, [r3, #4]
   2122a:	f022 0203 	bic.w	r2, r2, #3
   2122e:	1b91      	subs	r1, r2, r6
   21230:	290f      	cmp	r1, #15
   21232:	ddf3      	ble.n	2121c <_malloc_r+0x9c>
   21234:	4660      	mov	r0, ip
   21236:	693d      	ldr	r5, [r7, #16]
   21238:	f8df c250 	ldr.w	ip, [pc, #592]	; 2148c <_malloc_r+0x30c>
   2123c:	4565      	cmp	r5, ip
   2123e:	d07c      	beq.n	2133a <_malloc_r+0x1ba>
   21240:	686a      	ldr	r2, [r5, #4]
   21242:	f022 0203 	bic.w	r2, r2, #3
   21246:	1b93      	subs	r3, r2, r6
   21248:	2b0f      	cmp	r3, #15
   2124a:	f300 817b 	bgt.w	21544 <_malloc_r+0x3c4>
   2124e:	2b00      	cmp	r3, #0
   21250:	e9c7 cc04 	strd	ip, ip, [r7, #16]
   21254:	f280 816c 	bge.w	21530 <_malloc_r+0x3b0>
   21258:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   2125c:	f080 811a 	bcs.w	21494 <_malloc_r+0x314>
   21260:	08d3      	lsrs	r3, r2, #3
   21262:	6879      	ldr	r1, [r7, #4]
   21264:	3301      	adds	r3, #1
   21266:	ea4f 1e52 	mov.w	lr, r2, lsr #5
   2126a:	2201      	movs	r2, #1
   2126c:	fa02 f20e 	lsl.w	r2, r2, lr
   21270:	430a      	orrs	r2, r1
   21272:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
   21276:	f8c5 e008 	str.w	lr, [r5, #8]
   2127a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   2127e:	3908      	subs	r1, #8
   21280:	60e9      	str	r1, [r5, #12]
   21282:	607a      	str	r2, [r7, #4]
   21284:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   21288:	f8ce 500c 	str.w	r5, [lr, #12]
   2128c:	1083      	asrs	r3, r0, #2
   2128e:	2101      	movs	r1, #1
   21290:	4099      	lsls	r1, r3
   21292:	4291      	cmp	r1, r2
   21294:	d857      	bhi.n	21346 <_malloc_r+0x1c6>
   21296:	4211      	tst	r1, r2
   21298:	d106      	bne.n	212a8 <_malloc_r+0x128>
   2129a:	f020 0003 	bic.w	r0, r0, #3
   2129e:	0049      	lsls	r1, r1, #1
   212a0:	4211      	tst	r1, r2
   212a2:	f100 0004 	add.w	r0, r0, #4
   212a6:	d0fa      	beq.n	2129e <_malloc_r+0x11e>
   212a8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   212ac:	464d      	mov	r5, r9
   212ae:	4686      	mov	lr, r0
   212b0:	f8d5 800c 	ldr.w	r8, [r5, #12]
   212b4:	4545      	cmp	r5, r8
   212b6:	d108      	bne.n	212ca <_malloc_r+0x14a>
   212b8:	e11d      	b.n	214f6 <_malloc_r+0x376>
   212ba:	2b00      	cmp	r3, #0
   212bc:	f280 8124 	bge.w	21508 <_malloc_r+0x388>
   212c0:	f8d8 800c 	ldr.w	r8, [r8, #12]
   212c4:	4545      	cmp	r5, r8
   212c6:	f000 8116 	beq.w	214f6 <_malloc_r+0x376>
   212ca:	f8d8 2004 	ldr.w	r2, [r8, #4]
   212ce:	f022 0203 	bic.w	r2, r2, #3
   212d2:	1b93      	subs	r3, r2, r6
   212d4:	2b0f      	cmp	r3, #15
   212d6:	ddf0      	ble.n	212ba <_malloc_r+0x13a>
   212d8:	4620      	mov	r0, r4
   212da:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
   212de:	eb08 0106 	add.w	r1, r8, r6
   212e2:	f046 0601 	orr.w	r6, r6, #1
   212e6:	f8c8 6004 	str.w	r6, [r8, #4]
   212ea:	60ec      	str	r4, [r5, #12]
   212ec:	60a5      	str	r5, [r4, #8]
   212ee:	f043 0401 	orr.w	r4, r3, #1
   212f2:	e9c7 1104 	strd	r1, r1, [r7, #16]
   212f6:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   212fa:	604c      	str	r4, [r1, #4]
   212fc:	f848 3002 	str.w	r3, [r8, r2]
   21300:	f000 f9f4 	bl	216ec <__malloc_unlock>
   21304:	f108 0508 	add.w	r5, r8, #8
   21308:	e002      	b.n	21310 <_malloc_r+0x190>
   2130a:	230c      	movs	r3, #12
   2130c:	6023      	str	r3, [r4, #0]
   2130e:	2500      	movs	r5, #0
   21310:	4628      	mov	r0, r5
   21312:	b003      	add	sp, #12
   21314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21318:	f44f 7300 	mov.w	r3, #512	; 0x200
   2131c:	2040      	movs	r0, #64	; 0x40
   2131e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   21322:	e773      	b.n	2120c <_malloc_r+0x8c>
   21324:	68d3      	ldr	r3, [r2, #12]
   21326:	429a      	cmp	r2, r3
   21328:	bf08      	it	eq
   2132a:	3002      	addeq	r0, #2
   2132c:	f47f af40 	bne.w	211b0 <_malloc_r+0x30>
   21330:	693d      	ldr	r5, [r7, #16]
   21332:	f8df c158 	ldr.w	ip, [pc, #344]	; 2148c <_malloc_r+0x30c>
   21336:	4565      	cmp	r5, ip
   21338:	d182      	bne.n	21240 <_malloc_r+0xc0>
   2133a:	687a      	ldr	r2, [r7, #4]
   2133c:	1083      	asrs	r3, r0, #2
   2133e:	2101      	movs	r1, #1
   21340:	4099      	lsls	r1, r3
   21342:	4291      	cmp	r1, r2
   21344:	d9a7      	bls.n	21296 <_malloc_r+0x116>
   21346:	68bd      	ldr	r5, [r7, #8]
   21348:	686b      	ldr	r3, [r5, #4]
   2134a:	f023 0903 	bic.w	r9, r3, #3
   2134e:	454e      	cmp	r6, r9
   21350:	d803      	bhi.n	2135a <_malloc_r+0x1da>
   21352:	eba9 0306 	sub.w	r3, r9, r6
   21356:	2b0f      	cmp	r3, #15
   21358:	dc7a      	bgt.n	21450 <_malloc_r+0x2d0>
   2135a:	f8df b134 	ldr.w	fp, [pc, #308]	; 21490 <_malloc_r+0x310>
   2135e:	4b47      	ldr	r3, [pc, #284]	; (2147c <_malloc_r+0x2fc>)
   21360:	f8db 2000 	ldr.w	r2, [fp]
   21364:	681b      	ldr	r3, [r3, #0]
   21366:	3201      	adds	r2, #1
   21368:	4433      	add	r3, r6
   2136a:	eb05 0a09 	add.w	sl, r5, r9
   2136e:	f000 8133 	beq.w	215d8 <_malloc_r+0x458>
   21372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   21376:	330f      	adds	r3, #15
   21378:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   2137c:	f028 080f 	bic.w	r8, r8, #15
   21380:	4641      	mov	r1, r8
   21382:	4620      	mov	r0, r4
   21384:	f001 f9ba 	bl	226fc <_sbrk_r>
   21388:	1c41      	adds	r1, r0, #1
   2138a:	4602      	mov	r2, r0
   2138c:	f000 80f3 	beq.w	21576 <_malloc_r+0x3f6>
   21390:	4582      	cmp	sl, r0
   21392:	f200 80ee 	bhi.w	21572 <_malloc_r+0x3f2>
   21396:	4b3a      	ldr	r3, [pc, #232]	; (21480 <_malloc_r+0x300>)
   21398:	6819      	ldr	r1, [r3, #0]
   2139a:	4441      	add	r1, r8
   2139c:	6019      	str	r1, [r3, #0]
   2139e:	4608      	mov	r0, r1
   213a0:	f000 814e 	beq.w	21640 <_malloc_r+0x4c0>
   213a4:	f8db 1000 	ldr.w	r1, [fp]
   213a8:	9301      	str	r3, [sp, #4]
   213aa:	3101      	adds	r1, #1
   213ac:	bf1b      	ittet	ne
   213ae:	eba2 010a 	subne.w	r1, r2, sl
   213b2:	1809      	addne	r1, r1, r0
   213b4:	f8cb 2000 	streq.w	r2, [fp]
   213b8:	6019      	strne	r1, [r3, #0]
   213ba:	f012 0b07 	ands.w	fp, r2, #7
   213be:	f000 8117 	beq.w	215f0 <_malloc_r+0x470>
   213c2:	f1cb 0108 	rsb	r1, fp, #8
   213c6:	440a      	add	r2, r1
   213c8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   213cc:	4490      	add	r8, r2
   213ce:	3108      	adds	r1, #8
   213d0:	eba1 0108 	sub.w	r1, r1, r8
   213d4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   213d8:	4651      	mov	r1, sl
   213da:	4620      	mov	r0, r4
   213dc:	9200      	str	r2, [sp, #0]
   213de:	f001 f98d 	bl	226fc <_sbrk_r>
   213e2:	1c42      	adds	r2, r0, #1
   213e4:	e9dd 2300 	ldrd	r2, r3, [sp]
   213e8:	f000 814f 	beq.w	2168a <_malloc_r+0x50a>
   213ec:	1a80      	subs	r0, r0, r2
   213ee:	eb00 080a 	add.w	r8, r0, sl
   213f2:	6819      	ldr	r1, [r3, #0]
   213f4:	60ba      	str	r2, [r7, #8]
   213f6:	f048 0001 	orr.w	r0, r8, #1
   213fa:	4451      	add	r1, sl
   213fc:	42bd      	cmp	r5, r7
   213fe:	6050      	str	r0, [r2, #4]
   21400:	6019      	str	r1, [r3, #0]
   21402:	f000 8129 	beq.w	21658 <_malloc_r+0x4d8>
   21406:	f1b9 0f0f 	cmp.w	r9, #15
   2140a:	f240 8127 	bls.w	2165c <_malloc_r+0x4dc>
   2140e:	6868      	ldr	r0, [r5, #4]
   21410:	f1a9 0c0c 	sub.w	ip, r9, #12
   21414:	f02c 0c07 	bic.w	ip, ip, #7
   21418:	f000 0001 	and.w	r0, r0, #1
   2141c:	ea40 000c 	orr.w	r0, r0, ip
   21420:	6068      	str	r0, [r5, #4]
   21422:	f04f 0e05 	mov.w	lr, #5
   21426:	eb05 000c 	add.w	r0, r5, ip
   2142a:	f1bc 0f0f 	cmp.w	ip, #15
   2142e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   21432:	f200 8132 	bhi.w	2169a <_malloc_r+0x51a>
   21436:	6850      	ldr	r0, [r2, #4]
   21438:	4615      	mov	r5, r2
   2143a:	4b12      	ldr	r3, [pc, #72]	; (21484 <_malloc_r+0x304>)
   2143c:	681a      	ldr	r2, [r3, #0]
   2143e:	428a      	cmp	r2, r1
   21440:	bf38      	it	cc
   21442:	6019      	strcc	r1, [r3, #0]
   21444:	4b10      	ldr	r3, [pc, #64]	; (21488 <_malloc_r+0x308>)
   21446:	681a      	ldr	r2, [r3, #0]
   21448:	428a      	cmp	r2, r1
   2144a:	bf38      	it	cc
   2144c:	6019      	strcc	r1, [r3, #0]
   2144e:	e094      	b.n	2157a <_malloc_r+0x3fa>
   21450:	19aa      	adds	r2, r5, r6
   21452:	f043 0301 	orr.w	r3, r3, #1
   21456:	f046 0601 	orr.w	r6, r6, #1
   2145a:	606e      	str	r6, [r5, #4]
   2145c:	4620      	mov	r0, r4
   2145e:	60ba      	str	r2, [r7, #8]
   21460:	6053      	str	r3, [r2, #4]
   21462:	f000 f943 	bl	216ec <__malloc_unlock>
   21466:	3508      	adds	r5, #8
   21468:	4628      	mov	r0, r5
   2146a:	b003      	add	sp, #12
   2146c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21470:	68d9      	ldr	r1, [r3, #12]
   21472:	441a      	add	r2, r3
   21474:	e6a1      	b.n	211ba <_malloc_r+0x3a>
   21476:	bf00      	nop
   21478:	200034a8 	.word	0x200034a8
   2147c:	200054dc 	.word	0x200054dc
   21480:	200054ac 	.word	0x200054ac
   21484:	200054d4 	.word	0x200054d4
   21488:	200054d8 	.word	0x200054d8
   2148c:	200034b0 	.word	0x200034b0
   21490:	200038b0 	.word	0x200038b0
   21494:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   21498:	ea4f 2352 	mov.w	r3, r2, lsr #9
   2149c:	d363      	bcc.n	21566 <_malloc_r+0x3e6>
   2149e:	2b14      	cmp	r3, #20
   214a0:	f200 80b7 	bhi.w	21612 <_malloc_r+0x492>
   214a4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   214a8:	00c9      	lsls	r1, r1, #3
   214aa:	335b      	adds	r3, #91	; 0x5b
   214ac:	eb07 0e01 	add.w	lr, r7, r1
   214b0:	5879      	ldr	r1, [r7, r1]
   214b2:	f1ae 0e08 	sub.w	lr, lr, #8
   214b6:	458e      	cmp	lr, r1
   214b8:	f000 8091 	beq.w	215de <_malloc_r+0x45e>
   214bc:	684b      	ldr	r3, [r1, #4]
   214be:	f023 0303 	bic.w	r3, r3, #3
   214c2:	4293      	cmp	r3, r2
   214c4:	d902      	bls.n	214cc <_malloc_r+0x34c>
   214c6:	6889      	ldr	r1, [r1, #8]
   214c8:	458e      	cmp	lr, r1
   214ca:	d1f7      	bne.n	214bc <_malloc_r+0x33c>
   214cc:	f8d1 e00c 	ldr.w	lr, [r1, #12]
   214d0:	687a      	ldr	r2, [r7, #4]
   214d2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
   214d6:	f8ce 5008 	str.w	r5, [lr, #8]
   214da:	60cd      	str	r5, [r1, #12]
   214dc:	e6d6      	b.n	2128c <_malloc_r+0x10c>
   214de:	2b14      	cmp	r3, #20
   214e0:	d959      	bls.n	21596 <_malloc_r+0x416>
   214e2:	2b54      	cmp	r3, #84	; 0x54
   214e4:	f200 809d 	bhi.w	21622 <_malloc_r+0x4a2>
   214e8:	0b33      	lsrs	r3, r6, #12
   214ea:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   214ee:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
   214f2:	00c3      	lsls	r3, r0, #3
   214f4:	e68a      	b.n	2120c <_malloc_r+0x8c>
   214f6:	f10e 0e01 	add.w	lr, lr, #1
   214fa:	f01e 0f03 	tst.w	lr, #3
   214fe:	f105 0508 	add.w	r5, r5, #8
   21502:	f47f aed5 	bne.w	212b0 <_malloc_r+0x130>
   21506:	e051      	b.n	215ac <_malloc_r+0x42c>
   21508:	4442      	add	r2, r8
   2150a:	4645      	mov	r5, r8
   2150c:	6853      	ldr	r3, [r2, #4]
   2150e:	f8d8 100c 	ldr.w	r1, [r8, #12]
   21512:	f043 0301 	orr.w	r3, r3, #1
   21516:	6053      	str	r3, [r2, #4]
   21518:	f855 3f08 	ldr.w	r3, [r5, #8]!
   2151c:	4620      	mov	r0, r4
   2151e:	60d9      	str	r1, [r3, #12]
   21520:	608b      	str	r3, [r1, #8]
   21522:	f000 f8e3 	bl	216ec <__malloc_unlock>
   21526:	e6f3      	b.n	21310 <_malloc_r+0x190>
   21528:	08f0      	lsrs	r0, r6, #3
   2152a:	f106 0208 	add.w	r2, r6, #8
   2152e:	e637      	b.n	211a0 <_malloc_r+0x20>
   21530:	442a      	add	r2, r5
   21532:	4620      	mov	r0, r4
   21534:	6853      	ldr	r3, [r2, #4]
   21536:	f043 0301 	orr.w	r3, r3, #1
   2153a:	6053      	str	r3, [r2, #4]
   2153c:	3508      	adds	r5, #8
   2153e:	f000 f8d5 	bl	216ec <__malloc_unlock>
   21542:	e6e5      	b.n	21310 <_malloc_r+0x190>
   21544:	19a9      	adds	r1, r5, r6
   21546:	4620      	mov	r0, r4
   21548:	f046 0601 	orr.w	r6, r6, #1
   2154c:	f043 0401 	orr.w	r4, r3, #1
   21550:	606e      	str	r6, [r5, #4]
   21552:	e9c7 1104 	strd	r1, r1, [r7, #16]
   21556:	e9c1 cc02 	strd	ip, ip, [r1, #8]
   2155a:	604c      	str	r4, [r1, #4]
   2155c:	50ab      	str	r3, [r5, r2]
   2155e:	f000 f8c5 	bl	216ec <__malloc_unlock>
   21562:	3508      	adds	r5, #8
   21564:	e6d4      	b.n	21310 <_malloc_r+0x190>
   21566:	0993      	lsrs	r3, r2, #6
   21568:	f103 0139 	add.w	r1, r3, #57	; 0x39
   2156c:	00c9      	lsls	r1, r1, #3
   2156e:	3338      	adds	r3, #56	; 0x38
   21570:	e79c      	b.n	214ac <_malloc_r+0x32c>
   21572:	42bd      	cmp	r5, r7
   21574:	d05f      	beq.n	21636 <_malloc_r+0x4b6>
   21576:	68bd      	ldr	r5, [r7, #8]
   21578:	6868      	ldr	r0, [r5, #4]
   2157a:	f020 0803 	bic.w	r8, r0, #3
   2157e:	4546      	cmp	r6, r8
   21580:	eba8 0306 	sub.w	r3, r8, r6
   21584:	d802      	bhi.n	2158c <_malloc_r+0x40c>
   21586:	2b0f      	cmp	r3, #15
   21588:	f73f af62 	bgt.w	21450 <_malloc_r+0x2d0>
   2158c:	4620      	mov	r0, r4
   2158e:	f000 f8ad 	bl	216ec <__malloc_unlock>
   21592:	2500      	movs	r5, #0
   21594:	e6bc      	b.n	21310 <_malloc_r+0x190>
   21596:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2159a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
   2159e:	00c3      	lsls	r3, r0, #3
   215a0:	e634      	b.n	2120c <_malloc_r+0x8c>
   215a2:	f859 3908 	ldr.w	r3, [r9], #-8
   215a6:	454b      	cmp	r3, r9
   215a8:	f040 8096 	bne.w	216d8 <_malloc_r+0x558>
   215ac:	f010 0f03 	tst.w	r0, #3
   215b0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   215b4:	d1f5      	bne.n	215a2 <_malloc_r+0x422>
   215b6:	687b      	ldr	r3, [r7, #4]
   215b8:	ea23 0301 	bic.w	r3, r3, r1
   215bc:	607b      	str	r3, [r7, #4]
   215be:	0049      	lsls	r1, r1, #1
   215c0:	4299      	cmp	r1, r3
   215c2:	f63f aec0 	bhi.w	21346 <_malloc_r+0x1c6>
   215c6:	b919      	cbnz	r1, 215d0 <_malloc_r+0x450>
   215c8:	e6bd      	b.n	21346 <_malloc_r+0x1c6>
   215ca:	0049      	lsls	r1, r1, #1
   215cc:	f10e 0e04 	add.w	lr, lr, #4
   215d0:	4219      	tst	r1, r3
   215d2:	d0fa      	beq.n	215ca <_malloc_r+0x44a>
   215d4:	4670      	mov	r0, lr
   215d6:	e667      	b.n	212a8 <_malloc_r+0x128>
   215d8:	f103 0810 	add.w	r8, r3, #16
   215dc:	e6d0      	b.n	21380 <_malloc_r+0x200>
   215de:	109a      	asrs	r2, r3, #2
   215e0:	f04f 0801 	mov.w	r8, #1
   215e4:	687b      	ldr	r3, [r7, #4]
   215e6:	fa08 f202 	lsl.w	r2, r8, r2
   215ea:	431a      	orrs	r2, r3
   215ec:	607a      	str	r2, [r7, #4]
   215ee:	e770      	b.n	214d2 <_malloc_r+0x352>
   215f0:	eb02 0108 	add.w	r1, r2, r8
   215f4:	4249      	negs	r1, r1
   215f6:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   215fa:	4651      	mov	r1, sl
   215fc:	4620      	mov	r0, r4
   215fe:	9200      	str	r2, [sp, #0]
   21600:	f001 f87c 	bl	226fc <_sbrk_r>
   21604:	1c43      	adds	r3, r0, #1
   21606:	e9dd 2300 	ldrd	r2, r3, [sp]
   2160a:	f47f aeef 	bne.w	213ec <_malloc_r+0x26c>
   2160e:	46da      	mov	sl, fp
   21610:	e6ef      	b.n	213f2 <_malloc_r+0x272>
   21612:	2b54      	cmp	r3, #84	; 0x54
   21614:	d825      	bhi.n	21662 <_malloc_r+0x4e2>
   21616:	0b13      	lsrs	r3, r2, #12
   21618:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   2161c:	00c9      	lsls	r1, r1, #3
   2161e:	336e      	adds	r3, #110	; 0x6e
   21620:	e744      	b.n	214ac <_malloc_r+0x32c>
   21622:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   21626:	d825      	bhi.n	21674 <_malloc_r+0x4f4>
   21628:	0bf3      	lsrs	r3, r6, #15
   2162a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2162e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
   21632:	00c3      	lsls	r3, r0, #3
   21634:	e5ea      	b.n	2120c <_malloc_r+0x8c>
   21636:	4b29      	ldr	r3, [pc, #164]	; (216dc <_malloc_r+0x55c>)
   21638:	6818      	ldr	r0, [r3, #0]
   2163a:	4440      	add	r0, r8
   2163c:	6018      	str	r0, [r3, #0]
   2163e:	e6b1      	b.n	213a4 <_malloc_r+0x224>
   21640:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   21644:	f1bc 0f00 	cmp.w	ip, #0
   21648:	f47f aeac 	bne.w	213a4 <_malloc_r+0x224>
   2164c:	68bd      	ldr	r5, [r7, #8]
   2164e:	44c8      	add	r8, r9
   21650:	f048 0001 	orr.w	r0, r8, #1
   21654:	6068      	str	r0, [r5, #4]
   21656:	e6f0      	b.n	2143a <_malloc_r+0x2ba>
   21658:	4615      	mov	r5, r2
   2165a:	e6ee      	b.n	2143a <_malloc_r+0x2ba>
   2165c:	2301      	movs	r3, #1
   2165e:	6053      	str	r3, [r2, #4]
   21660:	e794      	b.n	2158c <_malloc_r+0x40c>
   21662:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   21666:	d823      	bhi.n	216b0 <_malloc_r+0x530>
   21668:	0bd3      	lsrs	r3, r2, #15
   2166a:	f103 0178 	add.w	r1, r3, #120	; 0x78
   2166e:	00c9      	lsls	r1, r1, #3
   21670:	3377      	adds	r3, #119	; 0x77
   21672:	e71b      	b.n	214ac <_malloc_r+0x32c>
   21674:	f240 5254 	movw	r2, #1364	; 0x554
   21678:	4293      	cmp	r3, r2
   2167a:	d823      	bhi.n	216c4 <_malloc_r+0x544>
   2167c:	0cb3      	lsrs	r3, r6, #18
   2167e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   21682:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
   21686:	00c3      	lsls	r3, r0, #3
   21688:	e5c0      	b.n	2120c <_malloc_r+0x8c>
   2168a:	f1ab 0b08 	sub.w	fp, fp, #8
   2168e:	44d8      	add	r8, fp
   21690:	eba8 0802 	sub.w	r8, r8, r2
   21694:	f04f 0a00 	mov.w	sl, #0
   21698:	e6ab      	b.n	213f2 <_malloc_r+0x272>
   2169a:	f105 0108 	add.w	r1, r5, #8
   2169e:	4620      	mov	r0, r4
   216a0:	9300      	str	r3, [sp, #0]
   216a2:	f001 fbaf 	bl	22e04 <_free_r>
   216a6:	68bd      	ldr	r5, [r7, #8]
   216a8:	9b00      	ldr	r3, [sp, #0]
   216aa:	6868      	ldr	r0, [r5, #4]
   216ac:	6819      	ldr	r1, [r3, #0]
   216ae:	e6c4      	b.n	2143a <_malloc_r+0x2ba>
   216b0:	f240 5154 	movw	r1, #1364	; 0x554
   216b4:	428b      	cmp	r3, r1
   216b6:	d80b      	bhi.n	216d0 <_malloc_r+0x550>
   216b8:	0c93      	lsrs	r3, r2, #18
   216ba:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   216be:	00c9      	lsls	r1, r1, #3
   216c0:	337c      	adds	r3, #124	; 0x7c
   216c2:	e6f3      	b.n	214ac <_malloc_r+0x32c>
   216c4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   216c8:	207f      	movs	r0, #127	; 0x7f
   216ca:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   216ce:	e59d      	b.n	2120c <_malloc_r+0x8c>
   216d0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   216d4:	237e      	movs	r3, #126	; 0x7e
   216d6:	e6e9      	b.n	214ac <_malloc_r+0x32c>
   216d8:	687b      	ldr	r3, [r7, #4]
   216da:	e770      	b.n	215be <_malloc_r+0x43e>
   216dc:	200054ac 	.word	0x200054ac

000216e0 <__malloc_lock>:
   216e0:	4801      	ldr	r0, [pc, #4]	; (216e8 <__malloc_lock+0x8>)
   216e2:	f001 ba31 	b.w	22b48 <__retarget_lock_acquire_recursive>
   216e6:	bf00      	nop
   216e8:	200054a4 	.word	0x200054a4

000216ec <__malloc_unlock>:
   216ec:	4801      	ldr	r0, [pc, #4]	; (216f4 <__malloc_unlock+0x8>)
   216ee:	f001 ba2d 	b.w	22b4c <__retarget_lock_release_recursive>
   216f2:	bf00      	nop
   216f4:	200054a4 	.word	0x200054a4

000216f8 <realloc>:
   216f8:	b410      	push	{r4}
   216fa:	4c04      	ldr	r4, [pc, #16]	; (2170c <realloc+0x14>)
   216fc:	4603      	mov	r3, r0
   216fe:	460a      	mov	r2, r1
   21700:	6820      	ldr	r0, [r4, #0]
   21702:	f85d 4b04 	ldr.w	r4, [sp], #4
   21706:	4619      	mov	r1, r3
   21708:	f000 b802 	b.w	21710 <_realloc_r>
   2170c:	200038c4 	.word	0x200038c4

00021710 <_realloc_r>:
   21710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21714:	4617      	mov	r7, r2
   21716:	2900      	cmp	r1, #0
   21718:	f000 8098 	beq.w	2184c <_realloc_r+0x13c>
   2171c:	460c      	mov	r4, r1
   2171e:	f107 050b 	add.w	r5, r7, #11
   21722:	4680      	mov	r8, r0
   21724:	f7ff ffdc 	bl	216e0 <__malloc_lock>
   21728:	2d16      	cmp	r5, #22
   2172a:	f854 1c04 	ldr.w	r1, [r4, #-4]
   2172e:	d85b      	bhi.n	217e8 <_realloc_r+0xd8>
   21730:	2510      	movs	r5, #16
   21732:	462a      	mov	r2, r5
   21734:	42af      	cmp	r7, r5
   21736:	d85c      	bhi.n	217f2 <_realloc_r+0xe2>
   21738:	f021 0603 	bic.w	r6, r1, #3
   2173c:	4296      	cmp	r6, r2
   2173e:	f1a4 0908 	sub.w	r9, r4, #8
   21742:	da62      	bge.n	2180a <_realloc_r+0xfa>
   21744:	4bbc      	ldr	r3, [pc, #752]	; (21a38 <_realloc_r+0x328>)
   21746:	f8d3 c008 	ldr.w	ip, [r3, #8]
   2174a:	eb09 0006 	add.w	r0, r9, r6
   2174e:	4584      	cmp	ip, r0
   21750:	f000 8097 	beq.w	21882 <_realloc_r+0x172>
   21754:	f8d0 c004 	ldr.w	ip, [r0, #4]
   21758:	f02c 0301 	bic.w	r3, ip, #1
   2175c:	4403      	add	r3, r0
   2175e:	685b      	ldr	r3, [r3, #4]
   21760:	07db      	lsls	r3, r3, #31
   21762:	d468      	bmi.n	21836 <_realloc_r+0x126>
   21764:	f02c 0c03 	bic.w	ip, ip, #3
   21768:	eb06 030c 	add.w	r3, r6, ip
   2176c:	4293      	cmp	r3, r2
   2176e:	da47      	bge.n	21800 <_realloc_r+0xf0>
   21770:	07cb      	lsls	r3, r1, #31
   21772:	d410      	bmi.n	21796 <_realloc_r+0x86>
   21774:	f854 3c08 	ldr.w	r3, [r4, #-8]
   21778:	eba9 0a03 	sub.w	sl, r9, r3
   2177c:	f8da 3004 	ldr.w	r3, [sl, #4]
   21780:	f023 0103 	bic.w	r1, r3, #3
   21784:	448c      	add	ip, r1
   21786:	44b4      	add	ip, r6
   21788:	4594      	cmp	ip, r2
   2178a:	f280 8111 	bge.w	219b0 <_realloc_r+0x2a0>
   2178e:	1873      	adds	r3, r6, r1
   21790:	4293      	cmp	r3, r2
   21792:	f280 80e8 	bge.w	21966 <_realloc_r+0x256>
   21796:	4639      	mov	r1, r7
   21798:	4640      	mov	r0, r8
   2179a:	f7ff fcf1 	bl	21180 <_malloc_r>
   2179e:	4607      	mov	r7, r0
   217a0:	b1e0      	cbz	r0, 217dc <_realloc_r+0xcc>
   217a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   217a6:	f023 0301 	bic.w	r3, r3, #1
   217aa:	444b      	add	r3, r9
   217ac:	f1a0 0208 	sub.w	r2, r0, #8
   217b0:	4293      	cmp	r3, r2
   217b2:	f000 80d2 	beq.w	2195a <_realloc_r+0x24a>
   217b6:	1f32      	subs	r2, r6, #4
   217b8:	2a24      	cmp	r2, #36	; 0x24
   217ba:	f200 80f5 	bhi.w	219a8 <_realloc_r+0x298>
   217be:	2a13      	cmp	r2, #19
   217c0:	f200 80ac 	bhi.w	2191c <_realloc_r+0x20c>
   217c4:	4603      	mov	r3, r0
   217c6:	4622      	mov	r2, r4
   217c8:	6811      	ldr	r1, [r2, #0]
   217ca:	6019      	str	r1, [r3, #0]
   217cc:	6851      	ldr	r1, [r2, #4]
   217ce:	6059      	str	r1, [r3, #4]
   217d0:	6892      	ldr	r2, [r2, #8]
   217d2:	609a      	str	r2, [r3, #8]
   217d4:	4621      	mov	r1, r4
   217d6:	4640      	mov	r0, r8
   217d8:	f001 fb14 	bl	22e04 <_free_r>
   217dc:	4640      	mov	r0, r8
   217de:	f7ff ff85 	bl	216ec <__malloc_unlock>
   217e2:	4638      	mov	r0, r7
   217e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217e8:	f025 0507 	bic.w	r5, r5, #7
   217ec:	2d00      	cmp	r5, #0
   217ee:	462a      	mov	r2, r5
   217f0:	daa0      	bge.n	21734 <_realloc_r+0x24>
   217f2:	230c      	movs	r3, #12
   217f4:	f8c8 3000 	str.w	r3, [r8]
   217f8:	2700      	movs	r7, #0
   217fa:	4638      	mov	r0, r7
   217fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21800:	461e      	mov	r6, r3
   21802:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   21806:	60d3      	str	r3, [r2, #12]
   21808:	609a      	str	r2, [r3, #8]
   2180a:	1b73      	subs	r3, r6, r5
   2180c:	2b0f      	cmp	r3, #15
   2180e:	d822      	bhi.n	21856 <_realloc_r+0x146>
   21810:	f8d9 3004 	ldr.w	r3, [r9, #4]
   21814:	f003 0301 	and.w	r3, r3, #1
   21818:	4333      	orrs	r3, r6
   2181a:	444e      	add	r6, r9
   2181c:	f8c9 3004 	str.w	r3, [r9, #4]
   21820:	6873      	ldr	r3, [r6, #4]
   21822:	f043 0301 	orr.w	r3, r3, #1
   21826:	6073      	str	r3, [r6, #4]
   21828:	4640      	mov	r0, r8
   2182a:	4627      	mov	r7, r4
   2182c:	f7ff ff5e 	bl	216ec <__malloc_unlock>
   21830:	4638      	mov	r0, r7
   21832:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21836:	07c9      	lsls	r1, r1, #31
   21838:	d4ad      	bmi.n	21796 <_realloc_r+0x86>
   2183a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   2183e:	eba9 0a03 	sub.w	sl, r9, r3
   21842:	f8da 1004 	ldr.w	r1, [sl, #4]
   21846:	f021 0103 	bic.w	r1, r1, #3
   2184a:	e7a0      	b.n	2178e <_realloc_r+0x7e>
   2184c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21850:	4611      	mov	r1, r2
   21852:	f7ff bc95 	b.w	21180 <_malloc_r>
   21856:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2185a:	eb09 0105 	add.w	r1, r9, r5
   2185e:	f002 0201 	and.w	r2, r2, #1
   21862:	444e      	add	r6, r9
   21864:	f043 0301 	orr.w	r3, r3, #1
   21868:	432a      	orrs	r2, r5
   2186a:	f8c9 2004 	str.w	r2, [r9, #4]
   2186e:	604b      	str	r3, [r1, #4]
   21870:	6873      	ldr	r3, [r6, #4]
   21872:	f043 0301 	orr.w	r3, r3, #1
   21876:	3108      	adds	r1, #8
   21878:	6073      	str	r3, [r6, #4]
   2187a:	4640      	mov	r0, r8
   2187c:	f001 fac2 	bl	22e04 <_free_r>
   21880:	e7d2      	b.n	21828 <_realloc_r+0x118>
   21882:	f8dc 0004 	ldr.w	r0, [ip, #4]
   21886:	f020 0b03 	bic.w	fp, r0, #3
   2188a:	eb06 0c0b 	add.w	ip, r6, fp
   2188e:	f105 0010 	add.w	r0, r5, #16
   21892:	4584      	cmp	ip, r0
   21894:	da4d      	bge.n	21932 <_realloc_r+0x222>
   21896:	07c9      	lsls	r1, r1, #31
   21898:	f53f af7d 	bmi.w	21796 <_realloc_r+0x86>
   2189c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   218a0:	eba9 0a01 	sub.w	sl, r9, r1
   218a4:	f8da 1004 	ldr.w	r1, [sl, #4]
   218a8:	f021 0103 	bic.w	r1, r1, #3
   218ac:	448b      	add	fp, r1
   218ae:	44b3      	add	fp, r6
   218b0:	4558      	cmp	r0, fp
   218b2:	f73f af6c 	bgt.w	2178e <_realloc_r+0x7e>
   218b6:	4657      	mov	r7, sl
   218b8:	f8da 100c 	ldr.w	r1, [sl, #12]
   218bc:	f857 0f08 	ldr.w	r0, [r7, #8]!
   218c0:	1f32      	subs	r2, r6, #4
   218c2:	2a24      	cmp	r2, #36	; 0x24
   218c4:	60c1      	str	r1, [r0, #12]
   218c6:	6088      	str	r0, [r1, #8]
   218c8:	f200 80db 	bhi.w	21a82 <_realloc_r+0x372>
   218cc:	2a13      	cmp	r2, #19
   218ce:	f240 80d6 	bls.w	21a7e <_realloc_r+0x36e>
   218d2:	6821      	ldr	r1, [r4, #0]
   218d4:	f8ca 1008 	str.w	r1, [sl, #8]
   218d8:	6861      	ldr	r1, [r4, #4]
   218da:	f8ca 100c 	str.w	r1, [sl, #12]
   218de:	2a1b      	cmp	r2, #27
   218e0:	f200 80df 	bhi.w	21aa2 <_realloc_r+0x392>
   218e4:	3408      	adds	r4, #8
   218e6:	f10a 0210 	add.w	r2, sl, #16
   218ea:	6821      	ldr	r1, [r4, #0]
   218ec:	6011      	str	r1, [r2, #0]
   218ee:	6861      	ldr	r1, [r4, #4]
   218f0:	6051      	str	r1, [r2, #4]
   218f2:	68a1      	ldr	r1, [r4, #8]
   218f4:	6091      	str	r1, [r2, #8]
   218f6:	eb0a 0105 	add.w	r1, sl, r5
   218fa:	ebab 0205 	sub.w	r2, fp, r5
   218fe:	f042 0201 	orr.w	r2, r2, #1
   21902:	6099      	str	r1, [r3, #8]
   21904:	604a      	str	r2, [r1, #4]
   21906:	f8da 3004 	ldr.w	r3, [sl, #4]
   2190a:	f003 0301 	and.w	r3, r3, #1
   2190e:	432b      	orrs	r3, r5
   21910:	4640      	mov	r0, r8
   21912:	f8ca 3004 	str.w	r3, [sl, #4]
   21916:	f7ff fee9 	bl	216ec <__malloc_unlock>
   2191a:	e76e      	b.n	217fa <_realloc_r+0xea>
   2191c:	6823      	ldr	r3, [r4, #0]
   2191e:	6003      	str	r3, [r0, #0]
   21920:	6863      	ldr	r3, [r4, #4]
   21922:	6043      	str	r3, [r0, #4]
   21924:	2a1b      	cmp	r2, #27
   21926:	d868      	bhi.n	219fa <_realloc_r+0x2ea>
   21928:	f104 0208 	add.w	r2, r4, #8
   2192c:	f100 0308 	add.w	r3, r0, #8
   21930:	e74a      	b.n	217c8 <_realloc_r+0xb8>
   21932:	eb09 0205 	add.w	r2, r9, r5
   21936:	609a      	str	r2, [r3, #8]
   21938:	ebac 0305 	sub.w	r3, ip, r5
   2193c:	f043 0301 	orr.w	r3, r3, #1
   21940:	6053      	str	r3, [r2, #4]
   21942:	f854 3c04 	ldr.w	r3, [r4, #-4]
   21946:	f003 0301 	and.w	r3, r3, #1
   2194a:	432b      	orrs	r3, r5
   2194c:	4640      	mov	r0, r8
   2194e:	f844 3c04 	str.w	r3, [r4, #-4]
   21952:	f7ff fecb 	bl	216ec <__malloc_unlock>
   21956:	4627      	mov	r7, r4
   21958:	e74f      	b.n	217fa <_realloc_r+0xea>
   2195a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2195e:	f023 0303 	bic.w	r3, r3, #3
   21962:	441e      	add	r6, r3
   21964:	e751      	b.n	2180a <_realloc_r+0xfa>
   21966:	4657      	mov	r7, sl
   21968:	f8da 100c 	ldr.w	r1, [sl, #12]
   2196c:	f857 0f08 	ldr.w	r0, [r7, #8]!
   21970:	1f32      	subs	r2, r6, #4
   21972:	2a24      	cmp	r2, #36	; 0x24
   21974:	60c1      	str	r1, [r0, #12]
   21976:	6088      	str	r0, [r1, #8]
   21978:	d84c      	bhi.n	21a14 <_realloc_r+0x304>
   2197a:	2a13      	cmp	r2, #19
   2197c:	d948      	bls.n	21a10 <_realloc_r+0x300>
   2197e:	6821      	ldr	r1, [r4, #0]
   21980:	f8ca 1008 	str.w	r1, [sl, #8]
   21984:	6861      	ldr	r1, [r4, #4]
   21986:	f8ca 100c 	str.w	r1, [sl, #12]
   2198a:	2a1b      	cmp	r2, #27
   2198c:	d856      	bhi.n	21a3c <_realloc_r+0x32c>
   2198e:	3408      	adds	r4, #8
   21990:	f10a 0210 	add.w	r2, sl, #16
   21994:	461e      	mov	r6, r3
   21996:	6823      	ldr	r3, [r4, #0]
   21998:	6013      	str	r3, [r2, #0]
   2199a:	6863      	ldr	r3, [r4, #4]
   2199c:	6053      	str	r3, [r2, #4]
   2199e:	68a3      	ldr	r3, [r4, #8]
   219a0:	6093      	str	r3, [r2, #8]
   219a2:	46d1      	mov	r9, sl
   219a4:	463c      	mov	r4, r7
   219a6:	e730      	b.n	2180a <_realloc_r+0xfa>
   219a8:	4621      	mov	r1, r4
   219aa:	f000 fd1d 	bl	223e8 <memmove>
   219ae:	e711      	b.n	217d4 <_realloc_r+0xc4>
   219b0:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   219b4:	4657      	mov	r7, sl
   219b6:	60cb      	str	r3, [r1, #12]
   219b8:	6099      	str	r1, [r3, #8]
   219ba:	f857 1f08 	ldr.w	r1, [r7, #8]!
   219be:	f8da 300c 	ldr.w	r3, [sl, #12]
   219c2:	60cb      	str	r3, [r1, #12]
   219c4:	1f32      	subs	r2, r6, #4
   219c6:	2a24      	cmp	r2, #36	; 0x24
   219c8:	6099      	str	r1, [r3, #8]
   219ca:	d82d      	bhi.n	21a28 <_realloc_r+0x318>
   219cc:	2a13      	cmp	r2, #19
   219ce:	d929      	bls.n	21a24 <_realloc_r+0x314>
   219d0:	6823      	ldr	r3, [r4, #0]
   219d2:	f8ca 3008 	str.w	r3, [sl, #8]
   219d6:	6863      	ldr	r3, [r4, #4]
   219d8:	f8ca 300c 	str.w	r3, [sl, #12]
   219dc:	2a1b      	cmp	r2, #27
   219de:	d842      	bhi.n	21a66 <_realloc_r+0x356>
   219e0:	3408      	adds	r4, #8
   219e2:	f10a 0310 	add.w	r3, sl, #16
   219e6:	6822      	ldr	r2, [r4, #0]
   219e8:	601a      	str	r2, [r3, #0]
   219ea:	6862      	ldr	r2, [r4, #4]
   219ec:	605a      	str	r2, [r3, #4]
   219ee:	68a2      	ldr	r2, [r4, #8]
   219f0:	609a      	str	r2, [r3, #8]
   219f2:	4666      	mov	r6, ip
   219f4:	46d1      	mov	r9, sl
   219f6:	463c      	mov	r4, r7
   219f8:	e707      	b.n	2180a <_realloc_r+0xfa>
   219fa:	68a3      	ldr	r3, [r4, #8]
   219fc:	6083      	str	r3, [r0, #8]
   219fe:	68e3      	ldr	r3, [r4, #12]
   21a00:	60c3      	str	r3, [r0, #12]
   21a02:	2a24      	cmp	r2, #36	; 0x24
   21a04:	d026      	beq.n	21a54 <_realloc_r+0x344>
   21a06:	f104 0210 	add.w	r2, r4, #16
   21a0a:	f100 0310 	add.w	r3, r0, #16
   21a0e:	e6db      	b.n	217c8 <_realloc_r+0xb8>
   21a10:	463a      	mov	r2, r7
   21a12:	e7bf      	b.n	21994 <_realloc_r+0x284>
   21a14:	4621      	mov	r1, r4
   21a16:	4638      	mov	r0, r7
   21a18:	461e      	mov	r6, r3
   21a1a:	46d1      	mov	r9, sl
   21a1c:	f000 fce4 	bl	223e8 <memmove>
   21a20:	463c      	mov	r4, r7
   21a22:	e6f2      	b.n	2180a <_realloc_r+0xfa>
   21a24:	463b      	mov	r3, r7
   21a26:	e7de      	b.n	219e6 <_realloc_r+0x2d6>
   21a28:	4621      	mov	r1, r4
   21a2a:	4638      	mov	r0, r7
   21a2c:	4666      	mov	r6, ip
   21a2e:	46d1      	mov	r9, sl
   21a30:	f000 fcda 	bl	223e8 <memmove>
   21a34:	463c      	mov	r4, r7
   21a36:	e6e8      	b.n	2180a <_realloc_r+0xfa>
   21a38:	200034a8 	.word	0x200034a8
   21a3c:	68a1      	ldr	r1, [r4, #8]
   21a3e:	f8ca 1010 	str.w	r1, [sl, #16]
   21a42:	68e1      	ldr	r1, [r4, #12]
   21a44:	f8ca 1014 	str.w	r1, [sl, #20]
   21a48:	2a24      	cmp	r2, #36	; 0x24
   21a4a:	d020      	beq.n	21a8e <_realloc_r+0x37e>
   21a4c:	3410      	adds	r4, #16
   21a4e:	f10a 0218 	add.w	r2, sl, #24
   21a52:	e79f      	b.n	21994 <_realloc_r+0x284>
   21a54:	6923      	ldr	r3, [r4, #16]
   21a56:	6103      	str	r3, [r0, #16]
   21a58:	6961      	ldr	r1, [r4, #20]
   21a5a:	6141      	str	r1, [r0, #20]
   21a5c:	f104 0218 	add.w	r2, r4, #24
   21a60:	f100 0318 	add.w	r3, r0, #24
   21a64:	e6b0      	b.n	217c8 <_realloc_r+0xb8>
   21a66:	68a3      	ldr	r3, [r4, #8]
   21a68:	f8ca 3010 	str.w	r3, [sl, #16]
   21a6c:	68e3      	ldr	r3, [r4, #12]
   21a6e:	f8ca 3014 	str.w	r3, [sl, #20]
   21a72:	2a24      	cmp	r2, #36	; 0x24
   21a74:	d021      	beq.n	21aba <_realloc_r+0x3aa>
   21a76:	3410      	adds	r4, #16
   21a78:	f10a 0318 	add.w	r3, sl, #24
   21a7c:	e7b3      	b.n	219e6 <_realloc_r+0x2d6>
   21a7e:	463a      	mov	r2, r7
   21a80:	e733      	b.n	218ea <_realloc_r+0x1da>
   21a82:	4621      	mov	r1, r4
   21a84:	4638      	mov	r0, r7
   21a86:	f000 fcaf 	bl	223e8 <memmove>
   21a8a:	4b16      	ldr	r3, [pc, #88]	; (21ae4 <_realloc_r+0x3d4>)
   21a8c:	e733      	b.n	218f6 <_realloc_r+0x1e6>
   21a8e:	6922      	ldr	r2, [r4, #16]
   21a90:	f8ca 2018 	str.w	r2, [sl, #24]
   21a94:	6962      	ldr	r2, [r4, #20]
   21a96:	f8ca 201c 	str.w	r2, [sl, #28]
   21a9a:	3418      	adds	r4, #24
   21a9c:	f10a 0220 	add.w	r2, sl, #32
   21aa0:	e778      	b.n	21994 <_realloc_r+0x284>
   21aa2:	68a1      	ldr	r1, [r4, #8]
   21aa4:	f8ca 1010 	str.w	r1, [sl, #16]
   21aa8:	68e1      	ldr	r1, [r4, #12]
   21aaa:	f8ca 1014 	str.w	r1, [sl, #20]
   21aae:	2a24      	cmp	r2, #36	; 0x24
   21ab0:	d00d      	beq.n	21ace <_realloc_r+0x3be>
   21ab2:	3410      	adds	r4, #16
   21ab4:	f10a 0218 	add.w	r2, sl, #24
   21ab8:	e717      	b.n	218ea <_realloc_r+0x1da>
   21aba:	6923      	ldr	r3, [r4, #16]
   21abc:	f8ca 3018 	str.w	r3, [sl, #24]
   21ac0:	6963      	ldr	r3, [r4, #20]
   21ac2:	f8ca 301c 	str.w	r3, [sl, #28]
   21ac6:	3418      	adds	r4, #24
   21ac8:	f10a 0320 	add.w	r3, sl, #32
   21acc:	e78b      	b.n	219e6 <_realloc_r+0x2d6>
   21ace:	6922      	ldr	r2, [r4, #16]
   21ad0:	f8ca 2018 	str.w	r2, [sl, #24]
   21ad4:	6962      	ldr	r2, [r4, #20]
   21ad6:	f8ca 201c 	str.w	r2, [sl, #28]
   21ada:	3418      	adds	r4, #24
   21adc:	f10a 0220 	add.w	r2, sl, #32
   21ae0:	e703      	b.n	218ea <_realloc_r+0x1da>
   21ae2:	bf00      	nop
   21ae4:	200034a8 	.word	0x200034a8

00021ae8 <__utoa>:
   21ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
   21aea:	4f25      	ldr	r7, [pc, #148]	; (21b80 <__utoa+0x98>)
   21aec:	f1a2 0e02 	sub.w	lr, r2, #2
   21af0:	4616      	mov	r6, r2
   21af2:	4605      	mov	r5, r0
   21af4:	460c      	mov	r4, r1
   21af6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21af8:	b08b      	sub	sp, #44	; 0x2c
   21afa:	46ec      	mov	ip, sp
   21afc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21b00:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21b02:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   21b06:	e897 0003 	ldmia.w	r7, {r0, r1}
   21b0a:	f84c 0b04 	str.w	r0, [ip], #4
   21b0e:	f1be 0f22 	cmp.w	lr, #34	; 0x22
   21b12:	f88c 1000 	strb.w	r1, [ip]
   21b16:	d82e      	bhi.n	21b76 <__utoa+0x8e>
   21b18:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
   21b1c:	4670      	mov	r0, lr
   21b1e:	f04f 0c00 	mov.w	ip, #0
   21b22:	fbb5 f2f6 	udiv	r2, r5, r6
   21b26:	fb06 5312 	mls	r3, r6, r2, r5
   21b2a:	3328      	adds	r3, #40	; 0x28
   21b2c:	446b      	add	r3, sp
   21b2e:	4661      	mov	r1, ip
   21b30:	f813 cc28 	ldrb.w	ip, [r3, #-40]
   21b34:	f800 cf01 	strb.w	ip, [r0, #1]!
   21b38:	462b      	mov	r3, r5
   21b3a:	429e      	cmp	r6, r3
   21b3c:	f101 0c01 	add.w	ip, r1, #1
   21b40:	4615      	mov	r5, r2
   21b42:	d9ee      	bls.n	21b22 <__utoa+0x3a>
   21b44:	2300      	movs	r3, #0
   21b46:	f804 300c 	strb.w	r3, [r4, ip]
   21b4a:	b189      	cbz	r1, 21b70 <__utoa+0x88>
   21b4c:	44a4      	add	ip, r4
   21b4e:	4672      	mov	r2, lr
   21b50:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   21b54:	f81c 5d01 	ldrb.w	r5, [ip, #-1]!
   21b58:	f88e 5000 	strb.w	r5, [lr]
   21b5c:	eba4 030e 	sub.w	r3, r4, lr
   21b60:	3202      	adds	r2, #2
   21b62:	3b01      	subs	r3, #1
   21b64:	1b12      	subs	r2, r2, r4
   21b66:	440b      	add	r3, r1
   21b68:	429a      	cmp	r2, r3
   21b6a:	f88c 0000 	strb.w	r0, [ip]
   21b6e:	dbee      	blt.n	21b4e <__utoa+0x66>
   21b70:	4620      	mov	r0, r4
   21b72:	b00b      	add	sp, #44	; 0x2c
   21b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b76:	2300      	movs	r3, #0
   21b78:	4618      	mov	r0, r3
   21b7a:	7023      	strb	r3, [r4, #0]
   21b7c:	b00b      	add	sp, #44	; 0x2c
   21b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b80:	20001804 	.word	0x20001804

00021b84 <utoa>:
   21b84:	f7ff bfb0 	b.w	21ae8 <__utoa>

00021b88 <sprintf>:
   21b88:	b40e      	push	{r1, r2, r3}
   21b8a:	b510      	push	{r4, lr}
   21b8c:	b09d      	sub	sp, #116	; 0x74
   21b8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   21b92:	ab1f      	add	r3, sp, #124	; 0x7c
   21b94:	e9cd 0106 	strd	r0, r1, [sp, #24]
   21b98:	9104      	str	r1, [sp, #16]
   21b9a:	4909      	ldr	r1, [pc, #36]	; (21bc0 <sprintf+0x38>)
   21b9c:	f853 2b04 	ldr.w	r2, [r3], #4
   21ba0:	9002      	str	r0, [sp, #8]
   21ba2:	4c08      	ldr	r4, [pc, #32]	; (21bc4 <sprintf+0x3c>)
   21ba4:	6808      	ldr	r0, [r1, #0]
   21ba6:	9301      	str	r3, [sp, #4]
   21ba8:	a902      	add	r1, sp, #8
   21baa:	9405      	str	r4, [sp, #20]
   21bac:	f001 fa48 	bl	23040 <_svfprintf_r>
   21bb0:	9b02      	ldr	r3, [sp, #8]
   21bb2:	2200      	movs	r2, #0
   21bb4:	701a      	strb	r2, [r3, #0]
   21bb6:	b01d      	add	sp, #116	; 0x74
   21bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21bbc:	b003      	add	sp, #12
   21bbe:	4770      	bx	lr
   21bc0:	200038c4 	.word	0x200038c4
   21bc4:	ffff0208 	.word	0xffff0208

00021bc8 <stdio_exit_handler>:
   21bc8:	4a02      	ldr	r2, [pc, #8]	; (21bd4 <stdio_exit_handler+0xc>)
   21bca:	4903      	ldr	r1, [pc, #12]	; (21bd8 <stdio_exit_handler+0x10>)
   21bcc:	4803      	ldr	r0, [pc, #12]	; (21bdc <stdio_exit_handler+0x14>)
   21bce:	f000 baeb 	b.w	221a8 <_fwalk_sglue>
   21bd2:	bf00      	nop
   21bd4:	200038b8 	.word	0x200038b8
   21bd8:	0002544d 	.word	0x0002544d
   21bdc:	20003168 	.word	0x20003168

00021be0 <cleanup_stdio>:
   21be0:	4b0c      	ldr	r3, [pc, #48]	; (21c14 <cleanup_stdio+0x34>)
   21be2:	6841      	ldr	r1, [r0, #4]
   21be4:	4299      	cmp	r1, r3
   21be6:	b510      	push	{r4, lr}
   21be8:	4604      	mov	r4, r0
   21bea:	d001      	beq.n	21bf0 <cleanup_stdio+0x10>
   21bec:	f003 fc2e 	bl	2544c <_fclose_r>
   21bf0:	68a1      	ldr	r1, [r4, #8]
   21bf2:	4b09      	ldr	r3, [pc, #36]	; (21c18 <cleanup_stdio+0x38>)
   21bf4:	4299      	cmp	r1, r3
   21bf6:	d002      	beq.n	21bfe <cleanup_stdio+0x1e>
   21bf8:	4620      	mov	r0, r4
   21bfa:	f003 fc27 	bl	2544c <_fclose_r>
   21bfe:	68e1      	ldr	r1, [r4, #12]
   21c00:	4b06      	ldr	r3, [pc, #24]	; (21c1c <cleanup_stdio+0x3c>)
   21c02:	4299      	cmp	r1, r3
   21c04:	d004      	beq.n	21c10 <cleanup_stdio+0x30>
   21c06:	4620      	mov	r0, r4
   21c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21c0c:	f003 bc1e 	b.w	2544c <_fclose_r>
   21c10:	bd10      	pop	{r4, pc}
   21c12:	bf00      	nop
   21c14:	200054e0 	.word	0x200054e0
   21c18:	20005548 	.word	0x20005548
   21c1c:	200055b0 	.word	0x200055b0

00021c20 <global_stdio_init.part.0>:
   21c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21c24:	4c2a      	ldr	r4, [pc, #168]	; (21cd0 <global_stdio_init.part.0+0xb0>)
   21c26:	4b2b      	ldr	r3, [pc, #172]	; (21cd4 <global_stdio_init.part.0+0xb4>)
   21c28:	482b      	ldr	r0, [pc, #172]	; (21cd8 <global_stdio_init.part.0+0xb8>)
   21c2a:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 21cec <global_stdio_init.part.0+0xcc>
   21c2e:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 21cf0 <global_stdio_init.part.0+0xd0>
   21c32:	4f2a      	ldr	r7, [pc, #168]	; (21cdc <global_stdio_init.part.0+0xbc>)
   21c34:	6018      	str	r0, [r3, #0]
   21c36:	2500      	movs	r5, #0
   21c38:	2304      	movs	r3, #4
   21c3a:	2208      	movs	r2, #8
   21c3c:	4629      	mov	r1, r5
   21c3e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   21c42:	4e27      	ldr	r6, [pc, #156]	; (21ce0 <global_stdio_init.part.0+0xc0>)
   21c44:	6665      	str	r5, [r4, #100]	; 0x64
   21c46:	e9c4 5302 	strd	r5, r3, [r4, #8]
   21c4a:	e9c4 5500 	strd	r5, r5, [r4]
   21c4e:	e9c4 5504 	strd	r5, r5, [r4, #16]
   21c52:	61a5      	str	r5, [r4, #24]
   21c54:	f000 fc44 	bl	224e0 <memset>
   21c58:	4b22      	ldr	r3, [pc, #136]	; (21ce4 <global_stdio_init.part.0+0xc4>)
   21c5a:	6763      	str	r3, [r4, #116]	; 0x74
   21c5c:	2208      	movs	r2, #8
   21c5e:	4629      	mov	r1, r5
   21c60:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
   21c64:	e9c4 4907 	strd	r4, r9, [r4, #28]
   21c68:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
   21c6c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
   21c70:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
   21c74:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
   21c78:	6725      	str	r5, [r4, #112]	; 0x70
   21c7a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   21c7e:	62e6      	str	r6, [r4, #44]	; 0x2c
   21c80:	f000 fc2e 	bl	224e0 <memset>
   21c84:	4b18      	ldr	r3, [pc, #96]	; (21ce8 <global_stdio_init.part.0+0xc8>)
   21c86:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   21c8a:	4629      	mov	r1, r5
   21c8c:	f104 0368 	add.w	r3, r4, #104	; 0x68
   21c90:	2208      	movs	r2, #8
   21c92:	f504 7096 	add.w	r0, r4, #300	; 0x12c
   21c96:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
   21c9a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
   21c9e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
   21ca2:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
   21ca6:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
   21caa:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
   21cae:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
   21cb2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
   21cb6:	f000 fc13 	bl	224e0 <memset>
   21cba:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   21cbe:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
   21cc2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
   21cc6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
   21cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21cce:	bf00      	nop
   21cd0:	200054e0 	.word	0x200054e0
   21cd4:	20005618 	.word	0x20005618
   21cd8:	00021bc9 	.word	0x00021bc9
   21cdc:	000256fd 	.word	0x000256fd
   21ce0:	0002571d 	.word	0x0002571d
   21ce4:	00010009 	.word	0x00010009
   21ce8:	00020012 	.word	0x00020012
   21cec:	00025699 	.word	0x00025699
   21cf0:	000256bd 	.word	0x000256bd

00021cf4 <__sinit>:
   21cf4:	b510      	push	{r4, lr}
   21cf6:	4604      	mov	r4, r0
   21cf8:	480a      	ldr	r0, [pc, #40]	; (21d24 <__sinit+0x30>)
   21cfa:	f000 ff25 	bl	22b48 <__retarget_lock_acquire_recursive>
   21cfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   21d00:	b923      	cbnz	r3, 21d0c <__sinit+0x18>
   21d02:	4b09      	ldr	r3, [pc, #36]	; (21d28 <__sinit+0x34>)
   21d04:	4a09      	ldr	r2, [pc, #36]	; (21d2c <__sinit+0x38>)
   21d06:	681b      	ldr	r3, [r3, #0]
   21d08:	6362      	str	r2, [r4, #52]	; 0x34
   21d0a:	b123      	cbz	r3, 21d16 <__sinit+0x22>
   21d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21d10:	4804      	ldr	r0, [pc, #16]	; (21d24 <__sinit+0x30>)
   21d12:	f000 bf1b 	b.w	22b4c <__retarget_lock_release_recursive>
   21d16:	f7ff ff83 	bl	21c20 <global_stdio_init.part.0>
   21d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   21d1e:	4801      	ldr	r0, [pc, #4]	; (21d24 <__sinit+0x30>)
   21d20:	f000 bf14 	b.w	22b4c <__retarget_lock_release_recursive>
   21d24:	200054a8 	.word	0x200054a8
   21d28:	20005618 	.word	0x20005618
   21d2c:	00021be1 	.word	0x00021be1

00021d30 <__sfp_lock_acquire>:
   21d30:	4801      	ldr	r0, [pc, #4]	; (21d38 <__sfp_lock_acquire+0x8>)
   21d32:	f000 bf09 	b.w	22b48 <__retarget_lock_acquire_recursive>
   21d36:	bf00      	nop
   21d38:	200054a8 	.word	0x200054a8

00021d3c <__sfp_lock_release>:
   21d3c:	4801      	ldr	r0, [pc, #4]	; (21d44 <__sfp_lock_release+0x8>)
   21d3e:	f000 bf05 	b.w	22b4c <__retarget_lock_release_recursive>
   21d42:	bf00      	nop
   21d44:	200054a8 	.word	0x200054a8

00021d48 <fputc>:
   21d48:	b530      	push	{r4, r5, lr}
   21d4a:	4b17      	ldr	r3, [pc, #92]	; (21da8 <fputc+0x60>)
   21d4c:	681d      	ldr	r5, [r3, #0]
   21d4e:	460c      	mov	r4, r1
   21d50:	b083      	sub	sp, #12
   21d52:	4601      	mov	r1, r0
   21d54:	b10d      	cbz	r5, 21d5a <fputc+0x12>
   21d56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21d58:	b1fb      	cbz	r3, 21d9a <fputc+0x52>
   21d5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   21d5c:	07db      	lsls	r3, r3, #31
   21d5e:	d402      	bmi.n	21d66 <fputc+0x1e>
   21d60:	89a3      	ldrh	r3, [r4, #12]
   21d62:	0598      	lsls	r0, r3, #22
   21d64:	d513      	bpl.n	21d8e <fputc+0x46>
   21d66:	4622      	mov	r2, r4
   21d68:	4628      	mov	r0, r5
   21d6a:	f002 ff77 	bl	24c5c <_putc_r>
   21d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   21d70:	07da      	lsls	r2, r3, #31
   21d72:	4605      	mov	r5, r0
   21d74:	d402      	bmi.n	21d7c <fputc+0x34>
   21d76:	89a3      	ldrh	r3, [r4, #12]
   21d78:	059b      	lsls	r3, r3, #22
   21d7a:	d502      	bpl.n	21d82 <fputc+0x3a>
   21d7c:	4628      	mov	r0, r5
   21d7e:	b003      	add	sp, #12
   21d80:	bd30      	pop	{r4, r5, pc}
   21d82:	6da0      	ldr	r0, [r4, #88]	; 0x58
   21d84:	f000 fee2 	bl	22b4c <__retarget_lock_release_recursive>
   21d88:	4628      	mov	r0, r5
   21d8a:	b003      	add	sp, #12
   21d8c:	bd30      	pop	{r4, r5, pc}
   21d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   21d90:	9101      	str	r1, [sp, #4]
   21d92:	f000 fed9 	bl	22b48 <__retarget_lock_acquire_recursive>
   21d96:	9901      	ldr	r1, [sp, #4]
   21d98:	e7e5      	b.n	21d66 <fputc+0x1e>
   21d9a:	9001      	str	r0, [sp, #4]
   21d9c:	4628      	mov	r0, r5
   21d9e:	f7ff ffa9 	bl	21cf4 <__sinit>
   21da2:	9901      	ldr	r1, [sp, #4]
   21da4:	e7d9      	b.n	21d5a <fputc+0x12>
   21da6:	bf00      	nop
   21da8:	200038c4 	.word	0x200038c4

00021dac <_fputs_r>:
   21dac:	b530      	push	{r4, r5, lr}
   21dae:	b087      	sub	sp, #28
   21db0:	4605      	mov	r5, r0
   21db2:	4608      	mov	r0, r1
   21db4:	4614      	mov	r4, r2
   21db6:	9101      	str	r1, [sp, #4]
   21db8:	f000 ff22 	bl	22c00 <strlen>
   21dbc:	aa01      	add	r2, sp, #4
   21dbe:	2301      	movs	r3, #1
   21dc0:	e9cd 0202 	strd	r0, r2, [sp, #8]
   21dc4:	9005      	str	r0, [sp, #20]
   21dc6:	9304      	str	r3, [sp, #16]
   21dc8:	b10d      	cbz	r5, 21dce <_fputs_r+0x22>
   21dca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   21dcc:	b36b      	cbz	r3, 21e2a <_fputs_r+0x7e>
   21dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
   21dd0:	f013 0f01 	tst.w	r3, #1
   21dd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21dd8:	b29a      	uxth	r2, r3
   21dda:	d101      	bne.n	21de0 <_fputs_r+0x34>
   21ddc:	0598      	lsls	r0, r3, #22
   21dde:	d51d      	bpl.n	21e1c <_fputs_r+0x70>
   21de0:	0491      	lsls	r1, r2, #18
   21de2:	d406      	bmi.n	21df2 <_fputs_r+0x46>
   21de4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   21de6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   21dea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   21dee:	81a3      	strh	r3, [r4, #12]
   21df0:	6662      	str	r2, [r4, #100]	; 0x64
   21df2:	aa03      	add	r2, sp, #12
   21df4:	4628      	mov	r0, r5
   21df6:	4621      	mov	r1, r4
   21df8:	f000 f85c 	bl	21eb4 <__sfvwrite_r>
   21dfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   21dfe:	07da      	lsls	r2, r3, #31
   21e00:	4605      	mov	r5, r0
   21e02:	d402      	bmi.n	21e0a <_fputs_r+0x5e>
   21e04:	89a3      	ldrh	r3, [r4, #12]
   21e06:	059b      	lsls	r3, r3, #22
   21e08:	d502      	bpl.n	21e10 <_fputs_r+0x64>
   21e0a:	4628      	mov	r0, r5
   21e0c:	b007      	add	sp, #28
   21e0e:	bd30      	pop	{r4, r5, pc}
   21e10:	6da0      	ldr	r0, [r4, #88]	; 0x58
   21e12:	f000 fe9b 	bl	22b4c <__retarget_lock_release_recursive>
   21e16:	4628      	mov	r0, r5
   21e18:	b007      	add	sp, #28
   21e1a:	bd30      	pop	{r4, r5, pc}
   21e1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   21e1e:	f000 fe93 	bl	22b48 <__retarget_lock_acquire_recursive>
   21e22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21e26:	b29a      	uxth	r2, r3
   21e28:	e7da      	b.n	21de0 <_fputs_r+0x34>
   21e2a:	4628      	mov	r0, r5
   21e2c:	f7ff ff62 	bl	21cf4 <__sinit>
   21e30:	e7cd      	b.n	21dce <_fputs_r+0x22>
   21e32:	bf00      	nop

00021e34 <fputs>:
   21e34:	b410      	push	{r4}
   21e36:	4c04      	ldr	r4, [pc, #16]	; (21e48 <fputs+0x14>)
   21e38:	4603      	mov	r3, r0
   21e3a:	460a      	mov	r2, r1
   21e3c:	6820      	ldr	r0, [r4, #0]
   21e3e:	f85d 4b04 	ldr.w	r4, [sp], #4
   21e42:	4619      	mov	r1, r3
   21e44:	f7ff bfb2 	b.w	21dac <_fputs_r>
   21e48:	200038c4 	.word	0x200038c4

00021e4c <_vdprintf_r>:
   21e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   21e4e:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
   21e52:	af04      	add	r7, sp, #16
   21e54:	9300      	str	r3, [sp, #0]
   21e56:	4613      	mov	r3, r2
   21e58:	f44f 7200 	mov.w	r2, #512	; 0x200
   21e5c:	460e      	mov	r6, r1
   21e5e:	9203      	str	r2, [sp, #12]
   21e60:	4639      	mov	r1, r7
   21e62:	aa03      	add	r2, sp, #12
   21e64:	4605      	mov	r5, r0
   21e66:	f000 fc05 	bl	22674 <_vasnprintf_r>
   21e6a:	b188      	cbz	r0, 21e90 <_vdprintf_r+0x44>
   21e6c:	4604      	mov	r4, r0
   21e6e:	4602      	mov	r2, r0
   21e70:	9b03      	ldr	r3, [sp, #12]
   21e72:	4631      	mov	r1, r6
   21e74:	4628      	mov	r0, r5
   21e76:	f000 fc53 	bl	22720 <_write_r>
   21e7a:	42bc      	cmp	r4, r7
   21e7c:	9003      	str	r0, [sp, #12]
   21e7e:	d004      	beq.n	21e8a <_vdprintf_r+0x3e>
   21e80:	4628      	mov	r0, r5
   21e82:	4621      	mov	r1, r4
   21e84:	f000 ffbe 	bl	22e04 <_free_r>
   21e88:	9803      	ldr	r0, [sp, #12]
   21e8a:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
   21e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21e94:	e7f9      	b.n	21e8a <_vdprintf_r+0x3e>
   21e96:	bf00      	nop

00021e98 <vdprintf>:
   21e98:	b410      	push	{r4}
   21e9a:	4c05      	ldr	r4, [pc, #20]	; (21eb0 <vdprintf+0x18>)
   21e9c:	4684      	mov	ip, r0
   21e9e:	4613      	mov	r3, r2
   21ea0:	6820      	ldr	r0, [r4, #0]
   21ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
   21ea6:	460a      	mov	r2, r1
   21ea8:	4661      	mov	r1, ip
   21eaa:	f7ff bfcf 	b.w	21e4c <_vdprintf_r>
   21eae:	bf00      	nop
   21eb0:	200038c4 	.word	0x200038c4

00021eb4 <__sfvwrite_r>:
   21eb4:	6893      	ldr	r3, [r2, #8]
   21eb6:	2b00      	cmp	r3, #0
   21eb8:	f000 8085 	beq.w	21fc6 <__sfvwrite_r+0x112>
   21ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ec0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   21ec4:	460c      	mov	r4, r1
   21ec6:	0719      	lsls	r1, r3, #28
   21ec8:	4680      	mov	r8, r0
   21eca:	b083      	sub	sp, #12
   21ecc:	4617      	mov	r7, r2
   21ece:	b298      	uxth	r0, r3
   21ed0:	d525      	bpl.n	21f1e <__sfvwrite_r+0x6a>
   21ed2:	6923      	ldr	r3, [r4, #16]
   21ed4:	b31b      	cbz	r3, 21f1e <__sfvwrite_r+0x6a>
   21ed6:	f010 0302 	ands.w	r3, r0, #2
   21eda:	683d      	ldr	r5, [r7, #0]
   21edc:	d02d      	beq.n	21f3a <__sfvwrite_r+0x86>
   21ede:	f04f 0a00 	mov.w	sl, #0
   21ee2:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 221a4 <__sfvwrite_r+0x2f0>
   21ee6:	4656      	mov	r6, sl
   21ee8:	46b9      	mov	r9, r7
   21eea:	455e      	cmp	r6, fp
   21eec:	4633      	mov	r3, r6
   21eee:	4652      	mov	r2, sl
   21ef0:	bf28      	it	cs
   21ef2:	465b      	movcs	r3, fp
   21ef4:	4640      	mov	r0, r8
   21ef6:	2e00      	cmp	r6, #0
   21ef8:	d052      	beq.n	21fa0 <__sfvwrite_r+0xec>
   21efa:	69e1      	ldr	r1, [r4, #28]
   21efc:	6a67      	ldr	r7, [r4, #36]	; 0x24
   21efe:	47b8      	blx	r7
   21f00:	2800      	cmp	r0, #0
   21f02:	dd56      	ble.n	21fb2 <__sfvwrite_r+0xfe>
   21f04:	f8d9 3008 	ldr.w	r3, [r9, #8]
   21f08:	1a1b      	subs	r3, r3, r0
   21f0a:	4482      	add	sl, r0
   21f0c:	1a36      	subs	r6, r6, r0
   21f0e:	f8c9 3008 	str.w	r3, [r9, #8]
   21f12:	2b00      	cmp	r3, #0
   21f14:	d1e9      	bne.n	21eea <__sfvwrite_r+0x36>
   21f16:	2000      	movs	r0, #0
   21f18:	b003      	add	sp, #12
   21f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f1e:	4621      	mov	r1, r4
   21f20:	4640      	mov	r0, r8
   21f22:	f000 f9cb 	bl	222bc <__swsetup_r>
   21f26:	2800      	cmp	r0, #0
   21f28:	f040 8138 	bne.w	2219c <__sfvwrite_r+0x2e8>
   21f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21f30:	683d      	ldr	r5, [r7, #0]
   21f32:	b298      	uxth	r0, r3
   21f34:	f010 0302 	ands.w	r3, r0, #2
   21f38:	d1d1      	bne.n	21ede <__sfvwrite_r+0x2a>
   21f3a:	f010 0901 	ands.w	r9, r0, #1
   21f3e:	d144      	bne.n	21fca <__sfvwrite_r+0x116>
   21f40:	464e      	mov	r6, r9
   21f42:	9700      	str	r7, [sp, #0]
   21f44:	b346      	cbz	r6, 21f98 <__sfvwrite_r+0xe4>
   21f46:	0582      	lsls	r2, r0, #22
   21f48:	f8d4 b008 	ldr.w	fp, [r4, #8]
   21f4c:	f140 8085 	bpl.w	2205a <__sfvwrite_r+0x1a6>
   21f50:	45b3      	cmp	fp, r6
   21f52:	465a      	mov	r2, fp
   21f54:	f200 80b4 	bhi.w	220c0 <__sfvwrite_r+0x20c>
   21f58:	f410 6f90 	tst.w	r0, #1152	; 0x480
   21f5c:	f040 80c1 	bne.w	220e2 <__sfvwrite_r+0x22e>
   21f60:	6820      	ldr	r0, [r4, #0]
   21f62:	9201      	str	r2, [sp, #4]
   21f64:	4649      	mov	r1, r9
   21f66:	f000 fa3f 	bl	223e8 <memmove>
   21f6a:	68a3      	ldr	r3, [r4, #8]
   21f6c:	9a01      	ldr	r2, [sp, #4]
   21f6e:	eba3 010b 	sub.w	r1, r3, fp
   21f72:	6823      	ldr	r3, [r4, #0]
   21f74:	60a1      	str	r1, [r4, #8]
   21f76:	4413      	add	r3, r2
   21f78:	46b2      	mov	sl, r6
   21f7a:	6023      	str	r3, [r4, #0]
   21f7c:	2600      	movs	r6, #0
   21f7e:	9a00      	ldr	r2, [sp, #0]
   21f80:	6893      	ldr	r3, [r2, #8]
   21f82:	eba3 030a 	sub.w	r3, r3, sl
   21f86:	44d1      	add	r9, sl
   21f88:	6093      	str	r3, [r2, #8]
   21f8a:	2b00      	cmp	r3, #0
   21f8c:	d0c3      	beq.n	21f16 <__sfvwrite_r+0x62>
   21f8e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   21f92:	b280      	uxth	r0, r0
   21f94:	2e00      	cmp	r6, #0
   21f96:	d1d6      	bne.n	21f46 <__sfvwrite_r+0x92>
   21f98:	e9d5 9600 	ldrd	r9, r6, [r5]
   21f9c:	3508      	adds	r5, #8
   21f9e:	e7d1      	b.n	21f44 <__sfvwrite_r+0x90>
   21fa0:	e9d5 a600 	ldrd	sl, r6, [r5]
   21fa4:	3508      	adds	r5, #8
   21fa6:	e7a0      	b.n	21eea <__sfvwrite_r+0x36>
   21fa8:	4621      	mov	r1, r4
   21faa:	4640      	mov	r0, r8
   21fac:	f003 fb4a 	bl	25644 <_fflush_r>
   21fb0:	b388      	cbz	r0, 22016 <__sfvwrite_r+0x162>
   21fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   21fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21fbe:	81a3      	strh	r3, [r4, #12]
   21fc0:	b003      	add	sp, #12
   21fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21fc6:	2000      	movs	r0, #0
   21fc8:	4770      	bx	lr
   21fca:	461e      	mov	r6, r3
   21fcc:	46ba      	mov	sl, r7
   21fce:	4699      	mov	r9, r3
   21fd0:	4618      	mov	r0, r3
   21fd2:	9500      	str	r5, [sp, #0]
   21fd4:	461f      	mov	r7, r3
   21fd6:	b366      	cbz	r6, 22032 <__sfvwrite_r+0x17e>
   21fd8:	2800      	cmp	r0, #0
   21fda:	d032      	beq.n	22042 <__sfvwrite_r+0x18e>
   21fdc:	464a      	mov	r2, r9
   21fde:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   21fe2:	6820      	ldr	r0, [r4, #0]
   21fe4:	68a5      	ldr	r5, [r4, #8]
   21fe6:	42b2      	cmp	r2, r6
   21fe8:	bf28      	it	cs
   21fea:	4632      	movcs	r2, r6
   21fec:	4288      	cmp	r0, r1
   21fee:	d904      	bls.n	21ffa <__sfvwrite_r+0x146>
   21ff0:	eb05 0b03 	add.w	fp, r5, r3
   21ff4:	455a      	cmp	r2, fp
   21ff6:	f300 80a7 	bgt.w	22148 <__sfvwrite_r+0x294>
   21ffa:	4293      	cmp	r3, r2
   21ffc:	dc64      	bgt.n	220c8 <__sfvwrite_r+0x214>
   21ffe:	69e1      	ldr	r1, [r4, #28]
   22000:	6a65      	ldr	r5, [r4, #36]	; 0x24
   22002:	463a      	mov	r2, r7
   22004:	4640      	mov	r0, r8
   22006:	47a8      	blx	r5
   22008:	f1b0 0b00 	subs.w	fp, r0, #0
   2200c:	ddd1      	ble.n	21fb2 <__sfvwrite_r+0xfe>
   2200e:	ebb9 090b 	subs.w	r9, r9, fp
   22012:	d0c9      	beq.n	21fa8 <__sfvwrite_r+0xf4>
   22014:	2001      	movs	r0, #1
   22016:	f8da 3008 	ldr.w	r3, [sl, #8]
   2201a:	eba3 030b 	sub.w	r3, r3, fp
   2201e:	445f      	add	r7, fp
   22020:	eba6 060b 	sub.w	r6, r6, fp
   22024:	f8ca 3008 	str.w	r3, [sl, #8]
   22028:	2b00      	cmp	r3, #0
   2202a:	f43f af74 	beq.w	21f16 <__sfvwrite_r+0x62>
   2202e:	2e00      	cmp	r6, #0
   22030:	d1d2      	bne.n	21fd8 <__sfvwrite_r+0x124>
   22032:	9a00      	ldr	r2, [sp, #0]
   22034:	6856      	ldr	r6, [r2, #4]
   22036:	4613      	mov	r3, r2
   22038:	3208      	adds	r2, #8
   2203a:	9200      	str	r2, [sp, #0]
   2203c:	2e00      	cmp	r6, #0
   2203e:	d0f8      	beq.n	22032 <__sfvwrite_r+0x17e>
   22040:	681f      	ldr	r7, [r3, #0]
   22042:	4632      	mov	r2, r6
   22044:	210a      	movs	r1, #10
   22046:	4638      	mov	r0, r7
   22048:	f000 fd82 	bl	22b50 <memchr>
   2204c:	2800      	cmp	r0, #0
   2204e:	f000 809c 	beq.w	2218a <__sfvwrite_r+0x2d6>
   22052:	3001      	adds	r0, #1
   22054:	eba0 0907 	sub.w	r9, r0, r7
   22058:	e7c0      	b.n	21fdc <__sfvwrite_r+0x128>
   2205a:	6820      	ldr	r0, [r4, #0]
   2205c:	6923      	ldr	r3, [r4, #16]
   2205e:	4298      	cmp	r0, r3
   22060:	d816      	bhi.n	22090 <__sfvwrite_r+0x1dc>
   22062:	6962      	ldr	r2, [r4, #20]
   22064:	42b2      	cmp	r2, r6
   22066:	d813      	bhi.n	22090 <__sfvwrite_r+0x1dc>
   22068:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   2206c:	42b3      	cmp	r3, r6
   2206e:	bf28      	it	cs
   22070:	4633      	movcs	r3, r6
   22072:	69e1      	ldr	r1, [r4, #28]
   22074:	fb93 f3f2 	sdiv	r3, r3, r2
   22078:	6a67      	ldr	r7, [r4, #36]	; 0x24
   2207a:	fb02 f303 	mul.w	r3, r2, r3
   2207e:	4640      	mov	r0, r8
   22080:	464a      	mov	r2, r9
   22082:	47b8      	blx	r7
   22084:	f1b0 0a00 	subs.w	sl, r0, #0
   22088:	dd93      	ble.n	21fb2 <__sfvwrite_r+0xfe>
   2208a:	eba6 060a 	sub.w	r6, r6, sl
   2208e:	e776      	b.n	21f7e <__sfvwrite_r+0xca>
   22090:	45b3      	cmp	fp, r6
   22092:	46da      	mov	sl, fp
   22094:	bf28      	it	cs
   22096:	46b2      	movcs	sl, r6
   22098:	4652      	mov	r2, sl
   2209a:	4649      	mov	r1, r9
   2209c:	f000 f9a4 	bl	223e8 <memmove>
   220a0:	68a3      	ldr	r3, [r4, #8]
   220a2:	6822      	ldr	r2, [r4, #0]
   220a4:	eba3 030a 	sub.w	r3, r3, sl
   220a8:	4452      	add	r2, sl
   220aa:	60a3      	str	r3, [r4, #8]
   220ac:	6022      	str	r2, [r4, #0]
   220ae:	2b00      	cmp	r3, #0
   220b0:	d1eb      	bne.n	2208a <__sfvwrite_r+0x1d6>
   220b2:	4621      	mov	r1, r4
   220b4:	4640      	mov	r0, r8
   220b6:	f003 fac5 	bl	25644 <_fflush_r>
   220ba:	2800      	cmp	r0, #0
   220bc:	d0e5      	beq.n	2208a <__sfvwrite_r+0x1d6>
   220be:	e778      	b.n	21fb2 <__sfvwrite_r+0xfe>
   220c0:	6820      	ldr	r0, [r4, #0]
   220c2:	46b3      	mov	fp, r6
   220c4:	4632      	mov	r2, r6
   220c6:	e74c      	b.n	21f62 <__sfvwrite_r+0xae>
   220c8:	4639      	mov	r1, r7
   220ca:	9201      	str	r2, [sp, #4]
   220cc:	f000 f98c 	bl	223e8 <memmove>
   220d0:	9a01      	ldr	r2, [sp, #4]
   220d2:	68a3      	ldr	r3, [r4, #8]
   220d4:	1a9b      	subs	r3, r3, r2
   220d6:	60a3      	str	r3, [r4, #8]
   220d8:	6823      	ldr	r3, [r4, #0]
   220da:	4413      	add	r3, r2
   220dc:	6023      	str	r3, [r4, #0]
   220de:	4693      	mov	fp, r2
   220e0:	e795      	b.n	2200e <__sfvwrite_r+0x15a>
   220e2:	6823      	ldr	r3, [r4, #0]
   220e4:	6921      	ldr	r1, [r4, #16]
   220e6:	eba3 0b01 	sub.w	fp, r3, r1
   220ea:	6963      	ldr	r3, [r4, #20]
   220ec:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   220f0:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   220f4:	f10b 0301 	add.w	r3, fp, #1
   220f8:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   220fc:	4433      	add	r3, r6
   220fe:	4553      	cmp	r3, sl
   22100:	4652      	mov	r2, sl
   22102:	bf84      	itt	hi
   22104:	469a      	movhi	sl, r3
   22106:	4652      	movhi	r2, sl
   22108:	0543      	lsls	r3, r0, #21
   2210a:	d52c      	bpl.n	22166 <__sfvwrite_r+0x2b2>
   2210c:	4611      	mov	r1, r2
   2210e:	4640      	mov	r0, r8
   22110:	f7ff f836 	bl	21180 <_malloc_r>
   22114:	2800      	cmp	r0, #0
   22116:	d03b      	beq.n	22190 <__sfvwrite_r+0x2dc>
   22118:	465a      	mov	r2, fp
   2211a:	6921      	ldr	r1, [r4, #16]
   2211c:	9001      	str	r0, [sp, #4]
   2211e:	f7f4 fa3d 	bl	1659c <memcpy>
   22122:	89a2      	ldrh	r2, [r4, #12]
   22124:	9b01      	ldr	r3, [sp, #4]
   22126:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2212a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2212e:	81a2      	strh	r2, [r4, #12]
   22130:	eb03 000b 	add.w	r0, r3, fp
   22134:	6123      	str	r3, [r4, #16]
   22136:	ebaa 030b 	sub.w	r3, sl, fp
   2213a:	f8c4 a014 	str.w	sl, [r4, #20]
   2213e:	60a3      	str	r3, [r4, #8]
   22140:	6020      	str	r0, [r4, #0]
   22142:	46b3      	mov	fp, r6
   22144:	4632      	mov	r2, r6
   22146:	e70c      	b.n	21f62 <__sfvwrite_r+0xae>
   22148:	4639      	mov	r1, r7
   2214a:	465a      	mov	r2, fp
   2214c:	f000 f94c 	bl	223e8 <memmove>
   22150:	6823      	ldr	r3, [r4, #0]
   22152:	445b      	add	r3, fp
   22154:	6023      	str	r3, [r4, #0]
   22156:	4621      	mov	r1, r4
   22158:	4640      	mov	r0, r8
   2215a:	f003 fa73 	bl	25644 <_fflush_r>
   2215e:	2800      	cmp	r0, #0
   22160:	f43f af55 	beq.w	2200e <__sfvwrite_r+0x15a>
   22164:	e725      	b.n	21fb2 <__sfvwrite_r+0xfe>
   22166:	4640      	mov	r0, r8
   22168:	f7ff fad2 	bl	21710 <_realloc_r>
   2216c:	4603      	mov	r3, r0
   2216e:	2800      	cmp	r0, #0
   22170:	d1de      	bne.n	22130 <__sfvwrite_r+0x27c>
   22172:	6921      	ldr	r1, [r4, #16]
   22174:	4640      	mov	r0, r8
   22176:	f000 fe45 	bl	22e04 <_free_r>
   2217a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2217e:	220c      	movs	r2, #12
   22180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   22184:	f8c8 2000 	str.w	r2, [r8]
   22188:	e715      	b.n	21fb6 <__sfvwrite_r+0x102>
   2218a:	1c72      	adds	r2, r6, #1
   2218c:	4691      	mov	r9, r2
   2218e:	e726      	b.n	21fde <__sfvwrite_r+0x12a>
   22190:	220c      	movs	r2, #12
   22192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22196:	f8c8 2000 	str.w	r2, [r8]
   2219a:	e70c      	b.n	21fb6 <__sfvwrite_r+0x102>
   2219c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   221a0:	e6ba      	b.n	21f18 <__sfvwrite_r+0x64>
   221a2:	bf00      	nop
   221a4:	7ffffc00 	.word	0x7ffffc00

000221a8 <_fwalk_sglue>:
   221a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   221ac:	4680      	mov	r8, r0
   221ae:	460f      	mov	r7, r1
   221b0:	4616      	mov	r6, r2
   221b2:	f04f 0900 	mov.w	r9, #0
   221b6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   221ba:	3d01      	subs	r5, #1
   221bc:	d411      	bmi.n	221e2 <_fwalk_sglue+0x3a>
   221be:	89a3      	ldrh	r3, [r4, #12]
   221c0:	2b01      	cmp	r3, #1
   221c2:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   221c6:	d908      	bls.n	221da <_fwalk_sglue+0x32>
   221c8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   221cc:	3301      	adds	r3, #1
   221ce:	4621      	mov	r1, r4
   221d0:	d003      	beq.n	221da <_fwalk_sglue+0x32>
   221d2:	4640      	mov	r0, r8
   221d4:	47b8      	blx	r7
   221d6:	ea49 0900 	orr.w	r9, r9, r0
   221da:	1c6b      	adds	r3, r5, #1
   221dc:	f104 0468 	add.w	r4, r4, #104	; 0x68
   221e0:	d1ed      	bne.n	221be <_fwalk_sglue+0x16>
   221e2:	6836      	ldr	r6, [r6, #0]
   221e4:	2e00      	cmp	r6, #0
   221e6:	d1e6      	bne.n	221b6 <_fwalk_sglue+0xe>
   221e8:	4648      	mov	r0, r9
   221ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   221ee:	bf00      	nop

000221f0 <_fwrite_r>:
   221f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   221f4:	b086      	sub	sp, #24
   221f6:	fb02 f703 	mul.w	r7, r2, r3
   221fa:	461d      	mov	r5, r3
   221fc:	ab01      	add	r3, sp, #4
   221fe:	9303      	str	r3, [sp, #12]
   22200:	2301      	movs	r3, #1
   22202:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   22204:	9101      	str	r1, [sp, #4]
   22206:	4690      	mov	r8, r2
   22208:	9702      	str	r7, [sp, #8]
   2220a:	9705      	str	r7, [sp, #20]
   2220c:	9304      	str	r3, [sp, #16]
   2220e:	4606      	mov	r6, r0
   22210:	b110      	cbz	r0, 22218 <_fwrite_r+0x28>
   22212:	6b43      	ldr	r3, [r0, #52]	; 0x34
   22214:	2b00      	cmp	r3, #0
   22216:	d03d      	beq.n	22294 <_fwrite_r+0xa4>
   22218:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2221a:	f013 0f01 	tst.w	r3, #1
   2221e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22222:	b29a      	uxth	r2, r3
   22224:	d101      	bne.n	2222a <_fwrite_r+0x3a>
   22226:	0599      	lsls	r1, r3, #22
   22228:	d52d      	bpl.n	22286 <_fwrite_r+0x96>
   2222a:	0492      	lsls	r2, r2, #18
   2222c:	d406      	bmi.n	2223c <_fwrite_r+0x4c>
   2222e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   22232:	81a3      	strh	r3, [r4, #12]
   22234:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22236:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   2223a:	6663      	str	r3, [r4, #100]	; 0x64
   2223c:	4630      	mov	r0, r6
   2223e:	aa03      	add	r2, sp, #12
   22240:	4621      	mov	r1, r4
   22242:	f7ff fe37 	bl	21eb4 <__sfvwrite_r>
   22246:	6e63      	ldr	r3, [r4, #100]	; 0x64
   22248:	b178      	cbz	r0, 2226a <_fwrite_r+0x7a>
   2224a:	07da      	lsls	r2, r3, #31
   2224c:	d506      	bpl.n	2225c <_fwrite_r+0x6c>
   2224e:	9b05      	ldr	r3, [sp, #20]
   22250:	1aff      	subs	r7, r7, r3
   22252:	fbb7 f0f8 	udiv	r0, r7, r8
   22256:	b006      	add	sp, #24
   22258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2225c:	89a3      	ldrh	r3, [r4, #12]
   2225e:	059b      	lsls	r3, r3, #22
   22260:	d4f5      	bmi.n	2224e <_fwrite_r+0x5e>
   22262:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22264:	f000 fc72 	bl	22b4c <__retarget_lock_release_recursive>
   22268:	e7f1      	b.n	2224e <_fwrite_r+0x5e>
   2226a:	07d8      	lsls	r0, r3, #31
   2226c:	d407      	bmi.n	2227e <_fwrite_r+0x8e>
   2226e:	89a3      	ldrh	r3, [r4, #12]
   22270:	0599      	lsls	r1, r3, #22
   22272:	d404      	bmi.n	2227e <_fwrite_r+0x8e>
   22274:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22276:	f000 fc69 	bl	22b4c <__retarget_lock_release_recursive>
   2227a:	4628      	mov	r0, r5
   2227c:	e7eb      	b.n	22256 <_fwrite_r+0x66>
   2227e:	4628      	mov	r0, r5
   22280:	b006      	add	sp, #24
   22282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22286:	6da0      	ldr	r0, [r4, #88]	; 0x58
   22288:	f000 fc5e 	bl	22b48 <__retarget_lock_acquire_recursive>
   2228c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   22290:	b29a      	uxth	r2, r3
   22292:	e7ca      	b.n	2222a <_fwrite_r+0x3a>
   22294:	f7ff fd2e 	bl	21cf4 <__sinit>
   22298:	e7be      	b.n	22218 <_fwrite_r+0x28>
   2229a:	bf00      	nop

0002229c <fwrite>:
   2229c:	b510      	push	{r4, lr}
   2229e:	4c06      	ldr	r4, [pc, #24]	; (222b8 <fwrite+0x1c>)
   222a0:	b082      	sub	sp, #8
   222a2:	4684      	mov	ip, r0
   222a4:	9300      	str	r3, [sp, #0]
   222a6:	6820      	ldr	r0, [r4, #0]
   222a8:	4613      	mov	r3, r2
   222aa:	460a      	mov	r2, r1
   222ac:	4661      	mov	r1, ip
   222ae:	f7ff ff9f 	bl	221f0 <_fwrite_r>
   222b2:	b002      	add	sp, #8
   222b4:	bd10      	pop	{r4, pc}
   222b6:	bf00      	nop
   222b8:	200038c4 	.word	0x200038c4

000222bc <__swsetup_r>:
   222bc:	b538      	push	{r3, r4, r5, lr}
   222be:	4b31      	ldr	r3, [pc, #196]	; (22384 <__swsetup_r+0xc8>)
   222c0:	681b      	ldr	r3, [r3, #0]
   222c2:	4605      	mov	r5, r0
   222c4:	460c      	mov	r4, r1
   222c6:	b113      	cbz	r3, 222ce <__swsetup_r+0x12>
   222c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   222ca:	2a00      	cmp	r2, #0
   222cc:	d04e      	beq.n	2236c <__swsetup_r+0xb0>
   222ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   222d2:	0718      	lsls	r0, r3, #28
   222d4:	b29a      	uxth	r2, r3
   222d6:	d51c      	bpl.n	22312 <__swsetup_r+0x56>
   222d8:	6921      	ldr	r1, [r4, #16]
   222da:	b329      	cbz	r1, 22328 <__swsetup_r+0x6c>
   222dc:	f012 0001 	ands.w	r0, r2, #1
   222e0:	d007      	beq.n	222f2 <__swsetup_r+0x36>
   222e2:	2000      	movs	r0, #0
   222e4:	60a0      	str	r0, [r4, #8]
   222e6:	6960      	ldr	r0, [r4, #20]
   222e8:	4240      	negs	r0, r0
   222ea:	61a0      	str	r0, [r4, #24]
   222ec:	b139      	cbz	r1, 222fe <__swsetup_r+0x42>
   222ee:	2000      	movs	r0, #0
   222f0:	bd38      	pop	{r3, r4, r5, pc}
   222f2:	0795      	lsls	r5, r2, #30
   222f4:	bf58      	it	pl
   222f6:	6960      	ldrpl	r0, [r4, #20]
   222f8:	60a0      	str	r0, [r4, #8]
   222fa:	2900      	cmp	r1, #0
   222fc:	d1f7      	bne.n	222ee <__swsetup_r+0x32>
   222fe:	0612      	lsls	r2, r2, #24
   22300:	bf58      	it	pl
   22302:	4608      	movpl	r0, r1
   22304:	d5f4      	bpl.n	222f0 <__swsetup_r+0x34>
   22306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2230a:	81a3      	strh	r3, [r4, #12]
   2230c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22310:	bd38      	pop	{r3, r4, r5, pc}
   22312:	06d1      	lsls	r1, r2, #27
   22314:	d52e      	bpl.n	22374 <__swsetup_r+0xb8>
   22316:	0752      	lsls	r2, r2, #29
   22318:	d414      	bmi.n	22344 <__swsetup_r+0x88>
   2231a:	6921      	ldr	r1, [r4, #16]
   2231c:	f043 0308 	orr.w	r3, r3, #8
   22320:	81a3      	strh	r3, [r4, #12]
   22322:	b29a      	uxth	r2, r3
   22324:	2900      	cmp	r1, #0
   22326:	d1d9      	bne.n	222dc <__swsetup_r+0x20>
   22328:	f402 7020 	and.w	r0, r2, #640	; 0x280
   2232c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   22330:	d0d4      	beq.n	222dc <__swsetup_r+0x20>
   22332:	4621      	mov	r1, r4
   22334:	4628      	mov	r0, r5
   22336:	f002 fc25 	bl	24b84 <__smakebuf_r>
   2233a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2233e:	6921      	ldr	r1, [r4, #16]
   22340:	b29a      	uxth	r2, r3
   22342:	e7cb      	b.n	222dc <__swsetup_r+0x20>
   22344:	6b21      	ldr	r1, [r4, #48]	; 0x30
   22346:	b151      	cbz	r1, 2235e <__swsetup_r+0xa2>
   22348:	f104 0240 	add.w	r2, r4, #64	; 0x40
   2234c:	4291      	cmp	r1, r2
   2234e:	d004      	beq.n	2235a <__swsetup_r+0x9e>
   22350:	4628      	mov	r0, r5
   22352:	f000 fd57 	bl	22e04 <_free_r>
   22356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   2235a:	2200      	movs	r2, #0
   2235c:	6322      	str	r2, [r4, #48]	; 0x30
   2235e:	6921      	ldr	r1, [r4, #16]
   22360:	2200      	movs	r2, #0
   22362:	e9c4 1200 	strd	r1, r2, [r4]
   22366:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2236a:	e7d7      	b.n	2231c <__swsetup_r+0x60>
   2236c:	4618      	mov	r0, r3
   2236e:	f7ff fcc1 	bl	21cf4 <__sinit>
   22372:	e7ac      	b.n	222ce <__swsetup_r+0x12>
   22374:	2209      	movs	r2, #9
   22376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2237a:	602a      	str	r2, [r5, #0]
   2237c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22380:	81a3      	strh	r3, [r4, #12]
   22382:	bd38      	pop	{r3, r4, r5, pc}
   22384:	200038c4 	.word	0x200038c4

00022388 <memcmp>:
   22388:	2a03      	cmp	r2, #3
   2238a:	b570      	push	{r4, r5, r6, lr}
   2238c:	d914      	bls.n	223b8 <memcmp+0x30>
   2238e:	ea40 0301 	orr.w	r3, r0, r1
   22392:	079b      	lsls	r3, r3, #30
   22394:	d122      	bne.n	223dc <memcmp+0x54>
   22396:	4604      	mov	r4, r0
   22398:	460b      	mov	r3, r1
   2239a:	4619      	mov	r1, r3
   2239c:	4620      	mov	r0, r4
   2239e:	680e      	ldr	r6, [r1, #0]
   223a0:	6805      	ldr	r5, [r0, #0]
   223a2:	42b5      	cmp	r5, r6
   223a4:	f104 0404 	add.w	r4, r4, #4
   223a8:	f103 0304 	add.w	r3, r3, #4
   223ac:	d116      	bne.n	223dc <memcmp+0x54>
   223ae:	3a04      	subs	r2, #4
   223b0:	2a03      	cmp	r2, #3
   223b2:	4620      	mov	r0, r4
   223b4:	4619      	mov	r1, r3
   223b6:	d8f0      	bhi.n	2239a <memcmp+0x12>
   223b8:	1e54      	subs	r4, r2, #1
   223ba:	b19a      	cbz	r2, 223e4 <memcmp+0x5c>
   223bc:	1e42      	subs	r2, r0, #1
   223be:	3901      	subs	r1, #1
   223c0:	e001      	b.n	223c6 <memcmp+0x3e>
   223c2:	18c3      	adds	r3, r0, r3
   223c4:	d00c      	beq.n	223e0 <memcmp+0x58>
   223c6:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   223ca:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   223ce:	45e6      	cmp	lr, ip
   223d0:	eba4 0302 	sub.w	r3, r4, r2
   223d4:	d0f5      	beq.n	223c2 <memcmp+0x3a>
   223d6:	ebae 000c 	sub.w	r0, lr, ip
   223da:	bd70      	pop	{r4, r5, r6, pc}
   223dc:	1e54      	subs	r4, r2, #1
   223de:	e7ed      	b.n	223bc <memcmp+0x34>
   223e0:	4618      	mov	r0, r3
   223e2:	bd70      	pop	{r4, r5, r6, pc}
   223e4:	4610      	mov	r0, r2
   223e6:	bd70      	pop	{r4, r5, r6, pc}

000223e8 <memmove>:
   223e8:	4288      	cmp	r0, r1
   223ea:	d90d      	bls.n	22408 <memmove+0x20>
   223ec:	188b      	adds	r3, r1, r2
   223ee:	4283      	cmp	r3, r0
   223f0:	d90a      	bls.n	22408 <memmove+0x20>
   223f2:	eb00 0c02 	add.w	ip, r0, r2
   223f6:	b1ba      	cbz	r2, 22428 <memmove+0x40>
   223f8:	4662      	mov	r2, ip
   223fa:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   223fe:	f802 cd01 	strb.w	ip, [r2, #-1]!
   22402:	4299      	cmp	r1, r3
   22404:	d1f9      	bne.n	223fa <memmove+0x12>
   22406:	4770      	bx	lr
   22408:	2a0f      	cmp	r2, #15
   2240a:	d80e      	bhi.n	2242a <memmove+0x42>
   2240c:	4603      	mov	r3, r0
   2240e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   22412:	b14a      	cbz	r2, 22428 <memmove+0x40>
   22414:	f10c 0c01 	add.w	ip, ip, #1
   22418:	3b01      	subs	r3, #1
   2241a:	448c      	add	ip, r1
   2241c:	f811 2b01 	ldrb.w	r2, [r1], #1
   22420:	f803 2f01 	strb.w	r2, [r3, #1]!
   22424:	4561      	cmp	r1, ip
   22426:	d1f9      	bne.n	2241c <memmove+0x34>
   22428:	4770      	bx	lr
   2242a:	ea40 0301 	orr.w	r3, r0, r1
   2242e:	079b      	lsls	r3, r3, #30
   22430:	d150      	bne.n	224d4 <memmove+0xec>
   22432:	f1a2 0310 	sub.w	r3, r2, #16
   22436:	b570      	push	{r4, r5, r6, lr}
   22438:	f101 0c20 	add.w	ip, r1, #32
   2243c:	f023 050f 	bic.w	r5, r3, #15
   22440:	f101 0e10 	add.w	lr, r1, #16
   22444:	f100 0410 	add.w	r4, r0, #16
   22448:	44ac      	add	ip, r5
   2244a:	091b      	lsrs	r3, r3, #4
   2244c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   22450:	f844 5c10 	str.w	r5, [r4, #-16]
   22454:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
   22458:	f844 5c0c 	str.w	r5, [r4, #-12]
   2245c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
   22460:	f844 5c08 	str.w	r5, [r4, #-8]
   22464:	f85e 5c04 	ldr.w	r5, [lr, #-4]
   22468:	f844 5c04 	str.w	r5, [r4, #-4]
   2246c:	f10e 0e10 	add.w	lr, lr, #16
   22470:	45e6      	cmp	lr, ip
   22472:	f104 0410 	add.w	r4, r4, #16
   22476:	d1e9      	bne.n	2244c <memmove+0x64>
   22478:	3301      	adds	r3, #1
   2247a:	f012 0f0c 	tst.w	r2, #12
   2247e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   22482:	f002 040f 	and.w	r4, r2, #15
   22486:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   2248a:	d027      	beq.n	224dc <memmove+0xf4>
   2248c:	3c04      	subs	r4, #4
   2248e:	f024 0603 	bic.w	r6, r4, #3
   22492:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   22496:	441e      	add	r6, r3
   22498:	1f1c      	subs	r4, r3, #4
   2249a:	468e      	mov	lr, r1
   2249c:	f85e 5b04 	ldr.w	r5, [lr], #4
   224a0:	f844 5f04 	str.w	r5, [r4, #4]!
   224a4:	42b4      	cmp	r4, r6
   224a6:	d1f9      	bne.n	2249c <memmove+0xb4>
   224a8:	f10c 0401 	add.w	r4, ip, #1
   224ac:	f002 0203 	and.w	r2, r2, #3
   224b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   224b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   224b8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   224bc:	b14a      	cbz	r2, 224d2 <memmove+0xea>
   224be:	f10c 0c01 	add.w	ip, ip, #1
   224c2:	3b01      	subs	r3, #1
   224c4:	448c      	add	ip, r1
   224c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   224ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   224ce:	4561      	cmp	r1, ip
   224d0:	d1f9      	bne.n	224c6 <memmove+0xde>
   224d2:	bd70      	pop	{r4, r5, r6, pc}
   224d4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
   224d8:	4603      	mov	r3, r0
   224da:	e79b      	b.n	22414 <memmove+0x2c>
   224dc:	4622      	mov	r2, r4
   224de:	e7eb      	b.n	224b8 <memmove+0xd0>

000224e0 <memset>:
   224e0:	0783      	lsls	r3, r0, #30
   224e2:	b530      	push	{r4, r5, lr}
   224e4:	d048      	beq.n	22578 <memset+0x98>
   224e6:	1e54      	subs	r4, r2, #1
   224e8:	2a00      	cmp	r2, #0
   224ea:	d03f      	beq.n	2256c <memset+0x8c>
   224ec:	b2ca      	uxtb	r2, r1
   224ee:	4603      	mov	r3, r0
   224f0:	e001      	b.n	224f6 <memset+0x16>
   224f2:	3c01      	subs	r4, #1
   224f4:	d33a      	bcc.n	2256c <memset+0x8c>
   224f6:	f803 2b01 	strb.w	r2, [r3], #1
   224fa:	079d      	lsls	r5, r3, #30
   224fc:	d1f9      	bne.n	224f2 <memset+0x12>
   224fe:	2c03      	cmp	r4, #3
   22500:	d92d      	bls.n	2255e <memset+0x7e>
   22502:	b2cd      	uxtb	r5, r1
   22504:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   22508:	2c0f      	cmp	r4, #15
   2250a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2250e:	d936      	bls.n	2257e <memset+0x9e>
   22510:	f1a4 0210 	sub.w	r2, r4, #16
   22514:	f022 0c0f 	bic.w	ip, r2, #15
   22518:	f103 0e20 	add.w	lr, r3, #32
   2251c:	44e6      	add	lr, ip
   2251e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   22522:	f103 0210 	add.w	r2, r3, #16
   22526:	e942 5504 	strd	r5, r5, [r2, #-16]
   2252a:	e942 5502 	strd	r5, r5, [r2, #-8]
   2252e:	3210      	adds	r2, #16
   22530:	4572      	cmp	r2, lr
   22532:	d1f8      	bne.n	22526 <memset+0x46>
   22534:	f10c 0201 	add.w	r2, ip, #1
   22538:	f014 0f0c 	tst.w	r4, #12
   2253c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   22540:	f004 0c0f 	and.w	ip, r4, #15
   22544:	d013      	beq.n	2256e <memset+0x8e>
   22546:	f1ac 0304 	sub.w	r3, ip, #4
   2254a:	f023 0303 	bic.w	r3, r3, #3
   2254e:	3304      	adds	r3, #4
   22550:	4413      	add	r3, r2
   22552:	f842 5b04 	str.w	r5, [r2], #4
   22556:	4293      	cmp	r3, r2
   22558:	d1fb      	bne.n	22552 <memset+0x72>
   2255a:	f00c 0403 	and.w	r4, ip, #3
   2255e:	b12c      	cbz	r4, 2256c <memset+0x8c>
   22560:	b2c9      	uxtb	r1, r1
   22562:	441c      	add	r4, r3
   22564:	f803 1b01 	strb.w	r1, [r3], #1
   22568:	429c      	cmp	r4, r3
   2256a:	d1fb      	bne.n	22564 <memset+0x84>
   2256c:	bd30      	pop	{r4, r5, pc}
   2256e:	4664      	mov	r4, ip
   22570:	4613      	mov	r3, r2
   22572:	2c00      	cmp	r4, #0
   22574:	d1f4      	bne.n	22560 <memset+0x80>
   22576:	e7f9      	b.n	2256c <memset+0x8c>
   22578:	4603      	mov	r3, r0
   2257a:	4614      	mov	r4, r2
   2257c:	e7bf      	b.n	224fe <memset+0x1e>
   2257e:	461a      	mov	r2, r3
   22580:	46a4      	mov	ip, r4
   22582:	e7e0      	b.n	22546 <memset+0x66>

00022584 <strncmp>:
   22584:	2a00      	cmp	r2, #0
   22586:	d03e      	beq.n	22606 <strncmp+0x82>
   22588:	ea40 0301 	orr.w	r3, r0, r1
   2258c:	079b      	lsls	r3, r3, #30
   2258e:	b530      	push	{r4, r5, lr}
   22590:	4684      	mov	ip, r0
   22592:	d12f      	bne.n	225f4 <strncmp+0x70>
   22594:	2a03      	cmp	r2, #3
   22596:	d92d      	bls.n	225f4 <strncmp+0x70>
   22598:	460b      	mov	r3, r1
   2259a:	e008      	b.n	225ae <strncmp+0x2a>
   2259c:	3a04      	subs	r2, #4
   2259e:	4684      	mov	ip, r0
   225a0:	4619      	mov	r1, r3
   225a2:	d025      	beq.n	225f0 <strncmp+0x6c>
   225a4:	f01e 3f80 	tst.w	lr, #2155905152	; 0x80808080
   225a8:	d122      	bne.n	225f0 <strncmp+0x6c>
   225aa:	2a03      	cmp	r2, #3
   225ac:	d922      	bls.n	225f4 <strncmp+0x70>
   225ae:	6804      	ldr	r4, [r0, #0]
   225b0:	4619      	mov	r1, r3
   225b2:	f853 5b04 	ldr.w	r5, [r3], #4
   225b6:	f1a4 3e01 	sub.w	lr, r4, #16843009	; 0x1010101
   225ba:	42ac      	cmp	r4, r5
   225bc:	4684      	mov	ip, r0
   225be:	ea2e 0e04 	bic.w	lr, lr, r4
   225c2:	f100 0004 	add.w	r0, r0, #4
   225c6:	d0e9      	beq.n	2259c <strncmp+0x18>
   225c8:	f89c 0000 	ldrb.w	r0, [ip]
   225cc:	780c      	ldrb	r4, [r1, #0]
   225ce:	42a0      	cmp	r0, r4
   225d0:	d11b      	bne.n	2260a <strncmp+0x86>
   225d2:	46e6      	mov	lr, ip
   225d4:	b168      	cbz	r0, 225f2 <strncmp+0x6e>
   225d6:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   225da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   225de:	eba2 030e 	sub.w	r3, r2, lr
   225e2:	42a0      	cmp	r0, r4
   225e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   225e8:	d10f      	bne.n	2260a <strncmp+0x86>
   225ea:	eb1c 0303 	adds.w	r3, ip, r3
   225ee:	d1f1      	bne.n	225d4 <strncmp+0x50>
   225f0:	2000      	movs	r0, #0
   225f2:	bd30      	pop	{r4, r5, pc}
   225f4:	f89c 0000 	ldrb.w	r0, [ip]
   225f8:	780c      	ldrb	r4, [r1, #0]
   225fa:	4284      	cmp	r4, r0
   225fc:	d105      	bne.n	2260a <strncmp+0x86>
   225fe:	2a01      	cmp	r2, #1
   22600:	d0f6      	beq.n	225f0 <strncmp+0x6c>
   22602:	46e6      	mov	lr, ip
   22604:	e7e6      	b.n	225d4 <strncmp+0x50>
   22606:	4610      	mov	r0, r2
   22608:	4770      	bx	lr
   2260a:	1b00      	subs	r0, r0, r4
   2260c:	bd30      	pop	{r4, r5, pc}
   2260e:	bf00      	nop

00022610 <strncpy>:
   22610:	ea40 0301 	orr.w	r3, r0, r1
   22614:	079b      	lsls	r3, r3, #30
   22616:	b530      	push	{r4, r5, lr}
   22618:	d101      	bne.n	2261e <strncpy+0xe>
   2261a:	2a03      	cmp	r2, #3
   2261c:	d80f      	bhi.n	2263e <strncpy+0x2e>
   2261e:	4684      	mov	ip, r0
   22620:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
   22624:	e007      	b.n	22636 <strncpy+0x26>
   22626:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   2262a:	f803 1b01 	strb.w	r1, [r3], #1
   2262e:	1e54      	subs	r4, r2, #1
   22630:	b1c1      	cbz	r1, 22664 <strncpy+0x54>
   22632:	469c      	mov	ip, r3
   22634:	4622      	mov	r2, r4
   22636:	4663      	mov	r3, ip
   22638:	2a00      	cmp	r2, #0
   2263a:	d1f4      	bne.n	22626 <strncpy+0x16>
   2263c:	bd30      	pop	{r4, r5, pc}
   2263e:	460b      	mov	r3, r1
   22640:	4684      	mov	ip, r0
   22642:	4619      	mov	r1, r3
   22644:	f853 5b04 	ldr.w	r5, [r3], #4
   22648:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2264c:	ea24 0405 	bic.w	r4, r4, r5
   22650:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   22654:	d1e4      	bne.n	22620 <strncpy+0x10>
   22656:	3a04      	subs	r2, #4
   22658:	2a03      	cmp	r2, #3
   2265a:	f84c 5b04 	str.w	r5, [ip], #4
   2265e:	4619      	mov	r1, r3
   22660:	d8ef      	bhi.n	22642 <strncpy+0x32>
   22662:	e7dd      	b.n	22620 <strncpy+0x10>
   22664:	4494      	add	ip, r2
   22666:	2c00      	cmp	r4, #0
   22668:	d0e8      	beq.n	2263c <strncpy+0x2c>
   2266a:	f803 1b01 	strb.w	r1, [r3], #1
   2266e:	4563      	cmp	r3, ip
   22670:	d1fb      	bne.n	2266a <strncpy+0x5a>
   22672:	bd30      	pop	{r4, r5, pc}

00022674 <_vasnprintf_r>:
   22674:	b530      	push	{r4, r5, lr}
   22676:	6814      	ldr	r4, [r2, #0]
   22678:	4615      	mov	r5, r2
   2267a:	b09b      	sub	sp, #108	; 0x6c
   2267c:	461a      	mov	r2, r3
   2267e:	b109      	cbz	r1, 22684 <_vasnprintf_r+0x10>
   22680:	2c00      	cmp	r4, #0
   22682:	d119      	bne.n	226b8 <_vasnprintf_r+0x44>
   22684:	2100      	movs	r1, #0
   22686:	f44f 7322 	mov.w	r3, #648	; 0x288
   2268a:	f8ad 300c 	strh.w	r3, [sp, #12]
   2268e:	9100      	str	r1, [sp, #0]
   22690:	9104      	str	r1, [sp, #16]
   22692:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22696:	9102      	str	r1, [sp, #8]
   22698:	9105      	str	r1, [sp, #20]
   2269a:	f8ad 300e 	strh.w	r3, [sp, #14]
   2269e:	4669      	mov	r1, sp
   226a0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   226a2:	f000 fccd 	bl	23040 <_svfprintf_r>
   226a6:	2800      	cmp	r0, #0
   226a8:	db13      	blt.n	226d2 <_vasnprintf_r+0x5e>
   226aa:	9b00      	ldr	r3, [sp, #0]
   226ac:	6028      	str	r0, [r5, #0]
   226ae:	2200      	movs	r2, #0
   226b0:	701a      	strb	r2, [r3, #0]
   226b2:	9804      	ldr	r0, [sp, #16]
   226b4:	b01b      	add	sp, #108	; 0x6c
   226b6:	bd30      	pop	{r4, r5, pc}
   226b8:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   226bc:	9100      	str	r1, [sp, #0]
   226be:	9104      	str	r1, [sp, #16]
   226c0:	f8ad 300c 	strh.w	r3, [sp, #12]
   226c4:	4621      	mov	r1, r4
   226c6:	dae4      	bge.n	22692 <_vasnprintf_r+0x1e>
   226c8:	238b      	movs	r3, #139	; 0x8b
   226ca:	6003      	str	r3, [r0, #0]
   226cc:	2000      	movs	r0, #0
   226ce:	b01b      	add	sp, #108	; 0x6c
   226d0:	bd30      	pop	{r4, r5, pc}
   226d2:	2000      	movs	r0, #0
   226d4:	e7ee      	b.n	226b4 <_vasnprintf_r+0x40>
   226d6:	bf00      	nop

000226d8 <__locale_mb_cur_max>:
   226d8:	4b01      	ldr	r3, [pc, #4]	; (226e0 <__locale_mb_cur_max+0x8>)
   226da:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   226de:	4770      	bx	lr
   226e0:	2000333c 	.word	0x2000333c

000226e4 <__cxa_atexit>:
   226e4:	4613      	mov	r3, r2
   226e6:	460a      	mov	r2, r1
   226e8:	4601      	mov	r1, r0
   226ea:	2002      	movs	r0, #2
   226ec:	f000 baf6 	b.w	22cdc <__register_exitproc>

000226f0 <fcvtf>:
   226f0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
   226f4:	2300      	movs	r3, #0
   226f6:	f003 b8e5 	b.w	258c4 <fcvtbuf>
   226fa:	bf00      	nop

000226fc <_sbrk_r>:
   226fc:	b538      	push	{r3, r4, r5, lr}
   226fe:	4d07      	ldr	r5, [pc, #28]	; (2271c <_sbrk_r+0x20>)
   22700:	2200      	movs	r2, #0
   22702:	4604      	mov	r4, r0
   22704:	4608      	mov	r0, r1
   22706:	602a      	str	r2, [r5, #0]
   22708:	f7f4 fb4e 	bl	16da8 <_sbrk>
   2270c:	1c43      	adds	r3, r0, #1
   2270e:	d000      	beq.n	22712 <_sbrk_r+0x16>
   22710:	bd38      	pop	{r3, r4, r5, pc}
   22712:	682b      	ldr	r3, [r5, #0]
   22714:	2b00      	cmp	r3, #0
   22716:	d0fb      	beq.n	22710 <_sbrk_r+0x14>
   22718:	6023      	str	r3, [r4, #0]
   2271a:	bd38      	pop	{r3, r4, r5, pc}
   2271c:	20006bb4 	.word	0x20006bb4

00022720 <_write_r>:
   22720:	b538      	push	{r3, r4, r5, lr}
   22722:	460c      	mov	r4, r1
   22724:	4d08      	ldr	r5, [pc, #32]	; (22748 <_write_r+0x28>)
   22726:	4684      	mov	ip, r0
   22728:	4611      	mov	r1, r2
   2272a:	4620      	mov	r0, r4
   2272c:	461a      	mov	r2, r3
   2272e:	2300      	movs	r3, #0
   22730:	602b      	str	r3, [r5, #0]
   22732:	4664      	mov	r4, ip
   22734:	f7f2 ffac 	bl	15690 <_write>
   22738:	1c43      	adds	r3, r0, #1
   2273a:	d000      	beq.n	2273e <_write_r+0x1e>
   2273c:	bd38      	pop	{r3, r4, r5, pc}
   2273e:	682b      	ldr	r3, [r5, #0]
   22740:	2b00      	cmp	r3, #0
   22742:	d0fb      	beq.n	2273c <_write_r+0x1c>
   22744:	6023      	str	r3, [r4, #0]
   22746:	bd38      	pop	{r3, r4, r5, pc}
   22748:	20006bb4 	.word	0x20006bb4

0002274c <__errno>:
   2274c:	4b01      	ldr	r3, [pc, #4]	; (22754 <__errno+0x8>)
   2274e:	6818      	ldr	r0, [r3, #0]
   22750:	4770      	bx	lr
   22752:	bf00      	nop
   22754:	200038c4 	.word	0x200038c4
	...
   22760:	eba2 0003 	sub.w	r0, r2, r3
   22764:	4770      	bx	lr
   22766:	bf00      	nop

00022768 <strcmp>:
   22768:	7802      	ldrb	r2, [r0, #0]
   2276a:	780b      	ldrb	r3, [r1, #0]
   2276c:	2a01      	cmp	r2, #1
   2276e:	bf28      	it	cs
   22770:	429a      	cmpcs	r2, r3
   22772:	d1f5      	bne.n	22760 <__errno+0x14>
   22774:	e96d 4504 	strd	r4, r5, [sp, #-16]!
   22778:	ea40 0401 	orr.w	r4, r0, r1
   2277c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   22780:	f06f 0c00 	mvn.w	ip, #0
   22784:	ea4f 7244 	mov.w	r2, r4, lsl #29
   22788:	b312      	cbz	r2, 227d0 <strcmp+0x68>
   2278a:	ea80 0401 	eor.w	r4, r0, r1
   2278e:	f014 0f07 	tst.w	r4, #7
   22792:	d16a      	bne.n	2286a <strcmp+0x102>
   22794:	f000 0407 	and.w	r4, r0, #7
   22798:	f020 0007 	bic.w	r0, r0, #7
   2279c:	f004 0503 	and.w	r5, r4, #3
   227a0:	f021 0107 	bic.w	r1, r1, #7
   227a4:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   227a8:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   227ac:	f014 0f04 	tst.w	r4, #4
   227b0:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   227b4:	fa0c f405 	lsl.w	r4, ip, r5
   227b8:	ea62 0204 	orn	r2, r2, r4
   227bc:	ea66 0604 	orn	r6, r6, r4
   227c0:	d00a      	beq.n	227d8 <strcmp+0x70>
   227c2:	ea63 0304 	orn	r3, r3, r4
   227c6:	4662      	mov	r2, ip
   227c8:	ea67 0704 	orn	r7, r7, r4
   227cc:	4666      	mov	r6, ip
   227ce:	e003      	b.n	227d8 <strcmp+0x70>
   227d0:	e8f0 2304 	ldrd	r2, r3, [r0], #16
   227d4:	e8f1 6704 	ldrd	r6, r7, [r1], #16
   227d8:	fa82 f54c 	uadd8	r5, r2, ip
   227dc:	ea82 0406 	eor.w	r4, r2, r6
   227e0:	faa4 f48c 	sel	r4, r4, ip
   227e4:	bb6c      	cbnz	r4, 22842 <strcmp+0xda>
   227e6:	fa83 f54c 	uadd8	r5, r3, ip
   227ea:	ea83 0507 	eor.w	r5, r3, r7
   227ee:	faa5 f58c 	sel	r5, r5, ip
   227f2:	b995      	cbnz	r5, 2281a <strcmp+0xb2>
   227f4:	e950 2302 	ldrd	r2, r3, [r0, #-8]
   227f8:	e951 6702 	ldrd	r6, r7, [r1, #-8]
   227fc:	fa82 f54c 	uadd8	r5, r2, ip
   22800:	ea82 0406 	eor.w	r4, r2, r6
   22804:	faa4 f48c 	sel	r4, r4, ip
   22808:	fa83 f54c 	uadd8	r5, r3, ip
   2280c:	ea83 0507 	eor.w	r5, r3, r7
   22810:	faa5 f58c 	sel	r5, r5, ip
   22814:	4325      	orrs	r5, r4
   22816:	d0db      	beq.n	227d0 <strcmp+0x68>
   22818:	b99c      	cbnz	r4, 22842 <strcmp+0xda>
   2281a:	ba2d      	rev	r5, r5
   2281c:	fab5 f485 	clz	r4, r5
   22820:	f024 0407 	bic.w	r4, r4, #7
   22824:	fa27 f104 	lsr.w	r1, r7, r4
   22828:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   2282c:	fa23 f304 	lsr.w	r3, r3, r4
   22830:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   22834:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   22838:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   2283c:	eba0 0001 	sub.w	r0, r0, r1
   22840:	4770      	bx	lr
   22842:	ba24      	rev	r4, r4
   22844:	fab4 f484 	clz	r4, r4
   22848:	f024 0407 	bic.w	r4, r4, #7
   2284c:	fa26 f104 	lsr.w	r1, r6, r4
   22850:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
   22854:	fa22 f204 	lsr.w	r2, r2, r4
   22858:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   2285c:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   22860:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   22864:	eba0 0001 	sub.w	r0, r0, r1
   22868:	4770      	bx	lr
   2286a:	f014 0f03 	tst.w	r4, #3
   2286e:	d13c      	bne.n	228ea <strcmp+0x182>
   22870:	f010 0403 	ands.w	r4, r0, #3
   22874:	d128      	bne.n	228c8 <strcmp+0x160>
   22876:	f850 2b08 	ldr.w	r2, [r0], #8
   2287a:	f851 3b08 	ldr.w	r3, [r1], #8
   2287e:	fa82 f54c 	uadd8	r5, r2, ip
   22882:	ea82 0503 	eor.w	r5, r2, r3
   22886:	faa5 f58c 	sel	r5, r5, ip
   2288a:	b95d      	cbnz	r5, 228a4 <strcmp+0x13c>
   2288c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   22890:	f851 3c04 	ldr.w	r3, [r1, #-4]
   22894:	fa82 f54c 	uadd8	r5, r2, ip
   22898:	ea82 0503 	eor.w	r5, r2, r3
   2289c:	faa5 f58c 	sel	r5, r5, ip
   228a0:	2d00      	cmp	r5, #0
   228a2:	d0e8      	beq.n	22876 <strcmp+0x10e>
   228a4:	ba2d      	rev	r5, r5
   228a6:	fab5 f485 	clz	r4, r5
   228aa:	f024 0407 	bic.w	r4, r4, #7
   228ae:	fa23 f104 	lsr.w	r1, r3, r4
   228b2:	fa22 f204 	lsr.w	r2, r2, r4
   228b6:	f002 00ff 	and.w	r0, r2, #255	; 0xff
   228ba:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   228be:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   228c2:	eba0 0001 	sub.w	r0, r0, r1
   228c6:	4770      	bx	lr
   228c8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   228cc:	f020 0003 	bic.w	r0, r0, #3
   228d0:	f850 2b08 	ldr.w	r2, [r0], #8
   228d4:	f021 0103 	bic.w	r1, r1, #3
   228d8:	f851 3b08 	ldr.w	r3, [r1], #8
   228dc:	fa0c f404 	lsl.w	r4, ip, r4
   228e0:	ea62 0204 	orn	r2, r2, r4
   228e4:	ea63 0304 	orn	r3, r3, r4
   228e8:	e7c9      	b.n	2287e <strcmp+0x116>
   228ea:	f010 0403 	ands.w	r4, r0, #3
   228ee:	d01a      	beq.n	22926 <strcmp+0x1be>
   228f0:	eba1 0104 	sub.w	r1, r1, r4
   228f4:	f020 0003 	bic.w	r0, r0, #3
   228f8:	07e4      	lsls	r4, r4, #31
   228fa:	f850 2b04 	ldr.w	r2, [r0], #4
   228fe:	d006      	beq.n	2290e <strcmp+0x1a6>
   22900:	d20f      	bcs.n	22922 <strcmp+0x1ba>
   22902:	788b      	ldrb	r3, [r1, #2]
   22904:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
   22908:	1ae4      	subs	r4, r4, r3
   2290a:	d106      	bne.n	2291a <strcmp+0x1b2>
   2290c:	b12b      	cbz	r3, 2291a <strcmp+0x1b2>
   2290e:	78cb      	ldrb	r3, [r1, #3]
   22910:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
   22914:	1ae4      	subs	r4, r4, r3
   22916:	d100      	bne.n	2291a <strcmp+0x1b2>
   22918:	b91b      	cbnz	r3, 22922 <strcmp+0x1ba>
   2291a:	4620      	mov	r0, r4
   2291c:	f85d 4b10 	ldr.w	r4, [sp], #16
   22920:	4770      	bx	lr
   22922:	f101 0104 	add.w	r1, r1, #4
   22926:	f850 2b04 	ldr.w	r2, [r0], #4
   2292a:	07cc      	lsls	r4, r1, #31
   2292c:	f021 0103 	bic.w	r1, r1, #3
   22930:	f851 3b04 	ldr.w	r3, [r1], #4
   22934:	d848      	bhi.n	229c8 <strcmp+0x260>
   22936:	d224      	bcs.n	22982 <strcmp+0x21a>
   22938:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
   2293c:	fa82 f54c 	uadd8	r5, r2, ip
   22940:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
   22944:	faa5 f58c 	sel	r5, r5, ip
   22948:	d10a      	bne.n	22960 <strcmp+0x1f8>
   2294a:	b965      	cbnz	r5, 22966 <strcmp+0x1fe>
   2294c:	f851 3b04 	ldr.w	r3, [r1], #4
   22950:	ea84 0402 	eor.w	r4, r4, r2
   22954:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
   22958:	d10e      	bne.n	22978 <strcmp+0x210>
   2295a:	f850 2b04 	ldr.w	r2, [r0], #4
   2295e:	e7eb      	b.n	22938 <strcmp+0x1d0>
   22960:	ea4f 2313 	mov.w	r3, r3, lsr #8
   22964:	e055      	b.n	22a12 <strcmp+0x2aa>
   22966:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
   2296a:	d14d      	bne.n	22a08 <strcmp+0x2a0>
   2296c:	7808      	ldrb	r0, [r1, #0]
   2296e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   22972:	f1c0 0000 	rsb	r0, r0, #0
   22976:	4770      	bx	lr
   22978:	ea4f 6212 	mov.w	r2, r2, lsr #24
   2297c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   22980:	e047      	b.n	22a12 <strcmp+0x2aa>
   22982:	ea02 441c 	and.w	r4, r2, ip, lsr #16
   22986:	fa82 f54c 	uadd8	r5, r2, ip
   2298a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
   2298e:	faa5 f58c 	sel	r5, r5, ip
   22992:	d10a      	bne.n	229aa <strcmp+0x242>
   22994:	b965      	cbnz	r5, 229b0 <strcmp+0x248>
   22996:	f851 3b04 	ldr.w	r3, [r1], #4
   2299a:	ea84 0402 	eor.w	r4, r4, r2
   2299e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
   229a2:	d10c      	bne.n	229be <strcmp+0x256>
   229a4:	f850 2b04 	ldr.w	r2, [r0], #4
   229a8:	e7eb      	b.n	22982 <strcmp+0x21a>
   229aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
   229ae:	e030      	b.n	22a12 <strcmp+0x2aa>
   229b0:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
   229b4:	d128      	bne.n	22a08 <strcmp+0x2a0>
   229b6:	880b      	ldrh	r3, [r1, #0]
   229b8:	ea4f 4212 	mov.w	r2, r2, lsr #16
   229bc:	e029      	b.n	22a12 <strcmp+0x2aa>
   229be:	ea4f 4212 	mov.w	r2, r2, lsr #16
   229c2:	ea03 431c 	and.w	r3, r3, ip, lsr #16
   229c6:	e024      	b.n	22a12 <strcmp+0x2aa>
   229c8:	f002 04ff 	and.w	r4, r2, #255	; 0xff
   229cc:	fa82 f54c 	uadd8	r5, r2, ip
   229d0:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
   229d4:	faa5 f58c 	sel	r5, r5, ip
   229d8:	d10a      	bne.n	229f0 <strcmp+0x288>
   229da:	b965      	cbnz	r5, 229f6 <strcmp+0x28e>
   229dc:	f851 3b04 	ldr.w	r3, [r1], #4
   229e0:	ea84 0402 	eor.w	r4, r4, r2
   229e4:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
   229e8:	d109      	bne.n	229fe <strcmp+0x296>
   229ea:	f850 2b04 	ldr.w	r2, [r0], #4
   229ee:	e7eb      	b.n	229c8 <strcmp+0x260>
   229f0:	ea4f 6313 	mov.w	r3, r3, lsr #24
   229f4:	e00d      	b.n	22a12 <strcmp+0x2aa>
   229f6:	f015 0fff 	tst.w	r5, #255	; 0xff
   229fa:	d105      	bne.n	22a08 <strcmp+0x2a0>
   229fc:	680b      	ldr	r3, [r1, #0]
   229fe:	ea4f 2212 	mov.w	r2, r2, lsr #8
   22a02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   22a06:	e004      	b.n	22a12 <strcmp+0x2aa>
   22a08:	f04f 0000 	mov.w	r0, #0
   22a0c:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   22a10:	4770      	bx	lr
   22a12:	ba12      	rev	r2, r2
   22a14:	ba1b      	rev	r3, r3
   22a16:	fa82 f44c 	uadd8	r4, r2, ip
   22a1a:	ea82 0403 	eor.w	r4, r2, r3
   22a1e:	faa4 f58c 	sel	r5, r4, ip
   22a22:	fab5 f485 	clz	r4, r5
   22a26:	fa02 f204 	lsl.w	r2, r2, r4
   22a2a:	fa03 f304 	lsl.w	r3, r3, r4
   22a2e:	ea4f 6012 	mov.w	r0, r2, lsr #24
   22a32:	e8fd 4504 	ldrd	r4, r5, [sp], #16
   22a36:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
   22a3a:	4770      	bx	lr

00022a3c <strcpy>:
   22a3c:	ea80 0201 	eor.w	r2, r0, r1
   22a40:	4684      	mov	ip, r0
   22a42:	f012 0f03 	tst.w	r2, #3
   22a46:	d14f      	bne.n	22ae8 <strcpy+0xac>
   22a48:	f011 0f03 	tst.w	r1, #3
   22a4c:	d132      	bne.n	22ab4 <strcpy+0x78>
   22a4e:	f84d 4d04 	str.w	r4, [sp, #-4]!
   22a52:	f011 0f04 	tst.w	r1, #4
   22a56:	f851 3b04 	ldr.w	r3, [r1], #4
   22a5a:	d00b      	beq.n	22a74 <strcpy+0x38>
   22a5c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   22a60:	439a      	bics	r2, r3
   22a62:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   22a66:	bf04      	itt	eq
   22a68:	f84c 3b04 	streq.w	r3, [ip], #4
   22a6c:	f851 3b04 	ldreq.w	r3, [r1], #4
   22a70:	d116      	bne.n	22aa0 <strcpy+0x64>
   22a72:	bf00      	nop
   22a74:	f851 4b04 	ldr.w	r4, [r1], #4
   22a78:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   22a7c:	439a      	bics	r2, r3
   22a7e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   22a82:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   22a86:	d10b      	bne.n	22aa0 <strcpy+0x64>
   22a88:	f84c 3b04 	str.w	r3, [ip], #4
   22a8c:	43a2      	bics	r2, r4
   22a8e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   22a92:	bf04      	itt	eq
   22a94:	f851 3b04 	ldreq.w	r3, [r1], #4
   22a98:	f84c 4b04 	streq.w	r4, [ip], #4
   22a9c:	d0ea      	beq.n	22a74 <strcpy+0x38>
   22a9e:	4623      	mov	r3, r4
   22aa0:	f80c 3b01 	strb.w	r3, [ip], #1
   22aa4:	f013 0fff 	tst.w	r3, #255	; 0xff
   22aa8:	ea4f 2333 	mov.w	r3, r3, ror #8
   22aac:	d1f8      	bne.n	22aa0 <strcpy+0x64>
   22aae:	f85d 4b04 	ldr.w	r4, [sp], #4
   22ab2:	4770      	bx	lr
   22ab4:	f011 0f01 	tst.w	r1, #1
   22ab8:	d006      	beq.n	22ac8 <strcpy+0x8c>
   22aba:	f811 2b01 	ldrb.w	r2, [r1], #1
   22abe:	f80c 2b01 	strb.w	r2, [ip], #1
   22ac2:	2a00      	cmp	r2, #0
   22ac4:	bf08      	it	eq
   22ac6:	4770      	bxeq	lr
   22ac8:	f011 0f02 	tst.w	r1, #2
   22acc:	d0bf      	beq.n	22a4e <strcpy+0x12>
   22ace:	f831 2b02 	ldrh.w	r2, [r1], #2
   22ad2:	f012 0fff 	tst.w	r2, #255	; 0xff
   22ad6:	bf16      	itet	ne
   22ad8:	f82c 2b02 	strhne.w	r2, [ip], #2
   22adc:	f88c 2000 	strbeq.w	r2, [ip]
   22ae0:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   22ae4:	d1b3      	bne.n	22a4e <strcpy+0x12>
   22ae6:	4770      	bx	lr
   22ae8:	f811 2b01 	ldrb.w	r2, [r1], #1
   22aec:	f80c 2b01 	strb.w	r2, [ip], #1
   22af0:	2a00      	cmp	r2, #0
   22af2:	d1f9      	bne.n	22ae8 <strcpy+0xac>
   22af4:	4770      	bx	lr
   22af6:	bf00      	nop

00022af8 <__libc_init_array>:
   22af8:	b570      	push	{r4, r5, r6, lr}
   22afa:	4e0d      	ldr	r6, [pc, #52]	; (22b30 <__libc_init_array+0x38>)
   22afc:	4d0d      	ldr	r5, [pc, #52]	; (22b34 <__libc_init_array+0x3c>)
   22afe:	1b76      	subs	r6, r6, r5
   22b00:	10b6      	asrs	r6, r6, #2
   22b02:	d006      	beq.n	22b12 <__libc_init_array+0x1a>
   22b04:	2400      	movs	r4, #0
   22b06:	f855 3b04 	ldr.w	r3, [r5], #4
   22b0a:	3401      	adds	r4, #1
   22b0c:	4798      	blx	r3
   22b0e:	42a6      	cmp	r6, r4
   22b10:	d1f9      	bne.n	22b06 <__libc_init_array+0xe>
   22b12:	4e09      	ldr	r6, [pc, #36]	; (22b38 <__libc_init_array+0x40>)
   22b14:	4d09      	ldr	r5, [pc, #36]	; (22b3c <__libc_init_array+0x44>)
   22b16:	1b76      	subs	r6, r6, r5
   22b18:	f005 f8c6 	bl	27ca8 <___init_veneer>
   22b1c:	10b6      	asrs	r6, r6, #2
   22b1e:	d006      	beq.n	22b2e <__libc_init_array+0x36>
   22b20:	2400      	movs	r4, #0
   22b22:	f855 3b04 	ldr.w	r3, [r5], #4
   22b26:	3401      	adds	r4, #1
   22b28:	4798      	blx	r3
   22b2a:	42a6      	cmp	r6, r4
   22b2c:	d1f9      	bne.n	22b22 <__libc_init_array+0x2a>
   22b2e:	bd70      	pop	{r4, r5, r6, pc}
   22b30:	600020f0 	.word	0x600020f0
   22b34:	600020f0 	.word	0x600020f0
   22b38:	60002174 	.word	0x60002174
   22b3c:	600020f0 	.word	0x600020f0

00022b40 <__retarget_lock_init_recursive>:
   22b40:	4770      	bx	lr
   22b42:	bf00      	nop

00022b44 <__retarget_lock_close_recursive>:
   22b44:	4770      	bx	lr
   22b46:	bf00      	nop

00022b48 <__retarget_lock_acquire_recursive>:
   22b48:	4770      	bx	lr
   22b4a:	bf00      	nop

00022b4c <__retarget_lock_release_recursive>:
   22b4c:	4770      	bx	lr
   22b4e:	bf00      	nop

00022b50 <memchr>:
   22b50:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   22b54:	2a10      	cmp	r2, #16
   22b56:	db2b      	blt.n	22bb0 <memchr+0x60>
   22b58:	f010 0f07 	tst.w	r0, #7
   22b5c:	d008      	beq.n	22b70 <memchr+0x20>
   22b5e:	f810 3b01 	ldrb.w	r3, [r0], #1
   22b62:	3a01      	subs	r2, #1
   22b64:	428b      	cmp	r3, r1
   22b66:	d02d      	beq.n	22bc4 <memchr+0x74>
   22b68:	f010 0f07 	tst.w	r0, #7
   22b6c:	b342      	cbz	r2, 22bc0 <memchr+0x70>
   22b6e:	d1f6      	bne.n	22b5e <memchr+0xe>
   22b70:	b4f0      	push	{r4, r5, r6, r7}
   22b72:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   22b76:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   22b7a:	f022 0407 	bic.w	r4, r2, #7
   22b7e:	f07f 0700 	mvns.w	r7, #0
   22b82:	2300      	movs	r3, #0
   22b84:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   22b88:	3c08      	subs	r4, #8
   22b8a:	ea85 0501 	eor.w	r5, r5, r1
   22b8e:	ea86 0601 	eor.w	r6, r6, r1
   22b92:	fa85 f547 	uadd8	r5, r5, r7
   22b96:	faa3 f587 	sel	r5, r3, r7
   22b9a:	fa86 f647 	uadd8	r6, r6, r7
   22b9e:	faa5 f687 	sel	r6, r5, r7
   22ba2:	b98e      	cbnz	r6, 22bc8 <memchr+0x78>
   22ba4:	d1ee      	bne.n	22b84 <memchr+0x34>
   22ba6:	bcf0      	pop	{r4, r5, r6, r7}
   22ba8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   22bac:	f002 0207 	and.w	r2, r2, #7
   22bb0:	b132      	cbz	r2, 22bc0 <memchr+0x70>
   22bb2:	f810 3b01 	ldrb.w	r3, [r0], #1
   22bb6:	3a01      	subs	r2, #1
   22bb8:	ea83 0301 	eor.w	r3, r3, r1
   22bbc:	b113      	cbz	r3, 22bc4 <memchr+0x74>
   22bbe:	d1f8      	bne.n	22bb2 <memchr+0x62>
   22bc0:	2000      	movs	r0, #0
   22bc2:	4770      	bx	lr
   22bc4:	3801      	subs	r0, #1
   22bc6:	4770      	bx	lr
   22bc8:	2d00      	cmp	r5, #0
   22bca:	bf06      	itte	eq
   22bcc:	4635      	moveq	r5, r6
   22bce:	3803      	subeq	r0, #3
   22bd0:	3807      	subne	r0, #7
   22bd2:	f015 0f01 	tst.w	r5, #1
   22bd6:	d107      	bne.n	22be8 <memchr+0x98>
   22bd8:	3001      	adds	r0, #1
   22bda:	f415 7f80 	tst.w	r5, #256	; 0x100
   22bde:	bf02      	ittt	eq
   22be0:	3001      	addeq	r0, #1
   22be2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   22be6:	3001      	addeq	r0, #1
   22be8:	bcf0      	pop	{r4, r5, r6, r7}
   22bea:	3801      	subs	r0, #1
   22bec:	4770      	bx	lr
   22bee:	bf00      	nop
	...

00022c00 <strlen>:
   22c00:	f890 f000 	pld	[r0]
   22c04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
   22c08:	f020 0107 	bic.w	r1, r0, #7
   22c0c:	f06f 0c00 	mvn.w	ip, #0
   22c10:	f010 0407 	ands.w	r4, r0, #7
   22c14:	f891 f020 	pld	[r1, #32]
   22c18:	f040 8049 	bne.w	22cae <strlen+0xae>
   22c1c:	f04f 0400 	mov.w	r4, #0
   22c20:	f06f 0007 	mvn.w	r0, #7
   22c24:	e9d1 2300 	ldrd	r2, r3, [r1]
   22c28:	f891 f040 	pld	[r1, #64]	; 0x40
   22c2c:	f100 0008 	add.w	r0, r0, #8
   22c30:	fa82 f24c 	uadd8	r2, r2, ip
   22c34:	faa4 f28c 	sel	r2, r4, ip
   22c38:	fa83 f34c 	uadd8	r3, r3, ip
   22c3c:	faa2 f38c 	sel	r3, r2, ip
   22c40:	bb4b      	cbnz	r3, 22c96 <strlen+0x96>
   22c42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
   22c46:	fa82 f24c 	uadd8	r2, r2, ip
   22c4a:	f100 0008 	add.w	r0, r0, #8
   22c4e:	faa4 f28c 	sel	r2, r4, ip
   22c52:	fa83 f34c 	uadd8	r3, r3, ip
   22c56:	faa2 f38c 	sel	r3, r2, ip
   22c5a:	b9e3      	cbnz	r3, 22c96 <strlen+0x96>
   22c5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
   22c60:	fa82 f24c 	uadd8	r2, r2, ip
   22c64:	f100 0008 	add.w	r0, r0, #8
   22c68:	faa4 f28c 	sel	r2, r4, ip
   22c6c:	fa83 f34c 	uadd8	r3, r3, ip
   22c70:	faa2 f38c 	sel	r3, r2, ip
   22c74:	b97b      	cbnz	r3, 22c96 <strlen+0x96>
   22c76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
   22c7a:	f101 0120 	add.w	r1, r1, #32
   22c7e:	fa82 f24c 	uadd8	r2, r2, ip
   22c82:	f100 0008 	add.w	r0, r0, #8
   22c86:	faa4 f28c 	sel	r2, r4, ip
   22c8a:	fa83 f34c 	uadd8	r3, r3, ip
   22c8e:	faa2 f38c 	sel	r3, r2, ip
   22c92:	2b00      	cmp	r3, #0
   22c94:	d0c6      	beq.n	22c24 <strlen+0x24>
   22c96:	2a00      	cmp	r2, #0
   22c98:	bf04      	itt	eq
   22c9a:	3004      	addeq	r0, #4
   22c9c:	461a      	moveq	r2, r3
   22c9e:	ba12      	rev	r2, r2
   22ca0:	fab2 f282 	clz	r2, r2
   22ca4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
   22ca8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   22cac:	4770      	bx	lr
   22cae:	e9d1 2300 	ldrd	r2, r3, [r1]
   22cb2:	f004 0503 	and.w	r5, r4, #3
   22cb6:	f1c4 0000 	rsb	r0, r4, #0
   22cba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   22cbe:	f014 0f04 	tst.w	r4, #4
   22cc2:	f891 f040 	pld	[r1, #64]	; 0x40
   22cc6:	fa0c f505 	lsl.w	r5, ip, r5
   22cca:	ea62 0205 	orn	r2, r2, r5
   22cce:	bf1c      	itt	ne
   22cd0:	ea63 0305 	ornne	r3, r3, r5
   22cd4:	4662      	movne	r2, ip
   22cd6:	f04f 0400 	mov.w	r4, #0
   22cda:	e7a9      	b.n	22c30 <strlen+0x30>

00022cdc <__register_exitproc>:
   22cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ce0:	f8df a07c 	ldr.w	sl, [pc, #124]	; 22d60 <__register_exitproc+0x84>
   22ce4:	4606      	mov	r6, r0
   22ce6:	f8da 0000 	ldr.w	r0, [sl]
   22cea:	4698      	mov	r8, r3
   22cec:	460f      	mov	r7, r1
   22cee:	4691      	mov	r9, r2
   22cf0:	f7ff ff2a 	bl	22b48 <__retarget_lock_acquire_recursive>
   22cf4:	4b18      	ldr	r3, [pc, #96]	; (22d58 <__register_exitproc+0x7c>)
   22cf6:	681c      	ldr	r4, [r3, #0]
   22cf8:	b324      	cbz	r4, 22d44 <__register_exitproc+0x68>
   22cfa:	6865      	ldr	r5, [r4, #4]
   22cfc:	2d1f      	cmp	r5, #31
   22cfe:	dc24      	bgt.n	22d4a <__register_exitproc+0x6e>
   22d00:	b95e      	cbnz	r6, 22d1a <__register_exitproc+0x3e>
   22d02:	1c6b      	adds	r3, r5, #1
   22d04:	3502      	adds	r5, #2
   22d06:	f8da 0000 	ldr.w	r0, [sl]
   22d0a:	6063      	str	r3, [r4, #4]
   22d0c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   22d10:	f7ff ff1c 	bl	22b4c <__retarget_lock_release_recursive>
   22d14:	2000      	movs	r0, #0
   22d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   22d1a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   22d1e:	2301      	movs	r3, #1
   22d20:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   22d24:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   22d28:	40ab      	lsls	r3, r5
   22d2a:	431a      	orrs	r2, r3
   22d2c:	2e02      	cmp	r6, #2
   22d2e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   22d32:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   22d36:	d1e4      	bne.n	22d02 <__register_exitproc+0x26>
   22d38:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   22d3c:	431a      	orrs	r2, r3
   22d3e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   22d42:	e7de      	b.n	22d02 <__register_exitproc+0x26>
   22d44:	4c05      	ldr	r4, [pc, #20]	; (22d5c <__register_exitproc+0x80>)
   22d46:	601c      	str	r4, [r3, #0]
   22d48:	e7d7      	b.n	22cfa <__register_exitproc+0x1e>
   22d4a:	f8da 0000 	ldr.w	r0, [sl]
   22d4e:	f7ff fefd 	bl	22b4c <__retarget_lock_release_recursive>
   22d52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d56:	e7de      	b.n	22d16 <__register_exitproc+0x3a>
   22d58:	2000530c 	.word	0x2000530c
   22d5c:	20005310 	.word	0x20005310
   22d60:	20003330 	.word	0x20003330

00022d64 <_malloc_trim_r>:
   22d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22d66:	4f24      	ldr	r7, [pc, #144]	; (22df8 <_malloc_trim_r+0x94>)
   22d68:	460c      	mov	r4, r1
   22d6a:	4606      	mov	r6, r0
   22d6c:	f7fe fcb8 	bl	216e0 <__malloc_lock>
   22d70:	68bb      	ldr	r3, [r7, #8]
   22d72:	685d      	ldr	r5, [r3, #4]
   22d74:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   22d78:	310f      	adds	r1, #15
   22d7a:	f025 0503 	bic.w	r5, r5, #3
   22d7e:	194b      	adds	r3, r1, r5
   22d80:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   22d84:	f023 030f 	bic.w	r3, r3, #15
   22d88:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   22d8c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   22d90:	db07      	blt.n	22da2 <_malloc_trim_r+0x3e>
   22d92:	2100      	movs	r1, #0
   22d94:	4630      	mov	r0, r6
   22d96:	f7ff fcb1 	bl	226fc <_sbrk_r>
   22d9a:	68bb      	ldr	r3, [r7, #8]
   22d9c:	442b      	add	r3, r5
   22d9e:	4298      	cmp	r0, r3
   22da0:	d004      	beq.n	22dac <_malloc_trim_r+0x48>
   22da2:	4630      	mov	r0, r6
   22da4:	f7fe fca2 	bl	216ec <__malloc_unlock>
   22da8:	2000      	movs	r0, #0
   22daa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22dac:	4261      	negs	r1, r4
   22dae:	4630      	mov	r0, r6
   22db0:	f7ff fca4 	bl	226fc <_sbrk_r>
   22db4:	3001      	adds	r0, #1
   22db6:	d00d      	beq.n	22dd4 <_malloc_trim_r+0x70>
   22db8:	4a10      	ldr	r2, [pc, #64]	; (22dfc <_malloc_trim_r+0x98>)
   22dba:	68bb      	ldr	r3, [r7, #8]
   22dbc:	1b2d      	subs	r5, r5, r4
   22dbe:	f045 0501 	orr.w	r5, r5, #1
   22dc2:	605d      	str	r5, [r3, #4]
   22dc4:	6813      	ldr	r3, [r2, #0]
   22dc6:	4630      	mov	r0, r6
   22dc8:	1b1b      	subs	r3, r3, r4
   22dca:	6013      	str	r3, [r2, #0]
   22dcc:	f7fe fc8e 	bl	216ec <__malloc_unlock>
   22dd0:	2001      	movs	r0, #1
   22dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22dd4:	2100      	movs	r1, #0
   22dd6:	4630      	mov	r0, r6
   22dd8:	f7ff fc90 	bl	226fc <_sbrk_r>
   22ddc:	68ba      	ldr	r2, [r7, #8]
   22dde:	1a83      	subs	r3, r0, r2
   22de0:	2b0f      	cmp	r3, #15
   22de2:	ddde      	ble.n	22da2 <_malloc_trim_r+0x3e>
   22de4:	f043 0301 	orr.w	r3, r3, #1
   22de8:	6053      	str	r3, [r2, #4]
   22dea:	4b05      	ldr	r3, [pc, #20]	; (22e00 <_malloc_trim_r+0x9c>)
   22dec:	4903      	ldr	r1, [pc, #12]	; (22dfc <_malloc_trim_r+0x98>)
   22dee:	681b      	ldr	r3, [r3, #0]
   22df0:	1ac0      	subs	r0, r0, r3
   22df2:	6008      	str	r0, [r1, #0]
   22df4:	e7d5      	b.n	22da2 <_malloc_trim_r+0x3e>
   22df6:	bf00      	nop
   22df8:	200034a8 	.word	0x200034a8
   22dfc:	200054ac 	.word	0x200054ac
   22e00:	200038b0 	.word	0x200038b0

00022e04 <_free_r>:
   22e04:	2900      	cmp	r1, #0
   22e06:	d061      	beq.n	22ecc <_free_r+0xc8>
   22e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e0a:	460c      	mov	r4, r1
   22e0c:	4606      	mov	r6, r0
   22e0e:	f7fe fc67 	bl	216e0 <__malloc_lock>
   22e12:	f854 2c04 	ldr.w	r2, [r4, #-4]
   22e16:	4f7b      	ldr	r7, [pc, #492]	; (23004 <_free_r+0x200>)
   22e18:	f1a4 0508 	sub.w	r5, r4, #8
   22e1c:	f022 0101 	bic.w	r1, r2, #1
   22e20:	eb05 0c01 	add.w	ip, r5, r1
   22e24:	68b8      	ldr	r0, [r7, #8]
   22e26:	f8dc 3004 	ldr.w	r3, [ip, #4]
   22e2a:	4560      	cmp	r0, ip
   22e2c:	f023 0303 	bic.w	r3, r3, #3
   22e30:	f000 808b 	beq.w	22f4a <_free_r+0x146>
   22e34:	07d2      	lsls	r2, r2, #31
   22e36:	f8cc 3004 	str.w	r3, [ip, #4]
   22e3a:	d432      	bmi.n	22ea2 <_free_r+0x9e>
   22e3c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   22e40:	1aad      	subs	r5, r5, r2
   22e42:	4411      	add	r1, r2
   22e44:	68aa      	ldr	r2, [r5, #8]
   22e46:	f107 0008 	add.w	r0, r7, #8
   22e4a:	4282      	cmp	r2, r0
   22e4c:	d06a      	beq.n	22f24 <_free_r+0x120>
   22e4e:	eb0c 0403 	add.w	r4, ip, r3
   22e52:	f8d4 e004 	ldr.w	lr, [r4, #4]
   22e56:	68ec      	ldr	r4, [r5, #12]
   22e58:	60d4      	str	r4, [r2, #12]
   22e5a:	f01e 0f01 	tst.w	lr, #1
   22e5e:	60a2      	str	r2, [r4, #8]
   22e60:	f000 8097 	beq.w	22f92 <_free_r+0x18e>
   22e64:	f041 0301 	orr.w	r3, r1, #1
   22e68:	606b      	str	r3, [r5, #4]
   22e6a:	f8cc 1000 	str.w	r1, [ip]
   22e6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   22e72:	d235      	bcs.n	22ee0 <_free_r+0xdc>
   22e74:	6878      	ldr	r0, [r7, #4]
   22e76:	08cb      	lsrs	r3, r1, #3
   22e78:	2201      	movs	r2, #1
   22e7a:	0949      	lsrs	r1, r1, #5
   22e7c:	3301      	adds	r3, #1
   22e7e:	408a      	lsls	r2, r1
   22e80:	4302      	orrs	r2, r0
   22e82:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   22e86:	607a      	str	r2, [r7, #4]
   22e88:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   22e8c:	3a08      	subs	r2, #8
   22e8e:	e9c5 1202 	strd	r1, r2, [r5, #8]
   22e92:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   22e96:	60cd      	str	r5, [r1, #12]
   22e98:	4630      	mov	r0, r6
   22e9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22e9e:	f7fe bc25 	b.w	216ec <__malloc_unlock>
   22ea2:	eb0c 0203 	add.w	r2, ip, r3
   22ea6:	6852      	ldr	r2, [r2, #4]
   22ea8:	07d0      	lsls	r0, r2, #31
   22eaa:	d410      	bmi.n	22ece <_free_r+0xca>
   22eac:	4419      	add	r1, r3
   22eae:	f107 0008 	add.w	r0, r7, #8
   22eb2:	f8dc 3008 	ldr.w	r3, [ip, #8]
   22eb6:	4283      	cmp	r3, r0
   22eb8:	d073      	beq.n	22fa2 <_free_r+0x19e>
   22eba:	f8dc 200c 	ldr.w	r2, [ip, #12]
   22ebe:	60da      	str	r2, [r3, #12]
   22ec0:	6093      	str	r3, [r2, #8]
   22ec2:	f041 0301 	orr.w	r3, r1, #1
   22ec6:	606b      	str	r3, [r5, #4]
   22ec8:	5069      	str	r1, [r5, r1]
   22eca:	e7d0      	b.n	22e6e <_free_r+0x6a>
   22ecc:	4770      	bx	lr
   22ece:	f041 0301 	orr.w	r3, r1, #1
   22ed2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   22ed6:	f844 3c04 	str.w	r3, [r4, #-4]
   22eda:	f8cc 1000 	str.w	r1, [ip]
   22ede:	d3c9      	bcc.n	22e74 <_free_r+0x70>
   22ee0:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   22ee4:	ea4f 2351 	mov.w	r3, r1, lsr #9
   22ee8:	d248      	bcs.n	22f7c <_free_r+0x178>
   22eea:	098b      	lsrs	r3, r1, #6
   22eec:	f103 0039 	add.w	r0, r3, #57	; 0x39
   22ef0:	f103 0238 	add.w	r2, r3, #56	; 0x38
   22ef4:	00c3      	lsls	r3, r0, #3
   22ef6:	18f8      	adds	r0, r7, r3
   22ef8:	58fb      	ldr	r3, [r7, r3]
   22efa:	3808      	subs	r0, #8
   22efc:	4298      	cmp	r0, r3
   22efe:	d059      	beq.n	22fb4 <_free_r+0x1b0>
   22f00:	685a      	ldr	r2, [r3, #4]
   22f02:	f022 0203 	bic.w	r2, r2, #3
   22f06:	428a      	cmp	r2, r1
   22f08:	d902      	bls.n	22f10 <_free_r+0x10c>
   22f0a:	689b      	ldr	r3, [r3, #8]
   22f0c:	4298      	cmp	r0, r3
   22f0e:	d1f7      	bne.n	22f00 <_free_r+0xfc>
   22f10:	68d8      	ldr	r0, [r3, #12]
   22f12:	e9c5 3002 	strd	r3, r0, [r5, #8]
   22f16:	6085      	str	r5, [r0, #8]
   22f18:	60dd      	str	r5, [r3, #12]
   22f1a:	4630      	mov	r0, r6
   22f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22f20:	f7fe bbe4 	b.w	216ec <__malloc_unlock>
   22f24:	eb0c 0203 	add.w	r2, ip, r3
   22f28:	6852      	ldr	r2, [r2, #4]
   22f2a:	07d2      	lsls	r2, r2, #31
   22f2c:	d463      	bmi.n	22ff6 <_free_r+0x1f2>
   22f2e:	440b      	add	r3, r1
   22f30:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
   22f34:	60ca      	str	r2, [r1, #12]
   22f36:	6091      	str	r1, [r2, #8]
   22f38:	f043 0201 	orr.w	r2, r3, #1
   22f3c:	606a      	str	r2, [r5, #4]
   22f3e:	4630      	mov	r0, r6
   22f40:	50eb      	str	r3, [r5, r3]
   22f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22f46:	f7fe bbd1 	b.w	216ec <__malloc_unlock>
   22f4a:	440b      	add	r3, r1
   22f4c:	07d1      	lsls	r1, r2, #31
   22f4e:	d407      	bmi.n	22f60 <_free_r+0x15c>
   22f50:	f854 2c08 	ldr.w	r2, [r4, #-8]
   22f54:	1aad      	subs	r5, r5, r2
   22f56:	4413      	add	r3, r2
   22f58:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   22f5c:	60ca      	str	r2, [r1, #12]
   22f5e:	6091      	str	r1, [r2, #8]
   22f60:	f043 0201 	orr.w	r2, r3, #1
   22f64:	606a      	str	r2, [r5, #4]
   22f66:	4a28      	ldr	r2, [pc, #160]	; (23008 <_free_r+0x204>)
   22f68:	60bd      	str	r5, [r7, #8]
   22f6a:	6812      	ldr	r2, [r2, #0]
   22f6c:	429a      	cmp	r2, r3
   22f6e:	d893      	bhi.n	22e98 <_free_r+0x94>
   22f70:	4b26      	ldr	r3, [pc, #152]	; (2300c <_free_r+0x208>)
   22f72:	4630      	mov	r0, r6
   22f74:	6819      	ldr	r1, [r3, #0]
   22f76:	f7ff fef5 	bl	22d64 <_malloc_trim_r>
   22f7a:	e78d      	b.n	22e98 <_free_r+0x94>
   22f7c:	2b14      	cmp	r3, #20
   22f7e:	d90a      	bls.n	22f96 <_free_r+0x192>
   22f80:	2b54      	cmp	r3, #84	; 0x54
   22f82:	d81f      	bhi.n	22fc4 <_free_r+0x1c0>
   22f84:	0b0b      	lsrs	r3, r1, #12
   22f86:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   22f8a:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   22f8e:	00c3      	lsls	r3, r0, #3
   22f90:	e7b1      	b.n	22ef6 <_free_r+0xf2>
   22f92:	4419      	add	r1, r3
   22f94:	e78d      	b.n	22eb2 <_free_r+0xae>
   22f96:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   22f9a:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   22f9e:	00c3      	lsls	r3, r0, #3
   22fa0:	e7a9      	b.n	22ef6 <_free_r+0xf2>
   22fa2:	f041 0301 	orr.w	r3, r1, #1
   22fa6:	e9c7 5504 	strd	r5, r5, [r7, #16]
   22faa:	e9c5 0002 	strd	r0, r0, [r5, #8]
   22fae:	606b      	str	r3, [r5, #4]
   22fb0:	5069      	str	r1, [r5, r1]
   22fb2:	e771      	b.n	22e98 <_free_r+0x94>
   22fb4:	6879      	ldr	r1, [r7, #4]
   22fb6:	1092      	asrs	r2, r2, #2
   22fb8:	2401      	movs	r4, #1
   22fba:	fa04 f202 	lsl.w	r2, r4, r2
   22fbe:	430a      	orrs	r2, r1
   22fc0:	607a      	str	r2, [r7, #4]
   22fc2:	e7a6      	b.n	22f12 <_free_r+0x10e>
   22fc4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   22fc8:	d806      	bhi.n	22fd8 <_free_r+0x1d4>
   22fca:	0bcb      	lsrs	r3, r1, #15
   22fcc:	f103 0078 	add.w	r0, r3, #120	; 0x78
   22fd0:	f103 0277 	add.w	r2, r3, #119	; 0x77
   22fd4:	00c3      	lsls	r3, r0, #3
   22fd6:	e78e      	b.n	22ef6 <_free_r+0xf2>
   22fd8:	f240 5254 	movw	r2, #1364	; 0x554
   22fdc:	4293      	cmp	r3, r2
   22fde:	d806      	bhi.n	22fee <_free_r+0x1ea>
   22fe0:	0c8b      	lsrs	r3, r1, #18
   22fe2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   22fe6:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   22fea:	00c3      	lsls	r3, r0, #3
   22fec:	e783      	b.n	22ef6 <_free_r+0xf2>
   22fee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   22ff2:	227e      	movs	r2, #126	; 0x7e
   22ff4:	e77f      	b.n	22ef6 <_free_r+0xf2>
   22ff6:	f041 0301 	orr.w	r3, r1, #1
   22ffa:	606b      	str	r3, [r5, #4]
   22ffc:	f8cc 1000 	str.w	r1, [ip]
   23000:	e74a      	b.n	22e98 <_free_r+0x94>
   23002:	bf00      	nop
   23004:	200034a8 	.word	0x200034a8
   23008:	200038b4 	.word	0x200038b4
   2300c:	200054dc 	.word	0x200054dc

00023010 <__ascii_mbtowc>:
   23010:	b082      	sub	sp, #8
   23012:	b149      	cbz	r1, 23028 <__ascii_mbtowc+0x18>
   23014:	b15a      	cbz	r2, 2302e <__ascii_mbtowc+0x1e>
   23016:	b16b      	cbz	r3, 23034 <__ascii_mbtowc+0x24>
   23018:	7813      	ldrb	r3, [r2, #0]
   2301a:	600b      	str	r3, [r1, #0]
   2301c:	7812      	ldrb	r2, [r2, #0]
   2301e:	1e10      	subs	r0, r2, #0
   23020:	bf18      	it	ne
   23022:	2001      	movne	r0, #1
   23024:	b002      	add	sp, #8
   23026:	4770      	bx	lr
   23028:	a901      	add	r1, sp, #4
   2302a:	2a00      	cmp	r2, #0
   2302c:	d1f3      	bne.n	23016 <__ascii_mbtowc+0x6>
   2302e:	4610      	mov	r0, r2
   23030:	b002      	add	sp, #8
   23032:	4770      	bx	lr
   23034:	f06f 0001 	mvn.w	r0, #1
   23038:	e7f4      	b.n	23024 <__ascii_mbtowc+0x14>
   2303a:	bf00      	nop
   2303c:	0000      	movs	r0, r0
	...

00023040 <_svfprintf_r>:
   23040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23044:	ed2d 8b08 	vpush	{d8-d11}
   23048:	b0d1      	sub	sp, #324	; 0x144
   2304a:	460c      	mov	r4, r1
   2304c:	ee0b 1a10 	vmov	s22, r1
   23050:	4690      	mov	r8, r2
   23052:	9308      	str	r3, [sp, #32]
   23054:	4683      	mov	fp, r0
   23056:	f002 fbcb 	bl	257f0 <_localeconv_r>
   2305a:	6803      	ldr	r3, [r0, #0]
   2305c:	9312      	str	r3, [sp, #72]	; 0x48
   2305e:	4618      	mov	r0, r3
   23060:	f7ff fdce 	bl	22c00 <strlen>
   23064:	af20      	add	r7, sp, #128	; 0x80
   23066:	9010      	str	r0, [sp, #64]	; 0x40
   23068:	2208      	movs	r2, #8
   2306a:	2100      	movs	r1, #0
   2306c:	4638      	mov	r0, r7
   2306e:	f7ff fa37 	bl	224e0 <memset>
   23072:	89a3      	ldrh	r3, [r4, #12]
   23074:	061b      	lsls	r3, r3, #24
   23076:	d503      	bpl.n	23080 <_svfprintf_r+0x40>
   23078:	6923      	ldr	r3, [r4, #16]
   2307a:	2b00      	cmp	r3, #0
   2307c:	f000 8755 	beq.w	23f2a <_svfprintf_r+0xeea>
   23080:	2300      	movs	r3, #0
   23082:	ed9f 8b83 	vldr	d8, [pc, #524]	; 23290 <_svfprintf_r+0x250>
   23086:	ed9f 9b84 	vldr	d9, [pc, #528]	; 23298 <_svfprintf_r+0x258>
   2308a:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
   2308e:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
   23092:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
   23096:	aa27      	add	r2, sp, #156	; 0x9c
   23098:	930e      	str	r3, [sp, #56]	; 0x38
   2309a:	9224      	str	r2, [sp, #144]	; 0x90
   2309c:	4692      	mov	sl, r2
   2309e:	9311      	str	r3, [sp, #68]	; 0x44
   230a0:	9304      	str	r3, [sp, #16]
   230a2:	4644      	mov	r4, r8
   230a4:	46a1      	mov	r9, r4
   230a6:	4b7e      	ldr	r3, [pc, #504]	; (232a0 <_svfprintf_r+0x260>)
   230a8:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   230ac:	f7ff fb14 	bl	226d8 <__locale_mb_cur_max>
   230b0:	464a      	mov	r2, r9
   230b2:	4603      	mov	r3, r0
   230b4:	a91c      	add	r1, sp, #112	; 0x70
   230b6:	9700      	str	r7, [sp, #0]
   230b8:	4658      	mov	r0, fp
   230ba:	47a8      	blx	r5
   230bc:	2800      	cmp	r0, #0
   230be:	f000 80b0 	beq.w	23222 <_svfprintf_r+0x1e2>
   230c2:	f2c0 80a6 	blt.w	23212 <_svfprintf_r+0x1d2>
   230c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   230c8:	2a25      	cmp	r2, #37	; 0x25
   230ca:	4603      	mov	r3, r0
   230cc:	d001      	beq.n	230d2 <_svfprintf_r+0x92>
   230ce:	4499      	add	r9, r3
   230d0:	e7e9      	b.n	230a6 <_svfprintf_r+0x66>
   230d2:	ebb9 0504 	subs.w	r5, r9, r4
   230d6:	4606      	mov	r6, r0
   230d8:	f040 80a7 	bne.w	2322a <_svfprintf_r+0x1ea>
   230dc:	2300      	movs	r3, #0
   230de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   230e2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   230e6:	4698      	mov	r8, r3
   230e8:	9306      	str	r3, [sp, #24]
   230ea:	f109 0901 	add.w	r9, r9, #1
   230ee:	f899 3000 	ldrb.w	r3, [r9]
   230f2:	9203      	str	r2, [sp, #12]
   230f4:	252b      	movs	r5, #43	; 0x2b
   230f6:	2620      	movs	r6, #32
   230f8:	f109 0901 	add.w	r9, r9, #1
   230fc:	f1a3 0220 	sub.w	r2, r3, #32
   23100:	2a5a      	cmp	r2, #90	; 0x5a
   23102:	f200 80cf 	bhi.w	232a4 <_svfprintf_r+0x264>
   23106:	e8df f012 	tbh	[pc, r2, lsl #1]
   2310a:	02e8      	.short	0x02e8
   2310c:	00cd00cd 	.word	0x00cd00cd
   23110:	00cd02e3 	.word	0x00cd02e3
   23114:	00cd00cd 	.word	0x00cd00cd
   23118:	00cd006a 	.word	0x00cd006a
   2311c:	020500cd 	.word	0x020500cd
   23120:	00cd0284 	.word	0x00cd0284
   23124:	02c90210 	.word	0x02c90210
   23128:	02bd00cd 	.word	0x02bd00cd
   2312c:	005b005b 	.word	0x005b005b
   23130:	005b005b 	.word	0x005b005b
   23134:	005b005b 	.word	0x005b005b
   23138:	005b005b 	.word	0x005b005b
   2313c:	00cd005b 	.word	0x00cd005b
   23140:	00cd00cd 	.word	0x00cd00cd
   23144:	00cd00cd 	.word	0x00cd00cd
   23148:	00cd00cd 	.word	0x00cd00cd
   2314c:	00cd0153 	.word	0x00cd0153
   23150:	021a0183 	.word	0x021a0183
   23154:	01530153 	.word	0x01530153
   23158:	00cd0153 	.word	0x00cd0153
   2315c:	00cd00cd 	.word	0x00cd00cd
   23160:	021500cd 	.word	0x021500cd
   23164:	00cd00cd 	.word	0x00cd00cd
   23168:	00cd0296 	.word	0x00cd0296
   2316c:	00cd00cd 	.word	0x00cd00cd
   23170:	00cd01ab 	.word	0x00cd01ab
   23174:	00cd02aa 	.word	0x00cd02aa
   23178:	06e300cd 	.word	0x06e300cd
   2317c:	00cd00cd 	.word	0x00cd00cd
   23180:	00cd00cd 	.word	0x00cd00cd
   23184:	00cd00cd 	.word	0x00cd00cd
   23188:	00cd00cd 	.word	0x00cd00cd
   2318c:	00cd0153 	.word	0x00cd0153
   23190:	01de0183 	.word	0x01de0183
   23194:	01530153 	.word	0x01530153
   23198:	02770153 	.word	0x02770153
   2319c:	007f01de 	.word	0x007f01de
   231a0:	028900cd 	.word	0x028900cd
   231a4:	025f00cd 	.word	0x025f00cd
   231a8:	022f06e0 	.word	0x022f06e0
   231ac:	00cd007f 	.word	0x00cd007f
   231b0:	007c01ab 	.word	0x007c01ab
   231b4:	00cd06b8 	.word	0x00cd06b8
   231b8:	06bd00cd 	.word	0x06bd00cd
   231bc:	007c00cd 	.word	0x007c00cd
   231c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   231c4:	2100      	movs	r1, #0
   231c6:	f819 3b01 	ldrb.w	r3, [r9], #1
   231ca:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   231ce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   231d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   231d6:	2a09      	cmp	r2, #9
   231d8:	d9f5      	bls.n	231c6 <_svfprintf_r+0x186>
   231da:	9106      	str	r1, [sp, #24]
   231dc:	e78e      	b.n	230fc <_svfprintf_r+0xbc>
   231de:	4658      	mov	r0, fp
   231e0:	f002 fb06 	bl	257f0 <_localeconv_r>
   231e4:	6843      	ldr	r3, [r0, #4]
   231e6:	9315      	str	r3, [sp, #84]	; 0x54
   231e8:	4618      	mov	r0, r3
   231ea:	f7ff fd09 	bl	22c00 <strlen>
   231ee:	9016      	str	r0, [sp, #88]	; 0x58
   231f0:	4658      	mov	r0, fp
   231f2:	f002 fafd 	bl	257f0 <_localeconv_r>
   231f6:	6883      	ldr	r3, [r0, #8]
   231f8:	9313      	str	r3, [sp, #76]	; 0x4c
   231fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
   231fc:	2b00      	cmp	r3, #0
   231fe:	f040 862d 	bne.w	23e5c <_svfprintf_r+0xe1c>
   23202:	f899 3000 	ldrb.w	r3, [r9]
   23206:	e777      	b.n	230f8 <_svfprintf_r+0xb8>
   23208:	f899 3000 	ldrb.w	r3, [r9]
   2320c:	f048 0820 	orr.w	r8, r8, #32
   23210:	e772      	b.n	230f8 <_svfprintf_r+0xb8>
   23212:	2208      	movs	r2, #8
   23214:	2100      	movs	r1, #0
   23216:	4638      	mov	r0, r7
   23218:	f7ff f962 	bl	224e0 <memset>
   2321c:	2301      	movs	r3, #1
   2321e:	4499      	add	r9, r3
   23220:	e741      	b.n	230a6 <_svfprintf_r+0x66>
   23222:	ebb9 0504 	subs.w	r5, r9, r4
   23226:	4606      	mov	r6, r0
   23228:	d011      	beq.n	2324e <_svfprintf_r+0x20e>
   2322a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2322c:	442b      	add	r3, r5
   2322e:	9326      	str	r3, [sp, #152]	; 0x98
   23230:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23232:	3301      	adds	r3, #1
   23234:	2b07      	cmp	r3, #7
   23236:	e9ca 4500 	strd	r4, r5, [sl]
   2323a:	9325      	str	r3, [sp, #148]	; 0x94
   2323c:	dc1c      	bgt.n	23278 <_svfprintf_r+0x238>
   2323e:	f10a 0a08 	add.w	sl, sl, #8
   23242:	9b04      	ldr	r3, [sp, #16]
   23244:	442b      	add	r3, r5
   23246:	9304      	str	r3, [sp, #16]
   23248:	2e00      	cmp	r6, #0
   2324a:	f47f af47 	bne.w	230dc <_svfprintf_r+0x9c>
   2324e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   23250:	2b00      	cmp	r3, #0
   23252:	f041 820b 	bne.w	2466c <_svfprintf_r+0x162c>
   23256:	ee1b 3a10 	vmov	r3, s22
   2325a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   2325e:	f013 0f40 	tst.w	r3, #64	; 0x40
   23262:	9b04      	ldr	r3, [sp, #16]
   23264:	bf18      	it	ne
   23266:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2326a:	9304      	str	r3, [sp, #16]
   2326c:	9804      	ldr	r0, [sp, #16]
   2326e:	b051      	add	sp, #324	; 0x144
   23270:	ecbd 8b08 	vpop	{d8-d11}
   23274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23278:	ee1b 1a10 	vmov	r1, s22
   2327c:	aa24      	add	r2, sp, #144	; 0x90
   2327e:	4658      	mov	r0, fp
   23280:	f003 fb20 	bl	268c4 <__ssprint_r>
   23284:	2800      	cmp	r0, #0
   23286:	d1e6      	bne.n	23256 <_svfprintf_r+0x216>
   23288:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   2328c:	e7d9      	b.n	23242 <_svfprintf_r+0x202>
   2328e:	bf00      	nop
	...
   23298:	ffffffff 	.word	0xffffffff
   2329c:	7fefffff 	.word	0x7fefffff
   232a0:	2000333c 	.word	0x2000333c
   232a4:	930b      	str	r3, [sp, #44]	; 0x2c
   232a6:	2b00      	cmp	r3, #0
   232a8:	d0d1      	beq.n	2324e <_svfprintf_r+0x20e>
   232aa:	2100      	movs	r1, #0
   232ac:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   232b0:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
   232b4:	2301      	movs	r3, #1
   232b6:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   232ba:	9302      	str	r3, [sp, #8]
   232bc:	9107      	str	r1, [sp, #28]
   232be:	9305      	str	r3, [sp, #20]
   232c0:	9103      	str	r1, [sp, #12]
   232c2:	910f      	str	r1, [sp, #60]	; 0x3c
   232c4:	ac37      	add	r4, sp, #220	; 0xdc
   232c6:	f018 0302 	ands.w	r3, r8, #2
   232ca:	9309      	str	r3, [sp, #36]	; 0x24
   232cc:	d002      	beq.n	232d4 <_svfprintf_r+0x294>
   232ce:	9b02      	ldr	r3, [sp, #8]
   232d0:	3302      	adds	r3, #2
   232d2:	9302      	str	r3, [sp, #8]
   232d4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
   232d8:	930a      	str	r3, [sp, #40]	; 0x28
   232da:	d105      	bne.n	232e8 <_svfprintf_r+0x2a8>
   232dc:	9b06      	ldr	r3, [sp, #24]
   232de:	9a02      	ldr	r2, [sp, #8]
   232e0:	1a9d      	subs	r5, r3, r2
   232e2:	2d00      	cmp	r5, #0
   232e4:	f300 8369 	bgt.w	239ba <_svfprintf_r+0x97a>
   232e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   232ea:	b189      	cbz	r1, 23310 <_svfprintf_r+0x2d0>
   232ec:	9925      	ldr	r1, [sp, #148]	; 0x94
   232ee:	f10d 0067 	add.w	r0, sp, #103	; 0x67
   232f2:	3101      	adds	r1, #1
   232f4:	3201      	adds	r2, #1
   232f6:	f8ca 0000 	str.w	r0, [sl]
   232fa:	2907      	cmp	r1, #7
   232fc:	f04f 0001 	mov.w	r0, #1
   23300:	9226      	str	r2, [sp, #152]	; 0x98
   23302:	9125      	str	r1, [sp, #148]	; 0x94
   23304:	f8ca 0004 	str.w	r0, [sl, #4]
   23308:	f300 83a2 	bgt.w	23a50 <_svfprintf_r+0xa10>
   2330c:	f10a 0a08 	add.w	sl, sl, #8
   23310:	9b09      	ldr	r3, [sp, #36]	; 0x24
   23312:	b183      	cbz	r3, 23336 <_svfprintf_r+0x2f6>
   23314:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23316:	a91a      	add	r1, sp, #104	; 0x68
   23318:	3301      	adds	r3, #1
   2331a:	3202      	adds	r2, #2
   2331c:	f8ca 1000 	str.w	r1, [sl]
   23320:	2b07      	cmp	r3, #7
   23322:	f04f 0102 	mov.w	r1, #2
   23326:	9226      	str	r2, [sp, #152]	; 0x98
   23328:	9325      	str	r3, [sp, #148]	; 0x94
   2332a:	f8ca 1004 	str.w	r1, [sl, #4]
   2332e:	f300 83a3 	bgt.w	23a78 <_svfprintf_r+0xa38>
   23332:	f10a 0a08 	add.w	sl, sl, #8
   23336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   23338:	2b80      	cmp	r3, #128	; 0x80
   2333a:	f000 826c 	beq.w	23816 <_svfprintf_r+0x7d6>
   2333e:	9b03      	ldr	r3, [sp, #12]
   23340:	9905      	ldr	r1, [sp, #20]
   23342:	1a5d      	subs	r5, r3, r1
   23344:	2d00      	cmp	r5, #0
   23346:	f300 82a5 	bgt.w	23894 <_svfprintf_r+0x854>
   2334a:	f418 7f80 	tst.w	r8, #256	; 0x100
   2334e:	f040 820d 	bne.w	2376c <_svfprintf_r+0x72c>
   23352:	9b05      	ldr	r3, [sp, #20]
   23354:	f8ca 3004 	str.w	r3, [sl, #4]
   23358:	441a      	add	r2, r3
   2335a:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2335c:	f8ca 4000 	str.w	r4, [sl]
   23360:	3301      	adds	r3, #1
   23362:	2b07      	cmp	r3, #7
   23364:	9226      	str	r2, [sp, #152]	; 0x98
   23366:	9325      	str	r3, [sp, #148]	; 0x94
   23368:	f300 831b 	bgt.w	239a2 <_svfprintf_r+0x962>
   2336c:	f10a 0a08 	add.w	sl, sl, #8
   23370:	f018 0f04 	tst.w	r8, #4
   23374:	d005      	beq.n	23382 <_svfprintf_r+0x342>
   23376:	9b06      	ldr	r3, [sp, #24]
   23378:	9902      	ldr	r1, [sp, #8]
   2337a:	1a5c      	subs	r4, r3, r1
   2337c:	2c00      	cmp	r4, #0
   2337e:	f300 8388 	bgt.w	23a92 <_svfprintf_r+0xa52>
   23382:	9b04      	ldr	r3, [sp, #16]
   23384:	9906      	ldr	r1, [sp, #24]
   23386:	9802      	ldr	r0, [sp, #8]
   23388:	4281      	cmp	r1, r0
   2338a:	bfac      	ite	ge
   2338c:	185b      	addge	r3, r3, r1
   2338e:	181b      	addlt	r3, r3, r0
   23390:	9304      	str	r3, [sp, #16]
   23392:	2a00      	cmp	r2, #0
   23394:	f040 82b0 	bne.w	238f8 <_svfprintf_r+0x8b8>
   23398:	2300      	movs	r3, #0
   2339a:	9325      	str	r3, [sp, #148]	; 0x94
   2339c:	9b07      	ldr	r3, [sp, #28]
   2339e:	b11b      	cbz	r3, 233a8 <_svfprintf_r+0x368>
   233a0:	9907      	ldr	r1, [sp, #28]
   233a2:	4658      	mov	r0, fp
   233a4:	f7ff fd2e 	bl	22e04 <_free_r>
   233a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   233ac:	464c      	mov	r4, r9
   233ae:	e679      	b.n	230a4 <_svfprintf_r+0x64>
   233b0:	930b      	str	r3, [sp, #44]	; 0x2c
   233b2:	9b08      	ldr	r3, [sp, #32]
   233b4:	3307      	adds	r3, #7
   233b6:	f023 0307 	bic.w	r3, r3, #7
   233ba:	ecb3 8b02 	vldmia	r3!, {d8}
   233be:	eeb0 7bc8 	vabs.f64	d7, d8
   233c2:	eeb4 7b49 	vcmp.f64	d7, d9
   233c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   233ca:	9308      	str	r3, [sp, #32]
   233cc:	f340 84e9 	ble.w	23da2 <_svfprintf_r+0xd62>
   233d0:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
   233d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   233d8:	f101 8059 	bmi.w	2448e <_svfprintf_r+0x144e>
   233dc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   233e0:	4cab      	ldr	r4, [pc, #684]	; (23690 <_svfprintf_r+0x650>)
   233e2:	4bac      	ldr	r3, [pc, #688]	; (23694 <_svfprintf_r+0x654>)
   233e4:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   233e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   233ea:	2a47      	cmp	r2, #71	; 0x47
   233ec:	bfc8      	it	gt
   233ee:	461c      	movgt	r4, r3
   233f0:	2300      	movs	r3, #0
   233f2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   233f6:	2203      	movs	r2, #3
   233f8:	9307      	str	r3, [sp, #28]
   233fa:	9202      	str	r2, [sp, #8]
   233fc:	9205      	str	r2, [sp, #20]
   233fe:	9303      	str	r3, [sp, #12]
   23400:	930f      	str	r3, [sp, #60]	; 0x3c
   23402:	2900      	cmp	r1, #0
   23404:	f43f af5f 	beq.w	232c6 <_svfprintf_r+0x286>
   23408:	9b02      	ldr	r3, [sp, #8]
   2340a:	3301      	adds	r3, #1
   2340c:	9302      	str	r3, [sp, #8]
   2340e:	e75a      	b.n	232c6 <_svfprintf_r+0x286>
   23410:	2b43      	cmp	r3, #67	; 0x43
   23412:	930b      	str	r3, [sp, #44]	; 0x2c
   23414:	d003      	beq.n	2341e <_svfprintf_r+0x3de>
   23416:	f018 0f10 	tst.w	r8, #16
   2341a:	f000 855d 	beq.w	23ed8 <_svfprintf_r+0xe98>
   2341e:	9d08      	ldr	r5, [sp, #32]
   23420:	2208      	movs	r2, #8
   23422:	2100      	movs	r1, #0
   23424:	a822      	add	r0, sp, #136	; 0x88
   23426:	ac37      	add	r4, sp, #220	; 0xdc
   23428:	f7ff f85a 	bl	224e0 <memset>
   2342c:	ab22      	add	r3, sp, #136	; 0x88
   2342e:	f855 2b04 	ldr.w	r2, [r5], #4
   23432:	4621      	mov	r1, r4
   23434:	4658      	mov	r0, fp
   23436:	f002 fa97 	bl	25968 <_wcrtomb_r>
   2343a:	4603      	mov	r3, r0
   2343c:	3301      	adds	r3, #1
   2343e:	9005      	str	r0, [sp, #20]
   23440:	f001 82ee 	beq.w	24a20 <_svfprintf_r+0x19e0>
   23444:	9b05      	ldr	r3, [sp, #20]
   23446:	9508      	str	r5, [sp, #32]
   23448:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2344c:	9302      	str	r3, [sp, #8]
   2344e:	2100      	movs	r1, #0
   23450:	e9cd 110c 	strd	r1, r1, [sp, #48]	; 0x30
   23454:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   23458:	9107      	str	r1, [sp, #28]
   2345a:	9103      	str	r1, [sp, #12]
   2345c:	910f      	str	r1, [sp, #60]	; 0x3c
   2345e:	e732      	b.n	232c6 <_svfprintf_r+0x286>
   23460:	930b      	str	r3, [sp, #44]	; 0x2c
   23462:	9b08      	ldr	r3, [sp, #32]
   23464:	461a      	mov	r2, r3
   23466:	2300      	movs	r3, #0
   23468:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
   2346c:	4613      	mov	r3, r2
   2346e:	f853 4b04 	ldr.w	r4, [r3], #4
   23472:	9308      	str	r3, [sp, #32]
   23474:	2c00      	cmp	r4, #0
   23476:	f000 8548 	beq.w	23f0a <_svfprintf_r+0xeca>
   2347a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2347c:	2b53      	cmp	r3, #83	; 0x53
   2347e:	f000 86ec 	beq.w	2425a <_svfprintf_r+0x121a>
   23482:	f018 0310 	ands.w	r3, r8, #16
   23486:	930c      	str	r3, [sp, #48]	; 0x30
   23488:	f040 86e7 	bne.w	2425a <_svfprintf_r+0x121a>
   2348c:	9b03      	ldr	r3, [sp, #12]
   2348e:	1c5d      	adds	r5, r3, #1
   23490:	f001 80e5 	beq.w	2465e <_svfprintf_r+0x161e>
   23494:	990c      	ldr	r1, [sp, #48]	; 0x30
   23496:	461a      	mov	r2, r3
   23498:	4620      	mov	r0, r4
   2349a:	f7ff fb59 	bl	22b50 <memchr>
   2349e:	9007      	str	r0, [sp, #28]
   234a0:	2800      	cmp	r0, #0
   234a2:	f001 8328 	beq.w	24af6 <_svfprintf_r+0x1ab6>
   234a6:	9b07      	ldr	r3, [sp, #28]
   234a8:	1b1a      	subs	r2, r3, r4
   234aa:	9205      	str	r2, [sp, #20]
   234ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   234ae:	9303      	str	r3, [sp, #12]
   234b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   234b4:	930f      	str	r3, [sp, #60]	; 0x3c
   234b6:	930d      	str	r3, [sp, #52]	; 0x34
   234b8:	9307      	str	r3, [sp, #28]
   234ba:	2373      	movs	r3, #115	; 0x73
   234bc:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   234c0:	9202      	str	r2, [sp, #8]
   234c2:	930b      	str	r3, [sp, #44]	; 0x2c
   234c4:	e79d      	b.n	23402 <_svfprintf_r+0x3c2>
   234c6:	f018 0f20 	tst.w	r8, #32
   234ca:	930b      	str	r3, [sp, #44]	; 0x2c
   234cc:	9b08      	ldr	r3, [sp, #32]
   234ce:	d03d      	beq.n	2354c <_svfprintf_r+0x50c>
   234d0:	3307      	adds	r3, #7
   234d2:	f023 0307 	bic.w	r3, r3, #7
   234d6:	461a      	mov	r2, r3
   234d8:	4611      	mov	r1, r2
   234da:	685b      	ldr	r3, [r3, #4]
   234dc:	f851 2b08 	ldr.w	r2, [r1], #8
   234e0:	9108      	str	r1, [sp, #32]
   234e2:	4619      	mov	r1, r3
   234e4:	2b00      	cmp	r3, #0
   234e6:	f2c0 840c 	blt.w	23d02 <_svfprintf_r+0xcc2>
   234ea:	9b03      	ldr	r3, [sp, #12]
   234ec:	3301      	adds	r3, #1
   234ee:	f000 829e 	beq.w	23a2e <_svfprintf_r+0x9ee>
   234f2:	f028 0080 	bic.w	r0, r8, #128	; 0x80
   234f6:	ea52 0301 	orrs.w	r3, r2, r1
   234fa:	9002      	str	r0, [sp, #8]
   234fc:	f040 8299 	bne.w	23a32 <_svfprintf_r+0x9f2>
   23500:	9b03      	ldr	r3, [sp, #12]
   23502:	2b00      	cmp	r3, #0
   23504:	f040 829a 	bne.w	23a3c <_svfprintf_r+0x9fc>
   23508:	4680      	mov	r8, r0
   2350a:	2300      	movs	r3, #0
   2350c:	9303      	str	r3, [sp, #12]
   2350e:	9305      	str	r3, [sp, #20]
   23510:	ac50      	add	r4, sp, #320	; 0x140
   23512:	e106      	b.n	23722 <_svfprintf_r+0x6e2>
   23514:	9b08      	ldr	r3, [sp, #32]
   23516:	f853 2b04 	ldr.w	r2, [r3], #4
   2351a:	9206      	str	r2, [sp, #24]
   2351c:	2a00      	cmp	r2, #0
   2351e:	f280 8419 	bge.w	23d54 <_svfprintf_r+0xd14>
   23522:	9a06      	ldr	r2, [sp, #24]
   23524:	9308      	str	r3, [sp, #32]
   23526:	4252      	negs	r2, r2
   23528:	9206      	str	r2, [sp, #24]
   2352a:	f899 3000 	ldrb.w	r3, [r9]
   2352e:	f048 0804 	orr.w	r8, r8, #4
   23532:	e5e1      	b.n	230f8 <_svfprintf_r+0xb8>
   23534:	f899 3000 	ldrb.w	r3, [r9]
   23538:	f048 0808 	orr.w	r8, r8, #8
   2353c:	e5dc      	b.n	230f8 <_svfprintf_r+0xb8>
   2353e:	f048 0810 	orr.w	r8, r8, #16
   23542:	f018 0f20 	tst.w	r8, #32
   23546:	930b      	str	r3, [sp, #44]	; 0x2c
   23548:	9b08      	ldr	r3, [sp, #32]
   2354a:	d1c1      	bne.n	234d0 <_svfprintf_r+0x490>
   2354c:	f018 0f10 	tst.w	r8, #16
   23550:	f040 840b 	bne.w	23d6a <_svfprintf_r+0xd2a>
   23554:	f018 0f40 	tst.w	r8, #64	; 0x40
   23558:	f000 8403 	beq.w	23d62 <_svfprintf_r+0xd22>
   2355c:	f933 2b04 	ldrsh.w	r2, [r3], #4
   23560:	9308      	str	r3, [sp, #32]
   23562:	17d1      	asrs	r1, r2, #31
   23564:	460b      	mov	r3, r1
   23566:	e7bd      	b.n	234e4 <_svfprintf_r+0x4a4>
   23568:	9b08      	ldr	r3, [sp, #32]
   2356a:	f048 0202 	orr.w	r2, r8, #2
   2356e:	9202      	str	r2, [sp, #8]
   23570:	f853 2b04 	ldr.w	r2, [r3], #4
   23574:	9308      	str	r3, [sp, #32]
   23576:	f647 0330 	movw	r3, #30768	; 0x7830
   2357a:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
   2357e:	2078      	movs	r0, #120	; 0x78
   23580:	4b45      	ldr	r3, [pc, #276]	; (23698 <_svfprintf_r+0x658>)
   23582:	9311      	str	r3, [sp, #68]	; 0x44
   23584:	2100      	movs	r1, #0
   23586:	2302      	movs	r3, #2
   23588:	900b      	str	r0, [sp, #44]	; 0x2c
   2358a:	2000      	movs	r0, #0
   2358c:	9c03      	ldr	r4, [sp, #12]
   2358e:	f88d 0067 	strb.w	r0, [sp, #103]	; 0x67
   23592:	1c60      	adds	r0, r4, #1
   23594:	f000 80ad 	beq.w	236f2 <_svfprintf_r+0x6b2>
   23598:	9802      	ldr	r0, [sp, #8]
   2359a:	f020 0880 	bic.w	r8, r0, #128	; 0x80
   2359e:	ea52 0001 	orrs.w	r0, r2, r1
   235a2:	f040 80a4 	bne.w	236ee <_svfprintf_r+0x6ae>
   235a6:	2c00      	cmp	r4, #0
   235a8:	f040 86ae 	bne.w	24308 <_svfprintf_r+0x12c8>
   235ac:	2b00      	cmp	r3, #0
   235ae:	d1ac      	bne.n	2350a <_svfprintf_r+0x4ca>
   235b0:	9b02      	ldr	r3, [sp, #8]
   235b2:	f013 0301 	ands.w	r3, r3, #1
   235b6:	9305      	str	r3, [sp, #20]
   235b8:	f000 83d1 	beq.w	23d5e <_svfprintf_r+0xd1e>
   235bc:	2330      	movs	r3, #48	; 0x30
   235be:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
   235c2:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   235c6:	e0ac      	b.n	23722 <_svfprintf_r+0x6e2>
   235c8:	f018 0f20 	tst.w	r8, #32
   235cc:	f040 83d4 	bne.w	23d78 <_svfprintf_r+0xd38>
   235d0:	f018 0f10 	tst.w	r8, #16
   235d4:	f040 869f 	bne.w	24316 <_svfprintf_r+0x12d6>
   235d8:	f018 0f40 	tst.w	r8, #64	; 0x40
   235dc:	f040 8797 	bne.w	2450e <_svfprintf_r+0x14ce>
   235e0:	f418 7f00 	tst.w	r8, #512	; 0x200
   235e4:	f000 8697 	beq.w	24316 <_svfprintf_r+0x12d6>
   235e8:	9b08      	ldr	r3, [sp, #32]
   235ea:	9904      	ldr	r1, [sp, #16]
   235ec:	f853 2b04 	ldr.w	r2, [r3], #4
   235f0:	9308      	str	r3, [sp, #32]
   235f2:	7011      	strb	r1, [r2, #0]
   235f4:	464c      	mov	r4, r9
   235f6:	e555      	b.n	230a4 <_svfprintf_r+0x64>
   235f8:	f899 3000 	ldrb.w	r3, [r9]
   235fc:	2b68      	cmp	r3, #104	; 0x68
   235fe:	bf03      	ittte	eq
   23600:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   23604:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
   23608:	f109 0901 	addeq.w	r9, r9, #1
   2360c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
   23610:	e572      	b.n	230f8 <_svfprintf_r+0xb8>
   23612:	f899 3000 	ldrb.w	r3, [r9]
   23616:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
   2361a:	e56d      	b.n	230f8 <_svfprintf_r+0xb8>
   2361c:	f899 3000 	ldrb.w	r3, [r9]
   23620:	2b6c      	cmp	r3, #108	; 0x6c
   23622:	bf03      	ittte	eq
   23624:	f899 3001 	ldrbeq.w	r3, [r9, #1]
   23628:	f048 0820 	orreq.w	r8, r8, #32
   2362c:	f109 0901 	addeq.w	r9, r9, #1
   23630:	f048 0810 	orrne.w	r8, r8, #16
   23634:	e560      	b.n	230f8 <_svfprintf_r+0xb8>
   23636:	930b      	str	r3, [sp, #44]	; 0x2c
   23638:	f048 0810 	orr.w	r8, r8, #16
   2363c:	f018 0120 	ands.w	r1, r8, #32
   23640:	f000 8351 	beq.w	23ce6 <_svfprintf_r+0xca6>
   23644:	9b08      	ldr	r3, [sp, #32]
   23646:	3307      	adds	r3, #7
   23648:	f023 0307 	bic.w	r3, r3, #7
   2364c:	6859      	ldr	r1, [r3, #4]
   2364e:	f853 2b08 	ldr.w	r2, [r3], #8
   23652:	9308      	str	r3, [sp, #32]
   23654:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   23658:	9302      	str	r3, [sp, #8]
   2365a:	2300      	movs	r3, #0
   2365c:	e795      	b.n	2358a <_svfprintf_r+0x54a>
   2365e:	930b      	str	r3, [sp, #44]	; 0x2c
   23660:	f048 0310 	orr.w	r3, r8, #16
   23664:	9302      	str	r3, [sp, #8]
   23666:	9b02      	ldr	r3, [sp, #8]
   23668:	f013 0120 	ands.w	r1, r3, #32
   2366c:	f000 8329 	beq.w	23cc2 <_svfprintf_r+0xc82>
   23670:	9b08      	ldr	r3, [sp, #32]
   23672:	3307      	adds	r3, #7
   23674:	f023 0307 	bic.w	r3, r3, #7
   23678:	6859      	ldr	r1, [r3, #4]
   2367a:	f853 2b08 	ldr.w	r2, [r3], #8
   2367e:	9308      	str	r3, [sp, #32]
   23680:	2301      	movs	r3, #1
   23682:	e782      	b.n	2358a <_svfprintf_r+0x54a>
   23684:	f899 3000 	ldrb.w	r3, [r9]
   23688:	f048 0880 	orr.w	r8, r8, #128	; 0x80
   2368c:	e534      	b.n	230f8 <_svfprintf_r+0xb8>
   2368e:	bf00      	nop
   23690:	200019a4 	.word	0x200019a4
   23694:	200019a8 	.word	0x200019a8
   23698:	200019b4 	.word	0x200019b4
   2369c:	4649      	mov	r1, r9
   2369e:	f811 3b01 	ldrb.w	r3, [r1], #1
   236a2:	2b2a      	cmp	r3, #42	; 0x2a
   236a4:	f001 8249 	beq.w	24b3a <_svfprintf_r+0x1afa>
   236a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   236ac:	2a09      	cmp	r2, #9
   236ae:	4689      	mov	r9, r1
   236b0:	bf98      	it	ls
   236b2:	2100      	movls	r1, #0
   236b4:	f201 8144 	bhi.w	24940 <_svfprintf_r+0x1900>
   236b8:	f819 3b01 	ldrb.w	r3, [r9], #1
   236bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   236c0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   236c4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   236c8:	2a09      	cmp	r2, #9
   236ca:	d9f5      	bls.n	236b8 <_svfprintf_r+0x678>
   236cc:	9103      	str	r1, [sp, #12]
   236ce:	e515      	b.n	230fc <_svfprintf_r+0xbc>
   236d0:	f899 3000 	ldrb.w	r3, [r9]
   236d4:	f048 0801 	orr.w	r8, r8, #1
   236d8:	e50e      	b.n	230f8 <_svfprintf_r+0xb8>
   236da:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
   236de:	2b00      	cmp	r3, #0
   236e0:	f47f ad8f 	bne.w	23202 <_svfprintf_r+0x1c2>
   236e4:	f899 3000 	ldrb.w	r3, [r9]
   236e8:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
   236ec:	e504      	b.n	230f8 <_svfprintf_r+0xb8>
   236ee:	f8cd 8008 	str.w	r8, [sp, #8]
   236f2:	2b01      	cmp	r3, #1
   236f4:	f000 819d 	beq.w	23a32 <_svfprintf_r+0x9f2>
   236f8:	2b02      	cmp	r3, #2
   236fa:	ac50      	add	r4, sp, #320	; 0x140
   236fc:	d120      	bne.n	23740 <_svfprintf_r+0x700>
   236fe:	9811      	ldr	r0, [sp, #68]	; 0x44
   23700:	f002 030f 	and.w	r3, r2, #15
   23704:	0912      	lsrs	r2, r2, #4
   23706:	5cc3      	ldrb	r3, [r0, r3]
   23708:	f804 3d01 	strb.w	r3, [r4, #-1]!
   2370c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
   23710:	0909      	lsrs	r1, r1, #4
   23712:	ea52 0301 	orrs.w	r3, r2, r1
   23716:	d1f3      	bne.n	23700 <_svfprintf_r+0x6c0>
   23718:	ab50      	add	r3, sp, #320	; 0x140
   2371a:	1b1b      	subs	r3, r3, r4
   2371c:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23720:	9305      	str	r3, [sp, #20]
   23722:	9a05      	ldr	r2, [sp, #20]
   23724:	9803      	ldr	r0, [sp, #12]
   23726:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   2372a:	4282      	cmp	r2, r0
   2372c:	f04f 0300 	mov.w	r3, #0
   23730:	bfb8      	it	lt
   23732:	4602      	movlt	r2, r0
   23734:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   23738:	9307      	str	r3, [sp, #28]
   2373a:	9202      	str	r2, [sp, #8]
   2373c:	930f      	str	r3, [sp, #60]	; 0x3c
   2373e:	e660      	b.n	23402 <_svfprintf_r+0x3c2>
   23740:	f002 0307 	and.w	r3, r2, #7
   23744:	08d2      	lsrs	r2, r2, #3
   23746:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
   2374a:	08c9      	lsrs	r1, r1, #3
   2374c:	3330      	adds	r3, #48	; 0x30
   2374e:	ea52 0501 	orrs.w	r5, r2, r1
   23752:	4620      	mov	r0, r4
   23754:	f804 3d01 	strb.w	r3, [r4, #-1]!
   23758:	d1f2      	bne.n	23740 <_svfprintf_r+0x700>
   2375a:	9a02      	ldr	r2, [sp, #8]
   2375c:	07d1      	lsls	r1, r2, #31
   2375e:	f100 824d 	bmi.w	23bfc <_svfprintf_r+0xbbc>
   23762:	ab50      	add	r3, sp, #320	; 0x140
   23764:	1b1b      	subs	r3, r3, r4
   23766:	4690      	mov	r8, r2
   23768:	9305      	str	r3, [sp, #20]
   2376a:	e7da      	b.n	23722 <_svfprintf_r+0x6e2>
   2376c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2376e:	2b65      	cmp	r3, #101	; 0x65
   23770:	f340 80d4 	ble.w	2391c <_svfprintf_r+0x8dc>
   23774:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2377c:	f040 81c1 	bne.w	23b02 <_svfprintf_r+0xac2>
   23780:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23782:	49ba      	ldr	r1, [pc, #744]	; (23a6c <_svfprintf_r+0xa2c>)
   23784:	f8ca 1000 	str.w	r1, [sl]
   23788:	3301      	adds	r3, #1
   2378a:	3201      	adds	r2, #1
   2378c:	2101      	movs	r1, #1
   2378e:	2b07      	cmp	r3, #7
   23790:	9226      	str	r2, [sp, #152]	; 0x98
   23792:	9325      	str	r3, [sp, #148]	; 0x94
   23794:	f8ca 1004 	str.w	r1, [sl, #4]
   23798:	f300 8551 	bgt.w	2423e <_svfprintf_r+0x11fe>
   2379c:	f10a 0a08 	add.w	sl, sl, #8
   237a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   237a2:	990e      	ldr	r1, [sp, #56]	; 0x38
   237a4:	428b      	cmp	r3, r1
   237a6:	f280 82d0 	bge.w	23d4a <_svfprintf_r+0xd0a>
   237aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
   237ac:	9912      	ldr	r1, [sp, #72]	; 0x48
   237ae:	441a      	add	r2, r3
   237b0:	e9ca 1300 	strd	r1, r3, [sl]
   237b4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   237b6:	9226      	str	r2, [sp, #152]	; 0x98
   237b8:	3301      	adds	r3, #1
   237ba:	2b07      	cmp	r3, #7
   237bc:	9325      	str	r3, [sp, #148]	; 0x94
   237be:	f300 8397 	bgt.w	23ef0 <_svfprintf_r+0xeb0>
   237c2:	f10a 0a08 	add.w	sl, sl, #8
   237c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   237c8:	1e5c      	subs	r4, r3, #1
   237ca:	2c00      	cmp	r4, #0
   237cc:	f77f add0 	ble.w	23370 <_svfprintf_r+0x330>
   237d0:	2c10      	cmp	r4, #16
   237d2:	9b25      	ldr	r3, [sp, #148]	; 0x94
   237d4:	f340 856e 	ble.w	242b4 <_svfprintf_r+0x1274>
   237d8:	ee1b 6a10 	vmov	r6, s22
   237dc:	2510      	movs	r5, #16
   237de:	e005      	b.n	237ec <_svfprintf_r+0x7ac>
   237e0:	f10a 0a08 	add.w	sl, sl, #8
   237e4:	3c10      	subs	r4, #16
   237e6:	2c10      	cmp	r4, #16
   237e8:	f340 8564 	ble.w	242b4 <_svfprintf_r+0x1274>
   237ec:	3301      	adds	r3, #1
   237ee:	49a0      	ldr	r1, [pc, #640]	; (23a70 <_svfprintf_r+0xa30>)
   237f0:	3210      	adds	r2, #16
   237f2:	2b07      	cmp	r3, #7
   237f4:	e9ca 1500 	strd	r1, r5, [sl]
   237f8:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   237fc:	ddf0      	ble.n	237e0 <_svfprintf_r+0x7a0>
   237fe:	aa24      	add	r2, sp, #144	; 0x90
   23800:	4631      	mov	r1, r6
   23802:	4658      	mov	r0, fp
   23804:	f003 f85e 	bl	268c4 <__ssprint_r>
   23808:	2800      	cmp	r0, #0
   2380a:	d17e      	bne.n	2390a <_svfprintf_r+0x8ca>
   2380c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23810:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23814:	e7e6      	b.n	237e4 <_svfprintf_r+0x7a4>
   23816:	9b06      	ldr	r3, [sp, #24]
   23818:	9902      	ldr	r1, [sp, #8]
   2381a:	1a5d      	subs	r5, r3, r1
   2381c:	2d00      	cmp	r5, #0
   2381e:	f77f ad8e 	ble.w	2333e <_svfprintf_r+0x2fe>
   23822:	2d10      	cmp	r5, #16
   23824:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23826:	dd21      	ble.n	2386c <_svfprintf_r+0x82c>
   23828:	9409      	str	r4, [sp, #36]	; 0x24
   2382a:	2610      	movs	r6, #16
   2382c:	ee1b 4a10 	vmov	r4, s22
   23830:	e004      	b.n	2383c <_svfprintf_r+0x7fc>
   23832:	3d10      	subs	r5, #16
   23834:	2d10      	cmp	r5, #16
   23836:	f10a 0a08 	add.w	sl, sl, #8
   2383a:	dd16      	ble.n	2386a <_svfprintf_r+0x82a>
   2383c:	3301      	adds	r3, #1
   2383e:	498c      	ldr	r1, [pc, #560]	; (23a70 <_svfprintf_r+0xa30>)
   23840:	3210      	adds	r2, #16
   23842:	2b07      	cmp	r3, #7
   23844:	e9ca 1600 	strd	r1, r6, [sl]
   23848:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2384c:	ddf1      	ble.n	23832 <_svfprintf_r+0x7f2>
   2384e:	aa24      	add	r2, sp, #144	; 0x90
   23850:	4621      	mov	r1, r4
   23852:	4658      	mov	r0, fp
   23854:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23858:	f003 f834 	bl	268c4 <__ssprint_r>
   2385c:	2800      	cmp	r0, #0
   2385e:	d154      	bne.n	2390a <_svfprintf_r+0x8ca>
   23860:	3d10      	subs	r5, #16
   23862:	2d10      	cmp	r5, #16
   23864:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23868:	dce8      	bgt.n	2383c <_svfprintf_r+0x7fc>
   2386a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   2386c:	4980      	ldr	r1, [pc, #512]	; (23a70 <_svfprintf_r+0xa30>)
   2386e:	f8ca 5004 	str.w	r5, [sl, #4]
   23872:	3301      	adds	r3, #1
   23874:	442a      	add	r2, r5
   23876:	2b07      	cmp	r3, #7
   23878:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2387c:	f8ca 1000 	str.w	r1, [sl]
   23880:	f300 8526 	bgt.w	242d0 <_svfprintf_r+0x1290>
   23884:	9b03      	ldr	r3, [sp, #12]
   23886:	9905      	ldr	r1, [sp, #20]
   23888:	1a5d      	subs	r5, r3, r1
   2388a:	2d00      	cmp	r5, #0
   2388c:	f10a 0a08 	add.w	sl, sl, #8
   23890:	f77f ad5b 	ble.w	2334a <_svfprintf_r+0x30a>
   23894:	2d10      	cmp	r5, #16
   23896:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23898:	dd1f      	ble.n	238da <_svfprintf_r+0x89a>
   2389a:	4651      	mov	r1, sl
   2389c:	2610      	movs	r6, #16
   2389e:	ee1b aa10 	vmov	sl, s22
   238a2:	e004      	b.n	238ae <_svfprintf_r+0x86e>
   238a4:	3d10      	subs	r5, #16
   238a6:	2d10      	cmp	r5, #16
   238a8:	f101 0108 	add.w	r1, r1, #8
   238ac:	dd14      	ble.n	238d8 <_svfprintf_r+0x898>
   238ae:	3301      	adds	r3, #1
   238b0:	486f      	ldr	r0, [pc, #444]	; (23a70 <_svfprintf_r+0xa30>)
   238b2:	3210      	adds	r2, #16
   238b4:	2b07      	cmp	r3, #7
   238b6:	e9c1 0600 	strd	r0, r6, [r1]
   238ba:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   238be:	ddf1      	ble.n	238a4 <_svfprintf_r+0x864>
   238c0:	aa24      	add	r2, sp, #144	; 0x90
   238c2:	4651      	mov	r1, sl
   238c4:	4658      	mov	r0, fp
   238c6:	f002 fffd 	bl	268c4 <__ssprint_r>
   238ca:	b9f0      	cbnz	r0, 2390a <_svfprintf_r+0x8ca>
   238cc:	3d10      	subs	r5, #16
   238ce:	2d10      	cmp	r5, #16
   238d0:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   238d4:	a927      	add	r1, sp, #156	; 0x9c
   238d6:	dcea      	bgt.n	238ae <_svfprintf_r+0x86e>
   238d8:	468a      	mov	sl, r1
   238da:	3301      	adds	r3, #1
   238dc:	4964      	ldr	r1, [pc, #400]	; (23a70 <_svfprintf_r+0xa30>)
   238de:	f8ca 5004 	str.w	r5, [sl, #4]
   238e2:	442a      	add	r2, r5
   238e4:	2b07      	cmp	r3, #7
   238e6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   238ea:	f8ca 1000 	str.w	r1, [sl]
   238ee:	f300 81da 	bgt.w	23ca6 <_svfprintf_r+0xc66>
   238f2:	f10a 0a08 	add.w	sl, sl, #8
   238f6:	e528      	b.n	2334a <_svfprintf_r+0x30a>
   238f8:	ee1b 1a10 	vmov	r1, s22
   238fc:	aa24      	add	r2, sp, #144	; 0x90
   238fe:	4658      	mov	r0, fp
   23900:	f002 ffe0 	bl	268c4 <__ssprint_r>
   23904:	2800      	cmp	r0, #0
   23906:	f43f ad47 	beq.w	23398 <_svfprintf_r+0x358>
   2390a:	9b07      	ldr	r3, [sp, #28]
   2390c:	2b00      	cmp	r3, #0
   2390e:	f43f aca2 	beq.w	23256 <_svfprintf_r+0x216>
   23912:	9907      	ldr	r1, [sp, #28]
   23914:	4658      	mov	r0, fp
   23916:	f7ff fa75 	bl	22e04 <_free_r>
   2391a:	e49c      	b.n	23256 <_svfprintf_r+0x216>
   2391c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2391e:	2b01      	cmp	r3, #1
   23920:	f340 817a 	ble.w	23c18 <_svfprintf_r+0xbd8>
   23924:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23926:	f8ca 4000 	str.w	r4, [sl]
   2392a:	3301      	adds	r3, #1
   2392c:	3201      	adds	r2, #1
   2392e:	2101      	movs	r1, #1
   23930:	2b07      	cmp	r3, #7
   23932:	9226      	str	r2, [sp, #152]	; 0x98
   23934:	9325      	str	r3, [sp, #148]	; 0x94
   23936:	f8ca 1004 	str.w	r1, [sl, #4]
   2393a:	f300 81f8 	bgt.w	23d2e <_svfprintf_r+0xcee>
   2393e:	f10a 0a08 	add.w	sl, sl, #8
   23942:	9910      	ldr	r1, [sp, #64]	; 0x40
   23944:	9812      	ldr	r0, [sp, #72]	; 0x48
   23946:	3301      	adds	r3, #1
   23948:	440a      	add	r2, r1
   2394a:	2b07      	cmp	r3, #7
   2394c:	e9ca 0100 	strd	r0, r1, [sl]
   23950:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23954:	f300 81dd 	bgt.w	23d12 <_svfprintf_r+0xcd2>
   23958:	f10a 0a08 	add.w	sl, sl, #8
   2395c:	eeb5 8b40 	vcmp.f64	d8, #0.0
   23960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23964:	f000 8177 	beq.w	23c56 <_svfprintf_r+0xc16>
   23968:	990e      	ldr	r1, [sp, #56]	; 0x38
   2396a:	3301      	adds	r3, #1
   2396c:	3901      	subs	r1, #1
   2396e:	3401      	adds	r4, #1
   23970:	440a      	add	r2, r1
   23972:	2b07      	cmp	r3, #7
   23974:	f8ca 4000 	str.w	r4, [sl]
   23978:	9325      	str	r3, [sp, #148]	; 0x94
   2397a:	f8ca 1004 	str.w	r1, [sl, #4]
   2397e:	9226      	str	r2, [sp, #152]	; 0x98
   23980:	f300 815b 	bgt.w	23c3a <_svfprintf_r+0xbfa>
   23984:	f10a 0a08 	add.w	sl, sl, #8
   23988:	9914      	ldr	r1, [sp, #80]	; 0x50
   2398a:	f8ca 1004 	str.w	r1, [sl, #4]
   2398e:	3301      	adds	r3, #1
   23990:	440a      	add	r2, r1
   23992:	2b07      	cmp	r3, #7
   23994:	a91e      	add	r1, sp, #120	; 0x78
   23996:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2399a:	f8ca 1000 	str.w	r1, [sl]
   2399e:	f77f ace5 	ble.w	2336c <_svfprintf_r+0x32c>
   239a2:	ee1b 1a10 	vmov	r1, s22
   239a6:	aa24      	add	r2, sp, #144	; 0x90
   239a8:	4658      	mov	r0, fp
   239aa:	f002 ff8b 	bl	268c4 <__ssprint_r>
   239ae:	2800      	cmp	r0, #0
   239b0:	d1ab      	bne.n	2390a <_svfprintf_r+0x8ca>
   239b2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   239b4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   239b8:	e4da      	b.n	23370 <_svfprintf_r+0x330>
   239ba:	2d10      	cmp	r5, #16
   239bc:	e9dd 1225 	ldrd	r1, r2, [sp, #148]	; 0x94
   239c0:	4e2c      	ldr	r6, [pc, #176]	; (23a74 <_svfprintf_r+0xa34>)
   239c2:	dd24      	ble.n	23a0e <_svfprintf_r+0x9ce>
   239c4:	9417      	str	r4, [sp, #92]	; 0x5c
   239c6:	2310      	movs	r3, #16
   239c8:	ee1b 4a10 	vmov	r4, s22
   239cc:	4608      	mov	r0, r1
   239ce:	e004      	b.n	239da <_svfprintf_r+0x99a>
   239d0:	3d10      	subs	r5, #16
   239d2:	2d10      	cmp	r5, #16
   239d4:	f10a 0a08 	add.w	sl, sl, #8
   239d8:	dd17      	ble.n	23a0a <_svfprintf_r+0x9ca>
   239da:	3001      	adds	r0, #1
   239dc:	3210      	adds	r2, #16
   239de:	2807      	cmp	r0, #7
   239e0:	e9ca 6300 	strd	r6, r3, [sl]
   239e4:	e9cd 0225 	strd	r0, r2, [sp, #148]	; 0x94
   239e8:	ddf2      	ble.n	239d0 <_svfprintf_r+0x990>
   239ea:	aa24      	add	r2, sp, #144	; 0x90
   239ec:	4621      	mov	r1, r4
   239ee:	4658      	mov	r0, fp
   239f0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   239f4:	f002 ff66 	bl	268c4 <__ssprint_r>
   239f8:	2800      	cmp	r0, #0
   239fa:	d186      	bne.n	2390a <_svfprintf_r+0x8ca>
   239fc:	3d10      	subs	r5, #16
   239fe:	2d10      	cmp	r5, #16
   23a00:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
   23a04:	f04f 0310 	mov.w	r3, #16
   23a08:	dce7      	bgt.n	239da <_svfprintf_r+0x99a>
   23a0a:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   23a0c:	4601      	mov	r1, r0
   23a0e:	3101      	adds	r1, #1
   23a10:	442a      	add	r2, r5
   23a12:	2907      	cmp	r1, #7
   23a14:	e9cd 1225 	strd	r1, r2, [sp, #148]	; 0x94
   23a18:	f8ca 6000 	str.w	r6, [sl]
   23a1c:	f8ca 5004 	str.w	r5, [sl, #4]
   23a20:	f300 83bd 	bgt.w	2419e <_svfprintf_r+0x115e>
   23a24:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   23a28:	f10a 0a08 	add.w	sl, sl, #8
   23a2c:	e45d      	b.n	232ea <_svfprintf_r+0x2aa>
   23a2e:	f8cd 8008 	str.w	r8, [sp, #8]
   23a32:	2a0a      	cmp	r2, #10
   23a34:	f171 0300 	sbcs.w	r3, r1, #0
   23a38:	f080 8345 	bcs.w	240c6 <_svfprintf_r+0x1086>
   23a3c:	3230      	adds	r2, #48	; 0x30
   23a3e:	2301      	movs	r3, #1
   23a40:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23a44:	f88d 213f 	strb.w	r2, [sp, #319]	; 0x13f
   23a48:	9305      	str	r3, [sp, #20]
   23a4a:	f20d 143f 	addw	r4, sp, #319	; 0x13f
   23a4e:	e668      	b.n	23722 <_svfprintf_r+0x6e2>
   23a50:	ee1b 1a10 	vmov	r1, s22
   23a54:	aa24      	add	r2, sp, #144	; 0x90
   23a56:	4658      	mov	r0, fp
   23a58:	f002 ff34 	bl	268c4 <__ssprint_r>
   23a5c:	2800      	cmp	r0, #0
   23a5e:	f47f af54 	bne.w	2390a <_svfprintf_r+0x8ca>
   23a62:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23a64:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23a68:	e452      	b.n	23310 <_svfprintf_r+0x2d0>
   23a6a:	bf00      	nop
   23a6c:	20002834 	.word	0x20002834
   23a70:	20003144 	.word	0x20003144
   23a74:	200019e4 	.word	0x200019e4
   23a78:	ee1b 1a10 	vmov	r1, s22
   23a7c:	aa24      	add	r2, sp, #144	; 0x90
   23a7e:	4658      	mov	r0, fp
   23a80:	f002 ff20 	bl	268c4 <__ssprint_r>
   23a84:	2800      	cmp	r0, #0
   23a86:	f47f af40 	bne.w	2390a <_svfprintf_r+0x8ca>
   23a8a:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23a8c:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23a90:	e451      	b.n	23336 <_svfprintf_r+0x2f6>
   23a92:	2c10      	cmp	r4, #16
   23a94:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23a96:	4ebe      	ldr	r6, [pc, #760]	; (23d90 <_svfprintf_r+0xd50>)
   23a98:	dd1f      	ble.n	23ada <_svfprintf_r+0xa9a>
   23a9a:	ee1b 8a10 	vmov	r8, s22
   23a9e:	2510      	movs	r5, #16
   23aa0:	e004      	b.n	23aac <_svfprintf_r+0xa6c>
   23aa2:	3c10      	subs	r4, #16
   23aa4:	2c10      	cmp	r4, #16
   23aa6:	f10a 0a08 	add.w	sl, sl, #8
   23aaa:	dd16      	ble.n	23ada <_svfprintf_r+0xa9a>
   23aac:	3301      	adds	r3, #1
   23aae:	3210      	adds	r2, #16
   23ab0:	2b07      	cmp	r3, #7
   23ab2:	e9ca 6500 	strd	r6, r5, [sl]
   23ab6:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23aba:	ddf2      	ble.n	23aa2 <_svfprintf_r+0xa62>
   23abc:	aa24      	add	r2, sp, #144	; 0x90
   23abe:	4641      	mov	r1, r8
   23ac0:	4658      	mov	r0, fp
   23ac2:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23ac6:	f002 fefd 	bl	268c4 <__ssprint_r>
   23aca:	2800      	cmp	r0, #0
   23acc:	f47f af1d 	bne.w	2390a <_svfprintf_r+0x8ca>
   23ad0:	3c10      	subs	r4, #16
   23ad2:	2c10      	cmp	r4, #16
   23ad4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23ad8:	dce8      	bgt.n	23aac <_svfprintf_r+0xa6c>
   23ada:	3301      	adds	r3, #1
   23adc:	4422      	add	r2, r4
   23ade:	2b07      	cmp	r3, #7
   23ae0:	e9ca 6400 	strd	r6, r4, [sl]
   23ae4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23ae8:	f77f ac4b 	ble.w	23382 <_svfprintf_r+0x342>
   23aec:	ee1b 1a10 	vmov	r1, s22
   23af0:	aa24      	add	r2, sp, #144	; 0x90
   23af2:	4658      	mov	r0, fp
   23af4:	f002 fee6 	bl	268c4 <__ssprint_r>
   23af8:	2800      	cmp	r0, #0
   23afa:	f47f af06 	bne.w	2390a <_svfprintf_r+0x8ca>
   23afe:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23b00:	e43f      	b.n	23382 <_svfprintf_r+0x342>
   23b02:	991b      	ldr	r1, [sp, #108]	; 0x6c
   23b04:	2900      	cmp	r1, #0
   23b06:	f340 835a 	ble.w	241be <_svfprintf_r+0x117e>
   23b0a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   23b0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23b0e:	429e      	cmp	r6, r3
   23b10:	bfa8      	it	ge
   23b12:	461e      	movge	r6, r3
   23b14:	2e00      	cmp	r6, #0
   23b16:	dd0b      	ble.n	23b30 <_svfprintf_r+0xaf0>
   23b18:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23b1a:	3301      	adds	r3, #1
   23b1c:	4432      	add	r2, r6
   23b1e:	2b07      	cmp	r3, #7
   23b20:	e9ca 4600 	strd	r4, r6, [sl]
   23b24:	9226      	str	r2, [sp, #152]	; 0x98
   23b26:	9325      	str	r3, [sp, #148]	; 0x94
   23b28:	f300 8689 	bgt.w	2483e <_svfprintf_r+0x17fe>
   23b2c:	f10a 0a08 	add.w	sl, sl, #8
   23b30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23b32:	2e00      	cmp	r6, #0
   23b34:	bfa8      	it	ge
   23b36:	1bad      	subge	r5, r5, r6
   23b38:	2d00      	cmp	r5, #0
   23b3a:	f300 8203 	bgt.w	23f44 <_svfprintf_r+0xf04>
   23b3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   23b40:	f418 6f80 	tst.w	r8, #1024	; 0x400
   23b44:	4423      	add	r3, r4
   23b46:	9305      	str	r3, [sp, #20]
   23b48:	f040 821f 	bne.w	23f8a <_svfprintf_r+0xf4a>
   23b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   23b4e:	990e      	ldr	r1, [sp, #56]	; 0x38
   23b50:	428b      	cmp	r3, r1
   23b52:	db03      	blt.n	23b5c <_svfprintf_r+0xb1c>
   23b54:	f018 0f01 	tst.w	r8, #1
   23b58:	f000 84cf 	beq.w	244fa <_svfprintf_r+0x14ba>
   23b5c:	9910      	ldr	r1, [sp, #64]	; 0x40
   23b5e:	9812      	ldr	r0, [sp, #72]	; 0x48
   23b60:	440a      	add	r2, r1
   23b62:	e9ca 0100 	strd	r0, r1, [sl]
   23b66:	9925      	ldr	r1, [sp, #148]	; 0x94
   23b68:	9226      	str	r2, [sp, #152]	; 0x98
   23b6a:	3101      	adds	r1, #1
   23b6c:	2907      	cmp	r1, #7
   23b6e:	9125      	str	r1, [sp, #148]	; 0x94
   23b70:	f300 86a5 	bgt.w	248be <_svfprintf_r+0x187e>
   23b74:	f10a 0a08 	add.w	sl, sl, #8
   23b78:	990e      	ldr	r1, [sp, #56]	; 0x38
   23b7a:	1865      	adds	r5, r4, r1
   23b7c:	1acc      	subs	r4, r1, r3
   23b7e:	9b05      	ldr	r3, [sp, #20]
   23b80:	1aed      	subs	r5, r5, r3
   23b82:	42a5      	cmp	r5, r4
   23b84:	bfa8      	it	ge
   23b86:	4625      	movge	r5, r4
   23b88:	2d00      	cmp	r5, #0
   23b8a:	dd0d      	ble.n	23ba8 <_svfprintf_r+0xb68>
   23b8c:	f8ca 3000 	str.w	r3, [sl]
   23b90:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23b92:	f8ca 5004 	str.w	r5, [sl, #4]
   23b96:	3301      	adds	r3, #1
   23b98:	442a      	add	r2, r5
   23b9a:	2b07      	cmp	r3, #7
   23b9c:	9226      	str	r2, [sp, #152]	; 0x98
   23b9e:	9325      	str	r3, [sp, #148]	; 0x94
   23ba0:	f300 86bb 	bgt.w	2491a <_svfprintf_r+0x18da>
   23ba4:	f10a 0a08 	add.w	sl, sl, #8
   23ba8:	2d00      	cmp	r5, #0
   23baa:	bfa8      	it	ge
   23bac:	1b64      	subge	r4, r4, r5
   23bae:	2c00      	cmp	r4, #0
   23bb0:	f77f abde 	ble.w	23370 <_svfprintf_r+0x330>
   23bb4:	2c10      	cmp	r4, #16
   23bb6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23bb8:	f340 837c 	ble.w	242b4 <_svfprintf_r+0x1274>
   23bbc:	ee1b 6a10 	vmov	r6, s22
   23bc0:	2510      	movs	r5, #16
   23bc2:	e005      	b.n	23bd0 <_svfprintf_r+0xb90>
   23bc4:	f10a 0a08 	add.w	sl, sl, #8
   23bc8:	3c10      	subs	r4, #16
   23bca:	2c10      	cmp	r4, #16
   23bcc:	f340 8372 	ble.w	242b4 <_svfprintf_r+0x1274>
   23bd0:	3301      	adds	r3, #1
   23bd2:	4970      	ldr	r1, [pc, #448]	; (23d94 <_svfprintf_r+0xd54>)
   23bd4:	3210      	adds	r2, #16
   23bd6:	2b07      	cmp	r3, #7
   23bd8:	e9ca 1500 	strd	r1, r5, [sl]
   23bdc:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23be0:	ddf0      	ble.n	23bc4 <_svfprintf_r+0xb84>
   23be2:	aa24      	add	r2, sp, #144	; 0x90
   23be4:	4631      	mov	r1, r6
   23be6:	4658      	mov	r0, fp
   23be8:	f002 fe6c 	bl	268c4 <__ssprint_r>
   23bec:	2800      	cmp	r0, #0
   23bee:	f47f ae8c 	bne.w	2390a <_svfprintf_r+0x8ca>
   23bf2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23bf6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23bfa:	e7e5      	b.n	23bc8 <_svfprintf_r+0xb88>
   23bfc:	2b30      	cmp	r3, #48	; 0x30
   23bfe:	f43f ad8b 	beq.w	23718 <_svfprintf_r+0x6d8>
   23c02:	2330      	movs	r3, #48	; 0x30
   23c04:	3802      	subs	r0, #2
   23c06:	f804 3c01 	strb.w	r3, [r4, #-1]
   23c0a:	ab50      	add	r3, sp, #320	; 0x140
   23c0c:	1a1b      	subs	r3, r3, r0
   23c0e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   23c12:	9305      	str	r3, [sp, #20]
   23c14:	4604      	mov	r4, r0
   23c16:	e584      	b.n	23722 <_svfprintf_r+0x6e2>
   23c18:	f018 0f01 	tst.w	r8, #1
   23c1c:	f47f ae82 	bne.w	23924 <_svfprintf_r+0x8e4>
   23c20:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23c22:	f8ca 4000 	str.w	r4, [sl]
   23c26:	3301      	adds	r3, #1
   23c28:	3201      	adds	r2, #1
   23c2a:	2101      	movs	r1, #1
   23c2c:	2b07      	cmp	r3, #7
   23c2e:	9226      	str	r2, [sp, #152]	; 0x98
   23c30:	9325      	str	r3, [sp, #148]	; 0x94
   23c32:	f8ca 1004 	str.w	r1, [sl, #4]
   23c36:	f77f aea5 	ble.w	23984 <_svfprintf_r+0x944>
   23c3a:	ee1b 1a10 	vmov	r1, s22
   23c3e:	aa24      	add	r2, sp, #144	; 0x90
   23c40:	4658      	mov	r0, fp
   23c42:	f002 fe3f 	bl	268c4 <__ssprint_r>
   23c46:	2800      	cmp	r0, #0
   23c48:	f47f ae5f 	bne.w	2390a <_svfprintf_r+0x8ca>
   23c4c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23c50:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23c54:	e698      	b.n	23988 <_svfprintf_r+0x948>
   23c56:	990e      	ldr	r1, [sp, #56]	; 0x38
   23c58:	1e4c      	subs	r4, r1, #1
   23c5a:	2c00      	cmp	r4, #0
   23c5c:	f77f ae94 	ble.w	23988 <_svfprintf_r+0x948>
   23c60:	2c10      	cmp	r4, #16
   23c62:	f340 8361 	ble.w	24328 <_svfprintf_r+0x12e8>
   23c66:	ee1b 6a10 	vmov	r6, s22
   23c6a:	2510      	movs	r5, #16
   23c6c:	e005      	b.n	23c7a <_svfprintf_r+0xc3a>
   23c6e:	f10a 0a08 	add.w	sl, sl, #8
   23c72:	3c10      	subs	r4, #16
   23c74:	2c10      	cmp	r4, #16
   23c76:	f340 8357 	ble.w	24328 <_svfprintf_r+0x12e8>
   23c7a:	3301      	adds	r3, #1
   23c7c:	4945      	ldr	r1, [pc, #276]	; (23d94 <_svfprintf_r+0xd54>)
   23c7e:	3210      	adds	r2, #16
   23c80:	2b07      	cmp	r3, #7
   23c82:	e9ca 1500 	strd	r1, r5, [sl]
   23c86:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23c8a:	ddf0      	ble.n	23c6e <_svfprintf_r+0xc2e>
   23c8c:	aa24      	add	r2, sp, #144	; 0x90
   23c8e:	4631      	mov	r1, r6
   23c90:	4658      	mov	r0, fp
   23c92:	f002 fe17 	bl	268c4 <__ssprint_r>
   23c96:	2800      	cmp	r0, #0
   23c98:	f47f ae37 	bne.w	2390a <_svfprintf_r+0x8ca>
   23c9c:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23ca0:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23ca4:	e7e5      	b.n	23c72 <_svfprintf_r+0xc32>
   23ca6:	ee1b 1a10 	vmov	r1, s22
   23caa:	aa24      	add	r2, sp, #144	; 0x90
   23cac:	4658      	mov	r0, fp
   23cae:	f002 fe09 	bl	268c4 <__ssprint_r>
   23cb2:	2800      	cmp	r0, #0
   23cb4:	f47f ae29 	bne.w	2390a <_svfprintf_r+0x8ca>
   23cb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23cba:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23cbe:	f7ff bb44 	b.w	2334a <_svfprintf_r+0x30a>
   23cc2:	9b02      	ldr	r3, [sp, #8]
   23cc4:	f013 0310 	ands.w	r3, r3, #16
   23cc8:	f040 80c1 	bne.w	23e4e <_svfprintf_r+0xe0e>
   23ccc:	9a02      	ldr	r2, [sp, #8]
   23cce:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   23cd2:	f000 837a 	beq.w	243ca <_svfprintf_r+0x138a>
   23cd6:	9808      	ldr	r0, [sp, #32]
   23cd8:	f850 2b04 	ldr.w	r2, [r0], #4
   23cdc:	9008      	str	r0, [sp, #32]
   23cde:	4619      	mov	r1, r3
   23ce0:	b292      	uxth	r2, r2
   23ce2:	2301      	movs	r3, #1
   23ce4:	e451      	b.n	2358a <_svfprintf_r+0x54a>
   23ce6:	f018 0310 	ands.w	r3, r8, #16
   23cea:	d155      	bne.n	23d98 <_svfprintf_r+0xd58>
   23cec:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   23cf0:	f000 835d 	beq.w	243ae <_svfprintf_r+0x136e>
   23cf4:	9808      	ldr	r0, [sp, #32]
   23cf6:	f850 2b04 	ldr.w	r2, [r0], #4
   23cfa:	9008      	str	r0, [sp, #32]
   23cfc:	4619      	mov	r1, r3
   23cfe:	b292      	uxth	r2, r2
   23d00:	e4a8      	b.n	23654 <_svfprintf_r+0x614>
   23d02:	4252      	negs	r2, r2
   23d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   23d08:	f8cd 8008 	str.w	r8, [sp, #8]
   23d0c:	202d      	movs	r0, #45	; 0x2d
   23d0e:	2301      	movs	r3, #1
   23d10:	e43c      	b.n	2358c <_svfprintf_r+0x54c>
   23d12:	ee1b 1a10 	vmov	r1, s22
   23d16:	aa24      	add	r2, sp, #144	; 0x90
   23d18:	4658      	mov	r0, fp
   23d1a:	f002 fdd3 	bl	268c4 <__ssprint_r>
   23d1e:	2800      	cmp	r0, #0
   23d20:	f47f adf3 	bne.w	2390a <_svfprintf_r+0x8ca>
   23d24:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23d28:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23d2c:	e616      	b.n	2395c <_svfprintf_r+0x91c>
   23d2e:	ee1b 1a10 	vmov	r1, s22
   23d32:	aa24      	add	r2, sp, #144	; 0x90
   23d34:	4658      	mov	r0, fp
   23d36:	f002 fdc5 	bl	268c4 <__ssprint_r>
   23d3a:	2800      	cmp	r0, #0
   23d3c:	f47f ade5 	bne.w	2390a <_svfprintf_r+0x8ca>
   23d40:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23d44:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23d48:	e5fb      	b.n	23942 <_svfprintf_r+0x902>
   23d4a:	f018 0f01 	tst.w	r8, #1
   23d4e:	f43f ab0f 	beq.w	23370 <_svfprintf_r+0x330>
   23d52:	e52a      	b.n	237aa <_svfprintf_r+0x76a>
   23d54:	9308      	str	r3, [sp, #32]
   23d56:	f899 3000 	ldrb.w	r3, [r9]
   23d5a:	f7ff b9cd 	b.w	230f8 <_svfprintf_r+0xb8>
   23d5e:	ac50      	add	r4, sp, #320	; 0x140
   23d60:	e4df      	b.n	23722 <_svfprintf_r+0x6e2>
   23d62:	f418 7f00 	tst.w	r8, #512	; 0x200
   23d66:	f040 83db 	bne.w	24520 <_svfprintf_r+0x14e0>
   23d6a:	f853 2b04 	ldr.w	r2, [r3], #4
   23d6e:	9308      	str	r3, [sp, #32]
   23d70:	17d1      	asrs	r1, r2, #31
   23d72:	460b      	mov	r3, r1
   23d74:	f7ff bbb6 	b.w	234e4 <_svfprintf_r+0x4a4>
   23d78:	9b08      	ldr	r3, [sp, #32]
   23d7a:	9804      	ldr	r0, [sp, #16]
   23d7c:	f853 1b04 	ldr.w	r1, [r3], #4
   23d80:	9308      	str	r3, [sp, #32]
   23d82:	17c2      	asrs	r2, r0, #31
   23d84:	e9c1 0200 	strd	r0, r2, [r1]
   23d88:	464c      	mov	r4, r9
   23d8a:	f7ff b98b 	b.w	230a4 <_svfprintf_r+0x64>
   23d8e:	bf00      	nop
   23d90:	200019e4 	.word	0x200019e4
   23d94:	20003144 	.word	0x20003144
   23d98:	9b08      	ldr	r3, [sp, #32]
   23d9a:	f853 2b04 	ldr.w	r2, [r3], #4
   23d9e:	9308      	str	r3, [sp, #32]
   23da0:	e458      	b.n	23654 <_svfprintf_r+0x614>
   23da2:	eeb4 8b48 	vcmp.f64	d8, d8
   23da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   23daa:	f180 8694 	bvs.w	24ad6 <_svfprintf_r+0x1a96>
   23dae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23db0:	2b61      	cmp	r3, #97	; 0x61
   23db2:	f000 8552 	beq.w	2485a <_svfprintf_r+0x181a>
   23db6:	2b41      	cmp	r3, #65	; 0x41
   23db8:	f000 85c0 	beq.w	2493c <_svfprintf_r+0x18fc>
   23dbc:	9b03      	ldr	r3, [sp, #12]
   23dbe:	3301      	adds	r3, #1
   23dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23dc2:	f023 0520 	bic.w	r5, r3, #32
   23dc6:	f000 8480 	beq.w	246ca <_svfprintf_r+0x168a>
   23dca:	2d47      	cmp	r5, #71	; 0x47
   23dcc:	d104      	bne.n	23dd8 <_svfprintf_r+0xd98>
   23dce:	9b03      	ldr	r3, [sp, #12]
   23dd0:	2b00      	cmp	r3, #0
   23dd2:	bf08      	it	eq
   23dd4:	2301      	moveq	r3, #1
   23dd6:	9303      	str	r3, [sp, #12]
   23dd8:	ee18 3a90 	vmov	r3, s17
   23ddc:	2b00      	cmp	r3, #0
   23dde:	f448 7280 	orr.w	r2, r8, #256	; 0x100
   23de2:	4646      	mov	r6, r8
   23de4:	f2c0 8618 	blt.w	24a18 <_svfprintf_r+0x19d8>
   23de8:	eeb0 ab48 	vmov.f64	d10, d8
   23dec:	2300      	movs	r3, #0
   23dee:	4690      	mov	r8, r2
   23df0:	9309      	str	r3, [sp, #36]	; 0x24
   23df2:	9307      	str	r3, [sp, #28]
   23df4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23df6:	3b41      	subs	r3, #65	; 0x41
   23df8:	2b25      	cmp	r3, #37	; 0x25
   23dfa:	f200 8398 	bhi.w	2452e <_svfprintf_r+0x14ee>
   23dfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   23e02:	046f      	.short	0x046f
   23e04:	03960396 	.word	0x03960396
   23e08:	04680396 	.word	0x04680396
   23e0c:	0396046c 	.word	0x0396046c
   23e10:	03960396 	.word	0x03960396
   23e14:	03960396 	.word	0x03960396
   23e18:	03960396 	.word	0x03960396
   23e1c:	03960396 	.word	0x03960396
   23e20:	03960396 	.word	0x03960396
   23e24:	03960396 	.word	0x03960396
   23e28:	03960396 	.word	0x03960396
   23e2c:	03960396 	.word	0x03960396
   23e30:	03960396 	.word	0x03960396
   23e34:	03960396 	.word	0x03960396
   23e38:	03960396 	.word	0x03960396
   23e3c:	03960396 	.word	0x03960396
   23e40:	03960396 	.word	0x03960396
   23e44:	03960396 	.word	0x03960396
   23e48:	04680396 	.word	0x04680396
   23e4c:	046c      	.short	0x046c
   23e4e:	9b08      	ldr	r3, [sp, #32]
   23e50:	f853 2b04 	ldr.w	r2, [r3], #4
   23e54:	9308      	str	r3, [sp, #32]
   23e56:	2301      	movs	r3, #1
   23e58:	f7ff bb97 	b.w	2358a <_svfprintf_r+0x54a>
   23e5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23e5e:	2b00      	cmp	r3, #0
   23e60:	f43f a9cf 	beq.w	23202 <_svfprintf_r+0x1c2>
   23e64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   23e66:	781b      	ldrb	r3, [r3, #0]
   23e68:	2b00      	cmp	r3, #0
   23e6a:	f43f a9ca 	beq.w	23202 <_svfprintf_r+0x1c2>
   23e6e:	f899 3000 	ldrb.w	r3, [r9]
   23e72:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
   23e76:	f7ff b93f 	b.w	230f8 <_svfprintf_r+0xb8>
   23e7a:	930b      	str	r3, [sp, #44]	; 0x2c
   23e7c:	f8cd 8008 	str.w	r8, [sp, #8]
   23e80:	f7ff bbf1 	b.w	23666 <_svfprintf_r+0x626>
   23e84:	930b      	str	r3, [sp, #44]	; 0x2c
   23e86:	4b9a      	ldr	r3, [pc, #616]	; (240f0 <_svfprintf_r+0x10b0>)
   23e88:	9311      	str	r3, [sp, #68]	; 0x44
   23e8a:	f018 0120 	ands.w	r1, r8, #32
   23e8e:	f000 8105 	beq.w	2409c <_svfprintf_r+0x105c>
   23e92:	9b08      	ldr	r3, [sp, #32]
   23e94:	3307      	adds	r3, #7
   23e96:	f023 0307 	bic.w	r3, r3, #7
   23e9a:	6859      	ldr	r1, [r3, #4]
   23e9c:	f853 2b08 	ldr.w	r2, [r3], #8
   23ea0:	9308      	str	r3, [sp, #32]
   23ea2:	f018 0f01 	tst.w	r8, #1
   23ea6:	d00a      	beq.n	23ebe <_svfprintf_r+0xe7e>
   23ea8:	ea52 0301 	orrs.w	r3, r2, r1
   23eac:	d007      	beq.n	23ebe <_svfprintf_r+0xe7e>
   23eae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23eb0:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   23eb4:	2330      	movs	r3, #48	; 0x30
   23eb6:	f048 0802 	orr.w	r8, r8, #2
   23eba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   23ebe:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
   23ec2:	9302      	str	r3, [sp, #8]
   23ec4:	2302      	movs	r3, #2
   23ec6:	f7ff bb60 	b.w	2358a <_svfprintf_r+0x54a>
   23eca:	930b      	str	r3, [sp, #44]	; 0x2c
   23ecc:	f7ff bbb6 	b.w	2363c <_svfprintf_r+0x5fc>
   23ed0:	930b      	str	r3, [sp, #44]	; 0x2c
   23ed2:	4b88      	ldr	r3, [pc, #544]	; (240f4 <_svfprintf_r+0x10b4>)
   23ed4:	9311      	str	r3, [sp, #68]	; 0x44
   23ed6:	e7d8      	b.n	23e8a <_svfprintf_r+0xe4a>
   23ed8:	9b08      	ldr	r3, [sp, #32]
   23eda:	2101      	movs	r1, #1
   23edc:	f853 2b04 	ldr.w	r2, [r3], #4
   23ee0:	9102      	str	r1, [sp, #8]
   23ee2:	f88d 20dc 	strb.w	r2, [sp, #220]	; 0xdc
   23ee6:	9308      	str	r3, [sp, #32]
   23ee8:	9105      	str	r1, [sp, #20]
   23eea:	ac37      	add	r4, sp, #220	; 0xdc
   23eec:	f7ff baaf 	b.w	2344e <_svfprintf_r+0x40e>
   23ef0:	ee1b 1a10 	vmov	r1, s22
   23ef4:	aa24      	add	r2, sp, #144	; 0x90
   23ef6:	4658      	mov	r0, fp
   23ef8:	f002 fce4 	bl	268c4 <__ssprint_r>
   23efc:	2800      	cmp	r0, #0
   23efe:	f47f ad04 	bne.w	2390a <_svfprintf_r+0x8ca>
   23f02:	9a26      	ldr	r2, [sp, #152]	; 0x98
   23f04:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   23f08:	e45d      	b.n	237c6 <_svfprintf_r+0x786>
   23f0a:	9b03      	ldr	r3, [sp, #12]
   23f0c:	9407      	str	r4, [sp, #28]
   23f0e:	2b06      	cmp	r3, #6
   23f10:	4622      	mov	r2, r4
   23f12:	bf28      	it	cs
   23f14:	2306      	movcs	r3, #6
   23f16:	9403      	str	r4, [sp, #12]
   23f18:	4621      	mov	r1, r4
   23f1a:	e9cd 220c 	strd	r2, r2, [sp, #48]	; 0x30
   23f1e:	4c76      	ldr	r4, [pc, #472]	; (240f8 <_svfprintf_r+0x10b8>)
   23f20:	9302      	str	r3, [sp, #8]
   23f22:	9305      	str	r3, [sp, #20]
   23f24:	920f      	str	r2, [sp, #60]	; 0x3c
   23f26:	f7ff ba6c 	b.w	23402 <_svfprintf_r+0x3c2>
   23f2a:	2140      	movs	r1, #64	; 0x40
   23f2c:	4658      	mov	r0, fp
   23f2e:	f7fd f927 	bl	21180 <_malloc_r>
   23f32:	6020      	str	r0, [r4, #0]
   23f34:	6120      	str	r0, [r4, #16]
   23f36:	2800      	cmp	r0, #0
   23f38:	f000 860f 	beq.w	24b5a <_svfprintf_r+0x1b1a>
   23f3c:	2340      	movs	r3, #64	; 0x40
   23f3e:	6163      	str	r3, [r4, #20]
   23f40:	f7ff b89e 	b.w	23080 <_svfprintf_r+0x40>
   23f44:	2d10      	cmp	r5, #16
   23f46:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23f48:	f340 825d 	ble.w	24406 <_svfprintf_r+0x13c6>
   23f4c:	4651      	mov	r1, sl
   23f4e:	2610      	movs	r6, #16
   23f50:	ee1b aa10 	vmov	sl, s22
   23f54:	e004      	b.n	23f60 <_svfprintf_r+0xf20>
   23f56:	3108      	adds	r1, #8
   23f58:	3d10      	subs	r5, #16
   23f5a:	2d10      	cmp	r5, #16
   23f5c:	f340 8252 	ble.w	24404 <_svfprintf_r+0x13c4>
   23f60:	3301      	adds	r3, #1
   23f62:	4866      	ldr	r0, [pc, #408]	; (240fc <_svfprintf_r+0x10bc>)
   23f64:	3210      	adds	r2, #16
   23f66:	2b07      	cmp	r3, #7
   23f68:	e9c1 0600 	strd	r0, r6, [r1]
   23f6c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   23f70:	ddf1      	ble.n	23f56 <_svfprintf_r+0xf16>
   23f72:	aa24      	add	r2, sp, #144	; 0x90
   23f74:	4651      	mov	r1, sl
   23f76:	4658      	mov	r0, fp
   23f78:	f002 fca4 	bl	268c4 <__ssprint_r>
   23f7c:	2800      	cmp	r0, #0
   23f7e:	f47f acc4 	bne.w	2390a <_svfprintf_r+0x8ca>
   23f82:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   23f86:	a927      	add	r1, sp, #156	; 0x9c
   23f88:	e7e6      	b.n	23f58 <_svfprintf_r+0xf18>
   23f8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23f8c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   23f90:	18e3      	adds	r3, r4, r3
   23f92:	9303      	str	r3, [sp, #12]
   23f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23f96:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   23f9a:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   23f9c:	9d05      	ldr	r5, [sp, #20]
   23f9e:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
   23fa2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   23fa6:	940b      	str	r4, [sp, #44]	; 0x2c
   23fa8:	ee1b 1a10 	vmov	r1, s22
   23fac:	4650      	mov	r0, sl
   23fae:	2b00      	cmp	r3, #0
   23fb0:	d034      	beq.n	2401c <_svfprintf_r+0xfdc>
   23fb2:	f1b8 0f00 	cmp.w	r8, #0
   23fb6:	d135      	bne.n	24024 <_svfprintf_r+0xfe4>
   23fb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23fba:	3b01      	subs	r3, #1
   23fbc:	3e01      	subs	r6, #1
   23fbe:	930d      	str	r3, [sp, #52]	; 0x34
   23fc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   23fc2:	e9c0 3900 	strd	r3, r9, [r0]
   23fc6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   23fc8:	3301      	adds	r3, #1
   23fca:	444a      	add	r2, r9
   23fcc:	2b07      	cmp	r3, #7
   23fce:	9226      	str	r2, [sp, #152]	; 0x98
   23fd0:	9325      	str	r3, [sp, #148]	; 0x94
   23fd2:	dc6c      	bgt.n	240ae <_svfprintf_r+0x106e>
   23fd4:	3008      	adds	r0, #8
   23fd6:	9b03      	ldr	r3, [sp, #12]
   23fd8:	f896 c000 	ldrb.w	ip, [r6]
   23fdc:	1b5b      	subs	r3, r3, r5
   23fde:	4563      	cmp	r3, ip
   23fe0:	bfa8      	it	ge
   23fe2:	4663      	movge	r3, ip
   23fe4:	2b00      	cmp	r3, #0
   23fe6:	469a      	mov	sl, r3
   23fe8:	dd0c      	ble.n	24004 <_svfprintf_r+0xfc4>
   23fea:	9c25      	ldr	r4, [sp, #148]	; 0x94
   23fec:	3401      	adds	r4, #1
   23fee:	441a      	add	r2, r3
   23ff0:	2c07      	cmp	r4, #7
   23ff2:	e9c0 5300 	strd	r5, r3, [r0]
   23ff6:	9226      	str	r2, [sp, #152]	; 0x98
   23ff8:	9425      	str	r4, [sp, #148]	; 0x94
   23ffa:	f300 8177 	bgt.w	242ec <_svfprintf_r+0x12ac>
   23ffe:	f896 c000 	ldrb.w	ip, [r6]
   24002:	3008      	adds	r0, #8
   24004:	f1ba 0f00 	cmp.w	sl, #0
   24008:	bfac      	ite	ge
   2400a:	ebac 040a 	subge.w	r4, ip, sl
   2400e:	4664      	movlt	r4, ip
   24010:	2c00      	cmp	r4, #0
   24012:	dc0a      	bgt.n	2402a <_svfprintf_r+0xfea>
   24014:	4465      	add	r5, ip
   24016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24018:	2b00      	cmp	r3, #0
   2401a:	d1ca      	bne.n	23fb2 <_svfprintf_r+0xf72>
   2401c:	f1b8 0f00 	cmp.w	r8, #0
   24020:	f000 83ac 	beq.w	2477c <_svfprintf_r+0x173c>
   24024:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   24028:	e7ca      	b.n	23fc0 <_svfprintf_r+0xf80>
   2402a:	2c10      	cmp	r4, #16
   2402c:	f8dd c094 	ldr.w	ip, [sp, #148]	; 0x94
   24030:	dd24      	ble.n	2407c <_svfprintf_r+0x103c>
   24032:	9505      	str	r5, [sp, #20]
   24034:	f04f 0a10 	mov.w	sl, #16
   24038:	4663      	mov	r3, ip
   2403a:	460d      	mov	r5, r1
   2403c:	e004      	b.n	24048 <_svfprintf_r+0x1008>
   2403e:	3c10      	subs	r4, #16
   24040:	2c10      	cmp	r4, #16
   24042:	f100 0008 	add.w	r0, r0, #8
   24046:	dd16      	ble.n	24076 <_svfprintf_r+0x1036>
   24048:	3301      	adds	r3, #1
   2404a:	492c      	ldr	r1, [pc, #176]	; (240fc <_svfprintf_r+0x10bc>)
   2404c:	3210      	adds	r2, #16
   2404e:	2b07      	cmp	r3, #7
   24050:	e9c0 1a00 	strd	r1, sl, [r0]
   24054:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24058:	ddf1      	ble.n	2403e <_svfprintf_r+0xffe>
   2405a:	aa24      	add	r2, sp, #144	; 0x90
   2405c:	4629      	mov	r1, r5
   2405e:	4658      	mov	r0, fp
   24060:	f002 fc30 	bl	268c4 <__ssprint_r>
   24064:	2800      	cmp	r0, #0
   24066:	f47f ac50 	bne.w	2390a <_svfprintf_r+0x8ca>
   2406a:	3c10      	subs	r4, #16
   2406c:	2c10      	cmp	r4, #16
   2406e:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   24072:	a827      	add	r0, sp, #156	; 0x9c
   24074:	dce8      	bgt.n	24048 <_svfprintf_r+0x1008>
   24076:	4629      	mov	r1, r5
   24078:	9d05      	ldr	r5, [sp, #20]
   2407a:	469c      	mov	ip, r3
   2407c:	f10c 0301 	add.w	r3, ip, #1
   24080:	4422      	add	r2, r4
   24082:	6044      	str	r4, [r0, #4]
   24084:	2b07      	cmp	r3, #7
   24086:	4c1d      	ldr	r4, [pc, #116]	; (240fc <_svfprintf_r+0x10bc>)
   24088:	6004      	str	r4, [r0, #0]
   2408a:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2408e:	f300 83c6 	bgt.w	2481e <_svfprintf_r+0x17de>
   24092:	f896 c000 	ldrb.w	ip, [r6]
   24096:	3008      	adds	r0, #8
   24098:	4465      	add	r5, ip
   2409a:	e7bc      	b.n	24016 <_svfprintf_r+0xfd6>
   2409c:	f018 0310 	ands.w	r3, r8, #16
   240a0:	f000 80c2 	beq.w	24228 <_svfprintf_r+0x11e8>
   240a4:	9b08      	ldr	r3, [sp, #32]
   240a6:	f853 2b04 	ldr.w	r2, [r3], #4
   240aa:	9308      	str	r3, [sp, #32]
   240ac:	e6f9      	b.n	23ea2 <_svfprintf_r+0xe62>
   240ae:	aa24      	add	r2, sp, #144	; 0x90
   240b0:	4658      	mov	r0, fp
   240b2:	9105      	str	r1, [sp, #20]
   240b4:	f002 fc06 	bl	268c4 <__ssprint_r>
   240b8:	2800      	cmp	r0, #0
   240ba:	f47f ac26 	bne.w	2390a <_svfprintf_r+0x8ca>
   240be:	9a26      	ldr	r2, [sp, #152]	; 0x98
   240c0:	9905      	ldr	r1, [sp, #20]
   240c2:	a827      	add	r0, sp, #156	; 0x9c
   240c4:	e787      	b.n	23fd6 <_svfprintf_r+0xf96>
   240c6:	9802      	ldr	r0, [sp, #8]
   240c8:	f8cd a01c 	str.w	sl, [sp, #28]
   240cc:	ac50      	add	r4, sp, #320	; 0x140
   240ce:	f400 6080 	and.w	r0, r0, #1024	; 0x400
   240d2:	2500      	movs	r5, #0
   240d4:	ee0a ba10 	vmov	s20, fp
   240d8:	4b09      	ldr	r3, [pc, #36]	; (24100 <_svfprintf_r+0x10c0>)
   240da:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   240de:	f8cd 9014 	str.w	r9, [sp, #20]
   240e2:	46a3      	mov	fp, r4
   240e4:	f04f 0805 	mov.w	r8, #5
   240e8:	46ac      	mov	ip, r5
   240ea:	4604      	mov	r4, r0
   240ec:	e010      	b.n	24110 <_svfprintf_r+0x10d0>
   240ee:	bf00      	nop
   240f0:	200019b4 	.word	0x200019b4
   240f4:	200019c8 	.word	0x200019c8
   240f8:	200019dc 	.word	0x200019dc
   240fc:	20003144 	.word	0x20003144
   24100:	cccccccd 	.word	0xcccccccd
   24104:	2a0a      	cmp	r2, #10
   24106:	f171 0100 	sbcs.w	r1, r1, #0
   2410a:	d336      	bcc.n	2417a <_svfprintf_r+0x113a>
   2410c:	464a      	mov	r2, r9
   2410e:	4631      	mov	r1, r6
   24110:	1850      	adds	r0, r2, r1
   24112:	f140 0000 	adc.w	r0, r0, #0
   24116:	fba3 5600 	umull	r5, r6, r3, r0
   2411a:	f026 0503 	bic.w	r5, r6, #3
   2411e:	eb05 0596 	add.w	r5, r5, r6, lsr #2
   24122:	1b40      	subs	r0, r0, r5
   24124:	1a15      	subs	r5, r2, r0
   24126:	f04f 36cc 	mov.w	r6, #3435973836	; 0xcccccccc
   2412a:	f161 0e00 	sbc.w	lr, r1, #0
   2412e:	fb06 f605 	mul.w	r6, r6, r5
   24132:	fba5 9503 	umull	r9, r5, r5, r3
   24136:	fb03 660e 	mla	r6, r3, lr, r6
   2413a:	f009 0e01 	and.w	lr, r9, #1
   2413e:	442e      	add	r6, r5
   24140:	fbae 5e08 	umull	r5, lr, lr, r8
   24144:	182d      	adds	r5, r5, r0
   24146:	ea4f 0959 	mov.w	r9, r9, lsr #1
   2414a:	3530      	adds	r5, #48	; 0x30
   2414c:	f80b 5c01 	strb.w	r5, [fp, #-1]
   24150:	ea49 79c6 	orr.w	r9, r9, r6, lsl #31
   24154:	f10c 0c01 	add.w	ip, ip, #1
   24158:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   2415c:	0876      	lsrs	r6, r6, #1
   2415e:	2c00      	cmp	r4, #0
   24160:	d0d0      	beq.n	24104 <_svfprintf_r+0x10c4>
   24162:	f89a 0000 	ldrb.w	r0, [sl]
   24166:	4584      	cmp	ip, r0
   24168:	d1cc      	bne.n	24104 <_svfprintf_r+0x10c4>
   2416a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   2416e:	d0c9      	beq.n	24104 <_svfprintf_r+0x10c4>
   24170:	2a0a      	cmp	r2, #10
   24172:	f171 0100 	sbcs.w	r1, r1, #0
   24176:	f080 818f 	bcs.w	24498 <_svfprintf_r+0x1458>
   2417a:	465c      	mov	r4, fp
   2417c:	ab50      	add	r3, sp, #320	; 0x140
   2417e:	1b1b      	subs	r3, r3, r4
   24180:	f8dd 9014 	ldr.w	r9, [sp, #20]
   24184:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
   24188:	ee1a ba10 	vmov	fp, s20
   2418c:	f8dd a01c 	ldr.w	sl, [sp, #28]
   24190:	f8dd 8008 	ldr.w	r8, [sp, #8]
   24194:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   24198:	9305      	str	r3, [sp, #20]
   2419a:	f7ff bac2 	b.w	23722 <_svfprintf_r+0x6e2>
   2419e:	ee1b 1a10 	vmov	r1, s22
   241a2:	aa24      	add	r2, sp, #144	; 0x90
   241a4:	4658      	mov	r0, fp
   241a6:	f002 fb8d 	bl	268c4 <__ssprint_r>
   241aa:	2800      	cmp	r0, #0
   241ac:	f47f abad 	bne.w	2390a <_svfprintf_r+0x8ca>
   241b0:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   241b4:	9a26      	ldr	r2, [sp, #152]	; 0x98
   241b6:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   241ba:	f7ff b896 	b.w	232ea <_svfprintf_r+0x2aa>
   241be:	9b25      	ldr	r3, [sp, #148]	; 0x94
   241c0:	48be      	ldr	r0, [pc, #760]	; (244bc <_svfprintf_r+0x147c>)
   241c2:	f8ca 0000 	str.w	r0, [sl]
   241c6:	3301      	adds	r3, #1
   241c8:	3201      	adds	r2, #1
   241ca:	2001      	movs	r0, #1
   241cc:	2b07      	cmp	r3, #7
   241ce:	9226      	str	r2, [sp, #152]	; 0x98
   241d0:	9325      	str	r3, [sp, #148]	; 0x94
   241d2:	f8ca 0004 	str.w	r0, [sl, #4]
   241d6:	f300 8177 	bgt.w	244c8 <_svfprintf_r+0x1488>
   241da:	f10a 0a08 	add.w	sl, sl, #8
   241de:	2900      	cmp	r1, #0
   241e0:	f040 80af 	bne.w	24342 <_svfprintf_r+0x1302>
   241e4:	990e      	ldr	r1, [sp, #56]	; 0x38
   241e6:	f008 0301 	and.w	r3, r8, #1
   241ea:	430b      	orrs	r3, r1
   241ec:	f43f a8c0 	beq.w	23370 <_svfprintf_r+0x330>
   241f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   241f2:	9912      	ldr	r1, [sp, #72]	; 0x48
   241f4:	441a      	add	r2, r3
   241f6:	e9ca 1300 	strd	r1, r3, [sl]
   241fa:	9b25      	ldr	r3, [sp, #148]	; 0x94
   241fc:	9226      	str	r2, [sp, #152]	; 0x98
   241fe:	3301      	adds	r3, #1
   24200:	2b07      	cmp	r3, #7
   24202:	9325      	str	r3, [sp, #148]	; 0x94
   24204:	f300 8252 	bgt.w	246ac <_svfprintf_r+0x166c>
   24208:	f10a 0a08 	add.w	sl, sl, #8
   2420c:	990e      	ldr	r1, [sp, #56]	; 0x38
   2420e:	f8ca 4000 	str.w	r4, [sl]
   24212:	3301      	adds	r3, #1
   24214:	440a      	add	r2, r1
   24216:	2b07      	cmp	r3, #7
   24218:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2421c:	f8ca 1004 	str.w	r1, [sl, #4]
   24220:	f77f a8a4 	ble.w	2336c <_svfprintf_r+0x32c>
   24224:	f7ff bbbd 	b.w	239a2 <_svfprintf_r+0x962>
   24228:	f018 0240 	ands.w	r2, r8, #64	; 0x40
   2422c:	f000 80dd 	beq.w	243ea <_svfprintf_r+0x13aa>
   24230:	9808      	ldr	r0, [sp, #32]
   24232:	f850 2b04 	ldr.w	r2, [r0], #4
   24236:	9008      	str	r0, [sp, #32]
   24238:	4619      	mov	r1, r3
   2423a:	b292      	uxth	r2, r2
   2423c:	e631      	b.n	23ea2 <_svfprintf_r+0xe62>
   2423e:	ee1b 1a10 	vmov	r1, s22
   24242:	aa24      	add	r2, sp, #144	; 0x90
   24244:	4658      	mov	r0, fp
   24246:	f002 fb3d 	bl	268c4 <__ssprint_r>
   2424a:	2800      	cmp	r0, #0
   2424c:	f47f ab5d 	bne.w	2390a <_svfprintf_r+0x8ca>
   24250:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24252:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24256:	f7ff baa3 	b.w	237a0 <_svfprintf_r+0x760>
   2425a:	ae22      	add	r6, sp, #136	; 0x88
   2425c:	2208      	movs	r2, #8
   2425e:	2100      	movs	r1, #0
   24260:	4630      	mov	r0, r6
   24262:	941d      	str	r4, [sp, #116]	; 0x74
   24264:	f7fe f93c 	bl	224e0 <memset>
   24268:	9b03      	ldr	r3, [sp, #12]
   2426a:	1c5a      	adds	r2, r3, #1
   2426c:	f000 80db 	beq.w	24426 <_svfprintf_r+0x13e6>
   24270:	2500      	movs	r5, #0
   24272:	f8cd 9008 	str.w	r9, [sp, #8]
   24276:	f8cd 801c 	str.w	r8, [sp, #28]
   2427a:	4699      	mov	r9, r3
   2427c:	46a8      	mov	r8, r5
   2427e:	e00c      	b.n	2429a <_svfprintf_r+0x125a>
   24280:	a937      	add	r1, sp, #220	; 0xdc
   24282:	4658      	mov	r0, fp
   24284:	f001 fb70 	bl	25968 <_wcrtomb_r>
   24288:	1c43      	adds	r3, r0, #1
   2428a:	4440      	add	r0, r8
   2428c:	f000 83c8 	beq.w	24a20 <_svfprintf_r+0x19e0>
   24290:	4548      	cmp	r0, r9
   24292:	dc08      	bgt.n	242a6 <_svfprintf_r+0x1266>
   24294:	f000 8418 	beq.w	24ac8 <_svfprintf_r+0x1a88>
   24298:	4680      	mov	r8, r0
   2429a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   2429c:	5952      	ldr	r2, [r2, r5]
   2429e:	4633      	mov	r3, r6
   242a0:	3504      	adds	r5, #4
   242a2:	2a00      	cmp	r2, #0
   242a4:	d1ec      	bne.n	24280 <_svfprintf_r+0x1240>
   242a6:	f8cd 8014 	str.w	r8, [sp, #20]
   242aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
   242ae:	f8dd 801c 	ldr.w	r8, [sp, #28]
   242b2:	e0c5      	b.n	24440 <_svfprintf_r+0x1400>
   242b4:	3301      	adds	r3, #1
   242b6:	4982      	ldr	r1, [pc, #520]	; (244c0 <_svfprintf_r+0x1480>)
   242b8:	f8ca 4004 	str.w	r4, [sl, #4]
   242bc:	4422      	add	r2, r4
   242be:	2b07      	cmp	r3, #7
   242c0:	f8ca 1000 	str.w	r1, [sl]
   242c4:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   242c8:	f77f a850 	ble.w	2336c <_svfprintf_r+0x32c>
   242cc:	f7ff bb69 	b.w	239a2 <_svfprintf_r+0x962>
   242d0:	ee1b 1a10 	vmov	r1, s22
   242d4:	aa24      	add	r2, sp, #144	; 0x90
   242d6:	4658      	mov	r0, fp
   242d8:	f002 faf4 	bl	268c4 <__ssprint_r>
   242dc:	2800      	cmp	r0, #0
   242de:	f47f ab14 	bne.w	2390a <_svfprintf_r+0x8ca>
   242e2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   242e4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   242e8:	f7ff b829 	b.w	2333e <_svfprintf_r+0x2fe>
   242ec:	aa24      	add	r2, sp, #144	; 0x90
   242ee:	4658      	mov	r0, fp
   242f0:	9105      	str	r1, [sp, #20]
   242f2:	f002 fae7 	bl	268c4 <__ssprint_r>
   242f6:	2800      	cmp	r0, #0
   242f8:	f47f ab07 	bne.w	2390a <_svfprintf_r+0x8ca>
   242fc:	f896 c000 	ldrb.w	ip, [r6]
   24300:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24302:	9905      	ldr	r1, [sp, #20]
   24304:	a827      	add	r0, sp, #156	; 0x9c
   24306:	e67d      	b.n	24004 <_svfprintf_r+0xfc4>
   24308:	2b01      	cmp	r3, #1
   2430a:	f8cd 8008 	str.w	r8, [sp, #8]
   2430e:	f47f a9f3 	bne.w	236f8 <_svfprintf_r+0x6b8>
   24312:	f7ff bb93 	b.w	23a3c <_svfprintf_r+0x9fc>
   24316:	9b08      	ldr	r3, [sp, #32]
   24318:	9904      	ldr	r1, [sp, #16]
   2431a:	f853 2b04 	ldr.w	r2, [r3], #4
   2431e:	464c      	mov	r4, r9
   24320:	6011      	str	r1, [r2, #0]
   24322:	9308      	str	r3, [sp, #32]
   24324:	f7fe bebe 	b.w	230a4 <_svfprintf_r+0x64>
   24328:	3301      	adds	r3, #1
   2432a:	4965      	ldr	r1, [pc, #404]	; (244c0 <_svfprintf_r+0x1480>)
   2432c:	f8ca 4004 	str.w	r4, [sl, #4]
   24330:	4422      	add	r2, r4
   24332:	2b07      	cmp	r3, #7
   24334:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24338:	f8ca 1000 	str.w	r1, [sl]
   2433c:	f77f ab22 	ble.w	23984 <_svfprintf_r+0x944>
   24340:	e47b      	b.n	23c3a <_svfprintf_r+0xbfa>
   24342:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24344:	9812      	ldr	r0, [sp, #72]	; 0x48
   24346:	441a      	add	r2, r3
   24348:	e9ca 0300 	strd	r0, r3, [sl]
   2434c:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2434e:	9226      	str	r2, [sp, #152]	; 0x98
   24350:	3301      	adds	r3, #1
   24352:	2b07      	cmp	r3, #7
   24354:	9325      	str	r3, [sp, #148]	; 0x94
   24356:	f300 81a9 	bgt.w	246ac <_svfprintf_r+0x166c>
   2435a:	f10a 0a08 	add.w	sl, sl, #8
   2435e:	2900      	cmp	r1, #0
   24360:	f6bf af54 	bge.w	2420c <_svfprintf_r+0x11cc>
   24364:	424d      	negs	r5, r1
   24366:	3110      	adds	r1, #16
   24368:	f280 830f 	bge.w	2498a <_svfprintf_r+0x194a>
   2436c:	ee1b 1a10 	vmov	r1, s22
   24370:	2610      	movs	r6, #16
   24372:	e005      	b.n	24380 <_svfprintf_r+0x1340>
   24374:	f10a 0a08 	add.w	sl, sl, #8
   24378:	3d10      	subs	r5, #16
   2437a:	2d10      	cmp	r5, #16
   2437c:	f340 8305 	ble.w	2498a <_svfprintf_r+0x194a>
   24380:	3301      	adds	r3, #1
   24382:	484f      	ldr	r0, [pc, #316]	; (244c0 <_svfprintf_r+0x1480>)
   24384:	3210      	adds	r2, #16
   24386:	2b07      	cmp	r3, #7
   24388:	e9ca 0600 	strd	r0, r6, [sl]
   2438c:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24390:	ddf0      	ble.n	24374 <_svfprintf_r+0x1334>
   24392:	aa24      	add	r2, sp, #144	; 0x90
   24394:	4658      	mov	r0, fp
   24396:	9103      	str	r1, [sp, #12]
   24398:	f002 fa94 	bl	268c4 <__ssprint_r>
   2439c:	2800      	cmp	r0, #0
   2439e:	f47f aab4 	bne.w	2390a <_svfprintf_r+0x8ca>
   243a2:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   243a6:	9903      	ldr	r1, [sp, #12]
   243a8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   243ac:	e7e4      	b.n	24378 <_svfprintf_r+0x1338>
   243ae:	9b08      	ldr	r3, [sp, #32]
   243b0:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   243b4:	bf1a      	itte	ne
   243b6:	4611      	movne	r1, r2
   243b8:	f853 2b04 	ldrne.w	r2, [r3], #4
   243bc:	f853 2b04 	ldreq.w	r2, [r3], #4
   243c0:	9308      	str	r3, [sp, #32]
   243c2:	bf18      	it	ne
   243c4:	b2d2      	uxtbne	r2, r2
   243c6:	f7ff b945 	b.w	23654 <_svfprintf_r+0x614>
   243ca:	9b02      	ldr	r3, [sp, #8]
   243cc:	f413 7100 	ands.w	r1, r3, #512	; 0x200
   243d0:	9b08      	ldr	r3, [sp, #32]
   243d2:	bf1a      	itte	ne
   243d4:	4611      	movne	r1, r2
   243d6:	f853 2b04 	ldrne.w	r2, [r3], #4
   243da:	f853 2b04 	ldreq.w	r2, [r3], #4
   243de:	9308      	str	r3, [sp, #32]
   243e0:	bf18      	it	ne
   243e2:	b2d2      	uxtbne	r2, r2
   243e4:	2301      	movs	r3, #1
   243e6:	f7ff b8d0 	b.w	2358a <_svfprintf_r+0x54a>
   243ea:	9b08      	ldr	r3, [sp, #32]
   243ec:	f418 7100 	ands.w	r1, r8, #512	; 0x200
   243f0:	bf1a      	itte	ne
   243f2:	4611      	movne	r1, r2
   243f4:	f853 2b04 	ldrne.w	r2, [r3], #4
   243f8:	f853 2b04 	ldreq.w	r2, [r3], #4
   243fc:	9308      	str	r3, [sp, #32]
   243fe:	bf18      	it	ne
   24400:	b2d2      	uxtbne	r2, r2
   24402:	e54e      	b.n	23ea2 <_svfprintf_r+0xe62>
   24404:	468a      	mov	sl, r1
   24406:	3301      	adds	r3, #1
   24408:	492d      	ldr	r1, [pc, #180]	; (244c0 <_svfprintf_r+0x1480>)
   2440a:	f8ca 5004 	str.w	r5, [sl, #4]
   2440e:	442a      	add	r2, r5
   24410:	2b07      	cmp	r3, #7
   24412:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   24416:	f8ca 1000 	str.w	r1, [sl]
   2441a:	f300 8139 	bgt.w	24690 <_svfprintf_r+0x1650>
   2441e:	f10a 0a08 	add.w	sl, sl, #8
   24422:	f7ff bb8c 	b.w	23b3e <_svfprintf_r+0xafe>
   24426:	2300      	movs	r3, #0
   24428:	4619      	mov	r1, r3
   2442a:	9600      	str	r6, [sp, #0]
   2442c:	aa1d      	add	r2, sp, #116	; 0x74
   2442e:	4658      	mov	r0, fp
   24430:	f001 fac0 	bl	259b4 <_wcsrtombs_r>
   24434:	4603      	mov	r3, r0
   24436:	3301      	adds	r3, #1
   24438:	9005      	str	r0, [sp, #20]
   2443a:	f000 82f1 	beq.w	24a20 <_svfprintf_r+0x19e0>
   2443e:	941d      	str	r4, [sp, #116]	; 0x74
   24440:	9b05      	ldr	r3, [sp, #20]
   24442:	2b00      	cmp	r3, #0
   24444:	d04e      	beq.n	244e4 <_svfprintf_r+0x14a4>
   24446:	2b63      	cmp	r3, #99	; 0x63
   24448:	f300 8118 	bgt.w	2467c <_svfprintf_r+0x163c>
   2444c:	2300      	movs	r3, #0
   2444e:	9307      	str	r3, [sp, #28]
   24450:	ac37      	add	r4, sp, #220	; 0xdc
   24452:	2208      	movs	r2, #8
   24454:	2100      	movs	r1, #0
   24456:	4630      	mov	r0, r6
   24458:	f7fe f842 	bl	224e0 <memset>
   2445c:	9d05      	ldr	r5, [sp, #20]
   2445e:	9600      	str	r6, [sp, #0]
   24460:	462b      	mov	r3, r5
   24462:	aa1d      	add	r2, sp, #116	; 0x74
   24464:	4621      	mov	r1, r4
   24466:	4658      	mov	r0, fp
   24468:	f001 faa4 	bl	259b4 <_wcsrtombs_r>
   2446c:	4285      	cmp	r5, r0
   2446e:	f040 837c 	bne.w	24b6a <_svfprintf_r+0x1b2a>
   24472:	9a05      	ldr	r2, [sp, #20]
   24474:	2300      	movs	r3, #0
   24476:	54a3      	strb	r3, [r4, r2]
   24478:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   2447c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   24480:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24484:	9303      	str	r3, [sp, #12]
   24486:	9202      	str	r2, [sp, #8]
   24488:	930f      	str	r3, [sp, #60]	; 0x3c
   2448a:	f7fe bfba 	b.w	23402 <_svfprintf_r+0x3c2>
   2448e:	212d      	movs	r1, #45	; 0x2d
   24490:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   24494:	f7fe bfa4 	b.w	233e0 <_svfprintf_r+0x3a0>
   24498:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2449a:	9915      	ldr	r1, [sp, #84]	; 0x54
   2449c:	ebab 0b03 	sub.w	fp, fp, r3
   244a0:	461a      	mov	r2, r3
   244a2:	4658      	mov	r0, fp
   244a4:	f7fe f8b4 	bl	22610 <strncpy>
   244a8:	f89a 2001 	ldrb.w	r2, [sl, #1]
   244ac:	4b05      	ldr	r3, [pc, #20]	; (244c4 <_svfprintf_r+0x1484>)
   244ae:	b10a      	cbz	r2, 244b4 <_svfprintf_r+0x1474>
   244b0:	f10a 0a01 	add.w	sl, sl, #1
   244b4:	f04f 0c00 	mov.w	ip, #0
   244b8:	e628      	b.n	2410c <_svfprintf_r+0x10cc>
   244ba:	bf00      	nop
   244bc:	20002834 	.word	0x20002834
   244c0:	20003144 	.word	0x20003144
   244c4:	cccccccd 	.word	0xcccccccd
   244c8:	ee1b 1a10 	vmov	r1, s22
   244cc:	aa24      	add	r2, sp, #144	; 0x90
   244ce:	4658      	mov	r0, fp
   244d0:	f002 f9f8 	bl	268c4 <__ssprint_r>
   244d4:	2800      	cmp	r0, #0
   244d6:	f47f aa18 	bne.w	2390a <_svfprintf_r+0x8ca>
   244da:	991b      	ldr	r1, [sp, #108]	; 0x6c
   244dc:	9a26      	ldr	r2, [sp, #152]	; 0x98
   244de:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   244e2:	e67c      	b.n	241de <_svfprintf_r+0x119e>
   244e4:	9b05      	ldr	r3, [sp, #20]
   244e6:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   244ea:	930f      	str	r3, [sp, #60]	; 0x3c
   244ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
   244f0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   244f4:	9307      	str	r3, [sp, #28]
   244f6:	f7fe bf84 	b.w	23402 <_svfprintf_r+0x3c2>
   244fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   244fc:	9805      	ldr	r0, [sp, #20]
   244fe:	1865      	adds	r5, r4, r1
   24500:	1a2d      	subs	r5, r5, r0
   24502:	1acc      	subs	r4, r1, r3
   24504:	42a5      	cmp	r5, r4
   24506:	bfa8      	it	ge
   24508:	4625      	movge	r5, r4
   2450a:	f7ff bb4d 	b.w	23ba8 <_svfprintf_r+0xb68>
   2450e:	9b08      	ldr	r3, [sp, #32]
   24510:	9904      	ldr	r1, [sp, #16]
   24512:	f853 2b04 	ldr.w	r2, [r3], #4
   24516:	9308      	str	r3, [sp, #32]
   24518:	8011      	strh	r1, [r2, #0]
   2451a:	464c      	mov	r4, r9
   2451c:	f7fe bdc2 	b.w	230a4 <_svfprintf_r+0x64>
   24520:	f913 2b04 	ldrsb.w	r2, [r3], #4
   24524:	9308      	str	r3, [sp, #32]
   24526:	17d1      	asrs	r1, r2, #31
   24528:	460b      	mov	r3, r1
   2452a:	f7fe bfdb 	b.w	234e4 <_svfprintf_r+0x4a4>
   2452e:	9a03      	ldr	r2, [sp, #12]
   24530:	2102      	movs	r1, #2
   24532:	ab22      	add	r3, sp, #136	; 0x88
   24534:	9301      	str	r3, [sp, #4]
   24536:	ab1d      	add	r3, sp, #116	; 0x74
   24538:	9300      	str	r3, [sp, #0]
   2453a:	4658      	mov	r0, fp
   2453c:	ab1b      	add	r3, sp, #108	; 0x6c
   2453e:	eeb0 0b4a 	vmov.f64	d0, d10
   24542:	9202      	str	r2, [sp, #8]
   24544:	f001 fb34 	bl	25bb0 <_dtoa_r>
   24548:	2d47      	cmp	r5, #71	; 0x47
   2454a:	9a02      	ldr	r2, [sp, #8]
   2454c:	4604      	mov	r4, r0
   2454e:	f000 8161 	beq.w	24814 <_svfprintf_r+0x17d4>
   24552:	2d46      	cmp	r5, #70	; 0x46
   24554:	4410      	add	r0, r2
   24556:	d105      	bne.n	24564 <_svfprintf_r+0x1524>
   24558:	7823      	ldrb	r3, [r4, #0]
   2455a:	2b30      	cmp	r3, #48	; 0x30
   2455c:	f000 826f 	beq.w	24a3e <_svfprintf_r+0x19fe>
   24560:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   24562:	4410      	add	r0, r2
   24564:	eeb5 ab40 	vcmp.f64	d10, #0.0
   24568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2456c:	f040 8146 	bne.w	247fc <_svfprintf_r+0x17bc>
   24570:	4603      	mov	r3, r0
   24572:	1b1b      	subs	r3, r3, r4
   24574:	930e      	str	r3, [sp, #56]	; 0x38
   24576:	2d47      	cmp	r5, #71	; 0x47
   24578:	f000 8110 	beq.w	2479c <_svfprintf_r+0x175c>
   2457c:	2d46      	cmp	r5, #70	; 0x46
   2457e:	f000 81b5 	beq.w	248ec <_svfprintf_r+0x18ac>
   24582:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   24584:	930c      	str	r3, [sp, #48]	; 0x30
   24586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24588:	2d41      	cmp	r5, #65	; 0x41
   2458a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2458e:	931b      	str	r3, [sp, #108]	; 0x6c
   24590:	f000 81e5 	beq.w	2495e <_svfprintf_r+0x191e>
   24594:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   24598:	2100      	movs	r1, #0
   2459a:	2b00      	cmp	r3, #0
   2459c:	bfb8      	it	lt
   2459e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
   245a0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   245a4:	bfba      	itte	lt
   245a6:	f1c3 0301 	rsblt	r3, r3, #1
   245aa:	222d      	movlt	r2, #45	; 0x2d
   245ac:	222b      	movge	r2, #43	; 0x2b
   245ae:	2b09      	cmp	r3, #9
   245b0:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   245b4:	f340 81da 	ble.w	2496c <_svfprintf_r+0x192c>
   245b8:	f10d 058f 	add.w	r5, sp, #143	; 0x8f
   245bc:	f8df c41c 	ldr.w	ip, [pc, #1052]	; 249dc <_svfprintf_r+0x199c>
   245c0:	462a      	mov	r2, r5
   245c2:	4610      	mov	r0, r2
   245c4:	fb8c 2103 	smull	r2, r1, ip, r3
   245c8:	17da      	asrs	r2, r3, #31
   245ca:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   245ce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   245d2:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   245d6:	3130      	adds	r1, #48	; 0x30
   245d8:	f800 1c01 	strb.w	r1, [r0, #-1]
   245dc:	4619      	mov	r1, r3
   245de:	2963      	cmp	r1, #99	; 0x63
   245e0:	4613      	mov	r3, r2
   245e2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   245e6:	dcec      	bgt.n	245c2 <_svfprintf_r+0x1582>
   245e8:	3330      	adds	r3, #48	; 0x30
   245ea:	b2d9      	uxtb	r1, r3
   245ec:	1e83      	subs	r3, r0, #2
   245ee:	429d      	cmp	r5, r3
   245f0:	f802 1c01 	strb.w	r1, [r2, #-1]
   245f4:	f240 828b 	bls.w	24b0e <_svfprintf_r+0x1ace>
   245f8:	4613      	mov	r3, r2
   245fa:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   245fe:	e001      	b.n	24604 <_svfprintf_r+0x15c4>
   24600:	f813 1b01 	ldrb.w	r1, [r3], #1
   24604:	f802 1b01 	strb.w	r1, [r2], #1
   24608:	429d      	cmp	r5, r3
   2460a:	d1f9      	bne.n	24600 <_svfprintf_r+0x15c0>
   2460c:	f10d 0391 	add.w	r3, sp, #145	; 0x91
   24610:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   24614:	1a1b      	subs	r3, r3, r0
   24616:	4413      	add	r3, r2
   24618:	aa1e      	add	r2, sp, #120	; 0x78
   2461a:	1a9b      	subs	r3, r3, r2
   2461c:	9314      	str	r3, [sp, #80]	; 0x50
   2461e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24620:	9a14      	ldr	r2, [sp, #80]	; 0x50
   24622:	2b01      	cmp	r3, #1
   24624:	441a      	add	r2, r3
   24626:	9205      	str	r2, [sp, #20]
   24628:	f340 8203 	ble.w	24a32 <_svfprintf_r+0x19f2>
   2462c:	9b05      	ldr	r3, [sp, #20]
   2462e:	9a10      	ldr	r2, [sp, #64]	; 0x40
   24630:	4413      	add	r3, r2
   24632:	9305      	str	r3, [sp, #20]
   24634:	f426 6380 	bic.w	r3, r6, #1024	; 0x400
   24638:	9a05      	ldr	r2, [sp, #20]
   2463a:	f443 7880 	orr.w	r8, r3, #256	; 0x100
   2463e:	2300      	movs	r3, #0
   24640:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
   24644:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   24648:	930f      	str	r3, [sp, #60]	; 0x3c
   2464a:	9202      	str	r2, [sp, #8]
   2464c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2464e:	2b00      	cmp	r3, #0
   24650:	f040 80b1 	bne.w	247b6 <_svfprintf_r+0x1776>
   24654:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24658:	9303      	str	r3, [sp, #12]
   2465a:	f7fe bed2 	b.w	23402 <_svfprintf_r+0x3c2>
   2465e:	4620      	mov	r0, r4
   24660:	f7fe face 	bl	22c00 <strlen>
   24664:	4602      	mov	r2, r0
   24666:	9005      	str	r0, [sp, #20]
   24668:	f7fe bf20 	b.w	234ac <_svfprintf_r+0x46c>
   2466c:	ee1b 1a10 	vmov	r1, s22
   24670:	aa24      	add	r2, sp, #144	; 0x90
   24672:	4658      	mov	r0, fp
   24674:	f002 f926 	bl	268c4 <__ssprint_r>
   24678:	f7fe bded 	b.w	23256 <_svfprintf_r+0x216>
   2467c:	1c59      	adds	r1, r3, #1
   2467e:	4658      	mov	r0, fp
   24680:	f7fc fd7e 	bl	21180 <_malloc_r>
   24684:	4604      	mov	r4, r0
   24686:	2800      	cmp	r0, #0
   24688:	f000 81ca 	beq.w	24a20 <_svfprintf_r+0x19e0>
   2468c:	9007      	str	r0, [sp, #28]
   2468e:	e6e0      	b.n	24452 <_svfprintf_r+0x1412>
   24690:	ee1b 1a10 	vmov	r1, s22
   24694:	aa24      	add	r2, sp, #144	; 0x90
   24696:	4658      	mov	r0, fp
   24698:	f002 f914 	bl	268c4 <__ssprint_r>
   2469c:	2800      	cmp	r0, #0
   2469e:	f47f a934 	bne.w	2390a <_svfprintf_r+0x8ca>
   246a2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   246a4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   246a8:	f7ff ba49 	b.w	23b3e <_svfprintf_r+0xafe>
   246ac:	ee1b 1a10 	vmov	r1, s22
   246b0:	aa24      	add	r2, sp, #144	; 0x90
   246b2:	4658      	mov	r0, fp
   246b4:	f002 f906 	bl	268c4 <__ssprint_r>
   246b8:	2800      	cmp	r0, #0
   246ba:	f47f a926 	bne.w	2390a <_svfprintf_r+0x8ca>
   246be:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   246c2:	991b      	ldr	r1, [sp, #108]	; 0x6c
   246c4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   246c8:	e649      	b.n	2435e <_svfprintf_r+0x131e>
   246ca:	2306      	movs	r3, #6
   246cc:	9303      	str	r3, [sp, #12]
   246ce:	f7ff bb83 	b.w	23dd8 <_svfprintf_r+0xd98>
   246d2:	9b03      	ldr	r3, [sp, #12]
   246d4:	2102      	movs	r1, #2
   246d6:	1c5a      	adds	r2, r3, #1
   246d8:	e72b      	b.n	24532 <_svfprintf_r+0x14f2>
   246da:	9a03      	ldr	r2, [sp, #12]
   246dc:	2103      	movs	r1, #3
   246de:	e728      	b.n	24532 <_svfprintf_r+0x14f2>
   246e0:	a81b      	add	r0, sp, #108	; 0x6c
   246e2:	eeb0 0b4a 	vmov.f64	d0, d10
   246e6:	f001 f973 	bl	259d0 <frexp>
   246ea:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   246ee:	ee20 0b07 	vmul.f64	d0, d0, d7
   246f2:	eeb5 0b40 	vcmp.f64	d0, #0.0
   246f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   246fa:	d101      	bne.n	24700 <_svfprintf_r+0x16c0>
   246fc:	2301      	movs	r3, #1
   246fe:	931b      	str	r3, [sp, #108]	; 0x6c
   24700:	48b3      	ldr	r0, [pc, #716]	; (249d0 <_svfprintf_r+0x1990>)
   24702:	9b03      	ldr	r3, [sp, #12]
   24704:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
   24708:	3b01      	subs	r3, #1
   2470a:	4622      	mov	r2, r4
   2470c:	e004      	b.n	24718 <_svfprintf_r+0x16d8>
   2470e:	eeb5 0b40 	vcmp.f64	d0, #0.0
   24712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24716:	d013      	beq.n	24740 <_svfprintf_r+0x1700>
   24718:	ee20 0b05 	vmul.f64	d0, d0, d5
   2471c:	eefd 7bc0 	vcvt.s32.f64	s15, d0
   24720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   24724:	ee17 1a90 	vmov	r1, s15
   24728:	5c41      	ldrb	r1, [r0, r1]
   2472a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
   2472e:	4694      	mov	ip, r2
   24730:	ee30 0b46 	vsub.f64	d0, d0, d6
   24734:	f802 1b01 	strb.w	r1, [r2], #1
   24738:	4619      	mov	r1, r3
   2473a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2473e:	d1e6      	bne.n	2470e <_svfprintf_r+0x16ce>
   24740:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   24744:	eeb4 0bc6 	vcmpe.f64	d0, d6
   24748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2474c:	f300 8148 	bgt.w	249e0 <_svfprintf_r+0x19a0>
   24750:	eeb4 0b46 	vcmp.f64	d0, d6
   24754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24758:	d104      	bne.n	24764 <_svfprintf_r+0x1724>
   2475a:	ee17 3a90 	vmov	r3, s15
   2475e:	07db      	lsls	r3, r3, #31
   24760:	f100 813e 	bmi.w	249e0 <_svfprintf_r+0x19a0>
   24764:	2900      	cmp	r1, #0
   24766:	db06      	blt.n	24776 <_svfprintf_r+0x1736>
   24768:	1c4b      	adds	r3, r1, #1
   2476a:	4413      	add	r3, r2
   2476c:	2130      	movs	r1, #48	; 0x30
   2476e:	f802 1b01 	strb.w	r1, [r2], #1
   24772:	4293      	cmp	r3, r2
   24774:	d1fb      	bne.n	2476e <_svfprintf_r+0x172e>
   24776:	1b13      	subs	r3, r2, r4
   24778:	930e      	str	r3, [sp, #56]	; 0x38
   2477a:	e6fc      	b.n	24576 <_svfprintf_r+0x1536>
   2477c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2477e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24780:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   24784:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   24788:	9613      	str	r6, [sp, #76]	; 0x4c
   2478a:	18e3      	adds	r3, r4, r3
   2478c:	429d      	cmp	r5, r3
   2478e:	4629      	mov	r1, r5
   24790:	bf28      	it	cs
   24792:	4619      	movcs	r1, r3
   24794:	4682      	mov	sl, r0
   24796:	9105      	str	r1, [sp, #20]
   24798:	f7ff b9d8 	b.w	23b4c <_svfprintf_r+0xb0c>
   2479c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   2479e:	930c      	str	r3, [sp, #48]	; 0x30
   247a0:	1cda      	adds	r2, r3, #3
   247a2:	db02      	blt.n	247aa <_svfprintf_r+0x176a>
   247a4:	9a03      	ldr	r2, [sp, #12]
   247a6:	4293      	cmp	r3, r2
   247a8:	dd0c      	ble.n	247c4 <_svfprintf_r+0x1784>
   247aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   247ac:	3b02      	subs	r3, #2
   247ae:	930b      	str	r3, [sp, #44]	; 0x2c
   247b0:	f023 0520 	bic.w	r5, r3, #32
   247b4:	e6e7      	b.n	24586 <_svfprintf_r+0x1546>
   247b6:	212d      	movs	r1, #45	; 0x2d
   247b8:	2300      	movs	r3, #0
   247ba:	f88d 1067 	strb.w	r1, [sp, #103]	; 0x67
   247be:	9303      	str	r3, [sp, #12]
   247c0:	f7fe be22 	b.w	23408 <_svfprintf_r+0x3c8>
   247c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   247c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   247c8:	4293      	cmp	r3, r2
   247ca:	f2c0 80bd 	blt.w	24948 <_svfprintf_r+0x1908>
   247ce:	07f0      	lsls	r0, r6, #31
   247d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   247d2:	f140 8132 	bpl.w	24a3a <_svfprintf_r+0x19fa>
   247d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
   247d8:	4413      	add	r3, r2
   247da:	9305      	str	r3, [sp, #20]
   247dc:	0571      	lsls	r1, r6, #21
   247de:	d503      	bpl.n	247e8 <_svfprintf_r+0x17a8>
   247e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   247e2:	2b00      	cmp	r3, #0
   247e4:	f300 8135 	bgt.w	24a52 <_svfprintf_r+0x1a12>
   247e8:	9b05      	ldr	r3, [sp, #20]
   247ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   247ee:	9302      	str	r3, [sp, #8]
   247f0:	2367      	movs	r3, #103	; 0x67
   247f2:	930b      	str	r3, [sp, #44]	; 0x2c
   247f4:	2300      	movs	r3, #0
   247f6:	930f      	str	r3, [sp, #60]	; 0x3c
   247f8:	930d      	str	r3, [sp, #52]	; 0x34
   247fa:	e727      	b.n	2464c <_svfprintf_r+0x160c>
   247fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   247fe:	4283      	cmp	r3, r0
   24800:	f4bf aeb7 	bcs.w	24572 <_svfprintf_r+0x1532>
   24804:	2130      	movs	r1, #48	; 0x30
   24806:	1c5a      	adds	r2, r3, #1
   24808:	9222      	str	r2, [sp, #136]	; 0x88
   2480a:	7019      	strb	r1, [r3, #0]
   2480c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2480e:	4298      	cmp	r0, r3
   24810:	d8f9      	bhi.n	24806 <_svfprintf_r+0x17c6>
   24812:	e6ae      	b.n	24572 <_svfprintf_r+0x1532>
   24814:	07f3      	lsls	r3, r6, #31
   24816:	f100 80a7 	bmi.w	24968 <_svfprintf_r+0x1928>
   2481a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   2481c:	e6a9      	b.n	24572 <_svfprintf_r+0x1532>
   2481e:	aa24      	add	r2, sp, #144	; 0x90
   24820:	4658      	mov	r0, fp
   24822:	9105      	str	r1, [sp, #20]
   24824:	f002 f84e 	bl	268c4 <__ssprint_r>
   24828:	2800      	cmp	r0, #0
   2482a:	f47f a86e 	bne.w	2390a <_svfprintf_r+0x8ca>
   2482e:	f896 c000 	ldrb.w	ip, [r6]
   24832:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24834:	9905      	ldr	r1, [sp, #20]
   24836:	a827      	add	r0, sp, #156	; 0x9c
   24838:	4465      	add	r5, ip
   2483a:	f7ff bbec 	b.w	24016 <_svfprintf_r+0xfd6>
   2483e:	ee1b 1a10 	vmov	r1, s22
   24842:	aa24      	add	r2, sp, #144	; 0x90
   24844:	4658      	mov	r0, fp
   24846:	f002 f83d 	bl	268c4 <__ssprint_r>
   2484a:	2800      	cmp	r0, #0
   2484c:	f47f a85d 	bne.w	2390a <_svfprintf_r+0x8ca>
   24850:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24852:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24856:	f7ff b96b 	b.w	23b30 <_svfprintf_r+0xaf0>
   2485a:	2378      	movs	r3, #120	; 0x78
   2485c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
   24860:	2330      	movs	r3, #48	; 0x30
   24862:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
   24866:	9b03      	ldr	r3, [sp, #12]
   24868:	2b63      	cmp	r3, #99	; 0x63
   2486a:	f048 0602 	orr.w	r6, r8, #2
   2486e:	f300 80a6 	bgt.w	249be <_svfprintf_r+0x197e>
   24872:	2300      	movs	r3, #0
   24874:	9307      	str	r3, [sp, #28]
   24876:	ac37      	add	r4, sp, #220	; 0xdc
   24878:	ee18 3a90 	vmov	r3, s17
   2487c:	2b00      	cmp	r3, #0
   2487e:	f448 7881 	orr.w	r8, r8, #258	; 0x102
   24882:	db2b      	blt.n	248dc <_svfprintf_r+0x189c>
   24884:	eeb0 ab48 	vmov.f64	d10, d8
   24888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2488a:	f023 0520 	bic.w	r5, r3, #32
   2488e:	2300      	movs	r3, #0
   24890:	9309      	str	r3, [sp, #36]	; 0x24
   24892:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24894:	2b61      	cmp	r3, #97	; 0x61
   24896:	f47f aaad 	bne.w	23df4 <_svfprintf_r+0xdb4>
   2489a:	eeb0 0b4a 	vmov.f64	d0, d10
   2489e:	a81b      	add	r0, sp, #108	; 0x6c
   248a0:	f001 f896 	bl	259d0 <frexp>
   248a4:	eeb4 7b00 	vmov.f64	d7, #64	; 0x3e000000  0.125
   248a8:	ee20 0b07 	vmul.f64	d0, d0, d7
   248ac:	eeb5 0b40 	vcmp.f64	d0, #0.0
   248b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   248b4:	d101      	bne.n	248ba <_svfprintf_r+0x187a>
   248b6:	2301      	movs	r3, #1
   248b8:	931b      	str	r3, [sp, #108]	; 0x6c
   248ba:	4846      	ldr	r0, [pc, #280]	; (249d4 <_svfprintf_r+0x1994>)
   248bc:	e721      	b.n	24702 <_svfprintf_r+0x16c2>
   248be:	ee1b 1a10 	vmov	r1, s22
   248c2:	aa24      	add	r2, sp, #144	; 0x90
   248c4:	4658      	mov	r0, fp
   248c6:	f001 fffd 	bl	268c4 <__ssprint_r>
   248ca:	2800      	cmp	r0, #0
   248cc:	f47f a81d 	bne.w	2390a <_svfprintf_r+0x8ca>
   248d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   248d2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   248d4:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   248d8:	f7ff b94e 	b.w	23b78 <_svfprintf_r+0xb38>
   248dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   248de:	f023 0520 	bic.w	r5, r3, #32
   248e2:	232d      	movs	r3, #45	; 0x2d
   248e4:	9309      	str	r3, [sp, #36]	; 0x24
   248e6:	eeb1 ab48 	vneg.f64	d10, d8
   248ea:	e7d2      	b.n	24892 <_svfprintf_r+0x1852>
   248ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   248ee:	920c      	str	r2, [sp, #48]	; 0x30
   248f0:	2a00      	cmp	r2, #0
   248f2:	f006 0301 	and.w	r3, r6, #1
   248f6:	f340 810d 	ble.w	24b14 <_svfprintf_r+0x1ad4>
   248fa:	9903      	ldr	r1, [sp, #12]
   248fc:	430b      	orrs	r3, r1
   248fe:	f040 80cf 	bne.w	24aa0 <_svfprintf_r+0x1a60>
   24902:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24904:	9305      	str	r3, [sp, #20]
   24906:	2366      	movs	r3, #102	; 0x66
   24908:	930b      	str	r3, [sp, #44]	; 0x2c
   2490a:	0572      	lsls	r2, r6, #21
   2490c:	f100 80a3 	bmi.w	24a56 <_svfprintf_r+0x1a16>
   24910:	9b05      	ldr	r3, [sp, #20]
   24912:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24916:	9302      	str	r3, [sp, #8]
   24918:	e76c      	b.n	247f4 <_svfprintf_r+0x17b4>
   2491a:	ee1b 1a10 	vmov	r1, s22
   2491e:	aa24      	add	r2, sp, #144	; 0x90
   24920:	4658      	mov	r0, fp
   24922:	f001 ffcf 	bl	268c4 <__ssprint_r>
   24926:	2800      	cmp	r0, #0
   24928:	f47e afef 	bne.w	2390a <_svfprintf_r+0x8ca>
   2492c:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
   2492e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24930:	9a26      	ldr	r2, [sp, #152]	; 0x98
   24932:	1b1c      	subs	r4, r3, r4
   24934:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   24938:	f7ff b936 	b.w	23ba8 <_svfprintf_r+0xb68>
   2493c:	2358      	movs	r3, #88	; 0x58
   2493e:	e78d      	b.n	2485c <_svfprintf_r+0x181c>
   24940:	2200      	movs	r2, #0
   24942:	9203      	str	r2, [sp, #12]
   24944:	f7fe bbda 	b.w	230fc <_svfprintf_r+0xbc>
   24948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2494a:	9a10      	ldr	r2, [sp, #64]	; 0x40
   2494c:	189a      	adds	r2, r3, r2
   2494e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   24950:	9205      	str	r2, [sp, #20]
   24952:	2b00      	cmp	r3, #0
   24954:	f340 80ab 	ble.w	24aae <_svfprintf_r+0x1a6e>
   24958:	2367      	movs	r3, #103	; 0x67
   2495a:	930b      	str	r3, [sp, #44]	; 0x2c
   2495c:	e7d5      	b.n	2490a <_svfprintf_r+0x18ca>
   2495e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24960:	320f      	adds	r2, #15
   24962:	b2d2      	uxtb	r2, r2
   24964:	2101      	movs	r1, #1
   24966:	e618      	b.n	2459a <_svfprintf_r+0x155a>
   24968:	18a0      	adds	r0, r4, r2
   2496a:	e5fb      	b.n	24564 <_svfprintf_r+0x1524>
   2496c:	2900      	cmp	r1, #0
   2496e:	f040 80a8 	bne.w	24ac2 <_svfprintf_r+0x1a82>
   24972:	2230      	movs	r2, #48	; 0x30
   24974:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
   24978:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
   2497c:	3330      	adds	r3, #48	; 0x30
   2497e:	f802 3b01 	strb.w	r3, [r2], #1
   24982:	ab1e      	add	r3, sp, #120	; 0x78
   24984:	1ad3      	subs	r3, r2, r3
   24986:	9314      	str	r3, [sp, #80]	; 0x50
   24988:	e649      	b.n	2461e <_svfprintf_r+0x15de>
   2498a:	3301      	adds	r3, #1
   2498c:	4912      	ldr	r1, [pc, #72]	; (249d8 <_svfprintf_r+0x1998>)
   2498e:	f8ca 5004 	str.w	r5, [sl, #4]
   24992:	442a      	add	r2, r5
   24994:	2b07      	cmp	r3, #7
   24996:	e9cd 3225 	strd	r3, r2, [sp, #148]	; 0x94
   2499a:	f8ca 1000 	str.w	r1, [sl]
   2499e:	f77f ac33 	ble.w	24208 <_svfprintf_r+0x11c8>
   249a2:	ee1b 1a10 	vmov	r1, s22
   249a6:	aa24      	add	r2, sp, #144	; 0x90
   249a8:	4658      	mov	r0, fp
   249aa:	f001 ff8b 	bl	268c4 <__ssprint_r>
   249ae:	2800      	cmp	r0, #0
   249b0:	f47e afab 	bne.w	2390a <_svfprintf_r+0x8ca>
   249b4:	e9dd 3225 	ldrd	r3, r2, [sp, #148]	; 0x94
   249b8:	f10d 0a9c 	add.w	sl, sp, #156	; 0x9c
   249bc:	e426      	b.n	2420c <_svfprintf_r+0x11cc>
   249be:	1c59      	adds	r1, r3, #1
   249c0:	4658      	mov	r0, fp
   249c2:	f7fc fbdd 	bl	21180 <_malloc_r>
   249c6:	4604      	mov	r4, r0
   249c8:	b350      	cbz	r0, 24a20 <_svfprintf_r+0x19e0>
   249ca:	9007      	str	r0, [sp, #28]
   249cc:	e754      	b.n	24878 <_svfprintf_r+0x1838>
   249ce:	bf00      	nop
   249d0:	200019c8 	.word	0x200019c8
   249d4:	200019b4 	.word	0x200019b4
   249d8:	20003144 	.word	0x20003144
   249dc:	66666667 	.word	0x66666667
   249e0:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
   249e4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
   249e8:	f890 c00f 	ldrb.w	ip, [r0, #15]
   249ec:	4561      	cmp	r1, ip
   249ee:	4613      	mov	r3, r2
   249f0:	d10a      	bne.n	24a08 <_svfprintf_r+0x19c8>
   249f2:	f04f 0e30 	mov.w	lr, #48	; 0x30
   249f6:	f803 ec01 	strb.w	lr, [r3, #-1]
   249fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   249fc:	1e59      	subs	r1, r3, #1
   249fe:	9122      	str	r1, [sp, #136]	; 0x88
   24a00:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   24a04:	458c      	cmp	ip, r1
   24a06:	d0f6      	beq.n	249f6 <_svfprintf_r+0x19b6>
   24a08:	2939      	cmp	r1, #57	; 0x39
   24a0a:	bf16      	itet	ne
   24a0c:	3101      	addne	r1, #1
   24a0e:	7a81      	ldrbeq	r1, [r0, #10]
   24a10:	b2c9      	uxtbne	r1, r1
   24a12:	f803 1c01 	strb.w	r1, [r3, #-1]
   24a16:	e6ae      	b.n	24776 <_svfprintf_r+0x1736>
   24a18:	2300      	movs	r3, #0
   24a1a:	4690      	mov	r8, r2
   24a1c:	9307      	str	r3, [sp, #28]
   24a1e:	e760      	b.n	248e2 <_svfprintf_r+0x18a2>
   24a20:	ee1b 2a10 	vmov	r2, s22
   24a24:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   24a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24a2c:	8193      	strh	r3, [r2, #12]
   24a2e:	f7fe bc16 	b.w	2325e <_svfprintf_r+0x21e>
   24a32:	07f5      	lsls	r5, r6, #31
   24a34:	f57f adfe 	bpl.w	24634 <_svfprintf_r+0x15f4>
   24a38:	e5f8      	b.n	2462c <_svfprintf_r+0x15ec>
   24a3a:	9305      	str	r3, [sp, #20]
   24a3c:	e6ce      	b.n	247dc <_svfprintf_r+0x179c>
   24a3e:	eeb5 ab40 	vcmp.f64	d10, #0.0
   24a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   24a46:	f43f ad8b 	beq.w	24560 <_svfprintf_r+0x1520>
   24a4a:	f1c2 0201 	rsb	r2, r2, #1
   24a4e:	921b      	str	r2, [sp, #108]	; 0x6c
   24a50:	e587      	b.n	24562 <_svfprintf_r+0x1522>
   24a52:	2367      	movs	r3, #103	; 0x67
   24a54:	930b      	str	r3, [sp, #44]	; 0x2c
   24a56:	9913      	ldr	r1, [sp, #76]	; 0x4c
   24a58:	780b      	ldrb	r3, [r1, #0]
   24a5a:	2bff      	cmp	r3, #255	; 0xff
   24a5c:	d079      	beq.n	24b52 <_svfprintf_r+0x1b12>
   24a5e:	2500      	movs	r5, #0
   24a60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24a62:	4628      	mov	r0, r5
   24a64:	e003      	b.n	24a6e <_svfprintf_r+0x1a2e>
   24a66:	3001      	adds	r0, #1
   24a68:	3101      	adds	r1, #1
   24a6a:	2bff      	cmp	r3, #255	; 0xff
   24a6c:	d008      	beq.n	24a80 <_svfprintf_r+0x1a40>
   24a6e:	4293      	cmp	r3, r2
   24a70:	da06      	bge.n	24a80 <_svfprintf_r+0x1a40>
   24a72:	1ad2      	subs	r2, r2, r3
   24a74:	784b      	ldrb	r3, [r1, #1]
   24a76:	2b00      	cmp	r3, #0
   24a78:	d1f5      	bne.n	24a66 <_svfprintf_r+0x1a26>
   24a7a:	780b      	ldrb	r3, [r1, #0]
   24a7c:	3501      	adds	r5, #1
   24a7e:	e7f4      	b.n	24a6a <_svfprintf_r+0x1a2a>
   24a80:	920c      	str	r2, [sp, #48]	; 0x30
   24a82:	9113      	str	r1, [sp, #76]	; 0x4c
   24a84:	900d      	str	r0, [sp, #52]	; 0x34
   24a86:	950f      	str	r5, [sp, #60]	; 0x3c
   24a88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   24a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24a8c:	9916      	ldr	r1, [sp, #88]	; 0x58
   24a8e:	4413      	add	r3, r2
   24a90:	9a05      	ldr	r2, [sp, #20]
   24a92:	fb01 2303 	mla	r3, r1, r3, r2
   24a96:	9305      	str	r3, [sp, #20]
   24a98:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   24a9c:	9302      	str	r3, [sp, #8]
   24a9e:	e5d5      	b.n	2464c <_svfprintf_r+0x160c>
   24aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24aa2:	18d3      	adds	r3, r2, r3
   24aa4:	4419      	add	r1, r3
   24aa6:	2366      	movs	r3, #102	; 0x66
   24aa8:	9105      	str	r1, [sp, #20]
   24aaa:	930b      	str	r3, [sp, #44]	; 0x2c
   24aac:	e72d      	b.n	2490a <_svfprintf_r+0x18ca>
   24aae:	f1c3 0301 	rsb	r3, r3, #1
   24ab2:	441a      	add	r2, r3
   24ab4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   24ab8:	9302      	str	r3, [sp, #8]
   24aba:	2367      	movs	r3, #103	; 0x67
   24abc:	9205      	str	r2, [sp, #20]
   24abe:	930b      	str	r3, [sp, #44]	; 0x2c
   24ac0:	e698      	b.n	247f4 <_svfprintf_r+0x17b4>
   24ac2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
   24ac6:	e759      	b.n	2497c <_svfprintf_r+0x193c>
   24ac8:	9b03      	ldr	r3, [sp, #12]
   24aca:	f8dd 9008 	ldr.w	r9, [sp, #8]
   24ace:	f8dd 801c 	ldr.w	r8, [sp, #28]
   24ad2:	9305      	str	r3, [sp, #20]
   24ad4:	e4b4      	b.n	24440 <_svfprintf_r+0x1400>
   24ad6:	ee18 3a90 	vmov	r3, s17
   24ada:	2b00      	cmp	r3, #0
   24adc:	bfb4      	ite	lt
   24ade:	212d      	movlt	r1, #45	; 0x2d
   24ae0:	f89d 1067 	ldrbge.w	r1, [sp, #103]	; 0x67
   24ae4:	4c25      	ldr	r4, [pc, #148]	; (24b7c <_svfprintf_r+0x1b3c>)
   24ae6:	4b26      	ldr	r3, [pc, #152]	; (24b80 <_svfprintf_r+0x1b40>)
   24ae8:	bfb8      	it	lt
   24aea:	f88d 1067 	strblt.w	r1, [sp, #103]	; 0x67
   24aee:	f028 0880 	bic.w	r8, r8, #128	; 0x80
   24af2:	f7fe bc79 	b.w	233e8 <_svfprintf_r+0x3a8>
   24af6:	9b03      	ldr	r3, [sp, #12]
   24af8:	9302      	str	r3, [sp, #8]
   24afa:	9305      	str	r3, [sp, #20]
   24afc:	2373      	movs	r3, #115	; 0x73
   24afe:	f89d 1067 	ldrb.w	r1, [sp, #103]	; 0x67
   24b02:	9003      	str	r0, [sp, #12]
   24b04:	900f      	str	r0, [sp, #60]	; 0x3c
   24b06:	900d      	str	r0, [sp, #52]	; 0x34
   24b08:	930b      	str	r3, [sp, #44]	; 0x2c
   24b0a:	f7fe bc7a 	b.w	23402 <_svfprintf_r+0x3c2>
   24b0e:	2302      	movs	r3, #2
   24b10:	9314      	str	r3, [sp, #80]	; 0x50
   24b12:	e584      	b.n	2461e <_svfprintf_r+0x15de>
   24b14:	9a03      	ldr	r2, [sp, #12]
   24b16:	4313      	orrs	r3, r2
   24b18:	d105      	bne.n	24b26 <_svfprintf_r+0x1ae6>
   24b1a:	2301      	movs	r3, #1
   24b1c:	2266      	movs	r2, #102	; 0x66
   24b1e:	9302      	str	r3, [sp, #8]
   24b20:	920b      	str	r2, [sp, #44]	; 0x2c
   24b22:	9305      	str	r3, [sp, #20]
   24b24:	e666      	b.n	247f4 <_svfprintf_r+0x17b4>
   24b26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   24b28:	3301      	adds	r3, #1
   24b2a:	441a      	add	r2, r3
   24b2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   24b30:	9302      	str	r3, [sp, #8]
   24b32:	2366      	movs	r3, #102	; 0x66
   24b34:	9205      	str	r2, [sp, #20]
   24b36:	930b      	str	r3, [sp, #44]	; 0x2c
   24b38:	e65c      	b.n	247f4 <_svfprintf_r+0x17b4>
   24b3a:	9a08      	ldr	r2, [sp, #32]
   24b3c:	f899 3001 	ldrb.w	r3, [r9, #1]
   24b40:	4689      	mov	r9, r1
   24b42:	f852 1b04 	ldr.w	r1, [r2], #4
   24b46:	9208      	str	r2, [sp, #32]
   24b48:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   24b4c:	9103      	str	r1, [sp, #12]
   24b4e:	f7fe bad3 	b.w	230f8 <_svfprintf_r+0xb8>
   24b52:	2300      	movs	r3, #0
   24b54:	930f      	str	r3, [sp, #60]	; 0x3c
   24b56:	930d      	str	r3, [sp, #52]	; 0x34
   24b58:	e796      	b.n	24a88 <_svfprintf_r+0x1a48>
   24b5a:	230c      	movs	r3, #12
   24b5c:	f8cb 3000 	str.w	r3, [fp]
   24b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24b64:	9304      	str	r3, [sp, #16]
   24b66:	f7fe bb81 	b.w	2326c <_svfprintf_r+0x22c>
   24b6a:	ee1b 2a10 	vmov	r2, s22
   24b6e:	8993      	ldrh	r3, [r2, #12]
   24b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24b74:	8193      	strh	r3, [r2, #12]
   24b76:	f7fe bec8 	b.w	2390a <_svfprintf_r+0x8ca>
   24b7a:	bf00      	nop
   24b7c:	200019ac 	.word	0x200019ac
   24b80:	200019b0 	.word	0x200019b0

00024b84 <__smakebuf_r>:
   24b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24b88:	898b      	ldrh	r3, [r1, #12]
   24b8a:	460c      	mov	r4, r1
   24b8c:	0799      	lsls	r1, r3, #30
   24b8e:	b096      	sub	sp, #88	; 0x58
   24b90:	d508      	bpl.n	24ba4 <__smakebuf_r+0x20>
   24b92:	f104 0343 	add.w	r3, r4, #67	; 0x43
   24b96:	2201      	movs	r2, #1
   24b98:	e9c4 3204 	strd	r3, r2, [r4, #16]
   24b9c:	6023      	str	r3, [r4, #0]
   24b9e:	b016      	add	sp, #88	; 0x58
   24ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24ba8:	2900      	cmp	r1, #0
   24baa:	4606      	mov	r6, r0
   24bac:	db25      	blt.n	24bfa <__smakebuf_r+0x76>
   24bae:	466a      	mov	r2, sp
   24bb0:	f000 fe34 	bl	2581c <_fstat_r>
   24bb4:	2800      	cmp	r0, #0
   24bb6:	db1f      	blt.n	24bf8 <__smakebuf_r+0x74>
   24bb8:	9d01      	ldr	r5, [sp, #4]
   24bba:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   24bbe:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   24bc2:	fab5 f585 	clz	r5, r5
   24bc6:	f44f 6880 	mov.w	r8, #1024	; 0x400
   24bca:	096d      	lsrs	r5, r5, #5
   24bcc:	f44f 6700 	mov.w	r7, #2048	; 0x800
   24bd0:	4641      	mov	r1, r8
   24bd2:	4630      	mov	r0, r6
   24bd4:	f7fc fad4 	bl	21180 <_malloc_r>
   24bd8:	b1e0      	cbz	r0, 24c14 <__smakebuf_r+0x90>
   24bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24bde:	f8c4 8014 	str.w	r8, [r4, #20]
   24be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24be6:	6020      	str	r0, [r4, #0]
   24be8:	6120      	str	r0, [r4, #16]
   24bea:	81a3      	strh	r3, [r4, #12]
   24bec:	bb35      	cbnz	r5, 24c3c <__smakebuf_r+0xb8>
   24bee:	433b      	orrs	r3, r7
   24bf0:	81a3      	strh	r3, [r4, #12]
   24bf2:	b016      	add	sp, #88	; 0x58
   24bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24bf8:	89a3      	ldrh	r3, [r4, #12]
   24bfa:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   24bfe:	d019      	beq.n	24c34 <__smakebuf_r+0xb0>
   24c00:	f04f 0840 	mov.w	r8, #64	; 0x40
   24c04:	2500      	movs	r5, #0
   24c06:	4641      	mov	r1, r8
   24c08:	4630      	mov	r0, r6
   24c0a:	462f      	mov	r7, r5
   24c0c:	f7fc fab8 	bl	21180 <_malloc_r>
   24c10:	2800      	cmp	r0, #0
   24c12:	d1e2      	bne.n	24bda <__smakebuf_r+0x56>
   24c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24c18:	059a      	lsls	r2, r3, #22
   24c1a:	d4c0      	bmi.n	24b9e <__smakebuf_r+0x1a>
   24c1c:	f023 0303 	bic.w	r3, r3, #3
   24c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
   24c24:	f043 0302 	orr.w	r3, r3, #2
   24c28:	2101      	movs	r1, #1
   24c2a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   24c2e:	81a3      	strh	r3, [r4, #12]
   24c30:	6022      	str	r2, [r4, #0]
   24c32:	e7b4      	b.n	24b9e <__smakebuf_r+0x1a>
   24c34:	f44f 6880 	mov.w	r8, #1024	; 0x400
   24c38:	462f      	mov	r7, r5
   24c3a:	e7c9      	b.n	24bd0 <__smakebuf_r+0x4c>
   24c3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24c40:	4630      	mov	r0, r6
   24c42:	f000 fe01 	bl	25848 <_isatty_r>
   24c46:	b910      	cbnz	r0, 24c4e <__smakebuf_r+0xca>
   24c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24c4c:	e7cf      	b.n	24bee <__smakebuf_r+0x6a>
   24c4e:	89a3      	ldrh	r3, [r4, #12]
   24c50:	f023 0303 	bic.w	r3, r3, #3
   24c54:	f043 0301 	orr.w	r3, r3, #1
   24c58:	b21b      	sxth	r3, r3
   24c5a:	e7c8      	b.n	24bee <__smakebuf_r+0x6a>

00024c5c <_putc_r>:
   24c5c:	b570      	push	{r4, r5, r6, lr}
   24c5e:	460e      	mov	r6, r1
   24c60:	4614      	mov	r4, r2
   24c62:	4605      	mov	r5, r0
   24c64:	b110      	cbz	r0, 24c6c <_putc_r+0x10>
   24c66:	6b43      	ldr	r3, [r0, #52]	; 0x34
   24c68:	2b00      	cmp	r3, #0
   24c6a:	d02f      	beq.n	24ccc <_putc_r+0x70>
   24c6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24c6e:	07d8      	lsls	r0, r3, #31
   24c70:	d402      	bmi.n	24c78 <_putc_r+0x1c>
   24c72:	89a3      	ldrh	r3, [r4, #12]
   24c74:	0599      	lsls	r1, r3, #22
   24c76:	d520      	bpl.n	24cba <_putc_r+0x5e>
   24c78:	68a3      	ldr	r3, [r4, #8]
   24c7a:	3b01      	subs	r3, #1
   24c7c:	2b00      	cmp	r3, #0
   24c7e:	60a3      	str	r3, [r4, #8]
   24c80:	da19      	bge.n	24cb6 <_putc_r+0x5a>
   24c82:	69a2      	ldr	r2, [r4, #24]
   24c84:	4293      	cmp	r3, r2
   24c86:	db0f      	blt.n	24ca8 <_putc_r+0x4c>
   24c88:	b2f0      	uxtb	r0, r6
   24c8a:	280a      	cmp	r0, #10
   24c8c:	d00c      	beq.n	24ca8 <_putc_r+0x4c>
   24c8e:	6823      	ldr	r3, [r4, #0]
   24c90:	1c5a      	adds	r2, r3, #1
   24c92:	6022      	str	r2, [r4, #0]
   24c94:	4605      	mov	r5, r0
   24c96:	701e      	strb	r6, [r3, #0]
   24c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24c9a:	07da      	lsls	r2, r3, #31
   24c9c:	d402      	bmi.n	24ca4 <_putc_r+0x48>
   24c9e:	89a3      	ldrh	r3, [r4, #12]
   24ca0:	059b      	lsls	r3, r3, #22
   24ca2:	d50e      	bpl.n	24cc2 <_putc_r+0x66>
   24ca4:	4628      	mov	r0, r5
   24ca6:	bd70      	pop	{r4, r5, r6, pc}
   24ca8:	4628      	mov	r0, r5
   24caa:	4622      	mov	r2, r4
   24cac:	4631      	mov	r1, r6
   24cae:	f000 fd47 	bl	25740 <__swbuf_r>
   24cb2:	4605      	mov	r5, r0
   24cb4:	e7f0      	b.n	24c98 <_putc_r+0x3c>
   24cb6:	b2f0      	uxtb	r0, r6
   24cb8:	e7e9      	b.n	24c8e <_putc_r+0x32>
   24cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24cbc:	f7fd ff44 	bl	22b48 <__retarget_lock_acquire_recursive>
   24cc0:	e7da      	b.n	24c78 <_putc_r+0x1c>
   24cc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24cc4:	f7fd ff42 	bl	22b4c <__retarget_lock_release_recursive>
   24cc8:	4628      	mov	r0, r5
   24cca:	bd70      	pop	{r4, r5, r6, pc}
   24ccc:	f7fd f812 	bl	21cf4 <__sinit>
   24cd0:	e7cc      	b.n	24c6c <_putc_r+0x10>
   24cd2:	bf00      	nop

00024cd4 <_Balloc>:
   24cd4:	6c43      	ldr	r3, [r0, #68]	; 0x44
   24cd6:	b570      	push	{r4, r5, r6, lr}
   24cd8:	4605      	mov	r5, r0
   24cda:	460c      	mov	r4, r1
   24cdc:	b14b      	cbz	r3, 24cf2 <_Balloc+0x1e>
   24cde:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   24ce2:	b180      	cbz	r0, 24d06 <_Balloc+0x32>
   24ce4:	6802      	ldr	r2, [r0, #0]
   24ce6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   24cea:	2300      	movs	r3, #0
   24cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
   24cf0:	bd70      	pop	{r4, r5, r6, pc}
   24cf2:	2221      	movs	r2, #33	; 0x21
   24cf4:	2104      	movs	r1, #4
   24cf6:	f7fc f9e1 	bl	210bc <_calloc_r>
   24cfa:	4603      	mov	r3, r0
   24cfc:	6468      	str	r0, [r5, #68]	; 0x44
   24cfe:	2800      	cmp	r0, #0
   24d00:	d1ed      	bne.n	24cde <_Balloc+0xa>
   24d02:	2000      	movs	r0, #0
   24d04:	bd70      	pop	{r4, r5, r6, pc}
   24d06:	2101      	movs	r1, #1
   24d08:	fa01 f604 	lsl.w	r6, r1, r4
   24d0c:	1d72      	adds	r2, r6, #5
   24d0e:	0092      	lsls	r2, r2, #2
   24d10:	4628      	mov	r0, r5
   24d12:	f7fc f9d3 	bl	210bc <_calloc_r>
   24d16:	2800      	cmp	r0, #0
   24d18:	d0f3      	beq.n	24d02 <_Balloc+0x2e>
   24d1a:	e9c0 4601 	strd	r4, r6, [r0, #4]
   24d1e:	e7e4      	b.n	24cea <_Balloc+0x16>

00024d20 <_Bfree>:
   24d20:	b131      	cbz	r1, 24d30 <_Bfree+0x10>
   24d22:	6c43      	ldr	r3, [r0, #68]	; 0x44
   24d24:	684a      	ldr	r2, [r1, #4]
   24d26:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   24d2a:	6008      	str	r0, [r1, #0]
   24d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   24d30:	4770      	bx	lr
   24d32:	bf00      	nop

00024d34 <__multadd>:
   24d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d38:	690e      	ldr	r6, [r1, #16]
   24d3a:	4680      	mov	r8, r0
   24d3c:	460f      	mov	r7, r1
   24d3e:	461d      	mov	r5, r3
   24d40:	f101 0e14 	add.w	lr, r1, #20
   24d44:	2000      	movs	r0, #0
   24d46:	f8de 1000 	ldr.w	r1, [lr]
   24d4a:	b28c      	uxth	r4, r1
   24d4c:	fb02 5304 	mla	r3, r2, r4, r5
   24d50:	0c09      	lsrs	r1, r1, #16
   24d52:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   24d56:	fb02 cc01 	mla	ip, r2, r1, ip
   24d5a:	3001      	adds	r0, #1
   24d5c:	b29c      	uxth	r4, r3
   24d5e:	eb04 440c 	add.w	r4, r4, ip, lsl #16
   24d62:	4286      	cmp	r6, r0
   24d64:	f84e 4b04 	str.w	r4, [lr], #4
   24d68:	ea4f 451c 	mov.w	r5, ip, lsr #16
   24d6c:	dceb      	bgt.n	24d46 <__multadd+0x12>
   24d6e:	b13d      	cbz	r5, 24d80 <__multadd+0x4c>
   24d70:	68bb      	ldr	r3, [r7, #8]
   24d72:	42b3      	cmp	r3, r6
   24d74:	dd07      	ble.n	24d86 <__multadd+0x52>
   24d76:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   24d7a:	3601      	adds	r6, #1
   24d7c:	615d      	str	r5, [r3, #20]
   24d7e:	613e      	str	r6, [r7, #16]
   24d80:	4638      	mov	r0, r7
   24d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24d86:	6879      	ldr	r1, [r7, #4]
   24d88:	4640      	mov	r0, r8
   24d8a:	3101      	adds	r1, #1
   24d8c:	f7ff ffa2 	bl	24cd4 <_Balloc>
   24d90:	4604      	mov	r4, r0
   24d92:	b1b0      	cbz	r0, 24dc2 <__multadd+0x8e>
   24d94:	693a      	ldr	r2, [r7, #16]
   24d96:	3202      	adds	r2, #2
   24d98:	f107 010c 	add.w	r1, r7, #12
   24d9c:	0092      	lsls	r2, r2, #2
   24d9e:	300c      	adds	r0, #12
   24da0:	f7f1 fbfc 	bl	1659c <memcpy>
   24da4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   24da8:	687a      	ldr	r2, [r7, #4]
   24daa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   24dae:	6039      	str	r1, [r7, #0]
   24db0:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   24db4:	4627      	mov	r7, r4
   24db6:	eb07 0386 	add.w	r3, r7, r6, lsl #2
   24dba:	3601      	adds	r6, #1
   24dbc:	615d      	str	r5, [r3, #20]
   24dbe:	613e      	str	r6, [r7, #16]
   24dc0:	e7de      	b.n	24d80 <__multadd+0x4c>
   24dc2:	4b03      	ldr	r3, [pc, #12]	; (24dd0 <__multadd+0x9c>)
   24dc4:	4803      	ldr	r0, [pc, #12]	; (24dd4 <__multadd+0xa0>)
   24dc6:	4622      	mov	r2, r4
   24dc8:	21ba      	movs	r1, #186	; 0xba
   24dca:	f000 fe3d 	bl	25a48 <__assert_func>
   24dce:	bf00      	nop
   24dd0:	2000178c 	.word	0x2000178c
   24dd4:	200017a0 	.word	0x200017a0

00024dd8 <__hi0bits>:
   24dd8:	0c03      	lsrs	r3, r0, #16
   24dda:	041b      	lsls	r3, r3, #16
   24ddc:	b9d3      	cbnz	r3, 24e14 <__hi0bits+0x3c>
   24dde:	0400      	lsls	r0, r0, #16
   24de0:	2310      	movs	r3, #16
   24de2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   24de6:	bf04      	itt	eq
   24de8:	0200      	lsleq	r0, r0, #8
   24dea:	3308      	addeq	r3, #8
   24dec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   24df0:	bf04      	itt	eq
   24df2:	0100      	lsleq	r0, r0, #4
   24df4:	3304      	addeq	r3, #4
   24df6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   24dfa:	bf04      	itt	eq
   24dfc:	0080      	lsleq	r0, r0, #2
   24dfe:	3302      	addeq	r3, #2
   24e00:	2800      	cmp	r0, #0
   24e02:	db05      	blt.n	24e10 <__hi0bits+0x38>
   24e04:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   24e08:	f103 0301 	add.w	r3, r3, #1
   24e0c:	bf08      	it	eq
   24e0e:	2320      	moveq	r3, #32
   24e10:	4618      	mov	r0, r3
   24e12:	4770      	bx	lr
   24e14:	2300      	movs	r3, #0
   24e16:	e7e4      	b.n	24de2 <__hi0bits+0xa>

00024e18 <__lo0bits>:
   24e18:	6803      	ldr	r3, [r0, #0]
   24e1a:	f013 0207 	ands.w	r2, r3, #7
   24e1e:	d008      	beq.n	24e32 <__lo0bits+0x1a>
   24e20:	07d9      	lsls	r1, r3, #31
   24e22:	d41f      	bmi.n	24e64 <__lo0bits+0x4c>
   24e24:	079a      	lsls	r2, r3, #30
   24e26:	d522      	bpl.n	24e6e <__lo0bits+0x56>
   24e28:	085b      	lsrs	r3, r3, #1
   24e2a:	6003      	str	r3, [r0, #0]
   24e2c:	2201      	movs	r2, #1
   24e2e:	4610      	mov	r0, r2
   24e30:	4770      	bx	lr
   24e32:	b299      	uxth	r1, r3
   24e34:	b909      	cbnz	r1, 24e3a <__lo0bits+0x22>
   24e36:	0c1b      	lsrs	r3, r3, #16
   24e38:	2210      	movs	r2, #16
   24e3a:	b2d9      	uxtb	r1, r3
   24e3c:	b909      	cbnz	r1, 24e42 <__lo0bits+0x2a>
   24e3e:	3208      	adds	r2, #8
   24e40:	0a1b      	lsrs	r3, r3, #8
   24e42:	0719      	lsls	r1, r3, #28
   24e44:	bf04      	itt	eq
   24e46:	091b      	lsreq	r3, r3, #4
   24e48:	3204      	addeq	r2, #4
   24e4a:	0799      	lsls	r1, r3, #30
   24e4c:	bf04      	itt	eq
   24e4e:	089b      	lsreq	r3, r3, #2
   24e50:	3202      	addeq	r2, #2
   24e52:	07d9      	lsls	r1, r3, #31
   24e54:	d403      	bmi.n	24e5e <__lo0bits+0x46>
   24e56:	085b      	lsrs	r3, r3, #1
   24e58:	f102 0201 	add.w	r2, r2, #1
   24e5c:	d005      	beq.n	24e6a <__lo0bits+0x52>
   24e5e:	6003      	str	r3, [r0, #0]
   24e60:	4610      	mov	r0, r2
   24e62:	4770      	bx	lr
   24e64:	2200      	movs	r2, #0
   24e66:	4610      	mov	r0, r2
   24e68:	4770      	bx	lr
   24e6a:	2220      	movs	r2, #32
   24e6c:	e7df      	b.n	24e2e <__lo0bits+0x16>
   24e6e:	089b      	lsrs	r3, r3, #2
   24e70:	2202      	movs	r2, #2
   24e72:	6003      	str	r3, [r0, #0]
   24e74:	4610      	mov	r0, r2
   24e76:	4770      	bx	lr

00024e78 <__i2b>:
   24e78:	b538      	push	{r3, r4, r5, lr}
   24e7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   24e7c:	4604      	mov	r4, r0
   24e7e:	460d      	mov	r5, r1
   24e80:	b14b      	cbz	r3, 24e96 <__i2b+0x1e>
   24e82:	6858      	ldr	r0, [r3, #4]
   24e84:	b1b0      	cbz	r0, 24eb4 <__i2b+0x3c>
   24e86:	6802      	ldr	r2, [r0, #0]
   24e88:	605a      	str	r2, [r3, #4]
   24e8a:	2200      	movs	r2, #0
   24e8c:	2301      	movs	r3, #1
   24e8e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   24e92:	60c2      	str	r2, [r0, #12]
   24e94:	bd38      	pop	{r3, r4, r5, pc}
   24e96:	2221      	movs	r2, #33	; 0x21
   24e98:	2104      	movs	r1, #4
   24e9a:	f7fc f90f 	bl	210bc <_calloc_r>
   24e9e:	4603      	mov	r3, r0
   24ea0:	6460      	str	r0, [r4, #68]	; 0x44
   24ea2:	2800      	cmp	r0, #0
   24ea4:	d1ed      	bne.n	24e82 <__i2b+0xa>
   24ea6:	4b09      	ldr	r3, [pc, #36]	; (24ecc <__i2b+0x54>)
   24ea8:	4809      	ldr	r0, [pc, #36]	; (24ed0 <__i2b+0x58>)
   24eaa:	2200      	movs	r2, #0
   24eac:	f240 1145 	movw	r1, #325	; 0x145
   24eb0:	f000 fdca 	bl	25a48 <__assert_func>
   24eb4:	221c      	movs	r2, #28
   24eb6:	2101      	movs	r1, #1
   24eb8:	4620      	mov	r0, r4
   24eba:	f7fc f8ff 	bl	210bc <_calloc_r>
   24ebe:	2800      	cmp	r0, #0
   24ec0:	d0f1      	beq.n	24ea6 <__i2b+0x2e>
   24ec2:	2201      	movs	r2, #1
   24ec4:	2302      	movs	r3, #2
   24ec6:	e9c0 2301 	strd	r2, r3, [r0, #4]
   24eca:	e7de      	b.n	24e8a <__i2b+0x12>
   24ecc:	2000178c 	.word	0x2000178c
   24ed0:	200017a0 	.word	0x200017a0

00024ed4 <__multiply>:
   24ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ed8:	690e      	ldr	r6, [r1, #16]
   24eda:	6915      	ldr	r5, [r2, #16]
   24edc:	42ae      	cmp	r6, r5
   24ede:	b085      	sub	sp, #20
   24ee0:	4688      	mov	r8, r1
   24ee2:	4614      	mov	r4, r2
   24ee4:	db05      	blt.n	24ef2 <__multiply+0x1e>
   24ee6:	462a      	mov	r2, r5
   24ee8:	4623      	mov	r3, r4
   24eea:	4635      	mov	r5, r6
   24eec:	460c      	mov	r4, r1
   24eee:	4616      	mov	r6, r2
   24ef0:	4698      	mov	r8, r3
   24ef2:	68a3      	ldr	r3, [r4, #8]
   24ef4:	6861      	ldr	r1, [r4, #4]
   24ef6:	19af      	adds	r7, r5, r6
   24ef8:	42bb      	cmp	r3, r7
   24efa:	bfb8      	it	lt
   24efc:	3101      	addlt	r1, #1
   24efe:	f7ff fee9 	bl	24cd4 <_Balloc>
   24f02:	9001      	str	r0, [sp, #4]
   24f04:	2800      	cmp	r0, #0
   24f06:	f000 8087 	beq.w	25018 <__multiply+0x144>
   24f0a:	9b01      	ldr	r3, [sp, #4]
   24f0c:	f103 0914 	add.w	r9, r3, #20
   24f10:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   24f14:	45d1      	cmp	r9, sl
   24f16:	d205      	bcs.n	24f24 <__multiply+0x50>
   24f18:	464b      	mov	r3, r9
   24f1a:	2200      	movs	r2, #0
   24f1c:	f843 2b04 	str.w	r2, [r3], #4
   24f20:	459a      	cmp	sl, r3
   24f22:	d8fb      	bhi.n	24f1c <__multiply+0x48>
   24f24:	f108 0814 	add.w	r8, r8, #20
   24f28:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   24f2c:	f104 0314 	add.w	r3, r4, #20
   24f30:	45d8      	cmp	r8, fp
   24f32:	461a      	mov	r2, r3
   24f34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   24f38:	d25f      	bcs.n	24ffa <__multiply+0x126>
   24f3a:	1b2b      	subs	r3, r5, r4
   24f3c:	3b15      	subs	r3, #21
   24f3e:	f023 0303 	bic.w	r3, r3, #3
   24f42:	3304      	adds	r3, #4
   24f44:	3415      	adds	r4, #21
   24f46:	42a5      	cmp	r5, r4
   24f48:	bf38      	it	cc
   24f4a:	2304      	movcc	r3, #4
   24f4c:	e9cd a702 	strd	sl, r7, [sp, #8]
   24f50:	46ac      	mov	ip, r5
   24f52:	461f      	mov	r7, r3
   24f54:	4692      	mov	sl, r2
   24f56:	e005      	b.n	24f64 <__multiply+0x90>
   24f58:	0c09      	lsrs	r1, r1, #16
   24f5a:	d129      	bne.n	24fb0 <__multiply+0xdc>
   24f5c:	45c3      	cmp	fp, r8
   24f5e:	f109 0904 	add.w	r9, r9, #4
   24f62:	d948      	bls.n	24ff6 <__multiply+0x122>
   24f64:	f858 1b04 	ldr.w	r1, [r8], #4
   24f68:	b28d      	uxth	r5, r1
   24f6a:	2d00      	cmp	r5, #0
   24f6c:	d0f4      	beq.n	24f58 <__multiply+0x84>
   24f6e:	4656      	mov	r6, sl
   24f70:	464c      	mov	r4, r9
   24f72:	2300      	movs	r3, #0
   24f74:	f856 1b04 	ldr.w	r1, [r6], #4
   24f78:	6822      	ldr	r2, [r4, #0]
   24f7a:	fa1f fe81 	uxth.w	lr, r1
   24f7e:	b290      	uxth	r0, r2
   24f80:	0c09      	lsrs	r1, r1, #16
   24f82:	fb05 000e 	mla	r0, r5, lr, r0
   24f86:	0c12      	lsrs	r2, r2, #16
   24f88:	4403      	add	r3, r0
   24f8a:	fb05 2201 	mla	r2, r5, r1, r2
   24f8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   24f92:	b29b      	uxth	r3, r3
   24f94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   24f98:	45b4      	cmp	ip, r6
   24f9a:	f844 3b04 	str.w	r3, [r4], #4
   24f9e:	ea4f 4312 	mov.w	r3, r2, lsr #16
   24fa2:	d8e7      	bhi.n	24f74 <__multiply+0xa0>
   24fa4:	f849 3007 	str.w	r3, [r9, r7]
   24fa8:	f858 1c04 	ldr.w	r1, [r8, #-4]
   24fac:	0c09      	lsrs	r1, r1, #16
   24fae:	d0d5      	beq.n	24f5c <__multiply+0x88>
   24fb0:	f8d9 3000 	ldr.w	r3, [r9]
   24fb4:	4650      	mov	r0, sl
   24fb6:	461a      	mov	r2, r3
   24fb8:	464c      	mov	r4, r9
   24fba:	2600      	movs	r6, #0
   24fbc:	8805      	ldrh	r5, [r0, #0]
   24fbe:	0c12      	lsrs	r2, r2, #16
   24fc0:	fb01 2205 	mla	r2, r1, r5, r2
   24fc4:	4416      	add	r6, r2
   24fc6:	b29b      	uxth	r3, r3
   24fc8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   24fcc:	f844 3b04 	str.w	r3, [r4], #4
   24fd0:	f850 5b04 	ldr.w	r5, [r0], #4
   24fd4:	6822      	ldr	r2, [r4, #0]
   24fd6:	0c2d      	lsrs	r5, r5, #16
   24fd8:	b293      	uxth	r3, r2
   24fda:	fb01 3305 	mla	r3, r1, r5, r3
   24fde:	eb03 4316 	add.w	r3, r3, r6, lsr #16
   24fe2:	4584      	cmp	ip, r0
   24fe4:	ea4f 4613 	mov.w	r6, r3, lsr #16
   24fe8:	d8e8      	bhi.n	24fbc <__multiply+0xe8>
   24fea:	45c3      	cmp	fp, r8
   24fec:	f849 3007 	str.w	r3, [r9, r7]
   24ff0:	f109 0904 	add.w	r9, r9, #4
   24ff4:	d8b6      	bhi.n	24f64 <__multiply+0x90>
   24ff6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   24ffa:	2f00      	cmp	r7, #0
   24ffc:	dc02      	bgt.n	25004 <__multiply+0x130>
   24ffe:	e005      	b.n	2500c <__multiply+0x138>
   25000:	3f01      	subs	r7, #1
   25002:	d003      	beq.n	2500c <__multiply+0x138>
   25004:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   25008:	2b00      	cmp	r3, #0
   2500a:	d0f9      	beq.n	25000 <__multiply+0x12c>
   2500c:	9b01      	ldr	r3, [sp, #4]
   2500e:	4618      	mov	r0, r3
   25010:	611f      	str	r7, [r3, #16]
   25012:	b005      	add	sp, #20
   25014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25018:	4b03      	ldr	r3, [pc, #12]	; (25028 <__multiply+0x154>)
   2501a:	4804      	ldr	r0, [pc, #16]	; (2502c <__multiply+0x158>)
   2501c:	9a01      	ldr	r2, [sp, #4]
   2501e:	f44f 71b1 	mov.w	r1, #354	; 0x162
   25022:	f000 fd11 	bl	25a48 <__assert_func>
   25026:	bf00      	nop
   25028:	2000178c 	.word	0x2000178c
   2502c:	200017a0 	.word	0x200017a0

00025030 <__pow5mult>:
   25030:	f012 0303 	ands.w	r3, r2, #3
   25034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25038:	4614      	mov	r4, r2
   2503a:	4606      	mov	r6, r0
   2503c:	d132      	bne.n	250a4 <__pow5mult+0x74>
   2503e:	460d      	mov	r5, r1
   25040:	10a4      	asrs	r4, r4, #2
   25042:	d020      	beq.n	25086 <__pow5mult+0x56>
   25044:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
   25048:	f1b8 0f00 	cmp.w	r8, #0
   2504c:	d033      	beq.n	250b6 <__pow5mult+0x86>
   2504e:	07e3      	lsls	r3, r4, #31
   25050:	f04f 0700 	mov.w	r7, #0
   25054:	d407      	bmi.n	25066 <__pow5mult+0x36>
   25056:	1064      	asrs	r4, r4, #1
   25058:	d015      	beq.n	25086 <__pow5mult+0x56>
   2505a:	f8d8 0000 	ldr.w	r0, [r8]
   2505e:	b1a8      	cbz	r0, 2508c <__pow5mult+0x5c>
   25060:	4680      	mov	r8, r0
   25062:	07e3      	lsls	r3, r4, #31
   25064:	d5f7      	bpl.n	25056 <__pow5mult+0x26>
   25066:	4642      	mov	r2, r8
   25068:	4629      	mov	r1, r5
   2506a:	4630      	mov	r0, r6
   2506c:	f7ff ff32 	bl	24ed4 <__multiply>
   25070:	b1b5      	cbz	r5, 250a0 <__pow5mult+0x70>
   25072:	6869      	ldr	r1, [r5, #4]
   25074:	6c73      	ldr	r3, [r6, #68]	; 0x44
   25076:	1064      	asrs	r4, r4, #1
   25078:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   2507c:	602a      	str	r2, [r5, #0]
   2507e:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
   25082:	4605      	mov	r5, r0
   25084:	d1e9      	bne.n	2505a <__pow5mult+0x2a>
   25086:	4628      	mov	r0, r5
   25088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2508c:	4642      	mov	r2, r8
   2508e:	4641      	mov	r1, r8
   25090:	4630      	mov	r0, r6
   25092:	f7ff ff1f 	bl	24ed4 <__multiply>
   25096:	f8c8 0000 	str.w	r0, [r8]
   2509a:	6007      	str	r7, [r0, #0]
   2509c:	4680      	mov	r8, r0
   2509e:	e7e0      	b.n	25062 <__pow5mult+0x32>
   250a0:	4605      	mov	r5, r0
   250a2:	e7d8      	b.n	25056 <__pow5mult+0x26>
   250a4:	3b01      	subs	r3, #1
   250a6:	4a0f      	ldr	r2, [pc, #60]	; (250e4 <__pow5mult+0xb4>)
   250a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   250ac:	2300      	movs	r3, #0
   250ae:	f7ff fe41 	bl	24d34 <__multadd>
   250b2:	4605      	mov	r5, r0
   250b4:	e7c4      	b.n	25040 <__pow5mult+0x10>
   250b6:	2101      	movs	r1, #1
   250b8:	4630      	mov	r0, r6
   250ba:	f7ff fe0b 	bl	24cd4 <_Balloc>
   250be:	4680      	mov	r8, r0
   250c0:	b140      	cbz	r0, 250d4 <__pow5mult+0xa4>
   250c2:	2301      	movs	r3, #1
   250c4:	f240 2271 	movw	r2, #625	; 0x271
   250c8:	e9c0 3204 	strd	r3, r2, [r0, #16]
   250cc:	2300      	movs	r3, #0
   250ce:	6430      	str	r0, [r6, #64]	; 0x40
   250d0:	6003      	str	r3, [r0, #0]
   250d2:	e7bc      	b.n	2504e <__pow5mult+0x1e>
   250d4:	4b04      	ldr	r3, [pc, #16]	; (250e8 <__pow5mult+0xb8>)
   250d6:	4805      	ldr	r0, [pc, #20]	; (250ec <__pow5mult+0xbc>)
   250d8:	4642      	mov	r2, r8
   250da:	f240 1145 	movw	r1, #325	; 0x145
   250de:	f000 fcb3 	bl	25a48 <__assert_func>
   250e2:	bf00      	nop
   250e4:	2000288c 	.word	0x2000288c
   250e8:	2000178c 	.word	0x2000178c
   250ec:	200017a0 	.word	0x200017a0

000250f0 <__lshift>:
   250f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   250f4:	460d      	mov	r5, r1
   250f6:	4614      	mov	r4, r2
   250f8:	692f      	ldr	r7, [r5, #16]
   250fa:	68ab      	ldr	r3, [r5, #8]
   250fc:	6849      	ldr	r1, [r1, #4]
   250fe:	eb07 1762 	add.w	r7, r7, r2, asr #5
   25102:	1c7e      	adds	r6, r7, #1
   25104:	429e      	cmp	r6, r3
   25106:	4680      	mov	r8, r0
   25108:	ea4f 1962 	mov.w	r9, r2, asr #5
   2510c:	dd04      	ble.n	25118 <__lshift+0x28>
   2510e:	005b      	lsls	r3, r3, #1
   25110:	429e      	cmp	r6, r3
   25112:	f101 0101 	add.w	r1, r1, #1
   25116:	dcfa      	bgt.n	2510e <__lshift+0x1e>
   25118:	4640      	mov	r0, r8
   2511a:	f7ff fddb 	bl	24cd4 <_Balloc>
   2511e:	4684      	mov	ip, r0
   25120:	2800      	cmp	r0, #0
   25122:	d052      	beq.n	251ca <__lshift+0xda>
   25124:	f1b9 0f00 	cmp.w	r9, #0
   25128:	f100 0214 	add.w	r2, r0, #20
   2512c:	dd0e      	ble.n	2514c <__lshift+0x5c>
   2512e:	f109 0105 	add.w	r1, r9, #5
   25132:	ea4f 0e81 	mov.w	lr, r1, lsl #2
   25136:	4613      	mov	r3, r2
   25138:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2513c:	2000      	movs	r0, #0
   2513e:	f843 0b04 	str.w	r0, [r3], #4
   25142:	428b      	cmp	r3, r1
   25144:	d1fb      	bne.n	2513e <__lshift+0x4e>
   25146:	f1ae 0314 	sub.w	r3, lr, #20
   2514a:	441a      	add	r2, r3
   2514c:	6929      	ldr	r1, [r5, #16]
   2514e:	f105 0314 	add.w	r3, r5, #20
   25152:	f014 0e1f 	ands.w	lr, r4, #31
   25156:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2515a:	d02e      	beq.n	251ba <__lshift+0xca>
   2515c:	f1ce 0920 	rsb	r9, lr, #32
   25160:	4610      	mov	r0, r2
   25162:	f04f 0a00 	mov.w	sl, #0
   25166:	681c      	ldr	r4, [r3, #0]
   25168:	fa04 f40e 	lsl.w	r4, r4, lr
   2516c:	ea44 040a 	orr.w	r4, r4, sl
   25170:	f840 4b04 	str.w	r4, [r0], #4
   25174:	f853 4b04 	ldr.w	r4, [r3], #4
   25178:	4299      	cmp	r1, r3
   2517a:	fa24 fa09 	lsr.w	sl, r4, r9
   2517e:	d8f2      	bhi.n	25166 <__lshift+0x76>
   25180:	1b4b      	subs	r3, r1, r5
   25182:	3b15      	subs	r3, #21
   25184:	f023 0303 	bic.w	r3, r3, #3
   25188:	3304      	adds	r3, #4
   2518a:	f105 0015 	add.w	r0, r5, #21
   2518e:	4281      	cmp	r1, r0
   25190:	bf38      	it	cc
   25192:	2304      	movcc	r3, #4
   25194:	f1ba 0f00 	cmp.w	sl, #0
   25198:	bf18      	it	ne
   2519a:	4637      	movne	r7, r6
   2519c:	f842 a003 	str.w	sl, [r2, r3]
   251a0:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   251a4:	686a      	ldr	r2, [r5, #4]
   251a6:	f8cc 7010 	str.w	r7, [ip, #16]
   251aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   251ae:	6029      	str	r1, [r5, #0]
   251b0:	4660      	mov	r0, ip
   251b2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   251b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   251ba:	3a04      	subs	r2, #4
   251bc:	f853 0b04 	ldr.w	r0, [r3], #4
   251c0:	f842 0f04 	str.w	r0, [r2, #4]!
   251c4:	4299      	cmp	r1, r3
   251c6:	d8f9      	bhi.n	251bc <__lshift+0xcc>
   251c8:	e7ea      	b.n	251a0 <__lshift+0xb0>
   251ca:	4b03      	ldr	r3, [pc, #12]	; (251d8 <__lshift+0xe8>)
   251cc:	4803      	ldr	r0, [pc, #12]	; (251dc <__lshift+0xec>)
   251ce:	4662      	mov	r2, ip
   251d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
   251d4:	f000 fc38 	bl	25a48 <__assert_func>
   251d8:	2000178c 	.word	0x2000178c
   251dc:	200017a0 	.word	0x200017a0

000251e0 <__mcmp>:
   251e0:	690b      	ldr	r3, [r1, #16]
   251e2:	4684      	mov	ip, r0
   251e4:	6900      	ldr	r0, [r0, #16]
   251e6:	1ac0      	subs	r0, r0, r3
   251e8:	d116      	bne.n	25218 <__mcmp+0x38>
   251ea:	f10c 0c14 	add.w	ip, ip, #20
   251ee:	3114      	adds	r1, #20
   251f0:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   251f4:	b410      	push	{r4}
   251f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   251fa:	e001      	b.n	25200 <__mcmp+0x20>
   251fc:	4594      	cmp	ip, r2
   251fe:	d208      	bcs.n	25212 <__mcmp+0x32>
   25200:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   25204:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   25208:	428c      	cmp	r4, r1
   2520a:	d0f7      	beq.n	251fc <__mcmp+0x1c>
   2520c:	d205      	bcs.n	2521a <__mcmp+0x3a>
   2520e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25212:	f85d 4b04 	ldr.w	r4, [sp], #4
   25216:	4770      	bx	lr
   25218:	4770      	bx	lr
   2521a:	2001      	movs	r0, #1
   2521c:	f85d 4b04 	ldr.w	r4, [sp], #4
   25220:	4770      	bx	lr
   25222:	bf00      	nop

00025224 <__mdiff>:
   25224:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25228:	690f      	ldr	r7, [r1, #16]
   2522a:	6913      	ldr	r3, [r2, #16]
   2522c:	1aff      	subs	r7, r7, r3
   2522e:	2f00      	cmp	r7, #0
   25230:	460e      	mov	r6, r1
   25232:	4690      	mov	r8, r2
   25234:	d17f      	bne.n	25336 <__mdiff+0x112>
   25236:	f101 0514 	add.w	r5, r1, #20
   2523a:	3214      	adds	r2, #20
   2523c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   25240:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   25244:	e001      	b.n	2524a <__mdiff+0x26>
   25246:	429d      	cmp	r5, r3
   25248:	d278      	bcs.n	2533c <__mdiff+0x118>
   2524a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   2524e:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   25252:	42a1      	cmp	r1, r4
   25254:	d0f7      	beq.n	25246 <__mdiff+0x22>
   25256:	d369      	bcc.n	2532c <__mdiff+0x108>
   25258:	6871      	ldr	r1, [r6, #4]
   2525a:	f7ff fd3b 	bl	24cd4 <_Balloc>
   2525e:	4681      	mov	r9, r0
   25260:	2800      	cmp	r0, #0
   25262:	d077      	beq.n	25354 <__mdiff+0x130>
   25264:	6935      	ldr	r5, [r6, #16]
   25266:	f8d8 2010 	ldr.w	r2, [r8, #16]
   2526a:	60c7      	str	r7, [r0, #12]
   2526c:	f108 0e14 	add.w	lr, r8, #20
   25270:	f106 0014 	add.w	r0, r6, #20
   25274:	f109 0a14 	add.w	sl, r9, #20
   25278:	f106 0110 	add.w	r1, r6, #16
   2527c:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
   25280:	eb00 0785 	add.w	r7, r0, r5, lsl #2
   25284:	4656      	mov	r6, sl
   25286:	f04f 0c00 	mov.w	ip, #0
   2528a:	f85e 4b04 	ldr.w	r4, [lr], #4
   2528e:	f851 bf04 	ldr.w	fp, [r1, #4]!
   25292:	b2a3      	uxth	r3, r4
   25294:	fa1c fc8b 	uxtah	ip, ip, fp
   25298:	ebac 0303 	sub.w	r3, ip, r3
   2529c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
   252a0:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
   252a4:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
   252a8:	b29b      	uxth	r3, r3
   252aa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
   252ae:	4572      	cmp	r2, lr
   252b0:	f846 3b04 	str.w	r3, [r6], #4
   252b4:	ea4f 4c2c 	mov.w	ip, ip, asr #16
   252b8:	d8e7      	bhi.n	2528a <__mdiff+0x66>
   252ba:	eba2 0108 	sub.w	r1, r2, r8
   252be:	3915      	subs	r1, #21
   252c0:	f108 0815 	add.w	r8, r8, #21
   252c4:	4542      	cmp	r2, r8
   252c6:	f021 0403 	bic.w	r4, r1, #3
   252ca:	f104 0404 	add.w	r4, r4, #4
   252ce:	bf38      	it	cc
   252d0:	2404      	movcc	r4, #4
   252d2:	4420      	add	r0, r4
   252d4:	f021 0203 	bic.w	r2, r1, #3
   252d8:	bf38      	it	cc
   252da:	2200      	movcc	r2, #0
   252dc:	4287      	cmp	r7, r0
   252de:	4452      	add	r2, sl
   252e0:	4454      	add	r4, sl
   252e2:	d918      	bls.n	25316 <__mdiff+0xf2>
   252e4:	4626      	mov	r6, r4
   252e6:	4601      	mov	r1, r0
   252e8:	f851 3b04 	ldr.w	r3, [r1], #4
   252ec:	fa1c fc83 	uxtah	ip, ip, r3
   252f0:	ea4f 422c 	mov.w	r2, ip, asr #16
   252f4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   252f8:	fa1f fc8c 	uxth.w	ip, ip
   252fc:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   25300:	428f      	cmp	r7, r1
   25302:	f846 3b04 	str.w	r3, [r6], #4
   25306:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2530a:	d8ed      	bhi.n	252e8 <__mdiff+0xc4>
   2530c:	3f01      	subs	r7, #1
   2530e:	1a3f      	subs	r7, r7, r0
   25310:	f027 0703 	bic.w	r7, r7, #3
   25314:	19e2      	adds	r2, r4, r7
   25316:	b923      	cbnz	r3, 25322 <__mdiff+0xfe>
   25318:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   2531c:	3d01      	subs	r5, #1
   2531e:	2b00      	cmp	r3, #0
   25320:	d0fa      	beq.n	25318 <__mdiff+0xf4>
   25322:	f8c9 5010 	str.w	r5, [r9, #16]
   25326:	4648      	mov	r0, r9
   25328:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2532c:	4633      	mov	r3, r6
   2532e:	2701      	movs	r7, #1
   25330:	4646      	mov	r6, r8
   25332:	4698      	mov	r8, r3
   25334:	e790      	b.n	25258 <__mdiff+0x34>
   25336:	dbf9      	blt.n	2532c <__mdiff+0x108>
   25338:	2700      	movs	r7, #0
   2533a:	e78d      	b.n	25258 <__mdiff+0x34>
   2533c:	2100      	movs	r1, #0
   2533e:	f7ff fcc9 	bl	24cd4 <_Balloc>
   25342:	4681      	mov	r9, r0
   25344:	b168      	cbz	r0, 25362 <__mdiff+0x13e>
   25346:	2201      	movs	r2, #1
   25348:	2300      	movs	r3, #0
   2534a:	e9c9 2304 	strd	r2, r3, [r9, #16]
   2534e:	4648      	mov	r0, r9
   25350:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25354:	4b06      	ldr	r3, [pc, #24]	; (25370 <__mdiff+0x14c>)
   25356:	4807      	ldr	r0, [pc, #28]	; (25374 <__mdiff+0x150>)
   25358:	464a      	mov	r2, r9
   2535a:	f240 2145 	movw	r1, #581	; 0x245
   2535e:	f000 fb73 	bl	25a48 <__assert_func>
   25362:	4b03      	ldr	r3, [pc, #12]	; (25370 <__mdiff+0x14c>)
   25364:	4803      	ldr	r0, [pc, #12]	; (25374 <__mdiff+0x150>)
   25366:	464a      	mov	r2, r9
   25368:	f240 2137 	movw	r1, #567	; 0x237
   2536c:	f000 fb6c 	bl	25a48 <__assert_func>
   25370:	2000178c 	.word	0x2000178c
   25374:	200017a0 	.word	0x200017a0

00025378 <__d2b>:
   25378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2537c:	4688      	mov	r8, r1
   2537e:	b083      	sub	sp, #12
   25380:	2101      	movs	r1, #1
   25382:	ec57 6b10 	vmov	r6, r7, d0
   25386:	4615      	mov	r5, r2
   25388:	f7ff fca4 	bl	24cd4 <_Balloc>
   2538c:	4604      	mov	r4, r0
   2538e:	2800      	cmp	r0, #0
   25390:	d051      	beq.n	25436 <__d2b+0xbe>
   25392:	f3c7 590a 	ubfx	r9, r7, #20, #11
   25396:	f3c7 0313 	ubfx	r3, r7, #0, #20
   2539a:	f1b9 0f00 	cmp.w	r9, #0
   2539e:	d001      	beq.n	253a4 <__d2b+0x2c>
   253a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   253a4:	2e00      	cmp	r6, #0
   253a6:	9301      	str	r3, [sp, #4]
   253a8:	d118      	bne.n	253dc <__d2b+0x64>
   253aa:	a801      	add	r0, sp, #4
   253ac:	f7ff fd34 	bl	24e18 <__lo0bits>
   253b0:	9a01      	ldr	r2, [sp, #4]
   253b2:	6162      	str	r2, [r4, #20]
   253b4:	2201      	movs	r2, #1
   253b6:	f100 0320 	add.w	r3, r0, #32
   253ba:	6122      	str	r2, [r4, #16]
   253bc:	f1b9 0f00 	cmp.w	r9, #0
   253c0:	d025      	beq.n	2540e <__d2b+0x96>
   253c2:	f2a9 4933 	subw	r9, r9, #1075	; 0x433
   253c6:	eb09 0203 	add.w	r2, r9, r3
   253ca:	4620      	mov	r0, r4
   253cc:	f1c3 0335 	rsb	r3, r3, #53	; 0x35
   253d0:	f8c8 2000 	str.w	r2, [r8]
   253d4:	602b      	str	r3, [r5, #0]
   253d6:	b003      	add	sp, #12
   253d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   253dc:	4668      	mov	r0, sp
   253de:	9600      	str	r6, [sp, #0]
   253e0:	f7ff fd1a 	bl	24e18 <__lo0bits>
   253e4:	4603      	mov	r3, r0
   253e6:	b310      	cbz	r0, 2542e <__d2b+0xb6>
   253e8:	e9dd 0200 	ldrd	r0, r2, [sp]
   253ec:	f1c3 0120 	rsb	r1, r3, #32
   253f0:	fa02 f101 	lsl.w	r1, r2, r1
   253f4:	4301      	orrs	r1, r0
   253f6:	40da      	lsrs	r2, r3
   253f8:	6161      	str	r1, [r4, #20]
   253fa:	9201      	str	r2, [sp, #4]
   253fc:	2a00      	cmp	r2, #0
   253fe:	61a2      	str	r2, [r4, #24]
   25400:	bf14      	ite	ne
   25402:	2202      	movne	r2, #2
   25404:	2201      	moveq	r2, #1
   25406:	6122      	str	r2, [r4, #16]
   25408:	f1b9 0f00 	cmp.w	r9, #0
   2540c:	d1d9      	bne.n	253c2 <__d2b+0x4a>
   2540e:	f2a3 4332 	subw	r3, r3, #1074	; 0x432
   25412:	f8c8 3000 	str.w	r3, [r8]
   25416:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   2541a:	6918      	ldr	r0, [r3, #16]
   2541c:	f7ff fcdc 	bl	24dd8 <__hi0bits>
   25420:	ebc0 1342 	rsb	r3, r0, r2, lsl #5
   25424:	4620      	mov	r0, r4
   25426:	602b      	str	r3, [r5, #0]
   25428:	b003      	add	sp, #12
   2542a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2542e:	9a00      	ldr	r2, [sp, #0]
   25430:	6162      	str	r2, [r4, #20]
   25432:	9a01      	ldr	r2, [sp, #4]
   25434:	e7e2      	b.n	253fc <__d2b+0x84>
   25436:	4b03      	ldr	r3, [pc, #12]	; (25444 <__d2b+0xcc>)
   25438:	4803      	ldr	r0, [pc, #12]	; (25448 <__d2b+0xd0>)
   2543a:	4622      	mov	r2, r4
   2543c:	f240 310f 	movw	r1, #783	; 0x30f
   25440:	f000 fb02 	bl	25a48 <__assert_func>
   25444:	2000178c 	.word	0x2000178c
   25448:	200017a0 	.word	0x200017a0

0002544c <_fclose_r>:
   2544c:	b570      	push	{r4, r5, r6, lr}
   2544e:	2900      	cmp	r1, #0
   25450:	d04b      	beq.n	254ea <_fclose_r+0x9e>
   25452:	4606      	mov	r6, r0
   25454:	460c      	mov	r4, r1
   25456:	b110      	cbz	r0, 2545e <_fclose_r+0x12>
   25458:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2545a:	2b00      	cmp	r3, #0
   2545c:	d048      	beq.n	254f0 <_fclose_r+0xa4>
   2545e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25460:	07d8      	lsls	r0, r3, #31
   25462:	d534      	bpl.n	254ce <_fclose_r+0x82>
   25464:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   25468:	2b00      	cmp	r3, #0
   2546a:	d03e      	beq.n	254ea <_fclose_r+0x9e>
   2546c:	4621      	mov	r1, r4
   2546e:	4630      	mov	r0, r6
   25470:	f000 f850 	bl	25514 <__sflush_r>
   25474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   25476:	4605      	mov	r5, r0
   25478:	b133      	cbz	r3, 25488 <_fclose_r+0x3c>
   2547a:	69e1      	ldr	r1, [r4, #28]
   2547c:	4630      	mov	r0, r6
   2547e:	4798      	blx	r3
   25480:	2800      	cmp	r0, #0
   25482:	bfb8      	it	lt
   25484:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
   25488:	89a3      	ldrh	r3, [r4, #12]
   2548a:	061a      	lsls	r2, r3, #24
   2548c:	d43c      	bmi.n	25508 <_fclose_r+0xbc>
   2548e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   25490:	b141      	cbz	r1, 254a4 <_fclose_r+0x58>
   25492:	f104 0340 	add.w	r3, r4, #64	; 0x40
   25496:	4299      	cmp	r1, r3
   25498:	d002      	beq.n	254a0 <_fclose_r+0x54>
   2549a:	4630      	mov	r0, r6
   2549c:	f7fd fcb2 	bl	22e04 <_free_r>
   254a0:	2300      	movs	r3, #0
   254a2:	6323      	str	r3, [r4, #48]	; 0x30
   254a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   254a6:	b121      	cbz	r1, 254b2 <_fclose_r+0x66>
   254a8:	4630      	mov	r0, r6
   254aa:	f7fd fcab 	bl	22e04 <_free_r>
   254ae:	2300      	movs	r3, #0
   254b0:	6463      	str	r3, [r4, #68]	; 0x44
   254b2:	f7fc fc3d 	bl	21d30 <__sfp_lock_acquire>
   254b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   254b8:	2200      	movs	r2, #0
   254ba:	07db      	lsls	r3, r3, #31
   254bc:	81a2      	strh	r2, [r4, #12]
   254be:	d51f      	bpl.n	25500 <_fclose_r+0xb4>
   254c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   254c2:	f7fd fb3f 	bl	22b44 <__retarget_lock_close_recursive>
   254c6:	f7fc fc39 	bl	21d3c <__sfp_lock_release>
   254ca:	4628      	mov	r0, r5
   254cc:	bd70      	pop	{r4, r5, r6, pc}
   254ce:	89a3      	ldrh	r3, [r4, #12]
   254d0:	0599      	lsls	r1, r3, #22
   254d2:	d4cb      	bmi.n	2546c <_fclose_r+0x20>
   254d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   254d6:	f7fd fb37 	bl	22b48 <__retarget_lock_acquire_recursive>
   254da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   254de:	2b00      	cmp	r3, #0
   254e0:	d1c4      	bne.n	2546c <_fclose_r+0x20>
   254e2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   254e4:	f015 0501 	ands.w	r5, r5, #1
   254e8:	d005      	beq.n	254f6 <_fclose_r+0xaa>
   254ea:	2500      	movs	r5, #0
   254ec:	4628      	mov	r0, r5
   254ee:	bd70      	pop	{r4, r5, r6, pc}
   254f0:	f7fc fc00 	bl	21cf4 <__sinit>
   254f4:	e7b3      	b.n	2545e <_fclose_r+0x12>
   254f6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   254f8:	f7fd fb28 	bl	22b4c <__retarget_lock_release_recursive>
   254fc:	4628      	mov	r0, r5
   254fe:	bd70      	pop	{r4, r5, r6, pc}
   25500:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25502:	f7fd fb23 	bl	22b4c <__retarget_lock_release_recursive>
   25506:	e7db      	b.n	254c0 <_fclose_r+0x74>
   25508:	6921      	ldr	r1, [r4, #16]
   2550a:	4630      	mov	r0, r6
   2550c:	f7fd fc7a 	bl	22e04 <_free_r>
   25510:	e7bd      	b.n	2548e <_fclose_r+0x42>
   25512:	bf00      	nop

00025514 <__sflush_r>:
   25514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   25518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2551c:	460c      	mov	r4, r1
   2551e:	0711      	lsls	r1, r2, #28
   25520:	4680      	mov	r8, r0
   25522:	d447      	bmi.n	255b4 <__sflush_r+0xa0>
   25524:	6863      	ldr	r3, [r4, #4]
   25526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   2552a:	2b00      	cmp	r3, #0
   2552c:	81a2      	strh	r2, [r4, #12]
   2552e:	dd5e      	ble.n	255ee <__sflush_r+0xda>
   25530:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25532:	2d00      	cmp	r5, #0
   25534:	d058      	beq.n	255e8 <__sflush_r+0xd4>
   25536:	2300      	movs	r3, #0
   25538:	f8d8 6000 	ldr.w	r6, [r8]
   2553c:	f8c8 3000 	str.w	r3, [r8]
   25540:	b293      	uxth	r3, r2
   25542:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   25546:	d156      	bne.n	255f6 <__sflush_r+0xe2>
   25548:	2301      	movs	r3, #1
   2554a:	69e1      	ldr	r1, [r4, #28]
   2554c:	4640      	mov	r0, r8
   2554e:	47a8      	blx	r5
   25550:	1c43      	adds	r3, r0, #1
   25552:	d067      	beq.n	25624 <__sflush_r+0x110>
   25554:	89a3      	ldrh	r3, [r4, #12]
   25556:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   25558:	075f      	lsls	r7, r3, #29
   2555a:	d505      	bpl.n	25568 <__sflush_r+0x54>
   2555c:	6863      	ldr	r3, [r4, #4]
   2555e:	1ac0      	subs	r0, r0, r3
   25560:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25562:	b10b      	cbz	r3, 25568 <__sflush_r+0x54>
   25564:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25566:	1ac0      	subs	r0, r0, r3
   25568:	69e1      	ldr	r1, [r4, #28]
   2556a:	4602      	mov	r2, r0
   2556c:	2300      	movs	r3, #0
   2556e:	4640      	mov	r0, r8
   25570:	47a8      	blx	r5
   25572:	1c41      	adds	r1, r0, #1
   25574:	d141      	bne.n	255fa <__sflush_r+0xe6>
   25576:	f8d8 3000 	ldr.w	r3, [r8]
   2557a:	2b00      	cmp	r3, #0
   2557c:	d03d      	beq.n	255fa <__sflush_r+0xe6>
   2557e:	2b1d      	cmp	r3, #29
   25580:	d001      	beq.n	25586 <__sflush_r+0x72>
   25582:	2b16      	cmp	r3, #22
   25584:	d156      	bne.n	25634 <__sflush_r+0x120>
   25586:	89a3      	ldrh	r3, [r4, #12]
   25588:	6922      	ldr	r2, [r4, #16]
   2558a:	6022      	str	r2, [r4, #0]
   2558c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25590:	2100      	movs	r1, #0
   25592:	6061      	str	r1, [r4, #4]
   25594:	81a3      	strh	r3, [r4, #12]
   25596:	6b21      	ldr	r1, [r4, #48]	; 0x30
   25598:	f8c8 6000 	str.w	r6, [r8]
   2559c:	b321      	cbz	r1, 255e8 <__sflush_r+0xd4>
   2559e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   255a2:	4299      	cmp	r1, r3
   255a4:	d002      	beq.n	255ac <__sflush_r+0x98>
   255a6:	4640      	mov	r0, r8
   255a8:	f7fd fc2c 	bl	22e04 <_free_r>
   255ac:	2000      	movs	r0, #0
   255ae:	6320      	str	r0, [r4, #48]	; 0x30
   255b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255b4:	6926      	ldr	r6, [r4, #16]
   255b6:	b1be      	cbz	r6, 255e8 <__sflush_r+0xd4>
   255b8:	b293      	uxth	r3, r2
   255ba:	6825      	ldr	r5, [r4, #0]
   255bc:	6026      	str	r6, [r4, #0]
   255be:	079a      	lsls	r2, r3, #30
   255c0:	bf0c      	ite	eq
   255c2:	6963      	ldreq	r3, [r4, #20]
   255c4:	2300      	movne	r3, #0
   255c6:	1bad      	subs	r5, r5, r6
   255c8:	60a3      	str	r3, [r4, #8]
   255ca:	e00b      	b.n	255e4 <__sflush_r+0xd0>
   255cc:	462b      	mov	r3, r5
   255ce:	4632      	mov	r2, r6
   255d0:	69e1      	ldr	r1, [r4, #28]
   255d2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   255d4:	4640      	mov	r0, r8
   255d6:	47b8      	blx	r7
   255d8:	f1b0 0c00 	subs.w	ip, r0, #0
   255dc:	eba5 050c 	sub.w	r5, r5, ip
   255e0:	4466      	add	r6, ip
   255e2:	dd17      	ble.n	25614 <__sflush_r+0x100>
   255e4:	2d00      	cmp	r5, #0
   255e6:	dcf1      	bgt.n	255cc <__sflush_r+0xb8>
   255e8:	2000      	movs	r0, #0
   255ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   255ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   255f0:	2b00      	cmp	r3, #0
   255f2:	dc9d      	bgt.n	25530 <__sflush_r+0x1c>
   255f4:	e7f8      	b.n	255e8 <__sflush_r+0xd4>
   255f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   255f8:	e7ae      	b.n	25558 <__sflush_r+0x44>
   255fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   255fe:	6922      	ldr	r2, [r4, #16]
   25600:	6022      	str	r2, [r4, #0]
   25602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   25606:	81a3      	strh	r3, [r4, #12]
   25608:	2200      	movs	r2, #0
   2560a:	04db      	lsls	r3, r3, #19
   2560c:	6062      	str	r2, [r4, #4]
   2560e:	d5c2      	bpl.n	25596 <__sflush_r+0x82>
   25610:	6520      	str	r0, [r4, #80]	; 0x50
   25612:	e7c0      	b.n	25596 <__sflush_r+0x82>
   25614:	89a3      	ldrh	r3, [r4, #12]
   25616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2561a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2561e:	81a3      	strh	r3, [r4, #12]
   25620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25624:	f8d8 3000 	ldr.w	r3, [r8]
   25628:	2b00      	cmp	r3, #0
   2562a:	d093      	beq.n	25554 <__sflush_r+0x40>
   2562c:	2b1d      	cmp	r3, #29
   2562e:	d006      	beq.n	2563e <__sflush_r+0x12a>
   25630:	2b16      	cmp	r3, #22
   25632:	d004      	beq.n	2563e <__sflush_r+0x12a>
   25634:	89a3      	ldrh	r3, [r4, #12]
   25636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2563a:	81a3      	strh	r3, [r4, #12]
   2563c:	e7d5      	b.n	255ea <__sflush_r+0xd6>
   2563e:	f8c8 6000 	str.w	r6, [r8]
   25642:	e7d1      	b.n	255e8 <__sflush_r+0xd4>

00025644 <_fflush_r>:
   25644:	b538      	push	{r3, r4, r5, lr}
   25646:	460c      	mov	r4, r1
   25648:	4605      	mov	r5, r0
   2564a:	b108      	cbz	r0, 25650 <_fflush_r+0xc>
   2564c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2564e:	b303      	cbz	r3, 25692 <_fflush_r+0x4e>
   25650:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   25654:	b188      	cbz	r0, 2567a <_fflush_r+0x36>
   25656:	6e63      	ldr	r3, [r4, #100]	; 0x64
   25658:	07db      	lsls	r3, r3, #31
   2565a:	d401      	bmi.n	25660 <_fflush_r+0x1c>
   2565c:	0581      	lsls	r1, r0, #22
   2565e:	d50f      	bpl.n	25680 <_fflush_r+0x3c>
   25660:	4628      	mov	r0, r5
   25662:	4621      	mov	r1, r4
   25664:	f7ff ff56 	bl	25514 <__sflush_r>
   25668:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2566a:	07da      	lsls	r2, r3, #31
   2566c:	4605      	mov	r5, r0
   2566e:	d402      	bmi.n	25676 <_fflush_r+0x32>
   25670:	89a3      	ldrh	r3, [r4, #12]
   25672:	059b      	lsls	r3, r3, #22
   25674:	d508      	bpl.n	25688 <_fflush_r+0x44>
   25676:	4628      	mov	r0, r5
   25678:	bd38      	pop	{r3, r4, r5, pc}
   2567a:	4605      	mov	r5, r0
   2567c:	4628      	mov	r0, r5
   2567e:	bd38      	pop	{r3, r4, r5, pc}
   25680:	6da0      	ldr	r0, [r4, #88]	; 0x58
   25682:	f7fd fa61 	bl	22b48 <__retarget_lock_acquire_recursive>
   25686:	e7eb      	b.n	25660 <_fflush_r+0x1c>
   25688:	6da0      	ldr	r0, [r4, #88]	; 0x58
   2568a:	f7fd fa5f 	bl	22b4c <__retarget_lock_release_recursive>
   2568e:	4628      	mov	r0, r5
   25690:	bd38      	pop	{r3, r4, r5, pc}
   25692:	f7fc fb2f 	bl	21cf4 <__sinit>
   25696:	e7db      	b.n	25650 <_fflush_r+0xc>

00025698 <__sread>:
   25698:	b510      	push	{r4, lr}
   2569a:	460c      	mov	r4, r1
   2569c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   256a0:	f000 f8fa 	bl	25898 <_read_r>
   256a4:	2800      	cmp	r0, #0
   256a6:	db03      	blt.n	256b0 <__sread+0x18>
   256a8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   256aa:	4403      	add	r3, r0
   256ac:	6523      	str	r3, [r4, #80]	; 0x50
   256ae:	bd10      	pop	{r4, pc}
   256b0:	89a3      	ldrh	r3, [r4, #12]
   256b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   256b6:	81a3      	strh	r3, [r4, #12]
   256b8:	bd10      	pop	{r4, pc}
   256ba:	bf00      	nop

000256bc <__swrite>:
   256bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   256c0:	460c      	mov	r4, r1
   256c2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   256c6:	461f      	mov	r7, r3
   256c8:	05cb      	lsls	r3, r1, #23
   256ca:	4605      	mov	r5, r0
   256cc:	4616      	mov	r6, r2
   256ce:	d40b      	bmi.n	256e8 <__swrite+0x2c>
   256d0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   256d4:	81a1      	strh	r1, [r4, #12]
   256d6:	463b      	mov	r3, r7
   256d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   256dc:	4632      	mov	r2, r6
   256de:	4628      	mov	r0, r5
   256e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   256e4:	f7fd b81c 	b.w	22720 <_write_r>
   256e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   256ec:	2302      	movs	r3, #2
   256ee:	2200      	movs	r2, #0
   256f0:	f000 f8bc 	bl	2586c <_lseek_r>
   256f4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   256f8:	e7ea      	b.n	256d0 <__swrite+0x14>
   256fa:	bf00      	nop

000256fc <__sseek>:
   256fc:	b510      	push	{r4, lr}
   256fe:	460c      	mov	r4, r1
   25700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25704:	f000 f8b2 	bl	2586c <_lseek_r>
   25708:	89a3      	ldrh	r3, [r4, #12]
   2570a:	1c42      	adds	r2, r0, #1
   2570c:	bf0e      	itee	eq
   2570e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   25712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   25716:	6520      	strne	r0, [r4, #80]	; 0x50
   25718:	81a3      	strh	r3, [r4, #12]
   2571a:	bd10      	pop	{r4, pc}

0002571c <__sclose>:
   2571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   25720:	f000 b86a 	b.w	257f8 <_close_r>

00025724 <__ascii_wctomb>:
   25724:	b149      	cbz	r1, 2573a <__ascii_wctomb+0x16>
   25726:	2aff      	cmp	r2, #255	; 0xff
   25728:	d802      	bhi.n	25730 <__ascii_wctomb+0xc>
   2572a:	700a      	strb	r2, [r1, #0]
   2572c:	2001      	movs	r0, #1
   2572e:	4770      	bx	lr
   25730:	238a      	movs	r3, #138	; 0x8a
   25732:	6003      	str	r3, [r0, #0]
   25734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25738:	4770      	bx	lr
   2573a:	4608      	mov	r0, r1
   2573c:	4770      	bx	lr
   2573e:	bf00      	nop

00025740 <__swbuf_r>:
   25740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25742:	460d      	mov	r5, r1
   25744:	4614      	mov	r4, r2
   25746:	4606      	mov	r6, r0
   25748:	b110      	cbz	r0, 25750 <__swbuf_r+0x10>
   2574a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2574c:	2b00      	cmp	r3, #0
   2574e:	d04c      	beq.n	257ea <__swbuf_r+0xaa>
   25750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   25754:	69a3      	ldr	r3, [r4, #24]
   25756:	60a3      	str	r3, [r4, #8]
   25758:	0717      	lsls	r7, r2, #28
   2575a:	b290      	uxth	r0, r2
   2575c:	d51b      	bpl.n	25796 <__swbuf_r+0x56>
   2575e:	6923      	ldr	r3, [r4, #16]
   25760:	b1cb      	cbz	r3, 25796 <__swbuf_r+0x56>
   25762:	b2ed      	uxtb	r5, r5
   25764:	0481      	lsls	r1, r0, #18
   25766:	462f      	mov	r7, r5
   25768:	d522      	bpl.n	257b0 <__swbuf_r+0x70>
   2576a:	6822      	ldr	r2, [r4, #0]
   2576c:	6961      	ldr	r1, [r4, #20]
   2576e:	1ad3      	subs	r3, r2, r3
   25770:	4299      	cmp	r1, r3
   25772:	dd29      	ble.n	257c8 <__swbuf_r+0x88>
   25774:	3301      	adds	r3, #1
   25776:	68a1      	ldr	r1, [r4, #8]
   25778:	3901      	subs	r1, #1
   2577a:	60a1      	str	r1, [r4, #8]
   2577c:	1c51      	adds	r1, r2, #1
   2577e:	6021      	str	r1, [r4, #0]
   25780:	7015      	strb	r5, [r2, #0]
   25782:	6962      	ldr	r2, [r4, #20]
   25784:	429a      	cmp	r2, r3
   25786:	d027      	beq.n	257d8 <__swbuf_r+0x98>
   25788:	89a3      	ldrh	r3, [r4, #12]
   2578a:	07db      	lsls	r3, r3, #31
   2578c:	d501      	bpl.n	25792 <__swbuf_r+0x52>
   2578e:	2d0a      	cmp	r5, #10
   25790:	d022      	beq.n	257d8 <__swbuf_r+0x98>
   25792:	4638      	mov	r0, r7
   25794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25796:	4621      	mov	r1, r4
   25798:	4630      	mov	r0, r6
   2579a:	f7fc fd8f 	bl	222bc <__swsetup_r>
   2579e:	bb08      	cbnz	r0, 257e4 <__swbuf_r+0xa4>
   257a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   257a4:	6923      	ldr	r3, [r4, #16]
   257a6:	b290      	uxth	r0, r2
   257a8:	b2ed      	uxtb	r5, r5
   257aa:	0481      	lsls	r1, r0, #18
   257ac:	462f      	mov	r7, r5
   257ae:	d4dc      	bmi.n	2576a <__swbuf_r+0x2a>
   257b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   257b4:	81a2      	strh	r2, [r4, #12]
   257b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   257b8:	6961      	ldr	r1, [r4, #20]
   257ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   257be:	6662      	str	r2, [r4, #100]	; 0x64
   257c0:	6822      	ldr	r2, [r4, #0]
   257c2:	1ad3      	subs	r3, r2, r3
   257c4:	4299      	cmp	r1, r3
   257c6:	dcd5      	bgt.n	25774 <__swbuf_r+0x34>
   257c8:	4621      	mov	r1, r4
   257ca:	4630      	mov	r0, r6
   257cc:	f7ff ff3a 	bl	25644 <_fflush_r>
   257d0:	b940      	cbnz	r0, 257e4 <__swbuf_r+0xa4>
   257d2:	6822      	ldr	r2, [r4, #0]
   257d4:	2301      	movs	r3, #1
   257d6:	e7ce      	b.n	25776 <__swbuf_r+0x36>
   257d8:	4621      	mov	r1, r4
   257da:	4630      	mov	r0, r6
   257dc:	f7ff ff32 	bl	25644 <_fflush_r>
   257e0:	2800      	cmp	r0, #0
   257e2:	d0d6      	beq.n	25792 <__swbuf_r+0x52>
   257e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   257e8:	e7d3      	b.n	25792 <__swbuf_r+0x52>
   257ea:	f7fc fa83 	bl	21cf4 <__sinit>
   257ee:	e7af      	b.n	25750 <__swbuf_r+0x10>

000257f0 <_localeconv_r>:
   257f0:	4800      	ldr	r0, [pc, #0]	; (257f4 <_localeconv_r+0x4>)
   257f2:	4770      	bx	lr
   257f4:	2000342c 	.word	0x2000342c

000257f8 <_close_r>:
   257f8:	b538      	push	{r3, r4, r5, lr}
   257fa:	4d07      	ldr	r5, [pc, #28]	; (25818 <_close_r+0x20>)
   257fc:	2200      	movs	r2, #0
   257fe:	4604      	mov	r4, r0
   25800:	4608      	mov	r0, r1
   25802:	602a      	str	r2, [r5, #0]
   25804:	f7f1 faec 	bl	16de0 <_close>
   25808:	1c43      	adds	r3, r0, #1
   2580a:	d000      	beq.n	2580e <_close_r+0x16>
   2580c:	bd38      	pop	{r3, r4, r5, pc}
   2580e:	682b      	ldr	r3, [r5, #0]
   25810:	2b00      	cmp	r3, #0
   25812:	d0fb      	beq.n	2580c <_close_r+0x14>
   25814:	6023      	str	r3, [r4, #0]
   25816:	bd38      	pop	{r3, r4, r5, pc}
   25818:	20006bb4 	.word	0x20006bb4

0002581c <_fstat_r>:
   2581c:	b570      	push	{r4, r5, r6, lr}
   2581e:	460c      	mov	r4, r1
   25820:	4d08      	ldr	r5, [pc, #32]	; (25844 <_fstat_r+0x28>)
   25822:	4603      	mov	r3, r0
   25824:	2600      	movs	r6, #0
   25826:	4620      	mov	r0, r4
   25828:	4611      	mov	r1, r2
   2582a:	461c      	mov	r4, r3
   2582c:	602e      	str	r6, [r5, #0]
   2582e:	f7f1 fadb 	bl	16de8 <_fstat>
   25832:	1c43      	adds	r3, r0, #1
   25834:	d000      	beq.n	25838 <_fstat_r+0x1c>
   25836:	bd70      	pop	{r4, r5, r6, pc}
   25838:	682b      	ldr	r3, [r5, #0]
   2583a:	2b00      	cmp	r3, #0
   2583c:	d0fb      	beq.n	25836 <_fstat_r+0x1a>
   2583e:	6023      	str	r3, [r4, #0]
   25840:	bd70      	pop	{r4, r5, r6, pc}
   25842:	bf00      	nop
   25844:	20006bb4 	.word	0x20006bb4

00025848 <_isatty_r>:
   25848:	b538      	push	{r3, r4, r5, lr}
   2584a:	4d07      	ldr	r5, [pc, #28]	; (25868 <_isatty_r+0x20>)
   2584c:	2200      	movs	r2, #0
   2584e:	4604      	mov	r4, r0
   25850:	4608      	mov	r0, r1
   25852:	602a      	str	r2, [r5, #0]
   25854:	f7f1 face 	bl	16df4 <_isatty>
   25858:	1c43      	adds	r3, r0, #1
   2585a:	d000      	beq.n	2585e <_isatty_r+0x16>
   2585c:	bd38      	pop	{r3, r4, r5, pc}
   2585e:	682b      	ldr	r3, [r5, #0]
   25860:	2b00      	cmp	r3, #0
   25862:	d0fb      	beq.n	2585c <_isatty_r+0x14>
   25864:	6023      	str	r3, [r4, #0]
   25866:	bd38      	pop	{r3, r4, r5, pc}
   25868:	20006bb4 	.word	0x20006bb4

0002586c <_lseek_r>:
   2586c:	b538      	push	{r3, r4, r5, lr}
   2586e:	460c      	mov	r4, r1
   25870:	4d08      	ldr	r5, [pc, #32]	; (25894 <_lseek_r+0x28>)
   25872:	4684      	mov	ip, r0
   25874:	4611      	mov	r1, r2
   25876:	4620      	mov	r0, r4
   25878:	461a      	mov	r2, r3
   2587a:	2300      	movs	r3, #0
   2587c:	602b      	str	r3, [r5, #0]
   2587e:	4664      	mov	r4, ip
   25880:	f7f1 faba 	bl	16df8 <_lseek>
   25884:	1c43      	adds	r3, r0, #1
   25886:	d000      	beq.n	2588a <_lseek_r+0x1e>
   25888:	bd38      	pop	{r3, r4, r5, pc}
   2588a:	682b      	ldr	r3, [r5, #0]
   2588c:	2b00      	cmp	r3, #0
   2588e:	d0fb      	beq.n	25888 <_lseek_r+0x1c>
   25890:	6023      	str	r3, [r4, #0]
   25892:	bd38      	pop	{r3, r4, r5, pc}
   25894:	20006bb4 	.word	0x20006bb4

00025898 <_read_r>:
   25898:	b538      	push	{r3, r4, r5, lr}
   2589a:	460c      	mov	r4, r1
   2589c:	4d08      	ldr	r5, [pc, #32]	; (258c0 <_read_r+0x28>)
   2589e:	4684      	mov	ip, r0
   258a0:	4611      	mov	r1, r2
   258a2:	4620      	mov	r0, r4
   258a4:	461a      	mov	r2, r3
   258a6:	2300      	movs	r3, #0
   258a8:	602b      	str	r3, [r5, #0]
   258aa:	4664      	mov	r4, ip
   258ac:	f7f1 fa96 	bl	16ddc <_read>
   258b0:	1c43      	adds	r3, r0, #1
   258b2:	d000      	beq.n	258b6 <_read_r+0x1e>
   258b4:	bd38      	pop	{r3, r4, r5, pc}
   258b6:	682b      	ldr	r3, [r5, #0]
   258b8:	2b00      	cmp	r3, #0
   258ba:	d0fb      	beq.n	258b4 <_read_r+0x1c>
   258bc:	6023      	str	r3, [r4, #0]
   258be:	bd38      	pop	{r3, r4, r5, pc}
   258c0:	20006bb4 	.word	0x20006bb4

000258c4 <fcvtbuf>:
   258c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   258c8:	460e      	mov	r6, r1
   258ca:	4926      	ldr	r1, [pc, #152]	; (25964 <fcvtbuf+0xa0>)
   258cc:	b087      	sub	sp, #28
   258ce:	680f      	ldr	r7, [r1, #0]
   258d0:	4604      	mov	r4, r0
   258d2:	4690      	mov	r8, r2
   258d4:	461d      	mov	r5, r3
   258d6:	b353      	cbz	r3, 2592e <fcvtbuf+0x6a>
   258d8:	aa05      	add	r2, sp, #20
   258da:	4633      	mov	r3, r6
   258dc:	9201      	str	r2, [sp, #4]
   258de:	2103      	movs	r1, #3
   258e0:	4622      	mov	r2, r4
   258e2:	f8cd 8000 	str.w	r8, [sp]
   258e6:	4638      	mov	r0, r7
   258e8:	f000 f962 	bl	25bb0 <_dtoa_r>
   258ec:	9b05      	ldr	r3, [sp, #20]
   258ee:	6832      	ldr	r2, [r6, #0]
   258f0:	4298      	cmp	r0, r3
   258f2:	4684      	mov	ip, r0
   258f4:	f1c2 0200 	rsb	r2, r2, #0
   258f8:	4629      	mov	r1, r5
   258fa:	d209      	bcs.n	25910 <fcvtbuf+0x4c>
   258fc:	1a10      	subs	r0, r2, r0
   258fe:	f81c 3b01 	ldrb.w	r3, [ip], #1
   25902:	f801 3b01 	strb.w	r3, [r1], #1
   25906:	9b05      	ldr	r3, [sp, #20]
   25908:	4563      	cmp	r3, ip
   2590a:	eb00 020c 	add.w	r2, r0, ip
   2590e:	d8f6      	bhi.n	258fe <fcvtbuf+0x3a>
   25910:	4294      	cmp	r4, r2
   25912:	dd24      	ble.n	2595e <fcvtbuf+0x9a>
   25914:	1aa2      	subs	r2, r4, r2
   25916:	440a      	add	r2, r1
   25918:	2330      	movs	r3, #48	; 0x30
   2591a:	f801 3b01 	strb.w	r3, [r1], #1
   2591e:	4291      	cmp	r1, r2
   25920:	d1fb      	bne.n	2591a <fcvtbuf+0x56>
   25922:	2300      	movs	r3, #0
   25924:	7013      	strb	r3, [r2, #0]
   25926:	4628      	mov	r0, r5
   25928:	b007      	add	sp, #28
   2592a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2592e:	6cba      	ldr	r2, [r7, #72]	; 0x48
   25930:	f100 0323 	add.w	r3, r0, #35	; 0x23
   25934:	429a      	cmp	r2, r3
   25936:	dd01      	ble.n	2593c <fcvtbuf+0x78>
   25938:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
   2593a:	e7cd      	b.n	258d8 <fcvtbuf+0x14>
   2593c:	f100 0924 	add.w	r9, r0, #36	; 0x24
   25940:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
   25942:	464a      	mov	r2, r9
   25944:	4638      	mov	r0, r7
   25946:	ed8d 0b02 	vstr	d0, [sp, #8]
   2594a:	f7fb fee1 	bl	21710 <_realloc_r>
   2594e:	4605      	mov	r5, r0
   25950:	2800      	cmp	r0, #0
   25952:	d0e8      	beq.n	25926 <fcvtbuf+0x62>
   25954:	e9c7 9012 	strd	r9, r0, [r7, #72]	; 0x48
   25958:	ed9d 0b02 	vldr	d0, [sp, #8]
   2595c:	e7bc      	b.n	258d8 <fcvtbuf+0x14>
   2595e:	460a      	mov	r2, r1
   25960:	e7df      	b.n	25922 <fcvtbuf+0x5e>
   25962:	bf00      	nop
   25964:	200038c4 	.word	0x200038c4

00025968 <_wcrtomb_r>:
   25968:	b570      	push	{r4, r5, r6, lr}
   2596a:	4605      	mov	r5, r0
   2596c:	b084      	sub	sp, #16
   2596e:	b15b      	cbz	r3, 25988 <_wcrtomb_r+0x20>
   25970:	461c      	mov	r4, r3
   25972:	b169      	cbz	r1, 25990 <_wcrtomb_r+0x28>
   25974:	4b0e      	ldr	r3, [pc, #56]	; (259b0 <_wcrtomb_r+0x48>)
   25976:	4628      	mov	r0, r5
   25978:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   2597c:	4623      	mov	r3, r4
   2597e:	47b0      	blx	r6
   25980:	1c43      	adds	r3, r0, #1
   25982:	d00f      	beq.n	259a4 <_wcrtomb_r+0x3c>
   25984:	b004      	add	sp, #16
   25986:	bd70      	pop	{r4, r5, r6, pc}
   25988:	f500 7482 	add.w	r4, r0, #260	; 0x104
   2598c:	2900      	cmp	r1, #0
   2598e:	d1f1      	bne.n	25974 <_wcrtomb_r+0xc>
   25990:	4a07      	ldr	r2, [pc, #28]	; (259b0 <_wcrtomb_r+0x48>)
   25992:	4623      	mov	r3, r4
   25994:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   25998:	4628      	mov	r0, r5
   2599a:	460a      	mov	r2, r1
   2599c:	a901      	add	r1, sp, #4
   2599e:	47b0      	blx	r6
   259a0:	1c43      	adds	r3, r0, #1
   259a2:	d1ef      	bne.n	25984 <_wcrtomb_r+0x1c>
   259a4:	2200      	movs	r2, #0
   259a6:	238a      	movs	r3, #138	; 0x8a
   259a8:	6022      	str	r2, [r4, #0]
   259aa:	602b      	str	r3, [r5, #0]
   259ac:	b004      	add	sp, #16
   259ae:	bd70      	pop	{r4, r5, r6, pc}
   259b0:	2000333c 	.word	0x2000333c

000259b4 <_wcsrtombs_r>:
   259b4:	b510      	push	{r4, lr}
   259b6:	b082      	sub	sp, #8
   259b8:	9c04      	ldr	r4, [sp, #16]
   259ba:	e9cd 3400 	strd	r3, r4, [sp]
   259be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   259c2:	f002 f94f 	bl	27c64 <_wcsnrtombs_r>
   259c6:	b002      	add	sp, #8
   259c8:	bd10      	pop	{r4, pc}
   259ca:	bf00      	nop
   259cc:	0000      	movs	r0, r0
	...

000259d0 <frexp>:
   259d0:	b430      	push	{r4, r5}
   259d2:	b082      	sub	sp, #8
   259d4:	ed8d 0b00 	vstr	d0, [sp]
   259d8:	9a01      	ldr	r2, [sp, #4]
   259da:	4c19      	ldr	r4, [pc, #100]	; (25a40 <frexp+0x70>)
   259dc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   259e0:	2100      	movs	r1, #0
   259e2:	42a3      	cmp	r3, r4
   259e4:	6001      	str	r1, [r0, #0]
   259e6:	dc21      	bgt.n	25a2c <frexp+0x5c>
   259e8:	9c00      	ldr	r4, [sp, #0]
   259ea:	431c      	orrs	r4, r3
   259ec:	d01e      	beq.n	25a2c <frexp+0x5c>
   259ee:	4c15      	ldr	r4, [pc, #84]	; (25a44 <frexp+0x74>)
   259f0:	4014      	ands	r4, r2
   259f2:	b954      	cbnz	r4, 25a0a <frexp+0x3a>
   259f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 25a38 <frexp+0x68>
   259f8:	ee20 7b07 	vmul.f64	d7, d0, d7
   259fc:	ed8d 7b00 	vstr	d7, [sp]
   25a00:	9a01      	ldr	r2, [sp, #4]
   25a02:	f06f 0135 	mvn.w	r1, #53	; 0x35
   25a06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
   25a0a:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   25a0e:	e9dd 4500 	ldrd	r4, r5, [sp]
   25a12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   25a16:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   25a1a:	151b      	asrs	r3, r3, #20
   25a1c:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   25a20:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   25a24:	e9cd 4500 	strd	r4, r5, [sp]
   25a28:	440b      	add	r3, r1
   25a2a:	6003      	str	r3, [r0, #0]
   25a2c:	ed9d 0b00 	vldr	d0, [sp]
   25a30:	b002      	add	sp, #8
   25a32:	bc30      	pop	{r4, r5}
   25a34:	4770      	bx	lr
   25a36:	bf00      	nop
   25a38:	00000000 	.word	0x00000000
   25a3c:	43500000 	.word	0x43500000
   25a40:	7fefffff 	.word	0x7fefffff
   25a44:	7ff00000 	.word	0x7ff00000

00025a48 <__assert_func>:
   25a48:	b500      	push	{lr}
   25a4a:	4c0b      	ldr	r4, [pc, #44]	; (25a78 <__assert_func+0x30>)
   25a4c:	6825      	ldr	r5, [r4, #0]
   25a4e:	4614      	mov	r4, r2
   25a50:	68ee      	ldr	r6, [r5, #12]
   25a52:	461a      	mov	r2, r3
   25a54:	b085      	sub	sp, #20
   25a56:	4603      	mov	r3, r0
   25a58:	460d      	mov	r5, r1
   25a5a:	b14c      	cbz	r4, 25a70 <__assert_func+0x28>
   25a5c:	4907      	ldr	r1, [pc, #28]	; (25a7c <__assert_func+0x34>)
   25a5e:	9500      	str	r5, [sp, #0]
   25a60:	e9cd 1401 	strd	r1, r4, [sp, #4]
   25a64:	4630      	mov	r0, r6
   25a66:	4906      	ldr	r1, [pc, #24]	; (25a80 <__assert_func+0x38>)
   25a68:	f000 ff18 	bl	2689c <fiprintf>
   25a6c:	f7f1 f9ca 	bl	16e04 <abort>
   25a70:	4904      	ldr	r1, [pc, #16]	; (25a84 <__assert_func+0x3c>)
   25a72:	460c      	mov	r4, r1
   25a74:	e7f3      	b.n	25a5e <__assert_func+0x16>
   25a76:	bf00      	nop
   25a78:	200038c4 	.word	0x200038c4
   25a7c:	2000174c 	.word	0x2000174c
   25a80:	2000175c 	.word	0x2000175c
   25a84:	20000ec0 	.word	0x20000ec0

00025a88 <quorem>:
   25a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a8c:	6903      	ldr	r3, [r0, #16]
   25a8e:	690c      	ldr	r4, [r1, #16]
   25a90:	42a3      	cmp	r3, r4
   25a92:	b083      	sub	sp, #12
   25a94:	f2c0 8087 	blt.w	25ba6 <quorem+0x11e>
   25a98:	3c01      	subs	r4, #1
   25a9a:	f101 0514 	add.w	r5, r1, #20
   25a9e:	00a3      	lsls	r3, r4, #2
   25aa0:	f100 0814 	add.w	r8, r0, #20
   25aa4:	9300      	str	r3, [sp, #0]
   25aa6:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   25aaa:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   25aae:	3301      	adds	r3, #1
   25ab0:	4681      	mov	r9, r0
   25ab2:	429a      	cmp	r2, r3
   25ab4:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   25ab8:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   25abc:	9001      	str	r0, [sp, #4]
   25abe:	fbb2 f6f3 	udiv	r6, r2, r3
   25ac2:	d33b      	bcc.n	25b3c <quorem+0xb4>
   25ac4:	f04f 0c00 	mov.w	ip, #0
   25ac8:	46ae      	mov	lr, r5
   25aca:	4640      	mov	r0, r8
   25acc:	46e2      	mov	sl, ip
   25ace:	4663      	mov	r3, ip
   25ad0:	f85e bb04 	ldr.w	fp, [lr], #4
   25ad4:	6802      	ldr	r2, [r0, #0]
   25ad6:	fa1f fc8b 	uxth.w	ip, fp
   25ada:	fb06 330c 	mla	r3, r6, ip, r3
   25ade:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   25ae2:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   25ae6:	fb06 cc0b 	mla	ip, r6, fp, ip
   25aea:	b29b      	uxth	r3, r3
   25aec:	ebaa 0303 	sub.w	r3, sl, r3
   25af0:	fa1f fa8c 	uxth.w	sl, ip
   25af4:	fa13 f382 	uxtah	r3, r3, r2
   25af8:	ebca 4212 	rsb	r2, sl, r2, lsr #16
   25afc:	eb02 4223 	add.w	r2, r2, r3, asr #16
   25b00:	b29b      	uxth	r3, r3
   25b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   25b06:	4577      	cmp	r7, lr
   25b08:	f840 3b04 	str.w	r3, [r0], #4
   25b0c:	ea4f 4a22 	mov.w	sl, r2, asr #16
   25b10:	ea4f 431c 	mov.w	r3, ip, lsr #16
   25b14:	d2dc      	bcs.n	25ad0 <quorem+0x48>
   25b16:	9b00      	ldr	r3, [sp, #0]
   25b18:	f858 3003 	ldr.w	r3, [r8, r3]
   25b1c:	b973      	cbnz	r3, 25b3c <quorem+0xb4>
   25b1e:	9b01      	ldr	r3, [sp, #4]
   25b20:	3b04      	subs	r3, #4
   25b22:	4598      	cmp	r8, r3
   25b24:	d304      	bcc.n	25b30 <quorem+0xa8>
   25b26:	e007      	b.n	25b38 <quorem+0xb0>
   25b28:	4598      	cmp	r8, r3
   25b2a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   25b2e:	d203      	bcs.n	25b38 <quorem+0xb0>
   25b30:	f853 2904 	ldr.w	r2, [r3], #-4
   25b34:	2a00      	cmp	r2, #0
   25b36:	d0f7      	beq.n	25b28 <quorem+0xa0>
   25b38:	f8c9 4010 	str.w	r4, [r9, #16]
   25b3c:	4648      	mov	r0, r9
   25b3e:	f7ff fb4f 	bl	251e0 <__mcmp>
   25b42:	2800      	cmp	r0, #0
   25b44:	db2b      	blt.n	25b9e <quorem+0x116>
   25b46:	3601      	adds	r6, #1
   25b48:	4641      	mov	r1, r8
   25b4a:	2300      	movs	r3, #0
   25b4c:	f855 0b04 	ldr.w	r0, [r5], #4
   25b50:	f8d1 c000 	ldr.w	ip, [r1]
   25b54:	b282      	uxth	r2, r0
   25b56:	1a9a      	subs	r2, r3, r2
   25b58:	0c03      	lsrs	r3, r0, #16
   25b5a:	fa12 f28c 	uxtah	r2, r2, ip
   25b5e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   25b62:	eb03 4322 	add.w	r3, r3, r2, asr #16
   25b66:	b292      	uxth	r2, r2
   25b68:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   25b6c:	42af      	cmp	r7, r5
   25b6e:	f841 2b04 	str.w	r2, [r1], #4
   25b72:	ea4f 4323 	mov.w	r3, r3, asr #16
   25b76:	d2e9      	bcs.n	25b4c <quorem+0xc4>
   25b78:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   25b7c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   25b80:	b96a      	cbnz	r2, 25b9e <quorem+0x116>
   25b82:	3b04      	subs	r3, #4
   25b84:	4598      	cmp	r8, r3
   25b86:	d304      	bcc.n	25b92 <quorem+0x10a>
   25b88:	e007      	b.n	25b9a <quorem+0x112>
   25b8a:	4598      	cmp	r8, r3
   25b8c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   25b90:	d203      	bcs.n	25b9a <quorem+0x112>
   25b92:	f853 2904 	ldr.w	r2, [r3], #-4
   25b96:	2a00      	cmp	r2, #0
   25b98:	d0f7      	beq.n	25b8a <quorem+0x102>
   25b9a:	f8c9 4010 	str.w	r4, [r9, #16]
   25b9e:	4630      	mov	r0, r6
   25ba0:	b003      	add	sp, #12
   25ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25ba6:	2000      	movs	r0, #0
   25ba8:	b003      	add	sp, #12
   25baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25bae:	bf00      	nop

00025bb0 <_dtoa_r>:
   25bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25bb4:	ed2d 8b02 	vpush	{d8}
   25bb8:	b08f      	sub	sp, #60	; 0x3c
   25bba:	ed8d 0b02 	vstr	d0, [sp, #8]
   25bbe:	9101      	str	r1, [sp, #4]
   25bc0:	6b81      	ldr	r1, [r0, #56]	; 0x38
   25bc2:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   25bc4:	9305      	str	r3, [sp, #20]
   25bc6:	ec57 6b10 	vmov	r6, r7, d0
   25bca:	4604      	mov	r4, r0
   25bcc:	4693      	mov	fp, r2
   25bce:	b141      	cbz	r1, 25be2 <_dtoa_r+0x32>
   25bd0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   25bd2:	604a      	str	r2, [r1, #4]
   25bd4:	2301      	movs	r3, #1
   25bd6:	4093      	lsls	r3, r2
   25bd8:	608b      	str	r3, [r1, #8]
   25bda:	f7ff f8a1 	bl	24d20 <_Bfree>
   25bde:	2300      	movs	r3, #0
   25be0:	63a3      	str	r3, [r4, #56]	; 0x38
   25be2:	f1b7 0800 	subs.w	r8, r7, #0
   25be6:	bfb4      	ite	lt
   25be8:	2301      	movlt	r3, #1
   25bea:	2300      	movge	r3, #0
   25bec:	602b      	str	r3, [r5, #0]
   25bee:	4bbe      	ldr	r3, [pc, #760]	; (25ee8 <_dtoa_r+0x338>)
   25bf0:	bfbc      	itt	lt
   25bf2:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
   25bf6:	f8cd 800c 	strlt.w	r8, [sp, #12]
   25bfa:	ea33 0308 	bics.w	r3, r3, r8
   25bfe:	f000 809f 	beq.w	25d40 <_dtoa_r+0x190>
   25c02:	ed9d 8b02 	vldr	d8, [sp, #8]
   25c06:	eeb5 8b40 	vcmp.f64	d8, #0.0
   25c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25c0e:	d111      	bne.n	25c34 <_dtoa_r+0x84>
   25c10:	9a05      	ldr	r2, [sp, #20]
   25c12:	2301      	movs	r3, #1
   25c14:	6013      	str	r3, [r2, #0]
   25c16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25c18:	2b00      	cmp	r3, #0
   25c1a:	f000 823f 	beq.w	2609c <_dtoa_r+0x4ec>
   25c1e:	4bb3      	ldr	r3, [pc, #716]	; (25eec <_dtoa_r+0x33c>)
   25c20:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   25c22:	6013      	str	r3, [r2, #0]
   25c24:	3b01      	subs	r3, #1
   25c26:	9300      	str	r3, [sp, #0]
   25c28:	9800      	ldr	r0, [sp, #0]
   25c2a:	b00f      	add	sp, #60	; 0x3c
   25c2c:	ecbd 8b02 	vpop	{d8}
   25c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c34:	aa0c      	add	r2, sp, #48	; 0x30
   25c36:	a90d      	add	r1, sp, #52	; 0x34
   25c38:	4620      	mov	r0, r4
   25c3a:	eeb0 0b48 	vmov.f64	d0, d8
   25c3e:	f7ff fb9b 	bl	25378 <__d2b>
   25c42:	ea5f 5318 	movs.w	r3, r8, lsr #20
   25c46:	4605      	mov	r5, r0
   25c48:	f040 8092 	bne.w	25d70 <_dtoa_r+0x1c0>
   25c4c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
   25c50:	440b      	add	r3, r1
   25c52:	f203 4232 	addw	r2, r3, #1074	; 0x432
   25c56:	2a20      	cmp	r2, #32
   25c58:	f340 82fa 	ble.w	26250 <_dtoa_r+0x6a0>
   25c5c:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
   25c60:	fa08 f802 	lsl.w	r8, r8, r2
   25c64:	f203 4212 	addw	r2, r3, #1042	; 0x412
   25c68:	40d6      	lsrs	r6, r2
   25c6a:	ea48 0206 	orr.w	r2, r8, r6
   25c6e:	ee07 2a10 	vmov	s14, r2
   25c72:	eeb8 7b47 	vcvt.f64.u32	d7, s14
   25c76:	1e58      	subs	r0, r3, #1
   25c78:	ee17 6a90 	vmov	r6, s15
   25c7c:	ec53 2b17 	vmov	r2, r3, d7
   25c80:	f04f 0a01 	mov.w	sl, #1
   25c84:	f1a6 73f8 	sub.w	r3, r6, #32505856	; 0x1f00000
   25c88:	ed9f 3b91 	vldr	d3, [pc, #580]	; 25ed0 <_dtoa_r+0x320>
   25c8c:	ed9f 7b92 	vldr	d7, [pc, #584]	; 25ed8 <_dtoa_r+0x328>
   25c90:	ed9f 5b93 	vldr	d5, [pc, #588]	; 25ee0 <_dtoa_r+0x330>
   25c94:	ee06 0a90 	vmov	s13, r0
   25c98:	ec43 2b12 	vmov	d2, r2, r3
   25c9c:	eeb8 4be6 	vcvt.f64.s32	d4, s13
   25ca0:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
   25ca4:	ee32 6b46 	vsub.f64	d6, d2, d6
   25ca8:	eea6 7b03 	vfma.f64	d7, d6, d3
   25cac:	eea4 7b05 	vfma.f64	d7, d4, d5
   25cb0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   25cb4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
   25cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25cbc:	ee16 7a90 	vmov	r7, s13
   25cc0:	d508      	bpl.n	25cd4 <_dtoa_r+0x124>
   25cc2:	eeb8 6be6 	vcvt.f64.s32	d6, s13
   25cc6:	eeb4 6b47 	vcmp.f64	d6, d7
   25cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25cce:	bf18      	it	ne
   25cd0:	f107 37ff 	addne.w	r7, r7, #4294967295	; 0xffffffff
   25cd4:	2f16      	cmp	r7, #22
   25cd6:	f200 8145 	bhi.w	25f64 <_dtoa_r+0x3b4>
   25cda:	4b85      	ldr	r3, [pc, #532]	; (25ef0 <_dtoa_r+0x340>)
   25cdc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
   25ce0:	ed93 7b00 	vldr	d7, [r3]
   25ce4:	eeb4 8bc7 	vcmpe.f64	d8, d7
   25ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25cec:	d557      	bpl.n	25d9e <_dtoa_r+0x1ee>
   25cee:	1a09      	subs	r1, r1, r0
   25cf0:	2300      	movs	r3, #0
   25cf2:	f1b1 0801 	subs.w	r8, r1, #1
   25cf6:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
   25cfa:	930a      	str	r3, [sp, #40]	; 0x28
   25cfc:	f100 8139 	bmi.w	25f72 <_dtoa_r+0x3c2>
   25d00:	2300      	movs	r3, #0
   25d02:	9306      	str	r3, [sp, #24]
   25d04:	2f00      	cmp	r7, #0
   25d06:	da52      	bge.n	25dae <_dtoa_r+0x1fe>
   25d08:	9b06      	ldr	r3, [sp, #24]
   25d0a:	9704      	str	r7, [sp, #16]
   25d0c:	1bdb      	subs	r3, r3, r7
   25d0e:	9306      	str	r3, [sp, #24]
   25d10:	427b      	negs	r3, r7
   25d12:	9308      	str	r3, [sp, #32]
   25d14:	9b01      	ldr	r3, [sp, #4]
   25d16:	2b09      	cmp	r3, #9
   25d18:	f04f 0700 	mov.w	r7, #0
   25d1c:	d84e      	bhi.n	25dbc <_dtoa_r+0x20c>
   25d1e:	2b05      	cmp	r3, #5
   25d20:	f340 829d 	ble.w	2625e <_dtoa_r+0x6ae>
   25d24:	3b04      	subs	r3, #4
   25d26:	9301      	str	r3, [sp, #4]
   25d28:	2600      	movs	r6, #0
   25d2a:	9b01      	ldr	r3, [sp, #4]
   25d2c:	1e9a      	subs	r2, r3, #2
   25d2e:	2a03      	cmp	r2, #3
   25d30:	f200 8125 	bhi.w	25f7e <_dtoa_r+0x3ce>
   25d34:	e8df f012 	tbh	[pc, r2, lsl #1]
   25d38:	03a703aa 	.word	0x03a703aa
   25d3c:	037e039d 	.word	0x037e039d
   25d40:	9a05      	ldr	r2, [sp, #20]
   25d42:	f3c8 0813 	ubfx	r8, r8, #0, #20
   25d46:	f242 730f 	movw	r3, #9999	; 0x270f
   25d4a:	ea58 0806 	orrs.w	r8, r8, r6
   25d4e:	6013      	str	r3, [r2, #0]
   25d50:	d11e      	bne.n	25d90 <_dtoa_r+0x1e0>
   25d52:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25d54:	2b00      	cmp	r3, #0
   25d56:	f000 8591 	beq.w	2687c <_dtoa_r+0xccc>
   25d5a:	4b66      	ldr	r3, [pc, #408]	; (25ef4 <_dtoa_r+0x344>)
   25d5c:	9300      	str	r3, [sp, #0]
   25d5e:	3308      	adds	r3, #8
   25d60:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   25d62:	9800      	ldr	r0, [sp, #0]
   25d64:	6013      	str	r3, [r2, #0]
   25d66:	b00f      	add	sp, #60	; 0x3c
   25d68:	ecbd 8b02 	vpop	{d8}
   25d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25d70:	ee18 6a90 	vmov	r6, s17
   25d74:	f3c6 0613 	ubfx	r6, r6, #0, #20
   25d78:	f2a3 30ff 	subw	r0, r3, #1023	; 0x3ff
   25d7c:	ec53 2b18 	vmov	r2, r3, d8
   25d80:	f046 537f 	orr.w	r3, r6, #1069547520	; 0x3fc00000
   25d84:	990c      	ldr	r1, [sp, #48]	; 0x30
   25d86:	f04f 0a00 	mov.w	sl, #0
   25d8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   25d8e:	e77b      	b.n	25c88 <_dtoa_r+0xd8>
   25d90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   25d92:	2b00      	cmp	r3, #0
   25d94:	f040 833b 	bne.w	2640e <_dtoa_r+0x85e>
   25d98:	4b57      	ldr	r3, [pc, #348]	; (25ef8 <_dtoa_r+0x348>)
   25d9a:	9300      	str	r3, [sp, #0]
   25d9c:	e744      	b.n	25c28 <_dtoa_r+0x78>
   25d9e:	1a09      	subs	r1, r1, r0
   25da0:	2300      	movs	r3, #0
   25da2:	f1b1 0801 	subs.w	r8, r1, #1
   25da6:	930a      	str	r3, [sp, #40]	; 0x28
   25da8:	f100 80e3 	bmi.w	25f72 <_dtoa_r+0x3c2>
   25dac:	9306      	str	r3, [sp, #24]
   25dae:	2300      	movs	r3, #0
   25db0:	9308      	str	r3, [sp, #32]
   25db2:	9b01      	ldr	r3, [sp, #4]
   25db4:	9704      	str	r7, [sp, #16]
   25db6:	2b09      	cmp	r3, #9
   25db8:	44b8      	add	r8, r7
   25dba:	d9b0      	bls.n	25d1e <_dtoa_r+0x16e>
   25dbc:	2300      	movs	r3, #0
   25dbe:	2601      	movs	r6, #1
   25dc0:	9301      	str	r3, [sp, #4]
   25dc2:	9607      	str	r6, [sp, #28]
   25dc4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   25dc8:	469b      	mov	fp, r3
   25dca:	2100      	movs	r1, #0
   25dcc:	63e1      	str	r1, [r4, #60]	; 0x3c
   25dce:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   25dd2:	4620      	mov	r0, r4
   25dd4:	f7fe ff7e 	bl	24cd4 <_Balloc>
   25dd8:	9000      	str	r0, [sp, #0]
   25dda:	2800      	cmp	r0, #0
   25ddc:	f000 8540 	beq.w	26860 <_dtoa_r+0xcb0>
   25de0:	9b00      	ldr	r3, [sp, #0]
   25de2:	63a3      	str	r3, [r4, #56]	; 0x38
   25de4:	f1b9 0f0e 	cmp.w	r9, #14
   25de8:	f200 80dc 	bhi.w	25fa4 <_dtoa_r+0x3f4>
   25dec:	2e00      	cmp	r6, #0
   25dee:	f000 80d9 	beq.w	25fa4 <_dtoa_r+0x3f4>
   25df2:	9b04      	ldr	r3, [sp, #16]
   25df4:	2b00      	cmp	r3, #0
   25df6:	f340 83de 	ble.w	265b6 <_dtoa_r+0xa06>
   25dfa:	4a3d      	ldr	r2, [pc, #244]	; (25ef0 <_dtoa_r+0x340>)
   25dfc:	f003 010f 	and.w	r1, r3, #15
   25e00:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
   25e04:	ed92 7b00 	vldr	d7, [r2]
   25e08:	111a      	asrs	r2, r3, #4
   25e0a:	05db      	lsls	r3, r3, #23
   25e0c:	f140 8382 	bpl.w	26514 <_dtoa_r+0x964>
   25e10:	493a      	ldr	r1, [pc, #232]	; (25efc <_dtoa_r+0x34c>)
   25e12:	ed91 6b08 	vldr	d6, [r1, #32]
   25e16:	f002 020f 	and.w	r2, r2, #15
   25e1a:	2003      	movs	r0, #3
   25e1c:	ee88 5b06 	vdiv.f64	d5, d8, d6
   25e20:	b15a      	cbz	r2, 25e3a <_dtoa_r+0x28a>
   25e22:	4936      	ldr	r1, [pc, #216]	; (25efc <_dtoa_r+0x34c>)
   25e24:	07d6      	lsls	r6, r2, #31
   25e26:	d504      	bpl.n	25e32 <_dtoa_r+0x282>
   25e28:	ed91 6b00 	vldr	d6, [r1]
   25e2c:	3001      	adds	r0, #1
   25e2e:	ee27 7b06 	vmul.f64	d7, d7, d6
   25e32:	1052      	asrs	r2, r2, #1
   25e34:	f101 0108 	add.w	r1, r1, #8
   25e38:	d1f4      	bne.n	25e24 <_dtoa_r+0x274>
   25e3a:	ee85 6b07 	vdiv.f64	d6, d5, d7
   25e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   25e40:	b13b      	cbz	r3, 25e52 <_dtoa_r+0x2a2>
   25e42:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
   25e46:	eeb4 6bc7 	vcmpe.f64	d6, d7
   25e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25e4e:	f100 84ae 	bmi.w	267ae <_dtoa_r+0xbfe>
   25e52:	ee07 0a90 	vmov	s15, r0
   25e56:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   25e5a:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   25e5e:	eea5 7b06 	vfma.f64	d7, d5, d6
   25e62:	ee17 2a90 	vmov	r2, s15
   25e66:	ec51 0b17 	vmov	r0, r1, d7
   25e6a:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   25e6e:	f1b9 0f00 	cmp.w	r9, #0
   25e72:	f000 8388 	beq.w	26586 <_dtoa_r+0x9d6>
   25e76:	9e04      	ldr	r6, [sp, #16]
   25e78:	464a      	mov	r2, r9
   25e7a:	9b07      	ldr	r3, [sp, #28]
   25e7c:	2b00      	cmp	r3, #0
   25e7e:	f000 8447 	beq.w	26710 <_dtoa_r+0xb60>
   25e82:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
   25e86:	4b1a      	ldr	r3, [pc, #104]	; (25ef0 <_dtoa_r+0x340>)
   25e88:	eefd 4bc6 	vcvt.s32.f64	s9, d6
   25e8c:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   25e90:	eeb8 7be4 	vcvt.f64.s32	d7, s9
   25e94:	ee36 7b47 	vsub.f64	d7, d6, d7
   25e98:	ed1c 6b02 	vldr	d6, [ip, #-8]
   25e9c:	ee83 5b06 	vdiv.f64	d5, d3, d6
   25ea0:	ec41 0b16 	vmov	d6, r0, r1
   25ea4:	ee14 0a90 	vmov	r0, s9
   25ea8:	ee35 5b46 	vsub.f64	d5, d5, d6
   25eac:	9900      	ldr	r1, [sp, #0]
   25eae:	eeb4 5bc7 	vcmpe.f64	d5, d7
   25eb2:	3030      	adds	r0, #48	; 0x30
   25eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25eb8:	f801 0b01 	strb.w	r0, [r1], #1
   25ebc:	f300 84ac 	bgt.w	26818 <_dtoa_r+0xc68>
   25ec0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
   25ec4:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   25ec8:	f04f 0c00 	mov.w	ip, #0
   25ecc:	e031      	b.n	25f32 <_dtoa_r+0x382>
   25ece:	bf00      	nop
   25ed0:	636f4361 	.word	0x636f4361
   25ed4:	3fd287a7 	.word	0x3fd287a7
   25ed8:	8b60c8b3 	.word	0x8b60c8b3
   25edc:	3fc68a28 	.word	0x3fc68a28
   25ee0:	509f79fb 	.word	0x509f79fb
   25ee4:	3fd34413 	.word	0x3fd34413
   25ee8:	7ff00000 	.word	0x7ff00000
   25eec:	20002835 	.word	0x20002835
   25ef0:	200003f0 	.word	0x200003f0
   25ef4:	20001930 	.word	0x20001930
   25ef8:	2000193c 	.word	0x2000193c
   25efc:	200003c8 	.word	0x200003c8
   25f00:	f10c 0c01 	add.w	ip, ip, #1
   25f04:	4594      	cmp	ip, r2
   25f06:	da4d      	bge.n	25fa4 <_dtoa_r+0x3f4>
   25f08:	ee27 7b04 	vmul.f64	d7, d7, d4
   25f0c:	ee25 5b04 	vmul.f64	d5, d5, d4
   25f10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   25f14:	ee16 3a90 	vmov	r3, s13
   25f18:	eeb8 3be6 	vcvt.f64.s32	d3, s13
   25f1c:	3330      	adds	r3, #48	; 0x30
   25f1e:	ee37 7b43 	vsub.f64	d7, d7, d3
   25f22:	eeb4 7bc5 	vcmpe.f64	d7, d5
   25f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25f2a:	f801 3b01 	strb.w	r3, [r1], #1
   25f2e:	f100 8473 	bmi.w	26818 <_dtoa_r+0xc68>
   25f32:	ee32 6b47 	vsub.f64	d6, d2, d7
   25f36:	eeb4 6bc5 	vcmpe.f64	d6, d5
   25f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25f3e:	d5df      	bpl.n	25f00 <_dtoa_r+0x350>
   25f40:	9a00      	ldr	r2, [sp, #0]
   25f42:	9604      	str	r6, [sp, #16]
   25f44:	e002      	b.n	25f4c <_dtoa_r+0x39c>
   25f46:	428a      	cmp	r2, r1
   25f48:	f000 8450 	beq.w	267ec <_dtoa_r+0xc3c>
   25f4c:	4689      	mov	r9, r1
   25f4e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   25f52:	2b39      	cmp	r3, #57	; 0x39
   25f54:	d0f7      	beq.n	25f46 <_dtoa_r+0x396>
   25f56:	3301      	adds	r3, #1
   25f58:	b2db      	uxtb	r3, r3
   25f5a:	700b      	strb	r3, [r1, #0]
   25f5c:	9b04      	ldr	r3, [sp, #16]
   25f5e:	3301      	adds	r3, #1
   25f60:	9304      	str	r3, [sp, #16]
   25f62:	e155      	b.n	26210 <_dtoa_r+0x660>
   25f64:	1a09      	subs	r1, r1, r0
   25f66:	2301      	movs	r3, #1
   25f68:	f1b1 0801 	subs.w	r8, r1, #1
   25f6c:	930a      	str	r3, [sp, #40]	; 0x28
   25f6e:	f57f aec7 	bpl.w	25d00 <_dtoa_r+0x150>
   25f72:	f1c1 0301 	rsb	r3, r1, #1
   25f76:	9306      	str	r3, [sp, #24]
   25f78:	f04f 0800 	mov.w	r8, #0
   25f7c:	e6c2      	b.n	25d04 <_dtoa_r+0x154>
   25f7e:	2600      	movs	r6, #0
   25f80:	63e6      	str	r6, [r4, #60]	; 0x3c
   25f82:	4631      	mov	r1, r6
   25f84:	4620      	mov	r0, r4
   25f86:	f7fe fea5 	bl	24cd4 <_Balloc>
   25f8a:	9000      	str	r0, [sp, #0]
   25f8c:	2800      	cmp	r0, #0
   25f8e:	f000 8467 	beq.w	26860 <_dtoa_r+0xcb0>
   25f92:	9b00      	ldr	r3, [sp, #0]
   25f94:	63a3      	str	r3, [r4, #56]	; 0x38
   25f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25f9a:	930b      	str	r3, [sp, #44]	; 0x2c
   25f9c:	4699      	mov	r9, r3
   25f9e:	2301      	movs	r3, #1
   25fa0:	46b3      	mov	fp, r6
   25fa2:	9307      	str	r3, [sp, #28]
   25fa4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   25fa6:	2a00      	cmp	r2, #0
   25fa8:	db55      	blt.n	26056 <_dtoa_r+0x4a6>
   25faa:	9904      	ldr	r1, [sp, #16]
   25fac:	290e      	cmp	r1, #14
   25fae:	dc52      	bgt.n	26056 <_dtoa_r+0x4a6>
   25fb0:	4bb7      	ldr	r3, [pc, #732]	; (26290 <_dtoa_r+0x6e0>)
   25fb2:	f1bb 0f00 	cmp.w	fp, #0
   25fb6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
   25fba:	ed93 6b00 	vldr	d6, [r3]
   25fbe:	da15      	bge.n	25fec <_dtoa_r+0x43c>
   25fc0:	f1b9 0f00 	cmp.w	r9, #0
   25fc4:	dc12      	bgt.n	25fec <_dtoa_r+0x43c>
   25fc6:	f040 82f2 	bne.w	265ae <_dtoa_r+0x9fe>
   25fca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   25fce:	ee26 7b07 	vmul.f64	d7, d6, d7
   25fd2:	eeb4 8bc7 	vcmpe.f64	d8, d7
   25fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   25fda:	46ca      	mov	sl, r9
   25fdc:	464e      	mov	r6, r9
   25fde:	f200 826d 	bhi.w	264bc <_dtoa_r+0x90c>
   25fe2:	f8dd 8000 	ldr.w	r8, [sp]
   25fe6:	ea6f 0b0b 	mvn.w	fp, fp
   25fea:	e270      	b.n	264ce <_dtoa_r+0x91e>
   25fec:	ee88 7b06 	vdiv.f64	d7, d8, d6
   25ff0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   25ff4:	9900      	ldr	r1, [sp, #0]
   25ff6:	ee17 3a10 	vmov	r3, s14
   25ffa:	f1b9 0f01 	cmp.w	r9, #1
   25ffe:	f103 0330 	add.w	r3, r3, #48	; 0x30
   26002:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   26006:	f801 3b01 	strb.w	r3, [r1], #1
   2600a:	eea5 8b46 	vfms.f64	d8, d5, d6
   2600e:	f000 8334 	beq.w	2667a <_dtoa_r+0xaca>
   26012:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26016:	2301      	movs	r3, #1
   26018:	e011      	b.n	2603e <_dtoa_r+0x48e>
   2601a:	ee88 7b06 	vdiv.f64	d7, d8, d6
   2601e:	eebd 7bc7 	vcvt.s32.f64	s14, d7
   26022:	3301      	adds	r3, #1
   26024:	ee17 2a10 	vmov	r2, s14
   26028:	454b      	cmp	r3, r9
   2602a:	f102 0230 	add.w	r2, r2, #48	; 0x30
   2602e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
   26032:	f801 2b01 	strb.w	r2, [r1], #1
   26036:	eea5 8b46 	vfms.f64	d8, d5, d6
   2603a:	f000 831e 	beq.w	2667a <_dtoa_r+0xaca>
   2603e:	ee28 8b04 	vmul.f64	d8, d8, d4
   26042:	eeb5 8b40 	vcmp.f64	d8, #0.0
   26046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2604a:	d1e6      	bne.n	2601a <_dtoa_r+0x46a>
   2604c:	9b04      	ldr	r3, [sp, #16]
   2604e:	3301      	adds	r3, #1
   26050:	9304      	str	r3, [sp, #16]
   26052:	4689      	mov	r9, r1
   26054:	e0dc      	b.n	26210 <_dtoa_r+0x660>
   26056:	9b07      	ldr	r3, [sp, #28]
   26058:	b343      	cbz	r3, 260ac <_dtoa_r+0x4fc>
   2605a:	9b01      	ldr	r3, [sp, #4]
   2605c:	2b01      	cmp	r3, #1
   2605e:	f340 8276 	ble.w	2654e <_dtoa_r+0x99e>
   26062:	9b08      	ldr	r3, [sp, #32]
   26064:	f109 3aff 	add.w	sl, r9, #4294967295	; 0xffffffff
   26068:	4553      	cmp	r3, sl
   2606a:	f280 823f 	bge.w	264ec <_dtoa_r+0x93c>
   2606e:	9b08      	ldr	r3, [sp, #32]
   26070:	f8cd a020 	str.w	sl, [sp, #32]
   26074:	ebaa 0203 	sub.w	r2, sl, r3
   26078:	4417      	add	r7, r2
   2607a:	f04f 0a00 	mov.w	sl, #0
   2607e:	f1b9 0f00 	cmp.w	r9, #0
   26082:	f2c0 8325 	blt.w	266d0 <_dtoa_r+0xb20>
   26086:	9b06      	ldr	r3, [sp, #24]
   26088:	9309      	str	r3, [sp, #36]	; 0x24
   2608a:	444b      	add	r3, r9
   2608c:	44c8      	add	r8, r9
   2608e:	9306      	str	r3, [sp, #24]
   26090:	2101      	movs	r1, #1
   26092:	4620      	mov	r0, r4
   26094:	f7fe fef0 	bl	24e78 <__i2b>
   26098:	4606      	mov	r6, r0
   2609a:	e00c      	b.n	260b6 <_dtoa_r+0x506>
   2609c:	4b7d      	ldr	r3, [pc, #500]	; (26294 <_dtoa_r+0x6e4>)
   2609e:	9300      	str	r3, [sp, #0]
   260a0:	9800      	ldr	r0, [sp, #0]
   260a2:	b00f      	add	sp, #60	; 0x3c
   260a4:	ecbd 8b02 	vpop	{d8}
   260a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   260ac:	9b06      	ldr	r3, [sp, #24]
   260ae:	f8dd a020 	ldr.w	sl, [sp, #32]
   260b2:	9e07      	ldr	r6, [sp, #28]
   260b4:	9309      	str	r3, [sp, #36]	; 0x24
   260b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   260b8:	b16b      	cbz	r3, 260d6 <_dtoa_r+0x526>
   260ba:	f1b8 0f00 	cmp.w	r8, #0
   260be:	dd0a      	ble.n	260d6 <_dtoa_r+0x526>
   260c0:	4543      	cmp	r3, r8
   260c2:	9906      	ldr	r1, [sp, #24]
   260c4:	461a      	mov	r2, r3
   260c6:	bfa8      	it	ge
   260c8:	4642      	movge	r2, r8
   260ca:	1a89      	subs	r1, r1, r2
   260cc:	1a9b      	subs	r3, r3, r2
   260ce:	9106      	str	r1, [sp, #24]
   260d0:	9309      	str	r3, [sp, #36]	; 0x24
   260d2:	eba8 0802 	sub.w	r8, r8, r2
   260d6:	9b08      	ldr	r3, [sp, #32]
   260d8:	b163      	cbz	r3, 260f4 <_dtoa_r+0x544>
   260da:	9b07      	ldr	r3, [sp, #28]
   260dc:	2b00      	cmp	r3, #0
   260de:	f000 82a7 	beq.w	26630 <_dtoa_r+0xa80>
   260e2:	f1ba 0f00 	cmp.w	sl, #0
   260e6:	f300 8204 	bgt.w	264f2 <_dtoa_r+0x942>
   260ea:	9b08      	ldr	r3, [sp, #32]
   260ec:	ebb3 020a 	subs.w	r2, r3, sl
   260f0:	f040 82ff 	bne.w	266f2 <_dtoa_r+0xb42>
   260f4:	2101      	movs	r1, #1
   260f6:	4620      	mov	r0, r4
   260f8:	f7fe febe 	bl	24e78 <__i2b>
   260fc:	2f00      	cmp	r7, #0
   260fe:	4682      	mov	sl, r0
   26100:	f300 80af 	bgt.w	26262 <_dtoa_r+0x6b2>
   26104:	9b01      	ldr	r3, [sp, #4]
   26106:	2b01      	cmp	r3, #1
   26108:	f340 8187 	ble.w	2641a <_dtoa_r+0x86a>
   2610c:	2300      	movs	r3, #0
   2610e:	9308      	str	r3, [sp, #32]
   26110:	2001      	movs	r0, #1
   26112:	2f00      	cmp	r7, #0
   26114:	f040 80b1 	bne.w	2627a <_dtoa_r+0x6ca>
   26118:	4440      	add	r0, r8
   2611a:	f010 001f 	ands.w	r0, r0, #31
   2611e:	f000 817a 	beq.w	26416 <_dtoa_r+0x866>
   26122:	f1c0 0220 	rsb	r2, r0, #32
   26126:	2a04      	cmp	r2, #4
   26128:	f300 8088 	bgt.w	2623c <_dtoa_r+0x68c>
   2612c:	f040 81f6 	bne.w	2651c <_dtoa_r+0x96c>
   26130:	9b06      	ldr	r3, [sp, #24]
   26132:	2b00      	cmp	r3, #0
   26134:	dd05      	ble.n	26142 <_dtoa_r+0x592>
   26136:	4629      	mov	r1, r5
   26138:	461a      	mov	r2, r3
   2613a:	4620      	mov	r0, r4
   2613c:	f7fe ffd8 	bl	250f0 <__lshift>
   26140:	4605      	mov	r5, r0
   26142:	f1b8 0f00 	cmp.w	r8, #0
   26146:	dd05      	ble.n	26154 <_dtoa_r+0x5a4>
   26148:	4651      	mov	r1, sl
   2614a:	4642      	mov	r2, r8
   2614c:	4620      	mov	r0, r4
   2614e:	f7fe ffcf 	bl	250f0 <__lshift>
   26152:	4682      	mov	sl, r0
   26154:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   26156:	2b00      	cmp	r3, #0
   26158:	f040 813f 	bne.w	263da <_dtoa_r+0x82a>
   2615c:	f1b9 0f00 	cmp.w	r9, #0
   26160:	f340 8125 	ble.w	263ae <_dtoa_r+0x7fe>
   26164:	9b07      	ldr	r3, [sp, #28]
   26166:	2b00      	cmp	r3, #0
   26168:	f040 80a3 	bne.w	262b2 <_dtoa_r+0x702>
   2616c:	9b04      	ldr	r3, [sp, #16]
   2616e:	3301      	adds	r3, #1
   26170:	9304      	str	r3, [sp, #16]
   26172:	f8dd 8000 	ldr.w	r8, [sp]
   26176:	2701      	movs	r7, #1
   26178:	e007      	b.n	2618a <_dtoa_r+0x5da>
   2617a:	4629      	mov	r1, r5
   2617c:	2300      	movs	r3, #0
   2617e:	220a      	movs	r2, #10
   26180:	4620      	mov	r0, r4
   26182:	f7fe fdd7 	bl	24d34 <__multadd>
   26186:	3701      	adds	r7, #1
   26188:	4605      	mov	r5, r0
   2618a:	4651      	mov	r1, sl
   2618c:	4628      	mov	r0, r5
   2618e:	f7ff fc7b 	bl	25a88 <quorem>
   26192:	45b9      	cmp	r9, r7
   26194:	f100 0030 	add.w	r0, r0, #48	; 0x30
   26198:	f808 0b01 	strb.w	r0, [r8], #1
   2619c:	dced      	bgt.n	2617a <_dtoa_r+0x5ca>
   2619e:	f1b9 0f00 	cmp.w	r9, #0
   261a2:	9a00      	ldr	r2, [sp, #0]
   261a4:	bfcc      	ite	gt
   261a6:	46cb      	movgt	fp, r9
   261a8:	f04f 0b01 	movle.w	fp, #1
   261ac:	4603      	mov	r3, r0
   261ae:	4493      	add	fp, r2
   261b0:	2700      	movs	r7, #0
   261b2:	4629      	mov	r1, r5
   261b4:	2201      	movs	r2, #1
   261b6:	4620      	mov	r0, r4
   261b8:	9301      	str	r3, [sp, #4]
   261ba:	f7fe ff99 	bl	250f0 <__lshift>
   261be:	4651      	mov	r1, sl
   261c0:	4605      	mov	r5, r0
   261c2:	f7ff f80d 	bl	251e0 <__mcmp>
   261c6:	2800      	cmp	r0, #0
   261c8:	f340 81af 	ble.w	2652a <_dtoa_r+0x97a>
   261cc:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   261d0:	9a00      	ldr	r2, [sp, #0]
   261d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   261d6:	e004      	b.n	261e2 <_dtoa_r+0x632>
   261d8:	455a      	cmp	r2, fp
   261da:	f000 81b1 	beq.w	26540 <_dtoa_r+0x990>
   261de:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   261e2:	2b39      	cmp	r3, #57	; 0x39
   261e4:	f10b 0901 	add.w	r9, fp, #1
   261e8:	d0f6      	beq.n	261d8 <_dtoa_r+0x628>
   261ea:	3301      	adds	r3, #1
   261ec:	f88b 3000 	strb.w	r3, [fp]
   261f0:	4651      	mov	r1, sl
   261f2:	4620      	mov	r0, r4
   261f4:	f7fe fd94 	bl	24d20 <_Bfree>
   261f8:	b156      	cbz	r6, 26210 <_dtoa_r+0x660>
   261fa:	b12f      	cbz	r7, 26208 <_dtoa_r+0x658>
   261fc:	42b7      	cmp	r7, r6
   261fe:	d003      	beq.n	26208 <_dtoa_r+0x658>
   26200:	4639      	mov	r1, r7
   26202:	4620      	mov	r0, r4
   26204:	f7fe fd8c 	bl	24d20 <_Bfree>
   26208:	4631      	mov	r1, r6
   2620a:	4620      	mov	r0, r4
   2620c:	f7fe fd88 	bl	24d20 <_Bfree>
   26210:	4629      	mov	r1, r5
   26212:	4620      	mov	r0, r4
   26214:	f7fe fd84 	bl	24d20 <_Bfree>
   26218:	2300      	movs	r3, #0
   2621a:	f889 3000 	strb.w	r3, [r9]
   2621e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   26222:	601a      	str	r2, [r3, #0]
   26224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   26226:	2b00      	cmp	r3, #0
   26228:	f43f acfe 	beq.w	25c28 <_dtoa_r+0x78>
   2622c:	9800      	ldr	r0, [sp, #0]
   2622e:	f8c3 9000 	str.w	r9, [r3]
   26232:	b00f      	add	sp, #60	; 0x3c
   26234:	ecbd 8b02 	vpop	{d8}
   26238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2623c:	f1c0 001c 	rsb	r0, r0, #28
   26240:	9b06      	ldr	r3, [sp, #24]
   26242:	4403      	add	r3, r0
   26244:	9306      	str	r3, [sp, #24]
   26246:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26248:	4403      	add	r3, r0
   2624a:	9309      	str	r3, [sp, #36]	; 0x24
   2624c:	4480      	add	r8, r0
   2624e:	e76f      	b.n	26130 <_dtoa_r+0x580>
   26250:	f1c2 0220 	rsb	r2, r2, #32
   26254:	fa06 f202 	lsl.w	r2, r6, r2
   26258:	ee07 2a10 	vmov	s14, r2
   2625c:	e509      	b.n	25c72 <_dtoa_r+0xc2>
   2625e:	2601      	movs	r6, #1
   26260:	e563      	b.n	25d2a <_dtoa_r+0x17a>
   26262:	4601      	mov	r1, r0
   26264:	463a      	mov	r2, r7
   26266:	4620      	mov	r0, r4
   26268:	f7fe fee2 	bl	25030 <__pow5mult>
   2626c:	9b01      	ldr	r3, [sp, #4]
   2626e:	2b01      	cmp	r3, #1
   26270:	4682      	mov	sl, r0
   26272:	f340 81c5 	ble.w	26600 <_dtoa_r+0xa50>
   26276:	2300      	movs	r3, #0
   26278:	9308      	str	r3, [sp, #32]
   2627a:	f8da 2010 	ldr.w	r2, [sl, #16]
   2627e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
   26282:	6910      	ldr	r0, [r2, #16]
   26284:	f7fe fda8 	bl	24dd8 <__hi0bits>
   26288:	f1c0 0020 	rsb	r0, r0, #32
   2628c:	e744      	b.n	26118 <_dtoa_r+0x568>
   2628e:	bf00      	nop
   26290:	200003f0 	.word	0x200003f0
   26294:	20002834 	.word	0x20002834
   26298:	4631      	mov	r1, r6
   2629a:	2300      	movs	r3, #0
   2629c:	220a      	movs	r2, #10
   2629e:	4620      	mov	r0, r4
   262a0:	f7fe fd48 	bl	24d34 <__multadd>
   262a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   262a6:	2b00      	cmp	r3, #0
   262a8:	4606      	mov	r6, r0
   262aa:	f340 82ce 	ble.w	2684a <_dtoa_r+0xc9a>
   262ae:	9704      	str	r7, [sp, #16]
   262b0:	4699      	mov	r9, r3
   262b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   262b4:	2b00      	cmp	r3, #0
   262b6:	dd05      	ble.n	262c4 <_dtoa_r+0x714>
   262b8:	4631      	mov	r1, r6
   262ba:	461a      	mov	r2, r3
   262bc:	4620      	mov	r0, r4
   262be:	f7fe ff17 	bl	250f0 <__lshift>
   262c2:	4606      	mov	r6, r0
   262c4:	9b08      	ldr	r3, [sp, #32]
   262c6:	2b00      	cmp	r3, #0
   262c8:	f040 81eb 	bne.w	266a2 <_dtoa_r+0xaf2>
   262cc:	46b0      	mov	r8, r6
   262ce:	9b02      	ldr	r3, [sp, #8]
   262d0:	9f00      	ldr	r7, [sp, #0]
   262d2:	f003 0201 	and.w	r2, r3, #1
   262d6:	1e7b      	subs	r3, r7, #1
   262d8:	444b      	add	r3, r9
   262da:	9308      	str	r3, [sp, #32]
   262dc:	9b01      	ldr	r3, [sp, #4]
   262de:	920a      	str	r2, [sp, #40]	; 0x28
   262e0:	4313      	orrs	r3, r2
   262e2:	9309      	str	r3, [sp, #36]	; 0x24
   262e4:	4651      	mov	r1, sl
   262e6:	4628      	mov	r0, r5
   262e8:	f7ff fbce 	bl	25a88 <quorem>
   262ec:	4631      	mov	r1, r6
   262ee:	4683      	mov	fp, r0
   262f0:	4628      	mov	r0, r5
   262f2:	f7fe ff75 	bl	251e0 <__mcmp>
   262f6:	4642      	mov	r2, r8
   262f8:	4651      	mov	r1, sl
   262fa:	4681      	mov	r9, r0
   262fc:	4620      	mov	r0, r4
   262fe:	f7fe ff91 	bl	25224 <__mdiff>
   26302:	68c2      	ldr	r2, [r0, #12]
   26304:	4601      	mov	r1, r0
   26306:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   2630a:	2a00      	cmp	r2, #0
   2630c:	d142      	bne.n	26394 <_dtoa_r+0x7e4>
   2630e:	e9cd 0306 	strd	r0, r3, [sp, #24]
   26312:	4628      	mov	r0, r5
   26314:	f7fe ff64 	bl	251e0 <__mcmp>
   26318:	9906      	ldr	r1, [sp, #24]
   2631a:	9002      	str	r0, [sp, #8]
   2631c:	4620      	mov	r0, r4
   2631e:	f7fe fcff 	bl	24d20 <_Bfree>
   26322:	9a02      	ldr	r2, [sp, #8]
   26324:	9b07      	ldr	r3, [sp, #28]
   26326:	b91a      	cbnz	r2, 26330 <_dtoa_r+0x780>
   26328:	9909      	ldr	r1, [sp, #36]	; 0x24
   2632a:	2900      	cmp	r1, #0
   2632c:	f000 827e 	beq.w	2682c <_dtoa_r+0xc7c>
   26330:	f1b9 0f00 	cmp.w	r9, #0
   26334:	f2c0 8183 	blt.w	2663e <_dtoa_r+0xa8e>
   26338:	9901      	ldr	r1, [sp, #4]
   2633a:	ea49 0901 	orr.w	r9, r9, r1
   2633e:	990a      	ldr	r1, [sp, #40]	; 0x28
   26340:	ea51 0909 	orrs.w	r9, r1, r9
   26344:	f000 817b 	beq.w	2663e <_dtoa_r+0xa8e>
   26348:	2a00      	cmp	r2, #0
   2634a:	f300 81c6 	bgt.w	266da <_dtoa_r+0xb2a>
   2634e:	9a08      	ldr	r2, [sp, #32]
   26350:	703b      	strb	r3, [r7, #0]
   26352:	f107 0901 	add.w	r9, r7, #1
   26356:	4297      	cmp	r7, r2
   26358:	46cb      	mov	fp, r9
   2635a:	f000 81c4 	beq.w	266e6 <_dtoa_r+0xb36>
   2635e:	4629      	mov	r1, r5
   26360:	2300      	movs	r3, #0
   26362:	220a      	movs	r2, #10
   26364:	4620      	mov	r0, r4
   26366:	f7fe fce5 	bl	24d34 <__multadd>
   2636a:	4546      	cmp	r6, r8
   2636c:	4605      	mov	r5, r0
   2636e:	4631      	mov	r1, r6
   26370:	f04f 0300 	mov.w	r3, #0
   26374:	f04f 020a 	mov.w	r2, #10
   26378:	4620      	mov	r0, r4
   2637a:	d012      	beq.n	263a2 <_dtoa_r+0x7f2>
   2637c:	f7fe fcda 	bl	24d34 <__multadd>
   26380:	4641      	mov	r1, r8
   26382:	4606      	mov	r6, r0
   26384:	2300      	movs	r3, #0
   26386:	220a      	movs	r2, #10
   26388:	4620      	mov	r0, r4
   2638a:	f7fe fcd3 	bl	24d34 <__multadd>
   2638e:	464f      	mov	r7, r9
   26390:	4680      	mov	r8, r0
   26392:	e7a7      	b.n	262e4 <_dtoa_r+0x734>
   26394:	4620      	mov	r0, r4
   26396:	9302      	str	r3, [sp, #8]
   26398:	f7fe fcc2 	bl	24d20 <_Bfree>
   2639c:	9b02      	ldr	r3, [sp, #8]
   2639e:	2201      	movs	r2, #1
   263a0:	e7c6      	b.n	26330 <_dtoa_r+0x780>
   263a2:	f7fe fcc7 	bl	24d34 <__multadd>
   263a6:	464f      	mov	r7, r9
   263a8:	4606      	mov	r6, r0
   263aa:	4680      	mov	r8, r0
   263ac:	e79a      	b.n	262e4 <_dtoa_r+0x734>
   263ae:	9b01      	ldr	r3, [sp, #4]
   263b0:	2b02      	cmp	r3, #2
   263b2:	dc71      	bgt.n	26498 <_dtoa_r+0x8e8>
   263b4:	9b07      	ldr	r3, [sp, #28]
   263b6:	2b00      	cmp	r3, #0
   263b8:	f47f af7b 	bne.w	262b2 <_dtoa_r+0x702>
   263bc:	9b04      	ldr	r3, [sp, #16]
   263be:	4651      	mov	r1, sl
   263c0:	3301      	adds	r3, #1
   263c2:	4628      	mov	r0, r5
   263c4:	9304      	str	r3, [sp, #16]
   263c6:	f7ff fb5f 	bl	25a88 <quorem>
   263ca:	f8dd b000 	ldr.w	fp, [sp]
   263ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
   263d2:	f80b 3b01 	strb.w	r3, [fp], #1
   263d6:	2700      	movs	r7, #0
   263d8:	e6eb      	b.n	261b2 <_dtoa_r+0x602>
   263da:	4651      	mov	r1, sl
   263dc:	4628      	mov	r0, r5
   263de:	f7fe feff 	bl	251e0 <__mcmp>
   263e2:	2800      	cmp	r0, #0
   263e4:	f6bf aeba 	bge.w	2615c <_dtoa_r+0x5ac>
   263e8:	4629      	mov	r1, r5
   263ea:	2300      	movs	r3, #0
   263ec:	220a      	movs	r2, #10
   263ee:	4620      	mov	r0, r4
   263f0:	f7fe fca0 	bl	24d34 <__multadd>
   263f4:	9b04      	ldr	r3, [sp, #16]
   263f6:	1e5f      	subs	r7, r3, #1
   263f8:	9b07      	ldr	r3, [sp, #28]
   263fa:	4605      	mov	r5, r0
   263fc:	2b00      	cmp	r3, #0
   263fe:	f47f af4b 	bne.w	26298 <_dtoa_r+0x6e8>
   26402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   26404:	2b00      	cmp	r3, #0
   26406:	f340 8218 	ble.w	2683a <_dtoa_r+0xc8a>
   2640a:	4699      	mov	r9, r3
   2640c:	e6b1      	b.n	26172 <_dtoa_r+0x5c2>
   2640e:	4bbc      	ldr	r3, [pc, #752]	; (26700 <_dtoa_r+0xb50>)
   26410:	9300      	str	r3, [sp, #0]
   26412:	3303      	adds	r3, #3
   26414:	e4a4      	b.n	25d60 <_dtoa_r+0x1b0>
   26416:	201c      	movs	r0, #28
   26418:	e712      	b.n	26240 <_dtoa_r+0x690>
   2641a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2641e:	2800      	cmp	r0, #0
   26420:	f47f ae74 	bne.w	2610c <_dtoa_r+0x55c>
   26424:	f3c1 0213 	ubfx	r2, r1, #0, #20
   26428:	2a00      	cmp	r2, #0
   2642a:	f000 80f4 	beq.w	26616 <_dtoa_r+0xa66>
   2642e:	9b02      	ldr	r3, [sp, #8]
   26430:	9308      	str	r3, [sp, #32]
   26432:	e66d      	b.n	26110 <_dtoa_r+0x560>
   26434:	2301      	movs	r3, #1
   26436:	9307      	str	r3, [sp, #28]
   26438:	9b04      	ldr	r3, [sp, #16]
   2643a:	445b      	add	r3, fp
   2643c:	f103 0901 	add.w	r9, r3, #1
   26440:	f1b9 0f01 	cmp.w	r9, #1
   26444:	46cc      	mov	ip, r9
   26446:	930b      	str	r3, [sp, #44]	; 0x2c
   26448:	bfb8      	it	lt
   2644a:	f04f 0c01 	movlt.w	ip, #1
   2644e:	2100      	movs	r1, #0
   26450:	f1bc 0f17 	cmp.w	ip, #23
   26454:	63e1      	str	r1, [r4, #60]	; 0x3c
   26456:	f77f acbc 	ble.w	25dd2 <_dtoa_r+0x222>
   2645a:	2001      	movs	r0, #1
   2645c:	2204      	movs	r2, #4
   2645e:	0052      	lsls	r2, r2, #1
   26460:	f102 0314 	add.w	r3, r2, #20
   26464:	4563      	cmp	r3, ip
   26466:	4601      	mov	r1, r0
   26468:	f100 0001 	add.w	r0, r0, #1
   2646c:	d9f7      	bls.n	2645e <_dtoa_r+0x8ae>
   2646e:	63e1      	str	r1, [r4, #60]	; 0x3c
   26470:	e4af      	b.n	25dd2 <_dtoa_r+0x222>
   26472:	2301      	movs	r3, #1
   26474:	9307      	str	r3, [sp, #28]
   26476:	f1bb 0f00 	cmp.w	fp, #0
   2647a:	dd52      	ble.n	26522 <_dtoa_r+0x972>
   2647c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   26480:	46d9      	mov	r9, fp
   26482:	46dc      	mov	ip, fp
   26484:	e7e3      	b.n	2644e <_dtoa_r+0x89e>
   26486:	2300      	movs	r3, #0
   26488:	9307      	str	r3, [sp, #28]
   2648a:	e7d5      	b.n	26438 <_dtoa_r+0x888>
   2648c:	2300      	movs	r3, #0
   2648e:	9307      	str	r3, [sp, #28]
   26490:	e7f1      	b.n	26476 <_dtoa_r+0x8c6>
   26492:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   26496:	9704      	str	r7, [sp, #16]
   26498:	f1b9 0f00 	cmp.w	r9, #0
   2649c:	f47f ada1 	bne.w	25fe2 <_dtoa_r+0x432>
   264a0:	4651      	mov	r1, sl
   264a2:	464b      	mov	r3, r9
   264a4:	2205      	movs	r2, #5
   264a6:	4620      	mov	r0, r4
   264a8:	f7fe fc44 	bl	24d34 <__multadd>
   264ac:	4601      	mov	r1, r0
   264ae:	4682      	mov	sl, r0
   264b0:	4628      	mov	r0, r5
   264b2:	f7fe fe95 	bl	251e0 <__mcmp>
   264b6:	2800      	cmp	r0, #0
   264b8:	f77f ad93 	ble.w	25fe2 <_dtoa_r+0x432>
   264bc:	9b04      	ldr	r3, [sp, #16]
   264be:	f103 0b01 	add.w	fp, r3, #1
   264c2:	9b00      	ldr	r3, [sp, #0]
   264c4:	2231      	movs	r2, #49	; 0x31
   264c6:	4698      	mov	r8, r3
   264c8:	f803 2b01 	strb.w	r2, [r3], #1
   264cc:	9300      	str	r3, [sp, #0]
   264ce:	4651      	mov	r1, sl
   264d0:	4620      	mov	r0, r4
   264d2:	f7fe fc25 	bl	24d20 <_Bfree>
   264d6:	f10b 0301 	add.w	r3, fp, #1
   264da:	f8dd 9000 	ldr.w	r9, [sp]
   264de:	9304      	str	r3, [sp, #16]
   264e0:	f8cd 8000 	str.w	r8, [sp]
   264e4:	2e00      	cmp	r6, #0
   264e6:	f47f ae8f 	bne.w	26208 <_dtoa_r+0x658>
   264ea:	e691      	b.n	26210 <_dtoa_r+0x660>
   264ec:	eba3 0a0a 	sub.w	sl, r3, sl
   264f0:	e5c5      	b.n	2607e <_dtoa_r+0x4ce>
   264f2:	4631      	mov	r1, r6
   264f4:	4652      	mov	r2, sl
   264f6:	4620      	mov	r0, r4
   264f8:	f7fe fd9a 	bl	25030 <__pow5mult>
   264fc:	462a      	mov	r2, r5
   264fe:	4601      	mov	r1, r0
   26500:	4606      	mov	r6, r0
   26502:	4620      	mov	r0, r4
   26504:	f7fe fce6 	bl	24ed4 <__multiply>
   26508:	4629      	mov	r1, r5
   2650a:	4605      	mov	r5, r0
   2650c:	4620      	mov	r0, r4
   2650e:	f7fe fc07 	bl	24d20 <_Bfree>
   26512:	e5ea      	b.n	260ea <_dtoa_r+0x53a>
   26514:	2002      	movs	r0, #2
   26516:	eeb0 5b48 	vmov.f64	d5, d8
   2651a:	e481      	b.n	25e20 <_dtoa_r+0x270>
   2651c:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   26520:	e68e      	b.n	26240 <_dtoa_r+0x690>
   26522:	f04f 0b01 	mov.w	fp, #1
   26526:	46d9      	mov	r9, fp
   26528:	e44f      	b.n	25dca <_dtoa_r+0x21a>
   2652a:	d103      	bne.n	26534 <_dtoa_r+0x984>
   2652c:	9b01      	ldr	r3, [sp, #4]
   2652e:	07db      	lsls	r3, r3, #31
   26530:	f53f ae4c 	bmi.w	261cc <_dtoa_r+0x61c>
   26534:	46d9      	mov	r9, fp
   26536:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   2653a:	2b30      	cmp	r3, #48	; 0x30
   2653c:	d0fa      	beq.n	26534 <_dtoa_r+0x984>
   2653e:	e657      	b.n	261f0 <_dtoa_r+0x640>
   26540:	9b04      	ldr	r3, [sp, #16]
   26542:	9a00      	ldr	r2, [sp, #0]
   26544:	3301      	adds	r3, #1
   26546:	9304      	str	r3, [sp, #16]
   26548:	2331      	movs	r3, #49	; 0x31
   2654a:	7013      	strb	r3, [r2, #0]
   2654c:	e650      	b.n	261f0 <_dtoa_r+0x640>
   2654e:	f1ba 0f00 	cmp.w	sl, #0
   26552:	f000 8123 	beq.w	2679c <_dtoa_r+0xbec>
   26556:	f202 4233 	addw	r2, r2, #1075	; 0x433
   2655a:	9b06      	ldr	r3, [sp, #24]
   2655c:	9309      	str	r3, [sp, #36]	; 0x24
   2655e:	4413      	add	r3, r2
   26560:	f8dd a020 	ldr.w	sl, [sp, #32]
   26564:	9306      	str	r3, [sp, #24]
   26566:	4490      	add	r8, r2
   26568:	e592      	b.n	26090 <_dtoa_r+0x4e0>
   2656a:	ee07 0a90 	vmov	s15, r0
   2656e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
   26572:	eeb8 7be7 	vcvt.f64.s32	d7, s15
   26576:	eea6 5b07 	vfma.f64	d5, d6, d7
   2657a:	ee15 2a90 	vmov	r2, s11
   2657e:	ec51 0b15 	vmov	r0, r1, d5
   26582:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
   26586:	ec41 0b15 	vmov	d5, r0, r1
   2658a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
   2658e:	ee36 7b47 	vsub.f64	d7, d6, d7
   26592:	eeb4 7bc5 	vcmpe.f64	d7, d5
   26596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   2659a:	f300 8137 	bgt.w	2680c <_dtoa_r+0xc5c>
   2659e:	eeb1 5b45 	vneg.f64	d5, d5
   265a2:	eeb4 7bc5 	vcmpe.f64	d7, d5
   265a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   265aa:	f57f acfb 	bpl.w	25fa4 <_dtoa_r+0x3f4>
   265ae:	f04f 0a00 	mov.w	sl, #0
   265b2:	4656      	mov	r6, sl
   265b4:	e515      	b.n	25fe2 <_dtoa_r+0x432>
   265b6:	f000 80f5 	beq.w	267a4 <_dtoa_r+0xbf4>
   265ba:	9b04      	ldr	r3, [sp, #16]
   265bc:	4951      	ldr	r1, [pc, #324]	; (26704 <_dtoa_r+0xb54>)
   265be:	425a      	negs	r2, r3
   265c0:	f002 000f 	and.w	r0, r2, #15
   265c4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
   265c8:	ed91 6b00 	vldr	d6, [r1]
   265cc:	1112      	asrs	r2, r2, #4
   265ce:	ee28 6b06 	vmul.f64	d6, d8, d6
   265d2:	f000 8142 	beq.w	2685a <_dtoa_r+0xcaa>
   265d6:	eeb0 7b46 	vmov.f64	d7, d6
   265da:	494b      	ldr	r1, [pc, #300]	; (26708 <_dtoa_r+0xb58>)
   265dc:	2600      	movs	r6, #0
   265de:	2002      	movs	r0, #2
   265e0:	07d3      	lsls	r3, r2, #31
   265e2:	d505      	bpl.n	265f0 <_dtoa_r+0xa40>
   265e4:	ed91 5b00 	vldr	d5, [r1]
   265e8:	3001      	adds	r0, #1
   265ea:	2601      	movs	r6, #1
   265ec:	ee27 7b05 	vmul.f64	d7, d7, d5
   265f0:	1052      	asrs	r2, r2, #1
   265f2:	f101 0108 	add.w	r1, r1, #8
   265f6:	d1f3      	bne.n	265e0 <_dtoa_r+0xa30>
   265f8:	2e00      	cmp	r6, #0
   265fa:	fe06 6b07 	vseleq.f64	d6, d6, d7
   265fe:	e41e      	b.n	25e3e <_dtoa_r+0x28e>
   26600:	9b02      	ldr	r3, [sp, #8]
   26602:	2b00      	cmp	r3, #0
   26604:	f47f ae37 	bne.w	26276 <_dtoa_r+0x6c6>
   26608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2660c:	f3c1 0213 	ubfx	r2, r1, #0, #20
   26610:	2a00      	cmp	r2, #0
   26612:	f040 8137 	bne.w	26884 <_dtoa_r+0xcd4>
   26616:	4a3d      	ldr	r2, [pc, #244]	; (2670c <_dtoa_r+0xb5c>)
   26618:	400a      	ands	r2, r1
   2661a:	2a00      	cmp	r2, #0
   2661c:	f000 80fa 	beq.w	26814 <_dtoa_r+0xc64>
   26620:	9b06      	ldr	r3, [sp, #24]
   26622:	3301      	adds	r3, #1
   26624:	9306      	str	r3, [sp, #24]
   26626:	2301      	movs	r3, #1
   26628:	f108 0801 	add.w	r8, r8, #1
   2662c:	9308      	str	r3, [sp, #32]
   2662e:	e56f      	b.n	26110 <_dtoa_r+0x560>
   26630:	4629      	mov	r1, r5
   26632:	9a08      	ldr	r2, [sp, #32]
   26634:	4620      	mov	r0, r4
   26636:	f7fe fcfb 	bl	25030 <__pow5mult>
   2663a:	4605      	mov	r5, r0
   2663c:	e55a      	b.n	260f4 <_dtoa_r+0x544>
   2663e:	2a00      	cmp	r2, #0
   26640:	dd12      	ble.n	26668 <_dtoa_r+0xab8>
   26642:	4629      	mov	r1, r5
   26644:	2201      	movs	r2, #1
   26646:	4620      	mov	r0, r4
   26648:	9301      	str	r3, [sp, #4]
   2664a:	f7fe fd51 	bl	250f0 <__lshift>
   2664e:	4651      	mov	r1, sl
   26650:	4605      	mov	r5, r0
   26652:	f7fe fdc5 	bl	251e0 <__mcmp>
   26656:	2800      	cmp	r0, #0
   26658:	9b01      	ldr	r3, [sp, #4]
   2665a:	f340 80e1 	ble.w	26820 <_dtoa_r+0xc70>
   2665e:	2b39      	cmp	r3, #57	; 0x39
   26660:	f000 80ca 	beq.w	267f8 <_dtoa_r+0xc48>
   26664:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   26668:	46b9      	mov	r9, r7
   2666a:	f809 3b01 	strb.w	r3, [r9], #1
   2666e:	9b04      	ldr	r3, [sp, #16]
   26670:	3301      	adds	r3, #1
   26672:	4637      	mov	r7, r6
   26674:	9304      	str	r3, [sp, #16]
   26676:	4646      	mov	r6, r8
   26678:	e5ba      	b.n	261f0 <_dtoa_r+0x640>
   2667a:	ee38 8b08 	vadd.f64	d8, d8, d8
   2667e:	eeb4 8bc6 	vcmpe.f64	d8, d6
   26682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26686:	dc0a      	bgt.n	2669e <_dtoa_r+0xaee>
   26688:	eeb4 8b46 	vcmp.f64	d8, d6
   2668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26690:	f47f acdc 	bne.w	2604c <_dtoa_r+0x49c>
   26694:	ee17 3a10 	vmov	r3, s14
   26698:	07d8      	lsls	r0, r3, #31
   2669a:	f57f acd7 	bpl.w	2604c <_dtoa_r+0x49c>
   2669e:	9a00      	ldr	r2, [sp, #0]
   266a0:	e454      	b.n	25f4c <_dtoa_r+0x39c>
   266a2:	6871      	ldr	r1, [r6, #4]
   266a4:	4620      	mov	r0, r4
   266a6:	f7fe fb15 	bl	24cd4 <_Balloc>
   266aa:	4607      	mov	r7, r0
   266ac:	2800      	cmp	r0, #0
   266ae:	f000 80de 	beq.w	2686e <_dtoa_r+0xcbe>
   266b2:	6933      	ldr	r3, [r6, #16]
   266b4:	3302      	adds	r3, #2
   266b6:	009a      	lsls	r2, r3, #2
   266b8:	f106 010c 	add.w	r1, r6, #12
   266bc:	300c      	adds	r0, #12
   266be:	f7ef ff6d 	bl	1659c <memcpy>
   266c2:	4639      	mov	r1, r7
   266c4:	2201      	movs	r2, #1
   266c6:	4620      	mov	r0, r4
   266c8:	f7fe fd12 	bl	250f0 <__lshift>
   266cc:	4680      	mov	r8, r0
   266ce:	e5fe      	b.n	262ce <_dtoa_r+0x71e>
   266d0:	9b06      	ldr	r3, [sp, #24]
   266d2:	eba3 0309 	sub.w	r3, r3, r9
   266d6:	9309      	str	r3, [sp, #36]	; 0x24
   266d8:	e4da      	b.n	26090 <_dtoa_r+0x4e0>
   266da:	2b39      	cmp	r3, #57	; 0x39
   266dc:	f000 808c 	beq.w	267f8 <_dtoa_r+0xc48>
   266e0:	46b9      	mov	r9, r7
   266e2:	3301      	adds	r3, #1
   266e4:	e7c1      	b.n	2666a <_dtoa_r+0xaba>
   266e6:	9a04      	ldr	r2, [sp, #16]
   266e8:	3201      	adds	r2, #1
   266ea:	4637      	mov	r7, r6
   266ec:	9204      	str	r2, [sp, #16]
   266ee:	4646      	mov	r6, r8
   266f0:	e55f      	b.n	261b2 <_dtoa_r+0x602>
   266f2:	4629      	mov	r1, r5
   266f4:	4620      	mov	r0, r4
   266f6:	f7fe fc9b 	bl	25030 <__pow5mult>
   266fa:	4605      	mov	r5, r0
   266fc:	e4fa      	b.n	260f4 <_dtoa_r+0x544>
   266fe:	bf00      	nop
   26700:	2000193c 	.word	0x2000193c
   26704:	200003f0 	.word	0x200003f0
   26708:	200003c8 	.word	0x200003c8
   2670c:	7ff00000 	.word	0x7ff00000
   26710:	4b5e      	ldr	r3, [pc, #376]	; (2688c <_dtoa_r+0xcdc>)
   26712:	eefd 5bc6 	vcvt.s32.f64	s11, d6
   26716:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
   2671a:	ed1c 3b02 	vldr	d3, [ip, #-8]
   2671e:	eeb8 7be5 	vcvt.f64.s32	d7, s11
   26722:	ee36 7b47 	vsub.f64	d7, d6, d7
   26726:	ec41 0b16 	vmov	d6, r0, r1
   2672a:	ee15 1a90 	vmov	r1, s11
   2672e:	ee23 3b06 	vmul.f64	d3, d3, d6
   26732:	9800      	ldr	r0, [sp, #0]
   26734:	3130      	adds	r1, #48	; 0x30
   26736:	2a01      	cmp	r2, #1
   26738:	f800 1b01 	strb.w	r1, [r0], #1
   2673c:	f000 8083 	beq.w	26846 <_dtoa_r+0xc96>
   26740:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   26744:	9b00      	ldr	r3, [sp, #0]
   26746:	1899      	adds	r1, r3, r2
   26748:	ee27 7b04 	vmul.f64	d7, d7, d4
   2674c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
   26750:	ee16 3a90 	vmov	r3, s13
   26754:	3330      	adds	r3, #48	; 0x30
   26756:	f800 3b01 	strb.w	r3, [r0], #1
   2675a:	4281      	cmp	r1, r0
   2675c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
   26760:	ee37 7b45 	vsub.f64	d7, d7, d5
   26764:	d1f0      	bne.n	26748 <_dtoa_r+0xb98>
   26766:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
   2676a:	ee33 5b06 	vadd.f64	d5, d3, d6
   2676e:	eeb4 5bc7 	vcmpe.f64	d5, d7
   26772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26776:	f53f abe3 	bmi.w	25f40 <_dtoa_r+0x390>
   2677a:	ee36 6b43 	vsub.f64	d6, d6, d3
   2677e:	eeb4 6bc7 	vcmpe.f64	d6, d7
   26782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   26786:	f77f ac0d 	ble.w	25fa4 <_dtoa_r+0x3f4>
   2678a:	4689      	mov	r9, r1
   2678c:	3901      	subs	r1, #1
   2678e:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   26792:	2b30      	cmp	r3, #48	; 0x30
   26794:	d0f9      	beq.n	2678a <_dtoa_r+0xbda>
   26796:	1c73      	adds	r3, r6, #1
   26798:	9304      	str	r3, [sp, #16]
   2679a:	e539      	b.n	26210 <_dtoa_r+0x660>
   2679c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2679e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   267a2:	e6da      	b.n	2655a <_dtoa_r+0x9aa>
   267a4:	2002      	movs	r0, #2
   267a6:	eeb0 6b48 	vmov.f64	d6, d8
   267aa:	f7ff bb48 	b.w	25e3e <_dtoa_r+0x28e>
   267ae:	f1b9 0f00 	cmp.w	r9, #0
   267b2:	f43f aeda 	beq.w	2656a <_dtoa_r+0x9ba>
   267b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   267b8:	2a00      	cmp	r2, #0
   267ba:	f77f abf3 	ble.w	25fa4 <_dtoa_r+0x3f4>
   267be:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
   267c2:	ee26 6b04 	vmul.f64	d6, d6, d4
   267c6:	3001      	adds	r0, #1
   267c8:	ee07 0a90 	vmov	s15, r0
   267cc:	9b04      	ldr	r3, [sp, #16]
   267ce:	eeb8 5be7 	vcvt.f64.s32	d5, s15
   267d2:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
   267d6:	eea6 7b05 	vfma.f64	d7, d6, d5
   267da:	ee17 ca90 	vmov	ip, s15
   267de:	ec51 0b17 	vmov	r0, r1, d7
   267e2:	1e5e      	subs	r6, r3, #1
   267e4:	f1ac 7150 	sub.w	r1, ip, #54525952	; 0x3400000
   267e8:	f7ff bb47 	b.w	25e7a <_dtoa_r+0x2ca>
   267ec:	9b04      	ldr	r3, [sp, #16]
   267ee:	3301      	adds	r3, #1
   267f0:	9304      	str	r3, [sp, #16]
   267f2:	2331      	movs	r3, #49	; 0x31
   267f4:	f7ff bbb1 	b.w	25f5a <_dtoa_r+0x3aa>
   267f8:	9b04      	ldr	r3, [sp, #16]
   267fa:	46bb      	mov	fp, r7
   267fc:	3301      	adds	r3, #1
   267fe:	9304      	str	r3, [sp, #16]
   26800:	2339      	movs	r3, #57	; 0x39
   26802:	4637      	mov	r7, r6
   26804:	f80b 3b01 	strb.w	r3, [fp], #1
   26808:	4646      	mov	r6, r8
   2680a:	e4e1      	b.n	261d0 <_dtoa_r+0x620>
   2680c:	f04f 0a00 	mov.w	sl, #0
   26810:	4656      	mov	r6, sl
   26812:	e653      	b.n	264bc <_dtoa_r+0x90c>
   26814:	9208      	str	r2, [sp, #32]
   26816:	e47b      	b.n	26110 <_dtoa_r+0x560>
   26818:	1c73      	adds	r3, r6, #1
   2681a:	9304      	str	r3, [sp, #16]
   2681c:	4689      	mov	r9, r1
   2681e:	e4f7      	b.n	26210 <_dtoa_r+0x660>
   26820:	f47f af22 	bne.w	26668 <_dtoa_r+0xab8>
   26824:	07da      	lsls	r2, r3, #31
   26826:	f57f af1f 	bpl.w	26668 <_dtoa_r+0xab8>
   2682a:	e718      	b.n	2665e <_dtoa_r+0xaae>
   2682c:	2b39      	cmp	r3, #57	; 0x39
   2682e:	d0e3      	beq.n	267f8 <_dtoa_r+0xc48>
   26830:	f1b9 0f00 	cmp.w	r9, #0
   26834:	f73f af16 	bgt.w	26664 <_dtoa_r+0xab4>
   26838:	e716      	b.n	26668 <_dtoa_r+0xab8>
   2683a:	9b01      	ldr	r3, [sp, #4]
   2683c:	2b02      	cmp	r3, #2
   2683e:	f73f ae28 	bgt.w	26492 <_dtoa_r+0x8e2>
   26842:	9704      	str	r7, [sp, #16]
   26844:	e5ba      	b.n	263bc <_dtoa_r+0x80c>
   26846:	4601      	mov	r1, r0
   26848:	e78d      	b.n	26766 <_dtoa_r+0xbb6>
   2684a:	9b01      	ldr	r3, [sp, #4]
   2684c:	2b02      	cmp	r3, #2
   2684e:	f73f ae20 	bgt.w	26492 <_dtoa_r+0x8e2>
   26852:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   26856:	9704      	str	r7, [sp, #16]
   26858:	e52b      	b.n	262b2 <_dtoa_r+0x702>
   2685a:	2002      	movs	r0, #2
   2685c:	f7ff baef 	b.w	25e3e <_dtoa_r+0x28e>
   26860:	4b0b      	ldr	r3, [pc, #44]	; (26890 <_dtoa_r+0xce0>)
   26862:	480c      	ldr	r0, [pc, #48]	; (26894 <_dtoa_r+0xce4>)
   26864:	2200      	movs	r2, #0
   26866:	f240 11af 	movw	r1, #431	; 0x1af
   2686a:	f7ff f8ed 	bl	25a48 <__assert_func>
   2686e:	4b08      	ldr	r3, [pc, #32]	; (26890 <_dtoa_r+0xce0>)
   26870:	4808      	ldr	r0, [pc, #32]	; (26894 <_dtoa_r+0xce4>)
   26872:	463a      	mov	r2, r7
   26874:	f240 21ef 	movw	r1, #751	; 0x2ef
   26878:	f7ff f8e6 	bl	25a48 <__assert_func>
   2687c:	4b06      	ldr	r3, [pc, #24]	; (26898 <_dtoa_r+0xce8>)
   2687e:	9300      	str	r3, [sp, #0]
   26880:	f7ff b9d2 	b.w	25c28 <_dtoa_r+0x78>
   26884:	9b02      	ldr	r3, [sp, #8]
   26886:	9308      	str	r3, [sp, #32]
   26888:	e4f7      	b.n	2627a <_dtoa_r+0x6ca>
   2688a:	bf00      	nop
   2688c:	200003f0 	.word	0x200003f0
   26890:	2000178c 	.word	0x2000178c
   26894:	20001940 	.word	0x20001940
   26898:	20001930 	.word	0x20001930

0002689c <fiprintf>:
   2689c:	b40e      	push	{r1, r2, r3}
   2689e:	b510      	push	{r4, lr}
   268a0:	b083      	sub	sp, #12
   268a2:	ab05      	add	r3, sp, #20
   268a4:	4c06      	ldr	r4, [pc, #24]	; (268c0 <fiprintf+0x24>)
   268a6:	f853 2b04 	ldr.w	r2, [r3], #4
   268aa:	9301      	str	r3, [sp, #4]
   268ac:	4601      	mov	r1, r0
   268ae:	6820      	ldr	r0, [r4, #0]
   268b0:	f000 f8c4 	bl	26a3c <_vfiprintf_r>
   268b4:	b003      	add	sp, #12
   268b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   268ba:	b003      	add	sp, #12
   268bc:	4770      	bx	lr
   268be:	bf00      	nop
   268c0:	200038c4 	.word	0x200038c4

000268c4 <__ssprint_r>:
   268c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   268c8:	6893      	ldr	r3, [r2, #8]
   268ca:	6817      	ldr	r7, [r2, #0]
   268cc:	b083      	sub	sp, #12
   268ce:	4692      	mov	sl, r2
   268d0:	2b00      	cmp	r3, #0
   268d2:	d070      	beq.n	269b6 <__ssprint_r+0xf2>
   268d4:	4681      	mov	r9, r0
   268d6:	688a      	ldr	r2, [r1, #8]
   268d8:	6808      	ldr	r0, [r1, #0]
   268da:	460c      	mov	r4, r1
   268dc:	3708      	adds	r7, #8
   268de:	e043      	b.n	26968 <__ssprint_r+0xa4>
   268e0:	89a3      	ldrh	r3, [r4, #12]
   268e2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   268e6:	d02e      	beq.n	26946 <__ssprint_r+0x82>
   268e8:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   268ec:	eba0 0801 	sub.w	r8, r0, r1
   268f0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   268f4:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   268f8:	f108 0001 	add.w	r0, r8, #1
   268fc:	1076      	asrs	r6, r6, #1
   268fe:	4428      	add	r0, r5
   26900:	42b0      	cmp	r0, r6
   26902:	4632      	mov	r2, r6
   26904:	bf84      	itt	hi
   26906:	4606      	movhi	r6, r0
   26908:	4632      	movhi	r2, r6
   2690a:	055b      	lsls	r3, r3, #21
   2690c:	d537      	bpl.n	2697e <__ssprint_r+0xba>
   2690e:	4611      	mov	r1, r2
   26910:	4648      	mov	r0, r9
   26912:	f7fa fc35 	bl	21180 <_malloc_r>
   26916:	9001      	str	r0, [sp, #4]
   26918:	2800      	cmp	r0, #0
   2691a:	d03a      	beq.n	26992 <__ssprint_r+0xce>
   2691c:	4642      	mov	r2, r8
   2691e:	6921      	ldr	r1, [r4, #16]
   26920:	f7ef fe3c 	bl	1659c <memcpy>
   26924:	89a2      	ldrh	r2, [r4, #12]
   26926:	9b01      	ldr	r3, [sp, #4]
   26928:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2692c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   26930:	81a2      	strh	r2, [r4, #12]
   26932:	eba6 0208 	sub.w	r2, r6, r8
   26936:	eb03 0008 	add.w	r0, r3, r8
   2693a:	6166      	str	r6, [r4, #20]
   2693c:	60a2      	str	r2, [r4, #8]
   2693e:	6123      	str	r3, [r4, #16]
   26940:	6020      	str	r0, [r4, #0]
   26942:	462e      	mov	r6, r5
   26944:	46a8      	mov	r8, r5
   26946:	4642      	mov	r2, r8
   26948:	4659      	mov	r1, fp
   2694a:	f7fb fd4d 	bl	223e8 <memmove>
   2694e:	f8da 3008 	ldr.w	r3, [sl, #8]
   26952:	68a2      	ldr	r2, [r4, #8]
   26954:	6820      	ldr	r0, [r4, #0]
   26956:	1b92      	subs	r2, r2, r6
   26958:	4440      	add	r0, r8
   2695a:	1b5b      	subs	r3, r3, r5
   2695c:	60a2      	str	r2, [r4, #8]
   2695e:	6020      	str	r0, [r4, #0]
   26960:	f8ca 3008 	str.w	r3, [sl, #8]
   26964:	b33b      	cbz	r3, 269b6 <__ssprint_r+0xf2>
   26966:	3708      	adds	r7, #8
   26968:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   2696c:	2d00      	cmp	r5, #0
   2696e:	d0fa      	beq.n	26966 <__ssprint_r+0xa2>
   26970:	42aa      	cmp	r2, r5
   26972:	4616      	mov	r6, r2
   26974:	4690      	mov	r8, r2
   26976:	d9b3      	bls.n	268e0 <__ssprint_r+0x1c>
   26978:	462e      	mov	r6, r5
   2697a:	46a8      	mov	r8, r5
   2697c:	e7e3      	b.n	26946 <__ssprint_r+0x82>
   2697e:	4648      	mov	r0, r9
   26980:	f7fa fec6 	bl	21710 <_realloc_r>
   26984:	4603      	mov	r3, r0
   26986:	2800      	cmp	r0, #0
   26988:	d1d3      	bne.n	26932 <__ssprint_r+0x6e>
   2698a:	6921      	ldr	r1, [r4, #16]
   2698c:	4648      	mov	r0, r9
   2698e:	f7fc fa39 	bl	22e04 <_free_r>
   26992:	89a3      	ldrh	r3, [r4, #12]
   26994:	220c      	movs	r2, #12
   26996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2699a:	f8c9 2000 	str.w	r2, [r9]
   2699e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   269a2:	81a3      	strh	r3, [r4, #12]
   269a4:	2200      	movs	r2, #0
   269a6:	2300      	movs	r3, #0
   269a8:	f8ca 2008 	str.w	r2, [sl, #8]
   269ac:	f8ca 3004 	str.w	r3, [sl, #4]
   269b0:	b003      	add	sp, #12
   269b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269b6:	2000      	movs	r0, #0
   269b8:	2300      	movs	r3, #0
   269ba:	f8ca 3004 	str.w	r3, [sl, #4]
   269be:	b003      	add	sp, #12
   269c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000269c4 <__sprint_r.part.0>:
   269c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   269c8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   269ca:	049c      	lsls	r4, r3, #18
   269cc:	4690      	mov	r8, r2
   269ce:	d52d      	bpl.n	26a2c <__sprint_r.part.0+0x68>
   269d0:	6893      	ldr	r3, [r2, #8]
   269d2:	6812      	ldr	r2, [r2, #0]
   269d4:	b343      	cbz	r3, 26a28 <__sprint_r.part.0+0x64>
   269d6:	468b      	mov	fp, r1
   269d8:	4606      	mov	r6, r0
   269da:	f102 0908 	add.w	r9, r2, #8
   269de:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   269e2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   269e6:	d015      	beq.n	26a14 <__sprint_r.part.0+0x50>
   269e8:	3d04      	subs	r5, #4
   269ea:	2400      	movs	r4, #0
   269ec:	e001      	b.n	269f2 <__sprint_r.part.0+0x2e>
   269ee:	42a7      	cmp	r7, r4
   269f0:	d00e      	beq.n	26a10 <__sprint_r.part.0+0x4c>
   269f2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   269f6:	465a      	mov	r2, fp
   269f8:	4630      	mov	r0, r6
   269fa:	f001 f87b 	bl	27af4 <_fputwc_r>
   269fe:	1c43      	adds	r3, r0, #1
   26a00:	f104 0401 	add.w	r4, r4, #1
   26a04:	d1f3      	bne.n	269ee <__sprint_r.part.0+0x2a>
   26a06:	2300      	movs	r3, #0
   26a08:	e9c8 3301 	strd	r3, r3, [r8, #4]
   26a0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a10:	f8d8 3008 	ldr.w	r3, [r8, #8]
   26a14:	f02a 0a03 	bic.w	sl, sl, #3
   26a18:	eba3 030a 	sub.w	r3, r3, sl
   26a1c:	f8c8 3008 	str.w	r3, [r8, #8]
   26a20:	f109 0908 	add.w	r9, r9, #8
   26a24:	2b00      	cmp	r3, #0
   26a26:	d1da      	bne.n	269de <__sprint_r.part.0+0x1a>
   26a28:	2000      	movs	r0, #0
   26a2a:	e7ec      	b.n	26a06 <__sprint_r.part.0+0x42>
   26a2c:	f7fb fa42 	bl	21eb4 <__sfvwrite_r>
   26a30:	2300      	movs	r3, #0
   26a32:	e9c8 3301 	strd	r3, r3, [r8, #4]
   26a36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26a3a:	bf00      	nop

00026a3c <_vfiprintf_r>:
   26a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a40:	ed2d 8b02 	vpush	{d8}
   26a44:	b0c5      	sub	sp, #276	; 0x114
   26a46:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   26a4a:	4683      	mov	fp, r0
   26a4c:	ee08 1a10 	vmov	s16, r1
   26a50:	4616      	mov	r6, r2
   26a52:	2100      	movs	r1, #0
   26a54:	2208      	movs	r2, #8
   26a56:	4650      	mov	r0, sl
   26a58:	461c      	mov	r4, r3
   26a5a:	9307      	str	r3, [sp, #28]
   26a5c:	f7fb fd40 	bl	224e0 <memset>
   26a60:	f1bb 0f00 	cmp.w	fp, #0
   26a64:	d004      	beq.n	26a70 <_vfiprintf_r+0x34>
   26a66:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   26a6a:	2b00      	cmp	r3, #0
   26a6c:	f000 86a0 	beq.w	277b0 <_vfiprintf_r+0xd74>
   26a70:	ee18 2a10 	vmov	r2, s16
   26a74:	6e53      	ldr	r3, [r2, #100]	; 0x64
   26a76:	07db      	lsls	r3, r3, #31
   26a78:	f140 8513 	bpl.w	274a2 <_vfiprintf_r+0xa66>
   26a7c:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   26a80:	b28a      	uxth	r2, r1
   26a82:	0495      	lsls	r5, r2, #18
   26a84:	d40b      	bmi.n	26a9e <_vfiprintf_r+0x62>
   26a86:	ee18 3a10 	vmov	r3, s16
   26a8a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   26a8e:	8199      	strh	r1, [r3, #12]
   26a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   26a92:	b28a      	uxth	r2, r1
   26a94:	ee18 1a10 	vmov	r1, s16
   26a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   26a9c:	664b      	str	r3, [r1, #100]	; 0x64
   26a9e:	0710      	lsls	r0, r2, #28
   26aa0:	f140 8105 	bpl.w	26cae <_vfiprintf_r+0x272>
   26aa4:	ee18 3a10 	vmov	r3, s16
   26aa8:	691b      	ldr	r3, [r3, #16]
   26aaa:	2b00      	cmp	r3, #0
   26aac:	f000 80ff 	beq.w	26cae <_vfiprintf_r+0x272>
   26ab0:	f002 031a 	and.w	r3, r2, #26
   26ab4:	2b0a      	cmp	r3, #10
   26ab6:	f000 810a 	beq.w	26cce <_vfiprintf_r+0x292>
   26aba:	2300      	movs	r3, #0
   26abc:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   26ac0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   26ac4:	aa1b      	add	r2, sp, #108	; 0x6c
   26ac6:	930c      	str	r3, [sp, #48]	; 0x30
   26ac8:	9218      	str	r2, [sp, #96]	; 0x60
   26aca:	4691      	mov	r9, r2
   26acc:	930b      	str	r3, [sp, #44]	; 0x2c
   26ace:	9305      	str	r3, [sp, #20]
   26ad0:	46b0      	mov	r8, r6
   26ad2:	4644      	mov	r4, r8
   26ad4:	4ba8      	ldr	r3, [pc, #672]	; (26d78 <_vfiprintf_r+0x33c>)
   26ad6:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   26ada:	f7fb fdfd 	bl	226d8 <__locale_mb_cur_max>
   26ade:	4622      	mov	r2, r4
   26ae0:	4603      	mov	r3, r0
   26ae2:	a912      	add	r1, sp, #72	; 0x48
   26ae4:	f8cd a000 	str.w	sl, [sp]
   26ae8:	4658      	mov	r0, fp
   26aea:	47a8      	blx	r5
   26aec:	2800      	cmp	r0, #0
   26aee:	f000 8145 	beq.w	26d7c <_vfiprintf_r+0x340>
   26af2:	f2c0 8139 	blt.w	26d68 <_vfiprintf_r+0x32c>
   26af6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   26af8:	2a25      	cmp	r2, #37	; 0x25
   26afa:	4603      	mov	r3, r0
   26afc:	d001      	beq.n	26b02 <_vfiprintf_r+0xc6>
   26afe:	441c      	add	r4, r3
   26b00:	e7e8      	b.n	26ad4 <_vfiprintf_r+0x98>
   26b02:	ebb4 0608 	subs.w	r6, r4, r8
   26b06:	4605      	mov	r5, r0
   26b08:	f040 813c 	bne.w	26d84 <_vfiprintf_r+0x348>
   26b0c:	2300      	movs	r3, #0
   26b0e:	7861      	ldrb	r1, [r4, #1]
   26b10:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   26b14:	f104 0801 	add.w	r8, r4, #1
   26b18:	9306      	str	r3, [sp, #24]
   26b1a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26b1e:	461e      	mov	r6, r3
   26b20:	242b      	movs	r4, #43	; 0x2b
   26b22:	f108 0801 	add.w	r8, r8, #1
   26b26:	f1a1 0320 	sub.w	r3, r1, #32
   26b2a:	2b5a      	cmp	r3, #90	; 0x5a
   26b2c:	f200 8178 	bhi.w	26e20 <_vfiprintf_r+0x3e4>
   26b30:	e8df f013 	tbh	[pc, r3, lsl #1]
   26b34:	017602b5 	.word	0x017602b5
   26b38:	02b00176 	.word	0x02b00176
   26b3c:	01760176 	.word	0x01760176
   26b40:	006a0176 	.word	0x006a0176
   26b44:	01760176 	.word	0x01760176
   26b48:	028d027d 	.word	0x028d027d
   26b4c:	02880176 	.word	0x02880176
   26b50:	01760297 	.word	0x01760297
   26b54:	005b0292 	.word	0x005b0292
   26b58:	005b005b 	.word	0x005b005b
   26b5c:	005b005b 	.word	0x005b005b
   26b60:	005b005b 	.word	0x005b005b
   26b64:	005b005b 	.word	0x005b005b
   26b68:	01760176 	.word	0x01760176
   26b6c:	01760176 	.word	0x01760176
   26b70:	01760176 	.word	0x01760176
   26b74:	01760176 	.word	0x01760176
   26b78:	025c0176 	.word	0x025c0176
   26b7c:	01760084 	.word	0x01760084
   26b80:	01760176 	.word	0x01760176
   26b84:	01760176 	.word	0x01760176
   26b88:	01760176 	.word	0x01760176
   26b8c:	01760176 	.word	0x01760176
   26b90:	00e80176 	.word	0x00e80176
   26b94:	01760176 	.word	0x01760176
   26b98:	02330176 	.word	0x02330176
   26b9c:	02da0176 	.word	0x02da0176
   26ba0:	01760176 	.word	0x01760176
   26ba4:	0176058b 	.word	0x0176058b
   26ba8:	01760176 	.word	0x01760176
   26bac:	01760176 	.word	0x01760176
   26bb0:	01760176 	.word	0x01760176
   26bb4:	01760176 	.word	0x01760176
   26bb8:	025c0176 	.word	0x025c0176
   26bbc:	01760086 	.word	0x01760086
   26bc0:	01760176 	.word	0x01760176
   26bc4:	008602cd 	.word	0x008602cd
   26bc8:	0176007f 	.word	0x0176007f
   26bcc:	017602c0 	.word	0x017602c0
   26bd0:	00ea02fd 	.word	0x00ea02fd
   26bd4:	007f02ed 	.word	0x007f02ed
   26bd8:	02330176 	.word	0x02330176
   26bdc:	0569007c 	.word	0x0569007c
   26be0:	01760176 	.word	0x01760176
   26be4:	0176056b 	.word	0x0176056b
   26be8:	007c      	.short	0x007c
   26bea:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   26bee:	2200      	movs	r2, #0
   26bf0:	f818 1b01 	ldrb.w	r1, [r8], #1
   26bf4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   26bf8:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   26bfc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   26c00:	2b09      	cmp	r3, #9
   26c02:	d9f5      	bls.n	26bf0 <_vfiprintf_r+0x1b4>
   26c04:	9206      	str	r2, [sp, #24]
   26c06:	e78e      	b.n	26b26 <_vfiprintf_r+0xea>
   26c08:	4658      	mov	r0, fp
   26c0a:	f7fe fdf1 	bl	257f0 <_localeconv_r>
   26c0e:	6843      	ldr	r3, [r0, #4]
   26c10:	930d      	str	r3, [sp, #52]	; 0x34
   26c12:	4618      	mov	r0, r3
   26c14:	f7fb fff4 	bl	22c00 <strlen>
   26c18:	900e      	str	r0, [sp, #56]	; 0x38
   26c1a:	4605      	mov	r5, r0
   26c1c:	4658      	mov	r0, fp
   26c1e:	f7fe fde7 	bl	257f0 <_localeconv_r>
   26c22:	6883      	ldr	r3, [r0, #8]
   26c24:	930b      	str	r3, [sp, #44]	; 0x2c
   26c26:	2d00      	cmp	r5, #0
   26c28:	f040 84d6 	bne.w	275d8 <_vfiprintf_r+0xb9c>
   26c2c:	f898 1000 	ldrb.w	r1, [r8]
   26c30:	e777      	b.n	26b22 <_vfiprintf_r+0xe6>
   26c32:	f898 1000 	ldrb.w	r1, [r8]
   26c36:	f046 0620 	orr.w	r6, r6, #32
   26c3a:	e772      	b.n	26b22 <_vfiprintf_r+0xe6>
   26c3c:	f046 0610 	orr.w	r6, r6, #16
   26c40:	06b4      	lsls	r4, r6, #26
   26c42:	f140 818e 	bpl.w	26f62 <_vfiprintf_r+0x526>
   26c46:	9b07      	ldr	r3, [sp, #28]
   26c48:	3307      	adds	r3, #7
   26c4a:	f023 0307 	bic.w	r3, r3, #7
   26c4e:	461a      	mov	r2, r3
   26c50:	6859      	ldr	r1, [r3, #4]
   26c52:	f852 3b08 	ldr.w	r3, [r2], #8
   26c56:	9207      	str	r2, [sp, #28]
   26c58:	460a      	mov	r2, r1
   26c5a:	2900      	cmp	r1, #0
   26c5c:	f2c0 8470 	blt.w	27540 <_vfiprintf_r+0xb04>
   26c60:	1c79      	adds	r1, r7, #1
   26c62:	f000 85a2 	beq.w	277aa <_vfiprintf_r+0xd6e>
   26c66:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   26c6a:	9103      	str	r1, [sp, #12]
   26c6c:	ea53 0102 	orrs.w	r1, r3, r2
   26c70:	f000 843f 	beq.w	274f2 <_vfiprintf_r+0xab6>
   26c74:	2b0a      	cmp	r3, #10
   26c76:	f172 0100 	sbcs.w	r1, r2, #0
   26c7a:	f080 8541 	bcs.w	27700 <_vfiprintf_r+0xcc4>
   26c7e:	3330      	adds	r3, #48	; 0x30
   26c80:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   26c84:	9e03      	ldr	r6, [sp, #12]
   26c86:	2301      	movs	r3, #1
   26c88:	9304      	str	r3, [sp, #16]
   26c8a:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   26c8e:	9b04      	ldr	r3, [sp, #16]
   26c90:	42bb      	cmp	r3, r7
   26c92:	bfb8      	it	lt
   26c94:	463b      	movlt	r3, r7
   26c96:	9303      	str	r3, [sp, #12]
   26c98:	2300      	movs	r3, #0
   26c9a:	9308      	str	r3, [sp, #32]
   26c9c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   26ca0:	2b00      	cmp	r3, #0
   26ca2:	f000 80cb 	beq.w	26e3c <_vfiprintf_r+0x400>
   26ca6:	9b03      	ldr	r3, [sp, #12]
   26ca8:	3301      	adds	r3, #1
   26caa:	9303      	str	r3, [sp, #12]
   26cac:	e0c6      	b.n	26e3c <_vfiprintf_r+0x400>
   26cae:	ee18 1a10 	vmov	r1, s16
   26cb2:	4658      	mov	r0, fp
   26cb4:	ee18 5a10 	vmov	r5, s16
   26cb8:	f7fb fb00 	bl	222bc <__swsetup_r>
   26cbc:	2800      	cmp	r0, #0
   26cbe:	f040 8652 	bne.w	27966 <_vfiprintf_r+0xf2a>
   26cc2:	89aa      	ldrh	r2, [r5, #12]
   26cc4:	f002 031a 	and.w	r3, r2, #26
   26cc8:	2b0a      	cmp	r3, #10
   26cca:	f47f aef6 	bne.w	26aba <_vfiprintf_r+0x7e>
   26cce:	ee18 1a10 	vmov	r1, s16
   26cd2:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   26cd6:	2b00      	cmp	r3, #0
   26cd8:	f6ff aeef 	blt.w	26aba <_vfiprintf_r+0x7e>
   26cdc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   26cde:	07db      	lsls	r3, r3, #31
   26ce0:	d402      	bmi.n	26ce8 <_vfiprintf_r+0x2ac>
   26ce2:	0597      	lsls	r7, r2, #22
   26ce4:	f140 8612 	bpl.w	2790c <_vfiprintf_r+0xed0>
   26ce8:	ee18 1a10 	vmov	r1, s16
   26cec:	4623      	mov	r3, r4
   26cee:	4632      	mov	r2, r6
   26cf0:	4658      	mov	r0, fp
   26cf2:	f000 fe69 	bl	279c8 <__sbprintf>
   26cf6:	9005      	str	r0, [sp, #20]
   26cf8:	9805      	ldr	r0, [sp, #20]
   26cfa:	b045      	add	sp, #276	; 0x114
   26cfc:	ecbd 8b02 	vpop	{d8}
   26d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d04:	f046 0610 	orr.w	r6, r6, #16
   26d08:	f016 0220 	ands.w	r2, r6, #32
   26d0c:	f000 8136 	beq.w	26f7c <_vfiprintf_r+0x540>
   26d10:	9b07      	ldr	r3, [sp, #28]
   26d12:	3307      	adds	r3, #7
   26d14:	f023 0307 	bic.w	r3, r3, #7
   26d18:	4619      	mov	r1, r3
   26d1a:	685a      	ldr	r2, [r3, #4]
   26d1c:	f851 3b08 	ldr.w	r3, [r1], #8
   26d20:	9107      	str	r1, [sp, #28]
   26d22:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   26d26:	9103      	str	r1, [sp, #12]
   26d28:	2100      	movs	r1, #0
   26d2a:	2000      	movs	r0, #0
   26d2c:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   26d30:	1c78      	adds	r0, r7, #1
   26d32:	f000 8210 	beq.w	27156 <_vfiprintf_r+0x71a>
   26d36:	9803      	ldr	r0, [sp, #12]
   26d38:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   26d3c:	ea53 0002 	orrs.w	r0, r3, r2
   26d40:	f040 8208 	bne.w	27154 <_vfiprintf_r+0x718>
   26d44:	2f00      	cmp	r7, #0
   26d46:	f040 8538 	bne.w	277ba <_vfiprintf_r+0xd7e>
   26d4a:	2900      	cmp	r1, #0
   26d4c:	f040 83d5 	bne.w	274fa <_vfiprintf_r+0xabe>
   26d50:	9b03      	ldr	r3, [sp, #12]
   26d52:	f013 0301 	ands.w	r3, r3, #1
   26d56:	9304      	str	r3, [sp, #16]
   26d58:	f000 8411 	beq.w	2757e <_vfiprintf_r+0xb42>
   26d5c:	2330      	movs	r3, #48	; 0x30
   26d5e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   26d62:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   26d66:	e792      	b.n	26c8e <_vfiprintf_r+0x252>
   26d68:	2208      	movs	r2, #8
   26d6a:	2100      	movs	r1, #0
   26d6c:	4650      	mov	r0, sl
   26d6e:	f7fb fbb7 	bl	224e0 <memset>
   26d72:	2301      	movs	r3, #1
   26d74:	441c      	add	r4, r3
   26d76:	e6ad      	b.n	26ad4 <_vfiprintf_r+0x98>
   26d78:	2000333c 	.word	0x2000333c
   26d7c:	ebb4 0608 	subs.w	r6, r4, r8
   26d80:	4605      	mov	r5, r0
   26d82:	d01b      	beq.n	26dbc <_vfiprintf_r+0x380>
   26d84:	9b19      	ldr	r3, [sp, #100]	; 0x64
   26d86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   26d88:	3301      	adds	r3, #1
   26d8a:	4432      	add	r2, r6
   26d8c:	2b07      	cmp	r3, #7
   26d8e:	e9c9 8600 	strd	r8, r6, [r9]
   26d92:	921a      	str	r2, [sp, #104]	; 0x68
   26d94:	9319      	str	r3, [sp, #100]	; 0x64
   26d96:	dd1c      	ble.n	26dd2 <_vfiprintf_r+0x396>
   26d98:	2a00      	cmp	r2, #0
   26d9a:	f000 83a6 	beq.w	274ea <_vfiprintf_r+0xaae>
   26d9e:	ee18 1a10 	vmov	r1, s16
   26da2:	aa18      	add	r2, sp, #96	; 0x60
   26da4:	4658      	mov	r0, fp
   26da6:	f7ff fe0d 	bl	269c4 <__sprint_r.part.0>
   26daa:	bb20      	cbnz	r0, 26df6 <_vfiprintf_r+0x3ba>
   26dac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   26db0:	9b05      	ldr	r3, [sp, #20]
   26db2:	4433      	add	r3, r6
   26db4:	9305      	str	r3, [sp, #20]
   26db6:	2d00      	cmp	r5, #0
   26db8:	f47f aea8 	bne.w	26b0c <_vfiprintf_r+0xd0>
   26dbc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26dbe:	2b00      	cmp	r3, #0
   26dc0:	f040 85c1 	bne.w	27946 <_vfiprintf_r+0xf0a>
   26dc4:	ee18 3a10 	vmov	r3, s16
   26dc8:	2200      	movs	r2, #0
   26dca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   26dce:	9219      	str	r2, [sp, #100]	; 0x64
   26dd0:	e015      	b.n	26dfe <_vfiprintf_r+0x3c2>
   26dd2:	f109 0908 	add.w	r9, r9, #8
   26dd6:	e7eb      	b.n	26db0 <_vfiprintf_r+0x374>
   26dd8:	ee18 1a10 	vmov	r1, s16
   26ddc:	aa18      	add	r2, sp, #96	; 0x60
   26dde:	4658      	mov	r0, fp
   26de0:	f7ff fdf0 	bl	269c4 <__sprint_r.part.0>
   26de4:	2800      	cmp	r0, #0
   26de6:	f000 80a6 	beq.w	26f36 <_vfiprintf_r+0x4fa>
   26dea:	9b08      	ldr	r3, [sp, #32]
   26dec:	b11b      	cbz	r3, 26df6 <_vfiprintf_r+0x3ba>
   26dee:	9908      	ldr	r1, [sp, #32]
   26df0:	4658      	mov	r0, fp
   26df2:	f7fc f807 	bl	22e04 <_free_r>
   26df6:	ee18 3a10 	vmov	r3, s16
   26dfa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   26dfe:	ee18 2a10 	vmov	r2, s16
   26e02:	6e52      	ldr	r2, [r2, #100]	; 0x64
   26e04:	f012 0f01 	tst.w	r2, #1
   26e08:	b29a      	uxth	r2, r3
   26e0a:	f000 80a0 	beq.w	26f4e <_vfiprintf_r+0x512>
   26e0e:	0650      	lsls	r0, r2, #25
   26e10:	f100 85b2 	bmi.w	27978 <_vfiprintf_r+0xf3c>
   26e14:	9805      	ldr	r0, [sp, #20]
   26e16:	b045      	add	sp, #276	; 0x114
   26e18:	ecbd 8b02 	vpop	{d8}
   26e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e20:	2900      	cmp	r1, #0
   26e22:	d0cb      	beq.n	26dbc <_vfiprintf_r+0x380>
   26e24:	2300      	movs	r3, #0
   26e26:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   26e2a:	2301      	movs	r3, #1
   26e2c:	e9cd 3303 	strd	r3, r3, [sp, #12]
   26e30:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   26e34:	ac2b      	add	r4, sp, #172	; 0xac
   26e36:	2300      	movs	r3, #0
   26e38:	9308      	str	r3, [sp, #32]
   26e3a:	461f      	mov	r7, r3
   26e3c:	f016 0302 	ands.w	r3, r6, #2
   26e40:	9309      	str	r3, [sp, #36]	; 0x24
   26e42:	d002      	beq.n	26e4a <_vfiprintf_r+0x40e>
   26e44:	9b03      	ldr	r3, [sp, #12]
   26e46:	3302      	adds	r3, #2
   26e48:	9303      	str	r3, [sp, #12]
   26e4a:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   26e4e:	930a      	str	r3, [sp, #40]	; 0x28
   26e50:	d105      	bne.n	26e5e <_vfiprintf_r+0x422>
   26e52:	9b06      	ldr	r3, [sp, #24]
   26e54:	9a03      	ldr	r2, [sp, #12]
   26e56:	1a9d      	subs	r5, r3, r2
   26e58:	2d00      	cmp	r5, #0
   26e5a:	f300 827b 	bgt.w	27354 <_vfiprintf_r+0x918>
   26e5e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   26e62:	1c41      	adds	r1, r0, #1
   26e64:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   26e68:	b182      	cbz	r2, 26e8c <_vfiprintf_r+0x450>
   26e6a:	2201      	movs	r2, #1
   26e6c:	3301      	adds	r3, #1
   26e6e:	f8c9 2004 	str.w	r2, [r9, #4]
   26e72:	2907      	cmp	r1, #7
   26e74:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   26e78:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   26e7c:	f8c9 2000 	str.w	r2, [r9]
   26e80:	f300 824a 	bgt.w	27318 <_vfiprintf_r+0x8dc>
   26e84:	4608      	mov	r0, r1
   26e86:	f109 0908 	add.w	r9, r9, #8
   26e8a:	3101      	adds	r1, #1
   26e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26e8e:	b1e2      	cbz	r2, 26eca <_vfiprintf_r+0x48e>
   26e90:	aa11      	add	r2, sp, #68	; 0x44
   26e92:	3302      	adds	r3, #2
   26e94:	f8c9 2000 	str.w	r2, [r9]
   26e98:	2907      	cmp	r1, #7
   26e9a:	f04f 0202 	mov.w	r2, #2
   26e9e:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   26ea2:	f8c9 2004 	str.w	r2, [r9, #4]
   26ea6:	f340 8250 	ble.w	2734a <_vfiprintf_r+0x90e>
   26eaa:	2b00      	cmp	r3, #0
   26eac:	f000 8343 	beq.w	27536 <_vfiprintf_r+0xafa>
   26eb0:	ee18 1a10 	vmov	r1, s16
   26eb4:	aa18      	add	r2, sp, #96	; 0x60
   26eb6:	4658      	mov	r0, fp
   26eb8:	f7ff fd84 	bl	269c4 <__sprint_r.part.0>
   26ebc:	2800      	cmp	r0, #0
   26ebe:	d194      	bne.n	26dea <_vfiprintf_r+0x3ae>
   26ec0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   26ec4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   26ec8:	1c41      	adds	r1, r0, #1
   26eca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   26ecc:	2a80      	cmp	r2, #128	; 0x80
   26ece:	f000 8184 	beq.w	271da <_vfiprintf_r+0x79e>
   26ed2:	9a04      	ldr	r2, [sp, #16]
   26ed4:	1abd      	subs	r5, r7, r2
   26ed6:	2d00      	cmp	r5, #0
   26ed8:	f300 81d7 	bgt.w	2728a <_vfiprintf_r+0x84e>
   26edc:	9a04      	ldr	r2, [sp, #16]
   26ede:	f8c9 4000 	str.w	r4, [r9]
   26ee2:	4413      	add	r3, r2
   26ee4:	2907      	cmp	r1, #7
   26ee6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   26eea:	f8c9 2004 	str.w	r2, [r9, #4]
   26eee:	f340 816e 	ble.w	271ce <_vfiprintf_r+0x792>
   26ef2:	2b00      	cmp	r3, #0
   26ef4:	f000 8275 	beq.w	273e2 <_vfiprintf_r+0x9a6>
   26ef8:	ee18 1a10 	vmov	r1, s16
   26efc:	aa18      	add	r2, sp, #96	; 0x60
   26efe:	4658      	mov	r0, fp
   26f00:	f7ff fd60 	bl	269c4 <__sprint_r.part.0>
   26f04:	2800      	cmp	r0, #0
   26f06:	f47f af70 	bne.w	26dea <_vfiprintf_r+0x3ae>
   26f0a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   26f0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   26f10:	0775      	lsls	r5, r6, #29
   26f12:	d505      	bpl.n	26f20 <_vfiprintf_r+0x4e4>
   26f14:	9a06      	ldr	r2, [sp, #24]
   26f16:	9903      	ldr	r1, [sp, #12]
   26f18:	1a54      	subs	r4, r2, r1
   26f1a:	2c00      	cmp	r4, #0
   26f1c:	f300 826b 	bgt.w	273f6 <_vfiprintf_r+0x9ba>
   26f20:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   26f24:	9803      	ldr	r0, [sp, #12]
   26f26:	4281      	cmp	r1, r0
   26f28:	bfac      	ite	ge
   26f2a:	1852      	addge	r2, r2, r1
   26f2c:	1812      	addlt	r2, r2, r0
   26f2e:	9205      	str	r2, [sp, #20]
   26f30:	2b00      	cmp	r3, #0
   26f32:	f47f af51 	bne.w	26dd8 <_vfiprintf_r+0x39c>
   26f36:	9908      	ldr	r1, [sp, #32]
   26f38:	2300      	movs	r3, #0
   26f3a:	9319      	str	r3, [sp, #100]	; 0x64
   26f3c:	2900      	cmp	r1, #0
   26f3e:	f000 8149 	beq.w	271d4 <_vfiprintf_r+0x798>
   26f42:	4658      	mov	r0, fp
   26f44:	f7fb ff5e 	bl	22e04 <_free_r>
   26f48:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   26f4c:	e5c1      	b.n	26ad2 <_vfiprintf_r+0x96>
   26f4e:	059c      	lsls	r4, r3, #22
   26f50:	f53f af5d 	bmi.w	26e0e <_vfiprintf_r+0x3d2>
   26f54:	ee18 4a10 	vmov	r4, s16
   26f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
   26f5a:	f7fb fdf7 	bl	22b4c <__retarget_lock_release_recursive>
   26f5e:	89a2      	ldrh	r2, [r4, #12]
   26f60:	e755      	b.n	26e0e <_vfiprintf_r+0x3d2>
   26f62:	06f0      	lsls	r0, r6, #27
   26f64:	9a07      	ldr	r2, [sp, #28]
   26f66:	f100 831f 	bmi.w	275a8 <_vfiprintf_r+0xb6c>
   26f6a:	0671      	lsls	r1, r6, #25
   26f6c:	f140 8319 	bpl.w	275a2 <_vfiprintf_r+0xb66>
   26f70:	f932 3b04 	ldrsh.w	r3, [r2], #4
   26f74:	9207      	str	r2, [sp, #28]
   26f76:	17da      	asrs	r2, r3, #31
   26f78:	4611      	mov	r1, r2
   26f7a:	e66e      	b.n	26c5a <_vfiprintf_r+0x21e>
   26f7c:	f016 0310 	ands.w	r3, r6, #16
   26f80:	9907      	ldr	r1, [sp, #28]
   26f82:	f040 8309 	bne.w	27598 <_vfiprintf_r+0xb5c>
   26f86:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   26f8a:	f000 8301 	beq.w	27590 <_vfiprintf_r+0xb54>
   26f8e:	461a      	mov	r2, r3
   26f90:	f851 3b04 	ldr.w	r3, [r1], #4
   26f94:	9107      	str	r1, [sp, #28]
   26f96:	b29b      	uxth	r3, r3
   26f98:	e6c3      	b.n	26d22 <_vfiprintf_r+0x2e6>
   26f9a:	9b07      	ldr	r3, [sp, #28]
   26f9c:	461a      	mov	r2, r3
   26f9e:	2300      	movs	r3, #0
   26fa0:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   26fa4:	4613      	mov	r3, r2
   26fa6:	f853 4b04 	ldr.w	r4, [r3], #4
   26faa:	9303      	str	r3, [sp, #12]
   26fac:	2c00      	cmp	r4, #0
   26fae:	f000 8412 	beq.w	277d6 <_vfiprintf_r+0xd9a>
   26fb2:	2953      	cmp	r1, #83	; 0x53
   26fb4:	f000 8365 	beq.w	27682 <_vfiprintf_r+0xc46>
   26fb8:	f016 0510 	ands.w	r5, r6, #16
   26fbc:	f040 8361 	bne.w	27682 <_vfiprintf_r+0xc46>
   26fc0:	1c7b      	adds	r3, r7, #1
   26fc2:	f000 84b3 	beq.w	2792c <_vfiprintf_r+0xef0>
   26fc6:	463a      	mov	r2, r7
   26fc8:	4629      	mov	r1, r5
   26fca:	4620      	mov	r0, r4
   26fcc:	f7fb fdc0 	bl	22b50 <memchr>
   26fd0:	9008      	str	r0, [sp, #32]
   26fd2:	2800      	cmp	r0, #0
   26fd4:	f000 849f 	beq.w	27916 <_vfiprintf_r+0xeda>
   26fd8:	1b03      	subs	r3, r0, r4
   26fda:	9a03      	ldr	r2, [sp, #12]
   26fdc:	9304      	str	r3, [sp, #16]
   26fde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   26fe2:	462f      	mov	r7, r5
   26fe4:	9207      	str	r2, [sp, #28]
   26fe6:	9303      	str	r3, [sp, #12]
   26fe8:	9508      	str	r5, [sp, #32]
   26fea:	e657      	b.n	26c9c <_vfiprintf_r+0x260>
   26fec:	2943      	cmp	r1, #67	; 0x43
   26fee:	d002      	beq.n	26ff6 <_vfiprintf_r+0x5ba>
   26ff0:	06f5      	lsls	r5, r6, #27
   26ff2:	f140 832d 	bpl.w	27650 <_vfiprintf_r+0xc14>
   26ff6:	9d07      	ldr	r5, [sp, #28]
   26ff8:	2208      	movs	r2, #8
   26ffa:	2100      	movs	r1, #0
   26ffc:	a816      	add	r0, sp, #88	; 0x58
   26ffe:	ac2b      	add	r4, sp, #172	; 0xac
   27000:	f7fb fa6e 	bl	224e0 <memset>
   27004:	ab16      	add	r3, sp, #88	; 0x58
   27006:	f855 2b04 	ldr.w	r2, [r5], #4
   2700a:	4621      	mov	r1, r4
   2700c:	4658      	mov	r0, fp
   2700e:	f7fe fcab 	bl	25968 <_wcrtomb_r>
   27012:	4603      	mov	r3, r0
   27014:	3301      	adds	r3, #1
   27016:	9004      	str	r0, [sp, #16]
   27018:	f000 84b3 	beq.w	27982 <_vfiprintf_r+0xf46>
   2701c:	9b04      	ldr	r3, [sp, #16]
   2701e:	9507      	str	r5, [sp, #28]
   27020:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   27024:	9303      	str	r3, [sp, #12]
   27026:	2300      	movs	r3, #0
   27028:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   2702c:	e703      	b.n	26e36 <_vfiprintf_r+0x3fa>
   2702e:	9b07      	ldr	r3, [sp, #28]
   27030:	f853 2b04 	ldr.w	r2, [r3], #4
   27034:	9206      	str	r2, [sp, #24]
   27036:	2a00      	cmp	r2, #0
   27038:	f280 829c 	bge.w	27574 <_vfiprintf_r+0xb38>
   2703c:	9a06      	ldr	r2, [sp, #24]
   2703e:	4252      	negs	r2, r2
   27040:	e9cd 2306 	strd	r2, r3, [sp, #24]
   27044:	f898 1000 	ldrb.w	r1, [r8]
   27048:	f046 0604 	orr.w	r6, r6, #4
   2704c:	e569      	b.n	26b22 <_vfiprintf_r+0xe6>
   2704e:	f898 1000 	ldrb.w	r1, [r8]
   27052:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   27056:	e564      	b.n	26b22 <_vfiprintf_r+0xe6>
   27058:	f898 1000 	ldrb.w	r1, [r8]
   2705c:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   27060:	e55f      	b.n	26b22 <_vfiprintf_r+0xe6>
   27062:	4642      	mov	r2, r8
   27064:	f812 1b01 	ldrb.w	r1, [r2], #1
   27068:	292a      	cmp	r1, #42	; 0x2a
   2706a:	f000 8496 	beq.w	2799a <_vfiprintf_r+0xf5e>
   2706e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   27072:	2b09      	cmp	r3, #9
   27074:	4690      	mov	r8, r2
   27076:	f04f 0700 	mov.w	r7, #0
   2707a:	f63f ad54 	bhi.w	26b26 <_vfiprintf_r+0xea>
   2707e:	f818 1b01 	ldrb.w	r1, [r8], #1
   27082:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   27086:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   2708a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   2708e:	2b09      	cmp	r3, #9
   27090:	d9f5      	bls.n	2707e <_vfiprintf_r+0x642>
   27092:	e548      	b.n	26b26 <_vfiprintf_r+0xea>
   27094:	f898 1000 	ldrb.w	r1, [r8]
   27098:	f046 0601 	orr.w	r6, r6, #1
   2709c:	e541      	b.n	26b22 <_vfiprintf_r+0xe6>
   2709e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   270a2:	2b00      	cmp	r3, #0
   270a4:	f47f adc2 	bne.w	26c2c <_vfiprintf_r+0x1f0>
   270a8:	2320      	movs	r3, #32
   270aa:	f898 1000 	ldrb.w	r1, [r8]
   270ae:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   270b2:	e536      	b.n	26b22 <_vfiprintf_r+0xe6>
   270b4:	f898 1000 	ldrb.w	r1, [r8]
   270b8:	296c      	cmp	r1, #108	; 0x6c
   270ba:	bf03      	ittte	eq
   270bc:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   270c0:	f046 0620 	orreq.w	r6, r6, #32
   270c4:	f108 0801 	addeq.w	r8, r8, #1
   270c8:	f046 0610 	orrne.w	r6, r6, #16
   270cc:	e529      	b.n	26b22 <_vfiprintf_r+0xe6>
   270ce:	f898 1000 	ldrb.w	r1, [r8]
   270d2:	2968      	cmp	r1, #104	; 0x68
   270d4:	bf03      	ittte	eq
   270d6:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   270da:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   270de:	f108 0801 	addeq.w	r8, r8, #1
   270e2:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   270e6:	e51c      	b.n	26b22 <_vfiprintf_r+0xe6>
   270e8:	f046 0310 	orr.w	r3, r6, #16
   270ec:	9303      	str	r3, [sp, #12]
   270ee:	9b03      	ldr	r3, [sp, #12]
   270f0:	f013 0220 	ands.w	r2, r3, #32
   270f4:	f000 8206 	beq.w	27504 <_vfiprintf_r+0xac8>
   270f8:	9b07      	ldr	r3, [sp, #28]
   270fa:	3307      	adds	r3, #7
   270fc:	f023 0307 	bic.w	r3, r3, #7
   27100:	4619      	mov	r1, r3
   27102:	685a      	ldr	r2, [r3, #4]
   27104:	f851 3b08 	ldr.w	r3, [r1], #8
   27108:	9107      	str	r1, [sp, #28]
   2710a:	2101      	movs	r1, #1
   2710c:	e60d      	b.n	26d2a <_vfiprintf_r+0x2ee>
   2710e:	9a07      	ldr	r2, [sp, #28]
   27110:	f046 0302 	orr.w	r3, r6, #2
   27114:	9303      	str	r3, [sp, #12]
   27116:	f852 3b04 	ldr.w	r3, [r2], #4
   2711a:	9207      	str	r2, [sp, #28]
   2711c:	f647 0230 	movw	r2, #30768	; 0x7830
   27120:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   27124:	4ab8      	ldr	r2, [pc, #736]	; (27408 <_vfiprintf_r+0x9cc>)
   27126:	920c      	str	r2, [sp, #48]	; 0x30
   27128:	2102      	movs	r1, #2
   2712a:	2200      	movs	r2, #0
   2712c:	e5fd      	b.n	26d2a <_vfiprintf_r+0x2ee>
   2712e:	06b7      	lsls	r7, r6, #26
   27130:	f100 8248 	bmi.w	275c4 <_vfiprintf_r+0xb88>
   27134:	06f5      	lsls	r5, r6, #27
   27136:	f100 8346 	bmi.w	277c6 <_vfiprintf_r+0xd8a>
   2713a:	0674      	lsls	r4, r6, #25
   2713c:	f100 83d5 	bmi.w	278ea <_vfiprintf_r+0xeae>
   27140:	05b0      	lsls	r0, r6, #22
   27142:	f140 8340 	bpl.w	277c6 <_vfiprintf_r+0xd8a>
   27146:	9b07      	ldr	r3, [sp, #28]
   27148:	9905      	ldr	r1, [sp, #20]
   2714a:	f853 2b04 	ldr.w	r2, [r3], #4
   2714e:	9307      	str	r3, [sp, #28]
   27150:	7011      	strb	r1, [r2, #0]
   27152:	e4be      	b.n	26ad2 <_vfiprintf_r+0x96>
   27154:	9603      	str	r6, [sp, #12]
   27156:	2901      	cmp	r1, #1
   27158:	f43f ad8c 	beq.w	26c74 <_vfiprintf_r+0x238>
   2715c:	2902      	cmp	r1, #2
   2715e:	ac44      	add	r4, sp, #272	; 0x110
   27160:	d111      	bne.n	27186 <_vfiprintf_r+0x74a>
   27162:	980c      	ldr	r0, [sp, #48]	; 0x30
   27164:	f003 010f 	and.w	r1, r3, #15
   27168:	091b      	lsrs	r3, r3, #4
   2716a:	5c41      	ldrb	r1, [r0, r1]
   2716c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   27170:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   27174:	0912      	lsrs	r2, r2, #4
   27176:	ea53 0102 	orrs.w	r1, r3, r2
   2717a:	d1f3      	bne.n	27164 <_vfiprintf_r+0x728>
   2717c:	9e03      	ldr	r6, [sp, #12]
   2717e:	ab44      	add	r3, sp, #272	; 0x110
   27180:	1b1b      	subs	r3, r3, r4
   27182:	9304      	str	r3, [sp, #16]
   27184:	e583      	b.n	26c8e <_vfiprintf_r+0x252>
   27186:	f003 0107 	and.w	r1, r3, #7
   2718a:	08db      	lsrs	r3, r3, #3
   2718c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   27190:	08d2      	lsrs	r2, r2, #3
   27192:	3130      	adds	r1, #48	; 0x30
   27194:	ea53 0502 	orrs.w	r5, r3, r2
   27198:	4620      	mov	r0, r4
   2719a:	f804 1d01 	strb.w	r1, [r4, #-1]!
   2719e:	d1f2      	bne.n	27186 <_vfiprintf_r+0x74a>
   271a0:	9e03      	ldr	r6, [sp, #12]
   271a2:	07f3      	lsls	r3, r6, #31
   271a4:	d5eb      	bpl.n	2717e <_vfiprintf_r+0x742>
   271a6:	2930      	cmp	r1, #48	; 0x30
   271a8:	d0e8      	beq.n	2717c <_vfiprintf_r+0x740>
   271aa:	2330      	movs	r3, #48	; 0x30
   271ac:	3802      	subs	r0, #2
   271ae:	f804 3c01 	strb.w	r3, [r4, #-1]
   271b2:	ab44      	add	r3, sp, #272	; 0x110
   271b4:	1a1b      	subs	r3, r3, r0
   271b6:	9e03      	ldr	r6, [sp, #12]
   271b8:	9304      	str	r3, [sp, #16]
   271ba:	4604      	mov	r4, r0
   271bc:	e567      	b.n	26c8e <_vfiprintf_r+0x252>
   271be:	9b04      	ldr	r3, [sp, #16]
   271c0:	941b      	str	r4, [sp, #108]	; 0x6c
   271c2:	2201      	movs	r2, #1
   271c4:	931c      	str	r3, [sp, #112]	; 0x70
   271c6:	931a      	str	r3, [sp, #104]	; 0x68
   271c8:	9219      	str	r2, [sp, #100]	; 0x64
   271ca:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   271ce:	f109 0908 	add.w	r9, r9, #8
   271d2:	e69d      	b.n	26f10 <_vfiprintf_r+0x4d4>
   271d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   271d8:	e47b      	b.n	26ad2 <_vfiprintf_r+0x96>
   271da:	9a06      	ldr	r2, [sp, #24]
   271dc:	9d03      	ldr	r5, [sp, #12]
   271de:	1b55      	subs	r5, r2, r5
   271e0:	2d00      	cmp	r5, #0
   271e2:	f77f ae76 	ble.w	26ed2 <_vfiprintf_r+0x496>
   271e6:	2d10      	cmp	r5, #16
   271e8:	f340 83bb 	ble.w	27962 <_vfiprintf_r+0xf26>
   271ec:	9409      	str	r4, [sp, #36]	; 0x24
   271ee:	ee18 4a10 	vmov	r4, s16
   271f2:	e007      	b.n	27204 <_vfiprintf_r+0x7c8>
   271f4:	f100 0c02 	add.w	ip, r0, #2
   271f8:	f109 0908 	add.w	r9, r9, #8
   271fc:	4610      	mov	r0, r2
   271fe:	3d10      	subs	r5, #16
   27200:	2d10      	cmp	r5, #16
   27202:	dd1e      	ble.n	27242 <_vfiprintf_r+0x806>
   27204:	4981      	ldr	r1, [pc, #516]	; (2740c <_vfiprintf_r+0x9d0>)
   27206:	f8c9 1000 	str.w	r1, [r9]
   2720a:	1c42      	adds	r2, r0, #1
   2720c:	3310      	adds	r3, #16
   2720e:	2110      	movs	r1, #16
   27210:	2a07      	cmp	r2, #7
   27212:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27216:	f8c9 1004 	str.w	r1, [r9, #4]
   2721a:	ddeb      	ble.n	271f4 <_vfiprintf_r+0x7b8>
   2721c:	aa18      	add	r2, sp, #96	; 0x60
   2721e:	2b00      	cmp	r3, #0
   27220:	d074      	beq.n	2730c <_vfiprintf_r+0x8d0>
   27222:	4621      	mov	r1, r4
   27224:	4658      	mov	r0, fp
   27226:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2722a:	f7ff fbcb 	bl	269c4 <__sprint_r.part.0>
   2722e:	2800      	cmp	r0, #0
   27230:	f47f addb 	bne.w	26dea <_vfiprintf_r+0x3ae>
   27234:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27238:	3d10      	subs	r5, #16
   2723a:	2d10      	cmp	r5, #16
   2723c:	f100 0c01 	add.w	ip, r0, #1
   27240:	dce0      	bgt.n	27204 <_vfiprintf_r+0x7c8>
   27242:	9c09      	ldr	r4, [sp, #36]	; 0x24
   27244:	4a71      	ldr	r2, [pc, #452]	; (2740c <_vfiprintf_r+0x9d0>)
   27246:	f8c9 5004 	str.w	r5, [r9, #4]
   2724a:	442b      	add	r3, r5
   2724c:	f1bc 0f07 	cmp.w	ip, #7
   27250:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   27254:	f8c9 2000 	str.w	r2, [r9]
   27258:	f340 8194 	ble.w	27584 <_vfiprintf_r+0xb48>
   2725c:	2b00      	cmp	r3, #0
   2725e:	f000 831f 	beq.w	278a0 <_vfiprintf_r+0xe64>
   27262:	ee18 1a10 	vmov	r1, s16
   27266:	aa18      	add	r2, sp, #96	; 0x60
   27268:	4658      	mov	r0, fp
   2726a:	f7ff fbab 	bl	269c4 <__sprint_r.part.0>
   2726e:	2800      	cmp	r0, #0
   27270:	f47f adbb 	bne.w	26dea <_vfiprintf_r+0x3ae>
   27274:	9a04      	ldr	r2, [sp, #16]
   27276:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2727a:	1abd      	subs	r5, r7, r2
   2727c:	2d00      	cmp	r5, #0
   2727e:	f100 0101 	add.w	r1, r0, #1
   27282:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27286:	f77f ae29 	ble.w	26edc <_vfiprintf_r+0x4a0>
   2728a:	2d10      	cmp	r5, #16
   2728c:	dd29      	ble.n	272e2 <_vfiprintf_r+0x8a6>
   2728e:	9409      	str	r4, [sp, #36]	; 0x24
   27290:	2710      	movs	r7, #16
   27292:	ee18 4a10 	vmov	r4, s16
   27296:	e007      	b.n	272a8 <_vfiprintf_r+0x86c>
   27298:	f100 0c02 	add.w	ip, r0, #2
   2729c:	f109 0908 	add.w	r9, r9, #8
   272a0:	4610      	mov	r0, r2
   272a2:	3d10      	subs	r5, #16
   272a4:	2d10      	cmp	r5, #16
   272a6:	dd1a      	ble.n	272de <_vfiprintf_r+0x8a2>
   272a8:	1c42      	adds	r2, r0, #1
   272aa:	4958      	ldr	r1, [pc, #352]	; (2740c <_vfiprintf_r+0x9d0>)
   272ac:	3310      	adds	r3, #16
   272ae:	2a07      	cmp	r2, #7
   272b0:	e9c9 1700 	strd	r1, r7, [r9]
   272b4:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   272b8:	ddee      	ble.n	27298 <_vfiprintf_r+0x85c>
   272ba:	aa18      	add	r2, sp, #96	; 0x60
   272bc:	b303      	cbz	r3, 27300 <_vfiprintf_r+0x8c4>
   272be:	4621      	mov	r1, r4
   272c0:	4658      	mov	r0, fp
   272c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   272c6:	f7ff fb7d 	bl	269c4 <__sprint_r.part.0>
   272ca:	2800      	cmp	r0, #0
   272cc:	f47f ad8d 	bne.w	26dea <_vfiprintf_r+0x3ae>
   272d0:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   272d4:	3d10      	subs	r5, #16
   272d6:	2d10      	cmp	r5, #16
   272d8:	f100 0c01 	add.w	ip, r0, #1
   272dc:	dce4      	bgt.n	272a8 <_vfiprintf_r+0x86c>
   272de:	9c09      	ldr	r4, [sp, #36]	; 0x24
   272e0:	4661      	mov	r1, ip
   272e2:	4a4a      	ldr	r2, [pc, #296]	; (2740c <_vfiprintf_r+0x9d0>)
   272e4:	f8c9 5004 	str.w	r5, [r9, #4]
   272e8:	442b      	add	r3, r5
   272ea:	2907      	cmp	r1, #7
   272ec:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   272f0:	f8c9 2000 	str.w	r2, [r9]
   272f4:	f300 80e7 	bgt.w	274c6 <_vfiprintf_r+0xa8a>
   272f8:	f109 0908 	add.w	r9, r9, #8
   272fc:	3101      	adds	r1, #1
   272fe:	e5ed      	b.n	26edc <_vfiprintf_r+0x4a0>
   27300:	f04f 0c01 	mov.w	ip, #1
   27304:	4618      	mov	r0, r3
   27306:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2730a:	e7ca      	b.n	272a2 <_vfiprintf_r+0x866>
   2730c:	f04f 0c01 	mov.w	ip, #1
   27310:	4618      	mov	r0, r3
   27312:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27316:	e772      	b.n	271fe <_vfiprintf_r+0x7c2>
   27318:	2b00      	cmp	r3, #0
   2731a:	f000 8104 	beq.w	27526 <_vfiprintf_r+0xaea>
   2731e:	ee18 1a10 	vmov	r1, s16
   27322:	aa18      	add	r2, sp, #96	; 0x60
   27324:	4658      	mov	r0, fp
   27326:	f7ff fb4d 	bl	269c4 <__sprint_r.part.0>
   2732a:	2800      	cmp	r0, #0
   2732c:	f47f ad5d 	bne.w	26dea <_vfiprintf_r+0x3ae>
   27330:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   27334:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27338:	1c41      	adds	r1, r0, #1
   2733a:	e5a7      	b.n	26e8c <_vfiprintf_r+0x450>
   2733c:	2302      	movs	r3, #2
   2733e:	aa11      	add	r2, sp, #68	; 0x44
   27340:	931c      	str	r3, [sp, #112]	; 0x70
   27342:	921b      	str	r2, [sp, #108]	; 0x6c
   27344:	2101      	movs	r1, #1
   27346:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2734a:	4608      	mov	r0, r1
   2734c:	f109 0908 	add.w	r9, r9, #8
   27350:	1c41      	adds	r1, r0, #1
   27352:	e5ba      	b.n	26eca <_vfiprintf_r+0x48e>
   27354:	2d10      	cmp	r5, #16
   27356:	f340 82e5 	ble.w	27924 <_vfiprintf_r+0xee8>
   2735a:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   2735e:	940f      	str	r4, [sp, #60]	; 0x3c
   27360:	4608      	mov	r0, r1
   27362:	ee18 4a10 	vmov	r4, s16
   27366:	e007      	b.n	27378 <_vfiprintf_r+0x93c>
   27368:	f100 0c02 	add.w	ip, r0, #2
   2736c:	f109 0908 	add.w	r9, r9, #8
   27370:	4610      	mov	r0, r2
   27372:	3d10      	subs	r5, #16
   27374:	2d10      	cmp	r5, #16
   27376:	dd1d      	ble.n	273b4 <_vfiprintf_r+0x978>
   27378:	4925      	ldr	r1, [pc, #148]	; (27410 <_vfiprintf_r+0x9d4>)
   2737a:	f8c9 1000 	str.w	r1, [r9]
   2737e:	1c42      	adds	r2, r0, #1
   27380:	3310      	adds	r3, #16
   27382:	2110      	movs	r1, #16
   27384:	2a07      	cmp	r2, #7
   27386:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   2738a:	f8c9 1004 	str.w	r1, [r9, #4]
   2738e:	ddeb      	ble.n	27368 <_vfiprintf_r+0x92c>
   27390:	aa18      	add	r2, sp, #96	; 0x60
   27392:	b303      	cbz	r3, 273d6 <_vfiprintf_r+0x99a>
   27394:	4621      	mov	r1, r4
   27396:	4658      	mov	r0, fp
   27398:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2739c:	f7ff fb12 	bl	269c4 <__sprint_r.part.0>
   273a0:	2800      	cmp	r0, #0
   273a2:	f47f ad22 	bne.w	26dea <_vfiprintf_r+0x3ae>
   273a6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   273aa:	3d10      	subs	r5, #16
   273ac:	2d10      	cmp	r5, #16
   273ae:	f100 0c01 	add.w	ip, r0, #1
   273b2:	dce1      	bgt.n	27378 <_vfiprintf_r+0x93c>
   273b4:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   273b6:	4660      	mov	r0, ip
   273b8:	4a15      	ldr	r2, [pc, #84]	; (27410 <_vfiprintf_r+0x9d4>)
   273ba:	f8c9 5004 	str.w	r5, [r9, #4]
   273be:	442b      	add	r3, r5
   273c0:	2807      	cmp	r0, #7
   273c2:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   273c6:	f8c9 2000 	str.w	r2, [r9]
   273ca:	f300 80c1 	bgt.w	27550 <_vfiprintf_r+0xb14>
   273ce:	f109 0908 	add.w	r9, r9, #8
   273d2:	1c41      	adds	r1, r0, #1
   273d4:	e546      	b.n	26e64 <_vfiprintf_r+0x428>
   273d6:	4618      	mov	r0, r3
   273d8:	f04f 0c01 	mov.w	ip, #1
   273dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   273e0:	e7c7      	b.n	27372 <_vfiprintf_r+0x936>
   273e2:	0776      	lsls	r6, r6, #29
   273e4:	9319      	str	r3, [sp, #100]	; 0x64
   273e6:	d553      	bpl.n	27490 <_vfiprintf_r+0xa54>
   273e8:	9a06      	ldr	r2, [sp, #24]
   273ea:	9903      	ldr	r1, [sp, #12]
   273ec:	1a54      	subs	r4, r2, r1
   273ee:	2c00      	cmp	r4, #0
   273f0:	dd4e      	ble.n	27490 <_vfiprintf_r+0xa54>
   273f2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   273f6:	2c10      	cmp	r4, #16
   273f8:	f340 82b0 	ble.w	2795c <_vfiprintf_r+0xf20>
   273fc:	9919      	ldr	r1, [sp, #100]	; 0x64
   273fe:	ee18 6a10 	vmov	r6, s16
   27402:	2510      	movs	r5, #16
   27404:	e00d      	b.n	27422 <_vfiprintf_r+0x9e6>
   27406:	bf00      	nop
   27408:	200019b4 	.word	0x200019b4
   2740c:	20003154 	.word	0x20003154
   27410:	200019f4 	.word	0x200019f4
   27414:	1c88      	adds	r0, r1, #2
   27416:	f109 0908 	add.w	r9, r9, #8
   2741a:	4611      	mov	r1, r2
   2741c:	3c10      	subs	r4, #16
   2741e:	2c10      	cmp	r4, #16
   27420:	dd1a      	ble.n	27458 <_vfiprintf_r+0xa1c>
   27422:	1c4a      	adds	r2, r1, #1
   27424:	48b3      	ldr	r0, [pc, #716]	; (276f4 <_vfiprintf_r+0xcb8>)
   27426:	3310      	adds	r3, #16
   27428:	2a07      	cmp	r2, #7
   2742a:	e9c9 0500 	strd	r0, r5, [r9]
   2742e:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   27432:	ddef      	ble.n	27414 <_vfiprintf_r+0x9d8>
   27434:	aa18      	add	r2, sp, #96	; 0x60
   27436:	b333      	cbz	r3, 27486 <_vfiprintf_r+0xa4a>
   27438:	4631      	mov	r1, r6
   2743a:	4658      	mov	r0, fp
   2743c:	f7ff fac2 	bl	269c4 <__sprint_r.part.0>
   27440:	2800      	cmp	r0, #0
   27442:	f47f acd2 	bne.w	26dea <_vfiprintf_r+0x3ae>
   27446:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   2744a:	3c10      	subs	r4, #16
   2744c:	2c10      	cmp	r4, #16
   2744e:	f101 0001 	add.w	r0, r1, #1
   27452:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27456:	dce4      	bgt.n	27422 <_vfiprintf_r+0x9e6>
   27458:	4aa6      	ldr	r2, [pc, #664]	; (276f4 <_vfiprintf_r+0xcb8>)
   2745a:	f8c9 4004 	str.w	r4, [r9, #4]
   2745e:	4423      	add	r3, r4
   27460:	2807      	cmp	r0, #7
   27462:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   27466:	f8c9 2000 	str.w	r2, [r9]
   2746a:	f77f ad59 	ble.w	26f20 <_vfiprintf_r+0x4e4>
   2746e:	b17b      	cbz	r3, 27490 <_vfiprintf_r+0xa54>
   27470:	ee18 1a10 	vmov	r1, s16
   27474:	aa18      	add	r2, sp, #96	; 0x60
   27476:	4658      	mov	r0, fp
   27478:	f7ff faa4 	bl	269c4 <__sprint_r.part.0>
   2747c:	2800      	cmp	r0, #0
   2747e:	f47f acb4 	bne.w	26dea <_vfiprintf_r+0x3ae>
   27482:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27484:	e54c      	b.n	26f20 <_vfiprintf_r+0x4e4>
   27486:	2001      	movs	r0, #1
   27488:	4619      	mov	r1, r3
   2748a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2748e:	e7c5      	b.n	2741c <_vfiprintf_r+0x9e0>
   27490:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   27494:	9903      	ldr	r1, [sp, #12]
   27496:	428a      	cmp	r2, r1
   27498:	bfac      	ite	ge
   2749a:	189b      	addge	r3, r3, r2
   2749c:	185b      	addlt	r3, r3, r1
   2749e:	9305      	str	r3, [sp, #20]
   274a0:	e549      	b.n	26f36 <_vfiprintf_r+0x4fa>
   274a2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   274a6:	058f      	lsls	r7, r1, #22
   274a8:	ee18 3a10 	vmov	r3, s16
   274ac:	b28a      	uxth	r2, r1
   274ae:	f53f aae8 	bmi.w	26a82 <_vfiprintf_r+0x46>
   274b2:	ee18 5a10 	vmov	r5, s16
   274b6:	6d98      	ldr	r0, [r3, #88]	; 0x58
   274b8:	f7fb fb46 	bl	22b48 <__retarget_lock_acquire_recursive>
   274bc:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   274c0:	b28a      	uxth	r2, r1
   274c2:	f7ff bade 	b.w	26a82 <_vfiprintf_r+0x46>
   274c6:	2b00      	cmp	r3, #0
   274c8:	f43f ae79 	beq.w	271be <_vfiprintf_r+0x782>
   274cc:	ee18 1a10 	vmov	r1, s16
   274d0:	aa18      	add	r2, sp, #96	; 0x60
   274d2:	4658      	mov	r0, fp
   274d4:	f7ff fa76 	bl	269c4 <__sprint_r.part.0>
   274d8:	2800      	cmp	r0, #0
   274da:	f47f ac86 	bne.w	26dea <_vfiprintf_r+0x3ae>
   274de:	9919      	ldr	r1, [sp, #100]	; 0x64
   274e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   274e2:	3101      	adds	r1, #1
   274e4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   274e8:	e4f8      	b.n	26edc <_vfiprintf_r+0x4a0>
   274ea:	9219      	str	r2, [sp, #100]	; 0x64
   274ec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   274f0:	e45e      	b.n	26db0 <_vfiprintf_r+0x374>
   274f2:	2f00      	cmp	r7, #0
   274f4:	f47f abc3 	bne.w	26c7e <_vfiprintf_r+0x242>
   274f8:	9e03      	ldr	r6, [sp, #12]
   274fa:	2700      	movs	r7, #0
   274fc:	9704      	str	r7, [sp, #16]
   274fe:	ac44      	add	r4, sp, #272	; 0x110
   27500:	f7ff bbc5 	b.w	26c8e <_vfiprintf_r+0x252>
   27504:	9b03      	ldr	r3, [sp, #12]
   27506:	f013 0310 	ands.w	r3, r3, #16
   2750a:	d154      	bne.n	275b6 <_vfiprintf_r+0xb7a>
   2750c:	9a03      	ldr	r2, [sp, #12]
   2750e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   27512:	f000 816b 	beq.w	277ec <_vfiprintf_r+0xdb0>
   27516:	9907      	ldr	r1, [sp, #28]
   27518:	461a      	mov	r2, r3
   2751a:	f851 3b04 	ldr.w	r3, [r1], #4
   2751e:	9107      	str	r1, [sp, #28]
   27520:	b29b      	uxth	r3, r3
   27522:	2101      	movs	r1, #1
   27524:	e401      	b.n	26d2a <_vfiprintf_r+0x2ee>
   27526:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27528:	2a00      	cmp	r2, #0
   2752a:	d164      	bne.n	275f6 <_vfiprintf_r+0xbba>
   2752c:	4618      	mov	r0, r3
   2752e:	2101      	movs	r1, #1
   27530:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27534:	e4c9      	b.n	26eca <_vfiprintf_r+0x48e>
   27536:	2101      	movs	r1, #1
   27538:	4618      	mov	r0, r3
   2753a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   2753e:	e4c4      	b.n	26eca <_vfiprintf_r+0x48e>
   27540:	425b      	negs	r3, r3
   27542:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   27546:	9603      	str	r6, [sp, #12]
   27548:	202d      	movs	r0, #45	; 0x2d
   2754a:	2101      	movs	r1, #1
   2754c:	f7ff bbee 	b.w	26d2c <_vfiprintf_r+0x2f0>
   27550:	2b00      	cmp	r3, #0
   27552:	f000 8088 	beq.w	27666 <_vfiprintf_r+0xc2a>
   27556:	ee18 1a10 	vmov	r1, s16
   2755a:	aa18      	add	r2, sp, #96	; 0x60
   2755c:	4658      	mov	r0, fp
   2755e:	f7ff fa31 	bl	269c4 <__sprint_r.part.0>
   27562:	2800      	cmp	r0, #0
   27564:	f47f ac41 	bne.w	26dea <_vfiprintf_r+0x3ae>
   27568:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   2756c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27570:	1c41      	adds	r1, r0, #1
   27572:	e477      	b.n	26e64 <_vfiprintf_r+0x428>
   27574:	f898 1000 	ldrb.w	r1, [r8]
   27578:	9307      	str	r3, [sp, #28]
   2757a:	f7ff bad2 	b.w	26b22 <_vfiprintf_r+0xe6>
   2757e:	ac44      	add	r4, sp, #272	; 0x110
   27580:	f7ff bb85 	b.w	26c8e <_vfiprintf_r+0x252>
   27584:	f109 0908 	add.w	r9, r9, #8
   27588:	f10c 0101 	add.w	r1, ip, #1
   2758c:	4660      	mov	r0, ip
   2758e:	e4a0      	b.n	26ed2 <_vfiprintf_r+0x496>
   27590:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   27594:	f040 8197 	bne.w	278c6 <_vfiprintf_r+0xe8a>
   27598:	f851 3b04 	ldr.w	r3, [r1], #4
   2759c:	9107      	str	r1, [sp, #28]
   2759e:	f7ff bbc0 	b.w	26d22 <_vfiprintf_r+0x2e6>
   275a2:	05b3      	lsls	r3, r6, #22
   275a4:	f100 8188 	bmi.w	278b8 <_vfiprintf_r+0xe7c>
   275a8:	f852 3b04 	ldr.w	r3, [r2], #4
   275ac:	9207      	str	r2, [sp, #28]
   275ae:	17da      	asrs	r2, r3, #31
   275b0:	4611      	mov	r1, r2
   275b2:	f7ff bb52 	b.w	26c5a <_vfiprintf_r+0x21e>
   275b6:	9907      	ldr	r1, [sp, #28]
   275b8:	f851 3b04 	ldr.w	r3, [r1], #4
   275bc:	9107      	str	r1, [sp, #28]
   275be:	2101      	movs	r1, #1
   275c0:	f7ff bbb3 	b.w	26d2a <_vfiprintf_r+0x2ee>
   275c4:	9b07      	ldr	r3, [sp, #28]
   275c6:	9805      	ldr	r0, [sp, #20]
   275c8:	f853 1b04 	ldr.w	r1, [r3], #4
   275cc:	9307      	str	r3, [sp, #28]
   275ce:	17c2      	asrs	r2, r0, #31
   275d0:	e9c1 0200 	strd	r0, r2, [r1]
   275d4:	f7ff ba7d 	b.w	26ad2 <_vfiprintf_r+0x96>
   275d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   275da:	2b00      	cmp	r3, #0
   275dc:	f43f ab26 	beq.w	26c2c <_vfiprintf_r+0x1f0>
   275e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   275e2:	781b      	ldrb	r3, [r3, #0]
   275e4:	2b00      	cmp	r3, #0
   275e6:	f43f ab21 	beq.w	26c2c <_vfiprintf_r+0x1f0>
   275ea:	f898 1000 	ldrb.w	r1, [r8]
   275ee:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   275f2:	f7ff ba96 	b.w	26b22 <_vfiprintf_r+0xe6>
   275f6:	2302      	movs	r3, #2
   275f8:	aa11      	add	r2, sp, #68	; 0x44
   275fa:	931c      	str	r3, [sp, #112]	; 0x70
   275fc:	921b      	str	r2, [sp, #108]	; 0x6c
   275fe:	2001      	movs	r0, #1
   27600:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27604:	e6a2      	b.n	2734c <_vfiprintf_r+0x910>
   27606:	9603      	str	r6, [sp, #12]
   27608:	e571      	b.n	270ee <_vfiprintf_r+0x6b2>
   2760a:	4b3b      	ldr	r3, [pc, #236]	; (276f8 <_vfiprintf_r+0xcbc>)
   2760c:	930c      	str	r3, [sp, #48]	; 0x30
   2760e:	f016 0220 	ands.w	r2, r6, #32
   27612:	d059      	beq.n	276c8 <_vfiprintf_r+0xc8c>
   27614:	9b07      	ldr	r3, [sp, #28]
   27616:	3307      	adds	r3, #7
   27618:	f023 0307 	bic.w	r3, r3, #7
   2761c:	4618      	mov	r0, r3
   2761e:	685a      	ldr	r2, [r3, #4]
   27620:	f850 3b08 	ldr.w	r3, [r0], #8
   27624:	9007      	str	r0, [sp, #28]
   27626:	07f4      	lsls	r4, r6, #31
   27628:	d509      	bpl.n	2763e <_vfiprintf_r+0xc02>
   2762a:	ea53 0002 	orrs.w	r0, r3, r2
   2762e:	d006      	beq.n	2763e <_vfiprintf_r+0xc02>
   27630:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   27634:	2130      	movs	r1, #48	; 0x30
   27636:	f046 0602 	orr.w	r6, r6, #2
   2763a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   2763e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   27642:	9103      	str	r1, [sp, #12]
   27644:	2102      	movs	r1, #2
   27646:	f7ff bb70 	b.w	26d2a <_vfiprintf_r+0x2ee>
   2764a:	4b2c      	ldr	r3, [pc, #176]	; (276fc <_vfiprintf_r+0xcc0>)
   2764c:	930c      	str	r3, [sp, #48]	; 0x30
   2764e:	e7de      	b.n	2760e <_vfiprintf_r+0xbd2>
   27650:	9b07      	ldr	r3, [sp, #28]
   27652:	2101      	movs	r1, #1
   27654:	f853 2b04 	ldr.w	r2, [r3], #4
   27658:	9103      	str	r1, [sp, #12]
   2765a:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   2765e:	9307      	str	r3, [sp, #28]
   27660:	9104      	str	r1, [sp, #16]
   27662:	ac2b      	add	r4, sp, #172	; 0xac
   27664:	e4df      	b.n	27026 <_vfiprintf_r+0x5ea>
   27666:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   2766a:	2a00      	cmp	r2, #0
   2766c:	f040 8132 	bne.w	278d4 <_vfiprintf_r+0xe98>
   27670:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27672:	2a00      	cmp	r2, #0
   27674:	f47f ae62 	bne.w	2733c <_vfiprintf_r+0x900>
   27678:	4618      	mov	r0, r3
   2767a:	2101      	movs	r1, #1
   2767c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   27680:	e427      	b.n	26ed2 <_vfiprintf_r+0x496>
   27682:	2100      	movs	r1, #0
   27684:	2208      	movs	r2, #8
   27686:	a816      	add	r0, sp, #88	; 0x58
   27688:	9413      	str	r4, [sp, #76]	; 0x4c
   2768a:	f7fa ff29 	bl	224e0 <memset>
   2768e:	1c79      	adds	r1, r7, #1
   27690:	f000 80bc 	beq.w	2780c <_vfiprintf_r+0xdd0>
   27694:	2500      	movs	r5, #0
   27696:	9407      	str	r4, [sp, #28]
   27698:	462c      	mov	r4, r5
   2769a:	e00c      	b.n	276b6 <_vfiprintf_r+0xc7a>
   2769c:	a92b      	add	r1, sp, #172	; 0xac
   2769e:	4658      	mov	r0, fp
   276a0:	f7fe f962 	bl	25968 <_wcrtomb_r>
   276a4:	1c42      	adds	r2, r0, #1
   276a6:	4420      	add	r0, r4
   276a8:	f000 816b 	beq.w	27982 <_vfiprintf_r+0xf46>
   276ac:	42b8      	cmp	r0, r7
   276ae:	dc08      	bgt.n	276c2 <_vfiprintf_r+0xc86>
   276b0:	f000 8170 	beq.w	27994 <_vfiprintf_r+0xf58>
   276b4:	4604      	mov	r4, r0
   276b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   276b8:	5952      	ldr	r2, [r2, r5]
   276ba:	ab16      	add	r3, sp, #88	; 0x58
   276bc:	3504      	adds	r5, #4
   276be:	2a00      	cmp	r2, #0
   276c0:	d1ec      	bne.n	2769c <_vfiprintf_r+0xc60>
   276c2:	9404      	str	r4, [sp, #16]
   276c4:	9c07      	ldr	r4, [sp, #28]
   276c6:	e0af      	b.n	27828 <_vfiprintf_r+0xdec>
   276c8:	f016 0310 	ands.w	r3, r6, #16
   276cc:	9807      	ldr	r0, [sp, #28]
   276ce:	d10c      	bne.n	276ea <_vfiprintf_r+0xcae>
   276d0:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   276d4:	d005      	beq.n	276e2 <_vfiprintf_r+0xca6>
   276d6:	461a      	mov	r2, r3
   276d8:	f850 3b04 	ldr.w	r3, [r0], #4
   276dc:	9007      	str	r0, [sp, #28]
   276de:	b29b      	uxth	r3, r3
   276e0:	e7a1      	b.n	27626 <_vfiprintf_r+0xbea>
   276e2:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   276e6:	f040 80e1 	bne.w	278ac <_vfiprintf_r+0xe70>
   276ea:	f850 3b04 	ldr.w	r3, [r0], #4
   276ee:	9007      	str	r0, [sp, #28]
   276f0:	e799      	b.n	27626 <_vfiprintf_r+0xbea>
   276f2:	bf00      	nop
   276f4:	200019f4 	.word	0x200019f4
   276f8:	200019b4 	.word	0x200019b4
   276fc:	200019c8 	.word	0x200019c8
   27700:	9903      	ldr	r1, [sp, #12]
   27702:	9704      	str	r7, [sp, #16]
   27704:	ac44      	add	r4, sp, #272	; 0x110
   27706:	469e      	mov	lr, r3
   27708:	ee08 ba90 	vmov	s17, fp
   2770c:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   27710:	f04f 0c00 	mov.w	ip, #0
   27714:	4623      	mov	r3, r4
   27716:	e006      	b.n	27726 <_vfiprintf_r+0xcea>
   27718:	f1be 0f0a 	cmp.w	lr, #10
   2771c:	f172 0200 	sbcs.w	r2, r2, #0
   27720:	d339      	bcc.n	27796 <_vfiprintf_r+0xd5a>
   27722:	46a6      	mov	lr, r4
   27724:	462a      	mov	r2, r5
   27726:	49a6      	ldr	r1, [pc, #664]	; (279c0 <_vfiprintf_r+0xf84>)
   27728:	eb1e 0002 	adds.w	r0, lr, r2
   2772c:	f140 0000 	adc.w	r0, r0, #0
   27730:	460f      	mov	r7, r1
   27732:	fba1 1400 	umull	r1, r4, r1, r0
   27736:	f024 0103 	bic.w	r1, r4, #3
   2773a:	eb01 0194 	add.w	r1, r1, r4, lsr #2
   2773e:	1a40      	subs	r0, r0, r1
   27740:	ebbe 0100 	subs.w	r1, lr, r0
   27744:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   27748:	f162 0400 	sbc.w	r4, r2, #0
   2774c:	fb05 f501 	mul.w	r5, r5, r1
   27750:	fb07 5504 	mla	r5, r7, r4, r5
   27754:	fba1 4107 	umull	r4, r1, r1, r7
   27758:	440d      	add	r5, r1
   2775a:	2705      	movs	r7, #5
   2775c:	f004 0101 	and.w	r1, r4, #1
   27760:	fba1 1b07 	umull	r1, fp, r1, r7
   27764:	1809      	adds	r1, r1, r0
   27766:	0864      	lsrs	r4, r4, #1
   27768:	3130      	adds	r1, #48	; 0x30
   2776a:	f803 1c01 	strb.w	r1, [r3, #-1]
   2776e:	ea44 74c5 	orr.w	r4, r4, r5, lsl #31
   27772:	f10c 0c01 	add.w	ip, ip, #1
   27776:	3b01      	subs	r3, #1
   27778:	086d      	lsrs	r5, r5, #1
   2777a:	2e00      	cmp	r6, #0
   2777c:	d0cc      	beq.n	27718 <_vfiprintf_r+0xcdc>
   2777e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27780:	7809      	ldrb	r1, [r1, #0]
   27782:	4561      	cmp	r1, ip
   27784:	d1c8      	bne.n	27718 <_vfiprintf_r+0xcdc>
   27786:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   2778a:	d0c5      	beq.n	27718 <_vfiprintf_r+0xcdc>
   2778c:	f1be 0f0a 	cmp.w	lr, #10
   27790:	f172 0200 	sbcs.w	r2, r2, #0
   27794:	d26c      	bcs.n	27870 <_vfiprintf_r+0xe34>
   27796:	461c      	mov	r4, r3
   27798:	ab44      	add	r3, sp, #272	; 0x110
   2779a:	1b1b      	subs	r3, r3, r4
   2779c:	9f04      	ldr	r7, [sp, #16]
   2779e:	9e03      	ldr	r6, [sp, #12]
   277a0:	9304      	str	r3, [sp, #16]
   277a2:	ee18 ba90 	vmov	fp, s17
   277a6:	f7ff ba72 	b.w	26c8e <_vfiprintf_r+0x252>
   277aa:	9603      	str	r6, [sp, #12]
   277ac:	f7ff ba62 	b.w	26c74 <_vfiprintf_r+0x238>
   277b0:	4658      	mov	r0, fp
   277b2:	f7fa fa9f 	bl	21cf4 <__sinit>
   277b6:	f7ff b95b 	b.w	26a70 <_vfiprintf_r+0x34>
   277ba:	2901      	cmp	r1, #1
   277bc:	9603      	str	r6, [sp, #12]
   277be:	f47f accd 	bne.w	2715c <_vfiprintf_r+0x720>
   277c2:	f7ff ba5c 	b.w	26c7e <_vfiprintf_r+0x242>
   277c6:	9b07      	ldr	r3, [sp, #28]
   277c8:	9905      	ldr	r1, [sp, #20]
   277ca:	f853 2b04 	ldr.w	r2, [r3], #4
   277ce:	6011      	str	r1, [r2, #0]
   277d0:	9307      	str	r3, [sp, #28]
   277d2:	f7ff b97e 	b.w	26ad2 <_vfiprintf_r+0x96>
   277d6:	2f06      	cmp	r7, #6
   277d8:	463b      	mov	r3, r7
   277da:	9a03      	ldr	r2, [sp, #12]
   277dc:	4c79      	ldr	r4, [pc, #484]	; (279c4 <_vfiprintf_r+0xf88>)
   277de:	9207      	str	r2, [sp, #28]
   277e0:	bf28      	it	cs
   277e2:	2306      	movcs	r3, #6
   277e4:	9304      	str	r3, [sp, #16]
   277e6:	9303      	str	r3, [sp, #12]
   277e8:	f7ff bb25 	b.w	26e36 <_vfiprintf_r+0x3fa>
   277ec:	9b03      	ldr	r3, [sp, #12]
   277ee:	9907      	ldr	r1, [sp, #28]
   277f0:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   277f4:	bf14      	ite	ne
   277f6:	f851 3b04 	ldrne.w	r3, [r1], #4
   277fa:	f851 3b04 	ldreq.w	r3, [r1], #4
   277fe:	9107      	str	r1, [sp, #28]
   27800:	bf1c      	itt	ne
   27802:	4602      	movne	r2, r0
   27804:	b2db      	uxtbne	r3, r3
   27806:	2101      	movs	r1, #1
   27808:	f7ff ba8f 	b.w	26d2a <_vfiprintf_r+0x2ee>
   2780c:	ab16      	add	r3, sp, #88	; 0x58
   2780e:	9300      	str	r3, [sp, #0]
   27810:	2300      	movs	r3, #0
   27812:	4619      	mov	r1, r3
   27814:	aa13      	add	r2, sp, #76	; 0x4c
   27816:	4658      	mov	r0, fp
   27818:	f7fe f8cc 	bl	259b4 <_wcsrtombs_r>
   2781c:	4603      	mov	r3, r0
   2781e:	3301      	adds	r3, #1
   27820:	9004      	str	r0, [sp, #16]
   27822:	f000 80ae 	beq.w	27982 <_vfiprintf_r+0xf46>
   27826:	9413      	str	r4, [sp, #76]	; 0x4c
   27828:	9b04      	ldr	r3, [sp, #16]
   2782a:	2b00      	cmp	r3, #0
   2782c:	d030      	beq.n	27890 <_vfiprintf_r+0xe54>
   2782e:	2b63      	cmp	r3, #99	; 0x63
   27830:	dc63      	bgt.n	278fa <_vfiprintf_r+0xebe>
   27832:	2300      	movs	r3, #0
   27834:	9308      	str	r3, [sp, #32]
   27836:	ac2b      	add	r4, sp, #172	; 0xac
   27838:	2208      	movs	r2, #8
   2783a:	2100      	movs	r1, #0
   2783c:	a816      	add	r0, sp, #88	; 0x58
   2783e:	f7fa fe4f 	bl	224e0 <memset>
   27842:	9d04      	ldr	r5, [sp, #16]
   27844:	ab16      	add	r3, sp, #88	; 0x58
   27846:	9300      	str	r3, [sp, #0]
   27848:	aa13      	add	r2, sp, #76	; 0x4c
   2784a:	462b      	mov	r3, r5
   2784c:	4621      	mov	r1, r4
   2784e:	4658      	mov	r0, fp
   27850:	f7fe f8b0 	bl	259b4 <_wcsrtombs_r>
   27854:	4285      	cmp	r5, r0
   27856:	f040 80ab 	bne.w	279b0 <_vfiprintf_r+0xf74>
   2785a:	9b03      	ldr	r3, [sp, #12]
   2785c:	9a04      	ldr	r2, [sp, #16]
   2785e:	9307      	str	r3, [sp, #28]
   27860:	2300      	movs	r3, #0
   27862:	54a3      	strb	r3, [r4, r2]
   27864:	461f      	mov	r7, r3
   27866:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2786a:	9303      	str	r3, [sp, #12]
   2786c:	f7ff ba16 	b.w	26c9c <_vfiprintf_r+0x260>
   27870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   27872:	990d      	ldr	r1, [sp, #52]	; 0x34
   27874:	1a9b      	subs	r3, r3, r2
   27876:	4618      	mov	r0, r3
   27878:	9308      	str	r3, [sp, #32]
   2787a:	f7fa fec9 	bl	22610 <strncpy>
   2787e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   27880:	9b08      	ldr	r3, [sp, #32]
   27882:	784a      	ldrb	r2, [r1, #1]
   27884:	b10a      	cbz	r2, 2788a <_vfiprintf_r+0xe4e>
   27886:	3101      	adds	r1, #1
   27888:	910b      	str	r1, [sp, #44]	; 0x2c
   2788a:	f04f 0c00 	mov.w	ip, #0
   2788e:	e748      	b.n	27722 <_vfiprintf_r+0xce6>
   27890:	9b03      	ldr	r3, [sp, #12]
   27892:	9307      	str	r3, [sp, #28]
   27894:	9b04      	ldr	r3, [sp, #16]
   27896:	9303      	str	r3, [sp, #12]
   27898:	461f      	mov	r7, r3
   2789a:	9308      	str	r3, [sp, #32]
   2789c:	f7ff b9fe 	b.w	26c9c <_vfiprintf_r+0x260>
   278a0:	2101      	movs	r1, #1
   278a2:	4618      	mov	r0, r3
   278a4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   278a8:	f7ff bb13 	b.w	26ed2 <_vfiprintf_r+0x496>
   278ac:	f850 3b04 	ldr.w	r3, [r0], #4
   278b0:	9007      	str	r0, [sp, #28]
   278b2:	4622      	mov	r2, r4
   278b4:	b2db      	uxtb	r3, r3
   278b6:	e6b6      	b.n	27626 <_vfiprintf_r+0xbea>
   278b8:	f912 3b04 	ldrsb.w	r3, [r2], #4
   278bc:	9207      	str	r2, [sp, #28]
   278be:	17da      	asrs	r2, r3, #31
   278c0:	4611      	mov	r1, r2
   278c2:	f7ff b9ca 	b.w	26c5a <_vfiprintf_r+0x21e>
   278c6:	f851 3b04 	ldr.w	r3, [r1], #4
   278ca:	9107      	str	r1, [sp, #28]
   278cc:	4602      	mov	r2, r0
   278ce:	b2db      	uxtb	r3, r3
   278d0:	f7ff ba27 	b.w	26d22 <_vfiprintf_r+0x2e6>
   278d4:	2301      	movs	r3, #1
   278d6:	931c      	str	r3, [sp, #112]	; 0x70
   278d8:	2101      	movs	r1, #1
   278da:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   278de:	931b      	str	r3, [sp, #108]	; 0x6c
   278e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   278e4:	460b      	mov	r3, r1
   278e6:	f7ff bacd 	b.w	26e84 <_vfiprintf_r+0x448>
   278ea:	9b07      	ldr	r3, [sp, #28]
   278ec:	9905      	ldr	r1, [sp, #20]
   278ee:	f853 2b04 	ldr.w	r2, [r3], #4
   278f2:	9307      	str	r3, [sp, #28]
   278f4:	8011      	strh	r1, [r2, #0]
   278f6:	f7ff b8ec 	b.w	26ad2 <_vfiprintf_r+0x96>
   278fa:	1c59      	adds	r1, r3, #1
   278fc:	4658      	mov	r0, fp
   278fe:	f7f9 fc3f 	bl	21180 <_malloc_r>
   27902:	4604      	mov	r4, r0
   27904:	2800      	cmp	r0, #0
   27906:	d03c      	beq.n	27982 <_vfiprintf_r+0xf46>
   27908:	9008      	str	r0, [sp, #32]
   2790a:	e795      	b.n	27838 <_vfiprintf_r+0xdfc>
   2790c:	6d88      	ldr	r0, [r1, #88]	; 0x58
   2790e:	f7fb f91d 	bl	22b4c <__retarget_lock_release_recursive>
   27912:	f7ff b9e9 	b.w	26ce8 <_vfiprintf_r+0x2ac>
   27916:	9b03      	ldr	r3, [sp, #12]
   27918:	9307      	str	r3, [sp, #28]
   2791a:	e9cd 7703 	strd	r7, r7, [sp, #12]
   2791e:	9f08      	ldr	r7, [sp, #32]
   27920:	f7ff b9bc 	b.w	26c9c <_vfiprintf_r+0x260>
   27924:	9819      	ldr	r0, [sp, #100]	; 0x64
   27926:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   27928:	3001      	adds	r0, #1
   2792a:	e545      	b.n	273b8 <_vfiprintf_r+0x97c>
   2792c:	9b03      	ldr	r3, [sp, #12]
   2792e:	9307      	str	r3, [sp, #28]
   27930:	4620      	mov	r0, r4
   27932:	f7fb f965 	bl	22c00 <strlen>
   27936:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   2793a:	462f      	mov	r7, r5
   2793c:	9004      	str	r0, [sp, #16]
   2793e:	9303      	str	r3, [sp, #12]
   27940:	9508      	str	r5, [sp, #32]
   27942:	f7ff b9ab 	b.w	26c9c <_vfiprintf_r+0x260>
   27946:	ee18 1a10 	vmov	r1, s16
   2794a:	aa18      	add	r2, sp, #96	; 0x60
   2794c:	4658      	mov	r0, fp
   2794e:	f7ff f839 	bl	269c4 <__sprint_r.part.0>
   27952:	2800      	cmp	r0, #0
   27954:	f43f aa36 	beq.w	26dc4 <_vfiprintf_r+0x388>
   27958:	f7ff ba4d 	b.w	26df6 <_vfiprintf_r+0x3ba>
   2795c:	9819      	ldr	r0, [sp, #100]	; 0x64
   2795e:	3001      	adds	r0, #1
   27960:	e57a      	b.n	27458 <_vfiprintf_r+0xa1c>
   27962:	468c      	mov	ip, r1
   27964:	e46e      	b.n	27244 <_vfiprintf_r+0x808>
   27966:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   27968:	07d9      	lsls	r1, r3, #31
   2796a:	d405      	bmi.n	27978 <_vfiprintf_r+0xf3c>
   2796c:	89ab      	ldrh	r3, [r5, #12]
   2796e:	059a      	lsls	r2, r3, #22
   27970:	d402      	bmi.n	27978 <_vfiprintf_r+0xf3c>
   27972:	6da8      	ldr	r0, [r5, #88]	; 0x58
   27974:	f7fb f8ea 	bl	22b4c <__retarget_lock_release_recursive>
   27978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2797c:	9305      	str	r3, [sp, #20]
   2797e:	f7ff ba49 	b.w	26e14 <_vfiprintf_r+0x3d8>
   27982:	ee18 2a10 	vmov	r2, s16
   27986:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   2798a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2798e:	8193      	strh	r3, [r2, #12]
   27990:	f7ff ba35 	b.w	26dfe <_vfiprintf_r+0x3c2>
   27994:	9c07      	ldr	r4, [sp, #28]
   27996:	9704      	str	r7, [sp, #16]
   27998:	e746      	b.n	27828 <_vfiprintf_r+0xdec>
   2799a:	9b07      	ldr	r3, [sp, #28]
   2799c:	f898 1001 	ldrb.w	r1, [r8, #1]
   279a0:	f853 7b04 	ldr.w	r7, [r3], #4
   279a4:	9307      	str	r3, [sp, #28]
   279a6:	4690      	mov	r8, r2
   279a8:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   279ac:	f7ff b8b9 	b.w	26b22 <_vfiprintf_r+0xe6>
   279b0:	ee18 2a10 	vmov	r2, s16
   279b4:	8993      	ldrh	r3, [r2, #12]
   279b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   279ba:	8193      	strh	r3, [r2, #12]
   279bc:	f7ff ba15 	b.w	26dea <_vfiprintf_r+0x3ae>
   279c0:	cccccccd 	.word	0xcccccccd
   279c4:	200019dc 	.word	0x200019dc

000279c8 <__sbprintf>:
   279c8:	b570      	push	{r4, r5, r6, lr}
   279ca:	460c      	mov	r4, r1
   279cc:	8989      	ldrh	r1, [r1, #12]
   279ce:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
   279d2:	f021 0102 	bic.w	r1, r1, #2
   279d6:	f8ad 1014 	strh.w	r1, [sp, #20]
   279da:	6e61      	ldr	r1, [r4, #100]	; 0x64
   279dc:	911b      	str	r1, [sp, #108]	; 0x6c
   279de:	89e1      	ldrh	r1, [r4, #14]
   279e0:	f8ad 1016 	strh.w	r1, [sp, #22]
   279e4:	69e1      	ldr	r1, [r4, #28]
   279e6:	9109      	str	r1, [sp, #36]	; 0x24
   279e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
   279ea:	910b      	str	r1, [sp, #44]	; 0x2c
   279ec:	a91c      	add	r1, sp, #112	; 0x70
   279ee:	9102      	str	r1, [sp, #8]
   279f0:	9106      	str	r1, [sp, #24]
   279f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   279f6:	4606      	mov	r6, r0
   279f8:	9104      	str	r1, [sp, #16]
   279fa:	9107      	str	r1, [sp, #28]
   279fc:	a818      	add	r0, sp, #96	; 0x60
   279fe:	2100      	movs	r1, #0
   27a00:	e9cd 3200 	strd	r3, r2, [sp]
   27a04:	9108      	str	r1, [sp, #32]
   27a06:	f7fb f89b 	bl	22b40 <__retarget_lock_init_recursive>
   27a0a:	e9dd 3200 	ldrd	r3, r2, [sp]
   27a0e:	a902      	add	r1, sp, #8
   27a10:	4630      	mov	r0, r6
   27a12:	f7ff f813 	bl	26a3c <_vfiprintf_r>
   27a16:	1e05      	subs	r5, r0, #0
   27a18:	db07      	blt.n	27a2a <__sbprintf+0x62>
   27a1a:	a902      	add	r1, sp, #8
   27a1c:	4630      	mov	r0, r6
   27a1e:	f7fd fe11 	bl	25644 <_fflush_r>
   27a22:	2800      	cmp	r0, #0
   27a24:	bf18      	it	ne
   27a26:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
   27a2a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   27a2e:	065b      	lsls	r3, r3, #25
   27a30:	d503      	bpl.n	27a3a <__sbprintf+0x72>
   27a32:	89a3      	ldrh	r3, [r4, #12]
   27a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27a38:	81a3      	strh	r3, [r4, #12]
   27a3a:	9818      	ldr	r0, [sp, #96]	; 0x60
   27a3c:	f7fb f882 	bl	22b44 <__retarget_lock_close_recursive>
   27a40:	4628      	mov	r0, r5
   27a42:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
   27a46:	bd70      	pop	{r4, r5, r6, pc}

00027a48 <__fputwc>:
   27a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27a4c:	b082      	sub	sp, #8
   27a4e:	4682      	mov	sl, r0
   27a50:	4688      	mov	r8, r1
   27a52:	4614      	mov	r4, r2
   27a54:	f7fa fe40 	bl	226d8 <__locale_mb_cur_max>
   27a58:	2801      	cmp	r0, #1
   27a5a:	d103      	bne.n	27a64 <__fputwc+0x1c>
   27a5c:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   27a60:	2bfe      	cmp	r3, #254	; 0xfe
   27a62:	d936      	bls.n	27ad2 <__fputwc+0x8a>
   27a64:	f10d 0904 	add.w	r9, sp, #4
   27a68:	4642      	mov	r2, r8
   27a6a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   27a6e:	4649      	mov	r1, r9
   27a70:	4650      	mov	r0, sl
   27a72:	f7fd ff79 	bl	25968 <_wcrtomb_r>
   27a76:	1c42      	adds	r2, r0, #1
   27a78:	4606      	mov	r6, r0
   27a7a:	d032      	beq.n	27ae2 <__fputwc+0x9a>
   27a7c:	b320      	cbz	r0, 27ac8 <__fputwc+0x80>
   27a7e:	f89d c004 	ldrb.w	ip, [sp, #4]
   27a82:	2500      	movs	r5, #0
   27a84:	e009      	b.n	27a9a <__fputwc+0x52>
   27a86:	6823      	ldr	r3, [r4, #0]
   27a88:	1c5a      	adds	r2, r3, #1
   27a8a:	6022      	str	r2, [r4, #0]
   27a8c:	f883 c000 	strb.w	ip, [r3]
   27a90:	3501      	adds	r5, #1
   27a92:	42b5      	cmp	r5, r6
   27a94:	d218      	bcs.n	27ac8 <__fputwc+0x80>
   27a96:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   27a9a:	68a3      	ldr	r3, [r4, #8]
   27a9c:	3b01      	subs	r3, #1
   27a9e:	2b00      	cmp	r3, #0
   27aa0:	60a3      	str	r3, [r4, #8]
   27aa2:	daf0      	bge.n	27a86 <__fputwc+0x3e>
   27aa4:	69a7      	ldr	r7, [r4, #24]
   27aa6:	42bb      	cmp	r3, r7
   27aa8:	4661      	mov	r1, ip
   27aaa:	4622      	mov	r2, r4
   27aac:	4650      	mov	r0, sl
   27aae:	db02      	blt.n	27ab6 <__fputwc+0x6e>
   27ab0:	f1bc 0f0a 	cmp.w	ip, #10
   27ab4:	d1e7      	bne.n	27a86 <__fputwc+0x3e>
   27ab6:	f7fd fe43 	bl	25740 <__swbuf_r>
   27aba:	1c43      	adds	r3, r0, #1
   27abc:	d1e8      	bne.n	27a90 <__fputwc+0x48>
   27abe:	4606      	mov	r6, r0
   27ac0:	4630      	mov	r0, r6
   27ac2:	b002      	add	sp, #8
   27ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27ac8:	4646      	mov	r6, r8
   27aca:	4630      	mov	r0, r6
   27acc:	b002      	add	sp, #8
   27ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27ad2:	fa5f fc88 	uxtb.w	ip, r8
   27ad6:	f88d c004 	strb.w	ip, [sp, #4]
   27ada:	4606      	mov	r6, r0
   27adc:	f10d 0904 	add.w	r9, sp, #4
   27ae0:	e7cf      	b.n	27a82 <__fputwc+0x3a>
   27ae2:	89a3      	ldrh	r3, [r4, #12]
   27ae4:	4630      	mov	r0, r6
   27ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   27aea:	81a3      	strh	r3, [r4, #12]
   27aec:	b002      	add	sp, #8
   27aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27af2:	bf00      	nop

00027af4 <_fputwc_r>:
   27af4:	b530      	push	{r4, r5, lr}
   27af6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   27af8:	f013 0f01 	tst.w	r3, #1
   27afc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   27b00:	4614      	mov	r4, r2
   27b02:	b083      	sub	sp, #12
   27b04:	4605      	mov	r5, r0
   27b06:	b29a      	uxth	r2, r3
   27b08:	d101      	bne.n	27b0e <_fputwc_r+0x1a>
   27b0a:	0598      	lsls	r0, r3, #22
   27b0c:	d51c      	bpl.n	27b48 <_fputwc_r+0x54>
   27b0e:	0490      	lsls	r0, r2, #18
   27b10:	d406      	bmi.n	27b20 <_fputwc_r+0x2c>
   27b12:	6e62      	ldr	r2, [r4, #100]	; 0x64
   27b14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   27b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   27b1c:	81a3      	strh	r3, [r4, #12]
   27b1e:	6662      	str	r2, [r4, #100]	; 0x64
   27b20:	4622      	mov	r2, r4
   27b22:	4628      	mov	r0, r5
   27b24:	f7ff ff90 	bl	27a48 <__fputwc>
   27b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
   27b2a:	07da      	lsls	r2, r3, #31
   27b2c:	4605      	mov	r5, r0
   27b2e:	d402      	bmi.n	27b36 <_fputwc_r+0x42>
   27b30:	89a3      	ldrh	r3, [r4, #12]
   27b32:	059b      	lsls	r3, r3, #22
   27b34:	d502      	bpl.n	27b3c <_fputwc_r+0x48>
   27b36:	4628      	mov	r0, r5
   27b38:	b003      	add	sp, #12
   27b3a:	bd30      	pop	{r4, r5, pc}
   27b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27b3e:	f7fb f805 	bl	22b4c <__retarget_lock_release_recursive>
   27b42:	4628      	mov	r0, r5
   27b44:	b003      	add	sp, #12
   27b46:	bd30      	pop	{r4, r5, pc}
   27b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27b4a:	9101      	str	r1, [sp, #4]
   27b4c:	f7fa fffc 	bl	22b48 <__retarget_lock_acquire_recursive>
   27b50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27b54:	9901      	ldr	r1, [sp, #4]
   27b56:	b29a      	uxth	r2, r3
   27b58:	e7d9      	b.n	27b0e <_fputwc_r+0x1a>
   27b5a:	bf00      	nop

00027b5c <_wcsnrtombs_l>:
   27b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27b60:	b08b      	sub	sp, #44	; 0x2c
   27b62:	e9dd 8a15 	ldrd	r8, sl, [sp, #84]	; 0x54
   27b66:	9f14      	ldr	r7, [sp, #80]	; 0x50
   27b68:	9103      	str	r1, [sp, #12]
   27b6a:	4681      	mov	r9, r0
   27b6c:	9205      	str	r2, [sp, #20]
   27b6e:	461e      	mov	r6, r3
   27b70:	f1b8 0f00 	cmp.w	r8, #0
   27b74:	d05c      	beq.n	27c30 <_wcsnrtombs_l+0xd4>
   27b76:	9b03      	ldr	r3, [sp, #12]
   27b78:	2b00      	cmp	r3, #0
   27b7a:	d05e      	beq.n	27c3a <_wcsnrtombs_l+0xde>
   27b7c:	9b05      	ldr	r3, [sp, #20]
   27b7e:	681d      	ldr	r5, [r3, #0]
   27b80:	2f00      	cmp	r7, #0
   27b82:	d06a      	beq.n	27c5a <_wcsnrtombs_l+0xfe>
   27b84:	1e74      	subs	r4, r6, #1
   27b86:	b34e      	cbz	r6, 27bdc <_wcsnrtombs_l+0x80>
   27b88:	9b03      	ldr	r3, [sp, #12]
   27b8a:	9304      	str	r3, [sp, #16]
   27b8c:	3d04      	subs	r5, #4
   27b8e:	2600      	movs	r6, #0
   27b90:	9501      	str	r5, [sp, #4]
   27b92:	e00b      	b.n	27bac <_wcsnrtombs_l+0x50>
   27b94:	9b03      	ldr	r3, [sp, #12]
   27b96:	bb2b      	cbnz	r3, 27be4 <_wcsnrtombs_l+0x88>
   27b98:	9b01      	ldr	r3, [sp, #4]
   27b9a:	681a      	ldr	r2, [r3, #0]
   27b9c:	2a00      	cmp	r2, #0
   27b9e:	d03a      	beq.n	27c16 <_wcsnrtombs_l+0xba>
   27ba0:	45bc      	cmp	ip, r7
   27ba2:	d25c      	bcs.n	27c5e <_wcsnrtombs_l+0x102>
   27ba4:	3c01      	subs	r4, #1
   27ba6:	1c63      	adds	r3, r4, #1
   27ba8:	4666      	mov	r6, ip
   27baa:	d017      	beq.n	27bdc <_wcsnrtombs_l+0x80>
   27bac:	f8d8 3000 	ldr.w	r3, [r8]
   27bb0:	9302      	str	r3, [sp, #8]
   27bb2:	9b01      	ldr	r3, [sp, #4]
   27bb4:	f8da 50e0 	ldr.w	r5, [sl, #224]	; 0xe0
   27bb8:	f853 2f04 	ldr.w	r2, [r3, #4]!
   27bbc:	9301      	str	r3, [sp, #4]
   27bbe:	a907      	add	r1, sp, #28
   27bc0:	4643      	mov	r3, r8
   27bc2:	4648      	mov	r0, r9
   27bc4:	f8d8 b004 	ldr.w	fp, [r8, #4]
   27bc8:	47a8      	blx	r5
   27bca:	1c42      	adds	r2, r0, #1
   27bcc:	d03a      	beq.n	27c44 <_wcsnrtombs_l+0xe8>
   27bce:	eb00 0c06 	add.w	ip, r0, r6
   27bd2:	45bc      	cmp	ip, r7
   27bd4:	d9de      	bls.n	27b94 <_wcsnrtombs_l+0x38>
   27bd6:	9b02      	ldr	r3, [sp, #8]
   27bd8:	e9c8 3b00 	strd	r3, fp, [r8]
   27bdc:	4630      	mov	r0, r6
   27bde:	b00b      	add	sp, #44	; 0x2c
   27be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27be4:	2800      	cmp	r0, #0
   27be6:	dd0e      	ble.n	27c06 <_wcsnrtombs_l+0xaa>
   27be8:	9b04      	ldr	r3, [sp, #16]
   27bea:	9d01      	ldr	r5, [sp, #4]
   27bec:	4418      	add	r0, r3
   27bee:	1e5a      	subs	r2, r3, #1
   27bf0:	a907      	add	r1, sp, #28
   27bf2:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
   27bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
   27bfa:	f802 3f01 	strb.w	r3, [r2, #1]!
   27bfe:	4572      	cmp	r2, lr
   27c00:	d1f9      	bne.n	27bf6 <_wcsnrtombs_l+0x9a>
   27c02:	9501      	str	r5, [sp, #4]
   27c04:	9004      	str	r0, [sp, #16]
   27c06:	9b05      	ldr	r3, [sp, #20]
   27c08:	681a      	ldr	r2, [r3, #0]
   27c0a:	3204      	adds	r2, #4
   27c0c:	601a      	str	r2, [r3, #0]
   27c0e:	9b01      	ldr	r3, [sp, #4]
   27c10:	681a      	ldr	r2, [r3, #0]
   27c12:	2a00      	cmp	r2, #0
   27c14:	d1c4      	bne.n	27ba0 <_wcsnrtombs_l+0x44>
   27c16:	9b03      	ldr	r3, [sp, #12]
   27c18:	b10b      	cbz	r3, 27c1e <_wcsnrtombs_l+0xc2>
   27c1a:	9b05      	ldr	r3, [sp, #20]
   27c1c:	601a      	str	r2, [r3, #0]
   27c1e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
   27c22:	2200      	movs	r2, #0
   27c24:	4630      	mov	r0, r6
   27c26:	f8c8 2000 	str.w	r2, [r8]
   27c2a:	b00b      	add	sp, #44	; 0x2c
   27c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c30:	9b03      	ldr	r3, [sp, #12]
   27c32:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   27c36:	2b00      	cmp	r3, #0
   27c38:	d1a0      	bne.n	27b7c <_wcsnrtombs_l+0x20>
   27c3a:	9b05      	ldr	r3, [sp, #20]
   27c3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27c40:	681d      	ldr	r5, [r3, #0]
   27c42:	e79f      	b.n	27b84 <_wcsnrtombs_l+0x28>
   27c44:	4606      	mov	r6, r0
   27c46:	218a      	movs	r1, #138	; 0x8a
   27c48:	2200      	movs	r2, #0
   27c4a:	4630      	mov	r0, r6
   27c4c:	f8c9 1000 	str.w	r1, [r9]
   27c50:	f8c8 2000 	str.w	r2, [r8]
   27c54:	b00b      	add	sp, #44	; 0x2c
   27c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27c5a:	463e      	mov	r6, r7
   27c5c:	e7be      	b.n	27bdc <_wcsnrtombs_l+0x80>
   27c5e:	4666      	mov	r6, ip
   27c60:	e7bc      	b.n	27bdc <_wcsnrtombs_l+0x80>
   27c62:	bf00      	nop

00027c64 <_wcsnrtombs_r>:
   27c64:	b510      	push	{r4, lr}
   27c66:	b084      	sub	sp, #16
   27c68:	4c05      	ldr	r4, [pc, #20]	; (27c80 <_wcsnrtombs_r+0x1c>)
   27c6a:	9806      	ldr	r0, [sp, #24]
   27c6c:	9000      	str	r0, [sp, #0]
   27c6e:	9807      	ldr	r0, [sp, #28]
   27c70:	9001      	str	r0, [sp, #4]
   27c72:	4804      	ldr	r0, [pc, #16]	; (27c84 <_wcsnrtombs_r+0x20>)
   27c74:	6800      	ldr	r0, [r0, #0]
   27c76:	9402      	str	r4, [sp, #8]
   27c78:	f7ff ff70 	bl	27b5c <_wcsnrtombs_l>
   27c7c:	b004      	add	sp, #16
   27c7e:	bd10      	pop	{r4, pc}
   27c80:	2000333c 	.word	0x2000333c
   27c84:	200038c4 	.word	0x200038c4

00027c88 <___reboot_Teensyduino__veneer>:
   27c88:	f85f f000 	ldr.w	pc, [pc]	; 27c8c <___reboot_Teensyduino__veneer+0x4>
   27c8c:	60001fed 	.word	0x60001fed

00027c90 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer>:
   27c90:	f85f f000 	ldr.w	pc, [pc]	; 27c94 <___ZN11AudioStream17initialize_memoryEP18audio_block_structj_veneer+0x4>
   27c94:	60001825 	.word	0x60001825

00027c98 <___Z14set_audioClockilmb_veneer>:
   27c98:	f85f f000 	ldr.w	pc, [pc]	; 27c9c <___Z14set_audioClockilmb_veneer+0x4>
   27c9c:	60001655 	.word	0x60001655

00027ca0 <___ZN7TwoWire5beginEv_veneer>:
   27ca0:	f85f f000 	ldr.w	pc, [pc]	; 27ca4 <___ZN7TwoWire5beginEv_veneer+0x4>
   27ca4:	600017bd 	.word	0x600017bd

00027ca8 <___init_veneer>:
   27ca8:	f85f f000 	ldr.w	pc, [pc]	; 27cac <___init_veneer+0x4>
   27cac:	60002095 	.word	0x60002095

Disassembly of section .fini:

00027cb0 <_fini>:
   27cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27cb2:	bf00      	nop
